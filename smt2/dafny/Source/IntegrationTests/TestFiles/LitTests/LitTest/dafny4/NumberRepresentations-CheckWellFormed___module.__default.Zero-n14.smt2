(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 (T@U) T@U)
(declare-fun $generated@@20 (T@U) Int)
(declare-fun $generated@@21 () T@U)
(declare-fun $generated@@22 () Int)
(declare-fun $generated@@23 (T@U T@U) T@U)
(declare-fun $generated@@24 (T@U) T@U)
(declare-fun $generated@@25 (T@T T@U) T@U)
(declare-fun $generated@@26 () T@T)
(declare-fun $generated@@27 (T@U) Bool)
(declare-fun $generated@@28 (T@T T@U T@U) Bool)
(declare-fun $generated@@29 (T@U) T@U)
(declare-fun $generated@@30 (T@T T@U) T@U)
(declare-fun $generated@@31 (T@U Int) T@U)
(declare-fun $generated@@32 (Int) Int)
(declare-fun $generated@@33 (T@U Int) T@U)
(declare-fun $generated@@36 (T@U Int) T@U)
(declare-fun $generated@@42 (T@U T@U Int) Int)
(declare-fun $generated@@43 (T@U Int) Bool)
(declare-fun $generated@@44 (Int Int) Int)
(declare-fun $generated@@53 (T@U T@U) Bool)
(declare-fun $generated@@57 (T@T T@U) T@U)
(declare-fun $generated@@60 (T@U T@U T@U) Bool)
(declare-fun $generated@@61 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@78 (T@U T@U) Bool)
(declare-fun $generated@@88 (T@U) T@U)
(declare-fun $generated@@101 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@102 () T@T)
(declare-fun $generated@@103 () T@T)
(declare-fun $generated@@104 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@105 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@106 () T@T)
(declare-fun $generated@@107 (T@T T@T) T@T)
(declare-fun $generated@@108 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@109 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@110 (T@T) T@T)
(declare-fun $generated@@111 (T@T) T@T)
(declare-fun $generated@@160 (T@U Int Int) Bool)
(declare-fun $generated@@161 (T@U Int Int) Bool)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (= ($generated@@19 $generated) $generated@@0))
(assert (= ($generated@@20 $generated@@21) 0))
(assert (= ($generated@@3 $generated@@26) 3))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@34 T@U) ($generated@@35 T@U) ) (!  (=> (or ($generated@@27 ($generated@@25 $generated@@26 $generated@@35)) (and (< 0 $generated@@22) ($generated@@28 $generated@@26 $generated@@35 ($generated@@29 $generated)))) (and (=> (and (or (not (= ($generated@@20 ($generated@@25 $generated@@26 $generated@@35)) 0)) (not true)) (= ($generated@@10 ($generated@@30 $generated@@5 ($generated@@31 ($generated@@25 $generated@@26 $generated@@35) (- ($generated@@20 ($generated@@25 $generated@@26 $generated@@35)) 1)))) ($generated@@32 0))) ($generated@@27 ($generated@@33 ($generated@@25 $generated@@26 $generated@@35) (- ($generated@@20 ($generated@@25 $generated@@26 $generated@@35)) 1)))) (= ($generated@@23 ($generated@@24 $generated@@34) ($generated@@25 $generated@@26 $generated@@35)) (ite  (and (or (not (= ($generated@@20 ($generated@@25 $generated@@26 $generated@@35)) 0)) (not true)) (= ($generated@@10 ($generated@@30 $generated@@5 ($generated@@31 ($generated@@25 $generated@@26 $generated@@35) (- ($generated@@20 ($generated@@25 $generated@@26 $generated@@35)) 1)))) ($generated@@32 0))) ($generated@@23 ($generated@@24 $generated@@34) ($generated@@33 ($generated@@25 $generated@@26 $generated@@35) (- ($generated@@20 ($generated@@25 $generated@@26 $generated@@35)) 1))) $generated@@35))))
 :weight 3
 :pattern ( ($generated@@23 ($generated@@24 $generated@@34) ($generated@@25 $generated@@26 $generated@@35)))
))))
(assert (forall (($generated@@37 T@U) ($generated@@38 Int) ) (!  (=> (= $generated@@38 0) (= ($generated@@36 $generated@@37 $generated@@38) $generated@@37))
 :pattern ( ($generated@@36 $generated@@37 $generated@@38))
)))
(assert (forall (($generated@@39 Int) ) (! (= ($generated@@32 $generated@@39) $generated@@39)
 :pattern ( ($generated@@32 $generated@@39))
)))
(assert (forall (($generated@@40 T@U) ($generated@@41 T@T) ) (! (= ($generated@@25 $generated@@41 $generated@@40) $generated@@40)
 :pattern ( ($generated@@25 $generated@@41 $generated@@40))
)))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@45 T@U) ($generated@@46 T@U) ($generated@@47 Int) ) (!  (=> (or ($generated@@43 ($generated@@25 $generated@@26 $generated@@46) ($generated@@32 $generated@@47)) (and (< 0 $generated@@22) (and ($generated@@28 $generated@@26 $generated@@46 ($generated@@29 $generated)) (<= ($generated@@32 2) ($generated@@32 $generated@@47))))) (and (=> (or (not (= ($generated@@20 ($generated@@25 $generated@@26 $generated@@46)) ($generated@@32 0))) (not true)) ($generated@@43 ($generated@@25 $generated@@26 ($generated@@36 ($generated@@25 $generated@@26 $generated@@46) ($generated@@32 1))) ($generated@@32 $generated@@47))) (= ($generated@@42 ($generated@@24 $generated@@45) ($generated@@25 $generated@@26 $generated@@46) ($generated@@32 $generated@@47)) (ite (= ($generated@@20 ($generated@@25 $generated@@26 $generated@@46)) ($generated@@32 0)) 0 (+ ($generated@@10 ($generated@@30 $generated@@5 ($generated@@31 ($generated@@25 $generated@@26 $generated@@46) ($generated@@32 0)))) ($generated@@44 ($generated@@32 $generated@@47) ($generated@@32 ($generated@@42 ($generated@@24 $generated@@45) ($generated@@25 $generated@@26 ($generated@@36 ($generated@@25 $generated@@26 $generated@@46) ($generated@@32 1))) ($generated@@32 $generated@@47)))))))))
 :weight 3
 :pattern ( ($generated@@42 ($generated@@24 $generated@@45) ($generated@@25 $generated@@26 $generated@@46) ($generated@@32 $generated@@47)))
))))
(assert (forall (($generated@@48 T@U) ($generated@@49 Int) ($generated@@50 Int) ) (!  (=> (and (and (<= 0 $generated@@50) (< $generated@@50 $generated@@49)) (< $generated@@50 ($generated@@20 $generated@@48))) (= ($generated@@31 ($generated@@33 $generated@@48 $generated@@49) $generated@@50) ($generated@@31 $generated@@48 $generated@@50)))
 :weight 25
 :pattern ( ($generated@@31 ($generated@@33 $generated@@48 $generated@@49) $generated@@50))
 :pattern ( ($generated@@31 $generated@@48 $generated@@50) ($generated@@33 $generated@@48 $generated@@49))
)))
(assert (forall (($generated@@51 T@U) ($generated@@52 Int) ) (!  (=> (and (<= 0 $generated@@52) (<= $generated@@52 ($generated@@20 $generated@@51))) (= ($generated@@20 ($generated@@36 $generated@@51 $generated@@52)) (- ($generated@@20 $generated@@51) $generated@@52)))
 :pattern ( ($generated@@20 ($generated@@36 $generated@@51 $generated@@52)))
)))
(assert (forall (($generated@@54 T@U) ($generated@@55 T@U) ) (! (= ($generated@@53 $generated@@54 $generated@@55)  (and (= ($generated@@20 $generated@@54) ($generated@@20 $generated@@55)) (forall (($generated@@56 Int) ) (!  (=> (and (<= 0 $generated@@56) (< $generated@@56 ($generated@@20 $generated@@54))) (= ($generated@@31 $generated@@54 $generated@@56) ($generated@@31 $generated@@55 $generated@@56)))
 :pattern ( ($generated@@31 $generated@@54 $generated@@56))
 :pattern ( ($generated@@31 $generated@@55 $generated@@56))
))))
 :pattern ( ($generated@@53 $generated@@54 $generated@@55))
)))
(assert (forall (($generated@@58 T@U) ($generated@@59 T@T) ) (! (= ($generated@@57 $generated@@59 ($generated@@30 $generated@@59 $generated@@58)) $generated@@58)
 :pattern ( ($generated@@30 $generated@@59 $generated@@58))
)))
(assert (forall (($generated@@62 T@U) ($generated@@63 T@U) ($generated@@64 T@U) ($generated@@65 T@T) ) (! (= ($generated@@60 ($generated@@57 $generated@@65 $generated@@62) $generated@@63 $generated@@64) ($generated@@61 $generated@@65 $generated@@62 $generated@@63 $generated@@64))
 :pattern ( ($generated@@60 ($generated@@57 $generated@@65 $generated@@62) $generated@@63 $generated@@64))
)))
(assert (forall (($generated@@66 T@U) ($generated@@67 Int) ($generated@@68 Int) ) (!  (=> (and (and (<= 0 $generated@@67) (<= 0 $generated@@68)) (< $generated@@68 (- ($generated@@20 $generated@@66) $generated@@67))) (= ($generated@@31 ($generated@@36 $generated@@66 $generated@@67) $generated@@68) ($generated@@31 $generated@@66 (+ $generated@@68 $generated@@67))))
 :weight 25
 :pattern ( ($generated@@31 ($generated@@36 $generated@@66 $generated@@67) $generated@@68))
)))
(assert (forall (($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 Int) ) (! (= ($generated@@42 ($generated@@24 $generated@@69) $generated@@70 $generated@@71) ($generated@@42 $generated@@69 $generated@@70 $generated@@71))
 :pattern ( ($generated@@42 ($generated@@24 $generated@@69) $generated@@70 $generated@@71))
)))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@72 T@U) ($generated@@73 T@U) ) (!  (=> (or ($generated@@27 $generated@@73) (and (< 0 $generated@@22) ($generated@@28 $generated@@26 $generated@@73 ($generated@@29 $generated)))) (and (=> (and (or (not (= ($generated@@20 $generated@@73) 0)) (not true)) (= ($generated@@10 ($generated@@30 $generated@@5 ($generated@@31 $generated@@73 (- ($generated@@20 $generated@@73) 1)))) ($generated@@32 0))) ($generated@@27 ($generated@@33 $generated@@73 (- ($generated@@20 $generated@@73) 1)))) (= ($generated@@23 ($generated@@24 $generated@@72) $generated@@73) (ite  (and (or (not (= ($generated@@20 $generated@@73) 0)) (not true)) (= ($generated@@10 ($generated@@30 $generated@@5 ($generated@@31 $generated@@73 (- ($generated@@20 $generated@@73) 1)))) ($generated@@32 0))) ($generated@@23 $generated@@72 ($generated@@33 $generated@@73 (- ($generated@@20 $generated@@73) 1))) $generated@@73))))
 :pattern ( ($generated@@23 ($generated@@24 $generated@@72) $generated@@73))
))))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@U) ) (!  (=> ($generated@@53 $generated@@74 $generated@@75) (= $generated@@74 $generated@@75))
 :pattern ( ($generated@@53 $generated@@74 $generated@@75))
)))
(assert (forall (($generated@@76 T@U) ($generated@@77 Int) ) (!  (=> (and (<= 0 $generated@@77) (<= $generated@@77 ($generated@@20 $generated@@76))) (= ($generated@@20 ($generated@@33 $generated@@76 $generated@@77)) $generated@@77))
 :pattern ( ($generated@@20 ($generated@@33 $generated@@76 $generated@@77)))
)))
(assert (forall (($generated@@79 T@U) ) (!  (=> ($generated@@78 $generated@@79 $generated) (and (= ($generated@@57 $generated@@5 ($generated@@30 $generated@@5 $generated@@79)) $generated@@79) ($generated@@28 $generated@@5 ($generated@@30 $generated@@5 $generated@@79) $generated)))
 :pattern ( ($generated@@78 $generated@@79 $generated))
)))
(assert (forall (($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@T) ) (! (= ($generated@@78 ($generated@@57 $generated@@82 $generated@@80) $generated@@81) ($generated@@28 $generated@@82 $generated@@80 $generated@@81))
 :pattern ( ($generated@@78 ($generated@@57 $generated@@82 $generated@@80) $generated@@81))
)))
(assert (forall (($generated@@83 T@U) ) (! (<= 0 ($generated@@20 $generated@@83))
 :pattern ( ($generated@@20 $generated@@83))
)))
(assert (forall (($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (! (= ($generated@@61 $generated@@26 $generated@@84 ($generated@@29 $generated@@85) $generated@@86) (forall (($generated@@87 Int) ) (!  (=> (and (<= 0 $generated@@87) (< $generated@@87 ($generated@@20 $generated@@84))) ($generated@@60 ($generated@@31 $generated@@84 $generated@@87) $generated@@85 $generated@@86))
 :pattern ( ($generated@@31 $generated@@84 $generated@@87))
)))
 :pattern ( ($generated@@61 $generated@@26 $generated@@84 ($generated@@29 $generated@@85) $generated@@86))
)))
(assert (forall (($generated@@89 T@U) ) (! (= ($generated@@88 ($generated@@29 $generated@@89)) $generated@@89)
 :pattern ( ($generated@@29 $generated@@89))
)))
(assert (forall (($generated@@90 T@U) ) (! (= ($generated@@19 ($generated@@29 $generated@@90)) $generated@@1)
 :pattern ( ($generated@@29 $generated@@90))
)))
(assert (forall (($generated@@91 T@U) ($generated@@92 T@T) ) (! (= ($generated@@30 $generated@@92 ($generated@@57 $generated@@92 $generated@@91)) $generated@@91)
 :pattern ( ($generated@@57 $generated@@92 $generated@@91))
)))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 Int) ) (!  (=> (or ($generated@@43 $generated@@94 $generated@@95) (and (< 0 $generated@@22) (and ($generated@@28 $generated@@26 $generated@@94 ($generated@@29 $generated)) (<= ($generated@@32 2) $generated@@95)))) (and (=> (or (not (= ($generated@@20 $generated@@94) ($generated@@32 0))) (not true)) ($generated@@43 ($generated@@36 $generated@@94 ($generated@@32 1)) $generated@@95)) (= ($generated@@42 ($generated@@24 $generated@@93) $generated@@94 $generated@@95) (ite (= ($generated@@20 $generated@@94) ($generated@@32 0)) 0 (+ ($generated@@10 ($generated@@30 $generated@@5 ($generated@@31 $generated@@94 ($generated@@32 0)))) ($generated@@44 $generated@@95 ($generated@@42 $generated@@93 ($generated@@36 $generated@@94 ($generated@@32 1)) $generated@@95)))))))
 :pattern ( ($generated@@42 ($generated@@24 $generated@@93) $generated@@94 $generated@@95))
))))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 Int) ) (!  (=> (or ($generated@@43 ($generated@@25 $generated@@26 $generated@@97) $generated@@98) (and (< 0 $generated@@22) (and ($generated@@28 $generated@@26 $generated@@97 ($generated@@29 $generated)) (<= ($generated@@32 2) $generated@@98)))) (and (=> (or (not (= ($generated@@20 ($generated@@25 $generated@@26 $generated@@97)) ($generated@@32 0))) (not true)) ($generated@@43 ($generated@@25 $generated@@26 ($generated@@36 ($generated@@25 $generated@@26 $generated@@97) ($generated@@32 1))) $generated@@98)) (= ($generated@@42 ($generated@@24 $generated@@96) ($generated@@25 $generated@@26 $generated@@97) $generated@@98) (ite (= ($generated@@20 ($generated@@25 $generated@@26 $generated@@97)) ($generated@@32 0)) 0 (+ ($generated@@10 ($generated@@30 $generated@@5 ($generated@@31 ($generated@@25 $generated@@26 $generated@@97) ($generated@@32 0)))) ($generated@@44 $generated@@98 ($generated@@42 ($generated@@24 $generated@@96) ($generated@@25 $generated@@26 ($generated@@36 ($generated@@25 $generated@@26 $generated@@97) ($generated@@32 1))) $generated@@98)))))))
 :weight 3
 :pattern ( ($generated@@42 ($generated@@24 $generated@@96) ($generated@@25 $generated@@26 $generated@@97) $generated@@98))
))))
(assert (forall (($generated@@99 T@U) ($generated@@100 T@U) ) (! (= ($generated@@23 ($generated@@24 $generated@@99) $generated@@100) ($generated@@23 $generated@@99 $generated@@100))
 :pattern ( ($generated@@23 ($generated@@24 $generated@@99) $generated@@100))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@112 T@T) ($generated@@113 T@T) ($generated@@114 T@T) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ) (! (= ($generated@@101 $generated@@112 $generated@@113 $generated@@114 ($generated@@108 $generated@@112 $generated@@113 $generated@@114 $generated@@116 $generated@@117 $generated@@118 $generated@@115) $generated@@117 $generated@@118) $generated@@115)
 :weight 0
)) (and (forall (($generated@@119 T@T) ($generated@@120 T@T) ($generated@@121 T@T) ($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 T@U) ) (!  (or (= $generated@@124 $generated@@126) (= ($generated@@101 $generated@@119 $generated@@120 $generated@@121 ($generated@@108 $generated@@119 $generated@@120 $generated@@121 $generated@@123 $generated@@124 $generated@@125 $generated@@122) $generated@@126 $generated@@127) ($generated@@101 $generated@@119 $generated@@120 $generated@@121 $generated@@123 $generated@@126 $generated@@127)))
 :weight 0
)) (forall (($generated@@128 T@T) ($generated@@129 T@T) ($generated@@130 T@T) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ) (!  (or (= $generated@@134 $generated@@136) (= ($generated@@101 $generated@@128 $generated@@129 $generated@@130 ($generated@@108 $generated@@128 $generated@@129 $generated@@130 $generated@@132 $generated@@133 $generated@@134 $generated@@131) $generated@@135 $generated@@136) ($generated@@101 $generated@@128 $generated@@129 $generated@@130 $generated@@132 $generated@@135 $generated@@136)))
 :weight 0
)))) (= ($generated@@3 $generated@@102) 4)) (= ($generated@@3 $generated@@103) 5)) (forall (($generated@@137 T@T) ($generated@@138 T@T) ($generated@@139 T@U) ($generated@@140 T@U) ($generated@@141 T@U) ) (! (= ($generated@@105 $generated@@137 $generated@@138 ($generated@@109 $generated@@137 $generated@@138 $generated@@140 $generated@@141 $generated@@139) $generated@@141) $generated@@139)
 :weight 0
))) (forall (($generated@@142 T@T) ($generated@@143 T@T) ($generated@@144 T@U) ($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 T@U) ) (!  (or (= $generated@@146 $generated@@147) (= ($generated@@105 $generated@@142 $generated@@143 ($generated@@109 $generated@@142 $generated@@143 $generated@@145 $generated@@146 $generated@@144) $generated@@147) ($generated@@105 $generated@@142 $generated@@143 $generated@@145 $generated@@147)))
 :weight 0
))) (= ($generated@@3 $generated@@106) 6)) (forall (($generated@@148 T@T) ($generated@@149 T@T) ) (= ($generated@@3 ($generated@@107 $generated@@148 $generated@@149)) 7))) (forall (($generated@@150 T@T) ($generated@@151 T@T) ) (! (= ($generated@@110 ($generated@@107 $generated@@150 $generated@@151)) $generated@@150)
 :pattern ( ($generated@@107 $generated@@150 $generated@@151))
))) (forall (($generated@@152 T@T) ($generated@@153 T@T) ) (! (= ($generated@@111 ($generated@@107 $generated@@152 $generated@@153)) $generated@@153)
 :pattern ( ($generated@@107 $generated@@152 $generated@@153))
))))
(assert (forall (($generated@@154 T@U) ($generated@@155 T@U) ($generated@@156 T@U) ($generated@@157 Bool) ($generated@@158 T@U) ($generated@@159 T@U) ) (! (= ($generated@@8 ($generated@@101 $generated@@102 $generated@@103 $generated@@4 ($generated@@104 $generated@@154 $generated@@155 $generated@@156 $generated@@157) $generated@@158 $generated@@159))  (=> (and (or (not (= $generated@@158 $generated@@154)) (not true)) ($generated@@8 ($generated@@30 $generated@@4 ($generated@@105 $generated@@103 $generated@@106 ($generated@@105 $generated@@102 ($generated@@107 $generated@@103 $generated@@106) $generated@@155 $generated@@158) $generated@@156)))) $generated@@157))
 :pattern ( ($generated@@101 $generated@@102 $generated@@103 $generated@@4 ($generated@@104 $generated@@154 $generated@@155 $generated@@156 $generated@@157) $generated@@158 $generated@@159))
)))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@162 T@U) ($generated@@163 Int) ($generated@@164 Int) ) (!  (=> (or ($generated@@161 $generated@@162 $generated@@163 $generated@@164) (and (< 0 $generated@@22) ($generated@@28 $generated@@26 $generated@@162 ($generated@@29 $generated)))) (= ($generated@@160 $generated@@162 $generated@@163 $generated@@164)  (and (and (<= ($generated@@32 2) $generated@@164) (and (<= $generated@@163 ($generated@@32 0)) (< 0 (+ $generated@@163 $generated@@164)))) (forall (($generated@@165 Int) ) (!  (and (=> (and (<= ($generated@@32 0) $generated@@165) (< $generated@@165 ($generated@@20 $generated@@162))) (<= $generated@@163 ($generated@@10 ($generated@@30 $generated@@5 ($generated@@31 $generated@@162 $generated@@165))))) (=> (and (<= ($generated@@32 0) $generated@@165) (< $generated@@165 ($generated@@20 $generated@@162))) (< ($generated@@10 ($generated@@30 $generated@@5 ($generated@@31 $generated@@162 $generated@@165))) (+ $generated@@163 $generated@@164))))
 :pattern ( ($generated@@30 $generated@@5 ($generated@@31 $generated@@162 $generated@@165)))
)))))
 :pattern ( ($generated@@160 $generated@@162 $generated@@163 $generated@@164))
))))
(assert (forall (($generated@@166 Int) ($generated@@167 Int) ) (! (= ($generated@@44 $generated@@166 $generated@@167) (* $generated@@166 $generated@@167))
 :pattern ( ($generated@@44 $generated@@166 $generated@@167))
)))
(assert (forall (($generated@@168 T@U) ($generated@@169 T@U) ) (!  (=> ($generated@@78 $generated@@168 ($generated@@29 $generated@@169)) (and (= ($generated@@57 $generated@@26 ($generated@@30 $generated@@26 $generated@@168)) $generated@@168) ($generated@@28 $generated@@26 ($generated@@30 $generated@@26 $generated@@168) ($generated@@29 $generated@@169))))
 :pattern ( ($generated@@78 $generated@@168 ($generated@@29 $generated@@169)))
)))
(assert (forall (($generated@@170 T@U) ($generated@@171 Int) ($generated@@172 Int) ) (!  (=> (and (and (<= 0 $generated@@171) (<= $generated@@171 $generated@@172)) (< $generated@@172 ($generated@@20 $generated@@170))) (= ($generated@@31 ($generated@@36 $generated@@170 $generated@@171) (- $generated@@172 $generated@@171)) ($generated@@31 $generated@@170 $generated@@172)))
 :weight 25
 :pattern ( ($generated@@31 $generated@@170 $generated@@172) ($generated@@36 $generated@@170 $generated@@171))
)))
(assert (forall (($generated@@173 T@U) ($generated@@174 Int) ($generated@@175 Int) ) (!  (=> (and (and (<= 0 $generated@@174) (<= 0 $generated@@175)) (<= (+ $generated@@174 $generated@@175) ($generated@@20 $generated@@173))) (= ($generated@@36 ($generated@@36 $generated@@173 $generated@@174) $generated@@175) ($generated@@36 $generated@@173 (+ $generated@@174 $generated@@175))))
 :pattern ( ($generated@@36 ($generated@@36 $generated@@173 $generated@@174) $generated@@175))
)))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@176 T@U) ($generated@@177 Int) ($generated@@178 Int) ) (!  (=> (or ($generated@@161 ($generated@@25 $generated@@26 $generated@@176) ($generated@@32 $generated@@177) ($generated@@32 $generated@@178)) (and (< 0 $generated@@22) ($generated@@28 $generated@@26 $generated@@176 ($generated@@29 $generated)))) (= ($generated@@160 ($generated@@25 $generated@@26 $generated@@176) ($generated@@32 $generated@@177) ($generated@@32 $generated@@178))  (and (and (<= ($generated@@32 2) ($generated@@32 $generated@@178)) (and (<= ($generated@@32 $generated@@177) ($generated@@32 0)) (< 0 (+ $generated@@177 $generated@@178)))) (forall (($generated@@179 Int) ) (!  (and (=> (and (<= ($generated@@32 0) $generated@@179) (< $generated@@179 ($generated@@20 ($generated@@25 $generated@@26 $generated@@176)))) (<= ($generated@@32 $generated@@177) ($generated@@10 ($generated@@30 $generated@@5 ($generated@@31 ($generated@@25 $generated@@26 $generated@@176) $generated@@179))))) (=> (and (<= ($generated@@32 0) $generated@@179) (< $generated@@179 ($generated@@20 ($generated@@25 $generated@@26 $generated@@176)))) (< ($generated@@10 ($generated@@30 $generated@@5 ($generated@@31 ($generated@@25 $generated@@26 $generated@@176) $generated@@179))) (+ $generated@@177 $generated@@178))))
 :pattern ( ($generated@@30 $generated@@5 ($generated@@31 $generated@@176 $generated@@179)))
)))))
 :weight 3
 :pattern ( ($generated@@160 ($generated@@25 $generated@@26 $generated@@176) ($generated@@32 $generated@@177) ($generated@@32 $generated@@178)))
))))
(assert (forall (($generated@@180 Int) ) (! (= ($generated@@57 $generated@@5 ($generated@@9 ($generated@@32 $generated@@180))) ($generated@@25 $generated@@106 ($generated@@57 $generated@@5 ($generated@@9 $generated@@180))))
 :pattern ( ($generated@@57 $generated@@5 ($generated@@9 ($generated@@32 $generated@@180))))
)))
(assert (forall (($generated@@181 T@U) ($generated@@182 T@T) ) (! (= ($generated@@57 $generated@@182 ($generated@@25 $generated@@182 $generated@@181)) ($generated@@25 $generated@@106 ($generated@@57 $generated@@182 $generated@@181)))
 :pattern ( ($generated@@57 $generated@@182 ($generated@@25 $generated@@182 $generated@@181)))
)))
(assert (forall (($generated@@183 T@U) ) (!  (=> (= ($generated@@20 $generated@@183) 0) (= $generated@@183 $generated@@21))
 :pattern ( ($generated@@20 $generated@@183))
)))
(assert (forall (($generated@@184 T@U) ($generated@@185 Int) ) (!  (=> (= $generated@@185 0) (= ($generated@@33 $generated@@184 $generated@@185) $generated@@21))
 :pattern ( ($generated@@33 $generated@@184 $generated@@185))
)))
(assert (forall (($generated@@186 T@U) ($generated@@187 T@U) ) (! ($generated@@61 $generated@@5 $generated@@187 $generated $generated@@186)
 :pattern ( ($generated@@61 $generated@@5 $generated@@187 $generated $generated@@186))
)))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@188 T@U) ($generated@@189 T@U) ) (!  (=> (or ($generated@@27 $generated@@189) (and (< 0 $generated@@22) ($generated@@28 $generated@@26 $generated@@189 ($generated@@29 $generated)))) ($generated@@28 $generated@@26 ($generated@@23 $generated@@188 $generated@@189) ($generated@@29 $generated)))
 :pattern ( ($generated@@23 $generated@@188 $generated@@189))
))))
(assert (forall (($generated@@190 T@U) ($generated@@191 T@U) ) (! (= ($generated@@28 $generated@@26 $generated@@190 ($generated@@29 $generated@@191)) (forall (($generated@@192 Int) ) (!  (=> (and (<= 0 $generated@@192) (< $generated@@192 ($generated@@20 $generated@@190))) ($generated@@78 ($generated@@31 $generated@@190 $generated@@192) $generated@@191))
 :pattern ( ($generated@@31 $generated@@190 $generated@@192))
)))
 :pattern ( ($generated@@28 $generated@@26 $generated@@190 ($generated@@29 $generated@@191)))
)))
(assert (forall (($generated@@193 T@U) ) (! ($generated@@28 $generated@@5 $generated@@193 $generated)
 :pattern ( ($generated@@28 $generated@@5 $generated@@193 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@194 () T@U)
(declare-fun $generated@@195 () T@U)
(declare-fun $generated@@196 () T@U)
(declare-fun $generated@@197 () T@U)
(declare-fun $generated@@198 () Int)
(declare-fun $generated@@199 () Int)
(declare-fun $generated@@200 () T@U)
(declare-fun $generated@@201 (T@U) Bool)
(declare-fun $generated@@202 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@203  (=> (and (and (= $generated@@194 ($generated@@104 $generated@@195 $generated@@196 $generated@@2 false)) ($generated@@61 $generated@@26 $generated@@197 ($generated@@29 $generated) $generated@@196)) (and ($generated@@61 $generated@@5 ($generated@@9 $generated@@198) $generated $generated@@196) ($generated@@61 $generated@@5 ($generated@@9 $generated@@199) $generated $generated@@196))) (=> (and (and (and ($generated@@161 $generated@@197 $generated@@198 $generated@@199) ($generated@@160 $generated@@197 $generated@@198 $generated@@199)) (and ($generated@@61 $generated@@26 $generated@@197 ($generated@@29 $generated) $generated@@196) ($generated@@27 $generated@@197))) (and (and ($generated@@53 $generated@@197 ($generated@@23 ($generated@@24 $generated@@200) $generated@@197)) ($generated@@61 $generated@@26 $generated@@197 ($generated@@29 $generated) $generated@@196)) (and ($generated@@61 $generated@@5 ($generated@@9 $generated@@199) $generated $generated@@196) (= (ControlFlow 0 2) (- 0 1))))) (<= ($generated@@32 2) $generated@@199)))))
(let (($generated@@204  (=> (and ($generated@@201 $generated@@196) ($generated@@202 $generated@@196)) (=> (and (and ($generated@@28 $generated@@26 $generated@@197 ($generated@@29 $generated)) ($generated@@61 $generated@@26 $generated@@197 ($generated@@29 $generated) $generated@@196)) (and (= 2 $generated@@22) (= (ControlFlow 0 3) 2))) $generated@@203))))
$generated@@204)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
