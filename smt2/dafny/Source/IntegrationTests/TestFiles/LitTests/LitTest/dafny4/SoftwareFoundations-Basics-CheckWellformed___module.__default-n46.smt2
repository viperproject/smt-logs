(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 (T@U) T@U)
(declare-fun $generated@@22 () T@U)
(declare-fun $generated@@23 (T@T T@U T@U) Bool)
(declare-fun $generated@@24 () T@T)
(declare-fun $generated@@25 () T@U)
(declare-fun $generated@@26 (T@T T@U) T@U)
(declare-fun $generated@@29 (T@U) Bool)
(declare-fun $generated@@31 (T@U) Bool)
(declare-fun $generated@@33 (T@U) Bool)
(declare-fun $generated@@35 (T@T T@U) T@U)
(declare-fun $generated@@36 (T@T T@U) T@U)
(declare-fun $generated@@40 (T@U) T@U)
(declare-fun $generated@@43 (T@U) T@U)
(declare-fun $generated@@48 () Int)
(declare-fun $generated@@49 (T@U T@U) T@U)
(declare-fun $generated@@50 (T@U) T@U)
(declare-fun $generated@@51 (T@U) Bool)
(declare-fun $generated@@52 (T@U) T@U)
(declare-fun $generated@@53 (T@U) T@U)
(declare-fun $generated@@74 (T@U) Int)
(declare-fun $generated@@77 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@78 () T@T)
(declare-fun $generated@@79 () T@T)
(declare-fun $generated@@80 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@81 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@82 () T@T)
(declare-fun $generated@@83 (T@T T@T) T@T)
(declare-fun $generated@@84 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@85 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@86 (T@T) T@T)
(declare-fun $generated@@87 (T@T) T@T)
(declare-fun $generated@@137 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@138 (T@U) Bool)
(declare-fun $generated@@141 (T@U) T@U)
(declare-fun $generated@@142 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert (= ($generated@@21 $generated@@22) $generated@@1))
(assert (= ($generated@@5 $generated@@24) 3))
(assert ($generated@@23 $generated@@24 $generated@@22 $generated@@25))
(assert (forall (($generated@@27 T@U) ($generated@@28 T@T) ) (! (= ($generated@@26 $generated@@28 $generated@@27) $generated@@27)
 :pattern ( ($generated@@26 $generated@@28 $generated@@27))
)))
(assert (forall (($generated@@30 T@U) ) (! (= ($generated@@29 $generated@@30) (= ($generated@@21 $generated@@30) $generated@@1))
 :pattern ( ($generated@@29 $generated@@30))
)))
(assert (forall (($generated@@32 T@U) ) (! (= ($generated@@31 $generated@@32) (= ($generated@@21 $generated@@32) $generated@@2))
 :pattern ( ($generated@@31 $generated@@32))
)))
(assert (forall (($generated@@34 T@U) ) (! (= ($generated@@33 $generated@@34) (= ($generated@@21 $generated@@34) $generated@@3))
 :pattern ( ($generated@@33 $generated@@34))
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@T) ) (! (= ($generated@@36 $generated@@38 ($generated@@35 $generated@@38 $generated@@37)) $generated@@37)
 :pattern ( ($generated@@35 $generated@@38 $generated@@37))
)))
(assert (forall (($generated@@39 T@U) ) (!  (=> ($generated@@29 $generated@@39) (= $generated@@39 $generated@@22))
 :pattern ( ($generated@@29 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ) (!  (=> ($generated@@31 $generated@@41) (exists (($generated@@42 T@U) ) (= $generated@@41 ($generated@@40 $generated@@42))))
 :pattern ( ($generated@@31 $generated@@41))
)))
(assert (forall (($generated@@44 T@U) ) (!  (=> ($generated@@33 $generated@@44) (exists (($generated@@45 T@U) ) (= $generated@@44 ($generated@@43 $generated@@45))))
 :pattern ( ($generated@@33 $generated@@44))
)))
(assert (forall (($generated@@46 T@U) ) (! (= ($generated@@23 $generated@@24 ($generated@@40 $generated@@46) $generated@@25) ($generated@@23 $generated@@24 $generated@@46 $generated@@25))
 :pattern ( ($generated@@23 $generated@@24 ($generated@@40 $generated@@46) $generated@@25))
)))
(assert (forall (($generated@@47 T@U) ) (! (= ($generated@@23 $generated@@24 ($generated@@43 $generated@@47) $generated@@25) ($generated@@23 $generated@@24 $generated@@47 $generated@@25))
 :pattern ( ($generated@@23 $generated@@24 ($generated@@43 $generated@@47) $generated@@25))
)))
(assert  (=> (<= 1 $generated@@48) (forall (($generated@@54 T@U) ($generated@@55 T@U) ) (!  (=> (or ($generated@@51 $generated@@55) (and (< 1 $generated@@48) ($generated@@23 $generated@@24 $generated@@55 $generated@@25))) (and (=> (not ($generated@@29 $generated@@55)) (=> (not ($generated@@31 $generated@@55)) (let (($generated@@56 ($generated@@52 $generated@@55)))
($generated@@51 $generated@@56)))) (= ($generated@@49 ($generated@@50 $generated@@54) $generated@@55) (ite ($generated@@29 $generated@@55) ($generated@@43 ($generated@@26 $generated@@24 $generated@@22)) (ite ($generated@@31 $generated@@55) (let (($generated@@57 ($generated@@53 $generated@@55)))
($generated@@43 $generated@@57)) (let (($generated@@58 ($generated@@52 $generated@@55)))
($generated@@40 ($generated@@49 $generated@@54 $generated@@58))))))))
 :pattern ( ($generated@@49 ($generated@@50 $generated@@54) $generated@@55))
))))
(assert  (=> (<= 1 $generated@@48) (forall (($generated@@59 T@U) ($generated@@60 T@U) ) (!  (=> (or ($generated@@51 $generated@@60) (and (< 1 $generated@@48) ($generated@@23 $generated@@24 $generated@@60 $generated@@25))) ($generated@@23 $generated@@24 ($generated@@49 $generated@@59 $generated@@60) $generated@@25))
 :pattern ( ($generated@@49 $generated@@59 $generated@@60))
))))
(assert  (=> (<= 1 $generated@@48) (forall (($generated@@61 T@U) ($generated@@62 T@U) ) (!  (=> (or ($generated@@51 ($generated@@26 $generated@@24 $generated@@62)) (and (< 1 $generated@@48) ($generated@@23 $generated@@24 $generated@@62 $generated@@25))) (and (=> (not ($generated@@10 ($generated@@26 $generated@@6 ($generated@@9 ($generated@@29 ($generated@@26 $generated@@24 $generated@@62)))))) (=> (not ($generated@@10 ($generated@@26 $generated@@6 ($generated@@9 ($generated@@31 ($generated@@26 $generated@@24 $generated@@62)))))) (let (($generated@@63 ($generated@@26 $generated@@24 ($generated@@52 ($generated@@26 $generated@@24 $generated@@62)))))
($generated@@51 $generated@@63)))) (= ($generated@@49 ($generated@@50 $generated@@61) ($generated@@26 $generated@@24 $generated@@62)) (ite ($generated@@29 ($generated@@26 $generated@@24 $generated@@62)) ($generated@@43 ($generated@@26 $generated@@24 $generated@@22)) (ite ($generated@@31 ($generated@@26 $generated@@24 $generated@@62)) (let (($generated@@64 ($generated@@26 $generated@@24 ($generated@@53 ($generated@@26 $generated@@24 $generated@@62)))))
($generated@@26 $generated@@24 ($generated@@43 $generated@@64))) (let (($generated@@65 ($generated@@26 $generated@@24 ($generated@@52 ($generated@@26 $generated@@24 $generated@@62)))))
($generated@@26 $generated@@24 ($generated@@40 ($generated@@26 $generated@@24 ($generated@@49 ($generated@@50 $generated@@61) $generated@@65))))))))))
 :weight 3
 :pattern ( ($generated@@49 ($generated@@50 $generated@@61) ($generated@@26 $generated@@24 $generated@@62)))
))))
(assert (forall (($generated@@66 T@U) ) (! (= ($generated@@21 ($generated@@40 $generated@@66)) $generated@@2)
 :pattern ( ($generated@@40 $generated@@66))
)))
(assert (forall (($generated@@67 T@U) ) (! (= ($generated@@53 ($generated@@40 $generated@@67)) $generated@@67)
 :pattern ( ($generated@@40 $generated@@67))
)))
(assert (forall (($generated@@68 T@U) ) (! (= ($generated@@21 ($generated@@43 $generated@@68)) $generated@@3)
 :pattern ( ($generated@@43 $generated@@68))
)))
(assert (forall (($generated@@69 T@U) ) (! (= ($generated@@52 ($generated@@43 $generated@@69)) $generated@@69)
 :pattern ( ($generated@@43 $generated@@69))
)))
(assert (forall (($generated@@70 T@U) ($generated@@71 T@T) ) (! (= ($generated@@35 $generated@@71 ($generated@@36 $generated@@71 $generated@@70)) $generated@@70)
 :pattern ( ($generated@@36 $generated@@71 $generated@@70))
)))
(assert (forall (($generated@@72 T@U) ($generated@@73 T@U) ) (! (= ($generated@@49 ($generated@@50 $generated@@72) $generated@@73) ($generated@@49 $generated@@72 $generated@@73))
 :pattern ( ($generated@@49 ($generated@@50 $generated@@72) $generated@@73))
)))
(assert (forall (($generated@@75 T@U) ) (! (< ($generated@@74 $generated@@75) ($generated@@74 ($generated@@40 $generated@@75)))
 :pattern ( ($generated@@40 $generated@@75))
)))
(assert (forall (($generated@@76 T@U) ) (! (< ($generated@@74 $generated@@76) ($generated@@74 ($generated@@43 $generated@@76)))
 :pattern ( ($generated@@43 $generated@@76))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@88 T@T) ($generated@@89 T@T) ($generated@@90 T@T) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (! (= ($generated@@77 $generated@@88 $generated@@89 $generated@@90 ($generated@@84 $generated@@88 $generated@@89 $generated@@90 $generated@@92 $generated@@93 $generated@@94 $generated@@91) $generated@@93 $generated@@94) $generated@@91)
 :weight 0
)) (and (forall (($generated@@95 T@T) ($generated@@96 T@T) ($generated@@97 T@T) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ) (!  (or (= $generated@@100 $generated@@102) (= ($generated@@77 $generated@@95 $generated@@96 $generated@@97 ($generated@@84 $generated@@95 $generated@@96 $generated@@97 $generated@@99 $generated@@100 $generated@@101 $generated@@98) $generated@@102 $generated@@103) ($generated@@77 $generated@@95 $generated@@96 $generated@@97 $generated@@99 $generated@@102 $generated@@103)))
 :weight 0
)) (forall (($generated@@104 T@T) ($generated@@105 T@T) ($generated@@106 T@T) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ) (!  (or (= $generated@@110 $generated@@112) (= ($generated@@77 $generated@@104 $generated@@105 $generated@@106 ($generated@@84 $generated@@104 $generated@@105 $generated@@106 $generated@@108 $generated@@109 $generated@@110 $generated@@107) $generated@@111 $generated@@112) ($generated@@77 $generated@@104 $generated@@105 $generated@@106 $generated@@108 $generated@@111 $generated@@112)))
 :weight 0
)))) (= ($generated@@5 $generated@@78) 4)) (= ($generated@@5 $generated@@79) 5)) (forall (($generated@@113 T@T) ($generated@@114 T@T) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ) (! (= ($generated@@81 $generated@@113 $generated@@114 ($generated@@85 $generated@@113 $generated@@114 $generated@@116 $generated@@117 $generated@@115) $generated@@117) $generated@@115)
 :weight 0
))) (forall (($generated@@118 T@T) ($generated@@119 T@T) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ) (!  (or (= $generated@@122 $generated@@123) (= ($generated@@81 $generated@@118 $generated@@119 ($generated@@85 $generated@@118 $generated@@119 $generated@@121 $generated@@122 $generated@@120) $generated@@123) ($generated@@81 $generated@@118 $generated@@119 $generated@@121 $generated@@123)))
 :weight 0
))) (= ($generated@@5 $generated@@82) 6)) (forall (($generated@@124 T@T) ($generated@@125 T@T) ) (= ($generated@@5 ($generated@@83 $generated@@124 $generated@@125)) 7))) (forall (($generated@@126 T@T) ($generated@@127 T@T) ) (! (= ($generated@@86 ($generated@@83 $generated@@126 $generated@@127)) $generated@@126)
 :pattern ( ($generated@@83 $generated@@126 $generated@@127))
))) (forall (($generated@@128 T@T) ($generated@@129 T@T) ) (! (= ($generated@@87 ($generated@@83 $generated@@128 $generated@@129)) $generated@@129)
 :pattern ( ($generated@@83 $generated@@128 $generated@@129))
))))
(assert (forall (($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 Bool) ($generated@@134 T@U) ($generated@@135 T@U) ) (! (= ($generated@@10 ($generated@@77 $generated@@78 $generated@@79 $generated@@6 ($generated@@80 $generated@@130 $generated@@131 $generated@@132 $generated@@133) $generated@@134 $generated@@135))  (=> (and (or (not (= $generated@@134 $generated@@130)) (not true)) ($generated@@10 ($generated@@35 $generated@@6 ($generated@@81 $generated@@79 $generated@@82 ($generated@@81 $generated@@78 ($generated@@83 $generated@@79 $generated@@82) $generated@@131 $generated@@134) $generated@@132)))) $generated@@133))
 :pattern ( ($generated@@77 $generated@@78 $generated@@79 $generated@@6 ($generated@@80 $generated@@130 $generated@@131 $generated@@132 $generated@@133) $generated@@134 $generated@@135))
)))
(assert (forall (($generated@@136 T@U) ) (!  (=> ($generated@@23 $generated@@24 $generated@@136 $generated@@25) (or (or ($generated@@29 $generated@@136) ($generated@@31 $generated@@136)) ($generated@@33 $generated@@136)))
 :pattern ( ($generated@@33 $generated@@136) ($generated@@23 $generated@@24 $generated@@136 $generated@@25))
 :pattern ( ($generated@@31 $generated@@136) ($generated@@23 $generated@@24 $generated@@136 $generated@@25))
 :pattern ( ($generated@@29 $generated@@136) ($generated@@23 $generated@@24 $generated@@136 $generated@@25))
)))
(assert (forall (($generated@@139 T@U) ($generated@@140 T@U) ) (!  (=> (and ($generated@@138 $generated@@140) ($generated@@23 $generated@@24 $generated@@139 $generated@@25)) ($generated@@137 $generated@@24 $generated@@139 $generated@@25 $generated@@140))
 :pattern ( ($generated@@137 $generated@@24 $generated@@139 $generated@@25 $generated@@140))
)))
(assert (= ($generated@@141 $generated@@25) $generated@@0))
(assert (= ($generated@@142 $generated@@25) $generated@@4))
(assert (= $generated@@22 ($generated@@26 $generated@@24 $generated@@22)))
(assert (forall (($generated@@143 T@U) ($generated@@144 T@U) ) (!  (=> (and ($generated@@138 $generated@@144) (and ($generated@@31 $generated@@143) ($generated@@137 $generated@@24 $generated@@143 $generated@@25 $generated@@144))) ($generated@@137 $generated@@24 ($generated@@53 $generated@@143) $generated@@25 $generated@@144))
 :pattern ( ($generated@@137 $generated@@24 ($generated@@53 $generated@@143) $generated@@25 $generated@@144))
)))
(assert (forall (($generated@@145 T@U) ($generated@@146 T@U) ) (!  (=> (and ($generated@@138 $generated@@146) (and ($generated@@33 $generated@@145) ($generated@@137 $generated@@24 $generated@@145 $generated@@25 $generated@@146))) ($generated@@137 $generated@@24 ($generated@@52 $generated@@145) $generated@@25 $generated@@146))
 :pattern ( ($generated@@137 $generated@@24 ($generated@@52 $generated@@145) $generated@@25 $generated@@146))
)))
(assert (forall (($generated@@147 T@U) ) (! (= ($generated@@40 ($generated@@26 $generated@@24 $generated@@147)) ($generated@@26 $generated@@24 ($generated@@40 $generated@@147)))
 :pattern ( ($generated@@40 ($generated@@26 $generated@@24 $generated@@147)))
)))
(assert (forall (($generated@@148 T@U) ) (! (= ($generated@@43 ($generated@@26 $generated@@24 $generated@@148)) ($generated@@26 $generated@@24 ($generated@@43 $generated@@148)))
 :pattern ( ($generated@@43 ($generated@@26 $generated@@24 $generated@@148)))
)))
(assert (forall (($generated@@149 T@U) ($generated@@150 T@T) ) (! (= ($generated@@36 $generated@@150 ($generated@@26 $generated@@150 $generated@@149)) ($generated@@26 $generated@@82 ($generated@@36 $generated@@150 $generated@@149)))
 :pattern ( ($generated@@36 $generated@@150 ($generated@@26 $generated@@150 $generated@@149)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@151 () T@U)
(declare-fun $generated@@152 () T@U)
(declare-fun $generated@@153 () T@U)
(declare-fun $generated@@154 () T@U)
(declare-fun $generated@@155 () T@U)
(declare-fun $generated@@156 () T@U)
(declare-fun $generated@@157 () T@U)
(declare-fun $generated@@158 () T@U)
(declare-fun $generated@@159 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 10) (let (($generated@@160 true))
(let (($generated@@161  (=> (= $generated@@151 ($generated@@43 $generated@@152)) (=> (and ($generated@@23 $generated@@24 $generated@@152 $generated@@25) (= $generated@@153 $generated@@152)) (=> (and (and ($generated@@23 $generated@@24 $generated@@153 $generated@@25) (= $generated@@154 $generated@@153)) (and ($generated@@137 $generated@@24 $generated@@154 $generated@@25 $generated@@155) (= (ControlFlow 0 5) (- 0 4)))) (< ($generated@@74 $generated@@154) ($generated@@74 $generated@@151)))))))
(let (($generated@@162  (=> (or (not (= $generated@@151 ($generated@@40 $generated@@156))) (not true)) (and (=> (= (ControlFlow 0 7) 5) $generated@@161) (=> (= (ControlFlow 0 7) 6) $generated@@160)))))
(let (($generated@@163 true))
(let (($generated@@164  (=> (or (not (= $generated@@151 $generated@@22)) (not true)) (and (=> (= (ControlFlow 0 8) 3) $generated@@163) (=> (= (ControlFlow 0 8) 7) $generated@@162)))))
(let (($generated@@165 true))
(let (($generated@@166 true))
(let (($generated@@167  (=> (= $generated@@157 ($generated@@80 $generated@@158 $generated@@155 $generated false)) (and (and (=> (= (ControlFlow 0 9) 1) $generated@@166) (=> (= (ControlFlow 0 9) 2) $generated@@165)) (=> (= (ControlFlow 0 9) 8) $generated@@164)))))
(let (($generated@@168  (=> (and (and (and ($generated@@138 $generated@@155) ($generated@@159 $generated@@155)) ($generated@@23 $generated@@24 $generated@@151 $generated@@25)) (and (= 1 $generated@@48) (= (ControlFlow 0 10) 9))) $generated@@167)))
$generated@@168))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
