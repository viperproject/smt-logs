(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 (T@U) T@U)
(declare-fun $generated@@22 (T@U) Int)
(declare-fun $generated@@23 () T@U)
(declare-fun $generated@@24 (Int) Int)
(declare-fun $generated@@26 (T@T T@U) T@U)
(declare-fun $generated@@29 (T@T T@U) T@U)
(declare-fun $generated@@30 (T@T T@U) T@U)
(declare-fun $generated@@33 (T@U T@U) Bool)
(declare-fun $generated@@34 (T@T T@U T@U) Bool)
(declare-fun $generated@@41 (T@U) T@U)
(declare-fun $generated@@42 (T@U) T@U)
(declare-fun $generated@@47 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@48 () T@T)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@51 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@52 () T@T)
(declare-fun $generated@@53 (T@T T@T) T@T)
(declare-fun $generated@@54 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@55 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@56 (T@T) T@T)
(declare-fun $generated@@57 (T@T) T@T)
(declare-fun $generated@@106 () Int)
(declare-fun $generated@@107 (T@U Int Int) Bool)
(declare-fun $generated@@108 (T@U Int Int) Bool)
(declare-fun $generated@@109 () T@T)
(declare-fun $generated@@110 (T@U Int) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert (= ($generated@@21 $generated) $generated@@1))
(assert (= ($generated@@21 $generated@@0) $generated@@2))
(assert (= ($generated@@22 $generated@@23) 0))
(assert (forall (($generated@@25 Int) ) (! (= ($generated@@24 $generated@@25) $generated@@25)
 :pattern ( ($generated@@24 $generated@@25))
)))
(assert (forall (($generated@@27 T@U) ($generated@@28 T@T) ) (! (= ($generated@@26 $generated@@28 $generated@@27) $generated@@27)
 :pattern ( ($generated@@26 $generated@@28 $generated@@27))
)))
(assert (forall (($generated@@31 T@U) ($generated@@32 T@T) ) (! (= ($generated@@30 $generated@@32 ($generated@@29 $generated@@32 $generated@@31)) $generated@@31)
 :pattern ( ($generated@@29 $generated@@32 $generated@@31))
)))
(assert (forall (($generated@@35 T@U) ) (!  (=> ($generated@@33 $generated@@35 $generated@@0) (and (= ($generated@@30 $generated@@7 ($generated@@29 $generated@@7 $generated@@35)) $generated@@35) ($generated@@34 $generated@@7 ($generated@@29 $generated@@7 $generated@@35) $generated@@0)))
 :pattern ( ($generated@@33 $generated@@35 $generated@@0))
)))
(assert (forall (($generated@@36 T@U) ) (!  (=> ($generated@@33 $generated@@36 $generated) (and (= ($generated@@30 $generated@@6 ($generated@@29 $generated@@6 $generated@@36)) $generated@@36) ($generated@@34 $generated@@6 ($generated@@29 $generated@@6 $generated@@36) $generated)))
 :pattern ( ($generated@@33 $generated@@36 $generated))
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@T) ) (! (= ($generated@@33 ($generated@@30 $generated@@39 $generated@@37) $generated@@38) ($generated@@34 $generated@@39 $generated@@37 $generated@@38))
 :pattern ( ($generated@@33 ($generated@@30 $generated@@39 $generated@@37) $generated@@38))
)))
(assert (forall (($generated@@40 T@U) ) (! (<= 0 ($generated@@22 $generated@@40))
 :pattern ( ($generated@@22 $generated@@40))
)))
(assert (forall (($generated@@43 T@U) ) (! (= ($generated@@42 ($generated@@41 $generated@@43)) $generated@@43)
 :pattern ( ($generated@@41 $generated@@43))
)))
(assert (forall (($generated@@44 T@U) ) (! (= ($generated@@21 ($generated@@41 $generated@@44)) $generated@@3)
 :pattern ( ($generated@@41 $generated@@44))
)))
(assert (forall (($generated@@45 T@U) ($generated@@46 T@T) ) (! (= ($generated@@29 $generated@@46 ($generated@@30 $generated@@46 $generated@@45)) $generated@@45)
 :pattern ( ($generated@@30 $generated@@46 $generated@@45))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@58 T@T) ($generated@@59 T@T) ($generated@@60 T@T) ($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@U) ($generated@@64 T@U) ) (! (= ($generated@@47 $generated@@58 $generated@@59 $generated@@60 ($generated@@54 $generated@@58 $generated@@59 $generated@@60 $generated@@62 $generated@@63 $generated@@64 $generated@@61) $generated@@63 $generated@@64) $generated@@61)
 :weight 0
)) (and (forall (($generated@@65 T@T) ($generated@@66 T@T) ($generated@@67 T@T) ($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ) (!  (or (= $generated@@70 $generated@@72) (= ($generated@@47 $generated@@65 $generated@@66 $generated@@67 ($generated@@54 $generated@@65 $generated@@66 $generated@@67 $generated@@69 $generated@@70 $generated@@71 $generated@@68) $generated@@72 $generated@@73) ($generated@@47 $generated@@65 $generated@@66 $generated@@67 $generated@@69 $generated@@72 $generated@@73)))
 :weight 0
)) (forall (($generated@@74 T@T) ($generated@@75 T@T) ($generated@@76 T@T) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (or (= $generated@@80 $generated@@82) (= ($generated@@47 $generated@@74 $generated@@75 $generated@@76 ($generated@@54 $generated@@74 $generated@@75 $generated@@76 $generated@@78 $generated@@79 $generated@@80 $generated@@77) $generated@@81 $generated@@82) ($generated@@47 $generated@@74 $generated@@75 $generated@@76 $generated@@78 $generated@@81 $generated@@82)))
 :weight 0
)))) (= ($generated@@5 $generated@@48) 3)) (= ($generated@@5 $generated@@49) 4)) (forall (($generated@@83 T@T) ($generated@@84 T@T) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ) (! (= ($generated@@51 $generated@@83 $generated@@84 ($generated@@55 $generated@@83 $generated@@84 $generated@@86 $generated@@87 $generated@@85) $generated@@87) $generated@@85)
 :weight 0
))) (forall (($generated@@88 T@T) ($generated@@89 T@T) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ) (!  (or (= $generated@@92 $generated@@93) (= ($generated@@51 $generated@@88 $generated@@89 ($generated@@55 $generated@@88 $generated@@89 $generated@@91 $generated@@92 $generated@@90) $generated@@93) ($generated@@51 $generated@@88 $generated@@89 $generated@@91 $generated@@93)))
 :weight 0
))) (= ($generated@@5 $generated@@52) 5)) (forall (($generated@@94 T@T) ($generated@@95 T@T) ) (= ($generated@@5 ($generated@@53 $generated@@94 $generated@@95)) 6))) (forall (($generated@@96 T@T) ($generated@@97 T@T) ) (! (= ($generated@@56 ($generated@@53 $generated@@96 $generated@@97)) $generated@@96)
 :pattern ( ($generated@@53 $generated@@96 $generated@@97))
))) (forall (($generated@@98 T@T) ($generated@@99 T@T) ) (! (= ($generated@@57 ($generated@@53 $generated@@98 $generated@@99)) $generated@@99)
 :pattern ( ($generated@@53 $generated@@98 $generated@@99))
))))
(assert (forall (($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 Bool) ($generated@@104 T@U) ($generated@@105 T@U) ) (! (= ($generated@@10 ($generated@@47 $generated@@48 $generated@@49 $generated@@6 ($generated@@50 $generated@@100 $generated@@101 $generated@@102 $generated@@103) $generated@@104 $generated@@105))  (=> (and (or (not (= $generated@@104 $generated@@100)) (not true)) ($generated@@10 ($generated@@29 $generated@@6 ($generated@@51 $generated@@49 $generated@@52 ($generated@@51 $generated@@48 ($generated@@53 $generated@@49 $generated@@52) $generated@@101 $generated@@104) $generated@@102)))) $generated@@103))
 :pattern ( ($generated@@47 $generated@@48 $generated@@49 $generated@@6 ($generated@@50 $generated@@100 $generated@@101 $generated@@102 $generated@@103) $generated@@104 $generated@@105))
)))
(assert (= ($generated@@5 $generated@@109) 7))
(assert  (=> (<= 0 $generated@@106) (forall (($generated@@111 T@U) ($generated@@112 Int) ($generated@@113 Int) ) (!  (=> (or ($generated@@108 $generated@@111 $generated@@112 $generated@@113) (and (< 0 $generated@@106) ($generated@@34 $generated@@109 $generated@@111 ($generated@@41 $generated@@0)))) (= ($generated@@107 $generated@@111 $generated@@112 $generated@@113)  (and (and (<= ($generated@@24 2) $generated@@113) (and (<= $generated@@112 ($generated@@24 0)) (< 0 (+ $generated@@112 $generated@@113)))) (forall (($generated@@114 Int) ) (!  (and (=> (and (<= ($generated@@24 0) $generated@@114) (< $generated@@114 ($generated@@22 $generated@@111))) (<= $generated@@112 ($generated@@12 ($generated@@29 $generated@@7 ($generated@@110 $generated@@111 $generated@@114))))) (=> (and (<= ($generated@@24 0) $generated@@114) (< $generated@@114 ($generated@@22 $generated@@111))) (< ($generated@@12 ($generated@@29 $generated@@7 ($generated@@110 $generated@@111 $generated@@114))) (+ $generated@@112 $generated@@113))))
 :pattern ( ($generated@@29 $generated@@7 ($generated@@110 $generated@@111 $generated@@114)))
)))))
 :pattern ( ($generated@@107 $generated@@111 $generated@@112 $generated@@113))
))))
(assert (forall (($generated@@115 T@U) ($generated@@116 T@U) ) (!  (=> ($generated@@33 $generated@@115 ($generated@@41 $generated@@116)) (and (= ($generated@@30 $generated@@109 ($generated@@29 $generated@@109 $generated@@115)) $generated@@115) ($generated@@34 $generated@@109 ($generated@@29 $generated@@109 $generated@@115) ($generated@@41 $generated@@116))))
 :pattern ( ($generated@@33 $generated@@115 ($generated@@41 $generated@@116)))
)))
(assert  (=> (<= 0 $generated@@106) (forall (($generated@@117 T@U) ($generated@@118 Int) ($generated@@119 Int) ) (!  (=> (or ($generated@@108 ($generated@@26 $generated@@109 $generated@@117) ($generated@@24 $generated@@118) ($generated@@24 $generated@@119)) (and (< 0 $generated@@106) ($generated@@34 $generated@@109 $generated@@117 ($generated@@41 $generated@@0)))) (= ($generated@@107 ($generated@@26 $generated@@109 $generated@@117) ($generated@@24 $generated@@118) ($generated@@24 $generated@@119))  (and (and (<= ($generated@@24 2) ($generated@@24 $generated@@119)) (and (<= ($generated@@24 $generated@@118) ($generated@@24 0)) (< 0 (+ $generated@@118 $generated@@119)))) (forall (($generated@@120 Int) ) (!  (and (=> (and (<= ($generated@@24 0) $generated@@120) (< $generated@@120 ($generated@@22 ($generated@@26 $generated@@109 $generated@@117)))) (<= ($generated@@24 $generated@@118) ($generated@@12 ($generated@@29 $generated@@7 ($generated@@110 ($generated@@26 $generated@@109 $generated@@117) $generated@@120))))) (=> (and (<= ($generated@@24 0) $generated@@120) (< $generated@@120 ($generated@@22 ($generated@@26 $generated@@109 $generated@@117)))) (< ($generated@@12 ($generated@@29 $generated@@7 ($generated@@110 ($generated@@26 $generated@@109 $generated@@117) $generated@@120))) (+ $generated@@118 $generated@@119))))
 :pattern ( ($generated@@29 $generated@@7 ($generated@@110 $generated@@117 $generated@@120)))
)))))
 :weight 3
 :pattern ( ($generated@@107 ($generated@@26 $generated@@109 $generated@@117) ($generated@@24 $generated@@118) ($generated@@24 $generated@@119)))
))))
(assert (forall (($generated@@121 Int) ) (! (= ($generated@@30 $generated@@7 ($generated@@11 ($generated@@24 $generated@@121))) ($generated@@26 $generated@@52 ($generated@@30 $generated@@7 ($generated@@11 $generated@@121))))
 :pattern ( ($generated@@30 $generated@@7 ($generated@@11 ($generated@@24 $generated@@121))))
)))
(assert (forall (($generated@@122 T@U) ($generated@@123 T@T) ) (! (= ($generated@@30 $generated@@123 ($generated@@26 $generated@@123 $generated@@122)) ($generated@@26 $generated@@52 ($generated@@30 $generated@@123 $generated@@122)))
 :pattern ( ($generated@@30 $generated@@123 ($generated@@26 $generated@@123 $generated@@122)))
)))
(assert (forall (($generated@@124 T@U) ) (!  (=> (= ($generated@@22 $generated@@124) 0) (= $generated@@124 $generated@@23))
 :pattern ( ($generated@@22 $generated@@124))
)))
(assert (forall (($generated@@125 T@U) ($generated@@126 T@U) ) (! (= ($generated@@34 $generated@@109 $generated@@125 ($generated@@41 $generated@@126)) (forall (($generated@@127 Int) ) (!  (=> (and (<= 0 $generated@@127) (< $generated@@127 ($generated@@22 $generated@@125))) ($generated@@33 ($generated@@110 $generated@@125 $generated@@127) $generated@@126))
 :pattern ( ($generated@@110 $generated@@125 $generated@@127))
)))
 :pattern ( ($generated@@34 $generated@@109 $generated@@125 ($generated@@41 $generated@@126)))
)))
(assert (forall (($generated@@128 T@U) ) (! ($generated@@34 $generated@@7 $generated@@128 $generated@@0)
 :pattern ( ($generated@@34 $generated@@7 $generated@@128 $generated@@0))
)))
(assert (forall (($generated@@129 T@U) ) (! ($generated@@34 $generated@@6 $generated@@129 $generated)
 :pattern ( ($generated@@34 $generated@@6 $generated@@129 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@130 () T@U)
(declare-fun $generated@@131 () Int)
(declare-fun $generated@@132 () Int)
(declare-fun $generated@@133 () Int)
(declare-fun $generated@@134 () T@U)
(declare-fun $generated@@135 () T@U)
(declare-fun $generated@@136 () T@U)
(declare-fun $generated@@137 (T@U) Bool)
(declare-fun $generated@@138 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 20) (let (($generated@@139 true))
(let (($generated@@140 true))
(let (($generated@@141  (=> (and (< ($generated@@12 ($generated@@29 $generated@@7 ($generated@@110 $generated@@130 $generated@@131))) $generated@@132) (= (ControlFlow 0 8) 2)) $generated@@140)))
(let (($generated@@142  (=> (<= $generated@@132 ($generated@@12 ($generated@@29 $generated@@7 ($generated@@110 $generated@@130 $generated@@131)))) (and (=> (= (ControlFlow 0 6) (- 0 7)) (and (<= 0 $generated@@131) (< $generated@@131 ($generated@@22 $generated@@130)))) (=> (and (<= 0 $generated@@131) (< $generated@@131 ($generated@@22 $generated@@130))) (=> (= (ControlFlow 0 6) 2) $generated@@140))))))
(let (($generated@@143  (=> (and (<= ($generated@@24 0) $generated@@131) (< $generated@@131 ($generated@@22 $generated@@130))) (and (=> (= (ControlFlow 0 9) (- 0 10)) (and (<= 0 $generated@@131) (< $generated@@131 ($generated@@22 $generated@@130)))) (=> (and (<= 0 $generated@@131) (< $generated@@131 ($generated@@22 $generated@@130))) (and (=> (= (ControlFlow 0 9) 6) $generated@@142) (=> (= (ControlFlow 0 9) 8) $generated@@141)))))))
(let (($generated@@144  (=> (and (not (and (<= ($generated@@24 0) $generated@@131) (< $generated@@131 ($generated@@22 $generated@@130)))) (= (ControlFlow 0 5) 2)) $generated@@140)))
(let (($generated@@145  (=> (< $generated@@131 ($generated@@24 0)) (and (=> (= (ControlFlow 0 12) 9) $generated@@143) (=> (= (ControlFlow 0 12) 5) $generated@@144)))))
(let (($generated@@146  (=> (<= ($generated@@24 0) $generated@@131) (and (=> (= (ControlFlow 0 11) 9) $generated@@143) (=> (= (ControlFlow 0 11) 5) $generated@@144)))))
(let (($generated@@147  (and (=> (= (ControlFlow 0 13) 11) $generated@@146) (=> (= (ControlFlow 0 13) 12) $generated@@145))))
(let (($generated@@148  (=> (and (<= ($generated@@24 2) $generated@@133) (and (<= $generated@@132 ($generated@@24 0)) (< 0 (+ $generated@@132 $generated@@133)))) (and (=> (= (ControlFlow 0 14) 13) $generated@@147) (=> (= (ControlFlow 0 14) 4) $generated@@139)))))
(let (($generated@@149  (=> (and (not (and (<= ($generated@@24 2) $generated@@133) (and (<= $generated@@132 ($generated@@24 0)) (< 0 (+ $generated@@132 $generated@@133))))) (= (ControlFlow 0 3) 2)) $generated@@140)))
(let (($generated@@150  (=> (< ($generated@@24 0) $generated@@132) (and (=> (= (ControlFlow 0 17) 14) $generated@@148) (=> (= (ControlFlow 0 17) 3) $generated@@149)))))
(let (($generated@@151  (=> (<= $generated@@132 ($generated@@24 0)) (and (=> (= (ControlFlow 0 16) 14) $generated@@148) (=> (= (ControlFlow 0 16) 3) $generated@@149)))))
(let (($generated@@152  (=> (<= ($generated@@24 2) $generated@@133) (and (=> (= (ControlFlow 0 18) 16) $generated@@151) (=> (= (ControlFlow 0 18) 17) $generated@@150)))))
(let (($generated@@153  (=> (< $generated@@133 ($generated@@24 2)) (and (=> (= (ControlFlow 0 15) 14) $generated@@148) (=> (= (ControlFlow 0 15) 3) $generated@@149)))))
(let (($generated@@154 true))
(let (($generated@@155  (=> (= $generated@@134 ($generated@@50 $generated@@135 $generated@@136 $generated@@4 false)) (and (and (=> (= (ControlFlow 0 19) 1) $generated@@154) (=> (= (ControlFlow 0 19) 18) $generated@@152)) (=> (= (ControlFlow 0 19) 15) $generated@@153)))))
(let (($generated@@156  (=> (and (and (and ($generated@@137 $generated@@136) ($generated@@138 $generated@@136)) ($generated@@34 $generated@@109 $generated@@130 ($generated@@41 $generated@@0))) (and (= 0 $generated@@106) (= (ControlFlow 0 20) 19))) $generated@@155)))
$generated@@156)))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
