(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 (T@T) Int)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 () T@T)
(declare-fun $generated@@12 (Bool) T@U)
(declare-fun $generated@@13 (T@U) Bool)
(declare-fun $generated@@14 (Int) T@U)
(declare-fun $generated@@15 (T@U) Int)
(declare-fun $generated@@16 (Real) T@U)
(declare-fun $generated@@17 (T@U) Real)
(declare-fun $generated@@24 () Int)
(declare-fun $generated@@25 (T@U Int) Int)
(declare-fun $generated@@26 (Int) Int)
(declare-fun $generated@@27 (T@U Int) Bool)
(declare-fun $generated@@28 () T@U)
(declare-fun $generated@@29 (T@T T@U T@U) Bool)
(declare-fun $generated@@30 () T@T)
(declare-fun $generated@@31 () T@U)
(declare-fun $generated@@34 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@35 () T@U)
(declare-fun $generated@@38 (T@U) Bool)
(declare-fun $generated@@39 () T@U)
(declare-fun $generated@@40 (T@U) T@U)
(declare-fun $generated@@42 (T@U T@U T@U) Bool)
(declare-fun $generated@@43 (T@U) Bool)
(declare-fun $generated@@44 () T@U)
(declare-fun $generated@@47 () T@U)
(declare-fun $generated@@52 (T@T T@U) T@U)
(declare-fun $generated@@53 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@54 () T@T)
(declare-fun $generated@@55 () T@T)
(declare-fun $generated@@56 (T@T T@T) T@T)
(declare-fun $generated@@57 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@58 (T@T) T@T)
(declare-fun $generated@@59 (T@T) T@T)
(declare-fun $generated@@82 (T@T T@U) T@U)
(declare-fun $generated@@87 (T@T T@U) T@U)
(declare-fun $generated@@103 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@104 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@105 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@140 (T@U) T@U)
(declare-fun $generated@@141 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@8 $generated@@9) 0) (= ($generated@@8 $generated@@10) 1)) (= ($generated@@8 $generated@@11) 2)) (forall (($generated@@18 Bool) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 Real) ) (! (= ($generated@@17 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 T@U) ) (! (= ($generated@@16 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7)
)
(assert (= ($generated@@8 $generated@@30) 3))
(assert  (=> (<= 0 $generated@@24) (forall (($generated@@32 T@U) ($generated@@33 Int) ) (!  (=> (or ($generated@@27 $generated@@32 ($generated@@26 $generated@@33)) (and (< 0 $generated@@24) (and (and (or (not (= $generated@@32 $generated@@28)) (not true)) ($generated@@29 $generated@@30 $generated@@32 $generated@@31)) (<= ($generated@@26 0) $generated@@33)))) (= ($generated@@25 $generated@@32 ($generated@@26 $generated@@33)) ($generated@@26 (+ 5 $generated@@33))))
 :weight 3
 :pattern ( ($generated@@25 $generated@@32 ($generated@@26 $generated@@33)))
))))
(assert (forall (($generated@@36 T@U) ($generated@@37 T@U) ) (! ($generated@@34 $generated@@10 $generated@@36 $generated@@35 $generated@@37)
 :pattern ( ($generated@@34 $generated@@10 $generated@@36 $generated@@35 $generated@@37))
)))
(assert ($generated@@38 $generated@@39))
(assert (forall (($generated@@41 T@U) ) (! (= ($generated@@29 $generated@@30 $generated@@41 $generated@@39)  (or (= $generated@@41 $generated@@28) (= ($generated@@40 $generated@@41) $generated@@39)))
 :pattern ( ($generated@@29 $generated@@30 $generated@@41 $generated@@39))
)))
(assert (forall (($generated@@45 T@U) ($generated@@46 T@U) ) (!  (=> (and ($generated@@42 $generated@@45 $generated@@39 $generated@@46) ($generated@@43 $generated@@46)) ($generated@@42 $generated@@45 $generated@@44 $generated@@46))
 :pattern ( ($generated@@42 $generated@@45 $generated@@39 $generated@@46))
)))
(assert (forall (($generated@@48 T@U) ($generated@@49 T@U) ) (! (= ($generated@@34 $generated@@30 $generated@@48 $generated@@47 $generated@@49) ($generated@@34 $generated@@30 $generated@@48 $generated@@44 $generated@@49))
 :pattern ( ($generated@@34 $generated@@30 $generated@@48 $generated@@47 $generated@@49))
 :pattern ( ($generated@@34 $generated@@30 $generated@@48 $generated@@44 $generated@@49))
)))
(assert (forall (($generated@@50 T@U) ($generated@@51 T@U) ) (! (= ($generated@@34 $generated@@30 $generated@@50 $generated@@31 $generated@@51) ($generated@@34 $generated@@30 $generated@@50 $generated@@39 $generated@@51))
 :pattern ( ($generated@@34 $generated@@30 $generated@@50 $generated@@31 $generated@@51))
 :pattern ( ($generated@@34 $generated@@30 $generated@@50 $generated@@39 $generated@@51))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@60 T@T) ($generated@@61 T@T) ($generated@@62 T@U) ($generated@@63 T@U) ($generated@@64 T@U) ) (! (= ($generated@@53 $generated@@60 $generated@@61 ($generated@@57 $generated@@60 $generated@@61 $generated@@63 $generated@@64 $generated@@62) $generated@@64) $generated@@62)
 :weight 0
)) (forall (($generated@@65 T@T) ($generated@@66 T@T) ($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ) (!  (or (= $generated@@69 $generated@@70) (= ($generated@@53 $generated@@65 $generated@@66 ($generated@@57 $generated@@65 $generated@@66 $generated@@68 $generated@@69 $generated@@67) $generated@@70) ($generated@@53 $generated@@65 $generated@@66 $generated@@68 $generated@@70)))
 :weight 0
))) (= ($generated@@8 $generated@@54) 4)) (= ($generated@@8 $generated@@55) 5)) (forall (($generated@@71 T@T) ($generated@@72 T@T) ) (= ($generated@@8 ($generated@@56 $generated@@71 $generated@@72)) 6))) (forall (($generated@@73 T@T) ($generated@@74 T@T) ) (! (= ($generated@@58 ($generated@@56 $generated@@73 $generated@@74)) $generated@@73)
 :pattern ( ($generated@@56 $generated@@73 $generated@@74))
))) (forall (($generated@@75 T@T) ($generated@@76 T@T) ) (! (= ($generated@@59 ($generated@@56 $generated@@75 $generated@@76)) $generated@@76)
 :pattern ( ($generated@@56 $generated@@75 $generated@@76))
))))
(assert (forall (($generated@@77 T@U) ($generated@@78 T@U) ) (! (= ($generated@@34 $generated@@30 $generated@@77 $generated@@44 $generated@@78)  (or (= $generated@@77 $generated@@28) ($generated@@13 ($generated@@52 $generated@@9 ($generated@@53 $generated@@54 $generated@@55 ($generated@@53 $generated@@30 ($generated@@56 $generated@@54 $generated@@55) $generated@@78 $generated@@77) $generated)))))
 :pattern ( ($generated@@34 $generated@@30 $generated@@77 $generated@@44 $generated@@78))
)))
(assert (forall (($generated@@79 T@U) ($generated@@80 T@U) ) (! (= ($generated@@34 $generated@@30 $generated@@79 $generated@@39 $generated@@80)  (or (= $generated@@79 $generated@@28) ($generated@@13 ($generated@@52 $generated@@9 ($generated@@53 $generated@@54 $generated@@55 ($generated@@53 $generated@@30 ($generated@@56 $generated@@54 $generated@@55) $generated@@80 $generated@@79) $generated)))))
 :pattern ( ($generated@@34 $generated@@30 $generated@@79 $generated@@39 $generated@@80))
)))
(assert (forall (($generated@@81 Int) ) (! (= ($generated@@26 $generated@@81) $generated@@81)
 :pattern ( ($generated@@26 $generated@@81))
)))
(assert (forall (($generated@@83 T@U) ($generated@@84 T@T) ) (! (= ($generated@@82 $generated@@84 $generated@@83) $generated@@83)
 :pattern ( ($generated@@82 $generated@@84 $generated@@83))
)))
(assert  (=> (<= 0 $generated@@24) (forall (($generated@@85 T@U) ($generated@@86 Int) ) (!  (=> (or ($generated@@27 $generated@@85 $generated@@86) (and (< 0 $generated@@24) (and (and (or (not (= $generated@@85 $generated@@28)) (not true)) ($generated@@29 $generated@@30 $generated@@85 $generated@@31)) (<= ($generated@@26 0) $generated@@86)))) (and (< ($generated@@25 $generated@@85 $generated@@86) (+ 20 $generated@@86)) (<= ($generated@@26 0) ($generated@@25 $generated@@85 $generated@@86))))
 :pattern ( ($generated@@25 $generated@@85 $generated@@86))
))))
(assert (forall (($generated@@88 T@U) ($generated@@89 T@T) ) (! (= ($generated@@87 $generated@@89 ($generated@@52 $generated@@89 $generated@@88)) $generated@@88)
 :pattern ( ($generated@@52 $generated@@89 $generated@@88))
)))
(assert (forall (($generated@@90 T@U) ) (! (= ($generated@@29 $generated@@10 $generated@@90 $generated@@35) (<= ($generated@@26 0) ($generated@@15 $generated@@90)))
 :pattern ( ($generated@@29 $generated@@10 $generated@@90 $generated@@35))
)))
(assert (forall (($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@T) ) (! (= ($generated@@42 ($generated@@87 $generated@@94 $generated@@91) $generated@@92 $generated@@93) ($generated@@34 $generated@@94 $generated@@91 $generated@@92 $generated@@93))
 :pattern ( ($generated@@42 ($generated@@87 $generated@@94 $generated@@91) $generated@@92 $generated@@93))
)))
(assert (forall (($generated@@95 T@U) ) (! (= ($generated@@29 $generated@@30 $generated@@95 $generated@@47)  (and ($generated@@29 $generated@@30 $generated@@95 $generated@@44) (or (not (= $generated@@95 $generated@@28)) (not true))))
 :pattern ( ($generated@@29 $generated@@30 $generated@@95 $generated@@47))
 :pattern ( ($generated@@29 $generated@@30 $generated@@95 $generated@@44))
)))
(assert (forall (($generated@@96 T@U) ) (! (= ($generated@@29 $generated@@30 $generated@@96 $generated@@31)  (and ($generated@@29 $generated@@30 $generated@@96 $generated@@39) (or (not (= $generated@@96 $generated@@28)) (not true))))
 :pattern ( ($generated@@29 $generated@@30 $generated@@96 $generated@@31))
 :pattern ( ($generated@@29 $generated@@30 $generated@@96 $generated@@39))
)))
(assert  (=> (<= 0 $generated@@24) (forall (($generated@@97 T@U) ($generated@@98 Int) ) (!  (=> (or ($generated@@27 ($generated@@82 $generated@@30 $generated@@97) ($generated@@26 $generated@@98)) (and (< 0 $generated@@24) (and (and (or (not (= $generated@@97 $generated@@28)) (not true)) ($generated@@29 $generated@@30 $generated@@97 $generated@@31)) (<= ($generated@@26 0) $generated@@98)))) (= ($generated@@25 ($generated@@82 $generated@@30 $generated@@97) ($generated@@26 $generated@@98)) ($generated@@26 (+ 5 $generated@@98))))
 :weight 3
 :pattern ( ($generated@@25 ($generated@@82 $generated@@30 $generated@@97) ($generated@@26 $generated@@98)))
))))
(assert (forall (($generated@@99 T@U) ($generated@@100 T@U) ) (!  (=> ($generated@@34 $generated@@30 $generated@@99 $generated@@39 $generated@@100) ($generated@@34 $generated@@30 $generated@@99 $generated@@44 $generated@@100))
 :pattern ( ($generated@@34 $generated@@30 $generated@@99 $generated@@39 $generated@@100))
)))
(assert (forall (($generated@@101 T@U) ($generated@@102 T@T) ) (! (= ($generated@@52 $generated@@102 ($generated@@87 $generated@@102 $generated@@101)) $generated@@101)
 :pattern ( ($generated@@87 $generated@@102 $generated@@101))
)))
(assert  (and (forall (($generated@@106 T@T) ($generated@@107 T@T) ($generated@@108 T@T) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ) (! (= ($generated@@103 $generated@@106 $generated@@107 $generated@@108 ($generated@@105 $generated@@106 $generated@@107 $generated@@108 $generated@@110 $generated@@111 $generated@@112 $generated@@109) $generated@@111 $generated@@112) $generated@@109)
 :weight 0
)) (and (forall (($generated@@113 T@T) ($generated@@114 T@T) ($generated@@115 T@T) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ) (!  (or (= $generated@@118 $generated@@120) (= ($generated@@103 $generated@@113 $generated@@114 $generated@@115 ($generated@@105 $generated@@113 $generated@@114 $generated@@115 $generated@@117 $generated@@118 $generated@@119 $generated@@116) $generated@@120 $generated@@121) ($generated@@103 $generated@@113 $generated@@114 $generated@@115 $generated@@117 $generated@@120 $generated@@121)))
 :weight 0
)) (forall (($generated@@122 T@T) ($generated@@123 T@T) ($generated@@124 T@T) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ) (!  (or (= $generated@@128 $generated@@130) (= ($generated@@103 $generated@@122 $generated@@123 $generated@@124 ($generated@@105 $generated@@122 $generated@@123 $generated@@124 $generated@@126 $generated@@127 $generated@@128 $generated@@125) $generated@@129 $generated@@130) ($generated@@103 $generated@@122 $generated@@123 $generated@@124 $generated@@126 $generated@@129 $generated@@130)))
 :weight 0
)))))
(assert (forall (($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ($generated@@134 Bool) ($generated@@135 T@U) ($generated@@136 T@U) ) (! (= ($generated@@13 ($generated@@103 $generated@@30 $generated@@54 $generated@@9 ($generated@@104 $generated@@131 $generated@@132 $generated@@133 $generated@@134) $generated@@135 $generated@@136))  (=> (and (or (not (= $generated@@135 $generated@@131)) (not true)) ($generated@@13 ($generated@@52 $generated@@9 ($generated@@53 $generated@@54 $generated@@55 ($generated@@53 $generated@@30 ($generated@@56 $generated@@54 $generated@@55) $generated@@132 $generated@@135) $generated@@133)))) $generated@@134))
 :pattern ( ($generated@@103 $generated@@30 $generated@@54 $generated@@9 ($generated@@104 $generated@@131 $generated@@132 $generated@@133 $generated@@134) $generated@@135 $generated@@136))
)))
(assert  (=> (<= 0 $generated@@24) (forall (($generated@@137 T@U) ($generated@@138 Int) ) (!  (=> (or ($generated@@27 $generated@@137 $generated@@138) (and (< 0 $generated@@24) (and (and (or (not (= $generated@@137 $generated@@28)) (not true)) ($generated@@29 $generated@@30 $generated@@137 $generated@@31)) (<= ($generated@@26 0) $generated@@138)))) (= ($generated@@25 $generated@@137 $generated@@138) (+ 5 $generated@@138)))
 :pattern ( ($generated@@25 $generated@@137 $generated@@138))
))))
(assert (forall (($generated@@139 T@U) ) (!  (=> ($generated@@29 $generated@@30 $generated@@139 $generated@@39) ($generated@@29 $generated@@30 $generated@@139 $generated@@44))
 :pattern ( ($generated@@29 $generated@@30 $generated@@139 $generated@@39))
)))
(assert (= ($generated@@140 $generated@@35) $generated@@0))
(assert (= ($generated@@141 $generated@@35) $generated@@5))
(assert (= ($generated@@140 $generated@@44) $generated@@1))
(assert (= ($generated@@141 $generated@@44) $generated@@6))
(assert (= ($generated@@140 $generated@@47) $generated@@2))
(assert (= ($generated@@141 $generated@@47) $generated@@6))
(assert (= ($generated@@140 $generated@@39) $generated@@3))
(assert (= ($generated@@141 $generated@@39) $generated@@7))
(assert (= ($generated@@140 $generated@@31) $generated@@4))
(assert (= ($generated@@141 $generated@@31) $generated@@7))
(assert (forall (($generated@@142 T@U) ) (! (= ($generated@@29 $generated@@30 $generated@@142 $generated@@44)  (or (= $generated@@142 $generated@@28) ($generated@@38 ($generated@@40 $generated@@142))))
 :pattern ( ($generated@@29 $generated@@30 $generated@@142 $generated@@44))
)))
(assert (forall (($generated@@143 Int) ) (! (= ($generated@@87 $generated@@10 ($generated@@14 ($generated@@26 $generated@@143))) ($generated@@82 $generated@@55 ($generated@@87 $generated@@10 ($generated@@14 $generated@@143))))
 :pattern ( ($generated@@87 $generated@@10 ($generated@@14 ($generated@@26 $generated@@143))))
)))
(assert (forall (($generated@@144 T@U) ($generated@@145 T@T) ) (! (= ($generated@@87 $generated@@145 ($generated@@82 $generated@@145 $generated@@144)) ($generated@@82 $generated@@55 ($generated@@87 $generated@@145 $generated@@144)))
 :pattern ( ($generated@@87 $generated@@145 ($generated@@82 $generated@@145 $generated@@144)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@146 () T@U)
(declare-fun $generated@@147 () Int)
(declare-fun $generated@@148 () T@U)
(declare-fun $generated@@149 () T@U)
(declare-fun $generated@@150 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 9) (let (($generated@@151  (=> (= (ControlFlow 0 5) (- 0 4)) (< ($generated@@25 $generated@@146 $generated@@147) (+ 20 $generated@@147)))))
(let (($generated@@152  (and (=> (= (ControlFlow 0 6) (- 0 7)) ($generated@@29 $generated@@10 ($generated@@14 (+ 5 $generated@@147)) $generated@@35)) (=> ($generated@@29 $generated@@10 ($generated@@14 (+ 5 $generated@@147)) $generated@@35) (=> (= ($generated@@25 $generated@@146 $generated@@147) (+ 5 $generated@@147)) (=> (and ($generated@@29 $generated@@10 ($generated@@14 ($generated@@25 $generated@@146 $generated@@147)) $generated@@35) (= (ControlFlow 0 6) 5)) $generated@@151))))))
(let (($generated@@153  (=> (<= ($generated@@26 0) ($generated@@25 $generated@@146 $generated@@147)) (=> (and ($generated@@42 ($generated@@87 $generated@@30 $generated@@146) $generated@@39 $generated@@148) ($generated@@34 $generated@@10 ($generated@@14 $generated@@147) $generated@@35 $generated@@148)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (or (<= 0 $generated@@147) (= $generated@@147 $generated@@147))) (=> (or (<= 0 $generated@@147) (= $generated@@147 $generated@@147)) (=> (= (ControlFlow 0 2) (- 0 1)) (or (and (= $generated@@146 $generated@@146) (= $generated@@147 $generated@@147)) (< $generated@@147 $generated@@147)))))))))
(let (($generated@@154  (=> (= $generated@@149 ($generated@@104 $generated@@28 $generated@@148 $generated false)) (and (=> (= (ControlFlow 0 8) 2) $generated@@153) (=> (= (ControlFlow 0 8) 6) $generated@@152)))))
(let (($generated@@155  (=> (and ($generated@@43 $generated@@148) ($generated@@150 $generated@@148)) (=> (and (and (and (or (not (= $generated@@146 $generated@@28)) (not true)) (and ($generated@@29 $generated@@30 $generated@@146 $generated@@31) ($generated@@34 $generated@@30 $generated@@146 $generated@@31 $generated@@148))) (<= ($generated@@26 0) $generated@@147)) (and (= 0 $generated@@24) (= (ControlFlow 0 9) 8))) $generated@@154))))
$generated@@155))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
