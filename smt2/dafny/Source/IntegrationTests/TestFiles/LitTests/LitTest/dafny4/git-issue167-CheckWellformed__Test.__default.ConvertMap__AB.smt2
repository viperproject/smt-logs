(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagSet () T@U)
(declare-fun TagMap () T@U)
(declare-fun alloc () T@U)
(declare-fun |##_System._tuple#2._#Make2| () T@U)
(declare-fun Tagclass._System.Tuple2 () T@U)
(declare-fun Tagclass.Test.A () T@U)
(declare-fun Tagclass.Test.B () T@U)
(declare-fun |##Test.A.A1| () T@U)
(declare-fun |##Test.B.B1| () T@U)
(declare-fun |tytagFamily$_tuple#2| () T@U)
(declare-fun tytagFamily$A () T@U)
(declare-fun tytagFamily$B () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun |$IsA#Test.A| (T@U) Bool)
(declare-fun Test.A.A1_q (T@U) Bool)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun |lambda#2| (T@U T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun |Map#Domain| (T@U) T@U)
(declare-fun |Map#Glue| (T@U T@U T@U) T@U)
(declare-fun |Map#Elements| (T@U) T@U)
(declare-fun _System.Tuple2.___hMake2_q (T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun Tclass._System.Tuple2 (T@U T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun Test.__default.ConvertMap__AB (T@U) T@U)
(declare-fun |Test.__default.ConvertMap__AB#canCall| (T@U) Bool)
(declare-fun MapType () T@T)
(declare-fun TMap (T@U T@U) T@U)
(declare-fun Tclass.Test.A () T@U)
(declare-fun Tclass.Test.B () T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun |#Test.A.A1| () T@U)
(declare-fun |#Test.B.B1| () T@U)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun Test.__default.Convert__AB (T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun |Test.__default.Convert__AB#canCall| (T@U) Bool)
(declare-fun |Set#FromBoogieMap| (T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U) T@U)
(declare-fun Test.__default.Convert__BA (T@U) T@U)
(declare-fun |Test.__default.Convert__BA#canCall| (T@U) Bool)
(declare-fun |lambda#3| (T@U) T@U)
(declare-fun Test.B.B1_q (T@U) Bool)
(declare-fun |#_System._tuple#2._#Make2| (T@U T@U) T@U)
(declare-fun |Test.A#Equal| (T@U T@U) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun SetType () T@T)
(declare-fun TSet (T@U) T@U)
(declare-fun Inv0_TMap (T@U) T@U)
(declare-fun Inv1_TMap (T@U) T@U)
(declare-fun Tclass._System.Tuple2_0 (T@U) T@U)
(declare-fun Tclass._System.Tuple2_1 (T@U) T@U)
(declare-fun _System.Tuple2._0 (T@U) T@U)
(declare-fun _System.Tuple2._1 (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun BoxRank (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun |Map#Empty| () T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#8| (T@U T@U T@U Bool) T@U)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun TagFamily (T@U) T@U)
(declare-fun |Map#Values| (T@U) T@U)
(declare-fun |Map#Items| (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt TagSet TagMap alloc |##_System._tuple#2._#Make2| Tagclass._System.Tuple2 Tagclass.Test.A Tagclass.Test.B |##Test.A.A1| |##Test.B.B1| |tytagFamily$_tuple#2| tytagFamily$A tytagFamily$B)
)
(assert (= (Tag TInt) TagInt))
(assert (forall ((d T@U) ) (!  (=> (|$IsA#Test.A| d) (Test.A.A1_q d))
 :pattern ( (|$IsA#Test.A| d))
)))
(assert  (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor BoxType) 3)))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|$w#0| T@U) ) (! (= (U_2_bool (MapType0Select BoxType boolType (|lambda#2| |l#0| |l#1|) |$w#0|))  (and ($IsBox |$w#0| |l#0|) (|Set#IsMember| |l#1| |$w#0|)))
 :pattern ( (MapType0Select BoxType boolType (|lambda#2| |l#0| |l#1|) |$w#0|))
)))
(assert (forall ((a T@U) (b T@U) (t T@U) ) (! (= (|Map#Domain| (|Map#Glue| a b t)) a)
 :pattern ( (|Map#Domain| (|Map#Glue| a b t)))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) (t@@0 T@U) ) (! (= (|Map#Elements| (|Map#Glue| a@@0 b@@0 t@@0)) b@@0)
 :pattern ( (|Map#Elements| (|Map#Glue| a@@0 b@@0 t@@0)))
)))
(assert (= (Ctor DatatypeTypeType) 4))
(assert (forall ((|_System._tuple#2$T0| T@U) (|_System._tuple#2$T1| T@U) (d@@0 T@U) ) (!  (=> ($Is DatatypeTypeType d@@0 (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)) (_System.Tuple2.___hMake2_q d@@0))
 :pattern ( (_System.Tuple2.___hMake2_q d@@0) ($Is DatatypeTypeType d@@0 (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)))
)))
(assert (= (Ctor MapType) 5))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|m#0| T@U) ) (!  (=> (or (|Test.__default.ConvertMap__AB#canCall| |m#0|) (and (< 2 $FunctionContextHeight) ($Is MapType |m#0| (TMap Tclass.Test.A TInt)))) ($Is MapType (Test.__default.ConvertMap__AB |m#0|) (TMap Tclass.Test.B TInt)))
 :pattern ( (Test.__default.ConvertMap__AB |m#0|))
))))
(assert (= (DatatypeCtorId |#Test.A.A1|) |##Test.A.A1|))
(assert (= (DatatypeCtorId |#Test.B.B1|) |##Test.B.B1|))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|m#0@@0| T@U) ) (!  (=> (or (|Test.__default.ConvertMap__AB#canCall| (Lit MapType |m#0@@0|)) (and (< 2 $FunctionContextHeight) ($Is MapType |m#0@@0| (TMap Tclass.Test.A TInt)))) (and (and (forall ((|a#1| T@U) ) (!  (=> ($Is DatatypeTypeType |a#1| Tclass.Test.A) (=> (|Set#IsMember| (|Map#Domain| |m#0@@0|) ($Box DatatypeTypeType |a#1|)) (|Test.__default.Convert__AB#canCall| |a#1|)))
 :pattern ( (Test.__default.Convert__AB |a#1|))
 :pattern ( (|Set#IsMember| (|Map#Domain| |m#0@@0|) ($Box DatatypeTypeType |a#1|)))
)) (let ((|dom_B#1| (|Set#FromBoogieMap| (|lambda#0| Tclass.Test.A (|Map#Domain| |m#0@@0|) (|Map#Domain| |m#0@@0|)))))
(forall ((|b#0| T@U) ) (!  (=> ($Is DatatypeTypeType |b#0| Tclass.Test.B) (=> (|Set#IsMember| |dom_B#1| ($Box DatatypeTypeType |b#0|)) (|Test.__default.Convert__BA#canCall| |b#0|)))
 :pattern ( (Test.__default.Convert__BA |b#0|))
 :pattern ( (|Set#IsMember| |dom_B#1| ($Box DatatypeTypeType |b#0|)))
)))) (= (Test.__default.ConvertMap__AB (Lit MapType |m#0@@0|)) (let ((|dom_B#1@@0| (|Set#FromBoogieMap| (|lambda#0| Tclass.Test.A (|Map#Domain| |m#0@@0|) (|Map#Domain| |m#0@@0|)))))
(|Map#Glue| (|Set#FromBoogieMap| (|lambda#2| Tclass.Test.B |dom_B#1@@0|)) (|lambda#3| (|Map#Elements| (Lit MapType |m#0@@0|))) (TMap Tclass.Test.B TInt))))))
 :weight 3
 :pattern ( (Test.__default.ConvertMap__AB (Lit MapType |m#0@@0|)))
))))
(assert (forall ((d@@1 T@U) ) (!  (=> ($Is DatatypeTypeType d@@1 Tclass.Test.A) (Test.A.A1_q d@@1))
 :pattern ( (Test.A.A1_q d@@1) ($Is DatatypeTypeType d@@1 Tclass.Test.A))
)))
(assert (forall ((d@@2 T@U) ) (!  (=> ($Is DatatypeTypeType d@@2 Tclass.Test.B) (Test.B.B1_q d@@2))
 :pattern ( (Test.B.B1_q d@@2) ($Is DatatypeTypeType d@@2 Tclass.Test.B))
)))
(assert (forall ((|_System._tuple#2$T0@@0| T@U) (|_System._tuple#2$T1@@0| T@U) (|a#2#0#0| T@U) (|a#2#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|))  (and ($IsBox |a#2#0#0| |_System._tuple#2$T0@@0|) ($IsBox |a#2#1#0| |_System._tuple#2$T1@@0|)))
 :pattern ( ($Is DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|)))
)))
(assert ($Is DatatypeTypeType |#Test.A.A1| Tclass.Test.A))
(assert ($Is DatatypeTypeType |#Test.B.B1| Tclass.Test.B))
(assert (forall ((a@@1 T@U) (b@@1 T@U) ) (! (= (|Test.A#Equal| a@@1 b@@1) (= a@@1 b@@1))
 :pattern ( (|Test.A#Equal| a@@1 b@@1))
)))
(assert (forall ((x@@2 T@U) (T T@T) ) (! (= (Lit T x@@2) x@@2)
 :pattern ( (Lit T x@@2))
)))
(assert (forall ((a@@2 T@U) (b@@2 T@U) (t0@@0 T@U) (t1@@0 T@U) ) (!  (=> (forall ((bx T@U) )  (=> (|Set#IsMember| a@@2 bx) (and ($IsBox bx t0@@0) ($IsBox (MapType0Select BoxType BoxType b@@2 bx) t1@@0)))) ($Is MapType (|Map#Glue| a@@2 b@@2 (TMap t0@@0 t1@@0)) (TMap t0@@0 t1@@0)))
 :pattern ( (|Map#Glue| a@@2 b@@2 (TMap t0@@0 t1@@0)))
)))
(assert (forall ((|_System._tuple#2$T0@@1| T@U) (|_System._tuple#2$T1@@1| T@U) (|a#2#0#0@@0| T@U) (|a#2#1#0@@0| T@U) ($h T@U) ) (!  (=> ($IsGoodHeap $h) (= ($IsAlloc DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0@@0| |a#2#1#0@@0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|) $h)  (and ($IsAllocBox |a#2#0#0@@0| |_System._tuple#2$T0@@1| $h) ($IsAllocBox |a#2#1#0@@0| |_System._tuple#2$T1@@1| $h))))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0@@0| |a#2#1#0@@0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|) $h))
)))
(assert (forall ((d@@3 T@U) ) (! (= (_System.Tuple2.___hMake2_q d@@3) (= (DatatypeCtorId d@@3) |##_System._tuple#2._#Make2|))
 :pattern ( (_System.Tuple2.___hMake2_q d@@3))
)))
(assert (forall ((d@@4 T@U) ) (! (= (Test.A.A1_q d@@4) (= (DatatypeCtorId d@@4) |##Test.A.A1|))
 :pattern ( (Test.A.A1_q d@@4))
)))
(assert (forall ((d@@5 T@U) ) (! (= (Test.B.B1_q d@@5) (= (DatatypeCtorId d@@5) |##Test.B.B1|))
 :pattern ( (Test.B.B1_q d@@5))
)))
(assert (forall ((x@@3 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@3)) x@@3)
 :pattern ( ($Unbox T@@0 x@@3))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|f#0| T@U) ) (!  (=> (or (|Test.__default.Convert__AB#canCall| |f#0|) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |f#0| Tclass.Test.A))) (= (Test.__default.Convert__AB |f#0|) (Lit DatatypeTypeType |#Test.B.B1|)))
 :pattern ( (Test.__default.Convert__AB |f#0|))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|f#0@@0| T@U) ) (!  (=> (or (|Test.__default.Convert__BA#canCall| |f#0@@0|) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |f#0@@0| Tclass.Test.B))) (= (Test.__default.Convert__BA |f#0@@0|) (Lit DatatypeTypeType |#Test.A.A1|)))
 :pattern ( (Test.__default.Convert__BA |f#0@@0|))
))))
(assert (forall ((m@@1 T@U) (bx@@0 T@U) ) (! (= (|Set#IsMember| (|Set#FromBoogieMap| m@@1) bx@@0) (U_2_bool (MapType0Select BoxType boolType m@@1 bx@@0)))
 :pattern ( (|Set#IsMember| (|Set#FromBoogieMap| m@@1) bx@@0))
)))
(assert (forall ((d@@6 T@U) ) (!  (=> (_System.Tuple2.___hMake2_q d@@6) (exists ((|a#1#0#0| T@U) (|a#1#1#0| T@U) ) (= d@@6 (|#_System._tuple#2._#Make2| |a#1#0#0| |a#1#1#0|))))
 :pattern ( (_System.Tuple2.___hMake2_q d@@6))
)))
(assert (forall ((d@@7 T@U) ) (!  (=> (Test.A.A1_q d@@7) (= d@@7 |#Test.A.A1|))
 :pattern ( (Test.A.A1_q d@@7))
)))
(assert (forall ((d@@8 T@U) ) (!  (=> (Test.B.B1_q d@@8) (= d@@8 |#Test.B.B1|))
 :pattern ( (Test.B.B1_q d@@8))
)))
(assert (= (Ctor SetType) 6))
(assert (forall ((v T@U) (t0@@1 T@U) ) (! (= ($Is SetType v (TSet t0@@1)) (forall ((bx@@1 T@U) ) (!  (=> (|Set#IsMember| v bx@@1) ($IsBox bx@@1 t0@@1))
 :pattern ( (|Set#IsMember| v bx@@1))
)))
 :pattern ( ($Is SetType v (TSet t0@@1)))
)))
(assert (forall ((v@@0 T@U) (t@@1 T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t@@1 h) ($IsAlloc T@@1 v@@0 t@@1 h))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t@@1 h))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|f#0@@1| T@U) ) (!  (=> (or (|Test.__default.Convert__AB#canCall| (Lit DatatypeTypeType |f#0@@1|)) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |f#0@@1| Tclass.Test.A))) (= (Test.__default.Convert__AB (Lit DatatypeTypeType |f#0@@1|)) (Lit DatatypeTypeType |#Test.B.B1|)))
 :weight 3
 :pattern ( (Test.__default.Convert__AB (Lit DatatypeTypeType |f#0@@1|)))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|f#0@@2| T@U) ) (!  (=> (or (|Test.__default.Convert__BA#canCall| (Lit DatatypeTypeType |f#0@@2|)) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |f#0@@2| Tclass.Test.B))) (= (Test.__default.Convert__BA (Lit DatatypeTypeType |f#0@@2|)) (Lit DatatypeTypeType |#Test.A.A1|)))
 :weight 3
 :pattern ( (Test.__default.Convert__BA (Lit DatatypeTypeType |f#0@@2|)))
))))
(assert (forall ((bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 Tclass.Test.A) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@2)) bx@@2) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@2) Tclass.Test.A)))
 :pattern ( ($IsBox bx@@2 Tclass.Test.A))
)))
(assert (forall ((bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 Tclass.Test.B) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@3)) bx@@3) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@3) Tclass.Test.B)))
 :pattern ( ($IsBox bx@@3 Tclass.Test.B))
)))
(assert (forall ((|l#0@@0| T@U) (|l#1@@0| T@U) (|l#2| T@U) (|$y#1| T@U) ) (! (= (U_2_bool (MapType0Select BoxType boolType (|lambda#0| |l#0@@0| |l#1@@0| |l#2|) |$y#1|)) (exists ((|a#0| T@U) ) (!  (and (and ($Is DatatypeTypeType |a#0| |l#0@@0|) (|Set#IsMember| |l#1@@0| ($Box DatatypeTypeType |a#0|))) (= |$y#1| ($Box DatatypeTypeType (Test.__default.Convert__AB |a#0|))))
 :pattern ( (Test.__default.Convert__AB |a#0|))
 :pattern ( (|Set#IsMember| |l#2| ($Box DatatypeTypeType |a#0|)))
)))
 :pattern ( (MapType0Select BoxType boolType (|lambda#0| |l#0@@0| |l#1@@0| |l#2|) |$y#1|))
)))
(assert (forall ((|l#0@@1| T@U) (|$w#0@@0| T@U) ) (! (= (MapType0Select BoxType BoxType (|lambda#3| |l#0@@1|) |$w#0@@0|) (MapType0Select BoxType BoxType |l#0@@1| ($Box DatatypeTypeType (Test.__default.Convert__BA ($Unbox DatatypeTypeType |$w#0@@0|)))))
 :pattern ( (MapType0Select BoxType BoxType (|lambda#3| |l#0@@1|) |$w#0@@0|))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|f#0@@3| T@U) ) (!  (=> (or (|Test.__default.Convert__AB#canCall| |f#0@@3|) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |f#0@@3| Tclass.Test.A))) ($Is DatatypeTypeType (Test.__default.Convert__AB |f#0@@3|) Tclass.Test.B))
 :pattern ( (Test.__default.Convert__AB |f#0@@3|))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|f#0@@4| T@U) ) (!  (=> (or (|Test.__default.Convert__BA#canCall| |f#0@@4|) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |f#0@@4| Tclass.Test.B))) ($Is DatatypeTypeType (Test.__default.Convert__BA |f#0@@4|) Tclass.Test.A))
 :pattern ( (Test.__default.Convert__BA |f#0@@4|))
))))
(assert (forall ((bx@@4 T@U) ) (!  (=> ($IsBox bx@@4 TInt) (and (= ($Box intType ($Unbox intType bx@@4)) bx@@4) ($Is intType ($Unbox intType bx@@4) TInt)))
 :pattern ( ($IsBox bx@@4 TInt))
)))
(assert (forall ((v@@1 T@U) (t@@2 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@1) t@@2) ($Is T@@2 v@@1 t@@2))
 :pattern ( ($IsBox ($Box T@@2 v@@1) t@@2))
)))
(assert (forall ((v@@2 T@U) (t0@@2 T@U) (h@@0 T@U) ) (! (= ($IsAlloc SetType v@@2 (TSet t0@@2) h@@0) (forall ((bx@@5 T@U) ) (!  (=> (|Set#IsMember| v@@2 bx@@5) ($IsAllocBox bx@@5 t0@@2 h@@0))
 :pattern ( (|Set#IsMember| v@@2 bx@@5))
)))
 :pattern ( ($IsAlloc SetType v@@2 (TSet t0@@2) h@@0))
)))
(assert (forall ((t@@3 T@U) (u T@U) ) (! (= (Inv0_TMap (TMap t@@3 u)) t@@3)
 :pattern ( (TMap t@@3 u))
)))
(assert (forall ((t@@4 T@U) (u@@0 T@U) ) (! (= (Inv1_TMap (TMap t@@4 u@@0)) u@@0)
 :pattern ( (TMap t@@4 u@@0))
)))
(assert (forall ((t@@5 T@U) (u@@1 T@U) ) (! (= (Tag (TMap t@@5 u@@1)) TagMap)
 :pattern ( (TMap t@@5 u@@1))
)))
(assert (forall ((|a#0#0#0| T@U) (|a#0#1#0| T@U) ) (! (= (DatatypeCtorId (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|)) |##_System._tuple#2._#Make2|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|))
)))
(assert (forall ((|_System._tuple#2$T0@@2| T@U) (|_System._tuple#2$T1@@2| T@U) ) (! (= (Tclass._System.Tuple2_0 (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|)) |_System._tuple#2$T0@@2|)
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|))
)))
(assert (forall ((|_System._tuple#2$T0@@3| T@U) (|_System._tuple#2$T1@@3| T@U) ) (! (= (Tclass._System.Tuple2_1 (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|)) |_System._tuple#2$T1@@3|)
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|))
)))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| T@U) ) (! (= (_System.Tuple2._0 (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|)) |a#4#0#0|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|))
)))
(assert (forall ((|a#6#0#0| T@U) (|a#6#1#0| T@U) ) (! (= (_System.Tuple2._1 (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|)) |a#6#1#0|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|))
)))
(assert (forall ((t@@6 T@U) ) (! (= (Inv0_TSet (TSet t@@6)) t@@6)
 :pattern ( (TSet t@@6))
)))
(assert (forall ((t@@7 T@U) ) (! (= (Tag (TSet t@@7)) TagSet)
 :pattern ( (TSet t@@7))
)))
(assert (forall ((x@@4 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@4)) x@@4)
 :pattern ( ($Box T@@3 x@@4))
)))
(assert (forall ((v@@3 T@U) (t0@@3 T@U) (t1@@1 T@U) (h@@1 T@U) ) (! (= ($IsAlloc MapType v@@3 (TMap t0@@3 t1@@1) h@@1) (forall ((bx@@6 T@U) ) (!  (=> (|Set#IsMember| (|Map#Domain| v@@3) bx@@6) (and ($IsAllocBox (MapType0Select BoxType BoxType (|Map#Elements| v@@3) bx@@6) t1@@1 h@@1) ($IsAllocBox bx@@6 t0@@3 h@@1)))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| v@@3) bx@@6))
 :pattern ( (|Set#IsMember| (|Map#Domain| v@@3) bx@@6))
)))
 :pattern ( ($IsAlloc MapType v@@3 (TMap t0@@3 t1@@1) h@@1))
)))
(assert (forall ((|a#5#0#0| T@U) (|a#5#1#0| T@U) ) (! (< (BoxRank |a#5#0#0|) (DtRank (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|))
)))
(assert (forall ((|a#7#0#0| T@U) (|a#7#1#0| T@U) ) (! (< (BoxRank |a#7#1#0|) (DtRank (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|))
)))
(assert (forall ((u@@2 T@U) ) (!  (not (|Set#IsMember| (|Map#Domain| |Map#Empty|) u@@2))
 :pattern ( (|Set#IsMember| (|Map#Domain| |Map#Empty|) u@@2))
)))
(assert (forall ((bx@@7 T@U) (s T@U) (t@@8 T@U) ) (!  (=> ($IsBox bx@@7 (TMap s t@@8)) (and (= ($Box MapType ($Unbox MapType bx@@7)) bx@@7) ($Is MapType ($Unbox MapType bx@@7) (TMap s t@@8))))
 :pattern ( ($IsBox bx@@7 (TMap s t@@8)))
)))
(assert (forall ((|_System._tuple#2$T0@@4| T@U) (|_System._tuple#2$T1@@4| T@U) (bx@@8 T@U) ) (!  (=> ($IsBox bx@@8 (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@8)) bx@@8) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@8) (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|))))
 :pattern ( ($IsBox bx@@8 (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|)))
)))
(assert  (and (and (and (and (and (and (forall ((t0@@4 T@T) (t1@@2 T@T) (t2 T@T) (val@@1 T@U) (m@@2 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@4 t1@@2 t2 (MapType1Store t0@@4 t1@@2 t2 m@@2 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@3 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@3 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@3 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@4 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@4 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@4 y0@@1 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 7)) (= (Ctor FieldType) 8)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 9))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0@@2| T@U) (|l#1@@1| T@U) (|l#2@@0| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#8| |l#0@@2| |l#1@@1| |l#2@@0| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0@@2|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1@@1| $o) |l#2@@0|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#8| |l#0@@2| |l#1@@1| |l#2@@0| |l#3|) $o $f))
)))
(assert (forall ((|_System._tuple#2$T0@@5| T@U) (|_System._tuple#2$T1@@5| T@U) ) (!  (and (= (Tag (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|)) Tagclass._System.Tuple2) (= (TagFamily (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|)) |tytagFamily$_tuple#2|))
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|))
)))
(assert (forall ((m@@5 T@U) ) (!  (or (= m@@5 |Map#Empty|) (exists ((k T@U) ) (|Set#IsMember| (|Map#Domain| m@@5) k)))
 :pattern ( (|Map#Domain| m@@5))
)))
(assert (forall ((m@@6 T@U) ) (!  (or (= m@@6 |Map#Empty|) (exists ((v@@4 T@U) ) (|Set#IsMember| (|Map#Values| m@@6) v@@4)))
 :pattern ( (|Map#Values| m@@6))
)))
(assert (forall ((m@@7 T@U) (item T@U) ) (! (= (|Set#IsMember| (|Map#Items| m@@7) item)  (and (|Set#IsMember| (|Map#Domain| m@@7) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (= (MapType0Select BoxType BoxType (|Map#Elements| m@@7) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item)))))
 :pattern ( (|Set#IsMember| (|Map#Items| m@@7) item))
)))
(assert (forall ((m@@8 T@U) (v@@5 T@U) ) (! (= (|Set#IsMember| (|Map#Values| m@@8) v@@5) (exists ((u@@3 T@U) ) (!  (and (|Set#IsMember| (|Map#Domain| m@@8) u@@3) (= v@@5 (MapType0Select BoxType BoxType (|Map#Elements| m@@8) u@@3)))
 :pattern ( (|Set#IsMember| (|Map#Domain| m@@8) u@@3))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| m@@8) u@@3))
)))
 :pattern ( (|Set#IsMember| (|Map#Values| m@@8) v@@5))
)))
(assert (forall ((d@@9 T@U) ) (! (= (BoxRank ($Box DatatypeTypeType d@@9)) (DtRank d@@9))
 :pattern ( (BoxRank ($Box DatatypeTypeType d@@9)))
)))
(assert (forall ((bx@@9 T@U) (t@@9 T@U) ) (!  (=> ($IsBox bx@@9 (TSet t@@9)) (and (= ($Box SetType ($Unbox SetType bx@@9)) bx@@9) ($Is SetType ($Unbox SetType bx@@9) (TSet t@@9))))
 :pattern ( ($IsBox bx@@9 (TSet t@@9)))
)))
(assert (forall ((v@@6 T@U) (t0@@5 T@U) (t1@@3 T@U) ) (! (= ($Is MapType v@@6 (TMap t0@@5 t1@@3)) (forall ((bx@@10 T@U) ) (!  (=> (|Set#IsMember| (|Map#Domain| v@@6) bx@@10) (and ($IsBox (MapType0Select BoxType BoxType (|Map#Elements| v@@6) bx@@10) t1@@3) ($IsBox bx@@10 t0@@5)))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| v@@6) bx@@10))
 :pattern ( (|Set#IsMember| (|Map#Domain| v@@6) bx@@10))
)))
 :pattern ( ($Is MapType v@@6 (TMap t0@@5 t1@@3)))
)))
(assert (forall ((d@@10 T@U) ($h@@0 T@U) ) (!  (=> (and ($IsGoodHeap $h@@0) ($Is DatatypeTypeType d@@10 Tclass.Test.A)) ($IsAlloc DatatypeTypeType d@@10 Tclass.Test.A $h@@0))
 :pattern ( ($IsAlloc DatatypeTypeType d@@10 Tclass.Test.A $h@@0))
)))
(assert (forall ((d@@11 T@U) ($h@@1 T@U) ) (!  (=> (and ($IsGoodHeap $h@@1) ($Is DatatypeTypeType d@@11 Tclass.Test.B)) ($IsAlloc DatatypeTypeType d@@11 Tclass.Test.B $h@@1))
 :pattern ( ($IsAlloc DatatypeTypeType d@@11 Tclass.Test.B $h@@1))
)))
(assert (= (Tag Tclass.Test.A) Tagclass.Test.A))
(assert (= (TagFamily Tclass.Test.A) tytagFamily$A))
(assert (= (Tag Tclass.Test.B) Tagclass.Test.B))
(assert (= (TagFamily Tclass.Test.B) tytagFamily$B))
(assert (= |#Test.A.A1| (Lit DatatypeTypeType |#Test.A.A1|)))
(assert (= |#Test.B.B1| (Lit DatatypeTypeType |#Test.B.B1|)))
(assert (forall ((d@@12 T@U) (|_System._tuple#2$T0@@6| T@U) ($h@@2 T@U) ) (!  (=> (and ($IsGoodHeap $h@@2) (and (_System.Tuple2.___hMake2_q d@@12) (exists ((|_System._tuple#2$T1@@6| T@U) ) (! ($IsAlloc DatatypeTypeType d@@12 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@2)
 :pattern ( ($IsAlloc DatatypeTypeType d@@12 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@2))
)))) ($IsAllocBox (_System.Tuple2._0 d@@12) |_System._tuple#2$T0@@6| $h@@2))
 :pattern ( ($IsAllocBox (_System.Tuple2._0 d@@12) |_System._tuple#2$T0@@6| $h@@2))
)))
(assert (forall ((d@@13 T@U) (|_System._tuple#2$T1@@7| T@U) ($h@@3 T@U) ) (!  (=> (and ($IsGoodHeap $h@@3) (and (_System.Tuple2.___hMake2_q d@@13) (exists ((|_System._tuple#2$T0@@7| T@U) ) (! ($IsAlloc DatatypeTypeType d@@13 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|) $h@@3)
 :pattern ( ($IsAlloc DatatypeTypeType d@@13 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|) $h@@3))
)))) ($IsAllocBox (_System.Tuple2._1 d@@13) |_System._tuple#2$T1@@7| $h@@3))
 :pattern ( ($IsAllocBox (_System.Tuple2._1 d@@13) |_System._tuple#2$T1@@7| $h@@3))
)))
(assert (forall ((|a#3#0#0| T@U) (|a#3#1#0| T@U) ) (! (= (|#_System._tuple#2._#Make2| (Lit BoxType |a#3#0#0|) (Lit BoxType |a#3#1#0|)) (Lit DatatypeTypeType (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| (Lit BoxType |a#3#0#0|) (Lit BoxType |a#3#1#0|)))
)))
(assert (forall ((x@@5 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@5)) (Lit BoxType ($Box T@@4 x@@5)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@5)))
)))
(assert (forall ((h@@2 T@U) (v@@7 T@U) ) (! ($IsAlloc intType v@@7 TInt h@@2)
 :pattern ( ($IsAlloc intType v@@7 TInt h@@2))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|m#0@@1| T@U) ) (!  (=> (or (|Test.__default.ConvertMap__AB#canCall| |m#0@@1|) (and (< 2 $FunctionContextHeight) ($Is MapType |m#0@@1| (TMap Tclass.Test.A TInt)))) (and (and (forall ((|a#0@@0| T@U) ) (!  (=> ($Is DatatypeTypeType |a#0@@0| Tclass.Test.A) (=> (|Set#IsMember| (|Map#Domain| |m#0@@1|) ($Box DatatypeTypeType |a#0@@0|)) (|Test.__default.Convert__AB#canCall| |a#0@@0|)))
 :pattern ( (Test.__default.Convert__AB |a#0@@0|))
 :pattern ( (|Set#IsMember| (|Map#Domain| |m#0@@1|) ($Box DatatypeTypeType |a#0@@0|)))
)) (let ((|dom_B#0| (|Set#FromBoogieMap| (|lambda#0| Tclass.Test.A (|Map#Domain| |m#0@@1|) (|Map#Domain| |m#0@@1|)))))
(forall ((|b#0@@0| T@U) ) (!  (=> ($Is DatatypeTypeType |b#0@@0| Tclass.Test.B) (=> (|Set#IsMember| |dom_B#0| ($Box DatatypeTypeType |b#0@@0|)) (|Test.__default.Convert__BA#canCall| |b#0@@0|)))
 :pattern ( (Test.__default.Convert__BA |b#0@@0|))
 :pattern ( (|Set#IsMember| |dom_B#0| ($Box DatatypeTypeType |b#0@@0|)))
)))) (= (Test.__default.ConvertMap__AB |m#0@@1|) (let ((|dom_B#0@@0| (|Set#FromBoogieMap| (|lambda#0| Tclass.Test.A (|Map#Domain| |m#0@@1|) (|Map#Domain| |m#0@@1|)))))
(|Map#Glue| (|Set#FromBoogieMap| (|lambda#2| Tclass.Test.B |dom_B#0@@0|)) (|lambda#3| (|Map#Elements| |m#0@@1|)) (TMap Tclass.Test.B TInt))))))
 :pattern ( (Test.__default.ConvertMap__AB |m#0@@1|))
))))
(assert (forall ((m@@9 T@U) ) (!  (or (= m@@9 |Map#Empty|) (exists ((k@@0 T@U) (v@@8 T@U) ) (|Set#IsMember| (|Map#Items| m@@9) ($Box DatatypeTypeType (|#_System._tuple#2._#Make2| k@@0 v@@8)))))
 :pattern ( (|Map#Items| m@@9))
)))
(assert (forall ((v@@9 T@U) (t0@@6 T@U) (t1@@4 T@U) ) (!  (=> ($Is MapType v@@9 (TMap t0@@6 t1@@4)) (and (and ($Is SetType (|Map#Domain| v@@9) (TSet t0@@6)) ($Is SetType (|Map#Values| v@@9) (TSet t1@@4))) ($Is SetType (|Map#Items| v@@9) (TSet (Tclass._System.Tuple2 t0@@6 t1@@4)))))
 :pattern ( ($Is MapType v@@9 (TMap t0@@6 t1@@4)))
)))
(assert (forall ((v@@10 T@U) ) (! ($Is intType v@@10 TInt)
 :pattern ( ($Is intType v@@10 TInt))
)))
(assert (forall ((a@@3 T@U) (b@@3 T@U) ) (! (|Test.A#Equal| a@@3 b@@3)
 :pattern ( (|Test.A#Equal| a@@3 b@@3))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |dom_B#Z#0@0| () T@U)
(declare-fun |b#1@0| () T@U)
(declare-fun $Heap () T@U)
(declare-fun |m#0@@2| () T@U)
(declare-fun |u#0@0| () T@U)
(declare-fun |let#0#0#0| () T@U)
(declare-fun |a#2@0| () T@U)
(declare-fun $_ReadsFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 20) (let ((anon12_correct true))
(let ((anon20_Else_correct  (=> (and (not (|Set#IsMember| |dom_B#Z#0@0| ($Box DatatypeTypeType |b#1@0|))) (= (ControlFlow 0 6) 2)) anon12_correct)))
(let ((anon20_Then_correct  (=> (and (and (|Set#IsMember| |dom_B#Z#0@0| ($Box DatatypeTypeType |b#1@0|)) ($IsAlloc DatatypeTypeType |b#1@0| Tclass.Test.B $Heap)) (and (|Test.__default.Convert__BA#canCall| |b#1@0|) (Test.A.A1_q (Test.__default.Convert__BA |b#1@0|)))) (and (=> (= (ControlFlow 0 4) (- 0 5)) (|Set#IsMember| (|Map#Domain| |m#0@@2|) ($Box DatatypeTypeType (Test.__default.Convert__BA |b#1@0|)))) (=> (|Set#IsMember| (|Map#Domain| |m#0@@2|) ($Box DatatypeTypeType (Test.__default.Convert__BA |b#1@0|))) (=> (= (ControlFlow 0 4) 2) anon12_correct))))))
(let ((anon19_Then_correct  (=> (and ($Is DatatypeTypeType |b#1@0| Tclass.Test.B) ($IsAlloc DatatypeTypeType |b#1@0| Tclass.Test.B $Heap)) (and (=> (= (ControlFlow 0 7) 4) anon20_Then_correct) (=> (= (ControlFlow 0 7) 6) anon20_Else_correct)))))
(let ((anon19_Else_correct  (=> (and (not (and ($Is DatatypeTypeType |b#1@0| Tclass.Test.B) ($IsAlloc DatatypeTypeType |b#1@0| Tclass.Test.B $Heap))) (= (ControlFlow 0 3) 2)) anon12_correct)))
(let ((anon9_correct  (=> (forall ((|u#1| T@U) ) (!  (=> ($Is DatatypeTypeType |u#1| Tclass.Test.A) (=> (|Set#IsMember| (|Map#Domain| |m#0@@2|) ($Box DatatypeTypeType |u#1|)) (|$IsA#Test.A| |u#1|)))
 :pattern ( (|Set#IsMember| (|Map#Domain| |m#0@@2|) ($Box DatatypeTypeType |u#1|)))
)) (and (=> (= (ControlFlow 0 8) (- 0 9)) (forall ((|u#1@@0| T@U) ) (!  (=> ($Is DatatypeTypeType |u#1@@0| Tclass.Test.A) (=> (|Set#IsMember| (|Map#Domain| |m#0@@2|) ($Box DatatypeTypeType |u#1@@0|)) (|Test.A#Equal| |u#1@@0| |#Test.A.A1|)))
 :pattern ( (|Set#IsMember| (|Map#Domain| |m#0@@2|) ($Box DatatypeTypeType |u#1@@0|)))
))) (=> (forall ((|u#1@@1| T@U) ) (!  (=> ($Is DatatypeTypeType |u#1@@1| Tclass.Test.A) (=> (|Set#IsMember| (|Map#Domain| |m#0@@2|) ($Box DatatypeTypeType |u#1@@1|)) (|Test.A#Equal| |u#1@@1| |#Test.A.A1|)))
 :pattern ( (|Set#IsMember| (|Map#Domain| |m#0@@2|) ($Box DatatypeTypeType |u#1@@1|)))
)) (and (=> (= (ControlFlow 0 8) 7) anon19_Then_correct) (=> (= (ControlFlow 0 8) 3) anon19_Else_correct)))))))
(let ((anon18_Else_correct  (=> (and (not (|Set#IsMember| (|Map#Domain| |m#0@@2|) ($Box DatatypeTypeType |u#0@0|))) (= (ControlFlow 0 12) 8)) anon9_correct)))
(let ((anon18_Then_correct  (=> (and (|Set#IsMember| (|Map#Domain| |m#0@@2|) ($Box DatatypeTypeType |u#0@0|)) (= (ControlFlow 0 11) 8)) anon9_correct)))
(let ((anon17_Then_correct  (=> (and ($Is DatatypeTypeType |u#0@0| Tclass.Test.A) ($IsAlloc DatatypeTypeType |u#0@0| Tclass.Test.A $Heap)) (and (=> (= (ControlFlow 0 13) 11) anon18_Then_correct) (=> (= (ControlFlow 0 13) 12) anon18_Else_correct)))))
(let ((anon17_Else_correct  (=> (and (not (and ($Is DatatypeTypeType |u#0@0| Tclass.Test.A) ($IsAlloc DatatypeTypeType |u#0@0| Tclass.Test.A $Heap))) (= (ControlFlow 0 10) 8)) anon9_correct)))
(let ((anon6_correct  (=> (and (and (= |let#0#0#0| (|Set#FromBoogieMap| (|lambda#0| Tclass.Test.A (|Map#Domain| |m#0@@2|) (|Map#Domain| |m#0@@2|)))) (forall ((|a#3| T@U) ) (!  (=> ($Is DatatypeTypeType |a#3| Tclass.Test.A) (=> (|Set#IsMember| (|Map#Domain| |m#0@@2|) ($Box DatatypeTypeType |a#3|)) (|Test.__default.Convert__AB#canCall| |a#3|)))
 :pattern ( (Test.__default.Convert__AB |a#3|))
 :pattern ( (|Set#IsMember| (|Map#Domain| |m#0@@2|) ($Box DatatypeTypeType |a#3|)))
))) (and ($Is SetType |let#0#0#0| (TSet Tclass.Test.B)) (= |dom_B#Z#0@0| |let#0#0#0|))) (and (=> (= (ControlFlow 0 14) 13) anon17_Then_correct) (=> (= (ControlFlow 0 14) 10) anon17_Else_correct)))))
(let ((anon16_Else_correct  (=> (and (not (|Set#IsMember| (|Map#Domain| |m#0@@2|) ($Box DatatypeTypeType |a#2@0|))) (= (ControlFlow 0 17) 14)) anon6_correct)))
(let ((anon16_Then_correct  (=> (|Set#IsMember| (|Map#Domain| |m#0@@2|) ($Box DatatypeTypeType |a#2@0|)) (=> (and (and ($IsAlloc DatatypeTypeType |a#2@0| Tclass.Test.A $Heap) (|Test.__default.Convert__AB#canCall| |a#2@0|)) (and (Test.B.B1_q (Test.__default.Convert__AB |a#2@0|)) (= (ControlFlow 0 16) 14))) anon6_correct))))
(let ((anon15_Then_correct  (=> (and ($Is DatatypeTypeType |a#2@0| Tclass.Test.A) ($IsAlloc DatatypeTypeType |a#2@0| Tclass.Test.A $Heap)) (and (=> (= (ControlFlow 0 18) 16) anon16_Then_correct) (=> (= (ControlFlow 0 18) 17) anon16_Else_correct)))))
(let ((anon15_Else_correct  (=> (and (not (and ($Is DatatypeTypeType |a#2@0| Tclass.Test.A) ($IsAlloc DatatypeTypeType |a#2@0| Tclass.Test.A $Heap))) (= (ControlFlow 0 15) 14)) anon6_correct)))
(let ((anon14_Then_correct true))
(let ((anon0_correct  (=> (= $_ReadsFrame@0 (|lambda#8| null $Heap alloc false)) (and (and (=> (= (ControlFlow 0 19) 1) anon14_Then_correct) (=> (= (ControlFlow 0 19) 18) anon15_Then_correct)) (=> (= (ControlFlow 0 19) 15) anon15_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) ($Is MapType |m#0@@2| (TMap Tclass.Test.A TInt))) (and (= 2 $FunctionContextHeight) (= (ControlFlow 0 20) 19))) anon0_correct)))
PreconditionGeneratedEntry_correct)))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
