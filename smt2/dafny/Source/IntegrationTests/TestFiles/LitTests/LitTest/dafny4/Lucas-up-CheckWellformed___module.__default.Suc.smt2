(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 (Int) Int)
(declare-fun $generated@@21 (T@T T@U) T@U)
(declare-fun $generated@@24 (T@T T@U) T@U)
(declare-fun $generated@@25 (T@T T@U) T@U)
(declare-fun $generated@@28 (T@U T@U) Bool)
(declare-fun $generated@@29 (T@U) T@U)
(declare-fun $generated@@30 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@31 () T@T)
(declare-fun $generated@@32 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@46 (T@T T@U T@U) Bool)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 (T@U) T@U)
(declare-fun $generated@@49 (T@U T@U) Bool)
(declare-fun $generated@@53 () T@U)
(declare-fun $generated@@56 (Int T@U Int T@U) T@U)
(declare-fun $generated@@63 () Int)
(declare-fun $generated@@64 (T@U) T@U)
(declare-fun $generated@@65 (T@U) Bool)
(declare-fun $generated@@71 (T@U) T@U)
(declare-fun $generated@@73 (T@U) T@U)
(declare-fun $generated@@77 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@78 () T@T)
(declare-fun $generated@@79 () T@T)
(declare-fun $generated@@80 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@81 (T@T T@T) T@T)
(declare-fun $generated@@82 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@83 (T@T) T@T)
(declare-fun $generated@@84 (T@T) T@T)
(declare-fun $generated@@125 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (forall (($generated@@20 Int) ) (! (= ($generated@@19 $generated@@20) $generated@@20)
 :pattern ( ($generated@@19 $generated@@20))
)))
(assert (forall (($generated@@22 T@U) ($generated@@23 T@T) ) (! (= ($generated@@21 $generated@@23 $generated@@22) $generated@@22)
 :pattern ( ($generated@@21 $generated@@23 $generated@@22))
)))
(assert (forall (($generated@@26 T@U) ($generated@@27 T@T) ) (! (= ($generated@@25 $generated@@27 ($generated@@24 $generated@@27 $generated@@26)) $generated@@26)
 :pattern ( ($generated@@24 $generated@@27 $generated@@26))
)))
(assert  (and (and (forall (($generated@@33 T@T) ($generated@@34 T@T) ($generated@@35 T@U) ($generated@@36 T@U) ($generated@@37 T@U) ) (! (= ($generated@@30 $generated@@33 $generated@@34 ($generated@@32 $generated@@33 $generated@@34 $generated@@36 $generated@@37 $generated@@35) $generated@@37) $generated@@35)
 :weight 0
)) (forall (($generated@@38 T@T) ($generated@@39 T@T) ($generated@@40 T@U) ($generated@@41 T@U) ($generated@@42 T@U) ($generated@@43 T@U) ) (!  (or (= $generated@@42 $generated@@43) (= ($generated@@30 $generated@@38 $generated@@39 ($generated@@32 $generated@@38 $generated@@39 $generated@@41 $generated@@42 $generated@@40) $generated@@43) ($generated@@30 $generated@@38 $generated@@39 $generated@@41 $generated@@43)))
 :weight 0
))) (= ($generated@@3 $generated@@31) 3)))
(assert (forall (($generated@@44 T@U) ($generated@@45 T@U) ) (! (= ($generated@@28 ($generated@@29 $generated@@44) $generated@@45) ($generated@@8 ($generated@@30 $generated@@31 $generated@@4 $generated@@44 $generated@@45)))
 :pattern ( ($generated@@28 ($generated@@29 $generated@@44) $generated@@45))
)))
(assert (= ($generated@@3 $generated@@47) 4))
(assert (forall (($generated@@50 T@U) ($generated@@51 T@U) ) (! (= ($generated@@46 $generated@@47 $generated@@50 ($generated@@48 $generated@@51)) (forall (($generated@@52 T@U) ) (!  (=> ($generated@@28 $generated@@50 $generated@@52) ($generated@@49 $generated@@52 $generated@@51))
 :pattern ( ($generated@@28 $generated@@50 $generated@@52))
)))
 :pattern ( ($generated@@46 $generated@@47 $generated@@50 ($generated@@48 $generated@@51)))
)))
(assert (forall (($generated@@54 T@U) ) (! (= ($generated@@46 $generated@@5 $generated@@54 $generated@@53) (<= ($generated@@19 0) ($generated@@10 $generated@@54)))
 :pattern ( ($generated@@46 $generated@@5 $generated@@54 $generated@@53))
)))
(assert (forall (($generated@@55 T@U) ) (!  (=> ($generated@@49 $generated@@55 $generated@@53) (and (= ($generated@@25 $generated@@5 ($generated@@24 $generated@@5 $generated@@55)) $generated@@55) ($generated@@46 $generated@@5 ($generated@@24 $generated@@5 $generated@@55) $generated@@53)))
 :pattern ( ($generated@@49 $generated@@55 $generated@@53))
)))
(assert (forall (($generated@@57 Int) ($generated@@58 T@U) ($generated@@59 Int) ($generated@@60 T@U) ($generated@@61 T@U) ) (! (= ($generated@@8 ($generated@@30 $generated@@31 $generated@@4 ($generated@@56 $generated@@57 $generated@@58 $generated@@59 $generated@@60) $generated@@61)) (exists (($generated@@62 Int) ) (!  (and (and (<= $generated@@57 $generated@@62) ($generated@@28 $generated@@58 ($generated@@25 $generated@@5 ($generated@@9 $generated@@62)))) (= $generated@@61 ($generated@@25 $generated@@5 ($generated@@9 (+ $generated@@62 $generated@@59)))))
 :pattern ( ($generated@@28 $generated@@60 ($generated@@25 $generated@@5 ($generated@@9 $generated@@62))))
)))
 :pattern ( ($generated@@30 $generated@@31 $generated@@4 ($generated@@56 $generated@@57 $generated@@58 $generated@@59 $generated@@60) $generated@@61))
)))
(assert  (=> (<= 0 $generated@@63) (forall (($generated@@66 T@U) ) (!  (=> (or ($generated@@65 $generated@@66) (and (< 0 $generated@@63) ($generated@@46 $generated@@47 $generated@@66 ($generated@@48 $generated@@53)))) (= ($generated@@64 $generated@@66) ($generated@@29 ($generated@@56 ($generated@@19 0) $generated@@66 1 $generated@@66))))
 :pattern ( ($generated@@64 $generated@@66))
))))
(assert (forall (($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@T) ) (! (= ($generated@@49 ($generated@@25 $generated@@69 $generated@@67) $generated@@68) ($generated@@46 $generated@@69 $generated@@67 $generated@@68))
 :pattern ( ($generated@@49 ($generated@@25 $generated@@69 $generated@@67) $generated@@68))
)))
(assert  (=> (<= 0 $generated@@63) (forall (($generated@@70 T@U) ) (!  (=> (or ($generated@@65 ($generated@@21 $generated@@47 $generated@@70)) (and (< 0 $generated@@63) ($generated@@46 $generated@@47 $generated@@70 ($generated@@48 $generated@@53)))) (= ($generated@@64 ($generated@@21 $generated@@47 $generated@@70)) ($generated@@29 ($generated@@56 ($generated@@19 0) ($generated@@21 $generated@@47 $generated@@70) 1 $generated@@70))))
 :weight 3
 :pattern ( ($generated@@64 ($generated@@21 $generated@@47 $generated@@70)))
))))
(assert (forall (($generated@@72 T@U) ) (! (= ($generated@@71 ($generated@@48 $generated@@72)) $generated@@72)
 :pattern ( ($generated@@48 $generated@@72))
)))
(assert (forall (($generated@@74 T@U) ) (! (= ($generated@@73 ($generated@@48 $generated@@74)) $generated)
 :pattern ( ($generated@@48 $generated@@74))
)))
(assert (forall (($generated@@75 T@U) ($generated@@76 T@T) ) (! (= ($generated@@24 $generated@@76 ($generated@@25 $generated@@76 $generated@@75)) $generated@@75)
 :pattern ( ($generated@@25 $generated@@76 $generated@@75))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@85 T@T) ($generated@@86 T@T) ($generated@@87 T@T) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ) (! (= ($generated@@77 $generated@@85 $generated@@86 $generated@@87 ($generated@@82 $generated@@85 $generated@@86 $generated@@87 $generated@@89 $generated@@90 $generated@@91 $generated@@88) $generated@@90 $generated@@91) $generated@@88)
 :weight 0
)) (and (forall (($generated@@92 T@T) ($generated@@93 T@T) ($generated@@94 T@T) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ) (!  (or (= $generated@@97 $generated@@99) (= ($generated@@77 $generated@@92 $generated@@93 $generated@@94 ($generated@@82 $generated@@92 $generated@@93 $generated@@94 $generated@@96 $generated@@97 $generated@@98 $generated@@95) $generated@@99 $generated@@100) ($generated@@77 $generated@@92 $generated@@93 $generated@@94 $generated@@96 $generated@@99 $generated@@100)))
 :weight 0
)) (forall (($generated@@101 T@T) ($generated@@102 T@T) ($generated@@103 T@T) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ) (!  (or (= $generated@@107 $generated@@109) (= ($generated@@77 $generated@@101 $generated@@102 $generated@@103 ($generated@@82 $generated@@101 $generated@@102 $generated@@103 $generated@@105 $generated@@106 $generated@@107 $generated@@104) $generated@@108 $generated@@109) ($generated@@77 $generated@@101 $generated@@102 $generated@@103 $generated@@105 $generated@@108 $generated@@109)))
 :weight 0
)))) (= ($generated@@3 $generated@@78) 5)) (= ($generated@@3 $generated@@79) 6)) (forall (($generated@@110 T@T) ($generated@@111 T@T) ) (= ($generated@@3 ($generated@@81 $generated@@110 $generated@@111)) 7))) (forall (($generated@@112 T@T) ($generated@@113 T@T) ) (! (= ($generated@@83 ($generated@@81 $generated@@112 $generated@@113)) $generated@@112)
 :pattern ( ($generated@@81 $generated@@112 $generated@@113))
))) (forall (($generated@@114 T@T) ($generated@@115 T@T) ) (! (= ($generated@@84 ($generated@@81 $generated@@114 $generated@@115)) $generated@@115)
 :pattern ( ($generated@@81 $generated@@114 $generated@@115))
))))
(assert (forall (($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 Bool) ($generated@@120 T@U) ($generated@@121 T@U) ) (! (= ($generated@@8 ($generated@@77 $generated@@78 $generated@@79 $generated@@4 ($generated@@80 $generated@@116 $generated@@117 $generated@@118 $generated@@119) $generated@@120 $generated@@121))  (=> (and (or (not (= $generated@@120 $generated@@116)) (not true)) ($generated@@8 ($generated@@24 $generated@@4 ($generated@@30 $generated@@79 $generated@@31 ($generated@@30 $generated@@78 ($generated@@81 $generated@@79 $generated@@31) $generated@@117 $generated@@120) $generated@@118)))) $generated@@119))
 :pattern ( ($generated@@77 $generated@@78 $generated@@79 $generated@@4 ($generated@@80 $generated@@116 $generated@@117 $generated@@118 $generated@@119) $generated@@120 $generated@@121))
)))
(assert  (=> (<= 0 $generated@@63) (forall (($generated@@122 T@U) ) (!  (=> (or ($generated@@65 $generated@@122) (and (< 0 $generated@@63) ($generated@@46 $generated@@47 $generated@@122 ($generated@@48 $generated@@53)))) ($generated@@46 $generated@@47 ($generated@@64 $generated@@122) ($generated@@48 $generated@@53)))
 :pattern ( ($generated@@64 $generated@@122))
))))
(assert (forall (($generated@@123 T@U) ($generated@@124 T@U) ) (!  (=> ($generated@@49 $generated@@123 ($generated@@48 $generated@@124)) (and (= ($generated@@25 $generated@@47 ($generated@@24 $generated@@47 $generated@@123)) $generated@@123) ($generated@@46 $generated@@47 ($generated@@24 $generated@@47 $generated@@123) ($generated@@48 $generated@@124))))
 :pattern ( ($generated@@49 $generated@@123 ($generated@@48 $generated@@124)))
)))
(assert (= ($generated@@73 $generated@@53) $generated@@1))
(assert (= ($generated@@125 $generated@@53) $generated@@2))
(assert (forall (($generated@@126 Int) ) (! (= ($generated@@25 $generated@@5 ($generated@@9 ($generated@@19 $generated@@126))) ($generated@@21 $generated@@31 ($generated@@25 $generated@@5 ($generated@@9 $generated@@126))))
 :pattern ( ($generated@@25 $generated@@5 ($generated@@9 ($generated@@19 $generated@@126))))
)))
(assert (forall (($generated@@127 T@U) ($generated@@128 T@T) ) (! (= ($generated@@25 $generated@@128 ($generated@@21 $generated@@128 $generated@@127)) ($generated@@21 $generated@@31 ($generated@@25 $generated@@128 $generated@@127)))
 :pattern ( ($generated@@25 $generated@@128 ($generated@@21 $generated@@128 $generated@@127)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@129 () T@U)
(declare-fun $generated@@130 () Int)
(declare-fun $generated@@131 () Int)
(declare-fun $generated@@132 () T@U)
(declare-fun $generated@@133 () T@U)
(declare-fun $generated@@134 () T@U)
(declare-fun $generated@@135 (T@U) Bool)
(declare-fun $generated@@136 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 9) (let (($generated@@137 true))
(let (($generated@@138  (=> (and (not ($generated@@28 $generated@@129 ($generated@@25 $generated@@5 ($generated@@9 $generated@@130)))) (= (ControlFlow 0 6) 2)) $generated@@137)))
(let (($generated@@139  (=> (and ($generated@@28 $generated@@129 ($generated@@25 $generated@@5 ($generated@@9 $generated@@130))) (= $generated@@131 (+ $generated@@130 1))) (and (=> (= (ControlFlow 0 4) (- 0 5)) (<= ($generated@@19 0) $generated@@131)) (=> (<= ($generated@@19 0) $generated@@131) (=> (= (ControlFlow 0 4) 2) $generated@@137))))))
(let (($generated@@140  (=> (<= ($generated@@19 0) $generated@@130) (and (=> (= (ControlFlow 0 7) 4) $generated@@139) (=> (= (ControlFlow 0 7) 6) $generated@@138)))))
(let (($generated@@141  (=> (and (< $generated@@130 ($generated@@19 0)) (= (ControlFlow 0 3) 2)) $generated@@137)))
(let (($generated@@142 true))
(let (($generated@@143  (=> (= $generated@@132 ($generated@@80 $generated@@133 $generated@@134 $generated@@0 false)) (and (and (=> (= (ControlFlow 0 8) 1) $generated@@142) (=> (= (ControlFlow 0 8) 7) $generated@@140)) (=> (= (ControlFlow 0 8) 3) $generated@@141)))))
(let (($generated@@144  (=> (and (and (and ($generated@@135 $generated@@134) ($generated@@136 $generated@@134)) ($generated@@46 $generated@@47 $generated@@129 ($generated@@48 $generated@@53))) (and (= 0 $generated@@63) (= (ControlFlow 0 9) 8))) $generated@@143)))
$generated@@144)))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
