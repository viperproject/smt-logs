(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun alloc () T@U)
(declare-fun Tagclass._System.nat () T@U)
(declare-fun tytagFamily$nat () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass._System.nat () T@U)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.binom (T@U Bool Int Int) Int)
(declare-fun |_module.__default.binom#canCall| (Int Int) Bool)
(declare-fun $LS (T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun Mod (Int Int) Int)
(declare-fun _module.__default.EVEN (Bool Int) Bool)
(declare-fun |_module.__default.EVEN#canCall| (Int) Bool)
(declare-fun Mul (Int Int) Int)
(declare-fun reveal__module._default.binom () Bool)
(declare-fun Tag (T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct alloc Tagclass._System.nat tytagFamily$nat)
)
(assert (forall ((|x#0| T@U) ($h T@U) ) (! ($IsAlloc intType |x#0| Tclass._System.nat $h)
 :pattern ( ($IsAlloc intType |x#0| Tclass._System.nat $h))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((|x#0@@0| T@U) ) (! (= ($Is intType |x#0@@0| Tclass._System.nat) (<= (LitInt 0) (U_2_int |x#0@@0|)))
 :pattern ( ($Is intType |x#0@@0| Tclass._System.nat))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($ly T@U) ($reveal Bool) (|a#0| Int) (|b#0| Int) ) (!  (=> (or (|_module.__default.binom#canCall| |a#0| |b#0|) (and (< 0 $FunctionContextHeight) (and (<= (LitInt 0) |a#0|) (<= (LitInt 0) |b#0|)))) (<= (LitInt 0) (_module.__default.binom $ly $reveal |a#0| |b#0|)))
 :pattern ( (_module.__default.binom $ly $reveal |a#0| |b#0|))
))))
(assert (forall ((x@@5 T@U) (T@@1 T@T) ) (! (= ($Unbox T@@1 ($Box T@@1 x@@5)) x@@5)
 :pattern ( ($Box T@@1 x@@5))
)))
(assert (forall (($ly@@0 T@U) ($reveal@@0 Bool) (|a#0@@0| Int) (|b#0@@0| Int) ) (! (= (_module.__default.binom ($LS $ly@@0) $reveal@@0 |a#0@@0| |b#0@@0|) (_module.__default.binom $ly@@0 $reveal@@0 |a#0@@0| |b#0@@0|))
 :pattern ( (_module.__default.binom ($LS $ly@@0) $reveal@@0 |a#0@@0| |b#0@@0|))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0 t1 t2 (MapType0Store t0 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 3)) (= (Ctor FieldType) 4)) (forall ((t0@@0 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 (MapType1Store t0@@0 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :weight 0
))) (= (Ctor BoxType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 6))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((x@@6 Int) (y Int) ) (! (= (Mod x@@6 y) (mod x@@6 y))
 :pattern ( (Mod x@@6 y))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|n#0| Int) ) (!  (=> (or (|_module.__default.EVEN#canCall| |n#0|) (and (< 0 $FunctionContextHeight) (<= (LitInt 0) |n#0|))) (= (_module.__default.EVEN true |n#0|) (= (Mod |n#0| (LitInt 2)) (LitInt 0))))
 :pattern ( (_module.__default.EVEN true |n#0|))
))))
(assert (forall ((x@@7 Int) (y@@0 Int) ) (! (= (Mul x@@7 y@@0) (* x@@7 y@@0))
 :pattern ( (Mul x@@7 y@@0))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($ly@@1 T@U) (|a#0@@1| Int) (|b#0@@1| Int) ) (!  (=> (or (|_module.__default.binom#canCall| (LitInt |a#0@@1|) (LitInt |b#0@@1|)) (and (< 0 $FunctionContextHeight) (and (<= (LitInt 0) |a#0@@1|) (<= (LitInt 0) |b#0@@1|)))) (and (=> (or (not (= (LitInt |b#0@@1|) (LitInt 0))) (not true)) (=> (or (not (= (LitInt |a#0@@1|) (LitInt 0))) (not true)) (and (|_module.__default.binom#canCall| (LitInt (- |a#0@@1| 1)) (LitInt |b#0@@1|)) (|_module.__default.binom#canCall| (LitInt (- |a#0@@1| 1)) (LitInt (- |b#0@@1| 1)))))) (= (_module.__default.binom ($LS $ly@@1) true (LitInt |a#0@@1|) (LitInt |b#0@@1|)) (ite (= (LitInt |b#0@@1|) (LitInt 0)) 1 (ite (= (LitInt |a#0@@1|) (LitInt 0)) 0 (+ (_module.__default.binom ($LS $ly@@1) reveal__module._default.binom (LitInt (- |a#0@@1| 1)) (LitInt |b#0@@1|)) (_module.__default.binom ($LS $ly@@1) reveal__module._default.binom (LitInt (- |a#0@@1| 1)) (LitInt (- |b#0@@1| 1)))))))))
 :weight 3
 :pattern ( (_module.__default.binom ($LS $ly@@1) true (LitInt |a#0@@1|) (LitInt |b#0@@1|)))
))))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($ly@@2 T@U) (|a#0@@2| Int) (|b#0@@2| Int) ) (!  (=> (or (|_module.__default.binom#canCall| |a#0@@2| |b#0@@2|) (and (< 0 $FunctionContextHeight) (and (<= (LitInt 0) |a#0@@2|) (<= (LitInt 0) |b#0@@2|)))) (and (=> (or (not (= |b#0@@2| (LitInt 0))) (not true)) (=> (or (not (= |a#0@@2| (LitInt 0))) (not true)) (and (|_module.__default.binom#canCall| (- |a#0@@2| 1) |b#0@@2|) (|_module.__default.binom#canCall| (- |a#0@@2| 1) (- |b#0@@2| 1))))) (= (_module.__default.binom ($LS $ly@@2) true |a#0@@2| |b#0@@2|) (ite (= |b#0@@2| (LitInt 0)) 1 (ite (= |a#0@@2| (LitInt 0)) 0 (+ (_module.__default.binom $ly@@2 reveal__module._default.binom (- |a#0@@2| 1) |b#0@@2|) (_module.__default.binom $ly@@2 reveal__module._default.binom (- |a#0@@2| 1) (- |b#0@@2| 1))))))))
 :pattern ( (_module.__default.binom ($LS $ly@@2) true |a#0@@2| |b#0@@2|))
))))
(assert (= (Tag Tclass._System.nat) Tagclass._System.nat))
(assert (= (TagFamily Tclass._System.nat) tytagFamily$nat))
(assert (forall ((x@@8 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@8))) (Lit BoxType ($Box intType (int_2_U x@@8))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@8))))
)))
(assert (forall ((x@@9 T@U) (T@@2 T@T) ) (! (= ($Box T@@2 (Lit T@@2 x@@9)) (Lit BoxType ($Box T@@2 x@@9)))
 :pattern ( ($Box T@@2 (Lit T@@2 x@@9)))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|n#0@@0| Int) ) (!  (=> (or (|_module.__default.EVEN#canCall| (LitInt |n#0@@0|)) (and (< 0 $FunctionContextHeight) (<= (LitInt 0) |n#0@@0|))) (= (_module.__default.EVEN true (LitInt |n#0@@0|)) (= (LitInt (Mod |n#0@@0| (LitInt 2))) (LitInt 0))))
 :weight 3
 :pattern ( (_module.__default.EVEN true (LitInt |n#0@@0|)))
))))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |r#0@0| () Int)
(declare-fun reveal__module._default.EVEN () Bool)
(declare-fun $Heap@5 () T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $Heap@4 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun $Heap () T@U)
(declare-fun $LZ () T@U)
(declare-fun |a#0@@3| () Int)
(declare-fun |b#0@@3| () Int)
(declare-fun |$rhs#0@0| () Int)
(declare-fun |$rhs#1_0@0| () Int)
(declare-fun |##n#1_0_0_0@0| () Int)
(declare-fun |##n#1_0_0_1@0| () Int)
(declare-fun |##n#1_0_1_0@0| () Int)
(declare-fun |##n#1_0_1_1@0| () Int)
(declare-fun $Heap@3 () T@U)
(declare-fun |##n#1_0_1_2@0| () Int)
(declare-fun |##a#1_0_1_3@0| () Int)
(declare-fun |##b#1_0_1_3@0| () Int)
(declare-fun |##n#1_0_1_3@0| () Int)
(declare-fun |##n#1_0_2_0@0| () Int)
(declare-fun |##a#1_0_2_1@0| () Int)
(declare-fun |##b#1_0_2_1@0| () Int)
(declare-fun |##n#1_0_2_1@0| () Int)
(declare-fun $Heap@2 () T@U)
(declare-fun |##a#1_0_2_2@0| () Int)
(declare-fun |##b#1_0_2_2@0| () Int)
(declare-fun |##n#1_0_2_2@0| () Int)
(declare-fun |##a#1_0_2_3@0| () Int)
(declare-fun |##b#1_0_2_3@0| () Int)
(declare-fun |##n#1_0_2_3@0| () Int)
(declare-fun |##a#1_0_3_0@0| () Int)
(declare-fun |##b#1_0_3_0@0| () Int)
(declare-fun |##n#1_0_3_0@0| () Int)
(declare-fun |##a#1_0_3_1@0| () Int)
(declare-fun |##b#1_0_3_1@0| () Int)
(declare-fun |##n#1_0_3_1@0| () Int)
(declare-fun |##a#1_0_3_2@0| () Int)
(declare-fun |##b#1_0_3_2@0| () Int)
(declare-fun |a##1_0_3_0@0| () Int)
(declare-fun |##a#1_0_3_3@0| () Int)
(declare-fun |##b#1_0_3_3@0| () Int)
(declare-fun |b##1_0_3_0@0| () Int)
(declare-fun $Heap@1 () T@U)
(declare-fun |##a#1_0_3_4@0| () Int)
(declare-fun |##b#1_0_3_4@0| () Int)
(declare-fun |##a#1_0_3_5@0| () Int)
(declare-fun |##b#1_0_3_5@0| () Int)
(declare-fun |##n#1_0_3_2@0| () Int)
(declare-fun |##a#1_0_4_0@0| () Int)
(declare-fun |##b#1_0_4_0@0| () Int)
(declare-fun |##a#1_0_4_1@0| () Int)
(declare-fun |##b#1_0_4_1@0| () Int)
(declare-fun |##n#1_0_4_0@0| () Int)
(declare-fun |$rhs#1@0| () Int)
(declare-fun |##a#1_0_4_2@0| () Int)
(declare-fun |##a#1_0_4_3@0| () Int)
(declare-fun |##b#1_0_4_3@0| () Int)
(declare-fun |##n#1_0_4_1@0| () Int)
(declare-fun |##a#1_0_5_0@0| () Int)
(declare-fun |##a#1_0_5_1@0| () Int)
(declare-fun |##b#1_0_5_1@0| () Int)
(declare-fun |##n#1_0_5_0@0| () Int)
(declare-fun $Heap@0 () T@U)
(declare-fun |$rhs#1_1@0| () Int)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun |r#0| () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 65) (let ((anon4_correct  (=> (=> (= |r#0@0| (LitInt 0)) (|_module.__default.EVEN#canCall| |r#0@0|)) (and (=> (= (ControlFlow 0 55) (- 0 56)) (= |r#0@0| (LitInt 0))) (=> (= (ControlFlow 0 55) (- 0 54)) (_module.__default.EVEN reveal__module._default.EVEN |r#0@0|))))))
(let ((anon19_Else_correct  (=> (and (or (not (= |r#0@0| (LitInt 0))) (not true)) (= (ControlFlow 0 58) 55)) anon4_correct)))
(let ((anon19_Then_correct  (=> (and (and (= |r#0@0| (LitInt 0)) ($IsAlloc intType (int_2_U |r#0@0|) Tclass._System.nat $Heap@5)) (and (|_module.__default.EVEN#canCall| |r#0@0|) (= (ControlFlow 0 57) 55))) anon4_correct)))
(let ((anon18_Then_correct  (=> (and (and (and ($IsGoodHeap $Heap@4) ($IsHeapAnchor $Heap@4)) (and (= $Heap $Heap@4) reveal__module._default.binom)) (and (and ($IsGoodHeap $Heap@5) ($IsHeapAnchor $Heap@5)) (and (= $Heap@4 $Heap@5) reveal__module._default.EVEN))) (and (=> (= (ControlFlow 0 59) 57) anon19_Then_correct) (=> (= (ControlFlow 0 59) 58) anon19_Else_correct)))))
(let ((GeneratedUnifiedExit_correct  (=> (= (ControlFlow 0 48) (- 0 47)) (_module.__default.EVEN reveal__module._default.EVEN (_module.__default.binom ($LS ($LS $LZ)) reveal__module._default.binom (Mul (LitInt 2) |a#0@@3|) (+ (Mul (LitInt 2) |b#0@@3|) 1))))))
(let ((anon7_correct  (=> (=> (= |r#0@0| (LitInt 0)) (|_module.__default.EVEN#canCall| |r#0@0|)) (=> (and (and (= |r#0@0| (LitInt 0)) (_module.__default.EVEN reveal__module._default.EVEN |r#0@0|)) (= (ControlFlow 0 51) 48)) GeneratedUnifiedExit_correct))))
(let ((anon20_Else_correct  (=> (and (or (not (= |r#0@0| (LitInt 0))) (not true)) (= (ControlFlow 0 53) 51)) anon7_correct)))
(let ((anon20_Then_correct  (=> (and (and (= |r#0@0| (LitInt 0)) ($IsAlloc intType (int_2_U |r#0@0|) Tclass._System.nat $Heap)) (and (|_module.__default.EVEN#canCall| |r#0@0|) (= (ControlFlow 0 52) 51))) anon7_correct)))
(let ((anon17_Then_correct  (=> (= |$rhs#0@0| (LitInt 0)) (and (and (=> (= (ControlFlow 0 60) 59) anon18_Then_correct) (=> (= (ControlFlow 0 60) 52) anon20_Then_correct)) (=> (= (ControlFlow 0 60) 53) anon20_Else_correct)))))
(let ((anon27_Else_correct  (=> (and (=> true (_module.__default.EVEN reveal__module._default.EVEN |r#0@0|)) (= (ControlFlow 0 49) 48)) GeneratedUnifiedExit_correct)))
(let ((anon27_Then_correct  (and (=> (= (ControlFlow 0 44) (- 0 46)) ($Is intType (int_2_U |$rhs#1_0@0|) Tclass._System.nat)) (=> ($Is intType (int_2_U |$rhs#1_0@0|) Tclass._System.nat) (=> (and ($IsAlloc intType (int_2_U |$rhs#1_0@0|) Tclass._System.nat $Heap) ($IsAlloc intType (int_2_U |b#0@@3|) Tclass._System.nat $Heap)) (=> (and (and (|_module.__default.binom#canCall| |$rhs#1_0@0| |b#0@@3|) (= |##n#1_0_0_0@0| (_module.__default.binom ($LS $LZ) reveal__module._default.binom |$rhs#1_0@0| |b#0@@3|))) (and ($IsAlloc intType (int_2_U |##n#1_0_0_0@0|) Tclass._System.nat $Heap) (|_module.__default.EVEN#canCall| (_module.__default.binom ($LS $LZ) reveal__module._default.binom |$rhs#1_0@0| |b#0@@3|)))) (and (=> (= (ControlFlow 0 44) (- 0 45)) ($Is intType (int_2_U |$rhs#1_0@0|) Tclass._System.nat)) (=> ($Is intType (int_2_U |$rhs#1_0@0|) Tclass._System.nat) (=> (and ($IsAlloc intType (int_2_U |$rhs#1_0@0|) Tclass._System.nat $Heap) ($IsAlloc intType (int_2_U |b#0@@3|) Tclass._System.nat $Heap)) (=> (and (and (|_module.__default.binom#canCall| |$rhs#1_0@0| |b#0@@3|) (= |##n#1_0_0_1@0| (_module.__default.binom ($LS $LZ) reveal__module._default.binom |$rhs#1_0@0| |b#0@@3|))) (and ($IsAlloc intType (int_2_U |##n#1_0_0_1@0|) Tclass._System.nat $Heap) (|_module.__default.EVEN#canCall| (_module.__default.binom ($LS $LZ) reveal__module._default.binom |$rhs#1_0@0| |b#0@@3|)))) (=> (and (and (and (and (|_module.__default.binom#canCall| |$rhs#1_0@0| |b#0@@3|) (|_module.__default.EVEN#canCall| (_module.__default.binom ($LS $LZ) reveal__module._default.binom |$rhs#1_0@0| |b#0@@3|))) (and (|_module.__default.binom#canCall| |$rhs#1_0@0| |b#0@@3|) (|_module.__default.EVEN#canCall| (_module.__default.binom ($LS $LZ) reveal__module._default.binom |$rhs#1_0@0| |b#0@@3|)))) (= (ControlFlow 0 44) (- 0 43))) (U_2_bool (Lit boolType (bool_2_U true)))) (= (_module.__default.EVEN reveal__module._default.EVEN (_module.__default.binom ($LS ($LS $LZ)) reveal__module._default.binom |$rhs#1_0@0| |b#0@@3|)) (_module.__default.EVEN reveal__module._default.EVEN (_module.__default.binom ($LS ($LS $LZ)) reveal__module._default.binom |$rhs#1_0@0| |b#0@@3|))))))))))))))
(let ((anon26_Then_correct  (=> (and ($Is intType (int_2_U |$rhs#1_0@0|) Tclass._System.nat) ($IsAlloc intType (int_2_U |$rhs#1_0@0|) Tclass._System.nat $Heap)) (=> (and (and ($IsAlloc intType (int_2_U |b#0@@3|) Tclass._System.nat $Heap) (|_module.__default.binom#canCall| |$rhs#1_0@0| |b#0@@3|)) (and (= |##n#1_0_1_0@0| (_module.__default.binom ($LS $LZ) reveal__module._default.binom |$rhs#1_0@0| |b#0@@3|)) ($IsAlloc intType (int_2_U |##n#1_0_1_0@0|) Tclass._System.nat $Heap))) (=> (and (and (and (and (|_module.__default.EVEN#canCall| (_module.__default.binom ($LS $LZ) reveal__module._default.binom |$rhs#1_0@0| |b#0@@3|)) ($Is intType (int_2_U |$rhs#1_0@0|) Tclass._System.nat)) (and ($IsAlloc intType (int_2_U |$rhs#1_0@0|) Tclass._System.nat $Heap) ($IsAlloc intType (int_2_U |b#0@@3|) Tclass._System.nat $Heap))) (and (and (|_module.__default.binom#canCall| |$rhs#1_0@0| |b#0@@3|) (= |##n#1_0_1_1@0| (_module.__default.binom ($LS $LZ) reveal__module._default.binom |$rhs#1_0@0| |b#0@@3|))) (and ($IsAlloc intType (int_2_U |##n#1_0_1_1@0|) Tclass._System.nat $Heap) (|_module.__default.EVEN#canCall| (_module.__default.binom ($LS $LZ) reveal__module._default.binom |$rhs#1_0@0| |b#0@@3|))))) (and (and (and (|_module.__default.binom#canCall| |$rhs#1_0@0| |b#0@@3|) (|_module.__default.EVEN#canCall| (_module.__default.binom ($LS $LZ) reveal__module._default.binom |$rhs#1_0@0| |b#0@@3|))) (and (|_module.__default.binom#canCall| |$rhs#1_0@0| |b#0@@3|) (|_module.__default.EVEN#canCall| (_module.__default.binom ($LS $LZ) reveal__module._default.binom |$rhs#1_0@0| |b#0@@3|)))) (= (_module.__default.EVEN reveal__module._default.EVEN (_module.__default.binom ($LS $LZ) reveal__module._default.binom |$rhs#1_0@0| |b#0@@3|)) (_module.__default.EVEN reveal__module._default.EVEN (_module.__default.binom ($LS $LZ) reveal__module._default.binom |$rhs#1_0@0| |b#0@@3|))))) (and (=> (= (ControlFlow 0 35) (- 0 42)) ($Is intType (int_2_U |$rhs#1_0@0|) Tclass._System.nat)) (=> ($Is intType (int_2_U |$rhs#1_0@0|) Tclass._System.nat) (and (=> (= (ControlFlow 0 35) (- 0 41)) (or (<= 0 |a#0@@3|) (= |$rhs#1_0@0| |a#0@@3|))) (=> (or (<= 0 |a#0@@3|) (= |$rhs#1_0@0| |a#0@@3|)) (and (=> (= (ControlFlow 0 35) (- 0 40)) (or (or (<= 0 |b#0@@3|) (< |$rhs#1_0@0| |a#0@@3|)) (= |b#0@@3| |b#0@@3|))) (=> (or (or (<= 0 |b#0@@3|) (< |$rhs#1_0@0| |a#0@@3|)) (= |b#0@@3| |b#0@@3|)) (and (=> (= (ControlFlow 0 35) (- 0 39)) (or (< |$rhs#1_0@0| |a#0@@3|) (and (= |$rhs#1_0@0| |a#0@@3|) (< |b#0@@3| |b#0@@3|)))) (=> (or (< |$rhs#1_0@0| |a#0@@3|) (and (= |$rhs#1_0@0| |a#0@@3|) (< |b#0@@3| |b#0@@3|))) (=> (and ($IsGoodHeap $Heap@3) ($IsHeapAnchor $Heap@3)) (=> (and (and (and (|_module.__default.binom#canCall| (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (Mul (LitInt 2) |b#0@@3|)) (|_module.__default.EVEN#canCall| (_module.__default.binom ($LS $LZ) reveal__module._default.binom (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (Mul (LitInt 2) |b#0@@3|)))) (and (|_module.__default.binom#canCall| |$rhs#1_0@0| |b#0@@3|) (|_module.__default.EVEN#canCall| (_module.__default.binom ($LS $LZ) reveal__module._default.binom |$rhs#1_0@0| |b#0@@3|)))) (and (= (_module.__default.EVEN reveal__module._default.EVEN (_module.__default.binom ($LS ($LS $LZ)) reveal__module._default.binom (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (Mul (LitInt 2) |b#0@@3|))) (_module.__default.EVEN reveal__module._default.EVEN (_module.__default.binom ($LS ($LS $LZ)) reveal__module._default.binom |$rhs#1_0@0| |b#0@@3|))) (= $Heap $Heap@3))) (and (=> (= (ControlFlow 0 35) (- 0 38)) ($Is intType (int_2_U |$rhs#1_0@0|) Tclass._System.nat)) (=> ($Is intType (int_2_U |$rhs#1_0@0|) Tclass._System.nat) (=> (and ($IsAlloc intType (int_2_U |$rhs#1_0@0|) Tclass._System.nat $Heap@3) ($IsAlloc intType (int_2_U |b#0@@3|) Tclass._System.nat $Heap@3)) (=> (and (and (|_module.__default.binom#canCall| |$rhs#1_0@0| |b#0@@3|) (= |##n#1_0_1_2@0| (_module.__default.binom ($LS $LZ) reveal__module._default.binom |$rhs#1_0@0| |b#0@@3|))) (and ($IsAlloc intType (int_2_U |##n#1_0_1_2@0|) Tclass._System.nat $Heap@3) (|_module.__default.EVEN#canCall| (_module.__default.binom ($LS $LZ) reveal__module._default.binom |$rhs#1_0@0| |b#0@@3|)))) (and (=> (= (ControlFlow 0 35) (- 0 37)) ($Is intType (int_2_U (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1)) Tclass._System.nat)) (=> ($Is intType (int_2_U (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1)) Tclass._System.nat) (=> (and (= |##a#1_0_1_3@0| (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1)) ($IsAlloc intType (int_2_U |##a#1_0_1_3@0|) Tclass._System.nat $Heap@3)) (and (=> (= (ControlFlow 0 35) (- 0 36)) ($Is intType (int_2_U (Mul (LitInt 2) |b#0@@3|)) Tclass._System.nat)) (=> ($Is intType (int_2_U (Mul (LitInt 2) |b#0@@3|)) Tclass._System.nat) (=> (and (= |##b#1_0_1_3@0| (Mul (LitInt 2) |b#0@@3|)) ($IsAlloc intType (int_2_U |##b#1_0_1_3@0|) Tclass._System.nat $Heap@3)) (=> (and (and (|_module.__default.binom#canCall| (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (Mul (LitInt 2) |b#0@@3|)) (= |##n#1_0_1_3@0| (_module.__default.binom ($LS $LZ) reveal__module._default.binom (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (Mul (LitInt 2) |b#0@@3|)))) (and ($IsAlloc intType (int_2_U |##n#1_0_1_3@0|) Tclass._System.nat $Heap@3) (|_module.__default.EVEN#canCall| (_module.__default.binom ($LS $LZ) reveal__module._default.binom (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (Mul (LitInt 2) |b#0@@3|))))) (=> (and (and (and (and (|_module.__default.binom#canCall| |$rhs#1_0@0| |b#0@@3|) (|_module.__default.EVEN#canCall| (_module.__default.binom ($LS $LZ) reveal__module._default.binom |$rhs#1_0@0| |b#0@@3|))) (and (|_module.__default.binom#canCall| (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (Mul (LitInt 2) |b#0@@3|)) (|_module.__default.EVEN#canCall| (_module.__default.binom ($LS $LZ) reveal__module._default.binom (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (Mul (LitInt 2) |b#0@@3|))))) (= (ControlFlow 0 35) (- 0 34))) (= (_module.__default.EVEN reveal__module._default.EVEN (_module.__default.binom ($LS $LZ) reveal__module._default.binom |$rhs#1_0@0| |b#0@@3|)) (_module.__default.EVEN reveal__module._default.EVEN (_module.__default.binom ($LS $LZ) reveal__module._default.binom |$rhs#1_0@0| |b#0@@3|)))) (= (_module.__default.EVEN reveal__module._default.EVEN (_module.__default.binom ($LS ($LS $LZ)) reveal__module._default.binom |$rhs#1_0@0| |b#0@@3|)) (_module.__default.EVEN reveal__module._default.EVEN (_module.__default.binom ($LS ($LS $LZ)) reveal__module._default.binom (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (Mul (LitInt 2) |b#0@@3|)))))))))))))))))))))))))))))))
(let ((anon25_Then_correct  (=> ($Is intType (int_2_U |$rhs#1_0@0|) Tclass._System.nat) (=> (and (and (and ($IsAlloc intType (int_2_U |$rhs#1_0@0|) Tclass._System.nat $Heap) ($IsAlloc intType (int_2_U |b#0@@3|) Tclass._System.nat $Heap)) (and (|_module.__default.binom#canCall| |$rhs#1_0@0| |b#0@@3|) (= |##n#1_0_2_0@0| (_module.__default.binom ($LS $LZ) reveal__module._default.binom |$rhs#1_0@0| |b#0@@3|)))) (and (and ($IsAlloc intType (int_2_U |##n#1_0_2_0@0|) Tclass._System.nat $Heap) (|_module.__default.EVEN#canCall| (_module.__default.binom ($LS $LZ) reveal__module._default.binom |$rhs#1_0@0| |b#0@@3|))) (and ($Is intType (int_2_U (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1)) Tclass._System.nat) (= |##a#1_0_2_1@0| (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1))))) (=> (and (and (and (and ($IsAlloc intType (int_2_U |##a#1_0_2_1@0|) Tclass._System.nat $Heap) ($Is intType (int_2_U (Mul (LitInt 2) |b#0@@3|)) Tclass._System.nat)) (and (= |##b#1_0_2_1@0| (Mul (LitInt 2) |b#0@@3|)) ($IsAlloc intType (int_2_U |##b#1_0_2_1@0|) Tclass._System.nat $Heap))) (and (and (|_module.__default.binom#canCall| (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (Mul (LitInt 2) |b#0@@3|)) (= |##n#1_0_2_1@0| (_module.__default.binom ($LS $LZ) reveal__module._default.binom (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (Mul (LitInt 2) |b#0@@3|)))) (and ($IsAlloc intType (int_2_U |##n#1_0_2_1@0|) Tclass._System.nat $Heap) (|_module.__default.EVEN#canCall| (_module.__default.binom ($LS $LZ) reveal__module._default.binom (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (Mul (LitInt 2) |b#0@@3|)))))) (and (and (and (|_module.__default.binom#canCall| |$rhs#1_0@0| |b#0@@3|) (|_module.__default.EVEN#canCall| (_module.__default.binom ($LS $LZ) reveal__module._default.binom |$rhs#1_0@0| |b#0@@3|))) (and (|_module.__default.binom#canCall| (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (Mul (LitInt 2) |b#0@@3|)) (|_module.__default.EVEN#canCall| (_module.__default.binom ($LS $LZ) reveal__module._default.binom (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (Mul (LitInt 2) |b#0@@3|))))) (= (_module.__default.EVEN reveal__module._default.EVEN (_module.__default.binom ($LS $LZ) reveal__module._default.binom |$rhs#1_0@0| |b#0@@3|)) (_module.__default.EVEN reveal__module._default.EVEN (_module.__default.binom ($LS $LZ) reveal__module._default.binom (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (Mul (LitInt 2) |b#0@@3|)))))) (and (=> (= (ControlFlow 0 25) (- 0 33)) ($Is intType (int_2_U |$rhs#1_0@0|) Tclass._System.nat)) (=> ($Is intType (int_2_U |$rhs#1_0@0|) Tclass._System.nat) (and (=> (= (ControlFlow 0 25) (- 0 32)) (or (<= 0 |a#0@@3|) (= |$rhs#1_0@0| |a#0@@3|))) (=> (or (<= 0 |a#0@@3|) (= |$rhs#1_0@0| |a#0@@3|)) (and (=> (= (ControlFlow 0 25) (- 0 31)) (or (or (<= 0 |b#0@@3|) (< |$rhs#1_0@0| |a#0@@3|)) (= |b#0@@3| |b#0@@3|))) (=> (or (or (<= 0 |b#0@@3|) (< |$rhs#1_0@0| |a#0@@3|)) (= |b#0@@3| |b#0@@3|)) (and (=> (= (ControlFlow 0 25) (- 0 30)) (or (< |$rhs#1_0@0| |a#0@@3|) (and (= |$rhs#1_0@0| |a#0@@3|) (< |b#0@@3| |b#0@@3|)))) (=> (or (< |$rhs#1_0@0| |a#0@@3|) (and (= |$rhs#1_0@0| |a#0@@3|) (< |b#0@@3| |b#0@@3|))) (=> (and ($IsGoodHeap $Heap@2) ($IsHeapAnchor $Heap@2)) (=> (and (and (and (|_module.__default.binom#canCall| (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (+ (Mul (LitInt 2) |b#0@@3|) 1)) (|_module.__default.EVEN#canCall| (_module.__default.binom ($LS $LZ) reveal__module._default.binom (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (+ (Mul (LitInt 2) |b#0@@3|) 1)))) (and (|_module.__default.binom#canCall| |$rhs#1_0@0| |b#0@@3|) (|_module.__default.EVEN#canCall| (_module.__default.binom ($LS $LZ) reveal__module._default.binom |$rhs#1_0@0| |b#0@@3|)))) (and (= (_module.__default.EVEN reveal__module._default.EVEN (_module.__default.binom ($LS ($LS $LZ)) reveal__module._default.binom (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (+ (Mul (LitInt 2) |b#0@@3|) 1))) (_module.__default.EVEN reveal__module._default.EVEN (_module.__default.binom ($LS ($LS $LZ)) reveal__module._default.binom |$rhs#1_0@0| |b#0@@3|))) (= $Heap $Heap@2))) (and (=> (= (ControlFlow 0 25) (- 0 29)) ($Is intType (int_2_U (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1)) Tclass._System.nat)) (=> ($Is intType (int_2_U (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1)) Tclass._System.nat) (=> (and (= |##a#1_0_2_2@0| (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1)) ($IsAlloc intType (int_2_U |##a#1_0_2_2@0|) Tclass._System.nat $Heap@2)) (and (=> (= (ControlFlow 0 25) (- 0 28)) ($Is intType (int_2_U (+ (Mul (LitInt 2) |b#0@@3|) 1)) Tclass._System.nat)) (=> ($Is intType (int_2_U (+ (Mul (LitInt 2) |b#0@@3|) 1)) Tclass._System.nat) (=> (and (= |##b#1_0_2_2@0| (+ (Mul (LitInt 2) |b#0@@3|) 1)) ($IsAlloc intType (int_2_U |##b#1_0_2_2@0|) Tclass._System.nat $Heap@2)) (=> (and (and (|_module.__default.binom#canCall| (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (+ (Mul (LitInt 2) |b#0@@3|) 1)) (= |##n#1_0_2_2@0| (_module.__default.binom ($LS $LZ) reveal__module._default.binom (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (+ (Mul (LitInt 2) |b#0@@3|) 1)))) (and ($IsAlloc intType (int_2_U |##n#1_0_2_2@0|) Tclass._System.nat $Heap@2) (|_module.__default.EVEN#canCall| (_module.__default.binom ($LS $LZ) reveal__module._default.binom (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (+ (Mul (LitInt 2) |b#0@@3|) 1))))) (and (=> (= (ControlFlow 0 25) (- 0 27)) ($Is intType (int_2_U (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1)) Tclass._System.nat)) (=> ($Is intType (int_2_U (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1)) Tclass._System.nat) (=> (and (= |##a#1_0_2_3@0| (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1)) ($IsAlloc intType (int_2_U |##a#1_0_2_3@0|) Tclass._System.nat $Heap@2)) (and (=> (= (ControlFlow 0 25) (- 0 26)) ($Is intType (int_2_U (Mul (LitInt 2) |b#0@@3|)) Tclass._System.nat)) (=> ($Is intType (int_2_U (Mul (LitInt 2) |b#0@@3|)) Tclass._System.nat) (=> (and (= |##b#1_0_2_3@0| (Mul (LitInt 2) |b#0@@3|)) ($IsAlloc intType (int_2_U |##b#1_0_2_3@0|) Tclass._System.nat $Heap@2)) (=> (and (and (|_module.__default.binom#canCall| (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (Mul (LitInt 2) |b#0@@3|)) (= |##n#1_0_2_3@0| (_module.__default.binom ($LS $LZ) reveal__module._default.binom (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (Mul (LitInt 2) |b#0@@3|)))) (and ($IsAlloc intType (int_2_U |##n#1_0_2_3@0|) Tclass._System.nat $Heap@2) (|_module.__default.EVEN#canCall| (_module.__default.binom ($LS $LZ) reveal__module._default.binom (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (Mul (LitInt 2) |b#0@@3|))))) (=> (and (and (and (and (|_module.__default.binom#canCall| (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (+ (Mul (LitInt 2) |b#0@@3|) 1)) (|_module.__default.EVEN#canCall| (_module.__default.binom ($LS $LZ) reveal__module._default.binom (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (+ (Mul (LitInt 2) |b#0@@3|) 1)))) (and (|_module.__default.binom#canCall| (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (Mul (LitInt 2) |b#0@@3|)) (|_module.__default.EVEN#canCall| (_module.__default.binom ($LS $LZ) reveal__module._default.binom (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (Mul (LitInt 2) |b#0@@3|))))) (= (ControlFlow 0 25) (- 0 24))) (= (_module.__default.EVEN reveal__module._default.EVEN (_module.__default.binom ($LS $LZ) reveal__module._default.binom |$rhs#1_0@0| |b#0@@3|)) (_module.__default.EVEN reveal__module._default.EVEN (_module.__default.binom ($LS $LZ) reveal__module._default.binom (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (Mul (LitInt 2) |b#0@@3|))))) (= (_module.__default.EVEN reveal__module._default.EVEN (_module.__default.binom ($LS ($LS $LZ)) reveal__module._default.binom (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (+ (Mul (LitInt 2) |b#0@@3|) 1))) (_module.__default.EVEN reveal__module._default.EVEN (_module.__default.binom ($LS ($LS $LZ)) reveal__module._default.binom (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (Mul (LitInt 2) |b#0@@3|))))))))))))))))))))))))))))))))))
(let ((anon24_Then_correct  (=> (and (and ($Is intType (int_2_U (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1)) Tclass._System.nat) (= |##a#1_0_3_0@0| (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1))) (and ($IsAlloc intType (int_2_U |##a#1_0_3_0@0|) Tclass._System.nat $Heap) ($Is intType (int_2_U (+ (Mul (LitInt 2) |b#0@@3|) 1)) Tclass._System.nat))) (=> (and (and (and (= |##b#1_0_3_0@0| (+ (Mul (LitInt 2) |b#0@@3|) 1)) ($IsAlloc intType (int_2_U |##b#1_0_3_0@0|) Tclass._System.nat $Heap)) (and (|_module.__default.binom#canCall| (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (+ (Mul (LitInt 2) |b#0@@3|) 1)) (= |##n#1_0_3_0@0| (_module.__default.binom ($LS $LZ) reveal__module._default.binom (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (+ (Mul (LitInt 2) |b#0@@3|) 1))))) (and (and ($IsAlloc intType (int_2_U |##n#1_0_3_0@0|) Tclass._System.nat $Heap) (|_module.__default.EVEN#canCall| (_module.__default.binom ($LS $LZ) reveal__module._default.binom (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (+ (Mul (LitInt 2) |b#0@@3|) 1)))) (and ($Is intType (int_2_U (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1)) Tclass._System.nat) (= |##a#1_0_3_1@0| (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1))))) (=> (and (and (and (and ($IsAlloc intType (int_2_U |##a#1_0_3_1@0|) Tclass._System.nat $Heap) ($Is intType (int_2_U (Mul (LitInt 2) |b#0@@3|)) Tclass._System.nat)) (and (= |##b#1_0_3_1@0| (Mul (LitInt 2) |b#0@@3|)) ($IsAlloc intType (int_2_U |##b#1_0_3_1@0|) Tclass._System.nat $Heap))) (and (and (|_module.__default.binom#canCall| (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (Mul (LitInt 2) |b#0@@3|)) (= |##n#1_0_3_1@0| (_module.__default.binom ($LS $LZ) reveal__module._default.binom (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (Mul (LitInt 2) |b#0@@3|)))) (and ($IsAlloc intType (int_2_U |##n#1_0_3_1@0|) Tclass._System.nat $Heap) (|_module.__default.EVEN#canCall| (_module.__default.binom ($LS $LZ) reveal__module._default.binom (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (Mul (LitInt 2) |b#0@@3|)))))) (and (and (and (|_module.__default.binom#canCall| (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (+ (Mul (LitInt 2) |b#0@@3|) 1)) (|_module.__default.EVEN#canCall| (_module.__default.binom ($LS $LZ) reveal__module._default.binom (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (+ (Mul (LitInt 2) |b#0@@3|) 1)))) (and (|_module.__default.binom#canCall| (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (Mul (LitInt 2) |b#0@@3|)) (|_module.__default.EVEN#canCall| (_module.__default.binom ($LS $LZ) reveal__module._default.binom (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (Mul (LitInt 2) |b#0@@3|))))) (= (_module.__default.EVEN reveal__module._default.EVEN (_module.__default.binom ($LS $LZ) reveal__module._default.binom (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (+ (Mul (LitInt 2) |b#0@@3|) 1))) (_module.__default.EVEN reveal__module._default.EVEN (_module.__default.binom ($LS $LZ) reveal__module._default.binom (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (Mul (LitInt 2) |b#0@@3|)))))) (and (=> (= (ControlFlow 0 14) (- 0 23)) ($Is intType (int_2_U (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1)) Tclass._System.nat)) (=> ($Is intType (int_2_U (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1)) Tclass._System.nat) (=> (and (= |##a#1_0_3_2@0| (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1)) ($IsAlloc intType (int_2_U |##a#1_0_3_2@0|) Tclass._System.nat $Heap)) (and (=> (= (ControlFlow 0 14) (- 0 22)) ($Is intType (int_2_U (+ (Mul (LitInt 2) |b#0@@3|) 1)) Tclass._System.nat)) (=> ($Is intType (int_2_U (+ (Mul (LitInt 2) |b#0@@3|) 1)) Tclass._System.nat) (=> (= |##b#1_0_3_2@0| (+ (Mul (LitInt 2) |b#0@@3|) 1)) (=> (and (and ($IsAlloc intType (int_2_U |##b#1_0_3_2@0|) Tclass._System.nat $Heap) (|_module.__default.binom#canCall| (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (+ (Mul (LitInt 2) |b#0@@3|) 1))) (and (|_module.__default.binom#canCall| (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (+ (Mul (LitInt 2) |b#0@@3|) 1)) (= |a##1_0_3_0@0| (_module.__default.binom ($LS $LZ) reveal__module._default.binom (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (+ (Mul (LitInt 2) |b#0@@3|) 1))))) (and (=> (= (ControlFlow 0 14) (- 0 21)) ($Is intType (int_2_U (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1)) Tclass._System.nat)) (=> ($Is intType (int_2_U (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1)) Tclass._System.nat) (=> (and (= |##a#1_0_3_3@0| (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1)) ($IsAlloc intType (int_2_U |##a#1_0_3_3@0|) Tclass._System.nat $Heap)) (and (=> (= (ControlFlow 0 14) (- 0 20)) ($Is intType (int_2_U (Mul (LitInt 2) |b#0@@3|)) Tclass._System.nat)) (=> ($Is intType (int_2_U (Mul (LitInt 2) |b#0@@3|)) Tclass._System.nat) (=> (= |##b#1_0_3_3@0| (Mul (LitInt 2) |b#0@@3|)) (=> (and ($IsAlloc intType (int_2_U |##b#1_0_3_3@0|) Tclass._System.nat $Heap) (|_module.__default.binom#canCall| (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (Mul (LitInt 2) |b#0@@3|))) (=> (and (and (and (|_module.__default.binom#canCall| (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (Mul (LitInt 2) |b#0@@3|)) (= |b##1_0_3_0@0| (_module.__default.binom ($LS $LZ) reveal__module._default.binom (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (Mul (LitInt 2) |b#0@@3|)))) (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1))) (and (and (|_module.__default.EVEN#canCall| (+ |a##1_0_3_0@0| |b##1_0_3_0@0|)) (and (|_module.__default.EVEN#canCall| |a##1_0_3_0@0|) (|_module.__default.EVEN#canCall| |b##1_0_3_0@0|))) (and (= (_module.__default.EVEN reveal__module._default.EVEN (+ |a##1_0_3_0@0| |b##1_0_3_0@0|)) (= (_module.__default.EVEN reveal__module._default.EVEN |a##1_0_3_0@0|) (_module.__default.EVEN reveal__module._default.EVEN |b##1_0_3_0@0|))) (= $Heap $Heap@1)))) (and (=> (= (ControlFlow 0 14) (- 0 19)) ($Is intType (int_2_U (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1)) Tclass._System.nat)) (=> ($Is intType (int_2_U (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1)) Tclass._System.nat) (=> (and (= |##a#1_0_3_4@0| (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1)) ($IsAlloc intType (int_2_U |##a#1_0_3_4@0|) Tclass._System.nat $Heap@1)) (and (=> (= (ControlFlow 0 14) (- 0 18)) ($Is intType (int_2_U (+ (Mul (LitInt 2) |b#0@@3|) 1)) Tclass._System.nat)) (=> ($Is intType (int_2_U (+ (Mul (LitInt 2) |b#0@@3|) 1)) Tclass._System.nat) (=> (= |##b#1_0_3_4@0| (+ (Mul (LitInt 2) |b#0@@3|) 1)) (=> (and ($IsAlloc intType (int_2_U |##b#1_0_3_4@0|) Tclass._System.nat $Heap@1) (|_module.__default.binom#canCall| (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (+ (Mul (LitInt 2) |b#0@@3|) 1))) (and (=> (= (ControlFlow 0 14) (- 0 17)) ($Is intType (int_2_U (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1)) Tclass._System.nat)) (=> ($Is intType (int_2_U (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1)) Tclass._System.nat) (=> (and (= |##a#1_0_3_5@0| (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1)) ($IsAlloc intType (int_2_U |##a#1_0_3_5@0|) Tclass._System.nat $Heap@1)) (and (=> (= (ControlFlow 0 14) (- 0 16)) ($Is intType (int_2_U (Mul (LitInt 2) |b#0@@3|)) Tclass._System.nat)) (=> ($Is intType (int_2_U (Mul (LitInt 2) |b#0@@3|)) Tclass._System.nat) (=> (= |##b#1_0_3_5@0| (Mul (LitInt 2) |b#0@@3|)) (=> (and ($IsAlloc intType (int_2_U |##b#1_0_3_5@0|) Tclass._System.nat $Heap@1) (|_module.__default.binom#canCall| (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (Mul (LitInt 2) |b#0@@3|))) (and (=> (= (ControlFlow 0 14) (- 0 15)) ($Is intType (int_2_U (+ (_module.__default.binom ($LS $LZ) reveal__module._default.binom (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (+ (Mul (LitInt 2) |b#0@@3|) 1)) (_module.__default.binom ($LS $LZ) reveal__module._default.binom (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (Mul (LitInt 2) |b#0@@3|)))) Tclass._System.nat)) (=> ($Is intType (int_2_U (+ (_module.__default.binom ($LS $LZ) reveal__module._default.binom (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (+ (Mul (LitInt 2) |b#0@@3|) 1)) (_module.__default.binom ($LS $LZ) reveal__module._default.binom (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (Mul (LitInt 2) |b#0@@3|)))) Tclass._System.nat) (=> (= |##n#1_0_3_2@0| (+ (_module.__default.binom ($LS $LZ) reveal__module._default.binom (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (+ (Mul (LitInt 2) |b#0@@3|) 1)) (_module.__default.binom ($LS $LZ) reveal__module._default.binom (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (Mul (LitInt 2) |b#0@@3|)))) (=> (and ($IsAlloc intType (int_2_U |##n#1_0_3_2@0|) Tclass._System.nat $Heap@1) (|_module.__default.EVEN#canCall| (+ (_module.__default.binom ($LS $LZ) reveal__module._default.binom (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (+ (Mul (LitInt 2) |b#0@@3|) 1)) (_module.__default.binom ($LS $LZ) reveal__module._default.binom (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (Mul (LitInt 2) |b#0@@3|))))) (=> (and (and (and (and (|_module.__default.binom#canCall| (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (+ (Mul (LitInt 2) |b#0@@3|) 1)) (|_module.__default.binom#canCall| (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (Mul (LitInt 2) |b#0@@3|))) (|_module.__default.EVEN#canCall| (+ (_module.__default.binom ($LS $LZ) reveal__module._default.binom (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (+ (Mul (LitInt 2) |b#0@@3|) 1)) (_module.__default.binom ($LS $LZ) reveal__module._default.binom (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (Mul (LitInt 2) |b#0@@3|))))) (= (ControlFlow 0 14) (- 0 13))) (= (_module.__default.EVEN reveal__module._default.EVEN (_module.__default.binom ($LS $LZ) reveal__module._default.binom (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (+ (Mul (LitInt 2) |b#0@@3|) 1))) (_module.__default.EVEN reveal__module._default.EVEN (_module.__default.binom ($LS $LZ) reveal__module._default.binom (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (Mul (LitInt 2) |b#0@@3|))))) (_module.__default.EVEN reveal__module._default.EVEN (+ (_module.__default.binom ($LS ($LS $LZ)) reveal__module._default.binom (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (+ (Mul (LitInt 2) |b#0@@3|) 1)) (_module.__default.binom ($LS ($LS $LZ)) reveal__module._default.binom (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (Mul (LitInt 2) |b#0@@3|)))))))))))))))))))))))))))))))))))))))))))
(let ((anon23_Then_correct  (=> (and ($Is intType (int_2_U (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1)) Tclass._System.nat) (= |##a#1_0_4_0@0| (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1))) (=> (and (and (and ($IsAlloc intType (int_2_U |##a#1_0_4_0@0|) Tclass._System.nat $Heap) ($Is intType (int_2_U (+ (Mul (LitInt 2) |b#0@@3|) 1)) Tclass._System.nat)) (and (= |##b#1_0_4_0@0| (+ (Mul (LitInt 2) |b#0@@3|) 1)) ($IsAlloc intType (int_2_U |##b#1_0_4_0@0|) Tclass._System.nat $Heap))) (and (and (|_module.__default.binom#canCall| (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (+ (Mul (LitInt 2) |b#0@@3|) 1)) ($Is intType (int_2_U (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1)) Tclass._System.nat)) (and (= |##a#1_0_4_1@0| (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1)) ($IsAlloc intType (int_2_U |##a#1_0_4_1@0|) Tclass._System.nat $Heap)))) (=> (and (and (and (and ($Is intType (int_2_U (Mul (LitInt 2) |b#0@@3|)) Tclass._System.nat) (= |##b#1_0_4_1@0| (Mul (LitInt 2) |b#0@@3|))) (and ($IsAlloc intType (int_2_U |##b#1_0_4_1@0|) Tclass._System.nat $Heap) (|_module.__default.binom#canCall| (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (Mul (LitInt 2) |b#0@@3|)))) (and (and ($Is intType (int_2_U (+ (_module.__default.binom ($LS $LZ) reveal__module._default.binom (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (+ (Mul (LitInt 2) |b#0@@3|) 1)) (_module.__default.binom ($LS $LZ) reveal__module._default.binom (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (Mul (LitInt 2) |b#0@@3|)))) Tclass._System.nat) (= |##n#1_0_4_0@0| (+ (_module.__default.binom ($LS $LZ) reveal__module._default.binom (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (+ (Mul (LitInt 2) |b#0@@3|) 1)) (_module.__default.binom ($LS $LZ) reveal__module._default.binom (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (Mul (LitInt 2) |b#0@@3|))))) (and ($IsAlloc intType (int_2_U |##n#1_0_4_0@0|) Tclass._System.nat $Heap) (|_module.__default.EVEN#canCall| (+ (_module.__default.binom ($LS $LZ) reveal__module._default.binom (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (+ (Mul (LitInt 2) |b#0@@3|) 1)) (_module.__default.binom ($LS $LZ) reveal__module._default.binom (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (Mul (LitInt 2) |b#0@@3|))))))) (and (and (and (|_module.__default.binom#canCall| (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (+ (Mul (LitInt 2) |b#0@@3|) 1)) (|_module.__default.binom#canCall| (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (Mul (LitInt 2) |b#0@@3|))) (|_module.__default.EVEN#canCall| (+ (_module.__default.binom ($LS $LZ) reveal__module._default.binom (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (+ (Mul (LitInt 2) |b#0@@3|) 1)) (_module.__default.binom ($LS $LZ) reveal__module._default.binom (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (Mul (LitInt 2) |b#0@@3|))))) (_module.__default.EVEN reveal__module._default.EVEN (+ (_module.__default.binom ($LS $LZ) reveal__module._default.binom (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (+ (Mul (LitInt 2) |b#0@@3|) 1)) (_module.__default.binom ($LS $LZ) reveal__module._default.binom (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (Mul (LitInt 2) |b#0@@3|)))))) (and (=> (= (ControlFlow 0 5) (- 0 12)) (= (- |$rhs#0@0| 1) (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1))) (=> (= (- |$rhs#0@0| 1) (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1)) (and (=> (= (ControlFlow 0 5) (- 0 11)) (= |$rhs#1@0| (+ (Mul (LitInt 2) |b#0@@3|) 1))) (=> (= |$rhs#1@0| (+ (Mul (LitInt 2) |b#0@@3|) 1)) (and (=> (= (ControlFlow 0 5) (- 0 10)) ($Is intType (int_2_U (- |$rhs#0@0| 1)) Tclass._System.nat)) (=> ($Is intType (int_2_U (- |$rhs#0@0| 1)) Tclass._System.nat) (=> (and (= |##a#1_0_4_2@0| (- |$rhs#0@0| 1)) ($IsAlloc intType (int_2_U |##a#1_0_4_2@0|) Tclass._System.nat $Heap)) (and (=> (= (ControlFlow 0 5) (- 0 9)) ($Is intType (int_2_U |$rhs#1@0|) Tclass._System.nat)) (=> ($Is intType (int_2_U |$rhs#1@0|) Tclass._System.nat) (=> (and ($IsAlloc intType (int_2_U |$rhs#1@0|) Tclass._System.nat $Heap) (|_module.__default.binom#canCall| (- |$rhs#0@0| 1) |$rhs#1@0|)) (and (=> (= (ControlFlow 0 5) (- 0 8)) ($Is intType (int_2_U (- |$rhs#0@0| 1)) Tclass._System.nat)) (=> ($Is intType (int_2_U (- |$rhs#0@0| 1)) Tclass._System.nat) (=> (and (= |##a#1_0_4_3@0| (- |$rhs#0@0| 1)) ($IsAlloc intType (int_2_U |##a#1_0_4_3@0|) Tclass._System.nat $Heap)) (and (=> (= (ControlFlow 0 5) (- 0 7)) ($Is intType (int_2_U (- |$rhs#1@0| 1)) Tclass._System.nat)) (=> ($Is intType (int_2_U (- |$rhs#1@0| 1)) Tclass._System.nat) (=> (= |##b#1_0_4_3@0| (- |$rhs#1@0| 1)) (=> (and ($IsAlloc intType (int_2_U |##b#1_0_4_3@0|) Tclass._System.nat $Heap) (|_module.__default.binom#canCall| (- |$rhs#0@0| 1) (- |$rhs#1@0| 1))) (and (=> (= (ControlFlow 0 5) (- 0 6)) ($Is intType (int_2_U (+ (_module.__default.binom ($LS $LZ) reveal__module._default.binom (- |$rhs#0@0| 1) |$rhs#1@0|) (_module.__default.binom ($LS $LZ) reveal__module._default.binom (- |$rhs#0@0| 1) (- |$rhs#1@0| 1)))) Tclass._System.nat)) (=> ($Is intType (int_2_U (+ (_module.__default.binom ($LS $LZ) reveal__module._default.binom (- |$rhs#0@0| 1) |$rhs#1@0|) (_module.__default.binom ($LS $LZ) reveal__module._default.binom (- |$rhs#0@0| 1) (- |$rhs#1@0| 1)))) Tclass._System.nat) (=> (= |##n#1_0_4_1@0| (+ (_module.__default.binom ($LS $LZ) reveal__module._default.binom (- |$rhs#0@0| 1) |$rhs#1@0|) (_module.__default.binom ($LS $LZ) reveal__module._default.binom (- |$rhs#0@0| 1) (- |$rhs#1@0| 1)))) (=> (and ($IsAlloc intType (int_2_U |##n#1_0_4_1@0|) Tclass._System.nat $Heap) (|_module.__default.EVEN#canCall| (+ (_module.__default.binom ($LS $LZ) reveal__module._default.binom (- |$rhs#0@0| 1) |$rhs#1@0|) (_module.__default.binom ($LS $LZ) reveal__module._default.binom (- |$rhs#0@0| 1) (- |$rhs#1@0| 1))))) (=> (and (and (and (and (|_module.__default.binom#canCall| (- |$rhs#0@0| 1) |$rhs#1@0|) (|_module.__default.binom#canCall| (- |$rhs#0@0| 1) (- |$rhs#1@0| 1))) (|_module.__default.EVEN#canCall| (+ (_module.__default.binom ($LS $LZ) reveal__module._default.binom (- |$rhs#0@0| 1) |$rhs#1@0|) (_module.__default.binom ($LS $LZ) reveal__module._default.binom (- |$rhs#0@0| 1) (- |$rhs#1@0| 1))))) (= (ControlFlow 0 5) (- 0 4))) (_module.__default.EVEN reveal__module._default.EVEN (+ (_module.__default.binom ($LS $LZ) reveal__module._default.binom (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (+ (Mul (LitInt 2) |b#0@@3|) 1)) (_module.__default.binom ($LS $LZ) reveal__module._default.binom (+ (Mul (LitInt 2) |$rhs#1_0@0|) 1) (Mul (LitInt 2) |b#0@@3|))))) (_module.__default.EVEN reveal__module._default.EVEN (+ (_module.__default.binom ($LS ($LS $LZ)) reveal__module._default.binom (- |$rhs#0@0| 1) |$rhs#1@0|) (_module.__default.binom ($LS ($LS $LZ)) reveal__module._default.binom (- |$rhs#0@0| 1) (- |$rhs#1@0| 1)))))))))))))))))))))))))))))))
(let ((anon22_Then_correct  (=> ($Is intType (int_2_U (- |$rhs#0@0| 1)) Tclass._System.nat) (=> (and (and (and (and (= |##a#1_0_5_0@0| (- |$rhs#0@0| 1)) ($IsAlloc intType (int_2_U |##a#1_0_5_0@0|) Tclass._System.nat $Heap)) (and ($Is intType (int_2_U |$rhs#1@0|) Tclass._System.nat) ($IsAlloc intType (int_2_U |$rhs#1@0|) Tclass._System.nat $Heap))) (and (and (|_module.__default.binom#canCall| (- |$rhs#0@0| 1) |$rhs#1@0|) ($Is intType (int_2_U (- |$rhs#0@0| 1)) Tclass._System.nat)) (and (= |##a#1_0_5_1@0| (- |$rhs#0@0| 1)) ($IsAlloc intType (int_2_U |##a#1_0_5_1@0|) Tclass._System.nat $Heap)))) (and (and (and ($Is intType (int_2_U (- |$rhs#1@0| 1)) Tclass._System.nat) (= |##b#1_0_5_1@0| (- |$rhs#1@0| 1))) (and ($IsAlloc intType (int_2_U |##b#1_0_5_1@0|) Tclass._System.nat $Heap) (|_module.__default.binom#canCall| (- |$rhs#0@0| 1) (- |$rhs#1@0| 1)))) (and (and ($Is intType (int_2_U (+ (_module.__default.binom ($LS $LZ) reveal__module._default.binom (- |$rhs#0@0| 1) |$rhs#1@0|) (_module.__default.binom ($LS $LZ) reveal__module._default.binom (- |$rhs#0@0| 1) (- |$rhs#1@0| 1)))) Tclass._System.nat) (= |##n#1_0_5_0@0| (+ (_module.__default.binom ($LS $LZ) reveal__module._default.binom (- |$rhs#0@0| 1) |$rhs#1@0|) (_module.__default.binom ($LS $LZ) reveal__module._default.binom (- |$rhs#0@0| 1) (- |$rhs#1@0| 1))))) (and ($IsAlloc intType (int_2_U |##n#1_0_5_0@0|) Tclass._System.nat $Heap) (|_module.__default.EVEN#canCall| (+ (_module.__default.binom ($LS $LZ) reveal__module._default.binom (- |$rhs#0@0| 1) |$rhs#1@0|) (_module.__default.binom ($LS $LZ) reveal__module._default.binom (- |$rhs#0@0| 1) (- |$rhs#1@0| 1)))))))) (=> (and (and (and (and (and (|_module.__default.binom#canCall| (- |$rhs#0@0| 1) |$rhs#1@0|) (|_module.__default.binom#canCall| (- |$rhs#0@0| 1) (- |$rhs#1@0| 1))) (|_module.__default.EVEN#canCall| (+ (_module.__default.binom ($LS $LZ) reveal__module._default.binom (- |$rhs#0@0| 1) |$rhs#1@0|) (_module.__default.binom ($LS $LZ) reveal__module._default.binom (- |$rhs#0@0| 1) (- |$rhs#1@0| 1))))) (_module.__default.EVEN reveal__module._default.EVEN (+ (_module.__default.binom ($LS $LZ) reveal__module._default.binom (- |$rhs#0@0| 1) |$rhs#1@0|) (_module.__default.binom ($LS $LZ) reveal__module._default.binom (- |$rhs#0@0| 1) (- |$rhs#1@0| 1))))) (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0))) (and (and (and (= $Heap $Heap@0) reveal__module._default.binom) (and ($IsAlloc intType (int_2_U |r#0@0|) Tclass._System.nat $Heap@0) (|_module.__default.EVEN#canCall| |r#0@0|))) (and (and (|_module.__default.EVEN#canCall| |r#0@0|) (= (ControlFlow 0 3) (- 0 2))) (_module.__default.EVEN reveal__module._default.EVEN (+ (_module.__default.binom ($LS $LZ) reveal__module._default.binom (- |$rhs#0@0| 1) |$rhs#1@0|) (_module.__default.binom ($LS $LZ) reveal__module._default.binom (- |$rhs#0@0| 1) (- |$rhs#1@0| 1))))))) (_module.__default.EVEN reveal__module._default.EVEN |r#0@0|))))))
(let ((anon21_Then_correct true))
(let ((anon17_Else_correct  (=> (or (not (= |$rhs#0@0| (LitInt 0))) (not true)) (=> (and (= |$rhs#1_0@0| (- |a#0@@3| 1)) (= |$rhs#1_1@0| (- |b#0@@3| 1))) (and (and (and (and (and (and (and (=> (= (ControlFlow 0 50) 1) anon21_Then_correct) (=> (= (ControlFlow 0 50) 3) anon22_Then_correct)) (=> (= (ControlFlow 0 50) 5) anon23_Then_correct)) (=> (= (ControlFlow 0 50) 14) anon24_Then_correct)) (=> (= (ControlFlow 0 50) 25) anon25_Then_correct)) (=> (= (ControlFlow 0 50) 35) anon26_Then_correct)) (=> (= (ControlFlow 0 50) 44) anon27_Then_correct)) (=> (= (ControlFlow 0 50) 49) anon27_Else_correct))))))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (=> (and (= |$rhs#0@0| (Mul (LitInt 2) |a#0@@3|)) (= |$rhs#1@0| (+ (Mul (LitInt 2) |b#0@@3|) 1))) (and (=> (= (ControlFlow 0 61) (- 0 64)) ($Is intType (int_2_U |$rhs#0@0|) Tclass._System.nat)) (=> ($Is intType (int_2_U |$rhs#0@0|) Tclass._System.nat) (=> ($IsAlloc intType (int_2_U |$rhs#0@0|) Tclass._System.nat $Heap) (and (=> (= (ControlFlow 0 61) (- 0 63)) ($Is intType (int_2_U |$rhs#1@0|) Tclass._System.nat)) (=> ($Is intType (int_2_U |$rhs#1@0|) Tclass._System.nat) (=> (and (and ($IsAlloc intType (int_2_U |$rhs#1@0|) Tclass._System.nat $Heap) (|_module.__default.binom#canCall| |$rhs#0@0| |$rhs#1@0|)) (and (|_module.__default.binom#canCall| |$rhs#0@0| |$rhs#1@0|) (= |r#0@0| (_module.__default.binom ($LS $LZ) reveal__module._default.binom |$rhs#0@0| |$rhs#1@0|)))) (and (=> (= (ControlFlow 0 61) (- 0 62)) (or (not (= |$rhs#1@0| 0)) (not true))) (=> (or (not (= |$rhs#1@0| 0)) (not true)) (and (=> (= (ControlFlow 0 61) 60) anon17_Then_correct) (=> (= (ControlFlow 0 61) 50) anon17_Else_correct))))))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (and (<= (LitInt 0) |a#0@@3|) (<= (LitInt 0) |b#0@@3|))) (and (and (<= (LitInt 0) |r#0|) true) (and (= 2 $FunctionContextHeight) (= (ControlFlow 0 65) 61)))) anon0_correct)))
PreconditionGeneratedEntry_correct)))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
