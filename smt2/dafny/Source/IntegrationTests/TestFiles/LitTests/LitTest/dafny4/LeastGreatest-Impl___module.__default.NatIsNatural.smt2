(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () Int)
(declare-fun $generated@@0 (T@U T@U Int) Bool)
(declare-fun $generated@@1 (T@U T@U) Bool)
(declare-fun $generated@@2 (T@U T@U) Bool)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@27 (T@U) T@U)
(declare-fun $generated@@28 (T@T T@U) T@U)
(declare-fun $generated@@29 () T@T)
(declare-fun $generated@@30 (T@U Int) Bool)
(declare-fun $generated@@31 (T@U) Int)
(declare-fun $generated@@32 (Int) Int)
(declare-fun $generated@@33 (T@U T@U) T@U)
(declare-fun $generated@@34 (Int) T@U)
(declare-fun $generated@@43 (T@U Int) Bool)
(declare-fun $generated@@53 (T@T T@U) T@U)
(declare-fun $generated@@54 (T@T T@U) T@U)
(declare-fun $generated@@63 (T@U) Bool)
(declare-fun $generated@@88 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@89 () T@T)
(declare-fun $generated@@90 () T@T)
(declare-fun $generated@@91 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@92 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@93 (T@T T@T) T@T)
(declare-fun $generated@@94 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@95 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@96 (T@T) T@T)
(declare-fun $generated@@97 (T@T) T@T)
(declare-fun $generated@@152 (Int) Bool)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert  (=> (<= 1 $generated) (forall (($generated@@19 T@U) ($generated@@20 Int) ($generated@@21 T@U) ($generated@@22 T@U) ($generated@@23 T@U) ) (!  (=> ($generated@@2 $generated@@21 $generated@@22) (=> ($generated@@0 $generated@@19 $generated@@21 $generated@@20) ($generated@@0 $generated@@19 $generated@@22 $generated@@20)))
 :pattern ( ($generated@@0 $generated@@19 $generated@@21 $generated@@20) ($generated@@1 $generated@@21 $generated@@23) ($generated@@1 $generated@@22 $generated@@23))
))))
(assert (forall (($generated@@24 T@U) ($generated@@25 T@U) ($generated@@26 T@U) ) (!  (=> (and ($generated@@2 $generated@@24 $generated@@25) ($generated@@2 $generated@@25 $generated@@26)) ($generated@@2 $generated@@24 $generated@@26))
 :pattern ( ($generated@@2 $generated@@24 $generated@@25) ($generated@@2 $generated@@25 $generated@@26))
 :pattern ( ($generated@@2 $generated@@24 $generated@@25) ($generated@@2 $generated@@24 $generated@@26))
)))
(assert (= ($generated@@3 $generated@@29) 3))
(assert  (=> (<= 1 $generated) (forall (($generated@@35 T@U) ($generated@@36 T@U) ($generated@@37 Int) ) (!  (=> (or ($generated@@30 ($generated@@28 $generated@@29 $generated@@36) $generated@@37) (< 1 $generated)) (and (and (=> (< 0 ($generated@@31 $generated@@36)) (=> (or (not (= $generated@@37 ($generated@@32 0))) (not true)) ($generated@@30 ($generated@@33 $generated@@36 ($generated@@34 1)) (- $generated@@37 1)))) (=> (=> (< 0 ($generated@@31 $generated@@36)) (or (= $generated@@37 ($generated@@32 0)) ($generated@@0 ($generated@@27 $generated@@35) ($generated@@33 $generated@@36 ($generated@@34 1)) (- $generated@@37 1)))) (=> (= ($generated@@32 0) ($generated@@31 $generated@@36)) (forall (($generated@@38 T@U) ) (!  (=> ($generated@@1 $generated@@38 $generated@@36) ($generated@@30 $generated@@38 $generated@@37))
 :pattern ( ($generated@@0 ($generated@@27 $generated@@35) $generated@@38 $generated@@37))
))))) (= ($generated@@0 ($generated@@27 $generated@@35) ($generated@@28 $generated@@29 $generated@@36) $generated@@37)  (and (=> (< 0 ($generated@@31 $generated@@36)) (or (= $generated@@37 ($generated@@32 0)) ($generated@@0 ($generated@@27 $generated@@35) ($generated@@33 $generated@@36 ($generated@@34 1)) (- $generated@@37 1)))) (=> (= ($generated@@32 0) ($generated@@31 $generated@@36)) (exists (($generated@@39 T@U) ) (!  (and ($generated@@1 $generated@@39 $generated@@36) ($generated@@0 ($generated@@27 $generated@@35) $generated@@39 $generated@@37))
 :pattern ( ($generated@@0 ($generated@@27 $generated@@35) $generated@@39 $generated@@37))
)))))))
 :weight 3
 :pattern ( ($generated@@0 ($generated@@27 $generated@@35) ($generated@@28 $generated@@29 $generated@@36) $generated@@37))
))))
(assert (forall (($generated@@40 T@U) ($generated@@41 Int) ($generated@@42 Int) ) (!  (=> (and (and (<= 0 $generated@@41) (<= 0 $generated@@42)) (<= (+ $generated@@41 $generated@@42) ($generated@@31 $generated@@40))) (= ($generated@@33 ($generated@@33 $generated@@40 ($generated@@34 $generated@@41)) ($generated@@34 $generated@@42)) ($generated@@33 $generated@@40 ($generated@@34 (+ $generated@@41 $generated@@42)))))
 :pattern ( ($generated@@33 ($generated@@33 $generated@@40 ($generated@@34 $generated@@41)) ($generated@@34 $generated@@42)))
)))
(assert  (=> (<= 1 $generated) (forall (($generated@@44 T@U) ($generated@@45 Int) ) (!  (=> (exists (($generated@@46 T@U) ) (! ($generated@@0 ($generated@@27 $generated@@44) $generated@@46 $generated@@45)
 :pattern ( ($generated@@0 ($generated@@27 $generated@@44) $generated@@46 $generated@@45))
)) ($generated@@43 ($generated@@27 $generated@@44) $generated@@45))
 :pattern ( ($generated@@43 ($generated@@27 $generated@@44) $generated@@45))
))))
(assert  (=> (<= 1 $generated) (forall (($generated@@47 T@U) ($generated@@48 Int) ($generated@@49 T@U) ) (!  (=> (= $generated@@49 ($generated@@34 0)) (not ($generated@@0 $generated@@47 $generated@@49 $generated@@48)))
 :pattern ( ($generated@@0 $generated@@47 $generated@@49 $generated@@48))
))))
(assert (forall (($generated@@50 Int) ) (! (= ($generated@@32 $generated@@50) $generated@@50)
 :pattern ( ($generated@@32 $generated@@50))
)))
(assert (forall (($generated@@51 T@U) ($generated@@52 T@T) ) (! (= ($generated@@28 $generated@@52 $generated@@51) $generated@@51)
 :pattern ( ($generated@@28 $generated@@52 $generated@@51))
)))
(assert (forall (($generated@@55 T@U) ($generated@@56 T@T) ) (! (= ($generated@@54 $generated@@56 ($generated@@53 $generated@@56 $generated@@55)) $generated@@55)
 :pattern ( ($generated@@53 $generated@@56 $generated@@55))
)))
(assert  (=> (<= 1 $generated) (forall (($generated@@57 T@U) ($generated@@58 Int) ) (!  (=> ($generated@@43 ($generated@@27 $generated@@57) $generated@@58) (exists (($generated@@59 T@U) ) (! ($generated@@0 ($generated@@27 $generated@@57) $generated@@59 $generated@@58)
 :pattern ( ($generated@@0 ($generated@@27 $generated@@57) $generated@@59 $generated@@58))
)))
 :pattern ( ($generated@@43 ($generated@@27 $generated@@57) $generated@@58))
))))
(assert (forall (($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 Int) ) (! (= ($generated@@0 ($generated@@27 $generated@@60) $generated@@61 $generated@@62) ($generated@@0 $generated@@60 $generated@@61 $generated@@62))
 :pattern ( ($generated@@0 ($generated@@27 $generated@@60) $generated@@61 $generated@@62))
)))
(assert (forall (($generated@@64 T@U) ($generated@@65 T@U) ) (!  (=> (and ($generated@@63 $generated@@65) (<= ($generated@@31 $generated@@65) ($generated@@31 $generated@@64))) (and (= ($generated@@63 ($generated@@33 $generated@@64 $generated@@65)) ($generated@@63 $generated@@64)) (= ($generated@@31 ($generated@@33 $generated@@64 $generated@@65)) (- ($generated@@31 $generated@@64) ($generated@@31 $generated@@65)))))
 :pattern ( ($generated@@33 $generated@@64 $generated@@65))
)))
(assert (forall (($generated@@66 Int) ) (!  (=> (<= 0 $generated@@66) (and ($generated@@63 ($generated@@34 $generated@@66)) (= ($generated@@31 ($generated@@34 $generated@@66)) $generated@@66)))
 :pattern ( ($generated@@34 $generated@@66))
)))
(assert  (=> (<= 1 $generated) (forall (($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 Int) ) (!  (=> (or ($generated@@30 ($generated@@28 $generated@@29 $generated@@68) ($generated@@32 $generated@@69)) (< 1 $generated)) (and (and (=> (< 0 ($generated@@31 $generated@@68)) (=> (or (not (= ($generated@@32 $generated@@69) ($generated@@32 0))) (not true)) ($generated@@30 ($generated@@33 $generated@@68 ($generated@@34 1)) ($generated@@32 (- $generated@@69 1))))) (=> (=> (< 0 ($generated@@31 $generated@@68)) (or (= ($generated@@32 $generated@@69) ($generated@@32 0)) ($generated@@0 ($generated@@27 $generated@@67) ($generated@@33 $generated@@68 ($generated@@34 1)) ($generated@@32 (- $generated@@69 1))))) (=> (= ($generated@@32 0) ($generated@@31 $generated@@68)) (forall (($generated@@70 T@U) ) (!  (=> ($generated@@1 $generated@@70 $generated@@68) ($generated@@30 $generated@@70 $generated@@69))
 :pattern ( ($generated@@0 ($generated@@27 $generated@@67) $generated@@70 $generated@@69))
))))) (= ($generated@@0 ($generated@@27 $generated@@67) ($generated@@28 $generated@@29 $generated@@68) ($generated@@32 $generated@@69))  (and (=> (< 0 ($generated@@31 $generated@@68)) (or (= ($generated@@32 $generated@@69) ($generated@@32 0)) ($generated@@0 ($generated@@27 $generated@@67) ($generated@@33 $generated@@68 ($generated@@34 1)) ($generated@@32 (- $generated@@69 1))))) (=> (= ($generated@@32 0) ($generated@@31 $generated@@68)) (exists (($generated@@71 T@U) ) (!  (and ($generated@@1 $generated@@71 $generated@@68) ($generated@@0 ($generated@@27 $generated@@67) $generated@@71 $generated@@69))
 :pattern ( ($generated@@0 ($generated@@27 $generated@@67) $generated@@71 $generated@@69))
)))))))
 :weight 3
 :pattern ( ($generated@@0 ($generated@@27 $generated@@67) ($generated@@28 $generated@@29 $generated@@68) ($generated@@32 $generated@@69)))
))))
(assert (forall (($generated@@72 T@U) ($generated@@73 T@U) ) (!  (or (or ($generated@@2 $generated@@72 $generated@@73) (= $generated@@72 $generated@@73)) ($generated@@2 $generated@@73 $generated@@72))
 :pattern ( ($generated@@2 $generated@@72 $generated@@73) ($generated@@2 $generated@@73 $generated@@72))
)))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@U) ) (! (= ($generated@@1 $generated@@74 $generated@@75) ($generated@@2 $generated@@74 $generated@@75))
 :pattern ( ($generated@@1 $generated@@74 $generated@@75))
)))
(assert (forall (($generated@@76 T@U) ($generated@@77 Int) ) (! (= ($generated@@43 ($generated@@27 $generated@@76) $generated@@77) ($generated@@43 $generated@@76 $generated@@77))
 :pattern ( ($generated@@43 ($generated@@27 $generated@@76) $generated@@77))
)))
(assert (forall (($generated@@78 T@U) ) (! (<= 0 ($generated@@31 $generated@@78))
 :pattern ( ($generated@@31 $generated@@78))
)))
(assert (forall (($generated@@79 T@U) ($generated@@80 T@T) ) (! (= ($generated@@53 $generated@@80 ($generated@@54 $generated@@80 $generated@@79)) $generated@@79)
 :pattern ( ($generated@@54 $generated@@80 $generated@@79))
)))
(assert (forall (($generated@@81 T@U) ($generated@@82 T@U) ) (!  (and (and (and (=> ($generated@@2 $generated@@81 $generated@@82) (or (not (= $generated@@81 $generated@@82)) (not true))) (=> (and ($generated@@63 $generated@@81) (not ($generated@@63 $generated@@82))) ($generated@@2 $generated@@81 $generated@@82))) (=> (and ($generated@@63 $generated@@81) ($generated@@63 $generated@@82)) (= ($generated@@2 $generated@@81 $generated@@82) (< ($generated@@31 $generated@@81) ($generated@@31 $generated@@82))))) (=> (and ($generated@@2 $generated@@81 $generated@@82) ($generated@@63 $generated@@82)) ($generated@@63 $generated@@81)))
 :pattern ( ($generated@@2 $generated@@81 $generated@@82))
)))
(assert  (=> (<= 1 $generated) (forall (($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 Int) ) (!  (=> (or ($generated@@30 $generated@@84 $generated@@85) (< 1 $generated)) (and (and (=> (< 0 ($generated@@31 $generated@@84)) (=> (or (not (= $generated@@85 ($generated@@32 0))) (not true)) ($generated@@30 ($generated@@33 $generated@@84 ($generated@@34 1)) (- $generated@@85 1)))) (=> (=> (< 0 ($generated@@31 $generated@@84)) (or (= $generated@@85 ($generated@@32 0)) ($generated@@0 $generated@@83 ($generated@@33 $generated@@84 ($generated@@34 1)) (- $generated@@85 1)))) (=> (= ($generated@@32 0) ($generated@@31 $generated@@84)) (forall (($generated@@86 T@U) ) (!  (=> ($generated@@1 $generated@@86 $generated@@84) ($generated@@30 $generated@@86 $generated@@85))
 :pattern ( ($generated@@0 $generated@@83 $generated@@86 $generated@@85))
))))) (= ($generated@@0 ($generated@@27 $generated@@83) $generated@@84 $generated@@85)  (and (=> (< 0 ($generated@@31 $generated@@84)) (or (= $generated@@85 ($generated@@32 0)) ($generated@@0 $generated@@83 ($generated@@33 $generated@@84 ($generated@@34 1)) (- $generated@@85 1)))) (=> (= ($generated@@32 0) ($generated@@31 $generated@@84)) (exists (($generated@@87 T@U) ) (!  (and ($generated@@1 $generated@@87 $generated@@84) ($generated@@0 $generated@@83 $generated@@87 $generated@@85))
 :pattern ( ($generated@@0 $generated@@83 $generated@@87 $generated@@85))
)))))))
 :pattern ( ($generated@@0 ($generated@@27 $generated@@83) $generated@@84 $generated@@85))
))))
(assert  (and (and (and (and (and (and (and (and (forall (($generated@@98 T@T) ($generated@@99 T@T) ($generated@@100 T@T) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ) (! (= ($generated@@88 $generated@@98 $generated@@99 $generated@@100 ($generated@@94 $generated@@98 $generated@@99 $generated@@100 $generated@@102 $generated@@103 $generated@@104 $generated@@101) $generated@@103 $generated@@104) $generated@@101)
 :weight 0
)) (and (forall (($generated@@105 T@T) ($generated@@106 T@T) ($generated@@107 T@T) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ) (!  (or (= $generated@@110 $generated@@112) (= ($generated@@88 $generated@@105 $generated@@106 $generated@@107 ($generated@@94 $generated@@105 $generated@@106 $generated@@107 $generated@@109 $generated@@110 $generated@@111 $generated@@108) $generated@@112 $generated@@113) ($generated@@88 $generated@@105 $generated@@106 $generated@@107 $generated@@109 $generated@@112 $generated@@113)))
 :weight 0
)) (forall (($generated@@114 T@T) ($generated@@115 T@T) ($generated@@116 T@T) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ) (!  (or (= $generated@@120 $generated@@122) (= ($generated@@88 $generated@@114 $generated@@115 $generated@@116 ($generated@@94 $generated@@114 $generated@@115 $generated@@116 $generated@@118 $generated@@119 $generated@@120 $generated@@117) $generated@@121 $generated@@122) ($generated@@88 $generated@@114 $generated@@115 $generated@@116 $generated@@118 $generated@@121 $generated@@122)))
 :weight 0
)))) (= ($generated@@3 $generated@@89) 4)) (= ($generated@@3 $generated@@90) 5)) (forall (($generated@@123 T@T) ($generated@@124 T@T) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 T@U) ) (! (= ($generated@@92 $generated@@123 $generated@@124 ($generated@@95 $generated@@123 $generated@@124 $generated@@126 $generated@@127 $generated@@125) $generated@@127) $generated@@125)
 :weight 0
))) (forall (($generated@@128 T@T) ($generated@@129 T@T) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ) (!  (or (= $generated@@132 $generated@@133) (= ($generated@@92 $generated@@128 $generated@@129 ($generated@@95 $generated@@128 $generated@@129 $generated@@131 $generated@@132 $generated@@130) $generated@@133) ($generated@@92 $generated@@128 $generated@@129 $generated@@131 $generated@@133)))
 :weight 0
))) (forall (($generated@@134 T@T) ($generated@@135 T@T) ) (= ($generated@@3 ($generated@@93 $generated@@134 $generated@@135)) 6))) (forall (($generated@@136 T@T) ($generated@@137 T@T) ) (! (= ($generated@@96 ($generated@@93 $generated@@136 $generated@@137)) $generated@@136)
 :pattern ( ($generated@@93 $generated@@136 $generated@@137))
))) (forall (($generated@@138 T@T) ($generated@@139 T@T) ) (! (= ($generated@@97 ($generated@@93 $generated@@138 $generated@@139)) $generated@@139)
 :pattern ( ($generated@@93 $generated@@138 $generated@@139))
))))
(assert (forall (($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 Bool) ($generated@@144 T@U) ($generated@@145 T@U) ) (! (= ($generated@@8 ($generated@@88 $generated@@89 $generated@@90 $generated@@4 ($generated@@91 $generated@@140 $generated@@141 $generated@@142 $generated@@143) $generated@@144 $generated@@145))  (=> (and (or (not (= $generated@@144 $generated@@140)) (not true)) ($generated@@8 ($generated@@53 $generated@@4 ($generated@@92 $generated@@90 $generated@@29 ($generated@@92 $generated@@89 ($generated@@93 $generated@@90 $generated@@29) $generated@@141 $generated@@144) $generated@@142)))) $generated@@143))
 :pattern ( ($generated@@88 $generated@@89 $generated@@90 $generated@@4 ($generated@@91 $generated@@140 $generated@@141 $generated@@142 $generated@@143) $generated@@144 $generated@@145))
)))
(assert (forall (($generated@@146 T@U) ) (!  (=> ($generated@@63 $generated@@146) (= $generated@@146 ($generated@@34 ($generated@@31 $generated@@146))))
 :pattern ( ($generated@@31 $generated@@146))
 :pattern ( ($generated@@63 $generated@@146))
)))
(assert (forall (($generated@@147 T@U) ($generated@@148 T@U) ) (!  (=> (and ($generated@@63 $generated@@148) (<= ($generated@@31 $generated@@148) ($generated@@31 $generated@@147))) (or (and (= $generated@@148 ($generated@@34 0)) (= ($generated@@33 $generated@@147 $generated@@148) $generated@@147)) (and (or (not (= $generated@@148 ($generated@@34 0))) (not true)) ($generated@@2 ($generated@@33 $generated@@147 $generated@@148) $generated@@147))))
 :pattern ( ($generated@@33 $generated@@147 $generated@@148))
)))
(assert (forall (($generated@@149 Int) ) (! (= ($generated@@54 $generated@@5 ($generated@@9 ($generated@@32 $generated@@149))) ($generated@@28 $generated@@29 ($generated@@54 $generated@@5 ($generated@@9 $generated@@149))))
 :pattern ( ($generated@@54 $generated@@5 ($generated@@9 ($generated@@32 $generated@@149))))
)))
(assert (forall (($generated@@150 T@U) ($generated@@151 T@T) ) (! (= ($generated@@54 $generated@@151 ($generated@@28 $generated@@151 $generated@@150)) ($generated@@28 $generated@@29 ($generated@@54 $generated@@151 $generated@@150)))
 :pattern ( ($generated@@54 $generated@@151 ($generated@@28 $generated@@151 $generated@@150)))
)))
(assert  (=> (<= 0 $generated) (forall (($generated@@153 T@U) ($generated@@154 Int) ) (!  (=> (or ($generated@@152 $generated@@154) (< 0 $generated)) (and (=> (or (not (= $generated@@154 ($generated@@32 0))) (not true)) ($generated@@152 (- $generated@@154 1))) (= ($generated@@43 ($generated@@27 $generated@@153) $generated@@154)  (or (= $generated@@154 ($generated@@32 0)) ($generated@@43 $generated@@153 (- $generated@@154 1))))))
 :pattern ( ($generated@@43 ($generated@@27 $generated@@153) $generated@@154))
))))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@155 () T@U)
(declare-fun $generated@@156 () T@U)
(declare-fun $generated@@157 () T@U)
(declare-fun $generated@@158 () T@U)
(declare-fun $generated@@159 (T@U) Bool)
(declare-fun $generated@@160 () T@U)
(declare-fun $generated@@161 (T@U) Bool)
(declare-fun $generated@@162 () T@U)
(declare-fun $generated@@163 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@164  (=> (= $generated@@155 ($generated@@91 $generated@@156 $generated@@157 $generated@@158 false)) (=> (and (and (and ($generated@@159 $generated@@160) ($generated@@161 $generated@@160)) (= $generated@@157 $generated@@160)) (and (and (forall (($generated@@165 Int) ) (!  (=> (and (<= ($generated@@32 0) $generated@@165) (and (<= 0 $generated@@165) (< $generated@@165 $generated@@163))) ($generated@@43 ($generated@@27 $generated@@162) $generated@@165))
 :pattern ( ($generated@@43 ($generated@@27 $generated@@162) $generated@@165))
)) (= (ControlFlow 0 2) (- 0 1))) ($generated@@152 $generated@@163))) (or ($generated@@43 ($generated@@27 $generated@@162) $generated@@163) (or (= $generated@@163 ($generated@@32 0)) ($generated@@43 ($generated@@27 ($generated@@27 $generated@@162)) (- $generated@@163 1))))))))
(let (($generated@@166  (=> (and (and (and ($generated@@159 $generated@@157) ($generated@@161 $generated@@157)) (= 1 $generated)) (and (<= ($generated@@32 0) $generated@@163) (= (ControlFlow 0 3) 2))) $generated@@164)))
$generated@@166)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
