(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TChar () T@U)
(declare-fun TInt () T@U)
(declare-fun TagChar () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagSeq () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._module.List () T@U)
(declare-fun Tagclass._module.aexp () T@U)
(declare-fun Tagclass._module.instr () T@U)
(declare-fun |##_module.List.Nil| () T@U)
(declare-fun |##_module.List.Cons| () T@U)
(declare-fun |##_module.aexp.N| () T@U)
(declare-fun |##_module.aexp.V| () T@U)
(declare-fun |##_module.aexp.Plus| () T@U)
(declare-fun |##_module.instr.LOADI| () T@U)
(declare-fun |##_module.instr.LOAD| () T@U)
(declare-fun |##_module.instr.ADD| () T@U)
(declare-fun tytagFamily$List () T@U)
(declare-fun tytagFamily$aexp () T@U)
(declare-fun tytagFamily$instr () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun |#_module.aexp.Plus| (T@U T@U) T@U)
(declare-fun Tclass._module.aexp () T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.append (T@U T@U T@U T@U) T@U)
(declare-fun $LS (T@U) T@U)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun |_module.__default.append#canCall| (T@U T@U T@U) Bool)
(declare-fun Tclass._module.List (T@U) T@U)
(declare-fun _module.List.Nil_q (T@U) Bool)
(declare-fun _module.List.tail (T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun _module.List.head (T@U) T@U)
(declare-fun |#_module.List.Cons| (T@U T@U) T@U)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun |#_module.aexp.V| (T@U) T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun |#_module.instr.LOAD| (T@U) T@U)
(declare-fun |Seq#Empty| () T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun |#_module.List.Nil| () T@U)
(declare-fun |#_module.instr.ADD| () T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun Tclass._module.instr () T@U)
(declare-fun LitInt (Int) Int)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun _module.List.Cons_q (T@U) Bool)
(declare-fun _module.aexp.N_q (T@U) Bool)
(declare-fun _module.aexp.V_q (T@U) Bool)
(declare-fun _module.aexp.Plus_q (T@U) Bool)
(declare-fun _module.instr.LOADI_q (T@U) Bool)
(declare-fun _module.instr.LOAD_q (T@U) Bool)
(declare-fun _module.instr.ADD_q (T@U) Bool)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun |#_module.aexp.N| (Int) T@U)
(declare-fun |#_module.instr.LOADI| (Int) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun TagFamily (T@U) T@U)
(declare-fun _module.__default.comp (T@U T@U) T@U)
(declare-fun |_module.__default.comp#canCall| (T@U) Bool)
(declare-fun _module.aexp._h2 (T@U) T@U)
(declare-fun _module.aexp._h1 (T@U) T@U)
(declare-fun $LZ () T@U)
(declare-fun _module.aexp.n (T@U) Int)
(declare-fun SeqType () T@T)
(declare-fun _module.aexp._h0 (T@U) T@U)
(declare-fun charType () T@T)
(declare-fun TSeq (T@U) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun Tclass._module.List_0 (T@U) T@U)
(declare-fun _module.instr._h12 (T@U) Int)
(declare-fun _module.instr._h13 (T@U) T@U)
(declare-fun BoxRank (T@U) Int)
(declare-fun |Seq#Rank| (T@U) Int)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TChar TInt TagChar TagInt TagSeq alloc Tagclass._module.List Tagclass._module.aexp Tagclass._module.instr |##_module.List.Nil| |##_module.List.Cons| |##_module.aexp.N| |##_module.aexp.V| |##_module.aexp.Plus| |##_module.instr.LOADI| |##_module.instr.LOAD| |##_module.instr.ADD| tytagFamily$List tytagFamily$aexp tytagFamily$instr)
)
(assert (= (Tag TChar) TagChar))
(assert (= (Tag TInt) TagInt))
(assert (= (Ctor DatatypeTypeType) 3))
(assert (forall ((|a#26#0#0| T@U) (|a#26#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.aexp.Plus| |a#26#0#0| |a#26#1#0|) Tclass._module.aexp)  (and ($Is DatatypeTypeType |a#26#0#0| Tclass._module.aexp) ($Is DatatypeTypeType |a#26#1#0| Tclass._module.aexp)))
 :pattern ( ($Is DatatypeTypeType (|#_module.aexp.Plus| |a#26#0#0| |a#26#1#0|) Tclass._module.aexp))
)))
(assert (= (Ctor BoxType) 4))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module._default.append$_T0 T@U) ($ly T@U) (|xs#0| T@U) (|ys#0| T@U) ) (!  (=> (or (|_module.__default.append#canCall| _module._default.append$_T0 (Lit DatatypeTypeType |xs#0|) (Lit DatatypeTypeType |ys#0|)) (and (< 1 $FunctionContextHeight) (and ($Is DatatypeTypeType |xs#0| (Tclass._module.List _module._default.append$_T0)) ($Is DatatypeTypeType |ys#0| (Tclass._module.List _module._default.append$_T0))))) (and (=> (not (U_2_bool (Lit boolType (bool_2_U (_module.List.Nil_q (Lit DatatypeTypeType |xs#0|)))))) (let ((|tail#3| (Lit DatatypeTypeType (_module.List.tail (Lit DatatypeTypeType |xs#0|)))))
(|_module.__default.append#canCall| _module._default.append$_T0 |tail#3| (Lit DatatypeTypeType |ys#0|)))) (= (_module.__default.append _module._default.append$_T0 ($LS $ly) (Lit DatatypeTypeType |xs#0|) (Lit DatatypeTypeType |ys#0|)) (ite (_module.List.Nil_q (Lit DatatypeTypeType |xs#0|)) |ys#0| (let ((|tail#2| (Lit DatatypeTypeType (_module.List.tail (Lit DatatypeTypeType |xs#0|)))))
(let ((|x#2| (Lit BoxType (_module.List.head (Lit DatatypeTypeType |xs#0|)))))
(Lit DatatypeTypeType (|#_module.List.Cons| |x#2| (Lit DatatypeTypeType (_module.__default.append _module._default.append$_T0 ($LS $ly) |tail#2| (Lit DatatypeTypeType |ys#0|)))))))))))
 :weight 3
 :pattern ( (_module.__default.append _module._default.append$_T0 ($LS $ly) (Lit DatatypeTypeType |xs#0|) (Lit DatatypeTypeType |ys#0|)))
))))
(assert (forall ((|a#22#0#0| T@U) (i Int) ) (!  (=> (and (<= 0 i) (< i (|Seq#Length| |a#22#0#0|))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#22#0#0| i))) (DtRank (|#_module.aexp.V| |a#22#0#0|))))
 :pattern ( (|Seq#Index| |a#22#0#0| i) (|#_module.aexp.V| |a#22#0#0|))
)))
(assert (forall ((|a#69#0#0| T@U) (i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| |a#69#0#0|))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#69#0#0| i@@0))) (DtRank (|#_module.instr.LOAD| |a#69#0#0|))))
 :pattern ( (|Seq#Index| |a#69#0#0| i@@0) (|#_module.instr.LOAD| |a#69#0#0|))
)))
(assert (= (|Seq#Length| |Seq#Empty|) 0))
(assert (= (DatatypeCtorId |#_module.List.Nil|) |##_module.List.Nil|))
(assert (= (DatatypeCtorId |#_module.instr.ADD|) |##_module.instr.ADD|))
(assert (forall ((_module.List$T T@U) ($h T@U) ) (!  (=> ($IsGoodHeap $h) ($IsAlloc DatatypeTypeType |#_module.List.Nil| (Tclass._module.List _module.List$T) $h))
 :pattern ( ($IsAlloc DatatypeTypeType |#_module.List.Nil| (Tclass._module.List _module.List$T) $h))
)))
(assert ($Is DatatypeTypeType |#_module.instr.ADD| Tclass._module.instr))
(assert (forall ((_module.List$T@@0 T@U) ) (! ($Is DatatypeTypeType |#_module.List.Nil| (Tclass._module.List _module.List$T@@0))
 :pattern ( ($Is DatatypeTypeType |#_module.List.Nil| (Tclass._module.List _module.List$T@@0)))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((_module.List$T@@1 T@U) (|a#6#0#0| T@U) (|a#6#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.List.Cons| |a#6#0#0| |a#6#1#0|) (Tclass._module.List _module.List$T@@1))  (and ($IsBox |a#6#0#0| _module.List$T@@1) ($Is DatatypeTypeType |a#6#1#0| (Tclass._module.List _module.List$T@@1))))
 :pattern ( ($Is DatatypeTypeType (|#_module.List.Cons| |a#6#0#0| |a#6#1#0|) (Tclass._module.List _module.List$T@@1)))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module._default.append$_T0@@0 T@U) ($ly@@0 T@U) (|xs#0@@0| T@U) (|ys#0@@0| T@U) ) (!  (=> (or (|_module.__default.append#canCall| _module._default.append$_T0@@0 |xs#0@@0| |ys#0@@0|) (and (< 1 $FunctionContextHeight) (and ($Is DatatypeTypeType |xs#0@@0| (Tclass._module.List _module._default.append$_T0@@0)) ($Is DatatypeTypeType |ys#0@@0| (Tclass._module.List _module._default.append$_T0@@0))))) (and (=> (not (_module.List.Nil_q |xs#0@@0|)) (let ((|tail#1| (_module.List.tail |xs#0@@0|)))
(|_module.__default.append#canCall| _module._default.append$_T0@@0 |tail#1| |ys#0@@0|))) (= (_module.__default.append _module._default.append$_T0@@0 ($LS $ly@@0) |xs#0@@0| |ys#0@@0|) (ite (_module.List.Nil_q |xs#0@@0|) |ys#0@@0| (let ((|tail#0| (_module.List.tail |xs#0@@0|)))
(let ((|x#0| (_module.List.head |xs#0@@0|)))
(|#_module.List.Cons| |x#0| (_module.__default.append _module._default.append$_T0@@0 $ly@@0 |tail#0| |ys#0@@0|))))))))
 :pattern ( (_module.__default.append _module._default.append$_T0@@0 ($LS $ly@@0) |xs#0@@0| |ys#0@@0|))
))))
(assert (forall ((d T@U) ) (! (= (_module.List.Nil_q d) (= (DatatypeCtorId d) |##_module.List.Nil|))
 :pattern ( (_module.List.Nil_q d))
)))
(assert (forall ((d@@0 T@U) ) (! (= (_module.List.Cons_q d@@0) (= (DatatypeCtorId d@@0) |##_module.List.Cons|))
 :pattern ( (_module.List.Cons_q d@@0))
)))
(assert (forall ((d@@1 T@U) ) (! (= (_module.aexp.N_q d@@1) (= (DatatypeCtorId d@@1) |##_module.aexp.N|))
 :pattern ( (_module.aexp.N_q d@@1))
)))
(assert (forall ((d@@2 T@U) ) (! (= (_module.aexp.V_q d@@2) (= (DatatypeCtorId d@@2) |##_module.aexp.V|))
 :pattern ( (_module.aexp.V_q d@@2))
)))
(assert (forall ((d@@3 T@U) ) (! (= (_module.aexp.Plus_q d@@3) (= (DatatypeCtorId d@@3) |##_module.aexp.Plus|))
 :pattern ( (_module.aexp.Plus_q d@@3))
)))
(assert (forall ((d@@4 T@U) ) (! (= (_module.instr.LOADI_q d@@4) (= (DatatypeCtorId d@@4) |##_module.instr.LOADI|))
 :pattern ( (_module.instr.LOADI_q d@@4))
)))
(assert (forall ((d@@5 T@U) ) (! (= (_module.instr.LOAD_q d@@5) (= (DatatypeCtorId d@@5) |##_module.instr.LOAD|))
 :pattern ( (_module.instr.LOAD_q d@@5))
)))
(assert (forall ((d@@6 T@U) ) (! (= (_module.instr.ADD_q d@@6) (= (DatatypeCtorId d@@6) |##_module.instr.ADD|))
 :pattern ( (_module.instr.ADD_q d@@6))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((d@@7 T@U) ) (!  (=> (_module.List.Cons_q d@@7) (exists ((|a#5#0#0| T@U) (|a#5#1#0| T@U) ) (= d@@7 (|#_module.List.Cons| |a#5#0#0| |a#5#1#0|))))
 :pattern ( (_module.List.Cons_q d@@7))
)))
(assert (forall ((d@@8 T@U) ) (!  (=> (_module.aexp.Plus_q d@@8) (exists ((|a#25#0#0| T@U) (|a#25#1#0| T@U) ) (= d@@8 (|#_module.aexp.Plus| |a#25#0#0| |a#25#1#0|))))
 :pattern ( (_module.aexp.Plus_q d@@8))
)))
(assert (forall ((d@@9 T@U) ) (!  (=> (_module.List.Nil_q d@@9) (= d@@9 |#_module.List.Nil|))
 :pattern ( (_module.List.Nil_q d@@9))
)))
(assert (forall ((d@@10 T@U) ) (!  (=> (_module.instr.ADD_q d@@10) (= d@@10 |#_module.instr.ADD|))
 :pattern ( (_module.instr.ADD_q d@@10))
)))
(assert (forall ((d@@11 T@U) ) (!  (=> (_module.aexp.N_q d@@11) (exists ((|a#13#0#0| Int) ) (= d@@11 (|#_module.aexp.N| |a#13#0#0|))))
 :pattern ( (_module.aexp.N_q d@@11))
)))
(assert (forall ((d@@12 T@U) ) (!  (=> (_module.aexp.V_q d@@12) (exists ((|a#18#0#0| T@U) ) (= d@@12 (|#_module.aexp.V| |a#18#0#0|))))
 :pattern ( (_module.aexp.V_q d@@12))
)))
(assert (forall ((d@@13 T@U) ) (!  (=> (_module.instr.LOADI_q d@@13) (exists ((|a#60#0#0| Int) ) (= d@@13 (|#_module.instr.LOADI| |a#60#0#0|))))
 :pattern ( (_module.instr.LOADI_q d@@13))
)))
(assert (forall ((d@@14 T@U) ) (!  (=> (_module.instr.LOAD_q d@@14) (exists ((|a#65#0#0| T@U) ) (= d@@14 (|#_module.instr.LOAD| |a#65#0#0|))))
 :pattern ( (_module.instr.LOAD_q d@@14))
)))
(assert (forall ((v T@U) (t T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v) t h) ($IsAlloc T@@1 v t h))
 :pattern ( ($IsAllocBox ($Box T@@1 v) t h))
)))
(assert (forall ((_module.List$T@@2 T@U) ) (!  (and (= (Tag (Tclass._module.List _module.List$T@@2)) Tagclass._module.List) (= (TagFamily (Tclass._module.List _module.List$T@@2)) tytagFamily$List))
 :pattern ( (Tclass._module.List _module.List$T@@2))
)))
(assert (forall ((bx T@U) ) (!  (=> ($IsBox bx Tclass._module.aexp) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx)) bx) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx) Tclass._module.aexp)))
 :pattern ( ($IsBox bx Tclass._module.aexp))
)))
(assert (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 Tclass._module.instr) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@0)) bx@@0) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@0) Tclass._module.instr)))
 :pattern ( ($IsBox bx@@0 Tclass._module.instr))
)))
(assert (= (Ctor SeqType) 5))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($ly@@1 T@U) (|a#0| T@U) ) (!  (=> (or (|_module.__default.comp#canCall| (Lit DatatypeTypeType |a#0|)) (and (< 2 $FunctionContextHeight) ($Is DatatypeTypeType |a#0| Tclass._module.aexp))) (and (=> (not (U_2_bool (Lit boolType (bool_2_U (_module.aexp.N_q (Lit DatatypeTypeType |a#0|)))))) (=> (not (U_2_bool (Lit boolType (bool_2_U (_module.aexp.V_q (Lit DatatypeTypeType |a#0|)))))) (let ((|a1#3| (Lit DatatypeTypeType (_module.aexp._h2 (Lit DatatypeTypeType |a#0|)))))
(let ((|a0#3| (Lit DatatypeTypeType (_module.aexp._h1 (Lit DatatypeTypeType |a#0|)))))
 (and (and (and (|_module.__default.comp#canCall| |a0#3|) (|_module.__default.comp#canCall| |a1#3|)) (|_module.__default.append#canCall| Tclass._module.instr (_module.__default.comp ($LS $ly@@1) |a0#3|) (_module.__default.comp ($LS $ly@@1) |a1#3|))) (|_module.__default.append#canCall| Tclass._module.instr (_module.__default.append Tclass._module.instr ($LS $LZ) (_module.__default.comp ($LS $ly@@1) |a0#3|) (_module.__default.comp ($LS $ly@@1) |a1#3|)) (Lit DatatypeTypeType (|#_module.List.Cons| ($Box DatatypeTypeType (Lit DatatypeTypeType |#_module.instr.ADD|)) (Lit DatatypeTypeType |#_module.List.Nil|))))))))) (= (_module.__default.comp ($LS $ly@@1) (Lit DatatypeTypeType |a#0|)) (ite (_module.aexp.N_q (Lit DatatypeTypeType |a#0|)) (let ((|n#2| (LitInt (_module.aexp.n (Lit DatatypeTypeType |a#0|)))))
(Lit DatatypeTypeType (|#_module.List.Cons| ($Box DatatypeTypeType (Lit DatatypeTypeType (|#_module.instr.LOADI| |n#2|))) (Lit DatatypeTypeType |#_module.List.Nil|)))) (ite (_module.aexp.V_q (Lit DatatypeTypeType |a#0|)) (let ((|x#2@@0| (Lit SeqType (_module.aexp._h0 (Lit DatatypeTypeType |a#0|)))))
(Lit DatatypeTypeType (|#_module.List.Cons| ($Box DatatypeTypeType (Lit DatatypeTypeType (|#_module.instr.LOAD| |x#2@@0|))) (Lit DatatypeTypeType |#_module.List.Nil|)))) (let ((|a1#2| (Lit DatatypeTypeType (_module.aexp._h2 (Lit DatatypeTypeType |a#0|)))))
(let ((|a0#2| (Lit DatatypeTypeType (_module.aexp._h1 (Lit DatatypeTypeType |a#0|)))))
(Lit DatatypeTypeType (_module.__default.append Tclass._module.instr ($LS $LZ) (Lit DatatypeTypeType (_module.__default.append Tclass._module.instr ($LS $LZ) (Lit DatatypeTypeType (_module.__default.comp ($LS $ly@@1) |a0#2|)) (Lit DatatypeTypeType (_module.__default.comp ($LS $ly@@1) |a1#2|)))) (Lit DatatypeTypeType (|#_module.List.Cons| ($Box DatatypeTypeType (Lit DatatypeTypeType |#_module.instr.ADD|)) (Lit DatatypeTypeType |#_module.List.Nil|))))))))))))
 :weight 3
 :pattern ( (_module.__default.comp ($LS $ly@@1) (Lit DatatypeTypeType |a#0|)))
))))
(assert (forall ((_module.List$T@@3 T@U) (d@@15 T@U) ) (!  (=> ($Is DatatypeTypeType d@@15 (Tclass._module.List _module.List$T@@3)) (or (_module.List.Nil_q d@@15) (_module.List.Cons_q d@@15)))
 :pattern ( (_module.List.Cons_q d@@15) ($Is DatatypeTypeType d@@15 (Tclass._module.List _module.List$T@@3)))
 :pattern ( (_module.List.Nil_q d@@15) ($Is DatatypeTypeType d@@15 (Tclass._module.List _module.List$T@@3)))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($ly@@2 T@U) (|a#0@@0| T@U) ) (!  (=> (or (|_module.__default.comp#canCall| |a#0@@0|) (and (< 2 $FunctionContextHeight) ($Is DatatypeTypeType |a#0@@0| Tclass._module.aexp))) (and (=> (not (_module.aexp.N_q |a#0@@0|)) (=> (not (_module.aexp.V_q |a#0@@0|)) (let ((|a1#1| (_module.aexp._h2 |a#0@@0|)))
(let ((|a0#1| (_module.aexp._h1 |a#0@@0|)))
 (and (and (and (|_module.__default.comp#canCall| |a0#1|) (|_module.__default.comp#canCall| |a1#1|)) (|_module.__default.append#canCall| Tclass._module.instr (_module.__default.comp $ly@@2 |a0#1|) (_module.__default.comp $ly@@2 |a1#1|))) (|_module.__default.append#canCall| Tclass._module.instr (_module.__default.append Tclass._module.instr ($LS $LZ) (_module.__default.comp $ly@@2 |a0#1|) (_module.__default.comp $ly@@2 |a1#1|)) (Lit DatatypeTypeType (|#_module.List.Cons| ($Box DatatypeTypeType (Lit DatatypeTypeType |#_module.instr.ADD|)) (Lit DatatypeTypeType |#_module.List.Nil|))))))))) (= (_module.__default.comp ($LS $ly@@2) |a#0@@0|) (ite (_module.aexp.N_q |a#0@@0|) (let ((|n#0| (_module.aexp.n |a#0@@0|)))
(|#_module.List.Cons| ($Box DatatypeTypeType (|#_module.instr.LOADI| |n#0|)) (Lit DatatypeTypeType |#_module.List.Nil|))) (ite (_module.aexp.V_q |a#0@@0|) (let ((|x#0@@0| (_module.aexp._h0 |a#0@@0|)))
(|#_module.List.Cons| ($Box DatatypeTypeType (|#_module.instr.LOAD| |x#0@@0|)) (Lit DatatypeTypeType |#_module.List.Nil|))) (let ((|a1#0| (_module.aexp._h2 |a#0@@0|)))
(let ((|a0#0| (_module.aexp._h1 |a#0@@0|)))
(_module.__default.append Tclass._module.instr ($LS $LZ) (_module.__default.append Tclass._module.instr ($LS $LZ) (_module.__default.comp $ly@@2 |a0#0|) (_module.__default.comp $ly@@2 |a1#0|)) (Lit DatatypeTypeType (|#_module.List.Cons| ($Box DatatypeTypeType (Lit DatatypeTypeType |#_module.instr.ADD|)) (Lit DatatypeTypeType |#_module.List.Nil|)))))))))))
 :pattern ( (_module.__default.comp ($LS $ly@@2) |a#0@@0|))
))))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 TInt) (and (= ($Box intType ($Unbox intType bx@@1)) bx@@1) ($Is intType ($Unbox intType bx@@1) TInt)))
 :pattern ( ($IsBox bx@@1 TInt))
)))
(assert (= (Ctor charType) 6))
(assert (forall ((bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 TChar) (and (= ($Box charType ($Unbox charType bx@@2)) bx@@2) ($Is charType ($Unbox charType bx@@2) TChar)))
 :pattern ( ($IsBox bx@@2 TChar))
)))
(assert (forall ((v@@0 T@U) (t@@0 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@0) t@@0) ($Is T@@2 v@@0 t@@0))
 :pattern ( ($IsBox ($Box T@@2 v@@0) t@@0))
)))
(assert (forall ((s T@U) ) (! (<= 0 (|Seq#Length| s))
 :pattern ( (|Seq#Length| s))
)))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| T@U) ) (! (= (DatatypeCtorId (|#_module.List.Cons| |a#4#0#0| |a#4#1#0|)) |##_module.List.Cons|)
 :pattern ( (|#_module.List.Cons| |a#4#0#0| |a#4#1#0|))
)))
(assert (forall ((|a#8#0#0| T@U) (|a#8#1#0| T@U) ) (! (= (_module.List.head (|#_module.List.Cons| |a#8#0#0| |a#8#1#0|)) |a#8#0#0|)
 :pattern ( (|#_module.List.Cons| |a#8#0#0| |a#8#1#0|))
)))
(assert (forall ((|a#10#0#0| T@U) (|a#10#1#0| T@U) ) (! (= (_module.List.tail (|#_module.List.Cons| |a#10#0#0| |a#10#1#0|)) |a#10#1#0|)
 :pattern ( (|#_module.List.Cons| |a#10#0#0| |a#10#1#0|))
)))
(assert (forall ((|a#24#0#0| T@U) (|a#24#1#0| T@U) ) (! (= (DatatypeCtorId (|#_module.aexp.Plus| |a#24#0#0| |a#24#1#0|)) |##_module.aexp.Plus|)
 :pattern ( (|#_module.aexp.Plus| |a#24#0#0| |a#24#1#0|))
)))
(assert (forall ((|a#28#0#0| T@U) (|a#28#1#0| T@U) ) (! (= (_module.aexp._h1 (|#_module.aexp.Plus| |a#28#0#0| |a#28#1#0|)) |a#28#0#0|)
 :pattern ( (|#_module.aexp.Plus| |a#28#0#0| |a#28#1#0|))
)))
(assert (forall ((|a#30#0#0| T@U) (|a#30#1#0| T@U) ) (! (= (_module.aexp._h2 (|#_module.aexp.Plus| |a#30#0#0| |a#30#1#0|)) |a#30#1#0|)
 :pattern ( (|#_module.aexp.Plus| |a#30#0#0| |a#30#1#0|))
)))
(assert (forall ((v@@1 T@U) (t0 T@U) (h@@0 T@U) ) (! (= ($IsAlloc SeqType v@@1 (TSeq t0) h@@0) (forall ((i@@1 Int) ) (!  (=> (and (<= 0 i@@1) (< i@@1 (|Seq#Length| v@@1))) ($IsAllocBox (|Seq#Index| v@@1 i@@1) t0 h@@0))
 :pattern ( (|Seq#Index| v@@1 i@@1))
)))
 :pattern ( ($IsAlloc SeqType v@@1 (TSeq t0) h@@0))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module._default.append$_T0@@1 T@U) ($ly@@3 T@U) (|xs#0@@1| T@U) (|ys#0@@1| T@U) ) (!  (=> (or (|_module.__default.append#canCall| _module._default.append$_T0@@1 |xs#0@@1| |ys#0@@1|) (and (< 1 $FunctionContextHeight) (and ($Is DatatypeTypeType |xs#0@@1| (Tclass._module.List _module._default.append$_T0@@1)) ($Is DatatypeTypeType |ys#0@@1| (Tclass._module.List _module._default.append$_T0@@1))))) ($Is DatatypeTypeType (_module.__default.append _module._default.append$_T0@@1 $ly@@3 |xs#0@@1| |ys#0@@1|) (Tclass._module.List _module._default.append$_T0@@1)))
 :pattern ( (_module.__default.append _module._default.append$_T0@@1 $ly@@3 |xs#0@@1| |ys#0@@1|))
))))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($ly@@4 T@U) (|a#0@@1| T@U) ) (!  (=> (or (|_module.__default.comp#canCall| |a#0@@1|) (and (< 2 $FunctionContextHeight) ($Is DatatypeTypeType |a#0@@1| Tclass._module.aexp))) ($Is DatatypeTypeType (_module.__default.comp $ly@@4 |a#0@@1|) (Tclass._module.List Tclass._module.instr)))
 :pattern ( (_module.__default.comp $ly@@4 |a#0@@1|))
))))
(assert (forall ((t@@1 T@U) ) (! (= (Inv0_TSeq (TSeq t@@1)) t@@1)
 :pattern ( (TSeq t@@1))
)))
(assert (forall ((t@@2 T@U) ) (! (= (Tag (TSeq t@@2)) TagSeq)
 :pattern ( (TSeq t@@2))
)))
(assert (forall ((_module.List$T@@4 T@U) ) (! (= (Tclass._module.List_0 (Tclass._module.List _module.List$T@@4)) _module.List$T@@4)
 :pattern ( (Tclass._module.List _module.List$T@@4))
)))
(assert (forall ((|a#12#0#0| Int) ) (! (= (DatatypeCtorId (|#_module.aexp.N| |a#12#0#0|)) |##_module.aexp.N|)
 :pattern ( (|#_module.aexp.N| |a#12#0#0|))
)))
(assert (forall ((|a#16#0#0| Int) ) (! (= (_module.aexp.n (|#_module.aexp.N| |a#16#0#0|)) |a#16#0#0|)
 :pattern ( (|#_module.aexp.N| |a#16#0#0|))
)))
(assert (forall ((|a#17#0#0| T@U) ) (! (= (DatatypeCtorId (|#_module.aexp.V| |a#17#0#0|)) |##_module.aexp.V|)
 :pattern ( (|#_module.aexp.V| |a#17#0#0|))
)))
(assert (forall ((|a#21#0#0| T@U) ) (! (= (_module.aexp._h0 (|#_module.aexp.V| |a#21#0#0|)) |a#21#0#0|)
 :pattern ( (|#_module.aexp.V| |a#21#0#0|))
)))
(assert (forall ((|a#59#0#0| Int) ) (! (= (DatatypeCtorId (|#_module.instr.LOADI| |a#59#0#0|)) |##_module.instr.LOADI|)
 :pattern ( (|#_module.instr.LOADI| |a#59#0#0|))
)))
(assert (forall ((|a#63#0#0| Int) ) (! (= (_module.instr._h12 (|#_module.instr.LOADI| |a#63#0#0|)) |a#63#0#0|)
 :pattern ( (|#_module.instr.LOADI| |a#63#0#0|))
)))
(assert (forall ((|a#64#0#0| T@U) ) (! (= (DatatypeCtorId (|#_module.instr.LOAD| |a#64#0#0|)) |##_module.instr.LOAD|)
 :pattern ( (|#_module.instr.LOAD| |a#64#0#0|))
)))
(assert (forall ((|a#68#0#0| T@U) ) (! (= (_module.instr._h13 (|#_module.instr.LOAD| |a#68#0#0|)) |a#68#0#0|)
 :pattern ( (|#_module.instr.LOAD| |a#68#0#0|))
)))
(assert (forall ((x@@5 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@5)) x@@5)
 :pattern ( ($Box T@@3 x@@5))
)))
(assert (forall ((|a#9#0#0| T@U) (|a#9#1#0| T@U) ) (! (< (BoxRank |a#9#0#0|) (DtRank (|#_module.List.Cons| |a#9#0#0| |a#9#1#0|)))
 :pattern ( (|#_module.List.Cons| |a#9#0#0| |a#9#1#0|))
)))
(assert (forall ((|a#11#0#0| T@U) (|a#11#1#0| T@U) ) (! (< (DtRank |a#11#1#0|) (DtRank (|#_module.List.Cons| |a#11#0#0| |a#11#1#0|)))
 :pattern ( (|#_module.List.Cons| |a#11#0#0| |a#11#1#0|))
)))
(assert (forall ((|a#29#0#0| T@U) (|a#29#1#0| T@U) ) (! (< (DtRank |a#29#0#0|) (DtRank (|#_module.aexp.Plus| |a#29#0#0| |a#29#1#0|)))
 :pattern ( (|#_module.aexp.Plus| |a#29#0#0| |a#29#1#0|))
)))
(assert (forall ((|a#31#0#0| T@U) (|a#31#1#0| T@U) ) (! (< (DtRank |a#31#1#0|) (DtRank (|#_module.aexp.Plus| |a#31#0#0| |a#31#1#0|)))
 :pattern ( (|#_module.aexp.Plus| |a#31#0#0| |a#31#1#0|))
)))
(assert (forall (($ly@@5 T@U) (|a#0@@2| T@U) ) (! (= (_module.__default.comp ($LS $ly@@5) |a#0@@2|) (_module.__default.comp $ly@@5 |a#0@@2|))
 :pattern ( (_module.__default.comp ($LS $ly@@5) |a#0@@2|))
)))
(assert (forall ((|a#14#0#0| Int) ) (! (= ($Is DatatypeTypeType (|#_module.aexp.N| |a#14#0#0|) Tclass._module.aexp) ($Is intType (int_2_U |a#14#0#0|) TInt))
 :pattern ( ($Is DatatypeTypeType (|#_module.aexp.N| |a#14#0#0|) Tclass._module.aexp))
)))
(assert (forall ((|a#61#0#0| Int) ) (! (= ($Is DatatypeTypeType (|#_module.instr.LOADI| |a#61#0#0|) Tclass._module.instr) ($Is intType (int_2_U |a#61#0#0|) TInt))
 :pattern ( ($Is DatatypeTypeType (|#_module.instr.LOADI| |a#61#0#0|) Tclass._module.instr))
)))
(assert (forall ((|a#23#0#0| T@U) ) (! (< (|Seq#Rank| |a#23#0#0|) (DtRank (|#_module.aexp.V| |a#23#0#0|)))
 :pattern ( (|#_module.aexp.V| |a#23#0#0|))
)))
(assert (forall ((|a#70#0#0| T@U) ) (! (< (|Seq#Rank| |a#70#0#0|) (DtRank (|#_module.instr.LOAD| |a#70#0#0|)))
 :pattern ( (|#_module.instr.LOAD| |a#70#0#0|))
)))
(assert (forall ((d@@16 T@U) (_module.List$T@@5 T@U) ($h@@0 T@U) ) (!  (=> (and ($IsGoodHeap $h@@0) (and (_module.List.Cons_q d@@16) ($IsAlloc DatatypeTypeType d@@16 (Tclass._module.List _module.List$T@@5) $h@@0))) ($IsAllocBox (_module.List.head d@@16) _module.List$T@@5 $h@@0))
 :pattern ( ($IsAllocBox (_module.List.head d@@16) _module.List$T@@5 $h@@0))
)))
(assert  (and (and (and (and (and (and (and (and (forall ((t0@@0 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0@@0 t1 t2 (MapType0Store t0@@0 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 7)) (= (Ctor FieldType) 8)) (forall ((t0@@1 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@1 t1@@0 (MapType1Store t0@@1 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :weight 0
))) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 9))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($Heap T@U) (_module._default.append$_T0@@2 T@U) ($ly@@6 T@U) (|xs#0@@2| T@U) (|ys#0@@2| T@U) ) (!  (=> (and (or (|_module.__default.append#canCall| _module._default.append$_T0@@2 |xs#0@@2| |ys#0@@2|) (and (< 1 $FunctionContextHeight) (and (and ($Is DatatypeTypeType |xs#0@@2| (Tclass._module.List _module._default.append$_T0@@2)) ($IsAlloc DatatypeTypeType |xs#0@@2| (Tclass._module.List _module._default.append$_T0@@2) $Heap)) (and ($Is DatatypeTypeType |ys#0@@2| (Tclass._module.List _module._default.append$_T0@@2)) ($IsAlloc DatatypeTypeType |ys#0@@2| (Tclass._module.List _module._default.append$_T0@@2) $Heap))))) ($IsGoodHeap $Heap)) ($IsAlloc DatatypeTypeType (_module.__default.append _module._default.append$_T0@@2 $ly@@6 |xs#0@@2| |ys#0@@2|) (Tclass._module.List _module._default.append$_T0@@2) $Heap))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.__default.append _module._default.append$_T0@@2 $ly@@6 |xs#0@@2| |ys#0@@2|) (Tclass._module.List _module._default.append$_T0@@2) $Heap))
))))
(assert (forall ((d@@17 T@U) ($h@@1 T@U) ) (!  (=> (and ($IsGoodHeap $h@@1) (and (_module.aexp.N_q d@@17) ($IsAlloc DatatypeTypeType d@@17 Tclass._module.aexp $h@@1))) ($IsAlloc intType (int_2_U (_module.aexp.n d@@17)) TInt $h@@1))
 :pattern ( ($IsAlloc intType (int_2_U (_module.aexp.n d@@17)) TInt $h@@1))
)))
(assert (forall ((d@@18 T@U) ($h@@2 T@U) ) (!  (=> (and ($IsGoodHeap $h@@2) (and (_module.instr.LOADI_q d@@18) ($IsAlloc DatatypeTypeType d@@18 Tclass._module.instr $h@@2))) ($IsAlloc intType (int_2_U (_module.instr._h12 d@@18)) TInt $h@@2))
 :pattern ( ($IsAlloc intType (int_2_U (_module.instr._h12 d@@18)) TInt $h@@2))
)))
(assert (forall ((d@@19 T@U) ) (!  (=> ($Is DatatypeTypeType d@@19 Tclass._module.aexp) (or (or (_module.aexp.N_q d@@19) (_module.aexp.V_q d@@19)) (_module.aexp.Plus_q d@@19)))
 :pattern ( (_module.aexp.Plus_q d@@19) ($Is DatatypeTypeType d@@19 Tclass._module.aexp))
 :pattern ( (_module.aexp.V_q d@@19) ($Is DatatypeTypeType d@@19 Tclass._module.aexp))
 :pattern ( (_module.aexp.N_q d@@19) ($Is DatatypeTypeType d@@19 Tclass._module.aexp))
)))
(assert (forall ((d@@20 T@U) ) (!  (=> ($Is DatatypeTypeType d@@20 Tclass._module.instr) (or (or (_module.instr.LOADI_q d@@20) (_module.instr.LOAD_q d@@20)) (_module.instr.ADD_q d@@20)))
 :pattern ( (_module.instr.ADD_q d@@20) ($Is DatatypeTypeType d@@20 Tclass._module.instr))
 :pattern ( (_module.instr.LOAD_q d@@20) ($Is DatatypeTypeType d@@20 Tclass._module.instr))
 :pattern ( (_module.instr.LOADI_q d@@20) ($Is DatatypeTypeType d@@20 Tclass._module.instr))
)))
(assert (forall ((d@@21 T@U) ) (! (= (BoxRank ($Box DatatypeTypeType d@@21)) (DtRank d@@21))
 :pattern ( (BoxRank ($Box DatatypeTypeType d@@21)))
)))
(assert (forall ((_module._default.append$_T0@@3 T@U) ($ly@@7 T@U) (|xs#0@@3| T@U) (|ys#0@@3| T@U) ) (! (= (_module.__default.append _module._default.append$_T0@@3 ($LS $ly@@7) |xs#0@@3| |ys#0@@3|) (_module.__default.append _module._default.append$_T0@@3 $ly@@7 |xs#0@@3| |ys#0@@3|))
 :pattern ( (_module.__default.append _module._default.append$_T0@@3 ($LS $ly@@7) |xs#0@@3| |ys#0@@3|))
)))
(assert (forall ((bx@@3 T@U) (t@@3 T@U) ) (!  (=> ($IsBox bx@@3 (TSeq t@@3)) (and (= ($Box SeqType ($Unbox SeqType bx@@3)) bx@@3) ($Is SeqType ($Unbox SeqType bx@@3) (TSeq t@@3))))
 :pattern ( ($IsBox bx@@3 (TSeq t@@3)))
)))
(assert (forall ((_module.List$T@@6 T@U) (bx@@4 T@U) ) (!  (=> ($IsBox bx@@4 (Tclass._module.List _module.List$T@@6)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@4)) bx@@4) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@4) (Tclass._module.List _module.List$T@@6))))
 :pattern ( ($IsBox bx@@4 (Tclass._module.List _module.List$T@@6)))
)))
(assert (forall ((d@@22 T@U) (_module.List$T@@7 T@U) ($h@@3 T@U) ) (!  (=> (and ($IsGoodHeap $h@@3) (and (_module.List.Cons_q d@@22) ($IsAlloc DatatypeTypeType d@@22 (Tclass._module.List _module.List$T@@7) $h@@3))) ($IsAlloc DatatypeTypeType (_module.List.tail d@@22) (Tclass._module.List _module.List$T@@7) $h@@3))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.List.tail d@@22) (Tclass._module.List _module.List$T@@7) $h@@3))
)))
(assert (forall ((d@@23 T@U) ($h@@4 T@U) ) (!  (=> (and ($IsGoodHeap $h@@4) ($Is DatatypeTypeType d@@23 Tclass._module.aexp)) ($IsAlloc DatatypeTypeType d@@23 Tclass._module.aexp $h@@4))
 :pattern ( ($IsAlloc DatatypeTypeType d@@23 Tclass._module.aexp $h@@4))
)))
(assert (forall ((d@@24 T@U) ($h@@5 T@U) ) (!  (=> (and ($IsGoodHeap $h@@5) ($Is DatatypeTypeType d@@24 Tclass._module.instr)) ($IsAlloc DatatypeTypeType d@@24 Tclass._module.instr $h@@5))
 :pattern ( ($IsAlloc DatatypeTypeType d@@24 Tclass._module.instr $h@@5))
)))
(assert (= (Tag Tclass._module.aexp) Tagclass._module.aexp))
(assert (= (TagFamily Tclass._module.aexp) tytagFamily$aexp))
(assert (= (Tag Tclass._module.instr) Tagclass._module.instr))
(assert (= (TagFamily Tclass._module.instr) tytagFamily$instr))
(assert (= |#_module.List.Nil| (Lit DatatypeTypeType |#_module.List.Nil|)))
(assert (= |#_module.instr.ADD| (Lit DatatypeTypeType |#_module.instr.ADD|)))
(assert (forall ((|a#19#0#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.aexp.V| |a#19#0#0|) Tclass._module.aexp) ($Is SeqType |a#19#0#0| (TSeq TChar)))
 :pattern ( ($Is DatatypeTypeType (|#_module.aexp.V| |a#19#0#0|) Tclass._module.aexp))
)))
(assert (forall ((|a#66#0#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.instr.LOAD| |a#66#0#0|) Tclass._module.instr) ($Is SeqType |a#66#0#0| (TSeq TChar)))
 :pattern ( ($Is DatatypeTypeType (|#_module.instr.LOAD| |a#66#0#0|) Tclass._module.instr))
)))
(assert (forall ((d@@25 T@U) ($h@@6 T@U) ) (!  (=> (and ($IsGoodHeap $h@@6) (and (_module.aexp.V_q d@@25) ($IsAlloc DatatypeTypeType d@@25 Tclass._module.aexp $h@@6))) ($IsAlloc SeqType (_module.aexp._h0 d@@25) (TSeq TChar) $h@@6))
 :pattern ( ($IsAlloc SeqType (_module.aexp._h0 d@@25) (TSeq TChar) $h@@6))
)))
(assert (forall ((d@@26 T@U) ($h@@7 T@U) ) (!  (=> (and ($IsGoodHeap $h@@7) (and (_module.instr.LOAD_q d@@26) ($IsAlloc DatatypeTypeType d@@26 Tclass._module.instr $h@@7))) ($IsAlloc SeqType (_module.instr._h13 d@@26) (TSeq TChar) $h@@7))
 :pattern ( ($IsAlloc SeqType (_module.instr._h13 d@@26) (TSeq TChar) $h@@7))
)))
(assert (forall ((d@@27 T@U) ($h@@8 T@U) ) (!  (=> (and ($IsGoodHeap $h@@8) (and (_module.aexp.Plus_q d@@27) ($IsAlloc DatatypeTypeType d@@27 Tclass._module.aexp $h@@8))) ($IsAlloc DatatypeTypeType (_module.aexp._h1 d@@27) Tclass._module.aexp $h@@8))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.aexp._h1 d@@27) Tclass._module.aexp $h@@8))
)))
(assert (forall ((d@@28 T@U) ($h@@9 T@U) ) (!  (=> (and ($IsGoodHeap $h@@9) (and (_module.aexp.Plus_q d@@28) ($IsAlloc DatatypeTypeType d@@28 Tclass._module.aexp $h@@9))) ($IsAlloc DatatypeTypeType (_module.aexp._h2 d@@28) Tclass._module.aexp $h@@9))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.aexp._h2 d@@28) Tclass._module.aexp $h@@9))
)))
(assert (forall ((|a#7#0#0| T@U) (|a#7#1#0| T@U) ) (! (= (|#_module.List.Cons| (Lit BoxType |a#7#0#0|) (Lit DatatypeTypeType |a#7#1#0|)) (Lit DatatypeTypeType (|#_module.List.Cons| |a#7#0#0| |a#7#1#0|)))
 :pattern ( (|#_module.List.Cons| (Lit BoxType |a#7#0#0|) (Lit DatatypeTypeType |a#7#1#0|)))
)))
(assert (forall ((|a#27#0#0| T@U) (|a#27#1#0| T@U) ) (! (= (|#_module.aexp.Plus| (Lit DatatypeTypeType |a#27#0#0|) (Lit DatatypeTypeType |a#27#1#0|)) (Lit DatatypeTypeType (|#_module.aexp.Plus| |a#27#0#0| |a#27#1#0|)))
 :pattern ( (|#_module.aexp.Plus| (Lit DatatypeTypeType |a#27#0#0|) (Lit DatatypeTypeType |a#27#1#0|)))
)))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((|a#15#0#0| Int) ) (! (= (|#_module.aexp.N| (LitInt |a#15#0#0|)) (Lit DatatypeTypeType (|#_module.aexp.N| |a#15#0#0|)))
 :pattern ( (|#_module.aexp.N| (LitInt |a#15#0#0|)))
)))
(assert (forall ((|a#20#0#0| T@U) ) (! (= (|#_module.aexp.V| (Lit SeqType |a#20#0#0|)) (Lit DatatypeTypeType (|#_module.aexp.V| |a#20#0#0|)))
 :pattern ( (|#_module.aexp.V| (Lit SeqType |a#20#0#0|)))
)))
(assert (forall ((|a#62#0#0| Int) ) (! (= (|#_module.instr.LOADI| (LitInt |a#62#0#0|)) (Lit DatatypeTypeType (|#_module.instr.LOADI| |a#62#0#0|)))
 :pattern ( (|#_module.instr.LOADI| (LitInt |a#62#0#0|)))
)))
(assert (forall ((|a#67#0#0| T@U) ) (! (= (|#_module.instr.LOAD| (Lit SeqType |a#67#0#0|)) (Lit DatatypeTypeType (|#_module.instr.LOAD| |a#67#0#0|)))
 :pattern ( (|#_module.instr.LOAD| (Lit SeqType |a#67#0#0|)))
)))
(assert (forall ((x@@7 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@7)) (Lit BoxType ($Box T@@4 x@@7)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@7)))
)))
(assert (forall ((s@@0 T@U) ) (!  (=> (= (|Seq#Length| s@@0) 0) (= s@@0 |Seq#Empty|))
 :pattern ( (|Seq#Length| s@@0))
)))
(assert (forall ((h@@1 T@U) (v@@2 T@U) ) (! ($IsAlloc intType v@@2 TInt h@@1)
 :pattern ( ($IsAlloc intType v@@2 TInt h@@1))
)))
(assert (forall ((h@@2 T@U) (v@@3 T@U) ) (! ($IsAlloc charType v@@3 TChar h@@2)
 :pattern ( ($IsAlloc charType v@@3 TChar h@@2))
)))
(assert (forall ((_module.List$T@@8 T@U) (|a#6#0#0@@0| T@U) (|a#6#1#0@@0| T@U) ($h@@10 T@U) ) (!  (=> ($IsGoodHeap $h@@10) (= ($IsAlloc DatatypeTypeType (|#_module.List.Cons| |a#6#0#0@@0| |a#6#1#0@@0|) (Tclass._module.List _module.List$T@@8) $h@@10)  (and ($IsAllocBox |a#6#0#0@@0| _module.List$T@@8 $h@@10) ($IsAlloc DatatypeTypeType |a#6#1#0@@0| (Tclass._module.List _module.List$T@@8) $h@@10))))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_module.List.Cons| |a#6#0#0@@0| |a#6#1#0@@0|) (Tclass._module.List _module.List$T@@8) $h@@10))
)))
(assert (forall ((v@@4 T@U) (t0@@2 T@U) ) (! (= ($Is SeqType v@@4 (TSeq t0@@2)) (forall ((i@@2 Int) ) (!  (=> (and (<= 0 i@@2) (< i@@2 (|Seq#Length| v@@4))) ($IsBox (|Seq#Index| v@@4 i@@2) t0@@2))
 :pattern ( (|Seq#Index| v@@4 i@@2))
)))
 :pattern ( ($Is SeqType v@@4 (TSeq t0@@2)))
)))
(assert (forall ((s@@1 T@U) (i@@3 Int) ) (!  (=> (and (<= 0 i@@3) (< i@@3 (|Seq#Length| s@@1))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@1 i@@3))) (|Seq#Rank| s@@1)))
 :pattern ( (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@1 i@@3))))
)))
(assert (forall ((v@@5 T@U) ) (! ($Is intType v@@5 TInt)
 :pattern ( ($Is intType v@@5 TInt))
)))
(assert (forall ((v@@6 T@U) ) (! ($Is charType v@@6 TChar)
 :pattern ( ($Is charType v@@6 TChar))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |a#0@@3| () T@U)
(declare-fun |_mcc#2#0| () T@U)
(declare-fun |_mcc#3#0| () T@U)
(declare-fun |let#0#0#0| () T@U)
(declare-fun |a1#Z#0@0| () T@U)
(declare-fun |let#1#0#0| () T@U)
(declare-fun |a0#Z#0@0| () T@U)
(declare-fun $Heap@@0 () T@U)
(declare-fun |##xs#1@0| () T@U)
(declare-fun |_mcc#1#0| () T@U)
(declare-fun |_mcc#0#0| () Int)
(declare-fun $_ReadsFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 11) (let ((anon12_Else_correct true))
(let ((anon12_Then_correct  (=> (and (= |a#0@@3| (|#_module.aexp.Plus| |_mcc#2#0| |_mcc#3#0|)) ($Is DatatypeTypeType |_mcc#2#0| Tclass._module.aexp)) (=> (and (and (and ($Is DatatypeTypeType |_mcc#3#0| Tclass._module.aexp) (= |let#0#0#0| |_mcc#3#0|)) (and ($Is DatatypeTypeType |let#0#0#0| Tclass._module.aexp) (= |a1#Z#0@0| |let#0#0#0|))) (and (and (= |let#1#0#0| |_mcc#2#0|) ($Is DatatypeTypeType |let#1#0#0| Tclass._module.aexp)) (and (= |a0#Z#0@0| |let#1#0#0|) ($IsAlloc DatatypeTypeType |a0#Z#0@0| Tclass._module.aexp $Heap@@0)))) (and (=> (= (ControlFlow 0 5) (- 0 6)) (< (DtRank |a0#Z#0@0|) (DtRank |a#0@@3|))) (=> (< (DtRank |a0#Z#0@0|) (DtRank |a#0@@3|)) (=> (|_module.__default.comp#canCall| |a0#Z#0@0|) (=> (and (and (= |##xs#1@0| (_module.__default.comp ($LS $LZ) |a0#Z#0@0|)) ($IsAlloc DatatypeTypeType |##xs#1@0| (Tclass._module.List Tclass._module.instr) $Heap@@0)) (and ($IsAlloc DatatypeTypeType |a1#Z#0@0| Tclass._module.aexp $Heap@@0) (= (ControlFlow 0 5) (- 0 4)))) (< (DtRank |a1#Z#0@0|) (DtRank |a#0@@3|))))))))))
(let ((anon11_Else_correct  (=> (or (not (= |a#0@@3| (|#_module.aexp.V| |_mcc#1#0|))) (not true)) (and (=> (= (ControlFlow 0 8) 5) anon12_Then_correct) (=> (= (ControlFlow 0 8) 7) anon12_Else_correct)))))
(let ((anon11_Then_correct true))
(let ((anon10_Else_correct  (=> (or (not (= |a#0@@3| (|#_module.aexp.N| |_mcc#0#0|))) (not true)) (and (=> (= (ControlFlow 0 9) 3) anon11_Then_correct) (=> (= (ControlFlow 0 9) 8) anon11_Else_correct)))))
(let ((anon10_Then_correct true))
(let ((anon9_Then_correct true))
(let ((anon0_correct  (=> (= $_ReadsFrame@0 (|lambda#0| null $Heap@@0 alloc false)) (and (and (=> (= (ControlFlow 0 10) 1) anon9_Then_correct) (=> (= (ControlFlow 0 10) 2) anon10_Then_correct)) (=> (= (ControlFlow 0 10) 9) anon10_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (and ($IsGoodHeap $Heap@@0) ($IsHeapAnchor $Heap@@0)) ($Is DatatypeTypeType |a#0@@3| Tclass._module.aexp)) (and (= 2 $FunctionContextHeight) (= (ControlFlow 0 11) 10))) anon0_correct)))
PreconditionGeneratedEntry_correct))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
