(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 (T@T) Int)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Bool) T@U)
(declare-fun $generated@@9 (T@U) Bool)
(declare-fun $generated@@10 (Int) T@U)
(declare-fun $generated@@11 (T@U) Int)
(declare-fun $generated@@12 (Real) T@U)
(declare-fun $generated@@13 (T@U) Real)
(declare-fun $generated@@20 (T@U) T@U)
(declare-fun $generated@@21 () T@U)
(declare-fun $generated@@22 (T@T T@U T@U) Bool)
(declare-fun $generated@@23 () T@T)
(declare-fun $generated@@24 () T@U)
(declare-fun $generated@@25 (T@T T@U) T@U)
(declare-fun $generated@@28 (T@U) Bool)
(declare-fun $generated@@30 (T@U) Bool)
(declare-fun $generated@@32 (T@T T@U) T@U)
(declare-fun $generated@@33 (T@T T@U) T@U)
(declare-fun $generated@@37 (T@U) T@U)
(declare-fun $generated@@40 () Int)
(declare-fun $generated@@41 (T@U T@U T@U) T@U)
(declare-fun $generated@@42 (T@U) T@U)
(declare-fun $generated@@43 (T@U T@U) Bool)
(declare-fun $generated@@44 (T@U) T@U)
(declare-fun $generated@@67 (T@U) Int)
(declare-fun $generated@@69 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@70 () T@T)
(declare-fun $generated@@71 () T@T)
(declare-fun $generated@@72 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@73 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@74 () T@T)
(declare-fun $generated@@75 (T@T T@T) T@T)
(declare-fun $generated@@76 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@77 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@78 (T@T) T@T)
(declare-fun $generated@@79 (T@T) T@T)
(declare-fun $generated@@128 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@129 (T@U) Bool)
(declare-fun $generated@@132 (T@U) T@U)
(declare-fun $generated@@133 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@4 $generated@@5) 0) (= ($generated@@4 $generated@@6) 1)) (= ($generated@@4 $generated@@7) 2)) (forall (($generated@@14 Bool) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Int) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Real) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3)
)
(assert (= ($generated@@20 $generated@@21) $generated@@1))
(assert (= ($generated@@4 $generated@@23) 3))
(assert ($generated@@22 $generated@@23 $generated@@21 $generated@@24))
(assert (forall (($generated@@26 T@U) ($generated@@27 T@T) ) (! (= ($generated@@25 $generated@@27 $generated@@26) $generated@@26)
 :pattern ( ($generated@@25 $generated@@27 $generated@@26))
)))
(assert (forall (($generated@@29 T@U) ) (! (= ($generated@@28 $generated@@29) (= ($generated@@20 $generated@@29) $generated@@1))
 :pattern ( ($generated@@28 $generated@@29))
)))
(assert (forall (($generated@@31 T@U) ) (! (= ($generated@@30 $generated@@31) (= ($generated@@20 $generated@@31) $generated@@2))
 :pattern ( ($generated@@30 $generated@@31))
)))
(assert (forall (($generated@@34 T@U) ($generated@@35 T@T) ) (! (= ($generated@@33 $generated@@35 ($generated@@32 $generated@@35 $generated@@34)) $generated@@34)
 :pattern ( ($generated@@32 $generated@@35 $generated@@34))
)))
(assert (forall (($generated@@36 T@U) ) (!  (=> ($generated@@28 $generated@@36) (= $generated@@36 $generated@@21))
 :pattern ( ($generated@@28 $generated@@36))
)))
(assert (forall (($generated@@38 T@U) ) (!  (=> ($generated@@30 $generated@@38) (exists (($generated@@39 T@U) ) (= $generated@@38 ($generated@@37 $generated@@39))))
 :pattern ( ($generated@@30 $generated@@38))
)))
(assert  (=> (<= 1 $generated@@40) (forall (($generated@@45 T@U) ($generated@@46 T@U) ($generated@@47 T@U) ) (!  (=> (or ($generated@@43 ($generated@@25 $generated@@23 $generated@@46) ($generated@@25 $generated@@23 $generated@@47)) (and (< 1 $generated@@40) (and ($generated@@22 $generated@@23 $generated@@46 $generated@@24) ($generated@@22 $generated@@23 $generated@@47 $generated@@24)))) (and (=> (not ($generated@@9 ($generated@@25 $generated@@5 ($generated@@8 ($generated@@28 ($generated@@25 $generated@@23 $generated@@46)))))) (let (($generated@@48 ($generated@@25 $generated@@23 ($generated@@44 ($generated@@25 $generated@@23 $generated@@46)))))
($generated@@43 $generated@@48 ($generated@@25 $generated@@23 $generated@@47)))) (= ($generated@@41 ($generated@@42 $generated@@45) ($generated@@25 $generated@@23 $generated@@46) ($generated@@25 $generated@@23 $generated@@47)) (ite ($generated@@28 ($generated@@25 $generated@@23 $generated@@46)) $generated@@47 (let (($generated@@49 ($generated@@25 $generated@@23 ($generated@@44 ($generated@@25 $generated@@23 $generated@@46)))))
($generated@@25 $generated@@23 ($generated@@37 ($generated@@25 $generated@@23 ($generated@@41 ($generated@@42 $generated@@45) $generated@@49 ($generated@@25 $generated@@23 $generated@@47))))))))))
 :weight 3
 :pattern ( ($generated@@41 ($generated@@42 $generated@@45) ($generated@@25 $generated@@23 $generated@@46) ($generated@@25 $generated@@23 $generated@@47)))
))))
(assert (forall (($generated@@50 T@U) ) (! (= ($generated@@22 $generated@@23 ($generated@@37 $generated@@50) $generated@@24) ($generated@@22 $generated@@23 $generated@@50 $generated@@24))
 :pattern ( ($generated@@22 $generated@@23 ($generated@@37 $generated@@50) $generated@@24))
)))
(assert  (=> (<= 1 $generated@@40) (forall (($generated@@51 T@U) ($generated@@52 T@U) ($generated@@53 T@U) ) (!  (=> (or ($generated@@43 $generated@@52 $generated@@53) (and (< 1 $generated@@40) (and ($generated@@22 $generated@@23 $generated@@52 $generated@@24) ($generated@@22 $generated@@23 $generated@@53 $generated@@24)))) ($generated@@22 $generated@@23 ($generated@@41 $generated@@51 $generated@@52 $generated@@53) $generated@@24))
 :pattern ( ($generated@@41 $generated@@51 $generated@@52 $generated@@53))
))))
(assert (forall (($generated@@54 T@U) ($generated@@55 T@U) ($generated@@56 T@U) ) (! (= ($generated@@41 ($generated@@42 $generated@@54) $generated@@55 $generated@@56) ($generated@@41 $generated@@54 $generated@@55 $generated@@56))
 :pattern ( ($generated@@41 ($generated@@42 $generated@@54) $generated@@55 $generated@@56))
)))
(assert (forall (($generated@@57 T@U) ) (!  (=> ($generated@@22 $generated@@23 $generated@@57 $generated@@24) (or ($generated@@28 $generated@@57) ($generated@@30 $generated@@57)))
 :pattern ( ($generated@@30 $generated@@57) ($generated@@22 $generated@@23 $generated@@57 $generated@@24))
 :pattern ( ($generated@@28 $generated@@57) ($generated@@22 $generated@@23 $generated@@57 $generated@@24))
)))
(assert (forall (($generated@@58 T@U) ) (! (= ($generated@@20 ($generated@@37 $generated@@58)) $generated@@2)
 :pattern ( ($generated@@37 $generated@@58))
)))
(assert (forall (($generated@@59 T@U) ) (! (= ($generated@@44 ($generated@@37 $generated@@59)) $generated@@59)
 :pattern ( ($generated@@37 $generated@@59))
)))
(assert (forall (($generated@@60 T@U) ($generated@@61 T@T) ) (! (= ($generated@@32 $generated@@61 ($generated@@33 $generated@@61 $generated@@60)) $generated@@60)
 :pattern ( ($generated@@33 $generated@@61 $generated@@60))
)))
(assert  (=> (<= 1 $generated@@40) (forall (($generated@@62 T@U) ($generated@@63 T@U) ($generated@@64 T@U) ) (!  (=> (or ($generated@@43 $generated@@63 $generated@@64) (and (< 1 $generated@@40) (and ($generated@@22 $generated@@23 $generated@@63 $generated@@24) ($generated@@22 $generated@@23 $generated@@64 $generated@@24)))) (and (=> (not ($generated@@28 $generated@@63)) (let (($generated@@65 ($generated@@44 $generated@@63)))
($generated@@43 $generated@@65 $generated@@64))) (= ($generated@@41 ($generated@@42 $generated@@62) $generated@@63 $generated@@64) (ite ($generated@@28 $generated@@63) $generated@@64 (let (($generated@@66 ($generated@@44 $generated@@63)))
($generated@@37 ($generated@@41 $generated@@62 $generated@@66 $generated@@64)))))))
 :pattern ( ($generated@@41 ($generated@@42 $generated@@62) $generated@@63 $generated@@64))
))))
(assert (forall (($generated@@68 T@U) ) (! (< ($generated@@67 $generated@@68) ($generated@@67 ($generated@@37 $generated@@68)))
 :pattern ( ($generated@@37 $generated@@68))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@80 T@T) ($generated@@81 T@T) ($generated@@82 T@T) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (! (= ($generated@@69 $generated@@80 $generated@@81 $generated@@82 ($generated@@76 $generated@@80 $generated@@81 $generated@@82 $generated@@84 $generated@@85 $generated@@86 $generated@@83) $generated@@85 $generated@@86) $generated@@83)
 :weight 0
)) (and (forall (($generated@@87 T@T) ($generated@@88 T@T) ($generated@@89 T@T) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ) (!  (or (= $generated@@92 $generated@@94) (= ($generated@@69 $generated@@87 $generated@@88 $generated@@89 ($generated@@76 $generated@@87 $generated@@88 $generated@@89 $generated@@91 $generated@@92 $generated@@93 $generated@@90) $generated@@94 $generated@@95) ($generated@@69 $generated@@87 $generated@@88 $generated@@89 $generated@@91 $generated@@94 $generated@@95)))
 :weight 0
)) (forall (($generated@@96 T@T) ($generated@@97 T@T) ($generated@@98 T@T) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ) (!  (or (= $generated@@102 $generated@@104) (= ($generated@@69 $generated@@96 $generated@@97 $generated@@98 ($generated@@76 $generated@@96 $generated@@97 $generated@@98 $generated@@100 $generated@@101 $generated@@102 $generated@@99) $generated@@103 $generated@@104) ($generated@@69 $generated@@96 $generated@@97 $generated@@98 $generated@@100 $generated@@103 $generated@@104)))
 :weight 0
)))) (= ($generated@@4 $generated@@70) 4)) (= ($generated@@4 $generated@@71) 5)) (forall (($generated@@105 T@T) ($generated@@106 T@T) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ) (! (= ($generated@@73 $generated@@105 $generated@@106 ($generated@@77 $generated@@105 $generated@@106 $generated@@108 $generated@@109 $generated@@107) $generated@@109) $generated@@107)
 :weight 0
))) (forall (($generated@@110 T@T) ($generated@@111 T@T) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (!  (or (= $generated@@114 $generated@@115) (= ($generated@@73 $generated@@110 $generated@@111 ($generated@@77 $generated@@110 $generated@@111 $generated@@113 $generated@@114 $generated@@112) $generated@@115) ($generated@@73 $generated@@110 $generated@@111 $generated@@113 $generated@@115)))
 :weight 0
))) (= ($generated@@4 $generated@@74) 6)) (forall (($generated@@116 T@T) ($generated@@117 T@T) ) (= ($generated@@4 ($generated@@75 $generated@@116 $generated@@117)) 7))) (forall (($generated@@118 T@T) ($generated@@119 T@T) ) (! (= ($generated@@78 ($generated@@75 $generated@@118 $generated@@119)) $generated@@118)
 :pattern ( ($generated@@75 $generated@@118 $generated@@119))
))) (forall (($generated@@120 T@T) ($generated@@121 T@T) ) (! (= ($generated@@79 ($generated@@75 $generated@@120 $generated@@121)) $generated@@121)
 :pattern ( ($generated@@75 $generated@@120 $generated@@121))
))))
(assert (forall (($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 Bool) ($generated@@126 T@U) ($generated@@127 T@U) ) (! (= ($generated@@9 ($generated@@69 $generated@@70 $generated@@71 $generated@@5 ($generated@@72 $generated@@122 $generated@@123 $generated@@124 $generated@@125) $generated@@126 $generated@@127))  (=> (and (or (not (= $generated@@126 $generated@@122)) (not true)) ($generated@@9 ($generated@@32 $generated@@5 ($generated@@73 $generated@@71 $generated@@74 ($generated@@73 $generated@@70 ($generated@@75 $generated@@71 $generated@@74) $generated@@123 $generated@@126) $generated@@124)))) $generated@@125))
 :pattern ( ($generated@@69 $generated@@70 $generated@@71 $generated@@5 ($generated@@72 $generated@@122 $generated@@123 $generated@@124 $generated@@125) $generated@@126 $generated@@127))
)))
(assert (forall (($generated@@130 T@U) ($generated@@131 T@U) ) (!  (=> (and ($generated@@129 $generated@@131) ($generated@@22 $generated@@23 $generated@@130 $generated@@24)) ($generated@@128 $generated@@23 $generated@@130 $generated@@24 $generated@@131))
 :pattern ( ($generated@@128 $generated@@23 $generated@@130 $generated@@24 $generated@@131))
)))
(assert (= ($generated@@132 $generated@@24) $generated@@0))
(assert (= ($generated@@133 $generated@@24) $generated@@3))
(assert (= $generated@@21 ($generated@@25 $generated@@23 $generated@@21)))
(assert (forall (($generated@@134 T@U) ($generated@@135 T@U) ) (!  (=> (and ($generated@@129 $generated@@135) (and ($generated@@30 $generated@@134) ($generated@@128 $generated@@23 $generated@@134 $generated@@24 $generated@@135))) ($generated@@128 $generated@@23 ($generated@@44 $generated@@134) $generated@@24 $generated@@135))
 :pattern ( ($generated@@128 $generated@@23 ($generated@@44 $generated@@134) $generated@@24 $generated@@135))
)))
(assert (forall (($generated@@136 T@U) ) (! (= ($generated@@37 ($generated@@25 $generated@@23 $generated@@136)) ($generated@@25 $generated@@23 ($generated@@37 $generated@@136)))
 :pattern ( ($generated@@37 ($generated@@25 $generated@@23 $generated@@136)))
)))
(assert (forall (($generated@@137 T@U) ($generated@@138 T@T) ) (! (= ($generated@@33 $generated@@138 ($generated@@25 $generated@@138 $generated@@137)) ($generated@@25 $generated@@74 ($generated@@33 $generated@@138 $generated@@137)))
 :pattern ( ($generated@@33 $generated@@138 ($generated@@25 $generated@@138 $generated@@137)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@139 () T@U)
(declare-fun $generated@@140 () T@U)
(declare-fun $generated@@141 () T@U)
(declare-fun $generated@@142 () T@U)
(declare-fun $generated@@143 () T@U)
(declare-fun $generated@@144 () T@U)
(declare-fun $generated@@145 () T@U)
(declare-fun $generated@@146 () T@U)
(declare-fun $generated@@147 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 8) (let (($generated@@148 true))
(let (($generated@@149  (=> (and (and (and (= $generated@@139 ($generated@@37 $generated@@140)) ($generated@@22 $generated@@23 $generated@@140 $generated@@24)) (and (= $generated@@141 $generated@@140) ($generated@@22 $generated@@23 $generated@@141 $generated@@24))) (and (and (= $generated@@142 $generated@@141) ($generated@@128 $generated@@23 $generated@@142 $generated@@24 $generated@@143)) (and ($generated@@128 $generated@@23 $generated@@144 $generated@@24 $generated@@143) (= (ControlFlow 0 4) (- 0 3))))) (or (< ($generated@@67 $generated@@142) ($generated@@67 $generated@@139)) (and (= ($generated@@67 $generated@@142) ($generated@@67 $generated@@139)) (< ($generated@@67 $generated@@144) ($generated@@67 $generated@@144)))))))
(let (($generated@@150  (=> (or (not (= $generated@@139 $generated@@21)) (not true)) (and (=> (= (ControlFlow 0 6) 4) $generated@@149) (=> (= (ControlFlow 0 6) 5) $generated@@148)))))
(let (($generated@@151 true))
(let (($generated@@152 true))
(let (($generated@@153  (=> (= $generated@@145 ($generated@@72 $generated@@146 $generated@@143 $generated false)) (and (and (=> (= (ControlFlow 0 7) 1) $generated@@152) (=> (= (ControlFlow 0 7) 2) $generated@@151)) (=> (= (ControlFlow 0 7) 6) $generated@@150)))))
(let (($generated@@154  (=> (and ($generated@@129 $generated@@143) ($generated@@147 $generated@@143)) (=> (and (and ($generated@@22 $generated@@23 $generated@@139 $generated@@24) ($generated@@22 $generated@@23 $generated@@144 $generated@@24)) (and (= 1 $generated@@40) (= (ControlFlow 0 8) 7))) $generated@@153))))
$generated@@154))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
