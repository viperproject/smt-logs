(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun alloc () T@U)
(declare-fun Tagclass._System.___hFunc1 () T@U)
(declare-fun Tagclass._System.___hPartialFunc1 () T@U)
(declare-fun Tagclass._System.___hTotalFunc1 () T@U)
(declare-fun Tagclass._module.List () T@U)
(declare-fun |##_module.List.Nil| () T@U)
(declare-fun |##_module.List.Cons| () T@U)
(declare-fun |tytagFamily$_#Func1| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1| () T@U)
(declare-fun |tytagFamily$_#TotalFunc1| () T@U)
(declare-fun tytagFamily$List () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.append (T@U T@U T@U T@U) T@U)
(declare-fun $LS (T@U) T@U)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun DatatypeTypeType () T@T)
(declare-fun |_module.__default.append#canCall| (T@U T@U T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun Tclass._module.List (T@U) T@U)
(declare-fun _module.List.Nil_q (T@U) Bool)
(declare-fun _module.List.tail (T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun _module.List.head (T@U) T@U)
(declare-fun |#_module.List.Cons| (T@U T@U) T@U)
(declare-fun _module.__default.Bind (T@U T@U T@U T@U T@U) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun |_module.__default.Bind#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun HandleTypeType () T@T)
(declare-fun Tclass._System.___hTotalFunc1 (T@U T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun Apply1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |#_module.List.Nil| () T@U)
(declare-fun $LZ () T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun |Set#Empty| () T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass._System.___hFunc1 (T@U T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun |_module.List#Equal| (T@U T@U) Bool)
(declare-fun _module.List.Cons_q (T@U) Bool)
(declare-fun Reads1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun $OneHeap () T@U)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun _module.__default.Return (T@U T@U) T@U)
(declare-fun |_module.__default.Return#canCall| (T@U T@U) Bool)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun |_module.__default.Return#Handle| (T@U) T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1 (T@U T@U) T@U)
(declare-fun Requires1 (T@U T@U T@U T@U T@U) Bool)
(declare-fun |$IsA#_module.List| (T@U) Bool)
(declare-fun |_module.__default.Return#requires| (T@U T@U) Bool)
(declare-fun Tclass._System.___hFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1_1 (T@U) T@U)
(declare-fun Tclass._module.List_0 (T@U) T@U)
(declare-fun BoxRank (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun refType () T@T)
(declare-fun null () T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct alloc Tagclass._System.___hFunc1 Tagclass._System.___hPartialFunc1 Tagclass._System.___hTotalFunc1 Tagclass._module.List |##_module.List.Nil| |##_module.List.Cons| |tytagFamily$_#Func1| |tytagFamily$_#PartialFunc1| |tytagFamily$_#TotalFunc1| tytagFamily$List)
)
(assert  (and (= (Ctor DatatypeTypeType) 3) (= (Ctor BoxType) 4)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module._default.append$_T0 T@U) ($ly T@U) (|xs#0| T@U) (|ys#0| T@U) ) (!  (=> (or (|_module.__default.append#canCall| _module._default.append$_T0 (Lit DatatypeTypeType |xs#0|) (Lit DatatypeTypeType |ys#0|)) (and (< 1 $FunctionContextHeight) (and ($Is DatatypeTypeType |xs#0| (Tclass._module.List _module._default.append$_T0)) ($Is DatatypeTypeType |ys#0| (Tclass._module.List _module._default.append$_T0))))) (and (=> (not (U_2_bool (Lit boolType (bool_2_U (_module.List.Nil_q (Lit DatatypeTypeType |xs#0|)))))) (let ((|xs'#3| (Lit DatatypeTypeType (_module.List.tail (Lit DatatypeTypeType |xs#0|)))))
(|_module.__default.append#canCall| _module._default.append$_T0 |xs'#3| (Lit DatatypeTypeType |ys#0|)))) (= (_module.__default.append _module._default.append$_T0 ($LS $ly) (Lit DatatypeTypeType |xs#0|) (Lit DatatypeTypeType |ys#0|)) (ite (_module.List.Nil_q (Lit DatatypeTypeType |xs#0|)) |ys#0| (let ((|xs'#2| (Lit DatatypeTypeType (_module.List.tail (Lit DatatypeTypeType |xs#0|)))))
(let ((|x#2| (Lit BoxType (_module.List.head (Lit DatatypeTypeType |xs#0|)))))
(Lit DatatypeTypeType (|#_module.List.Cons| |x#2| (Lit DatatypeTypeType (_module.__default.append _module._default.append$_T0 ($LS $ly) |xs'#2| (Lit DatatypeTypeType |ys#0|)))))))))))
 :weight 3
 :pattern ( (_module.__default.append _module._default.append$_T0 ($LS $ly) (Lit DatatypeTypeType |xs#0|) (Lit DatatypeTypeType |ys#0|)))
))))
(assert (= (Ctor HandleTypeType) 5))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((_module._default.Bind$T T@U) (_module._default.Bind$U T@U) ($ly@@0 T@U) ($Heap T@U) (|xs#0@@0| T@U) (|f#0| T@U) ) (!  (=> (or (|_module.__default.Bind#canCall| _module._default.Bind$T _module._default.Bind$U |xs#0@@0| |f#0|) (and (< 2 $FunctionContextHeight) (and (and ($IsGoodHeap $Heap) ($Is DatatypeTypeType |xs#0@@0| (Tclass._module.List _module._default.Bind$T))) ($Is HandleTypeType |f#0| (Tclass._System.___hTotalFunc1 _module._default.Bind$T (Tclass._module.List _module._default.Bind$U)))))) (and (=> (not (_module.List.Nil_q |xs#0@@0|)) (let ((|xs'#1| (_module.List.tail |xs#0@@0|)))
(let ((|x#1| (_module.List.head |xs#0@@0|)))
 (and (|_module.__default.Bind#canCall| _module._default.Bind$T _module._default.Bind$U |xs'#1| |f#0|) (|_module.__default.append#canCall| _module._default.Bind$U ($Unbox DatatypeTypeType (Apply1 _module._default.Bind$T (Tclass._module.List _module._default.Bind$U) $Heap |f#0| |x#1|)) (_module.__default.Bind _module._default.Bind$T _module._default.Bind$U $ly@@0 |xs'#1| |f#0|)))))) (= (_module.__default.Bind _module._default.Bind$T _module._default.Bind$U ($LS $ly@@0) |xs#0@@0| |f#0|) (ite (_module.List.Nil_q |xs#0@@0|) |#_module.List.Nil| (let ((|xs'#0| (_module.List.tail |xs#0@@0|)))
(let ((|x#0| (_module.List.head |xs#0@@0|)))
(_module.__default.append _module._default.Bind$U ($LS $LZ) ($Unbox DatatypeTypeType (Apply1 _module._default.Bind$T (Tclass._module.List _module._default.Bind$U) $Heap |f#0| |x#0|)) (_module.__default.Bind _module._default.Bind$T _module._default.Bind$U $ly@@0 |xs'#0| |f#0|))))))))
 :pattern ( (_module.__default.Bind _module._default.Bind$T _module._default.Bind$U ($LS $ly@@0) |xs#0@@0| |f#0|) ($IsGoodHeap $Heap))
))))
(assert (forall ((o T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o))
 :pattern ( (|Set#IsMember| |Set#Empty| o))
)))
(assert (= (DatatypeCtorId |#_module.List.Nil|) |##_module.List.Nil|))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($Heap@@0 T@U) (_module._default.Bind$T@@0 T@U) (_module._default.Bind$U@@0 T@U) ($ly@@1 T@U) (|xs#0@@1| T@U) (|f#0@@0| T@U) ) (!  (=> (and (or (|_module.__default.Bind#canCall| _module._default.Bind$T@@0 _module._default.Bind$U@@0 |xs#0@@1| |f#0@@0|) (and (< 2 $FunctionContextHeight) (and (and ($Is DatatypeTypeType |xs#0@@1| (Tclass._module.List _module._default.Bind$T@@0)) ($IsAlloc DatatypeTypeType |xs#0@@1| (Tclass._module.List _module._default.Bind$T@@0) $Heap@@0)) (and ($Is HandleTypeType |f#0@@0| (Tclass._System.___hTotalFunc1 _module._default.Bind$T@@0 (Tclass._module.List _module._default.Bind$U@@0))) ($IsAlloc HandleTypeType |f#0@@0| (Tclass._System.___hTotalFunc1 _module._default.Bind$T@@0 (Tclass._module.List _module._default.Bind$U@@0)) $Heap@@0))))) ($IsGoodHeap $Heap@@0)) ($IsAlloc DatatypeTypeType (_module.__default.Bind _module._default.Bind$T@@0 _module._default.Bind$U@@0 $ly@@1 |xs#0@@1| |f#0@@0|) (Tclass._module.List _module._default.Bind$U@@0) $Heap@@0))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.__default.Bind _module._default.Bind$T@@0 _module._default.Bind$U@@0 $ly@@1 |xs#0@@1| |f#0@@0|) (Tclass._module.List _module._default.Bind$U@@0) $Heap@@0))
))))
(assert (forall ((f T@U) (t0 T@U) (t1 T@U) (u0 T@U) (u1 T@U) ) (!  (=> (and (and ($Is HandleTypeType f (Tclass._System.___hFunc1 t0 t1)) (forall ((bx T@U) ) (!  (=> ($IsBox bx u0) ($IsBox bx t0))
 :pattern ( ($IsBox bx u0))
 :pattern ( ($IsBox bx t0))
))) (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 t1) ($IsBox bx@@0 u1))
 :pattern ( ($IsBox bx@@0 t1))
 :pattern ( ($IsBox bx@@0 u1))
))) ($Is HandleTypeType f (Tclass._System.___hFunc1 u0 u1)))
 :pattern ( ($Is HandleTypeType f (Tclass._System.___hFunc1 t0 t1)) ($Is HandleTypeType f (Tclass._System.___hFunc1 u0 u1)))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((_module._default.Bind$T@@1 T@U) (_module._default.Bind$U@@1 T@U) ($ly@@2 T@U) ($Heap@@1 T@U) (|xs#0@@2| T@U) (|f#0@@1| T@U) ) (!  (=> (or (|_module.__default.Bind#canCall| _module._default.Bind$T@@1 _module._default.Bind$U@@1 (Lit DatatypeTypeType |xs#0@@2|) (Lit HandleTypeType |f#0@@1|)) (and (< 2 $FunctionContextHeight) (and (and ($IsGoodHeap $Heap@@1) ($Is DatatypeTypeType |xs#0@@2| (Tclass._module.List _module._default.Bind$T@@1))) ($Is HandleTypeType |f#0@@1| (Tclass._System.___hTotalFunc1 _module._default.Bind$T@@1 (Tclass._module.List _module._default.Bind$U@@1)))))) (and (=> (not (U_2_bool (Lit boolType (bool_2_U (_module.List.Nil_q (Lit DatatypeTypeType |xs#0@@2|)))))) (let ((|xs'#5| (Lit DatatypeTypeType (_module.List.tail (Lit DatatypeTypeType |xs#0@@2|)))))
(let ((|x#5| (Lit BoxType (_module.List.head (Lit DatatypeTypeType |xs#0@@2|)))))
 (and (|_module.__default.Bind#canCall| _module._default.Bind$T@@1 _module._default.Bind$U@@1 |xs'#5| (Lit HandleTypeType |f#0@@1|)) (|_module.__default.append#canCall| _module._default.Bind$U@@1 ($Unbox DatatypeTypeType (Apply1 _module._default.Bind$T@@1 (Tclass._module.List _module._default.Bind$U@@1) $Heap@@1 (Lit HandleTypeType |f#0@@1|) |x#5|)) (_module.__default.Bind _module._default.Bind$T@@1 _module._default.Bind$U@@1 ($LS $ly@@2) |xs'#5| (Lit HandleTypeType |f#0@@1|))))))) (= (_module.__default.Bind _module._default.Bind$T@@1 _module._default.Bind$U@@1 ($LS $ly@@2) (Lit DatatypeTypeType |xs#0@@2|) (Lit HandleTypeType |f#0@@1|)) (ite (_module.List.Nil_q (Lit DatatypeTypeType |xs#0@@2|)) |#_module.List.Nil| (let ((|xs'#4| (Lit DatatypeTypeType (_module.List.tail (Lit DatatypeTypeType |xs#0@@2|)))))
(let ((|x#4| (Lit BoxType (_module.List.head (Lit DatatypeTypeType |xs#0@@2|)))))
(_module.__default.append _module._default.Bind$U@@1 ($LS $LZ) ($Unbox DatatypeTypeType (Apply1 _module._default.Bind$T@@1 (Tclass._module.List _module._default.Bind$U@@1) $Heap@@1 (Lit HandleTypeType |f#0@@1|) |x#4|)) (Lit DatatypeTypeType (_module.__default.Bind _module._default.Bind$T@@1 _module._default.Bind$U@@1 ($LS $ly@@2) |xs'#4| (Lit HandleTypeType |f#0@@1|))))))))))
 :weight 3
 :pattern ( (_module.__default.Bind _module._default.Bind$T@@1 _module._default.Bind$U@@1 ($LS $ly@@2) (Lit DatatypeTypeType |xs#0@@2|) (Lit HandleTypeType |f#0@@1|)) ($IsGoodHeap $Heap@@1))
))))
(assert (forall ((_module.List$T T@U) ($h T@U) ) (!  (=> ($IsGoodHeap $h) ($IsAlloc DatatypeTypeType |#_module.List.Nil| (Tclass._module.List _module.List$T) $h))
 :pattern ( ($IsAlloc DatatypeTypeType |#_module.List.Nil| (Tclass._module.List _module.List$T) $h))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((_module._default.Bind$T@@2 T@U) (_module._default.Bind$U@@2 T@U) ($ly@@3 T@U) (|xs#0@@3| T@U) (|f#0@@2| T@U) ) (!  (=> (or (|_module.__default.Bind#canCall| _module._default.Bind$T@@2 _module._default.Bind$U@@2 |xs#0@@3| |f#0@@2|) (and (< 2 $FunctionContextHeight) (and ($Is DatatypeTypeType |xs#0@@3| (Tclass._module.List _module._default.Bind$T@@2)) ($Is HandleTypeType |f#0@@2| (Tclass._System.___hTotalFunc1 _module._default.Bind$T@@2 (Tclass._module.List _module._default.Bind$U@@2)))))) ($Is DatatypeTypeType (_module.__default.Bind _module._default.Bind$T@@2 _module._default.Bind$U@@2 $ly@@3 |xs#0@@3| |f#0@@2|) (Tclass._module.List _module._default.Bind$U@@2)))
 :pattern ( (_module.__default.Bind _module._default.Bind$T@@2 _module._default.Bind$U@@2 $ly@@3 |xs#0@@3| |f#0@@2|))
))))
(assert (forall ((_module.List$T@@0 T@U) ) (! ($Is DatatypeTypeType |#_module.List.Nil| (Tclass._module.List _module.List$T@@0))
 :pattern ( ($Is DatatypeTypeType |#_module.List.Nil| (Tclass._module.List _module.List$T@@0)))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((_module._default.Bind$T@@3 T@U) (_module._default.Bind$U@@3 T@U) ($ly@@4 T@U) ($Heap@@2 T@U) (|xs#0@@4| T@U) (|f#0@@3| T@U) ) (!  (=> (or (|_module.__default.Bind#canCall| _module._default.Bind$T@@3 _module._default.Bind$U@@3 (Lit DatatypeTypeType |xs#0@@4|) |f#0@@3|) (and (< 2 $FunctionContextHeight) (and (and ($IsGoodHeap $Heap@@2) ($Is DatatypeTypeType |xs#0@@4| (Tclass._module.List _module._default.Bind$T@@3))) ($Is HandleTypeType |f#0@@3| (Tclass._System.___hTotalFunc1 _module._default.Bind$T@@3 (Tclass._module.List _module._default.Bind$U@@3)))))) (and (=> (not (U_2_bool (Lit boolType (bool_2_U (_module.List.Nil_q (Lit DatatypeTypeType |xs#0@@4|)))))) (let ((|xs'#3@@0| (Lit DatatypeTypeType (_module.List.tail (Lit DatatypeTypeType |xs#0@@4|)))))
(let ((|x#3| (Lit BoxType (_module.List.head (Lit DatatypeTypeType |xs#0@@4|)))))
 (and (|_module.__default.Bind#canCall| _module._default.Bind$T@@3 _module._default.Bind$U@@3 |xs'#3@@0| |f#0@@3|) (|_module.__default.append#canCall| _module._default.Bind$U@@3 ($Unbox DatatypeTypeType (Apply1 _module._default.Bind$T@@3 (Tclass._module.List _module._default.Bind$U@@3) $Heap@@2 |f#0@@3| |x#3|)) (_module.__default.Bind _module._default.Bind$T@@3 _module._default.Bind$U@@3 ($LS $ly@@4) |xs'#3@@0| |f#0@@3|)))))) (= (_module.__default.Bind _module._default.Bind$T@@3 _module._default.Bind$U@@3 ($LS $ly@@4) (Lit DatatypeTypeType |xs#0@@4|) |f#0@@3|) (ite (_module.List.Nil_q (Lit DatatypeTypeType |xs#0@@4|)) |#_module.List.Nil| (let ((|xs'#2@@0| (Lit DatatypeTypeType (_module.List.tail (Lit DatatypeTypeType |xs#0@@4|)))))
(let ((|x#2@@0| (Lit BoxType (_module.List.head (Lit DatatypeTypeType |xs#0@@4|)))))
(_module.__default.append _module._default.Bind$U@@3 ($LS $LZ) ($Unbox DatatypeTypeType (Apply1 _module._default.Bind$T@@3 (Tclass._module.List _module._default.Bind$U@@3) $Heap@@2 |f#0@@3| |x#2@@0|)) (_module.__default.Bind _module._default.Bind$T@@3 _module._default.Bind$U@@3 ($LS $ly@@4) |xs'#2@@0| |f#0@@3|))))))))
 :weight 3
 :pattern ( (_module.__default.Bind _module._default.Bind$T@@3 _module._default.Bind$U@@3 ($LS $ly@@4) (Lit DatatypeTypeType |xs#0@@4|) |f#0@@3|) ($IsGoodHeap $Heap@@2))
))))
(assert (forall ((a T@U) (b T@U) ) (! (= (|_module.List#Equal| a b) (= a b))
 :pattern ( (|_module.List#Equal| a b))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) ) (!  (=> (and (_module.List.Cons_q a@@0) (_module.List.Cons_q b@@0)) (= (|_module.List#Equal| a@@0 b@@0)  (and (= (_module.List.head a@@0) (_module.List.head b@@0)) (|_module.List#Equal| (_module.List.tail a@@0) (_module.List.tail b@@0)))))
 :pattern ( (|_module.List#Equal| a@@0 b@@0) (_module.List.Cons_q a@@0))
 :pattern ( (|_module.List#Equal| a@@0 b@@0) (_module.List.Cons_q b@@0))
)))
(assert (forall ((x@@2 T@U) (T T@T) ) (! (= (Lit T x@@2) x@@2)
 :pattern ( (Lit T x@@2))
)))
(assert (forall ((t0@@0 T@U) (t1@@0 T@U) (heap T@U) (f@@0 T@U) (bx0 T@U) ) (!  (=> (and ($IsGoodHeap heap) (and ($IsBox bx0 t0@@0) ($Is HandleTypeType f@@0 (Tclass._System.___hFunc1 t0@@0 t1@@0)))) (= (|Set#Equal| (Reads1 t0@@0 t1@@0 $OneHeap f@@0 bx0) |Set#Empty|) (|Set#Equal| (Reads1 t0@@0 t1@@0 heap f@@0 bx0) |Set#Empty|)))
 :pattern ( (Reads1 t0@@0 t1@@0 $OneHeap f@@0 bx0) ($IsGoodHeap heap))
 :pattern ( (Reads1 t0@@0 t1@@0 heap f@@0 bx0))
)))
(assert (forall ((_module.List$T@@1 T@U) (|a#6#0#0| T@U) (|a#6#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.List.Cons| |a#6#0#0| |a#6#1#0|) (Tclass._module.List _module.List$T@@1))  (and ($IsBox |a#6#0#0| _module.List$T@@1) ($Is DatatypeTypeType |a#6#1#0| (Tclass._module.List _module.List$T@@1))))
 :pattern ( ($Is DatatypeTypeType (|#_module.List.Cons| |a#6#0#0| |a#6#1#0|) (Tclass._module.List _module.List$T@@1)))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module._default.append$_T0@@0 T@U) ($ly@@5 T@U) (|xs#0@@5| T@U) (|ys#0@@0| T@U) ) (!  (=> (or (|_module.__default.append#canCall| _module._default.append$_T0@@0 |xs#0@@5| |ys#0@@0|) (and (< 1 $FunctionContextHeight) (and ($Is DatatypeTypeType |xs#0@@5| (Tclass._module.List _module._default.append$_T0@@0)) ($Is DatatypeTypeType |ys#0@@0| (Tclass._module.List _module._default.append$_T0@@0))))) (and (=> (not (_module.List.Nil_q |xs#0@@5|)) (let ((|xs'#1@@0| (_module.List.tail |xs#0@@5|)))
(|_module.__default.append#canCall| _module._default.append$_T0@@0 |xs'#1@@0| |ys#0@@0|))) (= (_module.__default.append _module._default.append$_T0@@0 ($LS $ly@@5) |xs#0@@5| |ys#0@@0|) (ite (_module.List.Nil_q |xs#0@@5|) |ys#0@@0| (let ((|xs'#0@@0| (_module.List.tail |xs#0@@5|)))
(let ((|x#0@@0| (_module.List.head |xs#0@@5|)))
(|#_module.List.Cons| |x#0@@0| (_module.__default.append _module._default.append$_T0@@0 $ly@@5 |xs'#0@@0| |ys#0@@0|))))))))
 :pattern ( (_module.__default.append _module._default.append$_T0@@0 ($LS $ly@@5) |xs#0@@5| |ys#0@@0|))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module._default.Return$T T@U) (|a#0| T@U) ) (!  (=> (or (|_module.__default.Return#canCall| _module._default.Return$T |a#0|) (and (< 1 $FunctionContextHeight) ($IsBox |a#0| _module._default.Return$T))) ($Is DatatypeTypeType (_module.__default.Return _module._default.Return$T |a#0|) (Tclass._module.List _module._default.Return$T)))
 :pattern ( (_module.__default.Return _module._default.Return$T |a#0|))
))))
(assert (forall ((d T@U) ) (! (= (_module.List.Nil_q d) (= (DatatypeCtorId d) |##_module.List.Nil|))
 :pattern ( (_module.List.Nil_q d))
)))
(assert (forall ((d@@0 T@U) ) (! (= (_module.List.Cons_q d@@0) (= (DatatypeCtorId d@@0) |##_module.List.Cons|))
 :pattern ( (_module.List.Cons_q d@@0))
)))
(assert (forall ((x@@3 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@3)) x@@3)
 :pattern ( ($Unbox T@@0 x@@3))
)))
(assert (forall ((d@@1 T@U) ) (!  (=> (_module.List.Cons_q d@@1) (exists ((|a#5#0#0| T@U) (|a#5#1#0| T@U) ) (= d@@1 (|#_module.List.Cons| |a#5#0#0| |a#5#1#0|))))
 :pattern ( (_module.List.Cons_q d@@1))
)))
(assert (forall ((d@@2 T@U) ) (!  (=> (_module.List.Nil_q d@@2) (= d@@2 |#_module.List.Nil|))
 :pattern ( (_module.List.Nil_q d@@2))
)))
(assert ($IsGoodHeap $OneHeap))
(assert (forall ((v T@U) (t T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v) t h) ($IsAlloc T@@1 v t h))
 :pattern ( ($IsAllocBox ($Box T@@1 v) t h))
)))
(assert (forall (($bx T@U) (_module._default.Return$T@@0 T@U) ($heap T@U) (|$fh$0x#0| T@U) ) (! (= (|Set#IsMember| (Reads1 _module._default.Return$T@@0 (Tclass._module.List _module._default.Return$T@@0) $heap (|_module.__default.Return#Handle| _module._default.Return$T@@0) |$fh$0x#0|) $bx) false)
 :pattern ( (|Set#IsMember| (Reads1 _module._default.Return$T@@0 (Tclass._module.List _module._default.Return$T@@0) $heap (|_module.__default.Return#Handle| _module._default.Return$T@@0) |$fh$0x#0|) $bx))
)))
(assert (forall ((_module.List$T@@2 T@U) ) (!  (and (= (Tag (Tclass._module.List _module.List$T@@2)) Tagclass._module.List) (= (TagFamily (Tclass._module.List _module.List$T@@2)) tytagFamily$List))
 :pattern ( (Tclass._module.List _module.List$T@@2))
)))
(assert (forall ((|#$T0| T@U) (|#$R| T@U) (|f#0@@4| T@U) ($h@@0 T@U) ) (! (= ($IsAlloc HandleTypeType |f#0@@4| (Tclass._System.___hPartialFunc1 |#$T0| |#$R|) $h@@0) ($IsAlloc HandleTypeType |f#0@@4| (Tclass._System.___hFunc1 |#$T0| |#$R|) $h@@0))
 :pattern ( ($IsAlloc HandleTypeType |f#0@@4| (Tclass._System.___hPartialFunc1 |#$T0| |#$R|) $h@@0))
)))
(assert (forall ((|#$T0@@0| T@U) (|#$R@@0| T@U) (|f#0@@5| T@U) ($h@@1 T@U) ) (! (= ($IsAlloc HandleTypeType |f#0@@5| (Tclass._System.___hTotalFunc1 |#$T0@@0| |#$R@@0|) $h@@1) ($IsAlloc HandleTypeType |f#0@@5| (Tclass._System.___hPartialFunc1 |#$T0@@0| |#$R@@0|) $h@@1))
 :pattern ( ($IsAlloc HandleTypeType |f#0@@5| (Tclass._System.___hTotalFunc1 |#$T0@@0| |#$R@@0|) $h@@1))
)))
(assert (forall ((f@@1 T@U) (t0@@1 T@U) (t1@@1 T@U) (h@@0 T@U) ) (!  (=> (and ($IsGoodHeap h@@0) ($IsAlloc HandleTypeType f@@1 (Tclass._System.___hFunc1 t0@@1 t1@@1) h@@0)) (forall ((bx0@@0 T@U) ) (!  (=> (and ($IsAllocBox bx0@@0 t0@@1 h@@0) (Requires1 t0@@1 t1@@1 h@@0 f@@1 bx0@@0)) ($IsAllocBox (Apply1 t0@@1 t1@@1 h@@0 f@@1 bx0@@0) t1@@1 h@@0))
 :pattern ( (Apply1 t0@@1 t1@@1 h@@0 f@@1 bx0@@0))
)))
 :pattern ( ($IsAlloc HandleTypeType f@@1 (Tclass._System.___hFunc1 t0@@1 t1@@1) h@@0))
)))
(assert (forall ((d@@3 T@U) ) (!  (=> (|$IsA#_module.List| d@@3) (or (_module.List.Nil_q d@@3) (_module.List.Cons_q d@@3)))
 :pattern ( (|$IsA#_module.List| d@@3))
)))
(assert (forall ((_module._default.Return$T@@1 T@U) ($heap@@0 T@U) (|$fh$0x#0@@0| T@U) ) (! (= (Requires1 _module._default.Return$T@@1 (Tclass._module.List _module._default.Return$T@@1) $heap@@0 (|_module.__default.Return#Handle| _module._default.Return$T@@1) |$fh$0x#0@@0|) (|_module.__default.Return#requires| _module._default.Return$T@@1 |$fh$0x#0@@0|))
 :pattern ( (Requires1 _module._default.Return$T@@1 (Tclass._module.List _module._default.Return$T@@1) $heap@@0 (|_module.__default.Return#Handle| _module._default.Return$T@@1) |$fh$0x#0@@0|))
)))
(assert (forall ((_module._default.Return$T@@2 T@U) (|a#0@@0| T@U) ) (!  (=> ($IsBox |a#0@@0| _module._default.Return$T@@2) (= (|_module.__default.Return#requires| _module._default.Return$T@@2 |a#0@@0|) true))
 :pattern ( (|_module.__default.Return#requires| _module._default.Return$T@@2 |a#0@@0|))
)))
(assert (forall ((_module.List$T@@3 T@U) (d@@4 T@U) ) (!  (=> ($Is DatatypeTypeType d@@4 (Tclass._module.List _module.List$T@@3)) (or (_module.List.Nil_q d@@4) (_module.List.Cons_q d@@4)))
 :pattern ( (_module.List.Cons_q d@@4) ($Is DatatypeTypeType d@@4 (Tclass._module.List _module.List$T@@3)))
 :pattern ( (_module.List.Nil_q d@@4) ($Is DatatypeTypeType d@@4 (Tclass._module.List _module.List$T@@3)))
)))
(assert (forall ((a@@1 T@U) (b@@1 T@U) ) (!  (=> (|Set#Equal| a@@1 b@@1) (= a@@1 b@@1))
 :pattern ( (|Set#Equal| a@@1 b@@1))
)))
(assert (forall ((_module._default.Return$T@@3 T@U) ($heap@@1 T@U) (|$fh$0x#0@@1| T@U) ) (! (= (_module.__default.Return _module._default.Return$T@@3 |$fh$0x#0@@1|) ($Unbox DatatypeTypeType (Apply1 _module._default.Return$T@@3 (Tclass._module.List _module._default.Return$T@@3) $heap@@1 (|_module.__default.Return#Handle| _module._default.Return$T@@3) |$fh$0x#0@@1|)))
 :pattern ( (_module.__default.Return _module._default.Return$T@@3 |$fh$0x#0@@1|) ($IsGoodHeap $heap@@1))
)))
(assert (forall ((f@@2 T@U) (t0@@2 T@U) (t1@@2 T@U) ) (! (= ($Is HandleTypeType f@@2 (Tclass._System.___hFunc1 t0@@2 t1@@2)) (forall ((h@@1 T@U) (bx0@@1 T@U) ) (!  (=> (and (and ($IsGoodHeap h@@1) ($IsBox bx0@@1 t0@@2)) (Requires1 t0@@2 t1@@2 h@@1 f@@2 bx0@@1)) ($IsBox (Apply1 t0@@2 t1@@2 h@@1 f@@2 bx0@@1) t1@@2))
 :pattern ( (Apply1 t0@@2 t1@@2 h@@1 f@@2 bx0@@1))
)))
 :pattern ( ($Is HandleTypeType f@@2 (Tclass._System.___hFunc1 t0@@2 t1@@2)))
)))
(assert (forall ((v@@0 T@U) (t@@0 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@0) t@@0) ($Is T@@2 v@@0 t@@0))
 :pattern ( ($IsBox ($Box T@@2 v@@0) t@@0))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module._default.Return$T@@4 T@U) (|a#0@@1| T@U) ) (!  (=> (or (|_module.__default.Return#canCall| _module._default.Return$T@@4 |a#0@@1|) (and (< 1 $FunctionContextHeight) ($IsBox |a#0@@1| _module._default.Return$T@@4))) (= (_module.__default.Return _module._default.Return$T@@4 |a#0@@1|) (|#_module.List.Cons| |a#0@@1| (Lit DatatypeTypeType |#_module.List.Nil|))))
 :pattern ( (_module.__default.Return _module._default.Return$T@@4 |a#0@@1|))
))))
(assert (forall ((a@@2 T@U) (b@@2 T@U) ) (!  (=> (and (_module.List.Nil_q a@@2) (_module.List.Nil_q b@@2)) (|_module.List#Equal| a@@2 b@@2))
 :pattern ( (|_module.List#Equal| a@@2 b@@2) (_module.List.Nil_q a@@2))
 :pattern ( (|_module.List#Equal| a@@2 b@@2) (_module.List.Nil_q b@@2))
)))
(assert (forall ((|#$T0@@1| T@U) (|#$R@@1| T@U) ) (! (= (Tclass._System.___hFunc1_0 (Tclass._System.___hFunc1 |#$T0@@1| |#$R@@1|)) |#$T0@@1|)
 :pattern ( (Tclass._System.___hFunc1 |#$T0@@1| |#$R@@1|))
)))
(assert (forall ((|#$T0@@2| T@U) (|#$R@@2| T@U) ) (! (= (Tclass._System.___hFunc1_1 (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@2|)) |#$R@@2|)
 :pattern ( (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@2|))
)))
(assert (forall ((|#$T0@@3| T@U) (|#$R@@3| T@U) ) (! (= (Tclass._System.___hPartialFunc1_0 (Tclass._System.___hPartialFunc1 |#$T0@@3| |#$R@@3|)) |#$T0@@3|)
 :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@3| |#$R@@3|))
)))
(assert (forall ((|#$T0@@4| T@U) (|#$R@@4| T@U) ) (! (= (Tclass._System.___hPartialFunc1_1 (Tclass._System.___hPartialFunc1 |#$T0@@4| |#$R@@4|)) |#$R@@4|)
 :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@4| |#$R@@4|))
)))
(assert (forall ((|#$T0@@5| T@U) (|#$R@@5| T@U) ) (! (= (Tclass._System.___hTotalFunc1_0 (Tclass._System.___hTotalFunc1 |#$T0@@5| |#$R@@5|)) |#$T0@@5|)
 :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@5| |#$R@@5|))
)))
(assert (forall ((|#$T0@@6| T@U) (|#$R@@6| T@U) ) (! (= (Tclass._System.___hTotalFunc1_1 (Tclass._System.___hTotalFunc1 |#$T0@@6| |#$R@@6|)) |#$R@@6|)
 :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@6| |#$R@@6|))
)))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| T@U) ) (! (= (DatatypeCtorId (|#_module.List.Cons| |a#4#0#0| |a#4#1#0|)) |##_module.List.Cons|)
 :pattern ( (|#_module.List.Cons| |a#4#0#0| |a#4#1#0|))
)))
(assert (forall ((|a#8#0#0| T@U) (|a#8#1#0| T@U) ) (! (= (_module.List.head (|#_module.List.Cons| |a#8#0#0| |a#8#1#0|)) |a#8#0#0|)
 :pattern ( (|#_module.List.Cons| |a#8#0#0| |a#8#1#0|))
)))
(assert (forall ((|a#10#0#0| T@U) (|a#10#1#0| T@U) ) (! (= (_module.List.tail (|#_module.List.Cons| |a#10#0#0| |a#10#1#0|)) |a#10#1#0|)
 :pattern ( (|#_module.List.Cons| |a#10#0#0| |a#10#1#0|))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module._default.append$_T0@@1 T@U) ($ly@@6 T@U) (|xs#0@@6| T@U) (|ys#0@@1| T@U) ) (!  (=> (or (|_module.__default.append#canCall| _module._default.append$_T0@@1 |xs#0@@6| |ys#0@@1|) (and (< 1 $FunctionContextHeight) (and ($Is DatatypeTypeType |xs#0@@6| (Tclass._module.List _module._default.append$_T0@@1)) ($Is DatatypeTypeType |ys#0@@1| (Tclass._module.List _module._default.append$_T0@@1))))) ($Is DatatypeTypeType (_module.__default.append _module._default.append$_T0@@1 $ly@@6 |xs#0@@6| |ys#0@@1|) (Tclass._module.List _module._default.append$_T0@@1)))
 :pattern ( (_module.__default.append _module._default.append$_T0@@1 $ly@@6 |xs#0@@6| |ys#0@@1|))
))))
(assert (forall ((_module.List$T@@4 T@U) ) (! (= (Tclass._module.List_0 (Tclass._module.List _module.List$T@@4)) _module.List$T@@4)
 :pattern ( (Tclass._module.List _module.List$T@@4))
)))
(assert (forall ((x@@4 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@4)) x@@4)
 :pattern ( ($Box T@@3 x@@4))
)))
(assert (forall ((|a#9#0#0| T@U) (|a#9#1#0| T@U) ) (! (< (BoxRank |a#9#0#0|) (DtRank (|#_module.List.Cons| |a#9#0#0| |a#9#1#0|)))
 :pattern ( (|#_module.List.Cons| |a#9#0#0| |a#9#1#0|))
)))
(assert (forall ((|a#11#0#0| T@U) (|a#11#1#0| T@U) ) (! (< (DtRank |a#11#1#0|) (DtRank (|#_module.List.Cons| |a#11#0#0| |a#11#1#0|)))
 :pattern ( (|#_module.List.Cons| |a#11#0#0| |a#11#1#0|))
)))
(assert (forall ((_module._default.Return$T@@5 T@U) ($heap@@2 T@U) (|$fh$0x#0@@2| T@U) ) (! (= (Apply1 _module._default.Return$T@@5 (Tclass._module.List _module._default.Return$T@@5) $heap@@2 (|_module.__default.Return#Handle| _module._default.Return$T@@5) |$fh$0x#0@@2|) ($Box DatatypeTypeType (_module.__default.Return _module._default.Return$T@@5 |$fh$0x#0@@2|)))
 :pattern ( (Apply1 _module._default.Return$T@@5 (Tclass._module.List _module._default.Return$T@@5) $heap@@2 (|_module.__default.Return#Handle| _module._default.Return$T@@5) |$fh$0x#0@@2|))
)))
(assert (forall ((|#$T0@@7| T@U) (|#$R@@7| T@U) (|f#0@@6| T@U) ) (! (= ($Is HandleTypeType |f#0@@6| (Tclass._System.___hTotalFunc1 |#$T0@@7| |#$R@@7|))  (and ($Is HandleTypeType |f#0@@6| (Tclass._System.___hPartialFunc1 |#$T0@@7| |#$R@@7|)) (forall ((|x0#0| T@U) )  (=> ($IsBox |x0#0| |#$T0@@7|) (Requires1 |#$T0@@7| |#$R@@7| $OneHeap |f#0@@6| |x0#0|)))))
 :pattern ( ($Is HandleTypeType |f#0@@6| (Tclass._System.___hTotalFunc1 |#$T0@@7| |#$R@@7|)))
)))
(assert (forall ((|#$T0@@8| T@U) (|#$R@@8| T@U) (|f#0@@7| T@U) ) (! (= ($Is HandleTypeType |f#0@@7| (Tclass._System.___hPartialFunc1 |#$T0@@8| |#$R@@8|))  (and ($Is HandleTypeType |f#0@@7| (Tclass._System.___hFunc1 |#$T0@@8| |#$R@@8|)) (forall ((|x0#0@@0| T@U) )  (=> ($IsBox |x0#0@@0| |#$T0@@8|) (|Set#Equal| (Reads1 |#$T0@@8| |#$R@@8| $OneHeap |f#0@@7| |x0#0@@0|) |Set#Empty|)))))
 :pattern ( ($Is HandleTypeType |f#0@@7| (Tclass._System.___hPartialFunc1 |#$T0@@8| |#$R@@8|)))
)))
(assert  (and (and (and (and (and (and (= (Ctor refType) 6) (forall ((t0@@3 T@T) (t1@@3 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0@@3 t1@@3 (MapType0Store t0@@3 t1@@3 m x0 val) x0) val)
 :weight 0
))) (forall ((u0@@0 T@T) (u1@@0 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0@@0 u1@@0 (MapType0Store u0@@0 u1@@0 m@@0 x0@@0 val@@0) y0) (MapType0Select u0@@0 u1@@0 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 7)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 8))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((f@@3 T@U) (t0@@4 T@U) (t1@@4 T@U) (h@@2 T@U) ) (!  (=> ($IsGoodHeap h@@2) (= ($IsAlloc HandleTypeType f@@3 (Tclass._System.___hFunc1 t0@@4 t1@@4) h@@2) (forall ((bx0@@2 T@U) ) (!  (=> (and (and ($IsBox bx0@@2 t0@@4) ($IsAllocBox bx0@@2 t0@@4 h@@2)) (Requires1 t0@@4 t1@@4 h@@2 f@@3 bx0@@2)) (forall ((r T@U) ) (!  (=> (and (or (not (= r null)) (not true)) (|Set#IsMember| (Reads1 t0@@4 t1@@4 h@@2 f@@3 bx0@@2) ($Box refType r))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@2 r) alloc))))
 :pattern ( (|Set#IsMember| (Reads1 t0@@4 t1@@4 h@@2 f@@3 bx0@@2) ($Box refType r)))
)))
 :pattern ( (Apply1 t0@@4 t1@@4 h@@2 f@@3 bx0@@2))
 :pattern ( (Reads1 t0@@4 t1@@4 h@@2 f@@3 bx0@@2))
))))
 :pattern ( ($IsAlloc HandleTypeType f@@3 (Tclass._System.___hFunc1 t0@@4 t1@@4) h@@2))
)))
(assert (forall ((|#$T0@@9| T@U) (|#$R@@9| T@U) (bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 (Tclass._System.___hFunc1 |#$T0@@9| |#$R@@9|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@1)) bx@@1) ($Is HandleTypeType ($Unbox HandleTypeType bx@@1) (Tclass._System.___hFunc1 |#$T0@@9| |#$R@@9|))))
 :pattern ( ($IsBox bx@@1 (Tclass._System.___hFunc1 |#$T0@@9| |#$R@@9|)))
)))
(assert (forall ((|#$T0@@10| T@U) (|#$R@@10| T@U) (bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 (Tclass._System.___hPartialFunc1 |#$T0@@10| |#$R@@10|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@2)) bx@@2) ($Is HandleTypeType ($Unbox HandleTypeType bx@@2) (Tclass._System.___hPartialFunc1 |#$T0@@10| |#$R@@10|))))
 :pattern ( ($IsBox bx@@2 (Tclass._System.___hPartialFunc1 |#$T0@@10| |#$R@@10|)))
)))
(assert (forall ((|#$T0@@11| T@U) (|#$R@@11| T@U) (bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 (Tclass._System.___hTotalFunc1 |#$T0@@11| |#$R@@11|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@3)) bx@@3) ($Is HandleTypeType ($Unbox HandleTypeType bx@@3) (Tclass._System.___hTotalFunc1 |#$T0@@11| |#$R@@11|))))
 :pattern ( ($IsBox bx@@3 (Tclass._System.___hTotalFunc1 |#$T0@@11| |#$R@@11|)))
)))
(assert (forall ((d@@5 T@U) (_module.List$T@@5 T@U) ($h@@2 T@U) ) (!  (=> (and ($IsGoodHeap $h@@2) (and (_module.List.Cons_q d@@5) ($IsAlloc DatatypeTypeType d@@5 (Tclass._module.List _module.List$T@@5) $h@@2))) ($IsAllocBox (_module.List.head d@@5) _module.List$T@@5 $h@@2))
 :pattern ( ($IsAllocBox (_module.List.head d@@5) _module.List$T@@5 $h@@2))
)))
(assert  (and (forall ((t0@@5 T@T) (t1@@5 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@5 t1@@5 t2 (MapType1Store t0@@5 t1@@5 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@1 T@T) (u1@@1 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@1 u1@@1 u2 (MapType1Store u0@@1 u1@@1 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@1 u1@@1 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@2 T@T) (u1@@2 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@2 u1@@2 u2@@0 (MapType1Store u0@@2 u1@@2 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@2 u1@@2 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($Heap@@3 T@U) (_module._default.append$_T0@@2 T@U) ($ly@@7 T@U) (|xs#0@@7| T@U) (|ys#0@@2| T@U) ) (!  (=> (and (or (|_module.__default.append#canCall| _module._default.append$_T0@@2 |xs#0@@7| |ys#0@@2|) (and (< 1 $FunctionContextHeight) (and (and ($Is DatatypeTypeType |xs#0@@7| (Tclass._module.List _module._default.append$_T0@@2)) ($IsAlloc DatatypeTypeType |xs#0@@7| (Tclass._module.List _module._default.append$_T0@@2) $Heap@@3)) (and ($Is DatatypeTypeType |ys#0@@2| (Tclass._module.List _module._default.append$_T0@@2)) ($IsAlloc DatatypeTypeType |ys#0@@2| (Tclass._module.List _module._default.append$_T0@@2) $Heap@@3))))) ($IsGoodHeap $Heap@@3)) ($IsAlloc DatatypeTypeType (_module.__default.append _module._default.append$_T0@@2 $ly@@7 |xs#0@@7| |ys#0@@2|) (Tclass._module.List _module._default.append$_T0@@2) $Heap@@3))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.__default.append _module._default.append$_T0@@2 $ly@@7 |xs#0@@7| |ys#0@@2|) (Tclass._module.List _module._default.append$_T0@@2) $Heap@@3))
))))
(assert (forall ((|#$T0@@12| T@U) (|#$R@@12| T@U) ) (!  (and (= (Tag (Tclass._System.___hFunc1 |#$T0@@12| |#$R@@12|)) Tagclass._System.___hFunc1) (= (TagFamily (Tclass._System.___hFunc1 |#$T0@@12| |#$R@@12|)) |tytagFamily$_#Func1|))
 :pattern ( (Tclass._System.___hFunc1 |#$T0@@12| |#$R@@12|))
)))
(assert (forall ((|#$T0@@13| T@U) (|#$R@@13| T@U) ) (!  (and (= (Tag (Tclass._System.___hPartialFunc1 |#$T0@@13| |#$R@@13|)) Tagclass._System.___hPartialFunc1) (= (TagFamily (Tclass._System.___hPartialFunc1 |#$T0@@13| |#$R@@13|)) |tytagFamily$_#PartialFunc1|))
 :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@13| |#$R@@13|))
)))
(assert (forall ((|#$T0@@14| T@U) (|#$R@@14| T@U) ) (!  (and (= (Tag (Tclass._System.___hTotalFunc1 |#$T0@@14| |#$R@@14|)) Tagclass._System.___hTotalFunc1) (= (TagFamily (Tclass._System.___hTotalFunc1 |#$T0@@14| |#$R@@14|)) |tytagFamily$_#TotalFunc1|))
 :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@14| |#$R@@14|))
)))
(assert (forall ((t0@@6 T@U) (t1@@6 T@U) (heap@@0 T@U) (f@@4 T@U) (bx0@@3 T@U) ) (!  (=> (and (and ($IsGoodHeap heap@@0) (and ($IsBox bx0@@3 t0@@6) ($Is HandleTypeType f@@4 (Tclass._System.___hFunc1 t0@@6 t1@@6)))) (|Set#Equal| (Reads1 t0@@6 t1@@6 $OneHeap f@@4 bx0@@3) |Set#Empty|)) (= (Requires1 t0@@6 t1@@6 $OneHeap f@@4 bx0@@3) (Requires1 t0@@6 t1@@6 heap@@0 f@@4 bx0@@3)))
 :pattern ( (Requires1 t0@@6 t1@@6 $OneHeap f@@4 bx0@@3) ($IsGoodHeap heap@@0))
 :pattern ( (Requires1 t0@@6 t1@@6 heap@@0 f@@4 bx0@@3))
)))
(assert (forall ((d@@6 T@U) ) (! (= (BoxRank ($Box DatatypeTypeType d@@6)) (DtRank d@@6))
 :pattern ( (BoxRank ($Box DatatypeTypeType d@@6)))
)))
(assert (forall ((_module._default.append$_T0@@3 T@U) ($ly@@8 T@U) (|xs#0@@8| T@U) (|ys#0@@3| T@U) ) (! (= (_module.__default.append _module._default.append$_T0@@3 ($LS $ly@@8) |xs#0@@8| |ys#0@@3|) (_module.__default.append _module._default.append$_T0@@3 $ly@@8 |xs#0@@8| |ys#0@@3|))
 :pattern ( (_module.__default.append _module._default.append$_T0@@3 ($LS $ly@@8) |xs#0@@8| |ys#0@@3|))
)))
(assert (forall ((_module.List$T@@6 T@U) (bx@@4 T@U) ) (!  (=> ($IsBox bx@@4 (Tclass._module.List _module.List$T@@6)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@4)) bx@@4) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@4) (Tclass._module.List _module.List$T@@6))))
 :pattern ( ($IsBox bx@@4 (Tclass._module.List _module.List$T@@6)))
)))
(assert (forall ((d@@7 T@U) (_module.List$T@@7 T@U) ($h@@3 T@U) ) (!  (=> (and ($IsGoodHeap $h@@3) (and (_module.List.Cons_q d@@7) ($IsAlloc DatatypeTypeType d@@7 (Tclass._module.List _module.List$T@@7) $h@@3))) ($IsAlloc DatatypeTypeType (_module.List.tail d@@7) (Tclass._module.List _module.List$T@@7) $h@@3))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.List.tail d@@7) (Tclass._module.List _module.List$T@@7) $h@@3))
)))
(assert (= |#_module.List.Nil| (Lit DatatypeTypeType |#_module.List.Nil|)))
(assert (forall ((a@@3 T@U) (b@@3 T@U) ) (! (= (|Set#Equal| a@@3 b@@3) (forall ((o@@0 T@U) ) (! (= (|Set#IsMember| a@@3 o@@0) (|Set#IsMember| b@@3 o@@0))
 :pattern ( (|Set#IsMember| a@@3 o@@0))
 :pattern ( (|Set#IsMember| b@@3 o@@0))
)))
 :pattern ( (|Set#Equal| a@@3 b@@3))
)))
(assert (forall ((|a#7#0#0| T@U) (|a#7#1#0| T@U) ) (! (= (|#_module.List.Cons| (Lit BoxType |a#7#0#0|) (Lit DatatypeTypeType |a#7#1#0|)) (Lit DatatypeTypeType (|#_module.List.Cons| |a#7#0#0| |a#7#1#0|)))
 :pattern ( (|#_module.List.Cons| (Lit BoxType |a#7#0#0|) (Lit DatatypeTypeType |a#7#1#0|)))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($Heap@@4 T@U) (_module._default.Return$T@@6 T@U) (|a#0@@2| T@U) ) (!  (=> (and (or (|_module.__default.Return#canCall| _module._default.Return$T@@6 |a#0@@2|) (and (< 1 $FunctionContextHeight) (and ($IsBox |a#0@@2| _module._default.Return$T@@6) ($IsAllocBox |a#0@@2| _module._default.Return$T@@6 $Heap@@4)))) ($IsGoodHeap $Heap@@4)) ($IsAlloc DatatypeTypeType (_module.__default.Return _module._default.Return$T@@6 |a#0@@2|) (Tclass._module.List _module._default.Return$T@@6) $Heap@@4))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.__default.Return _module._default.Return$T@@6 |a#0@@2|) (Tclass._module.List _module._default.Return$T@@6) $Heap@@4))
))))
(assert (forall ((x@@5 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@5)) (Lit BoxType ($Box T@@4 x@@5)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@5)))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module._default.Return$T@@7 T@U) (|a#0@@3| T@U) ) (!  (=> (or (|_module.__default.Return#canCall| _module._default.Return$T@@7 (Lit BoxType |a#0@@3|)) (and (< 1 $FunctionContextHeight) ($IsBox |a#0@@3| _module._default.Return$T@@7))) (= (_module.__default.Return _module._default.Return$T@@7 (Lit BoxType |a#0@@3|)) (Lit DatatypeTypeType (|#_module.List.Cons| (Lit BoxType |a#0@@3|) (Lit DatatypeTypeType |#_module.List.Nil|)))))
 :weight 3
 :pattern ( (_module.__default.Return _module._default.Return$T@@7 (Lit BoxType |a#0@@3|)))
))))
(assert (forall ((_module._default.Bind$T@@4 T@U) (_module._default.Bind$U@@4 T@U) ($ly@@9 T@U) (|xs#0@@9| T@U) (|f#0@@8| T@U) ) (! (= (_module.__default.Bind _module._default.Bind$T@@4 _module._default.Bind$U@@4 ($LS $ly@@9) |xs#0@@9| |f#0@@8|) (_module.__default.Bind _module._default.Bind$T@@4 _module._default.Bind$U@@4 $ly@@9 |xs#0@@9| |f#0@@8|))
 :pattern ( (_module.__default.Bind _module._default.Bind$T@@4 _module._default.Bind$U@@4 ($LS $ly@@9) |xs#0@@9| |f#0@@8|))
)))
(assert (forall ((_module.List$T@@8 T@U) (|a#6#0#0@@0| T@U) (|a#6#1#0@@0| T@U) ($h@@4 T@U) ) (!  (=> ($IsGoodHeap $h@@4) (= ($IsAlloc DatatypeTypeType (|#_module.List.Cons| |a#6#0#0@@0| |a#6#1#0@@0|) (Tclass._module.List _module.List$T@@8) $h@@4)  (and ($IsAllocBox |a#6#0#0@@0| _module.List$T@@8 $h@@4) ($IsAlloc DatatypeTypeType |a#6#1#0@@0| (Tclass._module.List _module.List$T@@8) $h@@4))))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_module.List.Cons| |a#6#0#0@@0| |a#6#1#0@@0|) (Tclass._module.List _module.List$T@@8) $h@@4))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun _module._default.RightIdentity$T () T@U)
(declare-fun |m#0| () T@U)
(declare-fun |x#0_0@0| () T@U)
(declare-fun |m'#0_0@0| () T@U)
(declare-fun |##xs#1_0@0| () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun |##f#1_0@0| () T@U)
(declare-fun |##xs#0_0_0_0@0| () T@U)
(declare-fun |##f#0_0_0_0@0| () T@U)
(declare-fun |##ys#0_0_0_0@0| () T@U)
(declare-fun |##f#0_0_0_1@0| () T@U)
(declare-fun |##xs#0_0_1_0@0| () T@U)
(declare-fun |##f#0_0_1_0@0| () T@U)
(declare-fun |##xs#0_0_1_1@0| () T@U)
(declare-fun |##f#0_0_1_1@0| () T@U)
(declare-fun |##ys#0_0_1_0@0| () T@U)
(declare-fun |##xs#0_0_0@0| () T@U)
(declare-fun |_mcc#0#0_0@0| () T@U)
(declare-fun |_mcc#1#0_0@0| () T@U)
(declare-fun |let#0_0#0#0| () T@U)
(declare-fun |let#0_1#0#0| () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun $Heap@@5 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 19) (let ((GeneratedUnifiedExit_correct  (=> (= (ControlFlow 0 11) (- 0 10)) (|_module.List#Equal| (_module.__default.Bind _module._default.RightIdentity$T _module._default.RightIdentity$T ($LS ($LS $LZ)) |m#0| (|_module.__default.Return#Handle| _module._default.RightIdentity$T)) |m#0|))))
(let ((anon12_Else_correct  (=> (and (|_module.List#Equal| (_module.__default.Bind _module._default.RightIdentity$T _module._default.RightIdentity$T ($LS $LZ) (|#_module.List.Cons| |x#0_0@0| |m'#0_0@0|) (|_module.__default.Return#Handle| _module._default.RightIdentity$T)) (|#_module.List.Cons| |x#0_0@0| (_module.__default.Bind _module._default.RightIdentity$T _module._default.RightIdentity$T ($LS $LZ) |m'#0_0@0| (|_module.__default.Return#Handle| _module._default.RightIdentity$T)))) (= (ControlFlow 0 15) 11)) GeneratedUnifiedExit_correct)))
(let ((anon8_Then_correct  (=> (= |m#0| |#_module.List.Nil|) (=> (and (= |##xs#1_0@0| (Lit DatatypeTypeType |#_module.List.Nil|)) ($IsAlloc DatatypeTypeType |##xs#1_0@0| (Tclass._module.List _module._default.RightIdentity$T) $Heap@0)) (and (=> (= (ControlFlow 0 12) (- 0 14)) (or (not (= 1 $FunctionContextHeight)) (not true))) (=> (or (not (= 1 $FunctionContextHeight)) (not true)) (=> (= |##f#1_0@0| (|_module.__default.Return#Handle| _module._default.RightIdentity$T)) (=> (and (and ($IsAlloc HandleTypeType |##f#1_0@0| (Tclass._System.___hTotalFunc1 _module._default.RightIdentity$T (Tclass._module.List _module._default.RightIdentity$T)) $Heap@0) (|_module.__default.Bind#canCall| _module._default.RightIdentity$T _module._default.RightIdentity$T (Lit DatatypeTypeType |#_module.List.Nil|) (|_module.__default.Return#Handle| _module._default.RightIdentity$T))) (and (|$IsA#_module.List| (_module.__default.Bind _module._default.RightIdentity$T _module._default.RightIdentity$T ($LS $LZ) (Lit DatatypeTypeType |#_module.List.Nil|) (|_module.__default.Return#Handle| _module._default.RightIdentity$T))) (|_module.__default.Bind#canCall| _module._default.RightIdentity$T _module._default.RightIdentity$T (Lit DatatypeTypeType |#_module.List.Nil|) (|_module.__default.Return#Handle| _module._default.RightIdentity$T)))) (and (=> (= (ControlFlow 0 12) (- 0 13)) (|_module.List#Equal| (_module.__default.Bind _module._default.RightIdentity$T _module._default.RightIdentity$T ($LS ($LS $LZ)) (Lit DatatypeTypeType |#_module.List.Nil|) (|_module.__default.Return#Handle| _module._default.RightIdentity$T)) |#_module.List.Nil|)) (=> (and (|_module.List#Equal| (_module.__default.Bind _module._default.RightIdentity$T _module._default.RightIdentity$T ($LS $LZ) (Lit DatatypeTypeType |#_module.List.Nil|) (|_module.__default.Return#Handle| _module._default.RightIdentity$T)) |#_module.List.Nil|) (= (ControlFlow 0 12) 11)) GeneratedUnifiedExit_correct))))))))))
(let ((anon12_Then_correct  (=> (and (and ($IsAllocBox |x#0_0@0| _module._default.RightIdentity$T $Heap@0) (|_module.__default.Return#canCall| _module._default.RightIdentity$T |x#0_0@0|)) (and (= |##xs#0_0_0_0@0| (_module.__default.Return _module._default.RightIdentity$T |x#0_0@0|)) ($IsAlloc DatatypeTypeType |##xs#0_0_0_0@0| (Tclass._module.List _module._default.RightIdentity$T) $Heap@0))) (=> (and (and (and (and ($IsAlloc DatatypeTypeType |m'#0_0@0| (Tclass._module.List _module._default.RightIdentity$T) $Heap@0) (or (not (= 1 $FunctionContextHeight)) (not true))) (and (= |##f#0_0_0_0@0| (|_module.__default.Return#Handle| _module._default.RightIdentity$T)) ($IsAlloc HandleTypeType |##f#0_0_0_0@0| (Tclass._System.___hTotalFunc1 _module._default.RightIdentity$T (Tclass._module.List _module._default.RightIdentity$T)) $Heap@0))) (and (and (|_module.__default.Bind#canCall| _module._default.RightIdentity$T _module._default.RightIdentity$T |m'#0_0@0| (|_module.__default.Return#Handle| _module._default.RightIdentity$T)) (= |##ys#0_0_0_0@0| (_module.__default.Bind _module._default.RightIdentity$T _module._default.RightIdentity$T ($LS $LZ) |m'#0_0@0| (|_module.__default.Return#Handle| _module._default.RightIdentity$T)))) (and ($IsAlloc DatatypeTypeType |##ys#0_0_0_0@0| (Tclass._module.List _module._default.RightIdentity$T) $Heap@0) (|_module.__default.append#canCall| _module._default.RightIdentity$T (_module.__default.Return _module._default.RightIdentity$T |x#0_0@0|) (_module.__default.Bind _module._default.RightIdentity$T _module._default.RightIdentity$T ($LS $LZ) |m'#0_0@0| (|_module.__default.Return#Handle| _module._default.RightIdentity$T)))))) (and (and (and (|_module.__default.Return#canCall| _module._default.RightIdentity$T |x#0_0@0|) (|_module.__default.Bind#canCall| _module._default.RightIdentity$T _module._default.RightIdentity$T |m'#0_0@0| (|_module.__default.Return#Handle| _module._default.RightIdentity$T))) (|_module.__default.append#canCall| _module._default.RightIdentity$T (_module.__default.Return _module._default.RightIdentity$T |x#0_0@0|) (_module.__default.Bind _module._default.RightIdentity$T _module._default.RightIdentity$T ($LS $LZ) |m'#0_0@0| (|_module.__default.Return#Handle| _module._default.RightIdentity$T)))) ($IsAlloc DatatypeTypeType |m'#0_0@0| (Tclass._module.List _module._default.RightIdentity$T) $Heap@0))) (and (=> (= (ControlFlow 0 8) (- 0 9)) (or (not (= 1 $FunctionContextHeight)) (not true))) (=> (or (not (= 1 $FunctionContextHeight)) (not true)) (=> (= |##f#0_0_0_1@0| (|_module.__default.Return#Handle| _module._default.RightIdentity$T)) (=> (and (and ($IsAlloc HandleTypeType |##f#0_0_0_1@0| (Tclass._System.___hTotalFunc1 _module._default.RightIdentity$T (Tclass._module.List _module._default.RightIdentity$T)) $Heap@0) (|_module.__default.Bind#canCall| _module._default.RightIdentity$T _module._default.RightIdentity$T |m'#0_0@0| (|_module.__default.Return#Handle| _module._default.RightIdentity$T))) (and (|_module.__default.Bind#canCall| _module._default.RightIdentity$T _module._default.RightIdentity$T |m'#0_0@0| (|_module.__default.Return#Handle| _module._default.RightIdentity$T)) (= (ControlFlow 0 8) (- 0 7)))) (|_module.List#Equal| (_module.__default.append _module._default.RightIdentity$T ($LS ($LS $LZ)) (_module.__default.Return _module._default.RightIdentity$T |x#0_0@0|) (_module.__default.Bind _module._default.RightIdentity$T _module._default.RightIdentity$T ($LS ($LS $LZ)) |m'#0_0@0| (|_module.__default.Return#Handle| _module._default.RightIdentity$T))) (|#_module.List.Cons| |x#0_0@0| (_module.__default.Bind _module._default.RightIdentity$T _module._default.RightIdentity$T ($LS ($LS $LZ)) |m'#0_0@0| (|_module.__default.Return#Handle| _module._default.RightIdentity$T))))))))))))
(let ((anon11_Then_correct  (=> (and (and (= |##xs#0_0_1_0@0| (|#_module.List.Cons| |x#0_0@0| |m'#0_0@0|)) ($IsAlloc DatatypeTypeType |##xs#0_0_1_0@0| (Tclass._module.List _module._default.RightIdentity$T) $Heap@0)) (and (or (not (= 1 $FunctionContextHeight)) (not true)) (= |##f#0_0_1_0@0| (|_module.__default.Return#Handle| _module._default.RightIdentity$T)))) (=> (and (and (and ($IsAlloc HandleTypeType |##f#0_0_1_0@0| (Tclass._System.___hTotalFunc1 _module._default.RightIdentity$T (Tclass._module.List _module._default.RightIdentity$T)) $Heap@0) (|_module.__default.Bind#canCall| _module._default.RightIdentity$T _module._default.RightIdentity$T (|#_module.List.Cons| |x#0_0@0| |m'#0_0@0|) (|_module.__default.Return#Handle| _module._default.RightIdentity$T))) (and (|_module.__default.Bind#canCall| _module._default.RightIdentity$T _module._default.RightIdentity$T (|#_module.List.Cons| |x#0_0@0| |m'#0_0@0|) (|_module.__default.Return#Handle| _module._default.RightIdentity$T)) ($IsAllocBox |x#0_0@0| _module._default.RightIdentity$T $Heap@0))) (and (and (|_module.__default.Return#canCall| _module._default.RightIdentity$T |x#0_0@0|) (= |##xs#0_0_1_1@0| (_module.__default.Return _module._default.RightIdentity$T |x#0_0@0|))) (and ($IsAlloc DatatypeTypeType |##xs#0_0_1_1@0| (Tclass._module.List _module._default.RightIdentity$T) $Heap@0) ($IsAlloc DatatypeTypeType |m'#0_0@0| (Tclass._module.List _module._default.RightIdentity$T) $Heap@0)))) (and (=> (= (ControlFlow 0 5) (- 0 6)) (or (not (= 1 $FunctionContextHeight)) (not true))) (=> (or (not (= 1 $FunctionContextHeight)) (not true)) (=> (and (= |##f#0_0_1_1@0| (|_module.__default.Return#Handle| _module._default.RightIdentity$T)) ($IsAlloc HandleTypeType |##f#0_0_1_1@0| (Tclass._System.___hTotalFunc1 _module._default.RightIdentity$T (Tclass._module.List _module._default.RightIdentity$T)) $Heap@0)) (=> (and (and (|_module.__default.Bind#canCall| _module._default.RightIdentity$T _module._default.RightIdentity$T |m'#0_0@0| (|_module.__default.Return#Handle| _module._default.RightIdentity$T)) (= |##ys#0_0_1_0@0| (_module.__default.Bind _module._default.RightIdentity$T _module._default.RightIdentity$T ($LS $LZ) |m'#0_0@0| (|_module.__default.Return#Handle| _module._default.RightIdentity$T)))) (and ($IsAlloc DatatypeTypeType |##ys#0_0_1_0@0| (Tclass._module.List _module._default.RightIdentity$T) $Heap@0) (|_module.__default.append#canCall| _module._default.RightIdentity$T (_module.__default.Return _module._default.RightIdentity$T |x#0_0@0|) (_module.__default.Bind _module._default.RightIdentity$T _module._default.RightIdentity$T ($LS $LZ) |m'#0_0@0| (|_module.__default.Return#Handle| _module._default.RightIdentity$T))))) (=> (and (and (and (|_module.__default.Return#canCall| _module._default.RightIdentity$T |x#0_0@0|) (|_module.__default.Bind#canCall| _module._default.RightIdentity$T _module._default.RightIdentity$T |m'#0_0@0| (|_module.__default.Return#Handle| _module._default.RightIdentity$T))) (|_module.__default.append#canCall| _module._default.RightIdentity$T (_module.__default.Return _module._default.RightIdentity$T |x#0_0@0|) (_module.__default.Bind _module._default.RightIdentity$T _module._default.RightIdentity$T ($LS $LZ) |m'#0_0@0| (|_module.__default.Return#Handle| _module._default.RightIdentity$T)))) (= (ControlFlow 0 5) (- 0 4))) (|_module.List#Equal| (_module.__default.Bind _module._default.RightIdentity$T _module._default.RightIdentity$T ($LS ($LS $LZ)) (|#_module.List.Cons| |x#0_0@0| |m'#0_0@0|) (|_module.__default.Return#Handle| _module._default.RightIdentity$T)) (_module.__default.append _module._default.RightIdentity$T ($LS ($LS $LZ)) (_module.__default.Return _module._default.RightIdentity$T |x#0_0@0|) (_module.__default.Bind _module._default.RightIdentity$T _module._default.RightIdentity$T ($LS ($LS $LZ)) |m'#0_0@0| (|_module.__default.Return#Handle| _module._default.RightIdentity$T)))))))))))))
(let ((anon10_Then_correct  (=> (= |##xs#0_0_0@0| (|#_module.List.Cons| |x#0_0@0| |m'#0_0@0|)) (=> (and ($IsAlloc DatatypeTypeType |##xs#0_0_0@0| (Tclass._module.List _module._default.RightIdentity$T) $Heap@0) (= (ControlFlow 0 3) (- 0 2))) (or (not (= 1 $FunctionContextHeight)) (not true))))))
(let ((anon9_Then_correct  (=> (= |m#0| (|#_module.List.Cons| |_mcc#0#0_0@0| |_mcc#1#0_0@0|)) (=> (and ($IsBox |_mcc#0#0_0@0| _module._default.RightIdentity$T) ($Is DatatypeTypeType |_mcc#1#0_0@0| (Tclass._module.List _module._default.RightIdentity$T))) (=> (and (and (and (and ($Is DatatypeTypeType |m'#0_0@0| (Tclass._module.List _module._default.RightIdentity$T)) ($IsAlloc DatatypeTypeType |m'#0_0@0| (Tclass._module.List _module._default.RightIdentity$T) $Heap@0)) (= |let#0_0#0#0| |_mcc#1#0_0@0|)) (and ($Is DatatypeTypeType |let#0_0#0#0| (Tclass._module.List _module._default.RightIdentity$T)) (= |m'#0_0@0| |let#0_0#0#0|))) (and (and (and ($IsBox |x#0_0@0| _module._default.RightIdentity$T) ($IsAllocBox |x#0_0@0| _module._default.RightIdentity$T $Heap@0)) (= |let#0_1#0#0| |_mcc#0#0_0@0|)) (and ($IsBox |let#0_1#0#0| _module._default.RightIdentity$T) (= |x#0_0@0| |let#0_1#0#0|)))) (and (and (and (=> (= (ControlFlow 0 16) 3) anon10_Then_correct) (=> (= (ControlFlow 0 16) 5) anon11_Then_correct)) (=> (= (ControlFlow 0 16) 8) anon12_Then_correct)) (=> (= (ControlFlow 0 16) 15) anon12_Else_correct)))))))
(let ((anon9_Else_correct true))
(let ((anon8_Else_correct  (=> (or (not (= |m#0| |#_module.List.Nil|)) (not true)) (and (=> (= (ControlFlow 0 17) 16) anon9_Then_correct) (=> (= (ControlFlow 0 17) 1) anon9_Else_correct)))))
(let ((anon0_correct  (=> (and (= $_ModifiesFrame@0 (|lambda#0| null $Heap@@5 alloc false)) (|$IsA#_module.List| |m#0|)) (=> (and (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (and (= $Heap@@5 $Heap@0) (forall ((|$ih#m0#0| T@U) ) (!  (=> (and (and ($Is DatatypeTypeType |$ih#m0#0| (Tclass._module.List _module._default.RightIdentity$T)) (U_2_bool (Lit boolType (bool_2_U true)))) (< (DtRank |$ih#m0#0|) (DtRank |m#0|))) (|_module.List#Equal| (_module.__default.Bind _module._default.RightIdentity$T _module._default.RightIdentity$T ($LS $LZ) |$ih#m0#0| (|_module.__default.Return#Handle| _module._default.RightIdentity$T)) |$ih#m0#0|))
 :pattern ( (_module.__default.Bind _module._default.RightIdentity$T _module._default.RightIdentity$T ($LS $LZ) |$ih#m0#0| (|_module.__default.Return#Handle| _module._default.RightIdentity$T)))
)))) (and (=> (= (ControlFlow 0 18) 12) anon8_Then_correct) (=> (= (ControlFlow 0 18) 17) anon8_Else_correct))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap@@5) ($IsHeapAnchor $Heap@@5)) (=> (and (and (and ($Is DatatypeTypeType |m#0| (Tclass._module.List _module._default.RightIdentity$T)) ($IsAlloc DatatypeTypeType |m#0| (Tclass._module.List _module._default.RightIdentity$T) $Heap@@5)) (|$IsA#_module.List| |m#0|)) (and (= 3 $FunctionContextHeight) (= (ControlFlow 0 19) 18))) anon0_correct))))
PreconditionGeneratedEntry_correct))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
