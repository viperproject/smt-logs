(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 () T@U)
(declare-fun $generated@@9 () T@U)
(declare-fun $generated@@10 (T@T) Int)
(declare-fun $generated@@11 () T@T)
(declare-fun $generated@@12 () T@T)
(declare-fun $generated@@13 () T@T)
(declare-fun $generated@@14 (Bool) T@U)
(declare-fun $generated@@15 (T@U) Bool)
(declare-fun $generated@@16 (Int) T@U)
(declare-fun $generated@@17 (T@U) Int)
(declare-fun $generated@@18 (Real) T@U)
(declare-fun $generated@@19 (T@U) Real)
(declare-fun $generated@@26 () Int)
(declare-fun $generated@@27 (T@U T@U Int) T@U)
(declare-fun $generated@@28 (T@U Int) Bool)
(declare-fun $generated@@29 (T@T T@U T@U) Bool)
(declare-fun $generated@@30 () T@T)
(declare-fun $generated@@31 () T@U)
(declare-fun $generated@@32 (Int) Int)
(declare-fun $generated@@33 () T@U)
(declare-fun $generated@@37 (T@U T@U Int) T@U)
(declare-fun $generated@@38 (T@U Int) Bool)
(declare-fun $generated@@42 (T@U) T@U)
(declare-fun $generated@@43 (T@U) Bool)
(declare-fun $generated@@44 (T@U) T@U)
(declare-fun $generated@@45 () T@U)
(declare-fun $generated@@51 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@52 () T@U)
(declare-fun $generated@@55 (T@U) T@U)
(declare-fun $generated@@56 () T@U)
(declare-fun $generated@@57 (T@T T@U) T@U)
(declare-fun $generated@@58 (Int) T@U)
(declare-fun $generated@@65 (T@U) Bool)
(declare-fun $generated@@67 (T@U) Bool)
(declare-fun $generated@@70 (T@U) Bool)
(declare-fun $generated@@72 (T@T T@U) T@U)
(declare-fun $generated@@73 (T@T T@U) T@U)
(declare-fun $generated@@85 (T@U) T@U)
(declare-fun $generated@@100 (T@U) Int)
(declare-fun $generated@@106 (T@U) Int)
(declare-fun $generated@@108 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@109 () T@T)
(declare-fun $generated@@110 () T@T)
(declare-fun $generated@@111 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@112 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@113 () T@T)
(declare-fun $generated@@114 (T@T T@T) T@T)
(declare-fun $generated@@115 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@116 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@117 (T@T) T@T)
(declare-fun $generated@@118 (T@T) T@T)
(declare-fun $generated@@167 (T@U) Bool)
(declare-fun $generated@@172 (T@U) T@U)
(declare-fun $generated@@173 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@10 $generated@@11) 0) (= ($generated@@10 $generated@@12) 1)) (= ($generated@@10 $generated@@13) 2)) (forall (($generated@@20 Bool) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 Int) ) (! (= ($generated@@17 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 T@U) ) (! (= ($generated@@16 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))) (forall (($generated@@24 Real) ) (! (= ($generated@@19 ($generated@@18 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@18 $generated@@24))
))) (forall (($generated@@25 T@U) ) (! (= ($generated@@18 ($generated@@19 $generated@@25)) $generated@@25)
 :pattern ( ($generated@@19 $generated@@25))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7 $generated@@8 $generated@@9)
)
(assert (= ($generated@@10 $generated@@30) 3))
(assert  (=> (<= 1 $generated@@26) (forall (($generated@@34 T@U) ($generated@@35 T@U) ($generated@@36 Int) ) (!  (=> (or ($generated@@28 $generated@@35 $generated@@36) (and (< 1 $generated@@26) (and ($generated@@29 $generated@@30 $generated@@35 $generated@@31) (<= ($generated@@32 0) $generated@@36)))) ($generated@@29 $generated@@30 ($generated@@27 $generated@@34 $generated@@35 $generated@@36) $generated@@33))
 :pattern ( ($generated@@27 $generated@@34 $generated@@35 $generated@@36))
))))
(assert  (=> (<= 1 $generated@@26) (forall (($generated@@39 T@U) ($generated@@40 T@U) ($generated@@41 Int) ) (!  (=> (or ($generated@@38 $generated@@40 $generated@@41) (and (< 1 $generated@@26) (and ($generated@@29 $generated@@30 $generated@@40 $generated@@31) (<= ($generated@@32 0) $generated@@41)))) ($generated@@29 $generated@@30 ($generated@@37 $generated@@39 $generated@@40 $generated@@41) $generated@@33))
 :pattern ( ($generated@@37 $generated@@39 $generated@@40 $generated@@41))
))))
(assert  (=> (<= 1 $generated@@26) (forall (($generated@@46 T@U) ($generated@@47 T@U) ($generated@@48 Int) ) (!  (=> (or ($generated@@38 $generated@@47 ($generated@@32 $generated@@48)) (and (< 1 $generated@@26) (and ($generated@@29 $generated@@30 $generated@@47 $generated@@31) (<= ($generated@@32 0) $generated@@48)))) (and (=> (or (not (= ($generated@@32 $generated@@48) ($generated@@32 0))) (not true)) (let (($generated@@49 ($generated@@32 (- $generated@@48 1))))
 (=> ($generated@@43 $generated@@47) ($generated@@28 ($generated@@44 $generated@@47) $generated@@49)))) (= ($generated@@37 ($generated@@42 $generated@@46) $generated@@47 ($generated@@32 $generated@@48)) (ite (= ($generated@@32 $generated@@48) ($generated@@32 0)) $generated@@45 (let (($generated@@50 ($generated@@32 (- $generated@@48 1))))
(ite ($generated@@43 $generated@@47) ($generated@@27 ($generated@@42 $generated@@46) ($generated@@44 $generated@@47) $generated@@50) $generated@@45))))))
 :weight 3
 :pattern ( ($generated@@37 ($generated@@42 $generated@@46) $generated@@47 ($generated@@32 $generated@@48)))
))))
(assert (forall (($generated@@53 T@U) ($generated@@54 T@U) ) (! ($generated@@51 $generated@@12 $generated@@53 $generated@@52 $generated@@54)
 :pattern ( ($generated@@51 $generated@@12 $generated@@53 $generated@@52 $generated@@54))
)))
(assert (= ($generated@@55 $generated@@45) $generated@@4))
(assert (= ($generated@@55 $generated@@56) $generated@@6))
(assert ($generated@@29 $generated@@30 $generated@@45 $generated@@33))
(assert ($generated@@29 $generated@@30 $generated@@56 $generated@@31))
(assert  (=> (<= 1 $generated@@26) (forall (($generated@@59 T@U) ($generated@@60 T@U) ($generated@@61 Int) ) (!  (=> (or ($generated@@28 $generated@@60 ($generated@@32 $generated@@61)) (and (< 1 $generated@@26) (and ($generated@@29 $generated@@30 $generated@@60 $generated@@31) (<= ($generated@@32 0) $generated@@61)))) (and ($generated@@38 $generated@@60 ($generated@@32 $generated@@61)) (= ($generated@@27 ($generated@@42 $generated@@59) $generated@@60 ($generated@@32 $generated@@61)) ($generated@@57 $generated@@30 ($generated@@58 ($generated@@32 0))))))
 :weight 3
 :pattern ( ($generated@@27 ($generated@@42 $generated@@59) $generated@@60 ($generated@@32 $generated@@61)))
))))
(assert (forall (($generated@@62 Int) ) (! (= ($generated@@32 $generated@@62) $generated@@62)
 :pattern ( ($generated@@32 $generated@@62))
)))
(assert (forall (($generated@@63 T@U) ($generated@@64 T@T) ) (! (= ($generated@@57 $generated@@64 $generated@@63) $generated@@63)
 :pattern ( ($generated@@57 $generated@@64 $generated@@63))
)))
(assert (forall (($generated@@66 T@U) ) (! (= ($generated@@65 $generated@@66) (= ($generated@@55 $generated@@66) $generated@@3))
 :pattern ( ($generated@@65 $generated@@66))
)))
(assert (forall (($generated@@68 T@U) ) (! (= ($generated@@67 $generated@@68) (= ($generated@@55 $generated@@68) $generated@@4))
 :pattern ( ($generated@@67 $generated@@68))
)))
(assert (forall (($generated@@69 T@U) ) (! (= ($generated@@43 $generated@@69) (= ($generated@@55 $generated@@69) $generated@@5))
 :pattern ( ($generated@@43 $generated@@69))
)))
(assert (forall (($generated@@71 T@U) ) (! (= ($generated@@70 $generated@@71) (= ($generated@@55 $generated@@71) $generated@@6))
 :pattern ( ($generated@@70 $generated@@71))
)))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@T) ) (! (= ($generated@@73 $generated@@75 ($generated@@72 $generated@@75 $generated@@74)) $generated@@74)
 :pattern ( ($generated@@72 $generated@@75 $generated@@74))
)))
(assert (forall (($generated@@76 T@U) ) (!  (=> ($generated@@67 $generated@@76) (= $generated@@76 $generated@@45))
 :pattern ( ($generated@@67 $generated@@76))
)))
(assert (forall (($generated@@77 T@U) ) (!  (=> ($generated@@70 $generated@@77) (= $generated@@77 $generated@@56))
 :pattern ( ($generated@@70 $generated@@77))
)))
(assert  (=> (<= 1 $generated@@26) (forall (($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 Int) ) (!  (=> (or ($generated@@38 $generated@@79 $generated@@80) (and (< 1 $generated@@26) (and ($generated@@29 $generated@@30 $generated@@79 $generated@@31) (<= ($generated@@32 0) $generated@@80)))) (and (=> (or (not (= $generated@@80 ($generated@@32 0))) (not true)) (let (($generated@@81 (- $generated@@80 1)))
 (=> ($generated@@43 $generated@@79) ($generated@@28 ($generated@@44 $generated@@79) $generated@@81)))) (= ($generated@@37 ($generated@@42 $generated@@78) $generated@@79 $generated@@80) (ite (= $generated@@80 ($generated@@32 0)) $generated@@45 (let (($generated@@82 (- $generated@@80 1)))
(ite ($generated@@43 $generated@@79) ($generated@@27 $generated@@78 ($generated@@44 $generated@@79) $generated@@82) $generated@@45))))))
 :pattern ( ($generated@@37 ($generated@@42 $generated@@78) $generated@@79 $generated@@80))
))))
(assert (forall (($generated@@83 T@U) ) (!  (=> ($generated@@65 $generated@@83) (exists (($generated@@84 Int) ) (= $generated@@83 ($generated@@58 $generated@@84))))
 :pattern ( ($generated@@65 $generated@@83))
)))
(assert (forall (($generated@@86 T@U) ) (!  (=> ($generated@@43 $generated@@86) (exists (($generated@@87 T@U) ) (= $generated@@86 ($generated@@85 $generated@@87))))
 :pattern ( ($generated@@43 $generated@@86))
)))
(assert (forall (($generated@@88 T@U) ) (! (= ($generated@@29 $generated@@12 $generated@@88 $generated@@52) (<= ($generated@@32 0) ($generated@@17 $generated@@88)))
 :pattern ( ($generated@@29 $generated@@12 $generated@@88 $generated@@52))
)))
(assert (forall (($generated@@89 Int) ) (! (= ($generated@@29 $generated@@30 ($generated@@58 $generated@@89) $generated@@33) ($generated@@29 $generated@@12 ($generated@@16 $generated@@89) $generated@@52))
 :pattern ( ($generated@@29 $generated@@30 ($generated@@58 $generated@@89) $generated@@33))
)))
(assert (forall (($generated@@90 T@U) ) (! (= ($generated@@29 $generated@@30 ($generated@@85 $generated@@90) $generated@@31) ($generated@@29 $generated@@30 $generated@@90 $generated@@31))
 :pattern ( ($generated@@29 $generated@@30 ($generated@@85 $generated@@90) $generated@@31))
)))
(assert (forall (($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 Int) ) (! (= ($generated@@27 ($generated@@42 $generated@@91) $generated@@92 $generated@@93) ($generated@@27 $generated@@91 $generated@@92 $generated@@93))
 :pattern ( ($generated@@27 ($generated@@42 $generated@@91) $generated@@92 $generated@@93))
)))
(assert (forall (($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 Int) ) (! (= ($generated@@37 ($generated@@42 $generated@@94) $generated@@95 $generated@@96) ($generated@@37 $generated@@94 $generated@@95 $generated@@96))
 :pattern ( ($generated@@37 ($generated@@42 $generated@@94) $generated@@95 $generated@@96))
)))
(assert (forall (($generated@@97 T@U) ) (!  (=> ($generated@@29 $generated@@30 $generated@@97 $generated@@33) (or ($generated@@65 $generated@@97) ($generated@@67 $generated@@97)))
 :pattern ( ($generated@@67 $generated@@97) ($generated@@29 $generated@@30 $generated@@97 $generated@@33))
 :pattern ( ($generated@@65 $generated@@97) ($generated@@29 $generated@@30 $generated@@97 $generated@@33))
)))
(assert (forall (($generated@@98 T@U) ) (!  (=> ($generated@@29 $generated@@30 $generated@@98 $generated@@31) (or ($generated@@43 $generated@@98) ($generated@@70 $generated@@98)))
 :pattern ( ($generated@@70 $generated@@98) ($generated@@29 $generated@@30 $generated@@98 $generated@@31))
 :pattern ( ($generated@@43 $generated@@98) ($generated@@29 $generated@@30 $generated@@98 $generated@@31))
)))
(assert (forall (($generated@@99 Int) ) (! (= ($generated@@55 ($generated@@58 $generated@@99)) $generated@@3)
 :pattern ( ($generated@@58 $generated@@99))
)))
(assert (forall (($generated@@101 Int) ) (! (= ($generated@@100 ($generated@@58 $generated@@101)) $generated@@101)
 :pattern ( ($generated@@58 $generated@@101))
)))
(assert (forall (($generated@@102 T@U) ) (! (= ($generated@@55 ($generated@@85 $generated@@102)) $generated@@5)
 :pattern ( ($generated@@85 $generated@@102))
)))
(assert (forall (($generated@@103 T@U) ) (! (= ($generated@@44 ($generated@@85 $generated@@103)) $generated@@103)
 :pattern ( ($generated@@85 $generated@@103))
)))
(assert (forall (($generated@@104 T@U) ($generated@@105 T@T) ) (! (= ($generated@@72 $generated@@105 ($generated@@73 $generated@@105 $generated@@104)) $generated@@104)
 :pattern ( ($generated@@73 $generated@@105 $generated@@104))
)))
(assert (forall (($generated@@107 T@U) ) (! (< ($generated@@106 $generated@@107) ($generated@@106 ($generated@@85 $generated@@107)))
 :pattern ( ($generated@@85 $generated@@107))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@119 T@T) ($generated@@120 T@T) ($generated@@121 T@T) ($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ) (! (= ($generated@@108 $generated@@119 $generated@@120 $generated@@121 ($generated@@115 $generated@@119 $generated@@120 $generated@@121 $generated@@123 $generated@@124 $generated@@125 $generated@@122) $generated@@124 $generated@@125) $generated@@122)
 :weight 0
)) (and (forall (($generated@@126 T@T) ($generated@@127 T@T) ($generated@@128 T@T) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ($generated@@134 T@U) ) (!  (or (= $generated@@131 $generated@@133) (= ($generated@@108 $generated@@126 $generated@@127 $generated@@128 ($generated@@115 $generated@@126 $generated@@127 $generated@@128 $generated@@130 $generated@@131 $generated@@132 $generated@@129) $generated@@133 $generated@@134) ($generated@@108 $generated@@126 $generated@@127 $generated@@128 $generated@@130 $generated@@133 $generated@@134)))
 :weight 0
)) (forall (($generated@@135 T@T) ($generated@@136 T@T) ($generated@@137 T@T) ($generated@@138 T@U) ($generated@@139 T@U) ($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ) (!  (or (= $generated@@141 $generated@@143) (= ($generated@@108 $generated@@135 $generated@@136 $generated@@137 ($generated@@115 $generated@@135 $generated@@136 $generated@@137 $generated@@139 $generated@@140 $generated@@141 $generated@@138) $generated@@142 $generated@@143) ($generated@@108 $generated@@135 $generated@@136 $generated@@137 $generated@@139 $generated@@142 $generated@@143)))
 :weight 0
)))) (= ($generated@@10 $generated@@109) 4)) (= ($generated@@10 $generated@@110) 5)) (forall (($generated@@144 T@T) ($generated@@145 T@T) ($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ) (! (= ($generated@@112 $generated@@144 $generated@@145 ($generated@@116 $generated@@144 $generated@@145 $generated@@147 $generated@@148 $generated@@146) $generated@@148) $generated@@146)
 :weight 0
))) (forall (($generated@@149 T@T) ($generated@@150 T@T) ($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 T@U) ($generated@@154 T@U) ) (!  (or (= $generated@@153 $generated@@154) (= ($generated@@112 $generated@@149 $generated@@150 ($generated@@116 $generated@@149 $generated@@150 $generated@@152 $generated@@153 $generated@@151) $generated@@154) ($generated@@112 $generated@@149 $generated@@150 $generated@@152 $generated@@154)))
 :weight 0
))) (= ($generated@@10 $generated@@113) 6)) (forall (($generated@@155 T@T) ($generated@@156 T@T) ) (= ($generated@@10 ($generated@@114 $generated@@155 $generated@@156)) 7))) (forall (($generated@@157 T@T) ($generated@@158 T@T) ) (! (= ($generated@@117 ($generated@@114 $generated@@157 $generated@@158)) $generated@@157)
 :pattern ( ($generated@@114 $generated@@157 $generated@@158))
))) (forall (($generated@@159 T@T) ($generated@@160 T@T) ) (! (= ($generated@@118 ($generated@@114 $generated@@159 $generated@@160)) $generated@@160)
 :pattern ( ($generated@@114 $generated@@159 $generated@@160))
))))
(assert (forall (($generated@@161 T@U) ($generated@@162 T@U) ($generated@@163 T@U) ($generated@@164 Bool) ($generated@@165 T@U) ($generated@@166 T@U) ) (! (= ($generated@@15 ($generated@@108 $generated@@109 $generated@@110 $generated@@11 ($generated@@111 $generated@@161 $generated@@162 $generated@@163 $generated@@164) $generated@@165 $generated@@166))  (=> (and (or (not (= $generated@@165 $generated@@161)) (not true)) ($generated@@15 ($generated@@72 $generated@@11 ($generated@@112 $generated@@110 $generated@@113 ($generated@@112 $generated@@109 ($generated@@114 $generated@@110 $generated@@113) $generated@@162 $generated@@165) $generated@@163)))) $generated@@164))
 :pattern ( ($generated@@108 $generated@@109 $generated@@110 $generated@@11 ($generated@@111 $generated@@161 $generated@@162 $generated@@163 $generated@@164) $generated@@165 $generated@@166))
)))
(assert (forall (($generated@@168 T@U) ($generated@@169 T@U) ) (!  (=> (and ($generated@@167 $generated@@169) ($generated@@29 $generated@@30 $generated@@168 $generated@@33)) ($generated@@51 $generated@@30 $generated@@168 $generated@@33 $generated@@169))
 :pattern ( ($generated@@51 $generated@@30 $generated@@168 $generated@@33 $generated@@169))
)))
(assert (forall (($generated@@170 T@U) ($generated@@171 T@U) ) (!  (=> (and ($generated@@167 $generated@@171) ($generated@@29 $generated@@30 $generated@@170 $generated@@31)) ($generated@@51 $generated@@30 $generated@@170 $generated@@31 $generated@@171))
 :pattern ( ($generated@@51 $generated@@30 $generated@@170 $generated@@31 $generated@@171))
)))
(assert (= ($generated@@172 $generated@@52) $generated@@0))
(assert (= ($generated@@173 $generated@@52) $generated@@7))
(assert (= ($generated@@172 $generated@@31) $generated@@1))
(assert (= ($generated@@173 $generated@@31) $generated@@8))
(assert (= ($generated@@172 $generated@@33) $generated@@2))
(assert (= ($generated@@173 $generated@@33) $generated@@9))
(assert  (=> (<= 1 $generated@@26) (forall (($generated@@174 T@U) ($generated@@175 T@U) ($generated@@176 Int) ) (!  (=> (or ($generated@@28 $generated@@175 $generated@@176) (and (< 1 $generated@@26) (and ($generated@@29 $generated@@30 $generated@@175 $generated@@31) (<= ($generated@@32 0) $generated@@176)))) (and ($generated@@38 $generated@@175 $generated@@176) (= ($generated@@27 ($generated@@42 $generated@@174) $generated@@175 $generated@@176) ($generated@@57 $generated@@30 ($generated@@58 ($generated@@32 0))))))
 :pattern ( ($generated@@27 ($generated@@42 $generated@@174) $generated@@175 $generated@@176))
))))
(assert (= $generated@@45 ($generated@@57 $generated@@30 $generated@@45)))
(assert (= $generated@@56 ($generated@@57 $generated@@30 $generated@@56)))
(assert  (=> (<= 1 $generated@@26) (forall (($generated@@177 T@U) ($generated@@178 T@U) ($generated@@179 Int) ) (!  (=> (or ($generated@@28 ($generated@@57 $generated@@30 $generated@@178) ($generated@@32 $generated@@179)) (and (< 1 $generated@@26) (and ($generated@@29 $generated@@30 $generated@@178 $generated@@31) (<= ($generated@@32 0) $generated@@179)))) (and ($generated@@38 ($generated@@57 $generated@@30 $generated@@178) ($generated@@32 $generated@@179)) (= ($generated@@27 ($generated@@42 $generated@@177) ($generated@@57 $generated@@30 $generated@@178) ($generated@@32 $generated@@179)) ($generated@@57 $generated@@30 ($generated@@58 ($generated@@32 0))))))
 :weight 3
 :pattern ( ($generated@@27 ($generated@@42 $generated@@177) ($generated@@57 $generated@@30 $generated@@178) ($generated@@32 $generated@@179)))
))))
(assert (forall (($generated@@180 T@U) ($generated@@181 T@U) ) (!  (=> (and ($generated@@167 $generated@@181) (and ($generated@@65 $generated@@180) ($generated@@51 $generated@@30 $generated@@180 $generated@@33 $generated@@181))) ($generated@@51 $generated@@12 ($generated@@16 ($generated@@100 $generated@@180)) $generated@@52 $generated@@181))
 :pattern ( ($generated@@51 $generated@@12 ($generated@@16 ($generated@@100 $generated@@180)) $generated@@52 $generated@@181))
)))
(assert (forall (($generated@@182 T@U) ($generated@@183 T@U) ) (!  (=> (and ($generated@@167 $generated@@183) (and ($generated@@43 $generated@@182) ($generated@@51 $generated@@30 $generated@@182 $generated@@31 $generated@@183))) ($generated@@51 $generated@@30 ($generated@@44 $generated@@182) $generated@@31 $generated@@183))
 :pattern ( ($generated@@51 $generated@@30 ($generated@@44 $generated@@182) $generated@@31 $generated@@183))
)))
(assert (forall (($generated@@184 Int) ) (! (= ($generated@@73 $generated@@12 ($generated@@16 ($generated@@32 $generated@@184))) ($generated@@57 $generated@@113 ($generated@@73 $generated@@12 ($generated@@16 $generated@@184))))
 :pattern ( ($generated@@73 $generated@@12 ($generated@@16 ($generated@@32 $generated@@184))))
)))
(assert (forall (($generated@@185 Int) ) (! (= ($generated@@58 ($generated@@32 $generated@@185)) ($generated@@57 $generated@@30 ($generated@@58 $generated@@185)))
 :pattern ( ($generated@@58 ($generated@@32 $generated@@185)))
)))
(assert (forall (($generated@@186 T@U) ) (! (= ($generated@@85 ($generated@@57 $generated@@30 $generated@@186)) ($generated@@57 $generated@@30 ($generated@@85 $generated@@186)))
 :pattern ( ($generated@@85 ($generated@@57 $generated@@30 $generated@@186)))
)))
(assert (forall (($generated@@187 T@U) ($generated@@188 T@T) ) (! (= ($generated@@73 $generated@@188 ($generated@@57 $generated@@188 $generated@@187)) ($generated@@57 $generated@@113 ($generated@@73 $generated@@188 $generated@@187)))
 :pattern ( ($generated@@73 $generated@@188 ($generated@@57 $generated@@188 $generated@@187)))
)))
(assert  (=> (<= 1 $generated@@26) (forall (($generated@@189 T@U) ($generated@@190 T@U) ($generated@@191 Int) ) (!  (=> (or ($generated@@38 ($generated@@57 $generated@@30 $generated@@190) ($generated@@32 $generated@@191)) (and (< 1 $generated@@26) (and ($generated@@29 $generated@@30 $generated@@190 $generated@@31) (<= ($generated@@32 0) $generated@@191)))) (and (=> (or (not (= ($generated@@32 $generated@@191) ($generated@@32 0))) (not true)) (let (($generated@@192 ($generated@@32 (- $generated@@191 1))))
 (=> ($generated@@15 ($generated@@57 $generated@@11 ($generated@@14 ($generated@@43 ($generated@@57 $generated@@30 $generated@@190))))) ($generated@@28 ($generated@@57 $generated@@30 ($generated@@44 ($generated@@57 $generated@@30 $generated@@190))) $generated@@192)))) (= ($generated@@37 ($generated@@42 $generated@@189) ($generated@@57 $generated@@30 $generated@@190) ($generated@@32 $generated@@191)) (ite (= ($generated@@32 $generated@@191) ($generated@@32 0)) $generated@@45 (let (($generated@@193 ($generated@@32 (- $generated@@191 1))))
(ite ($generated@@43 ($generated@@57 $generated@@30 $generated@@190)) ($generated@@57 $generated@@30 ($generated@@27 ($generated@@42 $generated@@189) ($generated@@57 $generated@@30 ($generated@@44 ($generated@@57 $generated@@30 $generated@@190))) $generated@@193)) $generated@@45))))))
 :weight 3
 :pattern ( ($generated@@37 ($generated@@42 $generated@@189) ($generated@@57 $generated@@30 $generated@@190) ($generated@@32 $generated@@191)))
))))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@194 () T@U)
(declare-fun $generated@@195 () T@U)
(declare-fun $generated@@196 () Int)
(declare-fun $generated@@197 () T@U)
(declare-fun $generated@@198 () T@U)
(declare-fun $generated@@199 () T@U)
(declare-fun $generated@@200 () T@U)
(declare-fun $generated@@201 () T@U)
(declare-fun $generated@@202 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 8) (let (($generated@@203  (=> (and ($generated@@51 $generated@@30 $generated@@194 $generated@@31 $generated@@195) ($generated@@51 $generated@@12 ($generated@@16 $generated@@196) $generated@@52 $generated@@195)) (and (=> (= (ControlFlow 0 3) (- 0 6)) (or (<= 0 $generated@@196) (= $generated@@196 $generated@@196))) (=> (or (<= 0 $generated@@196) (= $generated@@196 $generated@@196)) (and (=> (= (ControlFlow 0 3) (- 0 5)) (or (or (<= 0 ($generated@@32 3)) (< $generated@@196 $generated@@196)) (= ($generated@@32 0) ($generated@@32 3)))) (=> (or (or (<= 0 ($generated@@32 3)) (< $generated@@196 $generated@@196)) (= ($generated@@32 0) ($generated@@32 3))) (and (=> (= (ControlFlow 0 3) (- 0 4)) (or (< $generated@@196 $generated@@196) (and (= $generated@@196 $generated@@196) (< ($generated@@32 0) ($generated@@32 3))))) (=> (or (< $generated@@196 $generated@@196) (and (= $generated@@196 $generated@@196) (< ($generated@@32 0) ($generated@@32 3)))) (=> (and ($generated@@38 $generated@@194 $generated@@196) (= $generated@@197 ($generated@@37 ($generated@@42 $generated@@198) $generated@@194 $generated@@196))) (=> (and (and ($generated@@38 $generated@@194 $generated@@196) ($generated@@29 $generated@@30 $generated@@197 $generated@@33)) (and (= $generated@@199 $generated@@197) (= (ControlFlow 0 3) (- 0 2)))) ($generated@@29 $generated@@12 ($generated@@16 ($generated@@32 0)) $generated@@52))))))))))))
(let (($generated@@204 true))
(let (($generated@@205  (=> (= $generated@@200 ($generated@@111 $generated@@201 $generated@@195 $generated false)) (and (=> (= (ControlFlow 0 7) 1) $generated@@204) (=> (= (ControlFlow 0 7) 3) $generated@@203)))))
(let (($generated@@206  (=> (and ($generated@@167 $generated@@195) ($generated@@202 $generated@@195)) (=> (and (and ($generated@@29 $generated@@30 $generated@@194 $generated@@31) (<= ($generated@@32 0) $generated@@196)) (and (= 1 $generated@@26) (= (ControlFlow 0 8) 7))) $generated@@205))))
$generated@@206)))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
