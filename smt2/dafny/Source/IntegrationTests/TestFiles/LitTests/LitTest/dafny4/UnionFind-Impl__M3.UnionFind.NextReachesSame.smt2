(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TagSet () T@U)
(declare-fun TagMap () T@U)
(declare-fun alloc () T@U)
(declare-fun allocName () T@U)
(declare-fun Tagclass._System.nat () T@U)
(declare-fun Tagclass._System.object? () T@U)
(declare-fun Tagclass._System.object () T@U)
(declare-fun |##_System._tuple#2._#Make2| () T@U)
(declare-fun Tagclass._System.Tuple2 () T@U)
(declare-fun Tagclass.M3.Element () T@U)
(declare-fun Tagclass.M3.Contents () T@U)
(declare-fun Tagclass.M3.Element? () T@U)
(declare-fun class.M3.UnionFind? () T@U)
(declare-fun Tagclass.M3.UnionFind? () T@U)
(declare-fun Tagclass.M3.UnionFind () T@U)
(declare-fun |##M3.Contents.Root| () T@U)
(declare-fun |##M3.Contents.Link| () T@U)
(declare-fun class.M3.Element? () T@U)
(declare-fun tytagFamily$nat () T@U)
(declare-fun tytagFamily$object () T@U)
(declare-fun |tytagFamily$_tuple#2| () T@U)
(declare-fun tytagFamily$Element () T@U)
(declare-fun tytagFamily$Contents () T@U)
(declare-fun tytagFamily$UnionFind () T@U)
(declare-fun field$Repr () T@U)
(declare-fun field$M () T@U)
(declare-fun field$c () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun FDim (T@U) Int)
(declare-fun DeclName (T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun M3.UnionFind.ValidM1 (T@U T@U) Bool)
(declare-fun |M3.UnionFind.ValidM1#canCall| (T@U T@U) Bool)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun null () T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun Tclass.M3.UnionFind () T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun |Map#Equal| (T@U T@U) Bool)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType () T@T)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun M3.UnionFind.M () T@U)
(declare-fun |Map#Empty| () T@U)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun Tclass._System.nat () T@U)
(declare-fun |lambda#2| (T@U T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun |Map#Domain| (T@U) T@U)
(declare-fun |Map#Glue| (T@U T@U T@U) T@U)
(declare-fun |Map#Elements| (T@U) T@U)
(declare-fun _System.Tuple2.___hMake2_q (T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun Tclass._System.Tuple2 (T@U T@U) T@U)
(declare-fun Tclass.M3.UnionFind? () T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun Tclass.M3.Element? () T@U)
(declare-fun Tclass._System.object () T@U)
(declare-fun Tclass._System.object? () T@U)
(declare-fun Tclass.M3.Element () T@U)
(declare-fun M3.UnionFind.Repr () T@U)
(declare-fun FieldOfDecl (T@U T@U) T@U)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun |#_System._tuple#2._#Make2| (T@U T@U) T@U)
(declare-fun M3.__default.GoodCMap (T@U) Bool)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun |M3.__default.GoodCMap#canCall| (T@U) Bool)
(declare-fun TMap (T@U T@U) T@U)
(declare-fun Tclass.M3.Contents () T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun M3.Contents.Link_q (T@U) Bool)
(declare-fun M3.Contents.next (T@U) T@U)
(declare-fun M3.Element.c () T@U)
(declare-fun M3.UnionFind.Collect (T@U T@U) T@U)
(declare-fun |M3.UnionFind.Collect#canCall| (T@U T@U) Bool)
(declare-fun |Set#FromBoogieMap| (T@U) T@U)
(declare-fun |lambda#36| (T@U T@U) T@U)
(declare-fun LitInt (Int) Int)
(declare-fun |Set#Subset| (T@U T@U) Bool)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun M3.Contents.Root_q (T@U) Bool)
(declare-fun M3.UnionFind.Valid (T@U T@U) Bool)
(declare-fun |M3.UnionFind.Valid#canCall| (T@U T@U) Bool)
(declare-fun SetType () T@T)
(declare-fun TSet (T@U) T@U)
(declare-fun |#M3.Contents.Root| (Int) T@U)
(declare-fun |#M3.Contents.Link| (T@U) T@U)
(declare-fun M3.UnionFind.Reaches (T@U T@U Int T@U T@U T@U) Bool)
(declare-fun $LS (T@U) T@U)
(declare-fun |M3.UnionFind.Reaches#canCall| (T@U Int T@U T@U T@U) Bool)
(declare-fun DeclType (T@U) T@U)
(declare-fun Inv0_TMap (T@U) T@U)
(declare-fun Inv1_TMap (T@U) T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun Tclass._System.Tuple2_0 (T@U) T@U)
(declare-fun Tclass._System.Tuple2_1 (T@U) T@U)
(declare-fun _System.Tuple2._0 (T@U) T@U)
(declare-fun _System.Tuple2._1 (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun M3.Contents.depth (T@U) Int)
(declare-fun BoxRank (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun $LZ () T@U)
(declare-fun |Map#Values| (T@U) T@U)
(declare-fun |Map#Items| (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TagSet TagMap alloc allocName Tagclass._System.nat Tagclass._System.object? Tagclass._System.object |##_System._tuple#2._#Make2| Tagclass._System.Tuple2 Tagclass.M3.Element Tagclass.M3.Contents Tagclass.M3.Element? class.M3.UnionFind? Tagclass.M3.UnionFind? Tagclass.M3.UnionFind |##M3.Contents.Root| |##M3.Contents.Link| class.M3.Element? tytagFamily$nat tytagFamily$object |tytagFamily$_tuple#2| tytagFamily$Element tytagFamily$Contents tytagFamily$UnionFind field$Repr field$M field$c)
)
(assert (= (FDim alloc) 0))
(assert (= (DeclName alloc) allocName))
(assert  (and (and (and (and (and (and (and (and (= (Ctor refType) 3) (= (Ctor MapType) 4)) (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
))) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 5)) (= (Ctor BoxType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert  (=> (<= 5 $FunctionContextHeight) (forall (($Heap T@U) (this T@U) ) (!  (=> (or (|M3.UnionFind.ValidM1#canCall| $Heap this) (and (< 5 $FunctionContextHeight) (and ($IsGoodHeap $Heap) (and (or (not (= this null)) (not true)) (and ($Is refType this Tclass.M3.UnionFind) ($IsAlloc refType this Tclass.M3.UnionFind $Heap)))))) (=> (|Map#Equal| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) M3.UnionFind.M)) |Map#Empty|) (M3.UnionFind.ValidM1 $Heap this)))
 :pattern ( (M3.UnionFind.ValidM1 $Heap this))
))))
(assert (forall ((|x#0| T@U) ($h T@U) ) (! ($IsAlloc intType |x#0| Tclass._System.nat $h)
 :pattern ( ($IsAlloc intType |x#0| Tclass._System.nat $h))
)))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|$w#0| T@U) ) (! (= (U_2_bool (MapType0Select BoxType boolType (|lambda#2| |l#0| |l#1|) |$w#0|))  (and ($IsBox |$w#0| |l#0|) (|Set#IsMember| |l#1| |$w#0|)))
 :pattern ( (MapType0Select BoxType boolType (|lambda#2| |l#0| |l#1|) |$w#0|))
)))
(assert (forall ((a T@U) (b T@U) (t T@U) ) (! (= (|Map#Domain| (|Map#Glue| a b t)) a)
 :pattern ( (|Map#Domain| (|Map#Glue| a b t)))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) (t@@0 T@U) ) (! (= (|Map#Elements| (|Map#Glue| a@@0 b@@0 t@@0)) b@@0)
 :pattern ( (|Map#Elements| (|Map#Glue| a@@0 b@@0 t@@0)))
)))
(assert (= (Ctor DatatypeTypeType) 8))
(assert (forall ((|_System._tuple#2$T0| T@U) (|_System._tuple#2$T1| T@U) (d T@U) ) (!  (=> ($Is DatatypeTypeType d (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)) (_System.Tuple2.___hMake2_q d))
 :pattern ( (_System.Tuple2.___hMake2_q d) ($Is DatatypeTypeType d (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)))
)))
(assert (forall (($o T@U) ) (! (= ($Is refType $o Tclass.M3.UnionFind?)  (or (= $o null) (= (dtype $o) Tclass.M3.UnionFind?)))
 :pattern ( ($Is refType $o Tclass.M3.UnionFind?))
)))
(assert (forall (($o@@0 T@U) ) (! (= ($Is refType $o@@0 Tclass.M3.Element?)  (or (= $o@@0 null) (= (dtype $o@@0) Tclass.M3.Element?)))
 :pattern ( ($Is refType $o@@0 Tclass.M3.Element?))
)))
(assert (forall ((|c#0| T@U) ($h@@0 T@U) ) (! (= ($IsAlloc refType |c#0| Tclass._System.object $h@@0) ($IsAlloc refType |c#0| Tclass._System.object? $h@@0))
 :pattern ( ($IsAlloc refType |c#0| Tclass._System.object $h@@0))
 :pattern ( ($IsAlloc refType |c#0| Tclass._System.object? $h@@0))
)))
(assert (forall ((|c#0@@0| T@U) ($h@@1 T@U) ) (! (= ($IsAlloc refType |c#0@@0| Tclass.M3.UnionFind $h@@1) ($IsAlloc refType |c#0@@0| Tclass.M3.UnionFind? $h@@1))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass.M3.UnionFind $h@@1))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass.M3.UnionFind? $h@@1))
)))
(assert (forall ((|c#0@@1| T@U) ($h@@2 T@U) ) (! (= ($IsAlloc refType |c#0@@1| Tclass.M3.Element $h@@2) ($IsAlloc refType |c#0@@1| Tclass.M3.Element? $h@@2))
 :pattern ( ($IsAlloc refType |c#0@@1| Tclass.M3.Element $h@@2))
 :pattern ( ($IsAlloc refType |c#0@@1| Tclass.M3.Element? $h@@2))
)))
(assert (= (FDim M3.UnionFind.Repr) 0))
(assert (= (FieldOfDecl class.M3.UnionFind? field$Repr) M3.UnionFind.Repr))
(assert ($IsGhostField M3.UnionFind.Repr))
(assert (= (FDim M3.UnionFind.M) 0))
(assert (= (FieldOfDecl class.M3.UnionFind? field$M) M3.UnionFind.M))
(assert ($IsGhostField M3.UnionFind.M))
(assert (forall ((|_System._tuple#2$T0@@0| T@U) (|_System._tuple#2$T1@@0| T@U) (|a#2#0#0| T@U) (|a#2#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|))  (and ($IsBox |a#2#0#0| |_System._tuple#2$T0@@0|) ($IsBox |a#2#1#0| |_System._tuple#2$T1@@0|)))
 :pattern ( ($Is DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|)))
)))
(assert  (=> (<= 3 $FunctionContextHeight) (forall ((|C#0| T@U) ) (!  (=> (or (|M3.__default.GoodCMap#canCall| (Lit MapType |C#0|)) (and (< 3 $FunctionContextHeight) ($Is MapType |C#0| (TMap Tclass.M3.Element Tclass.M3.Contents)))) (= (M3.__default.GoodCMap (Lit MapType |C#0|)) (forall ((|f#1| T@U) ) (!  (=> ($Is refType |f#1| Tclass.M3.Element?) (=> (and (|Set#IsMember| (|Map#Domain| |C#0|) ($Box refType |f#1|)) (M3.Contents.Link_q ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| (Lit MapType |C#0|)) ($Box refType |f#1|))))) (|Set#IsMember| (|Map#Domain| |C#0|) ($Box refType (M3.Contents.next ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| (Lit MapType |C#0|)) ($Box refType |f#1|))))))))
 :pattern ( ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |C#0|) ($Box refType |f#1|))))
))))
 :weight 3
 :pattern ( (M3.__default.GoodCMap (Lit MapType |C#0|)))
))))
(assert (= (FDim M3.Element.c) 0))
(assert (= (FieldOfDecl class.M3.Element? field$c) M3.Element.c))
(assert  (not ($IsGhostField M3.Element.c)))
(assert  (=> (<= 4 $FunctionContextHeight) (forall (($Heap@@0 T@U) (this@@0 T@U) ) (!  (=> (or (|M3.UnionFind.Collect#canCall| $Heap@@0 this@@0) (and (< 4 $FunctionContextHeight) (and (and ($IsGoodHeap $Heap@@0) (and (or (not (= this@@0 null)) (not true)) (and ($Is refType this@@0 Tclass.M3.UnionFind) ($IsAlloc refType this@@0 Tclass.M3.UnionFind $Heap@@0)))) (forall ((|f#1@@0| T@U) ) (!  (=> ($Is refType |f#1@@0| Tclass.M3.Element) (=> (and (|Set#IsMember| (|Map#Domain| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@0) M3.UnionFind.M))) ($Box refType |f#1@@0|)) (M3.Contents.Link_q ($Unbox DatatypeTypeType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 |f#1@@0|) M3.Element.c)))) (|Set#IsMember| (|Map#Domain| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@0) M3.UnionFind.M))) ($Box refType (M3.Contents.next ($Unbox DatatypeTypeType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 |f#1@@0|) M3.Element.c)))))))
 :pattern ( ($Unbox DatatypeTypeType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 |f#1@@0|) M3.Element.c)))
))))) (= (M3.UnionFind.Collect $Heap@@0 this@@0) (|Map#Glue| (|Set#FromBoogieMap| (|lambda#2| Tclass.M3.Element (|Map#Domain| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@0) M3.UnionFind.M))))) (|lambda#36| $Heap@@0 M3.Element.c) (TMap Tclass.M3.Element Tclass.M3.Contents))))
 :pattern ( (M3.UnionFind.Collect $Heap@@0 this@@0) ($IsGoodHeap $Heap@@0))
))))
(assert (forall (($o@@1 T@U) ($h@@3 T@U) ) (! (= ($IsAlloc refType $o@@1 Tclass._System.object? $h@@3)  (or (= $o@@1 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@3 $o@@1) alloc)))))
 :pattern ( ($IsAlloc refType $o@@1 Tclass._System.object? $h@@3))
)))
(assert (forall (($o@@2 T@U) ($h@@4 T@U) ) (! (= ($IsAlloc refType $o@@2 Tclass.M3.UnionFind? $h@@4)  (or (= $o@@2 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@4 $o@@2) alloc)))))
 :pattern ( ($IsAlloc refType $o@@2 Tclass.M3.UnionFind? $h@@4))
)))
(assert (forall (($o@@3 T@U) ($h@@5 T@U) ) (! (= ($IsAlloc refType $o@@3 Tclass.M3.Element? $h@@5)  (or (= $o@@3 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@5 $o@@3) alloc)))))
 :pattern ( ($IsAlloc refType $o@@3 Tclass.M3.Element? $h@@5))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((a@@1 T@U) (b@@1 T@U) (t0@@0 T@U) (t1@@0 T@U) ) (!  (=> (forall ((bx T@U) )  (=> (|Set#IsMember| a@@1 bx) (and ($IsBox bx t0@@0) ($IsBox (MapType0Select BoxType BoxType b@@1 bx) t1@@0)))) ($Is MapType (|Map#Glue| a@@1 b@@1 (TMap t0@@0 t1@@0)) (TMap t0@@0 t1@@0)))
 :pattern ( (|Map#Glue| a@@1 b@@1 (TMap t0@@0 t1@@0)))
)))
(assert (forall ((a@@2 T@U) (b@@2 T@U) ) (! (= (|Set#Subset| a@@2 b@@2) (forall ((o T@U) ) (!  (=> (|Set#IsMember| a@@2 o) (|Set#IsMember| b@@2 o))
 :pattern ( (|Set#IsMember| a@@2 o))
 :pattern ( (|Set#IsMember| b@@2 o))
)))
 :pattern ( (|Set#Subset| a@@2 b@@2))
)))
(assert (forall ((|_System._tuple#2$T0@@1| T@U) (|_System._tuple#2$T1@@1| T@U) (|a#2#0#0@@0| T@U) (|a#2#1#0@@0| T@U) ($h@@6 T@U) ) (!  (=> ($IsGoodHeap $h@@6) (= ($IsAlloc DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0@@0| |a#2#1#0@@0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|) $h@@6)  (and ($IsAllocBox |a#2#0#0@@0| |_System._tuple#2$T0@@1| $h@@6) ($IsAllocBox |a#2#1#0@@0| |_System._tuple#2$T1@@1| $h@@6))))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0@@0| |a#2#1#0@@0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|) $h@@6))
)))
(assert (forall ((d@@0 T@U) ) (! (= (_System.Tuple2.___hMake2_q d@@0) (= (DatatypeCtorId d@@0) |##_System._tuple#2._#Make2|))
 :pattern ( (_System.Tuple2.___hMake2_q d@@0))
)))
(assert (forall ((d@@1 T@U) ) (! (= (M3.Contents.Root_q d@@1) (= (DatatypeCtorId d@@1) |##M3.Contents.Root|))
 :pattern ( (M3.Contents.Root_q d@@1))
)))
(assert (forall ((d@@2 T@U) ) (! (= (M3.Contents.Link_q d@@2) (= (DatatypeCtorId d@@2) |##M3.Contents.Link|))
 :pattern ( (M3.Contents.Link_q d@@2))
)))
(assert (= (Ctor SetType) 9))
(assert  (=> (<= 6 $FunctionContextHeight) (forall (($Heap@@1 T@U) (this@@1 T@U) ) (!  (=> (or (|M3.UnionFind.Valid#canCall| $Heap@@1 this@@1) (and (< 6 $FunctionContextHeight) (and ($IsGoodHeap $Heap@@1) (and (or (not (= this@@1 null)) (not true)) (and ($Is refType this@@1 Tclass.M3.UnionFind) ($IsAlloc refType this@@1 Tclass.M3.UnionFind $Heap@@1)))))) (and (=> (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 this@@1) M3.UnionFind.Repr)) ($Box refType this@@1)) (=> (not (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 this@@1) M3.UnionFind.Repr)) ($Box refType null))) (|M3.UnionFind.ValidM1#canCall| $Heap@@1 this@@1))) (= (M3.UnionFind.Valid $Heap@@1 this@@1)  (and (and (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 this@@1) M3.UnionFind.Repr)) ($Box refType this@@1)) (not (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 this@@1) M3.UnionFind.Repr)) ($Box refType null)))) (M3.UnionFind.ValidM1 $Heap@@1 this@@1)))))
 :pattern ( (M3.UnionFind.Valid $Heap@@1 this@@1) ($IsGoodHeap $Heap@@1))
))))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((m@@1 T@U) (bx@@0 T@U) ) (! (= (|Set#IsMember| (|Set#FromBoogieMap| m@@1) bx@@0) (U_2_bool (MapType0Select BoxType boolType m@@1 bx@@0)))
 :pattern ( (|Set#IsMember| (|Set#FromBoogieMap| m@@1) bx@@0))
)))
(assert (forall ((d@@3 T@U) ) (!  (=> (_System.Tuple2.___hMake2_q d@@3) (exists ((|a#1#0#0| T@U) (|a#1#1#0| T@U) ) (= d@@3 (|#_System._tuple#2._#Make2| |a#1#0#0| |a#1#1#0|))))
 :pattern ( (_System.Tuple2.___hMake2_q d@@3))
)))
(assert (forall ((v T@U) (t0@@1 T@U) ) (! (= ($Is SetType v (TSet t0@@1)) (forall ((bx@@1 T@U) ) (!  (=> (|Set#IsMember| v bx@@1) ($IsBox bx@@1 t0@@1))
 :pattern ( (|Set#IsMember| v bx@@1))
)))
 :pattern ( ($Is SetType v (TSet t0@@1)))
)))
(assert  (=> (<= 4 $FunctionContextHeight) (forall (($Heap@@2 T@U) (this@@2 T@U) ) (!  (=> (or (|M3.UnionFind.Collect#canCall| $Heap@@2 this@@2) (and (< 4 $FunctionContextHeight) (and (and ($IsGoodHeap $Heap@@2) (and (or (not (= this@@2 null)) (not true)) (and ($Is refType this@@2 Tclass.M3.UnionFind) ($IsAlloc refType this@@2 Tclass.M3.UnionFind $Heap@@2)))) (forall ((|f#0| T@U) ) (!  (=> ($Is refType |f#0| Tclass.M3.Element) (=> (and (|Set#IsMember| (|Map#Domain| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@2 this@@2) M3.UnionFind.M))) ($Box refType |f#0|)) (M3.Contents.Link_q ($Unbox DatatypeTypeType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@2 |f#0|) M3.Element.c)))) (|Set#IsMember| (|Map#Domain| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@2 this@@2) M3.UnionFind.M))) ($Box refType (M3.Contents.next ($Unbox DatatypeTypeType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@2 |f#0|) M3.Element.c)))))))
 :pattern ( ($Unbox DatatypeTypeType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@2 |f#0|) M3.Element.c)))
))))) (and (M3.__default.GoodCMap (M3.UnionFind.Collect $Heap@@2 this@@2)) ($Is MapType (M3.UnionFind.Collect $Heap@@2 this@@2) (TMap Tclass.M3.Element Tclass.M3.Contents))))
 :pattern ( (M3.UnionFind.Collect $Heap@@2 this@@2))
))))
(assert (forall ((d@@4 T@U) ) (!  (=> (M3.Contents.Root_q d@@4) (exists ((|a#1#0#0@@0| Int) ) (= d@@4 (|#M3.Contents.Root| |a#1#0#0@@0|))))
 :pattern ( (M3.Contents.Root_q d@@4))
)))
(assert (forall ((d@@5 T@U) ) (!  (=> (M3.Contents.Link_q d@@5) (exists ((|a#6#0#0| T@U) ) (= d@@5 (|#M3.Contents.Link| |a#6#0#0|))))
 :pattern ( (M3.Contents.Link_q d@@5))
)))
(assert (forall ((|x#0@@0| T@U) ) (! (= ($Is intType |x#0@@0| Tclass._System.nat) (<= (LitInt 0) (U_2_int |x#0@@0|)))
 :pattern ( ($Is intType |x#0@@0| Tclass._System.nat))
)))
(assert ($IsGhostField alloc))
(assert (forall ((v@@0 T@U) (t@@1 T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t@@1 h) ($IsAlloc T@@1 v@@0 t@@1 h))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t@@1 h))
)))
(assert  (=> (<= 4 $FunctionContextHeight) (forall (($ly T@U) (this@@3 T@U) (|d#0| Int) (|e#0| T@U) (|r#0| T@U) (|C#0@@0| T@U) ) (!  (=> (or (|M3.UnionFind.Reaches#canCall| (Lit refType this@@3) (LitInt |d#0|) (Lit refType |e#0|) (Lit refType |r#0|) (Lit MapType |C#0@@0|)) (and (< 4 $FunctionContextHeight) (and (and (and (and (and (and (or (not (= this@@3 null)) (not true)) ($Is refType this@@3 Tclass.M3.UnionFind)) (<= (LitInt 0) |d#0|)) ($Is refType |e#0| Tclass.M3.Element)) ($Is refType |r#0| Tclass.M3.Element)) ($Is MapType |C#0@@0| (TMap Tclass.M3.Element Tclass.M3.Contents))) (and (U_2_bool (Lit boolType (bool_2_U (M3.__default.GoodCMap (Lit MapType |C#0@@0|))))) (|Set#IsMember| (|Map#Domain| |C#0@@0|) ($Box refType |e#0|)))))) (and (=> (not (M3.Contents.Root_q ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| (Lit MapType |C#0@@0|)) ($Box refType (Lit refType |e#0|)))))) (let ((|next#5| (M3.Contents.next ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| (Lit MapType |C#0@@0|)) ($Box refType (Lit refType |e#0|)))))))
 (=> (U_2_bool (Lit boolType (bool_2_U  (or (not (= |d#0| 0)) (not true))))) (|M3.UnionFind.Reaches#canCall| (Lit refType this@@3) (LitInt (- |d#0| 1)) |next#5| (Lit refType |r#0|) (Lit MapType |C#0@@0|))))) (= (M3.UnionFind.Reaches ($LS $ly) (Lit refType this@@3) (LitInt |d#0|) (Lit refType |e#0|) (Lit refType |r#0|) (Lit MapType |C#0@@0|)) (ite (M3.Contents.Root_q ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| (Lit MapType |C#0@@0|)) ($Box refType (Lit refType |e#0|))))) (= (Lit refType |e#0|) (Lit refType |r#0|)) (let ((|next#4| (M3.Contents.next ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| (Lit MapType |C#0@@0|)) ($Box refType (Lit refType |e#0|)))))))
 (and (or (not (= |d#0| 0)) (not true)) (M3.UnionFind.Reaches ($LS $ly) (Lit refType this@@3) (LitInt (- |d#0| 1)) |next#4| (Lit refType |r#0|) (Lit MapType |C#0@@0|))))))))
 :weight 3
 :pattern ( (M3.UnionFind.Reaches ($LS $ly) (Lit refType this@@3) (LitInt |d#0|) (Lit refType |e#0|) (Lit refType |r#0|) (Lit MapType |C#0@@0|)))
))))
(assert (forall (($h@@7 T@U) ($o@@4 T@U) ) (!  (=> (and ($IsGoodHeap $h@@7) (and (or (not (= $o@@4 null)) (not true)) (= (dtype $o@@4) Tclass.M3.Element?))) ($Is DatatypeTypeType ($Unbox DatatypeTypeType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@7 $o@@4) M3.Element.c)) Tclass.M3.Contents))
 :pattern ( ($Unbox DatatypeTypeType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@7 $o@@4) M3.Element.c)))
)))
(assert (forall ((bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 Tclass._System.nat) (and (= ($Box intType ($Unbox intType bx@@2)) bx@@2) ($Is intType ($Unbox intType bx@@2) Tclass._System.nat)))
 :pattern ( ($IsBox bx@@2 Tclass._System.nat))
)))
(assert (forall ((bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 Tclass._System.object?) (and (= ($Box refType ($Unbox refType bx@@3)) bx@@3) ($Is refType ($Unbox refType bx@@3) Tclass._System.object?)))
 :pattern ( ($IsBox bx@@3 Tclass._System.object?))
)))
(assert (forall ((bx@@4 T@U) ) (!  (=> ($IsBox bx@@4 Tclass._System.object) (and (= ($Box refType ($Unbox refType bx@@4)) bx@@4) ($Is refType ($Unbox refType bx@@4) Tclass._System.object)))
 :pattern ( ($IsBox bx@@4 Tclass._System.object))
)))
(assert (forall ((bx@@5 T@U) ) (!  (=> ($IsBox bx@@5 Tclass.M3.Element) (and (= ($Box refType ($Unbox refType bx@@5)) bx@@5) ($Is refType ($Unbox refType bx@@5) Tclass.M3.Element)))
 :pattern ( ($IsBox bx@@5 Tclass.M3.Element))
)))
(assert (forall ((bx@@6 T@U) ) (!  (=> ($IsBox bx@@6 Tclass.M3.Contents) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@6)) bx@@6) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@6) Tclass.M3.Contents)))
 :pattern ( ($IsBox bx@@6 Tclass.M3.Contents))
)))
(assert (forall ((bx@@7 T@U) ) (!  (=> ($IsBox bx@@7 Tclass.M3.Element?) (and (= ($Box refType ($Unbox refType bx@@7)) bx@@7) ($Is refType ($Unbox refType bx@@7) Tclass.M3.Element?)))
 :pattern ( ($IsBox bx@@7 Tclass.M3.Element?))
)))
(assert (forall ((bx@@8 T@U) ) (!  (=> ($IsBox bx@@8 Tclass.M3.UnionFind?) (and (= ($Box refType ($Unbox refType bx@@8)) bx@@8) ($Is refType ($Unbox refType bx@@8) Tclass.M3.UnionFind?)))
 :pattern ( ($IsBox bx@@8 Tclass.M3.UnionFind?))
)))
(assert (forall ((bx@@9 T@U) ) (!  (=> ($IsBox bx@@9 Tclass.M3.UnionFind) (and (= ($Box refType ($Unbox refType bx@@9)) bx@@9) ($Is refType ($Unbox refType bx@@9) Tclass.M3.UnionFind)))
 :pattern ( ($IsBox bx@@9 Tclass.M3.UnionFind))
)))
(assert (forall ((|a#2#0#0@@1| Int) ) (! (= ($Is DatatypeTypeType (|#M3.Contents.Root| |a#2#0#0@@1|) Tclass.M3.Contents) ($Is intType (int_2_U |a#2#0#0@@1|) Tclass._System.nat))
 :pattern ( ($Is DatatypeTypeType (|#M3.Contents.Root| |a#2#0#0@@1|) Tclass.M3.Contents))
)))
(assert (forall ((|a#7#0#0| T@U) ) (! (= ($Is DatatypeTypeType (|#M3.Contents.Link| |a#7#0#0|) Tclass.M3.Contents) ($Is refType |a#7#0#0| Tclass.M3.Element))
 :pattern ( ($Is DatatypeTypeType (|#M3.Contents.Link| |a#7#0#0|) Tclass.M3.Contents))
)))
(assert (forall ((|c#0@@2| T@U) ) (! (= ($Is refType |c#0@@2| Tclass._System.object)  (and ($Is refType |c#0@@2| Tclass._System.object?) (or (not (= |c#0@@2| null)) (not true))))
 :pattern ( ($Is refType |c#0@@2| Tclass._System.object))
 :pattern ( ($Is refType |c#0@@2| Tclass._System.object?))
)))
(assert (forall ((|c#0@@3| T@U) ) (! (= ($Is refType |c#0@@3| Tclass.M3.UnionFind)  (and ($Is refType |c#0@@3| Tclass.M3.UnionFind?) (or (not (= |c#0@@3| null)) (not true))))
 :pattern ( ($Is refType |c#0@@3| Tclass.M3.UnionFind))
 :pattern ( ($Is refType |c#0@@3| Tclass.M3.UnionFind?))
)))
(assert (forall ((|c#0@@4| T@U) ) (! (= ($Is refType |c#0@@4| Tclass.M3.Element)  (and ($Is refType |c#0@@4| Tclass.M3.Element?) (or (not (= |c#0@@4| null)) (not true))))
 :pattern ( ($Is refType |c#0@@4| Tclass.M3.Element))
 :pattern ( ($Is refType |c#0@@4| Tclass.M3.Element?))
)))
(assert (forall (($h@@8 T@U) ($o@@5 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@8) (and (or (not (= $o@@5 null)) (not true)) (= (dtype $o@@5) Tclass.M3.Element?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@8 $o@@5) alloc)))) ($IsAlloc DatatypeTypeType ($Unbox DatatypeTypeType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@8 $o@@5) M3.Element.c)) Tclass.M3.Contents $h@@8))
 :pattern ( ($Unbox DatatypeTypeType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@8 $o@@5) M3.Element.c)))
)))
(assert (forall ((m@@2 T@U) (|m'| T@U) ) (! (= (|Map#Equal| m@@2 |m'|)  (and (forall ((u T@U) ) (= (|Set#IsMember| (|Map#Domain| m@@2) u) (|Set#IsMember| (|Map#Domain| |m'|) u))) (forall ((u@@0 T@U) )  (=> (|Set#IsMember| (|Map#Domain| m@@2) u@@0) (= (MapType0Select BoxType BoxType (|Map#Elements| m@@2) u@@0) (MapType0Select BoxType BoxType (|Map#Elements| |m'|) u@@0))))))
 :pattern ( (|Map#Equal| m@@2 |m'|))
)))
(assert (forall (($h@@9 T@U) ($o@@6 T@U) ) (!  (=> (and ($IsGoodHeap $h@@9) (and (or (not (= $o@@6 null)) (not true)) (= (dtype $o@@6) Tclass.M3.UnionFind?))) ($Is SetType ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@9 $o@@6) M3.UnionFind.Repr)) (TSet Tclass._System.object?)))
 :pattern ( ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@9 $o@@6) M3.UnionFind.Repr)))
)))
(assert (forall (($h@@10 T@U) ($o@@7 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@10) (and (or (not (= $o@@7 null)) (not true)) (= (dtype $o@@7) Tclass.M3.UnionFind?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@10 $o@@7) alloc)))) ($IsAlloc SetType ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@10 $o@@7) M3.UnionFind.Repr)) (TSet Tclass._System.object?) $h@@10))
 :pattern ( ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@10 $o@@7) M3.UnionFind.Repr)))
)))
(assert  (=> (<= 4 $FunctionContextHeight) (forall (($ly@@0 T@U) (this@@4 T@U) (|d#0@@0| Int) (|e#0@@0| T@U) (|r#0@@0| T@U) (|C#0@@1| T@U) ) (!  (=> (or (|M3.UnionFind.Reaches#canCall| this@@4 |d#0@@0| |e#0@@0| |r#0@@0| |C#0@@1|) (and (< 4 $FunctionContextHeight) (and (and (and (and (and (and (or (not (= this@@4 null)) (not true)) ($Is refType this@@4 Tclass.M3.UnionFind)) (<= (LitInt 0) |d#0@@0|)) ($Is refType |e#0@@0| Tclass.M3.Element)) ($Is refType |r#0@@0| Tclass.M3.Element)) ($Is MapType |C#0@@1| (TMap Tclass.M3.Element Tclass.M3.Contents))) (and (M3.__default.GoodCMap |C#0@@1|) (|Set#IsMember| (|Map#Domain| |C#0@@1|) ($Box refType |e#0@@0|)))))) (and (=> (not (M3.Contents.Root_q ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |C#0@@1|) ($Box refType |e#0@@0|))))) (let ((|next#1| (M3.Contents.next ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |C#0@@1|) ($Box refType |e#0@@0|))))))
 (=> (or (not (= |d#0@@0| 0)) (not true)) (|M3.UnionFind.Reaches#canCall| this@@4 (- |d#0@@0| 1) |next#1| |r#0@@0| |C#0@@1|)))) (= (M3.UnionFind.Reaches ($LS $ly@@0) this@@4 |d#0@@0| |e#0@@0| |r#0@@0| |C#0@@1|) (ite (M3.Contents.Root_q ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |C#0@@1|) ($Box refType |e#0@@0|)))) (= |e#0@@0| |r#0@@0|) (let ((|next#0| (M3.Contents.next ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |C#0@@1|) ($Box refType |e#0@@0|))))))
 (and (or (not (= |d#0@@0| 0)) (not true)) (M3.UnionFind.Reaches $ly@@0 this@@4 (- |d#0@@0| 1) |next#0| |r#0@@0| |C#0@@1|)))))))
 :pattern ( (M3.UnionFind.Reaches ($LS $ly@@0) this@@4 |d#0@@0| |e#0@@0| |r#0@@0| |C#0@@1|))
))))
(assert (forall (($h@@11 T@U) ($o@@8 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@11) (and (or (not (= $o@@8 null)) (not true)) (= (dtype $o@@8) Tclass.M3.UnionFind?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@11 $o@@8) alloc)))) ($IsAlloc MapType ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@11 $o@@8) M3.UnionFind.M)) (TMap Tclass.M3.Element Tclass.M3.Element) $h@@11))
 :pattern ( ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@11 $o@@8) M3.UnionFind.M)))
)))
(assert (forall (($h@@12 T@U) ($o@@9 T@U) ) (!  (=> (and ($IsGoodHeap $h@@12) (and (or (not (= $o@@9 null)) (not true)) (= (dtype $o@@9) Tclass.M3.UnionFind?))) ($Is MapType ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@12 $o@@9) M3.UnionFind.M)) (TMap Tclass.M3.Element Tclass.M3.Element)))
 :pattern ( ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@12 $o@@9) M3.UnionFind.M)))
)))
(assert (forall ((m@@3 T@U) (|m'@@0| T@U) ) (!  (=> (|Map#Equal| m@@3 |m'@@0|) (= m@@3 |m'@@0|))
 :pattern ( (|Map#Equal| m@@3 |m'@@0|))
)))
(assert (forall (($ly@@1 T@U) (this@@5 T@U) (|d#0@@1| Int) (|e#0@@1| T@U) (|r#0@@1| T@U) (|C#0@@2| T@U) ) (! (= (M3.UnionFind.Reaches ($LS $ly@@1) this@@5 |d#0@@1| |e#0@@1| |r#0@@1| |C#0@@2|) (M3.UnionFind.Reaches $ly@@1 this@@5 |d#0@@1| |e#0@@1| |r#0@@1| |C#0@@2|))
 :pattern ( (M3.UnionFind.Reaches ($LS $ly@@1) this@@5 |d#0@@1| |e#0@@1| |r#0@@1| |C#0@@2|))
)))
(assert (forall ((|a#2#0#0@@2| Int) ($h@@13 T@U) ) (!  (=> ($IsGoodHeap $h@@13) (= ($IsAlloc DatatypeTypeType (|#M3.Contents.Root| |a#2#0#0@@2|) Tclass.M3.Contents $h@@13) ($IsAlloc intType (int_2_U |a#2#0#0@@2|) Tclass._System.nat $h@@13)))
 :pattern ( ($IsAlloc DatatypeTypeType (|#M3.Contents.Root| |a#2#0#0@@2|) Tclass.M3.Contents $h@@13))
)))
(assert (forall ((|a#7#0#0@@0| T@U) ($h@@14 T@U) ) (!  (=> ($IsGoodHeap $h@@14) (= ($IsAlloc DatatypeTypeType (|#M3.Contents.Link| |a#7#0#0@@0|) Tclass.M3.Contents $h@@14) ($IsAlloc refType |a#7#0#0@@0| Tclass.M3.Element $h@@14)))
 :pattern ( ($IsAlloc DatatypeTypeType (|#M3.Contents.Link| |a#7#0#0@@0|) Tclass.M3.Contents $h@@14))
)))
(assert (forall ((d@@6 T@U) ) (!  (=> ($Is DatatypeTypeType d@@6 Tclass.M3.Contents) (or (M3.Contents.Root_q d@@6) (M3.Contents.Link_q d@@6)))
 :pattern ( (M3.Contents.Link_q d@@6) ($Is DatatypeTypeType d@@6 Tclass.M3.Contents))
 :pattern ( (M3.Contents.Root_q d@@6) ($Is DatatypeTypeType d@@6 Tclass.M3.Contents))
)))
(assert (forall ((|l#0@@0| T@U) (|l#1@@0| T@U) (|$w#0@@0| T@U) ) (! (= (MapType0Select BoxType BoxType (|lambda#36| |l#0@@0| |l#1@@0|) |$w#0@@0|) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#0@@0| ($Unbox refType |$w#0@@0|)) |l#1@@0|))
 :pattern ( (MapType0Select BoxType BoxType (|lambda#36| |l#0@@0| |l#1@@0|) |$w#0@@0|))
)))
(assert (forall ((cl T@U) (nm T@U) ) (!  (and (= (DeclType (FieldOfDecl cl nm)) cl) (= (DeclName (FieldOfDecl cl nm)) nm))
 :pattern ( (FieldOfDecl cl nm))
)))
(assert (forall ((v@@1 T@U) (t@@2 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@1) t@@2) ($Is T@@2 v@@1 t@@2))
 :pattern ( ($IsBox ($Box T@@2 v@@1) t@@2))
)))
(assert (forall ((v@@2 T@U) (t0@@2 T@U) (h@@0 T@U) ) (! (= ($IsAlloc SetType v@@2 (TSet t0@@2) h@@0) (forall ((bx@@10 T@U) ) (!  (=> (|Set#IsMember| v@@2 bx@@10) ($IsAllocBox bx@@10 t0@@2 h@@0))
 :pattern ( (|Set#IsMember| v@@2 bx@@10))
)))
 :pattern ( ($IsAlloc SetType v@@2 (TSet t0@@2) h@@0))
)))
(assert (forall ((t@@3 T@U) (u@@1 T@U) ) (! (= (Inv0_TMap (TMap t@@3 u@@1)) t@@3)
 :pattern ( (TMap t@@3 u@@1))
)))
(assert (forall ((t@@4 T@U) (u@@2 T@U) ) (! (= (Inv1_TMap (TMap t@@4 u@@2)) u@@2)
 :pattern ( (TMap t@@4 u@@2))
)))
(assert (forall ((t@@5 T@U) (u@@3 T@U) ) (! (= (Tag (TMap t@@5 u@@3)) TagMap)
 :pattern ( (TMap t@@5 u@@3))
)))
(assert (forall ((|a#0#0#0| T@U) (|a#0#1#0| T@U) ) (! (= (DatatypeCtorId (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|)) |##_System._tuple#2._#Make2|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|))
)))
(assert (forall ((|_System._tuple#2$T0@@2| T@U) (|_System._tuple#2$T1@@2| T@U) ) (! (= (Tclass._System.Tuple2_0 (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|)) |_System._tuple#2$T0@@2|)
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|))
)))
(assert (forall ((|_System._tuple#2$T0@@3| T@U) (|_System._tuple#2$T1@@3| T@U) ) (! (= (Tclass._System.Tuple2_1 (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|)) |_System._tuple#2$T1@@3|)
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|))
)))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| T@U) ) (! (= (_System.Tuple2._0 (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|)) |a#4#0#0|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|))
)))
(assert (forall ((|a#6#0#0@@0| T@U) (|a#6#1#0| T@U) ) (! (= (_System.Tuple2._1 (|#_System._tuple#2._#Make2| |a#6#0#0@@0| |a#6#1#0|)) |a#6#1#0|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#6#0#0@@0| |a#6#1#0|))
)))
(assert (forall (($o@@10 T@U) ) (! ($Is refType $o@@10 Tclass._System.object?)
 :pattern ( ($Is refType $o@@10 Tclass._System.object?))
)))
(assert (forall ((t@@6 T@U) ) (! (= (Inv0_TSet (TSet t@@6)) t@@6)
 :pattern ( (TSet t@@6))
)))
(assert (forall ((t@@7 T@U) ) (! (= (Tag (TSet t@@7)) TagSet)
 :pattern ( (TSet t@@7))
)))
(assert (forall ((|a#0#0#0@@0| Int) ) (! (= (DatatypeCtorId (|#M3.Contents.Root| |a#0#0#0@@0|)) |##M3.Contents.Root|)
 :pattern ( (|#M3.Contents.Root| |a#0#0#0@@0|))
)))
(assert (forall ((|a#4#0#0@@0| Int) ) (! (= (M3.Contents.depth (|#M3.Contents.Root| |a#4#0#0@@0|)) |a#4#0#0@@0|)
 :pattern ( (|#M3.Contents.Root| |a#4#0#0@@0|))
)))
(assert (forall ((|a#5#0#0| T@U) ) (! (= (DatatypeCtorId (|#M3.Contents.Link| |a#5#0#0|)) |##M3.Contents.Link|)
 :pattern ( (|#M3.Contents.Link| |a#5#0#0|))
)))
(assert (forall ((|a#9#0#0| T@U) ) (! (= (M3.Contents.next (|#M3.Contents.Link| |a#9#0#0|)) |a#9#0#0|)
 :pattern ( (|#M3.Contents.Link| |a#9#0#0|))
)))
(assert (forall ((x@@5 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@5)) x@@5)
 :pattern ( ($Box T@@3 x@@5))
)))
(assert (forall ((v@@3 T@U) (t0@@3 T@U) (t1@@1 T@U) (h@@1 T@U) ) (! (= ($IsAlloc MapType v@@3 (TMap t0@@3 t1@@1) h@@1) (forall ((bx@@11 T@U) ) (!  (=> (|Set#IsMember| (|Map#Domain| v@@3) bx@@11) (and ($IsAllocBox (MapType0Select BoxType BoxType (|Map#Elements| v@@3) bx@@11) t1@@1 h@@1) ($IsAllocBox bx@@11 t0@@3 h@@1)))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| v@@3) bx@@11))
 :pattern ( (|Set#IsMember| (|Map#Domain| v@@3) bx@@11))
)))
 :pattern ( ($IsAlloc MapType v@@3 (TMap t0@@3 t1@@1) h@@1))
)))
(assert (forall ((|a#5#0#0@@0| T@U) (|a#5#1#0| T@U) ) (! (< (BoxRank |a#5#0#0@@0|) (DtRank (|#_System._tuple#2._#Make2| |a#5#0#0@@0| |a#5#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| |a#5#0#0@@0| |a#5#1#0|))
)))
(assert (forall ((|a#7#0#0@@1| T@U) (|a#7#1#0| T@U) ) (! (< (BoxRank |a#7#1#0|) (DtRank (|#_System._tuple#2._#Make2| |a#7#0#0@@1| |a#7#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| |a#7#0#0@@1| |a#7#1#0|))
)))
(assert (forall ((u@@4 T@U) ) (!  (not (|Set#IsMember| (|Map#Domain| |Map#Empty|) u@@4))
 :pattern ( (|Set#IsMember| (|Map#Domain| |Map#Empty|) u@@4))
)))
(assert (forall ((bx@@12 T@U) (s T@U) (t@@8 T@U) ) (!  (=> ($IsBox bx@@12 (TMap s t@@8)) (and (= ($Box MapType ($Unbox MapType bx@@12)) bx@@12) ($Is MapType ($Unbox MapType bx@@12) (TMap s t@@8))))
 :pattern ( ($IsBox bx@@12 (TMap s t@@8)))
)))
(assert (forall ((|_System._tuple#2$T0@@4| T@U) (|_System._tuple#2$T1@@4| T@U) (bx@@13 T@U) ) (!  (=> ($IsBox bx@@13 (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@13)) bx@@13) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@13) (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|))))
 :pattern ( ($IsBox bx@@13 (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|)))
)))
(assert  (and (forall ((t0@@4 T@T) (t1@@2 T@T) (t2 T@T) (val@@1 T@U) (m@@4 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@4 t1@@2 t2 (MapType1Store t0@@4 t1@@2 t2 m@@4 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@5 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@5 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@5 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@6 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@6 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@6 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0@@1| T@U) (|l#1@@1| T@U) (|l#2| T@U) (|l#3| Bool) ($o@@11 T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0@@1| |l#1@@1| |l#2| |l#3|) $o@@11 $f))  (=> (and (or (not (= $o@@11 |l#0@@1|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1@@1| $o@@11) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0@@1| |l#1@@1| |l#2| |l#3|) $o@@11 $f))
)))
(assert (forall ((|_System._tuple#2$T0@@5| T@U) (|_System._tuple#2$T1@@5| T@U) ) (!  (and (= (Tag (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|)) Tagclass._System.Tuple2) (= (TagFamily (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|)) |tytagFamily$_tuple#2|))
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|))
)))
(assert  (=> (<= 5 $FunctionContextHeight) (forall (($Heap@@3 T@U) (this@@6 T@U) ) (!  (=> (or (|M3.UnionFind.ValidM1#canCall| $Heap@@3 this@@6) (and (< 5 $FunctionContextHeight) (and ($IsGoodHeap $Heap@@3) (and (or (not (= this@@6 null)) (not true)) (and ($Is refType this@@6 Tclass.M3.UnionFind) ($IsAlloc refType this@@6 Tclass.M3.UnionFind $Heap@@3)))))) (and (=> (|Set#Subset| (|Map#Domain| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@3 this@@6) M3.UnionFind.M))) ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@3 this@@6) M3.UnionFind.Repr))) (=> (forall ((|e#0@@2| T@U) ) (!  (=> ($Is refType |e#0@@2| Tclass.M3.Element?) (=> (|Set#IsMember| (|Map#Domain| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@3 this@@6) M3.UnionFind.M))) ($Box refType |e#0@@2|)) (|Set#IsMember| (|Map#Domain| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@3 this@@6) M3.UnionFind.M))) (MapType0Select BoxType BoxType (|Map#Elements| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@3 this@@6) M3.UnionFind.M))) ($Box refType |e#0@@2|)))))
 :pattern ( ($Unbox refType (MapType0Select BoxType BoxType (|Map#Elements| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@3 this@@6) M3.UnionFind.M))) ($Box refType |e#0@@2|))))
)) (=> (forall ((|e#1| T@U) ) (!  (=> ($Is refType |e#1| Tclass.M3.Element?) (=> (|Set#IsMember| (|Map#Domain| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@3 this@@6) M3.UnionFind.M))) ($Box refType |e#1|)) (= ($Unbox refType (MapType0Select BoxType BoxType (|Map#Elements| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@3 this@@6) M3.UnionFind.M))) (MapType0Select BoxType BoxType (|Map#Elements| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@3 this@@6) M3.UnionFind.M))) ($Box refType |e#1|)))) ($Unbox refType (MapType0Select BoxType BoxType (|Map#Elements| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@3 this@@6) M3.UnionFind.M))) ($Box refType |e#1|))))))
 :pattern ( ($Unbox refType (MapType0Select BoxType BoxType (|Map#Elements| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@3 this@@6) M3.UnionFind.M))) (MapType0Select BoxType BoxType (|Map#Elements| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@3 this@@6) M3.UnionFind.M))) ($Box refType |e#1|)))))
 :pattern ( (|Set#IsMember| (|Map#Domain| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@3 this@@6) M3.UnionFind.M))) ($Box refType |e#1|)))
)) (=> (forall ((|e#2| T@U) ) (!  (=> ($Is refType |e#2| Tclass.M3.Element) (=> (and (|Set#IsMember| (|Map#Domain| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@3 this@@6) M3.UnionFind.M))) ($Box refType |e#2|)) (M3.Contents.Link_q ($Unbox DatatypeTypeType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@3 |e#2|) M3.Element.c)))) (|Set#IsMember| (|Map#Domain| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@3 this@@6) M3.UnionFind.M))) ($Box refType (M3.Contents.next ($Unbox DatatypeTypeType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@3 |e#2|) M3.Element.c)))))))
 :pattern ( ($Unbox DatatypeTypeType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@3 |e#2|) M3.Element.c)))
)) (forall ((|e#3| T@U) ) (!  (=> ($Is refType |e#3| Tclass.M3.Element) (=> (=> (|Set#IsMember| (|Map#Domain| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@3 this@@6) M3.UnionFind.M))) ($Box refType |e#3|)) (M3.Contents.Root_q ($Unbox DatatypeTypeType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@3 ($Unbox refType (MapType0Select BoxType BoxType (|Map#Elements| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@3 this@@6) M3.UnionFind.M))) ($Box refType |e#3|)))) M3.Element.c)))) (=> (|Set#IsMember| (|Map#Domain| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@3 this@@6) M3.UnionFind.M))) ($Box refType |e#3|)) (and (|M3.UnionFind.Collect#canCall| $Heap@@3 this@@6) (|M3.UnionFind.Reaches#canCall| this@@6 (M3.Contents.depth ($Unbox DatatypeTypeType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@3 ($Unbox refType (MapType0Select BoxType BoxType (|Map#Elements| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@3 this@@6) M3.UnionFind.M))) ($Box refType |e#3|)))) M3.Element.c))) |e#3| ($Unbox refType (MapType0Select BoxType BoxType (|Map#Elements| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@3 this@@6) M3.UnionFind.M))) ($Box refType |e#3|))) (M3.UnionFind.Collect $Heap@@3 this@@6))))))
 :pattern ( ($Unbox refType (MapType0Select BoxType BoxType (|Map#Elements| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@3 this@@6) M3.UnionFind.M))) ($Box refType |e#3|))))
 :pattern ( (|Set#IsMember| (|Map#Domain| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@3 this@@6) M3.UnionFind.M))) ($Box refType |e#3|)))
)))))) (= (M3.UnionFind.ValidM1 $Heap@@3 this@@6)  (and (and (and (|Set#Subset| (|Map#Domain| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@3 this@@6) M3.UnionFind.M))) ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@3 this@@6) M3.UnionFind.Repr))) (and (forall ((|e#0@@3| T@U) ) (!  (=> ($Is refType |e#0@@3| Tclass.M3.Element?) (=> (|Set#IsMember| (|Map#Domain| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@3 this@@6) M3.UnionFind.M))) ($Box refType |e#0@@3|)) (|Set#IsMember| (|Map#Domain| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@3 this@@6) M3.UnionFind.M))) (MapType0Select BoxType BoxType (|Map#Elements| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@3 this@@6) M3.UnionFind.M))) ($Box refType |e#0@@3|)))))
 :pattern ( ($Unbox refType (MapType0Select BoxType BoxType (|Map#Elements| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@3 this@@6) M3.UnionFind.M))) ($Box refType |e#0@@3|))))
)) (forall ((|e#1@@0| T@U) ) (!  (=> ($Is refType |e#1@@0| Tclass.M3.Element?) (=> (|Set#IsMember| (|Map#Domain| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@3 this@@6) M3.UnionFind.M))) ($Box refType |e#1@@0|)) (= ($Unbox refType (MapType0Select BoxType BoxType (|Map#Elements| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@3 this@@6) M3.UnionFind.M))) (MapType0Select BoxType BoxType (|Map#Elements| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@3 this@@6) M3.UnionFind.M))) ($Box refType |e#1@@0|)))) ($Unbox refType (MapType0Select BoxType BoxType (|Map#Elements| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@3 this@@6) M3.UnionFind.M))) ($Box refType |e#1@@0|))))))
 :pattern ( ($Unbox refType (MapType0Select BoxType BoxType (|Map#Elements| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@3 this@@6) M3.UnionFind.M))) (MapType0Select BoxType BoxType (|Map#Elements| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@3 this@@6) M3.UnionFind.M))) ($Box refType |e#1@@0|)))))
 :pattern ( (|Set#IsMember| (|Map#Domain| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@3 this@@6) M3.UnionFind.M))) ($Box refType |e#1@@0|)))
)))) (forall ((|e#2@@0| T@U) ) (!  (=> ($Is refType |e#2@@0| Tclass.M3.Element) (=> (and (|Set#IsMember| (|Map#Domain| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@3 this@@6) M3.UnionFind.M))) ($Box refType |e#2@@0|)) (M3.Contents.Link_q ($Unbox DatatypeTypeType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@3 |e#2@@0|) M3.Element.c)))) (|Set#IsMember| (|Map#Domain| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@3 this@@6) M3.UnionFind.M))) ($Box refType (M3.Contents.next ($Unbox DatatypeTypeType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@3 |e#2@@0|) M3.Element.c)))))))
 :pattern ( ($Unbox DatatypeTypeType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@3 |e#2@@0|) M3.Element.c)))
))) (forall ((|e#3@@0| T@U) ) (!  (=> ($Is refType |e#3@@0| Tclass.M3.Element) (and (=> (|Set#IsMember| (|Map#Domain| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@3 this@@6) M3.UnionFind.M))) ($Box refType |e#3@@0|)) (M3.Contents.Root_q ($Unbox DatatypeTypeType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@3 ($Unbox refType (MapType0Select BoxType BoxType (|Map#Elements| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@3 this@@6) M3.UnionFind.M))) ($Box refType |e#3@@0|)))) M3.Element.c)))) (=> (|Set#IsMember| (|Map#Domain| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@3 this@@6) M3.UnionFind.M))) ($Box refType |e#3@@0|)) (M3.UnionFind.Reaches ($LS $LZ) this@@6 (M3.Contents.depth ($Unbox DatatypeTypeType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@3 ($Unbox refType (MapType0Select BoxType BoxType (|Map#Elements| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@3 this@@6) M3.UnionFind.M))) ($Box refType |e#3@@0|)))) M3.Element.c))) |e#3@@0| ($Unbox refType (MapType0Select BoxType BoxType (|Map#Elements| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@3 this@@6) M3.UnionFind.M))) ($Box refType |e#3@@0|))) (M3.UnionFind.Collect $Heap@@3 this@@6)))))
 :pattern ( ($Unbox refType (MapType0Select BoxType BoxType (|Map#Elements| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@3 this@@6) M3.UnionFind.M))) ($Box refType |e#3@@0|))))
 :pattern ( (|Set#IsMember| (|Map#Domain| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@3 this@@6) M3.UnionFind.M))) ($Box refType |e#3@@0|)))
))))))
 :pattern ( (M3.UnionFind.ValidM1 $Heap@@3 this@@6) ($IsGoodHeap $Heap@@3))
))))
(assert (forall ((m@@7 T@U) ) (!  (or (= m@@7 |Map#Empty|) (exists ((k T@U) ) (|Set#IsMember| (|Map#Domain| m@@7) k)))
 :pattern ( (|Map#Domain| m@@7))
)))
(assert (forall ((m@@8 T@U) ) (!  (or (= m@@8 |Map#Empty|) (exists ((v@@4 T@U) ) (|Set#IsMember| (|Map#Values| m@@8) v@@4)))
 :pattern ( (|Map#Values| m@@8))
)))
(assert (forall ((m@@9 T@U) (item T@U) ) (! (= (|Set#IsMember| (|Map#Items| m@@9) item)  (and (|Set#IsMember| (|Map#Domain| m@@9) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (= (MapType0Select BoxType BoxType (|Map#Elements| m@@9) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item)))))
 :pattern ( (|Set#IsMember| (|Map#Items| m@@9) item))
)))
(assert (forall ((m@@10 T@U) (v@@5 T@U) ) (! (= (|Set#IsMember| (|Map#Values| m@@10) v@@5) (exists ((u@@5 T@U) ) (!  (and (|Set#IsMember| (|Map#Domain| m@@10) u@@5) (= v@@5 (MapType0Select BoxType BoxType (|Map#Elements| m@@10) u@@5)))
 :pattern ( (|Set#IsMember| (|Map#Domain| m@@10) u@@5))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| m@@10) u@@5))
)))
 :pattern ( (|Set#IsMember| (|Map#Values| m@@10) v@@5))
)))
(assert (forall ((d@@7 T@U) ) (! (= (BoxRank ($Box DatatypeTypeType d@@7)) (DtRank d@@7))
 :pattern ( (BoxRank ($Box DatatypeTypeType d@@7)))
)))
(assert (forall ((bx@@14 T@U) (t@@9 T@U) ) (!  (=> ($IsBox bx@@14 (TSet t@@9)) (and (= ($Box SetType ($Unbox SetType bx@@14)) bx@@14) ($Is SetType ($Unbox SetType bx@@14) (TSet t@@9))))
 :pattern ( ($IsBox bx@@14 (TSet t@@9)))
)))
(assert (forall ((v@@6 T@U) (t0@@5 T@U) (t1@@3 T@U) ) (! (= ($Is MapType v@@6 (TMap t0@@5 t1@@3)) (forall ((bx@@15 T@U) ) (!  (=> (|Set#IsMember| (|Map#Domain| v@@6) bx@@15) (and ($IsBox (MapType0Select BoxType BoxType (|Map#Elements| v@@6) bx@@15) t1@@3) ($IsBox bx@@15 t0@@5)))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| v@@6) bx@@15))
 :pattern ( (|Set#IsMember| (|Map#Domain| v@@6) bx@@15))
)))
 :pattern ( ($Is MapType v@@6 (TMap t0@@5 t1@@3)))
)))
(assert  (=> (<= 6 $FunctionContextHeight) (forall (($Heap@@4 T@U) (this@@7 T@U) ) (!  (=> (or (|M3.UnionFind.Valid#canCall| $Heap@@4 this@@7) (and (< 6 $FunctionContextHeight) (and ($IsGoodHeap $Heap@@4) (and (or (not (= this@@7 null)) (not true)) (and ($Is refType this@@7 Tclass.M3.UnionFind) ($IsAlloc refType this@@7 Tclass.M3.UnionFind $Heap@@4)))))) (=> (M3.UnionFind.Valid $Heap@@4 this@@7) (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@7) M3.UnionFind.Repr)) ($Box refType this@@7))))
 :pattern ( (M3.UnionFind.Valid $Heap@@4 this@@7))
))))
(assert (= (Tag Tclass._System.nat) Tagclass._System.nat))
(assert (= (TagFamily Tclass._System.nat) tytagFamily$nat))
(assert (= (Tag Tclass._System.object?) Tagclass._System.object?))
(assert (= (TagFamily Tclass._System.object?) tytagFamily$object))
(assert (= (Tag Tclass._System.object) Tagclass._System.object))
(assert (= (TagFamily Tclass._System.object) tytagFamily$object))
(assert (= (Tag Tclass.M3.Element) Tagclass.M3.Element))
(assert (= (TagFamily Tclass.M3.Element) tytagFamily$Element))
(assert (= (Tag Tclass.M3.Contents) Tagclass.M3.Contents))
(assert (= (TagFamily Tclass.M3.Contents) tytagFamily$Contents))
(assert (= (Tag Tclass.M3.Element?) Tagclass.M3.Element?))
(assert (= (TagFamily Tclass.M3.Element?) tytagFamily$Element))
(assert (= (Tag Tclass.M3.UnionFind?) Tagclass.M3.UnionFind?))
(assert (= (TagFamily Tclass.M3.UnionFind?) tytagFamily$UnionFind))
(assert (= (Tag Tclass.M3.UnionFind) Tagclass.M3.UnionFind))
(assert (= (TagFamily Tclass.M3.UnionFind) tytagFamily$UnionFind))
(assert (forall ((d@@8 T@U) (|_System._tuple#2$T0@@6| T@U) ($h@@15 T@U) ) (!  (=> (and ($IsGoodHeap $h@@15) (and (_System.Tuple2.___hMake2_q d@@8) (exists ((|_System._tuple#2$T1@@6| T@U) ) (! ($IsAlloc DatatypeTypeType d@@8 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@15)
 :pattern ( ($IsAlloc DatatypeTypeType d@@8 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@15))
)))) ($IsAllocBox (_System.Tuple2._0 d@@8) |_System._tuple#2$T0@@6| $h@@15))
 :pattern ( ($IsAllocBox (_System.Tuple2._0 d@@8) |_System._tuple#2$T0@@6| $h@@15))
)))
(assert (forall ((d@@9 T@U) (|_System._tuple#2$T1@@7| T@U) ($h@@16 T@U) ) (!  (=> (and ($IsGoodHeap $h@@16) (and (_System.Tuple2.___hMake2_q d@@9) (exists ((|_System._tuple#2$T0@@7| T@U) ) (! ($IsAlloc DatatypeTypeType d@@9 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|) $h@@16)
 :pattern ( ($IsAlloc DatatypeTypeType d@@9 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|) $h@@16))
)))) ($IsAllocBox (_System.Tuple2._1 d@@9) |_System._tuple#2$T1@@7| $h@@16))
 :pattern ( ($IsAllocBox (_System.Tuple2._1 d@@9) |_System._tuple#2$T1@@7| $h@@16))
)))
(assert (forall ((d@@10 T@U) ($h@@17 T@U) ) (!  (=> (and ($IsGoodHeap $h@@17) (and (M3.Contents.Root_q d@@10) ($IsAlloc DatatypeTypeType d@@10 Tclass.M3.Contents $h@@17))) ($IsAlloc intType (int_2_U (M3.Contents.depth d@@10)) Tclass._System.nat $h@@17))
 :pattern ( ($IsAlloc intType (int_2_U (M3.Contents.depth d@@10)) Tclass._System.nat $h@@17))
)))
(assert (forall ((d@@11 T@U) ($h@@18 T@U) ) (!  (=> (and ($IsGoodHeap $h@@18) (and (M3.Contents.Link_q d@@11) ($IsAlloc DatatypeTypeType d@@11 Tclass.M3.Contents $h@@18))) ($IsAlloc refType (M3.Contents.next d@@11) Tclass.M3.Element $h@@18))
 :pattern ( ($IsAlloc refType (M3.Contents.next d@@11) Tclass.M3.Element $h@@18))
)))
(assert (forall ((|a#3#0#0| T@U) (|a#3#1#0| T@U) ) (! (= (|#_System._tuple#2._#Make2| (Lit BoxType |a#3#0#0|) (Lit BoxType |a#3#1#0|)) (Lit DatatypeTypeType (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| (Lit BoxType |a#3#0#0|) (Lit BoxType |a#3#1#0|)))
)))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((|a#3#0#0@@0| Int) ) (! (= (|#M3.Contents.Root| (LitInt |a#3#0#0@@0|)) (Lit DatatypeTypeType (|#M3.Contents.Root| |a#3#0#0@@0|)))
 :pattern ( (|#M3.Contents.Root| (LitInt |a#3#0#0@@0|)))
)))
(assert (forall ((|a#8#0#0| T@U) ) (! (= (|#M3.Contents.Link| (Lit refType |a#8#0#0|)) (Lit DatatypeTypeType (|#M3.Contents.Link| |a#8#0#0|)))
 :pattern ( (|#M3.Contents.Link| (Lit refType |a#8#0#0|)))
)))
(assert (forall ((x@@7 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@7)) (Lit BoxType ($Box T@@4 x@@7)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@7)))
)))
(assert  (=> (<= 3 $FunctionContextHeight) (forall ((|C#0@@3| T@U) ) (!  (=> (or (|M3.__default.GoodCMap#canCall| |C#0@@3|) (and (< 3 $FunctionContextHeight) ($Is MapType |C#0@@3| (TMap Tclass.M3.Element Tclass.M3.Contents)))) (= (M3.__default.GoodCMap |C#0@@3|) (forall ((|f#0@@0| T@U) ) (!  (=> ($Is refType |f#0@@0| Tclass.M3.Element?) (=> (and (|Set#IsMember| (|Map#Domain| |C#0@@3|) ($Box refType |f#0@@0|)) (M3.Contents.Link_q ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |C#0@@3|) ($Box refType |f#0@@0|))))) (|Set#IsMember| (|Map#Domain| |C#0@@3|) ($Box refType (M3.Contents.next ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |C#0@@3|) ($Box refType |f#0@@0|))))))))
 :pattern ( ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |C#0@@3|) ($Box refType |f#0@@0|))))
))))
 :pattern ( (M3.__default.GoodCMap |C#0@@3|))
))))
(assert  (=> (<= 4 $FunctionContextHeight) (forall (($ly@@2 T@U) (this@@8 T@U) (|d#0@@2| Int) (|e#0@@4| T@U) (|r#0@@2| T@U) (|C#0@@4| T@U) ) (!  (=> (or (|M3.UnionFind.Reaches#canCall| this@@8 (LitInt |d#0@@2|) (Lit refType |e#0@@4|) (Lit refType |r#0@@2|) (Lit MapType |C#0@@4|)) (and (< 4 $FunctionContextHeight) (and (and (and (and (and (and (or (not (= this@@8 null)) (not true)) ($Is refType this@@8 Tclass.M3.UnionFind)) (<= (LitInt 0) |d#0@@2|)) ($Is refType |e#0@@4| Tclass.M3.Element)) ($Is refType |r#0@@2| Tclass.M3.Element)) ($Is MapType |C#0@@4| (TMap Tclass.M3.Element Tclass.M3.Contents))) (and (U_2_bool (Lit boolType (bool_2_U (M3.__default.GoodCMap (Lit MapType |C#0@@4|))))) (|Set#IsMember| (|Map#Domain| |C#0@@4|) ($Box refType |e#0@@4|)))))) (and (=> (not (M3.Contents.Root_q ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| (Lit MapType |C#0@@4|)) ($Box refType (Lit refType |e#0@@4|)))))) (let ((|next#3| (M3.Contents.next ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| (Lit MapType |C#0@@4|)) ($Box refType (Lit refType |e#0@@4|)))))))
 (=> (U_2_bool (Lit boolType (bool_2_U  (or (not (= |d#0@@2| 0)) (not true))))) (|M3.UnionFind.Reaches#canCall| this@@8 (LitInt (- |d#0@@2| 1)) |next#3| (Lit refType |r#0@@2|) (Lit MapType |C#0@@4|))))) (= (M3.UnionFind.Reaches ($LS $ly@@2) this@@8 (LitInt |d#0@@2|) (Lit refType |e#0@@4|) (Lit refType |r#0@@2|) (Lit MapType |C#0@@4|)) (ite (M3.Contents.Root_q ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| (Lit MapType |C#0@@4|)) ($Box refType (Lit refType |e#0@@4|))))) (= (Lit refType |e#0@@4|) (Lit refType |r#0@@2|)) (let ((|next#2| (M3.Contents.next ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| (Lit MapType |C#0@@4|)) ($Box refType (Lit refType |e#0@@4|)))))))
 (and (or (not (= |d#0@@2| 0)) (not true)) (M3.UnionFind.Reaches ($LS $ly@@2) this@@8 (LitInt (- |d#0@@2| 1)) |next#2| (Lit refType |r#0@@2|) (Lit MapType |C#0@@4|))))))))
 :weight 3
 :pattern ( (M3.UnionFind.Reaches ($LS $ly@@2) this@@8 (LitInt |d#0@@2|) (Lit refType |e#0@@4|) (Lit refType |r#0@@2|) (Lit MapType |C#0@@4|)))
))))
(assert  (=> (<= 4 $FunctionContextHeight) (forall (($Heap@@5 T@U) (this@@9 T@U) ) (!  (=> (or (|M3.UnionFind.Collect#canCall| $Heap@@5 this@@9) (and (< 4 $FunctionContextHeight) (and (and (and ($IsGoodHeap $Heap@@5) (or (not (= this@@9 null)) (not true))) ($IsAlloc refType this@@9 Tclass.M3.UnionFind $Heap@@5)) (forall ((|f#0@@1| T@U) ) (!  (=> ($Is refType |f#0@@1| Tclass.M3.Element) (=> (and (|Set#IsMember| (|Map#Domain| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@5 this@@9) M3.UnionFind.M))) ($Box refType |f#0@@1|)) (M3.Contents.Link_q ($Unbox DatatypeTypeType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@5 |f#0@@1|) M3.Element.c)))) (|Set#IsMember| (|Map#Domain| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@5 this@@9) M3.UnionFind.M))) ($Box refType (M3.Contents.next ($Unbox DatatypeTypeType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@5 |f#0@@1|) M3.Element.c)))))))
 :pattern ( ($Unbox DatatypeTypeType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@5 |f#0@@1|) M3.Element.c)))
))))) ($IsAlloc MapType (M3.UnionFind.Collect $Heap@@5 this@@9) (TMap Tclass.M3.Element Tclass.M3.Contents) $Heap@@5))
 :pattern ( ($IsAlloc MapType (M3.UnionFind.Collect $Heap@@5 this@@9) (TMap Tclass.M3.Element Tclass.M3.Contents) $Heap@@5))
))))
(assert (forall ((m@@11 T@U) ) (!  (or (= m@@11 |Map#Empty|) (exists ((k@@0 T@U) (v@@7 T@U) ) (|Set#IsMember| (|Map#Items| m@@11) ($Box DatatypeTypeType (|#_System._tuple#2._#Make2| k@@0 v@@7)))))
 :pattern ( (|Map#Items| m@@11))
)))
(assert (forall ((v@@8 T@U) (t0@@6 T@U) (t1@@4 T@U) ) (!  (=> ($Is MapType v@@8 (TMap t0@@6 t1@@4)) (and (and ($Is SetType (|Map#Domain| v@@8) (TSet t0@@6)) ($Is SetType (|Map#Values| v@@8) (TSet t1@@4))) ($Is SetType (|Map#Items| v@@8) (TSet (Tclass._System.Tuple2 t0@@6 t1@@4)))))
 :pattern ( ($Is MapType v@@8 (TMap t0@@6 t1@@4)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun $Heap@@6 () T@U)
(declare-fun |e#0@@5| () T@U)
(declare-fun |next#0@0| () T@U)
(declare-fun this@@10 () T@U)
(declare-fun |$rhs#0@0| () Int)
(declare-fun |$rhs#1@0| () Int)
(declare-fun |newtype$check#0@0| () Int)
(declare-fun |##d#0@0| () Int)
(declare-fun |##r#0@0| () T@U)
(declare-fun |##C#0@0| () T@U)
(declare-fun |##r#1@0| () T@U)
(declare-fun |##C#1@0| () T@U)
(declare-fun |newtype$check#1@0| () Int)
(declare-fun |d0##0@0| () Int)
(declare-fun |r0##0@0| () T@U)
(declare-fun |r1##0@0| () T@U)
(declare-fun |C##0@0| () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |defass#next#0| () Bool)
(declare-fun |next#0@@0| () T@U)
(declare-fun |d0#0| () Int)
(declare-fun |d1#0| () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 11) (let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap@@6 alloc false)) (=> (and (and (or (not (= |e#0@@5| null)) (not true)) (M3.Contents.Link_q ($Unbox DatatypeTypeType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@6 |e#0@@5|) M3.Element.c)))) (and (= |next#0@0| (M3.Contents.next ($Unbox DatatypeTypeType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@6 |e#0@@5|) M3.Element.c)))) (|Set#IsMember| (|Map#Domain| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@6 this@@10) M3.UnionFind.M))) ($Box refType |e#0@@5|)))) (=> (and (and (and (or (not (= ($Unbox refType (MapType0Select BoxType BoxType (|Map#Elements| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@6 this@@10) M3.UnionFind.M))) ($Box refType |e#0@@5|))) null)) (not true)) (M3.Contents.Root_q ($Unbox DatatypeTypeType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@6 ($Unbox refType (MapType0Select BoxType BoxType (|Map#Elements| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@6 this@@10) M3.UnionFind.M))) ($Box refType |e#0@@5|)))) M3.Element.c)))) (and (= |$rhs#0@0| (M3.Contents.depth ($Unbox DatatypeTypeType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@6 ($Unbox refType (MapType0Select BoxType BoxType (|Map#Elements| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@6 this@@10) M3.UnionFind.M))) ($Box refType |e#0@@5|)))) M3.Element.c)))) (|Set#IsMember| (|Map#Domain| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@6 this@@10) M3.UnionFind.M))) ($Box refType |next#0@0|)))) (and (and (or (not (= ($Unbox refType (MapType0Select BoxType BoxType (|Map#Elements| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@6 this@@10) M3.UnionFind.M))) ($Box refType |next#0@0|))) null)) (not true)) (M3.Contents.Root_q ($Unbox DatatypeTypeType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@6 ($Unbox refType (MapType0Select BoxType BoxType (|Map#Elements| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@6 this@@10) M3.UnionFind.M))) ($Box refType |next#0@0|)))) M3.Element.c)))) (and (= |$rhs#1@0| (M3.Contents.depth ($Unbox DatatypeTypeType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@6 ($Unbox refType (MapType0Select BoxType BoxType (|Map#Elements| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@6 this@@10) M3.UnionFind.M))) ($Box refType |next#0@0|)))) M3.Element.c)))) ($IsAllocBox ($Box refType this@@10) Tclass.M3.UnionFind? $Heap@@6)))) (=> (and (and (and (and (= |newtype$check#0@0| (- |$rhs#0@0| 1)) (<= (LitInt 0) |newtype$check#0@0|)) (and (= |##d#0@0| (- |$rhs#0@0| 1)) ($IsAlloc intType (int_2_U |##d#0@0|) Tclass._System.nat $Heap@@6))) (and (and ($IsAlloc refType |next#0@0| Tclass.M3.Element $Heap@@6) (|Set#IsMember| (|Map#Domain| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@6 this@@10) M3.UnionFind.M))) ($Box refType |e#0@@5|))) (and (= |##r#0@0| ($Unbox refType (MapType0Select BoxType BoxType (|Map#Elements| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@6 this@@10) M3.UnionFind.M))) ($Box refType |e#0@@5|)))) ($IsAlloc refType |##r#0@0| Tclass.M3.Element $Heap@@6)))) (and (and (and ($IsAllocBox ($Box refType this@@10) Tclass.M3.UnionFind? $Heap@@6) (forall ((|f#0@@2| T@U) ) (!  (=> ($Is refType |f#0@@2| Tclass.M3.Element) (=> (and (|Set#IsMember| (|Map#Domain| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@6 this@@10) M3.UnionFind.M))) ($Box refType |f#0@@2|)) (M3.Contents.Link_q ($Unbox DatatypeTypeType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@6 |f#0@@2|) M3.Element.c)))) (|Set#IsMember| (|Map#Domain| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@6 this@@10) M3.UnionFind.M))) ($Box refType (M3.Contents.next ($Unbox DatatypeTypeType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@6 |f#0@@2|) M3.Element.c)))))))
 :pattern ( ($Unbox DatatypeTypeType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@6 |f#0@@2|) M3.Element.c)))
))) (and (|M3.UnionFind.Collect#canCall| $Heap@@6 this@@10) (= |##C#0@0| (M3.UnionFind.Collect $Heap@@6 this@@10)))) (and (and ($IsAlloc MapType |##C#0@0| (TMap Tclass.M3.Element Tclass.M3.Contents) $Heap@@6) (=> (|M3.__default.GoodCMap#canCall| |##C#0@0|) (or (M3.__default.GoodCMap |##C#0@0|) (forall ((|f#1@@1| T@U) ) (!  (=> ($Is refType |f#1@@1| Tclass.M3.Element?) (=> (and (|Set#IsMember| (|Map#Domain| |##C#0@0|) ($Box refType |f#1@@1|)) (M3.Contents.Link_q ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |##C#0@0|) ($Box refType |f#1@@1|))))) (|Set#IsMember| (|Map#Domain| |##C#0@0|) ($Box refType (M3.Contents.next ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |##C#0@0|) ($Box refType |f#1@@1|))))))))
 :pattern ( ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |##C#0@0|) ($Box refType |f#1@@1|))))
))))) (and (|Set#IsMember| (|Map#Domain| |##C#0@0|) ($Box refType |next#0@0|)) (|M3.UnionFind.Reaches#canCall| this@@10 (- |$rhs#0@0| 1) |next#0@0| ($Unbox refType (MapType0Select BoxType BoxType (|Map#Elements| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@6 this@@10) M3.UnionFind.M))) ($Box refType |e#0@@5|))) (M3.UnionFind.Collect $Heap@@6 this@@10)))))) (=> (and (and (and (and (and (and (|M3.UnionFind.Collect#canCall| $Heap@@6 this@@10) (|M3.UnionFind.Reaches#canCall| this@@10 (- |$rhs#0@0| 1) |next#0@0| ($Unbox refType (MapType0Select BoxType BoxType (|Map#Elements| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@6 this@@10) M3.UnionFind.M))) ($Box refType |e#0@@5|))) (M3.UnionFind.Collect $Heap@@6 this@@10))) (M3.UnionFind.Reaches ($LS $LZ) this@@10 (- |$rhs#0@0| 1) |next#0@0| ($Unbox refType (MapType0Select BoxType BoxType (|Map#Elements| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@6 this@@10) M3.UnionFind.M))) ($Box refType |e#0@@5|))) (M3.UnionFind.Collect $Heap@@6 this@@10))) (and ($IsAllocBox ($Box refType this@@10) Tclass.M3.UnionFind? $Heap@@6) ($IsAlloc intType (int_2_U |$rhs#1@0|) Tclass._System.nat $Heap@@6))) (and (and ($IsAlloc refType |next#0@0| Tclass.M3.Element $Heap@@6) (|Set#IsMember| (|Map#Domain| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@6 this@@10) M3.UnionFind.M))) ($Box refType |next#0@0|))) (and (= |##r#1@0| ($Unbox refType (MapType0Select BoxType BoxType (|Map#Elements| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@6 this@@10) M3.UnionFind.M))) ($Box refType |next#0@0|)))) ($IsAlloc refType |##r#1@0| Tclass.M3.Element $Heap@@6)))) (and (and (and ($IsAllocBox ($Box refType this@@10) Tclass.M3.UnionFind? $Heap@@6) (forall ((|f#2| T@U) ) (!  (=> ($Is refType |f#2| Tclass.M3.Element) (=> (and (|Set#IsMember| (|Map#Domain| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@6 this@@10) M3.UnionFind.M))) ($Box refType |f#2|)) (M3.Contents.Link_q ($Unbox DatatypeTypeType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@6 |f#2|) M3.Element.c)))) (|Set#IsMember| (|Map#Domain| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@6 this@@10) M3.UnionFind.M))) ($Box refType (M3.Contents.next ($Unbox DatatypeTypeType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@6 |f#2|) M3.Element.c)))))))
 :pattern ( ($Unbox DatatypeTypeType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@6 |f#2|) M3.Element.c)))
))) (and (|M3.UnionFind.Collect#canCall| $Heap@@6 this@@10) (= |##C#1@0| (M3.UnionFind.Collect $Heap@@6 this@@10)))) (and (and ($IsAlloc MapType |##C#1@0| (TMap Tclass.M3.Element Tclass.M3.Contents) $Heap@@6) (=> (|M3.__default.GoodCMap#canCall| |##C#1@0|) (or (M3.__default.GoodCMap |##C#1@0|) (forall ((|f#3| T@U) ) (!  (=> ($Is refType |f#3| Tclass.M3.Element?) (=> (and (|Set#IsMember| (|Map#Domain| |##C#1@0|) ($Box refType |f#3|)) (M3.Contents.Link_q ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |##C#1@0|) ($Box refType |f#3|))))) (|Set#IsMember| (|Map#Domain| |##C#1@0|) ($Box refType (M3.Contents.next ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |##C#1@0|) ($Box refType |f#3|))))))))
 :pattern ( ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |##C#1@0|) ($Box refType |f#3|))))
))))) (and (|Set#IsMember| (|Map#Domain| |##C#1@0|) ($Box refType |next#0@0|)) (|M3.UnionFind.Reaches#canCall| this@@10 |$rhs#1@0| |next#0@0| ($Unbox refType (MapType0Select BoxType BoxType (|Map#Elements| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@6 this@@10) M3.UnionFind.M))) ($Box refType |next#0@0|))) (M3.UnionFind.Collect $Heap@@6 this@@10)))))) (and (and (and (and (|M3.UnionFind.Collect#canCall| $Heap@@6 this@@10) (|M3.UnionFind.Reaches#canCall| this@@10 |$rhs#1@0| |next#0@0| ($Unbox refType (MapType0Select BoxType BoxType (|Map#Elements| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@6 this@@10) M3.UnionFind.M))) ($Box refType |next#0@0|))) (M3.UnionFind.Collect $Heap@@6 this@@10))) (M3.UnionFind.Reaches ($LS $LZ) this@@10 |$rhs#1@0| |next#0@0| ($Unbox refType (MapType0Select BoxType BoxType (|Map#Elements| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@6 this@@10) M3.UnionFind.M))) ($Box refType |next#0@0|))) (M3.UnionFind.Collect $Heap@@6 this@@10))) (and (and (= |newtype$check#1@0| (- |$rhs#0@0| 1)) (<= (LitInt 0) |newtype$check#1@0|)) (and (= |d0##0@0| (- |$rhs#0@0| 1)) (|Set#IsMember| (|Map#Domain| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@6 this@@10) M3.UnionFind.M))) ($Box refType |e#0@@5|))))) (and (and (and (= |r0##0@0| ($Unbox refType (MapType0Select BoxType BoxType (|Map#Elements| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@6 this@@10) M3.UnionFind.M))) ($Box refType |e#0@@5|)))) (|Set#IsMember| (|Map#Domain| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@6 this@@10) M3.UnionFind.M))) ($Box refType |next#0@0|))) (and (= |r1##0@0| ($Unbox refType (MapType0Select BoxType BoxType (|Map#Elements| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@6 this@@10) M3.UnionFind.M))) ($Box refType |next#0@0|)))) ($IsAllocBox ($Box refType this@@10) Tclass.M3.UnionFind? $Heap@@6))) (and (and (forall ((|f#4| T@U) ) (!  (=> ($Is refType |f#4| Tclass.M3.Element) (=> (and (|Set#IsMember| (|Map#Domain| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@6 this@@10) M3.UnionFind.M))) ($Box refType |f#4|)) (M3.Contents.Link_q ($Unbox DatatypeTypeType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@6 |f#4|) M3.Element.c)))) (|Set#IsMember| (|Map#Domain| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@6 this@@10) M3.UnionFind.M))) ($Box refType (M3.Contents.next ($Unbox DatatypeTypeType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@6 |f#4|) M3.Element.c)))))))
 :pattern ( ($Unbox DatatypeTypeType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@6 |f#4|) M3.Element.c)))
)) (|M3.UnionFind.Collect#canCall| $Heap@@6 this@@10)) (and (|M3.UnionFind.Collect#canCall| $Heap@@6 this@@10) (= |C##0@0| (M3.UnionFind.Collect $Heap@@6 this@@10))))))) (and (=> (= (ControlFlow 0 2) (- 0 10)) (=> (|M3.__default.GoodCMap#canCall| |C##0@0|) (or (M3.__default.GoodCMap |C##0@0|) (forall ((|f#2@@0| T@U) ) (!  (=> ($Is refType |f#2@@0| Tclass.M3.Element?) (=> (and (|Set#IsMember| (|Map#Domain| |C##0@0|) ($Box refType |f#2@@0|)) (M3.Contents.Link_q ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |C##0@0|) ($Box refType |f#2@@0|))))) (|Set#IsMember| (|Map#Domain| |C##0@0|) ($Box refType (M3.Contents.next ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |C##0@0|) ($Box refType |f#2@@0|))))))))
 :pattern ( ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |C##0@0|) ($Box refType |f#2@@0|))))
))))) (=> (=> (|M3.__default.GoodCMap#canCall| |C##0@0|) (or (M3.__default.GoodCMap |C##0@0|) (forall ((|f#2@@1| T@U) ) (!  (=> ($Is refType |f#2@@1| Tclass.M3.Element?) (=> (and (|Set#IsMember| (|Map#Domain| |C##0@0|) ($Box refType |f#2@@1|)) (M3.Contents.Link_q ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |C##0@0|) ($Box refType |f#2@@1|))))) (|Set#IsMember| (|Map#Domain| |C##0@0|) ($Box refType (M3.Contents.next ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |C##0@0|) ($Box refType |f#2@@1|))))))))
 :pattern ( ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |C##0@0|) ($Box refType |f#2@@1|))))
)))) (and (=> (= (ControlFlow 0 2) (- 0 9)) (|Set#IsMember| (|Map#Domain| |C##0@0|) ($Box refType |next#0@0|))) (=> (|Set#IsMember| (|Map#Domain| |C##0@0|) ($Box refType |next#0@0|)) (and (=> (= (ControlFlow 0 2) (- 0 8)) (=> (|M3.UnionFind.Reaches#canCall| this@@10 |d0##0@0| |next#0@0| |r0##0@0| |C##0@0|) (or (M3.UnionFind.Reaches ($LS $LZ) this@@10 |d0##0@0| |next#0@0| |r0##0@0| |C##0@0|) (=> (M3.Contents.Root_q ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |C##0@0|) ($Box refType |next#0@0|)))) (= |next#0@0| |r0##0@0|))))) (=> (=> (|M3.UnionFind.Reaches#canCall| this@@10 |d0##0@0| |next#0@0| |r0##0@0| |C##0@0|) (or (M3.UnionFind.Reaches ($LS $LZ) this@@10 |d0##0@0| |next#0@0| |r0##0@0| |C##0@0|) (=> (M3.Contents.Root_q ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |C##0@0|) ($Box refType |next#0@0|)))) (= |next#0@0| |r0##0@0|)))) (and (=> (= (ControlFlow 0 2) (- 0 7)) (=> (|M3.UnionFind.Reaches#canCall| this@@10 |d0##0@0| |next#0@0| |r0##0@0| |C##0@0|) (or (M3.UnionFind.Reaches ($LS $LZ) this@@10 |d0##0@0| |next#0@0| |r0##0@0| |C##0@0|) (=> (not (M3.Contents.Root_q ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |C##0@0|) ($Box refType |next#0@0|))))) (or (not (= |d0##0@0| 0)) (not true)))))) (=> (=> (|M3.UnionFind.Reaches#canCall| this@@10 |d0##0@0| |next#0@0| |r0##0@0| |C##0@0|) (or (M3.UnionFind.Reaches ($LS $LZ) this@@10 |d0##0@0| |next#0@0| |r0##0@0| |C##0@0|) (=> (not (M3.Contents.Root_q ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |C##0@0|) ($Box refType |next#0@0|))))) (or (not (= |d0##0@0| 0)) (not true))))) (and (=> (= (ControlFlow 0 2) (- 0 6)) (=> (|M3.UnionFind.Reaches#canCall| this@@10 |d0##0@0| |next#0@0| |r0##0@0| |C##0@0|) (or (M3.UnionFind.Reaches ($LS $LZ) this@@10 |d0##0@0| |next#0@0| |r0##0@0| |C##0@0|) (=> (not (M3.Contents.Root_q ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |C##0@0|) ($Box refType |next#0@0|))))) (let ((|next#0@@1| (M3.Contents.next ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |C##0@0|) ($Box refType |next#0@0|))))))
(M3.UnionFind.Reaches ($LS ($LS $LZ)) this@@10 (- |d0##0@0| 1) |next#0@@1| |r0##0@0| |C##0@0|)))))) (=> (=> (|M3.UnionFind.Reaches#canCall| this@@10 |d0##0@0| |next#0@0| |r0##0@0| |C##0@0|) (or (M3.UnionFind.Reaches ($LS $LZ) this@@10 |d0##0@0| |next#0@0| |r0##0@0| |C##0@0|) (=> (not (M3.Contents.Root_q ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |C##0@0|) ($Box refType |next#0@0|))))) (let ((|next#0@@2| (M3.Contents.next ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |C##0@0|) ($Box refType |next#0@0|))))))
(M3.UnionFind.Reaches ($LS ($LS $LZ)) this@@10 (- |d0##0@0| 1) |next#0@@2| |r0##0@0| |C##0@0|))))) (and (=> (= (ControlFlow 0 2) (- 0 5)) (=> (|M3.UnionFind.Reaches#canCall| this@@10 |$rhs#1@0| |next#0@0| |r1##0@0| |C##0@0|) (or (M3.UnionFind.Reaches ($LS $LZ) this@@10 |$rhs#1@0| |next#0@0| |r1##0@0| |C##0@0|) (=> (M3.Contents.Root_q ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |C##0@0|) ($Box refType |next#0@0|)))) (= |next#0@0| |r1##0@0|))))) (=> (=> (|M3.UnionFind.Reaches#canCall| this@@10 |$rhs#1@0| |next#0@0| |r1##0@0| |C##0@0|) (or (M3.UnionFind.Reaches ($LS $LZ) this@@10 |$rhs#1@0| |next#0@0| |r1##0@0| |C##0@0|) (=> (M3.Contents.Root_q ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |C##0@0|) ($Box refType |next#0@0|)))) (= |next#0@0| |r1##0@0|)))) (and (=> (= (ControlFlow 0 2) (- 0 4)) (=> (|M3.UnionFind.Reaches#canCall| this@@10 |$rhs#1@0| |next#0@0| |r1##0@0| |C##0@0|) (or (M3.UnionFind.Reaches ($LS $LZ) this@@10 |$rhs#1@0| |next#0@0| |r1##0@0| |C##0@0|) (=> (not (M3.Contents.Root_q ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |C##0@0|) ($Box refType |next#0@0|))))) (or (not (= |$rhs#1@0| 0)) (not true)))))) (=> (=> (|M3.UnionFind.Reaches#canCall| this@@10 |$rhs#1@0| |next#0@0| |r1##0@0| |C##0@0|) (or (M3.UnionFind.Reaches ($LS $LZ) this@@10 |$rhs#1@0| |next#0@0| |r1##0@0| |C##0@0|) (=> (not (M3.Contents.Root_q ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |C##0@0|) ($Box refType |next#0@0|))))) (or (not (= |$rhs#1@0| 0)) (not true))))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (=> (|M3.UnionFind.Reaches#canCall| this@@10 |$rhs#1@0| |next#0@0| |r1##0@0| |C##0@0|) (or (M3.UnionFind.Reaches ($LS $LZ) this@@10 |$rhs#1@0| |next#0@0| |r1##0@0| |C##0@0|) (=> (not (M3.Contents.Root_q ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |C##0@0|) ($Box refType |next#0@0|))))) (let ((|next#2@@0| (M3.Contents.next ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |C##0@0|) ($Box refType |next#0@0|))))))
(M3.UnionFind.Reaches ($LS ($LS $LZ)) this@@10 (- |$rhs#1@0| 1) |next#2@@0| |r1##0@0| |C##0@0|)))))) (=> (=> (|M3.UnionFind.Reaches#canCall| this@@10 |$rhs#1@0| |next#0@0| |r1##0@0| |C##0@0|) (or (M3.UnionFind.Reaches ($LS $LZ) this@@10 |$rhs#1@0| |next#0@0| |r1##0@0| |C##0@0|) (=> (not (M3.Contents.Root_q ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |C##0@0|) ($Box refType |next#0@0|))))) (let ((|next#2@@1| (M3.Contents.next ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |C##0@0|) ($Box refType |next#0@0|))))))
(M3.UnionFind.Reaches ($LS ($LS $LZ)) this@@10 (- |$rhs#1@0| 1) |next#2@@1| |r1##0@0| |C##0@0|))))) (=> (and (and (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (= |r0##0@0| |r1##0@0|)) (and (and (= $Heap@@6 $Heap@0) (= (ControlFlow 0 2) (- 0 1))) false)) (= ($Unbox refType (MapType0Select BoxType BoxType (|Map#Elements| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 this@@10) M3.UnionFind.M))) ($Box refType |e#0@@5|))) ($Unbox refType (MapType0Select BoxType BoxType (|Map#Elements| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 this@@10) M3.UnionFind.M))) ($Box refType (M3.Contents.next ($Unbox DatatypeTypeType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |e#0@@5|) M3.Element.c)))))))))))))))))))))))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap@@6) ($IsHeapAnchor $Heap@@6)) (=> (and (and (or (not (= this@@10 null)) (not true)) (and ($Is refType this@@10 Tclass.M3.UnionFind) ($IsAlloc refType this@@10 Tclass.M3.UnionFind $Heap@@6))) (and ($Is refType |e#0@@5| Tclass.M3.Element) ($IsAlloc refType |e#0@@5| Tclass.M3.Element $Heap@@6))) (=> (and (and (and (and (=> |defass#next#0| (and ($Is refType |next#0@@0| Tclass.M3.Element) ($IsAlloc refType |next#0@@0| Tclass.M3.Element $Heap@@6))) true) (and (<= (LitInt 0) |d0#0|) true)) (and (and (<= (LitInt 0) |d1#0|) true) (= 7 $FunctionContextHeight))) (and (and (and (|M3.UnionFind.Valid#canCall| $Heap@@6 this@@10) (and (M3.UnionFind.Valid $Heap@@6 this@@10) (and (and (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@6 this@@10) M3.UnionFind.Repr)) ($Box refType this@@10)) (not (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@6 this@@10) M3.UnionFind.Repr)) ($Box refType null)))) (M3.UnionFind.ValidM1 $Heap@@6 this@@10)))) (|Set#IsMember| (|Map#Domain| ($Unbox MapType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@6 this@@10) M3.UnionFind.M))) ($Box refType |e#0@@5|))) (and (M3.Contents.Link_q ($Unbox DatatypeTypeType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@6 |e#0@@5|) M3.Element.c))) (= (ControlFlow 0 11) 2)))) anon0_correct)))))
PreconditionGeneratedEntry_correct)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
