(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (Bool) T@U)
(declare-fun $generated@@7 (T@U) Bool)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun $generated@@9 (T@U) Int)
(declare-fun $generated@@10 (Real) T@U)
(declare-fun $generated@@11 (T@U) Real)
(declare-fun $generated@@18 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@19 () T@U)
(declare-fun $generated@@22 (Int) Int)
(declare-fun $generated@@24 (T@T T@U) T@U)
(declare-fun $generated@@27 (T@T T@U) T@U)
(declare-fun $generated@@28 (T@T T@U) T@U)
(declare-fun $generated@@31 () Int)
(declare-fun $generated@@32 (T@U Int Int) Int)
(declare-fun $generated@@33 (T@U) T@U)
(declare-fun $generated@@34 (Int Int) Bool)
(declare-fun $generated@@35 (Int Int) Int)
(declare-fun $generated@@39 (T@T T@U T@U) Bool)
(declare-fun $generated@@46 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 () T@T)
(declare-fun $generated@@49 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@50 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@51 () T@T)
(declare-fun $generated@@52 (T@T T@T) T@T)
(declare-fun $generated@@53 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@54 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@55 (T@T) T@T)
(declare-fun $generated@@56 (T@T) T@T)
(declare-fun $generated@@110 (T@U) T@U)
(declare-fun $generated@@111 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@4) 1)) (= ($generated@@2 $generated@@5) 2)) (forall (($generated@@12 Bool) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Int) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Real) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))))
(assert (distinct $generated $generated@@0 $generated@@1)
)
(assert (forall (($generated@@20 T@U) ($generated@@21 T@U) ) (! ($generated@@18 $generated@@4 $generated@@20 $generated@@19 $generated@@21)
 :pattern ( ($generated@@18 $generated@@4 $generated@@20 $generated@@19 $generated@@21))
)))
(assert (forall (($generated@@23 Int) ) (! (= ($generated@@22 $generated@@23) $generated@@23)
 :pattern ( ($generated@@22 $generated@@23))
)))
(assert (forall (($generated@@25 T@U) ($generated@@26 T@T) ) (! (= ($generated@@24 $generated@@26 $generated@@25) $generated@@25)
 :pattern ( ($generated@@24 $generated@@26 $generated@@25))
)))
(assert (forall (($generated@@29 T@U) ($generated@@30 T@T) ) (! (= ($generated@@28 $generated@@30 ($generated@@27 $generated@@30 $generated@@29)) $generated@@29)
 :pattern ( ($generated@@27 $generated@@30 $generated@@29))
)))
(assert  (=> (<= 0 $generated@@31) (forall (($generated@@36 T@U) ($generated@@37 Int) ($generated@@38 Int) ) (!  (=> (or ($generated@@34 ($generated@@22 $generated@@37) ($generated@@22 $generated@@38)) (and (< 0 $generated@@31) (and (<= ($generated@@22 0) $generated@@37) (<= ($generated@@22 0) $generated@@38)))) (and (=> (or (not (= ($generated@@22 $generated@@37) ($generated@@22 0))) (not true)) (and ($generated@@34 ($generated@@22 (- $generated@@37 1)) ($generated@@22 (+ ($generated@@35 ($generated@@22 $generated@@37) ($generated@@22 $generated@@38)) 1))) ($generated@@34 ($generated@@22 (- $generated@@37 1)) ($generated@@22 ($generated@@35 ($generated@@22 ($generated@@35 ($generated@@22 2) ($generated@@22 $generated@@37))) ($generated@@22 $generated@@38)))))) (= ($generated@@32 ($generated@@33 $generated@@36) ($generated@@22 $generated@@37) ($generated@@22 $generated@@38)) (ite (= ($generated@@22 $generated@@37) ($generated@@22 0)) 0 (+ ($generated@@32 ($generated@@33 $generated@@36) ($generated@@22 (- $generated@@37 1)) ($generated@@22 (+ ($generated@@35 ($generated@@22 $generated@@37) ($generated@@22 $generated@@38)) 1))) ($generated@@32 ($generated@@33 $generated@@36) ($generated@@22 (- $generated@@37 1)) ($generated@@22 ($generated@@35 ($generated@@22 ($generated@@35 ($generated@@22 2) ($generated@@22 $generated@@37))) ($generated@@22 $generated@@38)))))))))
 :weight 3
 :pattern ( ($generated@@32 ($generated@@33 $generated@@36) ($generated@@22 $generated@@37) ($generated@@22 $generated@@38)))
))))
(assert (forall (($generated@@40 T@U) ) (! (= ($generated@@39 $generated@@4 $generated@@40 $generated@@19) (<= ($generated@@22 0) ($generated@@9 $generated@@40)))
 :pattern ( ($generated@@39 $generated@@4 $generated@@40 $generated@@19))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 Int) ($generated@@43 Int) ) (! (= ($generated@@32 ($generated@@33 $generated@@41) $generated@@42 $generated@@43) ($generated@@32 $generated@@41 $generated@@42 $generated@@43))
 :pattern ( ($generated@@32 ($generated@@33 $generated@@41) $generated@@42 $generated@@43))
)))
(assert (forall (($generated@@44 T@U) ($generated@@45 T@T) ) (! (= ($generated@@27 $generated@@45 ($generated@@28 $generated@@45 $generated@@44)) $generated@@44)
 :pattern ( ($generated@@28 $generated@@45 $generated@@44))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@57 T@T) ($generated@@58 T@T) ($generated@@59 T@T) ($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@U) ) (! (= ($generated@@46 $generated@@57 $generated@@58 $generated@@59 ($generated@@53 $generated@@57 $generated@@58 $generated@@59 $generated@@61 $generated@@62 $generated@@63 $generated@@60) $generated@@62 $generated@@63) $generated@@60)
 :weight 0
)) (and (forall (($generated@@64 T@T) ($generated@@65 T@T) ($generated@@66 T@T) ($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (!  (or (= $generated@@69 $generated@@71) (= ($generated@@46 $generated@@64 $generated@@65 $generated@@66 ($generated@@53 $generated@@64 $generated@@65 $generated@@66 $generated@@68 $generated@@69 $generated@@70 $generated@@67) $generated@@71 $generated@@72) ($generated@@46 $generated@@64 $generated@@65 $generated@@66 $generated@@68 $generated@@71 $generated@@72)))
 :weight 0
)) (forall (($generated@@73 T@T) ($generated@@74 T@T) ($generated@@75 T@T) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ) (!  (or (= $generated@@79 $generated@@81) (= ($generated@@46 $generated@@73 $generated@@74 $generated@@75 ($generated@@53 $generated@@73 $generated@@74 $generated@@75 $generated@@77 $generated@@78 $generated@@79 $generated@@76) $generated@@80 $generated@@81) ($generated@@46 $generated@@73 $generated@@74 $generated@@75 $generated@@77 $generated@@80 $generated@@81)))
 :weight 0
)))) (= ($generated@@2 $generated@@47) 3)) (= ($generated@@2 $generated@@48) 4)) (forall (($generated@@82 T@T) ($generated@@83 T@T) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (! (= ($generated@@50 $generated@@82 $generated@@83 ($generated@@54 $generated@@82 $generated@@83 $generated@@85 $generated@@86 $generated@@84) $generated@@86) $generated@@84)
 :weight 0
))) (forall (($generated@@87 T@T) ($generated@@88 T@T) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ) (!  (or (= $generated@@91 $generated@@92) (= ($generated@@50 $generated@@87 $generated@@88 ($generated@@54 $generated@@87 $generated@@88 $generated@@90 $generated@@91 $generated@@89) $generated@@92) ($generated@@50 $generated@@87 $generated@@88 $generated@@90 $generated@@92)))
 :weight 0
))) (= ($generated@@2 $generated@@51) 5)) (forall (($generated@@93 T@T) ($generated@@94 T@T) ) (= ($generated@@2 ($generated@@52 $generated@@93 $generated@@94)) 6))) (forall (($generated@@95 T@T) ($generated@@96 T@T) ) (! (= ($generated@@55 ($generated@@52 $generated@@95 $generated@@96)) $generated@@95)
 :pattern ( ($generated@@52 $generated@@95 $generated@@96))
))) (forall (($generated@@97 T@T) ($generated@@98 T@T) ) (! (= ($generated@@56 ($generated@@52 $generated@@97 $generated@@98)) $generated@@98)
 :pattern ( ($generated@@52 $generated@@97 $generated@@98))
))))
(assert (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 Bool) ($generated@@103 T@U) ($generated@@104 T@U) ) (! (= ($generated@@7 ($generated@@46 $generated@@47 $generated@@48 $generated@@3 ($generated@@49 $generated@@99 $generated@@100 $generated@@101 $generated@@102) $generated@@103 $generated@@104))  (=> (and (or (not (= $generated@@103 $generated@@99)) (not true)) ($generated@@7 ($generated@@27 $generated@@3 ($generated@@50 $generated@@48 $generated@@51 ($generated@@50 $generated@@47 ($generated@@52 $generated@@48 $generated@@51) $generated@@100 $generated@@103) $generated@@101)))) $generated@@102))
 :pattern ( ($generated@@46 $generated@@47 $generated@@48 $generated@@3 ($generated@@49 $generated@@99 $generated@@100 $generated@@101 $generated@@102) $generated@@103 $generated@@104))
)))
(assert (forall (($generated@@105 Int) ($generated@@106 Int) ) (! (= ($generated@@35 $generated@@105 $generated@@106) (* $generated@@105 $generated@@106))
 :pattern ( ($generated@@35 $generated@@105 $generated@@106))
)))
(assert  (=> (<= 0 $generated@@31) (forall (($generated@@107 T@U) ($generated@@108 Int) ($generated@@109 Int) ) (!  (=> (or ($generated@@34 $generated@@108 $generated@@109) (and (< 0 $generated@@31) (and (<= ($generated@@22 0) $generated@@108) (<= ($generated@@22 0) $generated@@109)))) (and (=> (or (not (= $generated@@108 ($generated@@22 0))) (not true)) (and ($generated@@34 (- $generated@@108 1) (+ ($generated@@35 $generated@@108 $generated@@109) 1)) ($generated@@34 (- $generated@@108 1) ($generated@@35 ($generated@@35 ($generated@@22 2) $generated@@108) $generated@@109)))) (= ($generated@@32 ($generated@@33 $generated@@107) $generated@@108 $generated@@109) (ite (= $generated@@108 ($generated@@22 0)) 0 (+ ($generated@@32 $generated@@107 (- $generated@@108 1) (+ ($generated@@35 $generated@@108 $generated@@109) 1)) ($generated@@32 $generated@@107 (- $generated@@108 1) ($generated@@35 ($generated@@35 ($generated@@22 2) $generated@@108) $generated@@109)))))))
 :pattern ( ($generated@@32 ($generated@@33 $generated@@107) $generated@@108 $generated@@109))
))))
(assert (= ($generated@@110 $generated@@19) $generated@@0))
(assert (= ($generated@@111 $generated@@19) $generated@@1))
(assert (forall (($generated@@112 Int) ) (! (= ($generated@@28 $generated@@4 ($generated@@8 ($generated@@22 $generated@@112))) ($generated@@24 $generated@@51 ($generated@@28 $generated@@4 ($generated@@8 $generated@@112))))
 :pattern ( ($generated@@28 $generated@@4 ($generated@@8 ($generated@@22 $generated@@112))))
)))
(assert (forall (($generated@@113 T@U) ($generated@@114 T@T) ) (! (= ($generated@@28 $generated@@114 ($generated@@24 $generated@@114 $generated@@113)) ($generated@@24 $generated@@51 ($generated@@28 $generated@@114 $generated@@113)))
 :pattern ( ($generated@@28 $generated@@114 ($generated@@24 $generated@@114 $generated@@113)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@115 () T@U)
(declare-fun $generated@@116 () T@U)
(declare-fun $generated@@117 () T@U)
(declare-fun $generated@@118 () Int)
(declare-fun $generated@@119 () Int)
(declare-fun $generated@@120 () T@U)
(declare-fun $generated@@121 (T@U) Bool)
(declare-fun $generated@@122 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 10000000)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 5) (let (($generated@@123  (=> (= $generated@@115 ($generated@@49 $generated@@116 $generated@@117 $generated false)) (and (=> (= (ControlFlow 0 2) (- 0 4)) ($generated@@39 $generated@@4 ($generated@@8 ($generated@@22 10)) $generated@@19)) (=> ($generated@@39 $generated@@4 ($generated@@8 ($generated@@22 10)) $generated@@19) (=> (and (= $generated@@118 ($generated@@22 10)) ($generated@@18 $generated@@4 ($generated@@8 $generated@@118) $generated@@19 $generated@@117)) (and (=> (= (ControlFlow 0 2) (- 0 3)) ($generated@@39 $generated@@4 ($generated@@8 ($generated@@22 5)) $generated@@19)) (=> ($generated@@39 $generated@@4 ($generated@@8 ($generated@@22 5)) $generated@@19) (=> (= $generated@@119 ($generated@@22 5)) (=> (and (and ($generated@@18 $generated@@4 ($generated@@8 $generated@@119) $generated@@19 $generated@@117) ($generated@@34 ($generated@@22 10) ($generated@@22 5))) (and ($generated@@34 ($generated@@22 10) ($generated@@22 5)) (= (ControlFlow 0 2) (- 0 1)))) (= ($generated@@22 ($generated@@32 ($generated@@33 ($generated@@33 $generated@@120)) ($generated@@22 10) ($generated@@22 5))) ($generated@@22 0))))))))))))
(let (($generated@@124  (=> (and (and ($generated@@121 $generated@@117) ($generated@@122 $generated@@117)) (and (= 1 $generated@@31) (= (ControlFlow 0 5) 2))) $generated@@123)))
$generated@@124)))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(pop 1)
; Out of resource
