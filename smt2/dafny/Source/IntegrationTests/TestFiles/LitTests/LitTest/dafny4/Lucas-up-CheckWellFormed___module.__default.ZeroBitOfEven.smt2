(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (Bool) T@U)
(declare-fun $generated@@7 (T@U) Bool)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun $generated@@9 (T@U) Int)
(declare-fun $generated@@10 (Real) T@U)
(declare-fun $generated@@11 (T@U) Real)
(declare-fun $generated@@18 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@19 () T@U)
(declare-fun $generated@@22 (Int) Int)
(declare-fun $generated@@24 (T@T T@U) T@U)
(declare-fun $generated@@27 () Int)
(declare-fun $generated@@28 (T@U Int Int) Bool)
(declare-fun $generated@@29 (T@U) T@U)
(declare-fun $generated@@30 (Int Int) Bool)
(declare-fun $generated@@31 (Int Int) Int)
(declare-fun $generated@@32 (Int Int) Int)
(declare-fun $generated@@36 (T@T T@U) T@U)
(declare-fun $generated@@37 (T@T T@U) T@U)
(declare-fun $generated@@40 (T@T T@U T@U) Bool)
(declare-fun $generated@@52 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@53 () T@T)
(declare-fun $generated@@54 () T@T)
(declare-fun $generated@@55 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@56 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@57 () T@T)
(declare-fun $generated@@58 (T@T T@T) T@T)
(declare-fun $generated@@59 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@60 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@61 (T@T) T@T)
(declare-fun $generated@@62 (T@T) T@T)
(declare-fun $generated@@113 (Int Int) Int)
(declare-fun $generated@@116 (T@U) T@U)
(declare-fun $generated@@117 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@4) 1)) (= ($generated@@2 $generated@@5) 2)) (forall (($generated@@12 Bool) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Int) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Real) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))))
(assert (distinct $generated $generated@@0 $generated@@1)
)
(assert (forall (($generated@@20 T@U) ($generated@@21 T@U) ) (! ($generated@@18 $generated@@4 $generated@@20 $generated@@19 $generated@@21)
 :pattern ( ($generated@@18 $generated@@4 $generated@@20 $generated@@19 $generated@@21))
)))
(assert (forall (($generated@@23 Int) ) (! (= ($generated@@22 $generated@@23) $generated@@23)
 :pattern ( ($generated@@22 $generated@@23))
)))
(assert (forall (($generated@@25 T@U) ($generated@@26 T@T) ) (! (= ($generated@@24 $generated@@26 $generated@@25) $generated@@25)
 :pattern ( ($generated@@24 $generated@@26 $generated@@25))
)))
(assert  (=> (<= 0 $generated@@27) (forall (($generated@@33 T@U) ($generated@@34 Int) ($generated@@35 Int) ) (!  (=> (or ($generated@@30 ($generated@@22 $generated@@34) ($generated@@22 $generated@@35)) (and (< 0 $generated@@27) (and (<= ($generated@@22 0) $generated@@34) (<= ($generated@@22 0) $generated@@35)))) (and (=> (or (not (= ($generated@@22 $generated@@34) ($generated@@22 0))) (not true)) ($generated@@30 ($generated@@22 (- $generated@@34 1)) ($generated@@22 ($generated@@31 $generated@@35 ($generated@@22 2))))) (= ($generated@@28 ($generated@@29 $generated@@33) ($generated@@22 $generated@@34) ($generated@@22 $generated@@35)) (ite (= ($generated@@22 $generated@@34) ($generated@@22 0)) (= ($generated@@22 ($generated@@32 $generated@@35 ($generated@@22 2))) ($generated@@22 1)) ($generated@@28 ($generated@@29 $generated@@33) ($generated@@22 (- $generated@@34 1)) ($generated@@22 ($generated@@31 $generated@@35 ($generated@@22 2))))))))
 :weight 3
 :pattern ( ($generated@@28 ($generated@@29 $generated@@33) ($generated@@22 $generated@@34) ($generated@@22 $generated@@35)))
))))
(assert (forall (($generated@@38 T@U) ($generated@@39 T@T) ) (! (= ($generated@@37 $generated@@39 ($generated@@36 $generated@@39 $generated@@38)) $generated@@38)
 :pattern ( ($generated@@36 $generated@@39 $generated@@38))
)))
(assert (forall (($generated@@41 T@U) ) (! (= ($generated@@40 $generated@@4 $generated@@41 $generated@@19) (<= ($generated@@22 0) ($generated@@9 $generated@@41)))
 :pattern ( ($generated@@40 $generated@@4 $generated@@41 $generated@@19))
)))
(assert (forall (($generated@@42 T@U) ($generated@@43 Int) ($generated@@44 Int) ) (! (= ($generated@@28 ($generated@@29 $generated@@42) $generated@@43 $generated@@44) ($generated@@28 $generated@@42 $generated@@43 $generated@@44))
 :pattern ( ($generated@@28 ($generated@@29 $generated@@42) $generated@@43 $generated@@44))
)))
(assert  (=> (<= 0 $generated@@27) (forall (($generated@@45 T@U) ($generated@@46 Int) ($generated@@47 Int) ) (!  (=> (or ($generated@@30 $generated@@46 $generated@@47) (and (< 0 $generated@@27) (and (<= ($generated@@22 0) $generated@@46) (<= ($generated@@22 0) $generated@@47)))) (and (=> (or (not (= $generated@@46 ($generated@@22 0))) (not true)) ($generated@@30 (- $generated@@46 1) ($generated@@31 $generated@@47 ($generated@@22 2)))) (= ($generated@@28 ($generated@@29 $generated@@45) $generated@@46 $generated@@47) (ite (= $generated@@46 ($generated@@22 0)) (= ($generated@@32 $generated@@47 ($generated@@22 2)) ($generated@@22 1)) ($generated@@28 $generated@@45 (- $generated@@46 1) ($generated@@31 $generated@@47 ($generated@@22 2)))))))
 :pattern ( ($generated@@28 ($generated@@29 $generated@@45) $generated@@46 $generated@@47))
))))
(assert (forall (($generated@@48 Int) ($generated@@49 Int) ) (! (= ($generated@@31 $generated@@48 $generated@@49) (div $generated@@48 $generated@@49))
 :pattern ( ($generated@@31 $generated@@48 $generated@@49))
)))
(assert (forall (($generated@@50 T@U) ($generated@@51 T@T) ) (! (= ($generated@@36 $generated@@51 ($generated@@37 $generated@@51 $generated@@50)) $generated@@50)
 :pattern ( ($generated@@37 $generated@@51 $generated@@50))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@63 T@T) ($generated@@64 T@T) ($generated@@65 T@T) ($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@U) ) (! (= ($generated@@52 $generated@@63 $generated@@64 $generated@@65 ($generated@@59 $generated@@63 $generated@@64 $generated@@65 $generated@@67 $generated@@68 $generated@@69 $generated@@66) $generated@@68 $generated@@69) $generated@@66)
 :weight 0
)) (and (forall (($generated@@70 T@T) ($generated@@71 T@T) ($generated@@72 T@T) ($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ) (!  (or (= $generated@@75 $generated@@77) (= ($generated@@52 $generated@@70 $generated@@71 $generated@@72 ($generated@@59 $generated@@70 $generated@@71 $generated@@72 $generated@@74 $generated@@75 $generated@@76 $generated@@73) $generated@@77 $generated@@78) ($generated@@52 $generated@@70 $generated@@71 $generated@@72 $generated@@74 $generated@@77 $generated@@78)))
 :weight 0
)) (forall (($generated@@79 T@T) ($generated@@80 T@T) ($generated@@81 T@T) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ) (!  (or (= $generated@@85 $generated@@87) (= ($generated@@52 $generated@@79 $generated@@80 $generated@@81 ($generated@@59 $generated@@79 $generated@@80 $generated@@81 $generated@@83 $generated@@84 $generated@@85 $generated@@82) $generated@@86 $generated@@87) ($generated@@52 $generated@@79 $generated@@80 $generated@@81 $generated@@83 $generated@@86 $generated@@87)))
 :weight 0
)))) (= ($generated@@2 $generated@@53) 3)) (= ($generated@@2 $generated@@54) 4)) (forall (($generated@@88 T@T) ($generated@@89 T@T) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ) (! (= ($generated@@56 $generated@@88 $generated@@89 ($generated@@60 $generated@@88 $generated@@89 $generated@@91 $generated@@92 $generated@@90) $generated@@92) $generated@@90)
 :weight 0
))) (forall (($generated@@93 T@T) ($generated@@94 T@T) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ) (!  (or (= $generated@@97 $generated@@98) (= ($generated@@56 $generated@@93 $generated@@94 ($generated@@60 $generated@@93 $generated@@94 $generated@@96 $generated@@97 $generated@@95) $generated@@98) ($generated@@56 $generated@@93 $generated@@94 $generated@@96 $generated@@98)))
 :weight 0
))) (= ($generated@@2 $generated@@57) 5)) (forall (($generated@@99 T@T) ($generated@@100 T@T) ) (= ($generated@@2 ($generated@@58 $generated@@99 $generated@@100)) 6))) (forall (($generated@@101 T@T) ($generated@@102 T@T) ) (! (= ($generated@@61 ($generated@@58 $generated@@101 $generated@@102)) $generated@@101)
 :pattern ( ($generated@@58 $generated@@101 $generated@@102))
))) (forall (($generated@@103 T@T) ($generated@@104 T@T) ) (! (= ($generated@@62 ($generated@@58 $generated@@103 $generated@@104)) $generated@@104)
 :pattern ( ($generated@@58 $generated@@103 $generated@@104))
))))
(assert (forall (($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 Bool) ($generated@@109 T@U) ($generated@@110 T@U) ) (! (= ($generated@@7 ($generated@@52 $generated@@53 $generated@@54 $generated@@3 ($generated@@55 $generated@@105 $generated@@106 $generated@@107 $generated@@108) $generated@@109 $generated@@110))  (=> (and (or (not (= $generated@@109 $generated@@105)) (not true)) ($generated@@7 ($generated@@36 $generated@@3 ($generated@@56 $generated@@54 $generated@@57 ($generated@@56 $generated@@53 ($generated@@58 $generated@@54 $generated@@57) $generated@@106 $generated@@109) $generated@@107)))) $generated@@108))
 :pattern ( ($generated@@52 $generated@@53 $generated@@54 $generated@@3 ($generated@@55 $generated@@105 $generated@@106 $generated@@107 $generated@@108) $generated@@109 $generated@@110))
)))
(assert (forall (($generated@@111 Int) ($generated@@112 Int) ) (! (= ($generated@@32 $generated@@111 $generated@@112) (mod $generated@@111 $generated@@112))
 :pattern ( ($generated@@32 $generated@@111 $generated@@112))
)))
(assert (forall (($generated@@114 Int) ($generated@@115 Int) ) (! (= ($generated@@113 $generated@@114 $generated@@115) (* $generated@@114 $generated@@115))
 :pattern ( ($generated@@113 $generated@@114 $generated@@115))
)))
(assert (= ($generated@@116 $generated@@19) $generated@@0))
(assert (= ($generated@@117 $generated@@19) $generated@@1))
(assert (forall (($generated@@118 Int) ) (! (= ($generated@@37 $generated@@4 ($generated@@8 ($generated@@22 $generated@@118))) ($generated@@24 $generated@@57 ($generated@@37 $generated@@4 ($generated@@8 $generated@@118))))
 :pattern ( ($generated@@37 $generated@@4 ($generated@@8 ($generated@@22 $generated@@118))))
)))
(assert (forall (($generated@@119 T@U) ($generated@@120 T@T) ) (! (= ($generated@@37 $generated@@120 ($generated@@24 $generated@@120 $generated@@119)) ($generated@@24 $generated@@57 ($generated@@37 $generated@@120 $generated@@119)))
 :pattern ( ($generated@@37 $generated@@120 ($generated@@24 $generated@@120 $generated@@119)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@121 () T@U)
(declare-fun $generated@@122 () T@U)
(declare-fun $generated@@123 () T@U)
(declare-fun $generated@@124 (T@U) Bool)
(declare-fun $generated@@125 () T@U)
(declare-fun $generated@@126 (T@U) Bool)
(declare-fun $generated@@127 () Int)
(declare-fun $generated@@128 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 4) (let (($generated@@129  (=> (= $generated@@121 ($generated@@55 $generated@@122 $generated@@123 $generated false)) (=> (and (and ($generated@@124 $generated@@125) ($generated@@126 $generated@@125)) (= $generated@@123 $generated@@125)) (and (=> (= (ControlFlow 0 2) (- 0 3)) ($generated@@40 $generated@@4 ($generated@@8 ($generated@@22 0)) $generated@@19)) (=> ($generated@@40 $generated@@4 ($generated@@8 ($generated@@22 0)) $generated@@19) (=> (= $generated@@127 ($generated@@22 0)) (=> (and ($generated@@18 $generated@@4 ($generated@@8 $generated@@127) $generated@@19 $generated@@125) (= (ControlFlow 0 2) (- 0 1))) ($generated@@40 $generated@@4 ($generated@@8 ($generated@@113 ($generated@@22 2) $generated@@128)) $generated@@19)))))))))
(let (($generated@@130  (=> (and (and (and ($generated@@124 $generated@@123) ($generated@@126 $generated@@123)) (<= ($generated@@22 0) $generated@@128)) (and (= 1 $generated@@27) (= (ControlFlow 0 4) 2))) $generated@@129)))
$generated@@130)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
