(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TReal () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagReal () T@U)
(declare-fun TagSet () T@U)
(declare-fun TagMap () T@U)
(declare-fun alloc () T@U)
(declare-fun |##_System._tuple#2._#Make2| () T@U)
(declare-fun Tagclass._System.Tuple2 () T@U)
(declare-fun Tagclass._module.Class () T@U)
(declare-fun Tagclass._module.Class? () T@U)
(declare-fun Tagclass._module.Record () T@U)
(declare-fun Tagclass._module.byte () T@U)
(declare-fun |##_module.Record.Make| () T@U)
(declare-fun |tytagFamily$_tuple#2| () T@U)
(declare-fun tytagFamily$Class () T@U)
(declare-fun tytagFamily$Record () T@U)
(declare-fun tytagFamily$byte () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun |#_module.Record.Make| (T@U T@U T@U Int Int) T@U)
(declare-fun BoxRank (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass._module.byte () T@U)
(declare-fun _System.Tuple2.___hMake2_q (T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun Tclass._System.Tuple2 (T@U T@U) T@U)
(declare-fun _module.Record.Make_q (T@U) Bool)
(declare-fun Tclass._module.Record (T@U) T@U)
(declare-fun refType () T@T)
(declare-fun Tclass._module.Class? () T@U)
(declare-fun null () T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun LitInt (Int) Int)
(declare-fun Tclass._module.Class () T@U)
(declare-fun |#_System._tuple#2._#Make2| (T@U T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun _module.Record._0 (T@U) T@U)
(declare-fun _module.Record._1 (T@U) T@U)
(declare-fun _module.Record._2 (T@U) T@U)
(declare-fun _module.Record._3 (T@U) Int)
(declare-fun _module.Record._4 (T@U) Int)
(declare-fun LitReal (Real) Real)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun SetType () T@T)
(declare-fun TSet (T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun TagFamily (T@U) T@U)
(declare-fun TMap (T@U T@U) T@U)
(declare-fun Inv0_TMap (T@U) T@U)
(declare-fun Inv1_TMap (T@U) T@U)
(declare-fun Tclass._System.Tuple2_0 (T@U) T@U)
(declare-fun Tclass._System.Tuple2_1 (T@U) T@U)
(declare-fun _System.Tuple2._0 (T@U) T@U)
(declare-fun _System.Tuple2._1 (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun Tclass._module.Record_0 (T@U) T@U)
(declare-fun MapType () T@T)
(declare-fun |Map#Elements| (T@U) T@U)
(declare-fun |Map#Domain| (T@U) T@U)
(declare-fun |Map#Empty| () T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun |Map#Values| (T@U) T@U)
(declare-fun |Map#Items| (T@U) T@U)
(declare-fun |Map#Build| (T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TReal TagInt TagReal TagSet TagMap alloc |##_System._tuple#2._#Make2| Tagclass._System.Tuple2 Tagclass._module.Class Tagclass._module.Class? Tagclass._module.Record Tagclass._module.byte |##_module.Record.Make| |tytagFamily$_tuple#2| tytagFamily$Class tytagFamily$Record tytagFamily$byte)
)
(assert (= (Tag TInt) TagInt))
(assert (= (Tag TReal) TagReal))
(assert (forall ((|a#6#0#0| T@U) (|a#6#1#0| T@U) (|a#6#2#0| T@U) (|a#6#3#0| Int) (|a#6#4#0| Int) ) (! (< (BoxRank |a#6#1#0|) (DtRank (|#_module.Record.Make| |a#6#0#0| |a#6#1#0| |a#6#2#0| |a#6#3#0| |a#6#4#0|)))
 :pattern ( (|#_module.Record.Make| |a#6#0#0| |a#6#1#0| |a#6#2#0| |a#6#3#0| |a#6#4#0|))
)))
(assert (forall ((|x#0| T@U) ($h T@U) ) (! ($IsAlloc intType |x#0| Tclass._module.byte $h)
 :pattern ( ($IsAlloc intType |x#0| Tclass._module.byte $h))
)))
(assert (= (Ctor DatatypeTypeType) 3))
(assert (forall ((|_System._tuple#2$T0| T@U) (|_System._tuple#2$T1| T@U) (d T@U) ) (!  (=> ($Is DatatypeTypeType d (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)) (_System.Tuple2.___hMake2_q d))
 :pattern ( (_System.Tuple2.___hMake2_q d) ($Is DatatypeTypeType d (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)))
)))
(assert (forall ((_module.Record$G T@U) (d@@0 T@U) ) (!  (=> ($Is DatatypeTypeType d@@0 (Tclass._module.Record _module.Record$G)) (_module.Record.Make_q d@@0))
 :pattern ( (_module.Record.Make_q d@@0) ($Is DatatypeTypeType d@@0 (Tclass._module.Record _module.Record$G)))
)))
(assert (= (Ctor refType) 4))
(assert (forall (($o T@U) ) (! (= ($Is refType $o Tclass._module.Class?)  (or (= $o null) (= (dtype $o) Tclass._module.Class?)))
 :pattern ( ($Is refType $o Tclass._module.Class?))
)))
(assert (= (Ctor BoxType) 5))
(assert (forall ((|a#3#0#0| T@U) (|a#3#1#0| T@U) (|a#3#2#0| T@U) (|a#3#3#0| Int) (|a#3#4#0| Int) ) (! (= (|#_module.Record.Make| (Lit refType |a#3#0#0|) (Lit BoxType |a#3#1#0|) (Lit refType |a#3#2#0|) (LitInt |a#3#3#0|) (LitInt |a#3#4#0|)) (Lit DatatypeTypeType (|#_module.Record.Make| |a#3#0#0| |a#3#1#0| |a#3#2#0| |a#3#3#0| |a#3#4#0|)))
 :pattern ( (|#_module.Record.Make| (Lit refType |a#3#0#0|) (Lit BoxType |a#3#1#0|) (Lit refType |a#3#2#0|) (LitInt |a#3#3#0|) (LitInt |a#3#4#0|)))
)))
(assert (forall ((|c#0| T@U) ($h@@0 T@U) ) (! (= ($IsAlloc refType |c#0| Tclass._module.Class $h@@0) ($IsAlloc refType |c#0| Tclass._module.Class? $h@@0))
 :pattern ( ($IsAlloc refType |c#0| Tclass._module.Class $h@@0))
 :pattern ( ($IsAlloc refType |c#0| Tclass._module.Class? $h@@0))
)))
(assert (forall ((|_System._tuple#2$T0@@0| T@U) (|_System._tuple#2$T1@@0| T@U) (|a#2#0#0| T@U) (|a#2#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|))  (and ($IsBox |a#2#0#0| |_System._tuple#2$T0@@0|) ($IsBox |a#2#1#0| |_System._tuple#2$T1@@0|)))
 :pattern ( ($Is DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|)))
)))
(assert  (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall (($o@@0 T@U) ($h@@1 T@U) ) (! (= ($IsAlloc refType $o@@0 Tclass._module.Class? $h@@1)  (or (= $o@@0 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@1 $o@@0) alloc)))))
 :pattern ( ($IsAlloc refType $o@@0 Tclass._module.Class? $h@@1))
)))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((|a#0#0#0| T@U) (|a#0#1#0| T@U) (|a#0#2#0| T@U) (|a#0#3#0| Int) (|a#0#4#0| Int) ) (! (= (DatatypeCtorId (|#_module.Record.Make| |a#0#0#0| |a#0#1#0| |a#0#2#0| |a#0#3#0| |a#0#4#0|)) |##_module.Record.Make|)
 :pattern ( (|#_module.Record.Make| |a#0#0#0| |a#0#1#0| |a#0#2#0| |a#0#3#0| |a#0#4#0|))
)))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| T@U) (|a#4#2#0| T@U) (|a#4#3#0| Int) (|a#4#4#0| Int) ) (! (= (_module.Record._0 (|#_module.Record.Make| |a#4#0#0| |a#4#1#0| |a#4#2#0| |a#4#3#0| |a#4#4#0|)) |a#4#0#0|)
 :pattern ( (|#_module.Record.Make| |a#4#0#0| |a#4#1#0| |a#4#2#0| |a#4#3#0| |a#4#4#0|))
)))
(assert (forall ((|a#5#0#0| T@U) (|a#5#1#0| T@U) (|a#5#2#0| T@U) (|a#5#3#0| Int) (|a#5#4#0| Int) ) (! (= (_module.Record._1 (|#_module.Record.Make| |a#5#0#0| |a#5#1#0| |a#5#2#0| |a#5#3#0| |a#5#4#0|)) |a#5#1#0|)
 :pattern ( (|#_module.Record.Make| |a#5#0#0| |a#5#1#0| |a#5#2#0| |a#5#3#0| |a#5#4#0|))
)))
(assert (forall ((|a#7#0#0| T@U) (|a#7#1#0| T@U) (|a#7#2#0| T@U) (|a#7#3#0| Int) (|a#7#4#0| Int) ) (! (= (_module.Record._2 (|#_module.Record.Make| |a#7#0#0| |a#7#1#0| |a#7#2#0| |a#7#3#0| |a#7#4#0|)) |a#7#2#0|)
 :pattern ( (|#_module.Record.Make| |a#7#0#0| |a#7#1#0| |a#7#2#0| |a#7#3#0| |a#7#4#0|))
)))
(assert (forall ((|a#8#0#0| T@U) (|a#8#1#0| T@U) (|a#8#2#0| T@U) (|a#8#3#0| Int) (|a#8#4#0| Int) ) (! (= (_module.Record._3 (|#_module.Record.Make| |a#8#0#0| |a#8#1#0| |a#8#2#0| |a#8#3#0| |a#8#4#0|)) |a#8#3#0|)
 :pattern ( (|#_module.Record.Make| |a#8#0#0| |a#8#1#0| |a#8#2#0| |a#8#3#0| |a#8#4#0|))
)))
(assert (forall ((|a#9#0#0| T@U) (|a#9#1#0| T@U) (|a#9#2#0| T@U) (|a#9#3#0| Int) (|a#9#4#0| Int) ) (! (= (_module.Record._4 (|#_module.Record.Make| |a#9#0#0| |a#9#1#0| |a#9#2#0| |a#9#3#0| |a#9#4#0|)) |a#9#4#0|)
 :pattern ( (|#_module.Record.Make| |a#9#0#0| |a#9#1#0| |a#9#2#0| |a#9#3#0| |a#9#4#0|))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 Real) ) (! (= (LitReal x@@3) x@@3)
 :pattern ( (LitReal x@@3))
)))
(assert (forall ((x@@4 T@U) (T T@T) ) (! (= (Lit T x@@4) x@@4)
 :pattern ( (Lit T x@@4))
)))
(assert (forall ((|_System._tuple#2$T0@@1| T@U) (|_System._tuple#2$T1@@1| T@U) (|a#2#0#0@@0| T@U) (|a#2#1#0@@0| T@U) ($h@@2 T@U) ) (!  (=> ($IsGoodHeap $h@@2) (= ($IsAlloc DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0@@0| |a#2#1#0@@0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|) $h@@2)  (and ($IsAllocBox |a#2#0#0@@0| |_System._tuple#2$T0@@1| $h@@2) ($IsAllocBox |a#2#1#0@@0| |_System._tuple#2$T1@@1| $h@@2))))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0@@0| |a#2#1#0@@0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|) $h@@2))
)))
(assert (forall ((d@@1 T@U) ) (! (= (_System.Tuple2.___hMake2_q d@@1) (= (DatatypeCtorId d@@1) |##_System._tuple#2._#Make2|))
 :pattern ( (_System.Tuple2.___hMake2_q d@@1))
)))
(assert (forall ((d@@2 T@U) ) (! (= (_module.Record.Make_q d@@2) (= (DatatypeCtorId d@@2) |##_module.Record.Make|))
 :pattern ( (_module.Record.Make_q d@@2))
)))
(assert (forall ((x@@5 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@5)) x@@5)
 :pattern ( ($Unbox T@@0 x@@5))
)))
(assert (forall ((d@@3 T@U) ) (!  (=> (_System.Tuple2.___hMake2_q d@@3) (exists ((|a#1#0#0| T@U) (|a#1#1#0| T@U) ) (= d@@3 (|#_System._tuple#2._#Make2| |a#1#0#0| |a#1#1#0|))))
 :pattern ( (_System.Tuple2.___hMake2_q d@@3))
)))
(assert (= (Ctor SetType) 8))
(assert (forall ((v T@U) (t0@@0 T@U) ) (! (= ($Is SetType v (TSet t0@@0)) (forall ((bx T@U) ) (!  (=> (|Set#IsMember| v bx) ($IsBox bx t0@@0))
 :pattern ( (|Set#IsMember| v bx))
)))
 :pattern ( ($Is SetType v (TSet t0@@0)))
)))
(assert (forall ((v@@0 T@U) (t T@U) (h@@0 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t h@@0) ($IsAlloc T@@1 v@@0 t h@@0))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t h@@0))
)))
(assert (forall ((h@@1 T@U) (k@@0 T@U) (bx@@0 T@U) (t@@0 T@U) ) (!  (=> ($HeapSucc h@@1 k@@0) (=> ($IsAllocBox bx@@0 t@@0 h@@1) ($IsAllocBox bx@@0 t@@0 k@@0)))
 :pattern ( ($HeapSucc h@@1 k@@0) ($IsAllocBox bx@@0 t@@0 h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@1 T@U) (v@@1 T@U) (t@@1 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@2 k@@1) (=> ($IsAlloc T@@2 v@@1 t@@1 h@@2) ($IsAlloc T@@2 v@@1 t@@1 k@@1)))
 :pattern ( ($HeapSucc h@@2 k@@1) ($IsAlloc T@@2 v@@1 t@@1 h@@2))
)))
(assert (forall ((_module.Record$G@@0 T@U) ) (!  (and (= (Tag (Tclass._module.Record _module.Record$G@@0)) Tagclass._module.Record) (= (TagFamily (Tclass._module.Record _module.Record$G@@0)) tytagFamily$Record))
 :pattern ( (Tclass._module.Record _module.Record$G@@0))
)))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 Tclass._module.Class) (and (= ($Box refType ($Unbox refType bx@@1)) bx@@1) ($Is refType ($Unbox refType bx@@1) Tclass._module.Class)))
 :pattern ( ($IsBox bx@@1 Tclass._module.Class))
)))
(assert (forall ((bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 Tclass._module.Class?) (and (= ($Box refType ($Unbox refType bx@@2)) bx@@2) ($Is refType ($Unbox refType bx@@2) Tclass._module.Class?)))
 :pattern ( ($IsBox bx@@2 Tclass._module.Class?))
)))
(assert (forall ((bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 Tclass._module.byte) (and (= ($Box intType ($Unbox intType bx@@3)) bx@@3) ($Is intType ($Unbox intType bx@@3) Tclass._module.byte)))
 :pattern ( ($IsBox bx@@3 Tclass._module.byte))
)))
(assert (forall ((|c#0@@0| T@U) ) (! (= ($Is refType |c#0@@0| Tclass._module.Class)  (and ($Is refType |c#0@@0| Tclass._module.Class?) (or (not (= |c#0@@0| null)) (not true))))
 :pattern ( ($Is refType |c#0@@0| Tclass._module.Class))
 :pattern ( ($Is refType |c#0@@0| Tclass._module.Class?))
)))
(assert (forall ((d@@4 T@U) ($h@@3 T@U) ) (!  (=> (and ($IsGoodHeap $h@@3) (and (_module.Record.Make_q d@@4) (exists ((_module.Record$G@@1 T@U) ) (! ($IsAlloc DatatypeTypeType d@@4 (Tclass._module.Record _module.Record$G@@1) $h@@3)
 :pattern ( ($IsAlloc DatatypeTypeType d@@4 (Tclass._module.Record _module.Record$G@@1) $h@@3))
)))) ($IsAlloc intType (int_2_U (_module.Record._3 d@@4)) TInt $h@@3))
 :pattern ( ($IsAlloc intType (int_2_U (_module.Record._3 d@@4)) TInt $h@@3))
)))
(assert (forall ((_module.Record$G@@2 T@U) (|a#2#0#0@@1| T@U) (|a#2#1#0@@1| T@U) (|a#2#2#0| T@U) (|a#2#3#0| Int) (|a#2#4#0| Int) ($h@@4 T@U) ) (!  (=> ($IsGoodHeap $h@@4) (= ($IsAlloc DatatypeTypeType (|#_module.Record.Make| |a#2#0#0@@1| |a#2#1#0@@1| |a#2#2#0| |a#2#3#0| |a#2#4#0|) (Tclass._module.Record _module.Record$G@@2) $h@@4)  (and (and (and (and ($IsAlloc refType |a#2#0#0@@1| Tclass._module.Class? $h@@4) ($IsAllocBox |a#2#1#0@@1| _module.Record$G@@2 $h@@4)) ($IsAlloc refType |a#2#2#0| Tclass._module.Class $h@@4)) ($IsAlloc intType (int_2_U |a#2#3#0|) TInt $h@@4)) ($IsAlloc intType (int_2_U |a#2#4#0|) Tclass._module.byte $h@@4))))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_module.Record.Make| |a#2#0#0@@1| |a#2#1#0@@1| |a#2#2#0| |a#2#3#0| |a#2#4#0|) (Tclass._module.Record _module.Record$G@@2) $h@@4))
)))
(assert (forall ((_module.Record$G@@3 T@U) (|a#2#0#0@@2| T@U) (|a#2#1#0@@2| T@U) (|a#2#2#0@@0| T@U) (|a#2#3#0@@0| Int) (|a#2#4#0@@0| Int) ) (! (= ($Is DatatypeTypeType (|#_module.Record.Make| |a#2#0#0@@2| |a#2#1#0@@2| |a#2#2#0@@0| |a#2#3#0@@0| |a#2#4#0@@0|) (Tclass._module.Record _module.Record$G@@3))  (and (and (and (and ($Is refType |a#2#0#0@@2| Tclass._module.Class?) ($IsBox |a#2#1#0@@2| _module.Record$G@@3)) ($Is refType |a#2#2#0@@0| Tclass._module.Class)) ($Is intType (int_2_U |a#2#3#0@@0|) TInt)) ($Is intType (int_2_U |a#2#4#0@@0|) Tclass._module.byte)))
 :pattern ( ($Is DatatypeTypeType (|#_module.Record.Make| |a#2#0#0@@2| |a#2#1#0@@2| |a#2#2#0@@0| |a#2#3#0@@0| |a#2#4#0@@0|) (Tclass._module.Record _module.Record$G@@3)))
)))
(assert (forall ((d@@5 T@U) ($h@@5 T@U) ) (!  (=> (and ($IsGoodHeap $h@@5) (and (_module.Record.Make_q d@@5) (exists ((_module.Record$G@@4 T@U) ) (! ($IsAlloc DatatypeTypeType d@@5 (Tclass._module.Record _module.Record$G@@4) $h@@5)
 :pattern ( ($IsAlloc DatatypeTypeType d@@5 (Tclass._module.Record _module.Record$G@@4) $h@@5))
)))) ($IsAlloc refType (_module.Record._0 d@@5) Tclass._module.Class? $h@@5))
 :pattern ( ($IsAlloc refType (_module.Record._0 d@@5) Tclass._module.Class? $h@@5))
)))
(assert (forall ((d@@6 T@U) ($h@@6 T@U) ) (!  (=> (and ($IsGoodHeap $h@@6) (and (_module.Record.Make_q d@@6) (exists ((_module.Record$G@@5 T@U) ) (! ($IsAlloc DatatypeTypeType d@@6 (Tclass._module.Record _module.Record$G@@5) $h@@6)
 :pattern ( ($IsAlloc DatatypeTypeType d@@6 (Tclass._module.Record _module.Record$G@@5) $h@@6))
)))) ($IsAlloc refType (_module.Record._2 d@@6) Tclass._module.Class $h@@6))
 :pattern ( ($IsAlloc refType (_module.Record._2 d@@6) Tclass._module.Class $h@@6))
)))
(assert (forall ((d@@7 T@U) ($h@@7 T@U) ) (!  (=> (and ($IsGoodHeap $h@@7) (and (_module.Record.Make_q d@@7) (exists ((_module.Record$G@@6 T@U) ) (! ($IsAlloc DatatypeTypeType d@@7 (Tclass._module.Record _module.Record$G@@6) $h@@7)
 :pattern ( ($IsAlloc DatatypeTypeType d@@7 (Tclass._module.Record _module.Record$G@@6) $h@@7))
)))) ($IsAlloc intType (int_2_U (_module.Record._4 d@@7)) Tclass._module.byte $h@@7))
 :pattern ( ($IsAlloc intType (int_2_U (_module.Record._4 d@@7)) Tclass._module.byte $h@@7))
)))
(assert (forall ((a T@U) (b T@U) (c T@U) ) (!  (=> (or (not (= a c)) (not true)) (=> (and ($HeapSucc a b) ($HeapSucc b c)) ($HeapSucc a c)))
 :pattern ( ($HeapSucc a b) ($HeapSucc b c))
)))
(assert (forall ((d@@8 T@U) ) (!  (=> (_module.Record.Make_q d@@8) (exists ((|a#1#0#0@@0| T@U) (|a#1#1#0@@0| T@U) (|a#1#2#0| T@U) (|a#1#3#0| Int) (|a#1#4#0| Int) ) (= d@@8 (|#_module.Record.Make| |a#1#0#0@@0| |a#1#1#0@@0| |a#1#2#0| |a#1#3#0| |a#1#4#0|))))
 :pattern ( (_module.Record.Make_q d@@8))
)))
(assert (forall ((bx@@4 T@U) ) (!  (=> ($IsBox bx@@4 TInt) (and (= ($Box intType ($Unbox intType bx@@4)) bx@@4) ($Is intType ($Unbox intType bx@@4) TInt)))
 :pattern ( ($IsBox bx@@4 TInt))
)))
(assert (forall ((bx@@5 T@U) ) (!  (=> ($IsBox bx@@5 TReal) (and (= ($Box realType ($Unbox realType bx@@5)) bx@@5) ($Is realType ($Unbox realType bx@@5) TReal)))
 :pattern ( ($IsBox bx@@5 TReal))
)))
(assert (forall ((v@@2 T@U) (t@@2 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@2) t@@2) ($Is T@@3 v@@2 t@@2))
 :pattern ( ($IsBox ($Box T@@3 v@@2) t@@2))
)))
(assert (forall ((v@@3 T@U) (t0@@1 T@U) (h@@3 T@U) ) (! (= ($IsAlloc SetType v@@3 (TSet t0@@1) h@@3) (forall ((bx@@6 T@U) ) (!  (=> (|Set#IsMember| v@@3 bx@@6) ($IsAllocBox bx@@6 t0@@1 h@@3))
 :pattern ( (|Set#IsMember| v@@3 bx@@6))
)))
 :pattern ( ($IsAlloc SetType v@@3 (TSet t0@@1) h@@3))
)))
(assert (forall ((t@@3 T@U) (u T@U) ) (! (= (Inv0_TMap (TMap t@@3 u)) t@@3)
 :pattern ( (TMap t@@3 u))
)))
(assert (forall ((t@@4 T@U) (u@@0 T@U) ) (! (= (Inv1_TMap (TMap t@@4 u@@0)) u@@0)
 :pattern ( (TMap t@@4 u@@0))
)))
(assert (forall ((t@@5 T@U) (u@@1 T@U) ) (! (= (Tag (TMap t@@5 u@@1)) TagMap)
 :pattern ( (TMap t@@5 u@@1))
)))
(assert (forall ((|a#0#0#0@@0| T@U) (|a#0#1#0@@0| T@U) ) (! (= (DatatypeCtorId (|#_System._tuple#2._#Make2| |a#0#0#0@@0| |a#0#1#0@@0|)) |##_System._tuple#2._#Make2|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#0#0#0@@0| |a#0#1#0@@0|))
)))
(assert (forall ((|_System._tuple#2$T0@@2| T@U) (|_System._tuple#2$T1@@2| T@U) ) (! (= (Tclass._System.Tuple2_0 (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|)) |_System._tuple#2$T0@@2|)
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|))
)))
(assert (forall ((|_System._tuple#2$T0@@3| T@U) (|_System._tuple#2$T1@@3| T@U) ) (! (= (Tclass._System.Tuple2_1 (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|)) |_System._tuple#2$T1@@3|)
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|))
)))
(assert (forall ((|a#4#0#0@@0| T@U) (|a#4#1#0@@0| T@U) ) (! (= (_System.Tuple2._0 (|#_System._tuple#2._#Make2| |a#4#0#0@@0| |a#4#1#0@@0|)) |a#4#0#0@@0|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#4#0#0@@0| |a#4#1#0@@0|))
)))
(assert (forall ((|a#6#0#0@@0| T@U) (|a#6#1#0@@0| T@U) ) (! (= (_System.Tuple2._1 (|#_System._tuple#2._#Make2| |a#6#0#0@@0| |a#6#1#0@@0|)) |a#6#1#0@@0|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#6#0#0@@0| |a#6#1#0@@0|))
)))
(assert (forall ((t@@6 T@U) ) (! (= (Inv0_TSet (TSet t@@6)) t@@6)
 :pattern ( (TSet t@@6))
)))
(assert (forall ((t@@7 T@U) ) (! (= (Tag (TSet t@@7)) TagSet)
 :pattern ( (TSet t@@7))
)))
(assert (forall ((_module.Record$G@@7 T@U) ) (! (= (Tclass._module.Record_0 (Tclass._module.Record _module.Record$G@@7)) _module.Record$G@@7)
 :pattern ( (Tclass._module.Record _module.Record$G@@7))
)))
(assert (forall ((x@@6 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@6)) x@@6)
 :pattern ( ($Box T@@4 x@@6))
)))
(assert (= (Ctor MapType) 9))
(assert (forall ((v@@4 T@U) (t0@@2 T@U) (t1@@0 T@U) (h@@4 T@U) ) (! (= ($IsAlloc MapType v@@4 (TMap t0@@2 t1@@0) h@@4) (forall ((bx@@7 T@U) ) (!  (=> (|Set#IsMember| (|Map#Domain| v@@4) bx@@7) (and ($IsAllocBox (MapType0Select BoxType BoxType (|Map#Elements| v@@4) bx@@7) t1@@0 h@@4) ($IsAllocBox bx@@7 t0@@2 h@@4)))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| v@@4) bx@@7))
 :pattern ( (|Set#IsMember| (|Map#Domain| v@@4) bx@@7))
)))
 :pattern ( ($IsAlloc MapType v@@4 (TMap t0@@2 t1@@0) h@@4))
)))
(assert (forall ((|a#5#0#0@@0| T@U) (|a#5#1#0@@0| T@U) ) (! (< (BoxRank |a#5#0#0@@0|) (DtRank (|#_System._tuple#2._#Make2| |a#5#0#0@@0| |a#5#1#0@@0|)))
 :pattern ( (|#_System._tuple#2._#Make2| |a#5#0#0@@0| |a#5#1#0@@0|))
)))
(assert (forall ((|a#7#0#0@@0| T@U) (|a#7#1#0@@0| T@U) ) (! (< (BoxRank |a#7#1#0@@0|) (DtRank (|#_System._tuple#2._#Make2| |a#7#0#0@@0| |a#7#1#0@@0|)))
 :pattern ( (|#_System._tuple#2._#Make2| |a#7#0#0@@0| |a#7#1#0@@0|))
)))
(assert (forall ((u@@2 T@U) ) (!  (not (|Set#IsMember| (|Map#Domain| |Map#Empty|) u@@2))
 :pattern ( (|Set#IsMember| (|Map#Domain| |Map#Empty|) u@@2))
)))
(assert (forall ((bx@@8 T@U) (s T@U) (t@@8 T@U) ) (!  (=> ($IsBox bx@@8 (TMap s t@@8)) (and (= ($Box MapType ($Unbox MapType bx@@8)) bx@@8) ($Is MapType ($Unbox MapType bx@@8) (TMap s t@@8))))
 :pattern ( ($IsBox bx@@8 (TMap s t@@8)))
)))
(assert (forall ((|_System._tuple#2$T0@@4| T@U) (|_System._tuple#2$T1@@4| T@U) (bx@@9 T@U) ) (!  (=> ($IsBox bx@@9 (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@9)) bx@@9) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@9) (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|))))
 :pattern ( ($IsBox bx@@9 (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|)))
)))
(assert (forall ((d@@9 T@U) (_module.Record$G@@8 T@U) ($h@@8 T@U) ) (!  (=> (and ($IsGoodHeap $h@@8) (and (_module.Record.Make_q d@@9) ($IsAlloc DatatypeTypeType d@@9 (Tclass._module.Record _module.Record$G@@8) $h@@8))) ($IsAllocBox (_module.Record._1 d@@9) _module.Record$G@@8 $h@@8))
 :pattern ( ($IsAllocBox (_module.Record._1 d@@9) _module.Record$G@@8 $h@@8))
)))
(assert  (and (forall ((t0@@3 T@T) (t1@@1 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@3 t1@@1 t2 (MapType1Store t0@@3 t1@@1 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o@@1 T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@1 $f))  (=> (and (or (not (= $o@@1 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@1) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@1 $f))
)))
(assert (forall ((|_System._tuple#2$T0@@5| T@U) (|_System._tuple#2$T1@@5| T@U) ) (!  (and (= (Tag (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|)) Tagclass._System.Tuple2) (= (TagFamily (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|)) |tytagFamily$_tuple#2|))
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|))
)))
(assert (forall ((m@@4 T@U) ) (!  (or (= m@@4 |Map#Empty|) (exists ((k@@2 T@U) ) (|Set#IsMember| (|Map#Domain| m@@4) k@@2)))
 :pattern ( (|Map#Domain| m@@4))
)))
(assert (forall ((m@@5 T@U) ) (!  (or (= m@@5 |Map#Empty|) (exists ((v@@5 T@U) ) (|Set#IsMember| (|Map#Values| m@@5) v@@5)))
 :pattern ( (|Map#Values| m@@5))
)))
(assert (forall ((m@@6 T@U) (item T@U) ) (! (= (|Set#IsMember| (|Map#Items| m@@6) item)  (and (|Set#IsMember| (|Map#Domain| m@@6) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (= (MapType0Select BoxType BoxType (|Map#Elements| m@@6) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item)))))
 :pattern ( (|Set#IsMember| (|Map#Items| m@@6) item))
)))
(assert (forall ((m@@7 T@U) (v@@6 T@U) ) (! (= (|Set#IsMember| (|Map#Values| m@@7) v@@6) (exists ((u@@3 T@U) ) (!  (and (|Set#IsMember| (|Map#Domain| m@@7) u@@3) (= v@@6 (MapType0Select BoxType BoxType (|Map#Elements| m@@7) u@@3)))
 :pattern ( (|Set#IsMember| (|Map#Domain| m@@7) u@@3))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| m@@7) u@@3))
)))
 :pattern ( (|Set#IsMember| (|Map#Values| m@@7) v@@6))
)))
(assert (forall ((m@@8 T@U) (u@@4 T@U) (|u'| T@U) (v@@7 T@U) ) (!  (and (=> (= |u'| u@@4) (and (|Set#IsMember| (|Map#Domain| (|Map#Build| m@@8 u@@4 v@@7)) |u'|) (= (MapType0Select BoxType BoxType (|Map#Elements| (|Map#Build| m@@8 u@@4 v@@7)) |u'|) v@@7))) (=> (or (not (= |u'| u@@4)) (not true)) (and (= (|Set#IsMember| (|Map#Domain| (|Map#Build| m@@8 u@@4 v@@7)) |u'|) (|Set#IsMember| (|Map#Domain| m@@8) |u'|)) (= (MapType0Select BoxType BoxType (|Map#Elements| (|Map#Build| m@@8 u@@4 v@@7)) |u'|) (MapType0Select BoxType BoxType (|Map#Elements| m@@8) |u'|)))))
 :pattern ( (|Set#IsMember| (|Map#Domain| (|Map#Build| m@@8 u@@4 v@@7)) |u'|))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| (|Map#Build| m@@8 u@@4 v@@7)) |u'|))
)))
(assert (forall ((d@@10 T@U) ) (! (= (BoxRank ($Box DatatypeTypeType d@@10)) (DtRank d@@10))
 :pattern ( (BoxRank ($Box DatatypeTypeType d@@10)))
)))
(assert (forall ((bx@@10 T@U) (t@@9 T@U) ) (!  (=> ($IsBox bx@@10 (TSet t@@9)) (and (= ($Box SetType ($Unbox SetType bx@@10)) bx@@10) ($Is SetType ($Unbox SetType bx@@10) (TSet t@@9))))
 :pattern ( ($IsBox bx@@10 (TSet t@@9)))
)))
(assert (forall ((_module.Record$G@@9 T@U) (bx@@11 T@U) ) (!  (=> ($IsBox bx@@11 (Tclass._module.Record _module.Record$G@@9)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@11)) bx@@11) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@11) (Tclass._module.Record _module.Record$G@@9))))
 :pattern ( ($IsBox bx@@11 (Tclass._module.Record _module.Record$G@@9)))
)))
(assert (forall ((v@@8 T@U) (t0@@4 T@U) (t1@@2 T@U) ) (! (= ($Is MapType v@@8 (TMap t0@@4 t1@@2)) (forall ((bx@@12 T@U) ) (!  (=> (|Set#IsMember| (|Map#Domain| v@@8) bx@@12) (and ($IsBox (MapType0Select BoxType BoxType (|Map#Elements| v@@8) bx@@12) t1@@2) ($IsBox bx@@12 t0@@4)))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| v@@8) bx@@12))
 :pattern ( (|Set#IsMember| (|Map#Domain| v@@8) bx@@12))
)))
 :pattern ( ($Is MapType v@@8 (TMap t0@@4 t1@@2)))
)))
(assert (forall ((h@@5 T@U) (r T@U) (f T@U) (x@@7 T@U) ) (!  (=> ($IsGoodHeap (MapType0Store refType (MapType0Type FieldType BoxType) h@@5 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@5 r) f x@@7))) ($HeapSucc h@@5 (MapType0Store refType (MapType0Type FieldType BoxType) h@@5 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@5 r) f x@@7))))
 :pattern ( (MapType0Store refType (MapType0Type FieldType BoxType) h@@5 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@5 r) f x@@7)))
)))
(assert (= (Tag Tclass._module.Class) Tagclass._module.Class))
(assert (= (TagFamily Tclass._module.Class) tytagFamily$Class))
(assert (= (Tag Tclass._module.Class?) Tagclass._module.Class?))
(assert (= (TagFamily Tclass._module.Class?) tytagFamily$Class))
(assert (= (Tag Tclass._module.byte) Tagclass._module.byte))
(assert (= (TagFamily Tclass._module.byte) tytagFamily$byte))
(assert (forall ((d@@11 T@U) (|_System._tuple#2$T0@@6| T@U) ($h@@9 T@U) ) (!  (=> (and ($IsGoodHeap $h@@9) (and (_System.Tuple2.___hMake2_q d@@11) (exists ((|_System._tuple#2$T1@@6| T@U) ) (! ($IsAlloc DatatypeTypeType d@@11 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@9)
 :pattern ( ($IsAlloc DatatypeTypeType d@@11 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@9))
)))) ($IsAllocBox (_System.Tuple2._0 d@@11) |_System._tuple#2$T0@@6| $h@@9))
 :pattern ( ($IsAllocBox (_System.Tuple2._0 d@@11) |_System._tuple#2$T0@@6| $h@@9))
)))
(assert (forall ((d@@12 T@U) (|_System._tuple#2$T1@@7| T@U) ($h@@10 T@U) ) (!  (=> (and ($IsGoodHeap $h@@10) (and (_System.Tuple2.___hMake2_q d@@12) (exists ((|_System._tuple#2$T0@@7| T@U) ) (! ($IsAlloc DatatypeTypeType d@@12 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|) $h@@10)
 :pattern ( ($IsAlloc DatatypeTypeType d@@12 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|) $h@@10))
)))) ($IsAllocBox (_System.Tuple2._1 d@@12) |_System._tuple#2$T1@@7| $h@@10))
 :pattern ( ($IsAllocBox (_System.Tuple2._1 d@@12) |_System._tuple#2$T1@@7| $h@@10))
)))
(assert (forall ((|x#0@@0| T@U) ) (! (= ($Is intType |x#0@@0| Tclass._module.byte)  (and (<= (LitInt 0) (U_2_int |x#0@@0|)) (< (U_2_int |x#0@@0|) 256)))
 :pattern ( ($Is intType |x#0@@0| Tclass._module.byte))
)))
(assert (forall ((|a#3#0#0@@0| T@U) (|a#3#1#0@@0| T@U) ) (! (= (|#_System._tuple#2._#Make2| (Lit BoxType |a#3#0#0@@0|) (Lit BoxType |a#3#1#0@@0|)) (Lit DatatypeTypeType (|#_System._tuple#2._#Make2| |a#3#0#0@@0| |a#3#1#0@@0|)))
 :pattern ( (|#_System._tuple#2._#Make2| (Lit BoxType |a#3#0#0@@0|) (Lit BoxType |a#3#1#0@@0|)))
)))
(assert (forall ((x@@8 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@8))) (Lit BoxType ($Box intType (int_2_U x@@8))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@8))))
)))
(assert (forall ((x@@9 Real) ) (! (= ($Box realType (real_2_U (LitReal x@@9))) (Lit BoxType ($Box realType (real_2_U x@@9))))
 :pattern ( ($Box realType (real_2_U (LitReal x@@9))))
)))
(assert (forall ((x@@10 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@10)) (Lit BoxType ($Box T@@5 x@@10)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@10)))
)))
(assert (forall ((h@@6 T@U) (v@@9 T@U) ) (! ($IsAlloc intType v@@9 TInt h@@6)
 :pattern ( ($IsAlloc intType v@@9 TInt h@@6))
)))
(assert (forall ((h@@7 T@U) (v@@10 T@U) ) (! ($IsAlloc realType v@@10 TReal h@@7)
 :pattern ( ($IsAlloc realType v@@10 TReal h@@7))
)))
(assert (forall ((m@@9 T@U) ) (!  (or (= m@@9 |Map#Empty|) (exists ((k@@3 T@U) (v@@11 T@U) ) (|Set#IsMember| (|Map#Items| m@@9) ($Box DatatypeTypeType (|#_System._tuple#2._#Make2| k@@3 v@@11)))))
 :pattern ( (|Map#Items| m@@9))
)))
(assert (forall ((v@@12 T@U) (t0@@5 T@U) (t1@@3 T@U) ) (!  (=> ($Is MapType v@@12 (TMap t0@@5 t1@@3)) (and (and ($Is SetType (|Map#Domain| v@@12) (TSet t0@@5)) ($Is SetType (|Map#Values| v@@12) (TSet t1@@3))) ($Is SetType (|Map#Items| v@@12) (TSet (Tclass._System.Tuple2 t0@@5 t1@@3)))))
 :pattern ( ($Is MapType v@@12 (TMap t0@@5 t1@@3)))
)))
(assert (forall ((v@@13 T@U) ) (! ($Is intType v@@13 TInt)
 :pattern ( ($Is intType v@@13 TInt))
)))
(assert (forall ((v@@14 T@U) ) (! ($Is realType v@@14 TReal)
 :pattern ( ($Is realType v@@14 TReal))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |c#0@0| () T@U)
(declare-fun |r#4@0| () T@U)
(declare-fun |newtype$check#11@0| () Int)
(declare-fun $Heap@2 () T@U)
(declare-fun |r#2@0| () T@U)
(declare-fun |newtype$check#10@0| () Int)
(declare-fun |r#0@0| () T@U)
(declare-fun |newtype$check#9@0| () Int)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun $Heap () T@U)
(declare-fun $nw@0 () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun $nw@1 () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun $nw@2 () T@U)
(declare-fun |newtype$check#2@0| () Int)
(declare-fun |newtype$check#5@0| () Int)
(declare-fun |newtype$check#8@0| () Int)
(declare-fun |defass#a1#0| () Bool)
(declare-fun |a1#0| () T@U)
(declare-fun |defass#a2#0| () Bool)
(declare-fun |a2#0| () T@U)
(declare-fun |defass#a3#0| () Bool)
(declare-fun |a3#0| () T@U)
(declare-fun |c#0@@1| () T@U)
(declare-fun $FunctionContextHeight () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 35) (let ((anon15_correct true))
(let ((anon24_Else_correct  (=> (and (not (and (|Set#IsMember| (|Map#Domain| |c#0@0|) ($Box DatatypeTypeType |r#4@0|)) (= (_module.Record._4 |r#4@0|) (LitInt 12)))) (= (ControlFlow 0 5) 1)) anon15_correct)))
(let ((anon24_Then_correct  (=> (and (|Set#IsMember| (|Map#Domain| |c#0@0|) ($Box DatatypeTypeType |r#4@0|)) (= (_module.Record._4 |r#4@0|) (LitInt 12))) (and (=> (= (ControlFlow 0 3) (- 0 4)) (|Set#IsMember| (|Map#Domain| |c#0@0|) ($Box DatatypeTypeType |r#4@0|))) (=> (= (ControlFlow 0 3) 1) anon15_correct)))))
(let ((anon23_Else_correct  (=> (not (|Set#IsMember| (|Map#Domain| |c#0@0|) ($Box DatatypeTypeType |r#4@0|))) (and (=> (= (ControlFlow 0 8) 3) anon24_Then_correct) (=> (= (ControlFlow 0 8) 5) anon24_Else_correct)))))
(let ((anon23_Then_correct  (=> (|Set#IsMember| (|Map#Domain| |c#0@0|) ($Box DatatypeTypeType |r#4@0|)) (=> (and (_module.Record.Make_q |r#4@0|) (= |newtype$check#11@0| (LitInt 12))) (and (=> (= (ControlFlow 0 6) (- 0 7)) (and (<= (LitInt 0) |newtype$check#11@0|) (< |newtype$check#11@0| 256))) (=> (and (<= (LitInt 0) |newtype$check#11@0|) (< |newtype$check#11@0| 256)) (and (=> (= (ControlFlow 0 6) 3) anon24_Then_correct) (=> (= (ControlFlow 0 6) 5) anon24_Else_correct))))))))
(let ((anon22_Then_correct  (=> (and ($Is DatatypeTypeType |r#4@0| (Tclass._module.Record Tclass._module.Class?)) ($IsAlloc DatatypeTypeType |r#4@0| (Tclass._module.Record Tclass._module.Class?) $Heap@2)) (and (=> (= (ControlFlow 0 9) 6) anon23_Then_correct) (=> (= (ControlFlow 0 9) 8) anon23_Else_correct)))))
(let ((anon22_Else_correct  (=> (and (not (and ($Is DatatypeTypeType |r#4@0| (Tclass._module.Record Tclass._module.Class?)) ($IsAlloc DatatypeTypeType |r#4@0| (Tclass._module.Record Tclass._module.Class?) $Heap@2))) (= (ControlFlow 0 2) 1)) anon15_correct)))
(let ((anon10_correct  (=> (forall ((|r#3| T@U) ) (!  (=> ($Is DatatypeTypeType |r#3| (Tclass._module.Record Tclass._module.Class?)) (=> (|Set#IsMember| (|Map#Domain| |c#0@0|) ($Box DatatypeTypeType |r#3|)) (_module.Record.Make_q |r#3|)))
 :pattern ( ($Unbox realType (MapType0Select BoxType BoxType (|Map#Elements| |c#0@0|) ($Box DatatypeTypeType |r#3|))))
 :pattern ( (_module.Record._4 |r#3|))
 :pattern ( (|Set#IsMember| (|Map#Domain| |c#0@0|) ($Box DatatypeTypeType |r#3|)))
)) (and (=> (= (ControlFlow 0 10) 9) anon22_Then_correct) (=> (= (ControlFlow 0 10) 2) anon22_Else_correct)))))
(let ((anon21_Else_correct  (=> (and (not (and (|Set#IsMember| (|Map#Domain| |c#0@0|) ($Box DatatypeTypeType |r#2@0|)) (= (_module.Record._4 |r#2@0|) (LitInt 11)))) (= (ControlFlow 0 14) 10)) anon10_correct)))
(let ((anon21_Then_correct  (=> (and (|Set#IsMember| (|Map#Domain| |c#0@0|) ($Box DatatypeTypeType |r#2@0|)) (= (_module.Record._4 |r#2@0|) (LitInt 11))) (and (=> (= (ControlFlow 0 12) (- 0 13)) (|Set#IsMember| (|Map#Domain| |c#0@0|) ($Box DatatypeTypeType |r#2@0|))) (=> (= (ControlFlow 0 12) 10) anon10_correct)))))
(let ((anon20_Else_correct  (=> (not (|Set#IsMember| (|Map#Domain| |c#0@0|) ($Box DatatypeTypeType |r#2@0|))) (and (=> (= (ControlFlow 0 17) 12) anon21_Then_correct) (=> (= (ControlFlow 0 17) 14) anon21_Else_correct)))))
(let ((anon20_Then_correct  (=> (|Set#IsMember| (|Map#Domain| |c#0@0|) ($Box DatatypeTypeType |r#2@0|)) (=> (and (_module.Record.Make_q |r#2@0|) (= |newtype$check#10@0| (LitInt 11))) (and (=> (= (ControlFlow 0 15) (- 0 16)) (and (<= (LitInt 0) |newtype$check#10@0|) (< |newtype$check#10@0| 256))) (=> (and (<= (LitInt 0) |newtype$check#10@0|) (< |newtype$check#10@0| 256)) (and (=> (= (ControlFlow 0 15) 12) anon21_Then_correct) (=> (= (ControlFlow 0 15) 14) anon21_Else_correct))))))))
(let ((anon19_Then_correct  (=> (and ($Is DatatypeTypeType |r#2@0| (Tclass._module.Record Tclass._module.Class?)) ($IsAlloc DatatypeTypeType |r#2@0| (Tclass._module.Record Tclass._module.Class?) $Heap@2)) (and (=> (= (ControlFlow 0 18) 15) anon20_Then_correct) (=> (= (ControlFlow 0 18) 17) anon20_Else_correct)))))
(let ((anon19_Else_correct  (=> (and (not (and ($Is DatatypeTypeType |r#2@0| (Tclass._module.Record Tclass._module.Class?)) ($IsAlloc DatatypeTypeType |r#2@0| (Tclass._module.Record Tclass._module.Class?) $Heap@2))) (= (ControlFlow 0 11) 10)) anon10_correct)))
(let ((anon5_correct  (=> (forall ((|r#1| T@U) ) (!  (=> ($Is DatatypeTypeType |r#1| (Tclass._module.Record Tclass._module.Class?)) (=> (|Set#IsMember| (|Map#Domain| |c#0@0|) ($Box DatatypeTypeType |r#1|)) (_module.Record.Make_q |r#1|)))
 :pattern ( ($Unbox realType (MapType0Select BoxType BoxType (|Map#Elements| |c#0@0|) ($Box DatatypeTypeType |r#1|))))
 :pattern ( (_module.Record._4 |r#1|))
 :pattern ( (|Set#IsMember| (|Map#Domain| |c#0@0|) ($Box DatatypeTypeType |r#1|)))
)) (and (=> (= (ControlFlow 0 19) 18) anon19_Then_correct) (=> (= (ControlFlow 0 19) 11) anon19_Else_correct)))))
(let ((anon18_Else_correct  (=> (and (not (and (|Set#IsMember| (|Map#Domain| |c#0@0|) ($Box DatatypeTypeType |r#0@0|)) (= (_module.Record._4 |r#0@0|) (LitInt 10)))) (= (ControlFlow 0 23) 19)) anon5_correct)))
(let ((anon18_Then_correct  (=> (and (|Set#IsMember| (|Map#Domain| |c#0@0|) ($Box DatatypeTypeType |r#0@0|)) (= (_module.Record._4 |r#0@0|) (LitInt 10))) (and (=> (= (ControlFlow 0 21) (- 0 22)) (|Set#IsMember| (|Map#Domain| |c#0@0|) ($Box DatatypeTypeType |r#0@0|))) (=> (= (ControlFlow 0 21) 19) anon5_correct)))))
(let ((anon17_Else_correct  (=> (not (|Set#IsMember| (|Map#Domain| |c#0@0|) ($Box DatatypeTypeType |r#0@0|))) (and (=> (= (ControlFlow 0 26) 21) anon18_Then_correct) (=> (= (ControlFlow 0 26) 23) anon18_Else_correct)))))
(let ((anon17_Then_correct  (=> (|Set#IsMember| (|Map#Domain| |c#0@0|) ($Box DatatypeTypeType |r#0@0|)) (=> (and (_module.Record.Make_q |r#0@0|) (= |newtype$check#9@0| (LitInt 10))) (and (=> (= (ControlFlow 0 24) (- 0 25)) (and (<= (LitInt 0) |newtype$check#9@0|) (< |newtype$check#9@0| 256))) (=> (and (<= (LitInt 0) |newtype$check#9@0|) (< |newtype$check#9@0| 256)) (and (=> (= (ControlFlow 0 24) 21) anon18_Then_correct) (=> (= (ControlFlow 0 24) 23) anon18_Else_correct))))))))
(let ((anon16_Then_correct  (=> (and ($Is DatatypeTypeType |r#0@0| (Tclass._module.Record Tclass._module.Class?)) ($IsAlloc DatatypeTypeType |r#0@0| (Tclass._module.Record Tclass._module.Class?) $Heap@2)) (and (=> (= (ControlFlow 0 27) 24) anon17_Then_correct) (=> (= (ControlFlow 0 27) 26) anon17_Else_correct)))))
(let ((anon16_Else_correct  (=> (and (not (and ($Is DatatypeTypeType |r#0@0| (Tclass._module.Record Tclass._module.Class?)) ($IsAlloc DatatypeTypeType |r#0@0| (Tclass._module.Record Tclass._module.Class?) $Heap@2))) (= (ControlFlow 0 20) 19)) anon5_correct)))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (=> (and (or (not (= $nw@0 null)) (not true)) ($Is refType $nw@0 Tclass._module.Class?)) (=> (and (and (and (and (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $nw@0) alloc)))) (= $Heap@0 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap $nw@0 (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $nw@0) alloc ($Box boolType (bool_2_U true)))))) (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0))) (and (and (or (not (= $nw@1 null)) (not true)) ($Is refType $nw@1 Tclass._module.Class?)) (and (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $nw@1) alloc)))) (= $Heap@1 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap@0 $nw@1 (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $nw@1) alloc ($Box boolType (bool_2_U true)))))))) (and (and (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1)) (and (or (not (= $nw@2 null)) (not true)) ($Is refType $nw@2 Tclass._module.Class?))) (and (and (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@2) alloc)))) (= $Heap@2 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap@1 $nw@2 (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@2) alloc ($Box boolType (bool_2_U true)))))) (and ($IsGoodHeap $Heap@2) ($IsHeapAnchor $Heap@2))))) (and (=> (= (ControlFlow 0 28) (- 0 34)) true) (=> (= |newtype$check#2@0| (LitInt 10)) (and (=> (= (ControlFlow 0 28) (- 0 33)) (and (<= (LitInt 0) |newtype$check#2@0|) (< |newtype$check#2@0| 256))) (=> (and (<= (LitInt 0) |newtype$check#2@0|) (< |newtype$check#2@0| 256)) (and (=> (= (ControlFlow 0 28) (- 0 32)) true) (=> (= |newtype$check#5@0| (LitInt 11)) (and (=> (= (ControlFlow 0 28) (- 0 31)) (and (<= (LitInt 0) |newtype$check#5@0|) (< |newtype$check#5@0| 256))) (=> (and (<= (LitInt 0) |newtype$check#5@0|) (< |newtype$check#5@0| 256)) (and (=> (= (ControlFlow 0 28) (- 0 30)) true) (=> (= |newtype$check#8@0| (LitInt 12)) (and (=> (= (ControlFlow 0 28) (- 0 29)) (and (<= (LitInt 0) |newtype$check#8@0|) (< |newtype$check#8@0| 256))) (=> (and (<= (LitInt 0) |newtype$check#8@0|) (< |newtype$check#8@0| 256)) (=> (= |c#0@0| (|Map#Build| (|Map#Build| (|Map#Build| |Map#Empty| ($Box DatatypeTypeType (|#_module.Record.Make| null ($Box refType null) $nw@0 (LitInt 5) (LitInt 10))) ($Box realType (real_2_U (LitReal 0.8)))) ($Box DatatypeTypeType (|#_module.Record.Make| null ($Box refType null) $nw@1 (LitInt 4) (LitInt 11))) ($Box realType (real_2_U (LitReal 0.1)))) ($Box DatatypeTypeType (|#_module.Record.Make| null ($Box refType null) $nw@2 (LitInt 8) (LitInt 12))) ($Box realType (real_2_U (LitReal 0.1))))) (and (=> (= (ControlFlow 0 28) 27) anon16_Then_correct) (=> (= (ControlFlow 0 28) 20) anon16_Else_correct))))))))))))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (and (=> |defass#a1#0| (and ($Is refType |a1#0| Tclass._module.Class) ($IsAlloc refType |a1#0| Tclass._module.Class $Heap))) true)) (and (and (=> |defass#a2#0| (and ($Is refType |a2#0| Tclass._module.Class) ($IsAlloc refType |a2#0| Tclass._module.Class $Heap))) true) (and (=> |defass#a3#0| (and ($Is refType |a3#0| Tclass._module.Class) ($IsAlloc refType |a3#0| Tclass._module.Class $Heap))) true))) (and (and (and ($Is MapType |c#0@@1| (TMap (Tclass._module.Record Tclass._module.Class?) TReal)) ($IsAlloc MapType |c#0@@1| (TMap (Tclass._module.Record Tclass._module.Class?) TReal) $Heap)) true) (and (= 2 $FunctionContextHeight) (= (ControlFlow 0 35) 28)))) anon0_correct)))
PreconditionGeneratedEntry_correct))))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
