(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagSet () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._System.object? () T@U)
(declare-fun Tagclass._System.object () T@U)
(declare-fun tytagFamily$object () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun |lambda#23| (T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.sum__is__sum (Int Int) Bool)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun |_module.__default.sum__is__sum#canCall| (Int Int) Bool)
(declare-fun |_module.__default.sum#canCall| (Int Int) Bool)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun HandleTypeType () T@T)
(declare-fun AtLayer (T@T T@U T@U) T@U)
(declare-fun |lambda#26| (T@U) T@U)
(declare-fun Handle1 (T@U T@U T@U) T@U)
(declare-fun |lambda#22| (Int) T@U)
(declare-fun |lambda#25| (T@U) T@U)
(declare-fun SetRef_to_SetBox (T@U) T@U)
(declare-fun |lambda#24| (Bool) T@U)
(declare-fun $LS (T@U) T@U)
(declare-fun $LZ () T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun Apply1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun LitInt (Int) Int)
(declare-fun _module.__default.sum (Int Int) Int)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun SetType () T@T)
(declare-fun TSet (T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun LayerTypeType () T@T)
(declare-fun Tclass._System.object? () T@U)
(declare-fun Tclass._System.object () T@U)
(declare-fun null () T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun TagFamily (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt TagSet alloc Tagclass._System.object? Tagclass._System.object tytagFamily$object)
)
(assert (= (Tag TInt) TagInt))
(assert  (and (and (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0 t1 t2 (MapType0Store t0 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
)))) (forall ((t0@@0 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 (MapType1Store t0@@0 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :weight 0
))) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 3))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))) (= (Ctor refType) 4)) (= (Ctor FieldType) 5)) (= (Ctor BoxType) 6)))
(assert (forall ((|l#0| T@U) (|$l#0#heap#0| T@U) (|$l#0#a#0| T@U) ) (! (= (U_2_bool (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType boolType (|lambda#23| |l#0|) |$l#0#heap#0| |$l#0#a#0|)) ($IsBox |$l#0#a#0| |l#0|))
 :pattern ( (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType boolType (|lambda#23| |l#0|) |$l#0#heap#0| |$l#0#a#0|))
)))
(assert (= (Ctor HandleTypeType) 7))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($Heap T@U) (|b#0| Int) (|c#0| Int) ) (!  (=> (or (|_module.__default.sum__is__sum#canCall| |b#0| |c#0|) (and (< 1 $FunctionContextHeight) ($IsGoodHeap $Heap))) (and (forall ((|$l#1#a#0| Int) ) (|_module.__default.sum#canCall| |$l#1#a#0| |b#0|)) (= (_module.__default.sum__is__sum |b#0| |c#0|) (let ((|s#0| (Lit HandleTypeType (AtLayer HandleTypeType (|lambda#26| (Handle1 (|lambda#22| |b#0|) (|lambda#23| TInt) (|lambda#25| (SetRef_to_SetBox (|lambda#24| false))))) ($LS $LZ)))))
(forall ((|a#0| Int) ) (! (= (+ (U_2_int ($Unbox intType (Apply1 TInt TInt $Heap |s#0| ($Box intType (int_2_U |a#0|))))) |c#0|) (+ (+ |a#0| |b#0|) |c#0|))
 :pattern ( ($Unbox intType (Apply1 TInt TInt $Heap |s#0| ($Box intType (int_2_U |a#0|)))))
))))))
 :pattern ( (_module.__default.sum__is__sum |b#0| |c#0|) ($IsGoodHeap $Heap))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($Heap@@0 T@U) (|b#0@@0| Int) (|c#0@@0| Int) ) (!  (=> (or (|_module.__default.sum__is__sum#canCall| (LitInt |b#0@@0|) (LitInt |c#0@@0|)) (and (< 1 $FunctionContextHeight) ($IsGoodHeap $Heap@@0))) (and (forall ((|$l#4#a#0| Int) ) (|_module.__default.sum#canCall| |$l#4#a#0| (LitInt |b#0@@0|))) (= (_module.__default.sum__is__sum (LitInt |b#0@@0|) (LitInt |c#0@@0|)) (let ((|s#1| (Lit HandleTypeType (AtLayer HandleTypeType (|lambda#26| (Handle1 (|lambda#22| (LitInt |b#0@@0|)) (|lambda#23| TInt) (|lambda#25| (SetRef_to_SetBox (|lambda#24| false))))) ($LS $LZ)))))
(forall ((|a#1| Int) ) (! (= (+ (U_2_int ($Unbox intType (Apply1 TInt TInt $Heap@@0 |s#1| ($Box intType (int_2_U |a#1|))))) |c#0@@0|) (+ (+ |a#1| |b#0@@0|) |c#0@@0|))
 :pattern ( ($Unbox intType (Apply1 TInt TInt $Heap@@0 |s#1| ($Box intType (int_2_U |a#1|)))))
))))))
 :weight 3
 :pattern ( (_module.__default.sum__is__sum (LitInt |b#0@@0|) (LitInt |c#0@@0|)) ($IsGoodHeap $Heap@@0))
))))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|a#0@@0| Int) (|b#0@@1| Int) ) (!  (=> (or (|_module.__default.sum#canCall| (LitInt |a#0@@0|) (LitInt |b#0@@1|)) (< 0 $FunctionContextHeight)) (= (_module.__default.sum (LitInt |a#0@@0|) (LitInt |b#0@@1|)) (LitInt (+ |a#0@@0| |b#0@@1|))))
 :weight 3
 :pattern ( (_module.__default.sum (LitInt |a#0@@0|) (LitInt |b#0@@1|)))
))))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (= (Ctor SetType) 8))
(assert (forall ((v T@U) (t0@@1 T@U) ) (! (= ($Is SetType v (TSet t0@@1)) (forall ((bx T@U) ) (!  (=> (|Set#IsMember| v bx) ($IsBox bx t0@@1))
 :pattern ( (|Set#IsMember| v bx))
)))
 :pattern ( ($Is SetType v (TSet t0@@1)))
)))
(assert (= (Ctor LayerTypeType) 9))
(assert (forall ((f T@U) (ly T@U) (A T@T) ) (! (= (AtLayer A f ly) (MapType1Select LayerTypeType A f ly))
 :pattern ( (AtLayer A f ly))
)))
(assert (forall ((s T@U) (bx@@0 T@U) ) (! (= (|Set#IsMember| (SetRef_to_SetBox s) bx@@0) (U_2_bool (MapType1Select refType boolType s ($Unbox refType bx@@0))))
 :pattern ( (|Set#IsMember| (SetRef_to_SetBox s) bx@@0))
)))
(assert (forall ((t0@@2 T@U) (t1@@1 T@U) (heap T@U) (h T@U) (r T@U) (rd T@U) (bx0 T@U) ) (! (= (Apply1 t0@@2 t1@@1 heap (Handle1 h r rd) bx0) (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType h heap bx0))
 :pattern ( (Apply1 t0@@2 t1@@1 heap (Handle1 h r rd) bx0))
)))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 Tclass._System.object?) (and (= ($Box refType ($Unbox refType bx@@1)) bx@@1) ($Is refType ($Unbox refType bx@@1) Tclass._System.object?)))
 :pattern ( ($IsBox bx@@1 Tclass._System.object?))
)))
(assert (forall ((bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 Tclass._System.object) (and (= ($Box refType ($Unbox refType bx@@2)) bx@@2) ($Is refType ($Unbox refType bx@@2) Tclass._System.object)))
 :pattern ( ($IsBox bx@@2 Tclass._System.object))
)))
(assert (forall ((|c#0@@1| T@U) ) (! (= ($Is refType |c#0@@1| Tclass._System.object)  (and ($Is refType |c#0@@1| Tclass._System.object?) (or (not (= |c#0@@1| null)) (not true))))
 :pattern ( ($Is refType |c#0@@1| Tclass._System.object))
 :pattern ( ($Is refType |c#0@@1| Tclass._System.object?))
)))
(assert (forall ((|l#0@@0| Bool) (|$l#0#o#0| T@U) ) (! (= (U_2_bool (MapType1Select refType boolType (|lambda#24| |l#0@@0|) |$l#0#o#0|)) |l#0@@0|)
 :pattern ( (MapType1Select refType boolType (|lambda#24| |l#0@@0|) |$l#0#o#0|))
)))
(assert (forall ((|l#0@@1| T@U) (|$l#0#ly#0| T@U) ) (! (= (MapType1Select LayerTypeType HandleTypeType (|lambda#26| |l#0@@1|) |$l#0#ly#0|) |l#0@@1|)
 :pattern ( (MapType1Select LayerTypeType HandleTypeType (|lambda#26| |l#0@@1|) |$l#0#ly#0|))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|a#0@@1| Int) (|b#0@@2| Int) ) (!  (=> (or (|_module.__default.sum#canCall| |a#0@@1| |b#0@@2|) (< 0 $FunctionContextHeight)) (= (_module.__default.sum |a#0@@1| |b#0@@2|) (+ |a#0@@1| |b#0@@2|)))
 :pattern ( (_module.__default.sum |a#0@@1| |b#0@@2|))
))))
(assert (forall ((bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 TInt) (and (= ($Box intType ($Unbox intType bx@@3)) bx@@3) ($Is intType ($Unbox intType bx@@3) TInt)))
 :pattern ( ($IsBox bx@@3 TInt))
)))
(assert (forall ((v@@0 T@U) (t T@U) (T@@1 T@T) ) (! (= ($IsBox ($Box T@@1 v@@0) t) ($Is T@@1 v@@0 t))
 :pattern ( ($IsBox ($Box T@@1 v@@0) t))
)))
(assert (forall (($o T@U) ) (! ($Is refType $o Tclass._System.object?)
 :pattern ( ($Is refType $o Tclass._System.object?))
)))
(assert (forall ((t@@0 T@U) ) (! (= (Inv0_TSet (TSet t@@0)) t@@0)
 :pattern ( (TSet t@@0))
)))
(assert (forall ((t@@1 T@U) ) (! (= (Tag (TSet t@@1)) TagSet)
 :pattern ( (TSet t@@1))
)))
(assert (forall ((x@@5 T@U) (T@@2 T@T) ) (! (= ($Unbox T@@2 ($Box T@@2 x@@5)) x@@5)
 :pattern ( ($Box T@@2 x@@5))
)))
(assert (forall ((f@@0 T@U) (ly@@0 T@U) (A@@0 T@T) ) (! (= (AtLayer A@@0 f@@0 ($LS ly@@0)) (AtLayer A@@0 f@@0 ly@@0))
 :pattern ( (AtLayer A@@0 f@@0 ($LS ly@@0)))
)))
(assert (forall ((|l#0@@2| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o@@0 T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0@@2| |l#1| |l#2| |l#3|) $o@@0 $f))  (=> (and (or (not (= $o@@0 |l#0@@2|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o@@0) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0@@2| |l#1| |l#2| |l#3|) $o@@0 $f))
)))
(assert (forall ((|l#0@@3| Int) (|$l#0#heap#0@@0| T@U) (|$l#0#a#0@@0| T@U) ) (! (= (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType (|lambda#22| |l#0@@3|) |$l#0#heap#0@@0| |$l#0#a#0@@0|) ($Box intType (int_2_U (_module.__default.sum (U_2_int ($Unbox intType |$l#0#a#0@@0|)) |l#0@@3|))))
 :pattern ( (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType (|lambda#22| |l#0@@3|) |$l#0#heap#0@@0| |$l#0#a#0@@0|))
)))
(assert (forall ((bx@@4 T@U) (t@@2 T@U) ) (!  (=> ($IsBox bx@@4 (TSet t@@2)) (and (= ($Box SetType ($Unbox SetType bx@@4)) bx@@4) ($Is SetType ($Unbox SetType bx@@4) (TSet t@@2))))
 :pattern ( ($IsBox bx@@4 (TSet t@@2)))
)))
(assert (= (Tag Tclass._System.object?) Tagclass._System.object?))
(assert (= (TagFamily Tclass._System.object?) tytagFamily$object))
(assert (= (Tag Tclass._System.object) Tagclass._System.object))
(assert (= (TagFamily Tclass._System.object) tytagFamily$object))
(assert (forall ((s@@0 T@U) ) (! ($Is SetType (SetRef_to_SetBox s@@0) (TSet Tclass._System.object?))
 :pattern ( (SetRef_to_SetBox s@@0))
)))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((x@@7 T@U) (T@@3 T@T) ) (! (= ($Box T@@3 (Lit T@@3 x@@7)) (Lit BoxType ($Box T@@3 x@@7)))
 :pattern ( ($Box T@@3 (Lit T@@3 x@@7)))
)))
(assert (forall ((|l#0@@4| T@U) (|$l#0#heap#0@@1| T@U) (|$l#0#a#0@@1| T@U) ) (! (= (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType SetType (|lambda#25| |l#0@@4|) |$l#0#heap#0@@1| |$l#0#a#0@@1|) |l#0@@4|)
 :pattern ( (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType SetType (|lambda#25| |l#0@@4|) |$l#0#heap#0@@1| |$l#0#a#0@@1|))
)))
(assert (forall ((v@@1 T@U) ) (! ($Is intType v@@1 TInt)
 :pattern ( ($Is intType v@@1 TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun $Heap@@1 () T@U)
(declare-fun |x#0| () Int)
(declare-fun |y#0| () Int)
(declare-fun $IsHeapAnchor (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let ((anon0_correct  (=> (and (and (= $_ModifiesFrame@0 (|lambda#0| null $Heap@@1 alloc false)) (= (ControlFlow 0 2) (- 0 1))) (|_module.__default.sum__is__sum#canCall| |x#0| |y#0|)) (or (_module.__default.sum__is__sum |x#0| |y#0|) (let ((|s#1@@0| (Lit HandleTypeType (AtLayer HandleTypeType (|lambda#26| (Handle1 (|lambda#22| |x#0|) (|lambda#23| TInt) (|lambda#25| (SetRef_to_SetBox (|lambda#24| false))))) ($LS $LZ)))))
(forall ((|a#1@@0| Int) ) (! (= (+ (U_2_int ($Unbox intType (Apply1 TInt TInt $Heap@@1 |s#1@@0| ($Box intType (int_2_U |a#1@@0|))))) |y#0|) (+ (+ |a#1@@0| |x#0|) |y#0|))
 :pattern ( ($Unbox intType (Apply1 TInt TInt $Heap@@1 |s#1@@0| ($Box intType (int_2_U |a#1@@0|)))))
)))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and ($IsGoodHeap $Heap@@1) ($IsHeapAnchor $Heap@@1)) (and (= 2 $FunctionContextHeight) (= (ControlFlow 0 3) 2))) anon0_correct)))
PreconditionGeneratedEntry_correct)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
