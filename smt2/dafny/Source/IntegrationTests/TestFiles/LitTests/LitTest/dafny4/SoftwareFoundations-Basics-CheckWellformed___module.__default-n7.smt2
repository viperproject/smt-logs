(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 (T@T) Int)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Bool) T@U)
(declare-fun $generated@@9 (T@U) Bool)
(declare-fun $generated@@10 (Int) T@U)
(declare-fun $generated@@11 (T@U) Int)
(declare-fun $generated@@12 (Real) T@U)
(declare-fun $generated@@13 (T@U) Real)
(declare-fun $generated@@20 () Int)
(declare-fun $generated@@21 (T@U T@U T@U) T@U)
(declare-fun $generated@@22 (T@U) T@U)
(declare-fun $generated@@23 (T@U T@U) Bool)
(declare-fun $generated@@24 (T@T T@U T@U) Bool)
(declare-fun $generated@@25 () T@T)
(declare-fun $generated@@26 () T@U)
(declare-fun $generated@@27 (T@U) Bool)
(declare-fun $generated@@28 (T@U) T@U)
(declare-fun $generated@@29 (T@U T@U) Bool)
(declare-fun $generated@@30 () T@U)
(declare-fun $generated@@31 (T@U T@U T@U) T@U)
(declare-fun $generated@@32 () T@U)
(declare-fun $generated@@38 (T@U) T@U)
(declare-fun $generated@@39 (T@T T@U) T@U)
(declare-fun $generated@@48 (T@U) Bool)
(declare-fun $generated@@50 (T@T T@U) T@U)
(declare-fun $generated@@51 (T@T T@U) T@U)
(declare-fun $generated@@55 (T@U) T@U)
(declare-fun $generated@@86 (T@U) Int)
(declare-fun $generated@@88 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@89 () T@T)
(declare-fun $generated@@90 () T@T)
(declare-fun $generated@@91 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@92 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@93 () T@T)
(declare-fun $generated@@94 (T@T T@T) T@T)
(declare-fun $generated@@95 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@96 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@97 (T@T) T@T)
(declare-fun $generated@@98 (T@T) T@T)
(declare-fun $generated@@147 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@148 (T@U) Bool)
(declare-fun $generated@@151 (T@U) T@U)
(declare-fun $generated@@152 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@4 $generated@@5) 0) (= ($generated@@4 $generated@@6) 1)) (= ($generated@@4 $generated@@7) 2)) (forall (($generated@@14 Bool) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Int) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Real) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3)
)
(assert (= ($generated@@4 $generated@@25) 3))
(assert  (=> (<= 2 $generated@@20) (forall (($generated@@33 T@U) ($generated@@34 T@U) ($generated@@35 T@U) ) (!  (=> (or ($generated@@23 $generated@@34 $generated@@35) (and (< 2 $generated@@20) (and ($generated@@24 $generated@@25 $generated@@34 $generated@@26) ($generated@@24 $generated@@25 $generated@@35 $generated@@26)))) (and (=> (not ($generated@@27 $generated@@34)) (let (($generated@@36 ($generated@@28 $generated@@34)))
 (and ($generated@@23 $generated@@36 $generated@@35) ($generated@@29 $generated@@35 ($generated@@21 $generated@@33 $generated@@36 $generated@@35))))) (= ($generated@@21 ($generated@@22 $generated@@33) $generated@@34 $generated@@35) (ite ($generated@@27 $generated@@34) $generated@@30 (let (($generated@@37 ($generated@@28 $generated@@34)))
($generated@@31 ($generated@@22 $generated@@32) $generated@@35 ($generated@@21 $generated@@33 $generated@@37 $generated@@35)))))))
 :pattern ( ($generated@@21 ($generated@@22 $generated@@33) $generated@@34 $generated@@35))
))))
(assert (= ($generated@@38 $generated@@30) $generated@@1))
(assert  (=> (<= 2 $generated@@20) (forall (($generated@@40 T@U) ($generated@@41 T@U) ($generated@@42 T@U) ) (!  (=> (or ($generated@@23 ($generated@@39 $generated@@25 $generated@@41) ($generated@@39 $generated@@25 $generated@@42)) (and (< 2 $generated@@20) (and ($generated@@24 $generated@@25 $generated@@41 $generated@@26) ($generated@@24 $generated@@25 $generated@@42 $generated@@26)))) (and (=> (not ($generated@@9 ($generated@@39 $generated@@5 ($generated@@8 ($generated@@27 ($generated@@39 $generated@@25 $generated@@41)))))) (let (($generated@@43 ($generated@@39 $generated@@25 ($generated@@28 ($generated@@39 $generated@@25 $generated@@41)))))
 (and ($generated@@23 $generated@@43 ($generated@@39 $generated@@25 $generated@@42)) ($generated@@29 ($generated@@39 $generated@@25 $generated@@42) ($generated@@21 ($generated@@22 $generated@@40) $generated@@43 ($generated@@39 $generated@@25 $generated@@42)))))) (= ($generated@@21 ($generated@@22 $generated@@40) ($generated@@39 $generated@@25 $generated@@41) ($generated@@39 $generated@@25 $generated@@42)) (ite ($generated@@27 ($generated@@39 $generated@@25 $generated@@41)) $generated@@30 (let (($generated@@44 ($generated@@39 $generated@@25 ($generated@@28 ($generated@@39 $generated@@25 $generated@@41)))))
($generated@@39 $generated@@25 ($generated@@31 ($generated@@22 $generated@@32) ($generated@@39 $generated@@25 $generated@@42) ($generated@@39 $generated@@25 ($generated@@21 ($generated@@22 $generated@@40) $generated@@44 ($generated@@39 $generated@@25 $generated@@42))))))))))
 :weight 3
 :pattern ( ($generated@@21 ($generated@@22 $generated@@40) ($generated@@39 $generated@@25 $generated@@41) ($generated@@39 $generated@@25 $generated@@42)))
))))
(assert ($generated@@24 $generated@@25 $generated@@30 $generated@@26))
(assert (forall (($generated@@45 T@U) ($generated@@46 T@T) ) (! (= ($generated@@39 $generated@@46 $generated@@45) $generated@@45)
 :pattern ( ($generated@@39 $generated@@46 $generated@@45))
)))
(assert (forall (($generated@@47 T@U) ) (! (= ($generated@@27 $generated@@47) (= ($generated@@38 $generated@@47) $generated@@1))
 :pattern ( ($generated@@27 $generated@@47))
)))
(assert (forall (($generated@@49 T@U) ) (! (= ($generated@@48 $generated@@49) (= ($generated@@38 $generated@@49) $generated@@2))
 :pattern ( ($generated@@48 $generated@@49))
)))
(assert (forall (($generated@@52 T@U) ($generated@@53 T@T) ) (! (= ($generated@@51 $generated@@53 ($generated@@50 $generated@@53 $generated@@52)) $generated@@52)
 :pattern ( ($generated@@50 $generated@@53 $generated@@52))
)))
(assert (forall (($generated@@54 T@U) ) (!  (=> ($generated@@27 $generated@@54) (= $generated@@54 $generated@@30))
 :pattern ( ($generated@@27 $generated@@54))
)))
(assert (forall (($generated@@56 T@U) ) (!  (=> ($generated@@48 $generated@@56) (exists (($generated@@57 T@U) ) (= $generated@@56 ($generated@@55 $generated@@57))))
 :pattern ( ($generated@@48 $generated@@56))
)))
(assert  (=> (<= 1 $generated@@20) (forall (($generated@@58 T@U) ($generated@@59 T@U) ($generated@@60 T@U) ) (!  (=> (or ($generated@@29 ($generated@@39 $generated@@25 $generated@@59) ($generated@@39 $generated@@25 $generated@@60)) (and (< 1 $generated@@20) (and ($generated@@24 $generated@@25 $generated@@59 $generated@@26) ($generated@@24 $generated@@25 $generated@@60 $generated@@26)))) (and (=> (not ($generated@@9 ($generated@@39 $generated@@5 ($generated@@8 ($generated@@27 ($generated@@39 $generated@@25 $generated@@59)))))) (let (($generated@@61 ($generated@@39 $generated@@25 ($generated@@28 ($generated@@39 $generated@@25 $generated@@59)))))
($generated@@29 $generated@@61 ($generated@@39 $generated@@25 $generated@@60)))) (= ($generated@@31 ($generated@@22 $generated@@58) ($generated@@39 $generated@@25 $generated@@59) ($generated@@39 $generated@@25 $generated@@60)) (ite ($generated@@27 ($generated@@39 $generated@@25 $generated@@59)) $generated@@60 (let (($generated@@62 ($generated@@39 $generated@@25 ($generated@@28 ($generated@@39 $generated@@25 $generated@@59)))))
($generated@@39 $generated@@25 ($generated@@55 ($generated@@39 $generated@@25 ($generated@@31 ($generated@@22 $generated@@58) $generated@@62 ($generated@@39 $generated@@25 $generated@@60))))))))))
 :weight 3
 :pattern ( ($generated@@31 ($generated@@22 $generated@@58) ($generated@@39 $generated@@25 $generated@@59) ($generated@@39 $generated@@25 $generated@@60)))
))))
(assert (forall (($generated@@63 T@U) ) (! (= ($generated@@24 $generated@@25 ($generated@@55 $generated@@63) $generated@@26) ($generated@@24 $generated@@25 $generated@@63 $generated@@26))
 :pattern ( ($generated@@24 $generated@@25 ($generated@@55 $generated@@63) $generated@@26))
)))
(assert  (=> (<= 1 $generated@@20) (forall (($generated@@64 T@U) ($generated@@65 T@U) ($generated@@66 T@U) ) (!  (=> (or ($generated@@29 $generated@@65 $generated@@66) (and (< 1 $generated@@20) (and ($generated@@24 $generated@@25 $generated@@65 $generated@@26) ($generated@@24 $generated@@25 $generated@@66 $generated@@26)))) ($generated@@24 $generated@@25 ($generated@@31 $generated@@64 $generated@@65 $generated@@66) $generated@@26))
 :pattern ( ($generated@@31 $generated@@64 $generated@@65 $generated@@66))
))))
(assert  (=> (<= 2 $generated@@20) (forall (($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@U) ) (!  (=> (or ($generated@@23 $generated@@68 $generated@@69) (and (< 2 $generated@@20) (and ($generated@@24 $generated@@25 $generated@@68 $generated@@26) ($generated@@24 $generated@@25 $generated@@69 $generated@@26)))) ($generated@@24 $generated@@25 ($generated@@21 $generated@@67 $generated@@68 $generated@@69) $generated@@26))
 :pattern ( ($generated@@21 $generated@@67 $generated@@68 $generated@@69))
))))
(assert (forall (($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (! (= ($generated@@31 ($generated@@22 $generated@@70) $generated@@71 $generated@@72) ($generated@@31 $generated@@70 $generated@@71 $generated@@72))
 :pattern ( ($generated@@31 ($generated@@22 $generated@@70) $generated@@71 $generated@@72))
)))
(assert (forall (($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@U) ) (! (= ($generated@@21 ($generated@@22 $generated@@73) $generated@@74 $generated@@75) ($generated@@21 $generated@@73 $generated@@74 $generated@@75))
 :pattern ( ($generated@@21 ($generated@@22 $generated@@73) $generated@@74 $generated@@75))
)))
(assert (forall (($generated@@76 T@U) ) (!  (=> ($generated@@24 $generated@@25 $generated@@76 $generated@@26) (or ($generated@@27 $generated@@76) ($generated@@48 $generated@@76)))
 :pattern ( ($generated@@48 $generated@@76) ($generated@@24 $generated@@25 $generated@@76 $generated@@26))
 :pattern ( ($generated@@27 $generated@@76) ($generated@@24 $generated@@25 $generated@@76 $generated@@26))
)))
(assert (forall (($generated@@77 T@U) ) (! (= ($generated@@38 ($generated@@55 $generated@@77)) $generated@@2)
 :pattern ( ($generated@@55 $generated@@77))
)))
(assert (forall (($generated@@78 T@U) ) (! (= ($generated@@28 ($generated@@55 $generated@@78)) $generated@@78)
 :pattern ( ($generated@@55 $generated@@78))
)))
(assert (forall (($generated@@79 T@U) ($generated@@80 T@T) ) (! (= ($generated@@50 $generated@@80 ($generated@@51 $generated@@80 $generated@@79)) $generated@@79)
 :pattern ( ($generated@@51 $generated@@80 $generated@@79))
)))
(assert  (=> (<= 1 $generated@@20) (forall (($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ) (!  (=> (or ($generated@@29 $generated@@82 $generated@@83) (and (< 1 $generated@@20) (and ($generated@@24 $generated@@25 $generated@@82 $generated@@26) ($generated@@24 $generated@@25 $generated@@83 $generated@@26)))) (and (=> (not ($generated@@27 $generated@@82)) (let (($generated@@84 ($generated@@28 $generated@@82)))
($generated@@29 $generated@@84 $generated@@83))) (= ($generated@@31 ($generated@@22 $generated@@81) $generated@@82 $generated@@83) (ite ($generated@@27 $generated@@82) $generated@@83 (let (($generated@@85 ($generated@@28 $generated@@82)))
($generated@@55 ($generated@@31 $generated@@81 $generated@@85 $generated@@83)))))))
 :pattern ( ($generated@@31 ($generated@@22 $generated@@81) $generated@@82 $generated@@83))
))))
(assert (forall (($generated@@87 T@U) ) (! (< ($generated@@86 $generated@@87) ($generated@@86 ($generated@@55 $generated@@87)))
 :pattern ( ($generated@@55 $generated@@87))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@99 T@T) ($generated@@100 T@T) ($generated@@101 T@T) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ) (! (= ($generated@@88 $generated@@99 $generated@@100 $generated@@101 ($generated@@95 $generated@@99 $generated@@100 $generated@@101 $generated@@103 $generated@@104 $generated@@105 $generated@@102) $generated@@104 $generated@@105) $generated@@102)
 :weight 0
)) (and (forall (($generated@@106 T@T) ($generated@@107 T@T) ($generated@@108 T@T) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ) (!  (or (= $generated@@111 $generated@@113) (= ($generated@@88 $generated@@106 $generated@@107 $generated@@108 ($generated@@95 $generated@@106 $generated@@107 $generated@@108 $generated@@110 $generated@@111 $generated@@112 $generated@@109) $generated@@113 $generated@@114) ($generated@@88 $generated@@106 $generated@@107 $generated@@108 $generated@@110 $generated@@113 $generated@@114)))
 :weight 0
)) (forall (($generated@@115 T@T) ($generated@@116 T@T) ($generated@@117 T@T) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ) (!  (or (= $generated@@121 $generated@@123) (= ($generated@@88 $generated@@115 $generated@@116 $generated@@117 ($generated@@95 $generated@@115 $generated@@116 $generated@@117 $generated@@119 $generated@@120 $generated@@121 $generated@@118) $generated@@122 $generated@@123) ($generated@@88 $generated@@115 $generated@@116 $generated@@117 $generated@@119 $generated@@122 $generated@@123)))
 :weight 0
)))) (= ($generated@@4 $generated@@89) 4)) (= ($generated@@4 $generated@@90) 5)) (forall (($generated@@124 T@T) ($generated@@125 T@T) ($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ) (! (= ($generated@@92 $generated@@124 $generated@@125 ($generated@@96 $generated@@124 $generated@@125 $generated@@127 $generated@@128 $generated@@126) $generated@@128) $generated@@126)
 :weight 0
))) (forall (($generated@@129 T@T) ($generated@@130 T@T) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ($generated@@134 T@U) ) (!  (or (= $generated@@133 $generated@@134) (= ($generated@@92 $generated@@129 $generated@@130 ($generated@@96 $generated@@129 $generated@@130 $generated@@132 $generated@@133 $generated@@131) $generated@@134) ($generated@@92 $generated@@129 $generated@@130 $generated@@132 $generated@@134)))
 :weight 0
))) (= ($generated@@4 $generated@@93) 6)) (forall (($generated@@135 T@T) ($generated@@136 T@T) ) (= ($generated@@4 ($generated@@94 $generated@@135 $generated@@136)) 7))) (forall (($generated@@137 T@T) ($generated@@138 T@T) ) (! (= ($generated@@97 ($generated@@94 $generated@@137 $generated@@138)) $generated@@137)
 :pattern ( ($generated@@94 $generated@@137 $generated@@138))
))) (forall (($generated@@139 T@T) ($generated@@140 T@T) ) (! (= ($generated@@98 ($generated@@94 $generated@@139 $generated@@140)) $generated@@140)
 :pattern ( ($generated@@94 $generated@@139 $generated@@140))
))))
(assert (forall (($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 Bool) ($generated@@145 T@U) ($generated@@146 T@U) ) (! (= ($generated@@9 ($generated@@88 $generated@@89 $generated@@90 $generated@@5 ($generated@@91 $generated@@141 $generated@@142 $generated@@143 $generated@@144) $generated@@145 $generated@@146))  (=> (and (or (not (= $generated@@145 $generated@@141)) (not true)) ($generated@@9 ($generated@@50 $generated@@5 ($generated@@92 $generated@@90 $generated@@93 ($generated@@92 $generated@@89 ($generated@@94 $generated@@90 $generated@@93) $generated@@142 $generated@@145) $generated@@143)))) $generated@@144))
 :pattern ( ($generated@@88 $generated@@89 $generated@@90 $generated@@5 ($generated@@91 $generated@@141 $generated@@142 $generated@@143 $generated@@144) $generated@@145 $generated@@146))
)))
(assert (forall (($generated@@149 T@U) ($generated@@150 T@U) ) (!  (=> (and ($generated@@148 $generated@@150) ($generated@@24 $generated@@25 $generated@@149 $generated@@26)) ($generated@@147 $generated@@25 $generated@@149 $generated@@26 $generated@@150))
 :pattern ( ($generated@@147 $generated@@25 $generated@@149 $generated@@26 $generated@@150))
)))
(assert (= ($generated@@151 $generated@@26) $generated@@0))
(assert (= ($generated@@152 $generated@@26) $generated@@3))
(assert (= $generated@@30 ($generated@@39 $generated@@25 $generated@@30)))
(assert (forall (($generated@@153 T@U) ($generated@@154 T@U) ) (!  (=> (and ($generated@@148 $generated@@154) (and ($generated@@48 $generated@@153) ($generated@@147 $generated@@25 $generated@@153 $generated@@26 $generated@@154))) ($generated@@147 $generated@@25 ($generated@@28 $generated@@153) $generated@@26 $generated@@154))
 :pattern ( ($generated@@147 $generated@@25 ($generated@@28 $generated@@153) $generated@@26 $generated@@154))
)))
(assert (forall (($generated@@155 T@U) ) (! (= ($generated@@55 ($generated@@39 $generated@@25 $generated@@155)) ($generated@@39 $generated@@25 ($generated@@55 $generated@@155)))
 :pattern ( ($generated@@55 ($generated@@39 $generated@@25 $generated@@155)))
)))
(assert (forall (($generated@@156 T@U) ($generated@@157 T@T) ) (! (= ($generated@@51 $generated@@157 ($generated@@39 $generated@@157 $generated@@156)) ($generated@@39 $generated@@93 ($generated@@51 $generated@@157 $generated@@156)))
 :pattern ( ($generated@@51 $generated@@157 ($generated@@39 $generated@@157 $generated@@156)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@158 () T@U)
(declare-fun $generated@@159 () T@U)
(declare-fun $generated@@160 () T@U)
(declare-fun $generated@@161 () T@U)
(declare-fun $generated@@162 () T@U)
(declare-fun $generated@@163 () T@U)
(declare-fun $generated@@164 () T@U)
(declare-fun $generated@@165 () T@U)
(declare-fun $generated@@166 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 8) (let (($generated@@167 true))
(let (($generated@@168  (=> (= $generated@@158 ($generated@@55 $generated@@159)) (=> (and (and (and ($generated@@24 $generated@@25 $generated@@159 $generated@@26) (= $generated@@160 $generated@@159)) (and ($generated@@24 $generated@@25 $generated@@160 $generated@@26) (= $generated@@161 $generated@@160))) (and (and ($generated@@147 $generated@@25 $generated@@162 $generated@@26 $generated@@163) ($generated@@147 $generated@@25 $generated@@161 $generated@@26 $generated@@163)) (and ($generated@@147 $generated@@25 $generated@@162 $generated@@26 $generated@@163) (= (ControlFlow 0 4) (- 0 3))))) (or (< ($generated@@86 $generated@@161) ($generated@@86 $generated@@158)) (and (= ($generated@@86 $generated@@161) ($generated@@86 $generated@@158)) (< ($generated@@86 $generated@@162) ($generated@@86 $generated@@162))))))))
(let (($generated@@169  (=> (or (not (= $generated@@158 $generated@@30)) (not true)) (and (=> (= (ControlFlow 0 6) 4) $generated@@168) (=> (= (ControlFlow 0 6) 5) $generated@@167)))))
(let (($generated@@170 true))
(let (($generated@@171 true))
(let (($generated@@172  (=> (= $generated@@164 ($generated@@91 $generated@@165 $generated@@163 $generated false)) (and (and (=> (= (ControlFlow 0 7) 1) $generated@@171) (=> (= (ControlFlow 0 7) 2) $generated@@170)) (=> (= (ControlFlow 0 7) 6) $generated@@169)))))
(let (($generated@@173  (=> (and ($generated@@148 $generated@@163) ($generated@@166 $generated@@163)) (=> (and (and ($generated@@24 $generated@@25 $generated@@158 $generated@@26) ($generated@@24 $generated@@25 $generated@@162 $generated@@26)) (and (= 2 $generated@@20) (= (ControlFlow 0 8) 7))) $generated@@172))))
$generated@@173))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
