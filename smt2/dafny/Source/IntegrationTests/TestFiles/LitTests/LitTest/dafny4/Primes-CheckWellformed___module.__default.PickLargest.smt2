(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 (T@U) T@U)
(declare-fun $generated@@20 (T@U T@U) Bool)
(declare-fun $generated@@21 () T@U)
(declare-fun $generated@@23 (Int) Int)
(declare-fun $generated@@25 (T@T T@U) T@U)
(declare-fun $generated@@28 (T@T T@U) T@U)
(declare-fun $generated@@29 (T@T T@U) T@U)
(declare-fun $generated@@32 (T@T T@U T@U) Bool)
(declare-fun $generated@@33 () T@T)
(declare-fun $generated@@34 (T@U) T@U)
(declare-fun $generated@@35 (T@U T@U) Bool)
(declare-fun $generated@@39 () Int)
(declare-fun $generated@@40 (Bool T@U) Int)
(declare-fun $generated@@41 (T@U) Bool)
(declare-fun $generated@@42 (T@U) Bool)
(declare-fun $generated@@43 (T@U T@U) Bool)
(declare-fun $generated@@44 (T@U) Bool)
(declare-fun $generated@@45 (T@U) Int)
(declare-fun $generated@@63 (T@U) T@U)
(declare-fun $generated@@68 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@69 () T@T)
(declare-fun $generated@@70 () T@T)
(declare-fun $generated@@71 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@72 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@73 () T@T)
(declare-fun $generated@@74 (T@T T@T) T@T)
(declare-fun $generated@@75 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@76 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@77 (T@T) T@T)
(declare-fun $generated@@78 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (= ($generated@@19 $generated) $generated@@0))
(assert (forall (($generated@@22 T@U) ) (!  (not ($generated@@20 $generated@@21 $generated@@22))
 :pattern ( ($generated@@20 $generated@@21 $generated@@22))
)))
(assert (forall (($generated@@24 Int) ) (! (= ($generated@@23 $generated@@24) $generated@@24)
 :pattern ( ($generated@@23 $generated@@24))
)))
(assert (forall (($generated@@26 T@U) ($generated@@27 T@T) ) (! (= ($generated@@25 $generated@@27 $generated@@26) $generated@@26)
 :pattern ( ($generated@@25 $generated@@27 $generated@@26))
)))
(assert (forall (($generated@@30 T@U) ($generated@@31 T@T) ) (! (= ($generated@@29 $generated@@31 ($generated@@28 $generated@@31 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@28 $generated@@31 $generated@@30))
)))
(assert (= ($generated@@3 $generated@@33) 3))
(assert (forall (($generated@@36 T@U) ($generated@@37 T@U) ) (! (= ($generated@@32 $generated@@33 $generated@@36 ($generated@@34 $generated@@37)) (forall (($generated@@38 T@U) ) (!  (=> ($generated@@20 $generated@@36 $generated@@38) ($generated@@35 $generated@@38 $generated@@37))
 :pattern ( ($generated@@20 $generated@@36 $generated@@38))
)))
 :pattern ( ($generated@@32 $generated@@33 $generated@@36 ($generated@@34 $generated@@37)))
)))
(assert  (=> (<= 1 $generated@@39) (forall (($generated@@46 T@U) ($generated@@47 T@U) ) (!  (=> (or ($generated@@42 $generated@@47) (and (< 1 $generated@@39) (and (and ($generated@@41 $generated@@46) ($generated@@32 $generated@@33 $generated@@47 ($generated@@34 $generated))) (not ($generated@@43 $generated@@47 $generated@@21))))) (and ($generated@@44 $generated@@47) (= ($generated@@40 true $generated@@47) (let (($generated@@48 ($generated@@45 $generated@@47)))
$generated@@48))))
 :pattern ( ($generated@@40 true $generated@@47) ($generated@@41 $generated@@46))
))))
(assert (forall (($generated@@49 T@U) ($generated@@50 T@U) ) (!  (=> ($generated@@43 $generated@@49 $generated@@50) (= $generated@@49 $generated@@50))
 :pattern ( ($generated@@43 $generated@@49 $generated@@50))
)))
(assert  (=> (<= 1 $generated@@39) (forall (($generated@@51 T@U) ($generated@@52 T@U) ) (!  (=> (or ($generated@@42 ($generated@@25 $generated@@33 $generated@@52)) (and (< 1 $generated@@39) (and (and ($generated@@41 $generated@@51) ($generated@@32 $generated@@33 $generated@@52 ($generated@@34 $generated))) (not ($generated@@43 $generated@@52 $generated@@21))))) (and ($generated@@44 ($generated@@25 $generated@@33 $generated@@52)) (= ($generated@@40 true ($generated@@25 $generated@@33 $generated@@52)) (let (($generated@@53 ($generated@@45 ($generated@@25 $generated@@33 $generated@@52))))
$generated@@53))))
 :weight 3
 :pattern ( ($generated@@40 true ($generated@@25 $generated@@33 $generated@@52)) ($generated@@41 $generated@@51))
))))
(assert (forall (($generated@@54 T@U) ) (!  (=> ($generated@@35 $generated@@54 $generated) (and (= ($generated@@29 $generated@@5 ($generated@@28 $generated@@5 $generated@@54)) $generated@@54) ($generated@@32 $generated@@5 ($generated@@28 $generated@@5 $generated@@54) $generated)))
 :pattern ( ($generated@@35 $generated@@54 $generated))
)))
(assert (forall (($generated@@55 T@U) ($generated@@56 T@U) ($generated@@57 T@T) ) (! (= ($generated@@35 ($generated@@29 $generated@@57 $generated@@55) $generated@@56) ($generated@@32 $generated@@57 $generated@@55 $generated@@56))
 :pattern ( ($generated@@35 ($generated@@29 $generated@@57 $generated@@55) $generated@@56))
)))
(assert (forall (($generated@@58 T@U) ) (!  (=> ($generated@@44 $generated@@58) (and ($generated@@20 $generated@@58 ($generated@@29 $generated@@5 ($generated@@9 ($generated@@45 $generated@@58)))) (forall (($generated@@59 T@U) ) (!  (=> ($generated@@20 $generated@@58 ($generated@@29 $generated@@5 $generated@@59)) (<= ($generated@@10 $generated@@59) ($generated@@45 $generated@@58)))
 :pattern ( ($generated@@20 $generated@@58 ($generated@@29 $generated@@5 $generated@@59)))
))))
 :pattern ( ($generated@@45 $generated@@58))
)))
(assert  (=> (<= 1 $generated@@39) (forall (($generated@@60 Bool) ($generated@@61 T@U) ) (!  (=> (or ($generated@@42 $generated@@61) (and (< 1 $generated@@39) (and ($generated@@32 $generated@@33 $generated@@61 ($generated@@34 $generated)) (not ($generated@@43 $generated@@61 $generated@@21))))) (and ($generated@@20 $generated@@61 ($generated@@29 $generated@@5 ($generated@@9 ($generated@@40 $generated@@60 $generated@@61)))) (forall (($generated@@62 T@U) ) (!  (=> ($generated@@20 $generated@@61 ($generated@@29 $generated@@5 $generated@@62)) (<= ($generated@@10 $generated@@62) ($generated@@40 $generated@@60 $generated@@61)))
 :pattern ( ($generated@@20 $generated@@61 ($generated@@29 $generated@@5 $generated@@62)))
))))
 :pattern ( ($generated@@40 $generated@@60 $generated@@61))
))))
(assert (forall (($generated@@64 T@U) ) (! (= ($generated@@63 ($generated@@34 $generated@@64)) $generated@@64)
 :pattern ( ($generated@@34 $generated@@64))
)))
(assert (forall (($generated@@65 T@U) ) (! (= ($generated@@19 ($generated@@34 $generated@@65)) $generated@@1)
 :pattern ( ($generated@@34 $generated@@65))
)))
(assert (forall (($generated@@66 T@U) ($generated@@67 T@T) ) (! (= ($generated@@28 $generated@@67 ($generated@@29 $generated@@67 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@29 $generated@@67 $generated@@66))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@79 T@T) ($generated@@80 T@T) ($generated@@81 T@T) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ) (! (= ($generated@@68 $generated@@79 $generated@@80 $generated@@81 ($generated@@75 $generated@@79 $generated@@80 $generated@@81 $generated@@83 $generated@@84 $generated@@85 $generated@@82) $generated@@84 $generated@@85) $generated@@82)
 :weight 0
)) (and (forall (($generated@@86 T@T) ($generated@@87 T@T) ($generated@@88 T@T) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (!  (or (= $generated@@91 $generated@@93) (= ($generated@@68 $generated@@86 $generated@@87 $generated@@88 ($generated@@75 $generated@@86 $generated@@87 $generated@@88 $generated@@90 $generated@@91 $generated@@92 $generated@@89) $generated@@93 $generated@@94) ($generated@@68 $generated@@86 $generated@@87 $generated@@88 $generated@@90 $generated@@93 $generated@@94)))
 :weight 0
)) (forall (($generated@@95 T@T) ($generated@@96 T@T) ($generated@@97 T@T) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ) (!  (or (= $generated@@101 $generated@@103) (= ($generated@@68 $generated@@95 $generated@@96 $generated@@97 ($generated@@75 $generated@@95 $generated@@96 $generated@@97 $generated@@99 $generated@@100 $generated@@101 $generated@@98) $generated@@102 $generated@@103) ($generated@@68 $generated@@95 $generated@@96 $generated@@97 $generated@@99 $generated@@102 $generated@@103)))
 :weight 0
)))) (= ($generated@@3 $generated@@69) 4)) (= ($generated@@3 $generated@@70) 5)) (forall (($generated@@104 T@T) ($generated@@105 T@T) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ) (! (= ($generated@@72 $generated@@104 $generated@@105 ($generated@@76 $generated@@104 $generated@@105 $generated@@107 $generated@@108 $generated@@106) $generated@@108) $generated@@106)
 :weight 0
))) (forall (($generated@@109 T@T) ($generated@@110 T@T) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ) (!  (or (= $generated@@113 $generated@@114) (= ($generated@@72 $generated@@109 $generated@@110 ($generated@@76 $generated@@109 $generated@@110 $generated@@112 $generated@@113 $generated@@111) $generated@@114) ($generated@@72 $generated@@109 $generated@@110 $generated@@112 $generated@@114)))
 :weight 0
))) (= ($generated@@3 $generated@@73) 6)) (forall (($generated@@115 T@T) ($generated@@116 T@T) ) (= ($generated@@3 ($generated@@74 $generated@@115 $generated@@116)) 7))) (forall (($generated@@117 T@T) ($generated@@118 T@T) ) (! (= ($generated@@77 ($generated@@74 $generated@@117 $generated@@118)) $generated@@117)
 :pattern ( ($generated@@74 $generated@@117 $generated@@118))
))) (forall (($generated@@119 T@T) ($generated@@120 T@T) ) (! (= ($generated@@78 ($generated@@74 $generated@@119 $generated@@120)) $generated@@120)
 :pattern ( ($generated@@74 $generated@@119 $generated@@120))
))))
(assert (forall (($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 Bool) ($generated@@125 T@U) ($generated@@126 T@U) ) (! (= ($generated@@8 ($generated@@68 $generated@@69 $generated@@70 $generated@@4 ($generated@@71 $generated@@121 $generated@@122 $generated@@123 $generated@@124) $generated@@125 $generated@@126))  (=> (and (or (not (= $generated@@125 $generated@@121)) (not true)) ($generated@@8 ($generated@@28 $generated@@4 ($generated@@72 $generated@@70 $generated@@73 ($generated@@72 $generated@@69 ($generated@@74 $generated@@70 $generated@@73) $generated@@122 $generated@@125) $generated@@123)))) $generated@@124))
 :pattern ( ($generated@@68 $generated@@69 $generated@@70 $generated@@4 ($generated@@71 $generated@@121 $generated@@122 $generated@@123 $generated@@124) $generated@@125 $generated@@126))
)))
(assert (forall (($generated@@127 T@U) ($generated@@128 T@U) ) (!  (=> ($generated@@35 $generated@@127 ($generated@@34 $generated@@128)) (and (= ($generated@@29 $generated@@33 ($generated@@28 $generated@@33 $generated@@127)) $generated@@127) ($generated@@32 $generated@@33 ($generated@@28 $generated@@33 $generated@@127) ($generated@@34 $generated@@128))))
 :pattern ( ($generated@@35 $generated@@127 ($generated@@34 $generated@@128)))
)))
(assert (forall (($generated@@129 T@U) ($generated@@130 T@U) ) (! (= ($generated@@43 $generated@@129 $generated@@130) (forall (($generated@@131 T@U) ) (! (= ($generated@@20 $generated@@129 $generated@@131) ($generated@@20 $generated@@130 $generated@@131))
 :pattern ( ($generated@@20 $generated@@129 $generated@@131))
 :pattern ( ($generated@@20 $generated@@130 $generated@@131))
)))
 :pattern ( ($generated@@43 $generated@@129 $generated@@130))
)))
(assert (forall (($generated@@132 Int) ) (! (= ($generated@@29 $generated@@5 ($generated@@9 ($generated@@23 $generated@@132))) ($generated@@25 $generated@@73 ($generated@@29 $generated@@5 ($generated@@9 $generated@@132))))
 :pattern ( ($generated@@29 $generated@@5 ($generated@@9 ($generated@@23 $generated@@132))))
)))
(assert (forall (($generated@@133 T@U) ($generated@@134 T@T) ) (! (= ($generated@@29 $generated@@134 ($generated@@25 $generated@@134 $generated@@133)) ($generated@@25 $generated@@73 ($generated@@29 $generated@@134 $generated@@133)))
 :pattern ( ($generated@@29 $generated@@134 ($generated@@25 $generated@@134 $generated@@133)))
)))
(assert (forall (($generated@@135 T@U) ) (! ($generated@@32 $generated@@5 $generated@@135 $generated)
 :pattern ( ($generated@@32 $generated@@5 $generated@@135 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@136 () T@U)
(declare-fun $generated@@137 () Int)
(declare-fun $generated@@138 () Int)
(declare-fun $generated@@139 () Int)
(declare-fun $generated@@140 () Bool)
(declare-fun $generated@@141 () Int)
(declare-fun $generated@@142 () T@U)
(declare-fun $generated@@143 (T@U) Bool)
(declare-fun $generated@@144 () T@U)
(declare-fun $generated@@145 () T@U)
(declare-fun $generated@@146 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 21) (let (($generated@@147 true))
(let (($generated@@148  (=> (and (=> ($generated@@20 $generated@@136 ($generated@@29 $generated@@5 ($generated@@9 $generated@@137))) (<= $generated@@137 $generated@@138)) (= (ControlFlow 0 18) 16)) $generated@@147)))
(let (($generated@@149  (=> ($generated@@20 $generated@@136 ($generated@@29 $generated@@5 ($generated@@9 $generated@@137))) (=> (and (<= $generated@@137 $generated@@138) (= (ControlFlow 0 17) 16)) $generated@@147))))
(let (($generated@@150  (=> ($generated@@20 $generated@@136 ($generated@@29 $generated@@5 ($generated@@9 $generated@@138))) (and (=> (= (ControlFlow 0 19) 17) $generated@@149) (=> (= (ControlFlow 0 19) 18) $generated@@148)))))
(let (($generated@@151 true))
(let (($generated@@152  (and (=> (= (ControlFlow 0 3) (- 0 4)) ($generated@@20 $generated@@136 ($generated@@29 $generated@@5 ($generated@@9 $generated@@138)))) (=> ($generated@@20 $generated@@136 ($generated@@29 $generated@@5 ($generated@@9 $generated@@138))) (=> (= (ControlFlow 0 3) (- 0 2)) (forall (($generated@@153 Int) ) (!  (=> ($generated@@20 $generated@@136 ($generated@@29 $generated@@5 ($generated@@9 $generated@@153))) (<= $generated@@153 $generated@@138))
 :pattern ( ($generated@@20 $generated@@136 ($generated@@29 $generated@@5 ($generated@@9 $generated@@153))))
)))))))
(let (($generated@@154  (and (=> (= (ControlFlow 0 5) (- 0 6)) (or (and ($generated@@32 $generated@@5 ($generated@@9 ($generated@@23 0)) $generated) (and ($generated@@20 $generated@@136 ($generated@@29 $generated@@5 ($generated@@9 ($generated@@23 0)))) (forall (($generated@@155 Int) ) (!  (=> ($generated@@20 $generated@@136 ($generated@@29 $generated@@5 ($generated@@9 $generated@@155))) (<= $generated@@155 ($generated@@23 0)))
 :pattern ( ($generated@@20 $generated@@136 ($generated@@29 $generated@@5 ($generated@@9 $generated@@155))))
)))) (exists (($generated@@156 T@U) )  (and ($generated@@20 $generated@@136 ($generated@@29 $generated@@5 $generated@@156)) (forall (($generated@@157 Int) ) (!  (=> ($generated@@20 $generated@@136 ($generated@@29 $generated@@5 ($generated@@9 $generated@@157))) (<= $generated@@157 ($generated@@10 $generated@@156)))
 :pattern ( ($generated@@20 $generated@@136 ($generated@@29 $generated@@5 ($generated@@9 $generated@@157))))
)))))) (=> (or (and ($generated@@32 $generated@@5 ($generated@@9 ($generated@@23 0)) $generated) (and ($generated@@20 $generated@@136 ($generated@@29 $generated@@5 ($generated@@9 ($generated@@23 0)))) (forall (($generated@@158 T@U) ) (!  (=> ($generated@@20 $generated@@136 ($generated@@29 $generated@@5 $generated@@158)) (<= ($generated@@10 $generated@@158) ($generated@@23 0)))
 :pattern ( ($generated@@20 $generated@@136 ($generated@@29 $generated@@5 $generated@@158)))
)))) (exists (($generated@@159 Int) )  (and ($generated@@20 $generated@@136 ($generated@@29 $generated@@5 ($generated@@9 $generated@@159))) (forall (($generated@@160 T@U) ) (!  (=> ($generated@@20 $generated@@136 ($generated@@29 $generated@@5 $generated@@160)) (<= ($generated@@10 $generated@@160) $generated@@159))
 :pattern ( ($generated@@20 $generated@@136 ($generated@@29 $generated@@5 $generated@@160)))
))))) (=> (and (and (and ($generated@@20 $generated@@136 ($generated@@29 $generated@@5 ($generated@@9 $generated@@139))) (forall (($generated@@161 T@U) ) (!  (=> ($generated@@20 $generated@@136 ($generated@@29 $generated@@5 $generated@@161)) (<= ($generated@@10 $generated@@161) $generated@@139))
 :pattern ( ($generated@@20 $generated@@136 ($generated@@29 $generated@@5 $generated@@161)))
))) ($generated@@44 $generated@@136)) (and (and (= ($generated@@40 $generated@@140 $generated@@136) $generated@@139) ($generated@@32 $generated@@5 ($generated@@9 ($generated@@40 $generated@@140 $generated@@136)) $generated)) (and (= ($generated@@40 $generated@@140 $generated@@136) $generated@@138) (= (ControlFlow 0 5) 3)))) $generated@@152)))))
(let (($generated@@162  (=> (and (not ($generated@@20 $generated@@136 ($generated@@29 $generated@@5 ($generated@@9 $generated@@141)))) (= (ControlFlow 0 10) 5)) $generated@@154)))
(let (($generated@@163  (=> (and ($generated@@20 $generated@@136 ($generated@@29 $generated@@5 ($generated@@9 $generated@@141))) (= (ControlFlow 0 9) 5)) $generated@@154)))
(let (($generated@@164  (and (=> (= (ControlFlow 0 11) 9) $generated@@163) (=> (= (ControlFlow 0 11) 10) $generated@@162))))
(let (($generated@@165  (=> ($generated@@20 $generated@@136 ($generated@@29 $generated@@5 ($generated@@9 $generated@@139))) (and (=> (= (ControlFlow 0 12) 11) $generated@@164) (=> (= (ControlFlow 0 12) 8) $generated@@151)))))
(let (($generated@@166  (=> (and (not ($generated@@20 $generated@@136 ($generated@@29 $generated@@5 ($generated@@9 $generated@@139)))) (= (ControlFlow 0 7) 5)) $generated@@154)))
(let (($generated@@167  (and (=> (= (ControlFlow 0 13) 12) $generated@@165) (=> (= (ControlFlow 0 13) 7) $generated@@166))))
(let (($generated@@168 true))
(let (($generated@@169  (and (=> (= (ControlFlow 0 14) (- 0 15)) (not ($generated@@43 $generated@@136 $generated@@21))) (=> (not ($generated@@43 $generated@@136 $generated@@21)) (=> (and (and ($generated@@41 $generated@@142) ($generated@@143 $generated@@142)) (and (exists (($generated@@170 Int) ) (!  (and ($generated@@20 $generated@@136 ($generated@@29 $generated@@5 ($generated@@9 $generated@@170))) (forall (($generated@@171 T@U) ) (!  (=> ($generated@@20 $generated@@136 ($generated@@29 $generated@@5 $generated@@171)) (<= ($generated@@10 $generated@@171) $generated@@170))
 :pattern ( ($generated@@20 $generated@@136 ($generated@@29 $generated@@5 $generated@@171)))
)))
 :pattern ( ($generated@@20 $generated@@136 ($generated@@29 $generated@@5 ($generated@@9 $generated@@170))))
)) (= $generated@@144 $generated@@142))) (and (=> (= (ControlFlow 0 14) 13) $generated@@167) (=> (= (ControlFlow 0 14) 1) $generated@@168)))))))
(let (($generated@@172  (=> (and (= $generated@@145 ($generated@@71 $generated@@146 $generated@@144 $generated@@2 false)) (not ($generated@@43 $generated@@136 $generated@@21))) (and (=> (= (ControlFlow 0 20) 19) $generated@@150) (=> (= (ControlFlow 0 20) 14) $generated@@169)))))
(let (($generated@@173  (=> (and (and (and ($generated@@41 $generated@@144) ($generated@@143 $generated@@144)) ($generated@@32 $generated@@33 $generated@@136 ($generated@@34 $generated))) (and (= 1 $generated@@39) (= (ControlFlow 0 21) 20))) $generated@@172)))
$generated@@173))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
