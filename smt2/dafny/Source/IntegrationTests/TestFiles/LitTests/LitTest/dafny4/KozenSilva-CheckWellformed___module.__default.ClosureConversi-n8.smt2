(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TagSet () T@U)
(declare-fun TagMap () T@U)
(declare-fun alloc () T@U)
(declare-fun |##_System._tuple#2._#Make2| () T@U)
(declare-fun Tagclass._System.Tuple2 () T@U)
(declare-fun Tagclass._module.ClEnv () T@U)
(declare-fun Tagclass._module.Val () T@U)
(declare-fun Tagclass._module.Capsule () T@U)
(declare-fun Tagclass._module.Cl () T@U)
(declare-fun Tagclass._module.ConstOrAbs () T@U)
(declare-fun |##_module.Term.TermConst| () T@U)
(declare-fun Tagclass._module.Term () T@U)
(declare-fun |##_module.Term.TermVar| () T@U)
(declare-fun |##_module.Term.TermAbs| () T@U)
(declare-fun Tagclass._module.LambdaAbs () T@U)
(declare-fun |##_module.Val.ValConst| () T@U)
(declare-fun |##_module.Val.ValCl| () T@U)
(declare-fun |##_module.Cl.Closure| () T@U)
(declare-fun |##_module.ClEnv.ClEnvironment| () T@U)
(declare-fun |##_module.Capsule.Cap| () T@U)
(declare-fun |##_module.ConstOrAbs.CC| () T@U)
(declare-fun |##_module.ConstOrAbs.AA| () T@U)
(declare-fun |tytagFamily$_tuple#2| () T@U)
(declare-fun tytagFamily$ClEnv () T@U)
(declare-fun tytagFamily$Val () T@U)
(declare-fun tytagFamily$Capsule () T@U)
(declare-fun tytagFamily$Cl () T@U)
(declare-fun tytagFamily$ConstOrAbs () T@U)
(declare-fun tytagFamily$Term () T@U)
(declare-fun tytagFamily$LambdaAbs () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun MapType () T@T)
(declare-fun _module.ClEnv.m (T@U) T@U)
(declare-fun TMap (T@U T@U) T@U)
(declare-fun Tclass._module.Var () T@U)
(declare-fun Tclass._module.Val () T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun _module.ClEnv.ClEnvironment_q (T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun Tclass._module.ClEnv () T@U)
(declare-fun _module.Capsule.s (T@U) T@U)
(declare-fun Tclass._module.ConstOrAbs () T@U)
(declare-fun _module.Capsule.Cap_q (T@U) Bool)
(declare-fun Tclass._module.Capsule () T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun |#_module.Cl.Closure| (T@U T@U) T@U)
(declare-fun Tclass._module.Cl () T@U)
(declare-fun Tclass._module.LambdaAbs () T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun |lambda#18| (T@U T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun |Map#Domain| (T@U) T@U)
(declare-fun |Map#Glue| (T@U T@U T@U) T@U)
(declare-fun |Map#Elements| (T@U) T@U)
(declare-fun $AlwaysAllocated (T@U) Bool)
(declare-fun Tclass._module.Const () T@U)
(declare-fun _System.Tuple2.___hMake2_q (T@U) Bool)
(declare-fun Tclass._System.Tuple2 (T@U T@U) T@U)
(declare-fun _module.Cl.Closure_q (T@U) Bool)
(declare-fun |#_System._tuple#2._#Make2| (T@U T@U) T@U)
(declare-fun |#_module.Capsule.Cap| (T@U T@U) T@U)
(declare-fun Tclass._module.Term () T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.IsCapsule (T@U) Bool)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun |_module.__default.IsCapsule#canCall| (T@U) Bool)
(declare-fun _module.Term.TermAbs_q (T@U) Bool)
(declare-fun _module.Capsule.e (T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun _module.Term.TermConst_q (T@U) Bool)
(declare-fun _module.Term.TermVar_q (T@U) Bool)
(declare-fun _module.Val.ValConst_q (T@U) Bool)
(declare-fun _module.Val.ValCl_q (T@U) Bool)
(declare-fun _module.ConstOrAbs.CC_q (T@U) Bool)
(declare-fun _module.ConstOrAbs.AA_q (T@U) Bool)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun |Set#FromBoogieMap| (T@U) T@U)
(declare-fun SetType () T@T)
(declare-fun TSet (T@U) T@U)
(declare-fun |#_module.Term.TermConst| (T@U) T@U)
(declare-fun |#_module.Term.TermVar| (T@U) T@U)
(declare-fun |#_module.Term.TermAbs| (T@U) T@U)
(declare-fun |#_module.Val.ValConst| (T@U) T@U)
(declare-fun |#_module.Val.ValCl| (T@U) T@U)
(declare-fun |#_module.ClEnv.ClEnvironment| (T@U) T@U)
(declare-fun |#_module.ConstOrAbs.CC| (T@U) T@U)
(declare-fun |#_module.ConstOrAbs.AA| (T@U) T@U)
(declare-fun _module.__default.ClosureConversion (T@U) T@U)
(declare-fun |_module.__default.ClosureConversion#canCall| (T@U) Bool)
(declare-fun |_module.__default.ClosureConvertedMap#canCall| (T@U) Bool)
(declare-fun _module.Term.abs (T@U) T@U)
(declare-fun _module.__default.ClosureConvertedMap (T@U T@U) T@U)
(declare-fun $LS (T@U) T@U)
(declare-fun $LZ () T@U)
(declare-fun DtRank (T@U) Int)
(declare-fun |lambda#19| (T@U T@U T@U T@U) T@U)
(declare-fun _module.ConstOrAbs.abs (T@U) T@U)
(declare-fun _module.ConstOrAbs.c (T@U) T@U)
(declare-fun Inv0_TMap (T@U) T@U)
(declare-fun Inv1_TMap (T@U) T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun Tclass._System.Tuple2_0 (T@U) T@U)
(declare-fun Tclass._System.Tuple2_1 (T@U) T@U)
(declare-fun _System.Tuple2._0 (T@U) T@U)
(declare-fun _System.Tuple2._1 (T@U) T@U)
(declare-fun _module.Cl.abs (T@U) T@U)
(declare-fun _module.Cl.env (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun _module.Term._h0 (T@U) T@U)
(declare-fun _module.Term._h1 (T@U) T@U)
(declare-fun _module.Val._h2 (T@U) T@U)
(declare-fun _module.Val.cl (T@U) T@U)
(declare-fun BoxRank (T@U) Int)
(declare-fun |Map#Empty| () T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun TagFamily (T@U) T@U)
(declare-fun |Map#Values| (T@U) T@U)
(declare-fun |Map#Items| (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TagSet TagMap alloc |##_System._tuple#2._#Make2| Tagclass._System.Tuple2 Tagclass._module.ClEnv Tagclass._module.Val Tagclass._module.Capsule Tagclass._module.Cl Tagclass._module.ConstOrAbs |##_module.Term.TermConst| Tagclass._module.Term |##_module.Term.TermVar| |##_module.Term.TermAbs| Tagclass._module.LambdaAbs |##_module.Val.ValConst| |##_module.Val.ValCl| |##_module.Cl.Closure| |##_module.ClEnv.ClEnvironment| |##_module.Capsule.Cap| |##_module.ConstOrAbs.CC| |##_module.ConstOrAbs.AA| |tytagFamily$_tuple#2| tytagFamily$ClEnv tytagFamily$Val tytagFamily$Capsule tytagFamily$Cl tytagFamily$ConstOrAbs tytagFamily$Term tytagFamily$LambdaAbs)
)
(assert  (and (= (Ctor MapType) 3) (= (Ctor DatatypeTypeType) 4)))
(assert (forall ((d T@U) ($h T@U) ) (!  (=> (and ($IsGoodHeap $h) (and (_module.ClEnv.ClEnvironment_q d) ($IsAlloc DatatypeTypeType d Tclass._module.ClEnv $h))) ($IsAlloc MapType (_module.ClEnv.m d) (TMap Tclass._module.Var Tclass._module.Val) $h))
 :pattern ( ($IsAlloc MapType (_module.ClEnv.m d) (TMap Tclass._module.Var Tclass._module.Val) $h))
)))
(assert (forall ((d@@0 T@U) ($h@@0 T@U) ) (!  (=> (and ($IsGoodHeap $h@@0) (and (_module.Capsule.Cap_q d@@0) ($IsAlloc DatatypeTypeType d@@0 Tclass._module.Capsule $h@@0))) ($IsAlloc MapType (_module.Capsule.s d@@0) (TMap Tclass._module.Var Tclass._module.ConstOrAbs) $h@@0))
 :pattern ( ($IsAlloc MapType (_module.Capsule.s d@@0) (TMap Tclass._module.Var Tclass._module.ConstOrAbs) $h@@0))
)))
(assert (forall ((|a#49#0#0| T@U) (|a#49#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Cl.Closure| |a#49#0#0| |a#49#1#0|) Tclass._module.Cl)  (and ($Is DatatypeTypeType |a#49#0#0| Tclass._module.LambdaAbs) ($Is DatatypeTypeType |a#49#1#0| Tclass._module.ClEnv)))
 :pattern ( ($Is DatatypeTypeType (|#_module.Cl.Closure| |a#49#0#0| |a#49#1#0|) Tclass._module.Cl))
)))
(assert  (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor BoxType) 5)))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|$w#0| T@U) ) (! (= (U_2_bool (MapType0Select BoxType boolType (|lambda#18| |l#0| |l#1|) |$w#0|))  (and ($IsBox |$w#0| |l#0|) (|Set#IsMember| |l#1| |$w#0|)))
 :pattern ( (MapType0Select BoxType boolType (|lambda#18| |l#0| |l#1|) |$w#0|))
)))
(assert (forall ((a T@U) (b T@U) (t T@U) ) (! (= (|Map#Domain| (|Map#Glue| a b t)) a)
 :pattern ( (|Map#Domain| (|Map#Glue| a b t)))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) (t@@0 T@U) ) (! (= (|Map#Elements| (|Map#Glue| a@@0 b@@0 t@@0)) b@@0)
 :pattern ( (|Map#Elements| (|Map#Glue| a@@0 b@@0 t@@0)))
)))
(assert ($AlwaysAllocated Tclass._module.Var))
(assert ($AlwaysAllocated Tclass._module.Const))
(assert (forall ((|_System._tuple#2$T0| T@U) (|_System._tuple#2$T1| T@U) (d@@1 T@U) ) (!  (=> ($Is DatatypeTypeType d@@1 (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)) (_System.Tuple2.___hMake2_q d@@1))
 :pattern ( (_System.Tuple2.___hMake2_q d@@1) ($Is DatatypeTypeType d@@1 (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)))
)))
(assert (forall ((d@@2 T@U) ) (!  (=> ($Is DatatypeTypeType d@@2 Tclass._module.Cl) (_module.Cl.Closure_q d@@2))
 :pattern ( (_module.Cl.Closure_q d@@2) ($Is DatatypeTypeType d@@2 Tclass._module.Cl))
)))
(assert (forall ((d@@3 T@U) ) (!  (=> ($Is DatatypeTypeType d@@3 Tclass._module.ClEnv) (_module.ClEnv.ClEnvironment_q d@@3))
 :pattern ( (_module.ClEnv.ClEnvironment_q d@@3) ($Is DatatypeTypeType d@@3 Tclass._module.ClEnv))
)))
(assert (forall ((d@@4 T@U) ) (!  (=> ($Is DatatypeTypeType d@@4 Tclass._module.Capsule) (_module.Capsule.Cap_q d@@4))
 :pattern ( (_module.Capsule.Cap_q d@@4) ($Is DatatypeTypeType d@@4 Tclass._module.Capsule))
)))
(assert (forall ((|_System._tuple#2$T0@@0| T@U) (|_System._tuple#2$T1@@0| T@U) (|a#2#0#0| T@U) (|a#2#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|))  (and ($IsBox |a#2#0#0| |_System._tuple#2$T0@@0|) ($IsBox |a#2#1#0| |_System._tuple#2$T1@@0|)))
 :pattern ( ($Is DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|)))
)))
(assert (forall ((|a#58#0#0| T@U) (|a#58#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Capsule.Cap| |a#58#0#0| |a#58#1#0|) Tclass._module.Capsule)  (and ($Is DatatypeTypeType |a#58#0#0| Tclass._module.Term) ($Is MapType |a#58#1#0| (TMap Tclass._module.Var Tclass._module.ConstOrAbs))))
 :pattern ( ($Is DatatypeTypeType (|#_module.Capsule.Cap| |a#58#0#0| |a#58#1#0|) Tclass._module.Capsule))
)))
(assert  (=> (<= 3 $FunctionContextHeight) (forall ((|cap#0| T@U) ) (!  (=> (or (|_module.__default.IsCapsule#canCall| (Lit DatatypeTypeType |cap#0|)) (and (< 3 $FunctionContextHeight) ($Is DatatypeTypeType |cap#0| Tclass._module.Capsule))) (and (_module.Capsule.Cap_q (Lit DatatypeTypeType |cap#0|)) (= (_module.__default.IsCapsule (Lit DatatypeTypeType |cap#0|)) (U_2_bool (Lit boolType (bool_2_U (_module.Term.TermAbs_q (Lit DatatypeTypeType (_module.Capsule.e (Lit DatatypeTypeType |cap#0|))))))))))
 :weight 3
 :pattern ( (_module.__default.IsCapsule (Lit DatatypeTypeType |cap#0|)))
))))
(assert (forall ((x@@2 T@U) (T T@T) ) (! (= (Lit T x@@2) x@@2)
 :pattern ( (Lit T x@@2))
)))
(assert (forall ((a@@1 T@U) (b@@1 T@U) (t0@@0 T@U) (t1@@0 T@U) ) (!  (=> (forall ((bx T@U) )  (=> (|Set#IsMember| a@@1 bx) (and ($IsBox bx t0@@0) ($IsBox (MapType0Select BoxType BoxType b@@1 bx) t1@@0)))) ($Is MapType (|Map#Glue| a@@1 b@@1 (TMap t0@@0 t1@@0)) (TMap t0@@0 t1@@0)))
 :pattern ( (|Map#Glue| a@@1 b@@1 (TMap t0@@0 t1@@0)))
)))
(assert (forall ((|_System._tuple#2$T0@@1| T@U) (|_System._tuple#2$T1@@1| T@U) (|a#2#0#0@@0| T@U) (|a#2#1#0@@0| T@U) ($h@@1 T@U) ) (!  (=> ($IsGoodHeap $h@@1) (= ($IsAlloc DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0@@0| |a#2#1#0@@0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|) $h@@1)  (and ($IsAllocBox |a#2#0#0@@0| |_System._tuple#2$T0@@1| $h@@1) ($IsAllocBox |a#2#1#0@@0| |_System._tuple#2$T1@@1| $h@@1))))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0@@0| |a#2#1#0@@0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|) $h@@1))
)))
(assert (forall ((d@@5 T@U) ) (! (= (_System.Tuple2.___hMake2_q d@@5) (= (DatatypeCtorId d@@5) |##_System._tuple#2._#Make2|))
 :pattern ( (_System.Tuple2.___hMake2_q d@@5))
)))
(assert (forall ((d@@6 T@U) ) (! (= (_module.Term.TermConst_q d@@6) (= (DatatypeCtorId d@@6) |##_module.Term.TermConst|))
 :pattern ( (_module.Term.TermConst_q d@@6))
)))
(assert (forall ((d@@7 T@U) ) (! (= (_module.Term.TermVar_q d@@7) (= (DatatypeCtorId d@@7) |##_module.Term.TermVar|))
 :pattern ( (_module.Term.TermVar_q d@@7))
)))
(assert (forall ((d@@8 T@U) ) (! (= (_module.Term.TermAbs_q d@@8) (= (DatatypeCtorId d@@8) |##_module.Term.TermAbs|))
 :pattern ( (_module.Term.TermAbs_q d@@8))
)))
(assert (forall ((d@@9 T@U) ) (! (= (_module.Val.ValConst_q d@@9) (= (DatatypeCtorId d@@9) |##_module.Val.ValConst|))
 :pattern ( (_module.Val.ValConst_q d@@9))
)))
(assert (forall ((d@@10 T@U) ) (! (= (_module.Val.ValCl_q d@@10) (= (DatatypeCtorId d@@10) |##_module.Val.ValCl|))
 :pattern ( (_module.Val.ValCl_q d@@10))
)))
(assert (forall ((d@@11 T@U) ) (! (= (_module.Cl.Closure_q d@@11) (= (DatatypeCtorId d@@11) |##_module.Cl.Closure|))
 :pattern ( (_module.Cl.Closure_q d@@11))
)))
(assert (forall ((d@@12 T@U) ) (! (= (_module.ClEnv.ClEnvironment_q d@@12) (= (DatatypeCtorId d@@12) |##_module.ClEnv.ClEnvironment|))
 :pattern ( (_module.ClEnv.ClEnvironment_q d@@12))
)))
(assert (forall ((d@@13 T@U) ) (! (= (_module.Capsule.Cap_q d@@13) (= (DatatypeCtorId d@@13) |##_module.Capsule.Cap|))
 :pattern ( (_module.Capsule.Cap_q d@@13))
)))
(assert (forall ((d@@14 T@U) ) (! (= (_module.ConstOrAbs.CC_q d@@14) (= (DatatypeCtorId d@@14) |##_module.ConstOrAbs.CC|))
 :pattern ( (_module.ConstOrAbs.CC_q d@@14))
)))
(assert (forall ((d@@15 T@U) ) (! (= (_module.ConstOrAbs.AA_q d@@15) (= (DatatypeCtorId d@@15) |##_module.ConstOrAbs.AA|))
 :pattern ( (_module.ConstOrAbs.AA_q d@@15))
)))
(assert (forall ((x@@3 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@3)) x@@3)
 :pattern ( ($Unbox T@@0 x@@3))
)))
(assert (forall ((m@@1 T@U) (bx@@0 T@U) ) (! (= (|Set#IsMember| (|Set#FromBoogieMap| m@@1) bx@@0) (U_2_bool (MapType0Select BoxType boolType m@@1 bx@@0)))
 :pattern ( (|Set#IsMember| (|Set#FromBoogieMap| m@@1) bx@@0))
)))
(assert (forall ((d@@16 T@U) ) (!  (=> (_System.Tuple2.___hMake2_q d@@16) (exists ((|a#1#0#0| T@U) (|a#1#1#0| T@U) ) (= d@@16 (|#_System._tuple#2._#Make2| |a#1#0#0| |a#1#1#0|))))
 :pattern ( (_System.Tuple2.___hMake2_q d@@16))
)))
(assert (forall ((d@@17 T@U) ) (!  (=> (_module.Cl.Closure_q d@@17) (exists ((|a#48#0#0| T@U) (|a#48#1#0| T@U) ) (= d@@17 (|#_module.Cl.Closure| |a#48#0#0| |a#48#1#0|))))
 :pattern ( (_module.Cl.Closure_q d@@17))
)))
(assert (forall ((d@@18 T@U) ) (!  (=> (_module.Capsule.Cap_q d@@18) (exists ((|a#57#0#0| T@U) (|a#57#1#0| T@U) ) (= d@@18 (|#_module.Capsule.Cap| |a#57#0#0| |a#57#1#0|))))
 :pattern ( (_module.Capsule.Cap_q d@@18))
)))
(assert (= (Ctor SetType) 6))
(assert (forall ((v T@U) (t0@@1 T@U) ) (! (= ($Is SetType v (TSet t0@@1)) (forall ((bx@@1 T@U) ) (!  (=> (|Set#IsMember| v bx@@1) ($IsBox bx@@1 t0@@1))
 :pattern ( (|Set#IsMember| v bx@@1))
)))
 :pattern ( ($Is SetType v (TSet t0@@1)))
)))
(assert (forall ((d@@19 T@U) ) (!  (=> (_module.Term.TermConst_q d@@19) (exists ((|a#17#0#0| T@U) ) (= d@@19 (|#_module.Term.TermConst| |a#17#0#0|))))
 :pattern ( (_module.Term.TermConst_q d@@19))
)))
(assert (forall ((d@@20 T@U) ) (!  (=> (_module.Term.TermVar_q d@@20) (exists ((|a#22#0#0| T@U) ) (= d@@20 (|#_module.Term.TermVar| |a#22#0#0|))))
 :pattern ( (_module.Term.TermVar_q d@@20))
)))
(assert (forall ((d@@21 T@U) ) (!  (=> (_module.Term.TermAbs_q d@@21) (exists ((|a#27#0#0| T@U) ) (= d@@21 (|#_module.Term.TermAbs| |a#27#0#0|))))
 :pattern ( (_module.Term.TermAbs_q d@@21))
)))
(assert (forall ((d@@22 T@U) ) (!  (=> (_module.Val.ValConst_q d@@22) (exists ((|a#40#0#0| T@U) ) (= d@@22 (|#_module.Val.ValConst| |a#40#0#0|))))
 :pattern ( (_module.Val.ValConst_q d@@22))
)))
(assert (forall ((d@@23 T@U) ) (!  (=> (_module.Val.ValCl_q d@@23) (exists ((|a#44#0#0| T@U) ) (= d@@23 (|#_module.Val.ValCl| |a#44#0#0|))))
 :pattern ( (_module.Val.ValCl_q d@@23))
)))
(assert (forall ((d@@24 T@U) ) (!  (=> (_module.ClEnv.ClEnvironment_q d@@24) (exists ((|a#53#0#0| T@U) ) (= d@@24 (|#_module.ClEnv.ClEnvironment| |a#53#0#0|))))
 :pattern ( (_module.ClEnv.ClEnvironment_q d@@24))
)))
(assert (forall ((d@@25 T@U) ) (!  (=> (_module.ConstOrAbs.CC_q d@@25) (exists ((|a#66#0#0| T@U) ) (= d@@25 (|#_module.ConstOrAbs.CC| |a#66#0#0|))))
 :pattern ( (_module.ConstOrAbs.CC_q d@@25))
)))
(assert (forall ((d@@26 T@U) ) (!  (=> (_module.ConstOrAbs.AA_q d@@26) (exists ((|a#71#0#0| T@U) ) (= d@@26 (|#_module.ConstOrAbs.AA| |a#71#0#0|))))
 :pattern ( (_module.ConstOrAbs.AA_q d@@26))
)))
(assert (forall ((v@@0 T@U) (t@@1 T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t@@1 h) ($IsAlloc T@@1 v@@0 t@@1 h))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t@@1 h))
)))
(assert  (=> (<= 4 $FunctionContextHeight) (forall ((|cap#0@@0| T@U) ) (!  (=> (or (|_module.__default.ClosureConversion#canCall| |cap#0@@0|) (and (< 4 $FunctionContextHeight) (and ($Is DatatypeTypeType |cap#0@@0| Tclass._module.Capsule) (_module.__default.IsCapsule |cap#0@@0|)))) (and (and (_module.Capsule.Cap_q |cap#0@@0|) (and (_module.Capsule.Cap_q |cap#0@@0|) (|_module.__default.ClosureConvertedMap#canCall| (_module.Capsule.s |cap#0@@0|)))) (= (_module.__default.ClosureConversion |cap#0@@0|) (|#_module.Cl.Closure| (_module.Term.abs (_module.Capsule.e |cap#0@@0|)) (_module.__default.ClosureConvertedMap ($LS $LZ) (_module.Capsule.s |cap#0@@0|))))))
 :pattern ( (_module.__default.ClosureConversion |cap#0@@0|))
))))
(assert (forall ((|a#64#0#0| T@U) (|a#64#1#0| T@U) (bx@@2 T@U) ) (!  (=> (|Set#IsMember| (|Map#Domain| |a#64#1#0|) bx@@2) (< (DtRank ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |a#64#1#0|) bx@@2))) (DtRank (|#_module.Capsule.Cap| |a#64#0#0| |a#64#1#0|))))
 :pattern ( (|Set#IsMember| (|Map#Domain| |a#64#1#0|) bx@@2) (|#_module.Capsule.Cap| |a#64#0#0| |a#64#1#0|))
)))
(assert (forall ((|l#0@@0| T@U) (|l#1@@0| T@U) (|l#2| T@U) (|l#3| T@U) (|$w#0@@0| T@U) ) (! (= (MapType0Select BoxType BoxType (|lambda#19| |l#0@@0| |l#1@@0| |l#2| |l#3|) |$w#0@@0|) ($Box DatatypeTypeType (ite (_module.ConstOrAbs.AA_q ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType |l#0@@0| |$w#0@@0|))) (|#_module.Val.ValCl| (|#_module.Cl.Closure| (_module.ConstOrAbs.abs ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType |l#1@@0| |$w#0@@0|))) |l#2|)) (|#_module.Val.ValConst| (_module.ConstOrAbs.c ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType |l#3| |$w#0@@0|)))))))
 :pattern ( (MapType0Select BoxType BoxType (|lambda#19| |l#0@@0| |l#1@@0| |l#2| |l#3|) |$w#0@@0|))
)))
(assert (forall ((bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 Tclass._module.ClEnv) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@3)) bx@@3) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@3) Tclass._module.ClEnv)))
 :pattern ( ($IsBox bx@@3 Tclass._module.ClEnv))
)))
(assert (forall ((bx@@4 T@U) ) (!  (=> ($IsBox bx@@4 Tclass._module.Val) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@4)) bx@@4) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@4) Tclass._module.Val)))
 :pattern ( ($IsBox bx@@4 Tclass._module.Val))
)))
(assert (forall ((bx@@5 T@U) ) (!  (=> ($IsBox bx@@5 Tclass._module.Capsule) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@5)) bx@@5) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@5) Tclass._module.Capsule)))
 :pattern ( ($IsBox bx@@5 Tclass._module.Capsule))
)))
(assert (forall ((bx@@6 T@U) ) (!  (=> ($IsBox bx@@6 Tclass._module.Cl) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@6)) bx@@6) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@6) Tclass._module.Cl)))
 :pattern ( ($IsBox bx@@6 Tclass._module.Cl))
)))
(assert (forall ((bx@@7 T@U) ) (!  (=> ($IsBox bx@@7 Tclass._module.ConstOrAbs) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@7)) bx@@7) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@7) Tclass._module.ConstOrAbs)))
 :pattern ( ($IsBox bx@@7 Tclass._module.ConstOrAbs))
)))
(assert (forall ((bx@@8 T@U) ) (!  (=> ($IsBox bx@@8 Tclass._module.Term) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@8)) bx@@8) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@8) Tclass._module.Term)))
 :pattern ( ($IsBox bx@@8 Tclass._module.Term))
)))
(assert (forall ((bx@@9 T@U) ) (!  (=> ($IsBox bx@@9 Tclass._module.LambdaAbs) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@9)) bx@@9) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@9) Tclass._module.LambdaAbs)))
 :pattern ( ($IsBox bx@@9 Tclass._module.LambdaAbs))
)))
(assert (forall ((|a#18#0#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Term.TermConst| |a#18#0#0|) Tclass._module.Term) ($IsBox |a#18#0#0| Tclass._module.Const))
 :pattern ( ($Is DatatypeTypeType (|#_module.Term.TermConst| |a#18#0#0|) Tclass._module.Term))
)))
(assert (forall ((|a#23#0#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Term.TermVar| |a#23#0#0|) Tclass._module.Term) ($IsBox |a#23#0#0| Tclass._module.Var))
 :pattern ( ($Is DatatypeTypeType (|#_module.Term.TermVar| |a#23#0#0|) Tclass._module.Term))
)))
(assert (forall ((|a#28#0#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Term.TermAbs| |a#28#0#0|) Tclass._module.Term) ($Is DatatypeTypeType |a#28#0#0| Tclass._module.LambdaAbs))
 :pattern ( ($Is DatatypeTypeType (|#_module.Term.TermAbs| |a#28#0#0|) Tclass._module.Term))
)))
(assert (forall ((|a#41#0#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Val.ValConst| |a#41#0#0|) Tclass._module.Val) ($IsBox |a#41#0#0| Tclass._module.Const))
 :pattern ( ($Is DatatypeTypeType (|#_module.Val.ValConst| |a#41#0#0|) Tclass._module.Val))
)))
(assert (forall ((|a#45#0#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Val.ValCl| |a#45#0#0|) Tclass._module.Val) ($Is DatatypeTypeType |a#45#0#0| Tclass._module.Cl))
 :pattern ( ($Is DatatypeTypeType (|#_module.Val.ValCl| |a#45#0#0|) Tclass._module.Val))
)))
(assert (forall ((|a#67#0#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.ConstOrAbs.CC| |a#67#0#0|) Tclass._module.ConstOrAbs) ($IsBox |a#67#0#0| Tclass._module.Const))
 :pattern ( ($Is DatatypeTypeType (|#_module.ConstOrAbs.CC| |a#67#0#0|) Tclass._module.ConstOrAbs))
)))
(assert (forall ((|a#72#0#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.ConstOrAbs.AA| |a#72#0#0|) Tclass._module.ConstOrAbs) ($Is DatatypeTypeType |a#72#0#0| Tclass._module.LambdaAbs))
 :pattern ( ($Is DatatypeTypeType (|#_module.ConstOrAbs.AA| |a#72#0#0|) Tclass._module.ConstOrAbs))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($ly T@U) (|s#0| T@U) ) (!  (=> (or (|_module.__default.ClosureConvertedMap#canCall| |s#0|) (and (< 2 $FunctionContextHeight) ($Is MapType |s#0| (TMap Tclass._module.Var Tclass._module.ConstOrAbs)))) (and (forall ((|y#0| T@U) ) (!  (=> ($IsBox |y#0| Tclass._module.Var) (=> (|Set#IsMember| (|Map#Domain| |s#0|) |y#0|) (=> (_module.ConstOrAbs.AA_q ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |s#0|) |y#0|))) (|_module.__default.ClosureConvertedMap#canCall| |s#0|))))
 :pattern ( ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |s#0|) |y#0|)))
 :pattern ( (|Set#IsMember| (|Map#Domain| |s#0|) |y#0|))
)) (= (_module.__default.ClosureConvertedMap ($LS $ly) |s#0|) (|#_module.ClEnv.ClEnvironment| (|Map#Glue| (|Set#FromBoogieMap| (|lambda#18| Tclass._module.Var (|Map#Domain| |s#0|))) (|lambda#19| (|Map#Elements| |s#0|) (|Map#Elements| |s#0|) (_module.__default.ClosureConvertedMap $ly |s#0|) (|Map#Elements| |s#0|)) (TMap Tclass._module.Var Tclass._module.Val))))))
 :pattern ( (_module.__default.ClosureConvertedMap ($LS $ly) |s#0|))
))))
(assert  (=> (<= 4 $FunctionContextHeight) (forall ((|cap#0@@1| T@U) ) (!  (=> (or (|_module.__default.ClosureConversion#canCall| (Lit DatatypeTypeType |cap#0@@1|)) (and (< 4 $FunctionContextHeight) (and ($Is DatatypeTypeType |cap#0@@1| Tclass._module.Capsule) (U_2_bool (Lit boolType (bool_2_U (_module.__default.IsCapsule (Lit DatatypeTypeType |cap#0@@1|)))))))) (and (and (_module.Capsule.Cap_q (Lit DatatypeTypeType |cap#0@@1|)) (and (_module.Capsule.Cap_q (Lit DatatypeTypeType |cap#0@@1|)) (|_module.__default.ClosureConvertedMap#canCall| (Lit MapType (_module.Capsule.s (Lit DatatypeTypeType |cap#0@@1|)))))) (= (_module.__default.ClosureConversion (Lit DatatypeTypeType |cap#0@@1|)) (Lit DatatypeTypeType (|#_module.Cl.Closure| (Lit DatatypeTypeType (_module.Term.abs (Lit DatatypeTypeType (_module.Capsule.e (Lit DatatypeTypeType |cap#0@@1|))))) (Lit DatatypeTypeType (_module.__default.ClosureConvertedMap ($LS $LZ) (Lit MapType (_module.Capsule.s (Lit DatatypeTypeType |cap#0@@1|))))))))))
 :weight 3
 :pattern ( (_module.__default.ClosureConversion (Lit DatatypeTypeType |cap#0@@1|)))
))))
(assert (forall ((|a#54#0#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.ClEnv.ClEnvironment| |a#54#0#0|) Tclass._module.ClEnv) ($Is MapType |a#54#0#0| (TMap Tclass._module.Var Tclass._module.Val)))
 :pattern ( ($Is DatatypeTypeType (|#_module.ClEnv.ClEnvironment| |a#54#0#0|) Tclass._module.ClEnv))
)))
(assert (forall ((d@@27 T@U) ) (!  (=> ($Is DatatypeTypeType d@@27 Tclass._module.Val) (or (_module.Val.ValConst_q d@@27) (_module.Val.ValCl_q d@@27)))
 :pattern ( (_module.Val.ValCl_q d@@27) ($Is DatatypeTypeType d@@27 Tclass._module.Val))
 :pattern ( (_module.Val.ValConst_q d@@27) ($Is DatatypeTypeType d@@27 Tclass._module.Val))
)))
(assert (forall ((d@@28 T@U) ) (!  (=> ($Is DatatypeTypeType d@@28 Tclass._module.ConstOrAbs) (or (_module.ConstOrAbs.CC_q d@@28) (_module.ConstOrAbs.AA_q d@@28)))
 :pattern ( (_module.ConstOrAbs.AA_q d@@28) ($Is DatatypeTypeType d@@28 Tclass._module.ConstOrAbs))
 :pattern ( (_module.ConstOrAbs.CC_q d@@28) ($Is DatatypeTypeType d@@28 Tclass._module.ConstOrAbs))
)))
(assert  (=> (<= 4 $FunctionContextHeight) (forall ((|cap#0@@2| T@U) ) (!  (=> (or (|_module.__default.ClosureConversion#canCall| |cap#0@@2|) (and (< 4 $FunctionContextHeight) (and ($Is DatatypeTypeType |cap#0@@2| Tclass._module.Capsule) (_module.__default.IsCapsule |cap#0@@2|)))) ($Is DatatypeTypeType (_module.__default.ClosureConversion |cap#0@@2|) Tclass._module.Cl))
 :pattern ( (_module.__default.ClosureConversion |cap#0@@2|))
))))
(assert (forall ((v@@1 T@U) (t@@2 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@1) t@@2) ($Is T@@2 v@@1 t@@2))
 :pattern ( ($IsBox ($Box T@@2 v@@1) t@@2))
)))
(assert (forall ((ty T@U) ) (!  (=> ($AlwaysAllocated ty) (forall ((h@@0 T@U) (v@@2 T@U) ) (!  (=> ($IsBox v@@2 ty) ($IsAllocBox v@@2 ty h@@0))
 :pattern ( ($IsAllocBox v@@2 ty h@@0))
)))
 :pattern ( ($AlwaysAllocated ty))
)))
(assert (forall ((v@@3 T@U) (t0@@2 T@U) (h@@1 T@U) ) (! (= ($IsAlloc SetType v@@3 (TSet t0@@2) h@@1) (forall ((bx@@10 T@U) ) (!  (=> (|Set#IsMember| v@@3 bx@@10) ($IsAllocBox bx@@10 t0@@2 h@@1))
 :pattern ( (|Set#IsMember| v@@3 bx@@10))
)))
 :pattern ( ($IsAlloc SetType v@@3 (TSet t0@@2) h@@1))
)))
(assert (forall ((t@@3 T@U) (u T@U) ) (! (= (Inv0_TMap (TMap t@@3 u)) t@@3)
 :pattern ( (TMap t@@3 u))
)))
(assert (forall ((t@@4 T@U) (u@@0 T@U) ) (! (= (Inv1_TMap (TMap t@@4 u@@0)) u@@0)
 :pattern ( (TMap t@@4 u@@0))
)))
(assert (forall ((t@@5 T@U) (u@@1 T@U) ) (! (= (Tag (TMap t@@5 u@@1)) TagMap)
 :pattern ( (TMap t@@5 u@@1))
)))
(assert (forall ((|a#0#0#0| T@U) (|a#0#1#0| T@U) ) (! (= (DatatypeCtorId (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|)) |##_System._tuple#2._#Make2|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|))
)))
(assert (forall ((|_System._tuple#2$T0@@2| T@U) (|_System._tuple#2$T1@@2| T@U) ) (! (= (Tclass._System.Tuple2_0 (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|)) |_System._tuple#2$T0@@2|)
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|))
)))
(assert (forall ((|_System._tuple#2$T0@@3| T@U) (|_System._tuple#2$T1@@3| T@U) ) (! (= (Tclass._System.Tuple2_1 (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|)) |_System._tuple#2$T1@@3|)
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|))
)))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| T@U) ) (! (= (_System.Tuple2._0 (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|)) |a#4#0#0|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|))
)))
(assert (forall ((|a#6#0#0| T@U) (|a#6#1#0| T@U) ) (! (= (_System.Tuple2._1 (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|)) |a#6#1#0|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|))
)))
(assert (forall ((|a#47#0#0| T@U) (|a#47#1#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Cl.Closure| |a#47#0#0| |a#47#1#0|)) |##_module.Cl.Closure|)
 :pattern ( (|#_module.Cl.Closure| |a#47#0#0| |a#47#1#0|))
)))
(assert (forall ((|a#50#0#0| T@U) (|a#50#1#0| T@U) ) (! (= (_module.Cl.abs (|#_module.Cl.Closure| |a#50#0#0| |a#50#1#0|)) |a#50#0#0|)
 :pattern ( (|#_module.Cl.Closure| |a#50#0#0| |a#50#1#0|))
)))
(assert (forall ((|a#51#0#0| T@U) (|a#51#1#0| T@U) ) (! (= (_module.Cl.env (|#_module.Cl.Closure| |a#51#0#0| |a#51#1#0|)) |a#51#1#0|)
 :pattern ( (|#_module.Cl.Closure| |a#51#0#0| |a#51#1#0|))
)))
(assert (forall ((|a#56#0#0| T@U) (|a#56#1#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Capsule.Cap| |a#56#0#0| |a#56#1#0|)) |##_module.Capsule.Cap|)
 :pattern ( (|#_module.Capsule.Cap| |a#56#0#0| |a#56#1#0|))
)))
(assert (forall ((|a#60#0#0| T@U) (|a#60#1#0| T@U) ) (! (= (_module.Capsule.e (|#_module.Capsule.Cap| |a#60#0#0| |a#60#1#0|)) |a#60#0#0|)
 :pattern ( (|#_module.Capsule.Cap| |a#60#0#0| |a#60#1#0|))
)))
(assert (forall ((|a#62#0#0| T@U) (|a#62#1#0| T@U) ) (! (= (_module.Capsule.s (|#_module.Capsule.Cap| |a#62#0#0| |a#62#1#0|)) |a#62#1#0|)
 :pattern ( (|#_module.Capsule.Cap| |a#62#0#0| |a#62#1#0|))
)))
(assert (forall ((t@@6 T@U) ) (! (= (Inv0_TSet (TSet t@@6)) t@@6)
 :pattern ( (TSet t@@6))
)))
(assert (forall ((t@@7 T@U) ) (! (= (Tag (TSet t@@7)) TagSet)
 :pattern ( (TSet t@@7))
)))
(assert (forall ((|a#16#0#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Term.TermConst| |a#16#0#0|)) |##_module.Term.TermConst|)
 :pattern ( (|#_module.Term.TermConst| |a#16#0#0|))
)))
(assert (forall ((|a#20#0#0| T@U) ) (! (= (_module.Term._h0 (|#_module.Term.TermConst| |a#20#0#0|)) |a#20#0#0|)
 :pattern ( (|#_module.Term.TermConst| |a#20#0#0|))
)))
(assert (forall ((|a#21#0#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Term.TermVar| |a#21#0#0|)) |##_module.Term.TermVar|)
 :pattern ( (|#_module.Term.TermVar| |a#21#0#0|))
)))
(assert (forall ((|a#25#0#0| T@U) ) (! (= (_module.Term._h1 (|#_module.Term.TermVar| |a#25#0#0|)) |a#25#0#0|)
 :pattern ( (|#_module.Term.TermVar| |a#25#0#0|))
)))
(assert (forall ((|a#26#0#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Term.TermAbs| |a#26#0#0|)) |##_module.Term.TermAbs|)
 :pattern ( (|#_module.Term.TermAbs| |a#26#0#0|))
)))
(assert (forall ((|a#30#0#0| T@U) ) (! (= (_module.Term.abs (|#_module.Term.TermAbs| |a#30#0#0|)) |a#30#0#0|)
 :pattern ( (|#_module.Term.TermAbs| |a#30#0#0|))
)))
(assert (forall ((|a#39#0#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Val.ValConst| |a#39#0#0|)) |##_module.Val.ValConst|)
 :pattern ( (|#_module.Val.ValConst| |a#39#0#0|))
)))
(assert (forall ((|a#42#0#0| T@U) ) (! (= (_module.Val._h2 (|#_module.Val.ValConst| |a#42#0#0|)) |a#42#0#0|)
 :pattern ( (|#_module.Val.ValConst| |a#42#0#0|))
)))
(assert (forall ((|a#43#0#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Val.ValCl| |a#43#0#0|)) |##_module.Val.ValCl|)
 :pattern ( (|#_module.Val.ValCl| |a#43#0#0|))
)))
(assert (forall ((|a#46#0#0| T@U) ) (! (= (_module.Val.cl (|#_module.Val.ValCl| |a#46#0#0|)) |a#46#0#0|)
 :pattern ( (|#_module.Val.ValCl| |a#46#0#0|))
)))
(assert (forall ((|a#52#0#0| T@U) ) (! (= (DatatypeCtorId (|#_module.ClEnv.ClEnvironment| |a#52#0#0|)) |##_module.ClEnv.ClEnvironment|)
 :pattern ( (|#_module.ClEnv.ClEnvironment| |a#52#0#0|))
)))
(assert (forall ((|a#55#0#0| T@U) ) (! (= (_module.ClEnv.m (|#_module.ClEnv.ClEnvironment| |a#55#0#0|)) |a#55#0#0|)
 :pattern ( (|#_module.ClEnv.ClEnvironment| |a#55#0#0|))
)))
(assert (forall ((|a#65#0#0| T@U) ) (! (= (DatatypeCtorId (|#_module.ConstOrAbs.CC| |a#65#0#0|)) |##_module.ConstOrAbs.CC|)
 :pattern ( (|#_module.ConstOrAbs.CC| |a#65#0#0|))
)))
(assert (forall ((|a#69#0#0| T@U) ) (! (= (_module.ConstOrAbs.c (|#_module.ConstOrAbs.CC| |a#69#0#0|)) |a#69#0#0|)
 :pattern ( (|#_module.ConstOrAbs.CC| |a#69#0#0|))
)))
(assert (forall ((|a#70#0#0| T@U) ) (! (= (DatatypeCtorId (|#_module.ConstOrAbs.AA| |a#70#0#0|)) |##_module.ConstOrAbs.AA|)
 :pattern ( (|#_module.ConstOrAbs.AA| |a#70#0#0|))
)))
(assert (forall ((|a#74#0#0| T@U) ) (! (= (_module.ConstOrAbs.abs (|#_module.ConstOrAbs.AA| |a#74#0#0|)) |a#74#0#0|)
 :pattern ( (|#_module.ConstOrAbs.AA| |a#74#0#0|))
)))
(assert (forall ((x@@4 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@4)) x@@4)
 :pattern ( ($Box T@@3 x@@4))
)))
(assert (forall ((v@@4 T@U) (t0@@3 T@U) (t1@@1 T@U) (h@@2 T@U) ) (! (= ($IsAlloc MapType v@@4 (TMap t0@@3 t1@@1) h@@2) (forall ((bx@@11 T@U) ) (!  (=> (|Set#IsMember| (|Map#Domain| v@@4) bx@@11) (and ($IsAllocBox (MapType0Select BoxType BoxType (|Map#Elements| v@@4) bx@@11) t1@@1 h@@2) ($IsAllocBox bx@@11 t0@@3 h@@2)))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| v@@4) bx@@11))
 :pattern ( (|Set#IsMember| (|Map#Domain| v@@4) bx@@11))
)))
 :pattern ( ($IsAlloc MapType v@@4 (TMap t0@@3 t1@@1) h@@2))
)))
(assert  (=> (<= 3 $FunctionContextHeight) (forall ((|cap#0@@3| T@U) ) (!  (=> (or (|_module.__default.IsCapsule#canCall| |cap#0@@3|) (and (< 3 $FunctionContextHeight) ($Is DatatypeTypeType |cap#0@@3| Tclass._module.Capsule))) (and (_module.Capsule.Cap_q |cap#0@@3|) (= (_module.__default.IsCapsule |cap#0@@3|) (_module.Term.TermAbs_q (_module.Capsule.e |cap#0@@3|)))))
 :pattern ( (_module.__default.IsCapsule |cap#0@@3|))
))))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($ly@@0 T@U) (|s#0@@0| T@U) ) (!  (=> (or (|_module.__default.ClosureConvertedMap#canCall| |s#0@@0|) (and (< 2 $FunctionContextHeight) ($Is MapType |s#0@@0| (TMap Tclass._module.Var Tclass._module.ConstOrAbs)))) ($Is DatatypeTypeType (_module.__default.ClosureConvertedMap $ly@@0 |s#0@@0|) Tclass._module.ClEnv))
 :pattern ( (_module.__default.ClosureConvertedMap $ly@@0 |s#0@@0|))
))))
(assert (forall ((|a#5#0#0| T@U) (|a#5#1#0| T@U) ) (! (< (BoxRank |a#5#0#0|) (DtRank (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|))
)))
(assert (forall ((|a#7#0#0| T@U) (|a#7#1#0| T@U) ) (! (< (BoxRank |a#7#1#0|) (DtRank (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|))
)))
(assert (forall ((|a#61#0#0| T@U) (|a#61#1#0| T@U) ) (! (< (DtRank |a#61#0#0|) (DtRank (|#_module.Capsule.Cap| |a#61#0#0| |a#61#1#0|)))
 :pattern ( (|#_module.Capsule.Cap| |a#61#0#0| |a#61#1#0|))
)))
(assert (forall (($ly@@1 T@U) (|s#0@@1| T@U) ) (! (= (_module.__default.ClosureConvertedMap ($LS $ly@@1) |s#0@@1|) (_module.__default.ClosureConvertedMap $ly@@1 |s#0@@1|))
 :pattern ( (_module.__default.ClosureConvertedMap ($LS $ly@@1) |s#0@@1|))
)))
(assert (forall ((u@@2 T@U) ) (!  (not (|Set#IsMember| (|Map#Domain| |Map#Empty|) u@@2))
 :pattern ( (|Set#IsMember| (|Map#Domain| |Map#Empty|) u@@2))
)))
(assert (forall ((bx@@12 T@U) (s T@U) (t@@8 T@U) ) (!  (=> ($IsBox bx@@12 (TMap s t@@8)) (and (= ($Box MapType ($Unbox MapType bx@@12)) bx@@12) ($Is MapType ($Unbox MapType bx@@12) (TMap s t@@8))))
 :pattern ( ($IsBox bx@@12 (TMap s t@@8)))
)))
(assert (forall ((|_System._tuple#2$T0@@4| T@U) (|_System._tuple#2$T1@@4| T@U) (bx@@13 T@U) ) (!  (=> ($IsBox bx@@13 (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@13)) bx@@13) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@13) (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|))))
 :pattern ( ($IsBox bx@@13 (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|)))
)))
(assert (forall ((|a#31#0#0| T@U) ) (! (< (DtRank |a#31#0#0|) (DtRank (|#_module.Term.TermAbs| |a#31#0#0|)))
 :pattern ( (|#_module.Term.TermAbs| |a#31#0#0|))
)))
(assert (forall ((|a#75#0#0| T@U) ) (! (< (DtRank |a#75#0#0|) (DtRank (|#_module.ConstOrAbs.AA| |a#75#0#0|)))
 :pattern ( (|#_module.ConstOrAbs.AA| |a#75#0#0|))
)))
(assert  (and (and (and (and (and (and (forall ((t0@@4 T@T) (t1@@2 T@T) (t2 T@T) (val@@1 T@U) (m@@2 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@4 t1@@2 t2 (MapType1Store t0@@4 t1@@2 t2 m@@2 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@3 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@3 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@3 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@4 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@4 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@4 y0@@1 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 7)) (= (Ctor FieldType) 8)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 9))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0@@1| T@U) (|l#1@@1| T@U) (|l#2@@0| T@U) (|l#3@@0| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0@@1| |l#1@@1| |l#2@@0| |l#3@@0|) $o $f))  (=> (and (or (not (= $o |l#0@@1|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1@@1| $o) |l#2@@0|)))) |l#3@@0|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0@@1| |l#1@@1| |l#2@@0| |l#3@@0|) $o $f))
)))
(assert (forall ((|_System._tuple#2$T0@@5| T@U) (|_System._tuple#2$T1@@5| T@U) ) (!  (and (= (Tag (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|)) Tagclass._System.Tuple2) (= (TagFamily (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|)) |tytagFamily$_tuple#2|))
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|))
)))
(assert (forall ((d@@29 T@U) ) (!  (=> ($Is DatatypeTypeType d@@29 Tclass._module.Term) (or (or (_module.Term.TermConst_q d@@29) (_module.Term.TermVar_q d@@29)) (_module.Term.TermAbs_q d@@29)))
 :pattern ( (_module.Term.TermAbs_q d@@29) ($Is DatatypeTypeType d@@29 Tclass._module.Term))
 :pattern ( (_module.Term.TermVar_q d@@29) ($Is DatatypeTypeType d@@29 Tclass._module.Term))
 :pattern ( (_module.Term.TermConst_q d@@29) ($Is DatatypeTypeType d@@29 Tclass._module.Term))
)))
(assert (forall ((m@@5 T@U) ) (!  (or (= m@@5 |Map#Empty|) (exists ((k T@U) ) (|Set#IsMember| (|Map#Domain| m@@5) k)))
 :pattern ( (|Map#Domain| m@@5))
)))
(assert (forall ((m@@6 T@U) ) (!  (or (= m@@6 |Map#Empty|) (exists ((v@@5 T@U) ) (|Set#IsMember| (|Map#Values| m@@6) v@@5)))
 :pattern ( (|Map#Values| m@@6))
)))
(assert (forall ((m@@7 T@U) (item T@U) ) (! (= (|Set#IsMember| (|Map#Items| m@@7) item)  (and (|Set#IsMember| (|Map#Domain| m@@7) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (= (MapType0Select BoxType BoxType (|Map#Elements| m@@7) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item)))))
 :pattern ( (|Set#IsMember| (|Map#Items| m@@7) item))
)))
(assert (forall ((m@@8 T@U) (v@@6 T@U) ) (! (= (|Set#IsMember| (|Map#Values| m@@8) v@@6) (exists ((u@@3 T@U) ) (!  (and (|Set#IsMember| (|Map#Domain| m@@8) u@@3) (= v@@6 (MapType0Select BoxType BoxType (|Map#Elements| m@@8) u@@3)))
 :pattern ( (|Set#IsMember| (|Map#Domain| m@@8) u@@3))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| m@@8) u@@3))
)))
 :pattern ( (|Set#IsMember| (|Map#Values| m@@8) v@@6))
)))
(assert (forall ((d@@30 T@U) ) (! (= (BoxRank ($Box DatatypeTypeType d@@30)) (DtRank d@@30))
 :pattern ( (BoxRank ($Box DatatypeTypeType d@@30)))
)))
(assert (forall ((bx@@14 T@U) (t@@9 T@U) ) (!  (=> ($IsBox bx@@14 (TSet t@@9)) (and (= ($Box SetType ($Unbox SetType bx@@14)) bx@@14) ($Is SetType ($Unbox SetType bx@@14) (TSet t@@9))))
 :pattern ( ($IsBox bx@@14 (TSet t@@9)))
)))
(assert (forall ((v@@7 T@U) (t0@@5 T@U) (t1@@3 T@U) ) (! (= ($Is MapType v@@7 (TMap t0@@5 t1@@3)) (forall ((bx@@15 T@U) ) (!  (=> (|Set#IsMember| (|Map#Domain| v@@7) bx@@15) (and ($IsBox (MapType0Select BoxType BoxType (|Map#Elements| v@@7) bx@@15) t1@@3) ($IsBox bx@@15 t0@@5)))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| v@@7) bx@@15))
 :pattern ( (|Set#IsMember| (|Map#Domain| v@@7) bx@@15))
)))
 :pattern ( ($Is MapType v@@7 (TMap t0@@5 t1@@3)))
)))
(assert (forall ((d@@31 T@U) ($h@@2 T@U) ) (!  (=> (and ($IsGoodHeap $h@@2) ($Is DatatypeTypeType d@@31 Tclass._module.Term)) ($IsAlloc DatatypeTypeType d@@31 Tclass._module.Term $h@@2))
 :pattern ( ($IsAlloc DatatypeTypeType d@@31 Tclass._module.Term $h@@2))
)))
(assert (forall ((d@@32 T@U) ($h@@3 T@U) ) (!  (=> (and ($IsGoodHeap $h@@3) ($Is DatatypeTypeType d@@32 Tclass._module.LambdaAbs)) ($IsAlloc DatatypeTypeType d@@32 Tclass._module.LambdaAbs $h@@3))
 :pattern ( ($IsAlloc DatatypeTypeType d@@32 Tclass._module.LambdaAbs $h@@3))
)))
(assert (forall ((d@@33 T@U) ($h@@4 T@U) ) (!  (=> (and ($IsGoodHeap $h@@4) ($Is DatatypeTypeType d@@33 Tclass._module.Val)) ($IsAlloc DatatypeTypeType d@@33 Tclass._module.Val $h@@4))
 :pattern ( ($IsAlloc DatatypeTypeType d@@33 Tclass._module.Val $h@@4))
)))
(assert (forall ((d@@34 T@U) ($h@@5 T@U) ) (!  (=> (and ($IsGoodHeap $h@@5) ($Is DatatypeTypeType d@@34 Tclass._module.Cl)) ($IsAlloc DatatypeTypeType d@@34 Tclass._module.Cl $h@@5))
 :pattern ( ($IsAlloc DatatypeTypeType d@@34 Tclass._module.Cl $h@@5))
)))
(assert (forall ((d@@35 T@U) ($h@@6 T@U) ) (!  (=> (and ($IsGoodHeap $h@@6) ($Is DatatypeTypeType d@@35 Tclass._module.ClEnv)) ($IsAlloc DatatypeTypeType d@@35 Tclass._module.ClEnv $h@@6))
 :pattern ( ($IsAlloc DatatypeTypeType d@@35 Tclass._module.ClEnv $h@@6))
)))
(assert (forall ((d@@36 T@U) ($h@@7 T@U) ) (!  (=> (and ($IsGoodHeap $h@@7) ($Is DatatypeTypeType d@@36 Tclass._module.Capsule)) ($IsAlloc DatatypeTypeType d@@36 Tclass._module.Capsule $h@@7))
 :pattern ( ($IsAlloc DatatypeTypeType d@@36 Tclass._module.Capsule $h@@7))
)))
(assert (forall ((d@@37 T@U) ($h@@8 T@U) ) (!  (=> (and ($IsGoodHeap $h@@8) ($Is DatatypeTypeType d@@37 Tclass._module.ConstOrAbs)) ($IsAlloc DatatypeTypeType d@@37 Tclass._module.ConstOrAbs $h@@8))
 :pattern ( ($IsAlloc DatatypeTypeType d@@37 Tclass._module.ConstOrAbs $h@@8))
)))
(assert (= (Tag Tclass._module.ClEnv) Tagclass._module.ClEnv))
(assert (= (TagFamily Tclass._module.ClEnv) tytagFamily$ClEnv))
(assert (= (Tag Tclass._module.Val) Tagclass._module.Val))
(assert (= (TagFamily Tclass._module.Val) tytagFamily$Val))
(assert (= (Tag Tclass._module.Capsule) Tagclass._module.Capsule))
(assert (= (TagFamily Tclass._module.Capsule) tytagFamily$Capsule))
(assert (= (Tag Tclass._module.Cl) Tagclass._module.Cl))
(assert (= (TagFamily Tclass._module.Cl) tytagFamily$Cl))
(assert (= (Tag Tclass._module.ConstOrAbs) Tagclass._module.ConstOrAbs))
(assert (= (TagFamily Tclass._module.ConstOrAbs) tytagFamily$ConstOrAbs))
(assert (= (Tag Tclass._module.Term) Tagclass._module.Term))
(assert (= (TagFamily Tclass._module.Term) tytagFamily$Term))
(assert (= (Tag Tclass._module.LambdaAbs) Tagclass._module.LambdaAbs))
(assert (= (TagFamily Tclass._module.LambdaAbs) tytagFamily$LambdaAbs))
(assert (forall ((|a#63#0#0| T@U) (|a#63#1#0| T@U) (d@@38 T@U) ) (!  (=> (|Set#IsMember| (|Map#Domain| |a#63#1#0|) ($Box DatatypeTypeType d@@38)) (< (DtRank d@@38) (DtRank (|#_module.Capsule.Cap| |a#63#0#0| |a#63#1#0|))))
 :pattern ( (|Set#IsMember| (|Map#Domain| |a#63#1#0|) ($Box DatatypeTypeType d@@38)) (|#_module.Capsule.Cap| |a#63#0#0| |a#63#1#0|))
)))
(assert (forall ((d@@39 T@U) (|_System._tuple#2$T0@@6| T@U) ($h@@9 T@U) ) (!  (=> (and ($IsGoodHeap $h@@9) (and (_System.Tuple2.___hMake2_q d@@39) (exists ((|_System._tuple#2$T1@@6| T@U) ) (! ($IsAlloc DatatypeTypeType d@@39 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@9)
 :pattern ( ($IsAlloc DatatypeTypeType d@@39 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@9))
)))) ($IsAllocBox (_System.Tuple2._0 d@@39) |_System._tuple#2$T0@@6| $h@@9))
 :pattern ( ($IsAllocBox (_System.Tuple2._0 d@@39) |_System._tuple#2$T0@@6| $h@@9))
)))
(assert (forall ((d@@40 T@U) (|_System._tuple#2$T1@@7| T@U) ($h@@10 T@U) ) (!  (=> (and ($IsGoodHeap $h@@10) (and (_System.Tuple2.___hMake2_q d@@40) (exists ((|_System._tuple#2$T0@@7| T@U) ) (! ($IsAlloc DatatypeTypeType d@@40 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|) $h@@10)
 :pattern ( ($IsAlloc DatatypeTypeType d@@40 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|) $h@@10))
)))) ($IsAllocBox (_System.Tuple2._1 d@@40) |_System._tuple#2$T1@@7| $h@@10))
 :pattern ( ($IsAllocBox (_System.Tuple2._1 d@@40) |_System._tuple#2$T1@@7| $h@@10))
)))
(assert (forall ((d@@41 T@U) ($h@@11 T@U) ) (!  (=> (and ($IsGoodHeap $h@@11) (and (_module.Term.TermConst_q d@@41) ($IsAlloc DatatypeTypeType d@@41 Tclass._module.Term $h@@11))) ($IsAllocBox (_module.Term._h0 d@@41) Tclass._module.Const $h@@11))
 :pattern ( ($IsAllocBox (_module.Term._h0 d@@41) Tclass._module.Const $h@@11))
)))
(assert (forall ((d@@42 T@U) ($h@@12 T@U) ) (!  (=> (and ($IsGoodHeap $h@@12) (and (_module.Term.TermVar_q d@@42) ($IsAlloc DatatypeTypeType d@@42 Tclass._module.Term $h@@12))) ($IsAllocBox (_module.Term._h1 d@@42) Tclass._module.Var $h@@12))
 :pattern ( ($IsAllocBox (_module.Term._h1 d@@42) Tclass._module.Var $h@@12))
)))
(assert (forall ((d@@43 T@U) ($h@@13 T@U) ) (!  (=> (and ($IsGoodHeap $h@@13) (and (_module.Term.TermAbs_q d@@43) ($IsAlloc DatatypeTypeType d@@43 Tclass._module.Term $h@@13))) ($IsAlloc DatatypeTypeType (_module.Term.abs d@@43) Tclass._module.LambdaAbs $h@@13))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.Term.abs d@@43) Tclass._module.LambdaAbs $h@@13))
)))
(assert (forall ((d@@44 T@U) ($h@@14 T@U) ) (!  (=> (and ($IsGoodHeap $h@@14) (and (_module.Val.ValConst_q d@@44) ($IsAlloc DatatypeTypeType d@@44 Tclass._module.Val $h@@14))) ($IsAllocBox (_module.Val._h2 d@@44) Tclass._module.Const $h@@14))
 :pattern ( ($IsAllocBox (_module.Val._h2 d@@44) Tclass._module.Const $h@@14))
)))
(assert (forall ((d@@45 T@U) ($h@@15 T@U) ) (!  (=> (and ($IsGoodHeap $h@@15) (and (_module.Val.ValCl_q d@@45) ($IsAlloc DatatypeTypeType d@@45 Tclass._module.Val $h@@15))) ($IsAlloc DatatypeTypeType (_module.Val.cl d@@45) Tclass._module.Cl $h@@15))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.Val.cl d@@45) Tclass._module.Cl $h@@15))
)))
(assert (forall ((d@@46 T@U) ($h@@16 T@U) ) (!  (=> (and ($IsGoodHeap $h@@16) (and (_module.Cl.Closure_q d@@46) ($IsAlloc DatatypeTypeType d@@46 Tclass._module.Cl $h@@16))) ($IsAlloc DatatypeTypeType (_module.Cl.abs d@@46) Tclass._module.LambdaAbs $h@@16))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.Cl.abs d@@46) Tclass._module.LambdaAbs $h@@16))
)))
(assert (forall ((d@@47 T@U) ($h@@17 T@U) ) (!  (=> (and ($IsGoodHeap $h@@17) (and (_module.Cl.Closure_q d@@47) ($IsAlloc DatatypeTypeType d@@47 Tclass._module.Cl $h@@17))) ($IsAlloc DatatypeTypeType (_module.Cl.env d@@47) Tclass._module.ClEnv $h@@17))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.Cl.env d@@47) Tclass._module.ClEnv $h@@17))
)))
(assert (forall ((d@@48 T@U) ($h@@18 T@U) ) (!  (=> (and ($IsGoodHeap $h@@18) (and (_module.Capsule.Cap_q d@@48) ($IsAlloc DatatypeTypeType d@@48 Tclass._module.Capsule $h@@18))) ($IsAlloc DatatypeTypeType (_module.Capsule.e d@@48) Tclass._module.Term $h@@18))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.Capsule.e d@@48) Tclass._module.Term $h@@18))
)))
(assert (forall ((d@@49 T@U) ($h@@19 T@U) ) (!  (=> (and ($IsGoodHeap $h@@19) (and (_module.ConstOrAbs.CC_q d@@49) ($IsAlloc DatatypeTypeType d@@49 Tclass._module.ConstOrAbs $h@@19))) ($IsAllocBox (_module.ConstOrAbs.c d@@49) Tclass._module.Const $h@@19))
 :pattern ( ($IsAllocBox (_module.ConstOrAbs.c d@@49) Tclass._module.Const $h@@19))
)))
(assert (forall ((d@@50 T@U) ($h@@20 T@U) ) (!  (=> (and ($IsGoodHeap $h@@20) (and (_module.ConstOrAbs.AA_q d@@50) ($IsAlloc DatatypeTypeType d@@50 Tclass._module.ConstOrAbs $h@@20))) ($IsAlloc DatatypeTypeType (_module.ConstOrAbs.abs d@@50) Tclass._module.LambdaAbs $h@@20))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.ConstOrAbs.abs d@@50) Tclass._module.LambdaAbs $h@@20))
)))
(assert (forall ((|a#3#0#0| T@U) (|a#3#1#0| T@U) ) (! (= (|#_System._tuple#2._#Make2| (Lit BoxType |a#3#0#0|) (Lit BoxType |a#3#1#0|)) (Lit DatatypeTypeType (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| (Lit BoxType |a#3#0#0|) (Lit BoxType |a#3#1#0|)))
)))
(assert (forall ((|a#59#0#0| T@U) (|a#59#1#0| T@U) ) (! (= (|#_module.Capsule.Cap| (Lit DatatypeTypeType |a#59#0#0|) (Lit MapType |a#59#1#0|)) (Lit DatatypeTypeType (|#_module.Capsule.Cap| |a#59#0#0| |a#59#1#0|)))
 :pattern ( (|#_module.Capsule.Cap| (Lit DatatypeTypeType |a#59#0#0|) (Lit MapType |a#59#1#0|)))
)))
(assert (forall ((|a#19#0#0| T@U) ) (! (= (|#_module.Term.TermConst| (Lit BoxType |a#19#0#0|)) (Lit DatatypeTypeType (|#_module.Term.TermConst| |a#19#0#0|)))
 :pattern ( (|#_module.Term.TermConst| (Lit BoxType |a#19#0#0|)))
)))
(assert (forall ((|a#24#0#0| T@U) ) (! (= (|#_module.Term.TermVar| (Lit BoxType |a#24#0#0|)) (Lit DatatypeTypeType (|#_module.Term.TermVar| |a#24#0#0|)))
 :pattern ( (|#_module.Term.TermVar| (Lit BoxType |a#24#0#0|)))
)))
(assert (forall ((|a#29#0#0| T@U) ) (! (= (|#_module.Term.TermAbs| (Lit DatatypeTypeType |a#29#0#0|)) (Lit DatatypeTypeType (|#_module.Term.TermAbs| |a#29#0#0|)))
 :pattern ( (|#_module.Term.TermAbs| (Lit DatatypeTypeType |a#29#0#0|)))
)))
(assert (forall ((|a#68#0#0| T@U) ) (! (= (|#_module.ConstOrAbs.CC| (Lit BoxType |a#68#0#0|)) (Lit DatatypeTypeType (|#_module.ConstOrAbs.CC| |a#68#0#0|)))
 :pattern ( (|#_module.ConstOrAbs.CC| (Lit BoxType |a#68#0#0|)))
)))
(assert (forall ((|a#73#0#0| T@U) ) (! (= (|#_module.ConstOrAbs.AA| (Lit DatatypeTypeType |a#73#0#0|)) (Lit DatatypeTypeType (|#_module.ConstOrAbs.AA| |a#73#0#0|)))
 :pattern ( (|#_module.ConstOrAbs.AA| (Lit DatatypeTypeType |a#73#0#0|)))
)))
(assert (forall ((x@@5 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@5)) (Lit BoxType ($Box T@@4 x@@5)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@5)))
)))
(assert (forall ((m@@9 T@U) ) (!  (or (= m@@9 |Map#Empty|) (exists ((k@@0 T@U) (v@@8 T@U) ) (|Set#IsMember| (|Map#Items| m@@9) ($Box DatatypeTypeType (|#_System._tuple#2._#Make2| k@@0 v@@8)))))
 :pattern ( (|Map#Items| m@@9))
)))
(assert (forall ((v@@9 T@U) (t0@@6 T@U) (t1@@4 T@U) ) (!  (=> ($Is MapType v@@9 (TMap t0@@6 t1@@4)) (and (and ($Is SetType (|Map#Domain| v@@9) (TSet t0@@6)) ($Is SetType (|Map#Values| v@@9) (TSet t1@@4))) ($Is SetType (|Map#Items| v@@9) (TSet (Tclass._System.Tuple2 t0@@6 t1@@4)))))
 :pattern ( ($Is MapType v@@9 (TMap t0@@6 t1@@4)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |cap#0@@4| () T@U)
(declare-fun $_ReadsFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $Heap () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 5) (let ((anon5_Else_correct  (=> (and (_module.Capsule.Cap_q |cap#0@@4|) (= (ControlFlow 0 3) (- 0 2))) (_module.Term.TermAbs_q (_module.Capsule.e |cap#0@@4|)))))
(let ((anon5_Then_correct true))
(let ((anon0_correct  (=> (and (and (= $_ReadsFrame@0 (|lambda#0| null $Heap alloc false)) ($IsAlloc DatatypeTypeType |cap#0@@4| Tclass._module.Capsule $Heap)) (and (|_module.__default.IsCapsule#canCall| |cap#0@@4|) (_module.__default.IsCapsule |cap#0@@4|))) (and (=> (= (ControlFlow 0 4) 1) anon5_Then_correct) (=> (= (ControlFlow 0 4) 3) anon5_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) ($Is DatatypeTypeType |cap#0@@4| Tclass._module.Capsule)) (and (= 4 $FunctionContextHeight) (= (ControlFlow 0 5) 4))) anon0_correct)))
PreconditionGeneratedEntry_correct)))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
