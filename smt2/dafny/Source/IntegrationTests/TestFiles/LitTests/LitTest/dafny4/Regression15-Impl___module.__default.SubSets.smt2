(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 (T@U) T@U)
(declare-fun $generated@@20 (T@U T@U) T@U)
(declare-fun $generated@@21 (T@U T@U) Bool)
(declare-fun $generated@@30 () T@U)
(declare-fun $generated@@32 (T@U T@U) Bool)
(declare-fun $generated@@33 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@34 () T@T)
(declare-fun $generated@@35 () T@T)
(declare-fun $generated@@36 () T@T)
(declare-fun $generated@@37 (T@T T@T) T@T)
(declare-fun $generated@@38 (T@T T@U) T@U)
(declare-fun $generated@@39 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@40 (T@T) T@T)
(declare-fun $generated@@41 (T@T) T@T)
(declare-fun $generated@@62 (Int) Int)
(declare-fun $generated@@64 (T@T T@U) T@U)
(declare-fun $generated@@67 (T@T T@U) T@U)
(declare-fun $generated@@70 (T@T T@U T@U) Bool)
(declare-fun $generated@@71 () T@T)
(declare-fun $generated@@72 (T@U) T@U)
(declare-fun $generated@@73 (T@U T@U) Bool)
(declare-fun $generated@@77 (T@U T@U T@U) Bool)
(declare-fun $generated@@78 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@103 (T@U) T@U)
(declare-fun $generated@@108 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@109 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@110 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (= ($generated@@19 $generated) $generated@@0))
(assert (forall (($generated@@22 T@U) ($generated@@23 T@U) ) (! ($generated@@21 ($generated@@20 $generated@@22 $generated@@23) $generated@@23)
 :pattern ( ($generated@@20 $generated@@22 $generated@@23))
)))
(assert (forall (($generated@@24 T@U) ($generated@@25 T@U) ($generated@@26 T@U) ) (!  (=> ($generated@@21 $generated@@24 $generated@@26) ($generated@@21 ($generated@@20 $generated@@24 $generated@@25) $generated@@26))
 :pattern ( ($generated@@20 $generated@@24 $generated@@25) ($generated@@21 $generated@@24 $generated@@26))
)))
(assert (forall (($generated@@27 T@U) ($generated@@28 T@U) ($generated@@29 T@U) ) (! (= ($generated@@21 ($generated@@20 $generated@@27 $generated@@28) $generated@@29)  (or (= $generated@@29 $generated@@28) ($generated@@21 $generated@@27 $generated@@29)))
 :pattern ( ($generated@@21 ($generated@@20 $generated@@27 $generated@@28) $generated@@29))
)))
(assert (forall (($generated@@31 T@U) ) (!  (not ($generated@@21 $generated@@30 $generated@@31))
 :pattern ( ($generated@@21 $generated@@30 $generated@@31))
)))
(assert  (and (and (and (and (and (and (and (forall (($generated@@42 T@T) ($generated@@43 T@T) ($generated@@44 T@U) ($generated@@45 T@U) ($generated@@46 T@U) ) (! (= ($generated@@33 $generated@@42 $generated@@43 ($generated@@39 $generated@@42 $generated@@43 $generated@@45 $generated@@46 $generated@@44) $generated@@46) $generated@@44)
 :weight 0
)) (forall (($generated@@47 T@T) ($generated@@48 T@T) ($generated@@49 T@U) ($generated@@50 T@U) ($generated@@51 T@U) ($generated@@52 T@U) ) (!  (or (= $generated@@51 $generated@@52) (= ($generated@@33 $generated@@47 $generated@@48 ($generated@@39 $generated@@47 $generated@@48 $generated@@50 $generated@@51 $generated@@49) $generated@@52) ($generated@@33 $generated@@47 $generated@@48 $generated@@50 $generated@@52)))
 :weight 0
))) (= ($generated@@3 $generated@@34) 3)) (= ($generated@@3 $generated@@35) 4)) (= ($generated@@3 $generated@@36) 5)) (forall (($generated@@53 T@T) ($generated@@54 T@T) ) (= ($generated@@3 ($generated@@37 $generated@@53 $generated@@54)) 6))) (forall (($generated@@55 T@T) ($generated@@56 T@T) ) (! (= ($generated@@40 ($generated@@37 $generated@@55 $generated@@56)) $generated@@55)
 :pattern ( ($generated@@37 $generated@@55 $generated@@56))
))) (forall (($generated@@57 T@T) ($generated@@58 T@T) ) (! (= ($generated@@41 ($generated@@37 $generated@@57 $generated@@58)) $generated@@58)
 :pattern ( ($generated@@37 $generated@@57 $generated@@58))
))))
(assert (forall (($generated@@59 T@U) ($generated@@60 T@U) ) (!  (=> ($generated@@32 $generated@@59 $generated@@60) (forall (($generated@@61 T@U) ) (!  (=> ($generated@@8 ($generated@@38 $generated@@4 ($generated@@33 $generated@@34 $generated@@35 ($generated@@33 $generated@@36 ($generated@@37 $generated@@34 $generated@@35) $generated@@59 $generated@@61) $generated@@2))) ($generated@@8 ($generated@@38 $generated@@4 ($generated@@33 $generated@@34 $generated@@35 ($generated@@33 $generated@@36 ($generated@@37 $generated@@34 $generated@@35) $generated@@60 $generated@@61) $generated@@2))))
 :pattern ( ($generated@@33 $generated@@34 $generated@@35 ($generated@@33 $generated@@36 ($generated@@37 $generated@@34 $generated@@35) $generated@@60 $generated@@61) $generated@@2))
)))
 :pattern ( ($generated@@32 $generated@@59 $generated@@60))
)))
(assert (forall (($generated@@63 Int) ) (! (= ($generated@@62 $generated@@63) $generated@@63)
 :pattern ( ($generated@@62 $generated@@63))
)))
(assert (forall (($generated@@65 T@U) ($generated@@66 T@T) ) (! (= ($generated@@64 $generated@@66 $generated@@65) $generated@@65)
 :pattern ( ($generated@@64 $generated@@66 $generated@@65))
)))
(assert (forall (($generated@@68 T@U) ($generated@@69 T@T) ) (! (= ($generated@@67 $generated@@69 ($generated@@38 $generated@@69 $generated@@68)) $generated@@68)
 :pattern ( ($generated@@38 $generated@@69 $generated@@68))
)))
(assert (= ($generated@@3 $generated@@71) 7))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@U) ) (! (= ($generated@@70 $generated@@71 $generated@@74 ($generated@@72 $generated@@75)) (forall (($generated@@76 T@U) ) (!  (=> ($generated@@21 $generated@@74 $generated@@76) ($generated@@73 $generated@@76 $generated@@75))
 :pattern ( ($generated@@21 $generated@@74 $generated@@76))
)))
 :pattern ( ($generated@@70 $generated@@71 $generated@@74 ($generated@@72 $generated@@75)))
)))
(assert (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@T) ) (! (= ($generated@@77 ($generated@@67 $generated@@82 $generated@@79) $generated@@80 $generated@@81) ($generated@@78 $generated@@82 $generated@@79 $generated@@80 $generated@@81))
 :pattern ( ($generated@@77 ($generated@@67 $generated@@82 $generated@@79) $generated@@80 $generated@@81))
)))
(assert (forall (($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (!  (=> ($generated@@32 $generated@@83 $generated@@84) (=> ($generated@@77 $generated@@85 $generated@@86 $generated@@83) ($generated@@77 $generated@@85 $generated@@86 $generated@@84)))
 :pattern ( ($generated@@32 $generated@@83 $generated@@84) ($generated@@77 $generated@@85 $generated@@86 $generated@@83))
)))
(assert (forall (($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@T) ) (!  (=> ($generated@@32 $generated@@87 $generated@@88) (=> ($generated@@78 $generated@@91 $generated@@89 $generated@@90 $generated@@87) ($generated@@78 $generated@@91 $generated@@89 $generated@@90 $generated@@88)))
 :pattern ( ($generated@@32 $generated@@87 $generated@@88) ($generated@@78 $generated@@91 $generated@@89 $generated@@90 $generated@@87))
)))
(assert (forall (($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (!  (=> (or (not (= $generated@@92 $generated@@94)) (not true)) (=> (and ($generated@@32 $generated@@92 $generated@@93) ($generated@@32 $generated@@93 $generated@@94)) ($generated@@32 $generated@@92 $generated@@94)))
 :pattern ( ($generated@@32 $generated@@92 $generated@@93) ($generated@@32 $generated@@93 $generated@@94))
)))
(assert (forall (($generated@@95 T@U) ) (!  (=> ($generated@@73 $generated@@95 $generated) (and (= ($generated@@67 $generated@@5 ($generated@@38 $generated@@5 $generated@@95)) $generated@@95) ($generated@@70 $generated@@5 ($generated@@38 $generated@@5 $generated@@95) $generated)))
 :pattern ( ($generated@@73 $generated@@95 $generated))
)))
(assert (forall (($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@T) ) (! (= ($generated@@73 ($generated@@67 $generated@@98 $generated@@96) $generated@@97) ($generated@@70 $generated@@98 $generated@@96 $generated@@97))
 :pattern ( ($generated@@73 ($generated@@67 $generated@@98 $generated@@96) $generated@@97))
)))
(assert (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ) (! (= ($generated@@78 $generated@@71 $generated@@99 ($generated@@72 $generated@@100) $generated@@101) (forall (($generated@@102 T@U) ) (!  (=> ($generated@@21 $generated@@99 $generated@@102) ($generated@@77 $generated@@102 $generated@@100 $generated@@101))
 :pattern ( ($generated@@21 $generated@@99 $generated@@102))
)))
 :pattern ( ($generated@@78 $generated@@71 $generated@@99 ($generated@@72 $generated@@100) $generated@@101))
)))
(assert (forall (($generated@@104 T@U) ) (! (= ($generated@@103 ($generated@@72 $generated@@104)) $generated@@104)
 :pattern ( ($generated@@72 $generated@@104))
)))
(assert (forall (($generated@@105 T@U) ) (! (= ($generated@@19 ($generated@@72 $generated@@105)) $generated@@1)
 :pattern ( ($generated@@72 $generated@@105))
)))
(assert (forall (($generated@@106 T@U) ($generated@@107 T@T) ) (! (= ($generated@@38 $generated@@107 ($generated@@67 $generated@@107 $generated@@106)) $generated@@106)
 :pattern ( ($generated@@67 $generated@@107 $generated@@106))
)))
(assert  (and (forall (($generated@@111 T@T) ($generated@@112 T@T) ($generated@@113 T@T) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ) (! (= ($generated@@108 $generated@@111 $generated@@112 $generated@@113 ($generated@@110 $generated@@111 $generated@@112 $generated@@113 $generated@@115 $generated@@116 $generated@@117 $generated@@114) $generated@@116 $generated@@117) $generated@@114)
 :weight 0
)) (and (forall (($generated@@118 T@T) ($generated@@119 T@T) ($generated@@120 T@T) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ) (!  (or (= $generated@@123 $generated@@125) (= ($generated@@108 $generated@@118 $generated@@119 $generated@@120 ($generated@@110 $generated@@118 $generated@@119 $generated@@120 $generated@@122 $generated@@123 $generated@@124 $generated@@121) $generated@@125 $generated@@126) ($generated@@108 $generated@@118 $generated@@119 $generated@@120 $generated@@122 $generated@@125 $generated@@126)))
 :weight 0
)) (forall (($generated@@127 T@T) ($generated@@128 T@T) ($generated@@129 T@T) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ) (!  (or (= $generated@@133 $generated@@135) (= ($generated@@108 $generated@@127 $generated@@128 $generated@@129 ($generated@@110 $generated@@127 $generated@@128 $generated@@129 $generated@@131 $generated@@132 $generated@@133 $generated@@130) $generated@@134 $generated@@135) ($generated@@108 $generated@@127 $generated@@128 $generated@@129 $generated@@131 $generated@@134 $generated@@135)))
 :weight 0
)))))
(assert (forall (($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 Bool) ($generated@@140 T@U) ($generated@@141 T@U) ) (! (= ($generated@@8 ($generated@@108 $generated@@36 $generated@@34 $generated@@4 ($generated@@109 $generated@@136 $generated@@137 $generated@@138 $generated@@139) $generated@@140 $generated@@141))  (=> (and (or (not (= $generated@@140 $generated@@136)) (not true)) ($generated@@8 ($generated@@38 $generated@@4 ($generated@@33 $generated@@34 $generated@@35 ($generated@@33 $generated@@36 ($generated@@37 $generated@@34 $generated@@35) $generated@@137 $generated@@140) $generated@@138)))) $generated@@139))
 :pattern ( ($generated@@108 $generated@@36 $generated@@34 $generated@@4 ($generated@@109 $generated@@136 $generated@@137 $generated@@138 $generated@@139) $generated@@140 $generated@@141))
)))
(assert (forall (($generated@@142 T@U) ($generated@@143 T@U) ) (!  (=> ($generated@@73 $generated@@142 ($generated@@72 $generated@@143)) (and (= ($generated@@67 $generated@@71 ($generated@@38 $generated@@71 $generated@@142)) $generated@@142) ($generated@@70 $generated@@71 ($generated@@38 $generated@@71 $generated@@142) ($generated@@72 $generated@@143))))
 :pattern ( ($generated@@73 $generated@@142 ($generated@@72 $generated@@143)))
)))
(assert (forall (($generated@@144 Int) ) (! (= ($generated@@67 $generated@@5 ($generated@@9 ($generated@@62 $generated@@144))) ($generated@@64 $generated@@35 ($generated@@67 $generated@@5 ($generated@@9 $generated@@144))))
 :pattern ( ($generated@@67 $generated@@5 ($generated@@9 ($generated@@62 $generated@@144))))
)))
(assert (forall (($generated@@145 T@U) ($generated@@146 T@T) ) (! (= ($generated@@67 $generated@@146 ($generated@@64 $generated@@146 $generated@@145)) ($generated@@64 $generated@@35 ($generated@@67 $generated@@146 $generated@@145)))
 :pattern ( ($generated@@67 $generated@@146 ($generated@@64 $generated@@146 $generated@@145)))
)))
(assert (forall (($generated@@147 T@U) ($generated@@148 T@U) ) (! ($generated@@78 $generated@@5 $generated@@148 $generated $generated@@147)
 :pattern ( ($generated@@78 $generated@@5 $generated@@148 $generated $generated@@147))
)))
(assert (forall (($generated@@149 T@U) ) (! ($generated@@70 $generated@@5 $generated@@149 $generated)
 :pattern ( ($generated@@70 $generated@@5 $generated@@149 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 2) true)
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
