(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@20 () T@U)
(declare-fun $generated@@23 (T@U) Int)
(declare-fun $generated@@24 () T@U)
(declare-fun $generated@@25 (Int) Int)
(declare-fun $generated@@27 (T@T T@U) T@U)
(declare-fun $generated@@30 (T@U T@U) Bool)
(declare-fun $generated@@31 (T@U Int) T@U)
(declare-fun $generated@@35 (T@T T@U) T@U)
(declare-fun $generated@@36 (T@T T@U) T@U)
(declare-fun $generated@@39 () Int)
(declare-fun $generated@@40 (T@U T@U) T@U)
(declare-fun $generated@@41 (T@U T@U) Bool)
(declare-fun $generated@@42 (T@T T@U T@U) Bool)
(declare-fun $generated@@43 () T@T)
(declare-fun $generated@@44 (T@U) T@U)
(declare-fun $generated@@47 (T@U T@U T@U) Bool)
(declare-fun $generated@@52 (T@U T@U) T@U)
(declare-fun $generated@@53 (T@U T@U) Bool)
(declare-fun $generated@@56 (T@U T@U) Bool)
(declare-fun $generated@@60 (T@U) Bool)
(declare-fun $generated@@72 (T@U) T@U)
(declare-fun $generated@@74 (T@U) T@U)
(declare-fun $generated@@81 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@82 () T@T)
(declare-fun $generated@@83 () T@T)
(declare-fun $generated@@84 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@85 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@86 () T@T)
(declare-fun $generated@@87 (T@T T@T) T@T)
(declare-fun $generated@@88 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@89 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@90 (T@T) T@T)
(declare-fun $generated@@91 (T@T) T@T)
(declare-fun $generated@@142 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (forall (($generated@@21 T@U) ($generated@@22 T@U) ) (! ($generated@@19 $generated@@5 $generated@@21 $generated@@20 $generated@@22)
 :pattern ( ($generated@@19 $generated@@5 $generated@@21 $generated@@20 $generated@@22))
)))
(assert (= ($generated@@23 $generated@@24) 0))
(assert (forall (($generated@@26 Int) ) (! (= ($generated@@25 $generated@@26) $generated@@26)
 :pattern ( ($generated@@25 $generated@@26))
)))
(assert (forall (($generated@@28 T@U) ($generated@@29 T@T) ) (! (= ($generated@@27 $generated@@29 $generated@@28) $generated@@28)
 :pattern ( ($generated@@27 $generated@@29 $generated@@28))
)))
(assert (forall (($generated@@32 T@U) ($generated@@33 T@U) ) (! (= ($generated@@30 $generated@@32 $generated@@33)  (and (= ($generated@@23 $generated@@32) ($generated@@23 $generated@@33)) (forall (($generated@@34 Int) ) (!  (=> (and (<= 0 $generated@@34) (< $generated@@34 ($generated@@23 $generated@@32))) (= ($generated@@31 $generated@@32 $generated@@34) ($generated@@31 $generated@@33 $generated@@34)))
 :pattern ( ($generated@@31 $generated@@32 $generated@@34))
 :pattern ( ($generated@@31 $generated@@33 $generated@@34))
))))
 :pattern ( ($generated@@30 $generated@@32 $generated@@33))
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@T) ) (! (= ($generated@@36 $generated@@38 ($generated@@35 $generated@@38 $generated@@37)) $generated@@37)
 :pattern ( ($generated@@35 $generated@@38 $generated@@37))
)))
(assert (= ($generated@@3 $generated@@43) 3))
(assert  (=> (<= 0 $generated@@39) (forall (($generated@@45 T@U) ($generated@@46 T@U) ) (!  (=> (or ($generated@@41 $generated@@45 $generated@@46) (and (< 0 $generated@@39) ($generated@@42 $generated@@43 $generated@@46 ($generated@@44 $generated@@45)))) ($generated@@42 $generated@@43 ($generated@@40 $generated@@45 $generated@@46) ($generated@@44 $generated@@45)))
 :pattern ( ($generated@@40 $generated@@45 $generated@@46))
))))
(assert (forall (($generated@@48 T@U) ($generated@@49 T@U) ($generated@@50 T@U) ($generated@@51 T@T) ) (! (= ($generated@@47 ($generated@@36 $generated@@51 $generated@@48) $generated@@49 $generated@@50) ($generated@@19 $generated@@51 $generated@@48 $generated@@49 $generated@@50))
 :pattern ( ($generated@@47 ($generated@@36 $generated@@51 $generated@@48) $generated@@49 $generated@@50))
)))
(assert  (=> (<= 0 $generated@@39) (forall (($generated@@54 T@U) ($generated@@55 T@U) ) (!  (=> (or ($generated@@53 $generated@@54 $generated@@55) (and (< 0 $generated@@39) ($generated@@42 $generated@@43 $generated@@55 ($generated@@44 ($generated@@44 $generated@@54))))) ($generated@@42 $generated@@43 ($generated@@52 $generated@@54 $generated@@55) ($generated@@44 $generated@@54)))
 :pattern ( ($generated@@52 $generated@@54 $generated@@55))
))))
(assert (forall (($generated@@57 T@U) ) (!  (=> ($generated@@56 $generated@@57 $generated@@20) (and (= ($generated@@36 $generated@@5 ($generated@@35 $generated@@5 $generated@@57)) $generated@@57) ($generated@@42 $generated@@5 ($generated@@35 $generated@@5 $generated@@57) $generated@@20)))
 :pattern ( ($generated@@56 $generated@@57 $generated@@20))
)))
(assert (forall (($generated@@58 T@U) ($generated@@59 T@U) ) (!  (=> ($generated@@30 $generated@@58 $generated@@59) (= $generated@@58 $generated@@59))
 :pattern ( ($generated@@30 $generated@@58 $generated@@59))
)))
(assert  (=> (<= 0 $generated@@39) (forall (($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@U) ) (!  (=> (and (or ($generated@@53 $generated@@62 $generated@@63) (and (< 0 $generated@@39) (and ($generated@@42 $generated@@43 $generated@@63 ($generated@@44 ($generated@@44 $generated@@62))) ($generated@@19 $generated@@43 $generated@@63 ($generated@@44 ($generated@@44 $generated@@62)) $generated@@61)))) ($generated@@60 $generated@@61)) ($generated@@19 $generated@@43 ($generated@@52 $generated@@62 $generated@@63) ($generated@@44 $generated@@62) $generated@@61))
 :pattern ( ($generated@@19 $generated@@43 ($generated@@52 $generated@@62 $generated@@63) ($generated@@44 $generated@@62) $generated@@61))
))))
(assert (forall (($generated@@64 T@U) ($generated@@65 T@U) ($generated@@66 T@T) ) (! (= ($generated@@56 ($generated@@36 $generated@@66 $generated@@64) $generated@@65) ($generated@@42 $generated@@66 $generated@@64 $generated@@65))
 :pattern ( ($generated@@56 ($generated@@36 $generated@@66 $generated@@64) $generated@@65))
)))
(assert (forall (($generated@@67 T@U) ) (! (<= 0 ($generated@@23 $generated@@67))
 :pattern ( ($generated@@23 $generated@@67))
)))
(assert (forall (($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ) (! (= ($generated@@19 $generated@@43 $generated@@68 ($generated@@44 $generated@@69) $generated@@70) (forall (($generated@@71 Int) ) (!  (=> (and (<= 0 $generated@@71) (< $generated@@71 ($generated@@23 $generated@@68))) ($generated@@47 ($generated@@31 $generated@@68 $generated@@71) $generated@@69 $generated@@70))
 :pattern ( ($generated@@31 $generated@@68 $generated@@71))
)))
 :pattern ( ($generated@@19 $generated@@43 $generated@@68 ($generated@@44 $generated@@69) $generated@@70))
)))
(assert (forall (($generated@@73 T@U) ) (! (= ($generated@@72 ($generated@@44 $generated@@73)) $generated@@73)
 :pattern ( ($generated@@44 $generated@@73))
)))
(assert (forall (($generated@@75 T@U) ) (! (= ($generated@@74 ($generated@@44 $generated@@75)) $generated)
 :pattern ( ($generated@@44 $generated@@75))
)))
(assert (forall (($generated@@76 T@U) ($generated@@77 T@T) ) (! (= ($generated@@35 $generated@@77 ($generated@@36 $generated@@77 $generated@@76)) $generated@@76)
 :pattern ( ($generated@@36 $generated@@77 $generated@@76))
)))
(assert  (=> (<= 0 $generated@@39) (forall (($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ) (!  (=> (and (or ($generated@@41 $generated@@79 $generated@@80) (and (< 0 $generated@@39) (and ($generated@@42 $generated@@43 $generated@@80 ($generated@@44 $generated@@79)) ($generated@@19 $generated@@43 $generated@@80 ($generated@@44 $generated@@79) $generated@@78)))) ($generated@@60 $generated@@78)) ($generated@@19 $generated@@43 ($generated@@40 $generated@@79 $generated@@80) ($generated@@44 $generated@@79) $generated@@78))
 :pattern ( ($generated@@19 $generated@@43 ($generated@@40 $generated@@79 $generated@@80) ($generated@@44 $generated@@79) $generated@@78))
))))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@92 T@T) ($generated@@93 T@T) ($generated@@94 T@T) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ) (! (= ($generated@@81 $generated@@92 $generated@@93 $generated@@94 ($generated@@88 $generated@@92 $generated@@93 $generated@@94 $generated@@96 $generated@@97 $generated@@98 $generated@@95) $generated@@97 $generated@@98) $generated@@95)
 :weight 0
)) (and (forall (($generated@@99 T@T) ($generated@@100 T@T) ($generated@@101 T@T) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ) (!  (or (= $generated@@104 $generated@@106) (= ($generated@@81 $generated@@99 $generated@@100 $generated@@101 ($generated@@88 $generated@@99 $generated@@100 $generated@@101 $generated@@103 $generated@@104 $generated@@105 $generated@@102) $generated@@106 $generated@@107) ($generated@@81 $generated@@99 $generated@@100 $generated@@101 $generated@@103 $generated@@106 $generated@@107)))
 :weight 0
)) (forall (($generated@@108 T@T) ($generated@@109 T@T) ($generated@@110 T@T) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ) (!  (or (= $generated@@114 $generated@@116) (= ($generated@@81 $generated@@108 $generated@@109 $generated@@110 ($generated@@88 $generated@@108 $generated@@109 $generated@@110 $generated@@112 $generated@@113 $generated@@114 $generated@@111) $generated@@115 $generated@@116) ($generated@@81 $generated@@108 $generated@@109 $generated@@110 $generated@@112 $generated@@115 $generated@@116)))
 :weight 0
)))) (= ($generated@@3 $generated@@82) 4)) (= ($generated@@3 $generated@@83) 5)) (forall (($generated@@117 T@T) ($generated@@118 T@T) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ) (! (= ($generated@@85 $generated@@117 $generated@@118 ($generated@@89 $generated@@117 $generated@@118 $generated@@120 $generated@@121 $generated@@119) $generated@@121) $generated@@119)
 :weight 0
))) (forall (($generated@@122 T@T) ($generated@@123 T@T) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 T@U) ) (!  (or (= $generated@@126 $generated@@127) (= ($generated@@85 $generated@@122 $generated@@123 ($generated@@89 $generated@@122 $generated@@123 $generated@@125 $generated@@126 $generated@@124) $generated@@127) ($generated@@85 $generated@@122 $generated@@123 $generated@@125 $generated@@127)))
 :weight 0
))) (= ($generated@@3 $generated@@86) 6)) (forall (($generated@@128 T@T) ($generated@@129 T@T) ) (= ($generated@@3 ($generated@@87 $generated@@128 $generated@@129)) 7))) (forall (($generated@@130 T@T) ($generated@@131 T@T) ) (! (= ($generated@@90 ($generated@@87 $generated@@130 $generated@@131)) $generated@@130)
 :pattern ( ($generated@@87 $generated@@130 $generated@@131))
))) (forall (($generated@@132 T@T) ($generated@@133 T@T) ) (! (= ($generated@@91 ($generated@@87 $generated@@132 $generated@@133)) $generated@@133)
 :pattern ( ($generated@@87 $generated@@132 $generated@@133))
))))
(assert (forall (($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 Bool) ($generated@@138 T@U) ($generated@@139 T@U) ) (! (= ($generated@@8 ($generated@@81 $generated@@82 $generated@@83 $generated@@4 ($generated@@84 $generated@@134 $generated@@135 $generated@@136 $generated@@137) $generated@@138 $generated@@139))  (=> (and (or (not (= $generated@@138 $generated@@134)) (not true)) ($generated@@8 ($generated@@35 $generated@@4 ($generated@@85 $generated@@83 $generated@@86 ($generated@@85 $generated@@82 ($generated@@87 $generated@@83 $generated@@86) $generated@@135 $generated@@138) $generated@@136)))) $generated@@137))
 :pattern ( ($generated@@81 $generated@@82 $generated@@83 $generated@@4 ($generated@@84 $generated@@134 $generated@@135 $generated@@136 $generated@@137) $generated@@138 $generated@@139))
)))
(assert (forall (($generated@@140 T@U) ($generated@@141 T@U) ) (!  (=> ($generated@@56 $generated@@140 ($generated@@44 $generated@@141)) (and (= ($generated@@36 $generated@@43 ($generated@@35 $generated@@43 $generated@@140)) $generated@@140) ($generated@@42 $generated@@43 ($generated@@35 $generated@@43 $generated@@140) ($generated@@44 $generated@@141))))
 :pattern ( ($generated@@56 $generated@@140 ($generated@@44 $generated@@141)))
)))
(assert (= ($generated@@74 $generated@@20) $generated@@1))
(assert (= ($generated@@142 $generated@@20) $generated@@2))
(assert (forall (($generated@@143 T@U) ) (! (= ($generated@@42 $generated@@5 $generated@@143 $generated@@20)  (and (<= ($generated@@25 0) ($generated@@10 $generated@@143)) (< ($generated@@10 $generated@@143) 4294967296)))
 :pattern ( ($generated@@42 $generated@@5 $generated@@143 $generated@@20))
)))
(assert (forall (($generated@@144 Int) ) (! (= ($generated@@36 $generated@@5 ($generated@@9 ($generated@@25 $generated@@144))) ($generated@@27 $generated@@86 ($generated@@36 $generated@@5 ($generated@@9 $generated@@144))))
 :pattern ( ($generated@@36 $generated@@5 ($generated@@9 ($generated@@25 $generated@@144))))
)))
(assert (forall (($generated@@145 T@U) ($generated@@146 T@T) ) (! (= ($generated@@36 $generated@@146 ($generated@@27 $generated@@146 $generated@@145)) ($generated@@27 $generated@@86 ($generated@@36 $generated@@146 $generated@@145)))
 :pattern ( ($generated@@36 $generated@@146 ($generated@@27 $generated@@146 $generated@@145)))
)))
(assert (forall (($generated@@147 T@U) ) (!  (=> (= ($generated@@23 $generated@@147) 0) (= $generated@@147 $generated@@24))
 :pattern ( ($generated@@23 $generated@@147))
)))
(assert (forall (($generated@@148 T@U) ($generated@@149 T@U) ) (! (= ($generated@@42 $generated@@43 $generated@@148 ($generated@@44 $generated@@149)) (forall (($generated@@150 Int) ) (!  (=> (and (<= 0 $generated@@150) (< $generated@@150 ($generated@@23 $generated@@148))) ($generated@@56 ($generated@@31 $generated@@148 $generated@@150) $generated@@149))
 :pattern ( ($generated@@31 $generated@@148 $generated@@150))
)))
 :pattern ( ($generated@@42 $generated@@43 $generated@@148 ($generated@@44 $generated@@149)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@151 () T@U)
(declare-fun $generated@@152 () T@U)
(declare-fun $generated@@153 () T@U)
(declare-fun $generated@@154 () T@U)
(declare-fun $generated@@155 (T@U) Bool)
(declare-fun $generated@@156 () T@U)
(declare-fun $generated@@157 () T@U)
(declare-fun $generated@@158 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 6) (let (($generated@@159 true))
(let (($generated@@160  (=> (and ($generated@@19 $generated@@43 $generated@@151 ($generated@@44 ($generated@@44 $generated@@20)) $generated@@152) ($generated@@53 $generated@@20 $generated@@151)) (=> (and (and ($generated@@53 $generated@@20 $generated@@151) (= $generated@@153 $generated@@20)) (and ($generated@@60 $generated@@154) ($generated@@155 $generated@@154))) (=> (and (and (and (and ($generated@@53 $generated@@153 $generated@@151) (and ($generated@@41 ($generated@@44 $generated@@153) $generated@@151) ($generated@@53 $generated@@153 ($generated@@40 ($generated@@44 $generated@@153) $generated@@151)))) ($generated@@30 ($generated@@52 $generated@@153 $generated@@151) ($generated@@52 $generated@@153 ($generated@@40 ($generated@@44 $generated@@153) $generated@@151)))) (and (= $generated@@152 $generated@@154) ($generated@@19 $generated@@43 $generated@@151 ($generated@@44 ($generated@@44 $generated@@20)) $generated@@154))) (and (and (and ($generated@@41 ($generated@@44 $generated@@20) $generated@@151) (= $generated@@156 ($generated@@40 ($generated@@44 $generated@@20) $generated@@151))) (and ($generated@@19 $generated@@43 $generated@@156 ($generated@@44 ($generated@@44 $generated@@20)) $generated@@154) ($generated@@53 $generated@@20 ($generated@@40 ($generated@@44 $generated@@20) $generated@@151)))) (and (and ($generated@@41 ($generated@@44 $generated@@20) $generated@@151) ($generated@@53 $generated@@20 ($generated@@40 ($generated@@44 $generated@@20) $generated@@151))) (= (ControlFlow 0 3) (- 0 2))))) ($generated@@30 ($generated@@52 $generated@@20 $generated@@151) ($generated@@52 $generated@@20 ($generated@@40 ($generated@@44 $generated@@20) $generated@@151))))))))
(let (($generated@@161 true))
(let (($generated@@162  (=> (= $generated@@157 ($generated@@84 $generated@@158 $generated@@152 $generated@@0 false)) (and (and (=> (= (ControlFlow 0 5) 1) $generated@@161) (=> (= (ControlFlow 0 5) 3) $generated@@160)) (=> (= (ControlFlow 0 5) 4) $generated@@159)))))
(let (($generated@@163  (=> (and ($generated@@60 $generated@@152) ($generated@@155 $generated@@152)) (=> (and (and ($generated@@42 $generated@@43 $generated@@151 ($generated@@44 ($generated@@44 $generated@@20))) ($generated@@19 $generated@@43 $generated@@151 ($generated@@44 ($generated@@44 $generated@@20)) $generated@@152)) (and (= 2 $generated@@39) (= (ControlFlow 0 6) 5))) $generated@@162))))
$generated@@163))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
