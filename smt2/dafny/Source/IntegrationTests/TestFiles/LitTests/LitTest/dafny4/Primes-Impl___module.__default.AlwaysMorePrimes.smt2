(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagSet () T@U)
(declare-fun alloc () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun |Set#Empty| () T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.AllPrimes (T@U Int) Bool)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun SetType () T@T)
(declare-fun LitInt (Int) Int)
(declare-fun |_module.__default.AllPrimes#canCall| (T@U Int) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun TSet (T@U) T@U)
(declare-fun _module.__default.IsPrime (Int) Bool)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun |_module.__default.IsPrime#canCall| (Int) Bool)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun |Set#FromBoogieMap| (T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Mod (Int Int) Int)
(declare-fun |lambda#2| (T@U Int Int) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt TagSet alloc)
)
(assert (= (Tag TInt) TagInt))
(assert (forall ((o T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o))
 :pattern ( (|Set#IsMember| |Set#Empty| o))
)))
(assert (= (Ctor SetType) 3))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|s#0| T@U) (|bound#0| Int) ) (!  (=> (or (|_module.__default.AllPrimes#canCall| (Lit SetType |s#0|) (LitInt |bound#0|)) (and (< 1 $FunctionContextHeight) ($Is SetType |s#0| (TSet TInt)))) (and (and (forall ((|x#1| Int) ) (!  (=> (|Set#IsMember| (Lit SetType |s#0|) ($Box intType (int_2_U |x#1|))) (|_module.__default.IsPrime#canCall| |x#1|))
 :pattern ( (_module.__default.IsPrime |x#1|))
 :pattern ( (|Set#IsMember| |s#0| ($Box intType (int_2_U |x#1|))))
)) (=> (forall ((|x#1@@0| Int) ) (!  (=> (|Set#IsMember| (Lit SetType |s#0|) ($Box intType (int_2_U |x#1@@0|))) (_module.__default.IsPrime |x#1@@0|))
 :pattern ( (_module.__default.IsPrime |x#1@@0|))
 :pattern ( (|Set#IsMember| |s#0| ($Box intType (int_2_U |x#1@@0|))))
)) (forall ((|p#1| Int) ) (! (|_module.__default.IsPrime#canCall| |p#1|)
 :pattern ( (|Set#IsMember| |s#0| ($Box intType (int_2_U |p#1|))))
 :pattern ( (_module.__default.IsPrime |p#1|))
)))) (= (_module.__default.AllPrimes (Lit SetType |s#0|) (LitInt |bound#0|))  (and (forall ((|x#1@@1| Int) ) (!  (=> (|Set#IsMember| (Lit SetType |s#0|) ($Box intType (int_2_U |x#1@@1|))) (_module.__default.IsPrime |x#1@@1|))
 :pattern ( (_module.__default.IsPrime |x#1@@1|))
 :pattern ( (|Set#IsMember| |s#0| ($Box intType (int_2_U |x#1@@1|))))
)) (forall ((|p#1@@0| Int) ) (!  (=> (and (_module.__default.IsPrime |p#1@@0|) (<= |p#1@@0| (LitInt |bound#0|))) (|Set#IsMember| (Lit SetType |s#0|) ($Box intType (int_2_U |p#1@@0|))))
 :pattern ( (|Set#IsMember| |s#0| ($Box intType (int_2_U |p#1@@0|))))
 :pattern ( (_module.__default.IsPrime |p#1@@0|))
))))))
 :weight 3
 :pattern ( (_module.__default.AllPrimes (Lit SetType |s#0|) (LitInt |bound#0|)))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|s#0@@0| T@U) (|bound#0@@0| Int) ) (!  (=> (or (|_module.__default.AllPrimes#canCall| |s#0@@0| |bound#0@@0|) (and (< 1 $FunctionContextHeight) ($Is SetType |s#0@@0| (TSet TInt)))) (and (and (forall ((|x#0| Int) ) (!  (=> (|Set#IsMember| |s#0@@0| ($Box intType (int_2_U |x#0|))) (|_module.__default.IsPrime#canCall| |x#0|))
 :pattern ( (_module.__default.IsPrime |x#0|))
 :pattern ( (|Set#IsMember| |s#0@@0| ($Box intType (int_2_U |x#0|))))
)) (=> (forall ((|x#0@@0| Int) ) (!  (=> (|Set#IsMember| |s#0@@0| ($Box intType (int_2_U |x#0@@0|))) (_module.__default.IsPrime |x#0@@0|))
 :pattern ( (_module.__default.IsPrime |x#0@@0|))
 :pattern ( (|Set#IsMember| |s#0@@0| ($Box intType (int_2_U |x#0@@0|))))
)) (forall ((|p#0| Int) ) (! (|_module.__default.IsPrime#canCall| |p#0|)
 :pattern ( (|Set#IsMember| |s#0@@0| ($Box intType (int_2_U |p#0|))))
 :pattern ( (_module.__default.IsPrime |p#0|))
)))) (= (_module.__default.AllPrimes |s#0@@0| |bound#0@@0|)  (and (forall ((|x#0@@1| Int) ) (!  (=> (|Set#IsMember| |s#0@@0| ($Box intType (int_2_U |x#0@@1|))) (_module.__default.IsPrime |x#0@@1|))
 :pattern ( (_module.__default.IsPrime |x#0@@1|))
 :pattern ( (|Set#IsMember| |s#0@@0| ($Box intType (int_2_U |x#0@@1|))))
)) (forall ((|p#0@@0| Int) ) (!  (=> (and (_module.__default.IsPrime |p#0@@0|) (<= |p#0@@0| |bound#0@@0|)) (|Set#IsMember| |s#0@@0| ($Box intType (int_2_U |p#0@@0|))))
 :pattern ( (|Set#IsMember| |s#0@@0| ($Box intType (int_2_U |p#0@@0|))))
 :pattern ( (_module.__default.IsPrime |p#0@@0|))
))))))
 :pattern ( (_module.__default.AllPrimes |s#0@@0| |bound#0@@0|))
))))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert  (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor BoxType) 4)))
(assert (forall ((m@@1 T@U) (bx T@U) ) (! (= (|Set#IsMember| (|Set#FromBoogieMap| m@@1) bx) (U_2_bool (MapType0Select BoxType boolType m@@1 bx)))
 :pattern ( (|Set#IsMember| (|Set#FromBoogieMap| m@@1) bx))
)))
(assert (forall ((v T@U) (t0@@0 T@U) ) (! (= ($Is SetType v (TSet t0@@0)) (forall ((bx@@0 T@U) ) (!  (=> (|Set#IsMember| v bx@@0) ($IsBox bx@@0 t0@@0))
 :pattern ( (|Set#IsMember| v bx@@0))
)))
 :pattern ( ($Is SetType v (TSet t0@@0)))
)))
(assert (forall ((v@@0 T@U) (t T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t h) ($IsAlloc T@@1 v@@0 t h))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t h))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|n#0| Int) ) (!  (=> (or (|_module.__default.IsPrime#canCall| |n#0|) (< 0 $FunctionContextHeight)) (= (_module.__default.IsPrime |n#0|)  (and (<= (LitInt 2) |n#0|) (forall ((|m#0| Int) ) (!  (=> (and (<= (LitInt 2) |m#0|) (< |m#0| |n#0|)) (or (not (= (Mod |n#0| |m#0|) 0)) (not true)))
 :pattern ( (Mod |n#0| |m#0|))
)))))
 :pattern ( (_module.__default.IsPrime |n#0|))
))))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 TInt) (and (= ($Box intType ($Unbox intType bx@@1)) bx@@1) ($Is intType ($Unbox intType bx@@1) TInt)))
 :pattern ( ($IsBox bx@@1 TInt))
)))
(assert (forall ((v@@1 T@U) (t@@0 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@1) t@@0) ($Is T@@2 v@@1 t@@0))
 :pattern ( ($IsBox ($Box T@@2 v@@1) t@@0))
)))
(assert (forall ((v@@2 T@U) (t0@@1 T@U) (h@@0 T@U) ) (! (= ($IsAlloc SetType v@@2 (TSet t0@@1) h@@0) (forall ((bx@@2 T@U) ) (!  (=> (|Set#IsMember| v@@2 bx@@2) ($IsAllocBox bx@@2 t0@@1 h@@0))
 :pattern ( (|Set#IsMember| v@@2 bx@@2))
)))
 :pattern ( ($IsAlloc SetType v@@2 (TSet t0@@1) h@@0))
)))
(assert (forall ((|l#0| T@U) (|l#1| Int) (|l#2| Int) (|$y#0_0| T@U) ) (! (= (U_2_bool (MapType0Select BoxType boolType (|lambda#2| |l#0| |l#1| |l#2|) |$y#0_0|))  (and ($IsBox |$y#0_0| |l#0|) (and (and (<= |l#1| (U_2_int ($Unbox intType |$y#0_0|))) (<= (U_2_int ($Unbox intType |$y#0_0|)) |l#2|)) (_module.__default.IsPrime (U_2_int ($Unbox intType |$y#0_0|))))))
 :pattern ( (MapType0Select BoxType boolType (|lambda#2| |l#0| |l#1| |l#2|) |$y#0_0|))
)))
(assert (forall ((t@@1 T@U) ) (! (= (Inv0_TSet (TSet t@@1)) t@@1)
 :pattern ( (TSet t@@1))
)))
(assert (forall ((t@@2 T@U) ) (! (= (Tag (TSet t@@2)) TagSet)
 :pattern ( (TSet t@@2))
)))
(assert (forall ((x@@5 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@5)) x@@5)
 :pattern ( ($Box T@@3 x@@5))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|n#0@@0| Int) ) (!  (=> (or (|_module.__default.IsPrime#canCall| (LitInt |n#0@@0|)) (< 0 $FunctionContextHeight)) (= (_module.__default.IsPrime (LitInt |n#0@@0|))  (and (<= (LitInt 2) (LitInt |n#0@@0|)) (forall ((|m#1| Int) ) (!  (=> (and (<= (LitInt 2) |m#1|) (< |m#1| |n#0@@0|)) (or (not (= (Mod |n#0@@0| |m#1|) 0)) (not true)))
 :pattern ( (Mod |n#0@@0| |m#1|))
)))))
 :weight 3
 :pattern ( (_module.__default.IsPrime (LitInt |n#0@@0|)))
))))
(assert  (and (and (and (and (and (and (forall ((t0@@2 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@2 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@2 t1@@0 t2 (MapType1Store t0@@2 t1@@0 t2 m@@2 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@3 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@3 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@3 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@4 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@4 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@4 y0@@1 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 5)) (= (Ctor FieldType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0@@0| T@U) (|l#1@@0| T@U) (|l#2@@0| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0@@0| |l#1@@0| |l#2@@0| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0@@0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1@@0| $o) |l#2@@0|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0@@0| |l#1@@0| |l#2@@0| |l#3|) $o $f))
)))
(assert (forall ((x@@6 Int) (y Int) ) (! (= (Mod x@@6 y) (mod x@@6 y))
 :pattern ( (Mod x@@6 y))
)))
(assert (forall ((bx@@3 T@U) (t@@3 T@U) ) (!  (=> ($IsBox bx@@3 (TSet t@@3)) (and (= ($Box SetType ($Unbox SetType bx@@3)) bx@@3) ($Is SetType ($Unbox SetType bx@@3) (TSet t@@3))))
 :pattern ( ($IsBox bx@@3 (TSet t@@3)))
)))
(assert (forall ((x@@7 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@7))) (Lit BoxType ($Box intType (int_2_U x@@7))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@7))))
)))
(assert (forall ((x@@8 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@8)) (Lit BoxType ($Box T@@4 x@@8)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@8)))
)))
(assert (forall ((h@@1 T@U) (v@@3 T@U) ) (! ($IsAlloc intType v@@3 TInt h@@1)
 :pattern ( ($IsAlloc intType v@@3 TInt h@@1))
)))
(assert (forall ((v@@4 T@U) ) (! ($Is intType v@@4 TInt)
 :pattern ( ($Is intType v@@4 TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |k#0| () Int)
(declare-fun |call3formal@p#0@0| () Int)
(declare-fun |$rhs#0_1@1| () T@U)
(declare-fun |$decr$loop#00@1| () Int)
(declare-fun |$w$loop#0@0| () Bool)
(declare-fun |x#0_0@1| () Int)
(declare-fun $Heap@1 () T@U)
(declare-fun |j#0@0| () Int)
(declare-fun |s#0@0| () T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun $Heap@0 () T@U)
(declare-fun |$rhs#0@0| () Int)
(declare-fun $Heap () T@U)
(declare-fun null () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun |$decr_init$loop#00@0| () Int)
(declare-fun |$rhs#1@0| () T@U)
(declare-fun |s#0@@1| () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 30) (let ((GeneratedUnifiedExit_correct  (=> (= (ControlFlow 0 18) (- 0 17)) (exists ((|p#1@@1| Int) ) (!  (and (<= |k#0| |p#1@@1|) (_module.__default.IsPrime |p#1@@1|))
 :pattern ( (_module.__default.IsPrime |p#1@@1|))
)))))
(let ((anon20_Then_correct  (=> (and (<= |k#0| |call3formal@p#0@0|) (= (ControlFlow 0 20) 18)) GeneratedUnifiedExit_correct)))
(let ((anon19_Then_correct  (=> (and (not (U_2_bool (Lit boolType (bool_2_U true)))) (= (ControlFlow 0 19) 18)) GeneratedUnifiedExit_correct)))
(let ((anon16_correct  (=> (and (forall ((|x#0_1| Int) ) (!  (=> (and (<= (LitInt 2) |x#0_1|) (<= |x#0_1| |call3formal@p#0@0|)) (|_module.__default.IsPrime#canCall| |x#0_1|))
 :pattern ( (_module.__default.IsPrime |x#0_1|))
)) (= |$rhs#0_1@1| (|Set#FromBoogieMap| (|lambda#2| TInt (LitInt 2) |call3formal@p#0@0|)))) (and (=> (= (ControlFlow 0 5) (- 0 8)) (or (<= 0 |$decr$loop#00@1|) (= (- |k#0| |call3formal@p#0@0|) |$decr$loop#00@1|))) (=> (or (<= 0 |$decr$loop#00@1|) (= (- |k#0| |call3formal@p#0@0|) |$decr$loop#00@1|)) (and (=> (= (ControlFlow 0 5) (- 0 7)) (< (- |k#0| |call3formal@p#0@0|) |$decr$loop#00@1|)) (=> (< (- |k#0| |call3formal@p#0@0|) |$decr$loop#00@1|) (=> (|_module.__default.AllPrimes#canCall| |$rhs#0_1@1| |call3formal@p#0@0|) (and (=> (= (ControlFlow 0 5) (- 0 6)) (=> |$w$loop#0@0| (=> (|_module.__default.AllPrimes#canCall| |$rhs#0_1@1| |call3formal@p#0@0|) (or (_module.__default.AllPrimes |$rhs#0_1@1| |call3formal@p#0@0|) (forall ((|x#0@@2| Int) ) (!  (=> (|Set#IsMember| |$rhs#0_1@1| ($Box intType (int_2_U |x#0@@2|))) (_module.__default.IsPrime |x#0@@2|))
 :pattern ( (_module.__default.IsPrime |x#0@@2|))
 :pattern ( (|Set#IsMember| |$rhs#0_1@1| ($Box intType (int_2_U |x#0@@2|))))
)))))) (=> (=> |$w$loop#0@0| (=> (|_module.__default.AllPrimes#canCall| |$rhs#0_1@1| |call3formal@p#0@0|) (or (_module.__default.AllPrimes |$rhs#0_1@1| |call3formal@p#0@0|) (forall ((|x#0@@3| Int) ) (!  (=> (|Set#IsMember| |$rhs#0_1@1| ($Box intType (int_2_U |x#0@@3|))) (_module.__default.IsPrime |x#0@@3|))
 :pattern ( (_module.__default.IsPrime |x#0@@3|))
 :pattern ( (|Set#IsMember| |$rhs#0_1@1| ($Box intType (int_2_U |x#0@@3|))))
))))) (=> (= (ControlFlow 0 5) (- 0 4)) (=> |$w$loop#0@0| (=> (|_module.__default.AllPrimes#canCall| |$rhs#0_1@1| |call3formal@p#0@0|) (or (_module.__default.AllPrimes |$rhs#0_1@1| |call3formal@p#0@0|) (forall ((|p#2| Int) ) (!  (=> (and (_module.__default.IsPrime |p#2|) (<= |p#2| |call3formal@p#0@0|)) (|Set#IsMember| |$rhs#0_1@1| ($Box intType (int_2_U |p#2|))))
 :pattern ( (|Set#IsMember| |$rhs#0_1@1| ($Box intType (int_2_U |p#2|))))
 :pattern ( (_module.__default.IsPrime |p#2|))
))))))))))))))))
(let ((anon24_Else_correct  (=> (and (not (and (and (<= (LitInt 2) |x#0_0@1|) (<= |x#0_0@1| |call3formal@p#0@0|)) (_module.__default.IsPrime |x#0_0@1|))) (= (ControlFlow 0 10) 5)) anon16_correct)))
(let ((anon24_Then_correct  (=> (and (and (and (<= (LitInt 2) |x#0_0@1|) (<= |x#0_0@1| |call3formal@p#0@0|)) (_module.__default.IsPrime |x#0_0@1|)) (= (ControlFlow 0 9) 5)) anon16_correct)))
(let ((anon23_Else_correct  (=> (not (and (<= (LitInt 2) |x#0_0@1|) (<= |x#0_0@1| |call3formal@p#0@0|))) (and (=> (= (ControlFlow 0 12) 9) anon24_Then_correct) (=> (= (ControlFlow 0 12) 10) anon24_Else_correct)))))
(let ((anon23_Then_correct  (=> (and (and (<= (LitInt 2) |x#0_0@1|) (<= |x#0_0@1| |call3formal@p#0@0|)) (and ($IsAlloc intType (int_2_U |x#0_0@1|) TInt $Heap@1) (|_module.__default.IsPrime#canCall| |x#0_0@1|))) (and (=> (= (ControlFlow 0 11) 9) anon24_Then_correct) (=> (= (ControlFlow 0 11) 10) anon24_Else_correct)))))
(let ((anon22_Else_correct  (=> (< |x#0_0@1| (LitInt 2)) (and (=> (= (ControlFlow 0 14) 11) anon23_Then_correct) (=> (= (ControlFlow 0 14) 12) anon23_Else_correct)))))
(let ((anon22_Then_correct  (=> (<= (LitInt 2) |x#0_0@1|) (and (=> (= (ControlFlow 0 13) 11) anon23_Then_correct) (=> (= (ControlFlow 0 13) 12) anon23_Else_correct)))))
(let ((anon21_Then_correct  (and (=> (= (ControlFlow 0 15) 13) anon22_Then_correct) (=> (= (ControlFlow 0 15) 14) anon22_Else_correct))))
(let ((anon21_Else_correct true))
(let ((anon20_Else_correct  (=> (< |call3formal@p#0@0| |k#0|) (and (=> (= (ControlFlow 0 16) 15) anon21_Then_correct) (=> (= (ControlFlow 0 16) 3) anon21_Else_correct)))))
(let ((anon19_Else_correct  (=> (and (U_2_bool (Lit boolType (bool_2_U true))) (= |$decr$loop#00@1| (- |k#0| |j#0@0|))) (and (=> (= (ControlFlow 0 21) (- 0 23)) (=> (|_module.__default.AllPrimes#canCall| |s#0@0| |j#0@0|) (or (_module.__default.AllPrimes |s#0@0| |j#0@0|) (forall ((|x#0@@4| Int) ) (!  (=> (|Set#IsMember| |s#0@0| ($Box intType (int_2_U |x#0@@4|))) (_module.__default.IsPrime |x#0@@4|))
 :pattern ( (_module.__default.IsPrime |x#0@@4|))
 :pattern ( (|Set#IsMember| |s#0@0| ($Box intType (int_2_U |x#0@@4|))))
))))) (=> (=> (|_module.__default.AllPrimes#canCall| |s#0@0| |j#0@0|) (or (_module.__default.AllPrimes |s#0@0| |j#0@0|) (forall ((|x#0@@5| Int) ) (!  (=> (|Set#IsMember| |s#0@0| ($Box intType (int_2_U |x#0@@5|))) (_module.__default.IsPrime |x#0@@5|))
 :pattern ( (_module.__default.IsPrime |x#0@@5|))
 :pattern ( (|Set#IsMember| |s#0@0| ($Box intType (int_2_U |x#0@@5|))))
)))) (and (=> (= (ControlFlow 0 21) (- 0 22)) (=> (|_module.__default.AllPrimes#canCall| |s#0@0| |j#0@0|) (or (_module.__default.AllPrimes |s#0@0| |j#0@0|) (forall ((|p#1@@2| Int) ) (!  (=> (and (_module.__default.IsPrime |p#1@@2|) (<= |p#1@@2| |j#0@0|)) (|Set#IsMember| |s#0@0| ($Box intType (int_2_U |p#1@@2|))))
 :pattern ( (|Set#IsMember| |s#0@0| ($Box intType (int_2_U |p#1@@2|))))
 :pattern ( (_module.__default.IsPrime |p#1@@2|))
))))) (=> (=> (|_module.__default.AllPrimes#canCall| |s#0@0| |j#0@0|) (or (_module.__default.AllPrimes |s#0@0| |j#0@0|) (forall ((|p#1@@3| Int) ) (!  (=> (and (_module.__default.IsPrime |p#1@@3|) (<= |p#1@@3| |j#0@0|)) (|Set#IsMember| |s#0@0| ($Box intType (int_2_U |p#1@@3|))))
 :pattern ( (|Set#IsMember| |s#0@0| ($Box intType (int_2_U |p#1@@3|))))
 :pattern ( (_module.__default.IsPrime |p#1@@3|))
)))) (=> (and (and (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1)) (and (=> (< |j#0@0| |call3formal@p#0@0|) (|_module.__default.IsPrime#canCall| |call3formal@p#0@0|)) (< |j#0@0| |call3formal@p#0@0|))) (and (and (|_module.__default.IsPrime#canCall| |call3formal@p#0@0|) (and (_module.__default.IsPrime |call3formal@p#0@0|) (and (<= (LitInt 2) |call3formal@p#0@0|) (forall ((|m#0@@0| Int) ) (!  (=> (and (<= (LitInt 2) |m#0@@0|) (< |m#0@@0| |call3formal@p#0@0|)) (or (not (= (Mod |call3formal@p#0@0| |m#0@@0|) 0)) (not true)))
 :pattern ( (Mod |call3formal@p#0@0| |m#0@@0|))
))))) (= $Heap@0 $Heap@1))) (and (=> (= (ControlFlow 0 21) 20) anon20_Then_correct) (=> (= (ControlFlow 0 21) 16) anon20_Else_correct))))))))))
(let ((anon18_Else_correct  (=> |$w$loop#0@0| (and (=> (= (ControlFlow 0 24) 19) anon19_Then_correct) (=> (= (ControlFlow 0 24) 21) anon19_Else_correct)))))
(let ((anon18_Then_correct true))
(let ((anon17_LoopBody_correct  (and (=> (= (ControlFlow 0 25) 2) anon18_Then_correct) (=> (= (ControlFlow 0 25) 24) anon18_Else_correct))))
(let ((anon17_LoopDone_correct true))
(let ((anon17_LoopHead_correct  (=> (and (and ($Is SetType |s#0@0| (TSet TInt)) ($IsAlloc SetType |s#0@0| (TSet TInt) $Heap@0)) (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0))) (=> (and (and (and (and (and (not false) (<= 0 |j#0@0|)) (= |$rhs#0@0| 0)) (=> |$w$loop#0@0| (|_module.__default.AllPrimes#canCall| |s#0@0| |j#0@0|))) (and (=> |$w$loop#0@0| (=> (|_module.__default.AllPrimes#canCall| |s#0@0| |j#0@0|) (or (_module.__default.AllPrimes |s#0@0| |j#0@0|) (forall ((|x#0@@6| Int) ) (!  (=> (|Set#IsMember| |s#0@0| ($Box intType (int_2_U |x#0@@6|))) (_module.__default.IsPrime |x#0@@6|))
 :pattern ( (_module.__default.IsPrime |x#0@@6|))
 :pattern ( (|Set#IsMember| |s#0@0| ($Box intType (int_2_U |x#0@@6|))))
))))) (=> |$w$loop#0@0| (=> (|_module.__default.AllPrimes#canCall| |s#0@0| |j#0@0|) (or (_module.__default.AllPrimes |s#0@0| |j#0@0|) (forall ((|p#2@@0| Int) ) (!  (=> (and (_module.__default.IsPrime |p#2@@0|) (<= |p#2@@0| |j#0@0|)) (|Set#IsMember| |s#0@0| ($Box intType (int_2_U |p#2@@0|))))
 :pattern ( (|Set#IsMember| |s#0@0| ($Box intType (int_2_U |p#2@@0|))))
 :pattern ( (_module.__default.IsPrime |p#2@@0|))
))))))) (and (and (=> |$w$loop#0@0| (and (|_module.__default.AllPrimes#canCall| |s#0@0| |j#0@0|) (and (_module.__default.AllPrimes |s#0@0| |j#0@0|) (and (forall ((|x#0@@7| Int) ) (!  (=> (|Set#IsMember| |s#0@0| ($Box intType (int_2_U |x#0@@7|))) (_module.__default.IsPrime |x#0@@7|))
 :pattern ( (_module.__default.IsPrime |x#0@@7|))
 :pattern ( (|Set#IsMember| |s#0@0| ($Box intType (int_2_U |x#0@@7|))))
)) (forall ((|p#2@@1| Int) ) (!  (=> (and (_module.__default.IsPrime |p#2@@1|) (<= |p#2@@1| |j#0@0|)) (|Set#IsMember| |s#0@0| ($Box intType (int_2_U |p#2@@1|))))
 :pattern ( (|Set#IsMember| |s#0@0| ($Box intType (int_2_U |p#2@@1|))))
 :pattern ( (_module.__default.IsPrime |p#2@@1|))
)))))) (= $Heap $Heap@0)) (and (forall (($o@@0 T@U) ($f@@0 T@U) ) (!  (=> (and (or (not (= $o@@0 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@0) alloc)))) (or (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@0) $f@@0) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@0) $f@@0)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@0 $f@@0))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@0) $f@@0))
)) (<= (- |k#0| |j#0@0|) |$decr_init$loop#00@0|)))) (and (=> (= (ControlFlow 0 26) 1) anon17_LoopDone_correct) (=> (= (ControlFlow 0 26) 25) anon17_LoopBody_correct))))))
(let ((anon0_correct  (=> (and (and (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (= |$rhs#0@0| (LitInt 0))) (and (= |$rhs#1@0| (Lit SetType |Set#Empty|)) (= |$decr_init$loop#00@0| (- |k#0| |$rhs#0@0|)))) (and (=> (= (ControlFlow 0 27) (- 0 29)) (=> |$w$loop#0@0| (=> (|_module.__default.AllPrimes#canCall| |$rhs#1@0| |$rhs#0@0|) (or (_module.__default.AllPrimes |$rhs#1@0| |$rhs#0@0|) (forall ((|x#0@@8| Int) ) (!  (=> (|Set#IsMember| |$rhs#1@0| ($Box intType (int_2_U |x#0@@8|))) (_module.__default.IsPrime |x#0@@8|))
 :pattern ( (_module.__default.IsPrime |x#0@@8|))
 :pattern ( (|Set#IsMember| |$rhs#1@0| ($Box intType (int_2_U |x#0@@8|))))
)))))) (=> (=> |$w$loop#0@0| (=> (|_module.__default.AllPrimes#canCall| |$rhs#1@0| |$rhs#0@0|) (or (_module.__default.AllPrimes |$rhs#1@0| |$rhs#0@0|) (forall ((|x#0@@9| Int) ) (!  (=> (|Set#IsMember| |$rhs#1@0| ($Box intType (int_2_U |x#0@@9|))) (_module.__default.IsPrime |x#0@@9|))
 :pattern ( (_module.__default.IsPrime |x#0@@9|))
 :pattern ( (|Set#IsMember| |$rhs#1@0| ($Box intType (int_2_U |x#0@@9|))))
))))) (and (=> (= (ControlFlow 0 27) (- 0 28)) (=> |$w$loop#0@0| (=> (|_module.__default.AllPrimes#canCall| |$rhs#1@0| |$rhs#0@0|) (or (_module.__default.AllPrimes |$rhs#1@0| |$rhs#0@0|) (forall ((|p#2@@2| Int) ) (!  (=> (and (_module.__default.IsPrime |p#2@@2|) (<= |p#2@@2| |$rhs#0@0|)) (|Set#IsMember| |$rhs#1@0| ($Box intType (int_2_U |p#2@@2|))))
 :pattern ( (|Set#IsMember| |$rhs#1@0| ($Box intType (int_2_U |p#2@@2|))))
 :pattern ( (_module.__default.IsPrime |p#2@@2|))
)))))) (=> (=> |$w$loop#0@0| (=> (|_module.__default.AllPrimes#canCall| |$rhs#1@0| |$rhs#0@0|) (or (_module.__default.AllPrimes |$rhs#1@0| |$rhs#0@0|) (forall ((|p#2@@3| Int) ) (!  (=> (and (_module.__default.IsPrime |p#2@@3|) (<= |p#2@@3| |$rhs#0@0|)) (|Set#IsMember| |$rhs#1@0| ($Box intType (int_2_U |p#2@@3|))))
 :pattern ( (|Set#IsMember| |$rhs#1@0| ($Box intType (int_2_U |p#2@@3|))))
 :pattern ( (_module.__default.IsPrime |p#2@@3|))
))))) (=> (= (ControlFlow 0 27) 26) anon17_LoopHead_correct))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (=> (and (and (and ($Is SetType |s#0@@1| (TSet TInt)) ($IsAlloc SetType |s#0@@1| (TSet TInt) $Heap)) true) (and (= 6 $FunctionContextHeight) (= (ControlFlow 0 30) 27))) anon0_correct))))
PreconditionGeneratedEntry_correct))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
