(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun alloc () T@U)
(declare-fun Tagclass._module.day () T@U)
(declare-fun |##_module.day.monday| () T@U)
(declare-fun |##_module.day.tuesday| () T@U)
(declare-fun |##_module.day.wednesday| () T@U)
(declare-fun |##_module.day.thursday| () T@U)
(declare-fun |##_module.day.friday| () T@U)
(declare-fun |##_module.day.saturday| () T@U)
(declare-fun |##_module.day.sunday| () T@U)
(declare-fun tytagFamily$day () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun |#_module.day.monday| () T@U)
(declare-fun |#_module.day.tuesday| () T@U)
(declare-fun |#_module.day.wednesday| () T@U)
(declare-fun |#_module.day.thursday| () T@U)
(declare-fun |#_module.day.friday| () T@U)
(declare-fun |#_module.day.saturday| () T@U)
(declare-fun |#_module.day.sunday| () T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun Tclass._module.day () T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.next__weekday (T@U) T@U)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun |_module.__default.next__weekday#canCall| (T@U) Bool)
(declare-fun _module.day.monday_q (T@U) Bool)
(declare-fun _module.day.tuesday_q (T@U) Bool)
(declare-fun _module.day.wednesday_q (T@U) Bool)
(declare-fun _module.day.thursday_q (T@U) Bool)
(declare-fun _module.day.friday_q (T@U) Bool)
(declare-fun _module.day.saturday_q (T@U) Bool)
(declare-fun |_module.day#Equal| (T@U T@U) Bool)
(declare-fun |$IsA#_module.day| (T@U) Bool)
(declare-fun _module.day.sunday_q (T@U) Bool)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun Tag (T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct alloc Tagclass._module.day |##_module.day.monday| |##_module.day.tuesday| |##_module.day.wednesday| |##_module.day.thursday| |##_module.day.friday| |##_module.day.saturday| |##_module.day.sunday| tytagFamily$day)
)
(assert (= (DatatypeCtorId |#_module.day.monday|) |##_module.day.monday|))
(assert (= (DatatypeCtorId |#_module.day.tuesday|) |##_module.day.tuesday|))
(assert (= (DatatypeCtorId |#_module.day.wednesday|) |##_module.day.wednesday|))
(assert (= (DatatypeCtorId |#_module.day.thursday|) |##_module.day.thursday|))
(assert (= (DatatypeCtorId |#_module.day.friday|) |##_module.day.friday|))
(assert (= (DatatypeCtorId |#_module.day.saturday|) |##_module.day.saturday|))
(assert (= (DatatypeCtorId |#_module.day.sunday|) |##_module.day.sunday|))
(assert (= (Ctor DatatypeTypeType) 3))
(assert ($Is DatatypeTypeType |#_module.day.monday| Tclass._module.day))
(assert ($Is DatatypeTypeType |#_module.day.tuesday| Tclass._module.day))
(assert ($Is DatatypeTypeType |#_module.day.wednesday| Tclass._module.day))
(assert ($Is DatatypeTypeType |#_module.day.thursday| Tclass._module.day))
(assert ($Is DatatypeTypeType |#_module.day.friday| Tclass._module.day))
(assert ($Is DatatypeTypeType |#_module.day.saturday| Tclass._module.day))
(assert ($Is DatatypeTypeType |#_module.day.sunday| Tclass._module.day))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|d#0| T@U) ) (!  (=> (or (|_module.__default.next__weekday#canCall| (Lit DatatypeTypeType |d#0|)) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |d#0| Tclass._module.day))) (= (_module.__default.next__weekday (Lit DatatypeTypeType |d#0|)) (ite (_module.day.monday_q (Lit DatatypeTypeType |d#0|)) |#_module.day.tuesday| (ite (_module.day.tuesday_q (Lit DatatypeTypeType |d#0|)) |#_module.day.wednesday| (ite (_module.day.wednesday_q (Lit DatatypeTypeType |d#0|)) |#_module.day.thursday| (ite (_module.day.thursday_q (Lit DatatypeTypeType |d#0|)) |#_module.day.friday| (ite (_module.day.friday_q (Lit DatatypeTypeType |d#0|)) |#_module.day.monday| (ite (_module.day.saturday_q (Lit DatatypeTypeType |d#0|)) |#_module.day.monday| |#_module.day.monday|))))))))
 :weight 3
 :pattern ( (_module.__default.next__weekday (Lit DatatypeTypeType |d#0|)))
))))
(assert (forall ((a T@U) (b T@U) ) (! (= (|_module.day#Equal| a b) (= a b))
 :pattern ( (|_module.day#Equal| a b))
)))
(assert (forall ((x@@2 T@U) (T T@T) ) (! (= (Lit T x@@2) x@@2)
 :pattern ( (Lit T x@@2))
)))
(assert (forall ((d T@U) ) (!  (=> (|$IsA#_module.day| d) (or (or (or (or (or (or (_module.day.monday_q d) (_module.day.tuesday_q d)) (_module.day.wednesday_q d)) (_module.day.thursday_q d)) (_module.day.friday_q d)) (_module.day.saturday_q d)) (_module.day.sunday_q d)))
 :pattern ( (|$IsA#_module.day| d))
)))
(assert (forall ((d@@0 T@U) ) (! (= (_module.day.monday_q d@@0) (= (DatatypeCtorId d@@0) |##_module.day.monday|))
 :pattern ( (_module.day.monday_q d@@0))
)))
(assert (forall ((d@@1 T@U) ) (! (= (_module.day.tuesday_q d@@1) (= (DatatypeCtorId d@@1) |##_module.day.tuesday|))
 :pattern ( (_module.day.tuesday_q d@@1))
)))
(assert (forall ((d@@2 T@U) ) (! (= (_module.day.wednesday_q d@@2) (= (DatatypeCtorId d@@2) |##_module.day.wednesday|))
 :pattern ( (_module.day.wednesday_q d@@2))
)))
(assert (forall ((d@@3 T@U) ) (! (= (_module.day.thursday_q d@@3) (= (DatatypeCtorId d@@3) |##_module.day.thursday|))
 :pattern ( (_module.day.thursday_q d@@3))
)))
(assert (forall ((d@@4 T@U) ) (! (= (_module.day.friday_q d@@4) (= (DatatypeCtorId d@@4) |##_module.day.friday|))
 :pattern ( (_module.day.friday_q d@@4))
)))
(assert (forall ((d@@5 T@U) ) (! (= (_module.day.saturday_q d@@5) (= (DatatypeCtorId d@@5) |##_module.day.saturday|))
 :pattern ( (_module.day.saturday_q d@@5))
)))
(assert (forall ((d@@6 T@U) ) (! (= (_module.day.sunday_q d@@6) (= (DatatypeCtorId d@@6) |##_module.day.sunday|))
 :pattern ( (_module.day.sunday_q d@@6))
)))
(assert (forall ((x@@3 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@3)) x@@3)
 :pattern ( ($Unbox T@@0 x@@3))
)))
(assert (forall ((d@@7 T@U) ) (!  (=> (_module.day.monday_q d@@7) (= d@@7 |#_module.day.monday|))
 :pattern ( (_module.day.monday_q d@@7))
)))
(assert (forall ((d@@8 T@U) ) (!  (=> (_module.day.tuesday_q d@@8) (= d@@8 |#_module.day.tuesday|))
 :pattern ( (_module.day.tuesday_q d@@8))
)))
(assert (forall ((d@@9 T@U) ) (!  (=> (_module.day.wednesday_q d@@9) (= d@@9 |#_module.day.wednesday|))
 :pattern ( (_module.day.wednesday_q d@@9))
)))
(assert (forall ((d@@10 T@U) ) (!  (=> (_module.day.thursday_q d@@10) (= d@@10 |#_module.day.thursday|))
 :pattern ( (_module.day.thursday_q d@@10))
)))
(assert (forall ((d@@11 T@U) ) (!  (=> (_module.day.friday_q d@@11) (= d@@11 |#_module.day.friday|))
 :pattern ( (_module.day.friday_q d@@11))
)))
(assert (forall ((d@@12 T@U) ) (!  (=> (_module.day.saturday_q d@@12) (= d@@12 |#_module.day.saturday|))
 :pattern ( (_module.day.saturday_q d@@12))
)))
(assert (forall ((d@@13 T@U) ) (!  (=> (_module.day.sunday_q d@@13) (= d@@13 |#_module.day.sunday|))
 :pattern ( (_module.day.sunday_q d@@13))
)))
(assert (forall ((d@@14 T@U) ) (!  (=> ($Is DatatypeTypeType d@@14 Tclass._module.day) (or (or (or (or (or (or (_module.day.monday_q d@@14) (_module.day.tuesday_q d@@14)) (_module.day.wednesday_q d@@14)) (_module.day.thursday_q d@@14)) (_module.day.friday_q d@@14)) (_module.day.saturday_q d@@14)) (_module.day.sunday_q d@@14)))
 :pattern ( (_module.day.sunday_q d@@14) ($Is DatatypeTypeType d@@14 Tclass._module.day))
 :pattern ( (_module.day.saturday_q d@@14) ($Is DatatypeTypeType d@@14 Tclass._module.day))
 :pattern ( (_module.day.friday_q d@@14) ($Is DatatypeTypeType d@@14 Tclass._module.day))
 :pattern ( (_module.day.thursday_q d@@14) ($Is DatatypeTypeType d@@14 Tclass._module.day))
 :pattern ( (_module.day.wednesday_q d@@14) ($Is DatatypeTypeType d@@14 Tclass._module.day))
 :pattern ( (_module.day.tuesday_q d@@14) ($Is DatatypeTypeType d@@14 Tclass._module.day))
 :pattern ( (_module.day.monday_q d@@14) ($Is DatatypeTypeType d@@14 Tclass._module.day))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|d#0@@0| T@U) ) (!  (=> (or (|_module.__default.next__weekday#canCall| |d#0@@0|) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |d#0@@0| Tclass._module.day))) ($Is DatatypeTypeType (_module.__default.next__weekday |d#0@@0|) Tclass._module.day))
 :pattern ( (_module.__default.next__weekday |d#0@@0|))
))))
(assert (forall ((a@@0 T@U) (b@@0 T@U) ) (!  (=> (and (_module.day.monday_q a@@0) (_module.day.monday_q b@@0)) (|_module.day#Equal| a@@0 b@@0))
 :pattern ( (|_module.day#Equal| a@@0 b@@0) (_module.day.monday_q a@@0))
 :pattern ( (|_module.day#Equal| a@@0 b@@0) (_module.day.monday_q b@@0))
)))
(assert (forall ((a@@1 T@U) (b@@1 T@U) ) (!  (=> (and (_module.day.tuesday_q a@@1) (_module.day.tuesday_q b@@1)) (|_module.day#Equal| a@@1 b@@1))
 :pattern ( (|_module.day#Equal| a@@1 b@@1) (_module.day.tuesday_q a@@1))
 :pattern ( (|_module.day#Equal| a@@1 b@@1) (_module.day.tuesday_q b@@1))
)))
(assert (forall ((a@@2 T@U) (b@@2 T@U) ) (!  (=> (and (_module.day.wednesday_q a@@2) (_module.day.wednesday_q b@@2)) (|_module.day#Equal| a@@2 b@@2))
 :pattern ( (|_module.day#Equal| a@@2 b@@2) (_module.day.wednesday_q a@@2))
 :pattern ( (|_module.day#Equal| a@@2 b@@2) (_module.day.wednesday_q b@@2))
)))
(assert (forall ((a@@3 T@U) (b@@3 T@U) ) (!  (=> (and (_module.day.thursday_q a@@3) (_module.day.thursday_q b@@3)) (|_module.day#Equal| a@@3 b@@3))
 :pattern ( (|_module.day#Equal| a@@3 b@@3) (_module.day.thursday_q a@@3))
 :pattern ( (|_module.day#Equal| a@@3 b@@3) (_module.day.thursday_q b@@3))
)))
(assert (forall ((a@@4 T@U) (b@@4 T@U) ) (!  (=> (and (_module.day.friday_q a@@4) (_module.day.friday_q b@@4)) (|_module.day#Equal| a@@4 b@@4))
 :pattern ( (|_module.day#Equal| a@@4 b@@4) (_module.day.friday_q a@@4))
 :pattern ( (|_module.day#Equal| a@@4 b@@4) (_module.day.friday_q b@@4))
)))
(assert (forall ((a@@5 T@U) (b@@5 T@U) ) (!  (=> (and (_module.day.saturday_q a@@5) (_module.day.saturday_q b@@5)) (|_module.day#Equal| a@@5 b@@5))
 :pattern ( (|_module.day#Equal| a@@5 b@@5) (_module.day.saturday_q a@@5))
 :pattern ( (|_module.day#Equal| a@@5 b@@5) (_module.day.saturday_q b@@5))
)))
(assert (forall ((a@@6 T@U) (b@@6 T@U) ) (!  (=> (and (_module.day.sunday_q a@@6) (_module.day.sunday_q b@@6)) (|_module.day#Equal| a@@6 b@@6))
 :pattern ( (|_module.day#Equal| a@@6 b@@6) (_module.day.sunday_q a@@6))
 :pattern ( (|_module.day#Equal| a@@6 b@@6) (_module.day.sunday_q b@@6))
)))
(assert (forall ((x@@4 T@U) (T@@1 T@T) ) (! (= ($Unbox T@@1 ($Box T@@1 x@@4)) x@@4)
 :pattern ( ($Box T@@1 x@@4))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0 t1 t2 (MapType0Store t0 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 4)) (= (Ctor FieldType) 5)) (forall ((t0@@0 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 (MapType1Store t0@@0 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :weight 0
))) (= (Ctor BoxType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|d#0@@1| T@U) ) (!  (=> (or (|_module.__default.next__weekday#canCall| |d#0@@1|) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |d#0@@1| Tclass._module.day))) (= (_module.__default.next__weekday |d#0@@1|) (ite (_module.day.monday_q |d#0@@1|) |#_module.day.tuesday| (ite (_module.day.tuesday_q |d#0@@1|) |#_module.day.wednesday| (ite (_module.day.wednesday_q |d#0@@1|) |#_module.day.thursday| (ite (_module.day.thursday_q |d#0@@1|) |#_module.day.friday| (ite (_module.day.friday_q |d#0@@1|) |#_module.day.monday| (ite (_module.day.saturday_q |d#0@@1|) |#_module.day.monday| |#_module.day.monday|))))))))
 :pattern ( (_module.__default.next__weekday |d#0@@1|))
))))
(assert (forall ((d@@15 T@U) ($h T@U) ) (!  (=> (and ($IsGoodHeap $h) ($Is DatatypeTypeType d@@15 Tclass._module.day)) ($IsAlloc DatatypeTypeType d@@15 Tclass._module.day $h))
 :pattern ( ($IsAlloc DatatypeTypeType d@@15 Tclass._module.day $h))
)))
(assert (= (Tag Tclass._module.day) Tagclass._module.day))
(assert (= (TagFamily Tclass._module.day) tytagFamily$day))
(assert (= |#_module.day.monday| (Lit DatatypeTypeType |#_module.day.monday|)))
(assert (= |#_module.day.tuesday| (Lit DatatypeTypeType |#_module.day.tuesday|)))
(assert (= |#_module.day.wednesday| (Lit DatatypeTypeType |#_module.day.wednesday|)))
(assert (= |#_module.day.thursday| (Lit DatatypeTypeType |#_module.day.thursday|)))
(assert (= |#_module.day.friday| (Lit DatatypeTypeType |#_module.day.friday|)))
(assert (= |#_module.day.saturday| (Lit DatatypeTypeType |#_module.day.saturday|)))
(assert (= |#_module.day.sunday| (Lit DatatypeTypeType |#_module.day.sunday|)))
(assert (forall ((x@@5 T@U) (T@@2 T@T) ) (! (= ($Box T@@2 (Lit T@@2 x@@5)) (Lit BoxType ($Box T@@2 x@@5)))
 :pattern ( ($Box T@@2 (Lit T@@2 x@@5)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $Heap () T@U)
(declare-fun |##d#0@0| () T@U)
(declare-fun |##d#2@0| () T@U)
(declare-fun |##d#1@0| () T@U)
(declare-fun |##d#4@0| () T@U)
(declare-fun |##d#3@0| () T@U)
(declare-fun |d#0@0| () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |d#0@@2| () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 5) (let ((anon0_correct  (=> (and (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (= |##d#0@0| (Lit DatatypeTypeType |#_module.day.friday|))) (=> (and (and ($IsAlloc DatatypeTypeType |##d#0@0| Tclass._module.day $Heap) (|_module.__default.next__weekday#canCall| (Lit DatatypeTypeType |#_module.day.friday|))) (and (|$IsA#_module.day| (Lit DatatypeTypeType (_module.__default.next__weekday (Lit DatatypeTypeType |#_module.day.friday|)))) (|_module.__default.next__weekday#canCall| (Lit DatatypeTypeType |#_module.day.friday|)))) (and (=> (= (ControlFlow 0 2) (- 0 4)) (|_module.day#Equal| (_module.__default.next__weekday (Lit DatatypeTypeType |#_module.day.friday|)) |#_module.day.monday|)) (=> (|_module.day#Equal| (_module.__default.next__weekday (Lit DatatypeTypeType |#_module.day.friday|)) |#_module.day.monday|) (=> (and (and (and (= |##d#2@0| (Lit DatatypeTypeType |#_module.day.saturday|)) ($IsAlloc DatatypeTypeType |##d#2@0| Tclass._module.day $Heap)) (and (|_module.__default.next__weekday#canCall| (Lit DatatypeTypeType |#_module.day.saturday|)) (= |##d#1@0| (Lit DatatypeTypeType (_module.__default.next__weekday (Lit DatatypeTypeType |#_module.day.saturday|)))))) (and (and ($IsAlloc DatatypeTypeType |##d#1@0| Tclass._module.day $Heap) (|_module.__default.next__weekday#canCall| (Lit DatatypeTypeType (_module.__default.next__weekday (Lit DatatypeTypeType |#_module.day.saturday|))))) (and (|$IsA#_module.day| (Lit DatatypeTypeType (_module.__default.next__weekday (Lit DatatypeTypeType (_module.__default.next__weekday (Lit DatatypeTypeType |#_module.day.saturday|)))))) (and (|_module.__default.next__weekday#canCall| (Lit DatatypeTypeType |#_module.day.saturday|)) (|_module.__default.next__weekday#canCall| (Lit DatatypeTypeType (_module.__default.next__weekday (Lit DatatypeTypeType |#_module.day.saturday|)))))))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (|_module.day#Equal| (_module.__default.next__weekday (Lit DatatypeTypeType (_module.__default.next__weekday (Lit DatatypeTypeType |#_module.day.saturday|)))) |#_module.day.tuesday|)) (=> (|_module.day#Equal| (_module.__default.next__weekday (Lit DatatypeTypeType (_module.__default.next__weekday (Lit DatatypeTypeType |#_module.day.saturday|)))) |#_module.day.tuesday|) (=> (and (= |##d#4@0| (Lit DatatypeTypeType |#_module.day.tuesday|)) ($IsAlloc DatatypeTypeType |##d#4@0| Tclass._module.day $Heap)) (=> (and (and (|_module.__default.next__weekday#canCall| (Lit DatatypeTypeType |#_module.day.tuesday|)) (= |##d#3@0| (Lit DatatypeTypeType (_module.__default.next__weekday (Lit DatatypeTypeType |#_module.day.tuesday|))))) (and ($IsAlloc DatatypeTypeType |##d#3@0| Tclass._module.day $Heap) (|_module.__default.next__weekday#canCall| (Lit DatatypeTypeType (_module.__default.next__weekday (Lit DatatypeTypeType |#_module.day.tuesday|)))))) (=> (and (and (and (|_module.__default.next__weekday#canCall| (Lit DatatypeTypeType |#_module.day.tuesday|)) (|_module.__default.next__weekday#canCall| (Lit DatatypeTypeType (_module.__default.next__weekday (Lit DatatypeTypeType |#_module.day.tuesday|))))) (= |d#0@0| (Lit DatatypeTypeType (_module.__default.next__weekday (Lit DatatypeTypeType (_module.__default.next__weekday (Lit DatatypeTypeType |#_module.day.tuesday|))))))) (and (|$IsA#_module.day| |d#0@0|) (= (ControlFlow 0 2) (- 0 1)))) (|_module.day#Equal| |d#0@0| |#_module.day.friday|)))))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (=> (and (and (and ($Is DatatypeTypeType |d#0@@2| Tclass._module.day) ($IsAlloc DatatypeTypeType |d#0@@2| Tclass._module.day $Heap)) true) (and (= 2 $FunctionContextHeight) (= (ControlFlow 0 5) 2))) anon0_correct))))
PreconditionGeneratedEntry_correct)))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
