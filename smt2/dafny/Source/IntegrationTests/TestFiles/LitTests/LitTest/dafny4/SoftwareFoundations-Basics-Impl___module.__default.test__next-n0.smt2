(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 () T@U)
(declare-fun $generated@@9 (T@T) Int)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 () T@T)
(declare-fun $generated@@12 () T@T)
(declare-fun $generated@@13 (Bool) T@U)
(declare-fun $generated@@14 (T@U) Bool)
(declare-fun $generated@@15 (Int) T@U)
(declare-fun $generated@@16 (T@U) Int)
(declare-fun $generated@@17 (Real) T@U)
(declare-fun $generated@@18 (T@U) Real)
(declare-fun $generated@@25 (T@U) T@U)
(declare-fun $generated@@26 () T@U)
(declare-fun $generated@@27 () T@U)
(declare-fun $generated@@28 () T@U)
(declare-fun $generated@@29 () T@U)
(declare-fun $generated@@30 () T@U)
(declare-fun $generated@@31 () T@U)
(declare-fun $generated@@32 () T@U)
(declare-fun $generated@@33 (T@T T@U T@U) Bool)
(declare-fun $generated@@34 () T@T)
(declare-fun $generated@@35 () T@U)
(declare-fun $generated@@36 () Int)
(declare-fun $generated@@37 (T@U) T@U)
(declare-fun $generated@@38 (T@T T@U) T@U)
(declare-fun $generated@@39 (T@U) Bool)
(declare-fun $generated@@40 (T@U) Bool)
(declare-fun $generated@@41 (T@U) Bool)
(declare-fun $generated@@42 (T@U) Bool)
(declare-fun $generated@@43 (T@U) Bool)
(declare-fun $generated@@44 (T@U) Bool)
(declare-fun $generated@@45 (T@U) Bool)
(declare-fun $generated@@47 (T@U T@U) Bool)
(declare-fun $generated@@52 (T@U) Bool)
(declare-fun $generated@@53 (T@U) Bool)
(declare-fun $generated@@62 (T@T T@U) T@U)
(declare-fun $generated@@63 (T@T T@U) T@U)
(declare-fun $generated@@91 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@92 () T@T)
(declare-fun $generated@@93 () T@T)
(declare-fun $generated@@94 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@95 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@96 () T@T)
(declare-fun $generated@@97 (T@T T@T) T@T)
(declare-fun $generated@@98 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@99 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@100 (T@T) T@T)
(declare-fun $generated@@101 (T@T) T@T)
(declare-fun $generated@@151 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@152 (T@U) Bool)
(declare-fun $generated@@155 (T@U) T@U)
(declare-fun $generated@@156 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@9 $generated@@10) 0) (= ($generated@@9 $generated@@11) 1)) (= ($generated@@9 $generated@@12) 2)) (forall (($generated@@19 Bool) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 Int) ) (! (= ($generated@@16 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 T@U) ) (! (= ($generated@@15 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= ($generated@@18 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))) (forall (($generated@@24 T@U) ) (! (= ($generated@@17 ($generated@@18 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@18 $generated@@24))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7 $generated@@8)
)
(assert (= ($generated@@25 $generated@@26) $generated@@1))
(assert (= ($generated@@25 $generated@@27) $generated@@2))
(assert (= ($generated@@25 $generated@@28) $generated@@3))
(assert (= ($generated@@25 $generated@@29) $generated@@4))
(assert (= ($generated@@25 $generated@@30) $generated@@5))
(assert (= ($generated@@25 $generated@@31) $generated@@6))
(assert (= ($generated@@25 $generated@@32) $generated@@7))
(assert (= ($generated@@9 $generated@@34) 3))
(assert ($generated@@33 $generated@@34 $generated@@26 $generated@@35))
(assert ($generated@@33 $generated@@34 $generated@@27 $generated@@35))
(assert ($generated@@33 $generated@@34 $generated@@28 $generated@@35))
(assert ($generated@@33 $generated@@34 $generated@@29 $generated@@35))
(assert ($generated@@33 $generated@@34 $generated@@30 $generated@@35))
(assert ($generated@@33 $generated@@34 $generated@@31 $generated@@35))
(assert ($generated@@33 $generated@@34 $generated@@32 $generated@@35))
(assert  (=> (<= 1 $generated@@36) (forall (($generated@@46 T@U) ) (!  (=> (or ($generated@@39 ($generated@@38 $generated@@34 $generated@@46)) (and (< 1 $generated@@36) ($generated@@33 $generated@@34 $generated@@46 $generated@@35))) (= ($generated@@37 ($generated@@38 $generated@@34 $generated@@46)) (ite ($generated@@40 ($generated@@38 $generated@@34 $generated@@46)) $generated@@27 (ite ($generated@@41 ($generated@@38 $generated@@34 $generated@@46)) $generated@@28 (ite ($generated@@42 ($generated@@38 $generated@@34 $generated@@46)) $generated@@29 (ite ($generated@@43 ($generated@@38 $generated@@34 $generated@@46)) $generated@@30 (ite ($generated@@44 ($generated@@38 $generated@@34 $generated@@46)) $generated@@26 (ite ($generated@@45 ($generated@@38 $generated@@34 $generated@@46)) $generated@@26 $generated@@26))))))))
 :weight 3
 :pattern ( ($generated@@37 ($generated@@38 $generated@@34 $generated@@46)))
))))
(assert (forall (($generated@@48 T@U) ($generated@@49 T@U) ) (! (= ($generated@@47 $generated@@48 $generated@@49) (= $generated@@48 $generated@@49))
 :pattern ( ($generated@@47 $generated@@48 $generated@@49))
)))
(assert (forall (($generated@@50 T@U) ($generated@@51 T@T) ) (! (= ($generated@@38 $generated@@51 $generated@@50) $generated@@50)
 :pattern ( ($generated@@38 $generated@@51 $generated@@50))
)))
(assert (forall (($generated@@54 T@U) ) (!  (=> ($generated@@52 $generated@@54) (or (or (or (or (or (or ($generated@@40 $generated@@54) ($generated@@41 $generated@@54)) ($generated@@42 $generated@@54)) ($generated@@43 $generated@@54)) ($generated@@44 $generated@@54)) ($generated@@45 $generated@@54)) ($generated@@53 $generated@@54)))
 :pattern ( ($generated@@52 $generated@@54))
)))
(assert (forall (($generated@@55 T@U) ) (! (= ($generated@@40 $generated@@55) (= ($generated@@25 $generated@@55) $generated@@1))
 :pattern ( ($generated@@40 $generated@@55))
)))
(assert (forall (($generated@@56 T@U) ) (! (= ($generated@@41 $generated@@56) (= ($generated@@25 $generated@@56) $generated@@2))
 :pattern ( ($generated@@41 $generated@@56))
)))
(assert (forall (($generated@@57 T@U) ) (! (= ($generated@@42 $generated@@57) (= ($generated@@25 $generated@@57) $generated@@3))
 :pattern ( ($generated@@42 $generated@@57))
)))
(assert (forall (($generated@@58 T@U) ) (! (= ($generated@@43 $generated@@58) (= ($generated@@25 $generated@@58) $generated@@4))
 :pattern ( ($generated@@43 $generated@@58))
)))
(assert (forall (($generated@@59 T@U) ) (! (= ($generated@@44 $generated@@59) (= ($generated@@25 $generated@@59) $generated@@5))
 :pattern ( ($generated@@44 $generated@@59))
)))
(assert (forall (($generated@@60 T@U) ) (! (= ($generated@@45 $generated@@60) (= ($generated@@25 $generated@@60) $generated@@6))
 :pattern ( ($generated@@45 $generated@@60))
)))
(assert (forall (($generated@@61 T@U) ) (! (= ($generated@@53 $generated@@61) (= ($generated@@25 $generated@@61) $generated@@7))
 :pattern ( ($generated@@53 $generated@@61))
)))
(assert (forall (($generated@@64 T@U) ($generated@@65 T@T) ) (! (= ($generated@@63 $generated@@65 ($generated@@62 $generated@@65 $generated@@64)) $generated@@64)
 :pattern ( ($generated@@62 $generated@@65 $generated@@64))
)))
(assert (forall (($generated@@66 T@U) ) (!  (=> ($generated@@40 $generated@@66) (= $generated@@66 $generated@@26))
 :pattern ( ($generated@@40 $generated@@66))
)))
(assert (forall (($generated@@67 T@U) ) (!  (=> ($generated@@41 $generated@@67) (= $generated@@67 $generated@@27))
 :pattern ( ($generated@@41 $generated@@67))
)))
(assert (forall (($generated@@68 T@U) ) (!  (=> ($generated@@42 $generated@@68) (= $generated@@68 $generated@@28))
 :pattern ( ($generated@@42 $generated@@68))
)))
(assert (forall (($generated@@69 T@U) ) (!  (=> ($generated@@43 $generated@@69) (= $generated@@69 $generated@@29))
 :pattern ( ($generated@@43 $generated@@69))
)))
(assert (forall (($generated@@70 T@U) ) (!  (=> ($generated@@44 $generated@@70) (= $generated@@70 $generated@@30))
 :pattern ( ($generated@@44 $generated@@70))
)))
(assert (forall (($generated@@71 T@U) ) (!  (=> ($generated@@45 $generated@@71) (= $generated@@71 $generated@@31))
 :pattern ( ($generated@@45 $generated@@71))
)))
(assert (forall (($generated@@72 T@U) ) (!  (=> ($generated@@53 $generated@@72) (= $generated@@72 $generated@@32))
 :pattern ( ($generated@@53 $generated@@72))
)))
(assert (forall (($generated@@73 T@U) ) (!  (=> ($generated@@33 $generated@@34 $generated@@73 $generated@@35) (or (or (or (or (or (or ($generated@@40 $generated@@73) ($generated@@41 $generated@@73)) ($generated@@42 $generated@@73)) ($generated@@43 $generated@@73)) ($generated@@44 $generated@@73)) ($generated@@45 $generated@@73)) ($generated@@53 $generated@@73)))
 :pattern ( ($generated@@53 $generated@@73) ($generated@@33 $generated@@34 $generated@@73 $generated@@35))
 :pattern ( ($generated@@45 $generated@@73) ($generated@@33 $generated@@34 $generated@@73 $generated@@35))
 :pattern ( ($generated@@44 $generated@@73) ($generated@@33 $generated@@34 $generated@@73 $generated@@35))
 :pattern ( ($generated@@43 $generated@@73) ($generated@@33 $generated@@34 $generated@@73 $generated@@35))
 :pattern ( ($generated@@42 $generated@@73) ($generated@@33 $generated@@34 $generated@@73 $generated@@35))
 :pattern ( ($generated@@41 $generated@@73) ($generated@@33 $generated@@34 $generated@@73 $generated@@35))
 :pattern ( ($generated@@40 $generated@@73) ($generated@@33 $generated@@34 $generated@@73 $generated@@35))
)))
(assert  (=> (<= 1 $generated@@36) (forall (($generated@@74 T@U) ) (!  (=> (or ($generated@@39 $generated@@74) (and (< 1 $generated@@36) ($generated@@33 $generated@@34 $generated@@74 $generated@@35))) ($generated@@33 $generated@@34 ($generated@@37 $generated@@74) $generated@@35))
 :pattern ( ($generated@@37 $generated@@74))
))))
(assert (forall (($generated@@75 T@U) ($generated@@76 T@U) ) (!  (=> (and ($generated@@40 $generated@@75) ($generated@@40 $generated@@76)) ($generated@@47 $generated@@75 $generated@@76))
 :pattern ( ($generated@@47 $generated@@75 $generated@@76) ($generated@@40 $generated@@75))
 :pattern ( ($generated@@47 $generated@@75 $generated@@76) ($generated@@40 $generated@@76))
)))
(assert (forall (($generated@@77 T@U) ($generated@@78 T@U) ) (!  (=> (and ($generated@@41 $generated@@77) ($generated@@41 $generated@@78)) ($generated@@47 $generated@@77 $generated@@78))
 :pattern ( ($generated@@47 $generated@@77 $generated@@78) ($generated@@41 $generated@@77))
 :pattern ( ($generated@@47 $generated@@77 $generated@@78) ($generated@@41 $generated@@78))
)))
(assert (forall (($generated@@79 T@U) ($generated@@80 T@U) ) (!  (=> (and ($generated@@42 $generated@@79) ($generated@@42 $generated@@80)) ($generated@@47 $generated@@79 $generated@@80))
 :pattern ( ($generated@@47 $generated@@79 $generated@@80) ($generated@@42 $generated@@79))
 :pattern ( ($generated@@47 $generated@@79 $generated@@80) ($generated@@42 $generated@@80))
)))
(assert (forall (($generated@@81 T@U) ($generated@@82 T@U) ) (!  (=> (and ($generated@@43 $generated@@81) ($generated@@43 $generated@@82)) ($generated@@47 $generated@@81 $generated@@82))
 :pattern ( ($generated@@47 $generated@@81 $generated@@82) ($generated@@43 $generated@@81))
 :pattern ( ($generated@@47 $generated@@81 $generated@@82) ($generated@@43 $generated@@82))
)))
(assert (forall (($generated@@83 T@U) ($generated@@84 T@U) ) (!  (=> (and ($generated@@44 $generated@@83) ($generated@@44 $generated@@84)) ($generated@@47 $generated@@83 $generated@@84))
 :pattern ( ($generated@@47 $generated@@83 $generated@@84) ($generated@@44 $generated@@83))
 :pattern ( ($generated@@47 $generated@@83 $generated@@84) ($generated@@44 $generated@@84))
)))
(assert (forall (($generated@@85 T@U) ($generated@@86 T@U) ) (!  (=> (and ($generated@@45 $generated@@85) ($generated@@45 $generated@@86)) ($generated@@47 $generated@@85 $generated@@86))
 :pattern ( ($generated@@47 $generated@@85 $generated@@86) ($generated@@45 $generated@@85))
 :pattern ( ($generated@@47 $generated@@85 $generated@@86) ($generated@@45 $generated@@86))
)))
(assert (forall (($generated@@87 T@U) ($generated@@88 T@U) ) (!  (=> (and ($generated@@53 $generated@@87) ($generated@@53 $generated@@88)) ($generated@@47 $generated@@87 $generated@@88))
 :pattern ( ($generated@@47 $generated@@87 $generated@@88) ($generated@@53 $generated@@87))
 :pattern ( ($generated@@47 $generated@@87 $generated@@88) ($generated@@53 $generated@@88))
)))
(assert (forall (($generated@@89 T@U) ($generated@@90 T@T) ) (! (= ($generated@@62 $generated@@90 ($generated@@63 $generated@@90 $generated@@89)) $generated@@89)
 :pattern ( ($generated@@63 $generated@@90 $generated@@89))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@102 T@T) ($generated@@103 T@T) ($generated@@104 T@T) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ) (! (= ($generated@@91 $generated@@102 $generated@@103 $generated@@104 ($generated@@98 $generated@@102 $generated@@103 $generated@@104 $generated@@106 $generated@@107 $generated@@108 $generated@@105) $generated@@107 $generated@@108) $generated@@105)
 :weight 0
)) (and (forall (($generated@@109 T@T) ($generated@@110 T@T) ($generated@@111 T@T) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ) (!  (or (= $generated@@114 $generated@@116) (= ($generated@@91 $generated@@109 $generated@@110 $generated@@111 ($generated@@98 $generated@@109 $generated@@110 $generated@@111 $generated@@113 $generated@@114 $generated@@115 $generated@@112) $generated@@116 $generated@@117) ($generated@@91 $generated@@109 $generated@@110 $generated@@111 $generated@@113 $generated@@116 $generated@@117)))
 :weight 0
)) (forall (($generated@@118 T@T) ($generated@@119 T@T) ($generated@@120 T@T) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ) (!  (or (= $generated@@124 $generated@@126) (= ($generated@@91 $generated@@118 $generated@@119 $generated@@120 ($generated@@98 $generated@@118 $generated@@119 $generated@@120 $generated@@122 $generated@@123 $generated@@124 $generated@@121) $generated@@125 $generated@@126) ($generated@@91 $generated@@118 $generated@@119 $generated@@120 $generated@@122 $generated@@125 $generated@@126)))
 :weight 0
)))) (= ($generated@@9 $generated@@92) 4)) (= ($generated@@9 $generated@@93) 5)) (forall (($generated@@127 T@T) ($generated@@128 T@T) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ) (! (= ($generated@@95 $generated@@127 $generated@@128 ($generated@@99 $generated@@127 $generated@@128 $generated@@130 $generated@@131 $generated@@129) $generated@@131) $generated@@129)
 :weight 0
))) (forall (($generated@@132 T@T) ($generated@@133 T@T) ($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ) (!  (or (= $generated@@136 $generated@@137) (= ($generated@@95 $generated@@132 $generated@@133 ($generated@@99 $generated@@132 $generated@@133 $generated@@135 $generated@@136 $generated@@134) $generated@@137) ($generated@@95 $generated@@132 $generated@@133 $generated@@135 $generated@@137)))
 :weight 0
))) (= ($generated@@9 $generated@@96) 6)) (forall (($generated@@138 T@T) ($generated@@139 T@T) ) (= ($generated@@9 ($generated@@97 $generated@@138 $generated@@139)) 7))) (forall (($generated@@140 T@T) ($generated@@141 T@T) ) (! (= ($generated@@100 ($generated@@97 $generated@@140 $generated@@141)) $generated@@140)
 :pattern ( ($generated@@97 $generated@@140 $generated@@141))
))) (forall (($generated@@142 T@T) ($generated@@143 T@T) ) (! (= ($generated@@101 ($generated@@97 $generated@@142 $generated@@143)) $generated@@143)
 :pattern ( ($generated@@97 $generated@@142 $generated@@143))
))))
(assert (forall (($generated@@144 T@U) ($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 Bool) ($generated@@148 T@U) ($generated@@149 T@U) ) (! (= ($generated@@14 ($generated@@91 $generated@@92 $generated@@93 $generated@@10 ($generated@@94 $generated@@144 $generated@@145 $generated@@146 $generated@@147) $generated@@148 $generated@@149))  (=> (and (or (not (= $generated@@148 $generated@@144)) (not true)) ($generated@@14 ($generated@@62 $generated@@10 ($generated@@95 $generated@@93 $generated@@96 ($generated@@95 $generated@@92 ($generated@@97 $generated@@93 $generated@@96) $generated@@145 $generated@@148) $generated@@146)))) $generated@@147))
 :pattern ( ($generated@@91 $generated@@92 $generated@@93 $generated@@10 ($generated@@94 $generated@@144 $generated@@145 $generated@@146 $generated@@147) $generated@@148 $generated@@149))
)))
(assert  (=> (<= 1 $generated@@36) (forall (($generated@@150 T@U) ) (!  (=> (or ($generated@@39 $generated@@150) (and (< 1 $generated@@36) ($generated@@33 $generated@@34 $generated@@150 $generated@@35))) (= ($generated@@37 $generated@@150) (ite ($generated@@40 $generated@@150) $generated@@27 (ite ($generated@@41 $generated@@150) $generated@@28 (ite ($generated@@42 $generated@@150) $generated@@29 (ite ($generated@@43 $generated@@150) $generated@@30 (ite ($generated@@44 $generated@@150) $generated@@26 (ite ($generated@@45 $generated@@150) $generated@@26 $generated@@26))))))))
 :pattern ( ($generated@@37 $generated@@150))
))))
(assert (forall (($generated@@153 T@U) ($generated@@154 T@U) ) (!  (=> (and ($generated@@152 $generated@@154) ($generated@@33 $generated@@34 $generated@@153 $generated@@35)) ($generated@@151 $generated@@34 $generated@@153 $generated@@35 $generated@@154))
 :pattern ( ($generated@@151 $generated@@34 $generated@@153 $generated@@35 $generated@@154))
)))
(assert (= ($generated@@155 $generated@@35) $generated@@0))
(assert (= ($generated@@156 $generated@@35) $generated@@8))
(assert (= $generated@@26 ($generated@@38 $generated@@34 $generated@@26)))
(assert (= $generated@@27 ($generated@@38 $generated@@34 $generated@@27)))
(assert (= $generated@@28 ($generated@@38 $generated@@34 $generated@@28)))
(assert (= $generated@@29 ($generated@@38 $generated@@34 $generated@@29)))
(assert (= $generated@@30 ($generated@@38 $generated@@34 $generated@@30)))
(assert (= $generated@@31 ($generated@@38 $generated@@34 $generated@@31)))
(assert (= $generated@@32 ($generated@@38 $generated@@34 $generated@@32)))
(assert (forall (($generated@@157 T@U) ($generated@@158 T@T) ) (! (= ($generated@@63 $generated@@158 ($generated@@38 $generated@@158 $generated@@157)) ($generated@@38 $generated@@96 ($generated@@63 $generated@@158 $generated@@157)))
 :pattern ( ($generated@@63 $generated@@158 ($generated@@38 $generated@@158 $generated@@157)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@159 () T@U)
(declare-fun $generated@@160 () T@U)
(declare-fun $generated@@161 () T@U)
(declare-fun $generated@@162 () T@U)
(declare-fun $generated@@163 () T@U)
(declare-fun $generated@@164 () T@U)
(declare-fun $generated@@165 () T@U)
(declare-fun $generated@@166 () T@U)
(declare-fun $generated@@167 () T@U)
(declare-fun $generated@@168 (T@U) Bool)
(declare-fun $generated@@169 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 5) (let (($generated@@170  (=> (and (= $generated@@159 ($generated@@94 $generated@@160 $generated@@161 $generated false)) (= $generated@@162 ($generated@@38 $generated@@34 $generated@@30))) (=> (and (and ($generated@@151 $generated@@34 $generated@@162 $generated@@35 $generated@@161) ($generated@@39 ($generated@@38 $generated@@34 $generated@@30))) (and ($generated@@52 ($generated@@38 $generated@@34 ($generated@@37 ($generated@@38 $generated@@34 $generated@@30)))) ($generated@@39 ($generated@@38 $generated@@34 $generated@@30)))) (and (=> (= (ControlFlow 0 2) (- 0 4)) ($generated@@47 ($generated@@37 ($generated@@38 $generated@@34 $generated@@30)) $generated@@26)) (=> ($generated@@47 ($generated@@37 ($generated@@38 $generated@@34 $generated@@30)) $generated@@26) (=> (and (and (and (= $generated@@163 ($generated@@38 $generated@@34 $generated@@31)) ($generated@@151 $generated@@34 $generated@@163 $generated@@35 $generated@@161)) (and ($generated@@39 ($generated@@38 $generated@@34 $generated@@31)) (= $generated@@164 ($generated@@38 $generated@@34 ($generated@@37 ($generated@@38 $generated@@34 $generated@@31)))))) (and (and ($generated@@151 $generated@@34 $generated@@164 $generated@@35 $generated@@161) ($generated@@39 ($generated@@38 $generated@@34 ($generated@@37 ($generated@@38 $generated@@34 $generated@@31))))) (and ($generated@@52 ($generated@@38 $generated@@34 ($generated@@37 ($generated@@38 $generated@@34 ($generated@@37 ($generated@@38 $generated@@34 $generated@@31)))))) (and ($generated@@39 ($generated@@38 $generated@@34 $generated@@31)) ($generated@@39 ($generated@@38 $generated@@34 ($generated@@37 ($generated@@38 $generated@@34 $generated@@31)))))))) (and (=> (= (ControlFlow 0 2) (- 0 3)) ($generated@@47 ($generated@@37 ($generated@@38 $generated@@34 ($generated@@37 ($generated@@38 $generated@@34 $generated@@31)))) $generated@@27)) (=> ($generated@@47 ($generated@@37 ($generated@@38 $generated@@34 ($generated@@37 ($generated@@38 $generated@@34 $generated@@31)))) $generated@@27) (=> (and (= $generated@@165 ($generated@@38 $generated@@34 $generated@@27)) ($generated@@151 $generated@@34 $generated@@165 $generated@@35 $generated@@161)) (=> (and (and ($generated@@39 ($generated@@38 $generated@@34 $generated@@27)) (= $generated@@166 ($generated@@38 $generated@@34 ($generated@@37 ($generated@@38 $generated@@34 $generated@@27))))) (and ($generated@@151 $generated@@34 $generated@@166 $generated@@35 $generated@@161) ($generated@@39 ($generated@@38 $generated@@34 ($generated@@37 ($generated@@38 $generated@@34 $generated@@27)))))) (=> (and (and (and ($generated@@39 ($generated@@38 $generated@@34 $generated@@27)) ($generated@@39 ($generated@@38 $generated@@34 ($generated@@37 ($generated@@38 $generated@@34 $generated@@27))))) (= $generated@@167 ($generated@@38 $generated@@34 ($generated@@37 ($generated@@38 $generated@@34 ($generated@@37 ($generated@@38 $generated@@34 $generated@@27))))))) (and ($generated@@52 $generated@@167) (= (ControlFlow 0 2) (- 0 1)))) ($generated@@47 $generated@@167 $generated@@30)))))))))))))
(let (($generated@@171  (=> (and ($generated@@152 $generated@@161) ($generated@@168 $generated@@161)) (=> (and (and (and ($generated@@33 $generated@@34 $generated@@169 $generated@@35) ($generated@@151 $generated@@34 $generated@@169 $generated@@35 $generated@@161)) true) (and (= 2 $generated@@36) (= (ControlFlow 0 5) 2))) $generated@@170))))
$generated@@171)))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
