(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TChar () T@U)
(declare-fun TInt () T@U)
(declare-fun TagChar () T@U)
(declare-fun TagInt () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._System.___hFunc1 () T@U)
(declare-fun Tagclass._System.___hPartialFunc1 () T@U)
(declare-fun Tagclass._System.___hTotalFunc1 () T@U)
(declare-fun Tagclass._module.VariousArrows? () T@U)
(declare-fun Tagclass._module.VariousArrows () T@U)
(declare-fun |tytagFamily$_#Func1| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1| () T@U)
(declare-fun |tytagFamily$_#TotalFunc1| () T@U)
(declare-fun tytagFamily$VariousArrows () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.VariousArrows.F_k_k (T@U T@U Int) T@U)
(declare-fun |_module.VariousArrows.F_k_k#canCall| (T@U T@U Int) Bool)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun null () T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun Tclass._module.VariousArrows () T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun charType () T@T)
(declare-fun _module.VariousArrows.G_k (T@U T@U Int) T@U)
(declare-fun |_module.VariousArrows.G_k#canCall| (T@U T@U Int) Bool)
(declare-fun Tag (T@U) T@U)
(declare-fun _module.VariousArrows.F_k (T@U Int) T@U)
(declare-fun |_module.VariousArrows.F_k#canCall| (T@U Int) Bool)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun _module.VariousArrows.G (T@U Int) T@U)
(declare-fun |_module.VariousArrows.G#canCall| (T@U Int) Bool)
(declare-fun |char#FromInt| (Int) T@U)
(declare-fun |_module.VariousArrows.F_k#requires| (T@U Int) Bool)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun |Set#Empty| () T@U)
(declare-fun Tclass._module.VariousArrows? () T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun HandleTypeType () T@T)
(declare-fun Tclass._System.___hFunc1 (T@U T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun Reads1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |_module.VariousArrows.G_k#Handle| (T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun LitInt (Int) Int)
(declare-fun $OneHeap () T@U)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun _module.VariousArrows.F (T@U Int) T@U)
(declare-fun Apply1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |_module.VariousArrows.F#Handle| (T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun |_module.VariousArrows.F_k#Handle| (T@U) T@U)
(declare-fun |_module.VariousArrows.G#Handle| (T@U) T@U)
(declare-fun Requires1 (T@U T@U T@U T@U T@U) Bool)
(declare-fun |_module.VariousArrows.F_k_k#Handle| (T@U) T@U)
(declare-fun |_module.VariousArrows.F_k_k#requires| (T@U T@U Int) Bool)
(declare-fun |_module.VariousArrows.G_k#requires| (T@U T@U Int) Bool)
(declare-fun |_module.VariousArrows.F#requires| (T@U Int) Bool)
(declare-fun |_module.VariousArrows.G#requires| (T@U Int) Bool)
(declare-fun |_module.VariousArrows.F#canCall| (T@U Int) Bool)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun Tclass._System.___hPartialFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1_1 (T@U) T@U)
(declare-fun |char#ToInt| (T@U) Int)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TChar TInt TagChar TagInt alloc Tagclass._System.___hFunc1 Tagclass._System.___hPartialFunc1 Tagclass._System.___hTotalFunc1 Tagclass._module.VariousArrows? Tagclass._module.VariousArrows |tytagFamily$_#Func1| |tytagFamily$_#PartialFunc1| |tytagFamily$_#TotalFunc1| tytagFamily$VariousArrows)
)
(assert  (and (= (Ctor refType) 3) (= (Ctor charType) 4)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($Heap T@U) (this T@U) (|x#0| Int) ) (!  (=> (or (|_module.VariousArrows.F_k_k#canCall| $Heap this |x#0|) (and (< 0 $FunctionContextHeight) (and ($IsGoodHeap $Heap) (and (or (not (= this null)) (not true)) (and ($Is refType this Tclass._module.VariousArrows) ($IsAlloc refType this Tclass._module.VariousArrows $Heap)))))) ($Is charType (_module.VariousArrows.F_k_k $Heap this |x#0|) TChar))
 :pattern ( (_module.VariousArrows.F_k_k $Heap this |x#0|))
))))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($Heap@@0 T@U) (this@@0 T@U) (|x#0@@0| Int) ) (!  (=> (or (|_module.VariousArrows.G_k#canCall| $Heap@@0 this@@0 |x#0@@0|) (and (< 0 $FunctionContextHeight) (and ($IsGoodHeap $Heap@@0) (and (or (not (= this@@0 null)) (not true)) (and ($Is refType this@@0 Tclass._module.VariousArrows) ($IsAlloc refType this@@0 Tclass._module.VariousArrows $Heap@@0)))))) ($Is charType (_module.VariousArrows.G_k $Heap@@0 this@@0 |x#0@@0|) TChar))
 :pattern ( (_module.VariousArrows.G_k $Heap@@0 this@@0 |x#0@@0|))
))))
(assert (= (Tag TChar) TagChar))
(assert (= (Tag TInt) TagInt))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((this@@1 T@U) (|x#0@@1| Int) ) (!  (=> (or (|_module.VariousArrows.F_k#canCall| this@@1 |x#0@@1|) (and (< 0 $FunctionContextHeight) (and (and (or (not (= this@@1 null)) (not true)) ($Is refType this@@1 Tclass._module.VariousArrows)) (U_2_bool (Lit boolType (bool_2_U true)))))) ($Is charType (_module.VariousArrows.F_k this@@1 |x#0@@1|) TChar))
 :pattern ( (_module.VariousArrows.F_k this@@1 |x#0@@1|))
))))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((this@@2 T@U) (|x#0@@2| Int) ) (!  (=> (or (|_module.VariousArrows.G#canCall| this@@2 |x#0@@2|) (and (< 0 $FunctionContextHeight) (and (and (or (not (= this@@2 null)) (not true)) ($Is refType this@@2 Tclass._module.VariousArrows)) (< |x#0@@2| 1900)))) (= (_module.VariousArrows.G this@@2 |x#0@@2|) (Lit charType (|char#FromInt| 68))))
 :pattern ( (_module.VariousArrows.G this@@2 |x#0@@2|))
))))
(assert (forall ((this@@3 T@U) (|x#0@@3| Int) ) (!  (=> (and (or (not (= this@@3 null)) (not true)) ($Is refType this@@3 Tclass._module.VariousArrows)) (= (|_module.VariousArrows.F_k#requires| this@@3 |x#0@@3|) (U_2_bool (Lit boolType (bool_2_U true)))))
 :pattern ( (|_module.VariousArrows.F_k#requires| this@@3 |x#0@@3|))
)))
(assert (forall ((o T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o))
 :pattern ( (|Set#IsMember| |Set#Empty| o))
)))
(assert (forall (($o T@U) ) (! (= ($Is refType $o Tclass._module.VariousArrows?)  (or (= $o null) (= (dtype $o) Tclass._module.VariousArrows?)))
 :pattern ( ($Is refType $o Tclass._module.VariousArrows?))
)))
(assert (= (Ctor HandleTypeType) 5))
(assert (forall ((f T@U) (t0 T@U) (t1 T@U) (u0 T@U) (u1 T@U) ) (!  (=> (and (and ($Is HandleTypeType f (Tclass._System.___hFunc1 t0 t1)) (forall ((bx T@U) ) (!  (=> ($IsBox bx u0) ($IsBox bx t0))
 :pattern ( ($IsBox bx u0))
 :pattern ( ($IsBox bx t0))
))) (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 t1) ($IsBox bx@@0 u1))
 :pattern ( ($IsBox bx@@0 t1))
 :pattern ( ($IsBox bx@@0 u1))
))) ($Is HandleTypeType f (Tclass._System.___hFunc1 u0 u1)))
 :pattern ( ($Is HandleTypeType f (Tclass._System.___hFunc1 t0 t1)) ($Is HandleTypeType f (Tclass._System.___hFunc1 u0 u1)))
)))
(assert (forall ((|c#0| T@U) ($h T@U) ) (! (= ($IsAlloc refType |c#0| Tclass._module.VariousArrows $h) ($IsAlloc refType |c#0| Tclass._module.VariousArrows? $h))
 :pattern ( ($IsAlloc refType |c#0| Tclass._module.VariousArrows $h))
 :pattern ( ($IsAlloc refType |c#0| Tclass._module.VariousArrows? $h))
)))
(assert  (and (and (and (and (and (and (forall ((t0@@0 T@T) (t1@@0 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0@@0 t1@@0 (MapType0Store t0@@0 t1@@0 m x0 val) x0) val)
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0@@0 u1@@0 (MapType0Store u0@@0 u1@@0 m@@0 x0@@0 val@@0) y0) (MapType0Select u0@@0 u1@@0 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 6)) (= (Ctor BoxType) 7)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 8))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall (($h0 T@U) ($h1 T@U) (this@@4 T@U) (|x#0@@4| Int) ) (!  (=> (and (and (and ($IsGoodHeap $h0) ($IsGoodHeap $h1)) (and (or (not (= this@@4 null)) (not true)) ($Is refType this@@4 Tclass._module.VariousArrows))) (and ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1))) (=> (forall (($o@@0 T@U) ($f T@U) )  (=> (and (or (not (= $o@@0 null)) (not true)) (= $o@@0 this@@4)) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0 $o@@0) $f) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1 $o@@0) $f)))) (= (_module.VariousArrows.G_k $h0 this@@4 |x#0@@4|) (_module.VariousArrows.G_k $h1 this@@4 |x#0@@4|))))
 :pattern ( ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1) (_module.VariousArrows.G_k $h1 this@@4 |x#0@@4|))
)))
(assert (forall (($bx T@U) ($self T@U) ($heap T@U) (|$fh$0x#0| T@U) ) (! (= (|Set#IsMember| (Reads1 TInt TChar $heap (|_module.VariousArrows.G_k#Handle| $self) |$fh$0x#0|) $bx) (= ($Unbox refType $bx) $self))
 :pattern ( (|Set#IsMember| (Reads1 TInt TChar $heap (|_module.VariousArrows.G_k#Handle| $self) |$fh$0x#0|) $bx))
)))
(assert (forall (($o@@1 T@U) ($h@@0 T@U) ) (! (= ($IsAlloc refType $o@@1 Tclass._module.VariousArrows? $h@@0)  (or (= $o@@1 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@0 $o@@1) alloc)))))
 :pattern ( ($IsAlloc refType $o@@1 Tclass._module.VariousArrows? $h@@0))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((this@@5 T@U) (|x#0@@5| Int) ) (!  (=> (or (|_module.VariousArrows.G#canCall| this@@5 (LitInt |x#0@@5|)) (and (< 0 $FunctionContextHeight) (and (and (or (not (= this@@5 null)) (not true)) ($Is refType this@@5 Tclass._module.VariousArrows)) (U_2_bool (Lit boolType (bool_2_U (< |x#0@@5| 1900))))))) (= (_module.VariousArrows.G this@@5 (LitInt |x#0@@5|)) (Lit charType (|char#FromInt| 68))))
 :weight 3
 :pattern ( (_module.VariousArrows.G this@@5 (LitInt |x#0@@5|)))
))))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o@@0 T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o@@0) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o@@0) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o@@0) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((this@@6 T@U) (|x#0@@6| Int) ) (!  (=> (or (|_module.VariousArrows.G#canCall| this@@6 |x#0@@6|) (and (< 0 $FunctionContextHeight) (and (and (or (not (= this@@6 null)) (not true)) ($Is refType this@@6 Tclass._module.VariousArrows)) (< |x#0@@6| 1900)))) ($Is charType (_module.VariousArrows.G this@@6 |x#0@@6|) TChar))
 :pattern ( (_module.VariousArrows.G this@@6 |x#0@@6|))
))))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((t0@@1 T@U) (t1@@1 T@U) (heap T@U) (f@@0 T@U) (bx0 T@U) ) (!  (=> (and ($IsGoodHeap heap) (and ($IsBox bx0 t0@@1) ($Is HandleTypeType f@@0 (Tclass._System.___hFunc1 t0@@1 t1@@1)))) (= (|Set#Equal| (Reads1 t0@@1 t1@@1 $OneHeap f@@0 bx0) |Set#Empty|) (|Set#Equal| (Reads1 t0@@1 t1@@1 heap f@@0 bx0) |Set#Empty|)))
 :pattern ( (Reads1 t0@@1 t1@@1 $OneHeap f@@0 bx0) ($IsGoodHeap heap))
 :pattern ( (Reads1 t0@@1 t1@@1 heap f@@0 bx0))
)))
(assert (forall (($self@@0 T@U) ($heap@@0 T@U) (|$fh$0x#0@@0| Int) ) (! (= (_module.VariousArrows.F $self@@0 |$fh$0x#0@@0|) ($Unbox charType (Apply1 TInt TChar $heap@@0 (|_module.VariousArrows.F#Handle| $self@@0) ($Box intType (int_2_U |$fh$0x#0@@0|)))))
 :pattern ( (_module.VariousArrows.F $self@@0 |$fh$0x#0@@0|) ($IsGoodHeap $heap@@0))
)))
(assert (forall (($self@@1 T@U) ($heap@@1 T@U) (|$fh$0x#0@@1| Int) ) (! (= (_module.VariousArrows.F_k $self@@1 |$fh$0x#0@@1|) ($Unbox charType (Apply1 TInt TChar $heap@@1 (|_module.VariousArrows.F_k#Handle| $self@@1) ($Box intType (int_2_U |$fh$0x#0@@1|)))))
 :pattern ( (_module.VariousArrows.F_k $self@@1 |$fh$0x#0@@1|) ($IsGoodHeap $heap@@1))
)))
(assert (forall (($self@@2 T@U) ($heap@@2 T@U) (|$fh$0x#0@@2| Int) ) (! (= (_module.VariousArrows.G $self@@2 |$fh$0x#0@@2|) ($Unbox charType (Apply1 TInt TChar $heap@@2 (|_module.VariousArrows.G#Handle| $self@@2) ($Box intType (int_2_U |$fh$0x#0@@2|)))))
 :pattern ( (_module.VariousArrows.G $self@@2 |$fh$0x#0@@2|) ($IsGoodHeap $heap@@2))
)))
(assert (forall (($self@@3 T@U) ($heap@@3 T@U) (|$fh$0x#0@@3| T@U) ) (! (= (Requires1 TInt TChar $heap@@3 (|_module.VariousArrows.F_k_k#Handle| $self@@3) |$fh$0x#0@@3|) (|_module.VariousArrows.F_k_k#requires| $heap@@3 $self@@3 (U_2_int ($Unbox intType |$fh$0x#0@@3|))))
 :pattern ( (Requires1 TInt TChar $heap@@3 (|_module.VariousArrows.F_k_k#Handle| $self@@3) |$fh$0x#0@@3|))
)))
(assert (forall (($self@@4 T@U) ($heap@@4 T@U) (|$fh$0x#0@@4| T@U) ) (! (= (Requires1 TInt TChar $heap@@4 (|_module.VariousArrows.G_k#Handle| $self@@4) |$fh$0x#0@@4|) (|_module.VariousArrows.G_k#requires| $heap@@4 $self@@4 (U_2_int ($Unbox intType |$fh$0x#0@@4|))))
 :pattern ( (Requires1 TInt TChar $heap@@4 (|_module.VariousArrows.G_k#Handle| $self@@4) |$fh$0x#0@@4|))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall (($self@@5 T@U) ($heap@@5 T@U) (|$fh$0x#0@@5| T@U) ) (! (= (Requires1 TInt TChar $heap@@5 (|_module.VariousArrows.F#Handle| $self@@5) |$fh$0x#0@@5|) (|_module.VariousArrows.F#requires| $self@@5 (U_2_int ($Unbox intType |$fh$0x#0@@5|))))
 :pattern ( (Requires1 TInt TChar $heap@@5 (|_module.VariousArrows.F#Handle| $self@@5) |$fh$0x#0@@5|))
)))
(assert (forall (($self@@6 T@U) ($heap@@6 T@U) (|$fh$0x#0@@6| T@U) ) (! (= (Requires1 TInt TChar $heap@@6 (|_module.VariousArrows.F_k#Handle| $self@@6) |$fh$0x#0@@6|) (|_module.VariousArrows.F_k#requires| $self@@6 (U_2_int ($Unbox intType |$fh$0x#0@@6|))))
 :pattern ( (Requires1 TInt TChar $heap@@6 (|_module.VariousArrows.F_k#Handle| $self@@6) |$fh$0x#0@@6|))
)))
(assert (forall (($self@@7 T@U) ($heap@@7 T@U) (|$fh$0x#0@@7| T@U) ) (! (= (Requires1 TInt TChar $heap@@7 (|_module.VariousArrows.G#Handle| $self@@7) |$fh$0x#0@@7|) (|_module.VariousArrows.G#requires| $self@@7 (U_2_int ($Unbox intType |$fh$0x#0@@7|))))
 :pattern ( (Requires1 TInt TChar $heap@@7 (|_module.VariousArrows.G#Handle| $self@@7) |$fh$0x#0@@7|))
)))
(assert (forall ((t0@@2 T@U) (t1@@2 T@U) (h0 T@U) (h1 T@U) (f@@1 T@U) (bx0@@0 T@U) ) (!  (=> (and (and (and ($HeapSucc h0 h1) (and ($IsGoodHeap h0) ($IsGoodHeap h1))) (and ($IsBox bx0@@0 t0@@2) ($Is HandleTypeType f@@1 (Tclass._System.___hFunc1 t0@@2 t1@@2)))) (forall ((o@@1 T@U) (fld T@U) )  (=> (and (or (not (= o@@1 null)) (not true)) (|Set#IsMember| (Reads1 t0@@2 t1@@2 h0 f@@1 bx0@@0) ($Box refType o@@1))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0 o@@1) fld) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1 o@@1) fld))))) (= (Requires1 t0@@2 t1@@2 h0 f@@1 bx0@@0) (Requires1 t0@@2 t1@@2 h1 f@@1 bx0@@0)))
 :pattern ( ($HeapSucc h0 h1) (Requires1 t0@@2 t1@@2 h1 f@@1 bx0@@0))
)))
(assert (forall ((t0@@3 T@U) (t1@@3 T@U) (h0@@0 T@U) (h1@@0 T@U) (f@@2 T@U) (bx0@@1 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@0 h1@@0) (and ($IsGoodHeap h0@@0) ($IsGoodHeap h1@@0))) (and ($IsBox bx0@@1 t0@@3) ($Is HandleTypeType f@@2 (Tclass._System.___hFunc1 t0@@3 t1@@3)))) (forall ((o@@2 T@U) (fld@@0 T@U) )  (=> (and (or (not (= o@@2 null)) (not true)) (|Set#IsMember| (Reads1 t0@@3 t1@@3 h1@@0 f@@2 bx0@@1) ($Box refType o@@2))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0@@0 o@@2) fld@@0) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1@@0 o@@2) fld@@0))))) (= (Requires1 t0@@3 t1@@3 h0@@0 f@@2 bx0@@1) (Requires1 t0@@3 t1@@3 h1@@0 f@@2 bx0@@1)))
 :pattern ( ($HeapSucc h0@@0 h1@@0) (Requires1 t0@@3 t1@@3 h1@@0 f@@2 bx0@@1))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((this@@7 T@U) (|x#0@@7| Int) ) (!  (=> (or (|_module.VariousArrows.F#canCall| this@@7 |x#0@@7|) (and (< 0 $FunctionContextHeight) (and (or (not (= this@@7 null)) (not true)) ($Is refType this@@7 Tclass._module.VariousArrows)))) (= (_module.VariousArrows.F this@@7 |x#0@@7|) (Lit charType (|char#FromInt| 68))))
 :pattern ( (_module.VariousArrows.F this@@7 |x#0@@7|))
))))
(assert ($IsGoodHeap $OneHeap))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((this@@8 T@U) (|x#0@@8| Int) ) (!  (=> (or (|_module.VariousArrows.F_k#canCall| (Lit refType this@@8) (LitInt |x#0@@8|)) (and (< 0 $FunctionContextHeight) (and (and (or (not (= this@@8 null)) (not true)) ($Is refType this@@8 Tclass._module.VariousArrows)) (U_2_bool (Lit boolType (bool_2_U true)))))) (= (_module.VariousArrows.F_k (Lit refType this@@8) (LitInt |x#0@@8|)) (Lit charType (|char#FromInt| 68))))
 :weight 3
 :pattern ( (_module.VariousArrows.F_k (Lit refType this@@8) (LitInt |x#0@@8|)))
))))
(assert (forall ((v T@U) (t T@U) (h@@0 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v) t h@@0) ($IsAlloc T@@1 v t h@@0))
 :pattern ( ($IsAllocBox ($Box T@@1 v) t h@@0))
)))
(assert (forall ((h@@1 T@U) (k@@0 T@U) (bx@@1 T@U) (t@@0 T@U) ) (!  (=> ($HeapSucc h@@1 k@@0) (=> ($IsAllocBox bx@@1 t@@0 h@@1) ($IsAllocBox bx@@1 t@@0 k@@0)))
 :pattern ( ($HeapSucc h@@1 k@@0) ($IsAllocBox bx@@1 t@@0 h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@1 T@U) (v@@0 T@U) (t@@1 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@2 k@@1) (=> ($IsAlloc T@@2 v@@0 t@@1 h@@2) ($IsAlloc T@@2 v@@0 t@@1 k@@1)))
 :pattern ( ($HeapSucc h@@2 k@@1) ($IsAlloc T@@2 v@@0 t@@1 h@@2))
)))
(assert (forall ((t0@@4 T@U) (t1@@4 T@U) (h0@@1 T@U) (h1@@1 T@U) (f@@3 T@U) (bx0@@2 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@1 h1@@1) (and ($IsGoodHeap h0@@1) ($IsGoodHeap h1@@1))) (and ($IsBox bx0@@2 t0@@4) ($Is HandleTypeType f@@3 (Tclass._System.___hFunc1 t0@@4 t1@@4)))) (forall ((o@@3 T@U) (fld@@1 T@U) )  (=> (and (or (not (= o@@3 null)) (not true)) (|Set#IsMember| (Reads1 t0@@4 t1@@4 h0@@1 f@@3 bx0@@2) ($Box refType o@@3))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0@@1 o@@3) fld@@1) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1@@1 o@@3) fld@@1))))) (= (Reads1 t0@@4 t1@@4 h0@@1 f@@3 bx0@@2) (Reads1 t0@@4 t1@@4 h1@@1 f@@3 bx0@@2)))
 :pattern ( ($HeapSucc h0@@1 h1@@1) (Reads1 t0@@4 t1@@4 h1@@1 f@@3 bx0@@2))
)))
(assert (forall ((t0@@5 T@U) (t1@@5 T@U) (h0@@2 T@U) (h1@@2 T@U) (f@@4 T@U) (bx0@@3 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@2 h1@@2) (and ($IsGoodHeap h0@@2) ($IsGoodHeap h1@@2))) (and ($IsBox bx0@@3 t0@@5) ($Is HandleTypeType f@@4 (Tclass._System.___hFunc1 t0@@5 t1@@5)))) (forall ((o@@4 T@U) (fld@@2 T@U) )  (=> (and (or (not (= o@@4 null)) (not true)) (|Set#IsMember| (Reads1 t0@@5 t1@@5 h1@@2 f@@4 bx0@@3) ($Box refType o@@4))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0@@2 o@@4) fld@@2) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1@@2 o@@4) fld@@2))))) (= (Reads1 t0@@5 t1@@5 h0@@2 f@@4 bx0@@3) (Reads1 t0@@5 t1@@5 h1@@2 f@@4 bx0@@3)))
 :pattern ( ($HeapSucc h0@@2 h1@@2) (Reads1 t0@@5 t1@@5 h1@@2 f@@4 bx0@@3))
)))
(assert (forall ((t0@@6 T@U) (t1@@6 T@U) (h0@@3 T@U) (h1@@3 T@U) (f@@5 T@U) (bx0@@4 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@3 h1@@3) (and ($IsGoodHeap h0@@3) ($IsGoodHeap h1@@3))) (and ($IsBox bx0@@4 t0@@6) ($Is HandleTypeType f@@5 (Tclass._System.___hFunc1 t0@@6 t1@@6)))) (forall ((o@@5 T@U) (fld@@3 T@U) )  (=> (and (or (not (= o@@5 null)) (not true)) (|Set#IsMember| (Reads1 t0@@6 t1@@6 h0@@3 f@@5 bx0@@4) ($Box refType o@@5))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0@@3 o@@5) fld@@3) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1@@3 o@@5) fld@@3))))) (= (Apply1 t0@@6 t1@@6 h0@@3 f@@5 bx0@@4) (Apply1 t0@@6 t1@@6 h1@@3 f@@5 bx0@@4)))
 :pattern ( ($HeapSucc h0@@3 h1@@3) (Apply1 t0@@6 t1@@6 h1@@3 f@@5 bx0@@4))
)))
(assert (forall ((t0@@7 T@U) (t1@@7 T@U) (h0@@4 T@U) (h1@@4 T@U) (f@@6 T@U) (bx0@@5 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@4 h1@@4) (and ($IsGoodHeap h0@@4) ($IsGoodHeap h1@@4))) (and ($IsBox bx0@@5 t0@@7) ($Is HandleTypeType f@@6 (Tclass._System.___hFunc1 t0@@7 t1@@7)))) (forall ((o@@6 T@U) (fld@@4 T@U) )  (=> (and (or (not (= o@@6 null)) (not true)) (|Set#IsMember| (Reads1 t0@@7 t1@@7 h1@@4 f@@6 bx0@@5) ($Box refType o@@6))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0@@4 o@@6) fld@@4) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1@@4 o@@6) fld@@4))))) (= (Apply1 t0@@7 t1@@7 h0@@4 f@@6 bx0@@5) (Apply1 t0@@7 t1@@7 h1@@4 f@@6 bx0@@5)))
 :pattern ( ($HeapSucc h0@@4 h1@@4) (Apply1 t0@@7 t1@@7 h1@@4 f@@6 bx0@@5))
)))
(assert (forall (($Heap@@1 T@U) (this@@9 T@U) (|x#0@@9| Int) ) (!  (=> (and ($IsGoodHeap $Heap@@1) (and (or (not (= this@@9 null)) (not true)) (and ($Is refType this@@9 Tclass._module.VariousArrows) ($IsAlloc refType this@@9 Tclass._module.VariousArrows $Heap@@1)))) (= (|_module.VariousArrows.F_k_k#requires| $Heap@@1 this@@9 |x#0@@9|) true))
 :pattern ( (|_module.VariousArrows.F_k_k#requires| $Heap@@1 this@@9 |x#0@@9|) ($IsGoodHeap $Heap@@1))
)))
(assert (forall (($Heap@@2 T@U) (this@@10 T@U) (|x#0@@10| Int) ) (!  (=> (and ($IsGoodHeap $Heap@@2) (and (or (not (= this@@10 null)) (not true)) (and ($Is refType this@@10 Tclass._module.VariousArrows) ($IsAlloc refType this@@10 Tclass._module.VariousArrows $Heap@@2)))) (= (|_module.VariousArrows.G_k#requires| $Heap@@2 this@@10 |x#0@@10|) true))
 :pattern ( (|_module.VariousArrows.G_k#requires| $Heap@@2 this@@10 |x#0@@10|) ($IsGoodHeap $Heap@@2))
)))
(assert (forall ((|#$T0| T@U) (|#$R| T@U) (|f#0| T@U) ($h@@1 T@U) ) (! (= ($IsAlloc HandleTypeType |f#0| (Tclass._System.___hPartialFunc1 |#$T0| |#$R|) $h@@1) ($IsAlloc HandleTypeType |f#0| (Tclass._System.___hFunc1 |#$T0| |#$R|) $h@@1))
 :pattern ( ($IsAlloc HandleTypeType |f#0| (Tclass._System.___hPartialFunc1 |#$T0| |#$R|) $h@@1))
)))
(assert (forall ((|#$T0@@0| T@U) (|#$R@@0| T@U) (|f#0@@0| T@U) ($h@@2 T@U) ) (! (= ($IsAlloc HandleTypeType |f#0@@0| (Tclass._System.___hTotalFunc1 |#$T0@@0| |#$R@@0|) $h@@2) ($IsAlloc HandleTypeType |f#0@@0| (Tclass._System.___hPartialFunc1 |#$T0@@0| |#$R@@0|) $h@@2))
 :pattern ( ($IsAlloc HandleTypeType |f#0@@0| (Tclass._System.___hTotalFunc1 |#$T0@@0| |#$R@@0|) $h@@2))
)))
(assert (forall ((bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 Tclass._module.VariousArrows?) (and (= ($Box refType ($Unbox refType bx@@2)) bx@@2) ($Is refType ($Unbox refType bx@@2) Tclass._module.VariousArrows?)))
 :pattern ( ($IsBox bx@@2 Tclass._module.VariousArrows?))
)))
(assert (forall ((bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 Tclass._module.VariousArrows) (and (= ($Box refType ($Unbox refType bx@@3)) bx@@3) ($Is refType ($Unbox refType bx@@3) Tclass._module.VariousArrows)))
 :pattern ( ($IsBox bx@@3 Tclass._module.VariousArrows))
)))
(assert (forall (($self@@8 T@U) ($heap@@8 T@U) (|$fh$0x#0@@8| T@U) ) (! (= (Apply1 TInt TChar $heap@@8 (|_module.VariousArrows.F_k_k#Handle| $self@@8) |$fh$0x#0@@8|) ($Box charType (_module.VariousArrows.F_k_k $heap@@8 $self@@8 (U_2_int ($Unbox intType |$fh$0x#0@@8|)))))
 :pattern ( (Apply1 TInt TChar $heap@@8 (|_module.VariousArrows.F_k_k#Handle| $self@@8) |$fh$0x#0@@8|))
)))
(assert (forall (($self@@9 T@U) ($heap@@9 T@U) (|$fh$0x#0@@9| T@U) ) (! (= (Apply1 TInt TChar $heap@@9 (|_module.VariousArrows.G_k#Handle| $self@@9) |$fh$0x#0@@9|) ($Box charType (_module.VariousArrows.G_k $heap@@9 $self@@9 (U_2_int ($Unbox intType |$fh$0x#0@@9|)))))
 :pattern ( (Apply1 TInt TChar $heap@@9 (|_module.VariousArrows.G_k#Handle| $self@@9) |$fh$0x#0@@9|))
)))
(assert (forall ((|c#0@@0| T@U) ) (! (= ($Is refType |c#0@@0| Tclass._module.VariousArrows)  (and ($Is refType |c#0@@0| Tclass._module.VariousArrows?) (or (not (= |c#0@@0| null)) (not true))))
 :pattern ( ($Is refType |c#0@@0| Tclass._module.VariousArrows))
 :pattern ( ($Is refType |c#0@@0| Tclass._module.VariousArrows?))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((this@@11 T@U) (|x#0@@11| Int) ) (!  (=> (or (|_module.VariousArrows.F#canCall| this@@11 (LitInt |x#0@@11|)) (and (< 0 $FunctionContextHeight) (and (or (not (= this@@11 null)) (not true)) ($Is refType this@@11 Tclass._module.VariousArrows)))) (= (_module.VariousArrows.F this@@11 (LitInt |x#0@@11|)) (Lit charType (|char#FromInt| 68))))
 :weight 3
 :pattern ( (_module.VariousArrows.F this@@11 (LitInt |x#0@@11|)))
))))
(assert (forall (($self@@10 T@U) ($heap@@10 T@U) (|$fh$0x#0@@10| T@U) ) (! (= (Apply1 TInt TChar $heap@@10 (|_module.VariousArrows.F#Handle| $self@@10) |$fh$0x#0@@10|) ($Box charType (_module.VariousArrows.F $self@@10 (U_2_int ($Unbox intType |$fh$0x#0@@10|)))))
 :pattern ( (Apply1 TInt TChar $heap@@10 (|_module.VariousArrows.F#Handle| $self@@10) |$fh$0x#0@@10|))
)))
(assert (forall (($self@@11 T@U) ($heap@@11 T@U) (|$fh$0x#0@@11| T@U) ) (! (= (Apply1 TInt TChar $heap@@11 (|_module.VariousArrows.F_k#Handle| $self@@11) |$fh$0x#0@@11|) ($Box charType (_module.VariousArrows.F_k $self@@11 (U_2_int ($Unbox intType |$fh$0x#0@@11|)))))
 :pattern ( (Apply1 TInt TChar $heap@@11 (|_module.VariousArrows.F_k#Handle| $self@@11) |$fh$0x#0@@11|))
)))
(assert (forall (($self@@12 T@U) ($heap@@12 T@U) (|$fh$0x#0@@12| T@U) ) (! (= (Apply1 TInt TChar $heap@@12 (|_module.VariousArrows.G#Handle| $self@@12) |$fh$0x#0@@12|) ($Box charType (_module.VariousArrows.G $self@@12 (U_2_int ($Unbox intType |$fh$0x#0@@12|)))))
 :pattern ( (Apply1 TInt TChar $heap@@12 (|_module.VariousArrows.G#Handle| $self@@12) |$fh$0x#0@@12|))
)))
(assert (forall ((f@@7 T@U) (t0@@8 T@U) (t1@@8 T@U) (h@@3 T@U) ) (!  (=> (and ($IsGoodHeap h@@3) ($IsAlloc HandleTypeType f@@7 (Tclass._System.___hFunc1 t0@@8 t1@@8) h@@3)) (forall ((bx0@@6 T@U) ) (!  (=> (and ($IsAllocBox bx0@@6 t0@@8 h@@3) (Requires1 t0@@8 t1@@8 h@@3 f@@7 bx0@@6)) ($IsAllocBox (Apply1 t0@@8 t1@@8 h@@3 f@@7 bx0@@6) t1@@8 h@@3))
 :pattern ( (Apply1 t0@@8 t1@@8 h@@3 f@@7 bx0@@6))
)))
 :pattern ( ($IsAlloc HandleTypeType f@@7 (Tclass._System.___hFunc1 t0@@8 t1@@8) h@@3))
)))
(assert (forall ((this@@12 T@U) (|x#0@@12| Int) ) (!  (=> (and (or (not (= this@@12 null)) (not true)) ($Is refType this@@12 Tclass._module.VariousArrows)) (= (|_module.VariousArrows.G#requires| this@@12 |x#0@@12|) (< |x#0@@12| 1900)))
 :pattern ( (|_module.VariousArrows.G#requires| this@@12 |x#0@@12|))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((this@@13 T@U) (|x#0@@13| Int) ) (!  (=> (or (|_module.VariousArrows.F#canCall| this@@13 |x#0@@13|) (and (< 0 $FunctionContextHeight) (and (or (not (= this@@13 null)) (not true)) ($Is refType this@@13 Tclass._module.VariousArrows)))) ($Is charType (_module.VariousArrows.F this@@13 |x#0@@13|) TChar))
 :pattern ( (_module.VariousArrows.F this@@13 |x#0@@13|))
))))
(assert (forall ((a T@U) (b T@U) ) (!  (=> (|Set#Equal| a b) (= a b))
 :pattern ( (|Set#Equal| a b))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) (c T@U) ) (!  (=> (or (not (= a@@0 c)) (not true)) (=> (and ($HeapSucc a@@0 b@@0) ($HeapSucc b@@0 c)) ($HeapSucc a@@0 c)))
 :pattern ( ($HeapSucc a@@0 b@@0) ($HeapSucc b@@0 c))
)))
(assert (forall ((f@@8 T@U) (t0@@9 T@U) (t1@@9 T@U) ) (! (= ($Is HandleTypeType f@@8 (Tclass._System.___hFunc1 t0@@9 t1@@9)) (forall ((h@@4 T@U) (bx0@@7 T@U) ) (!  (=> (and (and ($IsGoodHeap h@@4) ($IsBox bx0@@7 t0@@9)) (Requires1 t0@@9 t1@@9 h@@4 f@@8 bx0@@7)) ($IsBox (Apply1 t0@@9 t1@@9 h@@4 f@@8 bx0@@7) t1@@9))
 :pattern ( (Apply1 t0@@9 t1@@9 h@@4 f@@8 bx0@@7))
)))
 :pattern ( ($Is HandleTypeType f@@8 (Tclass._System.___hFunc1 t0@@9 t1@@9)))
)))
(assert (forall ((bx@@4 T@U) ) (!  (=> ($IsBox bx@@4 TInt) (and (= ($Box intType ($Unbox intType bx@@4)) bx@@4) ($Is intType ($Unbox intType bx@@4) TInt)))
 :pattern ( ($IsBox bx@@4 TInt))
)))
(assert (forall ((bx@@5 T@U) ) (!  (=> ($IsBox bx@@5 TChar) (and (= ($Box charType ($Unbox charType bx@@5)) bx@@5) ($Is charType ($Unbox charType bx@@5) TChar)))
 :pattern ( ($IsBox bx@@5 TChar))
)))
(assert (forall ((v@@1 T@U) (t@@2 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@1) t@@2) ($Is T@@3 v@@1 t@@2))
 :pattern ( ($IsBox ($Box T@@3 v@@1) t@@2))
)))
(assert (forall (($self@@13 T@U) ($heap@@13 T@U) (|$fh$0x#0@@13| Int) ) (! (= (_module.VariousArrows.F_k_k $heap@@13 $self@@13 |$fh$0x#0@@13|) ($Unbox charType (Apply1 TInt TChar $heap@@13 (|_module.VariousArrows.F_k_k#Handle| $self@@13) ($Box intType (int_2_U |$fh$0x#0@@13|)))))
 :pattern ( (_module.VariousArrows.F_k_k $heap@@13 $self@@13 |$fh$0x#0@@13|))
)))
(assert (forall (($self@@14 T@U) ($heap@@14 T@U) (|$fh$0x#0@@14| Int) ) (! (= (_module.VariousArrows.G_k $heap@@14 $self@@14 |$fh$0x#0@@14|) ($Unbox charType (Apply1 TInt TChar $heap@@14 (|_module.VariousArrows.G_k#Handle| $self@@14) ($Box intType (int_2_U |$fh$0x#0@@14|)))))
 :pattern ( (_module.VariousArrows.G_k $heap@@14 $self@@14 |$fh$0x#0@@14|))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((this@@14 T@U) (|x#0@@14| Int) ) (!  (=> (or (|_module.VariousArrows.G#canCall| (Lit refType this@@14) (LitInt |x#0@@14|)) (and (< 0 $FunctionContextHeight) (and (and (or (not (= this@@14 null)) (not true)) ($Is refType this@@14 Tclass._module.VariousArrows)) (U_2_bool (Lit boolType (bool_2_U (< |x#0@@14| 1900))))))) (= (_module.VariousArrows.G (Lit refType this@@14) (LitInt |x#0@@14|)) (Lit charType (|char#FromInt| 68))))
 :weight 3
 :pattern ( (_module.VariousArrows.G (Lit refType this@@14) (LitInt |x#0@@14|)))
))))
(assert (forall ((|#$T0@@1| T@U) (|#$R@@1| T@U) ) (! (= (Tclass._System.___hFunc1_0 (Tclass._System.___hFunc1 |#$T0@@1| |#$R@@1|)) |#$T0@@1|)
 :pattern ( (Tclass._System.___hFunc1 |#$T0@@1| |#$R@@1|))
)))
(assert (forall ((|#$T0@@2| T@U) (|#$R@@2| T@U) ) (! (= (Tclass._System.___hFunc1_1 (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@2|)) |#$R@@2|)
 :pattern ( (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@2|))
)))
(assert (forall ((|#$T0@@3| T@U) (|#$R@@3| T@U) ) (! (= (Tclass._System.___hPartialFunc1_0 (Tclass._System.___hPartialFunc1 |#$T0@@3| |#$R@@3|)) |#$T0@@3|)
 :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@3| |#$R@@3|))
)))
(assert (forall ((|#$T0@@4| T@U) (|#$R@@4| T@U) ) (! (= (Tclass._System.___hPartialFunc1_1 (Tclass._System.___hPartialFunc1 |#$T0@@4| |#$R@@4|)) |#$R@@4|)
 :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@4| |#$R@@4|))
)))
(assert (forall ((|#$T0@@5| T@U) (|#$R@@5| T@U) ) (! (= (Tclass._System.___hTotalFunc1_0 (Tclass._System.___hTotalFunc1 |#$T0@@5| |#$R@@5|)) |#$T0@@5|)
 :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@5| |#$R@@5|))
)))
(assert (forall ((|#$T0@@6| T@U) (|#$R@@6| T@U) ) (! (= (Tclass._System.___hTotalFunc1_1 (Tclass._System.___hTotalFunc1 |#$T0@@6| |#$R@@6|)) |#$R@@6|)
 :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@6| |#$R@@6|))
)))
(assert (forall ((x@@5 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@5)) x@@5)
 :pattern ( ($Box T@@4 x@@5))
)))
(assert (forall ((|#$T0@@7| T@U) (|#$R@@7| T@U) (|f#0@@1| T@U) ) (! (= ($Is HandleTypeType |f#0@@1| (Tclass._System.___hTotalFunc1 |#$T0@@7| |#$R@@7|))  (and ($Is HandleTypeType |f#0@@1| (Tclass._System.___hPartialFunc1 |#$T0@@7| |#$R@@7|)) (forall ((|x0#0| T@U) )  (=> ($IsBox |x0#0| |#$T0@@7|) (Requires1 |#$T0@@7| |#$R@@7| $OneHeap |f#0@@1| |x0#0|)))))
 :pattern ( ($Is HandleTypeType |f#0@@1| (Tclass._System.___hTotalFunc1 |#$T0@@7| |#$R@@7|)))
)))
(assert (forall ((|#$T0@@8| T@U) (|#$R@@8| T@U) (|f#0@@2| T@U) ) (! (= ($Is HandleTypeType |f#0@@2| (Tclass._System.___hPartialFunc1 |#$T0@@8| |#$R@@8|))  (and ($Is HandleTypeType |f#0@@2| (Tclass._System.___hFunc1 |#$T0@@8| |#$R@@8|)) (forall ((|x0#0@@0| T@U) )  (=> ($IsBox |x0#0@@0| |#$T0@@8|) (|Set#Equal| (Reads1 |#$T0@@8| |#$R@@8| $OneHeap |f#0@@2| |x0#0@@0|) |Set#Empty|)))))
 :pattern ( ($Is HandleTypeType |f#0@@2| (Tclass._System.___hPartialFunc1 |#$T0@@8| |#$R@@8|)))
)))
(assert (forall ((n Int) ) (!  (=> (or (and (<= 0 n) (< n 55296)) (and (<= 57344 n) (< n 1114112))) (= (|char#ToInt| (|char#FromInt| n)) n))
 :pattern ( (|char#FromInt| n))
)))
(assert (forall ((f@@9 T@U) (t0@@10 T@U) (t1@@10 T@U) (h@@5 T@U) ) (!  (=> ($IsGoodHeap h@@5) (= ($IsAlloc HandleTypeType f@@9 (Tclass._System.___hFunc1 t0@@10 t1@@10) h@@5) (forall ((bx0@@8 T@U) ) (!  (=> (and (and ($IsBox bx0@@8 t0@@10) ($IsAllocBox bx0@@8 t0@@10 h@@5)) (Requires1 t0@@10 t1@@10 h@@5 f@@9 bx0@@8)) (forall ((r T@U) ) (!  (=> (and (or (not (= r null)) (not true)) (|Set#IsMember| (Reads1 t0@@10 t1@@10 h@@5 f@@9 bx0@@8) ($Box refType r))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@5 r) alloc))))
 :pattern ( (|Set#IsMember| (Reads1 t0@@10 t1@@10 h@@5 f@@9 bx0@@8) ($Box refType r)))
)))
 :pattern ( (Apply1 t0@@10 t1@@10 h@@5 f@@9 bx0@@8))
 :pattern ( (Reads1 t0@@10 t1@@10 h@@5 f@@9 bx0@@8))
))))
 :pattern ( ($IsAlloc HandleTypeType f@@9 (Tclass._System.___hFunc1 t0@@10 t1@@10) h@@5))
)))
(assert (forall ((|#$T0@@9| T@U) (|#$R@@9| T@U) (bx@@6 T@U) ) (!  (=> ($IsBox bx@@6 (Tclass._System.___hFunc1 |#$T0@@9| |#$R@@9|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@6)) bx@@6) ($Is HandleTypeType ($Unbox HandleTypeType bx@@6) (Tclass._System.___hFunc1 |#$T0@@9| |#$R@@9|))))
 :pattern ( ($IsBox bx@@6 (Tclass._System.___hFunc1 |#$T0@@9| |#$R@@9|)))
)))
(assert (forall ((|#$T0@@10| T@U) (|#$R@@10| T@U) (bx@@7 T@U) ) (!  (=> ($IsBox bx@@7 (Tclass._System.___hPartialFunc1 |#$T0@@10| |#$R@@10|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@7)) bx@@7) ($Is HandleTypeType ($Unbox HandleTypeType bx@@7) (Tclass._System.___hPartialFunc1 |#$T0@@10| |#$R@@10|))))
 :pattern ( ($IsBox bx@@7 (Tclass._System.___hPartialFunc1 |#$T0@@10| |#$R@@10|)))
)))
(assert (forall ((|#$T0@@11| T@U) (|#$R@@11| T@U) (bx@@8 T@U) ) (!  (=> ($IsBox bx@@8 (Tclass._System.___hTotalFunc1 |#$T0@@11| |#$R@@11|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@8)) bx@@8) ($Is HandleTypeType ($Unbox HandleTypeType bx@@8) (Tclass._System.___hTotalFunc1 |#$T0@@11| |#$R@@11|))))
 :pattern ( ($IsBox bx@@8 (Tclass._System.___hTotalFunc1 |#$T0@@11| |#$R@@11|)))
)))
(assert  (and (forall ((t0@@11 T@T) (t1@@11 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@11 t1@@11 t2 (MapType1Store t0@@11 t1@@11 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@1 T@T) (u1@@1 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@1 u1@@1 u2 (MapType1Store u0@@1 u1@@1 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@1 u1@@1 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@2 T@T) (u1@@2 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@2 u1@@2 u2@@0 (MapType1Store u0@@2 u1@@2 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@2 u1@@2 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o@@2 T@U) ($f@@0 T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@2 $f@@0))  (=> (and (or (not (= $o@@2 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@2) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@2 $f@@0))
)))
(assert (forall ((|#$T0@@12| T@U) (|#$R@@12| T@U) ) (!  (and (= (Tag (Tclass._System.___hFunc1 |#$T0@@12| |#$R@@12|)) Tagclass._System.___hFunc1) (= (TagFamily (Tclass._System.___hFunc1 |#$T0@@12| |#$R@@12|)) |tytagFamily$_#Func1|))
 :pattern ( (Tclass._System.___hFunc1 |#$T0@@12| |#$R@@12|))
)))
(assert (forall ((|#$T0@@13| T@U) (|#$R@@13| T@U) ) (!  (and (= (Tag (Tclass._System.___hPartialFunc1 |#$T0@@13| |#$R@@13|)) Tagclass._System.___hPartialFunc1) (= (TagFamily (Tclass._System.___hPartialFunc1 |#$T0@@13| |#$R@@13|)) |tytagFamily$_#PartialFunc1|))
 :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@13| |#$R@@13|))
)))
(assert (forall ((|#$T0@@14| T@U) (|#$R@@14| T@U) ) (!  (and (= (Tag (Tclass._System.___hTotalFunc1 |#$T0@@14| |#$R@@14|)) Tagclass._System.___hTotalFunc1) (= (TagFamily (Tclass._System.___hTotalFunc1 |#$T0@@14| |#$R@@14|)) |tytagFamily$_#TotalFunc1|))
 :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@14| |#$R@@14|))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($Heap@@3 T@U) (this@@15 T@U) (|x#0@@15| Int) ) (!  (=> (or (|_module.VariousArrows.F_k_k#canCall| $Heap@@3 this@@15 |x#0@@15|) (and (< 0 $FunctionContextHeight) (and ($IsGoodHeap $Heap@@3) (and (or (not (= this@@15 null)) (not true)) (and ($Is refType this@@15 Tclass._module.VariousArrows) ($IsAlloc refType this@@15 Tclass._module.VariousArrows $Heap@@3)))))) (= (_module.VariousArrows.F_k_k $Heap@@3 this@@15 |x#0@@15|) (Lit charType (|char#FromInt| 68))))
 :pattern ( (_module.VariousArrows.F_k_k $Heap@@3 this@@15 |x#0@@15|) ($IsGoodHeap $Heap@@3))
))))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($Heap@@4 T@U) (this@@16 T@U) (|x#0@@16| Int) ) (!  (=> (or (|_module.VariousArrows.G_k#canCall| $Heap@@4 this@@16 |x#0@@16|) (and (< 0 $FunctionContextHeight) (and ($IsGoodHeap $Heap@@4) (and (or (not (= this@@16 null)) (not true)) (and ($Is refType this@@16 Tclass._module.VariousArrows) ($IsAlloc refType this@@16 Tclass._module.VariousArrows $Heap@@4)))))) (= (_module.VariousArrows.G_k $Heap@@4 this@@16 |x#0@@16|) (Lit charType (|char#FromInt| 68))))
 :pattern ( (_module.VariousArrows.G_k $Heap@@4 this@@16 |x#0@@16|) ($IsGoodHeap $Heap@@4))
))))
(assert (forall ((t0@@12 T@U) (t1@@12 T@U) (heap@@0 T@U) (f@@10 T@U) (bx0@@9 T@U) ) (!  (=> (and (and ($IsGoodHeap heap@@0) (and ($IsBox bx0@@9 t0@@12) ($Is HandleTypeType f@@10 (Tclass._System.___hFunc1 t0@@12 t1@@12)))) (|Set#Equal| (Reads1 t0@@12 t1@@12 $OneHeap f@@10 bx0@@9) |Set#Empty|)) (= (Requires1 t0@@12 t1@@12 $OneHeap f@@10 bx0@@9) (Requires1 t0@@12 t1@@12 heap@@0 f@@10 bx0@@9)))
 :pattern ( (Requires1 t0@@12 t1@@12 $OneHeap f@@10 bx0@@9) ($IsGoodHeap heap@@0))
 :pattern ( (Requires1 t0@@12 t1@@12 heap@@0 f@@10 bx0@@9))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((this@@17 T@U) (|x#0@@17| Int) ) (!  (=> (or (|_module.VariousArrows.F_k#canCall| this@@17 |x#0@@17|) (and (< 0 $FunctionContextHeight) (and (and (or (not (= this@@17 null)) (not true)) ($Is refType this@@17 Tclass._module.VariousArrows)) (U_2_bool (Lit boolType (bool_2_U true)))))) (= (_module.VariousArrows.F_k this@@17 |x#0@@17|) (Lit charType (|char#FromInt| 68))))
 :pattern ( (_module.VariousArrows.F_k this@@17 |x#0@@17|))
))))
(assert (forall ((ch T@U) ) (!  (and (= (|char#FromInt| (|char#ToInt| ch)) ch) (or (and (<= 0 (|char#ToInt| ch)) (< (|char#ToInt| ch) 55296)) (and (<= 57344 (|char#ToInt| ch)) (< (|char#ToInt| ch) 1114112))))
 :pattern ( (|char#ToInt| ch))
)))
(assert (forall (($h0@@0 T@U) ($h1@@0 T@U) (this@@18 T@U) (|x#0@@18| Int) ) (!  (=> (and (and (and ($IsGoodHeap $h0@@0) ($IsGoodHeap $h1@@0)) (and (or (not (= this@@18 null)) (not true)) ($Is refType this@@18 Tclass._module.VariousArrows))) (and ($IsHeapAnchor $h0@@0) ($HeapSucc $h0@@0 $h1@@0))) (=> (forall (($o@@3 T@U) ($f@@1 T@U) ) true) (= (_module.VariousArrows.F_k_k $h0@@0 this@@18 |x#0@@18|) (_module.VariousArrows.F_k_k $h1@@0 this@@18 |x#0@@18|))))
 :pattern ( ($IsHeapAnchor $h0@@0) ($HeapSucc $h0@@0 $h1@@0) (_module.VariousArrows.F_k_k $h1@@0 this@@18 |x#0@@18|))
)))
(assert (= (Tag Tclass._module.VariousArrows?) Tagclass._module.VariousArrows?))
(assert (= (TagFamily Tclass._module.VariousArrows?) tytagFamily$VariousArrows))
(assert (= (Tag Tclass._module.VariousArrows) Tagclass._module.VariousArrows))
(assert (= (TagFamily Tclass._module.VariousArrows) tytagFamily$VariousArrows))
(assert (forall (($bx@@0 T@U) ($self@@15 T@U) ($heap@@15 T@U) (|$fh$0x#0@@15| T@U) ) (! (= (|Set#IsMember| (Reads1 TInt TChar $heap@@15 (|_module.VariousArrows.F#Handle| $self@@15) |$fh$0x#0@@15|) $bx@@0) false)
 :pattern ( (|Set#IsMember| (Reads1 TInt TChar $heap@@15 (|_module.VariousArrows.F#Handle| $self@@15) |$fh$0x#0@@15|) $bx@@0))
)))
(assert (forall (($bx@@1 T@U) ($self@@16 T@U) ($heap@@16 T@U) (|$fh$0x#0@@16| T@U) ) (! (= (|Set#IsMember| (Reads1 TInt TChar $heap@@16 (|_module.VariousArrows.F_k#Handle| $self@@16) |$fh$0x#0@@16|) $bx@@1) false)
 :pattern ( (|Set#IsMember| (Reads1 TInt TChar $heap@@16 (|_module.VariousArrows.F_k#Handle| $self@@16) |$fh$0x#0@@16|) $bx@@1))
)))
(assert (forall (($bx@@2 T@U) ($self@@17 T@U) ($heap@@17 T@U) (|$fh$0x#0@@17| T@U) ) (! (= (|Set#IsMember| (Reads1 TInt TChar $heap@@17 (|_module.VariousArrows.F_k_k#Handle| $self@@17) |$fh$0x#0@@17|) $bx@@2) false)
 :pattern ( (|Set#IsMember| (Reads1 TInt TChar $heap@@17 (|_module.VariousArrows.F_k_k#Handle| $self@@17) |$fh$0x#0@@17|) $bx@@2))
)))
(assert (forall (($bx@@3 T@U) ($self@@18 T@U) ($heap@@18 T@U) (|$fh$0x#0@@18| T@U) ) (! (= (|Set#IsMember| (Reads1 TInt TChar $heap@@18 (|_module.VariousArrows.G#Handle| $self@@18) |$fh$0x#0@@18|) $bx@@3) false)
 :pattern ( (|Set#IsMember| (Reads1 TInt TChar $heap@@18 (|_module.VariousArrows.G#Handle| $self@@18) |$fh$0x#0@@18|) $bx@@3))
)))
(assert (forall ((a@@1 T@U) (b@@1 T@U) ) (! (= (|Set#Equal| a@@1 b@@1) (forall ((o@@7 T@U) ) (! (= (|Set#IsMember| a@@1 o@@7) (|Set#IsMember| b@@1 o@@7))
 :pattern ( (|Set#IsMember| a@@1 o@@7))
 :pattern ( (|Set#IsMember| b@@1 o@@7))
)))
 :pattern ( (|Set#Equal| a@@1 b@@1))
)))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((x@@7 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@7)) (Lit BoxType ($Box T@@5 x@@7)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@7)))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((this@@19 T@U) (|x#0@@19| Int) ) (!  (=> (or (|_module.VariousArrows.F_k#canCall| this@@19 (LitInt |x#0@@19|)) (and (< 0 $FunctionContextHeight) (and (and (or (not (= this@@19 null)) (not true)) ($Is refType this@@19 Tclass._module.VariousArrows)) (U_2_bool (Lit boolType (bool_2_U true)))))) (= (_module.VariousArrows.F_k this@@19 (LitInt |x#0@@19|)) (Lit charType (|char#FromInt| 68))))
 :weight 3
 :pattern ( (_module.VariousArrows.F_k this@@19 (LitInt |x#0@@19|)))
))))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((this@@20 T@U) (|x#0@@20| Int) ) (!  (=> (or (|_module.VariousArrows.F#canCall| (Lit refType this@@20) (LitInt |x#0@@20|)) (and (< 0 $FunctionContextHeight) (and (or (not (= this@@20 null)) (not true)) ($Is refType this@@20 Tclass._module.VariousArrows)))) (= (_module.VariousArrows.F (Lit refType this@@20) (LitInt |x#0@@20|)) (Lit charType (|char#FromInt| 68))))
 :weight 3
 :pattern ( (_module.VariousArrows.F (Lit refType this@@20) (LitInt |x#0@@20|)))
))))
(assert (forall ((this@@21 T@U) (|x#0@@21| Int) ) (!  (=> (and (or (not (= this@@21 null)) (not true)) ($Is refType this@@21 Tclass._module.VariousArrows)) (= (|_module.VariousArrows.F#requires| this@@21 |x#0@@21|) true))
 :pattern ( (|_module.VariousArrows.F#requires| this@@21 |x#0@@21|))
)))
(assert (forall ((h@@6 T@U) (v@@2 T@U) ) (! ($IsAlloc intType v@@2 TInt h@@6)
 :pattern ( ($IsAlloc intType v@@2 TInt h@@6))
)))
(assert (forall ((h@@7 T@U) (v@@3 T@U) ) (! ($IsAlloc charType v@@3 TChar h@@7)
 :pattern ( ($IsAlloc charType v@@3 TChar h@@7))
)))
(assert (forall ((v@@4 T@U) ) (! ($Is intType v@@4 TInt)
 :pattern ( ($Is intType v@@4 TInt))
)))
(assert (forall ((v@@5 T@U) ) (! ($Is charType v@@5 TChar)
 :pattern ( ($Is charType v@@5 TChar))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun this@@22 () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun $Heap@@5 () T@U)
(declare-fun |f##0@0| () T@U)
(declare-fun |call4formal@a#0| () T@U)
(declare-fun call0formal@_module.VariousArrows.InitArray$D () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun |call4formal@a#0@0| () T@U)
(declare-fun |$rhs##0@0| () T@U)
(declare-fun |f##1@0| () T@U)
(declare-fun |call4formal@a#0@@0| () T@U)
(declare-fun call0formal@_module.VariousArrows.InitArray$D@@0 () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun |call4formal@a#0@0@@0| () T@U)
(declare-fun |$rhs##1@0| () T@U)
(declare-fun |f##2@0| () T@U)
(declare-fun |call4formal@a#0@@1| () T@U)
(declare-fun call0formal@_module.VariousArrows.InitArray$D@@1 () T@U)
(declare-fun $Heap@2 () T@U)
(declare-fun |call4formal@a#0@0@@1| () T@U)
(declare-fun |$rhs##2@0| () T@U)
(declare-fun |c#0@@1| () T@U)
(declare-fun |d#0| () T@U)
(declare-fun |e#0| () T@U)
(declare-fun |f#0_0| () T@U)
(declare-fun |g#1_0| () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 13) (let ((anon3_Else_correct  (and (=> (= (ControlFlow 0 5) (- 0 6)) (or (not (= 0 $FunctionContextHeight)) (not true))) (=> (or (not (= 0 $FunctionContextHeight)) (not true)) (=> (= (ControlFlow 0 5) (- 0 4)) ($Is HandleTypeType (|_module.VariousArrows.G_k#Handle| this@@22) (Tclass._System.___hTotalFunc1 TInt TChar)))))))
(let ((anon3_Then_correct  (and (=> (= (ControlFlow 0 2) (- 0 3)) (or (not (= 0 $FunctionContextHeight)) (not true))) (=> (or (not (= 0 $FunctionContextHeight)) (not true)) (=> (= (ControlFlow 0 2) (- 0 1)) ($Is HandleTypeType (|_module.VariousArrows.G#Handle| this@@22) (Tclass._System.___hTotalFunc1 TInt TChar)))))))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap@@5 alloc false)) (and (=> (= (ControlFlow 0 7) (- 0 12)) (or (not (= 0 $FunctionContextHeight)) (not true))) (=> (or (not (= 0 $FunctionContextHeight)) (not true)) (=> (= |f##0@0| (|_module.VariousArrows.F#Handle| this@@22)) (=> (and (and ($IsBox |call4formal@a#0| call0formal@_module.VariousArrows.InitArray$D) ($IsAllocBox |call4formal@a#0| call0formal@_module.VariousArrows.InitArray$D $Heap@@5)) (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0))) (=> (and (and (and ($IsBox |call4formal@a#0@0| TChar) ($IsAllocBox |call4formal@a#0@0| TChar $Heap@0)) (forall (($o@@4 T@U) ) (!  (=> (and (or (not (= $o@@4 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@5 $o@@4) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@4) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@5 $o@@4)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@4))
))) (and ($HeapSucc $Heap@@5 $Heap@0) (= |$rhs##0@0| ($Unbox charType |call4formal@a#0@0|)))) (and (=> (= (ControlFlow 0 7) (- 0 11)) (or (not (= 0 $FunctionContextHeight)) (not true))) (=> (or (not (= 0 $FunctionContextHeight)) (not true)) (and (=> (= (ControlFlow 0 7) (- 0 10)) ($Is HandleTypeType (|_module.VariousArrows.F_k#Handle| this@@22) (Tclass._System.___hTotalFunc1 TInt TChar))) (=> ($Is HandleTypeType (|_module.VariousArrows.F_k#Handle| this@@22) (Tclass._System.___hTotalFunc1 TInt TChar)) (=> (= |f##1@0| (|_module.VariousArrows.F_k#Handle| this@@22)) (=> (and (and ($IsBox |call4formal@a#0@@0| call0formal@_module.VariousArrows.InitArray$D@@0) ($IsAllocBox |call4formal@a#0@@0| call0formal@_module.VariousArrows.InitArray$D@@0 $Heap@@5)) (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1))) (=> (and (and (and ($IsBox |call4formal@a#0@0@@0| TChar) ($IsAllocBox |call4formal@a#0@0@@0| TChar $Heap@1)) (forall (($o@@5 T@U) ) (!  (=> (and (or (not (= $o@@5 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@5) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@5) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@5)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@5))
))) (and ($HeapSucc $Heap@0 $Heap@1) (= |$rhs##1@0| ($Unbox charType |call4formal@a#0@0@@0|)))) (and (=> (= (ControlFlow 0 7) (- 0 9)) (or (not (= 0 $FunctionContextHeight)) (not true))) (=> (or (not (= 0 $FunctionContextHeight)) (not true)) (and (=> (= (ControlFlow 0 7) (- 0 8)) ($Is HandleTypeType (|_module.VariousArrows.F_k_k#Handle| this@@22) (Tclass._System.___hTotalFunc1 TInt TChar))) (=> ($Is HandleTypeType (|_module.VariousArrows.F_k_k#Handle| this@@22) (Tclass._System.___hTotalFunc1 TInt TChar)) (=> (= |f##2@0| (|_module.VariousArrows.F_k_k#Handle| this@@22)) (=> (and (and ($IsBox |call4formal@a#0@@1| call0formal@_module.VariousArrows.InitArray$D@@1) ($IsAllocBox |call4formal@a#0@@1| call0formal@_module.VariousArrows.InitArray$D@@1 $Heap@@5)) (and ($IsGoodHeap $Heap@2) ($IsHeapAnchor $Heap@2))) (=> (and (and (and ($IsBox |call4formal@a#0@0@@1| TChar) ($IsAllocBox |call4formal@a#0@0@@1| TChar $Heap@2)) (forall (($o@@6 T@U) ) (!  (=> (and (or (not (= $o@@6 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@6) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@6) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@6)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@6))
))) (and ($HeapSucc $Heap@1 $Heap@2) (= |$rhs##2@0| ($Unbox charType |call4formal@a#0@0@@1|)))) (and (=> (= (ControlFlow 0 7) 2) anon3_Then_correct) (=> (= (ControlFlow 0 7) 5) anon3_Else_correct))))))))))))))))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (and (and ($IsGoodHeap $Heap@@5) ($IsHeapAnchor $Heap@@5)) (and (or (not (= this@@22 null)) (not true)) (and ($Is refType this@@22 Tclass._module.VariousArrows) ($IsAlloc refType this@@22 Tclass._module.VariousArrows $Heap@@5)))) (and (and ($Is charType |c#0@@1| TChar) true) (and ($Is charType |d#0| TChar) true))) (and (and (and ($Is charType |e#0| TChar) true) (and ($Is charType |f#0_0| TChar) true)) (and (and ($Is charType |g#1_0| TChar) true) (and (= 1 $FunctionContextHeight) (= (ControlFlow 0 13) 7))))) anon0_correct)))
PreconditionGeneratedEntry_correct)))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 5) (- 4))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
