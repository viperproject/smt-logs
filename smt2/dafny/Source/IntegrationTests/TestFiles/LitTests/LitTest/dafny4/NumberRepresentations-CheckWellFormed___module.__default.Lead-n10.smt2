(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 (T@U) T@U)
(declare-fun $generated@@20 (T@U) Int)
(declare-fun $generated@@21 () T@U)
(declare-fun $generated@@22 (T@U Int) T@U)
(declare-fun $generated@@23 (T@U T@U) T@U)
(declare-fun $generated@@27 (T@U Int) T@U)
(declare-fun $generated@@28 (T@U T@U) T@U)
(declare-fun $generated@@34 (Int) Int)
(declare-fun $generated@@36 (T@T T@U) T@U)
(declare-fun $generated@@39 (T@T T@U T@U) Bool)
(declare-fun $generated@@40 () T@T)
(declare-fun $generated@@41 (T@U) T@U)
(declare-fun $generated@@42 (T@U T@U) Bool)
(declare-fun $generated@@46 () Int)
(declare-fun $generated@@47 (T@U T@U Int) Int)
(declare-fun $generated@@48 (T@U) T@U)
(declare-fun $generated@@49 (T@U Int) Bool)
(declare-fun $generated@@50 (T@T T@U) T@U)
(declare-fun $generated@@51 (T@U Int) T@U)
(declare-fun $generated@@52 (Int Int) Int)
(declare-fun $generated@@61 (T@T T@U) T@U)
(declare-fun $generated@@66 (T@U T@U T@U) Bool)
(declare-fun $generated@@67 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@94 (T@U) T@U)
(declare-fun $generated@@105 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@106 () T@T)
(declare-fun $generated@@107 () T@T)
(declare-fun $generated@@108 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@109 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@110 () T@T)
(declare-fun $generated@@111 (T@T T@T) T@T)
(declare-fun $generated@@112 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@113 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@114 (T@T) T@T)
(declare-fun $generated@@115 (T@T) T@T)
(declare-fun $generated@@164 (T@U) T@U)
(declare-fun $generated@@165 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (= ($generated@@19 $generated) $generated@@0))
(assert (= ($generated@@20 $generated@@21) 0))
(assert (forall (($generated@@24 T@U) ($generated@@25 T@U) ($generated@@26 Int) ) (!  (=> (and (<= 0 $generated@@26) (<= $generated@@26 ($generated@@20 $generated@@24))) (= ($generated@@22 ($generated@@23 $generated@@24 $generated@@25) $generated@@26) ($generated@@23 ($generated@@22 $generated@@24 $generated@@26) $generated@@25)))
 :pattern ( ($generated@@22 ($generated@@23 $generated@@24 $generated@@25) $generated@@26))
)))
(assert (forall (($generated@@29 T@U) ($generated@@30 T@U) ($generated@@31 Int) ) (!  (=> (= $generated@@31 ($generated@@20 $generated@@29)) (and (= ($generated@@27 ($generated@@28 $generated@@29 $generated@@30) $generated@@31) $generated@@29) (= ($generated@@22 ($generated@@28 $generated@@29 $generated@@30) $generated@@31) $generated@@30)))
 :pattern ( ($generated@@27 ($generated@@28 $generated@@29 $generated@@30) $generated@@31))
 :pattern ( ($generated@@22 ($generated@@28 $generated@@29 $generated@@30) $generated@@31))
)))
(assert (forall (($generated@@32 T@U) ($generated@@33 Int) ) (!  (=> (= $generated@@33 0) (= ($generated@@22 $generated@@32 $generated@@33) $generated@@32))
 :pattern ( ($generated@@22 $generated@@32 $generated@@33))
)))
(assert (forall (($generated@@35 Int) ) (! (= ($generated@@34 $generated@@35) $generated@@35)
 :pattern ( ($generated@@34 $generated@@35))
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@T) ) (! (= ($generated@@36 $generated@@38 $generated@@37) $generated@@37)
 :pattern ( ($generated@@36 $generated@@38 $generated@@37))
)))
(assert (= ($generated@@3 $generated@@40) 3))
(assert (forall (($generated@@43 T@U) ($generated@@44 T@U) ($generated@@45 T@U) ) (!  (=> (and ($generated@@39 $generated@@40 $generated@@43 ($generated@@41 $generated@@45)) ($generated@@42 $generated@@44 $generated@@45)) ($generated@@39 $generated@@40 ($generated@@23 $generated@@43 $generated@@44) ($generated@@41 $generated@@45)))
 :pattern ( ($generated@@39 $generated@@40 ($generated@@23 $generated@@43 $generated@@44) ($generated@@41 $generated@@45)))
)))
(assert  (=> (<= 0 $generated@@46) (forall (($generated@@53 T@U) ($generated@@54 T@U) ($generated@@55 Int) ) (!  (=> (or ($generated@@49 ($generated@@36 $generated@@40 $generated@@54) ($generated@@34 $generated@@55)) (and (< 0 $generated@@46) (and ($generated@@39 $generated@@40 $generated@@54 ($generated@@41 $generated)) (<= ($generated@@34 2) ($generated@@34 $generated@@55))))) (and (=> (or (not (= ($generated@@20 ($generated@@36 $generated@@40 $generated@@54)) ($generated@@34 0))) (not true)) ($generated@@49 ($generated@@36 $generated@@40 ($generated@@22 ($generated@@36 $generated@@40 $generated@@54) ($generated@@34 1))) ($generated@@34 $generated@@55))) (= ($generated@@47 ($generated@@48 $generated@@53) ($generated@@36 $generated@@40 $generated@@54) ($generated@@34 $generated@@55)) (ite (= ($generated@@20 ($generated@@36 $generated@@40 $generated@@54)) ($generated@@34 0)) 0 (+ ($generated@@10 ($generated@@50 $generated@@5 ($generated@@51 ($generated@@36 $generated@@40 $generated@@54) ($generated@@34 0)))) ($generated@@52 ($generated@@34 $generated@@55) ($generated@@34 ($generated@@47 ($generated@@48 $generated@@53) ($generated@@36 $generated@@40 ($generated@@22 ($generated@@36 $generated@@40 $generated@@54) ($generated@@34 1))) ($generated@@34 $generated@@55)))))))))
 :weight 3
 :pattern ( ($generated@@47 ($generated@@48 $generated@@53) ($generated@@36 $generated@@40 $generated@@54) ($generated@@34 $generated@@55)))
))))
(assert (forall (($generated@@56 T@U) ($generated@@57 Int) ($generated@@58 Int) ) (!  (=> (and (and (<= 0 $generated@@58) (< $generated@@58 $generated@@57)) (< $generated@@58 ($generated@@20 $generated@@56))) (= ($generated@@51 ($generated@@27 $generated@@56 $generated@@57) $generated@@58) ($generated@@51 $generated@@56 $generated@@58)))
 :weight 25
 :pattern ( ($generated@@51 ($generated@@27 $generated@@56 $generated@@57) $generated@@58))
 :pattern ( ($generated@@51 $generated@@56 $generated@@58) ($generated@@27 $generated@@56 $generated@@57))
)))
(assert (forall (($generated@@59 T@U) ($generated@@60 Int) ) (!  (=> (and (<= 0 $generated@@60) (<= $generated@@60 ($generated@@20 $generated@@59))) (= ($generated@@20 ($generated@@22 $generated@@59 $generated@@60)) (- ($generated@@20 $generated@@59) $generated@@60)))
 :pattern ( ($generated@@20 ($generated@@22 $generated@@59 $generated@@60)))
)))
(assert (forall (($generated@@62 T@U) ($generated@@63 T@T) ) (! (= ($generated@@61 $generated@@63 ($generated@@50 $generated@@63 $generated@@62)) $generated@@62)
 :pattern ( ($generated@@50 $generated@@63 $generated@@62))
)))
(assert (forall (($generated@@64 T@U) ($generated@@65 T@U) ) (! (= ($generated@@20 ($generated@@23 $generated@@64 $generated@@65)) (+ 1 ($generated@@20 $generated@@64)))
 :pattern ( ($generated@@23 $generated@@64 $generated@@65))
)))
(assert (forall (($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@T) ) (! (= ($generated@@66 ($generated@@61 $generated@@71 $generated@@68) $generated@@69 $generated@@70) ($generated@@67 $generated@@71 $generated@@68 $generated@@69 $generated@@70))
 :pattern ( ($generated@@66 ($generated@@61 $generated@@71 $generated@@68) $generated@@69 $generated@@70))
)))
(assert (forall (($generated@@72 T@U) ($generated@@73 Int) ($generated@@74 Int) ) (!  (=> (and (and (<= 0 $generated@@73) (<= 0 $generated@@74)) (< $generated@@74 (- ($generated@@20 $generated@@72) $generated@@73))) (= ($generated@@51 ($generated@@22 $generated@@72 $generated@@73) $generated@@74) ($generated@@51 $generated@@72 (+ $generated@@74 $generated@@73))))
 :weight 25
 :pattern ( ($generated@@51 ($generated@@22 $generated@@72 $generated@@73) $generated@@74))
)))
(assert (forall (($generated@@75 T@U) ($generated@@76 T@U) ) (! (= ($generated@@20 ($generated@@28 $generated@@75 $generated@@76)) (+ ($generated@@20 $generated@@75) ($generated@@20 $generated@@76)))
 :pattern ( ($generated@@20 ($generated@@28 $generated@@75 $generated@@76)))
)))
(assert (forall (($generated@@77 T@U) ($generated@@78 Int) ($generated@@79 T@U) ) (!  (and (=> (= $generated@@78 ($generated@@20 $generated@@77)) (= ($generated@@51 ($generated@@23 $generated@@77 $generated@@79) $generated@@78) $generated@@79)) (=> (or (not (= $generated@@78 ($generated@@20 $generated@@77))) (not true)) (= ($generated@@51 ($generated@@23 $generated@@77 $generated@@79) $generated@@78) ($generated@@51 $generated@@77 $generated@@78))))
 :pattern ( ($generated@@51 ($generated@@23 $generated@@77 $generated@@79) $generated@@78))
)))
(assert (forall (($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 Int) ) (! (= ($generated@@47 ($generated@@48 $generated@@80) $generated@@81 $generated@@82) ($generated@@47 $generated@@80 $generated@@81 $generated@@82))
 :pattern ( ($generated@@47 ($generated@@48 $generated@@80) $generated@@81 $generated@@82))
)))
(assert (forall (($generated@@83 T@U) ($generated@@84 Int) ) (!  (=> (and (<= 0 $generated@@84) (<= $generated@@84 ($generated@@20 $generated@@83))) (= ($generated@@20 ($generated@@27 $generated@@83 $generated@@84)) $generated@@84))
 :pattern ( ($generated@@20 ($generated@@27 $generated@@83 $generated@@84)))
)))
(assert (forall (($generated@@85 T@U) ) (!  (=> ($generated@@42 $generated@@85 $generated) (and (= ($generated@@61 $generated@@5 ($generated@@50 $generated@@5 $generated@@85)) $generated@@85) ($generated@@39 $generated@@5 ($generated@@50 $generated@@5 $generated@@85) $generated)))
 :pattern ( ($generated@@42 $generated@@85 $generated))
)))
(assert (forall (($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@T) ) (! (= ($generated@@42 ($generated@@61 $generated@@88 $generated@@86) $generated@@87) ($generated@@39 $generated@@88 $generated@@86 $generated@@87))
 :pattern ( ($generated@@42 ($generated@@61 $generated@@88 $generated@@86) $generated@@87))
)))
(assert (forall (($generated@@89 T@U) ) (! (<= 0 ($generated@@20 $generated@@89))
 :pattern ( ($generated@@20 $generated@@89))
)))
(assert (forall (($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ) (! (= ($generated@@67 $generated@@40 $generated@@90 ($generated@@41 $generated@@91) $generated@@92) (forall (($generated@@93 Int) ) (!  (=> (and (<= 0 $generated@@93) (< $generated@@93 ($generated@@20 $generated@@90))) ($generated@@66 ($generated@@51 $generated@@90 $generated@@93) $generated@@91 $generated@@92))
 :pattern ( ($generated@@51 $generated@@90 $generated@@93))
)))
 :pattern ( ($generated@@67 $generated@@40 $generated@@90 ($generated@@41 $generated@@91) $generated@@92))
)))
(assert (forall (($generated@@95 T@U) ) (! (= ($generated@@94 ($generated@@41 $generated@@95)) $generated@@95)
 :pattern ( ($generated@@41 $generated@@95))
)))
(assert (forall (($generated@@96 T@U) ) (! (= ($generated@@19 ($generated@@41 $generated@@96)) $generated@@1)
 :pattern ( ($generated@@41 $generated@@96))
)))
(assert (forall (($generated@@97 T@U) ($generated@@98 T@T) ) (! (= ($generated@@50 $generated@@98 ($generated@@61 $generated@@98 $generated@@97)) $generated@@97)
 :pattern ( ($generated@@61 $generated@@98 $generated@@97))
)))
(assert  (=> (<= 0 $generated@@46) (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 Int) ) (!  (=> (or ($generated@@49 $generated@@100 $generated@@101) (and (< 0 $generated@@46) (and ($generated@@39 $generated@@40 $generated@@100 ($generated@@41 $generated)) (<= ($generated@@34 2) $generated@@101)))) (and (=> (or (not (= ($generated@@20 $generated@@100) ($generated@@34 0))) (not true)) ($generated@@49 ($generated@@22 $generated@@100 ($generated@@34 1)) $generated@@101)) (= ($generated@@47 ($generated@@48 $generated@@99) $generated@@100 $generated@@101) (ite (= ($generated@@20 $generated@@100) ($generated@@34 0)) 0 (+ ($generated@@10 ($generated@@50 $generated@@5 ($generated@@51 $generated@@100 ($generated@@34 0)))) ($generated@@52 $generated@@101 ($generated@@47 $generated@@99 ($generated@@22 $generated@@100 ($generated@@34 1)) $generated@@101)))))))
 :pattern ( ($generated@@47 ($generated@@48 $generated@@99) $generated@@100 $generated@@101))
))))
(assert  (=> (<= 0 $generated@@46) (forall (($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 Int) ) (!  (=> (or ($generated@@49 ($generated@@36 $generated@@40 $generated@@103) $generated@@104) (and (< 0 $generated@@46) (and ($generated@@39 $generated@@40 $generated@@103 ($generated@@41 $generated)) (<= ($generated@@34 2) $generated@@104)))) (and (=> (or (not (= ($generated@@20 ($generated@@36 $generated@@40 $generated@@103)) ($generated@@34 0))) (not true)) ($generated@@49 ($generated@@36 $generated@@40 ($generated@@22 ($generated@@36 $generated@@40 $generated@@103) ($generated@@34 1))) $generated@@104)) (= ($generated@@47 ($generated@@48 $generated@@102) ($generated@@36 $generated@@40 $generated@@103) $generated@@104) (ite (= ($generated@@20 ($generated@@36 $generated@@40 $generated@@103)) ($generated@@34 0)) 0 (+ ($generated@@10 ($generated@@50 $generated@@5 ($generated@@51 ($generated@@36 $generated@@40 $generated@@103) ($generated@@34 0)))) ($generated@@52 $generated@@104 ($generated@@47 ($generated@@48 $generated@@102) ($generated@@36 $generated@@40 ($generated@@22 ($generated@@36 $generated@@40 $generated@@103) ($generated@@34 1))) $generated@@104)))))))
 :weight 3
 :pattern ( ($generated@@47 ($generated@@48 $generated@@102) ($generated@@36 $generated@@40 $generated@@103) $generated@@104))
))))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@116 T@T) ($generated@@117 T@T) ($generated@@118 T@T) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ) (! (= ($generated@@105 $generated@@116 $generated@@117 $generated@@118 ($generated@@112 $generated@@116 $generated@@117 $generated@@118 $generated@@120 $generated@@121 $generated@@122 $generated@@119) $generated@@121 $generated@@122) $generated@@119)
 :weight 0
)) (and (forall (($generated@@123 T@T) ($generated@@124 T@T) ($generated@@125 T@T) ($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ) (!  (or (= $generated@@128 $generated@@130) (= ($generated@@105 $generated@@123 $generated@@124 $generated@@125 ($generated@@112 $generated@@123 $generated@@124 $generated@@125 $generated@@127 $generated@@128 $generated@@129 $generated@@126) $generated@@130 $generated@@131) ($generated@@105 $generated@@123 $generated@@124 $generated@@125 $generated@@127 $generated@@130 $generated@@131)))
 :weight 0
)) (forall (($generated@@132 T@T) ($generated@@133 T@T) ($generated@@134 T@T) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ($generated@@140 T@U) ) (!  (or (= $generated@@138 $generated@@140) (= ($generated@@105 $generated@@132 $generated@@133 $generated@@134 ($generated@@112 $generated@@132 $generated@@133 $generated@@134 $generated@@136 $generated@@137 $generated@@138 $generated@@135) $generated@@139 $generated@@140) ($generated@@105 $generated@@132 $generated@@133 $generated@@134 $generated@@136 $generated@@139 $generated@@140)))
 :weight 0
)))) (= ($generated@@3 $generated@@106) 4)) (= ($generated@@3 $generated@@107) 5)) (forall (($generated@@141 T@T) ($generated@@142 T@T) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ) (! (= ($generated@@109 $generated@@141 $generated@@142 ($generated@@113 $generated@@141 $generated@@142 $generated@@144 $generated@@145 $generated@@143) $generated@@145) $generated@@143)
 :weight 0
))) (forall (($generated@@146 T@T) ($generated@@147 T@T) ($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 T@U) ($generated@@151 T@U) ) (!  (or (= $generated@@150 $generated@@151) (= ($generated@@109 $generated@@146 $generated@@147 ($generated@@113 $generated@@146 $generated@@147 $generated@@149 $generated@@150 $generated@@148) $generated@@151) ($generated@@109 $generated@@146 $generated@@147 $generated@@149 $generated@@151)))
 :weight 0
))) (= ($generated@@3 $generated@@110) 6)) (forall (($generated@@152 T@T) ($generated@@153 T@T) ) (= ($generated@@3 ($generated@@111 $generated@@152 $generated@@153)) 7))) (forall (($generated@@154 T@T) ($generated@@155 T@T) ) (! (= ($generated@@114 ($generated@@111 $generated@@154 $generated@@155)) $generated@@154)
 :pattern ( ($generated@@111 $generated@@154 $generated@@155))
))) (forall (($generated@@156 T@T) ($generated@@157 T@T) ) (! (= ($generated@@115 ($generated@@111 $generated@@156 $generated@@157)) $generated@@157)
 :pattern ( ($generated@@111 $generated@@156 $generated@@157))
))))
(assert (forall (($generated@@158 T@U) ($generated@@159 T@U) ($generated@@160 T@U) ($generated@@161 Bool) ($generated@@162 T@U) ($generated@@163 T@U) ) (! (= ($generated@@8 ($generated@@105 $generated@@106 $generated@@107 $generated@@4 ($generated@@108 $generated@@158 $generated@@159 $generated@@160 $generated@@161) $generated@@162 $generated@@163))  (=> (and (or (not (= $generated@@162 $generated@@158)) (not true)) ($generated@@8 ($generated@@50 $generated@@4 ($generated@@109 $generated@@107 $generated@@110 ($generated@@109 $generated@@106 ($generated@@111 $generated@@107 $generated@@110) $generated@@159 $generated@@162) $generated@@160)))) $generated@@161))
 :pattern ( ($generated@@105 $generated@@106 $generated@@107 $generated@@4 ($generated@@108 $generated@@158 $generated@@159 $generated@@160 $generated@@161) $generated@@162 $generated@@163))
)))
(assert (forall (($generated@@166 T@U) ($generated@@167 T@U) ) (!  (and (= ($generated@@164 ($generated@@23 $generated@@166 $generated@@167)) $generated@@166) (= ($generated@@165 ($generated@@23 $generated@@166 $generated@@167)) $generated@@167))
 :pattern ( ($generated@@23 $generated@@166 $generated@@167))
)))
(assert (forall (($generated@@168 Int) ($generated@@169 Int) ) (! (= ($generated@@52 $generated@@168 $generated@@169) (* $generated@@168 $generated@@169))
 :pattern ( ($generated@@52 $generated@@168 $generated@@169))
)))
(assert (forall (($generated@@170 T@U) ($generated@@171 T@U) ) (!  (=> ($generated@@42 $generated@@170 ($generated@@41 $generated@@171)) (and (= ($generated@@61 $generated@@40 ($generated@@50 $generated@@40 $generated@@170)) $generated@@170) ($generated@@39 $generated@@40 ($generated@@50 $generated@@40 $generated@@170) ($generated@@41 $generated@@171))))
 :pattern ( ($generated@@42 $generated@@170 ($generated@@41 $generated@@171)))
)))
(assert (forall (($generated@@172 T@U) ($generated@@173 Int) ($generated@@174 Int) ) (!  (=> (and (and (<= 0 $generated@@173) (<= $generated@@173 $generated@@174)) (< $generated@@174 ($generated@@20 $generated@@172))) (= ($generated@@51 ($generated@@22 $generated@@172 $generated@@173) (- $generated@@174 $generated@@173)) ($generated@@51 $generated@@172 $generated@@174)))
 :weight 25
 :pattern ( ($generated@@51 $generated@@172 $generated@@174) ($generated@@22 $generated@@172 $generated@@173))
)))
(assert (forall (($generated@@175 T@U) ($generated@@176 Int) ($generated@@177 Int) ) (!  (=> (and (and (<= 0 $generated@@176) (<= 0 $generated@@177)) (<= (+ $generated@@176 $generated@@177) ($generated@@20 $generated@@175))) (= ($generated@@22 ($generated@@22 $generated@@175 $generated@@176) $generated@@177) ($generated@@22 $generated@@175 (+ $generated@@176 $generated@@177))))
 :pattern ( ($generated@@22 ($generated@@22 $generated@@175 $generated@@176) $generated@@177))
)))
(assert (forall (($generated@@178 T@U) ($generated@@179 T@U) ($generated@@180 Int) ) (!  (and (=> (< $generated@@180 ($generated@@20 $generated@@178)) (= ($generated@@51 ($generated@@28 $generated@@178 $generated@@179) $generated@@180) ($generated@@51 $generated@@178 $generated@@180))) (=> (<= ($generated@@20 $generated@@178) $generated@@180) (= ($generated@@51 ($generated@@28 $generated@@178 $generated@@179) $generated@@180) ($generated@@51 $generated@@179 (- $generated@@180 ($generated@@20 $generated@@178))))))
 :pattern ( ($generated@@51 ($generated@@28 $generated@@178 $generated@@179) $generated@@180))
)))
(assert (forall (($generated@@181 Int) ) (! (= ($generated@@61 $generated@@5 ($generated@@9 ($generated@@34 $generated@@181))) ($generated@@36 $generated@@110 ($generated@@61 $generated@@5 ($generated@@9 $generated@@181))))
 :pattern ( ($generated@@61 $generated@@5 ($generated@@9 ($generated@@34 $generated@@181))))
)))
(assert (forall (($generated@@182 T@U) ($generated@@183 T@T) ) (! (= ($generated@@61 $generated@@183 ($generated@@36 $generated@@183 $generated@@182)) ($generated@@36 $generated@@110 ($generated@@61 $generated@@183 $generated@@182)))
 :pattern ( ($generated@@61 $generated@@183 ($generated@@36 $generated@@183 $generated@@182)))
)))
(assert (forall (($generated@@184 T@U) ) (!  (=> (= ($generated@@20 $generated@@184) 0) (= $generated@@184 $generated@@21))
 :pattern ( ($generated@@20 $generated@@184))
)))
(assert (forall (($generated@@185 T@U) ($generated@@186 Int) ) (!  (=> (= $generated@@186 0) (= ($generated@@27 $generated@@185 $generated@@186) $generated@@21))
 :pattern ( ($generated@@27 $generated@@185 $generated@@186))
)))
(assert (forall (($generated@@187 T@U) ($generated@@188 T@U) ) (! ($generated@@67 $generated@@5 $generated@@188 $generated $generated@@187)
 :pattern ( ($generated@@67 $generated@@5 $generated@@188 $generated $generated@@187))
)))
(assert (forall (($generated@@189 T@U) ($generated@@190 T@U) ) (! (= ($generated@@39 $generated@@40 $generated@@189 ($generated@@41 $generated@@190)) (forall (($generated@@191 Int) ) (!  (=> (and (<= 0 $generated@@191) (< $generated@@191 ($generated@@20 $generated@@189))) ($generated@@42 ($generated@@51 $generated@@189 $generated@@191) $generated@@190))
 :pattern ( ($generated@@51 $generated@@189 $generated@@191))
)))
 :pattern ( ($generated@@39 $generated@@40 $generated@@189 ($generated@@41 $generated@@190)))
)))
(assert (forall (($generated@@192 T@U) ) (! ($generated@@39 $generated@@5 $generated@@192 $generated)
 :pattern ( ($generated@@39 $generated@@5 $generated@@192 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@193 () T@U)
(declare-fun $generated@@194 () T@U)
(declare-fun $generated@@195 () T@U)
(declare-fun $generated@@196 () Int)
(declare-fun $generated@@197 (T@U) Bool)
(declare-fun $generated@@198 () T@U)
(declare-fun $generated@@199 (T@U) Bool)
(declare-fun $generated@@200 () T@U)
(declare-fun $generated@@201 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 4) (let (($generated@@202  (=> (and (= $generated@@193 ($generated@@108 $generated@@194 $generated@@195 $generated@@2 false)) (<= ($generated@@34 2) $generated@@196)) (=> (and (and (and ($generated@@197 $generated@@198) ($generated@@199 $generated@@198)) (= $generated@@195 $generated@@198)) (and ($generated@@67 $generated@@40 $generated@@200 ($generated@@41 $generated) $generated@@198) ($generated@@67 $generated@@5 ($generated@@9 $generated@@196) $generated $generated@@198))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (<= ($generated@@34 2) $generated@@196)) (=> (and (<= ($generated@@34 2) $generated@@196) ($generated@@49 $generated@@200 $generated@@196)) (=> (and (and (= $generated@@201 ($generated@@28 $generated@@200 ($generated@@23 $generated@@21 ($generated@@61 $generated@@5 ($generated@@9 ($generated@@34 0)))))) ($generated@@67 $generated@@40 $generated@@201 ($generated@@41 $generated) $generated@@198)) (and ($generated@@67 $generated@@5 ($generated@@9 $generated@@196) $generated $generated@@198) (= (ControlFlow 0 2) (- 0 1)))) (<= ($generated@@34 2) $generated@@196))))))))
(let (($generated@@203  (=> (and ($generated@@197 $generated@@195) ($generated@@199 $generated@@195)) (=> (and (and ($generated@@39 $generated@@40 $generated@@200 ($generated@@41 $generated)) ($generated@@67 $generated@@40 $generated@@200 ($generated@@41 $generated) $generated@@195)) (and (= 1 $generated@@46) (= (ControlFlow 0 4) 2))) $generated@@202))))
$generated@@203)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
