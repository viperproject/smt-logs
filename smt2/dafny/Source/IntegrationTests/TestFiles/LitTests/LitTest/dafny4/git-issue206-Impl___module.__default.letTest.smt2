(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 (T@T) Int)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 () T@T)
(declare-fun $generated@@12 (Bool) T@U)
(declare-fun $generated@@13 (T@U) Bool)
(declare-fun $generated@@14 (Int) T@U)
(declare-fun $generated@@15 (T@U) Int)
(declare-fun $generated@@16 (Real) T@U)
(declare-fun $generated@@17 (T@U) Real)
(declare-fun $generated@@24 (T@U) T@U)
(declare-fun $generated@@25 (T@U) Bool)
(declare-fun $generated@@26 (T@T T@U T@U) Bool)
(declare-fun $generated@@27 () T@T)
(declare-fun $generated@@28 (T@U T@U) T@U)
(declare-fun $generated@@32 (T@U) Bool)
(declare-fun $generated@@33 () T@U)
(declare-fun $generated@@35 (T@U T@U) T@U)
(declare-fun $generated@@36 (T@U T@U) Bool)
(declare-fun $generated@@41 (Int) Int)
(declare-fun $generated@@43 (T@T T@U) T@U)
(declare-fun $generated@@46 (T@U) T@U)
(declare-fun $generated@@49 (T@T T@U) T@U)
(declare-fun $generated@@50 (T@T T@U) T@U)
(declare-fun $generated@@56 (Int) T@U)
(declare-fun $generated@@66 (T@U) T@U)
(declare-fun $generated@@69 (T@U) T@U)
(declare-fun $generated@@72 (T@U) T@U)
(declare-fun $generated@@75 (T@U) T@U)
(declare-fun $generated@@79 (T@U) Int)
(declare-fun $generated@@83 (T@U) Int)
(declare-fun $generated@@84 (T@U) Int)
(declare-fun $generated@@93 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@94 () T@T)
(declare-fun $generated@@95 () T@T)
(declare-fun $generated@@96 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@97 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@98 () T@T)
(declare-fun $generated@@99 (T@T T@T) T@T)
(declare-fun $generated@@100 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@101 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@102 (T@T) T@T)
(declare-fun $generated@@103 (T@T) T@T)
(declare-fun $generated@@152 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@8 $generated@@9) 0) (= ($generated@@8 $generated@@10) 1)) (= ($generated@@8 $generated@@11) 2)) (forall (($generated@@18 Bool) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 Real) ) (! (= ($generated@@17 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 T@U) ) (! (= ($generated@@16 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7)
)
(assert (= ($generated@@24 $generated) $generated@@0))
(assert (= ($generated@@8 $generated@@27) 3))
(assert (forall (($generated@@29 T@U) ($generated@@30 T@U) ($generated@@31 T@U) ) (!  (=> ($generated@@26 $generated@@27 $generated@@31 ($generated@@28 $generated@@29 $generated@@30)) ($generated@@25 $generated@@31))
 :pattern ( ($generated@@25 $generated@@31) ($generated@@26 $generated@@27 $generated@@31 ($generated@@28 $generated@@29 $generated@@30)))
)))
(assert (forall (($generated@@34 T@U) ) (!  (=> ($generated@@26 $generated@@27 $generated@@34 $generated@@33) ($generated@@32 $generated@@34))
 :pattern ( ($generated@@32 $generated@@34) ($generated@@26 $generated@@27 $generated@@34 $generated@@33))
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ($generated@@40 T@U) ) (! (= ($generated@@26 $generated@@27 ($generated@@35 $generated@@39 $generated@@40) ($generated@@28 $generated@@37 $generated@@38))  (and ($generated@@36 $generated@@39 $generated@@37) ($generated@@36 $generated@@40 $generated@@38)))
 :pattern ( ($generated@@26 $generated@@27 ($generated@@35 $generated@@39 $generated@@40) ($generated@@28 $generated@@37 $generated@@38)))
)))
(assert (forall (($generated@@42 Int) ) (! (= ($generated@@41 $generated@@42) $generated@@42)
 :pattern ( ($generated@@41 $generated@@42))
)))
(assert (forall (($generated@@44 T@U) ($generated@@45 T@T) ) (! (= ($generated@@43 $generated@@45 $generated@@44) $generated@@44)
 :pattern ( ($generated@@43 $generated@@45 $generated@@44))
)))
(assert (forall (($generated@@47 T@U) ) (! (= ($generated@@25 $generated@@47) (= ($generated@@46 $generated@@47) $generated@@2))
 :pattern ( ($generated@@25 $generated@@47))
)))
(assert (forall (($generated@@48 T@U) ) (! (= ($generated@@32 $generated@@48) (= ($generated@@46 $generated@@48) $generated@@5))
 :pattern ( ($generated@@32 $generated@@48))
)))
(assert (forall (($generated@@51 T@U) ($generated@@52 T@T) ) (! (= ($generated@@50 $generated@@52 ($generated@@49 $generated@@52 $generated@@51)) $generated@@51)
 :pattern ( ($generated@@49 $generated@@52 $generated@@51))
)))
(assert (forall (($generated@@53 T@U) ) (!  (=> ($generated@@25 $generated@@53) (exists (($generated@@54 T@U) ($generated@@55 T@U) ) (= $generated@@53 ($generated@@35 $generated@@54 $generated@@55))))
 :pattern ( ($generated@@25 $generated@@53))
)))
(assert (forall (($generated@@57 T@U) ) (!  (=> ($generated@@32 $generated@@57) (exists (($generated@@58 Int) ) (= $generated@@57 ($generated@@56 $generated@@58))))
 :pattern ( ($generated@@32 $generated@@57))
)))
(assert (forall (($generated@@59 T@U) ) (!  (=> ($generated@@36 $generated@@59 $generated@@33) (and (= ($generated@@50 $generated@@27 ($generated@@49 $generated@@27 $generated@@59)) $generated@@59) ($generated@@26 $generated@@27 ($generated@@49 $generated@@27 $generated@@59) $generated@@33)))
 :pattern ( ($generated@@36 $generated@@59 $generated@@33))
)))
(assert (forall (($generated@@60 T@U) ) (!  (=> ($generated@@36 $generated@@60 $generated) (and (= ($generated@@50 $generated@@10 ($generated@@49 $generated@@10 $generated@@60)) $generated@@60) ($generated@@26 $generated@@10 ($generated@@49 $generated@@10 $generated@@60) $generated)))
 :pattern ( ($generated@@36 $generated@@60 $generated))
)))
(assert (forall (($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@T) ) (! (= ($generated@@36 ($generated@@50 $generated@@63 $generated@@61) $generated@@62) ($generated@@26 $generated@@63 $generated@@61 $generated@@62))
 :pattern ( ($generated@@36 ($generated@@50 $generated@@63 $generated@@61) $generated@@62))
)))
(assert (forall (($generated@@64 T@U) ($generated@@65 T@U) ) (! (= ($generated@@46 ($generated@@35 $generated@@64 $generated@@65)) $generated@@2)
 :pattern ( ($generated@@35 $generated@@64 $generated@@65))
)))
(assert (forall (($generated@@67 T@U) ($generated@@68 T@U) ) (! (= ($generated@@66 ($generated@@28 $generated@@67 $generated@@68)) $generated@@67)
 :pattern ( ($generated@@28 $generated@@67 $generated@@68))
)))
(assert (forall (($generated@@70 T@U) ($generated@@71 T@U) ) (! (= ($generated@@69 ($generated@@28 $generated@@70 $generated@@71)) $generated@@71)
 :pattern ( ($generated@@28 $generated@@70 $generated@@71))
)))
(assert (forall (($generated@@73 T@U) ($generated@@74 T@U) ) (! (= ($generated@@72 ($generated@@35 $generated@@73 $generated@@74)) $generated@@73)
 :pattern ( ($generated@@35 $generated@@73 $generated@@74))
)))
(assert (forall (($generated@@76 T@U) ($generated@@77 T@U) ) (! (= ($generated@@75 ($generated@@35 $generated@@76 $generated@@77)) $generated@@77)
 :pattern ( ($generated@@35 $generated@@76 $generated@@77))
)))
(assert (forall (($generated@@78 Int) ) (! (= ($generated@@46 ($generated@@56 $generated@@78)) $generated@@5)
 :pattern ( ($generated@@56 $generated@@78))
)))
(assert (forall (($generated@@80 Int) ) (! (= ($generated@@79 ($generated@@56 $generated@@80)) $generated@@80)
 :pattern ( ($generated@@56 $generated@@80))
)))
(assert (forall (($generated@@81 T@U) ($generated@@82 T@T) ) (! (= ($generated@@49 $generated@@82 ($generated@@50 $generated@@82 $generated@@81)) $generated@@81)
 :pattern ( ($generated@@50 $generated@@82 $generated@@81))
)))
(assert (forall (($generated@@85 T@U) ($generated@@86 T@U) ) (! (< ($generated@@83 $generated@@85) ($generated@@84 ($generated@@35 $generated@@85 $generated@@86)))
 :pattern ( ($generated@@35 $generated@@85 $generated@@86))
)))
(assert (forall (($generated@@87 T@U) ($generated@@88 T@U) ) (! (< ($generated@@83 $generated@@88) ($generated@@84 ($generated@@35 $generated@@87 $generated@@88)))
 :pattern ( ($generated@@35 $generated@@87 $generated@@88))
)))
(assert (forall (($generated@@89 Int) ) (! (= ($generated@@26 $generated@@27 ($generated@@56 $generated@@89) $generated@@33) ($generated@@26 $generated@@10 ($generated@@14 $generated@@89) $generated))
 :pattern ( ($generated@@26 $generated@@27 ($generated@@56 $generated@@89) $generated@@33))
)))
(assert (forall (($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ) (!  (=> ($generated@@36 $generated@@92 ($generated@@28 $generated@@90 $generated@@91)) (and (= ($generated@@50 $generated@@27 ($generated@@49 $generated@@27 $generated@@92)) $generated@@92) ($generated@@26 $generated@@27 ($generated@@49 $generated@@27 $generated@@92) ($generated@@28 $generated@@90 $generated@@91))))
 :pattern ( ($generated@@36 $generated@@92 ($generated@@28 $generated@@90 $generated@@91)))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@104 T@T) ($generated@@105 T@T) ($generated@@106 T@T) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ) (! (= ($generated@@93 $generated@@104 $generated@@105 $generated@@106 ($generated@@100 $generated@@104 $generated@@105 $generated@@106 $generated@@108 $generated@@109 $generated@@110 $generated@@107) $generated@@109 $generated@@110) $generated@@107)
 :weight 0
)) (and (forall (($generated@@111 T@T) ($generated@@112 T@T) ($generated@@113 T@T) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ) (!  (or (= $generated@@116 $generated@@118) (= ($generated@@93 $generated@@111 $generated@@112 $generated@@113 ($generated@@100 $generated@@111 $generated@@112 $generated@@113 $generated@@115 $generated@@116 $generated@@117 $generated@@114) $generated@@118 $generated@@119) ($generated@@93 $generated@@111 $generated@@112 $generated@@113 $generated@@115 $generated@@118 $generated@@119)))
 :weight 0
)) (forall (($generated@@120 T@T) ($generated@@121 T@T) ($generated@@122 T@T) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ) (!  (or (= $generated@@126 $generated@@128) (= ($generated@@93 $generated@@120 $generated@@121 $generated@@122 ($generated@@100 $generated@@120 $generated@@121 $generated@@122 $generated@@124 $generated@@125 $generated@@126 $generated@@123) $generated@@127 $generated@@128) ($generated@@93 $generated@@120 $generated@@121 $generated@@122 $generated@@124 $generated@@127 $generated@@128)))
 :weight 0
)))) (= ($generated@@8 $generated@@94) 4)) (= ($generated@@8 $generated@@95) 5)) (forall (($generated@@129 T@T) ($generated@@130 T@T) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ) (! (= ($generated@@97 $generated@@129 $generated@@130 ($generated@@101 $generated@@129 $generated@@130 $generated@@132 $generated@@133 $generated@@131) $generated@@133) $generated@@131)
 :weight 0
))) (forall (($generated@@134 T@T) ($generated@@135 T@T) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ) (!  (or (= $generated@@138 $generated@@139) (= ($generated@@97 $generated@@134 $generated@@135 ($generated@@101 $generated@@134 $generated@@135 $generated@@137 $generated@@138 $generated@@136) $generated@@139) ($generated@@97 $generated@@134 $generated@@135 $generated@@137 $generated@@139)))
 :weight 0
))) (= ($generated@@8 $generated@@98) 6)) (forall (($generated@@140 T@T) ($generated@@141 T@T) ) (= ($generated@@8 ($generated@@99 $generated@@140 $generated@@141)) 7))) (forall (($generated@@142 T@T) ($generated@@143 T@T) ) (! (= ($generated@@102 ($generated@@99 $generated@@142 $generated@@143)) $generated@@142)
 :pattern ( ($generated@@99 $generated@@142 $generated@@143))
))) (forall (($generated@@144 T@T) ($generated@@145 T@T) ) (! (= ($generated@@103 ($generated@@99 $generated@@144 $generated@@145)) $generated@@145)
 :pattern ( ($generated@@99 $generated@@144 $generated@@145))
))))
(assert (forall (($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 Bool) ($generated@@150 T@U) ($generated@@151 T@U) ) (! (= ($generated@@13 ($generated@@93 $generated@@94 $generated@@95 $generated@@9 ($generated@@96 $generated@@146 $generated@@147 $generated@@148 $generated@@149) $generated@@150 $generated@@151))  (=> (and (or (not (= $generated@@150 $generated@@146)) (not true)) ($generated@@13 ($generated@@49 $generated@@9 ($generated@@97 $generated@@95 $generated@@98 ($generated@@97 $generated@@94 ($generated@@99 $generated@@95 $generated@@98) $generated@@147 $generated@@150) $generated@@148)))) $generated@@149))
 :pattern ( ($generated@@93 $generated@@94 $generated@@95 $generated@@9 ($generated@@96 $generated@@146 $generated@@147 $generated@@148 $generated@@149) $generated@@150 $generated@@151))
)))
(assert (forall (($generated@@153 T@U) ($generated@@154 T@U) ) (!  (and (= ($generated@@24 ($generated@@28 $generated@@153 $generated@@154)) $generated@@3) (= ($generated@@152 ($generated@@28 $generated@@153 $generated@@154)) $generated@@6))
 :pattern ( ($generated@@28 $generated@@153 $generated@@154))
)))
(assert (forall (($generated@@155 T@U) ) (! (= ($generated@@83 ($generated@@50 $generated@@27 $generated@@155)) ($generated@@84 $generated@@155))
 :pattern ( ($generated@@83 ($generated@@50 $generated@@27 $generated@@155)))
)))
(assert (= ($generated@@24 $generated@@33) $generated@@4))
(assert (= ($generated@@152 $generated@@33) $generated@@7))
(assert (forall (($generated@@156 T@U) ($generated@@157 T@U) ) (! (= ($generated@@35 ($generated@@43 $generated@@98 $generated@@156) ($generated@@43 $generated@@98 $generated@@157)) ($generated@@43 $generated@@27 ($generated@@35 $generated@@156 $generated@@157)))
 :pattern ( ($generated@@35 ($generated@@43 $generated@@98 $generated@@156) ($generated@@43 $generated@@98 $generated@@157)))
)))
(assert (forall (($generated@@158 Int) ) (! (= ($generated@@50 $generated@@10 ($generated@@14 ($generated@@41 $generated@@158))) ($generated@@43 $generated@@98 ($generated@@50 $generated@@10 ($generated@@14 $generated@@158))))
 :pattern ( ($generated@@50 $generated@@10 ($generated@@14 ($generated@@41 $generated@@158))))
)))
(assert (forall (($generated@@159 Int) ) (! (= ($generated@@56 ($generated@@41 $generated@@159)) ($generated@@43 $generated@@27 ($generated@@56 $generated@@159)))
 :pattern ( ($generated@@56 ($generated@@41 $generated@@159)))
)))
(assert (forall (($generated@@160 T@U) ($generated@@161 T@T) ) (! (= ($generated@@50 $generated@@161 ($generated@@43 $generated@@161 $generated@@160)) ($generated@@43 $generated@@98 ($generated@@50 $generated@@161 $generated@@160)))
 :pattern ( ($generated@@50 $generated@@161 ($generated@@43 $generated@@161 $generated@@160)))
)))
(assert (forall (($generated@@162 T@U) ) (! ($generated@@26 $generated@@10 $generated@@162 $generated)
 :pattern ( ($generated@@26 $generated@@10 $generated@@162 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@163 () T@U)
(declare-fun $generated@@164 () T@U)
(declare-fun $generated@@165 () T@U)
(declare-fun $generated@@166 () T@U)
(declare-fun $generated@@167 () Int)
(declare-fun $generated@@168 () Int)
(declare-fun $generated@@169 (T@U) Bool)
(declare-fun $generated@@170 (T@U) Bool)
(declare-fun $generated@@171 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@172  (=> (= $generated@@163 ($generated@@96 $generated@@164 $generated@@165 $generated@@1 false)) (=> (and (= $generated@@166 ($generated@@43 $generated@@27 ($generated@@35 ($generated@@50 $generated@@27 ($generated@@43 $generated@@27 ($generated@@56 ($generated@@41 1)))) ($generated@@50 $generated@@10 ($generated@@14 ($generated@@41 2)))))) ($generated@@26 $generated@@27 $generated@@166 ($generated@@28 $generated@@33 $generated))) (=> (and (and ($generated@@25 $generated@@166) ($generated@@32 ($generated@@49 $generated@@27 ($generated@@72 $generated@@166)))) (and (= ($generated@@35 ($generated@@50 $generated@@27 ($generated@@56 $generated@@167)) ($generated@@50 $generated@@10 ($generated@@14 $generated@@168))) $generated@@166) (= (ControlFlow 0 2) (- 0 1)))) (= (let (($generated@@173 ($generated@@79 ($generated@@49 $generated@@27 ($generated@@72 ($generated@@43 $generated@@27 ($generated@@35 ($generated@@50 $generated@@27 ($generated@@43 $generated@@27 ($generated@@56 ($generated@@41 1)))) ($generated@@50 $generated@@10 ($generated@@14 ($generated@@41 2))))))))))
$generated@@173) ($generated@@41 1)))))))
(let (($generated@@174  (=> (and (and ($generated@@169 $generated@@165) ($generated@@170 $generated@@165)) (and (= 1 $generated@@171) (= (ControlFlow 0 3) 2))) $generated@@172)))
$generated@@174)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
