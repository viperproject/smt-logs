(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 (T@T) Int)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 () T@T)
(declare-fun $generated@@12 (Bool) T@U)
(declare-fun $generated@@13 (T@U) Bool)
(declare-fun $generated@@14 (Int) T@U)
(declare-fun $generated@@15 (T@U) Int)
(declare-fun $generated@@16 (Real) T@U)
(declare-fun $generated@@17 (T@U) Real)
(declare-fun $generated@@24 (T@U) T@U)
(declare-fun $generated@@25 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@26 () T@U)
(declare-fun $generated@@29 (T@U) T@U)
(declare-fun $generated@@30 () T@U)
(declare-fun $generated@@31 () T@T)
(declare-fun $generated@@32 (T@U) T@U)
(declare-fun $generated@@33 (T@U) Bool)
(declare-fun $generated@@36 (T@T T@U T@U) Bool)
(declare-fun $generated@@38 (T@U T@U) Bool)
(declare-fun $generated@@41 (T@U) Bool)
(declare-fun $generated@@42 (T@U) T@U)
(declare-fun $generated@@43 (T@U) T@U)
(declare-fun $generated@@46 (Int) Int)
(declare-fun $generated@@48 (T@T T@U) T@U)
(declare-fun $generated@@51 (T@U T@U) T@U)
(declare-fun $generated@@52 (T@U T@U) Bool)
(declare-fun $generated@@56 (T@U) Bool)
(declare-fun $generated@@59 (T@T T@U) T@U)
(declare-fun $generated@@60 (T@T T@U) T@U)
(declare-fun $generated@@68 (T@U T@U T@U) Bool)
(declare-fun $generated@@73 (T@U) T@U)
(declare-fun $generated@@76 (T@U) Bool)
(declare-fun $generated@@92 (T@U) T@U)
(declare-fun $generated@@96 (T@U) Int)
(declare-fun $generated@@97 (T@U) Int)
(declare-fun $generated@@105 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@106 () T@T)
(declare-fun $generated@@107 () T@T)
(declare-fun $generated@@108 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@109 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@110 () T@T)
(declare-fun $generated@@111 (T@T T@T) T@T)
(declare-fun $generated@@112 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@113 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@114 (T@T) T@T)
(declare-fun $generated@@115 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@8 $generated@@9) 0) (= ($generated@@8 $generated@@10) 1)) (= ($generated@@8 $generated@@11) 2)) (forall (($generated@@18 Bool) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 Real) ) (! (= ($generated@@17 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 T@U) ) (! (= ($generated@@16 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7)
)
(assert (= ($generated@@24 $generated) $generated@@0))
(assert (forall (($generated@@27 T@U) ($generated@@28 T@U) ) (! ($generated@@25 $generated@@10 $generated@@27 $generated@@26 $generated@@28)
 :pattern ( ($generated@@25 $generated@@10 $generated@@27 $generated@@26 $generated@@28))
)))
(assert (= ($generated@@29 $generated@@30) $generated@@4))
(assert (= ($generated@@8 $generated@@31) 3))
(assert (forall (($generated@@34 T@U) ($generated@@35 T@U) ) (!  (=> ($generated@@33 $generated@@35) ($generated@@25 $generated@@31 $generated@@30 ($generated@@32 $generated@@34) $generated@@35))
 :pattern ( ($generated@@25 $generated@@31 $generated@@30 ($generated@@32 $generated@@34) $generated@@35))
)))
(assert (forall (($generated@@37 T@U) ) (! ($generated@@36 $generated@@31 $generated@@30 ($generated@@32 $generated@@37))
 :pattern ( ($generated@@36 $generated@@31 $generated@@30 ($generated@@32 $generated@@37)))
)))
(assert (forall (($generated@@39 T@U) ($generated@@40 T@U) ) (! (= ($generated@@38 $generated@@39 $generated@@40) (= $generated@@39 $generated@@40))
 :pattern ( ($generated@@38 $generated@@39 $generated@@40))
)))
(assert (forall (($generated@@44 T@U) ($generated@@45 T@U) ) (!  (=> (and ($generated@@41 $generated@@44) ($generated@@41 $generated@@45)) (= ($generated@@38 $generated@@44 $generated@@45)  (and (= ($generated@@42 $generated@@44) ($generated@@42 $generated@@45)) ($generated@@38 ($generated@@43 $generated@@44) ($generated@@43 $generated@@45)))))
 :pattern ( ($generated@@38 $generated@@44 $generated@@45) ($generated@@41 $generated@@44))
 :pattern ( ($generated@@38 $generated@@44 $generated@@45) ($generated@@41 $generated@@45))
)))
(assert (forall (($generated@@47 Int) ) (! (= ($generated@@46 $generated@@47) $generated@@47)
 :pattern ( ($generated@@46 $generated@@47))
)))
(assert (forall (($generated@@49 T@U) ($generated@@50 T@T) ) (! (= ($generated@@48 $generated@@50 $generated@@49) $generated@@49)
 :pattern ( ($generated@@48 $generated@@50 $generated@@49))
)))
(assert (forall (($generated@@53 T@U) ($generated@@54 T@U) ($generated@@55 T@U) ) (! (= ($generated@@36 $generated@@31 ($generated@@51 $generated@@54 $generated@@55) ($generated@@32 $generated@@53))  (and ($generated@@52 $generated@@54 $generated@@53) ($generated@@36 $generated@@31 $generated@@55 ($generated@@32 $generated@@53))))
 :pattern ( ($generated@@36 $generated@@31 ($generated@@51 $generated@@54 $generated@@55) ($generated@@32 $generated@@53)))
)))
(assert (forall (($generated@@57 T@U) ) (! (= ($generated@@56 $generated@@57) (= ($generated@@29 $generated@@57) $generated@@4))
 :pattern ( ($generated@@56 $generated@@57))
)))
(assert (forall (($generated@@58 T@U) ) (! (= ($generated@@41 $generated@@58) (= ($generated@@29 $generated@@58) $generated@@5))
 :pattern ( ($generated@@41 $generated@@58))
)))
(assert (forall (($generated@@61 T@U) ($generated@@62 T@T) ) (! (= ($generated@@60 $generated@@62 ($generated@@59 $generated@@62 $generated@@61)) $generated@@61)
 :pattern ( ($generated@@59 $generated@@62 $generated@@61))
)))
(assert (forall (($generated@@63 T@U) ) (!  (=> ($generated@@41 $generated@@63) (exists (($generated@@64 T@U) ($generated@@65 T@U) ) (= $generated@@63 ($generated@@51 $generated@@64 $generated@@65))))
 :pattern ( ($generated@@41 $generated@@63))
)))
(assert (forall (($generated@@66 T@U) ) (!  (=> ($generated@@56 $generated@@66) (= $generated@@66 $generated@@30))
 :pattern ( ($generated@@56 $generated@@66))
)))
(assert (forall (($generated@@67 T@U) ) (! (= ($generated@@36 $generated@@10 $generated@@67 $generated@@26) (<= ($generated@@46 0) ($generated@@15 $generated@@67)))
 :pattern ( ($generated@@36 $generated@@10 $generated@@67 $generated@@26))
)))
(assert (forall (($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@T) ) (! (= ($generated@@68 ($generated@@60 $generated@@72 $generated@@69) $generated@@70 $generated@@71) ($generated@@25 $generated@@72 $generated@@69 $generated@@70 $generated@@71))
 :pattern ( ($generated@@68 ($generated@@60 $generated@@72 $generated@@69) $generated@@70 $generated@@71))
)))
(assert (forall (($generated@@74 T@U) ) (!  (and (= ($generated@@24 ($generated@@32 $generated@@74)) $generated@@3) (= ($generated@@73 ($generated@@32 $generated@@74)) $generated@@7))
 :pattern ( ($generated@@32 $generated@@74))
)))
(assert (forall (($generated@@75 T@U) ) (!  (=> ($generated@@52 $generated@@75 $generated@@26) (and (= ($generated@@60 $generated@@10 ($generated@@59 $generated@@10 $generated@@75)) $generated@@75) ($generated@@36 $generated@@10 ($generated@@59 $generated@@10 $generated@@75) $generated@@26)))
 :pattern ( ($generated@@52 $generated@@75 $generated@@26))
)))
(assert (forall (($generated@@77 T@U) ) (!  (=> ($generated@@76 $generated@@77) (or ($generated@@56 $generated@@77) ($generated@@41 $generated@@77)))
 :pattern ( ($generated@@76 $generated@@77))
)))
(assert (forall (($generated@@78 T@U) ($generated@@79 T@U) ) (!  (=> ($generated@@36 $generated@@31 $generated@@79 ($generated@@32 $generated@@78)) (or ($generated@@56 $generated@@79) ($generated@@41 $generated@@79)))
 :pattern ( ($generated@@41 $generated@@79) ($generated@@36 $generated@@31 $generated@@79 ($generated@@32 $generated@@78)))
 :pattern ( ($generated@@56 $generated@@79) ($generated@@36 $generated@@31 $generated@@79 ($generated@@32 $generated@@78)))
)))
(assert (forall (($generated@@80 T@U) ) (!  (=> ($generated@@52 $generated@@80 $generated) (and (= ($generated@@60 $generated@@10 ($generated@@59 $generated@@10 $generated@@80)) $generated@@80) ($generated@@36 $generated@@10 ($generated@@59 $generated@@10 $generated@@80) $generated)))
 :pattern ( ($generated@@52 $generated@@80 $generated))
)))
(assert (forall (($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@T) ) (! (= ($generated@@52 ($generated@@60 $generated@@83 $generated@@81) $generated@@82) ($generated@@36 $generated@@83 $generated@@81 $generated@@82))
 :pattern ( ($generated@@52 ($generated@@60 $generated@@83 $generated@@81) $generated@@82))
)))
(assert (forall (($generated@@84 T@U) ($generated@@85 T@U) ) (!  (=> (and ($generated@@56 $generated@@84) ($generated@@56 $generated@@85)) ($generated@@38 $generated@@84 $generated@@85))
 :pattern ( ($generated@@38 $generated@@84 $generated@@85) ($generated@@56 $generated@@84))
 :pattern ( ($generated@@38 $generated@@84 $generated@@85) ($generated@@56 $generated@@85))
)))
(assert (forall (($generated@@86 T@U) ($generated@@87 T@U) ) (! (= ($generated@@29 ($generated@@51 $generated@@86 $generated@@87)) $generated@@5)
 :pattern ( ($generated@@51 $generated@@86 $generated@@87))
)))
(assert (forall (($generated@@88 T@U) ($generated@@89 T@U) ) (! (= ($generated@@42 ($generated@@51 $generated@@88 $generated@@89)) $generated@@88)
 :pattern ( ($generated@@51 $generated@@88 $generated@@89))
)))
(assert (forall (($generated@@90 T@U) ($generated@@91 T@U) ) (! (= ($generated@@43 ($generated@@51 $generated@@90 $generated@@91)) $generated@@91)
 :pattern ( ($generated@@51 $generated@@90 $generated@@91))
)))
(assert (forall (($generated@@93 T@U) ) (! (= ($generated@@92 ($generated@@32 $generated@@93)) $generated@@93)
 :pattern ( ($generated@@32 $generated@@93))
)))
(assert (forall (($generated@@94 T@U) ($generated@@95 T@T) ) (! (= ($generated@@59 $generated@@95 ($generated@@60 $generated@@95 $generated@@94)) $generated@@94)
 :pattern ( ($generated@@60 $generated@@95 $generated@@94))
)))
(assert (forall (($generated@@98 T@U) ($generated@@99 T@U) ) (! (< ($generated@@96 $generated@@98) ($generated@@97 ($generated@@51 $generated@@98 $generated@@99)))
 :pattern ( ($generated@@51 $generated@@98 $generated@@99))
)))
(assert (forall (($generated@@100 T@U) ($generated@@101 T@U) ) (! (< ($generated@@97 $generated@@101) ($generated@@97 ($generated@@51 $generated@@100 $generated@@101)))
 :pattern ( ($generated@@51 $generated@@100 $generated@@101))
)))
(assert (forall (($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ) (!  (=> (and ($generated@@33 $generated@@104) (and ($generated@@41 $generated@@102) ($generated@@25 $generated@@31 $generated@@102 ($generated@@32 $generated@@103) $generated@@104))) ($generated@@68 ($generated@@42 $generated@@102) $generated@@103 $generated@@104))
 :pattern ( ($generated@@68 ($generated@@42 $generated@@102) $generated@@103 $generated@@104))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@116 T@T) ($generated@@117 T@T) ($generated@@118 T@T) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ) (! (= ($generated@@105 $generated@@116 $generated@@117 $generated@@118 ($generated@@112 $generated@@116 $generated@@117 $generated@@118 $generated@@120 $generated@@121 $generated@@122 $generated@@119) $generated@@121 $generated@@122) $generated@@119)
 :weight 0
)) (and (forall (($generated@@123 T@T) ($generated@@124 T@T) ($generated@@125 T@T) ($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ) (!  (or (= $generated@@128 $generated@@130) (= ($generated@@105 $generated@@123 $generated@@124 $generated@@125 ($generated@@112 $generated@@123 $generated@@124 $generated@@125 $generated@@127 $generated@@128 $generated@@129 $generated@@126) $generated@@130 $generated@@131) ($generated@@105 $generated@@123 $generated@@124 $generated@@125 $generated@@127 $generated@@130 $generated@@131)))
 :weight 0
)) (forall (($generated@@132 T@T) ($generated@@133 T@T) ($generated@@134 T@T) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ($generated@@140 T@U) ) (!  (or (= $generated@@138 $generated@@140) (= ($generated@@105 $generated@@132 $generated@@133 $generated@@134 ($generated@@112 $generated@@132 $generated@@133 $generated@@134 $generated@@136 $generated@@137 $generated@@138 $generated@@135) $generated@@139 $generated@@140) ($generated@@105 $generated@@132 $generated@@133 $generated@@134 $generated@@136 $generated@@139 $generated@@140)))
 :weight 0
)))) (= ($generated@@8 $generated@@106) 4)) (= ($generated@@8 $generated@@107) 5)) (forall (($generated@@141 T@T) ($generated@@142 T@T) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ) (! (= ($generated@@109 $generated@@141 $generated@@142 ($generated@@113 $generated@@141 $generated@@142 $generated@@144 $generated@@145 $generated@@143) $generated@@145) $generated@@143)
 :weight 0
))) (forall (($generated@@146 T@T) ($generated@@147 T@T) ($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 T@U) ($generated@@151 T@U) ) (!  (or (= $generated@@150 $generated@@151) (= ($generated@@109 $generated@@146 $generated@@147 ($generated@@113 $generated@@146 $generated@@147 $generated@@149 $generated@@150 $generated@@148) $generated@@151) ($generated@@109 $generated@@146 $generated@@147 $generated@@149 $generated@@151)))
 :weight 0
))) (= ($generated@@8 $generated@@110) 6)) (forall (($generated@@152 T@T) ($generated@@153 T@T) ) (= ($generated@@8 ($generated@@111 $generated@@152 $generated@@153)) 7))) (forall (($generated@@154 T@T) ($generated@@155 T@T) ) (! (= ($generated@@114 ($generated@@111 $generated@@154 $generated@@155)) $generated@@154)
 :pattern ( ($generated@@111 $generated@@154 $generated@@155))
))) (forall (($generated@@156 T@T) ($generated@@157 T@T) ) (! (= ($generated@@115 ($generated@@111 $generated@@156 $generated@@157)) $generated@@157)
 :pattern ( ($generated@@111 $generated@@156 $generated@@157))
))))
(assert (forall (($generated@@158 T@U) ($generated@@159 T@U) ($generated@@160 T@U) ($generated@@161 Bool) ($generated@@162 T@U) ($generated@@163 T@U) ) (! (= ($generated@@13 ($generated@@105 $generated@@106 $generated@@107 $generated@@9 ($generated@@108 $generated@@158 $generated@@159 $generated@@160 $generated@@161) $generated@@162 $generated@@163))  (=> (and (or (not (= $generated@@162 $generated@@158)) (not true)) ($generated@@13 ($generated@@59 $generated@@9 ($generated@@109 $generated@@107 $generated@@110 ($generated@@109 $generated@@106 ($generated@@111 $generated@@107 $generated@@110) $generated@@159 $generated@@162) $generated@@160)))) $generated@@161))
 :pattern ( ($generated@@105 $generated@@106 $generated@@107 $generated@@9 ($generated@@108 $generated@@158 $generated@@159 $generated@@160 $generated@@161) $generated@@162 $generated@@163))
)))
(assert (forall (($generated@@164 T@U) ) (! (= ($generated@@96 ($generated@@60 $generated@@31 $generated@@164)) ($generated@@97 $generated@@164))
 :pattern ( ($generated@@96 ($generated@@60 $generated@@31 $generated@@164)))
)))
(assert (forall (($generated@@165 T@U) ($generated@@166 T@U) ) (!  (=> ($generated@@52 $generated@@166 ($generated@@32 $generated@@165)) (and (= ($generated@@60 $generated@@31 ($generated@@59 $generated@@31 $generated@@166)) $generated@@166) ($generated@@36 $generated@@31 ($generated@@59 $generated@@31 $generated@@166) ($generated@@32 $generated@@165))))
 :pattern ( ($generated@@52 $generated@@166 ($generated@@32 $generated@@165)))
)))
(assert (forall (($generated@@167 T@U) ($generated@@168 T@U) ($generated@@169 T@U) ) (!  (=> (and ($generated@@33 $generated@@169) (and ($generated@@41 $generated@@167) ($generated@@25 $generated@@31 $generated@@167 ($generated@@32 $generated@@168) $generated@@169))) ($generated@@25 $generated@@31 ($generated@@43 $generated@@167) ($generated@@32 $generated@@168) $generated@@169))
 :pattern ( ($generated@@25 $generated@@31 ($generated@@43 $generated@@167) ($generated@@32 $generated@@168) $generated@@169))
)))
(assert (= ($generated@@24 $generated@@26) $generated@@2))
(assert (= ($generated@@73 $generated@@26) $generated@@6))
(assert (= $generated@@30 ($generated@@48 $generated@@31 $generated@@30)))
(assert (forall (($generated@@170 T@U) ($generated@@171 T@U) ) (! (= ($generated@@51 ($generated@@48 $generated@@110 $generated@@170) ($generated@@48 $generated@@31 $generated@@171)) ($generated@@48 $generated@@31 ($generated@@51 $generated@@170 $generated@@171)))
 :pattern ( ($generated@@51 ($generated@@48 $generated@@110 $generated@@170) ($generated@@48 $generated@@31 $generated@@171)))
)))
(assert (forall (($generated@@172 Int) ) (! (= ($generated@@60 $generated@@10 ($generated@@14 ($generated@@46 $generated@@172))) ($generated@@48 $generated@@110 ($generated@@60 $generated@@10 ($generated@@14 $generated@@172))))
 :pattern ( ($generated@@60 $generated@@10 ($generated@@14 ($generated@@46 $generated@@172))))
)))
(assert (forall (($generated@@173 T@U) ($generated@@174 T@T) ) (! (= ($generated@@60 $generated@@174 ($generated@@48 $generated@@174 $generated@@173)) ($generated@@48 $generated@@110 ($generated@@60 $generated@@174 $generated@@173)))
 :pattern ( ($generated@@60 $generated@@174 ($generated@@48 $generated@@174 $generated@@173)))
)))
(assert (forall (($generated@@175 T@U) ($generated@@176 T@U) ) (! ($generated@@25 $generated@@10 $generated@@176 $generated $generated@@175)
 :pattern ( ($generated@@25 $generated@@10 $generated@@176 $generated $generated@@175))
)))
(assert (forall (($generated@@177 T@U) ($generated@@178 T@U) ($generated@@179 T@U) ($generated@@180 T@U) ) (!  (=> ($generated@@33 $generated@@180) (= ($generated@@25 $generated@@31 ($generated@@51 $generated@@178 $generated@@179) ($generated@@32 $generated@@177) $generated@@180)  (and ($generated@@68 $generated@@178 $generated@@177 $generated@@180) ($generated@@25 $generated@@31 $generated@@179 ($generated@@32 $generated@@177) $generated@@180))))
 :pattern ( ($generated@@25 $generated@@31 ($generated@@51 $generated@@178 $generated@@179) ($generated@@32 $generated@@177) $generated@@180))
)))
(assert (forall (($generated@@181 T@U) ) (! ($generated@@36 $generated@@10 $generated@@181 $generated)
 :pattern ( ($generated@@36 $generated@@10 $generated@@181 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@182 () T@U)
(declare-fun $generated@@183 () T@U)
(declare-fun $generated@@184 () T@U)
(declare-fun $generated@@185 () T@U)
(declare-fun $generated@@186 (T@U) Bool)
(declare-fun $generated@@187 () T@U)
(declare-fun $generated@@188 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@189  (=> (and (= $generated@@182 ($generated@@108 $generated@@183 $generated@@184 $generated@@1 false)) (= (ControlFlow 0 2) (- 0 1))) ($generated@@38 $generated@@185 $generated@@185))))
(let (($generated@@190  (=> (and ($generated@@33 $generated@@184) ($generated@@186 $generated@@184)) (=> (and (and (and ($generated@@36 $generated@@31 $generated@@185 ($generated@@32 $generated@@26)) ($generated@@25 $generated@@31 $generated@@185 ($generated@@32 $generated@@26) $generated@@184)) ($generated@@76 $generated@@185)) (and (and ($generated@@36 $generated@@31 $generated@@187 ($generated@@32 $generated)) ($generated@@25 $generated@@31 $generated@@187 ($generated@@32 $generated) $generated@@184)) (and (= 1 $generated@@188) (= (ControlFlow 0 3) 2)))) $generated@@189))))
$generated@@190)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
