(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TagSet () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._module.pos () T@U)
(declare-fun tytagFamily$pos () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass._module.pos () T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun |Set#Empty| () T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.IsFactor (Int Int) Bool)
(declare-fun LitInt (Int) Int)
(declare-fun |_module.__default.IsFactor#canCall| (Int Int) Bool)
(declare-fun Mul (Int Int) Int)
(declare-fun |Set#Intersection| (T@U T@U) T@U)
(declare-fun _module.__default.Gcd (Bool Int Int) Int)
(declare-fun |_module.__default.Gcd#canCall| (Int Int) Bool)
(declare-fun _module.__default.Factors (Int) T@U)
(declare-fun |_module.__default.Factors#canCall| (Int) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun SetType () T@T)
(declare-fun TSet (T@U) T@U)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun |_module.__default.Max#canCall| (T@U) Bool)
(declare-fun _module.__default.Max (T@U) Int)
(declare-fun |Set#FromBoogieMap| (T@U) T@U)
(declare-fun |lambda#1| (T@U Int Int) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun |$let#0$canCall| (T@U) Bool)
(declare-fun |$let#0_x| (T@U) Int)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun TagFamily (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TagSet alloc Tagclass._module.pos tytagFamily$pos)
)
(assert (forall ((|x#0| T@U) ($h T@U) ) (! ($IsAlloc intType |x#0| Tclass._module.pos $h)
 :pattern ( ($IsAlloc intType |x#0| Tclass._module.pos $h))
)))
(assert (forall ((o T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o))
 :pattern ( (|Set#IsMember| |Set#Empty| o))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|p#0| Int) (|x#0@@0| Int) ) (!  (=> (or (|_module.__default.IsFactor#canCall| (LitInt |p#0|) (LitInt |x#0@@0|)) (and (< 1 $FunctionContextHeight) (and (<= (LitInt 1) |p#0|) (<= (LitInt 1) |x#0@@0|)))) (= (_module.__default.IsFactor (LitInt |p#0|) (LitInt |x#0@@0|)) (exists ((|q#1| Int) ) (! (= (Mul (LitInt |p#0|) |q#1|) (LitInt |x#0@@0|))
 :pattern ( (Mul |p#0| |q#1|))
))))
 :weight 3
 :pattern ( (_module.__default.IsFactor (LitInt |p#0|) (LitInt |x#0@@0|)))
))))
(assert (forall ((a T@U) (b T@U) (o@@0 T@U) ) (! (= (|Set#IsMember| (|Set#Intersection| a b) o@@0)  (and (|Set#IsMember| a o@@0) (|Set#IsMember| b o@@0)))
 :pattern ( (|Set#IsMember| (|Set#Intersection| a b) o@@0))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) ) (! (= (|Set#Intersection| (|Set#Intersection| a@@0 b@@0) b@@0) (|Set#Intersection| a@@0 b@@0))
 :pattern ( (|Set#Intersection| (|Set#Intersection| a@@0 b@@0) b@@0))
)))
(assert  (=> (<= 4 $FunctionContextHeight) (forall (($reveal Bool) (|x#0@@1| Int) (|y#0| Int) ) (!  (=> (or (|_module.__default.Gcd#canCall| |x#0@@1| |y#0|) (and (< 4 $FunctionContextHeight) (and (<= (LitInt 1) |x#0@@1|) (<= (LitInt 1) |y#0|)))) (<= (LitInt 1) (_module.__default.Gcd $reveal |x#0@@1| |y#0|)))
 :pattern ( (_module.__default.Gcd $reveal |x#0@@1| |y#0|))
))))
(assert (= (Ctor SetType) 3))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|x#0@@2| Int) ) (!  (=> (or (|_module.__default.Factors#canCall| |x#0@@2|) (and (< 2 $FunctionContextHeight) (<= (LitInt 1) |x#0@@2|))) ($Is SetType (_module.__default.Factors |x#0@@2|) (TSet Tclass._module.pos)))
 :pattern ( (_module.__default.Factors |x#0@@2|))
))))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert  (=> (<= 4 $FunctionContextHeight) (forall ((|x#0@@3| Int) (|y#0@@0| Int) ) (!  (=> (or (|_module.__default.Gcd#canCall| |x#0@@3| |y#0@@0|) (and (< 4 $FunctionContextHeight) (and (<= (LitInt 1) |x#0@@3|) (<= (LitInt 1) |y#0@@0|)))) (and (and (and (|_module.__default.Factors#canCall| |x#0@@3|) (|_module.__default.Factors#canCall| |y#0@@0|)) (let ((|common#0| (|Set#Intersection| (_module.__default.Factors |x#0@@3|) (_module.__default.Factors |y#0@@0|))))
(|_module.__default.Max#canCall| |common#0|))) (= (_module.__default.Gcd true |x#0@@3| |y#0@@0|) (let ((|common#0@@0| (|Set#Intersection| (_module.__default.Factors |x#0@@3|) (_module.__default.Factors |y#0@@0|))))
(_module.__default.Max |common#0@@0|)))))
 :pattern ( (_module.__default.Gcd true |x#0@@3| |y#0@@0|))
))))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|x#0@@4| Int) ) (!  (=> (or (|_module.__default.Factors#canCall| (LitInt |x#0@@4|)) (and (< 2 $FunctionContextHeight) (<= (LitInt 1) |x#0@@4|))) (and (forall ((|p#1| Int) ) (!  (=> (<= (LitInt 1) |p#1|) (=> (<= |p#1| (LitInt |x#0@@4|)) (|_module.__default.IsFactor#canCall| |p#1| (LitInt |x#0@@4|))))
 :pattern ( (_module.__default.IsFactor |p#1| |x#0@@4|))
)) (= (_module.__default.Factors (LitInt |x#0@@4|)) (|Set#FromBoogieMap| (|lambda#1| Tclass._module.pos (LitInt |x#0@@4|) (LitInt |x#0@@4|))))))
 :weight 3
 :pattern ( (_module.__default.Factors (LitInt |x#0@@4|)))
))))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert  (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor BoxType) 4)))
(assert (forall ((m@@1 T@U) (bx T@U) ) (! (= (|Set#IsMember| (|Set#FromBoogieMap| m@@1) bx) (U_2_bool (MapType0Select BoxType boolType m@@1 bx)))
 :pattern ( (|Set#IsMember| (|Set#FromBoogieMap| m@@1) bx))
)))
(assert (forall ((v T@U) (t0@@0 T@U) ) (! (= ($Is SetType v (TSet t0@@0)) (forall ((bx@@0 T@U) ) (!  (=> (|Set#IsMember| v bx@@0) ($IsBox bx@@0 t0@@0))
 :pattern ( (|Set#IsMember| v bx@@0))
)))
 :pattern ( ($Is SetType v (TSet t0@@0)))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|p#0@@0| Int) (|x#0@@5| Int) ) (!  (=> (or (|_module.__default.IsFactor#canCall| |p#0@@0| |x#0@@5|) (and (< 1 $FunctionContextHeight) (and (<= (LitInt 1) |p#0@@0|) (<= (LitInt 1) |x#0@@5|)))) (= (_module.__default.IsFactor |p#0@@0| |x#0@@5|) (exists ((|q#0| Int) ) (! (= (Mul |p#0@@0| |q#0|) |x#0@@5|)
 :pattern ( (Mul |p#0@@0| |q#0|))
))))
 :pattern ( (_module.__default.IsFactor |p#0@@0| |x#0@@5|))
))))
(assert (forall ((|x#0@@6| T@U) ) (! (= ($Is intType |x#0@@6| Tclass._module.pos) (<= (LitInt 1) (U_2_int |x#0@@6|)))
 :pattern ( ($Is intType |x#0@@6| Tclass._module.pos))
)))
(assert (forall ((v@@0 T@U) (t T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t h) ($IsAlloc T@@1 v@@0 t h))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t h))
)))
(assert  (=> (<= 3 $FunctionContextHeight) (forall (($Heap T@U) (|s#0| T@U) ) (!  (=> (or (|_module.__default.Max#canCall| |s#0|) (and (< 3 $FunctionContextHeight) (and (and ($IsGoodHeap $Heap) ($Is SetType |s#0| (TSet Tclass._module.pos))) (not (|Set#Equal| |s#0| |Set#Empty|))))) (and (|$let#0$canCall| |s#0|) (= (_module.__default.Max |s#0|) (let ((|x#0@@7| (|$let#0_x| |s#0|)))
|x#0@@7|))))
 :pattern ( (_module.__default.Max |s#0|) ($IsGoodHeap $Heap))
))))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 Tclass._module.pos) (and (= ($Box intType ($Unbox intType bx@@1)) bx@@1) ($Is intType ($Unbox intType bx@@1) Tclass._module.pos)))
 :pattern ( ($IsBox bx@@1 Tclass._module.pos))
)))
(assert (forall ((a@@1 T@U) (b@@1 T@U) ) (!  (=> (|Set#Equal| a@@1 b@@1) (= a@@1 b@@1))
 :pattern ( (|Set#Equal| a@@1 b@@1))
)))
(assert (forall ((|l#0| T@U) (|l#1| Int) (|l#2| Int) (|$y#0| T@U) ) (! (= (U_2_bool (MapType0Select BoxType boolType (|lambda#1| |l#0| |l#1| |l#2|) |$y#0|))  (and ($IsBox |$y#0| |l#0|) (and (<= (U_2_int ($Unbox intType |$y#0|)) |l#1|) (_module.__default.IsFactor (U_2_int ($Unbox intType |$y#0|)) |l#2|))))
 :pattern ( (MapType0Select BoxType boolType (|lambda#1| |l#0| |l#1| |l#2|) |$y#0|))
)))
(assert  (=> (<= 4 $FunctionContextHeight) (forall ((|x#0@@8| Int) (|y#0@@1| Int) ) (!  (=> (or (|_module.__default.Gcd#canCall| (LitInt |x#0@@8|) (LitInt |y#0@@1|)) (and (< 4 $FunctionContextHeight) (and (<= (LitInt 1) |x#0@@8|) (<= (LitInt 1) |y#0@@1|)))) (and (and (and (|_module.__default.Factors#canCall| (LitInt |x#0@@8|)) (|_module.__default.Factors#canCall| (LitInt |y#0@@1|))) (let ((|common#1| (|Set#Intersection| (_module.__default.Factors (LitInt |x#0@@8|)) (_module.__default.Factors (LitInt |y#0@@1|)))))
(|_module.__default.Max#canCall| |common#1|))) (= (_module.__default.Gcd true (LitInt |x#0@@8|) (LitInt |y#0@@1|)) (let ((|common#1@@0| (|Set#Intersection| (_module.__default.Factors (LitInt |x#0@@8|)) (_module.__default.Factors (LitInt |y#0@@1|)))))
(_module.__default.Max |common#1@@0|)))))
 :weight 3
 :pattern ( (_module.__default.Gcd true (LitInt |x#0@@8|) (LitInt |y#0@@1|)))
))))
(assert (forall ((v@@1 T@U) (t@@0 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@1) t@@0) ($Is T@@2 v@@1 t@@0))
 :pattern ( ($IsBox ($Box T@@2 v@@1) t@@0))
)))
(assert (forall ((s T@U) ) (!  (=> (|$let#0$canCall| s) (and (|Set#IsMember| s ($Box intType (int_2_U (|$let#0_x| s)))) (forall ((|y#0@@2| T@U) ) (!  (=> (|Set#IsMember| s ($Box intType |y#0@@2|)) (<= (U_2_int |y#0@@2|) (|$let#0_x| s)))
 :pattern ( (|Set#IsMember| s ($Box intType |y#0@@2|)))
))))
 :pattern ( (|$let#0_x| s))
)))
(assert (forall ((v@@2 T@U) (t0@@1 T@U) (h@@0 T@U) ) (! (= ($IsAlloc SetType v@@2 (TSet t0@@1) h@@0) (forall ((bx@@2 T@U) ) (!  (=> (|Set#IsMember| v@@2 bx@@2) ($IsAllocBox bx@@2 t0@@1 h@@0))
 :pattern ( (|Set#IsMember| v@@2 bx@@2))
)))
 :pattern ( ($IsAlloc SetType v@@2 (TSet t0@@1) h@@0))
)))
(assert (forall ((t@@1 T@U) ) (! (= (Inv0_TSet (TSet t@@1)) t@@1)
 :pattern ( (TSet t@@1))
)))
(assert (forall ((t@@2 T@U) ) (! (= (Tag (TSet t@@2)) TagSet)
 :pattern ( (TSet t@@2))
)))
(assert (forall ((x@@5 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@5)) x@@5)
 :pattern ( ($Box T@@3 x@@5))
)))
(assert  (=> (<= 3 $FunctionContextHeight) (forall (($Heap@@0 T@U) (|s#0@@0| T@U) ) (!  (=> (or (|_module.__default.Max#canCall| (Lit SetType |s#0@@0|)) (and (< 3 $FunctionContextHeight) (and (and ($IsGoodHeap $Heap@@0) ($Is SetType |s#0@@0| (TSet Tclass._module.pos))) (not (|Set#Equal| |s#0@@0| |Set#Empty|))))) (and (|$let#0$canCall| (Lit SetType |s#0@@0|)) (= (_module.__default.Max (Lit SetType |s#0@@0|)) (let ((|x#1| (|$let#0_x| (Lit SetType |s#0@@0|))))
|x#1|))))
 :weight 3
 :pattern ( (_module.__default.Max (Lit SetType |s#0@@0|)) ($IsGoodHeap $Heap@@0))
))))
(assert (forall ((a@@2 T@U) (b@@2 T@U) ) (! (= (|Set#Intersection| a@@2 (|Set#Intersection| a@@2 b@@2)) (|Set#Intersection| a@@2 b@@2))
 :pattern ( (|Set#Intersection| a@@2 (|Set#Intersection| a@@2 b@@2)))
)))
(assert  (and (and (and (and (and (and (forall ((t0@@2 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@2 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@2 t1@@0 t2 (MapType1Store t0@@2 t1@@0 t2 m@@2 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@3 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@3 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@3 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@4 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@4 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@4 y0@@1 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 5)) (= (Ctor FieldType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0@@0| T@U) (|l#1@@0| T@U) (|l#2@@0| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0@@0| |l#1@@0| |l#2@@0| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0@@0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1@@0| $o) |l#2@@0|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0@@0| |l#1@@0| |l#2@@0| |l#3|) $o $f))
)))
(assert (forall ((x@@6 Int) (y Int) ) (! (= (Mul x@@6 y) (* x@@6 y))
 :pattern ( (Mul x@@6 y))
)))
(assert (forall ((bx@@3 T@U) (t@@3 T@U) ) (!  (=> ($IsBox bx@@3 (TSet t@@3)) (and (= ($Box SetType ($Unbox SetType bx@@3)) bx@@3) ($Is SetType ($Unbox SetType bx@@3) (TSet t@@3))))
 :pattern ( ($IsBox bx@@3 (TSet t@@3)))
)))
(assert (= (Tag Tclass._module.pos) Tagclass._module.pos))
(assert (= (TagFamily Tclass._module.pos) tytagFamily$pos))
(assert (forall ((a@@3 T@U) (b@@3 T@U) ) (! (= (|Set#Equal| a@@3 b@@3) (forall ((o@@1 T@U) ) (! (= (|Set#IsMember| a@@3 o@@1) (|Set#IsMember| b@@3 o@@1))
 :pattern ( (|Set#IsMember| a@@3 o@@1))
 :pattern ( (|Set#IsMember| b@@3 o@@1))
)))
 :pattern ( (|Set#Equal| a@@3 b@@3))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|x#0@@9| Int) ) (!  (=> (or (|_module.__default.Factors#canCall| |x#0@@9|) (and (< 2 $FunctionContextHeight) (<= (LitInt 1) |x#0@@9|))) (and (forall ((|p#0@@1| Int) ) (!  (=> (<= (LitInt 1) |p#0@@1|) (=> (<= |p#0@@1| |x#0@@9|) (|_module.__default.IsFactor#canCall| |p#0@@1| |x#0@@9|)))
 :pattern ( (_module.__default.IsFactor |p#0@@1| |x#0@@9|))
)) (= (_module.__default.Factors |x#0@@9|) (|Set#FromBoogieMap| (|lambda#1| Tclass._module.pos |x#0@@9| |x#0@@9|)))))
 :pattern ( (_module.__default.Factors |x#0@@9|))
))))
(assert (forall ((x@@7 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@7))) (Lit BoxType ($Box intType (int_2_U x@@7))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@7))))
)))
(assert (forall ((x@@8 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@8)) (Lit BoxType ($Box T@@4 x@@8)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@8)))
)))
(assert  (=> (<= 3 $FunctionContextHeight) (forall ((|s#0@@1| T@U) ) (!  (=> (or (|_module.__default.Max#canCall| |s#0@@1|) (and (< 3 $FunctionContextHeight) (and ($Is SetType |s#0@@1| (TSet Tclass._module.pos)) (not (|Set#Equal| |s#0@@1| |Set#Empty|))))) (<= (LitInt 1) (_module.__default.Max |s#0@@1|)))
 :pattern ( (_module.__default.Max |s#0@@1|))
))))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |common#Z#0@0| () T@U)
(declare-fun $Heap@@1 () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |x#0@@10| () Int)
(declare-fun $Heap@1 () T@U)
(declare-fun |y#0@@3| () Int)
(declare-fun |let#0#0#0| () T@U)
(declare-fun $_ReadsFrame@0 () T@U)
(declare-fun null () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 8) (let ((anon8_Else_correct  (=> (|Set#IsMember| |common#Z#0@0| ($Box intType (int_2_U (LitInt 1)))) (=> (and ($IsAlloc SetType |common#Z#0@0| (TSet Tclass._module.pos) $Heap@@1) (= (ControlFlow 0 5) (- 0 4))) (not (|Set#Equal| |common#Z#0@0| |Set#Empty|))))))
(let ((anon8_Then_correct  (=> (and (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (|_module.__default.Factors#canCall| |x#0@@10|)) (=> (and (and (and (|Set#IsMember| (_module.__default.Factors |x#0@@10|) ($Box intType (int_2_U (LitInt 1)))) (= $Heap@@1 $Heap@0)) (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1))) (and (and (|_module.__default.Factors#canCall| |y#0@@3|) (|Set#IsMember| (_module.__default.Factors |y#0@@3|) ($Box intType (int_2_U (LitInt 1))))) (and (= $Heap@0 $Heap@1) (= (ControlFlow 0 3) (- 0 2))))) (|Set#IsMember| |common#Z#0@0| ($Box intType (int_2_U (LitInt 1))))))))
(let ((anon7_Else_correct  (=> ($IsAlloc intType (int_2_U |x#0@@10|) Tclass._module.pos $Heap@@1) (=> (and (and (and (|_module.__default.Factors#canCall| |x#0@@10|) ($IsAlloc intType (int_2_U |y#0@@3|) Tclass._module.pos $Heap@@1)) (and (|_module.__default.Factors#canCall| |y#0@@3|) (= |let#0#0#0| (|Set#Intersection| (_module.__default.Factors |x#0@@10|) (_module.__default.Factors |y#0@@3|))))) (and (and (|_module.__default.Factors#canCall| |x#0@@10|) (|_module.__default.Factors#canCall| |y#0@@3|)) (and ($Is SetType |let#0#0#0| (TSet Tclass._module.pos)) (= |common#Z#0@0| |let#0#0#0|)))) (and (=> (= (ControlFlow 0 6) 3) anon8_Then_correct) (=> (= (ControlFlow 0 6) 5) anon8_Else_correct))))))
(let ((anon7_Then_correct true))
(let ((anon0_correct  (=> (= $_ReadsFrame@0 (|lambda#0| null $Heap@@1 alloc false)) (and (=> (= (ControlFlow 0 7) 1) anon7_Then_correct) (=> (= (ControlFlow 0 7) 6) anon7_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap@@1) ($IsHeapAnchor $Heap@@1)) (=> (and (and (<= (LitInt 1) |x#0@@10|) (<= (LitInt 1) |y#0@@3|)) (and (= 4 $FunctionContextHeight) (= (ControlFlow 0 8) 7))) anon0_correct))))
PreconditionGeneratedEntry_correct)))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
