(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagSet () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._System.nat () T@U)
(declare-fun tytagFamily$nat () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.EVEN (Int) Bool)
(declare-fun LitInt (Int) Int)
(declare-fun |_module.__default.EVEN#canCall| (Int) Bool)
(declare-fun Mod (Int Int) Int)
(declare-fun Tag (T@U) T@U)
(declare-fun |Set#UnionOne| (T@U T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass._System.nat () T@U)
(declare-fun |Set#Difference| (T@U T@U) T@U)
(declare-fun |Set#Empty| () T@U)
(declare-fun _module.__default.binom (T@U Int Int) Int)
(declare-fun |_module.__default.binom#canCall| (Int Int) Bool)
(declare-fun _module.__default.BitSet (Int) T@U)
(declare-fun |_module.__default.BitSet#canCall| (Int) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun SetType () T@T)
(declare-fun TSet (T@U) T@U)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $LS (T@U) T@U)
(declare-fun |Set#Subset| (T@U T@U) Bool)
(declare-fun _module.__default.Bit (T@U Int Int) Bool)
(declare-fun |_module.__default.Bit#canCall| (Int Int) Bool)
(declare-fun Div (Int Int) Int)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun |Set#FromBoogieMap| (T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $LZ () T@U)
(declare-fun |lambda#1| (T@U Int Int T@U Int) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun |lambda#11| (Int T@U Int T@U) T@U)
(declare-fun _module.__default.Suc (T@U) T@U)
(declare-fun |_module.__default.Suc#canCall| (T@U) Bool)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun TagFamily (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt TagSet alloc Tagclass._System.nat tytagFamily$nat)
)
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|n#0| Int) ) (!  (=> (or (|_module.__default.EVEN#canCall| (LitInt |n#0|)) (and (< 0 $FunctionContextHeight) (<= (LitInt 0) |n#0|))) (= (_module.__default.EVEN (LitInt |n#0|)) (= (LitInt (Mod |n#0| (LitInt 2))) (LitInt 0))))
 :weight 3
 :pattern ( (_module.__default.EVEN (LitInt |n#0|)))
))))
(assert (= (Tag TInt) TagInt))
(assert (forall ((a T@U) (x@@2 T@U) ) (! (|Set#IsMember| (|Set#UnionOne| a x@@2) x@@2)
 :pattern ( (|Set#UnionOne| a x@@2))
)))
(assert (forall ((a@@0 T@U) (x@@3 T@U) (y T@U) ) (!  (=> (|Set#IsMember| a@@0 y) (|Set#IsMember| (|Set#UnionOne| a@@0 x@@3) y))
 :pattern ( (|Set#UnionOne| a@@0 x@@3) (|Set#IsMember| a@@0 y))
)))
(assert (forall ((|x#0| T@U) ($h T@U) ) (! ($IsAlloc intType |x#0| Tclass._System.nat $h)
 :pattern ( ($IsAlloc intType |x#0| Tclass._System.nat $h))
)))
(assert (forall ((a@@1 T@U) (x@@4 T@U) (o T@U) ) (! (= (|Set#IsMember| (|Set#UnionOne| a@@1 x@@4) o)  (or (= o x@@4) (|Set#IsMember| a@@1 o)))
 :pattern ( (|Set#IsMember| (|Set#UnionOne| a@@1 x@@4) o))
)))
(assert (forall ((a@@2 T@U) (b T@U) (y@@0 T@U) ) (!  (=> (|Set#IsMember| b y@@0) (not (|Set#IsMember| (|Set#Difference| a@@2 b) y@@0)))
 :pattern ( (|Set#Difference| a@@2 b) (|Set#IsMember| b y@@0))
)))
(assert (forall ((o@@0 T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o@@0))
 :pattern ( (|Set#IsMember| |Set#Empty| o@@0))
)))
(assert (forall ((a@@3 T@U) (b@@0 T@U) (o@@1 T@U) ) (! (= (|Set#IsMember| (|Set#Difference| a@@3 b@@0) o@@1)  (and (|Set#IsMember| a@@3 o@@1) (not (|Set#IsMember| b@@0 o@@1))))
 :pattern ( (|Set#IsMember| (|Set#Difference| a@@3 b@@0) o@@1))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($ly T@U) (|a#0| Int) (|b#0| Int) ) (!  (=> (or (|_module.__default.binom#canCall| |a#0| |b#0|) (and (< 0 $FunctionContextHeight) (and (<= (LitInt 0) |a#0|) (<= (LitInt 0) |b#0|)))) (<= (LitInt 0) (_module.__default.binom $ly |a#0| |b#0|)))
 :pattern ( (_module.__default.binom $ly |a#0| |b#0|))
))))
(assert (= (Ctor SetType) 3))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|n#0@@0| Int) ) (!  (=> (or (|_module.__default.BitSet#canCall| |n#0@@0|) (and (< 1 $FunctionContextHeight) (<= (LitInt 0) |n#0@@0|))) ($Is SetType (_module.__default.BitSet |n#0@@0|) (TSet Tclass._System.nat)))
 :pattern ( (_module.__default.BitSet |n#0@@0|))
))))
(assert (forall ((x@@5 Int) ) (! (= (LitInt x@@5) x@@5)
 :pattern ( (LitInt x@@5))
)))
(assert (forall ((x@@6 T@U) (T T@T) ) (! (= (Lit T x@@6) x@@6)
 :pattern ( (Lit T x@@6))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($ly@@0 T@U) (|a#0@@0| Int) (|b#0@@0| Int) ) (!  (=> (or (|_module.__default.binom#canCall| (LitInt |a#0@@0|) (LitInt |b#0@@0|)) (and (< 0 $FunctionContextHeight) (and (<= (LitInt 0) |a#0@@0|) (<= (LitInt 0) |b#0@@0|)))) (and (=> (or (not (= (LitInt |b#0@@0|) (LitInt 0))) (not true)) (=> (or (not (= (LitInt |a#0@@0|) (LitInt 0))) (not true)) (and (|_module.__default.binom#canCall| (LitInt (- |a#0@@0| 1)) (LitInt |b#0@@0|)) (|_module.__default.binom#canCall| (LitInt (- |a#0@@0| 1)) (LitInt (- |b#0@@0| 1)))))) (= (_module.__default.binom ($LS $ly@@0) (LitInt |a#0@@0|) (LitInt |b#0@@0|)) (ite (= (LitInt |b#0@@0|) (LitInt 0)) 1 (ite (= (LitInt |a#0@@0|) (LitInt 0)) 0 (+ (_module.__default.binom ($LS $ly@@0) (LitInt (- |a#0@@0| 1)) (LitInt |b#0@@0|)) (_module.__default.binom ($LS $ly@@0) (LitInt (- |a#0@@0| 1)) (LitInt (- |b#0@@0| 1)))))))))
 :weight 3
 :pattern ( (_module.__default.binom ($LS $ly@@0) (LitInt |a#0@@0|) (LitInt |b#0@@0|)))
))))
(assert (forall ((a@@4 T@U) (b@@1 T@U) ) (! (= (|Set#Subset| a@@4 b@@1) (forall ((o@@2 T@U) ) (!  (=> (|Set#IsMember| a@@4 o@@2) (|Set#IsMember| b@@1 o@@2))
 :pattern ( (|Set#IsMember| a@@4 o@@2))
 :pattern ( (|Set#IsMember| b@@1 o@@2))
)))
 :pattern ( (|Set#Subset| a@@4 b@@1))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($ly@@1 T@U) (|k#0| Int) (|n#0@@1| Int) ) (!  (=> (or (|_module.__default.Bit#canCall| (LitInt |k#0|) (LitInt |n#0@@1|)) (and (< 0 $FunctionContextHeight) (and (<= (LitInt 0) |k#0|) (<= (LitInt 0) |n#0@@1|)))) (and (=> (or (not (= (LitInt |k#0|) (LitInt 0))) (not true)) (|_module.__default.Bit#canCall| (LitInt (- |k#0| 1)) (LitInt (Div |n#0@@1| (LitInt 2))))) (= (_module.__default.Bit ($LS $ly@@1) (LitInt |k#0|) (LitInt |n#0@@1|)) (ite (= (LitInt |k#0|) (LitInt 0)) (= (LitInt (Mod |n#0@@1| (LitInt 2))) (LitInt 1)) (_module.__default.Bit ($LS $ly@@1) (LitInt (- |k#0| 1)) (LitInt (Div |n#0@@1| (LitInt 2))))))))
 :weight 3
 :pattern ( (_module.__default.Bit ($LS $ly@@1) (LitInt |k#0|) (LitInt |n#0@@1|)))
))))
(assert (forall ((x@@7 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@7)) x@@7)
 :pattern ( ($Unbox T@@0 x@@7))
)))
(assert  (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor BoxType) 4)))
(assert (forall ((m@@1 T@U) (bx T@U) ) (! (= (|Set#IsMember| (|Set#FromBoogieMap| m@@1) bx) (U_2_bool (MapType0Select BoxType boolType m@@1 bx)))
 :pattern ( (|Set#IsMember| (|Set#FromBoogieMap| m@@1) bx))
)))
(assert (forall ((v T@U) (t0@@0 T@U) ) (! (= ($Is SetType v (TSet t0@@0)) (forall ((bx@@0 T@U) ) (!  (=> (|Set#IsMember| v bx@@0) ($IsBox bx@@0 t0@@0))
 :pattern ( (|Set#IsMember| v bx@@0))
)))
 :pattern ( ($Is SetType v (TSet t0@@0)))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|n#0@@2| Int) ) (!  (=> (or (|_module.__default.BitSet#canCall| |n#0@@2|) (and (< 1 $FunctionContextHeight) (<= (LitInt 0) |n#0@@2|))) (and (forall ((|i#0| Int) ) (!  (=> (<= (LitInt 0) |i#0|) (=> (< |i#0| |n#0@@2|) (|_module.__default.Bit#canCall| |i#0| |n#0@@2|)))
 :pattern ( (_module.__default.Bit ($LS $LZ) |i#0| |n#0@@2|))
)) (= (_module.__default.BitSet |n#0@@2|) (|Set#FromBoogieMap| (|lambda#1| TInt (LitInt 0) |n#0@@2| ($LS $LZ) |n#0@@2|)))))
 :pattern ( (_module.__default.BitSet |n#0@@2|))
))))
(assert (forall ((|l#0| T@U) (|l#1| Int) (|l#2| Int) (|l#3| T@U) (|l#4| Int) (|$y#0| T@U) ) (! (= (U_2_bool (MapType0Select BoxType boolType (|lambda#1| |l#0| |l#1| |l#2| |l#3| |l#4|) |$y#0|))  (and ($IsBox |$y#0| |l#0|) (and (and (<= |l#1| (U_2_int ($Unbox intType |$y#0|))) (< (U_2_int ($Unbox intType |$y#0|)) |l#2|)) (_module.__default.Bit |l#3| (U_2_int ($Unbox intType |$y#0|)) |l#4|))))
 :pattern ( (MapType0Select BoxType boolType (|lambda#1| |l#0| |l#1| |l#2| |l#3| |l#4|) |$y#0|))
)))
(assert (forall ((|x#0@@0| T@U) ) (! (= ($Is intType |x#0@@0| Tclass._System.nat) (<= (LitInt 0) (U_2_int |x#0@@0|)))
 :pattern ( ($Is intType |x#0@@0| Tclass._System.nat))
)))
(assert (forall (($ly@@2 T@U) (|k#0@@0| Int) (|n#0@@3| Int) ) (! (= (_module.__default.Bit ($LS $ly@@2) |k#0@@0| |n#0@@3|) (_module.__default.Bit $ly@@2 |k#0@@0| |n#0@@3|))
 :pattern ( (_module.__default.Bit ($LS $ly@@2) |k#0@@0| |n#0@@3|))
)))
(assert (forall ((v@@0 T@U) (t T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t h) ($IsAlloc T@@1 v@@0 t h))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t h))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($ly@@3 T@U) (|k#0@@1| Int) (|n#0@@4| Int) ) (!  (=> (or (|_module.__default.Bit#canCall| |k#0@@1| |n#0@@4|) (and (< 0 $FunctionContextHeight) (and (<= (LitInt 0) |k#0@@1|) (<= (LitInt 0) |n#0@@4|)))) (and (=> (or (not (= |k#0@@1| (LitInt 0))) (not true)) (|_module.__default.Bit#canCall| (- |k#0@@1| 1) (Div |n#0@@4| (LitInt 2)))) (= (_module.__default.Bit ($LS $ly@@3) |k#0@@1| |n#0@@4|) (ite (= |k#0@@1| (LitInt 0)) (= (Mod |n#0@@4| (LitInt 2)) (LitInt 1)) (_module.__default.Bit $ly@@3 (- |k#0@@1| 1) (Div |n#0@@4| (LitInt 2)))))))
 :pattern ( (_module.__default.Bit ($LS $ly@@3) |k#0@@1| |n#0@@4|))
))))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 Tclass._System.nat) (and (= ($Box intType ($Unbox intType bx@@1)) bx@@1) ($Is intType ($Unbox intType bx@@1) Tclass._System.nat)))
 :pattern ( ($IsBox bx@@1 Tclass._System.nat))
)))
(assert (forall (($ly@@4 T@U) (|a#0@@1| Int) (|b#0@@1| Int) ) (! (= (_module.__default.binom ($LS $ly@@4) |a#0@@1| |b#0@@1|) (_module.__default.binom $ly@@4 |a#0@@1| |b#0@@1|))
 :pattern ( (_module.__default.binom ($LS $ly@@4) |a#0@@1| |b#0@@1|))
)))
(assert (forall ((|l#0@@0| Int) (|l#1@@0| T@U) (|l#2@@0| Int) (|l#3@@0| T@U) (|$y#0@@0| T@U) ) (! (= (U_2_bool (MapType0Select BoxType boolType (|lambda#11| |l#0@@0| |l#1@@0| |l#2@@0| |l#3@@0|) |$y#0@@0|)) (exists ((|x#0@@1| Int) ) (!  (and (and (<= |l#0@@0| |x#0@@1|) (|Set#IsMember| |l#1@@0| ($Box intType (int_2_U |x#0@@1|)))) (= |$y#0@@0| ($Box intType (int_2_U (+ |x#0@@1| |l#2@@0|)))))
 :pattern ( (|Set#IsMember| |l#3@@0| ($Box intType (int_2_U |x#0@@1|))))
)))
 :pattern ( (MapType0Select BoxType boolType (|lambda#11| |l#0@@0| |l#1@@0| |l#2@@0| |l#3@@0|) |$y#0@@0|))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|S#0| T@U) ) (!  (=> (or (|_module.__default.Suc#canCall| |S#0|) (and (< 0 $FunctionContextHeight) ($Is SetType |S#0| (TSet Tclass._System.nat)))) (= (_module.__default.Suc |S#0|) (|Set#FromBoogieMap| (|lambda#11| (LitInt 0) |S#0| 1 |S#0|))))
 :pattern ( (_module.__default.Suc |S#0|))
))))
(assert (forall ((x@@8 Int) (y@@1 Int) ) (! (= (Div x@@8 y@@1) (div x@@8 y@@1))
 :pattern ( (Div x@@8 y@@1))
)))
(assert (forall ((a@@5 T@U) (b@@2 T@U) ) (!  (=> (|Set#Equal| a@@5 b@@2) (= a@@5 b@@2))
 :pattern ( (|Set#Equal| a@@5 b@@2))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($ly@@5 T@U) (|a#0@@2| Int) (|b#0@@2| Int) ) (!  (=> (or (|_module.__default.binom#canCall| |a#0@@2| |b#0@@2|) (and (< 0 $FunctionContextHeight) (and (<= (LitInt 0) |a#0@@2|) (<= (LitInt 0) |b#0@@2|)))) (and (=> (or (not (= |b#0@@2| (LitInt 0))) (not true)) (=> (or (not (= |a#0@@2| (LitInt 0))) (not true)) (and (|_module.__default.binom#canCall| (- |a#0@@2| 1) |b#0@@2|) (|_module.__default.binom#canCall| (- |a#0@@2| 1) (- |b#0@@2| 1))))) (= (_module.__default.binom ($LS $ly@@5) |a#0@@2| |b#0@@2|) (ite (= |b#0@@2| (LitInt 0)) 1 (ite (= |a#0@@2| (LitInt 0)) 0 (+ (_module.__default.binom $ly@@5 (- |a#0@@2| 1) |b#0@@2|) (_module.__default.binom $ly@@5 (- |a#0@@2| 1) (- |b#0@@2| 1))))))))
 :pattern ( (_module.__default.binom ($LS $ly@@5) |a#0@@2| |b#0@@2|))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|n#0@@5| Int) ) (!  (=> (or (|_module.__default.BitSet#canCall| (LitInt |n#0@@5|)) (and (< 1 $FunctionContextHeight) (<= (LitInt 0) |n#0@@5|))) (and (forall ((|i#1| Int) ) (!  (=> (<= (LitInt 0) |i#1|) (=> (< |i#1| |n#0@@5|) (|_module.__default.Bit#canCall| |i#1| (LitInt |n#0@@5|))))
 :pattern ( (_module.__default.Bit ($LS $LZ) |i#1| |n#0@@5|))
)) (= (_module.__default.BitSet (LitInt |n#0@@5|)) (|Set#FromBoogieMap| (|lambda#1| TInt (LitInt 0) |n#0@@5| ($LS $LZ) (LitInt |n#0@@5|))))))
 :weight 3
 :pattern ( (_module.__default.BitSet (LitInt |n#0@@5|)))
))))
(assert (forall ((bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 TInt) (and (= ($Box intType ($Unbox intType bx@@2)) bx@@2) ($Is intType ($Unbox intType bx@@2) TInt)))
 :pattern ( ($IsBox bx@@2 TInt))
)))
(assert (forall ((v@@1 T@U) (t@@0 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@1) t@@0) ($Is T@@2 v@@1 t@@0))
 :pattern ( ($IsBox ($Box T@@2 v@@1) t@@0))
)))
(assert (forall ((v@@2 T@U) (t0@@1 T@U) (h@@0 T@U) ) (! (= ($IsAlloc SetType v@@2 (TSet t0@@1) h@@0) (forall ((bx@@3 T@U) ) (!  (=> (|Set#IsMember| v@@2 bx@@3) ($IsAllocBox bx@@3 t0@@1 h@@0))
 :pattern ( (|Set#IsMember| v@@2 bx@@3))
)))
 :pattern ( ($IsAlloc SetType v@@2 (TSet t0@@1) h@@0))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|S#0@@0| T@U) ) (!  (=> (or (|_module.__default.Suc#canCall| (Lit SetType |S#0@@0|)) (and (< 0 $FunctionContextHeight) ($Is SetType |S#0@@0| (TSet Tclass._System.nat)))) (= (_module.__default.Suc (Lit SetType |S#0@@0|)) (|Set#FromBoogieMap| (|lambda#11| (LitInt 0) (Lit SetType |S#0@@0|) 1 |S#0@@0|))))
 :weight 3
 :pattern ( (_module.__default.Suc (Lit SetType |S#0@@0|)))
))))
(assert (forall ((t@@1 T@U) ) (! (= (Inv0_TSet (TSet t@@1)) t@@1)
 :pattern ( (TSet t@@1))
)))
(assert (forall ((t@@2 T@U) ) (! (= (Tag (TSet t@@2)) TagSet)
 :pattern ( (TSet t@@2))
)))
(assert (forall ((x@@9 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@9)) x@@9)
 :pattern ( ($Box T@@3 x@@9))
)))
(assert  (and (and (and (and (and (and (forall ((t0@@2 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@2 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@2 t1@@0 t2 (MapType1Store t0@@2 t1@@0 t2 m@@2 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@3 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@3 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@3 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@4 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@4 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@4 y0@@1 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 5)) (= (Ctor FieldType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0@@1| T@U) (|l#1@@1| T@U) (|l#2@@1| T@U) (|l#3@@1| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0@@1| |l#1@@1| |l#2@@1| |l#3@@1|) $o $f))  (=> (and (or (not (= $o |l#0@@1|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1@@1| $o) |l#2@@1|)))) |l#3@@1|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0@@1| |l#1@@1| |l#2@@1| |l#3@@1|) $o $f))
)))
(assert (forall ((x@@10 Int) (y@@2 Int) ) (! (= (Mod x@@10 y@@2) (mod x@@10 y@@2))
 :pattern ( (Mod x@@10 y@@2))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|S#0@@1| T@U) ) (!  (=> (or (|_module.__default.Suc#canCall| |S#0@@1|) (and (< 0 $FunctionContextHeight) ($Is SetType |S#0@@1| (TSet Tclass._System.nat)))) ($Is SetType (_module.__default.Suc |S#0@@1|) (TSet Tclass._System.nat)))
 :pattern ( (_module.__default.Suc |S#0@@1|))
))))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|n#0@@6| Int) ) (!  (=> (or (|_module.__default.EVEN#canCall| |n#0@@6|) (and (< 0 $FunctionContextHeight) (<= (LitInt 0) |n#0@@6|))) (= (_module.__default.EVEN |n#0@@6|) (= (Mod |n#0@@6| (LitInt 2)) (LitInt 0))))
 :pattern ( (_module.__default.EVEN |n#0@@6|))
))))
(assert (forall ((bx@@4 T@U) (t@@3 T@U) ) (!  (=> ($IsBox bx@@4 (TSet t@@3)) (and (= ($Box SetType ($Unbox SetType bx@@4)) bx@@4) ($Is SetType ($Unbox SetType bx@@4) (TSet t@@3))))
 :pattern ( ($IsBox bx@@4 (TSet t@@3)))
)))
(assert (= (Tag Tclass._System.nat) Tagclass._System.nat))
(assert (= (TagFamily Tclass._System.nat) tytagFamily$nat))
(assert (forall ((a@@6 T@U) (b@@3 T@U) ) (! (= (|Set#Equal| a@@6 b@@3) (forall ((o@@3 T@U) ) (! (= (|Set#IsMember| a@@6 o@@3) (|Set#IsMember| b@@3 o@@3))
 :pattern ( (|Set#IsMember| a@@6 o@@3))
 :pattern ( (|Set#IsMember| b@@3 o@@3))
)))
 :pattern ( (|Set#Equal| a@@6 b@@3))
)))
(assert (forall ((x@@11 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@11))) (Lit BoxType ($Box intType (int_2_U x@@11))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@11))))
)))
(assert (forall ((x@@12 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@12)) (Lit BoxType ($Box T@@4 x@@12)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@12)))
)))
(assert (forall ((h@@1 T@U) (v@@3 T@U) ) (! ($IsAlloc intType v@@3 TInt h@@1)
 :pattern ( ($IsAlloc intType v@@3 TInt h@@1))
)))
(assert (forall ((v@@4 T@U) ) (! ($Is intType v@@4 TInt)
 :pattern ( ($Is intType v@@4 TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |m#0| () Int)
(declare-fun |n#0@@7| () Int)
(declare-fun $Heap@0 () T@U)
(declare-fun |##n#1_0_0_1_0@0| () Int)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $Heap@7 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |$rhs#1_1_0@0| () Int)
(declare-fun |##S#1_1_0_1_0@0| () T@U)
(declare-fun |$rhs#1_1_1@0| () Int)
(declare-fun |##S#1_1_0_1_1@0| () T@U)
(declare-fun $Heap@5 () T@U)
(declare-fun $Heap@6 () T@U)
(declare-fun |S##1_1_0_2_0@0| () T@U)
(declare-fun $Heap@3 () T@U)
(declare-fun |S##1_1_0_2_1@0| () T@U)
(declare-fun $Heap@4 () T@U)
(declare-fun |##S#1_1_0_2_0@0| () T@U)
(declare-fun |##S#1_1_0_2_1@0| () T@U)
(declare-fun |##n#1_1_0_3_0@0| () Int)
(declare-fun $Heap@2 () T@U)
(declare-fun |##n#1_1_0_4_0@0| () Int)
(declare-fun $Heap@1 () T@U)
(declare-fun |##n#1_1_0_4_1@0| () Int)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $Heap () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 64) (let ((anon12_correct  (=> (and (|_module.__default.BitSet#canCall| |m#0|) (=> (|Set#IsMember| (_module.__default.BitSet |m#0|) ($Box intType (int_2_U (LitInt 0)))) (|_module.__default.BitSet#canCall| |n#0@@7|))) (and (=> (= (ControlFlow 0 49) (- 0 51)) (|Set#IsMember| (_module.__default.BitSet |m#0|) ($Box intType (int_2_U (LitInt 0))))) (and (=> (= (ControlFlow 0 49) (- 0 50)) (not (|Set#IsMember| (_module.__default.BitSet |n#0@@7|) ($Box intType (int_2_U (LitInt 0)))))) (=> (and (|Set#IsMember| (_module.__default.BitSet |m#0|) ($Box intType (int_2_U (LitInt 0)))) (not (|Set#IsMember| (_module.__default.BitSet |n#0@@7|) ($Box intType (int_2_U (LitInt 0)))))) (=> (and (and (and ($IsAlloc intType (int_2_U |m#0|) Tclass._System.nat $Heap@0) (|_module.__default.BitSet#canCall| |m#0|)) (and ($IsAlloc intType (int_2_U |n#0@@7|) Tclass._System.nat $Heap@0) (|_module.__default.BitSet#canCall| |n#0@@7|))) (and (and (|_module.__default.BitSet#canCall| |m#0|) (|_module.__default.BitSet#canCall| |n#0@@7|)) (= (ControlFlow 0 49) (- 0 48)))) (= (U_2_bool (Lit boolType (bool_2_U false))) (|Set#Subset| (_module.__default.BitSet |m#0|) (_module.__default.BitSet |n#0@@7|))))))))))
(let ((anon33_Else_correct  (=> (and (not (|Set#IsMember| (_module.__default.BitSet |m#0|) ($Box intType (int_2_U (LitInt 0))))) (= (ControlFlow 0 53) 49)) anon12_correct)))
(let ((anon33_Then_correct  (=> (and (and (|Set#IsMember| (_module.__default.BitSet |m#0|) ($Box intType (int_2_U (LitInt 0)))) ($IsAlloc intType (int_2_U |n#0@@7|) Tclass._System.nat $Heap@0)) (and (|_module.__default.BitSet#canCall| |n#0@@7|) (= (ControlFlow 0 52) 49))) anon12_correct)))
(let ((anon32_Then_correct  (=> (and ($IsAlloc intType (int_2_U |m#0|) Tclass._System.nat $Heap@0) (|_module.__default.BitSet#canCall| |m#0|)) (and (=> (= (ControlFlow 0 54) 52) anon33_Then_correct) (=> (= (ControlFlow 0 54) 53) anon33_Else_correct)))))
(let ((anon31_Then_correct  (=> (and ($IsAlloc intType (int_2_U |n#0@@7|) Tclass._System.nat $Heap@0) ($IsAlloc intType (int_2_U |m#0|) Tclass._System.nat $Heap@0)) (=> (and (and (and (and (|_module.__default.binom#canCall| |n#0@@7| |m#0|) (= |##n#1_0_0_1_0@0| (_module.__default.binom ($LS $LZ) |n#0@@7| |m#0|))) (and ($IsAlloc intType (int_2_U |##n#1_0_0_1_0@0|) Tclass._System.nat $Heap@0) (|_module.__default.EVEN#canCall| (_module.__default.binom ($LS $LZ) |n#0@@7| |m#0|)))) (and (and (|_module.__default.binom#canCall| |n#0@@7| |m#0|) (|_module.__default.EVEN#canCall| (_module.__default.binom ($LS $LZ) |n#0@@7| |m#0|))) (and ($IsGoodHeap $Heap@7) ($IsHeapAnchor $Heap@7)))) (and (and (and (|_module.__default.binom#canCall| |n#0@@7| |m#0|) (and (and (|_module.__default.EVEN#canCall| |n#0@@7|) (=> (_module.__default.EVEN |n#0@@7|) (|_module.__default.EVEN#canCall| |m#0|))) (=> (not (and (_module.__default.EVEN |n#0@@7|) (not (_module.__default.EVEN |m#0|)))) (|_module.__default.binom#canCall| (Div |n#0@@7| (LitInt 2)) (Div |m#0| (LitInt 2)))))) (= (Mod (_module.__default.binom ($LS ($LS $LZ)) |n#0@@7| |m#0|) (LitInt 2)) (ite  (and (_module.__default.EVEN |n#0@@7|) (not (_module.__default.EVEN |m#0|))) 0 (Mod (_module.__default.binom ($LS ($LS $LZ)) (Div |n#0@@7| (LitInt 2)) (Div |m#0| (LitInt 2))) (LitInt 2))))) (and (= $Heap@0 $Heap@7) (= (ControlFlow 0 46) (- 0 45))))) (=  (not (_module.__default.EVEN (_module.__default.binom ($LS ($LS $LZ)) |n#0@@7| |m#0|))) (U_2_bool (Lit boolType (bool_2_U false))))))))
(let ((anon30_Then_correct true))
(let ((anon24_correct  (=> (and (|_module.__default.BitSet#canCall| |n#0@@7|) (=> (|Set#IsMember| (_module.__default.BitSet |n#0@@7|) ($Box intType (int_2_U (LitInt 0)))) (and (|_module.__default.BitSet#canCall| |n#0@@7|) (|_module.__default.BitSet#canCall| |n#0@@7|)))) (and (=> (= (ControlFlow 0 30) (- 0 31)) (=> (|Set#IsMember| (_module.__default.BitSet |n#0@@7|) ($Box intType (int_2_U (LitInt 0)))) (|Set#Subset| (|Set#Difference| (_module.__default.BitSet |n#0@@7|) (|Set#UnionOne| |Set#Empty| ($Box intType (int_2_U (LitInt 0))))) (_module.__default.BitSet |n#0@@7|)))) (=> (=> (|Set#IsMember| (_module.__default.BitSet |n#0@@7|) ($Box intType (int_2_U (LitInt 0)))) (|Set#Subset| (|Set#Difference| (_module.__default.BitSet |n#0@@7|) (|Set#UnionOne| |Set#Empty| ($Box intType (int_2_U (LitInt 0))))) (_module.__default.BitSet |n#0@@7|))) (=> (and (and (and ($IsAlloc intType (int_2_U |m#0|) Tclass._System.nat $Heap@0) (|_module.__default.BitSet#canCall| |m#0|)) (and ($IsAlloc intType (int_2_U |n#0@@7|) Tclass._System.nat $Heap@0) (|_module.__default.BitSet#canCall| |n#0@@7|))) (and (and (|_module.__default.BitSet#canCall| |m#0|) (|_module.__default.BitSet#canCall| |n#0@@7|)) (= (ControlFlow 0 30) (- 0 29)))) (= (|Set#Subset| (|Set#Difference| (_module.__default.BitSet |m#0|) (|Set#UnionOne| |Set#Empty| ($Box intType (int_2_U (LitInt 0))))) (|Set#Difference| (_module.__default.BitSet |n#0@@7|) (|Set#UnionOne| |Set#Empty| ($Box intType (int_2_U (LitInt 0)))))) (|Set#Subset| (_module.__default.BitSet |m#0|) (_module.__default.BitSet |n#0@@7|)))))))))
(let ((anon41_Else_correct  (=> (and (not (|Set#IsMember| (_module.__default.BitSet |n#0@@7|) ($Box intType (int_2_U (LitInt 0))))) (= (ControlFlow 0 34) 30)) anon24_correct)))
(let ((anon41_Then_correct  (=> (|Set#IsMember| (_module.__default.BitSet |n#0@@7|) ($Box intType (int_2_U (LitInt 0)))) (=> (and ($IsAlloc intType (int_2_U |n#0@@7|) Tclass._System.nat $Heap@0) (|_module.__default.BitSet#canCall| |n#0@@7|)) (and (=> (= (ControlFlow 0 32) (- 0 33)) ($Is intType (int_2_U (LitInt 0)) Tclass._System.nat)) (=> ($Is intType (int_2_U (LitInt 0)) Tclass._System.nat) (=> ($IsAlloc intType (int_2_U |n#0@@7|) Tclass._System.nat $Heap@0) (=> (and (|_module.__default.BitSet#canCall| |n#0@@7|) (= (ControlFlow 0 32) 30)) anon24_correct))))))))
(let ((anon22_correct  (=> (and (|_module.__default.BitSet#canCall| |m#0|) (=> (not (|Set#IsMember| (_module.__default.BitSet |m#0|) ($Box intType (int_2_U (LitInt 0))))) (and (|_module.__default.BitSet#canCall| |m#0|) (|_module.__default.BitSet#canCall| |m#0|)))) (and (=> (= (ControlFlow 0 35) (- 0 36)) (=> (not (|Set#IsMember| (_module.__default.BitSet |m#0|) ($Box intType (int_2_U (LitInt 0))))) (|Set#Equal| (_module.__default.BitSet |m#0|) (|Set#Difference| (_module.__default.BitSet |m#0|) (|Set#UnionOne| |Set#Empty| ($Box intType (int_2_U (LitInt 0)))))))) (=> (=> (not (|Set#IsMember| (_module.__default.BitSet |m#0|) ($Box intType (int_2_U (LitInt 0))))) (|Set#Equal| (_module.__default.BitSet |m#0|) (|Set#Difference| (_module.__default.BitSet |m#0|) (|Set#UnionOne| |Set#Empty| ($Box intType (int_2_U (LitInt 0))))))) (=> (and ($IsAlloc intType (int_2_U |n#0@@7|) Tclass._System.nat $Heap@0) (|_module.__default.BitSet#canCall| |n#0@@7|)) (and (=> (= (ControlFlow 0 35) 32) anon41_Then_correct) (=> (= (ControlFlow 0 35) 34) anon41_Else_correct))))))))
(let ((anon40_Else_correct  (=> (and (|Set#IsMember| (_module.__default.BitSet |m#0|) ($Box intType (int_2_U (LitInt 0)))) (= (ControlFlow 0 39) 35)) anon22_correct)))
(let ((anon40_Then_correct  (=> (not (|Set#IsMember| (_module.__default.BitSet |m#0|) ($Box intType (int_2_U (LitInt 0))))) (=> (and (and ($IsAlloc intType (int_2_U |m#0|) Tclass._System.nat $Heap@0) (|_module.__default.BitSet#canCall| |m#0|)) (and ($IsAlloc intType (int_2_U |m#0|) Tclass._System.nat $Heap@0) (|_module.__default.BitSet#canCall| |m#0|))) (and (=> (= (ControlFlow 0 37) (- 0 38)) ($Is intType (int_2_U (LitInt 0)) Tclass._System.nat)) (=> ($Is intType (int_2_U (LitInt 0)) Tclass._System.nat) (=> (= (ControlFlow 0 37) 35) anon22_correct)))))))
(let ((anon39_Then_correct  (=> (and ($IsAlloc intType (int_2_U |m#0|) Tclass._System.nat $Heap@0) (|_module.__default.BitSet#canCall| |m#0|)) (=> (and (and (and ($Is intType (int_2_U (LitInt 0)) Tclass._System.nat) ($IsAlloc intType (int_2_U |n#0@@7|) Tclass._System.nat $Heap@0)) (and (|_module.__default.BitSet#canCall| |n#0@@7|) ($Is intType (int_2_U (LitInt 0)) Tclass._System.nat))) (and (and (|_module.__default.BitSet#canCall| |m#0|) (|_module.__default.BitSet#canCall| |n#0@@7|)) (and ($IsAlloc intType (int_2_U |m#0|) Tclass._System.nat $Heap@0) (|_module.__default.BitSet#canCall| |m#0|)))) (and (=> (= (ControlFlow 0 40) 37) anon40_Then_correct) (=> (= (ControlFlow 0 40) 39) anon40_Else_correct))))))
(let ((GeneratedUnifiedExit_correct  (=> (= (ControlFlow 0 26) (- 0 25)) (= (|Set#Subset| (_module.__default.BitSet |m#0|) (_module.__default.BitSet |n#0@@7|))  (not (_module.__default.EVEN (_module.__default.binom ($LS ($LS $LZ)) |n#0@@7| |m#0|)))))))
(let ((anon32_Else_correct  (=> (and (=  (not (_module.__default.EVEN (_module.__default.binom ($LS $LZ) |n#0@@7| |m#0|))) (|Set#Subset| (_module.__default.BitSet |m#0|) (_module.__default.BitSet |n#0@@7|))) (= (ControlFlow 0 47) 26)) GeneratedUnifiedExit_correct)))
(let ((anon29_Then_correct  (=> (and (_module.__default.EVEN |n#0@@7|) (not (_module.__default.EVEN |m#0|))) (and (and (and (=> (= (ControlFlow 0 55) 44) anon30_Then_correct) (=> (= (ControlFlow 0 55) 46) anon31_Then_correct)) (=> (= (ControlFlow 0 55) 54) anon32_Then_correct)) (=> (= (ControlFlow 0 55) 47) anon32_Else_correct)))))
(let ((anon39_Else_correct  (=> (and (=  (not (_module.__default.EVEN (_module.__default.binom ($LS $LZ) |n#0@@7| |m#0|))) (|Set#Subset| (_module.__default.BitSet |m#0|) (_module.__default.BitSet |n#0@@7|))) (= (ControlFlow 0 28) 26)) GeneratedUnifiedExit_correct)))
(let ((anon27_Then_correct  (=> (and (and (= |m#0| (LitInt 0)) (= |n#0@@7| (LitInt 0))) (= (ControlFlow 0 27) 26)) GeneratedUnifiedExit_correct)))
(let ((anon38_Then_correct  (=> (and (and ($Is intType (int_2_U |$rhs#1_1_0@0|) Tclass._System.nat) ($IsAlloc intType (int_2_U |$rhs#1_1_0@0|) Tclass._System.nat $Heap@0)) (and (|_module.__default.BitSet#canCall| |$rhs#1_1_0@0|) (= |##S#1_1_0_1_0@0| (_module.__default.BitSet |$rhs#1_1_0@0|)))) (=> (and (and (and ($IsAlloc SetType |##S#1_1_0_1_0@0| (TSet Tclass._System.nat) $Heap@0) (|_module.__default.Suc#canCall| (_module.__default.BitSet |$rhs#1_1_0@0|))) (and ($Is intType (int_2_U |$rhs#1_1_1@0|) Tclass._System.nat) ($IsAlloc intType (int_2_U |$rhs#1_1_1@0|) Tclass._System.nat $Heap@0))) (and (and (|_module.__default.BitSet#canCall| |$rhs#1_1_1@0|) (= |##S#1_1_0_1_1@0| (_module.__default.BitSet |$rhs#1_1_1@0|))) (and ($IsAlloc SetType |##S#1_1_0_1_1@0| (TSet Tclass._System.nat) $Heap@0) (|_module.__default.Suc#canCall| (_module.__default.BitSet |$rhs#1_1_1@0|))))) (=> (and (and (and (and (and (|_module.__default.BitSet#canCall| |$rhs#1_1_0@0|) (|_module.__default.Suc#canCall| (_module.__default.BitSet |$rhs#1_1_0@0|))) (and (|_module.__default.BitSet#canCall| |$rhs#1_1_1@0|) (|_module.__default.Suc#canCall| (_module.__default.BitSet |$rhs#1_1_1@0|)))) (and ($IsGoodHeap $Heap@5) ($IsHeapAnchor $Heap@5))) (and (and (|_module.__default.BitSet#canCall| |m#0|) (and (|_module.__default.BitSet#canCall| (Div |m#0| (LitInt 2))) (|_module.__default.Suc#canCall| (_module.__default.BitSet (Div |m#0| (LitInt 2)))))) (and (|Set#Equal| (|Set#Difference| (_module.__default.BitSet |m#0|) (|Set#UnionOne| |Set#Empty| ($Box intType (int_2_U (LitInt 0))))) (_module.__default.Suc (_module.__default.BitSet (Div |m#0| (LitInt 2))))) (= $Heap@0 $Heap@5)))) (and (and (and ($IsGoodHeap $Heap@6) ($IsHeapAnchor $Heap@6)) (and (|_module.__default.BitSet#canCall| |n#0@@7|) (and (|_module.__default.BitSet#canCall| (Div |n#0@@7| (LitInt 2))) (|_module.__default.Suc#canCall| (_module.__default.BitSet (Div |n#0@@7| (LitInt 2))))))) (and (and (|Set#Equal| (|Set#Difference| (_module.__default.BitSet |n#0@@7|) (|Set#UnionOne| |Set#Empty| ($Box intType (int_2_U (LitInt 0))))) (_module.__default.Suc (_module.__default.BitSet (Div |n#0@@7| (LitInt 2))))) (= $Heap@5 $Heap@6)) (and ($IsAlloc intType (int_2_U |m#0|) Tclass._System.nat $Heap@6) (|_module.__default.BitSet#canCall| |m#0|))))) (and (=> (= (ControlFlow 0 22) (- 0 24)) ($Is intType (int_2_U (LitInt 0)) Tclass._System.nat)) (=> ($Is intType (int_2_U (LitInt 0)) Tclass._System.nat) (=> (and ($IsAlloc intType (int_2_U |n#0@@7|) Tclass._System.nat $Heap@6) (|_module.__default.BitSet#canCall| |n#0@@7|)) (and (=> (= (ControlFlow 0 22) (- 0 23)) ($Is intType (int_2_U (LitInt 0)) Tclass._System.nat)) (=> ($Is intType (int_2_U (LitInt 0)) Tclass._System.nat) (=> (and (and (|_module.__default.BitSet#canCall| |m#0|) (|_module.__default.BitSet#canCall| |n#0@@7|)) (= (ControlFlow 0 22) (- 0 21))) (= (|Set#Subset| (_module.__default.Suc (_module.__default.BitSet |$rhs#1_1_0@0|)) (_module.__default.Suc (_module.__default.BitSet |$rhs#1_1_1@0|))) (|Set#Subset| (|Set#Difference| (_module.__default.BitSet |m#0|) (|Set#UnionOne| |Set#Empty| ($Box intType (int_2_U (LitInt 0))))) (|Set#Difference| (_module.__default.BitSet |n#0@@7|) (|Set#UnionOne| |Set#Empty| ($Box intType (int_2_U (LitInt 0))))))))))))))))))
(let ((anon37_Then_correct  (=> (and (and (and ($Is intType (int_2_U |$rhs#1_1_0@0|) Tclass._System.nat) ($IsAlloc intType (int_2_U |$rhs#1_1_0@0|) Tclass._System.nat $Heap@0)) (and (|_module.__default.BitSet#canCall| |$rhs#1_1_0@0|) ($Is intType (int_2_U |$rhs#1_1_1@0|) Tclass._System.nat))) (and (and ($IsAlloc intType (int_2_U |$rhs#1_1_1@0|) Tclass._System.nat $Heap@0) (|_module.__default.BitSet#canCall| |$rhs#1_1_1@0|)) (and (|_module.__default.BitSet#canCall| |$rhs#1_1_0@0|) (|_module.__default.BitSet#canCall| |$rhs#1_1_1@0|)))) (and (=> (= (ControlFlow 0 16) (- 0 20)) ($Is intType (int_2_U |$rhs#1_1_0@0|) Tclass._System.nat)) (=> ($Is intType (int_2_U |$rhs#1_1_0@0|) Tclass._System.nat) (=> (and (and ($IsAlloc intType (int_2_U |$rhs#1_1_0@0|) Tclass._System.nat $Heap@0) (|_module.__default.BitSet#canCall| |$rhs#1_1_0@0|)) (and (|_module.__default.BitSet#canCall| |$rhs#1_1_0@0|) (= |S##1_1_0_2_0@0| (_module.__default.BitSet |$rhs#1_1_0@0|)))) (=> (and (and (and ($IsGoodHeap $Heap@3) ($IsHeapAnchor $Heap@3)) (|_module.__default.Suc#canCall| |S##1_1_0_2_0@0|)) (and (forall ((|x#1| T@U) ) (! (= (|Set#IsMember| |S##1_1_0_2_0@0| ($Box intType |x#1|)) (|Set#IsMember| (_module.__default.Suc |S##1_1_0_2_0@0|) ($Box intType (int_2_U (+ (U_2_int |x#1|) 1)))))
 :pattern ( (|Set#IsMember| |S##1_1_0_2_0@0| ($Box intType |x#1|)))
)) (= $Heap@0 $Heap@3))) (and (=> (= (ControlFlow 0 16) (- 0 19)) ($Is intType (int_2_U |$rhs#1_1_1@0|) Tclass._System.nat)) (=> ($Is intType (int_2_U |$rhs#1_1_1@0|) Tclass._System.nat) (=> (and (and ($IsAlloc intType (int_2_U |$rhs#1_1_1@0|) Tclass._System.nat $Heap@3) (|_module.__default.BitSet#canCall| |$rhs#1_1_1@0|)) (and (|_module.__default.BitSet#canCall| |$rhs#1_1_1@0|) (= |S##1_1_0_2_1@0| (_module.__default.BitSet |$rhs#1_1_1@0|)))) (=> (and (and (and ($IsGoodHeap $Heap@4) ($IsHeapAnchor $Heap@4)) (|_module.__default.Suc#canCall| |S##1_1_0_2_1@0|)) (and (forall ((|x#1@@0| T@U) ) (! (= (|Set#IsMember| |S##1_1_0_2_1@0| ($Box intType |x#1@@0|)) (|Set#IsMember| (_module.__default.Suc |S##1_1_0_2_1@0|) ($Box intType (int_2_U (+ (U_2_int |x#1@@0|) 1)))))
 :pattern ( (|Set#IsMember| |S##1_1_0_2_1@0| ($Box intType |x#1@@0|)))
)) (= $Heap@3 $Heap@4))) (and (=> (= (ControlFlow 0 16) (- 0 18)) ($Is intType (int_2_U |$rhs#1_1_0@0|) Tclass._System.nat)) (=> ($Is intType (int_2_U |$rhs#1_1_0@0|) Tclass._System.nat) (=> ($IsAlloc intType (int_2_U |$rhs#1_1_0@0|) Tclass._System.nat $Heap@4) (=> (and (and (|_module.__default.BitSet#canCall| |$rhs#1_1_0@0|) (= |##S#1_1_0_2_0@0| (_module.__default.BitSet |$rhs#1_1_0@0|))) (and ($IsAlloc SetType |##S#1_1_0_2_0@0| (TSet Tclass._System.nat) $Heap@4) (|_module.__default.Suc#canCall| (_module.__default.BitSet |$rhs#1_1_0@0|)))) (and (=> (= (ControlFlow 0 16) (- 0 17)) ($Is intType (int_2_U |$rhs#1_1_1@0|) Tclass._System.nat)) (=> ($Is intType (int_2_U |$rhs#1_1_1@0|) Tclass._System.nat) (=> ($IsAlloc intType (int_2_U |$rhs#1_1_1@0|) Tclass._System.nat $Heap@4) (=> (and (and (|_module.__default.BitSet#canCall| |$rhs#1_1_1@0|) (= |##S#1_1_0_2_1@0| (_module.__default.BitSet |$rhs#1_1_1@0|))) (and ($IsAlloc SetType |##S#1_1_0_2_1@0| (TSet Tclass._System.nat) $Heap@4) (|_module.__default.Suc#canCall| (_module.__default.BitSet |$rhs#1_1_1@0|)))) (=> (and (and (and (|_module.__default.BitSet#canCall| |$rhs#1_1_0@0|) (|_module.__default.Suc#canCall| (_module.__default.BitSet |$rhs#1_1_0@0|))) (and (|_module.__default.BitSet#canCall| |$rhs#1_1_1@0|) (|_module.__default.Suc#canCall| (_module.__default.BitSet |$rhs#1_1_1@0|)))) (= (ControlFlow 0 16) (- 0 15))) (= (|Set#Subset| (_module.__default.BitSet |$rhs#1_1_0@0|) (_module.__default.BitSet |$rhs#1_1_1@0|)) (|Set#Subset| (_module.__default.Suc (_module.__default.BitSet |$rhs#1_1_0@0|)) (_module.__default.Suc (_module.__default.BitSet |$rhs#1_1_1@0|))))))))))))))))))))))))
(let ((anon36_Then_correct  (=> (and ($Is intType (int_2_U |$rhs#1_1_1@0|) Tclass._System.nat) ($IsAlloc intType (int_2_U |$rhs#1_1_1@0|) Tclass._System.nat $Heap@0)) (=> (and (and (and ($Is intType (int_2_U |$rhs#1_1_0@0|) Tclass._System.nat) ($IsAlloc intType (int_2_U |$rhs#1_1_0@0|) Tclass._System.nat $Heap@0)) (and (|_module.__default.binom#canCall| |$rhs#1_1_1@0| |$rhs#1_1_0@0|) (= |##n#1_1_0_3_0@0| (_module.__default.binom ($LS $LZ) |$rhs#1_1_1@0| |$rhs#1_1_0@0|)))) (and (and ($IsAlloc intType (int_2_U |##n#1_1_0_3_0@0|) Tclass._System.nat $Heap@0) (|_module.__default.EVEN#canCall| (_module.__default.binom ($LS $LZ) |$rhs#1_1_1@0| |$rhs#1_1_0@0|))) (and (|_module.__default.binom#canCall| |$rhs#1_1_1@0| |$rhs#1_1_0@0|) (|_module.__default.EVEN#canCall| (_module.__default.binom ($LS $LZ) |$rhs#1_1_1@0| |$rhs#1_1_0@0|))))) (and (=> (= (ControlFlow 0 7) (- 0 14)) ($Is intType (int_2_U |$rhs#1_1_0@0|) Tclass._System.nat)) (=> ($Is intType (int_2_U |$rhs#1_1_0@0|) Tclass._System.nat) (and (=> (= (ControlFlow 0 7) (- 0 13)) ($Is intType (int_2_U |$rhs#1_1_1@0|) Tclass._System.nat)) (=> ($Is intType (int_2_U |$rhs#1_1_1@0|) Tclass._System.nat) (and (=> (= (ControlFlow 0 7) (- 0 12)) (or (<= 0 |m#0|) (= |$rhs#1_1_0@0| |m#0|))) (=> (or (<= 0 |m#0|) (= |$rhs#1_1_0@0| |m#0|)) (and (=> (= (ControlFlow 0 7) (- 0 11)) (or (or (<= 0 |n#0@@7|) (< |$rhs#1_1_0@0| |m#0|)) (= |$rhs#1_1_1@0| |n#0@@7|))) (=> (or (or (<= 0 |n#0@@7|) (< |$rhs#1_1_0@0| |m#0|)) (= |$rhs#1_1_1@0| |n#0@@7|)) (and (=> (= (ControlFlow 0 7) (- 0 10)) (or (< |$rhs#1_1_0@0| |m#0|) (and (= |$rhs#1_1_0@0| |m#0|) (< |$rhs#1_1_1@0| |n#0@@7|)))) (=> (or (< |$rhs#1_1_0@0| |m#0|) (and (= |$rhs#1_1_0@0| |m#0|) (< |$rhs#1_1_1@0| |n#0@@7|))) (=> (and ($IsGoodHeap $Heap@2) ($IsHeapAnchor $Heap@2)) (=> (and (and (and (|_module.__default.BitSet#canCall| |$rhs#1_1_0@0|) (|_module.__default.BitSet#canCall| |$rhs#1_1_1@0|)) (and (|_module.__default.binom#canCall| |$rhs#1_1_1@0| |$rhs#1_1_0@0|) (|_module.__default.EVEN#canCall| (_module.__default.binom ($LS $LZ) |$rhs#1_1_1@0| |$rhs#1_1_0@0|)))) (and (= (|Set#Subset| (_module.__default.BitSet |$rhs#1_1_0@0|) (_module.__default.BitSet |$rhs#1_1_1@0|))  (not (_module.__default.EVEN (_module.__default.binom ($LS ($LS $LZ)) |$rhs#1_1_1@0| |$rhs#1_1_0@0|)))) (= $Heap@0 $Heap@2))) (and (=> (= (ControlFlow 0 7) (- 0 9)) ($Is intType (int_2_U |$rhs#1_1_0@0|) Tclass._System.nat)) (=> ($Is intType (int_2_U |$rhs#1_1_0@0|) Tclass._System.nat) (=> (and ($IsAlloc intType (int_2_U |$rhs#1_1_0@0|) Tclass._System.nat $Heap@2) (|_module.__default.BitSet#canCall| |$rhs#1_1_0@0|)) (and (=> (= (ControlFlow 0 7) (- 0 8)) ($Is intType (int_2_U |$rhs#1_1_1@0|) Tclass._System.nat)) (=> ($Is intType (int_2_U |$rhs#1_1_1@0|) Tclass._System.nat) (=> (and ($IsAlloc intType (int_2_U |$rhs#1_1_1@0|) Tclass._System.nat $Heap@2) (|_module.__default.BitSet#canCall| |$rhs#1_1_1@0|)) (=> (and (and (|_module.__default.BitSet#canCall| |$rhs#1_1_0@0|) (|_module.__default.BitSet#canCall| |$rhs#1_1_1@0|)) (= (ControlFlow 0 7) (- 0 6))) (=  (not (_module.__default.EVEN (_module.__default.binom ($LS ($LS $LZ)) |$rhs#1_1_1@0| |$rhs#1_1_0@0|))) (|Set#Subset| (_module.__default.BitSet |$rhs#1_1_0@0|) (_module.__default.BitSet |$rhs#1_1_1@0|))))))))))))))))))))))))))
(let ((anon35_Then_correct  (=> (and ($IsAlloc intType (int_2_U |n#0@@7|) Tclass._System.nat $Heap@0) ($IsAlloc intType (int_2_U |m#0|) Tclass._System.nat $Heap@0)) (=> (and (and (|_module.__default.binom#canCall| |n#0@@7| |m#0|) (= |##n#1_1_0_4_0@0| (_module.__default.binom ($LS $LZ) |n#0@@7| |m#0|))) (and ($IsAlloc intType (int_2_U |##n#1_1_0_4_0@0|) Tclass._System.nat $Heap@0) (|_module.__default.EVEN#canCall| (_module.__default.binom ($LS $LZ) |n#0@@7| |m#0|)))) (=> (and (and (and (|_module.__default.binom#canCall| |n#0@@7| |m#0|) (|_module.__default.EVEN#canCall| (_module.__default.binom ($LS $LZ) |n#0@@7| |m#0|))) (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1))) (and (and (|_module.__default.binom#canCall| |n#0@@7| |m#0|) (and (and (|_module.__default.EVEN#canCall| |n#0@@7|) (=> (_module.__default.EVEN |n#0@@7|) (|_module.__default.EVEN#canCall| |m#0|))) (=> (not (and (_module.__default.EVEN |n#0@@7|) (not (_module.__default.EVEN |m#0|)))) (|_module.__default.binom#canCall| (Div |n#0@@7| (LitInt 2)) (Div |m#0| (LitInt 2)))))) (and (= (Mod (_module.__default.binom ($LS ($LS $LZ)) |n#0@@7| |m#0|) (LitInt 2)) (ite  (and (_module.__default.EVEN |n#0@@7|) (not (_module.__default.EVEN |m#0|))) 0 (Mod (_module.__default.binom ($LS ($LS $LZ)) (Div |n#0@@7| (LitInt 2)) (Div |m#0| (LitInt 2))) (LitInt 2)))) (= $Heap@0 $Heap@1)))) (and (=> (= (ControlFlow 0 3) (- 0 5)) ($Is intType (int_2_U |$rhs#1_1_1@0|) Tclass._System.nat)) (=> ($Is intType (int_2_U |$rhs#1_1_1@0|) Tclass._System.nat) (=> ($IsAlloc intType (int_2_U |$rhs#1_1_1@0|) Tclass._System.nat $Heap@1) (and (=> (= (ControlFlow 0 3) (- 0 4)) ($Is intType (int_2_U |$rhs#1_1_0@0|) Tclass._System.nat)) (=> ($Is intType (int_2_U |$rhs#1_1_0@0|) Tclass._System.nat) (=> ($IsAlloc intType (int_2_U |$rhs#1_1_0@0|) Tclass._System.nat $Heap@1) (=> (and (and (and (|_module.__default.binom#canCall| |$rhs#1_1_1@0| |$rhs#1_1_0@0|) (= |##n#1_1_0_4_1@0| (_module.__default.binom ($LS $LZ) |$rhs#1_1_1@0| |$rhs#1_1_0@0|))) (and ($IsAlloc intType (int_2_U |##n#1_1_0_4_1@0|) Tclass._System.nat $Heap@1) (|_module.__default.EVEN#canCall| (_module.__default.binom ($LS $LZ) |$rhs#1_1_1@0| |$rhs#1_1_0@0|)))) (and (and (|_module.__default.binom#canCall| |$rhs#1_1_1@0| |$rhs#1_1_0@0|) (|_module.__default.EVEN#canCall| (_module.__default.binom ($LS $LZ) |$rhs#1_1_1@0| |$rhs#1_1_0@0|))) (= (ControlFlow 0 3) (- 0 2)))) (=  (not (_module.__default.EVEN (_module.__default.binom ($LS ($LS $LZ)) |n#0@@7| |m#0|)))  (not (_module.__default.EVEN (_module.__default.binom ($LS ($LS $LZ)) |$rhs#1_1_1@0| |$rhs#1_1_0@0|))))))))))))))))
(let ((anon34_Then_correct true))
(let ((anon29_Else_correct  (=> (not (and (_module.__default.EVEN |n#0@@7|) (not (_module.__default.EVEN |m#0|)))) (and (=> (= (ControlFlow 0 41) (- 0 43)) (or (not (= (LitInt 2) 0)) (not true))) (=> (or (not (= (LitInt 2) 0)) (not true)) (=> (= |$rhs#1_1_0@0| (Div |m#0| (LitInt 2))) (and (=> (= (ControlFlow 0 41) (- 0 42)) (or (not (= (LitInt 2) 0)) (not true))) (=> (or (not (= (LitInt 2) 0)) (not true)) (=> (= |$rhs#1_1_1@0| (Div |n#0@@7| (LitInt 2))) (and (and (and (and (and (and (=> (= (ControlFlow 0 41) 1) anon34_Then_correct) (=> (= (ControlFlow 0 41) 3) anon35_Then_correct)) (=> (= (ControlFlow 0 41) 7) anon36_Then_correct)) (=> (= (ControlFlow 0 41) 16) anon37_Then_correct)) (=> (= (ControlFlow 0 41) 22) anon38_Then_correct)) (=> (= (ControlFlow 0 41) 40) anon39_Then_correct)) (=> (= (ControlFlow 0 41) 28) anon39_Else_correct)))))))))))
(let ((anon6_correct  (=> (and (|_module.__default.EVEN#canCall| |n#0@@7|) (=> (_module.__default.EVEN |n#0@@7|) (|_module.__default.EVEN#canCall| |m#0|))) (and (=> (= (ControlFlow 0 56) 55) anon29_Then_correct) (=> (= (ControlFlow 0 56) 41) anon29_Else_correct)))))
(let ((anon28_Else_correct  (=> (and (not (_module.__default.EVEN |n#0@@7|)) (= (ControlFlow 0 58) 56)) anon6_correct)))
(let ((anon28_Then_correct  (=> (and (and (_module.__default.EVEN |n#0@@7|) ($IsAlloc intType (int_2_U |m#0|) Tclass._System.nat $Heap@0)) (and (|_module.__default.EVEN#canCall| |m#0|) (= (ControlFlow 0 57) 56))) anon6_correct)))
(let ((anon27_Else_correct  (=> (not (and (= |m#0| (LitInt 0)) (= |n#0@@7| (LitInt 0)))) (=> (and ($IsAlloc intType (int_2_U |n#0@@7|) Tclass._System.nat $Heap@0) (|_module.__default.EVEN#canCall| |n#0@@7|)) (and (=> (= (ControlFlow 0 59) 57) anon28_Then_correct) (=> (= (ControlFlow 0 59) 58) anon28_Else_correct))))))
(let ((anon2_correct  (and (=> (= (ControlFlow 0 60) 27) anon27_Then_correct) (=> (= (ControlFlow 0 60) 59) anon27_Else_correct))))
(let ((anon26_Else_correct  (=> (and (or (not (= |m#0| (LitInt 0))) (not true)) (= (ControlFlow 0 62) 60)) anon2_correct)))
(let ((anon26_Then_correct  (=> (and (= |m#0| (LitInt 0)) (= (ControlFlow 0 61) 60)) anon2_correct)))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (=> (and (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (and (= $Heap $Heap@0) (forall ((|$ih#m0#0| Int) (|$ih#n0#0| Int) ) (!  (=> (and (and (and (<= (LitInt 0) |$ih#m0#0|) (<= (LitInt 0) |$ih#n0#0|)) (U_2_bool (Lit boolType (bool_2_U true)))) (or (and (<= 0 |$ih#m0#0|) (< |$ih#m0#0| |m#0|)) (and (= |$ih#m0#0| |m#0|) (and (<= 0 |$ih#n0#0|) (< |$ih#n0#0| |n#0@@7|))))) (= (|Set#Subset| (_module.__default.BitSet |$ih#m0#0|) (_module.__default.BitSet |$ih#n0#0|))  (not (_module.__default.EVEN (_module.__default.binom ($LS $LZ) |$ih#n0#0| |$ih#m0#0|)))))
 :pattern ( (_module.__default.binom ($LS $LZ) |$ih#n0#0| |$ih#m0#0|))
 :pattern ( (_module.__default.BitSet |$ih#n0#0|) (_module.__default.BitSet |$ih#m0#0|))
)))) (and (=> (= (ControlFlow 0 63) 61) anon26_Then_correct) (=> (= (ControlFlow 0 63) 62) anon26_Else_correct))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (=> (and (and (<= (LitInt 0) |m#0|) (<= (LitInt 0) |n#0@@7|)) (and (= 3 $FunctionContextHeight) (= (ControlFlow 0 64) 63))) anon0_correct))))
PreconditionGeneratedEntry_correct))))))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
