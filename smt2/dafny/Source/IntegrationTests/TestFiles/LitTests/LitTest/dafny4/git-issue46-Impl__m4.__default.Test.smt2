(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 (T@T) Int)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 (Bool) T@U)
(declare-fun $generated@@11 (T@U) Bool)
(declare-fun $generated@@12 (Int) T@U)
(declare-fun $generated@@13 (T@U) Int)
(declare-fun $generated@@14 (Real) T@U)
(declare-fun $generated@@15 (T@U) Real)
(declare-fun $generated@@22 (T@U) T@U)
(declare-fun $generated@@23 (T@U) T@U)
(declare-fun $generated@@24 () T@U)
(declare-fun $generated@@25 (T@T T@U T@U) Bool)
(declare-fun $generated@@26 () T@T)
(declare-fun $generated@@27 () T@U)
(declare-fun $generated@@28 (T@U T@U) Bool)
(declare-fun $generated@@31 (T@U) Bool)
(declare-fun $generated@@32 (T@U) Int)
(declare-fun $generated@@33 (T@U) T@U)
(declare-fun $generated@@36 (T@T T@U) T@U)
(declare-fun $generated@@39 (T@U) Bool)
(declare-fun $generated@@42 (T@T T@U) T@U)
(declare-fun $generated@@43 (T@T T@U) T@U)
(declare-fun $generated@@46 (Int T@U) T@U)
(declare-fun $generated@@51 (T@U) Bool)
(declare-fun $generated@@64 (T@U) Int)
(declare-fun $generated@@67 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@68 () T@T)
(declare-fun $generated@@69 () T@T)
(declare-fun $generated@@70 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@71 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@72 () T@T)
(declare-fun $generated@@73 (T@T T@T) T@T)
(declare-fun $generated@@74 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@75 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@76 (T@T) T@T)
(declare-fun $generated@@77 (T@T) T@T)
(declare-fun $generated@@126 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@127 (T@U) Bool)
(declare-fun $generated@@132 (T@U) T@U)
(declare-fun $generated@@133 (T@U T@U) Bool)
(declare-fun $generated@@134 (T@U T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@6 $generated@@7) 0) (= ($generated@@6 $generated@@8) 1)) (= ($generated@@6 $generated@@9) 2)) (forall (($generated@@16 Bool) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Int) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Real) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5)
)
(assert (= ($generated@@22 $generated) $generated@@0))
(assert (= ($generated@@23 $generated@@24) $generated@@3))
(assert (= ($generated@@6 $generated@@26) 3))
(assert ($generated@@25 $generated@@26 $generated@@24 $generated@@27))
(assert (forall (($generated@@29 T@U) ($generated@@30 T@U) ) (! (= ($generated@@28 $generated@@29 $generated@@30) (= $generated@@29 $generated@@30))
 :pattern ( ($generated@@28 $generated@@29 $generated@@30))
)))
(assert (forall (($generated@@34 T@U) ($generated@@35 T@U) ) (!  (=> (and ($generated@@31 $generated@@34) ($generated@@31 $generated@@35)) (= ($generated@@28 $generated@@34 $generated@@35)  (and (= ($generated@@32 $generated@@34) ($generated@@32 $generated@@35)) ($generated@@28 ($generated@@33 $generated@@34) ($generated@@33 $generated@@35)))))
 :pattern ( ($generated@@28 $generated@@34 $generated@@35) ($generated@@31 $generated@@34))
 :pattern ( ($generated@@28 $generated@@34 $generated@@35) ($generated@@31 $generated@@35))
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@T) ) (! (= ($generated@@36 $generated@@38 $generated@@37) $generated@@37)
 :pattern ( ($generated@@36 $generated@@38 $generated@@37))
)))
(assert (forall (($generated@@40 T@U) ) (! (= ($generated@@39 $generated@@40) (= ($generated@@23 $generated@@40) $generated@@3))
 :pattern ( ($generated@@39 $generated@@40))
)))
(assert (forall (($generated@@41 T@U) ) (! (= ($generated@@31 $generated@@41) (= ($generated@@23 $generated@@41) $generated@@4))
 :pattern ( ($generated@@31 $generated@@41))
)))
(assert (forall (($generated@@44 T@U) ($generated@@45 T@T) ) (! (= ($generated@@43 $generated@@45 ($generated@@42 $generated@@45 $generated@@44)) $generated@@44)
 :pattern ( ($generated@@42 $generated@@45 $generated@@44))
)))
(assert (forall (($generated@@47 T@U) ) (!  (=> ($generated@@31 $generated@@47) (exists (($generated@@48 Int) ($generated@@49 T@U) ) (= $generated@@47 ($generated@@46 $generated@@48 $generated@@49))))
 :pattern ( ($generated@@31 $generated@@47))
)))
(assert (forall (($generated@@50 T@U) ) (!  (=> ($generated@@39 $generated@@50) (= $generated@@50 $generated@@24))
 :pattern ( ($generated@@39 $generated@@50))
)))
(assert (forall (($generated@@52 T@U) ) (!  (=> ($generated@@51 $generated@@52) (or ($generated@@39 $generated@@52) ($generated@@31 $generated@@52)))
 :pattern ( ($generated@@51 $generated@@52))
)))
(assert (forall (($generated@@53 T@U) ) (!  (=> ($generated@@25 $generated@@26 $generated@@53 $generated@@27) (or ($generated@@39 $generated@@53) ($generated@@31 $generated@@53)))
 :pattern ( ($generated@@31 $generated@@53) ($generated@@25 $generated@@26 $generated@@53 $generated@@27))
 :pattern ( ($generated@@39 $generated@@53) ($generated@@25 $generated@@26 $generated@@53 $generated@@27))
)))
(assert (forall (($generated@@54 T@U) ($generated@@55 T@U) ) (!  (=> (and ($generated@@39 $generated@@54) ($generated@@39 $generated@@55)) ($generated@@28 $generated@@54 $generated@@55))
 :pattern ( ($generated@@28 $generated@@54 $generated@@55) ($generated@@39 $generated@@54))
 :pattern ( ($generated@@28 $generated@@54 $generated@@55) ($generated@@39 $generated@@55))
)))
(assert (forall (($generated@@56 Int) ($generated@@57 T@U) ) (! (= ($generated@@23 ($generated@@46 $generated@@56 $generated@@57)) $generated@@4)
 :pattern ( ($generated@@46 $generated@@56 $generated@@57))
)))
(assert (forall (($generated@@58 Int) ($generated@@59 T@U) ) (! (= ($generated@@32 ($generated@@46 $generated@@58 $generated@@59)) $generated@@58)
 :pattern ( ($generated@@46 $generated@@58 $generated@@59))
)))
(assert (forall (($generated@@60 Int) ($generated@@61 T@U) ) (! (= ($generated@@33 ($generated@@46 $generated@@60 $generated@@61)) $generated@@61)
 :pattern ( ($generated@@46 $generated@@60 $generated@@61))
)))
(assert (forall (($generated@@62 T@U) ($generated@@63 T@T) ) (! (= ($generated@@42 $generated@@63 ($generated@@43 $generated@@63 $generated@@62)) $generated@@62)
 :pattern ( ($generated@@43 $generated@@63 $generated@@62))
)))
(assert (forall (($generated@@65 Int) ($generated@@66 T@U) ) (! (< ($generated@@64 $generated@@66) ($generated@@64 ($generated@@46 $generated@@65 $generated@@66)))
 :pattern ( ($generated@@46 $generated@@65 $generated@@66))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@78 T@T) ($generated@@79 T@T) ($generated@@80 T@T) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ) (! (= ($generated@@67 $generated@@78 $generated@@79 $generated@@80 ($generated@@74 $generated@@78 $generated@@79 $generated@@80 $generated@@82 $generated@@83 $generated@@84 $generated@@81) $generated@@83 $generated@@84) $generated@@81)
 :weight 0
)) (and (forall (($generated@@85 T@T) ($generated@@86 T@T) ($generated@@87 T@T) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ) (!  (or (= $generated@@90 $generated@@92) (= ($generated@@67 $generated@@85 $generated@@86 $generated@@87 ($generated@@74 $generated@@85 $generated@@86 $generated@@87 $generated@@89 $generated@@90 $generated@@91 $generated@@88) $generated@@92 $generated@@93) ($generated@@67 $generated@@85 $generated@@86 $generated@@87 $generated@@89 $generated@@92 $generated@@93)))
 :weight 0
)) (forall (($generated@@94 T@T) ($generated@@95 T@T) ($generated@@96 T@T) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@100 $generated@@102) (= ($generated@@67 $generated@@94 $generated@@95 $generated@@96 ($generated@@74 $generated@@94 $generated@@95 $generated@@96 $generated@@98 $generated@@99 $generated@@100 $generated@@97) $generated@@101 $generated@@102) ($generated@@67 $generated@@94 $generated@@95 $generated@@96 $generated@@98 $generated@@101 $generated@@102)))
 :weight 0
)))) (= ($generated@@6 $generated@@68) 4)) (= ($generated@@6 $generated@@69) 5)) (forall (($generated@@103 T@T) ($generated@@104 T@T) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ) (! (= ($generated@@71 $generated@@103 $generated@@104 ($generated@@75 $generated@@103 $generated@@104 $generated@@106 $generated@@107 $generated@@105) $generated@@107) $generated@@105)
 :weight 0
))) (forall (($generated@@108 T@T) ($generated@@109 T@T) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ) (!  (or (= $generated@@112 $generated@@113) (= ($generated@@71 $generated@@108 $generated@@109 ($generated@@75 $generated@@108 $generated@@109 $generated@@111 $generated@@112 $generated@@110) $generated@@113) ($generated@@71 $generated@@108 $generated@@109 $generated@@111 $generated@@113)))
 :weight 0
))) (= ($generated@@6 $generated@@72) 6)) (forall (($generated@@114 T@T) ($generated@@115 T@T) ) (= ($generated@@6 ($generated@@73 $generated@@114 $generated@@115)) 7))) (forall (($generated@@116 T@T) ($generated@@117 T@T) ) (! (= ($generated@@76 ($generated@@73 $generated@@116 $generated@@117)) $generated@@116)
 :pattern ( ($generated@@73 $generated@@116 $generated@@117))
))) (forall (($generated@@118 T@T) ($generated@@119 T@T) ) (! (= ($generated@@77 ($generated@@73 $generated@@118 $generated@@119)) $generated@@119)
 :pattern ( ($generated@@73 $generated@@118 $generated@@119))
))))
(assert (forall (($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 Bool) ($generated@@124 T@U) ($generated@@125 T@U) ) (! (= ($generated@@11 ($generated@@67 $generated@@68 $generated@@69 $generated@@7 ($generated@@70 $generated@@120 $generated@@121 $generated@@122 $generated@@123) $generated@@124 $generated@@125))  (=> (and (or (not (= $generated@@124 $generated@@120)) (not true)) ($generated@@11 ($generated@@42 $generated@@7 ($generated@@71 $generated@@69 $generated@@72 ($generated@@71 $generated@@68 ($generated@@73 $generated@@69 $generated@@72) $generated@@121 $generated@@124) $generated@@122)))) $generated@@123))
 :pattern ( ($generated@@67 $generated@@68 $generated@@69 $generated@@7 ($generated@@70 $generated@@120 $generated@@121 $generated@@122 $generated@@123) $generated@@124 $generated@@125))
)))
(assert (forall (($generated@@128 T@U) ($generated@@129 T@U) ) (!  (=> (and ($generated@@127 $generated@@129) (and ($generated@@31 $generated@@128) ($generated@@126 $generated@@26 $generated@@128 $generated@@27 $generated@@129))) ($generated@@126 $generated@@8 ($generated@@12 ($generated@@32 $generated@@128)) $generated $generated@@129))
 :pattern ( ($generated@@126 $generated@@8 ($generated@@12 ($generated@@32 $generated@@128)) $generated $generated@@129))
)))
(assert (forall (($generated@@130 T@U) ($generated@@131 T@U) ) (!  (=> (and ($generated@@127 $generated@@131) ($generated@@25 $generated@@26 $generated@@130 $generated@@27)) ($generated@@126 $generated@@26 $generated@@130 $generated@@27 $generated@@131))
 :pattern ( ($generated@@126 $generated@@26 $generated@@130 $generated@@27 $generated@@131))
)))
(assert (= ($generated@@22 $generated@@27) $generated@@2))
(assert (= ($generated@@132 $generated@@27) $generated@@5))
(assert (= $generated@@24 ($generated@@36 $generated@@26 $generated@@24)))
(assert (forall (($generated@@135 T@U) ($generated@@136 T@U) ) (!  (=> (or ($generated@@134 ($generated@@36 $generated@@26 $generated@@135) ($generated@@36 $generated@@26 $generated@@136)) (and ($generated@@25 $generated@@26 $generated@@135 $generated@@27) ($generated@@25 $generated@@26 $generated@@136 $generated@@27))) (and (=> ($generated@@11 ($generated@@36 $generated@@7 ($generated@@10 ($generated@@31 ($generated@@36 $generated@@26 $generated@@135))))) (and ($generated@@51 ($generated@@36 $generated@@26 ($generated@@33 ($generated@@36 $generated@@26 $generated@@135)))) ($generated@@51 ($generated@@36 $generated@@26 $generated@@136)))) (= ($generated@@133 ($generated@@36 $generated@@26 $generated@@135) ($generated@@36 $generated@@26 $generated@@136))  (and ($generated@@31 ($generated@@36 $generated@@26 $generated@@135)) ($generated@@28 ($generated@@33 ($generated@@36 $generated@@26 $generated@@135)) $generated@@136)))))
 :weight 3
 :pattern ( ($generated@@133 ($generated@@36 $generated@@26 $generated@@135) ($generated@@36 $generated@@26 $generated@@136)))
)))
(assert (forall (($generated@@137 T@U) ($generated@@138 T@U) ) (!  (=> (and ($generated@@127 $generated@@138) (and ($generated@@31 $generated@@137) ($generated@@126 $generated@@26 $generated@@137 $generated@@27 $generated@@138))) ($generated@@126 $generated@@26 ($generated@@33 $generated@@137) $generated@@27 $generated@@138))
 :pattern ( ($generated@@126 $generated@@26 ($generated@@33 $generated@@137) $generated@@27 $generated@@138))
)))
(assert (forall (($generated@@139 T@U) ($generated@@140 T@T) ) (! (= ($generated@@43 $generated@@140 ($generated@@36 $generated@@140 $generated@@139)) ($generated@@36 $generated@@72 ($generated@@43 $generated@@140 $generated@@139)))
 :pattern ( ($generated@@43 $generated@@140 ($generated@@36 $generated@@140 $generated@@139)))
)))
(assert (forall (($generated@@141 T@U) ($generated@@142 T@U) ) (!  (=> (or ($generated@@134 $generated@@141 $generated@@142) (and ($generated@@25 $generated@@26 $generated@@141 $generated@@27) ($generated@@25 $generated@@26 $generated@@142 $generated@@27))) (and (=> ($generated@@31 $generated@@141) (and ($generated@@51 ($generated@@33 $generated@@141)) ($generated@@51 $generated@@142))) (= ($generated@@133 $generated@@141 $generated@@142)  (and ($generated@@31 $generated@@141) ($generated@@28 ($generated@@33 $generated@@141) $generated@@142)))))
 :pattern ( ($generated@@133 $generated@@141 $generated@@142))
)))
(assert (forall (($generated@@143 Int) ($generated@@144 T@U) ) (! (= ($generated@@25 $generated@@26 ($generated@@46 $generated@@143 $generated@@144) $generated@@27)  (and ($generated@@25 $generated@@8 ($generated@@12 $generated@@143) $generated) ($generated@@25 $generated@@26 $generated@@144 $generated@@27)))
 :pattern ( ($generated@@25 $generated@@26 ($generated@@46 $generated@@143 $generated@@144) $generated@@27))
)))
(assert (forall (($generated@@145 T@U) ($generated@@146 T@U) ) (! ($generated@@126 $generated@@8 $generated@@146 $generated $generated@@145)
 :pattern ( ($generated@@126 $generated@@8 $generated@@146 $generated $generated@@145))
)))
(assert (forall (($generated@@147 T@U) ) (! ($generated@@25 $generated@@8 $generated@@147 $generated)
 :pattern ( ($generated@@25 $generated@@8 $generated@@147 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@148 () T@U)
(declare-fun $generated@@149 () T@U)
(declare-fun $generated@@150 () T@U)
(declare-fun $generated@@151 () T@U)
(declare-fun $generated@@152 () T@U)
(declare-fun $generated@@153 (T@U) Bool)
(declare-fun $generated@@154 () T@U)
(declare-fun $generated@@155 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 4) (let (($generated@@156  (=> (= $generated@@148 ($generated@@70 $generated@@149 $generated@@150 $generated@@1 false)) (=> (and ($generated@@31 $generated@@151) (= $generated@@152 ($generated@@33 $generated@@151))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (=> false (=> ($generated@@134 $generated@@151 $generated@@152) (or ($generated@@133 $generated@@151 $generated@@152) ($generated@@31 $generated@@151))))) (=> (=> false (=> ($generated@@134 $generated@@151 $generated@@152) (or ($generated@@133 $generated@@151 $generated@@152) ($generated@@31 $generated@@151)))) (=> (= (ControlFlow 0 2) (- 0 1)) (=> false (=> ($generated@@134 $generated@@151 $generated@@152) (or ($generated@@133 $generated@@151 $generated@@152) ($generated@@28 ($generated@@33 $generated@@151) $generated@@152)))))))))))
(let (($generated@@157  (=> (and ($generated@@127 $generated@@150) ($generated@@153 $generated@@150)) (=> (and (and ($generated@@25 $generated@@26 $generated@@151 $generated@@27) ($generated@@126 $generated@@26 $generated@@151 $generated@@27 $generated@@150)) ($generated@@51 $generated@@151)) (=> (and (and (and ($generated@@25 $generated@@26 $generated@@154 $generated@@27) ($generated@@126 $generated@@26 $generated@@154 $generated@@27 $generated@@150)) (= 0 $generated@@155)) (and ($generated@@31 $generated@@151) (= (ControlFlow 0 4) 2))) $generated@@156)))))
$generated@@157)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
