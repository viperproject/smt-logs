(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagSeq () T@U)
(declare-fun alloc () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun |Seq#Empty| () T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.trim (T@U T@U) T@U)
(declare-fun $LS (T@U) T@U)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun SeqType () T@T)
(declare-fun |_module.__default.trim#canCall| (T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun TSeq (T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun LitInt (Int) Int)
(declare-fun |Seq#Take| (T@U Int) T@U)
(declare-fun |Seq#Drop| (T@U Int) T@U)
(declare-fun _module.__default.eval (T@U T@U Int) Int)
(declare-fun |_module.__default.eval#canCall| (T@U Int) Bool)
(declare-fun Mul (Int Int) Int)
(declare-fun |Seq#Equal| (T@U T@U) Bool)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun _module.__default.IsSkewNumber (T@U Int Int) Bool)
(declare-fun |_module.__default.IsSkewNumber#canCall| (T@U Int Int) Bool)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt TagSeq alloc)
)
(assert (= (Tag TInt) TagInt))
(assert (= (|Seq#Length| |Seq#Empty|) 0))
(assert (= (Ctor SeqType) 3))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($ly T@U) (|digits#0| T@U) ) (!  (=> (or (|_module.__default.trim#canCall| (Lit SeqType |digits#0|)) (and (< 0 $FunctionContextHeight) ($Is SeqType |digits#0| (TSeq TInt)))) (and (=> (and (or (not (= (|Seq#Length| (Lit SeqType |digits#0|)) 0)) (not true)) (= (U_2_int ($Unbox intType (|Seq#Index| (Lit SeqType |digits#0|) (- (|Seq#Length| (Lit SeqType |digits#0|)) 1)))) (LitInt 0))) (|_module.__default.trim#canCall| (|Seq#Take| (Lit SeqType |digits#0|) (- (|Seq#Length| (Lit SeqType |digits#0|)) 1)))) (= (_module.__default.trim ($LS $ly) (Lit SeqType |digits#0|)) (ite  (and (or (not (= (|Seq#Length| (Lit SeqType |digits#0|)) 0)) (not true)) (= (U_2_int ($Unbox intType (|Seq#Index| (Lit SeqType |digits#0|) (- (|Seq#Length| (Lit SeqType |digits#0|)) 1)))) (LitInt 0))) (_module.__default.trim ($LS $ly) (|Seq#Take| (Lit SeqType |digits#0|) (- (|Seq#Length| (Lit SeqType |digits#0|)) 1))) |digits#0|))))
 :weight 3
 :pattern ( (_module.__default.trim ($LS $ly) (Lit SeqType |digits#0|)))
))))
(assert (forall ((s T@U) (n Int) ) (!  (=> (= n 0) (= (|Seq#Drop| s n) s))
 :pattern ( (|Seq#Drop| s n))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($ly@@0 T@U) (|digits#0@@0| T@U) (|base#0| Int) ) (!  (=> (or (|_module.__default.eval#canCall| (Lit SeqType |digits#0@@0|) (LitInt |base#0|)) (and (< 0 $FunctionContextHeight) (and ($Is SeqType |digits#0@@0| (TSeq TInt)) (<= (LitInt 2) (LitInt |base#0|))))) (and (=> (or (not (= (|Seq#Length| (Lit SeqType |digits#0@@0|)) (LitInt 0))) (not true)) (|_module.__default.eval#canCall| (Lit SeqType (|Seq#Drop| (Lit SeqType |digits#0@@0|) (LitInt 1))) (LitInt |base#0|))) (= (_module.__default.eval ($LS $ly@@0) (Lit SeqType |digits#0@@0|) (LitInt |base#0|)) (ite (= (|Seq#Length| (Lit SeqType |digits#0@@0|)) (LitInt 0)) 0 (+ (U_2_int ($Unbox intType (|Seq#Index| (Lit SeqType |digits#0@@0|) (LitInt 0)))) (Mul (LitInt |base#0|) (LitInt (_module.__default.eval ($LS $ly@@0) (Lit SeqType (|Seq#Drop| (Lit SeqType |digits#0@@0|) (LitInt 1))) (LitInt |base#0|)))))))))
 :weight 3
 :pattern ( (_module.__default.eval ($LS $ly@@0) (Lit SeqType |digits#0@@0|) (LitInt |base#0|)))
))))
(assert (forall ((s@@0 T@U) (n@@0 Int) (j Int) ) (!  (=> (and (and (<= 0 j) (< j n@@0)) (< j (|Seq#Length| s@@0))) (= (|Seq#Index| (|Seq#Take| s@@0 n@@0) j) (|Seq#Index| s@@0 j)))
 :weight 25
 :pattern ( (|Seq#Index| (|Seq#Take| s@@0 n@@0) j))
 :pattern ( (|Seq#Index| s@@0 j) (|Seq#Take| s@@0 n@@0))
)))
(assert (forall ((s@@1 T@U) (n@@1 Int) ) (!  (=> (and (<= 0 n@@1) (<= n@@1 (|Seq#Length| s@@1))) (= (|Seq#Length| (|Seq#Drop| s@@1 n@@1)) (- (|Seq#Length| s@@1) n@@1)))
 :pattern ( (|Seq#Length| (|Seq#Drop| s@@1 n@@1)))
)))
(assert (forall ((s0 T@U) (s1 T@U) ) (! (= (|Seq#Equal| s0 s1)  (and (= (|Seq#Length| s0) (|Seq#Length| s1)) (forall ((j@@0 Int) ) (!  (=> (and (<= 0 j@@0) (< j@@0 (|Seq#Length| s0))) (= (|Seq#Index| s0 j@@0) (|Seq#Index| s1 j@@0)))
 :pattern ( (|Seq#Index| s0 j@@0))
 :pattern ( (|Seq#Index| s1 j@@0))
))))
 :pattern ( (|Seq#Equal| s0 s1))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((v T@U) (t T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v) t h) ($IsAlloc T@@1 v t h))
 :pattern ( ($IsAllocBox ($Box T@@1 v) t h))
)))
(assert (forall ((s@@2 T@U) (n@@2 Int) (j@@1 Int) ) (!  (=> (and (and (<= 0 n@@2) (<= 0 j@@1)) (< j@@1 (- (|Seq#Length| s@@2) n@@2))) (= (|Seq#Index| (|Seq#Drop| s@@2 n@@2) j@@1) (|Seq#Index| s@@2 (+ j@@1 n@@2))))
 :weight 25
 :pattern ( (|Seq#Index| (|Seq#Drop| s@@2 n@@2) j@@1))
)))
(assert (forall (($ly@@1 T@U) (|digits#0@@1| T@U) (|base#0@@0| Int) ) (! (= (_module.__default.eval ($LS $ly@@1) |digits#0@@1| |base#0@@0|) (_module.__default.eval $ly@@1 |digits#0@@1| |base#0@@0|))
 :pattern ( (_module.__default.eval ($LS $ly@@1) |digits#0@@1| |base#0@@0|))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($ly@@2 T@U) (|digits#0@@2| T@U) ) (!  (=> (or (|_module.__default.trim#canCall| |digits#0@@2|) (and (< 0 $FunctionContextHeight) ($Is SeqType |digits#0@@2| (TSeq TInt)))) (and (=> (and (or (not (= (|Seq#Length| |digits#0@@2|) 0)) (not true)) (= (U_2_int ($Unbox intType (|Seq#Index| |digits#0@@2| (- (|Seq#Length| |digits#0@@2|) 1)))) (LitInt 0))) (|_module.__default.trim#canCall| (|Seq#Take| |digits#0@@2| (- (|Seq#Length| |digits#0@@2|) 1)))) (= (_module.__default.trim ($LS $ly@@2) |digits#0@@2|) (ite  (and (or (not (= (|Seq#Length| |digits#0@@2|) 0)) (not true)) (= (U_2_int ($Unbox intType (|Seq#Index| |digits#0@@2| (- (|Seq#Length| |digits#0@@2|) 1)))) (LitInt 0))) (_module.__default.trim $ly@@2 (|Seq#Take| |digits#0@@2| (- (|Seq#Length| |digits#0@@2|) 1))) |digits#0@@2|))))
 :pattern ( (_module.__default.trim ($LS $ly@@2) |digits#0@@2|))
))))
(assert (forall ((a T@U) (b T@U) ) (!  (=> (|Seq#Equal| a b) (= a b))
 :pattern ( (|Seq#Equal| a b))
)))
(assert (forall ((s@@3 T@U) (n@@3 Int) ) (!  (=> (and (<= 0 n@@3) (<= n@@3 (|Seq#Length| s@@3))) (= (|Seq#Length| (|Seq#Take| s@@3 n@@3)) n@@3))
 :pattern ( (|Seq#Length| (|Seq#Take| s@@3 n@@3)))
)))
(assert (forall ((bx T@U) ) (!  (=> ($IsBox bx TInt) (and (= ($Box intType ($Unbox intType bx)) bx) ($Is intType ($Unbox intType bx) TInt)))
 :pattern ( ($IsBox bx TInt))
)))
(assert (forall ((v@@0 T@U) (t@@0 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@0) t@@0) ($Is T@@2 v@@0 t@@0))
 :pattern ( ($IsBox ($Box T@@2 v@@0) t@@0))
)))
(assert (forall ((s@@4 T@U) ) (! (<= 0 (|Seq#Length| s@@4))
 :pattern ( (|Seq#Length| s@@4))
)))
(assert (forall ((v@@1 T@U) (t0 T@U) (h@@0 T@U) ) (! (= ($IsAlloc SeqType v@@1 (TSeq t0) h@@0) (forall ((i Int) ) (!  (=> (and (<= 0 i) (< i (|Seq#Length| v@@1))) ($IsAllocBox (|Seq#Index| v@@1 i) t0 h@@0))
 :pattern ( (|Seq#Index| v@@1 i))
)))
 :pattern ( ($IsAlloc SeqType v@@1 (TSeq t0) h@@0))
)))
(assert (forall ((t@@1 T@U) ) (! (= (Inv0_TSeq (TSeq t@@1)) t@@1)
 :pattern ( (TSeq t@@1))
)))
(assert (forall ((t@@2 T@U) ) (! (= (Tag (TSeq t@@2)) TagSeq)
 :pattern ( (TSeq t@@2))
)))
(assert (forall ((x@@5 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@5)) x@@5)
 :pattern ( ($Box T@@3 x@@5))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($ly@@3 T@U) (|digits#0@@3| T@U) (|base#0@@1| Int) ) (!  (=> (or (|_module.__default.eval#canCall| |digits#0@@3| |base#0@@1|) (and (< 0 $FunctionContextHeight) (and ($Is SeqType |digits#0@@3| (TSeq TInt)) (<= (LitInt 2) |base#0@@1|)))) (and (=> (or (not (= (|Seq#Length| |digits#0@@3|) (LitInt 0))) (not true)) (|_module.__default.eval#canCall| (|Seq#Drop| |digits#0@@3| (LitInt 1)) |base#0@@1|)) (= (_module.__default.eval ($LS $ly@@3) |digits#0@@3| |base#0@@1|) (ite (= (|Seq#Length| |digits#0@@3|) (LitInt 0)) 0 (+ (U_2_int ($Unbox intType (|Seq#Index| |digits#0@@3| (LitInt 0)))) (Mul |base#0@@1| (_module.__default.eval $ly@@3 (|Seq#Drop| |digits#0@@3| (LitInt 1)) |base#0@@1|)))))))
 :pattern ( (_module.__default.eval ($LS $ly@@3) |digits#0@@3| |base#0@@1|))
))))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($ly@@4 T@U) (|digits#0@@4| T@U) (|base#0@@2| Int) ) (!  (=> (or (|_module.__default.eval#canCall| (Lit SeqType |digits#0@@4|) |base#0@@2|) (and (< 0 $FunctionContextHeight) (and ($Is SeqType |digits#0@@4| (TSeq TInt)) (<= (LitInt 2) |base#0@@2|)))) (and (=> (or (not (= (|Seq#Length| (Lit SeqType |digits#0@@4|)) (LitInt 0))) (not true)) (|_module.__default.eval#canCall| (Lit SeqType (|Seq#Drop| (Lit SeqType |digits#0@@4|) (LitInt 1))) |base#0@@2|)) (= (_module.__default.eval ($LS $ly@@4) (Lit SeqType |digits#0@@4|) |base#0@@2|) (ite (= (|Seq#Length| (Lit SeqType |digits#0@@4|)) (LitInt 0)) 0 (+ (U_2_int ($Unbox intType (|Seq#Index| (Lit SeqType |digits#0@@4|) (LitInt 0)))) (Mul |base#0@@2| (_module.__default.eval ($LS $ly@@4) (Lit SeqType (|Seq#Drop| (Lit SeqType |digits#0@@4|) (LitInt 1))) |base#0@@2|)))))))
 :weight 3
 :pattern ( (_module.__default.eval ($LS $ly@@4) (Lit SeqType |digits#0@@4|) |base#0@@2|))
))))
(assert (forall (($ly@@5 T@U) (|digits#0@@5| T@U) ) (! (= (_module.__default.trim ($LS $ly@@5) |digits#0@@5|) (_module.__default.trim $ly@@5 |digits#0@@5|))
 :pattern ( (_module.__default.trim ($LS $ly@@5) |digits#0@@5|))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall ((t0@@0 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0@@0 t1 t2 (MapType0Store t0@@0 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 4)) (= (Ctor FieldType) 5)) (forall ((t0@@1 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@1 t1@@0 (MapType1Store t0@@1 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :weight 0
))) (= (Ctor BoxType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|digits#0@@6| T@U) (|lowDigit#0| Int) (|base#0@@3| Int) ) (!  (=> (or (|_module.__default.IsSkewNumber#canCall| |digits#0@@6| |lowDigit#0| |base#0@@3|) (and (< 0 $FunctionContextHeight) ($Is SeqType |digits#0@@6| (TSeq TInt)))) (= (_module.__default.IsSkewNumber |digits#0@@6| |lowDigit#0| |base#0@@3|)  (and (and (<= (LitInt 2) |base#0@@3|) (and (<= |lowDigit#0| (LitInt 0)) (< 0 (+ |lowDigit#0| |base#0@@3|)))) (forall ((|i#0| Int) ) (!  (and (=> (and (<= (LitInt 0) |i#0|) (< |i#0| (|Seq#Length| |digits#0@@6|))) (<= |lowDigit#0| (U_2_int ($Unbox intType (|Seq#Index| |digits#0@@6| |i#0|))))) (=> (and (<= (LitInt 0) |i#0|) (< |i#0| (|Seq#Length| |digits#0@@6|))) (< (U_2_int ($Unbox intType (|Seq#Index| |digits#0@@6| |i#0|))) (+ |lowDigit#0| |base#0@@3|))))
 :pattern ( ($Unbox intType (|Seq#Index| |digits#0@@6| |i#0|)))
)))))
 :pattern ( (_module.__default.IsSkewNumber |digits#0@@6| |lowDigit#0| |base#0@@3|))
))))
(assert (forall ((x@@6 Int) (y Int) ) (! (= (Mul x@@6 y) (* x@@6 y))
 :pattern ( (Mul x@@6 y))
)))
(assert (forall ((bx@@0 T@U) (t@@3 T@U) ) (!  (=> ($IsBox bx@@0 (TSeq t@@3)) (and (= ($Box SeqType ($Unbox SeqType bx@@0)) bx@@0) ($Is SeqType ($Unbox SeqType bx@@0) (TSeq t@@3))))
 :pattern ( ($IsBox bx@@0 (TSeq t@@3)))
)))
(assert (forall ((s@@5 T@U) (n@@4 Int) (k Int) ) (!  (=> (and (and (<= 0 n@@4) (<= n@@4 k)) (< k (|Seq#Length| s@@5))) (= (|Seq#Index| (|Seq#Drop| s@@5 n@@4) (- k n@@4)) (|Seq#Index| s@@5 k)))
 :weight 25
 :pattern ( (|Seq#Index| s@@5 k) (|Seq#Drop| s@@5 n@@4))
)))
(assert (forall ((s@@6 T@U) (m@@4 Int) (n@@5 Int) ) (!  (=> (and (and (<= 0 m@@4) (<= 0 n@@5)) (<= (+ m@@4 n@@5) (|Seq#Length| s@@6))) (= (|Seq#Drop| (|Seq#Drop| s@@6 m@@4) n@@5) (|Seq#Drop| s@@6 (+ m@@4 n@@5))))
 :pattern ( (|Seq#Drop| (|Seq#Drop| s@@6 m@@4) n@@5))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|digits#0@@7| T@U) (|lowDigit#0@@0| Int) (|base#0@@4| Int) ) (!  (=> (or (|_module.__default.IsSkewNumber#canCall| (Lit SeqType |digits#0@@7|) (LitInt |lowDigit#0@@0|) (LitInt |base#0@@4|)) (and (< 0 $FunctionContextHeight) ($Is SeqType |digits#0@@7| (TSeq TInt)))) (= (_module.__default.IsSkewNumber (Lit SeqType |digits#0@@7|) (LitInt |lowDigit#0@@0|) (LitInt |base#0@@4|))  (and (and (<= (LitInt 2) (LitInt |base#0@@4|)) (and (<= (LitInt |lowDigit#0@@0|) (LitInt 0)) (< 0 (+ |lowDigit#0@@0| |base#0@@4|)))) (forall ((|i#1| Int) ) (!  (and (=> (and (<= (LitInt 0) |i#1|) (< |i#1| (|Seq#Length| (Lit SeqType |digits#0@@7|)))) (<= (LitInt |lowDigit#0@@0|) (U_2_int ($Unbox intType (|Seq#Index| (Lit SeqType |digits#0@@7|) |i#1|))))) (=> (and (<= (LitInt 0) |i#1|) (< |i#1| (|Seq#Length| (Lit SeqType |digits#0@@7|)))) (< (U_2_int ($Unbox intType (|Seq#Index| (Lit SeqType |digits#0@@7|) |i#1|))) (+ |lowDigit#0@@0| |base#0@@4|))))
 :pattern ( ($Unbox intType (|Seq#Index| |digits#0@@7| |i#1|)))
)))))
 :weight 3
 :pattern ( (_module.__default.IsSkewNumber (Lit SeqType |digits#0@@7|) (LitInt |lowDigit#0@@0|) (LitInt |base#0@@4|)))
))))
(assert (forall ((x@@7 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@7))) (Lit BoxType ($Box intType (int_2_U x@@7))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@7))))
)))
(assert (forall ((x@@8 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@8)) (Lit BoxType ($Box T@@4 x@@8)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@8)))
)))
(assert (forall ((s@@7 T@U) ) (!  (=> (= (|Seq#Length| s@@7) 0) (= s@@7 |Seq#Empty|))
 :pattern ( (|Seq#Length| s@@7))
)))
(assert (forall ((s@@8 T@U) (n@@6 Int) ) (!  (=> (= n@@6 0) (= (|Seq#Take| s@@8 n@@6) |Seq#Empty|))
 :pattern ( (|Seq#Take| s@@8 n@@6))
)))
(assert (forall ((h@@1 T@U) (v@@2 T@U) ) (! ($IsAlloc intType v@@2 TInt h@@1)
 :pattern ( ($IsAlloc intType v@@2 TInt h@@1))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($ly@@6 T@U) (|digits#0@@8| T@U) ) (!  (=> (or (|_module.__default.trim#canCall| |digits#0@@8|) (and (< 0 $FunctionContextHeight) ($Is SeqType |digits#0@@8| (TSeq TInt)))) ($Is SeqType (_module.__default.trim $ly@@6 |digits#0@@8|) (TSeq TInt)))
 :pattern ( (_module.__default.trim $ly@@6 |digits#0@@8|))
))))
(assert (forall ((v@@3 T@U) (t0@@2 T@U) ) (! (= ($Is SeqType v@@3 (TSeq t0@@2)) (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| v@@3))) ($IsBox (|Seq#Index| v@@3 i@@0) t0@@2))
 :pattern ( (|Seq#Index| v@@3 i@@0))
)))
 :pattern ( ($Is SeqType v@@3 (TSeq t0@@2)))
)))
(assert (forall ((v@@4 T@U) ) (! ($Is intType v@@4 TInt)
 :pattern ( ($Is intType v@@4 TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $Heap () T@U)
(declare-fun |a#0| () T@U)
(declare-fun |lowDigit#0@@1| () Int)
(declare-fun |base#0@@5| () Int)
(declare-fun |b#0| () T@U)
(declare-fun $LZ () T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsHeapAnchor (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 4) (let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (=> (and ($IsAlloc SeqType |a#0| (TSeq TInt) $Heap) ($IsAlloc intType (int_2_U |lowDigit#0@@1|) TInt $Heap)) (=> (and (and (and (and ($IsAlloc intType (int_2_U |base#0@@5|) TInt $Heap) (|_module.__default.IsSkewNumber#canCall| |a#0| |lowDigit#0@@1| |base#0@@5|)) (and (_module.__default.IsSkewNumber |a#0| |lowDigit#0@@1| |base#0@@5|) ($IsAlloc SeqType |b#0| (TSeq TInt) $Heap))) (and (and ($IsAlloc intType (int_2_U |lowDigit#0@@1|) TInt $Heap) ($IsAlloc intType (int_2_U |base#0@@5|) TInt $Heap)) (and (|_module.__default.IsSkewNumber#canCall| |b#0| |lowDigit#0@@1| |base#0@@5|) (_module.__default.IsSkewNumber |b#0| |lowDigit#0@@1| |base#0@@5|)))) (and (and (and ($IsAlloc SeqType |a#0| (TSeq TInt) $Heap) (|_module.__default.trim#canCall| |a#0|)) (and (|Seq#Equal| |a#0| (_module.__default.trim ($LS $LZ) |a#0|)) ($IsAlloc SeqType |b#0| (TSeq TInt) $Heap))) (and (and (|_module.__default.trim#canCall| |b#0|) (|Seq#Equal| |b#0| (_module.__default.trim ($LS $LZ) |b#0|))) (and ($IsAlloc SeqType |a#0| (TSeq TInt) $Heap) ($IsAlloc intType (int_2_U |base#0@@5|) TInt $Heap))))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (<= (LitInt 2) |base#0@@5|)) (=> (<= (LitInt 2) |base#0@@5|) (=> (and (and (|_module.__default.eval#canCall| |a#0| |base#0@@5|) ($IsAlloc SeqType |b#0| (TSeq TInt) $Heap)) (and ($IsAlloc intType (int_2_U |base#0@@5|) TInt $Heap) (= (ControlFlow 0 2) (- 0 1)))) (<= (LitInt 2) |base#0@@5|)))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (and ($Is SeqType |a#0| (TSeq TInt)) ($IsAlloc SeqType |a#0| (TSeq TInt) $Heap))) (and (and ($Is SeqType |b#0| (TSeq TInt)) ($IsAlloc SeqType |b#0| (TSeq TInt) $Heap)) (and (= 4 $FunctionContextHeight) (= (ControlFlow 0 4) 2)))) anon0_correct)))
PreconditionGeneratedEntry_correct)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
