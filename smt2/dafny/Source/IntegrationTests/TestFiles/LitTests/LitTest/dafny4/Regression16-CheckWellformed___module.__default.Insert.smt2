(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 (T@T) Int)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 (Bool) T@U)
(declare-fun $generated@@11 (T@U) Bool)
(declare-fun $generated@@12 (Int) T@U)
(declare-fun $generated@@13 (T@U) Int)
(declare-fun $generated@@14 (Real) T@U)
(declare-fun $generated@@15 (T@U) Real)
(declare-fun $generated@@22 (T@T T@U T@U) Bool)
(declare-fun $generated@@23 () T@T)
(declare-fun $generated@@24 (Int T@U T@U) T@U)
(declare-fun $generated@@25 () T@U)
(declare-fun $generated@@29 (T@U) T@U)
(declare-fun $generated@@30 (T@U) T@U)
(declare-fun $generated@@34 (T@U) Int)
(declare-fun $generated@@38 (T@U) T@U)
(declare-fun $generated@@42 (T@U) T@U)
(declare-fun $generated@@46 () T@U)
(declare-fun $generated@@47 () Int)
(declare-fun $generated@@48 (T@U T@U Int) T@U)
(declare-fun $generated@@49 (T@U) T@U)
(declare-fun $generated@@50 (T@U Int) Bool)
(declare-fun $generated@@51 (T@U) Bool)
(declare-fun $generated@@52 (T@T T@U) T@U)
(declare-fun $generated@@61 (Int) Int)
(declare-fun $generated@@66 (T@U) Bool)
(declare-fun $generated@@68 (T@T T@U) T@U)
(declare-fun $generated@@69 (T@T T@U) T@U)
(declare-fun $generated@@89 (T@U) Int)
(declare-fun $generated@@104 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@105 () T@T)
(declare-fun $generated@@106 () T@T)
(declare-fun $generated@@107 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@108 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@109 () T@T)
(declare-fun $generated@@110 (T@T T@T) T@T)
(declare-fun $generated@@111 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@112 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@113 (T@T) T@T)
(declare-fun $generated@@114 (T@T) T@T)
(declare-fun $generated@@163 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@164 (T@U) Bool)
(declare-fun $generated@@169 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@6 $generated@@7) 0) (= ($generated@@6 $generated@@8) 1)) (= ($generated@@6 $generated@@9) 2)) (forall (($generated@@16 Bool) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Int) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Real) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5)
)
(assert (= ($generated@@6 $generated@@23) 3))
(assert (forall (($generated@@26 Int) ($generated@@27 T@U) ($generated@@28 T@U) ) (! (= ($generated@@22 $generated@@23 ($generated@@24 $generated@@26 $generated@@27 $generated@@28) $generated@@25)  (and (and ($generated@@22 $generated@@8 ($generated@@12 $generated@@26) $generated) ($generated@@22 $generated@@23 $generated@@27 $generated@@25)) ($generated@@22 $generated@@23 $generated@@28 $generated@@25)))
 :pattern ( ($generated@@22 $generated@@23 ($generated@@24 $generated@@26 $generated@@27 $generated@@28) $generated@@25))
)))
(assert (= ($generated@@29 $generated) $generated@@0))
(assert (forall (($generated@@31 Int) ($generated@@32 T@U) ($generated@@33 T@U) ) (! (= ($generated@@30 ($generated@@24 $generated@@31 $generated@@32 $generated@@33)) $generated@@4)
 :pattern ( ($generated@@24 $generated@@31 $generated@@32 $generated@@33))
)))
(assert (forall (($generated@@35 Int) ($generated@@36 T@U) ($generated@@37 T@U) ) (! (= ($generated@@34 ($generated@@24 $generated@@35 $generated@@36 $generated@@37)) $generated@@35)
 :pattern ( ($generated@@24 $generated@@35 $generated@@36 $generated@@37))
)))
(assert (forall (($generated@@39 Int) ($generated@@40 T@U) ($generated@@41 T@U) ) (! (= ($generated@@38 ($generated@@24 $generated@@39 $generated@@40 $generated@@41)) $generated@@40)
 :pattern ( ($generated@@24 $generated@@39 $generated@@40 $generated@@41))
)))
(assert (forall (($generated@@43 Int) ($generated@@44 T@U) ($generated@@45 T@U) ) (! (= ($generated@@42 ($generated@@24 $generated@@43 $generated@@44 $generated@@45)) $generated@@45)
 :pattern ( ($generated@@24 $generated@@43 $generated@@44 $generated@@45))
)))
(assert (= ($generated@@30 $generated@@46) $generated@@3))
(assert ($generated@@22 $generated@@23 $generated@@46 $generated@@25))
(assert  (=> (<= 1 $generated@@47) (forall (($generated@@53 T@U) ($generated@@54 T@U) ($generated@@55 Int) ) (!  (=> (or ($generated@@50 $generated@@54 $generated@@55) (and (< 1 $generated@@47) ($generated@@22 $generated@@23 $generated@@54 $generated@@25))) (and (=> (not ($generated@@51 $generated@@54)) (let (($generated@@56 ($generated@@42 $generated@@54)))
(let (($generated@@57 ($generated@@34 $generated@@54)))
 (and (=> (< $generated@@55 $generated@@57) ($generated@@50 $generated@@56 $generated@@57)) (=> (<= $generated@@57 $generated@@55) ($generated@@50 $generated@@56 $generated@@55)))))) (= ($generated@@48 ($generated@@49 $generated@@53) $generated@@54 $generated@@55) (ite ($generated@@51 $generated@@54) ($generated@@24 $generated@@55 ($generated@@52 $generated@@23 $generated@@46) ($generated@@52 $generated@@23 $generated@@46)) (let (($generated@@58 ($generated@@42 $generated@@54)))
(let (($generated@@59 ($generated@@38 $generated@@54)))
(let (($generated@@60 ($generated@@34 $generated@@54)))
(ite (< $generated@@55 $generated@@60) ($generated@@24 $generated@@55 ($generated@@48 $generated@@53 $generated@@58 $generated@@60) $generated@@59) ($generated@@24 $generated@@60 ($generated@@48 $generated@@53 $generated@@58 $generated@@55) $generated@@59)))))))))
 :pattern ( ($generated@@48 ($generated@@49 $generated@@53) $generated@@54 $generated@@55))
))))
(assert (forall (($generated@@62 Int) ) (! (= ($generated@@61 $generated@@62) $generated@@62)
 :pattern ( ($generated@@61 $generated@@62))
)))
(assert (forall (($generated@@63 T@U) ($generated@@64 T@T) ) (! (= ($generated@@52 $generated@@64 $generated@@63) $generated@@63)
 :pattern ( ($generated@@52 $generated@@64 $generated@@63))
)))
(assert (forall (($generated@@65 T@U) ) (! (= ($generated@@51 $generated@@65) (= ($generated@@30 $generated@@65) $generated@@3))
 :pattern ( ($generated@@51 $generated@@65))
)))
(assert (forall (($generated@@67 T@U) ) (! (= ($generated@@66 $generated@@67) (= ($generated@@30 $generated@@67) $generated@@4))
 :pattern ( ($generated@@66 $generated@@67))
)))
(assert (forall (($generated@@70 T@U) ($generated@@71 T@T) ) (! (= ($generated@@69 $generated@@71 ($generated@@68 $generated@@71 $generated@@70)) $generated@@70)
 :pattern ( ($generated@@68 $generated@@71 $generated@@70))
)))
(assert (forall (($generated@@72 T@U) ) (!  (=> ($generated@@66 $generated@@72) (exists (($generated@@73 Int) ($generated@@74 T@U) ($generated@@75 T@U) ) (= $generated@@72 ($generated@@24 $generated@@73 $generated@@74 $generated@@75))))
 :pattern ( ($generated@@66 $generated@@72))
)))
(assert (forall (($generated@@76 T@U) ) (!  (=> ($generated@@51 $generated@@76) (= $generated@@76 $generated@@46))
 :pattern ( ($generated@@51 $generated@@76))
)))
(assert  (=> (<= 1 $generated@@47) (forall (($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 Int) ) (!  (=> (or ($generated@@50 $generated@@78 $generated@@79) (and (< 1 $generated@@47) ($generated@@22 $generated@@23 $generated@@78 $generated@@25))) ($generated@@22 $generated@@23 ($generated@@48 $generated@@77 $generated@@78 $generated@@79) $generated@@25))
 :pattern ( ($generated@@48 $generated@@77 $generated@@78 $generated@@79))
))))
(assert (forall (($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 Int) ) (! (= ($generated@@48 ($generated@@49 $generated@@80) $generated@@81 $generated@@82) ($generated@@48 $generated@@80 $generated@@81 $generated@@82))
 :pattern ( ($generated@@48 ($generated@@49 $generated@@80) $generated@@81 $generated@@82))
)))
(assert (forall (($generated@@83 T@U) ) (!  (=> ($generated@@22 $generated@@23 $generated@@83 $generated@@25) (or ($generated@@51 $generated@@83) ($generated@@66 $generated@@83)))
 :pattern ( ($generated@@66 $generated@@83) ($generated@@22 $generated@@23 $generated@@83 $generated@@25))
 :pattern ( ($generated@@51 $generated@@83) ($generated@@22 $generated@@23 $generated@@83 $generated@@25))
)))
(assert (forall (($generated@@84 Int) ($generated@@85 T@U) ($generated@@86 T@U) ) (! (= ($generated@@24 ($generated@@61 $generated@@84) ($generated@@52 $generated@@23 $generated@@85) ($generated@@52 $generated@@23 $generated@@86)) ($generated@@52 $generated@@23 ($generated@@24 $generated@@84 $generated@@85 $generated@@86)))
 :pattern ( ($generated@@24 ($generated@@61 $generated@@84) ($generated@@52 $generated@@23 $generated@@85) ($generated@@52 $generated@@23 $generated@@86)))
)))
(assert (forall (($generated@@87 T@U) ($generated@@88 T@T) ) (! (= ($generated@@68 $generated@@88 ($generated@@69 $generated@@88 $generated@@87)) $generated@@87)
 :pattern ( ($generated@@69 $generated@@88 $generated@@87))
)))
(assert (forall (($generated@@90 Int) ($generated@@91 T@U) ($generated@@92 T@U) ) (! (< ($generated@@89 $generated@@91) ($generated@@89 ($generated@@24 $generated@@90 $generated@@91 $generated@@92)))
 :pattern ( ($generated@@24 $generated@@90 $generated@@91 $generated@@92))
)))
(assert (forall (($generated@@93 Int) ($generated@@94 T@U) ($generated@@95 T@U) ) (! (< ($generated@@89 $generated@@95) ($generated@@89 ($generated@@24 $generated@@93 $generated@@94 $generated@@95)))
 :pattern ( ($generated@@24 $generated@@93 $generated@@94 $generated@@95))
)))
(assert  (=> (<= 1 $generated@@47) (forall (($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 Int) ) (!  (=> (or ($generated@@50 ($generated@@52 $generated@@23 $generated@@97) ($generated@@61 $generated@@98)) (and (< 1 $generated@@47) ($generated@@22 $generated@@23 $generated@@97 $generated@@25))) (and (=> (not ($generated@@11 ($generated@@52 $generated@@7 ($generated@@10 ($generated@@51 ($generated@@52 $generated@@23 $generated@@97)))))) (let (($generated@@99 ($generated@@52 $generated@@23 ($generated@@42 ($generated@@52 $generated@@23 $generated@@97)))))
(let (($generated@@100 ($generated@@61 ($generated@@34 ($generated@@52 $generated@@23 $generated@@97)))))
 (and (=> (< $generated@@98 $generated@@100) ($generated@@50 $generated@@99 $generated@@100)) (=> (<= $generated@@100 $generated@@98) ($generated@@50 $generated@@99 ($generated@@61 $generated@@98))))))) (= ($generated@@48 ($generated@@49 $generated@@96) ($generated@@52 $generated@@23 $generated@@97) ($generated@@61 $generated@@98)) (ite ($generated@@51 ($generated@@52 $generated@@23 $generated@@97)) ($generated@@24 ($generated@@61 $generated@@98) ($generated@@52 $generated@@23 $generated@@46) ($generated@@52 $generated@@23 $generated@@46)) (let (($generated@@101 ($generated@@52 $generated@@23 ($generated@@42 ($generated@@52 $generated@@23 $generated@@97)))))
(let (($generated@@102 ($generated@@52 $generated@@23 ($generated@@38 ($generated@@52 $generated@@23 $generated@@97)))))
(let (($generated@@103 ($generated@@61 ($generated@@34 ($generated@@52 $generated@@23 $generated@@97)))))
(ite (< $generated@@98 $generated@@103) ($generated@@24 ($generated@@61 $generated@@98) ($generated@@52 $generated@@23 ($generated@@48 ($generated@@49 $generated@@96) $generated@@101 $generated@@103)) $generated@@102) ($generated@@24 $generated@@103 ($generated@@52 $generated@@23 ($generated@@48 ($generated@@49 $generated@@96) $generated@@101 ($generated@@61 $generated@@98))) $generated@@102)))))))))
 :weight 3
 :pattern ( ($generated@@48 ($generated@@49 $generated@@96) ($generated@@52 $generated@@23 $generated@@97) ($generated@@61 $generated@@98)))
))))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@115 T@T) ($generated@@116 T@T) ($generated@@117 T@T) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ) (! (= ($generated@@104 $generated@@115 $generated@@116 $generated@@117 ($generated@@111 $generated@@115 $generated@@116 $generated@@117 $generated@@119 $generated@@120 $generated@@121 $generated@@118) $generated@@120 $generated@@121) $generated@@118)
 :weight 0
)) (and (forall (($generated@@122 T@T) ($generated@@123 T@T) ($generated@@124 T@T) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ) (!  (or (= $generated@@127 $generated@@129) (= ($generated@@104 $generated@@122 $generated@@123 $generated@@124 ($generated@@111 $generated@@122 $generated@@123 $generated@@124 $generated@@126 $generated@@127 $generated@@128 $generated@@125) $generated@@129 $generated@@130) ($generated@@104 $generated@@122 $generated@@123 $generated@@124 $generated@@126 $generated@@129 $generated@@130)))
 :weight 0
)) (forall (($generated@@131 T@T) ($generated@@132 T@T) ($generated@@133 T@T) ($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ) (!  (or (= $generated@@137 $generated@@139) (= ($generated@@104 $generated@@131 $generated@@132 $generated@@133 ($generated@@111 $generated@@131 $generated@@132 $generated@@133 $generated@@135 $generated@@136 $generated@@137 $generated@@134) $generated@@138 $generated@@139) ($generated@@104 $generated@@131 $generated@@132 $generated@@133 $generated@@135 $generated@@138 $generated@@139)))
 :weight 0
)))) (= ($generated@@6 $generated@@105) 4)) (= ($generated@@6 $generated@@106) 5)) (forall (($generated@@140 T@T) ($generated@@141 T@T) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ) (! (= ($generated@@108 $generated@@140 $generated@@141 ($generated@@112 $generated@@140 $generated@@141 $generated@@143 $generated@@144 $generated@@142) $generated@@144) $generated@@142)
 :weight 0
))) (forall (($generated@@145 T@T) ($generated@@146 T@T) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 T@U) ) (!  (or (= $generated@@149 $generated@@150) (= ($generated@@108 $generated@@145 $generated@@146 ($generated@@112 $generated@@145 $generated@@146 $generated@@148 $generated@@149 $generated@@147) $generated@@150) ($generated@@108 $generated@@145 $generated@@146 $generated@@148 $generated@@150)))
 :weight 0
))) (= ($generated@@6 $generated@@109) 6)) (forall (($generated@@151 T@T) ($generated@@152 T@T) ) (= ($generated@@6 ($generated@@110 $generated@@151 $generated@@152)) 7))) (forall (($generated@@153 T@T) ($generated@@154 T@T) ) (! (= ($generated@@113 ($generated@@110 $generated@@153 $generated@@154)) $generated@@153)
 :pattern ( ($generated@@110 $generated@@153 $generated@@154))
))) (forall (($generated@@155 T@T) ($generated@@156 T@T) ) (! (= ($generated@@114 ($generated@@110 $generated@@155 $generated@@156)) $generated@@156)
 :pattern ( ($generated@@110 $generated@@155 $generated@@156))
))))
(assert (forall (($generated@@157 T@U) ($generated@@158 T@U) ($generated@@159 T@U) ($generated@@160 Bool) ($generated@@161 T@U) ($generated@@162 T@U) ) (! (= ($generated@@11 ($generated@@104 $generated@@105 $generated@@106 $generated@@7 ($generated@@107 $generated@@157 $generated@@158 $generated@@159 $generated@@160) $generated@@161 $generated@@162))  (=> (and (or (not (= $generated@@161 $generated@@157)) (not true)) ($generated@@11 ($generated@@68 $generated@@7 ($generated@@108 $generated@@106 $generated@@109 ($generated@@108 $generated@@105 ($generated@@110 $generated@@106 $generated@@109) $generated@@158 $generated@@161) $generated@@159)))) $generated@@160))
 :pattern ( ($generated@@104 $generated@@105 $generated@@106 $generated@@7 ($generated@@107 $generated@@157 $generated@@158 $generated@@159 $generated@@160) $generated@@161 $generated@@162))
)))
(assert (forall (($generated@@165 T@U) ($generated@@166 T@U) ) (!  (=> (and ($generated@@164 $generated@@166) (and ($generated@@66 $generated@@165) ($generated@@163 $generated@@23 $generated@@165 $generated@@25 $generated@@166))) ($generated@@163 $generated@@8 ($generated@@12 ($generated@@34 $generated@@165)) $generated $generated@@166))
 :pattern ( ($generated@@163 $generated@@8 ($generated@@12 ($generated@@34 $generated@@165)) $generated $generated@@166))
)))
(assert (forall (($generated@@167 T@U) ($generated@@168 T@U) ) (!  (=> (and ($generated@@164 $generated@@168) ($generated@@22 $generated@@23 $generated@@167 $generated@@25)) ($generated@@163 $generated@@23 $generated@@167 $generated@@25 $generated@@168))
 :pattern ( ($generated@@163 $generated@@23 $generated@@167 $generated@@25 $generated@@168))
)))
(assert (= ($generated@@29 $generated@@25) $generated@@2))
(assert (= ($generated@@169 $generated@@25) $generated@@5))
(assert (= $generated@@46 ($generated@@52 $generated@@23 $generated@@46)))
(assert (forall (($generated@@170 T@U) ($generated@@171 T@U) ) (!  (=> (and ($generated@@164 $generated@@171) (and ($generated@@66 $generated@@170) ($generated@@163 $generated@@23 $generated@@170 $generated@@25 $generated@@171))) ($generated@@163 $generated@@23 ($generated@@38 $generated@@170) $generated@@25 $generated@@171))
 :pattern ( ($generated@@163 $generated@@23 ($generated@@38 $generated@@170) $generated@@25 $generated@@171))
)))
(assert (forall (($generated@@172 T@U) ($generated@@173 T@U) ) (!  (=> (and ($generated@@164 $generated@@173) (and ($generated@@66 $generated@@172) ($generated@@163 $generated@@23 $generated@@172 $generated@@25 $generated@@173))) ($generated@@163 $generated@@23 ($generated@@42 $generated@@172) $generated@@25 $generated@@173))
 :pattern ( ($generated@@163 $generated@@23 ($generated@@42 $generated@@172) $generated@@25 $generated@@173))
)))
(assert (forall (($generated@@174 Int) ) (! (= ($generated@@69 $generated@@8 ($generated@@12 ($generated@@61 $generated@@174))) ($generated@@52 $generated@@109 ($generated@@69 $generated@@8 ($generated@@12 $generated@@174))))
 :pattern ( ($generated@@69 $generated@@8 ($generated@@12 ($generated@@61 $generated@@174))))
)))
(assert (forall (($generated@@175 T@U) ($generated@@176 T@T) ) (! (= ($generated@@69 $generated@@176 ($generated@@52 $generated@@176 $generated@@175)) ($generated@@52 $generated@@109 ($generated@@69 $generated@@176 $generated@@175)))
 :pattern ( ($generated@@69 $generated@@176 ($generated@@52 $generated@@176 $generated@@175)))
)))
(assert (forall (($generated@@177 T@U) ($generated@@178 T@U) ) (! ($generated@@163 $generated@@8 $generated@@178 $generated $generated@@177)
 :pattern ( ($generated@@163 $generated@@8 $generated@@178 $generated $generated@@177))
)))
(assert (forall (($generated@@179 T@U) ) (! ($generated@@22 $generated@@8 $generated@@179 $generated)
 :pattern ( ($generated@@22 $generated@@8 $generated@@179 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@180 () Int)
(declare-fun $generated@@181 () Int)
(declare-fun $generated@@182 () T@U)
(declare-fun $generated@@183 () T@U)
(declare-fun $generated@@184 () T@U)
(declare-fun $generated@@185 () Int)
(declare-fun $generated@@186 () T@U)
(declare-fun $generated@@187 () T@U)
(declare-fun $generated@@188 () T@U)
(declare-fun $generated@@189 () T@U)
(declare-fun $generated@@190 () T@U)
(declare-fun $generated@@191 () Int)
(declare-fun $generated@@192 () T@U)
(declare-fun $generated@@193 () T@U)
(declare-fun $generated@@194 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 13) (let (($generated@@195  (=> (<= $generated@@180 $generated@@181) (=> (and ($generated@@163 $generated@@23 $generated@@182 $generated@@25 $generated@@183) ($generated@@163 $generated@@8 ($generated@@12 $generated@@181) $generated $generated@@183)) (and (=> (= (ControlFlow 0 8) (- 0 9)) (or (or (<= 0 $generated@@181) (< ($generated@@89 $generated@@182) ($generated@@89 $generated@@184))) (= $generated@@181 $generated@@181))) (=> (or (or (<= 0 $generated@@181) (< ($generated@@89 $generated@@182) ($generated@@89 $generated@@184))) (= $generated@@181 $generated@@181)) (=> (= (ControlFlow 0 8) (- 0 7)) (or (< ($generated@@89 $generated@@182) ($generated@@89 $generated@@184)) (and (= ($generated@@89 $generated@@182) ($generated@@89 $generated@@184)) (< $generated@@181 $generated@@181))))))))))
(let (($generated@@196  (=> (< $generated@@181 $generated@@180) (=> (and ($generated@@163 $generated@@23 $generated@@182 $generated@@25 $generated@@183) ($generated@@163 $generated@@8 ($generated@@12 $generated@@180) $generated $generated@@183)) (and (=> (= (ControlFlow 0 5) (- 0 6)) (or (or (<= 0 $generated@@181) (< ($generated@@89 $generated@@182) ($generated@@89 $generated@@184))) (= $generated@@180 $generated@@181))) (=> (or (or (<= 0 $generated@@181) (< ($generated@@89 $generated@@182) ($generated@@89 $generated@@184))) (= $generated@@180 $generated@@181)) (=> (= (ControlFlow 0 5) (- 0 4)) (or (< ($generated@@89 $generated@@182) ($generated@@89 $generated@@184)) (and (= ($generated@@89 $generated@@182) ($generated@@89 $generated@@184)) (< $generated@@180 $generated@@181))))))))))
(let (($generated@@197  (=> (and (and (= $generated@@184 ($generated@@24 $generated@@185 $generated@@186 $generated@@187)) ($generated@@22 $generated@@23 $generated@@186 $generated@@25)) (and ($generated@@22 $generated@@23 $generated@@187 $generated@@25) (= $generated@@188 $generated@@187))) (=> (and (and (and ($generated@@22 $generated@@23 $generated@@188 $generated@@25) (= $generated@@182 $generated@@188)) (and (= $generated@@189 $generated@@186) ($generated@@22 $generated@@23 $generated@@189 $generated@@25))) (and (and (= $generated@@190 $generated@@189) (= $generated@@191 $generated@@185)) (and ($generated@@22 $generated@@8 ($generated@@12 $generated@@191) $generated) (= $generated@@180 $generated@@191)))) (and (=> (= (ControlFlow 0 10) 5) $generated@@196) (=> (= (ControlFlow 0 10) 8) $generated@@195))))))
(let (($generated@@198 true))
(let (($generated@@199  (=> (or (not (= $generated@@184 $generated@@46)) (not true)) (and (=> (= (ControlFlow 0 11) 10) $generated@@197) (=> (= (ControlFlow 0 11) 3) $generated@@198)))))
(let (($generated@@200 true))
(let (($generated@@201 true))
(let (($generated@@202  (=> (= $generated@@192 ($generated@@107 $generated@@193 $generated@@183 $generated@@1 false)) (and (and (=> (= (ControlFlow 0 12) 1) $generated@@201) (=> (= (ControlFlow 0 12) 2) $generated@@200)) (=> (= (ControlFlow 0 12) 11) $generated@@199)))))
(let (($generated@@203  (=> (and (and (and ($generated@@164 $generated@@183) ($generated@@194 $generated@@183)) ($generated@@22 $generated@@23 $generated@@184 $generated@@25)) (and (= 1 $generated@@47) (= (ControlFlow 0 13) 12))) $generated@@202)))
$generated@@203))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
