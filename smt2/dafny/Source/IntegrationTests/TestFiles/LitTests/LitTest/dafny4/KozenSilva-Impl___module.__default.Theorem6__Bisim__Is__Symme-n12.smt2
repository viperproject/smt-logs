(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun alloc () T@U)
(declare-fun Tagclass._module.Stream () T@U)
(declare-fun |##_module.Stream.Cons| () T@U)
(declare-fun tytagFamily$Stream () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun |ORD#Less| (T@U T@U) Bool)
(declare-fun |$IsA#_module.Stream| (T@U) Bool)
(declare-fun _module.Stream.Cons_q (T@U) Bool)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.Bisim_h (T@U T@U T@U T@U T@U) Bool)
(declare-fun $LS (T@U) T@U)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun |_module.__default.Bisim_h#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun Tclass._module.Stream (T@U) T@U)
(declare-fun |ORD#Offset| (T@U) Int)
(declare-fun _module.Stream.hd (T@U) T@U)
(declare-fun |ORD#Minus| (T@U T@U) T@U)
(declare-fun |ORD#FromNat| (Int) T@U)
(declare-fun _module.Stream.tl (T@U) T@U)
(declare-fun LitInt (Int) Int)
(declare-fun |#_module.Stream.Cons| (T@U T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun _module.__default.Bisim (T@U T@U T@U T@U) Bool)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tag (T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun |ORD#IsNat| (T@U) Bool)
(declare-fun Tclass._module.Stream_0 (T@U) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun |_module.__default.Bisim#canCall| (T@U T@U T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct alloc Tagclass._module.Stream |##_module.Stream.Cons| tytagFamily$Stream)
)
(assert (forall ((o T@U) (p T@U) (r T@U) ) (!  (=> (and (|ORD#Less| o p) (|ORD#Less| p r)) (|ORD#Less| o r))
 :pattern ( (|ORD#Less| o p) (|ORD#Less| p r))
 :pattern ( (|ORD#Less| o p) (|ORD#Less| o r))
)))
(assert (forall ((d T@U) ) (!  (=> (|$IsA#_module.Stream| d) (_module.Stream.Cons_q d))
 :pattern ( (|$IsA#_module.Stream| d))
)))
(assert  (and (= (Ctor BoxType) 3) (= (Ctor DatatypeTypeType) 4)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|_module._default.Bisim#$_T0| T@U) ($ly T@U) (|_k#0| T@U) (|s#0| T@U) (|t#0| T@U) ) (!  (=> (or (|_module.__default.Bisim_h#canCall| |_module._default.Bisim#$_T0| (Lit BoxType |_k#0|) |s#0| |t#0|) (and (< 2 $FunctionContextHeight) (and ($Is DatatypeTypeType |s#0| (Tclass._module.Stream |_module._default.Bisim#$_T0|)) ($Is DatatypeTypeType |t#0| (Tclass._module.Stream |_module._default.Bisim#$_T0|))))) (and (and (=> (< 0 (|ORD#Offset| |_k#0|)) (and (and (_module.Stream.Cons_q |s#0|) (_module.Stream.Cons_q |t#0|)) (=> (= (_module.Stream.hd |s#0|) (_module.Stream.hd |t#0|)) (and (and (_module.Stream.Cons_q |s#0|) (_module.Stream.Cons_q |t#0|)) (|_module.__default.Bisim_h#canCall| |_module._default.Bisim#$_T0| (|ORD#Minus| |_k#0| (|ORD#FromNat| 1)) (_module.Stream.tl |s#0|) (_module.Stream.tl |t#0|)))))) (=> (=> (< 0 (|ORD#Offset| |_k#0|)) (and (= (_module.Stream.hd |s#0|) (_module.Stream.hd |t#0|)) (_module.__default.Bisim_h |_module._default.Bisim#$_T0| ($LS $ly) (|ORD#Minus| |_k#0| (|ORD#FromNat| 1)) (_module.Stream.tl |s#0|) (_module.Stream.tl |t#0|)))) (=> (= (LitInt 0) (|ORD#Offset| |_k#0|)) (forall ((|_k'#1| T@U) ) (!  (=> (|ORD#Less| |_k'#1| |_k#0|) (|_module.__default.Bisim_h#canCall| |_module._default.Bisim#$_T0| |_k'#1| |s#0| |t#0|))
 :pattern ( (_module.__default.Bisim_h |_module._default.Bisim#$_T0| ($LS $ly) |_k'#1| |s#0| |t#0|))
))))) (= (_module.__default.Bisim_h |_module._default.Bisim#$_T0| ($LS $ly) (Lit BoxType |_k#0|) |s#0| |t#0|)  (and (=> (< 0 (|ORD#Offset| |_k#0|)) (and (= (_module.Stream.hd |s#0|) (_module.Stream.hd |t#0|)) (_module.__default.Bisim_h |_module._default.Bisim#$_T0| ($LS $ly) (|ORD#Minus| |_k#0| (|ORD#FromNat| 1)) (_module.Stream.tl |s#0|) (_module.Stream.tl |t#0|)))) (=> (= (LitInt 0) (|ORD#Offset| |_k#0|)) (forall ((|_k'#1@@0| T@U) ) (!  (=> (|ORD#Less| |_k'#1@@0| |_k#0|) (_module.__default.Bisim_h |_module._default.Bisim#$_T0| ($LS $ly) |_k'#1@@0| |s#0| |t#0|))
 :pattern ( (_module.__default.Bisim_h |_module._default.Bisim#$_T0| ($LS $ly) |_k'#1@@0| |s#0| |t#0|))
)))))))
 :weight 3
 :pattern ( (_module.__default.Bisim_h |_module._default.Bisim#$_T0| ($LS $ly) (Lit BoxType |_k#0|) |s#0| |t#0|))
))))
(assert (forall ((o@@0 T@U) (m Int) (n Int) ) (!  (=> (and (and (<= 0 m) (<= 0 n)) (<= (+ m n) (|ORD#Offset| o@@0))) (= (|ORD#Minus| (|ORD#Minus| o@@0 (|ORD#FromNat| m)) (|ORD#FromNat| n)) (|ORD#Minus| o@@0 (|ORD#FromNat| (+ m n)))))
 :pattern ( (|ORD#Minus| (|ORD#Minus| o@@0 (|ORD#FromNat| m)) (|ORD#FromNat| n)))
)))
(assert (forall ((_module.Stream$A T@U) (d@@0 T@U) ) (!  (=> ($Is DatatypeTypeType d@@0 (Tclass._module.Stream _module.Stream$A)) (_module.Stream.Cons_q d@@0))
 :pattern ( (_module.Stream.Cons_q d@@0) ($Is DatatypeTypeType d@@0 (Tclass._module.Stream _module.Stream$A)))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|_module._default.Bisim#$_T0@@0| T@U) ($ly@@0 T@U) (|s#0@@0| T@U) (|t#0@@0| T@U) (|_k#0@@0| T@U) ) (!  (=> (and (and ($Is DatatypeTypeType |s#0@@0| (Tclass._module.Stream |_module._default.Bisim#$_T0@@0|)) ($Is DatatypeTypeType |t#0@@0| (Tclass._module.Stream |_module._default.Bisim#$_T0@@0|))) (= |_k#0@@0| (|ORD#FromNat| 0))) (_module.__default.Bisim_h |_module._default.Bisim#$_T0@@0| $ly@@0 |_k#0@@0| |s#0@@0| |t#0@@0|))
 :pattern ( (_module.__default.Bisim_h |_module._default.Bisim#$_T0@@0| $ly@@0 |_k#0@@0| |s#0@@0| |t#0@@0|))
))))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((_module.Stream$A@@0 T@U) (|a#2#0#0| T@U) (|a#2#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Stream.Cons| |a#2#0#0| |a#2#1#0|) (Tclass._module.Stream _module.Stream$A@@0))  (and ($IsBox |a#2#0#0| _module.Stream$A@@0) ($Is DatatypeTypeType |a#2#1#0| (Tclass._module.Stream _module.Stream$A@@0))))
 :pattern ( ($Is DatatypeTypeType (|#_module.Stream.Cons| |a#2#0#0| |a#2#1#0|) (Tclass._module.Stream _module.Stream$A@@0)))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|_module._default.Bisim#$_T0@@1| T@U) ($ly@@1 T@U) (|s#0@@1| T@U) (|t#0@@1| T@U) ) (!  (=> (and (and ($Is DatatypeTypeType |s#0@@1| (Tclass._module.Stream |_module._default.Bisim#$_T0@@1|)) ($Is DatatypeTypeType |t#0@@1| (Tclass._module.Stream |_module._default.Bisim#$_T0@@1|))) (forall ((|_k#0@@1| T@U) ) (! (_module.__default.Bisim_h |_module._default.Bisim#$_T0@@1| ($LS $ly@@1) |_k#0@@1| |s#0@@1| |t#0@@1|)
 :pattern ( (_module.__default.Bisim_h |_module._default.Bisim#$_T0@@1| ($LS $ly@@1) |_k#0@@1| |s#0@@1| |t#0@@1|))
))) (_module.__default.Bisim |_module._default.Bisim#$_T0@@1| ($LS $ly@@1) |s#0@@1| |t#0@@1|))
 :pattern ( (_module.__default.Bisim |_module._default.Bisim#$_T0@@1| ($LS $ly@@1) |s#0@@1| |t#0@@1|))
))))
(assert (forall ((d@@1 T@U) ) (! (= (_module.Stream.Cons_q d@@1) (= (DatatypeCtorId d@@1) |##_module.Stream.Cons|))
 :pattern ( (_module.Stream.Cons_q d@@1))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((d@@2 T@U) ) (!  (=> (_module.Stream.Cons_q d@@2) (exists ((|a#1#0#0| T@U) (|a#1#1#0| T@U) ) (= d@@2 (|#_module.Stream.Cons| |a#1#0#0| |a#1#1#0|))))
 :pattern ( (_module.Stream.Cons_q d@@2))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|_module._default.Bisim#$_T0@@2| T@U) ($ly@@2 T@U) (|s#0@@2| T@U) (|t#0@@2| T@U) ) (!  (=> (and (and ($Is DatatypeTypeType |s#0@@2| (Tclass._module.Stream |_module._default.Bisim#$_T0@@2|)) ($Is DatatypeTypeType |t#0@@2| (Tclass._module.Stream |_module._default.Bisim#$_T0@@2|))) (_module.__default.Bisim |_module._default.Bisim#$_T0@@2| ($LS $ly@@2) |s#0@@2| |t#0@@2|)) (forall ((|_k#0@@2| T@U) ) (! (_module.__default.Bisim_h |_module._default.Bisim#$_T0@@2| ($LS $ly@@2) |_k#0@@2| |s#0@@2| |t#0@@2|)
 :pattern ( (_module.__default.Bisim_h |_module._default.Bisim#$_T0@@2| ($LS $ly@@2) |_k#0@@2| |s#0@@2| |t#0@@2|))
)))
 :pattern ( (_module.__default.Bisim |_module._default.Bisim#$_T0@@2| ($LS $ly@@2) |s#0@@2| |t#0@@2|))
))))
(assert (forall ((v T@U) (t T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v) t h) ($IsAlloc T@@1 v t h))
 :pattern ( ($IsAllocBox ($Box T@@1 v) t h))
)))
(assert (forall ((_module.Stream$A@@1 T@U) ) (!  (and (= (Tag (Tclass._module.Stream _module.Stream$A@@1)) Tagclass._module.Stream) (= (TagFamily (Tclass._module.Stream _module.Stream$A@@1)) tytagFamily$Stream))
 :pattern ( (Tclass._module.Stream _module.Stream$A@@1))
)))
(assert (forall ((o@@1 T@U) (p@@0 T@U) ) (!  (=> (and (|ORD#IsNat| p@@0) (<= (|ORD#Offset| p@@0) (|ORD#Offset| o@@1))) (and (= (|ORD#IsNat| (|ORD#Minus| o@@1 p@@0)) (|ORD#IsNat| o@@1)) (= (|ORD#Offset| (|ORD#Minus| o@@1 p@@0)) (- (|ORD#Offset| o@@1) (|ORD#Offset| p@@0)))))
 :pattern ( (|ORD#Minus| o@@1 p@@0))
)))
(assert (forall ((n@@0 Int) ) (!  (=> (<= 0 n@@0) (and (|ORD#IsNat| (|ORD#FromNat| n@@0)) (= (|ORD#Offset| (|ORD#FromNat| n@@0)) n@@0)))
 :pattern ( (|ORD#FromNat| n@@0))
)))
(assert (forall ((o@@2 T@U) (p@@1 T@U) ) (!  (or (or (|ORD#Less| o@@2 p@@1) (= o@@2 p@@1)) (|ORD#Less| p@@1 o@@2))
 :pattern ( (|ORD#Less| o@@2 p@@1) (|ORD#Less| p@@1 o@@2))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|_module._default.Bisim#$_T0@@3| T@U) ($ly@@3 T@U) (|_k#0@@3| T@U) (|s#0@@3| T@U) (|t#0@@3| T@U) ) (!  (=> (or (|_module.__default.Bisim_h#canCall| |_module._default.Bisim#$_T0@@3| (Lit BoxType |_k#0@@3|) (Lit DatatypeTypeType |s#0@@3|) (Lit DatatypeTypeType |t#0@@3|)) (and (< 2 $FunctionContextHeight) (and ($Is DatatypeTypeType |s#0@@3| (Tclass._module.Stream |_module._default.Bisim#$_T0@@3|)) ($Is DatatypeTypeType |t#0@@3| (Tclass._module.Stream |_module._default.Bisim#$_T0@@3|))))) (and (and (=> (< 0 (|ORD#Offset| |_k#0@@3|)) (and (and (_module.Stream.Cons_q (Lit DatatypeTypeType |s#0@@3|)) (_module.Stream.Cons_q (Lit DatatypeTypeType |t#0@@3|))) (=> (= (Lit BoxType (_module.Stream.hd (Lit DatatypeTypeType |s#0@@3|))) (Lit BoxType (_module.Stream.hd (Lit DatatypeTypeType |t#0@@3|)))) (and (and (_module.Stream.Cons_q (Lit DatatypeTypeType |s#0@@3|)) (_module.Stream.Cons_q (Lit DatatypeTypeType |t#0@@3|))) (|_module.__default.Bisim_h#canCall| |_module._default.Bisim#$_T0@@3| (|ORD#Minus| |_k#0@@3| (|ORD#FromNat| 1)) (Lit DatatypeTypeType (_module.Stream.tl (Lit DatatypeTypeType |s#0@@3|))) (Lit DatatypeTypeType (_module.Stream.tl (Lit DatatypeTypeType |t#0@@3|)))))))) (=> (=> (< 0 (|ORD#Offset| |_k#0@@3|)) (and (= (Lit BoxType (_module.Stream.hd (Lit DatatypeTypeType |s#0@@3|))) (Lit BoxType (_module.Stream.hd (Lit DatatypeTypeType |t#0@@3|)))) (_module.__default.Bisim_h |_module._default.Bisim#$_T0@@3| ($LS $ly@@3) (|ORD#Minus| |_k#0@@3| (|ORD#FromNat| 1)) (Lit DatatypeTypeType (_module.Stream.tl (Lit DatatypeTypeType |s#0@@3|))) (Lit DatatypeTypeType (_module.Stream.tl (Lit DatatypeTypeType |t#0@@3|)))))) (=> (= (LitInt 0) (|ORD#Offset| |_k#0@@3|)) (forall ((|_k'#2| T@U) ) (!  (=> (|ORD#Less| |_k'#2| |_k#0@@3|) (|_module.__default.Bisim_h#canCall| |_module._default.Bisim#$_T0@@3| |_k'#2| |s#0@@3| |t#0@@3|))
 :pattern ( (_module.__default.Bisim_h |_module._default.Bisim#$_T0@@3| ($LS $ly@@3) |_k'#2| |s#0@@3| |t#0@@3|))
))))) (= (_module.__default.Bisim_h |_module._default.Bisim#$_T0@@3| ($LS $ly@@3) (Lit BoxType |_k#0@@3|) (Lit DatatypeTypeType |s#0@@3|) (Lit DatatypeTypeType |t#0@@3|))  (and (=> (< 0 (|ORD#Offset| |_k#0@@3|)) (and (= (Lit BoxType (_module.Stream.hd (Lit DatatypeTypeType |s#0@@3|))) (Lit BoxType (_module.Stream.hd (Lit DatatypeTypeType |t#0@@3|)))) (_module.__default.Bisim_h |_module._default.Bisim#$_T0@@3| ($LS $ly@@3) (|ORD#Minus| |_k#0@@3| (|ORD#FromNat| 1)) (Lit DatatypeTypeType (_module.Stream.tl (Lit DatatypeTypeType |s#0@@3|))) (Lit DatatypeTypeType (_module.Stream.tl (Lit DatatypeTypeType |t#0@@3|)))))) (=> (= (LitInt 0) (|ORD#Offset| |_k#0@@3|)) (forall ((|_k'#2@@0| T@U) ) (!  (=> (|ORD#Less| |_k'#2@@0| |_k#0@@3|) (_module.__default.Bisim_h |_module._default.Bisim#$_T0@@3| ($LS $ly@@3) |_k'#2@@0| |s#0@@3| |t#0@@3|))
 :pattern ( (_module.__default.Bisim_h |_module._default.Bisim#$_T0@@3| ($LS $ly@@3) |_k'#2@@0| |s#0@@3| |t#0@@3|))
)))))))
 :weight 3
 :pattern ( (_module.__default.Bisim_h |_module._default.Bisim#$_T0@@3| ($LS $ly@@3) (Lit BoxType |_k#0@@3|) (Lit DatatypeTypeType |s#0@@3|) (Lit DatatypeTypeType |t#0@@3|)))
))))
(assert (forall ((v@@0 T@U) (t@@0 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@0) t@@0) ($Is T@@2 v@@0 t@@0))
 :pattern ( ($IsBox ($Box T@@2 v@@0) t@@0))
)))
(assert (forall ((o@@3 T@U) ) (! (<= 0 (|ORD#Offset| o@@3))
 :pattern ( (|ORD#Offset| o@@3))
)))
(assert (forall ((|a#0#0#0| T@U) (|a#0#1#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Stream.Cons| |a#0#0#0| |a#0#1#0|)) |##_module.Stream.Cons|)
 :pattern ( (|#_module.Stream.Cons| |a#0#0#0| |a#0#1#0|))
)))
(assert (forall ((|a#3#0#0| T@U) (|a#3#1#0| T@U) ) (! (= (_module.Stream.hd (|#_module.Stream.Cons| |a#3#0#0| |a#3#1#0|)) |a#3#0#0|)
 :pattern ( (|#_module.Stream.Cons| |a#3#0#0| |a#3#1#0|))
)))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| T@U) ) (! (= (_module.Stream.tl (|#_module.Stream.Cons| |a#4#0#0| |a#4#1#0|)) |a#4#1#0|)
 :pattern ( (|#_module.Stream.Cons| |a#4#0#0| |a#4#1#0|))
)))
(assert (forall ((_module.Stream$A@@2 T@U) ) (! (= (Tclass._module.Stream_0 (Tclass._module.Stream _module.Stream$A@@2)) _module.Stream$A@@2)
 :pattern ( (Tclass._module.Stream _module.Stream$A@@2))
)))
(assert (forall ((x@@5 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@5)) x@@5)
 :pattern ( ($Box T@@3 x@@5))
)))
(assert (forall ((o@@4 T@U) (p@@2 T@U) ) (!  (and (and (and (=> (|ORD#Less| o@@4 p@@2) (or (not (= o@@4 p@@2)) (not true))) (=> (and (|ORD#IsNat| o@@4) (not (|ORD#IsNat| p@@2))) (|ORD#Less| o@@4 p@@2))) (=> (and (|ORD#IsNat| o@@4) (|ORD#IsNat| p@@2)) (= (|ORD#Less| o@@4 p@@2) (< (|ORD#Offset| o@@4) (|ORD#Offset| p@@2))))) (=> (and (|ORD#Less| o@@4 p@@2) (|ORD#IsNat| p@@2)) (|ORD#IsNat| o@@4)))
 :pattern ( (|ORD#Less| o@@4 p@@2))
)))
(assert (forall ((_module._default.Bisim$_T0 T@U) ($ly@@4 T@U) (|s#0@@4| T@U) (|t#0@@4| T@U) ) (! (= (_module.__default.Bisim _module._default.Bisim$_T0 ($LS $ly@@4) |s#0@@4| |t#0@@4|) (_module.__default.Bisim _module._default.Bisim$_T0 $ly@@4 |s#0@@4| |t#0@@4|))
 :pattern ( (_module.__default.Bisim _module._default.Bisim$_T0 ($LS $ly@@4) |s#0@@4| |t#0@@4|))
)))
(assert (forall ((d@@3 T@U) (_module.Stream$A@@3 T@U) ($h T@U) ) (!  (=> (and ($IsGoodHeap $h) (and (_module.Stream.Cons_q d@@3) ($IsAlloc DatatypeTypeType d@@3 (Tclass._module.Stream _module.Stream$A@@3) $h))) ($IsAllocBox (_module.Stream.hd d@@3) _module.Stream$A@@3 $h))
 :pattern ( ($IsAllocBox (_module.Stream.hd d@@3) _module.Stream$A@@3 $h))
)))
(assert  (and (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (t2 T@T) (val T@U) (m@@0 T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0 t1 t2 (MapType0Store t0 t1 t2 m@@0 x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@1 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@1 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@1 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@2 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@2 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@2 y0@@0 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 5)) (= (Ctor FieldType) 6)) (forall ((t0@@0 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@3 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 (MapType1Store t0@@0 t1@@0 m@@3 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@4 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@4 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@4 y0@@1)))
 :weight 0
))) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module._default.Bisim$_T0@@0 T@U) ($ly@@5 T@U) (|s#0@@5| T@U) (|t#0@@5| T@U) ) (!  (=> (or (|_module.__default.Bisim#canCall| _module._default.Bisim$_T0@@0 |s#0@@5| |t#0@@5|) (and (< 1 $FunctionContextHeight) (and ($Is DatatypeTypeType |s#0@@5| (Tclass._module.Stream _module._default.Bisim$_T0@@0)) ($Is DatatypeTypeType |t#0@@5| (Tclass._module.Stream _module._default.Bisim$_T0@@0))))) (and (and (and (_module.Stream.Cons_q |s#0@@5|) (_module.Stream.Cons_q |t#0@@5|)) (=> (= (_module.Stream.hd |s#0@@5|) (_module.Stream.hd |t#0@@5|)) (and (and (_module.Stream.Cons_q |s#0@@5|) (_module.Stream.Cons_q |t#0@@5|)) (|_module.__default.Bisim#canCall| _module._default.Bisim$_T0@@0 (_module.Stream.tl |s#0@@5|) (_module.Stream.tl |t#0@@5|))))) (= (_module.__default.Bisim _module._default.Bisim$_T0@@0 ($LS $ly@@5) |s#0@@5| |t#0@@5|)  (and (= (_module.Stream.hd |s#0@@5|) (_module.Stream.hd |t#0@@5|)) (_module.__default.Bisim _module._default.Bisim$_T0@@0 $ly@@5 (_module.Stream.tl |s#0@@5|) (_module.Stream.tl |t#0@@5|))))))
 :pattern ( (_module.__default.Bisim _module._default.Bisim$_T0@@0 ($LS $ly@@5) |s#0@@5| |t#0@@5|))
))))
(assert (forall ((_module.Stream$A@@4 T@U) (bx T@U) ) (!  (=> ($IsBox bx (Tclass._module.Stream _module.Stream$A@@4)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx)) bx) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx) (Tclass._module.Stream _module.Stream$A@@4))))
 :pattern ( ($IsBox bx (Tclass._module.Stream _module.Stream$A@@4)))
)))
(assert (forall ((|_module._default.Bisim#$_T0@@4| T@U) ($ly@@6 T@U) (|_k#0@@4| T@U) (|s#0@@6| T@U) (|t#0@@6| T@U) ) (! (= (_module.__default.Bisim_h |_module._default.Bisim#$_T0@@4| ($LS $ly@@6) |_k#0@@4| |s#0@@6| |t#0@@6|) (_module.__default.Bisim_h |_module._default.Bisim#$_T0@@4| $ly@@6 |_k#0@@4| |s#0@@6| |t#0@@6|))
 :pattern ( (_module.__default.Bisim_h |_module._default.Bisim#$_T0@@4| ($LS $ly@@6) |_k#0@@4| |s#0@@6| |t#0@@6|))
)))
(assert (forall ((o@@5 T@U) ) (!  (=> (|ORD#IsNat| o@@5) (= o@@5 (|ORD#FromNat| (|ORD#Offset| o@@5))))
 :pattern ( (|ORD#Offset| o@@5))
 :pattern ( (|ORD#IsNat| o@@5))
)))
(assert (forall ((d@@4 T@U) (_module.Stream$A@@5 T@U) ($h@@0 T@U) ) (!  (=> (and ($IsGoodHeap $h@@0) (and (_module.Stream.Cons_q d@@4) ($IsAlloc DatatypeTypeType d@@4 (Tclass._module.Stream _module.Stream$A@@5) $h@@0))) ($IsAlloc DatatypeTypeType (_module.Stream.tl d@@4) (Tclass._module.Stream _module.Stream$A@@5) $h@@0))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.Stream.tl d@@4) (Tclass._module.Stream _module.Stream$A@@5) $h@@0))
)))
(assert (forall ((o@@6 T@U) (p@@3 T@U) ) (!  (=> (and (|ORD#IsNat| p@@3) (<= (|ORD#Offset| p@@3) (|ORD#Offset| o@@6))) (or (and (= p@@3 (|ORD#FromNat| 0)) (= (|ORD#Minus| o@@6 p@@3) o@@6)) (and (or (not (= p@@3 (|ORD#FromNat| 0))) (not true)) (|ORD#Less| (|ORD#Minus| o@@6 p@@3) o@@6))))
 :pattern ( (|ORD#Minus| o@@6 p@@3))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|_module._default.Bisim#$_T0@@5| T@U) ($ly@@7 T@U) (|_k#0@@5| T@U) (|s#0@@7| T@U) (|t#0@@7| T@U) ) (!  (=> (or (|_module.__default.Bisim_h#canCall| |_module._default.Bisim#$_T0@@5| |_k#0@@5| |s#0@@7| |t#0@@7|) (and (< 2 $FunctionContextHeight) (and ($Is DatatypeTypeType |s#0@@7| (Tclass._module.Stream |_module._default.Bisim#$_T0@@5|)) ($Is DatatypeTypeType |t#0@@7| (Tclass._module.Stream |_module._default.Bisim#$_T0@@5|))))) (and (and (=> (< 0 (|ORD#Offset| |_k#0@@5|)) (and (and (_module.Stream.Cons_q |s#0@@7|) (_module.Stream.Cons_q |t#0@@7|)) (=> (= (_module.Stream.hd |s#0@@7|) (_module.Stream.hd |t#0@@7|)) (and (and (_module.Stream.Cons_q |s#0@@7|) (_module.Stream.Cons_q |t#0@@7|)) (|_module.__default.Bisim_h#canCall| |_module._default.Bisim#$_T0@@5| (|ORD#Minus| |_k#0@@5| (|ORD#FromNat| 1)) (_module.Stream.tl |s#0@@7|) (_module.Stream.tl |t#0@@7|)))))) (=> (=> (< 0 (|ORD#Offset| |_k#0@@5|)) (and (= (_module.Stream.hd |s#0@@7|) (_module.Stream.hd |t#0@@7|)) (_module.__default.Bisim_h |_module._default.Bisim#$_T0@@5| $ly@@7 (|ORD#Minus| |_k#0@@5| (|ORD#FromNat| 1)) (_module.Stream.tl |s#0@@7|) (_module.Stream.tl |t#0@@7|)))) (=> (= (LitInt 0) (|ORD#Offset| |_k#0@@5|)) (forall ((|_k'#0| T@U) ) (!  (=> (|ORD#Less| |_k'#0| |_k#0@@5|) (|_module.__default.Bisim_h#canCall| |_module._default.Bisim#$_T0@@5| |_k'#0| |s#0@@7| |t#0@@7|))
 :pattern ( (_module.__default.Bisim_h |_module._default.Bisim#$_T0@@5| $ly@@7 |_k'#0| |s#0@@7| |t#0@@7|))
))))) (= (_module.__default.Bisim_h |_module._default.Bisim#$_T0@@5| ($LS $ly@@7) |_k#0@@5| |s#0@@7| |t#0@@7|)  (and (=> (< 0 (|ORD#Offset| |_k#0@@5|)) (and (= (_module.Stream.hd |s#0@@7|) (_module.Stream.hd |t#0@@7|)) (_module.__default.Bisim_h |_module._default.Bisim#$_T0@@5| $ly@@7 (|ORD#Minus| |_k#0@@5| (|ORD#FromNat| 1)) (_module.Stream.tl |s#0@@7|) (_module.Stream.tl |t#0@@7|)))) (=> (= (LitInt 0) (|ORD#Offset| |_k#0@@5|)) (forall ((|_k'#0@@0| T@U) ) (!  (=> (|ORD#Less| |_k'#0@@0| |_k#0@@5|) (_module.__default.Bisim_h |_module._default.Bisim#$_T0@@5| $ly@@7 |_k'#0@@0| |s#0@@7| |t#0@@7|))
 :pattern ( (_module.__default.Bisim_h |_module._default.Bisim#$_T0@@5| $ly@@7 |_k'#0@@0| |s#0@@7| |t#0@@7|))
)))))))
 :pattern ( (_module.__default.Bisim_h |_module._default.Bisim#$_T0@@5| ($LS $ly@@7) |_k#0@@5| |s#0@@7| |t#0@@7|))
))))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((x@@7 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@7)) (Lit BoxType ($Box T@@4 x@@7)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@7)))
)))
(assert (forall ((_module.Stream$A@@6 T@U) (|a#2#0#0@@0| T@U) (|a#2#1#0@@0| T@U) ($h@@1 T@U) ) (!  (=> ($IsGoodHeap $h@@1) (= ($IsAlloc DatatypeTypeType (|#_module.Stream.Cons| |a#2#0#0@@0| |a#2#1#0@@0|) (Tclass._module.Stream _module.Stream$A@@6) $h@@1)  (and ($IsAllocBox |a#2#0#0@@0| _module.Stream$A@@6 $h@@1) ($IsAlloc DatatypeTypeType |a#2#1#0@@0| (Tclass._module.Stream _module.Stream$A@@6) $h@@1))))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_module.Stream.Cons| |a#2#0#0@@0| |a#2#1#0@@0|) (Tclass._module.Stream _module.Stream$A@@6) $h@@1))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |_module._default.Theorem6_Bisim_Is_Symmetric#$_T0| () T@U)
(declare-fun |_k#0@@6| () T@U)
(declare-fun |t#1| () T@U)
(declare-fun |s#1| () T@U)
(declare-fun $LZ () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun $Heap@0 () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $Heap () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 8) (let ((GeneratedUnifiedExit_correct  (and (=> (= (ControlFlow 0 2) (- 0 4)) (=> (|_module.__default.Bisim_h#canCall| |_module._default.Theorem6_Bisim_Is_Symmetric#$_T0| |_k#0@@6| |t#1| |s#1|) (or (_module.__default.Bisim_h |_module._default.Theorem6_Bisim_Is_Symmetric#$_T0| ($LS $LZ) |_k#0@@6| |t#1| |s#1|) (=> (< 0 (|ORD#Offset| |_k#0@@6|)) (= (_module.Stream.hd |t#1|) (_module.Stream.hd |s#1|)))))) (=> (=> (|_module.__default.Bisim_h#canCall| |_module._default.Theorem6_Bisim_Is_Symmetric#$_T0| |_k#0@@6| |t#1| |s#1|) (or (_module.__default.Bisim_h |_module._default.Theorem6_Bisim_Is_Symmetric#$_T0| ($LS $LZ) |_k#0@@6| |t#1| |s#1|) (=> (< 0 (|ORD#Offset| |_k#0@@6|)) (= (_module.Stream.hd |t#1|) (_module.Stream.hd |s#1|))))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (=> (|_module.__default.Bisim_h#canCall| |_module._default.Theorem6_Bisim_Is_Symmetric#$_T0| |_k#0@@6| |t#1| |s#1|) (or (_module.__default.Bisim_h |_module._default.Theorem6_Bisim_Is_Symmetric#$_T0| ($LS $LZ) |_k#0@@6| |t#1| |s#1|) (=> (< 0 (|ORD#Offset| |_k#0@@6|)) (_module.__default.Bisim_h |_module._default.Theorem6_Bisim_Is_Symmetric#$_T0| ($LS ($LS $LZ)) (|ORD#Minus| |_k#0@@6| (|ORD#FromNat| 1)) (_module.Stream.tl |t#1|) (_module.Stream.tl |s#1|)))))) (=> (=> (|_module.__default.Bisim_h#canCall| |_module._default.Theorem6_Bisim_Is_Symmetric#$_T0| |_k#0@@6| |t#1| |s#1|) (or (_module.__default.Bisim_h |_module._default.Theorem6_Bisim_Is_Symmetric#$_T0| ($LS $LZ) |_k#0@@6| |t#1| |s#1|) (=> (< 0 (|ORD#Offset| |_k#0@@6|)) (_module.__default.Bisim_h |_module._default.Theorem6_Bisim_Is_Symmetric#$_T0| ($LS ($LS $LZ)) (|ORD#Minus| |_k#0@@6| (|ORD#FromNat| 1)) (_module.Stream.tl |t#1|) (_module.Stream.tl |s#1|))))) (=> (= (ControlFlow 0 2) (- 0 1)) (=> (|_module.__default.Bisim_h#canCall| |_module._default.Theorem6_Bisim_Is_Symmetric#$_T0| |_k#0@@6| |t#1| |s#1|) (or (_module.__default.Bisim_h |_module._default.Theorem6_Bisim_Is_Symmetric#$_T0| ($LS $LZ) |_k#0@@6| |t#1| |s#1|) (=> (= (LitInt 0) (|ORD#Offset| |_k#0@@6|)) (forall ((|_k'#1@@1| T@U) ) (!  (=> (|ORD#Less| |_k'#1@@1| |_k#0@@6|) (_module.__default.Bisim_h |_module._default.Theorem6_Bisim_Is_Symmetric#$_T0| ($LS ($LS $LZ)) |_k'#1@@1| |t#1| |s#1|))
 :pattern ( (_module.__default.Bisim_h |_module._default.Theorem6_Bisim_Is_Symmetric#$_T0| ($LS ($LS $LZ)) |_k'#1@@1| |t#1| |s#1|))
))))))))))))
(let ((anon3_Else_correct  (=> (<= (|ORD#Offset| |_k#0@@6|) 0) (=> (and (and (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1)) (= $Heap@0 $Heap@1)) (and (forall ((|_k'#2@@1| T@U) (|s#2| T@U) (|t#2| T@U) ) (!  (=> (and (and ($Is DatatypeTypeType |s#2| (Tclass._module.Stream |_module._default.Theorem6_Bisim_Is_Symmetric#$_T0|)) ($Is DatatypeTypeType |t#2| (Tclass._module.Stream |_module._default.Theorem6_Bisim_Is_Symmetric#$_T0|))) (and (|ORD#Less| |_k'#2@@1| |_k#0@@6|) (_module.__default.Bisim |_module._default.Theorem6_Bisim_Is_Symmetric#$_T0| ($LS $LZ) |s#2| |t#2|))) (_module.__default.Bisim_h |_module._default.Theorem6_Bisim_Is_Symmetric#$_T0| ($LS $LZ) |_k'#2@@1| |t#2| |s#2|))
 :pattern ( (_module.__default.Bisim_h |_module._default.Theorem6_Bisim_Is_Symmetric#$_T0| ($LS $LZ) |_k'#2@@1| |t#2| |s#2|))
 :pattern ( (_module.__default.Bisim |_module._default.Theorem6_Bisim_Is_Symmetric#$_T0| ($LS $LZ) |s#2| |t#2|) (|ORD#Less| |_k'#2@@1| |_k#0@@6|))
)) (= (ControlFlow 0 6) 2))) GeneratedUnifiedExit_correct))))
(let ((anon3_Then_correct  (=> (and (< 0 (|ORD#Offset| |_k#0@@6|)) (= (ControlFlow 0 5) 2)) GeneratedUnifiedExit_correct)))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (=> (and (|$IsA#_module.Stream| |s#1|) (|$IsA#_module.Stream| |t#1|)) (=> (and (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (and (= $Heap $Heap@0) (forall ((|$ih#_k0#0| T@U) (|$ih#s0#0| T@U) (|$ih#t0#0| T@U) ) (!  (=> (and (and (and ($Is DatatypeTypeType |$ih#s0#0| (Tclass._module.Stream |_module._default.Theorem6_Bisim_Is_Symmetric#$_T0|)) ($Is DatatypeTypeType |$ih#t0#0| (Tclass._module.Stream |_module._default.Theorem6_Bisim_Is_Symmetric#$_T0|))) (_module.__default.Bisim |_module._default.Theorem6_Bisim_Is_Symmetric#$_T0| ($LS $LZ) |$ih#s0#0| |$ih#t0#0|)) (|ORD#Less| |$ih#_k0#0| |_k#0@@6|)) (_module.__default.Bisim_h |_module._default.Theorem6_Bisim_Is_Symmetric#$_T0| ($LS $LZ) |$ih#_k0#0| |$ih#t0#0| |$ih#s0#0|))
 :pattern ( (_module.__default.Bisim_h |_module._default.Theorem6_Bisim_Is_Symmetric#$_T0| ($LS $LZ) |$ih#_k0#0| |$ih#t0#0| |$ih#s0#0|))
)))) (and (=> (= (ControlFlow 0 7) 5) anon3_Then_correct) (=> (= (ControlFlow 0 7) 6) anon3_Else_correct)))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (=> (and (and ($Is DatatypeTypeType |s#1| (Tclass._module.Stream |_module._default.Theorem6_Bisim_Is_Symmetric#$_T0|)) ($IsAlloc DatatypeTypeType |s#1| (Tclass._module.Stream |_module._default.Theorem6_Bisim_Is_Symmetric#$_T0|) $Heap)) (|$IsA#_module.Stream| |s#1|)) (=> (and (and (and (and ($Is DatatypeTypeType |t#1| (Tclass._module.Stream |_module._default.Theorem6_Bisim_Is_Symmetric#$_T0|)) ($IsAlloc DatatypeTypeType |t#1| (Tclass._module.Stream |_module._default.Theorem6_Bisim_Is_Symmetric#$_T0|) $Heap)) (|$IsA#_module.Stream| |t#1|)) (= 3 $FunctionContextHeight)) (and (and (|_module.__default.Bisim#canCall| |_module._default.Theorem6_Bisim_Is_Symmetric#$_T0| |s#1| |t#1|) (and (_module.__default.Bisim |_module._default.Theorem6_Bisim_Is_Symmetric#$_T0| ($LS $LZ) |s#1| |t#1|) (and (= (_module.Stream.hd |s#1|) (_module.Stream.hd |t#1|)) (_module.__default.Bisim |_module._default.Theorem6_Bisim_Is_Symmetric#$_T0| ($LS $LZ) (_module.Stream.tl |s#1|) (_module.Stream.tl |t#1|))))) (= (ControlFlow 0 8) 7))) anon0_correct)))))
PreconditionGeneratedEntry_correct))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
