(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 (Bool) T@U)
(declare-fun $generated@@6 (T@U) Bool)
(declare-fun $generated@@7 (Int) T@U)
(declare-fun $generated@@8 (T@U) Int)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@17 (T@U T@U) Bool)
(declare-fun $generated@@18 () T@U)
(declare-fun $generated@@20 (T@U) Int)
(declare-fun $generated@@23 (Int) Int)
(declare-fun $generated@@25 (T@T T@U) T@U)
(declare-fun $generated@@28 (T@T T@U) T@U)
(declare-fun $generated@@29 (T@T T@U) T@U)
(declare-fun $generated@@32 (T@T T@U T@U) Bool)
(declare-fun $generated@@33 () T@T)
(declare-fun $generated@@34 (T@U) T@U)
(declare-fun $generated@@35 (T@U T@U) Bool)
(declare-fun $generated@@43 (T@U) T@U)
(declare-fun $generated@@45 (T@U) T@U)
(declare-fun $generated@@49 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@50 () T@T)
(declare-fun $generated@@51 () T@T)
(declare-fun $generated@@52 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@53 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@54 () T@T)
(declare-fun $generated@@55 (T@T T@T) T@T)
(declare-fun $generated@@56 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@57 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@58 (T@T) T@T)
(declare-fun $generated@@59 (T@T) T@T)
(declare-fun $generated@@108 (Int Int) Int)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (forall (($generated@@11 Bool) ) (! (= ($generated@@6 ($generated@@5 $generated@@11)) $generated@@11)
 :pattern ( ($generated@@5 $generated@@11))
))) (forall (($generated@@12 T@U) ) (! (= ($generated@@5 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 Int) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))))
(assert (distinct $generated $generated@@0)
)
(assert (forall (($generated@@19 T@U) ) (!  (not ($generated@@17 $generated@@18 $generated@@19))
 :pattern ( ($generated@@17 $generated@@18 $generated@@19))
)))
(assert (forall (($generated@@21 T@U) ) (!  (and (= (= ($generated@@20 $generated@@21) 0) (= $generated@@21 $generated@@18)) (=> (or (not (= ($generated@@20 $generated@@21) 0)) (not true)) (exists (($generated@@22 T@U) ) (! ($generated@@17 $generated@@21 $generated@@22)
 :pattern ( ($generated@@17 $generated@@21 $generated@@22))
))))
 :pattern ( ($generated@@20 $generated@@21))
)))
(assert (forall (($generated@@24 Int) ) (! (= ($generated@@23 $generated@@24) $generated@@24)
 :pattern ( ($generated@@23 $generated@@24))
)))
(assert (forall (($generated@@26 T@U) ($generated@@27 T@T) ) (! (= ($generated@@25 $generated@@27 $generated@@26) $generated@@26)
 :pattern ( ($generated@@25 $generated@@27 $generated@@26))
)))
(assert (forall (($generated@@30 T@U) ($generated@@31 T@T) ) (! (= ($generated@@29 $generated@@31 ($generated@@28 $generated@@31 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@28 $generated@@31 $generated@@30))
)))
(assert (= ($generated@@1 $generated@@33) 3))
(assert (forall (($generated@@36 T@U) ($generated@@37 T@U) ) (! (= ($generated@@32 $generated@@33 $generated@@36 ($generated@@34 $generated@@37)) (forall (($generated@@38 T@U) ) (!  (=> ($generated@@17 $generated@@36 $generated@@38) ($generated@@35 $generated@@38 $generated@@37))
 :pattern ( ($generated@@17 $generated@@36 $generated@@38))
)))
 :pattern ( ($generated@@32 $generated@@33 $generated@@36 ($generated@@34 $generated@@37)))
)))
(assert (forall (($generated@@39 T@U) ($generated@@40 T@U) ($generated@@41 T@T) ) (! (= ($generated@@35 ($generated@@29 $generated@@41 $generated@@39) $generated@@40) ($generated@@32 $generated@@41 $generated@@39 $generated@@40))
 :pattern ( ($generated@@35 ($generated@@29 $generated@@41 $generated@@39) $generated@@40))
)))
(assert (forall (($generated@@42 T@U) ) (! (<= 0 ($generated@@20 $generated@@42))
 :pattern ( ($generated@@20 $generated@@42))
)))
(assert (forall (($generated@@44 T@U) ) (! (= ($generated@@43 ($generated@@34 $generated@@44)) $generated@@44)
 :pattern ( ($generated@@34 $generated@@44))
)))
(assert (forall (($generated@@46 T@U) ) (! (= ($generated@@45 ($generated@@34 $generated@@46)) $generated)
 :pattern ( ($generated@@34 $generated@@46))
)))
(assert (forall (($generated@@47 T@U) ($generated@@48 T@T) ) (! (= ($generated@@28 $generated@@48 ($generated@@29 $generated@@48 $generated@@47)) $generated@@47)
 :pattern ( ($generated@@29 $generated@@48 $generated@@47))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@60 T@T) ($generated@@61 T@T) ($generated@@62 T@T) ($generated@@63 T@U) ($generated@@64 T@U) ($generated@@65 T@U) ($generated@@66 T@U) ) (! (= ($generated@@49 $generated@@60 $generated@@61 $generated@@62 ($generated@@56 $generated@@60 $generated@@61 $generated@@62 $generated@@64 $generated@@65 $generated@@66 $generated@@63) $generated@@65 $generated@@66) $generated@@63)
 :weight 0
)) (and (forall (($generated@@67 T@T) ($generated@@68 T@T) ($generated@@69 T@T) ($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@U) ) (!  (or (= $generated@@72 $generated@@74) (= ($generated@@49 $generated@@67 $generated@@68 $generated@@69 ($generated@@56 $generated@@67 $generated@@68 $generated@@69 $generated@@71 $generated@@72 $generated@@73 $generated@@70) $generated@@74 $generated@@75) ($generated@@49 $generated@@67 $generated@@68 $generated@@69 $generated@@71 $generated@@74 $generated@@75)))
 :weight 0
)) (forall (($generated@@76 T@T) ($generated@@77 T@T) ($generated@@78 T@T) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ) (!  (or (= $generated@@82 $generated@@84) (= ($generated@@49 $generated@@76 $generated@@77 $generated@@78 ($generated@@56 $generated@@76 $generated@@77 $generated@@78 $generated@@80 $generated@@81 $generated@@82 $generated@@79) $generated@@83 $generated@@84) ($generated@@49 $generated@@76 $generated@@77 $generated@@78 $generated@@80 $generated@@83 $generated@@84)))
 :weight 0
)))) (= ($generated@@1 $generated@@50) 4)) (= ($generated@@1 $generated@@51) 5)) (forall (($generated@@85 T@T) ($generated@@86 T@T) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ) (! (= ($generated@@53 $generated@@85 $generated@@86 ($generated@@57 $generated@@85 $generated@@86 $generated@@88 $generated@@89 $generated@@87) $generated@@89) $generated@@87)
 :weight 0
))) (forall (($generated@@90 T@T) ($generated@@91 T@T) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ) (!  (or (= $generated@@94 $generated@@95) (= ($generated@@53 $generated@@90 $generated@@91 ($generated@@57 $generated@@90 $generated@@91 $generated@@93 $generated@@94 $generated@@92) $generated@@95) ($generated@@53 $generated@@90 $generated@@91 $generated@@93 $generated@@95)))
 :weight 0
))) (= ($generated@@1 $generated@@54) 6)) (forall (($generated@@96 T@T) ($generated@@97 T@T) ) (= ($generated@@1 ($generated@@55 $generated@@96 $generated@@97)) 7))) (forall (($generated@@98 T@T) ($generated@@99 T@T) ) (! (= ($generated@@58 ($generated@@55 $generated@@98 $generated@@99)) $generated@@98)
 :pattern ( ($generated@@55 $generated@@98 $generated@@99))
))) (forall (($generated@@100 T@T) ($generated@@101 T@T) ) (! (= ($generated@@59 ($generated@@55 $generated@@100 $generated@@101)) $generated@@101)
 :pattern ( ($generated@@55 $generated@@100 $generated@@101))
))))
(assert (forall (($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 Bool) ($generated@@106 T@U) ($generated@@107 T@U) ) (! (= ($generated@@6 ($generated@@49 $generated@@50 $generated@@51 $generated@@2 ($generated@@52 $generated@@102 $generated@@103 $generated@@104 $generated@@105) $generated@@106 $generated@@107))  (=> (and (or (not (= $generated@@106 $generated@@102)) (not true)) ($generated@@6 ($generated@@28 $generated@@2 ($generated@@53 $generated@@51 $generated@@54 ($generated@@53 $generated@@50 ($generated@@55 $generated@@51 $generated@@54) $generated@@103 $generated@@106) $generated@@104)))) $generated@@105))
 :pattern ( ($generated@@49 $generated@@50 $generated@@51 $generated@@2 ($generated@@52 $generated@@102 $generated@@103 $generated@@104 $generated@@105) $generated@@106 $generated@@107))
)))
(assert (forall (($generated@@109 Int) ($generated@@110 Int) ) (! (= ($generated@@108 $generated@@109 $generated@@110) (mod $generated@@109 $generated@@110))
 :pattern ( ($generated@@108 $generated@@109 $generated@@110))
)))
(assert (forall (($generated@@111 T@U) ($generated@@112 T@U) ) (!  (=> ($generated@@35 $generated@@111 ($generated@@34 $generated@@112)) (and (= ($generated@@29 $generated@@33 ($generated@@28 $generated@@33 $generated@@111)) $generated@@111) ($generated@@32 $generated@@33 ($generated@@28 $generated@@33 $generated@@111) ($generated@@34 $generated@@112))))
 :pattern ( ($generated@@35 $generated@@111 ($generated@@34 $generated@@112)))
)))
(assert (forall (($generated@@113 Int) ) (! (= ($generated@@29 $generated@@3 ($generated@@7 ($generated@@23 $generated@@113))) ($generated@@25 $generated@@54 ($generated@@29 $generated@@3 ($generated@@7 $generated@@113))))
 :pattern ( ($generated@@29 $generated@@3 ($generated@@7 ($generated@@23 $generated@@113))))
)))
(assert (forall (($generated@@114 T@U) ($generated@@115 T@T) ) (! (= ($generated@@29 $generated@@115 ($generated@@25 $generated@@115 $generated@@114)) ($generated@@25 $generated@@54 ($generated@@29 $generated@@115 $generated@@114)))
 :pattern ( ($generated@@29 $generated@@115 ($generated@@25 $generated@@115 $generated@@114)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@116 () T@U)
(declare-fun $generated@@117 () T@U)
(declare-fun $generated@@118 () T@U)
(declare-fun $generated@@119 () T@U)
(declare-fun $generated@@120 () T@U)
(declare-fun $generated@@121 (T@U) Bool)
(declare-fun $generated@@122 (T@U) Bool)
(declare-fun $generated@@123 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 9) (let (($generated@@124 true))
(let (($generated@@125  (=> (or (not (= ($generated@@20 $generated@@116) ($generated@@23 0))) (not true)) (and (=> (= (ControlFlow 0 5) (- 0 6)) (or (not (= ($generated@@23 2) 0)) (not true))) (=> (or (not (= ($generated@@23 2) 0)) (not true)) (=> (and (= ($generated@@108 ($generated@@20 $generated@@116) ($generated@@23 2)) ($generated@@23 0)) (= (ControlFlow 0 5) 3)) $generated@@124))))))
(let (($generated@@126  (=> (and (= ($generated@@20 $generated@@116) ($generated@@23 0)) (= (ControlFlow 0 4) 3)) $generated@@124)))
(let (($generated@@127  (=> ($generated@@32 $generated@@33 $generated@@116 ($generated@@34 $generated@@117)) (and (=> (= (ControlFlow 0 7) 4) $generated@@126) (=> (= (ControlFlow 0 7) 5) $generated@@125)))))
(let (($generated@@128  (=> (= (ControlFlow 0 2) (- 0 1)) (or (= ($generated@@20 ($generated@@25 $generated@@33 $generated@@18)) ($generated@@23 0)) (= ($generated@@108 ($generated@@20 ($generated@@25 $generated@@33 $generated@@18)) ($generated@@23 2)) ($generated@@23 0))))))
(let (($generated@@129  (=> (= $generated@@118 ($generated@@52 $generated@@119 $generated@@120 $generated@@0 false)) (and (=> (= (ControlFlow 0 8) 7) $generated@@127) (=> (= (ControlFlow 0 8) 2) $generated@@128)))))
(let (($generated@@130  (=> (and (and ($generated@@121 $generated@@120) ($generated@@122 $generated@@120)) (and (= 0 $generated@@123) (= (ControlFlow 0 9) 8))) $generated@@129)))
$generated@@130))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
