(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 (T@U) T@U)
(declare-fun $generated@@20 (T@U) Int)
(declare-fun $generated@@21 () T@U)
(declare-fun $generated@@22 (T@U Int) T@U)
(declare-fun $generated@@25 (Int) Int)
(declare-fun $generated@@27 (T@T T@U) T@U)
(declare-fun $generated@@30 () Int)
(declare-fun $generated@@31 (T@U T@U Int) Int)
(declare-fun $generated@@32 (T@U) T@U)
(declare-fun $generated@@33 () T@T)
(declare-fun $generated@@34 (T@U Int) Bool)
(declare-fun $generated@@35 (T@T T@U T@U) Bool)
(declare-fun $generated@@36 (T@U) T@U)
(declare-fun $generated@@37 (T@T T@U) T@U)
(declare-fun $generated@@38 (T@U Int) T@U)
(declare-fun $generated@@39 (Int Int) Int)
(declare-fun $generated@@45 (T@T T@U) T@U)
(declare-fun $generated@@48 (T@U) Int)
(declare-fun $generated@@51 (T@U T@U T@U) Bool)
(declare-fun $generated@@52 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@63 (T@U T@U) Bool)
(declare-fun $generated@@73 (T@U) T@U)
(declare-fun $generated@@84 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@85 () T@T)
(declare-fun $generated@@86 () T@T)
(declare-fun $generated@@87 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@88 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@89 () T@T)
(declare-fun $generated@@90 (T@T T@T) T@T)
(declare-fun $generated@@91 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@92 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@93 (T@T) T@T)
(declare-fun $generated@@94 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (= ($generated@@19 $generated) $generated@@0))
(assert (= ($generated@@20 $generated@@21) 0))
(assert (forall (($generated@@23 T@U) ($generated@@24 Int) ) (!  (=> (= $generated@@24 0) (= ($generated@@22 $generated@@23 $generated@@24) $generated@@23))
 :pattern ( ($generated@@22 $generated@@23 $generated@@24))
)))
(assert (forall (($generated@@26 Int) ) (! (= ($generated@@25 $generated@@26) $generated@@26)
 :pattern ( ($generated@@25 $generated@@26))
)))
(assert (forall (($generated@@28 T@U) ($generated@@29 T@T) ) (! (= ($generated@@27 $generated@@29 $generated@@28) $generated@@28)
 :pattern ( ($generated@@27 $generated@@29 $generated@@28))
)))
(assert (= ($generated@@3 $generated@@33) 3))
(assert  (=> (<= 0 $generated@@30) (forall (($generated@@40 T@U) ($generated@@41 T@U) ($generated@@42 Int) ) (!  (=> (or ($generated@@34 ($generated@@27 $generated@@33 $generated@@41) ($generated@@25 $generated@@42)) (and (< 0 $generated@@30) (and ($generated@@35 $generated@@33 $generated@@41 ($generated@@36 $generated)) (<= ($generated@@25 2) ($generated@@25 $generated@@42))))) (and (=> (or (not (= ($generated@@20 ($generated@@27 $generated@@33 $generated@@41)) ($generated@@25 0))) (not true)) ($generated@@34 ($generated@@27 $generated@@33 ($generated@@22 ($generated@@27 $generated@@33 $generated@@41) ($generated@@25 1))) ($generated@@25 $generated@@42))) (= ($generated@@31 ($generated@@32 $generated@@40) ($generated@@27 $generated@@33 $generated@@41) ($generated@@25 $generated@@42)) (ite (= ($generated@@20 ($generated@@27 $generated@@33 $generated@@41)) ($generated@@25 0)) 0 (+ ($generated@@10 ($generated@@37 $generated@@5 ($generated@@38 ($generated@@27 $generated@@33 $generated@@41) ($generated@@25 0)))) ($generated@@39 ($generated@@25 $generated@@42) ($generated@@25 ($generated@@31 ($generated@@32 $generated@@40) ($generated@@27 $generated@@33 ($generated@@22 ($generated@@27 $generated@@33 $generated@@41) ($generated@@25 1))) ($generated@@25 $generated@@42)))))))))
 :weight 3
 :pattern ( ($generated@@31 ($generated@@32 $generated@@40) ($generated@@27 $generated@@33 $generated@@41) ($generated@@25 $generated@@42)))
))))
(assert (forall (($generated@@43 T@U) ($generated@@44 Int) ) (!  (=> (and (<= 0 $generated@@44) (<= $generated@@44 ($generated@@20 $generated@@43))) (= ($generated@@20 ($generated@@22 $generated@@43 $generated@@44)) (- ($generated@@20 $generated@@43) $generated@@44)))
 :pattern ( ($generated@@20 ($generated@@22 $generated@@43 $generated@@44)))
)))
(assert (forall (($generated@@46 T@U) ($generated@@47 T@T) ) (! (= ($generated@@45 $generated@@47 ($generated@@37 $generated@@47 $generated@@46)) $generated@@46)
 :pattern ( ($generated@@37 $generated@@47 $generated@@46))
)))
(assert (forall (($generated@@49 T@U) ($generated@@50 Int) ) (!  (=> (and (< 0 $generated@@50) (<= $generated@@50 ($generated@@20 $generated@@49))) (< ($generated@@48 ($generated@@22 $generated@@49 $generated@@50)) ($generated@@48 $generated@@49)))
 :pattern ( ($generated@@48 ($generated@@22 $generated@@49 $generated@@50)))
)))
(assert (forall (($generated@@53 T@U) ($generated@@54 T@U) ($generated@@55 T@U) ($generated@@56 T@T) ) (! (= ($generated@@51 ($generated@@45 $generated@@56 $generated@@53) $generated@@54 $generated@@55) ($generated@@52 $generated@@56 $generated@@53 $generated@@54 $generated@@55))
 :pattern ( ($generated@@51 ($generated@@45 $generated@@56 $generated@@53) $generated@@54 $generated@@55))
)))
(assert (forall (($generated@@57 T@U) ($generated@@58 Int) ($generated@@59 Int) ) (!  (=> (and (and (<= 0 $generated@@58) (<= 0 $generated@@59)) (< $generated@@59 (- ($generated@@20 $generated@@57) $generated@@58))) (= ($generated@@38 ($generated@@22 $generated@@57 $generated@@58) $generated@@59) ($generated@@38 $generated@@57 (+ $generated@@59 $generated@@58))))
 :weight 25
 :pattern ( ($generated@@38 ($generated@@22 $generated@@57 $generated@@58) $generated@@59))
)))
(assert (forall (($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 Int) ) (! (= ($generated@@31 ($generated@@32 $generated@@60) $generated@@61 $generated@@62) ($generated@@31 $generated@@60 $generated@@61 $generated@@62))
 :pattern ( ($generated@@31 ($generated@@32 $generated@@60) $generated@@61 $generated@@62))
)))
(assert (forall (($generated@@64 T@U) ) (!  (=> ($generated@@63 $generated@@64 $generated) (and (= ($generated@@45 $generated@@5 ($generated@@37 $generated@@5 $generated@@64)) $generated@@64) ($generated@@35 $generated@@5 ($generated@@37 $generated@@5 $generated@@64) $generated)))
 :pattern ( ($generated@@63 $generated@@64 $generated))
)))
(assert (forall (($generated@@65 T@U) ($generated@@66 T@U) ($generated@@67 T@T) ) (! (= ($generated@@63 ($generated@@45 $generated@@67 $generated@@65) $generated@@66) ($generated@@35 $generated@@67 $generated@@65 $generated@@66))
 :pattern ( ($generated@@63 ($generated@@45 $generated@@67 $generated@@65) $generated@@66))
)))
(assert (forall (($generated@@68 T@U) ) (! (<= 0 ($generated@@20 $generated@@68))
 :pattern ( ($generated@@20 $generated@@68))
)))
(assert (forall (($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@U) ) (! (= ($generated@@52 $generated@@33 $generated@@69 ($generated@@36 $generated@@70) $generated@@71) (forall (($generated@@72 Int) ) (!  (=> (and (<= 0 $generated@@72) (< $generated@@72 ($generated@@20 $generated@@69))) ($generated@@51 ($generated@@38 $generated@@69 $generated@@72) $generated@@70 $generated@@71))
 :pattern ( ($generated@@38 $generated@@69 $generated@@72))
)))
 :pattern ( ($generated@@52 $generated@@33 $generated@@69 ($generated@@36 $generated@@70) $generated@@71))
)))
(assert (forall (($generated@@74 T@U) ) (! (= ($generated@@73 ($generated@@36 $generated@@74)) $generated@@74)
 :pattern ( ($generated@@36 $generated@@74))
)))
(assert (forall (($generated@@75 T@U) ) (! (= ($generated@@19 ($generated@@36 $generated@@75)) $generated@@1)
 :pattern ( ($generated@@36 $generated@@75))
)))
(assert (forall (($generated@@76 T@U) ($generated@@77 T@T) ) (! (= ($generated@@37 $generated@@77 ($generated@@45 $generated@@77 $generated@@76)) $generated@@76)
 :pattern ( ($generated@@45 $generated@@77 $generated@@76))
)))
(assert  (=> (<= 0 $generated@@30) (forall (($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 Int) ) (!  (=> (or ($generated@@34 $generated@@79 $generated@@80) (and (< 0 $generated@@30) (and ($generated@@35 $generated@@33 $generated@@79 ($generated@@36 $generated)) (<= ($generated@@25 2) $generated@@80)))) (and (=> (or (not (= ($generated@@20 $generated@@79) ($generated@@25 0))) (not true)) ($generated@@34 ($generated@@22 $generated@@79 ($generated@@25 1)) $generated@@80)) (= ($generated@@31 ($generated@@32 $generated@@78) $generated@@79 $generated@@80) (ite (= ($generated@@20 $generated@@79) ($generated@@25 0)) 0 (+ ($generated@@10 ($generated@@37 $generated@@5 ($generated@@38 $generated@@79 ($generated@@25 0)))) ($generated@@39 $generated@@80 ($generated@@31 $generated@@78 ($generated@@22 $generated@@79 ($generated@@25 1)) $generated@@80)))))))
 :pattern ( ($generated@@31 ($generated@@32 $generated@@78) $generated@@79 $generated@@80))
))))
(assert  (=> (<= 0 $generated@@30) (forall (($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 Int) ) (!  (=> (or ($generated@@34 ($generated@@27 $generated@@33 $generated@@82) $generated@@83) (and (< 0 $generated@@30) (and ($generated@@35 $generated@@33 $generated@@82 ($generated@@36 $generated)) (<= ($generated@@25 2) $generated@@83)))) (and (=> (or (not (= ($generated@@20 ($generated@@27 $generated@@33 $generated@@82)) ($generated@@25 0))) (not true)) ($generated@@34 ($generated@@27 $generated@@33 ($generated@@22 ($generated@@27 $generated@@33 $generated@@82) ($generated@@25 1))) $generated@@83)) (= ($generated@@31 ($generated@@32 $generated@@81) ($generated@@27 $generated@@33 $generated@@82) $generated@@83) (ite (= ($generated@@20 ($generated@@27 $generated@@33 $generated@@82)) ($generated@@25 0)) 0 (+ ($generated@@10 ($generated@@37 $generated@@5 ($generated@@38 ($generated@@27 $generated@@33 $generated@@82) ($generated@@25 0)))) ($generated@@39 $generated@@83 ($generated@@31 ($generated@@32 $generated@@81) ($generated@@27 $generated@@33 ($generated@@22 ($generated@@27 $generated@@33 $generated@@82) ($generated@@25 1))) $generated@@83)))))))
 :weight 3
 :pattern ( ($generated@@31 ($generated@@32 $generated@@81) ($generated@@27 $generated@@33 $generated@@82) $generated@@83))
))))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@95 T@T) ($generated@@96 T@T) ($generated@@97 T@T) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ) (! (= ($generated@@84 $generated@@95 $generated@@96 $generated@@97 ($generated@@91 $generated@@95 $generated@@96 $generated@@97 $generated@@99 $generated@@100 $generated@@101 $generated@@98) $generated@@100 $generated@@101) $generated@@98)
 :weight 0
)) (and (forall (($generated@@102 T@T) ($generated@@103 T@T) ($generated@@104 T@T) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ) (!  (or (= $generated@@107 $generated@@109) (= ($generated@@84 $generated@@102 $generated@@103 $generated@@104 ($generated@@91 $generated@@102 $generated@@103 $generated@@104 $generated@@106 $generated@@107 $generated@@108 $generated@@105) $generated@@109 $generated@@110) ($generated@@84 $generated@@102 $generated@@103 $generated@@104 $generated@@106 $generated@@109 $generated@@110)))
 :weight 0
)) (forall (($generated@@111 T@T) ($generated@@112 T@T) ($generated@@113 T@T) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ) (!  (or (= $generated@@117 $generated@@119) (= ($generated@@84 $generated@@111 $generated@@112 $generated@@113 ($generated@@91 $generated@@111 $generated@@112 $generated@@113 $generated@@115 $generated@@116 $generated@@117 $generated@@114) $generated@@118 $generated@@119) ($generated@@84 $generated@@111 $generated@@112 $generated@@113 $generated@@115 $generated@@118 $generated@@119)))
 :weight 0
)))) (= ($generated@@3 $generated@@85) 4)) (= ($generated@@3 $generated@@86) 5)) (forall (($generated@@120 T@T) ($generated@@121 T@T) ($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ) (! (= ($generated@@88 $generated@@120 $generated@@121 ($generated@@92 $generated@@120 $generated@@121 $generated@@123 $generated@@124 $generated@@122) $generated@@124) $generated@@122)
 :weight 0
))) (forall (($generated@@125 T@T) ($generated@@126 T@T) ($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ) (!  (or (= $generated@@129 $generated@@130) (= ($generated@@88 $generated@@125 $generated@@126 ($generated@@92 $generated@@125 $generated@@126 $generated@@128 $generated@@129 $generated@@127) $generated@@130) ($generated@@88 $generated@@125 $generated@@126 $generated@@128 $generated@@130)))
 :weight 0
))) (= ($generated@@3 $generated@@89) 6)) (forall (($generated@@131 T@T) ($generated@@132 T@T) ) (= ($generated@@3 ($generated@@90 $generated@@131 $generated@@132)) 7))) (forall (($generated@@133 T@T) ($generated@@134 T@T) ) (! (= ($generated@@93 ($generated@@90 $generated@@133 $generated@@134)) $generated@@133)
 :pattern ( ($generated@@90 $generated@@133 $generated@@134))
))) (forall (($generated@@135 T@T) ($generated@@136 T@T) ) (! (= ($generated@@94 ($generated@@90 $generated@@135 $generated@@136)) $generated@@136)
 :pattern ( ($generated@@90 $generated@@135 $generated@@136))
))))
(assert (forall (($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ($generated@@140 Bool) ($generated@@141 T@U) ($generated@@142 T@U) ) (! (= ($generated@@8 ($generated@@84 $generated@@85 $generated@@86 $generated@@4 ($generated@@87 $generated@@137 $generated@@138 $generated@@139 $generated@@140) $generated@@141 $generated@@142))  (=> (and (or (not (= $generated@@141 $generated@@137)) (not true)) ($generated@@8 ($generated@@37 $generated@@4 ($generated@@88 $generated@@86 $generated@@89 ($generated@@88 $generated@@85 ($generated@@90 $generated@@86 $generated@@89) $generated@@138 $generated@@141) $generated@@139)))) $generated@@140))
 :pattern ( ($generated@@84 $generated@@85 $generated@@86 $generated@@4 ($generated@@87 $generated@@137 $generated@@138 $generated@@139 $generated@@140) $generated@@141 $generated@@142))
)))
(assert (forall (($generated@@143 Int) ($generated@@144 Int) ) (! (= ($generated@@39 $generated@@143 $generated@@144) (* $generated@@143 $generated@@144))
 :pattern ( ($generated@@39 $generated@@143 $generated@@144))
)))
(assert (forall (($generated@@145 T@U) ($generated@@146 T@U) ) (!  (=> ($generated@@63 $generated@@145 ($generated@@36 $generated@@146)) (and (= ($generated@@45 $generated@@33 ($generated@@37 $generated@@33 $generated@@145)) $generated@@145) ($generated@@35 $generated@@33 ($generated@@37 $generated@@33 $generated@@145) ($generated@@36 $generated@@146))))
 :pattern ( ($generated@@63 $generated@@145 ($generated@@36 $generated@@146)))
)))
(assert (forall (($generated@@147 T@U) ($generated@@148 Int) ($generated@@149 Int) ) (!  (=> (and (and (<= 0 $generated@@148) (<= $generated@@148 $generated@@149)) (< $generated@@149 ($generated@@20 $generated@@147))) (= ($generated@@38 ($generated@@22 $generated@@147 $generated@@148) (- $generated@@149 $generated@@148)) ($generated@@38 $generated@@147 $generated@@149)))
 :weight 25
 :pattern ( ($generated@@38 $generated@@147 $generated@@149) ($generated@@22 $generated@@147 $generated@@148))
)))
(assert (forall (($generated@@150 T@U) ($generated@@151 Int) ($generated@@152 Int) ) (!  (=> (and (and (<= 0 $generated@@151) (<= 0 $generated@@152)) (<= (+ $generated@@151 $generated@@152) ($generated@@20 $generated@@150))) (= ($generated@@22 ($generated@@22 $generated@@150 $generated@@151) $generated@@152) ($generated@@22 $generated@@150 (+ $generated@@151 $generated@@152))))
 :pattern ( ($generated@@22 ($generated@@22 $generated@@150 $generated@@151) $generated@@152))
)))
(assert (forall (($generated@@153 Int) ) (! (= ($generated@@45 $generated@@5 ($generated@@9 ($generated@@25 $generated@@153))) ($generated@@27 $generated@@89 ($generated@@45 $generated@@5 ($generated@@9 $generated@@153))))
 :pattern ( ($generated@@45 $generated@@5 ($generated@@9 ($generated@@25 $generated@@153))))
)))
(assert (forall (($generated@@154 T@U) ($generated@@155 T@T) ) (! (= ($generated@@45 $generated@@155 ($generated@@27 $generated@@155 $generated@@154)) ($generated@@27 $generated@@89 ($generated@@45 $generated@@155 $generated@@154)))
 :pattern ( ($generated@@45 $generated@@155 ($generated@@27 $generated@@155 $generated@@154)))
)))
(assert (forall (($generated@@156 T@U) ) (!  (=> (= ($generated@@20 $generated@@156) 0) (= $generated@@156 $generated@@21))
 :pattern ( ($generated@@20 $generated@@156))
)))
(assert (forall (($generated@@157 T@U) ($generated@@158 T@U) ) (! ($generated@@52 $generated@@5 $generated@@158 $generated $generated@@157)
 :pattern ( ($generated@@52 $generated@@5 $generated@@158 $generated $generated@@157))
)))
(assert (forall (($generated@@159 T@U) ($generated@@160 T@U) ) (! (= ($generated@@35 $generated@@33 $generated@@159 ($generated@@36 $generated@@160)) (forall (($generated@@161 Int) ) (!  (=> (and (<= 0 $generated@@161) (< $generated@@161 ($generated@@20 $generated@@159))) ($generated@@63 ($generated@@38 $generated@@159 $generated@@161) $generated@@160))
 :pattern ( ($generated@@38 $generated@@159 $generated@@161))
)))
 :pattern ( ($generated@@35 $generated@@33 $generated@@159 ($generated@@36 $generated@@160)))
)))
(assert (forall (($generated@@162 T@U) ) (! ($generated@@35 $generated@@5 $generated@@162 $generated)
 :pattern ( ($generated@@35 $generated@@5 $generated@@162 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@163 () T@U)
(declare-fun $generated@@164 () T@U)
(declare-fun $generated@@165 () T@U)
(declare-fun $generated@@166 () Int)
(declare-fun $generated@@167 () T@U)
(declare-fun $generated@@168 () T@U)
(declare-fun $generated@@169 (T@U) Bool)
(declare-fun $generated@@170 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 9) (let (($generated@@171  (=> (or (not (= ($generated@@20 $generated@@163) ($generated@@25 0))) (not true)) (and (=> (= (ControlFlow 0 4) (- 0 7)) (and (<= 0 ($generated@@25 0)) (< ($generated@@25 0) ($generated@@20 $generated@@163)))) (=> (and (<= 0 ($generated@@25 0)) (< ($generated@@25 0) ($generated@@20 $generated@@163))) (and (=> (= (ControlFlow 0 4) (- 0 6)) (and (<= 0 ($generated@@25 1)) (<= ($generated@@25 1) ($generated@@20 $generated@@163)))) (=> (and (<= 0 ($generated@@25 1)) (<= ($generated@@25 1) ($generated@@20 $generated@@163))) (=> (= $generated@@164 ($generated@@22 $generated@@163 ($generated@@25 1))) (=> (and ($generated@@52 $generated@@33 $generated@@164 ($generated@@36 $generated) $generated@@165) ($generated@@52 $generated@@5 ($generated@@9 $generated@@166) $generated $generated@@165)) (and (=> (= (ControlFlow 0 4) (- 0 5)) (<= ($generated@@25 2) $generated@@166)) (=> (and (<= ($generated@@25 2) $generated@@166) (= (ControlFlow 0 4) (- 0 3))) (< ($generated@@48 $generated@@164) ($generated@@48 $generated@@163)))))))))))))
(let (($generated@@172 true))
(let (($generated@@173 true))
(let (($generated@@174  (=> (and (= $generated@@167 ($generated@@87 $generated@@168 $generated@@165 $generated@@2 false)) (<= ($generated@@25 2) $generated@@166)) (and (and (=> (= (ControlFlow 0 8) 1) $generated@@173) (=> (= (ControlFlow 0 8) 2) $generated@@172)) (=> (= (ControlFlow 0 8) 4) $generated@@171)))))
(let (($generated@@175  (=> (and (and (and ($generated@@169 $generated@@165) ($generated@@170 $generated@@165)) ($generated@@35 $generated@@33 $generated@@163 ($generated@@36 $generated))) (and (= 0 $generated@@30) (= (ControlFlow 0 9) 8))) $generated@@174)))
$generated@@175))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
