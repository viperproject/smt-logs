(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () Int)
(declare-fun $generated@@0 (Bool Int Int) Int)
(declare-fun $generated@@1 (Int Int) Bool)
(declare-fun $generated@@2 (Int) Int)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@22 (T@U T@U) Bool)
(declare-fun $generated@@23 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@24 () T@T)
(declare-fun $generated@@25 () T@T)
(declare-fun $generated@@26 () T@T)
(declare-fun $generated@@27 (T@T T@T) T@T)
(declare-fun $generated@@28 () T@U)
(declare-fun $generated@@29 (T@T T@U) T@U)
(declare-fun $generated@@30 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@31 (T@T) T@T)
(declare-fun $generated@@32 (T@T) T@T)
(declare-fun $generated@@54 (T@T T@U) T@U)
(declare-fun $generated@@57 (T@T T@U) T@U)
(declare-fun $generated@@65 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@66 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@67 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert  (=> (<= 4 $generated) (forall (($generated@@19 Bool) ($generated@@20 Int) ($generated@@21 Int) ) (!  (=> (or ($generated@@1 $generated@@20 $generated@@21) (and (< 4 $generated) (and (<= ($generated@@2 1) $generated@@20) (<= ($generated@@2 1) $generated@@21)))) (<= ($generated@@2 1) ($generated@@0 $generated@@19 $generated@@20 $generated@@21)))
 :pattern ( ($generated@@0 $generated@@19 $generated@@20 $generated@@21))
))))
(assert  (and (and (and (and (and (and (and (forall (($generated@@33 T@T) ($generated@@34 T@T) ($generated@@35 T@U) ($generated@@36 T@U) ($generated@@37 T@U) ) (! (= ($generated@@23 $generated@@33 $generated@@34 ($generated@@30 $generated@@33 $generated@@34 $generated@@36 $generated@@37 $generated@@35) $generated@@37) $generated@@35)
 :weight 0
)) (forall (($generated@@38 T@T) ($generated@@39 T@T) ($generated@@40 T@U) ($generated@@41 T@U) ($generated@@42 T@U) ($generated@@43 T@U) ) (!  (or (= $generated@@42 $generated@@43) (= ($generated@@23 $generated@@38 $generated@@39 ($generated@@30 $generated@@38 $generated@@39 $generated@@41 $generated@@42 $generated@@40) $generated@@43) ($generated@@23 $generated@@38 $generated@@39 $generated@@41 $generated@@43)))
 :weight 0
))) (= ($generated@@3 $generated@@24) 3)) (= ($generated@@3 $generated@@25) 4)) (= ($generated@@3 $generated@@26) 5)) (forall (($generated@@44 T@T) ($generated@@45 T@T) ) (= ($generated@@3 ($generated@@27 $generated@@44 $generated@@45)) 6))) (forall (($generated@@46 T@T) ($generated@@47 T@T) ) (! (= ($generated@@31 ($generated@@27 $generated@@46 $generated@@47)) $generated@@46)
 :pattern ( ($generated@@27 $generated@@46 $generated@@47))
))) (forall (($generated@@48 T@T) ($generated@@49 T@T) ) (! (= ($generated@@32 ($generated@@27 $generated@@48 $generated@@49)) $generated@@49)
 :pattern ( ($generated@@27 $generated@@48 $generated@@49))
))))
(assert (forall (($generated@@50 T@U) ($generated@@51 T@U) ) (!  (=> ($generated@@22 $generated@@50 $generated@@51) (forall (($generated@@52 T@U) ) (!  (=> ($generated@@8 ($generated@@29 $generated@@4 ($generated@@23 $generated@@24 $generated@@25 ($generated@@23 $generated@@26 ($generated@@27 $generated@@24 $generated@@25) $generated@@50 $generated@@52) $generated@@28))) ($generated@@8 ($generated@@29 $generated@@4 ($generated@@23 $generated@@24 $generated@@25 ($generated@@23 $generated@@26 ($generated@@27 $generated@@24 $generated@@25) $generated@@51 $generated@@52) $generated@@28))))
 :pattern ( ($generated@@23 $generated@@24 $generated@@25 ($generated@@23 $generated@@26 ($generated@@27 $generated@@24 $generated@@25) $generated@@51 $generated@@52) $generated@@28))
)))
 :pattern ( ($generated@@22 $generated@@50 $generated@@51))
)))
(assert (forall (($generated@@53 Int) ) (! (= ($generated@@2 $generated@@53) $generated@@53)
 :pattern ( ($generated@@2 $generated@@53))
)))
(assert (forall (($generated@@55 T@U) ($generated@@56 T@T) ) (! (= ($generated@@54 $generated@@56 $generated@@55) $generated@@55)
 :pattern ( ($generated@@54 $generated@@56 $generated@@55))
)))
(assert (forall (($generated@@58 T@U) ($generated@@59 T@T) ) (! (= ($generated@@57 $generated@@59 ($generated@@29 $generated@@59 $generated@@58)) $generated@@58)
 :pattern ( ($generated@@29 $generated@@59 $generated@@58))
)))
(assert (forall (($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@U) ) (!  (=> (or (not (= $generated@@60 $generated@@62)) (not true)) (=> (and ($generated@@22 $generated@@60 $generated@@61) ($generated@@22 $generated@@61 $generated@@62)) ($generated@@22 $generated@@60 $generated@@62)))
 :pattern ( ($generated@@22 $generated@@60 $generated@@61) ($generated@@22 $generated@@61 $generated@@62))
)))
(assert (forall (($generated@@63 T@U) ($generated@@64 T@T) ) (! (= ($generated@@29 $generated@@64 ($generated@@57 $generated@@64 $generated@@63)) $generated@@63)
 :pattern ( ($generated@@57 $generated@@64 $generated@@63))
)))
(assert  (and (forall (($generated@@68 T@T) ($generated@@69 T@T) ($generated@@70 T@T) ($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@U) ) (! (= ($generated@@65 $generated@@68 $generated@@69 $generated@@70 ($generated@@67 $generated@@68 $generated@@69 $generated@@70 $generated@@72 $generated@@73 $generated@@74 $generated@@71) $generated@@73 $generated@@74) $generated@@71)
 :weight 0
)) (and (forall (($generated@@75 T@T) ($generated@@76 T@T) ($generated@@77 T@T) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ) (!  (or (= $generated@@80 $generated@@82) (= ($generated@@65 $generated@@75 $generated@@76 $generated@@77 ($generated@@67 $generated@@75 $generated@@76 $generated@@77 $generated@@79 $generated@@80 $generated@@81 $generated@@78) $generated@@82 $generated@@83) ($generated@@65 $generated@@75 $generated@@76 $generated@@77 $generated@@79 $generated@@82 $generated@@83)))
 :weight 0
)) (forall (($generated@@84 T@T) ($generated@@85 T@T) ($generated@@86 T@T) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ) (!  (or (= $generated@@90 $generated@@92) (= ($generated@@65 $generated@@84 $generated@@85 $generated@@86 ($generated@@67 $generated@@84 $generated@@85 $generated@@86 $generated@@88 $generated@@89 $generated@@90 $generated@@87) $generated@@91 $generated@@92) ($generated@@65 $generated@@84 $generated@@85 $generated@@86 $generated@@88 $generated@@91 $generated@@92)))
 :weight 0
)))))
(assert (forall (($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 Bool) ($generated@@97 T@U) ($generated@@98 T@U) ) (! (= ($generated@@8 ($generated@@65 $generated@@26 $generated@@24 $generated@@4 ($generated@@66 $generated@@93 $generated@@94 $generated@@95 $generated@@96) $generated@@97 $generated@@98))  (=> (and (or (not (= $generated@@97 $generated@@93)) (not true)) ($generated@@8 ($generated@@29 $generated@@4 ($generated@@23 $generated@@24 $generated@@25 ($generated@@23 $generated@@26 ($generated@@27 $generated@@24 $generated@@25) $generated@@94 $generated@@97) $generated@@95)))) $generated@@96))
 :pattern ( ($generated@@65 $generated@@26 $generated@@24 $generated@@4 ($generated@@66 $generated@@93 $generated@@94 $generated@@95 $generated@@96) $generated@@97 $generated@@98))
)))
(assert (forall (($generated@@99 Int) ) (! (= ($generated@@57 $generated@@5 ($generated@@9 ($generated@@2 $generated@@99))) ($generated@@54 $generated@@25 ($generated@@57 $generated@@5 ($generated@@9 $generated@@99))))
 :pattern ( ($generated@@57 $generated@@5 ($generated@@9 ($generated@@2 $generated@@99))))
)))
(assert (forall (($generated@@100 T@U) ($generated@@101 T@T) ) (! (= ($generated@@57 $generated@@101 ($generated@@54 $generated@@101 $generated@@100)) ($generated@@54 $generated@@25 ($generated@@57 $generated@@101 $generated@@100)))
 :pattern ( ($generated@@57 $generated@@101 ($generated@@54 $generated@@101 $generated@@100)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 2) true)
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
