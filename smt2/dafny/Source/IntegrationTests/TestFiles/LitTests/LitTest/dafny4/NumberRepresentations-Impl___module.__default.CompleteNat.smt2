(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagSeq () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._System.nat () T@U)
(declare-fun tytagFamily$nat () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass._System.nat () T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun |Seq#Empty| () T@U)
(declare-fun |Seq#Drop| (T@U Int) T@U)
(declare-fun |Seq#Build| (T@U T@U) T@U)
(declare-fun |Seq#Take| (T@U Int) T@U)
(declare-fun |Seq#Append| (T@U T@U) T@U)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun SeqType () T@T)
(declare-fun TSeq (T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.eval (T@U T@U Int) Int)
(declare-fun $LS (T@U) T@U)
(declare-fun |_module.__default.eval#canCall| (T@U Int) Bool)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun Mul (Int Int) Int)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun Div (Int Int) Int)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun _module.__default.IsSkewNumber (T@U Int Int) Bool)
(declare-fun |_module.__default.IsSkewNumber#canCall| (T@U Int Int) Bool)
(declare-fun Mod (Int Int) Int)
(declare-fun |Seq#Build_inv0| (T@U) T@U)
(declare-fun |Seq#Build_inv1| (T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt TagSeq alloc Tagclass._System.nat tytagFamily$nat)
)
(assert (= (Tag TInt) TagInt))
(assert (forall ((|x#0| T@U) ($h T@U) ) (! ($IsAlloc intType |x#0| Tclass._System.nat $h)
 :pattern ( ($IsAlloc intType |x#0| Tclass._System.nat $h))
)))
(assert (= (|Seq#Length| |Seq#Empty|) 0))
(assert (forall ((s T@U) (v T@U) (n Int) ) (!  (=> (and (<= 0 n) (<= n (|Seq#Length| s))) (= (|Seq#Drop| (|Seq#Build| s v) n) (|Seq#Build| (|Seq#Drop| s n) v)))
 :pattern ( (|Seq#Drop| (|Seq#Build| s v) n))
)))
(assert (forall ((s@@0 T@U) (t T@U) (n@@0 Int) ) (!  (=> (= n@@0 (|Seq#Length| s@@0)) (and (= (|Seq#Take| (|Seq#Append| s@@0 t) n@@0) s@@0) (= (|Seq#Drop| (|Seq#Append| s@@0 t) n@@0) t)))
 :pattern ( (|Seq#Take| (|Seq#Append| s@@0 t) n@@0))
 :pattern ( (|Seq#Drop| (|Seq#Append| s@@0 t) n@@0))
)))
(assert (forall ((s@@1 T@U) (n@@1 Int) ) (!  (=> (= n@@1 0) (= (|Seq#Drop| s@@1 n@@1) s@@1))
 :pattern ( (|Seq#Drop| s@@1 n@@1))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (= (Ctor SeqType) 3))
(assert (forall ((s@@2 T@U) (bx T@U) (t@@0 T@U) ) (!  (=> (and ($Is SeqType s@@2 (TSeq t@@0)) ($IsBox bx t@@0)) ($Is SeqType (|Seq#Build| s@@2 bx) (TSeq t@@0)))
 :pattern ( ($Is SeqType (|Seq#Build| s@@2 bx) (TSeq t@@0)))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($ly T@U) (|digits#0| T@U) (|base#0| Int) ) (!  (=> (or (|_module.__default.eval#canCall| (Lit SeqType |digits#0|) (LitInt |base#0|)) (and (< 0 $FunctionContextHeight) (and ($Is SeqType |digits#0| (TSeq TInt)) (<= (LitInt 2) (LitInt |base#0|))))) (and (=> (or (not (= (|Seq#Length| (Lit SeqType |digits#0|)) (LitInt 0))) (not true)) (|_module.__default.eval#canCall| (Lit SeqType (|Seq#Drop| (Lit SeqType |digits#0|) (LitInt 1))) (LitInt |base#0|))) (= (_module.__default.eval ($LS $ly) (Lit SeqType |digits#0|) (LitInt |base#0|)) (ite (= (|Seq#Length| (Lit SeqType |digits#0|)) (LitInt 0)) 0 (+ (U_2_int ($Unbox intType (|Seq#Index| (Lit SeqType |digits#0|) (LitInt 0)))) (Mul (LitInt |base#0|) (LitInt (_module.__default.eval ($LS $ly) (Lit SeqType (|Seq#Drop| (Lit SeqType |digits#0|) (LitInt 1))) (LitInt |base#0|)))))))))
 :weight 3
 :pattern ( (_module.__default.eval ($LS $ly) (Lit SeqType |digits#0|) (LitInt |base#0|)))
))))
(assert (forall ((s@@3 T@U) (n@@2 Int) (j Int) ) (!  (=> (and (and (<= 0 j) (< j n@@2)) (< j (|Seq#Length| s@@3))) (= (|Seq#Index| (|Seq#Take| s@@3 n@@2) j) (|Seq#Index| s@@3 j)))
 :weight 25
 :pattern ( (|Seq#Index| (|Seq#Take| s@@3 n@@2) j))
 :pattern ( (|Seq#Index| s@@3 j) (|Seq#Take| s@@3 n@@2))
)))
(assert (forall ((s@@4 T@U) (n@@3 Int) ) (!  (=> (and (<= 0 n@@3) (<= n@@3 (|Seq#Length| s@@4))) (= (|Seq#Length| (|Seq#Drop| s@@4 n@@3)) (- (|Seq#Length| s@@4) n@@3)))
 :pattern ( (|Seq#Length| (|Seq#Drop| s@@4 n@@3)))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((|x#0@@0| T@U) ) (! (= ($Is intType |x#0@@0| Tclass._System.nat) (<= (LitInt 0) (U_2_int |x#0@@0|)))
 :pattern ( ($Is intType |x#0@@0| Tclass._System.nat))
)))
(assert (forall ((s@@5 T@U) (v@@0 T@U) ) (! (= (|Seq#Length| (|Seq#Build| s@@5 v@@0)) (+ 1 (|Seq#Length| s@@5)))
 :pattern ( (|Seq#Build| s@@5 v@@0))
)))
(assert (forall ((v@@1 T@U) (t@@1 T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@1) t@@1 h) ($IsAlloc T@@1 v@@1 t@@1 h))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@1) t@@1 h))
)))
(assert (forall ((s@@6 T@U) (n@@4 Int) (j@@0 Int) ) (!  (=> (and (and (<= 0 n@@4) (<= 0 j@@0)) (< j@@0 (- (|Seq#Length| s@@6) n@@4))) (= (|Seq#Index| (|Seq#Drop| s@@6 n@@4) j@@0) (|Seq#Index| s@@6 (+ j@@0 n@@4))))
 :weight 25
 :pattern ( (|Seq#Index| (|Seq#Drop| s@@6 n@@4) j@@0))
)))
(assert (forall ((s0 T@U) (s1 T@U) ) (! (= (|Seq#Length| (|Seq#Append| s0 s1)) (+ (|Seq#Length| s0) (|Seq#Length| s1)))
 :pattern ( (|Seq#Length| (|Seq#Append| s0 s1)))
)))
(assert (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 Tclass._System.nat) (and (= ($Box intType ($Unbox intType bx@@0)) bx@@0) ($Is intType ($Unbox intType bx@@0) Tclass._System.nat)))
 :pattern ( ($IsBox bx@@0 Tclass._System.nat))
)))
(assert (forall ((s@@7 T@U) (i Int) (v@@2 T@U) ) (!  (and (=> (= i (|Seq#Length| s@@7)) (= (|Seq#Index| (|Seq#Build| s@@7 v@@2) i) v@@2)) (=> (or (not (= i (|Seq#Length| s@@7))) (not true)) (= (|Seq#Index| (|Seq#Build| s@@7 v@@2) i) (|Seq#Index| s@@7 i))))
 :pattern ( (|Seq#Index| (|Seq#Build| s@@7 v@@2) i))
)))
(assert (forall (($ly@@0 T@U) (|digits#0@@0| T@U) (|base#0@@0| Int) ) (! (= (_module.__default.eval ($LS $ly@@0) |digits#0@@0| |base#0@@0|) (_module.__default.eval $ly@@0 |digits#0@@0| |base#0@@0|))
 :pattern ( (_module.__default.eval ($LS $ly@@0) |digits#0@@0| |base#0@@0|))
)))
(assert (forall ((x@@5 Int) (y Int) ) (! (= (Div x@@5 y) (div x@@5 y))
 :pattern ( (Div x@@5 y))
)))
(assert (forall ((s@@8 T@U) (n@@5 Int) ) (!  (=> (and (<= 0 n@@5) (<= n@@5 (|Seq#Length| s@@8))) (= (|Seq#Length| (|Seq#Take| s@@8 n@@5)) n@@5))
 :pattern ( (|Seq#Length| (|Seq#Take| s@@8 n@@5)))
)))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 TInt) (and (= ($Box intType ($Unbox intType bx@@1)) bx@@1) ($Is intType ($Unbox intType bx@@1) TInt)))
 :pattern ( ($IsBox bx@@1 TInt))
)))
(assert (forall ((v@@3 T@U) (t@@2 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@3) t@@2) ($Is T@@2 v@@3 t@@2))
 :pattern ( ($IsBox ($Box T@@2 v@@3) t@@2))
)))
(assert (forall ((s@@9 T@U) ) (! (<= 0 (|Seq#Length| s@@9))
 :pattern ( (|Seq#Length| s@@9))
)))
(assert (forall ((v@@4 T@U) (t0 T@U) (h@@0 T@U) ) (! (= ($IsAlloc SeqType v@@4 (TSeq t0) h@@0) (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| v@@4))) ($IsAllocBox (|Seq#Index| v@@4 i@@0) t0 h@@0))
 :pattern ( (|Seq#Index| v@@4 i@@0))
)))
 :pattern ( ($IsAlloc SeqType v@@4 (TSeq t0) h@@0))
)))
(assert (forall ((t@@3 T@U) ) (! (= (Inv0_TSeq (TSeq t@@3)) t@@3)
 :pattern ( (TSeq t@@3))
)))
(assert (forall ((t@@4 T@U) ) (! (= (Tag (TSeq t@@4)) TagSeq)
 :pattern ( (TSeq t@@4))
)))
(assert (forall ((x@@6 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@6)) x@@6)
 :pattern ( ($Box T@@3 x@@6))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($ly@@1 T@U) (|digits#0@@1| T@U) (|base#0@@1| Int) ) (!  (=> (or (|_module.__default.eval#canCall| |digits#0@@1| |base#0@@1|) (and (< 0 $FunctionContextHeight) (and ($Is SeqType |digits#0@@1| (TSeq TInt)) (<= (LitInt 2) |base#0@@1|)))) (and (=> (or (not (= (|Seq#Length| |digits#0@@1|) (LitInt 0))) (not true)) (|_module.__default.eval#canCall| (|Seq#Drop| |digits#0@@1| (LitInt 1)) |base#0@@1|)) (= (_module.__default.eval ($LS $ly@@1) |digits#0@@1| |base#0@@1|) (ite (= (|Seq#Length| |digits#0@@1|) (LitInt 0)) 0 (+ (U_2_int ($Unbox intType (|Seq#Index| |digits#0@@1| (LitInt 0)))) (Mul |base#0@@1| (_module.__default.eval $ly@@1 (|Seq#Drop| |digits#0@@1| (LitInt 1)) |base#0@@1|)))))))
 :pattern ( (_module.__default.eval ($LS $ly@@1) |digits#0@@1| |base#0@@1|))
))))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($ly@@2 T@U) (|digits#0@@2| T@U) (|base#0@@2| Int) ) (!  (=> (or (|_module.__default.eval#canCall| (Lit SeqType |digits#0@@2|) |base#0@@2|) (and (< 0 $FunctionContextHeight) (and ($Is SeqType |digits#0@@2| (TSeq TInt)) (<= (LitInt 2) |base#0@@2|)))) (and (=> (or (not (= (|Seq#Length| (Lit SeqType |digits#0@@2|)) (LitInt 0))) (not true)) (|_module.__default.eval#canCall| (Lit SeqType (|Seq#Drop| (Lit SeqType |digits#0@@2|) (LitInt 1))) |base#0@@2|)) (= (_module.__default.eval ($LS $ly@@2) (Lit SeqType |digits#0@@2|) |base#0@@2|) (ite (= (|Seq#Length| (Lit SeqType |digits#0@@2|)) (LitInt 0)) 0 (+ (U_2_int ($Unbox intType (|Seq#Index| (Lit SeqType |digits#0@@2|) (LitInt 0)))) (Mul |base#0@@2| (_module.__default.eval ($LS $ly@@2) (Lit SeqType (|Seq#Drop| (Lit SeqType |digits#0@@2|) (LitInt 1))) |base#0@@2|)))))))
 :weight 3
 :pattern ( (_module.__default.eval ($LS $ly@@2) (Lit SeqType |digits#0@@2|) |base#0@@2|))
))))
(assert  (and (and (and (and (and (and (and (and (and (forall ((t0@@0 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0@@0 t1 t2 (MapType0Store t0@@0 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 4)) (= (Ctor FieldType) 5)) (forall ((t0@@1 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@1 t1@@0 (MapType1Store t0@@1 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :weight 0
))) (= (Ctor BoxType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|digits#0@@3| T@U) (|lowDigit#0| Int) (|base#0@@3| Int) ) (!  (=> (or (|_module.__default.IsSkewNumber#canCall| |digits#0@@3| |lowDigit#0| |base#0@@3|) (and (< 0 $FunctionContextHeight) ($Is SeqType |digits#0@@3| (TSeq TInt)))) (= (_module.__default.IsSkewNumber |digits#0@@3| |lowDigit#0| |base#0@@3|)  (and (and (<= (LitInt 2) |base#0@@3|) (and (<= |lowDigit#0| (LitInt 0)) (< 0 (+ |lowDigit#0| |base#0@@3|)))) (forall ((|i#0| Int) ) (!  (and (=> (and (<= (LitInt 0) |i#0|) (< |i#0| (|Seq#Length| |digits#0@@3|))) (<= |lowDigit#0| (U_2_int ($Unbox intType (|Seq#Index| |digits#0@@3| |i#0|))))) (=> (and (<= (LitInt 0) |i#0|) (< |i#0| (|Seq#Length| |digits#0@@3|))) (< (U_2_int ($Unbox intType (|Seq#Index| |digits#0@@3| |i#0|))) (+ |lowDigit#0| |base#0@@3|))))
 :pattern ( ($Unbox intType (|Seq#Index| |digits#0@@3| |i#0|)))
)))))
 :pattern ( (_module.__default.IsSkewNumber |digits#0@@3| |lowDigit#0| |base#0@@3|))
))))
(assert (forall ((x@@7 Int) (y@@0 Int) ) (! (= (Mod x@@7 y@@0) (mod x@@7 y@@0))
 :pattern ( (Mod x@@7 y@@0))
)))
(assert (forall ((s@@10 T@U) (val@@4 T@U) ) (!  (and (= (|Seq#Build_inv0| (|Seq#Build| s@@10 val@@4)) s@@10) (= (|Seq#Build_inv1| (|Seq#Build| s@@10 val@@4)) val@@4))
 :pattern ( (|Seq#Build| s@@10 val@@4))
)))
(assert (forall ((x@@8 Int) (y@@1 Int) ) (! (= (Mul x@@8 y@@1) (* x@@8 y@@1))
 :pattern ( (Mul x@@8 y@@1))
)))
(assert (forall ((bx@@2 T@U) (t@@5 T@U) ) (!  (=> ($IsBox bx@@2 (TSeq t@@5)) (and (= ($Box SeqType ($Unbox SeqType bx@@2)) bx@@2) ($Is SeqType ($Unbox SeqType bx@@2) (TSeq t@@5))))
 :pattern ( ($IsBox bx@@2 (TSeq t@@5)))
)))
(assert (= (Tag Tclass._System.nat) Tagclass._System.nat))
(assert (= (TagFamily Tclass._System.nat) tytagFamily$nat))
(assert (forall ((s@@11 T@U) (n@@6 Int) (k Int) ) (!  (=> (and (and (<= 0 n@@6) (<= n@@6 k)) (< k (|Seq#Length| s@@11))) (= (|Seq#Index| (|Seq#Drop| s@@11 n@@6) (- k n@@6)) (|Seq#Index| s@@11 k)))
 :weight 25
 :pattern ( (|Seq#Index| s@@11 k) (|Seq#Drop| s@@11 n@@6))
)))
(assert (forall ((s@@12 T@U) (m@@4 Int) (n@@7 Int) ) (!  (=> (and (and (<= 0 m@@4) (<= 0 n@@7)) (<= (+ m@@4 n@@7) (|Seq#Length| s@@12))) (= (|Seq#Drop| (|Seq#Drop| s@@12 m@@4) n@@7) (|Seq#Drop| s@@12 (+ m@@4 n@@7))))
 :pattern ( (|Seq#Drop| (|Seq#Drop| s@@12 m@@4) n@@7))
)))
(assert (forall ((s0@@0 T@U) (s1@@0 T@U) (n@@8 Int) ) (!  (and (=> (< n@@8 (|Seq#Length| s0@@0)) (= (|Seq#Index| (|Seq#Append| s0@@0 s1@@0) n@@8) (|Seq#Index| s0@@0 n@@8))) (=> (<= (|Seq#Length| s0@@0) n@@8) (= (|Seq#Index| (|Seq#Append| s0@@0 s1@@0) n@@8) (|Seq#Index| s1@@0 (- n@@8 (|Seq#Length| s0@@0))))))
 :pattern ( (|Seq#Index| (|Seq#Append| s0@@0 s1@@0) n@@8))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|digits#0@@4| T@U) (|lowDigit#0@@0| Int) (|base#0@@4| Int) ) (!  (=> (or (|_module.__default.IsSkewNumber#canCall| (Lit SeqType |digits#0@@4|) (LitInt |lowDigit#0@@0|) (LitInt |base#0@@4|)) (and (< 0 $FunctionContextHeight) ($Is SeqType |digits#0@@4| (TSeq TInt)))) (= (_module.__default.IsSkewNumber (Lit SeqType |digits#0@@4|) (LitInt |lowDigit#0@@0|) (LitInt |base#0@@4|))  (and (and (<= (LitInt 2) (LitInt |base#0@@4|)) (and (<= (LitInt |lowDigit#0@@0|) (LitInt 0)) (< 0 (+ |lowDigit#0@@0| |base#0@@4|)))) (forall ((|i#1| Int) ) (!  (and (=> (and (<= (LitInt 0) |i#1|) (< |i#1| (|Seq#Length| (Lit SeqType |digits#0@@4|)))) (<= (LitInt |lowDigit#0@@0|) (U_2_int ($Unbox intType (|Seq#Index| (Lit SeqType |digits#0@@4|) |i#1|))))) (=> (and (<= (LitInt 0) |i#1|) (< |i#1| (|Seq#Length| (Lit SeqType |digits#0@@4|)))) (< (U_2_int ($Unbox intType (|Seq#Index| (Lit SeqType |digits#0@@4|) |i#1|))) (+ |lowDigit#0@@0| |base#0@@4|))))
 :pattern ( ($Unbox intType (|Seq#Index| |digits#0@@4| |i#1|)))
)))))
 :weight 3
 :pattern ( (_module.__default.IsSkewNumber (Lit SeqType |digits#0@@4|) (LitInt |lowDigit#0@@0|) (LitInt |base#0@@4|)))
))))
(assert (forall ((x@@9 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@9))) (Lit BoxType ($Box intType (int_2_U x@@9))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@9))))
)))
(assert (forall ((x@@10 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@10)) (Lit BoxType ($Box T@@4 x@@10)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@10)))
)))
(assert (forall ((s@@13 T@U) ) (!  (=> (= (|Seq#Length| s@@13) 0) (= s@@13 |Seq#Empty|))
 :pattern ( (|Seq#Length| s@@13))
)))
(assert (forall ((s@@14 T@U) (n@@9 Int) ) (!  (=> (= n@@9 0) (= (|Seq#Take| s@@14 n@@9) |Seq#Empty|))
 :pattern ( (|Seq#Take| s@@14 n@@9))
)))
(assert (forall ((h@@1 T@U) (v@@5 T@U) ) (! ($IsAlloc intType v@@5 TInt h@@1)
 :pattern ( ($IsAlloc intType v@@5 TInt h@@1))
)))
(assert (forall ((v@@6 T@U) (t0@@2 T@U) ) (! (= ($Is SeqType v@@6 (TSeq t0@@2)) (forall ((i@@1 Int) ) (!  (=> (and (<= 0 i@@1) (< i@@1 (|Seq#Length| v@@6))) ($IsBox (|Seq#Index| v@@6 i@@1) t0@@2))
 :pattern ( (|Seq#Index| v@@6 i@@1))
)))
 :pattern ( ($Is SeqType v@@6 (TSeq t0@@2)))
)))
(assert (forall ((v@@7 T@U) ) (! ($Is intType v@@7 TInt)
 :pattern ( ($Is intType v@@7 TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |digits#0@2| () T@U)
(declare-fun |base#0@@5| () Int)
(declare-fun $LZ () T@U)
(declare-fun |n#0| () Int)
(declare-fun |$rhs#1_0@0| () Int)
(declare-fun |$rhs#1_1@0| () Int)
(declare-fun |call3formal@digits#0| () T@U)
(declare-fun $Heap () T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $Heap@1 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |call3formal@digits#0@0| () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun |digits#0@1| () T@U)
(declare-fun |digits#0@0| () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun |digits#0@@5| () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 26) (let ((GeneratedUnifiedExit_correct  (and (=> (= (ControlFlow 0 2) (- 0 6)) (=> (|_module.__default.IsSkewNumber#canCall| |digits#0@2| (LitInt 0) |base#0@@5|) (or (_module.__default.IsSkewNumber |digits#0@2| (LitInt 0) |base#0@@5|) (<= (LitInt 2) |base#0@@5|)))) (=> (=> (|_module.__default.IsSkewNumber#canCall| |digits#0@2| (LitInt 0) |base#0@@5|) (or (_module.__default.IsSkewNumber |digits#0@2| (LitInt 0) |base#0@@5|) (<= (LitInt 2) |base#0@@5|))) (and (=> (= (ControlFlow 0 2) (- 0 5)) (=> (|_module.__default.IsSkewNumber#canCall| |digits#0@2| (LitInt 0) |base#0@@5|) (or (_module.__default.IsSkewNumber |digits#0@2| (LitInt 0) |base#0@@5|) (<= (LitInt 0) (LitInt 0))))) (=> (=> (|_module.__default.IsSkewNumber#canCall| |digits#0@2| (LitInt 0) |base#0@@5|) (or (_module.__default.IsSkewNumber |digits#0@2| (LitInt 0) |base#0@@5|) (<= (LitInt 0) (LitInt 0)))) (and (=> (= (ControlFlow 0 2) (- 0 4)) (=> (|_module.__default.IsSkewNumber#canCall| |digits#0@2| (LitInt 0) |base#0@@5|) (or (_module.__default.IsSkewNumber |digits#0@2| (LitInt 0) |base#0@@5|) (< 0 (+ 0 |base#0@@5|))))) (=> (=> (|_module.__default.IsSkewNumber#canCall| |digits#0@2| (LitInt 0) |base#0@@5|) (or (_module.__default.IsSkewNumber |digits#0@2| (LitInt 0) |base#0@@5|) (< 0 (+ 0 |base#0@@5|)))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (=> (|_module.__default.IsSkewNumber#canCall| |digits#0@2| (LitInt 0) |base#0@@5|) (or (_module.__default.IsSkewNumber |digits#0@2| (LitInt 0) |base#0@@5|) (forall ((|i#1@@0| Int) ) (!  (and (=> (and (<= (LitInt 0) |i#1@@0|) (< |i#1@@0| (|Seq#Length| |digits#0@2|))) (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| |digits#0@2| |i#1@@0|))))) (=> (and (<= (LitInt 0) |i#1@@0|) (< |i#1@@0| (|Seq#Length| |digits#0@2|))) (< (U_2_int ($Unbox intType (|Seq#Index| |digits#0@2| |i#1@@0|))) (+ 0 |base#0@@5|))))
 :pattern ( ($Unbox intType (|Seq#Index| |digits#0@2| |i#1@@0|)))
))))) (=> (=> (|_module.__default.IsSkewNumber#canCall| |digits#0@2| (LitInt 0) |base#0@@5|) (or (_module.__default.IsSkewNumber |digits#0@2| (LitInt 0) |base#0@@5|) (forall ((|i#1@@1| Int) ) (!  (and (=> (and (<= (LitInt 0) |i#1@@1|) (< |i#1@@1| (|Seq#Length| |digits#0@2|))) (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| |digits#0@2| |i#1@@1|))))) (=> (and (<= (LitInt 0) |i#1@@1|) (< |i#1@@1| (|Seq#Length| |digits#0@2|))) (< (U_2_int ($Unbox intType (|Seq#Index| |digits#0@2| |i#1@@1|))) (+ 0 |base#0@@5|))))
 :pattern ( ($Unbox intType (|Seq#Index| |digits#0@2| |i#1@@1|)))
)))) (=> (= (ControlFlow 0 2) (- 0 1)) (= (_module.__default.eval ($LS ($LS $LZ)) |digits#0@2| |base#0@@5|) |n#0|))))))))))))
(let ((anon4_correct  (and (=> (= (ControlFlow 0 8) (- 0 15)) (< |$rhs#1_0@0| |n#0|)) (and (=> (= (ControlFlow 0 8) (- 0 14)) (<= (LitInt 0) |$rhs#1_1@0|)) (=> (and (< |$rhs#1_0@0| |n#0|) (<= (LitInt 0) |$rhs#1_1@0|)) (and (=> (= (ControlFlow 0 8) (- 0 13)) ($Is intType (int_2_U |$rhs#1_0@0|) Tclass._System.nat)) (=> ($Is intType (int_2_U |$rhs#1_0@0|) Tclass._System.nat) (and (=> (= (ControlFlow 0 8) (- 0 12)) (or (<= 0 |n#0|) (= |$rhs#1_0@0| |n#0|))) (=> (or (<= 0 |n#0|) (= |$rhs#1_0@0| |n#0|)) (and (=> (= (ControlFlow 0 8) (- 0 11)) (or (or (<= 0 |base#0@@5|) (< |$rhs#1_0@0| |n#0|)) (= |base#0@@5| |base#0@@5|))) (=> (or (or (<= 0 |base#0@@5|) (< |$rhs#1_0@0| |n#0|)) (= |base#0@@5| |base#0@@5|)) (and (=> (= (ControlFlow 0 8) (- 0 10)) (or (< |$rhs#1_0@0| |n#0|) (and (= |$rhs#1_0@0| |n#0|) (< |base#0@@5| |base#0@@5|)))) (=> (or (< |$rhs#1_0@0| |n#0|) (and (= |$rhs#1_0@0| |n#0|) (< |base#0@@5| |base#0@@5|))) (=> (and ($Is SeqType |call3formal@digits#0| (TSeq TInt)) ($IsAlloc SeqType |call3formal@digits#0| (TSeq TInt) $Heap)) (and (=> (= (ControlFlow 0 8) (- 0 9)) (<= (LitInt 2) |base#0@@5|)) (=> (<= (LitInt 2) |base#0@@5|) (=> (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1)) (=> (and (and ($Is SeqType |call3formal@digits#0@0| (TSeq TInt)) ($IsAlloc SeqType |call3formal@digits#0@0| (TSeq TInt) $Heap@1)) (and (|_module.__default.IsSkewNumber#canCall| |call3formal@digits#0@0| (LitInt 0) |base#0@@5|) (=> (_module.__default.IsSkewNumber |call3formal@digits#0@0| (LitInt 0) |base#0@@5|) (|_module.__default.eval#canCall| |call3formal@digits#0@0| |base#0@@5|)))) (=> (and (and (and (|_module.__default.IsSkewNumber#canCall| |call3formal@digits#0@0| (LitInt 0) |base#0@@5|) (and (_module.__default.IsSkewNumber |call3formal@digits#0@0| (LitInt 0) |base#0@@5|) (and (and (<= (LitInt 2) |base#0@@5|) (and (<= (LitInt 0) (LitInt 0)) (< 0 (+ 0 |base#0@@5|)))) (forall ((|i#0@@0| Int) ) (!  (and (=> (and (<= (LitInt 0) |i#0@@0|) (< |i#0@@0| (|Seq#Length| |call3formal@digits#0@0|))) (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| |call3formal@digits#0@0| |i#0@@0|))))) (=> (and (<= (LitInt 0) |i#0@@0|) (< |i#0@@0| (|Seq#Length| |call3formal@digits#0@0|))) (< (U_2_int ($Unbox intType (|Seq#Index| |call3formal@digits#0@0| |i#0@@0|))) (+ 0 |base#0@@5|))))
 :pattern ( ($Unbox intType (|Seq#Index| |call3formal@digits#0@0| |i#0@@0|)))
))))) (= (_module.__default.eval ($LS ($LS $LZ)) |call3formal@digits#0@0| |base#0@@5|) |$rhs#1_0@0|)) (and (and (= $Heap@0 $Heap@1) (= |digits#0@1| (|Seq#Append| (|Seq#Build| |Seq#Empty| ($Box intType (int_2_U |$rhs#1_1@0|))) |call3formal@digits#0@0|))) (and (= |digits#0@2| |digits#0@1|) (= (ControlFlow 0 8) 2)))) GeneratedUnifiedExit_correct)))))))))))))))))))
(let ((anon6_Else_correct  (=> (and (<= |n#0| |$rhs#1_0@0|) (= (ControlFlow 0 17) 8)) anon4_correct)))
(let ((anon6_Then_correct  (=> (and (< |$rhs#1_0@0| |n#0|) (= (ControlFlow 0 16) 8)) anon4_correct)))
(let ((anon5_Else_correct  (=> (<= |base#0@@5| |n#0|) (and (=> (= (ControlFlow 0 18) (- 0 24)) (or (not (= |base#0@@5| 0)) (not true))) (=> (or (not (= |base#0@@5| 0)) (not true)) (=> (= |$rhs#1_0@0| (Div |n#0| |base#0@@5|)) (and (=> (= (ControlFlow 0 18) (- 0 23)) (or (not (= |base#0@@5| 0)) (not true))) (=> (or (not (= |base#0@@5| 0)) (not true)) (=> (= |$rhs#1_1@0| (Mod |n#0| |base#0@@5|)) (and (=> (= (ControlFlow 0 18) (- 0 22)) (= (+ (Mul |base#0@@5| |$rhs#1_0@0|) |$rhs#1_1@0|) |n#0|)) (=> (= (+ (Mul |base#0@@5| |$rhs#1_0@0|) |$rhs#1_1@0|) |n#0|) (and (=> (= (ControlFlow 0 18) (- 0 21)) (<= (LitInt 2) |base#0@@5|)) (=> (<= (LitInt 2) |base#0@@5|) (and (=> (= (ControlFlow 0 18) (- 0 20)) (<= |base#0@@5| |n#0|)) (=> (<= |base#0@@5| |n#0|) (and (=> (= (ControlFlow 0 18) (- 0 19)) (= |$rhs#1_0@0| (Div |n#0| |base#0@@5|))) (=> (= |$rhs#1_0@0| (Div |n#0| |base#0@@5|)) (=> (and (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (and (< |$rhs#1_0@0| |n#0|) (= $Heap $Heap@0))) (and (=> (= (ControlFlow 0 18) 16) anon6_Then_correct) (=> (= (ControlFlow 0 18) 17) anon6_Else_correct))))))))))))))))))))
(let ((anon5_Then_correct  (=> (and (and (< |n#0| |base#0@@5|) (= |digits#0@0| (|Seq#Build| |Seq#Empty| ($Box intType (int_2_U |n#0|))))) (and (= |digits#0@2| |digits#0@0|) (= (ControlFlow 0 7) 2))) GeneratedUnifiedExit_correct)))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (and (=> (= (ControlFlow 0 25) 7) anon5_Then_correct) (=> (= (ControlFlow 0 25) 18) anon5_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (<= (LitInt 0) |n#0|)) (=> (and (and (and ($Is SeqType |digits#0@@5| (TSeq TInt)) ($IsAlloc SeqType |digits#0@@5| (TSeq TInt) $Heap)) (= 2 $FunctionContextHeight)) (and (<= (LitInt 2) |base#0@@5|) (= (ControlFlow 0 26) 25))) anon0_correct))))
PreconditionGeneratedEntry_correct)))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
