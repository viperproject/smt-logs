(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TBool () T@U)
(declare-fun TChar () T@U)
(declare-fun TagBool () T@U)
(declare-fun TagChar () T@U)
(declare-fun TagSet () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._System.object? () T@U)
(declare-fun Tagclass._System.object () T@U)
(declare-fun Tagclass._System.___hFunc1 () T@U)
(declare-fun Tagclass._module.Lang () T@U)
(declare-fun |##_module.Lang.L| () T@U)
(declare-fun tytagFamily$object () T@U)
(declare-fun |tytagFamily$_#Func1| () T@U)
(declare-fun tytagFamily$Lang () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.TotalLang (T@U T@U T@U T@U) Bool)
(declare-fun $LS (T@U) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun Tclass._module.Lang (T@U) T@U)
(declare-fun _module.__default.TotalLang_h (T@U T@U T@U T@U T@U) Bool)
(declare-fun Tag (T@U) T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun |#_module.Lang.L| (Bool T@U) T@U)
(declare-fun HandleTypeType () T@T)
(declare-fun Tclass._System.___hFunc1 (T@U T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun Reads1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle1 (T@U T@U T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun SetType () T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun |lambda#7| (T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun |ORD#Less| (T@U T@U) Bool)
(declare-fun |ORD#Minus| (T@U T@U) T@U)
(declare-fun |ORD#FromNat| (Int) T@U)
(declare-fun |ORD#Offset| (T@U) Int)
(declare-fun |Set#Empty| () T@U)
(declare-fun _module.Lang.L_q (T@U) Bool)
(declare-fun _module.__default.Nothing (T@U T@U) T@U)
(declare-fun |_module.__default.Nothing#canCall| (T@U) Bool)
(declare-fun Tclass._System.object () T@U)
(declare-fun Tclass._System.object? () T@U)
(declare-fun |_module.__default.TotalLang#canCall| (T@U T@U T@U) Bool)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun Apply1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun _module.Lang.deriv (T@U) T@U)
(declare-fun Requires1 (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun _module.__default.OnlyDs (T@U) T@U)
(declare-fun |_module.__default.OnlyDs#canCall| () Bool)
(declare-fun null () T@U)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $OneHeap () T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun TSet (T@U) T@U)
(declare-fun AtLayer (T@T T@U T@U) T@U)
(declare-fun LayerTypeType () T@T)
(declare-fun charType () T@T)
(declare-fun |char#FromInt| (Int) T@U)
(declare-fun |lambda#15| (T@U T@U T@U T@U T@U) T@U)
(declare-fun |lambda#9| (T@U) T@U)
(declare-fun SetRef_to_SetBox (T@U) T@U)
(declare-fun |lambda#8| (Bool) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun TagFamily (T@U) T@U)
(declare-fun |ORD#IsNat| (T@U) Bool)
(declare-fun _module.Lang.nullable (T@U) Bool)
(declare-fun |lambda#10| (T@U T@U T@U) T@U)
(declare-fun |lambda#6| (T@U) T@U)
(declare-fun |lambda#11| (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1_1 (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun Tclass._module.Lang_0 (T@U) T@U)
(declare-fun |char#ToInt| (T@U) Int)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun |_module.__default.TotalLang_h#canCall| (T@U T@U T@U T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TBool TChar TagBool TagChar TagSet alloc Tagclass._System.object? Tagclass._System.object Tagclass._System.___hFunc1 Tagclass._module.Lang |##_module.Lang.L| tytagFamily$object |tytagFamily$_#Func1| tytagFamily$Lang)
)
(assert (= (Ctor DatatypeTypeType) 3))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|_module._default.TotalLang#$S| T@U) ($ly T@U) ($Heap T@U) (|l#0| T@U) ) (!  (=> (and (and ($IsGoodHeap $Heap) ($Is DatatypeTypeType |l#0| (Tclass._module.Lang |_module._default.TotalLang#$S|))) (_module.__default.TotalLang |_module._default.TotalLang#$S| ($LS $ly) $Heap |l#0|)) (forall ((|_k#0| T@U) ) (! (_module.__default.TotalLang_h |_module._default.TotalLang#$S| ($LS $ly) $Heap |_k#0| |l#0|)
 :pattern ( (_module.__default.TotalLang_h |_module._default.TotalLang#$S| ($LS $ly) $Heap |_k#0| |l#0|))
)))
 :pattern ( (_module.__default.TotalLang |_module._default.TotalLang#$S| ($LS $ly) $Heap |l#0|))
))))
(assert (= (Tag TBool) TagBool))
(assert (= (Tag TChar) TagChar))
(assert (= (Ctor HandleTypeType) 4))
(assert (forall ((_module.Lang$S T@U) (|a#15#0#0| Bool) (|a#15#1#0| T@U) ($h T@U) ) (!  (=> ($IsGoodHeap $h) (= ($IsAlloc DatatypeTypeType (|#_module.Lang.L| |a#15#0#0| |a#15#1#0|) (Tclass._module.Lang _module.Lang$S) $h)  (and ($IsAlloc boolType (bool_2_U |a#15#0#0|) TBool $h) ($IsAlloc HandleTypeType |a#15#1#0| (Tclass._System.___hFunc1 _module.Lang$S (Tclass._module.Lang _module.Lang$S)) $h))))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_module.Lang.L| |a#15#0#0| |a#15#1#0|) (Tclass._module.Lang _module.Lang$S) $h))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0 t1 t2 (MapType0Store t0 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
)))) (forall ((t0@@0 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 (MapType1Store t0@@0 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :weight 0
))) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 5))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))) (= (Ctor refType) 6)) (= (Ctor FieldType) 7)) (= (Ctor BoxType) 8)) (= (Ctor SetType) 9)))
(assert (forall ((t0@@1 T@U) (t1@@1 T@U) (heap T@U) (h T@U) (r T@U) (rd T@U) (bx0 T@U) (bx T@U) ) (! (= (|Set#IsMember| (Reads1 t0@@1 t1@@1 heap (Handle1 h r rd) bx0) bx) (|Set#IsMember| (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType SetType rd heap bx0) bx))
 :pattern ( (|Set#IsMember| (Reads1 t0@@1 t1@@1 heap (Handle1 h r rd) bx0) bx))
)))
(assert (forall ((|l#0@@0| T@U) (|$l#0#heap#0| T@U) (|$l#0#s#0| T@U) ) (! (= (U_2_bool (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType boolType (|lambda#7| |l#0@@0|) |$l#0#heap#0| |$l#0#s#0|)) ($IsBox |$l#0#s#0| |l#0@@0|))
 :pattern ( (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType boolType (|lambda#7| |l#0@@0|) |$l#0#heap#0| |$l#0#s#0|))
)))
(assert (forall ((o T@U) (p T@U) (r@@0 T@U) ) (!  (=> (and (|ORD#Less| o p) (|ORD#Less| p r@@0)) (|ORD#Less| o r@@0))
 :pattern ( (|ORD#Less| o p) (|ORD#Less| p r@@0))
 :pattern ( (|ORD#Less| o p) (|ORD#Less| o r@@0))
)))
(assert (forall ((o@@0 T@U) (m@@4 Int) (n Int) ) (!  (=> (and (and (<= 0 m@@4) (<= 0 n)) (<= (+ m@@4 n) (|ORD#Offset| o@@0))) (= (|ORD#Minus| (|ORD#Minus| o@@0 (|ORD#FromNat| m@@4)) (|ORD#FromNat| n)) (|ORD#Minus| o@@0 (|ORD#FromNat| (+ m@@4 n)))))
 :pattern ( (|ORD#Minus| (|ORD#Minus| o@@0 (|ORD#FromNat| m@@4)) (|ORD#FromNat| n)))
)))
(assert (forall ((o@@1 T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o@@1))
 :pattern ( (|Set#IsMember| |Set#Empty| o@@1))
)))
(assert (forall ((_module.Lang$S@@0 T@U) (d T@U) ) (!  (=> ($Is DatatypeTypeType d (Tclass._module.Lang _module.Lang$S@@0)) (_module.Lang.L_q d))
 :pattern ( (_module.Lang.L_q d) ($Is DatatypeTypeType d (Tclass._module.Lang _module.Lang$S@@0)))
)))
(assert (forall ((f T@U) (t0@@2 T@U) (t1@@2 T@U) (u0@@2 T@U) (u1@@2 T@U) ) (!  (=> (and (and ($Is HandleTypeType f (Tclass._System.___hFunc1 t0@@2 t1@@2)) (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 u0@@2) ($IsBox bx@@0 t0@@2))
 :pattern ( ($IsBox bx@@0 u0@@2))
 :pattern ( ($IsBox bx@@0 t0@@2))
))) (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 t1@@2) ($IsBox bx@@1 u1@@2))
 :pattern ( ($IsBox bx@@1 t1@@2))
 :pattern ( ($IsBox bx@@1 u1@@2))
))) ($Is HandleTypeType f (Tclass._System.___hFunc1 u0@@2 u1@@2)))
 :pattern ( ($Is HandleTypeType f (Tclass._System.___hFunc1 t0@@2 t1@@2)) ($Is HandleTypeType f (Tclass._System.___hFunc1 u0@@2 u1@@2)))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module._default.Nothing$_T0 T@U) ($ly@@0 T@U) ) (!  (=> (or (|_module.__default.Nothing#canCall| _module._default.Nothing$_T0) (< 1 $FunctionContextHeight)) ($Is DatatypeTypeType (_module.__default.Nothing _module._default.Nothing$_T0 $ly@@0) (Tclass._module.Lang _module._default.Nothing$_T0)))
 :pattern ( (_module.__default.Nothing _module._default.Nothing$_T0 $ly@@0))
))))
(assert (forall ((|c#0| T@U) ($h@@0 T@U) ) (! (= ($IsAlloc refType |c#0| Tclass._System.object $h@@0) ($IsAlloc refType |c#0| Tclass._System.object? $h@@0))
 :pattern ( ($IsAlloc refType |c#0| Tclass._System.object $h@@0))
 :pattern ( ($IsAlloc refType |c#0| Tclass._System.object? $h@@0))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module._default.TotalLang$S T@U) ($ly@@1 T@U) ($Heap@@0 T@U) (|l#0@@1| T@U) ) (!  (=> (or (|_module.__default.TotalLang#canCall| _module._default.TotalLang$S $Heap@@0 |l#0@@1|) (and (< 1 $FunctionContextHeight) (and ($IsGoodHeap $Heap@@0) ($Is DatatypeTypeType |l#0@@1| (Tclass._module.Lang _module._default.TotalLang$S))))) (and (forall ((|s#0| T@U) ) (!  (=> ($IsBox |s#0| _module._default.TotalLang$S) (and (and (_module.Lang.L_q |l#0@@1|) true) (=> (Requires1 _module._default.TotalLang$S (Tclass._module.Lang _module._default.TotalLang$S) $Heap@@0 (_module.Lang.deriv |l#0@@1|) |s#0|) (and (and (_module.Lang.L_q |l#0@@1|) true) (=> (|Set#Equal| (Reads1 _module._default.TotalLang$S (Tclass._module.Lang _module._default.TotalLang$S) $Heap@@0 (_module.Lang.deriv |l#0@@1|) |s#0|) |Set#Empty|) (and (_module.Lang.L_q |l#0@@1|) (|_module.__default.TotalLang#canCall| _module._default.TotalLang$S $Heap@@0 ($Unbox DatatypeTypeType (Apply1 _module._default.TotalLang$S (Tclass._module.Lang _module._default.TotalLang$S) $Heap@@0 (_module.Lang.deriv |l#0@@1|) |s#0|)))))))))
 :pattern ( ($Unbox DatatypeTypeType (Apply1 _module._default.TotalLang$S (Tclass._module.Lang _module._default.TotalLang$S) $Heap@@0 (_module.Lang.deriv |l#0@@1|) |s#0|)))
 :pattern ( (Reads1 _module._default.TotalLang$S (Tclass._module.Lang _module._default.TotalLang$S) $Heap@@0 (_module.Lang.deriv |l#0@@1|) |s#0|))
 :pattern ( (Requires1 _module._default.TotalLang$S (Tclass._module.Lang _module._default.TotalLang$S) $Heap@@0 (_module.Lang.deriv |l#0@@1|) |s#0|))
)) (= (_module.__default.TotalLang _module._default.TotalLang$S ($LS $ly@@1) $Heap@@0 |l#0@@1|) (forall ((|s#0@@0| T@U) ) (!  (=> ($IsBox |s#0@@0| _module._default.TotalLang$S) (and (and (Requires1 _module._default.TotalLang$S (Tclass._module.Lang _module._default.TotalLang$S) $Heap@@0 (_module.Lang.deriv |l#0@@1|) |s#0@@0|) (|Set#Equal| (Reads1 _module._default.TotalLang$S (Tclass._module.Lang _module._default.TotalLang$S) $Heap@@0 (_module.Lang.deriv |l#0@@1|) |s#0@@0|) |Set#Empty|)) (_module.__default.TotalLang _module._default.TotalLang$S $ly@@1 $Heap@@0 ($Unbox DatatypeTypeType (Apply1 _module._default.TotalLang$S (Tclass._module.Lang _module._default.TotalLang$S) $Heap@@0 (_module.Lang.deriv |l#0@@1|) |s#0@@0|)))))
 :pattern ( ($Unbox DatatypeTypeType (Apply1 _module._default.TotalLang$S (Tclass._module.Lang _module._default.TotalLang$S) $Heap@@0 (_module.Lang.deriv |l#0@@1|) |s#0@@0|)))
 :pattern ( (Reads1 _module._default.TotalLang$S (Tclass._module.Lang _module._default.TotalLang$S) $Heap@@0 (_module.Lang.deriv |l#0@@1|) |s#0@@0|))
 :pattern ( (Requires1 _module._default.TotalLang$S (Tclass._module.Lang _module._default.TotalLang$S) $Heap@@0 (_module.Lang.deriv |l#0@@1|) |s#0@@0|))
)))))
 :pattern ( (_module.__default.TotalLang _module._default.TotalLang$S ($LS $ly@@1) $Heap@@0 |l#0@@1|) ($IsGoodHeap $Heap@@0))
))))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($ly@@2 T@U) ) (!  (=> (or |_module.__default.OnlyDs#canCall| (< 2 $FunctionContextHeight)) ($Is DatatypeTypeType (_module.__default.OnlyDs $ly@@2) (Tclass._module.Lang TChar)))
 :pattern ( (_module.__default.OnlyDs $ly@@2))
))))
(assert (forall (($o T@U) ($h@@1 T@U) ) (! (= ($IsAlloc refType $o Tclass._System.object? $h@@1)  (or (= $o null) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@1 $o) alloc)))))
 :pattern ( ($IsAlloc refType $o Tclass._System.object? $h@@1))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($Heap@@1 T@U) (_module._default.Nothing$_T0@@0 T@U) ($ly@@3 T@U) ) (!  (=> (and (or (|_module.__default.Nothing#canCall| _module._default.Nothing$_T0@@0) (< 1 $FunctionContextHeight)) ($IsGoodHeap $Heap@@1)) ($IsAlloc DatatypeTypeType (_module.__default.Nothing _module._default.Nothing$_T0@@0 $ly@@3) (Tclass._module.Lang _module._default.Nothing$_T0@@0) $Heap@@1))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.__default.Nothing _module._default.Nothing$_T0@@0 $ly@@3) (Tclass._module.Lang _module._default.Nothing$_T0@@0) $Heap@@1))
))))
(assert (forall ((t0@@3 T@U) (t1@@3 T@U) (heap@@0 T@U) (f@@0 T@U) (bx0@@0 T@U) ) (!  (=> (and ($IsGoodHeap heap@@0) (and ($IsBox bx0@@0 t0@@3) ($Is HandleTypeType f@@0 (Tclass._System.___hFunc1 t0@@3 t1@@3)))) (= (|Set#Equal| (Reads1 t0@@3 t1@@3 $OneHeap f@@0 bx0@@0) |Set#Empty|) (|Set#Equal| (Reads1 t0@@3 t1@@3 heap@@0 f@@0 bx0@@0) |Set#Empty|)))
 :pattern ( (Reads1 t0@@3 t1@@3 $OneHeap f@@0 bx0@@0) ($IsGoodHeap heap@@0))
 :pattern ( (Reads1 t0@@3 t1@@3 heap@@0 f@@0 bx0@@0))
)))
(assert (forall ((d@@0 T@U) ) (! (= (_module.Lang.L_q d@@0) (= (DatatypeCtorId d@@0) |##_module.Lang.L|))
 :pattern ( (_module.Lang.L_q d@@0))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((d@@1 T@U) ) (!  (=> (_module.Lang.L_q d@@1) (exists ((|a#14#0#0| Bool) (|a#14#1#0| T@U) ) (= d@@1 (|#_module.Lang.L| |a#14#0#0| |a#14#1#0|))))
 :pattern ( (_module.Lang.L_q d@@1))
)))
(assert (forall ((_module.Lang$S@@1 T@U) (|a#15#0#0@@0| Bool) (|a#15#1#0@@0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Lang.L| |a#15#0#0@@0| |a#15#1#0@@0|) (Tclass._module.Lang _module.Lang$S@@1))  (and ($Is boolType (bool_2_U |a#15#0#0@@0|) TBool) ($Is HandleTypeType |a#15#1#0@@0| (Tclass._System.___hFunc1 _module.Lang$S@@1 (Tclass._module.Lang _module.Lang$S@@1)))))
 :pattern ( ($Is DatatypeTypeType (|#_module.Lang.L| |a#15#0#0@@0| |a#15#1#0@@0|) (Tclass._module.Lang _module.Lang$S@@1)))
)))
(assert (forall ((v T@U) (t0@@4 T@U) ) (! (= ($Is SetType v (TSet t0@@4)) (forall ((bx@@2 T@U) ) (!  (=> (|Set#IsMember| v bx@@2) ($IsBox bx@@2 t0@@4))
 :pattern ( (|Set#IsMember| v bx@@2))
)))
 :pattern ( ($Is SetType v (TSet t0@@4)))
)))
(assert (= (Ctor LayerTypeType) 10))
(assert (forall ((f@@1 T@U) (ly T@U) (A T@T) ) (! (= (AtLayer A f@@1 ly) (MapType1Select LayerTypeType A f@@1 ly))
 :pattern ( (AtLayer A f@@1 ly))
)))
(assert (= (Ctor charType) 11))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($ly@@4 T@U) ) (!  (=> (or |_module.__default.OnlyDs#canCall| (< 2 $FunctionContextHeight)) (and (forall ((|$l#1#ch#0| T@U) )  (=> ($Is charType |$l#1#ch#0| TChar) (and (=> (or (= |$l#1#ch#0| (Lit charType (|char#FromInt| 100))) (= |$l#1#ch#0| (Lit charType (|char#FromInt| 68)))) |_module.__default.OnlyDs#canCall|) (=> (not (or (= |$l#1#ch#0| (Lit charType (|char#FromInt| 100))) (= |$l#1#ch#0| (Lit charType (|char#FromInt| 68))))) (|_module.__default.Nothing#canCall| TChar))))) (= (_module.__default.OnlyDs ($LS $ly@@4)) (Lit DatatypeTypeType (|#_module.Lang.L| (U_2_bool (Lit boolType (bool_2_U true))) (Lit HandleTypeType (AtLayer HandleTypeType (|lambda#15| (Lit charType (|char#FromInt| 100)) (Lit charType (|char#FromInt| 68)) TChar (|lambda#7| TChar) (|lambda#9| (SetRef_to_SetBox (|lambda#8| false)))) $ly@@4)))))))
 :pattern ( (_module.__default.OnlyDs ($LS $ly@@4)))
))))
(assert ($IsGoodHeap $OneHeap))
(assert (forall ((v@@0 T@U) (t T@U) (h@@0 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t h@@0) ($IsAlloc T@@1 v@@0 t h@@0))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t h@@0))
)))
(assert (forall ((_module.Lang$S@@2 T@U) ) (!  (and (= (Tag (Tclass._module.Lang _module.Lang$S@@2)) Tagclass._module.Lang) (= (TagFamily (Tclass._module.Lang _module.Lang$S@@2)) tytagFamily$Lang))
 :pattern ( (Tclass._module.Lang _module.Lang$S@@2))
)))
(assert (forall ((o@@2 T@U) (p@@0 T@U) ) (!  (=> (and (|ORD#IsNat| p@@0) (<= (|ORD#Offset| p@@0) (|ORD#Offset| o@@2))) (and (= (|ORD#IsNat| (|ORD#Minus| o@@2 p@@0)) (|ORD#IsNat| o@@2)) (= (|ORD#Offset| (|ORD#Minus| o@@2 p@@0)) (- (|ORD#Offset| o@@2) (|ORD#Offset| p@@0)))))
 :pattern ( (|ORD#Minus| o@@2 p@@0))
)))
(assert (forall ((s T@U) (bx@@3 T@U) ) (! (= (|Set#IsMember| (SetRef_to_SetBox s) bx@@3) (U_2_bool (MapType1Select refType boolType s ($Unbox refType bx@@3))))
 :pattern ( (|Set#IsMember| (SetRef_to_SetBox s) bx@@3))
)))
(assert (forall ((n@@0 Int) ) (!  (=> (<= 0 n@@0) (and (|ORD#IsNat| (|ORD#FromNat| n@@0)) (= (|ORD#Offset| (|ORD#FromNat| n@@0)) n@@0)))
 :pattern ( (|ORD#FromNat| n@@0))
)))
(assert (forall ((t0@@5 T@U) (t1@@4 T@U) (heap@@1 T@U) (h@@1 T@U) (r@@1 T@U) (rd@@0 T@U) (bx0@@1 T@U) ) (! (= (Apply1 t0@@5 t1@@4 heap@@1 (Handle1 h@@1 r@@1 rd@@0) bx0@@1) (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType h@@1 heap@@1 bx0@@1))
 :pattern ( (Apply1 t0@@5 t1@@4 heap@@1 (Handle1 h@@1 r@@1 rd@@0) bx0@@1))
)))
(assert (forall ((bx@@4 T@U) ) (!  (=> ($IsBox bx@@4 Tclass._System.object?) (and (= ($Box refType ($Unbox refType bx@@4)) bx@@4) ($Is refType ($Unbox refType bx@@4) Tclass._System.object?)))
 :pattern ( ($IsBox bx@@4 Tclass._System.object?))
)))
(assert (forall ((bx@@5 T@U) ) (!  (=> ($IsBox bx@@5 Tclass._System.object) (and (= ($Box refType ($Unbox refType bx@@5)) bx@@5) ($Is refType ($Unbox refType bx@@5) Tclass._System.object)))
 :pattern ( ($IsBox bx@@5 Tclass._System.object))
)))
(assert (forall ((|c#0@@0| T@U) ) (! (= ($Is refType |c#0@@0| Tclass._System.object)  (and ($Is refType |c#0@@0| Tclass._System.object?) (or (not (= |c#0@@0| null)) (not true))))
 :pattern ( ($Is refType |c#0@@0| Tclass._System.object))
 :pattern ( ($Is refType |c#0@@0| Tclass._System.object?))
)))
(assert (forall ((d@@2 T@U) ($h@@2 T@U) ) (!  (=> (and ($IsGoodHeap $h@@2) (and (_module.Lang.L_q d@@2) (exists ((_module.Lang$S@@3 T@U) ) (! ($IsAlloc DatatypeTypeType d@@2 (Tclass._module.Lang _module.Lang$S@@3) $h@@2)
 :pattern ( ($IsAlloc DatatypeTypeType d@@2 (Tclass._module.Lang _module.Lang$S@@3) $h@@2))
)))) ($IsAlloc boolType (bool_2_U (_module.Lang.nullable d@@2)) TBool $h@@2))
 :pattern ( ($IsAlloc boolType (bool_2_U (_module.Lang.nullable d@@2)) TBool $h@@2))
)))
(assert (forall ((|l#0@@2| T@U) (|l#1| T@U) (|l#2| T@U) (|$l#0#ly#0| T@U) ) (! (= (MapType1Select LayerTypeType HandleTypeType (|lambda#10| |l#0@@2| |l#1| |l#2|) |$l#0#ly#0|) (Handle1 (|lambda#6| ($Box DatatypeTypeType (Lit DatatypeTypeType (_module.__default.Nothing |l#0@@2| |$l#0#ly#0|)))) |l#1| |l#2|))
 :pattern ( (MapType1Select LayerTypeType HandleTypeType (|lambda#10| |l#0@@2| |l#1| |l#2|) |$l#0#ly#0|))
)))
(assert (forall ((f@@2 T@U) (t0@@6 T@U) (t1@@5 T@U) (h@@2 T@U) ) (!  (=> (and ($IsGoodHeap h@@2) ($IsAlloc HandleTypeType f@@2 (Tclass._System.___hFunc1 t0@@6 t1@@5) h@@2)) (forall ((bx0@@2 T@U) ) (!  (=> (and ($IsAllocBox bx0@@2 t0@@6 h@@2) (Requires1 t0@@6 t1@@5 h@@2 f@@2 bx0@@2)) ($IsAllocBox (Apply1 t0@@6 t1@@5 h@@2 f@@2 bx0@@2) t1@@5 h@@2))
 :pattern ( (Apply1 t0@@6 t1@@5 h@@2 f@@2 bx0@@2))
)))
 :pattern ( ($IsAlloc HandleTypeType f@@2 (Tclass._System.___hFunc1 t0@@6 t1@@5) h@@2))
)))
(assert (forall ((o@@3 T@U) (p@@1 T@U) ) (!  (or (or (|ORD#Less| o@@3 p@@1) (= o@@3 p@@1)) (|ORD#Less| p@@1 o@@3))
 :pattern ( (|ORD#Less| o@@3 p@@1) (|ORD#Less| p@@1 o@@3))
)))
(assert (forall ((|l#0@@3| Bool) (|$l#0#o#0| T@U) ) (! (= (U_2_bool (MapType1Select refType boolType (|lambda#8| |l#0@@3|) |$l#0#o#0|)) |l#0@@3|)
 :pattern ( (MapType1Select refType boolType (|lambda#8| |l#0@@3|) |$l#0#o#0|))
)))
(assert (forall ((|l#0@@4| T@U) (|l#1@@0| T@U) (|l#2@@0| T@U) (|l#3| T@U) (|$l#0#heap#0@@0| T@U) (|$l#0#ch#0| T@U) ) (! (= (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType (|lambda#11| |l#0@@4| |l#1@@0| |l#2@@0| |l#3|) |$l#0#heap#0@@0| |$l#0#ch#0|) ($Box DatatypeTypeType (ite  (or (= ($Unbox charType |$l#0#ch#0|) |l#0@@4|) (= ($Unbox charType |$l#0#ch#0|) |l#1@@0|)) |l#2@@0| |l#3|)))
 :pattern ( (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType (|lambda#11| |l#0@@4| |l#1@@0| |l#2@@0| |l#3|) |$l#0#heap#0@@0| |$l#0#ch#0|))
)))
(assert (forall ((|a#16#0#0| Bool) (|a#16#1#0| T@U) ) (! (= (_module.Lang.nullable (|#_module.Lang.L| |a#16#0#0| |a#16#1#0|)) |a#16#0#0|)
 :pattern ( (|#_module.Lang.L| |a#16#0#0| |a#16#1#0|))
)))
(assert (forall ((a T@U) (b T@U) ) (!  (=> (|Set#Equal| a b) (= a b))
 :pattern ( (|Set#Equal| a b))
)))
(assert (forall ((f@@3 T@U) (t0@@7 T@U) (t1@@6 T@U) ) (! (= ($Is HandleTypeType f@@3 (Tclass._System.___hFunc1 t0@@7 t1@@6)) (forall ((h@@3 T@U) (bx0@@3 T@U) ) (!  (=> (and (and ($IsGoodHeap h@@3) ($IsBox bx0@@3 t0@@7)) (Requires1 t0@@7 t1@@6 h@@3 f@@3 bx0@@3)) ($IsBox (Apply1 t0@@7 t1@@6 h@@3 f@@3 bx0@@3) t1@@6))
 :pattern ( (Apply1 t0@@7 t1@@6 h@@3 f@@3 bx0@@3))
)))
 :pattern ( ($Is HandleTypeType f@@3 (Tclass._System.___hFunc1 t0@@7 t1@@6)))
)))
(assert (forall ((bx@@6 T@U) ) (!  (=> ($IsBox bx@@6 TBool) (and (= ($Box boolType ($Unbox boolType bx@@6)) bx@@6) ($Is boolType ($Unbox boolType bx@@6) TBool)))
 :pattern ( ($IsBox bx@@6 TBool))
)))
(assert (forall ((bx@@7 T@U) ) (!  (=> ($IsBox bx@@7 TChar) (and (= ($Box charType ($Unbox charType bx@@7)) bx@@7) ($Is charType ($Unbox charType bx@@7) TChar)))
 :pattern ( ($IsBox bx@@7 TChar))
)))
(assert (forall ((v@@1 T@U) (t@@0 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@1) t@@0) ($Is T@@2 v@@1 t@@0))
 :pattern ( ($IsBox ($Box T@@2 v@@1) t@@0))
)))
(assert (forall ((t0@@8 T@U) (t1@@7 T@U) (heap@@2 T@U) (h@@4 T@U) (r@@2 T@U) (rd@@1 T@U) (bx0@@4 T@U) ) (!  (=> (U_2_bool (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType boolType r@@2 heap@@2 bx0@@4)) (Requires1 t0@@8 t1@@7 heap@@2 (Handle1 h@@4 r@@2 rd@@1) bx0@@4))
 :pattern ( (Requires1 t0@@8 t1@@7 heap@@2 (Handle1 h@@4 r@@2 rd@@1) bx0@@4))
)))
(assert (forall ((o@@4 T@U) ) (! (<= 0 (|ORD#Offset| o@@4))
 :pattern ( (|ORD#Offset| o@@4))
)))
(assert (forall ((v@@2 T@U) (t0@@9 T@U) (h@@5 T@U) ) (! (= ($IsAlloc SetType v@@2 (TSet t0@@9) h@@5) (forall ((bx@@8 T@U) ) (!  (=> (|Set#IsMember| v@@2 bx@@8) ($IsAllocBox bx@@8 t0@@9 h@@5))
 :pattern ( (|Set#IsMember| v@@2 bx@@8))
)))
 :pattern ( ($IsAlloc SetType v@@2 (TSet t0@@9) h@@5))
)))
(assert (forall ((|#$T0| T@U) (|#$R| T@U) ) (! (= (Tclass._System.___hFunc1_0 (Tclass._System.___hFunc1 |#$T0| |#$R|)) |#$T0|)
 :pattern ( (Tclass._System.___hFunc1 |#$T0| |#$R|))
)))
(assert (forall ((|#$T0@@0| T@U) (|#$R@@0| T@U) ) (! (= (Tclass._System.___hFunc1_1 (Tclass._System.___hFunc1 |#$T0@@0| |#$R@@0|)) |#$R@@0|)
 :pattern ( (Tclass._System.___hFunc1 |#$T0@@0| |#$R@@0|))
)))
(assert (forall ((|a#13#0#0| Bool) (|a#13#1#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Lang.L| |a#13#0#0| |a#13#1#0|)) |##_module.Lang.L|)
 :pattern ( (|#_module.Lang.L| |a#13#0#0| |a#13#1#0|))
)))
(assert (forall ((|a#17#0#0| Bool) (|a#17#1#0| T@U) ) (! (= (_module.Lang.deriv (|#_module.Lang.L| |a#17#0#0| |a#17#1#0|)) |a#17#1#0|)
 :pattern ( (|#_module.Lang.L| |a#17#0#0| |a#17#1#0|))
)))
(assert (forall (($o@@0 T@U) ) (! ($Is refType $o@@0 Tclass._System.object?)
 :pattern ( ($Is refType $o@@0 Tclass._System.object?))
)))
(assert (forall ((t@@1 T@U) ) (! (= (Inv0_TSet (TSet t@@1)) t@@1)
 :pattern ( (TSet t@@1))
)))
(assert (forall ((t@@2 T@U) ) (! (= (Tag (TSet t@@2)) TagSet)
 :pattern ( (TSet t@@2))
)))
(assert (forall ((_module.Lang$S@@4 T@U) ) (! (= (Tclass._module.Lang_0 (Tclass._module.Lang _module.Lang$S@@4)) _module.Lang$S@@4)
 :pattern ( (Tclass._module.Lang _module.Lang$S@@4))
)))
(assert (forall ((x@@5 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@5)) x@@5)
 :pattern ( ($Box T@@3 x@@5))
)))
(assert (forall ((o@@5 T@U) (p@@2 T@U) ) (!  (and (and (and (=> (|ORD#Less| o@@5 p@@2) (or (not (= o@@5 p@@2)) (not true))) (=> (and (|ORD#IsNat| o@@5) (not (|ORD#IsNat| p@@2))) (|ORD#Less| o@@5 p@@2))) (=> (and (|ORD#IsNat| o@@5) (|ORD#IsNat| p@@2)) (= (|ORD#Less| o@@5 p@@2) (< (|ORD#Offset| o@@5) (|ORD#Offset| p@@2))))) (=> (and (|ORD#Less| o@@5 p@@2) (|ORD#IsNat| p@@2)) (|ORD#IsNat| o@@5)))
 :pattern ( (|ORD#Less| o@@5 p@@2))
)))
(assert (forall ((_module._default.TotalLang$S@@0 T@U) ($ly@@5 T@U) ($Heap@@2 T@U) (|l#0@@5| T@U) ) (! (= (_module.__default.TotalLang _module._default.TotalLang$S@@0 ($LS $ly@@5) $Heap@@2 |l#0@@5|) (_module.__default.TotalLang _module._default.TotalLang$S@@0 $ly@@5 $Heap@@2 |l#0@@5|))
 :pattern ( (_module.__default.TotalLang _module._default.TotalLang$S@@0 ($LS $ly@@5) $Heap@@2 |l#0@@5|))
)))
(assert (forall ((_module._default.Nothing$_T0@@1 T@U) ($ly@@6 T@U) ) (! (= (_module.__default.Nothing _module._default.Nothing$_T0@@1 ($LS $ly@@6)) (_module.__default.Nothing _module._default.Nothing$_T0@@1 $ly@@6))
 :pattern ( (_module.__default.Nothing _module._default.Nothing$_T0@@1 ($LS $ly@@6)))
)))
(assert (forall ((f@@4 T@U) (ly@@0 T@U) (A@@0 T@T) ) (! (= (AtLayer A@@0 f@@4 ($LS ly@@0)) (AtLayer A@@0 f@@4 ly@@0))
 :pattern ( (AtLayer A@@0 f@@4 ($LS ly@@0)))
)))
(assert (forall ((n@@1 Int) ) (!  (=> (or (and (<= 0 n@@1) (< n@@1 55296)) (and (<= 57344 n@@1) (< n@@1 1114112))) (= (|char#ToInt| (|char#FromInt| n@@1)) n@@1))
 :pattern ( (|char#FromInt| n@@1))
)))
(assert (forall ((f@@5 T@U) (t0@@10 T@U) (t1@@8 T@U) (h@@6 T@U) ) (!  (=> ($IsGoodHeap h@@6) (= ($IsAlloc HandleTypeType f@@5 (Tclass._System.___hFunc1 t0@@10 t1@@8) h@@6) (forall ((bx0@@5 T@U) ) (!  (=> (and (and ($IsBox bx0@@5 t0@@10) ($IsAllocBox bx0@@5 t0@@10 h@@6)) (Requires1 t0@@10 t1@@8 h@@6 f@@5 bx0@@5)) (forall ((r@@3 T@U) ) (!  (=> (and (or (not (= r@@3 null)) (not true)) (|Set#IsMember| (Reads1 t0@@10 t1@@8 h@@6 f@@5 bx0@@5) ($Box refType r@@3))) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h@@6 r@@3) alloc))))
 :pattern ( (|Set#IsMember| (Reads1 t0@@10 t1@@8 h@@6 f@@5 bx0@@5) ($Box refType r@@3)))
)))
 :pattern ( (Apply1 t0@@10 t1@@8 h@@6 f@@5 bx0@@5))
 :pattern ( (Reads1 t0@@10 t1@@8 h@@6 f@@5 bx0@@5))
))))
 :pattern ( ($IsAlloc HandleTypeType f@@5 (Tclass._System.___hFunc1 t0@@10 t1@@8) h@@6))
)))
(assert (forall ((|#$T0@@1| T@U) (|#$R@@1| T@U) (bx@@9 T@U) ) (!  (=> ($IsBox bx@@9 (Tclass._System.___hFunc1 |#$T0@@1| |#$R@@1|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@9)) bx@@9) ($Is HandleTypeType ($Unbox HandleTypeType bx@@9) (Tclass._System.___hFunc1 |#$T0@@1| |#$R@@1|))))
 :pattern ( ($IsBox bx@@9 (Tclass._System.___hFunc1 |#$T0@@1| |#$R@@1|)))
)))
(assert (forall ((|l#0@@6| T@U) (|l#1@@1| T@U) (|l#2@@1| T@U) (|l#3@@0| Bool) ($o@@1 T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0@@6| |l#1@@1| |l#2@@1| |l#3@@0|) $o@@1 $f))  (=> (and (or (not (= $o@@1 |l#0@@6|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1@@1| $o@@1) |l#2@@1|)))) |l#3@@0|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0@@6| |l#1@@1| |l#2@@1| |l#3@@0|) $o@@1 $f))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|_module._default.TotalLang#$S@@0| T@U) ($ly@@7 T@U) ($Heap@@3 T@U) (|l#0@@7| T@U) (|_k#0@@0| T@U) ) (!  (=> (and (and ($IsGoodHeap $Heap@@3) ($Is DatatypeTypeType |l#0@@7| (Tclass._module.Lang |_module._default.TotalLang#$S@@0|))) (= |_k#0@@0| (|ORD#FromNat| 0))) (_module.__default.TotalLang_h |_module._default.TotalLang#$S@@0| $ly@@7 $Heap@@3 |_k#0@@0| |l#0@@7|))
 :pattern ( (_module.__default.TotalLang_h |_module._default.TotalLang#$S@@0| $ly@@7 $Heap@@3 |_k#0@@0| |l#0@@7|))
))))
(assert (forall ((|#$T0@@2| T@U) (|#$R@@2| T@U) ) (!  (and (= (Tag (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@2|)) Tagclass._System.___hFunc1) (= (TagFamily (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@2|)) |tytagFamily$_#Func1|))
 :pattern ( (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@2|))
)))
(assert (forall ((t0@@11 T@U) (t1@@9 T@U) (heap@@3 T@U) (f@@6 T@U) (bx0@@6 T@U) ) (!  (=> (and (and ($IsGoodHeap heap@@3) (and ($IsBox bx0@@6 t0@@11) ($Is HandleTypeType f@@6 (Tclass._System.___hFunc1 t0@@11 t1@@9)))) (|Set#Equal| (Reads1 t0@@11 t1@@9 $OneHeap f@@6 bx0@@6) |Set#Empty|)) (= (Requires1 t0@@11 t1@@9 $OneHeap f@@6 bx0@@6) (Requires1 t0@@11 t1@@9 heap@@3 f@@6 bx0@@6)))
 :pattern ( (Requires1 t0@@11 t1@@9 $OneHeap f@@6 bx0@@6) ($IsGoodHeap heap@@3))
 :pattern ( (Requires1 t0@@11 t1@@9 heap@@3 f@@6 bx0@@6))
)))
(assert (forall (($ly@@8 T@U) ) (! (= (_module.__default.OnlyDs ($LS $ly@@8)) (_module.__default.OnlyDs $ly@@8))
 :pattern ( (_module.__default.OnlyDs ($LS $ly@@8)))
)))
(assert (forall ((bx@@10 T@U) (t@@3 T@U) ) (!  (=> ($IsBox bx@@10 (TSet t@@3)) (and (= ($Box SetType ($Unbox SetType bx@@10)) bx@@10) ($Is SetType ($Unbox SetType bx@@10) (TSet t@@3))))
 :pattern ( ($IsBox bx@@10 (TSet t@@3)))
)))
(assert (forall ((_module.Lang$S@@5 T@U) (bx@@11 T@U) ) (!  (=> ($IsBox bx@@11 (Tclass._module.Lang _module.Lang$S@@5)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@11)) bx@@11) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@11) (Tclass._module.Lang _module.Lang$S@@5))))
 :pattern ( ($IsBox bx@@11 (Tclass._module.Lang _module.Lang$S@@5)))
)))
(assert (forall ((|_module._default.TotalLang#$S@@1| T@U) ($ly@@9 T@U) ($Heap@@4 T@U) (|_k#0@@1| T@U) (|l#0@@8| T@U) ) (! (= (_module.__default.TotalLang_h |_module._default.TotalLang#$S@@1| ($LS $ly@@9) $Heap@@4 |_k#0@@1| |l#0@@8|) (_module.__default.TotalLang_h |_module._default.TotalLang#$S@@1| $ly@@9 $Heap@@4 |_k#0@@1| |l#0@@8|))
 :pattern ( (_module.__default.TotalLang_h |_module._default.TotalLang#$S@@1| ($LS $ly@@9) $Heap@@4 |_k#0@@1| |l#0@@8|))
)))
(assert (forall ((ch T@U) ) (!  (and (= (|char#FromInt| (|char#ToInt| ch)) ch) (or (and (<= 0 (|char#ToInt| ch)) (< (|char#ToInt| ch) 55296)) (and (<= 57344 (|char#ToInt| ch)) (< (|char#ToInt| ch) 1114112))))
 :pattern ( (|char#ToInt| ch))
)))
(assert (forall ((o@@6 T@U) ) (!  (=> (|ORD#IsNat| o@@6) (= o@@6 (|ORD#FromNat| (|ORD#Offset| o@@6))))
 :pattern ( (|ORD#Offset| o@@6))
 :pattern ( (|ORD#IsNat| o@@6))
)))
(assert (= (Tag Tclass._System.object?) Tagclass._System.object?))
(assert (= (TagFamily Tclass._System.object?) tytagFamily$object))
(assert (= (Tag Tclass._System.object) Tagclass._System.object))
(assert (= (TagFamily Tclass._System.object) tytagFamily$object))
(assert (forall ((o@@7 T@U) (p@@3 T@U) ) (!  (=> (and (|ORD#IsNat| p@@3) (<= (|ORD#Offset| p@@3) (|ORD#Offset| o@@7))) (or (and (= p@@3 (|ORD#FromNat| 0)) (= (|ORD#Minus| o@@7 p@@3) o@@7)) (and (or (not (= p@@3 (|ORD#FromNat| 0))) (not true)) (|ORD#Less| (|ORD#Minus| o@@7 p@@3) o@@7))))
 :pattern ( (|ORD#Minus| o@@7 p@@3))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module._default.Nothing$_T0@@2 T@U) ($ly@@10 T@U) ) (!  (=> (or (|_module.__default.Nothing#canCall| _module._default.Nothing$_T0@@2) (< 1 $FunctionContextHeight)) (and (|_module.__default.Nothing#canCall| _module._default.Nothing$_T0@@2) (= (_module.__default.Nothing _module._default.Nothing$_T0@@2 ($LS $ly@@10)) (Lit DatatypeTypeType (|#_module.Lang.L| (U_2_bool (Lit boolType (bool_2_U false))) (Lit HandleTypeType (AtLayer HandleTypeType (|lambda#10| _module._default.Nothing$_T0@@2 (|lambda#7| _module._default.Nothing$_T0@@2) (|lambda#9| (SetRef_to_SetBox (|lambda#8| false)))) $ly@@10)))))))
 :pattern ( (_module.__default.Nothing _module._default.Nothing$_T0@@2 ($LS $ly@@10)))
))))
(assert (forall ((s@@0 T@U) ) (! ($Is SetType (SetRef_to_SetBox s@@0) (TSet Tclass._System.object?))
 :pattern ( (SetRef_to_SetBox s@@0))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) ) (! (= (|Set#Equal| a@@0 b@@0) (forall ((o@@8 T@U) ) (! (= (|Set#IsMember| a@@0 o@@8) (|Set#IsMember| b@@0 o@@8))
 :pattern ( (|Set#IsMember| a@@0 o@@8))
 :pattern ( (|Set#IsMember| b@@0 o@@8))
)))
 :pattern ( (|Set#Equal| a@@0 b@@0))
)))
(assert (forall ((|l#0@@9| T@U) (|l#1@@2| T@U) (|l#2@@2| T@U) (|l#3@@1| T@U) (|l#4| T@U) (|$l#0#ly#0@@0| T@U) ) (! (= (MapType1Select LayerTypeType HandleTypeType (|lambda#15| |l#0@@9| |l#1@@2| |l#2@@2| |l#3@@1| |l#4|) |$l#0#ly#0@@0|) (Handle1 (|lambda#11| |l#0@@9| |l#1@@2| (_module.__default.OnlyDs |$l#0#ly#0@@0|) (_module.__default.Nothing |l#2@@2| |$l#0#ly#0@@0|)) |l#3@@1| |l#4|))
 :pattern ( (MapType1Select LayerTypeType HandleTypeType (|lambda#15| |l#0@@9| |l#1@@2| |l#2@@2| |l#3@@1| |l#4|) |$l#0#ly#0@@0|))
)))
(assert (forall ((d@@3 T@U) (_module.Lang$S@@6 T@U) ($h@@3 T@U) ) (!  (=> (and ($IsGoodHeap $h@@3) (and (_module.Lang.L_q d@@3) ($IsAlloc DatatypeTypeType d@@3 (Tclass._module.Lang _module.Lang$S@@6) $h@@3))) ($IsAlloc HandleTypeType (_module.Lang.deriv d@@3) (Tclass._System.___hFunc1 _module.Lang$S@@6 (Tclass._module.Lang _module.Lang$S@@6)) $h@@3))
 :pattern ( ($IsAlloc HandleTypeType (_module.Lang.deriv d@@3) (Tclass._System.___hFunc1 _module.Lang$S@@6 (Tclass._module.Lang _module.Lang$S@@6)) $h@@3))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|_module._default.TotalLang#$S@@2| T@U) ($ly@@11 T@U) ($Heap@@5 T@U) (|l#0@@10| T@U) ) (!  (=> (and (and ($IsGoodHeap $Heap@@5) ($Is DatatypeTypeType |l#0@@10| (Tclass._module.Lang |_module._default.TotalLang#$S@@2|))) (forall ((|_k#0@@2| T@U) ) (! (_module.__default.TotalLang_h |_module._default.TotalLang#$S@@2| ($LS $ly@@11) $Heap@@5 |_k#0@@2| |l#0@@10|)
 :pattern ( (_module.__default.TotalLang_h |_module._default.TotalLang#$S@@2| ($LS $ly@@11) $Heap@@5 |_k#0@@2| |l#0@@10|))
))) (_module.__default.TotalLang |_module._default.TotalLang#$S@@2| ($LS $ly@@11) $Heap@@5 |l#0@@10|))
 :pattern ( (_module.__default.TotalLang |_module._default.TotalLang#$S@@2| ($LS $ly@@11) $Heap@@5 |l#0@@10|))
))))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((x@@7 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@7)) (Lit BoxType ($Box T@@4 x@@7)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@7)))
)))
(assert (forall ((h@@7 T@U) (v@@3 T@U) ) (! ($IsAlloc boolType v@@3 TBool h@@7)
 :pattern ( ($IsAlloc boolType v@@3 TBool h@@7))
)))
(assert (forall ((h@@8 T@U) (v@@4 T@U) ) (! ($IsAlloc charType v@@4 TChar h@@8)
 :pattern ( ($IsAlloc charType v@@4 TChar h@@8))
)))
(assert (forall ((|l#0@@11| T@U) (|$l#0#heap#0@@1| T@U) (|$l#0#s#0@@0| T@U) ) (! (= (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType (|lambda#6| |l#0@@11|) |$l#0#heap#0@@1| |$l#0#s#0@@0|) |l#0@@11|)
 :pattern ( (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType (|lambda#6| |l#0@@11|) |$l#0#heap#0@@1| |$l#0#s#0@@0|))
)))
(assert (forall ((|l#0@@12| T@U) (|$l#0#heap#0@@2| T@U) (|$l#0#s#0@@1| T@U) ) (! (= (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType SetType (|lambda#9| |l#0@@12|) |$l#0#heap#0@@2| |$l#0#s#0@@1|) |l#0@@12|)
 :pattern ( (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType SetType (|lambda#9| |l#0@@12|) |$l#0#heap#0@@2| |$l#0#s#0@@1|))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|_module._default.TotalLang#$S@@3| T@U) ($ly@@12 T@U) ($Heap@@6 T@U) (|_k#0@@3| T@U) (|l#0@@13| T@U) ) (!  (=> (or (|_module.__default.TotalLang_h#canCall| |_module._default.TotalLang#$S@@3| $Heap@@6 |_k#0@@3| |l#0@@13|) (and (< 2 $FunctionContextHeight) (and ($IsGoodHeap $Heap@@6) ($Is DatatypeTypeType |l#0@@13| (Tclass._module.Lang |_module._default.TotalLang#$S@@3|))))) (and (and (=> (< 0 (|ORD#Offset| |_k#0@@3|)) (forall ((|s#3| T@U) ) (!  (=> ($IsBox |s#3| |_module._default.TotalLang#$S@@3|) (and (and (_module.Lang.L_q |l#0@@13|) true) (=> (Requires1 |_module._default.TotalLang#$S@@3| (Tclass._module.Lang |_module._default.TotalLang#$S@@3|) $Heap@@6 (_module.Lang.deriv |l#0@@13|) |s#3|) (and (and (_module.Lang.L_q |l#0@@13|) true) (=> (|Set#Equal| (Reads1 |_module._default.TotalLang#$S@@3| (Tclass._module.Lang |_module._default.TotalLang#$S@@3|) $Heap@@6 (_module.Lang.deriv |l#0@@13|) |s#3|) |Set#Empty|) (and (_module.Lang.L_q |l#0@@13|) (|_module.__default.TotalLang_h#canCall| |_module._default.TotalLang#$S@@3| $Heap@@6 (|ORD#Minus| |_k#0@@3| (|ORD#FromNat| 1)) ($Unbox DatatypeTypeType (Apply1 |_module._default.TotalLang#$S@@3| (Tclass._module.Lang |_module._default.TotalLang#$S@@3|) $Heap@@6 (_module.Lang.deriv |l#0@@13|) |s#3|)))))))))
 :pattern ( ($Unbox DatatypeTypeType (Apply1 |_module._default.TotalLang#$S@@3| (Tclass._module.Lang |_module._default.TotalLang#$S@@3|) $Heap@@6 (_module.Lang.deriv |l#0@@13|) |s#3|)))
 :pattern ( (Reads1 |_module._default.TotalLang#$S@@3| (Tclass._module.Lang |_module._default.TotalLang#$S@@3|) $Heap@@6 (_module.Lang.deriv |l#0@@13|) |s#3|))
 :pattern ( (Requires1 |_module._default.TotalLang#$S@@3| (Tclass._module.Lang |_module._default.TotalLang#$S@@3|) $Heap@@6 (_module.Lang.deriv |l#0@@13|) |s#3|))
))) (=> (=> (< 0 (|ORD#Offset| |_k#0@@3|)) (forall ((|s#3@@0| T@U) ) (!  (=> ($IsBox |s#3@@0| |_module._default.TotalLang#$S@@3|) (and (and (Requires1 |_module._default.TotalLang#$S@@3| (Tclass._module.Lang |_module._default.TotalLang#$S@@3|) $Heap@@6 (_module.Lang.deriv |l#0@@13|) |s#3@@0|) (|Set#Equal| (Reads1 |_module._default.TotalLang#$S@@3| (Tclass._module.Lang |_module._default.TotalLang#$S@@3|) $Heap@@6 (_module.Lang.deriv |l#0@@13|) |s#3@@0|) |Set#Empty|)) (_module.__default.TotalLang_h |_module._default.TotalLang#$S@@3| $ly@@12 $Heap@@6 (|ORD#Minus| |_k#0@@3| (|ORD#FromNat| 1)) ($Unbox DatatypeTypeType (Apply1 |_module._default.TotalLang#$S@@3| (Tclass._module.Lang |_module._default.TotalLang#$S@@3|) $Heap@@6 (_module.Lang.deriv |l#0@@13|) |s#3@@0|)))))
 :pattern ( ($Unbox DatatypeTypeType (Apply1 |_module._default.TotalLang#$S@@3| (Tclass._module.Lang |_module._default.TotalLang#$S@@3|) $Heap@@6 (_module.Lang.deriv |l#0@@13|) |s#3@@0|)))
 :pattern ( (Reads1 |_module._default.TotalLang#$S@@3| (Tclass._module.Lang |_module._default.TotalLang#$S@@3|) $Heap@@6 (_module.Lang.deriv |l#0@@13|) |s#3@@0|))
 :pattern ( (Requires1 |_module._default.TotalLang#$S@@3| (Tclass._module.Lang |_module._default.TotalLang#$S@@3|) $Heap@@6 (_module.Lang.deriv |l#0@@13|) |s#3@@0|))
))) (=> (= (LitInt 0) (|ORD#Offset| |_k#0@@3|)) (forall ((|_k'#0| T@U) ) (!  (=> (|ORD#Less| |_k'#0| |_k#0@@3|) (|_module.__default.TotalLang_h#canCall| |_module._default.TotalLang#$S@@3| $Heap@@6 |_k'#0| |l#0@@13|))
 :pattern ( (_module.__default.TotalLang_h |_module._default.TotalLang#$S@@3| $ly@@12 $Heap@@6 |_k'#0| |l#0@@13|))
))))) (= (_module.__default.TotalLang_h |_module._default.TotalLang#$S@@3| ($LS $ly@@12) $Heap@@6 |_k#0@@3| |l#0@@13|)  (and (=> (< 0 (|ORD#Offset| |_k#0@@3|)) (forall ((|s#3@@1| T@U) ) (!  (=> ($IsBox |s#3@@1| |_module._default.TotalLang#$S@@3|) (and (and (Requires1 |_module._default.TotalLang#$S@@3| (Tclass._module.Lang |_module._default.TotalLang#$S@@3|) $Heap@@6 (_module.Lang.deriv |l#0@@13|) |s#3@@1|) (|Set#Equal| (Reads1 |_module._default.TotalLang#$S@@3| (Tclass._module.Lang |_module._default.TotalLang#$S@@3|) $Heap@@6 (_module.Lang.deriv |l#0@@13|) |s#3@@1|) |Set#Empty|)) (_module.__default.TotalLang_h |_module._default.TotalLang#$S@@3| $ly@@12 $Heap@@6 (|ORD#Minus| |_k#0@@3| (|ORD#FromNat| 1)) ($Unbox DatatypeTypeType (Apply1 |_module._default.TotalLang#$S@@3| (Tclass._module.Lang |_module._default.TotalLang#$S@@3|) $Heap@@6 (_module.Lang.deriv |l#0@@13|) |s#3@@1|)))))
 :pattern ( ($Unbox DatatypeTypeType (Apply1 |_module._default.TotalLang#$S@@3| (Tclass._module.Lang |_module._default.TotalLang#$S@@3|) $Heap@@6 (_module.Lang.deriv |l#0@@13|) |s#3@@1|)))
 :pattern ( (Reads1 |_module._default.TotalLang#$S@@3| (Tclass._module.Lang |_module._default.TotalLang#$S@@3|) $Heap@@6 (_module.Lang.deriv |l#0@@13|) |s#3@@1|))
 :pattern ( (Requires1 |_module._default.TotalLang#$S@@3| (Tclass._module.Lang |_module._default.TotalLang#$S@@3|) $Heap@@6 (_module.Lang.deriv |l#0@@13|) |s#3@@1|))
))) (=> (= (LitInt 0) (|ORD#Offset| |_k#0@@3|)) (forall ((|_k'#0@@0| T@U) ) (!  (=> (|ORD#Less| |_k'#0@@0| |_k#0@@3|) (_module.__default.TotalLang_h |_module._default.TotalLang#$S@@3| $ly@@12 $Heap@@6 |_k'#0@@0| |l#0@@13|))
 :pattern ( (_module.__default.TotalLang_h |_module._default.TotalLang#$S@@3| $ly@@12 $Heap@@6 |_k'#0@@0| |l#0@@13|))
)))))))
 :pattern ( (_module.__default.TotalLang_h |_module._default.TotalLang#$S@@3| ($LS $ly@@12) $Heap@@6 |_k#0@@3| |l#0@@13|) ($IsGoodHeap $Heap@@6))
))))
(assert (forall ((v@@5 T@U) ) (! ($Is boolType v@@5 TBool)
 :pattern ( ($Is boolType v@@5 TBool))
)))
(assert (forall ((v@@6 T@U) ) (! ($Is charType v@@6 TChar)
 :pattern ( ($Is charType v@@6 TChar))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $Heap@4 () T@U)
(declare-fun |_k#0@@4| () T@U)
(declare-fun $LZ () T@U)
(declare-fun $Heap@3 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun $Heap@0 () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun |_k##0@0| () T@U)
(declare-fun $Heap@2 () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun $Heap@@7 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 9) (let ((GeneratedUnifiedExit_correct  (and (=> (= (ControlFlow 0 2) (- 0 3)) (=> (|_module.__default.TotalLang_h#canCall| TChar $Heap@4 |_k#0@@4| (Lit DatatypeTypeType (_module.__default.OnlyDs ($LS $LZ)))) (or (_module.__default.TotalLang_h TChar ($LS $LZ) $Heap@4 |_k#0@@4| (Lit DatatypeTypeType (_module.__default.OnlyDs ($LS $LZ)))) (=> (< 0 (|ORD#Offset| |_k#0@@4|)) (forall ((|s#2| T@U) ) (!  (=> ($Is charType |s#2| TChar) (and (and (Requires1 TChar (Tclass._module.Lang TChar) $Heap@4 (Lit HandleTypeType (_module.Lang.deriv (Lit DatatypeTypeType (_module.__default.OnlyDs ($LS ($LS $LZ)))))) ($Box charType |s#2|)) (|Set#Equal| (Reads1 TChar (Tclass._module.Lang TChar) $Heap@4 (Lit HandleTypeType (_module.Lang.deriv (Lit DatatypeTypeType (_module.__default.OnlyDs ($LS ($LS $LZ)))))) ($Box charType |s#2|)) |Set#Empty|)) (_module.__default.TotalLang_h TChar ($LS ($LS $LZ)) $Heap@4 (|ORD#Minus| |_k#0@@4| (|ORD#FromNat| 1)) ($Unbox DatatypeTypeType (Apply1 TChar (Tclass._module.Lang TChar) $Heap@4 (Lit HandleTypeType (_module.Lang.deriv (Lit DatatypeTypeType (_module.__default.OnlyDs ($LS ($LS $LZ)))))) ($Box charType |s#2|))))))
 :pattern ( ($Unbox DatatypeTypeType (Apply1 TChar (Tclass._module.Lang TChar) $Heap@4 (_module.Lang.deriv (_module.__default.OnlyDs ($LS ($LS $LZ)))) ($Box charType |s#2|))))
 :pattern ( (Reads1 TChar (Tclass._module.Lang TChar) $Heap@4 (_module.Lang.deriv (_module.__default.OnlyDs ($LS ($LS $LZ)))) ($Box charType |s#2|)))
 :pattern ( (Requires1 TChar (Tclass._module.Lang TChar) $Heap@4 (_module.Lang.deriv (_module.__default.OnlyDs ($LS ($LS $LZ)))) ($Box charType |s#2|)))
)))))) (=> (=> (|_module.__default.TotalLang_h#canCall| TChar $Heap@4 |_k#0@@4| (Lit DatatypeTypeType (_module.__default.OnlyDs ($LS $LZ)))) (or (_module.__default.TotalLang_h TChar ($LS $LZ) $Heap@4 |_k#0@@4| (Lit DatatypeTypeType (_module.__default.OnlyDs ($LS $LZ)))) (=> (< 0 (|ORD#Offset| |_k#0@@4|)) (forall ((|s#2@@0| T@U) ) (!  (=> ($Is charType |s#2@@0| TChar) (and (and (Requires1 TChar (Tclass._module.Lang TChar) $Heap@4 (Lit HandleTypeType (_module.Lang.deriv (Lit DatatypeTypeType (_module.__default.OnlyDs ($LS ($LS $LZ)))))) ($Box charType |s#2@@0|)) (|Set#Equal| (Reads1 TChar (Tclass._module.Lang TChar) $Heap@4 (Lit HandleTypeType (_module.Lang.deriv (Lit DatatypeTypeType (_module.__default.OnlyDs ($LS ($LS $LZ)))))) ($Box charType |s#2@@0|)) |Set#Empty|)) (_module.__default.TotalLang_h TChar ($LS ($LS $LZ)) $Heap@4 (|ORD#Minus| |_k#0@@4| (|ORD#FromNat| 1)) ($Unbox DatatypeTypeType (Apply1 TChar (Tclass._module.Lang TChar) $Heap@4 (Lit HandleTypeType (_module.Lang.deriv (Lit DatatypeTypeType (_module.__default.OnlyDs ($LS ($LS $LZ)))))) ($Box charType |s#2@@0|))))))
 :pattern ( ($Unbox DatatypeTypeType (Apply1 TChar (Tclass._module.Lang TChar) $Heap@4 (_module.Lang.deriv (_module.__default.OnlyDs ($LS ($LS $LZ)))) ($Box charType |s#2@@0|))))
 :pattern ( (Reads1 TChar (Tclass._module.Lang TChar) $Heap@4 (_module.Lang.deriv (_module.__default.OnlyDs ($LS ($LS $LZ)))) ($Box charType |s#2@@0|)))
 :pattern ( (Requires1 TChar (Tclass._module.Lang TChar) $Heap@4 (_module.Lang.deriv (_module.__default.OnlyDs ($LS ($LS $LZ)))) ($Box charType |s#2@@0|)))
))))) (=> (= (ControlFlow 0 2) (- 0 1)) (=> (|_module.__default.TotalLang_h#canCall| TChar $Heap@4 |_k#0@@4| (Lit DatatypeTypeType (_module.__default.OnlyDs ($LS $LZ)))) (or (_module.__default.TotalLang_h TChar ($LS $LZ) $Heap@4 |_k#0@@4| (Lit DatatypeTypeType (_module.__default.OnlyDs ($LS $LZ)))) (=> (= (LitInt 0) (|ORD#Offset| |_k#0@@4|)) (forall ((|_k'#1| T@U) ) (!  (=> (|ORD#Less| |_k'#1| |_k#0@@4|) (_module.__default.TotalLang_h TChar ($LS ($LS $LZ)) $Heap@4 |_k'#1| (Lit DatatypeTypeType (_module.__default.OnlyDs ($LS ($LS $LZ))))))
 :pattern ( (_module.__default.TotalLang_h TChar ($LS ($LS $LZ)) $Heap@4 |_k'#1| (_module.__default.OnlyDs ($LS ($LS $LZ)))))
))))))))))
(let ((anon3_Else_correct  (=> (<= (|ORD#Offset| |_k#0@@4|) 0) (=> (and ($IsGoodHeap $Heap@3) ($IsHeapAnchor $Heap@3)) (=> (and (and (= $Heap@0 $Heap@3) (forall ((|_k'#2| T@U) ) (!  (=> (|ORD#Less| |_k'#2| |_k#0@@4|) (_module.__default.TotalLang_h TChar ($LS $LZ) $Heap@3 |_k'#2| (Lit DatatypeTypeType (_module.__default.OnlyDs ($LS $LZ)))))
 :pattern ( (_module.__default.TotalLang_h TChar ($LS $LZ) $Heap@3 |_k'#2| (_module.__default.OnlyDs ($LS $LZ))))
 :pattern ( (|ORD#Less| |_k'#2| |_k#0@@4|))
))) (and (= $Heap@4 $Heap@3) (= (ControlFlow 0 7) 2))) GeneratedUnifiedExit_correct)))))
(let ((anon3_Then_correct  (=> (< 0 (|ORD#Offset| |_k#0@@4|)) (=> (and (and (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1)) (and (|_module.__default.Nothing#canCall| TChar) (|_module.__default.TotalLang#canCall| TChar $Heap@1 (Lit DatatypeTypeType (_module.__default.Nothing TChar ($LS $LZ)))))) (and (and (|_module.__default.TotalLang#canCall| TChar $Heap@1 (Lit DatatypeTypeType (_module.__default.Nothing TChar ($LS $LZ)))) (and (_module.__default.TotalLang TChar ($LS $LZ) $Heap@1 (Lit DatatypeTypeType (_module.__default.Nothing TChar ($LS $LZ)))) (forall ((|s#0@@1| T@U) ) (!  (=> ($IsBox |s#0@@1| TChar) (and (and (Requires1 TChar (Tclass._module.Lang TChar) $Heap@1 (Lit HandleTypeType (_module.Lang.deriv (Lit DatatypeTypeType (_module.__default.Nothing TChar ($LS $LZ))))) |s#0@@1|) (|Set#Equal| (Reads1 TChar (Tclass._module.Lang TChar) $Heap@1 (Lit HandleTypeType (_module.Lang.deriv (Lit DatatypeTypeType (_module.__default.Nothing TChar ($LS $LZ))))) |s#0@@1|) |Set#Empty|)) (_module.__default.TotalLang TChar ($LS $LZ) $Heap@1 ($Unbox DatatypeTypeType (Apply1 TChar (Tclass._module.Lang TChar) $Heap@1 (Lit HandleTypeType (_module.Lang.deriv (Lit DatatypeTypeType (_module.__default.Nothing TChar ($LS $LZ))))) |s#0@@1|)))))
 :pattern ( ($Unbox DatatypeTypeType (Apply1 TChar (Tclass._module.Lang TChar) $Heap@1 (_module.Lang.deriv (_module.__default.Nothing TChar ($LS $LZ))) |s#0@@1|)))
 :pattern ( (Reads1 TChar (Tclass._module.Lang TChar) $Heap@1 (_module.Lang.deriv (_module.__default.Nothing TChar ($LS $LZ))) |s#0@@1|))
 :pattern ( (Requires1 TChar (Tclass._module.Lang TChar) $Heap@1 (_module.Lang.deriv (_module.__default.Nothing TChar ($LS $LZ))) |s#0@@1|))
)))) (= $Heap@0 $Heap@1))) (and (=> (= (ControlFlow 0 4) (- 0 6)) (|ORD#IsNat| (Lit BoxType (|ORD#FromNat| 1)))) (=> (|ORD#IsNat| (Lit BoxType (|ORD#FromNat| 1))) (and (=> (= (ControlFlow 0 4) (- 0 5)) (<= (|ORD#Offset| (Lit BoxType (|ORD#FromNat| 1))) (|ORD#Offset| |_k#0@@4|))) (=> (<= (|ORD#Offset| (Lit BoxType (|ORD#FromNat| 1))) (|ORD#Offset| |_k#0@@4|)) (=> (= |_k##0@0| (|ORD#Minus| |_k#0@@4| (|ORD#FromNat| 1))) (=> (and (and ($IsGoodHeap $Heap@2) ($IsHeapAnchor $Heap@2)) (and |_module.__default.OnlyDs#canCall| (|_module.__default.TotalLang_h#canCall| TChar $Heap@2 |_k##0@0| (Lit DatatypeTypeType (_module.__default.OnlyDs ($LS $LZ)))))) (=> (and (and (and (|_module.__default.TotalLang_h#canCall| TChar $Heap@2 |_k##0@0| (Lit DatatypeTypeType (_module.__default.OnlyDs ($LS $LZ)))) (and (_module.__default.TotalLang_h TChar ($LS $LZ) $Heap@2 |_k##0@0| (Lit DatatypeTypeType (_module.__default.OnlyDs ($LS $LZ)))) (and (=> (< 0 (|ORD#Offset| |_k##0@0|)) (forall ((|s#1| T@U) ) (!  (=> ($Is charType |s#1| TChar) (and (and (Requires1 TChar (Tclass._module.Lang TChar) $Heap@2 (Lit HandleTypeType (_module.Lang.deriv (Lit DatatypeTypeType (_module.__default.OnlyDs ($LS $LZ))))) ($Box charType |s#1|)) (|Set#Equal| (Reads1 TChar (Tclass._module.Lang TChar) $Heap@2 (Lit HandleTypeType (_module.Lang.deriv (Lit DatatypeTypeType (_module.__default.OnlyDs ($LS $LZ))))) ($Box charType |s#1|)) |Set#Empty|)) (_module.__default.TotalLang_h TChar ($LS $LZ) $Heap@2 (|ORD#Minus| |_k##0@0| (|ORD#FromNat| 1)) ($Unbox DatatypeTypeType (Apply1 TChar (Tclass._module.Lang TChar) $Heap@2 (Lit HandleTypeType (_module.Lang.deriv (Lit DatatypeTypeType (_module.__default.OnlyDs ($LS $LZ))))) ($Box charType |s#1|))))))
 :pattern ( ($Unbox DatatypeTypeType (Apply1 TChar (Tclass._module.Lang TChar) $Heap@2 (_module.Lang.deriv (_module.__default.OnlyDs ($LS $LZ))) ($Box charType |s#1|))))
 :pattern ( (Reads1 TChar (Tclass._module.Lang TChar) $Heap@2 (_module.Lang.deriv (_module.__default.OnlyDs ($LS $LZ))) ($Box charType |s#1|)))
 :pattern ( (Requires1 TChar (Tclass._module.Lang TChar) $Heap@2 (_module.Lang.deriv (_module.__default.OnlyDs ($LS $LZ))) ($Box charType |s#1|)))
))) (=> (= (LitInt 0) (|ORD#Offset| |_k##0@0|)) (forall ((|_k'#0@@1| T@U) ) (!  (=> (|ORD#Less| |_k'#0@@1| |_k##0@0|) (_module.__default.TotalLang_h TChar ($LS $LZ) $Heap@2 |_k'#0@@1| (Lit DatatypeTypeType (_module.__default.OnlyDs ($LS $LZ)))))
 :pattern ( (_module.__default.TotalLang_h TChar ($LS $LZ) $Heap@2 |_k'#0@@1| (_module.__default.OnlyDs ($LS $LZ))))
)))))) (= $Heap@1 $Heap@2)) (and (= $Heap@4 $Heap@2) (= (ControlFlow 0 4) 2))) GeneratedUnifiedExit_correct)))))))))))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap@@7 alloc false)) (=> (and (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (and (= $Heap@@7 $Heap@0) (forall ((|$ih#_k0#0| T@U) ) (!  (=> (and (U_2_bool (Lit boolType (bool_2_U true))) (|ORD#Less| |$ih#_k0#0| |_k#0@@4|)) (_module.__default.TotalLang_h TChar ($LS $LZ) $Heap@0 |$ih#_k0#0| (Lit DatatypeTypeType (_module.__default.OnlyDs ($LS $LZ)))))
 :pattern ( (_module.__default.TotalLang_h TChar ($LS $LZ) $Heap@0 |$ih#_k0#0| (Lit DatatypeTypeType (_module.__default.OnlyDs ($LS $LZ)))))
)))) (and (=> (= (ControlFlow 0 8) 4) anon3_Then_correct) (=> (= (ControlFlow 0 8) 7) anon3_Else_correct))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and ($IsGoodHeap $Heap@@7) ($IsHeapAnchor $Heap@@7)) (and (= 4 $FunctionContextHeight) (= (ControlFlow 0 9) 8))) anon0_correct)))
PreconditionGeneratedEntry_correct))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
