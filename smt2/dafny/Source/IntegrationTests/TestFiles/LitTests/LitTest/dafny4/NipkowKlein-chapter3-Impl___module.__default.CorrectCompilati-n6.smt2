(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TChar () T@U)
(declare-fun TInt () T@U)
(declare-fun TagChar () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagSeq () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._System.___hFunc1 () T@U)
(declare-fun Tagclass._System.___hPartialFunc1 () T@U)
(declare-fun Tagclass._System.___hTotalFunc1 () T@U)
(declare-fun Tagclass._module.List () T@U)
(declare-fun Tagclass._module.aexp () T@U)
(declare-fun Tagclass._module.instr () T@U)
(declare-fun |##_module.List.Nil| () T@U)
(declare-fun |##_module.List.Cons| () T@U)
(declare-fun |##_module.aexp.N| () T@U)
(declare-fun |##_module.aexp.V| () T@U)
(declare-fun |##_module.aexp.Plus| () T@U)
(declare-fun |##_module.instr.LOADI| () T@U)
(declare-fun |##_module.instr.LOAD| () T@U)
(declare-fun |##_module.instr.ADD| () T@U)
(declare-fun |tytagFamily$_#Func1| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1| () T@U)
(declare-fun |tytagFamily$_#TotalFunc1| () T@U)
(declare-fun tytagFamily$List () T@U)
(declare-fun tytagFamily$aexp () T@U)
(declare-fun tytagFamily$instr () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun |#_module.aexp.Plus| (T@U T@U) T@U)
(declare-fun Tclass._module.aexp () T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.append (T@U T@U T@U T@U) T@U)
(declare-fun $LS (T@U) T@U)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun |_module.__default.append#canCall| (T@U T@U T@U) Bool)
(declare-fun Tclass._module.List (T@U) T@U)
(declare-fun _module.List.Nil_q (T@U) Bool)
(declare-fun _module.List.tail (T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun _module.List.head (T@U) T@U)
(declare-fun |#_module.List.Cons| (T@U T@U) T@U)
(declare-fun _module.__default.aval (T@U T@U T@U) Int)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun |_module.__default.aval#canCall| (T@U T@U) Bool)
(declare-fun HandleTypeType () T@T)
(declare-fun Tclass._System.___hTotalFunc1 (T@U T@U) T@U)
(declare-fun TSeq (T@U) T@U)
(declare-fun _module.aexp.N_q (T@U) Bool)
(declare-fun _module.aexp.V_q (T@U) Bool)
(declare-fun _module.aexp._h2 (T@U) T@U)
(declare-fun _module.aexp._h1 (T@U) T@U)
(declare-fun _module.aexp.n (T@U) Int)
(declare-fun _module.aexp._h0 (T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun Apply1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun SeqType () T@T)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun |#_module.aexp.V| (T@U) T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun |#_module.instr.LOAD| (T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun |Set#Empty| () T@U)
(declare-fun |Seq#Empty| () T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun |#_module.List.Nil| () T@U)
(declare-fun |#_module.instr.ADD| () T@U)
(declare-fun _module.__default.exec (T@U T@U T@U T@U) T@U)
(declare-fun |_module.__default.exec#canCall| (T@U T@U T@U) Bool)
(declare-fun Tclass._module.instr () T@U)
(declare-fun _module.__default.exec1 (T@U T@U T@U) T@U)
(declare-fun |_module.__default.exec1#canCall| (T@U T@U T@U) Bool)
(declare-fun _module.instr.LOADI_q (T@U) Bool)
(declare-fun LitInt (Int) Int)
(declare-fun _module.instr._h12 (T@U) Int)
(declare-fun _module.instr.LOAD_q (T@U) Bool)
(declare-fun _module.instr._h13 (T@U) T@U)
(declare-fun _module.List.Cons_q (T@U) Bool)
(declare-fun Tclass._System.___hFunc1 (T@U T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun |_module.List#Equal| (T@U T@U) Bool)
(declare-fun Reads1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun $OneHeap () T@U)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun _module.aexp.Plus_q (T@U) Bool)
(declare-fun _module.instr.ADD_q (T@U) Bool)
(declare-fun |#_module.aexp.N| (Int) T@U)
(declare-fun |#_module.instr.LOADI| (Int) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun TagFamily (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1 (T@U T@U) T@U)
(declare-fun _module.__default.comp (T@U T@U) T@U)
(declare-fun |_module.__default.comp#canCall| (T@U) Bool)
(declare-fun $LZ () T@U)
(declare-fun Requires1 (T@U T@U T@U T@U T@U) Bool)
(declare-fun |$IsA#_module.List| (T@U) Bool)
(declare-fun charType () T@T)
(declare-fun Tclass._System.___hFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1_1 (T@U) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun Tclass._module.List_0 (T@U) T@U)
(declare-fun |$IsA#_module.aexp| (T@U) Bool)
(declare-fun BoxRank (T@U) Int)
(declare-fun refType () T@T)
(declare-fun null () T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun |Seq#Rank| (T@U) Int)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TChar TInt TagChar TagInt TagSeq alloc Tagclass._System.___hFunc1 Tagclass._System.___hPartialFunc1 Tagclass._System.___hTotalFunc1 Tagclass._module.List Tagclass._module.aexp Tagclass._module.instr |##_module.List.Nil| |##_module.List.Cons| |##_module.aexp.N| |##_module.aexp.V| |##_module.aexp.Plus| |##_module.instr.LOADI| |##_module.instr.LOAD| |##_module.instr.ADD| |tytagFamily$_#Func1| |tytagFamily$_#PartialFunc1| |tytagFamily$_#TotalFunc1| tytagFamily$List tytagFamily$aexp tytagFamily$instr)
)
(assert (= (Tag TChar) TagChar))
(assert (= (Tag TInt) TagInt))
(assert (= (Ctor DatatypeTypeType) 3))
(assert (forall ((|a#26#0#0| T@U) (|a#26#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.aexp.Plus| |a#26#0#0| |a#26#1#0|) Tclass._module.aexp)  (and ($Is DatatypeTypeType |a#26#0#0| Tclass._module.aexp) ($Is DatatypeTypeType |a#26#1#0| Tclass._module.aexp)))
 :pattern ( ($Is DatatypeTypeType (|#_module.aexp.Plus| |a#26#0#0| |a#26#1#0|) Tclass._module.aexp))
)))
(assert (= (Ctor BoxType) 4))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module._default.append$_T0 T@U) ($ly T@U) (|xs#0| T@U) (|ys#0| T@U) ) (!  (=> (or (|_module.__default.append#canCall| _module._default.append$_T0 (Lit DatatypeTypeType |xs#0|) (Lit DatatypeTypeType |ys#0|)) (and (< 1 $FunctionContextHeight) (and ($Is DatatypeTypeType |xs#0| (Tclass._module.List _module._default.append$_T0)) ($Is DatatypeTypeType |ys#0| (Tclass._module.List _module._default.append$_T0))))) (and (=> (not (U_2_bool (Lit boolType (bool_2_U (_module.List.Nil_q (Lit DatatypeTypeType |xs#0|)))))) (let ((|tail#3| (Lit DatatypeTypeType (_module.List.tail (Lit DatatypeTypeType |xs#0|)))))
(|_module.__default.append#canCall| _module._default.append$_T0 |tail#3| (Lit DatatypeTypeType |ys#0|)))) (= (_module.__default.append _module._default.append$_T0 ($LS $ly) (Lit DatatypeTypeType |xs#0|) (Lit DatatypeTypeType |ys#0|)) (ite (_module.List.Nil_q (Lit DatatypeTypeType |xs#0|)) |ys#0| (let ((|tail#2| (Lit DatatypeTypeType (_module.List.tail (Lit DatatypeTypeType |xs#0|)))))
(let ((|x#2| (Lit BoxType (_module.List.head (Lit DatatypeTypeType |xs#0|)))))
(Lit DatatypeTypeType (|#_module.List.Cons| |x#2| (Lit DatatypeTypeType (_module.__default.append _module._default.append$_T0 ($LS $ly) |tail#2| (Lit DatatypeTypeType |ys#0|)))))))))))
 :weight 3
 :pattern ( (_module.__default.append _module._default.append$_T0 ($LS $ly) (Lit DatatypeTypeType |xs#0|) (Lit DatatypeTypeType |ys#0|)))
))))
(assert  (and (= (Ctor HandleTypeType) 5) (= (Ctor SeqType) 6)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($ly@@0 T@U) ($Heap T@U) (|a#0| T@U) (|s#0| T@U) ) (!  (=> (or (|_module.__default.aval#canCall| |a#0| |s#0|) (and (< 2 $FunctionContextHeight) (and (and ($IsGoodHeap $Heap) ($Is DatatypeTypeType |a#0| Tclass._module.aexp)) ($Is HandleTypeType |s#0| (Tclass._System.___hTotalFunc1 (TSeq TChar) TInt))))) (and (=> (not (_module.aexp.N_q |a#0|)) (=> (not (_module.aexp.V_q |a#0|)) (let ((|a1#1| (_module.aexp._h2 |a#0|)))
(let ((|a0#1| (_module.aexp._h1 |a#0|)))
 (and (|_module.__default.aval#canCall| |a0#1| |s#0|) (|_module.__default.aval#canCall| |a1#1| |s#0|)))))) (= (_module.__default.aval ($LS $ly@@0) |a#0| |s#0|) (ite (_module.aexp.N_q |a#0|) (let ((|n#0| (_module.aexp.n |a#0|)))
|n#0|) (ite (_module.aexp.V_q |a#0|) (U_2_int (let ((|x#0| (_module.aexp._h0 |a#0|)))
($Unbox intType (Apply1 (TSeq TChar) TInt $Heap |s#0| ($Box SeqType |x#0|))))) (let ((|a1#0| (_module.aexp._h2 |a#0|)))
(let ((|a0#0| (_module.aexp._h1 |a#0|)))
(+ (_module.__default.aval $ly@@0 |a0#0| |s#0|) (_module.__default.aval $ly@@0 |a1#0| |s#0|)))))))))
 :pattern ( (_module.__default.aval ($LS $ly@@0) |a#0| |s#0|) ($IsGoodHeap $Heap))
))))
(assert (forall ((|a#22#0#0| T@U) (i Int) ) (!  (=> (and (<= 0 i) (< i (|Seq#Length| |a#22#0#0|))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#22#0#0| i))) (DtRank (|#_module.aexp.V| |a#22#0#0|))))
 :pattern ( (|Seq#Index| |a#22#0#0| i) (|#_module.aexp.V| |a#22#0#0|))
)))
(assert (forall ((|a#69#0#0| T@U) (i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| |a#69#0#0|))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#69#0#0| i@@0))) (DtRank (|#_module.instr.LOAD| |a#69#0#0|))))
 :pattern ( (|Seq#Index| |a#69#0#0| i@@0) (|#_module.instr.LOAD| |a#69#0#0|))
)))
(assert (forall ((o T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o))
 :pattern ( (|Set#IsMember| |Set#Empty| o))
)))
(assert (= (|Seq#Length| |Seq#Empty|) 0))
(assert (= (DatatypeCtorId |#_module.List.Nil|) |##_module.List.Nil|))
(assert (= (DatatypeCtorId |#_module.instr.ADD|) |##_module.instr.ADD|))
(assert  (=> (<= 3 $FunctionContextHeight) (forall (($ly@@1 T@U) (|ii#0| T@U) (|s#0@@0| T@U) (|stk#0| T@U) ) (!  (=> (or (|_module.__default.exec#canCall| |ii#0| |s#0@@0| |stk#0|) (and (< 3 $FunctionContextHeight) (and (and ($Is DatatypeTypeType |ii#0| (Tclass._module.List Tclass._module.instr)) ($Is HandleTypeType |s#0@@0| (Tclass._System.___hTotalFunc1 (TSeq TChar) TInt))) ($Is DatatypeTypeType |stk#0| (Tclass._module.List TInt))))) ($Is DatatypeTypeType (_module.__default.exec $ly@@1 |ii#0| |s#0@@0| |stk#0|) (Tclass._module.List TInt)))
 :pattern ( (_module.__default.exec $ly@@1 |ii#0| |s#0@@0| |stk#0|))
))))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($Heap@@0 T@U) (|i#0| T@U) (|s#0@@1| T@U) (|stk#0@@0| T@U) ) (!  (=> (or (|_module.__default.exec1#canCall| (Lit DatatypeTypeType |i#0|) |s#0@@1| (Lit DatatypeTypeType |stk#0@@0|)) (and (< 2 $FunctionContextHeight) (and (and (and ($IsGoodHeap $Heap@@0) ($Is DatatypeTypeType |i#0| Tclass._module.instr)) ($Is HandleTypeType |s#0@@1| (Tclass._System.___hTotalFunc1 (TSeq TChar) TInt))) ($Is DatatypeTypeType |stk#0@@0| (Tclass._module.List TInt))))) (= (_module.__default.exec1 (Lit DatatypeTypeType |i#0|) |s#0@@1| (Lit DatatypeTypeType |stk#0@@0|)) (ite (_module.instr.LOADI_q (Lit DatatypeTypeType |i#0|)) (let ((|n#2| (LitInt (_module.instr._h12 (Lit DatatypeTypeType |i#0|)))))
(Lit DatatypeTypeType (|#_module.List.Cons| ($Box intType (int_2_U |n#2|)) (Lit DatatypeTypeType |stk#0@@0|)))) (ite (_module.instr.LOAD_q (Lit DatatypeTypeType |i#0|)) (let ((|x#2@@0| (Lit SeqType (_module.instr._h13 (Lit DatatypeTypeType |i#0|)))))
(|#_module.List.Cons| (Apply1 (TSeq TChar) TInt $Heap@@0 |s#0@@1| ($Box SeqType |x#2@@0|)) (Lit DatatypeTypeType |stk#0@@0|))) (ite  (and (_module.List.Cons_q (Lit DatatypeTypeType |stk#0@@0|)) (_module.List.Cons_q (Lit DatatypeTypeType (_module.List.tail (Lit DatatypeTypeType |stk#0@@0|))))) (let ((|tail#2@@0| (_module.List.tail (_module.List.tail (Lit DatatypeTypeType |stk#0@@0|)))))
(let ((|a0#2| (U_2_int ($Unbox intType (_module.List.head (_module.List.tail (Lit DatatypeTypeType |stk#0@@0|)))))))
(let ((|a1#2| (U_2_int ($Unbox intType (_module.List.head (Lit DatatypeTypeType |stk#0@@0|))))))
(|#_module.List.Cons| ($Box intType (int_2_U (+ |a0#2| |a1#2|))) |tail#2@@0|)))) |#_module.List.Nil|)))))
 :weight 3
 :pattern ( (_module.__default.exec1 (Lit DatatypeTypeType |i#0|) |s#0@@1| (Lit DatatypeTypeType |stk#0@@0|)) ($IsGoodHeap $Heap@@0))
))))
(assert (forall ((f T@U) (t0 T@U) (t1 T@U) (u0 T@U) (u1 T@U) ) (!  (=> (and (and ($Is HandleTypeType f (Tclass._System.___hFunc1 t0 t1)) (forall ((bx T@U) ) (!  (=> ($IsBox bx u0) ($IsBox bx t0))
 :pattern ( ($IsBox bx u0))
 :pattern ( ($IsBox bx t0))
))) (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 t1) ($IsBox bx@@0 u1))
 :pattern ( ($IsBox bx@@0 t1))
 :pattern ( ($IsBox bx@@0 u1))
))) ($Is HandleTypeType f (Tclass._System.___hFunc1 u0 u1)))
 :pattern ( ($Is HandleTypeType f (Tclass._System.___hFunc1 t0 t1)) ($Is HandleTypeType f (Tclass._System.___hFunc1 u0 u1)))
)))
(assert (forall ((_module.List$T T@U) ($h T@U) ) (!  (=> ($IsGoodHeap $h) ($IsAlloc DatatypeTypeType |#_module.List.Nil| (Tclass._module.List _module.List$T) $h))
 :pattern ( ($IsAlloc DatatypeTypeType |#_module.List.Nil| (Tclass._module.List _module.List$T) $h))
)))
(assert ($Is DatatypeTypeType |#_module.instr.ADD| Tclass._module.instr))
(assert (forall ((_module.List$T@@0 T@U) ) (! ($Is DatatypeTypeType |#_module.List.Nil| (Tclass._module.List _module.List$T@@0))
 :pattern ( ($Is DatatypeTypeType |#_module.List.Nil| (Tclass._module.List _module.List$T@@0)))
)))
(assert (forall ((a T@U) (b T@U) ) (! (= (|_module.List#Equal| a b) (= a b))
 :pattern ( (|_module.List#Equal| a b))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) ) (!  (=> (and (_module.List.Cons_q a@@0) (_module.List.Cons_q b@@0)) (= (|_module.List#Equal| a@@0 b@@0)  (and (= (_module.List.head a@@0) (_module.List.head b@@0)) (|_module.List#Equal| (_module.List.tail a@@0) (_module.List.tail b@@0)))))
 :pattern ( (|_module.List#Equal| a@@0 b@@0) (_module.List.Cons_q a@@0))
 :pattern ( (|_module.List#Equal| a@@0 b@@0) (_module.List.Cons_q b@@0))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((t0@@0 T@U) (t1@@0 T@U) (heap T@U) (f@@0 T@U) (bx0 T@U) ) (!  (=> (and ($IsGoodHeap heap) (and ($IsBox bx0 t0@@0) ($Is HandleTypeType f@@0 (Tclass._System.___hFunc1 t0@@0 t1@@0)))) (= (|Set#Equal| (Reads1 t0@@0 t1@@0 $OneHeap f@@0 bx0) |Set#Empty|) (|Set#Equal| (Reads1 t0@@0 t1@@0 heap f@@0 bx0) |Set#Empty|)))
 :pattern ( (Reads1 t0@@0 t1@@0 $OneHeap f@@0 bx0) ($IsGoodHeap heap))
 :pattern ( (Reads1 t0@@0 t1@@0 heap f@@0 bx0))
)))
(assert (forall ((_module.List$T@@1 T@U) (|a#6#0#0| T@U) (|a#6#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.List.Cons| |a#6#0#0| |a#6#1#0|) (Tclass._module.List _module.List$T@@1))  (and ($IsBox |a#6#0#0| _module.List$T@@1) ($Is DatatypeTypeType |a#6#1#0| (Tclass._module.List _module.List$T@@1))))
 :pattern ( ($Is DatatypeTypeType (|#_module.List.Cons| |a#6#0#0| |a#6#1#0|) (Tclass._module.List _module.List$T@@1)))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module._default.append$_T0@@0 T@U) ($ly@@2 T@U) (|xs#0@@0| T@U) (|ys#0@@0| T@U) ) (!  (=> (or (|_module.__default.append#canCall| _module._default.append$_T0@@0 |xs#0@@0| |ys#0@@0|) (and (< 1 $FunctionContextHeight) (and ($Is DatatypeTypeType |xs#0@@0| (Tclass._module.List _module._default.append$_T0@@0)) ($Is DatatypeTypeType |ys#0@@0| (Tclass._module.List _module._default.append$_T0@@0))))) (and (=> (not (_module.List.Nil_q |xs#0@@0|)) (let ((|tail#1| (_module.List.tail |xs#0@@0|)))
(|_module.__default.append#canCall| _module._default.append$_T0@@0 |tail#1| |ys#0@@0|))) (= (_module.__default.append _module._default.append$_T0@@0 ($LS $ly@@2) |xs#0@@0| |ys#0@@0|) (ite (_module.List.Nil_q |xs#0@@0|) |ys#0@@0| (let ((|tail#0| (_module.List.tail |xs#0@@0|)))
(let ((|x#0@@0| (_module.List.head |xs#0@@0|)))
(|#_module.List.Cons| |x#0@@0| (_module.__default.append _module._default.append$_T0@@0 $ly@@2 |tail#0| |ys#0@@0|))))))))
 :pattern ( (_module.__default.append _module._default.append$_T0@@0 ($LS $ly@@2) |xs#0@@0| |ys#0@@0|))
))))
(assert (forall ((d T@U) ) (! (= (_module.List.Nil_q d) (= (DatatypeCtorId d) |##_module.List.Nil|))
 :pattern ( (_module.List.Nil_q d))
)))
(assert (forall ((d@@0 T@U) ) (! (= (_module.List.Cons_q d@@0) (= (DatatypeCtorId d@@0) |##_module.List.Cons|))
 :pattern ( (_module.List.Cons_q d@@0))
)))
(assert (forall ((d@@1 T@U) ) (! (= (_module.aexp.N_q d@@1) (= (DatatypeCtorId d@@1) |##_module.aexp.N|))
 :pattern ( (_module.aexp.N_q d@@1))
)))
(assert (forall ((d@@2 T@U) ) (! (= (_module.aexp.V_q d@@2) (= (DatatypeCtorId d@@2) |##_module.aexp.V|))
 :pattern ( (_module.aexp.V_q d@@2))
)))
(assert (forall ((d@@3 T@U) ) (! (= (_module.aexp.Plus_q d@@3) (= (DatatypeCtorId d@@3) |##_module.aexp.Plus|))
 :pattern ( (_module.aexp.Plus_q d@@3))
)))
(assert (forall ((d@@4 T@U) ) (! (= (_module.instr.LOADI_q d@@4) (= (DatatypeCtorId d@@4) |##_module.instr.LOADI|))
 :pattern ( (_module.instr.LOADI_q d@@4))
)))
(assert (forall ((d@@5 T@U) ) (! (= (_module.instr.LOAD_q d@@5) (= (DatatypeCtorId d@@5) |##_module.instr.LOAD|))
 :pattern ( (_module.instr.LOAD_q d@@5))
)))
(assert (forall ((d@@6 T@U) ) (! (= (_module.instr.ADD_q d@@6) (= (DatatypeCtorId d@@6) |##_module.instr.ADD|))
 :pattern ( (_module.instr.ADD_q d@@6))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((d@@7 T@U) ) (!  (=> (_module.List.Cons_q d@@7) (exists ((|a#5#0#0| T@U) (|a#5#1#0| T@U) ) (= d@@7 (|#_module.List.Cons| |a#5#0#0| |a#5#1#0|))))
 :pattern ( (_module.List.Cons_q d@@7))
)))
(assert (forall ((d@@8 T@U) ) (!  (=> (_module.aexp.Plus_q d@@8) (exists ((|a#25#0#0| T@U) (|a#25#1#0| T@U) ) (= d@@8 (|#_module.aexp.Plus| |a#25#0#0| |a#25#1#0|))))
 :pattern ( (_module.aexp.Plus_q d@@8))
)))
(assert (forall ((d@@9 T@U) ) (!  (=> (_module.List.Nil_q d@@9) (= d@@9 |#_module.List.Nil|))
 :pattern ( (_module.List.Nil_q d@@9))
)))
(assert (forall ((d@@10 T@U) ) (!  (=> (_module.instr.ADD_q d@@10) (= d@@10 |#_module.instr.ADD|))
 :pattern ( (_module.instr.ADD_q d@@10))
)))
(assert (forall ((d@@11 T@U) ) (!  (=> (_module.aexp.N_q d@@11) (exists ((|a#13#0#0| Int) ) (= d@@11 (|#_module.aexp.N| |a#13#0#0|))))
 :pattern ( (_module.aexp.N_q d@@11))
)))
(assert (forall ((d@@12 T@U) ) (!  (=> (_module.aexp.V_q d@@12) (exists ((|a#18#0#0| T@U) ) (= d@@12 (|#_module.aexp.V| |a#18#0#0|))))
 :pattern ( (_module.aexp.V_q d@@12))
)))
(assert (forall ((d@@13 T@U) ) (!  (=> (_module.instr.LOADI_q d@@13) (exists ((|a#60#0#0| Int) ) (= d@@13 (|#_module.instr.LOADI| |a#60#0#0|))))
 :pattern ( (_module.instr.LOADI_q d@@13))
)))
(assert (forall ((d@@14 T@U) ) (!  (=> (_module.instr.LOAD_q d@@14) (exists ((|a#65#0#0| T@U) ) (= d@@14 (|#_module.instr.LOAD| |a#65#0#0|))))
 :pattern ( (_module.instr.LOAD_q d@@14))
)))
(assert ($IsGoodHeap $OneHeap))
(assert (forall ((v T@U) (t T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v) t h) ($IsAlloc T@@1 v t h))
 :pattern ( ($IsAllocBox ($Box T@@1 v) t h))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($ly@@3 T@U) ($Heap@@1 T@U) (|a#0@@0| T@U) (|s#0@@2| T@U) ) (!  (=> (or (|_module.__default.aval#canCall| (Lit DatatypeTypeType |a#0@@0|) (Lit HandleTypeType |s#0@@2|)) (and (< 2 $FunctionContextHeight) (and (and ($IsGoodHeap $Heap@@1) ($Is DatatypeTypeType |a#0@@0| Tclass._module.aexp)) ($Is HandleTypeType |s#0@@2| (Tclass._System.___hTotalFunc1 (TSeq TChar) TInt))))) (and (=> (not (U_2_bool (Lit boolType (bool_2_U (_module.aexp.N_q (Lit DatatypeTypeType |a#0@@0|)))))) (=> (not (U_2_bool (Lit boolType (bool_2_U (_module.aexp.V_q (Lit DatatypeTypeType |a#0@@0|)))))) (let ((|a1#5| (Lit DatatypeTypeType (_module.aexp._h2 (Lit DatatypeTypeType |a#0@@0|)))))
(let ((|a0#5| (Lit DatatypeTypeType (_module.aexp._h1 (Lit DatatypeTypeType |a#0@@0|)))))
 (and (|_module.__default.aval#canCall| |a0#5| (Lit HandleTypeType |s#0@@2|)) (|_module.__default.aval#canCall| |a1#5| (Lit HandleTypeType |s#0@@2|))))))) (= (_module.__default.aval ($LS $ly@@3) (Lit DatatypeTypeType |a#0@@0|) (Lit HandleTypeType |s#0@@2|)) (ite (_module.aexp.N_q (Lit DatatypeTypeType |a#0@@0|)) (let ((|n#4| (LitInt (_module.aexp.n (Lit DatatypeTypeType |a#0@@0|)))))
|n#4|) (ite (_module.aexp.V_q (Lit DatatypeTypeType |a#0@@0|)) (U_2_int (let ((|x#4| (Lit SeqType (_module.aexp._h0 (Lit DatatypeTypeType |a#0@@0|)))))
($Unbox intType (Apply1 (TSeq TChar) TInt $Heap@@1 (Lit HandleTypeType |s#0@@2|) ($Box SeqType |x#4|))))) (let ((|a1#4| (Lit DatatypeTypeType (_module.aexp._h2 (Lit DatatypeTypeType |a#0@@0|)))))
(let ((|a0#4| (Lit DatatypeTypeType (_module.aexp._h1 (Lit DatatypeTypeType |a#0@@0|)))))
(LitInt (+ (_module.__default.aval ($LS $ly@@3) |a0#4| (Lit HandleTypeType |s#0@@2|)) (_module.__default.aval ($LS $ly@@3) |a1#4| (Lit HandleTypeType |s#0@@2|)))))))))))
 :weight 3
 :pattern ( (_module.__default.aval ($LS $ly@@3) (Lit DatatypeTypeType |a#0@@0|) (Lit HandleTypeType |s#0@@2|)) ($IsGoodHeap $Heap@@1))
))))
(assert (forall ((_module.List$T@@2 T@U) ) (!  (and (= (Tag (Tclass._module.List _module.List$T@@2)) Tagclass._module.List) (= (TagFamily (Tclass._module.List _module.List$T@@2)) tytagFamily$List))
 :pattern ( (Tclass._module.List _module.List$T@@2))
)))
(assert (forall ((|#$T0| T@U) (|#$R| T@U) (|f#0| T@U) ($h@@0 T@U) ) (! (= ($IsAlloc HandleTypeType |f#0| (Tclass._System.___hPartialFunc1 |#$T0| |#$R|) $h@@0) ($IsAlloc HandleTypeType |f#0| (Tclass._System.___hFunc1 |#$T0| |#$R|) $h@@0))
 :pattern ( ($IsAlloc HandleTypeType |f#0| (Tclass._System.___hPartialFunc1 |#$T0| |#$R|) $h@@0))
)))
(assert (forall ((|#$T0@@0| T@U) (|#$R@@0| T@U) (|f#0@@0| T@U) ($h@@1 T@U) ) (! (= ($IsAlloc HandleTypeType |f#0@@0| (Tclass._System.___hTotalFunc1 |#$T0@@0| |#$R@@0|) $h@@1) ($IsAlloc HandleTypeType |f#0@@0| (Tclass._System.___hPartialFunc1 |#$T0@@0| |#$R@@0|) $h@@1))
 :pattern ( ($IsAlloc HandleTypeType |f#0@@0| (Tclass._System.___hTotalFunc1 |#$T0@@0| |#$R@@0|) $h@@1))
)))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 Tclass._module.aexp) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@1)) bx@@1) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@1) Tclass._module.aexp)))
 :pattern ( ($IsBox bx@@1 Tclass._module.aexp))
)))
(assert (forall ((bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 Tclass._module.instr) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@2)) bx@@2) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@2) Tclass._module.instr)))
 :pattern ( ($IsBox bx@@2 Tclass._module.instr))
)))
(assert (forall (($ly@@4 T@U) (|a#0@@1| T@U) (|s#0@@3| T@U) ) (! (= (_module.__default.aval ($LS $ly@@4) |a#0@@1| |s#0@@3|) (_module.__default.aval $ly@@4 |a#0@@1| |s#0@@3|))
 :pattern ( (_module.__default.aval ($LS $ly@@4) |a#0@@1| |s#0@@3|))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($ly@@5 T@U) (|a#0@@2| T@U) ) (!  (=> (or (|_module.__default.comp#canCall| (Lit DatatypeTypeType |a#0@@2|)) (and (< 2 $FunctionContextHeight) ($Is DatatypeTypeType |a#0@@2| Tclass._module.aexp))) (and (=> (not (U_2_bool (Lit boolType (bool_2_U (_module.aexp.N_q (Lit DatatypeTypeType |a#0@@2|)))))) (=> (not (U_2_bool (Lit boolType (bool_2_U (_module.aexp.V_q (Lit DatatypeTypeType |a#0@@2|)))))) (let ((|a1#3| (Lit DatatypeTypeType (_module.aexp._h2 (Lit DatatypeTypeType |a#0@@2|)))))
(let ((|a0#3| (Lit DatatypeTypeType (_module.aexp._h1 (Lit DatatypeTypeType |a#0@@2|)))))
 (and (and (and (|_module.__default.comp#canCall| |a0#3|) (|_module.__default.comp#canCall| |a1#3|)) (|_module.__default.append#canCall| Tclass._module.instr (_module.__default.comp ($LS $ly@@5) |a0#3|) (_module.__default.comp ($LS $ly@@5) |a1#3|))) (|_module.__default.append#canCall| Tclass._module.instr (_module.__default.append Tclass._module.instr ($LS $LZ) (_module.__default.comp ($LS $ly@@5) |a0#3|) (_module.__default.comp ($LS $ly@@5) |a1#3|)) (Lit DatatypeTypeType (|#_module.List.Cons| ($Box DatatypeTypeType (Lit DatatypeTypeType |#_module.instr.ADD|)) (Lit DatatypeTypeType |#_module.List.Nil|))))))))) (= (_module.__default.comp ($LS $ly@@5) (Lit DatatypeTypeType |a#0@@2|)) (ite (_module.aexp.N_q (Lit DatatypeTypeType |a#0@@2|)) (let ((|n#2@@0| (LitInt (_module.aexp.n (Lit DatatypeTypeType |a#0@@2|)))))
(Lit DatatypeTypeType (|#_module.List.Cons| ($Box DatatypeTypeType (Lit DatatypeTypeType (|#_module.instr.LOADI| |n#2@@0|))) (Lit DatatypeTypeType |#_module.List.Nil|)))) (ite (_module.aexp.V_q (Lit DatatypeTypeType |a#0@@2|)) (let ((|x#2@@1| (Lit SeqType (_module.aexp._h0 (Lit DatatypeTypeType |a#0@@2|)))))
(Lit DatatypeTypeType (|#_module.List.Cons| ($Box DatatypeTypeType (Lit DatatypeTypeType (|#_module.instr.LOAD| |x#2@@1|))) (Lit DatatypeTypeType |#_module.List.Nil|)))) (let ((|a1#2@@0| (Lit DatatypeTypeType (_module.aexp._h2 (Lit DatatypeTypeType |a#0@@2|)))))
(let ((|a0#2@@0| (Lit DatatypeTypeType (_module.aexp._h1 (Lit DatatypeTypeType |a#0@@2|)))))
(Lit DatatypeTypeType (_module.__default.append Tclass._module.instr ($LS $LZ) (Lit DatatypeTypeType (_module.__default.append Tclass._module.instr ($LS $LZ) (Lit DatatypeTypeType (_module.__default.comp ($LS $ly@@5) |a0#2@@0|)) (Lit DatatypeTypeType (_module.__default.comp ($LS $ly@@5) |a1#2@@0|)))) (Lit DatatypeTypeType (|#_module.List.Cons| ($Box DatatypeTypeType (Lit DatatypeTypeType |#_module.instr.ADD|)) (Lit DatatypeTypeType |#_module.List.Nil|))))))))))))
 :weight 3
 :pattern ( (_module.__default.comp ($LS $ly@@5) (Lit DatatypeTypeType |a#0@@2|)))
))))
(assert (forall ((f@@1 T@U) (t0@@1 T@U) (t1@@1 T@U) (h@@0 T@U) ) (!  (=> (and ($IsGoodHeap h@@0) ($IsAlloc HandleTypeType f@@1 (Tclass._System.___hFunc1 t0@@1 t1@@1) h@@0)) (forall ((bx0@@0 T@U) ) (!  (=> (and ($IsAllocBox bx0@@0 t0@@1 h@@0) (Requires1 t0@@1 t1@@1 h@@0 f@@1 bx0@@0)) ($IsAllocBox (Apply1 t0@@1 t1@@1 h@@0 f@@1 bx0@@0) t1@@1 h@@0))
 :pattern ( (Apply1 t0@@1 t1@@1 h@@0 f@@1 bx0@@0))
)))
 :pattern ( ($IsAlloc HandleTypeType f@@1 (Tclass._System.___hFunc1 t0@@1 t1@@1) h@@0))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($ly@@6 T@U) ($Heap@@2 T@U) (|a#0@@3| T@U) (|s#0@@4| T@U) ) (!  (=> (or (|_module.__default.aval#canCall| (Lit DatatypeTypeType |a#0@@3|) |s#0@@4|) (and (< 2 $FunctionContextHeight) (and (and ($IsGoodHeap $Heap@@2) ($Is DatatypeTypeType |a#0@@3| Tclass._module.aexp)) ($Is HandleTypeType |s#0@@4| (Tclass._System.___hTotalFunc1 (TSeq TChar) TInt))))) (and (=> (not (U_2_bool (Lit boolType (bool_2_U (_module.aexp.N_q (Lit DatatypeTypeType |a#0@@3|)))))) (=> (not (U_2_bool (Lit boolType (bool_2_U (_module.aexp.V_q (Lit DatatypeTypeType |a#0@@3|)))))) (let ((|a1#3@@0| (Lit DatatypeTypeType (_module.aexp._h2 (Lit DatatypeTypeType |a#0@@3|)))))
(let ((|a0#3@@0| (Lit DatatypeTypeType (_module.aexp._h1 (Lit DatatypeTypeType |a#0@@3|)))))
 (and (|_module.__default.aval#canCall| |a0#3@@0| |s#0@@4|) (|_module.__default.aval#canCall| |a1#3@@0| |s#0@@4|)))))) (= (_module.__default.aval ($LS $ly@@6) (Lit DatatypeTypeType |a#0@@3|) |s#0@@4|) (ite (_module.aexp.N_q (Lit DatatypeTypeType |a#0@@3|)) (let ((|n#2@@1| (LitInt (_module.aexp.n (Lit DatatypeTypeType |a#0@@3|)))))
|n#2@@1|) (ite (_module.aexp.V_q (Lit DatatypeTypeType |a#0@@3|)) (U_2_int (let ((|x#2@@2| (Lit SeqType (_module.aexp._h0 (Lit DatatypeTypeType |a#0@@3|)))))
($Unbox intType (Apply1 (TSeq TChar) TInt $Heap@@2 |s#0@@4| ($Box SeqType |x#2@@2|))))) (let ((|a1#2@@1| (Lit DatatypeTypeType (_module.aexp._h2 (Lit DatatypeTypeType |a#0@@3|)))))
(let ((|a0#2@@1| (Lit DatatypeTypeType (_module.aexp._h1 (Lit DatatypeTypeType |a#0@@3|)))))
(+ (_module.__default.aval ($LS $ly@@6) |a0#2@@1| |s#0@@4|) (_module.__default.aval ($LS $ly@@6) |a1#2@@1| |s#0@@4|)))))))))
 :weight 3
 :pattern ( (_module.__default.aval ($LS $ly@@6) (Lit DatatypeTypeType |a#0@@3|) |s#0@@4|) ($IsGoodHeap $Heap@@2))
))))
(assert (forall ((d@@15 T@U) ) (!  (=> (|$IsA#_module.List| d@@15) (or (_module.List.Nil_q d@@15) (_module.List.Cons_q d@@15)))
 :pattern ( (|$IsA#_module.List| d@@15))
)))
(assert (forall ((_module.List$T@@3 T@U) (d@@16 T@U) ) (!  (=> ($Is DatatypeTypeType d@@16 (Tclass._module.List _module.List$T@@3)) (or (_module.List.Nil_q d@@16) (_module.List.Cons_q d@@16)))
 :pattern ( (_module.List.Cons_q d@@16) ($Is DatatypeTypeType d@@16 (Tclass._module.List _module.List$T@@3)))
 :pattern ( (_module.List.Nil_q d@@16) ($Is DatatypeTypeType d@@16 (Tclass._module.List _module.List$T@@3)))
)))
(assert (forall ((a@@1 T@U) (b@@1 T@U) ) (!  (=> (|Set#Equal| a@@1 b@@1) (= a@@1 b@@1))
 :pattern ( (|Set#Equal| a@@1 b@@1))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($Heap@@3 T@U) (|i#0@@0| T@U) (|s#0@@5| T@U) (|stk#0@@1| T@U) ) (!  (=> (or (|_module.__default.exec1#canCall| |i#0@@0| |s#0@@5| |stk#0@@1|) (and (< 2 $FunctionContextHeight) (and (and (and ($IsGoodHeap $Heap@@3) ($Is DatatypeTypeType |i#0@@0| Tclass._module.instr)) ($Is HandleTypeType |s#0@@5| (Tclass._System.___hTotalFunc1 (TSeq TChar) TInt))) ($Is DatatypeTypeType |stk#0@@1| (Tclass._module.List TInt))))) (= (_module.__default.exec1 |i#0@@0| |s#0@@5| |stk#0@@1|) (ite (_module.instr.LOADI_q |i#0@@0|) (let ((|n#0@@0| (_module.instr._h12 |i#0@@0|)))
(|#_module.List.Cons| ($Box intType (int_2_U |n#0@@0|)) |stk#0@@1|)) (ite (_module.instr.LOAD_q |i#0@@0|) (let ((|x#0@@1| (_module.instr._h13 |i#0@@0|)))
(|#_module.List.Cons| (Apply1 (TSeq TChar) TInt $Heap@@3 |s#0@@5| ($Box SeqType |x#0@@1|)) |stk#0@@1|)) (ite  (and (_module.List.Cons_q |stk#0@@1|) (_module.List.Cons_q (_module.List.tail |stk#0@@1|))) (let ((|tail#0@@0| (_module.List.tail (_module.List.tail |stk#0@@1|))))
(let ((|a0#0@@0| (U_2_int ($Unbox intType (_module.List.head (_module.List.tail |stk#0@@1|))))))
(let ((|a1#0@@0| (U_2_int ($Unbox intType (_module.List.head |stk#0@@1|)))))
(|#_module.List.Cons| ($Box intType (int_2_U (+ |a0#0@@0| |a1#0@@0|))) |tail#0@@0|)))) |#_module.List.Nil|)))))
 :pattern ( (_module.__default.exec1 |i#0@@0| |s#0@@5| |stk#0@@1|) ($IsGoodHeap $Heap@@3))
))))
(assert (forall ((f@@2 T@U) (t0@@2 T@U) (t1@@2 T@U) ) (! (= ($Is HandleTypeType f@@2 (Tclass._System.___hFunc1 t0@@2 t1@@2)) (forall ((h@@1 T@U) (bx0@@1 T@U) ) (!  (=> (and (and ($IsGoodHeap h@@1) ($IsBox bx0@@1 t0@@2)) (Requires1 t0@@2 t1@@2 h@@1 f@@2 bx0@@1)) ($IsBox (Apply1 t0@@2 t1@@2 h@@1 f@@2 bx0@@1) t1@@2))
 :pattern ( (Apply1 t0@@2 t1@@2 h@@1 f@@2 bx0@@1))
)))
 :pattern ( ($Is HandleTypeType f@@2 (Tclass._System.___hFunc1 t0@@2 t1@@2)))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($ly@@7 T@U) (|a#0@@4| T@U) ) (!  (=> (or (|_module.__default.comp#canCall| |a#0@@4|) (and (< 2 $FunctionContextHeight) ($Is DatatypeTypeType |a#0@@4| Tclass._module.aexp))) (and (=> (not (_module.aexp.N_q |a#0@@4|)) (=> (not (_module.aexp.V_q |a#0@@4|)) (let ((|a1#1@@0| (_module.aexp._h2 |a#0@@4|)))
(let ((|a0#1@@0| (_module.aexp._h1 |a#0@@4|)))
 (and (and (and (|_module.__default.comp#canCall| |a0#1@@0|) (|_module.__default.comp#canCall| |a1#1@@0|)) (|_module.__default.append#canCall| Tclass._module.instr (_module.__default.comp $ly@@7 |a0#1@@0|) (_module.__default.comp $ly@@7 |a1#1@@0|))) (|_module.__default.append#canCall| Tclass._module.instr (_module.__default.append Tclass._module.instr ($LS $LZ) (_module.__default.comp $ly@@7 |a0#1@@0|) (_module.__default.comp $ly@@7 |a1#1@@0|)) (Lit DatatypeTypeType (|#_module.List.Cons| ($Box DatatypeTypeType (Lit DatatypeTypeType |#_module.instr.ADD|)) (Lit DatatypeTypeType |#_module.List.Nil|))))))))) (= (_module.__default.comp ($LS $ly@@7) |a#0@@4|) (ite (_module.aexp.N_q |a#0@@4|) (let ((|n#0@@1| (_module.aexp.n |a#0@@4|)))
(|#_module.List.Cons| ($Box DatatypeTypeType (|#_module.instr.LOADI| |n#0@@1|)) (Lit DatatypeTypeType |#_module.List.Nil|))) (ite (_module.aexp.V_q |a#0@@4|) (let ((|x#0@@2| (_module.aexp._h0 |a#0@@4|)))
(|#_module.List.Cons| ($Box DatatypeTypeType (|#_module.instr.LOAD| |x#0@@2|)) (Lit DatatypeTypeType |#_module.List.Nil|))) (let ((|a1#0@@1| (_module.aexp._h2 |a#0@@4|)))
(let ((|a0#0@@1| (_module.aexp._h1 |a#0@@4|)))
(_module.__default.append Tclass._module.instr ($LS $LZ) (_module.__default.append Tclass._module.instr ($LS $LZ) (_module.__default.comp $ly@@7 |a0#0@@1|) (_module.__default.comp $ly@@7 |a1#0@@1|)) (Lit DatatypeTypeType (|#_module.List.Cons| ($Box DatatypeTypeType (Lit DatatypeTypeType |#_module.instr.ADD|)) (Lit DatatypeTypeType |#_module.List.Nil|)))))))))))
 :pattern ( (_module.__default.comp ($LS $ly@@7) |a#0@@4|))
))))
(assert (forall ((bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 TInt) (and (= ($Box intType ($Unbox intType bx@@3)) bx@@3) ($Is intType ($Unbox intType bx@@3) TInt)))
 :pattern ( ($IsBox bx@@3 TInt))
)))
(assert (= (Ctor charType) 7))
(assert (forall ((bx@@4 T@U) ) (!  (=> ($IsBox bx@@4 TChar) (and (= ($Box charType ($Unbox charType bx@@4)) bx@@4) ($Is charType ($Unbox charType bx@@4) TChar)))
 :pattern ( ($IsBox bx@@4 TChar))
)))
(assert (forall ((v@@0 T@U) (t@@0 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@0) t@@0) ($Is T@@2 v@@0 t@@0))
 :pattern ( ($IsBox ($Box T@@2 v@@0) t@@0))
)))
(assert (forall ((s T@U) ) (! (<= 0 (|Seq#Length| s))
 :pattern ( (|Seq#Length| s))
)))
(assert  (=> (<= 3 $FunctionContextHeight) (forall (($ly@@8 T@U) (|ii#0@@0| T@U) (|s#0@@6| T@U) (|stk#0@@2| T@U) ) (!  (=> (or (|_module.__default.exec#canCall| (Lit DatatypeTypeType |ii#0@@0|) (Lit HandleTypeType |s#0@@6|) (Lit DatatypeTypeType |stk#0@@2|)) (and (< 3 $FunctionContextHeight) (and (and ($Is DatatypeTypeType |ii#0@@0| (Tclass._module.List Tclass._module.instr)) ($Is HandleTypeType |s#0@@6| (Tclass._System.___hTotalFunc1 (TSeq TChar) TInt))) ($Is DatatypeTypeType |stk#0@@2| (Tclass._module.List TInt))))) (and (=> (not (U_2_bool (Lit boolType (bool_2_U (_module.List.Nil_q (Lit DatatypeTypeType |ii#0@@0|)))))) (let ((|rest#5| (Lit DatatypeTypeType (_module.List.tail (Lit DatatypeTypeType |ii#0@@0|)))))
(let ((|i#5| (Lit DatatypeTypeType ($Unbox DatatypeTypeType (_module.List.head (Lit DatatypeTypeType |ii#0@@0|))))))
 (and (|_module.__default.exec1#canCall| |i#5| (Lit HandleTypeType |s#0@@6|) (Lit DatatypeTypeType |stk#0@@2|)) (|_module.__default.exec#canCall| |rest#5| (Lit HandleTypeType |s#0@@6|) (_module.__default.exec1 |i#5| (Lit HandleTypeType |s#0@@6|) (Lit DatatypeTypeType |stk#0@@2|))))))) (= (_module.__default.exec ($LS $ly@@8) (Lit DatatypeTypeType |ii#0@@0|) (Lit HandleTypeType |s#0@@6|) (Lit DatatypeTypeType |stk#0@@2|)) (ite (_module.List.Nil_q (Lit DatatypeTypeType |ii#0@@0|)) |stk#0@@2| (let ((|rest#4| (Lit DatatypeTypeType (_module.List.tail (Lit DatatypeTypeType |ii#0@@0|)))))
(let ((|i#4| (Lit DatatypeTypeType ($Unbox DatatypeTypeType (_module.List.head (Lit DatatypeTypeType |ii#0@@0|))))))
(Lit DatatypeTypeType (_module.__default.exec ($LS $ly@@8) |rest#4| (Lit HandleTypeType |s#0@@6|) (Lit DatatypeTypeType (_module.__default.exec1 |i#4| (Lit HandleTypeType |s#0@@6|) (Lit DatatypeTypeType |stk#0@@2|)))))))))))
 :weight 3
 :pattern ( (_module.__default.exec ($LS $ly@@8) (Lit DatatypeTypeType |ii#0@@0|) (Lit HandleTypeType |s#0@@6|) (Lit DatatypeTypeType |stk#0@@2|)))
))))
(assert (forall ((a@@2 T@U) (b@@2 T@U) ) (!  (=> (and (_module.List.Nil_q a@@2) (_module.List.Nil_q b@@2)) (|_module.List#Equal| a@@2 b@@2))
 :pattern ( (|_module.List#Equal| a@@2 b@@2) (_module.List.Nil_q a@@2))
 :pattern ( (|_module.List#Equal| a@@2 b@@2) (_module.List.Nil_q b@@2))
)))
(assert (forall ((|#$T0@@1| T@U) (|#$R@@1| T@U) ) (! (= (Tclass._System.___hFunc1_0 (Tclass._System.___hFunc1 |#$T0@@1| |#$R@@1|)) |#$T0@@1|)
 :pattern ( (Tclass._System.___hFunc1 |#$T0@@1| |#$R@@1|))
)))
(assert (forall ((|#$T0@@2| T@U) (|#$R@@2| T@U) ) (! (= (Tclass._System.___hFunc1_1 (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@2|)) |#$R@@2|)
 :pattern ( (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@2|))
)))
(assert (forall ((|#$T0@@3| T@U) (|#$R@@3| T@U) ) (! (= (Tclass._System.___hPartialFunc1_0 (Tclass._System.___hPartialFunc1 |#$T0@@3| |#$R@@3|)) |#$T0@@3|)
 :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@3| |#$R@@3|))
)))
(assert (forall ((|#$T0@@4| T@U) (|#$R@@4| T@U) ) (! (= (Tclass._System.___hPartialFunc1_1 (Tclass._System.___hPartialFunc1 |#$T0@@4| |#$R@@4|)) |#$R@@4|)
 :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@4| |#$R@@4|))
)))
(assert (forall ((|#$T0@@5| T@U) (|#$R@@5| T@U) ) (! (= (Tclass._System.___hTotalFunc1_0 (Tclass._System.___hTotalFunc1 |#$T0@@5| |#$R@@5|)) |#$T0@@5|)
 :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@5| |#$R@@5|))
)))
(assert (forall ((|#$T0@@6| T@U) (|#$R@@6| T@U) ) (! (= (Tclass._System.___hTotalFunc1_1 (Tclass._System.___hTotalFunc1 |#$T0@@6| |#$R@@6|)) |#$R@@6|)
 :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@6| |#$R@@6|))
)))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| T@U) ) (! (= (DatatypeCtorId (|#_module.List.Cons| |a#4#0#0| |a#4#1#0|)) |##_module.List.Cons|)
 :pattern ( (|#_module.List.Cons| |a#4#0#0| |a#4#1#0|))
)))
(assert (forall ((|a#8#0#0| T@U) (|a#8#1#0| T@U) ) (! (= (_module.List.head (|#_module.List.Cons| |a#8#0#0| |a#8#1#0|)) |a#8#0#0|)
 :pattern ( (|#_module.List.Cons| |a#8#0#0| |a#8#1#0|))
)))
(assert (forall ((|a#10#0#0| T@U) (|a#10#1#0| T@U) ) (! (= (_module.List.tail (|#_module.List.Cons| |a#10#0#0| |a#10#1#0|)) |a#10#1#0|)
 :pattern ( (|#_module.List.Cons| |a#10#0#0| |a#10#1#0|))
)))
(assert (forall ((|a#24#0#0| T@U) (|a#24#1#0| T@U) ) (! (= (DatatypeCtorId (|#_module.aexp.Plus| |a#24#0#0| |a#24#1#0|)) |##_module.aexp.Plus|)
 :pattern ( (|#_module.aexp.Plus| |a#24#0#0| |a#24#1#0|))
)))
(assert (forall ((|a#28#0#0| T@U) (|a#28#1#0| T@U) ) (! (= (_module.aexp._h1 (|#_module.aexp.Plus| |a#28#0#0| |a#28#1#0|)) |a#28#0#0|)
 :pattern ( (|#_module.aexp.Plus| |a#28#0#0| |a#28#1#0|))
)))
(assert (forall ((|a#30#0#0| T@U) (|a#30#1#0| T@U) ) (! (= (_module.aexp._h2 (|#_module.aexp.Plus| |a#30#0#0| |a#30#1#0|)) |a#30#1#0|)
 :pattern ( (|#_module.aexp.Plus| |a#30#0#0| |a#30#1#0|))
)))
(assert (forall ((v@@1 T@U) (t0@@3 T@U) (h@@2 T@U) ) (! (= ($IsAlloc SeqType v@@1 (TSeq t0@@3) h@@2) (forall ((i@@1 Int) ) (!  (=> (and (<= 0 i@@1) (< i@@1 (|Seq#Length| v@@1))) ($IsAllocBox (|Seq#Index| v@@1 i@@1) t0@@3 h@@2))
 :pattern ( (|Seq#Index| v@@1 i@@1))
)))
 :pattern ( ($IsAlloc SeqType v@@1 (TSeq t0@@3) h@@2))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module._default.append$_T0@@1 T@U) ($ly@@9 T@U) (|xs#0@@1| T@U) (|ys#0@@1| T@U) ) (!  (=> (or (|_module.__default.append#canCall| _module._default.append$_T0@@1 |xs#0@@1| |ys#0@@1|) (and (< 1 $FunctionContextHeight) (and ($Is DatatypeTypeType |xs#0@@1| (Tclass._module.List _module._default.append$_T0@@1)) ($Is DatatypeTypeType |ys#0@@1| (Tclass._module.List _module._default.append$_T0@@1))))) ($Is DatatypeTypeType (_module.__default.append _module._default.append$_T0@@1 $ly@@9 |xs#0@@1| |ys#0@@1|) (Tclass._module.List _module._default.append$_T0@@1)))
 :pattern ( (_module.__default.append _module._default.append$_T0@@1 $ly@@9 |xs#0@@1| |ys#0@@1|))
))))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($ly@@10 T@U) (|a#0@@5| T@U) ) (!  (=> (or (|_module.__default.comp#canCall| |a#0@@5|) (and (< 2 $FunctionContextHeight) ($Is DatatypeTypeType |a#0@@5| Tclass._module.aexp))) ($Is DatatypeTypeType (_module.__default.comp $ly@@10 |a#0@@5|) (Tclass._module.List Tclass._module.instr)))
 :pattern ( (_module.__default.comp $ly@@10 |a#0@@5|))
))))
(assert (forall ((t@@1 T@U) ) (! (= (Inv0_TSeq (TSeq t@@1)) t@@1)
 :pattern ( (TSeq t@@1))
)))
(assert (forall ((t@@2 T@U) ) (! (= (Tag (TSeq t@@2)) TagSeq)
 :pattern ( (TSeq t@@2))
)))
(assert (forall ((_module.List$T@@4 T@U) ) (! (= (Tclass._module.List_0 (Tclass._module.List _module.List$T@@4)) _module.List$T@@4)
 :pattern ( (Tclass._module.List _module.List$T@@4))
)))
(assert (forall ((|a#12#0#0| Int) ) (! (= (DatatypeCtorId (|#_module.aexp.N| |a#12#0#0|)) |##_module.aexp.N|)
 :pattern ( (|#_module.aexp.N| |a#12#0#0|))
)))
(assert (forall ((|a#16#0#0| Int) ) (! (= (_module.aexp.n (|#_module.aexp.N| |a#16#0#0|)) |a#16#0#0|)
 :pattern ( (|#_module.aexp.N| |a#16#0#0|))
)))
(assert (forall ((|a#17#0#0| T@U) ) (! (= (DatatypeCtorId (|#_module.aexp.V| |a#17#0#0|)) |##_module.aexp.V|)
 :pattern ( (|#_module.aexp.V| |a#17#0#0|))
)))
(assert (forall ((|a#21#0#0| T@U) ) (! (= (_module.aexp._h0 (|#_module.aexp.V| |a#21#0#0|)) |a#21#0#0|)
 :pattern ( (|#_module.aexp.V| |a#21#0#0|))
)))
(assert (forall ((|a#59#0#0| Int) ) (! (= (DatatypeCtorId (|#_module.instr.LOADI| |a#59#0#0|)) |##_module.instr.LOADI|)
 :pattern ( (|#_module.instr.LOADI| |a#59#0#0|))
)))
(assert (forall ((|a#63#0#0| Int) ) (! (= (_module.instr._h12 (|#_module.instr.LOADI| |a#63#0#0|)) |a#63#0#0|)
 :pattern ( (|#_module.instr.LOADI| |a#63#0#0|))
)))
(assert (forall ((|a#64#0#0| T@U) ) (! (= (DatatypeCtorId (|#_module.instr.LOAD| |a#64#0#0|)) |##_module.instr.LOAD|)
 :pattern ( (|#_module.instr.LOAD| |a#64#0#0|))
)))
(assert (forall ((|a#68#0#0| T@U) ) (! (= (_module.instr._h13 (|#_module.instr.LOAD| |a#68#0#0|)) |a#68#0#0|)
 :pattern ( (|#_module.instr.LOAD| |a#68#0#0|))
)))
(assert (forall ((x@@5 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@5)) x@@5)
 :pattern ( ($Box T@@3 x@@5))
)))
(assert (forall ((d@@17 T@U) ) (!  (=> (|$IsA#_module.aexp| d@@17) (or (or (_module.aexp.N_q d@@17) (_module.aexp.V_q d@@17)) (_module.aexp.Plus_q d@@17)))
 :pattern ( (|$IsA#_module.aexp| d@@17))
)))
(assert (forall ((|a#9#0#0| T@U) (|a#9#1#0| T@U) ) (! (< (BoxRank |a#9#0#0|) (DtRank (|#_module.List.Cons| |a#9#0#0| |a#9#1#0|)))
 :pattern ( (|#_module.List.Cons| |a#9#0#0| |a#9#1#0|))
)))
(assert (forall ((|a#11#0#0| T@U) (|a#11#1#0| T@U) ) (! (< (DtRank |a#11#1#0|) (DtRank (|#_module.List.Cons| |a#11#0#0| |a#11#1#0|)))
 :pattern ( (|#_module.List.Cons| |a#11#0#0| |a#11#1#0|))
)))
(assert (forall ((|a#29#0#0| T@U) (|a#29#1#0| T@U) ) (! (< (DtRank |a#29#0#0|) (DtRank (|#_module.aexp.Plus| |a#29#0#0| |a#29#1#0|)))
 :pattern ( (|#_module.aexp.Plus| |a#29#0#0| |a#29#1#0|))
)))
(assert (forall ((|a#31#0#0| T@U) (|a#31#1#0| T@U) ) (! (< (DtRank |a#31#1#0|) (DtRank (|#_module.aexp.Plus| |a#31#0#0| |a#31#1#0|)))
 :pattern ( (|#_module.aexp.Plus| |a#31#0#0| |a#31#1#0|))
)))
(assert (forall (($ly@@11 T@U) (|a#0@@6| T@U) ) (! (= (_module.__default.comp ($LS $ly@@11) |a#0@@6|) (_module.__default.comp $ly@@11 |a#0@@6|))
 :pattern ( (_module.__default.comp ($LS $ly@@11) |a#0@@6|))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|i#0@@1| T@U) (|s#0@@7| T@U) (|stk#0@@3| T@U) ) (!  (=> (or (|_module.__default.exec1#canCall| |i#0@@1| |s#0@@7| |stk#0@@3|) (and (< 2 $FunctionContextHeight) (and (and ($Is DatatypeTypeType |i#0@@1| Tclass._module.instr) ($Is HandleTypeType |s#0@@7| (Tclass._System.___hTotalFunc1 (TSeq TChar) TInt))) ($Is DatatypeTypeType |stk#0@@3| (Tclass._module.List TInt))))) ($Is DatatypeTypeType (_module.__default.exec1 |i#0@@1| |s#0@@7| |stk#0@@3|) (Tclass._module.List TInt)))
 :pattern ( (_module.__default.exec1 |i#0@@1| |s#0@@7| |stk#0@@3|))
))))
(assert (forall ((|#$T0@@7| T@U) (|#$R@@7| T@U) (|f#0@@1| T@U) ) (! (= ($Is HandleTypeType |f#0@@1| (Tclass._System.___hTotalFunc1 |#$T0@@7| |#$R@@7|))  (and ($Is HandleTypeType |f#0@@1| (Tclass._System.___hPartialFunc1 |#$T0@@7| |#$R@@7|)) (forall ((|x0#0| T@U) )  (=> ($IsBox |x0#0| |#$T0@@7|) (Requires1 |#$T0@@7| |#$R@@7| $OneHeap |f#0@@1| |x0#0|)))))
 :pattern ( ($Is HandleTypeType |f#0@@1| (Tclass._System.___hTotalFunc1 |#$T0@@7| |#$R@@7|)))
)))
(assert (forall ((|#$T0@@8| T@U) (|#$R@@8| T@U) (|f#0@@2| T@U) ) (! (= ($Is HandleTypeType |f#0@@2| (Tclass._System.___hPartialFunc1 |#$T0@@8| |#$R@@8|))  (and ($Is HandleTypeType |f#0@@2| (Tclass._System.___hFunc1 |#$T0@@8| |#$R@@8|)) (forall ((|x0#0@@0| T@U) )  (=> ($IsBox |x0#0@@0| |#$T0@@8|) (|Set#Equal| (Reads1 |#$T0@@8| |#$R@@8| $OneHeap |f#0@@2| |x0#0@@0|) |Set#Empty|)))))
 :pattern ( ($Is HandleTypeType |f#0@@2| (Tclass._System.___hPartialFunc1 |#$T0@@8| |#$R@@8|)))
)))
(assert (forall ((|a#14#0#0| Int) ) (! (= ($Is DatatypeTypeType (|#_module.aexp.N| |a#14#0#0|) Tclass._module.aexp) ($Is intType (int_2_U |a#14#0#0|) TInt))
 :pattern ( ($Is DatatypeTypeType (|#_module.aexp.N| |a#14#0#0|) Tclass._module.aexp))
)))
(assert (forall ((|a#61#0#0| Int) ) (! (= ($Is DatatypeTypeType (|#_module.instr.LOADI| |a#61#0#0|) Tclass._module.instr) ($Is intType (int_2_U |a#61#0#0|) TInt))
 :pattern ( ($Is DatatypeTypeType (|#_module.instr.LOADI| |a#61#0#0|) Tclass._module.instr))
)))
(assert (forall (($ly@@12 T@U) (|ii#0@@1| T@U) (|s#0@@8| T@U) (|stk#0@@4| T@U) ) (! (= (_module.__default.exec ($LS $ly@@12) |ii#0@@1| |s#0@@8| |stk#0@@4|) (_module.__default.exec $ly@@12 |ii#0@@1| |s#0@@8| |stk#0@@4|))
 :pattern ( (_module.__default.exec ($LS $ly@@12) |ii#0@@1| |s#0@@8| |stk#0@@4|))
)))
(assert  (and (and (and (and (and (and (= (Ctor refType) 8) (forall ((t0@@4 T@T) (t1@@3 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0@@4 t1@@3 (MapType0Store t0@@4 t1@@3 m x0 val) x0) val)
 :weight 0
))) (forall ((u0@@0 T@T) (u1@@0 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0@@0 u1@@0 (MapType0Store u0@@0 u1@@0 m@@0 x0@@0 val@@0) y0) (MapType0Select u0@@0 u1@@0 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 9)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 10))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((f@@3 T@U) (t0@@5 T@U) (t1@@4 T@U) (h@@3 T@U) ) (!  (=> ($IsGoodHeap h@@3) (= ($IsAlloc HandleTypeType f@@3 (Tclass._System.___hFunc1 t0@@5 t1@@4) h@@3) (forall ((bx0@@2 T@U) ) (!  (=> (and (and ($IsBox bx0@@2 t0@@5) ($IsAllocBox bx0@@2 t0@@5 h@@3)) (Requires1 t0@@5 t1@@4 h@@3 f@@3 bx0@@2)) (forall ((r T@U) ) (!  (=> (and (or (not (= r null)) (not true)) (|Set#IsMember| (Reads1 t0@@5 t1@@4 h@@3 f@@3 bx0@@2) ($Box refType r))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@3 r) alloc))))
 :pattern ( (|Set#IsMember| (Reads1 t0@@5 t1@@4 h@@3 f@@3 bx0@@2) ($Box refType r)))
)))
 :pattern ( (Apply1 t0@@5 t1@@4 h@@3 f@@3 bx0@@2))
 :pattern ( (Reads1 t0@@5 t1@@4 h@@3 f@@3 bx0@@2))
))))
 :pattern ( ($IsAlloc HandleTypeType f@@3 (Tclass._System.___hFunc1 t0@@5 t1@@4) h@@3))
)))
(assert (forall ((|#$T0@@9| T@U) (|#$R@@9| T@U) (bx@@5 T@U) ) (!  (=> ($IsBox bx@@5 (Tclass._System.___hFunc1 |#$T0@@9| |#$R@@9|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@5)) bx@@5) ($Is HandleTypeType ($Unbox HandleTypeType bx@@5) (Tclass._System.___hFunc1 |#$T0@@9| |#$R@@9|))))
 :pattern ( ($IsBox bx@@5 (Tclass._System.___hFunc1 |#$T0@@9| |#$R@@9|)))
)))
(assert (forall ((|#$T0@@10| T@U) (|#$R@@10| T@U) (bx@@6 T@U) ) (!  (=> ($IsBox bx@@6 (Tclass._System.___hPartialFunc1 |#$T0@@10| |#$R@@10|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@6)) bx@@6) ($Is HandleTypeType ($Unbox HandleTypeType bx@@6) (Tclass._System.___hPartialFunc1 |#$T0@@10| |#$R@@10|))))
 :pattern ( ($IsBox bx@@6 (Tclass._System.___hPartialFunc1 |#$T0@@10| |#$R@@10|)))
)))
(assert (forall ((|#$T0@@11| T@U) (|#$R@@11| T@U) (bx@@7 T@U) ) (!  (=> ($IsBox bx@@7 (Tclass._System.___hTotalFunc1 |#$T0@@11| |#$R@@11|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@7)) bx@@7) ($Is HandleTypeType ($Unbox HandleTypeType bx@@7) (Tclass._System.___hTotalFunc1 |#$T0@@11| |#$R@@11|))))
 :pattern ( ($IsBox bx@@7 (Tclass._System.___hTotalFunc1 |#$T0@@11| |#$R@@11|)))
)))
(assert (forall ((|a#23#0#0| T@U) ) (! (< (|Seq#Rank| |a#23#0#0|) (DtRank (|#_module.aexp.V| |a#23#0#0|)))
 :pattern ( (|#_module.aexp.V| |a#23#0#0|))
)))
(assert (forall ((|a#70#0#0| T@U) ) (! (< (|Seq#Rank| |a#70#0#0|) (DtRank (|#_module.instr.LOAD| |a#70#0#0|)))
 :pattern ( (|#_module.instr.LOAD| |a#70#0#0|))
)))
(assert (forall ((d@@18 T@U) (_module.List$T@@5 T@U) ($h@@2 T@U) ) (!  (=> (and ($IsGoodHeap $h@@2) (and (_module.List.Cons_q d@@18) ($IsAlloc DatatypeTypeType d@@18 (Tclass._module.List _module.List$T@@5) $h@@2))) ($IsAllocBox (_module.List.head d@@18) _module.List$T@@5 $h@@2))
 :pattern ( ($IsAllocBox (_module.List.head d@@18) _module.List$T@@5 $h@@2))
)))
(assert  (and (forall ((t0@@6 T@T) (t1@@5 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@6 t1@@5 t2 (MapType1Store t0@@6 t1@@5 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@1 T@T) (u1@@1 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@1 u1@@1 u2 (MapType1Store u0@@1 u1@@1 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@1 u1@@1 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@2 T@T) (u1@@2 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@2 u1@@2 u2@@0 (MapType1Store u0@@2 u1@@2 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@2 u1@@2 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($Heap@@4 T@U) (_module._default.append$_T0@@2 T@U) ($ly@@13 T@U) (|xs#0@@2| T@U) (|ys#0@@2| T@U) ) (!  (=> (and (or (|_module.__default.append#canCall| _module._default.append$_T0@@2 |xs#0@@2| |ys#0@@2|) (and (< 1 $FunctionContextHeight) (and (and ($Is DatatypeTypeType |xs#0@@2| (Tclass._module.List _module._default.append$_T0@@2)) ($IsAlloc DatatypeTypeType |xs#0@@2| (Tclass._module.List _module._default.append$_T0@@2) $Heap@@4)) (and ($Is DatatypeTypeType |ys#0@@2| (Tclass._module.List _module._default.append$_T0@@2)) ($IsAlloc DatatypeTypeType |ys#0@@2| (Tclass._module.List _module._default.append$_T0@@2) $Heap@@4))))) ($IsGoodHeap $Heap@@4)) ($IsAlloc DatatypeTypeType (_module.__default.append _module._default.append$_T0@@2 $ly@@13 |xs#0@@2| |ys#0@@2|) (Tclass._module.List _module._default.append$_T0@@2) $Heap@@4))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.__default.append _module._default.append$_T0@@2 $ly@@13 |xs#0@@2| |ys#0@@2|) (Tclass._module.List _module._default.append$_T0@@2) $Heap@@4))
))))
(assert (forall ((|#$T0@@12| T@U) (|#$R@@12| T@U) ) (!  (and (= (Tag (Tclass._System.___hFunc1 |#$T0@@12| |#$R@@12|)) Tagclass._System.___hFunc1) (= (TagFamily (Tclass._System.___hFunc1 |#$T0@@12| |#$R@@12|)) |tytagFamily$_#Func1|))
 :pattern ( (Tclass._System.___hFunc1 |#$T0@@12| |#$R@@12|))
)))
(assert (forall ((|#$T0@@13| T@U) (|#$R@@13| T@U) ) (!  (and (= (Tag (Tclass._System.___hPartialFunc1 |#$T0@@13| |#$R@@13|)) Tagclass._System.___hPartialFunc1) (= (TagFamily (Tclass._System.___hPartialFunc1 |#$T0@@13| |#$R@@13|)) |tytagFamily$_#PartialFunc1|))
 :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@13| |#$R@@13|))
)))
(assert (forall ((|#$T0@@14| T@U) (|#$R@@14| T@U) ) (!  (and (= (Tag (Tclass._System.___hTotalFunc1 |#$T0@@14| |#$R@@14|)) Tagclass._System.___hTotalFunc1) (= (TagFamily (Tclass._System.___hTotalFunc1 |#$T0@@14| |#$R@@14|)) |tytagFamily$_#TotalFunc1|))
 :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@14| |#$R@@14|))
)))
(assert (forall ((d@@19 T@U) ($h@@3 T@U) ) (!  (=> (and ($IsGoodHeap $h@@3) (and (_module.aexp.N_q d@@19) ($IsAlloc DatatypeTypeType d@@19 Tclass._module.aexp $h@@3))) ($IsAlloc intType (int_2_U (_module.aexp.n d@@19)) TInt $h@@3))
 :pattern ( ($IsAlloc intType (int_2_U (_module.aexp.n d@@19)) TInt $h@@3))
)))
(assert (forall ((d@@20 T@U) ($h@@4 T@U) ) (!  (=> (and ($IsGoodHeap $h@@4) (and (_module.instr.LOADI_q d@@20) ($IsAlloc DatatypeTypeType d@@20 Tclass._module.instr $h@@4))) ($IsAlloc intType (int_2_U (_module.instr._h12 d@@20)) TInt $h@@4))
 :pattern ( ($IsAlloc intType (int_2_U (_module.instr._h12 d@@20)) TInt $h@@4))
)))
(assert (forall ((d@@21 T@U) ) (!  (=> ($Is DatatypeTypeType d@@21 Tclass._module.aexp) (or (or (_module.aexp.N_q d@@21) (_module.aexp.V_q d@@21)) (_module.aexp.Plus_q d@@21)))
 :pattern ( (_module.aexp.Plus_q d@@21) ($Is DatatypeTypeType d@@21 Tclass._module.aexp))
 :pattern ( (_module.aexp.V_q d@@21) ($Is DatatypeTypeType d@@21 Tclass._module.aexp))
 :pattern ( (_module.aexp.N_q d@@21) ($Is DatatypeTypeType d@@21 Tclass._module.aexp))
)))
(assert (forall ((d@@22 T@U) ) (!  (=> ($Is DatatypeTypeType d@@22 Tclass._module.instr) (or (or (_module.instr.LOADI_q d@@22) (_module.instr.LOAD_q d@@22)) (_module.instr.ADD_q d@@22)))
 :pattern ( (_module.instr.ADD_q d@@22) ($Is DatatypeTypeType d@@22 Tclass._module.instr))
 :pattern ( (_module.instr.LOAD_q d@@22) ($Is DatatypeTypeType d@@22 Tclass._module.instr))
 :pattern ( (_module.instr.LOADI_q d@@22) ($Is DatatypeTypeType d@@22 Tclass._module.instr))
)))
(assert (forall ((t0@@7 T@U) (t1@@6 T@U) (heap@@0 T@U) (f@@4 T@U) (bx0@@3 T@U) ) (!  (=> (and (and ($IsGoodHeap heap@@0) (and ($IsBox bx0@@3 t0@@7) ($Is HandleTypeType f@@4 (Tclass._System.___hFunc1 t0@@7 t1@@6)))) (|Set#Equal| (Reads1 t0@@7 t1@@6 $OneHeap f@@4 bx0@@3) |Set#Empty|)) (= (Requires1 t0@@7 t1@@6 $OneHeap f@@4 bx0@@3) (Requires1 t0@@7 t1@@6 heap@@0 f@@4 bx0@@3)))
 :pattern ( (Requires1 t0@@7 t1@@6 $OneHeap f@@4 bx0@@3) ($IsGoodHeap heap@@0))
 :pattern ( (Requires1 t0@@7 t1@@6 heap@@0 f@@4 bx0@@3))
)))
(assert (forall ((d@@23 T@U) ) (! (= (BoxRank ($Box DatatypeTypeType d@@23)) (DtRank d@@23))
 :pattern ( (BoxRank ($Box DatatypeTypeType d@@23)))
)))
(assert (forall ((_module._default.append$_T0@@3 T@U) ($ly@@14 T@U) (|xs#0@@3| T@U) (|ys#0@@3| T@U) ) (! (= (_module.__default.append _module._default.append$_T0@@3 ($LS $ly@@14) |xs#0@@3| |ys#0@@3|) (_module.__default.append _module._default.append$_T0@@3 $ly@@14 |xs#0@@3| |ys#0@@3|))
 :pattern ( (_module.__default.append _module._default.append$_T0@@3 ($LS $ly@@14) |xs#0@@3| |ys#0@@3|))
)))
(assert (forall ((bx@@8 T@U) (t@@3 T@U) ) (!  (=> ($IsBox bx@@8 (TSeq t@@3)) (and (= ($Box SeqType ($Unbox SeqType bx@@8)) bx@@8) ($Is SeqType ($Unbox SeqType bx@@8) (TSeq t@@3))))
 :pattern ( ($IsBox bx@@8 (TSeq t@@3)))
)))
(assert (forall ((_module.List$T@@6 T@U) (bx@@9 T@U) ) (!  (=> ($IsBox bx@@9 (Tclass._module.List _module.List$T@@6)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@9)) bx@@9) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@9) (Tclass._module.List _module.List$T@@6))))
 :pattern ( ($IsBox bx@@9 (Tclass._module.List _module.List$T@@6)))
)))
(assert (forall ((d@@24 T@U) (_module.List$T@@7 T@U) ($h@@5 T@U) ) (!  (=> (and ($IsGoodHeap $h@@5) (and (_module.List.Cons_q d@@24) ($IsAlloc DatatypeTypeType d@@24 (Tclass._module.List _module.List$T@@7) $h@@5))) ($IsAlloc DatatypeTypeType (_module.List.tail d@@24) (Tclass._module.List _module.List$T@@7) $h@@5))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.List.tail d@@24) (Tclass._module.List _module.List$T@@7) $h@@5))
)))
(assert (forall ((d@@25 T@U) ($h@@6 T@U) ) (!  (=> (and ($IsGoodHeap $h@@6) ($Is DatatypeTypeType d@@25 Tclass._module.aexp)) ($IsAlloc DatatypeTypeType d@@25 Tclass._module.aexp $h@@6))
 :pattern ( ($IsAlloc DatatypeTypeType d@@25 Tclass._module.aexp $h@@6))
)))
(assert (forall ((d@@26 T@U) ($h@@7 T@U) ) (!  (=> (and ($IsGoodHeap $h@@7) ($Is DatatypeTypeType d@@26 Tclass._module.instr)) ($IsAlloc DatatypeTypeType d@@26 Tclass._module.instr $h@@7))
 :pattern ( ($IsAlloc DatatypeTypeType d@@26 Tclass._module.instr $h@@7))
)))
(assert (= (Tag Tclass._module.aexp) Tagclass._module.aexp))
(assert (= (TagFamily Tclass._module.aexp) tytagFamily$aexp))
(assert (= (Tag Tclass._module.instr) Tagclass._module.instr))
(assert (= (TagFamily Tclass._module.instr) tytagFamily$instr))
(assert (= |#_module.List.Nil| (Lit DatatypeTypeType |#_module.List.Nil|)))
(assert (= |#_module.instr.ADD| (Lit DatatypeTypeType |#_module.instr.ADD|)))
(assert (forall ((|a#19#0#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.aexp.V| |a#19#0#0|) Tclass._module.aexp) ($Is SeqType |a#19#0#0| (TSeq TChar)))
 :pattern ( ($Is DatatypeTypeType (|#_module.aexp.V| |a#19#0#0|) Tclass._module.aexp))
)))
(assert (forall ((|a#66#0#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.instr.LOAD| |a#66#0#0|) Tclass._module.instr) ($Is SeqType |a#66#0#0| (TSeq TChar)))
 :pattern ( ($Is DatatypeTypeType (|#_module.instr.LOAD| |a#66#0#0|) Tclass._module.instr))
)))
(assert (forall ((d@@27 T@U) ($h@@8 T@U) ) (!  (=> (and ($IsGoodHeap $h@@8) (and (_module.aexp.V_q d@@27) ($IsAlloc DatatypeTypeType d@@27 Tclass._module.aexp $h@@8))) ($IsAlloc SeqType (_module.aexp._h0 d@@27) (TSeq TChar) $h@@8))
 :pattern ( ($IsAlloc SeqType (_module.aexp._h0 d@@27) (TSeq TChar) $h@@8))
)))
(assert (forall ((d@@28 T@U) ($h@@9 T@U) ) (!  (=> (and ($IsGoodHeap $h@@9) (and (_module.instr.LOAD_q d@@28) ($IsAlloc DatatypeTypeType d@@28 Tclass._module.instr $h@@9))) ($IsAlloc SeqType (_module.instr._h13 d@@28) (TSeq TChar) $h@@9))
 :pattern ( ($IsAlloc SeqType (_module.instr._h13 d@@28) (TSeq TChar) $h@@9))
)))
(assert (forall ((a@@3 T@U) (b@@3 T@U) ) (! (= (|Set#Equal| a@@3 b@@3) (forall ((o@@0 T@U) ) (! (= (|Set#IsMember| a@@3 o@@0) (|Set#IsMember| b@@3 o@@0))
 :pattern ( (|Set#IsMember| a@@3 o@@0))
 :pattern ( (|Set#IsMember| b@@3 o@@0))
)))
 :pattern ( (|Set#Equal| a@@3 b@@3))
)))
(assert (forall ((d@@29 T@U) ($h@@10 T@U) ) (!  (=> (and ($IsGoodHeap $h@@10) (and (_module.aexp.Plus_q d@@29) ($IsAlloc DatatypeTypeType d@@29 Tclass._module.aexp $h@@10))) ($IsAlloc DatatypeTypeType (_module.aexp._h1 d@@29) Tclass._module.aexp $h@@10))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.aexp._h1 d@@29) Tclass._module.aexp $h@@10))
)))
(assert (forall ((d@@30 T@U) ($h@@11 T@U) ) (!  (=> (and ($IsGoodHeap $h@@11) (and (_module.aexp.Plus_q d@@30) ($IsAlloc DatatypeTypeType d@@30 Tclass._module.aexp $h@@11))) ($IsAlloc DatatypeTypeType (_module.aexp._h2 d@@30) Tclass._module.aexp $h@@11))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.aexp._h2 d@@30) Tclass._module.aexp $h@@11))
)))
(assert  (=> (<= 3 $FunctionContextHeight) (forall (($ly@@15 T@U) (|ii#0@@2| T@U) (|s#0@@9| T@U) (|stk#0@@5| T@U) ) (!  (=> (or (|_module.__default.exec#canCall| |ii#0@@2| |s#0@@9| |stk#0@@5|) (and (< 3 $FunctionContextHeight) (and (and ($Is DatatypeTypeType |ii#0@@2| (Tclass._module.List Tclass._module.instr)) ($Is HandleTypeType |s#0@@9| (Tclass._System.___hTotalFunc1 (TSeq TChar) TInt))) ($Is DatatypeTypeType |stk#0@@5| (Tclass._module.List TInt))))) (and (=> (not (_module.List.Nil_q |ii#0@@2|)) (let ((|rest#1| (_module.List.tail |ii#0@@2|)))
(let ((|i#1| ($Unbox DatatypeTypeType (_module.List.head |ii#0@@2|))))
 (and (|_module.__default.exec1#canCall| |i#1| |s#0@@9| |stk#0@@5|) (|_module.__default.exec#canCall| |rest#1| |s#0@@9| (_module.__default.exec1 |i#1| |s#0@@9| |stk#0@@5|)))))) (= (_module.__default.exec ($LS $ly@@15) |ii#0@@2| |s#0@@9| |stk#0@@5|) (ite (_module.List.Nil_q |ii#0@@2|) |stk#0@@5| (let ((|rest#0| (_module.List.tail |ii#0@@2|)))
(let ((|i#0@@2| ($Unbox DatatypeTypeType (_module.List.head |ii#0@@2|))))
(_module.__default.exec $ly@@15 |rest#0| |s#0@@9| (_module.__default.exec1 |i#0@@2| |s#0@@9| |stk#0@@5|))))))))
 :pattern ( (_module.__default.exec ($LS $ly@@15) |ii#0@@2| |s#0@@9| |stk#0@@5|))
))))
(assert (forall ((|a#7#0#0| T@U) (|a#7#1#0| T@U) ) (! (= (|#_module.List.Cons| (Lit BoxType |a#7#0#0|) (Lit DatatypeTypeType |a#7#1#0|)) (Lit DatatypeTypeType (|#_module.List.Cons| |a#7#0#0| |a#7#1#0|)))
 :pattern ( (|#_module.List.Cons| (Lit BoxType |a#7#0#0|) (Lit DatatypeTypeType |a#7#1#0|)))
)))
(assert (forall ((|a#27#0#0| T@U) (|a#27#1#0| T@U) ) (! (= (|#_module.aexp.Plus| (Lit DatatypeTypeType |a#27#0#0|) (Lit DatatypeTypeType |a#27#1#0|)) (Lit DatatypeTypeType (|#_module.aexp.Plus| |a#27#0#0| |a#27#1#0|)))
 :pattern ( (|#_module.aexp.Plus| (Lit DatatypeTypeType |a#27#0#0|) (Lit DatatypeTypeType |a#27#1#0|)))
)))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((|a#15#0#0| Int) ) (! (= (|#_module.aexp.N| (LitInt |a#15#0#0|)) (Lit DatatypeTypeType (|#_module.aexp.N| |a#15#0#0|)))
 :pattern ( (|#_module.aexp.N| (LitInt |a#15#0#0|)))
)))
(assert (forall ((|a#20#0#0| T@U) ) (! (= (|#_module.aexp.V| (Lit SeqType |a#20#0#0|)) (Lit DatatypeTypeType (|#_module.aexp.V| |a#20#0#0|)))
 :pattern ( (|#_module.aexp.V| (Lit SeqType |a#20#0#0|)))
)))
(assert (forall ((|a#62#0#0| Int) ) (! (= (|#_module.instr.LOADI| (LitInt |a#62#0#0|)) (Lit DatatypeTypeType (|#_module.instr.LOADI| |a#62#0#0|)))
 :pattern ( (|#_module.instr.LOADI| (LitInt |a#62#0#0|)))
)))
(assert (forall ((|a#67#0#0| T@U) ) (! (= (|#_module.instr.LOAD| (Lit SeqType |a#67#0#0|)) (Lit DatatypeTypeType (|#_module.instr.LOAD| |a#67#0#0|)))
 :pattern ( (|#_module.instr.LOAD| (Lit SeqType |a#67#0#0|)))
)))
(assert (forall ((x@@7 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@7)) (Lit BoxType ($Box T@@4 x@@7)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@7)))
)))
(assert (forall ((s@@0 T@U) ) (!  (=> (= (|Seq#Length| s@@0) 0) (= s@@0 |Seq#Empty|))
 :pattern ( (|Seq#Length| s@@0))
)))
(assert  (=> (<= 3 $FunctionContextHeight) (forall (($ly@@16 T@U) (|ii#0@@3| T@U) (|s#0@@10| T@U) (|stk#0@@6| T@U) ) (!  (=> (or (|_module.__default.exec#canCall| (Lit DatatypeTypeType |ii#0@@3|) |s#0@@10| (Lit DatatypeTypeType |stk#0@@6|)) (and (< 3 $FunctionContextHeight) (and (and ($Is DatatypeTypeType |ii#0@@3| (Tclass._module.List Tclass._module.instr)) ($Is HandleTypeType |s#0@@10| (Tclass._System.___hTotalFunc1 (TSeq TChar) TInt))) ($Is DatatypeTypeType |stk#0@@6| (Tclass._module.List TInt))))) (and (=> (not (U_2_bool (Lit boolType (bool_2_U (_module.List.Nil_q (Lit DatatypeTypeType |ii#0@@3|)))))) (let ((|rest#3| (Lit DatatypeTypeType (_module.List.tail (Lit DatatypeTypeType |ii#0@@3|)))))
(let ((|i#3| (Lit DatatypeTypeType ($Unbox DatatypeTypeType (_module.List.head (Lit DatatypeTypeType |ii#0@@3|))))))
 (and (|_module.__default.exec1#canCall| |i#3| |s#0@@10| (Lit DatatypeTypeType |stk#0@@6|)) (|_module.__default.exec#canCall| |rest#3| |s#0@@10| (_module.__default.exec1 |i#3| |s#0@@10| (Lit DatatypeTypeType |stk#0@@6|))))))) (= (_module.__default.exec ($LS $ly@@16) (Lit DatatypeTypeType |ii#0@@3|) |s#0@@10| (Lit DatatypeTypeType |stk#0@@6|)) (ite (_module.List.Nil_q (Lit DatatypeTypeType |ii#0@@3|)) |stk#0@@6| (let ((|rest#2| (Lit DatatypeTypeType (_module.List.tail (Lit DatatypeTypeType |ii#0@@3|)))))
(let ((|i#2| (Lit DatatypeTypeType ($Unbox DatatypeTypeType (_module.List.head (Lit DatatypeTypeType |ii#0@@3|))))))
(_module.__default.exec ($LS $ly@@16) |rest#2| |s#0@@10| (_module.__default.exec1 |i#2| |s#0@@10| (Lit DatatypeTypeType |stk#0@@6|)))))))))
 :weight 3
 :pattern ( (_module.__default.exec ($LS $ly@@16) (Lit DatatypeTypeType |ii#0@@3|) |s#0@@10| (Lit DatatypeTypeType |stk#0@@6|)))
))))
(assert (forall ((h@@4 T@U) (v@@2 T@U) ) (! ($IsAlloc intType v@@2 TInt h@@4)
 :pattern ( ($IsAlloc intType v@@2 TInt h@@4))
)))
(assert (forall ((h@@5 T@U) (v@@3 T@U) ) (! ($IsAlloc charType v@@3 TChar h@@5)
 :pattern ( ($IsAlloc charType v@@3 TChar h@@5))
)))
(assert (forall ((_module.List$T@@8 T@U) (|a#6#0#0@@0| T@U) (|a#6#1#0@@0| T@U) ($h@@12 T@U) ) (!  (=> ($IsGoodHeap $h@@12) (= ($IsAlloc DatatypeTypeType (|#_module.List.Cons| |a#6#0#0@@0| |a#6#1#0@@0|) (Tclass._module.List _module.List$T@@8) $h@@12)  (and ($IsAllocBox |a#6#0#0@@0| _module.List$T@@8 $h@@12) ($IsAlloc DatatypeTypeType |a#6#1#0@@0| (Tclass._module.List _module.List$T@@8) $h@@12))))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_module.List.Cons| |a#6#0#0@@0| |a#6#1#0@@0|) (Tclass._module.List _module.List$T@@8) $h@@12))
)))
(assert (forall ((v@@4 T@U) (t0@@8 T@U) ) (! (= ($Is SeqType v@@4 (TSeq t0@@8)) (forall ((i@@2 Int) ) (!  (=> (and (<= 0 i@@2) (< i@@2 (|Seq#Length| v@@4))) ($IsBox (|Seq#Index| v@@4 i@@2) t0@@8))
 :pattern ( (|Seq#Index| v@@4 i@@2))
)))
 :pattern ( ($Is SeqType v@@4 (TSeq t0@@8)))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($Heap@@5 T@U) (|i#0@@3| T@U) (|s#0@@11| T@U) (|stk#0@@7| T@U) ) (!  (=> (or (|_module.__default.exec1#canCall| (Lit DatatypeTypeType |i#0@@3|) (Lit HandleTypeType |s#0@@11|) (Lit DatatypeTypeType |stk#0@@7|)) (and (< 2 $FunctionContextHeight) (and (and (and ($IsGoodHeap $Heap@@5) ($Is DatatypeTypeType |i#0@@3| Tclass._module.instr)) ($Is HandleTypeType |s#0@@11| (Tclass._System.___hTotalFunc1 (TSeq TChar) TInt))) ($Is DatatypeTypeType |stk#0@@7| (Tclass._module.List TInt))))) (= (_module.__default.exec1 (Lit DatatypeTypeType |i#0@@3|) (Lit HandleTypeType |s#0@@11|) (Lit DatatypeTypeType |stk#0@@7|)) (ite (_module.instr.LOADI_q (Lit DatatypeTypeType |i#0@@3|)) (let ((|n#4@@0| (LitInt (_module.instr._h12 (Lit DatatypeTypeType |i#0@@3|)))))
(Lit DatatypeTypeType (|#_module.List.Cons| ($Box intType (int_2_U |n#4@@0|)) (Lit DatatypeTypeType |stk#0@@7|)))) (ite (_module.instr.LOAD_q (Lit DatatypeTypeType |i#0@@3|)) (let ((|x#4@@0| (Lit SeqType (_module.instr._h13 (Lit DatatypeTypeType |i#0@@3|)))))
(|#_module.List.Cons| (Apply1 (TSeq TChar) TInt $Heap@@5 (Lit HandleTypeType |s#0@@11|) ($Box SeqType |x#4@@0|)) (Lit DatatypeTypeType |stk#0@@7|))) (ite  (and (_module.List.Cons_q (Lit DatatypeTypeType |stk#0@@7|)) (_module.List.Cons_q (Lit DatatypeTypeType (_module.List.tail (Lit DatatypeTypeType |stk#0@@7|))))) (let ((|tail#4| (_module.List.tail (_module.List.tail (Lit DatatypeTypeType |stk#0@@7|)))))
(let ((|a0#4@@0| (U_2_int ($Unbox intType (_module.List.head (_module.List.tail (Lit DatatypeTypeType |stk#0@@7|)))))))
(let ((|a1#4@@0| (U_2_int ($Unbox intType (_module.List.head (Lit DatatypeTypeType |stk#0@@7|))))))
(|#_module.List.Cons| ($Box intType (int_2_U (+ |a0#4@@0| |a1#4@@0|))) |tail#4|)))) |#_module.List.Nil|)))))
 :weight 3
 :pattern ( (_module.__default.exec1 (Lit DatatypeTypeType |i#0@@3|) (Lit HandleTypeType |s#0@@11|) (Lit DatatypeTypeType |stk#0@@7|)) ($IsGoodHeap $Heap@@5))
))))
(assert (forall ((s@@1 T@U) (i@@3 Int) ) (!  (=> (and (<= 0 i@@3) (< i@@3 (|Seq#Length| s@@1))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@1 i@@3))) (|Seq#Rank| s@@1)))
 :pattern ( (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@1 i@@3))))
)))
(assert (forall ((v@@5 T@U) ) (! ($Is intType v@@5 TInt)
 :pattern ( ($Is intType v@@5 TInt))
)))
(assert (forall ((v@@6 T@U) ) (! ($Is charType v@@6 TChar)
 :pattern ( ($Is charType v@@6 TChar))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |a#0@@7| () T@U)
(declare-fun |s#0@@12| () T@U)
(declare-fun |stk#0@@8| () T@U)
(declare-fun |_mcc#1#1_0@0| () T@U)
(declare-fun |_mcc#0#2_0@0| () Int)
(declare-fun |a1#0_0@0| () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun |a0#0_0@0| () T@U)
(declare-fun |##ii#0_0_1_0@0| () T@U)
(declare-fun |##stk#0_0_1_0@0| () T@U)
(declare-fun |##ii#0_0_2_0@0| () T@U)
(declare-fun |##ii#0_0_2_1@0| () T@U)
(declare-fun |##stk#0_0_2_1@0| () T@U)
(declare-fun |##stk#0_0_2_0@0| () T@U)
(declare-fun |stk##0_0_2_0@0| () T@U)
(declare-fun $Heap@4 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |##ii#0_0_2_2@0| () T@U)
(declare-fun |##stk#0_0_2_2@0| () T@U)
(declare-fun |##ii#0_0_3_0@0| () T@U)
(declare-fun |##ii#0_0_3_1@0| () T@U)
(declare-fun |##ii#0_0_3_2@0| () T@U)
(declare-fun |##stk#0_0_3_1@0| () T@U)
(declare-fun |##stk#0_0_3_0@0| () T@U)
(declare-fun $Heap@3 () T@U)
(declare-fun |##ii#0_0_3_3@0| () T@U)
(declare-fun |##ii#0_0_3_4@0| () T@U)
(declare-fun |##stk#0_0_3_4@0| () T@U)
(declare-fun |##stk#0_0_3_3@0| () T@U)
(declare-fun |##ii#0_0_4_0@0| () T@U)
(declare-fun |##xs#0_0_4_0@0| () T@U)
(declare-fun |##ys#0_0_4_0@0| () T@U)
(declare-fun |##ii#0_0_4_1@0| () T@U)
(declare-fun |##stk#0_0_4_0@0| () T@U)
(declare-fun |ii0##0_0_4_0@0| () T@U)
(declare-fun |ii1##0_0_4_0@0| () T@U)
(declare-fun $Heap@2 () T@U)
(declare-fun |##ii#0_0_4_2@0| () T@U)
(declare-fun |##ii#0_0_4_3@0| () T@U)
(declare-fun |##ii#0_0_4_4@0| () T@U)
(declare-fun |##stk#0_0_4_3@0| () T@U)
(declare-fun |##stk#0_0_4_2@0| () T@U)
(declare-fun |##xs#0_0_5_1@0| () T@U)
(declare-fun |##ys#0_0_5_0@0| () T@U)
(declare-fun |##xs#0_0_5_0@0| () T@U)
(declare-fun |##ys#0_0_5_1@0| () T@U)
(declare-fun |##ii#0_0_5_0@0| () T@U)
(declare-fun |##xs#0_0_5_2@0| () T@U)
(declare-fun |##ys#0_0_5_2@0| () T@U)
(declare-fun |ii0##0_0_5_0@0| () T@U)
(declare-fun |ii1##0_0_5_0@0| () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun |##ii#0_0_5_1@0| () T@U)
(declare-fun |##xs#0_0_5_3@0| () T@U)
(declare-fun |##ys#0_0_5_3@0| () T@U)
(declare-fun |##ii#0_0_5_2@0| () T@U)
(declare-fun |##stk#0_0_5_1@0| () T@U)
(declare-fun |##ii#0_0_6_0@0| () T@U)
(declare-fun |##xs#0_0_6_1@0| () T@U)
(declare-fun |##ys#0_0_6_0@0| () T@U)
(declare-fun |##xs#0_0_6_0@0| () T@U)
(declare-fun |##ys#0_0_6_1@0| () T@U)
(declare-fun |##ii#0_0_6_1@0| () T@U)
(declare-fun |_mcc#2#0_0@0| () T@U)
(declare-fun |_mcc#3#0_0@0| () T@U)
(declare-fun |let#0_0#0#0| () T@U)
(declare-fun |let#0_1#0#0| () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun $Heap@@6 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 28) (let ((GeneratedUnifiedExit_correct  (=> (= (ControlFlow 0 20) (- 0 19)) (|_module.List#Equal| (_module.__default.exec ($LS ($LS $LZ)) (_module.__default.comp ($LS ($LS $LZ)) |a#0@@7|) |s#0@@12| |stk#0@@8|) (|#_module.List.Cons| ($Box intType (int_2_U (_module.__default.aval ($LS ($LS $LZ)) |a#0@@7| |s#0@@12|))) |stk#0@@8|)))))
(let ((anon24_Else_correct  (=> (and (|_module.List#Equal| (_module.__default.exec ($LS $LZ) (_module.__default.comp ($LS $LZ) |a#0@@7|) |s#0@@12| |stk#0@@8|) (|#_module.List.Cons| ($Box intType (int_2_U (_module.__default.aval ($LS $LZ) |a#0@@7| |s#0@@12|))) |stk#0@@8|)) (= (ControlFlow 0 23) 20)) GeneratedUnifiedExit_correct)))
(let ((anon15_Then_correct  (=> (= |a#0@@7| (|#_module.aexp.V| |_mcc#1#1_0@0|)) (=> (and ($Is SeqType |_mcc#1#1_0@0| (TSeq TChar)) (= (ControlFlow 0 22) 20)) GeneratedUnifiedExit_correct))))
(let ((anon14_Then_correct  (=> (and (= |a#0@@7| (|#_module.aexp.N| |_mcc#0#2_0@0|)) (= (ControlFlow 0 21) 20)) GeneratedUnifiedExit_correct)))
(let ((anon24_Then_correct  (=> (and ($IsAlloc DatatypeTypeType |a1#0_0@0| Tclass._module.aexp $Heap@0) ($IsAlloc HandleTypeType |s#0@@12| (Tclass._System.___hTotalFunc1 (TSeq TChar) TInt) $Heap@0)) (=> (and (and (|_module.__default.aval#canCall| |a1#0_0@0| |s#0@@12|) ($IsAlloc DatatypeTypeType |a0#0_0@0| Tclass._module.aexp $Heap@0)) (and ($IsAlloc HandleTypeType |s#0@@12| (Tclass._System.___hTotalFunc1 (TSeq TChar) TInt) $Heap@0) (|_module.__default.aval#canCall| |a0#0_0@0| |s#0@@12|))) (=> (and (and (and (|_module.__default.aval#canCall| |a1#0_0@0| |s#0@@12|) (|_module.__default.aval#canCall| |a0#0_0@0| |s#0@@12|)) ($IsAlloc DatatypeTypeType |a#0@@7| Tclass._module.aexp $Heap@0)) (and (and ($IsAlloc HandleTypeType |s#0@@12| (Tclass._System.___hTotalFunc1 (TSeq TChar) TInt) $Heap@0) (|_module.__default.aval#canCall| |a#0@@7| |s#0@@12|)) (and (|_module.__default.aval#canCall| |a#0@@7| |s#0@@12|) (= (ControlFlow 0 18) (- 0 17))))) (|_module.List#Equal| (|#_module.List.Cons| ($Box intType (int_2_U (+ (_module.__default.aval ($LS ($LS $LZ)) |a1#0_0@0| |s#0@@12|) (_module.__default.aval ($LS ($LS $LZ)) |a0#0_0@0| |s#0@@12|)))) |stk#0@@8|) (|#_module.List.Cons| ($Box intType (int_2_U (_module.__default.aval ($LS ($LS $LZ)) |a#0@@7| |s#0@@12|))) |stk#0@@8|)))))))
(let ((anon23_Then_correct  (=> (and (and (= |##ii#0_0_1_0@0| (Lit DatatypeTypeType (|#_module.List.Cons| ($Box DatatypeTypeType (Lit DatatypeTypeType |#_module.instr.ADD|)) (Lit DatatypeTypeType |#_module.List.Nil|)))) ($IsAlloc DatatypeTypeType |##ii#0_0_1_0@0| (Tclass._module.List Tclass._module.instr) $Heap@0)) (and ($IsAlloc HandleTypeType |s#0@@12| (Tclass._System.___hTotalFunc1 (TSeq TChar) TInt) $Heap@0) ($IsAlloc DatatypeTypeType |a1#0_0@0| Tclass._module.aexp $Heap@0))) (=> (and (and (and ($IsAlloc HandleTypeType |s#0@@12| (Tclass._System.___hTotalFunc1 (TSeq TChar) TInt) $Heap@0) (|_module.__default.aval#canCall| |a1#0_0@0| |s#0@@12|)) (and ($IsAlloc DatatypeTypeType |a0#0_0@0| Tclass._module.aexp $Heap@0) ($IsAlloc HandleTypeType |s#0@@12| (Tclass._System.___hTotalFunc1 (TSeq TChar) TInt) $Heap@0))) (and (and (|_module.__default.aval#canCall| |a0#0_0@0| |s#0@@12|) (= |##stk#0_0_1_0@0| (|#_module.List.Cons| ($Box intType (int_2_U (_module.__default.aval ($LS $LZ) |a1#0_0@0| |s#0@@12|))) (|#_module.List.Cons| ($Box intType (int_2_U (_module.__default.aval ($LS $LZ) |a0#0_0@0| |s#0@@12|))) |stk#0@@8|)))) (and ($IsAlloc DatatypeTypeType |##stk#0_0_1_0@0| (Tclass._module.List TInt) $Heap@0) (|_module.__default.exec#canCall| (Lit DatatypeTypeType (|#_module.List.Cons| ($Box DatatypeTypeType (Lit DatatypeTypeType |#_module.instr.ADD|)) (Lit DatatypeTypeType |#_module.List.Nil|))) |s#0@@12| (|#_module.List.Cons| ($Box intType (int_2_U (_module.__default.aval ($LS $LZ) |a1#0_0@0| |s#0@@12|))) (|#_module.List.Cons| ($Box intType (int_2_U (_module.__default.aval ($LS $LZ) |a0#0_0@0| |s#0@@12|))) |stk#0@@8|)))))) (=> (and (and (and (and (|_module.__default.aval#canCall| |a1#0_0@0| |s#0@@12|) (|_module.__default.aval#canCall| |a0#0_0@0| |s#0@@12|)) (|_module.__default.exec#canCall| (Lit DatatypeTypeType (|#_module.List.Cons| ($Box DatatypeTypeType (Lit DatatypeTypeType |#_module.instr.ADD|)) (Lit DatatypeTypeType |#_module.List.Nil|))) |s#0@@12| (|#_module.List.Cons| ($Box intType (int_2_U (_module.__default.aval ($LS $LZ) |a1#0_0@0| |s#0@@12|))) (|#_module.List.Cons| ($Box intType (int_2_U (_module.__default.aval ($LS $LZ) |a0#0_0@0| |s#0@@12|))) |stk#0@@8|)))) (and ($IsAlloc DatatypeTypeType |a1#0_0@0| Tclass._module.aexp $Heap@0) ($IsAlloc HandleTypeType |s#0@@12| (Tclass._System.___hTotalFunc1 (TSeq TChar) TInt) $Heap@0))) (and (and (and (|_module.__default.aval#canCall| |a1#0_0@0| |s#0@@12|) ($IsAlloc DatatypeTypeType |a0#0_0@0| Tclass._module.aexp $Heap@0)) (and ($IsAlloc HandleTypeType |s#0@@12| (Tclass._System.___hTotalFunc1 (TSeq TChar) TInt) $Heap@0) (|_module.__default.aval#canCall| |a0#0_0@0| |s#0@@12|))) (and (and (|_module.__default.aval#canCall| |a1#0_0@0| |s#0@@12|) (|_module.__default.aval#canCall| |a0#0_0@0| |s#0@@12|)) (= (ControlFlow 0 16) (- 0 15))))) (|_module.List#Equal| (_module.__default.exec ($LS ($LS $LZ)) (Lit DatatypeTypeType (|#_module.List.Cons| ($Box DatatypeTypeType (Lit DatatypeTypeType |#_module.instr.ADD|)) (Lit DatatypeTypeType |#_module.List.Nil|))) |s#0@@12| (|#_module.List.Cons| ($Box intType (int_2_U (_module.__default.aval ($LS ($LS $LZ)) |a1#0_0@0| |s#0@@12|))) (|#_module.List.Cons| ($Box intType (int_2_U (_module.__default.aval ($LS ($LS $LZ)) |a0#0_0@0| |s#0@@12|))) |stk#0@@8|))) (|#_module.List.Cons| ($Box intType (int_2_U (+ (_module.__default.aval ($LS ($LS $LZ)) |a1#0_0@0| |s#0@@12|) (_module.__default.aval ($LS ($LS $LZ)) |a0#0_0@0| |s#0@@12|)))) |stk#0@@8|)))))))
(let ((anon22_Then_correct  (=> (= |##ii#0_0_2_0@0| (Lit DatatypeTypeType (|#_module.List.Cons| ($Box DatatypeTypeType (Lit DatatypeTypeType |#_module.instr.ADD|)) (Lit DatatypeTypeType |#_module.List.Nil|)))) (=> (and (and (and (and ($IsAlloc DatatypeTypeType |##ii#0_0_2_0@0| (Tclass._module.List Tclass._module.instr) $Heap@0) ($IsAlloc HandleTypeType |s#0@@12| (Tclass._System.___hTotalFunc1 (TSeq TChar) TInt) $Heap@0)) (and ($IsAlloc DatatypeTypeType |a1#0_0@0| Tclass._module.aexp $Heap@0) (|_module.__default.comp#canCall| |a1#0_0@0|))) (and (and (= |##ii#0_0_2_1@0| (_module.__default.comp ($LS $LZ) |a1#0_0@0|)) ($IsAlloc DatatypeTypeType |##ii#0_0_2_1@0| (Tclass._module.List Tclass._module.instr) $Heap@0)) (and ($IsAlloc HandleTypeType |s#0@@12| (Tclass._System.___hTotalFunc1 (TSeq TChar) TInt) $Heap@0) ($IsAlloc DatatypeTypeType |a0#0_0@0| Tclass._module.aexp $Heap@0)))) (and (and (and ($IsAlloc HandleTypeType |s#0@@12| (Tclass._System.___hTotalFunc1 (TSeq TChar) TInt) $Heap@0) (|_module.__default.aval#canCall| |a0#0_0@0| |s#0@@12|)) (and (= |##stk#0_0_2_1@0| (|#_module.List.Cons| ($Box intType (int_2_U (_module.__default.aval ($LS $LZ) |a0#0_0@0| |s#0@@12|))) |stk#0@@8|)) ($IsAlloc DatatypeTypeType |##stk#0_0_2_1@0| (Tclass._module.List TInt) $Heap@0))) (and (and (|_module.__default.exec#canCall| (_module.__default.comp ($LS $LZ) |a1#0_0@0|) |s#0@@12| (|#_module.List.Cons| ($Box intType (int_2_U (_module.__default.aval ($LS $LZ) |a0#0_0@0| |s#0@@12|))) |stk#0@@8|)) (= |##stk#0_0_2_0@0| (_module.__default.exec ($LS $LZ) (_module.__default.comp ($LS $LZ) |a1#0_0@0|) |s#0@@12| (|#_module.List.Cons| ($Box intType (int_2_U (_module.__default.aval ($LS $LZ) |a0#0_0@0| |s#0@@12|))) |stk#0@@8|)))) (and ($IsAlloc DatatypeTypeType |##stk#0_0_2_0@0| (Tclass._module.List TInt) $Heap@0) (|_module.__default.exec#canCall| (Lit DatatypeTypeType (|#_module.List.Cons| ($Box DatatypeTypeType (Lit DatatypeTypeType |#_module.instr.ADD|)) (Lit DatatypeTypeType |#_module.List.Nil|))) |s#0@@12| (_module.__default.exec ($LS $LZ) (_module.__default.comp ($LS $LZ) |a1#0_0@0|) |s#0@@12| (|#_module.List.Cons| ($Box intType (int_2_U (_module.__default.aval ($LS $LZ) |a0#0_0@0| |s#0@@12|))) |stk#0@@8|))))))) (=> (and (and (and (and (and (|_module.__default.comp#canCall| |a1#0_0@0|) (|_module.__default.aval#canCall| |a0#0_0@0| |s#0@@12|)) (|_module.__default.exec#canCall| (_module.__default.comp ($LS $LZ) |a1#0_0@0|) |s#0@@12| (|#_module.List.Cons| ($Box intType (int_2_U (_module.__default.aval ($LS $LZ) |a0#0_0@0| |s#0@@12|))) |stk#0@@8|))) (|_module.__default.exec#canCall| (Lit DatatypeTypeType (|#_module.List.Cons| ($Box DatatypeTypeType (Lit DatatypeTypeType |#_module.instr.ADD|)) (Lit DatatypeTypeType |#_module.List.Nil|))) |s#0@@12| (_module.__default.exec ($LS $LZ) (_module.__default.comp ($LS $LZ) |a1#0_0@0|) |s#0@@12| (|#_module.List.Cons| ($Box intType (int_2_U (_module.__default.aval ($LS $LZ) |a0#0_0@0| |s#0@@12|))) |stk#0@@8|)))) ($IsAlloc DatatypeTypeType |a0#0_0@0| Tclass._module.aexp $Heap@0)) (and (and ($IsAlloc HandleTypeType |s#0@@12| (Tclass._System.___hTotalFunc1 (TSeq TChar) TInt) $Heap@0) (|_module.__default.aval#canCall| |a0#0_0@0| |s#0@@12|)) (and (|_module.__default.aval#canCall| |a0#0_0@0| |s#0@@12|) (= |stk##0_0_2_0@0| (|#_module.List.Cons| ($Box intType (int_2_U (_module.__default.aval ($LS $LZ) |a0#0_0@0| |s#0@@12|))) |stk#0@@8|))))) (and (=> (= (ControlFlow 0 13) (- 0 14)) (or (< (DtRank |a1#0_0@0|) (DtRank |a#0@@7|)) (and (= (DtRank |a1#0_0@0|) (DtRank |a#0@@7|)) (< (DtRank |stk##0_0_2_0@0|) (DtRank |stk#0@@8|))))) (=> (or (< (DtRank |a1#0_0@0|) (DtRank |a#0@@7|)) (and (= (DtRank |a1#0_0@0|) (DtRank |a#0@@7|)) (< (DtRank |stk##0_0_2_0@0|) (DtRank |stk#0@@8|)))) (=> (and ($IsGoodHeap $Heap@4) ($IsHeapAnchor $Heap@4)) (=> (and (and (and (|$IsA#_module.List| (_module.__default.exec ($LS $LZ) (_module.__default.comp ($LS $LZ) |a1#0_0@0|) |s#0@@12| |stk##0_0_2_0@0|)) (and (and (|_module.__default.comp#canCall| |a1#0_0@0|) (|_module.__default.exec#canCall| (_module.__default.comp ($LS $LZ) |a1#0_0@0|) |s#0@@12| |stk##0_0_2_0@0|)) (|_module.__default.aval#canCall| |a1#0_0@0| |s#0@@12|))) (and (|_module.List#Equal| (_module.__default.exec ($LS ($LS $LZ)) (_module.__default.comp ($LS ($LS $LZ)) |a1#0_0@0|) |s#0@@12| |stk##0_0_2_0@0|) (|#_module.List.Cons| ($Box intType (int_2_U (_module.__default.aval ($LS ($LS $LZ)) |a1#0_0@0| |s#0@@12|))) |stk##0_0_2_0@0|)) (= $Heap@0 $Heap@4))) (and (and (= |##ii#0_0_2_2@0| (Lit DatatypeTypeType (|#_module.List.Cons| ($Box DatatypeTypeType (Lit DatatypeTypeType |#_module.instr.ADD|)) (Lit DatatypeTypeType |#_module.List.Nil|)))) ($IsAlloc DatatypeTypeType |##ii#0_0_2_2@0| (Tclass._module.List Tclass._module.instr) $Heap@4)) (and ($IsAlloc HandleTypeType |s#0@@12| (Tclass._System.___hTotalFunc1 (TSeq TChar) TInt) $Heap@4) ($IsAlloc DatatypeTypeType |a1#0_0@0| Tclass._module.aexp $Heap@4)))) (=> (and (and (and (and ($IsAlloc HandleTypeType |s#0@@12| (Tclass._System.___hTotalFunc1 (TSeq TChar) TInt) $Heap@4) (|_module.__default.aval#canCall| |a1#0_0@0| |s#0@@12|)) (and ($IsAlloc DatatypeTypeType |a0#0_0@0| Tclass._module.aexp $Heap@4) ($IsAlloc HandleTypeType |s#0@@12| (Tclass._System.___hTotalFunc1 (TSeq TChar) TInt) $Heap@4))) (and (and (|_module.__default.aval#canCall| |a0#0_0@0| |s#0@@12|) (= |##stk#0_0_2_2@0| (|#_module.List.Cons| ($Box intType (int_2_U (_module.__default.aval ($LS $LZ) |a1#0_0@0| |s#0@@12|))) (|#_module.List.Cons| ($Box intType (int_2_U (_module.__default.aval ($LS $LZ) |a0#0_0@0| |s#0@@12|))) |stk#0@@8|)))) (and ($IsAlloc DatatypeTypeType |##stk#0_0_2_2@0| (Tclass._module.List TInt) $Heap@4) (|_module.__default.exec#canCall| (Lit DatatypeTypeType (|#_module.List.Cons| ($Box DatatypeTypeType (Lit DatatypeTypeType |#_module.instr.ADD|)) (Lit DatatypeTypeType |#_module.List.Nil|))) |s#0@@12| (|#_module.List.Cons| ($Box intType (int_2_U (_module.__default.aval ($LS $LZ) |a1#0_0@0| |s#0@@12|))) (|#_module.List.Cons| ($Box intType (int_2_U (_module.__default.aval ($LS $LZ) |a0#0_0@0| |s#0@@12|))) |stk#0@@8|)))))) (and (and (and (|_module.__default.aval#canCall| |a1#0_0@0| |s#0@@12|) (|_module.__default.aval#canCall| |a0#0_0@0| |s#0@@12|)) (|_module.__default.exec#canCall| (Lit DatatypeTypeType (|#_module.List.Cons| ($Box DatatypeTypeType (Lit DatatypeTypeType |#_module.instr.ADD|)) (Lit DatatypeTypeType |#_module.List.Nil|))) |s#0@@12| (|#_module.List.Cons| ($Box intType (int_2_U (_module.__default.aval ($LS $LZ) |a1#0_0@0| |s#0@@12|))) (|#_module.List.Cons| ($Box intType (int_2_U (_module.__default.aval ($LS $LZ) |a0#0_0@0| |s#0@@12|))) |stk#0@@8|)))) (= (ControlFlow 0 13) (- 0 12)))) (|_module.List#Equal| (_module.__default.exec ($LS ($LS $LZ)) (Lit DatatypeTypeType (|#_module.List.Cons| ($Box DatatypeTypeType (Lit DatatypeTypeType |#_module.instr.ADD|)) (Lit DatatypeTypeType |#_module.List.Nil|))) |s#0@@12| (_module.__default.exec ($LS ($LS $LZ)) (_module.__default.comp ($LS ($LS $LZ)) |a1#0_0@0|) |s#0@@12| (|#_module.List.Cons| ($Box intType (int_2_U (_module.__default.aval ($LS ($LS $LZ)) |a0#0_0@0| |s#0@@12|))) |stk#0@@8|))) (_module.__default.exec ($LS ($LS $LZ)) (Lit DatatypeTypeType (|#_module.List.Cons| ($Box DatatypeTypeType (Lit DatatypeTypeType |#_module.instr.ADD|)) (Lit DatatypeTypeType |#_module.List.Nil|))) |s#0@@12| (|#_module.List.Cons| ($Box intType (int_2_U (_module.__default.aval ($LS ($LS $LZ)) |a1#0_0@0| |s#0@@12|))) (|#_module.List.Cons| ($Box intType (int_2_U (_module.__default.aval ($LS ($LS $LZ)) |a0#0_0@0| |s#0@@12|))) |stk#0@@8|))))))))))))))
(let ((anon21_Then_correct  (=> (= |##ii#0_0_3_0@0| (Lit DatatypeTypeType (|#_module.List.Cons| ($Box DatatypeTypeType (Lit DatatypeTypeType |#_module.instr.ADD|)) (Lit DatatypeTypeType |#_module.List.Nil|)))) (=> (and (and ($IsAlloc DatatypeTypeType |##ii#0_0_3_0@0| (Tclass._module.List Tclass._module.instr) $Heap@0) ($IsAlloc HandleTypeType |s#0@@12| (Tclass._System.___hTotalFunc1 (TSeq TChar) TInt) $Heap@0)) (and ($IsAlloc DatatypeTypeType |a1#0_0@0| Tclass._module.aexp $Heap@0) (|_module.__default.comp#canCall| |a1#0_0@0|))) (=> (and (and (and (= |##ii#0_0_3_1@0| (_module.__default.comp ($LS $LZ) |a1#0_0@0|)) ($IsAlloc DatatypeTypeType |##ii#0_0_3_1@0| (Tclass._module.List Tclass._module.instr) $Heap@0)) (and ($IsAlloc HandleTypeType |s#0@@12| (Tclass._System.___hTotalFunc1 (TSeq TChar) TInt) $Heap@0) ($IsAlloc DatatypeTypeType |a0#0_0@0| Tclass._module.aexp $Heap@0))) (and (and (|_module.__default.comp#canCall| |a0#0_0@0|) (= |##ii#0_0_3_2@0| (_module.__default.comp ($LS $LZ) |a0#0_0@0|))) (and ($IsAlloc DatatypeTypeType |##ii#0_0_3_2@0| (Tclass._module.List Tclass._module.instr) $Heap@0) ($IsAlloc HandleTypeType |s#0@@12| (Tclass._System.___hTotalFunc1 (TSeq TChar) TInt) $Heap@0)))) (=> (and (and (and (and ($IsAlloc DatatypeTypeType |stk#0@@8| (Tclass._module.List TInt) $Heap@0) (|_module.__default.exec#canCall| (_module.__default.comp ($LS $LZ) |a0#0_0@0|) |s#0@@12| |stk#0@@8|)) (and (= |##stk#0_0_3_1@0| (_module.__default.exec ($LS $LZ) (_module.__default.comp ($LS $LZ) |a0#0_0@0|) |s#0@@12| |stk#0@@8|)) ($IsAlloc DatatypeTypeType |##stk#0_0_3_1@0| (Tclass._module.List TInt) $Heap@0))) (and (and (|_module.__default.exec#canCall| (_module.__default.comp ($LS $LZ) |a1#0_0@0|) |s#0@@12| (_module.__default.exec ($LS $LZ) (_module.__default.comp ($LS $LZ) |a0#0_0@0|) |s#0@@12| |stk#0@@8|)) (= |##stk#0_0_3_0@0| (_module.__default.exec ($LS $LZ) (_module.__default.comp ($LS $LZ) |a1#0_0@0|) |s#0@@12| (_module.__default.exec ($LS $LZ) (_module.__default.comp ($LS $LZ) |a0#0_0@0|) |s#0@@12| |stk#0@@8|)))) (and ($IsAlloc DatatypeTypeType |##stk#0_0_3_0@0| (Tclass._module.List TInt) $Heap@0) (|_module.__default.exec#canCall| (Lit DatatypeTypeType (|#_module.List.Cons| ($Box DatatypeTypeType (Lit DatatypeTypeType |#_module.instr.ADD|)) (Lit DatatypeTypeType |#_module.List.Nil|))) |s#0@@12| (_module.__default.exec ($LS $LZ) (_module.__default.comp ($LS $LZ) |a1#0_0@0|) |s#0@@12| (_module.__default.exec ($LS $LZ) (_module.__default.comp ($LS $LZ) |a0#0_0@0|) |s#0@@12| |stk#0@@8|)))))) (and (and (and (|_module.__default.comp#canCall| |a1#0_0@0|) (and (|_module.__default.comp#canCall| |a0#0_0@0|) (|_module.__default.exec#canCall| (_module.__default.comp ($LS $LZ) |a0#0_0@0|) |s#0@@12| |stk#0@@8|))) (|_module.__default.exec#canCall| (_module.__default.comp ($LS $LZ) |a1#0_0@0|) |s#0@@12| (_module.__default.exec ($LS $LZ) (_module.__default.comp ($LS $LZ) |a0#0_0@0|) |s#0@@12| |stk#0@@8|))) (|_module.__default.exec#canCall| (Lit DatatypeTypeType (|#_module.List.Cons| ($Box DatatypeTypeType (Lit DatatypeTypeType |#_module.instr.ADD|)) (Lit DatatypeTypeType |#_module.List.Nil|))) |s#0@@12| (_module.__default.exec ($LS $LZ) (_module.__default.comp ($LS $LZ) |a1#0_0@0|) |s#0@@12| (_module.__default.exec ($LS $LZ) (_module.__default.comp ($LS $LZ) |a0#0_0@0|) |s#0@@12| |stk#0@@8|))))) (and (=> (= (ControlFlow 0 10) (- 0 11)) (or (< (DtRank |a0#0_0@0|) (DtRank |a#0@@7|)) (and (= (DtRank |a0#0_0@0|) (DtRank |a#0@@7|)) (< (DtRank |stk#0@@8|) (DtRank |stk#0@@8|))))) (=> (or (< (DtRank |a0#0_0@0|) (DtRank |a#0@@7|)) (and (= (DtRank |a0#0_0@0|) (DtRank |a#0@@7|)) (< (DtRank |stk#0@@8|) (DtRank |stk#0@@8|)))) (=> (and ($IsGoodHeap $Heap@3) ($IsHeapAnchor $Heap@3)) (=> (and (and (and (|$IsA#_module.List| (_module.__default.exec ($LS $LZ) (_module.__default.comp ($LS $LZ) |a0#0_0@0|) |s#0@@12| |stk#0@@8|)) (and (and (|_module.__default.comp#canCall| |a0#0_0@0|) (|_module.__default.exec#canCall| (_module.__default.comp ($LS $LZ) |a0#0_0@0|) |s#0@@12| |stk#0@@8|)) (|_module.__default.aval#canCall| |a0#0_0@0| |s#0@@12|))) (|_module.List#Equal| (_module.__default.exec ($LS ($LS $LZ)) (_module.__default.comp ($LS ($LS $LZ)) |a0#0_0@0|) |s#0@@12| |stk#0@@8|) (|#_module.List.Cons| ($Box intType (int_2_U (_module.__default.aval ($LS ($LS $LZ)) |a0#0_0@0| |s#0@@12|))) |stk#0@@8|))) (and (= $Heap@0 $Heap@3) (= |##ii#0_0_3_3@0| (Lit DatatypeTypeType (|#_module.List.Cons| ($Box DatatypeTypeType (Lit DatatypeTypeType |#_module.instr.ADD|)) (Lit DatatypeTypeType |#_module.List.Nil|)))))) (=> (and (and (and (and (and ($IsAlloc DatatypeTypeType |##ii#0_0_3_3@0| (Tclass._module.List Tclass._module.instr) $Heap@3) ($IsAlloc HandleTypeType |s#0@@12| (Tclass._System.___hTotalFunc1 (TSeq TChar) TInt) $Heap@3)) (and ($IsAlloc DatatypeTypeType |a1#0_0@0| Tclass._module.aexp $Heap@3) (|_module.__default.comp#canCall| |a1#0_0@0|))) (and (and (= |##ii#0_0_3_4@0| (_module.__default.comp ($LS $LZ) |a1#0_0@0|)) ($IsAlloc DatatypeTypeType |##ii#0_0_3_4@0| (Tclass._module.List Tclass._module.instr) $Heap@3)) (and ($IsAlloc HandleTypeType |s#0@@12| (Tclass._System.___hTotalFunc1 (TSeq TChar) TInt) $Heap@3) ($IsAlloc DatatypeTypeType |a0#0_0@0| Tclass._module.aexp $Heap@3)))) (and (and (and ($IsAlloc HandleTypeType |s#0@@12| (Tclass._System.___hTotalFunc1 (TSeq TChar) TInt) $Heap@3) (|_module.__default.aval#canCall| |a0#0_0@0| |s#0@@12|)) (and (= |##stk#0_0_3_4@0| (|#_module.List.Cons| ($Box intType (int_2_U (_module.__default.aval ($LS $LZ) |a0#0_0@0| |s#0@@12|))) |stk#0@@8|)) ($IsAlloc DatatypeTypeType |##stk#0_0_3_4@0| (Tclass._module.List TInt) $Heap@3))) (and (and (|_module.__default.exec#canCall| (_module.__default.comp ($LS $LZ) |a1#0_0@0|) |s#0@@12| (|#_module.List.Cons| ($Box intType (int_2_U (_module.__default.aval ($LS $LZ) |a0#0_0@0| |s#0@@12|))) |stk#0@@8|)) (= |##stk#0_0_3_3@0| (_module.__default.exec ($LS $LZ) (_module.__default.comp ($LS $LZ) |a1#0_0@0|) |s#0@@12| (|#_module.List.Cons| ($Box intType (int_2_U (_module.__default.aval ($LS $LZ) |a0#0_0@0| |s#0@@12|))) |stk#0@@8|)))) (and ($IsAlloc DatatypeTypeType |##stk#0_0_3_3@0| (Tclass._module.List TInt) $Heap@3) (|_module.__default.exec#canCall| (Lit DatatypeTypeType (|#_module.List.Cons| ($Box DatatypeTypeType (Lit DatatypeTypeType |#_module.instr.ADD|)) (Lit DatatypeTypeType |#_module.List.Nil|))) |s#0@@12| (_module.__default.exec ($LS $LZ) (_module.__default.comp ($LS $LZ) |a1#0_0@0|) |s#0@@12| (|#_module.List.Cons| ($Box intType (int_2_U (_module.__default.aval ($LS $LZ) |a0#0_0@0| |s#0@@12|))) |stk#0@@8|))))))) (and (and (and (and (|_module.__default.comp#canCall| |a1#0_0@0|) (|_module.__default.aval#canCall| |a0#0_0@0| |s#0@@12|)) (|_module.__default.exec#canCall| (_module.__default.comp ($LS $LZ) |a1#0_0@0|) |s#0@@12| (|#_module.List.Cons| ($Box intType (int_2_U (_module.__default.aval ($LS $LZ) |a0#0_0@0| |s#0@@12|))) |stk#0@@8|))) (|_module.__default.exec#canCall| (Lit DatatypeTypeType (|#_module.List.Cons| ($Box DatatypeTypeType (Lit DatatypeTypeType |#_module.instr.ADD|)) (Lit DatatypeTypeType |#_module.List.Nil|))) |s#0@@12| (_module.__default.exec ($LS $LZ) (_module.__default.comp ($LS $LZ) |a1#0_0@0|) |s#0@@12| (|#_module.List.Cons| ($Box intType (int_2_U (_module.__default.aval ($LS $LZ) |a0#0_0@0| |s#0@@12|))) |stk#0@@8|)))) (= (ControlFlow 0 10) (- 0 9)))) (|_module.List#Equal| (_module.__default.exec ($LS ($LS $LZ)) (Lit DatatypeTypeType (|#_module.List.Cons| ($Box DatatypeTypeType (Lit DatatypeTypeType |#_module.instr.ADD|)) (Lit DatatypeTypeType |#_module.List.Nil|))) |s#0@@12| (_module.__default.exec ($LS ($LS $LZ)) (_module.__default.comp ($LS ($LS $LZ)) |a1#0_0@0|) |s#0@@12| (_module.__default.exec ($LS ($LS $LZ)) (_module.__default.comp ($LS ($LS $LZ)) |a0#0_0@0|) |s#0@@12| |stk#0@@8|))) (_module.__default.exec ($LS ($LS $LZ)) (Lit DatatypeTypeType (|#_module.List.Cons| ($Box DatatypeTypeType (Lit DatatypeTypeType |#_module.instr.ADD|)) (Lit DatatypeTypeType |#_module.List.Nil|))) |s#0@@12| (_module.__default.exec ($LS ($LS $LZ)) (_module.__default.comp ($LS ($LS $LZ)) |a1#0_0@0|) |s#0@@12| (|#_module.List.Cons| ($Box intType (int_2_U (_module.__default.aval ($LS ($LS $LZ)) |a0#0_0@0| |s#0@@12|))) |stk#0@@8|)))))))))))))))
(let ((anon20_Then_correct  (=> (and (and (= |##ii#0_0_4_0@0| (Lit DatatypeTypeType (|#_module.List.Cons| ($Box DatatypeTypeType (Lit DatatypeTypeType |#_module.instr.ADD|)) (Lit DatatypeTypeType |#_module.List.Nil|)))) ($IsAlloc DatatypeTypeType |##ii#0_0_4_0@0| (Tclass._module.List Tclass._module.instr) $Heap@0)) (and ($IsAlloc HandleTypeType |s#0@@12| (Tclass._System.___hTotalFunc1 (TSeq TChar) TInt) $Heap@0) ($IsAlloc DatatypeTypeType |a0#0_0@0| Tclass._module.aexp $Heap@0))) (=> (and (and (and (and (|_module.__default.comp#canCall| |a0#0_0@0|) (= |##xs#0_0_4_0@0| (_module.__default.comp ($LS $LZ) |a0#0_0@0|))) (and ($IsAlloc DatatypeTypeType |##xs#0_0_4_0@0| (Tclass._module.List Tclass._module.instr) $Heap@0) ($IsAlloc DatatypeTypeType |a1#0_0@0| Tclass._module.aexp $Heap@0))) (and (and (|_module.__default.comp#canCall| |a1#0_0@0|) (= |##ys#0_0_4_0@0| (_module.__default.comp ($LS $LZ) |a1#0_0@0|))) (and ($IsAlloc DatatypeTypeType |##ys#0_0_4_0@0| (Tclass._module.List Tclass._module.instr) $Heap@0) (|_module.__default.append#canCall| Tclass._module.instr (_module.__default.comp ($LS $LZ) |a0#0_0@0|) (_module.__default.comp ($LS $LZ) |a1#0_0@0|))))) (and (and (and (= |##ii#0_0_4_1@0| (_module.__default.append Tclass._module.instr ($LS $LZ) (_module.__default.comp ($LS $LZ) |a0#0_0@0|) (_module.__default.comp ($LS $LZ) |a1#0_0@0|))) ($IsAlloc DatatypeTypeType |##ii#0_0_4_1@0| (Tclass._module.List Tclass._module.instr) $Heap@0)) (and ($IsAlloc HandleTypeType |s#0@@12| (Tclass._System.___hTotalFunc1 (TSeq TChar) TInt) $Heap@0) ($IsAlloc DatatypeTypeType |stk#0@@8| (Tclass._module.List TInt) $Heap@0))) (and (and (|_module.__default.exec#canCall| (_module.__default.append Tclass._module.instr ($LS $LZ) (_module.__default.comp ($LS $LZ) |a0#0_0@0|) (_module.__default.comp ($LS $LZ) |a1#0_0@0|)) |s#0@@12| |stk#0@@8|) (= |##stk#0_0_4_0@0| (_module.__default.exec ($LS $LZ) (_module.__default.append Tclass._module.instr ($LS $LZ) (_module.__default.comp ($LS $LZ) |a0#0_0@0|) (_module.__default.comp ($LS $LZ) |a1#0_0@0|)) |s#0@@12| |stk#0@@8|))) (and ($IsAlloc DatatypeTypeType |##stk#0_0_4_0@0| (Tclass._module.List TInt) $Heap@0) (|_module.__default.exec#canCall| (Lit DatatypeTypeType (|#_module.List.Cons| ($Box DatatypeTypeType (Lit DatatypeTypeType |#_module.instr.ADD|)) (Lit DatatypeTypeType |#_module.List.Nil|))) |s#0@@12| (_module.__default.exec ($LS $LZ) (_module.__default.append Tclass._module.instr ($LS $LZ) (_module.__default.comp ($LS $LZ) |a0#0_0@0|) (_module.__default.comp ($LS $LZ) |a1#0_0@0|)) |s#0@@12| |stk#0@@8|)))))) (=> (and (and (and (and (and (and (and (|_module.__default.comp#canCall| |a0#0_0@0|) (|_module.__default.comp#canCall| |a1#0_0@0|)) (|_module.__default.append#canCall| Tclass._module.instr (_module.__default.comp ($LS $LZ) |a0#0_0@0|) (_module.__default.comp ($LS $LZ) |a1#0_0@0|))) (|_module.__default.exec#canCall| (_module.__default.append Tclass._module.instr ($LS $LZ) (_module.__default.comp ($LS $LZ) |a0#0_0@0|) (_module.__default.comp ($LS $LZ) |a1#0_0@0|)) |s#0@@12| |stk#0@@8|)) (|_module.__default.exec#canCall| (Lit DatatypeTypeType (|#_module.List.Cons| ($Box DatatypeTypeType (Lit DatatypeTypeType |#_module.instr.ADD|)) (Lit DatatypeTypeType |#_module.List.Nil|))) |s#0@@12| (_module.__default.exec ($LS $LZ) (_module.__default.append Tclass._module.instr ($LS $LZ) (_module.__default.comp ($LS $LZ) |a0#0_0@0|) (_module.__default.comp ($LS $LZ) |a1#0_0@0|)) |s#0@@12| |stk#0@@8|))) (and ($IsAlloc DatatypeTypeType |a0#0_0@0| Tclass._module.aexp $Heap@0) (|_module.__default.comp#canCall| |a0#0_0@0|))) (and (and (and (|_module.__default.comp#canCall| |a0#0_0@0|) (= |ii0##0_0_4_0@0| (_module.__default.comp ($LS $LZ) |a0#0_0@0|))) (and ($IsAlloc DatatypeTypeType |a1#0_0@0| Tclass._module.aexp $Heap@0) (|_module.__default.comp#canCall| |a1#0_0@0|))) (and (and (|_module.__default.comp#canCall| |a1#0_0@0|) (= |ii1##0_0_4_0@0| (_module.__default.comp ($LS $LZ) |a1#0_0@0|))) (and ($IsGoodHeap $Heap@2) ($IsHeapAnchor $Heap@2))))) (and (and (and (and (and (and (|$IsA#_module.List| (_module.__default.exec ($LS $LZ) (_module.__default.append Tclass._module.instr ($LS $LZ) |ii0##0_0_4_0@0| |ii1##0_0_4_0@0|) |s#0@@12| |stk#0@@8|)) (|$IsA#_module.List| (_module.__default.exec ($LS $LZ) |ii1##0_0_4_0@0| |s#0@@12| (_module.__default.exec ($LS $LZ) |ii0##0_0_4_0@0| |s#0@@12| |stk#0@@8|)))) (and (and (|_module.__default.append#canCall| Tclass._module.instr |ii0##0_0_4_0@0| |ii1##0_0_4_0@0|) (|_module.__default.exec#canCall| (_module.__default.append Tclass._module.instr ($LS $LZ) |ii0##0_0_4_0@0| |ii1##0_0_4_0@0|) |s#0@@12| |stk#0@@8|)) (and (|_module.__default.exec#canCall| |ii0##0_0_4_0@0| |s#0@@12| |stk#0@@8|) (|_module.__default.exec#canCall| |ii1##0_0_4_0@0| |s#0@@12| (_module.__default.exec ($LS $LZ) |ii0##0_0_4_0@0| |s#0@@12| |stk#0@@8|))))) (|_module.List#Equal| (_module.__default.exec ($LS ($LS $LZ)) (_module.__default.append Tclass._module.instr ($LS ($LS $LZ)) |ii0##0_0_4_0@0| |ii1##0_0_4_0@0|) |s#0@@12| |stk#0@@8|) (_module.__default.exec ($LS ($LS $LZ)) |ii1##0_0_4_0@0| |s#0@@12| (_module.__default.exec ($LS ($LS $LZ)) |ii0##0_0_4_0@0| |s#0@@12| |stk#0@@8|)))) (and (= $Heap@0 $Heap@2) (= |##ii#0_0_4_2@0| (Lit DatatypeTypeType (|#_module.List.Cons| ($Box DatatypeTypeType (Lit DatatypeTypeType |#_module.instr.ADD|)) (Lit DatatypeTypeType |#_module.List.Nil|)))))) (and (and ($IsAlloc DatatypeTypeType |##ii#0_0_4_2@0| (Tclass._module.List Tclass._module.instr) $Heap@2) ($IsAlloc HandleTypeType |s#0@@12| (Tclass._System.___hTotalFunc1 (TSeq TChar) TInt) $Heap@2)) (and ($IsAlloc DatatypeTypeType |a1#0_0@0| Tclass._module.aexp $Heap@2) (|_module.__default.comp#canCall| |a1#0_0@0|)))) (and (and (and (and (and (= |##ii#0_0_4_3@0| (_module.__default.comp ($LS $LZ) |a1#0_0@0|)) ($IsAlloc DatatypeTypeType |##ii#0_0_4_3@0| (Tclass._module.List Tclass._module.instr) $Heap@2)) (and ($IsAlloc HandleTypeType |s#0@@12| (Tclass._System.___hTotalFunc1 (TSeq TChar) TInt) $Heap@2) ($IsAlloc DatatypeTypeType |a0#0_0@0| Tclass._module.aexp $Heap@2))) (and (and (|_module.__default.comp#canCall| |a0#0_0@0|) (= |##ii#0_0_4_4@0| (_module.__default.comp ($LS $LZ) |a0#0_0@0|))) (and ($IsAlloc DatatypeTypeType |##ii#0_0_4_4@0| (Tclass._module.List Tclass._module.instr) $Heap@2) ($IsAlloc HandleTypeType |s#0@@12| (Tclass._System.___hTotalFunc1 (TSeq TChar) TInt) $Heap@2)))) (and (and (and ($IsAlloc DatatypeTypeType |stk#0@@8| (Tclass._module.List TInt) $Heap@2) (|_module.__default.exec#canCall| (_module.__default.comp ($LS $LZ) |a0#0_0@0|) |s#0@@12| |stk#0@@8|)) (and (= |##stk#0_0_4_3@0| (_module.__default.exec ($LS $LZ) (_module.__default.comp ($LS $LZ) |a0#0_0@0|) |s#0@@12| |stk#0@@8|)) ($IsAlloc DatatypeTypeType |##stk#0_0_4_3@0| (Tclass._module.List TInt) $Heap@2))) (and (and (|_module.__default.exec#canCall| (_module.__default.comp ($LS $LZ) |a1#0_0@0|) |s#0@@12| (_module.__default.exec ($LS $LZ) (_module.__default.comp ($LS $LZ) |a0#0_0@0|) |s#0@@12| |stk#0@@8|)) (= |##stk#0_0_4_2@0| (_module.__default.exec ($LS $LZ) (_module.__default.comp ($LS $LZ) |a1#0_0@0|) |s#0@@12| (_module.__default.exec ($LS $LZ) (_module.__default.comp ($LS $LZ) |a0#0_0@0|) |s#0@@12| |stk#0@@8|)))) (and ($IsAlloc DatatypeTypeType |##stk#0_0_4_2@0| (Tclass._module.List TInt) $Heap@2) (|_module.__default.exec#canCall| (Lit DatatypeTypeType (|#_module.List.Cons| ($Box DatatypeTypeType (Lit DatatypeTypeType |#_module.instr.ADD|)) (Lit DatatypeTypeType |#_module.List.Nil|))) |s#0@@12| (_module.__default.exec ($LS $LZ) (_module.__default.comp ($LS $LZ) |a1#0_0@0|) |s#0@@12| (_module.__default.exec ($LS $LZ) (_module.__default.comp ($LS $LZ) |a0#0_0@0|) |s#0@@12| |stk#0@@8|))))))) (and (and (and (and (|_module.__default.comp#canCall| |a1#0_0@0|) (and (|_module.__default.comp#canCall| |a0#0_0@0|) (|_module.__default.exec#canCall| (_module.__default.comp ($LS $LZ) |a0#0_0@0|) |s#0@@12| |stk#0@@8|))) (|_module.__default.exec#canCall| (_module.__default.comp ($LS $LZ) |a1#0_0@0|) |s#0@@12| (_module.__default.exec ($LS $LZ) (_module.__default.comp ($LS $LZ) |a0#0_0@0|) |s#0@@12| |stk#0@@8|))) (|_module.__default.exec#canCall| (Lit DatatypeTypeType (|#_module.List.Cons| ($Box DatatypeTypeType (Lit DatatypeTypeType |#_module.instr.ADD|)) (Lit DatatypeTypeType |#_module.List.Nil|))) |s#0@@12| (_module.__default.exec ($LS $LZ) (_module.__default.comp ($LS $LZ) |a1#0_0@0|) |s#0@@12| (_module.__default.exec ($LS $LZ) (_module.__default.comp ($LS $LZ) |a0#0_0@0|) |s#0@@12| |stk#0@@8|)))) (= (ControlFlow 0 8) (- 0 7)))))) (|_module.List#Equal| (_module.__default.exec ($LS ($LS $LZ)) (Lit DatatypeTypeType (|#_module.List.Cons| ($Box DatatypeTypeType (Lit DatatypeTypeType |#_module.instr.ADD|)) (Lit DatatypeTypeType |#_module.List.Nil|))) |s#0@@12| (_module.__default.exec ($LS ($LS $LZ)) (_module.__default.append Tclass._module.instr ($LS ($LS $LZ)) (_module.__default.comp ($LS ($LS $LZ)) |a0#0_0@0|) (_module.__default.comp ($LS ($LS $LZ)) |a1#0_0@0|)) |s#0@@12| |stk#0@@8|)) (_module.__default.exec ($LS ($LS $LZ)) (Lit DatatypeTypeType (|#_module.List.Cons| ($Box DatatypeTypeType (Lit DatatypeTypeType |#_module.instr.ADD|)) (Lit DatatypeTypeType |#_module.List.Nil|))) |s#0@@12| (_module.__default.exec ($LS ($LS $LZ)) (_module.__default.comp ($LS ($LS $LZ)) |a1#0_0@0|) |s#0@@12| (_module.__default.exec ($LS ($LS $LZ)) (_module.__default.comp ($LS ($LS $LZ)) |a0#0_0@0|) |s#0@@12| |stk#0@@8|)))))))))
(let ((anon19_Then_correct  (=> ($IsAlloc DatatypeTypeType |a0#0_0@0| Tclass._module.aexp $Heap@0) (=> (and (|_module.__default.comp#canCall| |a0#0_0@0|) (= |##xs#0_0_5_1@0| (_module.__default.comp ($LS $LZ) |a0#0_0@0|))) (=> (and (and (and (and ($IsAlloc DatatypeTypeType |##xs#0_0_5_1@0| (Tclass._module.List Tclass._module.instr) $Heap@0) ($IsAlloc DatatypeTypeType |a1#0_0@0| Tclass._module.aexp $Heap@0)) (and (|_module.__default.comp#canCall| |a1#0_0@0|) (= |##ys#0_0_5_0@0| (_module.__default.comp ($LS $LZ) |a1#0_0@0|)))) (and (and ($IsAlloc DatatypeTypeType |##ys#0_0_5_0@0| (Tclass._module.List Tclass._module.instr) $Heap@0) (|_module.__default.append#canCall| Tclass._module.instr (_module.__default.comp ($LS $LZ) |a0#0_0@0|) (_module.__default.comp ($LS $LZ) |a1#0_0@0|))) (and (= |##xs#0_0_5_0@0| (_module.__default.append Tclass._module.instr ($LS $LZ) (_module.__default.comp ($LS $LZ) |a0#0_0@0|) (_module.__default.comp ($LS $LZ) |a1#0_0@0|))) ($IsAlloc DatatypeTypeType |##xs#0_0_5_0@0| (Tclass._module.List Tclass._module.instr) $Heap@0)))) (and (and (and (= |##ys#0_0_5_1@0| (Lit DatatypeTypeType (|#_module.List.Cons| ($Box DatatypeTypeType (Lit DatatypeTypeType |#_module.instr.ADD|)) (Lit DatatypeTypeType |#_module.List.Nil|)))) ($IsAlloc DatatypeTypeType |##ys#0_0_5_1@0| (Tclass._module.List Tclass._module.instr) $Heap@0)) (and (|_module.__default.append#canCall| Tclass._module.instr (_module.__default.append Tclass._module.instr ($LS $LZ) (_module.__default.comp ($LS $LZ) |a0#0_0@0|) (_module.__default.comp ($LS $LZ) |a1#0_0@0|)) (Lit DatatypeTypeType (|#_module.List.Cons| ($Box DatatypeTypeType (Lit DatatypeTypeType |#_module.instr.ADD|)) (Lit DatatypeTypeType |#_module.List.Nil|)))) (= |##ii#0_0_5_0@0| (_module.__default.append Tclass._module.instr ($LS $LZ) (_module.__default.append Tclass._module.instr ($LS $LZ) (_module.__default.comp ($LS $LZ) |a0#0_0@0|) (_module.__default.comp ($LS $LZ) |a1#0_0@0|)) (Lit DatatypeTypeType (|#_module.List.Cons| ($Box DatatypeTypeType (Lit DatatypeTypeType |#_module.instr.ADD|)) (Lit DatatypeTypeType |#_module.List.Nil|))))))) (and (and ($IsAlloc DatatypeTypeType |##ii#0_0_5_0@0| (Tclass._module.List Tclass._module.instr) $Heap@0) ($IsAlloc HandleTypeType |s#0@@12| (Tclass._System.___hTotalFunc1 (TSeq TChar) TInt) $Heap@0)) (and ($IsAlloc DatatypeTypeType |stk#0@@8| (Tclass._module.List TInt) $Heap@0) (|_module.__default.exec#canCall| (_module.__default.append Tclass._module.instr ($LS $LZ) (_module.__default.append Tclass._module.instr ($LS $LZ) (_module.__default.comp ($LS $LZ) |a0#0_0@0|) (_module.__default.comp ($LS $LZ) |a1#0_0@0|)) (Lit DatatypeTypeType (|#_module.List.Cons| ($Box DatatypeTypeType (Lit DatatypeTypeType |#_module.instr.ADD|)) (Lit DatatypeTypeType |#_module.List.Nil|)))) |s#0@@12| |stk#0@@8|))))) (=> (and (and (and (and (and (and (and (|_module.__default.comp#canCall| |a0#0_0@0|) (|_module.__default.comp#canCall| |a1#0_0@0|)) (|_module.__default.append#canCall| Tclass._module.instr (_module.__default.comp ($LS $LZ) |a0#0_0@0|) (_module.__default.comp ($LS $LZ) |a1#0_0@0|))) (|_module.__default.append#canCall| Tclass._module.instr (_module.__default.append Tclass._module.instr ($LS $LZ) (_module.__default.comp ($LS $LZ) |a0#0_0@0|) (_module.__default.comp ($LS $LZ) |a1#0_0@0|)) (Lit DatatypeTypeType (|#_module.List.Cons| ($Box DatatypeTypeType (Lit DatatypeTypeType |#_module.instr.ADD|)) (Lit DatatypeTypeType |#_module.List.Nil|))))) (|_module.__default.exec#canCall| (_module.__default.append Tclass._module.instr ($LS $LZ) (_module.__default.append Tclass._module.instr ($LS $LZ) (_module.__default.comp ($LS $LZ) |a0#0_0@0|) (_module.__default.comp ($LS $LZ) |a1#0_0@0|)) (Lit DatatypeTypeType (|#_module.List.Cons| ($Box DatatypeTypeType (Lit DatatypeTypeType |#_module.instr.ADD|)) (Lit DatatypeTypeType |#_module.List.Nil|)))) |s#0@@12| |stk#0@@8|)) ($IsAlloc DatatypeTypeType |a0#0_0@0| Tclass._module.aexp $Heap@0)) (and (and (and (and (|_module.__default.comp#canCall| |a0#0_0@0|) (= |##xs#0_0_5_2@0| (_module.__default.comp ($LS $LZ) |a0#0_0@0|))) (and ($IsAlloc DatatypeTypeType |##xs#0_0_5_2@0| (Tclass._module.List Tclass._module.instr) $Heap@0) ($IsAlloc DatatypeTypeType |a1#0_0@0| Tclass._module.aexp $Heap@0))) (and (and (|_module.__default.comp#canCall| |a1#0_0@0|) (= |##ys#0_0_5_2@0| (_module.__default.comp ($LS $LZ) |a1#0_0@0|))) (and ($IsAlloc DatatypeTypeType |##ys#0_0_5_2@0| (Tclass._module.List Tclass._module.instr) $Heap@0) (|_module.__default.append#canCall| Tclass._module.instr (_module.__default.comp ($LS $LZ) |a0#0_0@0|) (_module.__default.comp ($LS $LZ) |a1#0_0@0|))))) (and (and (and (|_module.__default.comp#canCall| |a0#0_0@0|) (|_module.__default.comp#canCall| |a1#0_0@0|)) (|_module.__default.append#canCall| Tclass._module.instr (_module.__default.comp ($LS $LZ) |a0#0_0@0|) (_module.__default.comp ($LS $LZ) |a1#0_0@0|))) (and (and (= |ii0##0_0_5_0@0| (_module.__default.append Tclass._module.instr ($LS $LZ) (_module.__default.comp ($LS $LZ) |a0#0_0@0|) (_module.__default.comp ($LS $LZ) |a1#0_0@0|))) (= |ii1##0_0_5_0@0| (Lit DatatypeTypeType (|#_module.List.Cons| ($Box DatatypeTypeType (Lit DatatypeTypeType |#_module.instr.ADD|)) (Lit DatatypeTypeType |#_module.List.Nil|))))) (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1)))))) (and (and (and (and (and (and (|$IsA#_module.List| (_module.__default.exec ($LS $LZ) (_module.__default.append Tclass._module.instr ($LS $LZ) |ii0##0_0_5_0@0| |ii1##0_0_5_0@0|) |s#0@@12| |stk#0@@8|)) (|$IsA#_module.List| (_module.__default.exec ($LS $LZ) |ii1##0_0_5_0@0| |s#0@@12| (_module.__default.exec ($LS $LZ) |ii0##0_0_5_0@0| |s#0@@12| |stk#0@@8|)))) (and (and (|_module.__default.append#canCall| Tclass._module.instr |ii0##0_0_5_0@0| |ii1##0_0_5_0@0|) (|_module.__default.exec#canCall| (_module.__default.append Tclass._module.instr ($LS $LZ) |ii0##0_0_5_0@0| |ii1##0_0_5_0@0|) |s#0@@12| |stk#0@@8|)) (and (|_module.__default.exec#canCall| |ii0##0_0_5_0@0| |s#0@@12| |stk#0@@8|) (|_module.__default.exec#canCall| |ii1##0_0_5_0@0| |s#0@@12| (_module.__default.exec ($LS $LZ) |ii0##0_0_5_0@0| |s#0@@12| |stk#0@@8|))))) (and (|_module.List#Equal| (_module.__default.exec ($LS ($LS $LZ)) (_module.__default.append Tclass._module.instr ($LS ($LS $LZ)) |ii0##0_0_5_0@0| |ii1##0_0_5_0@0|) |s#0@@12| |stk#0@@8|) (_module.__default.exec ($LS ($LS $LZ)) |ii1##0_0_5_0@0| |s#0@@12| (_module.__default.exec ($LS ($LS $LZ)) |ii0##0_0_5_0@0| |s#0@@12| |stk#0@@8|))) (= $Heap@0 $Heap@1))) (and (and (= |##ii#0_0_5_1@0| (Lit DatatypeTypeType (|#_module.List.Cons| ($Box DatatypeTypeType (Lit DatatypeTypeType |#_module.instr.ADD|)) (Lit DatatypeTypeType |#_module.List.Nil|)))) ($IsAlloc DatatypeTypeType |##ii#0_0_5_1@0| (Tclass._module.List Tclass._module.instr) $Heap@1)) (and ($IsAlloc HandleTypeType |s#0@@12| (Tclass._System.___hTotalFunc1 (TSeq TChar) TInt) $Heap@1) ($IsAlloc DatatypeTypeType |a0#0_0@0| Tclass._module.aexp $Heap@1)))) (and (and (and (and (|_module.__default.comp#canCall| |a0#0_0@0|) (= |##xs#0_0_5_3@0| (_module.__default.comp ($LS $LZ) |a0#0_0@0|))) (and ($IsAlloc DatatypeTypeType |##xs#0_0_5_3@0| (Tclass._module.List Tclass._module.instr) $Heap@1) ($IsAlloc DatatypeTypeType |a1#0_0@0| Tclass._module.aexp $Heap@1))) (and (and (|_module.__default.comp#canCall| |a1#0_0@0|) (= |##ys#0_0_5_3@0| (_module.__default.comp ($LS $LZ) |a1#0_0@0|))) (and ($IsAlloc DatatypeTypeType |##ys#0_0_5_3@0| (Tclass._module.List Tclass._module.instr) $Heap@1) (|_module.__default.append#canCall| Tclass._module.instr (_module.__default.comp ($LS $LZ) |a0#0_0@0|) (_module.__default.comp ($LS $LZ) |a1#0_0@0|))))) (and (and (and (= |##ii#0_0_5_2@0| (_module.__default.append Tclass._module.instr ($LS $LZ) (_module.__default.comp ($LS $LZ) |a0#0_0@0|) (_module.__default.comp ($LS $LZ) |a1#0_0@0|))) ($IsAlloc DatatypeTypeType |##ii#0_0_5_2@0| (Tclass._module.List Tclass._module.instr) $Heap@1)) (and ($IsAlloc HandleTypeType |s#0@@12| (Tclass._System.___hTotalFunc1 (TSeq TChar) TInt) $Heap@1) ($IsAlloc DatatypeTypeType |stk#0@@8| (Tclass._module.List TInt) $Heap@1))) (and (and (|_module.__default.exec#canCall| (_module.__default.append Tclass._module.instr ($LS $LZ) (_module.__default.comp ($LS $LZ) |a0#0_0@0|) (_module.__default.comp ($LS $LZ) |a1#0_0@0|)) |s#0@@12| |stk#0@@8|) (= |##stk#0_0_5_1@0| (_module.__default.exec ($LS $LZ) (_module.__default.append Tclass._module.instr ($LS $LZ) (_module.__default.comp ($LS $LZ) |a0#0_0@0|) (_module.__default.comp ($LS $LZ) |a1#0_0@0|)) |s#0@@12| |stk#0@@8|))) (and ($IsAlloc DatatypeTypeType |##stk#0_0_5_1@0| (Tclass._module.List TInt) $Heap@1) (|_module.__default.exec#canCall| (Lit DatatypeTypeType (|#_module.List.Cons| ($Box DatatypeTypeType (Lit DatatypeTypeType |#_module.instr.ADD|)) (Lit DatatypeTypeType |#_module.List.Nil|))) |s#0@@12| (_module.__default.exec ($LS $LZ) (_module.__default.append Tclass._module.instr ($LS $LZ) (_module.__default.comp ($LS $LZ) |a0#0_0@0|) (_module.__default.comp ($LS $LZ) |a1#0_0@0|)) |s#0@@12| |stk#0@@8|))))))) (and (and (and (and (and (|_module.__default.comp#canCall| |a0#0_0@0|) (|_module.__default.comp#canCall| |a1#0_0@0|)) (|_module.__default.append#canCall| Tclass._module.instr (_module.__default.comp ($LS $LZ) |a0#0_0@0|) (_module.__default.comp ($LS $LZ) |a1#0_0@0|))) (|_module.__default.exec#canCall| (_module.__default.append Tclass._module.instr ($LS $LZ) (_module.__default.comp ($LS $LZ) |a0#0_0@0|) (_module.__default.comp ($LS $LZ) |a1#0_0@0|)) |s#0@@12| |stk#0@@8|)) (|_module.__default.exec#canCall| (Lit DatatypeTypeType (|#_module.List.Cons| ($Box DatatypeTypeType (Lit DatatypeTypeType |#_module.instr.ADD|)) (Lit DatatypeTypeType |#_module.List.Nil|))) |s#0@@12| (_module.__default.exec ($LS $LZ) (_module.__default.append Tclass._module.instr ($LS $LZ) (_module.__default.comp ($LS $LZ) |a0#0_0@0|) (_module.__default.comp ($LS $LZ) |a1#0_0@0|)) |s#0@@12| |stk#0@@8|))) (= (ControlFlow 0 6) (- 0 5))))) (|_module.List#Equal| (_module.__default.exec ($LS ($LS $LZ)) (_module.__default.append Tclass._module.instr ($LS ($LS $LZ)) (_module.__default.append Tclass._module.instr ($LS ($LS $LZ)) (_module.__default.comp ($LS ($LS $LZ)) |a0#0_0@0|) (_module.__default.comp ($LS ($LS $LZ)) |a1#0_0@0|)) (Lit DatatypeTypeType (|#_module.List.Cons| ($Box DatatypeTypeType (Lit DatatypeTypeType |#_module.instr.ADD|)) (Lit DatatypeTypeType |#_module.List.Nil|)))) |s#0@@12| |stk#0@@8|) (_module.__default.exec ($LS ($LS $LZ)) (Lit DatatypeTypeType (|#_module.List.Cons| ($Box DatatypeTypeType (Lit DatatypeTypeType |#_module.instr.ADD|)) (Lit DatatypeTypeType |#_module.List.Nil|))) |s#0@@12| (_module.__default.exec ($LS ($LS $LZ)) (_module.__default.append Tclass._module.instr ($LS ($LS $LZ)) (_module.__default.comp ($LS ($LS $LZ)) |a0#0_0@0|) (_module.__default.comp ($LS ($LS $LZ)) |a1#0_0@0|)) |s#0@@12| |stk#0@@8|)))))))))
(let ((anon18_Then_correct  (=> ($IsAlloc DatatypeTypeType |a#0@@7| Tclass._module.aexp $Heap@0) (=> (and (|_module.__default.comp#canCall| |a#0@@7|) (= |##ii#0_0_6_0@0| (_module.__default.comp ($LS $LZ) |a#0@@7|))) (=> (and (and ($IsAlloc DatatypeTypeType |##ii#0_0_6_0@0| (Tclass._module.List Tclass._module.instr) $Heap@0) ($IsAlloc HandleTypeType |s#0@@12| (Tclass._System.___hTotalFunc1 (TSeq TChar) TInt) $Heap@0)) (and ($IsAlloc DatatypeTypeType |stk#0@@8| (Tclass._module.List TInt) $Heap@0) (|_module.__default.exec#canCall| (_module.__default.comp ($LS $LZ) |a#0@@7|) |s#0@@12| |stk#0@@8|))) (=> (and (and (and (|_module.__default.comp#canCall| |a#0@@7|) (|_module.__default.exec#canCall| (_module.__default.comp ($LS $LZ) |a#0@@7|) |s#0@@12| |stk#0@@8|)) ($IsAlloc DatatypeTypeType |a0#0_0@0| Tclass._module.aexp $Heap@0)) (and (|_module.__default.comp#canCall| |a0#0_0@0|) (= |##xs#0_0_6_1@0| (_module.__default.comp ($LS $LZ) |a0#0_0@0|)))) (=> (and (and (and (and ($IsAlloc DatatypeTypeType |##xs#0_0_6_1@0| (Tclass._module.List Tclass._module.instr) $Heap@0) ($IsAlloc DatatypeTypeType |a1#0_0@0| Tclass._module.aexp $Heap@0)) (and (|_module.__default.comp#canCall| |a1#0_0@0|) (= |##ys#0_0_6_0@0| (_module.__default.comp ($LS $LZ) |a1#0_0@0|)))) (and (and ($IsAlloc DatatypeTypeType |##ys#0_0_6_0@0| (Tclass._module.List Tclass._module.instr) $Heap@0) (|_module.__default.append#canCall| Tclass._module.instr (_module.__default.comp ($LS $LZ) |a0#0_0@0|) (_module.__default.comp ($LS $LZ) |a1#0_0@0|))) (and (= |##xs#0_0_6_0@0| (_module.__default.append Tclass._module.instr ($LS $LZ) (_module.__default.comp ($LS $LZ) |a0#0_0@0|) (_module.__default.comp ($LS $LZ) |a1#0_0@0|))) ($IsAlloc DatatypeTypeType |##xs#0_0_6_0@0| (Tclass._module.List Tclass._module.instr) $Heap@0)))) (and (and (and (= |##ys#0_0_6_1@0| (Lit DatatypeTypeType (|#_module.List.Cons| ($Box DatatypeTypeType (Lit DatatypeTypeType |#_module.instr.ADD|)) (Lit DatatypeTypeType |#_module.List.Nil|)))) ($IsAlloc DatatypeTypeType |##ys#0_0_6_1@0| (Tclass._module.List Tclass._module.instr) $Heap@0)) (and (|_module.__default.append#canCall| Tclass._module.instr (_module.__default.append Tclass._module.instr ($LS $LZ) (_module.__default.comp ($LS $LZ) |a0#0_0@0|) (_module.__default.comp ($LS $LZ) |a1#0_0@0|)) (Lit DatatypeTypeType (|#_module.List.Cons| ($Box DatatypeTypeType (Lit DatatypeTypeType |#_module.instr.ADD|)) (Lit DatatypeTypeType |#_module.List.Nil|)))) (= |##ii#0_0_6_1@0| (_module.__default.append Tclass._module.instr ($LS $LZ) (_module.__default.append Tclass._module.instr ($LS $LZ) (_module.__default.comp ($LS $LZ) |a0#0_0@0|) (_module.__default.comp ($LS $LZ) |a1#0_0@0|)) (Lit DatatypeTypeType (|#_module.List.Cons| ($Box DatatypeTypeType (Lit DatatypeTypeType |#_module.instr.ADD|)) (Lit DatatypeTypeType |#_module.List.Nil|))))))) (and (and ($IsAlloc DatatypeTypeType |##ii#0_0_6_1@0| (Tclass._module.List Tclass._module.instr) $Heap@0) ($IsAlloc HandleTypeType |s#0@@12| (Tclass._System.___hTotalFunc1 (TSeq TChar) TInt) $Heap@0)) (and ($IsAlloc DatatypeTypeType |stk#0@@8| (Tclass._module.List TInt) $Heap@0) (|_module.__default.exec#canCall| (_module.__default.append Tclass._module.instr ($LS $LZ) (_module.__default.append Tclass._module.instr ($LS $LZ) (_module.__default.comp ($LS $LZ) |a0#0_0@0|) (_module.__default.comp ($LS $LZ) |a1#0_0@0|)) (Lit DatatypeTypeType (|#_module.List.Cons| ($Box DatatypeTypeType (Lit DatatypeTypeType |#_module.instr.ADD|)) (Lit DatatypeTypeType |#_module.List.Nil|)))) |s#0@@12| |stk#0@@8|))))) (=> (and (and (and (and (and (|_module.__default.comp#canCall| |a0#0_0@0|) (|_module.__default.comp#canCall| |a1#0_0@0|)) (|_module.__default.append#canCall| Tclass._module.instr (_module.__default.comp ($LS $LZ) |a0#0_0@0|) (_module.__default.comp ($LS $LZ) |a1#0_0@0|))) (|_module.__default.append#canCall| Tclass._module.instr (_module.__default.append Tclass._module.instr ($LS $LZ) (_module.__default.comp ($LS $LZ) |a0#0_0@0|) (_module.__default.comp ($LS $LZ) |a1#0_0@0|)) (Lit DatatypeTypeType (|#_module.List.Cons| ($Box DatatypeTypeType (Lit DatatypeTypeType |#_module.instr.ADD|)) (Lit DatatypeTypeType |#_module.List.Nil|))))) (|_module.__default.exec#canCall| (_module.__default.append Tclass._module.instr ($LS $LZ) (_module.__default.append Tclass._module.instr ($LS $LZ) (_module.__default.comp ($LS $LZ) |a0#0_0@0|) (_module.__default.comp ($LS $LZ) |a1#0_0@0|)) (Lit DatatypeTypeType (|#_module.List.Cons| ($Box DatatypeTypeType (Lit DatatypeTypeType |#_module.instr.ADD|)) (Lit DatatypeTypeType |#_module.List.Nil|)))) |s#0@@12| |stk#0@@8|)) (= (ControlFlow 0 4) (- 0 3))) (|_module.List#Equal| (_module.__default.exec ($LS ($LS $LZ)) (_module.__default.comp ($LS ($LS $LZ)) |a#0@@7|) |s#0@@12| |stk#0@@8|) (_module.__default.exec ($LS ($LS $LZ)) (_module.__default.append Tclass._module.instr ($LS ($LS $LZ)) (_module.__default.append Tclass._module.instr ($LS ($LS $LZ)) (_module.__default.comp ($LS ($LS $LZ)) |a0#0_0@0|) (_module.__default.comp ($LS ($LS $LZ)) |a1#0_0@0|)) (Lit DatatypeTypeType (|#_module.List.Cons| ($Box DatatypeTypeType (Lit DatatypeTypeType |#_module.instr.ADD|)) (Lit DatatypeTypeType |#_module.List.Nil|)))) |s#0@@12| |stk#0@@8|))))))))))
(let ((anon17_Then_correct true))
(let ((anon16_Then_correct  (=> (= |a#0@@7| (|#_module.aexp.Plus| |_mcc#2#0_0@0| |_mcc#3#0_0@0|)) (=> (and ($Is DatatypeTypeType |_mcc#2#0_0@0| Tclass._module.aexp) ($Is DatatypeTypeType |_mcc#3#0_0@0| Tclass._module.aexp)) (=> (and (and (and (and ($Is DatatypeTypeType |a1#0_0@0| Tclass._module.aexp) ($IsAlloc DatatypeTypeType |a1#0_0@0| Tclass._module.aexp $Heap@0)) (= |let#0_0#0#0| |_mcc#3#0_0@0|)) (and ($Is DatatypeTypeType |let#0_0#0#0| Tclass._module.aexp) (= |a1#0_0@0| |let#0_0#0#0|))) (and (and (and ($Is DatatypeTypeType |a0#0_0@0| Tclass._module.aexp) ($IsAlloc DatatypeTypeType |a0#0_0@0| Tclass._module.aexp $Heap@0)) (= |let#0_1#0#0| |_mcc#2#0_0@0|)) (and ($Is DatatypeTypeType |let#0_1#0#0| Tclass._module.aexp) (= |a0#0_0@0| |let#0_1#0#0|)))) (and (and (and (and (and (and (and (and (=> (= (ControlFlow 0 24) 2) anon17_Then_correct) (=> (= (ControlFlow 0 24) 4) anon18_Then_correct)) (=> (= (ControlFlow 0 24) 6) anon19_Then_correct)) (=> (= (ControlFlow 0 24) 8) anon20_Then_correct)) (=> (= (ControlFlow 0 24) 10) anon21_Then_correct)) (=> (= (ControlFlow 0 24) 13) anon22_Then_correct)) (=> (= (ControlFlow 0 24) 16) anon23_Then_correct)) (=> (= (ControlFlow 0 24) 18) anon24_Then_correct)) (=> (= (ControlFlow 0 24) 23) anon24_Else_correct)))))))
(let ((anon16_Else_correct true))
(let ((anon15_Else_correct  (=> (or (not (= |a#0@@7| (|#_module.aexp.V| |_mcc#1#1_0@0|))) (not true)) (and (=> (= (ControlFlow 0 25) 24) anon16_Then_correct) (=> (= (ControlFlow 0 25) 1) anon16_Else_correct)))))
(let ((anon14_Else_correct  (=> (or (not (= |a#0@@7| (|#_module.aexp.N| |_mcc#0#2_0@0|))) (not true)) (and (=> (= (ControlFlow 0 26) 22) anon15_Then_correct) (=> (= (ControlFlow 0 26) 25) anon15_Else_correct)))))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap@@6 alloc false)) (=> (and (|$IsA#_module.aexp| |a#0@@7|) (|$IsA#_module.List| |stk#0@@8|)) (=> (and (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (and (= $Heap@@6 $Heap@0) (forall ((|$ih#a0#0| T@U) (|$ih#stk0#0| T@U) ) (!  (=> (and (and (and ($Is DatatypeTypeType |$ih#a0#0| Tclass._module.aexp) ($Is DatatypeTypeType |$ih#stk0#0| (Tclass._module.List TInt))) (U_2_bool (Lit boolType (bool_2_U true)))) (or (< (DtRank |$ih#a0#0|) (DtRank |a#0@@7|)) (and (= (DtRank |$ih#a0#0|) (DtRank |a#0@@7|)) (< (DtRank |$ih#stk0#0|) (DtRank |stk#0@@8|))))) (|_module.List#Equal| (_module.__default.exec ($LS $LZ) (_module.__default.comp ($LS $LZ) |$ih#a0#0|) |s#0@@12| |$ih#stk0#0|) (|#_module.List.Cons| ($Box intType (int_2_U (_module.__default.aval ($LS $LZ) |$ih#a0#0| |s#0@@12|))) |$ih#stk0#0|)))
 :pattern ( (|#_module.List.Cons| ($Box intType (int_2_U (_module.__default.aval ($LS $LZ) |$ih#a0#0| |s#0@@12|))) |$ih#stk0#0|))
 :pattern ( (_module.__default.exec ($LS $LZ) (_module.__default.comp ($LS $LZ) |$ih#a0#0|) |s#0@@12| |$ih#stk0#0|))
)))) (and (=> (= (ControlFlow 0 27) 21) anon14_Then_correct) (=> (= (ControlFlow 0 27) 26) anon14_Else_correct)))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap@@6) ($IsHeapAnchor $Heap@@6)) (=> (and (and (and (and ($Is DatatypeTypeType |a#0@@7| Tclass._module.aexp) ($IsAlloc DatatypeTypeType |a#0@@7| Tclass._module.aexp $Heap@@6)) (|$IsA#_module.aexp| |a#0@@7|)) (and ($Is HandleTypeType |s#0@@12| (Tclass._System.___hTotalFunc1 (TSeq TChar) TInt)) ($IsAlloc HandleTypeType |s#0@@12| (Tclass._System.___hTotalFunc1 (TSeq TChar) TInt) $Heap@@6))) (and (and (and ($Is DatatypeTypeType |stk#0@@8| (Tclass._module.List TInt)) ($IsAlloc DatatypeTypeType |stk#0@@8| (Tclass._module.List TInt) $Heap@@6)) (|$IsA#_module.List| |stk#0@@8|)) (and (= 5 $FunctionContextHeight) (= (ControlFlow 0 28) 27)))) anon0_correct))))
PreconditionGeneratedEntry_correct)))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
