(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@20 () T@U)
(declare-fun $generated@@23 (Int) Int)
(declare-fun $generated@@25 (T@T T@U) T@U)
(declare-fun $generated@@28 (T@T T@U) T@U)
(declare-fun $generated@@29 (T@T T@U) T@U)
(declare-fun $generated@@32 (T@U T@U) Bool)
(declare-fun $generated@@33 (T@U) T@U)
(declare-fun $generated@@34 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@35 () T@T)
(declare-fun $generated@@36 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@50 (T@T T@U T@U) Bool)
(declare-fun $generated@@51 () T@T)
(declare-fun $generated@@52 (T@U) T@U)
(declare-fun $generated@@53 (T@U T@U) Bool)
(declare-fun $generated@@58 (T@U T@U T@U) Bool)
(declare-fun $generated@@64 (Int T@U Int T@U) T@U)
(declare-fun $generated@@71 () Int)
(declare-fun $generated@@72 (T@U) T@U)
(declare-fun $generated@@73 (T@U) Bool)
(declare-fun $generated@@83 (T@U) T@U)
(declare-fun $generated@@85 (T@U) T@U)
(declare-fun $generated@@89 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@90 () T@T)
(declare-fun $generated@@91 () T@T)
(declare-fun $generated@@92 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@93 (T@T T@T) T@T)
(declare-fun $generated@@94 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@95 (T@T) T@T)
(declare-fun $generated@@96 (T@T) T@T)
(declare-fun $generated@@137 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (forall (($generated@@21 T@U) ($generated@@22 T@U) ) (! ($generated@@19 $generated@@5 $generated@@21 $generated@@20 $generated@@22)
 :pattern ( ($generated@@19 $generated@@5 $generated@@21 $generated@@20 $generated@@22))
)))
(assert (forall (($generated@@24 Int) ) (! (= ($generated@@23 $generated@@24) $generated@@24)
 :pattern ( ($generated@@23 $generated@@24))
)))
(assert (forall (($generated@@26 T@U) ($generated@@27 T@T) ) (! (= ($generated@@25 $generated@@27 $generated@@26) $generated@@26)
 :pattern ( ($generated@@25 $generated@@27 $generated@@26))
)))
(assert (forall (($generated@@30 T@U) ($generated@@31 T@T) ) (! (= ($generated@@29 $generated@@31 ($generated@@28 $generated@@31 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@28 $generated@@31 $generated@@30))
)))
(assert  (and (and (forall (($generated@@37 T@T) ($generated@@38 T@T) ($generated@@39 T@U) ($generated@@40 T@U) ($generated@@41 T@U) ) (! (= ($generated@@34 $generated@@37 $generated@@38 ($generated@@36 $generated@@37 $generated@@38 $generated@@40 $generated@@41 $generated@@39) $generated@@41) $generated@@39)
 :weight 0
)) (forall (($generated@@42 T@T) ($generated@@43 T@T) ($generated@@44 T@U) ($generated@@45 T@U) ($generated@@46 T@U) ($generated@@47 T@U) ) (!  (or (= $generated@@46 $generated@@47) (= ($generated@@34 $generated@@42 $generated@@43 ($generated@@36 $generated@@42 $generated@@43 $generated@@45 $generated@@46 $generated@@44) $generated@@47) ($generated@@34 $generated@@42 $generated@@43 $generated@@45 $generated@@47)))
 :weight 0
))) (= ($generated@@3 $generated@@35) 3)))
(assert (forall (($generated@@48 T@U) ($generated@@49 T@U) ) (! (= ($generated@@32 ($generated@@33 $generated@@48) $generated@@49) ($generated@@8 ($generated@@34 $generated@@35 $generated@@4 $generated@@48 $generated@@49)))
 :pattern ( ($generated@@32 ($generated@@33 $generated@@48) $generated@@49))
)))
(assert (= ($generated@@3 $generated@@51) 4))
(assert (forall (($generated@@54 T@U) ($generated@@55 T@U) ) (! (= ($generated@@50 $generated@@51 $generated@@54 ($generated@@52 $generated@@55)) (forall (($generated@@56 T@U) ) (!  (=> ($generated@@32 $generated@@54 $generated@@56) ($generated@@53 $generated@@56 $generated@@55))
 :pattern ( ($generated@@32 $generated@@54 $generated@@56))
)))
 :pattern ( ($generated@@50 $generated@@51 $generated@@54 ($generated@@52 $generated@@55)))
)))
(assert (forall (($generated@@57 T@U) ) (! (= ($generated@@50 $generated@@5 $generated@@57 $generated@@20) (<= ($generated@@23 0) ($generated@@10 $generated@@57)))
 :pattern ( ($generated@@50 $generated@@5 $generated@@57 $generated@@20))
)))
(assert (forall (($generated@@59 T@U) ($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@T) ) (! (= ($generated@@58 ($generated@@29 $generated@@62 $generated@@59) $generated@@60 $generated@@61) ($generated@@19 $generated@@62 $generated@@59 $generated@@60 $generated@@61))
 :pattern ( ($generated@@58 ($generated@@29 $generated@@62 $generated@@59) $generated@@60 $generated@@61))
)))
(assert (forall (($generated@@63 T@U) ) (!  (=> ($generated@@53 $generated@@63 $generated@@20) (and (= ($generated@@29 $generated@@5 ($generated@@28 $generated@@5 $generated@@63)) $generated@@63) ($generated@@50 $generated@@5 ($generated@@28 $generated@@5 $generated@@63) $generated@@20)))
 :pattern ( ($generated@@53 $generated@@63 $generated@@20))
)))
(assert (forall (($generated@@65 Int) ($generated@@66 T@U) ($generated@@67 Int) ($generated@@68 T@U) ($generated@@69 T@U) ) (! (= ($generated@@8 ($generated@@34 $generated@@35 $generated@@4 ($generated@@64 $generated@@65 $generated@@66 $generated@@67 $generated@@68) $generated@@69)) (exists (($generated@@70 Int) ) (!  (and (and (<= $generated@@65 $generated@@70) ($generated@@32 $generated@@66 ($generated@@29 $generated@@5 ($generated@@9 $generated@@70)))) (= $generated@@69 ($generated@@29 $generated@@5 ($generated@@9 (+ $generated@@70 $generated@@67)))))
 :pattern ( ($generated@@32 $generated@@68 ($generated@@29 $generated@@5 ($generated@@9 $generated@@70))))
)))
 :pattern ( ($generated@@34 $generated@@35 $generated@@4 ($generated@@64 $generated@@65 $generated@@66 $generated@@67 $generated@@68) $generated@@69))
)))
(assert  (=> (<= 0 $generated@@71) (forall (($generated@@74 T@U) ) (!  (=> (or ($generated@@73 $generated@@74) (and (< 0 $generated@@71) ($generated@@50 $generated@@51 $generated@@74 ($generated@@52 $generated@@20)))) (= ($generated@@72 $generated@@74) ($generated@@33 ($generated@@64 ($generated@@23 0) $generated@@74 1 $generated@@74))))
 :pattern ( ($generated@@72 $generated@@74))
))))
(assert (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@T) ) (! (= ($generated@@53 ($generated@@29 $generated@@77 $generated@@75) $generated@@76) ($generated@@50 $generated@@77 $generated@@75 $generated@@76))
 :pattern ( ($generated@@53 ($generated@@29 $generated@@77 $generated@@75) $generated@@76))
)))
(assert (forall (($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ) (! (= ($generated@@19 $generated@@51 $generated@@78 ($generated@@52 $generated@@79) $generated@@80) (forall (($generated@@81 T@U) ) (!  (=> ($generated@@32 $generated@@78 $generated@@81) ($generated@@58 $generated@@81 $generated@@79 $generated@@80))
 :pattern ( ($generated@@32 $generated@@78 $generated@@81))
)))
 :pattern ( ($generated@@19 $generated@@51 $generated@@78 ($generated@@52 $generated@@79) $generated@@80))
)))
(assert  (=> (<= 0 $generated@@71) (forall (($generated@@82 T@U) ) (!  (=> (or ($generated@@73 ($generated@@25 $generated@@51 $generated@@82)) (and (< 0 $generated@@71) ($generated@@50 $generated@@51 $generated@@82 ($generated@@52 $generated@@20)))) (= ($generated@@72 ($generated@@25 $generated@@51 $generated@@82)) ($generated@@33 ($generated@@64 ($generated@@23 0) ($generated@@25 $generated@@51 $generated@@82) 1 $generated@@82))))
 :weight 3
 :pattern ( ($generated@@72 ($generated@@25 $generated@@51 $generated@@82)))
))))
(assert (forall (($generated@@84 T@U) ) (! (= ($generated@@83 ($generated@@52 $generated@@84)) $generated@@84)
 :pattern ( ($generated@@52 $generated@@84))
)))
(assert (forall (($generated@@86 T@U) ) (! (= ($generated@@85 ($generated@@52 $generated@@86)) $generated)
 :pattern ( ($generated@@52 $generated@@86))
)))
(assert (forall (($generated@@87 T@U) ($generated@@88 T@T) ) (! (= ($generated@@28 $generated@@88 ($generated@@29 $generated@@88 $generated@@87)) $generated@@87)
 :pattern ( ($generated@@29 $generated@@88 $generated@@87))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@97 T@T) ($generated@@98 T@T) ($generated@@99 T@T) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ) (! (= ($generated@@89 $generated@@97 $generated@@98 $generated@@99 ($generated@@94 $generated@@97 $generated@@98 $generated@@99 $generated@@101 $generated@@102 $generated@@103 $generated@@100) $generated@@102 $generated@@103) $generated@@100)
 :weight 0
)) (and (forall (($generated@@104 T@T) ($generated@@105 T@T) ($generated@@106 T@T) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ) (!  (or (= $generated@@109 $generated@@111) (= ($generated@@89 $generated@@104 $generated@@105 $generated@@106 ($generated@@94 $generated@@104 $generated@@105 $generated@@106 $generated@@108 $generated@@109 $generated@@110 $generated@@107) $generated@@111 $generated@@112) ($generated@@89 $generated@@104 $generated@@105 $generated@@106 $generated@@108 $generated@@111 $generated@@112)))
 :weight 0
)) (forall (($generated@@113 T@T) ($generated@@114 T@T) ($generated@@115 T@T) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ) (!  (or (= $generated@@119 $generated@@121) (= ($generated@@89 $generated@@113 $generated@@114 $generated@@115 ($generated@@94 $generated@@113 $generated@@114 $generated@@115 $generated@@117 $generated@@118 $generated@@119 $generated@@116) $generated@@120 $generated@@121) ($generated@@89 $generated@@113 $generated@@114 $generated@@115 $generated@@117 $generated@@120 $generated@@121)))
 :weight 0
)))) (= ($generated@@3 $generated@@90) 5)) (= ($generated@@3 $generated@@91) 6)) (forall (($generated@@122 T@T) ($generated@@123 T@T) ) (= ($generated@@3 ($generated@@93 $generated@@122 $generated@@123)) 7))) (forall (($generated@@124 T@T) ($generated@@125 T@T) ) (! (= ($generated@@95 ($generated@@93 $generated@@124 $generated@@125)) $generated@@124)
 :pattern ( ($generated@@93 $generated@@124 $generated@@125))
))) (forall (($generated@@126 T@T) ($generated@@127 T@T) ) (! (= ($generated@@96 ($generated@@93 $generated@@126 $generated@@127)) $generated@@127)
 :pattern ( ($generated@@93 $generated@@126 $generated@@127))
))))
(assert (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 Bool) ($generated@@132 T@U) ($generated@@133 T@U) ) (! (= ($generated@@8 ($generated@@89 $generated@@90 $generated@@91 $generated@@4 ($generated@@92 $generated@@128 $generated@@129 $generated@@130 $generated@@131) $generated@@132 $generated@@133))  (=> (and (or (not (= $generated@@132 $generated@@128)) (not true)) ($generated@@8 ($generated@@28 $generated@@4 ($generated@@34 $generated@@91 $generated@@35 ($generated@@34 $generated@@90 ($generated@@93 $generated@@91 $generated@@35) $generated@@129 $generated@@132) $generated@@130)))) $generated@@131))
 :pattern ( ($generated@@89 $generated@@90 $generated@@91 $generated@@4 ($generated@@92 $generated@@128 $generated@@129 $generated@@130 $generated@@131) $generated@@132 $generated@@133))
)))
(assert  (=> (<= 0 $generated@@71) (forall (($generated@@134 T@U) ) (!  (=> (or ($generated@@73 $generated@@134) (and (< 0 $generated@@71) ($generated@@50 $generated@@51 $generated@@134 ($generated@@52 $generated@@20)))) ($generated@@50 $generated@@51 ($generated@@72 $generated@@134) ($generated@@52 $generated@@20)))
 :pattern ( ($generated@@72 $generated@@134))
))))
(assert (forall (($generated@@135 T@U) ($generated@@136 T@U) ) (!  (=> ($generated@@53 $generated@@135 ($generated@@52 $generated@@136)) (and (= ($generated@@29 $generated@@51 ($generated@@28 $generated@@51 $generated@@135)) $generated@@135) ($generated@@50 $generated@@51 ($generated@@28 $generated@@51 $generated@@135) ($generated@@52 $generated@@136))))
 :pattern ( ($generated@@53 $generated@@135 ($generated@@52 $generated@@136)))
)))
(assert (= ($generated@@85 $generated@@20) $generated@@1))
(assert (= ($generated@@137 $generated@@20) $generated@@2))
(assert (forall (($generated@@138 Int) ) (! (= ($generated@@29 $generated@@5 ($generated@@9 ($generated@@23 $generated@@138))) ($generated@@25 $generated@@35 ($generated@@29 $generated@@5 ($generated@@9 $generated@@138))))
 :pattern ( ($generated@@29 $generated@@5 ($generated@@9 ($generated@@23 $generated@@138))))
)))
(assert (forall (($generated@@139 T@U) ($generated@@140 T@T) ) (! (= ($generated@@29 $generated@@140 ($generated@@25 $generated@@140 $generated@@139)) ($generated@@25 $generated@@35 ($generated@@29 $generated@@140 $generated@@139)))
 :pattern ( ($generated@@29 $generated@@140 ($generated@@25 $generated@@140 $generated@@139)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@141 () T@U)
(declare-fun $generated@@142 () T@U)
(declare-fun $generated@@143 () T@U)
(declare-fun $generated@@144 () T@U)
(declare-fun $generated@@145 (T@U) Bool)
(declare-fun $generated@@146 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@147  (=> (and (= $generated@@141 ($generated@@92 $generated@@142 $generated@@143 $generated@@0 false)) (= (ControlFlow 0 2) (- 0 1))) (not ($generated@@32 ($generated@@72 $generated@@144) ($generated@@29 $generated@@5 ($generated@@9 ($generated@@23 0))))))))
(let (($generated@@148  (=> (and ($generated@@145 $generated@@143) ($generated@@146 $generated@@143)) (=> (and (and ($generated@@50 $generated@@51 $generated@@144 ($generated@@52 $generated@@20)) ($generated@@19 $generated@@51 $generated@@144 ($generated@@52 $generated@@20) $generated@@143)) (and (= 1 $generated@@71) (= (ControlFlow 0 3) 2))) $generated@@147))))
$generated@@148)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
