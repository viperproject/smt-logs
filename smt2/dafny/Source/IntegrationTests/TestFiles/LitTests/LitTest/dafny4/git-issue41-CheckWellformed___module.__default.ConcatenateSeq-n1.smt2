(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TagSeq () T@U)
(declare-fun alloc () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun _module.__default.ConcatenateSeqs (T@U T@U T@U) T@U)
(declare-fun $LS (T@U) T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun |Seq#Empty| () T@U)
(declare-fun |Seq#Take| (T@U Int) T@U)
(declare-fun |Seq#Append| (T@U T@U) T@U)
(declare-fun |Seq#Drop| (T@U Int) T@U)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun |Seq#Rank| (T@U) Int)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun $FunctionContextHeight () Int)
(declare-fun |_module.__default.ConcatenateSeqs#canCall| (T@U T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun SeqType () T@T)
(declare-fun TSeq (T@U) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TagSeq alloc)
)
(assert (forall ((_module._default.ConcatenateSeqs$T T@U) ($ly T@U) (|ss#0| T@U) ) (! (= (_module.__default.ConcatenateSeqs _module._default.ConcatenateSeqs$T ($LS $ly) |ss#0|) (_module.__default.ConcatenateSeqs _module._default.ConcatenateSeqs$T $ly |ss#0|))
 :pattern ( (_module.__default.ConcatenateSeqs _module._default.ConcatenateSeqs$T ($LS $ly) |ss#0|))
)))
(assert (= (|Seq#Length| |Seq#Empty|) 0))
(assert (forall ((s T@U) (t T@U) (n Int) ) (!  (=> (= n (|Seq#Length| s)) (and (= (|Seq#Take| (|Seq#Append| s t) n) s) (= (|Seq#Drop| (|Seq#Append| s t) n) t)))
 :pattern ( (|Seq#Take| (|Seq#Append| s t) n))
 :pattern ( (|Seq#Drop| (|Seq#Append| s t) n))
)))
(assert (forall ((s@@0 T@U) (n@@0 Int) ) (!  (=> (= n@@0 0) (= (|Seq#Drop| s@@0 n@@0) s@@0))
 :pattern ( (|Seq#Drop| s@@0 n@@0))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((s@@1 T@U) (n@@1 Int) (j Int) ) (!  (=> (and (and (<= 0 j) (< j n@@1)) (< j (|Seq#Length| s@@1))) (= (|Seq#Index| (|Seq#Take| s@@1 n@@1) j) (|Seq#Index| s@@1 j)))
 :weight 25
 :pattern ( (|Seq#Index| (|Seq#Take| s@@1 n@@1) j))
 :pattern ( (|Seq#Index| s@@1 j) (|Seq#Take| s@@1 n@@1))
)))
(assert (forall ((s@@2 T@U) (n@@2 Int) ) (!  (=> (and (<= 0 n@@2) (<= n@@2 (|Seq#Length| s@@2))) (= (|Seq#Length| (|Seq#Drop| s@@2 n@@2)) (- (|Seq#Length| s@@2) n@@2)))
 :pattern ( (|Seq#Length| (|Seq#Drop| s@@2 n@@2)))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((s@@3 T@U) (i Int) ) (!  (=> (and (<= 0 i) (< i (|Seq#Length| s@@3))) (< (|Seq#Rank| (|Seq#Take| s@@3 i)) (|Seq#Rank| s@@3)))
 :pattern ( (|Seq#Rank| (|Seq#Take| s@@3 i)))
)))
(assert (forall ((s@@4 T@U) (i@@0 Int) ) (!  (=> (and (< 0 i@@0) (<= i@@0 (|Seq#Length| s@@4))) (< (|Seq#Rank| (|Seq#Drop| s@@4 i@@0)) (|Seq#Rank| s@@4)))
 :pattern ( (|Seq#Rank| (|Seq#Drop| s@@4 i@@0)))
)))
(assert (forall ((v T@U) (t@@0 T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v) t@@0 h) ($IsAlloc T@@1 v t@@0 h))
 :pattern ( ($IsAllocBox ($Box T@@1 v) t@@0 h))
)))
(assert (forall ((s@@5 T@U) (n@@3 Int) (j@@0 Int) ) (!  (=> (and (and (<= 0 n@@3) (<= 0 j@@0)) (< j@@0 (- (|Seq#Length| s@@5) n@@3))) (= (|Seq#Index| (|Seq#Drop| s@@5 n@@3) j@@0) (|Seq#Index| s@@5 (+ j@@0 n@@3))))
 :weight 25
 :pattern ( (|Seq#Index| (|Seq#Drop| s@@5 n@@3) j@@0))
)))
(assert (forall ((s0 T@U) (s1 T@U) ) (! (= (|Seq#Length| (|Seq#Append| s0 s1)) (+ (|Seq#Length| s0) (|Seq#Length| s1)))
 :pattern ( (|Seq#Length| (|Seq#Append| s0 s1)))
)))
(assert (= (Ctor SeqType) 3))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((_module._default.ConcatenateSeqs$T@@0 T@U) ($ly@@0 T@U) (|ss#0@@0| T@U) ) (!  (=> (or (|_module.__default.ConcatenateSeqs#canCall| _module._default.ConcatenateSeqs$T@@0 |ss#0@@0|) (and (< 0 $FunctionContextHeight) ($Is SeqType |ss#0@@0| (TSeq (TSeq _module._default.ConcatenateSeqs$T@@0))))) (and (=> (or (not (= (|Seq#Length| |ss#0@@0|) (LitInt 0))) (not true)) (|_module.__default.ConcatenateSeqs#canCall| _module._default.ConcatenateSeqs$T@@0 (|Seq#Drop| |ss#0@@0| (LitInt 1)))) (= (_module.__default.ConcatenateSeqs _module._default.ConcatenateSeqs$T@@0 ($LS $ly@@0) |ss#0@@0|) (ite (= (|Seq#Length| |ss#0@@0|) (LitInt 0)) |Seq#Empty| (|Seq#Append| ($Unbox SeqType (|Seq#Index| |ss#0@@0| (LitInt 0))) (_module.__default.ConcatenateSeqs _module._default.ConcatenateSeqs$T@@0 $ly@@0 (|Seq#Drop| |ss#0@@0| (LitInt 1))))))))
 :pattern ( (_module.__default.ConcatenateSeqs _module._default.ConcatenateSeqs$T@@0 ($LS $ly@@0) |ss#0@@0|))
))))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($Heap T@U) (_module._default.ConcatenateSeqs$T@@1 T@U) ($ly@@1 T@U) (|ss#0@@1| T@U) ) (!  (=> (and (or (|_module.__default.ConcatenateSeqs#canCall| _module._default.ConcatenateSeqs$T@@1 |ss#0@@1|) (and (< 0 $FunctionContextHeight) (and ($Is SeqType |ss#0@@1| (TSeq (TSeq _module._default.ConcatenateSeqs$T@@1))) ($IsAlloc SeqType |ss#0@@1| (TSeq (TSeq _module._default.ConcatenateSeqs$T@@1)) $Heap)))) ($IsGoodHeap $Heap)) ($IsAlloc SeqType (_module.__default.ConcatenateSeqs _module._default.ConcatenateSeqs$T@@1 $ly@@1 |ss#0@@1|) (TSeq _module._default.ConcatenateSeqs$T@@1) $Heap))
 :pattern ( ($IsAlloc SeqType (_module.__default.ConcatenateSeqs _module._default.ConcatenateSeqs$T@@1 $ly@@1 |ss#0@@1|) (TSeq _module._default.ConcatenateSeqs$T@@1) $Heap))
))))
(assert (forall ((s@@6 T@U) (n@@4 Int) ) (!  (=> (and (<= 0 n@@4) (<= n@@4 (|Seq#Length| s@@6))) (= (|Seq#Length| (|Seq#Take| s@@6 n@@4)) n@@4))
 :pattern ( (|Seq#Length| (|Seq#Take| s@@6 n@@4)))
)))
(assert (forall ((v@@0 T@U) (t@@1 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@0) t@@1) ($Is T@@2 v@@0 t@@1))
 :pattern ( ($IsBox ($Box T@@2 v@@0) t@@1))
)))
(assert (forall ((s@@7 T@U) ) (! (<= 0 (|Seq#Length| s@@7))
 :pattern ( (|Seq#Length| s@@7))
)))
(assert (forall ((s@@8 T@U) (i@@1 Int) (j@@1 Int) ) (!  (=> (and (and (<= 0 i@@1) (< i@@1 j@@1)) (<= j@@1 (|Seq#Length| s@@8))) (< (|Seq#Rank| (|Seq#Append| (|Seq#Take| s@@8 i@@1) (|Seq#Drop| s@@8 j@@1))) (|Seq#Rank| s@@8)))
 :pattern ( (|Seq#Rank| (|Seq#Append| (|Seq#Take| s@@8 i@@1) (|Seq#Drop| s@@8 j@@1))))
)))
(assert (forall ((v@@1 T@U) (t0 T@U) (h@@0 T@U) ) (! (= ($IsAlloc SeqType v@@1 (TSeq t0) h@@0) (forall ((i@@2 Int) ) (!  (=> (and (<= 0 i@@2) (< i@@2 (|Seq#Length| v@@1))) ($IsAllocBox (|Seq#Index| v@@1 i@@2) t0 h@@0))
 :pattern ( (|Seq#Index| v@@1 i@@2))
)))
 :pattern ( ($IsAlloc SeqType v@@1 (TSeq t0) h@@0))
)))
(assert (forall ((t@@2 T@U) ) (! (= (Inv0_TSeq (TSeq t@@2)) t@@2)
 :pattern ( (TSeq t@@2))
)))
(assert (forall ((t@@3 T@U) ) (! (= (Tag (TSeq t@@3)) TagSeq)
 :pattern ( (TSeq t@@3))
)))
(assert (forall ((x@@5 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@5)) x@@5)
 :pattern ( ($Box T@@3 x@@5))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall ((t0@@0 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0@@0 t1 t2 (MapType0Store t0@@0 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 4)) (= (Ctor FieldType) 5)) (forall ((t0@@1 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@1 t1@@0 (MapType1Store t0@@1 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :weight 0
))) (= (Ctor BoxType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((_module._default.ConcatenateSeqs$T@@2 T@U) ($ly@@2 T@U) (|ss#0@@2| T@U) ) (!  (=> (or (|_module.__default.ConcatenateSeqs#canCall| _module._default.ConcatenateSeqs$T@@2 |ss#0@@2|) (and (< 0 $FunctionContextHeight) ($Is SeqType |ss#0@@2| (TSeq (TSeq _module._default.ConcatenateSeqs$T@@2))))) ($Is SeqType (_module.__default.ConcatenateSeqs _module._default.ConcatenateSeqs$T@@2 $ly@@2 |ss#0@@2|) (TSeq _module._default.ConcatenateSeqs$T@@2)))
 :pattern ( (_module.__default.ConcatenateSeqs _module._default.ConcatenateSeqs$T@@2 $ly@@2 |ss#0@@2|))
))))
(assert (forall ((bx T@U) (t@@4 T@U) ) (!  (=> ($IsBox bx (TSeq t@@4)) (and (= ($Box SeqType ($Unbox SeqType bx)) bx) ($Is SeqType ($Unbox SeqType bx) (TSeq t@@4))))
 :pattern ( ($IsBox bx (TSeq t@@4)))
)))
(assert (forall ((s@@9 T@U) (n@@5 Int) (k Int) ) (!  (=> (and (and (<= 0 n@@5) (<= n@@5 k)) (< k (|Seq#Length| s@@9))) (= (|Seq#Index| (|Seq#Drop| s@@9 n@@5) (- k n@@5)) (|Seq#Index| s@@9 k)))
 :weight 25
 :pattern ( (|Seq#Index| s@@9 k) (|Seq#Drop| s@@9 n@@5))
)))
(assert (forall ((s@@10 T@U) (m@@4 Int) (n@@6 Int) ) (!  (=> (and (and (<= 0 m@@4) (<= 0 n@@6)) (<= (+ m@@4 n@@6) (|Seq#Length| s@@10))) (= (|Seq#Drop| (|Seq#Drop| s@@10 m@@4) n@@6) (|Seq#Drop| s@@10 (+ m@@4 n@@6))))
 :pattern ( (|Seq#Drop| (|Seq#Drop| s@@10 m@@4) n@@6))
)))
(assert (forall ((s0@@0 T@U) (s1@@0 T@U) (n@@7 Int) ) (!  (and (=> (< n@@7 (|Seq#Length| s0@@0)) (= (|Seq#Index| (|Seq#Append| s0@@0 s1@@0) n@@7) (|Seq#Index| s0@@0 n@@7))) (=> (<= (|Seq#Length| s0@@0) n@@7) (= (|Seq#Index| (|Seq#Append| s0@@0 s1@@0) n@@7) (|Seq#Index| s1@@0 (- n@@7 (|Seq#Length| s0@@0))))))
 :pattern ( (|Seq#Index| (|Seq#Append| s0@@0 s1@@0) n@@7))
)))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((x@@7 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@7)) (Lit BoxType ($Box T@@4 x@@7)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@7)))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((_module._default.ConcatenateSeqs$T@@3 T@U) ($ly@@3 T@U) (|ss#0@@3| T@U) ) (!  (=> (or (|_module.__default.ConcatenateSeqs#canCall| _module._default.ConcatenateSeqs$T@@3 (Lit SeqType |ss#0@@3|)) (and (< 0 $FunctionContextHeight) ($Is SeqType |ss#0@@3| (TSeq (TSeq _module._default.ConcatenateSeqs$T@@3))))) (and (=> (or (not (= (|Seq#Length| (Lit SeqType |ss#0@@3|)) (LitInt 0))) (not true)) (|_module.__default.ConcatenateSeqs#canCall| _module._default.ConcatenateSeqs$T@@3 (Lit SeqType (|Seq#Drop| (Lit SeqType |ss#0@@3|) (LitInt 1))))) (= (_module.__default.ConcatenateSeqs _module._default.ConcatenateSeqs$T@@3 ($LS $ly@@3) (Lit SeqType |ss#0@@3|)) (ite (= (|Seq#Length| (Lit SeqType |ss#0@@3|)) (LitInt 0)) |Seq#Empty| (|Seq#Append| ($Unbox SeqType (|Seq#Index| (Lit SeqType |ss#0@@3|) (LitInt 0))) (_module.__default.ConcatenateSeqs _module._default.ConcatenateSeqs$T@@3 ($LS $ly@@3) (Lit SeqType (|Seq#Drop| (Lit SeqType |ss#0@@3|) (LitInt 1)))))))))
 :weight 3
 :pattern ( (_module.__default.ConcatenateSeqs _module._default.ConcatenateSeqs$T@@3 ($LS $ly@@3) (Lit SeqType |ss#0@@3|)))
))))
(assert (forall ((s@@11 T@U) ) (!  (=> (= (|Seq#Length| s@@11) 0) (= s@@11 |Seq#Empty|))
 :pattern ( (|Seq#Length| s@@11))
)))
(assert (forall ((s@@12 T@U) (n@@8 Int) ) (!  (=> (= n@@8 0) (= (|Seq#Take| s@@12 n@@8) |Seq#Empty|))
 :pattern ( (|Seq#Take| s@@12 n@@8))
)))
(assert (forall ((v@@2 T@U) (t0@@2 T@U) ) (! (= ($Is SeqType v@@2 (TSeq t0@@2)) (forall ((i@@3 Int) ) (!  (=> (and (<= 0 i@@3) (< i@@3 (|Seq#Length| v@@2))) ($IsBox (|Seq#Index| v@@2 i@@3) t0@@2))
 :pattern ( (|Seq#Index| v@@2 i@@3))
)))
 :pattern ( ($Is SeqType v@@2 (TSeq t0@@2)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |ss#0@@4| () T@U)
(declare-fun |##ss#0@0| () T@U)
(declare-fun _module._default.ConcatenateSeqs$T@@4 () T@U)
(declare-fun $Heap@@0 () T@U)
(declare-fun $_ReadsFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 8) (let ((anon8_Else_correct  (=> (or (not (= (|Seq#Length| |ss#0@@4|) (LitInt 0))) (not true)) (and (=> (= (ControlFlow 0 4) (- 0 6)) (and (<= 0 (LitInt 0)) (< (LitInt 0) (|Seq#Length| |ss#0@@4|)))) (=> (and (<= 0 (LitInt 0)) (< (LitInt 0) (|Seq#Length| |ss#0@@4|))) (and (=> (= (ControlFlow 0 4) (- 0 5)) (and (<= 0 (LitInt 1)) (<= (LitInt 1) (|Seq#Length| |ss#0@@4|)))) (=> (and (<= 0 (LitInt 1)) (<= (LitInt 1) (|Seq#Length| |ss#0@@4|))) (=> (= |##ss#0@0| (|Seq#Drop| |ss#0@@4| (LitInt 1))) (=> (and ($IsAlloc SeqType |##ss#0@0| (TSeq (TSeq _module._default.ConcatenateSeqs$T@@4)) $Heap@@0) (= (ControlFlow 0 4) (- 0 3))) (< (|Seq#Rank| |##ss#0@0|) (|Seq#Rank| |ss#0@@4|)))))))))))
(let ((anon8_Then_correct true))
(let ((anon7_Then_correct true))
(let ((anon0_correct  (=> (= $_ReadsFrame@0 (|lambda#0| null $Heap@@0 alloc false)) (and (and (=> (= (ControlFlow 0 7) 1) anon7_Then_correct) (=> (= (ControlFlow 0 7) 2) anon8_Then_correct)) (=> (= (ControlFlow 0 7) 4) anon8_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (and ($IsGoodHeap $Heap@@0) ($IsHeapAnchor $Heap@@0)) ($Is SeqType |ss#0@@4| (TSeq (TSeq _module._default.ConcatenateSeqs$T@@4)))) (and (= 0 $FunctionContextHeight) (= (ControlFlow 0 8) 7))) anon0_correct)))
PreconditionGeneratedEntry_correct))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
