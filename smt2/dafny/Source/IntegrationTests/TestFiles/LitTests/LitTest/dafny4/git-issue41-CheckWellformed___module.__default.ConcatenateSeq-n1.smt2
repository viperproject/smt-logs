(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 (Bool) T@U)
(declare-fun $generated@@6 (T@U) Bool)
(declare-fun $generated@@7 (Int) T@U)
(declare-fun $generated@@8 (T@U) Int)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@17 (T@U T@U T@U) T@U)
(declare-fun $generated@@18 (T@U) T@U)
(declare-fun $generated@@22 (T@U) Int)
(declare-fun $generated@@23 () T@U)
(declare-fun $generated@@24 (T@U Int) T@U)
(declare-fun $generated@@25 (T@U T@U) T@U)
(declare-fun $generated@@26 (T@U Int) T@U)
(declare-fun $generated@@32 (Int) Int)
(declare-fun $generated@@34 (T@T T@U) T@U)
(declare-fun $generated@@37 (T@U Int) T@U)
(declare-fun $generated@@43 (T@T T@U) T@U)
(declare-fun $generated@@44 (T@T T@U) T@U)
(declare-fun $generated@@47 (T@U) Int)
(declare-fun $generated@@52 (T@U T@U T@U) Bool)
(declare-fun $generated@@53 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@63 () Int)
(declare-fun $generated@@64 (T@U T@U) Bool)
(declare-fun $generated@@65 (T@T T@U T@U) Bool)
(declare-fun $generated@@66 () T@T)
(declare-fun $generated@@67 (T@U) T@U)
(declare-fun $generated@@71 (T@U) Bool)
(declare-fun $generated@@78 (T@U T@U) Bool)
(declare-fun $generated@@90 (T@U) T@U)
(declare-fun $generated@@92 (T@U) T@U)
(declare-fun $generated@@96 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@97 () T@T)
(declare-fun $generated@@98 () T@T)
(declare-fun $generated@@99 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@100 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@101 () T@T)
(declare-fun $generated@@102 (T@T T@T) T@T)
(declare-fun $generated@@103 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@104 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@105 (T@T) T@T)
(declare-fun $generated@@106 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (forall (($generated@@11 Bool) ) (! (= ($generated@@6 ($generated@@5 $generated@@11)) $generated@@11)
 :pattern ( ($generated@@5 $generated@@11))
))) (forall (($generated@@12 T@U) ) (! (= ($generated@@5 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 Int) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))))
(assert (distinct $generated $generated@@0)
)
(assert (forall (($generated@@19 T@U) ($generated@@20 T@U) ($generated@@21 T@U) ) (! (= ($generated@@17 $generated@@19 ($generated@@18 $generated@@20) $generated@@21) ($generated@@17 $generated@@19 $generated@@20 $generated@@21))
 :pattern ( ($generated@@17 $generated@@19 ($generated@@18 $generated@@20) $generated@@21))
)))
(assert (= ($generated@@22 $generated@@23) 0))
(assert (forall (($generated@@27 T@U) ($generated@@28 T@U) ($generated@@29 Int) ) (!  (=> (= $generated@@29 ($generated@@22 $generated@@27)) (and (= ($generated@@24 ($generated@@25 $generated@@27 $generated@@28) $generated@@29) $generated@@27) (= ($generated@@26 ($generated@@25 $generated@@27 $generated@@28) $generated@@29) $generated@@28)))
 :pattern ( ($generated@@24 ($generated@@25 $generated@@27 $generated@@28) $generated@@29))
 :pattern ( ($generated@@26 ($generated@@25 $generated@@27 $generated@@28) $generated@@29))
)))
(assert (forall (($generated@@30 T@U) ($generated@@31 Int) ) (!  (=> (= $generated@@31 0) (= ($generated@@26 $generated@@30 $generated@@31) $generated@@30))
 :pattern ( ($generated@@26 $generated@@30 $generated@@31))
)))
(assert (forall (($generated@@33 Int) ) (! (= ($generated@@32 $generated@@33) $generated@@33)
 :pattern ( ($generated@@32 $generated@@33))
)))
(assert (forall (($generated@@35 T@U) ($generated@@36 T@T) ) (! (= ($generated@@34 $generated@@36 $generated@@35) $generated@@35)
 :pattern ( ($generated@@34 $generated@@36 $generated@@35))
)))
(assert (forall (($generated@@38 T@U) ($generated@@39 Int) ($generated@@40 Int) ) (!  (=> (and (and (<= 0 $generated@@40) (< $generated@@40 $generated@@39)) (< $generated@@40 ($generated@@22 $generated@@38))) (= ($generated@@37 ($generated@@24 $generated@@38 $generated@@39) $generated@@40) ($generated@@37 $generated@@38 $generated@@40)))
 :weight 25
 :pattern ( ($generated@@37 ($generated@@24 $generated@@38 $generated@@39) $generated@@40))
 :pattern ( ($generated@@37 $generated@@38 $generated@@40) ($generated@@24 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 Int) ) (!  (=> (and (<= 0 $generated@@42) (<= $generated@@42 ($generated@@22 $generated@@41))) (= ($generated@@22 ($generated@@26 $generated@@41 $generated@@42)) (- ($generated@@22 $generated@@41) $generated@@42)))
 :pattern ( ($generated@@22 ($generated@@26 $generated@@41 $generated@@42)))
)))
(assert (forall (($generated@@45 T@U) ($generated@@46 T@T) ) (! (= ($generated@@44 $generated@@46 ($generated@@43 $generated@@46 $generated@@45)) $generated@@45)
 :pattern ( ($generated@@43 $generated@@46 $generated@@45))
)))
(assert (forall (($generated@@48 T@U) ($generated@@49 Int) ) (!  (=> (and (<= 0 $generated@@49) (< $generated@@49 ($generated@@22 $generated@@48))) (< ($generated@@47 ($generated@@24 $generated@@48 $generated@@49)) ($generated@@47 $generated@@48)))
 :pattern ( ($generated@@47 ($generated@@24 $generated@@48 $generated@@49)))
)))
(assert (forall (($generated@@50 T@U) ($generated@@51 Int) ) (!  (=> (and (< 0 $generated@@51) (<= $generated@@51 ($generated@@22 $generated@@50))) (< ($generated@@47 ($generated@@26 $generated@@50 $generated@@51)) ($generated@@47 $generated@@50)))
 :pattern ( ($generated@@47 ($generated@@26 $generated@@50 $generated@@51)))
)))
(assert (forall (($generated@@54 T@U) ($generated@@55 T@U) ($generated@@56 T@U) ($generated@@57 T@T) ) (! (= ($generated@@52 ($generated@@44 $generated@@57 $generated@@54) $generated@@55 $generated@@56) ($generated@@53 $generated@@57 $generated@@54 $generated@@55 $generated@@56))
 :pattern ( ($generated@@52 ($generated@@44 $generated@@57 $generated@@54) $generated@@55 $generated@@56))
)))
(assert (forall (($generated@@58 T@U) ($generated@@59 Int) ($generated@@60 Int) ) (!  (=> (and (and (<= 0 $generated@@59) (<= 0 $generated@@60)) (< $generated@@60 (- ($generated@@22 $generated@@58) $generated@@59))) (= ($generated@@37 ($generated@@26 $generated@@58 $generated@@59) $generated@@60) ($generated@@37 $generated@@58 (+ $generated@@60 $generated@@59))))
 :weight 25
 :pattern ( ($generated@@37 ($generated@@26 $generated@@58 $generated@@59) $generated@@60))
)))
(assert (forall (($generated@@61 T@U) ($generated@@62 T@U) ) (! (= ($generated@@22 ($generated@@25 $generated@@61 $generated@@62)) (+ ($generated@@22 $generated@@61) ($generated@@22 $generated@@62)))
 :pattern ( ($generated@@22 ($generated@@25 $generated@@61 $generated@@62)))
)))
(assert (= ($generated@@1 $generated@@66) 3))
(assert  (=> (<= 0 $generated@@63) (forall (($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ) (!  (=> (or ($generated@@64 $generated@@68 $generated@@70) (and (< 0 $generated@@63) ($generated@@65 $generated@@66 $generated@@70 ($generated@@67 ($generated@@67 $generated@@68))))) (and (=> (or (not (= ($generated@@22 $generated@@70) ($generated@@32 0))) (not true)) ($generated@@64 $generated@@68 ($generated@@26 $generated@@70 ($generated@@32 1)))) (= ($generated@@17 $generated@@68 ($generated@@18 $generated@@69) $generated@@70) (ite (= ($generated@@22 $generated@@70) ($generated@@32 0)) $generated@@23 ($generated@@25 ($generated@@43 $generated@@66 ($generated@@37 $generated@@70 ($generated@@32 0))) ($generated@@17 $generated@@68 $generated@@69 ($generated@@26 $generated@@70 ($generated@@32 1))))))))
 :pattern ( ($generated@@17 $generated@@68 ($generated@@18 $generated@@69) $generated@@70))
))))
(assert  (=> (<= 0 $generated@@63) (forall (($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@U) ) (!  (=> (and (or ($generated@@64 $generated@@73 $generated@@75) (and (< 0 $generated@@63) (and ($generated@@65 $generated@@66 $generated@@75 ($generated@@67 ($generated@@67 $generated@@73))) ($generated@@53 $generated@@66 $generated@@75 ($generated@@67 ($generated@@67 $generated@@73)) $generated@@72)))) ($generated@@71 $generated@@72)) ($generated@@53 $generated@@66 ($generated@@17 $generated@@73 $generated@@74 $generated@@75) ($generated@@67 $generated@@73) $generated@@72))
 :pattern ( ($generated@@53 $generated@@66 ($generated@@17 $generated@@73 $generated@@74 $generated@@75) ($generated@@67 $generated@@73) $generated@@72))
))))
(assert (forall (($generated@@76 T@U) ($generated@@77 Int) ) (!  (=> (and (<= 0 $generated@@77) (<= $generated@@77 ($generated@@22 $generated@@76))) (= ($generated@@22 ($generated@@24 $generated@@76 $generated@@77)) $generated@@77))
 :pattern ( ($generated@@22 ($generated@@24 $generated@@76 $generated@@77)))
)))
(assert (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@T) ) (! (= ($generated@@78 ($generated@@44 $generated@@81 $generated@@79) $generated@@80) ($generated@@65 $generated@@81 $generated@@79 $generated@@80))
 :pattern ( ($generated@@78 ($generated@@44 $generated@@81 $generated@@79) $generated@@80))
)))
(assert (forall (($generated@@82 T@U) ) (! (<= 0 ($generated@@22 $generated@@82))
 :pattern ( ($generated@@22 $generated@@82))
)))
(assert (forall (($generated@@83 T@U) ($generated@@84 Int) ($generated@@85 Int) ) (!  (=> (and (and (<= 0 $generated@@84) (< $generated@@84 $generated@@85)) (<= $generated@@85 ($generated@@22 $generated@@83))) (< ($generated@@47 ($generated@@25 ($generated@@24 $generated@@83 $generated@@84) ($generated@@26 $generated@@83 $generated@@85))) ($generated@@47 $generated@@83)))
 :pattern ( ($generated@@47 ($generated@@25 ($generated@@24 $generated@@83 $generated@@84) ($generated@@26 $generated@@83 $generated@@85))))
)))
(assert (forall (($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ) (! (= ($generated@@53 $generated@@66 $generated@@86 ($generated@@67 $generated@@87) $generated@@88) (forall (($generated@@89 Int) ) (!  (=> (and (<= 0 $generated@@89) (< $generated@@89 ($generated@@22 $generated@@86))) ($generated@@52 ($generated@@37 $generated@@86 $generated@@89) $generated@@87 $generated@@88))
 :pattern ( ($generated@@37 $generated@@86 $generated@@89))
)))
 :pattern ( ($generated@@53 $generated@@66 $generated@@86 ($generated@@67 $generated@@87) $generated@@88))
)))
(assert (forall (($generated@@91 T@U) ) (! (= ($generated@@90 ($generated@@67 $generated@@91)) $generated@@91)
 :pattern ( ($generated@@67 $generated@@91))
)))
(assert (forall (($generated@@93 T@U) ) (! (= ($generated@@92 ($generated@@67 $generated@@93)) $generated)
 :pattern ( ($generated@@67 $generated@@93))
)))
(assert (forall (($generated@@94 T@U) ($generated@@95 T@T) ) (! (= ($generated@@43 $generated@@95 ($generated@@44 $generated@@95 $generated@@94)) $generated@@94)
 :pattern ( ($generated@@44 $generated@@95 $generated@@94))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@107 T@T) ($generated@@108 T@T) ($generated@@109 T@T) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ) (! (= ($generated@@96 $generated@@107 $generated@@108 $generated@@109 ($generated@@103 $generated@@107 $generated@@108 $generated@@109 $generated@@111 $generated@@112 $generated@@113 $generated@@110) $generated@@112 $generated@@113) $generated@@110)
 :weight 0
)) (and (forall (($generated@@114 T@T) ($generated@@115 T@T) ($generated@@116 T@T) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ) (!  (or (= $generated@@119 $generated@@121) (= ($generated@@96 $generated@@114 $generated@@115 $generated@@116 ($generated@@103 $generated@@114 $generated@@115 $generated@@116 $generated@@118 $generated@@119 $generated@@120 $generated@@117) $generated@@121 $generated@@122) ($generated@@96 $generated@@114 $generated@@115 $generated@@116 $generated@@118 $generated@@121 $generated@@122)))
 :weight 0
)) (forall (($generated@@123 T@T) ($generated@@124 T@T) ($generated@@125 T@T) ($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ) (!  (or (= $generated@@129 $generated@@131) (= ($generated@@96 $generated@@123 $generated@@124 $generated@@125 ($generated@@103 $generated@@123 $generated@@124 $generated@@125 $generated@@127 $generated@@128 $generated@@129 $generated@@126) $generated@@130 $generated@@131) ($generated@@96 $generated@@123 $generated@@124 $generated@@125 $generated@@127 $generated@@130 $generated@@131)))
 :weight 0
)))) (= ($generated@@1 $generated@@97) 4)) (= ($generated@@1 $generated@@98) 5)) (forall (($generated@@132 T@T) ($generated@@133 T@T) ($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ) (! (= ($generated@@100 $generated@@132 $generated@@133 ($generated@@104 $generated@@132 $generated@@133 $generated@@135 $generated@@136 $generated@@134) $generated@@136) $generated@@134)
 :weight 0
))) (forall (($generated@@137 T@T) ($generated@@138 T@T) ($generated@@139 T@U) ($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ) (!  (or (= $generated@@141 $generated@@142) (= ($generated@@100 $generated@@137 $generated@@138 ($generated@@104 $generated@@137 $generated@@138 $generated@@140 $generated@@141 $generated@@139) $generated@@142) ($generated@@100 $generated@@137 $generated@@138 $generated@@140 $generated@@142)))
 :weight 0
))) (= ($generated@@1 $generated@@101) 6)) (forall (($generated@@143 T@T) ($generated@@144 T@T) ) (= ($generated@@1 ($generated@@102 $generated@@143 $generated@@144)) 7))) (forall (($generated@@145 T@T) ($generated@@146 T@T) ) (! (= ($generated@@105 ($generated@@102 $generated@@145 $generated@@146)) $generated@@145)
 :pattern ( ($generated@@102 $generated@@145 $generated@@146))
))) (forall (($generated@@147 T@T) ($generated@@148 T@T) ) (! (= ($generated@@106 ($generated@@102 $generated@@147 $generated@@148)) $generated@@148)
 :pattern ( ($generated@@102 $generated@@147 $generated@@148))
))))
(assert (forall (($generated@@149 T@U) ($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 Bool) ($generated@@153 T@U) ($generated@@154 T@U) ) (! (= ($generated@@6 ($generated@@96 $generated@@97 $generated@@98 $generated@@2 ($generated@@99 $generated@@149 $generated@@150 $generated@@151 $generated@@152) $generated@@153 $generated@@154))  (=> (and (or (not (= $generated@@153 $generated@@149)) (not true)) ($generated@@6 ($generated@@43 $generated@@2 ($generated@@100 $generated@@98 $generated@@101 ($generated@@100 $generated@@97 ($generated@@102 $generated@@98 $generated@@101) $generated@@150 $generated@@153) $generated@@151)))) $generated@@152))
 :pattern ( ($generated@@96 $generated@@97 $generated@@98 $generated@@2 ($generated@@99 $generated@@149 $generated@@150 $generated@@151 $generated@@152) $generated@@153 $generated@@154))
)))
(assert  (=> (<= 0 $generated@@63) (forall (($generated@@155 T@U) ($generated@@156 T@U) ($generated@@157 T@U) ) (!  (=> (or ($generated@@64 $generated@@155 $generated@@157) (and (< 0 $generated@@63) ($generated@@65 $generated@@66 $generated@@157 ($generated@@67 ($generated@@67 $generated@@155))))) ($generated@@65 $generated@@66 ($generated@@17 $generated@@155 $generated@@156 $generated@@157) ($generated@@67 $generated@@155)))
 :pattern ( ($generated@@17 $generated@@155 $generated@@156 $generated@@157))
))))
(assert (forall (($generated@@158 T@U) ($generated@@159 T@U) ) (!  (=> ($generated@@78 $generated@@158 ($generated@@67 $generated@@159)) (and (= ($generated@@44 $generated@@66 ($generated@@43 $generated@@66 $generated@@158)) $generated@@158) ($generated@@65 $generated@@66 ($generated@@43 $generated@@66 $generated@@158) ($generated@@67 $generated@@159))))
 :pattern ( ($generated@@78 $generated@@158 ($generated@@67 $generated@@159)))
)))
(assert (forall (($generated@@160 T@U) ($generated@@161 Int) ($generated@@162 Int) ) (!  (=> (and (and (<= 0 $generated@@161) (<= $generated@@161 $generated@@162)) (< $generated@@162 ($generated@@22 $generated@@160))) (= ($generated@@37 ($generated@@26 $generated@@160 $generated@@161) (- $generated@@162 $generated@@161)) ($generated@@37 $generated@@160 $generated@@162)))
 :weight 25
 :pattern ( ($generated@@37 $generated@@160 $generated@@162) ($generated@@26 $generated@@160 $generated@@161))
)))
(assert (forall (($generated@@163 T@U) ($generated@@164 Int) ($generated@@165 Int) ) (!  (=> (and (and (<= 0 $generated@@164) (<= 0 $generated@@165)) (<= (+ $generated@@164 $generated@@165) ($generated@@22 $generated@@163))) (= ($generated@@26 ($generated@@26 $generated@@163 $generated@@164) $generated@@165) ($generated@@26 $generated@@163 (+ $generated@@164 $generated@@165))))
 :pattern ( ($generated@@26 ($generated@@26 $generated@@163 $generated@@164) $generated@@165))
)))
(assert (forall (($generated@@166 T@U) ($generated@@167 T@U) ($generated@@168 Int) ) (!  (and (=> (< $generated@@168 ($generated@@22 $generated@@166)) (= ($generated@@37 ($generated@@25 $generated@@166 $generated@@167) $generated@@168) ($generated@@37 $generated@@166 $generated@@168))) (=> (<= ($generated@@22 $generated@@166) $generated@@168) (= ($generated@@37 ($generated@@25 $generated@@166 $generated@@167) $generated@@168) ($generated@@37 $generated@@167 (- $generated@@168 ($generated@@22 $generated@@166))))))
 :pattern ( ($generated@@37 ($generated@@25 $generated@@166 $generated@@167) $generated@@168))
)))
(assert (forall (($generated@@169 Int) ) (! (= ($generated@@44 $generated@@3 ($generated@@7 ($generated@@32 $generated@@169))) ($generated@@34 $generated@@101 ($generated@@44 $generated@@3 ($generated@@7 $generated@@169))))
 :pattern ( ($generated@@44 $generated@@3 ($generated@@7 ($generated@@32 $generated@@169))))
)))
(assert (forall (($generated@@170 T@U) ($generated@@171 T@T) ) (! (= ($generated@@44 $generated@@171 ($generated@@34 $generated@@171 $generated@@170)) ($generated@@34 $generated@@101 ($generated@@44 $generated@@171 $generated@@170)))
 :pattern ( ($generated@@44 $generated@@171 ($generated@@34 $generated@@171 $generated@@170)))
)))
(assert  (=> (<= 0 $generated@@63) (forall (($generated@@172 T@U) ($generated@@173 T@U) ($generated@@174 T@U) ) (!  (=> (or ($generated@@64 $generated@@172 ($generated@@34 $generated@@66 $generated@@174)) (and (< 0 $generated@@63) ($generated@@65 $generated@@66 $generated@@174 ($generated@@67 ($generated@@67 $generated@@172))))) (and (=> (or (not (= ($generated@@22 ($generated@@34 $generated@@66 $generated@@174)) ($generated@@32 0))) (not true)) ($generated@@64 $generated@@172 ($generated@@34 $generated@@66 ($generated@@26 ($generated@@34 $generated@@66 $generated@@174) ($generated@@32 1))))) (= ($generated@@17 $generated@@172 ($generated@@18 $generated@@173) ($generated@@34 $generated@@66 $generated@@174)) (ite (= ($generated@@22 ($generated@@34 $generated@@66 $generated@@174)) ($generated@@32 0)) $generated@@23 ($generated@@25 ($generated@@43 $generated@@66 ($generated@@37 ($generated@@34 $generated@@66 $generated@@174) ($generated@@32 0))) ($generated@@17 $generated@@172 ($generated@@18 $generated@@173) ($generated@@34 $generated@@66 ($generated@@26 ($generated@@34 $generated@@66 $generated@@174) ($generated@@32 1)))))))))
 :weight 3
 :pattern ( ($generated@@17 $generated@@172 ($generated@@18 $generated@@173) ($generated@@34 $generated@@66 $generated@@174)))
))))
(assert (forall (($generated@@175 T@U) ) (!  (=> (= ($generated@@22 $generated@@175) 0) (= $generated@@175 $generated@@23))
 :pattern ( ($generated@@22 $generated@@175))
)))
(assert (forall (($generated@@176 T@U) ($generated@@177 Int) ) (!  (=> (= $generated@@177 0) (= ($generated@@24 $generated@@176 $generated@@177) $generated@@23))
 :pattern ( ($generated@@24 $generated@@176 $generated@@177))
)))
(assert (forall (($generated@@178 T@U) ($generated@@179 T@U) ) (! (= ($generated@@65 $generated@@66 $generated@@178 ($generated@@67 $generated@@179)) (forall (($generated@@180 Int) ) (!  (=> (and (<= 0 $generated@@180) (< $generated@@180 ($generated@@22 $generated@@178))) ($generated@@78 ($generated@@37 $generated@@178 $generated@@180) $generated@@179))
 :pattern ( ($generated@@37 $generated@@178 $generated@@180))
)))
 :pattern ( ($generated@@65 $generated@@66 $generated@@178 ($generated@@67 $generated@@179)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@181 () T@U)
(declare-fun $generated@@182 () T@U)
(declare-fun $generated@@183 () T@U)
(declare-fun $generated@@184 () T@U)
(declare-fun $generated@@185 () T@U)
(declare-fun $generated@@186 () T@U)
(declare-fun $generated@@187 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 8) (let (($generated@@188  (=> (or (not (= ($generated@@22 $generated@@181) ($generated@@32 0))) (not true)) (and (=> (= (ControlFlow 0 4) (- 0 6)) (and (<= 0 ($generated@@32 0)) (< ($generated@@32 0) ($generated@@22 $generated@@181)))) (=> (and (<= 0 ($generated@@32 0)) (< ($generated@@32 0) ($generated@@22 $generated@@181))) (and (=> (= (ControlFlow 0 4) (- 0 5)) (and (<= 0 ($generated@@32 1)) (<= ($generated@@32 1) ($generated@@22 $generated@@181)))) (=> (and (<= 0 ($generated@@32 1)) (<= ($generated@@32 1) ($generated@@22 $generated@@181))) (=> (= $generated@@182 ($generated@@26 $generated@@181 ($generated@@32 1))) (=> (and ($generated@@53 $generated@@66 $generated@@182 ($generated@@67 ($generated@@67 $generated@@183)) $generated@@184) (= (ControlFlow 0 4) (- 0 3))) (< ($generated@@47 $generated@@182) ($generated@@47 $generated@@181)))))))))))
(let (($generated@@189 true))
(let (($generated@@190 true))
(let (($generated@@191  (=> (= $generated@@185 ($generated@@99 $generated@@186 $generated@@184 $generated@@0 false)) (and (and (=> (= (ControlFlow 0 7) 1) $generated@@190) (=> (= (ControlFlow 0 7) 2) $generated@@189)) (=> (= (ControlFlow 0 7) 4) $generated@@188)))))
(let (($generated@@192  (=> (and (and (and ($generated@@71 $generated@@184) ($generated@@187 $generated@@184)) ($generated@@65 $generated@@66 $generated@@181 ($generated@@67 ($generated@@67 $generated@@183)))) (and (= 0 $generated@@63) (= (ControlFlow 0 8) 7))) $generated@@191)))
$generated@@192))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
