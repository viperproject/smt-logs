// dafny 4.9.2.0
// Command Line Options: /deprecation:0 /compile:0 /timeLimit:10 /print:/home/runner/work/smt-logs/smt-logs/dafny/../smt2/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.bpl /vcsCores:1 /proverLog:/home/runner/work/smt-logs/smt-logs/dafny/../smt2/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort-@PROC@.smt2 /normalizeNames:0 /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy

const $$Language$Dafny: bool
uses {
axiom $$Language$Dafny;
}

type Ty;

type Bv0 = int;

const unique TBool: Ty
uses {
axiom Tag(TBool) == TagBool;
}

const unique TChar: Ty
uses {
axiom Tag(TChar) == TagChar;
}

const unique TInt: Ty
uses {
axiom Tag(TInt) == TagInt;
}

const unique TReal: Ty
uses {
axiom Tag(TReal) == TagReal;
}

const unique TORDINAL: Ty
uses {
axiom Tag(TORDINAL) == TagORDINAL;
}

revealed function TBitvector(int) : Ty;

axiom (forall w: int :: { TBitvector(w) } Inv0_TBitvector(TBitvector(w)) == w);

revealed function TSet(Ty) : Ty;

axiom (forall t: Ty :: { TSet(t) } Inv0_TSet(TSet(t)) == t);

axiom (forall t: Ty :: { TSet(t) } Tag(TSet(t)) == TagSet);

revealed function TISet(Ty) : Ty;

axiom (forall t: Ty :: { TISet(t) } Inv0_TISet(TISet(t)) == t);

axiom (forall t: Ty :: { TISet(t) } Tag(TISet(t)) == TagISet);

revealed function TMultiSet(Ty) : Ty;

axiom (forall t: Ty :: { TMultiSet(t) } Inv0_TMultiSet(TMultiSet(t)) == t);

axiom (forall t: Ty :: { TMultiSet(t) } Tag(TMultiSet(t)) == TagMultiSet);

revealed function TSeq(Ty) : Ty;

axiom (forall t: Ty :: { TSeq(t) } Inv0_TSeq(TSeq(t)) == t);

axiom (forall t: Ty :: { TSeq(t) } Tag(TSeq(t)) == TagSeq);

revealed function TMap(Ty, Ty) : Ty;

axiom (forall t: Ty, u: Ty :: { TMap(t, u) } Inv0_TMap(TMap(t, u)) == t);

axiom (forall t: Ty, u: Ty :: { TMap(t, u) } Inv1_TMap(TMap(t, u)) == u);

axiom (forall t: Ty, u: Ty :: { TMap(t, u) } Tag(TMap(t, u)) == TagMap);

revealed function TIMap(Ty, Ty) : Ty;

axiom (forall t: Ty, u: Ty :: { TIMap(t, u) } Inv0_TIMap(TIMap(t, u)) == t);

axiom (forall t: Ty, u: Ty :: { TIMap(t, u) } Inv1_TIMap(TIMap(t, u)) == u);

axiom (forall t: Ty, u: Ty :: { TIMap(t, u) } Tag(TIMap(t, u)) == TagIMap);

revealed function Inv0_TBitvector(Ty) : int;

revealed function Inv0_TSet(Ty) : Ty;

revealed function Inv0_TISet(Ty) : Ty;

revealed function Inv0_TSeq(Ty) : Ty;

revealed function Inv0_TMultiSet(Ty) : Ty;

revealed function Inv0_TMap(Ty) : Ty;

revealed function Inv1_TMap(Ty) : Ty;

revealed function Inv0_TIMap(Ty) : Ty;

revealed function Inv1_TIMap(Ty) : Ty;

type TyTag;

revealed function Tag(Ty) : TyTag;

const unique TagBool: TyTag;

const unique TagChar: TyTag;

const unique TagInt: TyTag;

const unique TagReal: TyTag;

const unique TagORDINAL: TyTag;

const unique TagSet: TyTag;

const unique TagISet: TyTag;

const unique TagMultiSet: TyTag;

const unique TagSeq: TyTag;

const unique TagMap: TyTag;

const unique TagIMap: TyTag;

const unique TagClass: TyTag;

type TyTagFamily;

revealed function TagFamily(Ty) : TyTagFamily;

revealed function {:identity} Lit<T>(x: T) : T
uses {
axiom (forall<T> x: T :: {:identity} { Lit(x): T } Lit(x): T == x);
}

axiom (forall<T> x: T :: { $Box(Lit(x)) } $Box(Lit(x)) == Lit($Box(x)));

revealed function {:identity} LitInt(x: int) : int
uses {
axiom (forall x: int :: {:identity} { LitInt(x): int } LitInt(x): int == x);
}

axiom (forall x: int :: { $Box(LitInt(x)) } $Box(LitInt(x)) == Lit($Box(x)));

revealed function {:identity} LitReal(x: real) : real
uses {
axiom (forall x: real :: {:identity} { LitReal(x): real } LitReal(x): real == x);
}

axiom (forall x: real :: { $Box(LitReal(x)) } $Box(LitReal(x)) == Lit($Box(x)));

revealed function {:inline} char#IsChar(n: int) : bool
{
  (0 <= n && n < 55296) || (57344 <= n && n < 1114112)
}

type char;

revealed function char#FromInt(int) : char;

axiom (forall n: int :: 
  { char#FromInt(n) } 
  char#IsChar(n) ==> char#ToInt(char#FromInt(n)) == n);

revealed function char#ToInt(char) : int;

axiom (forall ch: char :: 
  { char#ToInt(ch) } 
  char#FromInt(char#ToInt(ch)) == ch && char#IsChar(char#ToInt(ch)));

revealed function char#Plus(char, char) : char;

axiom (forall a: char, b: char :: 
  { char#Plus(a, b) } 
  char#Plus(a, b) == char#FromInt(char#ToInt(a) + char#ToInt(b)));

revealed function char#Minus(char, char) : char;

axiom (forall a: char, b: char :: 
  { char#Minus(a, b) } 
  char#Minus(a, b) == char#FromInt(char#ToInt(a) - char#ToInt(b)));

type ref;

const null: ref;

type Box;

const $ArbitraryBoxValue: Box;

revealed function $Box<T>(T) : Box;

revealed function $Unbox<T>(Box) : T;

axiom (forall<T> x: T :: { $Box(x) } $Unbox($Box(x)) == x);

axiom (forall<T> x: Box :: { $Unbox(x): T } $Box($Unbox(x): T) == x);

revealed function $IsBox(Box, Ty) : bool;

revealed function $IsAllocBox(Box, Ty, Heap) : bool;

axiom (forall bx: Box :: 
  { $IsBox(bx, TInt) } 
  $IsBox(bx, TInt) ==> $Box($Unbox(bx): int) == bx && $Is($Unbox(bx): int, TInt));

axiom (forall bx: Box :: 
  { $IsBox(bx, TReal) } 
  $IsBox(bx, TReal)
     ==> $Box($Unbox(bx): real) == bx && $Is($Unbox(bx): real, TReal));

axiom (forall bx: Box :: 
  { $IsBox(bx, TBool) } 
  $IsBox(bx, TBool)
     ==> $Box($Unbox(bx): bool) == bx && $Is($Unbox(bx): bool, TBool));

axiom (forall bx: Box :: 
  { $IsBox(bx, TChar) } 
  $IsBox(bx, TChar)
     ==> $Box($Unbox(bx): char) == bx && $Is($Unbox(bx): char, TChar));

axiom (forall bx: Box :: 
  { $IsBox(bx, TBitvector(0)) } 
  $IsBox(bx, TBitvector(0))
     ==> $Box($Unbox(bx): Bv0) == bx && $Is($Unbox(bx): Bv0, TBitvector(0)));

axiom (forall bx: Box, t: Ty :: 
  { $IsBox(bx, TSet(t)) } 
  $IsBox(bx, TSet(t))
     ==> $Box($Unbox(bx): Set) == bx && $Is($Unbox(bx): Set, TSet(t)));

axiom (forall bx: Box, t: Ty :: 
  { $IsBox(bx, TISet(t)) } 
  $IsBox(bx, TISet(t))
     ==> $Box($Unbox(bx): ISet) == bx && $Is($Unbox(bx): ISet, TISet(t)));

axiom (forall bx: Box, t: Ty :: 
  { $IsBox(bx, TMultiSet(t)) } 
  $IsBox(bx, TMultiSet(t))
     ==> $Box($Unbox(bx): MultiSet) == bx && $Is($Unbox(bx): MultiSet, TMultiSet(t)));

axiom (forall bx: Box, t: Ty :: 
  { $IsBox(bx, TSeq(t)) } 
  $IsBox(bx, TSeq(t))
     ==> $Box($Unbox(bx): Seq) == bx && $Is($Unbox(bx): Seq, TSeq(t)));

axiom (forall bx: Box, s: Ty, t: Ty :: 
  { $IsBox(bx, TMap(s, t)) } 
  $IsBox(bx, TMap(s, t))
     ==> $Box($Unbox(bx): Map) == bx && $Is($Unbox(bx): Map, TMap(s, t)));

axiom (forall bx: Box, s: Ty, t: Ty :: 
  { $IsBox(bx, TIMap(s, t)) } 
  $IsBox(bx, TIMap(s, t))
     ==> $Box($Unbox(bx): IMap) == bx && $Is($Unbox(bx): IMap, TIMap(s, t)));

axiom (forall<T> v: T, t: Ty :: 
  { $IsBox($Box(v), t) } 
  $IsBox($Box(v), t) <==> $Is(v, t));

axiom (forall<T> v: T, t: Ty, h: Heap :: 
  { $IsAllocBox($Box(v), t, h) } 
  $IsAllocBox($Box(v), t, h) <==> $IsAlloc(v, t, h));

revealed function $Is<T>(T, Ty) : bool;

axiom (forall v: int :: { $Is(v, TInt) } $Is(v, TInt));

axiom (forall v: real :: { $Is(v, TReal) } $Is(v, TReal));

axiom (forall v: bool :: { $Is(v, TBool) } $Is(v, TBool));

axiom (forall v: char :: { $Is(v, TChar) } $Is(v, TChar));

axiom (forall v: ORDINAL :: { $Is(v, TORDINAL) } $Is(v, TORDINAL));

axiom (forall v: Bv0 :: { $Is(v, TBitvector(0)) } $Is(v, TBitvector(0)));

axiom (forall v: Set, t0: Ty :: 
  { $Is(v, TSet(t0)) } 
  $Is(v, TSet(t0))
     <==> (forall bx: Box :: 
      { Set#IsMember(v, bx) } 
      Set#IsMember(v, bx) ==> $IsBox(bx, t0)));

axiom (forall v: ISet, t0: Ty :: 
  { $Is(v, TISet(t0)) } 
  $Is(v, TISet(t0)) <==> (forall bx: Box :: { v[bx] } v[bx] ==> $IsBox(bx, t0)));

axiom (forall v: MultiSet, t0: Ty :: 
  { $Is(v, TMultiSet(t0)) } 
  $Is(v, TMultiSet(t0))
     <==> (forall bx: Box :: 
      { MultiSet#Multiplicity(v, bx) } 
      0 < MultiSet#Multiplicity(v, bx) ==> $IsBox(bx, t0)));

axiom (forall v: MultiSet, t0: Ty :: 
  { $Is(v, TMultiSet(t0)) } 
  $Is(v, TMultiSet(t0)) ==> $IsGoodMultiSet(v));

axiom (forall v: Seq, t0: Ty :: 
  { $Is(v, TSeq(t0)) } 
  $Is(v, TSeq(t0))
     <==> (forall i: int :: 
      { Seq#Index(v, i) } 
      0 <= i && i < Seq#Length(v) ==> $IsBox(Seq#Index(v, i), t0)));

axiom (forall v: Map, t0: Ty, t1: Ty :: 
  { $Is(v, TMap(t0, t1)) } 
  $Is(v, TMap(t0, t1))
     <==> (forall bx: Box :: 
      { Map#Elements(v)[bx] } { Set#IsMember(Map#Domain(v), bx) } 
      Set#IsMember(Map#Domain(v), bx)
         ==> $IsBox(Map#Elements(v)[bx], t1) && $IsBox(bx, t0)));

axiom (forall v: Map, t0: Ty, t1: Ty :: 
  { $Is(v, TMap(t0, t1)) } 
  $Is(v, TMap(t0, t1))
     ==> $Is(Map#Domain(v), TSet(t0))
       && $Is(Map#Values(v), TSet(t1))
       && $Is(Map#Items(v), TSet(Tclass._System.Tuple2(t0, t1))));

axiom (forall v: IMap, t0: Ty, t1: Ty :: 
  { $Is(v, TIMap(t0, t1)) } 
  $Is(v, TIMap(t0, t1))
     <==> (forall bx: Box :: 
      { IMap#Elements(v)[bx] } { IMap#Domain(v)[bx] } 
      IMap#Domain(v)[bx] ==> $IsBox(IMap#Elements(v)[bx], t1) && $IsBox(bx, t0)));

axiom (forall v: IMap, t0: Ty, t1: Ty :: 
  { $Is(v, TIMap(t0, t1)) } 
  $Is(v, TIMap(t0, t1))
     ==> $Is(IMap#Domain(v), TISet(t0))
       && $Is(IMap#Values(v), TISet(t1))
       && $Is(IMap#Items(v), TISet(Tclass._System.Tuple2(t0, t1))));

revealed function $IsAlloc<T>(T, Ty, Heap) : bool;

axiom (forall h: Heap, v: int :: { $IsAlloc(v, TInt, h) } $IsAlloc(v, TInt, h));

axiom (forall h: Heap, v: real :: { $IsAlloc(v, TReal, h) } $IsAlloc(v, TReal, h));

axiom (forall h: Heap, v: bool :: { $IsAlloc(v, TBool, h) } $IsAlloc(v, TBool, h));

axiom (forall h: Heap, v: char :: { $IsAlloc(v, TChar, h) } $IsAlloc(v, TChar, h));

axiom (forall h: Heap, v: ORDINAL :: 
  { $IsAlloc(v, TORDINAL, h) } 
  $IsAlloc(v, TORDINAL, h));

axiom (forall v: Bv0, h: Heap :: 
  { $IsAlloc(v, TBitvector(0), h) } 
  $IsAlloc(v, TBitvector(0), h));

axiom (forall v: Set, t0: Ty, h: Heap :: 
  { $IsAlloc(v, TSet(t0), h) } 
  $IsAlloc(v, TSet(t0), h)
     <==> (forall bx: Box :: 
      { Set#IsMember(v, bx) } 
      Set#IsMember(v, bx) ==> $IsAllocBox(bx, t0, h)));

axiom (forall v: ISet, t0: Ty, h: Heap :: 
  { $IsAlloc(v, TISet(t0), h) } 
  $IsAlloc(v, TISet(t0), h)
     <==> (forall bx: Box :: { v[bx] } v[bx] ==> $IsAllocBox(bx, t0, h)));

axiom (forall v: MultiSet, t0: Ty, h: Heap :: 
  { $IsAlloc(v, TMultiSet(t0), h) } 
  $IsAlloc(v, TMultiSet(t0), h)
     <==> (forall bx: Box :: 
      { MultiSet#Multiplicity(v, bx) } 
      0 < MultiSet#Multiplicity(v, bx) ==> $IsAllocBox(bx, t0, h)));

axiom (forall v: Seq, t0: Ty, h: Heap :: 
  { $IsAlloc(v, TSeq(t0), h) } 
  $IsAlloc(v, TSeq(t0), h)
     <==> (forall i: int :: 
      { Seq#Index(v, i) } 
      0 <= i && i < Seq#Length(v) ==> $IsAllocBox(Seq#Index(v, i), t0, h)));

axiom (forall v: Map, t0: Ty, t1: Ty, h: Heap :: 
  { $IsAlloc(v, TMap(t0, t1), h) } 
  $IsAlloc(v, TMap(t0, t1), h)
     <==> (forall bx: Box :: 
      { Map#Elements(v)[bx] } { Set#IsMember(Map#Domain(v), bx) } 
      Set#IsMember(Map#Domain(v), bx)
         ==> $IsAllocBox(Map#Elements(v)[bx], t1, h) && $IsAllocBox(bx, t0, h)));

axiom (forall v: IMap, t0: Ty, t1: Ty, h: Heap :: 
  { $IsAlloc(v, TIMap(t0, t1), h) } 
  $IsAlloc(v, TIMap(t0, t1), h)
     <==> (forall bx: Box :: 
      { IMap#Elements(v)[bx] } { IMap#Domain(v)[bx] } 
      IMap#Domain(v)[bx]
         ==> $IsAllocBox(IMap#Elements(v)[bx], t1, h) && $IsAllocBox(bx, t0, h)));

revealed function $AlwaysAllocated(Ty) : bool;

axiom (forall ty: Ty :: 
  { $AlwaysAllocated(ty) } 
  $AlwaysAllocated(ty)
     ==> (forall h: Heap, v: Box :: 
      { $IsAllocBox(v, ty, h) } 
      $IsBox(v, ty) ==> $IsAllocBox(v, ty, h)));

revealed function $OlderTag(Heap) : bool;

type ClassName;

const unique class._System.int: ClassName;

const unique class._System.bool: ClassName;

const unique class._System.set: ClassName;

const unique class._System.seq: ClassName;

const unique class._System.multiset: ClassName;

revealed function Tclass._System.object?() : Ty
uses {
// Tclass._System.object? Tag
axiom Tag(Tclass._System.object?()) == Tagclass._System.object?
   && TagFamily(Tclass._System.object?()) == tytagFamily$object;
}

revealed function Tclass._System.Tuple2(Ty, Ty) : Ty;

revealed function dtype(ref) : Ty;

revealed function TypeTuple(a: ClassName, b: ClassName) : ClassName;

revealed function TypeTupleCar(ClassName) : ClassName;

revealed function TypeTupleCdr(ClassName) : ClassName;

axiom (forall a: ClassName, b: ClassName :: 
  { TypeTuple(a, b) } 
  TypeTupleCar(TypeTuple(a, b)) == a && TypeTupleCdr(TypeTuple(a, b)) == b);

type HandleType;

revealed function SetRef_to_SetBox(s: [ref]bool) : Set;

axiom (forall s: [ref]bool, bx: Box :: 
  { Set#IsMember(SetRef_to_SetBox(s), bx) } 
  Set#IsMember(SetRef_to_SetBox(s), bx) == s[$Unbox(bx): ref]);

axiom (forall s: [ref]bool :: 
  { SetRef_to_SetBox(s) } 
  $Is(SetRef_to_SetBox(s), TSet(Tclass._System.object?())));

revealed function Apply1(Ty, Ty, Heap, HandleType, Box) : Box;

type DatatypeType;

type DtCtorId;

revealed function DatatypeCtorId(DatatypeType) : DtCtorId;

revealed function DtRank(DatatypeType) : int;

revealed function BoxRank(Box) : int;

axiom (forall d: DatatypeType :: { BoxRank($Box(d)) } BoxRank($Box(d)) == DtRank(d));

type ORDINAL = Box;

revealed function ORD#IsNat(ORDINAL) : bool;

revealed function ORD#Offset(ORDINAL) : int;

axiom (forall o: ORDINAL :: { ORD#Offset(o) } 0 <= ORD#Offset(o));

revealed function {:inline} ORD#IsLimit(o: ORDINAL) : bool
{
  ORD#Offset(o) == 0
}

revealed function {:inline} ORD#IsSucc(o: ORDINAL) : bool
{
  0 < ORD#Offset(o)
}

revealed function ORD#FromNat(int) : ORDINAL;

axiom (forall n: int :: 
  { ORD#FromNat(n) } 
  0 <= n ==> ORD#IsNat(ORD#FromNat(n)) && ORD#Offset(ORD#FromNat(n)) == n);

axiom (forall o: ORDINAL :: 
  { ORD#Offset(o) } { ORD#IsNat(o) } 
  ORD#IsNat(o) ==> o == ORD#FromNat(ORD#Offset(o)));

revealed function ORD#Less(ORDINAL, ORDINAL) : bool;

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Less(o, p) } 
  (ORD#Less(o, p) ==> o != p)
     && (ORD#IsNat(o) && !ORD#IsNat(p) ==> ORD#Less(o, p))
     && (ORD#IsNat(o) && ORD#IsNat(p)
       ==> ORD#Less(o, p) == (ORD#Offset(o) < ORD#Offset(p)))
     && (ORD#Less(o, p) && ORD#IsNat(p) ==> ORD#IsNat(o)));

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Less(o, p), ORD#Less(p, o) } 
  ORD#Less(o, p) || o == p || ORD#Less(p, o));

axiom (forall o: ORDINAL, p: ORDINAL, r: ORDINAL :: 
  { ORD#Less(o, p), ORD#Less(p, r) } { ORD#Less(o, p), ORD#Less(o, r) } 
  ORD#Less(o, p) && ORD#Less(p, r) ==> ORD#Less(o, r));

revealed function ORD#LessThanLimit(ORDINAL, ORDINAL) : bool;

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#LessThanLimit(o, p) } 
  ORD#LessThanLimit(o, p) == ORD#Less(o, p));

revealed function ORD#Plus(ORDINAL, ORDINAL) : ORDINAL;

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Plus(o, p) } 
  (ORD#IsNat(ORD#Plus(o, p)) ==> ORD#IsNat(o) && ORD#IsNat(p))
     && (ORD#IsNat(p)
       ==> ORD#IsNat(ORD#Plus(o, p)) == ORD#IsNat(o)
         && ORD#Offset(ORD#Plus(o, p)) == ORD#Offset(o) + ORD#Offset(p)));

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Plus(o, p) } 
  (o == ORD#Plus(o, p) || ORD#Less(o, ORD#Plus(o, p)))
     && (p == ORD#Plus(o, p) || ORD#Less(p, ORD#Plus(o, p))));

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Plus(o, p) } 
  (o == ORD#FromNat(0) ==> ORD#Plus(o, p) == p)
     && (p == ORD#FromNat(0) ==> ORD#Plus(o, p) == o));

revealed function ORD#Minus(ORDINAL, ORDINAL) : ORDINAL;

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Minus(o, p) } 
  ORD#IsNat(p) && ORD#Offset(p) <= ORD#Offset(o)
     ==> ORD#IsNat(ORD#Minus(o, p)) == ORD#IsNat(o)
       && ORD#Offset(ORD#Minus(o, p)) == ORD#Offset(o) - ORD#Offset(p));

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Minus(o, p) } 
  ORD#IsNat(p) && ORD#Offset(p) <= ORD#Offset(o)
     ==> (p == ORD#FromNat(0) && ORD#Minus(o, p) == o)
       || (p != ORD#FromNat(0) && ORD#Less(ORD#Minus(o, p), o)));

axiom (forall o: ORDINAL, m: int, n: int :: 
  { ORD#Plus(ORD#Plus(o, ORD#FromNat(m)), ORD#FromNat(n)) } 
  0 <= m && 0 <= n
     ==> ORD#Plus(ORD#Plus(o, ORD#FromNat(m)), ORD#FromNat(n))
       == ORD#Plus(o, ORD#FromNat(m + n)));

axiom (forall o: ORDINAL, m: int, n: int :: 
  { ORD#Minus(ORD#Minus(o, ORD#FromNat(m)), ORD#FromNat(n)) } 
  0 <= m && 0 <= n && m + n <= ORD#Offset(o)
     ==> ORD#Minus(ORD#Minus(o, ORD#FromNat(m)), ORD#FromNat(n))
       == ORD#Minus(o, ORD#FromNat(m + n)));

axiom (forall o: ORDINAL, m: int, n: int :: 
  { ORD#Minus(ORD#Plus(o, ORD#FromNat(m)), ORD#FromNat(n)) } 
  0 <= m && 0 <= n && n <= ORD#Offset(o) + m
     ==> (0 <= m - n
         ==> ORD#Minus(ORD#Plus(o, ORD#FromNat(m)), ORD#FromNat(n))
           == ORD#Plus(o, ORD#FromNat(m - n)))
       && (m - n <= 0
         ==> ORD#Minus(ORD#Plus(o, ORD#FromNat(m)), ORD#FromNat(n))
           == ORD#Minus(o, ORD#FromNat(n - m))));

axiom (forall o: ORDINAL, m: int, n: int :: 
  { ORD#Plus(ORD#Minus(o, ORD#FromNat(m)), ORD#FromNat(n)) } 
  0 <= m && 0 <= n && n <= ORD#Offset(o) + m
     ==> (0 <= m - n
         ==> ORD#Plus(ORD#Minus(o, ORD#FromNat(m)), ORD#FromNat(n))
           == ORD#Minus(o, ORD#FromNat(m - n)))
       && (m - n <= 0
         ==> ORD#Plus(ORD#Minus(o, ORD#FromNat(m)), ORD#FromNat(n))
           == ORD#Plus(o, ORD#FromNat(n - m))));

const $ModuleContextHeight: int;

const $FunctionContextHeight: int;

type LayerType;

const $LZ: LayerType;

revealed function $LS(LayerType) : LayerType;

revealed function AsFuelBottom(LayerType) : LayerType;

revealed function AtLayer<A>([LayerType]A, LayerType) : A;

axiom (forall<A> f: [LayerType]A, ly: LayerType :: 
  { AtLayer(f, ly) } 
  AtLayer(f, ly) == f[ly]);

axiom (forall<A> f: [LayerType]A, ly: LayerType :: 
  { AtLayer(f, $LS(ly)) } 
  AtLayer(f, $LS(ly)) == AtLayer(f, ly));

type Field;

revealed function FDim(Field) : int
uses {
axiom FDim(alloc) == 0;
}

revealed function IndexField(int) : Field;

axiom (forall i: int :: { IndexField(i) } FDim(IndexField(i)) == 1);

revealed function IndexField_Inverse(Field) : int;

axiom (forall i: int :: { IndexField(i) } IndexField_Inverse(IndexField(i)) == i);

revealed function MultiIndexField(Field, int) : Field;

axiom (forall f: Field, i: int :: 
  { MultiIndexField(f, i) } 
  FDim(MultiIndexField(f, i)) == FDim(f) + 1);

revealed function MultiIndexField_Inverse0(Field) : Field;

revealed function MultiIndexField_Inverse1(Field) : int;

axiom (forall f: Field, i: int :: 
  { MultiIndexField(f, i) } 
  MultiIndexField_Inverse0(MultiIndexField(f, i)) == f
     && MultiIndexField_Inverse1(MultiIndexField(f, i)) == i);

revealed function DeclType(Field) : ClassName;

type NameFamily;

revealed function DeclName(Field) : NameFamily
uses {
axiom DeclName(alloc) == allocName;
}

revealed function FieldOfDecl(ClassName, NameFamily) : Field;

axiom (forall cl: ClassName, nm: NameFamily :: 
  { FieldOfDecl(cl, nm): Field } 
  DeclType(FieldOfDecl(cl, nm): Field) == cl
     && DeclName(FieldOfDecl(cl, nm): Field) == nm);

revealed function $IsGhostField(Field) : bool
uses {
axiom $IsGhostField(alloc);
}

axiom (forall h: Heap, k: Heap :: 
  { $HeapSuccGhost(h, k) } 
  $HeapSuccGhost(h, k)
     ==> $HeapSucc(h, k)
       && (forall o: ref, f: Field :: 
        { read(k, o, f) } 
        !$IsGhostField(f) ==> read(h, o, f) == read(k, o, f)));

axiom (forall<T> h: Heap, k: Heap, v: T, t: Ty :: 
  { $HeapSucc(h, k), $IsAlloc(v, t, h) } 
  $HeapSucc(h, k) ==> $IsAlloc(v, t, h) ==> $IsAlloc(v, t, k));

axiom (forall h: Heap, k: Heap, bx: Box, t: Ty :: 
  { $HeapSucc(h, k), $IsAllocBox(bx, t, h) } 
  $HeapSucc(h, k) ==> $IsAllocBox(bx, t, h) ==> $IsAllocBox(bx, t, k));

const unique alloc: Field;

const unique allocName: NameFamily;

revealed function _System.array.Length(a: ref) : int;

axiom (forall o: ref :: { _System.array.Length(o) } 0 <= _System.array.Length(o));

revealed function Int(x: real) : int
uses {
axiom (forall x: real :: { Int(x): int } Int(x): int == int(x));
}

revealed function Real(x: int) : real
uses {
axiom (forall x: int :: { Real(x): real } Real(x): real == real(x));
}

axiom (forall i: int :: { Int(Real(i)) } Int(Real(i)) == i);

revealed function {:inline} _System.real.Floor(x: real) : int
{
  Int(x)
}

type Heap = [ref][Field]Box;

revealed function {:inline} read(H: Heap, r: ref, f: Field) : Box
{
  H[r][f]
}

revealed function {:inline} update(H: Heap, r: ref, f: Field, v: Box) : Heap
{
  H[r := H[r][f := v]]
}

revealed function $IsGoodHeap(Heap) : bool;

revealed function $IsHeapAnchor(Heap) : bool;

var $Heap: Heap where $IsGoodHeap($Heap) && $IsHeapAnchor($Heap);

const $OneHeap: Heap
uses {
axiom $IsGoodHeap($OneHeap);
}

revealed function $HeapSucc(Heap, Heap) : bool;

axiom (forall h: Heap, r: ref, f: Field, x: Box :: 
  { update(h, r, f, x) } 
  $IsGoodHeap(update(h, r, f, x)) ==> $HeapSucc(h, update(h, r, f, x)));

axiom (forall a: Heap, b: Heap, c: Heap :: 
  { $HeapSucc(a, b), $HeapSucc(b, c) } 
  a != c ==> $HeapSucc(a, b) && $HeapSucc(b, c) ==> $HeapSucc(a, c));

axiom (forall h: Heap, k: Heap :: 
  { $HeapSucc(h, k) } 
  $HeapSucc(h, k)
     ==> (forall o: ref :: 
      { read(k, o, alloc) } 
      $Unbox(read(h, o, alloc)) ==> $Unbox(read(k, o, alloc))));

revealed function $HeapSuccGhost(Heap, Heap) : bool;

procedure $YieldHavoc(this: ref, rds: Set, nw: Set);
  modifies $Heap;
  ensures (forall $o: ref, $f: Field :: 
    { read($Heap, $o, $f) } 
    $o != null && $Unbox(read(old($Heap), $o, alloc))
       ==> 
      $o == this || Set#IsMember(rds, $Box($o)) || Set#IsMember(nw, $Box($o))
       ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
  ensures $HeapSucc(old($Heap), $Heap);



procedure $IterHavoc0(this: ref, rds: Set, modi: Set);
  modifies $Heap;
  ensures (forall $o: ref, $f: Field :: 
    { read($Heap, $o, $f) } 
    $o != null && $Unbox(read(old($Heap), $o, alloc))
       ==> 
      Set#IsMember(rds, $Box($o)) && !Set#IsMember(modi, $Box($o)) && $o != this
       ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
  ensures $HeapSucc(old($Heap), $Heap);



procedure $IterHavoc1(this: ref, modi: Set, nw: Set);
  modifies $Heap;
  ensures (forall $o: ref, $f: Field :: 
    { read($Heap, $o, $f) } 
    $o != null && $Unbox(read(old($Heap), $o, alloc))
       ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)
         || $o == this
         || Set#IsMember(modi, $Box($o))
         || Set#IsMember(nw, $Box($o)));
  ensures $HeapSucc(old($Heap), $Heap);



procedure $IterCollectNewObjects(prevHeap: Heap, newHeap: Heap, this: ref, NW: Field) returns (s: Set);
  ensures (forall bx: Box :: 
    { Set#IsMember(s, bx) } 
    Set#IsMember(s, bx)
       <==> Set#IsMember($Unbox(read(newHeap, this, NW)): Set, bx)
         || (
          $Unbox(bx) != null
           && !$Unbox(read(prevHeap, $Unbox(bx): ref, alloc))
           && $Unbox(read(newHeap, $Unbox(bx): ref, alloc))));



type Set;

revealed function Set#Card(s: Set) : int;

axiom (forall s: Set :: { Set#Card(s) } 0 <= Set#Card(s));

revealed function Set#Empty() : Set;

revealed function Set#IsMember(s: Set, o: Box) : bool;

axiom (forall o: Box :: 
  { Set#IsMember(Set#Empty(), o) } 
  !Set#IsMember(Set#Empty(), o));

axiom (forall s: Set :: 
  { Set#Card(s) } 
  (Set#Card(s) == 0 <==> s == Set#Empty())
     && (Set#Card(s) != 0
       ==> (exists x: Box :: { Set#IsMember(s, x) } Set#IsMember(s, x))));

revealed function Set#UnionOne(s: Set, o: Box) : Set;

axiom (forall a: Set, x: Box, o: Box :: 
  { Set#IsMember(Set#UnionOne(a, x), o) } 
  Set#IsMember(Set#UnionOne(a, x), o) <==> o == x || Set#IsMember(a, o));

axiom (forall a: Set, x: Box :: 
  { Set#UnionOne(a, x) } 
  Set#IsMember(Set#UnionOne(a, x), x));

axiom (forall a: Set, x: Box, y: Box :: 
  { Set#UnionOne(a, x), Set#IsMember(a, y) } 
  Set#IsMember(a, y) ==> Set#IsMember(Set#UnionOne(a, x), y));

axiom (forall a: Set, x: Box :: 
  { Set#Card(Set#UnionOne(a, x)) } 
  Set#IsMember(a, x) ==> Set#Card(Set#UnionOne(a, x)) == Set#Card(a));

axiom (forall a: Set, x: Box :: 
  { Set#Card(Set#UnionOne(a, x)) } 
  !Set#IsMember(a, x) ==> Set#Card(Set#UnionOne(a, x)) == Set#Card(a) + 1);

revealed function Set#Union(a: Set, b: Set) : Set;

axiom (forall a: Set, b: Set, o: Box :: 
  { Set#IsMember(Set#Union(a, b), o) } 
  Set#IsMember(Set#Union(a, b), o) <==> Set#IsMember(a, o) || Set#IsMember(b, o));

axiom (forall a: Set, b: Set, y: Box :: 
  { Set#Union(a, b), Set#IsMember(a, y) } 
  Set#IsMember(a, y) ==> Set#IsMember(Set#Union(a, b), y));

axiom (forall a: Set, b: Set, y: Box :: 
  { Set#Union(a, b), Set#IsMember(b, y) } 
  Set#IsMember(b, y) ==> Set#IsMember(Set#Union(a, b), y));

axiom (forall a: Set, b: Set :: 
  { Set#Union(a, b) } 
  Set#Disjoint(a, b)
     ==> Set#Difference(Set#Union(a, b), a) == b
       && Set#Difference(Set#Union(a, b), b) == a);

revealed function Set#Intersection(a: Set, b: Set) : Set;

axiom (forall a: Set, b: Set, o: Box :: 
  { Set#IsMember(Set#Intersection(a, b), o) } 
  Set#IsMember(Set#Intersection(a, b), o)
     <==> Set#IsMember(a, o) && Set#IsMember(b, o));

axiom (forall a: Set, b: Set :: 
  { Set#Union(Set#Union(a, b), b) } 
  Set#Union(Set#Union(a, b), b) == Set#Union(a, b));

axiom (forall a: Set, b: Set :: 
  { Set#Union(a, Set#Union(a, b)) } 
  Set#Union(a, Set#Union(a, b)) == Set#Union(a, b));

axiom (forall a: Set, b: Set :: 
  { Set#Intersection(Set#Intersection(a, b), b) } 
  Set#Intersection(Set#Intersection(a, b), b) == Set#Intersection(a, b));

axiom (forall a: Set, b: Set :: 
  { Set#Intersection(a, Set#Intersection(a, b)) } 
  Set#Intersection(a, Set#Intersection(a, b)) == Set#Intersection(a, b));

axiom (forall a: Set, b: Set :: 
  { Set#Card(Set#Union(a, b)) } { Set#Card(Set#Intersection(a, b)) } 
  Set#Card(Set#Union(a, b)) + Set#Card(Set#Intersection(a, b))
     == Set#Card(a) + Set#Card(b));

revealed function Set#Difference(a: Set, b: Set) : Set;

axiom (forall a: Set, b: Set, o: Box :: 
  { Set#IsMember(Set#Difference(a, b), o) } 
  Set#IsMember(Set#Difference(a, b), o)
     <==> Set#IsMember(a, o) && !Set#IsMember(b, o));

axiom (forall a: Set, b: Set, y: Box :: 
  { Set#Difference(a, b), Set#IsMember(b, y) } 
  Set#IsMember(b, y) ==> !Set#IsMember(Set#Difference(a, b), y));

axiom (forall a: Set, b: Set :: 
  { Set#Card(Set#Difference(a, b)) } 
  Set#Card(Set#Difference(a, b))
         + Set#Card(Set#Difference(b, a))
         + Set#Card(Set#Intersection(a, b))
       == Set#Card(Set#Union(a, b))
     && Set#Card(Set#Difference(a, b)) == Set#Card(a) - Set#Card(Set#Intersection(a, b)));

revealed function Set#Subset(a: Set, b: Set) : bool;

axiom (forall a: Set, b: Set :: 
  { Set#Subset(a, b) } 
  Set#Subset(a, b)
     <==> (forall o: Box :: 
      { Set#IsMember(a, o) } { Set#IsMember(b, o) } 
      Set#IsMember(a, o) ==> Set#IsMember(b, o)));

revealed function Set#Equal(a: Set, b: Set) : bool;

axiom (forall a: Set, b: Set :: 
  { Set#Equal(a, b) } 
  Set#Equal(a, b)
     <==> (forall o: Box :: 
      { Set#IsMember(a, o) } { Set#IsMember(b, o) } 
      Set#IsMember(a, o) <==> Set#IsMember(b, o)));

axiom (forall a: Set, b: Set :: { Set#Equal(a, b) } Set#Equal(a, b) ==> a == b);

revealed function Set#Disjoint(a: Set, b: Set) : bool;

axiom (forall a: Set, b: Set :: 
  { Set#Disjoint(a, b) } 
  Set#Disjoint(a, b)
     <==> (forall o: Box :: 
      { Set#IsMember(a, o) } { Set#IsMember(b, o) } 
      !Set#IsMember(a, o) || !Set#IsMember(b, o)));

revealed function Set#FromBoogieMap([Box]bool) : Set;

axiom (forall m: [Box]bool, bx: Box :: 
  { Set#IsMember(Set#FromBoogieMap(m), bx) } 
  Set#IsMember(Set#FromBoogieMap(m), bx) == m[bx]);

type ISet = [Box]bool;

revealed function ISet#Empty() : ISet;

axiom (forall o: Box :: { ISet#Empty()[o] } !ISet#Empty()[o]);

revealed function ISet#FromSet(Set) : ISet;

axiom (forall s: Set, bx: Box :: 
  { ISet#FromSet(s)[bx] } 
  ISet#FromSet(s)[bx] == Set#IsMember(s, bx));

revealed function ISet#UnionOne(ISet, Box) : ISet;

axiom (forall a: ISet, x: Box, o: Box :: 
  { ISet#UnionOne(a, x)[o] } 
  ISet#UnionOne(a, x)[o] <==> o == x || a[o]);

axiom (forall a: ISet, x: Box :: { ISet#UnionOne(a, x) } ISet#UnionOne(a, x)[x]);

axiom (forall a: ISet, x: Box, y: Box :: 
  { ISet#UnionOne(a, x), a[y] } 
  a[y] ==> ISet#UnionOne(a, x)[y]);

revealed function ISet#Union(ISet, ISet) : ISet;

axiom (forall a: ISet, b: ISet, o: Box :: 
  { ISet#Union(a, b)[o] } 
  ISet#Union(a, b)[o] <==> a[o] || b[o]);

axiom (forall a: ISet, b: ISet, y: Box :: 
  { ISet#Union(a, b), a[y] } 
  a[y] ==> ISet#Union(a, b)[y]);

axiom (forall a: ISet, b: ISet, y: Box :: 
  { ISet#Union(a, b), b[y] } 
  b[y] ==> ISet#Union(a, b)[y]);

axiom (forall a: ISet, b: ISet :: 
  { ISet#Union(a, b) } 
  ISet#Disjoint(a, b)
     ==> ISet#Difference(ISet#Union(a, b), a) == b
       && ISet#Difference(ISet#Union(a, b), b) == a);

revealed function ISet#Intersection(ISet, ISet) : ISet;

axiom (forall a: ISet, b: ISet, o: Box :: 
  { ISet#Intersection(a, b)[o] } 
  ISet#Intersection(a, b)[o] <==> a[o] && b[o]);

axiom (forall a: ISet, b: ISet :: 
  { ISet#Union(ISet#Union(a, b), b) } 
  ISet#Union(ISet#Union(a, b), b) == ISet#Union(a, b));

axiom (forall a: ISet, b: ISet :: 
  { ISet#Union(a, ISet#Union(a, b)) } 
  ISet#Union(a, ISet#Union(a, b)) == ISet#Union(a, b));

axiom (forall a: ISet, b: ISet :: 
  { ISet#Intersection(ISet#Intersection(a, b), b) } 
  ISet#Intersection(ISet#Intersection(a, b), b) == ISet#Intersection(a, b));

axiom (forall a: ISet, b: ISet :: 
  { ISet#Intersection(a, ISet#Intersection(a, b)) } 
  ISet#Intersection(a, ISet#Intersection(a, b)) == ISet#Intersection(a, b));

revealed function ISet#Difference(ISet, ISet) : ISet;

axiom (forall a: ISet, b: ISet, o: Box :: 
  { ISet#Difference(a, b)[o] } 
  ISet#Difference(a, b)[o] <==> a[o] && !b[o]);

axiom (forall a: ISet, b: ISet, y: Box :: 
  { ISet#Difference(a, b), b[y] } 
  b[y] ==> !ISet#Difference(a, b)[y]);

revealed function ISet#Subset(ISet, ISet) : bool;

axiom (forall a: ISet, b: ISet :: 
  { ISet#Subset(a, b) } 
  ISet#Subset(a, b) <==> (forall o: Box :: { a[o] } { b[o] } a[o] ==> b[o]));

revealed function ISet#Equal(ISet, ISet) : bool;

axiom (forall a: ISet, b: ISet :: 
  { ISet#Equal(a, b) } 
  ISet#Equal(a, b) <==> (forall o: Box :: { a[o] } { b[o] } a[o] <==> b[o]));

axiom (forall a: ISet, b: ISet :: { ISet#Equal(a, b) } ISet#Equal(a, b) ==> a == b);

revealed function ISet#Disjoint(ISet, ISet) : bool;

axiom (forall a: ISet, b: ISet :: 
  { ISet#Disjoint(a, b) } 
  ISet#Disjoint(a, b) <==> (forall o: Box :: { a[o] } { b[o] } !a[o] || !b[o]));

revealed function Math#min(a: int, b: int) : int;

axiom (forall a: int, b: int :: { Math#min(a, b) } a <= b <==> Math#min(a, b) == a);

axiom (forall a: int, b: int :: { Math#min(a, b) } b <= a <==> Math#min(a, b) == b);

axiom (forall a: int, b: int :: 
  { Math#min(a, b) } 
  Math#min(a, b) == a || Math#min(a, b) == b);

revealed function Math#clip(a: int) : int;

axiom (forall a: int :: { Math#clip(a) } 0 <= a ==> Math#clip(a) == a);

axiom (forall a: int :: { Math#clip(a) } a < 0 ==> Math#clip(a) == 0);

type MultiSet;

revealed function MultiSet#Multiplicity(m: MultiSet, o: Box) : int;

revealed function MultiSet#UpdateMultiplicity(m: MultiSet, o: Box, n: int) : MultiSet;

axiom (forall m: MultiSet, o: Box, n: int, p: Box :: 
  { MultiSet#Multiplicity(MultiSet#UpdateMultiplicity(m, o, n), p) } 
  0 <= n
     ==> (o == p ==> MultiSet#Multiplicity(MultiSet#UpdateMultiplicity(m, o, n), p) == n)
       && (o != p
         ==> MultiSet#Multiplicity(MultiSet#UpdateMultiplicity(m, o, n), p)
           == MultiSet#Multiplicity(m, p)));

revealed function $IsGoodMultiSet(ms: MultiSet) : bool;

axiom (forall ms: MultiSet :: 
  { $IsGoodMultiSet(ms) } 
  $IsGoodMultiSet(ms)
     <==> (forall bx: Box :: 
      { MultiSet#Multiplicity(ms, bx) } 
      0 <= MultiSet#Multiplicity(ms, bx)
         && MultiSet#Multiplicity(ms, bx) <= MultiSet#Card(ms)));

revealed function MultiSet#Card(m: MultiSet) : int;

axiom (forall s: MultiSet :: { MultiSet#Card(s) } 0 <= MultiSet#Card(s));

axiom (forall s: MultiSet, x: Box, n: int :: 
  { MultiSet#Card(MultiSet#UpdateMultiplicity(s, x, n)) } 
  0 <= n
     ==> MultiSet#Card(MultiSet#UpdateMultiplicity(s, x, n))
       == MultiSet#Card(s) - MultiSet#Multiplicity(s, x) + n);

revealed function MultiSet#Empty() : MultiSet;

axiom (forall o: Box :: 
  { MultiSet#Multiplicity(MultiSet#Empty(), o) } 
  MultiSet#Multiplicity(MultiSet#Empty(), o) == 0);

axiom (forall s: MultiSet :: 
  { MultiSet#Card(s) } 
  (MultiSet#Card(s) == 0 <==> s == MultiSet#Empty())
     && (MultiSet#Card(s) != 0
       ==> (exists x: Box :: 
        { MultiSet#Multiplicity(s, x) } 
        0 < MultiSet#Multiplicity(s, x))));

revealed function MultiSet#Singleton(o: Box) : MultiSet;

axiom (forall r: Box, o: Box :: 
  { MultiSet#Multiplicity(MultiSet#Singleton(r), o) } 
  (MultiSet#Multiplicity(MultiSet#Singleton(r), o) == 1 <==> r == o)
     && (MultiSet#Multiplicity(MultiSet#Singleton(r), o) == 0 <==> r != o));

axiom (forall r: Box :: 
  { MultiSet#Singleton(r) } 
  MultiSet#Singleton(r) == MultiSet#UnionOne(MultiSet#Empty(), r));

revealed function MultiSet#UnionOne(m: MultiSet, o: Box) : MultiSet;

axiom (forall a: MultiSet, x: Box, o: Box :: 
  { MultiSet#Multiplicity(MultiSet#UnionOne(a, x), o) } 
  0 < MultiSet#Multiplicity(MultiSet#UnionOne(a, x), o)
     <==> o == x || 0 < MultiSet#Multiplicity(a, o));

axiom (forall a: MultiSet, x: Box :: 
  { MultiSet#UnionOne(a, x) } 
  MultiSet#Multiplicity(MultiSet#UnionOne(a, x), x)
     == MultiSet#Multiplicity(a, x) + 1);

axiom (forall a: MultiSet, x: Box, y: Box :: 
  { MultiSet#UnionOne(a, x), MultiSet#Multiplicity(a, y) } 
  0 < MultiSet#Multiplicity(a, y)
     ==> 0 < MultiSet#Multiplicity(MultiSet#UnionOne(a, x), y));

axiom (forall a: MultiSet, x: Box, y: Box :: 
  { MultiSet#UnionOne(a, x), MultiSet#Multiplicity(a, y) } 
  x != y
     ==> MultiSet#Multiplicity(a, y) == MultiSet#Multiplicity(MultiSet#UnionOne(a, x), y));

axiom (forall a: MultiSet, x: Box :: 
  { MultiSet#Card(MultiSet#UnionOne(a, x)) } 
  MultiSet#Card(MultiSet#UnionOne(a, x)) == MultiSet#Card(a) + 1);

revealed function MultiSet#Union(a: MultiSet, b: MultiSet) : MultiSet;

axiom (forall a: MultiSet, b: MultiSet, o: Box :: 
  { MultiSet#Multiplicity(MultiSet#Union(a, b), o) } 
  MultiSet#Multiplicity(MultiSet#Union(a, b), o)
     == MultiSet#Multiplicity(a, o) + MultiSet#Multiplicity(b, o));

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Card(MultiSet#Union(a, b)) } 
  MultiSet#Card(MultiSet#Union(a, b)) == MultiSet#Card(a) + MultiSet#Card(b));

revealed function MultiSet#Intersection(a: MultiSet, b: MultiSet) : MultiSet;

axiom (forall a: MultiSet, b: MultiSet, o: Box :: 
  { MultiSet#Multiplicity(MultiSet#Intersection(a, b), o) } 
  MultiSet#Multiplicity(MultiSet#Intersection(a, b), o)
     == Math#min(MultiSet#Multiplicity(a, o), MultiSet#Multiplicity(b, o)));

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Intersection(MultiSet#Intersection(a, b), b) } 
  MultiSet#Intersection(MultiSet#Intersection(a, b), b)
     == MultiSet#Intersection(a, b));

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Intersection(a, MultiSet#Intersection(a, b)) } 
  MultiSet#Intersection(a, MultiSet#Intersection(a, b))
     == MultiSet#Intersection(a, b));

revealed function MultiSet#Difference(a: MultiSet, b: MultiSet) : MultiSet;

axiom (forall a: MultiSet, b: MultiSet, o: Box :: 
  { MultiSet#Multiplicity(MultiSet#Difference(a, b), o) } 
  MultiSet#Multiplicity(MultiSet#Difference(a, b), o)
     == Math#clip(MultiSet#Multiplicity(a, o) - MultiSet#Multiplicity(b, o)));

axiom (forall a: MultiSet, b: MultiSet, y: Box :: 
  { MultiSet#Difference(a, b), MultiSet#Multiplicity(b, y), MultiSet#Multiplicity(a, y) } 
  MultiSet#Multiplicity(a, y) <= MultiSet#Multiplicity(b, y)
     ==> MultiSet#Multiplicity(MultiSet#Difference(a, b), y) == 0);

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Card(MultiSet#Difference(a, b)) } 
  MultiSet#Card(MultiSet#Difference(a, b))
         + MultiSet#Card(MultiSet#Difference(b, a))
         + 2 * MultiSet#Card(MultiSet#Intersection(a, b))
       == MultiSet#Card(MultiSet#Union(a, b))
     && MultiSet#Card(MultiSet#Difference(a, b))
       == MultiSet#Card(a) - MultiSet#Card(MultiSet#Intersection(a, b)));

revealed function MultiSet#Subset(a: MultiSet, b: MultiSet) : bool;

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Subset(a, b) } 
  MultiSet#Subset(a, b)
     <==> (forall o: Box :: 
      { MultiSet#Multiplicity(a, o) } { MultiSet#Multiplicity(b, o) } 
      MultiSet#Multiplicity(a, o) <= MultiSet#Multiplicity(b, o)));

revealed function MultiSet#Equal(a: MultiSet, b: MultiSet) : bool;

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Equal(a, b) } 
  MultiSet#Equal(a, b)
     <==> (forall o: Box :: 
      { MultiSet#Multiplicity(a, o) } { MultiSet#Multiplicity(b, o) } 
      MultiSet#Multiplicity(a, o) == MultiSet#Multiplicity(b, o)));

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Equal(a, b) } 
  MultiSet#Equal(a, b) ==> a == b);

revealed function MultiSet#Disjoint(a: MultiSet, b: MultiSet) : bool;

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Disjoint(a, b) } 
  MultiSet#Disjoint(a, b)
     <==> (forall o: Box :: 
      { MultiSet#Multiplicity(a, o) } { MultiSet#Multiplicity(b, o) } 
      MultiSet#Multiplicity(a, o) == 0 || MultiSet#Multiplicity(b, o) == 0));

revealed function MultiSet#FromSet(s: Set) : MultiSet;

axiom (forall s: Set, a: Box :: 
  { MultiSet#Multiplicity(MultiSet#FromSet(s), a) } 
  (MultiSet#Multiplicity(MultiSet#FromSet(s), a) == 0 <==> !Set#IsMember(s, a))
     && (MultiSet#Multiplicity(MultiSet#FromSet(s), a) == 1 <==> Set#IsMember(s, a)));

axiom (forall s: Set :: 
  { MultiSet#Card(MultiSet#FromSet(s)) } 
  MultiSet#Card(MultiSet#FromSet(s)) == Set#Card(s));

revealed function MultiSet#FromSeq(s: Seq) : MultiSet
uses {
axiom MultiSet#FromSeq(Seq#Empty()) == MultiSet#Empty();
}

axiom (forall s: Seq :: { MultiSet#FromSeq(s) } $IsGoodMultiSet(MultiSet#FromSeq(s)));

axiom (forall s: Seq :: 
  { MultiSet#Card(MultiSet#FromSeq(s)) } 
  MultiSet#Card(MultiSet#FromSeq(s)) == Seq#Length(s));

axiom (forall s: Seq, v: Box :: 
  { MultiSet#FromSeq(Seq#Build(s, v)) } 
  MultiSet#FromSeq(Seq#Build(s, v)) == MultiSet#UnionOne(MultiSet#FromSeq(s), v));

axiom (forall a: Seq, b: Seq :: 
  { MultiSet#FromSeq(Seq#Append(a, b)) } 
  MultiSet#FromSeq(Seq#Append(a, b))
     == MultiSet#Union(MultiSet#FromSeq(a), MultiSet#FromSeq(b)));

axiom (forall s: Seq, i: int, v: Box, x: Box :: 
  { MultiSet#Multiplicity(MultiSet#FromSeq(Seq#Update(s, i, v)), x) } 
  0 <= i && i < Seq#Length(s)
     ==> MultiSet#Multiplicity(MultiSet#FromSeq(Seq#Update(s, i, v)), x)
       == MultiSet#Multiplicity(MultiSet#Union(MultiSet#Difference(MultiSet#FromSeq(s), MultiSet#Singleton(Seq#Index(s, i))), 
          MultiSet#Singleton(v)), 
        x));

axiom (forall s: Seq, x: Box :: 
  { MultiSet#Multiplicity(MultiSet#FromSeq(s), x) } 
  (exists i: int :: 
      { Seq#Index(s, i) } 
      0 <= i && i < Seq#Length(s) && x == Seq#Index(s, i))
     <==> 0 < MultiSet#Multiplicity(MultiSet#FromSeq(s), x));

type Seq;

revealed function Seq#Length(s: Seq) : int;

axiom (forall s: Seq :: { Seq#Length(s) } 0 <= Seq#Length(s));

revealed function Seq#Empty() : Seq
uses {
axiom Seq#Length(Seq#Empty()) == 0;
}

axiom (forall s: Seq :: { Seq#Length(s) } Seq#Length(s) == 0 ==> s == Seq#Empty());

revealed function Seq#Build(s: Seq, val: Box) : Seq;

revealed function Seq#Build_inv0(s: Seq) : Seq;

revealed function Seq#Build_inv1(s: Seq) : Box;

axiom (forall s: Seq, val: Box :: 
  { Seq#Build(s, val) } 
  Seq#Build_inv0(Seq#Build(s, val)) == s
     && Seq#Build_inv1(Seq#Build(s, val)) == val);

axiom (forall s: Seq, v: Box :: 
  { Seq#Build(s, v) } 
  Seq#Length(Seq#Build(s, v)) == 1 + Seq#Length(s));

axiom (forall s: Seq, i: int, v: Box :: 
  { Seq#Index(Seq#Build(s, v), i) } 
  (i == Seq#Length(s) ==> Seq#Index(Seq#Build(s, v), i) == v)
     && (i != Seq#Length(s) ==> Seq#Index(Seq#Build(s, v), i) == Seq#Index(s, i)));

axiom (forall s0: Seq, s1: Seq :: 
  { Seq#Length(Seq#Append(s0, s1)) } 
  Seq#Length(Seq#Append(s0, s1)) == Seq#Length(s0) + Seq#Length(s1));

revealed function Seq#Index(s: Seq, i: int) : Box;

axiom (forall s0: Seq, s1: Seq, n: int :: 
  { Seq#Index(Seq#Append(s0, s1), n) } 
  (n < Seq#Length(s0) ==> Seq#Index(Seq#Append(s0, s1), n) == Seq#Index(s0, n))
     && (Seq#Length(s0) <= n
       ==> Seq#Index(Seq#Append(s0, s1), n) == Seq#Index(s1, n - Seq#Length(s0))));

revealed function Seq#Update(s: Seq, i: int, val: Box) : Seq;

axiom (forall s: Seq, i: int, v: Box :: 
  { Seq#Length(Seq#Update(s, i, v)) } 
  0 <= i && i < Seq#Length(s) ==> Seq#Length(Seq#Update(s, i, v)) == Seq#Length(s));

axiom (forall s: Seq, i: int, v: Box, n: int :: 
  { Seq#Index(Seq#Update(s, i, v), n) } 
  0 <= n && n < Seq#Length(s)
     ==> (i == n ==> Seq#Index(Seq#Update(s, i, v), n) == v)
       && (i != n ==> Seq#Index(Seq#Update(s, i, v), n) == Seq#Index(s, n)));

revealed function Seq#Append(s0: Seq, s1: Seq) : Seq;

revealed function Seq#Contains(s: Seq, val: Box) : bool;

axiom (forall s: Seq, x: Box :: 
  { Seq#Contains(s, x) } 
  Seq#Contains(s, x)
     <==> (exists i: int :: 
      { Seq#Index(s, i) } 
      0 <= i && i < Seq#Length(s) && Seq#Index(s, i) == x));

axiom (forall x: Box :: 
  { Seq#Contains(Seq#Empty(), x) } 
  !Seq#Contains(Seq#Empty(), x));

axiom (forall s0: Seq, s1: Seq, x: Box :: 
  { Seq#Contains(Seq#Append(s0, s1), x) } 
  Seq#Contains(Seq#Append(s0, s1), x)
     <==> Seq#Contains(s0, x) || Seq#Contains(s1, x));

axiom (forall s: Seq, v: Box, x: Box :: 
  { Seq#Contains(Seq#Build(s, v), x) } 
  Seq#Contains(Seq#Build(s, v), x) <==> v == x || Seq#Contains(s, x));

axiom (forall s: Seq, n: int, x: Box :: 
  { Seq#Contains(Seq#Take(s, n), x) } 
  Seq#Contains(Seq#Take(s, n), x)
     <==> (exists i: int :: 
      { Seq#Index(s, i) } 
      0 <= i && i < n && i < Seq#Length(s) && Seq#Index(s, i) == x));

axiom (forall s: Seq, n: int, x: Box :: 
  { Seq#Contains(Seq#Drop(s, n), x) } 
  Seq#Contains(Seq#Drop(s, n), x)
     <==> (exists i: int :: 
      { Seq#Index(s, i) } 
      0 <= n && n <= i && i < Seq#Length(s) && Seq#Index(s, i) == x));

revealed function Seq#Equal(s0: Seq, s1: Seq) : bool;

axiom (forall s0: Seq, s1: Seq :: 
  { Seq#Equal(s0, s1) } 
  Seq#Equal(s0, s1)
     <==> Seq#Length(s0) == Seq#Length(s1)
       && (forall j: int :: 
        { Seq#Index(s0, j) } { Seq#Index(s1, j) } 
        0 <= j && j < Seq#Length(s0) ==> Seq#Index(s0, j) == Seq#Index(s1, j)));

axiom (forall a: Seq, b: Seq :: { Seq#Equal(a, b) } Seq#Equal(a, b) ==> a == b);

revealed function Seq#SameUntil(s0: Seq, s1: Seq, n: int) : bool;

axiom (forall s0: Seq, s1: Seq, n: int :: 
  { Seq#SameUntil(s0, s1, n) } 
  Seq#SameUntil(s0, s1, n)
     <==> (forall j: int :: 
      { Seq#Index(s0, j) } { Seq#Index(s1, j) } 
      0 <= j && j < n ==> Seq#Index(s0, j) == Seq#Index(s1, j)));

revealed function Seq#Take(s: Seq, howMany: int) : Seq;

axiom (forall s: Seq, n: int :: 
  { Seq#Length(Seq#Take(s, n)) } 
  0 <= n && n <= Seq#Length(s) ==> Seq#Length(Seq#Take(s, n)) == n);

axiom (forall s: Seq, n: int, j: int :: 
  {:weight 25} { Seq#Index(Seq#Take(s, n), j) } { Seq#Index(s, j), Seq#Take(s, n) } 
  0 <= j && j < n && j < Seq#Length(s)
     ==> Seq#Index(Seq#Take(s, n), j) == Seq#Index(s, j));

revealed function Seq#Drop(s: Seq, howMany: int) : Seq;

axiom (forall s: Seq, n: int :: 
  { Seq#Length(Seq#Drop(s, n)) } 
  0 <= n && n <= Seq#Length(s) ==> Seq#Length(Seq#Drop(s, n)) == Seq#Length(s) - n);

axiom (forall s: Seq, n: int, j: int :: 
  {:weight 25} { Seq#Index(Seq#Drop(s, n), j) } 
  0 <= n && 0 <= j && j < Seq#Length(s) - n
     ==> Seq#Index(Seq#Drop(s, n), j) == Seq#Index(s, j + n));

axiom (forall s: Seq, n: int, k: int :: 
  {:weight 25} { Seq#Index(s, k), Seq#Drop(s, n) } 
  0 <= n && n <= k && k < Seq#Length(s)
     ==> Seq#Index(Seq#Drop(s, n), k - n) == Seq#Index(s, k));

axiom (forall s: Seq, t: Seq, n: int :: 
  { Seq#Take(Seq#Append(s, t), n) } { Seq#Drop(Seq#Append(s, t), n) } 
  n == Seq#Length(s)
     ==> Seq#Take(Seq#Append(s, t), n) == s && Seq#Drop(Seq#Append(s, t), n) == t);

axiom (forall s: Seq, i: int, v: Box, n: int :: 
  { Seq#Take(Seq#Update(s, i, v), n) } 
  0 <= i && i < n && n <= Seq#Length(s)
     ==> Seq#Take(Seq#Update(s, i, v), n) == Seq#Update(Seq#Take(s, n), i, v));

axiom (forall s: Seq, i: int, v: Box, n: int :: 
  { Seq#Take(Seq#Update(s, i, v), n) } 
  n <= i && i < Seq#Length(s)
     ==> Seq#Take(Seq#Update(s, i, v), n) == Seq#Take(s, n));

axiom (forall s: Seq, i: int, v: Box, n: int :: 
  { Seq#Drop(Seq#Update(s, i, v), n) } 
  0 <= n && n <= i && i < Seq#Length(s)
     ==> Seq#Drop(Seq#Update(s, i, v), n) == Seq#Update(Seq#Drop(s, n), i - n, v));

axiom (forall s: Seq, i: int, v: Box, n: int :: 
  { Seq#Drop(Seq#Update(s, i, v), n) } 
  0 <= i && i < n && n <= Seq#Length(s)
     ==> Seq#Drop(Seq#Update(s, i, v), n) == Seq#Drop(s, n));

axiom (forall s: Seq, v: Box, n: int :: 
  { Seq#Drop(Seq#Build(s, v), n) } 
  0 <= n && n <= Seq#Length(s)
     ==> Seq#Drop(Seq#Build(s, v), n) == Seq#Build(Seq#Drop(s, n), v));

axiom (forall s: Seq, n: int :: { Seq#Drop(s, n) } n == 0 ==> Seq#Drop(s, n) == s);

axiom (forall s: Seq, n: int :: 
  { Seq#Take(s, n) } 
  n == 0 ==> Seq#Take(s, n) == Seq#Empty());

axiom (forall s: Seq, m: int, n: int :: 
  { Seq#Drop(Seq#Drop(s, m), n) } 
  0 <= m && 0 <= n && m + n <= Seq#Length(s)
     ==> Seq#Drop(Seq#Drop(s, m), n) == Seq#Drop(s, m + n));

axiom (forall s: Seq, bx: Box, t: Ty :: 
  { $Is(Seq#Build(s, bx), TSeq(t)) } 
  $Is(s, TSeq(t)) && $IsBox(bx, t) ==> $Is(Seq#Build(s, bx), TSeq(t)));

revealed function Seq#Create(ty: Ty, heap: Heap, len: int, init: HandleType) : Seq;

axiom (forall ty: Ty, heap: Heap, len: int, init: HandleType :: 
  { Seq#Length(Seq#Create(ty, heap, len, init): Seq) } 
  $IsGoodHeap(heap) && 0 <= len
     ==> Seq#Length(Seq#Create(ty, heap, len, init): Seq) == len);

axiom (forall ty: Ty, heap: Heap, len: int, init: HandleType, i: int :: 
  { Seq#Index(Seq#Create(ty, heap, len, init), i) } 
  $IsGoodHeap(heap) && 0 <= i && i < len
     ==> Seq#Index(Seq#Create(ty, heap, len, init), i)
       == Apply1(TInt, ty, heap, init, $Box(i)));

revealed function Seq#FromArray(h: Heap, a: ref) : Seq;

axiom (forall h: Heap, a: ref :: 
  { Seq#Length(Seq#FromArray(h, a)) } 
  Seq#Length(Seq#FromArray(h, a)) == _System.array.Length(a));

axiom (forall h: Heap, a: ref :: 
  { Seq#FromArray(h, a) } 
  (forall i: int :: 
    { read(h, a, IndexField(i)) } { Seq#Index(Seq#FromArray(h, a): Seq, i) } 
    0 <= i && i < Seq#Length(Seq#FromArray(h, a))
       ==> Seq#Index(Seq#FromArray(h, a), i) == read(h, a, IndexField(i))));

axiom (forall h0: Heap, h1: Heap, a: ref :: 
  { Seq#FromArray(h1, a), $HeapSucc(h0, h1) } 
  $IsGoodHeap(h0) && $IsGoodHeap(h1) && $HeapSucc(h0, h1) && h0[a] == h1[a]
     ==> Seq#FromArray(h0, a) == Seq#FromArray(h1, a));

axiom (forall h: Heap, i: int, v: Box, a: ref :: 
  { Seq#FromArray(update(h, a, IndexField(i), v), a) } 
  0 <= i && i < _System.array.Length(a)
     ==> Seq#FromArray(update(h, a, IndexField(i), v), a)
       == Seq#Update(Seq#FromArray(h, a), i, v));

axiom (forall h: Heap, a: ref, n0: int, n1: int :: 
  { Seq#Take(Seq#FromArray(h, a), n0), Seq#Take(Seq#FromArray(h, a), n1) } 
  n0 + 1 == n1 && 0 <= n0 && n1 <= _System.array.Length(a)
     ==> Seq#Take(Seq#FromArray(h, a), n1)
       == Seq#Build(Seq#Take(Seq#FromArray(h, a), n0), read(h, a, IndexField(n0): Field)));

revealed function Seq#Rank(Seq) : int;

axiom (forall s: Seq, i: int :: 
  { DtRank($Unbox(Seq#Index(s, i)): DatatypeType) } 
  0 <= i && i < Seq#Length(s)
     ==> DtRank($Unbox(Seq#Index(s, i)): DatatypeType) < Seq#Rank(s));

axiom (forall s: Seq, i: int :: 
  { Seq#Rank(Seq#Drop(s, i)) } 
  0 < i && i <= Seq#Length(s) ==> Seq#Rank(Seq#Drop(s, i)) < Seq#Rank(s));

axiom (forall s: Seq, i: int :: 
  { Seq#Rank(Seq#Take(s, i)) } 
  0 <= i && i < Seq#Length(s) ==> Seq#Rank(Seq#Take(s, i)) < Seq#Rank(s));

axiom (forall s: Seq, i: int, j: int :: 
  { Seq#Rank(Seq#Append(Seq#Take(s, i), Seq#Drop(s, j))) } 
  0 <= i && i < j && j <= Seq#Length(s)
     ==> Seq#Rank(Seq#Append(Seq#Take(s, i), Seq#Drop(s, j))) < Seq#Rank(s));

type Map;

revealed function Map#Domain(Map) : Set;

revealed function Map#Elements(Map) : [Box]Box;

revealed function Map#Card(Map) : int;

axiom (forall m: Map :: { Map#Card(m) } 0 <= Map#Card(m));

axiom (forall m: Map :: { Map#Card(m) } Map#Card(m) == 0 <==> m == Map#Empty());

axiom (forall m: Map :: 
  { Map#Domain(m) } 
  m == Map#Empty() || (exists k: Box :: Set#IsMember(Map#Domain(m), k)));

axiom (forall m: Map :: 
  { Map#Values(m) } 
  m == Map#Empty() || (exists v: Box :: Set#IsMember(Map#Values(m), v)));

axiom (forall m: Map :: 
  { Map#Items(m) } 
  m == Map#Empty()
     || (exists k: Box, v: Box :: 
      Set#IsMember(Map#Items(m), $Box(#_System._tuple#2._#Make2(k, v)))));

axiom (forall m: Map :: 
  { Set#Card(Map#Domain(m)) } { Map#Card(m) } 
  Set#Card(Map#Domain(m)) == Map#Card(m));

axiom (forall m: Map :: 
  { Set#Card(Map#Values(m)) } { Map#Card(m) } 
  Set#Card(Map#Values(m)) <= Map#Card(m));

axiom (forall m: Map :: 
  { Set#Card(Map#Items(m)) } { Map#Card(m) } 
  Set#Card(Map#Items(m)) == Map#Card(m));

revealed function Map#Values(Map) : Set;

axiom (forall m: Map, v: Box :: 
  { Set#IsMember(Map#Values(m), v) } 
  Set#IsMember(Map#Values(m), v)
     == (exists u: Box :: 
      { Set#IsMember(Map#Domain(m), u) } { Map#Elements(m)[u] } 
      Set#IsMember(Map#Domain(m), u) && v == Map#Elements(m)[u]));

revealed function Map#Items(Map) : Set;

revealed function #_System._tuple#2._#Make2(Box, Box) : DatatypeType;

revealed function _System.Tuple2._0(DatatypeType) : Box;

revealed function _System.Tuple2._1(DatatypeType) : Box;

axiom (forall m: Map, item: Box :: 
  { Set#IsMember(Map#Items(m), item) } 
  Set#IsMember(Map#Items(m), item)
     <==> Set#IsMember(Map#Domain(m), _System.Tuple2._0($Unbox(item)))
       && Map#Elements(m)[_System.Tuple2._0($Unbox(item))]
         == _System.Tuple2._1($Unbox(item)));

revealed function Map#Empty() : Map;

axiom (forall u: Box :: 
  { Set#IsMember(Map#Domain(Map#Empty(): Map), u) } 
  !Set#IsMember(Map#Domain(Map#Empty(): Map), u));

revealed function Map#Glue(Set, [Box]Box, Ty) : Map;

axiom (forall a: Set, b: [Box]Box, t: Ty :: 
  { Map#Domain(Map#Glue(a, b, t)) } 
  Map#Domain(Map#Glue(a, b, t)) == a);

axiom (forall a: Set, b: [Box]Box, t: Ty :: 
  { Map#Elements(Map#Glue(a, b, t)) } 
  Map#Elements(Map#Glue(a, b, t)) == b);

axiom (forall a: Set, b: [Box]Box, t0: Ty, t1: Ty :: 
  { Map#Glue(a, b, TMap(t0, t1)) } 
  (forall bx: Box :: Set#IsMember(a, bx) ==> $IsBox(bx, t0) && $IsBox(b[bx], t1))
     ==> $Is(Map#Glue(a, b, TMap(t0, t1)), TMap(t0, t1)));

revealed function Map#Build(Map, Box, Box) : Map;

axiom (forall m: Map, u: Box, u': Box, v: Box :: 
  { Set#IsMember(Map#Domain(Map#Build(m, u, v)), u') } 
    { Map#Elements(Map#Build(m, u, v))[u'] } 
  (u' == u
       ==> Set#IsMember(Map#Domain(Map#Build(m, u, v)), u')
         && Map#Elements(Map#Build(m, u, v))[u'] == v)
     && (u' != u
       ==> Set#IsMember(Map#Domain(Map#Build(m, u, v)), u')
           == Set#IsMember(Map#Domain(m), u')
         && Map#Elements(Map#Build(m, u, v))[u'] == Map#Elements(m)[u']));

axiom (forall m: Map, u: Box, v: Box :: 
  { Map#Card(Map#Build(m, u, v)) } 
  Set#IsMember(Map#Domain(m), u) ==> Map#Card(Map#Build(m, u, v)) == Map#Card(m));

axiom (forall m: Map, u: Box, v: Box :: 
  { Map#Card(Map#Build(m, u, v)) } 
  !Set#IsMember(Map#Domain(m), u)
     ==> Map#Card(Map#Build(m, u, v)) == Map#Card(m) + 1);

revealed function Map#Merge(Map, Map) : Map;

axiom (forall m: Map, n: Map :: 
  { Map#Domain(Map#Merge(m, n)) } 
  Map#Domain(Map#Merge(m, n)) == Set#Union(Map#Domain(m), Map#Domain(n)));

axiom (forall m: Map, n: Map, u: Box :: 
  { Map#Elements(Map#Merge(m, n))[u] } 
  Set#IsMember(Map#Domain(Map#Merge(m, n)), u)
     ==> (!Set#IsMember(Map#Domain(n), u)
         ==> Map#Elements(Map#Merge(m, n))[u] == Map#Elements(m)[u])
       && (Set#IsMember(Map#Domain(n), u)
         ==> Map#Elements(Map#Merge(m, n))[u] == Map#Elements(n)[u]));

revealed function Map#Subtract(Map, Set) : Map;

axiom (forall m: Map, s: Set :: 
  { Map#Domain(Map#Subtract(m, s)) } 
  Map#Domain(Map#Subtract(m, s)) == Set#Difference(Map#Domain(m), s));

axiom (forall m: Map, s: Set, u: Box :: 
  { Map#Elements(Map#Subtract(m, s))[u] } 
  Set#IsMember(Map#Domain(Map#Subtract(m, s)), u)
     ==> Map#Elements(Map#Subtract(m, s))[u] == Map#Elements(m)[u]);

revealed function Map#Equal(Map, Map) : bool;

axiom (forall m: Map, m': Map :: 
  { Map#Equal(m, m') } 
  Map#Equal(m, m')
     <==> (forall u: Box :: 
        Set#IsMember(Map#Domain(m), u) == Set#IsMember(Map#Domain(m'), u))
       && (forall u: Box :: 
        Set#IsMember(Map#Domain(m), u) ==> Map#Elements(m)[u] == Map#Elements(m')[u]));

axiom (forall m: Map, m': Map :: { Map#Equal(m, m') } Map#Equal(m, m') ==> m == m');

revealed function Map#Disjoint(Map, Map) : bool;

axiom (forall m: Map, m': Map :: 
  { Map#Disjoint(m, m') } 
  Map#Disjoint(m, m')
     <==> (forall o: Box :: 
      { Set#IsMember(Map#Domain(m), o) } { Set#IsMember(Map#Domain(m'), o) } 
      !Set#IsMember(Map#Domain(m), o) || !Set#IsMember(Map#Domain(m'), o)));

type IMap;

revealed function IMap#Domain(IMap) : ISet;

revealed function IMap#Elements(IMap) : [Box]Box;

axiom (forall m: IMap :: 
  { IMap#Domain(m) } 
  m == IMap#Empty() || (exists k: Box :: IMap#Domain(m)[k]));

axiom (forall m: IMap :: 
  { IMap#Values(m) } 
  m == IMap#Empty() || (exists v: Box :: IMap#Values(m)[v]));

axiom (forall m: IMap :: 
  { IMap#Items(m) } 
  m == IMap#Empty()
     || (exists k: Box, v: Box :: IMap#Items(m)[$Box(#_System._tuple#2._#Make2(k, v))]));

axiom (forall m: IMap :: 
  { IMap#Domain(m) } 
  m == IMap#Empty() <==> IMap#Domain(m) == ISet#Empty());

axiom (forall m: IMap :: 
  { IMap#Values(m) } 
  m == IMap#Empty() <==> IMap#Values(m) == ISet#Empty());

axiom (forall m: IMap :: 
  { IMap#Items(m) } 
  m == IMap#Empty() <==> IMap#Items(m) == ISet#Empty());

revealed function IMap#Values(IMap) : ISet;

axiom (forall m: IMap, v: Box :: 
  { IMap#Values(m)[v] } 
  IMap#Values(m)[v]
     == (exists u: Box :: 
      { IMap#Domain(m)[u] } { IMap#Elements(m)[u] } 
      IMap#Domain(m)[u] && v == IMap#Elements(m)[u]));

revealed function IMap#Items(IMap) : ISet;

axiom (forall m: IMap, item: Box :: 
  { IMap#Items(m)[item] } 
  IMap#Items(m)[item]
     <==> IMap#Domain(m)[_System.Tuple2._0($Unbox(item))]
       && IMap#Elements(m)[_System.Tuple2._0($Unbox(item))]
         == _System.Tuple2._1($Unbox(item)));

revealed function IMap#Empty() : IMap;

axiom (forall u: Box :: 
  { IMap#Domain(IMap#Empty(): IMap)[u] } 
  !IMap#Domain(IMap#Empty(): IMap)[u]);

revealed function IMap#Glue([Box]bool, [Box]Box, Ty) : IMap;

axiom (forall a: [Box]bool, b: [Box]Box, t: Ty :: 
  { IMap#Domain(IMap#Glue(a, b, t)) } 
  IMap#Domain(IMap#Glue(a, b, t)) == a);

axiom (forall a: [Box]bool, b: [Box]Box, t: Ty :: 
  { IMap#Elements(IMap#Glue(a, b, t)) } 
  IMap#Elements(IMap#Glue(a, b, t)) == b);

axiom (forall a: [Box]bool, b: [Box]Box, t0: Ty, t1: Ty :: 
  { IMap#Glue(a, b, TIMap(t0, t1)) } 
  (forall bx: Box :: a[bx] ==> $IsBox(bx, t0) && $IsBox(b[bx], t1))
     ==> $Is(IMap#Glue(a, b, TIMap(t0, t1)), TIMap(t0, t1)));

revealed function IMap#Build(IMap, Box, Box) : IMap;

axiom (forall m: IMap, u: Box, u': Box, v: Box :: 
  { IMap#Domain(IMap#Build(m, u, v))[u'] } 
    { IMap#Elements(IMap#Build(m, u, v))[u'] } 
  (u' == u
       ==> IMap#Domain(IMap#Build(m, u, v))[u']
         && IMap#Elements(IMap#Build(m, u, v))[u'] == v)
     && (u' != u
       ==> IMap#Domain(IMap#Build(m, u, v))[u'] == IMap#Domain(m)[u']
         && IMap#Elements(IMap#Build(m, u, v))[u'] == IMap#Elements(m)[u']));

revealed function IMap#Equal(IMap, IMap) : bool;

axiom (forall m: IMap, m': IMap :: 
  { IMap#Equal(m, m') } 
  IMap#Equal(m, m')
     <==> (forall u: Box :: IMap#Domain(m)[u] == IMap#Domain(m')[u])
       && (forall u: Box :: 
        IMap#Domain(m)[u] ==> IMap#Elements(m)[u] == IMap#Elements(m')[u]));

axiom (forall m: IMap, m': IMap :: 
  { IMap#Equal(m, m') } 
  IMap#Equal(m, m') ==> m == m');

revealed function IMap#Merge(IMap, IMap) : IMap;

axiom (forall m: IMap, n: IMap :: 
  { IMap#Domain(IMap#Merge(m, n)) } 
  IMap#Domain(IMap#Merge(m, n)) == ISet#Union(IMap#Domain(m), IMap#Domain(n)));

axiom (forall m: IMap, n: IMap, u: Box :: 
  { IMap#Elements(IMap#Merge(m, n))[u] } 
  IMap#Domain(IMap#Merge(m, n))[u]
     ==> (!IMap#Domain(n)[u]
         ==> IMap#Elements(IMap#Merge(m, n))[u] == IMap#Elements(m)[u])
       && (IMap#Domain(n)[u]
         ==> IMap#Elements(IMap#Merge(m, n))[u] == IMap#Elements(n)[u]));

revealed function IMap#Subtract(IMap, Set) : IMap;

axiom (forall m: IMap, s: Set :: 
  { IMap#Domain(IMap#Subtract(m, s)) } 
  IMap#Domain(IMap#Subtract(m, s))
     == ISet#Difference(IMap#Domain(m), ISet#FromSet(s)));

axiom (forall m: IMap, s: Set, u: Box :: 
  { IMap#Elements(IMap#Subtract(m, s))[u] } 
  IMap#Domain(IMap#Subtract(m, s))[u]
     ==> IMap#Elements(IMap#Subtract(m, s))[u] == IMap#Elements(m)[u]);

revealed function INTERNAL_add_boogie(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: 
  { INTERNAL_add_boogie(x, y): int } 
  INTERNAL_add_boogie(x, y): int == x + y);
}

revealed function INTERNAL_sub_boogie(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: 
  { INTERNAL_sub_boogie(x, y): int } 
  INTERNAL_sub_boogie(x, y): int == x - y);
}

revealed function INTERNAL_mul_boogie(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: 
  { INTERNAL_mul_boogie(x, y): int } 
  INTERNAL_mul_boogie(x, y): int == x * y);
}

revealed function INTERNAL_div_boogie(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: 
  { INTERNAL_div_boogie(x, y): int } 
  INTERNAL_div_boogie(x, y): int == x div y);
}

revealed function INTERNAL_mod_boogie(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: 
  { INTERNAL_mod_boogie(x, y): int } 
  INTERNAL_mod_boogie(x, y): int == x mod y);
}

revealed function {:never_pattern true} INTERNAL_lt_boogie(x: int, y: int) : bool
uses {
axiom (forall x: int, y: int :: 
  {:never_pattern true} { INTERNAL_lt_boogie(x, y): bool } 
  INTERNAL_lt_boogie(x, y): bool == (x < y));
}

revealed function {:never_pattern true} INTERNAL_le_boogie(x: int, y: int) : bool
uses {
axiom (forall x: int, y: int :: 
  {:never_pattern true} { INTERNAL_le_boogie(x, y): bool } 
  INTERNAL_le_boogie(x, y): bool == (x <= y));
}

revealed function {:never_pattern true} INTERNAL_gt_boogie(x: int, y: int) : bool
uses {
axiom (forall x: int, y: int :: 
  {:never_pattern true} { INTERNAL_gt_boogie(x, y): bool } 
  INTERNAL_gt_boogie(x, y): bool == (x > y));
}

revealed function {:never_pattern true} INTERNAL_ge_boogie(x: int, y: int) : bool
uses {
axiom (forall x: int, y: int :: 
  {:never_pattern true} { INTERNAL_ge_boogie(x, y): bool } 
  INTERNAL_ge_boogie(x, y): bool == (x >= y));
}

revealed function Mul(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: { Mul(x, y): int } Mul(x, y): int == x * y);
}

revealed function Div(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: { Div(x, y): int } Div(x, y): int == x div y);
}

revealed function Mod(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: { Mod(x, y): int } Mod(x, y): int == x mod y);
}

revealed function Add(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: { Add(x, y): int } Add(x, y): int == x + y);
}

revealed function Sub(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: { Sub(x, y): int } Sub(x, y): int == x - y);
}

function Tclass._System.nat() : Ty
uses {
// Tclass._System.nat Tag
axiom Tag(Tclass._System.nat()) == Tagclass._System.nat
   && TagFamily(Tclass._System.nat()) == tytagFamily$nat;
}

const unique Tagclass._System.nat: TyTag;

// Box/unbox axiom for Tclass._System.nat
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._System.nat()) } 
  $IsBox(bx, Tclass._System.nat())
     ==> $Box($Unbox(bx): int) == bx && $Is($Unbox(bx): int, Tclass._System.nat()));

// $Is axiom for subset type _System.nat
axiom (forall x#0: int :: 
  { $Is(x#0, Tclass._System.nat()) } 
  $Is(x#0, Tclass._System.nat()) <==> LitInt(0) <= x#0);

// $IsAlloc axiom for subset type _System.nat
axiom (forall x#0: int, $h: Heap :: 
  { $IsAlloc(x#0, Tclass._System.nat(), $h) } 
  $IsAlloc(x#0, Tclass._System.nat(), $h));

const unique class._System.object?: ClassName;

const unique Tagclass._System.object?: TyTag;

// Box/unbox axiom for Tclass._System.object?
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._System.object?()) } 
  $IsBox(bx, Tclass._System.object?())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._System.object?()));

// $Is axiom for trait object
axiom (forall $o: ref :: 
  { $Is($o, Tclass._System.object?()) } 
  $Is($o, Tclass._System.object?()));

// $IsAlloc axiom for trait object
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._System.object?(), $h) } 
  $IsAlloc($o, Tclass._System.object?(), $h)
     <==> $o == null || $Unbox(read($h, $o, alloc)): bool);

function implements$_System.object(ty: Ty) : bool;

function Tclass._System.object() : Ty
uses {
// Tclass._System.object Tag
axiom Tag(Tclass._System.object()) == Tagclass._System.object
   && TagFamily(Tclass._System.object()) == tytagFamily$object;
}

const unique Tagclass._System.object: TyTag;

// Box/unbox axiom for Tclass._System.object
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._System.object()) } 
  $IsBox(bx, Tclass._System.object())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._System.object()));

// $Is axiom for non-null type _System.object
axiom (forall c#0: ref :: 
  { $Is(c#0, Tclass._System.object()) } { $Is(c#0, Tclass._System.object?()) } 
  $Is(c#0, Tclass._System.object())
     <==> $Is(c#0, Tclass._System.object?()) && c#0 != null);

// $IsAlloc axiom for non-null type _System.object
axiom (forall c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._System.object(), $h) } 
    { $IsAlloc(c#0, Tclass._System.object?(), $h) } 
  $IsAlloc(c#0, Tclass._System.object(), $h)
     <==> $IsAlloc(c#0, Tclass._System.object?(), $h));

const unique class._System.array?: ClassName;

function Tclass._System.array?(Ty) : Ty;

const unique Tagclass._System.array?: TyTag;

// Tclass._System.array? Tag
axiom (forall _System.array$arg: Ty :: 
  { Tclass._System.array?(_System.array$arg) } 
  Tag(Tclass._System.array?(_System.array$arg)) == Tagclass._System.array?
     && TagFamily(Tclass._System.array?(_System.array$arg)) == tytagFamily$array);

function Tclass._System.array?_0(Ty) : Ty;

// Tclass._System.array? injectivity 0
axiom (forall _System.array$arg: Ty :: 
  { Tclass._System.array?(_System.array$arg) } 
  Tclass._System.array?_0(Tclass._System.array?(_System.array$arg))
     == _System.array$arg);

// Box/unbox axiom for Tclass._System.array?
axiom (forall _System.array$arg: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.array?(_System.array$arg)) } 
  $IsBox(bx, Tclass._System.array?(_System.array$arg))
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._System.array?(_System.array$arg)));

// array.: Type axiom
axiom (forall _System.array$arg: Ty, $h: Heap, $o: ref, $i0: int :: 
  { read($h, $o, IndexField($i0)), Tclass._System.array?(_System.array$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array?(_System.array$arg)
       && 
      0 <= $i0
       && $i0 < _System.array.Length($o)
     ==> $IsBox(read($h, $o, IndexField($i0)), _System.array$arg));

// array.: Allocation axiom
axiom (forall _System.array$arg: Ty, $h: Heap, $o: ref, $i0: int :: 
  { read($h, $o, IndexField($i0)), Tclass._System.array?(_System.array$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array?(_System.array$arg)
       && 
      0 <= $i0
       && $i0 < _System.array.Length($o)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAllocBox(read($h, $o, IndexField($i0)), _System.array$arg, $h));

// $Is axiom for array type array
axiom (forall _System.array$arg: Ty, $o: ref :: 
  { $Is($o, Tclass._System.array?(_System.array$arg)) } 
  $Is($o, Tclass._System.array?(_System.array$arg))
     <==> $o == null || dtype($o) == Tclass._System.array?(_System.array$arg));

// $IsAlloc axiom for array type array
axiom (forall _System.array$arg: Ty, $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._System.array?(_System.array$arg), $h) } 
  $IsAlloc($o, Tclass._System.array?(_System.array$arg), $h)
     <==> $o == null || $Unbox(read($h, $o, alloc)): bool);

// array.Length: Type axiom
axiom (forall _System.array$arg: Ty, $o: ref :: 
  { _System.array.Length($o), Tclass._System.array?(_System.array$arg) } 
  $o != null && dtype($o) == Tclass._System.array?(_System.array$arg)
     ==> $Is(_System.array.Length($o), TInt));

// array.Length: Allocation axiom
axiom (forall _System.array$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array.Length($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array?(_System.array$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array?(_System.array$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array.Length($o), TInt, $h));

function Tclass._System.array(Ty) : Ty;

const unique Tagclass._System.array: TyTag;

// Tclass._System.array Tag
axiom (forall _System.array$arg: Ty :: 
  { Tclass._System.array(_System.array$arg) } 
  Tag(Tclass._System.array(_System.array$arg)) == Tagclass._System.array
     && TagFamily(Tclass._System.array(_System.array$arg)) == tytagFamily$array);

function Tclass._System.array_0(Ty) : Ty;

// Tclass._System.array injectivity 0
axiom (forall _System.array$arg: Ty :: 
  { Tclass._System.array(_System.array$arg) } 
  Tclass._System.array_0(Tclass._System.array(_System.array$arg))
     == _System.array$arg);

// Box/unbox axiom for Tclass._System.array
axiom (forall _System.array$arg: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.array(_System.array$arg)) } 
  $IsBox(bx, Tclass._System.array(_System.array$arg))
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._System.array(_System.array$arg)));

// $Is axiom for non-null type _System.array
axiom (forall _System.array$arg: Ty, c#0: ref :: 
  { $Is(c#0, Tclass._System.array(_System.array$arg)) } 
    { $Is(c#0, Tclass._System.array?(_System.array$arg)) } 
  $Is(c#0, Tclass._System.array(_System.array$arg))
     <==> $Is(c#0, Tclass._System.array?(_System.array$arg)) && c#0 != null);

// $IsAlloc axiom for non-null type _System.array
axiom (forall _System.array$arg: Ty, c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._System.array(_System.array$arg), $h) } 
    { $IsAlloc(c#0, Tclass._System.array?(_System.array$arg), $h) } 
  $IsAlloc(c#0, Tclass._System.array(_System.array$arg), $h)
     <==> $IsAlloc(c#0, Tclass._System.array?(_System.array$arg), $h));

function Tclass._System.___hFunc1(Ty, Ty) : Ty;

const unique Tagclass._System.___hFunc1: TyTag;

// Tclass._System.___hFunc1 Tag
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc1(#$T0, #$R) } 
  Tag(Tclass._System.___hFunc1(#$T0, #$R)) == Tagclass._System.___hFunc1
     && TagFamily(Tclass._System.___hFunc1(#$T0, #$R)) == tytagFamily$_#Func1);

function Tclass._System.___hFunc1_0(Ty) : Ty;

// Tclass._System.___hFunc1 injectivity 0
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc1(#$T0, #$R) } 
  Tclass._System.___hFunc1_0(Tclass._System.___hFunc1(#$T0, #$R)) == #$T0);

function Tclass._System.___hFunc1_1(Ty) : Ty;

// Tclass._System.___hFunc1 injectivity 1
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc1(#$T0, #$R) } 
  Tclass._System.___hFunc1_1(Tclass._System.___hFunc1(#$T0, #$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hFunc1
axiom (forall #$T0: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hFunc1(#$T0, #$R)) } 
  $IsBox(bx, Tclass._System.___hFunc1(#$T0, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hFunc1(#$T0, #$R)));

function Handle1([Heap,Box]Box, [Heap,Box]bool, [Heap,Box]Set) : HandleType;

function Requires1(Ty, Ty, Heap, HandleType, Box) : bool;

function Reads1(Ty, Ty, Heap, HandleType, Box) : Set;

axiom (forall t0: Ty, 
    t1: Ty, 
    heap: Heap, 
    h: [Heap,Box]Box, 
    r: [Heap,Box]bool, 
    rd: [Heap,Box]Set, 
    bx0: Box :: 
  { Apply1(t0, t1, heap, Handle1(h, r, rd), bx0) } 
  Apply1(t0, t1, heap, Handle1(h, r, rd), bx0) == h[heap, bx0]);

axiom (forall t0: Ty, 
    t1: Ty, 
    heap: Heap, 
    h: [Heap,Box]Box, 
    r: [Heap,Box]bool, 
    rd: [Heap,Box]Set, 
    bx0: Box :: 
  { Requires1(t0, t1, heap, Handle1(h, r, rd), bx0) } 
  r[heap, bx0] ==> Requires1(t0, t1, heap, Handle1(h, r, rd), bx0));

axiom (forall t0: Ty, 
    t1: Ty, 
    heap: Heap, 
    h: [Heap,Box]Box, 
    r: [Heap,Box]bool, 
    rd: [Heap,Box]Set, 
    bx0: Box, 
    bx: Box :: 
  { Set#IsMember(Reads1(t0, t1, heap, Handle1(h, r, rd), bx0), bx) } 
  Set#IsMember(Reads1(t0, t1, heap, Handle1(h, r, rd), bx0), bx)
     == Set#IsMember(rd[heap, bx0], bx));

function {:inline} Requires1#canCall(t0: Ty, t1: Ty, heap: Heap, f: HandleType, bx0: Box) : bool
{
  true
}

function {:inline} Reads1#canCall(t0: Ty, t1: Ty, heap: Heap, f: HandleType, bx0: Box) : bool
{
  true
}

// frame axiom for Reads1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Reads1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads1(t0, t1, h0, f, bx0), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads1(t0, t1, h0, f, bx0) == Reads1(t0, t1, h1, f, bx0));

// frame axiom for Reads1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Reads1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads1(t0, t1, h1, f, bx0), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads1(t0, t1, h0, f, bx0) == Reads1(t0, t1, h1, f, bx0));

// frame axiom for Requires1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Requires1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads1(t0, t1, h0, f, bx0), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires1(t0, t1, h0, f, bx0) == Requires1(t0, t1, h1, f, bx0));

// frame axiom for Requires1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Requires1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads1(t0, t1, h1, f, bx0), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires1(t0, t1, h0, f, bx0) == Requires1(t0, t1, h1, f, bx0));

// frame axiom for Apply1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Apply1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads1(t0, t1, h0, f, bx0), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply1(t0, t1, h0, f, bx0) == Apply1(t0, t1, h1, f, bx0));

// frame axiom for Apply1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Apply1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads1(t0, t1, h1, f, bx0), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply1(t0, t1, h0, f, bx0) == Apply1(t0, t1, h1, f, bx0));

// empty-reads property for Reads1 
axiom (forall t0: Ty, t1: Ty, heap: Heap, f: HandleType, bx0: Box :: 
  { Reads1(t0, t1, $OneHeap, f, bx0), $IsGoodHeap(heap) } 
    { Reads1(t0, t1, heap, f, bx0) } 
  $IsGoodHeap(heap) && $IsBox(bx0, t0) && $Is(f, Tclass._System.___hFunc1(t0, t1))
     ==> (Set#Equal(Reads1(t0, t1, $OneHeap, f, bx0), Set#Empty(): Set)
       <==> Set#Equal(Reads1(t0, t1, heap, f, bx0), Set#Empty(): Set)));

// empty-reads property for Requires1
axiom (forall t0: Ty, t1: Ty, heap: Heap, f: HandleType, bx0: Box :: 
  { Requires1(t0, t1, $OneHeap, f, bx0), $IsGoodHeap(heap) } 
    { Requires1(t0, t1, heap, f, bx0) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && Set#Equal(Reads1(t0, t1, $OneHeap, f, bx0), Set#Empty(): Set)
     ==> Requires1(t0, t1, $OneHeap, f, bx0) == Requires1(t0, t1, heap, f, bx0));

axiom (forall f: HandleType, t0: Ty, t1: Ty :: 
  { $Is(f, Tclass._System.___hFunc1(t0, t1)) } 
  $Is(f, Tclass._System.___hFunc1(t0, t1))
     <==> (forall h: Heap, bx0: Box :: 
      { Apply1(t0, t1, h, f, bx0) } 
      $IsGoodHeap(h) && $IsBox(bx0, t0) && Requires1(t0, t1, h, f, bx0)
         ==> $IsBox(Apply1(t0, t1, h, f, bx0), t1)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, u0: Ty, u1: Ty :: 
  { $Is(f, Tclass._System.___hFunc1(t0, t1)), $Is(f, Tclass._System.___hFunc1(u0, u1)) } 
  $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall bx: Box :: 
        { $IsBox(bx, u0) } { $IsBox(bx, t0) } 
        $IsBox(bx, u0) ==> $IsBox(bx, t0))
       && (forall bx: Box :: 
        { $IsBox(bx, t1) } { $IsBox(bx, u1) } 
        $IsBox(bx, t1) ==> $IsBox(bx, u1))
     ==> $Is(f, Tclass._System.___hFunc1(u0, u1)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc1(t0, t1), h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, Tclass._System.___hFunc1(t0, t1), h)
       <==> (forall bx0: Box :: 
        { Apply1(t0, t1, h, f, bx0) } { Reads1(t0, t1, h, f, bx0) } 
        $IsBox(bx0, t0) && $IsAllocBox(bx0, t0, h) && Requires1(t0, t1, h, f, bx0)
           ==> (forall r: ref :: 
            { Set#IsMember(Reads1(t0, t1, h, f, bx0), $Box(r)) } 
            r != null && Set#IsMember(Reads1(t0, t1, h, f, bx0), $Box(r))
               ==> $Unbox(read(h, r, alloc)): bool))));

axiom (forall f: HandleType, t0: Ty, t1: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc1(t0, t1), h) } 
  $IsGoodHeap(h) && $IsAlloc(f, Tclass._System.___hFunc1(t0, t1), h)
     ==> (forall bx0: Box :: 
      { Apply1(t0, t1, h, f, bx0) } 
      $IsAllocBox(bx0, t0, h) && Requires1(t0, t1, h, f, bx0)
         ==> $IsAllocBox(Apply1(t0, t1, h, f, bx0), t1, h)));

function Tclass._System.___hPartialFunc1(Ty, Ty) : Ty;

const unique Tagclass._System.___hPartialFunc1: TyTag;

// Tclass._System.___hPartialFunc1 Tag
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc1(#$T0, #$R) } 
  Tag(Tclass._System.___hPartialFunc1(#$T0, #$R))
       == Tagclass._System.___hPartialFunc1
     && TagFamily(Tclass._System.___hPartialFunc1(#$T0, #$R))
       == tytagFamily$_#PartialFunc1);

function Tclass._System.___hPartialFunc1_0(Ty) : Ty;

// Tclass._System.___hPartialFunc1 injectivity 0
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc1(#$T0, #$R) } 
  Tclass._System.___hPartialFunc1_0(Tclass._System.___hPartialFunc1(#$T0, #$R))
     == #$T0);

function Tclass._System.___hPartialFunc1_1(Ty) : Ty;

// Tclass._System.___hPartialFunc1 injectivity 1
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc1(#$T0, #$R) } 
  Tclass._System.___hPartialFunc1_1(Tclass._System.___hPartialFunc1(#$T0, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hPartialFunc1
axiom (forall #$T0: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hPartialFunc1(#$T0, #$R)) } 
  $IsBox(bx, Tclass._System.___hPartialFunc1(#$T0, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hPartialFunc1(#$T0, #$R)));

// $Is axiom for subset type _System._#PartialFunc1
axiom (forall #$T0: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R)) } 
  $Is(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R))
     <==> $Is(f#0, Tclass._System.___hFunc1(#$T0, #$R))
       && (forall x0#0: Box :: 
        $IsBox(x0#0, #$T0)
           ==> Set#Equal(Reads1(#$T0, #$R, $OneHeap, f#0, x0#0), Set#Empty(): Set)));

// $IsAlloc axiom for subset type _System._#PartialFunc1
axiom (forall #$T0: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hFunc1(#$T0, #$R), $h));

function Tclass._System.___hTotalFunc1(Ty, Ty) : Ty;

const unique Tagclass._System.___hTotalFunc1: TyTag;

// Tclass._System.___hTotalFunc1 Tag
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc1(#$T0, #$R) } 
  Tag(Tclass._System.___hTotalFunc1(#$T0, #$R)) == Tagclass._System.___hTotalFunc1
     && TagFamily(Tclass._System.___hTotalFunc1(#$T0, #$R)) == tytagFamily$_#TotalFunc1);

function Tclass._System.___hTotalFunc1_0(Ty) : Ty;

// Tclass._System.___hTotalFunc1 injectivity 0
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc1(#$T0, #$R) } 
  Tclass._System.___hTotalFunc1_0(Tclass._System.___hTotalFunc1(#$T0, #$R))
     == #$T0);

function Tclass._System.___hTotalFunc1_1(Ty) : Ty;

// Tclass._System.___hTotalFunc1 injectivity 1
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc1(#$T0, #$R) } 
  Tclass._System.___hTotalFunc1_1(Tclass._System.___hTotalFunc1(#$T0, #$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hTotalFunc1
axiom (forall #$T0: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hTotalFunc1(#$T0, #$R)) } 
  $IsBox(bx, Tclass._System.___hTotalFunc1(#$T0, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hTotalFunc1(#$T0, #$R)));

// $Is axiom for subset type _System._#TotalFunc1
axiom (forall #$T0: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hTotalFunc1(#$T0, #$R)) } 
  $Is(f#0, Tclass._System.___hTotalFunc1(#$T0, #$R))
     <==> $Is(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R))
       && (forall x0#0: Box :: 
        $IsBox(x0#0, #$T0) ==> Requires1(#$T0, #$R, $OneHeap, f#0, x0#0)));

// $IsAlloc axiom for subset type _System._#TotalFunc1
axiom (forall #$T0: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hTotalFunc1(#$T0, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hTotalFunc1(#$T0, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R), $h));

function Tclass._System.___hFunc0(Ty) : Ty;

const unique Tagclass._System.___hFunc0: TyTag;

// Tclass._System.___hFunc0 Tag
axiom (forall #$R: Ty :: 
  { Tclass._System.___hFunc0(#$R) } 
  Tag(Tclass._System.___hFunc0(#$R)) == Tagclass._System.___hFunc0
     && TagFamily(Tclass._System.___hFunc0(#$R)) == tytagFamily$_#Func0);

function Tclass._System.___hFunc0_0(Ty) : Ty;

// Tclass._System.___hFunc0 injectivity 0
axiom (forall #$R: Ty :: 
  { Tclass._System.___hFunc0(#$R) } 
  Tclass._System.___hFunc0_0(Tclass._System.___hFunc0(#$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hFunc0
axiom (forall #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hFunc0(#$R)) } 
  $IsBox(bx, Tclass._System.___hFunc0(#$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hFunc0(#$R)));

function Handle0([Heap]Box, [Heap]bool, [Heap]Set) : HandleType;

function Apply0(Ty, Heap, HandleType) : Box;

function Requires0(Ty, Heap, HandleType) : bool;

function Reads0(Ty, Heap, HandleType) : Set;

axiom (forall t0: Ty, heap: Heap, h: [Heap]Box, r: [Heap]bool, rd: [Heap]Set :: 
  { Apply0(t0, heap, Handle0(h, r, rd)) } 
  Apply0(t0, heap, Handle0(h, r, rd)) == h[heap]);

axiom (forall t0: Ty, heap: Heap, h: [Heap]Box, r: [Heap]bool, rd: [Heap]Set :: 
  { Requires0(t0, heap, Handle0(h, r, rd)) } 
  r[heap] ==> Requires0(t0, heap, Handle0(h, r, rd)));

axiom (forall t0: Ty, heap: Heap, h: [Heap]Box, r: [Heap]bool, rd: [Heap]Set, bx: Box :: 
  { Set#IsMember(Reads0(t0, heap, Handle0(h, r, rd)), bx) } 
  Set#IsMember(Reads0(t0, heap, Handle0(h, r, rd)), bx)
     == Set#IsMember(rd[heap], bx));

function {:inline} Requires0#canCall(t0: Ty, heap: Heap, f: HandleType) : bool
{
  true
}

function {:inline} Reads0#canCall(t0: Ty, heap: Heap, f: HandleType) : bool
{
  true
}

// frame axiom for Reads0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Reads0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads0(t0, h0, f), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads0(t0, h0, f) == Reads0(t0, h1, f));

// frame axiom for Reads0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Reads0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads0(t0, h1, f), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads0(t0, h0, f) == Reads0(t0, h1, f));

// frame axiom for Requires0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Requires0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads0(t0, h0, f), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires0(t0, h0, f) == Requires0(t0, h1, f));

// frame axiom for Requires0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Requires0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads0(t0, h1, f), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires0(t0, h0, f) == Requires0(t0, h1, f));

// frame axiom for Apply0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Apply0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads0(t0, h0, f), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply0(t0, h0, f) == Apply0(t0, h1, f));

// frame axiom for Apply0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Apply0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads0(t0, h1, f), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply0(t0, h0, f) == Apply0(t0, h1, f));

// empty-reads property for Reads0 
axiom (forall t0: Ty, heap: Heap, f: HandleType :: 
  { Reads0(t0, $OneHeap, f), $IsGoodHeap(heap) } { Reads0(t0, heap, f) } 
  $IsGoodHeap(heap) && $Is(f, Tclass._System.___hFunc0(t0))
     ==> (Set#Equal(Reads0(t0, $OneHeap, f), Set#Empty(): Set)
       <==> Set#Equal(Reads0(t0, heap, f), Set#Empty(): Set)));

// empty-reads property for Requires0
axiom (forall t0: Ty, heap: Heap, f: HandleType :: 
  { Requires0(t0, $OneHeap, f), $IsGoodHeap(heap) } { Requires0(t0, heap, f) } 
  $IsGoodHeap(heap)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && Set#Equal(Reads0(t0, $OneHeap, f), Set#Empty(): Set)
     ==> Requires0(t0, $OneHeap, f) == Requires0(t0, heap, f));

axiom (forall f: HandleType, t0: Ty :: 
  { $Is(f, Tclass._System.___hFunc0(t0)) } 
  $Is(f, Tclass._System.___hFunc0(t0))
     <==> (forall h: Heap :: 
      { Apply0(t0, h, f) } 
      $IsGoodHeap(h) && Requires0(t0, h, f) ==> $IsBox(Apply0(t0, h, f), t0)));

axiom (forall f: HandleType, t0: Ty, u0: Ty :: 
  { $Is(f, Tclass._System.___hFunc0(t0)), $Is(f, Tclass._System.___hFunc0(u0)) } 
  $Is(f, Tclass._System.___hFunc0(t0))
       && (forall bx: Box :: 
        { $IsBox(bx, t0) } { $IsBox(bx, u0) } 
        $IsBox(bx, t0) ==> $IsBox(bx, u0))
     ==> $Is(f, Tclass._System.___hFunc0(u0)));

axiom (forall f: HandleType, t0: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc0(t0), h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, Tclass._System.___hFunc0(t0), h)
       <==> Requires0(t0, h, f)
         ==> (forall r: ref :: 
          { Set#IsMember(Reads0(t0, h, f), $Box(r)) } 
          r != null && Set#IsMember(Reads0(t0, h, f), $Box(r))
             ==> $Unbox(read(h, r, alloc)): bool)));

axiom (forall f: HandleType, t0: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc0(t0), h) } 
  $IsGoodHeap(h) && $IsAlloc(f, Tclass._System.___hFunc0(t0), h)
     ==> 
    Requires0(t0, h, f)
     ==> $IsAllocBox(Apply0(t0, h, f), t0, h));

function Tclass._System.___hPartialFunc0(Ty) : Ty;

const unique Tagclass._System.___hPartialFunc0: TyTag;

// Tclass._System.___hPartialFunc0 Tag
axiom (forall #$R: Ty :: 
  { Tclass._System.___hPartialFunc0(#$R) } 
  Tag(Tclass._System.___hPartialFunc0(#$R)) == Tagclass._System.___hPartialFunc0
     && TagFamily(Tclass._System.___hPartialFunc0(#$R)) == tytagFamily$_#PartialFunc0);

function Tclass._System.___hPartialFunc0_0(Ty) : Ty;

// Tclass._System.___hPartialFunc0 injectivity 0
axiom (forall #$R: Ty :: 
  { Tclass._System.___hPartialFunc0(#$R) } 
  Tclass._System.___hPartialFunc0_0(Tclass._System.___hPartialFunc0(#$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hPartialFunc0
axiom (forall #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hPartialFunc0(#$R)) } 
  $IsBox(bx, Tclass._System.___hPartialFunc0(#$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hPartialFunc0(#$R)));

// $Is axiom for subset type _System._#PartialFunc0
axiom (forall #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hPartialFunc0(#$R)) } 
  $Is(f#0, Tclass._System.___hPartialFunc0(#$R))
     <==> $Is(f#0, Tclass._System.___hFunc0(#$R))
       && Set#Equal(Reads0(#$R, $OneHeap, f#0), Set#Empty(): Set));

// $IsAlloc axiom for subset type _System._#PartialFunc0
axiom (forall #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hPartialFunc0(#$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hPartialFunc0(#$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hFunc0(#$R), $h));

function Tclass._System.___hTotalFunc0(Ty) : Ty;

const unique Tagclass._System.___hTotalFunc0: TyTag;

// Tclass._System.___hTotalFunc0 Tag
axiom (forall #$R: Ty :: 
  { Tclass._System.___hTotalFunc0(#$R) } 
  Tag(Tclass._System.___hTotalFunc0(#$R)) == Tagclass._System.___hTotalFunc0
     && TagFamily(Tclass._System.___hTotalFunc0(#$R)) == tytagFamily$_#TotalFunc0);

function Tclass._System.___hTotalFunc0_0(Ty) : Ty;

// Tclass._System.___hTotalFunc0 injectivity 0
axiom (forall #$R: Ty :: 
  { Tclass._System.___hTotalFunc0(#$R) } 
  Tclass._System.___hTotalFunc0_0(Tclass._System.___hTotalFunc0(#$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hTotalFunc0
axiom (forall #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hTotalFunc0(#$R)) } 
  $IsBox(bx, Tclass._System.___hTotalFunc0(#$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hTotalFunc0(#$R)));

// $Is axiom for subset type _System._#TotalFunc0
axiom (forall #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hTotalFunc0(#$R)) } 
  $Is(f#0, Tclass._System.___hTotalFunc0(#$R))
     <==> $Is(f#0, Tclass._System.___hPartialFunc0(#$R)) && Requires0(#$R, $OneHeap, f#0));

// $IsAlloc axiom for subset type _System._#TotalFunc0
axiom (forall #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hTotalFunc0(#$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hTotalFunc0(#$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hPartialFunc0(#$R), $h));

const unique ##_System._tuple#2._#Make2: DtCtorId
uses {
// Constructor identifier
axiom (forall a#0#0#0: Box, a#0#1#0: Box :: 
  { #_System._tuple#2._#Make2(a#0#0#0, a#0#1#0) } 
  DatatypeCtorId(#_System._tuple#2._#Make2(a#0#0#0, a#0#1#0))
     == ##_System._tuple#2._#Make2);
}

function _System.Tuple2.___hMake2_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _System.Tuple2.___hMake2_q(d) } 
  _System.Tuple2.___hMake2_q(d)
     <==> DatatypeCtorId(d) == ##_System._tuple#2._#Make2);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _System.Tuple2.___hMake2_q(d) } 
  _System.Tuple2.___hMake2_q(d)
     ==> (exists a#1#0#0: Box, a#1#1#0: Box :: 
      d == #_System._tuple#2._#Make2(a#1#0#0, a#1#1#0)));

const unique Tagclass._System.Tuple2: TyTag;

// Tclass._System.Tuple2 Tag
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty :: 
  { Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1) } 
  Tag(Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
       == Tagclass._System.Tuple2
     && TagFamily(Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
       == tytagFamily$_tuple#2);

function Tclass._System.Tuple2_0(Ty) : Ty;

// Tclass._System.Tuple2 injectivity 0
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty :: 
  { Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1) } 
  Tclass._System.Tuple2_0(Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
     == _System._tuple#2$T0);

function Tclass._System.Tuple2_1(Ty) : Ty;

// Tclass._System.Tuple2 injectivity 1
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty :: 
  { Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1) } 
  Tclass._System.Tuple2_1(Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
     == _System._tuple#2$T1);

// Box/unbox axiom for Tclass._System.Tuple2
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1)) } 
  $IsBox(bx, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, 
        Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1)));

// Constructor $Is
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty, a#2#0#0: Box, a#2#1#0: Box :: 
  { $Is(#_System._tuple#2._#Make2(a#2#0#0, a#2#1#0), 
      Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1)) } 
  $Is(#_System._tuple#2._#Make2(a#2#0#0, a#2#1#0), 
      Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
     <==> $IsBox(a#2#0#0, _System._tuple#2$T0) && $IsBox(a#2#1#0, _System._tuple#2$T1));

// Constructor $IsAlloc
axiom (forall _System._tuple#2$T0: Ty, 
    _System._tuple#2$T1: Ty, 
    a#2#0#0: Box, 
    a#2#1#0: Box, 
    $h: Heap :: 
  { $IsAlloc(#_System._tuple#2._#Make2(a#2#0#0, a#2#1#0), 
      Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), 
      $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#_System._tuple#2._#Make2(a#2#0#0, a#2#1#0), 
        Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), 
        $h)
       <==> $IsAllocBox(a#2#0#0, _System._tuple#2$T0, $h)
         && $IsAllocBox(a#2#1#0, _System._tuple#2$T1, $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#2$T0: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple2._0(d), _System._tuple#2$T0, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple2.___hMake2_q(d)
       && (exists _System._tuple#2$T1: Ty :: 
        { $IsAlloc(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), $h) } 
        $IsAlloc(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), $h))
     ==> $IsAllocBox(_System.Tuple2._0(d), _System._tuple#2$T0, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#2$T1: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple2._1(d), _System._tuple#2$T1, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple2.___hMake2_q(d)
       && (exists _System._tuple#2$T0: Ty :: 
        { $IsAlloc(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), $h) } 
        $IsAlloc(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), $h))
     ==> $IsAllocBox(_System.Tuple2._1(d), _System._tuple#2$T1, $h));

// Constructor literal
axiom (forall a#3#0#0: Box, a#3#1#0: Box :: 
  { #_System._tuple#2._#Make2(Lit(a#3#0#0), Lit(a#3#1#0)) } 
  #_System._tuple#2._#Make2(Lit(a#3#0#0), Lit(a#3#1#0))
     == Lit(#_System._tuple#2._#Make2(a#3#0#0, a#3#1#0)));

// Constructor injectivity
axiom (forall a#4#0#0: Box, a#4#1#0: Box :: 
  { #_System._tuple#2._#Make2(a#4#0#0, a#4#1#0) } 
  _System.Tuple2._0(#_System._tuple#2._#Make2(a#4#0#0, a#4#1#0)) == a#4#0#0);

// Inductive rank
axiom (forall a#5#0#0: Box, a#5#1#0: Box :: 
  { #_System._tuple#2._#Make2(a#5#0#0, a#5#1#0) } 
  BoxRank(a#5#0#0) < DtRank(#_System._tuple#2._#Make2(a#5#0#0, a#5#1#0)));

// Constructor injectivity
axiom (forall a#6#0#0: Box, a#6#1#0: Box :: 
  { #_System._tuple#2._#Make2(a#6#0#0, a#6#1#0) } 
  _System.Tuple2._1(#_System._tuple#2._#Make2(a#6#0#0, a#6#1#0)) == a#6#1#0);

// Inductive rank
axiom (forall a#7#0#0: Box, a#7#1#0: Box :: 
  { #_System._tuple#2._#Make2(a#7#0#0, a#7#1#0) } 
  BoxRank(a#7#1#0) < DtRank(#_System._tuple#2._#Make2(a#7#0#0, a#7#1#0)));

// Depth-one case-split function
function $IsA#_System.Tuple2(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_System.Tuple2(d) } 
  $IsA#_System.Tuple2(d) ==> _System.Tuple2.___hMake2_q(d));

// Questionmark data type disjunctivity
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty, d: DatatypeType :: 
  { _System.Tuple2.___hMake2_q(d), $Is(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1)) } 
  $Is(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
     ==> _System.Tuple2.___hMake2_q(d));

// Datatype extensional equality declaration
function _System.Tuple2#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #_System._tuple#2._#Make2
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple2#Equal(a, b) } 
  _System.Tuple2#Equal(a, b)
     <==> _System.Tuple2._0(a) == _System.Tuple2._0(b)
       && _System.Tuple2._1(a) == _System.Tuple2._1(b));

// Datatype extensionality axiom: _System._tuple#2
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple2#Equal(a, b) } 
  _System.Tuple2#Equal(a, b) <==> a == b);

const unique class._System.Tuple2: ClassName;

// Constructor function declaration
function #_System._tuple#0._#Make0() : DatatypeType
uses {
// Constructor identifier
axiom DatatypeCtorId(#_System._tuple#0._#Make0()) == ##_System._tuple#0._#Make0;
// Constructor $Is
axiom $Is(#_System._tuple#0._#Make0(), Tclass._System.Tuple0());
// Constructor literal
axiom #_System._tuple#0._#Make0() == Lit(#_System._tuple#0._#Make0());
}

const unique ##_System._tuple#0._#Make0: DtCtorId
uses {
// Constructor identifier
axiom DatatypeCtorId(#_System._tuple#0._#Make0()) == ##_System._tuple#0._#Make0;
}

function _System.Tuple0.___hMake0_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _System.Tuple0.___hMake0_q(d) } 
  _System.Tuple0.___hMake0_q(d)
     <==> DatatypeCtorId(d) == ##_System._tuple#0._#Make0);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _System.Tuple0.___hMake0_q(d) } 
  _System.Tuple0.___hMake0_q(d) ==> d == #_System._tuple#0._#Make0());

function Tclass._System.Tuple0() : Ty
uses {
// Tclass._System.Tuple0 Tag
axiom Tag(Tclass._System.Tuple0()) == Tagclass._System.Tuple0
   && TagFamily(Tclass._System.Tuple0()) == tytagFamily$_tuple#0;
}

const unique Tagclass._System.Tuple0: TyTag;

// Box/unbox axiom for Tclass._System.Tuple0
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._System.Tuple0()) } 
  $IsBox(bx, Tclass._System.Tuple0())
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, Tclass._System.Tuple0()));

// Datatype $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(d, Tclass._System.Tuple0(), $h) } 
  $IsGoodHeap($h) && $Is(d, Tclass._System.Tuple0())
     ==> $IsAlloc(d, Tclass._System.Tuple0(), $h));

// Depth-one case-split function
function $IsA#_System.Tuple0(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_System.Tuple0(d) } 
  $IsA#_System.Tuple0(d) ==> _System.Tuple0.___hMake0_q(d));

// Questionmark data type disjunctivity
axiom (forall d: DatatypeType :: 
  { _System.Tuple0.___hMake0_q(d), $Is(d, Tclass._System.Tuple0()) } 
  $Is(d, Tclass._System.Tuple0()) ==> _System.Tuple0.___hMake0_q(d));

// Datatype extensional equality declaration
function _System.Tuple0#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #_System._tuple#0._#Make0
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple0#Equal(a, b) } 
  _System.Tuple0#Equal(a, b));

// Datatype extensionality axiom: _System._tuple#0
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple0#Equal(a, b) } 
  _System.Tuple0#Equal(a, b) <==> a == b);

const unique class._System.Tuple0: ClassName;

function Tclass._System.___hFunc2(Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hFunc2: TyTag;

// Tclass._System.___hFunc2 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc2(#$T0, #$T1, #$R) } 
  Tag(Tclass._System.___hFunc2(#$T0, #$T1, #$R)) == Tagclass._System.___hFunc2
     && TagFamily(Tclass._System.___hFunc2(#$T0, #$T1, #$R)) == tytagFamily$_#Func2);

function Tclass._System.___hFunc2_0(Ty) : Ty;

// Tclass._System.___hFunc2 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hFunc2_0(Tclass._System.___hFunc2(#$T0, #$T1, #$R)) == #$T0);

function Tclass._System.___hFunc2_1(Ty) : Ty;

// Tclass._System.___hFunc2 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hFunc2_1(Tclass._System.___hFunc2(#$T0, #$T1, #$R)) == #$T1);

function Tclass._System.___hFunc2_2(Ty) : Ty;

// Tclass._System.___hFunc2 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hFunc2_2(Tclass._System.___hFunc2(#$T0, #$T1, #$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hFunc2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hFunc2(#$T0, #$T1, #$R)) } 
  $IsBox(bx, Tclass._System.___hFunc2(#$T0, #$T1, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hFunc2(#$T0, #$T1, #$R)));

function Handle2([Heap,Box,Box]Box, [Heap,Box,Box]bool, [Heap,Box,Box]Set) : HandleType;

function Apply2(Ty, Ty, Ty, Heap, HandleType, Box, Box) : Box;

function Requires2(Ty, Ty, Ty, Heap, HandleType, Box, Box) : bool;

function Reads2(Ty, Ty, Ty, Heap, HandleType, Box, Box) : Set;

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box]Box, 
    r: [Heap,Box,Box]bool, 
    rd: [Heap,Box,Box]Set, 
    bx0: Box, 
    bx1: Box :: 
  { Apply2(t0, t1, t2, heap, Handle2(h, r, rd), bx0, bx1) } 
  Apply2(t0, t1, t2, heap, Handle2(h, r, rd), bx0, bx1) == h[heap, bx0, bx1]);

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box]Box, 
    r: [Heap,Box,Box]bool, 
    rd: [Heap,Box,Box]Set, 
    bx0: Box, 
    bx1: Box :: 
  { Requires2(t0, t1, t2, heap, Handle2(h, r, rd), bx0, bx1) } 
  r[heap, bx0, bx1] ==> Requires2(t0, t1, t2, heap, Handle2(h, r, rd), bx0, bx1));

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box]Box, 
    r: [Heap,Box,Box]bool, 
    rd: [Heap,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx: Box :: 
  { Set#IsMember(Reads2(t0, t1, t2, heap, Handle2(h, r, rd), bx0, bx1), bx) } 
  Set#IsMember(Reads2(t0, t1, t2, heap, Handle2(h, r, rd), bx0, bx1), bx)
     == Set#IsMember(rd[heap, bx0, bx1], bx));

function {:inline} Requires2#canCall(t0: Ty, t1: Ty, t2: Ty, heap: Heap, f: HandleType, bx0: Box, bx1: Box) : bool
{
  true
}

function {:inline} Reads2#canCall(t0: Ty, t1: Ty, t2: Ty, heap: Heap, f: HandleType, bx0: Box, bx1: Box) : bool
{
  true
}

// frame axiom for Reads2
axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Reads2(t0, t1, t2, h1, f, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads2(t0, t1, t2, h0, f, bx0, bx1), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads2(t0, t1, t2, h0, f, bx0, bx1) == Reads2(t0, t1, t2, h1, f, bx0, bx1));

// frame axiom for Reads2
axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Reads2(t0, t1, t2, h1, f, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads2(t0, t1, t2, h1, f, bx0, bx1), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads2(t0, t1, t2, h0, f, bx0, bx1) == Reads2(t0, t1, t2, h1, f, bx0, bx1));

// frame axiom for Requires2
axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Requires2(t0, t1, t2, h1, f, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads2(t0, t1, t2, h0, f, bx0, bx1), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires2(t0, t1, t2, h0, f, bx0, bx1) == Requires2(t0, t1, t2, h1, f, bx0, bx1));

// frame axiom for Requires2
axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Requires2(t0, t1, t2, h1, f, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads2(t0, t1, t2, h1, f, bx0, bx1), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires2(t0, t1, t2, h0, f, bx0, bx1) == Requires2(t0, t1, t2, h1, f, bx0, bx1));

// frame axiom for Apply2
axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Apply2(t0, t1, t2, h1, f, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads2(t0, t1, t2, h0, f, bx0, bx1), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply2(t0, t1, t2, h0, f, bx0, bx1) == Apply2(t0, t1, t2, h1, f, bx0, bx1));

// frame axiom for Apply2
axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Apply2(t0, t1, t2, h1, f, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads2(t0, t1, t2, h1, f, bx0, bx1), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply2(t0, t1, t2, h0, f, bx0, bx1) == Apply2(t0, t1, t2, h1, f, bx0, bx1));

// empty-reads property for Reads2 
axiom (forall t0: Ty, t1: Ty, t2: Ty, heap: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { Reads2(t0, t1, t2, $OneHeap, f, bx0, bx1), $IsGoodHeap(heap) } 
    { Reads2(t0, t1, t2, heap, f, bx0, bx1) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
     ==> (Set#Equal(Reads2(t0, t1, t2, $OneHeap, f, bx0, bx1), Set#Empty(): Set)
       <==> Set#Equal(Reads2(t0, t1, t2, heap, f, bx0, bx1), Set#Empty(): Set)));

// empty-reads property for Requires2
axiom (forall t0: Ty, t1: Ty, t2: Ty, heap: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { Requires2(t0, t1, t2, $OneHeap, f, bx0, bx1), $IsGoodHeap(heap) } 
    { Requires2(t0, t1, t2, heap, f, bx0, bx1) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && Set#Equal(Reads2(t0, t1, t2, $OneHeap, f, bx0, bx1), Set#Empty(): Set)
     ==> Requires2(t0, t1, t2, $OneHeap, f, bx0, bx1)
       == Requires2(t0, t1, t2, heap, f, bx0, bx1));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty :: 
  { $Is(f, Tclass._System.___hFunc2(t0, t1, t2)) } 
  $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
     <==> (forall h: Heap, bx0: Box, bx1: Box :: 
      { Apply2(t0, t1, t2, h, f, bx0, bx1) } 
      $IsGoodHeap(h)
           && 
          $IsBox(bx0, t0)
           && $IsBox(bx1, t1)
           && Requires2(t0, t1, t2, h, f, bx0, bx1)
         ==> $IsBox(Apply2(t0, t1, t2, h, f, bx0, bx1), t2)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, u0: Ty, u1: Ty, u2: Ty :: 
  { $Is(f, Tclass._System.___hFunc2(t0, t1, t2)), $Is(f, Tclass._System.___hFunc2(u0, u1, u2)) } 
  $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall bx: Box :: 
        { $IsBox(bx, u0) } { $IsBox(bx, t0) } 
        $IsBox(bx, u0) ==> $IsBox(bx, t0))
       && (forall bx: Box :: 
        { $IsBox(bx, u1) } { $IsBox(bx, t1) } 
        $IsBox(bx, u1) ==> $IsBox(bx, t1))
       && (forall bx: Box :: 
        { $IsBox(bx, t2) } { $IsBox(bx, u2) } 
        $IsBox(bx, t2) ==> $IsBox(bx, u2))
     ==> $Is(f, Tclass._System.___hFunc2(u0, u1, u2)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc2(t0, t1, t2), h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, Tclass._System.___hFunc2(t0, t1, t2), h)
       <==> (forall bx0: Box, bx1: Box :: 
        { Apply2(t0, t1, t2, h, f, bx0, bx1) } { Reads2(t0, t1, t2, h, f, bx0, bx1) } 
        $IsBox(bx0, t0)
             && $IsAllocBox(bx0, t0, h)
             && 
            $IsBox(bx1, t1)
             && $IsAllocBox(bx1, t1, h)
             && Requires2(t0, t1, t2, h, f, bx0, bx1)
           ==> (forall r: ref :: 
            { Set#IsMember(Reads2(t0, t1, t2, h, f, bx0, bx1), $Box(r)) } 
            r != null && Set#IsMember(Reads2(t0, t1, t2, h, f, bx0, bx1), $Box(r))
               ==> $Unbox(read(h, r, alloc)): bool))));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc2(t0, t1, t2), h) } 
  $IsGoodHeap(h) && $IsAlloc(f, Tclass._System.___hFunc2(t0, t1, t2), h)
     ==> (forall bx0: Box, bx1: Box :: 
      { Apply2(t0, t1, t2, h, f, bx0, bx1) } 
      $IsAllocBox(bx0, t0, h)
           && $IsAllocBox(bx1, t1, h)
           && Requires2(t0, t1, t2, h, f, bx0, bx1)
         ==> $IsAllocBox(Apply2(t0, t1, t2, h, f, bx0, bx1), t2, h)));

function Tclass._System.___hPartialFunc2(Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hPartialFunc2: TyTag;

// Tclass._System.___hPartialFunc2 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R) } 
  Tag(Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
       == Tagclass._System.___hPartialFunc2
     && TagFamily(Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
       == tytagFamily$_#PartialFunc2);

function Tclass._System.___hPartialFunc2_0(Ty) : Ty;

// Tclass._System.___hPartialFunc2 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hPartialFunc2_0(Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
     == #$T0);

function Tclass._System.___hPartialFunc2_1(Ty) : Ty;

// Tclass._System.___hPartialFunc2 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hPartialFunc2_1(Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
     == #$T1);

function Tclass._System.___hPartialFunc2_2(Ty) : Ty;

// Tclass._System.___hPartialFunc2 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hPartialFunc2_2(Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hPartialFunc2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R)) } 
  $IsBox(bx, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R)));

// $Is axiom for subset type _System._#PartialFunc2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R)) } 
  $Is(f#0, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
     <==> $Is(f#0, Tclass._System.___hFunc2(#$T0, #$T1, #$R))
       && (forall x0#0: Box, x1#0: Box :: 
        $IsBox(x0#0, #$T0) && $IsBox(x1#0, #$T1)
           ==> Set#Equal(Reads2(#$T0, #$T1, #$R, $OneHeap, f#0, x0#0, x1#0), Set#Empty(): Set)));

// $IsAlloc axiom for subset type _System._#PartialFunc2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hFunc2(#$T0, #$T1, #$R), $h));

function Tclass._System.___hTotalFunc2(Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hTotalFunc2: TyTag;

// Tclass._System.___hTotalFunc2 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R) } 
  Tag(Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
       == Tagclass._System.___hTotalFunc2
     && TagFamily(Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
       == tytagFamily$_#TotalFunc2);

function Tclass._System.___hTotalFunc2_0(Ty) : Ty;

// Tclass._System.___hTotalFunc2 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hTotalFunc2_0(Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
     == #$T0);

function Tclass._System.___hTotalFunc2_1(Ty) : Ty;

// Tclass._System.___hTotalFunc2 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hTotalFunc2_1(Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
     == #$T1);

function Tclass._System.___hTotalFunc2_2(Ty) : Ty;

// Tclass._System.___hTotalFunc2 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hTotalFunc2_2(Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hTotalFunc2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R)) } 
  $IsBox(bx, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R)));

// $Is axiom for subset type _System._#TotalFunc2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R)) } 
  $Is(f#0, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
     <==> $Is(f#0, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
       && (forall x0#0: Box, x1#0: Box :: 
        $IsBox(x0#0, #$T0) && $IsBox(x1#0, #$T1)
           ==> Requires2(#$T0, #$T1, #$R, $OneHeap, f#0, x0#0, x1#0)));

// $IsAlloc axiom for subset type _System._#TotalFunc2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R), $h));

function Tclass._System.___hFunc3(Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hFunc3: TyTag;

// Tclass._System.___hFunc3 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tag(Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R))
       == Tagclass._System.___hFunc3
     && TagFamily(Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R))
       == tytagFamily$_#Func3);

function Tclass._System.___hFunc3_0(Ty) : Ty;

// Tclass._System.___hFunc3 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hFunc3_0(Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T0);

function Tclass._System.___hFunc3_1(Ty) : Ty;

// Tclass._System.___hFunc3 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hFunc3_1(Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T1);

function Tclass._System.___hFunc3_2(Ty) : Ty;

// Tclass._System.___hFunc3 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hFunc3_2(Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T2);

function Tclass._System.___hFunc3_3(Ty) : Ty;

// Tclass._System.___hFunc3 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hFunc3_3(Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hFunc3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R)) } 
  $IsBox(bx, Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R)));

function Handle3([Heap,Box,Box,Box]Box, [Heap,Box,Box,Box]bool, [Heap,Box,Box,Box]Set)
   : HandleType;

function Apply3(Ty, Ty, Ty, Ty, Heap, HandleType, Box, Box, Box) : Box;

function Requires3(Ty, Ty, Ty, Ty, Heap, HandleType, Box, Box, Box) : bool;

function Reads3(Ty, Ty, Ty, Ty, Heap, HandleType, Box, Box, Box) : Set;

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { Apply3(t0, t1, t2, t3, heap, Handle3(h, r, rd), bx0, bx1, bx2) } 
  Apply3(t0, t1, t2, t3, heap, Handle3(h, r, rd), bx0, bx1, bx2)
     == h[heap, bx0, bx1, bx2]);

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { Requires3(t0, t1, t2, t3, heap, Handle3(h, r, rd), bx0, bx1, bx2) } 
  r[heap, bx0, bx1, bx2]
     ==> Requires3(t0, t1, t2, t3, heap, Handle3(h, r, rd), bx0, bx1, bx2));

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx: Box :: 
  { Set#IsMember(Reads3(t0, t1, t2, t3, heap, Handle3(h, r, rd), bx0, bx1, bx2), bx) } 
  Set#IsMember(Reads3(t0, t1, t2, t3, heap, Handle3(h, r, rd), bx0, bx1, bx2), bx)
     == Set#IsMember(rd[heap, bx0, bx1, bx2], bx));

function {:inline} Requires3#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box)
   : bool
{
  true
}

function {:inline} Reads3#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box)
   : bool
{
  true
}

// frame axiom for Reads3
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { $HeapSucc(h0, h1), Reads3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2)
       == Reads3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2));

// frame axiom for Reads3
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { $HeapSucc(h0, h1), Reads3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2)
       == Reads3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2));

// frame axiom for Requires3
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { $HeapSucc(h0, h1), Requires3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2)
       == Requires3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2));

// frame axiom for Requires3
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { $HeapSucc(h0, h1), Requires3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2)
       == Requires3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2));

// frame axiom for Apply3
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { $HeapSucc(h0, h1), Apply3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2)
       == Apply3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2));

// frame axiom for Apply3
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { $HeapSucc(h0, h1), Apply3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2)
       == Apply3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2));

// empty-reads property for Reads3 
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { Reads3(t0, t1, t2, t3, $OneHeap, f, bx0, bx1, bx2), $IsGoodHeap(heap) } 
    { Reads3(t0, t1, t2, t3, heap, f, bx0, bx1, bx2) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
     ==> (Set#Equal(Reads3(t0, t1, t2, t3, $OneHeap, f, bx0, bx1, bx2), Set#Empty(): Set)
       <==> Set#Equal(Reads3(t0, t1, t2, t3, heap, f, bx0, bx1, bx2), Set#Empty(): Set)));

// empty-reads property for Requires3
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { Requires3(t0, t1, t2, t3, $OneHeap, f, bx0, bx1, bx2), $IsGoodHeap(heap) } 
    { Requires3(t0, t1, t2, t3, heap, f, bx0, bx1, bx2) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && Set#Equal(Reads3(t0, t1, t2, t3, $OneHeap, f, bx0, bx1, bx2), Set#Empty(): Set)
     ==> Requires3(t0, t1, t2, t3, $OneHeap, f, bx0, bx1, bx2)
       == Requires3(t0, t1, t2, t3, heap, f, bx0, bx1, bx2));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty :: 
  { $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3)) } 
  $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
     <==> (forall h: Heap, bx0: Box, bx1: Box, bx2: Box :: 
      { Apply3(t0, t1, t2, t3, h, f, bx0, bx1, bx2) } 
      $IsGoodHeap(h)
           && 
          $IsBox(bx0, t0)
           && $IsBox(bx1, t1)
           && $IsBox(bx2, t2)
           && Requires3(t0, t1, t2, t3, h, f, bx0, bx1, bx2)
         ==> $IsBox(Apply3(t0, t1, t2, t3, h, f, bx0, bx1, bx2), t3)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, u0: Ty, u1: Ty, u2: Ty, u3: Ty :: 
  { $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3)), $Is(f, Tclass._System.___hFunc3(u0, u1, u2, u3)) } 
  $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && (forall bx: Box :: 
        { $IsBox(bx, u0) } { $IsBox(bx, t0) } 
        $IsBox(bx, u0) ==> $IsBox(bx, t0))
       && (forall bx: Box :: 
        { $IsBox(bx, u1) } { $IsBox(bx, t1) } 
        $IsBox(bx, u1) ==> $IsBox(bx, t1))
       && (forall bx: Box :: 
        { $IsBox(bx, u2) } { $IsBox(bx, t2) } 
        $IsBox(bx, u2) ==> $IsBox(bx, t2))
       && (forall bx: Box :: 
        { $IsBox(bx, t3) } { $IsBox(bx, u3) } 
        $IsBox(bx, t3) ==> $IsBox(bx, u3))
     ==> $Is(f, Tclass._System.___hFunc3(u0, u1, u2, u3)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc3(t0, t1, t2, t3), h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, Tclass._System.___hFunc3(t0, t1, t2, t3), h)
       <==> (forall bx0: Box, bx1: Box, bx2: Box :: 
        { Apply3(t0, t1, t2, t3, h, f, bx0, bx1, bx2) } 
          { Reads3(t0, t1, t2, t3, h, f, bx0, bx1, bx2) } 
        $IsBox(bx0, t0)
             && $IsAllocBox(bx0, t0, h)
             && 
            $IsBox(bx1, t1)
             && $IsAllocBox(bx1, t1, h)
             && 
            $IsBox(bx2, t2)
             && $IsAllocBox(bx2, t2, h)
             && Requires3(t0, t1, t2, t3, h, f, bx0, bx1, bx2)
           ==> (forall r: ref :: 
            { Set#IsMember(Reads3(t0, t1, t2, t3, h, f, bx0, bx1, bx2), $Box(r)) } 
            r != null && Set#IsMember(Reads3(t0, t1, t2, t3, h, f, bx0, bx1, bx2), $Box(r))
               ==> $Unbox(read(h, r, alloc)): bool))));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc3(t0, t1, t2, t3), h) } 
  $IsGoodHeap(h) && $IsAlloc(f, Tclass._System.___hFunc3(t0, t1, t2, t3), h)
     ==> (forall bx0: Box, bx1: Box, bx2: Box :: 
      { Apply3(t0, t1, t2, t3, h, f, bx0, bx1, bx2) } 
      $IsAllocBox(bx0, t0, h)
           && $IsAllocBox(bx1, t1, h)
           && $IsAllocBox(bx2, t2, h)
           && Requires3(t0, t1, t2, t3, h, f, bx0, bx1, bx2)
         ==> $IsAllocBox(Apply3(t0, t1, t2, t3, h, f, bx0, bx1, bx2), t3, h)));

function Tclass._System.___hPartialFunc3(Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hPartialFunc3: TyTag;

// Tclass._System.___hPartialFunc3 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tag(Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
       == Tagclass._System.___hPartialFunc3
     && TagFamily(Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
       == tytagFamily$_#PartialFunc3);

function Tclass._System.___hPartialFunc3_0(Ty) : Ty;

// Tclass._System.___hPartialFunc3 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hPartialFunc3_0(Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T0);

function Tclass._System.___hPartialFunc3_1(Ty) : Ty;

// Tclass._System.___hPartialFunc3 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hPartialFunc3_1(Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T1);

function Tclass._System.___hPartialFunc3_2(Ty) : Ty;

// Tclass._System.___hPartialFunc3 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hPartialFunc3_2(Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T2);

function Tclass._System.___hPartialFunc3_3(Ty) : Ty;

// Tclass._System.___hPartialFunc3 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hPartialFunc3_3(Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hPartialFunc3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R)) } 
  $IsBox(bx, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R)));

// $Is axiom for subset type _System._#PartialFunc3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R)) } 
  $Is(f#0, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
     <==> $Is(f#0, Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R))
       && (forall x0#0: Box, x1#0: Box, x2#0: Box :: 
        $IsBox(x0#0, #$T0) && $IsBox(x1#0, #$T1) && $IsBox(x2#0, #$T2)
           ==> Set#Equal(Reads3(#$T0, #$T1, #$T2, #$R, $OneHeap, f#0, x0#0, x1#0, x2#0), Set#Empty(): Set)));

// $IsAlloc axiom for subset type _System._#PartialFunc3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R), $h));

function Tclass._System.___hTotalFunc3(Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hTotalFunc3: TyTag;

// Tclass._System.___hTotalFunc3 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tag(Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R))
       == Tagclass._System.___hTotalFunc3
     && TagFamily(Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R))
       == tytagFamily$_#TotalFunc3);

function Tclass._System.___hTotalFunc3_0(Ty) : Ty;

// Tclass._System.___hTotalFunc3 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hTotalFunc3_0(Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T0);

function Tclass._System.___hTotalFunc3_1(Ty) : Ty;

// Tclass._System.___hTotalFunc3 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hTotalFunc3_1(Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T1);

function Tclass._System.___hTotalFunc3_2(Ty) : Ty;

// Tclass._System.___hTotalFunc3 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hTotalFunc3_2(Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T2);

function Tclass._System.___hTotalFunc3_3(Ty) : Ty;

// Tclass._System.___hTotalFunc3 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hTotalFunc3_3(Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hTotalFunc3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R)) } 
  $IsBox(bx, Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R)));

// $Is axiom for subset type _System._#TotalFunc3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R)) } 
  $Is(f#0, Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R))
     <==> $Is(f#0, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
       && (forall x0#0: Box, x1#0: Box, x2#0: Box :: 
        $IsBox(x0#0, #$T0) && $IsBox(x1#0, #$T1) && $IsBox(x2#0, #$T2)
           ==> Requires3(#$T0, #$T1, #$T2, #$R, $OneHeap, f#0, x0#0, x1#0, x2#0)));

// $IsAlloc axiom for subset type _System._#TotalFunc3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R), $h));

const unique class._module.__default: ClassName;

// function declaration for _module._default.length
function _module.__default.length(_module._default.length$_T0: Ty, $ly: LayerType, xs#0: DatatypeType) : int
uses {
// consequence axiom for _module.__default.length
axiom 1 <= $FunctionContextHeight
   ==> (forall _module._default.length$_T0: Ty, $ly: LayerType, xs#0: DatatypeType :: 
    { _module.__default.length(_module._default.length$_T0, $ly, xs#0) } 
    _module.__default.length#canCall(_module._default.length$_T0, xs#0)
         || (1 < $FunctionContextHeight
           && $Is(xs#0, Tclass._module.List(_module._default.length$_T0)))
       ==> LitInt(0) <= _module.__default.length(_module._default.length$_T0, $ly, xs#0));
// definition axiom for _module.__default.length (revealed)
axiom {:id "id0"} 1 <= $FunctionContextHeight
   ==> (forall _module._default.length$_T0: Ty, $ly: LayerType, xs#0: DatatypeType :: 
    { _module.__default.length(_module._default.length$_T0, $LS($ly), xs#0) } 
    _module.__default.length#canCall(_module._default.length$_T0, xs#0)
         || (1 < $FunctionContextHeight
           && $Is(xs#0, Tclass._module.List(_module._default.length$_T0)))
       ==> (!_module.List.Nil_q(xs#0)
           ==> (var ys#1 := _module.List.tail(xs#0); 
            _module.__default.length#canCall(_module._default.length$_T0, ys#1)))
         && _module.__default.length(_module._default.length$_T0, $LS($ly), xs#0)
           == (if _module.List.Nil_q(xs#0)
             then 0
             else (var ys#0 := _module.List.tail(xs#0); 
              1 + _module.__default.length(_module._default.length$_T0, $ly, ys#0))));
// definition axiom for _module.__default.length for all literals (revealed)
axiom {:id "id1"} 1 <= $FunctionContextHeight
   ==> (forall _module._default.length$_T0: Ty, $ly: LayerType, xs#0: DatatypeType :: 
    {:weight 3} { _module.__default.length(_module._default.length$_T0, $LS($ly), Lit(xs#0)) } 
    _module.__default.length#canCall(_module._default.length$_T0, Lit(xs#0))
         || (1 < $FunctionContextHeight
           && $Is(xs#0, Tclass._module.List(_module._default.length$_T0)))
       ==> (!Lit(_module.List.Nil_q(Lit(xs#0)))
           ==> (var ys#3 := Lit(_module.List.tail(Lit(xs#0))); 
            _module.__default.length#canCall(_module._default.length$_T0, ys#3)))
         && _module.__default.length(_module._default.length$_T0, $LS($ly), Lit(xs#0))
           == (if _module.List.Nil_q(Lit(xs#0))
             then 0
             else (var ys#2 := Lit(_module.List.tail(Lit(xs#0))); 
              LitInt(1 + _module.__default.length(_module._default.length$_T0, $LS($ly), ys#2)))));
}

function _module.__default.length#canCall(_module._default.length$_T0: Ty, xs#0: DatatypeType) : bool;

// layer synonym axiom
axiom (forall _module._default.length$_T0: Ty, $ly: LayerType, xs#0: DatatypeType :: 
  { _module.__default.length(_module._default.length$_T0, $LS($ly), xs#0) } 
  _module.__default.length(_module._default.length$_T0, $LS($ly), xs#0)
     == _module.__default.length(_module._default.length$_T0, $ly, xs#0));

// fuel synonym axiom
axiom (forall _module._default.length$_T0: Ty, $ly: LayerType, xs#0: DatatypeType :: 
  { _module.__default.length(_module._default.length$_T0, AsFuelBottom($ly), xs#0) } 
  _module.__default.length(_module._default.length$_T0, $ly, xs#0)
     == _module.__default.length(_module._default.length$_T0, $LZ, xs#0));

function Tclass._module.List(Ty) : Ty;

const unique Tagclass._module.List: TyTag;

// Tclass._module.List Tag
axiom (forall _module.List$T: Ty :: 
  { Tclass._module.List(_module.List$T) } 
  Tag(Tclass._module.List(_module.List$T)) == Tagclass._module.List
     && TagFamily(Tclass._module.List(_module.List$T)) == tytagFamily$List);

function Tclass._module.List_0(Ty) : Ty;

// Tclass._module.List injectivity 0
axiom (forall _module.List$T: Ty :: 
  { Tclass._module.List(_module.List$T) } 
  Tclass._module.List_0(Tclass._module.List(_module.List$T)) == _module.List$T);

// Box/unbox axiom for Tclass._module.List
axiom (forall _module.List$T: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._module.List(_module.List$T)) } 
  $IsBox(bx, Tclass._module.List(_module.List$T))
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, Tclass._module.List(_module.List$T)));

function _module.__default.length#requires(Ty, LayerType, DatatypeType) : bool;

// #requires axiom for _module.__default.length
axiom (forall _module._default.length$_T0: Ty, $ly: LayerType, xs#0: DatatypeType :: 
  { _module.__default.length#requires(_module._default.length$_T0, $ly, xs#0) } 
  $Is(xs#0, Tclass._module.List(_module._default.length$_T0))
     ==> _module.__default.length#requires(_module._default.length$_T0, $ly, xs#0)
       == true);

procedure {:verboseName "length (well-formedness)"} CheckWellformed$$_module.__default.length(_module._default.length$_T0: Ty, 
    xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(_module._default.length$_T0)));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "length (well-formedness)"} CheckWellformed$$_module.__default.length(_module._default.length$_T0: Ty, xs#0: DatatypeType)
{
  var $_ReadsFrame: [ref,Field]bool;
  var _mcc#0#0: Box;
  var _mcc#1#0: DatatypeType;
  var ys#Z#0: DatatypeType;
  var let#0#0#0: DatatypeType;
  var ##xs#0: DatatypeType;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume LitInt(0)
           <= _module.__default.length(_module._default.length$_T0, $LS($LZ), xs#0);
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        if (xs#0 == #_module.List.Nil())
        {
            assert {:id "id7"} $Is(LitInt(0), Tclass._System.nat());
            assume {:id "id8"} _module.__default.length(_module._default.length$_T0, $LS($LZ), xs#0)
               == LitInt(0);
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(_module.__default.length(_module._default.length$_T0, $LS($LZ), xs#0), 
              Tclass._System.nat());
            return;
        }
        else if (xs#0 == #_module.List.Cons(_mcc#0#0, _mcc#1#0))
        {
            assume $IsBox(_mcc#0#0, _module._default.length$_T0);
            assume $Is(_mcc#1#0, Tclass._module.List(_module._default.length$_T0));
            havoc ys#Z#0;
            assume {:id "id2"} let#0#0#0 == _mcc#1#0;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(let#0#0#0, Tclass._module.List(_module._default.length$_T0));
            assume {:id "id3"} ys#Z#0 == let#0#0#0;
            ##xs#0 := ys#Z#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0, Tclass._module.List(_module._default.length$_T0), $Heap);
            assert {:id "id4"} DtRank(##xs#0) < DtRank(xs#0);
            assume _module.__default.length#canCall(_module._default.length$_T0, ys#Z#0);
            assert {:id "id5"} $Is(1 + _module.__default.length(_module._default.length$_T0, $LS($LZ), ys#Z#0), 
              Tclass._System.nat());
            assume {:id "id6"} _module.__default.length(_module._default.length$_T0, $LS($LZ), xs#0)
               == 1 + _module.__default.length(_module._default.length$_T0, $LS($LZ), ys#Z#0);
            assume _module.__default.length#canCall(_module._default.length$_T0, ys#Z#0);
            // CheckWellformedWithResult: any expression
            assume $Is(_module.__default.length(_module._default.length$_T0, $LS($LZ), xs#0), 
              Tclass._System.nat());
            return;
        }
        else
        {
            assume false;
        }

        assume false;
    }
}



// function declaration for _module._default.reverse
function _module.__default.reverse(_module._default.reverse$_T0: Ty, 
    $ly: LayerType, 
    xs#0: DatatypeType, 
    acc#0: DatatypeType)
   : DatatypeType
uses {
// consequence axiom for _module.__default.reverse
axiom 1 <= $FunctionContextHeight
   ==> (forall _module._default.reverse$_T0: Ty, 
      $ly: LayerType, 
      xs#0: DatatypeType, 
      acc#0: DatatypeType :: 
    { _module.__default.reverse(_module._default.reverse$_T0, $ly, xs#0, acc#0) } 
    _module.__default.reverse#canCall(_module._default.reverse$_T0, xs#0, acc#0)
         || (1 < $FunctionContextHeight
           && 
          $Is(xs#0, Tclass._module.List(_module._default.reverse$_T0))
           && $Is(acc#0, Tclass._module.List(_module._default.reverse$_T0)))
       ==> $Is(_module.__default.reverse(_module._default.reverse$_T0, $ly, xs#0, acc#0), 
        Tclass._module.List(_module._default.reverse$_T0)));
// alloc consequence axiom for _module.__default.reverse
axiom 1 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, 
      _module._default.reverse$_T0: Ty, 
      $ly: LayerType, 
      xs#0: DatatypeType, 
      acc#0: DatatypeType :: 
    { $IsAlloc(_module.__default.reverse(_module._default.reverse$_T0, $ly, xs#0, acc#0), 
        Tclass._module.List(_module._default.reverse$_T0), 
        $Heap) } 
    (_module.__default.reverse#canCall(_module._default.reverse$_T0, xs#0, acc#0)
           || (1 < $FunctionContextHeight
             && 
            $Is(xs#0, Tclass._module.List(_module._default.reverse$_T0))
             && $IsAlloc(xs#0, Tclass._module.List(_module._default.reverse$_T0), $Heap)
             && 
            $Is(acc#0, Tclass._module.List(_module._default.reverse$_T0))
             && $IsAlloc(acc#0, Tclass._module.List(_module._default.reverse$_T0), $Heap)))
         && $IsGoodHeap($Heap)
       ==> $IsAlloc(_module.__default.reverse(_module._default.reverse$_T0, $ly, xs#0, acc#0), 
        Tclass._module.List(_module._default.reverse$_T0), 
        $Heap));
// definition axiom for _module.__default.reverse (revealed)
axiom {:id "id9"} 1 <= $FunctionContextHeight
   ==> (forall _module._default.reverse$_T0: Ty, 
      $ly: LayerType, 
      xs#0: DatatypeType, 
      acc#0: DatatypeType :: 
    { _module.__default.reverse(_module._default.reverse$_T0, $LS($ly), xs#0, acc#0) } 
    _module.__default.reverse#canCall(_module._default.reverse$_T0, xs#0, acc#0)
         || (1 < $FunctionContextHeight
           && 
          $Is(xs#0, Tclass._module.List(_module._default.reverse$_T0))
           && $Is(acc#0, Tclass._module.List(_module._default.reverse$_T0)))
       ==> (!_module.List.Nil_q(xs#0)
           ==> (var ys#1 := _module.List.tail(xs#0); 
            (var a#1 := _module.List.head(xs#0); 
              _module.__default.reverse#canCall(_module._default.reverse$_T0, ys#1, #_module.List.Cons(a#1, acc#0)))))
         && _module.__default.reverse(_module._default.reverse$_T0, $LS($ly), xs#0, acc#0)
           == (if _module.List.Nil_q(xs#0)
             then acc#0
             else (var ys#0 := _module.List.tail(xs#0); 
              (var a#0 := _module.List.head(xs#0); 
                _module.__default.reverse(_module._default.reverse$_T0, $ly, ys#0, #_module.List.Cons(a#0, acc#0))))));
// definition axiom for _module.__default.reverse for all literals (revealed)
axiom {:id "id10"} 1 <= $FunctionContextHeight
   ==> (forall _module._default.reverse$_T0: Ty, 
      $ly: LayerType, 
      xs#0: DatatypeType, 
      acc#0: DatatypeType :: 
    {:weight 3} { _module.__default.reverse(_module._default.reverse$_T0, $LS($ly), Lit(xs#0), Lit(acc#0)) } 
    _module.__default.reverse#canCall(_module._default.reverse$_T0, Lit(xs#0), Lit(acc#0))
         || (1 < $FunctionContextHeight
           && 
          $Is(xs#0, Tclass._module.List(_module._default.reverse$_T0))
           && $Is(acc#0, Tclass._module.List(_module._default.reverse$_T0)))
       ==> (!Lit(_module.List.Nil_q(Lit(xs#0)))
           ==> (var ys#3 := Lit(_module.List.tail(Lit(xs#0))); 
            (var a#3 := Lit(_module.List.head(Lit(xs#0))); 
              _module.__default.reverse#canCall(_module._default.reverse$_T0, ys#3, #_module.List.Cons(a#3, Lit(acc#0))))))
         && _module.__default.reverse(_module._default.reverse$_T0, $LS($ly), Lit(xs#0), Lit(acc#0))
           == (if _module.List.Nil_q(Lit(xs#0))
             then acc#0
             else (var ys#2 := Lit(_module.List.tail(Lit(xs#0))); 
              (var a#2 := Lit(_module.List.head(Lit(xs#0))); 
                Lit(_module.__default.reverse(_module._default.reverse$_T0, 
                    $LS($ly), 
                    ys#2, 
                    Lit(#_module.List.Cons(a#2, Lit(acc#0)))))))));
}

function _module.__default.reverse#canCall(_module._default.reverse$_T0: Ty, xs#0: DatatypeType, acc#0: DatatypeType)
   : bool;

// layer synonym axiom
axiom (forall _module._default.reverse$_T0: Ty, 
    $ly: LayerType, 
    xs#0: DatatypeType, 
    acc#0: DatatypeType :: 
  { _module.__default.reverse(_module._default.reverse$_T0, $LS($ly), xs#0, acc#0) } 
  _module.__default.reverse(_module._default.reverse$_T0, $LS($ly), xs#0, acc#0)
     == _module.__default.reverse(_module._default.reverse$_T0, $ly, xs#0, acc#0));

// fuel synonym axiom
axiom (forall _module._default.reverse$_T0: Ty, 
    $ly: LayerType, 
    xs#0: DatatypeType, 
    acc#0: DatatypeType :: 
  { _module.__default.reverse(_module._default.reverse$_T0, AsFuelBottom($ly), xs#0, acc#0) } 
  _module.__default.reverse(_module._default.reverse$_T0, $ly, xs#0, acc#0)
     == _module.__default.reverse(_module._default.reverse$_T0, $LZ, xs#0, acc#0));

function _module.__default.reverse#requires(Ty, LayerType, DatatypeType, DatatypeType) : bool;

// #requires axiom for _module.__default.reverse
axiom (forall _module._default.reverse$_T0: Ty, 
    $ly: LayerType, 
    xs#0: DatatypeType, 
    acc#0: DatatypeType :: 
  { _module.__default.reverse#requires(_module._default.reverse$_T0, $ly, xs#0, acc#0) } 
  $Is(xs#0, Tclass._module.List(_module._default.reverse$_T0))
       && $Is(acc#0, Tclass._module.List(_module._default.reverse$_T0))
     ==> _module.__default.reverse#requires(_module._default.reverse$_T0, $ly, xs#0, acc#0)
       == true);

procedure {:verboseName "reverse (well-formedness)"} CheckWellformed$$_module.__default.reverse(_module._default.reverse$_T0: Ty, 
    xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(_module._default.reverse$_T0)), 
    acc#0: DatatypeType
       where $Is(acc#0, Tclass._module.List(_module._default.reverse$_T0)));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "reverse (well-formedness)"} CheckWellformed$$_module.__default.reverse(_module._default.reverse$_T0: Ty, xs#0: DatatypeType, acc#0: DatatypeType)
{
  var $_ReadsFrame: [ref,Field]bool;
  var _mcc#0#0: Box;
  var _mcc#1#0: DatatypeType;
  var ys#Z#0: DatatypeType;
  var let#0#0#0: DatatypeType;
  var a#Z#0: Box;
  var let#1#0#0: Box;
  var ##xs#0: DatatypeType;
  var ##acc#0: DatatypeType;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume $Is(_module.__default.reverse(_module._default.reverse$_T0, $LS($LZ), xs#0, acc#0), 
          Tclass._module.List(_module._default.reverse$_T0));
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        if (xs#0 == #_module.List.Nil())
        {
            assume {:id "id17"} _module.__default.reverse(_module._default.reverse$_T0, $LS($LZ), xs#0, acc#0)
               == acc#0;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(_module.__default.reverse(_module._default.reverse$_T0, $LS($LZ), xs#0, acc#0), 
              Tclass._module.List(_module._default.reverse$_T0));
            return;
        }
        else if (xs#0 == #_module.List.Cons(_mcc#0#0, _mcc#1#0))
        {
            assume $IsBox(_mcc#0#0, _module._default.reverse$_T0);
            assume $Is(_mcc#1#0, Tclass._module.List(_module._default.reverse$_T0));
            havoc ys#Z#0;
            assume {:id "id11"} let#0#0#0 == _mcc#1#0;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(let#0#0#0, Tclass._module.List(_module._default.reverse$_T0));
            assume {:id "id12"} ys#Z#0 == let#0#0#0;
            havoc a#Z#0;
            assume {:id "id13"} let#1#0#0 == _mcc#0#0;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $IsBox(let#1#0#0, _module._default.reverse$_T0);
            assume {:id "id14"} a#Z#0 == let#1#0#0;
            ##xs#0 := ys#Z#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0, Tclass._module.List(_module._default.reverse$_T0), $Heap);
            ##acc#0 := #_module.List.Cons(a#Z#0, acc#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#0, Tclass._module.List(_module._default.reverse$_T0), $Heap);
            assert {:id "id15"} DtRank(##xs#0) < DtRank(xs#0)
               || (DtRank(##xs#0) == DtRank(xs#0) && DtRank(##acc#0) < DtRank(acc#0));
            assume _module.__default.reverse#canCall(_module._default.reverse$_T0, ys#Z#0, #_module.List.Cons(a#Z#0, acc#0));
            assume {:id "id16"} _module.__default.reverse(_module._default.reverse$_T0, $LS($LZ), xs#0, acc#0)
               == _module.__default.reverse(_module._default.reverse$_T0, $LS($LZ), ys#Z#0, #_module.List.Cons(a#Z#0, acc#0));
            assume _module.__default.reverse#canCall(_module._default.reverse$_T0, ys#Z#0, #_module.List.Cons(a#Z#0, acc#0));
            // CheckWellformedWithResult: any expression
            assume $Is(_module.__default.reverse(_module._default.reverse$_T0, $LS($LZ), xs#0, acc#0), 
              Tclass._module.List(_module._default.reverse$_T0));
            return;
        }
        else
        {
            assume false;
        }

        assume false;
    }
}



// function declaration for _module._default.multiset_of
function _module.__default.multiset__of(_module._default.multiset_of$T: Ty, $ly: LayerType, xs#0: DatatypeType)
   : MultiSet
uses {
// consequence axiom for _module.__default.multiset__of
axiom 1 <= $FunctionContextHeight
   ==> (forall _module._default.multiset_of$T: Ty, $ly: LayerType, xs#0: DatatypeType :: 
    { _module.__default.multiset__of(_module._default.multiset_of$T, $ly, xs#0) } 
    _module.__default.multiset__of#canCall(_module._default.multiset_of$T, xs#0)
         || (1 < $FunctionContextHeight
           && $Is(xs#0, Tclass._module.List(_module._default.multiset_of$T)))
       ==> $Is(_module.__default.multiset__of(_module._default.multiset_of$T, $ly, xs#0), 
        TMultiSet(_module._default.multiset_of$T)));
// alloc consequence axiom for _module.__default.multiset__of
axiom 1 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, 
      _module._default.multiset_of$T: Ty, 
      $ly: LayerType, 
      xs#0: DatatypeType :: 
    { $IsAlloc(_module.__default.multiset__of(_module._default.multiset_of$T, $ly, xs#0), 
        TMultiSet(_module._default.multiset_of$T), 
        $Heap) } 
    (_module.__default.multiset__of#canCall(_module._default.multiset_of$T, xs#0)
           || (1 < $FunctionContextHeight
             && 
            $Is(xs#0, Tclass._module.List(_module._default.multiset_of$T))
             && $IsAlloc(xs#0, Tclass._module.List(_module._default.multiset_of$T), $Heap)))
         && $IsGoodHeap($Heap)
       ==> $IsAlloc(_module.__default.multiset__of(_module._default.multiset_of$T, $ly, xs#0), 
        TMultiSet(_module._default.multiset_of$T), 
        $Heap));
// definition axiom for _module.__default.multiset__of (revealed)
axiom {:id "id18"} 1 <= $FunctionContextHeight
   ==> (forall _module._default.multiset_of$T: Ty, $ly: LayerType, xs#0: DatatypeType :: 
    { _module.__default.multiset__of(_module._default.multiset_of$T, $LS($ly), xs#0) } 
    _module.__default.multiset__of#canCall(_module._default.multiset_of$T, xs#0)
         || (1 < $FunctionContextHeight
           && $Is(xs#0, Tclass._module.List(_module._default.multiset_of$T)))
       ==> (!_module.List.Nil_q(xs#0)
           ==> (var ys#1 := _module.List.tail(xs#0); 
            _module.__default.multiset__of#canCall(_module._default.multiset_of$T, ys#1)))
         && _module.__default.multiset__of(_module._default.multiset_of$T, $LS($ly), xs#0)
           == (if _module.List.Nil_q(xs#0)
             then MultiSet#Empty(): MultiSet
             else (var ys#0 := _module.List.tail(xs#0); 
              (var a#0 := _module.List.head(xs#0); 
                MultiSet#Union(MultiSet#UnionOne(MultiSet#Empty(): MultiSet, a#0), 
                  _module.__default.multiset__of(_module._default.multiset_of$T, $ly, ys#0))))));
// definition axiom for _module.__default.multiset__of for all literals (revealed)
axiom {:id "id19"} 1 <= $FunctionContextHeight
   ==> (forall _module._default.multiset_of$T: Ty, $ly: LayerType, xs#0: DatatypeType :: 
    {:weight 3} { _module.__default.multiset__of(_module._default.multiset_of$T, $LS($ly), Lit(xs#0)) } 
    _module.__default.multiset__of#canCall(_module._default.multiset_of$T, Lit(xs#0))
         || (1 < $FunctionContextHeight
           && $Is(xs#0, Tclass._module.List(_module._default.multiset_of$T)))
       ==> (!Lit(_module.List.Nil_q(Lit(xs#0)))
           ==> (var ys#3 := Lit(_module.List.tail(Lit(xs#0))); 
            _module.__default.multiset__of#canCall(_module._default.multiset_of$T, ys#3)))
         && _module.__default.multiset__of(_module._default.multiset_of$T, $LS($ly), Lit(xs#0))
           == (if _module.List.Nil_q(Lit(xs#0))
             then MultiSet#Empty(): MultiSet
             else (var ys#2 := Lit(_module.List.tail(Lit(xs#0))); 
              (var a#2 := Lit(_module.List.head(Lit(xs#0))); 
                MultiSet#Union(MultiSet#UnionOne(MultiSet#Empty(): MultiSet, a#2), 
                  _module.__default.multiset__of(_module._default.multiset_of$T, $LS($ly), ys#2))))));
}

function _module.__default.multiset__of#canCall(_module._default.multiset_of$T: Ty, xs#0: DatatypeType) : bool;

// layer synonym axiom
axiom (forall _module._default.multiset_of$T: Ty, $ly: LayerType, xs#0: DatatypeType :: 
  { _module.__default.multiset__of(_module._default.multiset_of$T, $LS($ly), xs#0) } 
  _module.__default.multiset__of(_module._default.multiset_of$T, $LS($ly), xs#0)
     == _module.__default.multiset__of(_module._default.multiset_of$T, $ly, xs#0));

// fuel synonym axiom
axiom (forall _module._default.multiset_of$T: Ty, $ly: LayerType, xs#0: DatatypeType :: 
  { _module.__default.multiset__of(_module._default.multiset_of$T, AsFuelBottom($ly), xs#0) } 
  _module.__default.multiset__of(_module._default.multiset_of$T, $ly, xs#0)
     == _module.__default.multiset__of(_module._default.multiset_of$T, $LZ, xs#0));

function _module.__default.multiset__of#requires(Ty, LayerType, DatatypeType) : bool;

// #requires axiom for _module.__default.multiset__of
axiom (forall _module._default.multiset_of$T: Ty, $ly: LayerType, xs#0: DatatypeType :: 
  { _module.__default.multiset__of#requires(_module._default.multiset_of$T, $ly, xs#0) } 
  $Is(xs#0, Tclass._module.List(_module._default.multiset_of$T))
     ==> _module.__default.multiset__of#requires(_module._default.multiset_of$T, $ly, xs#0)
       == true);

procedure {:verboseName "multiset_of (well-formedness)"} CheckWellformed$$_module.__default.multiset__of(_module._default.multiset_of$T: Ty, 
    xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(_module._default.multiset_of$T)));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "multiset_of (well-formedness)"} CheckWellformed$$_module.__default.multiset__of(_module._default.multiset_of$T: Ty, xs#0: DatatypeType)
{
  var $_ReadsFrame: [ref,Field]bool;
  var _mcc#0#0: Box;
  var _mcc#1#0: DatatypeType;
  var ys#Z#0: DatatypeType;
  var let#0#0#0: DatatypeType;
  var a#Z#0: Box;
  var let#1#0#0: Box;
  var ##xs#0: DatatypeType;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume $Is(_module.__default.multiset__of(_module._default.multiset_of$T, $LS($LZ), xs#0), 
          TMultiSet(_module._default.multiset_of$T));
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        if (xs#0 == #_module.List.Nil())
        {
            assume {:id "id26"} _module.__default.multiset__of(_module._default.multiset_of$T, $LS($LZ), xs#0)
               == Lit(MultiSet#Empty(): MultiSet);
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(_module.__default.multiset__of(_module._default.multiset_of$T, $LS($LZ), xs#0), 
              TMultiSet(_module._default.multiset_of$T));
            return;
        }
        else if (xs#0 == #_module.List.Cons(_mcc#0#0, _mcc#1#0))
        {
            assume $IsBox(_mcc#0#0, _module._default.multiset_of$T);
            assume $Is(_mcc#1#0, Tclass._module.List(_module._default.multiset_of$T));
            havoc ys#Z#0;
            assume {:id "id20"} let#0#0#0 == _mcc#1#0;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(let#0#0#0, Tclass._module.List(_module._default.multiset_of$T));
            assume {:id "id21"} ys#Z#0 == let#0#0#0;
            havoc a#Z#0;
            assume {:id "id22"} let#1#0#0 == _mcc#0#0;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $IsBox(let#1#0#0, _module._default.multiset_of$T);
            assume {:id "id23"} a#Z#0 == let#1#0#0;
            ##xs#0 := ys#Z#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0, Tclass._module.List(_module._default.multiset_of$T), $Heap);
            assert {:id "id24"} DtRank(##xs#0) < DtRank(xs#0);
            assume _module.__default.multiset__of#canCall(_module._default.multiset_of$T, ys#Z#0);
            assume {:id "id25"} _module.__default.multiset__of(_module._default.multiset_of$T, $LS($LZ), xs#0)
               == MultiSet#Union(MultiSet#UnionOne(MultiSet#Empty(): MultiSet, a#Z#0), 
                _module.__default.multiset__of(_module._default.multiset_of$T, $LS($LZ), ys#Z#0));
            assume _module.__default.multiset__of#canCall(_module._default.multiset_of$T, ys#Z#0);
            // CheckWellformedWithResult: any expression
            assume $Is(_module.__default.multiset__of(_module._default.multiset_of$T, $LS($LZ), xs#0), 
              TMultiSet(_module._default.multiset_of$T));
            return;
        }
        else
        {
            assume false;
        }

        assume false;
    }
}



// function declaration for _module._default.MultisetUnion
function _module.__default.MultisetUnion(_module._default.MultisetUnion$T: Ty, $ly: LayerType, xs#0: DatatypeType)
   : MultiSet
uses {
// consequence axiom for _module.__default.MultisetUnion
axiom 2 <= $FunctionContextHeight
   ==> (forall _module._default.MultisetUnion$T: Ty, $ly: LayerType, xs#0: DatatypeType :: 
    { _module.__default.MultisetUnion(_module._default.MultisetUnion$T, $ly, xs#0) } 
    _module.__default.MultisetUnion#canCall(_module._default.MultisetUnion$T, xs#0)
         || (2 < $FunctionContextHeight
           && $Is(xs#0, Tclass._module.List(Tclass._module.List(_module._default.MultisetUnion$T))))
       ==> $Is(_module.__default.MultisetUnion(_module._default.MultisetUnion$T, $ly, xs#0), 
        TMultiSet(_module._default.MultisetUnion$T)));
// alloc consequence axiom for _module.__default.MultisetUnion
axiom 2 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, 
      _module._default.MultisetUnion$T: Ty, 
      $ly: LayerType, 
      xs#0: DatatypeType :: 
    { $IsAlloc(_module.__default.MultisetUnion(_module._default.MultisetUnion$T, $ly, xs#0), 
        TMultiSet(_module._default.MultisetUnion$T), 
        $Heap) } 
    (_module.__default.MultisetUnion#canCall(_module._default.MultisetUnion$T, xs#0)
           || (2 < $FunctionContextHeight
             && 
            $Is(xs#0, Tclass._module.List(Tclass._module.List(_module._default.MultisetUnion$T)))
             && $IsAlloc(xs#0, 
              Tclass._module.List(Tclass._module.List(_module._default.MultisetUnion$T)), 
              $Heap)))
         && $IsGoodHeap($Heap)
       ==> $IsAlloc(_module.__default.MultisetUnion(_module._default.MultisetUnion$T, $ly, xs#0), 
        TMultiSet(_module._default.MultisetUnion$T), 
        $Heap));
// definition axiom for _module.__default.MultisetUnion (revealed)
axiom {:id "id27"} 2 <= $FunctionContextHeight
   ==> (forall _module._default.MultisetUnion$T: Ty, $ly: LayerType, xs#0: DatatypeType :: 
    { _module.__default.MultisetUnion(_module._default.MultisetUnion$T, $LS($ly), xs#0) } 
    _module.__default.MultisetUnion#canCall(_module._default.MultisetUnion$T, xs#0)
         || (2 < $FunctionContextHeight
           && $Is(xs#0, Tclass._module.List(Tclass._module.List(_module._default.MultisetUnion$T))))
       ==> (!_module.List.Nil_q(xs#0)
           ==> (var ys#1 := _module.List.tail(xs#0); 
            (var a#1 := $Unbox(_module.List.head(xs#0)): DatatypeType; 
              _module.__default.multiset__of#canCall(_module._default.MultisetUnion$T, a#1)
                 && _module.__default.MultisetUnion#canCall(_module._default.MultisetUnion$T, ys#1))))
         && _module.__default.MultisetUnion(_module._default.MultisetUnion$T, $LS($ly), xs#0)
           == (if _module.List.Nil_q(xs#0)
             then MultiSet#Empty(): MultiSet
             else (var ys#0 := _module.List.tail(xs#0); 
              (var a#0 := $Unbox(_module.List.head(xs#0)): DatatypeType; 
                MultiSet#Union(_module.__default.multiset__of(_module._default.MultisetUnion$T, $LS($LZ), a#0), 
                  _module.__default.MultisetUnion(_module._default.MultisetUnion$T, $ly, ys#0))))));
// definition axiom for _module.__default.MultisetUnion for all literals (revealed)
axiom {:id "id28"} 2 <= $FunctionContextHeight
   ==> (forall _module._default.MultisetUnion$T: Ty, $ly: LayerType, xs#0: DatatypeType :: 
    {:weight 3} { _module.__default.MultisetUnion(_module._default.MultisetUnion$T, $LS($ly), Lit(xs#0)) } 
    _module.__default.MultisetUnion#canCall(_module._default.MultisetUnion$T, Lit(xs#0))
         || (2 < $FunctionContextHeight
           && $Is(xs#0, Tclass._module.List(Tclass._module.List(_module._default.MultisetUnion$T))))
       ==> (!Lit(_module.List.Nil_q(Lit(xs#0)))
           ==> (var ys#3 := Lit(_module.List.tail(Lit(xs#0))); 
            (var a#3 := Lit($Unbox(_module.List.head(Lit(xs#0))): DatatypeType); 
              _module.__default.multiset__of#canCall(_module._default.MultisetUnion$T, a#3)
                 && _module.__default.MultisetUnion#canCall(_module._default.MultisetUnion$T, ys#3))))
         && _module.__default.MultisetUnion(_module._default.MultisetUnion$T, $LS($ly), Lit(xs#0))
           == (if _module.List.Nil_q(Lit(xs#0))
             then MultiSet#Empty(): MultiSet
             else (var ys#2 := Lit(_module.List.tail(Lit(xs#0))); 
              (var a#2 := Lit($Unbox(_module.List.head(Lit(xs#0))): DatatypeType); 
                MultiSet#Union(_module.__default.multiset__of(_module._default.MultisetUnion$T, $LS($LZ), a#2), 
                  _module.__default.MultisetUnion(_module._default.MultisetUnion$T, $LS($ly), ys#2))))));
}

function _module.__default.MultisetUnion#canCall(_module._default.MultisetUnion$T: Ty, xs#0: DatatypeType) : bool;

// layer synonym axiom
axiom (forall _module._default.MultisetUnion$T: Ty, $ly: LayerType, xs#0: DatatypeType :: 
  { _module.__default.MultisetUnion(_module._default.MultisetUnion$T, $LS($ly), xs#0) } 
  _module.__default.MultisetUnion(_module._default.MultisetUnion$T, $LS($ly), xs#0)
     == _module.__default.MultisetUnion(_module._default.MultisetUnion$T, $ly, xs#0));

// fuel synonym axiom
axiom (forall _module._default.MultisetUnion$T: Ty, $ly: LayerType, xs#0: DatatypeType :: 
  { _module.__default.MultisetUnion(_module._default.MultisetUnion$T, AsFuelBottom($ly), xs#0) } 
  _module.__default.MultisetUnion(_module._default.MultisetUnion$T, $ly, xs#0)
     == _module.__default.MultisetUnion(_module._default.MultisetUnion$T, $LZ, xs#0));

function _module.__default.MultisetUnion#requires(Ty, LayerType, DatatypeType) : bool;

// #requires axiom for _module.__default.MultisetUnion
axiom (forall _module._default.MultisetUnion$T: Ty, $ly: LayerType, xs#0: DatatypeType :: 
  { _module.__default.MultisetUnion#requires(_module._default.MultisetUnion$T, $ly, xs#0) } 
  $Is(xs#0, Tclass._module.List(Tclass._module.List(_module._default.MultisetUnion$T)))
     ==> _module.__default.MultisetUnion#requires(_module._default.MultisetUnion$T, $ly, xs#0)
       == true);

procedure {:verboseName "MultisetUnion (well-formedness)"} CheckWellformed$$_module.__default.MultisetUnion(_module._default.MultisetUnion$T: Ty, 
    xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.List(_module._default.MultisetUnion$T))));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "MultisetUnion (well-formedness)"} CheckWellformed$$_module.__default.MultisetUnion(_module._default.MultisetUnion$T: Ty, xs#0: DatatypeType)
{
  var $_ReadsFrame: [ref,Field]bool;
  var _mcc#0#0: DatatypeType;
  var _mcc#1#0: DatatypeType;
  var ys#Z#0: DatatypeType;
  var let#0#0#0: DatatypeType;
  var a#Z#0: DatatypeType;
  var let#1#0#0: DatatypeType;
  var ##xs#0: DatatypeType;
  var ##xs#1: DatatypeType;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume $Is(_module.__default.MultisetUnion(_module._default.MultisetUnion$T, $LS($LZ), xs#0), 
          TMultiSet(_module._default.MultisetUnion$T));
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        if (xs#0 == #_module.List.Nil())
        {
            assume {:id "id35"} _module.__default.MultisetUnion(_module._default.MultisetUnion$T, $LS($LZ), xs#0)
               == Lit(MultiSet#Empty(): MultiSet);
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(_module.__default.MultisetUnion(_module._default.MultisetUnion$T, $LS($LZ), xs#0), 
              TMultiSet(_module._default.MultisetUnion$T));
            return;
        }
        else if (xs#0 == #_module.List.Cons($Box(_mcc#0#0), _mcc#1#0))
        {
            assume $Is(_mcc#0#0, Tclass._module.List(_module._default.MultisetUnion$T));
            assume $Is(_mcc#1#0, 
              Tclass._module.List(Tclass._module.List(_module._default.MultisetUnion$T)));
            havoc ys#Z#0;
            assume {:id "id29"} let#0#0#0 == _mcc#1#0;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(let#0#0#0, 
              Tclass._module.List(Tclass._module.List(_module._default.MultisetUnion$T)));
            assume {:id "id30"} ys#Z#0 == let#0#0#0;
            havoc a#Z#0;
            assume {:id "id31"} let#1#0#0 == _mcc#0#0;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(let#1#0#0, Tclass._module.List(_module._default.MultisetUnion$T));
            assume {:id "id32"} a#Z#0 == let#1#0#0;
            ##xs#0 := a#Z#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0, Tclass._module.List(_module._default.MultisetUnion$T), $Heap);
            assume _module.__default.multiset__of#canCall(_module._default.MultisetUnion$T, a#Z#0);
            ##xs#1 := ys#Z#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1, 
              Tclass._module.List(Tclass._module.List(_module._default.MultisetUnion$T)), 
              $Heap);
            assert {:id "id33"} DtRank(##xs#1) < DtRank(xs#0);
            assume _module.__default.MultisetUnion#canCall(_module._default.MultisetUnion$T, ys#Z#0);
            assume {:id "id34"} _module.__default.MultisetUnion(_module._default.MultisetUnion$T, $LS($LZ), xs#0)
               == MultiSet#Union(_module.__default.multiset__of(_module._default.MultisetUnion$T, $LS($LZ), a#Z#0), 
                _module.__default.MultisetUnion(_module._default.MultisetUnion$T, $LS($LZ), ys#Z#0));
            assume _module.__default.multiset__of#canCall(_module._default.MultisetUnion$T, a#Z#0)
               && _module.__default.MultisetUnion#canCall(_module._default.MultisetUnion$T, ys#Z#0);
            // CheckWellformedWithResult: any expression
            assume $Is(_module.__default.MultisetUnion(_module._default.MultisetUnion$T, $LS($LZ), xs#0), 
              TMultiSet(_module._default.MultisetUnion$T));
            return;
        }
        else
        {
            assume false;
        }

        assume false;
    }
}



// function declaration for _module._default.append
function _module.__default.append(_module._default.append$_T0: Ty, 
    $ly: LayerType, 
    xs#0: DatatypeType, 
    ys#0: DatatypeType)
   : DatatypeType
uses {
// consequence axiom for _module.__default.append
axiom 1 <= $FunctionContextHeight
   ==> (forall _module._default.append$_T0: Ty, 
      $ly: LayerType, 
      xs#0: DatatypeType, 
      ys#0: DatatypeType :: 
    { _module.__default.append(_module._default.append$_T0, $ly, xs#0, ys#0) } 
    _module.__default.append#canCall(_module._default.append$_T0, xs#0, ys#0)
         || (1 < $FunctionContextHeight
           && 
          $Is(xs#0, Tclass._module.List(_module._default.append$_T0))
           && $Is(ys#0, Tclass._module.List(_module._default.append$_T0)))
       ==> $Is(_module.__default.append(_module._default.append$_T0, $ly, xs#0, ys#0), 
        Tclass._module.List(_module._default.append$_T0)));
// alloc consequence axiom for _module.__default.append
axiom 1 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, 
      _module._default.append$_T0: Ty, 
      $ly: LayerType, 
      xs#0: DatatypeType, 
      ys#0: DatatypeType :: 
    { $IsAlloc(_module.__default.append(_module._default.append$_T0, $ly, xs#0, ys#0), 
        Tclass._module.List(_module._default.append$_T0), 
        $Heap) } 
    (_module.__default.append#canCall(_module._default.append$_T0, xs#0, ys#0)
           || (1 < $FunctionContextHeight
             && 
            $Is(xs#0, Tclass._module.List(_module._default.append$_T0))
             && $IsAlloc(xs#0, Tclass._module.List(_module._default.append$_T0), $Heap)
             && 
            $Is(ys#0, Tclass._module.List(_module._default.append$_T0))
             && $IsAlloc(ys#0, Tclass._module.List(_module._default.append$_T0), $Heap)))
         && $IsGoodHeap($Heap)
       ==> $IsAlloc(_module.__default.append(_module._default.append$_T0, $ly, xs#0, ys#0), 
        Tclass._module.List(_module._default.append$_T0), 
        $Heap));
// definition axiom for _module.__default.append (revealed)
axiom {:id "id36"} 1 <= $FunctionContextHeight
   ==> (forall _module._default.append$_T0: Ty, 
      $ly: LayerType, 
      xs#0: DatatypeType, 
      ys#0: DatatypeType :: 
    { _module.__default.append(_module._default.append$_T0, $LS($ly), xs#0, ys#0) } 
    _module.__default.append#canCall(_module._default.append$_T0, xs#0, ys#0)
         || (1 < $FunctionContextHeight
           && 
          $Is(xs#0, Tclass._module.List(_module._default.append$_T0))
           && $Is(ys#0, Tclass._module.List(_module._default.append$_T0)))
       ==> (!_module.List.Nil_q(xs#0)
           ==> (var xs'#1 := _module.List.tail(xs#0); 
            _module.__default.append#canCall(_module._default.append$_T0, xs'#1, ys#0)))
         && _module.__default.append(_module._default.append$_T0, $LS($ly), xs#0, ys#0)
           == (if _module.List.Nil_q(xs#0)
             then ys#0
             else (var xs'#0 := _module.List.tail(xs#0); 
              (var a#0 := _module.List.head(xs#0); 
                #_module.List.Cons(a#0, _module.__default.append(_module._default.append$_T0, $ly, xs'#0, ys#0))))));
// definition axiom for _module.__default.append for all literals (revealed)
axiom {:id "id37"} 1 <= $FunctionContextHeight
   ==> (forall _module._default.append$_T0: Ty, 
      $ly: LayerType, 
      xs#0: DatatypeType, 
      ys#0: DatatypeType :: 
    {:weight 3} { _module.__default.append(_module._default.append$_T0, $LS($ly), Lit(xs#0), Lit(ys#0)) } 
    _module.__default.append#canCall(_module._default.append$_T0, Lit(xs#0), Lit(ys#0))
         || (1 < $FunctionContextHeight
           && 
          $Is(xs#0, Tclass._module.List(_module._default.append$_T0))
           && $Is(ys#0, Tclass._module.List(_module._default.append$_T0)))
       ==> (!Lit(_module.List.Nil_q(Lit(xs#0)))
           ==> (var xs'#3 := Lit(_module.List.tail(Lit(xs#0))); 
            _module.__default.append#canCall(_module._default.append$_T0, xs'#3, Lit(ys#0))))
         && _module.__default.append(_module._default.append$_T0, $LS($ly), Lit(xs#0), Lit(ys#0))
           == (if _module.List.Nil_q(Lit(xs#0))
             then ys#0
             else (var xs'#2 := Lit(_module.List.tail(Lit(xs#0))); 
              (var a#2 := Lit(_module.List.head(Lit(xs#0))); 
                Lit(#_module.List.Cons(a#2, 
                    Lit(_module.__default.append(_module._default.append$_T0, $LS($ly), xs'#2, Lit(ys#0)))))))));
}

function _module.__default.append#canCall(_module._default.append$_T0: Ty, xs#0: DatatypeType, ys#0: DatatypeType) : bool;

// layer synonym axiom
axiom (forall _module._default.append$_T0: Ty, 
    $ly: LayerType, 
    xs#0: DatatypeType, 
    ys#0: DatatypeType :: 
  { _module.__default.append(_module._default.append$_T0, $LS($ly), xs#0, ys#0) } 
  _module.__default.append(_module._default.append$_T0, $LS($ly), xs#0, ys#0)
     == _module.__default.append(_module._default.append$_T0, $ly, xs#0, ys#0));

// fuel synonym axiom
axiom (forall _module._default.append$_T0: Ty, 
    $ly: LayerType, 
    xs#0: DatatypeType, 
    ys#0: DatatypeType :: 
  { _module.__default.append(_module._default.append$_T0, AsFuelBottom($ly), xs#0, ys#0) } 
  _module.__default.append(_module._default.append$_T0, $ly, xs#0, ys#0)
     == _module.__default.append(_module._default.append$_T0, $LZ, xs#0, ys#0));

function _module.__default.append#requires(Ty, LayerType, DatatypeType, DatatypeType) : bool;

// #requires axiom for _module.__default.append
axiom (forall _module._default.append$_T0: Ty, 
    $ly: LayerType, 
    xs#0: DatatypeType, 
    ys#0: DatatypeType :: 
  { _module.__default.append#requires(_module._default.append$_T0, $ly, xs#0, ys#0) } 
  $Is(xs#0, Tclass._module.List(_module._default.append$_T0))
       && $Is(ys#0, Tclass._module.List(_module._default.append$_T0))
     ==> _module.__default.append#requires(_module._default.append$_T0, $ly, xs#0, ys#0)
       == true);

procedure {:verboseName "append (well-formedness)"} CheckWellformed$$_module.__default.append(_module._default.append$_T0: Ty, 
    xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(_module._default.append$_T0)), 
    ys#0: DatatypeType
       where $Is(ys#0, Tclass._module.List(_module._default.append$_T0)));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "append (well-formedness)"} CheckWellformed$$_module.__default.append(_module._default.append$_T0: Ty, xs#0: DatatypeType, ys#0: DatatypeType)
{
  var $_ReadsFrame: [ref,Field]bool;
  var _mcc#0#0: Box;
  var _mcc#1#0: DatatypeType;
  var xs'#Z#0: DatatypeType;
  var let#0#0#0: DatatypeType;
  var a#Z#0: Box;
  var let#1#0#0: Box;
  var ##xs#0: DatatypeType;
  var ##ys#0: DatatypeType;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume $Is(_module.__default.append(_module._default.append$_T0, $LS($LZ), xs#0, ys#0), 
          Tclass._module.List(_module._default.append$_T0));
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        if (xs#0 == #_module.List.Nil())
        {
            assume {:id "id44"} _module.__default.append(_module._default.append$_T0, $LS($LZ), xs#0, ys#0)
               == ys#0;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(_module.__default.append(_module._default.append$_T0, $LS($LZ), xs#0, ys#0), 
              Tclass._module.List(_module._default.append$_T0));
            return;
        }
        else if (xs#0 == #_module.List.Cons(_mcc#0#0, _mcc#1#0))
        {
            assume $IsBox(_mcc#0#0, _module._default.append$_T0);
            assume $Is(_mcc#1#0, Tclass._module.List(_module._default.append$_T0));
            havoc xs'#Z#0;
            assume {:id "id38"} let#0#0#0 == _mcc#1#0;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(let#0#0#0, Tclass._module.List(_module._default.append$_T0));
            assume {:id "id39"} xs'#Z#0 == let#0#0#0;
            havoc a#Z#0;
            assume {:id "id40"} let#1#0#0 == _mcc#0#0;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $IsBox(let#1#0#0, _module._default.append$_T0);
            assume {:id "id41"} a#Z#0 == let#1#0#0;
            ##xs#0 := xs'#Z#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0, Tclass._module.List(_module._default.append$_T0), $Heap);
            ##ys#0 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0, Tclass._module.List(_module._default.append$_T0), $Heap);
            assert {:id "id42"} DtRank(##xs#0) < DtRank(xs#0)
               || (DtRank(##xs#0) == DtRank(xs#0) && DtRank(##ys#0) < DtRank(ys#0));
            assume _module.__default.append#canCall(_module._default.append$_T0, xs'#Z#0, ys#0);
            assume {:id "id43"} _module.__default.append(_module._default.append$_T0, $LS($LZ), xs#0, ys#0)
               == #_module.List.Cons(a#Z#0, 
                _module.__default.append(_module._default.append$_T0, $LS($LZ), xs'#Z#0, ys#0));
            assume _module.__default.append#canCall(_module._default.append$_T0, xs'#Z#0, ys#0);
            // CheckWellformedWithResult: any expression
            assume $Is(_module.__default.append(_module._default.append$_T0, $LS($LZ), xs#0, ys#0), 
              Tclass._module.List(_module._default.append$_T0));
            return;
        }
        else
        {
            assume false;
        }

        assume false;
    }
}



procedure {:verboseName "append_associative (well-formedness)"} CheckWellFormed$$_module.__default.append__associative(_module._default.append_associative$_T0: Ty, 
    xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(_module._default.append_associative$_T0))
         && $IsAlloc(xs#0, Tclass._module.List(_module._default.append_associative$_T0), $Heap)
         && $IsA#_module.List(xs#0), 
    ys#0: DatatypeType
       where $Is(ys#0, Tclass._module.List(_module._default.append_associative$_T0))
         && $IsAlloc(ys#0, Tclass._module.List(_module._default.append_associative$_T0), $Heap)
         && $IsA#_module.List(ys#0), 
    zs#0: DatatypeType
       where $Is(zs#0, Tclass._module.List(_module._default.append_associative$_T0))
         && $IsAlloc(zs#0, Tclass._module.List(_module._default.append_associative$_T0), $Heap)
         && $IsA#_module.List(zs#0));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "append_associative (call)"} Call$$_module.__default.append__associative(_module._default.append_associative$_T0: Ty, 
    xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(_module._default.append_associative$_T0))
         && $IsAlloc(xs#0, Tclass._module.List(_module._default.append_associative$_T0), $Heap)
         && $IsA#_module.List(xs#0), 
    ys#0: DatatypeType
       where $Is(ys#0, Tclass._module.List(_module._default.append_associative$_T0))
         && $IsAlloc(ys#0, Tclass._module.List(_module._default.append_associative$_T0), $Heap)
         && $IsA#_module.List(ys#0), 
    zs#0: DatatypeType
       where $Is(zs#0, Tclass._module.List(_module._default.append_associative$_T0))
         && $IsAlloc(zs#0, Tclass._module.List(_module._default.append_associative$_T0), $Heap)
         && $IsA#_module.List(zs#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#_module.List(_module.__default.append(_module._default.append_associative$_T0, 
        $LS($LZ), 
        xs#0, 
        _module.__default.append(_module._default.append_associative$_T0, $LS($LZ), ys#0, zs#0)))
     && $IsA#_module.List(_module.__default.append(_module._default.append_associative$_T0, 
        $LS($LZ), 
        _module.__default.append(_module._default.append_associative$_T0, $LS($LZ), xs#0, ys#0), 
        zs#0))
     && 
    _module.__default.append#canCall(_module._default.append_associative$_T0, ys#0, zs#0)
     && _module.__default.append#canCall(_module._default.append_associative$_T0, 
      xs#0, 
      _module.__default.append(_module._default.append_associative$_T0, $LS($LZ), ys#0, zs#0))
     && 
    _module.__default.append#canCall(_module._default.append_associative$_T0, xs#0, ys#0)
     && _module.__default.append#canCall(_module._default.append_associative$_T0, 
      _module.__default.append(_module._default.append_associative$_T0, $LS($LZ), xs#0, ys#0), 
      zs#0);
  ensures {:id "id46"} _module.List#Equal(_module.__default.append(_module._default.append_associative$_T0, 
      $LS($LS($LZ)), 
      xs#0, 
      _module.__default.append(_module._default.append_associative$_T0, $LS($LS($LZ)), ys#0, zs#0)), 
    _module.__default.append(_module._default.append_associative$_T0, 
      $LS($LS($LZ)), 
      _module.__default.append(_module._default.append_associative$_T0, $LS($LS($LZ)), xs#0, ys#0), 
      zs#0));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "append_associative (correctness)"} Impl$$_module.__default.append__associative(_module._default.append_associative$_T0: Ty, 
    xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(_module._default.append_associative$_T0))
         && $IsAlloc(xs#0, Tclass._module.List(_module._default.append_associative$_T0), $Heap)
         && $IsA#_module.List(xs#0), 
    ys#0: DatatypeType
       where $Is(ys#0, Tclass._module.List(_module._default.append_associative$_T0))
         && $IsAlloc(ys#0, Tclass._module.List(_module._default.append_associative$_T0), $Heap)
         && $IsA#_module.List(ys#0), 
    zs#0: DatatypeType
       where $Is(zs#0, Tclass._module.List(_module._default.append_associative$_T0))
         && $IsAlloc(zs#0, Tclass._module.List(_module._default.append_associative$_T0), $Heap)
         && $IsA#_module.List(zs#0))
   returns ($_reverifyPost: bool);
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#_module.List(_module.__default.append(_module._default.append_associative$_T0, 
        $LS($LZ), 
        xs#0, 
        _module.__default.append(_module._default.append_associative$_T0, $LS($LZ), ys#0, zs#0)))
     && $IsA#_module.List(_module.__default.append(_module._default.append_associative$_T0, 
        $LS($LZ), 
        _module.__default.append(_module._default.append_associative$_T0, $LS($LZ), xs#0, ys#0), 
        zs#0))
     && 
    _module.__default.append#canCall(_module._default.append_associative$_T0, ys#0, zs#0)
     && _module.__default.append#canCall(_module._default.append_associative$_T0, 
      xs#0, 
      _module.__default.append(_module._default.append_associative$_T0, $LS($LZ), ys#0, zs#0))
     && 
    _module.__default.append#canCall(_module._default.append_associative$_T0, xs#0, ys#0)
     && _module.__default.append#canCall(_module._default.append_associative$_T0, 
      _module.__default.append(_module._default.append_associative$_T0, $LS($LZ), xs#0, ys#0), 
      zs#0);
  ensures {:id "id47"} _module.List#Equal(_module.__default.append(_module._default.append_associative$_T0, 
      $LS($LS($LZ)), 
      xs#0, 
      _module.__default.append(_module._default.append_associative$_T0, $LS($LS($LZ)), ys#0, zs#0)), 
    _module.__default.append(_module._default.append_associative$_T0, 
      $LS($LS($LZ)), 
      _module.__default.append(_module._default.append_associative$_T0, $LS($LS($LZ)), xs#0, ys#0), 
      zs#0));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "append_associative (correctness)"} Impl$$_module.__default.append__associative(_module._default.append_associative$_T0: Ty, 
    xs#0: DatatypeType, 
    ys#0: DatatypeType, 
    zs#0: DatatypeType)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $initHeapForallStmt#0: Heap;

    // AddMethodImpl: append_associative, Impl$$_module.__default.append__associative
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume $IsA#_module.List(xs#0);
    assume $IsA#_module.List(ys#0);
    assume $IsA#_module.List(zs#0);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#xs0#0: DatatypeType, $ih#ys0#0: DatatypeType, $ih#zs0#0: DatatypeType :: 
      { _module.__default.append(_module._default.append_associative$_T0, 
          $LS($LZ), 
          _module.__default.append(_module._default.append_associative$_T0, $LS($LZ), $ih#xs0#0, $ih#ys0#0), 
          $ih#zs0#0) } 
        { _module.__default.append(_module._default.append_associative$_T0, 
          $LS($LZ), 
          $ih#xs0#0, 
          _module.__default.append(_module._default.append_associative$_T0, $LS($LZ), $ih#ys0#0, $ih#zs0#0)) } 
      $Is($ih#xs0#0, Tclass._module.List(_module._default.append_associative$_T0))
           && $Is($ih#ys0#0, Tclass._module.List(_module._default.append_associative$_T0))
           && $Is($ih#zs0#0, Tclass._module.List(_module._default.append_associative$_T0))
           && Lit(true)
           && (DtRank($ih#xs0#0) < DtRank(xs#0)
             || (DtRank($ih#xs0#0) == DtRank(xs#0)
               && (DtRank($ih#ys0#0) < DtRank(ys#0)
                 || (DtRank($ih#ys0#0) == DtRank(ys#0) && DtRank($ih#zs0#0) < DtRank(zs#0)))))
         ==> _module.List#Equal(_module.__default.append(_module._default.append_associative$_T0, 
            $LS($LZ), 
            $ih#xs0#0, 
            _module.__default.append(_module._default.append_associative$_T0, $LS($LZ), $ih#ys0#0, $ih#zs0#0)), 
          _module.__default.append(_module._default.append_associative$_T0, 
            $LS($LZ), 
            _module.__default.append(_module._default.append_associative$_T0, $LS($LZ), $ih#xs0#0, $ih#ys0#0), 
            $ih#zs0#0)));
    $_reverifyPost := false;
}



procedure {:verboseName "append_Nil (well-formedness)"} CheckWellFormed$$_module.__default.append__Nil(_module._default.append_Nil$_T0: Ty, 
    xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(_module._default.append_Nil$_T0))
         && $IsAlloc(xs#0, Tclass._module.List(_module._default.append_Nil$_T0), $Heap)
         && $IsA#_module.List(xs#0));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "append_Nil (call)"} Call$$_module.__default.append__Nil(_module._default.append_Nil$_T0: Ty, 
    xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(_module._default.append_Nil$_T0))
         && $IsAlloc(xs#0, Tclass._module.List(_module._default.append_Nil$_T0), $Heap)
         && $IsA#_module.List(xs#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#_module.List(_module.__default.append(_module._default.append_Nil$_T0, $LS($LZ), xs#0, Lit(#_module.List.Nil())))
     && $IsA#_module.List(xs#0)
     && _module.__default.append#canCall(_module._default.append_Nil$_T0, xs#0, Lit(#_module.List.Nil()));
  ensures {:id "id49"} _module.List#Equal(_module.__default.append(_module._default.append_Nil$_T0, $LS($LS($LZ)), xs#0, Lit(#_module.List.Nil())), 
    xs#0);
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "append_Nil (correctness)"} Impl$$_module.__default.append__Nil(_module._default.append_Nil$_T0: Ty, 
    xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(_module._default.append_Nil$_T0))
         && $IsAlloc(xs#0, Tclass._module.List(_module._default.append_Nil$_T0), $Heap)
         && $IsA#_module.List(xs#0))
   returns ($_reverifyPost: bool);
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#_module.List(_module.__default.append(_module._default.append_Nil$_T0, $LS($LZ), xs#0, Lit(#_module.List.Nil())))
     && $IsA#_module.List(xs#0)
     && _module.__default.append#canCall(_module._default.append_Nil$_T0, xs#0, Lit(#_module.List.Nil()));
  ensures {:id "id50"} _module.List#Equal(_module.__default.append(_module._default.append_Nil$_T0, $LS($LS($LZ)), xs#0, Lit(#_module.List.Nil())), 
    xs#0);
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "append_Nil (correctness)"} Impl$$_module.__default.append__Nil(_module._default.append_Nil$_T0: Ty, xs#0: DatatypeType)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $initHeapForallStmt#0: Heap;

    // AddMethodImpl: append_Nil, Impl$$_module.__default.append__Nil
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume $IsA#_module.List(xs#0);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#xs0#0: DatatypeType :: 
      { _module.__default.append(_module._default.append_Nil$_T0, $LS($LZ), $ih#xs0#0, Lit(#_module.List.Nil())) } 
      $Is($ih#xs0#0, Tclass._module.List(_module._default.append_Nil$_T0))
           && Lit(true)
           && DtRank($ih#xs0#0) < DtRank(xs#0)
         ==> _module.List#Equal(_module.__default.append(_module._default.append_Nil$_T0, $LS($LZ), $ih#xs0#0, Lit(#_module.List.Nil())), 
          $ih#xs0#0));
    $_reverifyPost := false;
}



// function declaration for _module._default.flatten
function _module.__default.flatten(_module._default.flatten$_T0: Ty, $ly: LayerType, x#0: DatatypeType)
   : DatatypeType
uses {
// consequence axiom for _module.__default.flatten
axiom 2 <= $FunctionContextHeight
   ==> (forall _module._default.flatten$_T0: Ty, $ly: LayerType, x#0: DatatypeType :: 
    { _module.__default.flatten(_module._default.flatten$_T0, $ly, x#0) } 
    _module.__default.flatten#canCall(_module._default.flatten$_T0, x#0)
         || (2 < $FunctionContextHeight
           && $Is(x#0, Tclass._module.List(Tclass._module.List(_module._default.flatten$_T0))))
       ==> $Is(_module.__default.flatten(_module._default.flatten$_T0, $ly, x#0), 
        Tclass._module.List(_module._default.flatten$_T0)));
// alloc consequence axiom for _module.__default.flatten
axiom 2 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, _module._default.flatten$_T0: Ty, $ly: LayerType, x#0: DatatypeType :: 
    { $IsAlloc(_module.__default.flatten(_module._default.flatten$_T0, $ly, x#0), 
        Tclass._module.List(_module._default.flatten$_T0), 
        $Heap) } 
    (_module.__default.flatten#canCall(_module._default.flatten$_T0, x#0)
           || (2 < $FunctionContextHeight
             && 
            $Is(x#0, Tclass._module.List(Tclass._module.List(_module._default.flatten$_T0)))
             && $IsAlloc(x#0, 
              Tclass._module.List(Tclass._module.List(_module._default.flatten$_T0)), 
              $Heap)))
         && $IsGoodHeap($Heap)
       ==> $IsAlloc(_module.__default.flatten(_module._default.flatten$_T0, $ly, x#0), 
        Tclass._module.List(_module._default.flatten$_T0), 
        $Heap));
// definition axiom for _module.__default.flatten (revealed)
axiom {:id "id51"} 2 <= $FunctionContextHeight
   ==> (forall _module._default.flatten$_T0: Ty, $ly: LayerType, x#0: DatatypeType :: 
    { _module.__default.flatten(_module._default.flatten$_T0, $LS($ly), x#0) } 
    _module.__default.flatten#canCall(_module._default.flatten$_T0, x#0)
         || (2 < $FunctionContextHeight
           && $Is(x#0, Tclass._module.List(Tclass._module.List(_module._default.flatten$_T0))))
       ==> (!_module.List.Nil_q(x#0)
           ==> (var y#1 := _module.List.tail(x#0); 
            (var xs#1 := $Unbox(_module.List.head(x#0)): DatatypeType; 
              _module.__default.flatten#canCall(_module._default.flatten$_T0, y#1)
                 && _module.__default.append#canCall(_module._default.flatten$_T0, 
                  xs#1, 
                  _module.__default.flatten(_module._default.flatten$_T0, $ly, y#1)))))
         && _module.__default.flatten(_module._default.flatten$_T0, $LS($ly), x#0)
           == (if _module.List.Nil_q(x#0)
             then #_module.List.Nil()
             else (var y#0 := _module.List.tail(x#0); 
              (var xs#0 := $Unbox(_module.List.head(x#0)): DatatypeType; 
                _module.__default.append(_module._default.flatten$_T0, 
                  $LS($LZ), 
                  xs#0, 
                  _module.__default.flatten(_module._default.flatten$_T0, $ly, y#0))))));
// definition axiom for _module.__default.flatten for all literals (revealed)
axiom {:id "id52"} 2 <= $FunctionContextHeight
   ==> (forall _module._default.flatten$_T0: Ty, $ly: LayerType, x#0: DatatypeType :: 
    {:weight 3} { _module.__default.flatten(_module._default.flatten$_T0, $LS($ly), Lit(x#0)) } 
    _module.__default.flatten#canCall(_module._default.flatten$_T0, Lit(x#0))
         || (2 < $FunctionContextHeight
           && $Is(x#0, Tclass._module.List(Tclass._module.List(_module._default.flatten$_T0))))
       ==> (!Lit(_module.List.Nil_q(Lit(x#0)))
           ==> (var y#3 := Lit(_module.List.tail(Lit(x#0))); 
            (var xs#3 := Lit($Unbox(_module.List.head(Lit(x#0))): DatatypeType); 
              _module.__default.flatten#canCall(_module._default.flatten$_T0, y#3)
                 && _module.__default.append#canCall(_module._default.flatten$_T0, 
                  xs#3, 
                  _module.__default.flatten(_module._default.flatten$_T0, $LS($ly), y#3)))))
         && _module.__default.flatten(_module._default.flatten$_T0, $LS($ly), Lit(x#0))
           == (if _module.List.Nil_q(Lit(x#0))
             then #_module.List.Nil()
             else (var y#2 := Lit(_module.List.tail(Lit(x#0))); 
              (var xs#2 := Lit($Unbox(_module.List.head(Lit(x#0))): DatatypeType); 
                Lit(_module.__default.append(_module._default.flatten$_T0, 
                    $LS($LZ), 
                    xs#2, 
                    Lit(_module.__default.flatten(_module._default.flatten$_T0, $LS($ly), y#2))))))));
}

function _module.__default.flatten#canCall(_module._default.flatten$_T0: Ty, x#0: DatatypeType) : bool;

// layer synonym axiom
axiom (forall _module._default.flatten$_T0: Ty, $ly: LayerType, x#0: DatatypeType :: 
  { _module.__default.flatten(_module._default.flatten$_T0, $LS($ly), x#0) } 
  _module.__default.flatten(_module._default.flatten$_T0, $LS($ly), x#0)
     == _module.__default.flatten(_module._default.flatten$_T0, $ly, x#0));

// fuel synonym axiom
axiom (forall _module._default.flatten$_T0: Ty, $ly: LayerType, x#0: DatatypeType :: 
  { _module.__default.flatten(_module._default.flatten$_T0, AsFuelBottom($ly), x#0) } 
  _module.__default.flatten(_module._default.flatten$_T0, $ly, x#0)
     == _module.__default.flatten(_module._default.flatten$_T0, $LZ, x#0));

function _module.__default.flatten#requires(Ty, LayerType, DatatypeType) : bool;

// #requires axiom for _module.__default.flatten
axiom (forall _module._default.flatten$_T0: Ty, $ly: LayerType, x#0: DatatypeType :: 
  { _module.__default.flatten#requires(_module._default.flatten$_T0, $ly, x#0) } 
  $Is(x#0, Tclass._module.List(Tclass._module.List(_module._default.flatten$_T0)))
     ==> _module.__default.flatten#requires(_module._default.flatten$_T0, $ly, x#0)
       == true);

procedure {:verboseName "flatten (well-formedness)"} CheckWellformed$$_module.__default.flatten(_module._default.flatten$_T0: Ty, 
    x#0: DatatypeType
       where $Is(x#0, Tclass._module.List(Tclass._module.List(_module._default.flatten$_T0))));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "flatten (well-formedness)"} CheckWellformed$$_module.__default.flatten(_module._default.flatten$_T0: Ty, x#0: DatatypeType)
{
  var $_ReadsFrame: [ref,Field]bool;
  var _mcc#0#0: DatatypeType;
  var _mcc#1#0: DatatypeType;
  var y#Z#0: DatatypeType;
  var let#0#0#0: DatatypeType;
  var xs#Z#0: DatatypeType;
  var let#1#0#0: DatatypeType;
  var ##xs#0: DatatypeType;
  var ##ys#0: DatatypeType;
  var ##x#0: DatatypeType;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume $Is(_module.__default.flatten(_module._default.flatten$_T0, $LS($LZ), x#0), 
          Tclass._module.List(_module._default.flatten$_T0));
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        if (x#0 == #_module.List.Nil())
        {
            assume {:id "id59"} _module.__default.flatten(_module._default.flatten$_T0, $LS($LZ), x#0)
               == Lit(#_module.List.Nil());
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(_module.__default.flatten(_module._default.flatten$_T0, $LS($LZ), x#0), 
              Tclass._module.List(_module._default.flatten$_T0));
            return;
        }
        else if (x#0 == #_module.List.Cons($Box(_mcc#0#0), _mcc#1#0))
        {
            assume $Is(_mcc#0#0, Tclass._module.List(_module._default.flatten$_T0));
            assume $Is(_mcc#1#0, Tclass._module.List(Tclass._module.List(_module._default.flatten$_T0)));
            havoc y#Z#0;
            assume {:id "id53"} let#0#0#0 == _mcc#1#0;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(let#0#0#0, 
              Tclass._module.List(Tclass._module.List(_module._default.flatten$_T0)));
            assume {:id "id54"} y#Z#0 == let#0#0#0;
            havoc xs#Z#0;
            assume {:id "id55"} let#1#0#0 == _mcc#0#0;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(let#1#0#0, Tclass._module.List(_module._default.flatten$_T0));
            assume {:id "id56"} xs#Z#0 == let#1#0#0;
            ##xs#0 := xs#Z#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0, Tclass._module.List(_module._default.flatten$_T0), $Heap);
            ##x#0 := y#Z#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#0, 
              Tclass._module.List(Tclass._module.List(_module._default.flatten$_T0)), 
              $Heap);
            assert {:id "id57"} DtRank(##x#0) < DtRank(x#0);
            assume _module.__default.flatten#canCall(_module._default.flatten$_T0, y#Z#0);
            ##ys#0 := _module.__default.flatten(_module._default.flatten$_T0, $LS($LZ), y#Z#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0, Tclass._module.List(_module._default.flatten$_T0), $Heap);
            assume _module.__default.append#canCall(_module._default.flatten$_T0, 
              xs#Z#0, 
              _module.__default.flatten(_module._default.flatten$_T0, $LS($LZ), y#Z#0));
            assume {:id "id58"} _module.__default.flatten(_module._default.flatten$_T0, $LS($LZ), x#0)
               == _module.__default.append(_module._default.flatten$_T0, 
                $LS($LZ), 
                xs#Z#0, 
                _module.__default.flatten(_module._default.flatten$_T0, $LS($LZ), y#Z#0));
            assume _module.__default.flatten#canCall(_module._default.flatten$_T0, y#Z#0)
               && _module.__default.append#canCall(_module._default.flatten$_T0, 
                xs#Z#0, 
                _module.__default.flatten(_module._default.flatten$_T0, $LS($LZ), y#Z#0));
            // CheckWellformedWithResult: any expression
            assume $Is(_module.__default.flatten(_module._default.flatten$_T0, $LS($LZ), x#0), 
              Tclass._module.List(_module._default.flatten$_T0));
            return;
        }
        else
        {
            assume false;
        }

        assume false;
    }
}



// function declaration for _module._default.key
function _module.__default.key(g#0: Box) : int;

function _module.__default.key#canCall(g#0: Box) : bool;

function Tclass._module.G() : Ty
uses {
axiom $AlwaysAllocated(Tclass._module.G());
}

function _module.__default.key#requires(Box) : bool;

// #requires axiom for _module.__default.key
axiom (forall g#0: Box :: 
  { _module.__default.key#requires(g#0) } 
  $IsBox(g#0, Tclass._module.G()) ==> _module.__default.key#requires(g#0) == true);

procedure {:verboseName "key (well-formedness)"} CheckWellformed$$_module.__default.key(g#0: Box where $IsBox(g#0, Tclass._module.G()));
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for _module._default.Below
function _module.__default.Below(a#0: Box, b#0: Box) : bool
uses {
// definition axiom for _module.__default.Below (revealed)
axiom {:id "id60"} 1 <= $FunctionContextHeight
   ==> (forall a#0: Box, b#0: Box :: 
    { _module.__default.Below(a#0, b#0) } 
    _module.__default.Below#canCall(a#0, b#0)
         || (1 < $FunctionContextHeight
           && 
          $IsBox(a#0, Tclass._module.G())
           && $IsBox(b#0, Tclass._module.G()))
       ==> _module.__default.key#canCall(a#0)
         && _module.__default.key#canCall(b#0)
         && _module.__default.Below(a#0, b#0)
           == (_module.__default.key(a#0) <= _module.__default.key(b#0)));
// definition axiom for _module.__default.Below for all literals (revealed)
axiom {:id "id61"} 1 <= $FunctionContextHeight
   ==> (forall a#0: Box, b#0: Box :: 
    {:weight 3} { _module.__default.Below(Lit(a#0), Lit(b#0)) } 
    _module.__default.Below#canCall(Lit(a#0), Lit(b#0))
         || (1 < $FunctionContextHeight
           && 
          $IsBox(a#0, Tclass._module.G())
           && $IsBox(b#0, Tclass._module.G()))
       ==> _module.__default.key#canCall(Lit(a#0))
         && _module.__default.key#canCall(Lit(b#0))
         && _module.__default.Below(Lit(a#0), Lit(b#0))
           == (_module.__default.key(Lit(a#0)) <= _module.__default.key(Lit(b#0))));
}

function _module.__default.Below#canCall(a#0: Box, b#0: Box) : bool;

function _module.__default.Below#requires(Box, Box) : bool;

// #requires axiom for _module.__default.Below
axiom (forall a#0: Box, b#0: Box :: 
  { _module.__default.Below#requires(a#0, b#0) } 
  $IsBox(a#0, Tclass._module.G()) && $IsBox(b#0, Tclass._module.G())
     ==> _module.__default.Below#requires(a#0, b#0) == true);

procedure {:verboseName "Below (well-formedness)"} CheckWellformed$$_module.__default.Below(a#0: Box where $IsBox(a#0, Tclass._module.G()), 
    b#0: Box where $IsBox(b#0, Tclass._module.G()));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for _module._default.sort
function _module.__default.sort(xs#0: DatatypeType) : DatatypeType
uses {
// consequence axiom for _module.__default.sort
axiom 5 <= $FunctionContextHeight
   ==> (forall xs#0: DatatypeType :: 
    { _module.__default.sort(xs#0) } 
    _module.__default.sort#canCall(xs#0)
         || (5 < $FunctionContextHeight
           && $Is(xs#0, Tclass._module.List(Tclass._module.G())))
       ==> $Is(_module.__default.sort(xs#0), Tclass._module.List(Tclass._module.G())));
// definition axiom for _module.__default.sort (revealed)
axiom {:id "id63"} 5 <= $FunctionContextHeight
   ==> (forall xs#0: DatatypeType :: 
    { _module.__default.sort(xs#0) } 
    _module.__default.sort#canCall(xs#0)
         || (5 < $FunctionContextHeight
           && $Is(xs#0, Tclass._module.List(Tclass._module.G())))
       ==> _module.__default.sequences#canCall(xs#0)
         && _module.__default.mergeAll#canCall(_module.__default.sequences($LS($LZ), xs#0))
         && _module.__default.sort(xs#0)
           == _module.__default.mergeAll($LS($LZ), _module.__default.sequences($LS($LZ), xs#0)));
// definition axiom for _module.__default.sort for all literals (revealed)
axiom {:id "id64"} 5 <= $FunctionContextHeight
   ==> (forall xs#0: DatatypeType :: 
    {:weight 3} { _module.__default.sort(Lit(xs#0)) } 
    _module.__default.sort#canCall(Lit(xs#0))
         || (5 < $FunctionContextHeight
           && $Is(xs#0, Tclass._module.List(Tclass._module.G())))
       ==> _module.__default.sequences#canCall(Lit(xs#0))
         && _module.__default.mergeAll#canCall(Lit(_module.__default.sequences($LS($LZ), Lit(xs#0))))
         && _module.__default.sort(Lit(xs#0))
           == Lit(_module.__default.mergeAll($LS($LZ), Lit(_module.__default.sequences($LS($LZ), Lit(xs#0))))));
}

function _module.__default.sort#canCall(xs#0: DatatypeType) : bool;

function _module.__default.sort#requires(DatatypeType) : bool;

// #requires axiom for _module.__default.sort
axiom (forall xs#0: DatatypeType :: 
  { _module.__default.sort#requires(xs#0) } 
  $Is(xs#0, Tclass._module.List(Tclass._module.G()))
     ==> _module.__default.sort#requires(xs#0) == true);

procedure {:verboseName "sort (well-formedness)"} CheckWellformed$$_module.__default.sort(xs#0: DatatypeType where $Is(xs#0, Tclass._module.List(Tclass._module.G())));
  free requires 5 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "sort (well-formedness)"} CheckWellformed$$_module.__default.sort(xs#0: DatatypeType)
{
  var $_ReadsFrame: [ref,Field]bool;
  var ##x#0: DatatypeType;
  var ##xs#0: DatatypeType;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume $Is(_module.__default.sort(xs#0), Tclass._module.List(Tclass._module.G()));
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        ##xs#0 := xs#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##xs#0, Tclass._module.List(Tclass._module.G()), $Heap);
        assume _module.__default.sequences#canCall(xs#0);
        ##x#0 := _module.__default.sequences($LS($LZ), xs#0);
        // assume allocatedness for argument to function
        assume $IsAlloc(##x#0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
        assert {:id "id65"} {:subsumption 0} !_module.List#Equal(##x#0, #_module.List.Nil());
        assume !_module.List#Equal(##x#0, #_module.List.Nil());
        assume _module.__default.mergeAll#canCall(_module.__default.sequences($LS($LZ), xs#0));
        assume {:id "id66"} _module.__default.sort(xs#0)
           == _module.__default.mergeAll($LS($LZ), _module.__default.sequences($LS($LZ), xs#0));
        assume _module.__default.sequences#canCall(xs#0)
           && _module.__default.mergeAll#canCall(_module.__default.sequences($LS($LZ), xs#0));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.__default.sort(xs#0), Tclass._module.List(Tclass._module.G()));
        return;

        assume false;
    }
}



// function declaration for _module._default.sequences
function _module.__default.sequences($ly: LayerType, xs#0: DatatypeType) : DatatypeType
uses {
// consequence axiom for _module.__default.sequences
axiom 2 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, xs#0: DatatypeType :: 
    { _module.__default.sequences($ly, xs#0) } 
    _module.__default.sequences#canCall(xs#0)
         || (2 < $FunctionContextHeight
           && $Is(xs#0, Tclass._module.List(Tclass._module.G())))
       ==> !_module.List#Equal(_module.__default.sequences($ly, xs#0), #_module.List.Nil())
         && $Is(_module.__default.sequences($ly, xs#0), 
          Tclass._module.List(Tclass._module.List(Tclass._module.G()))));
// definition axiom for _module.__default.sequences (revealed)
axiom {:id "id67"} 2 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, xs#0: DatatypeType :: 
    { _module.__default.sequences($LS($ly), xs#0) } 
    _module.__default.sequences#canCall(xs#0)
         || (2 < $FunctionContextHeight
           && $Is(xs#0, Tclass._module.List(Tclass._module.G())))
       ==> (!_module.List.Nil_q(xs#0)
           ==> (var ys#1 := _module.List.tail(xs#0); 
            (var a#1 := _module.List.head(xs#0); 
              !_module.List.Nil_q(ys#1)
                 ==> (var zs#1 := _module.List.tail(ys#1); 
                  (var b#1 := _module.List.head(ys#1); 
                    _module.__default.Below#canCall(a#1, b#1)
                       && (!_module.__default.Below(a#1, b#1)
                         ==> _module.__default.descending#canCall(b#1, #_module.List.Cons(a#1, Lit(#_module.List.Nil())), zs#1))
                       && (_module.__default.Below(a#1, b#1)
                         ==> _module.__default.ascending#canCall(b#1, #_module.List.Cons(a#1, Lit(#_module.List.Nil())), zs#1)))))))
         && _module.__default.sequences($LS($ly), xs#0)
           == (if _module.List.Nil_q(xs#0)
             then #_module.List.Cons($Box(xs#0), Lit(#_module.List.Nil()))
             else (var ys#0 := _module.List.tail(xs#0); 
              (var a#0 := _module.List.head(xs#0); 
                (if _module.List.Nil_q(ys#0)
                   then #_module.List.Cons($Box(xs#0), Lit(#_module.List.Nil()))
                   else (var zs#0 := _module.List.tail(ys#0); 
                    (var b#0 := _module.List.head(ys#0); 
                      (if !_module.__default.Below(a#0, b#0)
                         then _module.__default.descending($ly, b#0, #_module.List.Cons(a#0, Lit(#_module.List.Nil())), zs#0)
                         else _module.__default.ascending($ly, b#0, #_module.List.Cons(a#0, Lit(#_module.List.Nil())), zs#0)))))))));
// definition axiom for _module.__default.sequences for all literals (revealed)
axiom {:id "id68"} 2 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, xs#0: DatatypeType :: 
    {:weight 3} { _module.__default.sequences($LS($ly), Lit(xs#0)) } 
    _module.__default.sequences#canCall(Lit(xs#0))
         || (2 < $FunctionContextHeight
           && $Is(xs#0, Tclass._module.List(Tclass._module.G())))
       ==> (!Lit(_module.List.Nil_q(Lit(xs#0)))
           ==> (var ys#3 := Lit(_module.List.tail(Lit(xs#0))); 
            (var a#3 := Lit(_module.List.head(Lit(xs#0))); 
              !_module.List.Nil_q(ys#3)
                 ==> (var zs#3 := _module.List.tail(ys#3); 
                  (var b#3 := _module.List.head(ys#3); 
                    _module.__default.Below#canCall(a#3, b#3)
                       && (!_module.__default.Below(a#3, b#3)
                         ==> _module.__default.descending#canCall(b#3, #_module.List.Cons(a#3, Lit(#_module.List.Nil())), zs#3))
                       && (_module.__default.Below(a#3, b#3)
                         ==> _module.__default.ascending#canCall(b#3, #_module.List.Cons(a#3, Lit(#_module.List.Nil())), zs#3)))))))
         && _module.__default.sequences($LS($ly), Lit(xs#0))
           == (if _module.List.Nil_q(Lit(xs#0))
             then #_module.List.Cons($Box(Lit(xs#0)), Lit(#_module.List.Nil()))
             else (var ys#2 := Lit(_module.List.tail(Lit(xs#0))); 
              (var a#2 := Lit(_module.List.head(Lit(xs#0))); 
                (if _module.List.Nil_q(ys#2)
                   then #_module.List.Cons($Box(Lit(xs#0)), Lit(#_module.List.Nil()))
                   else (var zs#2 := Lit(_module.List.tail(ys#2)); 
                    (var b#2 := Lit(_module.List.head(ys#2)); 
                      (if !Lit(_module.__default.Below(a#2, b#2))
                         then _module.__default.descending($LS($ly), b#2, Lit(#_module.List.Cons(a#2, Lit(#_module.List.Nil()))), zs#2)
                         else _module.__default.ascending($LS($ly), b#2, Lit(#_module.List.Cons(a#2, Lit(#_module.List.Nil()))), zs#2)))))))));
}

function _module.__default.sequences#canCall(xs#0: DatatypeType) : bool;

// layer synonym axiom
axiom (forall $ly: LayerType, xs#0: DatatypeType :: 
  { _module.__default.sequences($LS($ly), xs#0) } 
  _module.__default.sequences($LS($ly), xs#0)
     == _module.__default.sequences($ly, xs#0));

// fuel synonym axiom
axiom (forall $ly: LayerType, xs#0: DatatypeType :: 
  { _module.__default.sequences(AsFuelBottom($ly), xs#0) } 
  _module.__default.sequences($ly, xs#0) == _module.__default.sequences($LZ, xs#0));

function _module.__default.sequences#requires(LayerType, DatatypeType) : bool;

// #requires axiom for _module.__default.sequences
axiom (forall $ly: LayerType, xs#0: DatatypeType :: 
  { _module.__default.sequences#requires($ly, xs#0) } 
  $Is(xs#0, Tclass._module.List(Tclass._module.G()))
     ==> _module.__default.sequences#requires($ly, xs#0) == true);

procedure {:verboseName "sequences (well-formedness)"} CheckWellformed$$_module.__default.sequences(xs#0: DatatypeType where $Is(xs#0, Tclass._module.List(Tclass._module.G())));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;
  ensures {:id "id69"} !_module.List#Equal(_module.__default.sequences($LS($LS($LZ)), xs#0), #_module.List.Nil());



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "sequences (well-formedness)"} CheckWellformed$$_module.__default.sequences(xs#0: DatatypeType)
{
  var $_ReadsFrame: [ref,Field]bool;
  var ##xs#0: DatatypeType;
  var _mcc#0#0: Box;
  var _mcc#1#0: DatatypeType;
  var ys#Z#0: DatatypeType;
  var let#0#0#0: DatatypeType;
  var a#Z#0: Box;
  var let#1#0#0: Box;
  var _mcc#2#0: Box;
  var _mcc#3#0: DatatypeType;
  var zs#Z#0: DatatypeType;
  var let#2#0#0: DatatypeType;
  var b#Z#0: Box;
  var let#3#0#0: Box;
  var ##a#0: Box;
  var ##b#0: Box;
  var ##a#1: Box;
  var ##xs#1: DatatypeType;
  var ##ys#0: DatatypeType;
  var ##a#2: Box;
  var ##xs#2: DatatypeType;
  var ##ys#1: DatatypeType;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume $Is(_module.__default.sequences($LS($LZ), xs#0), 
          Tclass._module.List(Tclass._module.List(Tclass._module.G())));
        ##xs#0 := xs#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##xs#0, Tclass._module.List(Tclass._module.G()), $Heap);
        assert {:id "id70"} 0 <= LitInt(0) || DtRank(##xs#0) < DtRank(xs#0) || LitInt(0) == LitInt(0);
        assert {:id "id71"} _module.List#Equal(xs#0, xs#0)
           || 
          DtRank(##xs#0) < DtRank(xs#0)
           || (DtRank(##xs#0) == DtRank(xs#0) && LitInt(0) < LitInt(0));
        assume _module.List#Equal(xs#0, xs#0) || _module.__default.sequences#canCall(xs#0);
        assume {:id "id72"} !_module.List#Equal(_module.__default.sequences($LS($LZ), xs#0), #_module.List.Nil());
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        if (xs#0 == #_module.List.Nil())
        {
            assume {:id "id86"} _module.__default.sequences($LS($LZ), xs#0)
               == #_module.List.Cons($Box(xs#0), Lit(#_module.List.Nil()));
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(_module.__default.sequences($LS($LZ), xs#0), 
              Tclass._module.List(Tclass._module.List(Tclass._module.G())));
            return;
        }
        else if (xs#0 == #_module.List.Cons(_mcc#0#0, _mcc#1#0))
        {
            assume $IsBox(_mcc#0#0, Tclass._module.G());
            assume $Is(_mcc#1#0, Tclass._module.List(Tclass._module.G()));
            havoc ys#Z#0;
            assume {:id "id73"} let#0#0#0 == _mcc#1#0;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(let#0#0#0, Tclass._module.List(Tclass._module.G()));
            assume {:id "id74"} ys#Z#0 == let#0#0#0;
            havoc a#Z#0;
            assume {:id "id75"} let#1#0#0 == _mcc#0#0;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $IsBox(let#1#0#0, Tclass._module.G());
            assume {:id "id76"} a#Z#0 == let#1#0#0;
            if (ys#Z#0 == #_module.List.Nil())
            {
                assume {:id "id85"} _module.__default.sequences($LS($LZ), xs#0)
                   == #_module.List.Cons($Box(xs#0), Lit(#_module.List.Nil()));
                assume true;
                // CheckWellformedWithResult: any expression
                assume $Is(_module.__default.sequences($LS($LZ), xs#0), 
                  Tclass._module.List(Tclass._module.List(Tclass._module.G())));
                return;
            }
            else if (ys#Z#0 == #_module.List.Cons(_mcc#2#0, _mcc#3#0))
            {
                assume $IsBox(_mcc#2#0, Tclass._module.G());
                assume $Is(_mcc#3#0, Tclass._module.List(Tclass._module.G()));
                havoc zs#Z#0;
                assume {:id "id77"} let#2#0#0 == _mcc#3#0;
                assume true;
                // CheckWellformedWithResult: any expression
                assume $Is(let#2#0#0, Tclass._module.List(Tclass._module.G()));
                assume {:id "id78"} zs#Z#0 == let#2#0#0;
                havoc b#Z#0;
                assume {:id "id79"} let#3#0#0 == _mcc#2#0;
                assume true;
                // CheckWellformedWithResult: any expression
                assume $IsBox(let#3#0#0, Tclass._module.G());
                assume {:id "id80"} b#Z#0 == let#3#0#0;
                ##a#0 := a#Z#0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##a#0, Tclass._module.G(), $Heap);
                ##b#0 := b#Z#0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##b#0, Tclass._module.G(), $Heap);
                assume _module.__default.Below#canCall(a#Z#0, b#Z#0);
                if (!_module.__default.Below(a#Z#0, b#Z#0))
                {
                    ##a#1 := b#Z#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##a#1, Tclass._module.G(), $Heap);
                    ##xs#1 := #_module.List.Cons(a#Z#0, Lit(#_module.List.Nil()));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#1, Tclass._module.List(Tclass._module.G()), $Heap);
                    ##ys#0 := zs#Z#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##ys#0, Tclass._module.List(Tclass._module.G()), $Heap);
                    assert {:id "id81"} DtRank(##ys#0) < DtRank(xs#0);
                    assume _module.__default.descending#canCall(b#Z#0, #_module.List.Cons(a#Z#0, Lit(#_module.List.Nil())), zs#Z#0);
                    assume {:id "id82"} _module.__default.sequences($LS($LZ), xs#0)
                       == _module.__default.descending($LS($LZ), b#Z#0, #_module.List.Cons(a#Z#0, Lit(#_module.List.Nil())), zs#Z#0);
                    assume _module.__default.descending#canCall(b#Z#0, #_module.List.Cons(a#Z#0, Lit(#_module.List.Nil())), zs#Z#0);
                    // CheckWellformedWithResult: any expression
                    assume $Is(_module.__default.sequences($LS($LZ), xs#0), 
                      Tclass._module.List(Tclass._module.List(Tclass._module.G())));
                    return;
                }
                else
                {
                    ##a#2 := b#Z#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##a#2, Tclass._module.G(), $Heap);
                    ##xs#2 := #_module.List.Cons(a#Z#0, Lit(#_module.List.Nil()));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#2, Tclass._module.List(Tclass._module.G()), $Heap);
                    ##ys#1 := zs#Z#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##ys#1, Tclass._module.List(Tclass._module.G()), $Heap);
                    assert {:id "id83"} DtRank(##ys#1) < DtRank(xs#0);
                    assume _module.__default.ascending#canCall(b#Z#0, #_module.List.Cons(a#Z#0, Lit(#_module.List.Nil())), zs#Z#0);
                    assume {:id "id84"} _module.__default.sequences($LS($LZ), xs#0)
                       == _module.__default.ascending($LS($LZ), b#Z#0, #_module.List.Cons(a#Z#0, Lit(#_module.List.Nil())), zs#Z#0);
                    assume _module.__default.ascending#canCall(b#Z#0, #_module.List.Cons(a#Z#0, Lit(#_module.List.Nil())), zs#Z#0);
                    // CheckWellformedWithResult: any expression
                    assume $Is(_module.__default.sequences($LS($LZ), xs#0), 
                      Tclass._module.List(Tclass._module.List(Tclass._module.G())));
                    return;
                }
            }
            else
            {
                assume false;
            }
        }
        else
        {
            assume false;
        }

        assume false;
    }
}



// function declaration for _module._default.descending
function _module.__default.descending($ly: LayerType, a#0: Box, xs#0: DatatypeType, ys#0: DatatypeType) : DatatypeType
uses {
// consequence axiom for _module.__default.descending
axiom 2 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, a#0: Box, xs#0: DatatypeType, ys#0: DatatypeType :: 
    { _module.__default.descending($ly, a#0, xs#0, ys#0) } 
    _module.__default.descending#canCall(a#0, xs#0, ys#0)
         || (2 < $FunctionContextHeight
           && 
          $IsBox(a#0, Tclass._module.G())
           && $Is(xs#0, Tclass._module.List(Tclass._module.G()))
           && $Is(ys#0, Tclass._module.List(Tclass._module.G())))
       ==> !_module.List#Equal(_module.__default.descending($ly, a#0, xs#0, ys#0), #_module.List.Nil())
         && $Is(_module.__default.descending($ly, a#0, xs#0, ys#0), 
          Tclass._module.List(Tclass._module.List(Tclass._module.G()))));
// definition axiom for _module.__default.descending (revealed)
axiom {:id "id87"} 2 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, a#0: Box, xs#0: DatatypeType, ys#0: DatatypeType :: 
    { _module.__default.descending($LS($ly), a#0, xs#0, ys#0) } 
    _module.__default.descending#canCall(a#0, xs#0, ys#0)
         || (2 < $FunctionContextHeight
           && 
          $IsBox(a#0, Tclass._module.G())
           && $Is(xs#0, Tclass._module.List(Tclass._module.G()))
           && $Is(ys#0, Tclass._module.List(Tclass._module.G())))
       ==> (_module.List.Cons_q(ys#0)
           ==> _module.__default.Below#canCall(a#0, _module.List.head(ys#0)))
         && (_module.List.Cons_q(ys#0)
             && !_module.__default.Below(a#0, _module.List.head(ys#0))
           ==> _module.__default.descending#canCall(_module.List.head(ys#0), #_module.List.Cons(a#0, xs#0), _module.List.tail(ys#0)))
         && (!(_module.List.Cons_q(ys#0)
             && !_module.__default.Below(a#0, _module.List.head(ys#0)))
           ==> _module.__default.sequences#canCall(ys#0))
         && _module.__default.descending($LS($ly), a#0, xs#0, ys#0)
           == (if _module.List.Cons_q(ys#0)
               && !_module.__default.Below(a#0, _module.List.head(ys#0))
             then _module.__default.descending($ly, 
              _module.List.head(ys#0), 
              #_module.List.Cons(a#0, xs#0), 
              _module.List.tail(ys#0))
             else #_module.List.Cons($Box(#_module.List.Cons(a#0, xs#0)), _module.__default.sequences($ly, ys#0))));
// definition axiom for _module.__default.descending for decreasing-related literals (revealed)
axiom {:id "id88"} 2 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, a#0: Box, xs#0: DatatypeType, ys#0: DatatypeType :: 
    {:weight 3} { _module.__default.descending($LS($ly), a#0, xs#0, Lit(ys#0)) } 
    _module.__default.descending#canCall(a#0, xs#0, Lit(ys#0))
         || (2 < $FunctionContextHeight
           && 
          $IsBox(a#0, Tclass._module.G())
           && $Is(xs#0, Tclass._module.List(Tclass._module.G()))
           && $Is(ys#0, Tclass._module.List(Tclass._module.G())))
       ==> (Lit(_module.List.Cons_q(Lit(ys#0)))
           ==> _module.__default.Below#canCall(a#0, Lit(_module.List.head(Lit(ys#0)))))
         && (_module.List.Cons_q(Lit(ys#0))
             && !_module.__default.Below(a#0, Lit(_module.List.head(Lit(ys#0))))
           ==> _module.__default.descending#canCall(Lit(_module.List.head(Lit(ys#0))), 
            #_module.List.Cons(a#0, xs#0), 
            Lit(_module.List.tail(Lit(ys#0)))))
         && (!(_module.List.Cons_q(Lit(ys#0))
             && !_module.__default.Below(a#0, Lit(_module.List.head(Lit(ys#0)))))
           ==> _module.__default.sequences#canCall(Lit(ys#0)))
         && _module.__default.descending($LS($ly), a#0, xs#0, Lit(ys#0))
           == (if _module.List.Cons_q(Lit(ys#0))
               && !_module.__default.Below(a#0, Lit(_module.List.head(Lit(ys#0))))
             then _module.__default.descending($LS($ly), 
              Lit(_module.List.head(Lit(ys#0))), 
              #_module.List.Cons(a#0, xs#0), 
              Lit(_module.List.tail(Lit(ys#0))))
             else #_module.List.Cons($Box(#_module.List.Cons(a#0, xs#0)), 
              Lit(_module.__default.sequences($LS($ly), Lit(ys#0))))));
// definition axiom for _module.__default.descending for all literals (revealed)
axiom {:id "id89"} 2 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, a#0: Box, xs#0: DatatypeType, ys#0: DatatypeType :: 
    {:weight 3} { _module.__default.descending($LS($ly), Lit(a#0), Lit(xs#0), Lit(ys#0)) } 
    _module.__default.descending#canCall(Lit(a#0), Lit(xs#0), Lit(ys#0))
         || (2 < $FunctionContextHeight
           && 
          $IsBox(a#0, Tclass._module.G())
           && $Is(xs#0, Tclass._module.List(Tclass._module.G()))
           && $Is(ys#0, Tclass._module.List(Tclass._module.G())))
       ==> (Lit(_module.List.Cons_q(Lit(ys#0)))
           ==> _module.__default.Below#canCall(Lit(a#0), Lit(_module.List.head(Lit(ys#0)))))
         && (_module.List.Cons_q(Lit(ys#0))
             && !Lit(_module.__default.Below(Lit(a#0), Lit(_module.List.head(Lit(ys#0)))))
           ==> _module.__default.descending#canCall(Lit(_module.List.head(Lit(ys#0))), 
            Lit(#_module.List.Cons(Lit(a#0), Lit(xs#0))), 
            Lit(_module.List.tail(Lit(ys#0)))))
         && (!(_module.List.Cons_q(Lit(ys#0))
             && !Lit(_module.__default.Below(Lit(a#0), Lit(_module.List.head(Lit(ys#0))))))
           ==> _module.__default.sequences#canCall(Lit(ys#0)))
         && _module.__default.descending($LS($ly), Lit(a#0), Lit(xs#0), Lit(ys#0))
           == (if _module.List.Cons_q(Lit(ys#0))
               && !Lit(_module.__default.Below(Lit(a#0), Lit(_module.List.head(Lit(ys#0)))))
             then _module.__default.descending($LS($ly), 
              Lit(_module.List.head(Lit(ys#0))), 
              Lit(#_module.List.Cons(Lit(a#0), Lit(xs#0))), 
              Lit(_module.List.tail(Lit(ys#0))))
             else #_module.List.Cons($Box(Lit(#_module.List.Cons(Lit(a#0), Lit(xs#0)))), 
              Lit(_module.__default.sequences($LS($ly), Lit(ys#0))))));
}

function _module.__default.descending#canCall(a#0: Box, xs#0: DatatypeType, ys#0: DatatypeType) : bool;

// layer synonym axiom
axiom (forall $ly: LayerType, a#0: Box, xs#0: DatatypeType, ys#0: DatatypeType :: 
  { _module.__default.descending($LS($ly), a#0, xs#0, ys#0) } 
  _module.__default.descending($LS($ly), a#0, xs#0, ys#0)
     == _module.__default.descending($ly, a#0, xs#0, ys#0));

// fuel synonym axiom
axiom (forall $ly: LayerType, a#0: Box, xs#0: DatatypeType, ys#0: DatatypeType :: 
  { _module.__default.descending(AsFuelBottom($ly), a#0, xs#0, ys#0) } 
  _module.__default.descending($ly, a#0, xs#0, ys#0)
     == _module.__default.descending($LZ, a#0, xs#0, ys#0));

function _module.__default.descending#requires(LayerType, Box, DatatypeType, DatatypeType) : bool;

// #requires axiom for _module.__default.descending
axiom (forall $ly: LayerType, a#0: Box, xs#0: DatatypeType, ys#0: DatatypeType :: 
  { _module.__default.descending#requires($ly, a#0, xs#0, ys#0) } 
  $IsBox(a#0, Tclass._module.G())
       && $Is(xs#0, Tclass._module.List(Tclass._module.G()))
       && $Is(ys#0, Tclass._module.List(Tclass._module.G()))
     ==> _module.__default.descending#requires($ly, a#0, xs#0, ys#0) == true);

procedure {:verboseName "descending (well-formedness)"} CheckWellformed$$_module.__default.descending(a#0: Box where $IsBox(a#0, Tclass._module.G()), 
    xs#0: DatatypeType where $Is(xs#0, Tclass._module.List(Tclass._module.G())), 
    ys#0: DatatypeType where $Is(ys#0, Tclass._module.List(Tclass._module.G())));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;
  ensures {:id "id90"} !_module.List#Equal(_module.__default.descending($LS($LS($LZ)), a#0, xs#0, ys#0), 
    #_module.List.Nil());



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "descending (well-formedness)"} CheckWellformed$$_module.__default.descending(a#0: Box, xs#0: DatatypeType, ys#0: DatatypeType)
{
  var $_ReadsFrame: [ref,Field]bool;
  var ##a#0: Box;
  var ##xs#0: DatatypeType;
  var ##ys#0: DatatypeType;
  var ##a#1: Box;
  var ##b#0: Box;
  var ##a#2: Box;
  var ##xs#1: DatatypeType;
  var ##ys#1: DatatypeType;
  var ##xs#2: DatatypeType;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume $Is(_module.__default.descending($LS($LZ), a#0, xs#0, ys#0), 
          Tclass._module.List(Tclass._module.List(Tclass._module.G())));
        ##a#0 := a#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##a#0, Tclass._module.G(), $Heap);
        ##xs#0 := xs#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##xs#0, Tclass._module.List(Tclass._module.G()), $Heap);
        ##ys#0 := ys#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##ys#0, Tclass._module.List(Tclass._module.G()), $Heap);
        assert {:id "id91"} (a#0 == a#0 && _module.List#Equal(xs#0, xs#0) && _module.List#Equal(ys#0, ys#0))
           || DtRank(##ys#0) < DtRank(ys#0);
        assume (a#0 == a#0 && _module.List#Equal(xs#0, xs#0) && _module.List#Equal(ys#0, ys#0))
           || _module.__default.descending#canCall(a#0, xs#0, ys#0);
        assume {:id "id92"} !_module.List#Equal(_module.__default.descending($LS($LZ), a#0, xs#0, ys#0), #_module.List.Nil());
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        if (_module.List.Cons_q(ys#0))
        {
            ##a#1 := a#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##a#1, Tclass._module.G(), $Heap);
            assert {:id "id93"} _module.List.Cons_q(ys#0);
            ##b#0 := _module.List.head(ys#0);
            // assume allocatedness for argument to function
            assume $IsAllocBox(##b#0, Tclass._module.G(), $Heap);
            assume _module.__default.Below#canCall(a#0, _module.List.head(ys#0));
        }

        if (_module.List.Cons_q(ys#0)
           && !_module.__default.Below(a#0, _module.List.head(ys#0)))
        {
            assert {:id "id94"} _module.List.Cons_q(ys#0);
            ##a#2 := _module.List.head(ys#0);
            // assume allocatedness for argument to function
            assume $IsAllocBox(##a#2, Tclass._module.G(), $Heap);
            ##xs#1 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1, Tclass._module.List(Tclass._module.G()), $Heap);
            assert {:id "id95"} _module.List.Cons_q(ys#0);
            ##ys#1 := _module.List.tail(ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#1, Tclass._module.List(Tclass._module.G()), $Heap);
            assert {:id "id96"} DtRank(##ys#1) < DtRank(ys#0);
            assume _module.__default.descending#canCall(_module.List.head(ys#0), #_module.List.Cons(a#0, xs#0), _module.List.tail(ys#0));
            assume {:id "id97"} _module.__default.descending($LS($LZ), a#0, xs#0, ys#0)
               == _module.__default.descending($LS($LZ), 
                _module.List.head(ys#0), 
                #_module.List.Cons(a#0, xs#0), 
                _module.List.tail(ys#0));
            assume _module.__default.descending#canCall(_module.List.head(ys#0), #_module.List.Cons(a#0, xs#0), _module.List.tail(ys#0));
            // CheckWellformedWithResult: any expression
            assume $Is(_module.__default.descending($LS($LZ), a#0, xs#0, ys#0), 
              Tclass._module.List(Tclass._module.List(Tclass._module.G())));
            return;
        }
        else
        {
            ##xs#2 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#2, Tclass._module.List(Tclass._module.G()), $Heap);
            assert {:id "id98"} DtRank(##xs#2) <= DtRank(ys#0);
            assume _module.__default.sequences#canCall(ys#0);
            assume {:id "id99"} _module.__default.descending($LS($LZ), a#0, xs#0, ys#0)
               == #_module.List.Cons($Box(#_module.List.Cons(a#0, xs#0)), _module.__default.sequences($LS($LZ), ys#0));
            assume _module.__default.sequences#canCall(ys#0);
            // CheckWellformedWithResult: any expression
            assume $Is(_module.__default.descending($LS($LZ), a#0, xs#0, ys#0), 
              Tclass._module.List(Tclass._module.List(Tclass._module.G())));
            return;
        }

        assume false;
    }
}



// function declaration for _module._default.ascending
function _module.__default.ascending($ly: LayerType, a#0: Box, xs#0: DatatypeType, ys#0: DatatypeType) : DatatypeType
uses {
// consequence axiom for _module.__default.ascending
axiom 2 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, a#0: Box, xs#0: DatatypeType, ys#0: DatatypeType :: 
    { _module.__default.ascending($ly, a#0, xs#0, ys#0) } 
    _module.__default.ascending#canCall(a#0, xs#0, ys#0)
         || (2 < $FunctionContextHeight
           && 
          $IsBox(a#0, Tclass._module.G())
           && $Is(xs#0, Tclass._module.List(Tclass._module.G()))
           && $Is(ys#0, Tclass._module.List(Tclass._module.G())))
       ==> !_module.List#Equal(_module.__default.ascending($ly, a#0, xs#0, ys#0), #_module.List.Nil())
         && $Is(_module.__default.ascending($ly, a#0, xs#0, ys#0), 
          Tclass._module.List(Tclass._module.List(Tclass._module.G()))));
// definition axiom for _module.__default.ascending (revealed)
axiom {:id "id100"} 2 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, a#0: Box, xs#0: DatatypeType, ys#0: DatatypeType :: 
    { _module.__default.ascending($LS($ly), a#0, xs#0, ys#0) } 
    _module.__default.ascending#canCall(a#0, xs#0, ys#0)
         || (2 < $FunctionContextHeight
           && 
          $IsBox(a#0, Tclass._module.G())
           && $Is(xs#0, Tclass._module.List(Tclass._module.G()))
           && $Is(ys#0, Tclass._module.List(Tclass._module.G())))
       ==> (_module.List.Cons_q(ys#0)
           ==> _module.__default.Below#canCall(a#0, _module.List.head(ys#0)))
         && (_module.List.Cons_q(ys#0)
             && _module.__default.Below(a#0, _module.List.head(ys#0))
           ==> _module.__default.ascending#canCall(_module.List.head(ys#0), #_module.List.Cons(a#0, xs#0), _module.List.tail(ys#0)))
         && (!(_module.List.Cons_q(ys#0)
             && _module.__default.Below(a#0, _module.List.head(ys#0)))
           ==> _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), Lit(#_module.List.Nil()))
             && _module.__default.sequences#canCall(ys#0))
         && _module.__default.ascending($LS($ly), a#0, xs#0, ys#0)
           == (if _module.List.Cons_q(ys#0)
               && _module.__default.Below(a#0, _module.List.head(ys#0))
             then _module.__default.ascending($ly, 
              _module.List.head(ys#0), 
              #_module.List.Cons(a#0, xs#0), 
              _module.List.tail(ys#0))
             else #_module.List.Cons($Box(_module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(a#0, xs#0), 
                  Lit(#_module.List.Nil()))), 
              _module.__default.sequences($ly, ys#0))));
// definition axiom for _module.__default.ascending for decreasing-related literals (revealed)
axiom {:id "id101"} 2 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, a#0: Box, xs#0: DatatypeType, ys#0: DatatypeType :: 
    {:weight 3} { _module.__default.ascending($LS($ly), a#0, xs#0, Lit(ys#0)) } 
    _module.__default.ascending#canCall(a#0, xs#0, Lit(ys#0))
         || (2 < $FunctionContextHeight
           && 
          $IsBox(a#0, Tclass._module.G())
           && $Is(xs#0, Tclass._module.List(Tclass._module.G()))
           && $Is(ys#0, Tclass._module.List(Tclass._module.G())))
       ==> (Lit(_module.List.Cons_q(Lit(ys#0)))
           ==> _module.__default.Below#canCall(a#0, Lit(_module.List.head(Lit(ys#0)))))
         && (_module.List.Cons_q(Lit(ys#0))
             && _module.__default.Below(a#0, Lit(_module.List.head(Lit(ys#0))))
           ==> _module.__default.ascending#canCall(Lit(_module.List.head(Lit(ys#0))), 
            #_module.List.Cons(a#0, xs#0), 
            Lit(_module.List.tail(Lit(ys#0)))))
         && (!(_module.List.Cons_q(Lit(ys#0))
             && _module.__default.Below(a#0, Lit(_module.List.head(Lit(ys#0)))))
           ==> _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), Lit(#_module.List.Nil()))
             && _module.__default.sequences#canCall(Lit(ys#0)))
         && _module.__default.ascending($LS($ly), a#0, xs#0, Lit(ys#0))
           == (if _module.List.Cons_q(Lit(ys#0))
               && _module.__default.Below(a#0, Lit(_module.List.head(Lit(ys#0))))
             then _module.__default.ascending($LS($ly), 
              Lit(_module.List.head(Lit(ys#0))), 
              #_module.List.Cons(a#0, xs#0), 
              Lit(_module.List.tail(Lit(ys#0))))
             else #_module.List.Cons($Box(_module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(a#0, xs#0), 
                  Lit(#_module.List.Nil()))), 
              Lit(_module.__default.sequences($LS($ly), Lit(ys#0))))));
// definition axiom for _module.__default.ascending for all literals (revealed)
axiom {:id "id102"} 2 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, a#0: Box, xs#0: DatatypeType, ys#0: DatatypeType :: 
    {:weight 3} { _module.__default.ascending($LS($ly), Lit(a#0), Lit(xs#0), Lit(ys#0)) } 
    _module.__default.ascending#canCall(Lit(a#0), Lit(xs#0), Lit(ys#0))
         || (2 < $FunctionContextHeight
           && 
          $IsBox(a#0, Tclass._module.G())
           && $Is(xs#0, Tclass._module.List(Tclass._module.G()))
           && $Is(ys#0, Tclass._module.List(Tclass._module.G())))
       ==> (Lit(_module.List.Cons_q(Lit(ys#0)))
           ==> _module.__default.Below#canCall(Lit(a#0), Lit(_module.List.head(Lit(ys#0)))))
         && (Lit(_module.List.Cons_q(Lit(ys#0))
               && _module.__default.Below(Lit(a#0), Lit(_module.List.head(Lit(ys#0)))))
           ==> _module.__default.ascending#canCall(Lit(_module.List.head(Lit(ys#0))), 
            Lit(#_module.List.Cons(Lit(a#0), Lit(xs#0))), 
            Lit(_module.List.tail(Lit(ys#0)))))
         && (!Lit(_module.List.Cons_q(Lit(ys#0))
               && _module.__default.Below(Lit(a#0), Lit(_module.List.head(Lit(ys#0)))))
           ==> _module.__default.reverse#canCall(Tclass._module.G(), 
              Lit(#_module.List.Cons(Lit(a#0), Lit(xs#0))), 
              Lit(#_module.List.Nil()))
             && _module.__default.sequences#canCall(Lit(ys#0)))
         && _module.__default.ascending($LS($ly), Lit(a#0), Lit(xs#0), Lit(ys#0))
           == (if _module.List.Cons_q(Lit(ys#0))
               && _module.__default.Below(Lit(a#0), Lit(_module.List.head(Lit(ys#0))))
             then _module.__default.ascending($LS($ly), 
              Lit(_module.List.head(Lit(ys#0))), 
              Lit(#_module.List.Cons(Lit(a#0), Lit(xs#0))), 
              Lit(_module.List.tail(Lit(ys#0))))
             else #_module.List.Cons($Box(Lit(_module.__default.reverse(Tclass._module.G(), 
                    $LS($LZ), 
                    Lit(#_module.List.Cons(Lit(a#0), Lit(xs#0))), 
                    Lit(#_module.List.Nil())))), 
              Lit(_module.__default.sequences($LS($ly), Lit(ys#0))))));
}

function _module.__default.ascending#canCall(a#0: Box, xs#0: DatatypeType, ys#0: DatatypeType) : bool;

// layer synonym axiom
axiom (forall $ly: LayerType, a#0: Box, xs#0: DatatypeType, ys#0: DatatypeType :: 
  { _module.__default.ascending($LS($ly), a#0, xs#0, ys#0) } 
  _module.__default.ascending($LS($ly), a#0, xs#0, ys#0)
     == _module.__default.ascending($ly, a#0, xs#0, ys#0));

// fuel synonym axiom
axiom (forall $ly: LayerType, a#0: Box, xs#0: DatatypeType, ys#0: DatatypeType :: 
  { _module.__default.ascending(AsFuelBottom($ly), a#0, xs#0, ys#0) } 
  _module.__default.ascending($ly, a#0, xs#0, ys#0)
     == _module.__default.ascending($LZ, a#0, xs#0, ys#0));

function _module.__default.ascending#requires(LayerType, Box, DatatypeType, DatatypeType) : bool;

// #requires axiom for _module.__default.ascending
axiom (forall $ly: LayerType, a#0: Box, xs#0: DatatypeType, ys#0: DatatypeType :: 
  { _module.__default.ascending#requires($ly, a#0, xs#0, ys#0) } 
  $IsBox(a#0, Tclass._module.G())
       && $Is(xs#0, Tclass._module.List(Tclass._module.G()))
       && $Is(ys#0, Tclass._module.List(Tclass._module.G()))
     ==> _module.__default.ascending#requires($ly, a#0, xs#0, ys#0) == true);

procedure {:verboseName "ascending (well-formedness)"} CheckWellformed$$_module.__default.ascending(a#0: Box where $IsBox(a#0, Tclass._module.G()), 
    xs#0: DatatypeType where $Is(xs#0, Tclass._module.List(Tclass._module.G())), 
    ys#0: DatatypeType where $Is(ys#0, Tclass._module.List(Tclass._module.G())));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;
  ensures {:id "id103"} !_module.List#Equal(_module.__default.ascending($LS($LS($LZ)), a#0, xs#0, ys#0), #_module.List.Nil());



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "ascending (well-formedness)"} CheckWellformed$$_module.__default.ascending(a#0: Box, xs#0: DatatypeType, ys#0: DatatypeType)
{
  var $_ReadsFrame: [ref,Field]bool;
  var ##a#0: Box;
  var ##xs#0: DatatypeType;
  var ##ys#0: DatatypeType;
  var ##a#1: Box;
  var ##b#0: Box;
  var ##a#2: Box;
  var ##xs#1: DatatypeType;
  var ##ys#1: DatatypeType;
  var ##xs#2: DatatypeType;
  var ##acc#0: DatatypeType;
  var ##xs#3: DatatypeType;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume $Is(_module.__default.ascending($LS($LZ), a#0, xs#0, ys#0), 
          Tclass._module.List(Tclass._module.List(Tclass._module.G())));
        ##a#0 := a#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##a#0, Tclass._module.G(), $Heap);
        ##xs#0 := xs#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##xs#0, Tclass._module.List(Tclass._module.G()), $Heap);
        ##ys#0 := ys#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##ys#0, Tclass._module.List(Tclass._module.G()), $Heap);
        assert {:id "id104"} (a#0 == a#0 && _module.List#Equal(xs#0, xs#0) && _module.List#Equal(ys#0, ys#0))
           || DtRank(##ys#0) < DtRank(ys#0);
        assume (a#0 == a#0 && _module.List#Equal(xs#0, xs#0) && _module.List#Equal(ys#0, ys#0))
           || _module.__default.ascending#canCall(a#0, xs#0, ys#0);
        assume {:id "id105"} !_module.List#Equal(_module.__default.ascending($LS($LZ), a#0, xs#0, ys#0), #_module.List.Nil());
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        if (_module.List.Cons_q(ys#0))
        {
            ##a#1 := a#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##a#1, Tclass._module.G(), $Heap);
            assert {:id "id106"} _module.List.Cons_q(ys#0);
            ##b#0 := _module.List.head(ys#0);
            // assume allocatedness for argument to function
            assume $IsAllocBox(##b#0, Tclass._module.G(), $Heap);
            assume _module.__default.Below#canCall(a#0, _module.List.head(ys#0));
        }

        if (_module.List.Cons_q(ys#0)
           && _module.__default.Below(a#0, _module.List.head(ys#0)))
        {
            assert {:id "id107"} _module.List.Cons_q(ys#0);
            ##a#2 := _module.List.head(ys#0);
            // assume allocatedness for argument to function
            assume $IsAllocBox(##a#2, Tclass._module.G(), $Heap);
            ##xs#1 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1, Tclass._module.List(Tclass._module.G()), $Heap);
            assert {:id "id108"} _module.List.Cons_q(ys#0);
            ##ys#1 := _module.List.tail(ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#1, Tclass._module.List(Tclass._module.G()), $Heap);
            assert {:id "id109"} DtRank(##ys#1) < DtRank(ys#0);
            assume _module.__default.ascending#canCall(_module.List.head(ys#0), #_module.List.Cons(a#0, xs#0), _module.List.tail(ys#0));
            assume {:id "id110"} _module.__default.ascending($LS($LZ), a#0, xs#0, ys#0)
               == _module.__default.ascending($LS($LZ), 
                _module.List.head(ys#0), 
                #_module.List.Cons(a#0, xs#0), 
                _module.List.tail(ys#0));
            assume _module.__default.ascending#canCall(_module.List.head(ys#0), #_module.List.Cons(a#0, xs#0), _module.List.tail(ys#0));
            // CheckWellformedWithResult: any expression
            assume $Is(_module.__default.ascending($LS($LZ), a#0, xs#0, ys#0), 
              Tclass._module.List(Tclass._module.List(Tclass._module.G())));
            return;
        }
        else
        {
            ##xs#2 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#2, Tclass._module.List(Tclass._module.G()), $Heap);
            ##acc#0 := Lit(#_module.List.Nil());
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), Lit(#_module.List.Nil()));
            ##xs#3 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#3, Tclass._module.List(Tclass._module.G()), $Heap);
            assert {:id "id111"} DtRank(##xs#3) <= DtRank(ys#0);
            assume _module.__default.sequences#canCall(ys#0);
            assume {:id "id112"} _module.__default.ascending($LS($LZ), a#0, xs#0, ys#0)
               == #_module.List.Cons($Box(_module.__default.reverse(Tclass._module.G(), 
                    $LS($LZ), 
                    #_module.List.Cons(a#0, xs#0), 
                    Lit(#_module.List.Nil()))), 
                _module.__default.sequences($LS($LZ), ys#0));
            assume _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), Lit(#_module.List.Nil()))
               && _module.__default.sequences#canCall(ys#0);
            // CheckWellformedWithResult: any expression
            assume $Is(_module.__default.ascending($LS($LZ), a#0, xs#0, ys#0), 
              Tclass._module.List(Tclass._module.List(Tclass._module.G())));
            return;
        }

        assume false;
    }
}



// function declaration for _module._default.mergeAll
function _module.__default.mergeAll($ly: LayerType, x#0: DatatypeType) : DatatypeType
uses {
// consequence axiom for _module.__default.mergeAll
axiom 4 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, x#0: DatatypeType :: 
    { _module.__default.mergeAll($ly, x#0) } 
    _module.__default.mergeAll#canCall(x#0)
         || (4 < $FunctionContextHeight
           && 
          $Is(x#0, Tclass._module.List(Tclass._module.List(Tclass._module.G())))
           && !_module.List#Equal(x#0, #_module.List.Nil()))
       ==> $Is(_module.__default.mergeAll($ly, x#0), Tclass._module.List(Tclass._module.G())));
// definition axiom for _module.__default.mergeAll (revealed)
axiom {:id "id113"} 4 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, x#0: DatatypeType :: 
    { _module.__default.mergeAll($LS($ly), x#0) } 
    _module.__default.mergeAll#canCall(x#0)
         || (4 < $FunctionContextHeight
           && 
          $Is(x#0, Tclass._module.List(Tclass._module.List(Tclass._module.G())))
           && !_module.List#Equal(x#0, #_module.List.Nil()))
       ==> $IsA#_module.List(_module.List.tail(x#0))
         && (!_module.List#Equal(_module.List.tail(x#0), #_module.List.Nil())
           ==> _module.__default.mergePairs#canCall(x#0)
             && _module.__default.mergeAll#canCall(_module.__default.mergePairs($LS($LZ), x#0)))
         && _module.__default.mergeAll($LS($ly), x#0)
           == (if _module.List#Equal(_module.List.tail(x#0), #_module.List.Nil())
             then $Unbox(_module.List.head(x#0)): DatatypeType
             else _module.__default.mergeAll($ly, _module.__default.mergePairs($LS($LZ), x#0))));
// definition axiom for _module.__default.mergeAll for all literals (revealed)
axiom {:id "id114"} 4 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, x#0: DatatypeType :: 
    {:weight 3} { _module.__default.mergeAll($LS($ly), Lit(x#0)) } 
    _module.__default.mergeAll#canCall(Lit(x#0))
         || (4 < $FunctionContextHeight
           && 
          $Is(x#0, Tclass._module.List(Tclass._module.List(Tclass._module.G())))
           && !_module.List#Equal(x#0, #_module.List.Nil()))
       ==> $IsA#_module.List(Lit(_module.List.tail(Lit(x#0))))
         && (!_module.List#Equal(_module.List.tail(Lit(x#0)), #_module.List.Nil())
           ==> _module.__default.mergePairs#canCall(Lit(x#0))
             && _module.__default.mergeAll#canCall(Lit(_module.__default.mergePairs($LS($LZ), Lit(x#0)))))
         && _module.__default.mergeAll($LS($ly), Lit(x#0))
           == (if _module.List#Equal(_module.List.tail(Lit(x#0)), #_module.List.Nil())
             then $Unbox(_module.List.head(Lit(x#0))): DatatypeType
             else _module.__default.mergeAll($LS($ly), Lit(_module.__default.mergePairs($LS($LZ), Lit(x#0))))));
}

function _module.__default.mergeAll#canCall(x#0: DatatypeType) : bool;

// layer synonym axiom
axiom (forall $ly: LayerType, x#0: DatatypeType :: 
  { _module.__default.mergeAll($LS($ly), x#0) } 
  _module.__default.mergeAll($LS($ly), x#0)
     == _module.__default.mergeAll($ly, x#0));

// fuel synonym axiom
axiom (forall $ly: LayerType, x#0: DatatypeType :: 
  { _module.__default.mergeAll(AsFuelBottom($ly), x#0) } 
  _module.__default.mergeAll($ly, x#0) == _module.__default.mergeAll($LZ, x#0));

function _module.__default.mergeAll#requires(LayerType, DatatypeType) : bool;

// #requires axiom for _module.__default.mergeAll
axiom (forall $ly: LayerType, x#0: DatatypeType :: 
  { _module.__default.mergeAll#requires($ly, x#0) } 
  $Is(x#0, Tclass._module.List(Tclass._module.List(Tclass._module.G())))
     ==> _module.__default.mergeAll#requires($ly, x#0)
       == !_module.List#Equal(x#0, #_module.List.Nil()));

procedure {:verboseName "mergeAll (well-formedness)"} CheckWellformed$$_module.__default.mergeAll(x#0: DatatypeType
       where $Is(x#0, Tclass._module.List(Tclass._module.List(Tclass._module.G()))));
  free requires 4 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "mergeAll (well-formedness)"} CheckWellformed$$_module.__default.mergeAll(x#0: DatatypeType)
{
  var $_ReadsFrame: [ref,Field]bool;
  var ##xs#0: DatatypeType;
  var ##x#0: DatatypeType;
  var ##x#1: DatatypeType;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    assume {:id "id115"} !_module.List#Equal(x#0, #_module.List.Nil());
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    ##xs#0 := x#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##xs#0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
    assume _module.__default.length#canCall(Tclass._module.List(Tclass._module.G()), x#0);
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume $Is(_module.__default.mergeAll($LS($LZ), x#0), 
          Tclass._module.List(Tclass._module.G()));
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        assert {:id "id116"} _module.List.Cons_q(x#0);
        if (_module.List#Equal(_module.List.tail(x#0), #_module.List.Nil()))
        {
            assert {:id "id117"} _module.List.Cons_q(x#0);
            assume {:id "id118"} _module.__default.mergeAll($LS($LZ), x#0)
               == $Unbox(_module.List.head(x#0)): DatatypeType;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(_module.__default.mergeAll($LS($LZ), x#0), 
              Tclass._module.List(Tclass._module.G()));
            return;
        }
        else
        {
            ##x#1 := x#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#1, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.mergePairs#canCall(x#0);
            ##x#0 := _module.__default.mergePairs($LS($LZ), x#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assert {:id "id119"} {:subsumption 0} !_module.List#Equal(##x#0, #_module.List.Nil());
            assume !_module.List#Equal(##x#0, #_module.List.Nil());
            assert {:id "id120"} 0
                 <= _module.__default.length(Tclass._module.List(Tclass._module.G()), $LS($LZ), x#0)
               || _module.__default.length(Tclass._module.List(Tclass._module.G()), $LS($LZ), ##x#0)
                 == _module.__default.length(Tclass._module.List(Tclass._module.G()), $LS($LZ), x#0);
            assert {:id "id121"} _module.__default.length(Tclass._module.List(Tclass._module.G()), $LS($LZ), ##x#0)
               < _module.__default.length(Tclass._module.List(Tclass._module.G()), $LS($LZ), x#0);
            assume _module.__default.mergeAll#canCall(_module.__default.mergePairs($LS($LZ), x#0));
            assume {:id "id122"} _module.__default.mergeAll($LS($LZ), x#0)
               == _module.__default.mergeAll($LS($LZ), _module.__default.mergePairs($LS($LZ), x#0));
            assume _module.__default.mergePairs#canCall(x#0)
               && _module.__default.mergeAll#canCall(_module.__default.mergePairs($LS($LZ), x#0));
            // CheckWellformedWithResult: any expression
            assume $Is(_module.__default.mergeAll($LS($LZ), x#0), 
              Tclass._module.List(Tclass._module.G()));
            return;
        }

        assume false;
    }
}



// function declaration for _module._default.mergePairs
function _module.__default.mergePairs($ly: LayerType, x#0: DatatypeType) : DatatypeType
uses {
// consequence axiom for _module.__default.mergePairs
axiom 3 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, x#0: DatatypeType :: 
    { _module.__default.mergePairs($ly, x#0) } 
    _module.__default.mergePairs#canCall(x#0)
         || (3 < $FunctionContextHeight
           && $Is(x#0, Tclass._module.List(Tclass._module.List(Tclass._module.G()))))
       ==> _module.__default.length(Tclass._module.List(Tclass._module.G()), 
            $LS($LZ), 
            _module.__default.mergePairs($ly, x#0))
           <= _module.__default.length(Tclass._module.List(Tclass._module.G()), $LS($LZ), x#0)
         && (_module.List.Cons_q(x#0) && _module.List.Cons_q(_module.List.tail(x#0))
           ==> _module.__default.length(Tclass._module.List(Tclass._module.G()), 
              $LS($LZ), 
              _module.__default.mergePairs($ly, x#0))
             < _module.__default.length(Tclass._module.List(Tclass._module.G()), $LS($LZ), x#0))
         && (!_module.List#Equal(x#0, #_module.List.Nil())
           ==> !_module.List#Equal(_module.__default.mergePairs($ly, x#0), #_module.List.Nil()))
         && $Is(_module.__default.mergePairs($ly, x#0), 
          Tclass._module.List(Tclass._module.List(Tclass._module.G()))));
// definition axiom for _module.__default.mergePairs (revealed)
axiom {:id "id123"} 3 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, x#0: DatatypeType :: 
    { _module.__default.mergePairs($LS($ly), x#0) } 
    _module.__default.mergePairs#canCall(x#0)
         || (3 < $FunctionContextHeight
           && $Is(x#0, Tclass._module.List(Tclass._module.List(Tclass._module.G()))))
       ==> (_module.List.Cons_q(x#0) && _module.List.Cons_q(_module.List.tail(x#0))
           ==> _module.__default.merge#canCall($Unbox(_module.List.head(x#0)): DatatypeType, 
              $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)
             && _module.__default.mergePairs#canCall(_module.List.tail(_module.List.tail(x#0))))
         && _module.__default.mergePairs($LS($ly), x#0)
           == (if _module.List.Cons_q(x#0) && _module.List.Cons_q(_module.List.tail(x#0))
             then #_module.List.Cons($Box(_module.__default.merge($LS($LZ), 
                  $Unbox(_module.List.head(x#0)): DatatypeType, 
                  $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)), 
              _module.__default.mergePairs($ly, _module.List.tail(_module.List.tail(x#0))))
             else x#0));
// definition axiom for _module.__default.mergePairs for all literals (revealed)
axiom {:id "id124"} 3 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, x#0: DatatypeType :: 
    {:weight 3} { _module.__default.mergePairs($LS($ly), Lit(x#0)) } 
    _module.__default.mergePairs#canCall(Lit(x#0))
         || (3 < $FunctionContextHeight
           && $Is(x#0, Tclass._module.List(Tclass._module.List(Tclass._module.G()))))
       ==> (Lit(_module.List.Cons_q(Lit(x#0))
               && _module.List.Cons_q(Lit(_module.List.tail(Lit(x#0)))))
           ==> _module.__default.merge#canCall(Lit($Unbox(_module.List.head(Lit(x#0))): DatatypeType), 
              Lit($Unbox(_module.List.head(Lit(_module.List.tail(Lit(x#0))))): DatatypeType))
             && _module.__default.mergePairs#canCall(Lit(_module.List.tail(Lit(_module.List.tail(Lit(x#0)))))))
         && _module.__default.mergePairs($LS($ly), Lit(x#0))
           == (if _module.List.Cons_q(Lit(x#0))
               && _module.List.Cons_q(Lit(_module.List.tail(Lit(x#0))))
             then #_module.List.Cons($Box(Lit(_module.__default.merge($LS($LZ), 
                    Lit($Unbox(_module.List.head(Lit(x#0))): DatatypeType), 
                    Lit($Unbox(_module.List.head(Lit(_module.List.tail(Lit(x#0))))): DatatypeType)))), 
              Lit(_module.__default.mergePairs($LS($ly), Lit(_module.List.tail(Lit(_module.List.tail(Lit(x#0))))))))
             else x#0));
}

function _module.__default.mergePairs#canCall(x#0: DatatypeType) : bool;

// layer synonym axiom
axiom (forall $ly: LayerType, x#0: DatatypeType :: 
  { _module.__default.mergePairs($LS($ly), x#0) } 
  _module.__default.mergePairs($LS($ly), x#0)
     == _module.__default.mergePairs($ly, x#0));

// fuel synonym axiom
axiom (forall $ly: LayerType, x#0: DatatypeType :: 
  { _module.__default.mergePairs(AsFuelBottom($ly), x#0) } 
  _module.__default.mergePairs($ly, x#0) == _module.__default.mergePairs($LZ, x#0));

function _module.__default.mergePairs#requires(LayerType, DatatypeType) : bool;

// #requires axiom for _module.__default.mergePairs
axiom (forall $ly: LayerType, x#0: DatatypeType :: 
  { _module.__default.mergePairs#requires($ly, x#0) } 
  $Is(x#0, Tclass._module.List(Tclass._module.List(Tclass._module.G())))
     ==> _module.__default.mergePairs#requires($ly, x#0) == true);

procedure {:verboseName "mergePairs (well-formedness)"} CheckWellformed$$_module.__default.mergePairs(x#0: DatatypeType
       where $Is(x#0, Tclass._module.List(Tclass._module.List(Tclass._module.G()))));
  free requires 3 == $FunctionContextHeight;
  modifies $Heap;
  ensures {:id "id125"} _module.__default.length(Tclass._module.List(Tclass._module.G()), 
      $LS($LS($LZ)), 
      _module.__default.mergePairs($LS($LS($LZ)), x#0))
     <= _module.__default.length(Tclass._module.List(Tclass._module.G()), $LS($LS($LZ)), x#0);
  ensures {:id "id126"} _module.List.Cons_q(x#0) && _module.List.Cons_q(_module.List.tail(x#0))
     ==> _module.__default.length(Tclass._module.List(Tclass._module.G()), 
        $LS($LS($LZ)), 
        _module.__default.mergePairs($LS($LS($LZ)), x#0))
       < _module.__default.length(Tclass._module.List(Tclass._module.G()), $LS($LS($LZ)), x#0);
  ensures {:id "id127"} !_module.List#Equal(x#0, #_module.List.Nil())
     ==> !_module.List#Equal(_module.__default.mergePairs($LS($LS($LZ)), x#0), #_module.List.Nil());



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "mergePairs (well-formedness)"} CheckWellformed$$_module.__default.mergePairs(x#0: DatatypeType)
{
  var $_ReadsFrame: [ref,Field]bool;
  var ##xs#0: DatatypeType;
  var ##x#0: DatatypeType;
  var ##xs#1: DatatypeType;
  var ##xs#2: DatatypeType;
  var ##x#1: DatatypeType;
  var ##xs#3: DatatypeType;
  var ##x#2: DatatypeType;
  var ##xs#4: DatatypeType;
  var ##ys#0: DatatypeType;
  var ##x#3: DatatypeType;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume $Is(_module.__default.mergePairs($LS($LZ), x#0), 
          Tclass._module.List(Tclass._module.List(Tclass._module.G())));
        ##x#0 := x#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##x#0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
        assert {:id "id128"} _module.List#Equal(x#0, x#0) || DtRank(##x#0) < DtRank(x#0);
        assume _module.List#Equal(x#0, x#0) || _module.__default.mergePairs#canCall(x#0);
        ##xs#0 := _module.__default.mergePairs($LS($LZ), x#0);
        // assume allocatedness for argument to function
        assume $IsAlloc(##xs#0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
        assume _module.__default.length#canCall(Tclass._module.List(Tclass._module.G()), 
          _module.__default.mergePairs($LS($LZ), x#0));
        ##xs#1 := x#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##xs#1, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
        assume _module.__default.length#canCall(Tclass._module.List(Tclass._module.G()), x#0);
        assume {:id "id129"} _module.__default.length(Tclass._module.List(Tclass._module.G()), 
            $LS($LZ), 
            _module.__default.mergePairs($LS($LZ), x#0))
           <= _module.__default.length(Tclass._module.List(Tclass._module.G()), $LS($LZ), x#0);
        if (*)
        {
            assume {:id "id130"} _module.List.Cons_q(x#0);
            assert {:id "id131"} _module.List.Cons_q(x#0);
            assume {:id "id132"} _module.List.Cons_q(_module.List.tail(x#0));
            ##x#1 := x#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#1, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assert {:id "id133"} _module.List#Equal(x#0, x#0) || DtRank(##x#1) < DtRank(x#0);
            assume _module.List#Equal(x#0, x#0) || _module.__default.mergePairs#canCall(x#0);
            ##xs#2 := _module.__default.mergePairs($LS($LZ), x#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#2, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.length#canCall(Tclass._module.List(Tclass._module.G()), 
              _module.__default.mergePairs($LS($LZ), x#0));
            ##xs#3 := x#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#3, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.length#canCall(Tclass._module.List(Tclass._module.G()), x#0);
            assume {:id "id134"} _module.__default.length(Tclass._module.List(Tclass._module.G()), 
                $LS($LZ), 
                _module.__default.mergePairs($LS($LZ), x#0))
               < _module.__default.length(Tclass._module.List(Tclass._module.G()), $LS($LZ), x#0);
        }
        else
        {
            assume {:id "id135"} _module.List.Cons_q(x#0) && _module.List.Cons_q(_module.List.tail(x#0))
               ==> _module.__default.length(Tclass._module.List(Tclass._module.G()), 
                  $LS($LZ), 
                  _module.__default.mergePairs($LS($LZ), x#0))
                 < _module.__default.length(Tclass._module.List(Tclass._module.G()), $LS($LZ), x#0);
        }

        if (*)
        {
            assume {:id "id136"} !_module.List#Equal(x#0, #_module.List.Nil());
            ##x#2 := x#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#2, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assert {:id "id137"} _module.List#Equal(x#0, x#0) || DtRank(##x#2) < DtRank(x#0);
            assume _module.List#Equal(x#0, x#0) || _module.__default.mergePairs#canCall(x#0);
            assume {:id "id138"} !_module.List#Equal(_module.__default.mergePairs($LS($LZ), x#0), #_module.List.Nil());
        }
        else
        {
            assume {:id "id139"} !_module.List#Equal(x#0, #_module.List.Nil())
               ==> !_module.List#Equal(_module.__default.mergePairs($LS($LZ), x#0), #_module.List.Nil());
        }

        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        if (_module.List.Cons_q(x#0))
        {
            assert {:id "id140"} _module.List.Cons_q(x#0);
        }

        if (_module.List.Cons_q(x#0) && _module.List.Cons_q(_module.List.tail(x#0)))
        {
            assert {:id "id141"} _module.List.Cons_q(x#0);
            ##xs#4 := $Unbox(_module.List.head(x#0)): DatatypeType;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#4, Tclass._module.List(Tclass._module.G()), $Heap);
            assert {:id "id142"} _module.List.Cons_q(x#0);
            assert {:id "id143"} _module.List.Cons_q(_module.List.tail(x#0));
            ##ys#0 := $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.merge#canCall($Unbox(_module.List.head(x#0)): DatatypeType, 
              $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType);
            assert {:id "id144"} _module.List.Cons_q(x#0);
            assert {:id "id145"} _module.List.Cons_q(_module.List.tail(x#0));
            ##x#3 := _module.List.tail(_module.List.tail(x#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#3, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assert {:id "id146"} DtRank(##x#3) < DtRank(x#0);
            assume _module.__default.mergePairs#canCall(_module.List.tail(_module.List.tail(x#0)));
            assume {:id "id147"} _module.__default.mergePairs($LS($LZ), x#0)
               == #_module.List.Cons($Box(_module.__default.merge($LS($LZ), 
                    $Unbox(_module.List.head(x#0)): DatatypeType, 
                    $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)), 
                _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0))));
            assume _module.__default.merge#canCall($Unbox(_module.List.head(x#0)): DatatypeType, 
                $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)
               && _module.__default.mergePairs#canCall(_module.List.tail(_module.List.tail(x#0)));
            // CheckWellformedWithResult: any expression
            assume $Is(_module.__default.mergePairs($LS($LZ), x#0), 
              Tclass._module.List(Tclass._module.List(Tclass._module.G())));
            return;
        }
        else
        {
            assume {:id "id148"} _module.__default.mergePairs($LS($LZ), x#0) == x#0;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(_module.__default.mergePairs($LS($LZ), x#0), 
              Tclass._module.List(Tclass._module.List(Tclass._module.G())));
            return;
        }

        assume false;
    }
}



// function declaration for _module._default.merge
function _module.__default.merge($ly: LayerType, xs#0: DatatypeType, ys#0: DatatypeType) : DatatypeType
uses {
// consequence axiom for _module.__default.merge
axiom 2 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, xs#0: DatatypeType, ys#0: DatatypeType :: 
    { _module.__default.merge($ly, xs#0, ys#0) } 
    _module.__default.merge#canCall(xs#0, ys#0)
         || (2 < $FunctionContextHeight
           && 
          $Is(xs#0, Tclass._module.List(Tclass._module.G()))
           && $Is(ys#0, Tclass._module.List(Tclass._module.G())))
       ==> $Is(_module.__default.merge($ly, xs#0, ys#0), 
        Tclass._module.List(Tclass._module.G())));
// definition axiom for _module.__default.merge (revealed)
axiom {:id "id149"} 2 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, xs#0: DatatypeType, ys#0: DatatypeType :: 
    { _module.__default.merge($LS($ly), xs#0, ys#0) } 
    _module.__default.merge#canCall(xs#0, ys#0)
         || (2 < $FunctionContextHeight
           && 
          $Is(xs#0, Tclass._module.List(Tclass._module.G()))
           && $Is(ys#0, Tclass._module.List(Tclass._module.G())))
       ==> (!_module.List.Nil_q(xs#0)
           ==> (var xs'#1 := _module.List.tail(xs#0); 
            (var a#1 := _module.List.head(xs#0); 
              !_module.List.Nil_q(ys#0)
                 ==> (var ys'#1 := _module.List.tail(ys#0); 
                  (var b#1 := _module.List.head(ys#0); 
                    _module.__default.Below#canCall(a#1, b#1)
                       && (_module.__default.Below(a#1, b#1)
                         ==> _module.__default.merge#canCall(xs'#1, ys#0))
                       && (!_module.__default.Below(a#1, b#1)
                         ==> _module.__default.merge#canCall(xs#0, ys'#1)))))))
         && _module.__default.merge($LS($ly), xs#0, ys#0)
           == (if _module.List.Nil_q(xs#0)
             then ys#0
             else (var xs'#0 := _module.List.tail(xs#0); 
              (var a#0 := _module.List.head(xs#0); 
                (if _module.List.Nil_q(ys#0)
                   then xs#0
                   else (var ys'#0 := _module.List.tail(ys#0); 
                    (var b#0 := _module.List.head(ys#0); 
                      (if _module.__default.Below(a#0, b#0)
                         then #_module.List.Cons(a#0, _module.__default.merge($ly, xs'#0, ys#0))
                         else #_module.List.Cons(b#0, _module.__default.merge($ly, xs#0, ys'#0))))))))));
// definition axiom for _module.__default.merge for all literals (revealed)
axiom {:id "id150"} 2 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, xs#0: DatatypeType, ys#0: DatatypeType :: 
    {:weight 3} { _module.__default.merge($LS($ly), Lit(xs#0), Lit(ys#0)) } 
    _module.__default.merge#canCall(Lit(xs#0), Lit(ys#0))
         || (2 < $FunctionContextHeight
           && 
          $Is(xs#0, Tclass._module.List(Tclass._module.G()))
           && $Is(ys#0, Tclass._module.List(Tclass._module.G())))
       ==> (!Lit(_module.List.Nil_q(Lit(xs#0)))
           ==> (var xs'#3 := Lit(_module.List.tail(Lit(xs#0))); 
            (var a#3 := Lit(_module.List.head(Lit(xs#0))); 
              !Lit(_module.List.Nil_q(Lit(ys#0)))
                 ==> (var ys'#3 := Lit(_module.List.tail(Lit(ys#0))); 
                  (var b#3 := Lit(_module.List.head(Lit(ys#0))); 
                    _module.__default.Below#canCall(a#3, b#3)
                       && (_module.__default.Below(a#3, b#3)
                         ==> _module.__default.merge#canCall(xs'#3, Lit(ys#0)))
                       && (!_module.__default.Below(a#3, b#3)
                         ==> _module.__default.merge#canCall(Lit(xs#0), ys'#3)))))))
         && _module.__default.merge($LS($ly), Lit(xs#0), Lit(ys#0))
           == (if _module.List.Nil_q(Lit(xs#0))
             then ys#0
             else (var xs'#2 := Lit(_module.List.tail(Lit(xs#0))); 
              (var a#2 := Lit(_module.List.head(Lit(xs#0))); 
                (if _module.List.Nil_q(Lit(ys#0))
                   then xs#0
                   else (var ys'#2 := Lit(_module.List.tail(Lit(ys#0))); 
                    (var b#2 := Lit(_module.List.head(Lit(ys#0))); 
                      (if _module.__default.Below(a#2, b#2)
                         then #_module.List.Cons(a#2, Lit(_module.__default.merge($LS($ly), xs'#2, Lit(ys#0))))
                         else #_module.List.Cons(b#2, Lit(_module.__default.merge($LS($ly), Lit(xs#0), ys'#2)))))))))));
}

function _module.__default.merge#canCall(xs#0: DatatypeType, ys#0: DatatypeType) : bool;

// layer synonym axiom
axiom (forall $ly: LayerType, xs#0: DatatypeType, ys#0: DatatypeType :: 
  { _module.__default.merge($LS($ly), xs#0, ys#0) } 
  _module.__default.merge($LS($ly), xs#0, ys#0)
     == _module.__default.merge($ly, xs#0, ys#0));

// fuel synonym axiom
axiom (forall $ly: LayerType, xs#0: DatatypeType, ys#0: DatatypeType :: 
  { _module.__default.merge(AsFuelBottom($ly), xs#0, ys#0) } 
  _module.__default.merge($ly, xs#0, ys#0)
     == _module.__default.merge($LZ, xs#0, ys#0));

function _module.__default.merge#requires(LayerType, DatatypeType, DatatypeType) : bool;

// #requires axiom for _module.__default.merge
axiom (forall $ly: LayerType, xs#0: DatatypeType, ys#0: DatatypeType :: 
  { _module.__default.merge#requires($ly, xs#0, ys#0) } 
  $Is(xs#0, Tclass._module.List(Tclass._module.G()))
       && $Is(ys#0, Tclass._module.List(Tclass._module.G()))
     ==> _module.__default.merge#requires($ly, xs#0, ys#0) == true);

procedure {:verboseName "merge (well-formedness)"} CheckWellformed$$_module.__default.merge(xs#0: DatatypeType where $Is(xs#0, Tclass._module.List(Tclass._module.G())), 
    ys#0: DatatypeType where $Is(ys#0, Tclass._module.List(Tclass._module.G())));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "merge (well-formedness)"} CheckWellformed$$_module.__default.merge(xs#0: DatatypeType, ys#0: DatatypeType)
{
  var $_ReadsFrame: [ref,Field]bool;
  var _mcc#0#0: Box;
  var _mcc#1#0: DatatypeType;
  var xs'#Z#0: DatatypeType;
  var let#0#0#0: DatatypeType;
  var a#Z#0: Box;
  var let#1#0#0: Box;
  var _mcc#2#0: Box;
  var _mcc#3#0: DatatypeType;
  var ys'#Z#0: DatatypeType;
  var let#2#0#0: DatatypeType;
  var b#Z#0: Box;
  var let#3#0#0: Box;
  var ##a#0: Box;
  var ##b#0: Box;
  var ##xs#0: DatatypeType;
  var ##ys#0: DatatypeType;
  var ##xs#1: DatatypeType;
  var ##ys#1: DatatypeType;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume $Is(_module.__default.merge($LS($LZ), xs#0, ys#0), 
          Tclass._module.List(Tclass._module.G()));
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        if (xs#0 == #_module.List.Nil())
        {
            assume {:id "id164"} _module.__default.merge($LS($LZ), xs#0, ys#0) == ys#0;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(_module.__default.merge($LS($LZ), xs#0, ys#0), 
              Tclass._module.List(Tclass._module.G()));
            return;
        }
        else if (xs#0 == #_module.List.Cons(_mcc#0#0, _mcc#1#0))
        {
            assume $IsBox(_mcc#0#0, Tclass._module.G());
            assume $Is(_mcc#1#0, Tclass._module.List(Tclass._module.G()));
            havoc xs'#Z#0;
            assume {:id "id151"} let#0#0#0 == _mcc#1#0;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(let#0#0#0, Tclass._module.List(Tclass._module.G()));
            assume {:id "id152"} xs'#Z#0 == let#0#0#0;
            havoc a#Z#0;
            assume {:id "id153"} let#1#0#0 == _mcc#0#0;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $IsBox(let#1#0#0, Tclass._module.G());
            assume {:id "id154"} a#Z#0 == let#1#0#0;
            if (ys#0 == #_module.List.Nil())
            {
                assume {:id "id163"} _module.__default.merge($LS($LZ), xs#0, ys#0) == xs#0;
                assume true;
                // CheckWellformedWithResult: any expression
                assume $Is(_module.__default.merge($LS($LZ), xs#0, ys#0), 
                  Tclass._module.List(Tclass._module.G()));
                return;
            }
            else if (ys#0 == #_module.List.Cons(_mcc#2#0, _mcc#3#0))
            {
                assume $IsBox(_mcc#2#0, Tclass._module.G());
                assume $Is(_mcc#3#0, Tclass._module.List(Tclass._module.G()));
                havoc ys'#Z#0;
                assume {:id "id155"} let#2#0#0 == _mcc#3#0;
                assume true;
                // CheckWellformedWithResult: any expression
                assume $Is(let#2#0#0, Tclass._module.List(Tclass._module.G()));
                assume {:id "id156"} ys'#Z#0 == let#2#0#0;
                havoc b#Z#0;
                assume {:id "id157"} let#3#0#0 == _mcc#2#0;
                assume true;
                // CheckWellformedWithResult: any expression
                assume $IsBox(let#3#0#0, Tclass._module.G());
                assume {:id "id158"} b#Z#0 == let#3#0#0;
                ##a#0 := a#Z#0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##a#0, Tclass._module.G(), $Heap);
                ##b#0 := b#Z#0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##b#0, Tclass._module.G(), $Heap);
                assume _module.__default.Below#canCall(a#Z#0, b#Z#0);
                if (_module.__default.Below(a#Z#0, b#Z#0))
                {
                    ##xs#0 := xs'#Z#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0, Tclass._module.List(Tclass._module.G()), $Heap);
                    ##ys#0 := ys#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##ys#0, Tclass._module.List(Tclass._module.G()), $Heap);
                    assert {:id "id159"} DtRank(##xs#0) < DtRank(xs#0)
                       || (DtRank(##xs#0) == DtRank(xs#0) && DtRank(##ys#0) < DtRank(ys#0));
                    assume _module.__default.merge#canCall(xs'#Z#0, ys#0);
                    assume {:id "id160"} _module.__default.merge($LS($LZ), xs#0, ys#0)
                       == #_module.List.Cons(a#Z#0, _module.__default.merge($LS($LZ), xs'#Z#0, ys#0));
                    assume _module.__default.merge#canCall(xs'#Z#0, ys#0);
                    // CheckWellformedWithResult: any expression
                    assume $Is(_module.__default.merge($LS($LZ), xs#0, ys#0), 
                      Tclass._module.List(Tclass._module.G()));
                    return;
                }
                else
                {
                    ##xs#1 := xs#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#1, Tclass._module.List(Tclass._module.G()), $Heap);
                    ##ys#1 := ys'#Z#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##ys#1, Tclass._module.List(Tclass._module.G()), $Heap);
                    assert {:id "id161"} DtRank(##xs#1) < DtRank(xs#0)
                       || (DtRank(##xs#1) == DtRank(xs#0) && DtRank(##ys#1) < DtRank(ys#0));
                    assume _module.__default.merge#canCall(xs#0, ys'#Z#0);
                    assume {:id "id162"} _module.__default.merge($LS($LZ), xs#0, ys#0)
                       == #_module.List.Cons(b#Z#0, _module.__default.merge($LS($LZ), xs#0, ys'#Z#0));
                    assume _module.__default.merge#canCall(xs#0, ys'#Z#0);
                    // CheckWellformedWithResult: any expression
                    assume $Is(_module.__default.merge($LS($LZ), xs#0, ys#0), 
                      Tclass._module.List(Tclass._module.G()));
                    return;
                }
            }
            else
            {
                assume false;
            }
        }
        else
        {
            assume false;
        }

        assume false;
    }
}



// function declaration for _module._default.sorted
function _module.__default.sorted($ly: LayerType, xs#0: DatatypeType) : bool
uses {
// definition axiom for _module.__default.sorted (revealed)
axiom {:id "id165"} 2 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, xs#0: DatatypeType :: 
    { _module.__default.sorted($LS($ly), xs#0) } 
    _module.__default.sorted#canCall(xs#0)
         || (2 < $FunctionContextHeight
           && $Is(xs#0, Tclass._module.List(Tclass._module.G())))
       ==> (!_module.List.Nil_q(xs#0)
           ==> (var ys#1 := _module.List.tail(xs#0); 
            (var a#1 := _module.List.head(xs#0); 
              (forall y#1: Box :: 
                  { _module.__default.Below(a#1, y#1) } 
                    { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#1), y#1) } 
                  $IsBox(y#1, Tclass._module.G())
                     ==> _module.__default.multiset__of#canCall(Tclass._module.G(), ys#1)
                       && (MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#1), y#1)
                           > 0
                         ==> _module.__default.Below#canCall(a#1, y#1)))
                 && ((forall y#1: Box :: 
                    { _module.__default.Below(a#1, y#1) } 
                      { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#1), y#1) } 
                    $IsBox(y#1, Tclass._module.G())
                       ==> 
                      MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#1), y#1)
                         > 0
                       ==> _module.__default.Below(a#1, y#1))
                   ==> _module.__default.sorted#canCall(ys#1)))))
         && _module.__default.sorted($LS($ly), xs#0)
           == (if _module.List.Nil_q(xs#0)
             then true
             else (var ys#0 := _module.List.tail(xs#0); 
              (var a#0 := _module.List.head(xs#0); 
                (forall y#0: Box :: 
                    { _module.__default.Below(a#0, y#0) } 
                      { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#0), y#0) } 
                    $IsBox(y#0, Tclass._module.G())
                       ==> 
                      MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#0), y#0)
                         > 0
                       ==> _module.__default.Below(a#0, y#0))
                   && _module.__default.sorted($ly, ys#0)))));
// definition axiom for _module.__default.sorted for all literals (revealed)
axiom {:id "id166"} 2 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, xs#0: DatatypeType :: 
    {:weight 3} { _module.__default.sorted($LS($ly), Lit(xs#0)) } 
    _module.__default.sorted#canCall(Lit(xs#0))
         || (2 < $FunctionContextHeight
           && $Is(xs#0, Tclass._module.List(Tclass._module.G())))
       ==> (!Lit(_module.List.Nil_q(Lit(xs#0)))
           ==> (var ys#3 := Lit(_module.List.tail(Lit(xs#0))); 
            (var a#3 := Lit(_module.List.head(Lit(xs#0))); 
              (forall y#3: Box :: 
                  { _module.__default.Below(a#3, y#3) } 
                    { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#3), y#3) } 
                  $IsBox(y#3, Tclass._module.G())
                     ==> _module.__default.multiset__of#canCall(Tclass._module.G(), ys#3)
                       && (MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#3), y#3)
                           > 0
                         ==> _module.__default.Below#canCall(a#3, y#3)))
                 && ((forall y#3: Box :: 
                    { _module.__default.Below(a#3, y#3) } 
                      { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#3), y#3) } 
                    $IsBox(y#3, Tclass._module.G())
                       ==> 
                      MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#3), y#3)
                         > 0
                       ==> _module.__default.Below(a#3, y#3))
                   ==> _module.__default.sorted#canCall(ys#3)))))
         && _module.__default.sorted($LS($ly), Lit(xs#0))
           == (if _module.List.Nil_q(Lit(xs#0))
             then true
             else (var ys#2 := Lit(_module.List.tail(Lit(xs#0))); 
              (var a#2 := Lit(_module.List.head(Lit(xs#0))); 
                (forall y#2: Box :: 
                    { _module.__default.Below(a#2, y#2) } 
                      { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#2), y#2) } 
                    $IsBox(y#2, Tclass._module.G())
                       ==> 
                      MultiSet#Multiplicity(Lit(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#2)), y#2)
                         > 0
                       ==> _module.__default.Below(a#2, y#2))
                   && _module.__default.sorted($LS($ly), ys#2)))));
}

function _module.__default.sorted#canCall(xs#0: DatatypeType) : bool;

// layer synonym axiom
axiom (forall $ly: LayerType, xs#0: DatatypeType :: 
  { _module.__default.sorted($LS($ly), xs#0) } 
  _module.__default.sorted($LS($ly), xs#0) == _module.__default.sorted($ly, xs#0));

// fuel synonym axiom
axiom (forall $ly: LayerType, xs#0: DatatypeType :: 
  { _module.__default.sorted(AsFuelBottom($ly), xs#0) } 
  _module.__default.sorted($ly, xs#0) == _module.__default.sorted($LZ, xs#0));

function _module.__default.sorted#requires(LayerType, DatatypeType) : bool;

// #requires axiom for _module.__default.sorted
axiom (forall $ly: LayerType, xs#0: DatatypeType :: 
  { _module.__default.sorted#requires($ly, xs#0) } 
  $Is(xs#0, Tclass._module.List(Tclass._module.G()))
     ==> _module.__default.sorted#requires($ly, xs#0) == true);

procedure {:verboseName "sorted (well-formedness)"} CheckWellformed$$_module.__default.sorted(xs#0: DatatypeType where $Is(xs#0, Tclass._module.List(Tclass._module.G())));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "sorted (well-formedness)"} CheckWellformed$$_module.__default.sorted(xs#0: DatatypeType)
{
  var $_ReadsFrame: [ref,Field]bool;
  var _mcc#0#0: Box;
  var _mcc#1#0: DatatypeType;
  var ys#Z#0: DatatypeType;
  var let#0#0#0: DatatypeType;
  var a#Z#0: Box;
  var let#1#0#0: Box;
  var y#4: Box;
  var ##xs#0: DatatypeType;
  var ##a#0: Box;
  var ##b#0: Box;
  var ##xs#1: DatatypeType;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        if (xs#0 == #_module.List.Nil())
        {
            assume {:id "id173"} _module.__default.sorted($LS($LZ), xs#0) == Lit(true);
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(_module.__default.sorted($LS($LZ), xs#0), TBool);
            return;
        }
        else if (xs#0 == #_module.List.Cons(_mcc#0#0, _mcc#1#0))
        {
            assume $IsBox(_mcc#0#0, Tclass._module.G());
            assume $Is(_mcc#1#0, Tclass._module.List(Tclass._module.G()));
            havoc ys#Z#0;
            assume {:id "id167"} let#0#0#0 == _mcc#1#0;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(let#0#0#0, Tclass._module.List(Tclass._module.G()));
            assume {:id "id168"} ys#Z#0 == let#0#0#0;
            havoc a#Z#0;
            assume {:id "id169"} let#1#0#0 == _mcc#0#0;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $IsBox(let#1#0#0, Tclass._module.G());
            assume {:id "id170"} a#Z#0 == let#1#0#0;
            // Begin Comprehension WF check
            havoc y#4;
            if ($IsBox(y#4, Tclass._module.G()) && $IsAllocBox(y#4, Tclass._module.G(), $Heap))
            {
                ##xs#0 := ys#Z#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##xs#0, Tclass._module.List(Tclass._module.G()), $Heap);
                assume _module.__default.multiset__of#canCall(Tclass._module.G(), ys#Z#0);
                if (MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#Z#0), y#4)
                   > 0)
                {
                    ##a#0 := a#Z#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##a#0, Tclass._module.G(), $Heap);
                    ##b#0 := y#4;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##b#0, Tclass._module.G(), $Heap);
                    assume _module.__default.Below#canCall(a#Z#0, y#4);
                }
            }

            // End Comprehension WF check
            if ((forall y#5: Box :: 
              { _module.__default.Below(a#Z#0, y#5) } 
                { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#Z#0), y#5) } 
              $IsBox(y#5, Tclass._module.G())
                 ==> 
                MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#Z#0), y#5)
                   > 0
                 ==> _module.__default.Below(a#Z#0, y#5)))
            {
                ##xs#1 := ys#Z#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##xs#1, Tclass._module.List(Tclass._module.G()), $Heap);
                assert {:id "id171"} DtRank(##xs#1) < DtRank(xs#0);
                assume _module.__default.sorted#canCall(ys#Z#0);
            }

            assume {:id "id172"} _module.__default.sorted($LS($LZ), xs#0)
               == ((forall y#5: Box :: 
                  { _module.__default.Below(a#Z#0, y#5) } 
                    { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#Z#0), y#5) } 
                  $IsBox(y#5, Tclass._module.G())
                     ==> 
                    MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#Z#0), y#5)
                       > 0
                     ==> _module.__default.Below(a#Z#0, y#5))
                 && _module.__default.sorted($LS($LZ), ys#Z#0));
            assume (forall y#5: Box :: 
                { _module.__default.Below(a#Z#0, y#5) } 
                  { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#Z#0), y#5) } 
                $IsBox(y#5, Tclass._module.G())
                   ==> _module.__default.multiset__of#canCall(Tclass._module.G(), ys#Z#0)
                     && (MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#Z#0), y#5)
                         > 0
                       ==> _module.__default.Below#canCall(a#Z#0, y#5)))
               && ((forall y#5: Box :: 
                  { _module.__default.Below(a#Z#0, y#5) } 
                    { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#Z#0), y#5) } 
                  $IsBox(y#5, Tclass._module.G())
                     ==> 
                    MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#Z#0), y#5)
                       > 0
                     ==> _module.__default.Below(a#Z#0, y#5))
                 ==> _module.__default.sorted#canCall(ys#Z#0));
            // CheckWellformedWithResult: any expression
            assume $Is(_module.__default.sorted($LS($LZ), xs#0), TBool);
            return;
        }
        else
        {
            assume false;
        }

        assume false;
    }
}



// function declaration for _module._default.filter
function _module.__default.filter($ly: LayerType, g#0: Box, xs#0: DatatypeType) : DatatypeType
uses {
// consequence axiom for _module.__default.filter
axiom 1 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, g#0: Box, xs#0: DatatypeType :: 
    { _module.__default.filter($ly, g#0, xs#0) } 
    _module.__default.filter#canCall(g#0, xs#0)
         || (1 < $FunctionContextHeight
           && 
          $IsBox(g#0, Tclass._module.G())
           && $Is(xs#0, Tclass._module.List(Tclass._module.G())))
       ==> $Is(_module.__default.filter($ly, g#0, xs#0), 
        Tclass._module.List(Tclass._module.G())));
// definition axiom for _module.__default.filter (revealed)
axiom {:id "id174"} 1 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, g#0: Box, xs#0: DatatypeType :: 
    { _module.__default.filter($LS($ly), g#0, xs#0) } 
    _module.__default.filter#canCall(g#0, xs#0)
         || (1 < $FunctionContextHeight
           && 
          $IsBox(g#0, Tclass._module.G())
           && $Is(xs#0, Tclass._module.List(Tclass._module.G())))
       ==> (!_module.List.Nil_q(xs#0)
           ==> (var ys#1 := _module.List.tail(xs#0); 
            (var b#1 := _module.List.head(xs#0); 
              _module.__default.key#canCall(g#0)
                 && _module.__default.key#canCall(b#1)
                 && (_module.__default.key(g#0) == _module.__default.key(b#1)
                   ==> _module.__default.filter#canCall(g#0, ys#1))
                 && (_module.__default.key(g#0) != _module.__default.key(b#1)
                   ==> _module.__default.filter#canCall(g#0, ys#1)))))
         && _module.__default.filter($LS($ly), g#0, xs#0)
           == (if _module.List.Nil_q(xs#0)
             then #_module.List.Nil()
             else (var ys#0 := _module.List.tail(xs#0); 
              (var b#0 := _module.List.head(xs#0); 
                (if _module.__default.key(g#0) == _module.__default.key(b#0)
                   then #_module.List.Cons(b#0, _module.__default.filter($ly, g#0, ys#0))
                   else _module.__default.filter($ly, g#0, ys#0))))));
// definition axiom for _module.__default.filter for decreasing-related literals (revealed)
axiom {:id "id175"} 1 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, g#0: Box, xs#0: DatatypeType :: 
    {:weight 3} { _module.__default.filter($LS($ly), g#0, Lit(xs#0)) } 
    _module.__default.filter#canCall(g#0, Lit(xs#0))
         || (1 < $FunctionContextHeight
           && 
          $IsBox(g#0, Tclass._module.G())
           && $Is(xs#0, Tclass._module.List(Tclass._module.G())))
       ==> (!Lit(_module.List.Nil_q(Lit(xs#0)))
           ==> (var ys#3 := Lit(_module.List.tail(Lit(xs#0))); 
            (var b#3 := Lit(_module.List.head(Lit(xs#0))); 
              _module.__default.key#canCall(g#0)
                 && _module.__default.key#canCall(b#3)
                 && (_module.__default.key(g#0) == _module.__default.key(b#3)
                   ==> _module.__default.filter#canCall(g#0, ys#3))
                 && (_module.__default.key(g#0) != _module.__default.key(b#3)
                   ==> _module.__default.filter#canCall(g#0, ys#3)))))
         && _module.__default.filter($LS($ly), g#0, Lit(xs#0))
           == (if _module.List.Nil_q(Lit(xs#0))
             then #_module.List.Nil()
             else (var ys#2 := Lit(_module.List.tail(Lit(xs#0))); 
              (var b#2 := Lit(_module.List.head(Lit(xs#0))); 
                (if _module.__default.key(g#0) == _module.__default.key(b#2)
                   then #_module.List.Cons(b#2, _module.__default.filter($LS($ly), g#0, ys#2))
                   else _module.__default.filter($LS($ly), g#0, ys#2))))));
// definition axiom for _module.__default.filter for all literals (revealed)
axiom {:id "id176"} 1 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, g#0: Box, xs#0: DatatypeType :: 
    {:weight 3} { _module.__default.filter($LS($ly), Lit(g#0), Lit(xs#0)) } 
    _module.__default.filter#canCall(Lit(g#0), Lit(xs#0))
         || (1 < $FunctionContextHeight
           && 
          $IsBox(g#0, Tclass._module.G())
           && $Is(xs#0, Tclass._module.List(Tclass._module.G())))
       ==> (!Lit(_module.List.Nil_q(Lit(xs#0)))
           ==> (var ys#5 := Lit(_module.List.tail(Lit(xs#0))); 
            (var b#5 := Lit(_module.List.head(Lit(xs#0))); 
              _module.__default.key#canCall(Lit(g#0))
                 && _module.__default.key#canCall(b#5)
                 && (_module.__default.key(Lit(g#0)) == _module.__default.key(b#5)
                   ==> _module.__default.filter#canCall(Lit(g#0), ys#5))
                 && (_module.__default.key(Lit(g#0)) != _module.__default.key(b#5)
                   ==> _module.__default.filter#canCall(Lit(g#0), ys#5)))))
         && _module.__default.filter($LS($ly), Lit(g#0), Lit(xs#0))
           == (if _module.List.Nil_q(Lit(xs#0))
             then #_module.List.Nil()
             else (var ys#4 := Lit(_module.List.tail(Lit(xs#0))); 
              (var b#4 := Lit(_module.List.head(Lit(xs#0))); 
                (if _module.__default.key(Lit(g#0)) == _module.__default.key(b#4)
                   then #_module.List.Cons(b#4, Lit(_module.__default.filter($LS($ly), Lit(g#0), ys#4)))
                   else _module.__default.filter($LS($ly), Lit(g#0), ys#4))))));
}

function _module.__default.filter#canCall(g#0: Box, xs#0: DatatypeType) : bool;

// layer synonym axiom
axiom (forall $ly: LayerType, g#0: Box, xs#0: DatatypeType :: 
  { _module.__default.filter($LS($ly), g#0, xs#0) } 
  _module.__default.filter($LS($ly), g#0, xs#0)
     == _module.__default.filter($ly, g#0, xs#0));

// fuel synonym axiom
axiom (forall $ly: LayerType, g#0: Box, xs#0: DatatypeType :: 
  { _module.__default.filter(AsFuelBottom($ly), g#0, xs#0) } 
  _module.__default.filter($ly, g#0, xs#0)
     == _module.__default.filter($LZ, g#0, xs#0));

function _module.__default.filter#requires(LayerType, Box, DatatypeType) : bool;

// #requires axiom for _module.__default.filter
axiom (forall $ly: LayerType, g#0: Box, xs#0: DatatypeType :: 
  { _module.__default.filter#requires($ly, g#0, xs#0) } 
  $IsBox(g#0, Tclass._module.G())
       && $Is(xs#0, Tclass._module.List(Tclass._module.G()))
     ==> _module.__default.filter#requires($ly, g#0, xs#0) == true);

procedure {:verboseName "filter (well-formedness)"} CheckWellformed$$_module.__default.filter(g#0: Box where $IsBox(g#0, Tclass._module.G()), 
    xs#0: DatatypeType where $Is(xs#0, Tclass._module.List(Tclass._module.G())));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "filter (well-formedness)"} CheckWellformed$$_module.__default.filter(g#0: Box, xs#0: DatatypeType)
{
  var $_ReadsFrame: [ref,Field]bool;
  var _mcc#0#0: Box;
  var _mcc#1#0: DatatypeType;
  var ys#Z#0: DatatypeType;
  var let#0#0#0: DatatypeType;
  var b#Z#0: Box;
  var let#1#0#0: Box;
  var ##g#0: Box;
  var ##g#1: Box;
  var ##g#2: Box;
  var ##xs#0: DatatypeType;
  var ##g#3: Box;
  var ##xs#1: DatatypeType;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume $Is(_module.__default.filter($LS($LZ), g#0, xs#0), 
          Tclass._module.List(Tclass._module.G()));
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        if (xs#0 == #_module.List.Nil())
        {
            assume {:id "id185"} _module.__default.filter($LS($LZ), g#0, xs#0) == Lit(#_module.List.Nil());
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(_module.__default.filter($LS($LZ), g#0, xs#0), 
              Tclass._module.List(Tclass._module.G()));
            return;
        }
        else if (xs#0 == #_module.List.Cons(_mcc#0#0, _mcc#1#0))
        {
            assume $IsBox(_mcc#0#0, Tclass._module.G());
            assume $Is(_mcc#1#0, Tclass._module.List(Tclass._module.G()));
            havoc ys#Z#0;
            assume {:id "id177"} let#0#0#0 == _mcc#1#0;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(let#0#0#0, Tclass._module.List(Tclass._module.G()));
            assume {:id "id178"} ys#Z#0 == let#0#0#0;
            havoc b#Z#0;
            assume {:id "id179"} let#1#0#0 == _mcc#0#0;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $IsBox(let#1#0#0, Tclass._module.G());
            assume {:id "id180"} b#Z#0 == let#1#0#0;
            ##g#0 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0, Tclass._module.G(), $Heap);
            assume _module.__default.key#canCall(g#0);
            ##g#1 := b#Z#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#1, Tclass._module.G(), $Heap);
            assume _module.__default.key#canCall(b#Z#0);
            if (_module.__default.key(g#0) == _module.__default.key(b#Z#0))
            {
                ##g#2 := g#0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##g#2, Tclass._module.G(), $Heap);
                ##xs#0 := ys#Z#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##xs#0, Tclass._module.List(Tclass._module.G()), $Heap);
                assert {:id "id181"} DtRank(##xs#0) < DtRank(xs#0);
                assume _module.__default.filter#canCall(g#0, ys#Z#0);
                assume {:id "id182"} _module.__default.filter($LS($LZ), g#0, xs#0)
                   == #_module.List.Cons(b#Z#0, _module.__default.filter($LS($LZ), g#0, ys#Z#0));
                assume _module.__default.filter#canCall(g#0, ys#Z#0);
                // CheckWellformedWithResult: any expression
                assume $Is(_module.__default.filter($LS($LZ), g#0, xs#0), 
                  Tclass._module.List(Tclass._module.G()));
                return;
            }
            else
            {
                ##g#3 := g#0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##g#3, Tclass._module.G(), $Heap);
                ##xs#1 := ys#Z#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##xs#1, Tclass._module.List(Tclass._module.G()), $Heap);
                assert {:id "id183"} DtRank(##xs#1) < DtRank(xs#0);
                assume _module.__default.filter#canCall(g#0, ys#Z#0);
                assume {:id "id184"} _module.__default.filter($LS($LZ), g#0, xs#0)
                   == _module.__default.filter($LS($LZ), g#0, ys#Z#0);
                assume _module.__default.filter#canCall(g#0, ys#Z#0);
                // CheckWellformedWithResult: any expression
                assume $Is(_module.__default.filter($LS($LZ), g#0, xs#0), 
                  Tclass._module.List(Tclass._module.G()));
                return;
            }
        }
        else
        {
            assume false;
        }

        assume false;
    }
}



// function declaration for _module._default.stable
function _module.__default.stable(xs#0: DatatypeType, ys#0: DatatypeType) : bool
uses {
// definition axiom for _module.__default.stable (revealed)
axiom {:id "id186"} 2 <= $FunctionContextHeight
   ==> (forall xs#0: DatatypeType, ys#0: DatatypeType :: 
    { _module.__default.stable(xs#0, ys#0) } 
    _module.__default.stable#canCall(xs#0, ys#0)
         || (2 < $FunctionContextHeight
           && 
          $Is(xs#0, Tclass._module.List(Tclass._module.G()))
           && $Is(ys#0, Tclass._module.List(Tclass._module.G())))
       ==> (forall g#0: Box :: 
          { _module.__default.filter($LS($LZ), g#0, ys#0) } 
            { _module.__default.filter($LS($LZ), g#0, xs#0) } 
          $IsBox(g#0, Tclass._module.G())
             ==> $IsA#_module.List(_module.__default.filter($LS($LZ), g#0, xs#0))
               && $IsA#_module.List(_module.__default.filter($LS($LZ), g#0, ys#0))
               && 
              _module.__default.filter#canCall(g#0, xs#0)
               && _module.__default.filter#canCall(g#0, ys#0))
         && _module.__default.stable(xs#0, ys#0)
           == (forall g#0: Box :: 
            { _module.__default.filter($LS($LZ), g#0, ys#0) } 
              { _module.__default.filter($LS($LZ), g#0, xs#0) } 
            $IsBox(g#0, Tclass._module.G())
               ==> _module.List#Equal(_module.__default.filter($LS($LZ), g#0, xs#0), 
                _module.__default.filter($LS($LZ), g#0, ys#0))));
// definition axiom for _module.__default.stable for all literals (revealed)
axiom {:id "id187"} 2 <= $FunctionContextHeight
   ==> (forall xs#0: DatatypeType, ys#0: DatatypeType :: 
    {:weight 3} { _module.__default.stable(Lit(xs#0), Lit(ys#0)) } 
    _module.__default.stable#canCall(Lit(xs#0), Lit(ys#0))
         || (2 < $FunctionContextHeight
           && 
          $Is(xs#0, Tclass._module.List(Tclass._module.G()))
           && $Is(ys#0, Tclass._module.List(Tclass._module.G())))
       ==> (forall g#1: Box :: 
          { _module.__default.filter($LS($LZ), g#1, ys#0) } 
            { _module.__default.filter($LS($LZ), g#1, xs#0) } 
          $IsBox(g#1, Tclass._module.G())
             ==> $IsA#_module.List(_module.__default.filter($LS($LZ), g#1, Lit(xs#0)))
               && $IsA#_module.List(_module.__default.filter($LS($LZ), g#1, Lit(ys#0)))
               && 
              _module.__default.filter#canCall(g#1, Lit(xs#0))
               && _module.__default.filter#canCall(g#1, Lit(ys#0)))
         && _module.__default.stable(Lit(xs#0), Lit(ys#0))
           == (forall g#1: Box :: 
            { _module.__default.filter($LS($LZ), g#1, ys#0) } 
              { _module.__default.filter($LS($LZ), g#1, xs#0) } 
            $IsBox(g#1, Tclass._module.G())
               ==> _module.List#Equal(_module.__default.filter($LS($LZ), g#1, Lit(xs#0)), 
                _module.__default.filter($LS($LZ), g#1, Lit(ys#0)))));
}

function _module.__default.stable#canCall(xs#0: DatatypeType, ys#0: DatatypeType) : bool;

function _module.__default.stable#requires(DatatypeType, DatatypeType) : bool;

// #requires axiom for _module.__default.stable
axiom (forall xs#0: DatatypeType, ys#0: DatatypeType :: 
  { _module.__default.stable#requires(xs#0, ys#0) } 
  $Is(xs#0, Tclass._module.List(Tclass._module.G()))
       && $Is(ys#0, Tclass._module.List(Tclass._module.G()))
     ==> _module.__default.stable#requires(xs#0, ys#0) == true);

procedure {:verboseName "stable (well-formedness)"} CheckWellformed$$_module.__default.stable(xs#0: DatatypeType where $Is(xs#0, Tclass._module.List(Tclass._module.G())), 
    ys#0: DatatypeType where $Is(ys#0, Tclass._module.List(Tclass._module.G())));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "Correctness (well-formedness)"} CheckWellFormed$$_module.__default.Correctness(xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(xs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(xs#0));
  free requires 8 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "Correctness (call)"} Call$$_module.__default.Correctness(xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(xs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(xs#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.sort#canCall(xs#0)
     && _module.__default.sorted#canCall(_module.__default.sort(xs#0))
     && (_module.__default.sorted($LS($LZ), _module.__default.sort(xs#0))
       ==> _module.__default.sort#canCall(xs#0)
         && _module.__default.multiset__of#canCall(Tclass._module.G(), _module.__default.sort(xs#0))
         && _module.__default.multiset__of#canCall(Tclass._module.G(), xs#0)
         && (MultiSet#Equal(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), _module.__default.sort(xs#0)), 
            _module.__default.multiset__of(Tclass._module.G(), $LS($LZ), xs#0))
           ==> _module.__default.sort#canCall(xs#0)
             && _module.__default.stable#canCall(_module.__default.sort(xs#0), xs#0)));
  free ensures {:id "id192"} _module.__default.sorted#canCall(_module.__default.sort(xs#0))
     && 
    _module.__default.sorted($LS($LZ), _module.__default.sort(xs#0))
     && (if _module.List.Nil_q(_module.__default.sort(xs#0))
       then true
       else (var ys#1 := _module.List.tail(_module.__default.sort(xs#0)); 
        (var a#1 := _module.List.head(_module.__default.sort(xs#0)); 
          (forall y#1: Box :: 
              { _module.__default.Below(a#1, y#1) } 
                { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#1), y#1) } 
              $IsBox(y#1, Tclass._module.G())
                 ==> 
                MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#1), y#1)
                   > 0
                 ==> _module.__default.Below(a#1, y#1))
             && _module.__default.sorted($LS($LZ), ys#1))));
  ensures {:id "id193"} MultiSet#Equal(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), _module.__default.sort(xs#0)), 
    _module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), xs#0));
  free ensures {:id "id194"} _module.__default.stable#canCall(_module.__default.sort(xs#0), xs#0)
     && 
    _module.__default.stable(_module.__default.sort(xs#0), xs#0)
     && (forall g#0: Box :: 
      { _module.__default.filter($LS($LZ), g#0, xs#0) } 
        { _module.__default.filter($LS($LZ), g#0, _module.__default.sort(xs#0)) } 
      $IsBox(g#0, Tclass._module.G())
         ==> _module.List#Equal(_module.__default.filter($LS($LZ), g#0, _module.__default.sort(xs#0)), 
          _module.__default.filter($LS($LZ), g#0, xs#0)));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "Correctness (correctness)"} Impl$$_module.__default.Correctness(xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(xs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(xs#0))
   returns ($_reverifyPost: bool);
  free requires 8 == $FunctionContextHeight;
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.sort#canCall(xs#0)
     && _module.__default.sorted#canCall(_module.__default.sort(xs#0))
     && (_module.__default.sorted($LS($LZ), _module.__default.sort(xs#0))
       ==> _module.__default.sort#canCall(xs#0)
         && _module.__default.multiset__of#canCall(Tclass._module.G(), _module.__default.sort(xs#0))
         && _module.__default.multiset__of#canCall(Tclass._module.G(), xs#0)
         && (MultiSet#Equal(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), _module.__default.sort(xs#0)), 
            _module.__default.multiset__of(Tclass._module.G(), $LS($LZ), xs#0))
           ==> _module.__default.sort#canCall(xs#0)
             && _module.__default.stable#canCall(_module.__default.sort(xs#0), xs#0)));
  ensures {:id "id195"} _module.__default.sorted#canCall(_module.__default.sort(xs#0))
     ==> _module.__default.sorted($LS($LZ), _module.__default.sort(xs#0))
       || (_module.List.Nil_q(_module.__default.sort(xs#0)) ==> Lit(true));
  ensures {:id "id196"} _module.__default.sorted#canCall(_module.__default.sort(xs#0))
     ==> _module.__default.sorted($LS($LZ), _module.__default.sort(xs#0))
       || (!_module.List.Nil_q(_module.__default.sort(xs#0))
         ==> (var ys#2 := _module.List.tail(_module.__default.sort(xs#0)); 
          (var a#2 := _module.List.head(_module.__default.sort(xs#0)); 
            (forall y#2: Box :: 
              { _module.__default.Below(a#2, y#2) } 
                { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#2), y#2) } 
              $IsBox(y#2, Tclass._module.G())
                 ==> 
                MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#2), y#2)
                   > 0
                 ==> _module.__default.Below(a#2, y#2)))));
  ensures {:id "id197"} _module.__default.sorted#canCall(_module.__default.sort(xs#0))
     ==> _module.__default.sorted($LS($LZ), _module.__default.sort(xs#0))
       || (!_module.List.Nil_q(_module.__default.sort(xs#0))
         ==> (var ys#2 := _module.List.tail(_module.__default.sort(xs#0)); 
          (var a#2 := _module.List.head(_module.__default.sort(xs#0)); 
            _module.__default.sorted($LS($LS($LZ)), ys#2))));
  ensures {:id "id198"} MultiSet#Equal(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), _module.__default.sort(xs#0)), 
    _module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), xs#0));
  ensures {:id "id199"} _module.__default.stable#canCall(_module.__default.sort(xs#0), xs#0)
     ==> _module.__default.stable(_module.__default.sort(xs#0), xs#0)
       || (forall g#1: Box :: 
        { _module.__default.filter($LS($LS($LZ)), g#1, xs#0) } 
          { _module.__default.filter($LS($LS($LZ)), g#1, _module.__default.sort(xs#0)) } 
        $IsBox(g#1, Tclass._module.G())
           ==> _module.List#Equal(_module.__default.filter($LS($LS($LZ)), g#1, _module.__default.sort(xs#0)), 
            _module.__default.filter($LS($LS($LZ)), g#1, xs#0)));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Correctness (correctness)"} Impl$$_module.__default.Correctness(xs#0: DatatypeType) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $initHeapForallStmt#0: Heap;
  var ##xs#0_0_0: DatatypeType;
  var ##xs#0_0_1: DatatypeType;
  var xs##0_0_0: DatatypeType;
  var ##xs#0_0_2: DatatypeType;
  var ##xs#0_1_0: DatatypeType;
  var ##x#0_1_0: DatatypeType;
  var ##xs#0_1_1: DatatypeType;
  var x##0_1_0: DatatypeType;
  var ##xs#0_1_2: DatatypeType;
  var ##xs#0_1_3: DatatypeType;
  var ##xs#0_1_4: DatatypeType;
  var ##xs#0_2_0: DatatypeType;
  var ##xs#0_2_1: DatatypeType;
  var ##xs#0_2_2: DatatypeType;
  var ##x#0_2_0: DatatypeType;
  var ##xs#0_2_3: DatatypeType;
  var ##xs#0_0: DatatypeType;
  var ##xs#0_1: DatatypeType;
  var xs##0: DatatypeType;
  var g#1_0: Box;
  var g##1_0: Box;
  var xs##1_0: DatatypeType;
  var $initHeapForallStmt#1_0: Heap;

    // AddMethodImpl: Correctness, Impl$$_module.__default.Correctness
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume $IsA#_module.List(xs#0);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#xs0#0: DatatypeType :: 
      { _module.__default.sort($ih#xs0#0) } 
      $Is($ih#xs0#0, Tclass._module.List(Tclass._module.G()))
           && Lit(true)
           && DtRank($ih#xs0#0) < DtRank(xs#0)
         ==> _module.__default.sorted($LS($LZ), _module.__default.sort($ih#xs0#0))
           && MultiSet#Equal(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), _module.__default.sort($ih#xs0#0)), 
            _module.__default.multiset__of(Tclass._module.G(), $LS($LZ), $ih#xs0#0))
           && _module.__default.stable(_module.__default.sort($ih#xs0#0), $ih#xs0#0));
    $_reverifyPost := false;
    // ----- calc statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(175,3)
    // Assume Fuel Constant
    if (*)
    {
        // ----- assert wf[initial] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(175,3)
        ##xs#0_1 := xs#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##xs#0_1, Tclass._module.List(Tclass._module.G()), $Heap);
        assume _module.__default.sort#canCall(xs#0);
        ##xs#0_0 := _module.__default.sort(xs#0);
        // assume allocatedness for argument to function
        assume $IsAlloc(##xs#0_0, Tclass._module.List(Tclass._module.G()), $Heap);
        assume _module.__default.multiset__of#canCall(Tclass._module.G(), _module.__default.sort(xs#0));
        assume _module.__default.sort#canCall(xs#0)
           && _module.__default.multiset__of#canCall(Tclass._module.G(), _module.__default.sort(xs#0));
        assume false;
    }
    else if (*)
    {
        // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(175,3)
        ##xs#0_2_1 := xs#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##xs#0_2_1, Tclass._module.List(Tclass._module.G()), $Heap);
        assume _module.__default.sort#canCall(xs#0);
        ##xs#0_2_0 := _module.__default.sort(xs#0);
        // assume allocatedness for argument to function
        assume $IsAlloc(##xs#0_2_0, Tclass._module.List(Tclass._module.G()), $Heap);
        assume _module.__default.multiset__of#canCall(Tclass._module.G(), _module.__default.sort(xs#0));
        assume _module.__default.sort#canCall(xs#0)
           && _module.__default.multiset__of#canCall(Tclass._module.G(), _module.__default.sort(xs#0));
        // ----- Hint0 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(175,3)
        push;
        pop;
        // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(175,3)
        ##xs#0_2_3 := xs#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##xs#0_2_3, Tclass._module.List(Tclass._module.G()), $Heap);
        assume _module.__default.sequences#canCall(xs#0);
        ##x#0_2_0 := _module.__default.sequences($LS($LZ), xs#0);
        // assume allocatedness for argument to function
        assume $IsAlloc(##x#0_2_0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
        assert {:id "id205"} {:subsumption 0} !_module.List#Equal(##x#0_2_0, #_module.List.Nil());
        assume _module.__default.mergeAll#canCall(_module.__default.sequences($LS($LZ), xs#0));
        ##xs#0_2_2 := _module.__default.mergeAll($LS($LZ), _module.__default.sequences($LS($LZ), xs#0));
        // assume allocatedness for argument to function
        assume $IsAlloc(##xs#0_2_2, Tclass._module.List(Tclass._module.G()), $Heap);
        assume _module.__default.multiset__of#canCall(Tclass._module.G(), 
          _module.__default.mergeAll($LS($LZ), _module.__default.sequences($LS($LZ), xs#0)));
        assume _module.__default.sequences#canCall(xs#0)
           && _module.__default.mergeAll#canCall(_module.__default.sequences($LS($LZ), xs#0))
           && _module.__default.multiset__of#canCall(Tclass._module.G(), 
            _module.__default.mergeAll($LS($LZ), _module.__default.sequences($LS($LZ), xs#0)));
        // ----- assert line0 == line1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(175,3)
        assert {:id "id206"} {:subsumption 0} MultiSet#Equal(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), _module.__default.sort(xs#0)), 
          _module.__default.multiset__of(Tclass._module.G(), 
            $LS($LS($LZ)), 
            _module.__default.mergeAll($LS($LS($LZ)), _module.__default.sequences($LS($LS($LZ)), xs#0))));
        assume false;
    }
    else if (*)
    {
        // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(175,3)
        ##xs#0_1_1 := xs#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##xs#0_1_1, Tclass._module.List(Tclass._module.G()), $Heap);
        assume _module.__default.sequences#canCall(xs#0);
        ##x#0_1_0 := _module.__default.sequences($LS($LZ), xs#0);
        // assume allocatedness for argument to function
        assume $IsAlloc(##x#0_1_0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
        assume {:id "id202"} {:subsumption 0} !_module.List#Equal(##x#0_1_0, #_module.List.Nil());
        assume _module.__default.mergeAll#canCall(_module.__default.sequences($LS($LZ), xs#0));
        ##xs#0_1_0 := _module.__default.mergeAll($LS($LZ), _module.__default.sequences($LS($LZ), xs#0));
        // assume allocatedness for argument to function
        assume $IsAlloc(##xs#0_1_0, Tclass._module.List(Tclass._module.G()), $Heap);
        assume _module.__default.multiset__of#canCall(Tclass._module.G(), 
          _module.__default.mergeAll($LS($LZ), _module.__default.sequences($LS($LZ), xs#0)));
        assume _module.__default.sequences#canCall(xs#0)
           && _module.__default.mergeAll#canCall(_module.__default.sequences($LS($LZ), xs#0))
           && _module.__default.multiset__of#canCall(Tclass._module.G(), 
            _module.__default.mergeAll($LS($LZ), _module.__default.sequences($LS($LZ), xs#0)));
        // ----- Hint1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(175,3)
        push;
        push;
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(178,20)
        // TrCallStmt: Before ProcessCallStmt
        ##xs#0_1_2 := xs#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##xs#0_1_2, Tclass._module.List(Tclass._module.G()), $Heap);
        assume _module.__default.sequences#canCall(xs#0);
        assume _module.__default.sequences#canCall(xs#0);
        // ProcessCallStmt: CheckSubrange
        x##0_1_0 := _module.__default.sequences($LS($LZ), xs#0);
        call {:id "id203"} Call$$_module.__default.perm__mergeAll(x##0_1_0);
        // TrCallStmt: After ProcessCallStmt
        pop;
        pop;
        // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(175,3)
        ##xs#0_1_4 := xs#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##xs#0_1_4, Tclass._module.List(Tclass._module.G()), $Heap);
        assume _module.__default.sequences#canCall(xs#0);
        ##xs#0_1_3 := _module.__default.sequences($LS($LZ), xs#0);
        // assume allocatedness for argument to function
        assume $IsAlloc(##xs#0_1_3, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
        assume _module.__default.MultisetUnion#canCall(Tclass._module.G(), _module.__default.sequences($LS($LZ), xs#0));
        assume _module.__default.sequences#canCall(xs#0)
           && _module.__default.MultisetUnion#canCall(Tclass._module.G(), _module.__default.sequences($LS($LZ), xs#0));
        // ----- assert line1 == line2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(175,3)
        assert {:id "id204"} {:subsumption 0} MultiSet#Equal(_module.__default.multiset__of(Tclass._module.G(), 
            $LS($LS($LZ)), 
            _module.__default.mergeAll($LS($LS($LZ)), _module.__default.sequences($LS($LS($LZ)), xs#0))), 
          _module.__default.MultisetUnion(Tclass._module.G(), 
            $LS($LS($LZ)), 
            _module.__default.sequences($LS($LS($LZ)), xs#0)));
        assume false;
    }
    else if (*)
    {
        // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(175,3)
        ##xs#0_0_1 := xs#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##xs#0_0_1, Tclass._module.List(Tclass._module.G()), $Heap);
        assume _module.__default.sequences#canCall(xs#0);
        ##xs#0_0_0 := _module.__default.sequences($LS($LZ), xs#0);
        // assume allocatedness for argument to function
        assume $IsAlloc(##xs#0_0_0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
        assume _module.__default.MultisetUnion#canCall(Tclass._module.G(), _module.__default.sequences($LS($LZ), xs#0));
        assume _module.__default.sequences#canCall(xs#0)
           && _module.__default.MultisetUnion#canCall(Tclass._module.G(), _module.__default.sequences($LS($LZ), xs#0));
        // ----- Hint2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(175,3)
        push;
        push;
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(180,21)
        // TrCallStmt: Before ProcessCallStmt
        assume true;
        // ProcessCallStmt: CheckSubrange
        xs##0_0_0 := xs#0;
        call {:id "id200"} Call$$_module.__default.perm__sequences(xs##0_0_0);
        // TrCallStmt: After ProcessCallStmt
        pop;
        pop;
        // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(175,3)
        ##xs#0_0_2 := xs#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##xs#0_0_2, Tclass._module.List(Tclass._module.G()), $Heap);
        assume _module.__default.multiset__of#canCall(Tclass._module.G(), xs#0);
        assume _module.__default.multiset__of#canCall(Tclass._module.G(), xs#0);
        // ----- assert line2 == line3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(175,3)
        assert {:id "id201"} {:subsumption 0} MultiSet#Equal(_module.__default.MultisetUnion(Tclass._module.G(), 
            $LS($LS($LZ)), 
            _module.__default.sequences($LS($LS($LZ)), xs#0)), 
          _module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), xs#0));
        assume false;
    }

    assume {:id "id207"} MultiSet#Equal(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), _module.__default.sort(xs#0)), 
      _module.__default.multiset__of(Tclass._module.G(), $LS($LZ), xs#0));
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(183,14)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    xs##0 := xs#0;
    call {:id "id208"} Call$$_module.__default.sorted__sort(xs##0);
    // TrCallStmt: After ProcessCallStmt
    // ----- forall statement (call) ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(184,3)
    if (*)
    {
        // Assume Fuel Constant
        havoc g#1_0;
        assume $IsBox(g#1_0, Tclass._module.G());
        assume true;
        assume true;
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(185,16)
        // TrCallStmt: Before ProcessCallStmt
        assume true;
        // ProcessCallStmt: CheckSubrange
        g##1_0 := g#1_0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        xs##1_0 := xs#0;
        call {:id "id209"} Call$$_module.__default.stable__sort(g##1_0, xs##1_0);
        // TrCallStmt: After ProcessCallStmt
        assume false;
    }
    else
    {
        $initHeapForallStmt#1_0 := $Heap;
        havoc $Heap;
        assume $initHeapForallStmt#1_0 == $Heap;
        assume (forall g#1_1: Box :: 
          { _module.__default.filter($LS($LZ), g#1_1, xs#0) } 
            { _module.__default.filter($LS($LZ), g#1_1, _module.__default.sort(xs#0)) } 
          $IsBox(g#1_1, Tclass._module.G()) && Lit(true)
             ==> _module.List#Equal(_module.__default.filter($LS($LZ), g#1_1, _module.__default.sort(xs#0)), 
              _module.__default.filter($LS($LZ), g#1_1, xs#0)));
    }
}



procedure {:verboseName "perm_sequences (well-formedness)"} CheckWellFormed$$_module.__default.perm__sequences(xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(xs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(xs#0));
  free requires 3 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "perm_sequences (call)"} Call$$_module.__default.perm__sequences(xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(xs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(xs#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.sequences#canCall(xs#0)
     && _module.__default.MultisetUnion#canCall(Tclass._module.G(), _module.__default.sequences($LS($LZ), xs#0))
     && _module.__default.multiset__of#canCall(Tclass._module.G(), xs#0);
  ensures {:id "id211"} MultiSet#Equal(_module.__default.MultisetUnion(Tclass._module.G(), 
      $LS($LS($LZ)), 
      _module.__default.sequences($LS($LS($LZ)), xs#0)), 
    _module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), xs#0));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "perm_sequences (correctness)"} Impl$$_module.__default.perm__sequences(xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(xs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(xs#0))
   returns ($_reverifyPost: bool);
  free requires 3 == $FunctionContextHeight;
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.sequences#canCall(xs#0)
     && _module.__default.MultisetUnion#canCall(Tclass._module.G(), _module.__default.sequences($LS($LZ), xs#0))
     && _module.__default.multiset__of#canCall(Tclass._module.G(), xs#0);
  ensures {:id "id212"} MultiSet#Equal(_module.__default.MultisetUnion(Tclass._module.G(), 
      $LS($LS($LZ)), 
      _module.__default.sequences($LS($LS($LZ)), xs#0)), 
    _module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), xs#0));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "perm_sequences (correctness)"} Impl$$_module.__default.perm__sequences(xs#0: DatatypeType) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $initHeapForallStmt#0: Heap;
  var _mcc#0#0_0: Box;
  var _mcc#1#0_0: DatatypeType;
  var ys#0_0: DatatypeType;
  var let#0_0#0#0: DatatypeType;
  var a#0_0: Box;
  var let#0_1#0#0: Box;
  var _mcc#2#0_0_0: Box;
  var _mcc#3#0_0_0: DatatypeType;
  var zs#0_0_0: DatatypeType;
  var let#0_0_0#0#0: DatatypeType;
  var b#0_0_0: Box;
  var let#0_0_1#0#0: Box;
  var a##0_0_0: Box;
  var xs##0_0_0: DatatypeType;
  var ys##0_0_0: DatatypeType;
  var a##0_0_1: Box;
  var xs##0_0_1: DatatypeType;
  var ys##0_0_1: DatatypeType;

    // AddMethodImpl: perm_sequences, Impl$$_module.__default.perm__sequences
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume $IsA#_module.List(xs#0);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#xs0#0: DatatypeType :: 
      { _module.__default.multiset__of(Tclass._module.G(), $LS($LZ), $ih#xs0#0) } 
        { _module.__default.sequences($LS($LZ), $ih#xs0#0) } 
      $Is($ih#xs0#0, Tclass._module.List(Tclass._module.G()))
           && Lit(true)
           && (DtRank($ih#xs0#0) < DtRank(xs#0)
             || (DtRank($ih#xs0#0) == DtRank(xs#0) && 0 <= LitInt(0) && LitInt(0) < LitInt(0)))
         ==> MultiSet#Equal(_module.__default.MultisetUnion(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), $ih#xs0#0)), 
          _module.__default.multiset__of(Tclass._module.G(), $LS($LZ), $ih#xs0#0)));
    $_reverifyPost := false;
    assume true;
    havoc _mcc#0#0_0, _mcc#1#0_0;
    if (xs#0 == #_module.List.Nil())
    {
    }
    else if (xs#0 == #_module.List.Cons(_mcc#0#0_0, _mcc#1#0_0))
    {
        assume $IsBox(_mcc#0#0_0, Tclass._module.G());
        assume $Is(_mcc#1#0_0, Tclass._module.List(Tclass._module.G()));
        havoc ys#0_0;
        assume $Is(ys#0_0, Tclass._module.List(Tclass._module.G()))
           && $IsAlloc(ys#0_0, Tclass._module.List(Tclass._module.G()), $Heap);
        assume {:id "id213"} let#0_0#0#0 == _mcc#1#0_0;
        assume true;
        assume true;
        // CheckWellformedWithResult: any expression
        assume $Is(let#0_0#0#0, Tclass._module.List(Tclass._module.G()));
        assume {:id "id214"} ys#0_0 == let#0_0#0#0;
        havoc a#0_0;
        assume $IsBox(a#0_0, Tclass._module.G())
           && $IsAllocBox(a#0_0, Tclass._module.G(), $Heap);
        assume {:id "id215"} let#0_1#0#0 == _mcc#0#0_0;
        assume true;
        assume true;
        // CheckWellformedWithResult: any expression
        assume $IsBox(let#0_1#0#0, Tclass._module.G());
        assume {:id "id216"} a#0_0 == let#0_1#0#0;
        assume true;
        havoc _mcc#2#0_0_0, _mcc#3#0_0_0;
        if (ys#0_0 == #_module.List.Nil())
        {
        }
        else if (ys#0_0 == #_module.List.Cons(_mcc#2#0_0_0, _mcc#3#0_0_0))
        {
            assume $IsBox(_mcc#2#0_0_0, Tclass._module.G());
            assume $Is(_mcc#3#0_0_0, Tclass._module.List(Tclass._module.G()));
            havoc zs#0_0_0;
            assume $Is(zs#0_0_0, Tclass._module.List(Tclass._module.G()))
               && $IsAlloc(zs#0_0_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume {:id "id217"} let#0_0_0#0#0 == _mcc#3#0_0_0;
            assume true;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(let#0_0_0#0#0, Tclass._module.List(Tclass._module.G()));
            assume {:id "id218"} zs#0_0_0 == let#0_0_0#0#0;
            havoc b#0_0_0;
            assume $IsBox(b#0_0_0, Tclass._module.G())
               && $IsAllocBox(b#0_0_0, Tclass._module.G(), $Heap);
            assume {:id "id219"} let#0_0_1#0#0 == _mcc#2#0_0_0;
            assume true;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $IsBox(let#0_0_1#0#0, Tclass._module.G());
            assume {:id "id220"} b#0_0_0 == let#0_0_1#0#0;
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(201,26)
            // TrCallStmt: Before ProcessCallStmt
            assume true;
            // ProcessCallStmt: CheckSubrange
            a##0_0_0 := b#0_0_0;
            assume true;
            // ProcessCallStmt: CheckSubrange
            xs##0_0_0 := #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()));
            assume true;
            // ProcessCallStmt: CheckSubrange
            ys##0_0_0 := zs#0_0_0;
            assert {:id "id221"} DtRank(ys##0_0_0) < DtRank(xs#0);
            call {:id "id222"} Call$$_module.__default.perm__descending(a##0_0_0, xs##0_0_0, ys##0_0_0);
            // TrCallStmt: After ProcessCallStmt
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(202,25)
            // TrCallStmt: Before ProcessCallStmt
            assume true;
            // ProcessCallStmt: CheckSubrange
            a##0_0_1 := b#0_0_0;
            assume true;
            // ProcessCallStmt: CheckSubrange
            xs##0_0_1 := #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()));
            assume true;
            // ProcessCallStmt: CheckSubrange
            ys##0_0_1 := zs#0_0_0;
            assert {:id "id223"} DtRank(ys##0_0_1) < DtRank(xs#0);
            call {:id "id224"} Call$$_module.__default.perm__ascending(a##0_0_1, xs##0_0_1, ys##0_0_1);
            // TrCallStmt: After ProcessCallStmt
        }
        else
        {
            assume false;
        }
    }
    else
    {
        assume false;
    }
}



procedure {:verboseName "perm_descending (well-formedness)"} CheckWellFormed$$_module.__default.perm__descending(a#0: Box
       where $IsBox(a#0, Tclass._module.G()) && $IsAllocBox(a#0, Tclass._module.G(), $Heap), 
    xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(xs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(xs#0), 
    ys#0: DatatypeType
       where $Is(ys#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(ys#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(ys#0));
  free requires 3 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "perm_descending (call)"} Call$$_module.__default.perm__descending(a#0: Box
       where $IsBox(a#0, Tclass._module.G()) && $IsAllocBox(a#0, Tclass._module.G(), $Heap), 
    xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(xs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(xs#0), 
    ys#0: DatatypeType
       where $Is(ys#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(ys#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(ys#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.descending#canCall(a#0, xs#0, ys#0)
     && _module.__default.MultisetUnion#canCall(Tclass._module.G(), _module.__default.descending($LS($LZ), a#0, xs#0, ys#0))
     && 
    _module.__default.multiset__of#canCall(Tclass._module.G(), xs#0)
     && _module.__default.multiset__of#canCall(Tclass._module.G(), ys#0);
  ensures {:id "id226"} MultiSet#Equal(_module.__default.MultisetUnion(Tclass._module.G(), 
      $LS($LS($LZ)), 
      _module.__default.descending($LS($LS($LZ)), a#0, xs#0, ys#0)), 
    MultiSet#Union(MultiSet#Union(MultiSet#UnionOne(MultiSet#Empty(): MultiSet, a#0), 
        _module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), xs#0)), 
      _module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#0)));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "perm_descending (correctness)"} Impl$$_module.__default.perm__descending(a#0: Box
       where $IsBox(a#0, Tclass._module.G()) && $IsAllocBox(a#0, Tclass._module.G(), $Heap), 
    xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(xs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(xs#0), 
    ys#0: DatatypeType
       where $Is(ys#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(ys#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(ys#0))
   returns ($_reverifyPost: bool);
  free requires 3 == $FunctionContextHeight;
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.descending#canCall(a#0, xs#0, ys#0)
     && _module.__default.MultisetUnion#canCall(Tclass._module.G(), _module.__default.descending($LS($LZ), a#0, xs#0, ys#0))
     && 
    _module.__default.multiset__of#canCall(Tclass._module.G(), xs#0)
     && _module.__default.multiset__of#canCall(Tclass._module.G(), ys#0);
  ensures {:id "id227"} MultiSet#Equal(_module.__default.MultisetUnion(Tclass._module.G(), 
      $LS($LS($LZ)), 
      _module.__default.descending($LS($LS($LZ)), a#0, xs#0, ys#0)), 
    MultiSet#Union(MultiSet#Union(MultiSet#UnionOne(MultiSet#Empty(): MultiSet, a#0), 
        _module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), xs#0)), 
      _module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#0)));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "perm_descending (correctness)"} Impl$$_module.__default.perm__descending(a#0: Box, xs#0: DatatypeType, ys#0: DatatypeType) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $initHeapForallStmt#0: Heap;
  var ##a#1: Box;
  var ##b#0: Box;
  var ##xs#0_0_0_0: DatatypeType;
  var ##xs#0_0_0_1: DatatypeType;
  var ##xs#0_0_0_2: DatatypeType;
  var ##xs#0_0_0_3: DatatypeType;
  var ##xs#0_0_1_0: DatatypeType;
  var ##a#0_0_1_0: Box;
  var ##xs#0_0_1_1: DatatypeType;
  var ##ys#0_0_1_0: DatatypeType;
  var a##0_0_1_0: Box;
  var xs##0_0_1_0: DatatypeType;
  var ys##0_0_1_0: DatatypeType;
  var ##xs#0_0_1_2: DatatypeType;
  var ##xs#0_0_1_3: DatatypeType;
  var ##xs#0_0_2_0: DatatypeType;
  var ##a#0_0_2_0: Box;
  var ##xs#0_0_2_1: DatatypeType;
  var ##ys#0_0_2_0: DatatypeType;
  var ##xs#0_0_2_2: DatatypeType;
  var ##a#0_0_2_1: Box;
  var ##xs#0_0_2_3: DatatypeType;
  var ##ys#0_0_2_1: DatatypeType;
  var ##xs#0_0_0: DatatypeType;
  var ##a#0_0_0: Box;
  var ##xs#0_0_1: DatatypeType;
  var ##ys#0_0_0: DatatypeType;
  var ##xs#1_0_0_0: DatatypeType;
  var ##xs#1_0_0_1: DatatypeType;
  var ##xs#1_0_0_2: DatatypeType;
  var ##xs#1_0_0_3: DatatypeType;
  var ##xs#1_0_1_0: DatatypeType;
  var ##xs#1_0_1_1: DatatypeType;
  var ##xs#1_0_1_2: DatatypeType;
  var xs##1_0_1_0: DatatypeType;
  var ##xs#1_0_1_3: DatatypeType;
  var ##xs#1_0_1_4: DatatypeType;
  var ##xs#1_0_2_0: DatatypeType;
  var ##xs#1_0_2_1: DatatypeType;
  var ##xs#1_0_2_2: DatatypeType;
  var ##xs#1_0_2_3: DatatypeType;
  var ##xs#1_0_2_4: DatatypeType;
  var ##xs#1_0_3_0: DatatypeType;
  var ##a#1_0_3_0: Box;
  var ##xs#1_0_3_1: DatatypeType;
  var ##ys#1_0_3_0: DatatypeType;
  var ##xs#1_0_3_2: DatatypeType;
  var ##xs#1_0_3_3: DatatypeType;
  var ##xs#1_0_0: DatatypeType;
  var ##a#1_0_0: Box;
  var ##xs#1_0_1: DatatypeType;
  var ##ys#1_0_0: DatatypeType;

    // AddMethodImpl: perm_descending, Impl$$_module.__default.perm__descending
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume $IsA#_module.List(xs#0);
    assume $IsA#_module.List(ys#0);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#xs0#0: DatatypeType, $ih#ys0#0: DatatypeType :: 
      { _module.__default.multiset__of(Tclass._module.G(), $LS($LZ), $ih#ys0#0), _module.__default.multiset__of(Tclass._module.G(), $LS($LZ), $ih#xs0#0) } 
        { _module.__default.descending($LS($LZ), a#0, $ih#xs0#0, $ih#ys0#0) } 
      $Is($ih#xs0#0, Tclass._module.List(Tclass._module.G()))
           && $Is($ih#ys0#0, Tclass._module.List(Tclass._module.G()))
           && Lit(true)
           && DtRank($ih#ys0#0) < DtRank(ys#0)
         ==> MultiSet#Equal(_module.__default.MultisetUnion(Tclass._module.G(), 
            $LS($LZ), 
            _module.__default.descending($LS($LZ), a#0, $ih#xs0#0, $ih#ys0#0)), 
          MultiSet#Union(MultiSet#Union(MultiSet#UnionOne(MultiSet#Empty(): MultiSet, a#0), 
              _module.__default.multiset__of(Tclass._module.G(), $LS($LZ), $ih#xs0#0)), 
            _module.__default.multiset__of(Tclass._module.G(), $LS($LZ), $ih#ys0#0))));
    $_reverifyPost := false;
    // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(211,3)
    if (_module.List.Cons_q(ys#0))
    {
        ##a#1 := a#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##a#1, Tclass._module.G(), $Heap);
        assert {:id "id228"} _module.List.Cons_q(ys#0);
        ##b#0 := _module.List.head(ys#0);
        // assume allocatedness for argument to function
        assume $IsAllocBox(##b#0, Tclass._module.G(), $Heap);
        assume _module.__default.Below#canCall(a#0, _module.List.head(ys#0));
    }

    assume _module.List.Cons_q(ys#0)
       ==> _module.__default.Below#canCall(a#0, _module.List.head(ys#0));
    if (_module.List.Cons_q(ys#0)
       && !_module.__default.Below(a#0, _module.List.head(ys#0)))
    {
        // ----- calc statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(212,5)
        // Assume Fuel Constant
        if (*)
        {
            // ----- assert wf[initial] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(212,5)
            ##a#0_0_0 := a#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##a#0_0_0, Tclass._module.G(), $Heap);
            ##xs#0_0_1 := xs#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_1, Tclass._module.List(Tclass._module.G()), $Heap);
            ##ys#0_0_0 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.descending#canCall(a#0, xs#0, ys#0);
            ##xs#0_0_0 := _module.__default.descending($LS($LZ), a#0, xs#0, ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.MultisetUnion#canCall(Tclass._module.G(), _module.__default.descending($LS($LZ), a#0, xs#0, ys#0));
            assume _module.__default.descending#canCall(a#0, xs#0, ys#0)
               && _module.__default.MultisetUnion#canCall(Tclass._module.G(), _module.__default.descending($LS($LZ), a#0, xs#0, ys#0));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(212,5)
            ##a#0_0_2_0 := a#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##a#0_0_2_0, Tclass._module.G(), $Heap);
            ##xs#0_0_2_1 := xs#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_2_1, Tclass._module.List(Tclass._module.G()), $Heap);
            ##ys#0_0_2_0 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_2_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.descending#canCall(a#0, xs#0, ys#0);
            ##xs#0_0_2_0 := _module.__default.descending($LS($LZ), a#0, xs#0, ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_2_0, 
              Tclass._module.List(Tclass._module.List(Tclass._module.G())), 
              $Heap);
            assume _module.__default.MultisetUnion#canCall(Tclass._module.G(), _module.__default.descending($LS($LZ), a#0, xs#0, ys#0));
            assume _module.__default.descending#canCall(a#0, xs#0, ys#0)
               && _module.__default.MultisetUnion#canCall(Tclass._module.G(), _module.__default.descending($LS($LZ), a#0, xs#0, ys#0));
            // ----- Hint0 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(212,5)
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(212,5)
            assert {:id "id243"} _module.List.Cons_q(ys#0);
            ##a#0_0_2_1 := _module.List.head(ys#0);
            // assume allocatedness for argument to function
            assume $IsAllocBox(##a#0_0_2_1, Tclass._module.G(), $Heap);
            ##xs#0_0_2_3 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_2_3, Tclass._module.List(Tclass._module.G()), $Heap);
            assert {:id "id244"} _module.List.Cons_q(ys#0);
            ##ys#0_0_2_1 := _module.List.tail(ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_2_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.descending#canCall(_module.List.head(ys#0), #_module.List.Cons(a#0, xs#0), _module.List.tail(ys#0));
            ##xs#0_0_2_2 := _module.__default.descending($LS($LZ), 
              _module.List.head(ys#0), 
              #_module.List.Cons(a#0, xs#0), 
              _module.List.tail(ys#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_2_2, 
              Tclass._module.List(Tclass._module.List(Tclass._module.G())), 
              $Heap);
            assume _module.__default.MultisetUnion#canCall(Tclass._module.G(), 
              _module.__default.descending($LS($LZ), 
                _module.List.head(ys#0), 
                #_module.List.Cons(a#0, xs#0), 
                _module.List.tail(ys#0)));
            assume _module.__default.descending#canCall(_module.List.head(ys#0), #_module.List.Cons(a#0, xs#0), _module.List.tail(ys#0))
               && _module.__default.MultisetUnion#canCall(Tclass._module.G(), 
                _module.__default.descending($LS($LZ), 
                  _module.List.head(ys#0), 
                  #_module.List.Cons(a#0, xs#0), 
                  _module.List.tail(ys#0)));
            // ----- assert line0 == line1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(212,5)
            assert {:id "id245"} {:subsumption 0} MultiSet#Equal(_module.__default.MultisetUnion(Tclass._module.G(), 
                $LS($LS($LZ)), 
                _module.__default.descending($LS($LS($LZ)), a#0, xs#0, ys#0)), 
              _module.__default.MultisetUnion(Tclass._module.G(), 
                $LS($LS($LZ)), 
                _module.__default.descending($LS($LS($LZ)), 
                  _module.List.head(ys#0), 
                  #_module.List.Cons(a#0, xs#0), 
                  _module.List.tail(ys#0))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(212,5)
            assume {:id "id234"} _module.List.Cons_q(ys#0);
            ##a#0_0_1_0 := _module.List.head(ys#0);
            // assume allocatedness for argument to function
            assume $IsAllocBox(##a#0_0_1_0, Tclass._module.G(), $Heap);
            ##xs#0_0_1_1 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_1_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume {:id "id235"} _module.List.Cons_q(ys#0);
            ##ys#0_0_1_0 := _module.List.tail(ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_1_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.descending#canCall(_module.List.head(ys#0), #_module.List.Cons(a#0, xs#0), _module.List.tail(ys#0));
            ##xs#0_0_1_0 := _module.__default.descending($LS($LZ), 
              _module.List.head(ys#0), 
              #_module.List.Cons(a#0, xs#0), 
              _module.List.tail(ys#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_1_0, 
              Tclass._module.List(Tclass._module.List(Tclass._module.G())), 
              $Heap);
            assume _module.__default.MultisetUnion#canCall(Tclass._module.G(), 
              _module.__default.descending($LS($LZ), 
                _module.List.head(ys#0), 
                #_module.List.Cons(a#0, xs#0), 
                _module.List.tail(ys#0)));
            assume _module.__default.descending#canCall(_module.List.head(ys#0), #_module.List.Cons(a#0, xs#0), _module.List.tail(ys#0))
               && _module.__default.MultisetUnion#canCall(Tclass._module.G(), 
                _module.__default.descending($LS($LZ), 
                  _module.List.head(ys#0), 
                  #_module.List.Cons(a#0, xs#0), 
                  _module.List.tail(ys#0)));
            // ----- Hint1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(212,5)
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(215,24)
            // TrCallStmt: Before ProcessCallStmt
            assert {:id "id236"} _module.List.Cons_q(ys#0);
            assume true;
            // ProcessCallStmt: CheckSubrange
            a##0_0_1_0 := _module.List.head(ys#0);
            assume true;
            // ProcessCallStmt: CheckSubrange
            xs##0_0_1_0 := #_module.List.Cons(a#0, xs#0);
            assert {:id "id237"} _module.List.Cons_q(ys#0);
            assume true;
            // ProcessCallStmt: CheckSubrange
            ys##0_0_1_0 := _module.List.tail(ys#0);
            assert {:id "id238"} DtRank(ys##0_0_1_0) < DtRank(ys#0);
            call {:id "id239"} Call$$_module.__default.perm__descending(a##0_0_1_0, xs##0_0_1_0, ys##0_0_1_0);
            // TrCallStmt: After ProcessCallStmt
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(212,5)
            assert {:id "id240"} _module.List.Cons_q(ys#0);
            ##xs#0_0_1_2 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_1_2, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0));
            assert {:id "id241"} _module.List.Cons_q(ys#0);
            ##xs#0_0_1_3 := _module.List.tail(ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_1_3, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), _module.List.tail(ys#0));
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0))
               && _module.__default.multiset__of#canCall(Tclass._module.G(), _module.List.tail(ys#0));
            // ----- assert line1 == line2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(212,5)
            assert {:id "id242"} {:subsumption 0} MultiSet#Equal(_module.__default.MultisetUnion(Tclass._module.G(), 
                $LS($LS($LZ)), 
                _module.__default.descending($LS($LS($LZ)), 
                  _module.List.head(ys#0), 
                  #_module.List.Cons(a#0, xs#0), 
                  _module.List.tail(ys#0))), 
              MultiSet#Union(MultiSet#Union(MultiSet#UnionOne(MultiSet#Empty(): MultiSet, _module.List.head(ys#0)), 
                  _module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), #_module.List.Cons(a#0, xs#0))), 
                _module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), _module.List.tail(ys#0))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(212,5)
            assume {:id "id229"} _module.List.Cons_q(ys#0);
            ##xs#0_0_0_0 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_0_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0));
            assume {:id "id230"} _module.List.Cons_q(ys#0);
            ##xs#0_0_0_1 := _module.List.tail(ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_0_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), _module.List.tail(ys#0));
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0))
               && _module.__default.multiset__of#canCall(Tclass._module.G(), _module.List.tail(ys#0));
            // ----- Hint2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(212,5)
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(212,5)
            ##xs#0_0_0_2 := xs#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_0_2, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), xs#0);
            assert {:id "id231"} _module.List.Cons_q(ys#0);
            assert {:id "id232"} _module.List.Cons_q(ys#0);
            ##xs#0_0_0_3 := #_module.List.Cons(_module.List.head(ys#0), _module.List.tail(ys#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_0_3, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), 
              #_module.List.Cons(_module.List.head(ys#0), _module.List.tail(ys#0)));
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), xs#0)
               && _module.__default.multiset__of#canCall(Tclass._module.G(), 
                #_module.List.Cons(_module.List.head(ys#0), _module.List.tail(ys#0)));
            // ----- assert line2 == line3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(212,5)
            assert {:id "id233"} {:subsumption 0} MultiSet#Equal(MultiSet#Union(MultiSet#Union(MultiSet#UnionOne(MultiSet#Empty(): MultiSet, _module.List.head(ys#0)), 
                  _module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), #_module.List.Cons(a#0, xs#0))), 
                _module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), _module.List.tail(ys#0))), 
              MultiSet#Union(MultiSet#Union(MultiSet#UnionOne(MultiSet#Empty(): MultiSet, a#0), 
                  _module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), xs#0)), 
                _module.__default.multiset__of(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  #_module.List.Cons(_module.List.head(ys#0), _module.List.tail(ys#0)))));
            assume false;
        }

        assume {:id "id246"} MultiSet#Equal(_module.__default.MultisetUnion(Tclass._module.G(), 
            $LS($LZ), 
            _module.__default.descending($LS($LZ), a#0, xs#0, ys#0)), 
          MultiSet#Union(MultiSet#Union(MultiSet#UnionOne(MultiSet#Empty(): MultiSet, a#0), 
              _module.__default.multiset__of(Tclass._module.G(), $LS($LZ), xs#0)), 
            _module.__default.multiset__of(Tclass._module.G(), 
              $LS($LZ), 
              #_module.List.Cons(_module.List.head(ys#0), _module.List.tail(ys#0)))));
    }
    else
    {
        // ----- calc statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(220,5)
        // Assume Fuel Constant
        if (*)
        {
            // ----- assert wf[initial] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(220,5)
            ##a#1_0_0 := a#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##a#1_0_0, Tclass._module.G(), $Heap);
            ##xs#1_0_1 := xs#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_1, Tclass._module.List(Tclass._module.G()), $Heap);
            ##ys#1_0_0 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#1_0_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.descending#canCall(a#0, xs#0, ys#0);
            ##xs#1_0_0 := _module.__default.descending($LS($LZ), a#0, xs#0, ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.MultisetUnion#canCall(Tclass._module.G(), _module.__default.descending($LS($LZ), a#0, xs#0, ys#0));
            assume _module.__default.descending#canCall(a#0, xs#0, ys#0)
               && _module.__default.MultisetUnion#canCall(Tclass._module.G(), _module.__default.descending($LS($LZ), a#0, xs#0, ys#0));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(220,5)
            ##a#1_0_3_0 := a#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##a#1_0_3_0, Tclass._module.G(), $Heap);
            ##xs#1_0_3_1 := xs#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_3_1, Tclass._module.List(Tclass._module.G()), $Heap);
            ##ys#1_0_3_0 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#1_0_3_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.descending#canCall(a#0, xs#0, ys#0);
            ##xs#1_0_3_0 := _module.__default.descending($LS($LZ), a#0, xs#0, ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_3_0, 
              Tclass._module.List(Tclass._module.List(Tclass._module.G())), 
              $Heap);
            assume _module.__default.MultisetUnion#canCall(Tclass._module.G(), _module.__default.descending($LS($LZ), a#0, xs#0, ys#0));
            assume _module.__default.descending#canCall(a#0, xs#0, ys#0)
               && _module.__default.MultisetUnion#canCall(Tclass._module.G(), _module.__default.descending($LS($LZ), a#0, xs#0, ys#0));
            // ----- Hint0 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(220,5)
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(220,5)
            ##xs#1_0_3_3 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_3_3, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.sequences#canCall(ys#0);
            ##xs#1_0_3_2 := #_module.List.Cons($Box(#_module.List.Cons(a#0, xs#0)), _module.__default.sequences($LS($LZ), ys#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_3_2, 
              Tclass._module.List(Tclass._module.List(Tclass._module.G())), 
              $Heap);
            assume _module.__default.MultisetUnion#canCall(Tclass._module.G(), 
              #_module.List.Cons($Box(#_module.List.Cons(a#0, xs#0)), _module.__default.sequences($LS($LZ), ys#0)));
            assume _module.__default.sequences#canCall(ys#0)
               && _module.__default.MultisetUnion#canCall(Tclass._module.G(), 
                #_module.List.Cons($Box(#_module.List.Cons(a#0, xs#0)), _module.__default.sequences($LS($LZ), ys#0)));
            // ----- assert line0 == line1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(220,5)
            assert {:id "id252"} {:subsumption 0} MultiSet#Equal(_module.__default.MultisetUnion(Tclass._module.G(), 
                $LS($LS($LZ)), 
                _module.__default.descending($LS($LS($LZ)), a#0, xs#0, ys#0)), 
              _module.__default.MultisetUnion(Tclass._module.G(), 
                $LS($LS($LZ)), 
                #_module.List.Cons($Box(#_module.List.Cons(a#0, xs#0)), 
                  _module.__default.sequences($LS($LS($LZ)), ys#0))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(220,5)
            ##xs#1_0_2_1 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_2_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.sequences#canCall(ys#0);
            ##xs#1_0_2_0 := #_module.List.Cons($Box(#_module.List.Cons(a#0, xs#0)), _module.__default.sequences($LS($LZ), ys#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_2_0, 
              Tclass._module.List(Tclass._module.List(Tclass._module.G())), 
              $Heap);
            assume _module.__default.MultisetUnion#canCall(Tclass._module.G(), 
              #_module.List.Cons($Box(#_module.List.Cons(a#0, xs#0)), _module.__default.sequences($LS($LZ), ys#0)));
            assume _module.__default.sequences#canCall(ys#0)
               && _module.__default.MultisetUnion#canCall(Tclass._module.G(), 
                #_module.List.Cons($Box(#_module.List.Cons(a#0, xs#0)), _module.__default.sequences($LS($LZ), ys#0)));
            // ----- Hint1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(220,5)
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(220,5)
            ##xs#1_0_2_2 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_2_2, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0));
            ##xs#1_0_2_4 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_2_4, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.sequences#canCall(ys#0);
            ##xs#1_0_2_3 := _module.__default.sequences($LS($LZ), ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_2_3, 
              Tclass._module.List(Tclass._module.List(Tclass._module.G())), 
              $Heap);
            assume _module.__default.MultisetUnion#canCall(Tclass._module.G(), _module.__default.sequences($LS($LZ), ys#0));
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0))
               && 
              _module.__default.sequences#canCall(ys#0)
               && _module.__default.MultisetUnion#canCall(Tclass._module.G(), _module.__default.sequences($LS($LZ), ys#0));
            // ----- assert line1 == line2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(220,5)
            assert {:id "id251"} {:subsumption 0} MultiSet#Equal(_module.__default.MultisetUnion(Tclass._module.G(), 
                $LS($LS($LZ)), 
                #_module.List.Cons($Box(#_module.List.Cons(a#0, xs#0)), 
                  _module.__default.sequences($LS($LS($LZ)), ys#0))), 
              MultiSet#Union(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), #_module.List.Cons(a#0, xs#0)), 
                _module.__default.MultisetUnion(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  _module.__default.sequences($LS($LS($LZ)), ys#0))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(220,5)
            ##xs#1_0_1_0 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_1_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0));
            ##xs#1_0_1_2 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_1_2, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.sequences#canCall(ys#0);
            ##xs#1_0_1_1 := _module.__default.sequences($LS($LZ), ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_1_1, 
              Tclass._module.List(Tclass._module.List(Tclass._module.G())), 
              $Heap);
            assume _module.__default.MultisetUnion#canCall(Tclass._module.G(), _module.__default.sequences($LS($LZ), ys#0));
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0))
               && 
              _module.__default.sequences#canCall(ys#0)
               && _module.__default.MultisetUnion#canCall(Tclass._module.G(), _module.__default.sequences($LS($LZ), ys#0));
            // ----- Hint2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(220,5)
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(224,23)
            // TrCallStmt: Before ProcessCallStmt
            assume true;
            // ProcessCallStmt: CheckSubrange
            xs##1_0_1_0 := ys#0;
            assert {:id "id248"} DtRank(xs##1_0_1_0) <= DtRank(ys#0);
            call {:id "id249"} Call$$_module.__default.perm__sequences(xs##1_0_1_0);
            // TrCallStmt: After ProcessCallStmt
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(220,5)
            ##xs#1_0_1_3 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_1_3, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0));
            ##xs#1_0_1_4 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_1_4, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), ys#0);
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0))
               && _module.__default.multiset__of#canCall(Tclass._module.G(), ys#0);
            // ----- assert line2 == line3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(220,5)
            assert {:id "id250"} {:subsumption 0} MultiSet#Equal(MultiSet#Union(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), #_module.List.Cons(a#0, xs#0)), 
                _module.__default.MultisetUnion(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  _module.__default.sequences($LS($LS($LZ)), ys#0))), 
              MultiSet#Union(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), #_module.List.Cons(a#0, xs#0)), 
                _module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#0)));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(220,5)
            ##xs#1_0_0_0 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_0_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0));
            ##xs#1_0_0_1 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_0_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), ys#0);
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0))
               && _module.__default.multiset__of#canCall(Tclass._module.G(), ys#0);
            // ----- Hint3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(220,5)
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(220,5)
            ##xs#1_0_0_2 := xs#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_0_2, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), xs#0);
            ##xs#1_0_0_3 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_0_3, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), ys#0);
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), xs#0)
               && _module.__default.multiset__of#canCall(Tclass._module.G(), ys#0);
            // ----- assert line3 == line4 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(220,5)
            assert {:id "id247"} {:subsumption 0} MultiSet#Equal(MultiSet#Union(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), #_module.List.Cons(a#0, xs#0)), 
                _module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#0)), 
              MultiSet#Union(MultiSet#Union(MultiSet#UnionOne(MultiSet#Empty(): MultiSet, a#0), 
                  _module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), xs#0)), 
                _module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#0)));
            assume false;
        }

        assume {:id "id253"} MultiSet#Equal(_module.__default.MultisetUnion(Tclass._module.G(), 
            $LS($LZ), 
            _module.__default.descending($LS($LZ), a#0, xs#0, ys#0)), 
          MultiSet#Union(MultiSet#Union(MultiSet#UnionOne(MultiSet#Empty(): MultiSet, a#0), 
              _module.__default.multiset__of(Tclass._module.G(), $LS($LZ), xs#0)), 
            _module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#0)));
    }
}



procedure {:verboseName "perm_ascending (well-formedness)"} CheckWellFormed$$_module.__default.perm__ascending(a#0: Box
       where $IsBox(a#0, Tclass._module.G()) && $IsAllocBox(a#0, Tclass._module.G(), $Heap), 
    xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(xs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(xs#0), 
    ys#0: DatatypeType
       where $Is(ys#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(ys#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(ys#0));
  free requires 3 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "perm_ascending (call)"} Call$$_module.__default.perm__ascending(a#0: Box
       where $IsBox(a#0, Tclass._module.G()) && $IsAllocBox(a#0, Tclass._module.G(), $Heap), 
    xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(xs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(xs#0), 
    ys#0: DatatypeType
       where $Is(ys#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(ys#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(ys#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.ascending#canCall(a#0, xs#0, ys#0)
     && _module.__default.MultisetUnion#canCall(Tclass._module.G(), _module.__default.ascending($LS($LZ), a#0, xs#0, ys#0))
     && 
    _module.__default.multiset__of#canCall(Tclass._module.G(), xs#0)
     && _module.__default.multiset__of#canCall(Tclass._module.G(), ys#0);
  ensures {:id "id255"} MultiSet#Equal(_module.__default.MultisetUnion(Tclass._module.G(), 
      $LS($LS($LZ)), 
      _module.__default.ascending($LS($LS($LZ)), a#0, xs#0, ys#0)), 
    MultiSet#Union(MultiSet#Union(MultiSet#UnionOne(MultiSet#Empty(): MultiSet, a#0), 
        _module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), xs#0)), 
      _module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#0)));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "perm_ascending (correctness)"} Impl$$_module.__default.perm__ascending(a#0: Box
       where $IsBox(a#0, Tclass._module.G()) && $IsAllocBox(a#0, Tclass._module.G(), $Heap), 
    xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(xs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(xs#0), 
    ys#0: DatatypeType
       where $Is(ys#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(ys#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(ys#0))
   returns ($_reverifyPost: bool);
  free requires 3 == $FunctionContextHeight;
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.ascending#canCall(a#0, xs#0, ys#0)
     && _module.__default.MultisetUnion#canCall(Tclass._module.G(), _module.__default.ascending($LS($LZ), a#0, xs#0, ys#0))
     && 
    _module.__default.multiset__of#canCall(Tclass._module.G(), xs#0)
     && _module.__default.multiset__of#canCall(Tclass._module.G(), ys#0);
  ensures {:id "id256"} MultiSet#Equal(_module.__default.MultisetUnion(Tclass._module.G(), 
      $LS($LS($LZ)), 
      _module.__default.ascending($LS($LS($LZ)), a#0, xs#0, ys#0)), 
    MultiSet#Union(MultiSet#Union(MultiSet#UnionOne(MultiSet#Empty(): MultiSet, a#0), 
        _module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), xs#0)), 
      _module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#0)));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "perm_ascending (correctness)"} Impl$$_module.__default.perm__ascending(a#0: Box, xs#0: DatatypeType, ys#0: DatatypeType) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $initHeapForallStmt#0: Heap;
  var ##a#1: Box;
  var ##b#0: Box;
  var ##xs#0_0_0_0: DatatypeType;
  var ##xs#0_0_0_1: DatatypeType;
  var ##xs#0_0_0_2: DatatypeType;
  var ##xs#0_0_0_3: DatatypeType;
  var ##xs#0_0_1_0: DatatypeType;
  var ##a#0_0_1_0: Box;
  var ##xs#0_0_1_1: DatatypeType;
  var ##ys#0_0_1_0: DatatypeType;
  var a##0_0_1_0: Box;
  var xs##0_0_1_0: DatatypeType;
  var ys##0_0_1_0: DatatypeType;
  var ##xs#0_0_1_2: DatatypeType;
  var ##xs#0_0_1_3: DatatypeType;
  var ##xs#0_0_2_0: DatatypeType;
  var ##a#0_0_2_0: Box;
  var ##xs#0_0_2_1: DatatypeType;
  var ##ys#0_0_2_0: DatatypeType;
  var ##xs#0_0_2_2: DatatypeType;
  var ##a#0_0_2_1: Box;
  var ##xs#0_0_2_3: DatatypeType;
  var ##ys#0_0_2_1: DatatypeType;
  var ##xs#0_0_0: DatatypeType;
  var ##a#0_0_0: Box;
  var ##xs#0_0_1: DatatypeType;
  var ##ys#0_0_0: DatatypeType;
  var ##xs#1_0_0_0: DatatypeType;
  var ##xs#1_0_0_1: DatatypeType;
  var ##xs#1_0_0_2: DatatypeType;
  var ##xs#1_0_0_3: DatatypeType;
  var ##xs#1_0_0_4: DatatypeType;
  var ##xs#1_0_1_0: DatatypeType;
  var ##xs#1_0_1_1: DatatypeType;
  var ##acc#1_0_1_0: DatatypeType;
  var ##xs#1_0_1_2: DatatypeType;
  var xs##1_0_1_0: DatatypeType;
  var acc##1_0_1_0: DatatypeType;
  var ##xs#1_0_1_3: DatatypeType;
  var ##xs#1_0_1_4: DatatypeType;
  var ##xs#1_0_1_5: DatatypeType;
  var ##xs#1_0_2_0: DatatypeType;
  var ##xs#1_0_2_1: DatatypeType;
  var ##acc#1_0_2_0: DatatypeType;
  var ##xs#1_0_2_2: DatatypeType;
  var ##xs#1_0_2_3: DatatypeType;
  var xs##1_0_2_0: DatatypeType;
  var ##xs#1_0_2_4: DatatypeType;
  var ##xs#1_0_2_5: DatatypeType;
  var ##acc#1_0_2_1: DatatypeType;
  var ##xs#1_0_2_6: DatatypeType;
  var ##xs#1_0_3_0: DatatypeType;
  var ##xs#1_0_3_1: DatatypeType;
  var ##acc#1_0_3_0: DatatypeType;
  var ##xs#1_0_3_2: DatatypeType;
  var ##xs#1_0_3_3: DatatypeType;
  var ##xs#1_0_3_4: DatatypeType;
  var ##acc#1_0_3_1: DatatypeType;
  var ##xs#1_0_3_5: DatatypeType;
  var ##xs#1_0_3_6: DatatypeType;
  var ##xs#1_0_4_0: DatatypeType;
  var ##a#1_0_4_0: Box;
  var ##xs#1_0_4_1: DatatypeType;
  var ##ys#1_0_4_0: DatatypeType;
  var ##xs#1_0_4_2: DatatypeType;
  var ##xs#1_0_4_3: DatatypeType;
  var ##acc#1_0_4_0: DatatypeType;
  var ##xs#1_0_4_4: DatatypeType;
  var ##xs#1_0_0: DatatypeType;
  var ##a#1_0_0: Box;
  var ##xs#1_0_1: DatatypeType;
  var ##ys#1_0_0: DatatypeType;

    // AddMethodImpl: perm_ascending, Impl$$_module.__default.perm__ascending
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume $IsA#_module.List(xs#0);
    assume $IsA#_module.List(ys#0);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#xs0#0: DatatypeType, $ih#ys0#0: DatatypeType :: 
      { _module.__default.multiset__of(Tclass._module.G(), $LS($LZ), $ih#ys0#0), _module.__default.multiset__of(Tclass._module.G(), $LS($LZ), $ih#xs0#0) } 
        { _module.__default.ascending($LS($LZ), a#0, $ih#xs0#0, $ih#ys0#0) } 
      $Is($ih#xs0#0, Tclass._module.List(Tclass._module.G()))
           && $Is($ih#ys0#0, Tclass._module.List(Tclass._module.G()))
           && Lit(true)
           && DtRank($ih#ys0#0) < DtRank(ys#0)
         ==> MultiSet#Equal(_module.__default.MultisetUnion(Tclass._module.G(), 
            $LS($LZ), 
            _module.__default.ascending($LS($LZ), a#0, $ih#xs0#0, $ih#ys0#0)), 
          MultiSet#Union(MultiSet#Union(MultiSet#UnionOne(MultiSet#Empty(): MultiSet, a#0), 
              _module.__default.multiset__of(Tclass._module.G(), $LS($LZ), $ih#xs0#0)), 
            _module.__default.multiset__of(Tclass._module.G(), $LS($LZ), $ih#ys0#0))));
    $_reverifyPost := false;
    // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(235,3)
    if (_module.List.Cons_q(ys#0))
    {
        ##a#1 := a#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##a#1, Tclass._module.G(), $Heap);
        assert {:id "id257"} _module.List.Cons_q(ys#0);
        ##b#0 := _module.List.head(ys#0);
        // assume allocatedness for argument to function
        assume $IsAllocBox(##b#0, Tclass._module.G(), $Heap);
        assume _module.__default.Below#canCall(a#0, _module.List.head(ys#0));
    }

    assume _module.List.Cons_q(ys#0)
       ==> _module.__default.Below#canCall(a#0, _module.List.head(ys#0));
    if (_module.List.Cons_q(ys#0)
       && _module.__default.Below(a#0, _module.List.head(ys#0)))
    {
        // ----- calc statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(236,5)
        // Assume Fuel Constant
        if (*)
        {
            // ----- assert wf[initial] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(236,5)
            ##a#0_0_0 := a#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##a#0_0_0, Tclass._module.G(), $Heap);
            ##xs#0_0_1 := xs#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_1, Tclass._module.List(Tclass._module.G()), $Heap);
            ##ys#0_0_0 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.ascending#canCall(a#0, xs#0, ys#0);
            ##xs#0_0_0 := _module.__default.ascending($LS($LZ), a#0, xs#0, ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.MultisetUnion#canCall(Tclass._module.G(), _module.__default.ascending($LS($LZ), a#0, xs#0, ys#0));
            assume _module.__default.ascending#canCall(a#0, xs#0, ys#0)
               && _module.__default.MultisetUnion#canCall(Tclass._module.G(), _module.__default.ascending($LS($LZ), a#0, xs#0, ys#0));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(236,5)
            ##a#0_0_2_0 := a#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##a#0_0_2_0, Tclass._module.G(), $Heap);
            ##xs#0_0_2_1 := xs#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_2_1, Tclass._module.List(Tclass._module.G()), $Heap);
            ##ys#0_0_2_0 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_2_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.ascending#canCall(a#0, xs#0, ys#0);
            ##xs#0_0_2_0 := _module.__default.ascending($LS($LZ), a#0, xs#0, ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_2_0, 
              Tclass._module.List(Tclass._module.List(Tclass._module.G())), 
              $Heap);
            assume _module.__default.MultisetUnion#canCall(Tclass._module.G(), _module.__default.ascending($LS($LZ), a#0, xs#0, ys#0));
            assume _module.__default.ascending#canCall(a#0, xs#0, ys#0)
               && _module.__default.MultisetUnion#canCall(Tclass._module.G(), _module.__default.ascending($LS($LZ), a#0, xs#0, ys#0));
            // ----- Hint0 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(236,5)
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(236,5)
            assert {:id "id272"} _module.List.Cons_q(ys#0);
            ##a#0_0_2_1 := _module.List.head(ys#0);
            // assume allocatedness for argument to function
            assume $IsAllocBox(##a#0_0_2_1, Tclass._module.G(), $Heap);
            ##xs#0_0_2_3 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_2_3, Tclass._module.List(Tclass._module.G()), $Heap);
            assert {:id "id273"} _module.List.Cons_q(ys#0);
            ##ys#0_0_2_1 := _module.List.tail(ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_2_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.ascending#canCall(_module.List.head(ys#0), #_module.List.Cons(a#0, xs#0), _module.List.tail(ys#0));
            ##xs#0_0_2_2 := _module.__default.ascending($LS($LZ), 
              _module.List.head(ys#0), 
              #_module.List.Cons(a#0, xs#0), 
              _module.List.tail(ys#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_2_2, 
              Tclass._module.List(Tclass._module.List(Tclass._module.G())), 
              $Heap);
            assume _module.__default.MultisetUnion#canCall(Tclass._module.G(), 
              _module.__default.ascending($LS($LZ), 
                _module.List.head(ys#0), 
                #_module.List.Cons(a#0, xs#0), 
                _module.List.tail(ys#0)));
            assume _module.__default.ascending#canCall(_module.List.head(ys#0), #_module.List.Cons(a#0, xs#0), _module.List.tail(ys#0))
               && _module.__default.MultisetUnion#canCall(Tclass._module.G(), 
                _module.__default.ascending($LS($LZ), 
                  _module.List.head(ys#0), 
                  #_module.List.Cons(a#0, xs#0), 
                  _module.List.tail(ys#0)));
            // ----- assert line0 == line1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(236,5)
            assert {:id "id274"} {:subsumption 0} MultiSet#Equal(_module.__default.MultisetUnion(Tclass._module.G(), 
                $LS($LS($LZ)), 
                _module.__default.ascending($LS($LS($LZ)), a#0, xs#0, ys#0)), 
              _module.__default.MultisetUnion(Tclass._module.G(), 
                $LS($LS($LZ)), 
                _module.__default.ascending($LS($LS($LZ)), 
                  _module.List.head(ys#0), 
                  #_module.List.Cons(a#0, xs#0), 
                  _module.List.tail(ys#0))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(236,5)
            assume {:id "id263"} _module.List.Cons_q(ys#0);
            ##a#0_0_1_0 := _module.List.head(ys#0);
            // assume allocatedness for argument to function
            assume $IsAllocBox(##a#0_0_1_0, Tclass._module.G(), $Heap);
            ##xs#0_0_1_1 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_1_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume {:id "id264"} _module.List.Cons_q(ys#0);
            ##ys#0_0_1_0 := _module.List.tail(ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_1_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.ascending#canCall(_module.List.head(ys#0), #_module.List.Cons(a#0, xs#0), _module.List.tail(ys#0));
            ##xs#0_0_1_0 := _module.__default.ascending($LS($LZ), 
              _module.List.head(ys#0), 
              #_module.List.Cons(a#0, xs#0), 
              _module.List.tail(ys#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_1_0, 
              Tclass._module.List(Tclass._module.List(Tclass._module.G())), 
              $Heap);
            assume _module.__default.MultisetUnion#canCall(Tclass._module.G(), 
              _module.__default.ascending($LS($LZ), 
                _module.List.head(ys#0), 
                #_module.List.Cons(a#0, xs#0), 
                _module.List.tail(ys#0)));
            assume _module.__default.ascending#canCall(_module.List.head(ys#0), #_module.List.Cons(a#0, xs#0), _module.List.tail(ys#0))
               && _module.__default.MultisetUnion#canCall(Tclass._module.G(), 
                _module.__default.ascending($LS($LZ), 
                  _module.List.head(ys#0), 
                  #_module.List.Cons(a#0, xs#0), 
                  _module.List.tail(ys#0)));
            // ----- Hint1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(236,5)
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(239,23)
            // TrCallStmt: Before ProcessCallStmt
            assert {:id "id265"} _module.List.Cons_q(ys#0);
            assume true;
            // ProcessCallStmt: CheckSubrange
            a##0_0_1_0 := _module.List.head(ys#0);
            assume true;
            // ProcessCallStmt: CheckSubrange
            xs##0_0_1_0 := #_module.List.Cons(a#0, xs#0);
            assert {:id "id266"} _module.List.Cons_q(ys#0);
            assume true;
            // ProcessCallStmt: CheckSubrange
            ys##0_0_1_0 := _module.List.tail(ys#0);
            assert {:id "id267"} DtRank(ys##0_0_1_0) < DtRank(ys#0);
            call {:id "id268"} Call$$_module.__default.perm__ascending(a##0_0_1_0, xs##0_0_1_0, ys##0_0_1_0);
            // TrCallStmt: After ProcessCallStmt
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(236,5)
            assert {:id "id269"} _module.List.Cons_q(ys#0);
            ##xs#0_0_1_2 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_1_2, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0));
            assert {:id "id270"} _module.List.Cons_q(ys#0);
            ##xs#0_0_1_3 := _module.List.tail(ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_1_3, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), _module.List.tail(ys#0));
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0))
               && _module.__default.multiset__of#canCall(Tclass._module.G(), _module.List.tail(ys#0));
            // ----- assert line1 == line2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(236,5)
            assert {:id "id271"} {:subsumption 0} MultiSet#Equal(_module.__default.MultisetUnion(Tclass._module.G(), 
                $LS($LS($LZ)), 
                _module.__default.ascending($LS($LS($LZ)), 
                  _module.List.head(ys#0), 
                  #_module.List.Cons(a#0, xs#0), 
                  _module.List.tail(ys#0))), 
              MultiSet#Union(MultiSet#Union(MultiSet#UnionOne(MultiSet#Empty(): MultiSet, _module.List.head(ys#0)), 
                  _module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), #_module.List.Cons(a#0, xs#0))), 
                _module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), _module.List.tail(ys#0))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(236,5)
            assume {:id "id258"} _module.List.Cons_q(ys#0);
            ##xs#0_0_0_0 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_0_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0));
            assume {:id "id259"} _module.List.Cons_q(ys#0);
            ##xs#0_0_0_1 := _module.List.tail(ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_0_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), _module.List.tail(ys#0));
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0))
               && _module.__default.multiset__of#canCall(Tclass._module.G(), _module.List.tail(ys#0));
            // ----- Hint2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(236,5)
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(236,5)
            ##xs#0_0_0_2 := xs#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_0_2, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), xs#0);
            assert {:id "id260"} _module.List.Cons_q(ys#0);
            assert {:id "id261"} _module.List.Cons_q(ys#0);
            ##xs#0_0_0_3 := #_module.List.Cons(_module.List.head(ys#0), _module.List.tail(ys#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_0_3, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), 
              #_module.List.Cons(_module.List.head(ys#0), _module.List.tail(ys#0)));
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), xs#0)
               && _module.__default.multiset__of#canCall(Tclass._module.G(), 
                #_module.List.Cons(_module.List.head(ys#0), _module.List.tail(ys#0)));
            // ----- assert line2 == line3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(236,5)
            assert {:id "id262"} {:subsumption 0} MultiSet#Equal(MultiSet#Union(MultiSet#Union(MultiSet#UnionOne(MultiSet#Empty(): MultiSet, _module.List.head(ys#0)), 
                  _module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), #_module.List.Cons(a#0, xs#0))), 
                _module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), _module.List.tail(ys#0))), 
              MultiSet#Union(MultiSet#Union(MultiSet#UnionOne(MultiSet#Empty(): MultiSet, a#0), 
                  _module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), xs#0)), 
                _module.__default.multiset__of(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  #_module.List.Cons(_module.List.head(ys#0), _module.List.tail(ys#0)))));
            assume false;
        }

        assume {:id "id275"} MultiSet#Equal(_module.__default.MultisetUnion(Tclass._module.G(), 
            $LS($LZ), 
            _module.__default.ascending($LS($LZ), a#0, xs#0, ys#0)), 
          MultiSet#Union(MultiSet#Union(MultiSet#UnionOne(MultiSet#Empty(): MultiSet, a#0), 
              _module.__default.multiset__of(Tclass._module.G(), $LS($LZ), xs#0)), 
            _module.__default.multiset__of(Tclass._module.G(), 
              $LS($LZ), 
              #_module.List.Cons(_module.List.head(ys#0), _module.List.tail(ys#0)))));
    }
    else
    {
        // ----- calc statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(244,5)
        // Assume Fuel Constant
        if (*)
        {
            // ----- assert wf[initial] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(244,5)
            ##a#1_0_0 := a#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##a#1_0_0, Tclass._module.G(), $Heap);
            ##xs#1_0_1 := xs#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_1, Tclass._module.List(Tclass._module.G()), $Heap);
            ##ys#1_0_0 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#1_0_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.ascending#canCall(a#0, xs#0, ys#0);
            ##xs#1_0_0 := _module.__default.ascending($LS($LZ), a#0, xs#0, ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.MultisetUnion#canCall(Tclass._module.G(), _module.__default.ascending($LS($LZ), a#0, xs#0, ys#0));
            assume _module.__default.ascending#canCall(a#0, xs#0, ys#0)
               && _module.__default.MultisetUnion#canCall(Tclass._module.G(), _module.__default.ascending($LS($LZ), a#0, xs#0, ys#0));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(244,5)
            ##a#1_0_4_0 := a#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##a#1_0_4_0, Tclass._module.G(), $Heap);
            ##xs#1_0_4_1 := xs#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_4_1, Tclass._module.List(Tclass._module.G()), $Heap);
            ##ys#1_0_4_0 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#1_0_4_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.ascending#canCall(a#0, xs#0, ys#0);
            ##xs#1_0_4_0 := _module.__default.ascending($LS($LZ), a#0, xs#0, ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_4_0, 
              Tclass._module.List(Tclass._module.List(Tclass._module.G())), 
              $Heap);
            assume _module.__default.MultisetUnion#canCall(Tclass._module.G(), _module.__default.ascending($LS($LZ), a#0, xs#0, ys#0));
            assume _module.__default.ascending#canCall(a#0, xs#0, ys#0)
               && _module.__default.MultisetUnion#canCall(Tclass._module.G(), _module.__default.ascending($LS($LZ), a#0, xs#0, ys#0));
            // ----- Hint0 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(244,5)
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(244,5)
            ##xs#1_0_4_3 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_4_3, Tclass._module.List(Tclass._module.G()), $Heap);
            ##acc#1_0_4_0 := Lit(#_module.List.Nil());
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#1_0_4_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), Lit(#_module.List.Nil()));
            ##xs#1_0_4_4 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_4_4, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.sequences#canCall(ys#0);
            ##xs#1_0_4_2 := #_module.List.Cons($Box(_module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(a#0, xs#0), 
                  Lit(#_module.List.Nil()))), 
              _module.__default.sequences($LS($LZ), ys#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_4_2, 
              Tclass._module.List(Tclass._module.List(Tclass._module.G())), 
              $Heap);
            assume _module.__default.MultisetUnion#canCall(Tclass._module.G(), 
              #_module.List.Cons($Box(_module.__default.reverse(Tclass._module.G(), 
                    $LS($LZ), 
                    #_module.List.Cons(a#0, xs#0), 
                    Lit(#_module.List.Nil()))), 
                _module.__default.sequences($LS($LZ), ys#0)));
            assume _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), Lit(#_module.List.Nil()))
               && _module.__default.sequences#canCall(ys#0)
               && _module.__default.MultisetUnion#canCall(Tclass._module.G(), 
                #_module.List.Cons($Box(_module.__default.reverse(Tclass._module.G(), 
                      $LS($LZ), 
                      #_module.List.Cons(a#0, xs#0), 
                      Lit(#_module.List.Nil()))), 
                  _module.__default.sequences($LS($LZ), ys#0)));
            // ----- assert line0 == line1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(244,5)
            assert {:id "id283"} {:subsumption 0} MultiSet#Equal(_module.__default.MultisetUnion(Tclass._module.G(), 
                $LS($LS($LZ)), 
                _module.__default.ascending($LS($LS($LZ)), a#0, xs#0, ys#0)), 
              _module.__default.MultisetUnion(Tclass._module.G(), 
                $LS($LS($LZ)), 
                #_module.List.Cons($Box(_module.__default.reverse(Tclass._module.G(), 
                      $LS($LS($LZ)), 
                      #_module.List.Cons(a#0, xs#0), 
                      Lit(#_module.List.Nil()))), 
                  _module.__default.sequences($LS($LS($LZ)), ys#0))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(244,5)
            ##xs#1_0_3_1 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_3_1, Tclass._module.List(Tclass._module.G()), $Heap);
            ##acc#1_0_3_0 := Lit(#_module.List.Nil());
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#1_0_3_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), Lit(#_module.List.Nil()));
            ##xs#1_0_3_2 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_3_2, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.sequences#canCall(ys#0);
            ##xs#1_0_3_0 := #_module.List.Cons($Box(_module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(a#0, xs#0), 
                  Lit(#_module.List.Nil()))), 
              _module.__default.sequences($LS($LZ), ys#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_3_0, 
              Tclass._module.List(Tclass._module.List(Tclass._module.G())), 
              $Heap);
            assume _module.__default.MultisetUnion#canCall(Tclass._module.G(), 
              #_module.List.Cons($Box(_module.__default.reverse(Tclass._module.G(), 
                    $LS($LZ), 
                    #_module.List.Cons(a#0, xs#0), 
                    Lit(#_module.List.Nil()))), 
                _module.__default.sequences($LS($LZ), ys#0)));
            assume _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), Lit(#_module.List.Nil()))
               && _module.__default.sequences#canCall(ys#0)
               && _module.__default.MultisetUnion#canCall(Tclass._module.G(), 
                #_module.List.Cons($Box(_module.__default.reverse(Tclass._module.G(), 
                      $LS($LZ), 
                      #_module.List.Cons(a#0, xs#0), 
                      Lit(#_module.List.Nil()))), 
                  _module.__default.sequences($LS($LZ), ys#0)));
            // ----- Hint1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(244,5)
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(244,5)
            ##xs#1_0_3_4 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_3_4, Tclass._module.List(Tclass._module.G()), $Heap);
            ##acc#1_0_3_1 := Lit(#_module.List.Nil());
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#1_0_3_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), Lit(#_module.List.Nil()));
            ##xs#1_0_3_3 := _module.__default.reverse(Tclass._module.G(), 
              $LS($LZ), 
              #_module.List.Cons(a#0, xs#0), 
              Lit(#_module.List.Nil()));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_3_3, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(a#0, xs#0), 
                Lit(#_module.List.Nil())));
            ##xs#1_0_3_6 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_3_6, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.sequences#canCall(ys#0);
            ##xs#1_0_3_5 := _module.__default.sequences($LS($LZ), ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_3_5, 
              Tclass._module.List(Tclass._module.List(Tclass._module.G())), 
              $Heap);
            assume _module.__default.MultisetUnion#canCall(Tclass._module.G(), _module.__default.sequences($LS($LZ), ys#0));
            assume _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), Lit(#_module.List.Nil()))
               && _module.__default.multiset__of#canCall(Tclass._module.G(), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(a#0, xs#0), 
                  Lit(#_module.List.Nil())))
               && 
              _module.__default.sequences#canCall(ys#0)
               && _module.__default.MultisetUnion#canCall(Tclass._module.G(), _module.__default.sequences($LS($LZ), ys#0));
            // ----- assert line1 == line2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(244,5)
            assert {:id "id282"} {:subsumption 0} MultiSet#Equal(_module.__default.MultisetUnion(Tclass._module.G(), 
                $LS($LS($LZ)), 
                #_module.List.Cons($Box(_module.__default.reverse(Tclass._module.G(), 
                      $LS($LS($LZ)), 
                      #_module.List.Cons(a#0, xs#0), 
                      Lit(#_module.List.Nil()))), 
                  _module.__default.sequences($LS($LS($LZ)), ys#0))), 
              MultiSet#Union(_module.__default.multiset__of(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    #_module.List.Cons(a#0, xs#0), 
                    Lit(#_module.List.Nil()))), 
                _module.__default.MultisetUnion(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  _module.__default.sequences($LS($LS($LZ)), ys#0))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(244,5)
            ##xs#1_0_2_1 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_2_1, Tclass._module.List(Tclass._module.G()), $Heap);
            ##acc#1_0_2_0 := Lit(#_module.List.Nil());
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#1_0_2_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), Lit(#_module.List.Nil()));
            ##xs#1_0_2_0 := _module.__default.reverse(Tclass._module.G(), 
              $LS($LZ), 
              #_module.List.Cons(a#0, xs#0), 
              Lit(#_module.List.Nil()));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_2_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(a#0, xs#0), 
                Lit(#_module.List.Nil())));
            ##xs#1_0_2_3 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_2_3, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.sequences#canCall(ys#0);
            ##xs#1_0_2_2 := _module.__default.sequences($LS($LZ), ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_2_2, 
              Tclass._module.List(Tclass._module.List(Tclass._module.G())), 
              $Heap);
            assume _module.__default.MultisetUnion#canCall(Tclass._module.G(), _module.__default.sequences($LS($LZ), ys#0));
            assume _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), Lit(#_module.List.Nil()))
               && _module.__default.multiset__of#canCall(Tclass._module.G(), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(a#0, xs#0), 
                  Lit(#_module.List.Nil())))
               && 
              _module.__default.sequences#canCall(ys#0)
               && _module.__default.MultisetUnion#canCall(Tclass._module.G(), _module.__default.sequences($LS($LZ), ys#0));
            // ----- Hint2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(244,5)
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(248,23)
            // TrCallStmt: Before ProcessCallStmt
            assume true;
            // ProcessCallStmt: CheckSubrange
            xs##1_0_2_0 := ys#0;
            assert {:id "id279"} DtRank(xs##1_0_2_0) <= DtRank(ys#0);
            call {:id "id280"} Call$$_module.__default.perm__sequences(xs##1_0_2_0);
            // TrCallStmt: After ProcessCallStmt
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(244,5)
            ##xs#1_0_2_5 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_2_5, Tclass._module.List(Tclass._module.G()), $Heap);
            ##acc#1_0_2_1 := Lit(#_module.List.Nil());
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#1_0_2_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), Lit(#_module.List.Nil()));
            ##xs#1_0_2_4 := _module.__default.reverse(Tclass._module.G(), 
              $LS($LZ), 
              #_module.List.Cons(a#0, xs#0), 
              Lit(#_module.List.Nil()));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_2_4, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(a#0, xs#0), 
                Lit(#_module.List.Nil())));
            ##xs#1_0_2_6 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_2_6, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), ys#0);
            assume _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), Lit(#_module.List.Nil()))
               && _module.__default.multiset__of#canCall(Tclass._module.G(), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(a#0, xs#0), 
                  Lit(#_module.List.Nil())))
               && _module.__default.multiset__of#canCall(Tclass._module.G(), ys#0);
            // ----- assert line2 == line3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(244,5)
            assert {:id "id281"} {:subsumption 0} MultiSet#Equal(MultiSet#Union(_module.__default.multiset__of(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    #_module.List.Cons(a#0, xs#0), 
                    Lit(#_module.List.Nil()))), 
                _module.__default.MultisetUnion(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  _module.__default.sequences($LS($LS($LZ)), ys#0))), 
              MultiSet#Union(_module.__default.multiset__of(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    #_module.List.Cons(a#0, xs#0), 
                    Lit(#_module.List.Nil()))), 
                _module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#0)));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(244,5)
            ##xs#1_0_1_1 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_1_1, Tclass._module.List(Tclass._module.G()), $Heap);
            ##acc#1_0_1_0 := Lit(#_module.List.Nil());
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#1_0_1_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), Lit(#_module.List.Nil()));
            ##xs#1_0_1_0 := _module.__default.reverse(Tclass._module.G(), 
              $LS($LZ), 
              #_module.List.Cons(a#0, xs#0), 
              Lit(#_module.List.Nil()));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_1_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(a#0, xs#0), 
                Lit(#_module.List.Nil())));
            ##xs#1_0_1_2 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_1_2, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), ys#0);
            assume _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), Lit(#_module.List.Nil()))
               && _module.__default.multiset__of#canCall(Tclass._module.G(), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(a#0, xs#0), 
                  Lit(#_module.List.Nil())))
               && _module.__default.multiset__of#canCall(Tclass._module.G(), ys#0);
            // ----- Hint3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(244,5)
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(250,21)
            // TrCallStmt: Before ProcessCallStmt
            assume true;
            // ProcessCallStmt: CheckSubrange
            xs##1_0_1_0 := #_module.List.Cons(a#0, xs#0);
            assume true;
            // ProcessCallStmt: CheckSubrange
            acc##1_0_1_0 := Lit(#_module.List.Nil());
            call {:id "id277"} Call$$_module.__default.perm__reverse(Tclass._module.G(), xs##1_0_1_0, acc##1_0_1_0);
            // TrCallStmt: After ProcessCallStmt
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(244,5)
            ##xs#1_0_1_3 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_1_3, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0));
            ##xs#1_0_1_4 := Lit(#_module.List.Nil());
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_1_4, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), Lit(#_module.List.Nil()));
            ##xs#1_0_1_5 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_1_5, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), ys#0);
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0))
               && _module.__default.multiset__of#canCall(Tclass._module.G(), Lit(#_module.List.Nil()))
               && _module.__default.multiset__of#canCall(Tclass._module.G(), ys#0);
            // ----- assert line3 == line4 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(244,5)
            assert {:id "id278"} {:subsumption 0} MultiSet#Equal(MultiSet#Union(_module.__default.multiset__of(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    #_module.List.Cons(a#0, xs#0), 
                    Lit(#_module.List.Nil()))), 
                _module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#0)), 
              MultiSet#Union(MultiSet#Union(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), #_module.List.Cons(a#0, xs#0)), 
                  _module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), Lit(#_module.List.Nil()))), 
                _module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#0)));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(244,5)
            ##xs#1_0_0_0 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_0_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0));
            ##xs#1_0_0_1 := Lit(#_module.List.Nil());
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_0_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), Lit(#_module.List.Nil()));
            ##xs#1_0_0_2 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_0_2, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), ys#0);
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0))
               && _module.__default.multiset__of#canCall(Tclass._module.G(), Lit(#_module.List.Nil()))
               && _module.__default.multiset__of#canCall(Tclass._module.G(), ys#0);
            // ----- Hint4 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(244,5)
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(244,5)
            ##xs#1_0_0_3 := xs#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_0_3, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), xs#0);
            ##xs#1_0_0_4 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_0_4, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), ys#0);
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), xs#0)
               && _module.__default.multiset__of#canCall(Tclass._module.G(), ys#0);
            // ----- assert line4 == line5 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(244,5)
            assert {:id "id276"} {:subsumption 0} MultiSet#Equal(MultiSet#Union(MultiSet#Union(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), #_module.List.Cons(a#0, xs#0)), 
                  _module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), Lit(#_module.List.Nil()))), 
                _module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#0)), 
              MultiSet#Union(MultiSet#Union(MultiSet#UnionOne(MultiSet#Empty(): MultiSet, a#0), 
                  _module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), xs#0)), 
                _module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#0)));
            assume false;
        }

        assume {:id "id284"} MultiSet#Equal(_module.__default.MultisetUnion(Tclass._module.G(), 
            $LS($LZ), 
            _module.__default.ascending($LS($LZ), a#0, xs#0, ys#0)), 
          MultiSet#Union(MultiSet#Union(MultiSet#UnionOne(MultiSet#Empty(): MultiSet, a#0), 
              _module.__default.multiset__of(Tclass._module.G(), $LS($LZ), xs#0)), 
            _module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#0)));
    }
}



procedure {:verboseName "perm_reverse (well-formedness)"} CheckWellFormed$$_module.__default.perm__reverse(_module._default.perm_reverse$_T0: Ty, 
    xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(_module._default.perm_reverse$_T0))
         && $IsAlloc(xs#0, Tclass._module.List(_module._default.perm_reverse$_T0), $Heap)
         && $IsA#_module.List(xs#0), 
    acc#0: DatatypeType
       where $Is(acc#0, Tclass._module.List(_module._default.perm_reverse$_T0))
         && $IsAlloc(acc#0, Tclass._module.List(_module._default.perm_reverse$_T0), $Heap)
         && $IsA#_module.List(acc#0));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "perm_reverse (call)"} Call$$_module.__default.perm__reverse(_module._default.perm_reverse$_T0: Ty, 
    xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(_module._default.perm_reverse$_T0))
         && $IsAlloc(xs#0, Tclass._module.List(_module._default.perm_reverse$_T0), $Heap)
         && $IsA#_module.List(xs#0), 
    acc#0: DatatypeType
       where $Is(acc#0, Tclass._module.List(_module._default.perm_reverse$_T0))
         && $IsAlloc(acc#0, Tclass._module.List(_module._default.perm_reverse$_T0), $Heap)
         && $IsA#_module.List(acc#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.reverse#canCall(_module._default.perm_reverse$_T0, xs#0, acc#0)
     && _module.__default.multiset__of#canCall(_module._default.perm_reverse$_T0, 
      _module.__default.reverse(_module._default.perm_reverse$_T0, $LS($LZ), xs#0, acc#0))
     && 
    _module.__default.multiset__of#canCall(_module._default.perm_reverse$_T0, xs#0)
     && _module.__default.multiset__of#canCall(_module._default.perm_reverse$_T0, acc#0);
  ensures {:id "id286"} MultiSet#Equal(_module.__default.multiset__of(_module._default.perm_reverse$_T0, 
      $LS($LS($LZ)), 
      _module.__default.reverse(_module._default.perm_reverse$_T0, $LS($LS($LZ)), xs#0, acc#0)), 
    MultiSet#Union(_module.__default.multiset__of(_module._default.perm_reverse$_T0, $LS($LS($LZ)), xs#0), 
      _module.__default.multiset__of(_module._default.perm_reverse$_T0, $LS($LS($LZ)), acc#0)));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "perm_reverse (correctness)"} Impl$$_module.__default.perm__reverse(_module._default.perm_reverse$_T0: Ty, 
    xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(_module._default.perm_reverse$_T0))
         && $IsAlloc(xs#0, Tclass._module.List(_module._default.perm_reverse$_T0), $Heap)
         && $IsA#_module.List(xs#0), 
    acc#0: DatatypeType
       where $Is(acc#0, Tclass._module.List(_module._default.perm_reverse$_T0))
         && $IsAlloc(acc#0, Tclass._module.List(_module._default.perm_reverse$_T0), $Heap)
         && $IsA#_module.List(acc#0))
   returns ($_reverifyPost: bool);
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.reverse#canCall(_module._default.perm_reverse$_T0, xs#0, acc#0)
     && _module.__default.multiset__of#canCall(_module._default.perm_reverse$_T0, 
      _module.__default.reverse(_module._default.perm_reverse$_T0, $LS($LZ), xs#0, acc#0))
     && 
    _module.__default.multiset__of#canCall(_module._default.perm_reverse$_T0, xs#0)
     && _module.__default.multiset__of#canCall(_module._default.perm_reverse$_T0, acc#0);
  ensures {:id "id287"} MultiSet#Equal(_module.__default.multiset__of(_module._default.perm_reverse$_T0, 
      $LS($LS($LZ)), 
      _module.__default.reverse(_module._default.perm_reverse$_T0, $LS($LS($LZ)), xs#0, acc#0)), 
    MultiSet#Union(_module.__default.multiset__of(_module._default.perm_reverse$_T0, $LS($LS($LZ)), xs#0), 
      _module.__default.multiset__of(_module._default.perm_reverse$_T0, $LS($LS($LZ)), acc#0)));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "perm_reverse (correctness)"} Impl$$_module.__default.perm__reverse(_module._default.perm_reverse$_T0: Ty, xs#0: DatatypeType, acc#0: DatatypeType)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $initHeapForallStmt#0: Heap;

    // AddMethodImpl: perm_reverse, Impl$$_module.__default.perm__reverse
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume $IsA#_module.List(xs#0);
    assume $IsA#_module.List(acc#0);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#xs0#0: DatatypeType, $ih#acc0#0: DatatypeType :: 
      { MultiSet#Union(_module.__default.multiset__of(_module._default.perm_reverse$_T0, $LS($LZ), $ih#xs0#0), 
          _module.__default.multiset__of(_module._default.perm_reverse$_T0, $LS($LZ), $ih#acc0#0)) } 
        { _module.__default.reverse(_module._default.perm_reverse$_T0, $LS($LZ), $ih#xs0#0, $ih#acc0#0) } 
      $Is($ih#xs0#0, Tclass._module.List(_module._default.perm_reverse$_T0))
           && $Is($ih#acc0#0, Tclass._module.List(_module._default.perm_reverse$_T0))
           && Lit(true)
           && (DtRank($ih#xs0#0) < DtRank(xs#0)
             || (DtRank($ih#xs0#0) == DtRank(xs#0) && DtRank($ih#acc0#0) < DtRank(acc#0)))
         ==> MultiSet#Equal(_module.__default.multiset__of(_module._default.perm_reverse$_T0, 
            $LS($LZ), 
            _module.__default.reverse(_module._default.perm_reverse$_T0, $LS($LZ), $ih#xs0#0, $ih#acc0#0)), 
          MultiSet#Union(_module.__default.multiset__of(_module._default.perm_reverse$_T0, $LS($LZ), $ih#xs0#0), 
            _module.__default.multiset__of(_module._default.perm_reverse$_T0, $LS($LZ), $ih#acc0#0))));
    $_reverifyPost := false;
}



procedure {:verboseName "perm_mergeAll (well-formedness)"} CheckWellFormed$$_module.__default.perm__mergeAll(x#0: DatatypeType
       where $Is(x#0, Tclass._module.List(Tclass._module.List(Tclass._module.G())))
         && $IsAlloc(x#0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap)
         && $IsA#_module.List(x#0));
  free requires 5 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "perm_mergeAll (well-formedness)"} CheckWellFormed$$_module.__default.perm__mergeAll(x#0: DatatypeType)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##xs#0: DatatypeType;
  var ##xs#1: DatatypeType;
  var ##x#0: DatatypeType;
  var ##xs#2: DatatypeType;


    // AddMethodImpl: perm_mergeAll, CheckWellFormed$$_module.__default.perm__mergeAll
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume {:id "id288"} !_module.List#Equal(x#0, #_module.List.Nil());
    ##xs#0 := x#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##xs#0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
    assume _module.__default.length#canCall(Tclass._module.List(Tclass._module.G()), x#0);
    havoc $Heap;
    assume old($Heap) == $Heap;
    ##x#0 := x#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##x#0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
    assert {:id "id289"} {:subsumption 0} !_module.List#Equal(##x#0, #_module.List.Nil());
    assume !_module.List#Equal(##x#0, #_module.List.Nil());
    assume _module.__default.mergeAll#canCall(x#0);
    ##xs#1 := _module.__default.mergeAll($LS($LZ), x#0);
    // assume allocatedness for argument to function
    assume $IsAlloc(##xs#1, Tclass._module.List(Tclass._module.G()), $Heap);
    assume _module.__default.multiset__of#canCall(Tclass._module.G(), _module.__default.mergeAll($LS($LZ), x#0));
    ##xs#2 := x#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##xs#2, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
    assume _module.__default.MultisetUnion#canCall(Tclass._module.G(), x#0);
    assume {:id "id290"} MultiSet#Equal(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), _module.__default.mergeAll($LS($LZ), x#0)), 
      _module.__default.MultisetUnion(Tclass._module.G(), $LS($LZ), x#0));
}



procedure {:verboseName "perm_mergeAll (call)"} Call$$_module.__default.perm__mergeAll(x#0: DatatypeType
       where $Is(x#0, Tclass._module.List(Tclass._module.List(Tclass._module.G())))
         && $IsAlloc(x#0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap)
         && $IsA#_module.List(x#0));
  // user-defined preconditions
  requires {:id "id291"} !_module.List#Equal(x#0, #_module.List.Nil());
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.mergeAll#canCall(x#0)
     && _module.__default.multiset__of#canCall(Tclass._module.G(), _module.__default.mergeAll($LS($LZ), x#0))
     && _module.__default.MultisetUnion#canCall(Tclass._module.G(), x#0);
  ensures {:id "id292"} MultiSet#Equal(_module.__default.multiset__of(Tclass._module.G(), 
      $LS($LS($LZ)), 
      _module.__default.mergeAll($LS($LS($LZ)), x#0)), 
    _module.__default.MultisetUnion(Tclass._module.G(), $LS($LS($LZ)), x#0));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "perm_mergeAll (correctness)"} Impl$$_module.__default.perm__mergeAll(x#0: DatatypeType
       where $Is(x#0, Tclass._module.List(Tclass._module.List(Tclass._module.G())))
         && $IsAlloc(x#0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap)
         && $IsA#_module.List(x#0))
   returns ($_reverifyPost: bool);
  free requires 5 == $FunctionContextHeight;
  // user-defined preconditions
  requires {:id "id293"} !_module.List#Equal(x#0, #_module.List.Nil());
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.mergeAll#canCall(x#0)
     && _module.__default.multiset__of#canCall(Tclass._module.G(), _module.__default.mergeAll($LS($LZ), x#0))
     && _module.__default.MultisetUnion#canCall(Tclass._module.G(), x#0);
  ensures {:id "id294"} MultiSet#Equal(_module.__default.multiset__of(Tclass._module.G(), 
      $LS($LS($LZ)), 
      _module.__default.mergeAll($LS($LS($LZ)), x#0)), 
    _module.__default.MultisetUnion(Tclass._module.G(), $LS($LS($LZ)), x#0));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "perm_mergeAll (correctness)"} Impl$$_module.__default.perm__mergeAll(x#0: DatatypeType) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $initHeapForallStmt#0: Heap;
  var ##xs#1_1_0_0_0: DatatypeType;
  var ##x#1_1_0_0_0: DatatypeType;
  var x##1_1_0_0_0: DatatypeType;
  var ##xs#1_1_0_0_1: DatatypeType;
  var ##xs#1_1_0_1_0: DatatypeType;
  var ##x#1_1_0_1_0: DatatypeType;
  var ##x#1_1_0_1_1: DatatypeType;
  var x##1_1_0_1_0: DatatypeType;
  var ##x#1_1_0_1_2: DatatypeType;
  var ##xs#1_1_0_1_1: DatatypeType;
  var ##x#1_1_0_1_3: DatatypeType;
  var ##xs#1_1_0_2_0: DatatypeType;
  var ##x#1_1_0_2_0: DatatypeType;
  var ##xs#1_1_0_2_1: DatatypeType;
  var ##x#1_1_0_2_1: DatatypeType;
  var ##x#1_1_0_2_2: DatatypeType;
  var ##xs#1_1_0_0: DatatypeType;
  var ##x#1_1_0_0: DatatypeType;

    // AddMethodImpl: perm_mergeAll, Impl$$_module.__default.perm__mergeAll
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume $IsA#_module.List(x#0);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#x0#0: DatatypeType :: 
      { _module.__default.MultisetUnion(Tclass._module.G(), $LS($LZ), $ih#x0#0) } 
        { _module.__default.mergeAll($LS($LZ), $ih#x0#0) } 
      $Is($ih#x0#0, Tclass._module.List(Tclass._module.List(Tclass._module.G())))
           && !_module.List#Equal($ih#x0#0, #_module.List.Nil())
           && 
          0
             <= _module.__default.length(Tclass._module.List(Tclass._module.G()), $LS($LZ), $ih#x0#0)
           && _module.__default.length(Tclass._module.List(Tclass._module.G()), $LS($LZ), $ih#x0#0)
             < _module.__default.length(Tclass._module.List(Tclass._module.G()), $LS($LZ), x#0)
         ==> MultiSet#Equal(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), _module.__default.mergeAll($LS($LZ), $ih#x0#0)), 
          _module.__default.MultisetUnion(Tclass._module.G(), $LS($LZ), $ih#x0#0)));
    $_reverifyPost := false;
    // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(267,3)
    assume $IsA#_module.List(x#0);
    if (_module.List#Equal(x#0, #_module.List.Nil()))
    {
    }
    else
    {
        // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(268,10)
        assert {:id "id295"} _module.List.Cons_q(x#0);
        assume $IsA#_module.List(_module.List.tail(x#0));
        if (_module.List#Equal(_module.List.tail(x#0), #_module.List.Nil()))
        {
        }
        else
        {
            // ----- calc statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(270,5)
            // Assume Fuel Constant
            if (*)
            {
                // ----- assert wf[initial] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(270,5)
                ##x#1_1_0_0 := x#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##x#1_1_0_0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
                assert {:id "id306"} {:subsumption 0} !_module.List#Equal(##x#1_1_0_0, #_module.List.Nil());
                assume _module.__default.mergeAll#canCall(x#0);
                ##xs#1_1_0_0 := _module.__default.mergeAll($LS($LZ), x#0);
                // assume allocatedness for argument to function
                assume $IsAlloc(##xs#1_1_0_0, Tclass._module.List(Tclass._module.G()), $Heap);
                assume _module.__default.multiset__of#canCall(Tclass._module.G(), _module.__default.mergeAll($LS($LZ), x#0));
                assume _module.__default.mergeAll#canCall(x#0)
                   && _module.__default.multiset__of#canCall(Tclass._module.G(), _module.__default.mergeAll($LS($LZ), x#0));
                assume false;
            }
            else if (*)
            {
                // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(270,5)
                ##x#1_1_0_2_0 := x#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##x#1_1_0_2_0, 
                  Tclass._module.List(Tclass._module.List(Tclass._module.G())), 
                  $Heap);
                assume {:id "id303"} {:subsumption 0} !_module.List#Equal(##x#1_1_0_2_0, #_module.List.Nil());
                assume _module.__default.mergeAll#canCall(x#0);
                ##xs#1_1_0_2_0 := _module.__default.mergeAll($LS($LZ), x#0);
                // assume allocatedness for argument to function
                assume $IsAlloc(##xs#1_1_0_2_0, Tclass._module.List(Tclass._module.G()), $Heap);
                assume _module.__default.multiset__of#canCall(Tclass._module.G(), _module.__default.mergeAll($LS($LZ), x#0));
                assume _module.__default.mergeAll#canCall(x#0)
                   && _module.__default.multiset__of#canCall(Tclass._module.G(), _module.__default.mergeAll($LS($LZ), x#0));
                // ----- Hint0 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(270,5)
                // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(270,5)
                ##x#1_1_0_2_2 := x#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##x#1_1_0_2_2, 
                  Tclass._module.List(Tclass._module.List(Tclass._module.G())), 
                  $Heap);
                assume _module.__default.mergePairs#canCall(x#0);
                ##x#1_1_0_2_1 := _module.__default.mergePairs($LS($LZ), x#0);
                // assume allocatedness for argument to function
                assume $IsAlloc(##x#1_1_0_2_1, 
                  Tclass._module.List(Tclass._module.List(Tclass._module.G())), 
                  $Heap);
                assert {:id "id304"} {:subsumption 0} !_module.List#Equal(##x#1_1_0_2_1, #_module.List.Nil());
                assume _module.__default.mergeAll#canCall(_module.__default.mergePairs($LS($LZ), x#0));
                ##xs#1_1_0_2_1 := _module.__default.mergeAll($LS($LZ), _module.__default.mergePairs($LS($LZ), x#0));
                // assume allocatedness for argument to function
                assume $IsAlloc(##xs#1_1_0_2_1, Tclass._module.List(Tclass._module.G()), $Heap);
                assume _module.__default.multiset__of#canCall(Tclass._module.G(), 
                  _module.__default.mergeAll($LS($LZ), _module.__default.mergePairs($LS($LZ), x#0)));
                assume _module.__default.mergePairs#canCall(x#0)
                   && _module.__default.mergeAll#canCall(_module.__default.mergePairs($LS($LZ), x#0))
                   && _module.__default.multiset__of#canCall(Tclass._module.G(), 
                    _module.__default.mergeAll($LS($LZ), _module.__default.mergePairs($LS($LZ), x#0)));
                // ----- assert line0 == line1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(270,5)
                assert {:id "id305"} {:subsumption 0} MultiSet#Equal(_module.__default.multiset__of(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    _module.__default.mergeAll($LS($LS($LZ)), x#0)), 
                  _module.__default.multiset__of(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    _module.__default.mergeAll($LS($LS($LZ)), _module.__default.mergePairs($LS($LS($LZ)), x#0))));
                assume false;
            }
            else if (*)
            {
                // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(270,5)
                ##x#1_1_0_1_1 := x#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##x#1_1_0_1_1, 
                  Tclass._module.List(Tclass._module.List(Tclass._module.G())), 
                  $Heap);
                assume _module.__default.mergePairs#canCall(x#0);
                ##x#1_1_0_1_0 := _module.__default.mergePairs($LS($LZ), x#0);
                // assume allocatedness for argument to function
                assume $IsAlloc(##x#1_1_0_1_0, 
                  Tclass._module.List(Tclass._module.List(Tclass._module.G())), 
                  $Heap);
                assume {:id "id298"} {:subsumption 0} !_module.List#Equal(##x#1_1_0_1_0, #_module.List.Nil());
                assume _module.__default.mergeAll#canCall(_module.__default.mergePairs($LS($LZ), x#0));
                ##xs#1_1_0_1_0 := _module.__default.mergeAll($LS($LZ), _module.__default.mergePairs($LS($LZ), x#0));
                // assume allocatedness for argument to function
                assume $IsAlloc(##xs#1_1_0_1_0, Tclass._module.List(Tclass._module.G()), $Heap);
                assume _module.__default.multiset__of#canCall(Tclass._module.G(), 
                  _module.__default.mergeAll($LS($LZ), _module.__default.mergePairs($LS($LZ), x#0)));
                assume _module.__default.mergePairs#canCall(x#0)
                   && _module.__default.mergeAll#canCall(_module.__default.mergePairs($LS($LZ), x#0))
                   && _module.__default.multiset__of#canCall(Tclass._module.G(), 
                    _module.__default.mergeAll($LS($LZ), _module.__default.mergePairs($LS($LZ), x#0)));
                // ----- Hint1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(270,5)
                // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(273,22)
                // TrCallStmt: Before ProcessCallStmt
                ##x#1_1_0_1_2 := x#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##x#1_1_0_1_2, 
                  Tclass._module.List(Tclass._module.List(Tclass._module.G())), 
                  $Heap);
                assume _module.__default.mergePairs#canCall(x#0);
                assume _module.__default.mergePairs#canCall(x#0);
                // ProcessCallStmt: CheckSubrange
                x##1_1_0_1_0 := _module.__default.mergePairs($LS($LZ), x#0);
                assert {:id "id299"} 0
                     <= _module.__default.length(Tclass._module.List(Tclass._module.G()), $LS($LZ), x#0)
                   || _module.__default.length(Tclass._module.List(Tclass._module.G()), $LS($LZ), x##1_1_0_1_0)
                     == _module.__default.length(Tclass._module.List(Tclass._module.G()), $LS($LZ), x#0);
                assert {:id "id300"} _module.__default.length(Tclass._module.List(Tclass._module.G()), $LS($LZ), x##1_1_0_1_0)
                   < _module.__default.length(Tclass._module.List(Tclass._module.G()), $LS($LZ), x#0);
                call {:id "id301"} Call$$_module.__default.perm__mergeAll(x##1_1_0_1_0);
                // TrCallStmt: After ProcessCallStmt
                // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(270,5)
                ##x#1_1_0_1_3 := x#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##x#1_1_0_1_3, 
                  Tclass._module.List(Tclass._module.List(Tclass._module.G())), 
                  $Heap);
                assume _module.__default.mergePairs#canCall(x#0);
                ##xs#1_1_0_1_1 := _module.__default.mergePairs($LS($LZ), x#0);
                // assume allocatedness for argument to function
                assume $IsAlloc(##xs#1_1_0_1_1, 
                  Tclass._module.List(Tclass._module.List(Tclass._module.G())), 
                  $Heap);
                assume _module.__default.MultisetUnion#canCall(Tclass._module.G(), _module.__default.mergePairs($LS($LZ), x#0));
                assume _module.__default.mergePairs#canCall(x#0)
                   && _module.__default.MultisetUnion#canCall(Tclass._module.G(), _module.__default.mergePairs($LS($LZ), x#0));
                // ----- assert line1 == line2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(270,5)
                assert {:id "id302"} {:subsumption 0} MultiSet#Equal(_module.__default.multiset__of(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    _module.__default.mergeAll($LS($LS($LZ)), _module.__default.mergePairs($LS($LS($LZ)), x#0))), 
                  _module.__default.MultisetUnion(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    _module.__default.mergePairs($LS($LS($LZ)), x#0)));
                assume false;
            }
            else if (*)
            {
                // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(270,5)
                ##x#1_1_0_0_0 := x#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##x#1_1_0_0_0, 
                  Tclass._module.List(Tclass._module.List(Tclass._module.G())), 
                  $Heap);
                assume _module.__default.mergePairs#canCall(x#0);
                ##xs#1_1_0_0_0 := _module.__default.mergePairs($LS($LZ), x#0);
                // assume allocatedness for argument to function
                assume $IsAlloc(##xs#1_1_0_0_0, 
                  Tclass._module.List(Tclass._module.List(Tclass._module.G())), 
                  $Heap);
                assume _module.__default.MultisetUnion#canCall(Tclass._module.G(), _module.__default.mergePairs($LS($LZ), x#0));
                assume _module.__default.mergePairs#canCall(x#0)
                   && _module.__default.MultisetUnion#canCall(Tclass._module.G(), _module.__default.mergePairs($LS($LZ), x#0));
                // ----- Hint2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(270,5)
                // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(275,24)
                // TrCallStmt: Before ProcessCallStmt
                assume true;
                // ProcessCallStmt: CheckSubrange
                x##1_1_0_0_0 := x#0;
                call {:id "id296"} Call$$_module.__default.perm__mergePairs(x##1_1_0_0_0);
                // TrCallStmt: After ProcessCallStmt
                // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(270,5)
                ##xs#1_1_0_0_1 := x#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##xs#1_1_0_0_1, 
                  Tclass._module.List(Tclass._module.List(Tclass._module.G())), 
                  $Heap);
                assume _module.__default.MultisetUnion#canCall(Tclass._module.G(), x#0);
                assume _module.__default.MultisetUnion#canCall(Tclass._module.G(), x#0);
                // ----- assert line2 == line3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(270,5)
                assert {:id "id297"} {:subsumption 0} MultiSet#Equal(_module.__default.MultisetUnion(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    _module.__default.mergePairs($LS($LS($LZ)), x#0)), 
                  _module.__default.MultisetUnion(Tclass._module.G(), $LS($LS($LZ)), x#0));
                assume false;
            }

            assume {:id "id307"} MultiSet#Equal(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), _module.__default.mergeAll($LS($LZ), x#0)), 
              _module.__default.MultisetUnion(Tclass._module.G(), $LS($LZ), x#0));
        }
    }
}



procedure {:verboseName "perm_mergePairs (well-formedness)"} CheckWellFormed$$_module.__default.perm__mergePairs(x#0: DatatypeType
       where $Is(x#0, Tclass._module.List(Tclass._module.List(Tclass._module.G())))
         && $IsAlloc(x#0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap)
         && $IsA#_module.List(x#0));
  free requires 4 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "perm_mergePairs (call)"} Call$$_module.__default.perm__mergePairs(x#0: DatatypeType
       where $Is(x#0, Tclass._module.List(Tclass._module.List(Tclass._module.G())))
         && $IsAlloc(x#0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap)
         && $IsA#_module.List(x#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.mergePairs#canCall(x#0)
     && _module.__default.MultisetUnion#canCall(Tclass._module.G(), _module.__default.mergePairs($LS($LZ), x#0))
     && _module.__default.MultisetUnion#canCall(Tclass._module.G(), x#0);
  ensures {:id "id309"} MultiSet#Equal(_module.__default.MultisetUnion(Tclass._module.G(), 
      $LS($LS($LZ)), 
      _module.__default.mergePairs($LS($LS($LZ)), x#0)), 
    _module.__default.MultisetUnion(Tclass._module.G(), $LS($LS($LZ)), x#0));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "perm_mergePairs (correctness)"} Impl$$_module.__default.perm__mergePairs(x#0: DatatypeType
       where $Is(x#0, Tclass._module.List(Tclass._module.List(Tclass._module.G())))
         && $IsAlloc(x#0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap)
         && $IsA#_module.List(x#0))
   returns ($_reverifyPost: bool);
  free requires 4 == $FunctionContextHeight;
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.mergePairs#canCall(x#0)
     && _module.__default.MultisetUnion#canCall(Tclass._module.G(), _module.__default.mergePairs($LS($LZ), x#0))
     && _module.__default.MultisetUnion#canCall(Tclass._module.G(), x#0);
  ensures {:id "id310"} MultiSet#Equal(_module.__default.MultisetUnion(Tclass._module.G(), 
      $LS($LS($LZ)), 
      _module.__default.mergePairs($LS($LS($LZ)), x#0)), 
    _module.__default.MultisetUnion(Tclass._module.G(), $LS($LS($LZ)), x#0));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "perm_mergePairs (correctness)"} Impl$$_module.__default.perm__mergePairs(x#0: DatatypeType) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $initHeapForallStmt#0: Heap;
  var ##xs#0_0_0_0: DatatypeType;
  var ##xs#0_0_0_1: DatatypeType;
  var ##xs#0_0_1_0: DatatypeType;
  var ##xs#0_0_1_1: DatatypeType;
  var ##xs#0_0_1_2: DatatypeType;
  var ##xs#0_0_2_0: DatatypeType;
  var ##xs#0_0_2_1: DatatypeType;
  var ##xs#0_0_2_2: DatatypeType;
  var ##xs#0_0_2_3: DatatypeType;
  var ##xs#0_0_3_0: DatatypeType;
  var ##xs#0_0_3_1: DatatypeType;
  var ##xs#0_0_3_2: DatatypeType;
  var ##xs#0_0_3_3: DatatypeType;
  var ##xs#0_0_3_4: DatatypeType;
  var ##xs#0_0_4_0: DatatypeType;
  var ##xs#0_0_4_1: DatatypeType;
  var ##ys#0_0_4_0: DatatypeType;
  var ##xs#0_0_4_2: DatatypeType;
  var xs##0_0_4_0: DatatypeType;
  var ys##0_0_4_0: DatatypeType;
  var ##xs#0_0_4_3: DatatypeType;
  var ##xs#0_0_4_4: DatatypeType;
  var ##xs#0_0_4_5: DatatypeType;
  var ##xs#0_0_5_0: DatatypeType;
  var ##xs#0_0_5_1: DatatypeType;
  var ##ys#0_0_5_0: DatatypeType;
  var ##xs#0_0_5_2: DatatypeType;
  var ##x#0_0_5_0: DatatypeType;
  var x##0_0_5_0: DatatypeType;
  var ##xs#0_0_5_3: DatatypeType;
  var ##xs#0_0_5_4: DatatypeType;
  var ##ys#0_0_5_1: DatatypeType;
  var ##xs#0_0_5_5: DatatypeType;
  var ##xs#0_0_6_0: DatatypeType;
  var ##xs#0_0_6_1: DatatypeType;
  var ##ys#0_0_6_0: DatatypeType;
  var ##x#0_0_6_0: DatatypeType;
  var ##xs#0_0_6_2: DatatypeType;
  var ##xs#0_0_6_3: DatatypeType;
  var ##ys#0_0_6_1: DatatypeType;
  var ##xs#0_0_6_4: DatatypeType;
  var ##x#0_0_6_1: DatatypeType;
  var ##xs#0_0_7_0: DatatypeType;
  var ##x#0_0_7_0: DatatypeType;
  var ##xs#0_0_7_1: DatatypeType;
  var ##xs#0_0_7_2: DatatypeType;
  var ##ys#0_0_7_0: DatatypeType;
  var ##x#0_0_7_1: DatatypeType;
  var ##xs#0_0_0: DatatypeType;
  var ##x#0_0_0: DatatypeType;

    // AddMethodImpl: perm_mergePairs, Impl$$_module.__default.perm__mergePairs
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume $IsA#_module.List(x#0);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#x0#0: DatatypeType :: 
      { _module.__default.mergePairs($LS($LZ), $ih#x0#0) } 
      $Is($ih#x0#0, Tclass._module.List(Tclass._module.List(Tclass._module.G())))
           && Lit(true)
           && DtRank($ih#x0#0) < DtRank(x#0)
         ==> MultiSet#Equal(_module.__default.MultisetUnion(Tclass._module.G(), $LS($LZ), _module.__default.mergePairs($LS($LZ), $ih#x0#0)), 
          _module.__default.MultisetUnion(Tclass._module.G(), $LS($LZ), $ih#x0#0)));
    $_reverifyPost := false;
    // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(284,3)
    if (_module.List.Cons_q(x#0))
    {
        assert {:id "id311"} _module.List.Cons_q(x#0);
    }

    assume true;
    if (_module.List.Cons_q(x#0) && _module.List.Cons_q(_module.List.tail(x#0)))
    {
        // ----- calc statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(285,5)
        // Assume Fuel Constant
        if (*)
        {
            // ----- assert wf[initial] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(285,5)
            ##x#0_0_0 := x#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#0_0_0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.mergePairs#canCall(x#0);
            ##xs#0_0_0 := _module.__default.mergePairs($LS($LZ), x#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.MultisetUnion#canCall(Tclass._module.G(), _module.__default.mergePairs($LS($LZ), x#0));
            assume _module.__default.mergePairs#canCall(x#0)
               && _module.__default.MultisetUnion#canCall(Tclass._module.G(), _module.__default.mergePairs($LS($LZ), x#0));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(285,5)
            ##x#0_0_7_0 := x#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#0_0_7_0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.mergePairs#canCall(x#0);
            ##xs#0_0_7_0 := _module.__default.mergePairs($LS($LZ), x#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_7_0, 
              Tclass._module.List(Tclass._module.List(Tclass._module.G())), 
              $Heap);
            assume _module.__default.MultisetUnion#canCall(Tclass._module.G(), _module.__default.mergePairs($LS($LZ), x#0));
            assume _module.__default.mergePairs#canCall(x#0)
               && _module.__default.MultisetUnion#canCall(Tclass._module.G(), _module.__default.mergePairs($LS($LZ), x#0));
            // ----- Hint0 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(285,5)
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(285,5)
            assert {:id "id380"} _module.List.Cons_q(x#0);
            ##xs#0_0_7_2 := $Unbox(_module.List.head(x#0)): DatatypeType;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_7_2, Tclass._module.List(Tclass._module.G()), $Heap);
            assert {:id "id381"} _module.List.Cons_q(x#0);
            assert {:id "id382"} _module.List.Cons_q(_module.List.tail(x#0));
            ##ys#0_0_7_0 := $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_7_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.merge#canCall($Unbox(_module.List.head(x#0)): DatatypeType, 
              $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType);
            assert {:id "id383"} _module.List.Cons_q(x#0);
            assert {:id "id384"} _module.List.Cons_q(_module.List.tail(x#0));
            ##x#0_0_7_1 := _module.List.tail(_module.List.tail(x#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#0_0_7_1, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.mergePairs#canCall(_module.List.tail(_module.List.tail(x#0)));
            ##xs#0_0_7_1 := #_module.List.Cons($Box(_module.__default.merge($LS($LZ), 
                  $Unbox(_module.List.head(x#0)): DatatypeType, 
                  $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)), 
              _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0))));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_7_1, 
              Tclass._module.List(Tclass._module.List(Tclass._module.G())), 
              $Heap);
            assume _module.__default.MultisetUnion#canCall(Tclass._module.G(), 
              #_module.List.Cons($Box(_module.__default.merge($LS($LZ), 
                    $Unbox(_module.List.head(x#0)): DatatypeType, 
                    $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)), 
                _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0)))));
            assume _module.__default.merge#canCall($Unbox(_module.List.head(x#0)): DatatypeType, 
                $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)
               && _module.__default.mergePairs#canCall(_module.List.tail(_module.List.tail(x#0)))
               && _module.__default.MultisetUnion#canCall(Tclass._module.G(), 
                #_module.List.Cons($Box(_module.__default.merge($LS($LZ), 
                      $Unbox(_module.List.head(x#0)): DatatypeType, 
                      $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)), 
                  _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0)))));
            // ----- assert line0 == line1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(285,5)
            assert {:id "id385"} {:subsumption 0} MultiSet#Equal(_module.__default.MultisetUnion(Tclass._module.G(), 
                $LS($LS($LZ)), 
                _module.__default.mergePairs($LS($LS($LZ)), x#0)), 
              _module.__default.MultisetUnion(Tclass._module.G(), 
                $LS($LS($LZ)), 
                #_module.List.Cons($Box(_module.__default.merge($LS($LS($LZ)), 
                      $Unbox(_module.List.head(x#0)): DatatypeType, 
                      $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)), 
                  _module.__default.mergePairs($LS($LS($LZ)), _module.List.tail(_module.List.tail(x#0))))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(285,5)
            assume {:id "id369"} _module.List.Cons_q(x#0);
            ##xs#0_0_6_1 := $Unbox(_module.List.head(x#0)): DatatypeType;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_6_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume {:id "id370"} _module.List.Cons_q(x#0);
            assume {:id "id371"} _module.List.Cons_q(_module.List.tail(x#0));
            ##ys#0_0_6_0 := $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_6_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.merge#canCall($Unbox(_module.List.head(x#0)): DatatypeType, 
              $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType);
            assume {:id "id372"} _module.List.Cons_q(x#0);
            assume {:id "id373"} _module.List.Cons_q(_module.List.tail(x#0));
            ##x#0_0_6_0 := _module.List.tail(_module.List.tail(x#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#0_0_6_0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.mergePairs#canCall(_module.List.tail(_module.List.tail(x#0)));
            ##xs#0_0_6_0 := #_module.List.Cons($Box(_module.__default.merge($LS($LZ), 
                  $Unbox(_module.List.head(x#0)): DatatypeType, 
                  $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)), 
              _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0))));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_6_0, 
              Tclass._module.List(Tclass._module.List(Tclass._module.G())), 
              $Heap);
            assume _module.__default.MultisetUnion#canCall(Tclass._module.G(), 
              #_module.List.Cons($Box(_module.__default.merge($LS($LZ), 
                    $Unbox(_module.List.head(x#0)): DatatypeType, 
                    $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)), 
                _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0)))));
            assume _module.__default.merge#canCall($Unbox(_module.List.head(x#0)): DatatypeType, 
                $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)
               && _module.__default.mergePairs#canCall(_module.List.tail(_module.List.tail(x#0)))
               && _module.__default.MultisetUnion#canCall(Tclass._module.G(), 
                #_module.List.Cons($Box(_module.__default.merge($LS($LZ), 
                      $Unbox(_module.List.head(x#0)): DatatypeType, 
                      $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)), 
                  _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0)))));
            // ----- Hint1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(285,5)
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(285,5)
            assert {:id "id374"} _module.List.Cons_q(x#0);
            ##xs#0_0_6_3 := $Unbox(_module.List.head(x#0)): DatatypeType;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_6_3, Tclass._module.List(Tclass._module.G()), $Heap);
            assert {:id "id375"} _module.List.Cons_q(x#0);
            assert {:id "id376"} _module.List.Cons_q(_module.List.tail(x#0));
            ##ys#0_0_6_1 := $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_6_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.merge#canCall($Unbox(_module.List.head(x#0)): DatatypeType, 
              $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType);
            ##xs#0_0_6_2 := _module.__default.merge($LS($LZ), 
              $Unbox(_module.List.head(x#0)): DatatypeType, 
              $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_6_2, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), 
              _module.__default.merge($LS($LZ), 
                $Unbox(_module.List.head(x#0)): DatatypeType, 
                $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType));
            assert {:id "id377"} _module.List.Cons_q(x#0);
            assert {:id "id378"} _module.List.Cons_q(_module.List.tail(x#0));
            ##x#0_0_6_1 := _module.List.tail(_module.List.tail(x#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#0_0_6_1, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.mergePairs#canCall(_module.List.tail(_module.List.tail(x#0)));
            ##xs#0_0_6_4 := _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0)));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_6_4, 
              Tclass._module.List(Tclass._module.List(Tclass._module.G())), 
              $Heap);
            assume _module.__default.MultisetUnion#canCall(Tclass._module.G(), 
              _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0))));
            assume _module.__default.merge#canCall($Unbox(_module.List.head(x#0)): DatatypeType, 
                $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)
               && _module.__default.multiset__of#canCall(Tclass._module.G(), 
                _module.__default.merge($LS($LZ), 
                  $Unbox(_module.List.head(x#0)): DatatypeType, 
                  $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType))
               && 
              _module.__default.mergePairs#canCall(_module.List.tail(_module.List.tail(x#0)))
               && _module.__default.MultisetUnion#canCall(Tclass._module.G(), 
                _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0))));
            // ----- assert line1 == line2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(285,5)
            assert {:id "id379"} {:subsumption 0} MultiSet#Equal(_module.__default.MultisetUnion(Tclass._module.G(), 
                $LS($LS($LZ)), 
                #_module.List.Cons($Box(_module.__default.merge($LS($LS($LZ)), 
                      $Unbox(_module.List.head(x#0)): DatatypeType, 
                      $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)), 
                  _module.__default.mergePairs($LS($LS($LZ)), _module.List.tail(_module.List.tail(x#0))))), 
              MultiSet#Union(_module.__default.multiset__of(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  _module.__default.merge($LS($LS($LZ)), 
                    $Unbox(_module.List.head(x#0)): DatatypeType, 
                    $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)), 
                _module.__default.MultisetUnion(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  _module.__default.mergePairs($LS($LS($LZ)), _module.List.tail(_module.List.tail(x#0))))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(285,5)
            assume {:id "id354"} _module.List.Cons_q(x#0);
            ##xs#0_0_5_1 := $Unbox(_module.List.head(x#0)): DatatypeType;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_5_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume {:id "id355"} _module.List.Cons_q(x#0);
            assume {:id "id356"} _module.List.Cons_q(_module.List.tail(x#0));
            ##ys#0_0_5_0 := $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_5_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.merge#canCall($Unbox(_module.List.head(x#0)): DatatypeType, 
              $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType);
            ##xs#0_0_5_0 := _module.__default.merge($LS($LZ), 
              $Unbox(_module.List.head(x#0)): DatatypeType, 
              $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_5_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), 
              _module.__default.merge($LS($LZ), 
                $Unbox(_module.List.head(x#0)): DatatypeType, 
                $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType));
            assume {:id "id357"} _module.List.Cons_q(x#0);
            assume {:id "id358"} _module.List.Cons_q(_module.List.tail(x#0));
            ##x#0_0_5_0 := _module.List.tail(_module.List.tail(x#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#0_0_5_0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.mergePairs#canCall(_module.List.tail(_module.List.tail(x#0)));
            ##xs#0_0_5_2 := _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0)));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_5_2, 
              Tclass._module.List(Tclass._module.List(Tclass._module.G())), 
              $Heap);
            assume _module.__default.MultisetUnion#canCall(Tclass._module.G(), 
              _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0))));
            assume _module.__default.merge#canCall($Unbox(_module.List.head(x#0)): DatatypeType, 
                $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)
               && _module.__default.multiset__of#canCall(Tclass._module.G(), 
                _module.__default.merge($LS($LZ), 
                  $Unbox(_module.List.head(x#0)): DatatypeType, 
                  $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType))
               && 
              _module.__default.mergePairs#canCall(_module.List.tail(_module.List.tail(x#0)))
               && _module.__default.MultisetUnion#canCall(Tclass._module.G(), 
                _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0))));
            // ----- Hint2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(285,5)
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(289,24)
            // TrCallStmt: Before ProcessCallStmt
            assert {:id "id359"} _module.List.Cons_q(x#0);
            assert {:id "id360"} _module.List.Cons_q(_module.List.tail(x#0));
            assume true;
            // ProcessCallStmt: CheckSubrange
            x##0_0_5_0 := _module.List.tail(_module.List.tail(x#0));
            assert {:id "id361"} DtRank(x##0_0_5_0) < DtRank(x#0);
            call {:id "id362"} Call$$_module.__default.perm__mergePairs(x##0_0_5_0);
            // TrCallStmt: After ProcessCallStmt
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(285,5)
            assert {:id "id363"} _module.List.Cons_q(x#0);
            ##xs#0_0_5_4 := $Unbox(_module.List.head(x#0)): DatatypeType;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_5_4, Tclass._module.List(Tclass._module.G()), $Heap);
            assert {:id "id364"} _module.List.Cons_q(x#0);
            assert {:id "id365"} _module.List.Cons_q(_module.List.tail(x#0));
            ##ys#0_0_5_1 := $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_5_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.merge#canCall($Unbox(_module.List.head(x#0)): DatatypeType, 
              $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType);
            ##xs#0_0_5_3 := _module.__default.merge($LS($LZ), 
              $Unbox(_module.List.head(x#0)): DatatypeType, 
              $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_5_3, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), 
              _module.__default.merge($LS($LZ), 
                $Unbox(_module.List.head(x#0)): DatatypeType, 
                $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType));
            assert {:id "id366"} _module.List.Cons_q(x#0);
            assert {:id "id367"} _module.List.Cons_q(_module.List.tail(x#0));
            ##xs#0_0_5_5 := _module.List.tail(_module.List.tail(x#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_5_5, 
              Tclass._module.List(Tclass._module.List(Tclass._module.G())), 
              $Heap);
            assume _module.__default.MultisetUnion#canCall(Tclass._module.G(), _module.List.tail(_module.List.tail(x#0)));
            assume _module.__default.merge#canCall($Unbox(_module.List.head(x#0)): DatatypeType, 
                $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)
               && _module.__default.multiset__of#canCall(Tclass._module.G(), 
                _module.__default.merge($LS($LZ), 
                  $Unbox(_module.List.head(x#0)): DatatypeType, 
                  $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType))
               && _module.__default.MultisetUnion#canCall(Tclass._module.G(), _module.List.tail(_module.List.tail(x#0)));
            // ----- assert line2 == line3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(285,5)
            assert {:id "id368"} {:subsumption 0} MultiSet#Equal(MultiSet#Union(_module.__default.multiset__of(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  _module.__default.merge($LS($LS($LZ)), 
                    $Unbox(_module.List.head(x#0)): DatatypeType, 
                    $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)), 
                _module.__default.MultisetUnion(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  _module.__default.mergePairs($LS($LS($LZ)), _module.List.tail(_module.List.tail(x#0))))), 
              MultiSet#Union(_module.__default.multiset__of(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  _module.__default.merge($LS($LS($LZ)), 
                    $Unbox(_module.List.head(x#0)): DatatypeType, 
                    $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)), 
                _module.__default.MultisetUnion(Tclass._module.G(), $LS($LS($LZ)), _module.List.tail(_module.List.tail(x#0)))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(285,5)
            assume {:id "id339"} _module.List.Cons_q(x#0);
            ##xs#0_0_4_1 := $Unbox(_module.List.head(x#0)): DatatypeType;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_4_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume {:id "id340"} _module.List.Cons_q(x#0);
            assume {:id "id341"} _module.List.Cons_q(_module.List.tail(x#0));
            ##ys#0_0_4_0 := $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_4_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.merge#canCall($Unbox(_module.List.head(x#0)): DatatypeType, 
              $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType);
            ##xs#0_0_4_0 := _module.__default.merge($LS($LZ), 
              $Unbox(_module.List.head(x#0)): DatatypeType, 
              $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_4_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), 
              _module.__default.merge($LS($LZ), 
                $Unbox(_module.List.head(x#0)): DatatypeType, 
                $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType));
            assume {:id "id342"} _module.List.Cons_q(x#0);
            assume {:id "id343"} _module.List.Cons_q(_module.List.tail(x#0));
            ##xs#0_0_4_2 := _module.List.tail(_module.List.tail(x#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_4_2, 
              Tclass._module.List(Tclass._module.List(Tclass._module.G())), 
              $Heap);
            assume _module.__default.MultisetUnion#canCall(Tclass._module.G(), _module.List.tail(_module.List.tail(x#0)));
            assume _module.__default.merge#canCall($Unbox(_module.List.head(x#0)): DatatypeType, 
                $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)
               && _module.__default.multiset__of#canCall(Tclass._module.G(), 
                _module.__default.merge($LS($LZ), 
                  $Unbox(_module.List.head(x#0)): DatatypeType, 
                  $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType))
               && _module.__default.MultisetUnion#canCall(Tclass._module.G(), _module.List.tail(_module.List.tail(x#0)));
            // ----- Hint3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(285,5)
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(291,19)
            // TrCallStmt: Before ProcessCallStmt
            assert {:id "id344"} _module.List.Cons_q(x#0);
            assume true;
            // ProcessCallStmt: CheckSubrange
            xs##0_0_4_0 := $Unbox(_module.List.head(x#0)): DatatypeType;
            assert {:id "id345"} _module.List.Cons_q(x#0);
            assert {:id "id346"} _module.List.Cons_q(_module.List.tail(x#0));
            assume true;
            // ProcessCallStmt: CheckSubrange
            ys##0_0_4_0 := $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType;
            call {:id "id347"} Call$$_module.__default.perm__merge(xs##0_0_4_0, ys##0_0_4_0);
            // TrCallStmt: After ProcessCallStmt
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(285,5)
            assert {:id "id348"} _module.List.Cons_q(x#0);
            ##xs#0_0_4_3 := $Unbox(_module.List.head(x#0)): DatatypeType;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_4_3, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), $Unbox(_module.List.head(x#0)): DatatypeType);
            assert {:id "id349"} _module.List.Cons_q(x#0);
            assert {:id "id350"} _module.List.Cons_q(_module.List.tail(x#0));
            ##xs#0_0_4_4 := $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_4_4, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), 
              $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType);
            assert {:id "id351"} _module.List.Cons_q(x#0);
            assert {:id "id352"} _module.List.Cons_q(_module.List.tail(x#0));
            ##xs#0_0_4_5 := _module.List.tail(_module.List.tail(x#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_4_5, 
              Tclass._module.List(Tclass._module.List(Tclass._module.G())), 
              $Heap);
            assume _module.__default.MultisetUnion#canCall(Tclass._module.G(), _module.List.tail(_module.List.tail(x#0)));
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), $Unbox(_module.List.head(x#0)): DatatypeType)
               && _module.__default.multiset__of#canCall(Tclass._module.G(), 
                $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)
               && _module.__default.MultisetUnion#canCall(Tclass._module.G(), _module.List.tail(_module.List.tail(x#0)));
            // ----- assert line3 == line4 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(285,5)
            assert {:id "id353"} {:subsumption 0} MultiSet#Equal(MultiSet#Union(_module.__default.multiset__of(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  _module.__default.merge($LS($LS($LZ)), 
                    $Unbox(_module.List.head(x#0)): DatatypeType, 
                    $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)), 
                _module.__default.MultisetUnion(Tclass._module.G(), $LS($LS($LZ)), _module.List.tail(_module.List.tail(x#0)))), 
              MultiSet#Union(MultiSet#Union(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), $Unbox(_module.List.head(x#0)): DatatypeType), 
                  _module.__default.multiset__of(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)), 
                _module.__default.MultisetUnion(Tclass._module.G(), $LS($LS($LZ)), _module.List.tail(_module.List.tail(x#0)))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(285,5)
            assume {:id "id328"} _module.List.Cons_q(x#0);
            ##xs#0_0_3_0 := $Unbox(_module.List.head(x#0)): DatatypeType;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_3_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), $Unbox(_module.List.head(x#0)): DatatypeType);
            assume {:id "id329"} _module.List.Cons_q(x#0);
            assume {:id "id330"} _module.List.Cons_q(_module.List.tail(x#0));
            ##xs#0_0_3_1 := $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_3_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), 
              $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType);
            assume {:id "id331"} _module.List.Cons_q(x#0);
            assume {:id "id332"} _module.List.Cons_q(_module.List.tail(x#0));
            ##xs#0_0_3_2 := _module.List.tail(_module.List.tail(x#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_3_2, 
              Tclass._module.List(Tclass._module.List(Tclass._module.G())), 
              $Heap);
            assume _module.__default.MultisetUnion#canCall(Tclass._module.G(), _module.List.tail(_module.List.tail(x#0)));
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), $Unbox(_module.List.head(x#0)): DatatypeType)
               && _module.__default.multiset__of#canCall(Tclass._module.G(), 
                $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)
               && _module.__default.MultisetUnion#canCall(Tclass._module.G(), _module.List.tail(_module.List.tail(x#0)));
            // ----- Hint4 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(285,5)
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(285,5)
            assert {:id "id333"} _module.List.Cons_q(x#0);
            ##xs#0_0_3_3 := $Unbox(_module.List.head(x#0)): DatatypeType;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_3_3, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), $Unbox(_module.List.head(x#0)): DatatypeType);
            assert {:id "id334"} _module.List.Cons_q(x#0);
            assert {:id "id335"} _module.List.Cons_q(_module.List.tail(x#0));
            assert {:id "id336"} _module.List.Cons_q(x#0);
            assert {:id "id337"} _module.List.Cons_q(_module.List.tail(x#0));
            ##xs#0_0_3_4 := #_module.List.Cons(_module.List.head(_module.List.tail(x#0)), 
              _module.List.tail(_module.List.tail(x#0)));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_3_4, 
              Tclass._module.List(Tclass._module.List(Tclass._module.G())), 
              $Heap);
            assume _module.__default.MultisetUnion#canCall(Tclass._module.G(), 
              #_module.List.Cons(_module.List.head(_module.List.tail(x#0)), 
                _module.List.tail(_module.List.tail(x#0))));
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), $Unbox(_module.List.head(x#0)): DatatypeType)
               && _module.__default.MultisetUnion#canCall(Tclass._module.G(), 
                #_module.List.Cons(_module.List.head(_module.List.tail(x#0)), 
                  _module.List.tail(_module.List.tail(x#0))));
            // ----- assert line4 == line5 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(285,5)
            assert {:id "id338"} {:subsumption 0} MultiSet#Equal(MultiSet#Union(MultiSet#Union(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), $Unbox(_module.List.head(x#0)): DatatypeType), 
                  _module.__default.multiset__of(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)), 
                _module.__default.MultisetUnion(Tclass._module.G(), $LS($LS($LZ)), _module.List.tail(_module.List.tail(x#0)))), 
              MultiSet#Union(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), $Unbox(_module.List.head(x#0)): DatatypeType), 
                _module.__default.MultisetUnion(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  #_module.List.Cons(_module.List.head(_module.List.tail(x#0)), 
                    _module.List.tail(_module.List.tail(x#0))))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(285,5)
            assume {:id "id320"} _module.List.Cons_q(x#0);
            ##xs#0_0_2_0 := $Unbox(_module.List.head(x#0)): DatatypeType;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_2_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), $Unbox(_module.List.head(x#0)): DatatypeType);
            assume {:id "id321"} _module.List.Cons_q(x#0);
            assume {:id "id322"} _module.List.Cons_q(_module.List.tail(x#0));
            assume {:id "id323"} _module.List.Cons_q(x#0);
            assume {:id "id324"} _module.List.Cons_q(_module.List.tail(x#0));
            ##xs#0_0_2_1 := #_module.List.Cons(_module.List.head(_module.List.tail(x#0)), 
              _module.List.tail(_module.List.tail(x#0)));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_2_1, 
              Tclass._module.List(Tclass._module.List(Tclass._module.G())), 
              $Heap);
            assume _module.__default.MultisetUnion#canCall(Tclass._module.G(), 
              #_module.List.Cons(_module.List.head(_module.List.tail(x#0)), 
                _module.List.tail(_module.List.tail(x#0))));
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), $Unbox(_module.List.head(x#0)): DatatypeType)
               && _module.__default.MultisetUnion#canCall(Tclass._module.G(), 
                #_module.List.Cons(_module.List.head(_module.List.tail(x#0)), 
                  _module.List.tail(_module.List.tail(x#0))));
            // ----- Hint5 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(285,5)
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(285,5)
            assert {:id "id325"} _module.List.Cons_q(x#0);
            ##xs#0_0_2_2 := $Unbox(_module.List.head(x#0)): DatatypeType;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_2_2, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), $Unbox(_module.List.head(x#0)): DatatypeType);
            assert {:id "id326"} _module.List.Cons_q(x#0);
            ##xs#0_0_2_3 := _module.List.tail(x#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_2_3, 
              Tclass._module.List(Tclass._module.List(Tclass._module.G())), 
              $Heap);
            assume _module.__default.MultisetUnion#canCall(Tclass._module.G(), _module.List.tail(x#0));
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), $Unbox(_module.List.head(x#0)): DatatypeType)
               && _module.__default.MultisetUnion#canCall(Tclass._module.G(), _module.List.tail(x#0));
            // ----- assert line5 == line6 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(285,5)
            assert {:id "id327"} {:subsumption 0} MultiSet#Equal(MultiSet#Union(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), $Unbox(_module.List.head(x#0)): DatatypeType), 
                _module.__default.MultisetUnion(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  #_module.List.Cons(_module.List.head(_module.List.tail(x#0)), 
                    _module.List.tail(_module.List.tail(x#0))))), 
              MultiSet#Union(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), $Unbox(_module.List.head(x#0)): DatatypeType), 
                _module.__default.MultisetUnion(Tclass._module.G(), $LS($LS($LZ)), _module.List.tail(x#0))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(285,5)
            assume {:id "id315"} _module.List.Cons_q(x#0);
            ##xs#0_0_1_0 := $Unbox(_module.List.head(x#0)): DatatypeType;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_1_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), $Unbox(_module.List.head(x#0)): DatatypeType);
            assume {:id "id316"} _module.List.Cons_q(x#0);
            ##xs#0_0_1_1 := _module.List.tail(x#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_1_1, 
              Tclass._module.List(Tclass._module.List(Tclass._module.G())), 
              $Heap);
            assume _module.__default.MultisetUnion#canCall(Tclass._module.G(), _module.List.tail(x#0));
            assume _module.__default.multiset__of#canCall(Tclass._module.G(), $Unbox(_module.List.head(x#0)): DatatypeType)
               && _module.__default.MultisetUnion#canCall(Tclass._module.G(), _module.List.tail(x#0));
            // ----- Hint6 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(285,5)
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(285,5)
            assert {:id "id317"} _module.List.Cons_q(x#0);
            assert {:id "id318"} _module.List.Cons_q(x#0);
            ##xs#0_0_1_2 := #_module.List.Cons(_module.List.head(x#0), _module.List.tail(x#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_1_2, 
              Tclass._module.List(Tclass._module.List(Tclass._module.G())), 
              $Heap);
            assume _module.__default.MultisetUnion#canCall(Tclass._module.G(), 
              #_module.List.Cons(_module.List.head(x#0), _module.List.tail(x#0)));
            assume _module.__default.MultisetUnion#canCall(Tclass._module.G(), 
              #_module.List.Cons(_module.List.head(x#0), _module.List.tail(x#0)));
            // ----- assert line6 == line7 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(285,5)
            assert {:id "id319"} {:subsumption 0} MultiSet#Equal(MultiSet#Union(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), $Unbox(_module.List.head(x#0)): DatatypeType), 
                _module.__default.MultisetUnion(Tclass._module.G(), $LS($LS($LZ)), _module.List.tail(x#0))), 
              _module.__default.MultisetUnion(Tclass._module.G(), 
                $LS($LS($LZ)), 
                #_module.List.Cons(_module.List.head(x#0), _module.List.tail(x#0))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(285,5)
            assume {:id "id312"} _module.List.Cons_q(x#0);
            assume {:id "id313"} _module.List.Cons_q(x#0);
            ##xs#0_0_0_0 := #_module.List.Cons(_module.List.head(x#0), _module.List.tail(x#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_0_0, 
              Tclass._module.List(Tclass._module.List(Tclass._module.G())), 
              $Heap);
            assume _module.__default.MultisetUnion#canCall(Tclass._module.G(), 
              #_module.List.Cons(_module.List.head(x#0), _module.List.tail(x#0)));
            assume _module.__default.MultisetUnion#canCall(Tclass._module.G(), 
              #_module.List.Cons(_module.List.head(x#0), _module.List.tail(x#0)));
            // ----- Hint7 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(285,5)
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(285,5)
            ##xs#0_0_0_1 := x#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_0_1, 
              Tclass._module.List(Tclass._module.List(Tclass._module.G())), 
              $Heap);
            assume _module.__default.MultisetUnion#canCall(Tclass._module.G(), x#0);
            assume _module.__default.MultisetUnion#canCall(Tclass._module.G(), x#0);
            // ----- assert line7 == line8 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(285,5)
            assert {:id "id314"} {:subsumption 0} MultiSet#Equal(_module.__default.MultisetUnion(Tclass._module.G(), 
                $LS($LS($LZ)), 
                #_module.List.Cons(_module.List.head(x#0), _module.List.tail(x#0))), 
              _module.__default.MultisetUnion(Tclass._module.G(), $LS($LS($LZ)), x#0));
            assume false;
        }

        assume {:id "id386"} MultiSet#Equal(_module.__default.MultisetUnion(Tclass._module.G(), $LS($LZ), _module.__default.mergePairs($LS($LZ), x#0)), 
          _module.__default.MultisetUnion(Tclass._module.G(), $LS($LZ), x#0));
    }
    else
    {
    }
}



procedure {:verboseName "perm_merge (well-formedness)"} CheckWellFormed$$_module.__default.perm__merge(xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(xs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(xs#0), 
    ys#0: DatatypeType
       where $Is(ys#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(ys#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(ys#0));
  free requires 3 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "perm_merge (call)"} Call$$_module.__default.perm__merge(xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(xs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(xs#0), 
    ys#0: DatatypeType
       where $Is(ys#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(ys#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(ys#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.merge#canCall(xs#0, ys#0)
     && _module.__default.multiset__of#canCall(Tclass._module.G(), _module.__default.merge($LS($LZ), xs#0, ys#0))
     && 
    _module.__default.multiset__of#canCall(Tclass._module.G(), xs#0)
     && _module.__default.multiset__of#canCall(Tclass._module.G(), ys#0);
  ensures {:id "id388"} MultiSet#Equal(_module.__default.multiset__of(Tclass._module.G(), 
      $LS($LS($LZ)), 
      _module.__default.merge($LS($LS($LZ)), xs#0, ys#0)), 
    MultiSet#Union(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), xs#0), 
      _module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#0)));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "perm_merge (correctness)"} Impl$$_module.__default.perm__merge(xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(xs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(xs#0), 
    ys#0: DatatypeType
       where $Is(ys#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(ys#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(ys#0))
   returns ($_reverifyPost: bool);
  free requires 3 == $FunctionContextHeight;
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.merge#canCall(xs#0, ys#0)
     && _module.__default.multiset__of#canCall(Tclass._module.G(), _module.__default.merge($LS($LZ), xs#0, ys#0))
     && 
    _module.__default.multiset__of#canCall(Tclass._module.G(), xs#0)
     && _module.__default.multiset__of#canCall(Tclass._module.G(), ys#0);
  ensures {:id "id389"} MultiSet#Equal(_module.__default.multiset__of(Tclass._module.G(), 
      $LS($LS($LZ)), 
      _module.__default.merge($LS($LS($LZ)), xs#0, ys#0)), 
    MultiSet#Union(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), xs#0), 
      _module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#0)));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "perm_merge (correctness)"} Impl$$_module.__default.perm__merge(xs#0: DatatypeType, ys#0: DatatypeType) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $initHeapForallStmt#0: Heap;

    // AddMethodImpl: perm_merge, Impl$$_module.__default.perm__merge
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume $IsA#_module.List(xs#0);
    assume $IsA#_module.List(ys#0);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#xs0#0: DatatypeType, $ih#ys0#0: DatatypeType :: 
      { MultiSet#Union(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), $ih#xs0#0), 
          _module.__default.multiset__of(Tclass._module.G(), $LS($LZ), $ih#ys0#0)) } 
        { _module.__default.merge($LS($LZ), $ih#xs0#0, $ih#ys0#0) } 
      $Is($ih#xs0#0, Tclass._module.List(Tclass._module.G()))
           && $Is($ih#ys0#0, Tclass._module.List(Tclass._module.G()))
           && Lit(true)
           && (DtRank($ih#xs0#0) < DtRank(xs#0)
             || (DtRank($ih#xs0#0) == DtRank(xs#0) && DtRank($ih#ys0#0) < DtRank(ys#0)))
         ==> MultiSet#Equal(_module.__default.multiset__of(Tclass._module.G(), 
            $LS($LZ), 
            _module.__default.merge($LS($LZ), $ih#xs0#0, $ih#ys0#0)), 
          MultiSet#Union(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), $ih#xs0#0), 
            _module.__default.multiset__of(Tclass._module.G(), $LS($LZ), $ih#ys0#0))));
    $_reverifyPost := false;
}



procedure {:verboseName "sorted_sort (well-formedness)"} CheckWellFormed$$_module.__default.sorted__sort(xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(xs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(xs#0));
  free requires 7 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "sorted_sort (call)"} Call$$_module.__default.sorted__sort(xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(xs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(xs#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.sort#canCall(xs#0)
     && _module.__default.sorted#canCall(_module.__default.sort(xs#0));
  free ensures {:id "id391"} _module.__default.sorted#canCall(_module.__default.sort(xs#0))
     && 
    _module.__default.sorted($LS($LZ), _module.__default.sort(xs#0))
     && (if _module.List.Nil_q(_module.__default.sort(xs#0))
       then true
       else (var ys#1 := _module.List.tail(_module.__default.sort(xs#0)); 
        (var a#1 := _module.List.head(_module.__default.sort(xs#0)); 
          (forall y#1: Box :: 
              { _module.__default.Below(a#1, y#1) } 
                { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#1), y#1) } 
              $IsBox(y#1, Tclass._module.G())
                 ==> 
                MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#1), y#1)
                   > 0
                 ==> _module.__default.Below(a#1, y#1))
             && _module.__default.sorted($LS($LZ), ys#1))));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "sorted_sort (correctness)"} Impl$$_module.__default.sorted__sort(xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(xs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(xs#0))
   returns ($_reverifyPost: bool);
  free requires 7 == $FunctionContextHeight;
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.sort#canCall(xs#0)
     && _module.__default.sorted#canCall(_module.__default.sort(xs#0));
  ensures {:id "id392"} _module.__default.sorted#canCall(_module.__default.sort(xs#0))
     ==> _module.__default.sorted($LS($LZ), _module.__default.sort(xs#0))
       || (_module.List.Nil_q(_module.__default.sort(xs#0)) ==> Lit(true));
  ensures {:id "id393"} _module.__default.sorted#canCall(_module.__default.sort(xs#0))
     ==> _module.__default.sorted($LS($LZ), _module.__default.sort(xs#0))
       || (!_module.List.Nil_q(_module.__default.sort(xs#0))
         ==> (var ys#2 := _module.List.tail(_module.__default.sort(xs#0)); 
          (var a#2 := _module.List.head(_module.__default.sort(xs#0)); 
            (forall y#2: Box :: 
              { _module.__default.Below(a#2, y#2) } 
                { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#2), y#2) } 
              $IsBox(y#2, Tclass._module.G())
                 ==> 
                MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#2), y#2)
                   > 0
                 ==> _module.__default.Below(a#2, y#2)))));
  ensures {:id "id394"} _module.__default.sorted#canCall(_module.__default.sort(xs#0))
     ==> _module.__default.sorted($LS($LZ), _module.__default.sort(xs#0))
       || (!_module.List.Nil_q(_module.__default.sort(xs#0))
         ==> (var ys#2 := _module.List.tail(_module.__default.sort(xs#0)); 
          (var a#2 := _module.List.head(_module.__default.sort(xs#0)); 
            _module.__default.sorted($LS($LS($LZ)), ys#2))));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "sorted_sort (correctness)"} Impl$$_module.__default.sorted__sort(xs#0: DatatypeType) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var xs##0: DatatypeType;
  var x##0: DatatypeType;
  var ##xs#2: DatatypeType;

    // AddMethodImpl: sorted_sort, Impl$$_module.__default.sorted__sort
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(311,19)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    xs##0 := xs#0;
    call {:id "id395"} Call$$_module.__default.sorted__sequences(xs##0);
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(312,18)
    // TrCallStmt: Before ProcessCallStmt
    ##xs#2 := xs#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##xs#2, Tclass._module.List(Tclass._module.G()), $Heap);
    assume _module.__default.sequences#canCall(xs#0);
    assume _module.__default.sequences#canCall(xs#0);
    // ProcessCallStmt: CheckSubrange
    x##0 := _module.__default.sequences($LS($LZ), xs#0);
    call {:id "id396"} Call$$_module.__default.sorted__mergeAll(x##0);
    // TrCallStmt: After ProcessCallStmt
}



// function declaration for _module._default.AllSorted
function _module.__default.AllSorted($ly: LayerType, x#0: DatatypeType) : bool
uses {
// definition axiom for _module.__default.AllSorted (revealed)
axiom {:id "id397"} 3 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, x#0: DatatypeType :: 
    { _module.__default.AllSorted($LS($ly), x#0) } 
    _module.__default.AllSorted#canCall(x#0)
         || (3 < $FunctionContextHeight
           && $Is(x#0, Tclass._module.List(Tclass._module.List(Tclass._module.G()))))
       ==> (!_module.List.Nil_q(x#0)
           ==> (var y#1 := _module.List.tail(x#0); 
            (var xs#1 := $Unbox(_module.List.head(x#0)): DatatypeType; 
              _module.__default.sorted#canCall(xs#1)
                 && (_module.__default.sorted($LS($LZ), xs#1)
                   ==> _module.__default.AllSorted#canCall(y#1)))))
         && _module.__default.AllSorted($LS($ly), x#0)
           == (if _module.List.Nil_q(x#0)
             then true
             else (var y#0 := _module.List.tail(x#0); 
              (var xs#0 := $Unbox(_module.List.head(x#0)): DatatypeType; 
                _module.__default.sorted($LS($LZ), xs#0)
                   && _module.__default.AllSorted($ly, y#0)))));
// definition axiom for _module.__default.AllSorted for all literals (revealed)
axiom {:id "id398"} 3 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, x#0: DatatypeType :: 
    {:weight 3} { _module.__default.AllSorted($LS($ly), Lit(x#0)) } 
    _module.__default.AllSorted#canCall(Lit(x#0))
         || (3 < $FunctionContextHeight
           && $Is(x#0, Tclass._module.List(Tclass._module.List(Tclass._module.G()))))
       ==> (!Lit(_module.List.Nil_q(Lit(x#0)))
           ==> (var y#3 := Lit(_module.List.tail(Lit(x#0))); 
            (var xs#3 := Lit($Unbox(_module.List.head(Lit(x#0))): DatatypeType); 
              _module.__default.sorted#canCall(xs#3)
                 && (_module.__default.sorted($LS($LZ), xs#3)
                   ==> _module.__default.AllSorted#canCall(y#3)))))
         && _module.__default.AllSorted($LS($ly), Lit(x#0))
           == (if _module.List.Nil_q(Lit(x#0))
             then true
             else (var y#2 := Lit(_module.List.tail(Lit(x#0))); 
              (var xs#2 := Lit($Unbox(_module.List.head(Lit(x#0))): DatatypeType); 
                Lit(_module.__default.sorted($LS($LZ), xs#2)
                     && _module.__default.AllSorted($LS($ly), y#2))))));
}

function _module.__default.AllSorted#canCall(x#0: DatatypeType) : bool;

// layer synonym axiom
axiom (forall $ly: LayerType, x#0: DatatypeType :: 
  { _module.__default.AllSorted($LS($ly), x#0) } 
  _module.__default.AllSorted($LS($ly), x#0)
     == _module.__default.AllSorted($ly, x#0));

// fuel synonym axiom
axiom (forall $ly: LayerType, x#0: DatatypeType :: 
  { _module.__default.AllSorted(AsFuelBottom($ly), x#0) } 
  _module.__default.AllSorted($ly, x#0) == _module.__default.AllSorted($LZ, x#0));

function _module.__default.AllSorted#requires(LayerType, DatatypeType) : bool;

// #requires axiom for _module.__default.AllSorted
axiom (forall $ly: LayerType, x#0: DatatypeType :: 
  { _module.__default.AllSorted#requires($ly, x#0) } 
  $Is(x#0, Tclass._module.List(Tclass._module.List(Tclass._module.G())))
     ==> _module.__default.AllSorted#requires($ly, x#0) == true);

procedure {:verboseName "AllSorted (well-formedness)"} CheckWellformed$$_module.__default.AllSorted(x#0: DatatypeType
       where $Is(x#0, Tclass._module.List(Tclass._module.List(Tclass._module.G()))));
  free requires 3 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "AllSorted (well-formedness)"} CheckWellformed$$_module.__default.AllSorted(x#0: DatatypeType)
{
  var $_ReadsFrame: [ref,Field]bool;
  var _mcc#0#0: DatatypeType;
  var _mcc#1#0: DatatypeType;
  var y#Z#0: DatatypeType;
  var let#0#0#0: DatatypeType;
  var xs#Z#0: DatatypeType;
  var let#1#0#0: DatatypeType;
  var ##xs#0: DatatypeType;
  var ##x#0: DatatypeType;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        if (x#0 == #_module.List.Nil())
        {
            assume {:id "id405"} _module.__default.AllSorted($LS($LZ), x#0) == Lit(true);
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(_module.__default.AllSorted($LS($LZ), x#0), TBool);
            return;
        }
        else if (x#0 == #_module.List.Cons($Box(_mcc#0#0), _mcc#1#0))
        {
            assume $Is(_mcc#0#0, Tclass._module.List(Tclass._module.G()));
            assume $Is(_mcc#1#0, Tclass._module.List(Tclass._module.List(Tclass._module.G())));
            havoc y#Z#0;
            assume {:id "id399"} let#0#0#0 == _mcc#1#0;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(let#0#0#0, Tclass._module.List(Tclass._module.List(Tclass._module.G())));
            assume {:id "id400"} y#Z#0 == let#0#0#0;
            havoc xs#Z#0;
            assume {:id "id401"} let#1#0#0 == _mcc#0#0;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(let#1#0#0, Tclass._module.List(Tclass._module.G()));
            assume {:id "id402"} xs#Z#0 == let#1#0#0;
            ##xs#0 := xs#Z#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.sorted#canCall(xs#Z#0);
            if (_module.__default.sorted($LS($LZ), xs#Z#0))
            {
                ##x#0 := y#Z#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##x#0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
                assert {:id "id403"} DtRank(##x#0) < DtRank(x#0);
                assume _module.__default.AllSorted#canCall(y#Z#0);
            }

            assume {:id "id404"} _module.__default.AllSorted($LS($LZ), x#0)
               == (_module.__default.sorted($LS($LZ), xs#Z#0)
                 && _module.__default.AllSorted($LS($LZ), y#Z#0));
            assume _module.__default.sorted#canCall(xs#Z#0)
               && (_module.__default.sorted($LS($LZ), xs#Z#0)
                 ==> _module.__default.AllSorted#canCall(y#Z#0));
            // CheckWellformedWithResult: any expression
            assume $Is(_module.__default.AllSorted($LS($LZ), x#0), TBool);
            return;
        }
        else
        {
            assume false;
        }

        assume false;
    }
}



procedure {:verboseName "sorted_sequences (well-formedness)"} CheckWellFormed$$_module.__default.sorted__sequences(xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(xs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(xs#0));
  free requires 6 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "sorted_sequences (call)"} Call$$_module.__default.sorted__sequences(xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(xs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(xs#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.sequences#canCall(xs#0)
     && _module.__default.AllSorted#canCall(_module.__default.sequences($LS($LZ), xs#0));
  free ensures {:id "id407"} _module.__default.AllSorted#canCall(_module.__default.sequences($LS($LZ), xs#0))
     && 
    _module.__default.AllSorted($LS($LZ), _module.__default.sequences($LS($LZ), xs#0))
     && (if _module.List.Nil_q(_module.__default.sequences($LS($LZ), xs#0))
       then true
       else (var y#3 := _module.List.tail(_module.__default.sequences($LS($LZ), xs#0)); 
        (var xs#2 := $Unbox(_module.List.head(_module.__default.sequences($LS($LZ), xs#0))): DatatypeType; 
          _module.__default.sorted($LS($LZ), xs#2)
             && _module.__default.AllSorted($LS($LZ), y#3))));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "sorted_sequences (correctness)"} Impl$$_module.__default.sorted__sequences(xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(xs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(xs#0))
   returns ($_reverifyPost: bool);
  free requires 6 == $FunctionContextHeight;
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.sequences#canCall(xs#0)
     && _module.__default.AllSorted#canCall(_module.__default.sequences($LS($LZ), xs#0));
  ensures {:id "id408"} _module.__default.AllSorted#canCall(_module.__default.sequences($LS($LZ), xs#0))
     ==> _module.__default.AllSorted($LS($LZ), _module.__default.sequences($LS($LZ), xs#0))
       || (_module.List.Nil_q(_module.__default.sequences($LS($LZ), xs#0)) ==> Lit(true));
  ensures {:id "id409"} _module.__default.AllSorted#canCall(_module.__default.sequences($LS($LZ), xs#0))
     ==> _module.__default.AllSorted($LS($LZ), _module.__default.sequences($LS($LZ), xs#0))
       || (!_module.List.Nil_q(_module.__default.sequences($LS($LZ), xs#0))
         ==> (var y#6 := _module.List.tail(_module.__default.sequences($LS($LS($LZ)), xs#0)); 
          (var xs#3 := $Unbox(_module.List.head(_module.__default.sequences($LS($LS($LZ)), xs#0))): DatatypeType; 
            _module.__default.sorted#canCall(xs#3)
               ==> _module.__default.sorted($LS($LZ), xs#3)
                 || (_module.List.Nil_q(xs#3) ==> Lit(true)))));
  ensures {:id "id410"} _module.__default.AllSorted#canCall(_module.__default.sequences($LS($LZ), xs#0))
     ==> _module.__default.AllSorted($LS($LZ), _module.__default.sequences($LS($LZ), xs#0))
       || (!_module.List.Nil_q(_module.__default.sequences($LS($LZ), xs#0))
         ==> (var y#6 := _module.List.tail(_module.__default.sequences($LS($LS($LZ)), xs#0)); 
          (var xs#3 := $Unbox(_module.List.head(_module.__default.sequences($LS($LS($LZ)), xs#0))): DatatypeType; 
            _module.__default.sorted#canCall(xs#3)
               ==> _module.__default.sorted($LS($LZ), xs#3)
                 || (!_module.List.Nil_q(xs#3)
                   ==> (var ys#2 := _module.List.tail(xs#3); 
                    (var a#2 := _module.List.head(xs#3); 
                      (forall y#4: Box :: 
                        { _module.__default.Below(a#2, y#4) } 
                          { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#2), y#4) } 
                        $IsBox(y#4, Tclass._module.G())
                           ==> 
                          MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#2), y#4)
                             > 0
                           ==> _module.__default.Below(a#2, y#4))))))));
  ensures {:id "id411"} _module.__default.AllSorted#canCall(_module.__default.sequences($LS($LZ), xs#0))
     ==> _module.__default.AllSorted($LS($LZ), _module.__default.sequences($LS($LZ), xs#0))
       || (!_module.List.Nil_q(_module.__default.sequences($LS($LZ), xs#0))
         ==> (var y#6 := _module.List.tail(_module.__default.sequences($LS($LS($LZ)), xs#0)); 
          (var xs#3 := $Unbox(_module.List.head(_module.__default.sequences($LS($LS($LZ)), xs#0))): DatatypeType; 
            _module.__default.sorted#canCall(xs#3)
               ==> _module.__default.sorted($LS($LZ), xs#3)
                 || (!_module.List.Nil_q(xs#3)
                   ==> (var ys#2 := _module.List.tail(xs#3); 
                    (var a#2 := _module.List.head(xs#3); 
                      _module.__default.sorted($LS($LS($LZ)), ys#2)))))));
  ensures {:id "id412"} _module.__default.AllSorted#canCall(_module.__default.sequences($LS($LZ), xs#0))
     ==> _module.__default.AllSorted($LS($LZ), _module.__default.sequences($LS($LZ), xs#0))
       || (!_module.List.Nil_q(_module.__default.sequences($LS($LZ), xs#0))
         ==> (var y#6 := _module.List.tail(_module.__default.sequences($LS($LS($LZ)), xs#0)); 
          (var xs#3 := $Unbox(_module.List.head(_module.__default.sequences($LS($LS($LZ)), xs#0))): DatatypeType; 
            _module.__default.AllSorted($LS($LS($LZ)), y#6))));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "sorted_sequences (correctness)"} Impl$$_module.__default.sorted__sequences(xs#0: DatatypeType) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $initHeapForallStmt#0: Heap;
  var _mcc#0#0_0: Box;
  var _mcc#1#0_0: DatatypeType;
  var ys#0_0: DatatypeType;
  var let#0_0#0#0: DatatypeType;
  var a#0_0: Box;
  var let#0_1#0#0: Box;
  var _mcc#2#0_0_0: Box;
  var _mcc#3#0_0_0: DatatypeType;
  var zs#0_0_0: DatatypeType;
  var let#0_0_0#0#0: DatatypeType;
  var b#0_0_0: Box;
  var let#0_0_1#0#0: Box;
  var ##a#0_0_0: Box;
  var ##b#0_0_0: Box;
  var a##0_0_0_0: Box;
  var xs##0_0_0_0: DatatypeType;
  var ys##0_0_0_0: DatatypeType;
  var a##0_0_1_0: Box;
  var xs##0_0_1_0: DatatypeType;
  var ys##0_0_1_0: DatatypeType;

    // AddMethodImpl: sorted_sequences, Impl$$_module.__default.sorted__sequences
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume $IsA#_module.List(xs#0);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#xs0#0: DatatypeType :: 
      { _module.__default.sequences($LS($LZ), $ih#xs0#0) } 
      $Is($ih#xs0#0, Tclass._module.List(Tclass._module.G()))
           && Lit(true)
           && (DtRank($ih#xs0#0) < DtRank(xs#0)
             || (DtRank($ih#xs0#0) == DtRank(xs#0) && 0 <= LitInt(0) && LitInt(0) < LitInt(0)))
         ==> _module.__default.AllSorted($LS($LZ), _module.__default.sequences($LS($LZ), $ih#xs0#0)));
    $_reverifyPost := false;
    assume true;
    havoc _mcc#0#0_0, _mcc#1#0_0;
    if (xs#0 == #_module.List.Nil())
    {
    }
    else if (xs#0 == #_module.List.Cons(_mcc#0#0_0, _mcc#1#0_0))
    {
        assume $IsBox(_mcc#0#0_0, Tclass._module.G());
        assume $Is(_mcc#1#0_0, Tclass._module.List(Tclass._module.G()));
        havoc ys#0_0;
        assume $Is(ys#0_0, Tclass._module.List(Tclass._module.G()))
           && $IsAlloc(ys#0_0, Tclass._module.List(Tclass._module.G()), $Heap);
        assume {:id "id413"} let#0_0#0#0 == _mcc#1#0_0;
        assume true;
        assume true;
        // CheckWellformedWithResult: any expression
        assume $Is(let#0_0#0#0, Tclass._module.List(Tclass._module.G()));
        assume {:id "id414"} ys#0_0 == let#0_0#0#0;
        havoc a#0_0;
        assume $IsBox(a#0_0, Tclass._module.G())
           && $IsAllocBox(a#0_0, Tclass._module.G(), $Heap);
        assume {:id "id415"} let#0_1#0#0 == _mcc#0#0_0;
        assume true;
        assume true;
        // CheckWellformedWithResult: any expression
        assume $IsBox(let#0_1#0#0, Tclass._module.G());
        assume {:id "id416"} a#0_0 == let#0_1#0#0;
        assume true;
        havoc _mcc#2#0_0_0, _mcc#3#0_0_0;
        if (ys#0_0 == #_module.List.Nil())
        {
        }
        else if (ys#0_0 == #_module.List.Cons(_mcc#2#0_0_0, _mcc#3#0_0_0))
        {
            assume $IsBox(_mcc#2#0_0_0, Tclass._module.G());
            assume $Is(_mcc#3#0_0_0, Tclass._module.List(Tclass._module.G()));
            havoc zs#0_0_0;
            assume $Is(zs#0_0_0, Tclass._module.List(Tclass._module.G()))
               && $IsAlloc(zs#0_0_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume {:id "id417"} let#0_0_0#0#0 == _mcc#3#0_0_0;
            assume true;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(let#0_0_0#0#0, Tclass._module.List(Tclass._module.G()));
            assume {:id "id418"} zs#0_0_0 == let#0_0_0#0#0;
            havoc b#0_0_0;
            assume $IsBox(b#0_0_0, Tclass._module.G())
               && $IsAllocBox(b#0_0_0, Tclass._module.G(), $Heap);
            assume {:id "id419"} let#0_0_1#0#0 == _mcc#2#0_0_0;
            assume true;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $IsBox(let#0_0_1#0#0, Tclass._module.G());
            assume {:id "id420"} b#0_0_0 == let#0_0_1#0#0;
            // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(332,11)
            ##a#0_0_0 := a#0_0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##a#0_0_0, Tclass._module.G(), $Heap);
            ##b#0_0_0 := b#0_0_0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##b#0_0_0, Tclass._module.G(), $Heap);
            assume _module.__default.Below#canCall(a#0_0, b#0_0_0);
            assume _module.__default.Below#canCall(a#0_0, b#0_0_0);
            if (!_module.__default.Below(a#0_0, b#0_0_0))
            {
                // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(333,30)
                // TrCallStmt: Before ProcessCallStmt
                assume true;
                // ProcessCallStmt: CheckSubrange
                a##0_0_0_0 := b#0_0_0;
                assume true;
                // ProcessCallStmt: CheckSubrange
                xs##0_0_0_0 := #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()));
                assume true;
                // ProcessCallStmt: CheckSubrange
                ys##0_0_0_0 := zs#0_0_0;
                assert {:id "id421"} DtRank(ys##0_0_0_0) < DtRank(xs#0);
                call {:id "id422"} Call$$_module.__default.sorted__descending(a##0_0_0_0, xs##0_0_0_0, ys##0_0_0_0);
                // TrCallStmt: After ProcessCallStmt
            }
            else
            {
                // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(335,29)
                // TrCallStmt: Before ProcessCallStmt
                assume true;
                // ProcessCallStmt: CheckSubrange
                a##0_0_1_0 := b#0_0_0;
                assume true;
                // ProcessCallStmt: CheckSubrange
                xs##0_0_1_0 := #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()));
                assume true;
                // ProcessCallStmt: CheckSubrange
                ys##0_0_1_0 := zs#0_0_0;
                assert {:id "id423"} DtRank(ys##0_0_1_0) < DtRank(xs#0);
                call {:id "id424"} Call$$_module.__default.sorted__ascending(a##0_0_1_0, xs##0_0_1_0, ys##0_0_1_0);
                // TrCallStmt: After ProcessCallStmt
            }
        }
        else
        {
            assume false;
        }
    }
    else
    {
        assume false;
    }
}



procedure {:verboseName "sorted_descending (well-formedness)"} CheckWellFormed$$_module.__default.sorted__descending(a#0: Box
       where $IsBox(a#0, Tclass._module.G()) && $IsAllocBox(a#0, Tclass._module.G(), $Heap), 
    xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(xs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(xs#0), 
    ys#0: DatatypeType
       where $Is(ys#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(ys#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(ys#0));
  free requires 6 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "sorted_descending (call)"} Call$$_module.__default.sorted__descending(a#0: Box
       where $IsBox(a#0, Tclass._module.G()) && $IsAllocBox(a#0, Tclass._module.G(), $Heap), 
    xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(xs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(xs#0), 
    ys#0: DatatypeType
       where $Is(ys#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(ys#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(ys#0));
  // user-defined preconditions
  requires {:id "id428"} (forall y#1: Box :: 
    { _module.__default.Below(a#0, y#1) } 
      { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), xs#0), y#1) } 
    $IsBox(y#1, Tclass._module.G())
       ==> 
      MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), xs#0), y#1)
         > 0
       ==> _module.__default.Below(a#0, y#1));
  requires {:id "id429"} _module.__default.sorted#canCall(xs#0)
     ==> _module.__default.sorted($LS($LZ), xs#0)
       || (_module.List.Nil_q(xs#0) ==> Lit(true));
  requires {:id "id430"} _module.__default.sorted#canCall(xs#0)
     ==> _module.__default.sorted($LS($LZ), xs#0)
       || (!_module.List.Nil_q(xs#0)
         ==> (var ys#1 := _module.List.tail(xs#0); 
          (var a#1 := _module.List.head(xs#0); 
            (forall y#2: Box :: 
              { _module.__default.Below(a#1, y#2) } 
                { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#1), y#2) } 
              $IsBox(y#2, Tclass._module.G())
                 ==> 
                MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#1), y#2)
                   > 0
                 ==> _module.__default.Below(a#1, y#2)))));
  requires {:id "id431"} _module.__default.sorted#canCall(xs#0)
     ==> _module.__default.sorted($LS($LZ), xs#0)
       || (!_module.List.Nil_q(xs#0)
         ==> (var ys#1 := _module.List.tail(xs#0); 
          (var a#1 := _module.List.head(xs#0); 
            _module.__default.sorted($LS($LS($LZ)), ys#1))));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.descending#canCall(a#0, xs#0, ys#0)
     && _module.__default.AllSorted#canCall(_module.__default.descending($LS($LZ), a#0, xs#0, ys#0));
  free ensures {:id "id432"} _module.__default.AllSorted#canCall(_module.__default.descending($LS($LZ), a#0, xs#0, ys#0))
     && 
    _module.__default.AllSorted($LS($LZ), _module.__default.descending($LS($LZ), a#0, xs#0, ys#0))
     && (if _module.List.Nil_q(_module.__default.descending($LS($LZ), a#0, xs#0, ys#0))
       then true
       else (var y#7 := _module.List.tail(_module.__default.descending($LS($LZ), a#0, xs#0, ys#0)); 
        (var xs#2 := $Unbox(_module.List.head(_module.__default.descending($LS($LZ), a#0, xs#0, ys#0))): DatatypeType; 
          _module.__default.sorted($LS($LZ), xs#2)
             && _module.__default.AllSorted($LS($LZ), y#7))));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "sorted_descending (correctness)"} Impl$$_module.__default.sorted__descending(a#0: Box
       where $IsBox(a#0, Tclass._module.G()) && $IsAllocBox(a#0, Tclass._module.G(), $Heap), 
    xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(xs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(xs#0), 
    ys#0: DatatypeType
       where $Is(ys#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(ys#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(ys#0))
   returns ($_reverifyPost: bool);
  free requires 6 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id433"} (forall y#1: Box :: 
    { _module.__default.Below(a#0, y#1) } 
      { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), xs#0), y#1) } 
    $IsBox(y#1, Tclass._module.G())
       ==> 
      MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), xs#0), y#1)
         > 0
       ==> _module.__default.Below(a#0, y#1));
  free requires {:id "id434"} _module.__default.sorted#canCall(xs#0)
     && 
    _module.__default.sorted($LS($LZ), xs#0)
     && (if _module.List.Nil_q(xs#0)
       then true
       else (var ys#6 := _module.List.tail(xs#0); 
        (var a#6 := _module.List.head(xs#0); 
          (forall y#9: Box :: 
              { _module.__default.Below(a#6, y#9) } 
                { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#6), y#9) } 
              $IsBox(y#9, Tclass._module.G())
                 ==> 
                MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#6), y#9)
                   > 0
                 ==> _module.__default.Below(a#6, y#9))
             && _module.__default.sorted($LS($LZ), ys#6))));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.descending#canCall(a#0, xs#0, ys#0)
     && _module.__default.AllSorted#canCall(_module.__default.descending($LS($LZ), a#0, xs#0, ys#0));
  ensures {:id "id435"} _module.__default.AllSorted#canCall(_module.__default.descending($LS($LZ), a#0, xs#0, ys#0))
     ==> _module.__default.AllSorted($LS($LZ), _module.__default.descending($LS($LZ), a#0, xs#0, ys#0))
       || (_module.List.Nil_q(_module.__default.descending($LS($LZ), a#0, xs#0, ys#0))
         ==> Lit(true));
  ensures {:id "id436"} _module.__default.AllSorted#canCall(_module.__default.descending($LS($LZ), a#0, xs#0, ys#0))
     ==> _module.__default.AllSorted($LS($LZ), _module.__default.descending($LS($LZ), a#0, xs#0, ys#0))
       || (!_module.List.Nil_q(_module.__default.descending($LS($LZ), a#0, xs#0, ys#0))
         ==> (var y#12 := _module.List.tail(_module.__default.descending($LS($LS($LZ)), a#0, xs#0, ys#0)); 
          (var xs#3 := $Unbox(_module.List.head(_module.__default.descending($LS($LS($LZ)), a#0, xs#0, ys#0))): DatatypeType; 
            _module.__default.sorted#canCall(xs#3)
               ==> _module.__default.sorted($LS($LZ), xs#3)
                 || (_module.List.Nil_q(xs#3) ==> Lit(true)))));
  ensures {:id "id437"} _module.__default.AllSorted#canCall(_module.__default.descending($LS($LZ), a#0, xs#0, ys#0))
     ==> _module.__default.AllSorted($LS($LZ), _module.__default.descending($LS($LZ), a#0, xs#0, ys#0))
       || (!_module.List.Nil_q(_module.__default.descending($LS($LZ), a#0, xs#0, ys#0))
         ==> (var y#12 := _module.List.tail(_module.__default.descending($LS($LS($LZ)), a#0, xs#0, ys#0)); 
          (var xs#3 := $Unbox(_module.List.head(_module.__default.descending($LS($LS($LZ)), a#0, xs#0, ys#0))): DatatypeType; 
            _module.__default.sorted#canCall(xs#3)
               ==> _module.__default.sorted($LS($LZ), xs#3)
                 || (!_module.List.Nil_q(xs#3)
                   ==> (var ys#7 := _module.List.tail(xs#3); 
                    (var a#7 := _module.List.head(xs#3); 
                      (forall y#10: Box :: 
                        { _module.__default.Below(a#7, y#10) } 
                          { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#7), y#10) } 
                        $IsBox(y#10, Tclass._module.G())
                           ==> 
                          MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#7), y#10)
                             > 0
                           ==> _module.__default.Below(a#7, y#10))))))));
  ensures {:id "id438"} _module.__default.AllSorted#canCall(_module.__default.descending($LS($LZ), a#0, xs#0, ys#0))
     ==> _module.__default.AllSorted($LS($LZ), _module.__default.descending($LS($LZ), a#0, xs#0, ys#0))
       || (!_module.List.Nil_q(_module.__default.descending($LS($LZ), a#0, xs#0, ys#0))
         ==> (var y#12 := _module.List.tail(_module.__default.descending($LS($LS($LZ)), a#0, xs#0, ys#0)); 
          (var xs#3 := $Unbox(_module.List.head(_module.__default.descending($LS($LS($LZ)), a#0, xs#0, ys#0))): DatatypeType; 
            _module.__default.sorted#canCall(xs#3)
               ==> _module.__default.sorted($LS($LZ), xs#3)
                 || (!_module.List.Nil_q(xs#3)
                   ==> (var ys#7 := _module.List.tail(xs#3); 
                    (var a#7 := _module.List.head(xs#3); 
                      _module.__default.sorted($LS($LS($LZ)), ys#7)))))));
  ensures {:id "id439"} _module.__default.AllSorted#canCall(_module.__default.descending($LS($LZ), a#0, xs#0, ys#0))
     ==> _module.__default.AllSorted($LS($LZ), _module.__default.descending($LS($LZ), a#0, xs#0, ys#0))
       || (!_module.List.Nil_q(_module.__default.descending($LS($LZ), a#0, xs#0, ys#0))
         ==> (var y#12 := _module.List.tail(_module.__default.descending($LS($LS($LZ)), a#0, xs#0, ys#0)); 
          (var xs#3 := $Unbox(_module.List.head(_module.__default.descending($LS($LS($LZ)), a#0, xs#0, ys#0))): DatatypeType; 
            _module.__default.AllSorted($LS($LS($LZ)), y#12))));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "sorted_descending (correctness)"} Impl$$_module.__default.sorted__descending(a#0: Box, xs#0: DatatypeType, ys#0: DatatypeType) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $initHeapForallStmt#0: Heap;
  var ##a#2: Box;
  var ##b#1: Box;
  var a##0_0: Box;
  var xs##0_0: DatatypeType;
  var ys##0_0: DatatypeType;
  var ##xs#1_0_0_0: DatatypeType;
  var ##xs#1_0_1_0: DatatypeType;
  var xs##1_0_1_0: DatatypeType;
  var ##xs#1_0_1_1: DatatypeType;
  var ##x#1_0_1_0: DatatypeType;
  var ##xs#1_0_1_2: DatatypeType;
  var ##xs#1_0_2_0: DatatypeType;
  var ##x#1_0_2_0: DatatypeType;
  var ##xs#1_0_2_1: DatatypeType;
  var ##x#1_0_2_1: DatatypeType;
  var ##xs#1_0_2_2: DatatypeType;

    // AddMethodImpl: sorted_descending, Impl$$_module.__default.sorted__descending
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume $IsA#_module.List(xs#0);
    assume $IsA#_module.List(ys#0);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#xs0#0: DatatypeType, $ih#ys0#0: DatatypeType :: 
      { _module.__default.descending($LS($LZ), a#0, $ih#xs0#0, $ih#ys0#0) } 
      $Is($ih#xs0#0, Tclass._module.List(Tclass._module.G()))
           && $Is($ih#ys0#0, Tclass._module.List(Tclass._module.G()))
           && 
          (forall y#14: Box :: 
            { _module.__default.Below(a#0, y#14) } 
              { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), $ih#xs0#0), y#14) } 
            $IsBox(y#14, Tclass._module.G())
               ==> 
              MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), $ih#xs0#0), y#14)
                 > 0
               ==> _module.__default.Below(a#0, y#14))
           && _module.__default.sorted($LS($LZ), $ih#xs0#0)
           && DtRank($ih#ys0#0) < DtRank(ys#0)
         ==> _module.__default.AllSorted($LS($LZ), _module.__default.descending($LS($LZ), a#0, $ih#xs0#0, $ih#ys0#0)));
    $_reverifyPost := false;
    // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(346,3)
    if (_module.List.Cons_q(ys#0))
    {
        ##a#2 := a#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##a#2, Tclass._module.G(), $Heap);
        assert {:id "id440"} _module.List.Cons_q(ys#0);
        ##b#1 := _module.List.head(ys#0);
        // assume allocatedness for argument to function
        assume $IsAllocBox(##b#1, Tclass._module.G(), $Heap);
        assume _module.__default.Below#canCall(a#0, _module.List.head(ys#0));
    }

    assume _module.List.Cons_q(ys#0)
       ==> _module.__default.Below#canCall(a#0, _module.List.head(ys#0));
    if (_module.List.Cons_q(ys#0)
       && !_module.__default.Below(a#0, _module.List.head(ys#0)))
    {
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(347,22)
        // TrCallStmt: Before ProcessCallStmt
        assert {:id "id441"} _module.List.Cons_q(ys#0);
        assume true;
        // ProcessCallStmt: CheckSubrange
        a##0_0 := _module.List.head(ys#0);
        assume true;
        // ProcessCallStmt: CheckSubrange
        xs##0_0 := #_module.List.Cons(a#0, xs#0);
        assert {:id "id442"} _module.List.Cons_q(ys#0);
        assume true;
        // ProcessCallStmt: CheckSubrange
        ys##0_0 := _module.List.tail(ys#0);
        assert {:id "id443"} DtRank(ys##0_0) < DtRank(ys#0);
        call {:id "id444"} Call$$_module.__default.sorted__descending(a##0_0, xs##0_0, ys##0_0);
        // TrCallStmt: After ProcessCallStmt
    }
    else
    {
        // ----- calc statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(349,5)
        // Assume Fuel Constant
        if (*)
        {
            // ----- assert wf[initial] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(349,5)
            assume true;
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(349,5)
            ##xs#1_0_2_0 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_2_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.sorted#canCall(#_module.List.Cons(a#0, xs#0));
            if (_module.__default.sorted($LS($LZ), #_module.List.Cons(a#0, xs#0)))
            {
                ##xs#1_0_2_1 := ys#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##xs#1_0_2_1, Tclass._module.List(Tclass._module.G()), $Heap);
                assume _module.__default.sequences#canCall(ys#0);
                ##x#1_0_2_0 := _module.__default.sequences($LS($LZ), ys#0);
                // assume allocatedness for argument to function
                assume $IsAlloc(##x#1_0_2_0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
                assume _module.__default.AllSorted#canCall(_module.__default.sequences($LS($LZ), ys#0));
            }

            assume _module.__default.sorted#canCall(#_module.List.Cons(a#0, xs#0))
               && (_module.__default.sorted($LS($LZ), #_module.List.Cons(a#0, xs#0))
                 ==> _module.__default.sequences#canCall(ys#0)
                   && _module.__default.AllSorted#canCall(_module.__default.sequences($LS($LZ), ys#0)));
            // ----- assume lhs ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(349,5)
            assume {:id "id460"} _module.__default.sorted($LS($LZ), #_module.List.Cons(a#0, xs#0))
               && _module.__default.AllSorted($LS($LZ), _module.__default.sequences($LS($LZ), ys#0));
            // ----- Hint0 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(349,5)
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(349,5)
            ##xs#1_0_2_2 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_2_2, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.sequences#canCall(ys#0);
            ##x#1_0_2_1 := #_module.List.Cons($Box(#_module.List.Cons(a#0, xs#0)), _module.__default.sequences($LS($LZ), ys#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#1_0_2_1, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.AllSorted#canCall(#_module.List.Cons($Box(#_module.List.Cons(a#0, xs#0)), _module.__default.sequences($LS($LZ), ys#0)));
            assume _module.__default.sequences#canCall(ys#0)
               && _module.__default.AllSorted#canCall(#_module.List.Cons($Box(#_module.List.Cons(a#0, xs#0)), _module.__default.sequences($LS($LZ), ys#0)));
            // ----- assert line0 <== line1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(349,5)
            assert {:id "id461"} {:subsumption 0} _module.__default.sorted($LS($LZ), #_module.List.Cons(a#0, xs#0))
                 && _module.__default.AllSorted($LS($LZ), _module.__default.sequences($LS($LZ), ys#0))
               ==> 
              _module.__default.AllSorted#canCall(#_module.List.Cons($Box(#_module.List.Cons(a#0, xs#0)), _module.__default.sequences($LS($LZ), ys#0)))
               ==> _module.__default.AllSorted($LS($LZ), 
                  #_module.List.Cons($Box(#_module.List.Cons(a#0, xs#0)), _module.__default.sequences($LS($LZ), ys#0)))
                 || (_module.List.Nil_q(#_module.List.Cons($Box(#_module.List.Cons(a#0, xs#0)), _module.__default.sequences($LS($LZ), ys#0)))
                   ==> Lit(true));
            assert {:id "id462"} {:subsumption 0} _module.__default.sorted($LS($LZ), #_module.List.Cons(a#0, xs#0))
                 && _module.__default.AllSorted($LS($LZ), _module.__default.sequences($LS($LZ), ys#0))
               ==> 
              _module.__default.AllSorted#canCall(#_module.List.Cons($Box(#_module.List.Cons(a#0, xs#0)), _module.__default.sequences($LS($LZ), ys#0)))
               ==> _module.__default.AllSorted($LS($LZ), 
                  #_module.List.Cons($Box(#_module.List.Cons(a#0, xs#0)), _module.__default.sequences($LS($LZ), ys#0)))
                 || (!_module.List.Nil_q(#_module.List.Cons($Box(#_module.List.Cons(a#0, xs#0)), _module.__default.sequences($LS($LZ), ys#0)))
                   ==> (var y#1_0_2_2 := _module.List.tail(#_module.List.Cons($Box(#_module.List.Cons(a#0, xs#0)), 
                          _module.__default.sequences($LS($LS($LZ)), ys#0))); 
                    (var xs#1_0_2_0 := $Unbox(_module.List.head(#_module.List.Cons($Box(#_module.List.Cons(a#0, xs#0)), 
                              _module.__default.sequences($LS($LS($LZ)), ys#0)))): DatatypeType; 
                      _module.__default.sorted#canCall(xs#1_0_2_0)
                         ==> _module.__default.sorted($LS($LZ), xs#1_0_2_0)
                           || (_module.List.Nil_q(xs#1_0_2_0) ==> Lit(true)))));
            assert {:id "id463"} {:subsumption 0} _module.__default.sorted($LS($LZ), #_module.List.Cons(a#0, xs#0))
                 && _module.__default.AllSorted($LS($LZ), _module.__default.sequences($LS($LZ), ys#0))
               ==> 
              _module.__default.AllSorted#canCall(#_module.List.Cons($Box(#_module.List.Cons(a#0, xs#0)), _module.__default.sequences($LS($LZ), ys#0)))
               ==> _module.__default.AllSorted($LS($LZ), 
                  #_module.List.Cons($Box(#_module.List.Cons(a#0, xs#0)), _module.__default.sequences($LS($LZ), ys#0)))
                 || (!_module.List.Nil_q(#_module.List.Cons($Box(#_module.List.Cons(a#0, xs#0)), _module.__default.sequences($LS($LZ), ys#0)))
                   ==> (var y#1_0_2_2 := _module.List.tail(#_module.List.Cons($Box(#_module.List.Cons(a#0, xs#0)), 
                          _module.__default.sequences($LS($LS($LZ)), ys#0))); 
                    (var xs#1_0_2_0 := $Unbox(_module.List.head(#_module.List.Cons($Box(#_module.List.Cons(a#0, xs#0)), 
                              _module.__default.sequences($LS($LS($LZ)), ys#0)))): DatatypeType; 
                      _module.__default.sorted#canCall(xs#1_0_2_0)
                         ==> _module.__default.sorted($LS($LZ), xs#1_0_2_0)
                           || (!_module.List.Nil_q(xs#1_0_2_0)
                             ==> (var ys#1_0_2_0 := _module.List.tail(xs#1_0_2_0); 
                              (var a#1_0_2_0 := _module.List.head(xs#1_0_2_0); 
                                (forall y#1_0_2_0: Box :: 
                                  { _module.__default.Below(a#1_0_2_0, y#1_0_2_0) } 
                                    { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#1_0_2_0), 
                                      y#1_0_2_0) } 
                                  $IsBox(y#1_0_2_0, Tclass._module.G())
                                     ==> 
                                    MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#1_0_2_0), 
                                        y#1_0_2_0)
                                       > 0
                                     ==> _module.__default.Below(a#1_0_2_0, y#1_0_2_0))))))));
            assert {:id "id464"} {:subsumption 0} _module.__default.sorted($LS($LZ), #_module.List.Cons(a#0, xs#0))
                 && _module.__default.AllSorted($LS($LZ), _module.__default.sequences($LS($LZ), ys#0))
               ==> 
              _module.__default.AllSorted#canCall(#_module.List.Cons($Box(#_module.List.Cons(a#0, xs#0)), _module.__default.sequences($LS($LZ), ys#0)))
               ==> _module.__default.AllSorted($LS($LZ), 
                  #_module.List.Cons($Box(#_module.List.Cons(a#0, xs#0)), _module.__default.sequences($LS($LZ), ys#0)))
                 || (!_module.List.Nil_q(#_module.List.Cons($Box(#_module.List.Cons(a#0, xs#0)), _module.__default.sequences($LS($LZ), ys#0)))
                   ==> (var y#1_0_2_2 := _module.List.tail(#_module.List.Cons($Box(#_module.List.Cons(a#0, xs#0)), 
                          _module.__default.sequences($LS($LS($LZ)), ys#0))); 
                    (var xs#1_0_2_0 := $Unbox(_module.List.head(#_module.List.Cons($Box(#_module.List.Cons(a#0, xs#0)), 
                              _module.__default.sequences($LS($LS($LZ)), ys#0)))): DatatypeType; 
                      _module.__default.sorted#canCall(xs#1_0_2_0)
                         ==> _module.__default.sorted($LS($LZ), xs#1_0_2_0)
                           || (!_module.List.Nil_q(xs#1_0_2_0)
                             ==> (var ys#1_0_2_0 := _module.List.tail(xs#1_0_2_0); 
                              (var a#1_0_2_0 := _module.List.head(xs#1_0_2_0); 
                                _module.__default.sorted($LS($LS($LZ)), ys#1_0_2_0)))))));
            assert {:id "id465"} {:subsumption 0} _module.__default.sorted($LS($LZ), #_module.List.Cons(a#0, xs#0))
                 && _module.__default.AllSorted($LS($LZ), _module.__default.sequences($LS($LZ), ys#0))
               ==> 
              _module.__default.AllSorted#canCall(#_module.List.Cons($Box(#_module.List.Cons(a#0, xs#0)), _module.__default.sequences($LS($LZ), ys#0)))
               ==> _module.__default.AllSorted($LS($LZ), 
                  #_module.List.Cons($Box(#_module.List.Cons(a#0, xs#0)), _module.__default.sequences($LS($LZ), ys#0)))
                 || (!_module.List.Nil_q(#_module.List.Cons($Box(#_module.List.Cons(a#0, xs#0)), _module.__default.sequences($LS($LZ), ys#0)))
                   ==> (var y#1_0_2_2 := _module.List.tail(#_module.List.Cons($Box(#_module.List.Cons(a#0, xs#0)), 
                          _module.__default.sequences($LS($LS($LZ)), ys#0))); 
                    (var xs#1_0_2_0 := $Unbox(_module.List.head(#_module.List.Cons($Box(#_module.List.Cons(a#0, xs#0)), 
                              _module.__default.sequences($LS($LS($LZ)), ys#0)))): DatatypeType; 
                      _module.__default.AllSorted($LS($LS($LZ)), y#1_0_2_2))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(349,5)
            ##xs#1_0_1_0 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_1_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.sorted#canCall(#_module.List.Cons(a#0, xs#0));
            assume _module.__default.sorted#canCall(#_module.List.Cons(a#0, xs#0));
            // ----- assume lhs ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(349,5)
            assume {:id "id449"} _module.__default.sorted($LS($LZ), #_module.List.Cons(a#0, xs#0));
            // ----- Hint1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(349,5)
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(352,25)
            // TrCallStmt: Before ProcessCallStmt
            assume true;
            // ProcessCallStmt: CheckSubrange
            xs##1_0_1_0 := ys#0;
            assert {:id "id450"} DtRank(xs##1_0_1_0) <= DtRank(ys#0);
            call {:id "id451"} Call$$_module.__default.sorted__sequences(xs##1_0_1_0);
            // TrCallStmt: After ProcessCallStmt
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(349,5)
            ##xs#1_0_1_1 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_1_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.sorted#canCall(#_module.List.Cons(a#0, xs#0));
            if (_module.__default.sorted($LS($LZ), #_module.List.Cons(a#0, xs#0)))
            {
                ##xs#1_0_1_2 := ys#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##xs#1_0_1_2, Tclass._module.List(Tclass._module.G()), $Heap);
                assume _module.__default.sequences#canCall(ys#0);
                ##x#1_0_1_0 := _module.__default.sequences($LS($LZ), ys#0);
                // assume allocatedness for argument to function
                assume $IsAlloc(##x#1_0_1_0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
                assume _module.__default.AllSorted#canCall(_module.__default.sequences($LS($LZ), ys#0));
            }

            assume _module.__default.sorted#canCall(#_module.List.Cons(a#0, xs#0))
               && (_module.__default.sorted($LS($LZ), #_module.List.Cons(a#0, xs#0))
                 ==> _module.__default.sequences#canCall(ys#0)
                   && _module.__default.AllSorted#canCall(_module.__default.sequences($LS($LZ), ys#0)));
            // ----- assert line1 <== line2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(349,5)
            assert {:id "id452"} {:subsumption 0} _module.__default.sorted($LS($LZ), #_module.List.Cons(a#0, xs#0))
               ==> 
              _module.__default.sorted#canCall(#_module.List.Cons(a#0, xs#0))
               ==> _module.__default.sorted($LS($LZ), #_module.List.Cons(a#0, xs#0))
                 || (_module.List.Nil_q(#_module.List.Cons(a#0, xs#0)) ==> Lit(true));
            assert {:id "id453"} {:subsumption 0} _module.__default.sorted($LS($LZ), #_module.List.Cons(a#0, xs#0))
               ==> 
              _module.__default.sorted#canCall(#_module.List.Cons(a#0, xs#0))
               ==> _module.__default.sorted($LS($LZ), #_module.List.Cons(a#0, xs#0))
                 || (!_module.List.Nil_q(#_module.List.Cons(a#0, xs#0))
                   ==> (var ys#1_0_1_0 := _module.List.tail(#_module.List.Cons(a#0, xs#0)); 
                    (var a#1_0_1_0 := _module.List.head(#_module.List.Cons(a#0, xs#0)); 
                      (forall y#1_0_1_0: Box :: 
                        { _module.__default.Below(a#1_0_1_0, y#1_0_1_0) } 
                          { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#1_0_1_0), 
                            y#1_0_1_0) } 
                        $IsBox(y#1_0_1_0, Tclass._module.G())
                           ==> 
                          MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#1_0_1_0), 
                              y#1_0_1_0)
                             > 0
                           ==> _module.__default.Below(a#1_0_1_0, y#1_0_1_0)))));
            assert {:id "id454"} {:subsumption 0} _module.__default.sorted($LS($LZ), #_module.List.Cons(a#0, xs#0))
               ==> 
              _module.__default.sorted#canCall(#_module.List.Cons(a#0, xs#0))
               ==> _module.__default.sorted($LS($LZ), #_module.List.Cons(a#0, xs#0))
                 || (!_module.List.Nil_q(#_module.List.Cons(a#0, xs#0))
                   ==> (var ys#1_0_1_0 := _module.List.tail(#_module.List.Cons(a#0, xs#0)); 
                    (var a#1_0_1_0 := _module.List.head(#_module.List.Cons(a#0, xs#0)); 
                      _module.__default.sorted($LS($LS($LZ)), ys#1_0_1_0))));
            assert {:id "id455"} {:subsumption 0} _module.__default.sorted($LS($LZ), #_module.List.Cons(a#0, xs#0))
               ==> 
              _module.__default.AllSorted#canCall(_module.__default.sequences($LS($LZ), ys#0))
               ==> _module.__default.AllSorted($LS($LZ), _module.__default.sequences($LS($LZ), ys#0))
                 || (_module.List.Nil_q(_module.__default.sequences($LS($LZ), ys#0)) ==> Lit(true));
            assert {:id "id456"} {:subsumption 0} _module.__default.sorted($LS($LZ), #_module.List.Cons(a#0, xs#0))
               ==> 
              _module.__default.AllSorted#canCall(_module.__default.sequences($LS($LZ), ys#0))
               ==> _module.__default.AllSorted($LS($LZ), _module.__default.sequences($LS($LZ), ys#0))
                 || (!_module.List.Nil_q(_module.__default.sequences($LS($LZ), ys#0))
                   ==> (var y#1_0_1_4 := _module.List.tail(_module.__default.sequences($LS($LS($LZ)), ys#0)); 
                    (var xs#1_0_1_0 := $Unbox(_module.List.head(_module.__default.sequences($LS($LS($LZ)), ys#0))): DatatypeType; 
                      _module.__default.sorted#canCall(xs#1_0_1_0)
                         ==> _module.__default.sorted($LS($LZ), xs#1_0_1_0)
                           || (_module.List.Nil_q(xs#1_0_1_0) ==> Lit(true)))));
            assert {:id "id457"} {:subsumption 0} _module.__default.sorted($LS($LZ), #_module.List.Cons(a#0, xs#0))
               ==> 
              _module.__default.AllSorted#canCall(_module.__default.sequences($LS($LZ), ys#0))
               ==> _module.__default.AllSorted($LS($LZ), _module.__default.sequences($LS($LZ), ys#0))
                 || (!_module.List.Nil_q(_module.__default.sequences($LS($LZ), ys#0))
                   ==> (var y#1_0_1_4 := _module.List.tail(_module.__default.sequences($LS($LS($LZ)), ys#0)); 
                    (var xs#1_0_1_0 := $Unbox(_module.List.head(_module.__default.sequences($LS($LS($LZ)), ys#0))): DatatypeType; 
                      _module.__default.sorted#canCall(xs#1_0_1_0)
                         ==> _module.__default.sorted($LS($LZ), xs#1_0_1_0)
                           || (!_module.List.Nil_q(xs#1_0_1_0)
                             ==> (var ys#1_0_1_2 := _module.List.tail(xs#1_0_1_0); 
                              (var a#1_0_1_2 := _module.List.head(xs#1_0_1_0); 
                                (forall y#1_0_1_2: Box :: 
                                  { _module.__default.Below(a#1_0_1_2, y#1_0_1_2) } 
                                    { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#1_0_1_2), 
                                      y#1_0_1_2) } 
                                  $IsBox(y#1_0_1_2, Tclass._module.G())
                                     ==> 
                                    MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#1_0_1_2), 
                                        y#1_0_1_2)
                                       > 0
                                     ==> _module.__default.Below(a#1_0_1_2, y#1_0_1_2))))))));
            assert {:id "id458"} {:subsumption 0} _module.__default.sorted($LS($LZ), #_module.List.Cons(a#0, xs#0))
               ==> 
              _module.__default.AllSorted#canCall(_module.__default.sequences($LS($LZ), ys#0))
               ==> _module.__default.AllSorted($LS($LZ), _module.__default.sequences($LS($LZ), ys#0))
                 || (!_module.List.Nil_q(_module.__default.sequences($LS($LZ), ys#0))
                   ==> (var y#1_0_1_4 := _module.List.tail(_module.__default.sequences($LS($LS($LZ)), ys#0)); 
                    (var xs#1_0_1_0 := $Unbox(_module.List.head(_module.__default.sequences($LS($LS($LZ)), ys#0))): DatatypeType; 
                      _module.__default.sorted#canCall(xs#1_0_1_0)
                         ==> _module.__default.sorted($LS($LZ), xs#1_0_1_0)
                           || (!_module.List.Nil_q(xs#1_0_1_0)
                             ==> (var ys#1_0_1_2 := _module.List.tail(xs#1_0_1_0); 
                              (var a#1_0_1_2 := _module.List.head(xs#1_0_1_0); 
                                _module.__default.sorted($LS($LS($LZ)), ys#1_0_1_2)))))));
            assert {:id "id459"} {:subsumption 0} _module.__default.sorted($LS($LZ), #_module.List.Cons(a#0, xs#0))
               ==> 
              _module.__default.AllSorted#canCall(_module.__default.sequences($LS($LZ), ys#0))
               ==> _module.__default.AllSorted($LS($LZ), _module.__default.sequences($LS($LZ), ys#0))
                 || (!_module.List.Nil_q(_module.__default.sequences($LS($LZ), ys#0))
                   ==> (var y#1_0_1_4 := _module.List.tail(_module.__default.sequences($LS($LS($LZ)), ys#0)); 
                    (var xs#1_0_1_0 := $Unbox(_module.List.head(_module.__default.sequences($LS($LS($LZ)), ys#0))): DatatypeType; 
                      _module.__default.AllSorted($LS($LS($LZ)), y#1_0_1_4))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(349,5)
            assume true;
            // ----- assume lhs ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(349,5)
            assume {:id "id445"} true;
            // ----- Hint2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(349,5)
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(349,5)
            ##xs#1_0_0_0 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_0_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.sorted#canCall(#_module.List.Cons(a#0, xs#0));
            assume _module.__default.sorted#canCall(#_module.List.Cons(a#0, xs#0));
            // ----- assert line2 <== line3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(349,5)
            assert {:id "id446"} {:subsumption 0} Lit(true)
               ==> 
              _module.__default.sorted#canCall(#_module.List.Cons(a#0, xs#0))
               ==> _module.__default.sorted($LS($LZ), #_module.List.Cons(a#0, xs#0))
                 || (_module.List.Nil_q(#_module.List.Cons(a#0, xs#0)) ==> Lit(true));
            assert {:id "id447"} {:subsumption 0} Lit(true)
               ==> 
              _module.__default.sorted#canCall(#_module.List.Cons(a#0, xs#0))
               ==> _module.__default.sorted($LS($LZ), #_module.List.Cons(a#0, xs#0))
                 || (!_module.List.Nil_q(#_module.List.Cons(a#0, xs#0))
                   ==> (var ys#1_0_0_0 := _module.List.tail(#_module.List.Cons(a#0, xs#0)); 
                    (var a#1_0_0_0 := _module.List.head(#_module.List.Cons(a#0, xs#0)); 
                      (forall y#1_0_0_0: Box :: 
                        { _module.__default.Below(a#1_0_0_0, y#1_0_0_0) } 
                          { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#1_0_0_0), 
                            y#1_0_0_0) } 
                        $IsBox(y#1_0_0_0, Tclass._module.G())
                           ==> 
                          MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#1_0_0_0), 
                              y#1_0_0_0)
                             > 0
                           ==> _module.__default.Below(a#1_0_0_0, y#1_0_0_0)))));
            assert {:id "id448"} {:subsumption 0} Lit(true)
               ==> 
              _module.__default.sorted#canCall(#_module.List.Cons(a#0, xs#0))
               ==> _module.__default.sorted($LS($LZ), #_module.List.Cons(a#0, xs#0))
                 || (!_module.List.Nil_q(#_module.List.Cons(a#0, xs#0))
                   ==> (var ys#1_0_0_0 := _module.List.tail(#_module.List.Cons(a#0, xs#0)); 
                    (var a#1_0_0_0 := _module.List.head(#_module.List.Cons(a#0, xs#0)); 
                      _module.__default.sorted($LS($LS($LZ)), ys#1_0_0_0))));
            assume false;
        }

        assume {:id "id466"} true
           ==> _module.__default.AllSorted($LS($LZ), 
            #_module.List.Cons($Box(#_module.List.Cons(a#0, xs#0)), _module.__default.sequences($LS($LZ), ys#0)));
    }
}



procedure {:verboseName "sorted_ascending (well-formedness)"} CheckWellFormed$$_module.__default.sorted__ascending(a#0: Box
       where $IsBox(a#0, Tclass._module.G()) && $IsAllocBox(a#0, Tclass._module.G(), $Heap), 
    xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(xs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(xs#0), 
    ys#0: DatatypeType
       where $Is(ys#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(ys#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(ys#0));
  free requires 6 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "sorted_ascending (call)"} Call$$_module.__default.sorted__ascending(a#0: Box
       where $IsBox(a#0, Tclass._module.G()) && $IsAllocBox(a#0, Tclass._module.G(), $Heap), 
    xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(xs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(xs#0), 
    ys#0: DatatypeType
       where $Is(ys#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(ys#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(ys#0));
  // user-defined preconditions
  requires {:id "id470"} (forall y#1: Box :: 
    { _module.__default.Below(y#1, a#0) } 
      { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), xs#0), y#1) } 
    $IsBox(y#1, Tclass._module.G())
       ==> 
      MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), xs#0), y#1)
         > 0
       ==> _module.__default.Below(y#1, a#0));
  requires {:id "id471"} _module.__default.sorted#canCall(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, Lit(#_module.List.Nil())))
     ==> _module.__default.sorted($LS($LZ), 
        _module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, Lit(#_module.List.Nil())))
       || (_module.List.Nil_q(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, Lit(#_module.List.Nil())))
         ==> Lit(true));
  requires {:id "id472"} _module.__default.sorted#canCall(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, Lit(#_module.List.Nil())))
     ==> _module.__default.sorted($LS($LZ), 
        _module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, Lit(#_module.List.Nil())))
       || (!_module.List.Nil_q(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, Lit(#_module.List.Nil())))
         ==> (var ys#1 := _module.List.tail(_module.__default.reverse(Tclass._module.G(), $LS($LS($LZ)), xs#0, Lit(#_module.List.Nil()))); 
          (var a#1 := _module.List.head(_module.__default.reverse(Tclass._module.G(), $LS($LS($LZ)), xs#0, Lit(#_module.List.Nil()))); 
            (forall y#2: Box :: 
              { _module.__default.Below(a#1, y#2) } 
                { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#1), y#2) } 
              $IsBox(y#2, Tclass._module.G())
                 ==> 
                MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#1), y#2)
                   > 0
                 ==> _module.__default.Below(a#1, y#2)))));
  requires {:id "id473"} _module.__default.sorted#canCall(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, Lit(#_module.List.Nil())))
     ==> _module.__default.sorted($LS($LZ), 
        _module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, Lit(#_module.List.Nil())))
       || (!_module.List.Nil_q(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, Lit(#_module.List.Nil())))
         ==> (var ys#1 := _module.List.tail(_module.__default.reverse(Tclass._module.G(), $LS($LS($LZ)), xs#0, Lit(#_module.List.Nil()))); 
          (var a#1 := _module.List.head(_module.__default.reverse(Tclass._module.G(), $LS($LS($LZ)), xs#0, Lit(#_module.List.Nil()))); 
            _module.__default.sorted($LS($LS($LZ)), ys#1))));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.ascending#canCall(a#0, xs#0, ys#0)
     && _module.__default.AllSorted#canCall(_module.__default.ascending($LS($LZ), a#0, xs#0, ys#0));
  free ensures {:id "id474"} _module.__default.AllSorted#canCall(_module.__default.ascending($LS($LZ), a#0, xs#0, ys#0))
     && 
    _module.__default.AllSorted($LS($LZ), _module.__default.ascending($LS($LZ), a#0, xs#0, ys#0))
     && (if _module.List.Nil_q(_module.__default.ascending($LS($LZ), a#0, xs#0, ys#0))
       then true
       else (var y#7 := _module.List.tail(_module.__default.ascending($LS($LZ), a#0, xs#0, ys#0)); 
        (var xs#2 := $Unbox(_module.List.head(_module.__default.ascending($LS($LZ), a#0, xs#0, ys#0))): DatatypeType; 
          _module.__default.sorted($LS($LZ), xs#2)
             && _module.__default.AllSorted($LS($LZ), y#7))));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "sorted_ascending (correctness)"} Impl$$_module.__default.sorted__ascending(a#0: Box
       where $IsBox(a#0, Tclass._module.G()) && $IsAllocBox(a#0, Tclass._module.G(), $Heap), 
    xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(xs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(xs#0), 
    ys#0: DatatypeType
       where $Is(ys#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(ys#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(ys#0))
   returns ($_reverifyPost: bool);
  free requires 6 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id475"} (forall y#1: Box :: 
    { _module.__default.Below(y#1, a#0) } 
      { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), xs#0), y#1) } 
    $IsBox(y#1, Tclass._module.G())
       ==> 
      MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), xs#0), y#1)
         > 0
       ==> _module.__default.Below(y#1, a#0));
  free requires {:id "id476"} _module.__default.sorted#canCall(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, Lit(#_module.List.Nil())))
     && 
    _module.__default.sorted($LS($LZ), 
      _module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, Lit(#_module.List.Nil())))
     && (if _module.List.Nil_q(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, Lit(#_module.List.Nil())))
       then true
       else (var ys#6 := _module.List.tail(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, Lit(#_module.List.Nil()))); 
        (var a#6 := _module.List.head(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, Lit(#_module.List.Nil()))); 
          (forall y#9: Box :: 
              { _module.__default.Below(a#6, y#9) } 
                { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#6), y#9) } 
              $IsBox(y#9, Tclass._module.G())
                 ==> 
                MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#6), y#9)
                   > 0
                 ==> _module.__default.Below(a#6, y#9))
             && _module.__default.sorted($LS($LZ), ys#6))));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.ascending#canCall(a#0, xs#0, ys#0)
     && _module.__default.AllSorted#canCall(_module.__default.ascending($LS($LZ), a#0, xs#0, ys#0));
  ensures {:id "id477"} _module.__default.AllSorted#canCall(_module.__default.ascending($LS($LZ), a#0, xs#0, ys#0))
     ==> _module.__default.AllSorted($LS($LZ), _module.__default.ascending($LS($LZ), a#0, xs#0, ys#0))
       || (_module.List.Nil_q(_module.__default.ascending($LS($LZ), a#0, xs#0, ys#0))
         ==> Lit(true));
  ensures {:id "id478"} _module.__default.AllSorted#canCall(_module.__default.ascending($LS($LZ), a#0, xs#0, ys#0))
     ==> _module.__default.AllSorted($LS($LZ), _module.__default.ascending($LS($LZ), a#0, xs#0, ys#0))
       || (!_module.List.Nil_q(_module.__default.ascending($LS($LZ), a#0, xs#0, ys#0))
         ==> (var y#12 := _module.List.tail(_module.__default.ascending($LS($LS($LZ)), a#0, xs#0, ys#0)); 
          (var xs#3 := $Unbox(_module.List.head(_module.__default.ascending($LS($LS($LZ)), a#0, xs#0, ys#0))): DatatypeType; 
            _module.__default.sorted#canCall(xs#3)
               ==> _module.__default.sorted($LS($LZ), xs#3)
                 || (_module.List.Nil_q(xs#3) ==> Lit(true)))));
  ensures {:id "id479"} _module.__default.AllSorted#canCall(_module.__default.ascending($LS($LZ), a#0, xs#0, ys#0))
     ==> _module.__default.AllSorted($LS($LZ), _module.__default.ascending($LS($LZ), a#0, xs#0, ys#0))
       || (!_module.List.Nil_q(_module.__default.ascending($LS($LZ), a#0, xs#0, ys#0))
         ==> (var y#12 := _module.List.tail(_module.__default.ascending($LS($LS($LZ)), a#0, xs#0, ys#0)); 
          (var xs#3 := $Unbox(_module.List.head(_module.__default.ascending($LS($LS($LZ)), a#0, xs#0, ys#0))): DatatypeType; 
            _module.__default.sorted#canCall(xs#3)
               ==> _module.__default.sorted($LS($LZ), xs#3)
                 || (!_module.List.Nil_q(xs#3)
                   ==> (var ys#7 := _module.List.tail(xs#3); 
                    (var a#7 := _module.List.head(xs#3); 
                      (forall y#10: Box :: 
                        { _module.__default.Below(a#7, y#10) } 
                          { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#7), y#10) } 
                        $IsBox(y#10, Tclass._module.G())
                           ==> 
                          MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#7), y#10)
                             > 0
                           ==> _module.__default.Below(a#7, y#10))))))));
  ensures {:id "id480"} _module.__default.AllSorted#canCall(_module.__default.ascending($LS($LZ), a#0, xs#0, ys#0))
     ==> _module.__default.AllSorted($LS($LZ), _module.__default.ascending($LS($LZ), a#0, xs#0, ys#0))
       || (!_module.List.Nil_q(_module.__default.ascending($LS($LZ), a#0, xs#0, ys#0))
         ==> (var y#12 := _module.List.tail(_module.__default.ascending($LS($LS($LZ)), a#0, xs#0, ys#0)); 
          (var xs#3 := $Unbox(_module.List.head(_module.__default.ascending($LS($LS($LZ)), a#0, xs#0, ys#0))): DatatypeType; 
            _module.__default.sorted#canCall(xs#3)
               ==> _module.__default.sorted($LS($LZ), xs#3)
                 || (!_module.List.Nil_q(xs#3)
                   ==> (var ys#7 := _module.List.tail(xs#3); 
                    (var a#7 := _module.List.head(xs#3); 
                      _module.__default.sorted($LS($LS($LZ)), ys#7)))))));
  ensures {:id "id481"} _module.__default.AllSorted#canCall(_module.__default.ascending($LS($LZ), a#0, xs#0, ys#0))
     ==> _module.__default.AllSorted($LS($LZ), _module.__default.ascending($LS($LZ), a#0, xs#0, ys#0))
       || (!_module.List.Nil_q(_module.__default.ascending($LS($LZ), a#0, xs#0, ys#0))
         ==> (var y#12 := _module.List.tail(_module.__default.ascending($LS($LS($LZ)), a#0, xs#0, ys#0)); 
          (var xs#3 := $Unbox(_module.List.head(_module.__default.ascending($LS($LS($LZ)), a#0, xs#0, ys#0))): DatatypeType; 
            _module.__default.AllSorted($LS($LS($LZ)), y#12))));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "sorted_ascending (correctness)"} Impl$$_module.__default.sorted__ascending(a#0: Box, xs#0: DatatypeType, ys#0: DatatypeType) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $initHeapForallStmt#0: Heap;
  var xs##0: DatatypeType;
  var a##0: Box;
  var ys##0: DatatypeType;
  var ##a#2: Box;
  var ##b#1: Box;
  var a##0_0: Box;
  var xs##0_0: DatatypeType;
  var ys##0_0: DatatypeType;
  var ##xs#1_0_0_0: DatatypeType;
  var ##xs#1_0_0_1: DatatypeType;
  var ##acc#1_0_0_0: DatatypeType;
  var ##xs#1_0_1_0: DatatypeType;
  var ##xs#1_0_1_1: DatatypeType;
  var ##acc#1_0_1_0: DatatypeType;
  var xs##1_0_1_0: DatatypeType;
  var ##xs#1_0_1_2: DatatypeType;
  var ##xs#1_0_1_3: DatatypeType;
  var ##acc#1_0_1_1: DatatypeType;
  var ##x#1_0_1_0: DatatypeType;
  var ##xs#1_0_1_4: DatatypeType;
  var ##xs#1_0_2_0: DatatypeType;
  var ##xs#1_0_2_1: DatatypeType;
  var ##acc#1_0_2_0: DatatypeType;
  var ##x#1_0_2_0: DatatypeType;
  var ##xs#1_0_2_2: DatatypeType;
  var ##x#1_0_2_1: DatatypeType;
  var ##xs#1_0_2_3: DatatypeType;
  var ##acc#1_0_2_1: DatatypeType;
  var ##xs#1_0_2_4: DatatypeType;

    // AddMethodImpl: sorted_ascending, Impl$$_module.__default.sorted__ascending
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume $IsA#_module.List(xs#0);
    assume $IsA#_module.List(ys#0);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#xs0#0: DatatypeType, $ih#ys0#0: DatatypeType :: 
      { _module.__default.ascending($LS($LZ), a#0, $ih#xs0#0, $ih#ys0#0) } 
      $Is($ih#xs0#0, Tclass._module.List(Tclass._module.G()))
           && $Is($ih#ys0#0, Tclass._module.List(Tclass._module.G()))
           && 
          (forall y#14: Box :: 
            { _module.__default.Below(y#14, a#0) } 
              { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), $ih#xs0#0), y#14) } 
            $IsBox(y#14, Tclass._module.G())
               ==> 
              MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), $ih#xs0#0), y#14)
                 > 0
               ==> _module.__default.Below(y#14, a#0))
           && _module.__default.sorted($LS($LZ), 
            _module.__default.reverse(Tclass._module.G(), $LS($LZ), $ih#xs0#0, Lit(#_module.List.Nil())))
           && DtRank($ih#ys0#0) < DtRank(ys#0)
         ==> _module.__default.AllSorted($LS($LZ), _module.__default.ascending($LS($LZ), a#0, $ih#xs0#0, $ih#ys0#0)));
    $_reverifyPost := false;
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(364,24)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    xs##0 := xs#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    a##0 := a#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    ys##0 := Lit(#_module.List.Nil());
    call {:id "id482"} Call$$_module.__default.sorted__insertInMiddle(xs##0, a##0, ys##0);
    // TrCallStmt: After ProcessCallStmt
    // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(365,3)
    if (_module.List.Cons_q(ys#0))
    {
        ##a#2 := a#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##a#2, Tclass._module.G(), $Heap);
        assert {:id "id483"} _module.List.Cons_q(ys#0);
        ##b#1 := _module.List.head(ys#0);
        // assume allocatedness for argument to function
        assume $IsAllocBox(##b#1, Tclass._module.G(), $Heap);
        assume _module.__default.Below#canCall(a#0, _module.List.head(ys#0));
    }

    assume _module.List.Cons_q(ys#0)
       ==> _module.__default.Below#canCall(a#0, _module.List.head(ys#0));
    if (_module.List.Cons_q(ys#0)
       && _module.__default.Below(a#0, _module.List.head(ys#0)))
    {
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(366,21)
        // TrCallStmt: Before ProcessCallStmt
        assert {:id "id484"} _module.List.Cons_q(ys#0);
        assume true;
        // ProcessCallStmt: CheckSubrange
        a##0_0 := _module.List.head(ys#0);
        assume true;
        // ProcessCallStmt: CheckSubrange
        xs##0_0 := #_module.List.Cons(a#0, xs#0);
        assert {:id "id485"} _module.List.Cons_q(ys#0);
        assume true;
        // ProcessCallStmt: CheckSubrange
        ys##0_0 := _module.List.tail(ys#0);
        assert {:id "id486"} DtRank(ys##0_0) < DtRank(ys#0);
        call {:id "id487"} Call$$_module.__default.sorted__ascending(a##0_0, xs##0_0, ys##0_0);
        // TrCallStmt: After ProcessCallStmt
    }
    else
    {
        // ----- calc statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(368,5)
        // Assume Fuel Constant
        if (*)
        {
            // ----- assert wf[initial] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(368,5)
            assume true;
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(368,5)
            ##xs#1_0_2_1 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_2_1, Tclass._module.List(Tclass._module.G()), $Heap);
            ##acc#1_0_2_0 := Lit(#_module.List.Nil());
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#1_0_2_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), Lit(#_module.List.Nil()));
            ##xs#1_0_2_0 := _module.__default.reverse(Tclass._module.G(), 
              $LS($LZ), 
              #_module.List.Cons(a#0, xs#0), 
              Lit(#_module.List.Nil()));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_2_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.sorted#canCall(_module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(a#0, xs#0), 
                Lit(#_module.List.Nil())));
            if (_module.__default.sorted($LS($LZ), 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(a#0, xs#0), 
                Lit(#_module.List.Nil()))))
            {
                ##xs#1_0_2_2 := ys#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##xs#1_0_2_2, Tclass._module.List(Tclass._module.G()), $Heap);
                assume _module.__default.sequences#canCall(ys#0);
                ##x#1_0_2_0 := _module.__default.sequences($LS($LZ), ys#0);
                // assume allocatedness for argument to function
                assume $IsAlloc(##x#1_0_2_0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
                assume _module.__default.AllSorted#canCall(_module.__default.sequences($LS($LZ), ys#0));
            }

            assume _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), Lit(#_module.List.Nil()))
               && _module.__default.sorted#canCall(_module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(a#0, xs#0), 
                  Lit(#_module.List.Nil())))
               && (_module.__default.sorted($LS($LZ), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LZ), 
                    #_module.List.Cons(a#0, xs#0), 
                    Lit(#_module.List.Nil())))
                 ==> _module.__default.sequences#canCall(ys#0)
                   && _module.__default.AllSorted#canCall(_module.__default.sequences($LS($LZ), ys#0)));
            // ----- assume lhs ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(368,5)
            assume {:id "id503"} _module.__default.sorted($LS($LZ), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(a#0, xs#0), 
                  Lit(#_module.List.Nil())))
               && _module.__default.AllSorted($LS($LZ), _module.__default.sequences($LS($LZ), ys#0));
            // ----- Hint0 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(368,5)
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(368,5)
            ##xs#1_0_2_3 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_2_3, Tclass._module.List(Tclass._module.G()), $Heap);
            ##acc#1_0_2_1 := Lit(#_module.List.Nil());
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#1_0_2_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), Lit(#_module.List.Nil()));
            ##xs#1_0_2_4 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_2_4, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.sequences#canCall(ys#0);
            ##x#1_0_2_1 := #_module.List.Cons($Box(_module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(a#0, xs#0), 
                  Lit(#_module.List.Nil()))), 
              _module.__default.sequences($LS($LZ), ys#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#1_0_2_1, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.AllSorted#canCall(#_module.List.Cons($Box(_module.__default.reverse(Tclass._module.G(), 
                    $LS($LZ), 
                    #_module.List.Cons(a#0, xs#0), 
                    Lit(#_module.List.Nil()))), 
                _module.__default.sequences($LS($LZ), ys#0)));
            assume _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), Lit(#_module.List.Nil()))
               && _module.__default.sequences#canCall(ys#0)
               && _module.__default.AllSorted#canCall(#_module.List.Cons($Box(_module.__default.reverse(Tclass._module.G(), 
                      $LS($LZ), 
                      #_module.List.Cons(a#0, xs#0), 
                      Lit(#_module.List.Nil()))), 
                  _module.__default.sequences($LS($LZ), ys#0)));
            // ----- assert line0 <== line1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(368,5)
            assert {:id "id504"} {:subsumption 0} _module.__default.sorted($LS($LZ), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LZ), 
                    #_module.List.Cons(a#0, xs#0), 
                    Lit(#_module.List.Nil())))
                 && _module.__default.AllSorted($LS($LZ), _module.__default.sequences($LS($LZ), ys#0))
               ==> 
              _module.__default.AllSorted#canCall(#_module.List.Cons($Box(_module.__default.reverse(Tclass._module.G(), 
                      $LS($LZ), 
                      #_module.List.Cons(a#0, xs#0), 
                      Lit(#_module.List.Nil()))), 
                  _module.__default.sequences($LS($LZ), ys#0)))
               ==> _module.__default.AllSorted($LS($LZ), 
                  #_module.List.Cons($Box(_module.__default.reverse(Tclass._module.G(), 
                        $LS($LZ), 
                        #_module.List.Cons(a#0, xs#0), 
                        Lit(#_module.List.Nil()))), 
                    _module.__default.sequences($LS($LZ), ys#0)))
                 || (_module.List.Nil_q(#_module.List.Cons($Box(_module.__default.reverse(Tclass._module.G(), 
                          $LS($LZ), 
                          #_module.List.Cons(a#0, xs#0), 
                          Lit(#_module.List.Nil()))), 
                      _module.__default.sequences($LS($LZ), ys#0)))
                   ==> Lit(true));
            assert {:id "id505"} {:subsumption 0} _module.__default.sorted($LS($LZ), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LZ), 
                    #_module.List.Cons(a#0, xs#0), 
                    Lit(#_module.List.Nil())))
                 && _module.__default.AllSorted($LS($LZ), _module.__default.sequences($LS($LZ), ys#0))
               ==> 
              _module.__default.AllSorted#canCall(#_module.List.Cons($Box(_module.__default.reverse(Tclass._module.G(), 
                      $LS($LZ), 
                      #_module.List.Cons(a#0, xs#0), 
                      Lit(#_module.List.Nil()))), 
                  _module.__default.sequences($LS($LZ), ys#0)))
               ==> _module.__default.AllSorted($LS($LZ), 
                  #_module.List.Cons($Box(_module.__default.reverse(Tclass._module.G(), 
                        $LS($LZ), 
                        #_module.List.Cons(a#0, xs#0), 
                        Lit(#_module.List.Nil()))), 
                    _module.__default.sequences($LS($LZ), ys#0)))
                 || (!_module.List.Nil_q(#_module.List.Cons($Box(_module.__default.reverse(Tclass._module.G(), 
                          $LS($LZ), 
                          #_module.List.Cons(a#0, xs#0), 
                          Lit(#_module.List.Nil()))), 
                      _module.__default.sequences($LS($LZ), ys#0)))
                   ==> (var y#1_0_2_2 := _module.List.tail(#_module.List.Cons($Box(_module.__default.reverse(Tclass._module.G(), 
                              $LS($LS($LZ)), 
                              #_module.List.Cons(a#0, xs#0), 
                              Lit(#_module.List.Nil()))), 
                          _module.__default.sequences($LS($LS($LZ)), ys#0))); 
                    (var xs#1_0_2_0 := $Unbox(_module.List.head(#_module.List.Cons($Box(_module.__default.reverse(Tclass._module.G(), 
                                  $LS($LS($LZ)), 
                                  #_module.List.Cons(a#0, xs#0), 
                                  Lit(#_module.List.Nil()))), 
                              _module.__default.sequences($LS($LS($LZ)), ys#0)))): DatatypeType; 
                      _module.__default.sorted#canCall(xs#1_0_2_0)
                         ==> _module.__default.sorted($LS($LZ), xs#1_0_2_0)
                           || (_module.List.Nil_q(xs#1_0_2_0) ==> Lit(true)))));
            assert {:id "id506"} {:subsumption 0} _module.__default.sorted($LS($LZ), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LZ), 
                    #_module.List.Cons(a#0, xs#0), 
                    Lit(#_module.List.Nil())))
                 && _module.__default.AllSorted($LS($LZ), _module.__default.sequences($LS($LZ), ys#0))
               ==> 
              _module.__default.AllSorted#canCall(#_module.List.Cons($Box(_module.__default.reverse(Tclass._module.G(), 
                      $LS($LZ), 
                      #_module.List.Cons(a#0, xs#0), 
                      Lit(#_module.List.Nil()))), 
                  _module.__default.sequences($LS($LZ), ys#0)))
               ==> _module.__default.AllSorted($LS($LZ), 
                  #_module.List.Cons($Box(_module.__default.reverse(Tclass._module.G(), 
                        $LS($LZ), 
                        #_module.List.Cons(a#0, xs#0), 
                        Lit(#_module.List.Nil()))), 
                    _module.__default.sequences($LS($LZ), ys#0)))
                 || (!_module.List.Nil_q(#_module.List.Cons($Box(_module.__default.reverse(Tclass._module.G(), 
                          $LS($LZ), 
                          #_module.List.Cons(a#0, xs#0), 
                          Lit(#_module.List.Nil()))), 
                      _module.__default.sequences($LS($LZ), ys#0)))
                   ==> (var y#1_0_2_2 := _module.List.tail(#_module.List.Cons($Box(_module.__default.reverse(Tclass._module.G(), 
                              $LS($LS($LZ)), 
                              #_module.List.Cons(a#0, xs#0), 
                              Lit(#_module.List.Nil()))), 
                          _module.__default.sequences($LS($LS($LZ)), ys#0))); 
                    (var xs#1_0_2_0 := $Unbox(_module.List.head(#_module.List.Cons($Box(_module.__default.reverse(Tclass._module.G(), 
                                  $LS($LS($LZ)), 
                                  #_module.List.Cons(a#0, xs#0), 
                                  Lit(#_module.List.Nil()))), 
                              _module.__default.sequences($LS($LS($LZ)), ys#0)))): DatatypeType; 
                      _module.__default.sorted#canCall(xs#1_0_2_0)
                         ==> _module.__default.sorted($LS($LZ), xs#1_0_2_0)
                           || (!_module.List.Nil_q(xs#1_0_2_0)
                             ==> (var ys#1_0_2_0 := _module.List.tail(xs#1_0_2_0); 
                              (var a#1_0_2_0 := _module.List.head(xs#1_0_2_0); 
                                (forall y#1_0_2_0: Box :: 
                                  { _module.__default.Below(a#1_0_2_0, y#1_0_2_0) } 
                                    { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#1_0_2_0), 
                                      y#1_0_2_0) } 
                                  $IsBox(y#1_0_2_0, Tclass._module.G())
                                     ==> 
                                    MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#1_0_2_0), 
                                        y#1_0_2_0)
                                       > 0
                                     ==> _module.__default.Below(a#1_0_2_0, y#1_0_2_0))))))));
            assert {:id "id507"} {:subsumption 0} _module.__default.sorted($LS($LZ), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LZ), 
                    #_module.List.Cons(a#0, xs#0), 
                    Lit(#_module.List.Nil())))
                 && _module.__default.AllSorted($LS($LZ), _module.__default.sequences($LS($LZ), ys#0))
               ==> 
              _module.__default.AllSorted#canCall(#_module.List.Cons($Box(_module.__default.reverse(Tclass._module.G(), 
                      $LS($LZ), 
                      #_module.List.Cons(a#0, xs#0), 
                      Lit(#_module.List.Nil()))), 
                  _module.__default.sequences($LS($LZ), ys#0)))
               ==> _module.__default.AllSorted($LS($LZ), 
                  #_module.List.Cons($Box(_module.__default.reverse(Tclass._module.G(), 
                        $LS($LZ), 
                        #_module.List.Cons(a#0, xs#0), 
                        Lit(#_module.List.Nil()))), 
                    _module.__default.sequences($LS($LZ), ys#0)))
                 || (!_module.List.Nil_q(#_module.List.Cons($Box(_module.__default.reverse(Tclass._module.G(), 
                          $LS($LZ), 
                          #_module.List.Cons(a#0, xs#0), 
                          Lit(#_module.List.Nil()))), 
                      _module.__default.sequences($LS($LZ), ys#0)))
                   ==> (var y#1_0_2_2 := _module.List.tail(#_module.List.Cons($Box(_module.__default.reverse(Tclass._module.G(), 
                              $LS($LS($LZ)), 
                              #_module.List.Cons(a#0, xs#0), 
                              Lit(#_module.List.Nil()))), 
                          _module.__default.sequences($LS($LS($LZ)), ys#0))); 
                    (var xs#1_0_2_0 := $Unbox(_module.List.head(#_module.List.Cons($Box(_module.__default.reverse(Tclass._module.G(), 
                                  $LS($LS($LZ)), 
                                  #_module.List.Cons(a#0, xs#0), 
                                  Lit(#_module.List.Nil()))), 
                              _module.__default.sequences($LS($LS($LZ)), ys#0)))): DatatypeType; 
                      _module.__default.sorted#canCall(xs#1_0_2_0)
                         ==> _module.__default.sorted($LS($LZ), xs#1_0_2_0)
                           || (!_module.List.Nil_q(xs#1_0_2_0)
                             ==> (var ys#1_0_2_0 := _module.List.tail(xs#1_0_2_0); 
                              (var a#1_0_2_0 := _module.List.head(xs#1_0_2_0); 
                                _module.__default.sorted($LS($LS($LZ)), ys#1_0_2_0)))))));
            assert {:id "id508"} {:subsumption 0} _module.__default.sorted($LS($LZ), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LZ), 
                    #_module.List.Cons(a#0, xs#0), 
                    Lit(#_module.List.Nil())))
                 && _module.__default.AllSorted($LS($LZ), _module.__default.sequences($LS($LZ), ys#0))
               ==> 
              _module.__default.AllSorted#canCall(#_module.List.Cons($Box(_module.__default.reverse(Tclass._module.G(), 
                      $LS($LZ), 
                      #_module.List.Cons(a#0, xs#0), 
                      Lit(#_module.List.Nil()))), 
                  _module.__default.sequences($LS($LZ), ys#0)))
               ==> _module.__default.AllSorted($LS($LZ), 
                  #_module.List.Cons($Box(_module.__default.reverse(Tclass._module.G(), 
                        $LS($LZ), 
                        #_module.List.Cons(a#0, xs#0), 
                        Lit(#_module.List.Nil()))), 
                    _module.__default.sequences($LS($LZ), ys#0)))
                 || (!_module.List.Nil_q(#_module.List.Cons($Box(_module.__default.reverse(Tclass._module.G(), 
                          $LS($LZ), 
                          #_module.List.Cons(a#0, xs#0), 
                          Lit(#_module.List.Nil()))), 
                      _module.__default.sequences($LS($LZ), ys#0)))
                   ==> (var y#1_0_2_2 := _module.List.tail(#_module.List.Cons($Box(_module.__default.reverse(Tclass._module.G(), 
                              $LS($LS($LZ)), 
                              #_module.List.Cons(a#0, xs#0), 
                              Lit(#_module.List.Nil()))), 
                          _module.__default.sequences($LS($LS($LZ)), ys#0))); 
                    (var xs#1_0_2_0 := $Unbox(_module.List.head(#_module.List.Cons($Box(_module.__default.reverse(Tclass._module.G(), 
                                  $LS($LS($LZ)), 
                                  #_module.List.Cons(a#0, xs#0), 
                                  Lit(#_module.List.Nil()))), 
                              _module.__default.sequences($LS($LS($LZ)), ys#0)))): DatatypeType; 
                      _module.__default.AllSorted($LS($LS($LZ)), y#1_0_2_2))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(368,5)
            ##xs#1_0_1_1 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_1_1, Tclass._module.List(Tclass._module.G()), $Heap);
            ##acc#1_0_1_0 := Lit(#_module.List.Nil());
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#1_0_1_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), Lit(#_module.List.Nil()));
            ##xs#1_0_1_0 := _module.__default.reverse(Tclass._module.G(), 
              $LS($LZ), 
              #_module.List.Cons(a#0, xs#0), 
              Lit(#_module.List.Nil()));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_1_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.sorted#canCall(_module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(a#0, xs#0), 
                Lit(#_module.List.Nil())));
            assume _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), Lit(#_module.List.Nil()))
               && _module.__default.sorted#canCall(_module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(a#0, xs#0), 
                  Lit(#_module.List.Nil())));
            // ----- assume lhs ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(368,5)
            assume {:id "id492"} _module.__default.sorted($LS($LZ), 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(a#0, xs#0), 
                Lit(#_module.List.Nil())));
            // ----- Hint1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(368,5)
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(371,25)
            // TrCallStmt: Before ProcessCallStmt
            assume true;
            // ProcessCallStmt: CheckSubrange
            xs##1_0_1_0 := ys#0;
            assert {:id "id493"} DtRank(xs##1_0_1_0) <= DtRank(ys#0);
            call {:id "id494"} Call$$_module.__default.sorted__sequences(xs##1_0_1_0);
            // TrCallStmt: After ProcessCallStmt
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(368,5)
            ##xs#1_0_1_3 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_1_3, Tclass._module.List(Tclass._module.G()), $Heap);
            ##acc#1_0_1_1 := Lit(#_module.List.Nil());
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#1_0_1_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), Lit(#_module.List.Nil()));
            ##xs#1_0_1_2 := _module.__default.reverse(Tclass._module.G(), 
              $LS($LZ), 
              #_module.List.Cons(a#0, xs#0), 
              Lit(#_module.List.Nil()));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_1_2, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.sorted#canCall(_module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(a#0, xs#0), 
                Lit(#_module.List.Nil())));
            if (_module.__default.sorted($LS($LZ), 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(a#0, xs#0), 
                Lit(#_module.List.Nil()))))
            {
                ##xs#1_0_1_4 := ys#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##xs#1_0_1_4, Tclass._module.List(Tclass._module.G()), $Heap);
                assume _module.__default.sequences#canCall(ys#0);
                ##x#1_0_1_0 := _module.__default.sequences($LS($LZ), ys#0);
                // assume allocatedness for argument to function
                assume $IsAlloc(##x#1_0_1_0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
                assume _module.__default.AllSorted#canCall(_module.__default.sequences($LS($LZ), ys#0));
            }

            assume _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), Lit(#_module.List.Nil()))
               && _module.__default.sorted#canCall(_module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(a#0, xs#0), 
                  Lit(#_module.List.Nil())))
               && (_module.__default.sorted($LS($LZ), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LZ), 
                    #_module.List.Cons(a#0, xs#0), 
                    Lit(#_module.List.Nil())))
                 ==> _module.__default.sequences#canCall(ys#0)
                   && _module.__default.AllSorted#canCall(_module.__default.sequences($LS($LZ), ys#0)));
            // ----- assert line1 <== line2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(368,5)
            assert {:id "id495"} {:subsumption 0} _module.__default.sorted($LS($LZ), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(a#0, xs#0), 
                  Lit(#_module.List.Nil())))
               ==> 
              _module.__default.sorted#canCall(_module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(a#0, xs#0), 
                  Lit(#_module.List.Nil())))
               ==> _module.__default.sorted($LS($LZ), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LZ), 
                    #_module.List.Cons(a#0, xs#0), 
                    Lit(#_module.List.Nil())))
                 || (_module.List.Nil_q(_module.__default.reverse(Tclass._module.G(), 
                      $LS($LZ), 
                      #_module.List.Cons(a#0, xs#0), 
                      Lit(#_module.List.Nil())))
                   ==> Lit(true));
            assert {:id "id496"} {:subsumption 0} _module.__default.sorted($LS($LZ), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(a#0, xs#0), 
                  Lit(#_module.List.Nil())))
               ==> 
              _module.__default.sorted#canCall(_module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(a#0, xs#0), 
                  Lit(#_module.List.Nil())))
               ==> _module.__default.sorted($LS($LZ), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LZ), 
                    #_module.List.Cons(a#0, xs#0), 
                    Lit(#_module.List.Nil())))
                 || (!_module.List.Nil_q(_module.__default.reverse(Tclass._module.G(), 
                      $LS($LZ), 
                      #_module.List.Cons(a#0, xs#0), 
                      Lit(#_module.List.Nil())))
                   ==> (var ys#1_0_1_0 := _module.List.tail(_module.__default.reverse(Tclass._module.G(), 
                          $LS($LS($LZ)), 
                          #_module.List.Cons(a#0, xs#0), 
                          Lit(#_module.List.Nil()))); 
                    (var a#1_0_1_0 := _module.List.head(_module.__default.reverse(Tclass._module.G(), 
                            $LS($LS($LZ)), 
                            #_module.List.Cons(a#0, xs#0), 
                            Lit(#_module.List.Nil()))); 
                      (forall y#1_0_1_0: Box :: 
                        { _module.__default.Below(a#1_0_1_0, y#1_0_1_0) } 
                          { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#1_0_1_0), 
                            y#1_0_1_0) } 
                        $IsBox(y#1_0_1_0, Tclass._module.G())
                           ==> 
                          MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#1_0_1_0), 
                              y#1_0_1_0)
                             > 0
                           ==> _module.__default.Below(a#1_0_1_0, y#1_0_1_0)))));
            assert {:id "id497"} {:subsumption 0} _module.__default.sorted($LS($LZ), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(a#0, xs#0), 
                  Lit(#_module.List.Nil())))
               ==> 
              _module.__default.sorted#canCall(_module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(a#0, xs#0), 
                  Lit(#_module.List.Nil())))
               ==> _module.__default.sorted($LS($LZ), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LZ), 
                    #_module.List.Cons(a#0, xs#0), 
                    Lit(#_module.List.Nil())))
                 || (!_module.List.Nil_q(_module.__default.reverse(Tclass._module.G(), 
                      $LS($LZ), 
                      #_module.List.Cons(a#0, xs#0), 
                      Lit(#_module.List.Nil())))
                   ==> (var ys#1_0_1_0 := _module.List.tail(_module.__default.reverse(Tclass._module.G(), 
                          $LS($LS($LZ)), 
                          #_module.List.Cons(a#0, xs#0), 
                          Lit(#_module.List.Nil()))); 
                    (var a#1_0_1_0 := _module.List.head(_module.__default.reverse(Tclass._module.G(), 
                            $LS($LS($LZ)), 
                            #_module.List.Cons(a#0, xs#0), 
                            Lit(#_module.List.Nil()))); 
                      _module.__default.sorted($LS($LS($LZ)), ys#1_0_1_0))));
            assert {:id "id498"} {:subsumption 0} _module.__default.sorted($LS($LZ), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(a#0, xs#0), 
                  Lit(#_module.List.Nil())))
               ==> 
              _module.__default.AllSorted#canCall(_module.__default.sequences($LS($LZ), ys#0))
               ==> _module.__default.AllSorted($LS($LZ), _module.__default.sequences($LS($LZ), ys#0))
                 || (_module.List.Nil_q(_module.__default.sequences($LS($LZ), ys#0)) ==> Lit(true));
            assert {:id "id499"} {:subsumption 0} _module.__default.sorted($LS($LZ), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(a#0, xs#0), 
                  Lit(#_module.List.Nil())))
               ==> 
              _module.__default.AllSorted#canCall(_module.__default.sequences($LS($LZ), ys#0))
               ==> _module.__default.AllSorted($LS($LZ), _module.__default.sequences($LS($LZ), ys#0))
                 || (!_module.List.Nil_q(_module.__default.sequences($LS($LZ), ys#0))
                   ==> (var y#1_0_1_4 := _module.List.tail(_module.__default.sequences($LS($LS($LZ)), ys#0)); 
                    (var xs#1_0_1_0 := $Unbox(_module.List.head(_module.__default.sequences($LS($LS($LZ)), ys#0))): DatatypeType; 
                      _module.__default.sorted#canCall(xs#1_0_1_0)
                         ==> _module.__default.sorted($LS($LZ), xs#1_0_1_0)
                           || (_module.List.Nil_q(xs#1_0_1_0) ==> Lit(true)))));
            assert {:id "id500"} {:subsumption 0} _module.__default.sorted($LS($LZ), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(a#0, xs#0), 
                  Lit(#_module.List.Nil())))
               ==> 
              _module.__default.AllSorted#canCall(_module.__default.sequences($LS($LZ), ys#0))
               ==> _module.__default.AllSorted($LS($LZ), _module.__default.sequences($LS($LZ), ys#0))
                 || (!_module.List.Nil_q(_module.__default.sequences($LS($LZ), ys#0))
                   ==> (var y#1_0_1_4 := _module.List.tail(_module.__default.sequences($LS($LS($LZ)), ys#0)); 
                    (var xs#1_0_1_0 := $Unbox(_module.List.head(_module.__default.sequences($LS($LS($LZ)), ys#0))): DatatypeType; 
                      _module.__default.sorted#canCall(xs#1_0_1_0)
                         ==> _module.__default.sorted($LS($LZ), xs#1_0_1_0)
                           || (!_module.List.Nil_q(xs#1_0_1_0)
                             ==> (var ys#1_0_1_2 := _module.List.tail(xs#1_0_1_0); 
                              (var a#1_0_1_2 := _module.List.head(xs#1_0_1_0); 
                                (forall y#1_0_1_2: Box :: 
                                  { _module.__default.Below(a#1_0_1_2, y#1_0_1_2) } 
                                    { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#1_0_1_2), 
                                      y#1_0_1_2) } 
                                  $IsBox(y#1_0_1_2, Tclass._module.G())
                                     ==> 
                                    MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#1_0_1_2), 
                                        y#1_0_1_2)
                                       > 0
                                     ==> _module.__default.Below(a#1_0_1_2, y#1_0_1_2))))))));
            assert {:id "id501"} {:subsumption 0} _module.__default.sorted($LS($LZ), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(a#0, xs#0), 
                  Lit(#_module.List.Nil())))
               ==> 
              _module.__default.AllSorted#canCall(_module.__default.sequences($LS($LZ), ys#0))
               ==> _module.__default.AllSorted($LS($LZ), _module.__default.sequences($LS($LZ), ys#0))
                 || (!_module.List.Nil_q(_module.__default.sequences($LS($LZ), ys#0))
                   ==> (var y#1_0_1_4 := _module.List.tail(_module.__default.sequences($LS($LS($LZ)), ys#0)); 
                    (var xs#1_0_1_0 := $Unbox(_module.List.head(_module.__default.sequences($LS($LS($LZ)), ys#0))): DatatypeType; 
                      _module.__default.sorted#canCall(xs#1_0_1_0)
                         ==> _module.__default.sorted($LS($LZ), xs#1_0_1_0)
                           || (!_module.List.Nil_q(xs#1_0_1_0)
                             ==> (var ys#1_0_1_2 := _module.List.tail(xs#1_0_1_0); 
                              (var a#1_0_1_2 := _module.List.head(xs#1_0_1_0); 
                                _module.__default.sorted($LS($LS($LZ)), ys#1_0_1_2)))))));
            assert {:id "id502"} {:subsumption 0} _module.__default.sorted($LS($LZ), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(a#0, xs#0), 
                  Lit(#_module.List.Nil())))
               ==> 
              _module.__default.AllSorted#canCall(_module.__default.sequences($LS($LZ), ys#0))
               ==> _module.__default.AllSorted($LS($LZ), _module.__default.sequences($LS($LZ), ys#0))
                 || (!_module.List.Nil_q(_module.__default.sequences($LS($LZ), ys#0))
                   ==> (var y#1_0_1_4 := _module.List.tail(_module.__default.sequences($LS($LS($LZ)), ys#0)); 
                    (var xs#1_0_1_0 := $Unbox(_module.List.head(_module.__default.sequences($LS($LS($LZ)), ys#0))): DatatypeType; 
                      _module.__default.AllSorted($LS($LS($LZ)), y#1_0_1_4))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(368,5)
            assume true;
            // ----- assume lhs ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(368,5)
            assume {:id "id488"} true;
            // ----- Hint2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(368,5)
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(368,5)
            ##xs#1_0_0_1 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_0_1, Tclass._module.List(Tclass._module.G()), $Heap);
            ##acc#1_0_0_0 := Lit(#_module.List.Nil());
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#1_0_0_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), Lit(#_module.List.Nil()));
            ##xs#1_0_0_0 := _module.__default.reverse(Tclass._module.G(), 
              $LS($LZ), 
              #_module.List.Cons(a#0, xs#0), 
              Lit(#_module.List.Nil()));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_0_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.sorted#canCall(_module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(a#0, xs#0), 
                Lit(#_module.List.Nil())));
            assume _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), Lit(#_module.List.Nil()))
               && _module.__default.sorted#canCall(_module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(a#0, xs#0), 
                  Lit(#_module.List.Nil())));
            // ----- assert line2 <== line3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(368,5)
            assert {:id "id489"} {:subsumption 0} Lit(true)
               ==> 
              _module.__default.sorted#canCall(_module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(a#0, xs#0), 
                  Lit(#_module.List.Nil())))
               ==> _module.__default.sorted($LS($LZ), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LZ), 
                    #_module.List.Cons(a#0, xs#0), 
                    Lit(#_module.List.Nil())))
                 || (_module.List.Nil_q(_module.__default.reverse(Tclass._module.G(), 
                      $LS($LZ), 
                      #_module.List.Cons(a#0, xs#0), 
                      Lit(#_module.List.Nil())))
                   ==> Lit(true));
            assert {:id "id490"} {:subsumption 0} Lit(true)
               ==> 
              _module.__default.sorted#canCall(_module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(a#0, xs#0), 
                  Lit(#_module.List.Nil())))
               ==> _module.__default.sorted($LS($LZ), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LZ), 
                    #_module.List.Cons(a#0, xs#0), 
                    Lit(#_module.List.Nil())))
                 || (!_module.List.Nil_q(_module.__default.reverse(Tclass._module.G(), 
                      $LS($LZ), 
                      #_module.List.Cons(a#0, xs#0), 
                      Lit(#_module.List.Nil())))
                   ==> (var ys#1_0_0_0 := _module.List.tail(_module.__default.reverse(Tclass._module.G(), 
                          $LS($LS($LZ)), 
                          #_module.List.Cons(a#0, xs#0), 
                          Lit(#_module.List.Nil()))); 
                    (var a#1_0_0_0 := _module.List.head(_module.__default.reverse(Tclass._module.G(), 
                            $LS($LS($LZ)), 
                            #_module.List.Cons(a#0, xs#0), 
                            Lit(#_module.List.Nil()))); 
                      (forall y#1_0_0_0: Box :: 
                        { _module.__default.Below(a#1_0_0_0, y#1_0_0_0) } 
                          { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#1_0_0_0), 
                            y#1_0_0_0) } 
                        $IsBox(y#1_0_0_0, Tclass._module.G())
                           ==> 
                          MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#1_0_0_0), 
                              y#1_0_0_0)
                             > 0
                           ==> _module.__default.Below(a#1_0_0_0, y#1_0_0_0)))));
            assert {:id "id491"} {:subsumption 0} Lit(true)
               ==> 
              _module.__default.sorted#canCall(_module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(a#0, xs#0), 
                  Lit(#_module.List.Nil())))
               ==> _module.__default.sorted($LS($LZ), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LZ), 
                    #_module.List.Cons(a#0, xs#0), 
                    Lit(#_module.List.Nil())))
                 || (!_module.List.Nil_q(_module.__default.reverse(Tclass._module.G(), 
                      $LS($LZ), 
                      #_module.List.Cons(a#0, xs#0), 
                      Lit(#_module.List.Nil())))
                   ==> (var ys#1_0_0_0 := _module.List.tail(_module.__default.reverse(Tclass._module.G(), 
                          $LS($LS($LZ)), 
                          #_module.List.Cons(a#0, xs#0), 
                          Lit(#_module.List.Nil()))); 
                    (var a#1_0_0_0 := _module.List.head(_module.__default.reverse(Tclass._module.G(), 
                            $LS($LS($LZ)), 
                            #_module.List.Cons(a#0, xs#0), 
                            Lit(#_module.List.Nil()))); 
                      _module.__default.sorted($LS($LS($LZ)), ys#1_0_0_0))));
            assume false;
        }

        assume {:id "id509"} true
           ==> _module.__default.AllSorted($LS($LZ), 
            #_module.List.Cons($Box(_module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(a#0, xs#0), 
                  Lit(#_module.List.Nil()))), 
              _module.__default.sequences($LS($LZ), ys#0)));
    }
}



procedure {:verboseName "sorted_reverse (well-formedness)"} CheckWellFormed$$_module.__default.sorted__reverse(xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(xs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(xs#0), 
    ys#0: DatatypeType
       where $Is(ys#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(ys#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(ys#0));
  free requires 3 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "sorted_reverse (call)"} Call$$_module.__default.sorted__reverse(xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(xs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(xs#0), 
    ys#0: DatatypeType
       where $Is(ys#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(ys#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(ys#0));
  // user-defined preconditions
  requires {:id "id517"} _module.__default.sorted#canCall(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, ys#0))
     ==> _module.__default.sorted($LS($LZ), _module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, ys#0))
       || (_module.List.Nil_q(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, ys#0))
         ==> Lit(true));
  requires {:id "id518"} _module.__default.sorted#canCall(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, ys#0))
     ==> _module.__default.sorted($LS($LZ), _module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, ys#0))
       || (!_module.List.Nil_q(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, ys#0))
         ==> (var ys#1 := _module.List.tail(_module.__default.reverse(Tclass._module.G(), $LS($LS($LZ)), xs#0, ys#0)); 
          (var a#2 := _module.List.head(_module.__default.reverse(Tclass._module.G(), $LS($LS($LZ)), xs#0, ys#0)); 
            (forall y#0: Box :: 
              { _module.__default.Below(a#2, y#0) } 
                { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#1), y#0) } 
              $IsBox(y#0, Tclass._module.G())
                 ==> 
                MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#1), y#0)
                   > 0
                 ==> _module.__default.Below(a#2, y#0)))));
  requires {:id "id519"} _module.__default.sorted#canCall(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, ys#0))
     ==> _module.__default.sorted($LS($LZ), _module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, ys#0))
       || (!_module.List.Nil_q(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, ys#0))
         ==> (var ys#1 := _module.List.tail(_module.__default.reverse(Tclass._module.G(), $LS($LS($LZ)), xs#0, ys#0)); 
          (var a#2 := _module.List.head(_module.__default.reverse(Tclass._module.G(), $LS($LS($LZ)), xs#0, ys#0)); 
            _module.__default.sorted($LS($LS($LZ)), ys#1))));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.sorted#canCall(ys#0);
  free ensures {:id "id520"} _module.__default.sorted#canCall(ys#0)
     && 
    _module.__default.sorted($LS($LZ), ys#0)
     && (if _module.List.Nil_q(ys#0)
       then true
       else (var ys#4 := _module.List.tail(ys#0); 
        (var a#5 := _module.List.head(ys#0); 
          (forall y#3: Box :: 
              { _module.__default.Below(a#5, y#3) } 
                { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#4), y#3) } 
              $IsBox(y#3, Tclass._module.G())
                 ==> 
                MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#4), y#3)
                   > 0
                 ==> _module.__default.Below(a#5, y#3))
             && _module.__default.sorted($LS($LZ), ys#4))));
  free ensures (forall a#1: Box, b#1: Box :: 
    { _module.__default.Below(a#1, b#1) } 
      { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#0), b#1), MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), xs#0), a#1) } 
    $IsBox(a#1, Tclass._module.G()) && $IsBox(b#1, Tclass._module.G())
       ==> _module.__default.multiset__of#canCall(Tclass._module.G(), xs#0)
         && (MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), xs#0), a#1)
             > 0
           ==> _module.__default.multiset__of#canCall(Tclass._module.G(), ys#0)
             && (MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#0), b#1)
                 > 0
               ==> _module.__default.Below#canCall(a#1, b#1))));
  free ensures {:id "id521"} (forall a#1: Box, b#1: Box :: 
    { _module.__default.Below(a#1, b#1) } 
      { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#0), b#1), MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), xs#0), a#1) } 
    $IsBox(a#1, Tclass._module.G()) && $IsBox(b#1, Tclass._module.G())
       ==> 
      MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), xs#0), a#1)
           > 0
         && MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#0), b#1)
           > 0
       ==> _module.__default.Below(a#1, b#1));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "sorted_reverse (correctness)"} Impl$$_module.__default.sorted__reverse(xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(xs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(xs#0), 
    ys#0: DatatypeType
       where $Is(ys#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(ys#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(ys#0))
   returns ($_reverifyPost: bool);
  free requires 3 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id522"} _module.__default.sorted#canCall(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, ys#0))
     && 
    _module.__default.sorted($LS($LZ), _module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, ys#0))
     && (if _module.List.Nil_q(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, ys#0))
       then true
       else (var ys#6 := _module.List.tail(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, ys#0)); 
        (var a#7 := _module.List.head(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, ys#0)); 
          (forall y#5: Box :: 
              { _module.__default.Below(a#7, y#5) } 
                { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#6), y#5) } 
              $IsBox(y#5, Tclass._module.G())
                 ==> 
                MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#6), y#5)
                   > 0
                 ==> _module.__default.Below(a#7, y#5))
             && _module.__default.sorted($LS($LZ), ys#6))));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.sorted#canCall(ys#0);
  ensures {:id "id523"} _module.__default.sorted#canCall(ys#0)
     ==> _module.__default.sorted($LS($LZ), ys#0)
       || (_module.List.Nil_q(ys#0) ==> Lit(true));
  ensures {:id "id524"} _module.__default.sorted#canCall(ys#0)
     ==> _module.__default.sorted($LS($LZ), ys#0)
       || (!_module.List.Nil_q(ys#0)
         ==> (var ys#7 := _module.List.tail(ys#0); 
          (var a#8 := _module.List.head(ys#0); 
            (forall y#6: Box :: 
              { _module.__default.Below(a#8, y#6) } 
                { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#7), y#6) } 
              $IsBox(y#6, Tclass._module.G())
                 ==> 
                MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#7), y#6)
                   > 0
                 ==> _module.__default.Below(a#8, y#6)))));
  ensures {:id "id525"} _module.__default.sorted#canCall(ys#0)
     ==> _module.__default.sorted($LS($LZ), ys#0)
       || (!_module.List.Nil_q(ys#0)
         ==> (var ys#7 := _module.List.tail(ys#0); 
          (var a#8 := _module.List.head(ys#0); 
            _module.__default.sorted($LS($LS($LZ)), ys#7))));
  free ensures (forall a#1: Box, b#1: Box :: 
    { _module.__default.Below(a#1, b#1) } 
      { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#0), b#1), MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), xs#0), a#1) } 
    $IsBox(a#1, Tclass._module.G()) && $IsBox(b#1, Tclass._module.G())
       ==> _module.__default.multiset__of#canCall(Tclass._module.G(), xs#0)
         && (MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), xs#0), a#1)
             > 0
           ==> _module.__default.multiset__of#canCall(Tclass._module.G(), ys#0)
             && (MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#0), b#1)
                 > 0
               ==> _module.__default.Below#canCall(a#1, b#1))));
  ensures {:id "id526"} (forall a#1: Box, b#1: Box :: 
    { _module.__default.Below(a#1, b#1) } 
      { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#0), b#1), MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), xs#0), a#1) } 
    $IsBox(a#1, Tclass._module.G()) && $IsBox(b#1, Tclass._module.G())
       ==> 
      MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), xs#0), a#1)
           > 0
         && MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#0), b#1)
           > 0
       ==> _module.__default.Below(a#1, b#1));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "sorted_reverse (correctness)"} Impl$$_module.__default.sorted__reverse(xs#0: DatatypeType, ys#0: DatatypeType) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $initHeapForallStmt#0: Heap;
  var _mcc#0#0_0: Box;
  var _mcc#1#0_0: DatatypeType;
  var rest#0_0: DatatypeType;
  var let#0_0#0#0: DatatypeType;
  var x#0_0: Box;
  var let#0_1#0#0: Box;
  var xs##0_0: DatatypeType;
  var ys##0_0: DatatypeType;

    // AddMethodImpl: sorted_reverse, Impl$$_module.__default.sorted__reverse
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume $IsA#_module.List(xs#0);
    assume $IsA#_module.List(ys#0);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#xs0#0: DatatypeType, $ih#ys0#0: DatatypeType :: 
      { _module.__default.multiset__of(Tclass._module.G(), $LS($LZ), $ih#xs0#0), _module.__default.multiset__of(Tclass._module.G(), $LS($LZ), $ih#ys0#0) } 
        { _module.__default.reverse(Tclass._module.G(), $LS($LZ), $ih#xs0#0, $ih#ys0#0) } 
      $Is($ih#xs0#0, Tclass._module.List(Tclass._module.G()))
           && $Is($ih#ys0#0, Tclass._module.List(Tclass._module.G()))
           && _module.__default.sorted($LS($LZ), 
            _module.__default.reverse(Tclass._module.G(), $LS($LZ), $ih#xs0#0, $ih#ys0#0))
           && (DtRank($ih#xs0#0) < DtRank(xs#0)
             || (DtRank($ih#xs0#0) == DtRank(xs#0) && DtRank($ih#ys0#0) < DtRank(ys#0)))
         ==> _module.__default.sorted($LS($LZ), $ih#ys0#0)
           && (forall a#10: Box, b#2: Box :: 
            { _module.__default.Below(a#10, b#2) } 
              { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), $ih#ys0#0), b#2), MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), $ih#xs0#0), a#10) } 
            $IsBox(a#10, Tclass._module.G()) && $IsBox(b#2, Tclass._module.G())
               ==> 
              MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), $ih#xs0#0), a#10)
                   > 0
                 && MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), $ih#ys0#0), b#2)
                   > 0
               ==> _module.__default.Below(a#10, b#2)));
    $_reverifyPost := false;
    assume true;
    havoc _mcc#0#0_0, _mcc#1#0_0;
    if (xs#0 == #_module.List.Nil())
    {
    }
    else if (xs#0 == #_module.List.Cons(_mcc#0#0_0, _mcc#1#0_0))
    {
        assume $IsBox(_mcc#0#0_0, Tclass._module.G());
        assume $Is(_mcc#1#0_0, Tclass._module.List(Tclass._module.G()));
        havoc rest#0_0;
        assume $Is(rest#0_0, Tclass._module.List(Tclass._module.G()))
           && $IsAlloc(rest#0_0, Tclass._module.List(Tclass._module.G()), $Heap);
        assume {:id "id527"} let#0_0#0#0 == _mcc#1#0_0;
        assume true;
        assume true;
        // CheckWellformedWithResult: any expression
        assume $Is(let#0_0#0#0, Tclass._module.List(Tclass._module.G()));
        assume {:id "id528"} rest#0_0 == let#0_0#0#0;
        havoc x#0_0;
        assume $IsBox(x#0_0, Tclass._module.G())
           && $IsAllocBox(x#0_0, Tclass._module.G(), $Heap);
        assume {:id "id529"} let#0_1#0#0 == _mcc#0#0_0;
        assume true;
        assume true;
        // CheckWellformedWithResult: any expression
        assume $IsBox(let#0_1#0#0, Tclass._module.G());
        assume {:id "id530"} x#0_0 == let#0_1#0#0;
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(386,19)
        // TrCallStmt: Before ProcessCallStmt
        assume true;
        // ProcessCallStmt: CheckSubrange
        xs##0_0 := rest#0_0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        ys##0_0 := #_module.List.Cons(x#0_0, ys#0);
        assert {:id "id531"} DtRank(xs##0_0) < DtRank(xs#0)
           || (DtRank(xs##0_0) == DtRank(xs#0) && DtRank(ys##0_0) < DtRank(ys#0));
        call {:id "id532"} Call$$_module.__default.sorted__reverse(xs##0_0, ys##0_0);
        // TrCallStmt: After ProcessCallStmt
    }
    else
    {
        assume false;
    }
}



procedure {:verboseName "sorted_insertInMiddle (well-formedness)"} CheckWellFormed$$_module.__default.sorted__insertInMiddle(xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(xs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(xs#0), 
    a#0: Box
       where $IsBox(a#0, Tclass._module.G()) && $IsAllocBox(a#0, Tclass._module.G(), $Heap), 
    ys#0: DatatypeType
       where $Is(ys#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(ys#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(ys#0));
  free requires 5 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "sorted_insertInMiddle (call)"} Call$$_module.__default.sorted__insertInMiddle(xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(xs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(xs#0), 
    a#0: Box
       where $IsBox(a#0, Tclass._module.G()) && $IsAllocBox(a#0, Tclass._module.G(), $Heap), 
    ys#0: DatatypeType
       where $Is(ys#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(ys#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(ys#0));
  // user-defined preconditions
  requires {:id "id543"} _module.__default.sorted#canCall(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, ys#0))
     ==> _module.__default.sorted($LS($LZ), _module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, ys#0))
       || (_module.List.Nil_q(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, ys#0))
         ==> Lit(true));
  requires {:id "id544"} _module.__default.sorted#canCall(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, ys#0))
     ==> _module.__default.sorted($LS($LZ), _module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, ys#0))
       || (!_module.List.Nil_q(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, ys#0))
         ==> (var ys#1 := _module.List.tail(_module.__default.reverse(Tclass._module.G(), $LS($LS($LZ)), xs#0, ys#0)); 
          (var a#1 := _module.List.head(_module.__default.reverse(Tclass._module.G(), $LS($LS($LZ)), xs#0, ys#0)); 
            (forall y#4: Box :: 
              { _module.__default.Below(a#1, y#4) } 
                { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#1), y#4) } 
              $IsBox(y#4, Tclass._module.G())
                 ==> 
                MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#1), y#4)
                   > 0
                 ==> _module.__default.Below(a#1, y#4)))));
  requires {:id "id545"} _module.__default.sorted#canCall(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, ys#0))
     ==> _module.__default.sorted($LS($LZ), _module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, ys#0))
       || (!_module.List.Nil_q(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, ys#0))
         ==> (var ys#1 := _module.List.tail(_module.__default.reverse(Tclass._module.G(), $LS($LS($LZ)), xs#0, ys#0)); 
          (var a#1 := _module.List.head(_module.__default.reverse(Tclass._module.G(), $LS($LS($LZ)), xs#0, ys#0)); 
            _module.__default.sorted($LS($LS($LZ)), ys#1))));
  requires {:id "id546"} (forall y#1: Box :: 
    { _module.__default.Below(y#1, a#0) } 
      { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), xs#0), y#1) } 
    $IsBox(y#1, Tclass._module.G())
       ==> 
      MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), xs#0), y#1)
         > 0
       ==> _module.__default.Below(y#1, a#0));
  requires {:id "id547"} (forall y#3: Box :: 
    { _module.__default.Below(a#0, y#3) } 
      { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#0), y#3) } 
    $IsBox(y#3, Tclass._module.G())
       ==> 
      MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#0), y#3)
         > 0
       ==> _module.__default.Below(a#0, y#3));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.reverse#canCall(Tclass._module.G(), xs#0, #_module.List.Cons(a#0, ys#0))
     && _module.__default.sorted#canCall(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, #_module.List.Cons(a#0, ys#0)));
  free ensures {:id "id548"} _module.__default.sorted#canCall(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, #_module.List.Cons(a#0, ys#0)))
     && 
    _module.__default.sorted($LS($LZ), 
      _module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, #_module.List.Cons(a#0, ys#0)))
     && (if _module.List.Nil_q(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, #_module.List.Cons(a#0, ys#0)))
       then true
       else (var ys#4 := _module.List.tail(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, #_module.List.Cons(a#0, ys#0))); 
        (var a#4 := _module.List.head(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, #_module.List.Cons(a#0, ys#0))); 
          (forall y#7: Box :: 
              { _module.__default.Below(a#4, y#7) } 
                { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#4), y#7) } 
              $IsBox(y#7, Tclass._module.G())
                 ==> 
                MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#4), y#7)
                   > 0
                 ==> _module.__default.Below(a#4, y#7))
             && _module.__default.sorted($LS($LZ), ys#4))));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "sorted_insertInMiddle (correctness)"} Impl$$_module.__default.sorted__insertInMiddle(xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(xs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(xs#0), 
    a#0: Box
       where $IsBox(a#0, Tclass._module.G()) && $IsAllocBox(a#0, Tclass._module.G(), $Heap), 
    ys#0: DatatypeType
       where $Is(ys#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(ys#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(ys#0))
   returns ($_reverifyPost: bool);
  free requires 5 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id549"} _module.__default.sorted#canCall(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, ys#0))
     && 
    _module.__default.sorted($LS($LZ), _module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, ys#0))
     && (if _module.List.Nil_q(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, ys#0))
       then true
       else (var ys#6 := _module.List.tail(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, ys#0)); 
        (var a#6 := _module.List.head(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, ys#0)); 
          (forall y#9: Box :: 
              { _module.__default.Below(a#6, y#9) } 
                { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#6), y#9) } 
              $IsBox(y#9, Tclass._module.G())
                 ==> 
                MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#6), y#9)
                   > 0
                 ==> _module.__default.Below(a#6, y#9))
             && _module.__default.sorted($LS($LZ), ys#6))));
  free requires {:id "id550"} (forall y#1: Box :: 
    { _module.__default.Below(y#1, a#0) } 
      { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), xs#0), y#1) } 
    $IsBox(y#1, Tclass._module.G())
       ==> 
      MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), xs#0), y#1)
         > 0
       ==> _module.__default.Below(y#1, a#0));
  free requires {:id "id551"} (forall y#3: Box :: 
    { _module.__default.Below(a#0, y#3) } 
      { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#0), y#3) } 
    $IsBox(y#3, Tclass._module.G())
       ==> 
      MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#0), y#3)
         > 0
       ==> _module.__default.Below(a#0, y#3));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.reverse#canCall(Tclass._module.G(), xs#0, #_module.List.Cons(a#0, ys#0))
     && _module.__default.sorted#canCall(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, #_module.List.Cons(a#0, ys#0)));
  ensures {:id "id552"} _module.__default.sorted#canCall(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, #_module.List.Cons(a#0, ys#0)))
     ==> _module.__default.sorted($LS($LZ), 
        _module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, #_module.List.Cons(a#0, ys#0)))
       || (_module.List.Nil_q(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, #_module.List.Cons(a#0, ys#0)))
         ==> Lit(true));
  ensures {:id "id553"} _module.__default.sorted#canCall(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, #_module.List.Cons(a#0, ys#0)))
     ==> _module.__default.sorted($LS($LZ), 
        _module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, #_module.List.Cons(a#0, ys#0)))
       || (!_module.List.Nil_q(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, #_module.List.Cons(a#0, ys#0)))
         ==> (var ys#7 := _module.List.tail(_module.__default.reverse(Tclass._module.G(), $LS($LS($LZ)), xs#0, #_module.List.Cons(a#0, ys#0))); 
          (var a#7 := _module.List.head(_module.__default.reverse(Tclass._module.G(), $LS($LS($LZ)), xs#0, #_module.List.Cons(a#0, ys#0))); 
            (forall y#10: Box :: 
              { _module.__default.Below(a#7, y#10) } 
                { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#7), y#10) } 
              $IsBox(y#10, Tclass._module.G())
                 ==> 
                MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#7), y#10)
                   > 0
                 ==> _module.__default.Below(a#7, y#10)))));
  ensures {:id "id554"} _module.__default.sorted#canCall(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, #_module.List.Cons(a#0, ys#0)))
     ==> _module.__default.sorted($LS($LZ), 
        _module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, #_module.List.Cons(a#0, ys#0)))
       || (!_module.List.Nil_q(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, #_module.List.Cons(a#0, ys#0)))
         ==> (var ys#7 := _module.List.tail(_module.__default.reverse(Tclass._module.G(), $LS($LS($LZ)), xs#0, #_module.List.Cons(a#0, ys#0))); 
          (var a#7 := _module.List.head(_module.__default.reverse(Tclass._module.G(), $LS($LS($LZ)), xs#0, #_module.List.Cons(a#0, ys#0))); 
            _module.__default.sorted($LS($LS($LZ)), ys#7))));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "sorted_insertInMiddle (correctness)"} Impl$$_module.__default.sorted__insertInMiddle(xs#0: DatatypeType, a#0: Box, ys#0: DatatypeType) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $initHeapForallStmt#0: Heap;
  var _mcc#0#0_0: Box;
  var _mcc#1#0_0: DatatypeType;
  var xs'#0_0: DatatypeType;
  var let#0_0#0#0: DatatypeType;
  var b#0_0: Box;
  var let#0_1#0#0: Box;
  var ##xs#0_0_0_0: DatatypeType;
  var ##xs#0_0_0_1: DatatypeType;
  var ##acc#0_0_0_0: DatatypeType;
  var xs##0_0_0_0: DatatypeType;
  var ys##0_0_0_0: DatatypeType;
  var xs##0_0_0_1: DatatypeType;
  var a##0_0_0_0: Box;
  var ys##0_0_0_1: DatatypeType;
  var ##xs#0_0_0_2: DatatypeType;
  var ##xs#0_0_0_3: DatatypeType;
  var ##acc#0_0_0_1: DatatypeType;
  var ##xs#0_0_1_0: DatatypeType;
  var ##xs#0_0_1_1: DatatypeType;
  var ##acc#0_0_1_0: DatatypeType;
  var ##xs#0_0_1_2: DatatypeType;
  var xs##0_0_1_0: DatatypeType;
  var ys##0_0_1_0: DatatypeType;
  var zs##0_0_1_0: DatatypeType;
  var ##xs#0_0_1_3: DatatypeType;
  var ##xs#0_0_1_4: DatatypeType;
  var ##acc#0_0_1_1: DatatypeType;
  var xs##0_0_2_0: DatatypeType;
  var ys##0_0_2_0: DatatypeType;
  var ##xs#0_0_2_0: DatatypeType;
  var ##xs#0_0_2_1: DatatypeType;
  var ##acc#0_0_2_0: DatatypeType;
  var ##xs#0_0_2_2: DatatypeType;

    // AddMethodImpl: sorted_insertInMiddle, Impl$$_module.__default.sorted__insertInMiddle
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume $IsA#_module.List(xs#0);
    assume $IsA#_module.List(ys#0);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#xs0#0: DatatypeType, $ih#ys0#0: DatatypeType :: 
      { #_module.List.Cons(a#0, $ih#ys0#0), _module.__default.multiset__of(Tclass._module.G(), $LS($LZ), $ih#xs0#0) } 
        { _module.__default.multiset__of(Tclass._module.G(), $LS($LZ), $ih#ys0#0), _module.__default.multiset__of(Tclass._module.G(), $LS($LZ), $ih#xs0#0) } 
      $Is($ih#xs0#0, Tclass._module.List(Tclass._module.G()))
           && $Is($ih#ys0#0, Tclass._module.List(Tclass._module.G()))
           && 
          _module.__default.sorted($LS($LZ), 
            _module.__default.reverse(Tclass._module.G(), $LS($LZ), $ih#xs0#0, $ih#ys0#0))
           && (forall y#12: Box :: 
            { _module.__default.Below(y#12, a#0) } 
              { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), $ih#xs0#0), y#12) } 
            $IsBox(y#12, Tclass._module.G())
               ==> 
              MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), $ih#xs0#0), y#12)
                 > 0
               ==> _module.__default.Below(y#12, a#0))
           && (forall y#13: Box :: 
            { _module.__default.Below(a#0, y#13) } 
              { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), $ih#ys0#0), y#13) } 
            $IsBox(y#13, Tclass._module.G())
               ==> 
              MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), $ih#ys0#0), y#13)
                 > 0
               ==> _module.__default.Below(a#0, y#13))
           && (DtRank($ih#xs0#0) < DtRank(xs#0)
             || (DtRank($ih#xs0#0) == DtRank(xs#0) && DtRank($ih#ys0#0) < DtRank(ys#0)))
         ==> _module.__default.sorted($LS($LZ), 
          _module.__default.reverse(Tclass._module.G(), $LS($LZ), $ih#xs0#0, #_module.List.Cons(a#0, $ih#ys0#0))));
    $_reverifyPost := false;
    assume true;
    havoc _mcc#0#0_0, _mcc#1#0_0;
    if (xs#0 == #_module.List.Nil())
    {
    }
    else if (xs#0 == #_module.List.Cons(_mcc#0#0_0, _mcc#1#0_0))
    {
        assume $IsBox(_mcc#0#0_0, Tclass._module.G());
        assume $Is(_mcc#1#0_0, Tclass._module.List(Tclass._module.G()));
        havoc xs'#0_0;
        assume $Is(xs'#0_0, Tclass._module.List(Tclass._module.G()))
           && $IsAlloc(xs'#0_0, Tclass._module.List(Tclass._module.G()), $Heap);
        assume {:id "id555"} let#0_0#0#0 == _mcc#1#0_0;
        assume true;
        assume true;
        // CheckWellformedWithResult: any expression
        assume $Is(let#0_0#0#0, Tclass._module.List(Tclass._module.G()));
        assume {:id "id556"} xs'#0_0 == let#0_0#0#0;
        havoc b#0_0;
        assume $IsBox(b#0_0, Tclass._module.G())
           && $IsAllocBox(b#0_0, Tclass._module.G(), $Heap);
        assume {:id "id557"} let#0_1#0#0 == _mcc#0#0_0;
        assume true;
        assume true;
        // CheckWellformedWithResult: any expression
        assume $IsBox(let#0_1#0#0, Tclass._module.G());
        assume {:id "id558"} b#0_0 == let#0_1#0#0;
        // ----- calc statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(398,7)
        // Assume Fuel Constant
        if (*)
        {
            // ----- assert wf[initial] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(398,7)
            assume true;
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(398,7)
            assume true;
            // ----- assume lhs ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(398,7)
            assume {:id "id571"} true;
            // ----- Hint0 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(398,7)
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(400,25)
            // TrCallStmt: Before ProcessCallStmt
            assume true;
            // ProcessCallStmt: CheckSubrange
            xs##0_0_2_0 := xs#0;
            assume true;
            // ProcessCallStmt: CheckSubrange
            ys##0_0_2_0 := ys#0;
            call {:id "id572"} Call$$_module.__default.sorted__reverse(xs##0_0_2_0, ys##0_0_2_0);
            // TrCallStmt: After ProcessCallStmt
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(398,7)
            ##xs#0_0_2_1 := xs'#0_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_2_1, Tclass._module.List(Tclass._module.G()), $Heap);
            ##acc#0_0_2_0 := #_module.List.Cons(b#0_0, ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#0_0_2_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.reverse#canCall(Tclass._module.G(), xs'#0_0, #_module.List.Cons(b#0_0, ys#0));
            ##xs#0_0_2_0 := _module.__default.reverse(Tclass._module.G(), $LS($LZ), xs'#0_0, #_module.List.Cons(b#0_0, ys#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_2_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.sorted#canCall(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs'#0_0, #_module.List.Cons(b#0_0, ys#0)));
            if (_module.__default.sorted($LS($LZ), 
              _module.__default.reverse(Tclass._module.G(), $LS($LZ), xs'#0_0, #_module.List.Cons(b#0_0, ys#0))))
            {
                ##xs#0_0_2_2 := #_module.List.Cons(a#0, ys#0);
                // assume allocatedness for argument to function
                assume $IsAlloc(##xs#0_0_2_2, Tclass._module.List(Tclass._module.G()), $Heap);
                assume _module.__default.sorted#canCall(#_module.List.Cons(a#0, ys#0));
            }

            assume _module.__default.reverse#canCall(Tclass._module.G(), xs'#0_0, #_module.List.Cons(b#0_0, ys#0))
               && _module.__default.sorted#canCall(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs'#0_0, #_module.List.Cons(b#0_0, ys#0)))
               && (_module.__default.sorted($LS($LZ), 
                  _module.__default.reverse(Tclass._module.G(), $LS($LZ), xs'#0_0, #_module.List.Cons(b#0_0, ys#0)))
                 ==> _module.__default.sorted#canCall(#_module.List.Cons(a#0, ys#0)));
            // ----- assert line0 ==> line1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(398,7)
            assert {:id "id573"} {:subsumption 0} Lit(true)
               ==> 
              _module.__default.sorted#canCall(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs'#0_0, #_module.List.Cons(b#0_0, ys#0)))
               ==> _module.__default.sorted($LS($LZ), 
                  _module.__default.reverse(Tclass._module.G(), $LS($LZ), xs'#0_0, #_module.List.Cons(b#0_0, ys#0)))
                 || (_module.List.Nil_q(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs'#0_0, #_module.List.Cons(b#0_0, ys#0)))
                   ==> Lit(true));
            assert {:id "id574"} {:subsumption 0} Lit(true)
               ==> 
              _module.__default.sorted#canCall(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs'#0_0, #_module.List.Cons(b#0_0, ys#0)))
               ==> _module.__default.sorted($LS($LZ), 
                  _module.__default.reverse(Tclass._module.G(), $LS($LZ), xs'#0_0, #_module.List.Cons(b#0_0, ys#0)))
                 || (!_module.List.Nil_q(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs'#0_0, #_module.List.Cons(b#0_0, ys#0)))
                   ==> (var ys#0_0_2_0 := _module.List.tail(_module.__default.reverse(Tclass._module.G(), $LS($LS($LZ)), xs'#0_0, #_module.List.Cons(b#0_0, ys#0))); 
                    (var a#0_0_2_0 := _module.List.head(_module.__default.reverse(Tclass._module.G(), $LS($LS($LZ)), xs'#0_0, #_module.List.Cons(b#0_0, ys#0))); 
                      (forall y#0_0_2_0: Box :: 
                        { _module.__default.Below(a#0_0_2_0, y#0_0_2_0) } 
                          { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#0_0_2_0), 
                            y#0_0_2_0) } 
                        $IsBox(y#0_0_2_0, Tclass._module.G())
                           ==> 
                          MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#0_0_2_0), 
                              y#0_0_2_0)
                             > 0
                           ==> _module.__default.Below(a#0_0_2_0, y#0_0_2_0)))));
            assert {:id "id575"} {:subsumption 0} Lit(true)
               ==> 
              _module.__default.sorted#canCall(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs'#0_0, #_module.List.Cons(b#0_0, ys#0)))
               ==> _module.__default.sorted($LS($LZ), 
                  _module.__default.reverse(Tclass._module.G(), $LS($LZ), xs'#0_0, #_module.List.Cons(b#0_0, ys#0)))
                 || (!_module.List.Nil_q(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs'#0_0, #_module.List.Cons(b#0_0, ys#0)))
                   ==> (var ys#0_0_2_0 := _module.List.tail(_module.__default.reverse(Tclass._module.G(), $LS($LS($LZ)), xs'#0_0, #_module.List.Cons(b#0_0, ys#0))); 
                    (var a#0_0_2_0 := _module.List.head(_module.__default.reverse(Tclass._module.G(), $LS($LS($LZ)), xs'#0_0, #_module.List.Cons(b#0_0, ys#0))); 
                      _module.__default.sorted($LS($LS($LZ)), ys#0_0_2_0))));
            assert {:id "id576"} {:subsumption 0} Lit(true)
               ==> 
              _module.__default.sorted#canCall(#_module.List.Cons(a#0, ys#0))
               ==> _module.__default.sorted($LS($LZ), #_module.List.Cons(a#0, ys#0))
                 || (_module.List.Nil_q(#_module.List.Cons(a#0, ys#0)) ==> Lit(true));
            assert {:id "id577"} {:subsumption 0} Lit(true)
               ==> 
              _module.__default.sorted#canCall(#_module.List.Cons(a#0, ys#0))
               ==> _module.__default.sorted($LS($LZ), #_module.List.Cons(a#0, ys#0))
                 || (!_module.List.Nil_q(#_module.List.Cons(a#0, ys#0))
                   ==> (var ys#0_0_2_2 := _module.List.tail(#_module.List.Cons(a#0, ys#0)); 
                    (var a#0_0_2_2 := _module.List.head(#_module.List.Cons(a#0, ys#0)); 
                      (forall y#0_0_2_2: Box :: 
                        { _module.__default.Below(a#0_0_2_2, y#0_0_2_2) } 
                          { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#0_0_2_2), 
                            y#0_0_2_2) } 
                        $IsBox(y#0_0_2_2, Tclass._module.G())
                           ==> 
                          MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#0_0_2_2), 
                              y#0_0_2_2)
                             > 0
                           ==> _module.__default.Below(a#0_0_2_2, y#0_0_2_2)))));
            assert {:id "id578"} {:subsumption 0} Lit(true)
               ==> 
              _module.__default.sorted#canCall(#_module.List.Cons(a#0, ys#0))
               ==> _module.__default.sorted($LS($LZ), #_module.List.Cons(a#0, ys#0))
                 || (!_module.List.Nil_q(#_module.List.Cons(a#0, ys#0))
                   ==> (var ys#0_0_2_2 := _module.List.tail(#_module.List.Cons(a#0, ys#0)); 
                    (var a#0_0_2_2 := _module.List.head(#_module.List.Cons(a#0, ys#0)); 
                      _module.__default.sorted($LS($LS($LZ)), ys#0_0_2_2))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(398,7)
            ##xs#0_0_1_1 := xs'#0_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_1_1, Tclass._module.List(Tclass._module.G()), $Heap);
            ##acc#0_0_1_0 := #_module.List.Cons(b#0_0, ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#0_0_1_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.reverse#canCall(Tclass._module.G(), xs'#0_0, #_module.List.Cons(b#0_0, ys#0));
            ##xs#0_0_1_0 := _module.__default.reverse(Tclass._module.G(), $LS($LZ), xs'#0_0, #_module.List.Cons(b#0_0, ys#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_1_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.sorted#canCall(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs'#0_0, #_module.List.Cons(b#0_0, ys#0)));
            if (_module.__default.sorted($LS($LZ), 
              _module.__default.reverse(Tclass._module.G(), $LS($LZ), xs'#0_0, #_module.List.Cons(b#0_0, ys#0))))
            {
                ##xs#0_0_1_2 := #_module.List.Cons(a#0, ys#0);
                // assume allocatedness for argument to function
                assume $IsAlloc(##xs#0_0_1_2, Tclass._module.List(Tclass._module.G()), $Heap);
                assume _module.__default.sorted#canCall(#_module.List.Cons(a#0, ys#0));
            }

            assume _module.__default.reverse#canCall(Tclass._module.G(), xs'#0_0, #_module.List.Cons(b#0_0, ys#0))
               && _module.__default.sorted#canCall(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs'#0_0, #_module.List.Cons(b#0_0, ys#0)))
               && (_module.__default.sorted($LS($LZ), 
                  _module.__default.reverse(Tclass._module.G(), $LS($LZ), xs'#0_0, #_module.List.Cons(b#0_0, ys#0)))
                 ==> _module.__default.sorted#canCall(#_module.List.Cons(a#0, ys#0)));
            // ----- assume lhs ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(398,7)
            assume {:id "id566"} _module.__default.sorted($LS($LZ), 
                _module.__default.reverse(Tclass._module.G(), $LS($LZ), xs'#0_0, #_module.List.Cons(b#0_0, ys#0)))
               && _module.__default.sorted($LS($LZ), #_module.List.Cons(a#0, ys#0));
            // ----- Hint1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(398,7)
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(402,31)
            // TrCallStmt: Before ProcessCallStmt
            assume true;
            // ProcessCallStmt: CheckSubrange
            xs##0_0_1_0 := xs'#0_0;
            assume true;
            // ProcessCallStmt: CheckSubrange
            ys##0_0_1_0 := #_module.List.Cons(b#0_0, ys#0);
            assume true;
            // ProcessCallStmt: CheckSubrange
            zs##0_0_1_0 := #_module.List.Cons(a#0, ys#0);
            call {:id "id567"} Call$$_module.__default.sorted__replaceSuffix(xs##0_0_1_0, ys##0_0_1_0, zs##0_0_1_0);
            // TrCallStmt: After ProcessCallStmt
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(398,7)
            ##xs#0_0_1_4 := xs'#0_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_1_4, Tclass._module.List(Tclass._module.G()), $Heap);
            ##acc#0_0_1_1 := #_module.List.Cons(a#0, ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#0_0_1_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.reverse#canCall(Tclass._module.G(), xs'#0_0, #_module.List.Cons(a#0, ys#0));
            ##xs#0_0_1_3 := _module.__default.reverse(Tclass._module.G(), $LS($LZ), xs'#0_0, #_module.List.Cons(a#0, ys#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_1_3, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.sorted#canCall(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs'#0_0, #_module.List.Cons(a#0, ys#0)));
            assume _module.__default.reverse#canCall(Tclass._module.G(), xs'#0_0, #_module.List.Cons(a#0, ys#0))
               && _module.__default.sorted#canCall(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs'#0_0, #_module.List.Cons(a#0, ys#0)));
            // ----- assert line1 ==> line2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(398,7)
            assert {:id "id568"} {:subsumption 0} _module.__default.sorted($LS($LZ), 
                  _module.__default.reverse(Tclass._module.G(), $LS($LZ), xs'#0_0, #_module.List.Cons(b#0_0, ys#0)))
                 && _module.__default.sorted($LS($LZ), #_module.List.Cons(a#0, ys#0))
               ==> 
              _module.__default.sorted#canCall(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs'#0_0, #_module.List.Cons(a#0, ys#0)))
               ==> _module.__default.sorted($LS($LZ), 
                  _module.__default.reverse(Tclass._module.G(), $LS($LZ), xs'#0_0, #_module.List.Cons(a#0, ys#0)))
                 || (_module.List.Nil_q(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs'#0_0, #_module.List.Cons(a#0, ys#0)))
                   ==> Lit(true));
            assert {:id "id569"} {:subsumption 0} _module.__default.sorted($LS($LZ), 
                  _module.__default.reverse(Tclass._module.G(), $LS($LZ), xs'#0_0, #_module.List.Cons(b#0_0, ys#0)))
                 && _module.__default.sorted($LS($LZ), #_module.List.Cons(a#0, ys#0))
               ==> 
              _module.__default.sorted#canCall(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs'#0_0, #_module.List.Cons(a#0, ys#0)))
               ==> _module.__default.sorted($LS($LZ), 
                  _module.__default.reverse(Tclass._module.G(), $LS($LZ), xs'#0_0, #_module.List.Cons(a#0, ys#0)))
                 || (!_module.List.Nil_q(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs'#0_0, #_module.List.Cons(a#0, ys#0)))
                   ==> (var ys#0_0_1_0 := _module.List.tail(_module.__default.reverse(Tclass._module.G(), $LS($LS($LZ)), xs'#0_0, #_module.List.Cons(a#0, ys#0))); 
                    (var a#0_0_1_0 := _module.List.head(_module.__default.reverse(Tclass._module.G(), $LS($LS($LZ)), xs'#0_0, #_module.List.Cons(a#0, ys#0))); 
                      (forall y#0_0_1_0: Box :: 
                        { _module.__default.Below(a#0_0_1_0, y#0_0_1_0) } 
                          { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#0_0_1_0), 
                            y#0_0_1_0) } 
                        $IsBox(y#0_0_1_0, Tclass._module.G())
                           ==> 
                          MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#0_0_1_0), 
                              y#0_0_1_0)
                             > 0
                           ==> _module.__default.Below(a#0_0_1_0, y#0_0_1_0)))));
            assert {:id "id570"} {:subsumption 0} _module.__default.sorted($LS($LZ), 
                  _module.__default.reverse(Tclass._module.G(), $LS($LZ), xs'#0_0, #_module.List.Cons(b#0_0, ys#0)))
                 && _module.__default.sorted($LS($LZ), #_module.List.Cons(a#0, ys#0))
               ==> 
              _module.__default.sorted#canCall(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs'#0_0, #_module.List.Cons(a#0, ys#0)))
               ==> _module.__default.sorted($LS($LZ), 
                  _module.__default.reverse(Tclass._module.G(), $LS($LZ), xs'#0_0, #_module.List.Cons(a#0, ys#0)))
                 || (!_module.List.Nil_q(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs'#0_0, #_module.List.Cons(a#0, ys#0)))
                   ==> (var ys#0_0_1_0 := _module.List.tail(_module.__default.reverse(Tclass._module.G(), $LS($LS($LZ)), xs'#0_0, #_module.List.Cons(a#0, ys#0))); 
                    (var a#0_0_1_0 := _module.List.head(_module.__default.reverse(Tclass._module.G(), $LS($LS($LZ)), xs'#0_0, #_module.List.Cons(a#0, ys#0))); 
                      _module.__default.sorted($LS($LS($LZ)), ys#0_0_1_0))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(398,7)
            ##xs#0_0_0_1 := xs'#0_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_0_1, Tclass._module.List(Tclass._module.G()), $Heap);
            ##acc#0_0_0_0 := #_module.List.Cons(a#0, ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#0_0_0_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.reverse#canCall(Tclass._module.G(), xs'#0_0, #_module.List.Cons(a#0, ys#0));
            ##xs#0_0_0_0 := _module.__default.reverse(Tclass._module.G(), $LS($LZ), xs'#0_0, #_module.List.Cons(a#0, ys#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_0_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.sorted#canCall(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs'#0_0, #_module.List.Cons(a#0, ys#0)));
            assume _module.__default.reverse#canCall(Tclass._module.G(), xs'#0_0, #_module.List.Cons(a#0, ys#0))
               && _module.__default.sorted#canCall(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs'#0_0, #_module.List.Cons(a#0, ys#0)));
            // ----- assume lhs ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(398,7)
            assume {:id "id559"} _module.__default.sorted($LS($LZ), 
              _module.__default.reverse(Tclass._module.G(), $LS($LZ), xs'#0_0, #_module.List.Cons(a#0, ys#0)));
            // ----- Hint2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(398,7)
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(404,25)
            // TrCallStmt: Before ProcessCallStmt
            assume true;
            // ProcessCallStmt: CheckSubrange
            xs##0_0_0_0 := xs'#0_0;
            assume true;
            // ProcessCallStmt: CheckSubrange
            ys##0_0_0_0 := #_module.List.Cons(b#0_0, ys#0);
            call {:id "id560"} Call$$_module.__default.sorted__reverse(xs##0_0_0_0, ys##0_0_0_0);
            // TrCallStmt: After ProcessCallStmt
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(405,32)
            // TrCallStmt: Before ProcessCallStmt
            assume true;
            // ProcessCallStmt: CheckSubrange
            xs##0_0_0_1 := xs'#0_0;
            assume true;
            // ProcessCallStmt: CheckSubrange
            a##0_0_0_0 := b#0_0;
            assume true;
            // ProcessCallStmt: CheckSubrange
            ys##0_0_0_1 := #_module.List.Cons(a#0, ys#0);
            assert {:id "id561"} DtRank(xs##0_0_0_1) < DtRank(xs#0)
               || (DtRank(xs##0_0_0_1) == DtRank(xs#0) && DtRank(ys##0_0_0_1) < DtRank(ys#0));
            call {:id "id562"} Call$$_module.__default.sorted__insertInMiddle(xs##0_0_0_1, a##0_0_0_0, ys##0_0_0_1);
            // TrCallStmt: After ProcessCallStmt
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(398,7)
            ##xs#0_0_0_3 := xs'#0_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_0_3, Tclass._module.List(Tclass._module.G()), $Heap);
            ##acc#0_0_0_1 := #_module.List.Cons(b#0_0, #_module.List.Cons(a#0, ys#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#0_0_0_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.reverse#canCall(Tclass._module.G(), 
              xs'#0_0, 
              #_module.List.Cons(b#0_0, #_module.List.Cons(a#0, ys#0)));
            ##xs#0_0_0_2 := _module.__default.reverse(Tclass._module.G(), 
              $LS($LZ), 
              xs'#0_0, 
              #_module.List.Cons(b#0_0, #_module.List.Cons(a#0, ys#0)));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_0_2, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.sorted#canCall(_module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                xs'#0_0, 
                #_module.List.Cons(b#0_0, #_module.List.Cons(a#0, ys#0))));
            assume _module.__default.reverse#canCall(Tclass._module.G(), 
                xs'#0_0, 
                #_module.List.Cons(b#0_0, #_module.List.Cons(a#0, ys#0)))
               && _module.__default.sorted#canCall(_module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  xs'#0_0, 
                  #_module.List.Cons(b#0_0, #_module.List.Cons(a#0, ys#0))));
            // ----- assert line2 ==> line3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(398,7)
            assert {:id "id563"} {:subsumption 0} _module.__default.sorted($LS($LZ), 
                _module.__default.reverse(Tclass._module.G(), $LS($LZ), xs'#0_0, #_module.List.Cons(a#0, ys#0)))
               ==> 
              _module.__default.sorted#canCall(_module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  xs'#0_0, 
                  #_module.List.Cons(b#0_0, #_module.List.Cons(a#0, ys#0))))
               ==> _module.__default.sorted($LS($LZ), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LZ), 
                    xs'#0_0, 
                    #_module.List.Cons(b#0_0, #_module.List.Cons(a#0, ys#0))))
                 || (_module.List.Nil_q(_module.__default.reverse(Tclass._module.G(), 
                      $LS($LZ), 
                      xs'#0_0, 
                      #_module.List.Cons(b#0_0, #_module.List.Cons(a#0, ys#0))))
                   ==> Lit(true));
            assert {:id "id564"} {:subsumption 0} _module.__default.sorted($LS($LZ), 
                _module.__default.reverse(Tclass._module.G(), $LS($LZ), xs'#0_0, #_module.List.Cons(a#0, ys#0)))
               ==> 
              _module.__default.sorted#canCall(_module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  xs'#0_0, 
                  #_module.List.Cons(b#0_0, #_module.List.Cons(a#0, ys#0))))
               ==> _module.__default.sorted($LS($LZ), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LZ), 
                    xs'#0_0, 
                    #_module.List.Cons(b#0_0, #_module.List.Cons(a#0, ys#0))))
                 || (!_module.List.Nil_q(_module.__default.reverse(Tclass._module.G(), 
                      $LS($LZ), 
                      xs'#0_0, 
                      #_module.List.Cons(b#0_0, #_module.List.Cons(a#0, ys#0))))
                   ==> (var ys#0_0_0_0 := _module.List.tail(_module.__default.reverse(Tclass._module.G(), 
                          $LS($LS($LZ)), 
                          xs'#0_0, 
                          #_module.List.Cons(b#0_0, #_module.List.Cons(a#0, ys#0)))); 
                    (var a#0_0_0_0 := _module.List.head(_module.__default.reverse(Tclass._module.G(), 
                            $LS($LS($LZ)), 
                            xs'#0_0, 
                            #_module.List.Cons(b#0_0, #_module.List.Cons(a#0, ys#0)))); 
                      (forall y#0_0_0_0: Box :: 
                        { _module.__default.Below(a#0_0_0_0, y#0_0_0_0) } 
                          { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#0_0_0_0), 
                            y#0_0_0_0) } 
                        $IsBox(y#0_0_0_0, Tclass._module.G())
                           ==> 
                          MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#0_0_0_0), 
                              y#0_0_0_0)
                             > 0
                           ==> _module.__default.Below(a#0_0_0_0, y#0_0_0_0)))));
            assert {:id "id565"} {:subsumption 0} _module.__default.sorted($LS($LZ), 
                _module.__default.reverse(Tclass._module.G(), $LS($LZ), xs'#0_0, #_module.List.Cons(a#0, ys#0)))
               ==> 
              _module.__default.sorted#canCall(_module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  xs'#0_0, 
                  #_module.List.Cons(b#0_0, #_module.List.Cons(a#0, ys#0))))
               ==> _module.__default.sorted($LS($LZ), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LZ), 
                    xs'#0_0, 
                    #_module.List.Cons(b#0_0, #_module.List.Cons(a#0, ys#0))))
                 || (!_module.List.Nil_q(_module.__default.reverse(Tclass._module.G(), 
                      $LS($LZ), 
                      xs'#0_0, 
                      #_module.List.Cons(b#0_0, #_module.List.Cons(a#0, ys#0))))
                   ==> (var ys#0_0_0_0 := _module.List.tail(_module.__default.reverse(Tclass._module.G(), 
                          $LS($LS($LZ)), 
                          xs'#0_0, 
                          #_module.List.Cons(b#0_0, #_module.List.Cons(a#0, ys#0)))); 
                    (var a#0_0_0_0 := _module.List.head(_module.__default.reverse(Tclass._module.G(), 
                            $LS($LS($LZ)), 
                            xs'#0_0, 
                            #_module.List.Cons(b#0_0, #_module.List.Cons(a#0, ys#0)))); 
                      _module.__default.sorted($LS($LS($LZ)), ys#0_0_0_0))));
            assume false;
        }

        assume {:id "id579"} true
           ==> _module.__default.sorted($LS($LZ), 
            _module.__default.reverse(Tclass._module.G(), 
              $LS($LZ), 
              xs'#0_0, 
              #_module.List.Cons(b#0_0, #_module.List.Cons(a#0, ys#0))));
    }
    else
    {
        assume false;
    }
}



procedure {:verboseName "sorted_replaceSuffix (well-formedness)"} CheckWellFormed$$_module.__default.sorted__replaceSuffix(xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(xs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(xs#0), 
    ys#0: DatatypeType
       where $Is(ys#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(ys#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(ys#0), 
    zs#0: DatatypeType
       where $Is(zs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(zs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(zs#0));
  free requires 4 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "sorted_replaceSuffix (call)"} Call$$_module.__default.sorted__replaceSuffix(xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(xs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(xs#0), 
    ys#0: DatatypeType
       where $Is(ys#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(ys#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(ys#0), 
    zs#0: DatatypeType
       where $Is(zs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(zs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(zs#0));
  // user-defined preconditions
  requires {:id "id588"} _module.__default.sorted#canCall(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, ys#0))
     ==> _module.__default.sorted($LS($LZ), _module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, ys#0))
       || (_module.List.Nil_q(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, ys#0))
         ==> Lit(true));
  requires {:id "id589"} _module.__default.sorted#canCall(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, ys#0))
     ==> _module.__default.sorted($LS($LZ), _module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, ys#0))
       || (!_module.List.Nil_q(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, ys#0))
         ==> (var ys#1 := _module.List.tail(_module.__default.reverse(Tclass._module.G(), $LS($LS($LZ)), xs#0, ys#0)); 
          (var a#2 := _module.List.head(_module.__default.reverse(Tclass._module.G(), $LS($LS($LZ)), xs#0, ys#0)); 
            (forall y#0: Box :: 
              { _module.__default.Below(a#2, y#0) } 
                { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#1), y#0) } 
              $IsBox(y#0, Tclass._module.G())
                 ==> 
                MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#1), y#0)
                   > 0
                 ==> _module.__default.Below(a#2, y#0)))));
  requires {:id "id590"} _module.__default.sorted#canCall(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, ys#0))
     ==> _module.__default.sorted($LS($LZ), _module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, ys#0))
       || (!_module.List.Nil_q(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, ys#0))
         ==> (var ys#1 := _module.List.tail(_module.__default.reverse(Tclass._module.G(), $LS($LS($LZ)), xs#0, ys#0)); 
          (var a#2 := _module.List.head(_module.__default.reverse(Tclass._module.G(), $LS($LS($LZ)), xs#0, ys#0)); 
            _module.__default.sorted($LS($LS($LZ)), ys#1))));
  requires {:id "id591"} _module.__default.sorted#canCall(zs#0)
     ==> _module.__default.sorted($LS($LZ), zs#0)
       || (_module.List.Nil_q(zs#0) ==> Lit(true));
  requires {:id "id592"} _module.__default.sorted#canCall(zs#0)
     ==> _module.__default.sorted($LS($LZ), zs#0)
       || (!_module.List.Nil_q(zs#0)
         ==> (var ys#3 := _module.List.tail(zs#0); 
          (var a#4 := _module.List.head(zs#0); 
            (forall y#2: Box :: 
              { _module.__default.Below(a#4, y#2) } 
                { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#3), y#2) } 
              $IsBox(y#2, Tclass._module.G())
                 ==> 
                MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#3), y#2)
                   > 0
                 ==> _module.__default.Below(a#4, y#2)))));
  requires {:id "id593"} _module.__default.sorted#canCall(zs#0)
     ==> _module.__default.sorted($LS($LZ), zs#0)
       || (!_module.List.Nil_q(zs#0)
         ==> (var ys#3 := _module.List.tail(zs#0); 
          (var a#4 := _module.List.head(zs#0); 
            _module.__default.sorted($LS($LS($LZ)), ys#3))));
  requires {:id "id594"} (forall a#1: Box, b#1: Box :: 
    { _module.__default.Below(a#1, b#1) } 
      { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), zs#0), b#1), MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), xs#0), a#1) } 
    $IsBox(a#1, Tclass._module.G()) && $IsBox(b#1, Tclass._module.G())
       ==> 
      MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), xs#0), a#1)
           > 0
         && MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), zs#0), b#1)
           > 0
       ==> _module.__default.Below(a#1, b#1));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.reverse#canCall(Tclass._module.G(), xs#0, zs#0)
     && _module.__default.sorted#canCall(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, zs#0));
  free ensures {:id "id595"} _module.__default.sorted#canCall(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, zs#0))
     && 
    _module.__default.sorted($LS($LZ), _module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, zs#0))
     && (if _module.List.Nil_q(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, zs#0))
       then true
       else (var ys#6 := _module.List.tail(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, zs#0)); 
        (var a#7 := _module.List.head(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, zs#0)); 
          (forall y#5: Box :: 
              { _module.__default.Below(a#7, y#5) } 
                { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#6), y#5) } 
              $IsBox(y#5, Tclass._module.G())
                 ==> 
                MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#6), y#5)
                   > 0
                 ==> _module.__default.Below(a#7, y#5))
             && _module.__default.sorted($LS($LZ), ys#6))));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "sorted_replaceSuffix (correctness)"} Impl$$_module.__default.sorted__replaceSuffix(xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(xs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(xs#0), 
    ys#0: DatatypeType
       where $Is(ys#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(ys#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(ys#0), 
    zs#0: DatatypeType
       where $Is(zs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(zs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(zs#0))
   returns ($_reverifyPost: bool);
  free requires 4 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id596"} _module.__default.sorted#canCall(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, ys#0))
     && 
    _module.__default.sorted($LS($LZ), _module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, ys#0))
     && (if _module.List.Nil_q(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, ys#0))
       then true
       else (var ys#8 := _module.List.tail(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, ys#0)); 
        (var a#9 := _module.List.head(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, ys#0)); 
          (forall y#7: Box :: 
              { _module.__default.Below(a#9, y#7) } 
                { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#8), y#7) } 
              $IsBox(y#7, Tclass._module.G())
                 ==> 
                MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#8), y#7)
                   > 0
                 ==> _module.__default.Below(a#9, y#7))
             && _module.__default.sorted($LS($LZ), ys#8))));
  free requires {:id "id597"} _module.__default.sorted#canCall(zs#0)
     && 
    _module.__default.sorted($LS($LZ), zs#0)
     && (if _module.List.Nil_q(zs#0)
       then true
       else (var ys#10 := _module.List.tail(zs#0); 
        (var a#11 := _module.List.head(zs#0); 
          (forall y#9: Box :: 
              { _module.__default.Below(a#11, y#9) } 
                { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#10), y#9) } 
              $IsBox(y#9, Tclass._module.G())
                 ==> 
                MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#10), y#9)
                   > 0
                 ==> _module.__default.Below(a#11, y#9))
             && _module.__default.sorted($LS($LZ), ys#10))));
  free requires {:id "id598"} (forall a#1: Box, b#1: Box :: 
    { _module.__default.Below(a#1, b#1) } 
      { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), zs#0), b#1), MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), xs#0), a#1) } 
    $IsBox(a#1, Tclass._module.G()) && $IsBox(b#1, Tclass._module.G())
       ==> 
      MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), xs#0), a#1)
           > 0
         && MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), zs#0), b#1)
           > 0
       ==> _module.__default.Below(a#1, b#1));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.reverse#canCall(Tclass._module.G(), xs#0, zs#0)
     && _module.__default.sorted#canCall(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, zs#0));
  ensures {:id "id599"} _module.__default.sorted#canCall(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, zs#0))
     ==> _module.__default.sorted($LS($LZ), _module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, zs#0))
       || (_module.List.Nil_q(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, zs#0))
         ==> Lit(true));
  ensures {:id "id600"} _module.__default.sorted#canCall(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, zs#0))
     ==> _module.__default.sorted($LS($LZ), _module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, zs#0))
       || (!_module.List.Nil_q(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, zs#0))
         ==> (var ys#11 := _module.List.tail(_module.__default.reverse(Tclass._module.G(), $LS($LS($LZ)), xs#0, zs#0)); 
          (var a#12 := _module.List.head(_module.__default.reverse(Tclass._module.G(), $LS($LS($LZ)), xs#0, zs#0)); 
            (forall y#10: Box :: 
              { _module.__default.Below(a#12, y#10) } 
                { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#11), y#10) } 
              $IsBox(y#10, Tclass._module.G())
                 ==> 
                MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#11), y#10)
                   > 0
                 ==> _module.__default.Below(a#12, y#10)))));
  ensures {:id "id601"} _module.__default.sorted#canCall(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, zs#0))
     ==> _module.__default.sorted($LS($LZ), _module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, zs#0))
       || (!_module.List.Nil_q(_module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, zs#0))
         ==> (var ys#11 := _module.List.tail(_module.__default.reverse(Tclass._module.G(), $LS($LS($LZ)), xs#0, zs#0)); 
          (var a#12 := _module.List.head(_module.__default.reverse(Tclass._module.G(), $LS($LS($LZ)), xs#0, zs#0)); 
            _module.__default.sorted($LS($LS($LZ)), ys#11))));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "sorted_replaceSuffix (correctness)"} Impl$$_module.__default.sorted__replaceSuffix(xs#0: DatatypeType, ys#0: DatatypeType, zs#0: DatatypeType)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $initHeapForallStmt#0: Heap;
  var _mcc#0#0_0: Box;
  var _mcc#1#0_0: DatatypeType;
  var xs'#0_0: DatatypeType;
  var let#0_0#0#0: DatatypeType;
  var c#0_0: Box;
  var let#0_1#0#0: Box;
  var xs##0_0: DatatypeType;
  var ys##0_0: DatatypeType;
  var xs##0_1: DatatypeType;
  var ys##0_1: DatatypeType;
  var xs##0_2: DatatypeType;
  var ys##0_2: DatatypeType;
  var zs##0_0: DatatypeType;

    // AddMethodImpl: sorted_replaceSuffix, Impl$$_module.__default.sorted__replaceSuffix
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume $IsA#_module.List(xs#0);
    assume $IsA#_module.List(ys#0);
    assume $IsA#_module.List(zs#0);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#xs0#0: DatatypeType, $ih#ys0#0: DatatypeType, $ih#zs0#0: DatatypeType :: 
      { _module.__default.multiset__of(Tclass._module.G(), $LS($LZ), $ih#zs0#0), _module.__default.reverse(Tclass._module.G(), $LS($LZ), $ih#xs0#0, $ih#ys0#0) } 
        { _module.__default.sorted($LS($LZ), $ih#zs0#0), _module.__default.sorted($LS($LZ), 
          _module.__default.reverse(Tclass._module.G(), $LS($LZ), $ih#xs0#0, $ih#ys0#0)) } 
      $Is($ih#xs0#0, Tclass._module.List(Tclass._module.G()))
           && $Is($ih#ys0#0, Tclass._module.List(Tclass._module.G()))
           && $Is($ih#zs0#0, Tclass._module.List(Tclass._module.G()))
           && 
          _module.__default.sorted($LS($LZ), 
            _module.__default.reverse(Tclass._module.G(), $LS($LZ), $ih#xs0#0, $ih#ys0#0))
           && _module.__default.sorted($LS($LZ), $ih#zs0#0)
           && (forall a#14: Box, b#2: Box :: 
            { _module.__default.Below(a#14, b#2) } 
              { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), $ih#zs0#0), b#2), MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), $ih#xs0#0), a#14) } 
            $IsBox(a#14, Tclass._module.G()) && $IsBox(b#2, Tclass._module.G())
               ==> 
              MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), $ih#xs0#0), a#14)
                   > 0
                 && MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), $ih#zs0#0), b#2)
                   > 0
               ==> _module.__default.Below(a#14, b#2))
           && (DtRank($ih#xs0#0) < DtRank(xs#0)
             || (DtRank($ih#xs0#0) == DtRank(xs#0)
               && (DtRank($ih#ys0#0) < DtRank(ys#0)
                 || (DtRank($ih#ys0#0) == DtRank(ys#0) && DtRank($ih#zs0#0) < DtRank(zs#0)))))
         ==> _module.__default.sorted($LS($LZ), 
          _module.__default.reverse(Tclass._module.G(), $LS($LZ), $ih#xs0#0, $ih#zs0#0)));
    $_reverifyPost := false;
    assume true;
    havoc _mcc#0#0_0, _mcc#1#0_0;
    if (xs#0 == #_module.List.Nil())
    {
    }
    else if (xs#0 == #_module.List.Cons(_mcc#0#0_0, _mcc#1#0_0))
    {
        assume $IsBox(_mcc#0#0_0, Tclass._module.G());
        assume $Is(_mcc#1#0_0, Tclass._module.List(Tclass._module.G()));
        havoc xs'#0_0;
        assume $Is(xs'#0_0, Tclass._module.List(Tclass._module.G()))
           && $IsAlloc(xs'#0_0, Tclass._module.List(Tclass._module.G()), $Heap);
        assume {:id "id602"} let#0_0#0#0 == _mcc#1#0_0;
        assume true;
        assume true;
        // CheckWellformedWithResult: any expression
        assume $Is(let#0_0#0#0, Tclass._module.List(Tclass._module.G()));
        assume {:id "id603"} xs'#0_0 == let#0_0#0#0;
        havoc c#0_0;
        assume $IsBox(c#0_0, Tclass._module.G())
           && $IsAllocBox(c#0_0, Tclass._module.G(), $Heap);
        assume {:id "id604"} let#0_1#0#0 == _mcc#0#0_0;
        assume true;
        assume true;
        // CheckWellformedWithResult: any expression
        assume $IsBox(let#0_1#0#0, Tclass._module.G());
        assume {:id "id605"} c#0_0 == let#0_1#0#0;
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(419,21)
        // TrCallStmt: Before ProcessCallStmt
        assume true;
        // ProcessCallStmt: CheckSubrange
        xs##0_0 := xs#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        ys##0_0 := ys#0;
        call {:id "id606"} Call$$_module.__default.sorted__reverse(xs##0_0, ys##0_0);
        // TrCallStmt: After ProcessCallStmt
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(420,21)
        // TrCallStmt: Before ProcessCallStmt
        assume true;
        // ProcessCallStmt: CheckSubrange
        xs##0_1 := xs'#0_0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        ys##0_1 := #_module.List.Cons(c#0_0, ys#0);
        call {:id "id607"} Call$$_module.__default.sorted__reverse(xs##0_1, ys##0_1);
        // TrCallStmt: After ProcessCallStmt
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(421,27)
        // TrCallStmt: Before ProcessCallStmt
        assume true;
        // ProcessCallStmt: CheckSubrange
        xs##0_2 := xs'#0_0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        ys##0_2 := #_module.List.Cons(c#0_0, ys#0);
        assume true;
        // ProcessCallStmt: CheckSubrange
        zs##0_0 := #_module.List.Cons(c#0_0, zs#0);
        assert {:id "id608"} DtRank(xs##0_2) < DtRank(xs#0)
           || (DtRank(xs##0_2) == DtRank(xs#0)
             && (DtRank(ys##0_2) < DtRank(ys#0)
               || (DtRank(ys##0_2) == DtRank(ys#0) && DtRank(zs##0_0) < DtRank(zs#0))));
        call {:id "id609"} Call$$_module.__default.sorted__replaceSuffix(xs##0_2, ys##0_2, zs##0_0);
        // TrCallStmt: After ProcessCallStmt
    }
    else
    {
        assume false;
    }
}



procedure {:verboseName "sorted_mergeAll (well-formedness)"} CheckWellFormed$$_module.__default.sorted__mergeAll(x#0: DatatypeType
       where $Is(x#0, Tclass._module.List(Tclass._module.List(Tclass._module.G())))
         && $IsAlloc(x#0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap)
         && $IsA#_module.List(x#0));
  free requires 5 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "sorted_mergeAll (well-formedness)"} CheckWellFormed$$_module.__default.sorted__mergeAll(x#0: DatatypeType)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##x#0: DatatypeType;
  var ##xs#0: DatatypeType;
  var ##xs#1: DatatypeType;
  var ##x#1: DatatypeType;


    // AddMethodImpl: sorted_mergeAll, CheckWellFormed$$_module.__default.sorted__mergeAll
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume {:id "id610"} !_module.List#Equal(x#0, #_module.List.Nil());
    ##x#0 := x#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##x#0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
    assume _module.__default.AllSorted#canCall(x#0);
    assume {:id "id611"} _module.__default.AllSorted($LS($LZ), x#0);
    ##xs#0 := x#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##xs#0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
    assume _module.__default.length#canCall(Tclass._module.List(Tclass._module.G()), x#0);
    havoc $Heap;
    assume old($Heap) == $Heap;
    ##x#1 := x#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##x#1, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
    assert {:id "id612"} {:subsumption 0} !_module.List#Equal(##x#1, #_module.List.Nil());
    assume !_module.List#Equal(##x#1, #_module.List.Nil());
    assume _module.__default.mergeAll#canCall(x#0);
    ##xs#1 := _module.__default.mergeAll($LS($LZ), x#0);
    // assume allocatedness for argument to function
    assume $IsAlloc(##xs#1, Tclass._module.List(Tclass._module.G()), $Heap);
    assume _module.__default.sorted#canCall(_module.__default.mergeAll($LS($LZ), x#0));
    assume {:id "id613"} _module.__default.sorted($LS($LZ), _module.__default.mergeAll($LS($LZ), x#0));
}



procedure {:verboseName "sorted_mergeAll (call)"} Call$$_module.__default.sorted__mergeAll(x#0: DatatypeType
       where $Is(x#0, Tclass._module.List(Tclass._module.List(Tclass._module.G())))
         && $IsAlloc(x#0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap)
         && $IsA#_module.List(x#0));
  // user-defined preconditions
  requires {:id "id614"} !_module.List#Equal(x#0, #_module.List.Nil());
  requires {:id "id615"} _module.__default.AllSorted#canCall(x#0)
     ==> _module.__default.AllSorted($LS($LZ), x#0)
       || (_module.List.Nil_q(x#0) ==> Lit(true));
  requires {:id "id616"} _module.__default.AllSorted#canCall(x#0)
     ==> _module.__default.AllSorted($LS($LZ), x#0)
       || (!_module.List.Nil_q(x#0)
         ==> (var y#2 := _module.List.tail(x#0); 
          (var xs#0 := $Unbox(_module.List.head(x#0)): DatatypeType; 
            _module.__default.sorted#canCall(xs#0)
               ==> _module.__default.sorted($LS($LZ), xs#0)
                 || (_module.List.Nil_q(xs#0) ==> Lit(true)))));
  requires {:id "id617"} _module.__default.AllSorted#canCall(x#0)
     ==> _module.__default.AllSorted($LS($LZ), x#0)
       || (!_module.List.Nil_q(x#0)
         ==> (var y#2 := _module.List.tail(x#0); 
          (var xs#0 := $Unbox(_module.List.head(x#0)): DatatypeType; 
            _module.__default.sorted#canCall(xs#0)
               ==> _module.__default.sorted($LS($LZ), xs#0)
                 || (!_module.List.Nil_q(xs#0)
                   ==> (var ys#0 := _module.List.tail(xs#0); 
                    (var a#0 := _module.List.head(xs#0); 
                      (forall y#0: Box :: 
                        { _module.__default.Below(a#0, y#0) } 
                          { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#0), y#0) } 
                        $IsBox(y#0, Tclass._module.G())
                           ==> 
                          MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#0), y#0)
                             > 0
                           ==> _module.__default.Below(a#0, y#0))))))));
  requires {:id "id618"} _module.__default.AllSorted#canCall(x#0)
     ==> _module.__default.AllSorted($LS($LZ), x#0)
       || (!_module.List.Nil_q(x#0)
         ==> (var y#2 := _module.List.tail(x#0); 
          (var xs#0 := $Unbox(_module.List.head(x#0)): DatatypeType; 
            _module.__default.sorted#canCall(xs#0)
               ==> _module.__default.sorted($LS($LZ), xs#0)
                 || (!_module.List.Nil_q(xs#0)
                   ==> (var ys#0 := _module.List.tail(xs#0); 
                    (var a#0 := _module.List.head(xs#0); 
                      _module.__default.sorted($LS($LS($LZ)), ys#0)))))));
  requires {:id "id619"} _module.__default.AllSorted#canCall(x#0)
     ==> _module.__default.AllSorted($LS($LZ), x#0)
       || (!_module.List.Nil_q(x#0)
         ==> (var y#2 := _module.List.tail(x#0); 
          (var xs#0 := $Unbox(_module.List.head(x#0)): DatatypeType; 
            _module.__default.AllSorted($LS($LS($LZ)), y#2))));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.mergeAll#canCall(x#0)
     && _module.__default.sorted#canCall(_module.__default.mergeAll($LS($LZ), x#0));
  free ensures {:id "id620"} _module.__default.sorted#canCall(_module.__default.mergeAll($LS($LZ), x#0))
     && 
    _module.__default.sorted($LS($LZ), _module.__default.mergeAll($LS($LZ), x#0))
     && (if _module.List.Nil_q(_module.__default.mergeAll($LS($LZ), x#0))
       then true
       else (var ys#3 := _module.List.tail(_module.__default.mergeAll($LS($LZ), x#0)); 
        (var a#3 := _module.List.head(_module.__default.mergeAll($LS($LZ), x#0)); 
          (forall y#5: Box :: 
              { _module.__default.Below(a#3, y#5) } 
                { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#3), y#5) } 
              $IsBox(y#5, Tclass._module.G())
                 ==> 
                MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#3), y#5)
                   > 0
                 ==> _module.__default.Below(a#3, y#5))
             && _module.__default.sorted($LS($LZ), ys#3))));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "sorted_mergeAll (correctness)"} Impl$$_module.__default.sorted__mergeAll(x#0: DatatypeType
       where $Is(x#0, Tclass._module.List(Tclass._module.List(Tclass._module.G())))
         && $IsAlloc(x#0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap)
         && $IsA#_module.List(x#0))
   returns ($_reverifyPost: bool);
  free requires 5 == $FunctionContextHeight;
  // user-defined preconditions
  requires {:id "id621"} !_module.List#Equal(x#0, #_module.List.Nil());
  free requires {:id "id622"} _module.__default.AllSorted#canCall(x#0)
     && 
    _module.__default.AllSorted($LS($LZ), x#0)
     && (if _module.List.Nil_q(x#0)
       then true
       else (var y#9 := _module.List.tail(x#0); 
        (var xs#3 := $Unbox(_module.List.head(x#0)): DatatypeType; 
          _module.__default.sorted($LS($LZ), xs#3)
             && _module.__default.AllSorted($LS($LZ), y#9))));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.mergeAll#canCall(x#0)
     && _module.__default.sorted#canCall(_module.__default.mergeAll($LS($LZ), x#0));
  ensures {:id "id623"} _module.__default.sorted#canCall(_module.__default.mergeAll($LS($LZ), x#0))
     ==> _module.__default.sorted($LS($LZ), _module.__default.mergeAll($LS($LZ), x#0))
       || (_module.List.Nil_q(_module.__default.mergeAll($LS($LZ), x#0)) ==> Lit(true));
  ensures {:id "id624"} _module.__default.sorted#canCall(_module.__default.mergeAll($LS($LZ), x#0))
     ==> _module.__default.sorted($LS($LZ), _module.__default.mergeAll($LS($LZ), x#0))
       || (!_module.List.Nil_q(_module.__default.mergeAll($LS($LZ), x#0))
         ==> (var ys#6 := _module.List.tail(_module.__default.mergeAll($LS($LS($LZ)), x#0)); 
          (var a#6 := _module.List.head(_module.__default.mergeAll($LS($LS($LZ)), x#0)); 
            (forall y#10: Box :: 
              { _module.__default.Below(a#6, y#10) } 
                { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#6), y#10) } 
              $IsBox(y#10, Tclass._module.G())
                 ==> 
                MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#6), y#10)
                   > 0
                 ==> _module.__default.Below(a#6, y#10)))));
  ensures {:id "id625"} _module.__default.sorted#canCall(_module.__default.mergeAll($LS($LZ), x#0))
     ==> _module.__default.sorted($LS($LZ), _module.__default.mergeAll($LS($LZ), x#0))
       || (!_module.List.Nil_q(_module.__default.mergeAll($LS($LZ), x#0))
         ==> (var ys#6 := _module.List.tail(_module.__default.mergeAll($LS($LS($LZ)), x#0)); 
          (var a#6 := _module.List.head(_module.__default.mergeAll($LS($LS($LZ)), x#0)); 
            _module.__default.sorted($LS($LS($LZ)), ys#6))));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "sorted_mergeAll (correctness)"} Impl$$_module.__default.sorted__mergeAll(x#0: DatatypeType) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $initHeapForallStmt#0: Heap;
  var x##0_0: DatatypeType;

    // AddMethodImpl: sorted_mergeAll, Impl$$_module.__default.sorted__mergeAll
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume $IsA#_module.List(x#0);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#x0#0: DatatypeType :: 
      { _module.__default.mergeAll($LS($LZ), $ih#x0#0) } 
        { _module.__default.AllSorted($LS($LZ), $ih#x0#0) } 
      $Is($ih#x0#0, Tclass._module.List(Tclass._module.List(Tclass._module.G())))
           && 
          !_module.List#Equal($ih#x0#0, #_module.List.Nil())
           && _module.__default.AllSorted($LS($LZ), $ih#x0#0)
           && 
          0
             <= _module.__default.length(Tclass._module.List(Tclass._module.G()), $LS($LZ), $ih#x0#0)
           && _module.__default.length(Tclass._module.List(Tclass._module.G()), $LS($LZ), $ih#x0#0)
             < _module.__default.length(Tclass._module.List(Tclass._module.G()), $LS($LZ), x#0)
         ==> _module.__default.sorted($LS($LZ), _module.__default.mergeAll($LS($LZ), $ih#x0#0)));
    $_reverifyPost := false;
    // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(430,3)
    assert {:id "id626"} _module.List.Cons_q(x#0);
    assume $IsA#_module.List(_module.List.tail(x#0));
    if (!_module.List#Equal(_module.List.tail(x#0), #_module.List.Nil()))
    {
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(431,22)
        // TrCallStmt: Before ProcessCallStmt
        assume true;
        // ProcessCallStmt: CheckSubrange
        x##0_0 := x#0;
        call {:id "id627"} Call$$_module.__default.sorted__mergePairs(x##0_0);
        // TrCallStmt: After ProcessCallStmt
    }
    else
    {
    }
}



procedure {:verboseName "sorted_mergePairs (well-formedness)"} CheckWellFormed$$_module.__default.sorted__mergePairs(x#0: DatatypeType
       where $Is(x#0, Tclass._module.List(Tclass._module.List(Tclass._module.G())))
         && $IsAlloc(x#0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap)
         && $IsA#_module.List(x#0));
  free requires 4 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "sorted_mergePairs (call)"} Call$$_module.__default.sorted__mergePairs(x#0: DatatypeType
       where $Is(x#0, Tclass._module.List(Tclass._module.List(Tclass._module.G())))
         && $IsAlloc(x#0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap)
         && $IsA#_module.List(x#0));
  // user-defined preconditions
  requires {:id "id630"} _module.__default.AllSorted#canCall(x#0)
     ==> _module.__default.AllSorted($LS($LZ), x#0)
       || (_module.List.Nil_q(x#0) ==> Lit(true));
  requires {:id "id631"} _module.__default.AllSorted#canCall(x#0)
     ==> _module.__default.AllSorted($LS($LZ), x#0)
       || (!_module.List.Nil_q(x#0)
         ==> (var y#2 := _module.List.tail(x#0); 
          (var xs#0 := $Unbox(_module.List.head(x#0)): DatatypeType; 
            _module.__default.sorted#canCall(xs#0)
               ==> _module.__default.sorted($LS($LZ), xs#0)
                 || (_module.List.Nil_q(xs#0) ==> Lit(true)))));
  requires {:id "id632"} _module.__default.AllSorted#canCall(x#0)
     ==> _module.__default.AllSorted($LS($LZ), x#0)
       || (!_module.List.Nil_q(x#0)
         ==> (var y#2 := _module.List.tail(x#0); 
          (var xs#0 := $Unbox(_module.List.head(x#0)): DatatypeType; 
            _module.__default.sorted#canCall(xs#0)
               ==> _module.__default.sorted($LS($LZ), xs#0)
                 || (!_module.List.Nil_q(xs#0)
                   ==> (var ys#0 := _module.List.tail(xs#0); 
                    (var a#0 := _module.List.head(xs#0); 
                      (forall y#0: Box :: 
                        { _module.__default.Below(a#0, y#0) } 
                          { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#0), y#0) } 
                        $IsBox(y#0, Tclass._module.G())
                           ==> 
                          MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#0), y#0)
                             > 0
                           ==> _module.__default.Below(a#0, y#0))))))));
  requires {:id "id633"} _module.__default.AllSorted#canCall(x#0)
     ==> _module.__default.AllSorted($LS($LZ), x#0)
       || (!_module.List.Nil_q(x#0)
         ==> (var y#2 := _module.List.tail(x#0); 
          (var xs#0 := $Unbox(_module.List.head(x#0)): DatatypeType; 
            _module.__default.sorted#canCall(xs#0)
               ==> _module.__default.sorted($LS($LZ), xs#0)
                 || (!_module.List.Nil_q(xs#0)
                   ==> (var ys#0 := _module.List.tail(xs#0); 
                    (var a#0 := _module.List.head(xs#0); 
                      _module.__default.sorted($LS($LS($LZ)), ys#0)))))));
  requires {:id "id634"} _module.__default.AllSorted#canCall(x#0)
     ==> _module.__default.AllSorted($LS($LZ), x#0)
       || (!_module.List.Nil_q(x#0)
         ==> (var y#2 := _module.List.tail(x#0); 
          (var xs#0 := $Unbox(_module.List.head(x#0)): DatatypeType; 
            _module.__default.AllSorted($LS($LS($LZ)), y#2))));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.mergePairs#canCall(x#0)
     && _module.__default.AllSorted#canCall(_module.__default.mergePairs($LS($LZ), x#0));
  free ensures {:id "id635"} _module.__default.AllSorted#canCall(_module.__default.mergePairs($LS($LZ), x#0))
     && 
    _module.__default.AllSorted($LS($LZ), _module.__default.mergePairs($LS($LZ), x#0))
     && (if _module.List.Nil_q(_module.__default.mergePairs($LS($LZ), x#0))
       then true
       else (var y#7 := _module.List.tail(_module.__default.mergePairs($LS($LZ), x#0)); 
        (var xs#3 := $Unbox(_module.List.head(_module.__default.mergePairs($LS($LZ), x#0))): DatatypeType; 
          _module.__default.sorted($LS($LZ), xs#3)
             && _module.__default.AllSorted($LS($LZ), y#7))));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "sorted_mergePairs (correctness)"} Impl$$_module.__default.sorted__mergePairs(x#0: DatatypeType
       where $Is(x#0, Tclass._module.List(Tclass._module.List(Tclass._module.G())))
         && $IsAlloc(x#0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap)
         && $IsA#_module.List(x#0))
   returns ($_reverifyPost: bool);
  free requires 4 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id636"} _module.__default.AllSorted#canCall(x#0)
     && 
    _module.__default.AllSorted($LS($LZ), x#0)
     && (if _module.List.Nil_q(x#0)
       then true
       else (var y#11 := _module.List.tail(x#0); 
        (var xs#5 := $Unbox(_module.List.head(x#0)): DatatypeType; 
          _module.__default.sorted($LS($LZ), xs#5)
             && _module.__default.AllSorted($LS($LZ), y#11))));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.mergePairs#canCall(x#0)
     && _module.__default.AllSorted#canCall(_module.__default.mergePairs($LS($LZ), x#0));
  ensures {:id "id637"} _module.__default.AllSorted#canCall(_module.__default.mergePairs($LS($LZ), x#0))
     ==> _module.__default.AllSorted($LS($LZ), _module.__default.mergePairs($LS($LZ), x#0))
       || (_module.List.Nil_q(_module.__default.mergePairs($LS($LZ), x#0)) ==> Lit(true));
  ensures {:id "id638"} _module.__default.AllSorted#canCall(_module.__default.mergePairs($LS($LZ), x#0))
     ==> _module.__default.AllSorted($LS($LZ), _module.__default.mergePairs($LS($LZ), x#0))
       || (!_module.List.Nil_q(_module.__default.mergePairs($LS($LZ), x#0))
         ==> (var y#14 := _module.List.tail(_module.__default.mergePairs($LS($LS($LZ)), x#0)); 
          (var xs#6 := $Unbox(_module.List.head(_module.__default.mergePairs($LS($LS($LZ)), x#0))): DatatypeType; 
            _module.__default.sorted#canCall(xs#6)
               ==> _module.__default.sorted($LS($LZ), xs#6)
                 || (_module.List.Nil_q(xs#6) ==> Lit(true)))));
  ensures {:id "id639"} _module.__default.AllSorted#canCall(_module.__default.mergePairs($LS($LZ), x#0))
     ==> _module.__default.AllSorted($LS($LZ), _module.__default.mergePairs($LS($LZ), x#0))
       || (!_module.List.Nil_q(_module.__default.mergePairs($LS($LZ), x#0))
         ==> (var y#14 := _module.List.tail(_module.__default.mergePairs($LS($LS($LZ)), x#0)); 
          (var xs#6 := $Unbox(_module.List.head(_module.__default.mergePairs($LS($LS($LZ)), x#0))): DatatypeType; 
            _module.__default.sorted#canCall(xs#6)
               ==> _module.__default.sorted($LS($LZ), xs#6)
                 || (!_module.List.Nil_q(xs#6)
                   ==> (var ys#6 := _module.List.tail(xs#6); 
                    (var a#6 := _module.List.head(xs#6); 
                      (forall y#12: Box :: 
                        { _module.__default.Below(a#6, y#12) } 
                          { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#6), y#12) } 
                        $IsBox(y#12, Tclass._module.G())
                           ==> 
                          MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#6), y#12)
                             > 0
                           ==> _module.__default.Below(a#6, y#12))))))));
  ensures {:id "id640"} _module.__default.AllSorted#canCall(_module.__default.mergePairs($LS($LZ), x#0))
     ==> _module.__default.AllSorted($LS($LZ), _module.__default.mergePairs($LS($LZ), x#0))
       || (!_module.List.Nil_q(_module.__default.mergePairs($LS($LZ), x#0))
         ==> (var y#14 := _module.List.tail(_module.__default.mergePairs($LS($LS($LZ)), x#0)); 
          (var xs#6 := $Unbox(_module.List.head(_module.__default.mergePairs($LS($LS($LZ)), x#0))): DatatypeType; 
            _module.__default.sorted#canCall(xs#6)
               ==> _module.__default.sorted($LS($LZ), xs#6)
                 || (!_module.List.Nil_q(xs#6)
                   ==> (var ys#6 := _module.List.tail(xs#6); 
                    (var a#6 := _module.List.head(xs#6); 
                      _module.__default.sorted($LS($LS($LZ)), ys#6)))))));
  ensures {:id "id641"} _module.__default.AllSorted#canCall(_module.__default.mergePairs($LS($LZ), x#0))
     ==> _module.__default.AllSorted($LS($LZ), _module.__default.mergePairs($LS($LZ), x#0))
       || (!_module.List.Nil_q(_module.__default.mergePairs($LS($LZ), x#0))
         ==> (var y#14 := _module.List.tail(_module.__default.mergePairs($LS($LS($LZ)), x#0)); 
          (var xs#6 := $Unbox(_module.List.head(_module.__default.mergePairs($LS($LS($LZ)), x#0))): DatatypeType; 
            _module.__default.AllSorted($LS($LS($LZ)), y#14))));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "sorted_mergePairs (correctness)"} Impl$$_module.__default.sorted__mergePairs(x#0: DatatypeType) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $initHeapForallStmt#0: Heap;
  var xs##0_0: DatatypeType;
  var ys##0_0: DatatypeType;

    // AddMethodImpl: sorted_mergePairs, Impl$$_module.__default.sorted__mergePairs
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume $IsA#_module.List(x#0);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#x0#0: DatatypeType :: 
      { _module.__default.mergePairs($LS($LZ), $ih#x0#0) } 
      $Is($ih#x0#0, Tclass._module.List(Tclass._module.List(Tclass._module.G())))
           && _module.__default.AllSorted($LS($LZ), $ih#x0#0)
           && DtRank($ih#x0#0) < DtRank(x#0)
         ==> _module.__default.AllSorted($LS($LZ), _module.__default.mergePairs($LS($LZ), $ih#x0#0)));
    $_reverifyPost := false;
    // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(439,3)
    if (_module.List.Cons_q(x#0))
    {
        assert {:id "id642"} _module.List.Cons_q(x#0);
    }

    assume true;
    if (_module.List.Cons_q(x#0) && _module.List.Cons_q(_module.List.tail(x#0)))
    {
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(440,17)
        // TrCallStmt: Before ProcessCallStmt
        assert {:id "id643"} _module.List.Cons_q(x#0);
        assume true;
        // ProcessCallStmt: CheckSubrange
        xs##0_0 := $Unbox(_module.List.head(x#0)): DatatypeType;
        assert {:id "id644"} _module.List.Cons_q(x#0);
        assert {:id "id645"} _module.List.Cons_q(_module.List.tail(x#0));
        assume true;
        // ProcessCallStmt: CheckSubrange
        ys##0_0 := $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType;
        call {:id "id646"} Call$$_module.__default.sorted__merge(xs##0_0, ys##0_0);
        // TrCallStmt: After ProcessCallStmt
    }
    else
    {
    }
}



procedure {:verboseName "sorted_merge (well-formedness)"} CheckWellFormed$$_module.__default.sorted__merge(xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(xs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(xs#0), 
    ys#0: DatatypeType
       where $Is(ys#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(ys#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(ys#0));
  free requires 3 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "sorted_merge (call)"} Call$$_module.__default.sorted__merge(xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(xs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(xs#0), 
    ys#0: DatatypeType
       where $Is(ys#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(ys#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(ys#0));
  // user-defined preconditions
  requires {:id "id650"} _module.__default.sorted#canCall(xs#0)
     ==> _module.__default.sorted($LS($LZ), xs#0)
       || (_module.List.Nil_q(xs#0) ==> Lit(true));
  requires {:id "id651"} _module.__default.sorted#canCall(xs#0)
     ==> _module.__default.sorted($LS($LZ), xs#0)
       || (!_module.List.Nil_q(xs#0)
         ==> (var ys#1 := _module.List.tail(xs#0); 
          (var a#0 := _module.List.head(xs#0); 
            (forall y#0: Box :: 
              { _module.__default.Below(a#0, y#0) } 
                { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#1), y#0) } 
              $IsBox(y#0, Tclass._module.G())
                 ==> 
                MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#1), y#0)
                   > 0
                 ==> _module.__default.Below(a#0, y#0)))));
  requires {:id "id652"} _module.__default.sorted#canCall(xs#0)
     ==> _module.__default.sorted($LS($LZ), xs#0)
       || (!_module.List.Nil_q(xs#0)
         ==> (var ys#1 := _module.List.tail(xs#0); 
          (var a#0 := _module.List.head(xs#0); 
            _module.__default.sorted($LS($LS($LZ)), ys#1))));
  requires {:id "id653"} _module.__default.sorted#canCall(ys#0)
     ==> _module.__default.sorted($LS($LZ), ys#0)
       || (_module.List.Nil_q(ys#0) ==> Lit(true));
  requires {:id "id654"} _module.__default.sorted#canCall(ys#0)
     ==> _module.__default.sorted($LS($LZ), ys#0)
       || (!_module.List.Nil_q(ys#0)
         ==> (var ys#3 := _module.List.tail(ys#0); 
          (var a#2 := _module.List.head(ys#0); 
            (forall y#2: Box :: 
              { _module.__default.Below(a#2, y#2) } 
                { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#3), y#2) } 
              $IsBox(y#2, Tclass._module.G())
                 ==> 
                MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#3), y#2)
                   > 0
                 ==> _module.__default.Below(a#2, y#2)))));
  requires {:id "id655"} _module.__default.sorted#canCall(ys#0)
     ==> _module.__default.sorted($LS($LZ), ys#0)
       || (!_module.List.Nil_q(ys#0)
         ==> (var ys#3 := _module.List.tail(ys#0); 
          (var a#2 := _module.List.head(ys#0); 
            _module.__default.sorted($LS($LS($LZ)), ys#3))));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.merge#canCall(xs#0, ys#0)
     && _module.__default.sorted#canCall(_module.__default.merge($LS($LZ), xs#0, ys#0));
  free ensures {:id "id656"} _module.__default.sorted#canCall(_module.__default.merge($LS($LZ), xs#0, ys#0))
     && 
    _module.__default.sorted($LS($LZ), _module.__default.merge($LS($LZ), xs#0, ys#0))
     && (if _module.List.Nil_q(_module.__default.merge($LS($LZ), xs#0, ys#0))
       then true
       else (var ys#6 := _module.List.tail(_module.__default.merge($LS($LZ), xs#0, ys#0)); 
        (var a#5 := _module.List.head(_module.__default.merge($LS($LZ), xs#0, ys#0)); 
          (forall y#5: Box :: 
              { _module.__default.Below(a#5, y#5) } 
                { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#6), y#5) } 
              $IsBox(y#5, Tclass._module.G())
                 ==> 
                MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#6), y#5)
                   > 0
                 ==> _module.__default.Below(a#5, y#5))
             && _module.__default.sorted($LS($LZ), ys#6))));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "sorted_merge (correctness)"} Impl$$_module.__default.sorted__merge(xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(xs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(xs#0), 
    ys#0: DatatypeType
       where $Is(ys#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(ys#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(ys#0))
   returns ($_reverifyPost: bool);
  free requires 3 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id657"} _module.__default.sorted#canCall(xs#0)
     && 
    _module.__default.sorted($LS($LZ), xs#0)
     && (if _module.List.Nil_q(xs#0)
       then true
       else (var ys#8 := _module.List.tail(xs#0); 
        (var a#7 := _module.List.head(xs#0); 
          (forall y#7: Box :: 
              { _module.__default.Below(a#7, y#7) } 
                { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#8), y#7) } 
              $IsBox(y#7, Tclass._module.G())
                 ==> 
                MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#8), y#7)
                   > 0
                 ==> _module.__default.Below(a#7, y#7))
             && _module.__default.sorted($LS($LZ), ys#8))));
  free requires {:id "id658"} _module.__default.sorted#canCall(ys#0)
     && 
    _module.__default.sorted($LS($LZ), ys#0)
     && (if _module.List.Nil_q(ys#0)
       then true
       else (var ys#10 := _module.List.tail(ys#0); 
        (var a#9 := _module.List.head(ys#0); 
          (forall y#9: Box :: 
              { _module.__default.Below(a#9, y#9) } 
                { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#10), y#9) } 
              $IsBox(y#9, Tclass._module.G())
                 ==> 
                MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#10), y#9)
                   > 0
                 ==> _module.__default.Below(a#9, y#9))
             && _module.__default.sorted($LS($LZ), ys#10))));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.merge#canCall(xs#0, ys#0)
     && _module.__default.sorted#canCall(_module.__default.merge($LS($LZ), xs#0, ys#0));
  ensures {:id "id659"} _module.__default.sorted#canCall(_module.__default.merge($LS($LZ), xs#0, ys#0))
     ==> _module.__default.sorted($LS($LZ), _module.__default.merge($LS($LZ), xs#0, ys#0))
       || (_module.List.Nil_q(_module.__default.merge($LS($LZ), xs#0, ys#0))
         ==> Lit(true));
  ensures {:id "id660"} _module.__default.sorted#canCall(_module.__default.merge($LS($LZ), xs#0, ys#0))
     ==> _module.__default.sorted($LS($LZ), _module.__default.merge($LS($LZ), xs#0, ys#0))
       || (!_module.List.Nil_q(_module.__default.merge($LS($LZ), xs#0, ys#0))
         ==> (var ys#11 := _module.List.tail(_module.__default.merge($LS($LS($LZ)), xs#0, ys#0)); 
          (var a#10 := _module.List.head(_module.__default.merge($LS($LS($LZ)), xs#0, ys#0)); 
            (forall y#10: Box :: 
              { _module.__default.Below(a#10, y#10) } 
                { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#11), y#10) } 
              $IsBox(y#10, Tclass._module.G())
                 ==> 
                MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#11), y#10)
                   > 0
                 ==> _module.__default.Below(a#10, y#10)))));
  ensures {:id "id661"} _module.__default.sorted#canCall(_module.__default.merge($LS($LZ), xs#0, ys#0))
     ==> _module.__default.sorted($LS($LZ), _module.__default.merge($LS($LZ), xs#0, ys#0))
       || (!_module.List.Nil_q(_module.__default.merge($LS($LZ), xs#0, ys#0))
         ==> (var ys#11 := _module.List.tail(_module.__default.merge($LS($LS($LZ)), xs#0, ys#0)); 
          (var a#10 := _module.List.head(_module.__default.merge($LS($LS($LZ)), xs#0, ys#0)); 
            _module.__default.sorted($LS($LS($LZ)), ys#11))));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "sorted_merge (correctness)"} Impl$$_module.__default.sorted__merge(xs#0: DatatypeType, ys#0: DatatypeType) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $initHeapForallStmt#0: Heap;

    // AddMethodImpl: sorted_merge, Impl$$_module.__default.sorted__merge
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume $IsA#_module.List(xs#0);
    assume $IsA#_module.List(ys#0);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#xs0#0: DatatypeType, $ih#ys0#0: DatatypeType :: 
      { _module.__default.merge($LS($LZ), $ih#xs0#0, $ih#ys0#0) } 
      $Is($ih#xs0#0, Tclass._module.List(Tclass._module.G()))
           && $Is($ih#ys0#0, Tclass._module.List(Tclass._module.G()))
           && 
          _module.__default.sorted($LS($LZ), $ih#xs0#0)
           && _module.__default.sorted($LS($LZ), $ih#ys0#0)
           && (DtRank($ih#xs0#0) < DtRank(xs#0)
             || (DtRank($ih#xs0#0) == DtRank(xs#0) && DtRank($ih#ys0#0) < DtRank(ys#0)))
         ==> _module.__default.sorted($LS($LZ), _module.__default.merge($LS($LZ), $ih#xs0#0, $ih#ys0#0)));
    $_reverifyPost := false;
}



procedure {:verboseName "stable_sort (well-formedness)"} CheckWellFormed$$_module.__default.stable__sort(g#0: Box
       where $IsBox(g#0, Tclass._module.G()) && $IsAllocBox(g#0, Tclass._module.G(), $Heap), 
    xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(xs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(xs#0));
  free requires 7 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "stable_sort (call)"} Call$$_module.__default.stable__sort(g#0: Box
       where $IsBox(g#0, Tclass._module.G()) && $IsAllocBox(g#0, Tclass._module.G(), $Heap), 
    xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(xs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(xs#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#_module.List(_module.__default.filter($LS($LZ), g#0, _module.__default.sort(xs#0)))
     && $IsA#_module.List(_module.__default.filter($LS($LZ), g#0, xs#0))
     && 
    _module.__default.sort#canCall(xs#0)
     && _module.__default.filter#canCall(g#0, _module.__default.sort(xs#0))
     && _module.__default.filter#canCall(g#0, xs#0);
  ensures {:id "id663"} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), g#0, _module.__default.sort(xs#0)), 
    _module.__default.filter($LS($LS($LZ)), g#0, xs#0));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "stable_sort (correctness)"} Impl$$_module.__default.stable__sort(g#0: Box
       where $IsBox(g#0, Tclass._module.G()) && $IsAllocBox(g#0, Tclass._module.G(), $Heap), 
    xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(xs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(xs#0))
   returns ($_reverifyPost: bool);
  free requires 7 == $FunctionContextHeight;
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#_module.List(_module.__default.filter($LS($LZ), g#0, _module.__default.sort(xs#0)))
     && $IsA#_module.List(_module.__default.filter($LS($LZ), g#0, xs#0))
     && 
    _module.__default.sort#canCall(xs#0)
     && _module.__default.filter#canCall(g#0, _module.__default.sort(xs#0))
     && _module.__default.filter#canCall(g#0, xs#0);
  ensures {:id "id664"} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), g#0, _module.__default.sort(xs#0)), 
    _module.__default.filter($LS($LS($LZ)), g#0, xs#0));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "stable_sort (correctness)"} Impl$$_module.__default.stable__sort(g#0: Box, xs#0: DatatypeType) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $initHeapForallStmt#0: Heap;
  var ##g#0_0_0: Box;
  var ##xs#0_0_0: DatatypeType;
  var ##x#0_0_0: DatatypeType;
  var ##xs#0_0_1: DatatypeType;
  var g##0_0_0: Box;
  var xs##0_0_0: DatatypeType;
  var ##g#0_0_1: Box;
  var ##xs#0_0_2: DatatypeType;
  var ##g#0_1_0: Box;
  var ##xs#0_1_0: DatatypeType;
  var ##x#0_1_0: DatatypeType;
  var ##xs#0_1_1: DatatypeType;
  var xs##0_1_0: DatatypeType;
  var g##0_1_0: Box;
  var x##0_1_0: DatatypeType;
  var ##xs#0_1_2: DatatypeType;
  var ##g#0_1_1: Box;
  var ##xs#0_1_3: DatatypeType;
  var ##x#0_1_1: DatatypeType;
  var ##xs#0_1_4: DatatypeType;
  var ##g#0_2_0: Box;
  var ##xs#0_2_0: DatatypeType;
  var ##xs#0_2_1: DatatypeType;
  var ##g#0_2_1: Box;
  var ##xs#0_2_2: DatatypeType;
  var ##x#0_2_0: DatatypeType;
  var ##xs#0_2_3: DatatypeType;
  var ##g#0_0: Box;
  var ##xs#0_0: DatatypeType;
  var ##xs#0_1: DatatypeType;

    // AddMethodImpl: stable_sort, Impl$$_module.__default.stable__sort
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume $IsA#_module.List(xs#0);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#xs0#0: DatatypeType :: 
      { _module.__default.sort($ih#xs0#0) } 
      $Is($ih#xs0#0, Tclass._module.List(Tclass._module.G()))
           && Lit(true)
           && DtRank($ih#xs0#0) < DtRank(xs#0)
         ==> _module.List#Equal(_module.__default.filter($LS($LZ), g#0, _module.__default.sort($ih#xs0#0)), 
          _module.__default.filter($LS($LZ), g#0, $ih#xs0#0)));
    $_reverifyPost := false;
    // ----- calc statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(455,3)
    // Assume Fuel Constant
    if (*)
    {
        // ----- assert wf[initial] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(455,3)
        ##g#0_0 := g#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##g#0_0, Tclass._module.G(), $Heap);
        ##xs#0_1 := xs#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##xs#0_1, Tclass._module.List(Tclass._module.G()), $Heap);
        assume _module.__default.sort#canCall(xs#0);
        ##xs#0_0 := _module.__default.sort(xs#0);
        // assume allocatedness for argument to function
        assume $IsAlloc(##xs#0_0, Tclass._module.List(Tclass._module.G()), $Heap);
        assume _module.__default.filter#canCall(g#0, _module.__default.sort(xs#0));
        assume _module.__default.sort#canCall(xs#0)
           && _module.__default.filter#canCall(g#0, _module.__default.sort(xs#0));
        assume false;
    }
    else if (*)
    {
        // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(455,3)
        ##g#0_2_0 := g#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##g#0_2_0, Tclass._module.G(), $Heap);
        ##xs#0_2_1 := xs#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##xs#0_2_1, Tclass._module.List(Tclass._module.G()), $Heap);
        assume _module.__default.sort#canCall(xs#0);
        ##xs#0_2_0 := _module.__default.sort(xs#0);
        // assume allocatedness for argument to function
        assume $IsAlloc(##xs#0_2_0, Tclass._module.List(Tclass._module.G()), $Heap);
        assume _module.__default.filter#canCall(g#0, _module.__default.sort(xs#0));
        assume _module.__default.sort#canCall(xs#0)
           && _module.__default.filter#canCall(g#0, _module.__default.sort(xs#0));
        // ----- Hint0 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(455,3)
        // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(455,3)
        ##g#0_2_1 := g#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##g#0_2_1, Tclass._module.G(), $Heap);
        ##xs#0_2_3 := xs#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##xs#0_2_3, Tclass._module.List(Tclass._module.G()), $Heap);
        assume _module.__default.sequences#canCall(xs#0);
        ##x#0_2_0 := _module.__default.sequences($LS($LZ), xs#0);
        // assume allocatedness for argument to function
        assume $IsAlloc(##x#0_2_0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
        assert {:id "id671"} {:subsumption 0} !_module.List#Equal(##x#0_2_0, #_module.List.Nil());
        assume _module.__default.mergeAll#canCall(_module.__default.sequences($LS($LZ), xs#0));
        ##xs#0_2_2 := _module.__default.mergeAll($LS($LZ), _module.__default.sequences($LS($LZ), xs#0));
        // assume allocatedness for argument to function
        assume $IsAlloc(##xs#0_2_2, Tclass._module.List(Tclass._module.G()), $Heap);
        assume _module.__default.filter#canCall(g#0, 
          _module.__default.mergeAll($LS($LZ), _module.__default.sequences($LS($LZ), xs#0)));
        assume _module.__default.sequences#canCall(xs#0)
           && _module.__default.mergeAll#canCall(_module.__default.sequences($LS($LZ), xs#0))
           && _module.__default.filter#canCall(g#0, 
            _module.__default.mergeAll($LS($LZ), _module.__default.sequences($LS($LZ), xs#0)));
        // ----- assert line0 == line1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(455,3)
        assert {:id "id672"} {:subsumption 0} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), g#0, _module.__default.sort(xs#0)), 
          _module.__default.filter($LS($LS($LZ)), 
            g#0, 
            _module.__default.mergeAll($LS($LS($LZ)), _module.__default.sequences($LS($LS($LZ)), xs#0))));
        assume false;
    }
    else if (*)
    {
        // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(455,3)
        ##g#0_1_0 := g#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##g#0_1_0, Tclass._module.G(), $Heap);
        ##xs#0_1_1 := xs#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##xs#0_1_1, Tclass._module.List(Tclass._module.G()), $Heap);
        assume _module.__default.sequences#canCall(xs#0);
        ##x#0_1_0 := _module.__default.sequences($LS($LZ), xs#0);
        // assume allocatedness for argument to function
        assume $IsAlloc(##x#0_1_0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
        assume {:id "id667"} {:subsumption 0} !_module.List#Equal(##x#0_1_0, #_module.List.Nil());
        assume _module.__default.mergeAll#canCall(_module.__default.sequences($LS($LZ), xs#0));
        ##xs#0_1_0 := _module.__default.mergeAll($LS($LZ), _module.__default.sequences($LS($LZ), xs#0));
        // assume allocatedness for argument to function
        assume $IsAlloc(##xs#0_1_0, Tclass._module.List(Tclass._module.G()), $Heap);
        assume _module.__default.filter#canCall(g#0, 
          _module.__default.mergeAll($LS($LZ), _module.__default.sequences($LS($LZ), xs#0)));
        assume _module.__default.sequences#canCall(xs#0)
           && _module.__default.mergeAll#canCall(_module.__default.sequences($LS($LZ), xs#0))
           && _module.__default.filter#canCall(g#0, 
            _module.__default.mergeAll($LS($LZ), _module.__default.sequences($LS($LZ), xs#0)));
        // ----- Hint1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(455,3)
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(459,23)
        // TrCallStmt: Before ProcessCallStmt
        assume true;
        // ProcessCallStmt: CheckSubrange
        xs##0_1_0 := xs#0;
        call {:id "id668"} Call$$_module.__default.sorted__sequences(xs##0_1_0);
        // TrCallStmt: After ProcessCallStmt
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(459,44)
        // TrCallStmt: Before ProcessCallStmt
        assume true;
        // ProcessCallStmt: CheckSubrange
        g##0_1_0 := g#0;
        ##xs#0_1_2 := xs#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##xs#0_1_2, Tclass._module.List(Tclass._module.G()), $Heap);
        assume _module.__default.sequences#canCall(xs#0);
        assume _module.__default.sequences#canCall(xs#0);
        // ProcessCallStmt: CheckSubrange
        x##0_1_0 := _module.__default.sequences($LS($LZ), xs#0);
        call {:id "id669"} Call$$_module.__default.stable__mergeAll(g##0_1_0, x##0_1_0);
        // TrCallStmt: After ProcessCallStmt
        // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(455,3)
        ##g#0_1_1 := g#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##g#0_1_1, Tclass._module.G(), $Heap);
        ##xs#0_1_4 := xs#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##xs#0_1_4, Tclass._module.List(Tclass._module.G()), $Heap);
        assume _module.__default.sequences#canCall(xs#0);
        ##x#0_1_1 := _module.__default.sequences($LS($LZ), xs#0);
        // assume allocatedness for argument to function
        assume $IsAlloc(##x#0_1_1, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
        assume _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.sequences($LS($LZ), xs#0));
        ##xs#0_1_3 := _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), xs#0));
        // assume allocatedness for argument to function
        assume $IsAlloc(##xs#0_1_3, Tclass._module.List(Tclass._module.G()), $Heap);
        assume _module.__default.filter#canCall(g#0, 
          _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), xs#0)));
        assume _module.__default.sequences#canCall(xs#0)
           && _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.sequences($LS($LZ), xs#0))
           && _module.__default.filter#canCall(g#0, 
            _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), xs#0)));
        // ----- assert line1 == line2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(455,3)
        assert {:id "id670"} {:subsumption 0} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
            g#0, 
            _module.__default.mergeAll($LS($LS($LZ)), _module.__default.sequences($LS($LS($LZ)), xs#0))), 
          _module.__default.filter($LS($LS($LZ)), 
            g#0, 
            _module.__default.flatten(Tclass._module.G(), 
              $LS($LS($LZ)), 
              _module.__default.sequences($LS($LS($LZ)), xs#0))));
        assume false;
    }
    else if (*)
    {
        // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(455,3)
        ##g#0_0_0 := g#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##g#0_0_0, Tclass._module.G(), $Heap);
        ##xs#0_0_1 := xs#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##xs#0_0_1, Tclass._module.List(Tclass._module.G()), $Heap);
        assume _module.__default.sequences#canCall(xs#0);
        ##x#0_0_0 := _module.__default.sequences($LS($LZ), xs#0);
        // assume allocatedness for argument to function
        assume $IsAlloc(##x#0_0_0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
        assume _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.sequences($LS($LZ), xs#0));
        ##xs#0_0_0 := _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), xs#0));
        // assume allocatedness for argument to function
        assume $IsAlloc(##xs#0_0_0, Tclass._module.List(Tclass._module.G()), $Heap);
        assume _module.__default.filter#canCall(g#0, 
          _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), xs#0)));
        assume _module.__default.sequences#canCall(xs#0)
           && _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.sequences($LS($LZ), xs#0))
           && _module.__default.filter#canCall(g#0, 
            _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), xs#0)));
        // ----- Hint2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(455,3)
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(461,23)
        // TrCallStmt: Before ProcessCallStmt
        assume true;
        // ProcessCallStmt: CheckSubrange
        g##0_0_0 := g#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        xs##0_0_0 := xs#0;
        call {:id "id665"} Call$$_module.__default.stable__sequences(g##0_0_0, xs##0_0_0);
        // TrCallStmt: After ProcessCallStmt
        // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(455,3)
        ##g#0_0_1 := g#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##g#0_0_1, Tclass._module.G(), $Heap);
        ##xs#0_0_2 := xs#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##xs#0_0_2, Tclass._module.List(Tclass._module.G()), $Heap);
        assume _module.__default.filter#canCall(g#0, xs#0);
        assume _module.__default.filter#canCall(g#0, xs#0);
        // ----- assert line2 == line3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(455,3)
        assert {:id "id666"} {:subsumption 0} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
            g#0, 
            _module.__default.flatten(Tclass._module.G(), 
              $LS($LS($LZ)), 
              _module.__default.sequences($LS($LS($LZ)), xs#0))), 
          _module.__default.filter($LS($LS($LZ)), g#0, xs#0));
        assume false;
    }

    assume {:id "id673"} _module.List#Equal(_module.__default.filter($LS($LZ), g#0, _module.__default.sort(xs#0)), 
      _module.__default.filter($LS($LZ), g#0, xs#0));
}



procedure {:verboseName "stable_sequences (well-formedness)"} CheckWellFormed$$_module.__default.stable__sequences(g#0: Box
       where $IsBox(g#0, Tclass._module.G()) && $IsAllocBox(g#0, Tclass._module.G(), $Heap), 
    xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(xs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(xs#0));
  free requires 5 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "stable_sequences (call)"} Call$$_module.__default.stable__sequences(g#0: Box
       where $IsBox(g#0, Tclass._module.G()) && $IsAllocBox(g#0, Tclass._module.G(), $Heap), 
    xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(xs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(xs#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#_module.List(_module.__default.filter($LS($LZ), 
        g#0, 
        _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), xs#0))))
     && $IsA#_module.List(_module.__default.filter($LS($LZ), g#0, xs#0))
     && 
    _module.__default.sequences#canCall(xs#0)
     && _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.sequences($LS($LZ), xs#0))
     && _module.__default.filter#canCall(g#0, 
      _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), xs#0)))
     && _module.__default.filter#canCall(g#0, xs#0);
  ensures {:id "id675"} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
      g#0, 
      _module.__default.flatten(Tclass._module.G(), 
        $LS($LS($LZ)), 
        _module.__default.sequences($LS($LS($LZ)), xs#0))), 
    _module.__default.filter($LS($LS($LZ)), g#0, xs#0));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "stable_sequences (correctness)"} Impl$$_module.__default.stable__sequences(g#0: Box
       where $IsBox(g#0, Tclass._module.G()) && $IsAllocBox(g#0, Tclass._module.G(), $Heap), 
    xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(xs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(xs#0))
   returns ($_reverifyPost: bool);
  free requires 5 == $FunctionContextHeight;
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#_module.List(_module.__default.filter($LS($LZ), 
        g#0, 
        _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), xs#0))))
     && $IsA#_module.List(_module.__default.filter($LS($LZ), g#0, xs#0))
     && 
    _module.__default.sequences#canCall(xs#0)
     && _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.sequences($LS($LZ), xs#0))
     && _module.__default.filter#canCall(g#0, 
      _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), xs#0)))
     && _module.__default.filter#canCall(g#0, xs#0);
  ensures {:id "id676"} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
      g#0, 
      _module.__default.flatten(Tclass._module.G(), 
        $LS($LS($LZ)), 
        _module.__default.sequences($LS($LS($LZ)), xs#0))), 
    _module.__default.filter($LS($LS($LZ)), g#0, xs#0));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "stable_sequences (correctness)"} Impl$$_module.__default.stable__sequences(g#0: Box, xs#0: DatatypeType) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $initHeapForallStmt#0: Heap;
  var _mcc#0#0_0: Box;
  var _mcc#1#0_0: DatatypeType;
  var ys#0_0: DatatypeType;
  var let#0_0#0#0: DatatypeType;
  var a#0_0: Box;
  var let#0_1#0#0: Box;
  var _mcc#2#0_0_0: Box;
  var _mcc#3#0_0_0: DatatypeType;
  var zs#0_0_0: DatatypeType;
  var let#0_0_0#0#0: DatatypeType;
  var b#0_0_0: Box;
  var let#0_0_1#0#0: Box;
  var ##a#0_0_0: Box;
  var ##b#0_0_0: Box;
  var ##g#0_0_0_0_0_0: Box;
  var ##xs#0_0_0_0_0_0: DatatypeType;
  var g##0_0_0_0_0_0: Box;
  var b##0_0_0_0_0_0: Box;
  var a##0_0_0_0_0_0: Box;
  var ys##0_0_0_0_0_0: DatatypeType;
  var ##g#0_0_0_0_0_1: Box;
  var ##xs#0_0_0_0_0_1: DatatypeType;
  var ##g#0_0_0_0_1_0: Box;
  var ##xs#0_0_0_0_1_0: DatatypeType;
  var ##xs#0_0_0_0_1_1: DatatypeType;
  var ##ys#0_0_0_0_1_0: DatatypeType;
  var ##g#0_0_0_0_1_1: Box;
  var ##xs#0_0_0_0_1_2: DatatypeType;
  var ##g#0_0_0_0_2_0: Box;
  var ##xs#0_0_0_0_2_0: DatatypeType;
  var ##xs#0_0_0_0_2_1: DatatypeType;
  var ##ys#0_0_0_0_2_0: DatatypeType;
  var ##g#0_0_0_0_2_1: Box;
  var ##xs#0_0_0_0_2_2: DatatypeType;
  var ##xs#0_0_0_0_2_3: DatatypeType;
  var ##ys#0_0_0_0_2_1: DatatypeType;
  var ##g#0_0_0_0_3_0: Box;
  var ##xs#0_0_0_0_3_0: DatatypeType;
  var ##x#0_0_0_0_3_0: DatatypeType;
  var ##a#0_0_0_0_3_0: Box;
  var ##xs#0_0_0_0_3_1: DatatypeType;
  var ##ys#0_0_0_0_3_0: DatatypeType;
  var ##xs#0_0_0_0_3_2: DatatypeType;
  var g##0_0_0_0_3_0: Box;
  var a##0_0_0_0_3_0: Box;
  var xs##0_0_0_0_3_0: DatatypeType;
  var ys##0_0_0_0_3_0: DatatypeType;
  var ##g#0_0_0_0_3_1: Box;
  var ##xs#0_0_0_0_3_3: DatatypeType;
  var ##xs#0_0_0_0_3_4: DatatypeType;
  var ##ys#0_0_0_0_3_1: DatatypeType;
  var ##g#0_0_0_0_4_0: Box;
  var ##xs#0_0_0_0_4_0: DatatypeType;
  var ##x#0_0_0_0_4_0: DatatypeType;
  var ##xs#0_0_0_0_4_1: DatatypeType;
  var ##g#0_0_0_0_4_1: Box;
  var ##xs#0_0_0_0_4_2: DatatypeType;
  var ##x#0_0_0_0_4_1: DatatypeType;
  var ##a#0_0_0_0_4_0: Box;
  var ##xs#0_0_0_0_4_3: DatatypeType;
  var ##ys#0_0_0_0_4_0: DatatypeType;
  var ##g#0_0_0_0_0: Box;
  var ##xs#0_0_0_0_0: DatatypeType;
  var ##x#0_0_0_0_0: DatatypeType;
  var ##xs#0_0_0_0_1: DatatypeType;
  var ##g#0_0_1_0_0_0: Box;
  var ##xs#0_0_1_0_0_0: DatatypeType;
  var ##xs#0_0_1_0_0_1: DatatypeType;
  var ##ys#0_0_1_0_0_0: DatatypeType;
  var ##g#0_0_1_0_0_1: Box;
  var ##xs#0_0_1_0_0_2: DatatypeType;
  var ##g#0_0_1_0_1_0: Box;
  var ##xs#0_0_1_0_1_0: DatatypeType;
  var ##xs#0_0_1_0_1_1: DatatypeType;
  var ##ys#0_0_1_0_1_0: DatatypeType;
  var ##g#0_0_1_0_1_1: Box;
  var ##xs#0_0_1_0_1_2: DatatypeType;
  var ##xs#0_0_1_0_1_3: DatatypeType;
  var ##ys#0_0_1_0_1_1: DatatypeType;
  var ##g#0_0_1_0_2_0: Box;
  var ##xs#0_0_1_0_2_0: DatatypeType;
  var ##xs#0_0_1_0_2_1: DatatypeType;
  var ##xs#0_0_1_0_2_2: DatatypeType;
  var ##acc#0_0_1_0_2_0: DatatypeType;
  var ##ys#0_0_1_0_2_0: DatatypeType;
  var ##g#0_0_1_0_2_1: Box;
  var ##xs#0_0_1_0_2_3: DatatypeType;
  var ##xs#0_0_1_0_2_4: DatatypeType;
  var ##ys#0_0_1_0_2_1: DatatypeType;
  var ##g#0_0_1_0_3_0: Box;
  var ##xs#0_0_1_0_3_0: DatatypeType;
  var ##xs#0_0_1_0_3_1: DatatypeType;
  var ##xs#0_0_1_0_3_2: DatatypeType;
  var ##acc#0_0_1_0_3_0: DatatypeType;
  var ##ys#0_0_1_0_3_0: DatatypeType;
  var ##g#0_0_1_0_3_1: Box;
  var ##xs#0_0_1_0_3_3: DatatypeType;
  var ##xs#0_0_1_0_3_4: DatatypeType;
  var ##xs#0_0_1_0_3_5: DatatypeType;
  var ##acc#0_0_1_0_3_1: DatatypeType;
  var ##ys#0_0_1_0_3_1: DatatypeType;
  var ##g#0_0_1_0_4_0: Box;
  var ##xs#0_0_1_0_4_0: DatatypeType;
  var ##xs#0_0_1_0_4_1: DatatypeType;
  var ##xs#0_0_1_0_4_2: DatatypeType;
  var ##acc#0_0_1_0_4_0: DatatypeType;
  var ##ys#0_0_1_0_4_0: DatatypeType;
  var ##g#0_0_1_0_4_1: Box;
  var ##xs#0_0_1_0_4_3: DatatypeType;
  var ##xs#0_0_1_0_4_4: DatatypeType;
  var ##xs#0_0_1_0_4_5: DatatypeType;
  var ##acc#0_0_1_0_4_1: DatatypeType;
  var ##ys#0_0_1_0_4_1: DatatypeType;
  var ##g#0_0_1_0_5_0: Box;
  var ##xs#0_0_1_0_5_0: DatatypeType;
  var ##x#0_0_1_0_5_0: DatatypeType;
  var ##a#0_0_1_0_5_0: Box;
  var ##xs#0_0_1_0_5_1: DatatypeType;
  var ##ys#0_0_1_0_5_0: DatatypeType;
  var g##0_0_1_0_5_0: Box;
  var a##0_0_1_0_5_0: Box;
  var xs##0_0_1_0_5_0: DatatypeType;
  var ys##0_0_1_0_5_0: DatatypeType;
  var ##g#0_0_1_0_5_1: Box;
  var ##xs#0_0_1_0_5_2: DatatypeType;
  var ##xs#0_0_1_0_5_3: DatatypeType;
  var ##xs#0_0_1_0_5_4: DatatypeType;
  var ##acc#0_0_1_0_5_0: DatatypeType;
  var ##ys#0_0_1_0_5_1: DatatypeType;
  var ##g#0_0_1_0_6_0: Box;
  var ##xs#0_0_1_0_6_0: DatatypeType;
  var ##x#0_0_1_0_6_0: DatatypeType;
  var ##xs#0_0_1_0_6_1: DatatypeType;
  var ##g#0_0_1_0_6_1: Box;
  var ##xs#0_0_1_0_6_2: DatatypeType;
  var ##x#0_0_1_0_6_1: DatatypeType;
  var ##a#0_0_1_0_6_0: Box;
  var ##xs#0_0_1_0_6_3: DatatypeType;
  var ##ys#0_0_1_0_6_0: DatatypeType;
  var ##g#0_0_1_0_0: Box;
  var ##xs#0_0_1_0_0: DatatypeType;
  var ##x#0_0_1_0_0: DatatypeType;
  var ##xs#0_0_1_0_1: DatatypeType;
  var ##xs#0_1_0_0_0: DatatypeType;
  var ##ys#0_1_0_0_0: DatatypeType;
  var xs##0_1_0_0_0: DatatypeType;
  var ##xs#0_1_0_1_0: DatatypeType;
  var ##ys#0_1_0_1_0: DatatypeType;
  var ##x#0_1_0_1_0: DatatypeType;
  var ##xs#0_1_0_1_1: DatatypeType;
  var ##ys#0_1_0_1_1: DatatypeType;
  var ##x#0_1_0_2_0: DatatypeType;
  var ##xs#0_1_0_2_0: DatatypeType;
  var ##ys#0_1_0_2_0: DatatypeType;
  var ##x#0_1_0_2_1: DatatypeType;
  var ##x#0_1_0_3_0: DatatypeType;
  var ##xs#0_1_0_3_0: DatatypeType;
  var ##x#0_1_0_3_1: DatatypeType;
  var ##x#0_1_0_0: DatatypeType;
  var ##xs#0_1_0_0: DatatypeType;

    // AddMethodImpl: stable_sequences, Impl$$_module.__default.stable__sequences
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume $IsA#_module.List(xs#0);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#xs0#0: DatatypeType :: 
      { _module.__default.sequences($LS($LZ), $ih#xs0#0) } 
      $Is($ih#xs0#0, Tclass._module.List(Tclass._module.G()))
           && Lit(true)
           && (DtRank($ih#xs0#0) < DtRank(xs#0)
             || (DtRank($ih#xs0#0) == DtRank(xs#0) && 0 <= LitInt(0) && LitInt(0) < LitInt(0)))
         ==> _module.List#Equal(_module.__default.filter($LS($LZ), 
            g#0, 
            _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), $ih#xs0#0))), 
          _module.__default.filter($LS($LZ), g#0, $ih#xs0#0)));
    $_reverifyPost := false;
    assume true;
    havoc _mcc#0#0_0, _mcc#1#0_0;
    if (xs#0 == #_module.List.Nil())
    {
    }
    else if (xs#0 == #_module.List.Cons(_mcc#0#0_0, _mcc#1#0_0))
    {
        assume $IsBox(_mcc#0#0_0, Tclass._module.G());
        assume $Is(_mcc#1#0_0, Tclass._module.List(Tclass._module.G()));
        havoc ys#0_0;
        assume $Is(ys#0_0, Tclass._module.List(Tclass._module.G()))
           && $IsAlloc(ys#0_0, Tclass._module.List(Tclass._module.G()), $Heap);
        assume {:id "id677"} let#0_0#0#0 == _mcc#1#0_0;
        assume true;
        assume true;
        // CheckWellformedWithResult: any expression
        assume $Is(let#0_0#0#0, Tclass._module.List(Tclass._module.G()));
        assume {:id "id678"} ys#0_0 == let#0_0#0#0;
        havoc a#0_0;
        assume $IsBox(a#0_0, Tclass._module.G())
           && $IsAllocBox(a#0_0, Tclass._module.G(), $Heap);
        assume {:id "id679"} let#0_1#0#0 == _mcc#0#0_0;
        assume true;
        assume true;
        // CheckWellformedWithResult: any expression
        assume $IsBox(let#0_1#0#0, Tclass._module.G());
        assume {:id "id680"} a#0_0 == let#0_1#0#0;
        assume true;
        havoc _mcc#2#0_0_0, _mcc#3#0_0_0;
        if (ys#0_0 == #_module.List.Nil())
        {
            // ----- calc statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(475,11)
            // Assume Fuel Constant
            if (*)
            {
                // ----- assert wf[initial] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(475,11)
                ##xs#0_1_0_0 := xs#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##xs#0_1_0_0, Tclass._module.List(Tclass._module.G()), $Heap);
                assume _module.__default.sequences#canCall(xs#0);
                ##x#0_1_0_0 := _module.__default.sequences($LS($LZ), xs#0);
                // assume allocatedness for argument to function
                assume $IsAlloc(##x#0_1_0_0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
                assume _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.sequences($LS($LZ), xs#0));
                assume _module.__default.sequences#canCall(xs#0)
                   && _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.sequences($LS($LZ), xs#0));
                assume false;
            }
            else if (*)
            {
                // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(475,11)
                ##xs#0_1_0_3_0 := xs#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##xs#0_1_0_3_0, Tclass._module.List(Tclass._module.G()), $Heap);
                assume _module.__default.sequences#canCall(xs#0);
                ##x#0_1_0_3_0 := _module.__default.sequences($LS($LZ), xs#0);
                // assume allocatedness for argument to function
                assume $IsAlloc(##x#0_1_0_3_0, 
                  Tclass._module.List(Tclass._module.List(Tclass._module.G())), 
                  $Heap);
                assume _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.sequences($LS($LZ), xs#0));
                assume _module.__default.sequences#canCall(xs#0)
                   && _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.sequences($LS($LZ), xs#0));
                // ----- Hint0 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(475,11)
                // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(475,11)
                ##x#0_1_0_3_1 := #_module.List.Cons($Box(xs#0), Lit(#_module.List.Nil()));
                // assume allocatedness for argument to function
                assume $IsAlloc(##x#0_1_0_3_1, 
                  Tclass._module.List(Tclass._module.List(Tclass._module.G())), 
                  $Heap);
                assume _module.__default.flatten#canCall(Tclass._module.G(), #_module.List.Cons($Box(xs#0), Lit(#_module.List.Nil())));
                assume _module.__default.flatten#canCall(Tclass._module.G(), #_module.List.Cons($Box(xs#0), Lit(#_module.List.Nil())));
                // ----- assert line0 == line1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(475,11)
                assert {:id "id712"} {:subsumption 0} _module.List#Equal(_module.__default.flatten(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    _module.__default.sequences($LS($LS($LZ)), xs#0)), 
                  _module.__default.flatten(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    #_module.List.Cons($Box(xs#0), Lit(#_module.List.Nil()))));
                assume false;
            }
            else if (*)
            {
                // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(475,11)
                ##x#0_1_0_2_0 := #_module.List.Cons($Box(xs#0), Lit(#_module.List.Nil()));
                // assume allocatedness for argument to function
                assume $IsAlloc(##x#0_1_0_2_0, 
                  Tclass._module.List(Tclass._module.List(Tclass._module.G())), 
                  $Heap);
                assume _module.__default.flatten#canCall(Tclass._module.G(), #_module.List.Cons($Box(xs#0), Lit(#_module.List.Nil())));
                assume _module.__default.flatten#canCall(Tclass._module.G(), #_module.List.Cons($Box(xs#0), Lit(#_module.List.Nil())));
                // ----- Hint1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(475,11)
                // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(475,11)
                ##xs#0_1_0_2_0 := xs#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##xs#0_1_0_2_0, Tclass._module.List(Tclass._module.G()), $Heap);
                ##x#0_1_0_2_1 := Lit(#_module.List.Nil());
                // assume allocatedness for argument to function
                assume $IsAlloc(##x#0_1_0_2_1, 
                  Tclass._module.List(Tclass._module.List(Tclass._module.G())), 
                  $Heap);
                assume _module.__default.flatten#canCall(Tclass._module.G(), Lit(#_module.List.Nil()));
                ##ys#0_1_0_2_0 := Lit(_module.__default.flatten(Tclass._module.G(), $LS($LZ), Lit(#_module.List.Nil())));
                // assume allocatedness for argument to function
                assume $IsAlloc(##ys#0_1_0_2_0, Tclass._module.List(Tclass._module.G()), $Heap);
                assume _module.__default.append#canCall(Tclass._module.G(), 
                  xs#0, 
                  Lit(_module.__default.flatten(Tclass._module.G(), $LS($LZ), Lit(#_module.List.Nil()))));
                assume _module.__default.flatten#canCall(Tclass._module.G(), Lit(#_module.List.Nil()))
                   && _module.__default.append#canCall(Tclass._module.G(), 
                    xs#0, 
                    Lit(_module.__default.flatten(Tclass._module.G(), $LS($LZ), Lit(#_module.List.Nil()))));
                // ----- assert line1 == line2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(475,11)
                assert {:id "id711"} {:subsumption 0} _module.List#Equal(_module.__default.flatten(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    #_module.List.Cons($Box(xs#0), Lit(#_module.List.Nil()))), 
                  _module.__default.append(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    xs#0, 
                    Lit(_module.__default.flatten(Tclass._module.G(), $LS($LS($LZ)), Lit(#_module.List.Nil())))));
                assume false;
            }
            else if (*)
            {
                // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(475,11)
                ##xs#0_1_0_1_0 := xs#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##xs#0_1_0_1_0, Tclass._module.List(Tclass._module.G()), $Heap);
                ##x#0_1_0_1_0 := Lit(#_module.List.Nil());
                // assume allocatedness for argument to function
                assume $IsAlloc(##x#0_1_0_1_0, 
                  Tclass._module.List(Tclass._module.List(Tclass._module.G())), 
                  $Heap);
                assume _module.__default.flatten#canCall(Tclass._module.G(), Lit(#_module.List.Nil()));
                ##ys#0_1_0_1_0 := Lit(_module.__default.flatten(Tclass._module.G(), $LS($LZ), Lit(#_module.List.Nil())));
                // assume allocatedness for argument to function
                assume $IsAlloc(##ys#0_1_0_1_0, Tclass._module.List(Tclass._module.G()), $Heap);
                assume _module.__default.append#canCall(Tclass._module.G(), 
                  xs#0, 
                  Lit(_module.__default.flatten(Tclass._module.G(), $LS($LZ), Lit(#_module.List.Nil()))));
                assume _module.__default.flatten#canCall(Tclass._module.G(), Lit(#_module.List.Nil()))
                   && _module.__default.append#canCall(Tclass._module.G(), 
                    xs#0, 
                    Lit(_module.__default.flatten(Tclass._module.G(), $LS($LZ), Lit(#_module.List.Nil()))));
                // ----- Hint2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(475,11)
                // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(475,11)
                ##xs#0_1_0_1_1 := xs#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##xs#0_1_0_1_1, Tclass._module.List(Tclass._module.G()), $Heap);
                ##ys#0_1_0_1_1 := Lit(#_module.List.Nil());
                // assume allocatedness for argument to function
                assume $IsAlloc(##ys#0_1_0_1_1, Tclass._module.List(Tclass._module.G()), $Heap);
                assume _module.__default.append#canCall(Tclass._module.G(), xs#0, Lit(#_module.List.Nil()));
                assume _module.__default.append#canCall(Tclass._module.G(), xs#0, Lit(#_module.List.Nil()));
                // ----- assert line2 == line3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(475,11)
                assert {:id "id710"} {:subsumption 0} _module.List#Equal(_module.__default.append(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    xs#0, 
                    Lit(_module.__default.flatten(Tclass._module.G(), $LS($LS($LZ)), Lit(#_module.List.Nil())))), 
                  _module.__default.append(Tclass._module.G(), $LS($LS($LZ)), xs#0, Lit(#_module.List.Nil())));
                assume false;
            }
            else if (*)
            {
                // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(475,11)
                ##xs#0_1_0_0_0 := xs#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##xs#0_1_0_0_0, Tclass._module.List(Tclass._module.G()), $Heap);
                ##ys#0_1_0_0_0 := Lit(#_module.List.Nil());
                // assume allocatedness for argument to function
                assume $IsAlloc(##ys#0_1_0_0_0, Tclass._module.List(Tclass._module.G()), $Heap);
                assume _module.__default.append#canCall(Tclass._module.G(), xs#0, Lit(#_module.List.Nil()));
                assume _module.__default.append#canCall(Tclass._module.G(), xs#0, Lit(#_module.List.Nil()));
                // ----- Hint3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(475,11)
                // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(483,25)
                // TrCallStmt: Before ProcessCallStmt
                assume true;
                // ProcessCallStmt: CheckSubrange
                xs##0_1_0_0_0 := xs#0;
                call {:id "id708"} Call$$_module.__default.append__Nil(Tclass._module.G(), xs##0_1_0_0_0);
                // TrCallStmt: After ProcessCallStmt
                // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(475,11)
                assume true;
                // ----- assert line3 == line4 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(475,11)
                assert {:id "id709"} {:subsumption 0} _module.List#Equal(_module.__default.append(Tclass._module.G(), $LS($LS($LZ)), xs#0, Lit(#_module.List.Nil())), 
                  xs#0);
                assume false;
            }

            assume {:id "id713"} _module.List#Equal(_module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), xs#0)), 
              xs#0);
        }
        else if (ys#0_0 == #_module.List.Cons(_mcc#2#0_0_0, _mcc#3#0_0_0))
        {
            assume $IsBox(_mcc#2#0_0_0, Tclass._module.G());
            assume $Is(_mcc#3#0_0_0, Tclass._module.List(Tclass._module.G()));
            havoc zs#0_0_0;
            assume $Is(zs#0_0_0, Tclass._module.List(Tclass._module.G()))
               && $IsAlloc(zs#0_0_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume {:id "id681"} let#0_0_0#0#0 == _mcc#3#0_0_0;
            assume true;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(let#0_0_0#0#0, Tclass._module.List(Tclass._module.G()));
            assume {:id "id682"} zs#0_0_0 == let#0_0_0#0#0;
            havoc b#0_0_0;
            assume $IsBox(b#0_0_0, Tclass._module.G())
               && $IsAllocBox(b#0_0_0, Tclass._module.G(), $Heap);
            assume {:id "id683"} let#0_0_1#0#0 == _mcc#2#0_0_0;
            assume true;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $IsBox(let#0_0_1#0#0, Tclass._module.G());
            assume {:id "id684"} b#0_0_0 == let#0_0_1#0#0;
            // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(487,11)
            ##a#0_0_0 := a#0_0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##a#0_0_0, Tclass._module.G(), $Heap);
            ##b#0_0_0 := b#0_0_0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##b#0_0_0, Tclass._module.G(), $Heap);
            assume _module.__default.Below#canCall(a#0_0, b#0_0_0);
            assume _module.__default.Below#canCall(a#0_0, b#0_0_0);
            if (!_module.__default.Below(a#0_0, b#0_0_0))
            {
                // ----- calc statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(488,13)
                // Assume Fuel Constant
                if (*)
                {
                    // ----- assert wf[initial] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(488,13)
                    ##g#0_0_0_0_0 := g#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##g#0_0_0_0_0, Tclass._module.G(), $Heap);
                    ##xs#0_0_0_0_1 := xs#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_0_0_1, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.sequences#canCall(xs#0);
                    ##x#0_0_0_0_0 := _module.__default.sequences($LS($LZ), xs#0);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##x#0_0_0_0_0, 
                      Tclass._module.List(Tclass._module.List(Tclass._module.G())), 
                      $Heap);
                    assume _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.sequences($LS($LZ), xs#0));
                    ##xs#0_0_0_0_0 := _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), xs#0));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_0_0_0, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.filter#canCall(g#0, 
                      _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), xs#0)));
                    assume _module.__default.sequences#canCall(xs#0)
                       && _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.sequences($LS($LZ), xs#0))
                       && _module.__default.filter#canCall(g#0, 
                        _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), xs#0)));
                    assume false;
                }
                else if (*)
                {
                    // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(488,13)
                    ##g#0_0_0_0_4_0 := g#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##g#0_0_0_0_4_0, Tclass._module.G(), $Heap);
                    ##xs#0_0_0_0_4_1 := xs#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_0_0_4_1, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.sequences#canCall(xs#0);
                    ##x#0_0_0_0_4_0 := _module.__default.sequences($LS($LZ), xs#0);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##x#0_0_0_0_4_0, 
                      Tclass._module.List(Tclass._module.List(Tclass._module.G())), 
                      $Heap);
                    assume _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.sequences($LS($LZ), xs#0));
                    ##xs#0_0_0_0_4_0 := _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), xs#0));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_0_0_4_0, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.filter#canCall(g#0, 
                      _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), xs#0)));
                    assume _module.__default.sequences#canCall(xs#0)
                       && _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.sequences($LS($LZ), xs#0))
                       && _module.__default.filter#canCall(g#0, 
                        _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), xs#0)));
                    // ----- Hint0 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(488,13)
                    // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(488,13)
                    ##g#0_0_0_0_4_1 := g#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##g#0_0_0_0_4_1, Tclass._module.G(), $Heap);
                    ##a#0_0_0_0_4_0 := b#0_0_0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##a#0_0_0_0_4_0, Tclass._module.G(), $Heap);
                    ##xs#0_0_0_0_4_3 := #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_0_0_4_3, Tclass._module.List(Tclass._module.G()), $Heap);
                    ##ys#0_0_0_0_4_0 := zs#0_0_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##ys#0_0_0_0_4_0, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.descending#canCall(b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), zs#0_0_0);
                    ##x#0_0_0_0_4_1 := _module.__default.descending($LS($LZ), b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), zs#0_0_0);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##x#0_0_0_0_4_1, 
                      Tclass._module.List(Tclass._module.List(Tclass._module.G())), 
                      $Heap);
                    assume _module.__default.flatten#canCall(Tclass._module.G(), 
                      _module.__default.descending($LS($LZ), b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), zs#0_0_0));
                    ##xs#0_0_0_0_4_2 := _module.__default.flatten(Tclass._module.G(), 
                      $LS($LZ), 
                      _module.__default.descending($LS($LZ), b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), zs#0_0_0));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_0_0_4_2, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.filter#canCall(g#0, 
                      _module.__default.flatten(Tclass._module.G(), 
                        $LS($LZ), 
                        _module.__default.descending($LS($LZ), b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), zs#0_0_0)));
                    assume _module.__default.descending#canCall(b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), zs#0_0_0)
                       && _module.__default.flatten#canCall(Tclass._module.G(), 
                        _module.__default.descending($LS($LZ), b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), zs#0_0_0))
                       && _module.__default.filter#canCall(g#0, 
                        _module.__default.flatten(Tclass._module.G(), 
                          $LS($LZ), 
                          _module.__default.descending($LS($LZ), b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), zs#0_0_0)));
                    // ----- assert line0 == line1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(488,13)
                    assert {:id "id696"} {:subsumption 0} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
                        g#0, 
                        _module.__default.flatten(Tclass._module.G(), 
                          $LS($LS($LZ)), 
                          _module.__default.sequences($LS($LS($LZ)), xs#0))), 
                      _module.__default.filter($LS($LS($LZ)), 
                        g#0, 
                        _module.__default.flatten(Tclass._module.G(), 
                          $LS($LS($LZ)), 
                          _module.__default.descending($LS($LS($LZ)), 
                            b#0_0_0, 
                            #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), 
                            zs#0_0_0))));
                    assume false;
                }
                else if (*)
                {
                    // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(488,13)
                    ##g#0_0_0_0_3_0 := g#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##g#0_0_0_0_3_0, Tclass._module.G(), $Heap);
                    ##a#0_0_0_0_3_0 := b#0_0_0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##a#0_0_0_0_3_0, Tclass._module.G(), $Heap);
                    ##xs#0_0_0_0_3_1 := #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_0_0_3_1, Tclass._module.List(Tclass._module.G()), $Heap);
                    ##ys#0_0_0_0_3_0 := zs#0_0_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##ys#0_0_0_0_3_0, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.descending#canCall(b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), zs#0_0_0);
                    ##x#0_0_0_0_3_0 := _module.__default.descending($LS($LZ), b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), zs#0_0_0);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##x#0_0_0_0_3_0, 
                      Tclass._module.List(Tclass._module.List(Tclass._module.G())), 
                      $Heap);
                    assume _module.__default.flatten#canCall(Tclass._module.G(), 
                      _module.__default.descending($LS($LZ), b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), zs#0_0_0));
                    ##xs#0_0_0_0_3_0 := _module.__default.flatten(Tclass._module.G(), 
                      $LS($LZ), 
                      _module.__default.descending($LS($LZ), b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), zs#0_0_0));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_0_0_3_0, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.filter#canCall(g#0, 
                      _module.__default.flatten(Tclass._module.G(), 
                        $LS($LZ), 
                        _module.__default.descending($LS($LZ), b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), zs#0_0_0)));
                    assume _module.__default.descending#canCall(b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), zs#0_0_0)
                       && _module.__default.flatten#canCall(Tclass._module.G(), 
                        _module.__default.descending($LS($LZ), b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), zs#0_0_0))
                       && _module.__default.filter#canCall(g#0, 
                        _module.__default.flatten(Tclass._module.G(), 
                          $LS($LZ), 
                          _module.__default.descending($LS($LZ), b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), zs#0_0_0)));
                    // ----- Hint1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(488,13)
                    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(491,17)
                    ##xs#0_0_0_0_3_2 := #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_0_0_3_2, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.sorted#canCall(#_module.List.Cons(a#0_0, Lit(#_module.List.Nil())));
                    assume _module.__default.sorted#canCall(#_module.List.Cons(a#0_0, Lit(#_module.List.Nil())));
                    assert {:id "id689"} {:subsumption 0} _module.__default.sorted#canCall(#_module.List.Cons(a#0_0, Lit(#_module.List.Nil())))
                       ==> _module.__default.sorted($LS($LZ), #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())))
                         || (_module.List.Nil_q(#_module.List.Cons(a#0_0, Lit(#_module.List.Nil())))
                           ==> Lit(true));
                    assert {:id "id690"} {:subsumption 0} _module.__default.sorted#canCall(#_module.List.Cons(a#0_0, Lit(#_module.List.Nil())))
                       ==> _module.__default.sorted($LS($LZ), #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())))
                         || (!_module.List.Nil_q(#_module.List.Cons(a#0_0, Lit(#_module.List.Nil())))
                           ==> (var ys#0_0_0_0_3_0 := _module.List.tail(#_module.List.Cons(a#0_0, Lit(#_module.List.Nil()))); 
                            (var a#0_0_0_0_3_0 := _module.List.head(#_module.List.Cons(a#0_0, Lit(#_module.List.Nil()))); 
                              (forall y#0_0_0_0_3_0: Box :: 
                                { _module.__default.Below(a#0_0_0_0_3_0, y#0_0_0_0_3_0) } 
                                  { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#0_0_0_0_3_0), 
                                    y#0_0_0_0_3_0) } 
                                $IsBox(y#0_0_0_0_3_0, Tclass._module.G())
                                   ==> 
                                  MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#0_0_0_0_3_0), 
                                      y#0_0_0_0_3_0)
                                     > 0
                                   ==> _module.__default.Below(a#0_0_0_0_3_0, y#0_0_0_0_3_0)))));
                    assert {:id "id691"} {:subsumption 0} _module.__default.sorted#canCall(#_module.List.Cons(a#0_0, Lit(#_module.List.Nil())))
                       ==> _module.__default.sorted($LS($LZ), #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())))
                         || (!_module.List.Nil_q(#_module.List.Cons(a#0_0, Lit(#_module.List.Nil())))
                           ==> (var ys#0_0_0_0_3_0 := _module.List.tail(#_module.List.Cons(a#0_0, Lit(#_module.List.Nil()))); 
                            (var a#0_0_0_0_3_0 := _module.List.head(#_module.List.Cons(a#0_0, Lit(#_module.List.Nil()))); 
                              _module.__default.sorted($LS($LS($LZ)), ys#0_0_0_0_3_0))));
                    assume {:id "id692"} _module.__default.sorted($LS($LS($LZ)), #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())));
                    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(491,63)
                    // TrCallStmt: Before ProcessCallStmt
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    g##0_0_0_0_3_0 := g#0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    a##0_0_0_0_3_0 := b#0_0_0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    xs##0_0_0_0_3_0 := #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()));
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    ys##0_0_0_0_3_0 := zs#0_0_0;
                    assert {:id "id693"} DtRank(ys##0_0_0_0_3_0) < DtRank(xs#0);
                    call {:id "id694"} Call$$_module.__default.stable__descending(g##0_0_0_0_3_0, a##0_0_0_0_3_0, xs##0_0_0_0_3_0, ys##0_0_0_0_3_0);
                    // TrCallStmt: After ProcessCallStmt
                    // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(488,13)
                    ##g#0_0_0_0_3_1 := g#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##g#0_0_0_0_3_1, Tclass._module.G(), $Heap);
                    ##xs#0_0_0_0_3_4 := #_module.List.Cons(b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_0_0_3_4, Tclass._module.List(Tclass._module.G()), $Heap);
                    ##ys#0_0_0_0_3_1 := zs#0_0_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##ys#0_0_0_0_3_1, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.append#canCall(Tclass._module.G(), 
                      #_module.List.Cons(b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()))), 
                      zs#0_0_0);
                    ##xs#0_0_0_0_3_3 := _module.__default.append(Tclass._module.G(), 
                      $LS($LZ), 
                      #_module.List.Cons(b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()))), 
                      zs#0_0_0);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_0_0_3_3, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.filter#canCall(g#0, 
                      _module.__default.append(Tclass._module.G(), 
                        $LS($LZ), 
                        #_module.List.Cons(b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()))), 
                        zs#0_0_0));
                    assume _module.__default.append#canCall(Tclass._module.G(), 
                        #_module.List.Cons(b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()))), 
                        zs#0_0_0)
                       && _module.__default.filter#canCall(g#0, 
                        _module.__default.append(Tclass._module.G(), 
                          $LS($LZ), 
                          #_module.List.Cons(b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()))), 
                          zs#0_0_0));
                    // ----- assert line1 == line2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(488,13)
                    assert {:id "id695"} {:subsumption 0} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
                        g#0, 
                        _module.__default.flatten(Tclass._module.G(), 
                          $LS($LS($LZ)), 
                          _module.__default.descending($LS($LS($LZ)), 
                            b#0_0_0, 
                            #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), 
                            zs#0_0_0))), 
                      _module.__default.filter($LS($LS($LZ)), 
                        g#0, 
                        _module.__default.append(Tclass._module.G(), 
                          $LS($LS($LZ)), 
                          #_module.List.Cons(b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()))), 
                          zs#0_0_0)));
                    assume false;
                }
                else if (*)
                {
                    // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(488,13)
                    ##g#0_0_0_0_2_0 := g#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##g#0_0_0_0_2_0, Tclass._module.G(), $Heap);
                    ##xs#0_0_0_0_2_1 := #_module.List.Cons(b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_0_0_2_1, Tclass._module.List(Tclass._module.G()), $Heap);
                    ##ys#0_0_0_0_2_0 := zs#0_0_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##ys#0_0_0_0_2_0, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.append#canCall(Tclass._module.G(), 
                      #_module.List.Cons(b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()))), 
                      zs#0_0_0);
                    ##xs#0_0_0_0_2_0 := _module.__default.append(Tclass._module.G(), 
                      $LS($LZ), 
                      #_module.List.Cons(b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()))), 
                      zs#0_0_0);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_0_0_2_0, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.filter#canCall(g#0, 
                      _module.__default.append(Tclass._module.G(), 
                        $LS($LZ), 
                        #_module.List.Cons(b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()))), 
                        zs#0_0_0));
                    assume _module.__default.append#canCall(Tclass._module.G(), 
                        #_module.List.Cons(b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()))), 
                        zs#0_0_0)
                       && _module.__default.filter#canCall(g#0, 
                        _module.__default.append(Tclass._module.G(), 
                          $LS($LZ), 
                          #_module.List.Cons(b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()))), 
                          zs#0_0_0));
                    // ----- Hint2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(488,13)
                    // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(488,13)
                    ##g#0_0_0_0_2_1 := g#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##g#0_0_0_0_2_1, Tclass._module.G(), $Heap);
                    ##xs#0_0_0_0_2_3 := #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_0_0_2_3, Tclass._module.List(Tclass._module.G()), $Heap);
                    ##ys#0_0_0_0_2_1 := zs#0_0_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##ys#0_0_0_0_2_1, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.append#canCall(Tclass._module.G(), 
                      #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), 
                      zs#0_0_0);
                    ##xs#0_0_0_0_2_2 := #_module.List.Cons(b#0_0_0, 
                      _module.__default.append(Tclass._module.G(), 
                        $LS($LZ), 
                        #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), 
                        zs#0_0_0));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_0_0_2_2, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.filter#canCall(g#0, 
                      #_module.List.Cons(b#0_0_0, 
                        _module.__default.append(Tclass._module.G(), 
                          $LS($LZ), 
                          #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), 
                          zs#0_0_0)));
                    assume _module.__default.append#canCall(Tclass._module.G(), 
                        #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), 
                        zs#0_0_0)
                       && _module.__default.filter#canCall(g#0, 
                        #_module.List.Cons(b#0_0_0, 
                          _module.__default.append(Tclass._module.G(), 
                            $LS($LZ), 
                            #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), 
                            zs#0_0_0)));
                    // ----- assert line2 == line3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(488,13)
                    assert {:id "id688"} {:subsumption 0} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
                        g#0, 
                        _module.__default.append(Tclass._module.G(), 
                          $LS($LS($LZ)), 
                          #_module.List.Cons(b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()))), 
                          zs#0_0_0)), 
                      _module.__default.filter($LS($LS($LZ)), 
                        g#0, 
                        #_module.List.Cons(b#0_0_0, 
                          _module.__default.append(Tclass._module.G(), 
                            $LS($LS($LZ)), 
                            #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), 
                            zs#0_0_0))));
                    assume false;
                }
                else if (*)
                {
                    // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(488,13)
                    ##g#0_0_0_0_1_0 := g#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##g#0_0_0_0_1_0, Tclass._module.G(), $Heap);
                    ##xs#0_0_0_0_1_1 := #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_0_0_1_1, Tclass._module.List(Tclass._module.G()), $Heap);
                    ##ys#0_0_0_0_1_0 := zs#0_0_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##ys#0_0_0_0_1_0, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.append#canCall(Tclass._module.G(), 
                      #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), 
                      zs#0_0_0);
                    ##xs#0_0_0_0_1_0 := #_module.List.Cons(b#0_0_0, 
                      _module.__default.append(Tclass._module.G(), 
                        $LS($LZ), 
                        #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), 
                        zs#0_0_0));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_0_0_1_0, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.filter#canCall(g#0, 
                      #_module.List.Cons(b#0_0_0, 
                        _module.__default.append(Tclass._module.G(), 
                          $LS($LZ), 
                          #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), 
                          zs#0_0_0)));
                    assume _module.__default.append#canCall(Tclass._module.G(), 
                        #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), 
                        zs#0_0_0)
                       && _module.__default.filter#canCall(g#0, 
                        #_module.List.Cons(b#0_0_0, 
                          _module.__default.append(Tclass._module.G(), 
                            $LS($LZ), 
                            #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), 
                            zs#0_0_0)));
                    // ----- Hint3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(488,13)
                    // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(488,13)
                    ##g#0_0_0_0_1_1 := g#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##g#0_0_0_0_1_1, Tclass._module.G(), $Heap);
                    ##xs#0_0_0_0_1_2 := #_module.List.Cons(b#0_0_0, #_module.List.Cons(a#0_0, zs#0_0_0));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_0_0_1_2, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.filter#canCall(g#0, #_module.List.Cons(b#0_0_0, #_module.List.Cons(a#0_0, zs#0_0_0)));
                    assume _module.__default.filter#canCall(g#0, #_module.List.Cons(b#0_0_0, #_module.List.Cons(a#0_0, zs#0_0_0)));
                    // ----- assert line3 == line4 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(488,13)
                    assert {:id "id687"} {:subsumption 0} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
                        g#0, 
                        #_module.List.Cons(b#0_0_0, 
                          _module.__default.append(Tclass._module.G(), 
                            $LS($LS($LZ)), 
                            #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), 
                            zs#0_0_0))), 
                      _module.__default.filter($LS($LS($LZ)), 
                        g#0, 
                        #_module.List.Cons(b#0_0_0, #_module.List.Cons(a#0_0, zs#0_0_0))));
                    assume false;
                }
                else if (*)
                {
                    // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(488,13)
                    ##g#0_0_0_0_0_0 := g#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##g#0_0_0_0_0_0, Tclass._module.G(), $Heap);
                    ##xs#0_0_0_0_0_0 := #_module.List.Cons(b#0_0_0, #_module.List.Cons(a#0_0, zs#0_0_0));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_0_0_0_0, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.filter#canCall(g#0, #_module.List.Cons(b#0_0_0, #_module.List.Cons(a#0_0, zs#0_0_0)));
                    assume _module.__default.filter#canCall(g#0, #_module.List.Cons(b#0_0_0, #_module.List.Cons(a#0_0, zs#0_0_0)));
                    // ----- Hint4 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(488,13)
                    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(496,37)
                    // TrCallStmt: Before ProcessCallStmt
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    g##0_0_0_0_0_0 := g#0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    b##0_0_0_0_0_0 := b#0_0_0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    a##0_0_0_0_0_0 := a#0_0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    ys##0_0_0_0_0_0 := zs#0_0_0;
                    call {:id "id685"} Call$$_module.__default.filter__Cons__notBelow(g##0_0_0_0_0_0, b##0_0_0_0_0_0, a##0_0_0_0_0_0, ys##0_0_0_0_0_0);
                    // TrCallStmt: After ProcessCallStmt
                    // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(488,13)
                    ##g#0_0_0_0_0_1 := g#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##g#0_0_0_0_0_1, Tclass._module.G(), $Heap);
                    ##xs#0_0_0_0_0_1 := #_module.List.Cons(a#0_0, #_module.List.Cons(b#0_0_0, zs#0_0_0));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_0_0_0_1, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.filter#canCall(g#0, #_module.List.Cons(a#0_0, #_module.List.Cons(b#0_0_0, zs#0_0_0)));
                    assume _module.__default.filter#canCall(g#0, #_module.List.Cons(a#0_0, #_module.List.Cons(b#0_0_0, zs#0_0_0)));
                    // ----- assert line4 == line5 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(488,13)
                    assert {:id "id686"} {:subsumption 0} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
                        g#0, 
                        #_module.List.Cons(b#0_0_0, #_module.List.Cons(a#0_0, zs#0_0_0))), 
                      _module.__default.filter($LS($LS($LZ)), 
                        g#0, 
                        #_module.List.Cons(a#0_0, #_module.List.Cons(b#0_0_0, zs#0_0_0))));
                    assume false;
                }

                assume {:id "id697"} _module.List#Equal(_module.__default.filter($LS($LZ), 
                    g#0, 
                    _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), xs#0))), 
                  _module.__default.filter($LS($LZ), g#0, #_module.List.Cons(a#0_0, #_module.List.Cons(b#0_0_0, zs#0_0_0))));
            }
            else
            {
                // ----- calc statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(500,13)
                // Assume Fuel Constant
                if (*)
                {
                    // ----- assert wf[initial] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(500,13)
                    ##g#0_0_1_0_0 := g#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##g#0_0_1_0_0, Tclass._module.G(), $Heap);
                    ##xs#0_0_1_0_1 := xs#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_1_0_1, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.sequences#canCall(xs#0);
                    ##x#0_0_1_0_0 := _module.__default.sequences($LS($LZ), xs#0);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##x#0_0_1_0_0, 
                      Tclass._module.List(Tclass._module.List(Tclass._module.G())), 
                      $Heap);
                    assume _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.sequences($LS($LZ), xs#0));
                    ##xs#0_0_1_0_0 := _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), xs#0));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_1_0_0, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.filter#canCall(g#0, 
                      _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), xs#0)));
                    assume _module.__default.sequences#canCall(xs#0)
                       && _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.sequences($LS($LZ), xs#0))
                       && _module.__default.filter#canCall(g#0, 
                        _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), xs#0)));
                    assume false;
                }
                else if (*)
                {
                    // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(500,13)
                    ##g#0_0_1_0_6_0 := g#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##g#0_0_1_0_6_0, Tclass._module.G(), $Heap);
                    ##xs#0_0_1_0_6_1 := xs#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_1_0_6_1, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.sequences#canCall(xs#0);
                    ##x#0_0_1_0_6_0 := _module.__default.sequences($LS($LZ), xs#0);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##x#0_0_1_0_6_0, 
                      Tclass._module.List(Tclass._module.List(Tclass._module.G())), 
                      $Heap);
                    assume _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.sequences($LS($LZ), xs#0));
                    ##xs#0_0_1_0_6_0 := _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), xs#0));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_1_0_6_0, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.filter#canCall(g#0, 
                      _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), xs#0)));
                    assume _module.__default.sequences#canCall(xs#0)
                       && _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.sequences($LS($LZ), xs#0))
                       && _module.__default.filter#canCall(g#0, 
                        _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), xs#0)));
                    // ----- Hint0 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(500,13)
                    // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(500,13)
                    ##g#0_0_1_0_6_1 := g#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##g#0_0_1_0_6_1, Tclass._module.G(), $Heap);
                    ##a#0_0_1_0_6_0 := b#0_0_0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##a#0_0_1_0_6_0, Tclass._module.G(), $Heap);
                    ##xs#0_0_1_0_6_3 := #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_1_0_6_3, Tclass._module.List(Tclass._module.G()), $Heap);
                    ##ys#0_0_1_0_6_0 := zs#0_0_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##ys#0_0_1_0_6_0, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.ascending#canCall(b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), zs#0_0_0);
                    ##x#0_0_1_0_6_1 := _module.__default.ascending($LS($LZ), b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), zs#0_0_0);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##x#0_0_1_0_6_1, 
                      Tclass._module.List(Tclass._module.List(Tclass._module.G())), 
                      $Heap);
                    assume _module.__default.flatten#canCall(Tclass._module.G(), 
                      _module.__default.ascending($LS($LZ), b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), zs#0_0_0));
                    ##xs#0_0_1_0_6_2 := _module.__default.flatten(Tclass._module.G(), 
                      $LS($LZ), 
                      _module.__default.ascending($LS($LZ), b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), zs#0_0_0));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_1_0_6_2, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.filter#canCall(g#0, 
                      _module.__default.flatten(Tclass._module.G(), 
                        $LS($LZ), 
                        _module.__default.ascending($LS($LZ), b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), zs#0_0_0)));
                    assume _module.__default.ascending#canCall(b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), zs#0_0_0)
                       && _module.__default.flatten#canCall(Tclass._module.G(), 
                        _module.__default.ascending($LS($LZ), b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), zs#0_0_0))
                       && _module.__default.filter#canCall(g#0, 
                        _module.__default.flatten(Tclass._module.G(), 
                          $LS($LZ), 
                          _module.__default.ascending($LS($LZ), b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), zs#0_0_0)));
                    // ----- assert line0 == line1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(500,13)
                    assert {:id "id706"} {:subsumption 0} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
                        g#0, 
                        _module.__default.flatten(Tclass._module.G(), 
                          $LS($LS($LZ)), 
                          _module.__default.sequences($LS($LS($LZ)), xs#0))), 
                      _module.__default.filter($LS($LS($LZ)), 
                        g#0, 
                        _module.__default.flatten(Tclass._module.G(), 
                          $LS($LS($LZ)), 
                          _module.__default.ascending($LS($LS($LZ)), 
                            b#0_0_0, 
                            #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), 
                            zs#0_0_0))));
                    assume false;
                }
                else if (*)
                {
                    // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(500,13)
                    ##g#0_0_1_0_5_0 := g#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##g#0_0_1_0_5_0, Tclass._module.G(), $Heap);
                    ##a#0_0_1_0_5_0 := b#0_0_0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##a#0_0_1_0_5_0, Tclass._module.G(), $Heap);
                    ##xs#0_0_1_0_5_1 := #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_1_0_5_1, Tclass._module.List(Tclass._module.G()), $Heap);
                    ##ys#0_0_1_0_5_0 := zs#0_0_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##ys#0_0_1_0_5_0, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.ascending#canCall(b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), zs#0_0_0);
                    ##x#0_0_1_0_5_0 := _module.__default.ascending($LS($LZ), b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), zs#0_0_0);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##x#0_0_1_0_5_0, 
                      Tclass._module.List(Tclass._module.List(Tclass._module.G())), 
                      $Heap);
                    assume _module.__default.flatten#canCall(Tclass._module.G(), 
                      _module.__default.ascending($LS($LZ), b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), zs#0_0_0));
                    ##xs#0_0_1_0_5_0 := _module.__default.flatten(Tclass._module.G(), 
                      $LS($LZ), 
                      _module.__default.ascending($LS($LZ), b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), zs#0_0_0));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_1_0_5_0, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.filter#canCall(g#0, 
                      _module.__default.flatten(Tclass._module.G(), 
                        $LS($LZ), 
                        _module.__default.ascending($LS($LZ), b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), zs#0_0_0)));
                    assume _module.__default.ascending#canCall(b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), zs#0_0_0)
                       && _module.__default.flatten#canCall(Tclass._module.G(), 
                        _module.__default.ascending($LS($LZ), b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), zs#0_0_0))
                       && _module.__default.filter#canCall(g#0, 
                        _module.__default.flatten(Tclass._module.G(), 
                          $LS($LZ), 
                          _module.__default.ascending($LS($LZ), b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), zs#0_0_0)));
                    // ----- Hint1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(500,13)
                    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(503,33)
                    // TrCallStmt: Before ProcessCallStmt
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    g##0_0_1_0_5_0 := g#0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    a##0_0_1_0_5_0 := b#0_0_0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    xs##0_0_1_0_5_0 := #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()));
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    ys##0_0_1_0_5_0 := zs#0_0_0;
                    assert {:id "id703"} DtRank(ys##0_0_1_0_5_0) < DtRank(xs#0);
                    call {:id "id704"} Call$$_module.__default.stable__ascending(g##0_0_1_0_5_0, a##0_0_1_0_5_0, xs##0_0_1_0_5_0, ys##0_0_1_0_5_0);
                    // TrCallStmt: After ProcessCallStmt
                    // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(500,13)
                    ##g#0_0_1_0_5_1 := g#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##g#0_0_1_0_5_1, Tclass._module.G(), $Heap);
                    ##xs#0_0_1_0_5_4 := #_module.List.Cons(b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_1_0_5_4, Tclass._module.List(Tclass._module.G()), $Heap);
                    ##acc#0_0_1_0_5_0 := Lit(#_module.List.Nil());
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##acc#0_0_1_0_5_0, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.reverse#canCall(Tclass._module.G(), 
                      #_module.List.Cons(b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()))), 
                      Lit(#_module.List.Nil()));
                    ##xs#0_0_1_0_5_3 := _module.__default.reverse(Tclass._module.G(), 
                      $LS($LZ), 
                      #_module.List.Cons(b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()))), 
                      Lit(#_module.List.Nil()));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_1_0_5_3, Tclass._module.List(Tclass._module.G()), $Heap);
                    ##ys#0_0_1_0_5_1 := zs#0_0_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##ys#0_0_1_0_5_1, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.append#canCall(Tclass._module.G(), 
                      _module.__default.reverse(Tclass._module.G(), 
                        $LS($LZ), 
                        #_module.List.Cons(b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()))), 
                        Lit(#_module.List.Nil())), 
                      zs#0_0_0);
                    ##xs#0_0_1_0_5_2 := _module.__default.append(Tclass._module.G(), 
                      $LS($LZ), 
                      _module.__default.reverse(Tclass._module.G(), 
                        $LS($LZ), 
                        #_module.List.Cons(b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()))), 
                        Lit(#_module.List.Nil())), 
                      zs#0_0_0);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_1_0_5_2, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.filter#canCall(g#0, 
                      _module.__default.append(Tclass._module.G(), 
                        $LS($LZ), 
                        _module.__default.reverse(Tclass._module.G(), 
                          $LS($LZ), 
                          #_module.List.Cons(b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()))), 
                          Lit(#_module.List.Nil())), 
                        zs#0_0_0));
                    assume _module.__default.reverse#canCall(Tclass._module.G(), 
                        #_module.List.Cons(b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()))), 
                        Lit(#_module.List.Nil()))
                       && _module.__default.append#canCall(Tclass._module.G(), 
                        _module.__default.reverse(Tclass._module.G(), 
                          $LS($LZ), 
                          #_module.List.Cons(b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()))), 
                          Lit(#_module.List.Nil())), 
                        zs#0_0_0)
                       && _module.__default.filter#canCall(g#0, 
                        _module.__default.append(Tclass._module.G(), 
                          $LS($LZ), 
                          _module.__default.reverse(Tclass._module.G(), 
                            $LS($LZ), 
                            #_module.List.Cons(b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()))), 
                            Lit(#_module.List.Nil())), 
                          zs#0_0_0));
                    // ----- assert line1 == line2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(500,13)
                    assert {:id "id705"} {:subsumption 0} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
                        g#0, 
                        _module.__default.flatten(Tclass._module.G(), 
                          $LS($LS($LZ)), 
                          _module.__default.ascending($LS($LS($LZ)), 
                            b#0_0_0, 
                            #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), 
                            zs#0_0_0))), 
                      _module.__default.filter($LS($LS($LZ)), 
                        g#0, 
                        _module.__default.append(Tclass._module.G(), 
                          $LS($LS($LZ)), 
                          _module.__default.reverse(Tclass._module.G(), 
                            $LS($LS($LZ)), 
                            #_module.List.Cons(b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()))), 
                            Lit(#_module.List.Nil())), 
                          zs#0_0_0)));
                    assume false;
                }
                else if (*)
                {
                    // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(500,13)
                    ##g#0_0_1_0_4_0 := g#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##g#0_0_1_0_4_0, Tclass._module.G(), $Heap);
                    ##xs#0_0_1_0_4_2 := #_module.List.Cons(b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_1_0_4_2, Tclass._module.List(Tclass._module.G()), $Heap);
                    ##acc#0_0_1_0_4_0 := Lit(#_module.List.Nil());
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##acc#0_0_1_0_4_0, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.reverse#canCall(Tclass._module.G(), 
                      #_module.List.Cons(b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()))), 
                      Lit(#_module.List.Nil()));
                    ##xs#0_0_1_0_4_1 := _module.__default.reverse(Tclass._module.G(), 
                      $LS($LZ), 
                      #_module.List.Cons(b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()))), 
                      Lit(#_module.List.Nil()));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_1_0_4_1, Tclass._module.List(Tclass._module.G()), $Heap);
                    ##ys#0_0_1_0_4_0 := zs#0_0_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##ys#0_0_1_0_4_0, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.append#canCall(Tclass._module.G(), 
                      _module.__default.reverse(Tclass._module.G(), 
                        $LS($LZ), 
                        #_module.List.Cons(b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()))), 
                        Lit(#_module.List.Nil())), 
                      zs#0_0_0);
                    ##xs#0_0_1_0_4_0 := _module.__default.append(Tclass._module.G(), 
                      $LS($LZ), 
                      _module.__default.reverse(Tclass._module.G(), 
                        $LS($LZ), 
                        #_module.List.Cons(b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()))), 
                        Lit(#_module.List.Nil())), 
                      zs#0_0_0);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_1_0_4_0, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.filter#canCall(g#0, 
                      _module.__default.append(Tclass._module.G(), 
                        $LS($LZ), 
                        _module.__default.reverse(Tclass._module.G(), 
                          $LS($LZ), 
                          #_module.List.Cons(b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()))), 
                          Lit(#_module.List.Nil())), 
                        zs#0_0_0));
                    assume _module.__default.reverse#canCall(Tclass._module.G(), 
                        #_module.List.Cons(b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()))), 
                        Lit(#_module.List.Nil()))
                       && _module.__default.append#canCall(Tclass._module.G(), 
                        _module.__default.reverse(Tclass._module.G(), 
                          $LS($LZ), 
                          #_module.List.Cons(b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()))), 
                          Lit(#_module.List.Nil())), 
                        zs#0_0_0)
                       && _module.__default.filter#canCall(g#0, 
                        _module.__default.append(Tclass._module.G(), 
                          $LS($LZ), 
                          _module.__default.reverse(Tclass._module.G(), 
                            $LS($LZ), 
                            #_module.List.Cons(b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()))), 
                            Lit(#_module.List.Nil())), 
                          zs#0_0_0));
                    // ----- Hint2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(500,13)
                    // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(500,13)
                    ##g#0_0_1_0_4_1 := g#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##g#0_0_1_0_4_1, Tclass._module.G(), $Heap);
                    ##xs#0_0_1_0_4_5 := #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_1_0_4_5, Tclass._module.List(Tclass._module.G()), $Heap);
                    ##acc#0_0_1_0_4_1 := #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil()));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##acc#0_0_1_0_4_1, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.reverse#canCall(Tclass._module.G(), 
                      #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), 
                      #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil())));
                    ##xs#0_0_1_0_4_4 := _module.__default.reverse(Tclass._module.G(), 
                      $LS($LZ), 
                      #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), 
                      #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil())));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_1_0_4_4, Tclass._module.List(Tclass._module.G()), $Heap);
                    ##ys#0_0_1_0_4_1 := zs#0_0_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##ys#0_0_1_0_4_1, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.append#canCall(Tclass._module.G(), 
                      _module.__default.reverse(Tclass._module.G(), 
                        $LS($LZ), 
                        #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), 
                        #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil()))), 
                      zs#0_0_0);
                    ##xs#0_0_1_0_4_3 := _module.__default.append(Tclass._module.G(), 
                      $LS($LZ), 
                      _module.__default.reverse(Tclass._module.G(), 
                        $LS($LZ), 
                        #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), 
                        #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil()))), 
                      zs#0_0_0);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_1_0_4_3, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.filter#canCall(g#0, 
                      _module.__default.append(Tclass._module.G(), 
                        $LS($LZ), 
                        _module.__default.reverse(Tclass._module.G(), 
                          $LS($LZ), 
                          #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), 
                          #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil()))), 
                        zs#0_0_0));
                    assume _module.__default.reverse#canCall(Tclass._module.G(), 
                        #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), 
                        #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil())))
                       && _module.__default.append#canCall(Tclass._module.G(), 
                        _module.__default.reverse(Tclass._module.G(), 
                          $LS($LZ), 
                          #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), 
                          #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil()))), 
                        zs#0_0_0)
                       && _module.__default.filter#canCall(g#0, 
                        _module.__default.append(Tclass._module.G(), 
                          $LS($LZ), 
                          _module.__default.reverse(Tclass._module.G(), 
                            $LS($LZ), 
                            #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), 
                            #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil()))), 
                          zs#0_0_0));
                    // ----- assert line2 == line3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(500,13)
                    assert {:id "id702"} {:subsumption 0} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
                        g#0, 
                        _module.__default.append(Tclass._module.G(), 
                          $LS($LS($LZ)), 
                          _module.__default.reverse(Tclass._module.G(), 
                            $LS($LS($LZ)), 
                            #_module.List.Cons(b#0_0_0, #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()))), 
                            Lit(#_module.List.Nil())), 
                          zs#0_0_0)), 
                      _module.__default.filter($LS($LS($LZ)), 
                        g#0, 
                        _module.__default.append(Tclass._module.G(), 
                          $LS($LS($LZ)), 
                          _module.__default.reverse(Tclass._module.G(), 
                            $LS($LS($LZ)), 
                            #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), 
                            #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil()))), 
                          zs#0_0_0)));
                    assume false;
                }
                else if (*)
                {
                    // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(500,13)
                    ##g#0_0_1_0_3_0 := g#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##g#0_0_1_0_3_0, Tclass._module.G(), $Heap);
                    ##xs#0_0_1_0_3_2 := #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_1_0_3_2, Tclass._module.List(Tclass._module.G()), $Heap);
                    ##acc#0_0_1_0_3_0 := #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil()));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##acc#0_0_1_0_3_0, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.reverse#canCall(Tclass._module.G(), 
                      #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), 
                      #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil())));
                    ##xs#0_0_1_0_3_1 := _module.__default.reverse(Tclass._module.G(), 
                      $LS($LZ), 
                      #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), 
                      #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil())));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_1_0_3_1, Tclass._module.List(Tclass._module.G()), $Heap);
                    ##ys#0_0_1_0_3_0 := zs#0_0_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##ys#0_0_1_0_3_0, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.append#canCall(Tclass._module.G(), 
                      _module.__default.reverse(Tclass._module.G(), 
                        $LS($LZ), 
                        #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), 
                        #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil()))), 
                      zs#0_0_0);
                    ##xs#0_0_1_0_3_0 := _module.__default.append(Tclass._module.G(), 
                      $LS($LZ), 
                      _module.__default.reverse(Tclass._module.G(), 
                        $LS($LZ), 
                        #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), 
                        #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil()))), 
                      zs#0_0_0);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_1_0_3_0, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.filter#canCall(g#0, 
                      _module.__default.append(Tclass._module.G(), 
                        $LS($LZ), 
                        _module.__default.reverse(Tclass._module.G(), 
                          $LS($LZ), 
                          #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), 
                          #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil()))), 
                        zs#0_0_0));
                    assume _module.__default.reverse#canCall(Tclass._module.G(), 
                        #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), 
                        #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil())))
                       && _module.__default.append#canCall(Tclass._module.G(), 
                        _module.__default.reverse(Tclass._module.G(), 
                          $LS($LZ), 
                          #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), 
                          #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil()))), 
                        zs#0_0_0)
                       && _module.__default.filter#canCall(g#0, 
                        _module.__default.append(Tclass._module.G(), 
                          $LS($LZ), 
                          _module.__default.reverse(Tclass._module.G(), 
                            $LS($LZ), 
                            #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), 
                            #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil()))), 
                          zs#0_0_0));
                    // ----- Hint3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(500,13)
                    // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(500,13)
                    ##g#0_0_1_0_3_1 := g#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##g#0_0_1_0_3_1, Tclass._module.G(), $Heap);
                    ##xs#0_0_1_0_3_5 := Lit(#_module.List.Nil());
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_1_0_3_5, Tclass._module.List(Tclass._module.G()), $Heap);
                    ##acc#0_0_1_0_3_1 := #_module.List.Cons(a#0_0, #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil())));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##acc#0_0_1_0_3_1, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.reverse#canCall(Tclass._module.G(), 
                      Lit(#_module.List.Nil()), 
                      #_module.List.Cons(a#0_0, #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil()))));
                    ##xs#0_0_1_0_3_4 := _module.__default.reverse(Tclass._module.G(), 
                      $LS($LZ), 
                      Lit(#_module.List.Nil()), 
                      #_module.List.Cons(a#0_0, #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil()))));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_1_0_3_4, Tclass._module.List(Tclass._module.G()), $Heap);
                    ##ys#0_0_1_0_3_1 := zs#0_0_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##ys#0_0_1_0_3_1, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.append#canCall(Tclass._module.G(), 
                      _module.__default.reverse(Tclass._module.G(), 
                        $LS($LZ), 
                        Lit(#_module.List.Nil()), 
                        #_module.List.Cons(a#0_0, #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil())))), 
                      zs#0_0_0);
                    ##xs#0_0_1_0_3_3 := _module.__default.append(Tclass._module.G(), 
                      $LS($LZ), 
                      _module.__default.reverse(Tclass._module.G(), 
                        $LS($LZ), 
                        Lit(#_module.List.Nil()), 
                        #_module.List.Cons(a#0_0, #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil())))), 
                      zs#0_0_0);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_1_0_3_3, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.filter#canCall(g#0, 
                      _module.__default.append(Tclass._module.G(), 
                        $LS($LZ), 
                        _module.__default.reverse(Tclass._module.G(), 
                          $LS($LZ), 
                          Lit(#_module.List.Nil()), 
                          #_module.List.Cons(a#0_0, #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil())))), 
                        zs#0_0_0));
                    assume _module.__default.reverse#canCall(Tclass._module.G(), 
                        Lit(#_module.List.Nil()), 
                        #_module.List.Cons(a#0_0, #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil()))))
                       && _module.__default.append#canCall(Tclass._module.G(), 
                        _module.__default.reverse(Tclass._module.G(), 
                          $LS($LZ), 
                          Lit(#_module.List.Nil()), 
                          #_module.List.Cons(a#0_0, #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil())))), 
                        zs#0_0_0)
                       && _module.__default.filter#canCall(g#0, 
                        _module.__default.append(Tclass._module.G(), 
                          $LS($LZ), 
                          _module.__default.reverse(Tclass._module.G(), 
                            $LS($LZ), 
                            Lit(#_module.List.Nil()), 
                            #_module.List.Cons(a#0_0, #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil())))), 
                          zs#0_0_0));
                    // ----- assert line3 == line4 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(500,13)
                    assert {:id "id701"} {:subsumption 0} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
                        g#0, 
                        _module.__default.append(Tclass._module.G(), 
                          $LS($LS($LZ)), 
                          _module.__default.reverse(Tclass._module.G(), 
                            $LS($LS($LZ)), 
                            #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), 
                            #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil()))), 
                          zs#0_0_0)), 
                      _module.__default.filter($LS($LS($LZ)), 
                        g#0, 
                        _module.__default.append(Tclass._module.G(), 
                          $LS($LS($LZ)), 
                          _module.__default.reverse(Tclass._module.G(), 
                            $LS($LS($LZ)), 
                            Lit(#_module.List.Nil()), 
                            #_module.List.Cons(a#0_0, #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil())))), 
                          zs#0_0_0)));
                    assume false;
                }
                else if (*)
                {
                    // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(500,13)
                    ##g#0_0_1_0_2_0 := g#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##g#0_0_1_0_2_0, Tclass._module.G(), $Heap);
                    ##xs#0_0_1_0_2_2 := Lit(#_module.List.Nil());
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_1_0_2_2, Tclass._module.List(Tclass._module.G()), $Heap);
                    ##acc#0_0_1_0_2_0 := #_module.List.Cons(a#0_0, #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil())));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##acc#0_0_1_0_2_0, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.reverse#canCall(Tclass._module.G(), 
                      Lit(#_module.List.Nil()), 
                      #_module.List.Cons(a#0_0, #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil()))));
                    ##xs#0_0_1_0_2_1 := _module.__default.reverse(Tclass._module.G(), 
                      $LS($LZ), 
                      Lit(#_module.List.Nil()), 
                      #_module.List.Cons(a#0_0, #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil()))));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_1_0_2_1, Tclass._module.List(Tclass._module.G()), $Heap);
                    ##ys#0_0_1_0_2_0 := zs#0_0_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##ys#0_0_1_0_2_0, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.append#canCall(Tclass._module.G(), 
                      _module.__default.reverse(Tclass._module.G(), 
                        $LS($LZ), 
                        Lit(#_module.List.Nil()), 
                        #_module.List.Cons(a#0_0, #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil())))), 
                      zs#0_0_0);
                    ##xs#0_0_1_0_2_0 := _module.__default.append(Tclass._module.G(), 
                      $LS($LZ), 
                      _module.__default.reverse(Tclass._module.G(), 
                        $LS($LZ), 
                        Lit(#_module.List.Nil()), 
                        #_module.List.Cons(a#0_0, #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil())))), 
                      zs#0_0_0);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_1_0_2_0, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.filter#canCall(g#0, 
                      _module.__default.append(Tclass._module.G(), 
                        $LS($LZ), 
                        _module.__default.reverse(Tclass._module.G(), 
                          $LS($LZ), 
                          Lit(#_module.List.Nil()), 
                          #_module.List.Cons(a#0_0, #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil())))), 
                        zs#0_0_0));
                    assume _module.__default.reverse#canCall(Tclass._module.G(), 
                        Lit(#_module.List.Nil()), 
                        #_module.List.Cons(a#0_0, #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil()))))
                       && _module.__default.append#canCall(Tclass._module.G(), 
                        _module.__default.reverse(Tclass._module.G(), 
                          $LS($LZ), 
                          Lit(#_module.List.Nil()), 
                          #_module.List.Cons(a#0_0, #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil())))), 
                        zs#0_0_0)
                       && _module.__default.filter#canCall(g#0, 
                        _module.__default.append(Tclass._module.G(), 
                          $LS($LZ), 
                          _module.__default.reverse(Tclass._module.G(), 
                            $LS($LZ), 
                            Lit(#_module.List.Nil()), 
                            #_module.List.Cons(a#0_0, #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil())))), 
                          zs#0_0_0));
                    // ----- Hint4 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(500,13)
                    // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(500,13)
                    ##g#0_0_1_0_2_1 := g#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##g#0_0_1_0_2_1, Tclass._module.G(), $Heap);
                    ##xs#0_0_1_0_2_4 := #_module.List.Cons(a#0_0, #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil())));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_1_0_2_4, Tclass._module.List(Tclass._module.G()), $Heap);
                    ##ys#0_0_1_0_2_1 := zs#0_0_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##ys#0_0_1_0_2_1, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.append#canCall(Tclass._module.G(), 
                      #_module.List.Cons(a#0_0, #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil()))), 
                      zs#0_0_0);
                    ##xs#0_0_1_0_2_3 := _module.__default.append(Tclass._module.G(), 
                      $LS($LZ), 
                      #_module.List.Cons(a#0_0, #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil()))), 
                      zs#0_0_0);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_1_0_2_3, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.filter#canCall(g#0, 
                      _module.__default.append(Tclass._module.G(), 
                        $LS($LZ), 
                        #_module.List.Cons(a#0_0, #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil()))), 
                        zs#0_0_0));
                    assume _module.__default.append#canCall(Tclass._module.G(), 
                        #_module.List.Cons(a#0_0, #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil()))), 
                        zs#0_0_0)
                       && _module.__default.filter#canCall(g#0, 
                        _module.__default.append(Tclass._module.G(), 
                          $LS($LZ), 
                          #_module.List.Cons(a#0_0, #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil()))), 
                          zs#0_0_0));
                    // ----- assert line4 == line5 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(500,13)
                    assert {:id "id700"} {:subsumption 0} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
                        g#0, 
                        _module.__default.append(Tclass._module.G(), 
                          $LS($LS($LZ)), 
                          _module.__default.reverse(Tclass._module.G(), 
                            $LS($LS($LZ)), 
                            Lit(#_module.List.Nil()), 
                            #_module.List.Cons(a#0_0, #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil())))), 
                          zs#0_0_0)), 
                      _module.__default.filter($LS($LS($LZ)), 
                        g#0, 
                        _module.__default.append(Tclass._module.G(), 
                          $LS($LS($LZ)), 
                          #_module.List.Cons(a#0_0, #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil()))), 
                          zs#0_0_0)));
                    assume false;
                }
                else if (*)
                {
                    // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(500,13)
                    ##g#0_0_1_0_1_0 := g#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##g#0_0_1_0_1_0, Tclass._module.G(), $Heap);
                    ##xs#0_0_1_0_1_1 := #_module.List.Cons(a#0_0, #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil())));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_1_0_1_1, Tclass._module.List(Tclass._module.G()), $Heap);
                    ##ys#0_0_1_0_1_0 := zs#0_0_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##ys#0_0_1_0_1_0, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.append#canCall(Tclass._module.G(), 
                      #_module.List.Cons(a#0_0, #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil()))), 
                      zs#0_0_0);
                    ##xs#0_0_1_0_1_0 := _module.__default.append(Tclass._module.G(), 
                      $LS($LZ), 
                      #_module.List.Cons(a#0_0, #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil()))), 
                      zs#0_0_0);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_1_0_1_0, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.filter#canCall(g#0, 
                      _module.__default.append(Tclass._module.G(), 
                        $LS($LZ), 
                        #_module.List.Cons(a#0_0, #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil()))), 
                        zs#0_0_0));
                    assume _module.__default.append#canCall(Tclass._module.G(), 
                        #_module.List.Cons(a#0_0, #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil()))), 
                        zs#0_0_0)
                       && _module.__default.filter#canCall(g#0, 
                        _module.__default.append(Tclass._module.G(), 
                          $LS($LZ), 
                          #_module.List.Cons(a#0_0, #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil()))), 
                          zs#0_0_0));
                    // ----- Hint5 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(500,13)
                    // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(500,13)
                    ##g#0_0_1_0_1_1 := g#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##g#0_0_1_0_1_1, Tclass._module.G(), $Heap);
                    ##xs#0_0_1_0_1_3 := #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil()));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_1_0_1_3, Tclass._module.List(Tclass._module.G()), $Heap);
                    ##ys#0_0_1_0_1_1 := zs#0_0_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##ys#0_0_1_0_1_1, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.append#canCall(Tclass._module.G(), 
                      #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil())), 
                      zs#0_0_0);
                    ##xs#0_0_1_0_1_2 := #_module.List.Cons(a#0_0, 
                      _module.__default.append(Tclass._module.G(), 
                        $LS($LZ), 
                        #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil())), 
                        zs#0_0_0));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_1_0_1_2, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.filter#canCall(g#0, 
                      #_module.List.Cons(a#0_0, 
                        _module.__default.append(Tclass._module.G(), 
                          $LS($LZ), 
                          #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil())), 
                          zs#0_0_0)));
                    assume _module.__default.append#canCall(Tclass._module.G(), 
                        #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil())), 
                        zs#0_0_0)
                       && _module.__default.filter#canCall(g#0, 
                        #_module.List.Cons(a#0_0, 
                          _module.__default.append(Tclass._module.G(), 
                            $LS($LZ), 
                            #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil())), 
                            zs#0_0_0)));
                    // ----- assert line5 == line6 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(500,13)
                    assert {:id "id699"} {:subsumption 0} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
                        g#0, 
                        _module.__default.append(Tclass._module.G(), 
                          $LS($LS($LZ)), 
                          #_module.List.Cons(a#0_0, #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil()))), 
                          zs#0_0_0)), 
                      _module.__default.filter($LS($LS($LZ)), 
                        g#0, 
                        #_module.List.Cons(a#0_0, 
                          _module.__default.append(Tclass._module.G(), 
                            $LS($LS($LZ)), 
                            #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil())), 
                            zs#0_0_0))));
                    assume false;
                }
                else if (*)
                {
                    // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(500,13)
                    ##g#0_0_1_0_0_0 := g#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##g#0_0_1_0_0_0, Tclass._module.G(), $Heap);
                    ##xs#0_0_1_0_0_1 := #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil()));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_1_0_0_1, Tclass._module.List(Tclass._module.G()), $Heap);
                    ##ys#0_0_1_0_0_0 := zs#0_0_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##ys#0_0_1_0_0_0, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.append#canCall(Tclass._module.G(), 
                      #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil())), 
                      zs#0_0_0);
                    ##xs#0_0_1_0_0_0 := #_module.List.Cons(a#0_0, 
                      _module.__default.append(Tclass._module.G(), 
                        $LS($LZ), 
                        #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil())), 
                        zs#0_0_0));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_1_0_0_0, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.filter#canCall(g#0, 
                      #_module.List.Cons(a#0_0, 
                        _module.__default.append(Tclass._module.G(), 
                          $LS($LZ), 
                          #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil())), 
                          zs#0_0_0)));
                    assume _module.__default.append#canCall(Tclass._module.G(), 
                        #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil())), 
                        zs#0_0_0)
                       && _module.__default.filter#canCall(g#0, 
                        #_module.List.Cons(a#0_0, 
                          _module.__default.append(Tclass._module.G(), 
                            $LS($LZ), 
                            #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil())), 
                            zs#0_0_0)));
                    // ----- Hint6 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(500,13)
                    // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(500,13)
                    ##g#0_0_1_0_0_1 := g#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##g#0_0_1_0_0_1, Tclass._module.G(), $Heap);
                    ##xs#0_0_1_0_0_2 := #_module.List.Cons(a#0_0, #_module.List.Cons(b#0_0_0, zs#0_0_0));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_1_0_0_2, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.filter#canCall(g#0, #_module.List.Cons(a#0_0, #_module.List.Cons(b#0_0_0, zs#0_0_0)));
                    assume _module.__default.filter#canCall(g#0, #_module.List.Cons(a#0_0, #_module.List.Cons(b#0_0_0, zs#0_0_0)));
                    // ----- assert line6 == line7 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(500,13)
                    assert {:id "id698"} {:subsumption 0} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
                        g#0, 
                        #_module.List.Cons(a#0_0, 
                          _module.__default.append(Tclass._module.G(), 
                            $LS($LS($LZ)), 
                            #_module.List.Cons(b#0_0_0, Lit(#_module.List.Nil())), 
                            zs#0_0_0))), 
                      _module.__default.filter($LS($LS($LZ)), 
                        g#0, 
                        #_module.List.Cons(a#0_0, #_module.List.Cons(b#0_0_0, zs#0_0_0))));
                    assume false;
                }

                assume {:id "id707"} _module.List#Equal(_module.__default.filter($LS($LZ), 
                    g#0, 
                    _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), xs#0))), 
                  _module.__default.filter($LS($LZ), g#0, #_module.List.Cons(a#0_0, #_module.List.Cons(b#0_0_0, zs#0_0_0))));
            }
        }
        else
        {
            assume false;
        }
    }
    else
    {
        assume false;
    }
}



procedure {:verboseName "stable_descending (well-formedness)"} CheckWellFormed$$_module.__default.stable__descending(g#0: Box
       where $IsBox(g#0, Tclass._module.G()) && $IsAllocBox(g#0, Tclass._module.G(), $Heap), 
    a#0: Box
       where $IsBox(a#0, Tclass._module.G()) && $IsAllocBox(a#0, Tclass._module.G(), $Heap), 
    xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(xs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(xs#0), 
    ys#0: DatatypeType
       where $Is(ys#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(ys#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(ys#0));
  free requires 5 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "stable_descending (call)"} Call$$_module.__default.stable__descending(g#0: Box
       where $IsBox(g#0, Tclass._module.G()) && $IsAllocBox(g#0, Tclass._module.G(), $Heap), 
    a#0: Box
       where $IsBox(a#0, Tclass._module.G()) && $IsAllocBox(a#0, Tclass._module.G(), $Heap), 
    xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(xs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(xs#0), 
    ys#0: DatatypeType
       where $Is(ys#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(ys#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(ys#0));
  // user-defined preconditions
  requires {:id "id716"} _module.__default.sorted#canCall(#_module.List.Cons(a#0, xs#0))
     ==> _module.__default.sorted($LS($LZ), #_module.List.Cons(a#0, xs#0))
       || (_module.List.Nil_q(#_module.List.Cons(a#0, xs#0)) ==> Lit(true));
  requires {:id "id717"} _module.__default.sorted#canCall(#_module.List.Cons(a#0, xs#0))
     ==> _module.__default.sorted($LS($LZ), #_module.List.Cons(a#0, xs#0))
       || (!_module.List.Nil_q(#_module.List.Cons(a#0, xs#0))
         ==> (var ys#1 := _module.List.tail(#_module.List.Cons(a#0, xs#0)); 
          (var a#1 := _module.List.head(#_module.List.Cons(a#0, xs#0)); 
            (forall y#0: Box :: 
              { _module.__default.Below(a#1, y#0) } 
                { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#1), y#0) } 
              $IsBox(y#0, Tclass._module.G())
                 ==> 
                MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#1), y#0)
                   > 0
                 ==> _module.__default.Below(a#1, y#0)))));
  requires {:id "id718"} _module.__default.sorted#canCall(#_module.List.Cons(a#0, xs#0))
     ==> _module.__default.sorted($LS($LZ), #_module.List.Cons(a#0, xs#0))
       || (!_module.List.Nil_q(#_module.List.Cons(a#0, xs#0))
         ==> (var ys#1 := _module.List.tail(#_module.List.Cons(a#0, xs#0)); 
          (var a#1 := _module.List.head(#_module.List.Cons(a#0, xs#0)); 
            _module.__default.sorted($LS($LS($LZ)), ys#1))));
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#_module.List(_module.__default.filter($LS($LZ), 
        g#0, 
        _module.__default.flatten(Tclass._module.G(), 
          $LS($LZ), 
          _module.__default.descending($LS($LZ), a#0, xs#0, ys#0))))
     && $IsA#_module.List(_module.__default.filter($LS($LZ), 
        g#0, 
        _module.__default.append(Tclass._module.G(), $LS($LZ), #_module.List.Cons(a#0, xs#0), ys#0)))
     && 
    _module.__default.descending#canCall(a#0, xs#0, ys#0)
     && _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.descending($LS($LZ), a#0, xs#0, ys#0))
     && _module.__default.filter#canCall(g#0, 
      _module.__default.flatten(Tclass._module.G(), 
        $LS($LZ), 
        _module.__default.descending($LS($LZ), a#0, xs#0, ys#0)))
     && 
    _module.__default.append#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), ys#0)
     && _module.__default.filter#canCall(g#0, 
      _module.__default.append(Tclass._module.G(), $LS($LZ), #_module.List.Cons(a#0, xs#0), ys#0));
  ensures {:id "id719"} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
      g#0, 
      _module.__default.flatten(Tclass._module.G(), 
        $LS($LS($LZ)), 
        _module.__default.descending($LS($LS($LZ)), a#0, xs#0, ys#0))), 
    _module.__default.filter($LS($LS($LZ)), 
      g#0, 
      _module.__default.append(Tclass._module.G(), $LS($LS($LZ)), #_module.List.Cons(a#0, xs#0), ys#0)));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "stable_descending (correctness)"} Impl$$_module.__default.stable__descending(g#0: Box
       where $IsBox(g#0, Tclass._module.G()) && $IsAllocBox(g#0, Tclass._module.G(), $Heap), 
    a#0: Box
       where $IsBox(a#0, Tclass._module.G()) && $IsAllocBox(a#0, Tclass._module.G(), $Heap), 
    xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(xs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(xs#0), 
    ys#0: DatatypeType
       where $Is(ys#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(ys#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(ys#0))
   returns ($_reverifyPost: bool);
  free requires 5 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id720"} _module.__default.sorted#canCall(#_module.List.Cons(a#0, xs#0))
     && 
    _module.__default.sorted($LS($LZ), #_module.List.Cons(a#0, xs#0))
     && (if _module.List.Nil_q(#_module.List.Cons(a#0, xs#0))
       then true
       else (var ys#4 := _module.List.tail(#_module.List.Cons(a#0, xs#0)); 
        (var a#4 := _module.List.head(#_module.List.Cons(a#0, xs#0)); 
          (forall y#3: Box :: 
              { _module.__default.Below(a#4, y#3) } 
                { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#4), y#3) } 
              $IsBox(y#3, Tclass._module.G())
                 ==> 
                MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#4), y#3)
                   > 0
                 ==> _module.__default.Below(a#4, y#3))
             && _module.__default.sorted($LS($LZ), ys#4))));
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#_module.List(_module.__default.filter($LS($LZ), 
        g#0, 
        _module.__default.flatten(Tclass._module.G(), 
          $LS($LZ), 
          _module.__default.descending($LS($LZ), a#0, xs#0, ys#0))))
     && $IsA#_module.List(_module.__default.filter($LS($LZ), 
        g#0, 
        _module.__default.append(Tclass._module.G(), $LS($LZ), #_module.List.Cons(a#0, xs#0), ys#0)))
     && 
    _module.__default.descending#canCall(a#0, xs#0, ys#0)
     && _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.descending($LS($LZ), a#0, xs#0, ys#0))
     && _module.__default.filter#canCall(g#0, 
      _module.__default.flatten(Tclass._module.G(), 
        $LS($LZ), 
        _module.__default.descending($LS($LZ), a#0, xs#0, ys#0)))
     && 
    _module.__default.append#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), ys#0)
     && _module.__default.filter#canCall(g#0, 
      _module.__default.append(Tclass._module.G(), $LS($LZ), #_module.List.Cons(a#0, xs#0), ys#0));
  ensures {:id "id721"} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
      g#0, 
      _module.__default.flatten(Tclass._module.G(), 
        $LS($LS($LZ)), 
        _module.__default.descending($LS($LS($LZ)), a#0, xs#0, ys#0))), 
    _module.__default.filter($LS($LS($LZ)), 
      g#0, 
      _module.__default.append(Tclass._module.G(), $LS($LS($LZ)), #_module.List.Cons(a#0, xs#0), ys#0)));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "stable_descending (correctness)"} Impl$$_module.__default.stable__descending(g#0: Box, a#0: Box, xs#0: DatatypeType, ys#0: DatatypeType)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $initHeapForallStmt#0: Heap;
  var ##a#1: Box;
  var ##b#0: Box;
  var ##g#0_0_0_0: Box;
  var ##xs#0_0_0_0: DatatypeType;
  var ##xs#0_0_0_1: DatatypeType;
  var ##ys#0_0_0_0: DatatypeType;
  var ##g#0_0_0_1: Box;
  var ##xs#0_0_0_2: DatatypeType;
  var ##xs#0_0_0_3: DatatypeType;
  var ##ys#0_0_0_1: DatatypeType;
  var ##g#0_0_1_0: Box;
  var ##xs#0_0_1_0: DatatypeType;
  var ##xs#0_0_1_1: DatatypeType;
  var ##ys#0_0_1_0: DatatypeType;
  var g##0_0_1_0: Box;
  var b##0_0_1_0: Box;
  var xs##0_0_1_0: DatatypeType;
  var ys##0_0_1_0: DatatypeType;
  var ##g#0_0_1_1: Box;
  var ##xs#0_0_1_2: DatatypeType;
  var ##xs#0_0_1_3: DatatypeType;
  var ##ys#0_0_1_1: DatatypeType;
  var ##g#0_0_2_0: Box;
  var ##xs#0_0_2_0: DatatypeType;
  var ##xs#0_0_2_1: DatatypeType;
  var ##ys#0_0_2_0: DatatypeType;
  var ##g#0_0_2_1: Box;
  var ##xs#0_0_2_2: DatatypeType;
  var ##xs#0_0_2_3: DatatypeType;
  var ##ys#0_0_2_1: DatatypeType;
  var ##g#0_0_3_0: Box;
  var ##xs#0_0_3_0: DatatypeType;
  var ##x#0_0_3_0: DatatypeType;
  var ##a#0_0_3_0: Box;
  var ##xs#0_0_3_1: DatatypeType;
  var ##ys#0_0_3_0: DatatypeType;
  var g##0_0_3_0: Box;
  var a##0_0_3_0: Box;
  var xs##0_0_3_0: DatatypeType;
  var ys##0_0_3_0: DatatypeType;
  var ##g#0_0_3_1: Box;
  var ##xs#0_0_3_2: DatatypeType;
  var ##xs#0_0_3_3: DatatypeType;
  var ##ys#0_0_3_1: DatatypeType;
  var ##g#0_0_4_0: Box;
  var ##xs#0_0_4_0: DatatypeType;
  var ##x#0_0_4_0: DatatypeType;
  var ##a#0_0_4_0: Box;
  var ##xs#0_0_4_1: DatatypeType;
  var ##ys#0_0_4_0: DatatypeType;
  var ##g#0_0_4_1: Box;
  var ##xs#0_0_4_2: DatatypeType;
  var ##x#0_0_4_1: DatatypeType;
  var ##a#0_0_4_1: Box;
  var ##xs#0_0_4_3: DatatypeType;
  var ##ys#0_0_4_1: DatatypeType;
  var ##g#0_0_0: Box;
  var ##xs#0_0_0: DatatypeType;
  var ##x#0_0_0: DatatypeType;
  var ##a#0_0_0: Box;
  var ##xs#0_0_1: DatatypeType;
  var ##ys#0_0_0: DatatypeType;
  var ##xs#1_0_0_0: DatatypeType;
  var ##g#1_0_0_0: Box;
  var ##xs#1_0_0_1: DatatypeType;
  var ##ys#1_0_0_0: DatatypeType;
  var ##g#1_0_0_1: Box;
  var ##xs#1_0_0_2: DatatypeType;
  var g##1_0_0_0: Box;
  var xs##1_0_0_0: DatatypeType;
  var ys##1_0_0_0: DatatypeType;
  var ##g#1_0_0_2: Box;
  var ##xs#1_0_0_3: DatatypeType;
  var ##xs#1_0_0_4: DatatypeType;
  var ##ys#1_0_0_1: DatatypeType;
  var ##xs#1_0_1_0: DatatypeType;
  var ##g#1_0_1_0: Box;
  var ##xs#1_0_1_1: DatatypeType;
  var ##ys#1_0_1_0: DatatypeType;
  var ##g#1_0_1_1: Box;
  var ##xs#1_0_1_2: DatatypeType;
  var ##x#1_0_1_0: DatatypeType;
  var ##xs#1_0_1_3: DatatypeType;
  var g##1_0_1_0: Box;
  var xs##1_0_1_0: DatatypeType;
  var ##xs#1_0_1_4: DatatypeType;
  var ##g#1_0_1_2: Box;
  var ##xs#1_0_1_5: DatatypeType;
  var ##ys#1_0_1_1: DatatypeType;
  var ##g#1_0_1_3: Box;
  var ##xs#1_0_1_6: DatatypeType;
  var ##g#1_0_2_0: Box;
  var ##xs#1_0_2_0: DatatypeType;
  var ##xs#1_0_2_1: DatatypeType;
  var ##ys#1_0_2_0: DatatypeType;
  var ##x#1_0_2_0: DatatypeType;
  var ##xs#1_0_2_2: DatatypeType;
  var g##1_0_2_0: Box;
  var xs##1_0_2_0: DatatypeType;
  var ys##1_0_2_0: DatatypeType;
  var ##x#1_0_2_1: DatatypeType;
  var ##xs#1_0_2_3: DatatypeType;
  var ##xs#1_0_2_4: DatatypeType;
  var ##g#1_0_2_1: Box;
  var ##xs#1_0_2_5: DatatypeType;
  var ##ys#1_0_2_1: DatatypeType;
  var ##g#1_0_2_2: Box;
  var ##xs#1_0_2_6: DatatypeType;
  var ##x#1_0_2_2: DatatypeType;
  var ##xs#1_0_2_7: DatatypeType;
  var ##g#1_0_3_0: Box;
  var ##xs#1_0_3_0: DatatypeType;
  var ##x#1_0_3_0: DatatypeType;
  var ##xs#1_0_3_1: DatatypeType;
  var ##g#1_0_3_1: Box;
  var ##xs#1_0_3_2: DatatypeType;
  var ##xs#1_0_3_3: DatatypeType;
  var ##ys#1_0_3_0: DatatypeType;
  var ##x#1_0_3_1: DatatypeType;
  var ##xs#1_0_3_4: DatatypeType;
  var ##g#1_0_4_0: Box;
  var ##xs#1_0_4_0: DatatypeType;
  var ##x#1_0_4_0: DatatypeType;
  var ##a#1_0_4_0: Box;
  var ##xs#1_0_4_1: DatatypeType;
  var ##ys#1_0_4_0: DatatypeType;
  var ##g#1_0_4_1: Box;
  var ##xs#1_0_4_2: DatatypeType;
  var ##x#1_0_4_1: DatatypeType;
  var ##xs#1_0_4_3: DatatypeType;
  var ##g#1_0_0: Box;
  var ##xs#1_0_0: DatatypeType;
  var ##x#1_0_0: DatatypeType;
  var ##a#1_0_0: Box;
  var ##xs#1_0_1: DatatypeType;
  var ##ys#1_0_0: DatatypeType;

    // AddMethodImpl: stable_descending, Impl$$_module.__default.stable__descending
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume $IsA#_module.List(xs#0);
    assume $IsA#_module.List(ys#0);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#xs0#0: DatatypeType, $ih#ys0#0: DatatypeType :: 
      { _module.__default.append(Tclass._module.G(), $LS($LZ), #_module.List.Cons(a#0, $ih#xs0#0), $ih#ys0#0) } 
        { _module.__default.descending($LS($LZ), a#0, $ih#xs0#0, $ih#ys0#0) } 
      $Is($ih#xs0#0, Tclass._module.List(Tclass._module.G()))
           && $Is($ih#ys0#0, Tclass._module.List(Tclass._module.G()))
           && _module.__default.sorted($LS($LZ), #_module.List.Cons(a#0, $ih#xs0#0))
           && DtRank($ih#ys0#0) < DtRank(ys#0)
         ==> _module.List#Equal(_module.__default.filter($LS($LZ), 
            g#0, 
            _module.__default.flatten(Tclass._module.G(), 
              $LS($LZ), 
              _module.__default.descending($LS($LZ), a#0, $ih#xs0#0, $ih#ys0#0))), 
          _module.__default.filter($LS($LZ), 
            g#0, 
            _module.__default.append(Tclass._module.G(), $LS($LZ), #_module.List.Cons(a#0, $ih#xs0#0), $ih#ys0#0))));
    $_reverifyPost := false;
    // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(523,3)
    if (_module.List.Cons_q(ys#0))
    {
        ##a#1 := a#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##a#1, Tclass._module.G(), $Heap);
        assert {:id "id722"} _module.List.Cons_q(ys#0);
        ##b#0 := _module.List.head(ys#0);
        // assume allocatedness for argument to function
        assume $IsAllocBox(##b#0, Tclass._module.G(), $Heap);
        assume _module.__default.Below#canCall(a#0, _module.List.head(ys#0));
    }

    assume _module.List.Cons_q(ys#0)
       ==> _module.__default.Below#canCall(a#0, _module.List.head(ys#0));
    if (_module.List.Cons_q(ys#0)
       && !_module.__default.Below(a#0, _module.List.head(ys#0)))
    {
        // ----- calc statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(524,5)
        // Assume Fuel Constant
        if (*)
        {
            // ----- assert wf[initial] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(524,5)
            ##g#0_0_0 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_0, Tclass._module.G(), $Heap);
            ##a#0_0_0 := a#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##a#0_0_0, Tclass._module.G(), $Heap);
            ##xs#0_0_1 := xs#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_1, Tclass._module.List(Tclass._module.G()), $Heap);
            ##ys#0_0_0 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.descending#canCall(a#0, xs#0, ys#0);
            ##x#0_0_0 := _module.__default.descending($LS($LZ), a#0, xs#0, ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#0_0_0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.descending($LS($LZ), a#0, xs#0, ys#0));
            ##xs#0_0_0 := _module.__default.flatten(Tclass._module.G(), 
              $LS($LZ), 
              _module.__default.descending($LS($LZ), a#0, xs#0, ys#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.flatten(Tclass._module.G(), 
                $LS($LZ), 
                _module.__default.descending($LS($LZ), a#0, xs#0, ys#0)));
            assume _module.__default.descending#canCall(a#0, xs#0, ys#0)
               && _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.descending($LS($LZ), a#0, xs#0, ys#0))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.flatten(Tclass._module.G(), 
                  $LS($LZ), 
                  _module.__default.descending($LS($LZ), a#0, xs#0, ys#0)));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(524,5)
            ##g#0_0_4_0 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_4_0, Tclass._module.G(), $Heap);
            ##a#0_0_4_0 := a#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##a#0_0_4_0, Tclass._module.G(), $Heap);
            ##xs#0_0_4_1 := xs#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_4_1, Tclass._module.List(Tclass._module.G()), $Heap);
            ##ys#0_0_4_0 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_4_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.descending#canCall(a#0, xs#0, ys#0);
            ##x#0_0_4_0 := _module.__default.descending($LS($LZ), a#0, xs#0, ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#0_0_4_0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.descending($LS($LZ), a#0, xs#0, ys#0));
            ##xs#0_0_4_0 := _module.__default.flatten(Tclass._module.G(), 
              $LS($LZ), 
              _module.__default.descending($LS($LZ), a#0, xs#0, ys#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_4_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.flatten(Tclass._module.G(), 
                $LS($LZ), 
                _module.__default.descending($LS($LZ), a#0, xs#0, ys#0)));
            assume _module.__default.descending#canCall(a#0, xs#0, ys#0)
               && _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.descending($LS($LZ), a#0, xs#0, ys#0))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.flatten(Tclass._module.G(), 
                  $LS($LZ), 
                  _module.__default.descending($LS($LZ), a#0, xs#0, ys#0)));
            // ----- Hint0 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(524,5)
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(524,5)
            ##g#0_0_4_1 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_4_1, Tclass._module.G(), $Heap);
            assert {:id "id748"} _module.List.Cons_q(ys#0);
            ##a#0_0_4_1 := _module.List.head(ys#0);
            // assume allocatedness for argument to function
            assume $IsAllocBox(##a#0_0_4_1, Tclass._module.G(), $Heap);
            ##xs#0_0_4_3 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_4_3, Tclass._module.List(Tclass._module.G()), $Heap);
            assert {:id "id749"} _module.List.Cons_q(ys#0);
            ##ys#0_0_4_1 := _module.List.tail(ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_4_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.descending#canCall(_module.List.head(ys#0), #_module.List.Cons(a#0, xs#0), _module.List.tail(ys#0));
            ##x#0_0_4_1 := _module.__default.descending($LS($LZ), 
              _module.List.head(ys#0), 
              #_module.List.Cons(a#0, xs#0), 
              _module.List.tail(ys#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#0_0_4_1, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.flatten#canCall(Tclass._module.G(), 
              _module.__default.descending($LS($LZ), 
                _module.List.head(ys#0), 
                #_module.List.Cons(a#0, xs#0), 
                _module.List.tail(ys#0)));
            ##xs#0_0_4_2 := _module.__default.flatten(Tclass._module.G(), 
              $LS($LZ), 
              _module.__default.descending($LS($LZ), 
                _module.List.head(ys#0), 
                #_module.List.Cons(a#0, xs#0), 
                _module.List.tail(ys#0)));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_4_2, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.flatten(Tclass._module.G(), 
                $LS($LZ), 
                _module.__default.descending($LS($LZ), 
                  _module.List.head(ys#0), 
                  #_module.List.Cons(a#0, xs#0), 
                  _module.List.tail(ys#0))));
            assume _module.__default.descending#canCall(_module.List.head(ys#0), #_module.List.Cons(a#0, xs#0), _module.List.tail(ys#0))
               && _module.__default.flatten#canCall(Tclass._module.G(), 
                _module.__default.descending($LS($LZ), 
                  _module.List.head(ys#0), 
                  #_module.List.Cons(a#0, xs#0), 
                  _module.List.tail(ys#0)))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.flatten(Tclass._module.G(), 
                  $LS($LZ), 
                  _module.__default.descending($LS($LZ), 
                    _module.List.head(ys#0), 
                    #_module.List.Cons(a#0, xs#0), 
                    _module.List.tail(ys#0))));
            // ----- assert line0 == line1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(524,5)
            assert {:id "id750"} {:subsumption 0} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.flatten(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  _module.__default.descending($LS($LS($LZ)), a#0, xs#0, ys#0))), 
              _module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.flatten(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  _module.__default.descending($LS($LS($LZ)), 
                    _module.List.head(ys#0), 
                    #_module.List.Cons(a#0, xs#0), 
                    _module.List.tail(ys#0)))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(524,5)
            ##g#0_0_3_0 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_3_0, Tclass._module.G(), $Heap);
            assume {:id "id739"} _module.List.Cons_q(ys#0);
            ##a#0_0_3_0 := _module.List.head(ys#0);
            // assume allocatedness for argument to function
            assume $IsAllocBox(##a#0_0_3_0, Tclass._module.G(), $Heap);
            ##xs#0_0_3_1 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_3_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume {:id "id740"} _module.List.Cons_q(ys#0);
            ##ys#0_0_3_0 := _module.List.tail(ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_3_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.descending#canCall(_module.List.head(ys#0), #_module.List.Cons(a#0, xs#0), _module.List.tail(ys#0));
            ##x#0_0_3_0 := _module.__default.descending($LS($LZ), 
              _module.List.head(ys#0), 
              #_module.List.Cons(a#0, xs#0), 
              _module.List.tail(ys#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#0_0_3_0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.flatten#canCall(Tclass._module.G(), 
              _module.__default.descending($LS($LZ), 
                _module.List.head(ys#0), 
                #_module.List.Cons(a#0, xs#0), 
                _module.List.tail(ys#0)));
            ##xs#0_0_3_0 := _module.__default.flatten(Tclass._module.G(), 
              $LS($LZ), 
              _module.__default.descending($LS($LZ), 
                _module.List.head(ys#0), 
                #_module.List.Cons(a#0, xs#0), 
                _module.List.tail(ys#0)));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_3_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.flatten(Tclass._module.G(), 
                $LS($LZ), 
                _module.__default.descending($LS($LZ), 
                  _module.List.head(ys#0), 
                  #_module.List.Cons(a#0, xs#0), 
                  _module.List.tail(ys#0))));
            assume _module.__default.descending#canCall(_module.List.head(ys#0), #_module.List.Cons(a#0, xs#0), _module.List.tail(ys#0))
               && _module.__default.flatten#canCall(Tclass._module.G(), 
                _module.__default.descending($LS($LZ), 
                  _module.List.head(ys#0), 
                  #_module.List.Cons(a#0, xs#0), 
                  _module.List.tail(ys#0)))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.flatten(Tclass._module.G(), 
                  $LS($LZ), 
                  _module.__default.descending($LS($LZ), 
                    _module.List.head(ys#0), 
                    #_module.List.Cons(a#0, xs#0), 
                    _module.List.tail(ys#0))));
            // ----- Hint1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(524,5)
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(527,26)
            // TrCallStmt: Before ProcessCallStmt
            assume true;
            // ProcessCallStmt: CheckSubrange
            g##0_0_3_0 := g#0;
            assert {:id "id741"} _module.List.Cons_q(ys#0);
            assume true;
            // ProcessCallStmt: CheckSubrange
            a##0_0_3_0 := _module.List.head(ys#0);
            assume true;
            // ProcessCallStmt: CheckSubrange
            xs##0_0_3_0 := #_module.List.Cons(a#0, xs#0);
            assert {:id "id742"} _module.List.Cons_q(ys#0);
            assume true;
            // ProcessCallStmt: CheckSubrange
            ys##0_0_3_0 := _module.List.tail(ys#0);
            assert {:id "id743"} DtRank(ys##0_0_3_0) < DtRank(ys#0);
            call {:id "id744"} Call$$_module.__default.stable__descending(g##0_0_3_0, a##0_0_3_0, xs##0_0_3_0, ys##0_0_3_0);
            // TrCallStmt: After ProcessCallStmt
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(524,5)
            ##g#0_0_3_1 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_3_1, Tclass._module.G(), $Heap);
            assert {:id "id745"} _module.List.Cons_q(ys#0);
            ##xs#0_0_3_3 := #_module.List.Cons(_module.List.head(ys#0), #_module.List.Cons(a#0, xs#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_3_3, Tclass._module.List(Tclass._module.G()), $Heap);
            assert {:id "id746"} _module.List.Cons_q(ys#0);
            ##ys#0_0_3_1 := _module.List.tail(ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_3_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              #_module.List.Cons(_module.List.head(ys#0), #_module.List.Cons(a#0, xs#0)), 
              _module.List.tail(ys#0));
            ##xs#0_0_3_2 := _module.__default.append(Tclass._module.G(), 
              $LS($LZ), 
              #_module.List.Cons(_module.List.head(ys#0), #_module.List.Cons(a#0, xs#0)), 
              _module.List.tail(ys#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_3_2, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(_module.List.head(ys#0), #_module.List.Cons(a#0, xs#0)), 
                _module.List.tail(ys#0)));
            assume _module.__default.append#canCall(Tclass._module.G(), 
                #_module.List.Cons(_module.List.head(ys#0), #_module.List.Cons(a#0, xs#0)), 
                _module.List.tail(ys#0))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(_module.List.head(ys#0), #_module.List.Cons(a#0, xs#0)), 
                  _module.List.tail(ys#0)));
            // ----- assert line1 == line2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(524,5)
            assert {:id "id747"} {:subsumption 0} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.flatten(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  _module.__default.descending($LS($LS($LZ)), 
                    _module.List.head(ys#0), 
                    #_module.List.Cons(a#0, xs#0), 
                    _module.List.tail(ys#0)))), 
              _module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  #_module.List.Cons(_module.List.head(ys#0), #_module.List.Cons(a#0, xs#0)), 
                  _module.List.tail(ys#0))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(524,5)
            ##g#0_0_2_0 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_2_0, Tclass._module.G(), $Heap);
            assume {:id "id734"} _module.List.Cons_q(ys#0);
            ##xs#0_0_2_1 := #_module.List.Cons(_module.List.head(ys#0), #_module.List.Cons(a#0, xs#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_2_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume {:id "id735"} _module.List.Cons_q(ys#0);
            ##ys#0_0_2_0 := _module.List.tail(ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_2_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              #_module.List.Cons(_module.List.head(ys#0), #_module.List.Cons(a#0, xs#0)), 
              _module.List.tail(ys#0));
            ##xs#0_0_2_0 := _module.__default.append(Tclass._module.G(), 
              $LS($LZ), 
              #_module.List.Cons(_module.List.head(ys#0), #_module.List.Cons(a#0, xs#0)), 
              _module.List.tail(ys#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_2_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(_module.List.head(ys#0), #_module.List.Cons(a#0, xs#0)), 
                _module.List.tail(ys#0)));
            assume _module.__default.append#canCall(Tclass._module.G(), 
                #_module.List.Cons(_module.List.head(ys#0), #_module.List.Cons(a#0, xs#0)), 
                _module.List.tail(ys#0))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(_module.List.head(ys#0), #_module.List.Cons(a#0, xs#0)), 
                  _module.List.tail(ys#0)));
            // ----- Hint2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(524,5)
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(524,5)
            ##g#0_0_2_1 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_2_1, Tclass._module.G(), $Heap);
            assert {:id "id736"} _module.List.Cons_q(ys#0);
            ##xs#0_0_2_3 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_2_3, Tclass._module.List(Tclass._module.G()), $Heap);
            assert {:id "id737"} _module.List.Cons_q(ys#0);
            ##ys#0_0_2_1 := _module.List.tail(ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_2_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), _module.List.tail(ys#0));
            ##xs#0_0_2_2 := #_module.List.Cons(_module.List.head(ys#0), 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(a#0, xs#0), 
                _module.List.tail(ys#0)));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_2_2, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              #_module.List.Cons(_module.List.head(ys#0), 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(a#0, xs#0), 
                  _module.List.tail(ys#0))));
            assume _module.__default.append#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), _module.List.tail(ys#0))
               && _module.__default.filter#canCall(g#0, 
                #_module.List.Cons(_module.List.head(ys#0), 
                  _module.__default.append(Tclass._module.G(), 
                    $LS($LZ), 
                    #_module.List.Cons(a#0, xs#0), 
                    _module.List.tail(ys#0))));
            // ----- assert line2 == line3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(524,5)
            assert {:id "id738"} {:subsumption 0} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  #_module.List.Cons(_module.List.head(ys#0), #_module.List.Cons(a#0, xs#0)), 
                  _module.List.tail(ys#0))), 
              _module.__default.filter($LS($LS($LZ)), 
                g#0, 
                #_module.List.Cons(_module.List.head(ys#0), 
                  _module.__default.append(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    #_module.List.Cons(a#0, xs#0), 
                    _module.List.tail(ys#0)))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(524,5)
            ##g#0_0_1_0 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_1_0, Tclass._module.G(), $Heap);
            assume {:id "id726"} _module.List.Cons_q(ys#0);
            ##xs#0_0_1_1 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_1_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume {:id "id727"} _module.List.Cons_q(ys#0);
            ##ys#0_0_1_0 := _module.List.tail(ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_1_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), _module.List.tail(ys#0));
            ##xs#0_0_1_0 := #_module.List.Cons(_module.List.head(ys#0), 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(a#0, xs#0), 
                _module.List.tail(ys#0)));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_1_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              #_module.List.Cons(_module.List.head(ys#0), 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(a#0, xs#0), 
                  _module.List.tail(ys#0))));
            assume _module.__default.append#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), _module.List.tail(ys#0))
               && _module.__default.filter#canCall(g#0, 
                #_module.List.Cons(_module.List.head(ys#0), 
                  _module.__default.append(Tclass._module.G(), 
                    $LS($LZ), 
                    #_module.List.Cons(a#0, xs#0), 
                    _module.List.tail(ys#0))));
            // ----- Hint3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(524,5)
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(530,31)
            // TrCallStmt: Before ProcessCallStmt
            assume true;
            // ProcessCallStmt: CheckSubrange
            g##0_0_1_0 := g#0;
            assert {:id "id728"} _module.List.Cons_q(ys#0);
            assume true;
            // ProcessCallStmt: CheckSubrange
            b##0_0_1_0 := _module.List.head(ys#0);
            assume true;
            // ProcessCallStmt: CheckSubrange
            xs##0_0_1_0 := #_module.List.Cons(a#0, xs#0);
            assert {:id "id729"} _module.List.Cons_q(ys#0);
            assume true;
            // ProcessCallStmt: CheckSubrange
            ys##0_0_1_0 := _module.List.tail(ys#0);
            call {:id "id730"} Call$$_module.__default.filter__append__notBelow(g##0_0_1_0, b##0_0_1_0, xs##0_0_1_0, ys##0_0_1_0);
            // TrCallStmt: After ProcessCallStmt
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(524,5)
            ##g#0_0_1_1 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_1_1, Tclass._module.G(), $Heap);
            ##xs#0_0_1_3 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_1_3, Tclass._module.List(Tclass._module.G()), $Heap);
            assert {:id "id731"} _module.List.Cons_q(ys#0);
            assert {:id "id732"} _module.List.Cons_q(ys#0);
            ##ys#0_0_1_1 := #_module.List.Cons(_module.List.head(ys#0), _module.List.tail(ys#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_1_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              #_module.List.Cons(a#0, xs#0), 
              #_module.List.Cons(_module.List.head(ys#0), _module.List.tail(ys#0)));
            ##xs#0_0_1_2 := _module.__default.append(Tclass._module.G(), 
              $LS($LZ), 
              #_module.List.Cons(a#0, xs#0), 
              #_module.List.Cons(_module.List.head(ys#0), _module.List.tail(ys#0)));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_1_2, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(a#0, xs#0), 
                #_module.List.Cons(_module.List.head(ys#0), _module.List.tail(ys#0))));
            assume _module.__default.append#canCall(Tclass._module.G(), 
                #_module.List.Cons(a#0, xs#0), 
                #_module.List.Cons(_module.List.head(ys#0), _module.List.tail(ys#0)))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(a#0, xs#0), 
                  #_module.List.Cons(_module.List.head(ys#0), _module.List.tail(ys#0))));
            // ----- assert line3 == line4 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(524,5)
            assert {:id "id733"} {:subsumption 0} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
                g#0, 
                #_module.List.Cons(_module.List.head(ys#0), 
                  _module.__default.append(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    #_module.List.Cons(a#0, xs#0), 
                    _module.List.tail(ys#0)))), 
              _module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  #_module.List.Cons(a#0, xs#0), 
                  #_module.List.Cons(_module.List.head(ys#0), _module.List.tail(ys#0)))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(524,5)
            ##g#0_0_0_0 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_0_0, Tclass._module.G(), $Heap);
            ##xs#0_0_0_1 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_0_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume {:id "id723"} _module.List.Cons_q(ys#0);
            assume {:id "id724"} _module.List.Cons_q(ys#0);
            ##ys#0_0_0_0 := #_module.List.Cons(_module.List.head(ys#0), _module.List.tail(ys#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_0_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              #_module.List.Cons(a#0, xs#0), 
              #_module.List.Cons(_module.List.head(ys#0), _module.List.tail(ys#0)));
            ##xs#0_0_0_0 := _module.__default.append(Tclass._module.G(), 
              $LS($LZ), 
              #_module.List.Cons(a#0, xs#0), 
              #_module.List.Cons(_module.List.head(ys#0), _module.List.tail(ys#0)));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_0_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(a#0, xs#0), 
                #_module.List.Cons(_module.List.head(ys#0), _module.List.tail(ys#0))));
            assume _module.__default.append#canCall(Tclass._module.G(), 
                #_module.List.Cons(a#0, xs#0), 
                #_module.List.Cons(_module.List.head(ys#0), _module.List.tail(ys#0)))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(a#0, xs#0), 
                  #_module.List.Cons(_module.List.head(ys#0), _module.List.tail(ys#0))));
            // ----- Hint4 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(524,5)
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(524,5)
            ##g#0_0_0_1 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_0_1, Tclass._module.G(), $Heap);
            ##xs#0_0_0_3 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_0_3, Tclass._module.List(Tclass._module.G()), $Heap);
            ##ys#0_0_0_1 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_0_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), ys#0);
            ##xs#0_0_0_2 := _module.__default.append(Tclass._module.G(), $LS($LZ), #_module.List.Cons(a#0, xs#0), ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_0_2, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.append(Tclass._module.G(), $LS($LZ), #_module.List.Cons(a#0, xs#0), ys#0));
            assume _module.__default.append#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), ys#0)
               && _module.__default.filter#canCall(g#0, 
                _module.__default.append(Tclass._module.G(), $LS($LZ), #_module.List.Cons(a#0, xs#0), ys#0));
            // ----- assert line4 == line5 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(524,5)
            assert {:id "id725"} {:subsumption 0} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  #_module.List.Cons(a#0, xs#0), 
                  #_module.List.Cons(_module.List.head(ys#0), _module.List.tail(ys#0)))), 
              _module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.append(Tclass._module.G(), $LS($LS($LZ)), #_module.List.Cons(a#0, xs#0), ys#0)));
            assume false;
        }

        assume {:id "id751"} _module.List#Equal(_module.__default.filter($LS($LZ), 
            g#0, 
            _module.__default.flatten(Tclass._module.G(), 
              $LS($LZ), 
              _module.__default.descending($LS($LZ), a#0, xs#0, ys#0))), 
          _module.__default.filter($LS($LZ), 
            g#0, 
            _module.__default.append(Tclass._module.G(), $LS($LZ), #_module.List.Cons(a#0, xs#0), ys#0)));
    }
    else
    {
        // ----- calc statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(535,5)
        // Assume Fuel Constant
        if (*)
        {
            // ----- assert wf[initial] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(535,5)
            ##g#1_0_0 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#1_0_0, Tclass._module.G(), $Heap);
            ##a#1_0_0 := a#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##a#1_0_0, Tclass._module.G(), $Heap);
            ##xs#1_0_1 := xs#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_1, Tclass._module.List(Tclass._module.G()), $Heap);
            ##ys#1_0_0 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#1_0_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.descending#canCall(a#0, xs#0, ys#0);
            ##x#1_0_0 := _module.__default.descending($LS($LZ), a#0, xs#0, ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#1_0_0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.descending($LS($LZ), a#0, xs#0, ys#0));
            ##xs#1_0_0 := _module.__default.flatten(Tclass._module.G(), 
              $LS($LZ), 
              _module.__default.descending($LS($LZ), a#0, xs#0, ys#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.flatten(Tclass._module.G(), 
                $LS($LZ), 
                _module.__default.descending($LS($LZ), a#0, xs#0, ys#0)));
            assume _module.__default.descending#canCall(a#0, xs#0, ys#0)
               && _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.descending($LS($LZ), a#0, xs#0, ys#0))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.flatten(Tclass._module.G(), 
                  $LS($LZ), 
                  _module.__default.descending($LS($LZ), a#0, xs#0, ys#0)));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(535,5)
            ##g#1_0_4_0 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#1_0_4_0, Tclass._module.G(), $Heap);
            ##a#1_0_4_0 := a#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##a#1_0_4_0, Tclass._module.G(), $Heap);
            ##xs#1_0_4_1 := xs#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_4_1, Tclass._module.List(Tclass._module.G()), $Heap);
            ##ys#1_0_4_0 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#1_0_4_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.descending#canCall(a#0, xs#0, ys#0);
            ##x#1_0_4_0 := _module.__default.descending($LS($LZ), a#0, xs#0, ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#1_0_4_0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.descending($LS($LZ), a#0, xs#0, ys#0));
            ##xs#1_0_4_0 := _module.__default.flatten(Tclass._module.G(), 
              $LS($LZ), 
              _module.__default.descending($LS($LZ), a#0, xs#0, ys#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_4_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.flatten(Tclass._module.G(), 
                $LS($LZ), 
                _module.__default.descending($LS($LZ), a#0, xs#0, ys#0)));
            assume _module.__default.descending#canCall(a#0, xs#0, ys#0)
               && _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.descending($LS($LZ), a#0, xs#0, ys#0))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.flatten(Tclass._module.G(), 
                  $LS($LZ), 
                  _module.__default.descending($LS($LZ), a#0, xs#0, ys#0)));
            // ----- Hint0 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(535,5)
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(535,5)
            ##g#1_0_4_1 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#1_0_4_1, Tclass._module.G(), $Heap);
            ##xs#1_0_4_3 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_4_3, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.sequences#canCall(ys#0);
            ##x#1_0_4_1 := #_module.List.Cons($Box(#_module.List.Cons(a#0, xs#0)), _module.__default.sequences($LS($LZ), ys#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#1_0_4_1, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.flatten#canCall(Tclass._module.G(), 
              #_module.List.Cons($Box(#_module.List.Cons(a#0, xs#0)), _module.__default.sequences($LS($LZ), ys#0)));
            ##xs#1_0_4_2 := _module.__default.flatten(Tclass._module.G(), 
              $LS($LZ), 
              #_module.List.Cons($Box(#_module.List.Cons(a#0, xs#0)), _module.__default.sequences($LS($LZ), ys#0)));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_4_2, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.flatten(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons($Box(#_module.List.Cons(a#0, xs#0)), _module.__default.sequences($LS($LZ), ys#0))));
            assume _module.__default.sequences#canCall(ys#0)
               && _module.__default.flatten#canCall(Tclass._module.G(), 
                #_module.List.Cons($Box(#_module.List.Cons(a#0, xs#0)), _module.__default.sequences($LS($LZ), ys#0)))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.flatten(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons($Box(#_module.List.Cons(a#0, xs#0)), _module.__default.sequences($LS($LZ), ys#0))));
            // ----- assert line0 == line1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(535,5)
            assert {:id "id760"} {:subsumption 0} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.flatten(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  _module.__default.descending($LS($LS($LZ)), a#0, xs#0, ys#0))), 
              _module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.flatten(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  #_module.List.Cons($Box(#_module.List.Cons(a#0, xs#0)), 
                    _module.__default.sequences($LS($LS($LZ)), ys#0)))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(535,5)
            ##g#1_0_3_0 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#1_0_3_0, Tclass._module.G(), $Heap);
            ##xs#1_0_3_1 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_3_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.sequences#canCall(ys#0);
            ##x#1_0_3_0 := #_module.List.Cons($Box(#_module.List.Cons(a#0, xs#0)), _module.__default.sequences($LS($LZ), ys#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#1_0_3_0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.flatten#canCall(Tclass._module.G(), 
              #_module.List.Cons($Box(#_module.List.Cons(a#0, xs#0)), _module.__default.sequences($LS($LZ), ys#0)));
            ##xs#1_0_3_0 := _module.__default.flatten(Tclass._module.G(), 
              $LS($LZ), 
              #_module.List.Cons($Box(#_module.List.Cons(a#0, xs#0)), _module.__default.sequences($LS($LZ), ys#0)));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_3_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.flatten(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons($Box(#_module.List.Cons(a#0, xs#0)), _module.__default.sequences($LS($LZ), ys#0))));
            assume _module.__default.sequences#canCall(ys#0)
               && _module.__default.flatten#canCall(Tclass._module.G(), 
                #_module.List.Cons($Box(#_module.List.Cons(a#0, xs#0)), _module.__default.sequences($LS($LZ), ys#0)))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.flatten(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons($Box(#_module.List.Cons(a#0, xs#0)), _module.__default.sequences($LS($LZ), ys#0))));
            // ----- Hint1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(535,5)
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(535,5)
            ##g#1_0_3_1 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#1_0_3_1, Tclass._module.G(), $Heap);
            ##xs#1_0_3_3 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_3_3, Tclass._module.List(Tclass._module.G()), $Heap);
            ##xs#1_0_3_4 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_3_4, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.sequences#canCall(ys#0);
            ##x#1_0_3_1 := _module.__default.sequences($LS($LZ), ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#1_0_3_1, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.sequences($LS($LZ), ys#0));
            ##ys#1_0_3_0 := _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), ys#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#1_0_3_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              #_module.List.Cons(a#0, xs#0), 
              _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), ys#0)));
            ##xs#1_0_3_2 := _module.__default.append(Tclass._module.G(), 
              $LS($LZ), 
              #_module.List.Cons(a#0, xs#0), 
              _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), ys#0)));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_3_2, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(a#0, xs#0), 
                _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), ys#0))));
            assume _module.__default.sequences#canCall(ys#0)
               && _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.sequences($LS($LZ), ys#0))
               && _module.__default.append#canCall(Tclass._module.G(), 
                #_module.List.Cons(a#0, xs#0), 
                _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), ys#0)))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(a#0, xs#0), 
                  _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), ys#0))));
            // ----- assert line1 == line2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(535,5)
            assert {:id "id759"} {:subsumption 0} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.flatten(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  #_module.List.Cons($Box(#_module.List.Cons(a#0, xs#0)), 
                    _module.__default.sequences($LS($LS($LZ)), ys#0)))), 
              _module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  #_module.List.Cons(a#0, xs#0), 
                  _module.__default.flatten(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    _module.__default.sequences($LS($LS($LZ)), ys#0)))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(535,5)
            ##g#1_0_2_0 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#1_0_2_0, Tclass._module.G(), $Heap);
            ##xs#1_0_2_1 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_2_1, Tclass._module.List(Tclass._module.G()), $Heap);
            ##xs#1_0_2_2 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_2_2, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.sequences#canCall(ys#0);
            ##x#1_0_2_0 := _module.__default.sequences($LS($LZ), ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#1_0_2_0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.sequences($LS($LZ), ys#0));
            ##ys#1_0_2_0 := _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), ys#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#1_0_2_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              #_module.List.Cons(a#0, xs#0), 
              _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), ys#0)));
            ##xs#1_0_2_0 := _module.__default.append(Tclass._module.G(), 
              $LS($LZ), 
              #_module.List.Cons(a#0, xs#0), 
              _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), ys#0)));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_2_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(a#0, xs#0), 
                _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), ys#0))));
            assume _module.__default.sequences#canCall(ys#0)
               && _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.sequences($LS($LZ), ys#0))
               && _module.__default.append#canCall(Tclass._module.G(), 
                #_module.List.Cons(a#0, xs#0), 
                _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), ys#0)))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(a#0, xs#0), 
                  _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), ys#0))));
            // ----- Hint2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(535,5)
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(539,22)
            // TrCallStmt: Before ProcessCallStmt
            assume true;
            // ProcessCallStmt: CheckSubrange
            g##1_0_2_0 := g#0;
            assume true;
            // ProcessCallStmt: CheckSubrange
            xs##1_0_2_0 := #_module.List.Cons(a#0, xs#0);
            ##xs#1_0_2_3 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_2_3, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.sequences#canCall(ys#0);
            ##x#1_0_2_1 := _module.__default.sequences($LS($LZ), ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#1_0_2_1, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.sequences($LS($LZ), ys#0));
            assume _module.__default.sequences#canCall(ys#0)
               && _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.sequences($LS($LZ), ys#0));
            // ProcessCallStmt: CheckSubrange
            ys##1_0_2_0 := _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), ys#0));
            call {:id "id757"} Call$$_module.__default.filter__append(g##1_0_2_0, xs##1_0_2_0, ys##1_0_2_0);
            // TrCallStmt: After ProcessCallStmt
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(535,5)
            ##g#1_0_2_1 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#1_0_2_1, Tclass._module.G(), $Heap);
            ##xs#1_0_2_5 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_2_5, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, #_module.List.Cons(a#0, xs#0));
            ##xs#1_0_2_4 := _module.__default.filter($LS($LZ), g#0, #_module.List.Cons(a#0, xs#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_2_4, Tclass._module.List(Tclass._module.G()), $Heap);
            ##g#1_0_2_2 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#1_0_2_2, Tclass._module.G(), $Heap);
            ##xs#1_0_2_7 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_2_7, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.sequences#canCall(ys#0);
            ##x#1_0_2_2 := _module.__default.sequences($LS($LZ), ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#1_0_2_2, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.sequences($LS($LZ), ys#0));
            ##xs#1_0_2_6 := _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), ys#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_2_6, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), ys#0)));
            ##ys#1_0_2_1 := _module.__default.filter($LS($LZ), 
              g#0, 
              _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), ys#0)));
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#1_0_2_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              _module.__default.filter($LS($LZ), g#0, #_module.List.Cons(a#0, xs#0)), 
              _module.__default.filter($LS($LZ), 
                g#0, 
                _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), ys#0))));
            assume _module.__default.filter#canCall(g#0, #_module.List.Cons(a#0, xs#0))
               && 
              _module.__default.sequences#canCall(ys#0)
               && _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.sequences($LS($LZ), ys#0))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), ys#0)))
               && _module.__default.append#canCall(Tclass._module.G(), 
                _module.__default.filter($LS($LZ), g#0, #_module.List.Cons(a#0, xs#0)), 
                _module.__default.filter($LS($LZ), 
                  g#0, 
                  _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), ys#0))));
            // ----- assert line2 == line3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(535,5)
            assert {:id "id758"} {:subsumption 0} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  #_module.List.Cons(a#0, xs#0), 
                  _module.__default.flatten(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    _module.__default.sequences($LS($LS($LZ)), ys#0)))), 
              _module.__default.append(Tclass._module.G(), 
                $LS($LS($LZ)), 
                _module.__default.filter($LS($LS($LZ)), g#0, #_module.List.Cons(a#0, xs#0)), 
                _module.__default.filter($LS($LS($LZ)), 
                  g#0, 
                  _module.__default.flatten(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    _module.__default.sequences($LS($LS($LZ)), ys#0)))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(535,5)
            ##g#1_0_1_0 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#1_0_1_0, Tclass._module.G(), $Heap);
            ##xs#1_0_1_1 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_1_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, #_module.List.Cons(a#0, xs#0));
            ##xs#1_0_1_0 := _module.__default.filter($LS($LZ), g#0, #_module.List.Cons(a#0, xs#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_1_0, Tclass._module.List(Tclass._module.G()), $Heap);
            ##g#1_0_1_1 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#1_0_1_1, Tclass._module.G(), $Heap);
            ##xs#1_0_1_3 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_1_3, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.sequences#canCall(ys#0);
            ##x#1_0_1_0 := _module.__default.sequences($LS($LZ), ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#1_0_1_0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.sequences($LS($LZ), ys#0));
            ##xs#1_0_1_2 := _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), ys#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_1_2, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), ys#0)));
            ##ys#1_0_1_0 := _module.__default.filter($LS($LZ), 
              g#0, 
              _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), ys#0)));
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#1_0_1_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              _module.__default.filter($LS($LZ), g#0, #_module.List.Cons(a#0, xs#0)), 
              _module.__default.filter($LS($LZ), 
                g#0, 
                _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), ys#0))));
            assume _module.__default.filter#canCall(g#0, #_module.List.Cons(a#0, xs#0))
               && 
              _module.__default.sequences#canCall(ys#0)
               && _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.sequences($LS($LZ), ys#0))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), ys#0)))
               && _module.__default.append#canCall(Tclass._module.G(), 
                _module.__default.filter($LS($LZ), g#0, #_module.List.Cons(a#0, xs#0)), 
                _module.__default.filter($LS($LZ), 
                  g#0, 
                  _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), ys#0))));
            // ----- Hint3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(535,5)
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(541,25)
            // TrCallStmt: Before ProcessCallStmt
            assume true;
            // ProcessCallStmt: CheckSubrange
            g##1_0_1_0 := g#0;
            assume true;
            // ProcessCallStmt: CheckSubrange
            xs##1_0_1_0 := ys#0;
            assert {:id "id754"} DtRank(xs##1_0_1_0) <= DtRank(ys#0);
            call {:id "id755"} Call$$_module.__default.stable__sequences(g##1_0_1_0, xs##1_0_1_0);
            // TrCallStmt: After ProcessCallStmt
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(535,5)
            ##g#1_0_1_2 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#1_0_1_2, Tclass._module.G(), $Heap);
            ##xs#1_0_1_5 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_1_5, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, #_module.List.Cons(a#0, xs#0));
            ##xs#1_0_1_4 := _module.__default.filter($LS($LZ), g#0, #_module.List.Cons(a#0, xs#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_1_4, Tclass._module.List(Tclass._module.G()), $Heap);
            ##g#1_0_1_3 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#1_0_1_3, Tclass._module.G(), $Heap);
            ##xs#1_0_1_6 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_1_6, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, ys#0);
            ##ys#1_0_1_1 := _module.__default.filter($LS($LZ), g#0, ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#1_0_1_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              _module.__default.filter($LS($LZ), g#0, #_module.List.Cons(a#0, xs#0)), 
              _module.__default.filter($LS($LZ), g#0, ys#0));
            assume _module.__default.filter#canCall(g#0, #_module.List.Cons(a#0, xs#0))
               && _module.__default.filter#canCall(g#0, ys#0)
               && _module.__default.append#canCall(Tclass._module.G(), 
                _module.__default.filter($LS($LZ), g#0, #_module.List.Cons(a#0, xs#0)), 
                _module.__default.filter($LS($LZ), g#0, ys#0));
            // ----- assert line3 == line4 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(535,5)
            assert {:id "id756"} {:subsumption 0} _module.List#Equal(_module.__default.append(Tclass._module.G(), 
                $LS($LS($LZ)), 
                _module.__default.filter($LS($LS($LZ)), g#0, #_module.List.Cons(a#0, xs#0)), 
                _module.__default.filter($LS($LS($LZ)), 
                  g#0, 
                  _module.__default.flatten(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    _module.__default.sequences($LS($LS($LZ)), ys#0)))), 
              _module.__default.append(Tclass._module.G(), 
                $LS($LS($LZ)), 
                _module.__default.filter($LS($LS($LZ)), g#0, #_module.List.Cons(a#0, xs#0)), 
                _module.__default.filter($LS($LS($LZ)), g#0, ys#0)));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(535,5)
            ##g#1_0_0_0 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#1_0_0_0, Tclass._module.G(), $Heap);
            ##xs#1_0_0_1 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_0_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, #_module.List.Cons(a#0, xs#0));
            ##xs#1_0_0_0 := _module.__default.filter($LS($LZ), g#0, #_module.List.Cons(a#0, xs#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_0_0, Tclass._module.List(Tclass._module.G()), $Heap);
            ##g#1_0_0_1 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#1_0_0_1, Tclass._module.G(), $Heap);
            ##xs#1_0_0_2 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_0_2, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, ys#0);
            ##ys#1_0_0_0 := _module.__default.filter($LS($LZ), g#0, ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#1_0_0_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              _module.__default.filter($LS($LZ), g#0, #_module.List.Cons(a#0, xs#0)), 
              _module.__default.filter($LS($LZ), g#0, ys#0));
            assume _module.__default.filter#canCall(g#0, #_module.List.Cons(a#0, xs#0))
               && _module.__default.filter#canCall(g#0, ys#0)
               && _module.__default.append#canCall(Tclass._module.G(), 
                _module.__default.filter($LS($LZ), g#0, #_module.List.Cons(a#0, xs#0)), 
                _module.__default.filter($LS($LZ), g#0, ys#0));
            // ----- Hint4 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(535,5)
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(543,22)
            // TrCallStmt: Before ProcessCallStmt
            assume true;
            // ProcessCallStmt: CheckSubrange
            g##1_0_0_0 := g#0;
            assume true;
            // ProcessCallStmt: CheckSubrange
            xs##1_0_0_0 := #_module.List.Cons(a#0, xs#0);
            assume true;
            // ProcessCallStmt: CheckSubrange
            ys##1_0_0_0 := ys#0;
            call {:id "id752"} Call$$_module.__default.filter__append(g##1_0_0_0, xs##1_0_0_0, ys##1_0_0_0);
            // TrCallStmt: After ProcessCallStmt
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(535,5)
            ##g#1_0_0_2 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#1_0_0_2, Tclass._module.G(), $Heap);
            ##xs#1_0_0_4 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_0_4, Tclass._module.List(Tclass._module.G()), $Heap);
            ##ys#1_0_0_1 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#1_0_0_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), ys#0);
            ##xs#1_0_0_3 := _module.__default.append(Tclass._module.G(), $LS($LZ), #_module.List.Cons(a#0, xs#0), ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_0_3, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.append(Tclass._module.G(), $LS($LZ), #_module.List.Cons(a#0, xs#0), ys#0));
            assume _module.__default.append#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), ys#0)
               && _module.__default.filter#canCall(g#0, 
                _module.__default.append(Tclass._module.G(), $LS($LZ), #_module.List.Cons(a#0, xs#0), ys#0));
            // ----- assert line4 == line5 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(535,5)
            assert {:id "id753"} {:subsumption 0} _module.List#Equal(_module.__default.append(Tclass._module.G(), 
                $LS($LS($LZ)), 
                _module.__default.filter($LS($LS($LZ)), g#0, #_module.List.Cons(a#0, xs#0)), 
                _module.__default.filter($LS($LS($LZ)), g#0, ys#0)), 
              _module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.append(Tclass._module.G(), $LS($LS($LZ)), #_module.List.Cons(a#0, xs#0), ys#0)));
            assume false;
        }

        assume {:id "id761"} _module.List#Equal(_module.__default.filter($LS($LZ), 
            g#0, 
            _module.__default.flatten(Tclass._module.G(), 
              $LS($LZ), 
              _module.__default.descending($LS($LZ), a#0, xs#0, ys#0))), 
          _module.__default.filter($LS($LZ), 
            g#0, 
            _module.__default.append(Tclass._module.G(), $LS($LZ), #_module.List.Cons(a#0, xs#0), ys#0)));
    }
}



procedure {:verboseName "stable_ascending (well-formedness)"} CheckWellFormed$$_module.__default.stable__ascending(g#0: Box
       where $IsBox(g#0, Tclass._module.G()) && $IsAllocBox(g#0, Tclass._module.G(), $Heap), 
    a#0: Box
       where $IsBox(a#0, Tclass._module.G()) && $IsAllocBox(a#0, Tclass._module.G(), $Heap), 
    xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(xs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(xs#0), 
    ys#0: DatatypeType
       where $Is(ys#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(ys#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(ys#0));
  free requires 5 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "stable_ascending (call)"} Call$$_module.__default.stable__ascending(g#0: Box
       where $IsBox(g#0, Tclass._module.G()) && $IsAllocBox(g#0, Tclass._module.G(), $Heap), 
    a#0: Box
       where $IsBox(a#0, Tclass._module.G()) && $IsAllocBox(a#0, Tclass._module.G(), $Heap), 
    xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(xs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(xs#0), 
    ys#0: DatatypeType
       where $Is(ys#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(ys#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(ys#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#_module.List(_module.__default.filter($LS($LZ), 
        g#0, 
        _module.__default.flatten(Tclass._module.G(), 
          $LS($LZ), 
          _module.__default.ascending($LS($LZ), a#0, xs#0, ys#0))))
     && $IsA#_module.List(_module.__default.filter($LS($LZ), 
        g#0, 
        _module.__default.append(Tclass._module.G(), 
          $LS($LZ), 
          _module.__default.reverse(Tclass._module.G(), 
            $LS($LZ), 
            #_module.List.Cons(a#0, xs#0), 
            Lit(#_module.List.Nil())), 
          ys#0)))
     && 
    _module.__default.ascending#canCall(a#0, xs#0, ys#0)
     && _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.ascending($LS($LZ), a#0, xs#0, ys#0))
     && _module.__default.filter#canCall(g#0, 
      _module.__default.flatten(Tclass._module.G(), 
        $LS($LZ), 
        _module.__default.ascending($LS($LZ), a#0, xs#0, ys#0)))
     && 
    _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), Lit(#_module.List.Nil()))
     && _module.__default.append#canCall(Tclass._module.G(), 
      _module.__default.reverse(Tclass._module.G(), 
        $LS($LZ), 
        #_module.List.Cons(a#0, xs#0), 
        Lit(#_module.List.Nil())), 
      ys#0)
     && _module.__default.filter#canCall(g#0, 
      _module.__default.append(Tclass._module.G(), 
        $LS($LZ), 
        _module.__default.reverse(Tclass._module.G(), 
          $LS($LZ), 
          #_module.List.Cons(a#0, xs#0), 
          Lit(#_module.List.Nil())), 
        ys#0));
  ensures {:id "id763"} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
      g#0, 
      _module.__default.flatten(Tclass._module.G(), 
        $LS($LS($LZ)), 
        _module.__default.ascending($LS($LS($LZ)), a#0, xs#0, ys#0))), 
    _module.__default.filter($LS($LS($LZ)), 
      g#0, 
      _module.__default.append(Tclass._module.G(), 
        $LS($LS($LZ)), 
        _module.__default.reverse(Tclass._module.G(), 
          $LS($LS($LZ)), 
          #_module.List.Cons(a#0, xs#0), 
          Lit(#_module.List.Nil())), 
        ys#0)));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "stable_ascending (correctness)"} Impl$$_module.__default.stable__ascending(g#0: Box
       where $IsBox(g#0, Tclass._module.G()) && $IsAllocBox(g#0, Tclass._module.G(), $Heap), 
    a#0: Box
       where $IsBox(a#0, Tclass._module.G()) && $IsAllocBox(a#0, Tclass._module.G(), $Heap), 
    xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(xs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(xs#0), 
    ys#0: DatatypeType
       where $Is(ys#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(ys#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(ys#0))
   returns ($_reverifyPost: bool);
  free requires 5 == $FunctionContextHeight;
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#_module.List(_module.__default.filter($LS($LZ), 
        g#0, 
        _module.__default.flatten(Tclass._module.G(), 
          $LS($LZ), 
          _module.__default.ascending($LS($LZ), a#0, xs#0, ys#0))))
     && $IsA#_module.List(_module.__default.filter($LS($LZ), 
        g#0, 
        _module.__default.append(Tclass._module.G(), 
          $LS($LZ), 
          _module.__default.reverse(Tclass._module.G(), 
            $LS($LZ), 
            #_module.List.Cons(a#0, xs#0), 
            Lit(#_module.List.Nil())), 
          ys#0)))
     && 
    _module.__default.ascending#canCall(a#0, xs#0, ys#0)
     && _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.ascending($LS($LZ), a#0, xs#0, ys#0))
     && _module.__default.filter#canCall(g#0, 
      _module.__default.flatten(Tclass._module.G(), 
        $LS($LZ), 
        _module.__default.ascending($LS($LZ), a#0, xs#0, ys#0)))
     && 
    _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), Lit(#_module.List.Nil()))
     && _module.__default.append#canCall(Tclass._module.G(), 
      _module.__default.reverse(Tclass._module.G(), 
        $LS($LZ), 
        #_module.List.Cons(a#0, xs#0), 
        Lit(#_module.List.Nil())), 
      ys#0)
     && _module.__default.filter#canCall(g#0, 
      _module.__default.append(Tclass._module.G(), 
        $LS($LZ), 
        _module.__default.reverse(Tclass._module.G(), 
          $LS($LZ), 
          #_module.List.Cons(a#0, xs#0), 
          Lit(#_module.List.Nil())), 
        ys#0));
  ensures {:id "id764"} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
      g#0, 
      _module.__default.flatten(Tclass._module.G(), 
        $LS($LS($LZ)), 
        _module.__default.ascending($LS($LS($LZ)), a#0, xs#0, ys#0))), 
    _module.__default.filter($LS($LS($LZ)), 
      g#0, 
      _module.__default.append(Tclass._module.G(), 
        $LS($LS($LZ)), 
        _module.__default.reverse(Tclass._module.G(), 
          $LS($LS($LZ)), 
          #_module.List.Cons(a#0, xs#0), 
          Lit(#_module.List.Nil())), 
        ys#0)));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "stable_ascending (correctness)"} Impl$$_module.__default.stable__ascending(g#0: Box, a#0: Box, xs#0: DatatypeType, ys#0: DatatypeType)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $initHeapForallStmt#0: Heap;
  var ##a#1: Box;
  var ##b#0: Box;
  var ##g#0_0_0_0: Box;
  var ##xs#0_0_0_0: DatatypeType;
  var ##xs#0_0_0_1: DatatypeType;
  var ##xs#0_0_0_2: DatatypeType;
  var ##acc#0_0_0_0: DatatypeType;
  var ##ys#0_0_0_0: DatatypeType;
  var ##g#0_0_0_1: Box;
  var ##xs#0_0_0_3: DatatypeType;
  var ##xs#0_0_0_4: DatatypeType;
  var ##xs#0_0_0_5: DatatypeType;
  var ##acc#0_0_0_1: DatatypeType;
  var ##ys#0_0_0_1: DatatypeType;
  var ##g#0_0_1_0: Box;
  var ##xs#0_0_1_0: DatatypeType;
  var ##xs#0_0_1_1: DatatypeType;
  var ##xs#0_0_1_2: DatatypeType;
  var ##acc#0_0_1_0: DatatypeType;
  var ##ys#0_0_1_0: DatatypeType;
  var g##0_0_1_0: Box;
  var b##0_0_1_0: Box;
  var xs##0_0_1_0: DatatypeType;
  var ys##0_0_1_0: DatatypeType;
  var ##g#0_0_1_1: Box;
  var ##xs#0_0_1_3: DatatypeType;
  var ##xs#0_0_1_4: DatatypeType;
  var ##xs#0_0_1_5: DatatypeType;
  var ##acc#0_0_1_1: DatatypeType;
  var ##ys#0_0_1_1: DatatypeType;
  var ##g#0_0_2_0: Box;
  var ##xs#0_0_2_0: DatatypeType;
  var ##xs#0_0_2_1: DatatypeType;
  var ##xs#0_0_2_2: DatatypeType;
  var ##acc#0_0_2_0: DatatypeType;
  var ##ys#0_0_2_0: DatatypeType;
  var ##g#0_0_2_1: Box;
  var ##xs#0_0_2_3: DatatypeType;
  var ##xs#0_0_2_4: DatatypeType;
  var ##xs#0_0_2_5: DatatypeType;
  var ##acc#0_0_2_1: DatatypeType;
  var ##ys#0_0_2_1: DatatypeType;
  var ##g#0_0_3_0: Box;
  var ##xs#0_0_3_0: DatatypeType;
  var ##x#0_0_3_0: DatatypeType;
  var ##a#0_0_3_0: Box;
  var ##xs#0_0_3_1: DatatypeType;
  var ##ys#0_0_3_0: DatatypeType;
  var g##0_0_3_0: Box;
  var a##0_0_3_0: Box;
  var xs##0_0_3_0: DatatypeType;
  var ys##0_0_3_0: DatatypeType;
  var ##g#0_0_3_1: Box;
  var ##xs#0_0_3_2: DatatypeType;
  var ##xs#0_0_3_3: DatatypeType;
  var ##xs#0_0_3_4: DatatypeType;
  var ##acc#0_0_3_0: DatatypeType;
  var ##ys#0_0_3_1: DatatypeType;
  var ##g#0_0_4_0: Box;
  var ##xs#0_0_4_0: DatatypeType;
  var ##x#0_0_4_0: DatatypeType;
  var ##a#0_0_4_0: Box;
  var ##xs#0_0_4_1: DatatypeType;
  var ##ys#0_0_4_0: DatatypeType;
  var ##g#0_0_4_1: Box;
  var ##xs#0_0_4_2: DatatypeType;
  var ##x#0_0_4_1: DatatypeType;
  var ##a#0_0_4_1: Box;
  var ##xs#0_0_4_3: DatatypeType;
  var ##ys#0_0_4_1: DatatypeType;
  var ##g#0_0_0: Box;
  var ##xs#0_0_0: DatatypeType;
  var ##x#0_0_0: DatatypeType;
  var ##a#0_0_0: Box;
  var ##xs#0_0_1: DatatypeType;
  var ##ys#0_0_0: DatatypeType;
  var ##xs#1_0_0_0: DatatypeType;
  var ##g#1_0_0_0: Box;
  var ##xs#1_0_0_1: DatatypeType;
  var ##xs#1_0_0_2: DatatypeType;
  var ##acc#1_0_0_0: DatatypeType;
  var ##ys#1_0_0_0: DatatypeType;
  var ##g#1_0_0_1: Box;
  var ##xs#1_0_0_3: DatatypeType;
  var g##1_0_0_0: Box;
  var xs##1_0_0_0: DatatypeType;
  var ##xs#1_0_0_4: DatatypeType;
  var ##acc#1_0_0_1: DatatypeType;
  var ys##1_0_0_0: DatatypeType;
  var ##g#1_0_0_2: Box;
  var ##xs#1_0_0_5: DatatypeType;
  var ##xs#1_0_0_6: DatatypeType;
  var ##xs#1_0_0_7: DatatypeType;
  var ##acc#1_0_0_2: DatatypeType;
  var ##ys#1_0_0_1: DatatypeType;
  var ##xs#1_0_1_0: DatatypeType;
  var ##g#1_0_1_0: Box;
  var ##xs#1_0_1_1: DatatypeType;
  var ##xs#1_0_1_2: DatatypeType;
  var ##acc#1_0_1_0: DatatypeType;
  var ##ys#1_0_1_0: DatatypeType;
  var ##g#1_0_1_1: Box;
  var ##xs#1_0_1_3: DatatypeType;
  var ##x#1_0_1_0: DatatypeType;
  var ##xs#1_0_1_4: DatatypeType;
  var g##1_0_1_0: Box;
  var xs##1_0_1_0: DatatypeType;
  var ##xs#1_0_1_5: DatatypeType;
  var ##g#1_0_1_2: Box;
  var ##xs#1_0_1_6: DatatypeType;
  var ##xs#1_0_1_7: DatatypeType;
  var ##acc#1_0_1_1: DatatypeType;
  var ##ys#1_0_1_1: DatatypeType;
  var ##g#1_0_1_3: Box;
  var ##xs#1_0_1_8: DatatypeType;
  var ##g#1_0_2_0: Box;
  var ##xs#1_0_2_0: DatatypeType;
  var ##xs#1_0_2_1: DatatypeType;
  var ##xs#1_0_2_2: DatatypeType;
  var ##acc#1_0_2_0: DatatypeType;
  var ##ys#1_0_2_0: DatatypeType;
  var ##x#1_0_2_0: DatatypeType;
  var ##xs#1_0_2_3: DatatypeType;
  var g##1_0_2_0: Box;
  var xs##1_0_2_0: DatatypeType;
  var ##xs#1_0_2_4: DatatypeType;
  var ##acc#1_0_2_1: DatatypeType;
  var ys##1_0_2_0: DatatypeType;
  var ##x#1_0_2_1: DatatypeType;
  var ##xs#1_0_2_5: DatatypeType;
  var ##xs#1_0_2_6: DatatypeType;
  var ##g#1_0_2_1: Box;
  var ##xs#1_0_2_7: DatatypeType;
  var ##xs#1_0_2_8: DatatypeType;
  var ##acc#1_0_2_2: DatatypeType;
  var ##ys#1_0_2_1: DatatypeType;
  var ##g#1_0_2_2: Box;
  var ##xs#1_0_2_9: DatatypeType;
  var ##x#1_0_2_2: DatatypeType;
  var ##xs#1_0_2_10: DatatypeType;
  var ##g#1_0_3_0: Box;
  var ##xs#1_0_3_0: DatatypeType;
  var ##x#1_0_3_0: DatatypeType;
  var ##xs#1_0_3_1: DatatypeType;
  var ##acc#1_0_3_0: DatatypeType;
  var ##xs#1_0_3_2: DatatypeType;
  var ##g#1_0_3_1: Box;
  var ##xs#1_0_3_3: DatatypeType;
  var ##xs#1_0_3_4: DatatypeType;
  var ##xs#1_0_3_5: DatatypeType;
  var ##acc#1_0_3_1: DatatypeType;
  var ##ys#1_0_3_0: DatatypeType;
  var ##x#1_0_3_1: DatatypeType;
  var ##xs#1_0_3_6: DatatypeType;
  var ##g#1_0_4_0: Box;
  var ##xs#1_0_4_0: DatatypeType;
  var ##x#1_0_4_0: DatatypeType;
  var ##a#1_0_4_0: Box;
  var ##xs#1_0_4_1: DatatypeType;
  var ##ys#1_0_4_0: DatatypeType;
  var ##g#1_0_4_1: Box;
  var ##xs#1_0_4_2: DatatypeType;
  var ##x#1_0_4_1: DatatypeType;
  var ##xs#1_0_4_3: DatatypeType;
  var ##acc#1_0_4_0: DatatypeType;
  var ##xs#1_0_4_4: DatatypeType;
  var ##g#1_0_0: Box;
  var ##xs#1_0_0: DatatypeType;
  var ##x#1_0_0: DatatypeType;
  var ##a#1_0_0: Box;
  var ##xs#1_0_1: DatatypeType;
  var ##ys#1_0_0: DatatypeType;

    // AddMethodImpl: stable_ascending, Impl$$_module.__default.stable__ascending
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume $IsA#_module.List(xs#0);
    assume $IsA#_module.List(ys#0);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#xs0#0: DatatypeType, $ih#ys0#0: DatatypeType :: 
      { _module.__default.append(Tclass._module.G(), 
          $LS($LZ), 
          _module.__default.reverse(Tclass._module.G(), 
            $LS($LZ), 
            #_module.List.Cons(a#0, $ih#xs0#0), 
            Lit(#_module.List.Nil())), 
          $ih#ys0#0) } 
        { _module.__default.ascending($LS($LZ), a#0, $ih#xs0#0, $ih#ys0#0) } 
      $Is($ih#xs0#0, Tclass._module.List(Tclass._module.G()))
           && $Is($ih#ys0#0, Tclass._module.List(Tclass._module.G()))
           && Lit(true)
           && DtRank($ih#ys0#0) < DtRank(ys#0)
         ==> _module.List#Equal(_module.__default.filter($LS($LZ), 
            g#0, 
            _module.__default.flatten(Tclass._module.G(), 
              $LS($LZ), 
              _module.__default.ascending($LS($LZ), a#0, $ih#xs0#0, $ih#ys0#0))), 
          _module.__default.filter($LS($LZ), 
            g#0, 
            _module.__default.append(Tclass._module.G(), 
              $LS($LZ), 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(a#0, $ih#xs0#0), 
                Lit(#_module.List.Nil())), 
              $ih#ys0#0))));
    $_reverifyPost := false;
    // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(553,3)
    if (_module.List.Cons_q(ys#0))
    {
        ##a#1 := a#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##a#1, Tclass._module.G(), $Heap);
        assert {:id "id765"} _module.List.Cons_q(ys#0);
        ##b#0 := _module.List.head(ys#0);
        // assume allocatedness for argument to function
        assume $IsAllocBox(##b#0, Tclass._module.G(), $Heap);
        assume _module.__default.Below#canCall(a#0, _module.List.head(ys#0));
    }

    assume _module.List.Cons_q(ys#0)
       ==> _module.__default.Below#canCall(a#0, _module.List.head(ys#0));
    if (_module.List.Cons_q(ys#0)
       && _module.__default.Below(a#0, _module.List.head(ys#0)))
    {
        // ----- calc statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(554,5)
        // Assume Fuel Constant
        if (*)
        {
            // ----- assert wf[initial] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(554,5)
            ##g#0_0_0 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_0, Tclass._module.G(), $Heap);
            ##a#0_0_0 := a#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##a#0_0_0, Tclass._module.G(), $Heap);
            ##xs#0_0_1 := xs#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_1, Tclass._module.List(Tclass._module.G()), $Heap);
            ##ys#0_0_0 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.ascending#canCall(a#0, xs#0, ys#0);
            ##x#0_0_0 := _module.__default.ascending($LS($LZ), a#0, xs#0, ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#0_0_0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.ascending($LS($LZ), a#0, xs#0, ys#0));
            ##xs#0_0_0 := _module.__default.flatten(Tclass._module.G(), 
              $LS($LZ), 
              _module.__default.ascending($LS($LZ), a#0, xs#0, ys#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.flatten(Tclass._module.G(), 
                $LS($LZ), 
                _module.__default.ascending($LS($LZ), a#0, xs#0, ys#0)));
            assume _module.__default.ascending#canCall(a#0, xs#0, ys#0)
               && _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.ascending($LS($LZ), a#0, xs#0, ys#0))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.flatten(Tclass._module.G(), 
                  $LS($LZ), 
                  _module.__default.ascending($LS($LZ), a#0, xs#0, ys#0)));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(554,5)
            ##g#0_0_4_0 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_4_0, Tclass._module.G(), $Heap);
            ##a#0_0_4_0 := a#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##a#0_0_4_0, Tclass._module.G(), $Heap);
            ##xs#0_0_4_1 := xs#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_4_1, Tclass._module.List(Tclass._module.G()), $Heap);
            ##ys#0_0_4_0 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_4_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.ascending#canCall(a#0, xs#0, ys#0);
            ##x#0_0_4_0 := _module.__default.ascending($LS($LZ), a#0, xs#0, ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#0_0_4_0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.ascending($LS($LZ), a#0, xs#0, ys#0));
            ##xs#0_0_4_0 := _module.__default.flatten(Tclass._module.G(), 
              $LS($LZ), 
              _module.__default.ascending($LS($LZ), a#0, xs#0, ys#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_4_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.flatten(Tclass._module.G(), 
                $LS($LZ), 
                _module.__default.ascending($LS($LZ), a#0, xs#0, ys#0)));
            assume _module.__default.ascending#canCall(a#0, xs#0, ys#0)
               && _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.ascending($LS($LZ), a#0, xs#0, ys#0))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.flatten(Tclass._module.G(), 
                  $LS($LZ), 
                  _module.__default.ascending($LS($LZ), a#0, xs#0, ys#0)));
            // ----- Hint0 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(554,5)
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(554,5)
            ##g#0_0_4_1 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_4_1, Tclass._module.G(), $Heap);
            assert {:id "id791"} _module.List.Cons_q(ys#0);
            ##a#0_0_4_1 := _module.List.head(ys#0);
            // assume allocatedness for argument to function
            assume $IsAllocBox(##a#0_0_4_1, Tclass._module.G(), $Heap);
            ##xs#0_0_4_3 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_4_3, Tclass._module.List(Tclass._module.G()), $Heap);
            assert {:id "id792"} _module.List.Cons_q(ys#0);
            ##ys#0_0_4_1 := _module.List.tail(ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_4_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.ascending#canCall(_module.List.head(ys#0), #_module.List.Cons(a#0, xs#0), _module.List.tail(ys#0));
            ##x#0_0_4_1 := _module.__default.ascending($LS($LZ), 
              _module.List.head(ys#0), 
              #_module.List.Cons(a#0, xs#0), 
              _module.List.tail(ys#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#0_0_4_1, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.flatten#canCall(Tclass._module.G(), 
              _module.__default.ascending($LS($LZ), 
                _module.List.head(ys#0), 
                #_module.List.Cons(a#0, xs#0), 
                _module.List.tail(ys#0)));
            ##xs#0_0_4_2 := _module.__default.flatten(Tclass._module.G(), 
              $LS($LZ), 
              _module.__default.ascending($LS($LZ), 
                _module.List.head(ys#0), 
                #_module.List.Cons(a#0, xs#0), 
                _module.List.tail(ys#0)));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_4_2, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.flatten(Tclass._module.G(), 
                $LS($LZ), 
                _module.__default.ascending($LS($LZ), 
                  _module.List.head(ys#0), 
                  #_module.List.Cons(a#0, xs#0), 
                  _module.List.tail(ys#0))));
            assume _module.__default.ascending#canCall(_module.List.head(ys#0), #_module.List.Cons(a#0, xs#0), _module.List.tail(ys#0))
               && _module.__default.flatten#canCall(Tclass._module.G(), 
                _module.__default.ascending($LS($LZ), 
                  _module.List.head(ys#0), 
                  #_module.List.Cons(a#0, xs#0), 
                  _module.List.tail(ys#0)))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.flatten(Tclass._module.G(), 
                  $LS($LZ), 
                  _module.__default.ascending($LS($LZ), 
                    _module.List.head(ys#0), 
                    #_module.List.Cons(a#0, xs#0), 
                    _module.List.tail(ys#0))));
            // ----- assert line0 == line1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(554,5)
            assert {:id "id793"} {:subsumption 0} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.flatten(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  _module.__default.ascending($LS($LS($LZ)), a#0, xs#0, ys#0))), 
              _module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.flatten(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  _module.__default.ascending($LS($LS($LZ)), 
                    _module.List.head(ys#0), 
                    #_module.List.Cons(a#0, xs#0), 
                    _module.List.tail(ys#0)))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(554,5)
            ##g#0_0_3_0 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_3_0, Tclass._module.G(), $Heap);
            assume {:id "id782"} _module.List.Cons_q(ys#0);
            ##a#0_0_3_0 := _module.List.head(ys#0);
            // assume allocatedness for argument to function
            assume $IsAllocBox(##a#0_0_3_0, Tclass._module.G(), $Heap);
            ##xs#0_0_3_1 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_3_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume {:id "id783"} _module.List.Cons_q(ys#0);
            ##ys#0_0_3_0 := _module.List.tail(ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_3_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.ascending#canCall(_module.List.head(ys#0), #_module.List.Cons(a#0, xs#0), _module.List.tail(ys#0));
            ##x#0_0_3_0 := _module.__default.ascending($LS($LZ), 
              _module.List.head(ys#0), 
              #_module.List.Cons(a#0, xs#0), 
              _module.List.tail(ys#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#0_0_3_0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.flatten#canCall(Tclass._module.G(), 
              _module.__default.ascending($LS($LZ), 
                _module.List.head(ys#0), 
                #_module.List.Cons(a#0, xs#0), 
                _module.List.tail(ys#0)));
            ##xs#0_0_3_0 := _module.__default.flatten(Tclass._module.G(), 
              $LS($LZ), 
              _module.__default.ascending($LS($LZ), 
                _module.List.head(ys#0), 
                #_module.List.Cons(a#0, xs#0), 
                _module.List.tail(ys#0)));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_3_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.flatten(Tclass._module.G(), 
                $LS($LZ), 
                _module.__default.ascending($LS($LZ), 
                  _module.List.head(ys#0), 
                  #_module.List.Cons(a#0, xs#0), 
                  _module.List.tail(ys#0))));
            assume _module.__default.ascending#canCall(_module.List.head(ys#0), #_module.List.Cons(a#0, xs#0), _module.List.tail(ys#0))
               && _module.__default.flatten#canCall(Tclass._module.G(), 
                _module.__default.ascending($LS($LZ), 
                  _module.List.head(ys#0), 
                  #_module.List.Cons(a#0, xs#0), 
                  _module.List.tail(ys#0)))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.flatten(Tclass._module.G(), 
                  $LS($LZ), 
                  _module.__default.ascending($LS($LZ), 
                    _module.List.head(ys#0), 
                    #_module.List.Cons(a#0, xs#0), 
                    _module.List.tail(ys#0))));
            // ----- Hint1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(554,5)
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(557,25)
            // TrCallStmt: Before ProcessCallStmt
            assume true;
            // ProcessCallStmt: CheckSubrange
            g##0_0_3_0 := g#0;
            assert {:id "id784"} _module.List.Cons_q(ys#0);
            assume true;
            // ProcessCallStmt: CheckSubrange
            a##0_0_3_0 := _module.List.head(ys#0);
            assume true;
            // ProcessCallStmt: CheckSubrange
            xs##0_0_3_0 := #_module.List.Cons(a#0, xs#0);
            assert {:id "id785"} _module.List.Cons_q(ys#0);
            assume true;
            // ProcessCallStmt: CheckSubrange
            ys##0_0_3_0 := _module.List.tail(ys#0);
            assert {:id "id786"} DtRank(ys##0_0_3_0) < DtRank(ys#0);
            call {:id "id787"} Call$$_module.__default.stable__ascending(g##0_0_3_0, a##0_0_3_0, xs##0_0_3_0, ys##0_0_3_0);
            // TrCallStmt: After ProcessCallStmt
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(554,5)
            ##g#0_0_3_1 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_3_1, Tclass._module.G(), $Heap);
            assert {:id "id788"} _module.List.Cons_q(ys#0);
            ##xs#0_0_3_4 := #_module.List.Cons(_module.List.head(ys#0), #_module.List.Cons(a#0, xs#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_3_4, Tclass._module.List(Tclass._module.G()), $Heap);
            ##acc#0_0_3_0 := Lit(#_module.List.Nil());
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#0_0_3_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.reverse#canCall(Tclass._module.G(), 
              #_module.List.Cons(_module.List.head(ys#0), #_module.List.Cons(a#0, xs#0)), 
              Lit(#_module.List.Nil()));
            ##xs#0_0_3_3 := _module.__default.reverse(Tclass._module.G(), 
              $LS($LZ), 
              #_module.List.Cons(_module.List.head(ys#0), #_module.List.Cons(a#0, xs#0)), 
              Lit(#_module.List.Nil()));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_3_3, Tclass._module.List(Tclass._module.G()), $Heap);
            assert {:id "id789"} _module.List.Cons_q(ys#0);
            ##ys#0_0_3_1 := _module.List.tail(ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_3_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(_module.List.head(ys#0), #_module.List.Cons(a#0, xs#0)), 
                Lit(#_module.List.Nil())), 
              _module.List.tail(ys#0));
            ##xs#0_0_3_2 := _module.__default.append(Tclass._module.G(), 
              $LS($LZ), 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(_module.List.head(ys#0), #_module.List.Cons(a#0, xs#0)), 
                Lit(#_module.List.Nil())), 
              _module.List.tail(ys#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_3_2, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(_module.List.head(ys#0), #_module.List.Cons(a#0, xs#0)), 
                  Lit(#_module.List.Nil())), 
                _module.List.tail(ys#0)));
            assume _module.__default.reverse#canCall(Tclass._module.G(), 
                #_module.List.Cons(_module.List.head(ys#0), #_module.List.Cons(a#0, xs#0)), 
                Lit(#_module.List.Nil()))
               && _module.__default.append#canCall(Tclass._module.G(), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(_module.List.head(ys#0), #_module.List.Cons(a#0, xs#0)), 
                  Lit(#_module.List.Nil())), 
                _module.List.tail(ys#0))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LZ), 
                    #_module.List.Cons(_module.List.head(ys#0), #_module.List.Cons(a#0, xs#0)), 
                    Lit(#_module.List.Nil())), 
                  _module.List.tail(ys#0)));
            // ----- assert line1 == line2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(554,5)
            assert {:id "id790"} {:subsumption 0} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.flatten(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  _module.__default.ascending($LS($LS($LZ)), 
                    _module.List.head(ys#0), 
                    #_module.List.Cons(a#0, xs#0), 
                    _module.List.tail(ys#0)))), 
              _module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    #_module.List.Cons(_module.List.head(ys#0), #_module.List.Cons(a#0, xs#0)), 
                    Lit(#_module.List.Nil())), 
                  _module.List.tail(ys#0))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(554,5)
            ##g#0_0_2_0 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_2_0, Tclass._module.G(), $Heap);
            assume {:id "id777"} _module.List.Cons_q(ys#0);
            ##xs#0_0_2_2 := #_module.List.Cons(_module.List.head(ys#0), #_module.List.Cons(a#0, xs#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_2_2, Tclass._module.List(Tclass._module.G()), $Heap);
            ##acc#0_0_2_0 := Lit(#_module.List.Nil());
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#0_0_2_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.reverse#canCall(Tclass._module.G(), 
              #_module.List.Cons(_module.List.head(ys#0), #_module.List.Cons(a#0, xs#0)), 
              Lit(#_module.List.Nil()));
            ##xs#0_0_2_1 := _module.__default.reverse(Tclass._module.G(), 
              $LS($LZ), 
              #_module.List.Cons(_module.List.head(ys#0), #_module.List.Cons(a#0, xs#0)), 
              Lit(#_module.List.Nil()));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_2_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume {:id "id778"} _module.List.Cons_q(ys#0);
            ##ys#0_0_2_0 := _module.List.tail(ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_2_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(_module.List.head(ys#0), #_module.List.Cons(a#0, xs#0)), 
                Lit(#_module.List.Nil())), 
              _module.List.tail(ys#0));
            ##xs#0_0_2_0 := _module.__default.append(Tclass._module.G(), 
              $LS($LZ), 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(_module.List.head(ys#0), #_module.List.Cons(a#0, xs#0)), 
                Lit(#_module.List.Nil())), 
              _module.List.tail(ys#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_2_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(_module.List.head(ys#0), #_module.List.Cons(a#0, xs#0)), 
                  Lit(#_module.List.Nil())), 
                _module.List.tail(ys#0)));
            assume _module.__default.reverse#canCall(Tclass._module.G(), 
                #_module.List.Cons(_module.List.head(ys#0), #_module.List.Cons(a#0, xs#0)), 
                Lit(#_module.List.Nil()))
               && _module.__default.append#canCall(Tclass._module.G(), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(_module.List.head(ys#0), #_module.List.Cons(a#0, xs#0)), 
                  Lit(#_module.List.Nil())), 
                _module.List.tail(ys#0))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LZ), 
                    #_module.List.Cons(_module.List.head(ys#0), #_module.List.Cons(a#0, xs#0)), 
                    Lit(#_module.List.Nil())), 
                  _module.List.tail(ys#0)));
            // ----- Hint2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(554,5)
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(554,5)
            ##g#0_0_2_1 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_2_1, Tclass._module.G(), $Heap);
            ##xs#0_0_2_5 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_2_5, Tclass._module.List(Tclass._module.G()), $Heap);
            assert {:id "id779"} _module.List.Cons_q(ys#0);
            ##acc#0_0_2_1 := #_module.List.Cons(_module.List.head(ys#0), Lit(#_module.List.Nil()));
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#0_0_2_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.reverse#canCall(Tclass._module.G(), 
              #_module.List.Cons(a#0, xs#0), 
              #_module.List.Cons(_module.List.head(ys#0), Lit(#_module.List.Nil())));
            ##xs#0_0_2_4 := _module.__default.reverse(Tclass._module.G(), 
              $LS($LZ), 
              #_module.List.Cons(a#0, xs#0), 
              #_module.List.Cons(_module.List.head(ys#0), Lit(#_module.List.Nil())));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_2_4, Tclass._module.List(Tclass._module.G()), $Heap);
            assert {:id "id780"} _module.List.Cons_q(ys#0);
            ##ys#0_0_2_1 := _module.List.tail(ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_2_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(a#0, xs#0), 
                #_module.List.Cons(_module.List.head(ys#0), Lit(#_module.List.Nil()))), 
              _module.List.tail(ys#0));
            ##xs#0_0_2_3 := _module.__default.append(Tclass._module.G(), 
              $LS($LZ), 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(a#0, xs#0), 
                #_module.List.Cons(_module.List.head(ys#0), Lit(#_module.List.Nil()))), 
              _module.List.tail(ys#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_2_3, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(a#0, xs#0), 
                  #_module.List.Cons(_module.List.head(ys#0), Lit(#_module.List.Nil()))), 
                _module.List.tail(ys#0)));
            assume _module.__default.reverse#canCall(Tclass._module.G(), 
                #_module.List.Cons(a#0, xs#0), 
                #_module.List.Cons(_module.List.head(ys#0), Lit(#_module.List.Nil())))
               && _module.__default.append#canCall(Tclass._module.G(), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(a#0, xs#0), 
                  #_module.List.Cons(_module.List.head(ys#0), Lit(#_module.List.Nil()))), 
                _module.List.tail(ys#0))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LZ), 
                    #_module.List.Cons(a#0, xs#0), 
                    #_module.List.Cons(_module.List.head(ys#0), Lit(#_module.List.Nil()))), 
                  _module.List.tail(ys#0)));
            // ----- assert line2 == line3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(554,5)
            assert {:id "id781"} {:subsumption 0} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    #_module.List.Cons(_module.List.head(ys#0), #_module.List.Cons(a#0, xs#0)), 
                    Lit(#_module.List.Nil())), 
                  _module.List.tail(ys#0))), 
              _module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    #_module.List.Cons(a#0, xs#0), 
                    #_module.List.Cons(_module.List.head(ys#0), Lit(#_module.List.Nil()))), 
                  _module.List.tail(ys#0))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(554,5)
            ##g#0_0_1_0 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_1_0, Tclass._module.G(), $Heap);
            ##xs#0_0_1_2 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_1_2, Tclass._module.List(Tclass._module.G()), $Heap);
            assume {:id "id769"} _module.List.Cons_q(ys#0);
            ##acc#0_0_1_0 := #_module.List.Cons(_module.List.head(ys#0), Lit(#_module.List.Nil()));
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#0_0_1_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.reverse#canCall(Tclass._module.G(), 
              #_module.List.Cons(a#0, xs#0), 
              #_module.List.Cons(_module.List.head(ys#0), Lit(#_module.List.Nil())));
            ##xs#0_0_1_1 := _module.__default.reverse(Tclass._module.G(), 
              $LS($LZ), 
              #_module.List.Cons(a#0, xs#0), 
              #_module.List.Cons(_module.List.head(ys#0), Lit(#_module.List.Nil())));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_1_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume {:id "id770"} _module.List.Cons_q(ys#0);
            ##ys#0_0_1_0 := _module.List.tail(ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_1_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(a#0, xs#0), 
                #_module.List.Cons(_module.List.head(ys#0), Lit(#_module.List.Nil()))), 
              _module.List.tail(ys#0));
            ##xs#0_0_1_0 := _module.__default.append(Tclass._module.G(), 
              $LS($LZ), 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(a#0, xs#0), 
                #_module.List.Cons(_module.List.head(ys#0), Lit(#_module.List.Nil()))), 
              _module.List.tail(ys#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_1_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(a#0, xs#0), 
                  #_module.List.Cons(_module.List.head(ys#0), Lit(#_module.List.Nil()))), 
                _module.List.tail(ys#0)));
            assume _module.__default.reverse#canCall(Tclass._module.G(), 
                #_module.List.Cons(a#0, xs#0), 
                #_module.List.Cons(_module.List.head(ys#0), Lit(#_module.List.Nil())))
               && _module.__default.append#canCall(Tclass._module.G(), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(a#0, xs#0), 
                  #_module.List.Cons(_module.List.head(ys#0), Lit(#_module.List.Nil()))), 
                _module.List.tail(ys#0))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LZ), 
                    #_module.List.Cons(a#0, xs#0), 
                    #_module.List.Cons(_module.List.head(ys#0), Lit(#_module.List.Nil()))), 
                  _module.List.tail(ys#0)));
            // ----- Hint3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(554,5)
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(560,30)
            // TrCallStmt: Before ProcessCallStmt
            assume true;
            // ProcessCallStmt: CheckSubrange
            g##0_0_1_0 := g#0;
            assert {:id "id771"} _module.List.Cons_q(ys#0);
            assume true;
            // ProcessCallStmt: CheckSubrange
            b##0_0_1_0 := _module.List.head(ys#0);
            assume true;
            // ProcessCallStmt: CheckSubrange
            xs##0_0_1_0 := #_module.List.Cons(a#0, xs#0);
            assert {:id "id772"} _module.List.Cons_q(ys#0);
            assume true;
            // ProcessCallStmt: CheckSubrange
            ys##0_0_1_0 := _module.List.tail(ys#0);
            call {:id "id773"} Call$$_module.__default.filter__append__reverse(g##0_0_1_0, b##0_0_1_0, xs##0_0_1_0, ys##0_0_1_0);
            // TrCallStmt: After ProcessCallStmt
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(554,5)
            ##g#0_0_1_1 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_1_1, Tclass._module.G(), $Heap);
            ##xs#0_0_1_5 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_1_5, Tclass._module.List(Tclass._module.G()), $Heap);
            ##acc#0_0_1_1 := Lit(#_module.List.Nil());
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#0_0_1_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), Lit(#_module.List.Nil()));
            ##xs#0_0_1_4 := _module.__default.reverse(Tclass._module.G(), 
              $LS($LZ), 
              #_module.List.Cons(a#0, xs#0), 
              Lit(#_module.List.Nil()));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_1_4, Tclass._module.List(Tclass._module.G()), $Heap);
            assert {:id "id774"} _module.List.Cons_q(ys#0);
            assert {:id "id775"} _module.List.Cons_q(ys#0);
            ##ys#0_0_1_1 := #_module.List.Cons(_module.List.head(ys#0), _module.List.tail(ys#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_1_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(a#0, xs#0), 
                Lit(#_module.List.Nil())), 
              #_module.List.Cons(_module.List.head(ys#0), _module.List.tail(ys#0)));
            ##xs#0_0_1_3 := _module.__default.append(Tclass._module.G(), 
              $LS($LZ), 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(a#0, xs#0), 
                Lit(#_module.List.Nil())), 
              #_module.List.Cons(_module.List.head(ys#0), _module.List.tail(ys#0)));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_1_3, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(a#0, xs#0), 
                  Lit(#_module.List.Nil())), 
                #_module.List.Cons(_module.List.head(ys#0), _module.List.tail(ys#0))));
            assume _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), Lit(#_module.List.Nil()))
               && _module.__default.append#canCall(Tclass._module.G(), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(a#0, xs#0), 
                  Lit(#_module.List.Nil())), 
                #_module.List.Cons(_module.List.head(ys#0), _module.List.tail(ys#0)))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LZ), 
                    #_module.List.Cons(a#0, xs#0), 
                    Lit(#_module.List.Nil())), 
                  #_module.List.Cons(_module.List.head(ys#0), _module.List.tail(ys#0))));
            // ----- assert line3 == line4 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(554,5)
            assert {:id "id776"} {:subsumption 0} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    #_module.List.Cons(a#0, xs#0), 
                    #_module.List.Cons(_module.List.head(ys#0), Lit(#_module.List.Nil()))), 
                  _module.List.tail(ys#0))), 
              _module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    #_module.List.Cons(a#0, xs#0), 
                    Lit(#_module.List.Nil())), 
                  #_module.List.Cons(_module.List.head(ys#0), _module.List.tail(ys#0)))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(554,5)
            ##g#0_0_0_0 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_0_0, Tclass._module.G(), $Heap);
            ##xs#0_0_0_2 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_0_2, Tclass._module.List(Tclass._module.G()), $Heap);
            ##acc#0_0_0_0 := Lit(#_module.List.Nil());
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#0_0_0_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), Lit(#_module.List.Nil()));
            ##xs#0_0_0_1 := _module.__default.reverse(Tclass._module.G(), 
              $LS($LZ), 
              #_module.List.Cons(a#0, xs#0), 
              Lit(#_module.List.Nil()));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_0_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume {:id "id766"} _module.List.Cons_q(ys#0);
            assume {:id "id767"} _module.List.Cons_q(ys#0);
            ##ys#0_0_0_0 := #_module.List.Cons(_module.List.head(ys#0), _module.List.tail(ys#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_0_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(a#0, xs#0), 
                Lit(#_module.List.Nil())), 
              #_module.List.Cons(_module.List.head(ys#0), _module.List.tail(ys#0)));
            ##xs#0_0_0_0 := _module.__default.append(Tclass._module.G(), 
              $LS($LZ), 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(a#0, xs#0), 
                Lit(#_module.List.Nil())), 
              #_module.List.Cons(_module.List.head(ys#0), _module.List.tail(ys#0)));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_0_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(a#0, xs#0), 
                  Lit(#_module.List.Nil())), 
                #_module.List.Cons(_module.List.head(ys#0), _module.List.tail(ys#0))));
            assume _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), Lit(#_module.List.Nil()))
               && _module.__default.append#canCall(Tclass._module.G(), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(a#0, xs#0), 
                  Lit(#_module.List.Nil())), 
                #_module.List.Cons(_module.List.head(ys#0), _module.List.tail(ys#0)))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LZ), 
                    #_module.List.Cons(a#0, xs#0), 
                    Lit(#_module.List.Nil())), 
                  #_module.List.Cons(_module.List.head(ys#0), _module.List.tail(ys#0))));
            // ----- Hint4 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(554,5)
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(554,5)
            ##g#0_0_0_1 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_0_1, Tclass._module.G(), $Heap);
            ##xs#0_0_0_5 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_0_5, Tclass._module.List(Tclass._module.G()), $Heap);
            ##acc#0_0_0_1 := Lit(#_module.List.Nil());
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#0_0_0_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), Lit(#_module.List.Nil()));
            ##xs#0_0_0_4 := _module.__default.reverse(Tclass._module.G(), 
              $LS($LZ), 
              #_module.List.Cons(a#0, xs#0), 
              Lit(#_module.List.Nil()));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_0_4, Tclass._module.List(Tclass._module.G()), $Heap);
            ##ys#0_0_0_1 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_0_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(a#0, xs#0), 
                Lit(#_module.List.Nil())), 
              ys#0);
            ##xs#0_0_0_3 := _module.__default.append(Tclass._module.G(), 
              $LS($LZ), 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(a#0, xs#0), 
                Lit(#_module.List.Nil())), 
              ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_0_3, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(a#0, xs#0), 
                  Lit(#_module.List.Nil())), 
                ys#0));
            assume _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), Lit(#_module.List.Nil()))
               && _module.__default.append#canCall(Tclass._module.G(), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(a#0, xs#0), 
                  Lit(#_module.List.Nil())), 
                ys#0)
               && _module.__default.filter#canCall(g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LZ), 
                    #_module.List.Cons(a#0, xs#0), 
                    Lit(#_module.List.Nil())), 
                  ys#0));
            // ----- assert line4 == line5 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(554,5)
            assert {:id "id768"} {:subsumption 0} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    #_module.List.Cons(a#0, xs#0), 
                    Lit(#_module.List.Nil())), 
                  #_module.List.Cons(_module.List.head(ys#0), _module.List.tail(ys#0)))), 
              _module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    #_module.List.Cons(a#0, xs#0), 
                    Lit(#_module.List.Nil())), 
                  ys#0)));
            assume false;
        }

        assume {:id "id794"} _module.List#Equal(_module.__default.filter($LS($LZ), 
            g#0, 
            _module.__default.flatten(Tclass._module.G(), 
              $LS($LZ), 
              _module.__default.ascending($LS($LZ), a#0, xs#0, ys#0))), 
          _module.__default.filter($LS($LZ), 
            g#0, 
            _module.__default.append(Tclass._module.G(), 
              $LS($LZ), 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(a#0, xs#0), 
                Lit(#_module.List.Nil())), 
              ys#0)));
    }
    else
    {
        // ----- calc statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(565,5)
        // Assume Fuel Constant
        if (*)
        {
            // ----- assert wf[initial] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(565,5)
            ##g#1_0_0 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#1_0_0, Tclass._module.G(), $Heap);
            ##a#1_0_0 := a#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##a#1_0_0, Tclass._module.G(), $Heap);
            ##xs#1_0_1 := xs#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_1, Tclass._module.List(Tclass._module.G()), $Heap);
            ##ys#1_0_0 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#1_0_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.ascending#canCall(a#0, xs#0, ys#0);
            ##x#1_0_0 := _module.__default.ascending($LS($LZ), a#0, xs#0, ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#1_0_0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.ascending($LS($LZ), a#0, xs#0, ys#0));
            ##xs#1_0_0 := _module.__default.flatten(Tclass._module.G(), 
              $LS($LZ), 
              _module.__default.ascending($LS($LZ), a#0, xs#0, ys#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.flatten(Tclass._module.G(), 
                $LS($LZ), 
                _module.__default.ascending($LS($LZ), a#0, xs#0, ys#0)));
            assume _module.__default.ascending#canCall(a#0, xs#0, ys#0)
               && _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.ascending($LS($LZ), a#0, xs#0, ys#0))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.flatten(Tclass._module.G(), 
                  $LS($LZ), 
                  _module.__default.ascending($LS($LZ), a#0, xs#0, ys#0)));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(565,5)
            ##g#1_0_4_0 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#1_0_4_0, Tclass._module.G(), $Heap);
            ##a#1_0_4_0 := a#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##a#1_0_4_0, Tclass._module.G(), $Heap);
            ##xs#1_0_4_1 := xs#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_4_1, Tclass._module.List(Tclass._module.G()), $Heap);
            ##ys#1_0_4_0 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#1_0_4_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.ascending#canCall(a#0, xs#0, ys#0);
            ##x#1_0_4_0 := _module.__default.ascending($LS($LZ), a#0, xs#0, ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#1_0_4_0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.ascending($LS($LZ), a#0, xs#0, ys#0));
            ##xs#1_0_4_0 := _module.__default.flatten(Tclass._module.G(), 
              $LS($LZ), 
              _module.__default.ascending($LS($LZ), a#0, xs#0, ys#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_4_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.flatten(Tclass._module.G(), 
                $LS($LZ), 
                _module.__default.ascending($LS($LZ), a#0, xs#0, ys#0)));
            assume _module.__default.ascending#canCall(a#0, xs#0, ys#0)
               && _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.ascending($LS($LZ), a#0, xs#0, ys#0))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.flatten(Tclass._module.G(), 
                  $LS($LZ), 
                  _module.__default.ascending($LS($LZ), a#0, xs#0, ys#0)));
            // ----- Hint0 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(565,5)
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(565,5)
            ##g#1_0_4_1 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#1_0_4_1, Tclass._module.G(), $Heap);
            ##xs#1_0_4_3 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_4_3, Tclass._module.List(Tclass._module.G()), $Heap);
            ##acc#1_0_4_0 := Lit(#_module.List.Nil());
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#1_0_4_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), Lit(#_module.List.Nil()));
            ##xs#1_0_4_4 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_4_4, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.sequences#canCall(ys#0);
            ##x#1_0_4_1 := #_module.List.Cons($Box(_module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(a#0, xs#0), 
                  Lit(#_module.List.Nil()))), 
              _module.__default.sequences($LS($LZ), ys#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#1_0_4_1, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.flatten#canCall(Tclass._module.G(), 
              #_module.List.Cons($Box(_module.__default.reverse(Tclass._module.G(), 
                    $LS($LZ), 
                    #_module.List.Cons(a#0, xs#0), 
                    Lit(#_module.List.Nil()))), 
                _module.__default.sequences($LS($LZ), ys#0)));
            ##xs#1_0_4_2 := _module.__default.flatten(Tclass._module.G(), 
              $LS($LZ), 
              #_module.List.Cons($Box(_module.__default.reverse(Tclass._module.G(), 
                    $LS($LZ), 
                    #_module.List.Cons(a#0, xs#0), 
                    Lit(#_module.List.Nil()))), 
                _module.__default.sequences($LS($LZ), ys#0)));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_4_2, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.flatten(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons($Box(_module.__default.reverse(Tclass._module.G(), 
                      $LS($LZ), 
                      #_module.List.Cons(a#0, xs#0), 
                      Lit(#_module.List.Nil()))), 
                  _module.__default.sequences($LS($LZ), ys#0))));
            assume _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), Lit(#_module.List.Nil()))
               && _module.__default.sequences#canCall(ys#0)
               && _module.__default.flatten#canCall(Tclass._module.G(), 
                #_module.List.Cons($Box(_module.__default.reverse(Tclass._module.G(), 
                      $LS($LZ), 
                      #_module.List.Cons(a#0, xs#0), 
                      Lit(#_module.List.Nil()))), 
                  _module.__default.sequences($LS($LZ), ys#0)))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.flatten(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons($Box(_module.__default.reverse(Tclass._module.G(), 
                        $LS($LZ), 
                        #_module.List.Cons(a#0, xs#0), 
                        Lit(#_module.List.Nil()))), 
                    _module.__default.sequences($LS($LZ), ys#0))));
            // ----- assert line0 == line1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(565,5)
            assert {:id "id803"} {:subsumption 0} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.flatten(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  _module.__default.ascending($LS($LS($LZ)), a#0, xs#0, ys#0))), 
              _module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.flatten(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  #_module.List.Cons($Box(_module.__default.reverse(Tclass._module.G(), 
                        $LS($LS($LZ)), 
                        #_module.List.Cons(a#0, xs#0), 
                        Lit(#_module.List.Nil()))), 
                    _module.__default.sequences($LS($LS($LZ)), ys#0)))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(565,5)
            ##g#1_0_3_0 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#1_0_3_0, Tclass._module.G(), $Heap);
            ##xs#1_0_3_1 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_3_1, Tclass._module.List(Tclass._module.G()), $Heap);
            ##acc#1_0_3_0 := Lit(#_module.List.Nil());
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#1_0_3_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), Lit(#_module.List.Nil()));
            ##xs#1_0_3_2 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_3_2, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.sequences#canCall(ys#0);
            ##x#1_0_3_0 := #_module.List.Cons($Box(_module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(a#0, xs#0), 
                  Lit(#_module.List.Nil()))), 
              _module.__default.sequences($LS($LZ), ys#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#1_0_3_0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.flatten#canCall(Tclass._module.G(), 
              #_module.List.Cons($Box(_module.__default.reverse(Tclass._module.G(), 
                    $LS($LZ), 
                    #_module.List.Cons(a#0, xs#0), 
                    Lit(#_module.List.Nil()))), 
                _module.__default.sequences($LS($LZ), ys#0)));
            ##xs#1_0_3_0 := _module.__default.flatten(Tclass._module.G(), 
              $LS($LZ), 
              #_module.List.Cons($Box(_module.__default.reverse(Tclass._module.G(), 
                    $LS($LZ), 
                    #_module.List.Cons(a#0, xs#0), 
                    Lit(#_module.List.Nil()))), 
                _module.__default.sequences($LS($LZ), ys#0)));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_3_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.flatten(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons($Box(_module.__default.reverse(Tclass._module.G(), 
                      $LS($LZ), 
                      #_module.List.Cons(a#0, xs#0), 
                      Lit(#_module.List.Nil()))), 
                  _module.__default.sequences($LS($LZ), ys#0))));
            assume _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), Lit(#_module.List.Nil()))
               && _module.__default.sequences#canCall(ys#0)
               && _module.__default.flatten#canCall(Tclass._module.G(), 
                #_module.List.Cons($Box(_module.__default.reverse(Tclass._module.G(), 
                      $LS($LZ), 
                      #_module.List.Cons(a#0, xs#0), 
                      Lit(#_module.List.Nil()))), 
                  _module.__default.sequences($LS($LZ), ys#0)))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.flatten(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons($Box(_module.__default.reverse(Tclass._module.G(), 
                        $LS($LZ), 
                        #_module.List.Cons(a#0, xs#0), 
                        Lit(#_module.List.Nil()))), 
                    _module.__default.sequences($LS($LZ), ys#0))));
            // ----- Hint1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(565,5)
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(565,5)
            ##g#1_0_3_1 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#1_0_3_1, Tclass._module.G(), $Heap);
            ##xs#1_0_3_5 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_3_5, Tclass._module.List(Tclass._module.G()), $Heap);
            ##acc#1_0_3_1 := Lit(#_module.List.Nil());
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#1_0_3_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), Lit(#_module.List.Nil()));
            ##xs#1_0_3_4 := _module.__default.reverse(Tclass._module.G(), 
              $LS($LZ), 
              #_module.List.Cons(a#0, xs#0), 
              Lit(#_module.List.Nil()));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_3_4, Tclass._module.List(Tclass._module.G()), $Heap);
            ##xs#1_0_3_6 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_3_6, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.sequences#canCall(ys#0);
            ##x#1_0_3_1 := _module.__default.sequences($LS($LZ), ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#1_0_3_1, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.sequences($LS($LZ), ys#0));
            ##ys#1_0_3_0 := _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), ys#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#1_0_3_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(a#0, xs#0), 
                Lit(#_module.List.Nil())), 
              _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), ys#0)));
            ##xs#1_0_3_3 := _module.__default.append(Tclass._module.G(), 
              $LS($LZ), 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(a#0, xs#0), 
                Lit(#_module.List.Nil())), 
              _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), ys#0)));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_3_3, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(a#0, xs#0), 
                  Lit(#_module.List.Nil())), 
                _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), ys#0))));
            assume _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), Lit(#_module.List.Nil()))
               && 
              _module.__default.sequences#canCall(ys#0)
               && _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.sequences($LS($LZ), ys#0))
               && _module.__default.append#canCall(Tclass._module.G(), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(a#0, xs#0), 
                  Lit(#_module.List.Nil())), 
                _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), ys#0)))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LZ), 
                    #_module.List.Cons(a#0, xs#0), 
                    Lit(#_module.List.Nil())), 
                  _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), ys#0))));
            // ----- assert line1 == line2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(565,5)
            assert {:id "id802"} {:subsumption 0} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.flatten(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  #_module.List.Cons($Box(_module.__default.reverse(Tclass._module.G(), 
                        $LS($LS($LZ)), 
                        #_module.List.Cons(a#0, xs#0), 
                        Lit(#_module.List.Nil()))), 
                    _module.__default.sequences($LS($LS($LZ)), ys#0)))), 
              _module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    #_module.List.Cons(a#0, xs#0), 
                    Lit(#_module.List.Nil())), 
                  _module.__default.flatten(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    _module.__default.sequences($LS($LS($LZ)), ys#0)))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(565,5)
            ##g#1_0_2_0 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#1_0_2_0, Tclass._module.G(), $Heap);
            ##xs#1_0_2_2 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_2_2, Tclass._module.List(Tclass._module.G()), $Heap);
            ##acc#1_0_2_0 := Lit(#_module.List.Nil());
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#1_0_2_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), Lit(#_module.List.Nil()));
            ##xs#1_0_2_1 := _module.__default.reverse(Tclass._module.G(), 
              $LS($LZ), 
              #_module.List.Cons(a#0, xs#0), 
              Lit(#_module.List.Nil()));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_2_1, Tclass._module.List(Tclass._module.G()), $Heap);
            ##xs#1_0_2_3 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_2_3, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.sequences#canCall(ys#0);
            ##x#1_0_2_0 := _module.__default.sequences($LS($LZ), ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#1_0_2_0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.sequences($LS($LZ), ys#0));
            ##ys#1_0_2_0 := _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), ys#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#1_0_2_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(a#0, xs#0), 
                Lit(#_module.List.Nil())), 
              _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), ys#0)));
            ##xs#1_0_2_0 := _module.__default.append(Tclass._module.G(), 
              $LS($LZ), 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(a#0, xs#0), 
                Lit(#_module.List.Nil())), 
              _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), ys#0)));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_2_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(a#0, xs#0), 
                  Lit(#_module.List.Nil())), 
                _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), ys#0))));
            assume _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), Lit(#_module.List.Nil()))
               && 
              _module.__default.sequences#canCall(ys#0)
               && _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.sequences($LS($LZ), ys#0))
               && _module.__default.append#canCall(Tclass._module.G(), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(a#0, xs#0), 
                  Lit(#_module.List.Nil())), 
                _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), ys#0)))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LZ), 
                    #_module.List.Cons(a#0, xs#0), 
                    Lit(#_module.List.Nil())), 
                  _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), ys#0))));
            // ----- Hint2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(565,5)
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(569,22)
            // TrCallStmt: Before ProcessCallStmt
            assume true;
            // ProcessCallStmt: CheckSubrange
            g##1_0_2_0 := g#0;
            ##xs#1_0_2_4 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_2_4, Tclass._module.List(Tclass._module.G()), $Heap);
            ##acc#1_0_2_1 := Lit(#_module.List.Nil());
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#1_0_2_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), Lit(#_module.List.Nil()));
            assume _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), Lit(#_module.List.Nil()));
            // ProcessCallStmt: CheckSubrange
            xs##1_0_2_0 := _module.__default.reverse(Tclass._module.G(), 
              $LS($LZ), 
              #_module.List.Cons(a#0, xs#0), 
              Lit(#_module.List.Nil()));
            ##xs#1_0_2_5 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_2_5, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.sequences#canCall(ys#0);
            ##x#1_0_2_1 := _module.__default.sequences($LS($LZ), ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#1_0_2_1, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.sequences($LS($LZ), ys#0));
            assume _module.__default.sequences#canCall(ys#0)
               && _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.sequences($LS($LZ), ys#0));
            // ProcessCallStmt: CheckSubrange
            ys##1_0_2_0 := _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), ys#0));
            call {:id "id800"} Call$$_module.__default.filter__append(g##1_0_2_0, xs##1_0_2_0, ys##1_0_2_0);
            // TrCallStmt: After ProcessCallStmt
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(565,5)
            ##g#1_0_2_1 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#1_0_2_1, Tclass._module.G(), $Heap);
            ##xs#1_0_2_8 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_2_8, Tclass._module.List(Tclass._module.G()), $Heap);
            ##acc#1_0_2_2 := Lit(#_module.List.Nil());
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#1_0_2_2, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), Lit(#_module.List.Nil()));
            ##xs#1_0_2_7 := _module.__default.reverse(Tclass._module.G(), 
              $LS($LZ), 
              #_module.List.Cons(a#0, xs#0), 
              Lit(#_module.List.Nil()));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_2_7, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(a#0, xs#0), 
                Lit(#_module.List.Nil())));
            ##xs#1_0_2_6 := _module.__default.filter($LS($LZ), 
              g#0, 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(a#0, xs#0), 
                Lit(#_module.List.Nil())));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_2_6, Tclass._module.List(Tclass._module.G()), $Heap);
            ##g#1_0_2_2 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#1_0_2_2, Tclass._module.G(), $Heap);
            ##xs#1_0_2_10 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_2_10, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.sequences#canCall(ys#0);
            ##x#1_0_2_2 := _module.__default.sequences($LS($LZ), ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#1_0_2_2, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.sequences($LS($LZ), ys#0));
            ##xs#1_0_2_9 := _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), ys#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_2_9, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), ys#0)));
            ##ys#1_0_2_1 := _module.__default.filter($LS($LZ), 
              g#0, 
              _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), ys#0)));
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#1_0_2_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              _module.__default.filter($LS($LZ), 
                g#0, 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(a#0, xs#0), 
                  Lit(#_module.List.Nil()))), 
              _module.__default.filter($LS($LZ), 
                g#0, 
                _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), ys#0))));
            assume _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), Lit(#_module.List.Nil()))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(a#0, xs#0), 
                  Lit(#_module.List.Nil())))
               && 
              _module.__default.sequences#canCall(ys#0)
               && _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.sequences($LS($LZ), ys#0))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), ys#0)))
               && _module.__default.append#canCall(Tclass._module.G(), 
                _module.__default.filter($LS($LZ), 
                  g#0, 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LZ), 
                    #_module.List.Cons(a#0, xs#0), 
                    Lit(#_module.List.Nil()))), 
                _module.__default.filter($LS($LZ), 
                  g#0, 
                  _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), ys#0))));
            // ----- assert line2 == line3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(565,5)
            assert {:id "id801"} {:subsumption 0} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    #_module.List.Cons(a#0, xs#0), 
                    Lit(#_module.List.Nil())), 
                  _module.__default.flatten(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    _module.__default.sequences($LS($LS($LZ)), ys#0)))), 
              _module.__default.append(Tclass._module.G(), 
                $LS($LS($LZ)), 
                _module.__default.filter($LS($LS($LZ)), 
                  g#0, 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    #_module.List.Cons(a#0, xs#0), 
                    Lit(#_module.List.Nil()))), 
                _module.__default.filter($LS($LS($LZ)), 
                  g#0, 
                  _module.__default.flatten(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    _module.__default.sequences($LS($LS($LZ)), ys#0)))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(565,5)
            ##g#1_0_1_0 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#1_0_1_0, Tclass._module.G(), $Heap);
            ##xs#1_0_1_2 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_1_2, Tclass._module.List(Tclass._module.G()), $Heap);
            ##acc#1_0_1_0 := Lit(#_module.List.Nil());
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#1_0_1_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), Lit(#_module.List.Nil()));
            ##xs#1_0_1_1 := _module.__default.reverse(Tclass._module.G(), 
              $LS($LZ), 
              #_module.List.Cons(a#0, xs#0), 
              Lit(#_module.List.Nil()));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_1_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(a#0, xs#0), 
                Lit(#_module.List.Nil())));
            ##xs#1_0_1_0 := _module.__default.filter($LS($LZ), 
              g#0, 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(a#0, xs#0), 
                Lit(#_module.List.Nil())));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_1_0, Tclass._module.List(Tclass._module.G()), $Heap);
            ##g#1_0_1_1 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#1_0_1_1, Tclass._module.G(), $Heap);
            ##xs#1_0_1_4 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_1_4, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.sequences#canCall(ys#0);
            ##x#1_0_1_0 := _module.__default.sequences($LS($LZ), ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#1_0_1_0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.sequences($LS($LZ), ys#0));
            ##xs#1_0_1_3 := _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), ys#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_1_3, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), ys#0)));
            ##ys#1_0_1_0 := _module.__default.filter($LS($LZ), 
              g#0, 
              _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), ys#0)));
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#1_0_1_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              _module.__default.filter($LS($LZ), 
                g#0, 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(a#0, xs#0), 
                  Lit(#_module.List.Nil()))), 
              _module.__default.filter($LS($LZ), 
                g#0, 
                _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), ys#0))));
            assume _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), Lit(#_module.List.Nil()))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(a#0, xs#0), 
                  Lit(#_module.List.Nil())))
               && 
              _module.__default.sequences#canCall(ys#0)
               && _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.sequences($LS($LZ), ys#0))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), ys#0)))
               && _module.__default.append#canCall(Tclass._module.G(), 
                _module.__default.filter($LS($LZ), 
                  g#0, 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LZ), 
                    #_module.List.Cons(a#0, xs#0), 
                    Lit(#_module.List.Nil()))), 
                _module.__default.filter($LS($LZ), 
                  g#0, 
                  _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.sequences($LS($LZ), ys#0))));
            // ----- Hint3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(565,5)
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(571,25)
            // TrCallStmt: Before ProcessCallStmt
            assume true;
            // ProcessCallStmt: CheckSubrange
            g##1_0_1_0 := g#0;
            assume true;
            // ProcessCallStmt: CheckSubrange
            xs##1_0_1_0 := ys#0;
            assert {:id "id797"} DtRank(xs##1_0_1_0) <= DtRank(ys#0);
            call {:id "id798"} Call$$_module.__default.stable__sequences(g##1_0_1_0, xs##1_0_1_0);
            // TrCallStmt: After ProcessCallStmt
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(565,5)
            ##g#1_0_1_2 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#1_0_1_2, Tclass._module.G(), $Heap);
            ##xs#1_0_1_7 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_1_7, Tclass._module.List(Tclass._module.G()), $Heap);
            ##acc#1_0_1_1 := Lit(#_module.List.Nil());
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#1_0_1_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), Lit(#_module.List.Nil()));
            ##xs#1_0_1_6 := _module.__default.reverse(Tclass._module.G(), 
              $LS($LZ), 
              #_module.List.Cons(a#0, xs#0), 
              Lit(#_module.List.Nil()));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_1_6, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(a#0, xs#0), 
                Lit(#_module.List.Nil())));
            ##xs#1_0_1_5 := _module.__default.filter($LS($LZ), 
              g#0, 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(a#0, xs#0), 
                Lit(#_module.List.Nil())));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_1_5, Tclass._module.List(Tclass._module.G()), $Heap);
            ##g#1_0_1_3 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#1_0_1_3, Tclass._module.G(), $Heap);
            ##xs#1_0_1_8 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_1_8, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, ys#0);
            ##ys#1_0_1_1 := _module.__default.filter($LS($LZ), g#0, ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#1_0_1_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              _module.__default.filter($LS($LZ), 
                g#0, 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(a#0, xs#0), 
                  Lit(#_module.List.Nil()))), 
              _module.__default.filter($LS($LZ), g#0, ys#0));
            assume _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), Lit(#_module.List.Nil()))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(a#0, xs#0), 
                  Lit(#_module.List.Nil())))
               && _module.__default.filter#canCall(g#0, ys#0)
               && _module.__default.append#canCall(Tclass._module.G(), 
                _module.__default.filter($LS($LZ), 
                  g#0, 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LZ), 
                    #_module.List.Cons(a#0, xs#0), 
                    Lit(#_module.List.Nil()))), 
                _module.__default.filter($LS($LZ), g#0, ys#0));
            // ----- assert line3 == line4 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(565,5)
            assert {:id "id799"} {:subsumption 0} _module.List#Equal(_module.__default.append(Tclass._module.G(), 
                $LS($LS($LZ)), 
                _module.__default.filter($LS($LS($LZ)), 
                  g#0, 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    #_module.List.Cons(a#0, xs#0), 
                    Lit(#_module.List.Nil()))), 
                _module.__default.filter($LS($LS($LZ)), 
                  g#0, 
                  _module.__default.flatten(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    _module.__default.sequences($LS($LS($LZ)), ys#0)))), 
              _module.__default.append(Tclass._module.G(), 
                $LS($LS($LZ)), 
                _module.__default.filter($LS($LS($LZ)), 
                  g#0, 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    #_module.List.Cons(a#0, xs#0), 
                    Lit(#_module.List.Nil()))), 
                _module.__default.filter($LS($LS($LZ)), g#0, ys#0)));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(565,5)
            ##g#1_0_0_0 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#1_0_0_0, Tclass._module.G(), $Heap);
            ##xs#1_0_0_2 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_0_2, Tclass._module.List(Tclass._module.G()), $Heap);
            ##acc#1_0_0_0 := Lit(#_module.List.Nil());
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#1_0_0_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), Lit(#_module.List.Nil()));
            ##xs#1_0_0_1 := _module.__default.reverse(Tclass._module.G(), 
              $LS($LZ), 
              #_module.List.Cons(a#0, xs#0), 
              Lit(#_module.List.Nil()));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_0_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(a#0, xs#0), 
                Lit(#_module.List.Nil())));
            ##xs#1_0_0_0 := _module.__default.filter($LS($LZ), 
              g#0, 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(a#0, xs#0), 
                Lit(#_module.List.Nil())));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_0_0, Tclass._module.List(Tclass._module.G()), $Heap);
            ##g#1_0_0_1 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#1_0_0_1, Tclass._module.G(), $Heap);
            ##xs#1_0_0_3 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_0_3, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, ys#0);
            ##ys#1_0_0_0 := _module.__default.filter($LS($LZ), g#0, ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#1_0_0_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              _module.__default.filter($LS($LZ), 
                g#0, 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(a#0, xs#0), 
                  Lit(#_module.List.Nil()))), 
              _module.__default.filter($LS($LZ), g#0, ys#0));
            assume _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), Lit(#_module.List.Nil()))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(a#0, xs#0), 
                  Lit(#_module.List.Nil())))
               && _module.__default.filter#canCall(g#0, ys#0)
               && _module.__default.append#canCall(Tclass._module.G(), 
                _module.__default.filter($LS($LZ), 
                  g#0, 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LZ), 
                    #_module.List.Cons(a#0, xs#0), 
                    Lit(#_module.List.Nil()))), 
                _module.__default.filter($LS($LZ), g#0, ys#0));
            // ----- Hint4 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(565,5)
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(573,22)
            // TrCallStmt: Before ProcessCallStmt
            assume true;
            // ProcessCallStmt: CheckSubrange
            g##1_0_0_0 := g#0;
            ##xs#1_0_0_4 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_0_4, Tclass._module.List(Tclass._module.G()), $Heap);
            ##acc#1_0_0_1 := Lit(#_module.List.Nil());
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#1_0_0_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), Lit(#_module.List.Nil()));
            assume _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), Lit(#_module.List.Nil()));
            // ProcessCallStmt: CheckSubrange
            xs##1_0_0_0 := _module.__default.reverse(Tclass._module.G(), 
              $LS($LZ), 
              #_module.List.Cons(a#0, xs#0), 
              Lit(#_module.List.Nil()));
            assume true;
            // ProcessCallStmt: CheckSubrange
            ys##1_0_0_0 := ys#0;
            call {:id "id795"} Call$$_module.__default.filter__append(g##1_0_0_0, xs##1_0_0_0, ys##1_0_0_0);
            // TrCallStmt: After ProcessCallStmt
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(565,5)
            ##g#1_0_0_2 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#1_0_0_2, Tclass._module.G(), $Heap);
            ##xs#1_0_0_7 := #_module.List.Cons(a#0, xs#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_0_7, Tclass._module.List(Tclass._module.G()), $Heap);
            ##acc#1_0_0_2 := Lit(#_module.List.Nil());
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#1_0_0_2, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), Lit(#_module.List.Nil()));
            ##xs#1_0_0_6 := _module.__default.reverse(Tclass._module.G(), 
              $LS($LZ), 
              #_module.List.Cons(a#0, xs#0), 
              Lit(#_module.List.Nil()));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_0_6, Tclass._module.List(Tclass._module.G()), $Heap);
            ##ys#1_0_0_1 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#1_0_0_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(a#0, xs#0), 
                Lit(#_module.List.Nil())), 
              ys#0);
            ##xs#1_0_0_5 := _module.__default.append(Tclass._module.G(), 
              $LS($LZ), 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(a#0, xs#0), 
                Lit(#_module.List.Nil())), 
              ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_0_5, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(a#0, xs#0), 
                  Lit(#_module.List.Nil())), 
                ys#0));
            assume _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(a#0, xs#0), Lit(#_module.List.Nil()))
               && _module.__default.append#canCall(Tclass._module.G(), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(a#0, xs#0), 
                  Lit(#_module.List.Nil())), 
                ys#0)
               && _module.__default.filter#canCall(g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LZ), 
                    #_module.List.Cons(a#0, xs#0), 
                    Lit(#_module.List.Nil())), 
                  ys#0));
            // ----- assert line4 == line5 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(565,5)
            assert {:id "id796"} {:subsumption 0} _module.List#Equal(_module.__default.append(Tclass._module.G(), 
                $LS($LS($LZ)), 
                _module.__default.filter($LS($LS($LZ)), 
                  g#0, 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    #_module.List.Cons(a#0, xs#0), 
                    Lit(#_module.List.Nil()))), 
                _module.__default.filter($LS($LS($LZ)), g#0, ys#0)), 
              _module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    #_module.List.Cons(a#0, xs#0), 
                    Lit(#_module.List.Nil())), 
                  ys#0)));
            assume false;
        }

        assume {:id "id804"} _module.List#Equal(_module.__default.filter($LS($LZ), 
            g#0, 
            _module.__default.flatten(Tclass._module.G(), 
              $LS($LZ), 
              _module.__default.ascending($LS($LZ), a#0, xs#0, ys#0))), 
          _module.__default.filter($LS($LZ), 
            g#0, 
            _module.__default.append(Tclass._module.G(), 
              $LS($LZ), 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(a#0, xs#0), 
                Lit(#_module.List.Nil())), 
              ys#0)));
    }
}



procedure {:verboseName "stable_mergeAll (well-formedness)"} CheckWellFormed$$_module.__default.stable__mergeAll(g#0: Box
       where $IsBox(g#0, Tclass._module.G()) && $IsAllocBox(g#0, Tclass._module.G(), $Heap), 
    x#0: DatatypeType
       where $Is(x#0, Tclass._module.List(Tclass._module.List(Tclass._module.G())))
         && $IsAlloc(x#0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap)
         && $IsA#_module.List(x#0));
  free requires 6 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "stable_mergeAll (well-formedness)"} CheckWellFormed$$_module.__default.stable__mergeAll(g#0: Box, x#0: DatatypeType)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##x#0: DatatypeType;
  var ##xs#0: DatatypeType;
  var ##g#0: Box;
  var ##xs#1: DatatypeType;
  var ##x#1: DatatypeType;
  var ##g#1: Box;
  var ##xs#2: DatatypeType;
  var ##x#2: DatatypeType;


    // AddMethodImpl: stable_mergeAll, CheckWellFormed$$_module.__default.stable__mergeAll
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume {:id "id805"} !_module.List#Equal(x#0, #_module.List.Nil());
    ##x#0 := x#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##x#0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
    assume _module.__default.AllSorted#canCall(x#0);
    assume {:id "id806"} _module.__default.AllSorted($LS($LZ), x#0);
    ##xs#0 := x#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##xs#0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
    assume _module.__default.length#canCall(Tclass._module.List(Tclass._module.G()), x#0);
    havoc $Heap;
    assume old($Heap) == $Heap;
    ##g#0 := g#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##g#0, Tclass._module.G(), $Heap);
    ##x#1 := x#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##x#1, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
    assert {:id "id807"} {:subsumption 0} !_module.List#Equal(##x#1, #_module.List.Nil());
    assume !_module.List#Equal(##x#1, #_module.List.Nil());
    assume _module.__default.mergeAll#canCall(x#0);
    ##xs#1 := _module.__default.mergeAll($LS($LZ), x#0);
    // assume allocatedness for argument to function
    assume $IsAlloc(##xs#1, Tclass._module.List(Tclass._module.G()), $Heap);
    assume _module.__default.filter#canCall(g#0, _module.__default.mergeAll($LS($LZ), x#0));
    ##g#1 := g#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##g#1, Tclass._module.G(), $Heap);
    ##x#2 := x#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##x#2, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
    assume _module.__default.flatten#canCall(Tclass._module.G(), x#0);
    ##xs#2 := _module.__default.flatten(Tclass._module.G(), $LS($LZ), x#0);
    // assume allocatedness for argument to function
    assume $IsAlloc(##xs#2, Tclass._module.List(Tclass._module.G()), $Heap);
    assume _module.__default.filter#canCall(g#0, _module.__default.flatten(Tclass._module.G(), $LS($LZ), x#0));
    assume {:id "id808"} _module.List#Equal(_module.__default.filter($LS($LZ), g#0, _module.__default.mergeAll($LS($LZ), x#0)), 
      _module.__default.filter($LS($LZ), g#0, _module.__default.flatten(Tclass._module.G(), $LS($LZ), x#0)));
}



procedure {:verboseName "stable_mergeAll (call)"} Call$$_module.__default.stable__mergeAll(g#0: Box
       where $IsBox(g#0, Tclass._module.G()) && $IsAllocBox(g#0, Tclass._module.G(), $Heap), 
    x#0: DatatypeType
       where $Is(x#0, Tclass._module.List(Tclass._module.List(Tclass._module.G())))
         && $IsAlloc(x#0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap)
         && $IsA#_module.List(x#0));
  // user-defined preconditions
  requires {:id "id809"} !_module.List#Equal(x#0, #_module.List.Nil());
  requires {:id "id810"} _module.__default.AllSorted#canCall(x#0)
     ==> _module.__default.AllSorted($LS($LZ), x#0)
       || (_module.List.Nil_q(x#0) ==> Lit(true));
  requires {:id "id811"} _module.__default.AllSorted#canCall(x#0)
     ==> _module.__default.AllSorted($LS($LZ), x#0)
       || (!_module.List.Nil_q(x#0)
         ==> (var y#2 := _module.List.tail(x#0); 
          (var xs#0 := $Unbox(_module.List.head(x#0)): DatatypeType; 
            _module.__default.sorted#canCall(xs#0)
               ==> _module.__default.sorted($LS($LZ), xs#0)
                 || (_module.List.Nil_q(xs#0) ==> Lit(true)))));
  requires {:id "id812"} _module.__default.AllSorted#canCall(x#0)
     ==> _module.__default.AllSorted($LS($LZ), x#0)
       || (!_module.List.Nil_q(x#0)
         ==> (var y#2 := _module.List.tail(x#0); 
          (var xs#0 := $Unbox(_module.List.head(x#0)): DatatypeType; 
            _module.__default.sorted#canCall(xs#0)
               ==> _module.__default.sorted($LS($LZ), xs#0)
                 || (!_module.List.Nil_q(xs#0)
                   ==> (var ys#0 := _module.List.tail(xs#0); 
                    (var a#0 := _module.List.head(xs#0); 
                      (forall y#0: Box :: 
                        { _module.__default.Below(a#0, y#0) } 
                          { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#0), y#0) } 
                        $IsBox(y#0, Tclass._module.G())
                           ==> 
                          MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#0), y#0)
                             > 0
                           ==> _module.__default.Below(a#0, y#0))))))));
  requires {:id "id813"} _module.__default.AllSorted#canCall(x#0)
     ==> _module.__default.AllSorted($LS($LZ), x#0)
       || (!_module.List.Nil_q(x#0)
         ==> (var y#2 := _module.List.tail(x#0); 
          (var xs#0 := $Unbox(_module.List.head(x#0)): DatatypeType; 
            _module.__default.sorted#canCall(xs#0)
               ==> _module.__default.sorted($LS($LZ), xs#0)
                 || (!_module.List.Nil_q(xs#0)
                   ==> (var ys#0 := _module.List.tail(xs#0); 
                    (var a#0 := _module.List.head(xs#0); 
                      _module.__default.sorted($LS($LS($LZ)), ys#0)))))));
  requires {:id "id814"} _module.__default.AllSorted#canCall(x#0)
     ==> _module.__default.AllSorted($LS($LZ), x#0)
       || (!_module.List.Nil_q(x#0)
         ==> (var y#2 := _module.List.tail(x#0); 
          (var xs#0 := $Unbox(_module.List.head(x#0)): DatatypeType; 
            _module.__default.AllSorted($LS($LS($LZ)), y#2))));
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#_module.List(_module.__default.filter($LS($LZ), g#0, _module.__default.mergeAll($LS($LZ), x#0)))
     && $IsA#_module.List(_module.__default.filter($LS($LZ), g#0, _module.__default.flatten(Tclass._module.G(), $LS($LZ), x#0)))
     && 
    _module.__default.mergeAll#canCall(x#0)
     && _module.__default.filter#canCall(g#0, _module.__default.mergeAll($LS($LZ), x#0))
     && 
    _module.__default.flatten#canCall(Tclass._module.G(), x#0)
     && _module.__default.filter#canCall(g#0, _module.__default.flatten(Tclass._module.G(), $LS($LZ), x#0));
  ensures {:id "id815"} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), g#0, _module.__default.mergeAll($LS($LS($LZ)), x#0)), 
    _module.__default.filter($LS($LS($LZ)), 
      g#0, 
      _module.__default.flatten(Tclass._module.G(), $LS($LS($LZ)), x#0)));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "stable_mergeAll (correctness)"} Impl$$_module.__default.stable__mergeAll(g#0: Box
       where $IsBox(g#0, Tclass._module.G()) && $IsAllocBox(g#0, Tclass._module.G(), $Heap), 
    x#0: DatatypeType
       where $Is(x#0, Tclass._module.List(Tclass._module.List(Tclass._module.G())))
         && $IsAlloc(x#0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap)
         && $IsA#_module.List(x#0))
   returns ($_reverifyPost: bool);
  free requires 6 == $FunctionContextHeight;
  // user-defined preconditions
  requires {:id "id816"} !_module.List#Equal(x#0, #_module.List.Nil());
  free requires {:id "id817"} _module.__default.AllSorted#canCall(x#0)
     && 
    _module.__default.AllSorted($LS($LZ), x#0)
     && (if _module.List.Nil_q(x#0)
       then true
       else (var y#7 := _module.List.tail(x#0); 
        (var xs#3 := $Unbox(_module.List.head(x#0)): DatatypeType; 
          _module.__default.sorted($LS($LZ), xs#3)
             && _module.__default.AllSorted($LS($LZ), y#7))));
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#_module.List(_module.__default.filter($LS($LZ), g#0, _module.__default.mergeAll($LS($LZ), x#0)))
     && $IsA#_module.List(_module.__default.filter($LS($LZ), g#0, _module.__default.flatten(Tclass._module.G(), $LS($LZ), x#0)))
     && 
    _module.__default.mergeAll#canCall(x#0)
     && _module.__default.filter#canCall(g#0, _module.__default.mergeAll($LS($LZ), x#0))
     && 
    _module.__default.flatten#canCall(Tclass._module.G(), x#0)
     && _module.__default.filter#canCall(g#0, _module.__default.flatten(Tclass._module.G(), $LS($LZ), x#0));
  ensures {:id "id818"} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), g#0, _module.__default.mergeAll($LS($LS($LZ)), x#0)), 
    _module.__default.filter($LS($LS($LZ)), 
      g#0, 
      _module.__default.flatten(Tclass._module.G(), $LS($LS($LZ)), x#0)));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "stable_mergeAll (correctness)"} Impl$$_module.__default.stable__mergeAll(g#0: Box, x#0: DatatypeType) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $initHeapForallStmt#0: Heap;
  var ##x#0_0_0_0: DatatypeType;
  var ##xs#0_0_1_0: DatatypeType;
  var ##ys#0_0_1_0: DatatypeType;
  var xs##0_0_1_0: DatatypeType;
  var ##x#0_0_2_0: DatatypeType;
  var ##xs#0_0_2_0: DatatypeType;
  var ##ys#0_0_2_0: DatatypeType;
  var ##x#0_0_0: DatatypeType;
  var ##g#1_0_0_0: Box;
  var ##xs#1_0_0_0: DatatypeType;
  var ##x#1_0_0_0: DatatypeType;
  var ##x#1_0_0_1: DatatypeType;
  var g##1_0_0_0: Box;
  var x##1_0_0_0: DatatypeType;
  var ##g#1_0_0_1: Box;
  var ##xs#1_0_0_1: DatatypeType;
  var ##x#1_0_0_2: DatatypeType;
  var ##g#1_0_1_0: Box;
  var ##xs#1_0_1_0: DatatypeType;
  var ##x#1_0_1_0: DatatypeType;
  var ##x#1_0_1_1: DatatypeType;
  var x##1_0_1_0: DatatypeType;
  var g##1_0_1_0: Box;
  var x##1_0_1_1: DatatypeType;
  var ##x#1_0_1_2: DatatypeType;
  var ##g#1_0_1_1: Box;
  var ##xs#1_0_1_1: DatatypeType;
  var ##x#1_0_1_3: DatatypeType;
  var ##x#1_0_1_4: DatatypeType;
  var ##g#1_0_2_0: Box;
  var ##xs#1_0_2_0: DatatypeType;
  var ##x#1_0_2_0: DatatypeType;
  var ##g#1_0_2_1: Box;
  var ##xs#1_0_2_1: DatatypeType;
  var ##x#1_0_2_1: DatatypeType;
  var ##x#1_0_2_2: DatatypeType;
  var ##g#1_0_0: Box;
  var ##xs#1_0_0: DatatypeType;
  var ##x#1_0_0: DatatypeType;

    // AddMethodImpl: stable_mergeAll, Impl$$_module.__default.stable__mergeAll
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume $IsA#_module.List(x#0);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#x0#0: DatatypeType :: 
      { _module.__default.flatten(Tclass._module.G(), $LS($LZ), $ih#x0#0) } 
        { _module.__default.mergeAll($LS($LZ), $ih#x0#0) } 
        { _module.__default.AllSorted($LS($LZ), $ih#x0#0) } 
      $Is($ih#x0#0, Tclass._module.List(Tclass._module.List(Tclass._module.G())))
           && 
          !_module.List#Equal($ih#x0#0, #_module.List.Nil())
           && _module.__default.AllSorted($LS($LZ), $ih#x0#0)
           && 
          0
             <= _module.__default.length(Tclass._module.List(Tclass._module.G()), $LS($LZ), $ih#x0#0)
           && _module.__default.length(Tclass._module.List(Tclass._module.G()), $LS($LZ), $ih#x0#0)
             < _module.__default.length(Tclass._module.List(Tclass._module.G()), $LS($LZ), x#0)
         ==> _module.List#Equal(_module.__default.filter($LS($LZ), g#0, _module.__default.mergeAll($LS($LZ), $ih#x0#0)), 
          _module.__default.filter($LS($LZ), g#0, _module.__default.flatten(Tclass._module.G(), $LS($LZ), $ih#x0#0))));
    $_reverifyPost := false;
    // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(584,3)
    assert {:id "id819"} _module.List.Cons_q(x#0);
    assume $IsA#_module.List(_module.List.tail(x#0));
    if (_module.List#Equal(_module.List.tail(x#0), #_module.List.Nil()))
    {
        // ----- calc statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(585,5)
        // Assume Fuel Constant
        if (*)
        {
            // ----- assert wf[initial] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(585,5)
            ##x#0_0_0 := x#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#0_0_0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.flatten#canCall(Tclass._module.G(), x#0);
            assume _module.__default.flatten#canCall(Tclass._module.G(), x#0);
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(585,5)
            ##x#0_0_2_0 := x#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#0_0_2_0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.flatten#canCall(Tclass._module.G(), x#0);
            assume _module.__default.flatten#canCall(Tclass._module.G(), x#0);
            // ----- Hint0 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(585,5)
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(585,5)
            assert {:id "id828"} _module.List.Cons_q(x#0);
            ##xs#0_0_2_0 := $Unbox(_module.List.head(x#0)): DatatypeType;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_2_0, Tclass._module.List(Tclass._module.G()), $Heap);
            ##ys#0_0_2_0 := Lit(#_module.List.Nil());
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_2_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              $Unbox(_module.List.head(x#0)): DatatypeType, 
              Lit(#_module.List.Nil()));
            assume _module.__default.append#canCall(Tclass._module.G(), 
              $Unbox(_module.List.head(x#0)): DatatypeType, 
              Lit(#_module.List.Nil()));
            // ----- assert line0 == line1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(585,5)
            assert {:id "id829"} {:subsumption 0} _module.List#Equal(_module.__default.flatten(Tclass._module.G(), $LS($LS($LZ)), x#0), 
              _module.__default.append(Tclass._module.G(), 
                $LS($LS($LZ)), 
                $Unbox(_module.List.head(x#0)): DatatypeType, 
                Lit(#_module.List.Nil())));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(585,5)
            assume {:id "id823"} _module.List.Cons_q(x#0);
            ##xs#0_0_1_0 := $Unbox(_module.List.head(x#0)): DatatypeType;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_1_0, Tclass._module.List(Tclass._module.G()), $Heap);
            ##ys#0_0_1_0 := Lit(#_module.List.Nil());
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_1_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              $Unbox(_module.List.head(x#0)): DatatypeType, 
              Lit(#_module.List.Nil()));
            assume _module.__default.append#canCall(Tclass._module.G(), 
              $Unbox(_module.List.head(x#0)): DatatypeType, 
              Lit(#_module.List.Nil()));
            // ----- Hint1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(585,5)
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(588,19)
            // TrCallStmt: Before ProcessCallStmt
            assert {:id "id824"} _module.List.Cons_q(x#0);
            assume true;
            // ProcessCallStmt: CheckSubrange
            xs##0_0_1_0 := $Unbox(_module.List.head(x#0)): DatatypeType;
            call {:id "id825"} Call$$_module.__default.append__Nil(Tclass._module.G(), xs##0_0_1_0);
            // TrCallStmt: After ProcessCallStmt
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(585,5)
            assert {:id "id826"} _module.List.Cons_q(x#0);
            assume true;
            // ----- assert line1 == line2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(585,5)
            assert {:id "id827"} {:subsumption 0} _module.List#Equal(_module.__default.append(Tclass._module.G(), 
                $LS($LS($LZ)), 
                $Unbox(_module.List.head(x#0)): DatatypeType, 
                Lit(#_module.List.Nil())), 
              $Unbox(_module.List.head(x#0)): DatatypeType);
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(585,5)
            assume {:id "id820"} _module.List.Cons_q(x#0);
            assume true;
            // ----- Hint2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(585,5)
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(585,5)
            ##x#0_0_0_0 := x#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#0_0_0_0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assert {:id "id821"} {:subsumption 0} !_module.List#Equal(##x#0_0_0_0, #_module.List.Nil());
            assume _module.__default.mergeAll#canCall(x#0);
            assume _module.__default.mergeAll#canCall(x#0);
            // ----- assert line2 == line3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(585,5)
            assert {:id "id822"} {:subsumption 0} _module.List#Equal($Unbox(_module.List.head(x#0)): DatatypeType, 
              _module.__default.mergeAll($LS($LS($LZ)), x#0));
            assume false;
        }

        assume {:id "id830"} _module.List#Equal(_module.__default.flatten(Tclass._module.G(), $LS($LZ), x#0), 
          _module.__default.mergeAll($LS($LZ), x#0));
    }
    else
    {
        // ----- calc statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(593,5)
        // Assume Fuel Constant
        if (*)
        {
            // ----- assert wf[initial] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(593,5)
            ##g#1_0_0 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#1_0_0, Tclass._module.G(), $Heap);
            ##x#1_0_0 := x#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#1_0_0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assert {:id "id842"} {:subsumption 0} !_module.List#Equal(##x#1_0_0, #_module.List.Nil());
            assume _module.__default.mergeAll#canCall(x#0);
            ##xs#1_0_0 := _module.__default.mergeAll($LS($LZ), x#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, _module.__default.mergeAll($LS($LZ), x#0));
            assume _module.__default.mergeAll#canCall(x#0)
               && _module.__default.filter#canCall(g#0, _module.__default.mergeAll($LS($LZ), x#0));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(593,5)
            ##g#1_0_2_0 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#1_0_2_0, Tclass._module.G(), $Heap);
            ##x#1_0_2_0 := x#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#1_0_2_0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume {:id "id839"} {:subsumption 0} !_module.List#Equal(##x#1_0_2_0, #_module.List.Nil());
            assume _module.__default.mergeAll#canCall(x#0);
            ##xs#1_0_2_0 := _module.__default.mergeAll($LS($LZ), x#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_2_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, _module.__default.mergeAll($LS($LZ), x#0));
            assume _module.__default.mergeAll#canCall(x#0)
               && _module.__default.filter#canCall(g#0, _module.__default.mergeAll($LS($LZ), x#0));
            // ----- Hint0 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(593,5)
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(593,5)
            ##g#1_0_2_1 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#1_0_2_1, Tclass._module.G(), $Heap);
            ##x#1_0_2_2 := x#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#1_0_2_2, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.mergePairs#canCall(x#0);
            ##x#1_0_2_1 := _module.__default.mergePairs($LS($LZ), x#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#1_0_2_1, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assert {:id "id840"} {:subsumption 0} !_module.List#Equal(##x#1_0_2_1, #_module.List.Nil());
            assume _module.__default.mergeAll#canCall(_module.__default.mergePairs($LS($LZ), x#0));
            ##xs#1_0_2_1 := _module.__default.mergeAll($LS($LZ), _module.__default.mergePairs($LS($LZ), x#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_2_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.mergeAll($LS($LZ), _module.__default.mergePairs($LS($LZ), x#0)));
            assume _module.__default.mergePairs#canCall(x#0)
               && _module.__default.mergeAll#canCall(_module.__default.mergePairs($LS($LZ), x#0))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.mergeAll($LS($LZ), _module.__default.mergePairs($LS($LZ), x#0)));
            // ----- assert line0 == line1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(593,5)
            assert {:id "id841"} {:subsumption 0} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), g#0, _module.__default.mergeAll($LS($LS($LZ)), x#0)), 
              _module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.mergeAll($LS($LS($LZ)), _module.__default.mergePairs($LS($LS($LZ)), x#0))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(593,5)
            ##g#1_0_1_0 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#1_0_1_0, Tclass._module.G(), $Heap);
            ##x#1_0_1_1 := x#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#1_0_1_1, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.mergePairs#canCall(x#0);
            ##x#1_0_1_0 := _module.__default.mergePairs($LS($LZ), x#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#1_0_1_0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume {:id "id833"} {:subsumption 0} !_module.List#Equal(##x#1_0_1_0, #_module.List.Nil());
            assume _module.__default.mergeAll#canCall(_module.__default.mergePairs($LS($LZ), x#0));
            ##xs#1_0_1_0 := _module.__default.mergeAll($LS($LZ), _module.__default.mergePairs($LS($LZ), x#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_1_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.mergeAll($LS($LZ), _module.__default.mergePairs($LS($LZ), x#0)));
            assume _module.__default.mergePairs#canCall(x#0)
               && _module.__default.mergeAll#canCall(_module.__default.mergePairs($LS($LZ), x#0))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.mergeAll($LS($LZ), _module.__default.mergePairs($LS($LZ), x#0)));
            // ----- Hint1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(593,5)
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(596,26)
            // TrCallStmt: Before ProcessCallStmt
            assume true;
            // ProcessCallStmt: CheckSubrange
            x##1_0_1_0 := x#0;
            call {:id "id834"} Call$$_module.__default.sorted__mergePairs(x##1_0_1_0);
            // TrCallStmt: After ProcessCallStmt
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(596,46)
            // TrCallStmt: Before ProcessCallStmt
            assume true;
            // ProcessCallStmt: CheckSubrange
            g##1_0_1_0 := g#0;
            ##x#1_0_1_2 := x#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#1_0_1_2, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.mergePairs#canCall(x#0);
            assume _module.__default.mergePairs#canCall(x#0);
            // ProcessCallStmt: CheckSubrange
            x##1_0_1_1 := _module.__default.mergePairs($LS($LZ), x#0);
            assert {:id "id835"} 0
                 <= _module.__default.length(Tclass._module.List(Tclass._module.G()), $LS($LZ), x#0)
               || _module.__default.length(Tclass._module.List(Tclass._module.G()), $LS($LZ), x##1_0_1_1)
                 == _module.__default.length(Tclass._module.List(Tclass._module.G()), $LS($LZ), x#0);
            assert {:id "id836"} _module.__default.length(Tclass._module.List(Tclass._module.G()), $LS($LZ), x##1_0_1_1)
               < _module.__default.length(Tclass._module.List(Tclass._module.G()), $LS($LZ), x#0);
            call {:id "id837"} Call$$_module.__default.stable__mergeAll(g##1_0_1_0, x##1_0_1_1);
            // TrCallStmt: After ProcessCallStmt
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(593,5)
            ##g#1_0_1_1 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#1_0_1_1, Tclass._module.G(), $Heap);
            ##x#1_0_1_4 := x#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#1_0_1_4, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.mergePairs#canCall(x#0);
            ##x#1_0_1_3 := _module.__default.mergePairs($LS($LZ), x#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#1_0_1_3, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.mergePairs($LS($LZ), x#0));
            ##xs#1_0_1_1 := _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.mergePairs($LS($LZ), x#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_1_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.mergePairs($LS($LZ), x#0)));
            assume _module.__default.mergePairs#canCall(x#0)
               && _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.mergePairs($LS($LZ), x#0))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.mergePairs($LS($LZ), x#0)));
            // ----- assert line1 == line2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(593,5)
            assert {:id "id838"} {:subsumption 0} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.mergeAll($LS($LS($LZ)), _module.__default.mergePairs($LS($LS($LZ)), x#0))), 
              _module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.flatten(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  _module.__default.mergePairs($LS($LS($LZ)), x#0))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(593,5)
            ##g#1_0_0_0 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#1_0_0_0, Tclass._module.G(), $Heap);
            ##x#1_0_0_1 := x#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#1_0_0_1, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.mergePairs#canCall(x#0);
            ##x#1_0_0_0 := _module.__default.mergePairs($LS($LZ), x#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#1_0_0_0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.mergePairs($LS($LZ), x#0));
            ##xs#1_0_0_0 := _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.mergePairs($LS($LZ), x#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_0_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.mergePairs($LS($LZ), x#0)));
            assume _module.__default.mergePairs#canCall(x#0)
               && _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.mergePairs($LS($LZ), x#0))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.mergePairs($LS($LZ), x#0)));
            // ----- Hint2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(593,5)
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(598,26)
            // TrCallStmt: Before ProcessCallStmt
            assume true;
            // ProcessCallStmt: CheckSubrange
            g##1_0_0_0 := g#0;
            assume true;
            // ProcessCallStmt: CheckSubrange
            x##1_0_0_0 := x#0;
            call {:id "id831"} Call$$_module.__default.stable__mergePairs(g##1_0_0_0, x##1_0_0_0);
            // TrCallStmt: After ProcessCallStmt
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(593,5)
            ##g#1_0_0_1 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#1_0_0_1, Tclass._module.G(), $Heap);
            ##x#1_0_0_2 := x#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#1_0_0_2, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.flatten#canCall(Tclass._module.G(), x#0);
            ##xs#1_0_0_1 := _module.__default.flatten(Tclass._module.G(), $LS($LZ), x#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#1_0_0_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, _module.__default.flatten(Tclass._module.G(), $LS($LZ), x#0));
            assume _module.__default.flatten#canCall(Tclass._module.G(), x#0)
               && _module.__default.filter#canCall(g#0, _module.__default.flatten(Tclass._module.G(), $LS($LZ), x#0));
            // ----- assert line2 == line3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(593,5)
            assert {:id "id832"} {:subsumption 0} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.flatten(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  _module.__default.mergePairs($LS($LS($LZ)), x#0))), 
              _module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.flatten(Tclass._module.G(), $LS($LS($LZ)), x#0)));
            assume false;
        }

        assume {:id "id843"} _module.List#Equal(_module.__default.filter($LS($LZ), g#0, _module.__default.mergeAll($LS($LZ), x#0)), 
          _module.__default.filter($LS($LZ), g#0, _module.__default.flatten(Tclass._module.G(), $LS($LZ), x#0)));
    }
}



procedure {:verboseName "stable_mergePairs (well-formedness)"} CheckWellFormed$$_module.__default.stable__mergePairs(g#0: Box
       where $IsBox(g#0, Tclass._module.G()) && $IsAllocBox(g#0, Tclass._module.G(), $Heap), 
    x#0: DatatypeType
       where $Is(x#0, Tclass._module.List(Tclass._module.List(Tclass._module.G())))
         && $IsAlloc(x#0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap)
         && $IsA#_module.List(x#0));
  free requires 5 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "stable_mergePairs (call)"} Call$$_module.__default.stable__mergePairs(g#0: Box
       where $IsBox(g#0, Tclass._module.G()) && $IsAllocBox(g#0, Tclass._module.G(), $Heap), 
    x#0: DatatypeType
       where $Is(x#0, Tclass._module.List(Tclass._module.List(Tclass._module.G())))
         && $IsAlloc(x#0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap)
         && $IsA#_module.List(x#0));
  // user-defined preconditions
  requires {:id "id846"} _module.__default.AllSorted#canCall(x#0)
     ==> _module.__default.AllSorted($LS($LZ), x#0)
       || (_module.List.Nil_q(x#0) ==> Lit(true));
  requires {:id "id847"} _module.__default.AllSorted#canCall(x#0)
     ==> _module.__default.AllSorted($LS($LZ), x#0)
       || (!_module.List.Nil_q(x#0)
         ==> (var y#2 := _module.List.tail(x#0); 
          (var xs#0 := $Unbox(_module.List.head(x#0)): DatatypeType; 
            _module.__default.sorted#canCall(xs#0)
               ==> _module.__default.sorted($LS($LZ), xs#0)
                 || (_module.List.Nil_q(xs#0) ==> Lit(true)))));
  requires {:id "id848"} _module.__default.AllSorted#canCall(x#0)
     ==> _module.__default.AllSorted($LS($LZ), x#0)
       || (!_module.List.Nil_q(x#0)
         ==> (var y#2 := _module.List.tail(x#0); 
          (var xs#0 := $Unbox(_module.List.head(x#0)): DatatypeType; 
            _module.__default.sorted#canCall(xs#0)
               ==> _module.__default.sorted($LS($LZ), xs#0)
                 || (!_module.List.Nil_q(xs#0)
                   ==> (var ys#0 := _module.List.tail(xs#0); 
                    (var a#0 := _module.List.head(xs#0); 
                      (forall y#0: Box :: 
                        { _module.__default.Below(a#0, y#0) } 
                          { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#0), y#0) } 
                        $IsBox(y#0, Tclass._module.G())
                           ==> 
                          MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#0), y#0)
                             > 0
                           ==> _module.__default.Below(a#0, y#0))))))));
  requires {:id "id849"} _module.__default.AllSorted#canCall(x#0)
     ==> _module.__default.AllSorted($LS($LZ), x#0)
       || (!_module.List.Nil_q(x#0)
         ==> (var y#2 := _module.List.tail(x#0); 
          (var xs#0 := $Unbox(_module.List.head(x#0)): DatatypeType; 
            _module.__default.sorted#canCall(xs#0)
               ==> _module.__default.sorted($LS($LZ), xs#0)
                 || (!_module.List.Nil_q(xs#0)
                   ==> (var ys#0 := _module.List.tail(xs#0); 
                    (var a#0 := _module.List.head(xs#0); 
                      _module.__default.sorted($LS($LS($LZ)), ys#0)))))));
  requires {:id "id850"} _module.__default.AllSorted#canCall(x#0)
     ==> _module.__default.AllSorted($LS($LZ), x#0)
       || (!_module.List.Nil_q(x#0)
         ==> (var y#2 := _module.List.tail(x#0); 
          (var xs#0 := $Unbox(_module.List.head(x#0)): DatatypeType; 
            _module.__default.AllSorted($LS($LS($LZ)), y#2))));
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#_module.List(_module.__default.filter($LS($LZ), 
        g#0, 
        _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.mergePairs($LS($LZ), x#0))))
     && $IsA#_module.List(_module.__default.filter($LS($LZ), g#0, _module.__default.flatten(Tclass._module.G(), $LS($LZ), x#0)))
     && 
    _module.__default.mergePairs#canCall(x#0)
     && _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.mergePairs($LS($LZ), x#0))
     && _module.__default.filter#canCall(g#0, 
      _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.mergePairs($LS($LZ), x#0)))
     && 
    _module.__default.flatten#canCall(Tclass._module.G(), x#0)
     && _module.__default.filter#canCall(g#0, _module.__default.flatten(Tclass._module.G(), $LS($LZ), x#0));
  ensures {:id "id851"} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
      g#0, 
      _module.__default.flatten(Tclass._module.G(), 
        $LS($LS($LZ)), 
        _module.__default.mergePairs($LS($LS($LZ)), x#0))), 
    _module.__default.filter($LS($LS($LZ)), 
      g#0, 
      _module.__default.flatten(Tclass._module.G(), $LS($LS($LZ)), x#0)));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "stable_mergePairs (correctness)"} Impl$$_module.__default.stable__mergePairs(g#0: Box
       where $IsBox(g#0, Tclass._module.G()) && $IsAllocBox(g#0, Tclass._module.G(), $Heap), 
    x#0: DatatypeType
       where $Is(x#0, Tclass._module.List(Tclass._module.List(Tclass._module.G())))
         && $IsAlloc(x#0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap)
         && $IsA#_module.List(x#0))
   returns ($_reverifyPost: bool);
  free requires 5 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id852"} _module.__default.AllSorted#canCall(x#0)
     && 
    _module.__default.AllSorted($LS($LZ), x#0)
     && (if _module.List.Nil_q(x#0)
       then true
       else (var y#7 := _module.List.tail(x#0); 
        (var xs#3 := $Unbox(_module.List.head(x#0)): DatatypeType; 
          _module.__default.sorted($LS($LZ), xs#3)
             && _module.__default.AllSorted($LS($LZ), y#7))));
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#_module.List(_module.__default.filter($LS($LZ), 
        g#0, 
        _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.mergePairs($LS($LZ), x#0))))
     && $IsA#_module.List(_module.__default.filter($LS($LZ), g#0, _module.__default.flatten(Tclass._module.G(), $LS($LZ), x#0)))
     && 
    _module.__default.mergePairs#canCall(x#0)
     && _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.mergePairs($LS($LZ), x#0))
     && _module.__default.filter#canCall(g#0, 
      _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.mergePairs($LS($LZ), x#0)))
     && 
    _module.__default.flatten#canCall(Tclass._module.G(), x#0)
     && _module.__default.filter#canCall(g#0, _module.__default.flatten(Tclass._module.G(), $LS($LZ), x#0));
  ensures {:id "id853"} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
      g#0, 
      _module.__default.flatten(Tclass._module.G(), 
        $LS($LS($LZ)), 
        _module.__default.mergePairs($LS($LS($LZ)), x#0))), 
    _module.__default.filter($LS($LS($LZ)), 
      g#0, 
      _module.__default.flatten(Tclass._module.G(), $LS($LS($LZ)), x#0)));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "stable_mergePairs (correctness)"} Impl$$_module.__default.stable__mergePairs(g#0: Box, x#0: DatatypeType) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $initHeapForallStmt#0: Heap;
  var ##g#0_0_0_0: Box;
  var ##xs#0_0_0_0: DatatypeType;
  var ##x#0_0_0_0: DatatypeType;
  var ##g#0_0_0_1: Box;
  var ##xs#0_0_0_1: DatatypeType;
  var ##x#0_0_0_1: DatatypeType;
  var ##g#0_0_1_0: Box;
  var ##xs#0_0_1_0: DatatypeType;
  var ##xs#0_0_1_1: DatatypeType;
  var ##ys#0_0_1_0: DatatypeType;
  var ##x#0_0_1_0: DatatypeType;
  var ##g#0_0_1_1: Box;
  var ##xs#0_0_1_2: DatatypeType;
  var ##x#0_0_1_1: DatatypeType;
  var ##g#0_0_2_0: Box;
  var ##xs#0_0_2_0: DatatypeType;
  var ##xs#0_0_2_1: DatatypeType;
  var ##ys#0_0_2_0: DatatypeType;
  var ##x#0_0_2_0: DatatypeType;
  var ##g#0_0_2_1: Box;
  var ##xs#0_0_2_2: DatatypeType;
  var ##xs#0_0_2_3: DatatypeType;
  var ##ys#0_0_2_1: DatatypeType;
  var ##x#0_0_2_1: DatatypeType;
  var ##g#0_0_3_0: Box;
  var ##xs#0_0_3_0: DatatypeType;
  var ##xs#0_0_3_1: DatatypeType;
  var ##ys#0_0_3_0: DatatypeType;
  var ##xs#0_0_3_2: DatatypeType;
  var ##ys#0_0_3_1: DatatypeType;
  var ##x#0_0_3_0: DatatypeType;
  var ##g#0_0_3_1: Box;
  var ##xs#0_0_3_3: DatatypeType;
  var ##xs#0_0_3_4: DatatypeType;
  var ##ys#0_0_3_2: DatatypeType;
  var ##x#0_0_3_1: DatatypeType;
  var ##g#0_0_4_0: Box;
  var ##xs#0_0_4_0: DatatypeType;
  var ##xs#0_0_4_1: DatatypeType;
  var ##xs#0_0_4_2: DatatypeType;
  var ##ys#0_0_4_0: DatatypeType;
  var ##ys#0_0_4_1: DatatypeType;
  var ##x#0_0_4_0: DatatypeType;
  var xs##0_0_4_0: DatatypeType;
  var ys##0_0_4_0: DatatypeType;
  var zs##0_0_4_0: DatatypeType;
  var ##x#0_0_4_1: DatatypeType;
  var ##g#0_0_4_1: Box;
  var ##xs#0_0_4_3: DatatypeType;
  var ##xs#0_0_4_4: DatatypeType;
  var ##ys#0_0_4_2: DatatypeType;
  var ##xs#0_0_4_5: DatatypeType;
  var ##ys#0_0_4_3: DatatypeType;
  var ##x#0_0_4_2: DatatypeType;
  var ##xs#0_0_5_0: DatatypeType;
  var ##g#0_0_5_0: Box;
  var ##xs#0_0_5_1: DatatypeType;
  var ##xs#0_0_5_2: DatatypeType;
  var ##ys#0_0_5_0: DatatypeType;
  var ##ys#0_0_5_1: DatatypeType;
  var ##g#0_0_5_1: Box;
  var ##xs#0_0_5_3: DatatypeType;
  var ##x#0_0_5_0: DatatypeType;
  var g##0_0_5_0: Box;
  var xs##0_0_5_0: DatatypeType;
  var ##xs#0_0_5_4: DatatypeType;
  var ##ys#0_0_5_2: DatatypeType;
  var ys##0_0_5_0: DatatypeType;
  var ##x#0_0_5_1: DatatypeType;
  var ##g#0_0_5_2: Box;
  var ##xs#0_0_5_5: DatatypeType;
  var ##xs#0_0_5_6: DatatypeType;
  var ##xs#0_0_5_7: DatatypeType;
  var ##ys#0_0_5_3: DatatypeType;
  var ##ys#0_0_5_4: DatatypeType;
  var ##x#0_0_5_2: DatatypeType;
  var ##xs#0_0_6_0: DatatypeType;
  var ##g#0_0_6_0: Box;
  var ##xs#0_0_6_1: DatatypeType;
  var ##xs#0_0_6_2: DatatypeType;
  var ##ys#0_0_6_0: DatatypeType;
  var ##ys#0_0_6_1: DatatypeType;
  var ##g#0_0_6_1: Box;
  var ##xs#0_0_6_3: DatatypeType;
  var ##x#0_0_6_0: DatatypeType;
  var g##0_0_6_0: Box;
  var xs##0_0_6_0: DatatypeType;
  var ys##0_0_6_0: DatatypeType;
  var ##xs#0_0_6_4: DatatypeType;
  var ##g#0_0_6_2: Box;
  var ##xs#0_0_6_5: DatatypeType;
  var ##xs#0_0_6_6: DatatypeType;
  var ##ys#0_0_6_2: DatatypeType;
  var ##ys#0_0_6_3: DatatypeType;
  var ##g#0_0_6_3: Box;
  var ##xs#0_0_6_7: DatatypeType;
  var ##x#0_0_6_1: DatatypeType;
  var ##xs#0_0_7_0: DatatypeType;
  var ##g#0_0_7_0: Box;
  var ##xs#0_0_7_1: DatatypeType;
  var ##xs#0_0_7_2: DatatypeType;
  var ##ys#0_0_7_0: DatatypeType;
  var ##ys#0_0_7_1: DatatypeType;
  var ##g#0_0_7_1: Box;
  var ##xs#0_0_7_3: DatatypeType;
  var ##x#0_0_7_0: DatatypeType;
  var ##x#0_0_7_1: DatatypeType;
  var g##0_0_7_0: Box;
  var x##0_0_7_0: DatatypeType;
  var ##xs#0_0_7_4: DatatypeType;
  var ##g#0_0_7_2: Box;
  var ##xs#0_0_7_5: DatatypeType;
  var ##xs#0_0_7_6: DatatypeType;
  var ##ys#0_0_7_2: DatatypeType;
  var ##ys#0_0_7_3: DatatypeType;
  var ##g#0_0_7_3: Box;
  var ##xs#0_0_7_7: DatatypeType;
  var ##x#0_0_7_2: DatatypeType;
  var ##g#0_0_8_0: Box;
  var ##xs#0_0_8_0: DatatypeType;
  var ##xs#0_0_8_1: DatatypeType;
  var ##xs#0_0_8_2: DatatypeType;
  var ##ys#0_0_8_0: DatatypeType;
  var ##ys#0_0_8_1: DatatypeType;
  var ##x#0_0_8_0: DatatypeType;
  var ##x#0_0_8_1: DatatypeType;
  var g##0_0_8_0: Box;
  var xs##0_0_8_0: DatatypeType;
  var ##xs#0_0_8_3: DatatypeType;
  var ##ys#0_0_8_2: DatatypeType;
  var ys##0_0_8_0: DatatypeType;
  var ##x#0_0_8_2: DatatypeType;
  var ##x#0_0_8_3: DatatypeType;
  var ##xs#0_0_8_4: DatatypeType;
  var ##g#0_0_8_1: Box;
  var ##xs#0_0_8_5: DatatypeType;
  var ##xs#0_0_8_6: DatatypeType;
  var ##ys#0_0_8_3: DatatypeType;
  var ##ys#0_0_8_4: DatatypeType;
  var ##g#0_0_8_2: Box;
  var ##xs#0_0_8_7: DatatypeType;
  var ##x#0_0_8_4: DatatypeType;
  var ##x#0_0_8_5: DatatypeType;
  var ##g#0_0_9_0: Box;
  var ##xs#0_0_9_0: DatatypeType;
  var ##x#0_0_9_0: DatatypeType;
  var ##xs#0_0_9_1: DatatypeType;
  var ##ys#0_0_9_0: DatatypeType;
  var ##x#0_0_9_1: DatatypeType;
  var ##g#0_0_9_1: Box;
  var ##xs#0_0_9_2: DatatypeType;
  var ##xs#0_0_9_3: DatatypeType;
  var ##xs#0_0_9_4: DatatypeType;
  var ##ys#0_0_9_1: DatatypeType;
  var ##ys#0_0_9_2: DatatypeType;
  var ##x#0_0_9_2: DatatypeType;
  var ##x#0_0_9_3: DatatypeType;
  var ##g#0_0_10_0: Box;
  var ##xs#0_0_10_0: DatatypeType;
  var ##x#0_0_10_0: DatatypeType;
  var ##x#0_0_10_1: DatatypeType;
  var ##g#0_0_10_1: Box;
  var ##xs#0_0_10_1: DatatypeType;
  var ##x#0_0_10_2: DatatypeType;
  var ##xs#0_0_10_2: DatatypeType;
  var ##ys#0_0_10_0: DatatypeType;
  var ##x#0_0_10_3: DatatypeType;
  var ##g#0_0_0: Box;
  var ##xs#0_0_0: DatatypeType;
  var ##x#0_0_0: DatatypeType;
  var ##x#0_0_1: DatatypeType;

    // AddMethodImpl: stable_mergePairs, Impl$$_module.__default.stable__mergePairs
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume $IsA#_module.List(x#0);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#x0#0: DatatypeType :: 
      { _module.__default.mergePairs($LS($LZ), $ih#x0#0) } 
        { _module.__default.AllSorted($LS($LZ), $ih#x0#0) } 
      $Is($ih#x0#0, Tclass._module.List(Tclass._module.List(Tclass._module.G())))
           && _module.__default.AllSorted($LS($LZ), $ih#x0#0)
           && DtRank($ih#x0#0) < DtRank(x#0)
         ==> _module.List#Equal(_module.__default.filter($LS($LZ), 
            g#0, 
            _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.mergePairs($LS($LZ), $ih#x0#0))), 
          _module.__default.filter($LS($LZ), g#0, _module.__default.flatten(Tclass._module.G(), $LS($LZ), $ih#x0#0))));
    $_reverifyPost := false;
    // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(608,3)
    if (_module.List.Cons_q(x#0))
    {
        assert {:id "id854"} _module.List.Cons_q(x#0);
    }

    assume true;
    if (_module.List.Cons_q(x#0) && _module.List.Cons_q(_module.List.tail(x#0)))
    {
        // ----- calc statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(609,5)
        // Assume Fuel Constant
        if (*)
        {
            // ----- assert wf[initial] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(609,5)
            ##g#0_0_0 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_0, Tclass._module.G(), $Heap);
            ##x#0_0_1 := x#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#0_0_1, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.mergePairs#canCall(x#0);
            ##x#0_0_0 := _module.__default.mergePairs($LS($LZ), x#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#0_0_0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.mergePairs($LS($LZ), x#0));
            ##xs#0_0_0 := _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.mergePairs($LS($LZ), x#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.mergePairs($LS($LZ), x#0)));
            assume _module.__default.mergePairs#canCall(x#0)
               && _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.mergePairs($LS($LZ), x#0))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.mergePairs($LS($LZ), x#0)));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(609,5)
            ##g#0_0_10_0 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_10_0, Tclass._module.G(), $Heap);
            ##x#0_0_10_1 := x#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#0_0_10_1, 
              Tclass._module.List(Tclass._module.List(Tclass._module.G())), 
              $Heap);
            assume _module.__default.mergePairs#canCall(x#0);
            ##x#0_0_10_0 := _module.__default.mergePairs($LS($LZ), x#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#0_0_10_0, 
              Tclass._module.List(Tclass._module.List(Tclass._module.G())), 
              $Heap);
            assume _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.mergePairs($LS($LZ), x#0));
            ##xs#0_0_10_0 := _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.mergePairs($LS($LZ), x#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_10_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.mergePairs($LS($LZ), x#0)));
            assume _module.__default.mergePairs#canCall(x#0)
               && _module.__default.flatten#canCall(Tclass._module.G(), _module.__default.mergePairs($LS($LZ), x#0))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.mergePairs($LS($LZ), x#0)));
            // ----- Hint0 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(609,5)
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(609,5)
            ##g#0_0_10_1 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_10_1, Tclass._module.G(), $Heap);
            assert {:id "id974"} _module.List.Cons_q(x#0);
            ##xs#0_0_10_2 := $Unbox(_module.List.head(x#0)): DatatypeType;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_10_2, Tclass._module.List(Tclass._module.G()), $Heap);
            assert {:id "id975"} _module.List.Cons_q(x#0);
            assert {:id "id976"} _module.List.Cons_q(_module.List.tail(x#0));
            ##ys#0_0_10_0 := $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_10_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.merge#canCall($Unbox(_module.List.head(x#0)): DatatypeType, 
              $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType);
            assert {:id "id977"} _module.List.Cons_q(x#0);
            assert {:id "id978"} _module.List.Cons_q(_module.List.tail(x#0));
            ##x#0_0_10_3 := _module.List.tail(_module.List.tail(x#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#0_0_10_3, 
              Tclass._module.List(Tclass._module.List(Tclass._module.G())), 
              $Heap);
            assume _module.__default.mergePairs#canCall(_module.List.tail(_module.List.tail(x#0)));
            ##x#0_0_10_2 := #_module.List.Cons($Box(_module.__default.merge($LS($LZ), 
                  $Unbox(_module.List.head(x#0)): DatatypeType, 
                  $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)), 
              _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0))));
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#0_0_10_2, 
              Tclass._module.List(Tclass._module.List(Tclass._module.G())), 
              $Heap);
            assume _module.__default.flatten#canCall(Tclass._module.G(), 
              #_module.List.Cons($Box(_module.__default.merge($LS($LZ), 
                    $Unbox(_module.List.head(x#0)): DatatypeType, 
                    $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)), 
                _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0)))));
            ##xs#0_0_10_1 := _module.__default.flatten(Tclass._module.G(), 
              $LS($LZ), 
              #_module.List.Cons($Box(_module.__default.merge($LS($LZ), 
                    $Unbox(_module.List.head(x#0)): DatatypeType, 
                    $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)), 
                _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0)))));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_10_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.flatten(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons($Box(_module.__default.merge($LS($LZ), 
                      $Unbox(_module.List.head(x#0)): DatatypeType, 
                      $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)), 
                  _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0))))));
            assume _module.__default.merge#canCall($Unbox(_module.List.head(x#0)): DatatypeType, 
                $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)
               && _module.__default.mergePairs#canCall(_module.List.tail(_module.List.tail(x#0)))
               && _module.__default.flatten#canCall(Tclass._module.G(), 
                #_module.List.Cons($Box(_module.__default.merge($LS($LZ), 
                      $Unbox(_module.List.head(x#0)): DatatypeType, 
                      $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)), 
                  _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0)))))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.flatten(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons($Box(_module.__default.merge($LS($LZ), 
                        $Unbox(_module.List.head(x#0)): DatatypeType, 
                        $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)), 
                    _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0))))));
            // ----- assert line0 == line1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(609,5)
            assert {:id "id979"} {:subsumption 0} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.flatten(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  _module.__default.mergePairs($LS($LS($LZ)), x#0))), 
              _module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.flatten(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  #_module.List.Cons($Box(_module.__default.merge($LS($LS($LZ)), 
                        $Unbox(_module.List.head(x#0)): DatatypeType, 
                        $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)), 
                    _module.__default.mergePairs($LS($LS($LZ)), _module.List.tail(_module.List.tail(x#0)))))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(609,5)
            ##g#0_0_9_0 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_9_0, Tclass._module.G(), $Heap);
            assume {:id "id963"} _module.List.Cons_q(x#0);
            ##xs#0_0_9_1 := $Unbox(_module.List.head(x#0)): DatatypeType;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_9_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume {:id "id964"} _module.List.Cons_q(x#0);
            assume {:id "id965"} _module.List.Cons_q(_module.List.tail(x#0));
            ##ys#0_0_9_0 := $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_9_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.merge#canCall($Unbox(_module.List.head(x#0)): DatatypeType, 
              $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType);
            assume {:id "id966"} _module.List.Cons_q(x#0);
            assume {:id "id967"} _module.List.Cons_q(_module.List.tail(x#0));
            ##x#0_0_9_1 := _module.List.tail(_module.List.tail(x#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#0_0_9_1, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.mergePairs#canCall(_module.List.tail(_module.List.tail(x#0)));
            ##x#0_0_9_0 := #_module.List.Cons($Box(_module.__default.merge($LS($LZ), 
                  $Unbox(_module.List.head(x#0)): DatatypeType, 
                  $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)), 
              _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0))));
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#0_0_9_0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.flatten#canCall(Tclass._module.G(), 
              #_module.List.Cons($Box(_module.__default.merge($LS($LZ), 
                    $Unbox(_module.List.head(x#0)): DatatypeType, 
                    $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)), 
                _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0)))));
            ##xs#0_0_9_0 := _module.__default.flatten(Tclass._module.G(), 
              $LS($LZ), 
              #_module.List.Cons($Box(_module.__default.merge($LS($LZ), 
                    $Unbox(_module.List.head(x#0)): DatatypeType, 
                    $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)), 
                _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0)))));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_9_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.flatten(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons($Box(_module.__default.merge($LS($LZ), 
                      $Unbox(_module.List.head(x#0)): DatatypeType, 
                      $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)), 
                  _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0))))));
            assume _module.__default.merge#canCall($Unbox(_module.List.head(x#0)): DatatypeType, 
                $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)
               && _module.__default.mergePairs#canCall(_module.List.tail(_module.List.tail(x#0)))
               && _module.__default.flatten#canCall(Tclass._module.G(), 
                #_module.List.Cons($Box(_module.__default.merge($LS($LZ), 
                      $Unbox(_module.List.head(x#0)): DatatypeType, 
                      $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)), 
                  _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0)))))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.flatten(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons($Box(_module.__default.merge($LS($LZ), 
                        $Unbox(_module.List.head(x#0)): DatatypeType, 
                        $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)), 
                    _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0))))));
            // ----- Hint1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(609,5)
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(609,5)
            ##g#0_0_9_1 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_9_1, Tclass._module.G(), $Heap);
            assert {:id "id968"} _module.List.Cons_q(x#0);
            ##xs#0_0_9_4 := $Unbox(_module.List.head(x#0)): DatatypeType;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_9_4, Tclass._module.List(Tclass._module.G()), $Heap);
            assert {:id "id969"} _module.List.Cons_q(x#0);
            assert {:id "id970"} _module.List.Cons_q(_module.List.tail(x#0));
            ##ys#0_0_9_1 := $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_9_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.merge#canCall($Unbox(_module.List.head(x#0)): DatatypeType, 
              $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType);
            ##xs#0_0_9_3 := _module.__default.merge($LS($LZ), 
              $Unbox(_module.List.head(x#0)): DatatypeType, 
              $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_9_3, Tclass._module.List(Tclass._module.G()), $Heap);
            assert {:id "id971"} _module.List.Cons_q(x#0);
            assert {:id "id972"} _module.List.Cons_q(_module.List.tail(x#0));
            ##x#0_0_9_3 := _module.List.tail(_module.List.tail(x#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#0_0_9_3, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.mergePairs#canCall(_module.List.tail(_module.List.tail(x#0)));
            ##x#0_0_9_2 := _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0)));
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#0_0_9_2, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.flatten#canCall(Tclass._module.G(), 
              _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0))));
            ##ys#0_0_9_2 := _module.__default.flatten(Tclass._module.G(), 
              $LS($LZ), 
              _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0))));
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_9_2, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              _module.__default.merge($LS($LZ), 
                $Unbox(_module.List.head(x#0)): DatatypeType, 
                $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType), 
              _module.__default.flatten(Tclass._module.G(), 
                $LS($LZ), 
                _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0)))));
            ##xs#0_0_9_2 := _module.__default.append(Tclass._module.G(), 
              $LS($LZ), 
              _module.__default.merge($LS($LZ), 
                $Unbox(_module.List.head(x#0)): DatatypeType, 
                $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType), 
              _module.__default.flatten(Tclass._module.G(), 
                $LS($LZ), 
                _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0)))));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_9_2, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                _module.__default.merge($LS($LZ), 
                  $Unbox(_module.List.head(x#0)): DatatypeType, 
                  $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType), 
                _module.__default.flatten(Tclass._module.G(), 
                  $LS($LZ), 
                  _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0))))));
            assume _module.__default.merge#canCall($Unbox(_module.List.head(x#0)): DatatypeType, 
                $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)
               && 
              _module.__default.mergePairs#canCall(_module.List.tail(_module.List.tail(x#0)))
               && _module.__default.flatten#canCall(Tclass._module.G(), 
                _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0))))
               && _module.__default.append#canCall(Tclass._module.G(), 
                _module.__default.merge($LS($LZ), 
                  $Unbox(_module.List.head(x#0)): DatatypeType, 
                  $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType), 
                _module.__default.flatten(Tclass._module.G(), 
                  $LS($LZ), 
                  _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0)))))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  _module.__default.merge($LS($LZ), 
                    $Unbox(_module.List.head(x#0)): DatatypeType, 
                    $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType), 
                  _module.__default.flatten(Tclass._module.G(), 
                    $LS($LZ), 
                    _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0))))));
            // ----- assert line1 == line2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(609,5)
            assert {:id "id973"} {:subsumption 0} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.flatten(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  #_module.List.Cons($Box(_module.__default.merge($LS($LS($LZ)), 
                        $Unbox(_module.List.head(x#0)): DatatypeType, 
                        $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)), 
                    _module.__default.mergePairs($LS($LS($LZ)), _module.List.tail(_module.List.tail(x#0)))))), 
              _module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  _module.__default.merge($LS($LS($LZ)), 
                    $Unbox(_module.List.head(x#0)): DatatypeType, 
                    $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType), 
                  _module.__default.flatten(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    _module.__default.mergePairs($LS($LS($LZ)), _module.List.tail(_module.List.tail(x#0)))))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(609,5)
            ##g#0_0_8_0 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_8_0, Tclass._module.G(), $Heap);
            assume {:id "id946"} _module.List.Cons_q(x#0);
            ##xs#0_0_8_2 := $Unbox(_module.List.head(x#0)): DatatypeType;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_8_2, Tclass._module.List(Tclass._module.G()), $Heap);
            assume {:id "id947"} _module.List.Cons_q(x#0);
            assume {:id "id948"} _module.List.Cons_q(_module.List.tail(x#0));
            ##ys#0_0_8_0 := $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_8_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.merge#canCall($Unbox(_module.List.head(x#0)): DatatypeType, 
              $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType);
            ##xs#0_0_8_1 := _module.__default.merge($LS($LZ), 
              $Unbox(_module.List.head(x#0)): DatatypeType, 
              $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_8_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume {:id "id949"} _module.List.Cons_q(x#0);
            assume {:id "id950"} _module.List.Cons_q(_module.List.tail(x#0));
            ##x#0_0_8_1 := _module.List.tail(_module.List.tail(x#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#0_0_8_1, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.mergePairs#canCall(_module.List.tail(_module.List.tail(x#0)));
            ##x#0_0_8_0 := _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0)));
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#0_0_8_0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.flatten#canCall(Tclass._module.G(), 
              _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0))));
            ##ys#0_0_8_1 := _module.__default.flatten(Tclass._module.G(), 
              $LS($LZ), 
              _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0))));
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_8_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              _module.__default.merge($LS($LZ), 
                $Unbox(_module.List.head(x#0)): DatatypeType, 
                $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType), 
              _module.__default.flatten(Tclass._module.G(), 
                $LS($LZ), 
                _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0)))));
            ##xs#0_0_8_0 := _module.__default.append(Tclass._module.G(), 
              $LS($LZ), 
              _module.__default.merge($LS($LZ), 
                $Unbox(_module.List.head(x#0)): DatatypeType, 
                $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType), 
              _module.__default.flatten(Tclass._module.G(), 
                $LS($LZ), 
                _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0)))));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_8_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                _module.__default.merge($LS($LZ), 
                  $Unbox(_module.List.head(x#0)): DatatypeType, 
                  $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType), 
                _module.__default.flatten(Tclass._module.G(), 
                  $LS($LZ), 
                  _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0))))));
            assume _module.__default.merge#canCall($Unbox(_module.List.head(x#0)): DatatypeType, 
                $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)
               && 
              _module.__default.mergePairs#canCall(_module.List.tail(_module.List.tail(x#0)))
               && _module.__default.flatten#canCall(Tclass._module.G(), 
                _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0))))
               && _module.__default.append#canCall(Tclass._module.G(), 
                _module.__default.merge($LS($LZ), 
                  $Unbox(_module.List.head(x#0)): DatatypeType, 
                  $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType), 
                _module.__default.flatten(Tclass._module.G(), 
                  $LS($LZ), 
                  _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0)))))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  _module.__default.merge($LS($LZ), 
                    $Unbox(_module.List.head(x#0)): DatatypeType, 
                    $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType), 
                  _module.__default.flatten(Tclass._module.G(), 
                    $LS($LZ), 
                    _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0))))));
            // ----- Hint2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(609,5)
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(615,22)
            // TrCallStmt: Before ProcessCallStmt
            assume true;
            // ProcessCallStmt: CheckSubrange
            g##0_0_8_0 := g#0;
            assert {:id "id951"} _module.List.Cons_q(x#0);
            ##xs#0_0_8_3 := $Unbox(_module.List.head(x#0)): DatatypeType;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_8_3, Tclass._module.List(Tclass._module.G()), $Heap);
            assert {:id "id952"} _module.List.Cons_q(x#0);
            assert {:id "id953"} _module.List.Cons_q(_module.List.tail(x#0));
            ##ys#0_0_8_2 := $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_8_2, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.merge#canCall($Unbox(_module.List.head(x#0)): DatatypeType, 
              $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType);
            assume _module.__default.merge#canCall($Unbox(_module.List.head(x#0)): DatatypeType, 
              $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType);
            // ProcessCallStmt: CheckSubrange
            xs##0_0_8_0 := _module.__default.merge($LS($LZ), 
              $Unbox(_module.List.head(x#0)): DatatypeType, 
              $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType);
            assert {:id "id954"} _module.List.Cons_q(x#0);
            assert {:id "id955"} _module.List.Cons_q(_module.List.tail(x#0));
            ##x#0_0_8_3 := _module.List.tail(_module.List.tail(x#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#0_0_8_3, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.mergePairs#canCall(_module.List.tail(_module.List.tail(x#0)));
            ##x#0_0_8_2 := _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0)));
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#0_0_8_2, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.flatten#canCall(Tclass._module.G(), 
              _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0))));
            assume _module.__default.mergePairs#canCall(_module.List.tail(_module.List.tail(x#0)))
               && _module.__default.flatten#canCall(Tclass._module.G(), 
                _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0))));
            // ProcessCallStmt: CheckSubrange
            ys##0_0_8_0 := _module.__default.flatten(Tclass._module.G(), 
              $LS($LZ), 
              _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0))));
            call {:id "id956"} Call$$_module.__default.filter__append(g##0_0_8_0, xs##0_0_8_0, ys##0_0_8_0);
            // TrCallStmt: After ProcessCallStmt
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(609,5)
            ##g#0_0_8_1 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_8_1, Tclass._module.G(), $Heap);
            assert {:id "id957"} _module.List.Cons_q(x#0);
            ##xs#0_0_8_6 := $Unbox(_module.List.head(x#0)): DatatypeType;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_8_6, Tclass._module.List(Tclass._module.G()), $Heap);
            assert {:id "id958"} _module.List.Cons_q(x#0);
            assert {:id "id959"} _module.List.Cons_q(_module.List.tail(x#0));
            ##ys#0_0_8_3 := $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_8_3, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.merge#canCall($Unbox(_module.List.head(x#0)): DatatypeType, 
              $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType);
            ##xs#0_0_8_5 := _module.__default.merge($LS($LZ), 
              $Unbox(_module.List.head(x#0)): DatatypeType, 
              $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_8_5, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.merge($LS($LZ), 
                $Unbox(_module.List.head(x#0)): DatatypeType, 
                $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType));
            ##xs#0_0_8_4 := _module.__default.filter($LS($LZ), 
              g#0, 
              _module.__default.merge($LS($LZ), 
                $Unbox(_module.List.head(x#0)): DatatypeType, 
                $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_8_4, Tclass._module.List(Tclass._module.G()), $Heap);
            ##g#0_0_8_2 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_8_2, Tclass._module.G(), $Heap);
            assert {:id "id960"} _module.List.Cons_q(x#0);
            assert {:id "id961"} _module.List.Cons_q(_module.List.tail(x#0));
            ##x#0_0_8_5 := _module.List.tail(_module.List.tail(x#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#0_0_8_5, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.mergePairs#canCall(_module.List.tail(_module.List.tail(x#0)));
            ##x#0_0_8_4 := _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0)));
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#0_0_8_4, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.flatten#canCall(Tclass._module.G(), 
              _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0))));
            ##xs#0_0_8_7 := _module.__default.flatten(Tclass._module.G(), 
              $LS($LZ), 
              _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0))));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_8_7, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.flatten(Tclass._module.G(), 
                $LS($LZ), 
                _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0)))));
            ##ys#0_0_8_4 := _module.__default.filter($LS($LZ), 
              g#0, 
              _module.__default.flatten(Tclass._module.G(), 
                $LS($LZ), 
                _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0)))));
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_8_4, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              _module.__default.filter($LS($LZ), 
                g#0, 
                _module.__default.merge($LS($LZ), 
                  $Unbox(_module.List.head(x#0)): DatatypeType, 
                  $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)), 
              _module.__default.filter($LS($LZ), 
                g#0, 
                _module.__default.flatten(Tclass._module.G(), 
                  $LS($LZ), 
                  _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0))))));
            assume _module.__default.merge#canCall($Unbox(_module.List.head(x#0)): DatatypeType, 
                $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)
               && _module.__default.filter#canCall(g#0, 
                _module.__default.merge($LS($LZ), 
                  $Unbox(_module.List.head(x#0)): DatatypeType, 
                  $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType))
               && 
              _module.__default.mergePairs#canCall(_module.List.tail(_module.List.tail(x#0)))
               && _module.__default.flatten#canCall(Tclass._module.G(), 
                _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0))))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.flatten(Tclass._module.G(), 
                  $LS($LZ), 
                  _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0)))))
               && _module.__default.append#canCall(Tclass._module.G(), 
                _module.__default.filter($LS($LZ), 
                  g#0, 
                  _module.__default.merge($LS($LZ), 
                    $Unbox(_module.List.head(x#0)): DatatypeType, 
                    $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)), 
                _module.__default.filter($LS($LZ), 
                  g#0, 
                  _module.__default.flatten(Tclass._module.G(), 
                    $LS($LZ), 
                    _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0))))));
            // ----- assert line2 == line3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(609,5)
            assert {:id "id962"} {:subsumption 0} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  _module.__default.merge($LS($LS($LZ)), 
                    $Unbox(_module.List.head(x#0)): DatatypeType, 
                    $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType), 
                  _module.__default.flatten(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    _module.__default.mergePairs($LS($LS($LZ)), _module.List.tail(_module.List.tail(x#0)))))), 
              _module.__default.append(Tclass._module.G(), 
                $LS($LS($LZ)), 
                _module.__default.filter($LS($LS($LZ)), 
                  g#0, 
                  _module.__default.merge($LS($LS($LZ)), 
                    $Unbox(_module.List.head(x#0)): DatatypeType, 
                    $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)), 
                _module.__default.filter($LS($LS($LZ)), 
                  g#0, 
                  _module.__default.flatten(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    _module.__default.mergePairs($LS($LS($LZ)), _module.List.tail(_module.List.tail(x#0)))))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(609,5)
            ##g#0_0_7_0 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_7_0, Tclass._module.G(), $Heap);
            assume {:id "id931"} _module.List.Cons_q(x#0);
            ##xs#0_0_7_2 := $Unbox(_module.List.head(x#0)): DatatypeType;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_7_2, Tclass._module.List(Tclass._module.G()), $Heap);
            assume {:id "id932"} _module.List.Cons_q(x#0);
            assume {:id "id933"} _module.List.Cons_q(_module.List.tail(x#0));
            ##ys#0_0_7_0 := $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_7_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.merge#canCall($Unbox(_module.List.head(x#0)): DatatypeType, 
              $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType);
            ##xs#0_0_7_1 := _module.__default.merge($LS($LZ), 
              $Unbox(_module.List.head(x#0)): DatatypeType, 
              $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_7_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.merge($LS($LZ), 
                $Unbox(_module.List.head(x#0)): DatatypeType, 
                $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType));
            ##xs#0_0_7_0 := _module.__default.filter($LS($LZ), 
              g#0, 
              _module.__default.merge($LS($LZ), 
                $Unbox(_module.List.head(x#0)): DatatypeType, 
                $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_7_0, Tclass._module.List(Tclass._module.G()), $Heap);
            ##g#0_0_7_1 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_7_1, Tclass._module.G(), $Heap);
            assume {:id "id934"} _module.List.Cons_q(x#0);
            assume {:id "id935"} _module.List.Cons_q(_module.List.tail(x#0));
            ##x#0_0_7_1 := _module.List.tail(_module.List.tail(x#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#0_0_7_1, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.mergePairs#canCall(_module.List.tail(_module.List.tail(x#0)));
            ##x#0_0_7_0 := _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0)));
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#0_0_7_0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.flatten#canCall(Tclass._module.G(), 
              _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0))));
            ##xs#0_0_7_3 := _module.__default.flatten(Tclass._module.G(), 
              $LS($LZ), 
              _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0))));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_7_3, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.flatten(Tclass._module.G(), 
                $LS($LZ), 
                _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0)))));
            ##ys#0_0_7_1 := _module.__default.filter($LS($LZ), 
              g#0, 
              _module.__default.flatten(Tclass._module.G(), 
                $LS($LZ), 
                _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0)))));
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_7_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              _module.__default.filter($LS($LZ), 
                g#0, 
                _module.__default.merge($LS($LZ), 
                  $Unbox(_module.List.head(x#0)): DatatypeType, 
                  $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)), 
              _module.__default.filter($LS($LZ), 
                g#0, 
                _module.__default.flatten(Tclass._module.G(), 
                  $LS($LZ), 
                  _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0))))));
            assume _module.__default.merge#canCall($Unbox(_module.List.head(x#0)): DatatypeType, 
                $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)
               && _module.__default.filter#canCall(g#0, 
                _module.__default.merge($LS($LZ), 
                  $Unbox(_module.List.head(x#0)): DatatypeType, 
                  $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType))
               && 
              _module.__default.mergePairs#canCall(_module.List.tail(_module.List.tail(x#0)))
               && _module.__default.flatten#canCall(Tclass._module.G(), 
                _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0))))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.flatten(Tclass._module.G(), 
                  $LS($LZ), 
                  _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0)))))
               && _module.__default.append#canCall(Tclass._module.G(), 
                _module.__default.filter($LS($LZ), 
                  g#0, 
                  _module.__default.merge($LS($LZ), 
                    $Unbox(_module.List.head(x#0)): DatatypeType, 
                    $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)), 
                _module.__default.filter($LS($LZ), 
                  g#0, 
                  _module.__default.flatten(Tclass._module.G(), 
                    $LS($LZ), 
                    _module.__default.mergePairs($LS($LZ), _module.List.tail(_module.List.tail(x#0))))));
            // ----- Hint3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(609,5)
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(617,26)
            // TrCallStmt: Before ProcessCallStmt
            assume true;
            // ProcessCallStmt: CheckSubrange
            g##0_0_7_0 := g#0;
            assert {:id "id936"} _module.List.Cons_q(x#0);
            assert {:id "id937"} _module.List.Cons_q(_module.List.tail(x#0));
            assume true;
            // ProcessCallStmt: CheckSubrange
            x##0_0_7_0 := _module.List.tail(_module.List.tail(x#0));
            assert {:id "id938"} DtRank(x##0_0_7_0) < DtRank(x#0);
            call {:id "id939"} Call$$_module.__default.stable__mergePairs(g##0_0_7_0, x##0_0_7_0);
            // TrCallStmt: After ProcessCallStmt
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(609,5)
            ##g#0_0_7_2 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_7_2, Tclass._module.G(), $Heap);
            assert {:id "id940"} _module.List.Cons_q(x#0);
            ##xs#0_0_7_6 := $Unbox(_module.List.head(x#0)): DatatypeType;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_7_6, Tclass._module.List(Tclass._module.G()), $Heap);
            assert {:id "id941"} _module.List.Cons_q(x#0);
            assert {:id "id942"} _module.List.Cons_q(_module.List.tail(x#0));
            ##ys#0_0_7_2 := $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_7_2, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.merge#canCall($Unbox(_module.List.head(x#0)): DatatypeType, 
              $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType);
            ##xs#0_0_7_5 := _module.__default.merge($LS($LZ), 
              $Unbox(_module.List.head(x#0)): DatatypeType, 
              $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_7_5, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.merge($LS($LZ), 
                $Unbox(_module.List.head(x#0)): DatatypeType, 
                $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType));
            ##xs#0_0_7_4 := _module.__default.filter($LS($LZ), 
              g#0, 
              _module.__default.merge($LS($LZ), 
                $Unbox(_module.List.head(x#0)): DatatypeType, 
                $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_7_4, Tclass._module.List(Tclass._module.G()), $Heap);
            ##g#0_0_7_3 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_7_3, Tclass._module.G(), $Heap);
            assert {:id "id943"} _module.List.Cons_q(x#0);
            assert {:id "id944"} _module.List.Cons_q(_module.List.tail(x#0));
            ##x#0_0_7_2 := _module.List.tail(_module.List.tail(x#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#0_0_7_2, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.flatten#canCall(Tclass._module.G(), _module.List.tail(_module.List.tail(x#0)));
            ##xs#0_0_7_7 := _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(_module.List.tail(x#0)));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_7_7, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(_module.List.tail(x#0))));
            ##ys#0_0_7_3 := _module.__default.filter($LS($LZ), 
              g#0, 
              _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(_module.List.tail(x#0))));
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_7_3, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              _module.__default.filter($LS($LZ), 
                g#0, 
                _module.__default.merge($LS($LZ), 
                  $Unbox(_module.List.head(x#0)): DatatypeType, 
                  $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)), 
              _module.__default.filter($LS($LZ), 
                g#0, 
                _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(_module.List.tail(x#0)))));
            assume _module.__default.merge#canCall($Unbox(_module.List.head(x#0)): DatatypeType, 
                $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)
               && _module.__default.filter#canCall(g#0, 
                _module.__default.merge($LS($LZ), 
                  $Unbox(_module.List.head(x#0)): DatatypeType, 
                  $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType))
               && 
              _module.__default.flatten#canCall(Tclass._module.G(), _module.List.tail(_module.List.tail(x#0)))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(_module.List.tail(x#0))))
               && _module.__default.append#canCall(Tclass._module.G(), 
                _module.__default.filter($LS($LZ), 
                  g#0, 
                  _module.__default.merge($LS($LZ), 
                    $Unbox(_module.List.head(x#0)): DatatypeType, 
                    $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)), 
                _module.__default.filter($LS($LZ), 
                  g#0, 
                  _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(_module.List.tail(x#0)))));
            // ----- assert line3 == line4 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(609,5)
            assert {:id "id945"} {:subsumption 0} _module.List#Equal(_module.__default.append(Tclass._module.G(), 
                $LS($LS($LZ)), 
                _module.__default.filter($LS($LS($LZ)), 
                  g#0, 
                  _module.__default.merge($LS($LS($LZ)), 
                    $Unbox(_module.List.head(x#0)): DatatypeType, 
                    $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)), 
                _module.__default.filter($LS($LS($LZ)), 
                  g#0, 
                  _module.__default.flatten(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    _module.__default.mergePairs($LS($LS($LZ)), _module.List.tail(_module.List.tail(x#0)))))), 
              _module.__default.append(Tclass._module.G(), 
                $LS($LS($LZ)), 
                _module.__default.filter($LS($LS($LZ)), 
                  g#0, 
                  _module.__default.merge($LS($LS($LZ)), 
                    $Unbox(_module.List.head(x#0)): DatatypeType, 
                    $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)), 
                _module.__default.filter($LS($LS($LZ)), 
                  g#0, 
                  _module.__default.flatten(Tclass._module.G(), $LS($LS($LZ)), _module.List.tail(_module.List.tail(x#0))))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(609,5)
            ##g#0_0_6_0 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_6_0, Tclass._module.G(), $Heap);
            assume {:id "id916"} _module.List.Cons_q(x#0);
            ##xs#0_0_6_2 := $Unbox(_module.List.head(x#0)): DatatypeType;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_6_2, Tclass._module.List(Tclass._module.G()), $Heap);
            assume {:id "id917"} _module.List.Cons_q(x#0);
            assume {:id "id918"} _module.List.Cons_q(_module.List.tail(x#0));
            ##ys#0_0_6_0 := $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_6_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.merge#canCall($Unbox(_module.List.head(x#0)): DatatypeType, 
              $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType);
            ##xs#0_0_6_1 := _module.__default.merge($LS($LZ), 
              $Unbox(_module.List.head(x#0)): DatatypeType, 
              $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_6_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.merge($LS($LZ), 
                $Unbox(_module.List.head(x#0)): DatatypeType, 
                $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType));
            ##xs#0_0_6_0 := _module.__default.filter($LS($LZ), 
              g#0, 
              _module.__default.merge($LS($LZ), 
                $Unbox(_module.List.head(x#0)): DatatypeType, 
                $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_6_0, Tclass._module.List(Tclass._module.G()), $Heap);
            ##g#0_0_6_1 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_6_1, Tclass._module.G(), $Heap);
            assume {:id "id919"} _module.List.Cons_q(x#0);
            assume {:id "id920"} _module.List.Cons_q(_module.List.tail(x#0));
            ##x#0_0_6_0 := _module.List.tail(_module.List.tail(x#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#0_0_6_0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.flatten#canCall(Tclass._module.G(), _module.List.tail(_module.List.tail(x#0)));
            ##xs#0_0_6_3 := _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(_module.List.tail(x#0)));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_6_3, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(_module.List.tail(x#0))));
            ##ys#0_0_6_1 := _module.__default.filter($LS($LZ), 
              g#0, 
              _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(_module.List.tail(x#0))));
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_6_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              _module.__default.filter($LS($LZ), 
                g#0, 
                _module.__default.merge($LS($LZ), 
                  $Unbox(_module.List.head(x#0)): DatatypeType, 
                  $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)), 
              _module.__default.filter($LS($LZ), 
                g#0, 
                _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(_module.List.tail(x#0)))));
            assume _module.__default.merge#canCall($Unbox(_module.List.head(x#0)): DatatypeType, 
                $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)
               && _module.__default.filter#canCall(g#0, 
                _module.__default.merge($LS($LZ), 
                  $Unbox(_module.List.head(x#0)): DatatypeType, 
                  $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType))
               && 
              _module.__default.flatten#canCall(Tclass._module.G(), _module.List.tail(_module.List.tail(x#0)))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(_module.List.tail(x#0))))
               && _module.__default.append#canCall(Tclass._module.G(), 
                _module.__default.filter($LS($LZ), 
                  g#0, 
                  _module.__default.merge($LS($LZ), 
                    $Unbox(_module.List.head(x#0)): DatatypeType, 
                    $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)), 
                _module.__default.filter($LS($LZ), 
                  g#0, 
                  _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(_module.List.tail(x#0)))));
            // ----- Hint4 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(609,5)
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(619,21)
            // TrCallStmt: Before ProcessCallStmt
            assume true;
            // ProcessCallStmt: CheckSubrange
            g##0_0_6_0 := g#0;
            assert {:id "id921"} _module.List.Cons_q(x#0);
            assume true;
            // ProcessCallStmt: CheckSubrange
            xs##0_0_6_0 := $Unbox(_module.List.head(x#0)): DatatypeType;
            assert {:id "id922"} _module.List.Cons_q(x#0);
            assert {:id "id923"} _module.List.Cons_q(_module.List.tail(x#0));
            assume true;
            // ProcessCallStmt: CheckSubrange
            ys##0_0_6_0 := $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType;
            call {:id "id924"} Call$$_module.__default.stable__merge(g##0_0_6_0, xs##0_0_6_0, ys##0_0_6_0);
            // TrCallStmt: After ProcessCallStmt
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(609,5)
            ##g#0_0_6_2 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_6_2, Tclass._module.G(), $Heap);
            assert {:id "id925"} _module.List.Cons_q(x#0);
            ##xs#0_0_6_6 := $Unbox(_module.List.head(x#0)): DatatypeType;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_6_6, Tclass._module.List(Tclass._module.G()), $Heap);
            assert {:id "id926"} _module.List.Cons_q(x#0);
            assert {:id "id927"} _module.List.Cons_q(_module.List.tail(x#0));
            ##ys#0_0_6_2 := $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_6_2, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              $Unbox(_module.List.head(x#0)): DatatypeType, 
              $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType);
            ##xs#0_0_6_5 := _module.__default.append(Tclass._module.G(), 
              $LS($LZ), 
              $Unbox(_module.List.head(x#0)): DatatypeType, 
              $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_6_5, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                $Unbox(_module.List.head(x#0)): DatatypeType, 
                $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType));
            ##xs#0_0_6_4 := _module.__default.filter($LS($LZ), 
              g#0, 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                $Unbox(_module.List.head(x#0)): DatatypeType, 
                $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_6_4, Tclass._module.List(Tclass._module.G()), $Heap);
            ##g#0_0_6_3 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_6_3, Tclass._module.G(), $Heap);
            assert {:id "id928"} _module.List.Cons_q(x#0);
            assert {:id "id929"} _module.List.Cons_q(_module.List.tail(x#0));
            ##x#0_0_6_1 := _module.List.tail(_module.List.tail(x#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#0_0_6_1, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.flatten#canCall(Tclass._module.G(), _module.List.tail(_module.List.tail(x#0)));
            ##xs#0_0_6_7 := _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(_module.List.tail(x#0)));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_6_7, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(_module.List.tail(x#0))));
            ##ys#0_0_6_3 := _module.__default.filter($LS($LZ), 
              g#0, 
              _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(_module.List.tail(x#0))));
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_6_3, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              _module.__default.filter($LS($LZ), 
                g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  $Unbox(_module.List.head(x#0)): DatatypeType, 
                  $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)), 
              _module.__default.filter($LS($LZ), 
                g#0, 
                _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(_module.List.tail(x#0)))));
            assume _module.__default.append#canCall(Tclass._module.G(), 
                $Unbox(_module.List.head(x#0)): DatatypeType, 
                $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)
               && _module.__default.filter#canCall(g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  $Unbox(_module.List.head(x#0)): DatatypeType, 
                  $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType))
               && 
              _module.__default.flatten#canCall(Tclass._module.G(), _module.List.tail(_module.List.tail(x#0)))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(_module.List.tail(x#0))))
               && _module.__default.append#canCall(Tclass._module.G(), 
                _module.__default.filter($LS($LZ), 
                  g#0, 
                  _module.__default.append(Tclass._module.G(), 
                    $LS($LZ), 
                    $Unbox(_module.List.head(x#0)): DatatypeType, 
                    $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)), 
                _module.__default.filter($LS($LZ), 
                  g#0, 
                  _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(_module.List.tail(x#0)))));
            // ----- assert line4 == line5 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(609,5)
            assert {:id "id930"} {:subsumption 0} _module.List#Equal(_module.__default.append(Tclass._module.G(), 
                $LS($LS($LZ)), 
                _module.__default.filter($LS($LS($LZ)), 
                  g#0, 
                  _module.__default.merge($LS($LS($LZ)), 
                    $Unbox(_module.List.head(x#0)): DatatypeType, 
                    $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)), 
                _module.__default.filter($LS($LS($LZ)), 
                  g#0, 
                  _module.__default.flatten(Tclass._module.G(), $LS($LS($LZ)), _module.List.tail(_module.List.tail(x#0))))), 
              _module.__default.append(Tclass._module.G(), 
                $LS($LS($LZ)), 
                _module.__default.filter($LS($LS($LZ)), 
                  g#0, 
                  _module.__default.append(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    $Unbox(_module.List.head(x#0)): DatatypeType, 
                    $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)), 
                _module.__default.filter($LS($LS($LZ)), 
                  g#0, 
                  _module.__default.flatten(Tclass._module.G(), $LS($LS($LZ)), _module.List.tail(_module.List.tail(x#0))))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(609,5)
            ##g#0_0_5_0 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_5_0, Tclass._module.G(), $Heap);
            assume {:id "id899"} _module.List.Cons_q(x#0);
            ##xs#0_0_5_2 := $Unbox(_module.List.head(x#0)): DatatypeType;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_5_2, Tclass._module.List(Tclass._module.G()), $Heap);
            assume {:id "id900"} _module.List.Cons_q(x#0);
            assume {:id "id901"} _module.List.Cons_q(_module.List.tail(x#0));
            ##ys#0_0_5_0 := $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_5_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              $Unbox(_module.List.head(x#0)): DatatypeType, 
              $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType);
            ##xs#0_0_5_1 := _module.__default.append(Tclass._module.G(), 
              $LS($LZ), 
              $Unbox(_module.List.head(x#0)): DatatypeType, 
              $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_5_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                $Unbox(_module.List.head(x#0)): DatatypeType, 
                $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType));
            ##xs#0_0_5_0 := _module.__default.filter($LS($LZ), 
              g#0, 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                $Unbox(_module.List.head(x#0)): DatatypeType, 
                $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_5_0, Tclass._module.List(Tclass._module.G()), $Heap);
            ##g#0_0_5_1 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_5_1, Tclass._module.G(), $Heap);
            assume {:id "id902"} _module.List.Cons_q(x#0);
            assume {:id "id903"} _module.List.Cons_q(_module.List.tail(x#0));
            ##x#0_0_5_0 := _module.List.tail(_module.List.tail(x#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#0_0_5_0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.flatten#canCall(Tclass._module.G(), _module.List.tail(_module.List.tail(x#0)));
            ##xs#0_0_5_3 := _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(_module.List.tail(x#0)));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_5_3, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(_module.List.tail(x#0))));
            ##ys#0_0_5_1 := _module.__default.filter($LS($LZ), 
              g#0, 
              _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(_module.List.tail(x#0))));
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_5_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              _module.__default.filter($LS($LZ), 
                g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  $Unbox(_module.List.head(x#0)): DatatypeType, 
                  $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)), 
              _module.__default.filter($LS($LZ), 
                g#0, 
                _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(_module.List.tail(x#0)))));
            assume _module.__default.append#canCall(Tclass._module.G(), 
                $Unbox(_module.List.head(x#0)): DatatypeType, 
                $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)
               && _module.__default.filter#canCall(g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  $Unbox(_module.List.head(x#0)): DatatypeType, 
                  $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType))
               && 
              _module.__default.flatten#canCall(Tclass._module.G(), _module.List.tail(_module.List.tail(x#0)))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(_module.List.tail(x#0))))
               && _module.__default.append#canCall(Tclass._module.G(), 
                _module.__default.filter($LS($LZ), 
                  g#0, 
                  _module.__default.append(Tclass._module.G(), 
                    $LS($LZ), 
                    $Unbox(_module.List.head(x#0)): DatatypeType, 
                    $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)), 
                _module.__default.filter($LS($LZ), 
                  g#0, 
                  _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(_module.List.tail(x#0)))));
            // ----- Hint5 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(609,5)
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(621,22)
            // TrCallStmt: Before ProcessCallStmt
            assume true;
            // ProcessCallStmt: CheckSubrange
            g##0_0_5_0 := g#0;
            assert {:id "id904"} _module.List.Cons_q(x#0);
            ##xs#0_0_5_4 := $Unbox(_module.List.head(x#0)): DatatypeType;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_5_4, Tclass._module.List(Tclass._module.G()), $Heap);
            assert {:id "id905"} _module.List.Cons_q(x#0);
            assert {:id "id906"} _module.List.Cons_q(_module.List.tail(x#0));
            ##ys#0_0_5_2 := $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_5_2, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              $Unbox(_module.List.head(x#0)): DatatypeType, 
              $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              $Unbox(_module.List.head(x#0)): DatatypeType, 
              $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType);
            // ProcessCallStmt: CheckSubrange
            xs##0_0_5_0 := _module.__default.append(Tclass._module.G(), 
              $LS($LZ), 
              $Unbox(_module.List.head(x#0)): DatatypeType, 
              $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType);
            assert {:id "id907"} _module.List.Cons_q(x#0);
            assert {:id "id908"} _module.List.Cons_q(_module.List.tail(x#0));
            ##x#0_0_5_1 := _module.List.tail(_module.List.tail(x#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#0_0_5_1, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.flatten#canCall(Tclass._module.G(), _module.List.tail(_module.List.tail(x#0)));
            assume _module.__default.flatten#canCall(Tclass._module.G(), _module.List.tail(_module.List.tail(x#0)));
            // ProcessCallStmt: CheckSubrange
            ys##0_0_5_0 := _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(_module.List.tail(x#0)));
            call {:id "id909"} Call$$_module.__default.filter__append(g##0_0_5_0, xs##0_0_5_0, ys##0_0_5_0);
            // TrCallStmt: After ProcessCallStmt
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(609,5)
            ##g#0_0_5_2 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_5_2, Tclass._module.G(), $Heap);
            assert {:id "id910"} _module.List.Cons_q(x#0);
            ##xs#0_0_5_7 := $Unbox(_module.List.head(x#0)): DatatypeType;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_5_7, Tclass._module.List(Tclass._module.G()), $Heap);
            assert {:id "id911"} _module.List.Cons_q(x#0);
            assert {:id "id912"} _module.List.Cons_q(_module.List.tail(x#0));
            ##ys#0_0_5_3 := $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_5_3, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              $Unbox(_module.List.head(x#0)): DatatypeType, 
              $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType);
            ##xs#0_0_5_6 := _module.__default.append(Tclass._module.G(), 
              $LS($LZ), 
              $Unbox(_module.List.head(x#0)): DatatypeType, 
              $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_5_6, Tclass._module.List(Tclass._module.G()), $Heap);
            assert {:id "id913"} _module.List.Cons_q(x#0);
            assert {:id "id914"} _module.List.Cons_q(_module.List.tail(x#0));
            ##x#0_0_5_2 := _module.List.tail(_module.List.tail(x#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#0_0_5_2, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.flatten#canCall(Tclass._module.G(), _module.List.tail(_module.List.tail(x#0)));
            ##ys#0_0_5_4 := _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(_module.List.tail(x#0)));
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_5_4, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                $Unbox(_module.List.head(x#0)): DatatypeType, 
                $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType), 
              _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(_module.List.tail(x#0))));
            ##xs#0_0_5_5 := _module.__default.append(Tclass._module.G(), 
              $LS($LZ), 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                $Unbox(_module.List.head(x#0)): DatatypeType, 
                $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType), 
              _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(_module.List.tail(x#0))));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_5_5, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  $Unbox(_module.List.head(x#0)): DatatypeType, 
                  $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType), 
                _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(_module.List.tail(x#0)))));
            assume _module.__default.append#canCall(Tclass._module.G(), 
                $Unbox(_module.List.head(x#0)): DatatypeType, 
                $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)
               && _module.__default.flatten#canCall(Tclass._module.G(), _module.List.tail(_module.List.tail(x#0)))
               && _module.__default.append#canCall(Tclass._module.G(), 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  $Unbox(_module.List.head(x#0)): DatatypeType, 
                  $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType), 
                _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(_module.List.tail(x#0))))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  _module.__default.append(Tclass._module.G(), 
                    $LS($LZ), 
                    $Unbox(_module.List.head(x#0)): DatatypeType, 
                    $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType), 
                  _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(_module.List.tail(x#0)))));
            // ----- assert line5 == line6 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(609,5)
            assert {:id "id915"} {:subsumption 0} _module.List#Equal(_module.__default.append(Tclass._module.G(), 
                $LS($LS($LZ)), 
                _module.__default.filter($LS($LS($LZ)), 
                  g#0, 
                  _module.__default.append(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    $Unbox(_module.List.head(x#0)): DatatypeType, 
                    $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)), 
                _module.__default.filter($LS($LS($LZ)), 
                  g#0, 
                  _module.__default.flatten(Tclass._module.G(), $LS($LS($LZ)), _module.List.tail(_module.List.tail(x#0))))), 
              _module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  _module.__default.append(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    $Unbox(_module.List.head(x#0)): DatatypeType, 
                    $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType), 
                  _module.__default.flatten(Tclass._module.G(), $LS($LS($LZ)), _module.List.tail(_module.List.tail(x#0))))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(609,5)
            ##g#0_0_4_0 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_4_0, Tclass._module.G(), $Heap);
            assume {:id "id882"} _module.List.Cons_q(x#0);
            ##xs#0_0_4_2 := $Unbox(_module.List.head(x#0)): DatatypeType;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_4_2, Tclass._module.List(Tclass._module.G()), $Heap);
            assume {:id "id883"} _module.List.Cons_q(x#0);
            assume {:id "id884"} _module.List.Cons_q(_module.List.tail(x#0));
            ##ys#0_0_4_0 := $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_4_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              $Unbox(_module.List.head(x#0)): DatatypeType, 
              $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType);
            ##xs#0_0_4_1 := _module.__default.append(Tclass._module.G(), 
              $LS($LZ), 
              $Unbox(_module.List.head(x#0)): DatatypeType, 
              $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_4_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume {:id "id885"} _module.List.Cons_q(x#0);
            assume {:id "id886"} _module.List.Cons_q(_module.List.tail(x#0));
            ##x#0_0_4_0 := _module.List.tail(_module.List.tail(x#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#0_0_4_0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.flatten#canCall(Tclass._module.G(), _module.List.tail(_module.List.tail(x#0)));
            ##ys#0_0_4_1 := _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(_module.List.tail(x#0)));
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_4_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                $Unbox(_module.List.head(x#0)): DatatypeType, 
                $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType), 
              _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(_module.List.tail(x#0))));
            ##xs#0_0_4_0 := _module.__default.append(Tclass._module.G(), 
              $LS($LZ), 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                $Unbox(_module.List.head(x#0)): DatatypeType, 
                $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType), 
              _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(_module.List.tail(x#0))));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_4_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  $Unbox(_module.List.head(x#0)): DatatypeType, 
                  $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType), 
                _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(_module.List.tail(x#0)))));
            assume _module.__default.append#canCall(Tclass._module.G(), 
                $Unbox(_module.List.head(x#0)): DatatypeType, 
                $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType)
               && _module.__default.flatten#canCall(Tclass._module.G(), _module.List.tail(_module.List.tail(x#0)))
               && _module.__default.append#canCall(Tclass._module.G(), 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  $Unbox(_module.List.head(x#0)): DatatypeType, 
                  $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType), 
                _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(_module.List.tail(x#0))))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  _module.__default.append(Tclass._module.G(), 
                    $LS($LZ), 
                    $Unbox(_module.List.head(x#0)): DatatypeType, 
                    $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType), 
                  _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(_module.List.tail(x#0)))));
            // ----- Hint6 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(609,5)
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(623,27)
            // TrCallStmt: Before ProcessCallStmt
            assert {:id "id887"} _module.List.Cons_q(x#0);
            assume true;
            // ProcessCallStmt: CheckSubrange
            xs##0_0_4_0 := $Unbox(_module.List.head(x#0)): DatatypeType;
            assert {:id "id888"} _module.List.Cons_q(x#0);
            assert {:id "id889"} _module.List.Cons_q(_module.List.tail(x#0));
            assume true;
            // ProcessCallStmt: CheckSubrange
            ys##0_0_4_0 := $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType;
            assert {:id "id890"} _module.List.Cons_q(x#0);
            assert {:id "id891"} _module.List.Cons_q(_module.List.tail(x#0));
            ##x#0_0_4_1 := _module.List.tail(_module.List.tail(x#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#0_0_4_1, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.flatten#canCall(Tclass._module.G(), _module.List.tail(_module.List.tail(x#0)));
            assume _module.__default.flatten#canCall(Tclass._module.G(), _module.List.tail(_module.List.tail(x#0)));
            // ProcessCallStmt: CheckSubrange
            zs##0_0_4_0 := _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(_module.List.tail(x#0)));
            call {:id "id892"} Call$$_module.__default.append__associative(Tclass._module.G(), xs##0_0_4_0, ys##0_0_4_0, zs##0_0_4_0);
            // TrCallStmt: After ProcessCallStmt
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(609,5)
            ##g#0_0_4_1 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_4_1, Tclass._module.G(), $Heap);
            assert {:id "id893"} _module.List.Cons_q(x#0);
            ##xs#0_0_4_4 := $Unbox(_module.List.head(x#0)): DatatypeType;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_4_4, Tclass._module.List(Tclass._module.G()), $Heap);
            assert {:id "id894"} _module.List.Cons_q(x#0);
            assert {:id "id895"} _module.List.Cons_q(_module.List.tail(x#0));
            ##xs#0_0_4_5 := $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_4_5, Tclass._module.List(Tclass._module.G()), $Heap);
            assert {:id "id896"} _module.List.Cons_q(x#0);
            assert {:id "id897"} _module.List.Cons_q(_module.List.tail(x#0));
            ##x#0_0_4_2 := _module.List.tail(_module.List.tail(x#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#0_0_4_2, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.flatten#canCall(Tclass._module.G(), _module.List.tail(_module.List.tail(x#0)));
            ##ys#0_0_4_3 := _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(_module.List.tail(x#0)));
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_4_3, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType, 
              _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(_module.List.tail(x#0))));
            ##ys#0_0_4_2 := _module.__default.append(Tclass._module.G(), 
              $LS($LZ), 
              $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType, 
              _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(_module.List.tail(x#0))));
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_4_2, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              $Unbox(_module.List.head(x#0)): DatatypeType, 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType, 
                _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(_module.List.tail(x#0)))));
            ##xs#0_0_4_3 := _module.__default.append(Tclass._module.G(), 
              $LS($LZ), 
              $Unbox(_module.List.head(x#0)): DatatypeType, 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType, 
                _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(_module.List.tail(x#0)))));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_4_3, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                $Unbox(_module.List.head(x#0)): DatatypeType, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType, 
                  _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(_module.List.tail(x#0))))));
            assume _module.__default.flatten#canCall(Tclass._module.G(), _module.List.tail(_module.List.tail(x#0)))
               && _module.__default.append#canCall(Tclass._module.G(), 
                $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType, 
                _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(_module.List.tail(x#0))))
               && _module.__default.append#canCall(Tclass._module.G(), 
                $Unbox(_module.List.head(x#0)): DatatypeType, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType, 
                  _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(_module.List.tail(x#0)))))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  $Unbox(_module.List.head(x#0)): DatatypeType, 
                  _module.__default.append(Tclass._module.G(), 
                    $LS($LZ), 
                    $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType, 
                    _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(_module.List.tail(x#0))))));
            // ----- assert line6 == line7 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(609,5)
            assert {:id "id898"} {:subsumption 0} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  _module.__default.append(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    $Unbox(_module.List.head(x#0)): DatatypeType, 
                    $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType), 
                  _module.__default.flatten(Tclass._module.G(), $LS($LS($LZ)), _module.List.tail(_module.List.tail(x#0))))), 
              _module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  $Unbox(_module.List.head(x#0)): DatatypeType, 
                  _module.__default.append(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType, 
                    _module.__default.flatten(Tclass._module.G(), $LS($LS($LZ)), _module.List.tail(_module.List.tail(x#0)))))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(609,5)
            ##g#0_0_3_0 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_3_0, Tclass._module.G(), $Heap);
            assume {:id "id871"} _module.List.Cons_q(x#0);
            ##xs#0_0_3_1 := $Unbox(_module.List.head(x#0)): DatatypeType;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_3_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume {:id "id872"} _module.List.Cons_q(x#0);
            assume {:id "id873"} _module.List.Cons_q(_module.List.tail(x#0));
            ##xs#0_0_3_2 := $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_3_2, Tclass._module.List(Tclass._module.G()), $Heap);
            assume {:id "id874"} _module.List.Cons_q(x#0);
            assume {:id "id875"} _module.List.Cons_q(_module.List.tail(x#0));
            ##x#0_0_3_0 := _module.List.tail(_module.List.tail(x#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#0_0_3_0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.flatten#canCall(Tclass._module.G(), _module.List.tail(_module.List.tail(x#0)));
            ##ys#0_0_3_1 := _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(_module.List.tail(x#0)));
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_3_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType, 
              _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(_module.List.tail(x#0))));
            ##ys#0_0_3_0 := _module.__default.append(Tclass._module.G(), 
              $LS($LZ), 
              $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType, 
              _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(_module.List.tail(x#0))));
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_3_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              $Unbox(_module.List.head(x#0)): DatatypeType, 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType, 
                _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(_module.List.tail(x#0)))));
            ##xs#0_0_3_0 := _module.__default.append(Tclass._module.G(), 
              $LS($LZ), 
              $Unbox(_module.List.head(x#0)): DatatypeType, 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType, 
                _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(_module.List.tail(x#0)))));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_3_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                $Unbox(_module.List.head(x#0)): DatatypeType, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType, 
                  _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(_module.List.tail(x#0))))));
            assume _module.__default.flatten#canCall(Tclass._module.G(), _module.List.tail(_module.List.tail(x#0)))
               && _module.__default.append#canCall(Tclass._module.G(), 
                $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType, 
                _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(_module.List.tail(x#0))))
               && _module.__default.append#canCall(Tclass._module.G(), 
                $Unbox(_module.List.head(x#0)): DatatypeType, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType, 
                  _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(_module.List.tail(x#0)))))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  $Unbox(_module.List.head(x#0)): DatatypeType, 
                  _module.__default.append(Tclass._module.G(), 
                    $LS($LZ), 
                    $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType, 
                    _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(_module.List.tail(x#0))))));
            // ----- Hint7 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(609,5)
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(609,5)
            ##g#0_0_3_1 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_3_1, Tclass._module.G(), $Heap);
            assert {:id "id876"} _module.List.Cons_q(x#0);
            ##xs#0_0_3_4 := $Unbox(_module.List.head(x#0)): DatatypeType;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_3_4, Tclass._module.List(Tclass._module.G()), $Heap);
            assert {:id "id877"} _module.List.Cons_q(x#0);
            assert {:id "id878"} _module.List.Cons_q(_module.List.tail(x#0));
            assert {:id "id879"} _module.List.Cons_q(x#0);
            assert {:id "id880"} _module.List.Cons_q(_module.List.tail(x#0));
            ##x#0_0_3_1 := #_module.List.Cons(_module.List.head(_module.List.tail(x#0)), 
              _module.List.tail(_module.List.tail(x#0)));
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#0_0_3_1, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.flatten#canCall(Tclass._module.G(), 
              #_module.List.Cons(_module.List.head(_module.List.tail(x#0)), 
                _module.List.tail(_module.List.tail(x#0))));
            ##ys#0_0_3_2 := _module.__default.flatten(Tclass._module.G(), 
              $LS($LZ), 
              #_module.List.Cons(_module.List.head(_module.List.tail(x#0)), 
                _module.List.tail(_module.List.tail(x#0))));
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_3_2, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              $Unbox(_module.List.head(x#0)): DatatypeType, 
              _module.__default.flatten(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(_module.List.head(_module.List.tail(x#0)), 
                  _module.List.tail(_module.List.tail(x#0)))));
            ##xs#0_0_3_3 := _module.__default.append(Tclass._module.G(), 
              $LS($LZ), 
              $Unbox(_module.List.head(x#0)): DatatypeType, 
              _module.__default.flatten(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(_module.List.head(_module.List.tail(x#0)), 
                  _module.List.tail(_module.List.tail(x#0)))));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_3_3, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                $Unbox(_module.List.head(x#0)): DatatypeType, 
                _module.__default.flatten(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(_module.List.head(_module.List.tail(x#0)), 
                    _module.List.tail(_module.List.tail(x#0))))));
            assume _module.__default.flatten#canCall(Tclass._module.G(), 
                #_module.List.Cons(_module.List.head(_module.List.tail(x#0)), 
                  _module.List.tail(_module.List.tail(x#0))))
               && _module.__default.append#canCall(Tclass._module.G(), 
                $Unbox(_module.List.head(x#0)): DatatypeType, 
                _module.__default.flatten(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(_module.List.head(_module.List.tail(x#0)), 
                    _module.List.tail(_module.List.tail(x#0)))))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  $Unbox(_module.List.head(x#0)): DatatypeType, 
                  _module.__default.flatten(Tclass._module.G(), 
                    $LS($LZ), 
                    #_module.List.Cons(_module.List.head(_module.List.tail(x#0)), 
                      _module.List.tail(_module.List.tail(x#0))))));
            // ----- assert line7 == line8 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(609,5)
            assert {:id "id881"} {:subsumption 0} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  $Unbox(_module.List.head(x#0)): DatatypeType, 
                  _module.__default.append(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    $Unbox(_module.List.head(_module.List.tail(x#0))): DatatypeType, 
                    _module.__default.flatten(Tclass._module.G(), $LS($LS($LZ)), _module.List.tail(_module.List.tail(x#0)))))), 
              _module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  $Unbox(_module.List.head(x#0)): DatatypeType, 
                  _module.__default.flatten(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    #_module.List.Cons(_module.List.head(_module.List.tail(x#0)), 
                      _module.List.tail(_module.List.tail(x#0)))))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(609,5)
            ##g#0_0_2_0 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_2_0, Tclass._module.G(), $Heap);
            assume {:id "id863"} _module.List.Cons_q(x#0);
            ##xs#0_0_2_1 := $Unbox(_module.List.head(x#0)): DatatypeType;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_2_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume {:id "id864"} _module.List.Cons_q(x#0);
            assume {:id "id865"} _module.List.Cons_q(_module.List.tail(x#0));
            assume {:id "id866"} _module.List.Cons_q(x#0);
            assume {:id "id867"} _module.List.Cons_q(_module.List.tail(x#0));
            ##x#0_0_2_0 := #_module.List.Cons(_module.List.head(_module.List.tail(x#0)), 
              _module.List.tail(_module.List.tail(x#0)));
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#0_0_2_0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.flatten#canCall(Tclass._module.G(), 
              #_module.List.Cons(_module.List.head(_module.List.tail(x#0)), 
                _module.List.tail(_module.List.tail(x#0))));
            ##ys#0_0_2_0 := _module.__default.flatten(Tclass._module.G(), 
              $LS($LZ), 
              #_module.List.Cons(_module.List.head(_module.List.tail(x#0)), 
                _module.List.tail(_module.List.tail(x#0))));
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_2_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              $Unbox(_module.List.head(x#0)): DatatypeType, 
              _module.__default.flatten(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(_module.List.head(_module.List.tail(x#0)), 
                  _module.List.tail(_module.List.tail(x#0)))));
            ##xs#0_0_2_0 := _module.__default.append(Tclass._module.G(), 
              $LS($LZ), 
              $Unbox(_module.List.head(x#0)): DatatypeType, 
              _module.__default.flatten(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(_module.List.head(_module.List.tail(x#0)), 
                  _module.List.tail(_module.List.tail(x#0)))));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_2_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                $Unbox(_module.List.head(x#0)): DatatypeType, 
                _module.__default.flatten(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(_module.List.head(_module.List.tail(x#0)), 
                    _module.List.tail(_module.List.tail(x#0))))));
            assume _module.__default.flatten#canCall(Tclass._module.G(), 
                #_module.List.Cons(_module.List.head(_module.List.tail(x#0)), 
                  _module.List.tail(_module.List.tail(x#0))))
               && _module.__default.append#canCall(Tclass._module.G(), 
                $Unbox(_module.List.head(x#0)): DatatypeType, 
                _module.__default.flatten(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(_module.List.head(_module.List.tail(x#0)), 
                    _module.List.tail(_module.List.tail(x#0)))))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  $Unbox(_module.List.head(x#0)): DatatypeType, 
                  _module.__default.flatten(Tclass._module.G(), 
                    $LS($LZ), 
                    #_module.List.Cons(_module.List.head(_module.List.tail(x#0)), 
                      _module.List.tail(_module.List.tail(x#0))))));
            // ----- Hint8 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(609,5)
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(609,5)
            ##g#0_0_2_1 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_2_1, Tclass._module.G(), $Heap);
            assert {:id "id868"} _module.List.Cons_q(x#0);
            ##xs#0_0_2_3 := $Unbox(_module.List.head(x#0)): DatatypeType;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_2_3, Tclass._module.List(Tclass._module.G()), $Heap);
            assert {:id "id869"} _module.List.Cons_q(x#0);
            ##x#0_0_2_1 := _module.List.tail(x#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#0_0_2_1, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.flatten#canCall(Tclass._module.G(), _module.List.tail(x#0));
            ##ys#0_0_2_1 := _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(x#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_2_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              $Unbox(_module.List.head(x#0)): DatatypeType, 
              _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(x#0)));
            ##xs#0_0_2_2 := _module.__default.append(Tclass._module.G(), 
              $LS($LZ), 
              $Unbox(_module.List.head(x#0)): DatatypeType, 
              _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(x#0)));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_2_2, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                $Unbox(_module.List.head(x#0)): DatatypeType, 
                _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(x#0))));
            assume _module.__default.flatten#canCall(Tclass._module.G(), _module.List.tail(x#0))
               && _module.__default.append#canCall(Tclass._module.G(), 
                $Unbox(_module.List.head(x#0)): DatatypeType, 
                _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(x#0)))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  $Unbox(_module.List.head(x#0)): DatatypeType, 
                  _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(x#0))));
            // ----- assert line8 == line9 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(609,5)
            assert {:id "id870"} {:subsumption 0} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  $Unbox(_module.List.head(x#0)): DatatypeType, 
                  _module.__default.flatten(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    #_module.List.Cons(_module.List.head(_module.List.tail(x#0)), 
                      _module.List.tail(_module.List.tail(x#0)))))), 
              _module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  $Unbox(_module.List.head(x#0)): DatatypeType, 
                  _module.__default.flatten(Tclass._module.G(), $LS($LS($LZ)), _module.List.tail(x#0)))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(609,5)
            ##g#0_0_1_0 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_1_0, Tclass._module.G(), $Heap);
            assume {:id "id858"} _module.List.Cons_q(x#0);
            ##xs#0_0_1_1 := $Unbox(_module.List.head(x#0)): DatatypeType;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_1_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume {:id "id859"} _module.List.Cons_q(x#0);
            ##x#0_0_1_0 := _module.List.tail(x#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#0_0_1_0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.flatten#canCall(Tclass._module.G(), _module.List.tail(x#0));
            ##ys#0_0_1_0 := _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(x#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_1_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              $Unbox(_module.List.head(x#0)): DatatypeType, 
              _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(x#0)));
            ##xs#0_0_1_0 := _module.__default.append(Tclass._module.G(), 
              $LS($LZ), 
              $Unbox(_module.List.head(x#0)): DatatypeType, 
              _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(x#0)));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_1_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                $Unbox(_module.List.head(x#0)): DatatypeType, 
                _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(x#0))));
            assume _module.__default.flatten#canCall(Tclass._module.G(), _module.List.tail(x#0))
               && _module.__default.append#canCall(Tclass._module.G(), 
                $Unbox(_module.List.head(x#0)): DatatypeType, 
                _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(x#0)))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  $Unbox(_module.List.head(x#0)): DatatypeType, 
                  _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.List.tail(x#0))));
            // ----- Hint9 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(609,5)
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(609,5)
            ##g#0_0_1_1 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_1_1, Tclass._module.G(), $Heap);
            assert {:id "id860"} _module.List.Cons_q(x#0);
            assert {:id "id861"} _module.List.Cons_q(x#0);
            ##x#0_0_1_1 := #_module.List.Cons(_module.List.head(x#0), _module.List.tail(x#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#0_0_1_1, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.flatten#canCall(Tclass._module.G(), 
              #_module.List.Cons(_module.List.head(x#0), _module.List.tail(x#0)));
            ##xs#0_0_1_2 := _module.__default.flatten(Tclass._module.G(), 
              $LS($LZ), 
              #_module.List.Cons(_module.List.head(x#0), _module.List.tail(x#0)));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_1_2, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.flatten(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(_module.List.head(x#0), _module.List.tail(x#0))));
            assume _module.__default.flatten#canCall(Tclass._module.G(), 
                #_module.List.Cons(_module.List.head(x#0), _module.List.tail(x#0)))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.flatten(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(_module.List.head(x#0), _module.List.tail(x#0))));
            // ----- assert line9 == line10 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(609,5)
            assert {:id "id862"} {:subsumption 0} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  $Unbox(_module.List.head(x#0)): DatatypeType, 
                  _module.__default.flatten(Tclass._module.G(), $LS($LS($LZ)), _module.List.tail(x#0)))), 
              _module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.flatten(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  #_module.List.Cons(_module.List.head(x#0), _module.List.tail(x#0)))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(609,5)
            ##g#0_0_0_0 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_0_0, Tclass._module.G(), $Heap);
            assume {:id "id855"} _module.List.Cons_q(x#0);
            assume {:id "id856"} _module.List.Cons_q(x#0);
            ##x#0_0_0_0 := #_module.List.Cons(_module.List.head(x#0), _module.List.tail(x#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#0_0_0_0, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.flatten#canCall(Tclass._module.G(), 
              #_module.List.Cons(_module.List.head(x#0), _module.List.tail(x#0)));
            ##xs#0_0_0_0 := _module.__default.flatten(Tclass._module.G(), 
              $LS($LZ), 
              #_module.List.Cons(_module.List.head(x#0), _module.List.tail(x#0)));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_0_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.flatten(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(_module.List.head(x#0), _module.List.tail(x#0))));
            assume _module.__default.flatten#canCall(Tclass._module.G(), 
                #_module.List.Cons(_module.List.head(x#0), _module.List.tail(x#0)))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.flatten(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(_module.List.head(x#0), _module.List.tail(x#0))));
            // ----- Hint10 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(609,5)
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(609,5)
            ##g#0_0_0_1 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_0_1, Tclass._module.G(), $Heap);
            ##x#0_0_0_1 := x#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##x#0_0_0_1, Tclass._module.List(Tclass._module.List(Tclass._module.G())), $Heap);
            assume _module.__default.flatten#canCall(Tclass._module.G(), x#0);
            ##xs#0_0_0_1 := _module.__default.flatten(Tclass._module.G(), $LS($LZ), x#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_0_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, _module.__default.flatten(Tclass._module.G(), $LS($LZ), x#0));
            assume _module.__default.flatten#canCall(Tclass._module.G(), x#0)
               && _module.__default.filter#canCall(g#0, _module.__default.flatten(Tclass._module.G(), $LS($LZ), x#0));
            // ----- assert line10 == line11 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(609,5)
            assert {:id "id857"} {:subsumption 0} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.flatten(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  #_module.List.Cons(_module.List.head(x#0), _module.List.tail(x#0)))), 
              _module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.flatten(Tclass._module.G(), $LS($LS($LZ)), x#0)));
            assume false;
        }

        assume {:id "id980"} _module.List#Equal(_module.__default.filter($LS($LZ), 
            g#0, 
            _module.__default.flatten(Tclass._module.G(), $LS($LZ), _module.__default.mergePairs($LS($LZ), x#0))), 
          _module.__default.filter($LS($LZ), g#0, _module.__default.flatten(Tclass._module.G(), $LS($LZ), x#0)));
    }
    else
    {
    }
}



procedure {:verboseName "stable_merge (well-formedness)"} CheckWellFormed$$_module.__default.stable__merge(g#0: Box
       where $IsBox(g#0, Tclass._module.G()) && $IsAllocBox(g#0, Tclass._module.G(), $Heap), 
    xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(xs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(xs#0), 
    ys#0: DatatypeType
       where $Is(ys#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(ys#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(ys#0));
  free requires 4 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "stable_merge (call)"} Call$$_module.__default.stable__merge(g#0: Box
       where $IsBox(g#0, Tclass._module.G()) && $IsAllocBox(g#0, Tclass._module.G(), $Heap), 
    xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(xs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(xs#0), 
    ys#0: DatatypeType
       where $Is(ys#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(ys#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(ys#0));
  // user-defined preconditions
  requires {:id "id983"} _module.__default.sorted#canCall(xs#0)
     ==> _module.__default.sorted($LS($LZ), xs#0)
       || (_module.List.Nil_q(xs#0) ==> Lit(true));
  requires {:id "id984"} _module.__default.sorted#canCall(xs#0)
     ==> _module.__default.sorted($LS($LZ), xs#0)
       || (!_module.List.Nil_q(xs#0)
         ==> (var ys#1 := _module.List.tail(xs#0); 
          (var a#0 := _module.List.head(xs#0); 
            (forall y#0: Box :: 
              { _module.__default.Below(a#0, y#0) } 
                { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#1), y#0) } 
              $IsBox(y#0, Tclass._module.G())
                 ==> 
                MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#1), y#0)
                   > 0
                 ==> _module.__default.Below(a#0, y#0)))));
  requires {:id "id985"} _module.__default.sorted#canCall(xs#0)
     ==> _module.__default.sorted($LS($LZ), xs#0)
       || (!_module.List.Nil_q(xs#0)
         ==> (var ys#1 := _module.List.tail(xs#0); 
          (var a#0 := _module.List.head(xs#0); 
            _module.__default.sorted($LS($LS($LZ)), ys#1))));
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#_module.List(_module.__default.filter($LS($LZ), g#0, _module.__default.merge($LS($LZ), xs#0, ys#0)))
     && $IsA#_module.List(_module.__default.filter($LS($LZ), 
        g#0, 
        _module.__default.append(Tclass._module.G(), $LS($LZ), xs#0, ys#0)))
     && 
    _module.__default.merge#canCall(xs#0, ys#0)
     && _module.__default.filter#canCall(g#0, _module.__default.merge($LS($LZ), xs#0, ys#0))
     && 
    _module.__default.append#canCall(Tclass._module.G(), xs#0, ys#0)
     && _module.__default.filter#canCall(g#0, _module.__default.append(Tclass._module.G(), $LS($LZ), xs#0, ys#0));
  ensures {:id "id986"} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), g#0, _module.__default.merge($LS($LS($LZ)), xs#0, ys#0)), 
    _module.__default.filter($LS($LS($LZ)), 
      g#0, 
      _module.__default.append(Tclass._module.G(), $LS($LS($LZ)), xs#0, ys#0)));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "stable_merge (correctness)"} Impl$$_module.__default.stable__merge(g#0: Box
       where $IsBox(g#0, Tclass._module.G()) && $IsAllocBox(g#0, Tclass._module.G(), $Heap), 
    xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(xs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(xs#0), 
    ys#0: DatatypeType
       where $Is(ys#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(ys#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(ys#0))
   returns ($_reverifyPost: bool);
  free requires 4 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id987"} _module.__default.sorted#canCall(xs#0)
     && 
    _module.__default.sorted($LS($LZ), xs#0)
     && (if _module.List.Nil_q(xs#0)
       then true
       else (var ys#4 := _module.List.tail(xs#0); 
        (var a#3 := _module.List.head(xs#0); 
          (forall y#3: Box :: 
              { _module.__default.Below(a#3, y#3) } 
                { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#4), y#3) } 
              $IsBox(y#3, Tclass._module.G())
                 ==> 
                MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#4), y#3)
                   > 0
                 ==> _module.__default.Below(a#3, y#3))
             && _module.__default.sorted($LS($LZ), ys#4))));
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#_module.List(_module.__default.filter($LS($LZ), g#0, _module.__default.merge($LS($LZ), xs#0, ys#0)))
     && $IsA#_module.List(_module.__default.filter($LS($LZ), 
        g#0, 
        _module.__default.append(Tclass._module.G(), $LS($LZ), xs#0, ys#0)))
     && 
    _module.__default.merge#canCall(xs#0, ys#0)
     && _module.__default.filter#canCall(g#0, _module.__default.merge($LS($LZ), xs#0, ys#0))
     && 
    _module.__default.append#canCall(Tclass._module.G(), xs#0, ys#0)
     && _module.__default.filter#canCall(g#0, _module.__default.append(Tclass._module.G(), $LS($LZ), xs#0, ys#0));
  ensures {:id "id988"} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), g#0, _module.__default.merge($LS($LS($LZ)), xs#0, ys#0)), 
    _module.__default.filter($LS($LS($LZ)), 
      g#0, 
      _module.__default.append(Tclass._module.G(), $LS($LS($LZ)), xs#0, ys#0)));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "stable_merge (correctness)"} Impl$$_module.__default.stable__merge(g#0: Box, xs#0: DatatypeType, ys#0: DatatypeType) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $initHeapForallStmt#0: Heap;
  var _mcc#0#0_0: Box;
  var _mcc#1#0_0: DatatypeType;
  var xs'#0_0: DatatypeType;
  var let#0_0#0#0: DatatypeType;
  var a#0_0: Box;
  var let#0_1#0#0: Box;
  var _mcc#2#0_0_0: Box;
  var _mcc#3#0_0_0: DatatypeType;
  var ys'#0_0_0: DatatypeType;
  var let#0_0_0#0#0: DatatypeType;
  var b#0_0_0: Box;
  var let#0_0_1#0#0: Box;
  var ##a#0_0_0: Box;
  var ##b#0_0_0: Box;
  var ##g#0_0_1_0_0_0: Box;
  var ##xs#0_0_1_0_0_0: DatatypeType;
  var ##xs#0_0_1_0_0_1: DatatypeType;
  var ##ys#0_0_1_0_0_0: DatatypeType;
  var ##g#0_0_1_0_0_1: Box;
  var ##xs#0_0_1_0_0_2: DatatypeType;
  var ##xs#0_0_1_0_0_3: DatatypeType;
  var ##ys#0_0_1_0_0_1: DatatypeType;
  var ##g#0_0_1_0_1_0: Box;
  var ##xs#0_0_1_0_1_0: DatatypeType;
  var ##xs#0_0_1_0_1_1: DatatypeType;
  var ##ys#0_0_1_0_1_0: DatatypeType;
  var g##0_0_1_0_1_0: Box;
  var b##0_0_1_0_1_0: Box;
  var xs##0_0_1_0_1_0: DatatypeType;
  var ys##0_0_1_0_1_0: DatatypeType;
  var ##g#0_0_1_0_1_1: Box;
  var ##xs#0_0_1_0_1_2: DatatypeType;
  var ##xs#0_0_1_0_1_3: DatatypeType;
  var ##ys#0_0_1_0_1_1: DatatypeType;
  var ##g#0_0_1_0_2_0: Box;
  var ##xs#0_0_1_0_2_0: DatatypeType;
  var ##xs#0_0_1_0_2_1: DatatypeType;
  var ##ys#0_0_1_0_2_0: DatatypeType;
  var g##0_0_1_0_2_0: Box;
  var xs##0_0_1_0_2_0: DatatypeType;
  var ys##0_0_1_0_2_0: DatatypeType;
  var ##g#0_0_1_0_2_1: Box;
  var ##xs#0_0_1_0_2_2: DatatypeType;
  var ##xs#0_0_1_0_2_3: DatatypeType;
  var ##ys#0_0_1_0_2_1: DatatypeType;
  var ##g#0_0_1_0_3_0: Box;
  var ##xs#0_0_1_0_3_0: DatatypeType;
  var ##xs#0_0_1_0_3_1: DatatypeType;
  var ##ys#0_0_1_0_3_0: DatatypeType;
  var ##g#0_0_1_0_3_1: Box;
  var ##xs#0_0_1_0_3_2: DatatypeType;
  var ##xs#0_0_1_0_3_3: DatatypeType;
  var ##ys#0_0_1_0_3_1: DatatypeType;
  var ##g#0_0_1_0_0: Box;
  var ##xs#0_0_1_0_0: DatatypeType;
  var ##xs#0_0_1_0_1: DatatypeType;
  var ##ys#0_0_1_0_0: DatatypeType;
  var xs##0_1_0: DatatypeType;

    // AddMethodImpl: stable_merge, Impl$$_module.__default.stable__merge
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume $IsA#_module.List(xs#0);
    assume $IsA#_module.List(ys#0);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#xs0#0: DatatypeType, $ih#ys0#0: DatatypeType :: 
      { _module.__default.append(Tclass._module.G(), $LS($LZ), $ih#xs0#0, $ih#ys0#0) } 
        { _module.__default.merge($LS($LZ), $ih#xs0#0, $ih#ys0#0) } 
      $Is($ih#xs0#0, Tclass._module.List(Tclass._module.G()))
           && $Is($ih#ys0#0, Tclass._module.List(Tclass._module.G()))
           && _module.__default.sorted($LS($LZ), $ih#xs0#0)
           && (DtRank($ih#xs0#0) < DtRank(xs#0)
             || (DtRank($ih#xs0#0) == DtRank(xs#0) && DtRank($ih#ys0#0) < DtRank(ys#0)))
         ==> _module.List#Equal(_module.__default.filter($LS($LZ), g#0, _module.__default.merge($LS($LZ), $ih#xs0#0, $ih#ys0#0)), 
          _module.__default.filter($LS($LZ), 
            g#0, 
            _module.__default.append(Tclass._module.G(), $LS($LZ), $ih#xs0#0, $ih#ys0#0))));
    $_reverifyPost := false;
    assume true;
    havoc _mcc#0#0_0, _mcc#1#0_0;
    if (xs#0 == #_module.List.Nil())
    {
    }
    else if (xs#0 == #_module.List.Cons(_mcc#0#0_0, _mcc#1#0_0))
    {
        assume $IsBox(_mcc#0#0_0, Tclass._module.G());
        assume $Is(_mcc#1#0_0, Tclass._module.List(Tclass._module.G()));
        havoc xs'#0_0;
        assume $Is(xs'#0_0, Tclass._module.List(Tclass._module.G()))
           && $IsAlloc(xs'#0_0, Tclass._module.List(Tclass._module.G()), $Heap);
        assume {:id "id989"} let#0_0#0#0 == _mcc#1#0_0;
        assume true;
        assume true;
        // CheckWellformedWithResult: any expression
        assume $Is(let#0_0#0#0, Tclass._module.List(Tclass._module.G()));
        assume {:id "id990"} xs'#0_0 == let#0_0#0#0;
        havoc a#0_0;
        assume $IsBox(a#0_0, Tclass._module.G())
           && $IsAllocBox(a#0_0, Tclass._module.G(), $Heap);
        assume {:id "id991"} let#0_1#0#0 == _mcc#0#0_0;
        assume true;
        assume true;
        // CheckWellformedWithResult: any expression
        assume $IsBox(let#0_1#0#0, Tclass._module.G());
        assume {:id "id992"} a#0_0 == let#0_1#0#0;
        assume true;
        havoc _mcc#2#0_0_0, _mcc#3#0_0_0;
        if (ys#0 == #_module.List.Nil())
        {
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(644,21)
            // TrCallStmt: Before ProcessCallStmt
            assume true;
            // ProcessCallStmt: CheckSubrange
            xs##0_1_0 := xs#0;
            call {:id "id1005"} Call$$_module.__default.append__Nil(Tclass._module.G(), xs##0_1_0);
            // TrCallStmt: After ProcessCallStmt
        }
        else if (ys#0 == #_module.List.Cons(_mcc#2#0_0_0, _mcc#3#0_0_0))
        {
            assume $IsBox(_mcc#2#0_0_0, Tclass._module.G());
            assume $Is(_mcc#3#0_0_0, Tclass._module.List(Tclass._module.G()));
            havoc ys'#0_0_0;
            assume $Is(ys'#0_0_0, Tclass._module.List(Tclass._module.G()))
               && $IsAlloc(ys'#0_0_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume {:id "id993"} let#0_0_0#0#0 == _mcc#3#0_0_0;
            assume true;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(let#0_0_0#0#0, Tclass._module.List(Tclass._module.G()));
            assume {:id "id994"} ys'#0_0_0 == let#0_0_0#0#0;
            havoc b#0_0_0;
            assume $IsBox(b#0_0_0, Tclass._module.G())
               && $IsAllocBox(b#0_0_0, Tclass._module.G(), $Heap);
            assume {:id "id995"} let#0_0_1#0#0 == _mcc#2#0_0_0;
            assume true;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $IsBox(let#0_0_1#0#0, Tclass._module.G());
            assume {:id "id996"} b#0_0_0 == let#0_0_1#0#0;
            // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(646,11)
            ##a#0_0_0 := a#0_0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##a#0_0_0, Tclass._module.G(), $Heap);
            ##b#0_0_0 := b#0_0_0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##b#0_0_0, Tclass._module.G(), $Heap);
            assume _module.__default.Below#canCall(a#0_0, b#0_0_0);
            assume _module.__default.Below#canCall(a#0_0, b#0_0_0);
            if (_module.__default.Below(a#0_0, b#0_0_0))
            {
            }
            else
            {
                // ----- calc statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(649,13)
                // Assume Fuel Constant
                if (*)
                {
                    // ----- assert wf[initial] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(649,13)
                    ##g#0_0_1_0_0 := g#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##g#0_0_1_0_0, Tclass._module.G(), $Heap);
                    ##xs#0_0_1_0_1 := xs#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_1_0_1, Tclass._module.List(Tclass._module.G()), $Heap);
                    ##ys#0_0_1_0_0 := ys#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##ys#0_0_1_0_0, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.merge#canCall(xs#0, ys#0);
                    ##xs#0_0_1_0_0 := _module.__default.merge($LS($LZ), xs#0, ys#0);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_1_0_0, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.filter#canCall(g#0, _module.__default.merge($LS($LZ), xs#0, ys#0));
                    assume _module.__default.merge#canCall(xs#0, ys#0)
                       && _module.__default.filter#canCall(g#0, _module.__default.merge($LS($LZ), xs#0, ys#0));
                    assume false;
                }
                else if (*)
                {
                    // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(649,13)
                    ##g#0_0_1_0_3_0 := g#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##g#0_0_1_0_3_0, Tclass._module.G(), $Heap);
                    ##xs#0_0_1_0_3_1 := xs#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_1_0_3_1, Tclass._module.List(Tclass._module.G()), $Heap);
                    ##ys#0_0_1_0_3_0 := ys#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##ys#0_0_1_0_3_0, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.merge#canCall(xs#0, ys#0);
                    ##xs#0_0_1_0_3_0 := _module.__default.merge($LS($LZ), xs#0, ys#0);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_1_0_3_0, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.filter#canCall(g#0, _module.__default.merge($LS($LZ), xs#0, ys#0));
                    assume _module.__default.merge#canCall(xs#0, ys#0)
                       && _module.__default.filter#canCall(g#0, _module.__default.merge($LS($LZ), xs#0, ys#0));
                    // ----- Hint0 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(649,13)
                    // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(649,13)
                    ##g#0_0_1_0_3_1 := g#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##g#0_0_1_0_3_1, Tclass._module.G(), $Heap);
                    ##xs#0_0_1_0_3_3 := xs#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_1_0_3_3, Tclass._module.List(Tclass._module.G()), $Heap);
                    ##ys#0_0_1_0_3_1 := ys'#0_0_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##ys#0_0_1_0_3_1, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.merge#canCall(xs#0, ys'#0_0_0);
                    ##xs#0_0_1_0_3_2 := #_module.List.Cons(b#0_0_0, _module.__default.merge($LS($LZ), xs#0, ys'#0_0_0));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_1_0_3_2, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.filter#canCall(g#0, 
                      #_module.List.Cons(b#0_0_0, _module.__default.merge($LS($LZ), xs#0, ys'#0_0_0)));
                    assume _module.__default.merge#canCall(xs#0, ys'#0_0_0)
                       && _module.__default.filter#canCall(g#0, 
                        #_module.List.Cons(b#0_0_0, _module.__default.merge($LS($LZ), xs#0, ys'#0_0_0)));
                    // ----- assert line0 == line1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(649,13)
                    assert {:id "id1003"} {:subsumption 0} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), g#0, _module.__default.merge($LS($LS($LZ)), xs#0, ys#0)), 
                      _module.__default.filter($LS($LS($LZ)), 
                        g#0, 
                        #_module.List.Cons(b#0_0_0, _module.__default.merge($LS($LS($LZ)), xs#0, ys'#0_0_0))));
                    assume false;
                }
                else if (*)
                {
                    // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(649,13)
                    ##g#0_0_1_0_2_0 := g#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##g#0_0_1_0_2_0, Tclass._module.G(), $Heap);
                    ##xs#0_0_1_0_2_1 := xs#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_1_0_2_1, Tclass._module.List(Tclass._module.G()), $Heap);
                    ##ys#0_0_1_0_2_0 := ys'#0_0_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##ys#0_0_1_0_2_0, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.merge#canCall(xs#0, ys'#0_0_0);
                    ##xs#0_0_1_0_2_0 := #_module.List.Cons(b#0_0_0, _module.__default.merge($LS($LZ), xs#0, ys'#0_0_0));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_1_0_2_0, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.filter#canCall(g#0, 
                      #_module.List.Cons(b#0_0_0, _module.__default.merge($LS($LZ), xs#0, ys'#0_0_0)));
                    assume _module.__default.merge#canCall(xs#0, ys'#0_0_0)
                       && _module.__default.filter#canCall(g#0, 
                        #_module.List.Cons(b#0_0_0, _module.__default.merge($LS($LZ), xs#0, ys'#0_0_0)));
                    // ----- Hint1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(649,13)
                    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(652,29)
                    // TrCallStmt: Before ProcessCallStmt
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    g##0_0_1_0_2_0 := g#0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    xs##0_0_1_0_2_0 := xs#0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    ys##0_0_1_0_2_0 := ys'#0_0_0;
                    assert {:id "id1000"} DtRank(xs##0_0_1_0_2_0) < DtRank(xs#0)
                       || (DtRank(xs##0_0_1_0_2_0) == DtRank(xs#0)
                         && DtRank(ys##0_0_1_0_2_0) < DtRank(ys#0));
                    call {:id "id1001"} Call$$_module.__default.stable__merge(g##0_0_1_0_2_0, xs##0_0_1_0_2_0, ys##0_0_1_0_2_0);
                    // TrCallStmt: After ProcessCallStmt
                    // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(649,13)
                    ##g#0_0_1_0_2_1 := g#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##g#0_0_1_0_2_1, Tclass._module.G(), $Heap);
                    ##xs#0_0_1_0_2_3 := xs#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_1_0_2_3, Tclass._module.List(Tclass._module.G()), $Heap);
                    ##ys#0_0_1_0_2_1 := ys'#0_0_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##ys#0_0_1_0_2_1, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.append#canCall(Tclass._module.G(), xs#0, ys'#0_0_0);
                    ##xs#0_0_1_0_2_2 := #_module.List.Cons(b#0_0_0, _module.__default.append(Tclass._module.G(), $LS($LZ), xs#0, ys'#0_0_0));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_1_0_2_2, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.filter#canCall(g#0, 
                      #_module.List.Cons(b#0_0_0, _module.__default.append(Tclass._module.G(), $LS($LZ), xs#0, ys'#0_0_0)));
                    assume _module.__default.append#canCall(Tclass._module.G(), xs#0, ys'#0_0_0)
                       && _module.__default.filter#canCall(g#0, 
                        #_module.List.Cons(b#0_0_0, _module.__default.append(Tclass._module.G(), $LS($LZ), xs#0, ys'#0_0_0)));
                    // ----- assert line1 == line2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(649,13)
                    assert {:id "id1002"} {:subsumption 0} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
                        g#0, 
                        #_module.List.Cons(b#0_0_0, _module.__default.merge($LS($LS($LZ)), xs#0, ys'#0_0_0))), 
                      _module.__default.filter($LS($LS($LZ)), 
                        g#0, 
                        #_module.List.Cons(b#0_0_0, 
                          _module.__default.append(Tclass._module.G(), $LS($LS($LZ)), xs#0, ys'#0_0_0))));
                    assume false;
                }
                else if (*)
                {
                    // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(649,13)
                    ##g#0_0_1_0_1_0 := g#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##g#0_0_1_0_1_0, Tclass._module.G(), $Heap);
                    ##xs#0_0_1_0_1_1 := xs#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_1_0_1_1, Tclass._module.List(Tclass._module.G()), $Heap);
                    ##ys#0_0_1_0_1_0 := ys'#0_0_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##ys#0_0_1_0_1_0, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.append#canCall(Tclass._module.G(), xs#0, ys'#0_0_0);
                    ##xs#0_0_1_0_1_0 := #_module.List.Cons(b#0_0_0, _module.__default.append(Tclass._module.G(), $LS($LZ), xs#0, ys'#0_0_0));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_1_0_1_0, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.filter#canCall(g#0, 
                      #_module.List.Cons(b#0_0_0, _module.__default.append(Tclass._module.G(), $LS($LZ), xs#0, ys'#0_0_0)));
                    assume _module.__default.append#canCall(Tclass._module.G(), xs#0, ys'#0_0_0)
                       && _module.__default.filter#canCall(g#0, 
                        #_module.List.Cons(b#0_0_0, _module.__default.append(Tclass._module.G(), $LS($LZ), xs#0, ys'#0_0_0)));
                    // ----- Hint2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(649,13)
                    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(654,39)
                    // TrCallStmt: Before ProcessCallStmt
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    g##0_0_1_0_1_0 := g#0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    b##0_0_1_0_1_0 := b#0_0_0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    xs##0_0_1_0_1_0 := xs#0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    ys##0_0_1_0_1_0 := ys'#0_0_0;
                    call {:id "id998"} Call$$_module.__default.filter__append__notBelow(g##0_0_1_0_1_0, b##0_0_1_0_1_0, xs##0_0_1_0_1_0, ys##0_0_1_0_1_0);
                    // TrCallStmt: After ProcessCallStmt
                    // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(649,13)
                    ##g#0_0_1_0_1_1 := g#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##g#0_0_1_0_1_1, Tclass._module.G(), $Heap);
                    ##xs#0_0_1_0_1_3 := xs#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_1_0_1_3, Tclass._module.List(Tclass._module.G()), $Heap);
                    ##ys#0_0_1_0_1_1 := #_module.List.Cons(b#0_0_0, ys'#0_0_0);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##ys#0_0_1_0_1_1, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.append#canCall(Tclass._module.G(), xs#0, #_module.List.Cons(b#0_0_0, ys'#0_0_0));
                    ##xs#0_0_1_0_1_2 := _module.__default.append(Tclass._module.G(), $LS($LZ), xs#0, #_module.List.Cons(b#0_0_0, ys'#0_0_0));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_1_0_1_2, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.filter#canCall(g#0, 
                      _module.__default.append(Tclass._module.G(), $LS($LZ), xs#0, #_module.List.Cons(b#0_0_0, ys'#0_0_0)));
                    assume _module.__default.append#canCall(Tclass._module.G(), xs#0, #_module.List.Cons(b#0_0_0, ys'#0_0_0))
                       && _module.__default.filter#canCall(g#0, 
                        _module.__default.append(Tclass._module.G(), $LS($LZ), xs#0, #_module.List.Cons(b#0_0_0, ys'#0_0_0)));
                    // ----- assert line2 == line3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(649,13)
                    assert {:id "id999"} {:subsumption 0} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
                        g#0, 
                        #_module.List.Cons(b#0_0_0, 
                          _module.__default.append(Tclass._module.G(), $LS($LS($LZ)), xs#0, ys'#0_0_0))), 
                      _module.__default.filter($LS($LS($LZ)), 
                        g#0, 
                        _module.__default.append(Tclass._module.G(), $LS($LS($LZ)), xs#0, #_module.List.Cons(b#0_0_0, ys'#0_0_0))));
                    assume false;
                }
                else if (*)
                {
                    // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(649,13)
                    ##g#0_0_1_0_0_0 := g#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##g#0_0_1_0_0_0, Tclass._module.G(), $Heap);
                    ##xs#0_0_1_0_0_1 := xs#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_1_0_0_1, Tclass._module.List(Tclass._module.G()), $Heap);
                    ##ys#0_0_1_0_0_0 := #_module.List.Cons(b#0_0_0, ys'#0_0_0);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##ys#0_0_1_0_0_0, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.append#canCall(Tclass._module.G(), xs#0, #_module.List.Cons(b#0_0_0, ys'#0_0_0));
                    ##xs#0_0_1_0_0_0 := _module.__default.append(Tclass._module.G(), $LS($LZ), xs#0, #_module.List.Cons(b#0_0_0, ys'#0_0_0));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_1_0_0_0, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.filter#canCall(g#0, 
                      _module.__default.append(Tclass._module.G(), $LS($LZ), xs#0, #_module.List.Cons(b#0_0_0, ys'#0_0_0)));
                    assume _module.__default.append#canCall(Tclass._module.G(), xs#0, #_module.List.Cons(b#0_0_0, ys'#0_0_0))
                       && _module.__default.filter#canCall(g#0, 
                        _module.__default.append(Tclass._module.G(), $LS($LZ), xs#0, #_module.List.Cons(b#0_0_0, ys'#0_0_0)));
                    // ----- Hint3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(649,13)
                    // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(649,13)
                    ##g#0_0_1_0_0_1 := g#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##g#0_0_1_0_0_1, Tclass._module.G(), $Heap);
                    ##xs#0_0_1_0_0_3 := xs#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_1_0_0_3, Tclass._module.List(Tclass._module.G()), $Heap);
                    ##ys#0_0_1_0_0_1 := ys#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##ys#0_0_1_0_0_1, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.append#canCall(Tclass._module.G(), xs#0, ys#0);
                    ##xs#0_0_1_0_0_2 := _module.__default.append(Tclass._module.G(), $LS($LZ), xs#0, ys#0);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##xs#0_0_1_0_0_2, Tclass._module.List(Tclass._module.G()), $Heap);
                    assume _module.__default.filter#canCall(g#0, _module.__default.append(Tclass._module.G(), $LS($LZ), xs#0, ys#0));
                    assume _module.__default.append#canCall(Tclass._module.G(), xs#0, ys#0)
                       && _module.__default.filter#canCall(g#0, _module.__default.append(Tclass._module.G(), $LS($LZ), xs#0, ys#0));
                    // ----- assert line3 == line4 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(649,13)
                    assert {:id "id997"} {:subsumption 0} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
                        g#0, 
                        _module.__default.append(Tclass._module.G(), $LS($LS($LZ)), xs#0, #_module.List.Cons(b#0_0_0, ys'#0_0_0))), 
                      _module.__default.filter($LS($LS($LZ)), 
                        g#0, 
                        _module.__default.append(Tclass._module.G(), $LS($LS($LZ)), xs#0, ys#0)));
                    assume false;
                }

                assume {:id "id1004"} _module.List#Equal(_module.__default.filter($LS($LZ), g#0, _module.__default.merge($LS($LZ), xs#0, ys#0)), 
                  _module.__default.filter($LS($LZ), 
                    g#0, 
                    _module.__default.append(Tclass._module.G(), $LS($LZ), xs#0, ys#0)));
            }
        }
        else
        {
            assume false;
        }
    }
    else
    {
        assume false;
    }
}



procedure {:verboseName "filter_append (well-formedness)"} CheckWellFormed$$_module.__default.filter__append(g#0: Box
       where $IsBox(g#0, Tclass._module.G()) && $IsAllocBox(g#0, Tclass._module.G(), $Heap), 
    xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(xs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(xs#0), 
    ys#0: DatatypeType
       where $Is(ys#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(ys#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(ys#0));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "filter_append (call)"} Call$$_module.__default.filter__append(g#0: Box
       where $IsBox(g#0, Tclass._module.G()) && $IsAllocBox(g#0, Tclass._module.G(), $Heap), 
    xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(xs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(xs#0), 
    ys#0: DatatypeType
       where $Is(ys#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(ys#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(ys#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#_module.List(_module.__default.filter($LS($LZ), 
        g#0, 
        _module.__default.append(Tclass._module.G(), $LS($LZ), xs#0, ys#0)))
     && $IsA#_module.List(_module.__default.append(Tclass._module.G(), 
        $LS($LZ), 
        _module.__default.filter($LS($LZ), g#0, xs#0), 
        _module.__default.filter($LS($LZ), g#0, ys#0)))
     && 
    _module.__default.append#canCall(Tclass._module.G(), xs#0, ys#0)
     && _module.__default.filter#canCall(g#0, _module.__default.append(Tclass._module.G(), $LS($LZ), xs#0, ys#0))
     && 
    _module.__default.filter#canCall(g#0, xs#0)
     && _module.__default.filter#canCall(g#0, ys#0)
     && _module.__default.append#canCall(Tclass._module.G(), 
      _module.__default.filter($LS($LZ), g#0, xs#0), 
      _module.__default.filter($LS($LZ), g#0, ys#0));
  ensures {:id "id1007"} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
      g#0, 
      _module.__default.append(Tclass._module.G(), $LS($LS($LZ)), xs#0, ys#0)), 
    _module.__default.append(Tclass._module.G(), 
      $LS($LS($LZ)), 
      _module.__default.filter($LS($LS($LZ)), g#0, xs#0), 
      _module.__default.filter($LS($LS($LZ)), g#0, ys#0)));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "filter_append (correctness)"} Impl$$_module.__default.filter__append(g#0: Box
       where $IsBox(g#0, Tclass._module.G()) && $IsAllocBox(g#0, Tclass._module.G(), $Heap), 
    xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(xs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(xs#0), 
    ys#0: DatatypeType
       where $Is(ys#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(ys#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(ys#0))
   returns ($_reverifyPost: bool);
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#_module.List(_module.__default.filter($LS($LZ), 
        g#0, 
        _module.__default.append(Tclass._module.G(), $LS($LZ), xs#0, ys#0)))
     && $IsA#_module.List(_module.__default.append(Tclass._module.G(), 
        $LS($LZ), 
        _module.__default.filter($LS($LZ), g#0, xs#0), 
        _module.__default.filter($LS($LZ), g#0, ys#0)))
     && 
    _module.__default.append#canCall(Tclass._module.G(), xs#0, ys#0)
     && _module.__default.filter#canCall(g#0, _module.__default.append(Tclass._module.G(), $LS($LZ), xs#0, ys#0))
     && 
    _module.__default.filter#canCall(g#0, xs#0)
     && _module.__default.filter#canCall(g#0, ys#0)
     && _module.__default.append#canCall(Tclass._module.G(), 
      _module.__default.filter($LS($LZ), g#0, xs#0), 
      _module.__default.filter($LS($LZ), g#0, ys#0));
  ensures {:id "id1008"} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
      g#0, 
      _module.__default.append(Tclass._module.G(), $LS($LS($LZ)), xs#0, ys#0)), 
    _module.__default.append(Tclass._module.G(), 
      $LS($LS($LZ)), 
      _module.__default.filter($LS($LS($LZ)), g#0, xs#0), 
      _module.__default.filter($LS($LS($LZ)), g#0, ys#0)));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "filter_append (correctness)"} Impl$$_module.__default.filter__append(g#0: Box, xs#0: DatatypeType, ys#0: DatatypeType) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $initHeapForallStmt#0: Heap;

    // AddMethodImpl: filter_append, Impl$$_module.__default.filter__append
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume $IsA#_module.List(xs#0);
    assume $IsA#_module.List(ys#0);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#xs0#0: DatatypeType, $ih#ys0#0: DatatypeType :: 
      { _module.__default.append(Tclass._module.G(), 
          $LS($LZ), 
          _module.__default.filter($LS($LZ), g#0, $ih#xs0#0), 
          _module.__default.filter($LS($LZ), g#0, $ih#ys0#0)) } 
        { _module.__default.filter($LS($LZ), 
          g#0, 
          _module.__default.append(Tclass._module.G(), $LS($LZ), $ih#xs0#0, $ih#ys0#0)) } 
      $Is($ih#xs0#0, Tclass._module.List(Tclass._module.G()))
           && $Is($ih#ys0#0, Tclass._module.List(Tclass._module.G()))
           && Lit(true)
           && (DtRank($ih#xs0#0) < DtRank(xs#0)
             || (DtRank($ih#xs0#0) == DtRank(xs#0) && DtRank($ih#ys0#0) < DtRank(ys#0)))
         ==> _module.List#Equal(_module.__default.filter($LS($LZ), 
            g#0, 
            _module.__default.append(Tclass._module.G(), $LS($LZ), $ih#xs0#0, $ih#ys0#0)), 
          _module.__default.append(Tclass._module.G(), 
            $LS($LZ), 
            _module.__default.filter($LS($LZ), g#0, $ih#xs0#0), 
            _module.__default.filter($LS($LZ), g#0, $ih#ys0#0))));
    $_reverifyPost := false;
}



procedure {:verboseName "filter_append_notBelow (well-formedness)"} CheckWellFormed$$_module.__default.filter__append__notBelow(g#0: Box
       where $IsBox(g#0, Tclass._module.G()) && $IsAllocBox(g#0, Tclass._module.G(), $Heap), 
    b#0: Box
       where $IsBox(b#0, Tclass._module.G()) && $IsAllocBox(b#0, Tclass._module.G(), $Heap), 
    xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(xs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(xs#0), 
    ys#0: DatatypeType
       where $Is(ys#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(ys#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(ys#0));
  free requires 3 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "filter_append_notBelow (well-formedness)"} CheckWellFormed$$_module.__default.filter__append__notBelow(g#0: Box, b#0: Box, xs#0: DatatypeType, ys#0: DatatypeType)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##xs#0: DatatypeType;
  var ##a#0: Box;
  var ##b#0: Box;
  var ##g#0: Box;
  var ##xs#1: DatatypeType;
  var ##xs#2: DatatypeType;
  var ##ys#0: DatatypeType;
  var ##g#1: Box;
  var ##xs#3: DatatypeType;
  var ##xs#4: DatatypeType;
  var ##ys#1: DatatypeType;


    // AddMethodImpl: filter_append_notBelow, CheckWellFormed$$_module.__default.filter__append__notBelow
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    ##xs#0 := xs#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##xs#0, Tclass._module.List(Tclass._module.G()), $Heap);
    assume _module.__default.sorted#canCall(xs#0);
    assume {:id "id1009"} _module.__default.sorted($LS($LZ), xs#0);
    if (*)
    {
        assume {:id "id1010"} _module.List.Cons_q(xs#0);
        assert {:id "id1011"} _module.List.Cons_q(xs#0);
        ##a#0 := _module.List.head(xs#0);
        // assume allocatedness for argument to function
        assume $IsAllocBox(##a#0, Tclass._module.G(), $Heap);
        ##b#0 := b#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##b#0, Tclass._module.G(), $Heap);
        assume _module.__default.Below#canCall(_module.List.head(xs#0), b#0);
        assume {:id "id1012"} !_module.__default.Below(_module.List.head(xs#0), b#0);
    }
    else
    {
        assume {:id "id1013"} _module.List.Cons_q(xs#0)
           ==> !_module.__default.Below(_module.List.head(xs#0), b#0);
    }

    havoc $Heap;
    assume old($Heap) == $Heap;
    ##g#0 := g#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##g#0, Tclass._module.G(), $Heap);
    ##xs#2 := xs#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##xs#2, Tclass._module.List(Tclass._module.G()), $Heap);
    ##ys#0 := ys#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##ys#0, Tclass._module.List(Tclass._module.G()), $Heap);
    assume _module.__default.append#canCall(Tclass._module.G(), xs#0, ys#0);
    ##xs#1 := #_module.List.Cons(b#0, _module.__default.append(Tclass._module.G(), $LS($LZ), xs#0, ys#0));
    // assume allocatedness for argument to function
    assume $IsAlloc(##xs#1, Tclass._module.List(Tclass._module.G()), $Heap);
    assume _module.__default.filter#canCall(g#0, 
      #_module.List.Cons(b#0, _module.__default.append(Tclass._module.G(), $LS($LZ), xs#0, ys#0)));
    ##g#1 := g#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##g#1, Tclass._module.G(), $Heap);
    ##xs#4 := xs#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##xs#4, Tclass._module.List(Tclass._module.G()), $Heap);
    ##ys#1 := #_module.List.Cons(b#0, ys#0);
    // assume allocatedness for argument to function
    assume $IsAlloc(##ys#1, Tclass._module.List(Tclass._module.G()), $Heap);
    assume _module.__default.append#canCall(Tclass._module.G(), xs#0, #_module.List.Cons(b#0, ys#0));
    ##xs#3 := _module.__default.append(Tclass._module.G(), $LS($LZ), xs#0, #_module.List.Cons(b#0, ys#0));
    // assume allocatedness for argument to function
    assume $IsAlloc(##xs#3, Tclass._module.List(Tclass._module.G()), $Heap);
    assume _module.__default.filter#canCall(g#0, 
      _module.__default.append(Tclass._module.G(), $LS($LZ), xs#0, #_module.List.Cons(b#0, ys#0)));
    assume {:id "id1014"} _module.List#Equal(_module.__default.filter($LS($LZ), 
        g#0, 
        #_module.List.Cons(b#0, _module.__default.append(Tclass._module.G(), $LS($LZ), xs#0, ys#0))), 
      _module.__default.filter($LS($LZ), 
        g#0, 
        _module.__default.append(Tclass._module.G(), $LS($LZ), xs#0, #_module.List.Cons(b#0, ys#0))));
}



procedure {:verboseName "filter_append_notBelow (call)"} Call$$_module.__default.filter__append__notBelow(g#0: Box
       where $IsBox(g#0, Tclass._module.G()) && $IsAllocBox(g#0, Tclass._module.G(), $Heap), 
    b#0: Box
       where $IsBox(b#0, Tclass._module.G()) && $IsAllocBox(b#0, Tclass._module.G(), $Heap), 
    xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(xs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(xs#0), 
    ys#0: DatatypeType
       where $Is(ys#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(ys#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(ys#0));
  // user-defined preconditions
  requires {:id "id1015"} _module.__default.sorted#canCall(xs#0)
     ==> _module.__default.sorted($LS($LZ), xs#0)
       || (_module.List.Nil_q(xs#0) ==> Lit(true));
  requires {:id "id1016"} _module.__default.sorted#canCall(xs#0)
     ==> _module.__default.sorted($LS($LZ), xs#0)
       || (!_module.List.Nil_q(xs#0)
         ==> (var ys#1 := _module.List.tail(xs#0); 
          (var a#0 := _module.List.head(xs#0); 
            (forall y#0: Box :: 
              { _module.__default.Below(a#0, y#0) } 
                { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#1), y#0) } 
              $IsBox(y#0, Tclass._module.G())
                 ==> 
                MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LS($LZ)), ys#1), y#0)
                   > 0
                 ==> _module.__default.Below(a#0, y#0)))));
  requires {:id "id1017"} _module.__default.sorted#canCall(xs#0)
     ==> _module.__default.sorted($LS($LZ), xs#0)
       || (!_module.List.Nil_q(xs#0)
         ==> (var ys#1 := _module.List.tail(xs#0); 
          (var a#0 := _module.List.head(xs#0); 
            _module.__default.sorted($LS($LS($LZ)), ys#1))));
  requires {:id "id1018"} _module.List.Cons_q(xs#0)
     ==> !_module.__default.Below(_module.List.head(xs#0), b#0);
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#_module.List(_module.__default.filter($LS($LZ), 
        g#0, 
        #_module.List.Cons(b#0, _module.__default.append(Tclass._module.G(), $LS($LZ), xs#0, ys#0))))
     && $IsA#_module.List(_module.__default.filter($LS($LZ), 
        g#0, 
        _module.__default.append(Tclass._module.G(), $LS($LZ), xs#0, #_module.List.Cons(b#0, ys#0))))
     && 
    _module.__default.append#canCall(Tclass._module.G(), xs#0, ys#0)
     && _module.__default.filter#canCall(g#0, 
      #_module.List.Cons(b#0, _module.__default.append(Tclass._module.G(), $LS($LZ), xs#0, ys#0)))
     && 
    _module.__default.append#canCall(Tclass._module.G(), xs#0, #_module.List.Cons(b#0, ys#0))
     && _module.__default.filter#canCall(g#0, 
      _module.__default.append(Tclass._module.G(), $LS($LZ), xs#0, #_module.List.Cons(b#0, ys#0)));
  ensures {:id "id1019"} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
      g#0, 
      #_module.List.Cons(b#0, _module.__default.append(Tclass._module.G(), $LS($LS($LZ)), xs#0, ys#0))), 
    _module.__default.filter($LS($LS($LZ)), 
      g#0, 
      _module.__default.append(Tclass._module.G(), $LS($LS($LZ)), xs#0, #_module.List.Cons(b#0, ys#0))));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "filter_append_notBelow (correctness)"} Impl$$_module.__default.filter__append__notBelow(g#0: Box
       where $IsBox(g#0, Tclass._module.G()) && $IsAllocBox(g#0, Tclass._module.G(), $Heap), 
    b#0: Box
       where $IsBox(b#0, Tclass._module.G()) && $IsAllocBox(b#0, Tclass._module.G(), $Heap), 
    xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(xs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(xs#0), 
    ys#0: DatatypeType
       where $Is(ys#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(ys#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(ys#0))
   returns ($_reverifyPost: bool);
  free requires 3 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id1020"} _module.__default.sorted#canCall(xs#0)
     && 
    _module.__default.sorted($LS($LZ), xs#0)
     && (if _module.List.Nil_q(xs#0)
       then true
       else (var ys#4 := _module.List.tail(xs#0); 
        (var a#3 := _module.List.head(xs#0); 
          (forall y#3: Box :: 
              { _module.__default.Below(a#3, y#3) } 
                { MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#4), y#3) } 
              $IsBox(y#3, Tclass._module.G())
                 ==> 
                MultiSet#Multiplicity(_module.__default.multiset__of(Tclass._module.G(), $LS($LZ), ys#4), y#3)
                   > 0
                 ==> _module.__default.Below(a#3, y#3))
             && _module.__default.sorted($LS($LZ), ys#4))));
  requires {:id "id1021"} _module.List.Cons_q(xs#0)
     ==> !_module.__default.Below(_module.List.head(xs#0), b#0);
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#_module.List(_module.__default.filter($LS($LZ), 
        g#0, 
        #_module.List.Cons(b#0, _module.__default.append(Tclass._module.G(), $LS($LZ), xs#0, ys#0))))
     && $IsA#_module.List(_module.__default.filter($LS($LZ), 
        g#0, 
        _module.__default.append(Tclass._module.G(), $LS($LZ), xs#0, #_module.List.Cons(b#0, ys#0))))
     && 
    _module.__default.append#canCall(Tclass._module.G(), xs#0, ys#0)
     && _module.__default.filter#canCall(g#0, 
      #_module.List.Cons(b#0, _module.__default.append(Tclass._module.G(), $LS($LZ), xs#0, ys#0)))
     && 
    _module.__default.append#canCall(Tclass._module.G(), xs#0, #_module.List.Cons(b#0, ys#0))
     && _module.__default.filter#canCall(g#0, 
      _module.__default.append(Tclass._module.G(), $LS($LZ), xs#0, #_module.List.Cons(b#0, ys#0)));
  ensures {:id "id1022"} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
      g#0, 
      #_module.List.Cons(b#0, _module.__default.append(Tclass._module.G(), $LS($LS($LZ)), xs#0, ys#0))), 
    _module.__default.filter($LS($LS($LZ)), 
      g#0, 
      _module.__default.append(Tclass._module.G(), $LS($LS($LZ)), xs#0, #_module.List.Cons(b#0, ys#0))));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "filter_append_notBelow (correctness)"} Impl$$_module.__default.filter__append__notBelow(g#0: Box, b#0: Box, xs#0: DatatypeType, ys#0: DatatypeType)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $initHeapForallStmt#0: Heap;

    // AddMethodImpl: filter_append_notBelow, Impl$$_module.__default.filter__append__notBelow
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume $IsA#_module.List(xs#0);
    assume $IsA#_module.List(ys#0);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#xs0#0: DatatypeType, $ih#ys0#0: DatatypeType :: 
      { _module.__default.append(Tclass._module.G(), $LS($LZ), $ih#xs0#0, #_module.List.Cons(b#0, $ih#ys0#0)) } 
        { #_module.List.Cons(b#0, 
          _module.__default.append(Tclass._module.G(), $LS($LZ), $ih#xs0#0, $ih#ys0#0)) } 
      $Is($ih#xs0#0, Tclass._module.List(Tclass._module.G()))
           && $Is($ih#ys0#0, Tclass._module.List(Tclass._module.G()))
           && 
          _module.__default.sorted($LS($LZ), $ih#xs0#0)
           && (_module.List.Cons_q($ih#xs0#0)
             ==> !_module.__default.Below(_module.List.head($ih#xs0#0), b#0))
           && (DtRank($ih#xs0#0) < DtRank(xs#0)
             || (DtRank($ih#xs0#0) == DtRank(xs#0) && DtRank($ih#ys0#0) < DtRank(ys#0)))
         ==> _module.List#Equal(_module.__default.filter($LS($LZ), 
            g#0, 
            #_module.List.Cons(b#0, 
              _module.__default.append(Tclass._module.G(), $LS($LZ), $ih#xs0#0, $ih#ys0#0))), 
          _module.__default.filter($LS($LZ), 
            g#0, 
            _module.__default.append(Tclass._module.G(), $LS($LZ), $ih#xs0#0, #_module.List.Cons(b#0, $ih#ys0#0)))));
    $_reverifyPost := false;
}



procedure {:verboseName "filter_Cons_notBelow (well-formedness)"} CheckWellFormed$$_module.__default.filter__Cons__notBelow(g#0: Box
       where $IsBox(g#0, Tclass._module.G()) && $IsAllocBox(g#0, Tclass._module.G(), $Heap), 
    b#0: Box
       where $IsBox(b#0, Tclass._module.G()) && $IsAllocBox(b#0, Tclass._module.G(), $Heap), 
    a#0: Box
       where $IsBox(a#0, Tclass._module.G()) && $IsAllocBox(a#0, Tclass._module.G(), $Heap), 
    ys#0: DatatypeType
       where $Is(ys#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(ys#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(ys#0));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "filter_Cons_notBelow (call)"} Call$$_module.__default.filter__Cons__notBelow(g#0: Box
       where $IsBox(g#0, Tclass._module.G()) && $IsAllocBox(g#0, Tclass._module.G(), $Heap), 
    b#0: Box
       where $IsBox(b#0, Tclass._module.G()) && $IsAllocBox(b#0, Tclass._module.G(), $Heap), 
    a#0: Box
       where $IsBox(a#0, Tclass._module.G()) && $IsAllocBox(a#0, Tclass._module.G(), $Heap), 
    ys#0: DatatypeType
       where $Is(ys#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(ys#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(ys#0));
  // user-defined preconditions
  requires {:id "id1025"} !_module.__default.Below(a#0, b#0);
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#_module.List(_module.__default.filter($LS($LZ), g#0, #_module.List.Cons(b#0, #_module.List.Cons(a#0, ys#0))))
     && $IsA#_module.List(_module.__default.filter($LS($LZ), g#0, #_module.List.Cons(a#0, #_module.List.Cons(b#0, ys#0))))
     && 
    _module.__default.filter#canCall(g#0, #_module.List.Cons(b#0, #_module.List.Cons(a#0, ys#0)))
     && _module.__default.filter#canCall(g#0, #_module.List.Cons(a#0, #_module.List.Cons(b#0, ys#0)));
  ensures {:id "id1026"} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), g#0, #_module.List.Cons(b#0, #_module.List.Cons(a#0, ys#0))), 
    _module.__default.filter($LS($LS($LZ)), g#0, #_module.List.Cons(a#0, #_module.List.Cons(b#0, ys#0))));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "filter_Cons_notBelow (correctness)"} Impl$$_module.__default.filter__Cons__notBelow(g#0: Box
       where $IsBox(g#0, Tclass._module.G()) && $IsAllocBox(g#0, Tclass._module.G(), $Heap), 
    b#0: Box
       where $IsBox(b#0, Tclass._module.G()) && $IsAllocBox(b#0, Tclass._module.G(), $Heap), 
    a#0: Box
       where $IsBox(a#0, Tclass._module.G()) && $IsAllocBox(a#0, Tclass._module.G(), $Heap), 
    ys#0: DatatypeType
       where $Is(ys#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(ys#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(ys#0))
   returns ($_reverifyPost: bool);
  free requires 2 == $FunctionContextHeight;
  // user-defined preconditions
  requires {:id "id1027"} !_module.__default.Below(a#0, b#0);
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#_module.List(_module.__default.filter($LS($LZ), g#0, #_module.List.Cons(b#0, #_module.List.Cons(a#0, ys#0))))
     && $IsA#_module.List(_module.__default.filter($LS($LZ), g#0, #_module.List.Cons(a#0, #_module.List.Cons(b#0, ys#0))))
     && 
    _module.__default.filter#canCall(g#0, #_module.List.Cons(b#0, #_module.List.Cons(a#0, ys#0)))
     && _module.__default.filter#canCall(g#0, #_module.List.Cons(a#0, #_module.List.Cons(b#0, ys#0)));
  ensures {:id "id1028"} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), g#0, #_module.List.Cons(b#0, #_module.List.Cons(a#0, ys#0))), 
    _module.__default.filter($LS($LS($LZ)), g#0, #_module.List.Cons(a#0, #_module.List.Cons(b#0, ys#0))));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "filter_Cons_notBelow (correctness)"} Impl$$_module.__default.filter__Cons__notBelow(g#0: Box, b#0: Box, a#0: Box, ys#0: DatatypeType) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $initHeapForallStmt#0: Heap;

    // AddMethodImpl: filter_Cons_notBelow, Impl$$_module.__default.filter__Cons__notBelow
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume $IsA#_module.List(ys#0);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#ys0#0: DatatypeType :: 
      { #_module.List.Cons(a#0, #_module.List.Cons(b#0, $ih#ys0#0)) } 
        { #_module.List.Cons(b#0, #_module.List.Cons(a#0, $ih#ys0#0)) } 
      $Is($ih#ys0#0, Tclass._module.List(Tclass._module.G()))
           && !_module.__default.Below(a#0, b#0)
           && DtRank($ih#ys0#0) < DtRank(ys#0)
         ==> _module.List#Equal(_module.__default.filter($LS($LZ), g#0, #_module.List.Cons(b#0, #_module.List.Cons(a#0, $ih#ys0#0))), 
          _module.__default.filter($LS($LZ), g#0, #_module.List.Cons(a#0, #_module.List.Cons(b#0, $ih#ys0#0)))));
    $_reverifyPost := false;
}



procedure {:verboseName "filter_append_reverse (well-formedness)"} CheckWellFormed$$_module.__default.filter__append__reverse(g#0: Box
       where $IsBox(g#0, Tclass._module.G()) && $IsAllocBox(g#0, Tclass._module.G(), $Heap), 
    b#0: Box
       where $IsBox(b#0, Tclass._module.G()) && $IsAllocBox(b#0, Tclass._module.G(), $Heap), 
    xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(xs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(xs#0), 
    ys#0: DatatypeType
       where $Is(ys#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(ys#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(ys#0));
  free requires 4 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "filter_append_reverse (call)"} Call$$_module.__default.filter__append__reverse(g#0: Box
       where $IsBox(g#0, Tclass._module.G()) && $IsAllocBox(g#0, Tclass._module.G(), $Heap), 
    b#0: Box
       where $IsBox(b#0, Tclass._module.G()) && $IsAllocBox(b#0, Tclass._module.G(), $Heap), 
    xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(xs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(xs#0), 
    ys#0: DatatypeType
       where $Is(ys#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(ys#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(ys#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#_module.List(_module.__default.filter($LS($LZ), 
        g#0, 
        _module.__default.append(Tclass._module.G(), 
          $LS($LZ), 
          _module.__default.reverse(Tclass._module.G(), 
            $LS($LZ), 
            xs#0, 
            #_module.List.Cons(b#0, Lit(#_module.List.Nil()))), 
          ys#0)))
     && $IsA#_module.List(_module.__default.filter($LS($LZ), 
        g#0, 
        _module.__default.append(Tclass._module.G(), 
          $LS($LZ), 
          _module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, Lit(#_module.List.Nil())), 
          #_module.List.Cons(b#0, ys#0))))
     && 
    _module.__default.reverse#canCall(Tclass._module.G(), xs#0, #_module.List.Cons(b#0, Lit(#_module.List.Nil())))
     && _module.__default.append#canCall(Tclass._module.G(), 
      _module.__default.reverse(Tclass._module.G(), 
        $LS($LZ), 
        xs#0, 
        #_module.List.Cons(b#0, Lit(#_module.List.Nil()))), 
      ys#0)
     && _module.__default.filter#canCall(g#0, 
      _module.__default.append(Tclass._module.G(), 
        $LS($LZ), 
        _module.__default.reverse(Tclass._module.G(), 
          $LS($LZ), 
          xs#0, 
          #_module.List.Cons(b#0, Lit(#_module.List.Nil()))), 
        ys#0))
     && 
    _module.__default.reverse#canCall(Tclass._module.G(), xs#0, Lit(#_module.List.Nil()))
     && _module.__default.append#canCall(Tclass._module.G(), 
      _module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, Lit(#_module.List.Nil())), 
      #_module.List.Cons(b#0, ys#0))
     && _module.__default.filter#canCall(g#0, 
      _module.__default.append(Tclass._module.G(), 
        $LS($LZ), 
        _module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, Lit(#_module.List.Nil())), 
        #_module.List.Cons(b#0, ys#0)));
  ensures {:id "id1030"} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
      g#0, 
      _module.__default.append(Tclass._module.G(), 
        $LS($LS($LZ)), 
        _module.__default.reverse(Tclass._module.G(), 
          $LS($LS($LZ)), 
          xs#0, 
          #_module.List.Cons(b#0, Lit(#_module.List.Nil()))), 
        ys#0)), 
    _module.__default.filter($LS($LS($LZ)), 
      g#0, 
      _module.__default.append(Tclass._module.G(), 
        $LS($LS($LZ)), 
        _module.__default.reverse(Tclass._module.G(), $LS($LS($LZ)), xs#0, Lit(#_module.List.Nil())), 
        #_module.List.Cons(b#0, ys#0))));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "filter_append_reverse (correctness)"} Impl$$_module.__default.filter__append__reverse(g#0: Box
       where $IsBox(g#0, Tclass._module.G()) && $IsAllocBox(g#0, Tclass._module.G(), $Heap), 
    b#0: Box
       where $IsBox(b#0, Tclass._module.G()) && $IsAllocBox(b#0, Tclass._module.G(), $Heap), 
    xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(xs#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(xs#0), 
    ys#0: DatatypeType
       where $Is(ys#0, Tclass._module.List(Tclass._module.G()))
         && $IsAlloc(ys#0, Tclass._module.List(Tclass._module.G()), $Heap)
         && $IsA#_module.List(ys#0))
   returns ($_reverifyPost: bool);
  free requires 4 == $FunctionContextHeight;
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#_module.List(_module.__default.filter($LS($LZ), 
        g#0, 
        _module.__default.append(Tclass._module.G(), 
          $LS($LZ), 
          _module.__default.reverse(Tclass._module.G(), 
            $LS($LZ), 
            xs#0, 
            #_module.List.Cons(b#0, Lit(#_module.List.Nil()))), 
          ys#0)))
     && $IsA#_module.List(_module.__default.filter($LS($LZ), 
        g#0, 
        _module.__default.append(Tclass._module.G(), 
          $LS($LZ), 
          _module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, Lit(#_module.List.Nil())), 
          #_module.List.Cons(b#0, ys#0))))
     && 
    _module.__default.reverse#canCall(Tclass._module.G(), xs#0, #_module.List.Cons(b#0, Lit(#_module.List.Nil())))
     && _module.__default.append#canCall(Tclass._module.G(), 
      _module.__default.reverse(Tclass._module.G(), 
        $LS($LZ), 
        xs#0, 
        #_module.List.Cons(b#0, Lit(#_module.List.Nil()))), 
      ys#0)
     && _module.__default.filter#canCall(g#0, 
      _module.__default.append(Tclass._module.G(), 
        $LS($LZ), 
        _module.__default.reverse(Tclass._module.G(), 
          $LS($LZ), 
          xs#0, 
          #_module.List.Cons(b#0, Lit(#_module.List.Nil()))), 
        ys#0))
     && 
    _module.__default.reverse#canCall(Tclass._module.G(), xs#0, Lit(#_module.List.Nil()))
     && _module.__default.append#canCall(Tclass._module.G(), 
      _module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, Lit(#_module.List.Nil())), 
      #_module.List.Cons(b#0, ys#0))
     && _module.__default.filter#canCall(g#0, 
      _module.__default.append(Tclass._module.G(), 
        $LS($LZ), 
        _module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, Lit(#_module.List.Nil())), 
        #_module.List.Cons(b#0, ys#0)));
  ensures {:id "id1031"} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
      g#0, 
      _module.__default.append(Tclass._module.G(), 
        $LS($LS($LZ)), 
        _module.__default.reverse(Tclass._module.G(), 
          $LS($LS($LZ)), 
          xs#0, 
          #_module.List.Cons(b#0, Lit(#_module.List.Nil()))), 
        ys#0)), 
    _module.__default.filter($LS($LS($LZ)), 
      g#0, 
      _module.__default.append(Tclass._module.G(), 
        $LS($LS($LZ)), 
        _module.__default.reverse(Tclass._module.G(), $LS($LS($LZ)), xs#0, Lit(#_module.List.Nil())), 
        #_module.List.Cons(b#0, ys#0))));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "filter_append_reverse (correctness)"} Impl$$_module.__default.filter__append__reverse(g#0: Box, b#0: Box, xs#0: DatatypeType, ys#0: DatatypeType)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $initHeapForallStmt#0: Heap;
  var _mcc#0#0_0: Box;
  var _mcc#1#0_0: DatatypeType;
  var xs'#0_0: DatatypeType;
  var let#0_0#0#0: DatatypeType;
  var c#0_0: Box;
  var let#0_1#0#0: Box;
  var ##g#0_0_0_0: Box;
  var ##xs#0_0_0_0: DatatypeType;
  var ##xs#0_0_0_1: DatatypeType;
  var ##xs#0_0_0_2: DatatypeType;
  var ##acc#0_0_0_0: DatatypeType;
  var ##ys#0_0_0_0: DatatypeType;
  var ##g#0_0_0_1: Box;
  var ##xs#0_0_0_3: DatatypeType;
  var ##xs#0_0_0_4: DatatypeType;
  var ##xs#0_0_0_5: DatatypeType;
  var ##acc#0_0_0_1: DatatypeType;
  var ##ys#0_0_0_1: DatatypeType;
  var ##g#0_0_1_0: Box;
  var ##xs#0_0_1_0: DatatypeType;
  var ##xs#0_0_1_1: DatatypeType;
  var ##xs#0_0_1_2: DatatypeType;
  var ##acc#0_0_1_0: DatatypeType;
  var ##ys#0_0_1_0: DatatypeType;
  var ##g#0_0_1_1: Box;
  var ##xs#0_0_1_3: DatatypeType;
  var ##xs#0_0_1_4: DatatypeType;
  var ##xs#0_0_1_5: DatatypeType;
  var ##acc#0_0_1_1: DatatypeType;
  var ##ys#0_0_1_1: DatatypeType;
  var ##g#0_0_2_0: Box;
  var ##xs#0_0_2_0: DatatypeType;
  var ##xs#0_0_2_1: DatatypeType;
  var ##xs#0_0_2_2: DatatypeType;
  var ##acc#0_0_2_0: DatatypeType;
  var ##ys#0_0_2_0: DatatypeType;
  var ##xs#0_0_2_3: DatatypeType;
  var ##ys#0_0_2_1: DatatypeType;
  var ##g#0_0_2_1: Box;
  var ##xs#0_0_2_4: DatatypeType;
  var ##xs#0_0_2_5: DatatypeType;
  var ##xs#0_0_2_6: DatatypeType;
  var ##acc#0_0_2_1: DatatypeType;
  var ##ys#0_0_2_2: DatatypeType;
  var ##g#0_0_3_0: Box;
  var ##xs#0_0_3_0: DatatypeType;
  var ##xs#0_0_3_1: DatatypeType;
  var ##xs#0_0_3_2: DatatypeType;
  var ##xs#0_0_3_3: DatatypeType;
  var ##acc#0_0_3_0: DatatypeType;
  var ##ys#0_0_3_0: DatatypeType;
  var ##ys#0_0_3_1: DatatypeType;
  var xs##0_0_3_0: DatatypeType;
  var ##xs#0_0_3_4: DatatypeType;
  var ##acc#0_0_3_1: DatatypeType;
  var ys##0_0_3_0: DatatypeType;
  var zs##0_0_3_0: DatatypeType;
  var ##g#0_0_3_1: Box;
  var ##xs#0_0_3_5: DatatypeType;
  var ##xs#0_0_3_6: DatatypeType;
  var ##xs#0_0_3_7: DatatypeType;
  var ##acc#0_0_3_2: DatatypeType;
  var ##ys#0_0_3_2: DatatypeType;
  var ##xs#0_0_3_8: DatatypeType;
  var ##ys#0_0_3_3: DatatypeType;
  var ##g#0_0_4_0: Box;
  var ##xs#0_0_4_0: DatatypeType;
  var ##xs#0_0_4_1: DatatypeType;
  var ##xs#0_0_4_2: DatatypeType;
  var ##xs#0_0_4_3: DatatypeType;
  var ##acc#0_0_4_0: DatatypeType;
  var ##ys#0_0_4_0: DatatypeType;
  var ##ys#0_0_4_1: DatatypeType;
  var ##g#0_0_4_1: Box;
  var ##xs#0_0_4_4: DatatypeType;
  var ##xs#0_0_4_5: DatatypeType;
  var ##xs#0_0_4_6: DatatypeType;
  var ##xs#0_0_4_7: DatatypeType;
  var ##acc#0_0_4_1: DatatypeType;
  var ##ys#0_0_4_2: DatatypeType;
  var ##ys#0_0_4_3: DatatypeType;
  var ##g#0_0_5_0: Box;
  var ##xs#0_0_5_0: DatatypeType;
  var ##xs#0_0_5_1: DatatypeType;
  var ##xs#0_0_5_2: DatatypeType;
  var ##acc#0_0_5_0: DatatypeType;
  var ##ys#0_0_5_0: DatatypeType;
  var xs##0_0_5_0: DatatypeType;
  var ys##0_0_5_0: DatatypeType;
  var ##g#0_0_5_1: Box;
  var ##xs#0_0_5_3: DatatypeType;
  var ##xs#0_0_5_4: DatatypeType;
  var ##xs#0_0_5_5: DatatypeType;
  var ##xs#0_0_5_6: DatatypeType;
  var ##acc#0_0_5_1: DatatypeType;
  var ##ys#0_0_5_1: DatatypeType;
  var ##ys#0_0_5_2: DatatypeType;
  var ##g#0_0_6_0: Box;
  var ##xs#0_0_6_0: DatatypeType;
  var ##xs#0_0_6_1: DatatypeType;
  var ##xs#0_0_6_2: DatatypeType;
  var ##acc#0_0_6_0: DatatypeType;
  var ##ys#0_0_6_0: DatatypeType;
  var ##g#0_0_6_1: Box;
  var ##xs#0_0_6_3: DatatypeType;
  var ##xs#0_0_6_4: DatatypeType;
  var ##xs#0_0_6_5: DatatypeType;
  var ##acc#0_0_6_1: DatatypeType;
  var ##ys#0_0_6_1: DatatypeType;
  var ##g#0_0_0: Box;
  var ##xs#0_0_0: DatatypeType;
  var ##xs#0_0_1: DatatypeType;
  var ##xs#0_0_2: DatatypeType;
  var ##acc#0_0_0: DatatypeType;
  var ##ys#0_0_0: DatatypeType;

    // AddMethodImpl: filter_append_reverse, Impl$$_module.__default.filter__append__reverse
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume $IsA#_module.List(xs#0);
    assume $IsA#_module.List(ys#0);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#xs0#0: DatatypeType, $ih#ys0#0: DatatypeType :: 
      { #_module.List.Cons(b#0, $ih#ys0#0), _module.__default.reverse(Tclass._module.G(), $LS($LZ), $ih#xs0#0, Lit(#_module.List.Nil())) } 
        { #_module.List.Cons(b#0, $ih#ys0#0), _module.__default.reverse(Tclass._module.G(), 
          $LS($LZ), 
          $ih#xs0#0, 
          #_module.List.Cons(b#0, Lit(#_module.List.Nil()))) } 
      $Is($ih#xs0#0, Tclass._module.List(Tclass._module.G()))
           && $Is($ih#ys0#0, Tclass._module.List(Tclass._module.G()))
           && Lit(true)
           && (DtRank($ih#xs0#0) < DtRank(xs#0)
             || (DtRank($ih#xs0#0) == DtRank(xs#0) && DtRank($ih#ys0#0) < DtRank(ys#0)))
         ==> _module.List#Equal(_module.__default.filter($LS($LZ), 
            g#0, 
            _module.__default.append(Tclass._module.G(), 
              $LS($LZ), 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                $ih#xs0#0, 
                #_module.List.Cons(b#0, Lit(#_module.List.Nil()))), 
              $ih#ys0#0)), 
          _module.__default.filter($LS($LZ), 
            g#0, 
            _module.__default.append(Tclass._module.G(), 
              $LS($LZ), 
              _module.__default.reverse(Tclass._module.G(), $LS($LZ), $ih#xs0#0, Lit(#_module.List.Nil())), 
              #_module.List.Cons(b#0, $ih#ys0#0)))));
    $_reverifyPost := false;
    assume true;
    havoc _mcc#0#0_0, _mcc#1#0_0;
    if (xs#0 == #_module.List.Nil())
    {
    }
    else if (xs#0 == #_module.List.Cons(_mcc#0#0_0, _mcc#1#0_0))
    {
        assume $IsBox(_mcc#0#0_0, Tclass._module.G());
        assume $Is(_mcc#1#0_0, Tclass._module.List(Tclass._module.G()));
        havoc xs'#0_0;
        assume $Is(xs'#0_0, Tclass._module.List(Tclass._module.G()))
           && $IsAlloc(xs'#0_0, Tclass._module.List(Tclass._module.G()), $Heap);
        assume {:id "id1032"} let#0_0#0#0 == _mcc#1#0_0;
        assume true;
        assume true;
        // CheckWellformedWithResult: any expression
        assume $Is(let#0_0#0#0, Tclass._module.List(Tclass._module.G()));
        assume {:id "id1033"} xs'#0_0 == let#0_0#0#0;
        havoc c#0_0;
        assume $IsBox(c#0_0, Tclass._module.G())
           && $IsAllocBox(c#0_0, Tclass._module.G(), $Heap);
        assume {:id "id1034"} let#0_1#0#0 == _mcc#0#0_0;
        assume true;
        assume true;
        // CheckWellformedWithResult: any expression
        assume $IsBox(let#0_1#0#0, Tclass._module.G());
        assume {:id "id1035"} c#0_0 == let#0_1#0#0;
        // ----- calc statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(687,7)
        // Assume Fuel Constant
        if (*)
        {
            // ----- assert wf[initial] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(687,7)
            ##g#0_0_0 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_0, Tclass._module.G(), $Heap);
            ##xs#0_0_2 := xs#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_2, Tclass._module.List(Tclass._module.G()), $Heap);
            ##acc#0_0_0 := #_module.List.Cons(b#0, Lit(#_module.List.Nil()));
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#0_0_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.reverse#canCall(Tclass._module.G(), xs#0, #_module.List.Cons(b#0, Lit(#_module.List.Nil())));
            ##xs#0_0_1 := _module.__default.reverse(Tclass._module.G(), 
              $LS($LZ), 
              xs#0, 
              #_module.List.Cons(b#0, Lit(#_module.List.Nil())));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_1, Tclass._module.List(Tclass._module.G()), $Heap);
            ##ys#0_0_0 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                xs#0, 
                #_module.List.Cons(b#0, Lit(#_module.List.Nil()))), 
              ys#0);
            ##xs#0_0_0 := _module.__default.append(Tclass._module.G(), 
              $LS($LZ), 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                xs#0, 
                #_module.List.Cons(b#0, Lit(#_module.List.Nil()))), 
              ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  xs#0, 
                  #_module.List.Cons(b#0, Lit(#_module.List.Nil()))), 
                ys#0));
            assume _module.__default.reverse#canCall(Tclass._module.G(), xs#0, #_module.List.Cons(b#0, Lit(#_module.List.Nil())))
               && _module.__default.append#canCall(Tclass._module.G(), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  xs#0, 
                  #_module.List.Cons(b#0, Lit(#_module.List.Nil()))), 
                ys#0)
               && _module.__default.filter#canCall(g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LZ), 
                    xs#0, 
                    #_module.List.Cons(b#0, Lit(#_module.List.Nil()))), 
                  ys#0));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(687,7)
            ##g#0_0_6_0 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_6_0, Tclass._module.G(), $Heap);
            ##xs#0_0_6_2 := xs#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_6_2, Tclass._module.List(Tclass._module.G()), $Heap);
            ##acc#0_0_6_0 := #_module.List.Cons(b#0, Lit(#_module.List.Nil()));
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#0_0_6_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.reverse#canCall(Tclass._module.G(), xs#0, #_module.List.Cons(b#0, Lit(#_module.List.Nil())));
            ##xs#0_0_6_1 := _module.__default.reverse(Tclass._module.G(), 
              $LS($LZ), 
              xs#0, 
              #_module.List.Cons(b#0, Lit(#_module.List.Nil())));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_6_1, Tclass._module.List(Tclass._module.G()), $Heap);
            ##ys#0_0_6_0 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_6_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                xs#0, 
                #_module.List.Cons(b#0, Lit(#_module.List.Nil()))), 
              ys#0);
            ##xs#0_0_6_0 := _module.__default.append(Tclass._module.G(), 
              $LS($LZ), 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                xs#0, 
                #_module.List.Cons(b#0, Lit(#_module.List.Nil()))), 
              ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_6_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  xs#0, 
                  #_module.List.Cons(b#0, Lit(#_module.List.Nil()))), 
                ys#0));
            assume _module.__default.reverse#canCall(Tclass._module.G(), xs#0, #_module.List.Cons(b#0, Lit(#_module.List.Nil())))
               && _module.__default.append#canCall(Tclass._module.G(), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  xs#0, 
                  #_module.List.Cons(b#0, Lit(#_module.List.Nil()))), 
                ys#0)
               && _module.__default.filter#canCall(g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LZ), 
                    xs#0, 
                    #_module.List.Cons(b#0, Lit(#_module.List.Nil()))), 
                  ys#0));
            // ----- Hint0 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(687,7)
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(687,7)
            ##g#0_0_6_1 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_6_1, Tclass._module.G(), $Heap);
            ##xs#0_0_6_5 := #_module.List.Cons(c#0_0, xs'#0_0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_6_5, Tclass._module.List(Tclass._module.G()), $Heap);
            ##acc#0_0_6_1 := #_module.List.Cons(b#0, Lit(#_module.List.Nil()));
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#0_0_6_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.reverse#canCall(Tclass._module.G(), 
              #_module.List.Cons(c#0_0, xs'#0_0), 
              #_module.List.Cons(b#0, Lit(#_module.List.Nil())));
            ##xs#0_0_6_4 := _module.__default.reverse(Tclass._module.G(), 
              $LS($LZ), 
              #_module.List.Cons(c#0_0, xs'#0_0), 
              #_module.List.Cons(b#0, Lit(#_module.List.Nil())));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_6_4, Tclass._module.List(Tclass._module.G()), $Heap);
            ##ys#0_0_6_1 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_6_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(c#0_0, xs'#0_0), 
                #_module.List.Cons(b#0, Lit(#_module.List.Nil()))), 
              ys#0);
            ##xs#0_0_6_3 := _module.__default.append(Tclass._module.G(), 
              $LS($LZ), 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(c#0_0, xs'#0_0), 
                #_module.List.Cons(b#0, Lit(#_module.List.Nil()))), 
              ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_6_3, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(c#0_0, xs'#0_0), 
                  #_module.List.Cons(b#0, Lit(#_module.List.Nil()))), 
                ys#0));
            assume _module.__default.reverse#canCall(Tclass._module.G(), 
                #_module.List.Cons(c#0_0, xs'#0_0), 
                #_module.List.Cons(b#0, Lit(#_module.List.Nil())))
               && _module.__default.append#canCall(Tclass._module.G(), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(c#0_0, xs'#0_0), 
                  #_module.List.Cons(b#0, Lit(#_module.List.Nil()))), 
                ys#0)
               && _module.__default.filter#canCall(g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LZ), 
                    #_module.List.Cons(c#0_0, xs'#0_0), 
                    #_module.List.Cons(b#0, Lit(#_module.List.Nil()))), 
                  ys#0));
            // ----- assert line0 == line1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(687,7)
            assert {:id "id1044"} {:subsumption 0} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    xs#0, 
                    #_module.List.Cons(b#0, Lit(#_module.List.Nil()))), 
                  ys#0)), 
              _module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    #_module.List.Cons(c#0_0, xs'#0_0), 
                    #_module.List.Cons(b#0, Lit(#_module.List.Nil()))), 
                  ys#0)));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(687,7)
            ##g#0_0_5_0 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_5_0, Tclass._module.G(), $Heap);
            ##xs#0_0_5_2 := #_module.List.Cons(c#0_0, xs'#0_0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_5_2, Tclass._module.List(Tclass._module.G()), $Heap);
            ##acc#0_0_5_0 := #_module.List.Cons(b#0, Lit(#_module.List.Nil()));
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#0_0_5_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.reverse#canCall(Tclass._module.G(), 
              #_module.List.Cons(c#0_0, xs'#0_0), 
              #_module.List.Cons(b#0, Lit(#_module.List.Nil())));
            ##xs#0_0_5_1 := _module.__default.reverse(Tclass._module.G(), 
              $LS($LZ), 
              #_module.List.Cons(c#0_0, xs'#0_0), 
              #_module.List.Cons(b#0, Lit(#_module.List.Nil())));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_5_1, Tclass._module.List(Tclass._module.G()), $Heap);
            ##ys#0_0_5_0 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_5_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(c#0_0, xs'#0_0), 
                #_module.List.Cons(b#0, Lit(#_module.List.Nil()))), 
              ys#0);
            ##xs#0_0_5_0 := _module.__default.append(Tclass._module.G(), 
              $LS($LZ), 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(c#0_0, xs'#0_0), 
                #_module.List.Cons(b#0, Lit(#_module.List.Nil()))), 
              ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_5_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(c#0_0, xs'#0_0), 
                  #_module.List.Cons(b#0, Lit(#_module.List.Nil()))), 
                ys#0));
            assume _module.__default.reverse#canCall(Tclass._module.G(), 
                #_module.List.Cons(c#0_0, xs'#0_0), 
                #_module.List.Cons(b#0, Lit(#_module.List.Nil())))
               && _module.__default.append#canCall(Tclass._module.G(), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(c#0_0, xs'#0_0), 
                  #_module.List.Cons(b#0, Lit(#_module.List.Nil()))), 
                ys#0)
               && _module.__default.filter#canCall(g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LZ), 
                    #_module.List.Cons(c#0_0, xs'#0_0), 
                    #_module.List.Cons(b#0, Lit(#_module.List.Nil()))), 
                  ys#0));
            // ----- Hint1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(687,7)
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(690,25)
            // TrCallStmt: Before ProcessCallStmt
            assume true;
            // ProcessCallStmt: CheckSubrange
            xs##0_0_5_0 := #_module.List.Cons(c#0_0, xs'#0_0);
            assume true;
            // ProcessCallStmt: CheckSubrange
            ys##0_0_5_0 := #_module.List.Cons(b#0, Lit(#_module.List.Nil()));
            call {:id "id1042"} Call$$_module.__default.append__reverse(Tclass._module.G(), xs##0_0_5_0, ys##0_0_5_0);
            // TrCallStmt: After ProcessCallStmt
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(687,7)
            ##g#0_0_5_1 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_5_1, Tclass._module.G(), $Heap);
            ##xs#0_0_5_6 := #_module.List.Cons(c#0_0, xs'#0_0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_5_6, Tclass._module.List(Tclass._module.G()), $Heap);
            ##acc#0_0_5_1 := Lit(#_module.List.Nil());
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#0_0_5_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(c#0_0, xs'#0_0), Lit(#_module.List.Nil()));
            ##xs#0_0_5_5 := _module.__default.reverse(Tclass._module.G(), 
              $LS($LZ), 
              #_module.List.Cons(c#0_0, xs'#0_0), 
              Lit(#_module.List.Nil()));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_5_5, Tclass._module.List(Tclass._module.G()), $Heap);
            ##ys#0_0_5_1 := #_module.List.Cons(b#0, Lit(#_module.List.Nil()));
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_5_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(c#0_0, xs'#0_0), 
                Lit(#_module.List.Nil())), 
              #_module.List.Cons(b#0, Lit(#_module.List.Nil())));
            ##xs#0_0_5_4 := _module.__default.append(Tclass._module.G(), 
              $LS($LZ), 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(c#0_0, xs'#0_0), 
                Lit(#_module.List.Nil())), 
              #_module.List.Cons(b#0, Lit(#_module.List.Nil())));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_5_4, Tclass._module.List(Tclass._module.G()), $Heap);
            ##ys#0_0_5_2 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_5_2, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(c#0_0, xs'#0_0), 
                  Lit(#_module.List.Nil())), 
                #_module.List.Cons(b#0, Lit(#_module.List.Nil()))), 
              ys#0);
            ##xs#0_0_5_3 := _module.__default.append(Tclass._module.G(), 
              $LS($LZ), 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(c#0_0, xs'#0_0), 
                  Lit(#_module.List.Nil())), 
                #_module.List.Cons(b#0, Lit(#_module.List.Nil()))), 
              ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_5_3, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LZ), 
                    #_module.List.Cons(c#0_0, xs'#0_0), 
                    Lit(#_module.List.Nil())), 
                  #_module.List.Cons(b#0, Lit(#_module.List.Nil()))), 
                ys#0));
            assume _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(c#0_0, xs'#0_0), Lit(#_module.List.Nil()))
               && _module.__default.append#canCall(Tclass._module.G(), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(c#0_0, xs'#0_0), 
                  Lit(#_module.List.Nil())), 
                #_module.List.Cons(b#0, Lit(#_module.List.Nil())))
               && _module.__default.append#canCall(Tclass._module.G(), 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LZ), 
                    #_module.List.Cons(c#0_0, xs'#0_0), 
                    Lit(#_module.List.Nil())), 
                  #_module.List.Cons(b#0, Lit(#_module.List.Nil()))), 
                ys#0)
               && _module.__default.filter#canCall(g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  _module.__default.append(Tclass._module.G(), 
                    $LS($LZ), 
                    _module.__default.reverse(Tclass._module.G(), 
                      $LS($LZ), 
                      #_module.List.Cons(c#0_0, xs'#0_0), 
                      Lit(#_module.List.Nil())), 
                    #_module.List.Cons(b#0, Lit(#_module.List.Nil()))), 
                  ys#0));
            // ----- assert line1 == line2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(687,7)
            assert {:id "id1043"} {:subsumption 0} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    #_module.List.Cons(c#0_0, xs'#0_0), 
                    #_module.List.Cons(b#0, Lit(#_module.List.Nil()))), 
                  ys#0)), 
              _module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  _module.__default.append(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    _module.__default.reverse(Tclass._module.G(), 
                      $LS($LS($LZ)), 
                      #_module.List.Cons(c#0_0, xs'#0_0), 
                      Lit(#_module.List.Nil())), 
                    #_module.List.Cons(b#0, Lit(#_module.List.Nil()))), 
                  ys#0)));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(687,7)
            ##g#0_0_4_0 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_4_0, Tclass._module.G(), $Heap);
            ##xs#0_0_4_3 := #_module.List.Cons(c#0_0, xs'#0_0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_4_3, Tclass._module.List(Tclass._module.G()), $Heap);
            ##acc#0_0_4_0 := Lit(#_module.List.Nil());
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#0_0_4_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(c#0_0, xs'#0_0), Lit(#_module.List.Nil()));
            ##xs#0_0_4_2 := _module.__default.reverse(Tclass._module.G(), 
              $LS($LZ), 
              #_module.List.Cons(c#0_0, xs'#0_0), 
              Lit(#_module.List.Nil()));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_4_2, Tclass._module.List(Tclass._module.G()), $Heap);
            ##ys#0_0_4_0 := #_module.List.Cons(b#0, Lit(#_module.List.Nil()));
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_4_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(c#0_0, xs'#0_0), 
                Lit(#_module.List.Nil())), 
              #_module.List.Cons(b#0, Lit(#_module.List.Nil())));
            ##xs#0_0_4_1 := _module.__default.append(Tclass._module.G(), 
              $LS($LZ), 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(c#0_0, xs'#0_0), 
                Lit(#_module.List.Nil())), 
              #_module.List.Cons(b#0, Lit(#_module.List.Nil())));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_4_1, Tclass._module.List(Tclass._module.G()), $Heap);
            ##ys#0_0_4_1 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_4_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(c#0_0, xs'#0_0), 
                  Lit(#_module.List.Nil())), 
                #_module.List.Cons(b#0, Lit(#_module.List.Nil()))), 
              ys#0);
            ##xs#0_0_4_0 := _module.__default.append(Tclass._module.G(), 
              $LS($LZ), 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(c#0_0, xs'#0_0), 
                  Lit(#_module.List.Nil())), 
                #_module.List.Cons(b#0, Lit(#_module.List.Nil()))), 
              ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_4_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LZ), 
                    #_module.List.Cons(c#0_0, xs'#0_0), 
                    Lit(#_module.List.Nil())), 
                  #_module.List.Cons(b#0, Lit(#_module.List.Nil()))), 
                ys#0));
            assume _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(c#0_0, xs'#0_0), Lit(#_module.List.Nil()))
               && _module.__default.append#canCall(Tclass._module.G(), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(c#0_0, xs'#0_0), 
                  Lit(#_module.List.Nil())), 
                #_module.List.Cons(b#0, Lit(#_module.List.Nil())))
               && _module.__default.append#canCall(Tclass._module.G(), 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LZ), 
                    #_module.List.Cons(c#0_0, xs'#0_0), 
                    Lit(#_module.List.Nil())), 
                  #_module.List.Cons(b#0, Lit(#_module.List.Nil()))), 
                ys#0)
               && _module.__default.filter#canCall(g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  _module.__default.append(Tclass._module.G(), 
                    $LS($LZ), 
                    _module.__default.reverse(Tclass._module.G(), 
                      $LS($LZ), 
                      #_module.List.Cons(c#0_0, xs'#0_0), 
                      Lit(#_module.List.Nil())), 
                    #_module.List.Cons(b#0, Lit(#_module.List.Nil()))), 
                  ys#0));
            // ----- Hint2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(687,7)
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(687,7)
            ##g#0_0_4_1 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_4_1, Tclass._module.G(), $Heap);
            ##xs#0_0_4_7 := xs'#0_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_4_7, Tclass._module.List(Tclass._module.G()), $Heap);
            ##acc#0_0_4_1 := #_module.List.Cons(c#0_0, Lit(#_module.List.Nil()));
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#0_0_4_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.reverse#canCall(Tclass._module.G(), xs'#0_0, #_module.List.Cons(c#0_0, Lit(#_module.List.Nil())));
            ##xs#0_0_4_6 := _module.__default.reverse(Tclass._module.G(), 
              $LS($LZ), 
              xs'#0_0, 
              #_module.List.Cons(c#0_0, Lit(#_module.List.Nil())));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_4_6, Tclass._module.List(Tclass._module.G()), $Heap);
            ##ys#0_0_4_2 := #_module.List.Cons(b#0, Lit(#_module.List.Nil()));
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_4_2, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                xs'#0_0, 
                #_module.List.Cons(c#0_0, Lit(#_module.List.Nil()))), 
              #_module.List.Cons(b#0, Lit(#_module.List.Nil())));
            ##xs#0_0_4_5 := _module.__default.append(Tclass._module.G(), 
              $LS($LZ), 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                xs'#0_0, 
                #_module.List.Cons(c#0_0, Lit(#_module.List.Nil()))), 
              #_module.List.Cons(b#0, Lit(#_module.List.Nil())));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_4_5, Tclass._module.List(Tclass._module.G()), $Heap);
            ##ys#0_0_4_3 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_4_3, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  xs'#0_0, 
                  #_module.List.Cons(c#0_0, Lit(#_module.List.Nil()))), 
                #_module.List.Cons(b#0, Lit(#_module.List.Nil()))), 
              ys#0);
            ##xs#0_0_4_4 := _module.__default.append(Tclass._module.G(), 
              $LS($LZ), 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  xs'#0_0, 
                  #_module.List.Cons(c#0_0, Lit(#_module.List.Nil()))), 
                #_module.List.Cons(b#0, Lit(#_module.List.Nil()))), 
              ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_4_4, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LZ), 
                    xs'#0_0, 
                    #_module.List.Cons(c#0_0, Lit(#_module.List.Nil()))), 
                  #_module.List.Cons(b#0, Lit(#_module.List.Nil()))), 
                ys#0));
            assume _module.__default.reverse#canCall(Tclass._module.G(), xs'#0_0, #_module.List.Cons(c#0_0, Lit(#_module.List.Nil())))
               && _module.__default.append#canCall(Tclass._module.G(), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  xs'#0_0, 
                  #_module.List.Cons(c#0_0, Lit(#_module.List.Nil()))), 
                #_module.List.Cons(b#0, Lit(#_module.List.Nil())))
               && _module.__default.append#canCall(Tclass._module.G(), 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LZ), 
                    xs'#0_0, 
                    #_module.List.Cons(c#0_0, Lit(#_module.List.Nil()))), 
                  #_module.List.Cons(b#0, Lit(#_module.List.Nil()))), 
                ys#0)
               && _module.__default.filter#canCall(g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  _module.__default.append(Tclass._module.G(), 
                    $LS($LZ), 
                    _module.__default.reverse(Tclass._module.G(), 
                      $LS($LZ), 
                      xs'#0_0, 
                      #_module.List.Cons(c#0_0, Lit(#_module.List.Nil()))), 
                    #_module.List.Cons(b#0, Lit(#_module.List.Nil()))), 
                  ys#0));
            // ----- assert line2 == line3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(687,7)
            assert {:id "id1041"} {:subsumption 0} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  _module.__default.append(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    _module.__default.reverse(Tclass._module.G(), 
                      $LS($LS($LZ)), 
                      #_module.List.Cons(c#0_0, xs'#0_0), 
                      Lit(#_module.List.Nil())), 
                    #_module.List.Cons(b#0, Lit(#_module.List.Nil()))), 
                  ys#0)), 
              _module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  _module.__default.append(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    _module.__default.reverse(Tclass._module.G(), 
                      $LS($LS($LZ)), 
                      xs'#0_0, 
                      #_module.List.Cons(c#0_0, Lit(#_module.List.Nil()))), 
                    #_module.List.Cons(b#0, Lit(#_module.List.Nil()))), 
                  ys#0)));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(687,7)
            ##g#0_0_3_0 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_3_0, Tclass._module.G(), $Heap);
            ##xs#0_0_3_3 := xs'#0_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_3_3, Tclass._module.List(Tclass._module.G()), $Heap);
            ##acc#0_0_3_0 := #_module.List.Cons(c#0_0, Lit(#_module.List.Nil()));
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#0_0_3_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.reverse#canCall(Tclass._module.G(), xs'#0_0, #_module.List.Cons(c#0_0, Lit(#_module.List.Nil())));
            ##xs#0_0_3_2 := _module.__default.reverse(Tclass._module.G(), 
              $LS($LZ), 
              xs'#0_0, 
              #_module.List.Cons(c#0_0, Lit(#_module.List.Nil())));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_3_2, Tclass._module.List(Tclass._module.G()), $Heap);
            ##ys#0_0_3_0 := #_module.List.Cons(b#0, Lit(#_module.List.Nil()));
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_3_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                xs'#0_0, 
                #_module.List.Cons(c#0_0, Lit(#_module.List.Nil()))), 
              #_module.List.Cons(b#0, Lit(#_module.List.Nil())));
            ##xs#0_0_3_1 := _module.__default.append(Tclass._module.G(), 
              $LS($LZ), 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                xs'#0_0, 
                #_module.List.Cons(c#0_0, Lit(#_module.List.Nil()))), 
              #_module.List.Cons(b#0, Lit(#_module.List.Nil())));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_3_1, Tclass._module.List(Tclass._module.G()), $Heap);
            ##ys#0_0_3_1 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_3_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  xs'#0_0, 
                  #_module.List.Cons(c#0_0, Lit(#_module.List.Nil()))), 
                #_module.List.Cons(b#0, Lit(#_module.List.Nil()))), 
              ys#0);
            ##xs#0_0_3_0 := _module.__default.append(Tclass._module.G(), 
              $LS($LZ), 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  xs'#0_0, 
                  #_module.List.Cons(c#0_0, Lit(#_module.List.Nil()))), 
                #_module.List.Cons(b#0, Lit(#_module.List.Nil()))), 
              ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_3_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LZ), 
                    xs'#0_0, 
                    #_module.List.Cons(c#0_0, Lit(#_module.List.Nil()))), 
                  #_module.List.Cons(b#0, Lit(#_module.List.Nil()))), 
                ys#0));
            assume _module.__default.reverse#canCall(Tclass._module.G(), xs'#0_0, #_module.List.Cons(c#0_0, Lit(#_module.List.Nil())))
               && _module.__default.append#canCall(Tclass._module.G(), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  xs'#0_0, 
                  #_module.List.Cons(c#0_0, Lit(#_module.List.Nil()))), 
                #_module.List.Cons(b#0, Lit(#_module.List.Nil())))
               && _module.__default.append#canCall(Tclass._module.G(), 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LZ), 
                    xs'#0_0, 
                    #_module.List.Cons(c#0_0, Lit(#_module.List.Nil()))), 
                  #_module.List.Cons(b#0, Lit(#_module.List.Nil()))), 
                ys#0)
               && _module.__default.filter#canCall(g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  _module.__default.append(Tclass._module.G(), 
                    $LS($LZ), 
                    _module.__default.reverse(Tclass._module.G(), 
                      $LS($LZ), 
                      xs'#0_0, 
                      #_module.List.Cons(c#0_0, Lit(#_module.List.Nil()))), 
                    #_module.List.Cons(b#0, Lit(#_module.List.Nil()))), 
                  ys#0));
            // ----- Hint3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(687,7)
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(694,29)
            // TrCallStmt: Before ProcessCallStmt
            ##xs#0_0_3_4 := xs'#0_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_3_4, Tclass._module.List(Tclass._module.G()), $Heap);
            ##acc#0_0_3_1 := #_module.List.Cons(c#0_0, Lit(#_module.List.Nil()));
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#0_0_3_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.reverse#canCall(Tclass._module.G(), xs'#0_0, #_module.List.Cons(c#0_0, Lit(#_module.List.Nil())));
            assume _module.__default.reverse#canCall(Tclass._module.G(), xs'#0_0, #_module.List.Cons(c#0_0, Lit(#_module.List.Nil())));
            // ProcessCallStmt: CheckSubrange
            xs##0_0_3_0 := _module.__default.reverse(Tclass._module.G(), 
              $LS($LZ), 
              xs'#0_0, 
              #_module.List.Cons(c#0_0, Lit(#_module.List.Nil())));
            assume true;
            // ProcessCallStmt: CheckSubrange
            ys##0_0_3_0 := #_module.List.Cons(b#0, Lit(#_module.List.Nil()));
            assume true;
            // ProcessCallStmt: CheckSubrange
            zs##0_0_3_0 := ys#0;
            call {:id "id1039"} Call$$_module.__default.append__associative(Tclass._module.G(), xs##0_0_3_0, ys##0_0_3_0, zs##0_0_3_0);
            // TrCallStmt: After ProcessCallStmt
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(687,7)
            ##g#0_0_3_1 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_3_1, Tclass._module.G(), $Heap);
            ##xs#0_0_3_7 := xs'#0_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_3_7, Tclass._module.List(Tclass._module.G()), $Heap);
            ##acc#0_0_3_2 := #_module.List.Cons(c#0_0, Lit(#_module.List.Nil()));
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#0_0_3_2, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.reverse#canCall(Tclass._module.G(), xs'#0_0, #_module.List.Cons(c#0_0, Lit(#_module.List.Nil())));
            ##xs#0_0_3_6 := _module.__default.reverse(Tclass._module.G(), 
              $LS($LZ), 
              xs'#0_0, 
              #_module.List.Cons(c#0_0, Lit(#_module.List.Nil())));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_3_6, Tclass._module.List(Tclass._module.G()), $Heap);
            ##xs#0_0_3_8 := #_module.List.Cons(b#0, Lit(#_module.List.Nil()));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_3_8, Tclass._module.List(Tclass._module.G()), $Heap);
            ##ys#0_0_3_3 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_3_3, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), #_module.List.Cons(b#0, Lit(#_module.List.Nil())), ys#0);
            ##ys#0_0_3_2 := _module.__default.append(Tclass._module.G(), 
              $LS($LZ), 
              #_module.List.Cons(b#0, Lit(#_module.List.Nil())), 
              ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_3_2, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                xs'#0_0, 
                #_module.List.Cons(c#0_0, Lit(#_module.List.Nil()))), 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(b#0, Lit(#_module.List.Nil())), 
                ys#0));
            ##xs#0_0_3_5 := _module.__default.append(Tclass._module.G(), 
              $LS($LZ), 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                xs'#0_0, 
                #_module.List.Cons(c#0_0, Lit(#_module.List.Nil()))), 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(b#0, Lit(#_module.List.Nil())), 
                ys#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_3_5, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  xs'#0_0, 
                  #_module.List.Cons(c#0_0, Lit(#_module.List.Nil()))), 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(b#0, Lit(#_module.List.Nil())), 
                  ys#0)));
            assume _module.__default.reverse#canCall(Tclass._module.G(), xs'#0_0, #_module.List.Cons(c#0_0, Lit(#_module.List.Nil())))
               && _module.__default.append#canCall(Tclass._module.G(), #_module.List.Cons(b#0, Lit(#_module.List.Nil())), ys#0)
               && _module.__default.append#canCall(Tclass._module.G(), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  xs'#0_0, 
                  #_module.List.Cons(c#0_0, Lit(#_module.List.Nil()))), 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(b#0, Lit(#_module.List.Nil())), 
                  ys#0))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LZ), 
                    xs'#0_0, 
                    #_module.List.Cons(c#0_0, Lit(#_module.List.Nil()))), 
                  _module.__default.append(Tclass._module.G(), 
                    $LS($LZ), 
                    #_module.List.Cons(b#0, Lit(#_module.List.Nil())), 
                    ys#0)));
            // ----- assert line3 == line4 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(687,7)
            assert {:id "id1040"} {:subsumption 0} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  _module.__default.append(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    _module.__default.reverse(Tclass._module.G(), 
                      $LS($LS($LZ)), 
                      xs'#0_0, 
                      #_module.List.Cons(c#0_0, Lit(#_module.List.Nil()))), 
                    #_module.List.Cons(b#0, Lit(#_module.List.Nil()))), 
                  ys#0)), 
              _module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    xs'#0_0, 
                    #_module.List.Cons(c#0_0, Lit(#_module.List.Nil()))), 
                  _module.__default.append(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    #_module.List.Cons(b#0, Lit(#_module.List.Nil())), 
                    ys#0))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(687,7)
            ##g#0_0_2_0 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_2_0, Tclass._module.G(), $Heap);
            ##xs#0_0_2_2 := xs'#0_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_2_2, Tclass._module.List(Tclass._module.G()), $Heap);
            ##acc#0_0_2_0 := #_module.List.Cons(c#0_0, Lit(#_module.List.Nil()));
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#0_0_2_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.reverse#canCall(Tclass._module.G(), xs'#0_0, #_module.List.Cons(c#0_0, Lit(#_module.List.Nil())));
            ##xs#0_0_2_1 := _module.__default.reverse(Tclass._module.G(), 
              $LS($LZ), 
              xs'#0_0, 
              #_module.List.Cons(c#0_0, Lit(#_module.List.Nil())));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_2_1, Tclass._module.List(Tclass._module.G()), $Heap);
            ##xs#0_0_2_3 := #_module.List.Cons(b#0, Lit(#_module.List.Nil()));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_2_3, Tclass._module.List(Tclass._module.G()), $Heap);
            ##ys#0_0_2_1 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_2_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), #_module.List.Cons(b#0, Lit(#_module.List.Nil())), ys#0);
            ##ys#0_0_2_0 := _module.__default.append(Tclass._module.G(), 
              $LS($LZ), 
              #_module.List.Cons(b#0, Lit(#_module.List.Nil())), 
              ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_2_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                xs'#0_0, 
                #_module.List.Cons(c#0_0, Lit(#_module.List.Nil()))), 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(b#0, Lit(#_module.List.Nil())), 
                ys#0));
            ##xs#0_0_2_0 := _module.__default.append(Tclass._module.G(), 
              $LS($LZ), 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                xs'#0_0, 
                #_module.List.Cons(c#0_0, Lit(#_module.List.Nil()))), 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(b#0, Lit(#_module.List.Nil())), 
                ys#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_2_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  xs'#0_0, 
                  #_module.List.Cons(c#0_0, Lit(#_module.List.Nil()))), 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(b#0, Lit(#_module.List.Nil())), 
                  ys#0)));
            assume _module.__default.reverse#canCall(Tclass._module.G(), xs'#0_0, #_module.List.Cons(c#0_0, Lit(#_module.List.Nil())))
               && _module.__default.append#canCall(Tclass._module.G(), #_module.List.Cons(b#0, Lit(#_module.List.Nil())), ys#0)
               && _module.__default.append#canCall(Tclass._module.G(), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  xs'#0_0, 
                  #_module.List.Cons(c#0_0, Lit(#_module.List.Nil()))), 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(b#0, Lit(#_module.List.Nil())), 
                  ys#0))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LZ), 
                    xs'#0_0, 
                    #_module.List.Cons(c#0_0, Lit(#_module.List.Nil()))), 
                  _module.__default.append(Tclass._module.G(), 
                    $LS($LZ), 
                    #_module.List.Cons(b#0, Lit(#_module.List.Nil())), 
                    ys#0)));
            // ----- Hint4 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(687,7)
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(687,7)
            ##g#0_0_2_1 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_2_1, Tclass._module.G(), $Heap);
            ##xs#0_0_2_6 := xs'#0_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_2_6, Tclass._module.List(Tclass._module.G()), $Heap);
            ##acc#0_0_2_1 := #_module.List.Cons(c#0_0, Lit(#_module.List.Nil()));
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#0_0_2_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.reverse#canCall(Tclass._module.G(), xs'#0_0, #_module.List.Cons(c#0_0, Lit(#_module.List.Nil())));
            ##xs#0_0_2_5 := _module.__default.reverse(Tclass._module.G(), 
              $LS($LZ), 
              xs'#0_0, 
              #_module.List.Cons(c#0_0, Lit(#_module.List.Nil())));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_2_5, Tclass._module.List(Tclass._module.G()), $Heap);
            ##ys#0_0_2_2 := #_module.List.Cons(b#0, ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_2_2, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                xs'#0_0, 
                #_module.List.Cons(c#0_0, Lit(#_module.List.Nil()))), 
              #_module.List.Cons(b#0, ys#0));
            ##xs#0_0_2_4 := _module.__default.append(Tclass._module.G(), 
              $LS($LZ), 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                xs'#0_0, 
                #_module.List.Cons(c#0_0, Lit(#_module.List.Nil()))), 
              #_module.List.Cons(b#0, ys#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_2_4, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  xs'#0_0, 
                  #_module.List.Cons(c#0_0, Lit(#_module.List.Nil()))), 
                #_module.List.Cons(b#0, ys#0)));
            assume _module.__default.reverse#canCall(Tclass._module.G(), xs'#0_0, #_module.List.Cons(c#0_0, Lit(#_module.List.Nil())))
               && _module.__default.append#canCall(Tclass._module.G(), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  xs'#0_0, 
                  #_module.List.Cons(c#0_0, Lit(#_module.List.Nil()))), 
                #_module.List.Cons(b#0, ys#0))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LZ), 
                    xs'#0_0, 
                    #_module.List.Cons(c#0_0, Lit(#_module.List.Nil()))), 
                  #_module.List.Cons(b#0, ys#0)));
            // ----- assert line4 == line5 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(687,7)
            assert {:id "id1038"} {:subsumption 0} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    xs'#0_0, 
                    #_module.List.Cons(c#0_0, Lit(#_module.List.Nil()))), 
                  _module.__default.append(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    #_module.List.Cons(b#0, Lit(#_module.List.Nil())), 
                    ys#0))), 
              _module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    xs'#0_0, 
                    #_module.List.Cons(c#0_0, Lit(#_module.List.Nil()))), 
                  #_module.List.Cons(b#0, ys#0))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(687,7)
            ##g#0_0_1_0 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_1_0, Tclass._module.G(), $Heap);
            ##xs#0_0_1_2 := xs'#0_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_1_2, Tclass._module.List(Tclass._module.G()), $Heap);
            ##acc#0_0_1_0 := #_module.List.Cons(c#0_0, Lit(#_module.List.Nil()));
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#0_0_1_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.reverse#canCall(Tclass._module.G(), xs'#0_0, #_module.List.Cons(c#0_0, Lit(#_module.List.Nil())));
            ##xs#0_0_1_1 := _module.__default.reverse(Tclass._module.G(), 
              $LS($LZ), 
              xs'#0_0, 
              #_module.List.Cons(c#0_0, Lit(#_module.List.Nil())));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_1_1, Tclass._module.List(Tclass._module.G()), $Heap);
            ##ys#0_0_1_0 := #_module.List.Cons(b#0, ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_1_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                xs'#0_0, 
                #_module.List.Cons(c#0_0, Lit(#_module.List.Nil()))), 
              #_module.List.Cons(b#0, ys#0));
            ##xs#0_0_1_0 := _module.__default.append(Tclass._module.G(), 
              $LS($LZ), 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                xs'#0_0, 
                #_module.List.Cons(c#0_0, Lit(#_module.List.Nil()))), 
              #_module.List.Cons(b#0, ys#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_1_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  xs'#0_0, 
                  #_module.List.Cons(c#0_0, Lit(#_module.List.Nil()))), 
                #_module.List.Cons(b#0, ys#0)));
            assume _module.__default.reverse#canCall(Tclass._module.G(), xs'#0_0, #_module.List.Cons(c#0_0, Lit(#_module.List.Nil())))
               && _module.__default.append#canCall(Tclass._module.G(), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  xs'#0_0, 
                  #_module.List.Cons(c#0_0, Lit(#_module.List.Nil()))), 
                #_module.List.Cons(b#0, ys#0))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LZ), 
                    xs'#0_0, 
                    #_module.List.Cons(c#0_0, Lit(#_module.List.Nil()))), 
                  #_module.List.Cons(b#0, ys#0)));
            // ----- Hint5 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(687,7)
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(687,7)
            ##g#0_0_1_1 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_1_1, Tclass._module.G(), $Heap);
            ##xs#0_0_1_5 := #_module.List.Cons(c#0_0, xs'#0_0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_1_5, Tclass._module.List(Tclass._module.G()), $Heap);
            ##acc#0_0_1_1 := Lit(#_module.List.Nil());
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#0_0_1_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(c#0_0, xs'#0_0), Lit(#_module.List.Nil()));
            ##xs#0_0_1_4 := _module.__default.reverse(Tclass._module.G(), 
              $LS($LZ), 
              #_module.List.Cons(c#0_0, xs'#0_0), 
              Lit(#_module.List.Nil()));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_1_4, Tclass._module.List(Tclass._module.G()), $Heap);
            ##ys#0_0_1_1 := #_module.List.Cons(b#0, ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_1_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(c#0_0, xs'#0_0), 
                Lit(#_module.List.Nil())), 
              #_module.List.Cons(b#0, ys#0));
            ##xs#0_0_1_3 := _module.__default.append(Tclass._module.G(), 
              $LS($LZ), 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(c#0_0, xs'#0_0), 
                Lit(#_module.List.Nil())), 
              #_module.List.Cons(b#0, ys#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_1_3, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(c#0_0, xs'#0_0), 
                  Lit(#_module.List.Nil())), 
                #_module.List.Cons(b#0, ys#0)));
            assume _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(c#0_0, xs'#0_0), Lit(#_module.List.Nil()))
               && _module.__default.append#canCall(Tclass._module.G(), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(c#0_0, xs'#0_0), 
                  Lit(#_module.List.Nil())), 
                #_module.List.Cons(b#0, ys#0))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LZ), 
                    #_module.List.Cons(c#0_0, xs'#0_0), 
                    Lit(#_module.List.Nil())), 
                  #_module.List.Cons(b#0, ys#0)));
            // ----- assert line5 == line6 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(687,7)
            assert {:id "id1037"} {:subsumption 0} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    xs'#0_0, 
                    #_module.List.Cons(c#0_0, Lit(#_module.List.Nil()))), 
                  #_module.List.Cons(b#0, ys#0))), 
              _module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    #_module.List.Cons(c#0_0, xs'#0_0), 
                    Lit(#_module.List.Nil())), 
                  #_module.List.Cons(b#0, ys#0))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(687,7)
            ##g#0_0_0_0 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_0_0, Tclass._module.G(), $Heap);
            ##xs#0_0_0_2 := #_module.List.Cons(c#0_0, xs'#0_0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_0_2, Tclass._module.List(Tclass._module.G()), $Heap);
            ##acc#0_0_0_0 := Lit(#_module.List.Nil());
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#0_0_0_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(c#0_0, xs'#0_0), Lit(#_module.List.Nil()));
            ##xs#0_0_0_1 := _module.__default.reverse(Tclass._module.G(), 
              $LS($LZ), 
              #_module.List.Cons(c#0_0, xs'#0_0), 
              Lit(#_module.List.Nil()));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_0_1, Tclass._module.List(Tclass._module.G()), $Heap);
            ##ys#0_0_0_0 := #_module.List.Cons(b#0, ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_0_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(c#0_0, xs'#0_0), 
                Lit(#_module.List.Nil())), 
              #_module.List.Cons(b#0, ys#0));
            ##xs#0_0_0_0 := _module.__default.append(Tclass._module.G(), 
              $LS($LZ), 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                #_module.List.Cons(c#0_0, xs'#0_0), 
                Lit(#_module.List.Nil())), 
              #_module.List.Cons(b#0, ys#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_0_0, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(c#0_0, xs'#0_0), 
                  Lit(#_module.List.Nil())), 
                #_module.List.Cons(b#0, ys#0)));
            assume _module.__default.reverse#canCall(Tclass._module.G(), #_module.List.Cons(c#0_0, xs'#0_0), Lit(#_module.List.Nil()))
               && _module.__default.append#canCall(Tclass._module.G(), 
                _module.__default.reverse(Tclass._module.G(), 
                  $LS($LZ), 
                  #_module.List.Cons(c#0_0, xs'#0_0), 
                  Lit(#_module.List.Nil())), 
                #_module.List.Cons(b#0, ys#0))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LZ), 
                    #_module.List.Cons(c#0_0, xs'#0_0), 
                    Lit(#_module.List.Nil())), 
                  #_module.List.Cons(b#0, ys#0)));
            // ----- Hint6 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(687,7)
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(687,7)
            ##g#0_0_0_1 := g#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##g#0_0_0_1, Tclass._module.G(), $Heap);
            ##xs#0_0_0_5 := xs#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_0_5, Tclass._module.List(Tclass._module.G()), $Heap);
            ##acc#0_0_0_1 := Lit(#_module.List.Nil());
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#0_0_0_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.reverse#canCall(Tclass._module.G(), xs#0, Lit(#_module.List.Nil()));
            ##xs#0_0_0_4 := _module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, Lit(#_module.List.Nil()));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_0_4, Tclass._module.List(Tclass._module.G()), $Heap);
            ##ys#0_0_0_1 := #_module.List.Cons(b#0, ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_0_1, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.append#canCall(Tclass._module.G(), 
              _module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, Lit(#_module.List.Nil())), 
              #_module.List.Cons(b#0, ys#0));
            ##xs#0_0_0_3 := _module.__default.append(Tclass._module.G(), 
              $LS($LZ), 
              _module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, Lit(#_module.List.Nil())), 
              #_module.List.Cons(b#0, ys#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_0_3, Tclass._module.List(Tclass._module.G()), $Heap);
            assume _module.__default.filter#canCall(g#0, 
              _module.__default.append(Tclass._module.G(), 
                $LS($LZ), 
                _module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, Lit(#_module.List.Nil())), 
                #_module.List.Cons(b#0, ys#0)));
            assume _module.__default.reverse#canCall(Tclass._module.G(), xs#0, Lit(#_module.List.Nil()))
               && _module.__default.append#canCall(Tclass._module.G(), 
                _module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, Lit(#_module.List.Nil())), 
                #_module.List.Cons(b#0, ys#0))
               && _module.__default.filter#canCall(g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LZ), 
                  _module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, Lit(#_module.List.Nil())), 
                  #_module.List.Cons(b#0, ys#0)));
            // ----- assert line6 == line7 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(687,7)
            assert {:id "id1036"} {:subsumption 0} _module.List#Equal(_module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  _module.__default.reverse(Tclass._module.G(), 
                    $LS($LS($LZ)), 
                    #_module.List.Cons(c#0_0, xs'#0_0), 
                    Lit(#_module.List.Nil())), 
                  #_module.List.Cons(b#0, ys#0))), 
              _module.__default.filter($LS($LS($LZ)), 
                g#0, 
                _module.__default.append(Tclass._module.G(), 
                  $LS($LS($LZ)), 
                  _module.__default.reverse(Tclass._module.G(), $LS($LS($LZ)), xs#0, Lit(#_module.List.Nil())), 
                  #_module.List.Cons(b#0, ys#0))));
            assume false;
        }

        assume {:id "id1045"} _module.List#Equal(_module.__default.filter($LS($LZ), 
            g#0, 
            _module.__default.append(Tclass._module.G(), 
              $LS($LZ), 
              _module.__default.reverse(Tclass._module.G(), 
                $LS($LZ), 
                xs#0, 
                #_module.List.Cons(b#0, Lit(#_module.List.Nil()))), 
              ys#0)), 
          _module.__default.filter($LS($LZ), 
            g#0, 
            _module.__default.append(Tclass._module.G(), 
              $LS($LZ), 
              _module.__default.reverse(Tclass._module.G(), $LS($LZ), xs#0, Lit(#_module.List.Nil())), 
              #_module.List.Cons(b#0, ys#0))));
    }
    else
    {
        assume false;
    }
}



procedure {:verboseName "append_reverse (well-formedness)"} CheckWellFormed$$_module.__default.append__reverse(_module._default.append_reverse$_T0: Ty, 
    xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(_module._default.append_reverse$_T0))
         && $IsAlloc(xs#0, Tclass._module.List(_module._default.append_reverse$_T0), $Heap)
         && $IsA#_module.List(xs#0), 
    ys#0: DatatypeType
       where $Is(ys#0, Tclass._module.List(_module._default.append_reverse$_T0))
         && $IsAlloc(ys#0, Tclass._module.List(_module._default.append_reverse$_T0), $Heap)
         && $IsA#_module.List(ys#0));
  free requires 3 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "append_reverse (call)"} Call$$_module.__default.append__reverse(_module._default.append_reverse$_T0: Ty, 
    xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(_module._default.append_reverse$_T0))
         && $IsAlloc(xs#0, Tclass._module.List(_module._default.append_reverse$_T0), $Heap)
         && $IsA#_module.List(xs#0), 
    ys#0: DatatypeType
       where $Is(ys#0, Tclass._module.List(_module._default.append_reverse$_T0))
         && $IsAlloc(ys#0, Tclass._module.List(_module._default.append_reverse$_T0), $Heap)
         && $IsA#_module.List(ys#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#_module.List(_module.__default.reverse(_module._default.append_reverse$_T0, $LS($LZ), xs#0, ys#0))
     && $IsA#_module.List(_module.__default.append(_module._default.append_reverse$_T0, 
        $LS($LZ), 
        _module.__default.reverse(_module._default.append_reverse$_T0, $LS($LZ), xs#0, Lit(#_module.List.Nil())), 
        ys#0))
     && 
    _module.__default.reverse#canCall(_module._default.append_reverse$_T0, xs#0, ys#0)
     && 
    _module.__default.reverse#canCall(_module._default.append_reverse$_T0, xs#0, Lit(#_module.List.Nil()))
     && _module.__default.append#canCall(_module._default.append_reverse$_T0, 
      _module.__default.reverse(_module._default.append_reverse$_T0, $LS($LZ), xs#0, Lit(#_module.List.Nil())), 
      ys#0);
  ensures {:id "id1047"} _module.List#Equal(_module.__default.reverse(_module._default.append_reverse$_T0, $LS($LS($LZ)), xs#0, ys#0), 
    _module.__default.append(_module._default.append_reverse$_T0, 
      $LS($LS($LZ)), 
      _module.__default.reverse(_module._default.append_reverse$_T0, 
        $LS($LS($LZ)), 
        xs#0, 
        Lit(#_module.List.Nil())), 
      ys#0));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "append_reverse (correctness)"} Impl$$_module.__default.append__reverse(_module._default.append_reverse$_T0: Ty, 
    xs#0: DatatypeType
       where $Is(xs#0, Tclass._module.List(_module._default.append_reverse$_T0))
         && $IsAlloc(xs#0, Tclass._module.List(_module._default.append_reverse$_T0), $Heap)
         && $IsA#_module.List(xs#0), 
    ys#0: DatatypeType
       where $Is(ys#0, Tclass._module.List(_module._default.append_reverse$_T0))
         && $IsAlloc(ys#0, Tclass._module.List(_module._default.append_reverse$_T0), $Heap)
         && $IsA#_module.List(ys#0))
   returns ($_reverifyPost: bool);
  free requires 3 == $FunctionContextHeight;
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#_module.List(_module.__default.reverse(_module._default.append_reverse$_T0, $LS($LZ), xs#0, ys#0))
     && $IsA#_module.List(_module.__default.append(_module._default.append_reverse$_T0, 
        $LS($LZ), 
        _module.__default.reverse(_module._default.append_reverse$_T0, $LS($LZ), xs#0, Lit(#_module.List.Nil())), 
        ys#0))
     && 
    _module.__default.reverse#canCall(_module._default.append_reverse$_T0, xs#0, ys#0)
     && 
    _module.__default.reverse#canCall(_module._default.append_reverse$_T0, xs#0, Lit(#_module.List.Nil()))
     && _module.__default.append#canCall(_module._default.append_reverse$_T0, 
      _module.__default.reverse(_module._default.append_reverse$_T0, $LS($LZ), xs#0, Lit(#_module.List.Nil())), 
      ys#0);
  ensures {:id "id1048"} _module.List#Equal(_module.__default.reverse(_module._default.append_reverse$_T0, $LS($LS($LZ)), xs#0, ys#0), 
    _module.__default.append(_module._default.append_reverse$_T0, 
      $LS($LS($LZ)), 
      _module.__default.reverse(_module._default.append_reverse$_T0, 
        $LS($LS($LZ)), 
        xs#0, 
        Lit(#_module.List.Nil())), 
      ys#0));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "append_reverse (correctness)"} Impl$$_module.__default.append__reverse(_module._default.append_reverse$_T0: Ty, xs#0: DatatypeType, ys#0: DatatypeType)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $initHeapForallStmt#0: Heap;
  var _mcc#0#0_0: Box;
  var _mcc#1#0_0: DatatypeType;
  var xs'#0_0: DatatypeType;
  var let#0_0#0#0: DatatypeType;
  var a#0_0: Box;
  var let#0_1#0#0: Box;
  var ##xs#0_0_0_0: DatatypeType;
  var ##xs#0_0_0_1: DatatypeType;
  var ##acc#0_0_0_0: DatatypeType;
  var ##ys#0_0_0_0: DatatypeType;
  var ##xs#0_0_0_2: DatatypeType;
  var ##xs#0_0_0_3: DatatypeType;
  var ##acc#0_0_0_1: DatatypeType;
  var ##ys#0_0_0_1: DatatypeType;
  var ##xs#0_0_1_0: DatatypeType;
  var ##xs#0_0_1_1: DatatypeType;
  var ##xs#0_0_1_2: DatatypeType;
  var ##acc#0_0_1_0: DatatypeType;
  var ##ys#0_0_1_0: DatatypeType;
  var ##ys#0_0_1_1: DatatypeType;
  var ##xs#0_0_1_3: DatatypeType;
  var ##xs#0_0_1_4: DatatypeType;
  var ##acc#0_0_1_1: DatatypeType;
  var ##ys#0_0_1_2: DatatypeType;
  var ##xs#0_0_2_0: DatatypeType;
  var ##xs#0_0_2_1: DatatypeType;
  var ##acc#0_0_2_0: DatatypeType;
  var ##ys#0_0_2_0: DatatypeType;
  var ##xs#0_0_2_2: DatatypeType;
  var ##ys#0_0_2_1: DatatypeType;
  var xs##0_0_2_0: DatatypeType;
  var ##xs#0_0_2_3: DatatypeType;
  var ##acc#0_0_2_1: DatatypeType;
  var ys##0_0_2_0: DatatypeType;
  var zs##0_0_2_0: DatatypeType;
  var ##xs#0_0_2_4: DatatypeType;
  var ##xs#0_0_2_5: DatatypeType;
  var ##xs#0_0_2_6: DatatypeType;
  var ##acc#0_0_2_2: DatatypeType;
  var ##ys#0_0_2_2: DatatypeType;
  var ##ys#0_0_2_3: DatatypeType;
  var ##xs#0_0_3_0: DatatypeType;
  var ##xs#0_0_3_1: DatatypeType;
  var ##acc#0_0_3_0: DatatypeType;
  var ##ys#0_0_3_0: DatatypeType;
  var ##xs#0_0_3_2: DatatypeType;
  var ##xs#0_0_3_3: DatatypeType;
  var ##acc#0_0_3_1: DatatypeType;
  var ##ys#0_0_3_1: DatatypeType;
  var ##xs#0_0_3_4: DatatypeType;
  var ##ys#0_0_3_2: DatatypeType;
  var ##xs#0_0_4_0: DatatypeType;
  var ##acc#0_0_4_0: DatatypeType;
  var ##xs#0_0_4_1: DatatypeType;
  var ##xs#0_0_4_2: DatatypeType;
  var ##acc#0_0_4_1: DatatypeType;
  var ##ys#0_0_4_0: DatatypeType;
  var ##xs#0_0_5_0: DatatypeType;
  var ##acc#0_0_5_0: DatatypeType;
  var ##xs#0_0_5_1: DatatypeType;
  var ##acc#0_0_5_1: DatatypeType;
  var ##xs#0_0_0: DatatypeType;
  var ##acc#0_0_0: DatatypeType;

    // AddMethodImpl: append_reverse, Impl$$_module.__default.append__reverse
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume $IsA#_module.List(xs#0);
    assume $IsA#_module.List(ys#0);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#xs0#0: DatatypeType, $ih#ys0#0: DatatypeType :: 
      { _module.__default.append(_module._default.append_reverse$_T0, 
          $LS($LZ), 
          _module.__default.reverse(_module._default.append_reverse$_T0, 
            $LS($LZ), 
            $ih#xs0#0, 
            Lit(#_module.List.Nil())), 
          $ih#ys0#0) } 
        { _module.__default.reverse(_module._default.append_reverse$_T0, $LS($LZ), $ih#xs0#0, $ih#ys0#0) } 
      $Is($ih#xs0#0, Tclass._module.List(_module._default.append_reverse$_T0))
           && $Is($ih#ys0#0, Tclass._module.List(_module._default.append_reverse$_T0))
           && Lit(true)
           && (DtRank($ih#xs0#0) < DtRank(xs#0)
             || (DtRank($ih#xs0#0) == DtRank(xs#0) && DtRank($ih#ys0#0) < DtRank(ys#0)))
         ==> _module.List#Equal(_module.__default.reverse(_module._default.append_reverse$_T0, $LS($LZ), $ih#xs0#0, $ih#ys0#0), 
          _module.__default.append(_module._default.append_reverse$_T0, 
            $LS($LZ), 
            _module.__default.reverse(_module._default.append_reverse$_T0, 
              $LS($LZ), 
              $ih#xs0#0, 
              Lit(#_module.List.Nil())), 
            $ih#ys0#0)));
    $_reverifyPost := false;
    assume true;
    havoc _mcc#0#0_0, _mcc#1#0_0;
    if (xs#0 == #_module.List.Nil())
    {
    }
    else if (xs#0 == #_module.List.Cons(_mcc#0#0_0, _mcc#1#0_0))
    {
        assume $IsBox(_mcc#0#0_0, _module._default.append_reverse$_T0);
        assume $Is(_mcc#1#0_0, Tclass._module.List(_module._default.append_reverse$_T0));
        havoc xs'#0_0;
        assume $Is(xs'#0_0, Tclass._module.List(_module._default.append_reverse$_T0))
           && $IsAlloc(xs'#0_0, Tclass._module.List(_module._default.append_reverse$_T0), $Heap);
        assume {:id "id1049"} let#0_0#0#0 == _mcc#1#0_0;
        assume true;
        assume true;
        // CheckWellformedWithResult: any expression
        assume $Is(let#0_0#0#0, Tclass._module.List(_module._default.append_reverse$_T0));
        assume {:id "id1050"} xs'#0_0 == let#0_0#0#0;
        havoc a#0_0;
        assume $IsBox(a#0_0, _module._default.append_reverse$_T0)
           && $IsAllocBox(a#0_0, _module._default.append_reverse$_T0, $Heap);
        assume {:id "id1051"} let#0_1#0#0 == _mcc#0#0_0;
        assume true;
        assume true;
        // CheckWellformedWithResult: any expression
        assume $IsBox(let#0_1#0#0, _module._default.append_reverse$_T0);
        assume {:id "id1052"} a#0_0 == let#0_1#0#0;
        // ----- calc statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(711,7)
        // Assume Fuel Constant
        if (*)
        {
            // ----- assert wf[initial] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(711,7)
            ##xs#0_0_0 := #_module.List.Cons(a#0_0, xs'#0_0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_0, Tclass._module.List(_module._default.append_reverse$_T0), $Heap);
            ##acc#0_0_0 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#0_0_0, Tclass._module.List(_module._default.append_reverse$_T0), $Heap);
            assume _module.__default.reverse#canCall(_module._default.append_reverse$_T0, #_module.List.Cons(a#0_0, xs'#0_0), ys#0);
            assume _module.__default.reverse#canCall(_module._default.append_reverse$_T0, #_module.List.Cons(a#0_0, xs'#0_0), ys#0);
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(711,7)
            ##xs#0_0_5_0 := #_module.List.Cons(a#0_0, xs'#0_0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_5_0, Tclass._module.List(_module._default.append_reverse$_T0), $Heap);
            ##acc#0_0_5_0 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#0_0_5_0, Tclass._module.List(_module._default.append_reverse$_T0), $Heap);
            assume _module.__default.reverse#canCall(_module._default.append_reverse$_T0, #_module.List.Cons(a#0_0, xs'#0_0), ys#0);
            assume _module.__default.reverse#canCall(_module._default.append_reverse$_T0, #_module.List.Cons(a#0_0, xs'#0_0), ys#0);
            // ----- Hint0 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(711,7)
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(711,7)
            ##xs#0_0_5_1 := xs'#0_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_5_1, Tclass._module.List(_module._default.append_reverse$_T0), $Heap);
            ##acc#0_0_5_1 := #_module.List.Cons(a#0_0, ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#0_0_5_1, Tclass._module.List(_module._default.append_reverse$_T0), $Heap);
            assume _module.__default.reverse#canCall(_module._default.append_reverse$_T0, xs'#0_0, #_module.List.Cons(a#0_0, ys#0));
            assume _module.__default.reverse#canCall(_module._default.append_reverse$_T0, xs'#0_0, #_module.List.Cons(a#0_0, ys#0));
            // ----- assert line0 == line1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(711,7)
            assert {:id "id1059"} {:subsumption 0} _module.List#Equal(_module.__default.reverse(_module._default.append_reverse$_T0, 
                $LS($LS($LZ)), 
                #_module.List.Cons(a#0_0, xs'#0_0), 
                ys#0), 
              _module.__default.reverse(_module._default.append_reverse$_T0, 
                $LS($LS($LZ)), 
                xs'#0_0, 
                #_module.List.Cons(a#0_0, ys#0)));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(711,7)
            ##xs#0_0_4_0 := xs'#0_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_4_0, Tclass._module.List(_module._default.append_reverse$_T0), $Heap);
            ##acc#0_0_4_0 := #_module.List.Cons(a#0_0, ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#0_0_4_0, Tclass._module.List(_module._default.append_reverse$_T0), $Heap);
            assume _module.__default.reverse#canCall(_module._default.append_reverse$_T0, xs'#0_0, #_module.List.Cons(a#0_0, ys#0));
            assume _module.__default.reverse#canCall(_module._default.append_reverse$_T0, xs'#0_0, #_module.List.Cons(a#0_0, ys#0));
            // ----- Hint1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(711,7)
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(711,7)
            ##xs#0_0_4_2 := xs'#0_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_4_2, Tclass._module.List(_module._default.append_reverse$_T0), $Heap);
            ##acc#0_0_4_1 := Lit(#_module.List.Nil());
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#0_0_4_1, Tclass._module.List(_module._default.append_reverse$_T0), $Heap);
            assume _module.__default.reverse#canCall(_module._default.append_reverse$_T0, xs'#0_0, Lit(#_module.List.Nil()));
            ##xs#0_0_4_1 := _module.__default.reverse(_module._default.append_reverse$_T0, $LS($LZ), xs'#0_0, Lit(#_module.List.Nil()));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_4_1, Tclass._module.List(_module._default.append_reverse$_T0), $Heap);
            ##ys#0_0_4_0 := #_module.List.Cons(a#0_0, ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_4_0, Tclass._module.List(_module._default.append_reverse$_T0), $Heap);
            assume _module.__default.append#canCall(_module._default.append_reverse$_T0, 
              _module.__default.reverse(_module._default.append_reverse$_T0, $LS($LZ), xs'#0_0, Lit(#_module.List.Nil())), 
              #_module.List.Cons(a#0_0, ys#0));
            assume _module.__default.reverse#canCall(_module._default.append_reverse$_T0, xs'#0_0, Lit(#_module.List.Nil()))
               && _module.__default.append#canCall(_module._default.append_reverse$_T0, 
                _module.__default.reverse(_module._default.append_reverse$_T0, $LS($LZ), xs'#0_0, Lit(#_module.List.Nil())), 
                #_module.List.Cons(a#0_0, ys#0));
            // ----- assert line1 == line2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(711,7)
            assert {:id "id1058"} {:subsumption 0} _module.List#Equal(_module.__default.reverse(_module._default.append_reverse$_T0, 
                $LS($LS($LZ)), 
                xs'#0_0, 
                #_module.List.Cons(a#0_0, ys#0)), 
              _module.__default.append(_module._default.append_reverse$_T0, 
                $LS($LS($LZ)), 
                _module.__default.reverse(_module._default.append_reverse$_T0, 
                  $LS($LS($LZ)), 
                  xs'#0_0, 
                  Lit(#_module.List.Nil())), 
                #_module.List.Cons(a#0_0, ys#0)));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(711,7)
            ##xs#0_0_3_1 := xs'#0_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_3_1, Tclass._module.List(_module._default.append_reverse$_T0), $Heap);
            ##acc#0_0_3_0 := Lit(#_module.List.Nil());
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#0_0_3_0, Tclass._module.List(_module._default.append_reverse$_T0), $Heap);
            assume _module.__default.reverse#canCall(_module._default.append_reverse$_T0, xs'#0_0, Lit(#_module.List.Nil()));
            ##xs#0_0_3_0 := _module.__default.reverse(_module._default.append_reverse$_T0, $LS($LZ), xs'#0_0, Lit(#_module.List.Nil()));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_3_0, Tclass._module.List(_module._default.append_reverse$_T0), $Heap);
            ##ys#0_0_3_0 := #_module.List.Cons(a#0_0, ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_3_0, Tclass._module.List(_module._default.append_reverse$_T0), $Heap);
            assume _module.__default.append#canCall(_module._default.append_reverse$_T0, 
              _module.__default.reverse(_module._default.append_reverse$_T0, $LS($LZ), xs'#0_0, Lit(#_module.List.Nil())), 
              #_module.List.Cons(a#0_0, ys#0));
            assume _module.__default.reverse#canCall(_module._default.append_reverse$_T0, xs'#0_0, Lit(#_module.List.Nil()))
               && _module.__default.append#canCall(_module._default.append_reverse$_T0, 
                _module.__default.reverse(_module._default.append_reverse$_T0, $LS($LZ), xs'#0_0, Lit(#_module.List.Nil())), 
                #_module.List.Cons(a#0_0, ys#0));
            // ----- Hint2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(711,7)
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(711,7)
            ##xs#0_0_3_3 := xs'#0_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_3_3, Tclass._module.List(_module._default.append_reverse$_T0), $Heap);
            ##acc#0_0_3_1 := Lit(#_module.List.Nil());
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#0_0_3_1, Tclass._module.List(_module._default.append_reverse$_T0), $Heap);
            assume _module.__default.reverse#canCall(_module._default.append_reverse$_T0, xs'#0_0, Lit(#_module.List.Nil()));
            ##xs#0_0_3_2 := _module.__default.reverse(_module._default.append_reverse$_T0, $LS($LZ), xs'#0_0, Lit(#_module.List.Nil()));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_3_2, Tclass._module.List(_module._default.append_reverse$_T0), $Heap);
            ##xs#0_0_3_4 := #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_3_4, Tclass._module.List(_module._default.append_reverse$_T0), $Heap);
            ##ys#0_0_3_2 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_3_2, Tclass._module.List(_module._default.append_reverse$_T0), $Heap);
            assume _module.__default.append#canCall(_module._default.append_reverse$_T0, 
              #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), 
              ys#0);
            ##ys#0_0_3_1 := _module.__default.append(_module._default.append_reverse$_T0, 
              $LS($LZ), 
              #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), 
              ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_3_1, Tclass._module.List(_module._default.append_reverse$_T0), $Heap);
            assume _module.__default.append#canCall(_module._default.append_reverse$_T0, 
              _module.__default.reverse(_module._default.append_reverse$_T0, $LS($LZ), xs'#0_0, Lit(#_module.List.Nil())), 
              _module.__default.append(_module._default.append_reverse$_T0, 
                $LS($LZ), 
                #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), 
                ys#0));
            assume _module.__default.reverse#canCall(_module._default.append_reverse$_T0, xs'#0_0, Lit(#_module.List.Nil()))
               && _module.__default.append#canCall(_module._default.append_reverse$_T0, 
                #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), 
                ys#0)
               && _module.__default.append#canCall(_module._default.append_reverse$_T0, 
                _module.__default.reverse(_module._default.append_reverse$_T0, $LS($LZ), xs'#0_0, Lit(#_module.List.Nil())), 
                _module.__default.append(_module._default.append_reverse$_T0, 
                  $LS($LZ), 
                  #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), 
                  ys#0));
            // ----- assert line2 == line3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(711,7)
            assert {:id "id1057"} {:subsumption 0} _module.List#Equal(_module.__default.append(_module._default.append_reverse$_T0, 
                $LS($LS($LZ)), 
                _module.__default.reverse(_module._default.append_reverse$_T0, 
                  $LS($LS($LZ)), 
                  xs'#0_0, 
                  Lit(#_module.List.Nil())), 
                #_module.List.Cons(a#0_0, ys#0)), 
              _module.__default.append(_module._default.append_reverse$_T0, 
                $LS($LS($LZ)), 
                _module.__default.reverse(_module._default.append_reverse$_T0, 
                  $LS($LS($LZ)), 
                  xs'#0_0, 
                  Lit(#_module.List.Nil())), 
                _module.__default.append(_module._default.append_reverse$_T0, 
                  $LS($LS($LZ)), 
                  #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), 
                  ys#0)));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(711,7)
            ##xs#0_0_2_1 := xs'#0_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_2_1, Tclass._module.List(_module._default.append_reverse$_T0), $Heap);
            ##acc#0_0_2_0 := Lit(#_module.List.Nil());
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#0_0_2_0, Tclass._module.List(_module._default.append_reverse$_T0), $Heap);
            assume _module.__default.reverse#canCall(_module._default.append_reverse$_T0, xs'#0_0, Lit(#_module.List.Nil()));
            ##xs#0_0_2_0 := _module.__default.reverse(_module._default.append_reverse$_T0, $LS($LZ), xs'#0_0, Lit(#_module.List.Nil()));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_2_0, Tclass._module.List(_module._default.append_reverse$_T0), $Heap);
            ##xs#0_0_2_2 := #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_2_2, Tclass._module.List(_module._default.append_reverse$_T0), $Heap);
            ##ys#0_0_2_1 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_2_1, Tclass._module.List(_module._default.append_reverse$_T0), $Heap);
            assume _module.__default.append#canCall(_module._default.append_reverse$_T0, 
              #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), 
              ys#0);
            ##ys#0_0_2_0 := _module.__default.append(_module._default.append_reverse$_T0, 
              $LS($LZ), 
              #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), 
              ys#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_2_0, Tclass._module.List(_module._default.append_reverse$_T0), $Heap);
            assume _module.__default.append#canCall(_module._default.append_reverse$_T0, 
              _module.__default.reverse(_module._default.append_reverse$_T0, $LS($LZ), xs'#0_0, Lit(#_module.List.Nil())), 
              _module.__default.append(_module._default.append_reverse$_T0, 
                $LS($LZ), 
                #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), 
                ys#0));
            assume _module.__default.reverse#canCall(_module._default.append_reverse$_T0, xs'#0_0, Lit(#_module.List.Nil()))
               && _module.__default.append#canCall(_module._default.append_reverse$_T0, 
                #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), 
                ys#0)
               && _module.__default.append#canCall(_module._default.append_reverse$_T0, 
                _module.__default.reverse(_module._default.append_reverse$_T0, $LS($LZ), xs'#0_0, Lit(#_module.List.Nil())), 
                _module.__default.append(_module._default.append_reverse$_T0, 
                  $LS($LZ), 
                  #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), 
                  ys#0));
            // ----- Hint3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(711,7)
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(717,29)
            // TrCallStmt: Before ProcessCallStmt
            ##xs#0_0_2_3 := xs'#0_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_2_3, Tclass._module.List(_module._default.append_reverse$_T0), $Heap);
            ##acc#0_0_2_1 := Lit(#_module.List.Nil());
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#0_0_2_1, Tclass._module.List(_module._default.append_reverse$_T0), $Heap);
            assume _module.__default.reverse#canCall(_module._default.append_reverse$_T0, xs'#0_0, Lit(#_module.List.Nil()));
            assume _module.__default.reverse#canCall(_module._default.append_reverse$_T0, xs'#0_0, Lit(#_module.List.Nil()));
            // ProcessCallStmt: CheckSubrange
            xs##0_0_2_0 := _module.__default.reverse(_module._default.append_reverse$_T0, $LS($LZ), xs'#0_0, Lit(#_module.List.Nil()));
            assume true;
            // ProcessCallStmt: CheckSubrange
            ys##0_0_2_0 := #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()));
            assume true;
            // ProcessCallStmt: CheckSubrange
            zs##0_0_2_0 := ys#0;
            call {:id "id1055"} Call$$_module.__default.append__associative(_module._default.append_reverse$_T0, xs##0_0_2_0, ys##0_0_2_0, zs##0_0_2_0);
            // TrCallStmt: After ProcessCallStmt
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(711,7)
            ##xs#0_0_2_6 := xs'#0_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_2_6, Tclass._module.List(_module._default.append_reverse$_T0), $Heap);
            ##acc#0_0_2_2 := Lit(#_module.List.Nil());
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#0_0_2_2, Tclass._module.List(_module._default.append_reverse$_T0), $Heap);
            assume _module.__default.reverse#canCall(_module._default.append_reverse$_T0, xs'#0_0, Lit(#_module.List.Nil()));
            ##xs#0_0_2_5 := _module.__default.reverse(_module._default.append_reverse$_T0, $LS($LZ), xs'#0_0, Lit(#_module.List.Nil()));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_2_5, Tclass._module.List(_module._default.append_reverse$_T0), $Heap);
            ##ys#0_0_2_2 := #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()));
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_2_2, Tclass._module.List(_module._default.append_reverse$_T0), $Heap);
            assume _module.__default.append#canCall(_module._default.append_reverse$_T0, 
              _module.__default.reverse(_module._default.append_reverse$_T0, $LS($LZ), xs'#0_0, Lit(#_module.List.Nil())), 
              #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())));
            ##xs#0_0_2_4 := _module.__default.append(_module._default.append_reverse$_T0, 
              $LS($LZ), 
              _module.__default.reverse(_module._default.append_reverse$_T0, $LS($LZ), xs'#0_0, Lit(#_module.List.Nil())), 
              #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_2_4, Tclass._module.List(_module._default.append_reverse$_T0), $Heap);
            ##ys#0_0_2_3 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_2_3, Tclass._module.List(_module._default.append_reverse$_T0), $Heap);
            assume _module.__default.append#canCall(_module._default.append_reverse$_T0, 
              _module.__default.append(_module._default.append_reverse$_T0, 
                $LS($LZ), 
                _module.__default.reverse(_module._default.append_reverse$_T0, $LS($LZ), xs'#0_0, Lit(#_module.List.Nil())), 
                #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()))), 
              ys#0);
            assume _module.__default.reverse#canCall(_module._default.append_reverse$_T0, xs'#0_0, Lit(#_module.List.Nil()))
               && _module.__default.append#canCall(_module._default.append_reverse$_T0, 
                _module.__default.reverse(_module._default.append_reverse$_T0, $LS($LZ), xs'#0_0, Lit(#_module.List.Nil())), 
                #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())))
               && _module.__default.append#canCall(_module._default.append_reverse$_T0, 
                _module.__default.append(_module._default.append_reverse$_T0, 
                  $LS($LZ), 
                  _module.__default.reverse(_module._default.append_reverse$_T0, $LS($LZ), xs'#0_0, Lit(#_module.List.Nil())), 
                  #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()))), 
                ys#0);
            // ----- assert line3 == line4 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(711,7)
            assert {:id "id1056"} {:subsumption 0} _module.List#Equal(_module.__default.append(_module._default.append_reverse$_T0, 
                $LS($LS($LZ)), 
                _module.__default.reverse(_module._default.append_reverse$_T0, 
                  $LS($LS($LZ)), 
                  xs'#0_0, 
                  Lit(#_module.List.Nil())), 
                _module.__default.append(_module._default.append_reverse$_T0, 
                  $LS($LS($LZ)), 
                  #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())), 
                  ys#0)), 
              _module.__default.append(_module._default.append_reverse$_T0, 
                $LS($LS($LZ)), 
                _module.__default.append(_module._default.append_reverse$_T0, 
                  $LS($LS($LZ)), 
                  _module.__default.reverse(_module._default.append_reverse$_T0, 
                    $LS($LS($LZ)), 
                    xs'#0_0, 
                    Lit(#_module.List.Nil())), 
                  #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()))), 
                ys#0));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(711,7)
            ##xs#0_0_1_2 := xs'#0_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_1_2, Tclass._module.List(_module._default.append_reverse$_T0), $Heap);
            ##acc#0_0_1_0 := Lit(#_module.List.Nil());
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#0_0_1_0, Tclass._module.List(_module._default.append_reverse$_T0), $Heap);
            assume _module.__default.reverse#canCall(_module._default.append_reverse$_T0, xs'#0_0, Lit(#_module.List.Nil()));
            ##xs#0_0_1_1 := _module.__default.reverse(_module._default.append_reverse$_T0, $LS($LZ), xs'#0_0, Lit(#_module.List.Nil()));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_1_1, Tclass._module.List(_module._default.append_reverse$_T0), $Heap);
            ##ys#0_0_1_0 := #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()));
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_1_0, Tclass._module.List(_module._default.append_reverse$_T0), $Heap);
            assume _module.__default.append#canCall(_module._default.append_reverse$_T0, 
              _module.__default.reverse(_module._default.append_reverse$_T0, $LS($LZ), xs'#0_0, Lit(#_module.List.Nil())), 
              #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())));
            ##xs#0_0_1_0 := _module.__default.append(_module._default.append_reverse$_T0, 
              $LS($LZ), 
              _module.__default.reverse(_module._default.append_reverse$_T0, $LS($LZ), xs'#0_0, Lit(#_module.List.Nil())), 
              #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_1_0, Tclass._module.List(_module._default.append_reverse$_T0), $Heap);
            ##ys#0_0_1_1 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_1_1, Tclass._module.List(_module._default.append_reverse$_T0), $Heap);
            assume _module.__default.append#canCall(_module._default.append_reverse$_T0, 
              _module.__default.append(_module._default.append_reverse$_T0, 
                $LS($LZ), 
                _module.__default.reverse(_module._default.append_reverse$_T0, $LS($LZ), xs'#0_0, Lit(#_module.List.Nil())), 
                #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()))), 
              ys#0);
            assume _module.__default.reverse#canCall(_module._default.append_reverse$_T0, xs'#0_0, Lit(#_module.List.Nil()))
               && _module.__default.append#canCall(_module._default.append_reverse$_T0, 
                _module.__default.reverse(_module._default.append_reverse$_T0, $LS($LZ), xs'#0_0, Lit(#_module.List.Nil())), 
                #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())))
               && _module.__default.append#canCall(_module._default.append_reverse$_T0, 
                _module.__default.append(_module._default.append_reverse$_T0, 
                  $LS($LZ), 
                  _module.__default.reverse(_module._default.append_reverse$_T0, $LS($LZ), xs'#0_0, Lit(#_module.List.Nil())), 
                  #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()))), 
                ys#0);
            // ----- Hint4 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(711,7)
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(711,7)
            ##xs#0_0_1_4 := xs'#0_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_1_4, Tclass._module.List(_module._default.append_reverse$_T0), $Heap);
            ##acc#0_0_1_1 := #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()));
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#0_0_1_1, Tclass._module.List(_module._default.append_reverse$_T0), $Heap);
            assume _module.__default.reverse#canCall(_module._default.append_reverse$_T0, 
              xs'#0_0, 
              #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())));
            ##xs#0_0_1_3 := _module.__default.reverse(_module._default.append_reverse$_T0, 
              $LS($LZ), 
              xs'#0_0, 
              #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_1_3, Tclass._module.List(_module._default.append_reverse$_T0), $Heap);
            ##ys#0_0_1_2 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_1_2, Tclass._module.List(_module._default.append_reverse$_T0), $Heap);
            assume _module.__default.append#canCall(_module._default.append_reverse$_T0, 
              _module.__default.reverse(_module._default.append_reverse$_T0, 
                $LS($LZ), 
                xs'#0_0, 
                #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()))), 
              ys#0);
            assume _module.__default.reverse#canCall(_module._default.append_reverse$_T0, 
                xs'#0_0, 
                #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())))
               && _module.__default.append#canCall(_module._default.append_reverse$_T0, 
                _module.__default.reverse(_module._default.append_reverse$_T0, 
                  $LS($LZ), 
                  xs'#0_0, 
                  #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()))), 
                ys#0);
            // ----- assert line4 == line5 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(711,7)
            assert {:id "id1054"} {:subsumption 0} _module.List#Equal(_module.__default.append(_module._default.append_reverse$_T0, 
                $LS($LS($LZ)), 
                _module.__default.append(_module._default.append_reverse$_T0, 
                  $LS($LS($LZ)), 
                  _module.__default.reverse(_module._default.append_reverse$_T0, 
                    $LS($LS($LZ)), 
                    xs'#0_0, 
                    Lit(#_module.List.Nil())), 
                  #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()))), 
                ys#0), 
              _module.__default.append(_module._default.append_reverse$_T0, 
                $LS($LS($LZ)), 
                _module.__default.reverse(_module._default.append_reverse$_T0, 
                  $LS($LS($LZ)), 
                  xs'#0_0, 
                  #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()))), 
                ys#0));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(711,7)
            ##xs#0_0_0_1 := xs'#0_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_0_1, Tclass._module.List(_module._default.append_reverse$_T0), $Heap);
            ##acc#0_0_0_0 := #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()));
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#0_0_0_0, Tclass._module.List(_module._default.append_reverse$_T0), $Heap);
            assume _module.__default.reverse#canCall(_module._default.append_reverse$_T0, 
              xs'#0_0, 
              #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())));
            ##xs#0_0_0_0 := _module.__default.reverse(_module._default.append_reverse$_T0, 
              $LS($LZ), 
              xs'#0_0, 
              #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_0_0, Tclass._module.List(_module._default.append_reverse$_T0), $Heap);
            ##ys#0_0_0_0 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_0_0, Tclass._module.List(_module._default.append_reverse$_T0), $Heap);
            assume _module.__default.append#canCall(_module._default.append_reverse$_T0, 
              _module.__default.reverse(_module._default.append_reverse$_T0, 
                $LS($LZ), 
                xs'#0_0, 
                #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()))), 
              ys#0);
            assume _module.__default.reverse#canCall(_module._default.append_reverse$_T0, 
                xs'#0_0, 
                #_module.List.Cons(a#0_0, Lit(#_module.List.Nil())))
               && _module.__default.append#canCall(_module._default.append_reverse$_T0, 
                _module.__default.reverse(_module._default.append_reverse$_T0, 
                  $LS($LZ), 
                  xs'#0_0, 
                  #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()))), 
                ys#0);
            // ----- Hint5 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(711,7)
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(711,7)
            ##xs#0_0_0_3 := #_module.List.Cons(a#0_0, xs'#0_0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_0_3, Tclass._module.List(_module._default.append_reverse$_T0), $Heap);
            ##acc#0_0_0_1 := Lit(#_module.List.Nil());
            // assume allocatedness for argument to function
            assume $IsAlloc(##acc#0_0_0_1, Tclass._module.List(_module._default.append_reverse$_T0), $Heap);
            assume _module.__default.reverse#canCall(_module._default.append_reverse$_T0, 
              #_module.List.Cons(a#0_0, xs'#0_0), 
              Lit(#_module.List.Nil()));
            ##xs#0_0_0_2 := _module.__default.reverse(_module._default.append_reverse$_T0, 
              $LS($LZ), 
              #_module.List.Cons(a#0_0, xs'#0_0), 
              Lit(#_module.List.Nil()));
            // assume allocatedness for argument to function
            assume $IsAlloc(##xs#0_0_0_2, Tclass._module.List(_module._default.append_reverse$_T0), $Heap);
            ##ys#0_0_0_1 := ys#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ys#0_0_0_1, Tclass._module.List(_module._default.append_reverse$_T0), $Heap);
            assume _module.__default.append#canCall(_module._default.append_reverse$_T0, 
              _module.__default.reverse(_module._default.append_reverse$_T0, 
                $LS($LZ), 
                #_module.List.Cons(a#0_0, xs'#0_0), 
                Lit(#_module.List.Nil())), 
              ys#0);
            assume _module.__default.reverse#canCall(_module._default.append_reverse$_T0, 
                #_module.List.Cons(a#0_0, xs'#0_0), 
                Lit(#_module.List.Nil()))
               && _module.__default.append#canCall(_module._default.append_reverse$_T0, 
                _module.__default.reverse(_module._default.append_reverse$_T0, 
                  $LS($LZ), 
                  #_module.List.Cons(a#0_0, xs'#0_0), 
                  Lit(#_module.List.Nil())), 
                ys#0);
            // ----- assert line5 == line6 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/dafny4/GHC-MergeSort.dfy(711,7)
            assert {:id "id1053"} {:subsumption 0} _module.List#Equal(_module.__default.append(_module._default.append_reverse$_T0, 
                $LS($LS($LZ)), 
                _module.__default.reverse(_module._default.append_reverse$_T0, 
                  $LS($LS($LZ)), 
                  xs'#0_0, 
                  #_module.List.Cons(a#0_0, Lit(#_module.List.Nil()))), 
                ys#0), 
              _module.__default.append(_module._default.append_reverse$_T0, 
                $LS($LS($LZ)), 
                _module.__default.reverse(_module._default.append_reverse$_T0, 
                  $LS($LS($LZ)), 
                  #_module.List.Cons(a#0_0, xs'#0_0), 
                  Lit(#_module.List.Nil())), 
                ys#0));
            assume false;
        }

        assume {:id "id1060"} _module.List#Equal(_module.__default.reverse(_module._default.append_reverse$_T0, 
            $LS($LZ), 
            #_module.List.Cons(a#0_0, xs'#0_0), 
            ys#0), 
          _module.__default.append(_module._default.append_reverse$_T0, 
            $LS($LZ), 
            _module.__default.reverse(_module._default.append_reverse$_T0, 
              $LS($LZ), 
              #_module.List.Cons(a#0_0, xs'#0_0), 
              Lit(#_module.List.Nil())), 
            ys#0));
    }
    else
    {
        assume false;
    }
}



// Constructor function declaration
function #_module.List.Nil() : DatatypeType
uses {
// Constructor identifier
axiom DatatypeCtorId(#_module.List.Nil()) == ##_module.List.Nil;
// Constructor literal
axiom #_module.List.Nil() == Lit(#_module.List.Nil());
}

const unique ##_module.List.Nil: DtCtorId
uses {
// Constructor identifier
axiom DatatypeCtorId(#_module.List.Nil()) == ##_module.List.Nil;
}

function _module.List.Nil_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _module.List.Nil_q(d) } 
  _module.List.Nil_q(d) <==> DatatypeCtorId(d) == ##_module.List.Nil);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _module.List.Nil_q(d) } 
  _module.List.Nil_q(d) ==> d == #_module.List.Nil());

// Constructor $Is
axiom (forall _module.List$T: Ty :: 
  { $Is(#_module.List.Nil(), Tclass._module.List(_module.List$T)) } 
  $Is(#_module.List.Nil(), Tclass._module.List(_module.List$T)));

// Constructor $IsAlloc
axiom (forall _module.List$T: Ty, $h: Heap :: 
  { $IsAlloc(#_module.List.Nil(), Tclass._module.List(_module.List$T), $h) } 
  $IsGoodHeap($h)
     ==> $IsAlloc(#_module.List.Nil(), Tclass._module.List(_module.List$T), $h));

// Constructor function declaration
function #_module.List.Cons(Box, DatatypeType) : DatatypeType;

const unique ##_module.List.Cons: DtCtorId
uses {
// Constructor identifier
axiom (forall a#4#0#0: Box, a#4#1#0: DatatypeType :: 
  { #_module.List.Cons(a#4#0#0, a#4#1#0) } 
  DatatypeCtorId(#_module.List.Cons(a#4#0#0, a#4#1#0)) == ##_module.List.Cons);
}

function _module.List.Cons_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _module.List.Cons_q(d) } 
  _module.List.Cons_q(d) <==> DatatypeCtorId(d) == ##_module.List.Cons);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _module.List.Cons_q(d) } 
  _module.List.Cons_q(d)
     ==> (exists a#5#0#0: Box, a#5#1#0: DatatypeType :: 
      d == #_module.List.Cons(a#5#0#0, a#5#1#0)));

// Constructor $Is
axiom (forall _module.List$T: Ty, a#6#0#0: Box, a#6#1#0: DatatypeType :: 
  { $Is(#_module.List.Cons(a#6#0#0, a#6#1#0), Tclass._module.List(_module.List$T)) } 
  $Is(#_module.List.Cons(a#6#0#0, a#6#1#0), Tclass._module.List(_module.List$T))
     <==> $IsBox(a#6#0#0, _module.List$T)
       && $Is(a#6#1#0, Tclass._module.List(_module.List$T)));

// Constructor $IsAlloc
axiom (forall _module.List$T: Ty, a#6#0#0: Box, a#6#1#0: DatatypeType, $h: Heap :: 
  { $IsAlloc(#_module.List.Cons(a#6#0#0, a#6#1#0), Tclass._module.List(_module.List$T), $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#_module.List.Cons(a#6#0#0, a#6#1#0), Tclass._module.List(_module.List$T), $h)
       <==> $IsAllocBox(a#6#0#0, _module.List$T, $h)
         && $IsAlloc(a#6#1#0, Tclass._module.List(_module.List$T), $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _module.List$T: Ty, $h: Heap :: 
  { $IsAllocBox(_module.List.head(d), _module.List$T, $h) } 
  $IsGoodHeap($h)
       && 
      _module.List.Cons_q(d)
       && $IsAlloc(d, Tclass._module.List(_module.List$T), $h)
     ==> $IsAllocBox(_module.List.head(d), _module.List$T, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _module.List$T: Ty, $h: Heap :: 
  { $IsAlloc(_module.List.tail(d), Tclass._module.List(_module.List$T), $h) } 
  $IsGoodHeap($h)
       && 
      _module.List.Cons_q(d)
       && $IsAlloc(d, Tclass._module.List(_module.List$T), $h)
     ==> $IsAlloc(_module.List.tail(d), Tclass._module.List(_module.List$T), $h));

// Constructor literal
axiom (forall a#7#0#0: Box, a#7#1#0: DatatypeType :: 
  { #_module.List.Cons(Lit(a#7#0#0), Lit(a#7#1#0)) } 
  #_module.List.Cons(Lit(a#7#0#0), Lit(a#7#1#0))
     == Lit(#_module.List.Cons(a#7#0#0, a#7#1#0)));

function _module.List.head(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#8#0#0: Box, a#8#1#0: DatatypeType :: 
  { #_module.List.Cons(a#8#0#0, a#8#1#0) } 
  _module.List.head(#_module.List.Cons(a#8#0#0, a#8#1#0)) == a#8#0#0);

// Inductive rank
axiom (forall a#9#0#0: Box, a#9#1#0: DatatypeType :: 
  { #_module.List.Cons(a#9#0#0, a#9#1#0) } 
  BoxRank(a#9#0#0) < DtRank(#_module.List.Cons(a#9#0#0, a#9#1#0)));

function _module.List.tail(DatatypeType) : DatatypeType;

// Constructor injectivity
axiom (forall a#10#0#0: Box, a#10#1#0: DatatypeType :: 
  { #_module.List.Cons(a#10#0#0, a#10#1#0) } 
  _module.List.tail(#_module.List.Cons(a#10#0#0, a#10#1#0)) == a#10#1#0);

// Inductive rank
axiom (forall a#11#0#0: Box, a#11#1#0: DatatypeType :: 
  { #_module.List.Cons(a#11#0#0, a#11#1#0) } 
  DtRank(a#11#1#0) < DtRank(#_module.List.Cons(a#11#0#0, a#11#1#0)));

// Depth-one case-split function
function $IsA#_module.List(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_module.List(d) } 
  $IsA#_module.List(d) ==> _module.List.Nil_q(d) || _module.List.Cons_q(d));

// Questionmark data type disjunctivity
axiom (forall _module.List$T: Ty, d: DatatypeType :: 
  { _module.List.Cons_q(d), $Is(d, Tclass._module.List(_module.List$T)) } 
    { _module.List.Nil_q(d), $Is(d, Tclass._module.List(_module.List$T)) } 
  $Is(d, Tclass._module.List(_module.List$T))
     ==> _module.List.Nil_q(d) || _module.List.Cons_q(d));

// Datatype extensional equality declaration
function _module.List#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #_module.List.Nil
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _module.List#Equal(a, b), _module.List.Nil_q(a) } 
    { _module.List#Equal(a, b), _module.List.Nil_q(b) } 
  _module.List.Nil_q(a) && _module.List.Nil_q(b) ==> _module.List#Equal(a, b));

// Datatype extensional equality definition: #_module.List.Cons
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _module.List#Equal(a, b), _module.List.Cons_q(a) } 
    { _module.List#Equal(a, b), _module.List.Cons_q(b) } 
  _module.List.Cons_q(a) && _module.List.Cons_q(b)
     ==> (_module.List#Equal(a, b)
       <==> _module.List.head(a) == _module.List.head(b)
         && _module.List#Equal(_module.List.tail(a), _module.List.tail(b))));

// Datatype extensionality axiom: _module.List
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _module.List#Equal(a, b) } 
  _module.List#Equal(a, b) <==> a == b);

const unique class._module.List: ClassName;

const unique class._module.G: ClassName;

const unique tytagFamily$nat: TyTagFamily;

const unique tytagFamily$object: TyTagFamily;

const unique tytagFamily$array: TyTagFamily;

const unique tytagFamily$_#Func1: TyTagFamily;

const unique tytagFamily$_#PartialFunc1: TyTagFamily;

const unique tytagFamily$_#TotalFunc1: TyTagFamily;

const unique tytagFamily$_#Func0: TyTagFamily;

const unique tytagFamily$_#PartialFunc0: TyTagFamily;

const unique tytagFamily$_#TotalFunc0: TyTagFamily;

const unique tytagFamily$_tuple#2: TyTagFamily;

const unique tytagFamily$_tuple#0: TyTagFamily;

const unique tytagFamily$_#Func2: TyTagFamily;

const unique tytagFamily$_#PartialFunc2: TyTagFamily;

const unique tytagFamily$_#TotalFunc2: TyTagFamily;

const unique tytagFamily$_#Func3: TyTagFamily;

const unique tytagFamily$_#PartialFunc3: TyTagFamily;

const unique tytagFamily$_#TotalFunc3: TyTagFamily;

const unique tytagFamily$List: TyTagFamily;
