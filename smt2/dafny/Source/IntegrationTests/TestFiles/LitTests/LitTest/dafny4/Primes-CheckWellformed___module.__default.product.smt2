(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 (T@U) T@U)
(declare-fun $generated@@20 (T@U T@U) T@U)
(declare-fun $generated@@21 (T@U T@U) Bool)
(declare-fun $generated@@30 (T@U T@U) T@U)
(declare-fun $generated@@34 () T@U)
(declare-fun $generated@@39 (Int) Int)
(declare-fun $generated@@41 (T@T T@U) T@U)
(declare-fun $generated@@44 (T@U T@U) Bool)
(declare-fun $generated@@48 (T@T T@U) T@U)
(declare-fun $generated@@49 (T@T T@U) T@U)
(declare-fun $generated@@52 (T@T T@U T@U) Bool)
(declare-fun $generated@@53 () T@T)
(declare-fun $generated@@54 (T@U) T@U)
(declare-fun $generated@@55 (T@U T@U) Bool)
(declare-fun $generated@@59 () Int)
(declare-fun $generated@@60 (Bool T@U) Int)
(declare-fun $generated@@61 (T@U) Bool)
(declare-fun $generated@@62 (T@U) Bool)
(declare-fun $generated@@63 (T@U T@U) Bool)
(declare-fun $generated@@64 (T@U) Bool)
(declare-fun $generated@@65 (T@U) Int)
(declare-fun $generated@@69 (T@U T@U T@U) Bool)
(declare-fun $generated@@70 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@75 (T@U Bool T@U) Int)
(declare-fun $generated@@76 (T@U) T@U)
(declare-fun $generated@@77 (T@U) Bool)
(declare-fun $generated@@78 () Bool)
(declare-fun $generated@@79 (Int Int) Int)
(declare-fun $generated@@80 () Bool)
(declare-fun $generated@@110 (T@U) T@U)
(declare-fun $generated@@115 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@116 () T@T)
(declare-fun $generated@@117 () T@T)
(declare-fun $generated@@118 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@119 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@120 () T@T)
(declare-fun $generated@@121 (T@T T@T) T@T)
(declare-fun $generated@@122 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@123 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@124 (T@T) T@T)
(declare-fun $generated@@125 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (= ($generated@@19 $generated) $generated@@0))
(assert (forall (($generated@@22 T@U) ($generated@@23 T@U) ) (! ($generated@@21 ($generated@@20 $generated@@22 $generated@@23) $generated@@23)
 :pattern ( ($generated@@20 $generated@@22 $generated@@23))
)))
(assert (forall (($generated@@24 T@U) ($generated@@25 T@U) ($generated@@26 T@U) ) (!  (=> ($generated@@21 $generated@@24 $generated@@26) ($generated@@21 ($generated@@20 $generated@@24 $generated@@25) $generated@@26))
 :pattern ( ($generated@@20 $generated@@24 $generated@@25) ($generated@@21 $generated@@24 $generated@@26))
)))
(assert (forall (($generated@@27 T@U) ($generated@@28 T@U) ($generated@@29 T@U) ) (! (= ($generated@@21 ($generated@@20 $generated@@27 $generated@@28) $generated@@29)  (or (= $generated@@29 $generated@@28) ($generated@@21 $generated@@27 $generated@@29)))
 :pattern ( ($generated@@21 ($generated@@20 $generated@@27 $generated@@28) $generated@@29))
)))
(assert (forall (($generated@@31 T@U) ($generated@@32 T@U) ($generated@@33 T@U) ) (!  (=> ($generated@@21 $generated@@32 $generated@@33) (not ($generated@@21 ($generated@@30 $generated@@31 $generated@@32) $generated@@33)))
 :pattern ( ($generated@@30 $generated@@31 $generated@@32) ($generated@@21 $generated@@32 $generated@@33))
)))
(assert (forall (($generated@@35 T@U) ) (!  (not ($generated@@21 $generated@@34 $generated@@35))
 :pattern ( ($generated@@21 $generated@@34 $generated@@35))
)))
(assert (forall (($generated@@36 T@U) ($generated@@37 T@U) ($generated@@38 T@U) ) (! (= ($generated@@21 ($generated@@30 $generated@@36 $generated@@37) $generated@@38)  (and ($generated@@21 $generated@@36 $generated@@38) (not ($generated@@21 $generated@@37 $generated@@38))))
 :pattern ( ($generated@@21 ($generated@@30 $generated@@36 $generated@@37) $generated@@38))
)))
(assert (forall (($generated@@40 Int) ) (! (= ($generated@@39 $generated@@40) $generated@@40)
 :pattern ( ($generated@@39 $generated@@40))
)))
(assert (forall (($generated@@42 T@U) ($generated@@43 T@T) ) (! (= ($generated@@41 $generated@@43 $generated@@42) $generated@@42)
 :pattern ( ($generated@@41 $generated@@43 $generated@@42))
)))
(assert (forall (($generated@@45 T@U) ($generated@@46 T@U) ) (! (= ($generated@@44 $generated@@45 $generated@@46) (forall (($generated@@47 T@U) ) (!  (=> ($generated@@21 $generated@@45 $generated@@47) ($generated@@21 $generated@@46 $generated@@47))
 :pattern ( ($generated@@21 $generated@@45 $generated@@47))
 :pattern ( ($generated@@21 $generated@@46 $generated@@47))
)))
 :pattern ( ($generated@@44 $generated@@45 $generated@@46))
)))
(assert (forall (($generated@@50 T@U) ($generated@@51 T@T) ) (! (= ($generated@@49 $generated@@51 ($generated@@48 $generated@@51 $generated@@50)) $generated@@50)
 :pattern ( ($generated@@48 $generated@@51 $generated@@50))
)))
(assert (= ($generated@@3 $generated@@53) 3))
(assert (forall (($generated@@56 T@U) ($generated@@57 T@U) ) (! (= ($generated@@52 $generated@@53 $generated@@56 ($generated@@54 $generated@@57)) (forall (($generated@@58 T@U) ) (!  (=> ($generated@@21 $generated@@56 $generated@@58) ($generated@@55 $generated@@58 $generated@@57))
 :pattern ( ($generated@@21 $generated@@56 $generated@@58))
)))
 :pattern ( ($generated@@52 $generated@@53 $generated@@56 ($generated@@54 $generated@@57)))
)))
(assert  (=> (<= 1 $generated@@59) (forall (($generated@@66 T@U) ($generated@@67 T@U) ) (!  (=> (or ($generated@@62 $generated@@67) (and (< 1 $generated@@59) (and (and ($generated@@61 $generated@@66) ($generated@@52 $generated@@53 $generated@@67 ($generated@@54 $generated))) (not ($generated@@63 $generated@@67 $generated@@34))))) (and ($generated@@64 $generated@@67) (= ($generated@@60 true $generated@@67) (let (($generated@@68 ($generated@@65 $generated@@67)))
$generated@@68))))
 :pattern ( ($generated@@60 true $generated@@67) ($generated@@61 $generated@@66))
))))
(assert (forall (($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@T) ) (! (= ($generated@@69 ($generated@@49 $generated@@74 $generated@@71) $generated@@72 $generated@@73) ($generated@@70 $generated@@74 $generated@@71 $generated@@72 $generated@@73))
 :pattern ( ($generated@@69 ($generated@@49 $generated@@74 $generated@@71) $generated@@72 $generated@@73))
)))
(assert  (=> (<= 2 $generated@@59) (forall (($generated@@81 T@U) ($generated@@82 T@U) ) (!  (=> (or ($generated@@77 ($generated@@41 $generated@@53 $generated@@82)) (and (< 2 $generated@@59) ($generated@@52 $generated@@53 $generated@@82 ($generated@@54 $generated)))) (and (=> (not ($generated@@63 $generated@@82 $generated@@34)) (and ($generated@@62 ($generated@@41 $generated@@53 $generated@@82)) (let (($generated@@83 ($generated@@60 $generated@@78 ($generated@@41 $generated@@53 $generated@@82))))
($generated@@77 ($generated@@30 $generated@@82 ($generated@@20 $generated@@34 ($generated@@49 $generated@@5 ($generated@@9 $generated@@83)))))))) (= ($generated@@75 ($generated@@76 $generated@@81) true ($generated@@41 $generated@@53 $generated@@82)) (ite ($generated@@63 $generated@@82 $generated@@34) 1 (let (($generated@@84 ($generated@@60 $generated@@78 ($generated@@41 $generated@@53 $generated@@82))))
($generated@@79 $generated@@84 ($generated@@75 ($generated@@76 $generated@@81) $generated@@80 ($generated@@30 $generated@@82 ($generated@@20 $generated@@34 ($generated@@49 $generated@@5 ($generated@@9 $generated@@84)))))))))))
 :weight 3
 :pattern ( ($generated@@75 ($generated@@76 $generated@@81) true ($generated@@41 $generated@@53 $generated@@82)))
))))
(assert (forall (($generated@@85 T@U) ($generated@@86 Bool) ($generated@@87 T@U) ) (! (= ($generated@@75 ($generated@@76 $generated@@85) $generated@@86 $generated@@87) ($generated@@75 $generated@@85 $generated@@86 $generated@@87))
 :pattern ( ($generated@@75 ($generated@@76 $generated@@85) $generated@@86 $generated@@87))
)))
(assert (forall (($generated@@88 T@U) ($generated@@89 T@U) ) (!  (=> ($generated@@63 $generated@@88 $generated@@89) (= $generated@@88 $generated@@89))
 :pattern ( ($generated@@63 $generated@@88 $generated@@89))
)))
(assert  (=> (<= 1 $generated@@59) (forall (($generated@@90 T@U) ($generated@@91 T@U) ) (!  (=> (or ($generated@@62 ($generated@@41 $generated@@53 $generated@@91)) (and (< 1 $generated@@59) (and (and ($generated@@61 $generated@@90) ($generated@@52 $generated@@53 $generated@@91 ($generated@@54 $generated))) (not ($generated@@63 $generated@@91 $generated@@34))))) (and ($generated@@64 ($generated@@41 $generated@@53 $generated@@91)) (= ($generated@@60 true ($generated@@41 $generated@@53 $generated@@91)) (let (($generated@@92 ($generated@@65 ($generated@@41 $generated@@53 $generated@@91))))
$generated@@92))))
 :weight 3
 :pattern ( ($generated@@60 true ($generated@@41 $generated@@53 $generated@@91)) ($generated@@61 $generated@@90))
))))
(assert (forall (($generated@@93 T@U) ) (!  (=> ($generated@@55 $generated@@93 $generated) (and (= ($generated@@49 $generated@@5 ($generated@@48 $generated@@5 $generated@@93)) $generated@@93) ($generated@@52 $generated@@5 ($generated@@48 $generated@@5 $generated@@93) $generated)))
 :pattern ( ($generated@@55 $generated@@93 $generated))
)))
(assert (forall (($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@T) ) (! (= ($generated@@55 ($generated@@49 $generated@@96 $generated@@94) $generated@@95) ($generated@@52 $generated@@96 $generated@@94 $generated@@95))
 :pattern ( ($generated@@55 ($generated@@49 $generated@@96 $generated@@94) $generated@@95))
)))
(assert (forall (($generated@@97 T@U) ) (!  (=> ($generated@@64 $generated@@97) (and ($generated@@21 $generated@@97 ($generated@@49 $generated@@5 ($generated@@9 ($generated@@65 $generated@@97)))) (forall (($generated@@98 T@U) ) (!  (=> ($generated@@21 $generated@@97 ($generated@@49 $generated@@5 $generated@@98)) (<= ($generated@@10 $generated@@98) ($generated@@65 $generated@@97)))
 :pattern ( ($generated@@21 $generated@@97 ($generated@@49 $generated@@5 $generated@@98)))
))))
 :pattern ( ($generated@@65 $generated@@97))
)))
(assert  (=> (<= 2 $generated@@59) (forall (($generated@@99 T@U) ($generated@@100 T@U) ) (!  (=> (or ($generated@@77 $generated@@100) (and (< 2 $generated@@59) ($generated@@52 $generated@@53 $generated@@100 ($generated@@54 $generated)))) (and (=> (not ($generated@@63 $generated@@100 $generated@@34)) (and ($generated@@62 $generated@@100) (let (($generated@@101 ($generated@@60 $generated@@78 $generated@@100)))
($generated@@77 ($generated@@30 $generated@@100 ($generated@@20 $generated@@34 ($generated@@49 $generated@@5 ($generated@@9 $generated@@101)))))))) (= ($generated@@75 ($generated@@76 $generated@@99) true $generated@@100) (ite ($generated@@63 $generated@@100 $generated@@34) 1 (let (($generated@@102 ($generated@@60 $generated@@78 $generated@@100)))
($generated@@79 $generated@@102 ($generated@@75 $generated@@99 $generated@@80 ($generated@@30 $generated@@100 ($generated@@20 $generated@@34 ($generated@@49 $generated@@5 ($generated@@9 $generated@@102)))))))))))
 :pattern ( ($generated@@75 ($generated@@76 $generated@@99) true $generated@@100))
))))
(assert (forall (($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ) (! (= ($generated@@70 $generated@@53 $generated@@103 ($generated@@54 $generated@@104) $generated@@105) (forall (($generated@@106 T@U) ) (!  (=> ($generated@@21 $generated@@103 $generated@@106) ($generated@@69 $generated@@106 $generated@@104 $generated@@105))
 :pattern ( ($generated@@21 $generated@@103 $generated@@106))
)))
 :pattern ( ($generated@@70 $generated@@53 $generated@@103 ($generated@@54 $generated@@104) $generated@@105))
)))
(assert  (=> (<= 1 $generated@@59) (forall (($generated@@107 Bool) ($generated@@108 T@U) ) (!  (=> (or ($generated@@62 $generated@@108) (and (< 1 $generated@@59) (and ($generated@@52 $generated@@53 $generated@@108 ($generated@@54 $generated)) (not ($generated@@63 $generated@@108 $generated@@34))))) (and ($generated@@21 $generated@@108 ($generated@@49 $generated@@5 ($generated@@9 ($generated@@60 $generated@@107 $generated@@108)))) (forall (($generated@@109 T@U) ) (!  (=> ($generated@@21 $generated@@108 ($generated@@49 $generated@@5 $generated@@109)) (<= ($generated@@10 $generated@@109) ($generated@@60 $generated@@107 $generated@@108)))
 :pattern ( ($generated@@21 $generated@@108 ($generated@@49 $generated@@5 $generated@@109)))
))))
 :pattern ( ($generated@@60 $generated@@107 $generated@@108))
))))
(assert (forall (($generated@@111 T@U) ) (! (= ($generated@@110 ($generated@@54 $generated@@111)) $generated@@111)
 :pattern ( ($generated@@54 $generated@@111))
)))
(assert (forall (($generated@@112 T@U) ) (! (= ($generated@@19 ($generated@@54 $generated@@112)) $generated@@1)
 :pattern ( ($generated@@54 $generated@@112))
)))
(assert (forall (($generated@@113 T@U) ($generated@@114 T@T) ) (! (= ($generated@@48 $generated@@114 ($generated@@49 $generated@@114 $generated@@113)) $generated@@113)
 :pattern ( ($generated@@49 $generated@@114 $generated@@113))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@126 T@T) ($generated@@127 T@T) ($generated@@128 T@T) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ) (! (= ($generated@@115 $generated@@126 $generated@@127 $generated@@128 ($generated@@122 $generated@@126 $generated@@127 $generated@@128 $generated@@130 $generated@@131 $generated@@132 $generated@@129) $generated@@131 $generated@@132) $generated@@129)
 :weight 0
)) (and (forall (($generated@@133 T@T) ($generated@@134 T@T) ($generated@@135 T@T) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ($generated@@140 T@U) ($generated@@141 T@U) ) (!  (or (= $generated@@138 $generated@@140) (= ($generated@@115 $generated@@133 $generated@@134 $generated@@135 ($generated@@122 $generated@@133 $generated@@134 $generated@@135 $generated@@137 $generated@@138 $generated@@139 $generated@@136) $generated@@140 $generated@@141) ($generated@@115 $generated@@133 $generated@@134 $generated@@135 $generated@@137 $generated@@140 $generated@@141)))
 :weight 0
)) (forall (($generated@@142 T@T) ($generated@@143 T@T) ($generated@@144 T@T) ($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 T@U) ) (!  (or (= $generated@@148 $generated@@150) (= ($generated@@115 $generated@@142 $generated@@143 $generated@@144 ($generated@@122 $generated@@142 $generated@@143 $generated@@144 $generated@@146 $generated@@147 $generated@@148 $generated@@145) $generated@@149 $generated@@150) ($generated@@115 $generated@@142 $generated@@143 $generated@@144 $generated@@146 $generated@@149 $generated@@150)))
 :weight 0
)))) (= ($generated@@3 $generated@@116) 4)) (= ($generated@@3 $generated@@117) 5)) (forall (($generated@@151 T@T) ($generated@@152 T@T) ($generated@@153 T@U) ($generated@@154 T@U) ($generated@@155 T@U) ) (! (= ($generated@@119 $generated@@151 $generated@@152 ($generated@@123 $generated@@151 $generated@@152 $generated@@154 $generated@@155 $generated@@153) $generated@@155) $generated@@153)
 :weight 0
))) (forall (($generated@@156 T@T) ($generated@@157 T@T) ($generated@@158 T@U) ($generated@@159 T@U) ($generated@@160 T@U) ($generated@@161 T@U) ) (!  (or (= $generated@@160 $generated@@161) (= ($generated@@119 $generated@@156 $generated@@157 ($generated@@123 $generated@@156 $generated@@157 $generated@@159 $generated@@160 $generated@@158) $generated@@161) ($generated@@119 $generated@@156 $generated@@157 $generated@@159 $generated@@161)))
 :weight 0
))) (= ($generated@@3 $generated@@120) 6)) (forall (($generated@@162 T@T) ($generated@@163 T@T) ) (= ($generated@@3 ($generated@@121 $generated@@162 $generated@@163)) 7))) (forall (($generated@@164 T@T) ($generated@@165 T@T) ) (! (= ($generated@@124 ($generated@@121 $generated@@164 $generated@@165)) $generated@@164)
 :pattern ( ($generated@@121 $generated@@164 $generated@@165))
))) (forall (($generated@@166 T@T) ($generated@@167 T@T) ) (! (= ($generated@@125 ($generated@@121 $generated@@166 $generated@@167)) $generated@@167)
 :pattern ( ($generated@@121 $generated@@166 $generated@@167))
))))
(assert (forall (($generated@@168 T@U) ($generated@@169 T@U) ($generated@@170 T@U) ($generated@@171 Bool) ($generated@@172 T@U) ($generated@@173 T@U) ) (! (= ($generated@@8 ($generated@@115 $generated@@116 $generated@@117 $generated@@4 ($generated@@118 $generated@@168 $generated@@169 $generated@@170 $generated@@171) $generated@@172 $generated@@173))  (=> (and (or (not (= $generated@@172 $generated@@168)) (not true)) ($generated@@8 ($generated@@48 $generated@@4 ($generated@@119 $generated@@117 $generated@@120 ($generated@@119 $generated@@116 ($generated@@121 $generated@@117 $generated@@120) $generated@@169 $generated@@172) $generated@@170)))) $generated@@171))
 :pattern ( ($generated@@115 $generated@@116 $generated@@117 $generated@@4 ($generated@@118 $generated@@168 $generated@@169 $generated@@170 $generated@@171) $generated@@172 $generated@@173))
)))
(assert (forall (($generated@@174 Int) ($generated@@175 Int) ) (! (= ($generated@@79 $generated@@174 $generated@@175) (* $generated@@174 $generated@@175))
 :pattern ( ($generated@@79 $generated@@174 $generated@@175))
)))
(assert (forall (($generated@@176 T@U) ($generated@@177 T@U) ) (!  (=> ($generated@@55 $generated@@176 ($generated@@54 $generated@@177)) (and (= ($generated@@49 $generated@@53 ($generated@@48 $generated@@53 $generated@@176)) $generated@@176) ($generated@@52 $generated@@53 ($generated@@48 $generated@@53 $generated@@176) ($generated@@54 $generated@@177))))
 :pattern ( ($generated@@55 $generated@@176 ($generated@@54 $generated@@177)))
)))
(assert (forall (($generated@@178 T@U) ($generated@@179 T@U) ) (! (= ($generated@@63 $generated@@178 $generated@@179) (forall (($generated@@180 T@U) ) (! (= ($generated@@21 $generated@@178 $generated@@180) ($generated@@21 $generated@@179 $generated@@180))
 :pattern ( ($generated@@21 $generated@@178 $generated@@180))
 :pattern ( ($generated@@21 $generated@@179 $generated@@180))
)))
 :pattern ( ($generated@@63 $generated@@178 $generated@@179))
)))
(assert (forall (($generated@@181 Int) ) (! (= ($generated@@49 $generated@@5 ($generated@@9 ($generated@@39 $generated@@181))) ($generated@@41 $generated@@120 ($generated@@49 $generated@@5 ($generated@@9 $generated@@181))))
 :pattern ( ($generated@@49 $generated@@5 ($generated@@9 ($generated@@39 $generated@@181))))
)))
(assert (forall (($generated@@182 T@U) ($generated@@183 T@T) ) (! (= ($generated@@49 $generated@@183 ($generated@@41 $generated@@183 $generated@@182)) ($generated@@41 $generated@@120 ($generated@@49 $generated@@183 $generated@@182)))
 :pattern ( ($generated@@49 $generated@@183 ($generated@@41 $generated@@183 $generated@@182)))
)))
(assert (forall (($generated@@184 T@U) ($generated@@185 T@U) ) (! ($generated@@70 $generated@@5 $generated@@185 $generated $generated@@184)
 :pattern ( ($generated@@70 $generated@@5 $generated@@185 $generated $generated@@184))
)))
(assert (forall (($generated@@186 T@U) ) (! ($generated@@52 $generated@@5 $generated@@186 $generated)
 :pattern ( ($generated@@52 $generated@@5 $generated@@186 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@187 () T@U)
(declare-fun $generated@@188 () T@U)
(declare-fun $generated@@189 () Int)
(declare-fun $generated@@190 () Int)
(declare-fun $generated@@191 () T@U)
(declare-fun $generated@@192 () T@U)
(declare-fun $generated@@193 () T@U)
(declare-fun $generated@@194 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 7) (let (($generated@@195  (=> (and (not ($generated@@63 $generated@@187 $generated@@34)) ($generated@@70 $generated@@53 $generated@@187 ($generated@@54 $generated) $generated@@188)) (and (=> (= (ControlFlow 0 4) (- 0 5)) (not ($generated@@63 $generated@@187 $generated@@34))) (=> (not ($generated@@63 $generated@@187 $generated@@34)) (=> (and (and (and ($generated@@62 $generated@@187) (= $generated@@189 ($generated@@60 $generated@@78 $generated@@187))) (and ($generated@@62 $generated@@187) ($generated@@52 $generated@@5 ($generated@@9 $generated@@189) $generated))) (and (and (= $generated@@190 $generated@@189) (= $generated@@191 ($generated@@30 $generated@@187 ($generated@@20 $generated@@34 ($generated@@49 $generated@@5 ($generated@@9 $generated@@190)))))) (and ($generated@@70 $generated@@53 $generated@@191 ($generated@@54 $generated) $generated@@188) (= (ControlFlow 0 4) (- 0 3))))) (and ($generated@@44 $generated@@191 $generated@@187) (not ($generated@@44 $generated@@187 $generated@@191)))))))))
(let (($generated@@196 true))
(let (($generated@@197 true))
(let (($generated@@198  (=> (= $generated@@192 ($generated@@118 $generated@@193 $generated@@188 $generated@@2 false)) (and (and (=> (= (ControlFlow 0 6) 1) $generated@@197) (=> (= (ControlFlow 0 6) 2) $generated@@196)) (=> (= (ControlFlow 0 6) 4) $generated@@195)))))
(let (($generated@@199  (=> (and (and (and ($generated@@61 $generated@@188) ($generated@@194 $generated@@188)) ($generated@@52 $generated@@53 $generated@@187 ($generated@@54 $generated))) (and (= 2 $generated@@59) (= (ControlFlow 0 7) 6))) $generated@@198)))
$generated@@199))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
