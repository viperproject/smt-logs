(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 (T@U) T@U)
(declare-fun $generated@@22 () Int)
(declare-fun $generated@@23 (T@U Bool T@U) Bool)
(declare-fun $generated@@24 (T@T T@U) T@U)
(declare-fun $generated@@25 () T@T)
(declare-fun $generated@@26 (T@U Bool T@U) Bool)
(declare-fun $generated@@27 (T@T T@U T@U) Bool)
(declare-fun $generated@@28 (T@U) T@U)
(declare-fun $generated@@29 (T@T T@U) T@U)
(declare-fun $generated@@30 (T@U Int) T@U)
(declare-fun $generated@@43 (T@U) Int)
(declare-fun $generated@@44 () T@U)
(declare-fun $generated@@47 (T@T T@U) T@U)
(declare-fun $generated@@50 (T@U T@U) Bool)
(declare-fun $generated@@57 (T@U) T@U)
(declare-fun $generated@@62 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@63 () T@T)
(declare-fun $generated@@64 () T@T)
(declare-fun $generated@@65 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@66 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@67 () T@T)
(declare-fun $generated@@68 (T@T T@T) T@T)
(declare-fun $generated@@69 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@70 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@71 (T@T) T@T)
(declare-fun $generated@@72 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert (= ($generated@@21 $generated) $generated@@1))
(assert (= ($generated@@21 $generated@@0) $generated@@2))
(assert (= ($generated@@5 $generated@@25) 3))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@31 T@U) ($generated@@32 T@U) ($generated@@33 T@U) ) (!  (=> (or ($generated@@26 ($generated@@24 $generated@@25 $generated@@31) ($generated@@10 ($generated@@24 $generated@@6 $generated@@32)) ($generated@@24 $generated@@25 $generated@@33)) (and (< 0 $generated@@22) (and ($generated@@27 $generated@@25 $generated@@31 ($generated@@28 $generated)) ($generated@@27 $generated@@25 $generated@@33 ($generated@@28 $generated@@0))))) (= ($generated@@23 ($generated@@24 $generated@@25 $generated@@31) ($generated@@10 ($generated@@24 $generated@@6 $generated@@32)) ($generated@@24 $generated@@25 $generated@@33)) (forall (($generated@@34 Int) ($generated@@35 Int) ($generated@@36 Int) ) (!  (=> (= $generated@@36 (+ $generated@@34 1)) (=> (and (< ($generated@@12 ($generated@@29 $generated@@7 ($generated@@30 ($generated@@24 $generated@@25 $generated@@33) $generated@@34))) $generated@@35) (< $generated@@35 ($generated@@12 ($generated@@29 $generated@@7 ($generated@@30 ($generated@@24 $generated@@25 $generated@@33) $generated@@36))))) (= ($generated@@10 ($generated@@29 $generated@@6 ($generated@@30 ($generated@@24 $generated@@25 $generated@@31) $generated@@35))) ($generated@@10 ($generated@@24 $generated@@6 $generated@@32)))))
 :pattern ( ($generated@@29 $generated@@6 ($generated@@30 $generated@@31 $generated@@35)) ($generated@@29 $generated@@7 ($generated@@30 $generated@@33 $generated@@36)) ($generated@@29 $generated@@7 ($generated@@30 $generated@@33 $generated@@34)))
))))
 :weight 3
 :pattern ( ($generated@@23 ($generated@@24 $generated@@25 $generated@@31) ($generated@@10 ($generated@@24 $generated@@6 $generated@@32)) ($generated@@24 $generated@@25 $generated@@33)))
))))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@37 T@U) ($generated@@38 Bool) ($generated@@39 T@U) ) (!  (=> (or ($generated@@26 $generated@@37 $generated@@38 $generated@@39) (and (< 0 $generated@@22) (and ($generated@@27 $generated@@25 $generated@@37 ($generated@@28 $generated)) ($generated@@27 $generated@@25 $generated@@39 ($generated@@28 $generated@@0))))) (= ($generated@@23 $generated@@37 $generated@@38 $generated@@39) (forall (($generated@@40 Int) ($generated@@41 Int) ($generated@@42 Int) ) (!  (=> (= $generated@@42 (+ $generated@@40 1)) (=> (and (< ($generated@@12 ($generated@@29 $generated@@7 ($generated@@30 $generated@@39 $generated@@40))) $generated@@41) (< $generated@@41 ($generated@@12 ($generated@@29 $generated@@7 ($generated@@30 $generated@@39 $generated@@42))))) (= ($generated@@10 ($generated@@29 $generated@@6 ($generated@@30 $generated@@37 $generated@@41))) $generated@@38)))
 :pattern ( ($generated@@29 $generated@@6 ($generated@@30 $generated@@37 $generated@@41)) ($generated@@29 $generated@@7 ($generated@@30 $generated@@39 $generated@@42)) ($generated@@29 $generated@@7 ($generated@@30 $generated@@39 $generated@@40)))
))))
 :pattern ( ($generated@@23 $generated@@37 $generated@@38 $generated@@39))
))))
(assert (= ($generated@@43 $generated@@44) 0))
(assert (forall (($generated@@45 T@U) ($generated@@46 T@T) ) (! (= ($generated@@24 $generated@@46 $generated@@45) $generated@@45)
 :pattern ( ($generated@@24 $generated@@46 $generated@@45))
)))
(assert (forall (($generated@@48 T@U) ($generated@@49 T@T) ) (! (= ($generated@@47 $generated@@49 ($generated@@29 $generated@@49 $generated@@48)) $generated@@48)
 :pattern ( ($generated@@29 $generated@@49 $generated@@48))
)))
(assert (forall (($generated@@51 T@U) ) (!  (=> ($generated@@50 $generated@@51 $generated@@0) (and (= ($generated@@47 $generated@@7 ($generated@@29 $generated@@7 $generated@@51)) $generated@@51) ($generated@@27 $generated@@7 ($generated@@29 $generated@@7 $generated@@51) $generated@@0)))
 :pattern ( ($generated@@50 $generated@@51 $generated@@0))
)))
(assert (forall (($generated@@52 T@U) ) (!  (=> ($generated@@50 $generated@@52 $generated) (and (= ($generated@@47 $generated@@6 ($generated@@29 $generated@@6 $generated@@52)) $generated@@52) ($generated@@27 $generated@@6 ($generated@@29 $generated@@6 $generated@@52) $generated)))
 :pattern ( ($generated@@50 $generated@@52 $generated))
)))
(assert (forall (($generated@@53 T@U) ($generated@@54 T@U) ($generated@@55 T@T) ) (! (= ($generated@@50 ($generated@@47 $generated@@55 $generated@@53) $generated@@54) ($generated@@27 $generated@@55 $generated@@53 $generated@@54))
 :pattern ( ($generated@@50 ($generated@@47 $generated@@55 $generated@@53) $generated@@54))
)))
(assert (forall (($generated@@56 T@U) ) (! (<= 0 ($generated@@43 $generated@@56))
 :pattern ( ($generated@@43 $generated@@56))
)))
(assert (forall (($generated@@58 T@U) ) (! (= ($generated@@57 ($generated@@28 $generated@@58)) $generated@@58)
 :pattern ( ($generated@@28 $generated@@58))
)))
(assert (forall (($generated@@59 T@U) ) (! (= ($generated@@21 ($generated@@28 $generated@@59)) $generated@@3)
 :pattern ( ($generated@@28 $generated@@59))
)))
(assert (forall (($generated@@60 T@U) ($generated@@61 T@T) ) (! (= ($generated@@29 $generated@@61 ($generated@@47 $generated@@61 $generated@@60)) $generated@@60)
 :pattern ( ($generated@@47 $generated@@61 $generated@@60))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@73 T@T) ($generated@@74 T@T) ($generated@@75 T@T) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ) (! (= ($generated@@62 $generated@@73 $generated@@74 $generated@@75 ($generated@@69 $generated@@73 $generated@@74 $generated@@75 $generated@@77 $generated@@78 $generated@@79 $generated@@76) $generated@@78 $generated@@79) $generated@@76)
 :weight 0
)) (and (forall (($generated@@80 T@T) ($generated@@81 T@T) ($generated@@82 T@T) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ) (!  (or (= $generated@@85 $generated@@87) (= ($generated@@62 $generated@@80 $generated@@81 $generated@@82 ($generated@@69 $generated@@80 $generated@@81 $generated@@82 $generated@@84 $generated@@85 $generated@@86 $generated@@83) $generated@@87 $generated@@88) ($generated@@62 $generated@@80 $generated@@81 $generated@@82 $generated@@84 $generated@@87 $generated@@88)))
 :weight 0
)) (forall (($generated@@89 T@T) ($generated@@90 T@T) ($generated@@91 T@T) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (!  (or (= $generated@@95 $generated@@97) (= ($generated@@62 $generated@@89 $generated@@90 $generated@@91 ($generated@@69 $generated@@89 $generated@@90 $generated@@91 $generated@@93 $generated@@94 $generated@@95 $generated@@92) $generated@@96 $generated@@97) ($generated@@62 $generated@@89 $generated@@90 $generated@@91 $generated@@93 $generated@@96 $generated@@97)))
 :weight 0
)))) (= ($generated@@5 $generated@@63) 4)) (= ($generated@@5 $generated@@64) 5)) (forall (($generated@@98 T@T) ($generated@@99 T@T) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (! (= ($generated@@66 $generated@@98 $generated@@99 ($generated@@70 $generated@@98 $generated@@99 $generated@@101 $generated@@102 $generated@@100) $generated@@102) $generated@@100)
 :weight 0
))) (forall (($generated@@103 T@T) ($generated@@104 T@T) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ) (!  (or (= $generated@@107 $generated@@108) (= ($generated@@66 $generated@@103 $generated@@104 ($generated@@70 $generated@@103 $generated@@104 $generated@@106 $generated@@107 $generated@@105) $generated@@108) ($generated@@66 $generated@@103 $generated@@104 $generated@@106 $generated@@108)))
 :weight 0
))) (= ($generated@@5 $generated@@67) 6)) (forall (($generated@@109 T@T) ($generated@@110 T@T) ) (= ($generated@@5 ($generated@@68 $generated@@109 $generated@@110)) 7))) (forall (($generated@@111 T@T) ($generated@@112 T@T) ) (! (= ($generated@@71 ($generated@@68 $generated@@111 $generated@@112)) $generated@@111)
 :pattern ( ($generated@@68 $generated@@111 $generated@@112))
))) (forall (($generated@@113 T@T) ($generated@@114 T@T) ) (! (= ($generated@@72 ($generated@@68 $generated@@113 $generated@@114)) $generated@@114)
 :pattern ( ($generated@@68 $generated@@113 $generated@@114))
))))
(assert (forall (($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 Bool) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (= ($generated@@10 ($generated@@62 $generated@@63 $generated@@64 $generated@@6 ($generated@@65 $generated@@115 $generated@@116 $generated@@117 $generated@@118) $generated@@119 $generated@@120))  (=> (and (or (not (= $generated@@119 $generated@@115)) (not true)) ($generated@@10 ($generated@@29 $generated@@6 ($generated@@66 $generated@@64 $generated@@67 ($generated@@66 $generated@@63 ($generated@@68 $generated@@64 $generated@@67) $generated@@116 $generated@@119) $generated@@117)))) $generated@@118))
 :pattern ( ($generated@@62 $generated@@63 $generated@@64 $generated@@6 ($generated@@65 $generated@@115 $generated@@116 $generated@@117 $generated@@118) $generated@@119 $generated@@120))
)))
(assert (forall (($generated@@121 T@U) ($generated@@122 T@U) ) (!  (=> ($generated@@50 $generated@@121 ($generated@@28 $generated@@122)) (and (= ($generated@@47 $generated@@25 ($generated@@29 $generated@@25 $generated@@121)) $generated@@121) ($generated@@27 $generated@@25 ($generated@@29 $generated@@25 $generated@@121) ($generated@@28 $generated@@122))))
 :pattern ( ($generated@@50 $generated@@121 ($generated@@28 $generated@@122)))
)))
(assert (forall (($generated@@123 T@U) ($generated@@124 T@T) ) (! (= ($generated@@47 $generated@@124 ($generated@@24 $generated@@124 $generated@@123)) ($generated@@24 $generated@@67 ($generated@@47 $generated@@124 $generated@@123)))
 :pattern ( ($generated@@47 $generated@@124 ($generated@@24 $generated@@124 $generated@@123)))
)))
(assert (forall (($generated@@125 T@U) ) (!  (=> (= ($generated@@43 $generated@@125) 0) (= $generated@@125 $generated@@44))
 :pattern ( ($generated@@43 $generated@@125))
)))
(assert (forall (($generated@@126 T@U) ($generated@@127 T@U) ) (! (= ($generated@@27 $generated@@25 $generated@@126 ($generated@@28 $generated@@127)) (forall (($generated@@128 Int) ) (!  (=> (and (<= 0 $generated@@128) (< $generated@@128 ($generated@@43 $generated@@126))) ($generated@@50 ($generated@@30 $generated@@126 $generated@@128) $generated@@127))
 :pattern ( ($generated@@30 $generated@@126 $generated@@128))
)))
 :pattern ( ($generated@@27 $generated@@25 $generated@@126 ($generated@@28 $generated@@127)))
)))
(assert (forall (($generated@@129 T@U) ) (! ($generated@@27 $generated@@7 $generated@@129 $generated@@0)
 :pattern ( ($generated@@27 $generated@@7 $generated@@129 $generated@@0))
)))
(assert (forall (($generated@@130 T@U) ) (! ($generated@@27 $generated@@6 $generated@@130 $generated)
 :pattern ( ($generated@@27 $generated@@6 $generated@@130 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@131 () T@U)
(declare-fun $generated@@132 () Int)
(declare-fun $generated@@133 () Int)
(declare-fun $generated@@134 () T@U)
(declare-fun $generated@@135 () T@U)
(declare-fun $generated@@136 () T@U)
(declare-fun $generated@@137 () T@U)
(declare-fun $generated@@138 (T@U) Bool)
(declare-fun $generated@@139 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 13) (let (($generated@@140 true))
(let (($generated@@141  (=> (and (not (and (< ($generated@@12 ($generated@@29 $generated@@7 ($generated@@30 $generated@@131 $generated@@132))) $generated@@133) (< $generated@@133 ($generated@@12 ($generated@@29 $generated@@7 ($generated@@30 $generated@@131 (+ $generated@@132 1))))))) (= (ControlFlow 0 6) 3)) $generated@@140)))
(let (($generated@@142  (=> (and (< ($generated@@12 ($generated@@29 $generated@@7 ($generated@@30 $generated@@131 $generated@@132))) $generated@@133) (< $generated@@133 ($generated@@12 ($generated@@29 $generated@@7 ($generated@@30 $generated@@131 (+ $generated@@132 1)))))) (and (=> (= (ControlFlow 0 4) (- 0 5)) (and (<= 0 $generated@@133) (< $generated@@133 ($generated@@43 $generated@@134)))) (=> (and (<= 0 $generated@@133) (< $generated@@133 ($generated@@43 $generated@@134))) (=> (= (ControlFlow 0 4) 3) $generated@@140))))))
(let (($generated@@143  (=> (<= $generated@@133 ($generated@@12 ($generated@@29 $generated@@7 ($generated@@30 $generated@@131 $generated@@132)))) (and (=> (= (ControlFlow 0 9) 4) $generated@@142) (=> (= (ControlFlow 0 9) 6) $generated@@141)))))
(let (($generated@@144  (=> (< ($generated@@12 ($generated@@29 $generated@@7 ($generated@@30 $generated@@131 $generated@@132))) $generated@@133) (and (=> (= (ControlFlow 0 7) (- 0 8)) (and (<= 0 (+ $generated@@132 1)) (< (+ $generated@@132 1) ($generated@@43 $generated@@131)))) (=> (and (<= 0 (+ $generated@@132 1)) (< (+ $generated@@132 1) ($generated@@43 $generated@@131))) (and (=> (= (ControlFlow 0 7) 4) $generated@@142) (=> (= (ControlFlow 0 7) 6) $generated@@141)))))))
(let (($generated@@145  (and (=> (= (ControlFlow 0 10) (- 0 11)) (and (<= 0 $generated@@132) (< $generated@@132 ($generated@@43 $generated@@131)))) (=> (and (<= 0 $generated@@132) (< $generated@@132 ($generated@@43 $generated@@131))) (and (=> (= (ControlFlow 0 10) 7) $generated@@144) (=> (= (ControlFlow 0 10) 9) $generated@@143))))))
(let (($generated@@146 true))
(let (($generated@@147 true))
(let (($generated@@148  (=> (= $generated@@135 ($generated@@65 $generated@@136 $generated@@137 $generated@@4 false)) (and (and (=> (= (ControlFlow 0 12) 1) $generated@@147) (=> (= (ControlFlow 0 12) 10) $generated@@145)) (=> (= (ControlFlow 0 12) 2) $generated@@146)))))
(let (($generated@@149  (=> (and ($generated@@138 $generated@@137) ($generated@@139 $generated@@137)) (=> (and (and ($generated@@27 $generated@@25 $generated@@134 ($generated@@28 $generated)) ($generated@@27 $generated@@25 $generated@@131 ($generated@@28 $generated@@0))) (and (= 0 $generated@@22) (= (ControlFlow 0 13) 12))) $generated@@148))))
$generated@@149)))))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 7) (- 8))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 4) (- 5))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 10) (- 11))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
