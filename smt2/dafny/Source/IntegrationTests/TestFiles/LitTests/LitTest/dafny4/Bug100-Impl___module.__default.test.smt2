(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 (T@T) Int)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Bool) T@U)
(declare-fun $generated@@9 (T@U) Bool)
(declare-fun $generated@@10 (Int) T@U)
(declare-fun $generated@@11 (T@U) Int)
(declare-fun $generated@@12 (Real) T@U)
(declare-fun $generated@@13 (T@U) Real)
(declare-fun $generated@@20 (T@U) T@U)
(declare-fun $generated@@21 (T@U T@U) Bool)
(declare-fun $generated@@22 () T@U)
(declare-fun $generated@@24 (T@T T@U T@U) Bool)
(declare-fun $generated@@25 () T@T)
(declare-fun $generated@@26 (T@U T@U) T@U)
(declare-fun $generated@@27 (T@U T@U) Bool)
(declare-fun $generated@@35 (T@U T@U T@U T@U T@U) T@U)
(declare-fun $generated@@36 () T@U)
(declare-fun $generated@@37 (T@U) Bool)
(declare-fun $generated@@38 (T@U T@U) Bool)
(declare-fun $generated@@44 (T@T T@U) T@U)
(declare-fun $generated@@45 (T@T T@U) T@U)
(declare-fun $generated@@48 (Int) Int)
(declare-fun $generated@@49 (T@U T@U T@U T@U T@U) T@U)
(declare-fun $generated@@50 () T@U)
(declare-fun $generated@@53 (T@U T@U T@U T@U T@U) Bool)
(declare-fun $generated@@54 (Int) Bool)
(declare-fun $generated@@57 (T@U T@U T@U) Bool)
(declare-fun $generated@@58 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@85 (T@U) T@U)
(declare-fun $generated@@88 (T@U) T@U)
(declare-fun $generated@@93 () T@T)
(declare-fun $generated@@94 () T@U)
(declare-fun $generated@@95 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@96 () T@T)
(declare-fun $generated@@97 () T@T)
(declare-fun $generated@@98 (T@T T@T) T@T)
(declare-fun $generated@@99 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@100 (T@T) T@T)
(declare-fun $generated@@101 (T@T) T@T)
(declare-fun $generated@@128 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@129 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@130 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@162 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@4 $generated@@5) 0) (= ($generated@@4 $generated@@6) 1)) (= ($generated@@4 $generated@@7) 2)) (forall (($generated@@14 Bool) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Int) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Real) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3)
)
(assert (= ($generated@@20 $generated) $generated@@0))
(assert (forall (($generated@@23 T@U) ) (!  (not ($generated@@21 $generated@@22 $generated@@23))
 :pattern ( ($generated@@21 $generated@@22 $generated@@23))
)))
(assert (= ($generated@@4 $generated@@25) 3))
(assert (forall (($generated@@28 T@U) ($generated@@29 T@U) ($generated@@30 T@U) ($generated@@31 T@U) ($generated@@32 T@U) ) (!  (=> (and (and ($generated@@24 $generated@@25 $generated@@28 ($generated@@26 $generated@@29 $generated@@30)) (forall (($generated@@33 T@U) ) (!  (=> ($generated@@27 $generated@@33 $generated@@31) ($generated@@27 $generated@@33 $generated@@29))
 :pattern ( ($generated@@27 $generated@@33 $generated@@31))
 :pattern ( ($generated@@27 $generated@@33 $generated@@29))
))) (forall (($generated@@34 T@U) ) (!  (=> ($generated@@27 $generated@@34 $generated@@30) ($generated@@27 $generated@@34 $generated@@32))
 :pattern ( ($generated@@27 $generated@@34 $generated@@30))
 :pattern ( ($generated@@27 $generated@@34 $generated@@32))
))) ($generated@@24 $generated@@25 $generated@@28 ($generated@@26 $generated@@31 $generated@@32)))
 :pattern ( ($generated@@24 $generated@@25 $generated@@28 ($generated@@26 $generated@@29 $generated@@30)) ($generated@@24 $generated@@25 $generated@@28 ($generated@@26 $generated@@31 $generated@@32)))
)))
(assert (forall (($generated@@39 T@U) ($generated@@40 T@U) ($generated@@41 T@U) ($generated@@42 T@U) ($generated@@43 T@U) ) (!  (=> (and ($generated@@37 $generated@@41) (and ($generated@@27 $generated@@43 $generated@@39) ($generated@@24 $generated@@25 $generated@@42 ($generated@@26 $generated@@39 $generated@@40)))) (= ($generated@@38 ($generated@@35 $generated@@39 $generated@@40 $generated@@36 $generated@@42 $generated@@43) $generated@@22) ($generated@@38 ($generated@@35 $generated@@39 $generated@@40 $generated@@41 $generated@@42 $generated@@43) $generated@@22)))
 :pattern ( ($generated@@35 $generated@@39 $generated@@40 $generated@@36 $generated@@42 $generated@@43) ($generated@@37 $generated@@41))
 :pattern ( ($generated@@35 $generated@@39 $generated@@40 $generated@@41 $generated@@42 $generated@@43))
)))
(assert (forall (($generated@@46 T@U) ($generated@@47 T@T) ) (! (= ($generated@@45 $generated@@47 ($generated@@44 $generated@@47 $generated@@46)) $generated@@46)
 :pattern ( ($generated@@44 $generated@@47 $generated@@46))
)))
(assert (forall (($generated@@51 T@U) ($generated@@52 Int) ) (! (= ($generated@@48 $generated@@52) ($generated@@11 ($generated@@44 $generated@@6 ($generated@@49 $generated $generated $generated@@51 $generated@@50 ($generated@@45 $generated@@6 ($generated@@10 $generated@@52))))))
 :pattern ( ($generated@@48 $generated@@52) ($generated@@37 $generated@@51))
)))
(assert (forall (($generated@@55 T@U) ($generated@@56 T@U) ) (! (= ($generated@@53 $generated $generated $generated@@55 $generated@@50 $generated@@56) ($generated@@54 ($generated@@11 ($generated@@44 $generated@@6 $generated@@56))))
 :pattern ( ($generated@@53 $generated $generated $generated@@55 $generated@@50 $generated@@56))
)))
(assert ($generated@@37 $generated@@36))
(assert (forall (($generated@@59 T@U) ($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@T) ) (! (= ($generated@@57 ($generated@@45 $generated@@62 $generated@@59) $generated@@60 $generated@@61) ($generated@@58 $generated@@62 $generated@@59 $generated@@60 $generated@@61))
 :pattern ( ($generated@@57 ($generated@@45 $generated@@62 $generated@@59) $generated@@60 $generated@@61))
)))
(assert (forall (($generated@@63 T@U) ($generated@@64 T@U) ($generated@@65 T@U) ) (! (= ($generated@@21 ($generated@@35 $generated $generated $generated@@64 $generated@@50 $generated@@65) $generated@@63) false)
 :pattern ( ($generated@@21 ($generated@@35 $generated $generated $generated@@64 $generated@@50 $generated@@65) $generated@@63))
)))
(assert (forall (($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@U) ) (!  (=> (and ($generated@@37 $generated@@69) ($generated@@58 $generated@@25 $generated@@66 ($generated@@26 $generated@@67 $generated@@68) $generated@@69)) (forall (($generated@@70 T@U) ) (!  (=> (and ($generated@@57 $generated@@70 $generated@@67 $generated@@69) ($generated@@53 $generated@@67 $generated@@68 $generated@@69 $generated@@66 $generated@@70)) ($generated@@57 ($generated@@49 $generated@@67 $generated@@68 $generated@@69 $generated@@66 $generated@@70) $generated@@68 $generated@@69))
 :pattern ( ($generated@@49 $generated@@67 $generated@@68 $generated@@69 $generated@@66 $generated@@70))
)))
 :pattern ( ($generated@@58 $generated@@25 $generated@@66 ($generated@@26 $generated@@67 $generated@@68) $generated@@69))
)))
(assert (forall (($generated@@71 T@U) ($generated@@72 T@U) ) (! (= ($generated@@49 $generated $generated $generated@@71 $generated@@50 $generated@@72) ($generated@@45 $generated@@6 ($generated@@10 ($generated@@48 ($generated@@11 ($generated@@44 $generated@@6 $generated@@72))))))
 :pattern ( ($generated@@49 $generated $generated $generated@@71 $generated@@50 $generated@@72))
)))
(assert (forall (($generated@@73 Int) ) (! (= ($generated@@54 $generated@@73) true)
 :pattern ( ($generated@@54 $generated@@73))
)))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@U) ) (!  (=> ($generated@@38 $generated@@74 $generated@@75) (= $generated@@74 $generated@@75))
 :pattern ( ($generated@@38 $generated@@74 $generated@@75))
)))
(assert (forall (($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ) (! (= ($generated@@24 $generated@@25 $generated@@76 ($generated@@26 $generated@@77 $generated@@78)) (forall (($generated@@79 T@U) ($generated@@80 T@U) ) (!  (=> (and (and ($generated@@37 $generated@@79) ($generated@@27 $generated@@80 $generated@@77)) ($generated@@53 $generated@@77 $generated@@78 $generated@@79 $generated@@76 $generated@@80)) ($generated@@27 ($generated@@49 $generated@@77 $generated@@78 $generated@@79 $generated@@76 $generated@@80) $generated@@78))
 :pattern ( ($generated@@49 $generated@@77 $generated@@78 $generated@@79 $generated@@76 $generated@@80))
)))
 :pattern ( ($generated@@24 $generated@@25 $generated@@76 ($generated@@26 $generated@@77 $generated@@78)))
)))
(assert (forall (($generated@@81 T@U) ) (!  (=> ($generated@@27 $generated@@81 $generated) (and (= ($generated@@45 $generated@@6 ($generated@@44 $generated@@6 $generated@@81)) $generated@@81) ($generated@@24 $generated@@6 ($generated@@44 $generated@@6 $generated@@81) $generated)))
 :pattern ( ($generated@@27 $generated@@81 $generated))
)))
(assert (forall (($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@T) ) (! (= ($generated@@27 ($generated@@45 $generated@@84 $generated@@82) $generated@@83) ($generated@@24 $generated@@84 $generated@@82 $generated@@83))
 :pattern ( ($generated@@27 ($generated@@45 $generated@@84 $generated@@82) $generated@@83))
)))
(assert (forall (($generated@@86 T@U) ($generated@@87 T@U) ) (! (= ($generated@@85 ($generated@@26 $generated@@86 $generated@@87)) $generated@@86)
 :pattern ( ($generated@@26 $generated@@86 $generated@@87))
)))
(assert (forall (($generated@@89 T@U) ($generated@@90 T@U) ) (! (= ($generated@@88 ($generated@@26 $generated@@89 $generated@@90)) $generated@@90)
 :pattern ( ($generated@@26 $generated@@89 $generated@@90))
)))
(assert (forall (($generated@@91 T@U) ($generated@@92 T@T) ) (! (= ($generated@@44 $generated@@92 ($generated@@45 $generated@@92 $generated@@91)) $generated@@91)
 :pattern ( ($generated@@45 $generated@@92 $generated@@91))
)))
(assert  (and (and (and (and (and (and (and (= ($generated@@4 $generated@@93) 4) (forall (($generated@@102 T@T) ($generated@@103 T@T) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (! (= ($generated@@95 $generated@@102 $generated@@103 ($generated@@99 $generated@@102 $generated@@103 $generated@@105 $generated@@106 $generated@@104) $generated@@106) $generated@@104)
 :weight 0
))) (forall (($generated@@107 T@T) ($generated@@108 T@T) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ) (!  (or (= $generated@@111 $generated@@112) (= ($generated@@95 $generated@@107 $generated@@108 ($generated@@99 $generated@@107 $generated@@108 $generated@@110 $generated@@111 $generated@@109) $generated@@112) ($generated@@95 $generated@@107 $generated@@108 $generated@@110 $generated@@112)))
 :weight 0
))) (= ($generated@@4 $generated@@96) 5)) (= ($generated@@4 $generated@@97) 6)) (forall (($generated@@113 T@T) ($generated@@114 T@T) ) (= ($generated@@4 ($generated@@98 $generated@@113 $generated@@114)) 7))) (forall (($generated@@115 T@T) ($generated@@116 T@T) ) (! (= ($generated@@100 ($generated@@98 $generated@@115 $generated@@116)) $generated@@115)
 :pattern ( ($generated@@98 $generated@@115 $generated@@116))
))) (forall (($generated@@117 T@T) ($generated@@118 T@T) ) (! (= ($generated@@101 ($generated@@98 $generated@@117 $generated@@118)) $generated@@118)
 :pattern ( ($generated@@98 $generated@@117 $generated@@118))
))))
(assert (forall (($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ) (!  (=> ($generated@@37 $generated@@122) (= ($generated@@58 $generated@@25 $generated@@119 ($generated@@26 $generated@@120 $generated@@121) $generated@@122) (forall (($generated@@123 T@U) ) (!  (=> (and (and ($generated@@27 $generated@@123 $generated@@120) ($generated@@57 $generated@@123 $generated@@120 $generated@@122)) ($generated@@53 $generated@@120 $generated@@121 $generated@@122 $generated@@119 $generated@@123)) (forall (($generated@@124 T@U) ) (!  (=> (and (or (not (= $generated@@124 $generated@@94)) (not true)) ($generated@@21 ($generated@@35 $generated@@120 $generated@@121 $generated@@122 $generated@@119 $generated@@123) ($generated@@45 $generated@@93 $generated@@124))) ($generated@@9 ($generated@@44 $generated@@5 ($generated@@95 $generated@@96 $generated@@97 ($generated@@95 $generated@@93 ($generated@@98 $generated@@96 $generated@@97) $generated@@122 $generated@@124) $generated@@1))))
 :pattern ( ($generated@@21 ($generated@@35 $generated@@120 $generated@@121 $generated@@122 $generated@@119 $generated@@123) ($generated@@45 $generated@@93 $generated@@124)))
)))
 :pattern ( ($generated@@49 $generated@@120 $generated@@121 $generated@@122 $generated@@119 $generated@@123))
 :pattern ( ($generated@@35 $generated@@120 $generated@@121 $generated@@122 $generated@@119 $generated@@123))
))))
 :pattern ( ($generated@@58 $generated@@25 $generated@@119 ($generated@@26 $generated@@120 $generated@@121) $generated@@122))
)))
(assert (forall (($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 T@U) ) (!  (=> ($generated@@27 $generated@@127 ($generated@@26 $generated@@125 $generated@@126)) (and (= ($generated@@45 $generated@@25 ($generated@@44 $generated@@25 $generated@@127)) $generated@@127) ($generated@@24 $generated@@25 ($generated@@44 $generated@@25 $generated@@127) ($generated@@26 $generated@@125 $generated@@126))))
 :pattern ( ($generated@@27 $generated@@127 ($generated@@26 $generated@@125 $generated@@126)))
)))
(assert  (and (forall (($generated@@131 T@T) ($generated@@132 T@T) ($generated@@133 T@T) ($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ) (! (= ($generated@@128 $generated@@131 $generated@@132 $generated@@133 ($generated@@130 $generated@@131 $generated@@132 $generated@@133 $generated@@135 $generated@@136 $generated@@137 $generated@@134) $generated@@136 $generated@@137) $generated@@134)
 :weight 0
)) (and (forall (($generated@@138 T@T) ($generated@@139 T@T) ($generated@@140 T@T) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ($generated@@146 T@U) ) (!  (or (= $generated@@143 $generated@@145) (= ($generated@@128 $generated@@138 $generated@@139 $generated@@140 ($generated@@130 $generated@@138 $generated@@139 $generated@@140 $generated@@142 $generated@@143 $generated@@144 $generated@@141) $generated@@145 $generated@@146) ($generated@@128 $generated@@138 $generated@@139 $generated@@140 $generated@@142 $generated@@145 $generated@@146)))
 :weight 0
)) (forall (($generated@@147 T@T) ($generated@@148 T@T) ($generated@@149 T@T) ($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 T@U) ($generated@@154 T@U) ($generated@@155 T@U) ) (!  (or (= $generated@@153 $generated@@155) (= ($generated@@128 $generated@@147 $generated@@148 $generated@@149 ($generated@@130 $generated@@147 $generated@@148 $generated@@149 $generated@@151 $generated@@152 $generated@@153 $generated@@150) $generated@@154 $generated@@155) ($generated@@128 $generated@@147 $generated@@148 $generated@@149 $generated@@151 $generated@@154 $generated@@155)))
 :weight 0
)))))
(assert (forall (($generated@@156 T@U) ($generated@@157 T@U) ($generated@@158 T@U) ($generated@@159 Bool) ($generated@@160 T@U) ($generated@@161 T@U) ) (! (= ($generated@@9 ($generated@@128 $generated@@93 $generated@@96 $generated@@5 ($generated@@129 $generated@@156 $generated@@157 $generated@@158 $generated@@159) $generated@@160 $generated@@161))  (=> (and (or (not (= $generated@@160 $generated@@156)) (not true)) ($generated@@9 ($generated@@44 $generated@@5 ($generated@@95 $generated@@96 $generated@@97 ($generated@@95 $generated@@93 ($generated@@98 $generated@@96 $generated@@97) $generated@@157 $generated@@160) $generated@@158)))) $generated@@159))
 :pattern ( ($generated@@128 $generated@@93 $generated@@96 $generated@@5 ($generated@@129 $generated@@156 $generated@@157 $generated@@158 $generated@@159) $generated@@160 $generated@@161))
)))
(assert (forall (($generated@@163 T@U) ($generated@@164 T@U) ) (!  (and (= ($generated@@20 ($generated@@26 $generated@@163 $generated@@164)) $generated@@2) (= ($generated@@162 ($generated@@26 $generated@@163 $generated@@164)) $generated@@3))
 :pattern ( ($generated@@26 $generated@@163 $generated@@164))
)))
(assert (forall (($generated@@165 T@U) ($generated@@166 T@U) ($generated@@167 T@U) ($generated@@168 T@U) ($generated@@169 T@U) ) (!  (=> (and (and ($generated@@37 $generated@@167) (and ($generated@@27 $generated@@169 $generated@@165) ($generated@@24 $generated@@25 $generated@@168 ($generated@@26 $generated@@165 $generated@@166)))) ($generated@@38 ($generated@@35 $generated@@165 $generated@@166 $generated@@36 $generated@@168 $generated@@169) $generated@@22)) (= ($generated@@53 $generated@@165 $generated@@166 $generated@@36 $generated@@168 $generated@@169) ($generated@@53 $generated@@165 $generated@@166 $generated@@167 $generated@@168 $generated@@169)))
 :pattern ( ($generated@@53 $generated@@165 $generated@@166 $generated@@36 $generated@@168 $generated@@169) ($generated@@37 $generated@@167))
 :pattern ( ($generated@@53 $generated@@165 $generated@@166 $generated@@167 $generated@@168 $generated@@169))
)))
(assert (forall (($generated@@170 T@U) ($generated@@171 T@U) ) (! (= ($generated@@38 $generated@@170 $generated@@171) (forall (($generated@@172 T@U) ) (! (= ($generated@@21 $generated@@170 $generated@@172) ($generated@@21 $generated@@171 $generated@@172))
 :pattern ( ($generated@@21 $generated@@170 $generated@@172))
 :pattern ( ($generated@@21 $generated@@171 $generated@@172))
)))
 :pattern ( ($generated@@38 $generated@@170 $generated@@171))
)))
(assert (forall (($generated@@173 T@U) ($generated@@174 T@U) ) (! ($generated@@58 $generated@@6 $generated@@174 $generated $generated@@173)
 :pattern ( ($generated@@58 $generated@@6 $generated@@174 $generated $generated@@173))
)))
(assert (forall (($generated@@175 T@U) ) (! ($generated@@24 $generated@@6 $generated@@175 $generated)
 :pattern ( ($generated@@24 $generated@@6 $generated@@175 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@176 () T@U)
(declare-fun $generated@@177 () T@U)
(declare-fun $generated@@178 () Int)
(declare-fun $generated@@179 () T@U)
(declare-fun $generated@@180 () T@U)
(declare-fun $generated@@181 (T@U) Bool)
(declare-fun $generated@@182 () Int)
(declare-fun $generated@@183 () Int)
(declare-fun $generated@@184 (Int) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 5) (let (($generated@@185  (=> (= $generated@@176 ($generated@@129 $generated@@94 $generated@@177 $generated@@1 false)) (and (=> (= (ControlFlow 0 2) (- 0 4)) (or (not (= 0 $generated@@178)) (not true))) (=> (or (not (= 0 $generated@@178)) (not true)) (=> (= $generated@@179 $generated@@50) (and (=> (= (ControlFlow 0 2) (- 0 3)) (forall (($generated@@186 Int) ) (! ($generated@@53 $generated $generated $generated@@177 $generated@@179 ($generated@@45 $generated@@6 ($generated@@10 $generated@@186)))
 :pattern ( ($generated@@53 $generated $generated $generated@@177 $generated@@179 ($generated@@45 $generated@@6 ($generated@@10 $generated@@186))))
))) (=> (forall (($generated@@187 T@U) ) (! ($generated@@53 $generated $generated $generated@@177 $generated@@179 ($generated@@45 $generated@@6 $generated@@187))
 :pattern ( ($generated@@53 $generated $generated $generated@@177 $generated@@179 ($generated@@45 $generated@@6 $generated@@187)))
)) (=> (and (and ($generated@@37 $generated@@180) ($generated@@181 $generated@@180)) (and (forall (($generated@@188 T@U) ) (! (= (+ ($generated@@11 ($generated@@44 $generated@@6 ($generated@@49 $generated $generated $generated@@180 $generated@@179 ($generated@@45 $generated@@6 $generated@@188)))) $generated@@182) (+ ($generated@@11 ($generated@@44 $generated@@6 ($generated@@49 $generated $generated $generated@@180 $generated@@179 ($generated@@45 $generated@@6 ($generated@@10 $generated@@182))))) ($generated@@11 $generated@@188)))
 :pattern ( ($generated@@44 $generated@@6 ($generated@@49 $generated $generated $generated@@180 $generated@@179 ($generated@@45 $generated@@6 $generated@@188))))
)) (= $generated@@177 $generated@@180))) (=> (and (and (and ($generated@@58 $generated@@6 ($generated@@10 $generated@@183) $generated $generated@@180) ($generated@@184 $generated@@183)) (and ($generated@@58 $generated@@6 ($generated@@10 $generated@@182) $generated $generated@@180) ($generated@@184 $generated@@182))) (and (and ($generated@@184 $generated@@183) ($generated@@184 $generated@@182)) (= (ControlFlow 0 2) (- 0 1)))) (= (+ ($generated@@48 $generated@@183) $generated@@182) (+ ($generated@@48 $generated@@182) $generated@@183))))))))))))
(let (($generated@@189  (=> (and (and ($generated@@37 $generated@@177) ($generated@@181 $generated@@177)) (and (= 1 $generated@@178) (= (ControlFlow 0 5) 2))) $generated@@185)))
$generated@@189)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
