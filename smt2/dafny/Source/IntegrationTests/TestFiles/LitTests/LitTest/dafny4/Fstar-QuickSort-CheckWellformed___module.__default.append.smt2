(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._module.List () T@U)
(declare-fun |##_module.List.Nil| () T@U)
(declare-fun |##_module.List.Cons| () T@U)
(declare-fun tytagFamily$List () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.append (T@U Int Int Int Int T@U T@U) T@U)
(declare-fun $LS (T@U) T@U)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun DatatypeTypeType () T@T)
(declare-fun |_module.__default.append#canCall| (Int Int Int Int T@U T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun Tclass._module.List (T@U) T@U)
(declare-fun _module.__default.SortedRange (T@U Int Int T@U) Bool)
(declare-fun $LZ () T@U)
(declare-fun _module.List.Nil_q (T@U) Bool)
(declare-fun _module.List._h1 (T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun _module.List._h0 (T@U) T@U)
(declare-fun |#_module.List.Cons| (T@U T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun |#_module.List.Nil| () T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun |_module.List#Equal| (T@U T@U) Bool)
(declare-fun _module.List.Cons_q (T@U) Bool)
(declare-fun |_module.__default.SortedRange#canCall| (Int Int T@U) Bool)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun TagFamily (T@U) T@U)
(declare-fun _module.__default.In (T@U Int T@U) Int)
(declare-fun Tclass._module.List_0 (T@U) T@U)
(declare-fun |_module.__default.In#canCall| (Int T@U) Bool)
(declare-fun BoxRank (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt alloc Tagclass._module.List |##_module.List.Nil| |##_module.List.Cons| tytagFamily$List)
)
(assert (= (Tag TInt) TagInt))
(assert (= (Ctor DatatypeTypeType) 3))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($ly T@U) (|n0#0| Int) (|n1#0| Int) (|n2#0| Int) (|n3#0| Int) (|i#0| T@U) (|j#0| T@U) ) (!  (=> (or (|_module.__default.append#canCall| (LitInt |n0#0|) (LitInt |n1#0|) (LitInt |n2#0|) (LitInt |n3#0|) (Lit DatatypeTypeType |i#0|) (Lit DatatypeTypeType |j#0|)) (and (< 2 $FunctionContextHeight) (and (and ($Is DatatypeTypeType |i#0| (Tclass._module.List TInt)) ($Is DatatypeTypeType |j#0| (Tclass._module.List TInt))) (and (and (and (<= (LitInt |n0#0|) (LitInt |n1#0|)) (<= (LitInt |n1#0|) (LitInt |n2#0|))) (<= (LitInt |n2#0|) (LitInt |n3#0|))) (U_2_bool (Lit boolType (bool_2_U  (and (_module.__default.SortedRange ($LS $LZ) (LitInt |n0#0|) (LitInt |n1#0|) (Lit DatatypeTypeType |i#0|)) (_module.__default.SortedRange ($LS $LZ) (LitInt |n2#0|) (LitInt |n3#0|) (Lit DatatypeTypeType |j#0|)))))))))) (and (=> (not (U_2_bool (Lit boolType (bool_2_U (_module.List.Nil_q (Lit DatatypeTypeType |i#0|)))))) (let ((|tl#5| (Lit DatatypeTypeType (_module.List._h1 (Lit DatatypeTypeType |i#0|)))))
(let ((|hd#5| (LitInt (U_2_int ($Unbox intType (_module.List._h0 (Lit DatatypeTypeType |i#0|)))))))
(|_module.__default.append#canCall| |hd#5| (LitInt |n1#0|) (LitInt |n2#0|) (LitInt |n3#0|) |tl#5| (Lit DatatypeTypeType |j#0|))))) (= (_module.__default.append ($LS $ly) (LitInt |n0#0|) (LitInt |n1#0|) (LitInt |n2#0|) (LitInt |n3#0|) (Lit DatatypeTypeType |i#0|) (Lit DatatypeTypeType |j#0|)) (ite (_module.List.Nil_q (Lit DatatypeTypeType |i#0|)) |j#0| (let ((|tl#4| (Lit DatatypeTypeType (_module.List._h1 (Lit DatatypeTypeType |i#0|)))))
(let ((|hd#4| (LitInt (U_2_int ($Unbox intType (_module.List._h0 (Lit DatatypeTypeType |i#0|)))))))
(Lit DatatypeTypeType (|#_module.List.Cons| ($Box intType (int_2_U |hd#4|)) (Lit DatatypeTypeType (_module.__default.append ($LS $ly) |hd#4| (LitInt |n1#0|) (LitInt |n2#0|) (LitInt |n3#0|) |tl#4| (Lit DatatypeTypeType |j#0|)))))))))))
 :weight 3
 :pattern ( (_module.__default.append ($LS $ly) (LitInt |n0#0|) (LitInt |n1#0|) (LitInt |n2#0|) (LitInt |n3#0|) (Lit DatatypeTypeType |i#0|) (Lit DatatypeTypeType |j#0|)))
))))
(assert (= (DatatypeCtorId |#_module.List.Nil|) |##_module.List.Nil|))
(assert (forall ((_module.List$T T@U) ($h T@U) ) (!  (=> ($IsGoodHeap $h) ($IsAlloc DatatypeTypeType |#_module.List.Nil| (Tclass._module.List _module.List$T) $h))
 :pattern ( ($IsAlloc DatatypeTypeType |#_module.List.Nil| (Tclass._module.List _module.List$T) $h))
)))
(assert (forall ((_module.List$T@@0 T@U) ) (! ($Is DatatypeTypeType |#_module.List.Nil| (Tclass._module.List _module.List$T@@0))
 :pattern ( ($Is DatatypeTypeType |#_module.List.Nil| (Tclass._module.List _module.List$T@@0)))
)))
(assert (forall ((a T@U) (b T@U) ) (! (= (|_module.List#Equal| a b) (= a b))
 :pattern ( (|_module.List#Equal| a b))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) ) (!  (=> (and (_module.List.Cons_q a@@0) (_module.List.Cons_q b@@0)) (= (|_module.List#Equal| a@@0 b@@0)  (and (= (_module.List._h0 a@@0) (_module.List._h0 b@@0)) (|_module.List#Equal| (_module.List._h1 a@@0) (_module.List._h1 b@@0)))))
 :pattern ( (|_module.List#Equal| a@@0 b@@0) (_module.List.Cons_q a@@0))
 :pattern ( (|_module.List#Equal| a@@0 b@@0) (_module.List.Cons_q b@@0))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($ly@@0 T@U) (|m#0| Int) (|n#0| Int) (|list#0| T@U) ) (!  (=> (or (|_module.__default.SortedRange#canCall| |m#0| |n#0| (Lit DatatypeTypeType |list#0|)) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |list#0| (Tclass._module.List TInt)))) (and (=> (not (U_2_bool (Lit boolType (bool_2_U (_module.List.Nil_q (Lit DatatypeTypeType |list#0|)))))) (let ((|tl#3| (Lit DatatypeTypeType (_module.List._h1 (Lit DatatypeTypeType |list#0|)))))
(let ((|hd#3| (LitInt (U_2_int ($Unbox intType (_module.List._h0 (Lit DatatypeTypeType |list#0|)))))))
 (=> (<= |m#0| |hd#3|) (=> (<= |hd#3| |n#0|) (|_module.__default.SortedRange#canCall| |hd#3| |n#0| |tl#3|)))))) (= (_module.__default.SortedRange ($LS $ly@@0) |m#0| |n#0| (Lit DatatypeTypeType |list#0|)) (ite (_module.List.Nil_q (Lit DatatypeTypeType |list#0|)) (<= |m#0| |n#0|) (let ((|tl#2| (Lit DatatypeTypeType (_module.List._h1 (Lit DatatypeTypeType |list#0|)))))
(let ((|hd#2| (LitInt (U_2_int ($Unbox intType (_module.List._h0 (Lit DatatypeTypeType |list#0|)))))))
 (and (and (<= |m#0| |hd#2|) (<= |hd#2| |n#0|)) (_module.__default.SortedRange ($LS $ly@@0) |hd#2| |n#0| |tl#2|))))))))
 :weight 3
 :pattern ( (_module.__default.SortedRange ($LS $ly@@0) |m#0| |n#0| (Lit DatatypeTypeType |list#0|)))
))))
(assert (forall ((_module.List$T@@1 T@U) (|a#6#0#0| T@U) (|a#6#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.List.Cons| |a#6#0#0| |a#6#1#0|) (Tclass._module.List _module.List$T@@1))  (and ($IsBox |a#6#0#0| _module.List$T@@1) ($Is DatatypeTypeType |a#6#1#0| (Tclass._module.List _module.List$T@@1))))
 :pattern ( ($Is DatatypeTypeType (|#_module.List.Cons| |a#6#0#0| |a#6#1#0|) (Tclass._module.List _module.List$T@@1)))
)))
(assert (forall ((d T@U) ) (! (= (_module.List.Nil_q d) (= (DatatypeCtorId d) |##_module.List.Nil|))
 :pattern ( (_module.List.Nil_q d))
)))
(assert (forall ((d@@0 T@U) ) (! (= (_module.List.Cons_q d@@0) (= (DatatypeCtorId d@@0) |##_module.List.Cons|))
 :pattern ( (_module.List.Cons_q d@@0))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((d@@1 T@U) ) (!  (=> (_module.List.Cons_q d@@1) (exists ((|a#5#0#0| T@U) (|a#5#1#0| T@U) ) (= d@@1 (|#_module.List.Cons| |a#5#0#0| |a#5#1#0|))))
 :pattern ( (_module.List.Cons_q d@@1))
)))
(assert (forall ((d@@2 T@U) ) (!  (=> (_module.List.Nil_q d@@2) (= d@@2 |#_module.List.Nil|))
 :pattern ( (_module.List.Nil_q d@@2))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($ly@@1 T@U) (|m#0@@0| Int) (|n#0@@0| Int) (|list#0@@0| T@U) ) (!  (=> (or (|_module.__default.SortedRange#canCall| (LitInt |m#0@@0|) (LitInt |n#0@@0|) (Lit DatatypeTypeType |list#0@@0|)) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |list#0@@0| (Tclass._module.List TInt)))) (and (=> (not (U_2_bool (Lit boolType (bool_2_U (_module.List.Nil_q (Lit DatatypeTypeType |list#0@@0|)))))) (let ((|tl#5@@0| (Lit DatatypeTypeType (_module.List._h1 (Lit DatatypeTypeType |list#0@@0|)))))
(let ((|hd#5@@0| (LitInt (U_2_int ($Unbox intType (_module.List._h0 (Lit DatatypeTypeType |list#0@@0|)))))))
 (=> (<= (LitInt |m#0@@0|) |hd#5@@0|) (=> (<= |hd#5@@0| (LitInt |n#0@@0|)) (|_module.__default.SortedRange#canCall| |hd#5@@0| (LitInt |n#0@@0|) |tl#5@@0|)))))) (= (_module.__default.SortedRange ($LS $ly@@1) (LitInt |m#0@@0|) (LitInt |n#0@@0|) (Lit DatatypeTypeType |list#0@@0|)) (ite (_module.List.Nil_q (Lit DatatypeTypeType |list#0@@0|)) (<= (LitInt |m#0@@0|) (LitInt |n#0@@0|)) (let ((|tl#4@@0| (Lit DatatypeTypeType (_module.List._h1 (Lit DatatypeTypeType |list#0@@0|)))))
(let ((|hd#4@@0| (LitInt (U_2_int ($Unbox intType (_module.List._h0 (Lit DatatypeTypeType |list#0@@0|)))))))
 (and (and (<= (LitInt |m#0@@0|) |hd#4@@0|) (<= |hd#4@@0| (LitInt |n#0@@0|))) (_module.__default.SortedRange ($LS $ly@@1) |hd#4@@0| (LitInt |n#0@@0|) |tl#4@@0|))))))))
 :weight 3
 :pattern ( (_module.__default.SortedRange ($LS $ly@@1) (LitInt |m#0@@0|) (LitInt |n#0@@0|) (Lit DatatypeTypeType |list#0@@0|)))
))))
(assert (forall ((v T@U) (t T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v) t h) ($IsAlloc T@@1 v t h))
 :pattern ( ($IsAllocBox ($Box T@@1 v) t h))
)))
(assert (forall (($ly@@2 T@U) (|n0#0@@0| Int) (|n1#0@@0| Int) (|n2#0@@0| Int) (|n3#0@@0| Int) (|i#0@@0| T@U) (|j#0@@0| T@U) ) (! (= (_module.__default.append ($LS $ly@@2) |n0#0@@0| |n1#0@@0| |n2#0@@0| |n3#0@@0| |i#0@@0| |j#0@@0|) (_module.__default.append $ly@@2 |n0#0@@0| |n1#0@@0| |n2#0@@0| |n3#0@@0| |i#0@@0| |j#0@@0|))
 :pattern ( (_module.__default.append ($LS $ly@@2) |n0#0@@0| |n1#0@@0| |n2#0@@0| |n3#0@@0| |i#0@@0| |j#0@@0|))
)))
(assert (forall ((_module.List$T@@2 T@U) ) (!  (and (= (Tag (Tclass._module.List _module.List$T@@2)) Tagclass._module.List) (= (TagFamily (Tclass._module.List _module.List$T@@2)) tytagFamily$List))
 :pattern ( (Tclass._module.List _module.List$T@@2))
)))
(assert (forall (($ly@@3 T@U) (|x#0| Int) (|list#0@@1| T@U) ) (! (= (_module.__default.In ($LS $ly@@3) |x#0| |list#0@@1|) (_module.__default.In $ly@@3 |x#0| |list#0@@1|))
 :pattern ( (_module.__default.In ($LS $ly@@3) |x#0| |list#0@@1|))
)))
(assert (forall ((_module.List$T@@3 T@U) (d@@3 T@U) ) (!  (=> ($Is DatatypeTypeType d@@3 (Tclass._module.List _module.List$T@@3)) (or (_module.List.Nil_q d@@3) (_module.List.Cons_q d@@3)))
 :pattern ( (_module.List.Cons_q d@@3) ($Is DatatypeTypeType d@@3 (Tclass._module.List _module.List$T@@3)))
 :pattern ( (_module.List.Nil_q d@@3) ($Is DatatypeTypeType d@@3 (Tclass._module.List _module.List$T@@3)))
)))
(assert (forall ((bx T@U) ) (!  (=> ($IsBox bx TInt) (and (= ($Box intType ($Unbox intType bx)) bx) ($Is intType ($Unbox intType bx) TInt)))
 :pattern ( ($IsBox bx TInt))
)))
(assert (forall ((v@@0 T@U) (t@@0 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@0) t@@0) ($Is T@@2 v@@0 t@@0))
 :pattern ( ($IsBox ($Box T@@2 v@@0) t@@0))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($ly@@4 T@U) (|n0#0@@1| Int) (|n1#0@@1| Int) (|n2#0@@1| Int) (|n3#0@@1| Int) (|i#0@@1| T@U) (|j#0@@1| T@U) ) (!  (=> (or (|_module.__default.append#canCall| |n0#0@@1| |n1#0@@1| |n2#0@@1| |n3#0@@1| |i#0@@1| |j#0@@1|) (and (< 2 $FunctionContextHeight) (and (and ($Is DatatypeTypeType |i#0@@1| (Tclass._module.List TInt)) ($Is DatatypeTypeType |j#0@@1| (Tclass._module.List TInt))) (and (and (and (<= |n0#0@@1| |n1#0@@1|) (<= |n1#0@@1| |n2#0@@1|)) (<= |n2#0@@1| |n3#0@@1|)) (and (_module.__default.SortedRange ($LS $LZ) |n0#0@@1| |n1#0@@1| |i#0@@1|) (_module.__default.SortedRange ($LS $LZ) |n2#0@@1| |n3#0@@1| |j#0@@1|)))))) (and (and (_module.__default.SortedRange ($LS $LZ) |n0#0@@1| |n3#0@@1| (_module.__default.append $ly@@4 |n0#0@@1| |n1#0@@1| |n2#0@@1| |n3#0@@1| |i#0@@1| |j#0@@1|)) (forall ((|x#0@@0| Int) ) (! (= (_module.__default.In ($LS $LZ) |x#0@@0| (_module.__default.append $ly@@4 |n0#0@@1| |n1#0@@1| |n2#0@@1| |n3#0@@1| |i#0@@1| |j#0@@1|)) (+ (_module.__default.In ($LS $LZ) |x#0@@0| |i#0@@1|) (_module.__default.In ($LS $LZ) |x#0@@0| |j#0@@1|)))
 :pattern ( (_module.__default.In ($LS $LZ) |x#0@@0| |j#0@@1|))
 :pattern ( (_module.__default.In ($LS $LZ) |x#0@@0| |i#0@@1|))
 :pattern ( (_module.__default.In ($LS $LZ) |x#0@@0| (_module.__default.append $ly@@4 |n0#0@@1| |n1#0@@1| |n2#0@@1| |n3#0@@1| |i#0@@1| |j#0@@1|)))
))) ($Is DatatypeTypeType (_module.__default.append $ly@@4 |n0#0@@1| |n1#0@@1| |n2#0@@1| |n3#0@@1| |i#0@@1| |j#0@@1|) (Tclass._module.List TInt))))
 :pattern ( (_module.__default.append $ly@@4 |n0#0@@1| |n1#0@@1| |n2#0@@1| |n3#0@@1| |i#0@@1| |j#0@@1|))
))))
(assert (forall (($ly@@5 T@U) (|m#0@@1| Int) (|n#0@@1| Int) (|list#0@@2| T@U) ) (! (= (_module.__default.SortedRange ($LS $ly@@5) |m#0@@1| |n#0@@1| |list#0@@2|) (_module.__default.SortedRange $ly@@5 |m#0@@1| |n#0@@1| |list#0@@2|))
 :pattern ( (_module.__default.SortedRange ($LS $ly@@5) |m#0@@1| |n#0@@1| |list#0@@2|))
)))
(assert (forall ((a@@1 T@U) (b@@1 T@U) ) (!  (=> (and (_module.List.Nil_q a@@1) (_module.List.Nil_q b@@1)) (|_module.List#Equal| a@@1 b@@1))
 :pattern ( (|_module.List#Equal| a@@1 b@@1) (_module.List.Nil_q a@@1))
 :pattern ( (|_module.List#Equal| a@@1 b@@1) (_module.List.Nil_q b@@1))
)))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| T@U) ) (! (= (DatatypeCtorId (|#_module.List.Cons| |a#4#0#0| |a#4#1#0|)) |##_module.List.Cons|)
 :pattern ( (|#_module.List.Cons| |a#4#0#0| |a#4#1#0|))
)))
(assert (forall ((|a#8#0#0| T@U) (|a#8#1#0| T@U) ) (! (= (_module.List._h0 (|#_module.List.Cons| |a#8#0#0| |a#8#1#0|)) |a#8#0#0|)
 :pattern ( (|#_module.List.Cons| |a#8#0#0| |a#8#1#0|))
)))
(assert (forall ((|a#10#0#0| T@U) (|a#10#1#0| T@U) ) (! (= (_module.List._h1 (|#_module.List.Cons| |a#10#0#0| |a#10#1#0|)) |a#10#1#0|)
 :pattern ( (|#_module.List.Cons| |a#10#0#0| |a#10#1#0|))
)))
(assert (forall ((_module.List$T@@4 T@U) ) (! (= (Tclass._module.List_0 (Tclass._module.List _module.List$T@@4)) _module.List$T@@4)
 :pattern ( (Tclass._module.List _module.List$T@@4))
)))
(assert (forall ((x@@5 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@5)) x@@5)
 :pattern ( ($Box T@@3 x@@5))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($ly@@6 T@U) (|x#0@@1| Int) (|list#0@@3| T@U) ) (!  (=> (or (|_module.__default.In#canCall| |x#0@@1| |list#0@@3|) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |list#0@@3| (Tclass._module.List TInt)))) (and (=> (not (_module.List.Nil_q |list#0@@3|)) (let ((|tl#1| (_module.List._h1 |list#0@@3|)))
(|_module.__default.In#canCall| |x#0@@1| |tl#1|))) (= (_module.__default.In ($LS $ly@@6) |x#0@@1| |list#0@@3|) (ite (_module.List.Nil_q |list#0@@3|) 0 (let ((|tl#0| (_module.List._h1 |list#0@@3|)))
(let ((|y#0| (U_2_int ($Unbox intType (_module.List._h0 |list#0@@3|)))))
(+ (ite (= |x#0@@1| |y#0|) 1 0) (_module.__default.In $ly@@6 |x#0@@1| |tl#0|))))))))
 :pattern ( (_module.__default.In ($LS $ly@@6) |x#0@@1| |list#0@@3|))
))))
(assert (forall ((|a#9#0#0| T@U) (|a#9#1#0| T@U) ) (! (< (BoxRank |a#9#0#0|) (DtRank (|#_module.List.Cons| |a#9#0#0| |a#9#1#0|)))
 :pattern ( (|#_module.List.Cons| |a#9#0#0| |a#9#1#0|))
)))
(assert (forall ((|a#11#0#0| T@U) (|a#11#1#0| T@U) ) (! (< (DtRank |a#11#1#0|) (DtRank (|#_module.List.Cons| |a#11#0#0| |a#11#1#0|)))
 :pattern ( (|#_module.List.Cons| |a#11#0#0| |a#11#1#0|))
)))
(assert (forall ((d@@4 T@U) (_module.List$T@@5 T@U) ($h@@0 T@U) ) (!  (=> (and ($IsGoodHeap $h@@0) (and (_module.List.Cons_q d@@4) ($IsAlloc DatatypeTypeType d@@4 (Tclass._module.List _module.List$T@@5) $h@@0))) ($IsAllocBox (_module.List._h0 d@@4) _module.List$T@@5 $h@@0))
 :pattern ( ($IsAllocBox (_module.List._h0 d@@4) _module.List$T@@5 $h@@0))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0 t1 t2 (MapType0Store t0 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 4)) (= (Ctor FieldType) 5)) (forall ((t0@@0 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 (MapType1Store t0@@0 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :weight 0
))) (= (Ctor BoxType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((d@@5 T@U) ) (! (= (BoxRank ($Box DatatypeTypeType d@@5)) (DtRank d@@5))
 :pattern ( (BoxRank ($Box DatatypeTypeType d@@5)))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($ly@@7 T@U) (|x#0@@2| Int) (|list#0@@4| T@U) ) (!  (=> (or (|_module.__default.In#canCall| (LitInt |x#0@@2|) (Lit DatatypeTypeType |list#0@@4|)) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |list#0@@4| (Tclass._module.List TInt)))) (and (=> (not (U_2_bool (Lit boolType (bool_2_U (_module.List.Nil_q (Lit DatatypeTypeType |list#0@@4|)))))) (let ((|tl#3@@0| (Lit DatatypeTypeType (_module.List._h1 (Lit DatatypeTypeType |list#0@@4|)))))
(|_module.__default.In#canCall| (LitInt |x#0@@2|) |tl#3@@0|))) (= (_module.__default.In ($LS $ly@@7) (LitInt |x#0@@2|) (Lit DatatypeTypeType |list#0@@4|)) (ite (_module.List.Nil_q (Lit DatatypeTypeType |list#0@@4|)) 0 (let ((|tl#2@@0| (Lit DatatypeTypeType (_module.List._h1 (Lit DatatypeTypeType |list#0@@4|)))))
(let ((|y#2| (LitInt (U_2_int ($Unbox intType (_module.List._h0 (Lit DatatypeTypeType |list#0@@4|)))))))
(+ (ite (= (LitInt |x#0@@2|) |y#2|) 1 0) (_module.__default.In ($LS $ly@@7) (LitInt |x#0@@2|) |tl#2@@0|))))))))
 :weight 3
 :pattern ( (_module.__default.In ($LS $ly@@7) (LitInt |x#0@@2|) (Lit DatatypeTypeType |list#0@@4|)))
))))
(assert (forall ((_module.List$T@@6 T@U) (bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 (Tclass._module.List _module.List$T@@6)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@0)) bx@@0) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@0) (Tclass._module.List _module.List$T@@6))))
 :pattern ( ($IsBox bx@@0 (Tclass._module.List _module.List$T@@6)))
)))
(assert (forall ((d@@6 T@U) (_module.List$T@@7 T@U) ($h@@1 T@U) ) (!  (=> (and ($IsGoodHeap $h@@1) (and (_module.List.Cons_q d@@6) ($IsAlloc DatatypeTypeType d@@6 (Tclass._module.List _module.List$T@@7) $h@@1))) ($IsAlloc DatatypeTypeType (_module.List._h1 d@@6) (Tclass._module.List _module.List$T@@7) $h@@1))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.List._h1 d@@6) (Tclass._module.List _module.List$T@@7) $h@@1))
)))
(assert (= |#_module.List.Nil| (Lit DatatypeTypeType |#_module.List.Nil|)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($ly@@8 T@U) (|m#0@@2| Int) (|n#0@@2| Int) (|list#0@@5| T@U) ) (!  (=> (or (|_module.__default.SortedRange#canCall| |m#0@@2| |n#0@@2| |list#0@@5|) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |list#0@@5| (Tclass._module.List TInt)))) (and (=> (not (_module.List.Nil_q |list#0@@5|)) (let ((|tl#1@@0| (_module.List._h1 |list#0@@5|)))
(let ((|hd#1| (U_2_int ($Unbox intType (_module.List._h0 |list#0@@5|)))))
 (=> (<= |m#0@@2| |hd#1|) (=> (<= |hd#1| |n#0@@2|) (|_module.__default.SortedRange#canCall| |hd#1| |n#0@@2| |tl#1@@0|)))))) (= (_module.__default.SortedRange ($LS $ly@@8) |m#0@@2| |n#0@@2| |list#0@@5|) (ite (_module.List.Nil_q |list#0@@5|) (<= |m#0@@2| |n#0@@2|) (let ((|tl#0@@0| (_module.List._h1 |list#0@@5|)))
(let ((|hd#0| (U_2_int ($Unbox intType (_module.List._h0 |list#0@@5|)))))
 (and (and (<= |m#0@@2| |hd#0|) (<= |hd#0| |n#0@@2|)) (_module.__default.SortedRange $ly@@8 |hd#0| |n#0@@2| |tl#0@@0|))))))))
 :pattern ( (_module.__default.SortedRange ($LS $ly@@8) |m#0@@2| |n#0@@2| |list#0@@5|))
))))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($ly@@9 T@U) (|n0#0@@2| Int) (|n1#0@@2| Int) (|n2#0@@2| Int) (|n3#0@@2| Int) (|i#0@@2| T@U) (|j#0@@2| T@U) ) (!  (=> (or (|_module.__default.append#canCall| |n0#0@@2| |n1#0@@2| |n2#0@@2| |n3#0@@2| |i#0@@2| |j#0@@2|) (and (< 2 $FunctionContextHeight) (and (and ($Is DatatypeTypeType |i#0@@2| (Tclass._module.List TInt)) ($Is DatatypeTypeType |j#0@@2| (Tclass._module.List TInt))) (and (and (and (<= |n0#0@@2| |n1#0@@2|) (<= |n1#0@@2| |n2#0@@2|)) (<= |n2#0@@2| |n3#0@@2|)) (and (_module.__default.SortedRange ($LS $LZ) |n0#0@@2| |n1#0@@2| |i#0@@2|) (_module.__default.SortedRange ($LS $LZ) |n2#0@@2| |n3#0@@2| |j#0@@2|)))))) (and (=> (not (_module.List.Nil_q |i#0@@2|)) (let ((|tl#1@@1| (_module.List._h1 |i#0@@2|)))
(let ((|hd#1@@0| (U_2_int ($Unbox intType (_module.List._h0 |i#0@@2|)))))
(|_module.__default.append#canCall| |hd#1@@0| |n1#0@@2| |n2#0@@2| |n3#0@@2| |tl#1@@1| |j#0@@2|)))) (= (_module.__default.append ($LS $ly@@9) |n0#0@@2| |n1#0@@2| |n2#0@@2| |n3#0@@2| |i#0@@2| |j#0@@2|) (ite (_module.List.Nil_q |i#0@@2|) |j#0@@2| (let ((|tl#0@@1| (_module.List._h1 |i#0@@2|)))
(let ((|hd#0@@0| (U_2_int ($Unbox intType (_module.List._h0 |i#0@@2|)))))
(|#_module.List.Cons| ($Box intType (int_2_U |hd#0@@0|)) (_module.__default.append $ly@@9 |hd#0@@0| |n1#0@@2| |n2#0@@2| |n3#0@@2| |tl#0@@1| |j#0@@2|))))))))
 :pattern ( (_module.__default.append ($LS $ly@@9) |n0#0@@2| |n1#0@@2| |n2#0@@2| |n3#0@@2| |i#0@@2| |j#0@@2|))
))))
(assert (forall ((|a#7#0#0| T@U) (|a#7#1#0| T@U) ) (! (= (|#_module.List.Cons| (Lit BoxType |a#7#0#0|) (Lit DatatypeTypeType |a#7#1#0|)) (Lit DatatypeTypeType (|#_module.List.Cons| |a#7#0#0| |a#7#1#0|)))
 :pattern ( (|#_module.List.Cons| (Lit BoxType |a#7#0#0|) (Lit DatatypeTypeType |a#7#1#0|)))
)))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((x@@7 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@7)) (Lit BoxType ($Box T@@4 x@@7)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@7)))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($ly@@10 T@U) (|x#0@@3| Int) (|list#0@@6| T@U) ) (!  (=> (or (|_module.__default.In#canCall| |x#0@@3| |list#0@@6|) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |list#0@@6| (Tclass._module.List TInt)))) (<= (LitInt 0) (_module.__default.In $ly@@10 |x#0@@3| |list#0@@6|)))
 :pattern ( (_module.__default.In $ly@@10 |x#0@@3| |list#0@@6|))
))))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($ly@@11 T@U) (|n0#0@@3| Int) (|n1#0@@3| Int) (|n2#0@@3| Int) (|n3#0@@3| Int) (|i#0@@3| T@U) (|j#0@@3| T@U) ) (!  (=> (or (|_module.__default.append#canCall| |n0#0@@3| |n1#0@@3| |n2#0@@3| |n3#0@@3| (Lit DatatypeTypeType |i#0@@3|) |j#0@@3|) (and (< 2 $FunctionContextHeight) (and (and ($Is DatatypeTypeType |i#0@@3| (Tclass._module.List TInt)) ($Is DatatypeTypeType |j#0@@3| (Tclass._module.List TInt))) (and (and (and (<= |n0#0@@3| |n1#0@@3|) (<= |n1#0@@3| |n2#0@@3|)) (<= |n2#0@@3| |n3#0@@3|)) (and (_module.__default.SortedRange ($LS $LZ) |n0#0@@3| |n1#0@@3| (Lit DatatypeTypeType |i#0@@3|)) (_module.__default.SortedRange ($LS $LZ) |n2#0@@3| |n3#0@@3| |j#0@@3|)))))) (and (=> (not (U_2_bool (Lit boolType (bool_2_U (_module.List.Nil_q (Lit DatatypeTypeType |i#0@@3|)))))) (let ((|tl#3@@1| (Lit DatatypeTypeType (_module.List._h1 (Lit DatatypeTypeType |i#0@@3|)))))
(let ((|hd#3@@0| (LitInt (U_2_int ($Unbox intType (_module.List._h0 (Lit DatatypeTypeType |i#0@@3|)))))))
(|_module.__default.append#canCall| |hd#3@@0| |n1#0@@3| |n2#0@@3| |n3#0@@3| |tl#3@@1| |j#0@@3|)))) (= (_module.__default.append ($LS $ly@@11) |n0#0@@3| |n1#0@@3| |n2#0@@3| |n3#0@@3| (Lit DatatypeTypeType |i#0@@3|) |j#0@@3|) (ite (_module.List.Nil_q (Lit DatatypeTypeType |i#0@@3|)) |j#0@@3| (let ((|tl#2@@1| (Lit DatatypeTypeType (_module.List._h1 (Lit DatatypeTypeType |i#0@@3|)))))
(let ((|hd#2@@0| (LitInt (U_2_int ($Unbox intType (_module.List._h0 (Lit DatatypeTypeType |i#0@@3|)))))))
(|#_module.List.Cons| ($Box intType (int_2_U |hd#2@@0|)) (_module.__default.append ($LS $ly@@11) |hd#2@@0| |n1#0@@3| |n2#0@@3| |n3#0@@3| |tl#2@@1| |j#0@@3|))))))))
 :weight 3
 :pattern ( (_module.__default.append ($LS $ly@@11) |n0#0@@3| |n1#0@@3| |n2#0@@3| |n3#0@@3| (Lit DatatypeTypeType |i#0@@3|) |j#0@@3|))
))))
(assert (forall ((h@@0 T@U) (v@@1 T@U) ) (! ($IsAlloc intType v@@1 TInt h@@0)
 :pattern ( ($IsAlloc intType v@@1 TInt h@@0))
)))
(assert (forall ((_module.List$T@@8 T@U) (|a#6#0#0@@0| T@U) (|a#6#1#0@@0| T@U) ($h@@2 T@U) ) (!  (=> ($IsGoodHeap $h@@2) (= ($IsAlloc DatatypeTypeType (|#_module.List.Cons| |a#6#0#0@@0| |a#6#1#0@@0|) (Tclass._module.List _module.List$T@@8) $h@@2)  (and ($IsAllocBox |a#6#0#0@@0| _module.List$T@@8 $h@@2) ($IsAlloc DatatypeTypeType |a#6#1#0@@0| (Tclass._module.List _module.List$T@@8) $h@@2))))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_module.List.Cons| |a#6#0#0@@0| |a#6#1#0@@0|) (Tclass._module.List _module.List$T@@8) $h@@2))
)))
(assert (forall ((v@@2 T@U) ) (! ($Is intType v@@2 TInt)
 :pattern ( ($Is intType v@@2 TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |n0#0@@4| () Int)
(declare-fun |n3#0@@4| () Int)
(declare-fun |n1#0@@4| () Int)
(declare-fun |n2#0@@4| () Int)
(declare-fun |i#0@@4| () T@U)
(declare-fun |j#0@@4| () T@U)
(declare-fun |_mcc#0#0| () Int)
(declare-fun |_mcc#1#0| () T@U)
(declare-fun |let#0#0#0| () T@U)
(declare-fun |tl#Z#0@0| () T@U)
(declare-fun |let#1#0#0| () Int)
(declare-fun |hd#Z#0@0| () Int)
(declare-fun $Heap () T@U)
(declare-fun |##list#2@0| () T@U)
(declare-fun |x#2@0| () Int)
(declare-fun $_ReadsFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 54) (let ((GeneratedUnifiedExit_correct  (and (=> (= (ControlFlow 0 28) (- 0 32)) (=> (|_module.__default.SortedRange#canCall| |n0#0@@4| |n3#0@@4| (_module.__default.append ($LS $LZ) |n0#0@@4| |n1#0@@4| |n2#0@@4| |n3#0@@4| |i#0@@4| |j#0@@4|)) (or (_module.__default.SortedRange ($LS $LZ) |n0#0@@4| |n3#0@@4| (_module.__default.append ($LS $LZ) |n0#0@@4| |n1#0@@4| |n2#0@@4| |n3#0@@4| |i#0@@4| |j#0@@4|)) (=> (_module.List.Nil_q (_module.__default.append ($LS $LZ) |n0#0@@4| |n1#0@@4| |n2#0@@4| |n3#0@@4| |i#0@@4| |j#0@@4|)) (<= |n0#0@@4| |n3#0@@4|))))) (=> (=> (|_module.__default.SortedRange#canCall| |n0#0@@4| |n3#0@@4| (_module.__default.append ($LS $LZ) |n0#0@@4| |n1#0@@4| |n2#0@@4| |n3#0@@4| |i#0@@4| |j#0@@4|)) (or (_module.__default.SortedRange ($LS $LZ) |n0#0@@4| |n3#0@@4| (_module.__default.append ($LS $LZ) |n0#0@@4| |n1#0@@4| |n2#0@@4| |n3#0@@4| |i#0@@4| |j#0@@4|)) (=> (_module.List.Nil_q (_module.__default.append ($LS $LZ) |n0#0@@4| |n1#0@@4| |n2#0@@4| |n3#0@@4| |i#0@@4| |j#0@@4|)) (<= |n0#0@@4| |n3#0@@4|)))) (and (=> (= (ControlFlow 0 28) (- 0 31)) (=> (|_module.__default.SortedRange#canCall| |n0#0@@4| |n3#0@@4| (_module.__default.append ($LS $LZ) |n0#0@@4| |n1#0@@4| |n2#0@@4| |n3#0@@4| |i#0@@4| |j#0@@4|)) (or (_module.__default.SortedRange ($LS $LZ) |n0#0@@4| |n3#0@@4| (_module.__default.append ($LS $LZ) |n0#0@@4| |n1#0@@4| |n2#0@@4| |n3#0@@4| |i#0@@4| |j#0@@4|)) (=> (not (_module.List.Nil_q (_module.__default.append ($LS $LZ) |n0#0@@4| |n1#0@@4| |n2#0@@4| |n3#0@@4| |i#0@@4| |j#0@@4|))) (let ((|hd#6| (U_2_int ($Unbox intType (_module.List._h0 (_module.__default.append ($LS ($LS $LZ)) |n0#0@@4| |n1#0@@4| |n2#0@@4| |n3#0@@4| |i#0@@4| |j#0@@4|))))))
(<= |n0#0@@4| |hd#6|)))))) (=> (=> (|_module.__default.SortedRange#canCall| |n0#0@@4| |n3#0@@4| (_module.__default.append ($LS $LZ) |n0#0@@4| |n1#0@@4| |n2#0@@4| |n3#0@@4| |i#0@@4| |j#0@@4|)) (or (_module.__default.SortedRange ($LS $LZ) |n0#0@@4| |n3#0@@4| (_module.__default.append ($LS $LZ) |n0#0@@4| |n1#0@@4| |n2#0@@4| |n3#0@@4| |i#0@@4| |j#0@@4|)) (=> (not (_module.List.Nil_q (_module.__default.append ($LS $LZ) |n0#0@@4| |n1#0@@4| |n2#0@@4| |n3#0@@4| |i#0@@4| |j#0@@4|))) (let ((|hd#6@@0| (U_2_int ($Unbox intType (_module.List._h0 (_module.__default.append ($LS ($LS $LZ)) |n0#0@@4| |n1#0@@4| |n2#0@@4| |n3#0@@4| |i#0@@4| |j#0@@4|))))))
(<= |n0#0@@4| |hd#6@@0|))))) (and (=> (= (ControlFlow 0 28) (- 0 30)) (=> (|_module.__default.SortedRange#canCall| |n0#0@@4| |n3#0@@4| (_module.__default.append ($LS $LZ) |n0#0@@4| |n1#0@@4| |n2#0@@4| |n3#0@@4| |i#0@@4| |j#0@@4|)) (or (_module.__default.SortedRange ($LS $LZ) |n0#0@@4| |n3#0@@4| (_module.__default.append ($LS $LZ) |n0#0@@4| |n1#0@@4| |n2#0@@4| |n3#0@@4| |i#0@@4| |j#0@@4|)) (=> (not (_module.List.Nil_q (_module.__default.append ($LS $LZ) |n0#0@@4| |n1#0@@4| |n2#0@@4| |n3#0@@4| |i#0@@4| |j#0@@4|))) (let ((|hd#6@@1| (U_2_int ($Unbox intType (_module.List._h0 (_module.__default.append ($LS ($LS $LZ)) |n0#0@@4| |n1#0@@4| |n2#0@@4| |n3#0@@4| |i#0@@4| |j#0@@4|))))))
(<= |hd#6@@1| |n3#0@@4|)))))) (=> (=> (|_module.__default.SortedRange#canCall| |n0#0@@4| |n3#0@@4| (_module.__default.append ($LS $LZ) |n0#0@@4| |n1#0@@4| |n2#0@@4| |n3#0@@4| |i#0@@4| |j#0@@4|)) (or (_module.__default.SortedRange ($LS $LZ) |n0#0@@4| |n3#0@@4| (_module.__default.append ($LS $LZ) |n0#0@@4| |n1#0@@4| |n2#0@@4| |n3#0@@4| |i#0@@4| |j#0@@4|)) (=> (not (_module.List.Nil_q (_module.__default.append ($LS $LZ) |n0#0@@4| |n1#0@@4| |n2#0@@4| |n3#0@@4| |i#0@@4| |j#0@@4|))) (let ((|hd#6@@2| (U_2_int ($Unbox intType (_module.List._h0 (_module.__default.append ($LS ($LS $LZ)) |n0#0@@4| |n1#0@@4| |n2#0@@4| |n3#0@@4| |i#0@@4| |j#0@@4|))))))
(<= |hd#6@@2| |n3#0@@4|))))) (and (=> (= (ControlFlow 0 28) (- 0 29)) (=> (|_module.__default.SortedRange#canCall| |n0#0@@4| |n3#0@@4| (_module.__default.append ($LS $LZ) |n0#0@@4| |n1#0@@4| |n2#0@@4| |n3#0@@4| |i#0@@4| |j#0@@4|)) (or (_module.__default.SortedRange ($LS $LZ) |n0#0@@4| |n3#0@@4| (_module.__default.append ($LS $LZ) |n0#0@@4| |n1#0@@4| |n2#0@@4| |n3#0@@4| |i#0@@4| |j#0@@4|)) (=> (not (_module.List.Nil_q (_module.__default.append ($LS $LZ) |n0#0@@4| |n1#0@@4| |n2#0@@4| |n3#0@@4| |i#0@@4| |j#0@@4|))) (let ((|tl#6| (_module.List._h1 (_module.__default.append ($LS ($LS $LZ)) |n0#0@@4| |n1#0@@4| |n2#0@@4| |n3#0@@4| |i#0@@4| |j#0@@4|))))
(let ((|hd#6@@3| (U_2_int ($Unbox intType (_module.List._h0 (_module.__default.append ($LS ($LS $LZ)) |n0#0@@4| |n1#0@@4| |n2#0@@4| |n3#0@@4| |i#0@@4| |j#0@@4|))))))
(_module.__default.SortedRange ($LS ($LS $LZ)) |hd#6@@3| |n3#0@@4| |tl#6|))))))) (=> (=> (|_module.__default.SortedRange#canCall| |n0#0@@4| |n3#0@@4| (_module.__default.append ($LS $LZ) |n0#0@@4| |n1#0@@4| |n2#0@@4| |n3#0@@4| |i#0@@4| |j#0@@4|)) (or (_module.__default.SortedRange ($LS $LZ) |n0#0@@4| |n3#0@@4| (_module.__default.append ($LS $LZ) |n0#0@@4| |n1#0@@4| |n2#0@@4| |n3#0@@4| |i#0@@4| |j#0@@4|)) (=> (not (_module.List.Nil_q (_module.__default.append ($LS $LZ) |n0#0@@4| |n1#0@@4| |n2#0@@4| |n3#0@@4| |i#0@@4| |j#0@@4|))) (let ((|tl#6@@0| (_module.List._h1 (_module.__default.append ($LS ($LS $LZ)) |n0#0@@4| |n1#0@@4| |n2#0@@4| |n3#0@@4| |i#0@@4| |j#0@@4|))))
(let ((|hd#6@@4| (U_2_int ($Unbox intType (_module.List._h0 (_module.__default.append ($LS ($LS $LZ)) |n0#0@@4| |n1#0@@4| |n2#0@@4| |n3#0@@4| |i#0@@4| |j#0@@4|))))))
(_module.__default.SortedRange ($LS ($LS $LZ)) |hd#6@@4| |n3#0@@4| |tl#6@@0|)))))) (=> (= (ControlFlow 0 28) (- 0 27)) (forall ((|x#1| Int) ) (! (= (_module.__default.In ($LS ($LS $LZ)) |x#1| (_module.__default.append ($LS ($LS $LZ)) |n0#0@@4| |n1#0@@4| |n2#0@@4| |n3#0@@4| |i#0@@4| |j#0@@4|)) (+ (_module.__default.In ($LS ($LS $LZ)) |x#1| |i#0@@4|) (_module.__default.In ($LS ($LS $LZ)) |x#1| |j#0@@4|)))
 :pattern ( (_module.__default.In ($LS ($LS $LZ)) |x#1| |j#0@@4|))
 :pattern ( (_module.__default.In ($LS ($LS $LZ)) |x#1| |i#0@@4|))
 :pattern ( (_module.__default.In ($LS ($LS $LZ)) |x#1| (_module.__default.append ($LS ($LS $LZ)) |n0#0@@4| |n1#0@@4| |n2#0@@4| |n3#0@@4| |i#0@@4| |j#0@@4|)))
)))))))))))))
(let ((anon16_Then_correct  (=> (and (= |i#0@@4| (|#_module.List.Cons| ($Box intType (int_2_U |_mcc#0#0|)) |_mcc#1#0|)) ($Is DatatypeTypeType |_mcc#1#0| (Tclass._module.List TInt))) (=> (and (and (= |let#0#0#0| |_mcc#1#0|) ($Is DatatypeTypeType |let#0#0#0| (Tclass._module.List TInt))) (and (= |tl#Z#0@0| |let#0#0#0|) (= |let#1#0#0| |_mcc#0#0|))) (=> (and (and (and ($Is intType (int_2_U |let#1#0#0|) TInt) (= |hd#Z#0@0| |let#1#0#0|)) (and ($IsAlloc intType (int_2_U |hd#Z#0@0|) TInt $Heap) ($IsAlloc intType (int_2_U |n1#0@@4|) TInt $Heap))) (and (and ($IsAlloc intType (int_2_U |n2#0@@4|) TInt $Heap) ($IsAlloc intType (int_2_U |n3#0@@4|) TInt $Heap)) (and ($IsAlloc DatatypeTypeType |tl#Z#0@0| (Tclass._module.List TInt) $Heap) ($IsAlloc DatatypeTypeType |j#0@@4| (Tclass._module.List TInt) $Heap)))) (and (=> (= (ControlFlow 0 34) (- 0 46)) (<= |hd#Z#0@0| |n1#0@@4|)) (and (=> (= (ControlFlow 0 34) (- 0 45)) (<= |n1#0@@4| |n2#0@@4|)) (and (=> (= (ControlFlow 0 34) (- 0 44)) (<= |n2#0@@4| |n3#0@@4|)) (=> (and (and (<= |hd#Z#0@0| |n1#0@@4|) (<= |n1#0@@4| |n2#0@@4|)) (<= |n2#0@@4| |n3#0@@4|)) (and (=> (= (ControlFlow 0 34) (- 0 43)) (=> (|_module.__default.SortedRange#canCall| |hd#Z#0@0| |n1#0@@4| |tl#Z#0@0|) (or (_module.__default.SortedRange ($LS $LZ) |hd#Z#0@0| |n1#0@@4| |tl#Z#0@0|) (=> (_module.List.Nil_q |tl#Z#0@0|) (<= |hd#Z#0@0| |n1#0@@4|))))) (and (=> (= (ControlFlow 0 34) (- 0 42)) (=> (|_module.__default.SortedRange#canCall| |hd#Z#0@0| |n1#0@@4| |tl#Z#0@0|) (or (_module.__default.SortedRange ($LS $LZ) |hd#Z#0@0| |n1#0@@4| |tl#Z#0@0|) (=> (not (_module.List.Nil_q |tl#Z#0@0|)) (let ((|hd#16| (U_2_int ($Unbox intType (_module.List._h0 |tl#Z#0@0|)))))
(<= |hd#Z#0@0| |hd#16|)))))) (and (=> (= (ControlFlow 0 34) (- 0 41)) (=> (|_module.__default.SortedRange#canCall| |hd#Z#0@0| |n1#0@@4| |tl#Z#0@0|) (or (_module.__default.SortedRange ($LS $LZ) |hd#Z#0@0| |n1#0@@4| |tl#Z#0@0|) (=> (not (_module.List.Nil_q |tl#Z#0@0|)) (let ((|hd#16@@0| (U_2_int ($Unbox intType (_module.List._h0 |tl#Z#0@0|)))))
(<= |hd#16@@0| |n1#0@@4|)))))) (and (=> (= (ControlFlow 0 34) (- 0 40)) (=> (|_module.__default.SortedRange#canCall| |hd#Z#0@0| |n1#0@@4| |tl#Z#0@0|) (or (_module.__default.SortedRange ($LS $LZ) |hd#Z#0@0| |n1#0@@4| |tl#Z#0@0|) (=> (not (_module.List.Nil_q |tl#Z#0@0|)) (let ((|tl#16| (_module.List._h1 |tl#Z#0@0|)))
(let ((|hd#16@@1| (U_2_int ($Unbox intType (_module.List._h0 |tl#Z#0@0|)))))
(_module.__default.SortedRange ($LS ($LS $LZ)) |hd#16@@1| |n1#0@@4| |tl#16|))))))) (and (=> (= (ControlFlow 0 34) (- 0 39)) (=> (|_module.__default.SortedRange#canCall| |n2#0@@4| |n3#0@@4| |j#0@@4|) (or (_module.__default.SortedRange ($LS $LZ) |n2#0@@4| |n3#0@@4| |j#0@@4|) (=> (_module.List.Nil_q |j#0@@4|) (<= |n2#0@@4| |n3#0@@4|))))) (and (=> (= (ControlFlow 0 34) (- 0 38)) (=> (|_module.__default.SortedRange#canCall| |n2#0@@4| |n3#0@@4| |j#0@@4|) (or (_module.__default.SortedRange ($LS $LZ) |n2#0@@4| |n3#0@@4| |j#0@@4|) (=> (not (_module.List.Nil_q |j#0@@4|)) (let ((|hd#18| (U_2_int ($Unbox intType (_module.List._h0 |j#0@@4|)))))
(<= |n2#0@@4| |hd#18|)))))) (and (=> (= (ControlFlow 0 34) (- 0 37)) (=> (|_module.__default.SortedRange#canCall| |n2#0@@4| |n3#0@@4| |j#0@@4|) (or (_module.__default.SortedRange ($LS $LZ) |n2#0@@4| |n3#0@@4| |j#0@@4|) (=> (not (_module.List.Nil_q |j#0@@4|)) (let ((|hd#18@@0| (U_2_int ($Unbox intType (_module.List._h0 |j#0@@4|)))))
(<= |hd#18@@0| |n3#0@@4|)))))) (and (=> (= (ControlFlow 0 34) (- 0 36)) (=> (|_module.__default.SortedRange#canCall| |n2#0@@4| |n3#0@@4| |j#0@@4|) (or (_module.__default.SortedRange ($LS $LZ) |n2#0@@4| |n3#0@@4| |j#0@@4|) (=> (not (_module.List.Nil_q |j#0@@4|)) (let ((|tl#18| (_module.List._h1 |j#0@@4|)))
(let ((|hd#18@@1| (U_2_int ($Unbox intType (_module.List._h0 |j#0@@4|)))))
(_module.__default.SortedRange ($LS ($LS $LZ)) |hd#18@@1| |n3#0@@4| |tl#18|))))))) (=> (and (_module.__default.SortedRange ($LS $LZ) |hd#Z#0@0| |n1#0@@4| |tl#Z#0@0|) (_module.__default.SortedRange ($LS $LZ) |n2#0@@4| |n3#0@@4| |j#0@@4|)) (and (=> (= (ControlFlow 0 34) (- 0 35)) (< (DtRank |tl#Z#0@0|) (DtRank |i#0@@4|))) (=> (< (DtRank |tl#Z#0@0|) (DtRank |i#0@@4|)) (=> (|_module.__default.append#canCall| |hd#Z#0@0| |n1#0@@4| |n2#0@@4| |n3#0@@4| |tl#Z#0@0| |j#0@@4|) (=> (and (and (= (_module.__default.append ($LS $LZ) |n0#0@@4| |n1#0@@4| |n2#0@@4| |n3#0@@4| |i#0@@4| |j#0@@4|) (|#_module.List.Cons| ($Box intType (int_2_U |hd#Z#0@0|)) (_module.__default.append ($LS $LZ) |hd#Z#0@0| |n1#0@@4| |n2#0@@4| |n3#0@@4| |tl#Z#0@0| |j#0@@4|))) (|_module.__default.append#canCall| |hd#Z#0@0| |n1#0@@4| |n2#0@@4| |n3#0@@4| |tl#Z#0@0| |j#0@@4|)) (and ($Is DatatypeTypeType (_module.__default.append ($LS $LZ) |n0#0@@4| |n1#0@@4| |n2#0@@4| |n3#0@@4| |i#0@@4| |j#0@@4|) (Tclass._module.List TInt)) (= (ControlFlow 0 34) 28))) GeneratedUnifiedExit_correct))))))))))))))))))))))
(let ((anon15_Then_correct  (=> (and (and (= |i#0@@4| |#_module.List.Nil|) (= (_module.__default.append ($LS $LZ) |n0#0@@4| |n1#0@@4| |n2#0@@4| |n3#0@@4| |i#0@@4| |j#0@@4|) |j#0@@4|)) (and ($Is DatatypeTypeType (_module.__default.append ($LS $LZ) |n0#0@@4| |n1#0@@4| |n2#0@@4| |n3#0@@4| |i#0@@4| |j#0@@4|) (Tclass._module.List TInt)) (= (ControlFlow 0 33) 28))) GeneratedUnifiedExit_correct)))
(let ((anon16_Else_correct true))
(let ((anon15_Else_correct  (=> (or (not (= |i#0@@4| |#_module.List.Nil|)) (not true)) (and (=> (= (ControlFlow 0 47) 34) anon16_Then_correct) (=> (= (ControlFlow 0 47) 26) anon16_Else_correct)))))
(let ((anon14_Then_correct  (=> ($Is DatatypeTypeType (_module.__default.append ($LS $LZ) |n0#0@@4| |n1#0@@4| |n2#0@@4| |n3#0@@4| |i#0@@4| |j#0@@4|) (Tclass._module.List TInt)) (=> (and (and (and ($IsAlloc intType (int_2_U |n0#0@@4|) TInt $Heap) ($IsAlloc intType (int_2_U |n3#0@@4|) TInt $Heap)) (and ($IsAlloc intType (int_2_U |n0#0@@4|) TInt $Heap) ($IsAlloc intType (int_2_U |n1#0@@4|) TInt $Heap))) (and (and ($IsAlloc intType (int_2_U |n2#0@@4|) TInt $Heap) ($IsAlloc intType (int_2_U |n3#0@@4|) TInt $Heap)) (and ($IsAlloc DatatypeTypeType |i#0@@4| (Tclass._module.List TInt) $Heap) ($IsAlloc DatatypeTypeType |j#0@@4| (Tclass._module.List TInt) $Heap)))) (and (=> (= (ControlFlow 0 2) (- 0 25)) (<= |n0#0@@4| |n1#0@@4|)) (and (=> (= (ControlFlow 0 2) (- 0 24)) (<= |n1#0@@4| |n2#0@@4|)) (and (=> (= (ControlFlow 0 2) (- 0 23)) (<= |n2#0@@4| |n3#0@@4|)) (=> (and (and (<= |n0#0@@4| |n1#0@@4|) (<= |n1#0@@4| |n2#0@@4|)) (<= |n2#0@@4| |n3#0@@4|)) (and (=> (= (ControlFlow 0 2) (- 0 22)) (=> (|_module.__default.SortedRange#canCall| |n0#0@@4| |n1#0@@4| |i#0@@4|) (or (_module.__default.SortedRange ($LS $LZ) |n0#0@@4| |n1#0@@4| |i#0@@4|) (=> (_module.List.Nil_q |i#0@@4|) (<= |n0#0@@4| |n1#0@@4|))))) (and (=> (= (ControlFlow 0 2) (- 0 21)) (=> (|_module.__default.SortedRange#canCall| |n0#0@@4| |n1#0@@4| |i#0@@4|) (or (_module.__default.SortedRange ($LS $LZ) |n0#0@@4| |n1#0@@4| |i#0@@4|) (=> (not (_module.List.Nil_q |i#0@@4|)) (let ((|hd#8| (U_2_int ($Unbox intType (_module.List._h0 |i#0@@4|)))))
(<= |n0#0@@4| |hd#8|)))))) (and (=> (= (ControlFlow 0 2) (- 0 20)) (=> (|_module.__default.SortedRange#canCall| |n0#0@@4| |n1#0@@4| |i#0@@4|) (or (_module.__default.SortedRange ($LS $LZ) |n0#0@@4| |n1#0@@4| |i#0@@4|) (=> (not (_module.List.Nil_q |i#0@@4|)) (let ((|hd#8@@0| (U_2_int ($Unbox intType (_module.List._h0 |i#0@@4|)))))
(<= |hd#8@@0| |n1#0@@4|)))))) (and (=> (= (ControlFlow 0 2) (- 0 19)) (=> (|_module.__default.SortedRange#canCall| |n0#0@@4| |n1#0@@4| |i#0@@4|) (or (_module.__default.SortedRange ($LS $LZ) |n0#0@@4| |n1#0@@4| |i#0@@4|) (=> (not (_module.List.Nil_q |i#0@@4|)) (let ((|tl#8| (_module.List._h1 |i#0@@4|)))
(let ((|hd#8@@1| (U_2_int ($Unbox intType (_module.List._h0 |i#0@@4|)))))
(_module.__default.SortedRange ($LS ($LS $LZ)) |hd#8@@1| |n1#0@@4| |tl#8|))))))) (and (=> (= (ControlFlow 0 2) (- 0 18)) (=> (|_module.__default.SortedRange#canCall| |n2#0@@4| |n3#0@@4| |j#0@@4|) (or (_module.__default.SortedRange ($LS $LZ) |n2#0@@4| |n3#0@@4| |j#0@@4|) (=> (_module.List.Nil_q |j#0@@4|) (<= |n2#0@@4| |n3#0@@4|))))) (and (=> (= (ControlFlow 0 2) (- 0 17)) (=> (|_module.__default.SortedRange#canCall| |n2#0@@4| |n3#0@@4| |j#0@@4|) (or (_module.__default.SortedRange ($LS $LZ) |n2#0@@4| |n3#0@@4| |j#0@@4|) (=> (not (_module.List.Nil_q |j#0@@4|)) (let ((|hd#10| (U_2_int ($Unbox intType (_module.List._h0 |j#0@@4|)))))
(<= |n2#0@@4| |hd#10|)))))) (and (=> (= (ControlFlow 0 2) (- 0 16)) (=> (|_module.__default.SortedRange#canCall| |n2#0@@4| |n3#0@@4| |j#0@@4|) (or (_module.__default.SortedRange ($LS $LZ) |n2#0@@4| |n3#0@@4| |j#0@@4|) (=> (not (_module.List.Nil_q |j#0@@4|)) (let ((|hd#10@@0| (U_2_int ($Unbox intType (_module.List._h0 |j#0@@4|)))))
(<= |hd#10@@0| |n3#0@@4|)))))) (and (=> (= (ControlFlow 0 2) (- 0 15)) (=> (|_module.__default.SortedRange#canCall| |n2#0@@4| |n3#0@@4| |j#0@@4|) (or (_module.__default.SortedRange ($LS $LZ) |n2#0@@4| |n3#0@@4| |j#0@@4|) (=> (not (_module.List.Nil_q |j#0@@4|)) (let ((|tl#10| (_module.List._h1 |j#0@@4|)))
(let ((|hd#10@@1| (U_2_int ($Unbox intType (_module.List._h0 |j#0@@4|)))))
(_module.__default.SortedRange ($LS ($LS $LZ)) |hd#10@@1| |n3#0@@4| |tl#10|))))))) (=> (and (_module.__default.SortedRange ($LS $LZ) |n0#0@@4| |n1#0@@4| |i#0@@4|) (_module.__default.SortedRange ($LS $LZ) |n2#0@@4| |n3#0@@4| |j#0@@4|)) (and (=> (= (ControlFlow 0 2) (- 0 14)) (or (and (and (and (and (and (= |n0#0@@4| |n0#0@@4|) (= |n1#0@@4| |n1#0@@4|)) (= |n2#0@@4| |n2#0@@4|)) (= |n3#0@@4| |n3#0@@4|)) (|_module.List#Equal| |i#0@@4| |i#0@@4|)) (|_module.List#Equal| |j#0@@4| |j#0@@4|)) (< (DtRank |i#0@@4|) (DtRank |i#0@@4|)))) (=> (or (and (and (and (and (and (= |n0#0@@4| |n0#0@@4|) (= |n1#0@@4| |n1#0@@4|)) (= |n2#0@@4| |n2#0@@4|)) (= |n3#0@@4| |n3#0@@4|)) (|_module.List#Equal| |i#0@@4| |i#0@@4|)) (|_module.List#Equal| |j#0@@4| |j#0@@4|)) (< (DtRank |i#0@@4|) (DtRank |i#0@@4|))) (=> (and (and (or (and (and (and (and (and (= |n0#0@@4| |n0#0@@4|) (= |n1#0@@4| |n1#0@@4|)) (= |n2#0@@4| |n2#0@@4|)) (= |n3#0@@4| |n3#0@@4|)) (|_module.List#Equal| |i#0@@4| |i#0@@4|)) (|_module.List#Equal| |j#0@@4| |j#0@@4|)) (|_module.__default.append#canCall| |n0#0@@4| |n1#0@@4| |n2#0@@4| |n3#0@@4| |i#0@@4| |j#0@@4|)) (= |##list#2@0| (_module.__default.append ($LS $LZ) |n0#0@@4| |n1#0@@4| |n2#0@@4| |n3#0@@4| |i#0@@4| |j#0@@4|))) (and ($IsAlloc DatatypeTypeType |##list#2@0| (Tclass._module.List TInt) $Heap) (|_module.__default.SortedRange#canCall| |n0#0@@4| |n3#0@@4| (_module.__default.append ($LS $LZ) |n0#0@@4| |n1#0@@4| |n2#0@@4| |n3#0@@4| |i#0@@4| |j#0@@4|)))) (=> (and (and (and (_module.__default.SortedRange ($LS $LZ) |n0#0@@4| |n3#0@@4| (_module.__default.append ($LS $LZ) |n0#0@@4| |n1#0@@4| |n2#0@@4| |n3#0@@4| |i#0@@4| |j#0@@4|)) ($IsAlloc intType (int_2_U |x#2@0|) TInt $Heap)) (and ($IsAlloc intType (int_2_U |n0#0@@4|) TInt $Heap) ($IsAlloc intType (int_2_U |n1#0@@4|) TInt $Heap))) (and (and ($IsAlloc intType (int_2_U |n2#0@@4|) TInt $Heap) ($IsAlloc intType (int_2_U |n3#0@@4|) TInt $Heap)) (and ($IsAlloc DatatypeTypeType |i#0@@4| (Tclass._module.List TInt) $Heap) ($IsAlloc DatatypeTypeType |j#0@@4| (Tclass._module.List TInt) $Heap)))) (and (=> (= (ControlFlow 0 2) (- 0 13)) (<= |n0#0@@4| |n1#0@@4|)) (and (=> (= (ControlFlow 0 2) (- 0 12)) (<= |n1#0@@4| |n2#0@@4|)) (and (=> (= (ControlFlow 0 2) (- 0 11)) (<= |n2#0@@4| |n3#0@@4|)) (=> (and (and (<= |n0#0@@4| |n1#0@@4|) (<= |n1#0@@4| |n2#0@@4|)) (<= |n2#0@@4| |n3#0@@4|)) (and (=> (= (ControlFlow 0 2) (- 0 10)) (=> (|_module.__default.SortedRange#canCall| |n0#0@@4| |n1#0@@4| |i#0@@4|) (or (_module.__default.SortedRange ($LS $LZ) |n0#0@@4| |n1#0@@4| |i#0@@4|) (=> (_module.List.Nil_q |i#0@@4|) (<= |n0#0@@4| |n1#0@@4|))))) (and (=> (= (ControlFlow 0 2) (- 0 9)) (=> (|_module.__default.SortedRange#canCall| |n0#0@@4| |n1#0@@4| |i#0@@4|) (or (_module.__default.SortedRange ($LS $LZ) |n0#0@@4| |n1#0@@4| |i#0@@4|) (=> (not (_module.List.Nil_q |i#0@@4|)) (let ((|hd#12| (U_2_int ($Unbox intType (_module.List._h0 |i#0@@4|)))))
(<= |n0#0@@4| |hd#12|)))))) (and (=> (= (ControlFlow 0 2) (- 0 8)) (=> (|_module.__default.SortedRange#canCall| |n0#0@@4| |n1#0@@4| |i#0@@4|) (or (_module.__default.SortedRange ($LS $LZ) |n0#0@@4| |n1#0@@4| |i#0@@4|) (=> (not (_module.List.Nil_q |i#0@@4|)) (let ((|hd#12@@0| (U_2_int ($Unbox intType (_module.List._h0 |i#0@@4|)))))
(<= |hd#12@@0| |n1#0@@4|)))))) (and (=> (= (ControlFlow 0 2) (- 0 7)) (=> (|_module.__default.SortedRange#canCall| |n0#0@@4| |n1#0@@4| |i#0@@4|) (or (_module.__default.SortedRange ($LS $LZ) |n0#0@@4| |n1#0@@4| |i#0@@4|) (=> (not (_module.List.Nil_q |i#0@@4|)) (let ((|tl#12| (_module.List._h1 |i#0@@4|)))
(let ((|hd#12@@1| (U_2_int ($Unbox intType (_module.List._h0 |i#0@@4|)))))
(_module.__default.SortedRange ($LS ($LS $LZ)) |hd#12@@1| |n1#0@@4| |tl#12|))))))) (and (=> (= (ControlFlow 0 2) (- 0 6)) (=> (|_module.__default.SortedRange#canCall| |n2#0@@4| |n3#0@@4| |j#0@@4|) (or (_module.__default.SortedRange ($LS $LZ) |n2#0@@4| |n3#0@@4| |j#0@@4|) (=> (_module.List.Nil_q |j#0@@4|) (<= |n2#0@@4| |n3#0@@4|))))) (and (=> (= (ControlFlow 0 2) (- 0 5)) (=> (|_module.__default.SortedRange#canCall| |n2#0@@4| |n3#0@@4| |j#0@@4|) (or (_module.__default.SortedRange ($LS $LZ) |n2#0@@4| |n3#0@@4| |j#0@@4|) (=> (not (_module.List.Nil_q |j#0@@4|)) (let ((|hd#14| (U_2_int ($Unbox intType (_module.List._h0 |j#0@@4|)))))
(<= |n2#0@@4| |hd#14|)))))) (and (=> (= (ControlFlow 0 2) (- 0 4)) (=> (|_module.__default.SortedRange#canCall| |n2#0@@4| |n3#0@@4| |j#0@@4|) (or (_module.__default.SortedRange ($LS $LZ) |n2#0@@4| |n3#0@@4| |j#0@@4|) (=> (not (_module.List.Nil_q |j#0@@4|)) (let ((|hd#14@@0| (U_2_int ($Unbox intType (_module.List._h0 |j#0@@4|)))))
(<= |hd#14@@0| |n3#0@@4|)))))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (=> (|_module.__default.SortedRange#canCall| |n2#0@@4| |n3#0@@4| |j#0@@4|) (or (_module.__default.SortedRange ($LS $LZ) |n2#0@@4| |n3#0@@4| |j#0@@4|) (=> (not (_module.List.Nil_q |j#0@@4|)) (let ((|tl#14| (_module.List._h1 |j#0@@4|)))
(let ((|hd#14@@1| (U_2_int ($Unbox intType (_module.List._h0 |j#0@@4|)))))
(_module.__default.SortedRange ($LS ($LS $LZ)) |hd#14@@1| |n3#0@@4| |tl#14|))))))) (=> (and (and (_module.__default.SortedRange ($LS $LZ) |n0#0@@4| |n1#0@@4| |i#0@@4|) (_module.__default.SortedRange ($LS $LZ) |n2#0@@4| |n3#0@@4| |j#0@@4|)) (= (ControlFlow 0 2) (- 0 1))) (or (and (and (and (and (and (= |n0#0@@4| |n0#0@@4|) (= |n1#0@@4| |n1#0@@4|)) (= |n2#0@@4| |n2#0@@4|)) (= |n3#0@@4| |n3#0@@4|)) (|_module.List#Equal| |i#0@@4| |i#0@@4|)) (|_module.List#Equal| |j#0@@4| |j#0@@4|)) (< (DtRank |i#0@@4|) (DtRank |i#0@@4|)))))))))))))))))))))))))))))))))))))
(let ((anon5_correct  (=> (and (and (and (and (<= |n0#0@@4| |n1#0@@4|) (<= |n1#0@@4| |n2#0@@4|)) (<= |n2#0@@4| |n3#0@@4|)) (and ($IsAlloc intType (int_2_U |n0#0@@4|) TInt $Heap) ($IsAlloc intType (int_2_U |n1#0@@4|) TInt $Heap))) (and (and (and ($IsAlloc DatatypeTypeType |i#0@@4| (Tclass._module.List TInt) $Heap) (|_module.__default.SortedRange#canCall| |n0#0@@4| |n1#0@@4| |i#0@@4|)) (and (_module.__default.SortedRange ($LS $LZ) |n0#0@@4| |n1#0@@4| |i#0@@4|) ($IsAlloc intType (int_2_U |n2#0@@4|) TInt $Heap))) (and (and ($IsAlloc intType (int_2_U |n3#0@@4|) TInt $Heap) ($IsAlloc DatatypeTypeType |j#0@@4| (Tclass._module.List TInt) $Heap)) (and (|_module.__default.SortedRange#canCall| |n2#0@@4| |n3#0@@4| |j#0@@4|) (_module.__default.SortedRange ($LS $LZ) |n2#0@@4| |n3#0@@4| |j#0@@4|))))) (and (and (=> (= (ControlFlow 0 48) 2) anon14_Then_correct) (=> (= (ControlFlow 0 48) 33) anon15_Then_correct)) (=> (= (ControlFlow 0 48) 47) anon15_Else_correct)))))
(let ((anon13_Else_correct  (=> (and (not (and (<= |n0#0@@4| |n1#0@@4|) (<= |n1#0@@4| |n2#0@@4|))) (= (ControlFlow 0 50) 48)) anon5_correct)))
(let ((anon13_Then_correct  (=> (and (and (<= |n0#0@@4| |n1#0@@4|) (<= |n1#0@@4| |n2#0@@4|)) (= (ControlFlow 0 49) 48)) anon5_correct)))
(let ((anon12_Else_correct  (=> (< |n1#0@@4| |n0#0@@4|) (and (=> (= (ControlFlow 0 52) 49) anon13_Then_correct) (=> (= (ControlFlow 0 52) 50) anon13_Else_correct)))))
(let ((anon12_Then_correct  (=> (<= |n0#0@@4| |n1#0@@4|) (and (=> (= (ControlFlow 0 51) 49) anon13_Then_correct) (=> (= (ControlFlow 0 51) 50) anon13_Else_correct)))))
(let ((anon0_correct  (=> (= $_ReadsFrame@0 (|lambda#0| null $Heap alloc false)) (and (=> (= (ControlFlow 0 53) 51) anon12_Then_correct) (=> (= (ControlFlow 0 53) 52) anon12_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (=> (and (and ($Is DatatypeTypeType |i#0@@4| (Tclass._module.List TInt)) ($Is DatatypeTypeType |j#0@@4| (Tclass._module.List TInt))) (and (= 2 $FunctionContextHeight) (= (ControlFlow 0 54) 53))) anon0_correct))))
PreconditionGeneratedEntry_correct))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
