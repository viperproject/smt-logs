(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 (T@U) T@U)
(declare-fun $generated@@22 () Int)
(declare-fun $generated@@23 (Int) Int)
(declare-fun $generated@@24 (Int) Int)
(declare-fun $generated@@25 (Int) Bool)
(declare-fun $generated@@28 (T@U) Int)
(declare-fun $generated@@29 () T@U)
(declare-fun $generated@@31 (T@T T@U) T@U)
(declare-fun $generated@@34 (T@T T@U T@U) Bool)
(declare-fun $generated@@35 () T@T)
(declare-fun $generated@@36 (T@U T@U) T@U)
(declare-fun $generated@@37 (T@U) T@U)
(declare-fun $generated@@38 (T@U T@U) Bool)
(declare-fun $generated@@42 (T@T T@U) T@U)
(declare-fun $generated@@43 (T@T T@U) T@U)
(declare-fun $generated@@48 (T@U T@U T@U) Bool)
(declare-fun $generated@@49 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@54 (T@U Int) T@U)
(declare-fun $generated@@58 (Int) Int)
(declare-fun $generated@@59 (Int) Bool)
(declare-fun $generated@@62 () T@T)
(declare-fun $generated@@72 (T@U) T@U)
(declare-fun $generated@@79 (Int) T@U)
(declare-fun $generated@@80 (T@U) Int)
(declare-fun $generated@@82 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@83 () T@T)
(declare-fun $generated@@84 () T@T)
(declare-fun $generated@@85 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@86 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@87 () T@T)
(declare-fun $generated@@88 (T@T T@T) T@T)
(declare-fun $generated@@89 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@90 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@91 (T@T) T@T)
(declare-fun $generated@@92 (T@T) T@T)
(declare-fun $generated@@141 (T@U) T@U)
(declare-fun $generated@@142 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert (= ($generated@@21 $generated) $generated@@1))
(assert (= ($generated@@21 $generated@@0) $generated@@2))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@26 Int) ) (!  (=> (or ($generated@@25 ($generated@@24 $generated@@26)) (< 0 $generated@@22)) (= ($generated@@23 ($generated@@24 $generated@@26)) (let (($generated@@27 ($generated@@24 (+ $generated@@26 $generated@@26))))
($generated@@24 (- $generated@@27 $generated@@26)))))
 :weight 3
 :pattern ( ($generated@@23 ($generated@@24 $generated@@26)))
))))
(assert (= ($generated@@28 $generated@@29) 0))
(assert (forall (($generated@@30 Int) ) (! (= ($generated@@24 $generated@@30) $generated@@30)
 :pattern ( ($generated@@24 $generated@@30))
)))
(assert (forall (($generated@@32 T@U) ($generated@@33 T@T) ) (! (= ($generated@@31 $generated@@33 $generated@@32) $generated@@32)
 :pattern ( ($generated@@31 $generated@@33 $generated@@32))
)))
(assert (= ($generated@@5 $generated@@35) 3))
(assert (forall (($generated@@39 T@U) ($generated@@40 T@U) ($generated@@41 T@U) ) (!  (=> (and ($generated@@34 $generated@@35 $generated@@39 ($generated@@37 $generated@@41)) ($generated@@38 $generated@@40 $generated@@41)) ($generated@@34 $generated@@35 ($generated@@36 $generated@@39 $generated@@40) ($generated@@37 $generated@@41)))
 :pattern ( ($generated@@34 $generated@@35 ($generated@@36 $generated@@39 $generated@@40) ($generated@@37 $generated@@41)))
)))
(assert (forall (($generated@@44 T@U) ($generated@@45 T@T) ) (! (= ($generated@@43 $generated@@45 ($generated@@42 $generated@@45 $generated@@44)) $generated@@44)
 :pattern ( ($generated@@42 $generated@@45 $generated@@44))
)))
(assert (forall (($generated@@46 T@U) ($generated@@47 T@U) ) (! (= ($generated@@28 ($generated@@36 $generated@@46 $generated@@47)) (+ 1 ($generated@@28 $generated@@46)))
 :pattern ( ($generated@@36 $generated@@46 $generated@@47))
)))
(assert (forall (($generated@@50 T@U) ($generated@@51 T@U) ($generated@@52 T@U) ($generated@@53 T@T) ) (! (= ($generated@@48 ($generated@@43 $generated@@53 $generated@@50) $generated@@51 $generated@@52) ($generated@@49 $generated@@53 $generated@@50 $generated@@51 $generated@@52))
 :pattern ( ($generated@@48 ($generated@@43 $generated@@53 $generated@@50) $generated@@51 $generated@@52))
)))
(assert (forall (($generated@@55 T@U) ($generated@@56 Int) ($generated@@57 T@U) ) (!  (and (=> (= $generated@@56 ($generated@@28 $generated@@55)) (= ($generated@@54 ($generated@@36 $generated@@55 $generated@@57) $generated@@56) $generated@@57)) (=> (or (not (= $generated@@56 ($generated@@28 $generated@@55))) (not true)) (= ($generated@@54 ($generated@@36 $generated@@55 $generated@@57) $generated@@56) ($generated@@54 $generated@@55 $generated@@56))))
 :pattern ( ($generated@@54 ($generated@@36 $generated@@55 $generated@@57) $generated@@56))
)))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@60 Int) ) (!  (=> (or ($generated@@59 $generated@@60) (and (< 0 $generated@@22) (< $generated@@60 2400))) (= ($generated@@58 $generated@@60) $generated@@60))
 :pattern ( ($generated@@58 $generated@@60))
))))
(assert (forall (($generated@@61 T@U) ) (!  (=> ($generated@@38 $generated@@61 $generated@@0) (and (= ($generated@@43 $generated@@7 ($generated@@42 $generated@@7 $generated@@61)) $generated@@61) ($generated@@34 $generated@@7 ($generated@@42 $generated@@7 $generated@@61) $generated@@0)))
 :pattern ( ($generated@@38 $generated@@61 $generated@@0))
)))
(assert (= ($generated@@5 $generated@@62) 4))
(assert (forall (($generated@@63 T@U) ) (!  (=> ($generated@@38 $generated@@63 $generated) (and (= ($generated@@43 $generated@@62 ($generated@@42 $generated@@62 $generated@@63)) $generated@@63) ($generated@@34 $generated@@62 ($generated@@42 $generated@@62 $generated@@63) $generated)))
 :pattern ( ($generated@@38 $generated@@63 $generated))
)))
(assert (forall (($generated@@64 T@U) ($generated@@65 T@U) ($generated@@66 T@T) ) (! (= ($generated@@38 ($generated@@43 $generated@@66 $generated@@64) $generated@@65) ($generated@@34 $generated@@66 $generated@@64 $generated@@65))
 :pattern ( ($generated@@38 ($generated@@43 $generated@@66 $generated@@64) $generated@@65))
)))
(assert (forall (($generated@@67 T@U) ) (! (<= 0 ($generated@@28 $generated@@67))
 :pattern ( ($generated@@28 $generated@@67))
)))
(assert (forall (($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ) (! (= ($generated@@49 $generated@@35 $generated@@68 ($generated@@37 $generated@@69) $generated@@70) (forall (($generated@@71 Int) ) (!  (=> (and (<= 0 $generated@@71) (< $generated@@71 ($generated@@28 $generated@@68))) ($generated@@48 ($generated@@54 $generated@@68 $generated@@71) $generated@@69 $generated@@70))
 :pattern ( ($generated@@54 $generated@@68 $generated@@71))
)))
 :pattern ( ($generated@@49 $generated@@35 $generated@@68 ($generated@@37 $generated@@69) $generated@@70))
)))
(assert (forall (($generated@@73 T@U) ) (! (= ($generated@@72 ($generated@@37 $generated@@73)) $generated@@73)
 :pattern ( ($generated@@37 $generated@@73))
)))
(assert (forall (($generated@@74 T@U) ) (! (= ($generated@@21 ($generated@@37 $generated@@74)) $generated@@3)
 :pattern ( ($generated@@37 $generated@@74))
)))
(assert (forall (($generated@@75 T@U) ($generated@@76 T@T) ) (! (= ($generated@@42 $generated@@76 ($generated@@43 $generated@@76 $generated@@75)) $generated@@75)
 :pattern ( ($generated@@43 $generated@@76 $generated@@75))
)))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@77 Int) ) (!  (=> (or ($generated@@25 $generated@@77) (< 0 $generated@@22)) (= ($generated@@23 $generated@@77) (let (($generated@@78 (+ $generated@@77 $generated@@77)))
(- $generated@@78 $generated@@77))))
 :pattern ( ($generated@@23 $generated@@77))
))))
(assert (forall (($generated@@81 Int) ) (!  (=> (or (and (<= 0 $generated@@81) (< $generated@@81 55296)) (and (<= 57344 $generated@@81) (< $generated@@81 1114112))) (= ($generated@@80 ($generated@@79 $generated@@81)) $generated@@81))
 :pattern ( ($generated@@79 $generated@@81))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@93 T@T) ($generated@@94 T@T) ($generated@@95 T@T) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ) (! (= ($generated@@82 $generated@@93 $generated@@94 $generated@@95 ($generated@@89 $generated@@93 $generated@@94 $generated@@95 $generated@@97 $generated@@98 $generated@@99 $generated@@96) $generated@@98 $generated@@99) $generated@@96)
 :weight 0
)) (and (forall (($generated@@100 T@T) ($generated@@101 T@T) ($generated@@102 T@T) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ) (!  (or (= $generated@@105 $generated@@107) (= ($generated@@82 $generated@@100 $generated@@101 $generated@@102 ($generated@@89 $generated@@100 $generated@@101 $generated@@102 $generated@@104 $generated@@105 $generated@@106 $generated@@103) $generated@@107 $generated@@108) ($generated@@82 $generated@@100 $generated@@101 $generated@@102 $generated@@104 $generated@@107 $generated@@108)))
 :weight 0
)) (forall (($generated@@109 T@T) ($generated@@110 T@T) ($generated@@111 T@T) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ) (!  (or (= $generated@@115 $generated@@117) (= ($generated@@82 $generated@@109 $generated@@110 $generated@@111 ($generated@@89 $generated@@109 $generated@@110 $generated@@111 $generated@@113 $generated@@114 $generated@@115 $generated@@112) $generated@@116 $generated@@117) ($generated@@82 $generated@@109 $generated@@110 $generated@@111 $generated@@113 $generated@@116 $generated@@117)))
 :weight 0
)))) (= ($generated@@5 $generated@@83) 5)) (= ($generated@@5 $generated@@84) 6)) (forall (($generated@@118 T@T) ($generated@@119 T@T) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ) (! (= ($generated@@86 $generated@@118 $generated@@119 ($generated@@90 $generated@@118 $generated@@119 $generated@@121 $generated@@122 $generated@@120) $generated@@122) $generated@@120)
 :weight 0
))) (forall (($generated@@123 T@T) ($generated@@124 T@T) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ) (!  (or (= $generated@@127 $generated@@128) (= ($generated@@86 $generated@@123 $generated@@124 ($generated@@90 $generated@@123 $generated@@124 $generated@@126 $generated@@127 $generated@@125) $generated@@128) ($generated@@86 $generated@@123 $generated@@124 $generated@@126 $generated@@128)))
 :weight 0
))) (= ($generated@@5 $generated@@87) 7)) (forall (($generated@@129 T@T) ($generated@@130 T@T) ) (= ($generated@@5 ($generated@@88 $generated@@129 $generated@@130)) 8))) (forall (($generated@@131 T@T) ($generated@@132 T@T) ) (! (= ($generated@@91 ($generated@@88 $generated@@131 $generated@@132)) $generated@@131)
 :pattern ( ($generated@@88 $generated@@131 $generated@@132))
))) (forall (($generated@@133 T@T) ($generated@@134 T@T) ) (! (= ($generated@@92 ($generated@@88 $generated@@133 $generated@@134)) $generated@@134)
 :pattern ( ($generated@@88 $generated@@133 $generated@@134))
))))
(assert (forall (($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 Bool) ($generated@@139 T@U) ($generated@@140 T@U) ) (! (= ($generated@@10 ($generated@@82 $generated@@83 $generated@@84 $generated@@6 ($generated@@85 $generated@@135 $generated@@136 $generated@@137 $generated@@138) $generated@@139 $generated@@140))  (=> (and (or (not (= $generated@@139 $generated@@135)) (not true)) ($generated@@10 ($generated@@42 $generated@@6 ($generated@@86 $generated@@84 $generated@@87 ($generated@@86 $generated@@83 ($generated@@88 $generated@@84 $generated@@87) $generated@@136 $generated@@139) $generated@@137)))) $generated@@138))
 :pattern ( ($generated@@82 $generated@@83 $generated@@84 $generated@@6 ($generated@@85 $generated@@135 $generated@@136 $generated@@137 $generated@@138) $generated@@139 $generated@@140))
)))
(assert (forall (($generated@@143 T@U) ($generated@@144 T@U) ) (!  (and (= ($generated@@141 ($generated@@36 $generated@@143 $generated@@144)) $generated@@143) (= ($generated@@142 ($generated@@36 $generated@@143 $generated@@144)) $generated@@144))
 :pattern ( ($generated@@36 $generated@@143 $generated@@144))
)))
(assert (forall (($generated@@145 T@U) ($generated@@146 T@U) ) (!  (=> ($generated@@38 $generated@@145 ($generated@@37 $generated@@146)) (and (= ($generated@@43 $generated@@35 ($generated@@42 $generated@@35 $generated@@145)) $generated@@145) ($generated@@34 $generated@@35 ($generated@@42 $generated@@35 $generated@@145) ($generated@@37 $generated@@146))))
 :pattern ( ($generated@@38 $generated@@145 ($generated@@37 $generated@@146)))
)))
(assert (forall (($generated@@147 T@U) ) (!  (and (= ($generated@@79 ($generated@@80 $generated@@147)) $generated@@147) (or (and (<= 0 ($generated@@80 $generated@@147)) (< ($generated@@80 $generated@@147) 55296)) (and (<= 57344 ($generated@@80 $generated@@147)) (< ($generated@@80 $generated@@147) 1114112))))
 :pattern ( ($generated@@80 $generated@@147))
)))
(assert (forall (($generated@@148 Int) ) (! (= ($generated@@43 $generated@@7 ($generated@@11 ($generated@@24 $generated@@148))) ($generated@@31 $generated@@87 ($generated@@43 $generated@@7 ($generated@@11 $generated@@148))))
 :pattern ( ($generated@@43 $generated@@7 ($generated@@11 ($generated@@24 $generated@@148))))
)))
(assert (forall (($generated@@149 T@U) ($generated@@150 T@T) ) (! (= ($generated@@43 $generated@@150 ($generated@@31 $generated@@150 $generated@@149)) ($generated@@31 $generated@@87 ($generated@@43 $generated@@150 $generated@@149)))
 :pattern ( ($generated@@43 $generated@@150 ($generated@@31 $generated@@150 $generated@@149)))
)))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@151 Int) ) (!  (=> (or ($generated@@59 ($generated@@24 $generated@@151)) (and (< 0 $generated@@22) ($generated@@10 ($generated@@31 $generated@@6 ($generated@@9 (< $generated@@151 2400)))))) (= ($generated@@58 ($generated@@24 $generated@@151)) ($generated@@24 $generated@@151)))
 :weight 3
 :pattern ( ($generated@@58 ($generated@@24 $generated@@151)))
))))
(assert (forall (($generated@@152 T@U) ) (!  (=> (= ($generated@@28 $generated@@152) 0) (= $generated@@152 $generated@@29))
 :pattern ( ($generated@@28 $generated@@152))
)))
(assert (forall (($generated@@153 T@U) ($generated@@154 T@U) ) (! ($generated@@49 $generated@@7 $generated@@154 $generated@@0 $generated@@153)
 :pattern ( ($generated@@49 $generated@@7 $generated@@154 $generated@@0 $generated@@153))
)))
(assert (forall (($generated@@155 T@U) ($generated@@156 T@U) ) (! ($generated@@49 $generated@@62 $generated@@156 $generated $generated@@155)
 :pattern ( ($generated@@49 $generated@@62 $generated@@156 $generated $generated@@155))
)))
(assert (forall (($generated@@157 T@U) ($generated@@158 T@U) ) (! (= ($generated@@34 $generated@@35 $generated@@157 ($generated@@37 $generated@@158)) (forall (($generated@@159 Int) ) (!  (=> (and (<= 0 $generated@@159) (< $generated@@159 ($generated@@28 $generated@@157))) ($generated@@38 ($generated@@54 $generated@@157 $generated@@159) $generated@@158))
 :pattern ( ($generated@@54 $generated@@157 $generated@@159))
)))
 :pattern ( ($generated@@34 $generated@@35 $generated@@157 ($generated@@37 $generated@@158)))
)))
(assert (forall (($generated@@160 T@U) ) (! ($generated@@34 $generated@@7 $generated@@160 $generated@@0)
 :pattern ( ($generated@@34 $generated@@7 $generated@@160 $generated@@0))
)))
(assert (forall (($generated@@161 T@U) ) (! ($generated@@34 $generated@@62 $generated@@161 $generated)
 :pattern ( ($generated@@34 $generated@@62 $generated@@161 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@162 () T@U)
(declare-fun $generated@@163 () T@U)
(declare-fun $generated@@164 () T@U)
(declare-fun $generated@@165 () T@U)
(declare-fun $generated@@166 () T@U)
(declare-fun $generated@@167 () Int)
(declare-fun $generated@@168 () Int)
(declare-fun $generated@@169 () Int)
(declare-fun $generated@@170 () Int)
(declare-fun $generated@@171 () Int)
(declare-fun $generated@@172 () Int)
(declare-fun $generated@@173 () Int)
(declare-fun $generated@@174 (T@U) Bool)
(declare-fun $generated@@175 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 4) (let (($generated@@176  (=> (= $generated@@162 ($generated@@85 $generated@@163 $generated@@164 $generated@@4 false)) (=> (and (= $generated@@165 ($generated@@31 $generated@@35 ($generated@@36 ($generated@@36 ($generated@@36 ($generated@@36 ($generated@@36 ($generated@@36 $generated@@29 ($generated@@43 $generated@@62 ($generated@@79 117))) ($generated@@43 $generated@@62 ($generated@@79 110))) ($generated@@43 $generated@@62 ($generated@@79 117))) ($generated@@43 $generated@@62 ($generated@@79 115))) ($generated@@43 $generated@@62 ($generated@@79 101))) ($generated@@43 $generated@@62 ($generated@@79 100))))) ($generated@@34 $generated@@35 $generated@@165 ($generated@@37 $generated))) (=> (and (and (and (= $generated@@166 $generated@@165) (= $generated@@167 ($generated@@24 10))) (and ($generated@@34 $generated@@7 ($generated@@11 $generated@@167) $generated@@0) (= $generated@@168 $generated@@167))) (and (and (= $generated@@169 ($generated@@24 20)) ($generated@@34 $generated@@7 ($generated@@11 $generated@@169) $generated@@0)) (and (= $generated@@170 $generated@@169) ($generated@@49 $generated@@7 ($generated@@11 $generated@@168) $generated@@0 $generated@@164)))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (< $generated@@168 2400)) (=> (and (and (< $generated@@168 2400) ($generated@@59 $generated@@168)) (and (= $generated@@171 ($generated@@58 $generated@@168)) ($generated@@49 $generated@@7 ($generated@@11 $generated@@171) $generated@@0 $generated@@164))) (=> (and (and (and ($generated@@25 ($generated@@58 $generated@@168)) (let (($generated@@177 ($generated@@24 10)))
 (and ($generated@@59 $generated@@177) ($generated@@25 ($generated@@58 $generated@@177))))) (and (= $generated@@172 (let (($generated@@178 ($generated@@24 20)))
(let (($generated@@179 ($generated@@24 10)))
(+ ($generated@@23 ($generated@@24 ($generated@@58 $generated@@179))) $generated@@178)))) (= $generated@@173 ($generated@@24 30)))) (and (and ($generated@@49 $generated@@7 ($generated@@11 $generated@@173) $generated@@0 $generated@@164) ($generated@@25 ($generated@@24 30))) (and ($generated@@25 ($generated@@24 30)) (= (ControlFlow 0 2) (- 0 1))))) (= $generated@@172 ($generated@@24 ($generated@@23 ($generated@@24 30))))))))))))
(let (($generated@@180  (=> (and (and ($generated@@174 $generated@@164) ($generated@@175 $generated@@164)) (and (= 1 $generated@@22) (= (ControlFlow 0 4) 2))) $generated@@176)))
$generated@@180)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
