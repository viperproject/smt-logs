(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagSet () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._System.nat () T@U)
(declare-fun tytagFamily$nat () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun |Set#UnionOne| (T@U T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun |Set#Union| (T@U T@U) T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass._System.nat () T@U)
(declare-fun |Set#Difference| (T@U T@U) T@U)
(declare-fun |Set#Empty| () T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.BitSet (Int) T@U)
(declare-fun |_module.__default.BitSet#canCall| (Int) Bool)
(declare-fun LitInt (Int) Int)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun SetType () T@T)
(declare-fun TSet (T@U) T@U)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun _module.__default.Bit (T@U Int Int) Bool)
(declare-fun $LS (T@U) T@U)
(declare-fun |_module.__default.Bit#canCall| (Int Int) Bool)
(declare-fun Div (Int Int) Int)
(declare-fun Mod (Int Int) Int)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun |Set#Disjoint| (T@U T@U) Bool)
(declare-fun |Set#FromBoogieMap| (T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $LZ () T@U)
(declare-fun |lambda#3| (T@U Int Int T@U Int) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun |lambda#25| (Int T@U Int T@U) T@U)
(declare-fun _module.__default.Suc (T@U) T@U)
(declare-fun |_module.__default.Suc#canCall| (T@U) Bool)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun Mul (Int Int) Int)
(declare-fun TagFamily (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt TagSet alloc Tagclass._System.nat tytagFamily$nat)
)
(assert (= (Tag TInt) TagInt))
(assert (forall ((a T@U) (x@@2 T@U) ) (! (|Set#IsMember| (|Set#UnionOne| a x@@2) x@@2)
 :pattern ( (|Set#UnionOne| a x@@2))
)))
(assert (forall ((a@@0 T@U) (x@@3 T@U) (y T@U) ) (!  (=> (|Set#IsMember| a@@0 y) (|Set#IsMember| (|Set#UnionOne| a@@0 x@@3) y))
 :pattern ( (|Set#UnionOne| a@@0 x@@3) (|Set#IsMember| a@@0 y))
)))
(assert (forall ((a@@1 T@U) (b T@U) (y@@0 T@U) ) (!  (=> (|Set#IsMember| a@@1 y@@0) (|Set#IsMember| (|Set#Union| a@@1 b) y@@0))
 :pattern ( (|Set#Union| a@@1 b) (|Set#IsMember| a@@1 y@@0))
)))
(assert (forall ((a@@2 T@U) (b@@0 T@U) (y@@1 T@U) ) (!  (=> (|Set#IsMember| b@@0 y@@1) (|Set#IsMember| (|Set#Union| a@@2 b@@0) y@@1))
 :pattern ( (|Set#Union| a@@2 b@@0) (|Set#IsMember| b@@0 y@@1))
)))
(assert (forall ((|x#0| T@U) ($h T@U) ) (! ($IsAlloc intType |x#0| Tclass._System.nat $h)
 :pattern ( ($IsAlloc intType |x#0| Tclass._System.nat $h))
)))
(assert (forall ((a@@3 T@U) (x@@4 T@U) (o T@U) ) (! (= (|Set#IsMember| (|Set#UnionOne| a@@3 x@@4) o)  (or (= o x@@4) (|Set#IsMember| a@@3 o)))
 :pattern ( (|Set#IsMember| (|Set#UnionOne| a@@3 x@@4) o))
)))
(assert (forall ((a@@4 T@U) (b@@1 T@U) (y@@2 T@U) ) (!  (=> (|Set#IsMember| b@@1 y@@2) (not (|Set#IsMember| (|Set#Difference| a@@4 b@@1) y@@2)))
 :pattern ( (|Set#Difference| a@@4 b@@1) (|Set#IsMember| b@@1 y@@2))
)))
(assert (forall ((o@@0 T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o@@0))
 :pattern ( (|Set#IsMember| |Set#Empty| o@@0))
)))
(assert (forall ((a@@5 T@U) (b@@2 T@U) ) (! (= (|Set#Union| (|Set#Union| a@@5 b@@2) b@@2) (|Set#Union| a@@5 b@@2))
 :pattern ( (|Set#Union| (|Set#Union| a@@5 b@@2) b@@2))
)))
(assert (forall ((a@@6 T@U) (b@@3 T@U) (o@@1 T@U) ) (! (= (|Set#IsMember| (|Set#Difference| a@@6 b@@3) o@@1)  (and (|Set#IsMember| a@@6 o@@1) (not (|Set#IsMember| b@@3 o@@1))))
 :pattern ( (|Set#IsMember| (|Set#Difference| a@@6 b@@3) o@@1))
)))
(assert (= (Ctor SetType) 3))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|n#0| Int) ) (!  (=> (or (|_module.__default.BitSet#canCall| |n#0|) (and (< 1 $FunctionContextHeight) (<= (LitInt 0) |n#0|))) ($Is SetType (_module.__default.BitSet |n#0|) (TSet Tclass._System.nat)))
 :pattern ( (_module.__default.BitSet |n#0|))
))))
(assert (forall ((x@@5 Int) ) (! (= (LitInt x@@5) x@@5)
 :pattern ( (LitInt x@@5))
)))
(assert (forall ((x@@6 T@U) (T T@T) ) (! (= (Lit T x@@6) x@@6)
 :pattern ( (Lit T x@@6))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($ly T@U) (|k#0| Int) (|n#0@@0| Int) ) (!  (=> (or (|_module.__default.Bit#canCall| (LitInt |k#0|) (LitInt |n#0@@0|)) (and (< 0 $FunctionContextHeight) (and (<= (LitInt 0) |k#0|) (<= (LitInt 0) |n#0@@0|)))) (and (=> (or (not (= (LitInt |k#0|) (LitInt 0))) (not true)) (|_module.__default.Bit#canCall| (LitInt (- |k#0| 1)) (LitInt (Div |n#0@@0| (LitInt 2))))) (= (_module.__default.Bit ($LS $ly) (LitInt |k#0|) (LitInt |n#0@@0|)) (ite (= (LitInt |k#0|) (LitInt 0)) (= (LitInt (Mod |n#0@@0| (LitInt 2))) (LitInt 1)) (_module.__default.Bit ($LS $ly) (LitInt (- |k#0| 1)) (LitInt (Div |n#0@@0| (LitInt 2))))))))
 :weight 3
 :pattern ( (_module.__default.Bit ($LS $ly) (LitInt |k#0|) (LitInt |n#0@@0|)))
))))
(assert (forall ((x@@7 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@7)) x@@7)
 :pattern ( ($Unbox T@@0 x@@7))
)))
(assert (forall ((a@@7 T@U) (b@@4 T@U) ) (! (= (|Set#Disjoint| a@@7 b@@4) (forall ((o@@2 T@U) ) (!  (or (not (|Set#IsMember| a@@7 o@@2)) (not (|Set#IsMember| b@@4 o@@2)))
 :pattern ( (|Set#IsMember| a@@7 o@@2))
 :pattern ( (|Set#IsMember| b@@4 o@@2))
)))
 :pattern ( (|Set#Disjoint| a@@7 b@@4))
)))
(assert  (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor BoxType) 4)))
(assert (forall ((m@@1 T@U) (bx T@U) ) (! (= (|Set#IsMember| (|Set#FromBoogieMap| m@@1) bx) (U_2_bool (MapType0Select BoxType boolType m@@1 bx)))
 :pattern ( (|Set#IsMember| (|Set#FromBoogieMap| m@@1) bx))
)))
(assert (forall ((v T@U) (t0@@0 T@U) ) (! (= ($Is SetType v (TSet t0@@0)) (forall ((bx@@0 T@U) ) (!  (=> (|Set#IsMember| v bx@@0) ($IsBox bx@@0 t0@@0))
 :pattern ( (|Set#IsMember| v bx@@0))
)))
 :pattern ( ($Is SetType v (TSet t0@@0)))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|n#0@@1| Int) ) (!  (=> (or (|_module.__default.BitSet#canCall| |n#0@@1|) (and (< 1 $FunctionContextHeight) (<= (LitInt 0) |n#0@@1|))) (and (forall ((|i#0| Int) ) (!  (=> (<= (LitInt 0) |i#0|) (=> (< |i#0| |n#0@@1|) (|_module.__default.Bit#canCall| |i#0| |n#0@@1|)))
 :pattern ( (_module.__default.Bit ($LS $LZ) |i#0| |n#0@@1|))
)) (= (_module.__default.BitSet |n#0@@1|) (|Set#FromBoogieMap| (|lambda#3| TInt (LitInt 0) |n#0@@1| ($LS $LZ) |n#0@@1|)))))
 :pattern ( (_module.__default.BitSet |n#0@@1|))
))))
(assert (forall ((|l#0| T@U) (|l#1| Int) (|l#2| Int) (|l#3| T@U) (|l#4| Int) (|$y#0| T@U) ) (! (= (U_2_bool (MapType0Select BoxType boolType (|lambda#3| |l#0| |l#1| |l#2| |l#3| |l#4|) |$y#0|))  (and ($IsBox |$y#0| |l#0|) (and (and (<= |l#1| (U_2_int ($Unbox intType |$y#0|))) (< (U_2_int ($Unbox intType |$y#0|)) |l#2|)) (_module.__default.Bit |l#3| (U_2_int ($Unbox intType |$y#0|)) |l#4|))))
 :pattern ( (MapType0Select BoxType boolType (|lambda#3| |l#0| |l#1| |l#2| |l#3| |l#4|) |$y#0|))
)))
(assert (forall ((|x#0@@0| T@U) ) (! (= ($Is intType |x#0@@0| Tclass._System.nat) (<= (LitInt 0) (U_2_int |x#0@@0|)))
 :pattern ( ($Is intType |x#0@@0| Tclass._System.nat))
)))
(assert (forall (($ly@@0 T@U) (|k#0@@0| Int) (|n#0@@2| Int) ) (! (= (_module.__default.Bit ($LS $ly@@0) |k#0@@0| |n#0@@2|) (_module.__default.Bit $ly@@0 |k#0@@0| |n#0@@2|))
 :pattern ( (_module.__default.Bit ($LS $ly@@0) |k#0@@0| |n#0@@2|))
)))
(assert (forall ((v@@0 T@U) (t T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t h) ($IsAlloc T@@1 v@@0 t h))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t h))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($ly@@1 T@U) (|k#0@@1| Int) (|n#0@@3| Int) ) (!  (=> (or (|_module.__default.Bit#canCall| |k#0@@1| |n#0@@3|) (and (< 0 $FunctionContextHeight) (and (<= (LitInt 0) |k#0@@1|) (<= (LitInt 0) |n#0@@3|)))) (and (=> (or (not (= |k#0@@1| (LitInt 0))) (not true)) (|_module.__default.Bit#canCall| (- |k#0@@1| 1) (Div |n#0@@3| (LitInt 2)))) (= (_module.__default.Bit ($LS $ly@@1) |k#0@@1| |n#0@@3|) (ite (= |k#0@@1| (LitInt 0)) (= (Mod |n#0@@3| (LitInt 2)) (LitInt 1)) (_module.__default.Bit $ly@@1 (- |k#0@@1| 1) (Div |n#0@@3| (LitInt 2)))))))
 :pattern ( (_module.__default.Bit ($LS $ly@@1) |k#0@@1| |n#0@@3|))
))))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 Tclass._System.nat) (and (= ($Box intType ($Unbox intType bx@@1)) bx@@1) ($Is intType ($Unbox intType bx@@1) Tclass._System.nat)))
 :pattern ( ($IsBox bx@@1 Tclass._System.nat))
)))
(assert (forall ((|l#0@@0| Int) (|l#1@@0| T@U) (|l#2@@0| Int) (|l#3@@0| T@U) (|$y#0@@0| T@U) ) (! (= (U_2_bool (MapType0Select BoxType boolType (|lambda#25| |l#0@@0| |l#1@@0| |l#2@@0| |l#3@@0|) |$y#0@@0|)) (exists ((|x#0@@1| Int) ) (!  (and (and (<= |l#0@@0| |x#0@@1|) (|Set#IsMember| |l#1@@0| ($Box intType (int_2_U |x#0@@1|)))) (= |$y#0@@0| ($Box intType (int_2_U (+ |x#0@@1| |l#2@@0|)))))
 :pattern ( (|Set#IsMember| |l#3@@0| ($Box intType (int_2_U |x#0@@1|))))
)))
 :pattern ( (MapType0Select BoxType boolType (|lambda#25| |l#0@@0| |l#1@@0| |l#2@@0| |l#3@@0|) |$y#0@@0|))
)))
(assert (forall ((a@@8 T@U) (b@@5 T@U) (o@@3 T@U) ) (! (= (|Set#IsMember| (|Set#Union| a@@8 b@@5) o@@3)  (or (|Set#IsMember| a@@8 o@@3) (|Set#IsMember| b@@5 o@@3)))
 :pattern ( (|Set#IsMember| (|Set#Union| a@@8 b@@5) o@@3))
)))
(assert (forall ((a@@9 T@U) (b@@6 T@U) ) (!  (=> (|Set#Disjoint| a@@9 b@@6) (and (= (|Set#Difference| (|Set#Union| a@@9 b@@6) a@@9) b@@6) (= (|Set#Difference| (|Set#Union| a@@9 b@@6) b@@6) a@@9)))
 :pattern ( (|Set#Union| a@@9 b@@6))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|S#0| T@U) ) (!  (=> (or (|_module.__default.Suc#canCall| |S#0|) (and (< 0 $FunctionContextHeight) ($Is SetType |S#0| (TSet Tclass._System.nat)))) (= (_module.__default.Suc |S#0|) (|Set#FromBoogieMap| (|lambda#25| (LitInt 0) |S#0| 1 |S#0|))))
 :pattern ( (_module.__default.Suc |S#0|))
))))
(assert (forall ((x@@8 Int) (y@@3 Int) ) (! (= (Div x@@8 y@@3) (div x@@8 y@@3))
 :pattern ( (Div x@@8 y@@3))
)))
(assert (forall ((a@@10 T@U) (b@@7 T@U) ) (!  (=> (|Set#Equal| a@@10 b@@7) (= a@@10 b@@7))
 :pattern ( (|Set#Equal| a@@10 b@@7))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|n#0@@4| Int) ) (!  (=> (or (|_module.__default.BitSet#canCall| (LitInt |n#0@@4|)) (and (< 1 $FunctionContextHeight) (<= (LitInt 0) |n#0@@4|))) (and (forall ((|i#1| Int) ) (!  (=> (<= (LitInt 0) |i#1|) (=> (< |i#1| |n#0@@4|) (|_module.__default.Bit#canCall| |i#1| (LitInt |n#0@@4|))))
 :pattern ( (_module.__default.Bit ($LS $LZ) |i#1| |n#0@@4|))
)) (= (_module.__default.BitSet (LitInt |n#0@@4|)) (|Set#FromBoogieMap| (|lambda#3| TInt (LitInt 0) |n#0@@4| ($LS $LZ) (LitInt |n#0@@4|))))))
 :weight 3
 :pattern ( (_module.__default.BitSet (LitInt |n#0@@4|)))
))))
(assert (forall ((bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 TInt) (and (= ($Box intType ($Unbox intType bx@@2)) bx@@2) ($Is intType ($Unbox intType bx@@2) TInt)))
 :pattern ( ($IsBox bx@@2 TInt))
)))
(assert (forall ((v@@1 T@U) (t@@0 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@1) t@@0) ($Is T@@2 v@@1 t@@0))
 :pattern ( ($IsBox ($Box T@@2 v@@1) t@@0))
)))
(assert (forall ((v@@2 T@U) (t0@@1 T@U) (h@@0 T@U) ) (! (= ($IsAlloc SetType v@@2 (TSet t0@@1) h@@0) (forall ((bx@@3 T@U) ) (!  (=> (|Set#IsMember| v@@2 bx@@3) ($IsAllocBox bx@@3 t0@@1 h@@0))
 :pattern ( (|Set#IsMember| v@@2 bx@@3))
)))
 :pattern ( ($IsAlloc SetType v@@2 (TSet t0@@1) h@@0))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|S#0@@0| T@U) ) (!  (=> (or (|_module.__default.Suc#canCall| (Lit SetType |S#0@@0|)) (and (< 0 $FunctionContextHeight) ($Is SetType |S#0@@0| (TSet Tclass._System.nat)))) (= (_module.__default.Suc (Lit SetType |S#0@@0|)) (|Set#FromBoogieMap| (|lambda#25| (LitInt 0) (Lit SetType |S#0@@0|) 1 |S#0@@0|))))
 :weight 3
 :pattern ( (_module.__default.Suc (Lit SetType |S#0@@0|)))
))))
(assert (forall ((t@@1 T@U) ) (! (= (Inv0_TSet (TSet t@@1)) t@@1)
 :pattern ( (TSet t@@1))
)))
(assert (forall ((t@@2 T@U) ) (! (= (Tag (TSet t@@2)) TagSet)
 :pattern ( (TSet t@@2))
)))
(assert (forall ((x@@9 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@9)) x@@9)
 :pattern ( ($Box T@@3 x@@9))
)))
(assert (forall ((a@@11 T@U) (b@@8 T@U) ) (! (= (|Set#Union| a@@11 (|Set#Union| a@@11 b@@8)) (|Set#Union| a@@11 b@@8))
 :pattern ( (|Set#Union| a@@11 (|Set#Union| a@@11 b@@8)))
)))
(assert  (and (and (and (and (and (and (forall ((t0@@2 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@2 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@2 t1@@0 t2 (MapType1Store t0@@2 t1@@0 t2 m@@2 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@3 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@3 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@3 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@4 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@4 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@4 y0@@1 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 5)) (= (Ctor FieldType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0@@1| T@U) (|l#1@@1| T@U) (|l#2@@1| T@U) (|l#3@@1| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0@@1| |l#1@@1| |l#2@@1| |l#3@@1|) $o $f))  (=> (and (or (not (= $o |l#0@@1|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1@@1| $o) |l#2@@1|)))) |l#3@@1|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0@@1| |l#1@@1| |l#2@@1| |l#3@@1|) $o $f))
)))
(assert (forall ((x@@10 Int) (y@@4 Int) ) (! (= (Mod x@@10 y@@4) (mod x@@10 y@@4))
 :pattern ( (Mod x@@10 y@@4))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|S#0@@1| T@U) ) (!  (=> (or (|_module.__default.Suc#canCall| |S#0@@1|) (and (< 0 $FunctionContextHeight) ($Is SetType |S#0@@1| (TSet Tclass._System.nat)))) ($Is SetType (_module.__default.Suc |S#0@@1|) (TSet Tclass._System.nat)))
 :pattern ( (_module.__default.Suc |S#0@@1|))
))))
(assert (forall ((x@@11 Int) (y@@5 Int) ) (! (= (Mul x@@11 y@@5) (* x@@11 y@@5))
 :pattern ( (Mul x@@11 y@@5))
)))
(assert (forall ((bx@@4 T@U) (t@@3 T@U) ) (!  (=> ($IsBox bx@@4 (TSet t@@3)) (and (= ($Box SetType ($Unbox SetType bx@@4)) bx@@4) ($Is SetType ($Unbox SetType bx@@4) (TSet t@@3))))
 :pattern ( ($IsBox bx@@4 (TSet t@@3)))
)))
(assert (= (Tag Tclass._System.nat) Tagclass._System.nat))
(assert (= (TagFamily Tclass._System.nat) tytagFamily$nat))
(assert (forall ((a@@12 T@U) (b@@9 T@U) ) (! (= (|Set#Equal| a@@12 b@@9) (forall ((o@@4 T@U) ) (! (= (|Set#IsMember| a@@12 o@@4) (|Set#IsMember| b@@9 o@@4))
 :pattern ( (|Set#IsMember| a@@12 o@@4))
 :pattern ( (|Set#IsMember| b@@9 o@@4))
)))
 :pattern ( (|Set#Equal| a@@12 b@@9))
)))
(assert (forall ((x@@12 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@12))) (Lit BoxType ($Box intType (int_2_U x@@12))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@12))))
)))
(assert (forall ((x@@13 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@13)) (Lit BoxType ($Box T@@4 x@@13)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@13)))
)))
(assert (forall ((h@@1 T@U) (v@@3 T@U) ) (! ($IsAlloc intType v@@3 TInt h@@1)
 :pattern ( ($IsAlloc intType v@@3 TInt h@@1))
)))
(assert (forall ((v@@4 T@U) ) (! ($Is intType v@@4 TInt)
 :pattern ( ($Is intType v@@4 TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |x#1_0_0@0| () Int)
(declare-fun |n#0@@5| () Int)
(declare-fun $Heap () T@U)
(declare-fun |##n#1_0_0_5_1@0| () Int)
(declare-fun |##n#1_0_0_5_0@0| () Int)
(declare-fun |##k#1_0_0_1_0@0| () Int)
(declare-fun |##k#1_0_0_2_2@0| () Int)
(declare-fun $Heap@3 () T@U)
(declare-fun |i##1_0_0_2_0_0@0| () Int)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $Heap@2 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |##k#1_0_0_2_1@0| () Int)
(declare-fun |##k#1_0_0_2_0@0| () Int)
(declare-fun |##k#1_0_0_3_3@0| () Int)
(declare-fun |nn#1_0@0| () Int)
(declare-fun |##k#1_0_0_3_2@0| () Int)
(declare-fun |##n#1_0_0_3_2@0| () Int)
(declare-fun |##n#1_0_0_3_0@0| () Int)
(declare-fun $Heap@4 () T@U)
(declare-fun |##n#1_0_0_4_1@0| () Int)
(declare-fun |##n#1_0_0_4_0@0| () Int)
(declare-fun |##S#1_0_0_0_0@0| () T@U)
(declare-fun |x#1_1_0@0| () Int)
(declare-fun |##n#1_1_0_5_1@0| () Int)
(declare-fun |##n#1_1_0_5_0@0| () Int)
(declare-fun |##S#1_1_0_0_1@0| () T@U)
(declare-fun |##S#1_1_0_0_0@0| () T@U)
(declare-fun |##S#1_1_0_1_0@0| () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun |i##1_1_0_2_0_0@0| () Int)
(declare-fun $Heap@0 () T@U)
(declare-fun |##k#1_1_0_2_1@0| () Int)
(declare-fun |##k#1_1_0_2_0@0| () Int)
(declare-fun |##k#1_1_0_3_1@0| () Int)
(declare-fun |##n#1_1_0_3_0@0| () Int)
(declare-fun |##n#1_1_0_4_2@0| () Int)
(declare-fun |##n#1_1_0_4_1@0| () Int)
(declare-fun |##n#1_1_0_4_0@0| () Int)
(declare-fun |##n#1_1_0@0| () Int)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun null () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 173) (let ((anon11_correct  (=> (and (=> (and (<= (LitInt 0) |x#1_0_0@0|) (< |x#1_0_0@0| (Mul (LitInt 2) |n#0@@5|))) (|_module.__default.Bit#canCall| |x#1_0_0@0| (Mul (LitInt 2) |n#0@@5|))) (= (ControlFlow 0 162) (- 0 161))) (= (|Set#IsMember| (_module.__default.BitSet (Mul (LitInt 2) |n#0@@5|)) ($Box intType (int_2_U |x#1_0_0@0|)))  (and (and (<= (LitInt 0) |x#1_0_0@0|) (< |x#1_0_0@0| (Mul (LitInt 2) |n#0@@5|))) (_module.__default.Bit ($LS ($LS $LZ)) |x#1_0_0@0| (Mul (LitInt 2) |n#0@@5|)))))))
(let ((anon116_Else_correct  (=> (and (not (and (<= (LitInt 0) |x#1_0_0@0|) (< |x#1_0_0@0| (Mul (LitInt 2) |n#0@@5|)))) (= (ControlFlow 0 165) 162)) anon11_correct)))
(let ((anon116_Then_correct  (=> (and (and (<= (LitInt 0) |x#1_0_0@0|) (< |x#1_0_0@0| (Mul (LitInt 2) |n#0@@5|))) ($IsAlloc intType (int_2_U |x#1_0_0@0|) Tclass._System.nat $Heap)) (and (=> (= (ControlFlow 0 163) (- 0 164)) ($Is intType (int_2_U (Mul (LitInt 2) |n#0@@5|)) Tclass._System.nat)) (=> ($Is intType (int_2_U (Mul (LitInt 2) |n#0@@5|)) Tclass._System.nat) (=> (and (and (= |##n#1_0_0_5_1@0| (Mul (LitInt 2) |n#0@@5|)) ($IsAlloc intType (int_2_U |##n#1_0_0_5_1@0|) Tclass._System.nat $Heap)) (and (|_module.__default.Bit#canCall| |x#1_0_0@0| (Mul (LitInt 2) |n#0@@5|)) (= (ControlFlow 0 163) 162))) anon11_correct))))))
(let ((anon115_Else_correct  (=> (< |x#1_0_0@0| (LitInt 0)) (and (=> (= (ControlFlow 0 167) 163) anon116_Then_correct) (=> (= (ControlFlow 0 167) 165) anon116_Else_correct)))))
(let ((anon115_Then_correct  (=> (<= (LitInt 0) |x#1_0_0@0|) (and (=> (= (ControlFlow 0 166) 163) anon116_Then_correct) (=> (= (ControlFlow 0 166) 165) anon116_Else_correct)))))
(let ((anon114_Then_correct  (=> ($Is intType (int_2_U (Mul (LitInt 2) |n#0@@5|)) Tclass._System.nat) (=> (and (and (= |##n#1_0_0_5_0@0| (Mul (LitInt 2) |n#0@@5|)) ($IsAlloc intType (int_2_U |##n#1_0_0_5_0@0|) Tclass._System.nat $Heap)) (and (|_module.__default.BitSet#canCall| (Mul (LitInt 2) |n#0@@5|)) (|_module.__default.BitSet#canCall| (Mul (LitInt 2) |n#0@@5|)))) (and (=> (= (ControlFlow 0 168) 166) anon115_Then_correct) (=> (= (ControlFlow 0 168) 167) anon115_Else_correct))))))
(let ((anon50_correct  (=> (=> (and (<= (LitInt 0) (- |x#1_0_0@0| 1)) (< (- |x#1_0_0@0| 1) |n#0@@5|)) (|_module.__default.Bit#canCall| (- |x#1_0_0@0| 1) |n#0@@5|)) (=> (and (and ($IsAlloc intType (int_2_U |n#0@@5|) Tclass._System.nat $Heap) (|_module.__default.BitSet#canCall| |n#0@@5|)) (and (|_module.__default.BitSet#canCall| |n#0@@5|) (= (ControlFlow 0 156) (- 0 155)))) (=  (and (and (<= (LitInt 0) (- |x#1_0_0@0| 1)) (< (- |x#1_0_0@0| 1) |n#0@@5|)) (_module.__default.Bit ($LS ($LS $LZ)) (- |x#1_0_0@0| 1) |n#0@@5|)) (|Set#IsMember| (_module.__default.BitSet |n#0@@5|) ($Box intType (int_2_U (- |x#1_0_0@0| 1)))))))))
(let ((anon137_Else_correct  (=> (and (not (and (<= (LitInt 0) (- |x#1_0_0@0| 1)) (< (- |x#1_0_0@0| 1) |n#0@@5|))) (= (ControlFlow 0 158) 156)) anon50_correct)))
(let ((anon137_Then_correct  (=> (and (and (and (<= (LitInt 0) (- |x#1_0_0@0| 1)) (< (- |x#1_0_0@0| 1) |n#0@@5|)) (and ($Is intType (int_2_U (- |x#1_0_0@0| 1)) Tclass._System.nat) (= |##k#1_0_0_1_0@0| (- |x#1_0_0@0| 1)))) (and (and ($IsAlloc intType (int_2_U |##k#1_0_0_1_0@0|) Tclass._System.nat $Heap) ($IsAlloc intType (int_2_U |n#0@@5|) Tclass._System.nat $Heap)) (and (|_module.__default.Bit#canCall| (- |x#1_0_0@0| 1) |n#0@@5|) (= (ControlFlow 0 157) 156)))) anon50_correct)))
(let ((anon136_Else_correct  (=> (< (- |x#1_0_0@0| 1) (LitInt 0)) (and (=> (= (ControlFlow 0 160) 157) anon137_Then_correct) (=> (= (ControlFlow 0 160) 158) anon137_Else_correct)))))
(let ((anon136_Then_correct  (=> (<= (LitInt 0) (- |x#1_0_0@0| 1)) (and (=> (= (ControlFlow 0 159) 157) anon137_Then_correct) (=> (= (ControlFlow 0 159) 158) anon137_Else_correct)))))
(let ((anon45_correct  (=> (and (=> (and (<= (LitInt 0) (- |x#1_0_0@0| 1)) (< (- |x#1_0_0@0| 1) |n#0@@5|)) (|_module.__default.Bit#canCall| (- |x#1_0_0@0| 1) |n#0@@5|)) (= (ControlFlow 0 134) (- 0 133))) (=  (and (and (< 0 |x#1_0_0@0|) (< |x#1_0_0@0| (Mul (LitInt 2) |n#0@@5|))) (_module.__default.Bit ($LS ($LS $LZ)) (- |x#1_0_0@0| 1) |n#0@@5|))  (and (and (<= (LitInt 0) (- |x#1_0_0@0| 1)) (< (- |x#1_0_0@0| 1) |n#0@@5|)) (_module.__default.Bit ($LS ($LS $LZ)) (- |x#1_0_0@0| 1) |n#0@@5|))))))
(let ((anon134_Else_correct  (=> (and (not (and (<= (LitInt 0) (- |x#1_0_0@0| 1)) (< (- |x#1_0_0@0| 1) |n#0@@5|))) (= (ControlFlow 0 137) 134)) anon45_correct)))
(let ((anon134_Then_correct  (=> (and (<= (LitInt 0) (- |x#1_0_0@0| 1)) (< (- |x#1_0_0@0| 1) |n#0@@5|)) (and (=> (= (ControlFlow 0 135) (- 0 136)) ($Is intType (int_2_U (- |x#1_0_0@0| 1)) Tclass._System.nat)) (=> ($Is intType (int_2_U (- |x#1_0_0@0| 1)) Tclass._System.nat) (=> (= |##k#1_0_0_2_2@0| (- |x#1_0_0@0| 1)) (=> (and (and ($IsAlloc intType (int_2_U |##k#1_0_0_2_2@0|) Tclass._System.nat $Heap@3) ($IsAlloc intType (int_2_U |n#0@@5|) Tclass._System.nat $Heap@3)) (and (|_module.__default.Bit#canCall| (- |x#1_0_0@0| 1) |n#0@@5|) (= (ControlFlow 0 135) 134))) anon45_correct)))))))
(let ((anon133_Else_correct  (=> (< (- |x#1_0_0@0| 1) (LitInt 0)) (and (=> (= (ControlFlow 0 139) 135) anon134_Then_correct) (=> (= (ControlFlow 0 139) 137) anon134_Else_correct)))))
(let ((anon133_Then_correct  (=> (<= (LitInt 0) (- |x#1_0_0@0| 1)) (and (=> (= (ControlFlow 0 138) 135) anon134_Then_correct) (=> (= (ControlFlow 0 138) 137) anon134_Else_correct)))))
(let ((anon41_correct  (and (=> (= (ControlFlow 0 140) 138) anon133_Then_correct) (=> (= (ControlFlow 0 140) 139) anon133_Else_correct))))
(let ((anon132_Else_correct  (=> (not (and (< 0 |x#1_0_0@0|) (_module.__default.Bit ($LS $LZ) (- |x#1_0_0@0| 1) |n#0@@5|))) (=> (and (= $Heap@3 $Heap) (= (ControlFlow 0 145) 140)) anon41_correct))))
(let ((anon132_Then_correct  (=> (and (< 0 |x#1_0_0@0|) (_module.__default.Bit ($LS $LZ) (- |x#1_0_0@0| 1) |n#0@@5|)) (and (=> (= (ControlFlow 0 141) (- 0 144)) ($Is intType (int_2_U (- |x#1_0_0@0| 1)) Tclass._System.nat)) (=> ($Is intType (int_2_U (- |x#1_0_0@0| 1)) Tclass._System.nat) (=> (= |i##1_0_0_2_0_0@0| (- |x#1_0_0@0| 1)) (and (=> (= (ControlFlow 0 141) (- 0 143)) (=> (|_module.__default.Bit#canCall| |i##1_0_0_2_0_0@0| |n#0@@5|) (or (_module.__default.Bit ($LS $LZ) |i##1_0_0_2_0_0@0| |n#0@@5|) (=> (= |i##1_0_0_2_0_0@0| (LitInt 0)) (= (Mod |n#0@@5| (LitInt 2)) (LitInt 1)))))) (=> (=> (|_module.__default.Bit#canCall| |i##1_0_0_2_0_0@0| |n#0@@5|) (or (_module.__default.Bit ($LS $LZ) |i##1_0_0_2_0_0@0| |n#0@@5|) (=> (= |i##1_0_0_2_0_0@0| (LitInt 0)) (= (Mod |n#0@@5| (LitInt 2)) (LitInt 1))))) (and (=> (= (ControlFlow 0 141) (- 0 142)) (=> (|_module.__default.Bit#canCall| |i##1_0_0_2_0_0@0| |n#0@@5|) (or (_module.__default.Bit ($LS $LZ) |i##1_0_0_2_0_0@0| |n#0@@5|) (=> (or (not (= |i##1_0_0_2_0_0@0| (LitInt 0))) (not true)) (_module.__default.Bit ($LS ($LS $LZ)) (- |i##1_0_0_2_0_0@0| 1) (Div |n#0@@5| (LitInt 2))))))) (=> (=> (|_module.__default.Bit#canCall| |i##1_0_0_2_0_0@0| |n#0@@5|) (or (_module.__default.Bit ($LS $LZ) |i##1_0_0_2_0_0@0| |n#0@@5|) (=> (or (not (= |i##1_0_0_2_0_0@0| (LitInt 0))) (not true)) (_module.__default.Bit ($LS ($LS $LZ)) (- |i##1_0_0_2_0_0@0| 1) (Div |n#0@@5| (LitInt 2)))))) (=> (and ($IsGoodHeap $Heap@2) ($IsHeapAnchor $Heap@2)) (=> (and (and (< |i##1_0_0_2_0_0@0| |n#0@@5|) (= $Heap $Heap@2)) (and (= $Heap@3 $Heap@2) (= (ControlFlow 0 141) 140))) anon41_correct))))))))))))
(let ((anon38_correct  (=> (=> (< 0 |x#1_0_0@0|) (|_module.__default.Bit#canCall| (- |x#1_0_0@0| 1) |n#0@@5|)) (and (=> (= (ControlFlow 0 146) 141) anon132_Then_correct) (=> (= (ControlFlow 0 146) 145) anon132_Else_correct)))))
(let ((anon131_Else_correct  (=> (and (<= |x#1_0_0@0| 0) (= (ControlFlow 0 149) 146)) anon38_correct)))
(let ((anon131_Then_correct  (=> (< 0 |x#1_0_0@0|) (and (=> (= (ControlFlow 0 147) (- 0 148)) ($Is intType (int_2_U (- |x#1_0_0@0| 1)) Tclass._System.nat)) (=> ($Is intType (int_2_U (- |x#1_0_0@0| 1)) Tclass._System.nat) (=> (= |##k#1_0_0_2_1@0| (- |x#1_0_0@0| 1)) (=> (and (and ($IsAlloc intType (int_2_U |##k#1_0_0_2_1@0|) Tclass._System.nat $Heap) ($IsAlloc intType (int_2_U |n#0@@5|) Tclass._System.nat $Heap)) (and (|_module.__default.Bit#canCall| (- |x#1_0_0@0| 1) |n#0@@5|) (= (ControlFlow 0 147) 146))) anon38_correct)))))))
(let ((anon36_correct  (=> (=> (and (< 0 |x#1_0_0@0|) (< |x#1_0_0@0| (Mul (LitInt 2) |n#0@@5|))) (|_module.__default.Bit#canCall| (- |x#1_0_0@0| 1) |n#0@@5|)) (and (=> (= (ControlFlow 0 150) 147) anon131_Then_correct) (=> (= (ControlFlow 0 150) 149) anon131_Else_correct)))))
(let ((anon130_Else_correct  (=> (and (not (and (< 0 |x#1_0_0@0|) (< |x#1_0_0@0| (Mul (LitInt 2) |n#0@@5|)))) (= (ControlFlow 0 152) 150)) anon36_correct)))
(let ((anon130_Then_correct  (=> (and (and (and (< 0 |x#1_0_0@0|) (< |x#1_0_0@0| (Mul (LitInt 2) |n#0@@5|))) (and ($Is intType (int_2_U (- |x#1_0_0@0| 1)) Tclass._System.nat) (= |##k#1_0_0_2_0@0| (- |x#1_0_0@0| 1)))) (and (and ($IsAlloc intType (int_2_U |##k#1_0_0_2_0@0|) Tclass._System.nat $Heap) ($IsAlloc intType (int_2_U |n#0@@5|) Tclass._System.nat $Heap)) (and (|_module.__default.Bit#canCall| (- |x#1_0_0@0| 1) |n#0@@5|) (= (ControlFlow 0 151) 150)))) anon36_correct)))
(let ((anon129_Else_correct  (=> (<= |x#1_0_0@0| 0) (and (=> (= (ControlFlow 0 154) 151) anon130_Then_correct) (=> (= (ControlFlow 0 154) 152) anon130_Else_correct)))))
(let ((anon129_Then_correct  (=> (< 0 |x#1_0_0@0|) (and (=> (= (ControlFlow 0 153) 151) anon130_Then_correct) (=> (= (ControlFlow 0 153) 152) anon130_Else_correct)))))
(let ((anon31_correct  (=> (and (=> (and (< 0 |x#1_0_0@0|) (< |x#1_0_0@0| (Mul (LitInt 2) |n#0@@5|))) (|_module.__default.Bit#canCall| (- |x#1_0_0@0| 1) |n#0@@5|)) (= (ControlFlow 0 114) (- 0 113))) (=  (and (and (< 0 |x#1_0_0@0|) (< |x#1_0_0@0| (Mul (LitInt 2) |n#0@@5|))) (_module.__default.Bit ($LS ($LS $LZ)) |x#1_0_0@0| (Mul (LitInt 2) |n#0@@5|)))  (and (and (< 0 |x#1_0_0@0|) (< |x#1_0_0@0| (Mul (LitInt 2) |n#0@@5|))) (_module.__default.Bit ($LS ($LS $LZ)) (- |x#1_0_0@0| 1) |n#0@@5|))))))
(let ((anon127_Else_correct  (=> (and (not (and (< 0 |x#1_0_0@0|) (< |x#1_0_0@0| (Mul (LitInt 2) |n#0@@5|)))) (= (ControlFlow 0 117) 114)) anon31_correct)))
(let ((anon127_Then_correct  (=> (and (< 0 |x#1_0_0@0|) (< |x#1_0_0@0| (Mul (LitInt 2) |n#0@@5|))) (and (=> (= (ControlFlow 0 115) (- 0 116)) ($Is intType (int_2_U (- |x#1_0_0@0| 1)) Tclass._System.nat)) (=> ($Is intType (int_2_U (- |x#1_0_0@0| 1)) Tclass._System.nat) (=> (= |##k#1_0_0_3_3@0| (- |x#1_0_0@0| 1)) (=> (and (and ($IsAlloc intType (int_2_U |##k#1_0_0_3_3@0|) Tclass._System.nat $Heap) ($IsAlloc intType (int_2_U |n#0@@5|) Tclass._System.nat $Heap)) (and (|_module.__default.Bit#canCall| (- |x#1_0_0@0| 1) |n#0@@5|) (= (ControlFlow 0 115) 114))) anon31_correct)))))))
(let ((anon126_Else_correct  (=> (<= |x#1_0_0@0| 0) (and (=> (= (ControlFlow 0 119) 115) anon127_Then_correct) (=> (= (ControlFlow 0 119) 117) anon127_Else_correct)))))
(let ((anon126_Then_correct  (=> (< 0 |x#1_0_0@0|) (and (=> (= (ControlFlow 0 118) 115) anon127_Then_correct) (=> (= (ControlFlow 0 118) 117) anon127_Else_correct)))))
(let ((anon27_correct  (=> (=> (< 0 |x#1_0_0@0|) (and (|_module.__default.Bit#canCall| |x#1_0_0@0| |nn#1_0@0|) (|_module.__default.Bit#canCall| (- |x#1_0_0@0| 1) (Div |nn#1_0@0| (LitInt 2))))) (and (=> (= (ControlFlow 0 120) (- 0 121)) (=> (< 0 |x#1_0_0@0|) (= (_module.__default.Bit ($LS ($LS $LZ)) |x#1_0_0@0| |nn#1_0@0|) (_module.__default.Bit ($LS ($LS $LZ)) (- |x#1_0_0@0| 1) (Div |nn#1_0@0| (LitInt 2)))))) (=> (=> (< 0 |x#1_0_0@0|) (= (_module.__default.Bit ($LS $LZ) |x#1_0_0@0| |nn#1_0@0|) (_module.__default.Bit ($LS $LZ) (- |x#1_0_0@0| 1) (Div |nn#1_0@0| (LitInt 2))))) (and (=> (= (ControlFlow 0 120) 118) anon126_Then_correct) (=> (= (ControlFlow 0 120) 119) anon126_Else_correct)))))))
(let ((anon125_Else_correct  (=> (and (<= |x#1_0_0@0| 0) (= (ControlFlow 0 127) 120)) anon27_correct)))
(let ((anon125_Then_correct  (=> (and (< 0 |x#1_0_0@0|) ($IsAlloc intType (int_2_U |x#1_0_0@0|) Tclass._System.nat $Heap)) (and (=> (= (ControlFlow 0 122) (- 0 126)) ($Is intType (int_2_U |nn#1_0@0|) Tclass._System.nat)) (=> ($Is intType (int_2_U |nn#1_0@0|) Tclass._System.nat) (=> (and ($IsAlloc intType (int_2_U |nn#1_0@0|) Tclass._System.nat $Heap) (|_module.__default.Bit#canCall| |x#1_0_0@0| |nn#1_0@0|)) (and (=> (= (ControlFlow 0 122) (- 0 125)) ($Is intType (int_2_U (- |x#1_0_0@0| 1)) Tclass._System.nat)) (=> ($Is intType (int_2_U (- |x#1_0_0@0| 1)) Tclass._System.nat) (=> (and (= |##k#1_0_0_3_2@0| (- |x#1_0_0@0| 1)) ($IsAlloc intType (int_2_U |##k#1_0_0_3_2@0|) Tclass._System.nat $Heap)) (and (=> (= (ControlFlow 0 122) (- 0 124)) (or (not (= (LitInt 2) 0)) (not true))) (and (=> (= (ControlFlow 0 122) (- 0 123)) ($Is intType (int_2_U (Div |nn#1_0@0| (LitInt 2))) Tclass._System.nat)) (=> ($Is intType (int_2_U (Div |nn#1_0@0| (LitInt 2))) Tclass._System.nat) (=> (and (and (= |##n#1_0_0_3_2@0| (Div |nn#1_0@0| (LitInt 2))) ($IsAlloc intType (int_2_U |##n#1_0_0_3_2@0|) Tclass._System.nat $Heap)) (and (|_module.__default.Bit#canCall| (- |x#1_0_0@0| 1) (Div |nn#1_0@0| (LitInt 2))) (= (ControlFlow 0 122) 120))) anon27_correct)))))))))))))
(let ((anon25_correct  (=> (=> (and (< 0 |x#1_0_0@0|) (< |x#1_0_0@0| (Mul (LitInt 2) |n#0@@5|))) (|_module.__default.Bit#canCall| |x#1_0_0@0| (Mul (LitInt 2) |n#0@@5|))) (and (=> (= (ControlFlow 0 128) 122) anon125_Then_correct) (=> (= (ControlFlow 0 128) 127) anon125_Else_correct)))))
(let ((anon124_Else_correct  (=> (and (not (and (< 0 |x#1_0_0@0|) (< |x#1_0_0@0| (Mul (LitInt 2) |n#0@@5|)))) (= (ControlFlow 0 130) 128)) anon25_correct)))
(let ((anon124_Then_correct  (=> (and (and (and (< 0 |x#1_0_0@0|) (< |x#1_0_0@0| (Mul (LitInt 2) |n#0@@5|))) (and ($IsAlloc intType (int_2_U |x#1_0_0@0|) Tclass._System.nat $Heap) ($Is intType (int_2_U (Mul (LitInt 2) |n#0@@5|)) Tclass._System.nat))) (and (and (= |##n#1_0_0_3_0@0| (Mul (LitInt 2) |n#0@@5|)) ($IsAlloc intType (int_2_U |##n#1_0_0_3_0@0|) Tclass._System.nat $Heap)) (and (|_module.__default.Bit#canCall| |x#1_0_0@0| (Mul (LitInt 2) |n#0@@5|)) (= (ControlFlow 0 129) 128)))) anon25_correct)))
(let ((anon123_Else_correct  (=> (<= |x#1_0_0@0| 0) (and (=> (= (ControlFlow 0 132) 129) anon124_Then_correct) (=> (= (ControlFlow 0 132) 130) anon124_Else_correct)))))
(let ((anon123_Then_correct  (=> (< 0 |x#1_0_0@0|) (and (=> (= (ControlFlow 0 131) 129) anon124_Then_correct) (=> (= (ControlFlow 0 131) 130) anon124_Else_correct)))))
(let ((anon20_correct  (=> (and (=> (and (< 0 |x#1_0_0@0|) (< |x#1_0_0@0| (Mul (LitInt 2) |n#0@@5|))) (|_module.__default.Bit#canCall| |x#1_0_0@0| (Mul (LitInt 2) |n#0@@5|))) (= (ControlFlow 0 102) (- 0 101))) (=  (and (and (<= (LitInt 0) |x#1_0_0@0|) (< |x#1_0_0@0| (Mul (LitInt 2) |n#0@@5|))) (_module.__default.Bit ($LS ($LS $LZ)) |x#1_0_0@0| (Mul (LitInt 2) |n#0@@5|)))  (and (and (< 0 |x#1_0_0@0|) (< |x#1_0_0@0| (Mul (LitInt 2) |n#0@@5|))) (_module.__default.Bit ($LS ($LS $LZ)) |x#1_0_0@0| (Mul (LitInt 2) |n#0@@5|)))))))
(let ((anon121_Else_correct  (=> (and (not (and (< 0 |x#1_0_0@0|) (< |x#1_0_0@0| (Mul (LitInt 2) |n#0@@5|)))) (= (ControlFlow 0 105) 102)) anon20_correct)))
(let ((anon121_Then_correct  (=> (and (and (< 0 |x#1_0_0@0|) (< |x#1_0_0@0| (Mul (LitInt 2) |n#0@@5|))) ($IsAlloc intType (int_2_U |x#1_0_0@0|) Tclass._System.nat $Heap@4)) (and (=> (= (ControlFlow 0 103) (- 0 104)) ($Is intType (int_2_U (Mul (LitInt 2) |n#0@@5|)) Tclass._System.nat)) (=> ($Is intType (int_2_U (Mul (LitInt 2) |n#0@@5|)) Tclass._System.nat) (=> (and (and (= |##n#1_0_0_4_1@0| (Mul (LitInt 2) |n#0@@5|)) ($IsAlloc intType (int_2_U |##n#1_0_0_4_1@0|) Tclass._System.nat $Heap@4)) (and (|_module.__default.Bit#canCall| |x#1_0_0@0| (Mul (LitInt 2) |n#0@@5|)) (= (ControlFlow 0 103) 102))) anon20_correct))))))
(let ((anon120_Else_correct  (=> (<= |x#1_0_0@0| 0) (and (=> (= (ControlFlow 0 107) 103) anon121_Then_correct) (=> (= (ControlFlow 0 107) 105) anon121_Else_correct)))))
(let ((anon120_Then_correct  (=> (< 0 |x#1_0_0@0|) (and (=> (= (ControlFlow 0 106) 103) anon121_Then_correct) (=> (= (ControlFlow 0 106) 105) anon121_Else_correct)))))
(let ((anon16_correct  (=> (=> (and (<= (LitInt 0) |x#1_0_0@0|) (< |x#1_0_0@0| (Mul (LitInt 2) |n#0@@5|))) (|_module.__default.Bit#canCall| |x#1_0_0@0| (Mul (LitInt 2) |n#0@@5|))) (=> (and (and (and ($IsGoodHeap $Heap@4) ($IsHeapAnchor $Heap@4)) (|_module.__default.Bit#canCall| (LitInt 0) (Mul (LitInt 2) |n#0@@5|))) (and (not (_module.__default.Bit ($LS ($LS $LZ)) (LitInt 0) (Mul (LitInt 2) |n#0@@5|))) (= $Heap $Heap@4))) (and (=> (= (ControlFlow 0 108) 106) anon120_Then_correct) (=> (= (ControlFlow 0 108) 107) anon120_Else_correct))))))
(let ((anon119_Else_correct  (=> (and (not (and (<= (LitInt 0) |x#1_0_0@0|) (< |x#1_0_0@0| (Mul (LitInt 2) |n#0@@5|)))) (= (ControlFlow 0 110) 108)) anon16_correct)))
(let ((anon119_Then_correct  (=> (and (and (and (<= (LitInt 0) |x#1_0_0@0|) (< |x#1_0_0@0| (Mul (LitInt 2) |n#0@@5|))) (and ($IsAlloc intType (int_2_U |x#1_0_0@0|) Tclass._System.nat $Heap) ($Is intType (int_2_U (Mul (LitInt 2) |n#0@@5|)) Tclass._System.nat))) (and (and (= |##n#1_0_0_4_0@0| (Mul (LitInt 2) |n#0@@5|)) ($IsAlloc intType (int_2_U |##n#1_0_0_4_0@0|) Tclass._System.nat $Heap)) (and (|_module.__default.Bit#canCall| |x#1_0_0@0| (Mul (LitInt 2) |n#0@@5|)) (= (ControlFlow 0 109) 108)))) anon16_correct)))
(let ((anon118_Else_correct  (=> (< |x#1_0_0@0| (LitInt 0)) (and (=> (= (ControlFlow 0 112) 109) anon119_Then_correct) (=> (= (ControlFlow 0 112) 110) anon119_Else_correct)))))
(let ((anon118_Then_correct  (=> (<= (LitInt 0) |x#1_0_0@0|) (and (=> (= (ControlFlow 0 111) 109) anon119_Then_correct) (=> (= (ControlFlow 0 111) 110) anon119_Else_correct)))))
(let ((anon138_Else_correct  (=> (and (= (|Set#IsMember| (_module.__default.BitSet (Mul (LitInt 2) |n#0@@5|)) ($Box intType (int_2_U |x#1_0_0@0|))) (|Set#IsMember| (_module.__default.Suc (_module.__default.BitSet |n#0@@5|)) ($Box intType (int_2_U |x#1_0_0@0|)))) (= (ControlFlow 0 100) (- 0 99))) (= (|Set#IsMember| (_module.__default.BitSet (Mul (LitInt 2) |n#0@@5|)) ($Box intType (int_2_U |x#1_0_0@0|))) (|Set#IsMember| (_module.__default.Suc (_module.__default.BitSet |n#0@@5|)) ($Box intType (int_2_U |x#1_0_0@0|)))))))
(let ((anon138_Then_correct  (=> (and (and ($IsAlloc intType (int_2_U |n#0@@5|) Tclass._System.nat $Heap) (|_module.__default.BitSet#canCall| |n#0@@5|)) (and (|_module.__default.BitSet#canCall| |n#0@@5|) ($IsAlloc intType (int_2_U |n#0@@5|) Tclass._System.nat $Heap))) (=> (and (and (and (|_module.__default.BitSet#canCall| |n#0@@5|) (= |##S#1_0_0_0_0@0| (_module.__default.BitSet |n#0@@5|))) (and ($IsAlloc SetType |##S#1_0_0_0_0@0| (TSet Tclass._System.nat) $Heap) (|_module.__default.Suc#canCall| (_module.__default.BitSet |n#0@@5|)))) (and (and (|_module.__default.BitSet#canCall| |n#0@@5|) (|_module.__default.Suc#canCall| (_module.__default.BitSet |n#0@@5|))) (= (ControlFlow 0 98) (- 0 97)))) (= (|Set#IsMember| (_module.__default.BitSet |n#0@@5|) ($Box intType (int_2_U (- |x#1_0_0@0| 1)))) (|Set#IsMember| (_module.__default.Suc (_module.__default.BitSet |n#0@@5|)) ($Box intType (int_2_U |x#1_0_0@0|))))))))
(let ((anon113_Then_correct  (=> (= (ControlFlow 0 96) (- 0 95)) ($Is intType (int_2_U (Mul (LitInt 2) |n#0@@5|)) Tclass._System.nat))))
(let ((anon112_Else_correct  (and (and (and (and (and (and (and (and (and (and (and (=> (= (ControlFlow 0 169) 96) anon113_Then_correct) (=> (= (ControlFlow 0 169) 168) anon114_Then_correct)) (=> (= (ControlFlow 0 169) 98) anon138_Then_correct)) (=> (= (ControlFlow 0 169) 100) anon138_Else_correct)) (=> (= (ControlFlow 0 169) 159) anon136_Then_correct)) (=> (= (ControlFlow 0 169) 160) anon136_Else_correct)) (=> (= (ControlFlow 0 169) 153) anon129_Then_correct)) (=> (= (ControlFlow 0 169) 154) anon129_Else_correct)) (=> (= (ControlFlow 0 169) 131) anon123_Then_correct)) (=> (= (ControlFlow 0 169) 132) anon123_Else_correct)) (=> (= (ControlFlow 0 169) 111) anon118_Then_correct)) (=> (= (ControlFlow 0 169) 112) anon118_Else_correct))))
(let ((anon112_Then_correct  (=> (= (ControlFlow 0 94) (- 0 93)) ($Is intType (int_2_U (Mul (LitInt 2) |n#0@@5|)) Tclass._System.nat))))
(let ((anon111_Then_correct  (=> (<= (LitInt 0) |x#1_0_0@0|) (and (=> (= (ControlFlow 0 170) 94) anon112_Then_correct) (=> (= (ControlFlow 0 170) 169) anon112_Else_correct)))))
(let ((anon63_correct  (=> (and (=> (and (<= (LitInt 0) |x#1_1_0@0|) (< |x#1_1_0@0| (+ (Mul (LitInt 2) |n#0@@5|) 1))) (|_module.__default.Bit#canCall| |x#1_1_0@0| (+ (Mul (LitInt 2) |n#0@@5|) 1))) (= (ControlFlow 0 84) (- 0 83))) (= (|Set#IsMember| (_module.__default.BitSet (+ (Mul (LitInt 2) |n#0@@5|) 1)) ($Box intType (int_2_U |x#1_1_0@0|)))  (and (and (<= (LitInt 0) |x#1_1_0@0|) (< |x#1_1_0@0| (+ (Mul (LitInt 2) |n#0@@5|) 1))) (_module.__default.Bit ($LS ($LS $LZ)) |x#1_1_0@0| (+ (Mul (LitInt 2) |n#0@@5|) 1)))))))
(let ((anon144_Else_correct  (=> (and (not (and (<= (LitInt 0) |x#1_1_0@0|) (< |x#1_1_0@0| (+ (Mul (LitInt 2) |n#0@@5|) 1)))) (= (ControlFlow 0 87) 84)) anon63_correct)))
(let ((anon144_Then_correct  (=> (and (and (<= (LitInt 0) |x#1_1_0@0|) (< |x#1_1_0@0| (+ (Mul (LitInt 2) |n#0@@5|) 1))) ($IsAlloc intType (int_2_U |x#1_1_0@0|) Tclass._System.nat $Heap)) (and (=> (= (ControlFlow 0 85) (- 0 86)) ($Is intType (int_2_U (+ (Mul (LitInt 2) |n#0@@5|) 1)) Tclass._System.nat)) (=> ($Is intType (int_2_U (+ (Mul (LitInt 2) |n#0@@5|) 1)) Tclass._System.nat) (=> (and (and (= |##n#1_1_0_5_1@0| (+ (Mul (LitInt 2) |n#0@@5|) 1)) ($IsAlloc intType (int_2_U |##n#1_1_0_5_1@0|) Tclass._System.nat $Heap)) (and (|_module.__default.Bit#canCall| |x#1_1_0@0| (+ (Mul (LitInt 2) |n#0@@5|) 1)) (= (ControlFlow 0 85) 84))) anon63_correct))))))
(let ((anon143_Else_correct  (=> (< |x#1_1_0@0| (LitInt 0)) (and (=> (= (ControlFlow 0 89) 85) anon144_Then_correct) (=> (= (ControlFlow 0 89) 87) anon144_Else_correct)))))
(let ((anon143_Then_correct  (=> (<= (LitInt 0) |x#1_1_0@0|) (and (=> (= (ControlFlow 0 88) 85) anon144_Then_correct) (=> (= (ControlFlow 0 88) 87) anon144_Else_correct)))))
(let ((anon142_Then_correct  (=> ($Is intType (int_2_U (+ (Mul (LitInt 2) |n#0@@5|) 1)) Tclass._System.nat) (=> (and (and (= |##n#1_1_0_5_0@0| (+ (Mul (LitInt 2) |n#0@@5|) 1)) ($IsAlloc intType (int_2_U |##n#1_1_0_5_0@0|) Tclass._System.nat $Heap)) (and (|_module.__default.BitSet#canCall| (+ (Mul (LitInt 2) |n#0@@5|) 1)) (|_module.__default.BitSet#canCall| (+ (Mul (LitInt 2) |n#0@@5|) 1)))) (and (=> (= (ControlFlow 0 90) 88) anon143_Then_correct) (=> (= (ControlFlow 0 90) 89) anon143_Else_correct))))))
(let ((anon107_correct  (=> (=> (or (not (= |x#1_1_0@0| (LitInt 0))) (not true)) (and (|_module.__default.BitSet#canCall| |n#0@@5|) (|_module.__default.Suc#canCall| (_module.__default.BitSet |n#0@@5|)))) (and (=> (= (ControlFlow 0 79) (- 0 80)) ($Is intType (int_2_U (LitInt 0)) Tclass._System.nat)) (=> ($Is intType (int_2_U (LitInt 0)) Tclass._System.nat) (=> ($IsAlloc intType (int_2_U |n#0@@5|) Tclass._System.nat $Heap) (=> (and (and (and (|_module.__default.BitSet#canCall| |n#0@@5|) (= |##S#1_1_0_0_1@0| (_module.__default.BitSet |n#0@@5|))) (and ($IsAlloc SetType |##S#1_1_0_0_1@0| (TSet Tclass._System.nat) $Heap) (|_module.__default.Suc#canCall| (_module.__default.BitSet |n#0@@5|)))) (and (and (|_module.__default.BitSet#canCall| |n#0@@5|) (|_module.__default.Suc#canCall| (_module.__default.BitSet |n#0@@5|))) (= (ControlFlow 0 79) (- 0 78)))) (=  (or (= |x#1_1_0@0| (LitInt 0)) (|Set#IsMember| (_module.__default.Suc (_module.__default.BitSet |n#0@@5|)) ($Box intType (int_2_U |x#1_1_0@0|)))) (|Set#IsMember| (|Set#Union| (|Set#UnionOne| |Set#Empty| ($Box intType (int_2_U (LitInt 0)))) (_module.__default.Suc (_module.__default.BitSet |n#0@@5|))) ($Box intType (int_2_U |x#1_1_0@0|)))))))))))
(let ((anon170_Else_correct  (=> (and (= |x#1_1_0@0| (LitInt 0)) (= (ControlFlow 0 82) 79)) anon107_correct)))
(let ((anon170_Then_correct  (=> (or (not (= |x#1_1_0@0| (LitInt 0))) (not true)) (=> (and ($IsAlloc intType (int_2_U |n#0@@5|) Tclass._System.nat $Heap) (|_module.__default.BitSet#canCall| |n#0@@5|)) (=> (and (and (= |##S#1_1_0_0_0@0| (_module.__default.BitSet |n#0@@5|)) ($IsAlloc SetType |##S#1_1_0_0_0@0| (TSet Tclass._System.nat) $Heap)) (and (|_module.__default.Suc#canCall| (_module.__default.BitSet |n#0@@5|)) (= (ControlFlow 0 81) 79))) anon107_correct)))))
(let ((anon104_correct  (=> (and (=> (or (not (= |x#1_1_0@0| (LitInt 0))) (not true)) (and (|_module.__default.BitSet#canCall| |n#0@@5|) (|_module.__default.Suc#canCall| (_module.__default.BitSet |n#0@@5|)))) (= (ControlFlow 0 72) (- 0 71))) (=  (or (= |x#1_1_0@0| (LitInt 0)) (|Set#IsMember| (_module.__default.BitSet |n#0@@5|) ($Box intType (int_2_U (- |x#1_1_0@0| 1)))))  (or (= |x#1_1_0@0| (LitInt 0)) (|Set#IsMember| (_module.__default.Suc (_module.__default.BitSet |n#0@@5|)) ($Box intType (int_2_U |x#1_1_0@0|))))))))
(let ((anon168_Else_correct  (=> (and (= |x#1_1_0@0| (LitInt 0)) (= (ControlFlow 0 74) 72)) anon104_correct)))
(let ((anon168_Then_correct  (=> (or (not (= |x#1_1_0@0| (LitInt 0))) (not true)) (=> (and ($IsAlloc intType (int_2_U |n#0@@5|) Tclass._System.nat $Heap) (|_module.__default.BitSet#canCall| |n#0@@5|)) (=> (and (and (= |##S#1_1_0_1_0@0| (_module.__default.BitSet |n#0@@5|)) ($IsAlloc SetType |##S#1_1_0_1_0@0| (TSet Tclass._System.nat) $Heap)) (and (|_module.__default.Suc#canCall| (_module.__default.BitSet |n#0@@5|)) (= (ControlFlow 0 73) 72))) anon104_correct)))))
(let ((anon102_correct  (=> (=> (or (not (= |x#1_1_0@0| (LitInt 0))) (not true)) (|_module.__default.BitSet#canCall| |n#0@@5|)) (and (=> (= (ControlFlow 0 75) 73) anon168_Then_correct) (=> (= (ControlFlow 0 75) 74) anon168_Else_correct)))))
(let ((anon167_Else_correct  (=> (and (= |x#1_1_0@0| (LitInt 0)) (= (ControlFlow 0 77) 75)) anon102_correct)))
(let ((anon167_Then_correct  (=> (and (and (or (not (= |x#1_1_0@0| (LitInt 0))) (not true)) ($IsAlloc intType (int_2_U |n#0@@5|) Tclass._System.nat $Heap)) (and (|_module.__default.BitSet#canCall| |n#0@@5|) (= (ControlFlow 0 76) 75))) anon102_correct)))
(let ((anon99_correct  (=> (and (=> (or (not (= |x#1_1_0@0| (LitInt 0))) (not true)) (|_module.__default.BitSet#canCall| |n#0@@5|)) (= (ControlFlow 0 52) (- 0 51))) (=  (or (= |x#1_1_0@0| (LitInt 0)) (and (and (< 0 |x#1_1_0@0|) (< |x#1_1_0@0| (+ (Mul (LitInt 2) |n#0@@5|) 1))) (_module.__default.Bit ($LS ($LS $LZ)) (- |x#1_1_0@0| 1) |n#0@@5|)))  (or (= |x#1_1_0@0| (LitInt 0)) (|Set#IsMember| (_module.__default.BitSet |n#0@@5|) ($Box intType (int_2_U (- |x#1_1_0@0| 1)))))))))
(let ((anon165_Else_correct  (=> (and (= |x#1_1_0@0| (LitInt 0)) (= (ControlFlow 0 54) 52)) anon99_correct)))
(let ((anon165_Then_correct  (=> (and (and (or (not (= |x#1_1_0@0| (LitInt 0))) (not true)) ($IsAlloc intType (int_2_U |n#0@@5|) Tclass._System.nat $Heap@1)) (and (|_module.__default.BitSet#canCall| |n#0@@5|) (= (ControlFlow 0 53) 52))) anon99_correct)))
(let ((anon164_Else_correct  (=> (and (not (and (< 0 |x#1_1_0@0|) (_module.__default.Bit ($LS $LZ) (- |x#1_1_0@0| 1) |n#0@@5|))) (= $Heap@1 $Heap)) (and (=> (= (ControlFlow 0 59) 53) anon165_Then_correct) (=> (= (ControlFlow 0 59) 54) anon165_Else_correct)))))
(let ((anon164_Then_correct  (=> (and (< 0 |x#1_1_0@0|) (_module.__default.Bit ($LS $LZ) (- |x#1_1_0@0| 1) |n#0@@5|)) (and (=> (= (ControlFlow 0 55) (- 0 58)) ($Is intType (int_2_U (- |x#1_1_0@0| 1)) Tclass._System.nat)) (=> ($Is intType (int_2_U (- |x#1_1_0@0| 1)) Tclass._System.nat) (=> (= |i##1_1_0_2_0_0@0| (- |x#1_1_0@0| 1)) (and (=> (= (ControlFlow 0 55) (- 0 57)) (=> (|_module.__default.Bit#canCall| |i##1_1_0_2_0_0@0| |n#0@@5|) (or (_module.__default.Bit ($LS $LZ) |i##1_1_0_2_0_0@0| |n#0@@5|) (=> (= |i##1_1_0_2_0_0@0| (LitInt 0)) (= (Mod |n#0@@5| (LitInt 2)) (LitInt 1)))))) (=> (=> (|_module.__default.Bit#canCall| |i##1_1_0_2_0_0@0| |n#0@@5|) (or (_module.__default.Bit ($LS $LZ) |i##1_1_0_2_0_0@0| |n#0@@5|) (=> (= |i##1_1_0_2_0_0@0| (LitInt 0)) (= (Mod |n#0@@5| (LitInt 2)) (LitInt 1))))) (and (=> (= (ControlFlow 0 55) (- 0 56)) (=> (|_module.__default.Bit#canCall| |i##1_1_0_2_0_0@0| |n#0@@5|) (or (_module.__default.Bit ($LS $LZ) |i##1_1_0_2_0_0@0| |n#0@@5|) (=> (or (not (= |i##1_1_0_2_0_0@0| (LitInt 0))) (not true)) (_module.__default.Bit ($LS ($LS $LZ)) (- |i##1_1_0_2_0_0@0| 1) (Div |n#0@@5| (LitInt 2))))))) (=> (=> (|_module.__default.Bit#canCall| |i##1_1_0_2_0_0@0| |n#0@@5|) (or (_module.__default.Bit ($LS $LZ) |i##1_1_0_2_0_0@0| |n#0@@5|) (=> (or (not (= |i##1_1_0_2_0_0@0| (LitInt 0))) (not true)) (_module.__default.Bit ($LS ($LS $LZ)) (- |i##1_1_0_2_0_0@0| 1) (Div |n#0@@5| (LitInt 2)))))) (=> (and (and (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (< |i##1_1_0_2_0_0@0| |n#0@@5|)) (and (= $Heap $Heap@0) (= $Heap@1 $Heap@0))) (and (=> (= (ControlFlow 0 55) 53) anon165_Then_correct) (=> (= (ControlFlow 0 55) 54) anon165_Else_correct)))))))))))))
(let ((anon94_correct  (=> (=> (< 0 |x#1_1_0@0|) (|_module.__default.Bit#canCall| (- |x#1_1_0@0| 1) |n#0@@5|)) (and (=> (= (ControlFlow 0 60) 55) anon164_Then_correct) (=> (= (ControlFlow 0 60) 59) anon164_Else_correct)))))
(let ((anon163_Else_correct  (=> (and (<= |x#1_1_0@0| 0) (= (ControlFlow 0 63) 60)) anon94_correct)))
(let ((anon163_Then_correct  (=> (< 0 |x#1_1_0@0|) (and (=> (= (ControlFlow 0 61) (- 0 62)) ($Is intType (int_2_U (- |x#1_1_0@0| 1)) Tclass._System.nat)) (=> ($Is intType (int_2_U (- |x#1_1_0@0| 1)) Tclass._System.nat) (=> (= |##k#1_1_0_2_1@0| (- |x#1_1_0@0| 1)) (=> (and (and ($IsAlloc intType (int_2_U |##k#1_1_0_2_1@0|) Tclass._System.nat $Heap) ($IsAlloc intType (int_2_U |n#0@@5|) Tclass._System.nat $Heap)) (and (|_module.__default.Bit#canCall| (- |x#1_1_0@0| 1) |n#0@@5|) (= (ControlFlow 0 61) 60))) anon94_correct)))))))
(let ((anon92_correct  (=> (=> (or (not (= |x#1_1_0@0| (LitInt 0))) (not true)) (=> (and (< 0 |x#1_1_0@0|) (< |x#1_1_0@0| (+ (Mul (LitInt 2) |n#0@@5|) 1))) (|_module.__default.Bit#canCall| (- |x#1_1_0@0| 1) |n#0@@5|))) (and (=> (= (ControlFlow 0 64) 61) anon163_Then_correct) (=> (= (ControlFlow 0 64) 63) anon163_Else_correct)))))
(let ((anon162_Else_correct  (=> (and (not (and (< 0 |x#1_1_0@0|) (< |x#1_1_0@0| (+ (Mul (LitInt 2) |n#0@@5|) 1)))) (= (ControlFlow 0 67) 64)) anon92_correct)))
(let ((anon162_Then_correct  (=> (and (and (and (< 0 |x#1_1_0@0|) (< |x#1_1_0@0| (+ (Mul (LitInt 2) |n#0@@5|) 1))) (and ($Is intType (int_2_U (- |x#1_1_0@0| 1)) Tclass._System.nat) (= |##k#1_1_0_2_0@0| (- |x#1_1_0@0| 1)))) (and (and ($IsAlloc intType (int_2_U |##k#1_1_0_2_0@0|) Tclass._System.nat $Heap) ($IsAlloc intType (int_2_U |n#0@@5|) Tclass._System.nat $Heap)) (and (|_module.__default.Bit#canCall| (- |x#1_1_0@0| 1) |n#0@@5|) (= (ControlFlow 0 66) 64)))) anon92_correct)))
(let ((anon161_Else_correct  (=> (<= |x#1_1_0@0| 0) (and (=> (= (ControlFlow 0 69) 66) anon162_Then_correct) (=> (= (ControlFlow 0 69) 67) anon162_Else_correct)))))
(let ((anon161_Then_correct  (=> (< 0 |x#1_1_0@0|) (and (=> (= (ControlFlow 0 68) 66) anon162_Then_correct) (=> (= (ControlFlow 0 68) 67) anon162_Else_correct)))))
(let ((anon160_Then_correct  (=> (or (not (= |x#1_1_0@0| (LitInt 0))) (not true)) (and (=> (= (ControlFlow 0 70) 68) anon161_Then_correct) (=> (= (ControlFlow 0 70) 69) anon161_Else_correct)))))
(let ((anon160_Else_correct  (=> (and (= |x#1_1_0@0| (LitInt 0)) (= (ControlFlow 0 65) 64)) anon92_correct)))
(let ((anon86_correct  (=> (and (=> (or (not (= |x#1_1_0@0| (LitInt 0))) (not true)) (=> (and (< 0 |x#1_1_0@0|) (< |x#1_1_0@0| (+ (Mul (LitInt 2) |n#0@@5|) 1))) (|_module.__default.Bit#canCall| (- |x#1_1_0@0| 1) |n#0@@5|))) (= (ControlFlow 0 34) (- 0 33))) (=  (or (= |x#1_1_0@0| (LitInt 0)) (and (and (< 0 |x#1_1_0@0|) (< |x#1_1_0@0| (+ (Mul (LitInt 2) |n#0@@5|) 1))) (_module.__default.Bit ($LS ($LS $LZ)) |x#1_1_0@0| (+ (Mul (LitInt 2) |n#0@@5|) 1))))  (or (= |x#1_1_0@0| (LitInt 0)) (and (and (< 0 |x#1_1_0@0|) (< |x#1_1_0@0| (+ (Mul (LitInt 2) |n#0@@5|) 1))) (_module.__default.Bit ($LS ($LS $LZ)) (- |x#1_1_0@0| 1) |n#0@@5|)))))))
(let ((anon158_Else_correct  (=> (and (not (and (< 0 |x#1_1_0@0|) (< |x#1_1_0@0| (+ (Mul (LitInt 2) |n#0@@5|) 1)))) (= (ControlFlow 0 38) 34)) anon86_correct)))
(let ((anon158_Then_correct  (=> (and (< 0 |x#1_1_0@0|) (< |x#1_1_0@0| (+ (Mul (LitInt 2) |n#0@@5|) 1))) (and (=> (= (ControlFlow 0 36) (- 0 37)) ($Is intType (int_2_U (- |x#1_1_0@0| 1)) Tclass._System.nat)) (=> ($Is intType (int_2_U (- |x#1_1_0@0| 1)) Tclass._System.nat) (=> (= |##k#1_1_0_3_1@0| (- |x#1_1_0@0| 1)) (=> (and (and ($IsAlloc intType (int_2_U |##k#1_1_0_3_1@0|) Tclass._System.nat $Heap) ($IsAlloc intType (int_2_U |n#0@@5|) Tclass._System.nat $Heap)) (and (|_module.__default.Bit#canCall| (- |x#1_1_0@0| 1) |n#0@@5|) (= (ControlFlow 0 36) 34))) anon86_correct)))))))
(let ((anon157_Else_correct  (=> (<= |x#1_1_0@0| 0) (and (=> (= (ControlFlow 0 40) 36) anon158_Then_correct) (=> (= (ControlFlow 0 40) 38) anon158_Else_correct)))))
(let ((anon157_Then_correct  (=> (< 0 |x#1_1_0@0|) (and (=> (= (ControlFlow 0 39) 36) anon158_Then_correct) (=> (= (ControlFlow 0 39) 38) anon158_Else_correct)))))
(let ((anon156_Then_correct  (=> (or (not (= |x#1_1_0@0| (LitInt 0))) (not true)) (and (=> (= (ControlFlow 0 41) 39) anon157_Then_correct) (=> (= (ControlFlow 0 41) 40) anon157_Else_correct)))))
(let ((anon156_Else_correct  (=> (and (= |x#1_1_0@0| (LitInt 0)) (= (ControlFlow 0 35) 34)) anon86_correct)))
(let ((anon81_correct  (=> (=> (or (not (= |x#1_1_0@0| (LitInt 0))) (not true)) (=> (and (< 0 |x#1_1_0@0|) (< |x#1_1_0@0| (+ (Mul (LitInt 2) |n#0@@5|) 1))) (|_module.__default.Bit#canCall| |x#1_1_0@0| (+ (Mul (LitInt 2) |n#0@@5|) 1)))) (and (=> (= (ControlFlow 0 42) (- 0 44)) (or (not (= (LitInt 2) 0)) (not true))) (and (=> (= (ControlFlow 0 42) (- 0 43)) (= (Div (+ (Mul (LitInt 2) |n#0@@5|) 1) (LitInt 2)) |n#0@@5|)) (=> (= (Div (+ (Mul (LitInt 2) |n#0@@5|) 1) (LitInt 2)) |n#0@@5|) (and (=> (= (ControlFlow 0 42) 41) anon156_Then_correct) (=> (= (ControlFlow 0 42) 35) anon156_Else_correct))))))))
(let ((anon155_Else_correct  (=> (and (not (and (< 0 |x#1_1_0@0|) (< |x#1_1_0@0| (+ (Mul (LitInt 2) |n#0@@5|) 1)))) (= (ControlFlow 0 47) 42)) anon81_correct)))
(let ((anon155_Then_correct  (=> (and (and (and (< 0 |x#1_1_0@0|) (< |x#1_1_0@0| (+ (Mul (LitInt 2) |n#0@@5|) 1))) (and ($IsAlloc intType (int_2_U |x#1_1_0@0|) Tclass._System.nat $Heap) ($Is intType (int_2_U (+ (Mul (LitInt 2) |n#0@@5|) 1)) Tclass._System.nat))) (and (and (= |##n#1_1_0_3_0@0| (+ (Mul (LitInt 2) |n#0@@5|) 1)) ($IsAlloc intType (int_2_U |##n#1_1_0_3_0@0|) Tclass._System.nat $Heap)) (and (|_module.__default.Bit#canCall| |x#1_1_0@0| (+ (Mul (LitInt 2) |n#0@@5|) 1)) (= (ControlFlow 0 46) 42)))) anon81_correct)))
(let ((anon154_Else_correct  (=> (<= |x#1_1_0@0| 0) (and (=> (= (ControlFlow 0 49) 46) anon155_Then_correct) (=> (= (ControlFlow 0 49) 47) anon155_Else_correct)))))
(let ((anon154_Then_correct  (=> (< 0 |x#1_1_0@0|) (and (=> (= (ControlFlow 0 48) 46) anon155_Then_correct) (=> (= (ControlFlow 0 48) 47) anon155_Else_correct)))))
(let ((anon153_Then_correct  (=> (or (not (= |x#1_1_0@0| (LitInt 0))) (not true)) (and (=> (= (ControlFlow 0 50) 48) anon154_Then_correct) (=> (= (ControlFlow 0 50) 49) anon154_Else_correct)))))
(let ((anon153_Else_correct  (=> (and (= |x#1_1_0@0| (LitInt 0)) (= (ControlFlow 0 45) 42)) anon81_correct)))
(let ((anon75_correct  (=> (and (=> (or (not (= |x#1_1_0@0| (LitInt 0))) (not true)) (=> (and (< 0 |x#1_1_0@0|) (< |x#1_1_0@0| (+ (Mul (LitInt 2) |n#0@@5|) 1))) (|_module.__default.Bit#canCall| |x#1_1_0@0| (+ (Mul (LitInt 2) |n#0@@5|) 1)))) (= (ControlFlow 0 14) (- 0 13))) (=  (and (and (<= (LitInt 0) |x#1_1_0@0|) (< |x#1_1_0@0| (+ (Mul (LitInt 2) |n#0@@5|) 1))) (_module.__default.Bit ($LS ($LS $LZ)) |x#1_1_0@0| (+ (Mul (LitInt 2) |n#0@@5|) 1)))  (or (= |x#1_1_0@0| (LitInt 0)) (and (and (< 0 |x#1_1_0@0|) (< |x#1_1_0@0| (+ (Mul (LitInt 2) |n#0@@5|) 1))) (_module.__default.Bit ($LS ($LS $LZ)) |x#1_1_0@0| (+ (Mul (LitInt 2) |n#0@@5|) 1))))))))
(let ((anon151_Else_correct  (=> (and (not (and (< 0 |x#1_1_0@0|) (< |x#1_1_0@0| (+ (Mul (LitInt 2) |n#0@@5|) 1)))) (= (ControlFlow 0 18) 14)) anon75_correct)))
(let ((anon151_Then_correct  (=> (and (and (< 0 |x#1_1_0@0|) (< |x#1_1_0@0| (+ (Mul (LitInt 2) |n#0@@5|) 1))) ($IsAlloc intType (int_2_U |x#1_1_0@0|) Tclass._System.nat $Heap)) (and (=> (= (ControlFlow 0 16) (- 0 17)) ($Is intType (int_2_U (+ (Mul (LitInt 2) |n#0@@5|) 1)) Tclass._System.nat)) (=> ($Is intType (int_2_U (+ (Mul (LitInt 2) |n#0@@5|) 1)) Tclass._System.nat) (=> (and (and (= |##n#1_1_0_4_2@0| (+ (Mul (LitInt 2) |n#0@@5|) 1)) ($IsAlloc intType (int_2_U |##n#1_1_0_4_2@0|) Tclass._System.nat $Heap)) (and (|_module.__default.Bit#canCall| |x#1_1_0@0| (+ (Mul (LitInt 2) |n#0@@5|) 1)) (= (ControlFlow 0 16) 14))) anon75_correct))))))
(let ((anon150_Else_correct  (=> (<= |x#1_1_0@0| 0) (and (=> (= (ControlFlow 0 20) 16) anon151_Then_correct) (=> (= (ControlFlow 0 20) 18) anon151_Else_correct)))))
(let ((anon150_Then_correct  (=> (< 0 |x#1_1_0@0|) (and (=> (= (ControlFlow 0 19) 16) anon151_Then_correct) (=> (= (ControlFlow 0 19) 18) anon151_Else_correct)))))
(let ((anon149_Then_correct  (=> (or (not (= |x#1_1_0@0| (LitInt 0))) (not true)) (and (=> (= (ControlFlow 0 21) 19) anon150_Then_correct) (=> (= (ControlFlow 0 21) 20) anon150_Else_correct)))))
(let ((anon149_Else_correct  (=> (and (= |x#1_1_0@0| (LitInt 0)) (= (ControlFlow 0 15) 14)) anon75_correct)))
(let ((anon70_correct  (=> (=> (= |x#1_1_0@0| (LitInt 0)) (|_module.__default.Bit#canCall| |x#1_1_0@0| (+ (Mul (LitInt 2) |n#0@@5|) 1))) (and (=> (= (ControlFlow 0 22) (- 0 24)) (=> (= |x#1_1_0@0| (LitInt 0)) (=> (|_module.__default.Bit#canCall| |x#1_1_0@0| (+ (Mul (LitInt 2) |n#0@@5|) 1)) (or (_module.__default.Bit ($LS $LZ) |x#1_1_0@0| (+ (Mul (LitInt 2) |n#0@@5|) 1)) (=> (= |x#1_1_0@0| (LitInt 0)) (= (Mod (+ (Mul (LitInt 2) |n#0@@5|) 1) (LitInt 2)) (LitInt 1))))))) (and (=> (= (ControlFlow 0 22) (- 0 23)) (=> (= |x#1_1_0@0| (LitInt 0)) (=> (|_module.__default.Bit#canCall| |x#1_1_0@0| (+ (Mul (LitInt 2) |n#0@@5|) 1)) (or (_module.__default.Bit ($LS $LZ) |x#1_1_0@0| (+ (Mul (LitInt 2) |n#0@@5|) 1)) (=> (or (not (= |x#1_1_0@0| (LitInt 0))) (not true)) (_module.__default.Bit ($LS ($LS $LZ)) (- |x#1_1_0@0| 1) (Div (+ (Mul (LitInt 2) |n#0@@5|) 1) (LitInt 2)))))))) (=> (=> (= |x#1_1_0@0| (LitInt 0)) (_module.__default.Bit ($LS $LZ) |x#1_1_0@0| (+ (Mul (LitInt 2) |n#0@@5|) 1))) (and (=> (= (ControlFlow 0 22) 21) anon149_Then_correct) (=> (= (ControlFlow 0 22) 15) anon149_Else_correct))))))))
(let ((anon148_Else_correct  (=> (and (or (not (= |x#1_1_0@0| (LitInt 0))) (not true)) (= (ControlFlow 0 27) 22)) anon70_correct)))
(let ((anon148_Then_correct  (=> (and (= |x#1_1_0@0| (LitInt 0)) ($IsAlloc intType (int_2_U |x#1_1_0@0|) Tclass._System.nat $Heap)) (and (=> (= (ControlFlow 0 25) (- 0 26)) ($Is intType (int_2_U (+ (Mul (LitInt 2) |n#0@@5|) 1)) Tclass._System.nat)) (=> ($Is intType (int_2_U (+ (Mul (LitInt 2) |n#0@@5|) 1)) Tclass._System.nat) (=> (and (and (= |##n#1_1_0_4_1@0| (+ (Mul (LitInt 2) |n#0@@5|) 1)) ($IsAlloc intType (int_2_U |##n#1_1_0_4_1@0|) Tclass._System.nat $Heap)) (and (|_module.__default.Bit#canCall| |x#1_1_0@0| (+ (Mul (LitInt 2) |n#0@@5|) 1)) (= (ControlFlow 0 25) 22))) anon70_correct))))))
(let ((anon68_correct  (=> (=> (and (<= (LitInt 0) |x#1_1_0@0|) (< |x#1_1_0@0| (+ (Mul (LitInt 2) |n#0@@5|) 1))) (|_module.__default.Bit#canCall| |x#1_1_0@0| (+ (Mul (LitInt 2) |n#0@@5|) 1))) (and (=> (= (ControlFlow 0 28) 25) anon148_Then_correct) (=> (= (ControlFlow 0 28) 27) anon148_Else_correct)))))
(let ((anon147_Else_correct  (=> (and (not (and (<= (LitInt 0) |x#1_1_0@0|) (< |x#1_1_0@0| (+ (Mul (LitInt 2) |n#0@@5|) 1)))) (= (ControlFlow 0 30) 28)) anon68_correct)))
(let ((anon147_Then_correct  (=> (and (and (and (<= (LitInt 0) |x#1_1_0@0|) (< |x#1_1_0@0| (+ (Mul (LitInt 2) |n#0@@5|) 1))) (and ($IsAlloc intType (int_2_U |x#1_1_0@0|) Tclass._System.nat $Heap) ($Is intType (int_2_U (+ (Mul (LitInt 2) |n#0@@5|) 1)) Tclass._System.nat))) (and (and (= |##n#1_1_0_4_0@0| (+ (Mul (LitInt 2) |n#0@@5|) 1)) ($IsAlloc intType (int_2_U |##n#1_1_0_4_0@0|) Tclass._System.nat $Heap)) (and (|_module.__default.Bit#canCall| |x#1_1_0@0| (+ (Mul (LitInt 2) |n#0@@5|) 1)) (= (ControlFlow 0 29) 28)))) anon68_correct)))
(let ((anon146_Else_correct  (=> (< |x#1_1_0@0| (LitInt 0)) (and (=> (= (ControlFlow 0 32) 29) anon147_Then_correct) (=> (= (ControlFlow 0 32) 30) anon147_Else_correct)))))
(let ((anon146_Then_correct  (=> (<= (LitInt 0) |x#1_1_0@0|) (and (=> (= (ControlFlow 0 31) 29) anon147_Then_correct) (=> (= (ControlFlow 0 31) 30) anon147_Else_correct)))))
(let ((anon169_Else_correct  (=> (and (= (|Set#IsMember| (_module.__default.BitSet (+ (Mul (LitInt 2) |n#0@@5|) 1)) ($Box intType (int_2_U |x#1_1_0@0|))) (|Set#IsMember| (|Set#Union| (|Set#UnionOne| |Set#Empty| ($Box intType (int_2_U (LitInt 0)))) (_module.__default.Suc (_module.__default.BitSet |n#0@@5|))) ($Box intType (int_2_U |x#1_1_0@0|)))) (= (ControlFlow 0 12) (- 0 11))) (= (|Set#IsMember| (_module.__default.BitSet (+ (Mul (LitInt 2) |n#0@@5|) 1)) ($Box intType (int_2_U |x#1_1_0@0|))) (|Set#IsMember| (|Set#Union| (|Set#UnionOne| |Set#Empty| ($Box intType (int_2_U (LitInt 0)))) (_module.__default.Suc (_module.__default.BitSet |n#0@@5|))) ($Box intType (int_2_U |x#1_1_0@0|)))))))
(let ((anon141_Then_correct  (=> (= (ControlFlow 0 10) (- 0 9)) ($Is intType (int_2_U (+ (Mul (LitInt 2) |n#0@@5|) 1)) Tclass._System.nat))))
(let ((anon140_Then_correct  (and (=> (= (ControlFlow 0 7) (- 0 8)) ($Is intType (int_2_U (+ (Mul (LitInt 2) |n#0@@5|) 1)) Tclass._System.nat)) (=> ($Is intType (int_2_U (+ (Mul (LitInt 2) |n#0@@5|) 1)) Tclass._System.nat) (=> (and (and (= |##n#1_1_0@0| (+ (Mul (LitInt 2) |n#0@@5|) 1)) ($IsAlloc intType (int_2_U |##n#1_1_0@0|) Tclass._System.nat $Heap)) (and (|_module.__default.BitSet#canCall| (+ (Mul (LitInt 2) |n#0@@5|) 1)) (= (ControlFlow 0 7) (- 0 6)))) ($Is intType (int_2_U (LitInt 0)) Tclass._System.nat))))))
(let ((anon139_Then_correct  (=> (<= (LitInt 0) |x#1_1_0@0|) (and (and (and (and (and (and (and (and (and (and (and (and (and (=> (= (ControlFlow 0 91) 7) anon140_Then_correct) (=> (= (ControlFlow 0 91) 10) anon141_Then_correct)) (=> (= (ControlFlow 0 91) 90) anon142_Then_correct)) (=> (= (ControlFlow 0 91) 12) anon169_Else_correct)) (=> (= (ControlFlow 0 91) 81) anon170_Then_correct)) (=> (= (ControlFlow 0 91) 82) anon170_Else_correct)) (=> (= (ControlFlow 0 91) 76) anon167_Then_correct)) (=> (= (ControlFlow 0 91) 77) anon167_Else_correct)) (=> (= (ControlFlow 0 91) 70) anon160_Then_correct)) (=> (= (ControlFlow 0 91) 65) anon160_Else_correct)) (=> (= (ControlFlow 0 91) 50) anon153_Then_correct)) (=> (= (ControlFlow 0 91) 45) anon153_Else_correct)) (=> (= (ControlFlow 0 91) 31) anon146_Then_correct)) (=> (= (ControlFlow 0 91) 32) anon146_Else_correct)))))
(let ((GeneratedUnifiedExit_correct  (and (=> (= (ControlFlow 0 2) (- 0 3)) (|Set#Equal| (_module.__default.BitSet (Mul (LitInt 2) |n#0@@5|)) (_module.__default.Suc (_module.__default.BitSet |n#0@@5|)))) (=> (|Set#Equal| (_module.__default.BitSet (Mul (LitInt 2) |n#0@@5|)) (_module.__default.Suc (_module.__default.BitSet |n#0@@5|))) (=> (= (ControlFlow 0 2) (- 0 1)) (|Set#Equal| (_module.__default.BitSet (+ (Mul (LitInt 2) |n#0@@5|) 1)) (|Set#Union| (|Set#UnionOne| |Set#Empty| ($Box intType (int_2_U (LitInt 0)))) (_module.__default.Suc (_module.__default.BitSet |n#0@@5|)))))))))
(let ((anon139_Else_correct  (=> (and (forall ((|x#1_1_1| T@U) ) (!  (=> (and (<= (LitInt 0) (U_2_int |x#1_1_1|)) (U_2_bool (Lit boolType (bool_2_U true)))) (= (|Set#IsMember| (_module.__default.BitSet (+ (Mul (LitInt 2) |n#0@@5|) 1)) ($Box intType |x#1_1_1|)) (|Set#IsMember| (|Set#Union| (|Set#UnionOne| |Set#Empty| ($Box intType (int_2_U (LitInt 0)))) (_module.__default.Suc (_module.__default.BitSet |n#0@@5|))) ($Box intType |x#1_1_1|))))
 :pattern ( (|Set#IsMember| (|Set#Union| (|Set#UnionOne| |Set#Empty| ($Box intType (int_2_U 0))) (_module.__default.Suc (_module.__default.BitSet |n#0@@5|))) ($Box intType |x#1_1_1|)))
)) (= (ControlFlow 0 5) 2)) GeneratedUnifiedExit_correct)))
(let ((anon111_Else_correct  (=> (forall ((|x#1_0_1| T@U) ) (!  (=> (and (<= (LitInt 0) (U_2_int |x#1_0_1|)) (U_2_bool (Lit boolType (bool_2_U true)))) (= (|Set#IsMember| (_module.__default.BitSet (Mul (LitInt 2) |n#0@@5|)) ($Box intType |x#1_0_1|)) (|Set#IsMember| (_module.__default.Suc (_module.__default.BitSet |n#0@@5|)) ($Box intType |x#1_0_1|))))
 :pattern ( (|Set#IsMember| (_module.__default.Suc (_module.__default.BitSet |n#0@@5|)) ($Box intType |x#1_0_1|)))
 :pattern ( (|Set#IsMember| (_module.__default.BitSet (Mul 2 |n#0@@5|)) ($Box intType |x#1_0_1|)))
)) (and (=> (= (ControlFlow 0 92) 91) anon139_Then_correct) (=> (= (ControlFlow 0 92) 5) anon139_Else_correct)))))
(let ((anon110_Else_correct  (=> (and (or (not (= |n#0@@5| (LitInt 0))) (not true)) (= |nn#1_0@0| (Mul (LitInt 2) |n#0@@5|))) (and (=> (= (ControlFlow 0 171) 170) anon111_Then_correct) (=> (= (ControlFlow 0 171) 92) anon111_Else_correct)))))
(let ((anon110_Then_correct  (=> (and (= |n#0@@5| (LitInt 0)) (= (ControlFlow 0 4) 2)) GeneratedUnifiedExit_correct)))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (and (=> (= (ControlFlow 0 172) 4) anon110_Then_correct) (=> (= (ControlFlow 0 172) 171) anon110_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (<= (LitInt 0) |n#0@@5|)) (and (= 2 $FunctionContextHeight) (= (ControlFlow 0 173) 172))) anon0_correct)))
PreconditionGeneratedEntry_correct)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
