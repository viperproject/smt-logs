(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TagSet () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._module.Recursive () T@U)
(declare-fun |##_module.Recursive.Red| () T@U)
(declare-fun |##_module.Recursive.Green| () T@U)
(declare-fun tytagFamily$Recursive () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun |#_module.Recursive.Green| (T@U T@U) T@U)
(declare-fun Tclass._module.Recursive (T@U) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun SetType () T@T)
(declare-fun TSet (T@U) T@U)
(declare-fun |Set#Union| (T@U T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun |Set#Difference| (T@U T@U) T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun |#_module.Recursive.Red| () T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun |_module.Recursive#Equal| (T@U T@U) Bool)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun _module.Recursive.Red_q (T@U) Bool)
(declare-fun _module.Recursive.Green_q (T@U) Bool)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun |Set#Disjoint| (T@U T@U) Bool)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun Tag (T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun |$IsA#_module.Recursive| (T@U) Bool)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun _module.Recursive.next (T@U) T@U)
(declare-fun _module.Recursive.m (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun Tclass._module.Recursive_0 (T@U) T@U)
(declare-fun DtRank (T@U) Int)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TagSet alloc Tagclass._module.Recursive |##_module.Recursive.Red| |##_module.Recursive.Green| tytagFamily$Recursive)
)
(assert  (and (= (Ctor DatatypeTypeType) 3) (= (Ctor SetType) 4)))
(assert (forall ((_module.Recursive$X T@U) (|a#48#0#0| T@U) (|a#48#1#0| T@U) ($h T@U) ) (!  (=> ($IsGoodHeap $h) (= ($IsAlloc DatatypeTypeType (|#_module.Recursive.Green| |a#48#0#0| |a#48#1#0|) (Tclass._module.Recursive _module.Recursive$X) $h)  (and ($IsAlloc DatatypeTypeType |a#48#0#0| (Tclass._module.Recursive _module.Recursive$X) $h) ($IsAlloc SetType |a#48#1#0| (TSet _module.Recursive$X) $h))))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_module.Recursive.Green| |a#48#0#0| |a#48#1#0|) (Tclass._module.Recursive _module.Recursive$X) $h))
)))
(assert (forall ((a T@U) (b T@U) (y T@U) ) (!  (=> (|Set#IsMember| a y) (|Set#IsMember| (|Set#Union| a b) y))
 :pattern ( (|Set#Union| a b) (|Set#IsMember| a y))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) (y@@0 T@U) ) (!  (=> (|Set#IsMember| b@@0 y@@0) (|Set#IsMember| (|Set#Union| a@@0 b@@0) y@@0))
 :pattern ( (|Set#Union| a@@0 b@@0) (|Set#IsMember| b@@0 y@@0))
)))
(assert (forall ((a@@1 T@U) (b@@1 T@U) (y@@1 T@U) ) (!  (=> (|Set#IsMember| b@@1 y@@1) (not (|Set#IsMember| (|Set#Difference| a@@1 b@@1) y@@1)))
 :pattern ( (|Set#Difference| a@@1 b@@1) (|Set#IsMember| b@@1 y@@1))
)))
(assert (= (DatatypeCtorId |#_module.Recursive.Red|) |##_module.Recursive.Red|))
(assert (forall ((a@@2 T@U) (b@@2 T@U) ) (! (= (|Set#Union| (|Set#Union| a@@2 b@@2) b@@2) (|Set#Union| a@@2 b@@2))
 :pattern ( (|Set#Union| (|Set#Union| a@@2 b@@2) b@@2))
)))
(assert (forall ((a@@3 T@U) (b@@3 T@U) (o T@U) ) (! (= (|Set#IsMember| (|Set#Difference| a@@3 b@@3) o)  (and (|Set#IsMember| a@@3 o) (not (|Set#IsMember| b@@3 o))))
 :pattern ( (|Set#IsMember| (|Set#Difference| a@@3 b@@3) o))
)))
(assert (forall ((_module.Recursive$X@@0 T@U) ($h@@0 T@U) ) (!  (=> ($IsGoodHeap $h@@0) ($IsAlloc DatatypeTypeType |#_module.Recursive.Red| (Tclass._module.Recursive _module.Recursive$X@@0) $h@@0))
 :pattern ( ($IsAlloc DatatypeTypeType |#_module.Recursive.Red| (Tclass._module.Recursive _module.Recursive$X@@0) $h@@0))
)))
(assert (forall ((_module.Recursive$X@@1 T@U) ) (! ($Is DatatypeTypeType |#_module.Recursive.Red| (Tclass._module.Recursive _module.Recursive$X@@1))
 :pattern ( ($Is DatatypeTypeType |#_module.Recursive.Red| (Tclass._module.Recursive _module.Recursive$X@@1)))
)))
(assert (forall ((a@@4 T@U) (b@@4 T@U) ) (! (= (|_module.Recursive#Equal| a@@4 b@@4) (= a@@4 b@@4))
 :pattern ( (|_module.Recursive#Equal| a@@4 b@@4))
)))
(assert (forall ((x@@2 T@U) (T T@T) ) (! (= (Lit T x@@2) x@@2)
 :pattern ( (Lit T x@@2))
)))
(assert (forall ((d T@U) ) (! (= (_module.Recursive.Red_q d) (= (DatatypeCtorId d) |##_module.Recursive.Red|))
 :pattern ( (_module.Recursive.Red_q d))
)))
(assert (forall ((d@@0 T@U) ) (! (= (_module.Recursive.Green_q d@@0) (= (DatatypeCtorId d@@0) |##_module.Recursive.Green|))
 :pattern ( (_module.Recursive.Green_q d@@0))
)))
(assert (forall ((x@@3 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@3)) x@@3)
 :pattern ( ($Unbox T@@0 x@@3))
)))
(assert (forall ((a@@5 T@U) (b@@5 T@U) ) (! (= (|Set#Disjoint| a@@5 b@@5) (forall ((o@@0 T@U) ) (!  (or (not (|Set#IsMember| a@@5 o@@0)) (not (|Set#IsMember| b@@5 o@@0)))
 :pattern ( (|Set#IsMember| a@@5 o@@0))
 :pattern ( (|Set#IsMember| b@@5 o@@0))
)))
 :pattern ( (|Set#Disjoint| a@@5 b@@5))
)))
(assert (forall ((d@@1 T@U) ) (!  (=> (_module.Recursive.Green_q d@@1) (exists ((|a#47#0#0| T@U) (|a#47#1#0| T@U) ) (= d@@1 (|#_module.Recursive.Green| |a#47#0#0| |a#47#1#0|))))
 :pattern ( (_module.Recursive.Green_q d@@1))
)))
(assert (forall ((_module.Recursive$X@@2 T@U) (|a#48#0#0@@0| T@U) (|a#48#1#0@@0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Recursive.Green| |a#48#0#0@@0| |a#48#1#0@@0|) (Tclass._module.Recursive _module.Recursive$X@@2))  (and ($Is DatatypeTypeType |a#48#0#0@@0| (Tclass._module.Recursive _module.Recursive$X@@2)) ($Is SetType |a#48#1#0@@0| (TSet _module.Recursive$X@@2))))
 :pattern ( ($Is DatatypeTypeType (|#_module.Recursive.Green| |a#48#0#0@@0| |a#48#1#0@@0|) (Tclass._module.Recursive _module.Recursive$X@@2)))
)))
(assert (forall ((d@@2 T@U) ) (!  (=> (_module.Recursive.Red_q d@@2) (= d@@2 |#_module.Recursive.Red|))
 :pattern ( (_module.Recursive.Red_q d@@2))
)))
(assert (forall ((v T@U) (t0 T@U) ) (! (= ($Is SetType v (TSet t0)) (forall ((bx T@U) ) (!  (=> (|Set#IsMember| v bx) ($IsBox bx t0))
 :pattern ( (|Set#IsMember| v bx))
)))
 :pattern ( ($Is SetType v (TSet t0)))
)))
(assert (forall ((v@@0 T@U) (t T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t h) ($IsAlloc T@@1 v@@0 t h))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t h))
)))
(assert (forall ((_module.Recursive$X@@3 T@U) ) (!  (and (= (Tag (Tclass._module.Recursive _module.Recursive$X@@3)) Tagclass._module.Recursive) (= (TagFamily (Tclass._module.Recursive _module.Recursive$X@@3)) tytagFamily$Recursive))
 :pattern ( (Tclass._module.Recursive _module.Recursive$X@@3))
)))
(assert (forall ((a@@6 T@U) (b@@6 T@U) (o@@1 T@U) ) (! (= (|Set#IsMember| (|Set#Union| a@@6 b@@6) o@@1)  (or (|Set#IsMember| a@@6 o@@1) (|Set#IsMember| b@@6 o@@1)))
 :pattern ( (|Set#IsMember| (|Set#Union| a@@6 b@@6) o@@1))
)))
(assert (forall ((a@@7 T@U) (b@@7 T@U) ) (!  (=> (|Set#Disjoint| a@@7 b@@7) (and (= (|Set#Difference| (|Set#Union| a@@7 b@@7) a@@7) b@@7) (= (|Set#Difference| (|Set#Union| a@@7 b@@7) b@@7) a@@7)))
 :pattern ( (|Set#Union| a@@7 b@@7))
)))
(assert (forall ((d@@3 T@U) ) (!  (=> (|$IsA#_module.Recursive| d@@3) (or (_module.Recursive.Red_q d@@3) (_module.Recursive.Green_q d@@3)))
 :pattern ( (|$IsA#_module.Recursive| d@@3))
)))
(assert (forall ((_module.Recursive$X@@4 T@U) (d@@4 T@U) ) (!  (=> ($Is DatatypeTypeType d@@4 (Tclass._module.Recursive _module.Recursive$X@@4)) (or (_module.Recursive.Red_q d@@4) (_module.Recursive.Green_q d@@4)))
 :pattern ( (_module.Recursive.Green_q d@@4) ($Is DatatypeTypeType d@@4 (Tclass._module.Recursive _module.Recursive$X@@4)))
 :pattern ( (_module.Recursive.Red_q d@@4) ($Is DatatypeTypeType d@@4 (Tclass._module.Recursive _module.Recursive$X@@4)))
)))
(assert (forall ((a@@8 T@U) (b@@8 T@U) ) (!  (=> (|Set#Equal| a@@8 b@@8) (= a@@8 b@@8))
 :pattern ( (|Set#Equal| a@@8 b@@8))
)))
(assert (forall ((a@@9 T@U) (b@@9 T@U) ) (!  (=> (and (_module.Recursive.Green_q a@@9) (_module.Recursive.Green_q b@@9)) (= (|_module.Recursive#Equal| a@@9 b@@9)  (and (|_module.Recursive#Equal| (_module.Recursive.next a@@9) (_module.Recursive.next b@@9)) (|Set#Equal| (_module.Recursive.m a@@9) (_module.Recursive.m b@@9)))))
 :pattern ( (|_module.Recursive#Equal| a@@9 b@@9) (_module.Recursive.Green_q a@@9))
 :pattern ( (|_module.Recursive#Equal| a@@9 b@@9) (_module.Recursive.Green_q b@@9))
)))
(assert (forall ((v@@1 T@U) (t@@0 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@1) t@@0) ($Is T@@2 v@@1 t@@0))
 :pattern ( ($IsBox ($Box T@@2 v@@1) t@@0))
)))
(assert (forall ((a@@10 T@U) (b@@10 T@U) ) (!  (=> (and (_module.Recursive.Red_q a@@10) (_module.Recursive.Red_q b@@10)) (|_module.Recursive#Equal| a@@10 b@@10))
 :pattern ( (|_module.Recursive#Equal| a@@10 b@@10) (_module.Recursive.Red_q a@@10))
 :pattern ( (|_module.Recursive#Equal| a@@10 b@@10) (_module.Recursive.Red_q b@@10))
)))
(assert (forall ((v@@2 T@U) (t0@@0 T@U) (h@@0 T@U) ) (! (= ($IsAlloc SetType v@@2 (TSet t0@@0) h@@0) (forall ((bx@@0 T@U) ) (!  (=> (|Set#IsMember| v@@2 bx@@0) ($IsAllocBox bx@@0 t0@@0 h@@0))
 :pattern ( (|Set#IsMember| v@@2 bx@@0))
)))
 :pattern ( ($IsAlloc SetType v@@2 (TSet t0@@0) h@@0))
)))
(assert (forall ((|a#46#0#0| T@U) (|a#46#1#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Recursive.Green| |a#46#0#0| |a#46#1#0|)) |##_module.Recursive.Green|)
 :pattern ( (|#_module.Recursive.Green| |a#46#0#0| |a#46#1#0|))
)))
(assert (forall ((|a#50#0#0| T@U) (|a#50#1#0| T@U) ) (! (= (_module.Recursive.next (|#_module.Recursive.Green| |a#50#0#0| |a#50#1#0|)) |a#50#0#0|)
 :pattern ( (|#_module.Recursive.Green| |a#50#0#0| |a#50#1#0|))
)))
(assert (forall ((|a#52#0#0| T@U) (|a#52#1#0| T@U) ) (! (= (_module.Recursive.m (|#_module.Recursive.Green| |a#52#0#0| |a#52#1#0|)) |a#52#1#0|)
 :pattern ( (|#_module.Recursive.Green| |a#52#0#0| |a#52#1#0|))
)))
(assert (forall ((t@@1 T@U) ) (! (= (Inv0_TSet (TSet t@@1)) t@@1)
 :pattern ( (TSet t@@1))
)))
(assert (forall ((t@@2 T@U) ) (! (= (Tag (TSet t@@2)) TagSet)
 :pattern ( (TSet t@@2))
)))
(assert (forall ((_module.Recursive$X@@5 T@U) ) (! (= (Tclass._module.Recursive_0 (Tclass._module.Recursive _module.Recursive$X@@5)) _module.Recursive$X@@5)
 :pattern ( (Tclass._module.Recursive _module.Recursive$X@@5))
)))
(assert (forall ((x@@4 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@4)) x@@4)
 :pattern ( ($Box T@@3 x@@4))
)))
(assert (forall ((|a#51#0#0| T@U) (|a#51#1#0| T@U) ) (! (< (DtRank |a#51#0#0|) (DtRank (|#_module.Recursive.Green| |a#51#0#0| |a#51#1#0|)))
 :pattern ( (|#_module.Recursive.Green| |a#51#0#0| |a#51#1#0|))
)))
(assert (forall ((a@@11 T@U) (b@@11 T@U) ) (! (= (|Set#Union| a@@11 (|Set#Union| a@@11 b@@11)) (|Set#Union| a@@11 b@@11))
 :pattern ( (|Set#Union| a@@11 (|Set#Union| a@@11 b@@11)))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall ((t0@@1 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0@@1 t1 t2 (MapType0Store t0@@1 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 5)) (= (Ctor FieldType) 6)) (forall ((t0@@2 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@2 t1@@0 (MapType1Store t0@@2 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :weight 0
))) (= (Ctor BoxType) 7)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 8))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((bx@@1 T@U) (t@@3 T@U) ) (!  (=> ($IsBox bx@@1 (TSet t@@3)) (and (= ($Box SetType ($Unbox SetType bx@@1)) bx@@1) ($Is SetType ($Unbox SetType bx@@1) (TSet t@@3))))
 :pattern ( ($IsBox bx@@1 (TSet t@@3)))
)))
(assert (forall ((_module.Recursive$X@@6 T@U) (bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 (Tclass._module.Recursive _module.Recursive$X@@6)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@2)) bx@@2) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@2) (Tclass._module.Recursive _module.Recursive$X@@6))))
 :pattern ( ($IsBox bx@@2 (Tclass._module.Recursive _module.Recursive$X@@6)))
)))
(assert (forall ((|a#53#0#0| T@U) (|a#53#1#0| T@U) (d@@5 T@U) ) (!  (=> (|Set#IsMember| |a#53#1#0| ($Box DatatypeTypeType d@@5)) (< (DtRank d@@5) (DtRank (|#_module.Recursive.Green| |a#53#0#0| |a#53#1#0|))))
 :pattern ( (|Set#IsMember| |a#53#1#0| ($Box DatatypeTypeType d@@5)) (|#_module.Recursive.Green| |a#53#0#0| |a#53#1#0|))
)))
(assert (forall ((d@@6 T@U) (_module.Recursive$X@@7 T@U) ($h@@1 T@U) ) (!  (=> (and ($IsGoodHeap $h@@1) (and (_module.Recursive.Green_q d@@6) ($IsAlloc DatatypeTypeType d@@6 (Tclass._module.Recursive _module.Recursive$X@@7) $h@@1))) ($IsAlloc DatatypeTypeType (_module.Recursive.next d@@6) (Tclass._module.Recursive _module.Recursive$X@@7) $h@@1))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.Recursive.next d@@6) (Tclass._module.Recursive _module.Recursive$X@@7) $h@@1))
)))
(assert (forall ((d@@7 T@U) (_module.Recursive$X@@8 T@U) ($h@@2 T@U) ) (!  (=> (and ($IsGoodHeap $h@@2) (and (_module.Recursive.Green_q d@@7) ($IsAlloc DatatypeTypeType d@@7 (Tclass._module.Recursive _module.Recursive$X@@8) $h@@2))) ($IsAlloc SetType (_module.Recursive.m d@@7) (TSet _module.Recursive$X@@8) $h@@2))
 :pattern ( ($IsAlloc SetType (_module.Recursive.m d@@7) (TSet _module.Recursive$X@@8) $h@@2))
)))
(assert (= |#_module.Recursive.Red| (Lit DatatypeTypeType |#_module.Recursive.Red|)))
(assert (forall ((a@@12 T@U) (b@@12 T@U) ) (! (= (|Set#Equal| a@@12 b@@12) (forall ((o@@2 T@U) ) (! (= (|Set#IsMember| a@@12 o@@2) (|Set#IsMember| b@@12 o@@2))
 :pattern ( (|Set#IsMember| a@@12 o@@2))
 :pattern ( (|Set#IsMember| b@@12 o@@2))
)))
 :pattern ( (|Set#Equal| a@@12 b@@12))
)))
(assert (forall ((|a#49#0#0| T@U) (|a#49#1#0| T@U) ) (! (= (|#_module.Recursive.Green| (Lit DatatypeTypeType |a#49#0#0|) (Lit SetType |a#49#1#0|)) (Lit DatatypeTypeType (|#_module.Recursive.Green| |a#49#0#0| |a#49#1#0|)))
 :pattern ( (|#_module.Recursive.Green| (Lit DatatypeTypeType |a#49#0#0|) (Lit SetType |a#49#1#0|)))
)))
(assert (forall ((x@@5 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@5)) (Lit BoxType ($Box T@@4 x@@5)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@5)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |r#0| () T@U)
(declare-fun |s#0@2| () T@U)
(declare-fun |_mcc#0#0_0@0| () T@U)
(declare-fun |_mcc#1#0_0@0| () T@U)
(declare-fun _module._default.RecLem$_T0 () T@U)
(declare-fun |m#0_0@0| () T@U)
(declare-fun $Heap () T@U)
(declare-fun |let#0_0#0#0| () T@U)
(declare-fun |next#0_0@0| () T@U)
(declare-fun |let#0_1#0#0| () T@U)
(declare-fun |call3formal@s#0| () T@U)
(declare-fun call0formal@_module._default.RecLem$_T0 () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |call3formal@s#0@0| () T@U)
(declare-fun |s#0@1| () T@U)
(declare-fun |s#0@0| () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun |s#0| () T@U)
(declare-fun |n#0_0| () T@U)
(declare-fun $FunctionContextHeight () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 9) (let ((GeneratedUnifiedExit_correct  (=> (= (ControlFlow 0 3) (- 0 2)) (|_module.Recursive#Equal| |r#0| |s#0@2|))))
(let ((anon5_Then_correct  (=> (= |r#0| (|#_module.Recursive.Green| |_mcc#0#0_0@0| |_mcc#1#0_0@0|)) (=> (and ($Is DatatypeTypeType |_mcc#0#0_0@0| (Tclass._module.Recursive _module._default.RecLem$_T0)) ($Is SetType |_mcc#1#0_0@0| (TSet _module._default.RecLem$_T0))) (=> (and (and (and (and ($Is SetType |m#0_0@0| (TSet _module._default.RecLem$_T0)) ($IsAlloc SetType |m#0_0@0| (TSet _module._default.RecLem$_T0) $Heap)) (= |let#0_0#0#0| |_mcc#1#0_0@0|)) (and ($Is SetType |let#0_0#0#0| (TSet _module._default.RecLem$_T0)) (= |m#0_0@0| |let#0_0#0#0|))) (and (and (and ($Is DatatypeTypeType |next#0_0@0| (Tclass._module.Recursive _module._default.RecLem$_T0)) ($IsAlloc DatatypeTypeType |next#0_0@0| (Tclass._module.Recursive _module._default.RecLem$_T0) $Heap)) (= |let#0_1#0#0| |_mcc#0#0_0@0|)) (and ($Is DatatypeTypeType |let#0_1#0#0| (Tclass._module.Recursive _module._default.RecLem$_T0)) (= |next#0_0@0| |let#0_1#0#0|)))) (and (=> (= (ControlFlow 0 5) (- 0 6)) (< (DtRank |next#0_0@0|) (DtRank |r#0|))) (=> (< (DtRank |next#0_0@0|) (DtRank |r#0|)) (=> (and ($Is DatatypeTypeType |call3formal@s#0| (Tclass._module.Recursive call0formal@_module._default.RecLem$_T0)) ($IsAlloc DatatypeTypeType |call3formal@s#0| (Tclass._module.Recursive call0formal@_module._default.RecLem$_T0) $Heap)) (=> (and (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (and ($Is DatatypeTypeType |call3formal@s#0@0| (Tclass._module.Recursive _module._default.RecLem$_T0)) ($IsAlloc DatatypeTypeType |call3formal@s#0@0| (Tclass._module.Recursive _module._default.RecLem$_T0) $Heap@0))) (=> (and (and (and (|$IsA#_module.Recursive| |next#0_0@0|) (|$IsA#_module.Recursive| |call3formal@s#0@0|)) (|_module.Recursive#Equal| |next#0_0@0| |call3formal@s#0@0|)) (and (and (= $Heap $Heap@0) (= |s#0@1| (|#_module.Recursive.Green| |call3formal@s#0@0| (|Set#Union| |m#0_0@0| |m#0_0@0|)))) (and (= |s#0@2| |s#0@1|) (= (ControlFlow 0 5) 3)))) GeneratedUnifiedExit_correct))))))))))
(let ((anon4_Then_correct  (=> (and (and (= |r#0| |#_module.Recursive.Red|) (= |s#0@0| (Lit DatatypeTypeType |#_module.Recursive.Red|))) (and (= |s#0@2| |s#0@0|) (= (ControlFlow 0 4) 3))) GeneratedUnifiedExit_correct)))
(let ((anon5_Else_correct true))
(let ((anon4_Else_correct  (=> (or (not (= |r#0| |#_module.Recursive.Red|)) (not true)) (and (=> (= (ControlFlow 0 7) 5) anon5_Then_correct) (=> (= (ControlFlow 0 7) 1) anon5_Else_correct)))))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (and (=> (= (ControlFlow 0 8) 4) anon4_Then_correct) (=> (= (ControlFlow 0 8) 7) anon4_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (=> (and (and (and (and ($Is DatatypeTypeType |r#0| (Tclass._module.Recursive _module._default.RecLem$_T0)) ($IsAlloc DatatypeTypeType |r#0| (Tclass._module.Recursive _module._default.RecLem$_T0) $Heap)) (|$IsA#_module.Recursive| |r#0|)) (and ($Is DatatypeTypeType |s#0| (Tclass._module.Recursive _module._default.RecLem$_T0)) ($IsAlloc DatatypeTypeType |s#0| (Tclass._module.Recursive _module._default.RecLem$_T0) $Heap))) (and (and (and ($Is DatatypeTypeType |n#0_0| (Tclass._module.Recursive _module._default.RecLem$_T0)) ($IsAlloc DatatypeTypeType |n#0_0| (Tclass._module.Recursive _module._default.RecLem$_T0) $Heap)) true) (and (= 1 $FunctionContextHeight) (= (ControlFlow 0 9) 8)))) anon0_correct))))
PreconditionGeneratedEntry_correct))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
