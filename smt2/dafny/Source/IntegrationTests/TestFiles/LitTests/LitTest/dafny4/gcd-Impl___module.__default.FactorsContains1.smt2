(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 () Int)
(declare-fun $generated@@20 (Int Int) Bool)
(declare-fun $generated@@21 (Int) Int)
(declare-fun $generated@@22 (Int Int) Bool)
(declare-fun $generated@@23 (Int Int) Int)
(declare-fun $generated@@27 (Int) T@U)
(declare-fun $generated@@28 (Int) Bool)
(declare-fun $generated@@29 (T@T T@U T@U) Bool)
(declare-fun $generated@@30 () T@T)
(declare-fun $generated@@31 (T@U) T@U)
(declare-fun $generated@@32 () T@U)
(declare-fun $generated@@35 (T@T T@U) T@U)
(declare-fun $generated@@38 (T@U) T@U)
(declare-fun $generated@@39 (T@U Int Int) T@U)
(declare-fun $generated@@42 (T@T T@U) T@U)
(declare-fun $generated@@43 (T@T T@U) T@U)
(declare-fun $generated@@46 (T@U T@U) Bool)
(declare-fun $generated@@47 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@48 () T@T)
(declare-fun $generated@@49 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@63 (T@U T@U) Bool)
(declare-fun $generated@@79 (T@U) T@U)
(declare-fun $generated@@81 (T@U) T@U)
(declare-fun $generated@@85 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@86 () T@T)
(declare-fun $generated@@87 () T@T)
(declare-fun $generated@@88 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@89 (T@T T@T) T@T)
(declare-fun $generated@@90 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@91 (T@T) T@T)
(declare-fun $generated@@92 (T@T) T@T)
(declare-fun $generated@@134 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert  (=> (<= 1 $generated@@19) (forall (($generated@@24 Int) ($generated@@25 Int) ) (!  (=> (or ($generated@@22 ($generated@@21 $generated@@24) ($generated@@21 $generated@@25)) (and (< 1 $generated@@19) (and (<= ($generated@@21 1) $generated@@24) (<= ($generated@@21 1) $generated@@25)))) (= ($generated@@20 ($generated@@21 $generated@@24) ($generated@@21 $generated@@25)) (exists (($generated@@26 Int) ) (! (= ($generated@@23 ($generated@@21 $generated@@24) $generated@@26) ($generated@@21 $generated@@25))
 :pattern ( ($generated@@23 $generated@@24 $generated@@26))
))))
 :weight 3
 :pattern ( ($generated@@20 ($generated@@21 $generated@@24) ($generated@@21 $generated@@25)))
))))
(assert (= ($generated@@3 $generated@@30) 3))
(assert  (=> (<= 2 $generated@@19) (forall (($generated@@33 Int) ) (!  (=> (or ($generated@@28 $generated@@33) (and (< 2 $generated@@19) (<= ($generated@@21 1) $generated@@33))) ($generated@@29 $generated@@30 ($generated@@27 $generated@@33) ($generated@@31 $generated@@32)))
 :pattern ( ($generated@@27 $generated@@33))
))))
(assert (forall (($generated@@34 Int) ) (! (= ($generated@@21 $generated@@34) $generated@@34)
 :pattern ( ($generated@@21 $generated@@34))
)))
(assert (forall (($generated@@36 T@U) ($generated@@37 T@T) ) (! (= ($generated@@35 $generated@@37 $generated@@36) $generated@@36)
 :pattern ( ($generated@@35 $generated@@37 $generated@@36))
)))
(assert  (=> (<= 2 $generated@@19) (forall (($generated@@40 Int) ) (!  (=> (or ($generated@@28 ($generated@@21 $generated@@40)) (and (< 2 $generated@@19) (<= ($generated@@21 1) $generated@@40))) (and (forall (($generated@@41 Int) ) (!  (=> (<= ($generated@@21 1) $generated@@41) (=> (<= $generated@@41 ($generated@@21 $generated@@40)) ($generated@@22 $generated@@41 ($generated@@21 $generated@@40))))
 :pattern ( ($generated@@20 $generated@@41 $generated@@40))
)) (= ($generated@@27 ($generated@@21 $generated@@40)) ($generated@@38 ($generated@@39 $generated@@32 ($generated@@21 $generated@@40) ($generated@@21 $generated@@40))))))
 :weight 3
 :pattern ( ($generated@@27 ($generated@@21 $generated@@40)))
))))
(assert (forall (($generated@@44 T@U) ($generated@@45 T@T) ) (! (= ($generated@@43 $generated@@45 ($generated@@42 $generated@@45 $generated@@44)) $generated@@44)
 :pattern ( ($generated@@42 $generated@@45 $generated@@44))
)))
(assert  (and (and (forall (($generated@@50 T@T) ($generated@@51 T@T) ($generated@@52 T@U) ($generated@@53 T@U) ($generated@@54 T@U) ) (! (= ($generated@@47 $generated@@50 $generated@@51 ($generated@@49 $generated@@50 $generated@@51 $generated@@53 $generated@@54 $generated@@52) $generated@@54) $generated@@52)
 :weight 0
)) (forall (($generated@@55 T@T) ($generated@@56 T@T) ($generated@@57 T@U) ($generated@@58 T@U) ($generated@@59 T@U) ($generated@@60 T@U) ) (!  (or (= $generated@@59 $generated@@60) (= ($generated@@47 $generated@@55 $generated@@56 ($generated@@49 $generated@@55 $generated@@56 $generated@@58 $generated@@59 $generated@@57) $generated@@60) ($generated@@47 $generated@@55 $generated@@56 $generated@@58 $generated@@60)))
 :weight 0
))) (= ($generated@@3 $generated@@48) 4)))
(assert (forall (($generated@@61 T@U) ($generated@@62 T@U) ) (! (= ($generated@@46 ($generated@@38 $generated@@61) $generated@@62) ($generated@@8 ($generated@@47 $generated@@48 $generated@@4 $generated@@61 $generated@@62)))
 :pattern ( ($generated@@46 ($generated@@38 $generated@@61) $generated@@62))
)))
(assert (forall (($generated@@64 T@U) ($generated@@65 T@U) ) (! (= ($generated@@29 $generated@@30 $generated@@64 ($generated@@31 $generated@@65)) (forall (($generated@@66 T@U) ) (!  (=> ($generated@@46 $generated@@64 $generated@@66) ($generated@@63 $generated@@66 $generated@@65))
 :pattern ( ($generated@@46 $generated@@64 $generated@@66))
)))
 :pattern ( ($generated@@29 $generated@@30 $generated@@64 ($generated@@31 $generated@@65)))
)))
(assert  (=> (<= 1 $generated@@19) (forall (($generated@@67 Int) ($generated@@68 Int) ) (!  (=> (or ($generated@@22 $generated@@67 $generated@@68) (and (< 1 $generated@@19) (and (<= ($generated@@21 1) $generated@@67) (<= ($generated@@21 1) $generated@@68)))) (= ($generated@@20 $generated@@67 $generated@@68) (exists (($generated@@69 Int) ) (! (= ($generated@@23 $generated@@67 $generated@@69) $generated@@68)
 :pattern ( ($generated@@23 $generated@@67 $generated@@69))
))))
 :pattern ( ($generated@@20 $generated@@67 $generated@@68))
))))
(assert (forall (($generated@@70 T@U) ) (! (= ($generated@@29 $generated@@5 $generated@@70 $generated@@32) (<= ($generated@@21 1) ($generated@@10 $generated@@70)))
 :pattern ( ($generated@@29 $generated@@5 $generated@@70 $generated@@32))
)))
(assert (forall (($generated@@71 T@U) ) (!  (=> ($generated@@63 $generated@@71 $generated@@32) (and (= ($generated@@43 $generated@@5 ($generated@@42 $generated@@5 $generated@@71)) $generated@@71) ($generated@@29 $generated@@5 ($generated@@42 $generated@@5 $generated@@71) $generated@@32)))
 :pattern ( ($generated@@63 $generated@@71 $generated@@32))
)))
(assert (forall (($generated@@72 T@U) ($generated@@73 Int) ($generated@@74 Int) ($generated@@75 T@U) ) (! (= ($generated@@8 ($generated@@47 $generated@@48 $generated@@4 ($generated@@39 $generated@@72 $generated@@73 $generated@@74) $generated@@75))  (and ($generated@@63 $generated@@75 $generated@@72) (and (<= ($generated@@10 ($generated@@42 $generated@@5 $generated@@75)) $generated@@73) ($generated@@20 ($generated@@10 ($generated@@42 $generated@@5 $generated@@75)) $generated@@74))))
 :pattern ( ($generated@@47 $generated@@48 $generated@@4 ($generated@@39 $generated@@72 $generated@@73 $generated@@74) $generated@@75))
)))
(assert (forall (($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@T) ) (! (= ($generated@@63 ($generated@@43 $generated@@78 $generated@@76) $generated@@77) ($generated@@29 $generated@@78 $generated@@76 $generated@@77))
 :pattern ( ($generated@@63 ($generated@@43 $generated@@78 $generated@@76) $generated@@77))
)))
(assert (forall (($generated@@80 T@U) ) (! (= ($generated@@79 ($generated@@31 $generated@@80)) $generated@@80)
 :pattern ( ($generated@@31 $generated@@80))
)))
(assert (forall (($generated@@82 T@U) ) (! (= ($generated@@81 ($generated@@31 $generated@@82)) $generated)
 :pattern ( ($generated@@31 $generated@@82))
)))
(assert (forall (($generated@@83 T@U) ($generated@@84 T@T) ) (! (= ($generated@@42 $generated@@84 ($generated@@43 $generated@@84 $generated@@83)) $generated@@83)
 :pattern ( ($generated@@43 $generated@@84 $generated@@83))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@93 T@T) ($generated@@94 T@T) ($generated@@95 T@T) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ) (! (= ($generated@@85 $generated@@93 $generated@@94 $generated@@95 ($generated@@90 $generated@@93 $generated@@94 $generated@@95 $generated@@97 $generated@@98 $generated@@99 $generated@@96) $generated@@98 $generated@@99) $generated@@96)
 :weight 0
)) (and (forall (($generated@@100 T@T) ($generated@@101 T@T) ($generated@@102 T@T) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ) (!  (or (= $generated@@105 $generated@@107) (= ($generated@@85 $generated@@100 $generated@@101 $generated@@102 ($generated@@90 $generated@@100 $generated@@101 $generated@@102 $generated@@104 $generated@@105 $generated@@106 $generated@@103) $generated@@107 $generated@@108) ($generated@@85 $generated@@100 $generated@@101 $generated@@102 $generated@@104 $generated@@107 $generated@@108)))
 :weight 0
)) (forall (($generated@@109 T@T) ($generated@@110 T@T) ($generated@@111 T@T) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ) (!  (or (= $generated@@115 $generated@@117) (= ($generated@@85 $generated@@109 $generated@@110 $generated@@111 ($generated@@90 $generated@@109 $generated@@110 $generated@@111 $generated@@113 $generated@@114 $generated@@115 $generated@@112) $generated@@116 $generated@@117) ($generated@@85 $generated@@109 $generated@@110 $generated@@111 $generated@@113 $generated@@116 $generated@@117)))
 :weight 0
)))) (= ($generated@@3 $generated@@86) 5)) (= ($generated@@3 $generated@@87) 6)) (forall (($generated@@118 T@T) ($generated@@119 T@T) ) (= ($generated@@3 ($generated@@89 $generated@@118 $generated@@119)) 7))) (forall (($generated@@120 T@T) ($generated@@121 T@T) ) (! (= ($generated@@91 ($generated@@89 $generated@@120 $generated@@121)) $generated@@120)
 :pattern ( ($generated@@89 $generated@@120 $generated@@121))
))) (forall (($generated@@122 T@T) ($generated@@123 T@T) ) (! (= ($generated@@92 ($generated@@89 $generated@@122 $generated@@123)) $generated@@123)
 :pattern ( ($generated@@89 $generated@@122 $generated@@123))
))))
(assert (forall (($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 Bool) ($generated@@128 T@U) ($generated@@129 T@U) ) (! (= ($generated@@8 ($generated@@85 $generated@@86 $generated@@87 $generated@@4 ($generated@@88 $generated@@124 $generated@@125 $generated@@126 $generated@@127) $generated@@128 $generated@@129))  (=> (and (or (not (= $generated@@128 $generated@@124)) (not true)) ($generated@@8 ($generated@@42 $generated@@4 ($generated@@47 $generated@@87 $generated@@48 ($generated@@47 $generated@@86 ($generated@@89 $generated@@87 $generated@@48) $generated@@125 $generated@@128) $generated@@126)))) $generated@@127))
 :pattern ( ($generated@@85 $generated@@86 $generated@@87 $generated@@4 ($generated@@88 $generated@@124 $generated@@125 $generated@@126 $generated@@127) $generated@@128 $generated@@129))
)))
(assert (forall (($generated@@130 Int) ($generated@@131 Int) ) (! (= ($generated@@23 $generated@@130 $generated@@131) (* $generated@@130 $generated@@131))
 :pattern ( ($generated@@23 $generated@@130 $generated@@131))
)))
(assert (forall (($generated@@132 T@U) ($generated@@133 T@U) ) (!  (=> ($generated@@63 $generated@@132 ($generated@@31 $generated@@133)) (and (= ($generated@@43 $generated@@30 ($generated@@42 $generated@@30 $generated@@132)) $generated@@132) ($generated@@29 $generated@@30 ($generated@@42 $generated@@30 $generated@@132) ($generated@@31 $generated@@133))))
 :pattern ( ($generated@@63 $generated@@132 ($generated@@31 $generated@@133)))
)))
(assert (= ($generated@@81 $generated@@32) $generated@@1))
(assert (= ($generated@@134 $generated@@32) $generated@@2))
(assert  (=> (<= 2 $generated@@19) (forall (($generated@@135 Int) ) (!  (=> (or ($generated@@28 $generated@@135) (and (< 2 $generated@@19) (<= ($generated@@21 1) $generated@@135))) (and (forall (($generated@@136 Int) ) (!  (=> (<= ($generated@@21 1) $generated@@136) (=> (<= $generated@@136 $generated@@135) ($generated@@22 $generated@@136 $generated@@135)))
 :pattern ( ($generated@@20 $generated@@136 $generated@@135))
)) (= ($generated@@27 $generated@@135) ($generated@@38 ($generated@@39 $generated@@32 $generated@@135 $generated@@135)))))
 :pattern ( ($generated@@27 $generated@@135))
))))
(assert (forall (($generated@@137 Int) ) (! (= ($generated@@43 $generated@@5 ($generated@@9 ($generated@@21 $generated@@137))) ($generated@@35 $generated@@48 ($generated@@43 $generated@@5 ($generated@@9 $generated@@137))))
 :pattern ( ($generated@@43 $generated@@5 ($generated@@9 ($generated@@21 $generated@@137))))
)))
(assert (forall (($generated@@138 T@U) ($generated@@139 T@T) ) (! (= ($generated@@43 $generated@@139 ($generated@@35 $generated@@139 $generated@@138)) ($generated@@35 $generated@@48 ($generated@@43 $generated@@139 $generated@@138)))
 :pattern ( ($generated@@43 $generated@@139 ($generated@@35 $generated@@139 $generated@@138)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@140 () T@U)
(declare-fun $generated@@141 () T@U)
(declare-fun $generated@@142 () T@U)
(declare-fun $generated@@143 () Int)
(declare-fun $generated@@144 (T@U) Bool)
(declare-fun $generated@@145 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 4) (let (($generated@@146  (=> (= $generated@@140 ($generated@@88 $generated@@141 $generated@@142 $generated@@0 false)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (= ($generated@@23 ($generated@@21 1) $generated@@143) $generated@@143)) (=> (= ($generated@@23 ($generated@@21 1) $generated@@143) $generated@@143) (=> (= (ControlFlow 0 2) (- 0 1)) ($generated@@46 ($generated@@27 $generated@@143) ($generated@@43 $generated@@5 ($generated@@9 ($generated@@21 1))))))))))
(let (($generated@@147  (=> (and (and (and ($generated@@144 $generated@@142) ($generated@@145 $generated@@142)) (<= ($generated@@21 1) $generated@@143)) (and (= 3 $generated@@19) (= (ControlFlow 0 4) 2))) $generated@@146)))
$generated@@147)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
