(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 (Bool) T@U)
(declare-fun $generated@@6 (T@U) Bool)
(declare-fun $generated@@7 (Int) T@U)
(declare-fun $generated@@8 (T@U) Int)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@17 (T@T T@U T@U) Bool)
(declare-fun $generated@@18 (T@T T@T) T@T)
(declare-fun $generated@@19 () T@T)
(declare-fun $generated@@20 (T@U) T@U)
(declare-fun $generated@@21 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@22 (T@U T@U) Bool)
(declare-fun $generated@@23 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@24 (T@T) T@T)
(declare-fun $generated@@25 (T@T) T@T)
(declare-fun $generated@@46 (T@T T@U) T@U)
(declare-fun $generated@@47 (T@T T@U) T@U)
(declare-fun $generated@@50 (T@U T@U T@U) Bool)
(declare-fun $generated@@51 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@56 (T@U T@U) Bool)
(declare-fun $generated@@69 (T@U) T@U)
(declare-fun $generated@@71 (T@U) T@U)
(declare-fun $generated@@75 (T@U T@U) T@U)
(declare-fun $generated@@79 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@80 () T@T)
(declare-fun $generated@@81 () T@T)
(declare-fun $generated@@82 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@83 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (forall (($generated@@11 Bool) ) (! (= ($generated@@6 ($generated@@5 $generated@@11)) $generated@@11)
 :pattern ( ($generated@@5 $generated@@11))
))) (forall (($generated@@12 T@U) ) (! (= ($generated@@5 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 Int) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))))
(assert (distinct $generated $generated@@0)
)
(assert  (and (and (and (and (and (forall (($generated@@26 T@T) ($generated@@27 T@T) ($generated@@28 T@U) ($generated@@29 T@U) ($generated@@30 T@U) ) (! (= ($generated@@21 $generated@@26 $generated@@27 ($generated@@23 $generated@@26 $generated@@27 $generated@@29 $generated@@30 $generated@@28) $generated@@30) $generated@@28)
 :weight 0
)) (forall (($generated@@31 T@T) ($generated@@32 T@T) ($generated@@33 T@U) ($generated@@34 T@U) ($generated@@35 T@U) ($generated@@36 T@U) ) (!  (or (= $generated@@35 $generated@@36) (= ($generated@@21 $generated@@31 $generated@@32 ($generated@@23 $generated@@31 $generated@@32 $generated@@34 $generated@@35 $generated@@33) $generated@@36) ($generated@@21 $generated@@31 $generated@@32 $generated@@34 $generated@@36)))
 :weight 0
))) (forall (($generated@@37 T@T) ($generated@@38 T@T) ) (= ($generated@@1 ($generated@@18 $generated@@37 $generated@@38)) 3))) (forall (($generated@@39 T@T) ($generated@@40 T@T) ) (! (= ($generated@@24 ($generated@@18 $generated@@39 $generated@@40)) $generated@@39)
 :pattern ( ($generated@@18 $generated@@39 $generated@@40))
))) (forall (($generated@@41 T@T) ($generated@@42 T@T) ) (! (= ($generated@@25 ($generated@@18 $generated@@41 $generated@@42)) $generated@@42)
 :pattern ( ($generated@@18 $generated@@41 $generated@@42))
))) (= ($generated@@1 $generated@@19) 4)))
(assert (forall (($generated@@43 T@U) ($generated@@44 T@U) ) (! (= ($generated@@17 ($generated@@18 $generated@@19 $generated@@2) $generated@@43 ($generated@@20 $generated@@44)) (forall (($generated@@45 T@U) ) (!  (=> ($generated@@6 ($generated@@21 $generated@@19 $generated@@2 $generated@@43 $generated@@45)) ($generated@@22 $generated@@45 $generated@@44))
 :pattern ( ($generated@@21 $generated@@19 $generated@@2 $generated@@43 $generated@@45))
)))
 :pattern ( ($generated@@17 ($generated@@18 $generated@@19 $generated@@2) $generated@@43 ($generated@@20 $generated@@44)))
)))
(assert (forall (($generated@@48 T@U) ($generated@@49 T@T) ) (! (= ($generated@@47 $generated@@49 ($generated@@46 $generated@@49 $generated@@48)) $generated@@48)
 :pattern ( ($generated@@46 $generated@@49 $generated@@48))
)))
(assert (forall (($generated@@52 T@U) ($generated@@53 T@U) ($generated@@54 T@U) ($generated@@55 T@T) ) (! (= ($generated@@50 ($generated@@47 $generated@@55 $generated@@52) $generated@@53 $generated@@54) ($generated@@51 $generated@@55 $generated@@52 $generated@@53 $generated@@54))
 :pattern ( ($generated@@50 ($generated@@47 $generated@@55 $generated@@52) $generated@@53 $generated@@54))
)))
(assert (forall (($generated@@57 T@U) ($generated@@58 T@U) ) (! (= ($generated@@56 $generated@@57 $generated@@58) (forall (($generated@@59 T@U) ) (! (= ($generated@@6 ($generated@@21 $generated@@19 $generated@@2 $generated@@57 $generated@@59)) ($generated@@6 ($generated@@21 $generated@@19 $generated@@2 $generated@@58 $generated@@59)))
 :pattern ( ($generated@@21 $generated@@19 $generated@@2 $generated@@57 $generated@@59))
 :pattern ( ($generated@@21 $generated@@19 $generated@@2 $generated@@58 $generated@@59))
)))
 :pattern ( ($generated@@56 $generated@@57 $generated@@58))
)))
(assert (forall (($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@U) ) (! (= ($generated@@51 ($generated@@18 $generated@@19 $generated@@2) $generated@@60 ($generated@@20 $generated@@61) $generated@@62) (forall (($generated@@63 T@U) ) (!  (=> ($generated@@6 ($generated@@21 $generated@@19 $generated@@2 $generated@@60 $generated@@63)) ($generated@@50 $generated@@63 $generated@@61 $generated@@62))
 :pattern ( ($generated@@21 $generated@@19 $generated@@2 $generated@@60 $generated@@63))
)))
 :pattern ( ($generated@@51 ($generated@@18 $generated@@19 $generated@@2) $generated@@60 ($generated@@20 $generated@@61) $generated@@62))
)))
(assert (forall (($generated@@64 T@U) ($generated@@65 T@U) ) (!  (=> ($generated@@56 $generated@@64 $generated@@65) (= $generated@@64 $generated@@65))
 :pattern ( ($generated@@56 $generated@@64 $generated@@65))
)))
(assert (forall (($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@T) ) (! (= ($generated@@22 ($generated@@47 $generated@@68 $generated@@66) $generated@@67) ($generated@@17 $generated@@68 $generated@@66 $generated@@67))
 :pattern ( ($generated@@22 ($generated@@47 $generated@@68 $generated@@66) $generated@@67))
)))
(assert (forall (($generated@@70 T@U) ) (! (= ($generated@@69 ($generated@@20 $generated@@70)) $generated@@70)
 :pattern ( ($generated@@20 $generated@@70))
)))
(assert (forall (($generated@@72 T@U) ) (! (= ($generated@@71 ($generated@@20 $generated@@72)) $generated)
 :pattern ( ($generated@@20 $generated@@72))
)))
(assert (forall (($generated@@73 T@U) ($generated@@74 T@T) ) (! (= ($generated@@46 $generated@@74 ($generated@@47 $generated@@74 $generated@@73)) $generated@@73)
 :pattern ( ($generated@@47 $generated@@74 $generated@@73))
)))
(assert (forall (($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ) (! (= ($generated@@6 ($generated@@21 $generated@@19 $generated@@2 ($generated@@75 $generated@@76 $generated@@77) $generated@@78))  (and ($generated@@22 $generated@@78 $generated@@76) ($generated@@6 ($generated@@21 $generated@@19 $generated@@2 $generated@@77 $generated@@78))))
 :pattern ( ($generated@@21 $generated@@19 $generated@@2 ($generated@@75 $generated@@76 $generated@@77) $generated@@78))
)))
(assert  (and (and (and (forall (($generated@@84 T@T) ($generated@@85 T@T) ($generated@@86 T@T) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ) (! (= ($generated@@79 $generated@@84 $generated@@85 $generated@@86 ($generated@@83 $generated@@84 $generated@@85 $generated@@86 $generated@@88 $generated@@89 $generated@@90 $generated@@87) $generated@@89 $generated@@90) $generated@@87)
 :weight 0
)) (and (forall (($generated@@91 T@T) ($generated@@92 T@T) ($generated@@93 T@T) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ) (!  (or (= $generated@@96 $generated@@98) (= ($generated@@79 $generated@@91 $generated@@92 $generated@@93 ($generated@@83 $generated@@91 $generated@@92 $generated@@93 $generated@@95 $generated@@96 $generated@@97 $generated@@94) $generated@@98 $generated@@99) ($generated@@79 $generated@@91 $generated@@92 $generated@@93 $generated@@95 $generated@@98 $generated@@99)))
 :weight 0
)) (forall (($generated@@100 T@T) ($generated@@101 T@T) ($generated@@102 T@T) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ) (!  (or (= $generated@@106 $generated@@108) (= ($generated@@79 $generated@@100 $generated@@101 $generated@@102 ($generated@@83 $generated@@100 $generated@@101 $generated@@102 $generated@@104 $generated@@105 $generated@@106 $generated@@103) $generated@@107 $generated@@108) ($generated@@79 $generated@@100 $generated@@101 $generated@@102 $generated@@104 $generated@@107 $generated@@108)))
 :weight 0
)))) (= ($generated@@1 $generated@@80) 5)) (= ($generated@@1 $generated@@81) 6)))
(assert (forall (($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 Bool) ($generated@@113 T@U) ($generated@@114 T@U) ) (! (= ($generated@@6 ($generated@@79 $generated@@80 $generated@@81 $generated@@2 ($generated@@82 $generated@@109 $generated@@110 $generated@@111 $generated@@112) $generated@@113 $generated@@114))  (=> (and (or (not (= $generated@@113 $generated@@109)) (not true)) ($generated@@6 ($generated@@46 $generated@@2 ($generated@@21 $generated@@81 $generated@@19 ($generated@@21 $generated@@80 ($generated@@18 $generated@@81 $generated@@19) $generated@@110 $generated@@113) $generated@@111)))) $generated@@112))
 :pattern ( ($generated@@79 $generated@@80 $generated@@81 $generated@@2 ($generated@@82 $generated@@109 $generated@@110 $generated@@111 $generated@@112) $generated@@113 $generated@@114))
)))
(assert (forall (($generated@@115 T@U) ($generated@@116 T@U) ) (!  (=> ($generated@@22 $generated@@115 ($generated@@20 $generated@@116)) (and (= ($generated@@47 ($generated@@18 $generated@@19 $generated@@2) ($generated@@46 ($generated@@18 $generated@@19 $generated@@2) $generated@@115)) $generated@@115) ($generated@@17 ($generated@@18 $generated@@19 $generated@@2) ($generated@@46 ($generated@@18 $generated@@19 $generated@@2) $generated@@115) ($generated@@20 $generated@@116))))
 :pattern ( ($generated@@22 $generated@@115 ($generated@@20 $generated@@116)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@117 () T@U)
(declare-fun $generated@@118 () T@U)
(declare-fun $generated@@119 () T@U)
(declare-fun $generated@@120 () T@U)
(declare-fun $generated@@121 () T@U)
(declare-fun $generated@@122 () T@U)
(declare-fun $generated@@123 (T@U) Bool)
(declare-fun $generated@@124 (T@U) Bool)
(declare-fun $generated@@125 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 8) (let (($generated@@126  (=> (= (ControlFlow 0 2) (- 0 1)) ($generated@@56 ($generated@@75 $generated@@117 $generated@@118) $generated@@118))))
(let (($generated@@127  (=> (and (not ($generated@@6 ($generated@@21 $generated@@19 $generated@@2 $generated@@118 $generated@@119))) (= (ControlFlow 0 5) 2)) $generated@@126)))
(let (($generated@@128  (=> (and ($generated@@6 ($generated@@21 $generated@@19 $generated@@2 $generated@@118 $generated@@119)) (= (ControlFlow 0 4) 2)) $generated@@126)))
(let (($generated@@129  (=> (and ($generated@@22 $generated@@119 $generated@@117) ($generated@@50 $generated@@119 $generated@@117 $generated@@120)) (and (=> (= (ControlFlow 0 6) 4) $generated@@128) (=> (= (ControlFlow 0 6) 5) $generated@@127)))))
(let (($generated@@130  (=> (and (not (and ($generated@@22 $generated@@119 $generated@@117) ($generated@@50 $generated@@119 $generated@@117 $generated@@120))) (= (ControlFlow 0 3) 2)) $generated@@126)))
(let (($generated@@131  (=> (= $generated@@121 ($generated@@82 $generated@@122 $generated@@120 $generated@@0 false)) (and (=> (= (ControlFlow 0 7) 6) $generated@@129) (=> (= (ControlFlow 0 7) 3) $generated@@130)))))
(let (($generated@@132  (=> (and ($generated@@123 $generated@@120) ($generated@@124 $generated@@120)) (=> (and (and ($generated@@17 ($generated@@18 $generated@@19 $generated@@2) $generated@@118 ($generated@@20 $generated@@117)) ($generated@@51 ($generated@@18 $generated@@19 $generated@@2) $generated@@118 ($generated@@20 $generated@@117) $generated@@120)) (and (= 0 $generated@@125) (= (ControlFlow 0 8) 7))) $generated@@131))))
$generated@@132))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
