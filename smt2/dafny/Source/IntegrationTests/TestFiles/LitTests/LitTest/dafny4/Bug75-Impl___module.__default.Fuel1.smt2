(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (Bool) T@U)
(declare-fun $generated@@7 (T@U) Bool)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun $generated@@9 (T@U) Int)
(declare-fun $generated@@10 (Real) T@U)
(declare-fun $generated@@11 (T@U) Real)
(declare-fun $generated@@18 (T@U) T@U)
(declare-fun $generated@@19 (Int) Int)
(declare-fun $generated@@21 (T@T T@U) T@U)
(declare-fun $generated@@24 () Int)
(declare-fun $generated@@25 (Int) Int)
(declare-fun $generated@@26 (Int) Bool)
(declare-fun $generated@@28 (T@T T@U) T@U)
(declare-fun $generated@@29 (T@T T@U) T@U)
(declare-fun $generated@@32 (T@U Int Int) Bool)
(declare-fun $generated@@33 (T@U) T@U)
(declare-fun $generated@@37 (Int Int) Bool)
(declare-fun $generated@@51 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@52 () T@T)
(declare-fun $generated@@53 () T@T)
(declare-fun $generated@@54 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@55 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@56 () T@T)
(declare-fun $generated@@57 (T@T T@T) T@T)
(declare-fun $generated@@58 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@59 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@60 (T@T) T@T)
(declare-fun $generated@@61 (T@T) T@T)
(declare-fun $generated@@113 (T@T T@U T@U T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@4) 1)) (= ($generated@@2 $generated@@5) 2)) (forall (($generated@@12 Bool) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Int) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Real) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))))
(assert (distinct $generated $generated@@0 $generated@@1)
)
(assert (= ($generated@@18 $generated) $generated@@0))
(assert (forall (($generated@@20 Int) ) (! (= ($generated@@19 $generated@@20) $generated@@20)
 :pattern ( ($generated@@19 $generated@@20))
)))
(assert (forall (($generated@@22 T@U) ($generated@@23 T@T) ) (! (= ($generated@@21 $generated@@23 $generated@@22) $generated@@22)
 :pattern ( ($generated@@21 $generated@@23 $generated@@22))
)))
(assert  (=> (<= 0 $generated@@24) (forall (($generated@@27 Int) ) (!  (=> (or ($generated@@26 $generated@@27) (< 0 $generated@@24)) (= ($generated@@25 $generated@@27) (- $generated@@27 1)))
 :pattern ( ($generated@@25 $generated@@27))
))))
(assert (forall (($generated@@30 T@U) ($generated@@31 T@T) ) (! (= ($generated@@29 $generated@@31 ($generated@@28 $generated@@31 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@28 $generated@@31 $generated@@30))
)))
(assert (forall (($generated@@34 T@U) ($generated@@35 Int) ($generated@@36 Int) ) (! (= ($generated@@32 ($generated@@33 $generated@@34) $generated@@35 $generated@@36) ($generated@@32 $generated@@34 $generated@@35 $generated@@36))
 :pattern ( ($generated@@32 ($generated@@33 $generated@@34) $generated@@35 $generated@@36))
)))
(assert  (=> (<= 1 $generated@@24) (forall (($generated@@38 T@U) ($generated@@39 Int) ($generated@@40 Int) ) (!  (=> (or ($generated@@37 ($generated@@19 $generated@@39) ($generated@@19 $generated@@40)) (< 1 $generated@@24)) (and (=> (< ($generated@@19 0) ($generated@@19 $generated@@39)) (forall (($generated@@41 Int) ) (!  (and ($generated@@26 ($generated@@19 $generated@@39)) ($generated@@37 ($generated@@19 ($generated@@25 ($generated@@19 $generated@@39))) $generated@@41))
 :pattern ( ($generated@@32 ($generated@@33 $generated@@38) ($generated@@25 $generated@@39) $generated@@41))
))) (= ($generated@@32 ($generated@@33 $generated@@38) ($generated@@19 $generated@@39) ($generated@@19 $generated@@40))  (or (<= ($generated@@19 $generated@@39) ($generated@@19 0)) (exists (($generated@@42 Int) ) (! ($generated@@32 ($generated@@33 $generated@@38) ($generated@@19 ($generated@@25 ($generated@@19 $generated@@39))) $generated@@42)
 :pattern ( ($generated@@32 ($generated@@33 $generated@@38) ($generated@@25 $generated@@39) $generated@@42))
))))))
 :weight 3
 :pattern ( ($generated@@32 ($generated@@33 $generated@@38) ($generated@@19 $generated@@39) ($generated@@19 $generated@@40)))
))))
(assert  (=> (<= 1 $generated@@24) (forall (($generated@@43 T@U) ($generated@@44 Int) ($generated@@45 Int) ) (!  (=> (or ($generated@@37 $generated@@44 $generated@@45) (< 1 $generated@@24)) (and (=> (< ($generated@@19 0) $generated@@44) (forall (($generated@@46 Int) ) (!  (and ($generated@@26 $generated@@44) ($generated@@37 ($generated@@25 $generated@@44) $generated@@46))
 :pattern ( ($generated@@32 $generated@@43 ($generated@@25 $generated@@44) $generated@@46))
))) (= ($generated@@32 ($generated@@33 $generated@@43) $generated@@44 $generated@@45)  (or (<= $generated@@44 ($generated@@19 0)) (exists (($generated@@47 Int) ) (! ($generated@@32 $generated@@43 ($generated@@25 $generated@@44) $generated@@47)
 :pattern ( ($generated@@32 $generated@@43 ($generated@@25 $generated@@44) $generated@@47))
))))))
 :pattern ( ($generated@@32 ($generated@@33 $generated@@43) $generated@@44 $generated@@45))
))))
(assert  (=> (<= 0 $generated@@24) (forall (($generated@@48 Int) ) (!  (=> (or ($generated@@26 ($generated@@19 $generated@@48)) (< 0 $generated@@24)) (= ($generated@@25 ($generated@@19 $generated@@48)) ($generated@@19 (- $generated@@48 1))))
 :weight 3
 :pattern ( ($generated@@25 ($generated@@19 $generated@@48)))
))))
(assert (forall (($generated@@49 T@U) ($generated@@50 T@T) ) (! (= ($generated@@28 $generated@@50 ($generated@@29 $generated@@50 $generated@@49)) $generated@@49)
 :pattern ( ($generated@@29 $generated@@50 $generated@@49))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@62 T@T) ($generated@@63 T@T) ($generated@@64 T@T) ($generated@@65 T@U) ($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ) (! (= ($generated@@51 $generated@@62 $generated@@63 $generated@@64 ($generated@@58 $generated@@62 $generated@@63 $generated@@64 $generated@@66 $generated@@67 $generated@@68 $generated@@65) $generated@@67 $generated@@68) $generated@@65)
 :weight 0
)) (and (forall (($generated@@69 T@T) ($generated@@70 T@T) ($generated@@71 T@T) ($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (!  (or (= $generated@@74 $generated@@76) (= ($generated@@51 $generated@@69 $generated@@70 $generated@@71 ($generated@@58 $generated@@69 $generated@@70 $generated@@71 $generated@@73 $generated@@74 $generated@@75 $generated@@72) $generated@@76 $generated@@77) ($generated@@51 $generated@@69 $generated@@70 $generated@@71 $generated@@73 $generated@@76 $generated@@77)))
 :weight 0
)) (forall (($generated@@78 T@T) ($generated@@79 T@T) ($generated@@80 T@T) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (!  (or (= $generated@@84 $generated@@86) (= ($generated@@51 $generated@@78 $generated@@79 $generated@@80 ($generated@@58 $generated@@78 $generated@@79 $generated@@80 $generated@@82 $generated@@83 $generated@@84 $generated@@81) $generated@@85 $generated@@86) ($generated@@51 $generated@@78 $generated@@79 $generated@@80 $generated@@82 $generated@@85 $generated@@86)))
 :weight 0
)))) (= ($generated@@2 $generated@@52) 3)) (= ($generated@@2 $generated@@53) 4)) (forall (($generated@@87 T@T) ($generated@@88 T@T) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ) (! (= ($generated@@55 $generated@@87 $generated@@88 ($generated@@59 $generated@@87 $generated@@88 $generated@@90 $generated@@91 $generated@@89) $generated@@91) $generated@@89)
 :weight 0
))) (forall (($generated@@92 T@T) ($generated@@93 T@T) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (!  (or (= $generated@@96 $generated@@97) (= ($generated@@55 $generated@@92 $generated@@93 ($generated@@59 $generated@@92 $generated@@93 $generated@@95 $generated@@96 $generated@@94) $generated@@97) ($generated@@55 $generated@@92 $generated@@93 $generated@@95 $generated@@97)))
 :weight 0
))) (= ($generated@@2 $generated@@56) 5)) (forall (($generated@@98 T@T) ($generated@@99 T@T) ) (= ($generated@@2 ($generated@@57 $generated@@98 $generated@@99)) 6))) (forall (($generated@@100 T@T) ($generated@@101 T@T) ) (! (= ($generated@@60 ($generated@@57 $generated@@100 $generated@@101)) $generated@@100)
 :pattern ( ($generated@@57 $generated@@100 $generated@@101))
))) (forall (($generated@@102 T@T) ($generated@@103 T@T) ) (! (= ($generated@@61 ($generated@@57 $generated@@102 $generated@@103)) $generated@@103)
 :pattern ( ($generated@@57 $generated@@102 $generated@@103))
))))
(assert (forall (($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 Bool) ($generated@@108 T@U) ($generated@@109 T@U) ) (! (= ($generated@@7 ($generated@@51 $generated@@52 $generated@@53 $generated@@3 ($generated@@54 $generated@@104 $generated@@105 $generated@@106 $generated@@107) $generated@@108 $generated@@109))  (=> (and (or (not (= $generated@@108 $generated@@104)) (not true)) ($generated@@7 ($generated@@28 $generated@@3 ($generated@@55 $generated@@53 $generated@@56 ($generated@@55 $generated@@52 ($generated@@57 $generated@@53 $generated@@56) $generated@@105 $generated@@108) $generated@@106)))) $generated@@107))
 :pattern ( ($generated@@51 $generated@@52 $generated@@53 $generated@@3 ($generated@@54 $generated@@104 $generated@@105 $generated@@106 $generated@@107) $generated@@108 $generated@@109))
)))
(assert (forall (($generated@@110 Int) ) (! (= ($generated@@29 $generated@@4 ($generated@@8 ($generated@@19 $generated@@110))) ($generated@@21 $generated@@56 ($generated@@29 $generated@@4 ($generated@@8 $generated@@110))))
 :pattern ( ($generated@@29 $generated@@4 ($generated@@8 ($generated@@19 $generated@@110))))
)))
(assert (forall (($generated@@111 T@U) ($generated@@112 T@T) ) (! (= ($generated@@29 $generated@@112 ($generated@@21 $generated@@112 $generated@@111)) ($generated@@21 $generated@@56 ($generated@@29 $generated@@112 $generated@@111)))
 :pattern ( ($generated@@29 $generated@@112 ($generated@@21 $generated@@112 $generated@@111)))
)))
(assert (forall (($generated@@114 T@U) ($generated@@115 T@U) ) (! ($generated@@113 $generated@@4 $generated@@115 $generated $generated@@114)
 :pattern ( ($generated@@113 $generated@@4 $generated@@115 $generated $generated@@114))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@116 () Int)
(declare-fun $generated@@117 () Int)
(declare-fun $generated@@118 () T@U)
(declare-fun $generated@@119 () T@U)
(declare-fun $generated@@120 () Int)
(declare-fun $generated@@121 () Int)
(declare-fun $generated@@122 () T@U)
(declare-fun $generated@@123 () T@U)
(declare-fun $generated@@124 (T@U) Bool)
(declare-fun $generated@@125 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 8) (let (($generated@@126 true))
(let (($generated@@127  (=> (and (and ($generated@@37 $generated@@116 $generated@@117) (=> (< ($generated@@19 0) $generated@@116) (forall (($generated@@128 Int) ) (!  (and ($generated@@26 $generated@@116) ($generated@@37 ($generated@@25 $generated@@116) $generated@@128))
 :pattern ( ($generated@@32 ($generated@@33 $generated@@118) ($generated@@25 $generated@@116) $generated@@128))
)))) (= (ControlFlow 0 2) (- 0 1))) (= ($generated@@32 ($generated@@33 ($generated@@33 $generated@@118)) $generated@@116 $generated@@117)  (or (<= $generated@@116 ($generated@@19 0)) (exists (($generated@@129 Int) ) (! ($generated@@32 ($generated@@33 $generated@@118) ($generated@@25 $generated@@116) $generated@@129)
 :pattern ( ($generated@@32 ($generated@@33 $generated@@118) ($generated@@25 $generated@@116) $generated@@129))
)))))))
(let (($generated@@130  (=> ($generated@@113 $generated@@4 ($generated@@8 $generated@@116) $generated $generated@@119) (=> (and ($generated@@26 $generated@@116) (= $generated@@120 ($generated@@25 $generated@@116))) (=> (and (and ($generated@@113 $generated@@4 ($generated@@8 $generated@@120) $generated $generated@@119) ($generated@@113 $generated@@4 ($generated@@8 $generated@@121) $generated $generated@@119)) (and ($generated@@37 ($generated@@25 $generated@@116) $generated@@121) (= (ControlFlow 0 4) 2))) $generated@@127)))))
(let (($generated@@131  (=> (< ($generated@@19 0) $generated@@116) (and (=> (= (ControlFlow 0 6) 4) $generated@@130) (=> (= (ControlFlow 0 6) 5) $generated@@126)))))
(let (($generated@@132  (=> (and (<= $generated@@116 ($generated@@19 0)) (= (ControlFlow 0 3) 2)) $generated@@127)))
(let (($generated@@133  (=> (and (and (= $generated@@122 ($generated@@54 $generated@@123 $generated@@119 $generated@@1 false)) ($generated@@113 $generated@@4 ($generated@@8 $generated@@116) $generated $generated@@119)) (and ($generated@@113 $generated@@4 ($generated@@8 $generated@@117) $generated $generated@@119) ($generated@@37 $generated@@116 $generated@@117))) (and (=> (= (ControlFlow 0 7) 6) $generated@@131) (=> (= (ControlFlow 0 7) 3) $generated@@132)))))
(let (($generated@@134  (=> (and (and ($generated@@124 $generated@@119) ($generated@@125 $generated@@119)) (and (= 2 $generated@@24) (= (ControlFlow 0 8) 7))) $generated@@133)))
$generated@@134))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
