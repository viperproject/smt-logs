(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 () T@U)
(declare-fun $generated@@9 (T@T) Int)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 () T@T)
(declare-fun $generated@@12 () T@T)
(declare-fun $generated@@13 (Bool) T@U)
(declare-fun $generated@@14 (T@U) Bool)
(declare-fun $generated@@15 (Int) T@U)
(declare-fun $generated@@16 (T@U) Int)
(declare-fun $generated@@17 (Real) T@U)
(declare-fun $generated@@18 (T@U) Real)
(declare-fun $generated@@25 (T@U) T@U)
(declare-fun $generated@@26 () T@U)
(declare-fun $generated@@27 () T@U)
(declare-fun $generated@@28 () T@U)
(declare-fun $generated@@29 (T@U) Bool)
(declare-fun $generated@@30 (T@T T@U T@U) Bool)
(declare-fun $generated@@31 () T@T)
(declare-fun $generated@@32 () T@U)
(declare-fun $generated@@34 () T@U)
(declare-fun $generated@@35 () T@U)
(declare-fun $generated@@36 () T@U)
(declare-fun $generated@@37 (T@U T@U) Bool)
(declare-fun $generated@@38 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@39 () T@T)
(declare-fun $generated@@40 () T@T)
(declare-fun $generated@@41 () T@T)
(declare-fun $generated@@42 (T@T T@T) T@T)
(declare-fun $generated@@43 (T@T T@U) T@U)
(declare-fun $generated@@44 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@45 (T@T) T@T)
(declare-fun $generated@@46 (T@T) T@T)
(declare-fun $generated@@67 (Int) Int)
(declare-fun $generated@@69 (T@T T@U) T@U)
(declare-fun $generated@@73 (T@T T@U) T@U)
(declare-fun $generated@@77 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@88 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@89 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@90 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@122 (T@U) Bool)
(declare-fun $generated@@129 (T@U) T@U)
(declare-fun $generated@@130 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@9 $generated@@10) 0) (= ($generated@@9 $generated@@11) 1)) (= ($generated@@9 $generated@@12) 2)) (forall (($generated@@19 Bool) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 Int) ) (! (= ($generated@@16 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 T@U) ) (! (= ($generated@@15 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= ($generated@@18 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))) (forall (($generated@@24 T@U) ) (! (= ($generated@@17 ($generated@@18 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@18 $generated@@24))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7 $generated@@8)
)
(assert (= ($generated@@25 $generated@@26) $generated@@3))
(assert (= ($generated@@25 $generated@@27) $generated@@4))
(assert (= ($generated@@25 $generated@@28) $generated@@5))
(assert (= ($generated@@9 $generated@@31) 3))
(assert (forall (($generated@@33 T@U) ) (!  (=> ($generated@@30 $generated@@31 $generated@@33 $generated@@32) ($generated@@29 $generated@@33))
 :pattern ( ($generated@@29 $generated@@33) ($generated@@30 $generated@@31 $generated@@33 $generated@@32))
)))
(assert ($generated@@30 $generated@@31 $generated@@26 $generated@@34))
(assert ($generated@@30 $generated@@31 $generated@@27 $generated@@35))
(assert ($generated@@30 $generated@@31 $generated@@36 $generated@@32))
(assert ($generated@@30 $generated@@31 $generated@@28 $generated@@32))
(assert  (and (and (and (and (and (and (and (forall (($generated@@47 T@T) ($generated@@48 T@T) ($generated@@49 T@U) ($generated@@50 T@U) ($generated@@51 T@U) ) (! (= ($generated@@38 $generated@@47 $generated@@48 ($generated@@44 $generated@@47 $generated@@48 $generated@@50 $generated@@51 $generated@@49) $generated@@51) $generated@@49)
 :weight 0
)) (forall (($generated@@52 T@T) ($generated@@53 T@T) ($generated@@54 T@U) ($generated@@55 T@U) ($generated@@56 T@U) ($generated@@57 T@U) ) (!  (or (= $generated@@56 $generated@@57) (= ($generated@@38 $generated@@52 $generated@@53 ($generated@@44 $generated@@52 $generated@@53 $generated@@55 $generated@@56 $generated@@54) $generated@@57) ($generated@@38 $generated@@52 $generated@@53 $generated@@55 $generated@@57)))
 :weight 0
))) (= ($generated@@9 $generated@@39) 4)) (= ($generated@@9 $generated@@40) 5)) (= ($generated@@9 $generated@@41) 6)) (forall (($generated@@58 T@T) ($generated@@59 T@T) ) (= ($generated@@9 ($generated@@42 $generated@@58 $generated@@59)) 7))) (forall (($generated@@60 T@T) ($generated@@61 T@T) ) (! (= ($generated@@45 ($generated@@42 $generated@@60 $generated@@61)) $generated@@60)
 :pattern ( ($generated@@42 $generated@@60 $generated@@61))
))) (forall (($generated@@62 T@T) ($generated@@63 T@T) ) (! (= ($generated@@46 ($generated@@42 $generated@@62 $generated@@63)) $generated@@63)
 :pattern ( ($generated@@42 $generated@@62 $generated@@63))
))))
(assert (forall (($generated@@64 T@U) ($generated@@65 T@U) ) (!  (=> ($generated@@37 $generated@@64 $generated@@65) (forall (($generated@@66 T@U) ) (!  (=> ($generated@@14 ($generated@@43 $generated@@10 ($generated@@38 $generated@@39 $generated@@40 ($generated@@38 $generated@@41 ($generated@@42 $generated@@39 $generated@@40) $generated@@64 $generated@@66) $generated))) ($generated@@14 ($generated@@43 $generated@@10 ($generated@@38 $generated@@39 $generated@@40 ($generated@@38 $generated@@41 ($generated@@42 $generated@@39 $generated@@40) $generated@@65 $generated@@66) $generated))))
 :pattern ( ($generated@@38 $generated@@39 $generated@@40 ($generated@@38 $generated@@41 ($generated@@42 $generated@@39 $generated@@40) $generated@@65 $generated@@66) $generated))
)))
 :pattern ( ($generated@@37 $generated@@64 $generated@@65))
)))
(assert (forall (($generated@@68 Int) ) (! (= ($generated@@67 $generated@@68) $generated@@68)
 :pattern ( ($generated@@67 $generated@@68))
)))
(assert (forall (($generated@@70 T@U) ($generated@@71 T@T) ) (! (= ($generated@@69 $generated@@71 $generated@@70) $generated@@70)
 :pattern ( ($generated@@69 $generated@@71 $generated@@70))
)))
(assert (forall (($generated@@72 T@U) ) (! (= ($generated@@29 $generated@@72) (= ($generated@@25 $generated@@72) $generated@@5))
 :pattern ( ($generated@@29 $generated@@72))
)))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@T) ) (! (= ($generated@@73 $generated@@75 ($generated@@43 $generated@@75 $generated@@74)) $generated@@74)
 :pattern ( ($generated@@43 $generated@@75 $generated@@74))
)))
(assert (forall (($generated@@76 T@U) ) (!  (=> ($generated@@29 $generated@@76) (= $generated@@76 $generated@@28))
 :pattern ( ($generated@@29 $generated@@76))
)))
(assert (forall (($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@T) ) (!  (=> ($generated@@37 $generated@@78 $generated@@79) (=> ($generated@@77 $generated@@82 $generated@@80 $generated@@81 $generated@@78) ($generated@@77 $generated@@82 $generated@@80 $generated@@81 $generated@@79)))
 :pattern ( ($generated@@37 $generated@@78 $generated@@79) ($generated@@77 $generated@@82 $generated@@80 $generated@@81 $generated@@78))
)))
(assert (forall (($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ) (!  (=> (or (not (= $generated@@83 $generated@@85)) (not true)) (=> (and ($generated@@37 $generated@@83 $generated@@84) ($generated@@37 $generated@@84 $generated@@85)) ($generated@@37 $generated@@83 $generated@@85)))
 :pattern ( ($generated@@37 $generated@@83 $generated@@84) ($generated@@37 $generated@@84 $generated@@85))
)))
(assert (forall (($generated@@86 T@U) ($generated@@87 T@T) ) (! (= ($generated@@43 $generated@@87 ($generated@@73 $generated@@87 $generated@@86)) $generated@@86)
 :pattern ( ($generated@@73 $generated@@87 $generated@@86))
)))
(assert  (and (forall (($generated@@91 T@T) ($generated@@92 T@T) ($generated@@93 T@T) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (! (= ($generated@@88 $generated@@91 $generated@@92 $generated@@93 ($generated@@90 $generated@@91 $generated@@92 $generated@@93 $generated@@95 $generated@@96 $generated@@97 $generated@@94) $generated@@96 $generated@@97) $generated@@94)
 :weight 0
)) (and (forall (($generated@@98 T@T) ($generated@@99 T@T) ($generated@@100 T@T) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or (= $generated@@103 $generated@@105) (= ($generated@@88 $generated@@98 $generated@@99 $generated@@100 ($generated@@90 $generated@@98 $generated@@99 $generated@@100 $generated@@102 $generated@@103 $generated@@104 $generated@@101) $generated@@105 $generated@@106) ($generated@@88 $generated@@98 $generated@@99 $generated@@100 $generated@@102 $generated@@105 $generated@@106)))
 :weight 0
)) (forall (($generated@@107 T@T) ($generated@@108 T@T) ($generated@@109 T@T) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (!  (or (= $generated@@113 $generated@@115) (= ($generated@@88 $generated@@107 $generated@@108 $generated@@109 ($generated@@90 $generated@@107 $generated@@108 $generated@@109 $generated@@111 $generated@@112 $generated@@113 $generated@@110) $generated@@114 $generated@@115) ($generated@@88 $generated@@107 $generated@@108 $generated@@109 $generated@@111 $generated@@114 $generated@@115)))
 :weight 0
)))))
(assert (forall (($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 Bool) ($generated@@120 T@U) ($generated@@121 T@U) ) (! (= ($generated@@14 ($generated@@88 $generated@@41 $generated@@39 $generated@@10 ($generated@@89 $generated@@116 $generated@@117 $generated@@118 $generated@@119) $generated@@120 $generated@@121))  (=> (and (or (not (= $generated@@120 $generated@@116)) (not true)) ($generated@@14 ($generated@@43 $generated@@10 ($generated@@38 $generated@@39 $generated@@40 ($generated@@38 $generated@@41 ($generated@@42 $generated@@39 $generated@@40) $generated@@117 $generated@@120) $generated@@118)))) $generated@@119))
 :pattern ( ($generated@@88 $generated@@41 $generated@@39 $generated@@10 ($generated@@89 $generated@@116 $generated@@117 $generated@@118 $generated@@119) $generated@@120 $generated@@121))
)))
(assert (forall (($generated@@123 T@U) ($generated@@124 T@U) ) (!  (=> (and ($generated@@122 $generated@@124) ($generated@@30 $generated@@31 $generated@@123 $generated@@34)) ($generated@@77 $generated@@31 $generated@@123 $generated@@34 $generated@@124))
 :pattern ( ($generated@@77 $generated@@31 $generated@@123 $generated@@34 $generated@@124))
)))
(assert (forall (($generated@@125 T@U) ($generated@@126 T@U) ) (!  (=> (and ($generated@@122 $generated@@126) ($generated@@30 $generated@@31 $generated@@125 $generated@@35)) ($generated@@77 $generated@@31 $generated@@125 $generated@@35 $generated@@126))
 :pattern ( ($generated@@77 $generated@@31 $generated@@125 $generated@@35 $generated@@126))
)))
(assert (forall (($generated@@127 T@U) ($generated@@128 T@U) ) (!  (=> (and ($generated@@122 $generated@@128) ($generated@@30 $generated@@31 $generated@@127 $generated@@32)) ($generated@@77 $generated@@31 $generated@@127 $generated@@32 $generated@@128))
 :pattern ( ($generated@@77 $generated@@31 $generated@@127 $generated@@32 $generated@@128))
)))
(assert (= ($generated@@129 $generated@@34) $generated@@0))
(assert (= ($generated@@130 $generated@@34) $generated@@6))
(assert (= ($generated@@129 $generated@@35) $generated@@1))
(assert (= ($generated@@130 $generated@@35) $generated@@7))
(assert (= ($generated@@129 $generated@@32) $generated@@2))
(assert (= ($generated@@130 $generated@@32) $generated@@8))
(assert (= $generated@@26 ($generated@@69 $generated@@31 $generated@@26)))
(assert (= $generated@@27 ($generated@@69 $generated@@31 $generated@@27)))
(assert (= $generated@@28 ($generated@@69 $generated@@31 $generated@@28)))
(assert (forall (($generated@@131 Int) ) (! (= ($generated@@73 $generated@@11 ($generated@@15 ($generated@@67 $generated@@131))) ($generated@@69 $generated@@40 ($generated@@73 $generated@@11 ($generated@@15 $generated@@131))))
 :pattern ( ($generated@@73 $generated@@11 ($generated@@15 ($generated@@67 $generated@@131))))
)))
(assert (forall (($generated@@132 T@U) ($generated@@133 T@T) ) (! (= ($generated@@73 $generated@@133 ($generated@@69 $generated@@133 $generated@@132)) ($generated@@69 $generated@@40 ($generated@@73 $generated@@133 $generated@@132)))
 :pattern ( ($generated@@73 $generated@@133 ($generated@@69 $generated@@133 $generated@@132)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 2) true)
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
