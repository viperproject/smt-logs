(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 (Bool) T@U)
(declare-fun $generated@@6 (T@U) Bool)
(declare-fun $generated@@7 (Int) T@U)
(declare-fun $generated@@8 (T@U) Int)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@17 (T@U T@U) Bool)
(declare-fun $generated@@18 (T@U Int) T@U)
(declare-fun $generated@@22 (T@T T@U) T@U)
(declare-fun $generated@@23 (T@T T@U) T@U)
(declare-fun $generated@@26 (T@U T@U) T@U)
(declare-fun $generated@@29 (T@U T@U) T@U)
(declare-fun $generated@@40 (Int) T@U)
(declare-fun $generated@@41 (T@U) Int)
(declare-fun $generated@@43 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@44 () T@T)
(declare-fun $generated@@45 () T@T)
(declare-fun $generated@@46 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@47 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@48 () T@T)
(declare-fun $generated@@49 (T@T T@T) T@T)
(declare-fun $generated@@50 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@51 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@52 (T@T) T@T)
(declare-fun $generated@@53 (T@T) T@T)
(declare-fun $generated@@102 (T@U) T@U)
(declare-fun $generated@@103 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (forall (($generated@@11 Bool) ) (! (= ($generated@@6 ($generated@@5 $generated@@11)) $generated@@11)
 :pattern ( ($generated@@5 $generated@@11))
))) (forall (($generated@@12 T@U) ) (! (= ($generated@@5 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 Int) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))))
(assert (= ($generated $generated@@0) 0))
(assert (forall (($generated@@19 T@U) ($generated@@20 T@U) ) (! (= ($generated@@17 $generated@@19 $generated@@20)  (and (= ($generated $generated@@19) ($generated $generated@@20)) (forall (($generated@@21 Int) ) (!  (=> (and (<= 0 $generated@@21) (< $generated@@21 ($generated $generated@@19))) (= ($generated@@18 $generated@@19 $generated@@21) ($generated@@18 $generated@@20 $generated@@21)))
 :pattern ( ($generated@@18 $generated@@19 $generated@@21))
 :pattern ( ($generated@@18 $generated@@20 $generated@@21))
))))
 :pattern ( ($generated@@17 $generated@@19 $generated@@20))
)))
(assert (forall (($generated@@24 T@U) ($generated@@25 T@T) ) (! (= ($generated@@23 $generated@@25 ($generated@@22 $generated@@25 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@22 $generated@@25 $generated@@24))
)))
(assert (forall (($generated@@27 T@U) ($generated@@28 T@U) ) (! (= ($generated ($generated@@26 $generated@@27 $generated@@28)) (+ 1 ($generated $generated@@27)))
 :pattern ( ($generated@@26 $generated@@27 $generated@@28))
)))
(assert (forall (($generated@@30 T@U) ($generated@@31 T@U) ) (! (= ($generated ($generated@@29 $generated@@30 $generated@@31)) (+ ($generated $generated@@30) ($generated $generated@@31)))
 :pattern ( ($generated ($generated@@29 $generated@@30 $generated@@31)))
)))
(assert (forall (($generated@@32 T@U) ($generated@@33 Int) ($generated@@34 T@U) ) (!  (and (=> (= $generated@@33 ($generated $generated@@32)) (= ($generated@@18 ($generated@@26 $generated@@32 $generated@@34) $generated@@33) $generated@@34)) (=> (or (not (= $generated@@33 ($generated $generated@@32))) (not true)) (= ($generated@@18 ($generated@@26 $generated@@32 $generated@@34) $generated@@33) ($generated@@18 $generated@@32 $generated@@33))))
 :pattern ( ($generated@@18 ($generated@@26 $generated@@32 $generated@@34) $generated@@33))
)))
(assert (forall (($generated@@35 T@U) ($generated@@36 T@U) ) (!  (=> ($generated@@17 $generated@@35 $generated@@36) (= $generated@@35 $generated@@36))
 :pattern ( ($generated@@17 $generated@@35 $generated@@36))
)))
(assert (forall (($generated@@37 T@U) ) (! (<= 0 ($generated $generated@@37))
 :pattern ( ($generated $generated@@37))
)))
(assert (forall (($generated@@38 T@U) ($generated@@39 T@T) ) (! (= ($generated@@22 $generated@@39 ($generated@@23 $generated@@39 $generated@@38)) $generated@@38)
 :pattern ( ($generated@@23 $generated@@39 $generated@@38))
)))
(assert (forall (($generated@@42 Int) ) (!  (=> (or (and (<= 0 $generated@@42) (< $generated@@42 55296)) (and (<= 57344 $generated@@42) (< $generated@@42 1114112))) (= ($generated@@41 ($generated@@40 $generated@@42)) $generated@@42))
 :pattern ( ($generated@@40 $generated@@42))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@54 T@T) ($generated@@55 T@T) ($generated@@56 T@T) ($generated@@57 T@U) ($generated@@58 T@U) ($generated@@59 T@U) ($generated@@60 T@U) ) (! (= ($generated@@43 $generated@@54 $generated@@55 $generated@@56 ($generated@@50 $generated@@54 $generated@@55 $generated@@56 $generated@@58 $generated@@59 $generated@@60 $generated@@57) $generated@@59 $generated@@60) $generated@@57)
 :weight 0
)) (and (forall (($generated@@61 T@T) ($generated@@62 T@T) ($generated@@63 T@T) ($generated@@64 T@U) ($generated@@65 T@U) ($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@U) ) (!  (or (= $generated@@66 $generated@@68) (= ($generated@@43 $generated@@61 $generated@@62 $generated@@63 ($generated@@50 $generated@@61 $generated@@62 $generated@@63 $generated@@65 $generated@@66 $generated@@67 $generated@@64) $generated@@68 $generated@@69) ($generated@@43 $generated@@61 $generated@@62 $generated@@63 $generated@@65 $generated@@68 $generated@@69)))
 :weight 0
)) (forall (($generated@@70 T@T) ($generated@@71 T@T) ($generated@@72 T@T) ($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ) (!  (or (= $generated@@76 $generated@@78) (= ($generated@@43 $generated@@70 $generated@@71 $generated@@72 ($generated@@50 $generated@@70 $generated@@71 $generated@@72 $generated@@74 $generated@@75 $generated@@76 $generated@@73) $generated@@77 $generated@@78) ($generated@@43 $generated@@70 $generated@@71 $generated@@72 $generated@@74 $generated@@77 $generated@@78)))
 :weight 0
)))) (= ($generated@@1 $generated@@44) 3)) (= ($generated@@1 $generated@@45) 4)) (forall (($generated@@79 T@T) ($generated@@80 T@T) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ) (! (= ($generated@@47 $generated@@79 $generated@@80 ($generated@@51 $generated@@79 $generated@@80 $generated@@82 $generated@@83 $generated@@81) $generated@@83) $generated@@81)
 :weight 0
))) (forall (($generated@@84 T@T) ($generated@@85 T@T) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ) (!  (or (= $generated@@88 $generated@@89) (= ($generated@@47 $generated@@84 $generated@@85 ($generated@@51 $generated@@84 $generated@@85 $generated@@87 $generated@@88 $generated@@86) $generated@@89) ($generated@@47 $generated@@84 $generated@@85 $generated@@87 $generated@@89)))
 :weight 0
))) (= ($generated@@1 $generated@@48) 5)) (forall (($generated@@90 T@T) ($generated@@91 T@T) ) (= ($generated@@1 ($generated@@49 $generated@@90 $generated@@91)) 6))) (forall (($generated@@92 T@T) ($generated@@93 T@T) ) (! (= ($generated@@52 ($generated@@49 $generated@@92 $generated@@93)) $generated@@92)
 :pattern ( ($generated@@49 $generated@@92 $generated@@93))
))) (forall (($generated@@94 T@T) ($generated@@95 T@T) ) (! (= ($generated@@53 ($generated@@49 $generated@@94 $generated@@95)) $generated@@95)
 :pattern ( ($generated@@49 $generated@@94 $generated@@95))
))))
(assert (forall (($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 Bool) ($generated@@100 T@U) ($generated@@101 T@U) ) (! (= ($generated@@6 ($generated@@43 $generated@@44 $generated@@45 $generated@@2 ($generated@@46 $generated@@96 $generated@@97 $generated@@98 $generated@@99) $generated@@100 $generated@@101))  (=> (and (or (not (= $generated@@100 $generated@@96)) (not true)) ($generated@@6 ($generated@@22 $generated@@2 ($generated@@47 $generated@@45 $generated@@48 ($generated@@47 $generated@@44 ($generated@@49 $generated@@45 $generated@@48) $generated@@97 $generated@@100) $generated@@98)))) $generated@@99))
 :pattern ( ($generated@@43 $generated@@44 $generated@@45 $generated@@2 ($generated@@46 $generated@@96 $generated@@97 $generated@@98 $generated@@99) $generated@@100 $generated@@101))
)))
(assert (forall (($generated@@104 T@U) ($generated@@105 T@U) ) (!  (and (= ($generated@@102 ($generated@@26 $generated@@104 $generated@@105)) $generated@@104) (= ($generated@@103 ($generated@@26 $generated@@104 $generated@@105)) $generated@@105))
 :pattern ( ($generated@@26 $generated@@104 $generated@@105))
)))
(assert (forall (($generated@@106 T@U) ) (!  (and (= ($generated@@40 ($generated@@41 $generated@@106)) $generated@@106) (or (and (<= 0 ($generated@@41 $generated@@106)) (< ($generated@@41 $generated@@106) 55296)) (and (<= 57344 ($generated@@41 $generated@@106)) (< ($generated@@41 $generated@@106) 1114112))))
 :pattern ( ($generated@@41 $generated@@106))
)))
(assert (forall (($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 Int) ) (!  (and (=> (< $generated@@109 ($generated $generated@@107)) (= ($generated@@18 ($generated@@29 $generated@@107 $generated@@108) $generated@@109) ($generated@@18 $generated@@107 $generated@@109))) (=> (<= ($generated $generated@@107) $generated@@109) (= ($generated@@18 ($generated@@29 $generated@@107 $generated@@108) $generated@@109) ($generated@@18 $generated@@108 (- $generated@@109 ($generated $generated@@107))))))
 :pattern ( ($generated@@18 ($generated@@29 $generated@@107 $generated@@108) $generated@@109))
)))
(assert (forall (($generated@@110 T@U) ) (!  (=> (= ($generated $generated@@110) 0) (= $generated@@110 $generated@@0))
 :pattern ( ($generated $generated@@110))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@111 () T@U)
(declare-fun $generated@@112 () T@U)
(declare-fun $generated@@113 () T@U)
(declare-fun $generated@@114 () T@U)
(declare-fun $generated@@115 () T@T)
(declare-fun $generated@@116 (T@U) Bool)
(declare-fun $generated@@117 (T@U) Bool)
(declare-fun $generated@@118 () Int)
(assert (= ($generated@@1 $generated@@115) 7))
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@119  (=> (and (= $generated@@111 ($generated@@46 $generated@@112 $generated@@113 $generated@@114 false)) (= (ControlFlow 0 2) (- 0 1))) ($generated@@17 ($generated@@29 ($generated@@26 $generated@@0 ($generated@@23 $generated@@115 ($generated@@40 97))) ($generated@@26 $generated@@0 ($generated@@23 $generated@@115 ($generated@@40 98)))) ($generated@@26 ($generated@@26 $generated@@0 ($generated@@23 $generated@@115 ($generated@@40 97))) ($generated@@23 $generated@@115 ($generated@@40 98)))))))
(let (($generated@@120  (=> (and (and ($generated@@116 $generated@@113) ($generated@@117 $generated@@113)) (and (= 0 $generated@@118) (= (ControlFlow 0 3) 2))) $generated@@119)))
$generated@@120)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
