(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 (T@T) Int)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Bool) T@U)
(declare-fun $generated@@9 (T@U) Bool)
(declare-fun $generated@@10 (Int) T@U)
(declare-fun $generated@@11 (T@U) Int)
(declare-fun $generated@@12 (Real) T@U)
(declare-fun $generated@@13 (T@U) Real)
(declare-fun $generated@@20 (T@U) T@U)
(declare-fun $generated@@21 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@22 () T@U)
(declare-fun $generated@@25 () Int)
(declare-fun $generated@@26 (Int) Bool)
(declare-fun $generated@@27 (Int) Int)
(declare-fun $generated@@28 (Int) Bool)
(declare-fun $generated@@29 (Int) Bool)
(declare-fun $generated@@30 (Int) Bool)
(declare-fun $generated@@31 (Int Int) Int)
(declare-fun $generated@@36 (T@T T@U) T@U)
(declare-fun $generated@@39 (T@T T@U) T@U)
(declare-fun $generated@@40 (T@T T@U) T@U)
(declare-fun $generated@@43 (T@T T@U T@U) Bool)
(declare-fun $generated@@47 (Int Int) Int)
(declare-fun $generated@@54 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@55 () T@T)
(declare-fun $generated@@56 () T@T)
(declare-fun $generated@@57 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@58 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@59 () T@T)
(declare-fun $generated@@60 (T@T T@T) T@T)
(declare-fun $generated@@61 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@62 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@63 (T@T) T@T)
(declare-fun $generated@@64 (T@T) T@T)
(declare-fun $generated@@115 (Int Int) Int)
(declare-fun $generated@@118 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@4 $generated@@5) 0) (= ($generated@@4 $generated@@6) 1)) (= ($generated@@4 $generated@@7) 2)) (forall (($generated@@14 Bool) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Int) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Real) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3)
)
(assert (= ($generated@@20 $generated) $generated@@0))
(assert (forall (($generated@@23 T@U) ($generated@@24 T@U) ) (! ($generated@@21 $generated@@6 $generated@@23 $generated@@22 $generated@@24)
 :pattern ( ($generated@@21 $generated@@6 $generated@@23 $generated@@22 $generated@@24))
)))
(assert  (=> (<= 1 $generated@@25) (forall (($generated@@32 Int) ) (!  (=> (or ($generated@@28 ($generated@@27 $generated@@32)) (< 1 $generated@@25)) (and (=> (<= ($generated@@27 2) ($generated@@27 $generated@@32)) (forall (($generated@@33 Int) ) (!  (=> (<= ($generated@@27 2) $generated@@33) (=> (< $generated@@33 $generated@@32) ($generated@@30 $generated@@33)))
 :pattern ( ($generated@@29 $generated@@33))
))) (= ($generated@@26 ($generated@@27 $generated@@32))  (and (<= ($generated@@27 2) ($generated@@27 $generated@@32)) (forall (($generated@@34 Int) ) (!  (=> (and (and (<= ($generated@@27 2) $generated@@34) (< $generated@@34 $generated@@32)) ($generated@@29 $generated@@34)) (or (not (= ($generated@@31 $generated@@32 $generated@@34) 0)) (not true)))
 :pattern ( ($generated@@29 $generated@@34))
))))))
 :weight 3
 :pattern ( ($generated@@26 ($generated@@27 $generated@@32)))
))))
(assert (forall (($generated@@35 Int) ) (! (= ($generated@@27 $generated@@35) $generated@@35)
 :pattern ( ($generated@@27 $generated@@35))
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@T) ) (! (= ($generated@@36 $generated@@38 $generated@@37) $generated@@37)
 :pattern ( ($generated@@36 $generated@@38 $generated@@37))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@T) ) (! (= ($generated@@40 $generated@@42 ($generated@@39 $generated@@42 $generated@@41)) $generated@@41)
 :pattern ( ($generated@@39 $generated@@42 $generated@@41))
)))
(assert (forall (($generated@@44 T@U) ) (! (= ($generated@@43 $generated@@6 $generated@@44 $generated@@22) (<= ($generated@@27 0) ($generated@@11 $generated@@44)))
 :pattern ( ($generated@@43 $generated@@6 $generated@@44 $generated@@22))
)))
(assert  (=> (<= 0 $generated@@25) (forall (($generated@@45 Int) ) (!  (=> (or ($generated@@30 $generated@@45) (< 0 $generated@@25)) (= ($generated@@29 $generated@@45)  (and (<= ($generated@@27 2) $generated@@45) (forall (($generated@@46 Int) ) (!  (=> (and (<= ($generated@@27 2) $generated@@46) (< $generated@@46 $generated@@45)) (or (not (= ($generated@@31 $generated@@45 $generated@@46) 0)) (not true)))
 :pattern ( ($generated@@31 $generated@@45 $generated@@46))
)))))
 :pattern ( ($generated@@29 $generated@@45))
))))
(assert (forall (($generated@@48 Int) ($generated@@49 Int) ) (! (= ($generated@@47 $generated@@48 $generated@@49) (div $generated@@48 $generated@@49))
 :pattern ( ($generated@@47 $generated@@48 $generated@@49))
)))
(assert (forall (($generated@@50 T@U) ($generated@@51 T@T) ) (! (= ($generated@@39 $generated@@51 ($generated@@40 $generated@@51 $generated@@50)) $generated@@50)
 :pattern ( ($generated@@40 $generated@@51 $generated@@50))
)))
(assert  (=> (<= 0 $generated@@25) (forall (($generated@@52 Int) ) (!  (=> (or ($generated@@30 ($generated@@27 $generated@@52)) (< 0 $generated@@25)) (= ($generated@@29 ($generated@@27 $generated@@52))  (and (<= ($generated@@27 2) ($generated@@27 $generated@@52)) (forall (($generated@@53 Int) ) (!  (=> (and (<= ($generated@@27 2) $generated@@53) (< $generated@@53 $generated@@52)) (or (not (= ($generated@@31 $generated@@52 $generated@@53) 0)) (not true)))
 :pattern ( ($generated@@31 $generated@@52 $generated@@53))
)))))
 :weight 3
 :pattern ( ($generated@@29 ($generated@@27 $generated@@52)))
))))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@65 T@T) ($generated@@66 T@T) ($generated@@67 T@T) ($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@U) ) (! (= ($generated@@54 $generated@@65 $generated@@66 $generated@@67 ($generated@@61 $generated@@65 $generated@@66 $generated@@67 $generated@@69 $generated@@70 $generated@@71 $generated@@68) $generated@@70 $generated@@71) $generated@@68)
 :weight 0
)) (and (forall (($generated@@72 T@T) ($generated@@73 T@T) ($generated@@74 T@T) ($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ) (!  (or (= $generated@@77 $generated@@79) (= ($generated@@54 $generated@@72 $generated@@73 $generated@@74 ($generated@@61 $generated@@72 $generated@@73 $generated@@74 $generated@@76 $generated@@77 $generated@@78 $generated@@75) $generated@@79 $generated@@80) ($generated@@54 $generated@@72 $generated@@73 $generated@@74 $generated@@76 $generated@@79 $generated@@80)))
 :weight 0
)) (forall (($generated@@81 T@T) ($generated@@82 T@T) ($generated@@83 T@T) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ) (!  (or (= $generated@@87 $generated@@89) (= ($generated@@54 $generated@@81 $generated@@82 $generated@@83 ($generated@@61 $generated@@81 $generated@@82 $generated@@83 $generated@@85 $generated@@86 $generated@@87 $generated@@84) $generated@@88 $generated@@89) ($generated@@54 $generated@@81 $generated@@82 $generated@@83 $generated@@85 $generated@@88 $generated@@89)))
 :weight 0
)))) (= ($generated@@4 $generated@@55) 3)) (= ($generated@@4 $generated@@56) 4)) (forall (($generated@@90 T@T) ($generated@@91 T@T) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (! (= ($generated@@58 $generated@@90 $generated@@91 ($generated@@62 $generated@@90 $generated@@91 $generated@@93 $generated@@94 $generated@@92) $generated@@94) $generated@@92)
 :weight 0
))) (forall (($generated@@95 T@T) ($generated@@96 T@T) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ) (!  (or (= $generated@@99 $generated@@100) (= ($generated@@58 $generated@@95 $generated@@96 ($generated@@62 $generated@@95 $generated@@96 $generated@@98 $generated@@99 $generated@@97) $generated@@100) ($generated@@58 $generated@@95 $generated@@96 $generated@@98 $generated@@100)))
 :weight 0
))) (= ($generated@@4 $generated@@59) 5)) (forall (($generated@@101 T@T) ($generated@@102 T@T) ) (= ($generated@@4 ($generated@@60 $generated@@101 $generated@@102)) 6))) (forall (($generated@@103 T@T) ($generated@@104 T@T) ) (! (= ($generated@@63 ($generated@@60 $generated@@103 $generated@@104)) $generated@@103)
 :pattern ( ($generated@@60 $generated@@103 $generated@@104))
))) (forall (($generated@@105 T@T) ($generated@@106 T@T) ) (! (= ($generated@@64 ($generated@@60 $generated@@105 $generated@@106)) $generated@@106)
 :pattern ( ($generated@@60 $generated@@105 $generated@@106))
))))
(assert (forall (($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 Bool) ($generated@@111 T@U) ($generated@@112 T@U) ) (! (= ($generated@@9 ($generated@@54 $generated@@55 $generated@@56 $generated@@5 ($generated@@57 $generated@@107 $generated@@108 $generated@@109 $generated@@110) $generated@@111 $generated@@112))  (=> (and (or (not (= $generated@@111 $generated@@107)) (not true)) ($generated@@9 ($generated@@39 $generated@@5 ($generated@@58 $generated@@56 $generated@@59 ($generated@@58 $generated@@55 ($generated@@60 $generated@@56 $generated@@59) $generated@@108 $generated@@111) $generated@@109)))) $generated@@110))
 :pattern ( ($generated@@54 $generated@@55 $generated@@56 $generated@@5 ($generated@@57 $generated@@107 $generated@@108 $generated@@109 $generated@@110) $generated@@111 $generated@@112))
)))
(assert (forall (($generated@@113 Int) ($generated@@114 Int) ) (! (= ($generated@@31 $generated@@113 $generated@@114) (mod $generated@@113 $generated@@114))
 :pattern ( ($generated@@31 $generated@@113 $generated@@114))
)))
(assert (forall (($generated@@116 Int) ($generated@@117 Int) ) (! (= ($generated@@115 $generated@@116 $generated@@117) (* $generated@@116 $generated@@117))
 :pattern ( ($generated@@115 $generated@@116 $generated@@117))
)))
(assert (= ($generated@@20 $generated@@22) $generated@@2))
(assert (= ($generated@@118 $generated@@22) $generated@@3))
(assert  (=> (<= 1 $generated@@25) (forall (($generated@@119 Int) ) (!  (=> (or ($generated@@28 $generated@@119) (< 1 $generated@@25)) (and (=> (<= ($generated@@27 2) $generated@@119) (forall (($generated@@120 Int) ) (!  (=> (<= ($generated@@27 2) $generated@@120) (=> (< $generated@@120 $generated@@119) ($generated@@30 $generated@@120)))
 :pattern ( ($generated@@29 $generated@@120))
))) (= ($generated@@26 $generated@@119)  (and (<= ($generated@@27 2) $generated@@119) (forall (($generated@@121 Int) ) (!  (=> (and (and (<= ($generated@@27 2) $generated@@121) (< $generated@@121 $generated@@119)) ($generated@@29 $generated@@121)) (or (not (= ($generated@@31 $generated@@119 $generated@@121) 0)) (not true)))
 :pattern ( ($generated@@29 $generated@@121))
))))))
 :pattern ( ($generated@@26 $generated@@119))
))))
(assert (forall (($generated@@122 Int) ) (! (= ($generated@@40 $generated@@6 ($generated@@10 ($generated@@27 $generated@@122))) ($generated@@36 $generated@@59 ($generated@@40 $generated@@6 ($generated@@10 $generated@@122))))
 :pattern ( ($generated@@40 $generated@@6 ($generated@@10 ($generated@@27 $generated@@122))))
)))
(assert (forall (($generated@@123 T@U) ($generated@@124 T@T) ) (! (= ($generated@@40 $generated@@124 ($generated@@36 $generated@@124 $generated@@123)) ($generated@@36 $generated@@59 ($generated@@40 $generated@@124 $generated@@123)))
 :pattern ( ($generated@@40 $generated@@124 ($generated@@36 $generated@@124 $generated@@123)))
)))
(assert (forall (($generated@@125 T@U) ($generated@@126 T@U) ) (! ($generated@@21 $generated@@6 $generated@@126 $generated $generated@@125)
 :pattern ( ($generated@@21 $generated@@6 $generated@@126 $generated $generated@@125))
)))
(assert (forall (($generated@@127 T@U) ) (! ($generated@@43 $generated@@6 $generated@@127 $generated)
 :pattern ( ($generated@@43 $generated@@6 $generated@@127 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@128 () Int)
(declare-fun $generated@@129 () Int)
(declare-fun $generated@@130 () T@U)
(declare-fun $generated@@131 () Int)
(declare-fun $generated@@132 () Int)
(declare-fun $generated@@133 () Int)
(declare-fun $generated@@134 () Int)
(declare-fun $generated@@135 () Int)
(declare-fun $generated@@136 (T@U) Bool)
(declare-fun $generated@@137 () T@U)
(declare-fun $generated@@138 (T@U) Bool)
(declare-fun $generated@@139 () T@U)
(declare-fun $generated@@140 () T@U)
(declare-fun $generated@@141 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 64) (let (($generated@@142  (=> (and (and (=> (and (<= ($generated@@27 2) $generated@@128) (< $generated@@128 $generated@@129)) ($generated@@30 $generated@@128)) (= (ControlFlow 0 46) (- 0 45))) (= ($generated@@31 $generated@@129 $generated@@128) ($generated@@27 0))) (not (and (and (<= ($generated@@27 2) $generated@@128) (< $generated@@128 $generated@@129)) ($generated@@29 $generated@@128))))))
(let (($generated@@143  (=> (and (not (and (<= ($generated@@27 2) $generated@@128) (< $generated@@128 $generated@@129))) (= (ControlFlow 0 48) 46)) $generated@@142)))
(let (($generated@@144  (=> (and (and (and (<= ($generated@@27 2) $generated@@128) (< $generated@@128 $generated@@129)) ($generated@@21 $generated@@6 ($generated@@10 $generated@@128) $generated $generated@@130)) (and ($generated@@30 $generated@@128) (= (ControlFlow 0 47) 46))) $generated@@142)))
(let (($generated@@145  (=> (< $generated@@128 ($generated@@27 2)) (and (=> (= (ControlFlow 0 50) 47) $generated@@144) (=> (= (ControlFlow 0 50) 48) $generated@@143)))))
(let (($generated@@146  (=> (<= ($generated@@27 2) $generated@@128) (and (=> (= (ControlFlow 0 49) 47) $generated@@144) (=> (= (ControlFlow 0 49) 48) $generated@@143)))))
(let (($generated@@147  (=> (and (or (not (= $generated@@128 0)) (not true)) (= ($generated@@31 $generated@@129 $generated@@128) ($generated@@27 0))) (and (=> (= (ControlFlow 0 51) 49) $generated@@146) (=> (= (ControlFlow 0 51) 50) $generated@@145)))))
(let (($generated@@148  (and (=> (= (ControlFlow 0 32) (- 0 35)) (<= ($generated@@27 2) $generated@@128)) (and (=> (= (ControlFlow 0 32) (- 0 34)) (< $generated@@128 $generated@@131)) (and (=> (= (ControlFlow 0 32) (- 0 33)) (< $generated@@131 $generated@@129)) (=> (and (and (and (and (<= ($generated@@27 2) $generated@@128) (< $generated@@128 $generated@@131)) (< $generated@@131 $generated@@129)) (and ($generated@@21 $generated@@6 ($generated@@10 $generated@@128) $generated $generated@@130) ($generated@@30 $generated@@128))) (and (and ($generated@@30 $generated@@128) (= (ControlFlow 0 32) (- 0 31))) (not (and (and (<= ($generated@@27 2) $generated@@128) (< $generated@@128 $generated@@129)) ($generated@@29 $generated@@128))))) (not ($generated@@29 $generated@@128))))))))
(let (($generated@@149  (=> (and (not (and (<= ($generated@@27 2) $generated@@128) (< $generated@@128 $generated@@131))) (= (ControlFlow 0 37) 32)) $generated@@148)))
(let (($generated@@150  (=> (and (and (<= ($generated@@27 2) $generated@@128) (< $generated@@128 $generated@@131)) (= (ControlFlow 0 36) 32)) $generated@@148)))
(let (($generated@@151  (=> (< $generated@@128 ($generated@@27 2)) (and (=> (= (ControlFlow 0 39) 36) $generated@@150) (=> (= (ControlFlow 0 39) 37) $generated@@149)))))
(let (($generated@@152  (=> (<= ($generated@@27 2) $generated@@128) (and (=> (= (ControlFlow 0 38) 36) $generated@@150) (=> (= (ControlFlow 0 38) 37) $generated@@149)))))
(let (($generated@@153  (=> (and (=> (and (<= ($generated@@27 2) $generated@@128) (< $generated@@128 $generated@@129)) ($generated@@30 $generated@@128)) (not (and (and (<= ($generated@@27 2) $generated@@128) (< $generated@@128 $generated@@129)) ($generated@@29 $generated@@128)))) (and (=> (= (ControlFlow 0 40) 38) $generated@@152) (=> (= (ControlFlow 0 40) 39) $generated@@151)))))
(let (($generated@@154  (=> (and (not (and (<= ($generated@@27 2) $generated@@128) (< $generated@@128 $generated@@129))) (= (ControlFlow 0 42) 40)) $generated@@153)))
(let (($generated@@155  (=> (and (and (and (<= ($generated@@27 2) $generated@@128) (< $generated@@128 $generated@@129)) ($generated@@21 $generated@@6 ($generated@@10 $generated@@128) $generated $generated@@130)) (and ($generated@@30 $generated@@128) (= (ControlFlow 0 41) 40))) $generated@@153)))
(let (($generated@@156  (=> (< $generated@@128 ($generated@@27 2)) (and (=> (= (ControlFlow 0 44) 41) $generated@@155) (=> (= (ControlFlow 0 44) 42) $generated@@154)))))
(let (($generated@@157  (=> (<= ($generated@@27 2) $generated@@128) (and (=> (= (ControlFlow 0 43) 41) $generated@@155) (=> (= (ControlFlow 0 43) 42) $generated@@154)))))
(let (($generated@@158  (=> ($generated@@21 $generated@@6 ($generated@@10 $generated@@128) $generated $generated@@130) (=> (and ($generated@@30 $generated@@128) ($generated@@30 $generated@@128)) (=> (and (and (not ($generated@@29 $generated@@128)) (= (ControlFlow 0 29) (- 0 28))) (not ($generated@@29 $generated@@128))) ($generated@@9 ($generated@@36 $generated@@5 ($generated@@8 false))))))))
(let (($generated@@159  (=> (= ($generated@@115 ($generated@@115 $generated@@128 $generated@@132) $generated@@133) $generated@@129) (and (=> (= (ControlFlow 0 20) (- 0 27)) ($generated@@43 $generated@@6 ($generated@@10 $generated@@128) $generated@@22)) (=> ($generated@@43 $generated@@6 ($generated@@10 $generated@@128) $generated@@22) (and (=> (= (ControlFlow 0 20) (- 0 26)) ($generated@@43 $generated@@6 ($generated@@10 ($generated@@115 $generated@@132 $generated@@133)) $generated@@22)) (=> ($generated@@43 $generated@@6 ($generated@@10 ($generated@@115 $generated@@132 $generated@@133)) $generated@@22) (=> (= $generated@@134 ($generated@@115 $generated@@132 $generated@@133)) (and (=> (= (ControlFlow 0 20) (- 0 25)) ($generated@@43 $generated@@6 ($generated@@10 $generated@@129) $generated@@22)) (=> ($generated@@43 $generated@@6 ($generated@@10 $generated@@129) $generated@@22) (and (=> (= (ControlFlow 0 20) (- 0 24)) ($generated@@43 $generated@@6 ($generated@@10 ($generated@@27 0)) $generated@@22)) (=> ($generated@@43 $generated@@6 ($generated@@10 ($generated@@27 0)) $generated@@22) (=> (= $generated@@135 ($generated@@27 0)) (and (=> (= (ControlFlow 0 20) (- 0 23)) (= ($generated@@115 $generated@@128 $generated@@134) $generated@@129)) (=> (= ($generated@@115 $generated@@128 $generated@@134) $generated@@129) (and (=> (= (ControlFlow 0 20) (- 0 22)) (< $generated@@135 $generated@@128)) (=> (< $generated@@135 $generated@@128) (=> (and (and ($generated@@136 $generated@@137) ($generated@@138 $generated@@137)) (and (= ($generated@@31 (+ $generated@@129 $generated@@135) $generated@@128) $generated@@135) (= $generated@@130 $generated@@137))) (and (=> (= (ControlFlow 0 20) (- 0 21)) (or (not (= $generated@@128 0)) (not true))) (=> (= (ControlFlow 0 20) (- 0 19)) (=> (= ($generated@@115 ($generated@@115 $generated@@128 $generated@@132) $generated@@133) $generated@@129) (= ($generated@@31 $generated@@129 $generated@@128) ($generated@@27 0)))))))))))))))))))))))
(let (($generated@@160  (=> (and (and (= ($generated@@115 $generated@@131 $generated@@133) $generated@@129) (= (ControlFlow 0 18) (- 0 17))) (= ($generated@@115 $generated@@131 $generated@@133) $generated@@129)) (= ($generated@@115 ($generated@@115 $generated@@128 $generated@@132) $generated@@133) $generated@@129))))
(let (($generated@@161  (=> (or (not (= $generated@@131 0)) (not true)) (=> (and (and (= $generated@@133 ($generated@@47 $generated@@129 $generated@@131)) (= (ControlFlow 0 16) (- 0 15))) (= $generated@@133 ($generated@@47 $generated@@129 $generated@@131))) (= ($generated@@115 $generated@@131 $generated@@133) $generated@@129)))))
(let (($generated@@162  (and (=> (= (ControlFlow 0 13) (- 0 14)) (or (not (= $generated@@131 0)) (not true))) (=> (= (ControlFlow 0 13) (- 0 12)) (=> ($generated@@9 ($generated@@36 $generated@@5 ($generated@@8 true))) (= $generated@@133 ($generated@@47 $generated@@129 $generated@@131)))))))
(let (($generated@@163 true))
(let (($generated@@164  (=> (= (ControlFlow 0 8) (- 0 7)) (or (not (= ($generated@@31 $generated@@129 $generated@@131) 0)) (not true)))))
(let (($generated@@165  (=> (and ($generated@@9 ($generated@@36 $generated@@5 ($generated@@8  (=> true false)))) (= (ControlFlow 0 30) 8)) $generated@@164)))
(let (($generated@@166  (=> (= ($generated@@31 $generated@@129 $generated@@131) ($generated@@27 0)) (and (=> (= (ControlFlow 0 52) (- 0 53)) (or (not (= $generated@@131 0)) (not true))) (=> (or (not (= $generated@@131 0)) (not true)) (=> (= $generated@@133 ($generated@@47 $generated@@129 $generated@@131)) (and (and (and (and (and (and (and (and (and (=> (= (ControlFlow 0 52) 11) $generated@@163) (=> (= (ControlFlow 0 52) 13) $generated@@162)) (=> (= (ControlFlow 0 52) 16) $generated@@161)) (=> (= (ControlFlow 0 52) 18) $generated@@160)) (=> (= (ControlFlow 0 52) 20) $generated@@159)) (=> (= (ControlFlow 0 52) 51) $generated@@147)) (=> (= (ControlFlow 0 52) 29) $generated@@158)) (=> (= (ControlFlow 0 52) 30) $generated@@165)) (=> (= (ControlFlow 0 52) 43) $generated@@157)) (=> (= (ControlFlow 0 52) 44) $generated@@156))))))))
(let (($generated@@167  (=> (and (or (not (= ($generated@@31 $generated@@129 $generated@@131) ($generated@@27 0))) (not true)) (= (ControlFlow 0 10) 8)) $generated@@164)))
(let (($generated@@168  (=> (not ($generated@@29 $generated@@131)) (and (=> (= (ControlFlow 0 54) (- 0 57)) (<= ($generated@@27 2) $generated@@131)) (=> (<= ($generated@@27 2) $generated@@131) (and (=> (= (ControlFlow 0 54) (- 0 56)) (not ($generated@@29 $generated@@131))) (=> (not ($generated@@29 $generated@@131)) (=> (and (and ($generated@@136 $generated@@130) ($generated@@138 $generated@@130)) (<= ($generated@@27 2) $generated@@128)) (=> (and (and (and (< $generated@@128 $generated@@131) (<= ($generated@@27 2) $generated@@132)) (and (= ($generated@@115 $generated@@128 $generated@@132) $generated@@131) ($generated@@30 $generated@@128))) (and (and ($generated@@30 $generated@@128) (and ($generated@@29 $generated@@128) (and (<= ($generated@@27 2) $generated@@128) (forall (($generated@@169 Int) ) (!  (=> (and (<= ($generated@@27 2) $generated@@169) (< $generated@@169 $generated@@128)) (or (not (= ($generated@@31 $generated@@128 $generated@@169) 0)) (not true)))
 :pattern ( ($generated@@31 $generated@@128 $generated@@169))
))))) (= $generated@@139 $generated@@130))) (and (=> (= (ControlFlow 0 54) (- 0 55)) (or (not (= $generated@@131 0)) (not true))) (=> (or (not (= $generated@@131 0)) (not true)) (and (=> (= (ControlFlow 0 54) 52) $generated@@166) (=> (= (ControlFlow 0 54) 10) $generated@@167)))))))))))))
(let (($generated@@170  (=> (and ($generated@@29 $generated@@131) (= (ControlFlow 0 9) 8)) $generated@@164)))
(let (($generated@@171  (=> ($generated@@21 $generated@@6 ($generated@@10 $generated@@131) $generated $generated@@139) (=> (and ($generated@@30 $generated@@131) ($generated@@30 $generated@@131)) (and (=> (= (ControlFlow 0 58) 54) $generated@@168) (=> (= (ControlFlow 0 58) 9) $generated@@170))))))
(let (($generated@@172  (=> (= (ControlFlow 0 6) (- 0 5)) (or (not (= $generated@@131 0)) (not true)))))
(let (($generated@@173  (=> (and (<= ($generated@@27 2) $generated@@131) (< $generated@@131 $generated@@129)) (and (=> (= (ControlFlow 0 59) 6) $generated@@172) (=> (= (ControlFlow 0 59) 58) $generated@@171)))))
(let (($generated@@174  (=> (and (< $generated@@131 ($generated@@27 2)) (= (ControlFlow 0 61) 59)) $generated@@173)))
(let (($generated@@175  (=> (and (<= ($generated@@27 2) $generated@@131) (= (ControlFlow 0 60) 59)) $generated@@173)))
(let (($generated@@176  (and (=> (= (ControlFlow 0 62) 60) $generated@@175) (=> (= (ControlFlow 0 62) 61) $generated@@174))))
(let (($generated@@177  (and (=> (= (ControlFlow 0 2) (- 0 3)) (=> ($generated@@30 $generated@@129) (or ($generated@@29 $generated@@129) (<= ($generated@@27 2) $generated@@129)))) (=> (=> ($generated@@30 $generated@@129) (or ($generated@@29 $generated@@129) (<= ($generated@@27 2) $generated@@129))) (=> (= (ControlFlow 0 2) (- 0 1)) (=> ($generated@@30 $generated@@129) (or ($generated@@29 $generated@@129) (forall (($generated@@178 Int) ) (!  (=> (and (<= ($generated@@27 2) $generated@@178) (< $generated@@178 $generated@@129)) (or (not (= ($generated@@31 $generated@@129 $generated@@178) 0)) (not true)))
 :pattern ( ($generated@@31 $generated@@129 $generated@@178))
)))))))))
(let (($generated@@179  (=> (and (forall (($generated@@180 Int) ) (!  (=> (and (<= ($generated@@27 2) $generated@@180) (< $generated@@180 $generated@@129)) (or (not (= ($generated@@31 $generated@@129 $generated@@180) 0)) (not true)))
 :pattern ( ($generated@@31 $generated@@129 $generated@@180))
)) (= (ControlFlow 0 4) 2)) $generated@@177)))
(let (($generated@@181  (=> (= $generated@@140 ($generated@@57 $generated@@141 $generated@@139 $generated@@1 false)) (and (=> (= (ControlFlow 0 63) 62) $generated@@176) (=> (= (ControlFlow 0 63) 4) $generated@@179)))))
(let (($generated@@182  (=> (and (and (and ($generated@@136 $generated@@139) ($generated@@138 $generated@@139)) (= 2 $generated@@25)) (and (and ($generated@@28 $generated@@129) (and ($generated@@26 $generated@@129) (and (<= ($generated@@27 2) $generated@@129) (forall (($generated@@183 Int) ) (!  (=> (and (and (<= ($generated@@27 2) $generated@@183) (< $generated@@183 $generated@@129)) ($generated@@29 $generated@@183)) (or (not (= ($generated@@31 $generated@@129 $generated@@183) 0)) (not true)))
 :pattern ( ($generated@@29 $generated@@183))
))))) (= (ControlFlow 0 64) 63))) $generated@@181)))
$generated@@182)))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
