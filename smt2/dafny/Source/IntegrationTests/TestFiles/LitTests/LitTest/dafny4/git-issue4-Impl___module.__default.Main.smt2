(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 (T@T) Int)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Bool) T@U)
(declare-fun $generated@@9 (T@U) Bool)
(declare-fun $generated@@10 (Int) T@U)
(declare-fun $generated@@11 (T@U) Int)
(declare-fun $generated@@12 (Real) T@U)
(declare-fun $generated@@13 (T@U) Real)
(declare-fun $generated@@20 (T@U) T@U)
(declare-fun $generated@@21 (T@U T@U) Bool)
(declare-fun $generated@@22 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@23 () T@T)
(declare-fun $generated@@24 () T@T)
(declare-fun $generated@@25 () T@T)
(declare-fun $generated@@26 (T@T T@T) T@T)
(declare-fun $generated@@27 (T@T T@U) T@U)
(declare-fun $generated@@28 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@29 (T@T) T@T)
(declare-fun $generated@@30 (T@T) T@T)
(declare-fun $generated@@51 (Int) Int)
(declare-fun $generated@@53 (T@T T@U) T@U)
(declare-fun $generated@@56 (T@T T@U) T@U)
(declare-fun $generated@@59 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@70 (Int) T@U)
(declare-fun $generated@@71 (T@U) Int)
(declare-fun $generated@@73 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@74 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@75 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@113 () T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@4 $generated@@5) 0) (= ($generated@@4 $generated@@6) 1)) (= ($generated@@4 $generated@@7) 2)) (forall (($generated@@14 Bool) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Int) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Real) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3)
)
(assert (= ($generated@@20 $generated) $generated@@1))
(assert (= ($generated@@20 $generated@@0) $generated@@2))
(assert  (and (and (and (and (and (and (and (forall (($generated@@31 T@T) ($generated@@32 T@T) ($generated@@33 T@U) ($generated@@34 T@U) ($generated@@35 T@U) ) (! (= ($generated@@22 $generated@@31 $generated@@32 ($generated@@28 $generated@@31 $generated@@32 $generated@@34 $generated@@35 $generated@@33) $generated@@35) $generated@@33)
 :weight 0
)) (forall (($generated@@36 T@T) ($generated@@37 T@T) ($generated@@38 T@U) ($generated@@39 T@U) ($generated@@40 T@U) ($generated@@41 T@U) ) (!  (or (= $generated@@40 $generated@@41) (= ($generated@@22 $generated@@36 $generated@@37 ($generated@@28 $generated@@36 $generated@@37 $generated@@39 $generated@@40 $generated@@38) $generated@@41) ($generated@@22 $generated@@36 $generated@@37 $generated@@39 $generated@@41)))
 :weight 0
))) (= ($generated@@4 $generated@@23) 3)) (= ($generated@@4 $generated@@24) 4)) (= ($generated@@4 $generated@@25) 5)) (forall (($generated@@42 T@T) ($generated@@43 T@T) ) (= ($generated@@4 ($generated@@26 $generated@@42 $generated@@43)) 6))) (forall (($generated@@44 T@T) ($generated@@45 T@T) ) (! (= ($generated@@29 ($generated@@26 $generated@@44 $generated@@45)) $generated@@44)
 :pattern ( ($generated@@26 $generated@@44 $generated@@45))
))) (forall (($generated@@46 T@T) ($generated@@47 T@T) ) (! (= ($generated@@30 ($generated@@26 $generated@@46 $generated@@47)) $generated@@47)
 :pattern ( ($generated@@26 $generated@@46 $generated@@47))
))))
(assert (forall (($generated@@48 T@U) ($generated@@49 T@U) ) (!  (=> ($generated@@21 $generated@@48 $generated@@49) (forall (($generated@@50 T@U) ) (!  (=> ($generated@@9 ($generated@@27 $generated@@5 ($generated@@22 $generated@@23 $generated@@24 ($generated@@22 $generated@@25 ($generated@@26 $generated@@23 $generated@@24) $generated@@48 $generated@@50) $generated@@3))) ($generated@@9 ($generated@@27 $generated@@5 ($generated@@22 $generated@@23 $generated@@24 ($generated@@22 $generated@@25 ($generated@@26 $generated@@23 $generated@@24) $generated@@49 $generated@@50) $generated@@3))))
 :pattern ( ($generated@@22 $generated@@23 $generated@@24 ($generated@@22 $generated@@25 ($generated@@26 $generated@@23 $generated@@24) $generated@@49 $generated@@50) $generated@@3))
)))
 :pattern ( ($generated@@21 $generated@@48 $generated@@49))
)))
(assert (forall (($generated@@52 Int) ) (! (= ($generated@@51 $generated@@52) $generated@@52)
 :pattern ( ($generated@@51 $generated@@52))
)))
(assert (forall (($generated@@54 T@U) ($generated@@55 T@T) ) (! (= ($generated@@53 $generated@@55 $generated@@54) $generated@@54)
 :pattern ( ($generated@@53 $generated@@55 $generated@@54))
)))
(assert (forall (($generated@@57 T@U) ($generated@@58 T@T) ) (! (= ($generated@@56 $generated@@58 ($generated@@27 $generated@@58 $generated@@57)) $generated@@57)
 :pattern ( ($generated@@27 $generated@@58 $generated@@57))
)))
(assert (forall (($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@U) ($generated@@64 T@T) ) (!  (=> ($generated@@21 $generated@@60 $generated@@61) (=> ($generated@@59 $generated@@64 $generated@@62 $generated@@63 $generated@@60) ($generated@@59 $generated@@64 $generated@@62 $generated@@63 $generated@@61)))
 :pattern ( ($generated@@21 $generated@@60 $generated@@61) ($generated@@59 $generated@@64 $generated@@62 $generated@@63 $generated@@60))
)))
(assert (forall (($generated@@65 T@U) ($generated@@66 T@U) ($generated@@67 T@U) ) (!  (=> (or (not (= $generated@@65 $generated@@67)) (not true)) (=> (and ($generated@@21 $generated@@65 $generated@@66) ($generated@@21 $generated@@66 $generated@@67)) ($generated@@21 $generated@@65 $generated@@67)))
 :pattern ( ($generated@@21 $generated@@65 $generated@@66) ($generated@@21 $generated@@66 $generated@@67))
)))
(assert (forall (($generated@@68 T@U) ($generated@@69 T@T) ) (! (= ($generated@@27 $generated@@69 ($generated@@56 $generated@@69 $generated@@68)) $generated@@68)
 :pattern ( ($generated@@56 $generated@@69 $generated@@68))
)))
(assert (forall (($generated@@72 Int) ) (!  (=> (or (and (<= 0 $generated@@72) (< $generated@@72 55296)) (and (<= 57344 $generated@@72) (< $generated@@72 1114112))) (= ($generated@@71 ($generated@@70 $generated@@72)) $generated@@72))
 :pattern ( ($generated@@70 $generated@@72))
)))
(assert  (and (forall (($generated@@76 T@T) ($generated@@77 T@T) ($generated@@78 T@T) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (! (= ($generated@@73 $generated@@76 $generated@@77 $generated@@78 ($generated@@75 $generated@@76 $generated@@77 $generated@@78 $generated@@80 $generated@@81 $generated@@82 $generated@@79) $generated@@81 $generated@@82) $generated@@79)
 :weight 0
)) (and (forall (($generated@@83 T@T) ($generated@@84 T@T) ($generated@@85 T@T) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ) (!  (or (= $generated@@88 $generated@@90) (= ($generated@@73 $generated@@83 $generated@@84 $generated@@85 ($generated@@75 $generated@@83 $generated@@84 $generated@@85 $generated@@87 $generated@@88 $generated@@89 $generated@@86) $generated@@90 $generated@@91) ($generated@@73 $generated@@83 $generated@@84 $generated@@85 $generated@@87 $generated@@90 $generated@@91)))
 :weight 0
)) (forall (($generated@@92 T@T) ($generated@@93 T@T) ($generated@@94 T@T) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ) (!  (or (= $generated@@98 $generated@@100) (= ($generated@@73 $generated@@92 $generated@@93 $generated@@94 ($generated@@75 $generated@@92 $generated@@93 $generated@@94 $generated@@96 $generated@@97 $generated@@98 $generated@@95) $generated@@99 $generated@@100) ($generated@@73 $generated@@92 $generated@@93 $generated@@94 $generated@@96 $generated@@99 $generated@@100)))
 :weight 0
)))))
(assert (forall (($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 Bool) ($generated@@105 T@U) ($generated@@106 T@U) ) (! (= ($generated@@9 ($generated@@73 $generated@@25 $generated@@23 $generated@@5 ($generated@@74 $generated@@101 $generated@@102 $generated@@103 $generated@@104) $generated@@105 $generated@@106))  (=> (and (or (not (= $generated@@105 $generated@@101)) (not true)) ($generated@@9 ($generated@@27 $generated@@5 ($generated@@22 $generated@@23 $generated@@24 ($generated@@22 $generated@@25 ($generated@@26 $generated@@23 $generated@@24) $generated@@102 $generated@@105) $generated@@103)))) $generated@@104))
 :pattern ( ($generated@@73 $generated@@25 $generated@@23 $generated@@5 ($generated@@74 $generated@@101 $generated@@102 $generated@@103 $generated@@104) $generated@@105 $generated@@106))
)))
(assert (forall (($generated@@107 T@U) ) (!  (and (= ($generated@@70 ($generated@@71 $generated@@107)) $generated@@107) (or (and (<= 0 ($generated@@71 $generated@@107)) (< ($generated@@71 $generated@@107) 55296)) (and (<= 57344 ($generated@@71 $generated@@107)) (< ($generated@@71 $generated@@107) 1114112))))
 :pattern ( ($generated@@71 $generated@@107))
)))
(assert (forall (($generated@@108 Int) ) (! (= ($generated@@56 $generated@@6 ($generated@@10 ($generated@@51 $generated@@108))) ($generated@@53 $generated@@24 ($generated@@56 $generated@@6 ($generated@@10 $generated@@108))))
 :pattern ( ($generated@@56 $generated@@6 ($generated@@10 ($generated@@51 $generated@@108))))
)))
(assert (forall (($generated@@109 T@U) ($generated@@110 T@T) ) (! (= ($generated@@56 $generated@@110 ($generated@@53 $generated@@110 $generated@@109)) ($generated@@53 $generated@@24 ($generated@@56 $generated@@110 $generated@@109)))
 :pattern ( ($generated@@56 $generated@@110 ($generated@@53 $generated@@110 $generated@@109)))
)))
(assert (forall (($generated@@111 T@U) ($generated@@112 T@U) ) (! ($generated@@59 $generated@@6 $generated@@112 $generated@@0 $generated@@111)
 :pattern ( ($generated@@59 $generated@@6 $generated@@112 $generated@@0 $generated@@111))
)))
(assert (= ($generated@@4 $generated@@113) 7))
(assert (forall (($generated@@114 T@U) ($generated@@115 T@U) ) (! ($generated@@59 $generated@@113 $generated@@115 $generated $generated@@114)
 :pattern ( ($generated@@59 $generated@@113 $generated@@115 $generated $generated@@114))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@116 () T@U)
(declare-fun $generated@@117 () T@U)
(declare-fun $generated@@118 () T@U)
(declare-fun $generated@@119 () Int)
(declare-fun $generated@@120 (T@U) Bool)
(declare-fun $generated@@121 (T@U) Bool)
(declare-fun $generated@@122 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 4) (let (($generated@@123  (=> (= $generated@@116 ($generated@@74 $generated@@117 $generated@@118 $generated@@3 false)) (=> (and (= $generated@@119 ($generated@@51 8)) ($generated@@59 $generated@@6 ($generated@@10 $generated@@119) $generated@@0 $generated@@118)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (<= ($generated@@51 0) $generated@@119)) (=> (= (ControlFlow 0 2) (- 0 1)) (< $generated@@119 10)))))))
(let (($generated@@124  (=> (and (and ($generated@@120 $generated@@118) ($generated@@121 $generated@@118)) (and (= 2 $generated@@122) (= (ControlFlow 0 4) 2))) $generated@@123)))
$generated@@124)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
