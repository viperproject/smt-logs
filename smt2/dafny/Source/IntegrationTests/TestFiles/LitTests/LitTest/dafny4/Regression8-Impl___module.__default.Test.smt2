(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 (T@U) T@U)
(declare-fun $generated@@22 (T@U) Bool)
(declare-fun $generated@@23 (T@T T@U T@U) Bool)
(declare-fun $generated@@24 () T@T)
(declare-fun $generated@@25 (T@U T@U) T@U)
(declare-fun $generated@@29 (T@U T@U) T@U)
(declare-fun $generated@@30 (T@U T@U) Bool)
(declare-fun $generated@@35 (Int) Int)
(declare-fun $generated@@37 (T@T T@U) T@U)
(declare-fun $generated@@40 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@41 (T@U) Bool)
(declare-fun $generated@@42 (T@U T@U T@U) Bool)
(declare-fun $generated@@48 (T@U) T@U)
(declare-fun $generated@@50 (T@T T@U) T@U)
(declare-fun $generated@@51 (T@T T@U) T@U)
(declare-fun $generated@@61 () Int)
(declare-fun $generated@@62 (Int Int) T@U)
(declare-fun $generated@@63 (Int Int) Bool)
(declare-fun $generated@@72 (T@U) T@U)
(declare-fun $generated@@75 (T@U) T@U)
(declare-fun $generated@@78 (T@U) T@U)
(declare-fun $generated@@81 (T@U) T@U)
(declare-fun $generated@@86 (T@U) Int)
(declare-fun $generated@@87 (T@U) Int)
(declare-fun $generated@@95 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@96 () T@T)
(declare-fun $generated@@97 () T@T)
(declare-fun $generated@@98 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@99 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@100 () T@T)
(declare-fun $generated@@101 (T@T T@T) T@T)
(declare-fun $generated@@102 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@103 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@104 (T@T) T@T)
(declare-fun $generated@@105 (T@T) T@T)
(declare-fun $generated@@154 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert (= ($generated@@21 $generated) $generated@@0))
(assert (= ($generated@@5 $generated@@24) 3))
(assert (forall (($generated@@26 T@U) ($generated@@27 T@U) ($generated@@28 T@U) ) (!  (=> ($generated@@23 $generated@@24 $generated@@28 ($generated@@25 $generated@@26 $generated@@27)) ($generated@@22 $generated@@28))
 :pattern ( ($generated@@22 $generated@@28) ($generated@@23 $generated@@24 $generated@@28 ($generated@@25 $generated@@26 $generated@@27)))
)))
(assert (forall (($generated@@31 T@U) ($generated@@32 T@U) ($generated@@33 T@U) ($generated@@34 T@U) ) (! (= ($generated@@23 $generated@@24 ($generated@@29 $generated@@33 $generated@@34) ($generated@@25 $generated@@31 $generated@@32))  (and ($generated@@30 $generated@@33 $generated@@31) ($generated@@30 $generated@@34 $generated@@32)))
 :pattern ( ($generated@@23 $generated@@24 ($generated@@29 $generated@@33 $generated@@34) ($generated@@25 $generated@@31 $generated@@32)))
)))
(assert (forall (($generated@@36 Int) ) (! (= ($generated@@35 $generated@@36) $generated@@36)
 :pattern ( ($generated@@35 $generated@@36))
)))
(assert (forall (($generated@@38 T@U) ($generated@@39 T@T) ) (! (= ($generated@@37 $generated@@39 $generated@@38) $generated@@38)
 :pattern ( ($generated@@37 $generated@@39 $generated@@38))
)))
(assert (forall (($generated@@43 T@U) ($generated@@44 T@U) ($generated@@45 T@U) ($generated@@46 T@U) ($generated@@47 T@U) ) (!  (=> ($generated@@41 $generated@@47) (= ($generated@@40 $generated@@24 ($generated@@29 $generated@@45 $generated@@46) ($generated@@25 $generated@@43 $generated@@44) $generated@@47)  (and ($generated@@42 $generated@@45 $generated@@43 $generated@@47) ($generated@@42 $generated@@46 $generated@@44 $generated@@47))))
 :pattern ( ($generated@@40 $generated@@24 ($generated@@29 $generated@@45 $generated@@46) ($generated@@25 $generated@@43 $generated@@44) $generated@@47))
)))
(assert (forall (($generated@@49 T@U) ) (! (= ($generated@@22 $generated@@49) (= ($generated@@48 $generated@@49) $generated@@2))
 :pattern ( ($generated@@22 $generated@@49))
)))
(assert (forall (($generated@@52 T@U) ($generated@@53 T@T) ) (! (= ($generated@@51 $generated@@53 ($generated@@50 $generated@@53 $generated@@52)) $generated@@52)
 :pattern ( ($generated@@50 $generated@@53 $generated@@52))
)))
(assert (forall (($generated@@54 T@U) ) (!  (=> ($generated@@22 $generated@@54) (exists (($generated@@55 T@U) ($generated@@56 T@U) ) (= $generated@@54 ($generated@@29 $generated@@55 $generated@@56))))
 :pattern ( ($generated@@22 $generated@@54))
)))
(assert (forall (($generated@@57 T@U) ($generated@@58 T@U) ($generated@@59 T@U) ($generated@@60 T@T) ) (! (= ($generated@@42 ($generated@@51 $generated@@60 $generated@@57) $generated@@58 $generated@@59) ($generated@@40 $generated@@60 $generated@@57 $generated@@58 $generated@@59))
 :pattern ( ($generated@@42 ($generated@@51 $generated@@60 $generated@@57) $generated@@58 $generated@@59))
)))
(assert  (=> (<= 0 $generated@@61) (forall (($generated@@64 Int) ($generated@@65 Int) ) (!  (=> (or ($generated@@63 $generated@@64 $generated@@65) (and (< 0 $generated@@61) (< $generated@@64 100))) ($generated@@23 $generated@@24 ($generated@@62 $generated@@64 $generated@@65) ($generated@@25 $generated $generated)))
 :pattern ( ($generated@@62 $generated@@64 $generated@@65))
))))
(assert (forall (($generated@@66 T@U) ) (!  (=> ($generated@@30 $generated@@66 $generated) (and (= ($generated@@51 $generated@@7 ($generated@@50 $generated@@7 $generated@@66)) $generated@@66) ($generated@@23 $generated@@7 ($generated@@50 $generated@@7 $generated@@66) $generated)))
 :pattern ( ($generated@@30 $generated@@66 $generated))
)))
(assert (forall (($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@T) ) (! (= ($generated@@30 ($generated@@51 $generated@@69 $generated@@67) $generated@@68) ($generated@@23 $generated@@69 $generated@@67 $generated@@68))
 :pattern ( ($generated@@30 ($generated@@51 $generated@@69 $generated@@67) $generated@@68))
)))
(assert (forall (($generated@@70 T@U) ($generated@@71 T@U) ) (! (= ($generated@@48 ($generated@@29 $generated@@70 $generated@@71)) $generated@@2)
 :pattern ( ($generated@@29 $generated@@70 $generated@@71))
)))
(assert (forall (($generated@@73 T@U) ($generated@@74 T@U) ) (! (= ($generated@@72 ($generated@@25 $generated@@73 $generated@@74)) $generated@@73)
 :pattern ( ($generated@@25 $generated@@73 $generated@@74))
)))
(assert (forall (($generated@@76 T@U) ($generated@@77 T@U) ) (! (= ($generated@@75 ($generated@@25 $generated@@76 $generated@@77)) $generated@@77)
 :pattern ( ($generated@@25 $generated@@76 $generated@@77))
)))
(assert (forall (($generated@@79 T@U) ($generated@@80 T@U) ) (! (= ($generated@@78 ($generated@@29 $generated@@79 $generated@@80)) $generated@@79)
 :pattern ( ($generated@@29 $generated@@79 $generated@@80))
)))
(assert (forall (($generated@@82 T@U) ($generated@@83 T@U) ) (! (= ($generated@@81 ($generated@@29 $generated@@82 $generated@@83)) $generated@@83)
 :pattern ( ($generated@@29 $generated@@82 $generated@@83))
)))
(assert (forall (($generated@@84 T@U) ($generated@@85 T@T) ) (! (= ($generated@@50 $generated@@85 ($generated@@51 $generated@@85 $generated@@84)) $generated@@84)
 :pattern ( ($generated@@51 $generated@@85 $generated@@84))
)))
(assert (forall (($generated@@88 T@U) ($generated@@89 T@U) ) (! (< ($generated@@86 $generated@@88) ($generated@@87 ($generated@@29 $generated@@88 $generated@@89)))
 :pattern ( ($generated@@29 $generated@@88 $generated@@89))
)))
(assert (forall (($generated@@90 T@U) ($generated@@91 T@U) ) (! (< ($generated@@86 $generated@@91) ($generated@@87 ($generated@@29 $generated@@90 $generated@@91)))
 :pattern ( ($generated@@29 $generated@@90 $generated@@91))
)))
(assert (forall (($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (!  (=> ($generated@@30 $generated@@94 ($generated@@25 $generated@@92 $generated@@93)) (and (= ($generated@@51 $generated@@24 ($generated@@50 $generated@@24 $generated@@94)) $generated@@94) ($generated@@23 $generated@@24 ($generated@@50 $generated@@24 $generated@@94) ($generated@@25 $generated@@92 $generated@@93))))
 :pattern ( ($generated@@30 $generated@@94 ($generated@@25 $generated@@92 $generated@@93)))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@106 T@T) ($generated@@107 T@T) ($generated@@108 T@T) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ) (! (= ($generated@@95 $generated@@106 $generated@@107 $generated@@108 ($generated@@102 $generated@@106 $generated@@107 $generated@@108 $generated@@110 $generated@@111 $generated@@112 $generated@@109) $generated@@111 $generated@@112) $generated@@109)
 :weight 0
)) (and (forall (($generated@@113 T@T) ($generated@@114 T@T) ($generated@@115 T@T) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ) (!  (or (= $generated@@118 $generated@@120) (= ($generated@@95 $generated@@113 $generated@@114 $generated@@115 ($generated@@102 $generated@@113 $generated@@114 $generated@@115 $generated@@117 $generated@@118 $generated@@119 $generated@@116) $generated@@120 $generated@@121) ($generated@@95 $generated@@113 $generated@@114 $generated@@115 $generated@@117 $generated@@120 $generated@@121)))
 :weight 0
)) (forall (($generated@@122 T@T) ($generated@@123 T@T) ($generated@@124 T@T) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ) (!  (or (= $generated@@128 $generated@@130) (= ($generated@@95 $generated@@122 $generated@@123 $generated@@124 ($generated@@102 $generated@@122 $generated@@123 $generated@@124 $generated@@126 $generated@@127 $generated@@128 $generated@@125) $generated@@129 $generated@@130) ($generated@@95 $generated@@122 $generated@@123 $generated@@124 $generated@@126 $generated@@129 $generated@@130)))
 :weight 0
)))) (= ($generated@@5 $generated@@96) 4)) (= ($generated@@5 $generated@@97) 5)) (forall (($generated@@131 T@T) ($generated@@132 T@T) ($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ) (! (= ($generated@@99 $generated@@131 $generated@@132 ($generated@@103 $generated@@131 $generated@@132 $generated@@134 $generated@@135 $generated@@133) $generated@@135) $generated@@133)
 :weight 0
))) (forall (($generated@@136 T@T) ($generated@@137 T@T) ($generated@@138 T@U) ($generated@@139 T@U) ($generated@@140 T@U) ($generated@@141 T@U) ) (!  (or (= $generated@@140 $generated@@141) (= ($generated@@99 $generated@@136 $generated@@137 ($generated@@103 $generated@@136 $generated@@137 $generated@@139 $generated@@140 $generated@@138) $generated@@141) ($generated@@99 $generated@@136 $generated@@137 $generated@@139 $generated@@141)))
 :weight 0
))) (= ($generated@@5 $generated@@100) 6)) (forall (($generated@@142 T@T) ($generated@@143 T@T) ) (= ($generated@@5 ($generated@@101 $generated@@142 $generated@@143)) 7))) (forall (($generated@@144 T@T) ($generated@@145 T@T) ) (! (= ($generated@@104 ($generated@@101 $generated@@144 $generated@@145)) $generated@@144)
 :pattern ( ($generated@@101 $generated@@144 $generated@@145))
))) (forall (($generated@@146 T@T) ($generated@@147 T@T) ) (! (= ($generated@@105 ($generated@@101 $generated@@146 $generated@@147)) $generated@@147)
 :pattern ( ($generated@@101 $generated@@146 $generated@@147))
))))
(assert (forall (($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 T@U) ($generated@@151 Bool) ($generated@@152 T@U) ($generated@@153 T@U) ) (! (= ($generated@@10 ($generated@@95 $generated@@96 $generated@@97 $generated@@6 ($generated@@98 $generated@@148 $generated@@149 $generated@@150 $generated@@151) $generated@@152 $generated@@153))  (=> (and (or (not (= $generated@@152 $generated@@148)) (not true)) ($generated@@10 ($generated@@50 $generated@@6 ($generated@@99 $generated@@97 $generated@@100 ($generated@@99 $generated@@96 ($generated@@101 $generated@@97 $generated@@100) $generated@@149 $generated@@152) $generated@@150)))) $generated@@151))
 :pattern ( ($generated@@95 $generated@@96 $generated@@97 $generated@@6 ($generated@@98 $generated@@148 $generated@@149 $generated@@150 $generated@@151) $generated@@152 $generated@@153))
)))
(assert (forall (($generated@@155 T@U) ($generated@@156 T@U) ) (!  (and (= ($generated@@21 ($generated@@25 $generated@@155 $generated@@156)) $generated@@3) (= ($generated@@154 ($generated@@25 $generated@@155 $generated@@156)) $generated@@4))
 :pattern ( ($generated@@25 $generated@@155 $generated@@156))
)))
(assert (forall (($generated@@157 T@U) ) (! (= ($generated@@86 ($generated@@51 $generated@@24 $generated@@157)) ($generated@@87 $generated@@157))
 :pattern ( ($generated@@86 ($generated@@51 $generated@@24 $generated@@157)))
)))
(assert (forall (($generated@@158 T@U) ($generated@@159 T@U) ($generated@@160 T@U) ) (!  (=> (and ($generated@@41 $generated@@160) (and ($generated@@22 $generated@@158) (exists (($generated@@161 T@U) ) (! ($generated@@40 $generated@@24 $generated@@158 ($generated@@25 $generated@@159 $generated@@161) $generated@@160)
 :pattern ( ($generated@@40 $generated@@24 $generated@@158 ($generated@@25 $generated@@159 $generated@@161) $generated@@160))
)))) ($generated@@42 ($generated@@78 $generated@@158) $generated@@159 $generated@@160))
 :pattern ( ($generated@@42 ($generated@@78 $generated@@158) $generated@@159 $generated@@160))
)))
(assert (forall (($generated@@162 T@U) ($generated@@163 T@U) ($generated@@164 T@U) ) (!  (=> (and ($generated@@41 $generated@@164) (and ($generated@@22 $generated@@162) (exists (($generated@@165 T@U) ) (! ($generated@@40 $generated@@24 $generated@@162 ($generated@@25 $generated@@165 $generated@@163) $generated@@164)
 :pattern ( ($generated@@40 $generated@@24 $generated@@162 ($generated@@25 $generated@@165 $generated@@163) $generated@@164))
)))) ($generated@@42 ($generated@@81 $generated@@162) $generated@@163 $generated@@164))
 :pattern ( ($generated@@42 ($generated@@81 $generated@@162) $generated@@163 $generated@@164))
)))
(assert (forall (($generated@@166 T@U) ($generated@@167 T@U) ) (! (= ($generated@@29 ($generated@@37 $generated@@100 $generated@@166) ($generated@@37 $generated@@100 $generated@@167)) ($generated@@37 $generated@@24 ($generated@@29 $generated@@166 $generated@@167)))
 :pattern ( ($generated@@29 ($generated@@37 $generated@@100 $generated@@166) ($generated@@37 $generated@@100 $generated@@167)))
)))
(assert (forall (($generated@@168 Int) ) (! (= ($generated@@51 $generated@@7 ($generated@@11 ($generated@@35 $generated@@168))) ($generated@@37 $generated@@100 ($generated@@51 $generated@@7 ($generated@@11 $generated@@168))))
 :pattern ( ($generated@@51 $generated@@7 ($generated@@11 ($generated@@35 $generated@@168))))
)))
(assert (forall (($generated@@169 T@U) ($generated@@170 T@T) ) (! (= ($generated@@51 $generated@@170 ($generated@@37 $generated@@170 $generated@@169)) ($generated@@37 $generated@@100 ($generated@@51 $generated@@170 $generated@@169)))
 :pattern ( ($generated@@51 $generated@@170 ($generated@@37 $generated@@170 $generated@@169)))
)))
(assert (forall (($generated@@171 T@U) ($generated@@172 T@U) ) (! ($generated@@40 $generated@@7 $generated@@172 $generated $generated@@171)
 :pattern ( ($generated@@40 $generated@@7 $generated@@172 $generated $generated@@171))
)))
(assert (forall (($generated@@173 T@U) ) (! ($generated@@23 $generated@@7 $generated@@173 $generated)
 :pattern ( ($generated@@23 $generated@@7 $generated@@173 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@174 () T@U)
(declare-fun $generated@@175 () T@U)
(declare-fun $generated@@176 () T@U)
(declare-fun $generated@@177 () Int)
(declare-fun $generated@@178 () Int)
(declare-fun $generated@@179 (Int) Bool)
(declare-fun $generated@@180 () Int)
(declare-fun $generated@@181 (Int) Int)
(declare-fun $generated@@182 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 4) (let (($generated@@183  (=> (= $generated@@174 ($generated@@98 $generated@@175 $generated@@176 $generated@@1 false)) (=> (and ($generated@@40 $generated@@7 ($generated@@11 $generated@@177) $generated $generated@@176) ($generated@@40 $generated@@7 ($generated@@11 $generated@@178) $generated $generated@@176)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (<= ($generated@@35 0) $generated@@178)) (=> (and (and ($generated@@179 $generated@@178) (= $generated@@180 ($generated@@181 $generated@@178))) (and ($generated@@40 $generated@@7 ($generated@@11 $generated@@180) $generated $generated@@176) (= (ControlFlow 0 2) (- 0 1)))) (< $generated@@177 100)))))))
(let (($generated@@184  (=> (and (and (and ($generated@@41 $generated@@176) ($generated@@182 $generated@@176)) (<= ($generated@@35 0) $generated@@178)) (and (= 1 $generated@@61) (= (ControlFlow 0 4) 2))) $generated@@183)))
$generated@@184)))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
