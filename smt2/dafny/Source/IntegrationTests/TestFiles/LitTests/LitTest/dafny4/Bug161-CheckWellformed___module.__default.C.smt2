(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 (T@U) T@U)
(declare-fun $generated@@20 (T@U) Int)
(declare-fun $generated@@21 () T@U)
(declare-fun $generated@@22 (T@T T@U) T@U)
(declare-fun $generated@@25 (T@T T@U) T@U)
(declare-fun $generated@@26 (T@T T@U) T@U)
(declare-fun $generated@@29 () Int)
(declare-fun $generated@@30 () Int)
(declare-fun $generated@@31 (T@U) Bool)
(declare-fun $generated@@32 () Bool)
(declare-fun $generated@@33 () Bool)
(declare-fun $generated@@34 (T@U) Bool)
(declare-fun $generated@@35 () T@U)
(declare-fun $generated@@36 (T@U) Int)
(declare-fun $generated@@41 (T@T T@U T@U) Bool)
(declare-fun $generated@@42 () T@T)
(declare-fun $generated@@43 (T@U) T@U)
(declare-fun $generated@@44 (T@U) Bool)
(declare-fun $generated@@45 (T@U T@U T@U) Bool)
(declare-fun $generated@@46 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@51 (T@U T@U) Bool)
(declare-fun $generated@@57 (T@U Int) T@U)
(declare-fun $generated@@62 (T@U) T@U)
(declare-fun $generated@@67 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@68 () T@T)
(declare-fun $generated@@69 () T@T)
(declare-fun $generated@@70 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@71 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@72 () T@T)
(declare-fun $generated@@73 (T@T T@T) T@T)
(declare-fun $generated@@74 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@75 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@76 (T@T) T@T)
(declare-fun $generated@@77 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (= ($generated@@19 $generated) $generated@@0))
(assert (= ($generated@@20 $generated@@21) 0))
(assert (forall (($generated@@23 T@U) ($generated@@24 T@T) ) (! (= ($generated@@22 $generated@@24 $generated@@23) $generated@@23)
 :pattern ( ($generated@@22 $generated@@24 $generated@@23))
)))
(assert (forall (($generated@@27 T@U) ($generated@@28 T@T) ) (! (= ($generated@@26 $generated@@28 ($generated@@25 $generated@@28 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@25 $generated@@28 $generated@@27))
)))
(assert  (=> (<= 2 $generated@@29) (forall (($generated@@37 T@U) ) (!  (=> (or $generated@@32 (and (< 2 $generated@@29) ($generated@@31 $generated@@37))) (and (and $generated@@33 ($generated@@34 $generated@@35)) (= $generated@@30 (let (($generated@@38 $generated@@35))
($generated@@36 $generated@@38)))))
 :pattern ( $generated@@30 ($generated@@31 $generated@@37))
))))
(assert  (=> (<= 2 $generated@@29) (forall (($generated@@39 T@U) ) (!  (=> (or $generated@@32 (and (< 2 $generated@@29) ($generated@@31 $generated@@39))) (and (and $generated@@33 ($generated@@34 $generated@@35)) (= $generated@@30 (let (($generated@@40 $generated@@35))
($generated@@36 $generated@@40)))))
 :weight 3
 :pattern ( $generated@@30 ($generated@@31 $generated@@39))
))))
(assert (= ($generated@@3 $generated@@42) 3))
(assert  (=> $generated@@33 (and ($generated@@41 $generated@@42 $generated@@35 ($generated@@43 $generated)) ($generated@@44 $generated@@35))))
(assert (forall (($generated@@47 T@U) ($generated@@48 T@U) ($generated@@49 T@U) ($generated@@50 T@T) ) (! (= ($generated@@45 ($generated@@26 $generated@@50 $generated@@47) $generated@@48 $generated@@49) ($generated@@46 $generated@@50 $generated@@47 $generated@@48 $generated@@49))
 :pattern ( ($generated@@45 ($generated@@26 $generated@@50 $generated@@47) $generated@@48 $generated@@49))
)))
(assert (forall (($generated@@52 T@U) ) (!  (=> ($generated@@51 $generated@@52 $generated) (and (= ($generated@@26 $generated@@5 ($generated@@25 $generated@@5 $generated@@52)) $generated@@52) ($generated@@41 $generated@@5 ($generated@@25 $generated@@5 $generated@@52) $generated)))
 :pattern ( ($generated@@51 $generated@@52 $generated))
)))
(assert (forall (($generated@@53 T@U) ($generated@@54 T@U) ($generated@@55 T@T) ) (! (= ($generated@@51 ($generated@@26 $generated@@55 $generated@@53) $generated@@54) ($generated@@41 $generated@@55 $generated@@53 $generated@@54))
 :pattern ( ($generated@@51 ($generated@@26 $generated@@55 $generated@@53) $generated@@54))
)))
(assert (forall (($generated@@56 T@U) ) (! (<= 0 ($generated@@20 $generated@@56))
 :pattern ( ($generated@@20 $generated@@56))
)))
(assert (forall (($generated@@58 T@U) ($generated@@59 T@U) ($generated@@60 T@U) ) (! (= ($generated@@46 $generated@@42 $generated@@58 ($generated@@43 $generated@@59) $generated@@60) (forall (($generated@@61 Int) ) (!  (=> (and (<= 0 $generated@@61) (< $generated@@61 ($generated@@20 $generated@@58))) ($generated@@45 ($generated@@57 $generated@@58 $generated@@61) $generated@@59 $generated@@60))
 :pattern ( ($generated@@57 $generated@@58 $generated@@61))
)))
 :pattern ( ($generated@@46 $generated@@42 $generated@@58 ($generated@@43 $generated@@59) $generated@@60))
)))
(assert (forall (($generated@@63 T@U) ) (! (= ($generated@@62 ($generated@@43 $generated@@63)) $generated@@63)
 :pattern ( ($generated@@43 $generated@@63))
)))
(assert (forall (($generated@@64 T@U) ) (! (= ($generated@@19 ($generated@@43 $generated@@64)) $generated@@1)
 :pattern ( ($generated@@43 $generated@@64))
)))
(assert (forall (($generated@@65 T@U) ($generated@@66 T@T) ) (! (= ($generated@@25 $generated@@66 ($generated@@26 $generated@@66 $generated@@65)) $generated@@65)
 :pattern ( ($generated@@26 $generated@@66 $generated@@65))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@78 T@T) ($generated@@79 T@T) ($generated@@80 T@T) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ) (! (= ($generated@@67 $generated@@78 $generated@@79 $generated@@80 ($generated@@74 $generated@@78 $generated@@79 $generated@@80 $generated@@82 $generated@@83 $generated@@84 $generated@@81) $generated@@83 $generated@@84) $generated@@81)
 :weight 0
)) (and (forall (($generated@@85 T@T) ($generated@@86 T@T) ($generated@@87 T@T) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ) (!  (or (= $generated@@90 $generated@@92) (= ($generated@@67 $generated@@85 $generated@@86 $generated@@87 ($generated@@74 $generated@@85 $generated@@86 $generated@@87 $generated@@89 $generated@@90 $generated@@91 $generated@@88) $generated@@92 $generated@@93) ($generated@@67 $generated@@85 $generated@@86 $generated@@87 $generated@@89 $generated@@92 $generated@@93)))
 :weight 0
)) (forall (($generated@@94 T@T) ($generated@@95 T@T) ($generated@@96 T@T) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@100 $generated@@102) (= ($generated@@67 $generated@@94 $generated@@95 $generated@@96 ($generated@@74 $generated@@94 $generated@@95 $generated@@96 $generated@@98 $generated@@99 $generated@@100 $generated@@97) $generated@@101 $generated@@102) ($generated@@67 $generated@@94 $generated@@95 $generated@@96 $generated@@98 $generated@@101 $generated@@102)))
 :weight 0
)))) (= ($generated@@3 $generated@@68) 4)) (= ($generated@@3 $generated@@69) 5)) (forall (($generated@@103 T@T) ($generated@@104 T@T) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ) (! (= ($generated@@71 $generated@@103 $generated@@104 ($generated@@75 $generated@@103 $generated@@104 $generated@@106 $generated@@107 $generated@@105) $generated@@107) $generated@@105)
 :weight 0
))) (forall (($generated@@108 T@T) ($generated@@109 T@T) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ) (!  (or (= $generated@@112 $generated@@113) (= ($generated@@71 $generated@@108 $generated@@109 ($generated@@75 $generated@@108 $generated@@109 $generated@@111 $generated@@112 $generated@@110) $generated@@113) ($generated@@71 $generated@@108 $generated@@109 $generated@@111 $generated@@113)))
 :weight 0
))) (= ($generated@@3 $generated@@72) 6)) (forall (($generated@@114 T@T) ($generated@@115 T@T) ) (= ($generated@@3 ($generated@@73 $generated@@114 $generated@@115)) 7))) (forall (($generated@@116 T@T) ($generated@@117 T@T) ) (! (= ($generated@@76 ($generated@@73 $generated@@116 $generated@@117)) $generated@@116)
 :pattern ( ($generated@@73 $generated@@116 $generated@@117))
))) (forall (($generated@@118 T@T) ($generated@@119 T@T) ) (! (= ($generated@@77 ($generated@@73 $generated@@118 $generated@@119)) $generated@@119)
 :pattern ( ($generated@@73 $generated@@118 $generated@@119))
))))
(assert (forall (($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 Bool) ($generated@@124 T@U) ($generated@@125 T@U) ) (! (= ($generated@@8 ($generated@@67 $generated@@68 $generated@@69 $generated@@4 ($generated@@70 $generated@@120 $generated@@121 $generated@@122 $generated@@123) $generated@@124 $generated@@125))  (=> (and (or (not (= $generated@@124 $generated@@120)) (not true)) ($generated@@8 ($generated@@25 $generated@@4 ($generated@@71 $generated@@69 $generated@@72 ($generated@@71 $generated@@68 ($generated@@73 $generated@@69 $generated@@72) $generated@@121 $generated@@124) $generated@@122)))) $generated@@123))
 :pattern ( ($generated@@67 $generated@@68 $generated@@69 $generated@@4 ($generated@@70 $generated@@120 $generated@@121 $generated@@122 $generated@@123) $generated@@124 $generated@@125))
)))
(assert (forall (($generated@@126 T@U) ($generated@@127 T@U) ) (!  (=> ($generated@@51 $generated@@126 ($generated@@43 $generated@@127)) (and (= ($generated@@26 $generated@@42 ($generated@@25 $generated@@42 $generated@@126)) $generated@@126) ($generated@@41 $generated@@42 ($generated@@25 $generated@@42 $generated@@126) ($generated@@43 $generated@@127))))
 :pattern ( ($generated@@51 $generated@@126 ($generated@@43 $generated@@127)))
)))
(assert (forall (($generated@@128 T@U) ($generated@@129 T@T) ) (! (= ($generated@@26 $generated@@129 ($generated@@22 $generated@@129 $generated@@128)) ($generated@@22 $generated@@72 ($generated@@26 $generated@@129 $generated@@128)))
 :pattern ( ($generated@@26 $generated@@129 ($generated@@22 $generated@@129 $generated@@128)))
)))
(assert (forall (($generated@@130 T@U) ) (!  (=> (= ($generated@@20 $generated@@130) 0) (= $generated@@130 $generated@@21))
 :pattern ( ($generated@@20 $generated@@130))
)))
(assert (forall (($generated@@131 T@U) ($generated@@132 T@U) ) (! ($generated@@46 $generated@@5 $generated@@132 $generated $generated@@131)
 :pattern ( ($generated@@46 $generated@@5 $generated@@132 $generated $generated@@131))
)))
(assert (forall (($generated@@133 T@U) ($generated@@134 T@U) ) (! (= ($generated@@41 $generated@@42 $generated@@133 ($generated@@43 $generated@@134)) (forall (($generated@@135 Int) ) (!  (=> (and (<= 0 $generated@@135) (< $generated@@135 ($generated@@20 $generated@@133))) ($generated@@51 ($generated@@57 $generated@@133 $generated@@135) $generated@@134))
 :pattern ( ($generated@@57 $generated@@133 $generated@@135))
)))
 :pattern ( ($generated@@41 $generated@@42 $generated@@133 ($generated@@43 $generated@@134)))
)))
(assert (forall (($generated@@136 T@U) ) (! ($generated@@41 $generated@@5 $generated@@136 $generated)
 :pattern ( ($generated@@41 $generated@@5 $generated@@136 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@137 () T@U)
(declare-fun $generated@@138 () T@U)
(declare-fun $generated@@139 (T@U) Bool)
(declare-fun $generated@@140 () T@U)
(declare-fun $generated@@141 () T@U)
(declare-fun $generated@@142 () T@U)
(declare-fun $generated@@143 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 10) (let (($generated@@144  (=> (= (ControlFlow 0 3) (- 0 2)) (or (and ($generated@@41 $generated@@42 ($generated@@22 $generated@@42 $generated@@21) ($generated@@43 $generated)) ($generated@@44 ($generated@@22 $generated@@42 $generated@@21))) (exists (($generated@@145 T@U) )  (and ($generated@@41 $generated@@42 $generated@@145 ($generated@@43 $generated)) ($generated@@44 $generated@@145)))))))
(let (($generated@@146  (=> (and (not (and ($generated@@41 $generated@@42 $generated@@137 ($generated@@43 $generated)) ($generated@@46 $generated@@42 $generated@@137 ($generated@@43 $generated) $generated@@138))) (= (ControlFlow 0 5) 3)) $generated@@144)))
(let (($generated@@147  (=> (and (and (and ($generated@@41 $generated@@42 $generated@@137 ($generated@@43 $generated)) ($generated@@46 $generated@@42 $generated@@137 ($generated@@43 $generated) $generated@@138)) ($generated@@46 $generated@@42 $generated@@137 ($generated@@43 $generated) $generated@@138)) (and ($generated@@139 $generated@@137) (= (ControlFlow 0 4) 3))) $generated@@144)))
(let (($generated@@148  (=> (and (forall (($generated@@149 T@U) ) (!  (=> ($generated@@41 $generated@@42 $generated@@149 ($generated@@43 $generated)) ($generated@@139 $generated@@149))
 :pattern ( ($generated@@44 $generated@@149))
)) (exists (($generated@@150 T@U) ) (!  (and ($generated@@41 $generated@@42 $generated@@150 ($generated@@43 $generated)) ($generated@@44 $generated@@150))
 :pattern ( ($generated@@44 $generated@@150))
))) (and (=> (= (ControlFlow 0 6) 4) $generated@@147) (=> (= (ControlFlow 0 6) 5) $generated@@146)))))
(let (($generated@@151  (=> (and (not (and ($generated@@41 $generated@@42 $generated@@140 ($generated@@43 $generated)) ($generated@@46 $generated@@42 $generated@@140 ($generated@@43 $generated) $generated@@138))) (= (ControlFlow 0 8) 6)) $generated@@148)))
(let (($generated@@152  (=> (and (and (and ($generated@@41 $generated@@42 $generated@@140 ($generated@@43 $generated)) ($generated@@46 $generated@@42 $generated@@140 ($generated@@43 $generated) $generated@@138)) ($generated@@46 $generated@@42 $generated@@140 ($generated@@43 $generated) $generated@@138)) (and ($generated@@139 $generated@@140) (= (ControlFlow 0 7) 6))) $generated@@148)))
(let (($generated@@153 true))
(let (($generated@@154  (=> (= $generated@@141 ($generated@@70 $generated@@142 $generated@@138 $generated@@2 false)) (and (and (=> (= (ControlFlow 0 9) 1) $generated@@153) (=> (= (ControlFlow 0 9) 7) $generated@@152)) (=> (= (ControlFlow 0 9) 8) $generated@@151)))))
(let (($generated@@155  (=> (and (and ($generated@@31 $generated@@138) ($generated@@143 $generated@@138)) (and (= 2 $generated@@29) (= (ControlFlow 0 10) 9))) $generated@@154)))
$generated@@155))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
