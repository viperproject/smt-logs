(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (Bool) T@U)
(declare-fun $generated@@7 (T@U) Bool)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun $generated@@9 (T@U) Int)
(declare-fun $generated@@10 (Real) T@U)
(declare-fun $generated@@11 (T@U) Real)
(declare-fun $generated@@18 (T@U) T@U)
(declare-fun $generated@@19 () Int)
(declare-fun $generated@@20 (T@U T@U Int) Int)
(declare-fun $generated@@21 (T@U T@U Int) Bool)
(declare-fun $generated@@22 (T@U) Bool)
(declare-fun $generated@@23 (T@U T@U) Bool)
(declare-fun $generated@@27 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@28 () T@T)
(declare-fun $generated@@29 () T@T)
(declare-fun $generated@@30 () T@T)
(declare-fun $generated@@31 (T@T T@T) T@T)
(declare-fun $generated@@32 (T@T T@U) T@U)
(declare-fun $generated@@33 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@34 (T@T) T@T)
(declare-fun $generated@@35 (T@T) T@T)
(declare-fun $generated@@56 (Int) Int)
(declare-fun $generated@@58 (T@T T@U) T@U)
(declare-fun $generated@@61 (T@U) Bool)
(declare-fun $generated@@68 (T@T T@U) T@U)
(declare-fun $generated@@71 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@88 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@89 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@90 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@127 (T@T T@U T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@4) 1)) (= ($generated@@2 $generated@@5) 2)) (forall (($generated@@12 Bool) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Int) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Real) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))))
(assert (distinct $generated $generated@@0 $generated@@1)
)
(assert (= ($generated@@18 $generated) $generated@@0))
(assert  (=> (<= 0 $generated@@19) (forall (($generated@@24 T@U) ($generated@@25 T@U) ($generated@@26 Int) ) (!  (=> (or ($generated@@21 $generated@@24 $generated@@25 $generated@@26) (and (< 0 $generated@@19) (and (and ($generated@@22 $generated@@24) ($generated@@22 $generated@@25)) ($generated@@23 $generated@@24 $generated@@25)))) (and (and (= ($generated@@20 $generated@@24 $generated@@25 $generated@@26) (- $generated@@26 1)) (= ($generated@@20 $generated@@24 $generated@@25 $generated@@26) ($generated@@20 $generated@@24 $generated@@25 $generated@@26))) (= ($generated@@20 $generated@@24 $generated@@25 $generated@@26) (- $generated@@26 1))))
 :pattern ( ($generated@@20 $generated@@24 $generated@@25 $generated@@26))
))))
(assert  (and (and (and (and (and (and (and (forall (($generated@@36 T@T) ($generated@@37 T@T) ($generated@@38 T@U) ($generated@@39 T@U) ($generated@@40 T@U) ) (! (= ($generated@@27 $generated@@36 $generated@@37 ($generated@@33 $generated@@36 $generated@@37 $generated@@39 $generated@@40 $generated@@38) $generated@@40) $generated@@38)
 :weight 0
)) (forall (($generated@@41 T@T) ($generated@@42 T@T) ($generated@@43 T@U) ($generated@@44 T@U) ($generated@@45 T@U) ($generated@@46 T@U) ) (!  (or (= $generated@@45 $generated@@46) (= ($generated@@27 $generated@@41 $generated@@42 ($generated@@33 $generated@@41 $generated@@42 $generated@@44 $generated@@45 $generated@@43) $generated@@46) ($generated@@27 $generated@@41 $generated@@42 $generated@@44 $generated@@46)))
 :weight 0
))) (= ($generated@@2 $generated@@28) 3)) (= ($generated@@2 $generated@@29) 4)) (= ($generated@@2 $generated@@30) 5)) (forall (($generated@@47 T@T) ($generated@@48 T@T) ) (= ($generated@@2 ($generated@@31 $generated@@47 $generated@@48)) 6))) (forall (($generated@@49 T@T) ($generated@@50 T@T) ) (! (= ($generated@@34 ($generated@@31 $generated@@49 $generated@@50)) $generated@@49)
 :pattern ( ($generated@@31 $generated@@49 $generated@@50))
))) (forall (($generated@@51 T@T) ($generated@@52 T@T) ) (! (= ($generated@@35 ($generated@@31 $generated@@51 $generated@@52)) $generated@@52)
 :pattern ( ($generated@@31 $generated@@51 $generated@@52))
))))
(assert (forall (($generated@@53 T@U) ($generated@@54 T@U) ) (!  (=> ($generated@@23 $generated@@53 $generated@@54) (forall (($generated@@55 T@U) ) (!  (=> ($generated@@7 ($generated@@32 $generated@@3 ($generated@@27 $generated@@28 $generated@@29 ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@53 $generated@@55) $generated@@1))) ($generated@@7 ($generated@@32 $generated@@3 ($generated@@27 $generated@@28 $generated@@29 ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@54 $generated@@55) $generated@@1))))
 :pattern ( ($generated@@27 $generated@@28 $generated@@29 ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@54 $generated@@55) $generated@@1))
)))
 :pattern ( ($generated@@23 $generated@@53 $generated@@54))
)))
(assert (forall (($generated@@57 Int) ) (! (= ($generated@@56 $generated@@57) $generated@@57)
 :pattern ( ($generated@@56 $generated@@57))
)))
(assert (forall (($generated@@59 T@U) ($generated@@60 T@T) ) (! (= ($generated@@58 $generated@@60 $generated@@59) $generated@@59)
 :pattern ( ($generated@@58 $generated@@60 $generated@@59))
)))
(assert (forall (($generated@@62 T@U) ($generated@@63 T@U) ($generated@@64 T@U) ($generated@@65 Int) ) (!  (=> (and (and ($generated@@22 $generated@@63) ($generated@@22 $generated@@64)) (and ($generated@@61 $generated@@63) ($generated@@23 $generated@@63 $generated@@64))) (=> (forall (($generated@@66 T@U) ($generated@@67 T@U) ) true) (= ($generated@@20 $generated@@62 $generated@@63 $generated@@65) ($generated@@20 $generated@@62 $generated@@64 $generated@@65))))
 :pattern ( ($generated@@61 $generated@@63) ($generated@@23 $generated@@63 $generated@@64) ($generated@@20 $generated@@62 $generated@@64 $generated@@65))
)))
(assert (forall (($generated@@69 T@U) ($generated@@70 T@T) ) (! (= ($generated@@68 $generated@@70 ($generated@@32 $generated@@70 $generated@@69)) $generated@@69)
 :pattern ( ($generated@@32 $generated@@70 $generated@@69))
)))
(assert (forall (($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@T) ) (!  (=> ($generated@@23 $generated@@72 $generated@@73) (=> ($generated@@71 $generated@@76 $generated@@74 $generated@@75 $generated@@72) ($generated@@71 $generated@@76 $generated@@74 $generated@@75 $generated@@73)))
 :pattern ( ($generated@@23 $generated@@72 $generated@@73) ($generated@@71 $generated@@76 $generated@@74 $generated@@75 $generated@@72))
)))
(assert  (=> (<= 0 $generated@@19) (forall (($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 Int) ) (!  (=> (or ($generated@@21 $generated@@77 $generated@@78 $generated@@79) (and (< 0 $generated@@19) (and (and ($generated@@22 $generated@@77) ($generated@@22 $generated@@78)) ($generated@@23 $generated@@77 $generated@@78)))) (= ($generated@@20 $generated@@77 $generated@@78 $generated@@79) (- $generated@@79 1)))
 :pattern ( ($generated@@20 $generated@@77 $generated@@78 $generated@@79) ($generated@@22 $generated@@78))
))))
(assert (forall (($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (=> (or (not (= $generated@@80 $generated@@82)) (not true)) (=> (and ($generated@@23 $generated@@80 $generated@@81) ($generated@@23 $generated@@81 $generated@@82)) ($generated@@23 $generated@@80 $generated@@82)))
 :pattern ( ($generated@@23 $generated@@80 $generated@@81) ($generated@@23 $generated@@81 $generated@@82))
)))
(assert (forall (($generated@@83 T@U) ($generated@@84 T@T) ) (! (= ($generated@@32 $generated@@84 ($generated@@68 $generated@@84 $generated@@83)) $generated@@83)
 :pattern ( ($generated@@68 $generated@@84 $generated@@83))
)))
(assert  (=> (<= 0 $generated@@19) (forall (($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 Int) ) (!  (=> (or ($generated@@21 $generated@@85 $generated@@86 ($generated@@56 $generated@@87)) (and (< 0 $generated@@19) (and (and ($generated@@22 $generated@@85) ($generated@@22 $generated@@86)) ($generated@@23 $generated@@85 $generated@@86)))) (= ($generated@@20 $generated@@85 $generated@@86 ($generated@@56 $generated@@87)) ($generated@@56 (- $generated@@87 1))))
 :weight 3
 :pattern ( ($generated@@20 $generated@@85 $generated@@86 ($generated@@56 $generated@@87)) ($generated@@22 $generated@@86))
))))
(assert  (and (forall (($generated@@91 T@T) ($generated@@92 T@T) ($generated@@93 T@T) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (! (= ($generated@@88 $generated@@91 $generated@@92 $generated@@93 ($generated@@90 $generated@@91 $generated@@92 $generated@@93 $generated@@95 $generated@@96 $generated@@97 $generated@@94) $generated@@96 $generated@@97) $generated@@94)
 :weight 0
)) (and (forall (($generated@@98 T@T) ($generated@@99 T@T) ($generated@@100 T@T) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or (= $generated@@103 $generated@@105) (= ($generated@@88 $generated@@98 $generated@@99 $generated@@100 ($generated@@90 $generated@@98 $generated@@99 $generated@@100 $generated@@102 $generated@@103 $generated@@104 $generated@@101) $generated@@105 $generated@@106) ($generated@@88 $generated@@98 $generated@@99 $generated@@100 $generated@@102 $generated@@105 $generated@@106)))
 :weight 0
)) (forall (($generated@@107 T@T) ($generated@@108 T@T) ($generated@@109 T@T) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (!  (or (= $generated@@113 $generated@@115) (= ($generated@@88 $generated@@107 $generated@@108 $generated@@109 ($generated@@90 $generated@@107 $generated@@108 $generated@@109 $generated@@111 $generated@@112 $generated@@113 $generated@@110) $generated@@114 $generated@@115) ($generated@@88 $generated@@107 $generated@@108 $generated@@109 $generated@@111 $generated@@114 $generated@@115)))
 :weight 0
)))))
(assert (forall (($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 Bool) ($generated@@120 T@U) ($generated@@121 T@U) ) (! (= ($generated@@7 ($generated@@88 $generated@@30 $generated@@28 $generated@@3 ($generated@@89 $generated@@116 $generated@@117 $generated@@118 $generated@@119) $generated@@120 $generated@@121))  (=> (and (or (not (= $generated@@120 $generated@@116)) (not true)) ($generated@@7 ($generated@@32 $generated@@3 ($generated@@27 $generated@@28 $generated@@29 ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@117 $generated@@120) $generated@@118)))) $generated@@119))
 :pattern ( ($generated@@88 $generated@@30 $generated@@28 $generated@@3 ($generated@@89 $generated@@116 $generated@@117 $generated@@118 $generated@@119) $generated@@120 $generated@@121))
)))
(assert (forall (($generated@@122 Int) ) (! (= ($generated@@68 $generated@@4 ($generated@@8 ($generated@@56 $generated@@122))) ($generated@@58 $generated@@29 ($generated@@68 $generated@@4 ($generated@@8 $generated@@122))))
 :pattern ( ($generated@@68 $generated@@4 ($generated@@8 ($generated@@56 $generated@@122))))
)))
(assert (forall (($generated@@123 T@U) ($generated@@124 T@T) ) (! (= ($generated@@68 $generated@@124 ($generated@@58 $generated@@124 $generated@@123)) ($generated@@58 $generated@@29 ($generated@@68 $generated@@124 $generated@@123)))
 :pattern ( ($generated@@68 $generated@@124 ($generated@@58 $generated@@124 $generated@@123)))
)))
(assert (forall (($generated@@125 T@U) ($generated@@126 T@U) ) (! ($generated@@71 $generated@@4 $generated@@126 $generated $generated@@125)
 :pattern ( ($generated@@71 $generated@@4 $generated@@126 $generated $generated@@125))
)))
(assert (forall (($generated@@128 T@U) ) (! ($generated@@127 $generated@@4 $generated@@128 $generated)
 :pattern ( ($generated@@127 $generated@@4 $generated@@128 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@129 () Int)
(declare-fun $generated@@130 () Int)
(declare-fun $generated@@131 () T@U)
(declare-fun $generated@@132 () T@U)
(declare-fun $generated@@133 () T@U)
(declare-fun $generated@@134 () T@U)
(declare-fun $generated@@135 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 12) (let (($generated@@136  (and (=> (= (ControlFlow 0 7) (- 0 9)) (= $generated@@129 (- $generated@@130 1))) (=> (= $generated@@129 (- $generated@@130 1)) (and (=> (= (ControlFlow 0 7) (- 0 8)) (= ($generated@@20 $generated@@131 $generated@@132 $generated@@130) $generated@@129)) (=> (= ($generated@@20 $generated@@131 $generated@@132 $generated@@130) $generated@@129) (=> (= (ControlFlow 0 7) (- 0 6)) (= ($generated@@20 $generated@@131 $generated@@132 $generated@@130) (- $generated@@130 1)))))))))
(let (($generated@@137  (=> (and (and (= ($generated@@20 $generated@@133 $generated@@132 $generated@@130) (- $generated@@130 1)) ($generated@@127 $generated@@4 ($generated@@8 ($generated@@20 $generated@@133 $generated@@132 $generated@@130)) $generated)) (and (= ($generated@@20 $generated@@133 $generated@@132 $generated@@130) $generated@@129) (= (ControlFlow 0 10) 7))) $generated@@136)))
(let (($generated@@138  (=> (and (= $generated@@129 (- $generated@@130 1)) ($generated@@71 $generated@@4 ($generated@@8 $generated@@130) $generated $generated@@132)) (and (=> (= (ControlFlow 0 2) (- 0 5)) (or (<= 0 $generated@@130) (= $generated@@130 $generated@@130))) (=> (or (<= 0 $generated@@130) (= $generated@@130 $generated@@130)) (and (=> (= (ControlFlow 0 2) (- 0 4)) (or (= $generated@@130 $generated@@130) (< $generated@@130 $generated@@130))) (=> (or (= $generated@@130 $generated@@130) (< $generated@@130 $generated@@130)) (=> (or (= $generated@@130 $generated@@130) ($generated@@21 $generated@@133 $generated@@132 $generated@@130)) (=> (and (= ($generated@@20 $generated@@133 $generated@@132 $generated@@130) $generated@@129) ($generated@@71 $generated@@4 ($generated@@8 $generated@@130) $generated $generated@@132)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (or (<= 0 $generated@@130) (= $generated@@130 $generated@@130))) (=> (or (<= 0 $generated@@130) (= $generated@@130 $generated@@130)) (=> (= (ControlFlow 0 2) (- 0 1)) (or (= $generated@@130 $generated@@130) (< $generated@@130 $generated@@130))))))))))))))
(let (($generated@@139  (=> (= $generated@@134 ($generated@@89 $generated@@135 $generated@@132 $generated@@1 false)) (and (=> (= (ControlFlow 0 11) 2) $generated@@138) (=> (= (ControlFlow 0 11) 10) $generated@@137)))))
(let (($generated@@140  (=> (and (and (and ($generated@@22 $generated@@133) ($generated@@61 $generated@@133)) (= 0 $generated@@19)) (and (and (= $generated@@131 $generated@@133) (and ($generated@@23 $generated@@131 $generated@@132) ($generated@@22 $generated@@132))) (= (ControlFlow 0 12) 11))) $generated@@139)))
$generated@@140))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
