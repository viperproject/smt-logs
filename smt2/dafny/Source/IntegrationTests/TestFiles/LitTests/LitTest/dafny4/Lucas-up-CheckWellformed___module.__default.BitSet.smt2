(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 (T@U) T@U)
(declare-fun $generated@@22 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@23 () T@U)
(declare-fun $generated@@26 () Int)
(declare-fun $generated@@27 (Int) T@U)
(declare-fun $generated@@28 (Int) Bool)
(declare-fun $generated@@29 (Int) Int)
(declare-fun $generated@@30 (T@T T@U T@U) Bool)
(declare-fun $generated@@31 () T@T)
(declare-fun $generated@@32 (T@U) T@U)
(declare-fun $generated@@35 (T@T T@U) T@U)
(declare-fun $generated@@38 (T@U Int Int) Bool)
(declare-fun $generated@@39 (T@U) T@U)
(declare-fun $generated@@40 (Int Int) Bool)
(declare-fun $generated@@41 (Int Int) Int)
(declare-fun $generated@@42 (Int Int) Int)
(declare-fun $generated@@46 (T@T T@U) T@U)
(declare-fun $generated@@47 (T@T T@U) T@U)
(declare-fun $generated@@50 (T@U T@U) Bool)
(declare-fun $generated@@51 (T@U) T@U)
(declare-fun $generated@@52 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@53 () T@T)
(declare-fun $generated@@54 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@68 (T@U T@U) Bool)
(declare-fun $generated@@72 () T@U)
(declare-fun $generated@@73 (T@U Int Int T@U Int) T@U)
(declare-fun $generated@@86 (T@U T@U T@U) Bool)
(declare-fun $generated@@107 (T@U) T@U)
(declare-fun $generated@@112 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@113 () T@T)
(declare-fun $generated@@114 () T@T)
(declare-fun $generated@@115 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@116 (T@T T@T) T@T)
(declare-fun $generated@@117 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@118 (T@T) T@T)
(declare-fun $generated@@119 (T@T) T@T)
(declare-fun $generated@@161 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert (= ($generated@@21 $generated) $generated@@0))
(assert (forall (($generated@@24 T@U) ($generated@@25 T@U) ) (! ($generated@@22 $generated@@7 $generated@@24 $generated@@23 $generated@@25)
 :pattern ( ($generated@@22 $generated@@7 $generated@@24 $generated@@23 $generated@@25))
)))
(assert (= ($generated@@5 $generated@@31) 3))
(assert  (=> (<= 1 $generated@@26) (forall (($generated@@33 Int) ) (!  (=> (or ($generated@@28 $generated@@33) (and (< 1 $generated@@26) (<= ($generated@@29 0) $generated@@33))) ($generated@@30 $generated@@31 ($generated@@27 $generated@@33) ($generated@@32 $generated@@23)))
 :pattern ( ($generated@@27 $generated@@33))
))))
(assert (forall (($generated@@34 Int) ) (! (= ($generated@@29 $generated@@34) $generated@@34)
 :pattern ( ($generated@@29 $generated@@34))
)))
(assert (forall (($generated@@36 T@U) ($generated@@37 T@T) ) (! (= ($generated@@35 $generated@@37 $generated@@36) $generated@@36)
 :pattern ( ($generated@@35 $generated@@37 $generated@@36))
)))
(assert  (=> (<= 0 $generated@@26) (forall (($generated@@43 T@U) ($generated@@44 Int) ($generated@@45 Int) ) (!  (=> (or ($generated@@40 ($generated@@29 $generated@@44) ($generated@@29 $generated@@45)) (and (< 0 $generated@@26) (and (<= ($generated@@29 0) $generated@@44) (<= ($generated@@29 0) $generated@@45)))) (and (=> (or (not (= ($generated@@29 $generated@@44) ($generated@@29 0))) (not true)) ($generated@@40 ($generated@@29 (- $generated@@44 1)) ($generated@@29 ($generated@@41 $generated@@45 ($generated@@29 2))))) (= ($generated@@38 ($generated@@39 $generated@@43) ($generated@@29 $generated@@44) ($generated@@29 $generated@@45)) (ite (= ($generated@@29 $generated@@44) ($generated@@29 0)) (= ($generated@@29 ($generated@@42 $generated@@45 ($generated@@29 2))) ($generated@@29 1)) ($generated@@38 ($generated@@39 $generated@@43) ($generated@@29 (- $generated@@44 1)) ($generated@@29 ($generated@@41 $generated@@45 ($generated@@29 2))))))))
 :weight 3
 :pattern ( ($generated@@38 ($generated@@39 $generated@@43) ($generated@@29 $generated@@44) ($generated@@29 $generated@@45)))
))))
(assert (forall (($generated@@48 T@U) ($generated@@49 T@T) ) (! (= ($generated@@47 $generated@@49 ($generated@@46 $generated@@49 $generated@@48)) $generated@@48)
 :pattern ( ($generated@@46 $generated@@49 $generated@@48))
)))
(assert  (and (and (forall (($generated@@55 T@T) ($generated@@56 T@T) ($generated@@57 T@U) ($generated@@58 T@U) ($generated@@59 T@U) ) (! (= ($generated@@52 $generated@@55 $generated@@56 ($generated@@54 $generated@@55 $generated@@56 $generated@@58 $generated@@59 $generated@@57) $generated@@59) $generated@@57)
 :weight 0
)) (forall (($generated@@60 T@T) ($generated@@61 T@T) ($generated@@62 T@U) ($generated@@63 T@U) ($generated@@64 T@U) ($generated@@65 T@U) ) (!  (or (= $generated@@64 $generated@@65) (= ($generated@@52 $generated@@60 $generated@@61 ($generated@@54 $generated@@60 $generated@@61 $generated@@63 $generated@@64 $generated@@62) $generated@@65) ($generated@@52 $generated@@60 $generated@@61 $generated@@63 $generated@@65)))
 :weight 0
))) (= ($generated@@5 $generated@@53) 4)))
(assert (forall (($generated@@66 T@U) ($generated@@67 T@U) ) (! (= ($generated@@50 ($generated@@51 $generated@@66) $generated@@67) ($generated@@10 ($generated@@52 $generated@@53 $generated@@6 $generated@@66 $generated@@67)))
 :pattern ( ($generated@@50 ($generated@@51 $generated@@66) $generated@@67))
)))
(assert (forall (($generated@@69 T@U) ($generated@@70 T@U) ) (! (= ($generated@@30 $generated@@31 $generated@@69 ($generated@@32 $generated@@70)) (forall (($generated@@71 T@U) ) (!  (=> ($generated@@50 $generated@@69 $generated@@71) ($generated@@68 $generated@@71 $generated@@70))
 :pattern ( ($generated@@50 $generated@@69 $generated@@71))
)))
 :pattern ( ($generated@@30 $generated@@31 $generated@@69 ($generated@@32 $generated@@70)))
)))
(assert  (=> (<= 1 $generated@@26) (forall (($generated@@74 Int) ) (!  (=> (or ($generated@@28 $generated@@74) (and (< 1 $generated@@26) (<= ($generated@@29 0) $generated@@74))) (and (forall (($generated@@75 Int) ) (!  (=> (<= ($generated@@29 0) $generated@@75) (=> (< $generated@@75 $generated@@74) ($generated@@40 $generated@@75 $generated@@74)))
 :pattern ( ($generated@@38 ($generated@@39 $generated@@72) $generated@@75 $generated@@74))
)) (= ($generated@@27 $generated@@74) ($generated@@51 ($generated@@73 $generated ($generated@@29 0) $generated@@74 ($generated@@39 $generated@@72) $generated@@74)))))
 :pattern ( ($generated@@27 $generated@@74))
))))
(assert (forall (($generated@@76 T@U) ($generated@@77 Int) ($generated@@78 Int) ($generated@@79 T@U) ($generated@@80 Int) ($generated@@81 T@U) ) (! (= ($generated@@10 ($generated@@52 $generated@@53 $generated@@6 ($generated@@73 $generated@@76 $generated@@77 $generated@@78 $generated@@79 $generated@@80) $generated@@81))  (and ($generated@@68 $generated@@81 $generated@@76) (and (and (<= $generated@@77 ($generated@@12 ($generated@@46 $generated@@7 $generated@@81))) (< ($generated@@12 ($generated@@46 $generated@@7 $generated@@81)) $generated@@78)) ($generated@@38 $generated@@79 ($generated@@12 ($generated@@46 $generated@@7 $generated@@81)) $generated@@80))))
 :pattern ( ($generated@@52 $generated@@53 $generated@@6 ($generated@@73 $generated@@76 $generated@@77 $generated@@78 $generated@@79 $generated@@80) $generated@@81))
)))
(assert (forall (($generated@@82 T@U) ) (! (= ($generated@@30 $generated@@7 $generated@@82 $generated@@23) (<= ($generated@@29 0) ($generated@@12 $generated@@82)))
 :pattern ( ($generated@@30 $generated@@7 $generated@@82 $generated@@23))
)))
(assert (forall (($generated@@83 T@U) ($generated@@84 Int) ($generated@@85 Int) ) (! (= ($generated@@38 ($generated@@39 $generated@@83) $generated@@84 $generated@@85) ($generated@@38 $generated@@83 $generated@@84 $generated@@85))
 :pattern ( ($generated@@38 ($generated@@39 $generated@@83) $generated@@84 $generated@@85))
)))
(assert (forall (($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@T) ) (! (= ($generated@@86 ($generated@@47 $generated@@90 $generated@@87) $generated@@88 $generated@@89) ($generated@@22 $generated@@90 $generated@@87 $generated@@88 $generated@@89))
 :pattern ( ($generated@@86 ($generated@@47 $generated@@90 $generated@@87) $generated@@88 $generated@@89))
)))
(assert  (=> (<= 0 $generated@@26) (forall (($generated@@91 T@U) ($generated@@92 Int) ($generated@@93 Int) ) (!  (=> (or ($generated@@40 $generated@@92 $generated@@93) (and (< 0 $generated@@26) (and (<= ($generated@@29 0) $generated@@92) (<= ($generated@@29 0) $generated@@93)))) (and (=> (or (not (= $generated@@92 ($generated@@29 0))) (not true)) ($generated@@40 (- $generated@@92 1) ($generated@@41 $generated@@93 ($generated@@29 2)))) (= ($generated@@38 ($generated@@39 $generated@@91) $generated@@92 $generated@@93) (ite (= $generated@@92 ($generated@@29 0)) (= ($generated@@42 $generated@@93 ($generated@@29 2)) ($generated@@29 1)) ($generated@@38 $generated@@91 (- $generated@@92 1) ($generated@@41 $generated@@93 ($generated@@29 2)))))))
 :pattern ( ($generated@@38 ($generated@@39 $generated@@91) $generated@@92 $generated@@93))
))))
(assert (forall (($generated@@94 T@U) ) (!  (=> ($generated@@68 $generated@@94 $generated@@23) (and (= ($generated@@47 $generated@@7 ($generated@@46 $generated@@7 $generated@@94)) $generated@@94) ($generated@@30 $generated@@7 ($generated@@46 $generated@@7 $generated@@94) $generated@@23)))
 :pattern ( ($generated@@68 $generated@@94 $generated@@23))
)))
(assert (forall (($generated@@95 Int) ($generated@@96 Int) ) (! (= ($generated@@41 $generated@@95 $generated@@96) (div $generated@@95 $generated@@96))
 :pattern ( ($generated@@41 $generated@@95 $generated@@96))
)))
(assert  (=> (<= 1 $generated@@26) (forall (($generated@@97 Int) ) (!  (=> (or ($generated@@28 ($generated@@29 $generated@@97)) (and (< 1 $generated@@26) (<= ($generated@@29 0) $generated@@97))) (and (forall (($generated@@98 Int) ) (!  (=> (<= ($generated@@29 0) $generated@@98) (=> (< $generated@@98 $generated@@97) ($generated@@40 $generated@@98 ($generated@@29 $generated@@97))))
 :pattern ( ($generated@@38 ($generated@@39 $generated@@72) $generated@@98 $generated@@97))
)) (= ($generated@@27 ($generated@@29 $generated@@97)) ($generated@@51 ($generated@@73 $generated ($generated@@29 0) $generated@@97 ($generated@@39 $generated@@72) ($generated@@29 $generated@@97))))))
 :weight 3
 :pattern ( ($generated@@27 ($generated@@29 $generated@@97)))
))))
(assert (forall (($generated@@99 T@U) ) (!  (=> ($generated@@68 $generated@@99 $generated) (and (= ($generated@@47 $generated@@7 ($generated@@46 $generated@@7 $generated@@99)) $generated@@99) ($generated@@30 $generated@@7 ($generated@@46 $generated@@7 $generated@@99) $generated)))
 :pattern ( ($generated@@68 $generated@@99 $generated))
)))
(assert (forall (($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@T) ) (! (= ($generated@@68 ($generated@@47 $generated@@102 $generated@@100) $generated@@101) ($generated@@30 $generated@@102 $generated@@100 $generated@@101))
 :pattern ( ($generated@@68 ($generated@@47 $generated@@102 $generated@@100) $generated@@101))
)))
(assert (forall (($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ) (! (= ($generated@@22 $generated@@31 $generated@@103 ($generated@@32 $generated@@104) $generated@@105) (forall (($generated@@106 T@U) ) (!  (=> ($generated@@50 $generated@@103 $generated@@106) ($generated@@86 $generated@@106 $generated@@104 $generated@@105))
 :pattern ( ($generated@@50 $generated@@103 $generated@@106))
)))
 :pattern ( ($generated@@22 $generated@@31 $generated@@103 ($generated@@32 $generated@@104) $generated@@105))
)))
(assert (forall (($generated@@108 T@U) ) (! (= ($generated@@107 ($generated@@32 $generated@@108)) $generated@@108)
 :pattern ( ($generated@@32 $generated@@108))
)))
(assert (forall (($generated@@109 T@U) ) (! (= ($generated@@21 ($generated@@32 $generated@@109)) $generated@@1)
 :pattern ( ($generated@@32 $generated@@109))
)))
(assert (forall (($generated@@110 T@U) ($generated@@111 T@T) ) (! (= ($generated@@46 $generated@@111 ($generated@@47 $generated@@111 $generated@@110)) $generated@@110)
 :pattern ( ($generated@@47 $generated@@111 $generated@@110))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@120 T@T) ($generated@@121 T@T) ($generated@@122 T@T) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ) (! (= ($generated@@112 $generated@@120 $generated@@121 $generated@@122 ($generated@@117 $generated@@120 $generated@@121 $generated@@122 $generated@@124 $generated@@125 $generated@@126 $generated@@123) $generated@@125 $generated@@126) $generated@@123)
 :weight 0
)) (and (forall (($generated@@127 T@T) ($generated@@128 T@T) ($generated@@129 T@T) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ) (!  (or (= $generated@@132 $generated@@134) (= ($generated@@112 $generated@@127 $generated@@128 $generated@@129 ($generated@@117 $generated@@127 $generated@@128 $generated@@129 $generated@@131 $generated@@132 $generated@@133 $generated@@130) $generated@@134 $generated@@135) ($generated@@112 $generated@@127 $generated@@128 $generated@@129 $generated@@131 $generated@@134 $generated@@135)))
 :weight 0
)) (forall (($generated@@136 T@T) ($generated@@137 T@T) ($generated@@138 T@T) ($generated@@139 T@U) ($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ) (!  (or (= $generated@@142 $generated@@144) (= ($generated@@112 $generated@@136 $generated@@137 $generated@@138 ($generated@@117 $generated@@136 $generated@@137 $generated@@138 $generated@@140 $generated@@141 $generated@@142 $generated@@139) $generated@@143 $generated@@144) ($generated@@112 $generated@@136 $generated@@137 $generated@@138 $generated@@140 $generated@@143 $generated@@144)))
 :weight 0
)))) (= ($generated@@5 $generated@@113) 5)) (= ($generated@@5 $generated@@114) 6)) (forall (($generated@@145 T@T) ($generated@@146 T@T) ) (= ($generated@@5 ($generated@@116 $generated@@145 $generated@@146)) 7))) (forall (($generated@@147 T@T) ($generated@@148 T@T) ) (! (= ($generated@@118 ($generated@@116 $generated@@147 $generated@@148)) $generated@@147)
 :pattern ( ($generated@@116 $generated@@147 $generated@@148))
))) (forall (($generated@@149 T@T) ($generated@@150 T@T) ) (! (= ($generated@@119 ($generated@@116 $generated@@149 $generated@@150)) $generated@@150)
 :pattern ( ($generated@@116 $generated@@149 $generated@@150))
))))
(assert (forall (($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 T@U) ($generated@@154 Bool) ($generated@@155 T@U) ($generated@@156 T@U) ) (! (= ($generated@@10 ($generated@@112 $generated@@113 $generated@@114 $generated@@6 ($generated@@115 $generated@@151 $generated@@152 $generated@@153 $generated@@154) $generated@@155 $generated@@156))  (=> (and (or (not (= $generated@@155 $generated@@151)) (not true)) ($generated@@10 ($generated@@46 $generated@@6 ($generated@@52 $generated@@114 $generated@@53 ($generated@@52 $generated@@113 ($generated@@116 $generated@@114 $generated@@53) $generated@@152 $generated@@155) $generated@@153)))) $generated@@154))
 :pattern ( ($generated@@112 $generated@@113 $generated@@114 $generated@@6 ($generated@@115 $generated@@151 $generated@@152 $generated@@153 $generated@@154) $generated@@155 $generated@@156))
)))
(assert (forall (($generated@@157 Int) ($generated@@158 Int) ) (! (= ($generated@@42 $generated@@157 $generated@@158) (mod $generated@@157 $generated@@158))
 :pattern ( ($generated@@42 $generated@@157 $generated@@158))
)))
(assert (forall (($generated@@159 T@U) ($generated@@160 T@U) ) (!  (=> ($generated@@68 $generated@@159 ($generated@@32 $generated@@160)) (and (= ($generated@@47 $generated@@31 ($generated@@46 $generated@@31 $generated@@159)) $generated@@159) ($generated@@30 $generated@@31 ($generated@@46 $generated@@31 $generated@@159) ($generated@@32 $generated@@160))))
 :pattern ( ($generated@@68 $generated@@159 ($generated@@32 $generated@@160)))
)))
(assert (= ($generated@@21 $generated@@23) $generated@@3))
(assert (= ($generated@@161 $generated@@23) $generated@@4))
(assert (forall (($generated@@162 Int) ) (! (= ($generated@@47 $generated@@7 ($generated@@11 ($generated@@29 $generated@@162))) ($generated@@35 $generated@@53 ($generated@@47 $generated@@7 ($generated@@11 $generated@@162))))
 :pattern ( ($generated@@47 $generated@@7 ($generated@@11 ($generated@@29 $generated@@162))))
)))
(assert (forall (($generated@@163 T@U) ($generated@@164 T@T) ) (! (= ($generated@@47 $generated@@164 ($generated@@35 $generated@@164 $generated@@163)) ($generated@@35 $generated@@53 ($generated@@47 $generated@@164 $generated@@163)))
 :pattern ( ($generated@@47 $generated@@164 ($generated@@35 $generated@@164 $generated@@163)))
)))
(assert (forall (($generated@@165 T@U) ($generated@@166 T@U) ) (! ($generated@@22 $generated@@7 $generated@@166 $generated $generated@@165)
 :pattern ( ($generated@@22 $generated@@7 $generated@@166 $generated $generated@@165))
)))
(assert (forall (($generated@@167 T@U) ) (! ($generated@@30 $generated@@7 $generated@@167 $generated)
 :pattern ( ($generated@@30 $generated@@7 $generated@@167 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@168 () Int)
(declare-fun $generated@@169 () Int)
(declare-fun $generated@@170 () T@U)
(declare-fun $generated@@171 () T@U)
(declare-fun $generated@@172 () T@U)
(declare-fun $generated@@173 (T@U) Bool)
(declare-fun $generated@@174 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 14) (let (($generated@@175  (=> (= (ControlFlow 0 4) (- 0 3)) ($generated@@30 $generated@@31 ($generated@@51 ($generated@@73 $generated ($generated@@29 0) $generated@@168 ($generated@@39 $generated@@72) $generated@@168)) ($generated@@32 $generated@@23)))))
(let (($generated@@176  (=> (and (not (and (and (<= ($generated@@29 0) $generated@@169) (< $generated@@169 $generated@@168)) ($generated@@38 ($generated@@39 $generated@@72) $generated@@169 $generated@@168))) (= (ControlFlow 0 6) 4)) $generated@@175)))
(let (($generated@@177  (=> (and (and (and (<= ($generated@@29 0) $generated@@169) (< $generated@@169 $generated@@168)) ($generated@@38 ($generated@@39 $generated@@72) $generated@@169 $generated@@168)) (= (ControlFlow 0 5) 4)) $generated@@175)))
(let (($generated@@178  (=> (not (and (<= ($generated@@29 0) $generated@@169) (< $generated@@169 $generated@@168))) (and (=> (= (ControlFlow 0 9) 5) $generated@@177) (=> (= (ControlFlow 0 9) 6) $generated@@176)))))
(let (($generated@@179  (=> (and (<= ($generated@@29 0) $generated@@169) (< $generated@@169 $generated@@168)) (and (=> (= (ControlFlow 0 7) (- 0 8)) ($generated@@30 $generated@@7 ($generated@@11 $generated@@169) $generated@@23)) (=> ($generated@@30 $generated@@7 ($generated@@11 $generated@@169) $generated@@23) (=> ($generated@@22 $generated@@7 ($generated@@11 $generated@@169) $generated@@23 $generated@@170) (=> (and ($generated@@22 $generated@@7 ($generated@@11 $generated@@168) $generated@@23 $generated@@170) ($generated@@40 $generated@@169 $generated@@168)) (and (=> (= (ControlFlow 0 7) 5) $generated@@177) (=> (= (ControlFlow 0 7) 6) $generated@@176)))))))))
(let (($generated@@180  (=> (< $generated@@169 ($generated@@29 0)) (and (=> (= (ControlFlow 0 11) 7) $generated@@179) (=> (= (ControlFlow 0 11) 9) $generated@@178)))))
(let (($generated@@181  (=> (<= ($generated@@29 0) $generated@@169) (and (=> (= (ControlFlow 0 10) 7) $generated@@179) (=> (= (ControlFlow 0 10) 9) $generated@@178)))))
(let (($generated@@182  (and (=> (= (ControlFlow 0 12) 10) $generated@@181) (=> (= (ControlFlow 0 12) 11) $generated@@180))))
(let (($generated@@183 true))
(let (($generated@@184 true))
(let (($generated@@185  (=> (= $generated@@171 ($generated@@115 $generated@@172 $generated@@170 $generated@@2 false)) (and (and (=> (= (ControlFlow 0 13) 1) $generated@@184) (=> (= (ControlFlow 0 13) 12) $generated@@182)) (=> (= (ControlFlow 0 13) 2) $generated@@183)))))
(let (($generated@@186  (=> (and (and (and ($generated@@173 $generated@@170) ($generated@@174 $generated@@170)) (<= ($generated@@29 0) $generated@@168)) (and (= 1 $generated@@26) (= (ControlFlow 0 14) 13))) $generated@@185)))
$generated@@186)))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
