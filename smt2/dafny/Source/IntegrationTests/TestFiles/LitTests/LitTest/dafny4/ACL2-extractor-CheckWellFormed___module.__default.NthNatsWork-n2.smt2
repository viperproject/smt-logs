(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._System.nat () T@U)
(declare-fun Tagclass._module.List () T@U)
(declare-fun |##_module.List.Nil| () T@U)
(declare-fun |##_module.List.Cons| () T@U)
(declare-fun tytagFamily$nat () T@U)
(declare-fun tytagFamily$List () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.nats (T@U Int) T@U)
(declare-fun $LS (T@U) T@U)
(declare-fun |_module.__default.nats#canCall| (Int) Bool)
(declare-fun LitInt (Int) Int)
(declare-fun |#_module.List.Nil| () T@U)
(declare-fun |#_module.List.Cons| (T@U T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass._System.nat () T@U)
(declare-fun _module.__default.length (T@U T@U T@U) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun DatatypeTypeType () T@T)
(declare-fun |_module.__default.length#canCall| (T@U T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun Tclass._module.List (T@U) T@U)
(declare-fun _module.List.Nil_q (T@U) Bool)
(declare-fun _module.List.tail (T@U) T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun _module.__default.nthWorker (T@U T@U Int T@U) T@U)
(declare-fun |_module.__default.nthWorker#canCall| (T@U Int T@U) Bool)
(declare-fun $LZ () T@U)
(declare-fun _module.List.head (T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun _module.List.Cons_q (T@U) Bool)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun TagFamily (T@U) T@U)
(declare-fun Tclass._module.List_0 (T@U) T@U)
(declare-fun BoxRank (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt alloc Tagclass._System.nat Tagclass._module.List |##_module.List.Nil| |##_module.List.Cons| tytagFamily$nat tytagFamily$List)
)
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($ly T@U) (|n#0| Int) ) (!  (=> (or (|_module.__default.nats#canCall| |n#0|) (and (< 1 $FunctionContextHeight) (<= (LitInt 0) |n#0|))) (and (=> (or (not (= |n#0| (LitInt 0))) (not true)) (|_module.__default.nats#canCall| (- |n#0| 1))) (= (_module.__default.nats ($LS $ly) |n#0|) (ite (= |n#0| (LitInt 0)) |#_module.List.Nil| (|#_module.List.Cons| ($Box intType (int_2_U (- |n#0| 1))) (_module.__default.nats $ly (- |n#0| 1)))))))
 :pattern ( (_module.__default.nats ($LS $ly) |n#0|))
))))
(assert (= (Tag TInt) TagInt))
(assert (forall ((|x#0| T@U) ($h T@U) ) (! ($IsAlloc intType |x#0| Tclass._System.nat $h)
 :pattern ( ($IsAlloc intType |x#0| Tclass._System.nat $h))
)))
(assert (= (Ctor DatatypeTypeType) 3))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module._default.length$_T0 T@U) ($ly@@0 T@U) (|xs#0| T@U) ) (!  (=> (or (|_module.__default.length#canCall| _module._default.length$_T0 (Lit DatatypeTypeType |xs#0|)) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |xs#0| (Tclass._module.List _module._default.length$_T0)))) (and (=> (not (U_2_bool (Lit boolType (bool_2_U (_module.List.Nil_q (Lit DatatypeTypeType |xs#0|)))))) (let ((|rest#3| (Lit DatatypeTypeType (_module.List.tail (Lit DatatypeTypeType |xs#0|)))))
(|_module.__default.length#canCall| _module._default.length$_T0 |rest#3|))) (= (_module.__default.length _module._default.length$_T0 ($LS $ly@@0) (Lit DatatypeTypeType |xs#0|)) (ite (_module.List.Nil_q (Lit DatatypeTypeType |xs#0|)) 0 (let ((|rest#2| (Lit DatatypeTypeType (_module.List.tail (Lit DatatypeTypeType |xs#0|)))))
(LitInt (+ 1 (_module.__default.length _module._default.length$_T0 ($LS $ly@@0) |rest#2|))))))))
 :weight 3
 :pattern ( (_module.__default.length _module._default.length$_T0 ($LS $ly@@0) (Lit DatatypeTypeType |xs#0|)))
))))
(assert (forall ((_module._default.length$_T0@@0 T@U) ($ly@@1 T@U) (|xs#0@@0| T@U) ) (! (= (_module.__default.length _module._default.length$_T0@@0 ($LS $ly@@1) |xs#0@@0|) (_module.__default.length _module._default.length$_T0@@0 $ly@@1 |xs#0@@0|))
 :pattern ( (_module.__default.length _module._default.length$_T0@@0 ($LS $ly@@1) |xs#0@@0|))
)))
(assert (= (DatatypeCtorId |#_module.List.Nil|) |##_module.List.Nil|))
(assert (forall ((_module.List$T T@U) ($h@@0 T@U) ) (!  (=> ($IsGoodHeap $h@@0) ($IsAlloc DatatypeTypeType |#_module.List.Nil| (Tclass._module.List _module.List$T) $h@@0))
 :pattern ( ($IsAlloc DatatypeTypeType |#_module.List.Nil| (Tclass._module.List _module.List$T) $h@@0))
)))
(assert (forall ((_module.List$T@@0 T@U) ) (! ($Is DatatypeTypeType |#_module.List.Nil| (Tclass._module.List _module.List$T@@0))
 :pattern ( ($Is DatatypeTypeType |#_module.List.Nil| (Tclass._module.List _module.List$T@@0)))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((_module._default.nthWorker$T T@U) ($ly@@2 T@U) (|n#0@@0| Int) (|xs#0@@1| T@U) ) (!  (=> (or (|_module.__default.nthWorker#canCall| _module._default.nthWorker$T |n#0@@0| |xs#0@@1|) (and (< 2 $FunctionContextHeight) (and ($Is DatatypeTypeType |xs#0@@1| (Tclass._module.List _module._default.nthWorker$T)) (and (<= (LitInt 0) |n#0@@0|) (< |n#0@@0| (_module.__default.length _module._default.nthWorker$T ($LS $LZ) |xs#0@@1|)))))) (and (=> (or (not (= |n#0@@0| (LitInt 0))) (not true)) (|_module.__default.nthWorker#canCall| _module._default.nthWorker$T (- |n#0@@0| 1) (_module.List.tail |xs#0@@1|))) (= (_module.__default.nthWorker _module._default.nthWorker$T ($LS $ly@@2) |n#0@@0| |xs#0@@1|) (ite (= |n#0@@0| (LitInt 0)) (_module.List.head |xs#0@@1|) (_module.__default.nthWorker _module._default.nthWorker$T $ly@@2 (- |n#0@@0| 1) (_module.List.tail |xs#0@@1|))))))
 :pattern ( (_module.__default.nthWorker _module._default.nthWorker$T ($LS $ly@@2) |n#0@@0| |xs#0@@1|))
))))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((_module.List$T@@1 T@U) (|a#6#0#0| T@U) (|a#6#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.List.Cons| |a#6#0#0| |a#6#1#0|) (Tclass._module.List _module.List$T@@1))  (and ($IsBox |a#6#0#0| _module.List$T@@1) ($Is DatatypeTypeType |a#6#1#0| (Tclass._module.List _module.List$T@@1))))
 :pattern ( ($Is DatatypeTypeType (|#_module.List.Cons| |a#6#0#0| |a#6#1#0|) (Tclass._module.List _module.List$T@@1)))
)))
(assert (forall ((d T@U) ) (! (= (_module.List.Nil_q d) (= (DatatypeCtorId d) |##_module.List.Nil|))
 :pattern ( (_module.List.Nil_q d))
)))
(assert (forall ((d@@0 T@U) ) (! (= (_module.List.Cons_q d@@0) (= (DatatypeCtorId d@@0) |##_module.List.Cons|))
 :pattern ( (_module.List.Cons_q d@@0))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((_module._default.nthWorker$T@@0 T@U) ($ly@@3 T@U) (|n#0@@1| Int) (|xs#0@@2| T@U) ) (!  (=> (or (|_module.__default.nthWorker#canCall| _module._default.nthWorker$T@@0 (LitInt |n#0@@1|) (Lit DatatypeTypeType |xs#0@@2|)) (and (< 2 $FunctionContextHeight) (and ($Is DatatypeTypeType |xs#0@@2| (Tclass._module.List _module._default.nthWorker$T@@0)) (and (<= (LitInt 0) (LitInt |n#0@@1|)) (< |n#0@@1| (_module.__default.length _module._default.nthWorker$T@@0 ($LS $LZ) (Lit DatatypeTypeType |xs#0@@2|))))))) (and (=> (or (not (= (LitInt |n#0@@1|) (LitInt 0))) (not true)) (|_module.__default.nthWorker#canCall| _module._default.nthWorker$T@@0 (LitInt (- |n#0@@1| 1)) (Lit DatatypeTypeType (_module.List.tail (Lit DatatypeTypeType |xs#0@@2|))))) (= (_module.__default.nthWorker _module._default.nthWorker$T@@0 ($LS $ly@@3) (LitInt |n#0@@1|) (Lit DatatypeTypeType |xs#0@@2|)) (ite (= (LitInt |n#0@@1|) (LitInt 0)) (_module.List.head (Lit DatatypeTypeType |xs#0@@2|)) (_module.__default.nthWorker _module._default.nthWorker$T@@0 ($LS $ly@@3) (LitInt (- |n#0@@1| 1)) (Lit DatatypeTypeType (_module.List.tail (Lit DatatypeTypeType |xs#0@@2|))))))))
 :weight 3
 :pattern ( (_module.__default.nthWorker _module._default.nthWorker$T@@0 ($LS $ly@@3) (LitInt |n#0@@1|) (Lit DatatypeTypeType |xs#0@@2|)))
))))
(assert (forall ((d@@1 T@U) ) (!  (=> (_module.List.Cons_q d@@1) (exists ((|a#5#0#0| T@U) (|a#5#1#0| T@U) ) (= d@@1 (|#_module.List.Cons| |a#5#0#0| |a#5#1#0|))))
 :pattern ( (_module.List.Cons_q d@@1))
)))
(assert (forall ((d@@2 T@U) ) (!  (=> (_module.List.Nil_q d@@2) (= d@@2 |#_module.List.Nil|))
 :pattern ( (_module.List.Nil_q d@@2))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($ly@@4 T@U) (|n#0@@2| Int) ) (!  (=> (or (|_module.__default.nats#canCall| (LitInt |n#0@@2|)) (and (< 1 $FunctionContextHeight) (<= (LitInt 0) |n#0@@2|))) (and (=> (or (not (= (LitInt |n#0@@2|) (LitInt 0))) (not true)) (|_module.__default.nats#canCall| (LitInt (- |n#0@@2| 1)))) (= (_module.__default.nats ($LS $ly@@4) (LitInt |n#0@@2|)) (ite (= (LitInt |n#0@@2|) (LitInt 0)) |#_module.List.Nil| (|#_module.List.Cons| ($Box intType (int_2_U (LitInt (- |n#0@@2| 1)))) (Lit DatatypeTypeType (_module.__default.nats ($LS $ly@@4) (LitInt (- |n#0@@2| 1)))))))))
 :weight 3
 :pattern ( (_module.__default.nats ($LS $ly@@4) (LitInt |n#0@@2|)))
))))
(assert (forall ((|x#0@@0| T@U) ) (! (= ($Is intType |x#0@@0| Tclass._System.nat) (<= (LitInt 0) (U_2_int |x#0@@0|)))
 :pattern ( ($Is intType |x#0@@0| Tclass._System.nat))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module._default.length$_T0@@1 T@U) ($ly@@5 T@U) (|xs#0@@3| T@U) ) (!  (=> (or (|_module.__default.length#canCall| _module._default.length$_T0@@1 |xs#0@@3|) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |xs#0@@3| (Tclass._module.List _module._default.length$_T0@@1)))) (and (=> (not (_module.List.Nil_q |xs#0@@3|)) (let ((|rest#1| (_module.List.tail |xs#0@@3|)))
(|_module.__default.length#canCall| _module._default.length$_T0@@1 |rest#1|))) (= (_module.__default.length _module._default.length$_T0@@1 ($LS $ly@@5) |xs#0@@3|) (ite (_module.List.Nil_q |xs#0@@3|) 0 (let ((|rest#0| (_module.List.tail |xs#0@@3|)))
(+ 1 (_module.__default.length _module._default.length$_T0@@1 $ly@@5 |rest#0|)))))))
 :pattern ( (_module.__default.length _module._default.length$_T0@@1 ($LS $ly@@5) |xs#0@@3|))
))))
(assert (forall ((v T@U) (t T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v) t h) ($IsAlloc T@@1 v t h))
 :pattern ( ($IsAllocBox ($Box T@@1 v) t h))
)))
(assert (forall ((_module.List$T@@2 T@U) ) (!  (and (= (Tag (Tclass._module.List _module.List$T@@2)) Tagclass._module.List) (= (TagFamily (Tclass._module.List _module.List$T@@2)) tytagFamily$List))
 :pattern ( (Tclass._module.List _module.List$T@@2))
)))
(assert (forall ((bx T@U) ) (!  (=> ($IsBox bx Tclass._System.nat) (and (= ($Box intType ($Unbox intType bx)) bx) ($Is intType ($Unbox intType bx) Tclass._System.nat)))
 :pattern ( ($IsBox bx Tclass._System.nat))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($ly@@6 T@U) (|n#0@@3| Int) ) (!  (=> (or (|_module.__default.nats#canCall| |n#0@@3|) (and (< 1 $FunctionContextHeight) (<= (LitInt 0) |n#0@@3|))) ($Is DatatypeTypeType (_module.__default.nats $ly@@6 |n#0@@3|) (Tclass._module.List TInt)))
 :pattern ( (_module.__default.nats $ly@@6 |n#0@@3|))
))))
(assert (forall ((_module.List$T@@3 T@U) (d@@3 T@U) ) (!  (=> ($Is DatatypeTypeType d@@3 (Tclass._module.List _module.List$T@@3)) (or (_module.List.Nil_q d@@3) (_module.List.Cons_q d@@3)))
 :pattern ( (_module.List.Cons_q d@@3) ($Is DatatypeTypeType d@@3 (Tclass._module.List _module.List$T@@3)))
 :pattern ( (_module.List.Nil_q d@@3) ($Is DatatypeTypeType d@@3 (Tclass._module.List _module.List$T@@3)))
)))
(assert (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 TInt) (and (= ($Box intType ($Unbox intType bx@@0)) bx@@0) ($Is intType ($Unbox intType bx@@0) TInt)))
 :pattern ( ($IsBox bx@@0 TInt))
)))
(assert (forall ((v@@0 T@U) (t@@0 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@0) t@@0) ($Is T@@2 v@@0 t@@0))
 :pattern ( ($IsBox ($Box T@@2 v@@0) t@@0))
)))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| T@U) ) (! (= (DatatypeCtorId (|#_module.List.Cons| |a#4#0#0| |a#4#1#0|)) |##_module.List.Cons|)
 :pattern ( (|#_module.List.Cons| |a#4#0#0| |a#4#1#0|))
)))
(assert (forall ((|a#8#0#0| T@U) (|a#8#1#0| T@U) ) (! (= (_module.List.head (|#_module.List.Cons| |a#8#0#0| |a#8#1#0|)) |a#8#0#0|)
 :pattern ( (|#_module.List.Cons| |a#8#0#0| |a#8#1#0|))
)))
(assert (forall ((|a#10#0#0| T@U) (|a#10#1#0| T@U) ) (! (= (_module.List.tail (|#_module.List.Cons| |a#10#0#0| |a#10#1#0|)) |a#10#1#0|)
 :pattern ( (|#_module.List.Cons| |a#10#0#0| |a#10#1#0|))
)))
(assert (forall ((_module.List$T@@4 T@U) ) (! (= (Tclass._module.List_0 (Tclass._module.List _module.List$T@@4)) _module.List$T@@4)
 :pattern ( (Tclass._module.List _module.List$T@@4))
)))
(assert (forall ((x@@5 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@5)) x@@5)
 :pattern ( ($Box T@@3 x@@5))
)))
(assert (forall ((|a#9#0#0| T@U) (|a#9#1#0| T@U) ) (! (< (BoxRank |a#9#0#0|) (DtRank (|#_module.List.Cons| |a#9#0#0| |a#9#1#0|)))
 :pattern ( (|#_module.List.Cons| |a#9#0#0| |a#9#1#0|))
)))
(assert (forall ((|a#11#0#0| T@U) (|a#11#1#0| T@U) ) (! (< (DtRank |a#11#1#0|) (DtRank (|#_module.List.Cons| |a#11#0#0| |a#11#1#0|)))
 :pattern ( (|#_module.List.Cons| |a#11#0#0| |a#11#1#0|))
)))
(assert (forall (($ly@@7 T@U) (|n#0@@4| Int) ) (! (= (_module.__default.nats ($LS $ly@@7) |n#0@@4|) (_module.__default.nats $ly@@7 |n#0@@4|))
 :pattern ( (_module.__default.nats ($LS $ly@@7) |n#0@@4|))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($Heap T@U) (_module._default.nthWorker$T@@1 T@U) ($ly@@8 T@U) (|n#0@@5| Int) (|xs#0@@4| T@U) ) (!  (=> (and (or (|_module.__default.nthWorker#canCall| _module._default.nthWorker$T@@1 |n#0@@5| |xs#0@@4|) (and (< 2 $FunctionContextHeight) (and (and ($Is DatatypeTypeType |xs#0@@4| (Tclass._module.List _module._default.nthWorker$T@@1)) ($IsAlloc DatatypeTypeType |xs#0@@4| (Tclass._module.List _module._default.nthWorker$T@@1) $Heap)) (and (<= (LitInt 0) |n#0@@5|) (< |n#0@@5| (_module.__default.length _module._default.nthWorker$T@@1 ($LS $LZ) |xs#0@@4|)))))) ($IsGoodHeap $Heap)) ($IsAllocBox (_module.__default.nthWorker _module._default.nthWorker$T@@1 $ly@@8 |n#0@@5| |xs#0@@4|) _module._default.nthWorker$T@@1 $Heap))
 :pattern ( ($IsAllocBox (_module.__default.nthWorker _module._default.nthWorker$T@@1 $ly@@8 |n#0@@5| |xs#0@@4|) _module._default.nthWorker$T@@1 $Heap))
))))
(assert (forall ((d@@4 T@U) (_module.List$T@@5 T@U) ($h@@1 T@U) ) (!  (=> (and ($IsGoodHeap $h@@1) (and (_module.List.Cons_q d@@4) ($IsAlloc DatatypeTypeType d@@4 (Tclass._module.List _module.List$T@@5) $h@@1))) ($IsAllocBox (_module.List.head d@@4) _module.List$T@@5 $h@@1))
 :pattern ( ($IsAllocBox (_module.List.head d@@4) _module.List$T@@5 $h@@1))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0 t1 t2 (MapType0Store t0 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 4)) (= (Ctor FieldType) 5)) (forall ((t0@@0 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 (MapType1Store t0@@0 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :weight 0
))) (= (Ctor BoxType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((d@@5 T@U) ) (! (= (BoxRank ($Box DatatypeTypeType d@@5)) (DtRank d@@5))
 :pattern ( (BoxRank ($Box DatatypeTypeType d@@5)))
)))
(assert (forall ((_module._default.nthWorker$T@@2 T@U) ($ly@@9 T@U) (|n#0@@6| Int) (|xs#0@@5| T@U) ) (! (= (_module.__default.nthWorker _module._default.nthWorker$T@@2 ($LS $ly@@9) |n#0@@6| |xs#0@@5|) (_module.__default.nthWorker _module._default.nthWorker$T@@2 $ly@@9 |n#0@@6| |xs#0@@5|))
 :pattern ( (_module.__default.nthWorker _module._default.nthWorker$T@@2 ($LS $ly@@9) |n#0@@6| |xs#0@@5|))
)))
(assert (forall ((_module.List$T@@6 T@U) (bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 (Tclass._module.List _module.List$T@@6)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@1)) bx@@1) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@1) (Tclass._module.List _module.List$T@@6))))
 :pattern ( ($IsBox bx@@1 (Tclass._module.List _module.List$T@@6)))
)))
(assert (forall ((d@@6 T@U) (_module.List$T@@7 T@U) ($h@@2 T@U) ) (!  (=> (and ($IsGoodHeap $h@@2) (and (_module.List.Cons_q d@@6) ($IsAlloc DatatypeTypeType d@@6 (Tclass._module.List _module.List$T@@7) $h@@2))) ($IsAlloc DatatypeTypeType (_module.List.tail d@@6) (Tclass._module.List _module.List$T@@7) $h@@2))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.List.tail d@@6) (Tclass._module.List _module.List$T@@7) $h@@2))
)))
(assert (= (Tag Tclass._System.nat) Tagclass._System.nat))
(assert (= (TagFamily Tclass._System.nat) tytagFamily$nat))
(assert (= |#_module.List.Nil| (Lit DatatypeTypeType |#_module.List.Nil|)))
(assert (forall ((|a#7#0#0| T@U) (|a#7#1#0| T@U) ) (! (= (|#_module.List.Cons| (Lit BoxType |a#7#0#0|) (Lit DatatypeTypeType |a#7#1#0|)) (Lit DatatypeTypeType (|#_module.List.Cons| |a#7#0#0| |a#7#1#0|)))
 :pattern ( (|#_module.List.Cons| (Lit BoxType |a#7#0#0|) (Lit DatatypeTypeType |a#7#1#0|)))
)))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((x@@7 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@7)) (Lit BoxType ($Box T@@4 x@@7)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@7)))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module._default.length$_T0@@2 T@U) ($ly@@10 T@U) (|xs#0@@6| T@U) ) (!  (=> (or (|_module.__default.length#canCall| _module._default.length$_T0@@2 |xs#0@@6|) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |xs#0@@6| (Tclass._module.List _module._default.length$_T0@@2)))) (<= (LitInt 0) (_module.__default.length _module._default.length$_T0@@2 $ly@@10 |xs#0@@6|)))
 :pattern ( (_module.__default.length _module._default.length$_T0@@2 $ly@@10 |xs#0@@6|))
))))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((_module._default.nthWorker$T@@3 T@U) ($ly@@11 T@U) (|n#0@@7| Int) (|xs#0@@7| T@U) ) (!  (=> (or (|_module.__default.nthWorker#canCall| _module._default.nthWorker$T@@3 |n#0@@7| |xs#0@@7|) (and (< 2 $FunctionContextHeight) (and ($Is DatatypeTypeType |xs#0@@7| (Tclass._module.List _module._default.nthWorker$T@@3)) (and (<= (LitInt 0) |n#0@@7|) (< |n#0@@7| (_module.__default.length _module._default.nthWorker$T@@3 ($LS $LZ) |xs#0@@7|)))))) ($IsBox (_module.__default.nthWorker _module._default.nthWorker$T@@3 $ly@@11 |n#0@@7| |xs#0@@7|) _module._default.nthWorker$T@@3))
 :pattern ( (_module.__default.nthWorker _module._default.nthWorker$T@@3 $ly@@11 |n#0@@7| |xs#0@@7|))
))))
(assert (forall ((h@@0 T@U) (v@@1 T@U) ) (! ($IsAlloc intType v@@1 TInt h@@0)
 :pattern ( ($IsAlloc intType v@@1 TInt h@@0))
)))
(assert (forall ((_module.List$T@@8 T@U) (|a#6#0#0@@0| T@U) (|a#6#1#0@@0| T@U) ($h@@3 T@U) ) (!  (=> ($IsGoodHeap $h@@3) (= ($IsAlloc DatatypeTypeType (|#_module.List.Cons| |a#6#0#0@@0| |a#6#1#0@@0|) (Tclass._module.List _module.List$T@@8) $h@@3)  (and ($IsAllocBox |a#6#0#0@@0| _module.List$T@@8 $h@@3) ($IsAlloc DatatypeTypeType |a#6#1#0@@0| (Tclass._module.List _module.List$T@@8) $h@@3))))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_module.List.Cons| |a#6#0#0@@0| |a#6#1#0@@0|) (Tclass._module.List _module.List$T@@8) $h@@3))
)))
(assert (forall ((v@@2 T@U) ) (! ($Is intType v@@2 TInt)
 :pattern ( ($Is intType v@@2 TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |i#0| () Int)
(declare-fun |n#0@@8| () Int)
(declare-fun $Heap@@0 () T@U)
(declare-fun |##xs#0@0| () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |##xs#1@0| () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun null () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 7) (let ((anon3_correct  (=> (and (and (and (and (<= (LitInt 0) |i#0|) (< |i#0| |n#0@@8|)) (and ($IsAlloc intType (int_2_U |n#0@@8|) Tclass._System.nat $Heap@@0) (|_module.__default.nats#canCall| |n#0@@8|))) (and (and (= |##xs#0@0| (_module.__default.nats ($LS $LZ) |n#0@@8|)) ($IsAlloc DatatypeTypeType |##xs#0@0| (Tclass._module.List TInt) $Heap@@0)) (and (|_module.__default.length#canCall| TInt (_module.__default.nats ($LS $LZ) |n#0@@8|)) (= (_module.__default.length TInt ($LS $LZ) (_module.__default.nats ($LS $LZ) |n#0@@8|)) |n#0@@8|)))) (and (and (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (and (= $Heap@@0 $Heap@0) ($IsAlloc intType (int_2_U |i#0|) TInt $Heap@0))) (and (and ($IsAlloc intType (int_2_U |n#0@@8|) Tclass._System.nat $Heap@0) (|_module.__default.nats#canCall| |n#0@@8|)) (and (= |##xs#1@0| (_module.__default.nats ($LS $LZ) |n#0@@8|)) ($IsAlloc DatatypeTypeType |##xs#1@0| (Tclass._module.List TInt) $Heap@0))))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (<= (LitInt 0) |i#0|)) (=> (= (ControlFlow 0 2) (- 0 1)) (< |i#0| (_module.__default.length TInt ($LS ($LS $LZ)) |##xs#1@0|)))))))
(let ((anon4_Else_correct  (=> (and (< |i#0| (LitInt 0)) (= (ControlFlow 0 5) 2)) anon3_correct)))
(let ((anon4_Then_correct  (=> (and (<= (LitInt 0) |i#0|) (= (ControlFlow 0 4) 2)) anon3_correct)))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap@@0 alloc false)) (and (=> (= (ControlFlow 0 6) 4) anon4_Then_correct) (=> (= (ControlFlow 0 6) 5) anon4_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (and ($IsGoodHeap $Heap@@0) ($IsHeapAnchor $Heap@@0)) (<= (LitInt 0) |n#0@@8|)) (and (= 3 $FunctionContextHeight) (= (ControlFlow 0 7) 6))) anon0_correct)))
PreconditionGeneratedEntry_correct))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
