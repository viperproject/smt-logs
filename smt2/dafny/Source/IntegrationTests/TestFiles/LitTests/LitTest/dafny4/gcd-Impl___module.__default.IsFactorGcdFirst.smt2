(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 (T@U T@U) Bool)
(declare-fun $generated@@20 () T@U)
(declare-fun $generated@@22 () Int)
(declare-fun $generated@@23 (Int Int) Bool)
(declare-fun $generated@@24 (Int) Int)
(declare-fun $generated@@25 (Int Int) Bool)
(declare-fun $generated@@26 (Int Int) Int)
(declare-fun $generated@@30 (T@U T@U) T@U)
(declare-fun $generated@@36 (Bool Int Int) Int)
(declare-fun $generated@@37 (Int Int) Bool)
(declare-fun $generated@@41 (Int) T@U)
(declare-fun $generated@@42 (Int) Bool)
(declare-fun $generated@@43 (T@T T@U T@U) Bool)
(declare-fun $generated@@44 () T@T)
(declare-fun $generated@@45 (T@U) T@U)
(declare-fun $generated@@46 () T@U)
(declare-fun $generated@@49 (T@T T@U) T@U)
(declare-fun $generated@@52 (T@U) Bool)
(declare-fun $generated@@53 (T@U) Int)
(declare-fun $generated@@58 (T@U) T@U)
(declare-fun $generated@@59 (T@U Int Int) T@U)
(declare-fun $generated@@62 (T@T T@U) T@U)
(declare-fun $generated@@63 (T@T T@U) T@U)
(declare-fun $generated@@66 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@67 () T@T)
(declare-fun $generated@@68 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@82 (T@U T@U) Bool)
(declare-fun $generated@@90 (T@U) Bool)
(declare-fun $generated@@91 (T@U T@U) Bool)
(declare-fun $generated@@92 (T@U) Bool)
(declare-fun $generated@@93 (T@U) Int)
(declare-fun $generated@@113 (T@U) T@U)
(declare-fun $generated@@115 (T@U) T@U)
(declare-fun $generated@@124 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@125 () T@T)
(declare-fun $generated@@126 () T@T)
(declare-fun $generated@@127 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@128 (T@T T@T) T@T)
(declare-fun $generated@@129 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@130 (T@T) T@T)
(declare-fun $generated@@131 (T@T) T@T)
(declare-fun $generated@@173 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (forall (($generated@@21 T@U) ) (!  (not ($generated@@19 $generated@@20 $generated@@21))
 :pattern ( ($generated@@19 $generated@@20 $generated@@21))
)))
(assert  (=> (<= 1 $generated@@22) (forall (($generated@@27 Int) ($generated@@28 Int) ) (!  (=> (or ($generated@@25 ($generated@@24 $generated@@27) ($generated@@24 $generated@@28)) (and (< 1 $generated@@22) (and (<= ($generated@@24 1) $generated@@27) (<= ($generated@@24 1) $generated@@28)))) (= ($generated@@23 ($generated@@24 $generated@@27) ($generated@@24 $generated@@28)) (exists (($generated@@29 Int) ) (! (= ($generated@@26 ($generated@@24 $generated@@27) $generated@@29) ($generated@@24 $generated@@28))
 :pattern ( ($generated@@26 $generated@@27 $generated@@29))
))))
 :weight 3
 :pattern ( ($generated@@23 ($generated@@24 $generated@@27) ($generated@@24 $generated@@28)))
))))
(assert (forall (($generated@@31 T@U) ($generated@@32 T@U) ($generated@@33 T@U) ) (! (= ($generated@@19 ($generated@@30 $generated@@31 $generated@@32) $generated@@33)  (and ($generated@@19 $generated@@31 $generated@@33) ($generated@@19 $generated@@32 $generated@@33)))
 :pattern ( ($generated@@19 ($generated@@30 $generated@@31 $generated@@32) $generated@@33))
)))
(assert (forall (($generated@@34 T@U) ($generated@@35 T@U) ) (! (= ($generated@@30 ($generated@@30 $generated@@34 $generated@@35) $generated@@35) ($generated@@30 $generated@@34 $generated@@35))
 :pattern ( ($generated@@30 ($generated@@30 $generated@@34 $generated@@35) $generated@@35))
)))
(assert  (=> (<= 4 $generated@@22) (forall (($generated@@38 Bool) ($generated@@39 Int) ($generated@@40 Int) ) (!  (=> (or ($generated@@37 $generated@@39 $generated@@40) (and (< 4 $generated@@22) (and (<= ($generated@@24 1) $generated@@39) (<= ($generated@@24 1) $generated@@40)))) (<= ($generated@@24 1) ($generated@@36 $generated@@38 $generated@@39 $generated@@40)))
 :pattern ( ($generated@@36 $generated@@38 $generated@@39 $generated@@40))
))))
(assert (= ($generated@@3 $generated@@44) 3))
(assert  (=> (<= 2 $generated@@22) (forall (($generated@@47 Int) ) (!  (=> (or ($generated@@42 $generated@@47) (and (< 2 $generated@@22) (<= ($generated@@24 1) $generated@@47))) ($generated@@43 $generated@@44 ($generated@@41 $generated@@47) ($generated@@45 $generated@@46)))
 :pattern ( ($generated@@41 $generated@@47))
))))
(assert (forall (($generated@@48 Int) ) (! (= ($generated@@24 $generated@@48) $generated@@48)
 :pattern ( ($generated@@24 $generated@@48))
)))
(assert (forall (($generated@@50 T@U) ($generated@@51 T@T) ) (! (= ($generated@@49 $generated@@51 $generated@@50) $generated@@50)
 :pattern ( ($generated@@49 $generated@@51 $generated@@50))
)))
(assert  (=> (<= 4 $generated@@22) (forall (($generated@@54 Int) ($generated@@55 Int) ) (!  (=> (or ($generated@@37 $generated@@54 $generated@@55) (and (< 4 $generated@@22) (and (<= ($generated@@24 1) $generated@@54) (<= ($generated@@24 1) $generated@@55)))) (and (and (and ($generated@@42 $generated@@54) ($generated@@42 $generated@@55)) (let (($generated@@56 ($generated@@30 ($generated@@41 $generated@@54) ($generated@@41 $generated@@55))))
($generated@@52 $generated@@56))) (= ($generated@@36 true $generated@@54 $generated@@55) (let (($generated@@57 ($generated@@30 ($generated@@41 $generated@@54) ($generated@@41 $generated@@55))))
($generated@@53 $generated@@57)))))
 :pattern ( ($generated@@36 true $generated@@54 $generated@@55))
))))
(assert  (=> (<= 2 $generated@@22) (forall (($generated@@60 Int) ) (!  (=> (or ($generated@@42 ($generated@@24 $generated@@60)) (and (< 2 $generated@@22) (<= ($generated@@24 1) $generated@@60))) (and (forall (($generated@@61 Int) ) (!  (=> (<= ($generated@@24 1) $generated@@61) (=> (<= $generated@@61 ($generated@@24 $generated@@60)) ($generated@@25 $generated@@61 ($generated@@24 $generated@@60))))
 :pattern ( ($generated@@23 $generated@@61 $generated@@60))
)) (= ($generated@@41 ($generated@@24 $generated@@60)) ($generated@@58 ($generated@@59 $generated@@46 ($generated@@24 $generated@@60) ($generated@@24 $generated@@60))))))
 :weight 3
 :pattern ( ($generated@@41 ($generated@@24 $generated@@60)))
))))
(assert (forall (($generated@@64 T@U) ($generated@@65 T@T) ) (! (= ($generated@@63 $generated@@65 ($generated@@62 $generated@@65 $generated@@64)) $generated@@64)
 :pattern ( ($generated@@62 $generated@@65 $generated@@64))
)))
(assert  (and (and (forall (($generated@@69 T@T) ($generated@@70 T@T) ($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ) (! (= ($generated@@66 $generated@@69 $generated@@70 ($generated@@68 $generated@@69 $generated@@70 $generated@@72 $generated@@73 $generated@@71) $generated@@73) $generated@@71)
 :weight 0
)) (forall (($generated@@74 T@T) ($generated@@75 T@T) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ) (!  (or (= $generated@@78 $generated@@79) (= ($generated@@66 $generated@@74 $generated@@75 ($generated@@68 $generated@@74 $generated@@75 $generated@@77 $generated@@78 $generated@@76) $generated@@79) ($generated@@66 $generated@@74 $generated@@75 $generated@@77 $generated@@79)))
 :weight 0
))) (= ($generated@@3 $generated@@67) 4)))
(assert (forall (($generated@@80 T@U) ($generated@@81 T@U) ) (! (= ($generated@@19 ($generated@@58 $generated@@80) $generated@@81) ($generated@@8 ($generated@@66 $generated@@67 $generated@@4 $generated@@80 $generated@@81)))
 :pattern ( ($generated@@19 ($generated@@58 $generated@@80) $generated@@81))
)))
(assert (forall (($generated@@83 T@U) ($generated@@84 T@U) ) (! (= ($generated@@43 $generated@@44 $generated@@83 ($generated@@45 $generated@@84)) (forall (($generated@@85 T@U) ) (!  (=> ($generated@@19 $generated@@83 $generated@@85) ($generated@@82 $generated@@85 $generated@@84))
 :pattern ( ($generated@@19 $generated@@83 $generated@@85))
)))
 :pattern ( ($generated@@43 $generated@@44 $generated@@83 ($generated@@45 $generated@@84)))
)))
(assert  (=> (<= 1 $generated@@22) (forall (($generated@@86 Int) ($generated@@87 Int) ) (!  (=> (or ($generated@@25 $generated@@86 $generated@@87) (and (< 1 $generated@@22) (and (<= ($generated@@24 1) $generated@@86) (<= ($generated@@24 1) $generated@@87)))) (= ($generated@@23 $generated@@86 $generated@@87) (exists (($generated@@88 Int) ) (! (= ($generated@@26 $generated@@86 $generated@@88) $generated@@87)
 :pattern ( ($generated@@26 $generated@@86 $generated@@88))
))))
 :pattern ( ($generated@@23 $generated@@86 $generated@@87))
))))
(assert (forall (($generated@@89 T@U) ) (! (= ($generated@@43 $generated@@5 $generated@@89 $generated@@46) (<= ($generated@@24 1) ($generated@@10 $generated@@89)))
 :pattern ( ($generated@@43 $generated@@5 $generated@@89 $generated@@46))
)))
(assert  (=> (<= 3 $generated@@22) (forall (($generated@@94 T@U) ($generated@@95 T@U) ) (!  (=> (or ($generated@@52 $generated@@95) (and (< 3 $generated@@22) (and (and ($generated@@90 $generated@@94) ($generated@@43 $generated@@44 $generated@@95 ($generated@@45 $generated@@46))) (not ($generated@@91 $generated@@95 $generated@@20))))) (and ($generated@@92 $generated@@95) (= ($generated@@53 $generated@@95) (let (($generated@@96 ($generated@@93 $generated@@95)))
$generated@@96))))
 :pattern ( ($generated@@53 $generated@@95) ($generated@@90 $generated@@94))
))))
(assert (forall (($generated@@97 T@U) ) (!  (=> ($generated@@82 $generated@@97 $generated@@46) (and (= ($generated@@63 $generated@@5 ($generated@@62 $generated@@5 $generated@@97)) $generated@@97) ($generated@@43 $generated@@5 ($generated@@62 $generated@@5 $generated@@97) $generated@@46)))
 :pattern ( ($generated@@82 $generated@@97 $generated@@46))
)))
(assert (forall (($generated@@98 T@U) ($generated@@99 T@U) ) (!  (=> ($generated@@91 $generated@@98 $generated@@99) (= $generated@@98 $generated@@99))
 :pattern ( ($generated@@91 $generated@@98 $generated@@99))
)))
(assert (forall (($generated@@100 T@U) ($generated@@101 Int) ($generated@@102 Int) ($generated@@103 T@U) ) (! (= ($generated@@8 ($generated@@66 $generated@@67 $generated@@4 ($generated@@59 $generated@@100 $generated@@101 $generated@@102) $generated@@103))  (and ($generated@@82 $generated@@103 $generated@@100) (and (<= ($generated@@10 ($generated@@62 $generated@@5 $generated@@103)) $generated@@101) ($generated@@23 ($generated@@10 ($generated@@62 $generated@@5 $generated@@103)) $generated@@102))))
 :pattern ( ($generated@@66 $generated@@67 $generated@@4 ($generated@@59 $generated@@100 $generated@@101 $generated@@102) $generated@@103))
)))
(assert  (=> (<= 4 $generated@@22) (forall (($generated@@104 Int) ($generated@@105 Int) ) (!  (=> (or ($generated@@37 ($generated@@24 $generated@@104) ($generated@@24 $generated@@105)) (and (< 4 $generated@@22) (and (<= ($generated@@24 1) $generated@@104) (<= ($generated@@24 1) $generated@@105)))) (and (and (and ($generated@@42 ($generated@@24 $generated@@104)) ($generated@@42 ($generated@@24 $generated@@105))) (let (($generated@@106 ($generated@@30 ($generated@@41 ($generated@@24 $generated@@104)) ($generated@@41 ($generated@@24 $generated@@105)))))
($generated@@52 $generated@@106))) (= ($generated@@36 true ($generated@@24 $generated@@104) ($generated@@24 $generated@@105)) (let (($generated@@107 ($generated@@30 ($generated@@41 ($generated@@24 $generated@@104)) ($generated@@41 ($generated@@24 $generated@@105)))))
($generated@@53 $generated@@107)))))
 :weight 3
 :pattern ( ($generated@@36 true ($generated@@24 $generated@@104) ($generated@@24 $generated@@105)))
))))
(assert (forall (($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@T) ) (! (= ($generated@@82 ($generated@@63 $generated@@110 $generated@@108) $generated@@109) ($generated@@43 $generated@@110 $generated@@108 $generated@@109))
 :pattern ( ($generated@@82 ($generated@@63 $generated@@110 $generated@@108) $generated@@109))
)))
(assert (forall (($generated@@111 T@U) ) (!  (=> ($generated@@92 $generated@@111) (and ($generated@@19 $generated@@111 ($generated@@63 $generated@@5 ($generated@@9 ($generated@@93 $generated@@111)))) (forall (($generated@@112 T@U) ) (!  (=> ($generated@@19 $generated@@111 ($generated@@63 $generated@@5 $generated@@112)) (<= ($generated@@10 $generated@@112) ($generated@@93 $generated@@111)))
 :pattern ( ($generated@@19 $generated@@111 ($generated@@63 $generated@@5 $generated@@112)))
))))
 :pattern ( ($generated@@93 $generated@@111))
)))
(assert (forall (($generated@@114 T@U) ) (! (= ($generated@@113 ($generated@@45 $generated@@114)) $generated@@114)
 :pattern ( ($generated@@45 $generated@@114))
)))
(assert (forall (($generated@@116 T@U) ) (! (= ($generated@@115 ($generated@@45 $generated@@116)) $generated)
 :pattern ( ($generated@@45 $generated@@116))
)))
(assert (forall (($generated@@117 T@U) ($generated@@118 T@T) ) (! (= ($generated@@62 $generated@@118 ($generated@@63 $generated@@118 $generated@@117)) $generated@@117)
 :pattern ( ($generated@@63 $generated@@118 $generated@@117))
)))
(assert  (=> (<= 3 $generated@@22) (forall (($generated@@119 T@U) ($generated@@120 T@U) ) (!  (=> (or ($generated@@52 ($generated@@49 $generated@@44 $generated@@120)) (and (< 3 $generated@@22) (and (and ($generated@@90 $generated@@119) ($generated@@43 $generated@@44 $generated@@120 ($generated@@45 $generated@@46))) (not ($generated@@91 $generated@@120 $generated@@20))))) (and ($generated@@92 ($generated@@49 $generated@@44 $generated@@120)) (= ($generated@@53 ($generated@@49 $generated@@44 $generated@@120)) (let (($generated@@121 ($generated@@93 ($generated@@49 $generated@@44 $generated@@120))))
$generated@@121))))
 :weight 3
 :pattern ( ($generated@@53 ($generated@@49 $generated@@44 $generated@@120)) ($generated@@90 $generated@@119))
))))
(assert (forall (($generated@@122 T@U) ($generated@@123 T@U) ) (! (= ($generated@@30 $generated@@122 ($generated@@30 $generated@@122 $generated@@123)) ($generated@@30 $generated@@122 $generated@@123))
 :pattern ( ($generated@@30 $generated@@122 ($generated@@30 $generated@@122 $generated@@123)))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@132 T@T) ($generated@@133 T@T) ($generated@@134 T@T) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ) (! (= ($generated@@124 $generated@@132 $generated@@133 $generated@@134 ($generated@@129 $generated@@132 $generated@@133 $generated@@134 $generated@@136 $generated@@137 $generated@@138 $generated@@135) $generated@@137 $generated@@138) $generated@@135)
 :weight 0
)) (and (forall (($generated@@139 T@T) ($generated@@140 T@T) ($generated@@141 T@T) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 T@U) ) (!  (or (= $generated@@144 $generated@@146) (= ($generated@@124 $generated@@139 $generated@@140 $generated@@141 ($generated@@129 $generated@@139 $generated@@140 $generated@@141 $generated@@143 $generated@@144 $generated@@145 $generated@@142) $generated@@146 $generated@@147) ($generated@@124 $generated@@139 $generated@@140 $generated@@141 $generated@@143 $generated@@146 $generated@@147)))
 :weight 0
)) (forall (($generated@@148 T@T) ($generated@@149 T@T) ($generated@@150 T@T) ($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 T@U) ($generated@@154 T@U) ($generated@@155 T@U) ($generated@@156 T@U) ) (!  (or (= $generated@@154 $generated@@156) (= ($generated@@124 $generated@@148 $generated@@149 $generated@@150 ($generated@@129 $generated@@148 $generated@@149 $generated@@150 $generated@@152 $generated@@153 $generated@@154 $generated@@151) $generated@@155 $generated@@156) ($generated@@124 $generated@@148 $generated@@149 $generated@@150 $generated@@152 $generated@@155 $generated@@156)))
 :weight 0
)))) (= ($generated@@3 $generated@@125) 5)) (= ($generated@@3 $generated@@126) 6)) (forall (($generated@@157 T@T) ($generated@@158 T@T) ) (= ($generated@@3 ($generated@@128 $generated@@157 $generated@@158)) 7))) (forall (($generated@@159 T@T) ($generated@@160 T@T) ) (! (= ($generated@@130 ($generated@@128 $generated@@159 $generated@@160)) $generated@@159)
 :pattern ( ($generated@@128 $generated@@159 $generated@@160))
))) (forall (($generated@@161 T@T) ($generated@@162 T@T) ) (! (= ($generated@@131 ($generated@@128 $generated@@161 $generated@@162)) $generated@@162)
 :pattern ( ($generated@@128 $generated@@161 $generated@@162))
))))
(assert (forall (($generated@@163 T@U) ($generated@@164 T@U) ($generated@@165 T@U) ($generated@@166 Bool) ($generated@@167 T@U) ($generated@@168 T@U) ) (! (= ($generated@@8 ($generated@@124 $generated@@125 $generated@@126 $generated@@4 ($generated@@127 $generated@@163 $generated@@164 $generated@@165 $generated@@166) $generated@@167 $generated@@168))  (=> (and (or (not (= $generated@@167 $generated@@163)) (not true)) ($generated@@8 ($generated@@62 $generated@@4 ($generated@@66 $generated@@126 $generated@@67 ($generated@@66 $generated@@125 ($generated@@128 $generated@@126 $generated@@67) $generated@@164 $generated@@167) $generated@@165)))) $generated@@166))
 :pattern ( ($generated@@124 $generated@@125 $generated@@126 $generated@@4 ($generated@@127 $generated@@163 $generated@@164 $generated@@165 $generated@@166) $generated@@167 $generated@@168))
)))
(assert (forall (($generated@@169 Int) ($generated@@170 Int) ) (! (= ($generated@@26 $generated@@169 $generated@@170) (* $generated@@169 $generated@@170))
 :pattern ( ($generated@@26 $generated@@169 $generated@@170))
)))
(assert (forall (($generated@@171 T@U) ($generated@@172 T@U) ) (!  (=> ($generated@@82 $generated@@171 ($generated@@45 $generated@@172)) (and (= ($generated@@63 $generated@@44 ($generated@@62 $generated@@44 $generated@@171)) $generated@@171) ($generated@@43 $generated@@44 ($generated@@62 $generated@@44 $generated@@171) ($generated@@45 $generated@@172))))
 :pattern ( ($generated@@82 $generated@@171 ($generated@@45 $generated@@172)))
)))
(assert (= ($generated@@115 $generated@@46) $generated@@1))
(assert (= ($generated@@173 $generated@@46) $generated@@2))
(assert (forall (($generated@@174 T@U) ($generated@@175 T@U) ) (! (= ($generated@@91 $generated@@174 $generated@@175) (forall (($generated@@176 T@U) ) (! (= ($generated@@19 $generated@@174 $generated@@176) ($generated@@19 $generated@@175 $generated@@176))
 :pattern ( ($generated@@19 $generated@@174 $generated@@176))
 :pattern ( ($generated@@19 $generated@@175 $generated@@176))
)))
 :pattern ( ($generated@@91 $generated@@174 $generated@@175))
)))
(assert  (=> (<= 2 $generated@@22) (forall (($generated@@177 Int) ) (!  (=> (or ($generated@@42 $generated@@177) (and (< 2 $generated@@22) (<= ($generated@@24 1) $generated@@177))) (and (forall (($generated@@178 Int) ) (!  (=> (<= ($generated@@24 1) $generated@@178) (=> (<= $generated@@178 $generated@@177) ($generated@@25 $generated@@178 $generated@@177)))
 :pattern ( ($generated@@23 $generated@@178 $generated@@177))
)) (= ($generated@@41 $generated@@177) ($generated@@58 ($generated@@59 $generated@@46 $generated@@177 $generated@@177)))))
 :pattern ( ($generated@@41 $generated@@177))
))))
(assert (forall (($generated@@179 Int) ) (! (= ($generated@@63 $generated@@5 ($generated@@9 ($generated@@24 $generated@@179))) ($generated@@49 $generated@@67 ($generated@@63 $generated@@5 ($generated@@9 $generated@@179))))
 :pattern ( ($generated@@63 $generated@@5 ($generated@@9 ($generated@@24 $generated@@179))))
)))
(assert (forall (($generated@@180 T@U) ($generated@@181 T@T) ) (! (= ($generated@@63 $generated@@181 ($generated@@49 $generated@@181 $generated@@180)) ($generated@@49 $generated@@67 ($generated@@63 $generated@@181 $generated@@180)))
 :pattern ( ($generated@@63 $generated@@181 ($generated@@49 $generated@@181 $generated@@180)))
)))
(assert  (=> (<= 3 $generated@@22) (forall (($generated@@182 T@U) ) (!  (=> (or ($generated@@52 $generated@@182) (and (< 3 $generated@@22) (and ($generated@@43 $generated@@44 $generated@@182 ($generated@@45 $generated@@46)) (not ($generated@@91 $generated@@182 $generated@@20))))) (<= ($generated@@24 1) ($generated@@53 $generated@@182)))
 :pattern ( ($generated@@53 $generated@@182))
))))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@183 () T@U)
(declare-fun $generated@@184 () T@U)
(declare-fun $generated@@185 () T@U)
(declare-fun $generated@@186 () T@U)
(declare-fun $generated@@187 (T@U) Bool)
(declare-fun $generated@@188 () Bool)
(declare-fun $generated@@189 () Int)
(declare-fun $generated@@190 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@191  (=> (= $generated@@183 ($generated@@127 $generated@@184 $generated@@185 $generated@@0 false)) (=> (and (and (and ($generated@@90 $generated@@186) ($generated@@187 $generated@@186)) (= $generated@@185 $generated@@186)) (and (and $generated@@188 (= (ControlFlow 0 2) (- 0 1))) ($generated@@25 ($generated@@36 $generated@@188 $generated@@189 $generated@@190) $generated@@189))) (or ($generated@@23 ($generated@@36 $generated@@188 $generated@@189 $generated@@190) $generated@@189) (exists (($generated@@192 Int) ) (! (= ($generated@@26 ($generated@@36 $generated@@188 $generated@@189 $generated@@190) $generated@@192) $generated@@189)
 :pattern ( ($generated@@26 ($generated@@36 $generated@@188 $generated@@189 $generated@@190) $generated@@192))
)))))))
(let (($generated@@193  (=> (and ($generated@@90 $generated@@185) ($generated@@187 $generated@@185)) (=> (and (and (<= ($generated@@24 1) $generated@@189) (<= ($generated@@24 1) $generated@@190)) (and (= 5 $generated@@22) (= (ControlFlow 0 3) 2))) $generated@@191))))
$generated@@193)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
