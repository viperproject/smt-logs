(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U T@U) Bool)
(declare-fun $generated@@0 (T@T) Int)
(declare-fun $generated@@1 () T@T)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 (Bool) T@U)
(declare-fun $generated@@5 (T@U) Bool)
(declare-fun $generated@@6 (Int) T@U)
(declare-fun $generated@@7 (T@U) Int)
(declare-fun $generated@@8 (Real) T@U)
(declare-fun $generated@@9 (T@U) Real)
(declare-fun $generated@@19 (T@U T@U) T@U)
(declare-fun $generated@@20 (Int) T@U)
(declare-fun $generated@@21 (T@U) Int)
(declare-fun $generated@@25 () Int)
(declare-fun $generated@@26 (T@U T@U Int) Bool)
(declare-fun $generated@@27 (T@U) T@U)
(declare-fun $generated@@28 (T@U Int) Bool)
(declare-fun $generated@@29 (Int) Int)
(declare-fun $generated@@35 (T@T T@U) T@U)
(declare-fun $generated@@36 () T@T)
(declare-fun $generated@@48 (T@T T@U) T@U)
(declare-fun $generated@@49 (T@T T@U) T@U)
(declare-fun $generated@@55 (T@U) Bool)
(declare-fun $generated@@71 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@72 () T@T)
(declare-fun $generated@@73 () T@T)
(declare-fun $generated@@74 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@75 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@76 (T@T T@T) T@T)
(declare-fun $generated@@77 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@78 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@79 (T@T) T@T)
(declare-fun $generated@@80 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@0 $generated@@1) 0) (= ($generated@@0 $generated@@2) 1)) (= ($generated@@0 $generated@@3) 2)) (forall (($generated@@10 Bool) ) (! (= ($generated@@5 ($generated@@4 $generated@@10)) $generated@@10)
 :pattern ( ($generated@@4 $generated@@10))
))) (forall (($generated@@11 T@U) ) (! (= ($generated@@4 ($generated@@5 $generated@@11)) $generated@@11)
 :pattern ( ($generated@@5 $generated@@11))
))) (forall (($generated@@12 Int) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Real) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))))
(assert (forall (($generated@@16 T@U) ($generated@@17 T@U) ($generated@@18 T@U) ) (!  (=> (and ($generated $generated@@16 $generated@@17) ($generated $generated@@17 $generated@@18)) ($generated $generated@@16 $generated@@18))
 :pattern ( ($generated $generated@@16 $generated@@17) ($generated $generated@@17 $generated@@18))
 :pattern ( ($generated $generated@@16 $generated@@17) ($generated $generated@@16 $generated@@18))
)))
(assert (forall (($generated@@22 T@U) ($generated@@23 Int) ($generated@@24 Int) ) (!  (=> (and (and (<= 0 $generated@@23) (<= 0 $generated@@24)) (<= (+ $generated@@23 $generated@@24) ($generated@@21 $generated@@22))) (= ($generated@@19 ($generated@@19 $generated@@22 ($generated@@20 $generated@@23)) ($generated@@20 $generated@@24)) ($generated@@19 $generated@@22 ($generated@@20 (+ $generated@@23 $generated@@24)))))
 :pattern ( ($generated@@19 ($generated@@19 $generated@@22 ($generated@@20 $generated@@23)) ($generated@@20 $generated@@24)))
)))
(assert  (=> (<= 1 $generated@@25) (forall (($generated@@30 T@U) ($generated@@31 T@U) ($generated@@32 Int) ) (!  (=> (or ($generated@@28 $generated@@31 $generated@@32) (< 1 $generated@@25)) (and (and (=> (< 0 ($generated@@21 $generated@@31)) (=> (or (not (= $generated@@32 0)) (not true)) ($generated@@28 ($generated@@19 $generated@@31 ($generated@@20 1)) (+ $generated@@32 1)))) (=> (=> (< 0 ($generated@@21 $generated@@31)) (and (or (not (= $generated@@32 0)) (not true)) ($generated@@26 $generated@@30 ($generated@@19 $generated@@31 ($generated@@20 1)) (+ $generated@@32 1)))) (=> (= ($generated@@29 0) ($generated@@21 $generated@@31)) (forall (($generated@@33 T@U) ) (!  (=> ($generated $generated@@33 $generated@@31) ($generated@@28 $generated@@33 $generated@@32))
 :pattern ( ($generated@@26 $generated@@30 $generated@@33 $generated@@32))
))))) (= ($generated@@26 ($generated@@27 $generated@@30) $generated@@31 $generated@@32)  (and (=> (< 0 ($generated@@21 $generated@@31)) (and (or (not (= $generated@@32 0)) (not true)) ($generated@@26 $generated@@30 ($generated@@19 $generated@@31 ($generated@@20 1)) (+ $generated@@32 1)))) (=> (= ($generated@@29 0) ($generated@@21 $generated@@31)) (forall (($generated@@34 T@U) ) (!  (=> ($generated $generated@@34 $generated@@31) ($generated@@26 $generated@@30 $generated@@34 $generated@@32))
 :pattern ( ($generated@@26 $generated@@30 $generated@@34 $generated@@32))
)))))))
 :pattern ( ($generated@@26 ($generated@@27 $generated@@30) $generated@@31 $generated@@32))
))))
(assert (= ($generated@@0 $generated@@36) 3))
(assert  (=> (<= 1 $generated@@25) (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 Int) ) (!  (=> (or ($generated@@28 ($generated@@35 $generated@@36 $generated@@38) ($generated@@29 $generated@@39)) (< 1 $generated@@25)) (and (and (=> (< 0 ($generated@@21 $generated@@38)) (=> ($generated@@5 ($generated@@35 $generated@@1 ($generated@@4  (or (not (= $generated@@39 0)) (not true))))) ($generated@@28 ($generated@@19 $generated@@38 ($generated@@20 1)) ($generated@@29 (+ $generated@@39 1))))) (=> (=> (< 0 ($generated@@21 $generated@@38)) (and (or (not (= $generated@@39 0)) (not true)) ($generated@@26 ($generated@@27 $generated@@37) ($generated@@19 $generated@@38 ($generated@@20 1)) ($generated@@29 (+ $generated@@39 1))))) (=> (= ($generated@@29 0) ($generated@@21 $generated@@38)) (forall (($generated@@40 T@U) ) (!  (=> ($generated $generated@@40 $generated@@38) ($generated@@28 $generated@@40 $generated@@39))
 :pattern ( ($generated@@26 ($generated@@27 $generated@@37) $generated@@40 $generated@@39))
))))) (= ($generated@@26 ($generated@@27 $generated@@37) ($generated@@35 $generated@@36 $generated@@38) ($generated@@29 $generated@@39))  (and (=> (< 0 ($generated@@21 $generated@@38)) (and (or (not (= $generated@@39 0)) (not true)) ($generated@@26 ($generated@@27 $generated@@37) ($generated@@19 $generated@@38 ($generated@@20 1)) ($generated@@29 (+ $generated@@39 1))))) (=> (= ($generated@@29 0) ($generated@@21 $generated@@38)) (forall (($generated@@41 T@U) ) (!  (=> ($generated $generated@@41 $generated@@38) ($generated@@26 ($generated@@27 $generated@@37) $generated@@41 $generated@@39))
 :pattern ( ($generated@@26 ($generated@@27 $generated@@37) $generated@@41 $generated@@39))
)))))))
 :weight 3
 :pattern ( ($generated@@26 ($generated@@27 $generated@@37) ($generated@@35 $generated@@36 $generated@@38) ($generated@@29 $generated@@39)))
))))
(assert  (=> (<= 1 $generated@@25) (forall (($generated@@42 T@U) ($generated@@43 Int) ($generated@@44 T@U) ) (!  (=> (= $generated@@44 ($generated@@20 0)) ($generated@@26 $generated@@42 $generated@@44 $generated@@43))
 :pattern ( ($generated@@26 $generated@@42 $generated@@44 $generated@@43))
))))
(assert (forall (($generated@@45 Int) ) (! (= ($generated@@29 $generated@@45) $generated@@45)
 :pattern ( ($generated@@29 $generated@@45))
)))
(assert (forall (($generated@@46 T@U) ($generated@@47 T@T) ) (! (= ($generated@@35 $generated@@47 $generated@@46) $generated@@46)
 :pattern ( ($generated@@35 $generated@@47 $generated@@46))
)))
(assert (forall (($generated@@50 T@U) ($generated@@51 T@T) ) (! (= ($generated@@49 $generated@@51 ($generated@@48 $generated@@51 $generated@@50)) $generated@@50)
 :pattern ( ($generated@@48 $generated@@51 $generated@@50))
)))
(assert (forall (($generated@@52 T@U) ($generated@@53 T@U) ($generated@@54 Int) ) (! (= ($generated@@26 ($generated@@27 $generated@@52) $generated@@53 $generated@@54) ($generated@@26 $generated@@52 $generated@@53 $generated@@54))
 :pattern ( ($generated@@26 ($generated@@27 $generated@@52) $generated@@53 $generated@@54))
)))
(assert (forall (($generated@@56 T@U) ($generated@@57 T@U) ) (!  (=> (and ($generated@@55 $generated@@57) (<= ($generated@@21 $generated@@57) ($generated@@21 $generated@@56))) (and (= ($generated@@55 ($generated@@19 $generated@@56 $generated@@57)) ($generated@@55 $generated@@56)) (= ($generated@@21 ($generated@@19 $generated@@56 $generated@@57)) (- ($generated@@21 $generated@@56) ($generated@@21 $generated@@57)))))
 :pattern ( ($generated@@19 $generated@@56 $generated@@57))
)))
(assert (forall (($generated@@58 Int) ) (!  (=> (<= 0 $generated@@58) (and ($generated@@55 ($generated@@20 $generated@@58)) (= ($generated@@21 ($generated@@20 $generated@@58)) $generated@@58)))
 :pattern ( ($generated@@20 $generated@@58))
)))
(assert  (=> (<= 1 $generated@@25) (forall (($generated@@59 T@U) ($generated@@60 T@U) ($generated@@61 Int) ) (!  (=> (or ($generated@@28 ($generated@@35 $generated@@36 $generated@@60) $generated@@61) (< 1 $generated@@25)) (and (and (=> (< 0 ($generated@@21 $generated@@60)) (=> (or (not (= $generated@@61 0)) (not true)) ($generated@@28 ($generated@@19 $generated@@60 ($generated@@20 1)) (+ $generated@@61 1)))) (=> (=> (< 0 ($generated@@21 $generated@@60)) (and (or (not (= $generated@@61 0)) (not true)) ($generated@@26 ($generated@@27 $generated@@59) ($generated@@19 $generated@@60 ($generated@@20 1)) (+ $generated@@61 1)))) (=> (= ($generated@@29 0) ($generated@@21 $generated@@60)) (forall (($generated@@62 T@U) ) (!  (=> ($generated $generated@@62 $generated@@60) ($generated@@28 $generated@@62 $generated@@61))
 :pattern ( ($generated@@26 ($generated@@27 $generated@@59) $generated@@62 $generated@@61))
))))) (= ($generated@@26 ($generated@@27 $generated@@59) ($generated@@35 $generated@@36 $generated@@60) $generated@@61)  (and (=> (< 0 ($generated@@21 $generated@@60)) (and (or (not (= $generated@@61 0)) (not true)) ($generated@@26 ($generated@@27 $generated@@59) ($generated@@19 $generated@@60 ($generated@@20 1)) (+ $generated@@61 1)))) (=> (= ($generated@@29 0) ($generated@@21 $generated@@60)) (forall (($generated@@63 T@U) ) (!  (=> ($generated $generated@@63 $generated@@60) ($generated@@26 ($generated@@27 $generated@@59) $generated@@63 $generated@@61))
 :pattern ( ($generated@@26 ($generated@@27 $generated@@59) $generated@@63 $generated@@61))
)))))))
 :weight 3
 :pattern ( ($generated@@26 ($generated@@27 $generated@@59) ($generated@@35 $generated@@36 $generated@@60) $generated@@61))
))))
(assert (forall (($generated@@64 T@U) ($generated@@65 T@U) ) (!  (or (or ($generated $generated@@64 $generated@@65) (= $generated@@64 $generated@@65)) ($generated $generated@@65 $generated@@64))
 :pattern ( ($generated $generated@@64 $generated@@65) ($generated $generated@@65 $generated@@64))
)))
(assert (forall (($generated@@66 T@U) ) (! (<= 0 ($generated@@21 $generated@@66))
 :pattern ( ($generated@@21 $generated@@66))
)))
(assert (forall (($generated@@67 T@U) ($generated@@68 T@T) ) (! (= ($generated@@48 $generated@@68 ($generated@@49 $generated@@68 $generated@@67)) $generated@@67)
 :pattern ( ($generated@@49 $generated@@68 $generated@@67))
)))
(assert (forall (($generated@@69 T@U) ($generated@@70 T@U) ) (!  (and (and (and (=> ($generated $generated@@69 $generated@@70) (or (not (= $generated@@69 $generated@@70)) (not true))) (=> (and ($generated@@55 $generated@@69) (not ($generated@@55 $generated@@70))) ($generated $generated@@69 $generated@@70))) (=> (and ($generated@@55 $generated@@69) ($generated@@55 $generated@@70)) (= ($generated $generated@@69 $generated@@70) (< ($generated@@21 $generated@@69) ($generated@@21 $generated@@70))))) (=> (and ($generated $generated@@69 $generated@@70) ($generated@@55 $generated@@70)) ($generated@@55 $generated@@69)))
 :pattern ( ($generated $generated@@69 $generated@@70))
)))
(assert  (and (and (and (and (and (and (and (and (forall (($generated@@81 T@T) ($generated@@82 T@T) ($generated@@83 T@T) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ) (! (= ($generated@@71 $generated@@81 $generated@@82 $generated@@83 ($generated@@77 $generated@@81 $generated@@82 $generated@@83 $generated@@85 $generated@@86 $generated@@87 $generated@@84) $generated@@86 $generated@@87) $generated@@84)
 :weight 0
)) (and (forall (($generated@@88 T@T) ($generated@@89 T@T) ($generated@@90 T@T) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ) (!  (or (= $generated@@93 $generated@@95) (= ($generated@@71 $generated@@88 $generated@@89 $generated@@90 ($generated@@77 $generated@@88 $generated@@89 $generated@@90 $generated@@92 $generated@@93 $generated@@94 $generated@@91) $generated@@95 $generated@@96) ($generated@@71 $generated@@88 $generated@@89 $generated@@90 $generated@@92 $generated@@95 $generated@@96)))
 :weight 0
)) (forall (($generated@@97 T@T) ($generated@@98 T@T) ($generated@@99 T@T) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ) (!  (or (= $generated@@103 $generated@@105) (= ($generated@@71 $generated@@97 $generated@@98 $generated@@99 ($generated@@77 $generated@@97 $generated@@98 $generated@@99 $generated@@101 $generated@@102 $generated@@103 $generated@@100) $generated@@104 $generated@@105) ($generated@@71 $generated@@97 $generated@@98 $generated@@99 $generated@@101 $generated@@104 $generated@@105)))
 :weight 0
)))) (= ($generated@@0 $generated@@72) 4)) (= ($generated@@0 $generated@@73) 5)) (forall (($generated@@106 T@T) ($generated@@107 T@T) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ) (! (= ($generated@@75 $generated@@106 $generated@@107 ($generated@@78 $generated@@106 $generated@@107 $generated@@109 $generated@@110 $generated@@108) $generated@@110) $generated@@108)
 :weight 0
))) (forall (($generated@@111 T@T) ($generated@@112 T@T) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ) (!  (or (= $generated@@115 $generated@@116) (= ($generated@@75 $generated@@111 $generated@@112 ($generated@@78 $generated@@111 $generated@@112 $generated@@114 $generated@@115 $generated@@113) $generated@@116) ($generated@@75 $generated@@111 $generated@@112 $generated@@114 $generated@@116)))
 :weight 0
))) (forall (($generated@@117 T@T) ($generated@@118 T@T) ) (= ($generated@@0 ($generated@@76 $generated@@117 $generated@@118)) 6))) (forall (($generated@@119 T@T) ($generated@@120 T@T) ) (! (= ($generated@@79 ($generated@@76 $generated@@119 $generated@@120)) $generated@@119)
 :pattern ( ($generated@@76 $generated@@119 $generated@@120))
))) (forall (($generated@@121 T@T) ($generated@@122 T@T) ) (! (= ($generated@@80 ($generated@@76 $generated@@121 $generated@@122)) $generated@@122)
 :pattern ( ($generated@@76 $generated@@121 $generated@@122))
))))
(assert (forall (($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 Bool) ($generated@@127 T@U) ($generated@@128 T@U) ) (! (= ($generated@@5 ($generated@@71 $generated@@72 $generated@@73 $generated@@1 ($generated@@74 $generated@@123 $generated@@124 $generated@@125 $generated@@126) $generated@@127 $generated@@128))  (=> (and (or (not (= $generated@@127 $generated@@123)) (not true)) ($generated@@5 ($generated@@48 $generated@@1 ($generated@@75 $generated@@73 $generated@@36 ($generated@@75 $generated@@72 ($generated@@76 $generated@@73 $generated@@36) $generated@@124 $generated@@127) $generated@@125)))) $generated@@126))
 :pattern ( ($generated@@71 $generated@@72 $generated@@73 $generated@@1 ($generated@@74 $generated@@123 $generated@@124 $generated@@125 $generated@@126) $generated@@127 $generated@@128))
)))
(assert (forall (($generated@@129 T@U) ) (!  (=> ($generated@@55 $generated@@129) (= $generated@@129 ($generated@@20 ($generated@@21 $generated@@129))))
 :pattern ( ($generated@@21 $generated@@129))
 :pattern ( ($generated@@55 $generated@@129))
)))
(assert (forall (($generated@@130 T@U) ($generated@@131 T@U) ) (!  (=> (and ($generated@@55 $generated@@131) (<= ($generated@@21 $generated@@131) ($generated@@21 $generated@@130))) (or (and (= $generated@@131 ($generated@@20 0)) (= ($generated@@19 $generated@@130 $generated@@131) $generated@@130)) (and (or (not (= $generated@@131 ($generated@@20 0))) (not true)) ($generated ($generated@@19 $generated@@130 $generated@@131) $generated@@130))))
 :pattern ( ($generated@@19 $generated@@130 $generated@@131))
)))
(assert (forall (($generated@@132 Int) ) (! (= ($generated@@49 $generated@@2 ($generated@@6 ($generated@@29 $generated@@132))) ($generated@@35 $generated@@36 ($generated@@49 $generated@@2 ($generated@@6 $generated@@132))))
 :pattern ( ($generated@@49 $generated@@2 ($generated@@6 ($generated@@29 $generated@@132))))
)))
(assert (forall (($generated@@133 T@U) ($generated@@134 T@T) ) (! (= ($generated@@49 $generated@@134 ($generated@@35 $generated@@134 $generated@@133)) ($generated@@35 $generated@@36 ($generated@@49 $generated@@134 $generated@@133)))
 :pattern ( ($generated@@49 $generated@@134 ($generated@@35 $generated@@134 $generated@@133)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@135 () T@U)
(declare-fun $generated@@136 () Int)
(declare-fun $generated@@137 () T@U)
(declare-fun $generated@@138 (T@U) Bool)
(declare-fun $generated@@139 () T@U)
(declare-fun $generated@@140 (T@U) Bool)
(declare-fun $generated@@141 () T@U)
(declare-fun $generated@@142 () T@U)
(declare-fun $generated@@143 () T@U)
(declare-fun $generated@@144 () T@U)
(declare-fun $generated@@145 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 8) (let (($generated@@146  (and (=> (= (ControlFlow 0 2) (- 0 4)) (=> ($generated@@28 $generated@@135 $generated@@136) (or ($generated@@26 ($generated@@27 $generated@@137) $generated@@135 $generated@@136) (=> (< 0 ($generated@@21 $generated@@135)) (or (not (= $generated@@136 0)) (not true)))))) (=> (=> ($generated@@28 $generated@@135 $generated@@136) (or ($generated@@26 ($generated@@27 $generated@@137) $generated@@135 $generated@@136) (=> (< 0 ($generated@@21 $generated@@135)) (or (not (= $generated@@136 0)) (not true))))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (=> ($generated@@28 $generated@@135 $generated@@136) (or ($generated@@26 ($generated@@27 $generated@@137) $generated@@135 $generated@@136) (=> (< 0 ($generated@@21 $generated@@135)) ($generated@@26 ($generated@@27 ($generated@@27 $generated@@137)) ($generated@@19 $generated@@135 ($generated@@20 1)) (+ $generated@@136 1)))))) (=> (=> ($generated@@28 $generated@@135 $generated@@136) (or ($generated@@26 ($generated@@27 $generated@@137) $generated@@135 $generated@@136) (=> (< 0 ($generated@@21 $generated@@135)) ($generated@@26 ($generated@@27 ($generated@@27 $generated@@137)) ($generated@@19 $generated@@135 ($generated@@20 1)) (+ $generated@@136 1))))) (=> (= (ControlFlow 0 2) (- 0 1)) (=> ($generated@@28 $generated@@135 $generated@@136) (or ($generated@@26 ($generated@@27 $generated@@137) $generated@@135 $generated@@136) (=> (= ($generated@@29 0) ($generated@@21 $generated@@135)) (forall (($generated@@147 T@U) ) (!  (=> ($generated $generated@@147 $generated@@135) ($generated@@26 ($generated@@27 ($generated@@27 $generated@@137)) $generated@@147 $generated@@136))
 :pattern ( ($generated@@26 ($generated@@27 ($generated@@27 $generated@@137)) $generated@@147 $generated@@136))
))))))))))))
(let (($generated@@148  (=> (<= ($generated@@21 $generated@@135) 0) (=> (and (and (and ($generated@@138 $generated@@139) ($generated@@140 $generated@@139)) (= $generated@@141 $generated@@139)) (and (forall (($generated@@149 T@U) ($generated@@150 Int) ) (!  (=> (and ($generated $generated@@149 $generated@@135) (< 0 $generated@@150)) ($generated@@26 ($generated@@27 $generated@@137) $generated@@149 $generated@@150))
 :pattern ( ($generated@@26 ($generated@@27 $generated@@137) $generated@@149 $generated@@150))
)) (= (ControlFlow 0 6) 2))) $generated@@146))))
(let (($generated@@151  (=> (and (< 0 ($generated@@21 $generated@@135)) (= (ControlFlow 0 5) 2)) $generated@@146)))
(let (($generated@@152  (=> (= $generated@@142 ($generated@@74 $generated@@143 $generated@@144 $generated@@145 false)) (=> (and (and ($generated@@138 $generated@@141) ($generated@@140 $generated@@141)) (and (= $generated@@144 $generated@@141) (forall (($generated@@153 T@U) ($generated@@154 Int) ) (!  (=> (and (< 0 $generated@@154) (or ($generated $generated@@153 $generated@@135) (and (= $generated@@153 $generated@@135) (and (<= 0 $generated@@154) (< $generated@@154 $generated@@136))))) ($generated@@26 ($generated@@27 $generated@@137) $generated@@153 $generated@@154))
 :pattern ( ($generated@@26 ($generated@@27 $generated@@137) $generated@@153 $generated@@154))
)))) (and (=> (= (ControlFlow 0 7) 5) $generated@@151) (=> (= (ControlFlow 0 7) 6) $generated@@148))))))
(let (($generated@@155  (=> (and (and (and ($generated@@138 $generated@@144) ($generated@@140 $generated@@144)) (= 2 $generated@@25)) (and (< 0 $generated@@136) (= (ControlFlow 0 8) 7))) $generated@@152)))
$generated@@155))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
