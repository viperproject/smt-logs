(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._module.List () T@U)
(declare-fun |##_module.List.Nil| () T@U)
(declare-fun |##_module.List.Cons| () T@U)
(declare-fun tytagFamily$List () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun |#_module.List.Nil| () T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun Tclass._module.List (T@U) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun |_module.List#Equal| (T@U T@U) Bool)
(declare-fun _module.List.Cons_q (T@U) Bool)
(declare-fun _module.List.head (T@U) T@U)
(declare-fun _module.List.tail (T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.sorted (T@U T@U) Bool)
(declare-fun $LS (T@U) T@U)
(declare-fun |_module.__default.sorted#canCall| (T@U) Bool)
(declare-fun _module.List.Nil_q (T@U) Bool)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun |#_module.List.Cons| (T@U T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun _module.__default.aux (T@U Int T@U) T@U)
(declare-fun |_module.__default.aux#canCall| (Int T@U) Bool)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun TagFamily (T@U) T@U)
(declare-fun _module.__default.Sort (T@U T@U) T@U)
(declare-fun |_module.__default.Sort#canCall| (T@U) Bool)
(declare-fun $LZ () T@U)
(declare-fun _module.__default.nb__occ (T@U Int T@U) Int)
(declare-fun _module.__default.equiv (T@U T@U) Bool)
(declare-fun Tclass._module.List_0 (T@U) T@U)
(declare-fun |_module.__default.nb__occ#canCall| (Int T@U) Bool)
(declare-fun BoxRank (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun |_module.__default.equiv#canCall| (T@U T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt alloc Tagclass._module.List |##_module.List.Nil| |##_module.List.Cons| tytagFamily$List)
)
(assert (= (Tag TInt) TagInt))
(assert (= (DatatypeCtorId |#_module.List.Nil|) |##_module.List.Nil|))
(assert (= (Ctor DatatypeTypeType) 3))
(assert (forall ((_module.List$T T@U) ($h T@U) ) (!  (=> ($IsGoodHeap $h) ($IsAlloc DatatypeTypeType |#_module.List.Nil| (Tclass._module.List _module.List$T) $h))
 :pattern ( ($IsAlloc DatatypeTypeType |#_module.List.Nil| (Tclass._module.List _module.List$T) $h))
)))
(assert (forall ((_module.List$T@@0 T@U) ) (! ($Is DatatypeTypeType |#_module.List.Nil| (Tclass._module.List _module.List$T@@0))
 :pattern ( ($Is DatatypeTypeType |#_module.List.Nil| (Tclass._module.List _module.List$T@@0)))
)))
(assert (forall ((a T@U) (b T@U) ) (! (= (|_module.List#Equal| a b) (= a b))
 :pattern ( (|_module.List#Equal| a b))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) ) (!  (=> (and (_module.List.Cons_q a@@0) (_module.List.Cons_q b@@0)) (= (|_module.List#Equal| a@@0 b@@0)  (and (= (_module.List.head a@@0) (_module.List.head b@@0)) (|_module.List#Equal| (_module.List.tail a@@0) (_module.List.tail b@@0)))))
 :pattern ( (|_module.List#Equal| a@@0 b@@0) (_module.List.Cons_q a@@0))
 :pattern ( (|_module.List#Equal| a@@0 b@@0) (_module.List.Cons_q b@@0))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($ly T@U) (|l#0| T@U) ) (!  (=> (or (|_module.__default.sorted#canCall| |l#0|) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |l#0| (Tclass._module.List TInt)))) (and (=> (not (_module.List.Nil_q |l#0|)) (let ((|rest#1| (_module.List.tail |l#0|)))
(let ((|x#1| (U_2_int ($Unbox intType (_module.List.head |l#0|)))))
 (=> (not (_module.List.Nil_q |rest#1|)) (let ((|y#1| (U_2_int ($Unbox intType (_module.List.head |rest#1|)))))
 (=> (<= |x#1| |y#1|) (|_module.__default.sorted#canCall| |rest#1|))))))) (= (_module.__default.sorted ($LS $ly) |l#0|) (ite (_module.List.Nil_q |l#0|) true (let ((|rest#0| (_module.List.tail |l#0|)))
(let ((|x#0| (U_2_int ($Unbox intType (_module.List.head |l#0|)))))
(ite (_module.List.Nil_q |rest#0|) true (let ((|y#0| (U_2_int ($Unbox intType (_module.List.head |rest#0|)))))
 (and (<= |x#0| |y#0|) (_module.__default.sorted $ly |rest#0|))))))))))
 :pattern ( (_module.__default.sorted ($LS $ly) |l#0|))
))))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((_module.List$T@@1 T@U) (|a#6#0#0| T@U) (|a#6#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.List.Cons| |a#6#0#0| |a#6#1#0|) (Tclass._module.List _module.List$T@@1))  (and ($IsBox |a#6#0#0| _module.List$T@@1) ($Is DatatypeTypeType |a#6#1#0| (Tclass._module.List _module.List$T@@1))))
 :pattern ( ($Is DatatypeTypeType (|#_module.List.Cons| |a#6#0#0| |a#6#1#0|) (Tclass._module.List _module.List$T@@1)))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($ly@@0 T@U) (|z#0| Int) (|l#0@@0| T@U) ) (!  (=> (or (|_module.__default.aux#canCall| (LitInt |z#0|) (Lit DatatypeTypeType |l#0@@0|)) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |l#0@@0| (Tclass._module.List TInt)))) (and (=> (not (U_2_bool (Lit boolType (bool_2_U (_module.List.Nil_q (Lit DatatypeTypeType |l#0@@0|)))))) (let ((|l'#3| (Lit DatatypeTypeType (_module.List.tail (Lit DatatypeTypeType |l#0@@0|)))))
(let ((|a#3| (LitInt (U_2_int ($Unbox intType (_module.List.head (Lit DatatypeTypeType |l#0@@0|)))))))
 (=> (< |a#3| (LitInt |z#0|)) (|_module.__default.aux#canCall| (LitInt |z#0|) |l'#3|))))) (= (_module.__default.aux ($LS $ly@@0) (LitInt |z#0|) (Lit DatatypeTypeType |l#0@@0|)) (ite (_module.List.Nil_q (Lit DatatypeTypeType |l#0@@0|)) (|#_module.List.Cons| ($Box intType (int_2_U (LitInt |z#0|))) (Lit DatatypeTypeType |#_module.List.Nil|)) (let ((|l'#2| (Lit DatatypeTypeType (_module.List.tail (Lit DatatypeTypeType |l#0@@0|)))))
(let ((|a#2| (LitInt (U_2_int ($Unbox intType (_module.List.head (Lit DatatypeTypeType |l#0@@0|)))))))
(ite (<= (LitInt |z#0|) |a#2|) (|#_module.List.Cons| ($Box intType (int_2_U (LitInt |z#0|))) (Lit DatatypeTypeType |l#0@@0|)) (|#_module.List.Cons| ($Box intType (int_2_U |a#2|)) (Lit DatatypeTypeType (_module.__default.aux ($LS $ly@@0) (LitInt |z#0|) |l'#2|))))))))))
 :weight 3
 :pattern ( (_module.__default.aux ($LS $ly@@0) (LitInt |z#0|) (Lit DatatypeTypeType |l#0@@0|)))
))))
(assert (forall ((d T@U) ) (! (= (_module.List.Nil_q d) (= (DatatypeCtorId d) |##_module.List.Nil|))
 :pattern ( (_module.List.Nil_q d))
)))
(assert (forall ((d@@0 T@U) ) (! (= (_module.List.Cons_q d@@0) (= (DatatypeCtorId d@@0) |##_module.List.Cons|))
 :pattern ( (_module.List.Cons_q d@@0))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((d@@1 T@U) ) (!  (=> (_module.List.Cons_q d@@1) (exists ((|a#5#0#0| T@U) (|a#5#1#0| T@U) ) (= d@@1 (|#_module.List.Cons| |a#5#0#0| |a#5#1#0|))))
 :pattern ( (_module.List.Cons_q d@@1))
)))
(assert (forall ((d@@2 T@U) ) (!  (=> (_module.List.Nil_q d@@2) (= d@@2 |#_module.List.Nil|))
 :pattern ( (_module.List.Nil_q d@@2))
)))
(assert (forall ((v T@U) (t T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v) t h) ($IsAlloc T@@1 v t h))
 :pattern ( ($IsAllocBox ($Box T@@1 v) t h))
)))
(assert (forall ((_module.List$T@@2 T@U) ) (!  (and (= (Tag (Tclass._module.List _module.List$T@@2)) Tagclass._module.List) (= (TagFamily (Tclass._module.List _module.List$T@@2)) tytagFamily$List))
 :pattern ( (Tclass._module.List _module.List$T@@2))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($ly@@1 T@U) (|l#0@@1| T@U) ) (!  (=> (or (|_module.__default.sorted#canCall| (Lit DatatypeTypeType |l#0@@1|)) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |l#0@@1| (Tclass._module.List TInt)))) (and (=> (not (U_2_bool (Lit boolType (bool_2_U (_module.List.Nil_q (Lit DatatypeTypeType |l#0@@1|)))))) (let ((|rest#3| (Lit DatatypeTypeType (_module.List.tail (Lit DatatypeTypeType |l#0@@1|)))))
(let ((|x#3| (LitInt (U_2_int ($Unbox intType (_module.List.head (Lit DatatypeTypeType |l#0@@1|)))))))
 (=> (not (_module.List.Nil_q |rest#3|)) (let ((|y#3| (U_2_int ($Unbox intType (_module.List.head |rest#3|)))))
 (=> (<= |x#3| |y#3|) (|_module.__default.sorted#canCall| |rest#3|))))))) (= (_module.__default.sorted ($LS $ly@@1) (Lit DatatypeTypeType |l#0@@1|)) (ite (_module.List.Nil_q (Lit DatatypeTypeType |l#0@@1|)) true (let ((|rest#2| (Lit DatatypeTypeType (_module.List.tail (Lit DatatypeTypeType |l#0@@1|)))))
(let ((|x#2| (LitInt (U_2_int ($Unbox intType (_module.List.head (Lit DatatypeTypeType |l#0@@1|)))))))
(ite (_module.List.Nil_q |rest#2|) true (let ((|y#2| (LitInt (U_2_int ($Unbox intType (_module.List.head |rest#2|))))))
 (and (<= |x#2| |y#2|) (_module.__default.sorted ($LS $ly@@1) |rest#2|))))))))))
 :weight 3
 :pattern ( (_module.__default.sorted ($LS $ly@@1) (Lit DatatypeTypeType |l#0@@1|)))
))))
(assert  (=> (<= 4 $FunctionContextHeight) (forall (($ly@@2 T@U) (|l#0@@2| T@U) ) (!  (=> (or (|_module.__default.Sort#canCall| |l#0@@2|) (and (< 4 $FunctionContextHeight) ($Is DatatypeTypeType |l#0@@2| (Tclass._module.List TInt)))) (and (=> (not (_module.List.Nil_q |l#0@@2|)) (let ((|m#1| (_module.List.tail |l#0@@2|)))
(let ((|x#1@@0| (U_2_int ($Unbox intType (_module.List.head |l#0@@2|)))))
 (and (|_module.__default.Sort#canCall| |m#1|) (let ((|m'#1| (_module.__default.Sort $ly@@2 |m#1|)))
(|_module.__default.aux#canCall| |x#1@@0| |m'#1|)))))) (= (_module.__default.Sort ($LS $ly@@2) |l#0@@2|) (ite (_module.List.Nil_q |l#0@@2|) |l#0@@2| (let ((|m#0| (_module.List.tail |l#0@@2|)))
(let ((|x#0@@0| (U_2_int ($Unbox intType (_module.List.head |l#0@@2|)))))
(let ((|m'#0| (_module.__default.Sort $ly@@2 |m#0|)))
(_module.__default.aux ($LS $LZ) |x#0@@0| |m'#0|))))))))
 :pattern ( (_module.__default.Sort ($LS $ly@@2) |l#0@@2|))
))))
(assert (forall (($ly@@3 T@U) (|z#0@@0| Int) (|l#0@@3| T@U) ) (! (= (_module.__default.nb__occ ($LS $ly@@3) |z#0@@0| |l#0@@3|) (_module.__default.nb__occ $ly@@3 |z#0@@0| |l#0@@3|))
 :pattern ( (_module.__default.nb__occ ($LS $ly@@3) |z#0@@0| |l#0@@3|))
)))
(assert (forall (($ly@@4 T@U) (|z#0@@1| Int) (|l#0@@4| T@U) ) (! (= (_module.__default.aux ($LS $ly@@4) |z#0@@1| |l#0@@4|) (_module.__default.aux $ly@@4 |z#0@@1| |l#0@@4|))
 :pattern ( (_module.__default.aux ($LS $ly@@4) |z#0@@1| |l#0@@4|))
)))
(assert  (=> (<= 4 $FunctionContextHeight) (forall (($ly@@5 T@U) (|l#0@@5| T@U) ) (!  (=> (or (|_module.__default.Sort#canCall| (Lit DatatypeTypeType |l#0@@5|)) (and (< 4 $FunctionContextHeight) ($Is DatatypeTypeType |l#0@@5| (Tclass._module.List TInt)))) (and (=> (not (U_2_bool (Lit boolType (bool_2_U (_module.List.Nil_q (Lit DatatypeTypeType |l#0@@5|)))))) (let ((|m#3| (Lit DatatypeTypeType (_module.List.tail (Lit DatatypeTypeType |l#0@@5|)))))
(let ((|x#3@@0| (LitInt (U_2_int ($Unbox intType (_module.List.head (Lit DatatypeTypeType |l#0@@5|)))))))
 (and (|_module.__default.Sort#canCall| |m#3|) (let ((|m'#3| (_module.__default.Sort ($LS $ly@@5) |m#3|)))
(|_module.__default.aux#canCall| |x#3@@0| |m'#3|)))))) (= (_module.__default.Sort ($LS $ly@@5) (Lit DatatypeTypeType |l#0@@5|)) (ite (_module.List.Nil_q (Lit DatatypeTypeType |l#0@@5|)) |l#0@@5| (let ((|m#2| (Lit DatatypeTypeType (_module.List.tail (Lit DatatypeTypeType |l#0@@5|)))))
(let ((|x#2@@0| (LitInt (U_2_int ($Unbox intType (_module.List.head (Lit DatatypeTypeType |l#0@@5|)))))))
(let ((|m'#2| (Lit DatatypeTypeType (_module.__default.Sort ($LS $ly@@5) |m#2|))))
(Lit DatatypeTypeType (_module.__default.aux ($LS $LZ) |x#2@@0| |m'#2|)))))))))
 :weight 3
 :pattern ( (_module.__default.Sort ($LS $ly@@5) (Lit DatatypeTypeType |l#0@@5|)))
))))
(assert  (=> (<= 4 $FunctionContextHeight) (forall (($ly@@6 T@U) (|l#0@@6| T@U) ) (!  (=> (or (|_module.__default.Sort#canCall| |l#0@@6|) (and (< 4 $FunctionContextHeight) ($Is DatatypeTypeType |l#0@@6| (Tclass._module.List TInt)))) (and (and (_module.__default.equiv |l#0@@6| (_module.__default.Sort $ly@@6 |l#0@@6|)) (_module.__default.sorted ($LS $LZ) (_module.__default.Sort $ly@@6 |l#0@@6|))) ($Is DatatypeTypeType (_module.__default.Sort $ly@@6 |l#0@@6|) (Tclass._module.List TInt))))
 :pattern ( (_module.__default.Sort $ly@@6 |l#0@@6|))
))))
(assert (forall ((_module.List$T@@3 T@U) (d@@3 T@U) ) (!  (=> ($Is DatatypeTypeType d@@3 (Tclass._module.List _module.List$T@@3)) (or (_module.List.Nil_q d@@3) (_module.List.Cons_q d@@3)))
 :pattern ( (_module.List.Cons_q d@@3) ($Is DatatypeTypeType d@@3 (Tclass._module.List _module.List$T@@3)))
 :pattern ( (_module.List.Nil_q d@@3) ($Is DatatypeTypeType d@@3 (Tclass._module.List _module.List$T@@3)))
)))
(assert (forall ((bx T@U) ) (!  (=> ($IsBox bx TInt) (and (= ($Box intType ($Unbox intType bx)) bx) ($Is intType ($Unbox intType bx) TInt)))
 :pattern ( ($IsBox bx TInt))
)))
(assert (forall (($ly@@7 T@U) (|l#0@@7| T@U) ) (! (= (_module.__default.sorted ($LS $ly@@7) |l#0@@7|) (_module.__default.sorted $ly@@7 |l#0@@7|))
 :pattern ( (_module.__default.sorted ($LS $ly@@7) |l#0@@7|))
)))
(assert (forall ((v@@0 T@U) (t@@0 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@0) t@@0) ($Is T@@2 v@@0 t@@0))
 :pattern ( ($IsBox ($Box T@@2 v@@0) t@@0))
)))
(assert (forall ((a@@1 T@U) (b@@1 T@U) ) (!  (=> (and (_module.List.Nil_q a@@1) (_module.List.Nil_q b@@1)) (|_module.List#Equal| a@@1 b@@1))
 :pattern ( (|_module.List#Equal| a@@1 b@@1) (_module.List.Nil_q a@@1))
 :pattern ( (|_module.List#Equal| a@@1 b@@1) (_module.List.Nil_q b@@1))
)))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| T@U) ) (! (= (DatatypeCtorId (|#_module.List.Cons| |a#4#0#0| |a#4#1#0|)) |##_module.List.Cons|)
 :pattern ( (|#_module.List.Cons| |a#4#0#0| |a#4#1#0|))
)))
(assert (forall ((|a#8#0#0| T@U) (|a#8#1#0| T@U) ) (! (= (_module.List.head (|#_module.List.Cons| |a#8#0#0| |a#8#1#0|)) |a#8#0#0|)
 :pattern ( (|#_module.List.Cons| |a#8#0#0| |a#8#1#0|))
)))
(assert (forall ((|a#10#0#0| T@U) (|a#10#1#0| T@U) ) (! (= (_module.List.tail (|#_module.List.Cons| |a#10#0#0| |a#10#1#0|)) |a#10#1#0|)
 :pattern ( (|#_module.List.Cons| |a#10#0#0| |a#10#1#0|))
)))
(assert (forall ((_module.List$T@@4 T@U) ) (! (= (Tclass._module.List_0 (Tclass._module.List _module.List$T@@4)) _module.List$T@@4)
 :pattern ( (Tclass._module.List _module.List$T@@4))
)))
(assert (forall ((x@@5 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@5)) x@@5)
 :pattern ( ($Box T@@3 x@@5))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($ly@@8 T@U) (|z#0@@2| Int) (|l#0@@8| T@U) ) (!  (=> (or (|_module.__default.nb__occ#canCall| |z#0@@2| |l#0@@8|) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |l#0@@8| (Tclass._module.List TInt)))) (and (=> (not (_module.List.Nil_q |l#0@@8|)) (let ((|l'#1| (_module.List.tail |l#0@@8|)))
(|_module.__default.nb__occ#canCall| |z#0@@2| |l'#1|))) (= (_module.__default.nb__occ ($LS $ly@@8) |z#0@@2| |l#0@@8|) (ite (_module.List.Nil_q |l#0@@8|) 0 (let ((|l'#0| (_module.List.tail |l#0@@8|)))
(let ((|z'#0| (U_2_int ($Unbox intType (_module.List.head |l#0@@8|)))))
(+ (ite (= |z#0@@2| |z'#0|) 1 0) (_module.__default.nb__occ $ly@@8 |z#0@@2| |l'#0|))))))))
 :pattern ( (_module.__default.nb__occ ($LS $ly@@8) |z#0@@2| |l#0@@8|))
))))
(assert (forall ((|a#9#0#0| T@U) (|a#9#1#0| T@U) ) (! (< (BoxRank |a#9#0#0|) (DtRank (|#_module.List.Cons| |a#9#0#0| |a#9#1#0|)))
 :pattern ( (|#_module.List.Cons| |a#9#0#0| |a#9#1#0|))
)))
(assert (forall ((|a#11#0#0| T@U) (|a#11#1#0| T@U) ) (! (< (DtRank |a#11#1#0|) (DtRank (|#_module.List.Cons| |a#11#0#0| |a#11#1#0|)))
 :pattern ( (|#_module.List.Cons| |a#11#0#0| |a#11#1#0|))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($ly@@9 T@U) (|z#0@@3| Int) (|l#0@@9| T@U) ) (!  (=> (or (|_module.__default.aux#canCall| |z#0@@3| |l#0@@9|) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |l#0@@9| (Tclass._module.List TInt)))) ($Is DatatypeTypeType (_module.__default.aux $ly@@9 |z#0@@3| |l#0@@9|) (Tclass._module.List TInt)))
 :pattern ( (_module.__default.aux $ly@@9 |z#0@@3| |l#0@@9|))
))))
(assert (forall (($ly@@10 T@U) (|l#0@@10| T@U) ) (! (= (_module.__default.Sort ($LS $ly@@10) |l#0@@10|) (_module.__default.Sort $ly@@10 |l#0@@10|))
 :pattern ( (_module.__default.Sort ($LS $ly@@10) |l#0@@10|))
)))
(assert (forall ((d@@4 T@U) (_module.List$T@@5 T@U) ($h@@0 T@U) ) (!  (=> (and ($IsGoodHeap $h@@0) (and (_module.List.Cons_q d@@4) ($IsAlloc DatatypeTypeType d@@4 (Tclass._module.List _module.List$T@@5) $h@@0))) ($IsAllocBox (_module.List.head d@@4) _module.List$T@@5 $h@@0))
 :pattern ( ($IsAllocBox (_module.List.head d@@4) _module.List$T@@5 $h@@0))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0 t1 t2 (MapType0Store t0 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 4)) (= (Ctor FieldType) 5)) (forall ((t0@@0 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 (MapType1Store t0@@0 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :weight 0
))) (= (Ctor BoxType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0@@11| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0@@11| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0@@11|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0@@11| |l#1| |l#2| |l#3|) $o $f))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|l#0@@12| T@U) (|l'#0@@0| T@U) ) (!  (=> (or (|_module.__default.equiv#canCall| (Lit DatatypeTypeType |l#0@@12|) (Lit DatatypeTypeType |l'#0@@0|)) (and (< 2 $FunctionContextHeight) (and ($Is DatatypeTypeType |l#0@@12| (Tclass._module.List TInt)) ($Is DatatypeTypeType |l'#0@@0| (Tclass._module.List TInt))))) (and (forall ((|z#1| Int) ) (!  (and (|_module.__default.nb__occ#canCall| |z#1| (Lit DatatypeTypeType |l#0@@12|)) (|_module.__default.nb__occ#canCall| |z#1| (Lit DatatypeTypeType |l'#0@@0|)))
 :pattern ( (_module.__default.nb__occ ($LS $LZ) |z#1| |l'#0@@0|))
 :pattern ( (_module.__default.nb__occ ($LS $LZ) |z#1| |l#0@@12|))
)) (= (_module.__default.equiv (Lit DatatypeTypeType |l#0@@12|) (Lit DatatypeTypeType |l'#0@@0|)) (forall ((|z#1@@0| Int) ) (! (= (_module.__default.nb__occ ($LS $LZ) |z#1@@0| (Lit DatatypeTypeType |l#0@@12|)) (_module.__default.nb__occ ($LS $LZ) |z#1@@0| (Lit DatatypeTypeType |l'#0@@0|)))
 :pattern ( (_module.__default.nb__occ ($LS $LZ) |z#1@@0| |l'#0@@0|))
 :pattern ( (_module.__default.nb__occ ($LS $LZ) |z#1@@0| |l#0@@12|))
)))))
 :weight 3
 :pattern ( (_module.__default.equiv (Lit DatatypeTypeType |l#0@@12|) (Lit DatatypeTypeType |l'#0@@0|)))
))))
(assert (forall ((d@@5 T@U) ) (! (= (BoxRank ($Box DatatypeTypeType d@@5)) (DtRank d@@5))
 :pattern ( (BoxRank ($Box DatatypeTypeType d@@5)))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($ly@@11 T@U) (|z#0@@4| Int) (|l#0@@13| T@U) ) (!  (=> (or (|_module.__default.nb__occ#canCall| (LitInt |z#0@@4|) (Lit DatatypeTypeType |l#0@@13|)) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |l#0@@13| (Tclass._module.List TInt)))) (and (=> (not (U_2_bool (Lit boolType (bool_2_U (_module.List.Nil_q (Lit DatatypeTypeType |l#0@@13|)))))) (let ((|l'#3@@0| (Lit DatatypeTypeType (_module.List.tail (Lit DatatypeTypeType |l#0@@13|)))))
(|_module.__default.nb__occ#canCall| (LitInt |z#0@@4|) |l'#3@@0|))) (= (_module.__default.nb__occ ($LS $ly@@11) (LitInt |z#0@@4|) (Lit DatatypeTypeType |l#0@@13|)) (ite (_module.List.Nil_q (Lit DatatypeTypeType |l#0@@13|)) 0 (let ((|l'#2@@0| (Lit DatatypeTypeType (_module.List.tail (Lit DatatypeTypeType |l#0@@13|)))))
(let ((|z'#2| (LitInt (U_2_int ($Unbox intType (_module.List.head (Lit DatatypeTypeType |l#0@@13|)))))))
(+ (ite (= (LitInt |z#0@@4|) |z'#2|) 1 0) (_module.__default.nb__occ ($LS $ly@@11) (LitInt |z#0@@4|) |l'#2@@0|))))))))
 :weight 3
 :pattern ( (_module.__default.nb__occ ($LS $ly@@11) (LitInt |z#0@@4|) (Lit DatatypeTypeType |l#0@@13|)))
))))
(assert (forall ((_module.List$T@@6 T@U) (bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 (Tclass._module.List _module.List$T@@6)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@0)) bx@@0) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@0) (Tclass._module.List _module.List$T@@6))))
 :pattern ( ($IsBox bx@@0 (Tclass._module.List _module.List$T@@6)))
)))
(assert (forall ((d@@6 T@U) (_module.List$T@@7 T@U) ($h@@1 T@U) ) (!  (=> (and ($IsGoodHeap $h@@1) (and (_module.List.Cons_q d@@6) ($IsAlloc DatatypeTypeType d@@6 (Tclass._module.List _module.List$T@@7) $h@@1))) ($IsAlloc DatatypeTypeType (_module.List.tail d@@6) (Tclass._module.List _module.List$T@@7) $h@@1))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.List.tail d@@6) (Tclass._module.List _module.List$T@@7) $h@@1))
)))
(assert (= |#_module.List.Nil| (Lit DatatypeTypeType |#_module.List.Nil|)))
(assert (forall ((|a#7#0#0| T@U) (|a#7#1#0| T@U) ) (! (= (|#_module.List.Cons| (Lit BoxType |a#7#0#0|) (Lit DatatypeTypeType |a#7#1#0|)) (Lit DatatypeTypeType (|#_module.List.Cons| |a#7#0#0| |a#7#1#0|)))
 :pattern ( (|#_module.List.Cons| (Lit BoxType |a#7#0#0|) (Lit DatatypeTypeType |a#7#1#0|)))
)))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((x@@7 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@7)) (Lit BoxType ($Box T@@4 x@@7)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@7)))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($ly@@12 T@U) (|z#0@@5| Int) (|l#0@@14| T@U) ) (!  (=> (or (|_module.__default.nb__occ#canCall| |z#0@@5| |l#0@@14|) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |l#0@@14| (Tclass._module.List TInt)))) (<= (LitInt 0) (_module.__default.nb__occ $ly@@12 |z#0@@5| |l#0@@14|)))
 :pattern ( (_module.__default.nb__occ $ly@@12 |z#0@@5| |l#0@@14|))
))))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|l#0@@15| T@U) (|l'#0@@1| T@U) ) (!  (=> (or (|_module.__default.equiv#canCall| |l#0@@15| |l'#0@@1|) (and (< 2 $FunctionContextHeight) (and ($Is DatatypeTypeType |l#0@@15| (Tclass._module.List TInt)) ($Is DatatypeTypeType |l'#0@@1| (Tclass._module.List TInt))))) (and (forall ((|z#0@@6| Int) ) (!  (and (|_module.__default.nb__occ#canCall| |z#0@@6| |l#0@@15|) (|_module.__default.nb__occ#canCall| |z#0@@6| |l'#0@@1|))
 :pattern ( (_module.__default.nb__occ ($LS $LZ) |z#0@@6| |l'#0@@1|))
 :pattern ( (_module.__default.nb__occ ($LS $LZ) |z#0@@6| |l#0@@15|))
)) (= (_module.__default.equiv |l#0@@15| |l'#0@@1|) (forall ((|z#0@@7| Int) ) (! (= (_module.__default.nb__occ ($LS $LZ) |z#0@@7| |l#0@@15|) (_module.__default.nb__occ ($LS $LZ) |z#0@@7| |l'#0@@1|))
 :pattern ( (_module.__default.nb__occ ($LS $LZ) |z#0@@7| |l'#0@@1|))
 :pattern ( (_module.__default.nb__occ ($LS $LZ) |z#0@@7| |l#0@@15|))
)))))
 :pattern ( (_module.__default.equiv |l#0@@15| |l'#0@@1|))
))))
(assert (forall ((h@@0 T@U) (v@@1 T@U) ) (! ($IsAlloc intType v@@1 TInt h@@0)
 :pattern ( ($IsAlloc intType v@@1 TInt h@@0))
)))
(assert (forall ((_module.List$T@@8 T@U) (|a#6#0#0@@0| T@U) (|a#6#1#0@@0| T@U) ($h@@2 T@U) ) (!  (=> ($IsGoodHeap $h@@2) (= ($IsAlloc DatatypeTypeType (|#_module.List.Cons| |a#6#0#0@@0| |a#6#1#0@@0|) (Tclass._module.List _module.List$T@@8) $h@@2)  (and ($IsAllocBox |a#6#0#0@@0| _module.List$T@@8 $h@@2) ($IsAlloc DatatypeTypeType |a#6#1#0@@0| (Tclass._module.List _module.List$T@@8) $h@@2))))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_module.List.Cons| |a#6#0#0@@0| |a#6#1#0@@0|) (Tclass._module.List _module.List$T@@8) $h@@2))
)))
(assert (forall ((v@@2 T@U) ) (! ($Is intType v@@2 TInt)
 :pattern ( ($Is intType v@@2 TInt))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($ly@@13 T@U) (|z#0@@8| Int) (|l#0@@16| T@U) ) (!  (=> (or (|_module.__default.aux#canCall| |z#0@@8| |l#0@@16|) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |l#0@@16| (Tclass._module.List TInt)))) (and (=> (not (_module.List.Nil_q |l#0@@16|)) (let ((|l'#1@@0| (_module.List.tail |l#0@@16|)))
(let ((|a#1| (U_2_int ($Unbox intType (_module.List.head |l#0@@16|)))))
 (=> (< |a#1| |z#0@@8|) (|_module.__default.aux#canCall| |z#0@@8| |l'#1@@0|))))) (= (_module.__default.aux ($LS $ly@@13) |z#0@@8| |l#0@@16|) (ite (_module.List.Nil_q |l#0@@16|) (|#_module.List.Cons| ($Box intType (int_2_U |z#0@@8|)) (Lit DatatypeTypeType |#_module.List.Nil|)) (let ((|l'#0@@2| (_module.List.tail |l#0@@16|)))
(let ((|a#0| (U_2_int ($Unbox intType (_module.List.head |l#0@@16|)))))
(ite (<= |z#0@@8| |a#0|) (|#_module.List.Cons| ($Box intType (int_2_U |z#0@@8|)) |l#0@@16|) (|#_module.List.Cons| ($Box intType (int_2_U |a#0|)) (_module.__default.aux $ly@@13 |z#0@@8| |l'#0@@2|)))))))))
 :pattern ( (_module.__default.aux ($LS $ly@@13) |z#0@@8| |l#0@@16|))
))))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |l#0@@17| () T@U)
(declare-fun |_mcc#0#0| () Int)
(declare-fun |_mcc#1#0| () T@U)
(declare-fun |let#0#0#0| () T@U)
(declare-fun |m#Z#0@0| () T@U)
(declare-fun |let#1#0#0| () Int)
(declare-fun |x#Z#0@0| () Int)
(declare-fun $Heap () T@U)
(declare-fun |let#2#0#0| () T@U)
(declare-fun |m'#Z#0@0| () T@U)
(declare-fun |##l'#1@0| () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun $Heap@1 () T@U)
(declare-fun |##l'#0@0| () T@U)
(declare-fun $_ReadsFrame@0 () T@U)
(declare-fun null () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 21) (let ((GeneratedUnifiedExit_correct  (and (=> (= (ControlFlow 0 6) (- 0 10)) (=> (|_module.__default.equiv#canCall| |l#0@@17| (_module.__default.Sort ($LS $LZ) |l#0@@17|)) (or (_module.__default.equiv |l#0@@17| (_module.__default.Sort ($LS $LZ) |l#0@@17|)) (forall ((|z#0@@9| Int) ) (! (= (_module.__default.nb__occ ($LS ($LS $LZ)) |z#0@@9| |l#0@@17|) (_module.__default.nb__occ ($LS ($LS $LZ)) |z#0@@9| (_module.__default.Sort ($LS ($LS $LZ)) |l#0@@17|)))
 :pattern ( (_module.__default.nb__occ ($LS ($LS $LZ)) |z#0@@9| (_module.__default.Sort ($LS ($LS $LZ)) |l#0@@17|)))
 :pattern ( (_module.__default.nb__occ ($LS ($LS $LZ)) |z#0@@9| |l#0@@17|))
))))) (=> (=> (|_module.__default.equiv#canCall| |l#0@@17| (_module.__default.Sort ($LS $LZ) |l#0@@17|)) (or (_module.__default.equiv |l#0@@17| (_module.__default.Sort ($LS $LZ) |l#0@@17|)) (forall ((|z#0@@10| Int) ) (! (= (_module.__default.nb__occ ($LS ($LS $LZ)) |z#0@@10| |l#0@@17|) (_module.__default.nb__occ ($LS ($LS $LZ)) |z#0@@10| (_module.__default.Sort ($LS ($LS $LZ)) |l#0@@17|)))
 :pattern ( (_module.__default.nb__occ ($LS ($LS $LZ)) |z#0@@10| (_module.__default.Sort ($LS ($LS $LZ)) |l#0@@17|)))
 :pattern ( (_module.__default.nb__occ ($LS ($LS $LZ)) |z#0@@10| |l#0@@17|))
)))) (and (=> (= (ControlFlow 0 6) (- 0 9)) (=> (|_module.__default.sorted#canCall| (_module.__default.Sort ($LS $LZ) |l#0@@17|)) (or (_module.__default.sorted ($LS $LZ) (_module.__default.Sort ($LS $LZ) |l#0@@17|)) (=> (_module.List.Nil_q (_module.__default.Sort ($LS $LZ) |l#0@@17|)) (U_2_bool (Lit boolType (bool_2_U true))))))) (=> (=> (|_module.__default.sorted#canCall| (_module.__default.Sort ($LS $LZ) |l#0@@17|)) (or (_module.__default.sorted ($LS $LZ) (_module.__default.Sort ($LS $LZ) |l#0@@17|)) (=> (_module.List.Nil_q (_module.__default.Sort ($LS $LZ) |l#0@@17|)) (U_2_bool (Lit boolType (bool_2_U true)))))) (and (=> (= (ControlFlow 0 6) (- 0 8)) (=> (|_module.__default.sorted#canCall| (_module.__default.Sort ($LS $LZ) |l#0@@17|)) (or (_module.__default.sorted ($LS $LZ) (_module.__default.Sort ($LS $LZ) |l#0@@17|)) (=> (not (_module.List.Nil_q (_module.__default.Sort ($LS $LZ) |l#0@@17|))) (let ((|rest#0@@0| (_module.List.tail (_module.__default.Sort ($LS ($LS $LZ)) |l#0@@17|))))
 (=> (_module.List.Nil_q |rest#0@@0|) (U_2_bool (Lit boolType (bool_2_U true))))))))) (=> (=> (|_module.__default.sorted#canCall| (_module.__default.Sort ($LS $LZ) |l#0@@17|)) (or (_module.__default.sorted ($LS $LZ) (_module.__default.Sort ($LS $LZ) |l#0@@17|)) (=> (not (_module.List.Nil_q (_module.__default.Sort ($LS $LZ) |l#0@@17|))) (let ((|rest#0@@1| (_module.List.tail (_module.__default.Sort ($LS ($LS $LZ)) |l#0@@17|))))
 (=> (_module.List.Nil_q |rest#0@@1|) (U_2_bool (Lit boolType (bool_2_U true)))))))) (and (=> (= (ControlFlow 0 6) (- 0 7)) (=> (|_module.__default.sorted#canCall| (_module.__default.Sort ($LS $LZ) |l#0@@17|)) (or (_module.__default.sorted ($LS $LZ) (_module.__default.Sort ($LS $LZ) |l#0@@17|)) (=> (not (_module.List.Nil_q (_module.__default.Sort ($LS $LZ) |l#0@@17|))) (let ((|rest#0@@2| (_module.List.tail (_module.__default.Sort ($LS ($LS $LZ)) |l#0@@17|))))
(let ((|x#4| (U_2_int ($Unbox intType (_module.List.head (_module.__default.Sort ($LS ($LS $LZ)) |l#0@@17|))))))
 (=> (not (_module.List.Nil_q |rest#0@@2|)) (let ((|y#0@@0| (U_2_int ($Unbox intType (_module.List.head |rest#0@@2|)))))
(<= |x#4| |y#0@@0|))))))))) (=> (=> (|_module.__default.sorted#canCall| (_module.__default.Sort ($LS $LZ) |l#0@@17|)) (or (_module.__default.sorted ($LS $LZ) (_module.__default.Sort ($LS $LZ) |l#0@@17|)) (=> (not (_module.List.Nil_q (_module.__default.Sort ($LS $LZ) |l#0@@17|))) (let ((|rest#0@@3| (_module.List.tail (_module.__default.Sort ($LS ($LS $LZ)) |l#0@@17|))))
(let ((|x#4@@0| (U_2_int ($Unbox intType (_module.List.head (_module.__default.Sort ($LS ($LS $LZ)) |l#0@@17|))))))
 (=> (not (_module.List.Nil_q |rest#0@@3|)) (let ((|y#0@@1| (U_2_int ($Unbox intType (_module.List.head |rest#0@@3|)))))
(<= |x#4@@0| |y#0@@1|)))))))) (=> (= (ControlFlow 0 6) (- 0 5)) (=> (|_module.__default.sorted#canCall| (_module.__default.Sort ($LS $LZ) |l#0@@17|)) (or (_module.__default.sorted ($LS $LZ) (_module.__default.Sort ($LS $LZ) |l#0@@17|)) (=> (not (_module.List.Nil_q (_module.__default.Sort ($LS $LZ) |l#0@@17|))) (let ((|rest#0@@4| (_module.List.tail (_module.__default.Sort ($LS ($LS $LZ)) |l#0@@17|))))
 (=> (not (_module.List.Nil_q |rest#0@@4|)) (_module.__default.sorted ($LS ($LS $LZ)) |rest#0@@4|)))))))))))))))))
(let ((anon10_Then_correct  (=> (= |l#0@@17| (|#_module.List.Cons| ($Box intType (int_2_U |_mcc#0#0|)) |_mcc#1#0|)) (=> (and (and (and ($Is DatatypeTypeType |_mcc#1#0| (Tclass._module.List TInt)) (= |let#0#0#0| |_mcc#1#0|)) (and ($Is DatatypeTypeType |let#0#0#0| (Tclass._module.List TInt)) (= |m#Z#0@0| |let#0#0#0|))) (and (and (= |let#1#0#0| |_mcc#0#0|) ($Is intType (int_2_U |let#1#0#0|) TInt)) (and (= |x#Z#0@0| |let#1#0#0|) ($IsAlloc DatatypeTypeType |m#Z#0@0| (Tclass._module.List TInt) $Heap)))) (and (=> (= (ControlFlow 0 12) (- 0 18)) (< (DtRank |m#Z#0@0|) (DtRank |l#0@@17|))) (=> (< (DtRank |m#Z#0@0|) (DtRank |l#0@@17|)) (=> (and (|_module.__default.Sort#canCall| |m#Z#0@0|) (= |let#2#0#0| (_module.__default.Sort ($LS $LZ) |m#Z#0@0|))) (=> (and (and (and (|_module.__default.Sort#canCall| |m#Z#0@0|) ($Is DatatypeTypeType |let#2#0#0| (Tclass._module.List TInt))) (and (= |m'#Z#0@0| |let#2#0#0|) ($IsAlloc DatatypeTypeType |l#0@@17| (Tclass._module.List TInt) $Heap))) (and (and (= |##l'#1@0| (|#_module.List.Cons| ($Box intType (int_2_U |x#Z#0@0|)) |m'#Z#0@0|)) ($IsAlloc DatatypeTypeType |##l'#1@0| (Tclass._module.List TInt) $Heap)) (and (|_module.__default.equiv#canCall| |l#0@@17| (|#_module.List.Cons| ($Box intType (int_2_U |x#Z#0@0|)) |m'#Z#0@0|)) (|_module.__default.equiv#canCall| |l#0@@17| (|#_module.List.Cons| ($Box intType (int_2_U |x#Z#0@0|)) |m'#Z#0@0|))))) (and (=> (= (ControlFlow 0 12) (- 0 17)) (=> (|_module.__default.equiv#canCall| |l#0@@17| (|#_module.List.Cons| ($Box intType (int_2_U |x#Z#0@0|)) |m'#Z#0@0|)) (or (_module.__default.equiv |l#0@@17| (|#_module.List.Cons| ($Box intType (int_2_U |x#Z#0@0|)) |m'#Z#0@0|)) (forall ((|z#1@@1| Int) ) (! (= (_module.__default.nb__occ ($LS ($LS $LZ)) |z#1@@1| |l#0@@17|) (_module.__default.nb__occ ($LS ($LS $LZ)) |z#1@@1| (|#_module.List.Cons| ($Box intType (int_2_U |x#Z#0@0|)) |m'#Z#0@0|)))
 :pattern ( (_module.__default.nb__occ ($LS ($LS $LZ)) |z#1@@1| (|#_module.List.Cons| ($Box intType (int_2_U |x#Z#0@0|)) |m'#Z#0@0|)))
 :pattern ( (_module.__default.nb__occ ($LS ($LS $LZ)) |z#1@@1| |l#0@@17|))
))))) (=> (_module.__default.equiv |l#0@@17| (|#_module.List.Cons| ($Box intType (int_2_U |x#Z#0@0|)) |m'#Z#0@0|)) (=> (and (and (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (and (|_module.__default.aux#canCall| |x#Z#0@0| |m'#Z#0@0|) (|_module.__default.equiv#canCall| (|#_module.List.Cons| ($Box intType (int_2_U |x#Z#0@0|)) |m'#Z#0@0|) (_module.__default.aux ($LS $LZ) |x#Z#0@0| |m'#Z#0@0|)))) (and (and (|_module.__default.equiv#canCall| (|#_module.List.Cons| ($Box intType (int_2_U |x#Z#0@0|)) |m'#Z#0@0|) (_module.__default.aux ($LS $LZ) |x#Z#0@0| |m'#Z#0@0|)) (and (_module.__default.equiv (|#_module.List.Cons| ($Box intType (int_2_U |x#Z#0@0|)) |m'#Z#0@0|) (_module.__default.aux ($LS $LZ) |x#Z#0@0| |m'#Z#0@0|)) (forall ((|z#0@@11| Int) ) (! (= (_module.__default.nb__occ ($LS $LZ) |z#0@@11| (|#_module.List.Cons| ($Box intType (int_2_U |x#Z#0@0|)) |m'#Z#0@0|)) (_module.__default.nb__occ ($LS $LZ) |z#0@@11| (_module.__default.aux ($LS $LZ) |x#Z#0@0| |m'#Z#0@0|)))
 :pattern ( (_module.__default.nb__occ ($LS $LZ) |z#0@@11| (_module.__default.aux ($LS $LZ) |x#Z#0@0| |m'#Z#0@0|)))
 :pattern ( (_module.__default.nb__occ ($LS $LZ) |z#0@@11| (|#_module.List.Cons| ($Box intType (int_2_U |x#Z#0@0|)) |m'#Z#0@0|)))
)))) (= $Heap $Heap@0))) (and (=> (= (ControlFlow 0 12) (- 0 16)) (=> (|_module.__default.sorted#canCall| |m'#Z#0@0|) (or (_module.__default.sorted ($LS $LZ) |m'#Z#0@0|) (=> (_module.List.Nil_q |m'#Z#0@0|) (U_2_bool (Lit boolType (bool_2_U true))))))) (=> (=> (|_module.__default.sorted#canCall| |m'#Z#0@0|) (or (_module.__default.sorted ($LS $LZ) |m'#Z#0@0|) (=> (_module.List.Nil_q |m'#Z#0@0|) (U_2_bool (Lit boolType (bool_2_U true)))))) (and (=> (= (ControlFlow 0 12) (- 0 15)) (=> (|_module.__default.sorted#canCall| |m'#Z#0@0|) (or (_module.__default.sorted ($LS $LZ) |m'#Z#0@0|) (=> (not (_module.List.Nil_q |m'#Z#0@0|)) (let ((|rest#0@@5| (_module.List.tail |m'#Z#0@0|)))
 (=> (_module.List.Nil_q |rest#0@@5|) (U_2_bool (Lit boolType (bool_2_U true))))))))) (=> (=> (|_module.__default.sorted#canCall| |m'#Z#0@0|) (or (_module.__default.sorted ($LS $LZ) |m'#Z#0@0|) (=> (not (_module.List.Nil_q |m'#Z#0@0|)) (let ((|rest#0@@6| (_module.List.tail |m'#Z#0@0|)))
 (=> (_module.List.Nil_q |rest#0@@6|) (U_2_bool (Lit boolType (bool_2_U true)))))))) (and (=> (= (ControlFlow 0 12) (- 0 14)) (=> (|_module.__default.sorted#canCall| |m'#Z#0@0|) (or (_module.__default.sorted ($LS $LZ) |m'#Z#0@0|) (=> (not (_module.List.Nil_q |m'#Z#0@0|)) (let ((|rest#0@@7| (_module.List.tail |m'#Z#0@0|)))
(let ((|x#1@@1| (U_2_int ($Unbox intType (_module.List.head |m'#Z#0@0|)))))
 (=> (not (_module.List.Nil_q |rest#0@@7|)) (let ((|y#0@@2| (U_2_int ($Unbox intType (_module.List.head |rest#0@@7|)))))
(<= |x#1@@1| |y#0@@2|))))))))) (=> (=> (|_module.__default.sorted#canCall| |m'#Z#0@0|) (or (_module.__default.sorted ($LS $LZ) |m'#Z#0@0|) (=> (not (_module.List.Nil_q |m'#Z#0@0|)) (let ((|rest#0@@8| (_module.List.tail |m'#Z#0@0|)))
(let ((|x#1@@2| (U_2_int ($Unbox intType (_module.List.head |m'#Z#0@0|)))))
 (=> (not (_module.List.Nil_q |rest#0@@8|)) (let ((|y#0@@3| (U_2_int ($Unbox intType (_module.List.head |rest#0@@8|)))))
(<= |x#1@@2| |y#0@@3|)))))))) (and (=> (= (ControlFlow 0 12) (- 0 13)) (=> (|_module.__default.sorted#canCall| |m'#Z#0@0|) (or (_module.__default.sorted ($LS $LZ) |m'#Z#0@0|) (=> (not (_module.List.Nil_q |m'#Z#0@0|)) (let ((|rest#0@@9| (_module.List.tail |m'#Z#0@0|)))
 (=> (not (_module.List.Nil_q |rest#0@@9|)) (_module.__default.sorted ($LS ($LS $LZ)) |rest#0@@9|))))))) (=> (=> (|_module.__default.sorted#canCall| |m'#Z#0@0|) (or (_module.__default.sorted ($LS $LZ) |m'#Z#0@0|) (=> (not (_module.List.Nil_q |m'#Z#0@0|)) (let ((|rest#0@@10| (_module.List.tail |m'#Z#0@0|)))
 (=> (not (_module.List.Nil_q |rest#0@@10|)) (_module.__default.sorted ($LS ($LS $LZ)) |rest#0@@10|)))))) (=> (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1)) (=> (and (and (|_module.__default.aux#canCall| |x#Z#0@0| |m'#Z#0@0|) (|_module.__default.sorted#canCall| (_module.__default.aux ($LS $LZ) |x#Z#0@0| |m'#Z#0@0|))) (and (|_module.__default.sorted#canCall| (_module.__default.aux ($LS $LZ) |x#Z#0@0| |m'#Z#0@0|)) (and (_module.__default.sorted ($LS $LZ) (_module.__default.aux ($LS $LZ) |x#Z#0@0| |m'#Z#0@0|)) (ite (_module.List.Nil_q (_module.__default.aux ($LS $LZ) |x#Z#0@0| |m'#Z#0@0|)) true (let ((|rest#3@@0| (_module.List.tail (_module.__default.aux ($LS $LZ) |x#Z#0@0| |m'#Z#0@0|))))
(let ((|x#4@@1| (U_2_int ($Unbox intType (_module.List.head (_module.__default.aux ($LS $LZ) |x#Z#0@0| |m'#Z#0@0|))))))
(ite (_module.List.Nil_q |rest#3@@0|) true (let ((|y#3@@0| (U_2_int ($Unbox intType (_module.List.head |rest#3@@0|)))))
 (and (<= |x#4@@1| |y#3@@0|) (_module.__default.sorted ($LS $LZ) |rest#3@@0|)))))))))) (=> (and (and (and (= $Heap@0 $Heap@1) ($IsAlloc intType (int_2_U |x#Z#0@0|) TInt $Heap@1)) (and ($IsAlloc DatatypeTypeType |m'#Z#0@0| (Tclass._module.List TInt) $Heap@1) (|_module.__default.aux#canCall| |x#Z#0@0| |m'#Z#0@0|))) (and (and (= (_module.__default.Sort ($LS $LZ) |l#0@@17|) (_module.__default.aux ($LS $LZ) |x#Z#0@0| |m'#Z#0@0|)) (|_module.__default.aux#canCall| |x#Z#0@0| |m'#Z#0@0|)) (and ($Is DatatypeTypeType (_module.__default.Sort ($LS $LZ) |l#0@@17|) (Tclass._module.List TInt)) (= (ControlFlow 0 12) 6)))) GeneratedUnifiedExit_correct))))))))))))))))))))))
(let ((anon9_Then_correct  (=> (and (and (= |l#0@@17| |#_module.List.Nil|) (= (_module.__default.Sort ($LS $LZ) |l#0@@17|) |l#0@@17|)) (and ($Is DatatypeTypeType (_module.__default.Sort ($LS $LZ) |l#0@@17|) (Tclass._module.List TInt)) (= (ControlFlow 0 11) 6))) GeneratedUnifiedExit_correct)))
(let ((anon10_Else_correct true))
(let ((anon9_Else_correct  (=> (or (not (= |l#0@@17| |#_module.List.Nil|)) (not true)) (and (=> (= (ControlFlow 0 19) 12) anon10_Then_correct) (=> (= (ControlFlow 0 19) 4) anon10_Else_correct)))))
(let ((anon8_Then_correct  (=> ($Is DatatypeTypeType (_module.__default.Sort ($LS $LZ) |l#0@@17|) (Tclass._module.List TInt)) (=> (and ($IsAlloc DatatypeTypeType |l#0@@17| (Tclass._module.List TInt) $Heap) ($IsAlloc DatatypeTypeType |l#0@@17| (Tclass._module.List TInt) $Heap)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (or (|_module.List#Equal| |l#0@@17| |l#0@@17|) (< (DtRank |l#0@@17|) (DtRank |l#0@@17|)))) (=> (or (|_module.List#Equal| |l#0@@17| |l#0@@17|) (< (DtRank |l#0@@17|) (DtRank |l#0@@17|))) (=> (or (|_module.List#Equal| |l#0@@17| |l#0@@17|) (|_module.__default.Sort#canCall| |l#0@@17|)) (=> (and (= |##l'#0@0| (_module.__default.Sort ($LS $LZ) |l#0@@17|)) ($IsAlloc DatatypeTypeType |##l'#0@0| (Tclass._module.List TInt) $Heap)) (=> (and (and (|_module.__default.equiv#canCall| |l#0@@17| (_module.__default.Sort ($LS $LZ) |l#0@@17|)) (_module.__default.equiv |l#0@@17| (_module.__default.Sort ($LS $LZ) |l#0@@17|))) (and ($IsAlloc DatatypeTypeType |l#0@@17| (Tclass._module.List TInt) $Heap) (= (ControlFlow 0 2) (- 0 1)))) (or (|_module.List#Equal| |l#0@@17| |l#0@@17|) (< (DtRank |l#0@@17|) (DtRank |l#0@@17|))))))))))))
(let ((anon0_correct  (=> (= $_ReadsFrame@0 (|lambda#0| null $Heap alloc false)) (and (and (=> (= (ControlFlow 0 20) 2) anon8_Then_correct) (=> (= (ControlFlow 0 20) 11) anon9_Then_correct)) (=> (= (ControlFlow 0 20) 19) anon9_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) ($Is DatatypeTypeType |l#0@@17| (Tclass._module.List TInt))) (and (= 4 $FunctionContextHeight) (= (ControlFlow 0 21) 20))) anon0_correct)))
PreconditionGeneratedEntry_correct)))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
