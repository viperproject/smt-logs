(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (Bool) T@U)
(declare-fun $generated@@7 (T@U) Bool)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun $generated@@9 (T@U) Int)
(declare-fun $generated@@10 (Real) T@U)
(declare-fun $generated@@11 (T@U) Real)
(declare-fun $generated@@18 (T@U) T@U)
(declare-fun $generated@@19 (T@U T@U) Bool)
(declare-fun $generated@@20 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@21 () T@T)
(declare-fun $generated@@22 () T@T)
(declare-fun $generated@@23 () T@T)
(declare-fun $generated@@24 (T@T T@T) T@T)
(declare-fun $generated@@25 (T@T T@U) T@U)
(declare-fun $generated@@26 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@27 (T@T) T@T)
(declare-fun $generated@@28 (T@T) T@T)
(declare-fun $generated@@49 (T@T T@U) T@U)
(declare-fun $generated@@52 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@63 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@64 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@65 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@4) 1)) (= ($generated@@2 $generated@@5) 2)) (forall (($generated@@12 Bool) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Int) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Real) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))))
(assert (distinct $generated $generated@@0 $generated@@1)
)
(assert (= ($generated@@18 $generated) $generated@@0))
(assert  (and (and (and (and (and (and (and (forall (($generated@@29 T@T) ($generated@@30 T@T) ($generated@@31 T@U) ($generated@@32 T@U) ($generated@@33 T@U) ) (! (= ($generated@@20 $generated@@29 $generated@@30 ($generated@@26 $generated@@29 $generated@@30 $generated@@32 $generated@@33 $generated@@31) $generated@@33) $generated@@31)
 :weight 0
)) (forall (($generated@@34 T@T) ($generated@@35 T@T) ($generated@@36 T@U) ($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (!  (or (= $generated@@38 $generated@@39) (= ($generated@@20 $generated@@34 $generated@@35 ($generated@@26 $generated@@34 $generated@@35 $generated@@37 $generated@@38 $generated@@36) $generated@@39) ($generated@@20 $generated@@34 $generated@@35 $generated@@37 $generated@@39)))
 :weight 0
))) (= ($generated@@2 $generated@@21) 3)) (= ($generated@@2 $generated@@22) 4)) (= ($generated@@2 $generated@@23) 5)) (forall (($generated@@40 T@T) ($generated@@41 T@T) ) (= ($generated@@2 ($generated@@24 $generated@@40 $generated@@41)) 6))) (forall (($generated@@42 T@T) ($generated@@43 T@T) ) (! (= ($generated@@27 ($generated@@24 $generated@@42 $generated@@43)) $generated@@42)
 :pattern ( ($generated@@24 $generated@@42 $generated@@43))
))) (forall (($generated@@44 T@T) ($generated@@45 T@T) ) (! (= ($generated@@28 ($generated@@24 $generated@@44 $generated@@45)) $generated@@45)
 :pattern ( ($generated@@24 $generated@@44 $generated@@45))
))))
(assert (forall (($generated@@46 T@U) ($generated@@47 T@U) ) (!  (=> ($generated@@19 $generated@@46 $generated@@47) (forall (($generated@@48 T@U) ) (!  (=> ($generated@@7 ($generated@@25 $generated@@3 ($generated@@20 $generated@@21 $generated@@22 ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@46 $generated@@48) $generated@@1))) ($generated@@7 ($generated@@25 $generated@@3 ($generated@@20 $generated@@21 $generated@@22 ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@47 $generated@@48) $generated@@1))))
 :pattern ( ($generated@@20 $generated@@21 $generated@@22 ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@47 $generated@@48) $generated@@1))
)))
 :pattern ( ($generated@@19 $generated@@46 $generated@@47))
)))
(assert (forall (($generated@@50 T@U) ($generated@@51 T@T) ) (! (= ($generated@@49 $generated@@51 ($generated@@25 $generated@@51 $generated@@50)) $generated@@50)
 :pattern ( ($generated@@25 $generated@@51 $generated@@50))
)))
(assert (forall (($generated@@53 T@U) ($generated@@54 T@U) ($generated@@55 T@U) ($generated@@56 T@U) ($generated@@57 T@T) ) (!  (=> ($generated@@19 $generated@@53 $generated@@54) (=> ($generated@@52 $generated@@57 $generated@@55 $generated@@56 $generated@@53) ($generated@@52 $generated@@57 $generated@@55 $generated@@56 $generated@@54)))
 :pattern ( ($generated@@19 $generated@@53 $generated@@54) ($generated@@52 $generated@@57 $generated@@55 $generated@@56 $generated@@53))
)))
(assert (forall (($generated@@58 T@U) ($generated@@59 T@U) ($generated@@60 T@U) ) (!  (=> (or (not (= $generated@@58 $generated@@60)) (not true)) (=> (and ($generated@@19 $generated@@58 $generated@@59) ($generated@@19 $generated@@59 $generated@@60)) ($generated@@19 $generated@@58 $generated@@60)))
 :pattern ( ($generated@@19 $generated@@58 $generated@@59) ($generated@@19 $generated@@59 $generated@@60))
)))
(assert (forall (($generated@@61 T@U) ($generated@@62 T@T) ) (! (= ($generated@@25 $generated@@62 ($generated@@49 $generated@@62 $generated@@61)) $generated@@61)
 :pattern ( ($generated@@49 $generated@@62 $generated@@61))
)))
(assert  (and (forall (($generated@@66 T@T) ($generated@@67 T@T) ($generated@@68 T@T) ($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (! (= ($generated@@63 $generated@@66 $generated@@67 $generated@@68 ($generated@@65 $generated@@66 $generated@@67 $generated@@68 $generated@@70 $generated@@71 $generated@@72 $generated@@69) $generated@@71 $generated@@72) $generated@@69)
 :weight 0
)) (and (forall (($generated@@73 T@T) ($generated@@74 T@T) ($generated@@75 T@T) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ) (!  (or (= $generated@@78 $generated@@80) (= ($generated@@63 $generated@@73 $generated@@74 $generated@@75 ($generated@@65 $generated@@73 $generated@@74 $generated@@75 $generated@@77 $generated@@78 $generated@@79 $generated@@76) $generated@@80 $generated@@81) ($generated@@63 $generated@@73 $generated@@74 $generated@@75 $generated@@77 $generated@@80 $generated@@81)))
 :weight 0
)) (forall (($generated@@82 T@T) ($generated@@83 T@T) ($generated@@84 T@T) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ) (!  (or (= $generated@@88 $generated@@90) (= ($generated@@63 $generated@@82 $generated@@83 $generated@@84 ($generated@@65 $generated@@82 $generated@@83 $generated@@84 $generated@@86 $generated@@87 $generated@@88 $generated@@85) $generated@@89 $generated@@90) ($generated@@63 $generated@@82 $generated@@83 $generated@@84 $generated@@86 $generated@@89 $generated@@90)))
 :weight 0
)))))
(assert (forall (($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 Bool) ($generated@@95 T@U) ($generated@@96 T@U) ) (! (= ($generated@@7 ($generated@@63 $generated@@23 $generated@@21 $generated@@3 ($generated@@64 $generated@@91 $generated@@92 $generated@@93 $generated@@94) $generated@@95 $generated@@96))  (=> (and (or (not (= $generated@@95 $generated@@91)) (not true)) ($generated@@7 ($generated@@25 $generated@@3 ($generated@@20 $generated@@21 $generated@@22 ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@92 $generated@@95) $generated@@93)))) $generated@@94))
 :pattern ( ($generated@@63 $generated@@23 $generated@@21 $generated@@3 ($generated@@64 $generated@@91 $generated@@92 $generated@@93 $generated@@94) $generated@@95 $generated@@96))
)))
(assert (forall (($generated@@97 T@U) ($generated@@98 T@U) ) (! ($generated@@52 $generated@@4 $generated@@98 $generated $generated@@97)
 :pattern ( ($generated@@52 $generated@@4 $generated@@98 $generated $generated@@97))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@99 () Int)
(declare-fun $generated@@100 () T@U)
(declare-fun $generated@@101 (Int) Bool)
(declare-fun $generated@@102 (Int) Bool)
(declare-fun $generated@@103 () Int)
(declare-fun $generated@@104 () T@U)
(declare-fun $generated@@105 (T@U) Bool)
(declare-fun $generated@@106 (T@U) Bool)
(declare-fun $generated@@107 () T@U)
(declare-fun $generated@@108 () Int)
(declare-fun $generated@@109 () T@U)
(declare-fun $generated@@110 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 10) (let (($generated@@111 true))
(let (($generated@@112  (=> (and (and ($generated@@52 $generated@@4 ($generated@@8 $generated@@99) $generated $generated@@100) ($generated@@101 $generated@@99)) (and (forall (($generated@@113 Int) ) (! ($generated@@101 $generated@@113)
 :pattern ( ($generated@@102 $generated@@113))
)) (= (ControlFlow 0 4) (- 0 3)))) (exists (($generated@@114 Int) ) (! ($generated@@102 $generated@@114)
 :pattern ( ($generated@@102 $generated@@114))
)))))
(let (($generated@@115  (=> ($generated@@52 $generated@@4 ($generated@@8 $generated@@103) $generated $generated@@104) (=> (and ($generated@@101 $generated@@103) (forall (($generated@@116 Int) ) (! ($generated@@101 $generated@@116)
 :pattern ( ($generated@@102 $generated@@116))
))) (and (=> (= (ControlFlow 0 6) (- 0 7)) (exists (($generated@@117 Int) ) (! ($generated@@102 $generated@@117)
 :pattern ( ($generated@@102 $generated@@117))
))) (=> (exists (($generated@@118 Int) ) (! ($generated@@102 $generated@@118)
 :pattern ( ($generated@@102 $generated@@118))
)) (=> (and (and ($generated@@105 $generated@@100) ($generated@@106 $generated@@100)) (and (forall (($generated@@119 T@U) ) (!  (=> (and (or (not (= $generated@@119 $generated@@107)) (not true)) ($generated@@7 ($generated@@25 $generated@@3 ($generated@@20 $generated@@21 $generated@@22 ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@104 $generated@@119) $generated@@1)))) (= ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@100 $generated@@119) ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@104 $generated@@119)))
 :pattern ( ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@100 $generated@@119))
)) ($generated@@19 $generated@@104 $generated@@100))) (and (=> (= (ControlFlow 0 6) 4) $generated@@112) (=> (= (ControlFlow 0 6) 5) $generated@@111)))))))))
(let (($generated@@120 true))
(let (($generated@@121  (=> (and (and ($generated@@52 $generated@@4 ($generated@@8 $generated@@108) $generated $generated@@104) ($generated@@101 $generated@@108)) (and (forall (($generated@@122 Int) ) (! ($generated@@101 $generated@@122)
 :pattern ( ($generated@@102 $generated@@122))
)) (exists (($generated@@123 Int) ) (! ($generated@@102 $generated@@123)
 :pattern ( ($generated@@102 $generated@@123))
)))) (and (=> (= (ControlFlow 0 8) 6) $generated@@115) (=> (= (ControlFlow 0 8) 2) $generated@@120)))))
(let (($generated@@124 true))
(let (($generated@@125  (=> (= $generated@@109 ($generated@@64 $generated@@107 $generated@@104 $generated@@1 false)) (and (=> (= (ControlFlow 0 9) 8) $generated@@121) (=> (= (ControlFlow 0 9) 1) $generated@@124)))))
(let (($generated@@126  (=> (and (and ($generated@@105 $generated@@104) ($generated@@106 $generated@@104)) (and (= 1 $generated@@110) (= (ControlFlow 0 10) 9))) $generated@@125)))
$generated@@126)))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
