(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 (T@U) T@U)
(declare-fun $generated@@22 (T@U) Bool)
(declare-fun $generated@@23 (T@T T@U T@U) Bool)
(declare-fun $generated@@24 () T@T)
(declare-fun $generated@@25 () T@U)
(declare-fun $generated@@27 () Int)
(declare-fun $generated@@28 () Bool)
(declare-fun $generated@@29 () T@U)
(declare-fun $generated@@30 (Int Int) T@U)
(declare-fun $generated@@33 (Int) Int)
(declare-fun $generated@@35 (T@T T@U) T@U)
(declare-fun $generated@@38 (T@U) T@U)
(declare-fun $generated@@40 (T@T T@U) T@U)
(declare-fun $generated@@41 (T@T T@U) T@U)
(declare-fun $generated@@49 (T@U) Int)
(declare-fun $generated@@52 (T@U) Int)
(declare-fun $generated@@57 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@58 () T@T)
(declare-fun $generated@@59 () T@T)
(declare-fun $generated@@60 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@61 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@62 () T@T)
(declare-fun $generated@@63 (T@T T@T) T@T)
(declare-fun $generated@@64 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@65 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@66 (T@T) T@T)
(declare-fun $generated@@67 (T@T) T@T)
(declare-fun $generated@@116 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert (= ($generated@@21 $generated) $generated@@0))
(assert (= ($generated@@5 $generated@@24) 3))
(assert (forall (($generated@@26 T@U) ) (!  (=> ($generated@@23 $generated@@24 $generated@@26 $generated@@25) ($generated@@22 $generated@@26))
 :pattern ( ($generated@@22 $generated@@26) ($generated@@23 $generated@@24 $generated@@26 $generated@@25))
)))
(assert  (=> (<= 1 $generated@@27) (=> (or $generated@@28 (< 1 $generated@@27)) ($generated@@23 $generated@@24 $generated@@29 $generated@@25))))
(assert (forall (($generated@@31 Int) ($generated@@32 Int) ) (! (= ($generated@@23 $generated@@24 ($generated@@30 $generated@@31 $generated@@32) $generated@@25)  (and ($generated@@23 $generated@@7 ($generated@@11 $generated@@31) $generated) ($generated@@23 $generated@@7 ($generated@@11 $generated@@32) $generated)))
 :pattern ( ($generated@@23 $generated@@24 ($generated@@30 $generated@@31 $generated@@32) $generated@@25))
)))
(assert (forall (($generated@@34 Int) ) (! (= ($generated@@33 $generated@@34) $generated@@34)
 :pattern ( ($generated@@33 $generated@@34))
)))
(assert (forall (($generated@@36 T@U) ($generated@@37 T@T) ) (! (= ($generated@@35 $generated@@37 $generated@@36) $generated@@36)
 :pattern ( ($generated@@35 $generated@@37 $generated@@36))
)))
(assert (forall (($generated@@39 T@U) ) (! (= ($generated@@22 $generated@@39) (= ($generated@@38 $generated@@39) $generated@@3))
 :pattern ( ($generated@@22 $generated@@39))
)))
(assert (forall (($generated@@42 T@U) ($generated@@43 T@T) ) (! (= ($generated@@41 $generated@@43 ($generated@@40 $generated@@43 $generated@@42)) $generated@@42)
 :pattern ( ($generated@@40 $generated@@43 $generated@@42))
)))
(assert (forall (($generated@@44 T@U) ) (!  (=> ($generated@@22 $generated@@44) (exists (($generated@@45 Int) ($generated@@46 Int) ) (= $generated@@44 ($generated@@30 $generated@@45 $generated@@46))))
 :pattern ( ($generated@@22 $generated@@44))
)))
(assert  (=> (<= 1 $generated@@27) (=> (or $generated@@28 (< 1 $generated@@27)) (= $generated@@29 ($generated@@35 $generated@@24 ($generated@@30 ($generated@@33 1) ($generated@@33 2)))))))
(assert  (=> (<= 1 $generated@@27) (=> (or $generated@@28 (< 1 $generated@@27)) (= $generated@@29 ($generated@@35 $generated@@24 ($generated@@30 ($generated@@33 1) ($generated@@33 2)))))))
(assert (forall (($generated@@47 Int) ($generated@@48 Int) ) (! (= ($generated@@38 ($generated@@30 $generated@@47 $generated@@48)) $generated@@3)
 :pattern ( ($generated@@30 $generated@@47 $generated@@48))
)))
(assert (forall (($generated@@50 Int) ($generated@@51 Int) ) (! (= ($generated@@49 ($generated@@30 $generated@@50 $generated@@51)) $generated@@50)
 :pattern ( ($generated@@30 $generated@@50 $generated@@51))
)))
(assert (forall (($generated@@53 Int) ($generated@@54 Int) ) (! (= ($generated@@52 ($generated@@30 $generated@@53 $generated@@54)) $generated@@54)
 :pattern ( ($generated@@30 $generated@@53 $generated@@54))
)))
(assert (forall (($generated@@55 T@U) ($generated@@56 T@T) ) (! (= ($generated@@40 $generated@@56 ($generated@@41 $generated@@56 $generated@@55)) $generated@@55)
 :pattern ( ($generated@@41 $generated@@56 $generated@@55))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@68 T@T) ($generated@@69 T@T) ($generated@@70 T@T) ($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@U) ) (! (= ($generated@@57 $generated@@68 $generated@@69 $generated@@70 ($generated@@64 $generated@@68 $generated@@69 $generated@@70 $generated@@72 $generated@@73 $generated@@74 $generated@@71) $generated@@73 $generated@@74) $generated@@71)
 :weight 0
)) (and (forall (($generated@@75 T@T) ($generated@@76 T@T) ($generated@@77 T@T) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ) (!  (or (= $generated@@80 $generated@@82) (= ($generated@@57 $generated@@75 $generated@@76 $generated@@77 ($generated@@64 $generated@@75 $generated@@76 $generated@@77 $generated@@79 $generated@@80 $generated@@81 $generated@@78) $generated@@82 $generated@@83) ($generated@@57 $generated@@75 $generated@@76 $generated@@77 $generated@@79 $generated@@82 $generated@@83)))
 :weight 0
)) (forall (($generated@@84 T@T) ($generated@@85 T@T) ($generated@@86 T@T) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ) (!  (or (= $generated@@90 $generated@@92) (= ($generated@@57 $generated@@84 $generated@@85 $generated@@86 ($generated@@64 $generated@@84 $generated@@85 $generated@@86 $generated@@88 $generated@@89 $generated@@90 $generated@@87) $generated@@91 $generated@@92) ($generated@@57 $generated@@84 $generated@@85 $generated@@86 $generated@@88 $generated@@91 $generated@@92)))
 :weight 0
)))) (= ($generated@@5 $generated@@58) 4)) (= ($generated@@5 $generated@@59) 5)) (forall (($generated@@93 T@T) ($generated@@94 T@T) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (! (= ($generated@@61 $generated@@93 $generated@@94 ($generated@@65 $generated@@93 $generated@@94 $generated@@96 $generated@@97 $generated@@95) $generated@@97) $generated@@95)
 :weight 0
))) (forall (($generated@@98 T@T) ($generated@@99 T@T) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ) (!  (or (= $generated@@102 $generated@@103) (= ($generated@@61 $generated@@98 $generated@@99 ($generated@@65 $generated@@98 $generated@@99 $generated@@101 $generated@@102 $generated@@100) $generated@@103) ($generated@@61 $generated@@98 $generated@@99 $generated@@101 $generated@@103)))
 :weight 0
))) (= ($generated@@5 $generated@@62) 6)) (forall (($generated@@104 T@T) ($generated@@105 T@T) ) (= ($generated@@5 ($generated@@63 $generated@@104 $generated@@105)) 7))) (forall (($generated@@106 T@T) ($generated@@107 T@T) ) (! (= ($generated@@66 ($generated@@63 $generated@@106 $generated@@107)) $generated@@106)
 :pattern ( ($generated@@63 $generated@@106 $generated@@107))
))) (forall (($generated@@108 T@T) ($generated@@109 T@T) ) (! (= ($generated@@67 ($generated@@63 $generated@@108 $generated@@109)) $generated@@109)
 :pattern ( ($generated@@63 $generated@@108 $generated@@109))
))))
(assert (forall (($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 Bool) ($generated@@114 T@U) ($generated@@115 T@U) ) (! (= ($generated@@10 ($generated@@57 $generated@@58 $generated@@59 $generated@@6 ($generated@@60 $generated@@110 $generated@@111 $generated@@112 $generated@@113) $generated@@114 $generated@@115))  (=> (and (or (not (= $generated@@114 $generated@@110)) (not true)) ($generated@@10 ($generated@@40 $generated@@6 ($generated@@61 $generated@@59 $generated@@62 ($generated@@61 $generated@@58 ($generated@@63 $generated@@59 $generated@@62) $generated@@111 $generated@@114) $generated@@112)))) $generated@@113))
 :pattern ( ($generated@@57 $generated@@58 $generated@@59 $generated@@6 ($generated@@60 $generated@@110 $generated@@111 $generated@@112 $generated@@113) $generated@@114 $generated@@115))
)))
(assert (= ($generated@@21 $generated@@25) $generated@@2))
(assert (= ($generated@@116 $generated@@25) $generated@@4))
(assert (forall (($generated@@117 Int) ($generated@@118 Int) ) (! (= ($generated@@30 ($generated@@33 $generated@@117) ($generated@@33 $generated@@118)) ($generated@@35 $generated@@24 ($generated@@30 $generated@@117 $generated@@118)))
 :pattern ( ($generated@@30 ($generated@@33 $generated@@117) ($generated@@33 $generated@@118)))
)))
(assert (forall (($generated@@119 Int) ) (! (= ($generated@@41 $generated@@7 ($generated@@11 ($generated@@33 $generated@@119))) ($generated@@35 $generated@@62 ($generated@@41 $generated@@7 ($generated@@11 $generated@@119))))
 :pattern ( ($generated@@41 $generated@@7 ($generated@@11 ($generated@@33 $generated@@119))))
)))
(assert (forall (($generated@@120 T@U) ($generated@@121 T@T) ) (! (= ($generated@@41 $generated@@121 ($generated@@35 $generated@@121 $generated@@120)) ($generated@@35 $generated@@62 ($generated@@41 $generated@@121 $generated@@120)))
 :pattern ( ($generated@@41 $generated@@121 ($generated@@35 $generated@@121 $generated@@120)))
)))
(assert (forall (($generated@@122 T@U) ) (! ($generated@@23 $generated@@7 $generated@@122 $generated)
 :pattern ( ($generated@@23 $generated@@7 $generated@@122 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@123 () T@U)
(declare-fun $generated@@124 () T@U)
(declare-fun $generated@@125 () T@U)
(declare-fun $generated@@126 () T@U)
(declare-fun $generated@@127 () Int)
(declare-fun $generated@@128 () Int)
(declare-fun $generated@@129 (T@U) Bool)
(declare-fun $generated@@130 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@131  (=> (and (= $generated@@123 ($generated@@60 $generated@@124 $generated@@125 $generated@@1 false)) $generated@@28) (=> (and (and (and ($generated@@22 ($generated@@35 $generated@@24 $generated@@29)) (= $generated@@126 ($generated@@35 $generated@@24 $generated@@29))) (and $generated@@28 $generated@@28)) (and (and ($generated@@23 $generated@@24 $generated@@126 $generated@@25) ($generated@@22 $generated@@126)) (and (= ($generated@@30 $generated@@127 $generated@@128) $generated@@126) (= (ControlFlow 0 2) (- 0 1))))) (let (($generated@@132 ($generated@@52 ($generated@@35 $generated@@24 $generated@@29))))
(let (($generated@@133 ($generated@@49 ($generated@@35 $generated@@24 $generated@@29))))
(< $generated@@133 $generated@@132)))))))
(let (($generated@@134  (=> (and (and ($generated@@129 $generated@@125) ($generated@@130 $generated@@125)) (and (= 2 $generated@@27) (= (ControlFlow 0 3) 2))) $generated@@131)))
$generated@@134)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
