(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (Bool) T@U)
(declare-fun $generated@@7 (T@U) Bool)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun $generated@@9 (T@U) Int)
(declare-fun $generated@@10 (Real) T@U)
(declare-fun $generated@@11 (T@U) Real)
(declare-fun $generated@@18 () Int)
(declare-fun $generated@@19 (Int) Bool)
(declare-fun $generated@@20 (Int) Int)
(declare-fun $generated@@21 (Int) Bool)
(declare-fun $generated@@22 (Int Int) Int)
(declare-fun $generated@@24 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@25 () T@U)
(declare-fun $generated@@28 (T@U Int Int) Int)
(declare-fun $generated@@29 (Int Int) Bool)
(declare-fun $generated@@34 (T@T T@U) T@U)
(declare-fun $generated@@37 (T@U) T@U)
(declare-fun $generated@@41 (T@T T@U) T@U)
(declare-fun $generated@@42 (T@T T@U) T@U)
(declare-fun $generated@@45 (T@T T@U T@U) Bool)
(declare-fun $generated@@50 (Int Int) Int)
(declare-fun $generated@@58 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@59 () T@T)
(declare-fun $generated@@60 () T@T)
(declare-fun $generated@@61 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@62 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@63 () T@T)
(declare-fun $generated@@64 (T@T T@T) T@T)
(declare-fun $generated@@65 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@66 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@67 (T@T) T@T)
(declare-fun $generated@@68 (T@T) T@T)
(declare-fun $generated@@120 (T@U) T@U)
(declare-fun $generated@@121 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@4) 1)) (= ($generated@@2 $generated@@5) 2)) (forall (($generated@@12 Bool) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Int) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Real) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))))
(assert (distinct $generated $generated@@0 $generated@@1)
)
(assert  (=> (<= 0 $generated@@18) (forall (($generated@@23 Int) ) (!  (=> (or ($generated@@21 ($generated@@20 $generated@@23)) (and (< 0 $generated@@18) (<= ($generated@@20 0) $generated@@23))) (= ($generated@@19 ($generated@@20 $generated@@23)) (= ($generated@@20 ($generated@@22 $generated@@23 ($generated@@20 2))) ($generated@@20 0))))
 :weight 3
 :pattern ( ($generated@@19 ($generated@@20 $generated@@23)))
))))
(assert (forall (($generated@@26 T@U) ($generated@@27 T@U) ) (! ($generated@@24 $generated@@4 $generated@@26 $generated@@25 $generated@@27)
 :pattern ( ($generated@@24 $generated@@4 $generated@@26 $generated@@25 $generated@@27))
)))
(assert  (=> (<= 0 $generated@@18) (forall (($generated@@30 T@U) ($generated@@31 Int) ($generated@@32 Int) ) (!  (=> (or ($generated@@29 $generated@@31 $generated@@32) (and (< 0 $generated@@18) (and (<= ($generated@@20 0) $generated@@31) (<= ($generated@@20 0) $generated@@32)))) (<= ($generated@@20 0) ($generated@@28 $generated@@30 $generated@@31 $generated@@32)))
 :pattern ( ($generated@@28 $generated@@30 $generated@@31 $generated@@32))
))))
(assert (forall (($generated@@33 Int) ) (! (= ($generated@@20 $generated@@33) $generated@@33)
 :pattern ( ($generated@@20 $generated@@33))
)))
(assert (forall (($generated@@35 T@U) ($generated@@36 T@T) ) (! (= ($generated@@34 $generated@@36 $generated@@35) $generated@@35)
 :pattern ( ($generated@@34 $generated@@36 $generated@@35))
)))
(assert  (=> (<= 0 $generated@@18) (forall (($generated@@38 T@U) ($generated@@39 Int) ($generated@@40 Int) ) (!  (=> (or ($generated@@29 ($generated@@20 $generated@@39) ($generated@@20 $generated@@40)) (and (< 0 $generated@@18) (and (<= ($generated@@20 0) $generated@@39) (<= ($generated@@20 0) $generated@@40)))) (and (=> (or (not (= ($generated@@20 $generated@@40) ($generated@@20 0))) (not true)) (=> (or (not (= ($generated@@20 $generated@@39) ($generated@@20 0))) (not true)) (and ($generated@@29 ($generated@@20 (- $generated@@39 1)) ($generated@@20 $generated@@40)) ($generated@@29 ($generated@@20 (- $generated@@39 1)) ($generated@@20 (- $generated@@40 1)))))) (= ($generated@@28 ($generated@@37 $generated@@38) ($generated@@20 $generated@@39) ($generated@@20 $generated@@40)) (ite (= ($generated@@20 $generated@@40) ($generated@@20 0)) 1 (ite (= ($generated@@20 $generated@@39) ($generated@@20 0)) 0 (+ ($generated@@28 ($generated@@37 $generated@@38) ($generated@@20 (- $generated@@39 1)) ($generated@@20 $generated@@40)) ($generated@@28 ($generated@@37 $generated@@38) ($generated@@20 (- $generated@@39 1)) ($generated@@20 (- $generated@@40 1)))))))))
 :weight 3
 :pattern ( ($generated@@28 ($generated@@37 $generated@@38) ($generated@@20 $generated@@39) ($generated@@20 $generated@@40)))
))))
(assert (forall (($generated@@43 T@U) ($generated@@44 T@T) ) (! (= ($generated@@42 $generated@@44 ($generated@@41 $generated@@44 $generated@@43)) $generated@@43)
 :pattern ( ($generated@@41 $generated@@44 $generated@@43))
)))
(assert (forall (($generated@@46 T@U) ) (! (= ($generated@@45 $generated@@4 $generated@@46 $generated@@25) (<= ($generated@@20 0) ($generated@@9 $generated@@46)))
 :pattern ( ($generated@@45 $generated@@4 $generated@@46 $generated@@25))
)))
(assert (forall (($generated@@47 T@U) ($generated@@48 Int) ($generated@@49 Int) ) (! (= ($generated@@28 ($generated@@37 $generated@@47) $generated@@48 $generated@@49) ($generated@@28 $generated@@47 $generated@@48 $generated@@49))
 :pattern ( ($generated@@28 ($generated@@37 $generated@@47) $generated@@48 $generated@@49))
)))
(assert (forall (($generated@@51 Int) ($generated@@52 Int) ) (! (= ($generated@@50 $generated@@51 $generated@@52) (div $generated@@51 $generated@@52))
 :pattern ( ($generated@@50 $generated@@51 $generated@@52))
)))
(assert  (=> (<= 0 $generated@@18) (forall (($generated@@53 T@U) ($generated@@54 Int) ($generated@@55 Int) ) (!  (=> (or ($generated@@29 $generated@@54 $generated@@55) (and (< 0 $generated@@18) (and (<= ($generated@@20 0) $generated@@54) (<= ($generated@@20 0) $generated@@55)))) (and (=> (or (not (= $generated@@55 ($generated@@20 0))) (not true)) (=> (or (not (= $generated@@54 ($generated@@20 0))) (not true)) (and ($generated@@29 (- $generated@@54 1) $generated@@55) ($generated@@29 (- $generated@@54 1) (- $generated@@55 1))))) (= ($generated@@28 ($generated@@37 $generated@@53) $generated@@54 $generated@@55) (ite (= $generated@@55 ($generated@@20 0)) 1 (ite (= $generated@@54 ($generated@@20 0)) 0 (+ ($generated@@28 $generated@@53 (- $generated@@54 1) $generated@@55) ($generated@@28 $generated@@53 (- $generated@@54 1) (- $generated@@55 1))))))))
 :pattern ( ($generated@@28 ($generated@@37 $generated@@53) $generated@@54 $generated@@55))
))))
(assert (forall (($generated@@56 T@U) ($generated@@57 T@T) ) (! (= ($generated@@41 $generated@@57 ($generated@@42 $generated@@57 $generated@@56)) $generated@@56)
 :pattern ( ($generated@@42 $generated@@57 $generated@@56))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@69 T@T) ($generated@@70 T@T) ($generated@@71 T@T) ($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@U) ) (! (= ($generated@@58 $generated@@69 $generated@@70 $generated@@71 ($generated@@65 $generated@@69 $generated@@70 $generated@@71 $generated@@73 $generated@@74 $generated@@75 $generated@@72) $generated@@74 $generated@@75) $generated@@72)
 :weight 0
)) (and (forall (($generated@@76 T@T) ($generated@@77 T@T) ($generated@@78 T@T) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ) (!  (or (= $generated@@81 $generated@@83) (= ($generated@@58 $generated@@76 $generated@@77 $generated@@78 ($generated@@65 $generated@@76 $generated@@77 $generated@@78 $generated@@80 $generated@@81 $generated@@82 $generated@@79) $generated@@83 $generated@@84) ($generated@@58 $generated@@76 $generated@@77 $generated@@78 $generated@@80 $generated@@83 $generated@@84)))
 :weight 0
)) (forall (($generated@@85 T@T) ($generated@@86 T@T) ($generated@@87 T@T) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ) (!  (or (= $generated@@91 $generated@@93) (= ($generated@@58 $generated@@85 $generated@@86 $generated@@87 ($generated@@65 $generated@@85 $generated@@86 $generated@@87 $generated@@89 $generated@@90 $generated@@91 $generated@@88) $generated@@92 $generated@@93) ($generated@@58 $generated@@85 $generated@@86 $generated@@87 $generated@@89 $generated@@92 $generated@@93)))
 :weight 0
)))) (= ($generated@@2 $generated@@59) 3)) (= ($generated@@2 $generated@@60) 4)) (forall (($generated@@94 T@T) ($generated@@95 T@T) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ) (! (= ($generated@@62 $generated@@94 $generated@@95 ($generated@@66 $generated@@94 $generated@@95 $generated@@97 $generated@@98 $generated@@96) $generated@@98) $generated@@96)
 :weight 0
))) (forall (($generated@@99 T@T) ($generated@@100 T@T) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ) (!  (or (= $generated@@103 $generated@@104) (= ($generated@@62 $generated@@99 $generated@@100 ($generated@@66 $generated@@99 $generated@@100 $generated@@102 $generated@@103 $generated@@101) $generated@@104) ($generated@@62 $generated@@99 $generated@@100 $generated@@102 $generated@@104)))
 :weight 0
))) (= ($generated@@2 $generated@@63) 5)) (forall (($generated@@105 T@T) ($generated@@106 T@T) ) (= ($generated@@2 ($generated@@64 $generated@@105 $generated@@106)) 6))) (forall (($generated@@107 T@T) ($generated@@108 T@T) ) (! (= ($generated@@67 ($generated@@64 $generated@@107 $generated@@108)) $generated@@107)
 :pattern ( ($generated@@64 $generated@@107 $generated@@108))
))) (forall (($generated@@109 T@T) ($generated@@110 T@T) ) (! (= ($generated@@68 ($generated@@64 $generated@@109 $generated@@110)) $generated@@110)
 :pattern ( ($generated@@64 $generated@@109 $generated@@110))
))))
(assert (forall (($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 Bool) ($generated@@115 T@U) ($generated@@116 T@U) ) (! (= ($generated@@7 ($generated@@58 $generated@@59 $generated@@60 $generated@@3 ($generated@@61 $generated@@111 $generated@@112 $generated@@113 $generated@@114) $generated@@115 $generated@@116))  (=> (and (or (not (= $generated@@115 $generated@@111)) (not true)) ($generated@@7 ($generated@@41 $generated@@3 ($generated@@62 $generated@@60 $generated@@63 ($generated@@62 $generated@@59 ($generated@@64 $generated@@60 $generated@@63) $generated@@112 $generated@@115) $generated@@113)))) $generated@@114))
 :pattern ( ($generated@@58 $generated@@59 $generated@@60 $generated@@3 ($generated@@61 $generated@@111 $generated@@112 $generated@@113 $generated@@114) $generated@@115 $generated@@116))
)))
(assert (forall (($generated@@117 Int) ($generated@@118 Int) ) (! (= ($generated@@22 $generated@@117 $generated@@118) (mod $generated@@117 $generated@@118))
 :pattern ( ($generated@@22 $generated@@117 $generated@@118))
)))
(assert  (=> (<= 0 $generated@@18) (forall (($generated@@119 Int) ) (!  (=> (or ($generated@@21 $generated@@119) (and (< 0 $generated@@18) (<= ($generated@@20 0) $generated@@119))) (= ($generated@@19 $generated@@119) (= ($generated@@22 $generated@@119 ($generated@@20 2)) ($generated@@20 0))))
 :pattern ( ($generated@@19 $generated@@119))
))))
(assert (= ($generated@@120 $generated@@25) $generated@@0))
(assert (= ($generated@@121 $generated@@25) $generated@@1))
(assert (forall (($generated@@122 Int) ) (! (= ($generated@@42 $generated@@4 ($generated@@8 ($generated@@20 $generated@@122))) ($generated@@34 $generated@@63 ($generated@@42 $generated@@4 ($generated@@8 $generated@@122))))
 :pattern ( ($generated@@42 $generated@@4 ($generated@@8 ($generated@@20 $generated@@122))))
)))
(assert (forall (($generated@@123 T@U) ($generated@@124 T@T) ) (! (= ($generated@@42 $generated@@124 ($generated@@34 $generated@@124 $generated@@123)) ($generated@@34 $generated@@63 ($generated@@42 $generated@@124 $generated@@123)))
 :pattern ( ($generated@@42 $generated@@124 ($generated@@34 $generated@@124 $generated@@123)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@125 () Int)
(declare-fun $generated@@126 () Int)
(declare-fun $generated@@127 () Int)
(declare-fun $generated@@128 () T@U)
(declare-fun $generated@@129 () Int)
(declare-fun $generated@@130 () T@U)
(declare-fun $generated@@131 () T@U)
(declare-fun $generated@@132 () T@U)
(declare-fun $generated@@133 (T@U) Bool)
(declare-fun $generated@@134 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 13) (let (($generated@@135 true))
(let (($generated@@136  (=> (not (and ($generated@@19 $generated@@125) (not ($generated@@19 $generated@@126)))) (and (=> (= (ControlFlow 0 3) (- 0 8)) (or (not (= ($generated@@20 2) 0)) (not true))) (=> (or (not (= ($generated@@20 2) 0)) (not true)) (and (=> (= (ControlFlow 0 3) (- 0 7)) ($generated@@45 $generated@@4 ($generated@@8 ($generated@@50 $generated@@125 ($generated@@20 2))) $generated@@25)) (=> ($generated@@45 $generated@@4 ($generated@@8 ($generated@@50 $generated@@125 ($generated@@20 2))) $generated@@25) (=> (and (= $generated@@127 ($generated@@50 $generated@@125 ($generated@@20 2))) ($generated@@24 $generated@@4 ($generated@@8 $generated@@127) $generated@@25 $generated@@128)) (and (=> (= (ControlFlow 0 3) (- 0 6)) (or (not (= ($generated@@20 2) 0)) (not true))) (=> (or (not (= ($generated@@20 2) 0)) (not true)) (and (=> (= (ControlFlow 0 3) (- 0 5)) ($generated@@45 $generated@@4 ($generated@@8 ($generated@@50 $generated@@126 ($generated@@20 2))) $generated@@25)) (=> ($generated@@45 $generated@@4 ($generated@@8 ($generated@@50 $generated@@126 ($generated@@20 2))) $generated@@25) (=> (= $generated@@129 ($generated@@50 $generated@@126 ($generated@@20 2))) (=> (and ($generated@@24 $generated@@4 ($generated@@8 $generated@@129) $generated@@25 $generated@@128) ($generated@@29 ($generated@@50 $generated@@125 ($generated@@20 2)) ($generated@@50 $generated@@126 ($generated@@20 2)))) (and (=> (= (ControlFlow 0 3) (- 0 4)) (or (not (= ($generated@@20 2) 0)) (not true))) (=> (or (not (= ($generated@@20 2) 0)) (not true)) (=> (= (ControlFlow 0 3) 1) $generated@@135)))))))))))))))))
(let (($generated@@137  (=> (and (and ($generated@@19 $generated@@125) (not ($generated@@19 $generated@@126))) (= (ControlFlow 0 2) 1)) $generated@@135)))
(let (($generated@@138  (=> (not ($generated@@19 $generated@@125)) (and (=> (= (ControlFlow 0 10) 2) $generated@@137) (=> (= (ControlFlow 0 10) 3) $generated@@136)))))
(let (($generated@@139  (=> ($generated@@19 $generated@@125) (=> (and ($generated@@24 $generated@@4 ($generated@@8 $generated@@126) $generated@@25 $generated@@128) ($generated@@21 $generated@@126)) (and (=> (= (ControlFlow 0 9) 2) $generated@@137) (=> (= (ControlFlow 0 9) 3) $generated@@136))))))
(let (($generated@@140  (=> (= $generated@@130 ($generated@@61 $generated@@131 $generated@@132 $generated false)) (=> (and ($generated@@133 $generated@@128) ($generated@@134 $generated@@128)) (=> (and (and (= $generated@@132 $generated@@128) ($generated@@24 $generated@@4 ($generated@@8 $generated@@125) $generated@@25 $generated@@128)) (and ($generated@@24 $generated@@4 ($generated@@8 $generated@@126) $generated@@25 $generated@@128) ($generated@@29 $generated@@125 $generated@@126))) (and (=> (= (ControlFlow 0 11) (- 0 12)) (or (not (= ($generated@@20 2) 0)) (not true))) (=> (or (not (= ($generated@@20 2) 0)) (not true)) (=> (and ($generated@@24 $generated@@4 ($generated@@8 $generated@@125) $generated@@25 $generated@@128) ($generated@@21 $generated@@125)) (and (=> (= (ControlFlow 0 11) 9) $generated@@139) (=> (= (ControlFlow 0 11) 10) $generated@@138))))))))))
(let (($generated@@141  (=> (and ($generated@@133 $generated@@132) ($generated@@134 $generated@@132)) (=> (and (and (<= ($generated@@20 0) $generated@@125) (<= ($generated@@20 0) $generated@@126)) (and (= 1 $generated@@18) (= (ControlFlow 0 13) 11))) $generated@@140))))
$generated@@141))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
