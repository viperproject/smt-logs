(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TBool () T@U)
(declare-fun TagBool () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._System.___hFunc1 () T@U)
(declare-fun Tagclass._System.___hPartialFunc1 () T@U)
(declare-fun Tagclass._System.___hTotalFunc1 () T@U)
(declare-fun Tagclass._System.___hFunc2 () T@U)
(declare-fun Tagclass._System.___hPartialFunc2 () T@U)
(declare-fun Tagclass._System.___hTotalFunc2 () T@U)
(declare-fun |tytagFamily$_#Func1| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1| () T@U)
(declare-fun |tytagFamily$_#TotalFunc1| () T@U)
(declare-fun |tytagFamily$_#Func2| () T@U)
(declare-fun |tytagFamily$_#PartialFunc2| () T@U)
(declare-fun |tytagFamily$_#TotalFunc2| () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun HandleTypeType () T@T)
(declare-fun Tclass._System.___hTotalFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2 (T@U T@U T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun Requires2 (T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun $OneHeap () T@U)
(declare-fun Tclass._System.___hFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_2 (T@U) T@U)
(declare-fun $AlwaysAllocated (T@U) Bool)
(declare-fun Tclass._module.T () T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun |Set#Empty| () T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun Tclass._System.___hFunc1 (T@U T@U) T@U)
(declare-fun Reads1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun Reads2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass._System.___hPartialFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1 (T@U T@U) T@U)
(declare-fun Apply2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun null () T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun Apply1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Requires1 (T@U T@U T@U T@U T@U) Bool)
(declare-fun Tclass._System.___hFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1_1 (T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TBool TagBool alloc Tagclass._System.___hFunc1 Tagclass._System.___hPartialFunc1 Tagclass._System.___hTotalFunc1 Tagclass._System.___hFunc2 Tagclass._System.___hPartialFunc2 Tagclass._System.___hTotalFunc2 |tytagFamily$_#Func1| |tytagFamily$_#PartialFunc1| |tytagFamily$_#TotalFunc1| |tytagFamily$_#Func2| |tytagFamily$_#PartialFunc2| |tytagFamily$_#TotalFunc2|)
)
(assert (= (Tag TBool) TagBool))
(assert (= (Ctor HandleTypeType) 3))
(assert (forall ((|#$T0| T@U) (|#$T1| T@U) (|#$R| T@U) (|f#0| T@U) ) (! (= ($Is HandleTypeType |f#0| (Tclass._System.___hTotalFunc2 |#$T0| |#$T1| |#$R|))  (and ($Is HandleTypeType |f#0| (Tclass._System.___hPartialFunc2 |#$T0| |#$T1| |#$R|)) (forall ((|x0#0| T@U) (|x1#0| T@U) )  (=> (and ($IsBox |x0#0| |#$T0|) ($IsBox |x1#0| |#$T1|)) (Requires2 |#$T0| |#$T1| |#$R| $OneHeap |f#0| |x0#0| |x1#0|)))))
 :pattern ( ($Is HandleTypeType |f#0| (Tclass._System.___hTotalFunc2 |#$T0| |#$T1| |#$R|)))
)))
(assert (forall ((|#$T0@@0| T@U) (|#$T1@@0| T@U) (|#$R@@0| T@U) ) (! (= (Tclass._System.___hFunc2_0 (Tclass._System.___hFunc2 |#$T0@@0| |#$T1@@0| |#$R@@0|)) |#$T0@@0|)
 :pattern ( (Tclass._System.___hFunc2 |#$T0@@0| |#$T1@@0| |#$R@@0|))
)))
(assert (forall ((|#$T0@@1| T@U) (|#$T1@@1| T@U) (|#$R@@1| T@U) ) (! (= (Tclass._System.___hFunc2_1 (Tclass._System.___hFunc2 |#$T0@@1| |#$T1@@1| |#$R@@1|)) |#$T1@@1|)
 :pattern ( (Tclass._System.___hFunc2 |#$T0@@1| |#$T1@@1| |#$R@@1|))
)))
(assert (forall ((|#$T0@@2| T@U) (|#$T1@@2| T@U) (|#$R@@2| T@U) ) (! (= (Tclass._System.___hFunc2_2 (Tclass._System.___hFunc2 |#$T0@@2| |#$T1@@2| |#$R@@2|)) |#$R@@2|)
 :pattern ( (Tclass._System.___hFunc2 |#$T0@@2| |#$T1@@2| |#$R@@2|))
)))
(assert (forall ((|#$T0@@3| T@U) (|#$T1@@3| T@U) (|#$R@@3| T@U) ) (! (= (Tclass._System.___hPartialFunc2_0 (Tclass._System.___hPartialFunc2 |#$T0@@3| |#$T1@@3| |#$R@@3|)) |#$T0@@3|)
 :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@3| |#$T1@@3| |#$R@@3|))
)))
(assert (forall ((|#$T0@@4| T@U) (|#$T1@@4| T@U) (|#$R@@4| T@U) ) (! (= (Tclass._System.___hPartialFunc2_1 (Tclass._System.___hPartialFunc2 |#$T0@@4| |#$T1@@4| |#$R@@4|)) |#$T1@@4|)
 :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@4| |#$T1@@4| |#$R@@4|))
)))
(assert (forall ((|#$T0@@5| T@U) (|#$T1@@5| T@U) (|#$R@@5| T@U) ) (! (= (Tclass._System.___hPartialFunc2_2 (Tclass._System.___hPartialFunc2 |#$T0@@5| |#$T1@@5| |#$R@@5|)) |#$R@@5|)
 :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@5| |#$T1@@5| |#$R@@5|))
)))
(assert (forall ((|#$T0@@6| T@U) (|#$T1@@6| T@U) (|#$R@@6| T@U) ) (! (= (Tclass._System.___hTotalFunc2_0 (Tclass._System.___hTotalFunc2 |#$T0@@6| |#$T1@@6| |#$R@@6|)) |#$T0@@6|)
 :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@6| |#$T1@@6| |#$R@@6|))
)))
(assert (forall ((|#$T0@@7| T@U) (|#$T1@@7| T@U) (|#$R@@7| T@U) ) (! (= (Tclass._System.___hTotalFunc2_1 (Tclass._System.___hTotalFunc2 |#$T0@@7| |#$T1@@7| |#$R@@7|)) |#$T1@@7|)
 :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@7| |#$T1@@7| |#$R@@7|))
)))
(assert (forall ((|#$T0@@8| T@U) (|#$T1@@8| T@U) (|#$R@@8| T@U) ) (! (= (Tclass._System.___hTotalFunc2_2 (Tclass._System.___hTotalFunc2 |#$T0@@8| |#$T1@@8| |#$R@@8|)) |#$R@@8|)
 :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@8| |#$T1@@8| |#$R@@8|))
)))
(assert ($AlwaysAllocated Tclass._module.T))
(assert (forall ((o T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o))
 :pattern ( (|Set#IsMember| |Set#Empty| o))
)))
(assert (forall ((|#$T0@@9| T@U) (|#$T1@@9| T@U) (|#$R@@9| T@U) ) (!  (and (= (Tag (Tclass._System.___hFunc2 |#$T0@@9| |#$T1@@9| |#$R@@9|)) Tagclass._System.___hFunc2) (= (TagFamily (Tclass._System.___hFunc2 |#$T0@@9| |#$T1@@9| |#$R@@9|)) |tytagFamily$_#Func2|))
 :pattern ( (Tclass._System.___hFunc2 |#$T0@@9| |#$T1@@9| |#$R@@9|))
)))
(assert (forall ((|#$T0@@10| T@U) (|#$T1@@10| T@U) (|#$R@@10| T@U) ) (!  (and (= (Tag (Tclass._System.___hPartialFunc2 |#$T0@@10| |#$T1@@10| |#$R@@10|)) Tagclass._System.___hPartialFunc2) (= (TagFamily (Tclass._System.___hPartialFunc2 |#$T0@@10| |#$T1@@10| |#$R@@10|)) |tytagFamily$_#PartialFunc2|))
 :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@10| |#$T1@@10| |#$R@@10|))
)))
(assert (forall ((|#$T0@@11| T@U) (|#$T1@@11| T@U) (|#$R@@11| T@U) ) (!  (and (= (Tag (Tclass._System.___hTotalFunc2 |#$T0@@11| |#$T1@@11| |#$R@@11|)) Tagclass._System.___hTotalFunc2) (= (TagFamily (Tclass._System.___hTotalFunc2 |#$T0@@11| |#$T1@@11| |#$R@@11|)) |tytagFamily$_#TotalFunc2|))
 :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@11| |#$T1@@11| |#$R@@11|))
)))
(assert (forall ((|#$T0@@12| T@U) (|#$T1@@12| T@U) (|#$R@@12| T@U) (bx T@U) ) (!  (=> ($IsBox bx (Tclass._System.___hFunc2 |#$T0@@12| |#$T1@@12| |#$R@@12|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx)) bx) ($Is HandleTypeType ($Unbox HandleTypeType bx) (Tclass._System.___hFunc2 |#$T0@@12| |#$T1@@12| |#$R@@12|))))
 :pattern ( ($IsBox bx (Tclass._System.___hFunc2 |#$T0@@12| |#$T1@@12| |#$R@@12|)))
)))
(assert (forall ((|#$T0@@13| T@U) (|#$T1@@13| T@U) (|#$R@@13| T@U) (bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 (Tclass._System.___hPartialFunc2 |#$T0@@13| |#$T1@@13| |#$R@@13|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@0)) bx@@0) ($Is HandleTypeType ($Unbox HandleTypeType bx@@0) (Tclass._System.___hPartialFunc2 |#$T0@@13| |#$T1@@13| |#$R@@13|))))
 :pattern ( ($IsBox bx@@0 (Tclass._System.___hPartialFunc2 |#$T0@@13| |#$T1@@13| |#$R@@13|)))
)))
(assert (forall ((|#$T0@@14| T@U) (|#$T1@@14| T@U) (|#$R@@14| T@U) (bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 (Tclass._System.___hTotalFunc2 |#$T0@@14| |#$T1@@14| |#$R@@14|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@1)) bx@@1) ($Is HandleTypeType ($Unbox HandleTypeType bx@@1) (Tclass._System.___hTotalFunc2 |#$T0@@14| |#$T1@@14| |#$R@@14|))))
 :pattern ( ($IsBox bx@@1 (Tclass._System.___hTotalFunc2 |#$T0@@14| |#$T1@@14| |#$R@@14|)))
)))
(assert (forall ((f T@U) (t0 T@U) (t1 T@U) (u0 T@U) (u1 T@U) ) (!  (=> (and (and ($Is HandleTypeType f (Tclass._System.___hFunc1 t0 t1)) (forall ((bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 u0) ($IsBox bx@@2 t0))
 :pattern ( ($IsBox bx@@2 u0))
 :pattern ( ($IsBox bx@@2 t0))
))) (forall ((bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 t1) ($IsBox bx@@3 u1))
 :pattern ( ($IsBox bx@@3 t1))
 :pattern ( ($IsBox bx@@3 u1))
))) ($Is HandleTypeType f (Tclass._System.___hFunc1 u0 u1)))
 :pattern ( ($Is HandleTypeType f (Tclass._System.___hFunc1 t0 t1)) ($Is HandleTypeType f (Tclass._System.___hFunc1 u0 u1)))
)))
(assert (forall ((t0@@0 T@U) (t1@@0 T@U) (heap T@U) (f@@0 T@U) (bx0 T@U) ) (!  (=> (and ($IsGoodHeap heap) (and ($IsBox bx0 t0@@0) ($Is HandleTypeType f@@0 (Tclass._System.___hFunc1 t0@@0 t1@@0)))) (= (|Set#Equal| (Reads1 t0@@0 t1@@0 $OneHeap f@@0 bx0) |Set#Empty|) (|Set#Equal| (Reads1 t0@@0 t1@@0 heap f@@0 bx0) |Set#Empty|)))
 :pattern ( (Reads1 t0@@0 t1@@0 $OneHeap f@@0 bx0) ($IsGoodHeap heap))
 :pattern ( (Reads1 t0@@0 t1@@0 heap f@@0 bx0))
)))
(assert (forall ((|#$T0@@15| T@U) (|#$T1@@15| T@U) (|#$R@@15| T@U) (|f#0@@0| T@U) ) (! (= ($Is HandleTypeType |f#0@@0| (Tclass._System.___hPartialFunc2 |#$T0@@15| |#$T1@@15| |#$R@@15|))  (and ($Is HandleTypeType |f#0@@0| (Tclass._System.___hFunc2 |#$T0@@15| |#$T1@@15| |#$R@@15|)) (forall ((|x0#0@@0| T@U) (|x1#0@@0| T@U) )  (=> (and ($IsBox |x0#0@@0| |#$T0@@15|) ($IsBox |x1#0@@0| |#$T1@@15|)) (|Set#Equal| (Reads2 |#$T0@@15| |#$T1@@15| |#$R@@15| $OneHeap |f#0@@0| |x0#0@@0| |x1#0@@0|) |Set#Empty|)))))
 :pattern ( ($Is HandleTypeType |f#0@@0| (Tclass._System.___hPartialFunc2 |#$T0@@15| |#$T1@@15| |#$R@@15|)))
)))
(assert (forall ((x@@2 T@U) (T T@T) ) (! (= ($Box T ($Unbox T x@@2)) x@@2)
 :pattern ( ($Unbox T x@@2))
)))
(assert ($IsGoodHeap $OneHeap))
(assert (forall ((v T@U) (t T@U) (h T@U) (T@@0 T@T) ) (! (= ($IsAllocBox ($Box T@@0 v) t h) ($IsAlloc T@@0 v t h))
 :pattern ( ($IsAllocBox ($Box T@@0 v) t h))
)))
(assert (forall ((|#$T0@@16| T@U) (|#$R@@16| T@U) (|f#0@@1| T@U) ($h T@U) ) (! (= ($IsAlloc HandleTypeType |f#0@@1| (Tclass._System.___hPartialFunc1 |#$T0@@16| |#$R@@16|) $h) ($IsAlloc HandleTypeType |f#0@@1| (Tclass._System.___hFunc1 |#$T0@@16| |#$R@@16|) $h))
 :pattern ( ($IsAlloc HandleTypeType |f#0@@1| (Tclass._System.___hPartialFunc1 |#$T0@@16| |#$R@@16|) $h))
)))
(assert (forall ((|#$T0@@17| T@U) (|#$R@@17| T@U) (|f#0@@2| T@U) ($h@@0 T@U) ) (! (= ($IsAlloc HandleTypeType |f#0@@2| (Tclass._System.___hTotalFunc1 |#$T0@@17| |#$R@@17|) $h@@0) ($IsAlloc HandleTypeType |f#0@@2| (Tclass._System.___hPartialFunc1 |#$T0@@17| |#$R@@17|) $h@@0))
 :pattern ( ($IsAlloc HandleTypeType |f#0@@2| (Tclass._System.___hTotalFunc1 |#$T0@@17| |#$R@@17|) $h@@0))
)))
(assert  (and (and (and (and (and (and (and (= (Ctor refType) 4) (forall ((t0@@1 T@T) (t1@@1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0@@1 t1@@1 (MapType0Store t0@@1 t1@@1 m x0 val) x0) val)
 :weight 0
))) (forall ((u0@@0 T@T) (u1@@0 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0@@0 u1@@0 (MapType0Store u0@@0 u1@@0 m@@0 x0@@0 val@@0) y0) (MapType0Select u0@@0 u1@@0 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 5)) (= (Ctor BoxType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((f@@1 T@U) (t0@@2 T@U) (t1@@2 T@U) (t2 T@U) (h@@0 T@U) ) (!  (=> ($IsGoodHeap h@@0) (= ($IsAlloc HandleTypeType f@@1 (Tclass._System.___hFunc2 t0@@2 t1@@2 t2) h@@0) (forall ((bx0@@0 T@U) (bx1 T@U) ) (!  (=> (and (and (and ($IsBox bx0@@0 t0@@2) ($IsAllocBox bx0@@0 t0@@2 h@@0)) (and ($IsBox bx1 t1@@2) ($IsAllocBox bx1 t1@@2 h@@0))) (Requires2 t0@@2 t1@@2 t2 h@@0 f@@1 bx0@@0 bx1)) (forall ((r T@U) ) (!  (=> (and (or (not (= r null)) (not true)) (|Set#IsMember| (Reads2 t0@@2 t1@@2 t2 h@@0 f@@1 bx0@@0 bx1) ($Box refType r))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@0 r) alloc))))
 :pattern ( (|Set#IsMember| (Reads2 t0@@2 t1@@2 t2 h@@0 f@@1 bx0@@0 bx1) ($Box refType r)))
)))
 :pattern ( (Apply2 t0@@2 t1@@2 t2 h@@0 f@@1 bx0@@0 bx1))
 :pattern ( (Reads2 t0@@2 t1@@2 t2 h@@0 f@@1 bx0@@0 bx1))
))))
 :pattern ( ($IsAlloc HandleTypeType f@@1 (Tclass._System.___hFunc2 t0@@2 t1@@2 t2) h@@0))
)))
(assert (forall ((f@@2 T@U) (t0@@3 T@U) (t1@@3 T@U) (h@@1 T@U) ) (!  (=> (and ($IsGoodHeap h@@1) ($IsAlloc HandleTypeType f@@2 (Tclass._System.___hFunc1 t0@@3 t1@@3) h@@1)) (forall ((bx0@@1 T@U) ) (!  (=> (and ($IsAllocBox bx0@@1 t0@@3 h@@1) (Requires1 t0@@3 t1@@3 h@@1 f@@2 bx0@@1)) ($IsAllocBox (Apply1 t0@@3 t1@@3 h@@1 f@@2 bx0@@1) t1@@3 h@@1))
 :pattern ( (Apply1 t0@@3 t1@@3 h@@1 f@@2 bx0@@1))
)))
 :pattern ( ($IsAlloc HandleTypeType f@@2 (Tclass._System.___hFunc1 t0@@3 t1@@3) h@@1))
)))
(assert (forall ((f@@3 T@U) (t0@@4 T@U) (t1@@4 T@U) (t2@@0 T@U) ) (! (= ($Is HandleTypeType f@@3 (Tclass._System.___hFunc2 t0@@4 t1@@4 t2@@0)) (forall ((h@@2 T@U) (bx0@@2 T@U) (bx1@@0 T@U) ) (!  (=> (and (and ($IsGoodHeap h@@2) (and ($IsBox bx0@@2 t0@@4) ($IsBox bx1@@0 t1@@4))) (Requires2 t0@@4 t1@@4 t2@@0 h@@2 f@@3 bx0@@2 bx1@@0)) ($IsBox (Apply2 t0@@4 t1@@4 t2@@0 h@@2 f@@3 bx0@@2 bx1@@0) t2@@0))
 :pattern ( (Apply2 t0@@4 t1@@4 t2@@0 h@@2 f@@3 bx0@@2 bx1@@0))
)))
 :pattern ( ($Is HandleTypeType f@@3 (Tclass._System.___hFunc2 t0@@4 t1@@4 t2@@0)))
)))
(assert (forall ((a T@U) (b T@U) ) (!  (=> (|Set#Equal| a b) (= a b))
 :pattern ( (|Set#Equal| a b))
)))
(assert (forall ((t0@@5 T@U) (t1@@5 T@U) (t2@@1 T@U) (heap@@0 T@U) (f@@4 T@U) (bx0@@3 T@U) (bx1@@1 T@U) ) (!  (=> (and ($IsGoodHeap heap@@0) (and (and ($IsBox bx0@@3 t0@@5) ($IsBox bx1@@1 t1@@5)) ($Is HandleTypeType f@@4 (Tclass._System.___hFunc2 t0@@5 t1@@5 t2@@1)))) (= (|Set#Equal| (Reads2 t0@@5 t1@@5 t2@@1 $OneHeap f@@4 bx0@@3 bx1@@1) |Set#Empty|) (|Set#Equal| (Reads2 t0@@5 t1@@5 t2@@1 heap@@0 f@@4 bx0@@3 bx1@@1) |Set#Empty|)))
 :pattern ( (Reads2 t0@@5 t1@@5 t2@@1 $OneHeap f@@4 bx0@@3 bx1@@1) ($IsGoodHeap heap@@0))
 :pattern ( (Reads2 t0@@5 t1@@5 t2@@1 heap@@0 f@@4 bx0@@3 bx1@@1))
)))
(assert (forall ((f@@5 T@U) (t0@@6 T@U) (t1@@6 T@U) ) (! (= ($Is HandleTypeType f@@5 (Tclass._System.___hFunc1 t0@@6 t1@@6)) (forall ((h@@3 T@U) (bx0@@4 T@U) ) (!  (=> (and (and ($IsGoodHeap h@@3) ($IsBox bx0@@4 t0@@6)) (Requires1 t0@@6 t1@@6 h@@3 f@@5 bx0@@4)) ($IsBox (Apply1 t0@@6 t1@@6 h@@3 f@@5 bx0@@4) t1@@6))
 :pattern ( (Apply1 t0@@6 t1@@6 h@@3 f@@5 bx0@@4))
)))
 :pattern ( ($Is HandleTypeType f@@5 (Tclass._System.___hFunc1 t0@@6 t1@@6)))
)))
(assert (forall ((f@@6 T@U) (t0@@7 T@U) (t1@@7 T@U) (t2@@2 T@U) (h@@4 T@U) ) (!  (=> (and ($IsGoodHeap h@@4) ($IsAlloc HandleTypeType f@@6 (Tclass._System.___hFunc2 t0@@7 t1@@7 t2@@2) h@@4)) (forall ((bx0@@5 T@U) (bx1@@2 T@U) ) (!  (=> (and (and ($IsAllocBox bx0@@5 t0@@7 h@@4) ($IsAllocBox bx1@@2 t1@@7 h@@4)) (Requires2 t0@@7 t1@@7 t2@@2 h@@4 f@@6 bx0@@5 bx1@@2)) ($IsAllocBox (Apply2 t0@@7 t1@@7 t2@@2 h@@4 f@@6 bx0@@5 bx1@@2) t2@@2 h@@4))
 :pattern ( (Apply2 t0@@7 t1@@7 t2@@2 h@@4 f@@6 bx0@@5 bx1@@2))
)))
 :pattern ( ($IsAlloc HandleTypeType f@@6 (Tclass._System.___hFunc2 t0@@7 t1@@7 t2@@2) h@@4))
)))
(assert (forall ((bx@@4 T@U) ) (!  (=> ($IsBox bx@@4 TBool) (and (= ($Box boolType ($Unbox boolType bx@@4)) bx@@4) ($Is boolType ($Unbox boolType bx@@4) TBool)))
 :pattern ( ($IsBox bx@@4 TBool))
)))
(assert (forall ((v@@0 T@U) (t@@0 T@U) (T@@1 T@T) ) (! (= ($IsBox ($Box T@@1 v@@0) t@@0) ($Is T@@1 v@@0 t@@0))
 :pattern ( ($IsBox ($Box T@@1 v@@0) t@@0))
)))
(assert (forall ((ty T@U) ) (!  (=> ($AlwaysAllocated ty) (forall ((h@@5 T@U) (v@@1 T@U) ) (!  (=> ($IsBox v@@1 ty) ($IsAllocBox v@@1 ty h@@5))
 :pattern ( ($IsAllocBox v@@1 ty h@@5))
)))
 :pattern ( ($AlwaysAllocated ty))
)))
(assert (forall ((|#$T0@@18| T@U) (|#$R@@18| T@U) ) (! (= (Tclass._System.___hFunc1_0 (Tclass._System.___hFunc1 |#$T0@@18| |#$R@@18|)) |#$T0@@18|)
 :pattern ( (Tclass._System.___hFunc1 |#$T0@@18| |#$R@@18|))
)))
(assert (forall ((|#$T0@@19| T@U) (|#$R@@19| T@U) ) (! (= (Tclass._System.___hFunc1_1 (Tclass._System.___hFunc1 |#$T0@@19| |#$R@@19|)) |#$R@@19|)
 :pattern ( (Tclass._System.___hFunc1 |#$T0@@19| |#$R@@19|))
)))
(assert (forall ((|#$T0@@20| T@U) (|#$R@@20| T@U) ) (! (= (Tclass._System.___hPartialFunc1_0 (Tclass._System.___hPartialFunc1 |#$T0@@20| |#$R@@20|)) |#$T0@@20|)
 :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@20| |#$R@@20|))
)))
(assert (forall ((|#$T0@@21| T@U) (|#$R@@21| T@U) ) (! (= (Tclass._System.___hPartialFunc1_1 (Tclass._System.___hPartialFunc1 |#$T0@@21| |#$R@@21|)) |#$R@@21|)
 :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@21| |#$R@@21|))
)))
(assert (forall ((|#$T0@@22| T@U) (|#$R@@22| T@U) ) (! (= (Tclass._System.___hTotalFunc1_0 (Tclass._System.___hTotalFunc1 |#$T0@@22| |#$R@@22|)) |#$T0@@22|)
 :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@22| |#$R@@22|))
)))
(assert (forall ((|#$T0@@23| T@U) (|#$R@@23| T@U) ) (! (= (Tclass._System.___hTotalFunc1_1 (Tclass._System.___hTotalFunc1 |#$T0@@23| |#$R@@23|)) |#$R@@23|)
 :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@23| |#$R@@23|))
)))
(assert (forall ((x@@3 T@U) (T@@2 T@T) ) (! (= ($Unbox T@@2 ($Box T@@2 x@@3)) x@@3)
 :pattern ( ($Box T@@2 x@@3))
)))
(assert (forall ((t0@@8 T@U) (t1@@8 T@U) (t2@@3 T@U) (heap@@1 T@U) (f@@7 T@U) (bx0@@6 T@U) (bx1@@3 T@U) ) (!  (=> (and (and ($IsGoodHeap heap@@1) (and (and ($IsBox bx0@@6 t0@@8) ($IsBox bx1@@3 t1@@8)) ($Is HandleTypeType f@@7 (Tclass._System.___hFunc2 t0@@8 t1@@8 t2@@3)))) (|Set#Equal| (Reads2 t0@@8 t1@@8 t2@@3 $OneHeap f@@7 bx0@@6 bx1@@3) |Set#Empty|)) (= (Requires2 t0@@8 t1@@8 t2@@3 $OneHeap f@@7 bx0@@6 bx1@@3) (Requires2 t0@@8 t1@@8 t2@@3 heap@@1 f@@7 bx0@@6 bx1@@3)))
 :pattern ( (Requires2 t0@@8 t1@@8 t2@@3 $OneHeap f@@7 bx0@@6 bx1@@3) ($IsGoodHeap heap@@1))
 :pattern ( (Requires2 t0@@8 t1@@8 t2@@3 heap@@1 f@@7 bx0@@6 bx1@@3))
)))
(assert (forall ((|#$T0@@24| T@U) (|#$R@@24| T@U) (|f#0@@3| T@U) ) (! (= ($Is HandleTypeType |f#0@@3| (Tclass._System.___hTotalFunc1 |#$T0@@24| |#$R@@24|))  (and ($Is HandleTypeType |f#0@@3| (Tclass._System.___hPartialFunc1 |#$T0@@24| |#$R@@24|)) (forall ((|x0#0@@1| T@U) )  (=> ($IsBox |x0#0@@1| |#$T0@@24|) (Requires1 |#$T0@@24| |#$R@@24| $OneHeap |f#0@@3| |x0#0@@1|)))))
 :pattern ( ($Is HandleTypeType |f#0@@3| (Tclass._System.___hTotalFunc1 |#$T0@@24| |#$R@@24|)))
)))
(assert (forall ((f@@8 T@U) (t0@@9 T@U) (t1@@9 T@U) (t2@@4 T@U) (u0@@1 T@U) (u1@@1 T@U) (u2 T@U) ) (!  (=> (and (and (and ($Is HandleTypeType f@@8 (Tclass._System.___hFunc2 t0@@9 t1@@9 t2@@4)) (forall ((bx@@5 T@U) ) (!  (=> ($IsBox bx@@5 u0@@1) ($IsBox bx@@5 t0@@9))
 :pattern ( ($IsBox bx@@5 u0@@1))
 :pattern ( ($IsBox bx@@5 t0@@9))
))) (forall ((bx@@6 T@U) ) (!  (=> ($IsBox bx@@6 u1@@1) ($IsBox bx@@6 t1@@9))
 :pattern ( ($IsBox bx@@6 u1@@1))
 :pattern ( ($IsBox bx@@6 t1@@9))
))) (forall ((bx@@7 T@U) ) (!  (=> ($IsBox bx@@7 t2@@4) ($IsBox bx@@7 u2))
 :pattern ( ($IsBox bx@@7 t2@@4))
 :pattern ( ($IsBox bx@@7 u2))
))) ($Is HandleTypeType f@@8 (Tclass._System.___hFunc2 u0@@1 u1@@1 u2)))
 :pattern ( ($Is HandleTypeType f@@8 (Tclass._System.___hFunc2 t0@@9 t1@@9 t2@@4)) ($Is HandleTypeType f@@8 (Tclass._System.___hFunc2 u0@@1 u1@@1 u2)))
)))
(assert (forall ((|#$T0@@25| T@U) (|#$R@@25| T@U) (|f#0@@4| T@U) ) (! (= ($Is HandleTypeType |f#0@@4| (Tclass._System.___hPartialFunc1 |#$T0@@25| |#$R@@25|))  (and ($Is HandleTypeType |f#0@@4| (Tclass._System.___hFunc1 |#$T0@@25| |#$R@@25|)) (forall ((|x0#0@@2| T@U) )  (=> ($IsBox |x0#0@@2| |#$T0@@25|) (|Set#Equal| (Reads1 |#$T0@@25| |#$R@@25| $OneHeap |f#0@@4| |x0#0@@2|) |Set#Empty|)))))
 :pattern ( ($Is HandleTypeType |f#0@@4| (Tclass._System.___hPartialFunc1 |#$T0@@25| |#$R@@25|)))
)))
(assert (forall ((f@@9 T@U) (t0@@10 T@U) (t1@@10 T@U) (h@@6 T@U) ) (!  (=> ($IsGoodHeap h@@6) (= ($IsAlloc HandleTypeType f@@9 (Tclass._System.___hFunc1 t0@@10 t1@@10) h@@6) (forall ((bx0@@7 T@U) ) (!  (=> (and (and ($IsBox bx0@@7 t0@@10) ($IsAllocBox bx0@@7 t0@@10 h@@6)) (Requires1 t0@@10 t1@@10 h@@6 f@@9 bx0@@7)) (forall ((r@@0 T@U) ) (!  (=> (and (or (not (= r@@0 null)) (not true)) (|Set#IsMember| (Reads1 t0@@10 t1@@10 h@@6 f@@9 bx0@@7) ($Box refType r@@0))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@6 r@@0) alloc))))
 :pattern ( (|Set#IsMember| (Reads1 t0@@10 t1@@10 h@@6 f@@9 bx0@@7) ($Box refType r@@0)))
)))
 :pattern ( (Apply1 t0@@10 t1@@10 h@@6 f@@9 bx0@@7))
 :pattern ( (Reads1 t0@@10 t1@@10 h@@6 f@@9 bx0@@7))
))))
 :pattern ( ($IsAlloc HandleTypeType f@@9 (Tclass._System.___hFunc1 t0@@10 t1@@10) h@@6))
)))
(assert (forall ((|#$T0@@26| T@U) (|#$R@@26| T@U) (bx@@8 T@U) ) (!  (=> ($IsBox bx@@8 (Tclass._System.___hFunc1 |#$T0@@26| |#$R@@26|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@8)) bx@@8) ($Is HandleTypeType ($Unbox HandleTypeType bx@@8) (Tclass._System.___hFunc1 |#$T0@@26| |#$R@@26|))))
 :pattern ( ($IsBox bx@@8 (Tclass._System.___hFunc1 |#$T0@@26| |#$R@@26|)))
)))
(assert (forall ((|#$T0@@27| T@U) (|#$R@@27| T@U) (bx@@9 T@U) ) (!  (=> ($IsBox bx@@9 (Tclass._System.___hPartialFunc1 |#$T0@@27| |#$R@@27|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@9)) bx@@9) ($Is HandleTypeType ($Unbox HandleTypeType bx@@9) (Tclass._System.___hPartialFunc1 |#$T0@@27| |#$R@@27|))))
 :pattern ( ($IsBox bx@@9 (Tclass._System.___hPartialFunc1 |#$T0@@27| |#$R@@27|)))
)))
(assert (forall ((|#$T0@@28| T@U) (|#$R@@28| T@U) (bx@@10 T@U) ) (!  (=> ($IsBox bx@@10 (Tclass._System.___hTotalFunc1 |#$T0@@28| |#$R@@28|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@10)) bx@@10) ($Is HandleTypeType ($Unbox HandleTypeType bx@@10) (Tclass._System.___hTotalFunc1 |#$T0@@28| |#$R@@28|))))
 :pattern ( ($IsBox bx@@10 (Tclass._System.___hTotalFunc1 |#$T0@@28| |#$R@@28|)))
)))
(assert  (and (forall ((t0@@11 T@T) (t1@@11 T@T) (t2@@5 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@11 t1@@11 t2@@5 (MapType1Store t0@@11 t1@@11 t2@@5 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@2 T@T) (u1@@2 T@T) (u2@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@2 u1@@2 u2@@0 (MapType1Store u0@@2 u1@@2 u2@@0 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@2 u1@@2 u2@@0 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@3 T@T) (u1@@3 T@T) (u2@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@3 u1@@3 u2@@1 (MapType1Store u0@@3 u1@@3 u2@@1 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@3 u1@@3 u2@@1 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((|#$T0@@29| T@U) (|#$T1@@16| T@U) (|#$R@@29| T@U) (|f#0@@5| T@U) ($h@@1 T@U) ) (! (= ($IsAlloc HandleTypeType |f#0@@5| (Tclass._System.___hPartialFunc2 |#$T0@@29| |#$T1@@16| |#$R@@29|) $h@@1) ($IsAlloc HandleTypeType |f#0@@5| (Tclass._System.___hFunc2 |#$T0@@29| |#$T1@@16| |#$R@@29|) $h@@1))
 :pattern ( ($IsAlloc HandleTypeType |f#0@@5| (Tclass._System.___hPartialFunc2 |#$T0@@29| |#$T1@@16| |#$R@@29|) $h@@1))
)))
(assert (forall ((|#$T0@@30| T@U) (|#$T1@@17| T@U) (|#$R@@30| T@U) (|f#0@@6| T@U) ($h@@2 T@U) ) (! (= ($IsAlloc HandleTypeType |f#0@@6| (Tclass._System.___hTotalFunc2 |#$T0@@30| |#$T1@@17| |#$R@@30|) $h@@2) ($IsAlloc HandleTypeType |f#0@@6| (Tclass._System.___hPartialFunc2 |#$T0@@30| |#$T1@@17| |#$R@@30|) $h@@2))
 :pattern ( ($IsAlloc HandleTypeType |f#0@@6| (Tclass._System.___hTotalFunc2 |#$T0@@30| |#$T1@@17| |#$R@@30|) $h@@2))
)))
(assert (forall ((|#$T0@@31| T@U) (|#$R@@31| T@U) ) (!  (and (= (Tag (Tclass._System.___hFunc1 |#$T0@@31| |#$R@@31|)) Tagclass._System.___hFunc1) (= (TagFamily (Tclass._System.___hFunc1 |#$T0@@31| |#$R@@31|)) |tytagFamily$_#Func1|))
 :pattern ( (Tclass._System.___hFunc1 |#$T0@@31| |#$R@@31|))
)))
(assert (forall ((|#$T0@@32| T@U) (|#$R@@32| T@U) ) (!  (and (= (Tag (Tclass._System.___hPartialFunc1 |#$T0@@32| |#$R@@32|)) Tagclass._System.___hPartialFunc1) (= (TagFamily (Tclass._System.___hPartialFunc1 |#$T0@@32| |#$R@@32|)) |tytagFamily$_#PartialFunc1|))
 :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@32| |#$R@@32|))
)))
(assert (forall ((|#$T0@@33| T@U) (|#$R@@33| T@U) ) (!  (and (= (Tag (Tclass._System.___hTotalFunc1 |#$T0@@33| |#$R@@33|)) Tagclass._System.___hTotalFunc1) (= (TagFamily (Tclass._System.___hTotalFunc1 |#$T0@@33| |#$R@@33|)) |tytagFamily$_#TotalFunc1|))
 :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@33| |#$R@@33|))
)))
(assert (forall ((t0@@12 T@U) (t1@@12 T@U) (heap@@2 T@U) (f@@10 T@U) (bx0@@8 T@U) ) (!  (=> (and (and ($IsGoodHeap heap@@2) (and ($IsBox bx0@@8 t0@@12) ($Is HandleTypeType f@@10 (Tclass._System.___hFunc1 t0@@12 t1@@12)))) (|Set#Equal| (Reads1 t0@@12 t1@@12 $OneHeap f@@10 bx0@@8) |Set#Empty|)) (= (Requires1 t0@@12 t1@@12 $OneHeap f@@10 bx0@@8) (Requires1 t0@@12 t1@@12 heap@@2 f@@10 bx0@@8)))
 :pattern ( (Requires1 t0@@12 t1@@12 $OneHeap f@@10 bx0@@8) ($IsGoodHeap heap@@2))
 :pattern ( (Requires1 t0@@12 t1@@12 heap@@2 f@@10 bx0@@8))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) ) (! (= (|Set#Equal| a@@0 b@@0) (forall ((o@@0 T@U) ) (! (= (|Set#IsMember| a@@0 o@@0) (|Set#IsMember| b@@0 o@@0))
 :pattern ( (|Set#IsMember| a@@0 o@@0))
 :pattern ( (|Set#IsMember| b@@0 o@@0))
)))
 :pattern ( (|Set#Equal| a@@0 b@@0))
)))
(assert (forall ((h@@7 T@U) (v@@2 T@U) ) (! ($IsAlloc boolType v@@2 TBool h@@7)
 :pattern ( ($IsAlloc boolType v@@2 TBool h@@7))
)))
(assert (forall ((v@@3 T@U) ) (! ($Is boolType v@@3 TBool)
 :pattern ( ($Is boolType v@@3 TBool))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $Heap () T@U)
(declare-fun |below#0| () T@U)
(declare-fun |a#0| () T@U)
(declare-fun |u#0| () T@U)
(declare-fun |v#0| () T@U)
(declare-fun |b#0| () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun $FunctionContextHeight () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 23) (let ((anon4_correct  (=> (= (ControlFlow 0 18) (- 0 17)) (= (U_2_bool ($Unbox boolType (Apply2 Tclass._module.T Tclass._module.T TBool $Heap |below#0| (Apply1 Tclass._module.T Tclass._module.T $Heap |a#0| |u#0|) (Apply1 Tclass._module.T Tclass._module.T $Heap |a#0| |v#0|))))  (=> (U_2_bool ($Unbox boolType (Apply2 Tclass._module.T Tclass._module.T TBool $Heap |below#0| (Apply1 Tclass._module.T Tclass._module.T $Heap |a#0| |v#0|) (Apply1 Tclass._module.T Tclass._module.T $Heap |a#0| |v#0|)))) (U_2_bool ($Unbox boolType (Apply2 Tclass._module.T Tclass._module.T TBool $Heap |below#0| (Apply1 Tclass._module.T Tclass._module.T $Heap |a#0| |u#0|) (Apply1 Tclass._module.T Tclass._module.T $Heap |a#0| |v#0|)))))))))
(let ((anon16_Else_correct  (=> (and (not (U_2_bool ($Unbox boolType (Apply2 Tclass._module.T Tclass._module.T TBool $Heap |below#0| (Apply1 Tclass._module.T Tclass._module.T $Heap |a#0| |v#0|) (Apply1 Tclass._module.T Tclass._module.T $Heap |a#0| |v#0|))))) (= (ControlFlow 0 20) 18)) anon4_correct)))
(let ((anon16_Then_correct  (=> (and (U_2_bool ($Unbox boolType (Apply2 Tclass._module.T Tclass._module.T TBool $Heap |below#0| (Apply1 Tclass._module.T Tclass._module.T $Heap |a#0| |v#0|) (Apply1 Tclass._module.T Tclass._module.T $Heap |a#0| |v#0|)))) (= (ControlFlow 0 19) 18)) anon4_correct)))
(let ((anon15_Then_correct  (and (=> (= (ControlFlow 0 21) 19) anon16_Then_correct) (=> (= (ControlFlow 0 21) 20) anon16_Else_correct))))
(let ((anon12_correct  (=> (= (ControlFlow 0 13) (- 0 12)) (=> (U_2_bool ($Unbox boolType (Apply2 Tclass._module.T Tclass._module.T TBool $Heap |below#0| |u#0| |v#0|))) (=> (U_2_bool ($Unbox boolType (Apply2 Tclass._module.T Tclass._module.T TBool $Heap |below#0| |v#0| (Apply1 Tclass._module.T Tclass._module.T $Heap |b#0| (Apply1 Tclass._module.T Tclass._module.T $Heap |a#0| |v#0|))))) (U_2_bool ($Unbox boolType (Apply2 Tclass._module.T Tclass._module.T TBool $Heap |below#0| |u#0| (Apply1 Tclass._module.T Tclass._module.T $Heap |b#0| (Apply1 Tclass._module.T Tclass._module.T $Heap |a#0| |v#0|))))))))))
(let ((anon21_Else_correct  (=> (and (not (U_2_bool ($Unbox boolType (Apply2 Tclass._module.T Tclass._module.T TBool $Heap |below#0| |v#0| (Apply1 Tclass._module.T Tclass._module.T $Heap |b#0| (Apply1 Tclass._module.T Tclass._module.T $Heap |a#0| |v#0|)))))) (= (ControlFlow 0 15) 13)) anon12_correct)))
(let ((anon21_Then_correct  (=> (and (U_2_bool ($Unbox boolType (Apply2 Tclass._module.T Tclass._module.T TBool $Heap |below#0| |v#0| (Apply1 Tclass._module.T Tclass._module.T $Heap |b#0| (Apply1 Tclass._module.T Tclass._module.T $Heap |a#0| |v#0|))))) (= (ControlFlow 0 14) 13)) anon12_correct)))
(let ((anon20_Then_correct  (=> (U_2_bool ($Unbox boolType (Apply2 Tclass._module.T Tclass._module.T TBool $Heap |below#0| |u#0| |v#0|))) (and (=> (= (ControlFlow 0 16) 14) anon21_Then_correct) (=> (= (ControlFlow 0 16) 15) anon21_Else_correct)))))
(let ((GeneratedUnifiedExit_correct  (=> (= (ControlFlow 0 10) (- 0 9)) (U_2_bool ($Unbox boolType (Apply2 Tclass._module.T Tclass._module.T TBool $Heap |below#0| (Apply1 Tclass._module.T Tclass._module.T $Heap |a#0| |u#0|) (Apply1 Tclass._module.T Tclass._module.T $Heap |a#0| |v#0|)))))))
(let ((anon20_Else_correct  (=> (and (=> (U_2_bool ($Unbox boolType (Apply2 Tclass._module.T Tclass._module.T TBool $Heap |below#0| |u#0| |v#0|))) (U_2_bool ($Unbox boolType (Apply2 Tclass._module.T Tclass._module.T TBool $Heap |below#0| (Apply1 Tclass._module.T Tclass._module.T $Heap |a#0| |u#0|) (Apply1 Tclass._module.T Tclass._module.T $Heap |a#0| |v#0|))))) (= (ControlFlow 0 11) 10)) GeneratedUnifiedExit_correct)))
(let ((anon9_correct  (=> (= (ControlFlow 0 3) (- 0 2)) (=  (=> (U_2_bool ($Unbox boolType (Apply2 Tclass._module.T Tclass._module.T TBool $Heap |below#0| (Apply1 Tclass._module.T Tclass._module.T $Heap |a#0| |v#0|) (Apply1 Tclass._module.T Tclass._module.T $Heap |a#0| |v#0|)))) (U_2_bool ($Unbox boolType (Apply2 Tclass._module.T Tclass._module.T TBool $Heap |below#0| (Apply1 Tclass._module.T Tclass._module.T $Heap |a#0| |u#0|) (Apply1 Tclass._module.T Tclass._module.T $Heap |a#0| |v#0|)))))  (=> (U_2_bool ($Unbox boolType (Apply2 Tclass._module.T Tclass._module.T TBool $Heap |below#0| |v#0| (Apply1 Tclass._module.T Tclass._module.T $Heap |b#0| (Apply1 Tclass._module.T Tclass._module.T $Heap |a#0| |v#0|))))) (U_2_bool ($Unbox boolType (Apply2 Tclass._module.T Tclass._module.T TBool $Heap |below#0| |u#0| (Apply1 Tclass._module.T Tclass._module.T $Heap |b#0| (Apply1 Tclass._module.T Tclass._module.T $Heap |a#0| |v#0|))))))))))
(let ((anon19_Else_correct  (=> (and (not (U_2_bool ($Unbox boolType (Apply2 Tclass._module.T Tclass._module.T TBool $Heap |below#0| |v#0| (Apply1 Tclass._module.T Tclass._module.T $Heap |b#0| (Apply1 Tclass._module.T Tclass._module.T $Heap |a#0| |v#0|)))))) (= (ControlFlow 0 5) 3)) anon9_correct)))
(let ((anon19_Then_correct  (=> (and (U_2_bool ($Unbox boolType (Apply2 Tclass._module.T Tclass._module.T TBool $Heap |below#0| |v#0| (Apply1 Tclass._module.T Tclass._module.T $Heap |b#0| (Apply1 Tclass._module.T Tclass._module.T $Heap |a#0| |v#0|))))) (= (ControlFlow 0 4) 3)) anon9_correct)))
(let ((anon7_correct  (and (=> (= (ControlFlow 0 6) 4) anon19_Then_correct) (=> (= (ControlFlow 0 6) 5) anon19_Else_correct))))
(let ((anon18_Else_correct  (=> (and (not (U_2_bool ($Unbox boolType (Apply2 Tclass._module.T Tclass._module.T TBool $Heap |below#0| (Apply1 Tclass._module.T Tclass._module.T $Heap |a#0| |v#0|) (Apply1 Tclass._module.T Tclass._module.T $Heap |a#0| |v#0|))))) (= (ControlFlow 0 8) 6)) anon7_correct)))
(let ((anon18_Then_correct  (=> (and (U_2_bool ($Unbox boolType (Apply2 Tclass._module.T Tclass._module.T TBool $Heap |below#0| (Apply1 Tclass._module.T Tclass._module.T $Heap |a#0| |v#0|) (Apply1 Tclass._module.T Tclass._module.T $Heap |a#0| |v#0|)))) (= (ControlFlow 0 7) 6)) anon7_correct)))
(let ((anon14_Then_correct true))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (and (and (and (and (and (=> (= (ControlFlow 0 22) 1) anon14_Then_correct) (=> (= (ControlFlow 0 22) 21) anon15_Then_correct)) (=> (= (ControlFlow 0 22) 16) anon20_Then_correct)) (=> (= (ControlFlow 0 22) 11) anon20_Else_correct)) (=> (= (ControlFlow 0 22) 7) anon18_Then_correct)) (=> (= (ControlFlow 0 22) 8) anon18_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (=> (and (and (and (and ($IsBox |u#0| Tclass._module.T) ($IsAllocBox |u#0| Tclass._module.T $Heap)) (and ($IsBox |v#0| Tclass._module.T) ($IsAllocBox |v#0| Tclass._module.T $Heap))) (and (and ($Is HandleTypeType |below#0| (Tclass._System.___hTotalFunc2 Tclass._module.T Tclass._module.T TBool)) ($IsAlloc HandleTypeType |below#0| (Tclass._System.___hTotalFunc2 Tclass._module.T Tclass._module.T TBool) $Heap)) (and ($Is HandleTypeType |a#0| (Tclass._System.___hTotalFunc1 Tclass._module.T Tclass._module.T)) ($IsAlloc HandleTypeType |a#0| (Tclass._System.___hTotalFunc1 Tclass._module.T Tclass._module.T) $Heap)))) (and (and (and ($Is HandleTypeType |b#0| (Tclass._System.___hTotalFunc1 Tclass._module.T Tclass._module.T)) ($IsAlloc HandleTypeType |b#0| (Tclass._System.___hTotalFunc1 Tclass._module.T Tclass._module.T) $Heap)) (and (= 0 $FunctionContextHeight) (forall ((|x#1| T@U) ) (!  (=> ($IsBox |x#1| Tclass._module.T) (U_2_bool ($Unbox boolType (Apply2 Tclass._module.T Tclass._module.T TBool $Heap |below#0| |x#1| |x#1|))))
 :pattern ( ($Unbox boolType (Apply2 Tclass._module.T Tclass._module.T TBool $Heap |below#0| |x#1| |x#1|)))
)))) (and (and (forall ((|x#3| T@U) (|y#1| T@U) (|z#1| T@U) ) (!  (=> (and (and ($IsBox |x#3| Tclass._module.T) ($IsBox |y#1| Tclass._module.T)) ($IsBox |z#1| Tclass._module.T)) (=> (and (U_2_bool ($Unbox boolType (Apply2 Tclass._module.T Tclass._module.T TBool $Heap |below#0| |x#3| |y#1|))) (U_2_bool ($Unbox boolType (Apply2 Tclass._module.T Tclass._module.T TBool $Heap |below#0| |y#1| |z#1|)))) (U_2_bool ($Unbox boolType (Apply2 Tclass._module.T Tclass._module.T TBool $Heap |below#0| |x#3| |z#1|)))))
 :pattern ( ($Unbox boolType (Apply2 Tclass._module.T Tclass._module.T TBool $Heap |below#0| |x#3| |z#1|)) ($Unbox boolType (Apply2 Tclass._module.T Tclass._module.T TBool $Heap |below#0| |y#1| |z#1|)))
 :pattern ( ($Unbox boolType (Apply2 Tclass._module.T Tclass._module.T TBool $Heap |below#0| |y#1| |z#1|)) ($Unbox boolType (Apply2 Tclass._module.T Tclass._module.T TBool $Heap |below#0| |x#3| |y#1|)))
)) (forall ((|x#5| T@U) (|y#3| T@U) ) (!  (=> (and ($IsBox |x#5| Tclass._module.T) ($IsBox |y#3| Tclass._module.T)) (= (U_2_bool ($Unbox boolType (Apply2 Tclass._module.T Tclass._module.T TBool $Heap |below#0| (Apply1 Tclass._module.T Tclass._module.T $Heap |a#0| |x#5|) |y#3|))) (U_2_bool ($Unbox boolType (Apply2 Tclass._module.T Tclass._module.T TBool $Heap |below#0| |x#5| (Apply1 Tclass._module.T Tclass._module.T $Heap |b#0| |y#3|))))))
 :pattern ( (Apply1 Tclass._module.T Tclass._module.T $Heap |b#0| |y#3|) (Apply1 Tclass._module.T Tclass._module.T $Heap |a#0| |x#5|))
))) (and (U_2_bool ($Unbox boolType (Apply2 Tclass._module.T Tclass._module.T TBool $Heap |below#0| |u#0| |v#0|))) (= (ControlFlow 0 23) 22))))) anon0_correct))))
PreconditionGeneratedEntry_correct))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
