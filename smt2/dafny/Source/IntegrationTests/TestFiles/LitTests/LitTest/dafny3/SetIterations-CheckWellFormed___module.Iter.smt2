(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TagSet () T@U)
(declare-fun TagSeq () T@U)
(declare-fun alloc () T@U)
(declare-fun allocName () T@U)
(declare-fun Tagclass._System.object? () T@U)
(declare-fun Tagclass._System.object () T@U)
(declare-fun Tagclass._module.Iter () T@U)
(declare-fun Tagclass._module.Iter? () T@U)
(declare-fun class._module.Iter? () T@U)
(declare-fun tytagFamily$object () T@U)
(declare-fun tytagFamily$Iter () T@U)
(declare-fun field$_new () T@U)
(declare-fun field$xs () T@U)
(declare-fun field$x () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun FDim (T@U) Int)
(declare-fun DeclName (T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun refType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun _module.Iter.x () T@U)
(declare-fun Tclass._module.Iter? (T@U) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun null () T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun |Seq#Contains| (T@U T@U) Bool)
(declare-fun |Seq#Build| (T@U T@U) T@U)
(declare-fun |lambda#5| (T@U T@U) T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass._module.Iter (T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun |Set#Empty| () T@U)
(declare-fun |Seq#Empty| () T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun |Seq#Drop| (T@U Int) T@U)
(declare-fun _module.Iter.s (T@U) T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun SetType () T@T)
(declare-fun TSet (T@U) T@U)
(declare-fun _module.Iter.__decreases0 (T@U) T@U)
(declare-fun |Seq#Take| (T@U Int) T@U)
(declare-fun |Seq#Append| (T@U T@U) T@U)
(declare-fun Tclass._System.object () T@U)
(declare-fun Tclass._System.object? () T@U)
(declare-fun _module.Iter.__new () T@U)
(declare-fun FieldOfDecl (T@U T@U) T@U)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun _module.Iter.xs () T@U)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun SeqType () T@T)
(declare-fun TSeq (T@U) T@U)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun |Seq#Equal| (T@U T@U) Bool)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun |Set#FromBoogieMap| (T@U) T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#9| (T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun DeclType (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun Tclass._module.Iter_0 (T@U) T@U)
(declare-fun Tclass._module.Iter?_0 (T@U) T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun _module.Iter.Valid (T@U T@U T@U) Bool)
(declare-fun _module.Iter.__reads (T@U) T@U)
(declare-fun |Seq#Build_inv0| (T@U) T@U)
(declare-fun |Seq#Build_inv1| (T@U) T@U)
(declare-fun _module.Iter.__modifies (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TagSet TagSeq alloc allocName Tagclass._System.object? Tagclass._System.object Tagclass._module.Iter Tagclass._module.Iter? class._module.Iter? tytagFamily$object tytagFamily$Iter field$_new field$xs field$x)
)
(assert (= (FDim alloc) 0))
(assert (= (DeclName alloc) allocName))
(assert  (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 3)) (= (Ctor BoxType) 4)) (= (Ctor refType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 6))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((_module.Iter$T T@U) ($h T@U) ($o T@U) ) (!  (=> (and ($IsGoodHeap $h) (and (or (not (= $o null)) (not true)) (= (dtype $o) (Tclass._module.Iter? _module.Iter$T)))) ($IsBox (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h $o) _module.Iter.x) _module.Iter$T))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h $o) _module.Iter.x) (Tclass._module.Iter? _module.Iter$T))
)))
(assert (forall ((_module.Iter$T@@0 T@U) ($h@@0 T@U) ($o@@0 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@0) (and (or (not (= $o@@0 null)) (not true)) (= (dtype $o@@0) (Tclass._module.Iter? _module.Iter$T@@0)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@0 $o@@0) alloc)))) ($IsAllocBox (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@0 $o@@0) _module.Iter.x) _module.Iter$T@@0 $h@@0))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@0 $o@@0) _module.Iter.x) (Tclass._module.Iter? _module.Iter$T@@0))
)))
(assert (forall ((s T@U) (v T@U) (x@@2 T@U) ) (! (= (|Seq#Contains| (|Seq#Build| s v) x@@2)  (or (= v x@@2) (|Seq#Contains| s x@@2)))
 :pattern ( (|Seq#Contains| (|Seq#Build| s v) x@@2))
)))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|$y#2| T@U) ) (! (= (U_2_bool (MapType0Select BoxType boolType (|lambda#5| |l#0| |l#1|) |$y#2|))  (and ($IsBox |$y#2| |l#0|) (|Seq#Contains| |l#1| |$y#2|)))
 :pattern ( (MapType0Select BoxType boolType (|lambda#5| |l#0| |l#1|) |$y#2|))
)))
(assert (forall ((_module.Iter$T@@1 T@U) (|c#0| T@U) ($h@@1 T@U) ) (! (= ($IsAlloc refType |c#0| (Tclass._module.Iter _module.Iter$T@@1) $h@@1) ($IsAlloc refType |c#0| (Tclass._module.Iter? _module.Iter$T@@1) $h@@1))
 :pattern ( ($IsAlloc refType |c#0| (Tclass._module.Iter _module.Iter$T@@1) $h@@1))
 :pattern ( ($IsAlloc refType |c#0| (Tclass._module.Iter? _module.Iter$T@@1) $h@@1))
)))
(assert (forall ((o T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o))
 :pattern ( (|Set#IsMember| |Set#Empty| o))
)))
(assert (forall ((x@@3 T@U) ) (!  (not (|Seq#Contains| |Seq#Empty| x@@3))
 :pattern ( (|Seq#Contains| |Seq#Empty| x@@3))
)))
(assert (= (|Seq#Length| |Seq#Empty|) 0))
(assert (forall ((s@@0 T@U) (v@@0 T@U) (n Int) ) (!  (=> (and (<= 0 n) (<= n (|Seq#Length| s@@0))) (= (|Seq#Drop| (|Seq#Build| s@@0 v@@0) n) (|Seq#Build| (|Seq#Drop| s@@0 n) v@@0)))
 :pattern ( (|Seq#Drop| (|Seq#Build| s@@0 v@@0) n))
)))
(assert (= (Ctor SetType) 7))
(assert (forall ((_module.Iter$T@@2 T@U) ($o@@1 T@U) ) (!  (=> (and (or (not (= $o@@1 null)) (not true)) (= (dtype $o@@1) (Tclass._module.Iter? _module.Iter$T@@2))) ($Is SetType (_module.Iter.s $o@@1) (TSet _module.Iter$T@@2)))
 :pattern ( (_module.Iter.s $o@@1) (Tclass._module.Iter? _module.Iter$T@@2))
)))
(assert (forall ((_module.Iter$T@@3 T@U) ($o@@2 T@U) ) (!  (=> (and (or (not (= $o@@2 null)) (not true)) (= (dtype $o@@2) (Tclass._module.Iter? _module.Iter$T@@3))) ($Is SetType (_module.Iter.__decreases0 $o@@2) (TSet _module.Iter$T@@3)))
 :pattern ( (_module.Iter.__decreases0 $o@@2) (Tclass._module.Iter? _module.Iter$T@@3))
)))
(assert (forall ((s@@1 T@U) (t T@U) (n@@0 Int) ) (!  (=> (= n@@0 (|Seq#Length| s@@1)) (and (= (|Seq#Take| (|Seq#Append| s@@1 t) n@@0) s@@1) (= (|Seq#Drop| (|Seq#Append| s@@1 t) n@@0) t)))
 :pattern ( (|Seq#Take| (|Seq#Append| s@@1 t) n@@0))
 :pattern ( (|Seq#Drop| (|Seq#Append| s@@1 t) n@@0))
)))
(assert (forall ((|c#0@@0| T@U) ($h@@2 T@U) ) (! (= ($IsAlloc refType |c#0@@0| Tclass._System.object $h@@2) ($IsAlloc refType |c#0@@0| Tclass._System.object? $h@@2))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass._System.object $h@@2))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass._System.object? $h@@2))
)))
(assert (= (FDim _module.Iter.__new) 0))
(assert (= (FieldOfDecl class._module.Iter? field$_new) _module.Iter.__new))
(assert ($IsGhostField _module.Iter.__new))
(assert (= (FDim _module.Iter.xs) 0))
(assert (= (FieldOfDecl class._module.Iter? field$xs) _module.Iter.xs))
(assert ($IsGhostField _module.Iter.xs))
(assert (forall ((_module.Iter$T@@4 T@U) ($o@@3 T@U) ($h@@3 T@U) ) (! (= ($IsAlloc refType $o@@3 (Tclass._module.Iter? _module.Iter$T@@4) $h@@3)  (or (= $o@@3 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@3 $o@@3) alloc)))))
 :pattern ( ($IsAlloc refType $o@@3 (Tclass._module.Iter? _module.Iter$T@@4) $h@@3))
)))
(assert (= (FDim _module.Iter.x) 0))
(assert (= (FieldOfDecl class._module.Iter? field$x) _module.Iter.x))
(assert  (not ($IsGhostField _module.Iter.x)))
(assert (forall (($o@@4 T@U) ($h@@4 T@U) ) (! (= ($IsAlloc refType $o@@4 Tclass._System.object? $h@@4)  (or (= $o@@4 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@4 $o@@4) alloc)))))
 :pattern ( ($IsAlloc refType $o@@4 Tclass._System.object? $h@@4))
)))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o@@0 T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o@@0) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o@@0) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o@@0) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((s@@2 T@U) (n@@1 Int) ) (!  (=> (= n@@1 0) (= (|Seq#Drop| s@@2 n@@1) s@@2))
 :pattern ( (|Seq#Drop| s@@2 n@@1))
)))
(assert (= (Ctor SeqType) 8))
(assert (forall ((s@@3 T@U) (bx T@U) (t@@0 T@U) ) (!  (=> (and ($Is SeqType s@@3 (TSeq t@@0)) ($IsBox bx t@@0)) ($Is SeqType (|Seq#Build| s@@3 bx) (TSeq t@@0)))
 :pattern ( ($Is SeqType (|Seq#Build| s@@3 bx) (TSeq t@@0)))
)))
(assert (forall ((s@@4 T@U) (n@@2 Int) (j Int) ) (!  (=> (and (and (<= 0 j) (< j n@@2)) (< j (|Seq#Length| s@@4))) (= (|Seq#Index| (|Seq#Take| s@@4 n@@2) j) (|Seq#Index| s@@4 j)))
 :weight 25
 :pattern ( (|Seq#Index| (|Seq#Take| s@@4 n@@2) j))
 :pattern ( (|Seq#Index| s@@4 j) (|Seq#Take| s@@4 n@@2))
)))
(assert (forall ((s@@5 T@U) (n@@3 Int) ) (!  (=> (and (<= 0 n@@3) (<= n@@3 (|Seq#Length| s@@5))) (= (|Seq#Length| (|Seq#Drop| s@@5 n@@3)) (- (|Seq#Length| s@@5) n@@3)))
 :pattern ( (|Seq#Length| (|Seq#Drop| s@@5 n@@3)))
)))
(assert (forall ((s0 T@U) (s1 T@U) ) (! (= (|Seq#Equal| s0 s1)  (and (= (|Seq#Length| s0) (|Seq#Length| s1)) (forall ((j@@0 Int) ) (!  (=> (and (<= 0 j@@0) (< j@@0 (|Seq#Length| s0))) (= (|Seq#Index| s0 j@@0) (|Seq#Index| s1 j@@0)))
 :pattern ( (|Seq#Index| s0 j@@0))
 :pattern ( (|Seq#Index| s1 j@@0))
))))
 :pattern ( (|Seq#Equal| s0 s1))
)))
(assert (forall ((x@@4 T@U) (T T@T) ) (! (= ($Box T ($Unbox T x@@4)) x@@4)
 :pattern ( ($Unbox T x@@4))
)))
(assert (forall ((m@@1 T@U) (bx@@0 T@U) ) (! (= (|Set#IsMember| (|Set#FromBoogieMap| m@@1) bx@@0) (U_2_bool (MapType0Select BoxType boolType m@@1 bx@@0)))
 :pattern ( (|Set#IsMember| (|Set#FromBoogieMap| m@@1) bx@@0))
)))
(assert (forall ((v@@1 T@U) (t0@@0 T@U) ) (! (= ($Is SetType v@@1 (TSet t0@@0)) (forall ((bx@@1 T@U) ) (!  (=> (|Set#IsMember| v@@1 bx@@1) ($IsBox bx@@1 t0@@0))
 :pattern ( (|Set#IsMember| v@@1 bx@@1))
)))
 :pattern ( ($Is SetType v@@1 (TSet t0@@0)))
)))
(assert ($IsGhostField alloc))
(assert (forall ((s@@6 T@U) (v@@2 T@U) ) (! (= (|Seq#Length| (|Seq#Build| s@@6 v@@2)) (+ 1 (|Seq#Length| s@@6)))
 :pattern ( (|Seq#Build| s@@6 v@@2))
)))
(assert (forall ((_module.Iter$T@@5 T@U) (|c#0@@1| T@U) ) (! (= ($Is refType |c#0@@1| (Tclass._module.Iter _module.Iter$T@@5))  (and ($Is refType |c#0@@1| (Tclass._module.Iter? _module.Iter$T@@5)) (or (not (= |c#0@@1| null)) (not true))))
 :pattern ( ($Is refType |c#0@@1| (Tclass._module.Iter _module.Iter$T@@5)))
 :pattern ( ($Is refType |c#0@@1| (Tclass._module.Iter? _module.Iter$T@@5)))
)))
(assert (forall ((v@@3 T@U) (t@@1 T@U) (h@@0 T@U) (T@@0 T@T) ) (! (= ($IsAllocBox ($Box T@@0 v@@3) t@@1 h@@0) ($IsAlloc T@@0 v@@3 t@@1 h@@0))
 :pattern ( ($IsAllocBox ($Box T@@0 v@@3) t@@1 h@@0))
)))
(assert (forall ((h@@1 T@U) (k@@0 T@U) (bx@@2 T@U) (t@@2 T@U) ) (!  (=> ($HeapSucc h@@1 k@@0) (=> ($IsAllocBox bx@@2 t@@2 h@@1) ($IsAllocBox bx@@2 t@@2 k@@0)))
 :pattern ( ($HeapSucc h@@1 k@@0) ($IsAllocBox bx@@2 t@@2 h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@1 T@U) (v@@4 T@U) (t@@3 T@U) (T@@1 T@T) ) (!  (=> ($HeapSucc h@@2 k@@1) (=> ($IsAlloc T@@1 v@@4 t@@3 h@@2) ($IsAlloc T@@1 v@@4 t@@3 k@@1)))
 :pattern ( ($HeapSucc h@@2 k@@1) ($IsAlloc T@@1 v@@4 t@@3 h@@2))
)))
(assert (forall ((s@@7 T@U) (n@@4 Int) (j@@1 Int) ) (!  (=> (and (and (<= 0 n@@4) (<= 0 j@@1)) (< j@@1 (- (|Seq#Length| s@@7) n@@4))) (= (|Seq#Index| (|Seq#Drop| s@@7 n@@4) j@@1) (|Seq#Index| s@@7 (+ j@@1 n@@4))))
 :weight 25
 :pattern ( (|Seq#Index| (|Seq#Drop| s@@7 n@@4) j@@1))
)))
(assert (forall ((_module.Iter$T@@6 T@U) ) (!  (and (= (Tag (Tclass._module.Iter _module.Iter$T@@6)) Tagclass._module.Iter) (= (TagFamily (Tclass._module.Iter _module.Iter$T@@6)) tytagFamily$Iter))
 :pattern ( (Tclass._module.Iter _module.Iter$T@@6))
)))
(assert (forall ((_module.Iter$T@@7 T@U) ) (!  (and (= (Tag (Tclass._module.Iter? _module.Iter$T@@7)) Tagclass._module.Iter?) (= (TagFamily (Tclass._module.Iter? _module.Iter$T@@7)) tytagFamily$Iter))
 :pattern ( (Tclass._module.Iter? _module.Iter$T@@7))
)))
(assert (forall ((_module.Iter$T@@8 T@U) ($h@@5 T@U) ($o@@5 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@5) (and (or (not (= $o@@5 null)) (not true)) (= (dtype $o@@5) (Tclass._module.Iter? _module.Iter$T@@8)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@5 $o@@5) alloc)))) ($IsAlloc SeqType ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@5 $o@@5) _module.Iter.xs)) (TSeq _module.Iter$T@@8) $h@@5))
 :pattern ( ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@5 $o@@5) _module.Iter.xs)) (Tclass._module.Iter? _module.Iter$T@@8))
)))
(assert  (and (forall ((t0@@1 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@2 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@1 t1@@0 t2 (MapType1Store t0@@1 t1@@0 t2 m@@2 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@3 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@3 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@3 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@4 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@4 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@4 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0@@0| T@U) (|l#1@@0| T@U) (|l#2| T@U) (|l#3| T@U) ($o@@6 T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#9| |l#0@@0| |l#1@@0| |l#2| |l#3|) $o@@6 $f))  (=> (and (or (not (= $o@@6 |l#0@@0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1@@0| $o@@6) |l#2|)))) (= $o@@6 |l#3|)))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#9| |l#0@@0| |l#1@@0| |l#2| |l#3|) $o@@6 $f))
)))
(assert (forall ((s0@@0 T@U) (s1@@0 T@U) ) (! (= (|Seq#Length| (|Seq#Append| s0@@0 s1@@0)) (+ (|Seq#Length| s0@@0) (|Seq#Length| s1@@0)))
 :pattern ( (|Seq#Length| (|Seq#Append| s0@@0 s1@@0)))
)))
(assert (forall ((bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 Tclass._System.object?) (and (= ($Box refType ($Unbox refType bx@@3)) bx@@3) ($Is refType ($Unbox refType bx@@3) Tclass._System.object?)))
 :pattern ( ($IsBox bx@@3 Tclass._System.object?))
)))
(assert (forall ((bx@@4 T@U) ) (!  (=> ($IsBox bx@@4 Tclass._System.object) (and (= ($Box refType ($Unbox refType bx@@4)) bx@@4) ($Is refType ($Unbox refType bx@@4) Tclass._System.object)))
 :pattern ( ($IsBox bx@@4 Tclass._System.object))
)))
(assert (forall ((_module.Iter$T@@9 T@U) ($o@@7 T@U) ) (! (= ($Is refType $o@@7 (Tclass._module.Iter? _module.Iter$T@@9))  (or (= $o@@7 null) (= (dtype $o@@7) (Tclass._module.Iter? _module.Iter$T@@9))))
 :pattern ( ($Is refType $o@@7 (Tclass._module.Iter? _module.Iter$T@@9)))
)))
(assert (forall ((|c#0@@2| T@U) ) (! (= ($Is refType |c#0@@2| Tclass._System.object)  (and ($Is refType |c#0@@2| Tclass._System.object?) (or (not (= |c#0@@2| null)) (not true))))
 :pattern ( ($Is refType |c#0@@2| Tclass._System.object))
 :pattern ( ($Is refType |c#0@@2| Tclass._System.object?))
)))
(assert (forall ((s@@8 T@U) (i Int) (v@@5 T@U) ) (!  (and (=> (= i (|Seq#Length| s@@8)) (= (|Seq#Index| (|Seq#Build| s@@8 v@@5) i) v@@5)) (=> (or (not (= i (|Seq#Length| s@@8))) (not true)) (= (|Seq#Index| (|Seq#Build| s@@8 v@@5) i) (|Seq#Index| s@@8 i))))
 :pattern ( (|Seq#Index| (|Seq#Build| s@@8 v@@5) i))
)))
(assert (forall ((s0@@1 T@U) (s1@@1 T@U) (x@@5 T@U) ) (! (= (|Seq#Contains| (|Seq#Append| s0@@1 s1@@1) x@@5)  (or (|Seq#Contains| s0@@1 x@@5) (|Seq#Contains| s1@@1 x@@5)))
 :pattern ( (|Seq#Contains| (|Seq#Append| s0@@1 s1@@1) x@@5))
)))
(assert (forall ((_module.Iter$T@@10 T@U) ($h@@6 T@U) ($o@@8 T@U) ) (!  (=> (and ($IsGoodHeap $h@@6) (and (or (not (= $o@@8 null)) (not true)) (= (dtype $o@@8) (Tclass._module.Iter? _module.Iter$T@@10)))) ($Is SetType ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@6 $o@@8) _module.Iter.__new)) (TSet Tclass._System.object?)))
 :pattern ( ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@6 $o@@8) _module.Iter.__new)) (Tclass._module.Iter? _module.Iter$T@@10))
)))
(assert (forall ((s@@9 T@U) (n@@5 Int) (x@@6 T@U) ) (! (= (|Seq#Contains| (|Seq#Take| s@@9 n@@5) x@@6) (exists ((i@@0 Int) ) (!  (and (and (and (<= 0 i@@0) (< i@@0 n@@5)) (< i@@0 (|Seq#Length| s@@9))) (= (|Seq#Index| s@@9 i@@0) x@@6))
 :pattern ( (|Seq#Index| s@@9 i@@0))
)))
 :pattern ( (|Seq#Contains| (|Seq#Take| s@@9 n@@5) x@@6))
)))
(assert (forall ((_module.Iter$T@@11 T@U) ($h@@7 T@U) ($o@@9 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@7) (and (or (not (= $o@@9 null)) (not true)) (= (dtype $o@@9) (Tclass._module.Iter? _module.Iter$T@@11)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@7 $o@@9) alloc)))) ($IsAlloc SetType ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@7 $o@@9) _module.Iter.__new)) (TSet Tclass._System.object?) $h@@7))
 :pattern ( ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@7 $o@@9) _module.Iter.__new)) (Tclass._module.Iter? _module.Iter$T@@11))
)))
(assert (forall ((s@@10 T@U) (x@@7 T@U) ) (! (= (|Seq#Contains| s@@10 x@@7) (exists ((i@@1 Int) ) (!  (and (and (<= 0 i@@1) (< i@@1 (|Seq#Length| s@@10))) (= (|Seq#Index| s@@10 i@@1) x@@7))
 :pattern ( (|Seq#Index| s@@10 i@@1))
)))
 :pattern ( (|Seq#Contains| s@@10 x@@7))
)))
(assert (forall ((a T@U) (b T@U) ) (!  (=> (|Set#Equal| a b) (= a b))
 :pattern ( (|Set#Equal| a b))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) ) (!  (=> (|Seq#Equal| a@@0 b@@0) (= a@@0 b@@0))
 :pattern ( (|Seq#Equal| a@@0 b@@0))
)))
(assert (forall ((s@@11 T@U) (n@@6 Int) ) (!  (=> (and (<= 0 n@@6) (<= n@@6 (|Seq#Length| s@@11))) (= (|Seq#Length| (|Seq#Take| s@@11 n@@6)) n@@6))
 :pattern ( (|Seq#Length| (|Seq#Take| s@@11 n@@6)))
)))
(assert (forall ((a@@1 T@U) (b@@1 T@U) (c T@U) ) (!  (=> (or (not (= a@@1 c)) (not true)) (=> (and ($HeapSucc a@@1 b@@1) ($HeapSucc b@@1 c)) ($HeapSucc a@@1 c)))
 :pattern ( ($HeapSucc a@@1 b@@1) ($HeapSucc b@@1 c))
)))
(assert (forall ((cl T@U) (nm T@U) ) (!  (and (= (DeclType (FieldOfDecl cl nm)) cl) (= (DeclName (FieldOfDecl cl nm)) nm))
 :pattern ( (FieldOfDecl cl nm))
)))
(assert (forall ((v@@6 T@U) (t@@4 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@6) t@@4) ($Is T@@2 v@@6 t@@4))
 :pattern ( ($IsBox ($Box T@@2 v@@6) t@@4))
)))
(assert (forall ((s@@12 T@U) ) (! (<= 0 (|Seq#Length| s@@12))
 :pattern ( (|Seq#Length| s@@12))
)))
(assert (forall ((v@@7 T@U) (t0@@2 T@U) (h@@3 T@U) ) (! (= ($IsAlloc SetType v@@7 (TSet t0@@2) h@@3) (forall ((bx@@5 T@U) ) (!  (=> (|Set#IsMember| v@@7 bx@@5) ($IsAllocBox bx@@5 t0@@2 h@@3))
 :pattern ( (|Set#IsMember| v@@7 bx@@5))
)))
 :pattern ( ($IsAlloc SetType v@@7 (TSet t0@@2) h@@3))
)))
(assert (forall (($o@@10 T@U) ) (! ($Is refType $o@@10 Tclass._System.object?)
 :pattern ( ($Is refType $o@@10 Tclass._System.object?))
)))
(assert (forall ((v@@8 T@U) (t0@@3 T@U) (h@@4 T@U) ) (! (= ($IsAlloc SeqType v@@8 (TSeq t0@@3) h@@4) (forall ((i@@2 Int) ) (!  (=> (and (<= 0 i@@2) (< i@@2 (|Seq#Length| v@@8))) ($IsAllocBox (|Seq#Index| v@@8 i@@2) t0@@3 h@@4))
 :pattern ( (|Seq#Index| v@@8 i@@2))
)))
 :pattern ( ($IsAlloc SeqType v@@8 (TSeq t0@@3) h@@4))
)))
(assert (forall ((t@@5 T@U) ) (! (= (Inv0_TSet (TSet t@@5)) t@@5)
 :pattern ( (TSet t@@5))
)))
(assert (forall ((t@@6 T@U) ) (! (= (Tag (TSet t@@6)) TagSet)
 :pattern ( (TSet t@@6))
)))
(assert (forall ((t@@7 T@U) ) (! (= (Inv0_TSeq (TSeq t@@7)) t@@7)
 :pattern ( (TSeq t@@7))
)))
(assert (forall ((t@@8 T@U) ) (! (= (Tag (TSeq t@@8)) TagSeq)
 :pattern ( (TSeq t@@8))
)))
(assert (forall ((_module.Iter$T@@12 T@U) ) (! (= (Tclass._module.Iter_0 (Tclass._module.Iter _module.Iter$T@@12)) _module.Iter$T@@12)
 :pattern ( (Tclass._module.Iter _module.Iter$T@@12))
)))
(assert (forall ((_module.Iter$T@@13 T@U) ) (! (= (Tclass._module.Iter?_0 (Tclass._module.Iter? _module.Iter$T@@13)) _module.Iter$T@@13)
 :pattern ( (Tclass._module.Iter? _module.Iter$T@@13))
)))
(assert (forall ((x@@8 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@8)) x@@8)
 :pattern ( ($Box T@@3 x@@8))
)))
(assert (forall ((_module.Iter$T@@14 T@U) ($h0 T@U) ($h1 T@U) (this T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0) ($IsGoodHeap $h1)) (and (or (not (= this null)) (not true)) ($Is refType this (Tclass._module.Iter _module.Iter$T@@14)))) (and ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1))) (=> (forall (($o@@11 T@U) ($f@@0 T@U) )  (=> (and (or (not (= $o@@11 null)) (not true)) (or (or (= $o@@11 this) (|Set#IsMember| (_module.Iter.__reads this) ($Box refType $o@@11))) (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0 this) _module.Iter.__new)) ($Box refType $o@@11)))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0 $o@@11) $f@@0) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1 $o@@11) $f@@0)))) (= (_module.Iter.Valid _module.Iter$T@@14 $h0 this) (_module.Iter.Valid _module.Iter$T@@14 $h1 this))))
 :pattern ( ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1) (_module.Iter.Valid _module.Iter$T@@14 $h1 this))
)))
(assert (forall ((_module.Iter$T@@15 T@U) ($h@@8 T@U) ($o@@12 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@8) (and (or (not (= $o@@12 null)) (not true)) (= (dtype $o@@12) (Tclass._module.Iter? _module.Iter$T@@15)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@8 $o@@12) alloc)))) ($IsAlloc SetType (_module.Iter.s $o@@12) (TSet _module.Iter$T@@15) $h@@8))
 :pattern ( (_module.Iter.s $o@@12) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@8 $o@@12) alloc)) (Tclass._module.Iter? _module.Iter$T@@15))
)))
(assert (forall ((_module.Iter$T@@16 T@U) ($h@@9 T@U) ($o@@13 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@9) (and (or (not (= $o@@13 null)) (not true)) (= (dtype $o@@13) (Tclass._module.Iter? _module.Iter$T@@16)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@9 $o@@13) alloc)))) ($IsAlloc SetType (_module.Iter.__decreases0 $o@@13) (TSet _module.Iter$T@@16) $h@@9))
 :pattern ( (_module.Iter.__decreases0 $o@@13) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@9 $o@@13) alloc)) (Tclass._module.Iter? _module.Iter$T@@16))
)))
(assert (forall ((s@@13 T@U) (val@@4 T@U) ) (!  (and (= (|Seq#Build_inv0| (|Seq#Build| s@@13 val@@4)) s@@13) (= (|Seq#Build_inv1| (|Seq#Build| s@@13 val@@4)) val@@4))
 :pattern ( (|Seq#Build| s@@13 val@@4))
)))
(assert (forall ((_module.Iter$T@@17 T@U) ($h@@10 T@U) ($o@@14 T@U) ) (!  (=> (and ($IsGoodHeap $h@@10) (and (or (not (= $o@@14 null)) (not true)) (= (dtype $o@@14) (Tclass._module.Iter? _module.Iter$T@@17)))) ($Is SeqType ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@10 $o@@14) _module.Iter.xs)) (TSeq _module.Iter$T@@17)))
 :pattern ( ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@10 $o@@14) _module.Iter.xs)) (Tclass._module.Iter? _module.Iter$T@@17))
)))
(assert (forall ((s@@14 T@U) (n@@7 Int) (x@@9 T@U) ) (! (= (|Seq#Contains| (|Seq#Drop| s@@14 n@@7) x@@9) (exists ((i@@3 Int) ) (!  (and (and (and (<= 0 n@@7) (<= n@@7 i@@3)) (< i@@3 (|Seq#Length| s@@14))) (= (|Seq#Index| s@@14 i@@3) x@@9))
 :pattern ( (|Seq#Index| s@@14 i@@3))
)))
 :pattern ( (|Seq#Contains| (|Seq#Drop| s@@14 n@@7) x@@9))
)))
(assert (forall ((bx@@6 T@U) (t@@9 T@U) ) (!  (=> ($IsBox bx@@6 (TSet t@@9)) (and (= ($Box SetType ($Unbox SetType bx@@6)) bx@@6) ($Is SetType ($Unbox SetType bx@@6) (TSet t@@9))))
 :pattern ( ($IsBox bx@@6 (TSet t@@9)))
)))
(assert (forall ((bx@@7 T@U) (t@@10 T@U) ) (!  (=> ($IsBox bx@@7 (TSeq t@@10)) (and (= ($Box SeqType ($Unbox SeqType bx@@7)) bx@@7) ($Is SeqType ($Unbox SeqType bx@@7) (TSeq t@@10))))
 :pattern ( ($IsBox bx@@7 (TSeq t@@10)))
)))
(assert (forall ((_module.Iter$T@@18 T@U) (bx@@8 T@U) ) (!  (=> ($IsBox bx@@8 (Tclass._module.Iter _module.Iter$T@@18)) (and (= ($Box refType ($Unbox refType bx@@8)) bx@@8) ($Is refType ($Unbox refType bx@@8) (Tclass._module.Iter _module.Iter$T@@18))))
 :pattern ( ($IsBox bx@@8 (Tclass._module.Iter _module.Iter$T@@18)))
)))
(assert (forall ((_module.Iter$T@@19 T@U) (bx@@9 T@U) ) (!  (=> ($IsBox bx@@9 (Tclass._module.Iter? _module.Iter$T@@19)) (and (= ($Box refType ($Unbox refType bx@@9)) bx@@9) ($Is refType ($Unbox refType bx@@9) (Tclass._module.Iter? _module.Iter$T@@19))))
 :pattern ( ($IsBox bx@@9 (Tclass._module.Iter? _module.Iter$T@@19)))
)))
(assert (forall ((_module.Iter$T@@20 T@U) ($o@@15 T@U) ) (!  (=> (and (or (not (= $o@@15 null)) (not true)) (= (dtype $o@@15) (Tclass._module.Iter? _module.Iter$T@@20))) ($Is SetType (_module.Iter.__reads $o@@15) (TSet Tclass._System.object?)))
 :pattern ( (_module.Iter.__reads $o@@15) (Tclass._module.Iter? _module.Iter$T@@20))
)))
(assert (forall ((_module.Iter$T@@21 T@U) ($o@@16 T@U) ) (!  (=> (and (or (not (= $o@@16 null)) (not true)) (= (dtype $o@@16) (Tclass._module.Iter? _module.Iter$T@@21))) ($Is SetType (_module.Iter.__modifies $o@@16) (TSet Tclass._System.object?)))
 :pattern ( (_module.Iter.__modifies $o@@16) (Tclass._module.Iter? _module.Iter$T@@21))
)))
(assert (= (Tag Tclass._System.object?) Tagclass._System.object?))
(assert (= (TagFamily Tclass._System.object?) tytagFamily$object))
(assert (= (Tag Tclass._System.object) Tagclass._System.object))
(assert (= (TagFamily Tclass._System.object) tytagFamily$object))
(assert (forall ((s@@15 T@U) (n@@8 Int) (k@@2 Int) ) (!  (=> (and (and (<= 0 n@@8) (<= n@@8 k@@2)) (< k@@2 (|Seq#Length| s@@15))) (= (|Seq#Index| (|Seq#Drop| s@@15 n@@8) (- k@@2 n@@8)) (|Seq#Index| s@@15 k@@2)))
 :weight 25
 :pattern ( (|Seq#Index| s@@15 k@@2) (|Seq#Drop| s@@15 n@@8))
)))
(assert (forall ((a@@2 T@U) (b@@2 T@U) ) (! (= (|Set#Equal| a@@2 b@@2) (forall ((o@@1 T@U) ) (! (= (|Set#IsMember| a@@2 o@@1) (|Set#IsMember| b@@2 o@@1))
 :pattern ( (|Set#IsMember| a@@2 o@@1))
 :pattern ( (|Set#IsMember| b@@2 o@@1))
)))
 :pattern ( (|Set#Equal| a@@2 b@@2))
)))
(assert (forall ((s@@16 T@U) (m@@5 Int) (n@@9 Int) ) (!  (=> (and (and (<= 0 m@@5) (<= 0 n@@9)) (<= (+ m@@5 n@@9) (|Seq#Length| s@@16))) (= (|Seq#Drop| (|Seq#Drop| s@@16 m@@5) n@@9) (|Seq#Drop| s@@16 (+ m@@5 n@@9))))
 :pattern ( (|Seq#Drop| (|Seq#Drop| s@@16 m@@5) n@@9))
)))
(assert (forall ((_module.Iter$T@@22 T@U) ($h@@11 T@U) ($o@@17 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@11) (and (or (not (= $o@@17 null)) (not true)) (= (dtype $o@@17) (Tclass._module.Iter? _module.Iter$T@@22)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@11 $o@@17) alloc)))) ($IsAlloc SetType (_module.Iter.__reads $o@@17) (TSet Tclass._System.object?) $h@@11))
 :pattern ( (_module.Iter.__reads $o@@17) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@11 $o@@17) alloc)) (Tclass._module.Iter? _module.Iter$T@@22))
)))
(assert (forall ((_module.Iter$T@@23 T@U) ($h@@12 T@U) ($o@@18 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@12) (and (or (not (= $o@@18 null)) (not true)) (= (dtype $o@@18) (Tclass._module.Iter? _module.Iter$T@@23)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@12 $o@@18) alloc)))) ($IsAlloc SetType (_module.Iter.__modifies $o@@18) (TSet Tclass._System.object?) $h@@12))
 :pattern ( (_module.Iter.__modifies $o@@18) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@12 $o@@18) alloc)) (Tclass._module.Iter? _module.Iter$T@@23))
)))
(assert (forall ((s0@@2 T@U) (s1@@2 T@U) (n@@10 Int) ) (!  (and (=> (< n@@10 (|Seq#Length| s0@@2)) (= (|Seq#Index| (|Seq#Append| s0@@2 s1@@2) n@@10) (|Seq#Index| s0@@2 n@@10))) (=> (<= (|Seq#Length| s0@@2) n@@10) (= (|Seq#Index| (|Seq#Append| s0@@2 s1@@2) n@@10) (|Seq#Index| s1@@2 (- n@@10 (|Seq#Length| s0@@2))))))
 :pattern ( (|Seq#Index| (|Seq#Append| s0@@2 s1@@2) n@@10))
)))
(assert (forall ((s@@17 T@U) ) (!  (=> (= (|Seq#Length| s@@17) 0) (= s@@17 |Seq#Empty|))
 :pattern ( (|Seq#Length| s@@17))
)))
(assert (forall ((s@@18 T@U) (n@@11 Int) ) (!  (=> (= n@@11 0) (= (|Seq#Take| s@@18 n@@11) |Seq#Empty|))
 :pattern ( (|Seq#Take| s@@18 n@@11))
)))
(assert (forall ((v@@9 T@U) (t0@@4 T@U) ) (! (= ($Is SeqType v@@9 (TSeq t0@@4)) (forall ((i@@4 Int) ) (!  (=> (and (<= 0 i@@4) (< i@@4 (|Seq#Length| v@@9))) ($IsBox (|Seq#Index| v@@9 i@@4) t0@@4))
 :pattern ( (|Seq#Index| v@@9 i@@4))
)))
 :pattern ( ($Is SeqType v@@9 (TSeq t0@@4)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $Heap@1 () T@U)
(declare-fun this@@0 () T@U)
(declare-fun |z#1@0| () T@U)
(declare-fun _module.Iter$T@@24 () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun $Heap () T@U)
(declare-fun |s#0| () T@U)
(declare-fun call1formal@rds@0 () T@U)
(declare-fun call2formal@modi@0 () T@U)
(declare-fun call1formal@modi@0 () T@U)
(declare-fun call2formal@nw@0 () T@U)
(declare-fun $FunctionContextHeight () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 10) (let ((anon5_correct true))
(let ((anon8_Else_correct  (=> (and (not (|Seq#Contains| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 this@@0) _module.Iter.xs)) |z#1@0|)) (= (ControlFlow 0 6) 3)) anon5_correct)))
(let ((anon8_Then_correct  (=> (and (|Seq#Contains| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 this@@0) _module.Iter.xs)) |z#1@0|) (= (ControlFlow 0 5) 3)) anon5_correct)))
(let ((anon7_Then_correct  (=> (and ($IsBox |z#1@0| _module.Iter$T@@24) ($IsAllocBox |z#1@0| _module.Iter$T@@24 $Heap@1)) (and (=> (= (ControlFlow 0 7) 5) anon8_Then_correct) (=> (= (ControlFlow 0 7) 6) anon8_Else_correct)))))
(let ((anon7_Else_correct  (=> (and (not (and ($IsBox |z#1@0| _module.Iter$T@@24) ($IsAllocBox |z#1@0| _module.Iter$T@@24 $Heap@1))) (= (ControlFlow 0 4) 3)) anon5_correct)))
(let ((anon6_Else_correct  (=> (= ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 this@@0) _module.Iter.xs)) ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 this@@0) _module.Iter.xs))) (and (=> (= (ControlFlow 0 8) 7) anon7_Then_correct) (=> (= (ControlFlow 0 8) 4) anon7_Else_correct)))))
(let ((anon6_Then_correct  (=> (and (and (_module.Iter.Valid _module.Iter$T@@24 $Heap@1 this@@0) (= ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 this@@0) _module.Iter.xs)) (|Seq#Append| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 this@@0) _module.Iter.xs)) (|Seq#Build| |Seq#Empty| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 this@@0) _module.Iter.x))))) (and (|Set#IsMember| (_module.Iter.s this@@0) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 this@@0) _module.Iter.x)) (= (ControlFlow 0 2) (- 0 1)))) (and (<= 0 (- (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 this@@0) _module.Iter.xs))) 1)) (<= (- (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 this@@0) _module.Iter.xs))) 1) (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 this@@0) _module.Iter.xs))))))))
(let ((anon0_correct  (=> (and (= $_ModifiesFrame@0 (|lambda#9| null $Heap alloc this@@0)) (|Set#Equal| (_module.Iter.s this@@0) |s#0|)) (=> (and (and (and (|Seq#Equal| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.Iter.xs)) |Seq#Empty|) (_module.Iter.Valid _module.Iter$T@@24 $Heap this@@0)) (and (|Set#Equal| (_module.Iter.__reads this@@0) |Set#Empty|) (|Set#Equal| (_module.Iter.__modifies this@@0) |Set#Empty|))) (and (and (|Set#Equal| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.Iter.__new)) |Set#Empty|) (|Set#Equal| (_module.Iter.__decreases0 this@@0) |s#0|)) (and (= call1formal@rds@0 (_module.Iter.__reads this@@0)) (= call2formal@modi@0 (_module.Iter.__modifies this@@0))))) (=> (and (and (and (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (forall (($o@@19 T@U) ($f@@1 T@U) ) (!  (=> (and (or (not (= $o@@19 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@19) alloc)))) (=> (and (and (|Set#IsMember| call1formal@rds@0 ($Box refType $o@@19)) (not (|Set#IsMember| call2formal@modi@0 ($Box refType $o@@19)))) (or (not (= $o@@19 this@@0)) (not true))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@19) $f@@1) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@19) $f@@1))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@19) $f@@1))
))) (and ($HeapSucc $Heap $Heap@0) (_module.Iter.Valid _module.Iter$T@@24 $Heap@0 this@@0))) (and (and (and (= call1formal@modi@0 (_module.Iter.__modifies this@@0)) (= call2formal@nw@0 ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 this@@0) _module.Iter.__new)))) (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1))) (and (and (forall (($o@@20 T@U) ($f@@2 T@U) ) (!  (=> (and (or (not (= $o@@20 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@20) alloc)))) (or (or (or (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@20) $f@@2) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@20) $f@@2)) (= $o@@20 this@@0)) (|Set#IsMember| call1formal@modi@0 ($Box refType $o@@20))) (|Set#IsMember| call2formal@nw@0 ($Box refType $o@@20))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@20) $f@@2))
)) ($HeapSucc $Heap@0 $Heap@1)) (and (forall (($o@@21 T@U) ) (!  (=> (and (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 this@@0) _module.Iter.__new)) ($Box refType $o@@21)) (not (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 this@@0) _module.Iter.__new)) ($Box refType $o@@21)))) (or (not (= $o@@21 null)) (not true)))
 :pattern (  (or (not (= $o@@21 null)) (not true)))
)) (forall (($o@@22 T@U) ) (!  (=> (and (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 this@@0) _module.Iter.__new)) ($Box refType $o@@22)) (not (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 this@@0) _module.Iter.__new)) ($Box refType $o@@22)))) (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@22) alloc)))))
 :pattern ( ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@22) alloc)))
)))))) (and (=> (= (ControlFlow 0 9) 2) anon6_Then_correct) (=> (= (ControlFlow 0 9) 8) anon6_Else_correct)))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (and (or (not (= this@@0 null)) (not true)) (and ($Is refType this@@0 (Tclass._module.Iter _module.Iter$T@@24)) ($IsAlloc refType this@@0 (Tclass._module.Iter _module.Iter$T@@24) $Heap)))) (and (and ($Is SetType |s#0| (TSet _module.Iter$T@@24)) ($IsAlloc SetType |s#0| (TSet _module.Iter$T@@24) $Heap)) (and (= 0 $FunctionContextHeight) (= (ControlFlow 0 10) 9)))) anon0_correct)))
PreconditionGeneratedEntry_correct))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
