(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 (T@T) Int)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (T@U) Bool)
(declare-fun $generated@@13 (Int) T@U)
(declare-fun $generated@@14 (T@U) Int)
(declare-fun $generated@@15 (Real) T@U)
(declare-fun $generated@@16 (T@U) Real)
(declare-fun $generated@@23 (T@U) T@U)
(declare-fun $generated@@24 () Int)
(declare-fun $generated@@25 (T@U T@U) Bool)
(declare-fun $generated@@26 (T@U T@U) Bool)
(declare-fun $generated@@27 (T@T T@U T@U) Bool)
(declare-fun $generated@@28 () T@T)
(declare-fun $generated@@29 () T@U)
(declare-fun $generated@@30 (T@U) Int)
(declare-fun $generated@@33 (T@U) Bool)
(declare-fun $generated@@35 (T@U T@U) Bool)
(declare-fun $generated@@38 (Int) Int)
(declare-fun $generated@@40 (T@T T@U) T@U)
(declare-fun $generated@@43 (T@U) T@U)
(declare-fun $generated@@45 (T@T T@U) T@U)
(declare-fun $generated@@46 (T@T T@U) T@U)
(declare-fun $generated@@49 (Int) T@U)
(declare-fun $generated@@63 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@64 () T@T)
(declare-fun $generated@@65 () T@T)
(declare-fun $generated@@66 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@67 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@68 () T@T)
(declare-fun $generated@@69 (T@T T@T) T@T)
(declare-fun $generated@@70 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@71 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@72 (T@T) T@T)
(declare-fun $generated@@73 (T@T) T@T)
(declare-fun $generated@@122 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@123 (T@U) Bool)
(declare-fun $generated@@128 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@7 $generated@@8) 0) (= ($generated@@7 $generated@@9) 1)) (= ($generated@@7 $generated@@10) 2)) (forall (($generated@@17 Bool) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Int) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@16 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 T@U) ) (! (= ($generated@@15 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6)
)
(assert (= ($generated@@23 $generated) $generated@@1))
(assert (= ($generated@@23 $generated@@0) $generated@@2))
(assert (= ($generated@@7 $generated@@28) 3))
(assert  (=> (<= 1 $generated@@24) (forall (($generated@@31 T@U) ($generated@@32 T@U) ) (!  (=> (or ($generated@@26 $generated@@31 $generated@@32) (and (< 1 $generated@@24) (and ($generated@@27 $generated@@28 $generated@@31 $generated@@29) ($generated@@27 $generated@@28 $generated@@32 $generated@@29)))) (=> ($generated@@25 $generated@@31 $generated@@32) (<= ($generated@@30 $generated@@31) ($generated@@30 $generated@@32))))
 :pattern ( ($generated@@25 $generated@@31 $generated@@32))
))))
(assert (forall (($generated@@34 T@U) ) (!  (=> ($generated@@27 $generated@@28 $generated@@34 $generated@@29) ($generated@@33 $generated@@34))
 :pattern ( ($generated@@33 $generated@@34) ($generated@@27 $generated@@28 $generated@@34 $generated@@29))
)))
(assert (forall (($generated@@36 T@U) ($generated@@37 T@U) ) (! (= ($generated@@35 $generated@@36 $generated@@37) (= $generated@@36 $generated@@37))
 :pattern ( ($generated@@35 $generated@@36 $generated@@37))
)))
(assert (forall (($generated@@39 Int) ) (! (= ($generated@@38 $generated@@39) $generated@@39)
 :pattern ( ($generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@T) ) (! (= ($generated@@40 $generated@@42 $generated@@41) $generated@@41)
 :pattern ( ($generated@@40 $generated@@42 $generated@@41))
)))
(assert (forall (($generated@@44 T@U) ) (! (= ($generated@@33 $generated@@44) (= ($generated@@43 $generated@@44) $generated@@5))
 :pattern ( ($generated@@33 $generated@@44))
)))
(assert (forall (($generated@@47 T@U) ($generated@@48 T@T) ) (! (= ($generated@@46 $generated@@48 ($generated@@45 $generated@@48 $generated@@47)) $generated@@47)
 :pattern ( ($generated@@45 $generated@@48 $generated@@47))
)))
(assert (forall (($generated@@50 T@U) ) (!  (=> ($generated@@33 $generated@@50) (exists (($generated@@51 Int) ) (= $generated@@50 ($generated@@49 $generated@@51))))
 :pattern ( ($generated@@33 $generated@@50))
)))
(assert (forall (($generated@@52 T@U) ($generated@@53 T@U) ) (! (= ($generated@@35 $generated@@52 $generated@@53) (= ($generated@@30 $generated@@52) ($generated@@30 $generated@@53)))
 :pattern ( ($generated@@35 $generated@@52 $generated@@53))
)))
(assert  (=> (<= 1 $generated@@24) (forall (($generated@@54 T@U) ($generated@@55 T@U) ) (!  (=> (or ($generated@@26 $generated@@54 $generated@@55) (and (< 1 $generated@@24) (and ($generated@@27 $generated@@28 $generated@@54 $generated@@29) ($generated@@27 $generated@@28 $generated@@55 $generated@@29)))) (and (and ($generated@@33 $generated@@54) ($generated@@33 $generated@@55)) (= ($generated@@25 $generated@@54 $generated@@55) (<= ($generated@@30 $generated@@54) ($generated@@30 $generated@@55)))))
 :pattern ( ($generated@@25 $generated@@54 $generated@@55))
))))
(assert  (=> (<= 1 $generated@@24) (forall (($generated@@56 T@U) ($generated@@57 T@U) ) (!  (=> (or ($generated@@26 ($generated@@40 $generated@@28 $generated@@56) ($generated@@40 $generated@@28 $generated@@57)) (and (< 1 $generated@@24) (and ($generated@@27 $generated@@28 $generated@@56 $generated@@29) ($generated@@27 $generated@@28 $generated@@57 $generated@@29)))) (and (and ($generated@@33 ($generated@@40 $generated@@28 $generated@@56)) ($generated@@33 ($generated@@40 $generated@@28 $generated@@57))) (= ($generated@@25 ($generated@@40 $generated@@28 $generated@@56) ($generated@@40 $generated@@28 $generated@@57)) (<= ($generated@@38 ($generated@@30 ($generated@@40 $generated@@28 $generated@@56))) ($generated@@38 ($generated@@30 ($generated@@40 $generated@@28 $generated@@57)))))))
 :weight 3
 :pattern ( ($generated@@25 ($generated@@40 $generated@@28 $generated@@56) ($generated@@40 $generated@@28 $generated@@57)))
))))
(assert (forall (($generated@@58 Int) ) (! (= ($generated@@43 ($generated@@49 $generated@@58)) $generated@@5)
 :pattern ( ($generated@@49 $generated@@58))
)))
(assert (forall (($generated@@59 Int) ) (! (= ($generated@@30 ($generated@@49 $generated@@59)) $generated@@59)
 :pattern ( ($generated@@49 $generated@@59))
)))
(assert (forall (($generated@@60 T@U) ($generated@@61 T@T) ) (! (= ($generated@@45 $generated@@61 ($generated@@46 $generated@@61 $generated@@60)) $generated@@60)
 :pattern ( ($generated@@46 $generated@@61 $generated@@60))
)))
(assert (forall (($generated@@62 Int) ) (! (= ($generated@@27 $generated@@28 ($generated@@49 $generated@@62) $generated@@29) ($generated@@27 $generated@@9 ($generated@@13 $generated@@62) $generated@@0))
 :pattern ( ($generated@@27 $generated@@28 ($generated@@49 $generated@@62) $generated@@29))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@74 T@T) ($generated@@75 T@T) ($generated@@76 T@T) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ) (! (= ($generated@@63 $generated@@74 $generated@@75 $generated@@76 ($generated@@70 $generated@@74 $generated@@75 $generated@@76 $generated@@78 $generated@@79 $generated@@80 $generated@@77) $generated@@79 $generated@@80) $generated@@77)
 :weight 0
)) (and (forall (($generated@@81 T@T) ($generated@@82 T@T) ($generated@@83 T@T) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ) (!  (or (= $generated@@86 $generated@@88) (= ($generated@@63 $generated@@81 $generated@@82 $generated@@83 ($generated@@70 $generated@@81 $generated@@82 $generated@@83 $generated@@85 $generated@@86 $generated@@87 $generated@@84) $generated@@88 $generated@@89) ($generated@@63 $generated@@81 $generated@@82 $generated@@83 $generated@@85 $generated@@88 $generated@@89)))
 :weight 0
)) (forall (($generated@@90 T@T) ($generated@@91 T@T) ($generated@@92 T@T) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ) (!  (or (= $generated@@96 $generated@@98) (= ($generated@@63 $generated@@90 $generated@@91 $generated@@92 ($generated@@70 $generated@@90 $generated@@91 $generated@@92 $generated@@94 $generated@@95 $generated@@96 $generated@@93) $generated@@97 $generated@@98) ($generated@@63 $generated@@90 $generated@@91 $generated@@92 $generated@@94 $generated@@97 $generated@@98)))
 :weight 0
)))) (= ($generated@@7 $generated@@64) 4)) (= ($generated@@7 $generated@@65) 5)) (forall (($generated@@99 T@T) ($generated@@100 T@T) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ) (! (= ($generated@@67 $generated@@99 $generated@@100 ($generated@@71 $generated@@99 $generated@@100 $generated@@102 $generated@@103 $generated@@101) $generated@@103) $generated@@101)
 :weight 0
))) (forall (($generated@@104 T@T) ($generated@@105 T@T) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ) (!  (or (= $generated@@108 $generated@@109) (= ($generated@@67 $generated@@104 $generated@@105 ($generated@@71 $generated@@104 $generated@@105 $generated@@107 $generated@@108 $generated@@106) $generated@@109) ($generated@@67 $generated@@104 $generated@@105 $generated@@107 $generated@@109)))
 :weight 0
))) (= ($generated@@7 $generated@@68) 6)) (forall (($generated@@110 T@T) ($generated@@111 T@T) ) (= ($generated@@7 ($generated@@69 $generated@@110 $generated@@111)) 7))) (forall (($generated@@112 T@T) ($generated@@113 T@T) ) (! (= ($generated@@72 ($generated@@69 $generated@@112 $generated@@113)) $generated@@112)
 :pattern ( ($generated@@69 $generated@@112 $generated@@113))
))) (forall (($generated@@114 T@T) ($generated@@115 T@T) ) (! (= ($generated@@73 ($generated@@69 $generated@@114 $generated@@115)) $generated@@115)
 :pattern ( ($generated@@69 $generated@@114 $generated@@115))
))))
(assert (forall (($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 Bool) ($generated@@120 T@U) ($generated@@121 T@U) ) (! (= ($generated@@12 ($generated@@63 $generated@@64 $generated@@65 $generated@@8 ($generated@@66 $generated@@116 $generated@@117 $generated@@118 $generated@@119) $generated@@120 $generated@@121))  (=> (and (or (not (= $generated@@120 $generated@@116)) (not true)) ($generated@@12 ($generated@@45 $generated@@8 ($generated@@67 $generated@@65 $generated@@68 ($generated@@67 $generated@@64 ($generated@@69 $generated@@65 $generated@@68) $generated@@117 $generated@@120) $generated@@118)))) $generated@@119))
 :pattern ( ($generated@@63 $generated@@64 $generated@@65 $generated@@8 ($generated@@66 $generated@@116 $generated@@117 $generated@@118 $generated@@119) $generated@@120 $generated@@121))
)))
(assert (forall (($generated@@124 T@U) ($generated@@125 T@U) ) (!  (=> (and ($generated@@123 $generated@@125) (and ($generated@@33 $generated@@124) ($generated@@122 $generated@@28 $generated@@124 $generated@@29 $generated@@125))) ($generated@@122 $generated@@9 ($generated@@13 ($generated@@30 $generated@@124)) $generated@@0 $generated@@125))
 :pattern ( ($generated@@122 $generated@@9 ($generated@@13 ($generated@@30 $generated@@124)) $generated@@0 $generated@@125))
)))
(assert (forall (($generated@@126 T@U) ($generated@@127 T@U) ) (!  (=> (and ($generated@@123 $generated@@127) ($generated@@27 $generated@@28 $generated@@126 $generated@@29)) ($generated@@122 $generated@@28 $generated@@126 $generated@@29 $generated@@127))
 :pattern ( ($generated@@122 $generated@@28 $generated@@126 $generated@@29 $generated@@127))
)))
(assert (= ($generated@@23 $generated@@29) $generated@@4))
(assert (= ($generated@@128 $generated@@29) $generated@@6))
(assert (forall (($generated@@129 Int) ) (! (= ($generated@@46 $generated@@9 ($generated@@13 ($generated@@38 $generated@@129))) ($generated@@40 $generated@@68 ($generated@@46 $generated@@9 ($generated@@13 $generated@@129))))
 :pattern ( ($generated@@46 $generated@@9 ($generated@@13 ($generated@@38 $generated@@129))))
)))
(assert (forall (($generated@@130 Int) ) (! (= ($generated@@49 ($generated@@38 $generated@@130)) ($generated@@40 $generated@@28 ($generated@@49 $generated@@130)))
 :pattern ( ($generated@@49 ($generated@@38 $generated@@130)))
)))
(assert (forall (($generated@@131 T@U) ($generated@@132 T@T) ) (! (= ($generated@@46 $generated@@132 ($generated@@40 $generated@@132 $generated@@131)) ($generated@@40 $generated@@68 ($generated@@46 $generated@@132 $generated@@131)))
 :pattern ( ($generated@@46 $generated@@132 ($generated@@40 $generated@@132 $generated@@131)))
)))
(assert (forall (($generated@@133 T@U) ($generated@@134 T@U) ) (! ($generated@@122 $generated@@9 $generated@@134 $generated@@0 $generated@@133)
 :pattern ( ($generated@@122 $generated@@9 $generated@@134 $generated@@0 $generated@@133))
)))
(assert (forall (($generated@@135 T@U) ($generated@@136 T@U) ) (! ($generated@@122 $generated@@8 $generated@@136 $generated $generated@@135)
 :pattern ( ($generated@@122 $generated@@8 $generated@@136 $generated $generated@@135))
)))
(assert (forall (($generated@@137 T@U) ) (! ($generated@@27 $generated@@9 $generated@@137 $generated@@0)
 :pattern ( ($generated@@27 $generated@@9 $generated@@137 $generated@@0))
)))
(assert (forall (($generated@@138 T@U) ) (! ($generated@@27 $generated@@8 $generated@@138 $generated)
 :pattern ( ($generated@@27 $generated@@8 $generated@@138 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@139 () T@U)
(declare-fun $generated@@140 () T@U)
(declare-fun $generated@@141 () T@U)
(declare-fun $generated@@142 (T@U) Int)
(declare-fun $generated@@143 () T@U)
(declare-fun $generated@@144 () T@U)
(declare-fun $generated@@145 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 9) (let (($generated@@146  (=> (= (ControlFlow 0 6) (- 0 5)) (=> ($generated@@25 $generated@@139 $generated@@140) (<= ($generated@@30 $generated@@139) ($generated@@30 $generated@@140))))))
(let (($generated@@147  (=> ($generated@@33 $generated@@139) (=> (and ($generated@@33 $generated@@140) (= ($generated@@25 $generated@@139 $generated@@140) (<= ($generated@@30 $generated@@139) ($generated@@30 $generated@@140)))) (=> (and (and ($generated@@33 $generated@@139) ($generated@@33 $generated@@140)) (and ($generated@@27 $generated@@8 ($generated@@11 ($generated@@25 $generated@@139 $generated@@140)) $generated) (= (ControlFlow 0 7) 6))) $generated@@146)))))
(let (($generated@@148 true))
(let (($generated@@149  (=> (and (=> ($generated@@25 $generated@@139 $generated@@140) (<= ($generated@@30 $generated@@139) ($generated@@30 $generated@@140))) (= (ControlFlow 0 4) 1)) $generated@@148)))
(let (($generated@@150  (=> (and ($generated@@122 $generated@@28 $generated@@139 $generated@@29 $generated@@141) ($generated@@122 $generated@@28 $generated@@140 $generated@@29 $generated@@141)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (or (and ($generated@@35 $generated@@139 $generated@@139) ($generated@@35 $generated@@140 $generated@@140)) (or (< ($generated@@142 $generated@@139) ($generated@@142 $generated@@139)) (and (= ($generated@@142 $generated@@139) ($generated@@142 $generated@@139)) (< ($generated@@142 $generated@@140) ($generated@@142 $generated@@140)))))) (=> (or (and ($generated@@35 $generated@@139 $generated@@139) ($generated@@35 $generated@@140 $generated@@140)) (or (< ($generated@@142 $generated@@139) ($generated@@142 $generated@@139)) (and (= ($generated@@142 $generated@@139) ($generated@@142 $generated@@139)) (< ($generated@@142 $generated@@140) ($generated@@142 $generated@@140))))) (=> (and (or (and ($generated@@35 $generated@@139 $generated@@139) ($generated@@35 $generated@@140 $generated@@140)) ($generated@@26 $generated@@139 $generated@@140)) ($generated@@25 $generated@@139 $generated@@140)) (=> (and (and ($generated@@33 $generated@@139) ($generated@@33 $generated@@140)) (and (<= ($generated@@30 $generated@@139) ($generated@@30 $generated@@140)) (= (ControlFlow 0 2) 1))) $generated@@148)))))))
(let (($generated@@151  (=> (= $generated@@143 ($generated@@66 $generated@@144 $generated@@141 $generated@@3 false)) (and (and (=> (= (ControlFlow 0 8) 7) $generated@@147) (=> (= (ControlFlow 0 8) 2) $generated@@150)) (=> (= (ControlFlow 0 8) 4) $generated@@149)))))
(let (($generated@@152  (=> (and ($generated@@123 $generated@@141) ($generated@@145 $generated@@141)) (=> (and (and ($generated@@27 $generated@@28 $generated@@139 $generated@@29) ($generated@@27 $generated@@28 $generated@@140 $generated@@29)) (and (= 1 $generated@@24) (= (ControlFlow 0 9) 8))) $generated@@151))))
$generated@@152))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
