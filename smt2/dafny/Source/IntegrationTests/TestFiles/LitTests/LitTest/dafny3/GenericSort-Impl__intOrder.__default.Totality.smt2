(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () Int)
(declare-fun $generated@@0 (Int Int) Bool)
(declare-fun $generated@@1 (Int Int) Bool)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (Bool) T@U)
(declare-fun $generated@@7 (T@U) Bool)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun $generated@@9 (T@U) Int)
(declare-fun $generated@@10 (Real) T@U)
(declare-fun $generated@@11 (T@U) Real)
(declare-fun $generated@@20 (Int) Int)
(declare-fun $generated@@22 (T@T T@U) T@U)
(declare-fun $generated@@25 (T@T T@U) T@U)
(declare-fun $generated@@26 (T@T T@U) T@U)
(declare-fun $generated@@35 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@36 () T@T)
(declare-fun $generated@@37 () T@T)
(declare-fun $generated@@38 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@39 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@40 () T@T)
(declare-fun $generated@@41 (T@T T@T) T@T)
(declare-fun $generated@@42 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@43 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@44 (T@T) T@T)
(declare-fun $generated@@45 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@4) 1)) (= ($generated@@2 $generated@@5) 2)) (forall (($generated@@12 Bool) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Int) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Real) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))))
(assert  (=> (<= 1 $generated) (forall (($generated@@18 Int) ($generated@@19 Int) ) (!  (=> (or ($generated@@1 $generated@@18 $generated@@19) (< 1 $generated)) (=> ($generated@@0 $generated@@18 $generated@@19) (<= $generated@@18 $generated@@19)))
 :pattern ( ($generated@@0 $generated@@18 $generated@@19))
))))
(assert (forall (($generated@@21 Int) ) (! (= ($generated@@20 $generated@@21) $generated@@21)
 :pattern ( ($generated@@20 $generated@@21))
)))
(assert (forall (($generated@@23 T@U) ($generated@@24 T@T) ) (! (= ($generated@@22 $generated@@24 $generated@@23) $generated@@23)
 :pattern ( ($generated@@22 $generated@@24 $generated@@23))
)))
(assert (forall (($generated@@27 T@U) ($generated@@28 T@T) ) (! (= ($generated@@26 $generated@@28 ($generated@@25 $generated@@28 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@25 $generated@@28 $generated@@27))
)))
(assert  (=> (<= 1 $generated) (forall (($generated@@29 Int) ($generated@@30 Int) ) (!  (=> (or ($generated@@1 ($generated@@20 $generated@@29) ($generated@@20 $generated@@30)) (< 1 $generated)) (= ($generated@@0 ($generated@@20 $generated@@29) ($generated@@20 $generated@@30)) (<= ($generated@@20 $generated@@29) ($generated@@20 $generated@@30))))
 :weight 3
 :pattern ( ($generated@@0 ($generated@@20 $generated@@29) ($generated@@20 $generated@@30)))
))))
(assert  (=> (<= 1 $generated) (forall (($generated@@31 Int) ($generated@@32 Int) ) (!  (=> (or ($generated@@1 $generated@@31 $generated@@32) (< 1 $generated)) (= ($generated@@0 $generated@@31 $generated@@32) (<= $generated@@31 $generated@@32)))
 :pattern ( ($generated@@0 $generated@@31 $generated@@32))
))))
(assert (forall (($generated@@33 T@U) ($generated@@34 T@T) ) (! (= ($generated@@25 $generated@@34 ($generated@@26 $generated@@34 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@26 $generated@@34 $generated@@33))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@46 T@T) ($generated@@47 T@T) ($generated@@48 T@T) ($generated@@49 T@U) ($generated@@50 T@U) ($generated@@51 T@U) ($generated@@52 T@U) ) (! (= ($generated@@35 $generated@@46 $generated@@47 $generated@@48 ($generated@@42 $generated@@46 $generated@@47 $generated@@48 $generated@@50 $generated@@51 $generated@@52 $generated@@49) $generated@@51 $generated@@52) $generated@@49)
 :weight 0
)) (and (forall (($generated@@53 T@T) ($generated@@54 T@T) ($generated@@55 T@T) ($generated@@56 T@U) ($generated@@57 T@U) ($generated@@58 T@U) ($generated@@59 T@U) ($generated@@60 T@U) ($generated@@61 T@U) ) (!  (or (= $generated@@58 $generated@@60) (= ($generated@@35 $generated@@53 $generated@@54 $generated@@55 ($generated@@42 $generated@@53 $generated@@54 $generated@@55 $generated@@57 $generated@@58 $generated@@59 $generated@@56) $generated@@60 $generated@@61) ($generated@@35 $generated@@53 $generated@@54 $generated@@55 $generated@@57 $generated@@60 $generated@@61)))
 :weight 0
)) (forall (($generated@@62 T@T) ($generated@@63 T@T) ($generated@@64 T@T) ($generated@@65 T@U) ($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ) (!  (or (= $generated@@68 $generated@@70) (= ($generated@@35 $generated@@62 $generated@@63 $generated@@64 ($generated@@42 $generated@@62 $generated@@63 $generated@@64 $generated@@66 $generated@@67 $generated@@68 $generated@@65) $generated@@69 $generated@@70) ($generated@@35 $generated@@62 $generated@@63 $generated@@64 $generated@@66 $generated@@69 $generated@@70)))
 :weight 0
)))) (= ($generated@@2 $generated@@36) 3)) (= ($generated@@2 $generated@@37) 4)) (forall (($generated@@71 T@T) ($generated@@72 T@T) ($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@U) ) (! (= ($generated@@39 $generated@@71 $generated@@72 ($generated@@43 $generated@@71 $generated@@72 $generated@@74 $generated@@75 $generated@@73) $generated@@75) $generated@@73)
 :weight 0
))) (forall (($generated@@76 T@T) ($generated@@77 T@T) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ) (!  (or (= $generated@@80 $generated@@81) (= ($generated@@39 $generated@@76 $generated@@77 ($generated@@43 $generated@@76 $generated@@77 $generated@@79 $generated@@80 $generated@@78) $generated@@81) ($generated@@39 $generated@@76 $generated@@77 $generated@@79 $generated@@81)))
 :weight 0
))) (= ($generated@@2 $generated@@40) 5)) (forall (($generated@@82 T@T) ($generated@@83 T@T) ) (= ($generated@@2 ($generated@@41 $generated@@82 $generated@@83)) 6))) (forall (($generated@@84 T@T) ($generated@@85 T@T) ) (! (= ($generated@@44 ($generated@@41 $generated@@84 $generated@@85)) $generated@@84)
 :pattern ( ($generated@@41 $generated@@84 $generated@@85))
))) (forall (($generated@@86 T@T) ($generated@@87 T@T) ) (! (= ($generated@@45 ($generated@@41 $generated@@86 $generated@@87)) $generated@@87)
 :pattern ( ($generated@@41 $generated@@86 $generated@@87))
))))
(assert (forall (($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 Bool) ($generated@@92 T@U) ($generated@@93 T@U) ) (! (= ($generated@@7 ($generated@@35 $generated@@36 $generated@@37 $generated@@3 ($generated@@38 $generated@@88 $generated@@89 $generated@@90 $generated@@91) $generated@@92 $generated@@93))  (=> (and (or (not (= $generated@@92 $generated@@88)) (not true)) ($generated@@7 ($generated@@25 $generated@@3 ($generated@@39 $generated@@37 $generated@@40 ($generated@@39 $generated@@36 ($generated@@41 $generated@@37 $generated@@40) $generated@@89 $generated@@92) $generated@@90)))) $generated@@91))
 :pattern ( ($generated@@35 $generated@@36 $generated@@37 $generated@@3 ($generated@@38 $generated@@88 $generated@@89 $generated@@90 $generated@@91) $generated@@92 $generated@@93))
)))
(assert (forall (($generated@@94 Int) ) (! (= ($generated@@26 $generated@@4 ($generated@@8 ($generated@@20 $generated@@94))) ($generated@@22 $generated@@40 ($generated@@26 $generated@@4 ($generated@@8 $generated@@94))))
 :pattern ( ($generated@@26 $generated@@4 ($generated@@8 ($generated@@20 $generated@@94))))
)))
(assert (forall (($generated@@95 T@U) ($generated@@96 T@T) ) (! (= ($generated@@26 $generated@@96 ($generated@@22 $generated@@96 $generated@@95)) ($generated@@22 $generated@@40 ($generated@@26 $generated@@96 $generated@@95)))
 :pattern ( ($generated@@26 $generated@@96 ($generated@@22 $generated@@96 $generated@@95)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@97 () T@U)
(declare-fun $generated@@98 () T@U)
(declare-fun $generated@@99 () T@U)
(declare-fun $generated@@100 () T@U)
(declare-fun $generated@@101 () Int)
(declare-fun $generated@@102 () Int)
(declare-fun $generated@@103 (T@U) Bool)
(declare-fun $generated@@104 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@105  (=> (and (= $generated@@97 ($generated@@38 $generated@@98 $generated@@99 $generated@@100 false)) (= (ControlFlow 0 2) (- 0 1))) (or ($generated@@0 $generated@@101 $generated@@102) ($generated@@0 $generated@@102 $generated@@101)))))
(let (($generated@@106  (=> (and (and ($generated@@103 $generated@@99) ($generated@@104 $generated@@99)) (and (= 2 $generated) (= (ControlFlow 0 3) 2))) $generated@@105)))
$generated@@106)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
