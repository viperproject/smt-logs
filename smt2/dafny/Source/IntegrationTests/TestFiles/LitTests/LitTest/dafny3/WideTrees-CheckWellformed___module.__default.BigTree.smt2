(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 (T@T) Int)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 (Bool) T@U)
(declare-fun $generated@@11 (T@U) Bool)
(declare-fun $generated@@12 (Int) T@U)
(declare-fun $generated@@13 (T@U) Int)
(declare-fun $generated@@14 (Real) T@U)
(declare-fun $generated@@15 (T@U) Real)
(declare-fun $generated@@22 () Int)
(declare-fun $generated@@23 (T@U) T@U)
(declare-fun $generated@@24 (T@U) T@U)
(declare-fun $generated@@25 () Bool)
(declare-fun $generated@@26 () Bool)
(declare-fun $generated@@27 (T@T T@U) T@U)
(declare-fun $generated@@28 () T@T)
(declare-fun $generated@@29 (T@U T@U) T@U)
(declare-fun $generated@@30 (T@T T@U) T@U)
(declare-fun $generated@@31 (T@U) T@U)
(declare-fun $generated@@33 (Int) Int)
(declare-fun $generated@@37 (T@U) T@U)
(declare-fun $generated@@39 (T@T T@U T@U) Bool)
(declare-fun $generated@@40 (T@U) T@U)
(declare-fun $generated@@41 (T@U T@U) Bool)
(declare-fun $generated@@45 (T@T T@U) T@U)
(declare-fun $generated@@48 (T@U) T@U)
(declare-fun $generated@@49 (T@U) T@U)
(declare-fun $generated@@51 () T@U)
(declare-fun $generated@@57 (T@U) T@U)
(declare-fun $generated@@60 (T@U) T@U)
(declare-fun $generated@@63 (T@U) T@U)
(declare-fun $generated@@66 (T@U) T@U)
(declare-fun $generated@@69 (T@U) T@U)
(declare-fun $generated@@73 (T@U) Int)
(declare-fun $generated@@75 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@76 () T@T)
(declare-fun $generated@@77 () T@T)
(declare-fun $generated@@78 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@79 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@80 () T@T)
(declare-fun $generated@@81 (T@T T@T) T@T)
(declare-fun $generated@@82 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@83 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@84 (T@T) T@T)
(declare-fun $generated@@85 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@6 $generated@@7) 0) (= ($generated@@6 $generated@@8) 1)) (= ($generated@@6 $generated@@9) 2)) (forall (($generated@@16 Bool) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Int) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Real) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5)
)
(assert (= ($generated@@6 $generated@@28) 3))
(assert  (=> (<= 2 $generated@@22) (forall (($generated@@32 T@U) ) (!  (=> (or $generated@@25 (< 2 $generated@@22)) (and (and $generated@@26 $generated@@25) (= ($generated@@23 ($generated@@24 $generated@@32)) ($generated@@27 $generated@@28 ($generated@@29 ($generated@@30 $generated@@28 ($generated@@27 $generated@@28 ($generated@@31 $generated@@32))) ($generated@@27 $generated@@28 ($generated@@23 $generated@@32)))))))
 :pattern ( ($generated@@23 ($generated@@24 $generated@@32)))
))))
(assert (forall (($generated@@34 Int) ) (! (= ($generated@@33 $generated@@34) $generated@@34)
 :pattern ( ($generated@@33 $generated@@34))
)))
(assert (forall (($generated@@35 T@U) ($generated@@36 T@T) ) (! (= ($generated@@27 $generated@@36 $generated@@35) $generated@@35)
 :pattern ( ($generated@@27 $generated@@36 $generated@@35))
)))
(assert  (=> (<= 2 $generated@@22) (forall (($generated@@38 T@U) ) (!  (=> (or $generated@@26 (< 2 $generated@@22)) (and $generated@@25 (= ($generated@@31 ($generated@@24 $generated@@38)) ($generated@@27 $generated@@28 ($generated@@37 ($generated@@27 $generated@@28 ($generated@@23 $generated@@38)))))))
 :pattern ( ($generated@@31 ($generated@@24 $generated@@38)))
))))
(assert (forall (($generated@@42 T@U) ($generated@@43 T@U) ($generated@@44 T@U) ) (! (= ($generated@@39 $generated@@28 ($generated@@29 $generated@@43 $generated@@44) ($generated@@40 $generated@@42))  (and ($generated@@41 $generated@@43 $generated@@42) ($generated@@39 $generated@@28 $generated@@44 ($generated@@40 $generated@@42))))
 :pattern ( ($generated@@39 $generated@@28 ($generated@@29 $generated@@43 $generated@@44) ($generated@@40 $generated@@42)))
)))
(assert (forall (($generated@@46 T@U) ($generated@@47 T@T) ) (! (= ($generated@@30 $generated@@47 ($generated@@45 $generated@@47 $generated@@46)) $generated@@46)
 :pattern ( ($generated@@45 $generated@@47 $generated@@46))
)))
(assert (forall (($generated@@50 T@U) ) (!  (and (= ($generated@@48 ($generated@@40 $generated@@50)) $generated@@1) (= ($generated@@49 ($generated@@40 $generated@@50)) $generated@@5))
 :pattern ( ($generated@@40 $generated@@50))
)))
(assert (forall (($generated@@52 T@U) ) (!  (=> ($generated@@41 $generated@@52 $generated@@51) (and (= ($generated@@30 $generated@@28 ($generated@@45 $generated@@28 $generated@@52)) $generated@@52) ($generated@@39 $generated@@28 ($generated@@45 $generated@@28 $generated@@52) $generated@@51)))
 :pattern ( ($generated@@41 $generated@@52 $generated@@51))
)))
(assert (forall (($generated@@53 T@U) ) (! (= ($generated@@39 $generated@@28 ($generated@@37 $generated@@53) $generated@@51) ($generated@@39 $generated@@28 $generated@@53 ($generated@@40 $generated@@51)))
 :pattern ( ($generated@@39 $generated@@28 ($generated@@37 $generated@@53) $generated@@51))
)))
(assert (forall (($generated@@54 T@U) ($generated@@55 T@U) ($generated@@56 T@T) ) (! (= ($generated@@41 ($generated@@30 $generated@@56 $generated@@54) $generated@@55) ($generated@@39 $generated@@56 $generated@@54 $generated@@55))
 :pattern ( ($generated@@41 ($generated@@30 $generated@@56 $generated@@54) $generated@@55))
)))
(assert (forall (($generated@@58 T@U) ($generated@@59 T@U) ) (! (= ($generated@@57 ($generated@@29 $generated@@58 $generated@@59)) $generated@@2)
 :pattern ( ($generated@@29 $generated@@58 $generated@@59))
)))
(assert (forall (($generated@@61 T@U) ($generated@@62 T@U) ) (! (= ($generated@@60 ($generated@@29 $generated@@61 $generated@@62)) $generated@@61)
 :pattern ( ($generated@@29 $generated@@61 $generated@@62))
)))
(assert (forall (($generated@@64 T@U) ($generated@@65 T@U) ) (! (= ($generated@@63 ($generated@@29 $generated@@64 $generated@@65)) $generated@@65)
 :pattern ( ($generated@@29 $generated@@64 $generated@@65))
)))
(assert (forall (($generated@@67 T@U) ) (! (= ($generated@@66 ($generated@@40 $generated@@67)) $generated@@67)
 :pattern ( ($generated@@40 $generated@@67))
)))
(assert (forall (($generated@@68 T@U) ) (! (= ($generated@@57 ($generated@@37 $generated@@68)) $generated@@3)
 :pattern ( ($generated@@37 $generated@@68))
)))
(assert (forall (($generated@@70 T@U) ) (! (= ($generated@@69 ($generated@@37 $generated@@70)) $generated@@70)
 :pattern ( ($generated@@37 $generated@@70))
)))
(assert (forall (($generated@@71 T@U) ($generated@@72 T@T) ) (! (= ($generated@@45 $generated@@72 ($generated@@30 $generated@@72 $generated@@71)) $generated@@71)
 :pattern ( ($generated@@30 $generated@@72 $generated@@71))
)))
(assert (forall (($generated@@74 T@U) ) (! (< ($generated@@73 $generated@@74) ($generated@@73 ($generated@@37 $generated@@74)))
 :pattern ( ($generated@@37 $generated@@74))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@86 T@T) ($generated@@87 T@T) ($generated@@88 T@T) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ) (! (= ($generated@@75 $generated@@86 $generated@@87 $generated@@88 ($generated@@82 $generated@@86 $generated@@87 $generated@@88 $generated@@90 $generated@@91 $generated@@92 $generated@@89) $generated@@91 $generated@@92) $generated@@89)
 :weight 0
)) (and (forall (($generated@@93 T@T) ($generated@@94 T@T) ($generated@@95 T@T) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ) (!  (or (= $generated@@98 $generated@@100) (= ($generated@@75 $generated@@93 $generated@@94 $generated@@95 ($generated@@82 $generated@@93 $generated@@94 $generated@@95 $generated@@97 $generated@@98 $generated@@99 $generated@@96) $generated@@100 $generated@@101) ($generated@@75 $generated@@93 $generated@@94 $generated@@95 $generated@@97 $generated@@100 $generated@@101)))
 :weight 0
)) (forall (($generated@@102 T@T) ($generated@@103 T@T) ($generated@@104 T@T) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ) (!  (or (= $generated@@108 $generated@@110) (= ($generated@@75 $generated@@102 $generated@@103 $generated@@104 ($generated@@82 $generated@@102 $generated@@103 $generated@@104 $generated@@106 $generated@@107 $generated@@108 $generated@@105) $generated@@109 $generated@@110) ($generated@@75 $generated@@102 $generated@@103 $generated@@104 $generated@@106 $generated@@109 $generated@@110)))
 :weight 0
)))) (= ($generated@@6 $generated@@76) 4)) (= ($generated@@6 $generated@@77) 5)) (forall (($generated@@111 T@T) ($generated@@112 T@T) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (! (= ($generated@@79 $generated@@111 $generated@@112 ($generated@@83 $generated@@111 $generated@@112 $generated@@114 $generated@@115 $generated@@113) $generated@@115) $generated@@113)
 :weight 0
))) (forall (($generated@@116 T@T) ($generated@@117 T@T) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ) (!  (or (= $generated@@120 $generated@@121) (= ($generated@@79 $generated@@116 $generated@@117 ($generated@@83 $generated@@116 $generated@@117 $generated@@119 $generated@@120 $generated@@118) $generated@@121) ($generated@@79 $generated@@116 $generated@@117 $generated@@119 $generated@@121)))
 :weight 0
))) (= ($generated@@6 $generated@@80) 6)) (forall (($generated@@122 T@T) ($generated@@123 T@T) ) (= ($generated@@6 ($generated@@81 $generated@@122 $generated@@123)) 7))) (forall (($generated@@124 T@T) ($generated@@125 T@T) ) (! (= ($generated@@84 ($generated@@81 $generated@@124 $generated@@125)) $generated@@124)
 :pattern ( ($generated@@81 $generated@@124 $generated@@125))
))) (forall (($generated@@126 T@T) ($generated@@127 T@T) ) (! (= ($generated@@85 ($generated@@81 $generated@@126 $generated@@127)) $generated@@127)
 :pattern ( ($generated@@81 $generated@@126 $generated@@127))
))))
(assert (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 Bool) ($generated@@132 T@U) ($generated@@133 T@U) ) (! (= ($generated@@11 ($generated@@75 $generated@@76 $generated@@77 $generated@@7 ($generated@@78 $generated@@128 $generated@@129 $generated@@130 $generated@@131) $generated@@132 $generated@@133))  (=> (and (or (not (= $generated@@132 $generated@@128)) (not true)) ($generated@@11 ($generated@@45 $generated@@7 ($generated@@79 $generated@@77 $generated@@80 ($generated@@79 $generated@@76 ($generated@@81 $generated@@77 $generated@@80) $generated@@129 $generated@@132) $generated@@130)))) $generated@@131))
 :pattern ( ($generated@@75 $generated@@76 $generated@@77 $generated@@7 ($generated@@78 $generated@@128 $generated@@129 $generated@@130 $generated@@131) $generated@@132 $generated@@133))
)))
(assert  (=> (<= 2 $generated@@22) (forall (($generated@@134 T@U) ) (!  (=> (or $generated@@26 (< 2 $generated@@22)) ($generated@@39 $generated@@28 ($generated@@31 $generated@@134) $generated@@51))
 :pattern ( ($generated@@31 $generated@@134))
))))
(assert (forall (($generated@@135 T@U) ) (! (= ($generated@@31 ($generated@@24 $generated@@135)) ($generated@@31 $generated@@135))
 :pattern ( ($generated@@31 ($generated@@24 $generated@@135)))
)))
(assert (forall (($generated@@136 T@U) ) (! (= ($generated@@23 ($generated@@24 $generated@@136)) ($generated@@23 $generated@@136))
 :pattern ( ($generated@@23 ($generated@@24 $generated@@136)))
)))
(assert (forall (($generated@@137 T@U) ($generated@@138 T@U) ) (!  (=> ($generated@@41 $generated@@138 ($generated@@40 $generated@@137)) (and (= ($generated@@30 $generated@@28 ($generated@@45 $generated@@28 $generated@@138)) $generated@@138) ($generated@@39 $generated@@28 ($generated@@45 $generated@@28 $generated@@138) ($generated@@40 $generated@@137))))
 :pattern ( ($generated@@41 $generated@@138 ($generated@@40 $generated@@137)))
)))
(assert (= ($generated@@48 $generated@@51) $generated@@0))
(assert (= ($generated@@49 $generated@@51) $generated@@4))
(assert  (=> (<= 2 $generated@@22) (forall (($generated@@139 T@U) ) (!  (=> (or $generated@@25 (< 2 $generated@@22)) ($generated@@39 $generated@@28 ($generated@@23 $generated@@139) ($generated@@40 $generated@@51)))
 :pattern ( ($generated@@23 $generated@@139))
))))
(assert (forall (($generated@@140 Int) ) (! (= ($generated@@30 $generated@@8 ($generated@@12 ($generated@@33 $generated@@140))) ($generated@@27 $generated@@80 ($generated@@30 $generated@@8 ($generated@@12 $generated@@140))))
 :pattern ( ($generated@@30 $generated@@8 ($generated@@12 ($generated@@33 $generated@@140))))
)))
(assert (forall (($generated@@141 T@U) ) (! (= ($generated@@37 ($generated@@27 $generated@@28 $generated@@141)) ($generated@@27 $generated@@28 ($generated@@37 $generated@@141)))
 :pattern ( ($generated@@37 ($generated@@27 $generated@@28 $generated@@141)))
)))
(assert (forall (($generated@@142 T@U) ($generated@@143 T@T) ) (! (= ($generated@@30 $generated@@143 ($generated@@27 $generated@@143 $generated@@142)) ($generated@@27 $generated@@80 ($generated@@30 $generated@@143 $generated@@142)))
 :pattern ( ($generated@@30 $generated@@143 ($generated@@27 $generated@@143 $generated@@142)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@144 () T@U)
(declare-fun $generated@@145 () T@U)
(declare-fun $generated@@146 () T@U)
(declare-fun $generated@@147 (T@U) Bool)
(declare-fun $generated@@148 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 6) (let (($generated@@149  (and (=> (= (ControlFlow 0 3) (- 0 4)) (or (<= 0 ($generated@@33 1)) (= ($generated@@33 0) ($generated@@33 1)))) (=> (or (<= 0 ($generated@@33 1)) (= ($generated@@33 0) ($generated@@33 1))) (=> (= (ControlFlow 0 3) (- 0 2)) (<= ($generated@@33 0) ($generated@@33 1)))))))
(let (($generated@@150 true))
(let (($generated@@151  (=> (= $generated@@144 ($generated@@78 $generated@@145 $generated@@146 $generated false)) (and (=> (= (ControlFlow 0 5) 1) $generated@@150) (=> (= (ControlFlow 0 5) 3) $generated@@149)))))
(let (($generated@@152  (=> (and (and ($generated@@147 $generated@@146) ($generated@@148 $generated@@146)) (and (= 2 $generated@@22) (= (ControlFlow 0 6) 5))) $generated@@151)))
$generated@@152)))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
