(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TORDINAL () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagORDINAL () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._System.nat () T@U)
(declare-fun Tagclass._module.Stream () T@U)
(declare-fun Tagclass._module.Number () T@U)
(declare-fun Tagclass._module.CoOption () T@U)
(declare-fun |##_module.Stream.Nil| () T@U)
(declare-fun |##_module.Stream.Cons| () T@U)
(declare-fun |##_module.CoOption.None| () T@U)
(declare-fun |##_module.CoOption.Some| () T@U)
(declare-fun |##_module.Number.Succ| () T@U)
(declare-fun |##_module.Number.Zero| () T@U)
(declare-fun tytagFamily$nat () T@U)
(declare-fun tytagFamily$Stream () T@U)
(declare-fun tytagFamily$Number () T@U)
(declare-fun tytagFamily$CoOption () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun |ORD#Less| (T@U T@U) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass._System.nat () T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.N2S (T@U T@U) T@U)
(declare-fun |_module.__default.N2S#canCall| (T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun Tclass._module.CoOption (T@U) T@U)
(declare-fun Tclass._module.Number () T@U)
(declare-fun Tclass._module.Stream (T@U) T@U)
(declare-fun |ORD#Minus| (T@U T@U) T@U)
(declare-fun |ORD#FromNat| (Int) T@U)
(declare-fun |ORD#Offset| (T@U) Int)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun |#_module.Stream.Nil| () T@U)
(declare-fun |#_module.CoOption.None| () T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun _module.__default.InfinitePath_k (T@U T@U) Bool)
(declare-fun $LS (T@U) T@U)
(declare-fun |_module.__default.InfinitePath_k#canCall| (T@U) Bool)
(declare-fun _module.Number.Succ_q (T@U) Bool)
(declare-fun _module.Number._h4 (T@U) T@U)
(declare-fun _module.Number._h5 (T@U) T@U)
(declare-fun |_module.__default.InfinitePath#canCall| (T@U) Bool)
(declare-fun _module.__default.InfinitePath (T@U T@U) Bool)
(declare-fun _module.__default.InfinitePath_h (T@U T@U T@U) Bool)
(declare-fun |_module.__default.InfinitePath_h#canCall| (T@U T@U) Bool)
(declare-fun _module.CoOption.None_q (T@U) Bool)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun _module.CoOption.get (T@U) T@U)
(declare-fun |_module.__default.InfinitePath_k_h#canCall| (T@U T@U) Bool)
(declare-fun _module.__default.InfinitePath_k_h (T@U T@U T@U) Bool)
(declare-fun $LZ () T@U)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun _module.__default.IsNeverEndingStream_h (T@U T@U T@U T@U) Bool)
(declare-fun |_module.__default.IsNeverEndingStream_h#canCall| (T@U T@U T@U) Bool)
(declare-fun _module.Stream.Nil_q (T@U) Bool)
(declare-fun _module.Stream.tail (T@U) T@U)
(declare-fun |#_module.Stream.Cons| (T@U T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun _module.Stream.Cons_q (T@U) Bool)
(declare-fun _module.CoOption.Some_q (T@U) Bool)
(declare-fun _module.Number.Zero_q (T@U) Bool)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun |#_module.CoOption.Some| (T@U) T@U)
(declare-fun |#_module.Number.Succ| (T@U) T@U)
(declare-fun |#_module.Number.Zero| (T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun TagFamily (T@U) T@U)
(declare-fun |ORD#IsNat| (T@U) Bool)
(declare-fun _module.__default.N2S_k (T@U Int T@U) T@U)
(declare-fun |_module.__default.N2S_k#canCall| (Int T@U) Bool)
(declare-fun |$IsA#_module.Number| (T@U) Bool)
(declare-fun _module.Stream.head (T@U) T@U)
(declare-fun Tclass._module.Stream_0 (T@U) T@U)
(declare-fun Tclass._module.CoOption_0 (T@U) T@U)
(declare-fun DtRank (T@U) Int)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TORDINAL TagInt TagORDINAL alloc Tagclass._System.nat Tagclass._module.Stream Tagclass._module.Number Tagclass._module.CoOption |##_module.Stream.Nil| |##_module.Stream.Cons| |##_module.CoOption.None| |##_module.CoOption.Some| |##_module.Number.Succ| |##_module.Number.Zero| tytagFamily$nat tytagFamily$Stream tytagFamily$Number tytagFamily$CoOption)
)
(assert (= (Tag TInt) TagInt))
(assert (= (Tag TORDINAL) TagORDINAL))
(assert (forall ((o T@U) (p T@U) (r T@U) ) (!  (=> (and (|ORD#Less| o p) (|ORD#Less| p r)) (|ORD#Less| o r))
 :pattern ( (|ORD#Less| o p) (|ORD#Less| p r))
 :pattern ( (|ORD#Less| o p) (|ORD#Less| o r))
)))
(assert (forall ((|x#0| T@U) ($h T@U) ) (! ($IsAlloc intType |x#0| Tclass._System.nat $h)
 :pattern ( ($IsAlloc intType |x#0| Tclass._System.nat $h))
)))
(assert (= (Ctor DatatypeTypeType) 3))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($ly T@U) (|r#0| T@U) ) (!  (=> (or (|_module.__default.N2S#canCall| |r#0|) (and (< 2 $FunctionContextHeight) ($Is DatatypeTypeType |r#0| (Tclass._module.CoOption Tclass._module.Number)))) ($Is DatatypeTypeType (_module.__default.N2S $ly |r#0|) (Tclass._module.Stream TInt)))
 :pattern ( (_module.__default.N2S $ly |r#0|))
))))
(assert (forall ((o@@0 T@U) (m Int) (n Int) ) (!  (=> (and (and (<= 0 m) (<= 0 n)) (<= (+ m n) (|ORD#Offset| o@@0))) (= (|ORD#Minus| (|ORD#Minus| o@@0 (|ORD#FromNat| m)) (|ORD#FromNat| n)) (|ORD#Minus| o@@0 (|ORD#FromNat| (+ m n)))))
 :pattern ( (|ORD#Minus| (|ORD#Minus| o@@0 (|ORD#FromNat| m)) (|ORD#FromNat| n)))
)))
(assert (= (DatatypeCtorId |#_module.Stream.Nil|) |##_module.Stream.Nil|))
(assert (= (DatatypeCtorId |#_module.CoOption.None|) |##_module.CoOption.None|))
(assert (forall ((_module.Stream$T T@U) ($h@@0 T@U) ) (!  (=> ($IsGoodHeap $h@@0) ($IsAlloc DatatypeTypeType |#_module.Stream.Nil| (Tclass._module.Stream _module.Stream$T) $h@@0))
 :pattern ( ($IsAlloc DatatypeTypeType |#_module.Stream.Nil| (Tclass._module.Stream _module.Stream$T) $h@@0))
)))
(assert (forall ((_module.CoOption$T T@U) ($h@@1 T@U) ) (!  (=> ($IsGoodHeap $h@@1) ($IsAlloc DatatypeTypeType |#_module.CoOption.None| (Tclass._module.CoOption _module.CoOption$T) $h@@1))
 :pattern ( ($IsAlloc DatatypeTypeType |#_module.CoOption.None| (Tclass._module.CoOption _module.CoOption$T) $h@@1))
)))
(assert (forall ((_module.Stream$T@@0 T@U) ) (! ($Is DatatypeTypeType |#_module.Stream.Nil| (Tclass._module.Stream _module.Stream$T@@0))
 :pattern ( ($Is DatatypeTypeType |#_module.Stream.Nil| (Tclass._module.Stream _module.Stream$T@@0)))
)))
(assert (forall ((_module.CoOption$T@@0 T@U) ) (! ($Is DatatypeTypeType |#_module.CoOption.None| (Tclass._module.CoOption _module.CoOption$T@@0))
 :pattern ( ($Is DatatypeTypeType |#_module.CoOption.None| (Tclass._module.CoOption _module.CoOption$T@@0)))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($ly@@0 T@U) (|num#0| T@U) ) (!  (=> (or (|_module.__default.InfinitePath_k#canCall| |num#0|) (and (< 2 $FunctionContextHeight) ($Is DatatypeTypeType |num#0| Tclass._module.Number))) (and (and (=> (_module.Number.Succ_q |num#0|) (let ((|next#1| (_module.Number._h4 |num#0|)))
(|_module.__default.InfinitePath_k#canCall| |next#1|))) (=> (not (_module.Number.Succ_q |num#0|)) (let ((|r#1| (_module.Number._h5 |num#0|)))
(|_module.__default.InfinitePath#canCall| |r#1|)))) (= (_module.__default.InfinitePath_k ($LS $ly@@0) |num#0|) (ite (_module.Number.Succ_q |num#0|) (let ((|next#0| (_module.Number._h4 |num#0|)))
(_module.__default.InfinitePath_k $ly@@0 |next#0|)) (let ((|r#0@@0| (_module.Number._h5 |num#0|)))
(_module.__default.InfinitePath $ly@@0 |r#0@@0|))))))
 :pattern ( (_module.__default.InfinitePath_k ($LS $ly@@0) |num#0|))
))))
(assert  (=> (<= 3 $FunctionContextHeight) (forall (($ly@@1 T@U) (|_k#0| T@U) (|r#0@@1| T@U) ) (!  (=> (or (|_module.__default.InfinitePath_h#canCall| |_k#0| |r#0@@1|) (and (< 3 $FunctionContextHeight) ($Is DatatypeTypeType |r#0@@1| (Tclass._module.CoOption Tclass._module.Number)))) (and (and (=> (< 0 (|ORD#Offset| |_k#0|)) (=> (not (_module.CoOption.None_q |r#0@@1|)) (let ((|num#3| ($Unbox DatatypeTypeType (_module.CoOption.get |r#0@@1|))))
(|_module.__default.InfinitePath_k_h#canCall| (|ORD#Minus| |_k#0| (|ORD#FromNat| 1)) |num#3|)))) (=> (=> (< 0 (|ORD#Offset| |_k#0|)) (ite (_module.CoOption.None_q |r#0@@1|) false (let ((|num#4| ($Unbox DatatypeTypeType (_module.CoOption.get |r#0@@1|))))
(_module.__default.InfinitePath_k_h ($LS $LZ) (|ORD#Minus| |_k#0| (|ORD#FromNat| 1)) |num#4|)))) (=> (= (LitInt 0) (|ORD#Offset| |_k#0|)) (forall ((|_k'#0| T@U) ) (!  (=> (|ORD#Less| |_k'#0| |_k#0|) (|_module.__default.InfinitePath_h#canCall| |_k'#0| |r#0@@1|))
 :pattern ( (_module.__default.InfinitePath_h $ly@@1 |_k'#0| |r#0@@1|))
))))) (= (_module.__default.InfinitePath_h ($LS $ly@@1) |_k#0| |r#0@@1|)  (and (=> (< 0 (|ORD#Offset| |_k#0|)) (ite (_module.CoOption.None_q |r#0@@1|) false (let ((|num#2| ($Unbox DatatypeTypeType (_module.CoOption.get |r#0@@1|))))
(_module.__default.InfinitePath_k_h ($LS $LZ) (|ORD#Minus| |_k#0| (|ORD#FromNat| 1)) |num#2|)))) (=> (= (LitInt 0) (|ORD#Offset| |_k#0|)) (forall ((|_k'#0@@0| T@U) ) (!  (=> (|ORD#Less| |_k'#0@@0| |_k#0|) (_module.__default.InfinitePath_h $ly@@1 |_k'#0@@0| |r#0@@1|))
 :pattern ( (_module.__default.InfinitePath_h $ly@@1 |_k'#0@@0| |r#0@@1|))
)))))))
 :pattern ( (_module.__default.InfinitePath_h ($LS $ly@@1) |_k#0| |r#0@@1|))
))))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|_module._default.IsNeverEndingStream#$S| T@U) ($ly@@2 T@U) (|_k#0@@0| T@U) (|s#0| T@U) ) (!  (=> (or (|_module.__default.IsNeverEndingStream_h#canCall| |_module._default.IsNeverEndingStream#$S| |_k#0@@0| |s#0|) (and (< 2 $FunctionContextHeight) ($Is DatatypeTypeType |s#0| (Tclass._module.Stream |_module._default.IsNeverEndingStream#$S|)))) (and (and (=> (< 0 (|ORD#Offset| |_k#0@@0|)) (=> (not (_module.Stream.Nil_q |s#0|)) (let ((|tail#3| (_module.Stream.tail |s#0|)))
(|_module.__default.IsNeverEndingStream_h#canCall| |_module._default.IsNeverEndingStream#$S| (|ORD#Minus| |_k#0@@0| (|ORD#FromNat| 1)) |tail#3|)))) (=> (=> (< 0 (|ORD#Offset| |_k#0@@0|)) (ite (_module.Stream.Nil_q |s#0|) false (let ((|tail#4| (_module.Stream.tail |s#0|)))
(_module.__default.IsNeverEndingStream_h |_module._default.IsNeverEndingStream#$S| $ly@@2 (|ORD#Minus| |_k#0@@0| (|ORD#FromNat| 1)) |tail#4|)))) (=> (= (LitInt 0) (|ORD#Offset| |_k#0@@0|)) (forall ((|_k'#0@@1| T@U) ) (!  (=> (|ORD#Less| |_k'#0@@1| |_k#0@@0|) (|_module.__default.IsNeverEndingStream_h#canCall| |_module._default.IsNeverEndingStream#$S| |_k'#0@@1| |s#0|))
 :pattern ( (_module.__default.IsNeverEndingStream_h |_module._default.IsNeverEndingStream#$S| $ly@@2 |_k'#0@@1| |s#0|))
))))) (= (_module.__default.IsNeverEndingStream_h |_module._default.IsNeverEndingStream#$S| ($LS $ly@@2) |_k#0@@0| |s#0|)  (and (=> (< 0 (|ORD#Offset| |_k#0@@0|)) (ite (_module.Stream.Nil_q |s#0|) false (let ((|tail#2| (_module.Stream.tail |s#0|)))
(_module.__default.IsNeverEndingStream_h |_module._default.IsNeverEndingStream#$S| $ly@@2 (|ORD#Minus| |_k#0@@0| (|ORD#FromNat| 1)) |tail#2|)))) (=> (= (LitInt 0) (|ORD#Offset| |_k#0@@0|)) (forall ((|_k'#0@@2| T@U) ) (!  (=> (|ORD#Less| |_k'#0@@2| |_k#0@@0|) (_module.__default.IsNeverEndingStream_h |_module._default.IsNeverEndingStream#$S| $ly@@2 |_k'#0@@2| |s#0|))
 :pattern ( (_module.__default.IsNeverEndingStream_h |_module._default.IsNeverEndingStream#$S| $ly@@2 |_k'#0@@2| |s#0|))
)))))))
 :pattern ( (_module.__default.IsNeverEndingStream_h |_module._default.IsNeverEndingStream#$S| ($LS $ly@@2) |_k#0@@0| |s#0|))
))))
(assert (forall ((_module.Stream$T@@1 T@U) (|a#5#0#0| T@U) (|a#5#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Stream.Cons| |a#5#0#0| |a#5#1#0|) (Tclass._module.Stream _module.Stream$T@@1))  (and ($IsBox |a#5#0#0| _module.Stream$T@@1) ($Is DatatypeTypeType |a#5#1#0| (Tclass._module.Stream _module.Stream$T@@1))))
 :pattern ( ($Is DatatypeTypeType (|#_module.Stream.Cons| |a#5#0#0| |a#5#1#0|) (Tclass._module.Stream _module.Stream$T@@1)))
)))
(assert (forall ((d T@U) ) (! (= (_module.Stream.Nil_q d) (= (DatatypeCtorId d) |##_module.Stream.Nil|))
 :pattern ( (_module.Stream.Nil_q d))
)))
(assert (forall ((d@@0 T@U) ) (! (= (_module.Stream.Cons_q d@@0) (= (DatatypeCtorId d@@0) |##_module.Stream.Cons|))
 :pattern ( (_module.Stream.Cons_q d@@0))
)))
(assert (forall ((d@@1 T@U) ) (! (= (_module.CoOption.None_q d@@1) (= (DatatypeCtorId d@@1) |##_module.CoOption.None|))
 :pattern ( (_module.CoOption.None_q d@@1))
)))
(assert (forall ((d@@2 T@U) ) (! (= (_module.CoOption.Some_q d@@2) (= (DatatypeCtorId d@@2) |##_module.CoOption.Some|))
 :pattern ( (_module.CoOption.Some_q d@@2))
)))
(assert (forall ((d@@3 T@U) ) (! (= (_module.Number.Succ_q d@@3) (= (DatatypeCtorId d@@3) |##_module.Number.Succ|))
 :pattern ( (_module.Number.Succ_q d@@3))
)))
(assert (forall ((d@@4 T@U) ) (! (= (_module.Number.Zero_q d@@4) (= (DatatypeCtorId d@@4) |##_module.Number.Zero|))
 :pattern ( (_module.Number.Zero_q d@@4))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert  (=> (<= 3 $FunctionContextHeight) (forall (($ly@@3 T@U) (|num#0@@0| T@U) (|_k#0@@1| T@U) ) (!  (=> (and ($Is DatatypeTypeType |num#0@@0| Tclass._module.Number) (= |_k#0@@1| (|ORD#FromNat| 0))) (_module.__default.InfinitePath_k_h $ly@@3 |_k#0@@1| |num#0@@0|))
 :pattern ( (_module.__default.InfinitePath_k_h $ly@@3 |_k#0@@1| |num#0@@0|))
))))
(assert  (=> (<= 3 $FunctionContextHeight) (forall (($ly@@4 T@U) (|num#0@@1| T@U) ) (!  (=> (and ($Is DatatypeTypeType |num#0@@1| Tclass._module.Number) (forall ((|_k#0@@2| T@U) ) (! (_module.__default.InfinitePath_k_h ($LS $ly@@4) |_k#0@@2| |num#0@@1|)
 :pattern ( (_module.__default.InfinitePath_k_h ($LS $ly@@4) |_k#0@@2| |num#0@@1|))
))) (_module.__default.InfinitePath_k ($LS $ly@@4) |num#0@@1|))
 :pattern ( (_module.__default.InfinitePath_k ($LS $ly@@4) |num#0@@1|))
))))
(assert (forall ((d@@5 T@U) ) (!  (=> (_module.Stream.Cons_q d@@5) (exists ((|a#4#0#0| T@U) (|a#4#1#0| T@U) ) (= d@@5 (|#_module.Stream.Cons| |a#4#0#0| |a#4#1#0|))))
 :pattern ( (_module.Stream.Cons_q d@@5))
)))
(assert (forall ((d@@6 T@U) ) (!  (=> (_module.Stream.Nil_q d@@6) (= d@@6 |#_module.Stream.Nil|))
 :pattern ( (_module.Stream.Nil_q d@@6))
)))
(assert (forall ((d@@7 T@U) ) (!  (=> (_module.CoOption.None_q d@@7) (= d@@7 |#_module.CoOption.None|))
 :pattern ( (_module.CoOption.None_q d@@7))
)))
(assert  (=> (<= 3 $FunctionContextHeight) (forall (($ly@@5 T@U) (|r#0@@2| T@U) (|_k#0@@3| T@U) ) (!  (=> (and ($Is DatatypeTypeType |r#0@@2| (Tclass._module.CoOption Tclass._module.Number)) (= |_k#0@@3| (|ORD#FromNat| 0))) (_module.__default.InfinitePath_h $ly@@5 |_k#0@@3| |r#0@@2|))
 :pattern ( (_module.__default.InfinitePath_h $ly@@5 |_k#0@@3| |r#0@@2|))
))))
(assert  (=> (<= 3 $FunctionContextHeight) (forall (($ly@@6 T@U) (|r#0@@3| T@U) ) (!  (=> (and ($Is DatatypeTypeType |r#0@@3| (Tclass._module.CoOption Tclass._module.Number)) (forall ((|_k#0@@4| T@U) ) (! (_module.__default.InfinitePath_h ($LS $ly@@6) |_k#0@@4| |r#0@@3|)
 :pattern ( (_module.__default.InfinitePath_h ($LS $ly@@6) |_k#0@@4| |r#0@@3|))
))) (_module.__default.InfinitePath ($LS $ly@@6) |r#0@@3|))
 :pattern ( (_module.__default.InfinitePath ($LS $ly@@6) |r#0@@3|))
))))
(assert (forall ((d@@8 T@U) ) (!  (=> (_module.CoOption.Some_q d@@8) (exists ((|a#18#0#0| T@U) ) (= d@@8 (|#_module.CoOption.Some| |a#18#0#0|))))
 :pattern ( (_module.CoOption.Some_q d@@8))
)))
(assert (forall ((d@@9 T@U) ) (!  (=> (_module.Number.Succ_q d@@9) (exists ((|a#22#0#0| T@U) ) (= d@@9 (|#_module.Number.Succ| |a#22#0#0|))))
 :pattern ( (_module.Number.Succ_q d@@9))
)))
(assert (forall ((d@@10 T@U) ) (!  (=> (_module.Number.Zero_q d@@10) (exists ((|a#28#0#0| T@U) ) (= d@@10 (|#_module.Number.Zero| |a#28#0#0|))))
 :pattern ( (_module.Number.Zero_q d@@10))
)))
(assert (forall ((|x#0@@0| T@U) ) (! (= ($Is intType |x#0@@0| Tclass._System.nat) (<= (LitInt 0) (U_2_int |x#0@@0|)))
 :pattern ( ($Is intType |x#0@@0| Tclass._System.nat))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($ly@@7 T@U) (|r#0@@4| T@U) ) (!  (=> (or (|_module.__default.InfinitePath#canCall| |r#0@@4|) (and (< 2 $FunctionContextHeight) ($Is DatatypeTypeType |r#0@@4| (Tclass._module.CoOption Tclass._module.Number)))) (and (=> (not (_module.CoOption.None_q |r#0@@4|)) (let ((|num#1| ($Unbox DatatypeTypeType (_module.CoOption.get |r#0@@4|))))
(|_module.__default.InfinitePath_k#canCall| |num#1|))) (= (_module.__default.InfinitePath ($LS $ly@@7) |r#0@@4|) (ite (_module.CoOption.None_q |r#0@@4|) false (let ((|num#0@@2| ($Unbox DatatypeTypeType (_module.CoOption.get |r#0@@4|))))
(_module.__default.InfinitePath_k $ly@@7 |num#0@@2|))))))
 :pattern ( (_module.__default.InfinitePath ($LS $ly@@7) |r#0@@4|))
))))
(assert (= (Ctor BoxType) 4))
(assert  (=> (<= 3 $FunctionContextHeight) (forall (($ly@@8 T@U) (|_k#0@@5| T@U) (|num#0@@3| T@U) ) (!  (=> (or (|_module.__default.InfinitePath_k_h#canCall| (Lit BoxType |_k#0@@5|) (Lit DatatypeTypeType |num#0@@3|)) (and (< 3 $FunctionContextHeight) ($Is DatatypeTypeType |num#0@@3| Tclass._module.Number))) (and (and (=> (< 0 (|ORD#Offset| |_k#0@@5|)) (and (=> (U_2_bool (Lit boolType (bool_2_U (_module.Number.Succ_q (Lit DatatypeTypeType |num#0@@3|))))) (let ((|next#9| (Lit DatatypeTypeType (_module.Number._h4 (Lit DatatypeTypeType |num#0@@3|)))))
(|_module.__default.InfinitePath_k_h#canCall| (|ORD#Minus| |_k#0@@5| (|ORD#FromNat| 1)) |next#9|))) (=> (not (U_2_bool (Lit boolType (bool_2_U (_module.Number.Succ_q (Lit DatatypeTypeType |num#0@@3|)))))) (let ((|r#9| (Lit DatatypeTypeType (_module.Number._h5 (Lit DatatypeTypeType |num#0@@3|)))))
(|_module.__default.InfinitePath_h#canCall| (|ORD#Minus| |_k#0@@5| (|ORD#FromNat| 1)) |r#9|))))) (=> (=> (< 0 (|ORD#Offset| |_k#0@@5|)) (ite (_module.Number.Succ_q (Lit DatatypeTypeType |num#0@@3|)) (let ((|next#10| (Lit DatatypeTypeType (_module.Number._h4 (Lit DatatypeTypeType |num#0@@3|)))))
(_module.__default.InfinitePath_k_h ($LS $ly@@8) (|ORD#Minus| |_k#0@@5| (|ORD#FromNat| 1)) |next#10|)) (let ((|r#10| (Lit DatatypeTypeType (_module.Number._h5 (Lit DatatypeTypeType |num#0@@3|)))))
(_module.__default.InfinitePath_h ($LS $LZ) (|ORD#Minus| |_k#0@@5| (|ORD#FromNat| 1)) |r#10|)))) (=> (= (LitInt 0) (|ORD#Offset| |_k#0@@5|)) (forall ((|_k'#2| T@U) ) (!  (=> (|ORD#Less| |_k'#2| |_k#0@@5|) (|_module.__default.InfinitePath_k_h#canCall| |_k'#2| |num#0@@3|))
 :pattern ( (_module.__default.InfinitePath_k_h ($LS $ly@@8) |_k'#2| |num#0@@3|))
))))) (= (_module.__default.InfinitePath_k_h ($LS $ly@@8) (Lit BoxType |_k#0@@5|) (Lit DatatypeTypeType |num#0@@3|))  (and (=> (< 0 (|ORD#Offset| |_k#0@@5|)) (ite (_module.Number.Succ_q (Lit DatatypeTypeType |num#0@@3|)) (let ((|next#8| (Lit DatatypeTypeType (_module.Number._h4 (Lit DatatypeTypeType |num#0@@3|)))))
(_module.__default.InfinitePath_k_h ($LS $ly@@8) (|ORD#Minus| |_k#0@@5| (|ORD#FromNat| 1)) |next#8|)) (let ((|r#8| (Lit DatatypeTypeType (_module.Number._h5 (Lit DatatypeTypeType |num#0@@3|)))))
(_module.__default.InfinitePath_h ($LS $LZ) (|ORD#Minus| |_k#0@@5| (|ORD#FromNat| 1)) |r#8|)))) (=> (= (LitInt 0) (|ORD#Offset| |_k#0@@5|)) (forall ((|_k'#2@@0| T@U) ) (!  (=> (|ORD#Less| |_k'#2@@0| |_k#0@@5|) (_module.__default.InfinitePath_k_h ($LS $ly@@8) |_k'#2@@0| |num#0@@3|))
 :pattern ( (_module.__default.InfinitePath_k_h ($LS $ly@@8) |_k'#2@@0| |num#0@@3|))
)))))))
 :weight 3
 :pattern ( (_module.__default.InfinitePath_k_h ($LS $ly@@8) (Lit BoxType |_k#0@@5|) (Lit DatatypeTypeType |num#0@@3|)))
))))
(assert (forall (($ly@@9 T@U) (|_k#0@@6| T@U) (|r#0@@5| T@U) ) (! (= (_module.__default.InfinitePath_h ($LS $ly@@9) |_k#0@@6| |r#0@@5|) (_module.__default.InfinitePath_h $ly@@9 |_k#0@@6| |r#0@@5|))
 :pattern ( (_module.__default.InfinitePath_h ($LS $ly@@9) |_k#0@@6| |r#0@@5|))
)))
(assert (forall (($ly@@10 T@U) (|_k#0@@7| T@U) (|num#0@@4| T@U) ) (! (= (_module.__default.InfinitePath_k_h ($LS $ly@@10) |_k#0@@7| |num#0@@4|) (_module.__default.InfinitePath_k_h $ly@@10 |_k#0@@7| |num#0@@4|))
 :pattern ( (_module.__default.InfinitePath_k_h ($LS $ly@@10) |_k#0@@7| |num#0@@4|))
)))
(assert (forall ((v T@U) (t T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v) t h) ($IsAlloc T@@1 v t h))
 :pattern ( ($IsAllocBox ($Box T@@1 v) t h))
)))
(assert  (=> (<= 3 $FunctionContextHeight) (forall (($ly@@11 T@U) (|num#0@@5| T@U) ) (!  (=> (and ($Is DatatypeTypeType |num#0@@5| Tclass._module.Number) (_module.__default.InfinitePath_k ($LS $ly@@11) |num#0@@5|)) (forall ((|_k#0@@8| T@U) ) (! (_module.__default.InfinitePath_k_h ($LS $ly@@11) |_k#0@@8| |num#0@@5|)
 :pattern ( (_module.__default.InfinitePath_k_h ($LS $ly@@11) |_k#0@@8| |num#0@@5|))
)))
 :pattern ( (_module.__default.InfinitePath_k ($LS $ly@@11) |num#0@@5|))
))))
(assert (forall ((_module.Stream$T@@2 T@U) ) (!  (and (= (Tag (Tclass._module.Stream _module.Stream$T@@2)) Tagclass._module.Stream) (= (TagFamily (Tclass._module.Stream _module.Stream$T@@2)) tytagFamily$Stream))
 :pattern ( (Tclass._module.Stream _module.Stream$T@@2))
)))
(assert (forall ((_module.CoOption$T@@1 T@U) ) (!  (and (= (Tag (Tclass._module.CoOption _module.CoOption$T@@1)) Tagclass._module.CoOption) (= (TagFamily (Tclass._module.CoOption _module.CoOption$T@@1)) tytagFamily$CoOption))
 :pattern ( (Tclass._module.CoOption _module.CoOption$T@@1))
)))
(assert (forall ((o@@1 T@U) (p@@0 T@U) ) (!  (=> (and (|ORD#IsNat| p@@0) (<= (|ORD#Offset| p@@0) (|ORD#Offset| o@@1))) (and (= (|ORD#IsNat| (|ORD#Minus| o@@1 p@@0)) (|ORD#IsNat| o@@1)) (= (|ORD#Offset| (|ORD#Minus| o@@1 p@@0)) (- (|ORD#Offset| o@@1) (|ORD#Offset| p@@0)))))
 :pattern ( (|ORD#Minus| o@@1 p@@0))
)))
(assert (forall ((n@@0 Int) ) (!  (=> (<= 0 n@@0) (and (|ORD#IsNat| (|ORD#FromNat| n@@0)) (= (|ORD#Offset| (|ORD#FromNat| n@@0)) n@@0)))
 :pattern ( (|ORD#FromNat| n@@0))
)))
(assert  (=> (<= 3 $FunctionContextHeight) (forall (($ly@@12 T@U) (|r#0@@6| T@U) ) (!  (=> (and ($Is DatatypeTypeType |r#0@@6| (Tclass._module.CoOption Tclass._module.Number)) (_module.__default.InfinitePath ($LS $ly@@12) |r#0@@6|)) (forall ((|_k#0@@9| T@U) ) (! (_module.__default.InfinitePath_h ($LS $ly@@12) |_k#0@@9| |r#0@@6|)
 :pattern ( (_module.__default.InfinitePath_h ($LS $ly@@12) |_k#0@@9| |r#0@@6|))
)))
 :pattern ( (_module.__default.InfinitePath ($LS $ly@@12) |r#0@@6|))
))))
(assert (forall ((bx T@U) ) (!  (=> ($IsBox bx Tclass._System.nat) (and (= ($Box intType ($Unbox intType bx)) bx) ($Is intType ($Unbox intType bx) Tclass._System.nat)))
 :pattern ( ($IsBox bx Tclass._System.nat))
)))
(assert (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 Tclass._module.Number) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@0)) bx@@0) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@0) Tclass._module.Number)))
 :pattern ( ($IsBox bx@@0 Tclass._module.Number))
)))
(assert (forall ((|a#23#0#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Number.Succ| |a#23#0#0|) Tclass._module.Number) ($Is DatatypeTypeType |a#23#0#0| Tclass._module.Number))
 :pattern ( ($Is DatatypeTypeType (|#_module.Number.Succ| |a#23#0#0|) Tclass._module.Number))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($ly@@13 T@U) (|n#0| Int) (|num#0@@6| T@U) ) (!  (=> (or (|_module.__default.N2S_k#canCall| |n#0| |num#0@@6|) (and (< 2 $FunctionContextHeight) (and (<= (LitInt 0) |n#0|) ($Is DatatypeTypeType |num#0@@6| Tclass._module.Number)))) ($Is DatatypeTypeType (_module.__default.N2S_k $ly@@13 |n#0| |num#0@@6|) (Tclass._module.Stream TInt)))
 :pattern ( (_module.__default.N2S_k $ly@@13 |n#0| |num#0@@6|))
))))
(assert (forall (($ly@@14 T@U) (|n#0@@0| Int) (|num#0@@7| T@U) ) (! (= (_module.__default.N2S_k ($LS $ly@@14) |n#0@@0| |num#0@@7|) (_module.__default.N2S_k $ly@@14 |n#0@@0| |num#0@@7|))
 :pattern ( (_module.__default.N2S_k ($LS $ly@@14) |n#0@@0| |num#0@@7|))
)))
(assert (forall ((_module.CoOption$T@@2 T@U) (|a#19#0#0| T@U) ($h@@2 T@U) ) (!  (=> ($IsGoodHeap $h@@2) (= ($IsAlloc DatatypeTypeType (|#_module.CoOption.Some| |a#19#0#0|) (Tclass._module.CoOption _module.CoOption$T@@2) $h@@2) ($IsAllocBox |a#19#0#0| _module.CoOption$T@@2 $h@@2)))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_module.CoOption.Some| |a#19#0#0|) (Tclass._module.CoOption _module.CoOption$T@@2) $h@@2))
)))
(assert (forall ((d@@11 T@U) ) (!  (=> (|$IsA#_module.Number| d@@11) (or (_module.Number.Succ_q d@@11) (_module.Number.Zero_q d@@11)))
 :pattern ( (|$IsA#_module.Number| d@@11))
)))
(assert (forall ((o@@2 T@U) (p@@1 T@U) ) (!  (or (or (|ORD#Less| o@@2 p@@1) (= o@@2 p@@1)) (|ORD#Less| p@@1 o@@2))
 :pattern ( (|ORD#Less| o@@2 p@@1) (|ORD#Less| p@@1 o@@2))
)))
(assert (forall ((|a#29#0#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Number.Zero| |a#29#0#0|) Tclass._module.Number) ($Is DatatypeTypeType |a#29#0#0| (Tclass._module.CoOption Tclass._module.Number)))
 :pattern ( ($Is DatatypeTypeType (|#_module.Number.Zero| |a#29#0#0|) Tclass._module.Number))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($ly@@15 T@U) (|n#0@@1| Int) (|num#0@@8| T@U) ) (!  (=> (or (|_module.__default.N2S_k#canCall| |n#0@@1| |num#0@@8|) (and (< 2 $FunctionContextHeight) (and (<= (LitInt 0) |n#0@@1|) ($Is DatatypeTypeType |num#0@@8| Tclass._module.Number)))) (and (and (=> (_module.Number.Succ_q |num#0@@8|) (let ((|next#1@@0| (_module.Number._h4 |num#0@@8|)))
(|_module.__default.N2S_k#canCall| (+ |n#0@@1| 1) |next#1@@0|))) (=> (not (_module.Number.Succ_q |num#0@@8|)) (let ((|r#1@@0| (_module.Number._h5 |num#0@@8|)))
(|_module.__default.N2S#canCall| |r#1@@0|)))) (= (_module.__default.N2S_k ($LS $ly@@15) |n#0@@1| |num#0@@8|) (ite (_module.Number.Succ_q |num#0@@8|) (let ((|next#0@@0| (_module.Number._h4 |num#0@@8|)))
(_module.__default.N2S_k $ly@@15 (+ |n#0@@1| 1) |next#0@@0|)) (let ((|r#0@@7| (_module.Number._h5 |num#0@@8|)))
(|#_module.Stream.Cons| ($Box intType (int_2_U |n#0@@1|)) (_module.__default.N2S $ly@@15 |r#0@@7|)))))))
 :pattern ( (_module.__default.N2S_k ($LS $ly@@15) |n#0@@1| |num#0@@8|))
))))
(assert (forall ((_module.Stream$T@@3 T@U) (d@@12 T@U) ) (!  (=> ($Is DatatypeTypeType d@@12 (Tclass._module.Stream _module.Stream$T@@3)) (or (_module.Stream.Nil_q d@@12) (_module.Stream.Cons_q d@@12)))
 :pattern ( (_module.Stream.Cons_q d@@12) ($Is DatatypeTypeType d@@12 (Tclass._module.Stream _module.Stream$T@@3)))
 :pattern ( (_module.Stream.Nil_q d@@12) ($Is DatatypeTypeType d@@12 (Tclass._module.Stream _module.Stream$T@@3)))
)))
(assert (forall ((_module.CoOption$T@@3 T@U) (d@@13 T@U) ) (!  (=> ($Is DatatypeTypeType d@@13 (Tclass._module.CoOption _module.CoOption$T@@3)) (or (_module.CoOption.None_q d@@13) (_module.CoOption.Some_q d@@13)))
 :pattern ( (_module.CoOption.Some_q d@@13) ($Is DatatypeTypeType d@@13 (Tclass._module.CoOption _module.CoOption$T@@3)))
 :pattern ( (_module.CoOption.None_q d@@13) ($Is DatatypeTypeType d@@13 (Tclass._module.CoOption _module.CoOption$T@@3)))
)))
(assert (forall ((d@@14 T@U) ) (!  (=> ($Is DatatypeTypeType d@@14 Tclass._module.Number) (or (_module.Number.Succ_q d@@14) (_module.Number.Zero_q d@@14)))
 :pattern ( (_module.Number.Zero_q d@@14) ($Is DatatypeTypeType d@@14 Tclass._module.Number))
 :pattern ( (_module.Number.Succ_q d@@14) ($Is DatatypeTypeType d@@14 Tclass._module.Number))
)))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 TInt) (and (= ($Box intType ($Unbox intType bx@@1)) bx@@1) ($Is intType ($Unbox intType bx@@1) TInt)))
 :pattern ( ($IsBox bx@@1 TInt))
)))
(assert (forall (($ly@@16 T@U) (|r#0@@8| T@U) ) (! (= (_module.__default.InfinitePath ($LS $ly@@16) |r#0@@8|) (_module.__default.InfinitePath $ly@@16 |r#0@@8|))
 :pattern ( (_module.__default.InfinitePath ($LS $ly@@16) |r#0@@8|))
)))
(assert (forall (($ly@@17 T@U) (|num#0@@9| T@U) ) (! (= (_module.__default.InfinitePath_k ($LS $ly@@17) |num#0@@9|) (_module.__default.InfinitePath_k $ly@@17 |num#0@@9|))
 :pattern ( (_module.__default.InfinitePath_k ($LS $ly@@17) |num#0@@9|))
)))
(assert (forall ((v@@0 T@U) (t@@0 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@0) t@@0) ($Is T@@2 v@@0 t@@0))
 :pattern ( ($IsBox ($Box T@@2 v@@0) t@@0))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|_module._default.IsNeverEndingStream#$S@@0| T@U) ($ly@@18 T@U) (|s#0@@0| T@U) (|_k#0@@10| T@U) ) (!  (=> (and ($Is DatatypeTypeType |s#0@@0| (Tclass._module.Stream |_module._default.IsNeverEndingStream#$S@@0|)) (= |_k#0@@10| (|ORD#FromNat| 0))) (_module.__default.IsNeverEndingStream_h |_module._default.IsNeverEndingStream#$S@@0| $ly@@18 |_k#0@@10| |s#0@@0|))
 :pattern ( (_module.__default.IsNeverEndingStream_h |_module._default.IsNeverEndingStream#$S@@0| $ly@@18 |_k#0@@10| |s#0@@0|))
))))
(assert (forall ((o@@3 T@U) ) (! (<= 0 (|ORD#Offset| o@@3))
 :pattern ( (|ORD#Offset| o@@3))
)))
(assert (forall ((|a#3#0#0| T@U) (|a#3#1#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Stream.Cons| |a#3#0#0| |a#3#1#0|)) |##_module.Stream.Cons|)
 :pattern ( (|#_module.Stream.Cons| |a#3#0#0| |a#3#1#0|))
)))
(assert (forall ((|a#6#0#0| T@U) (|a#6#1#0| T@U) ) (! (= (_module.Stream.head (|#_module.Stream.Cons| |a#6#0#0| |a#6#1#0|)) |a#6#0#0|)
 :pattern ( (|#_module.Stream.Cons| |a#6#0#0| |a#6#1#0|))
)))
(assert (forall ((|a#7#0#0| T@U) (|a#7#1#0| T@U) ) (! (= (_module.Stream.tail (|#_module.Stream.Cons| |a#7#0#0| |a#7#1#0|)) |a#7#1#0|)
 :pattern ( (|#_module.Stream.Cons| |a#7#0#0| |a#7#1#0|))
)))
(assert (forall ((_module.Stream$T@@4 T@U) ) (! (= (Tclass._module.Stream_0 (Tclass._module.Stream _module.Stream$T@@4)) _module.Stream$T@@4)
 :pattern ( (Tclass._module.Stream _module.Stream$T@@4))
)))
(assert (forall ((_module.CoOption$T@@4 T@U) ) (! (= (Tclass._module.CoOption_0 (Tclass._module.CoOption _module.CoOption$T@@4)) _module.CoOption$T@@4)
 :pattern ( (Tclass._module.CoOption _module.CoOption$T@@4))
)))
(assert (forall ((|a#17#0#0| T@U) ) (! (= (DatatypeCtorId (|#_module.CoOption.Some| |a#17#0#0|)) |##_module.CoOption.Some|)
 :pattern ( (|#_module.CoOption.Some| |a#17#0#0|))
)))
(assert (forall ((|a#20#0#0| T@U) ) (! (= (_module.CoOption.get (|#_module.CoOption.Some| |a#20#0#0|)) |a#20#0#0|)
 :pattern ( (|#_module.CoOption.Some| |a#20#0#0|))
)))
(assert (forall ((|a#21#0#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Number.Succ| |a#21#0#0|)) |##_module.Number.Succ|)
 :pattern ( (|#_module.Number.Succ| |a#21#0#0|))
)))
(assert (forall ((|a#25#0#0| T@U) ) (! (= (_module.Number._h4 (|#_module.Number.Succ| |a#25#0#0|)) |a#25#0#0|)
 :pattern ( (|#_module.Number.Succ| |a#25#0#0|))
)))
(assert (forall ((|a#27#0#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Number.Zero| |a#27#0#0|)) |##_module.Number.Zero|)
 :pattern ( (|#_module.Number.Zero| |a#27#0#0|))
)))
(assert (forall ((|a#31#0#0| T@U) ) (! (= (_module.Number._h5 (|#_module.Number.Zero| |a#31#0#0|)) |a#31#0#0|)
 :pattern ( (|#_module.Number.Zero| |a#31#0#0|))
)))
(assert (forall ((x@@5 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@5)) x@@5)
 :pattern ( ($Box T@@3 x@@5))
)))
(assert (forall ((o@@4 T@U) (p@@2 T@U) ) (!  (and (and (and (=> (|ORD#Less| o@@4 p@@2) (or (not (= o@@4 p@@2)) (not true))) (=> (and (|ORD#IsNat| o@@4) (not (|ORD#IsNat| p@@2))) (|ORD#Less| o@@4 p@@2))) (=> (and (|ORD#IsNat| o@@4) (|ORD#IsNat| p@@2)) (= (|ORD#Less| o@@4 p@@2) (< (|ORD#Offset| o@@4) (|ORD#Offset| p@@2))))) (=> (and (|ORD#Less| o@@4 p@@2) (|ORD#IsNat| p@@2)) (|ORD#IsNat| o@@4)))
 :pattern ( (|ORD#Less| o@@4 p@@2))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|_module._default.IsNeverEndingStream#$S@@1| T@U) ($ly@@19 T@U) (|_k#0@@11| T@U) (|s#0@@1| T@U) ) (!  (=> (or (|_module.__default.IsNeverEndingStream_h#canCall| |_module._default.IsNeverEndingStream#$S@@1| (Lit BoxType |_k#0@@11|) |s#0@@1|) (and (< 2 $FunctionContextHeight) ($Is DatatypeTypeType |s#0@@1| (Tclass._module.Stream |_module._default.IsNeverEndingStream#$S@@1|)))) (and (and (=> (< 0 (|ORD#Offset| |_k#0@@11|)) (=> (not (_module.Stream.Nil_q |s#0@@1|)) (let ((|tail#6| (_module.Stream.tail |s#0@@1|)))
(|_module.__default.IsNeverEndingStream_h#canCall| |_module._default.IsNeverEndingStream#$S@@1| (|ORD#Minus| |_k#0@@11| (|ORD#FromNat| 1)) |tail#6|)))) (=> (=> (< 0 (|ORD#Offset| |_k#0@@11|)) (ite (_module.Stream.Nil_q |s#0@@1|) false (let ((|tail#7| (_module.Stream.tail |s#0@@1|)))
(_module.__default.IsNeverEndingStream_h |_module._default.IsNeverEndingStream#$S@@1| ($LS $ly@@19) (|ORD#Minus| |_k#0@@11| (|ORD#FromNat| 1)) |tail#7|)))) (=> (= (LitInt 0) (|ORD#Offset| |_k#0@@11|)) (forall ((|_k'#1| T@U) ) (!  (=> (|ORD#Less| |_k'#1| |_k#0@@11|) (|_module.__default.IsNeverEndingStream_h#canCall| |_module._default.IsNeverEndingStream#$S@@1| |_k'#1| |s#0@@1|))
 :pattern ( (_module.__default.IsNeverEndingStream_h |_module._default.IsNeverEndingStream#$S@@1| ($LS $ly@@19) |_k'#1| |s#0@@1|))
))))) (= (_module.__default.IsNeverEndingStream_h |_module._default.IsNeverEndingStream#$S@@1| ($LS $ly@@19) (Lit BoxType |_k#0@@11|) |s#0@@1|)  (and (=> (< 0 (|ORD#Offset| |_k#0@@11|)) (ite (_module.Stream.Nil_q |s#0@@1|) false (let ((|tail#5| (_module.Stream.tail |s#0@@1|)))
(_module.__default.IsNeverEndingStream_h |_module._default.IsNeverEndingStream#$S@@1| ($LS $ly@@19) (|ORD#Minus| |_k#0@@11| (|ORD#FromNat| 1)) |tail#5|)))) (=> (= (LitInt 0) (|ORD#Offset| |_k#0@@11|)) (forall ((|_k'#1@@0| T@U) ) (!  (=> (|ORD#Less| |_k'#1@@0| |_k#0@@11|) (_module.__default.IsNeverEndingStream_h |_module._default.IsNeverEndingStream#$S@@1| ($LS $ly@@19) |_k'#1@@0| |s#0@@1|))
 :pattern ( (_module.__default.IsNeverEndingStream_h |_module._default.IsNeverEndingStream#$S@@1| ($LS $ly@@19) |_k'#1@@0| |s#0@@1|))
)))))))
 :weight 3
 :pattern ( (_module.__default.IsNeverEndingStream_h |_module._default.IsNeverEndingStream#$S@@1| ($LS $ly@@19) (Lit BoxType |_k#0@@11|) |s#0@@1|))
))))
(assert (forall ((_module.CoOption$T@@5 T@U) (|a#19#0#0@@0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.CoOption.Some| |a#19#0#0@@0|) (Tclass._module.CoOption _module.CoOption$T@@5)) ($IsBox |a#19#0#0@@0| _module.CoOption$T@@5))
 :pattern ( ($Is DatatypeTypeType (|#_module.CoOption.Some| |a#19#0#0@@0|) (Tclass._module.CoOption _module.CoOption$T@@5)))
)))
(assert  (=> (<= 3 $FunctionContextHeight) (forall (($ly@@20 T@U) (|_k#0@@12| T@U) (|num#0@@10| T@U) ) (!  (=> (or (|_module.__default.InfinitePath_k_h#canCall| (Lit BoxType |_k#0@@12|) |num#0@@10|) (and (< 3 $FunctionContextHeight) ($Is DatatypeTypeType |num#0@@10| Tclass._module.Number))) (and (and (=> (< 0 (|ORD#Offset| |_k#0@@12|)) (and (=> (_module.Number.Succ_q |num#0@@10|) (let ((|next#6| (_module.Number._h4 |num#0@@10|)))
(|_module.__default.InfinitePath_k_h#canCall| (|ORD#Minus| |_k#0@@12| (|ORD#FromNat| 1)) |next#6|))) (=> (not (_module.Number.Succ_q |num#0@@10|)) (let ((|r#6| (_module.Number._h5 |num#0@@10|)))
(|_module.__default.InfinitePath_h#canCall| (|ORD#Minus| |_k#0@@12| (|ORD#FromNat| 1)) |r#6|))))) (=> (=> (< 0 (|ORD#Offset| |_k#0@@12|)) (ite (_module.Number.Succ_q |num#0@@10|) (let ((|next#7| (_module.Number._h4 |num#0@@10|)))
(_module.__default.InfinitePath_k_h ($LS $ly@@20) (|ORD#Minus| |_k#0@@12| (|ORD#FromNat| 1)) |next#7|)) (let ((|r#7| (_module.Number._h5 |num#0@@10|)))
(_module.__default.InfinitePath_h ($LS $LZ) (|ORD#Minus| |_k#0@@12| (|ORD#FromNat| 1)) |r#7|)))) (=> (= (LitInt 0) (|ORD#Offset| |_k#0@@12|)) (forall ((|_k'#1@@1| T@U) ) (!  (=> (|ORD#Less| |_k'#1@@1| |_k#0@@12|) (|_module.__default.InfinitePath_k_h#canCall| |_k'#1@@1| |num#0@@10|))
 :pattern ( (_module.__default.InfinitePath_k_h ($LS $ly@@20) |_k'#1@@1| |num#0@@10|))
))))) (= (_module.__default.InfinitePath_k_h ($LS $ly@@20) (Lit BoxType |_k#0@@12|) |num#0@@10|)  (and (=> (< 0 (|ORD#Offset| |_k#0@@12|)) (ite (_module.Number.Succ_q |num#0@@10|) (let ((|next#5| (_module.Number._h4 |num#0@@10|)))
(_module.__default.InfinitePath_k_h ($LS $ly@@20) (|ORD#Minus| |_k#0@@12| (|ORD#FromNat| 1)) |next#5|)) (let ((|r#5| (_module.Number._h5 |num#0@@10|)))
(_module.__default.InfinitePath_h ($LS $LZ) (|ORD#Minus| |_k#0@@12| (|ORD#FromNat| 1)) |r#5|)))) (=> (= (LitInt 0) (|ORD#Offset| |_k#0@@12|)) (forall ((|_k'#1@@2| T@U) ) (!  (=> (|ORD#Less| |_k'#1@@2| |_k#0@@12|) (_module.__default.InfinitePath_k_h ($LS $ly@@20) |_k'#1@@2| |num#0@@10|))
 :pattern ( (_module.__default.InfinitePath_k_h ($LS $ly@@20) |_k'#1@@2| |num#0@@10|))
)))))))
 :weight 3
 :pattern ( (_module.__default.InfinitePath_k_h ($LS $ly@@20) (Lit BoxType |_k#0@@12|) |num#0@@10|))
))))
(assert (forall ((|_module._default.IsNeverEndingStream#$S@@2| T@U) ($ly@@21 T@U) (|_k#0@@13| T@U) (|s#0@@2| T@U) ) (! (= (_module.__default.IsNeverEndingStream_h |_module._default.IsNeverEndingStream#$S@@2| ($LS $ly@@21) |_k#0@@13| |s#0@@2|) (_module.__default.IsNeverEndingStream_h |_module._default.IsNeverEndingStream#$S@@2| $ly@@21 |_k#0@@13| |s#0@@2|))
 :pattern ( (_module.__default.IsNeverEndingStream_h |_module._default.IsNeverEndingStream#$S@@2| ($LS $ly@@21) |_k#0@@13| |s#0@@2|))
)))
(assert (forall (($ly@@22 T@U) (|r#0@@9| T@U) ) (! (= (_module.__default.N2S ($LS $ly@@22) |r#0@@9|) (_module.__default.N2S $ly@@22 |r#0@@9|))
 :pattern ( (_module.__default.N2S ($LS $ly@@22) |r#0@@9|))
)))
(assert  (=> (<= 3 $FunctionContextHeight) (forall (($ly@@23 T@U) (|_k#0@@14| T@U) (|r#0@@10| T@U) ) (!  (=> (or (|_module.__default.InfinitePath_h#canCall| (Lit BoxType |_k#0@@14|) |r#0@@10|) (and (< 3 $FunctionContextHeight) ($Is DatatypeTypeType |r#0@@10| (Tclass._module.CoOption Tclass._module.Number)))) (and (and (=> (< 0 (|ORD#Offset| |_k#0@@14|)) (=> (not (_module.CoOption.None_q |r#0@@10|)) (let ((|num#6| ($Unbox DatatypeTypeType (_module.CoOption.get |r#0@@10|))))
(|_module.__default.InfinitePath_k_h#canCall| (|ORD#Minus| |_k#0@@14| (|ORD#FromNat| 1)) |num#6|)))) (=> (=> (< 0 (|ORD#Offset| |_k#0@@14|)) (ite (_module.CoOption.None_q |r#0@@10|) false (let ((|num#7| ($Unbox DatatypeTypeType (_module.CoOption.get |r#0@@10|))))
(_module.__default.InfinitePath_k_h ($LS $LZ) (|ORD#Minus| |_k#0@@14| (|ORD#FromNat| 1)) |num#7|)))) (=> (= (LitInt 0) (|ORD#Offset| |_k#0@@14|)) (forall ((|_k'#1@@3| T@U) ) (!  (=> (|ORD#Less| |_k'#1@@3| |_k#0@@14|) (|_module.__default.InfinitePath_h#canCall| |_k'#1@@3| |r#0@@10|))
 :pattern ( (_module.__default.InfinitePath_h ($LS $ly@@23) |_k'#1@@3| |r#0@@10|))
))))) (= (_module.__default.InfinitePath_h ($LS $ly@@23) (Lit BoxType |_k#0@@14|) |r#0@@10|)  (and (=> (< 0 (|ORD#Offset| |_k#0@@14|)) (ite (_module.CoOption.None_q |r#0@@10|) false (let ((|num#5| ($Unbox DatatypeTypeType (_module.CoOption.get |r#0@@10|))))
(_module.__default.InfinitePath_k_h ($LS $LZ) (|ORD#Minus| |_k#0@@14| (|ORD#FromNat| 1)) |num#5|)))) (=> (= (LitInt 0) (|ORD#Offset| |_k#0@@14|)) (forall ((|_k'#1@@4| T@U) ) (!  (=> (|ORD#Less| |_k'#1@@4| |_k#0@@14|) (_module.__default.InfinitePath_h ($LS $ly@@23) |_k'#1@@4| |r#0@@10|))
 :pattern ( (_module.__default.InfinitePath_h ($LS $ly@@23) |_k'#1@@4| |r#0@@10|))
)))))))
 :weight 3
 :pattern ( (_module.__default.InfinitePath_h ($LS $ly@@23) (Lit BoxType |_k#0@@14|) |r#0@@10|))
))))
(assert (forall ((|a#26#0#0| T@U) ) (! (< (DtRank |a#26#0#0|) (DtRank (|#_module.Number.Succ| |a#26#0#0|)))
 :pattern ( (|#_module.Number.Succ| |a#26#0#0|))
)))
(assert (forall ((|a#32#0#0| T@U) ) (! (< (DtRank |a#32#0#0|) (DtRank (|#_module.Number.Zero| |a#32#0#0|)))
 :pattern ( (|#_module.Number.Zero| |a#32#0#0|))
)))
(assert (forall ((d@@15 T@U) (_module.Stream$T@@5 T@U) ($h@@3 T@U) ) (!  (=> (and ($IsGoodHeap $h@@3) (and (_module.Stream.Cons_q d@@15) ($IsAlloc DatatypeTypeType d@@15 (Tclass._module.Stream _module.Stream$T@@5) $h@@3))) ($IsAllocBox (_module.Stream.head d@@15) _module.Stream$T@@5 $h@@3))
 :pattern ( ($IsAllocBox (_module.Stream.head d@@15) _module.Stream$T@@5 $h@@3))
)))
(assert (forall ((d@@16 T@U) (_module.CoOption$T@@6 T@U) ($h@@4 T@U) ) (!  (=> (and ($IsGoodHeap $h@@4) (and (_module.CoOption.Some_q d@@16) ($IsAlloc DatatypeTypeType d@@16 (Tclass._module.CoOption _module.CoOption$T@@6) $h@@4))) ($IsAllocBox (_module.CoOption.get d@@16) _module.CoOption$T@@6 $h@@4))
 :pattern ( ($IsAllocBox (_module.CoOption.get d@@16) _module.CoOption$T@@6 $h@@4))
)))
(assert  (and (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (t2 T@T) (val T@U) (m@@0 T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0 t1 t2 (MapType0Store t0 t1 t2 m@@0 x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@1 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@1 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@1 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@2 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@2 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@2 y0@@0 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 5)) (= (Ctor FieldType) 6)) (forall ((t0@@0 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@3 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 (MapType1Store t0@@0 t1@@0 m@@3 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@4 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@4 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@4 y0@@1)))
 :weight 0
))) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($ly@@24 T@U) (|r#0@@11| T@U) ) (!  (=> (or (|_module.__default.N2S#canCall| |r#0@@11|) (and (< 2 $FunctionContextHeight) ($Is DatatypeTypeType |r#0@@11| (Tclass._module.CoOption Tclass._module.Number)))) (and (=> (not (_module.CoOption.None_q |r#0@@11|)) (let ((|num#1@@0| ($Unbox DatatypeTypeType (_module.CoOption.get |r#0@@11|))))
(|_module.__default.N2S_k#canCall| (LitInt 0) |num#1@@0|))) (= (_module.__default.N2S ($LS $ly@@24) |r#0@@11|) (ite (_module.CoOption.None_q |r#0@@11|) |#_module.Stream.Nil| (let ((|num#0@@11| ($Unbox DatatypeTypeType (_module.CoOption.get |r#0@@11|))))
(_module.__default.N2S_k $ly@@24 (LitInt 0) |num#0@@11|))))))
 :pattern ( (_module.__default.N2S ($LS $ly@@24) |r#0@@11|))
))))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|_module._default.IsNeverEndingStream#$S@@3| T@U) ($ly@@25 T@U) (|_k#0@@15| T@U) (|s#0@@3| T@U) ) (!  (=> (or (|_module.__default.IsNeverEndingStream_h#canCall| |_module._default.IsNeverEndingStream#$S@@3| (Lit BoxType |_k#0@@15|) (Lit DatatypeTypeType |s#0@@3|)) (and (< 2 $FunctionContextHeight) ($Is DatatypeTypeType |s#0@@3| (Tclass._module.Stream |_module._default.IsNeverEndingStream#$S@@3|)))) (and (and (=> (< 0 (|ORD#Offset| |_k#0@@15|)) (=> (not (U_2_bool (Lit boolType (bool_2_U (_module.Stream.Nil_q (Lit DatatypeTypeType |s#0@@3|)))))) (let ((|tail#9| (Lit DatatypeTypeType (_module.Stream.tail (Lit DatatypeTypeType |s#0@@3|)))))
(|_module.__default.IsNeverEndingStream_h#canCall| |_module._default.IsNeverEndingStream#$S@@3| (|ORD#Minus| |_k#0@@15| (|ORD#FromNat| 1)) |tail#9|)))) (=> (=> (< 0 (|ORD#Offset| |_k#0@@15|)) (ite (_module.Stream.Nil_q (Lit DatatypeTypeType |s#0@@3|)) false (let ((|tail#10| (Lit DatatypeTypeType (_module.Stream.tail (Lit DatatypeTypeType |s#0@@3|)))))
(_module.__default.IsNeverEndingStream_h |_module._default.IsNeverEndingStream#$S@@3| ($LS $ly@@25) (|ORD#Minus| |_k#0@@15| (|ORD#FromNat| 1)) |tail#10|)))) (=> (= (LitInt 0) (|ORD#Offset| |_k#0@@15|)) (forall ((|_k'#2@@1| T@U) ) (!  (=> (|ORD#Less| |_k'#2@@1| |_k#0@@15|) (|_module.__default.IsNeverEndingStream_h#canCall| |_module._default.IsNeverEndingStream#$S@@3| |_k'#2@@1| |s#0@@3|))
 :pattern ( (_module.__default.IsNeverEndingStream_h |_module._default.IsNeverEndingStream#$S@@3| ($LS $ly@@25) |_k'#2@@1| |s#0@@3|))
))))) (= (_module.__default.IsNeverEndingStream_h |_module._default.IsNeverEndingStream#$S@@3| ($LS $ly@@25) (Lit BoxType |_k#0@@15|) (Lit DatatypeTypeType |s#0@@3|))  (and (=> (< 0 (|ORD#Offset| |_k#0@@15|)) (ite (_module.Stream.Nil_q (Lit DatatypeTypeType |s#0@@3|)) false (let ((|tail#8| (Lit DatatypeTypeType (_module.Stream.tail (Lit DatatypeTypeType |s#0@@3|)))))
(_module.__default.IsNeverEndingStream_h |_module._default.IsNeverEndingStream#$S@@3| ($LS $ly@@25) (|ORD#Minus| |_k#0@@15| (|ORD#FromNat| 1)) |tail#8|)))) (=> (= (LitInt 0) (|ORD#Offset| |_k#0@@15|)) (forall ((|_k'#2@@2| T@U) ) (!  (=> (|ORD#Less| |_k'#2@@2| |_k#0@@15|) (_module.__default.IsNeverEndingStream_h |_module._default.IsNeverEndingStream#$S@@3| ($LS $ly@@25) |_k'#2@@2| |s#0@@3|))
 :pattern ( (_module.__default.IsNeverEndingStream_h |_module._default.IsNeverEndingStream#$S@@3| ($LS $ly@@25) |_k'#2@@2| |s#0@@3|))
)))))))
 :weight 3
 :pattern ( (_module.__default.IsNeverEndingStream_h |_module._default.IsNeverEndingStream#$S@@3| ($LS $ly@@25) (Lit BoxType |_k#0@@15|) (Lit DatatypeTypeType |s#0@@3|)))
))))
(assert (forall ((_module.Stream$T@@6 T@U) (bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 (Tclass._module.Stream _module.Stream$T@@6)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@2)) bx@@2) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@2) (Tclass._module.Stream _module.Stream$T@@6))))
 :pattern ( ($IsBox bx@@2 (Tclass._module.Stream _module.Stream$T@@6)))
)))
(assert (forall ((_module.CoOption$T@@7 T@U) (bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 (Tclass._module.CoOption _module.CoOption$T@@7)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@3)) bx@@3) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@3) (Tclass._module.CoOption _module.CoOption$T@@7))))
 :pattern ( ($IsBox bx@@3 (Tclass._module.CoOption _module.CoOption$T@@7)))
)))
(assert (forall ((o@@5 T@U) ) (!  (=> (|ORD#IsNat| o@@5) (= o@@5 (|ORD#FromNat| (|ORD#Offset| o@@5))))
 :pattern ( (|ORD#Offset| o@@5))
 :pattern ( (|ORD#IsNat| o@@5))
)))
(assert (forall ((d@@17 T@U) (_module.Stream$T@@7 T@U) ($h@@5 T@U) ) (!  (=> (and ($IsGoodHeap $h@@5) (and (_module.Stream.Cons_q d@@17) ($IsAlloc DatatypeTypeType d@@17 (Tclass._module.Stream _module.Stream$T@@7) $h@@5))) ($IsAlloc DatatypeTypeType (_module.Stream.tail d@@17) (Tclass._module.Stream _module.Stream$T@@7) $h@@5))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.Stream.tail d@@17) (Tclass._module.Stream _module.Stream$T@@7) $h@@5))
)))
(assert  (=> (<= 3 $FunctionContextHeight) (forall (($ly@@26 T@U) (|_k#0@@16| T@U) (|r#0@@12| T@U) ) (!  (=> (or (|_module.__default.InfinitePath_h#canCall| (Lit BoxType |_k#0@@16|) (Lit DatatypeTypeType |r#0@@12|)) (and (< 3 $FunctionContextHeight) ($Is DatatypeTypeType |r#0@@12| (Tclass._module.CoOption Tclass._module.Number)))) (and (and (=> (< 0 (|ORD#Offset| |_k#0@@16|)) (=> (not (U_2_bool (Lit boolType (bool_2_U (_module.CoOption.None_q (Lit DatatypeTypeType |r#0@@12|)))))) (let ((|num#9| (Lit DatatypeTypeType ($Unbox DatatypeTypeType (_module.CoOption.get (Lit DatatypeTypeType |r#0@@12|))))))
(|_module.__default.InfinitePath_k_h#canCall| (|ORD#Minus| |_k#0@@16| (|ORD#FromNat| 1)) |num#9|)))) (=> (=> (< 0 (|ORD#Offset| |_k#0@@16|)) (ite (_module.CoOption.None_q (Lit DatatypeTypeType |r#0@@12|)) false (let ((|num#10| (Lit DatatypeTypeType ($Unbox DatatypeTypeType (_module.CoOption.get (Lit DatatypeTypeType |r#0@@12|))))))
(_module.__default.InfinitePath_k_h ($LS $LZ) (|ORD#Minus| |_k#0@@16| (|ORD#FromNat| 1)) |num#10|)))) (=> (= (LitInt 0) (|ORD#Offset| |_k#0@@16|)) (forall ((|_k'#2@@3| T@U) ) (!  (=> (|ORD#Less| |_k'#2@@3| |_k#0@@16|) (|_module.__default.InfinitePath_h#canCall| |_k'#2@@3| |r#0@@12|))
 :pattern ( (_module.__default.InfinitePath_h ($LS $ly@@26) |_k'#2@@3| |r#0@@12|))
))))) (= (_module.__default.InfinitePath_h ($LS $ly@@26) (Lit BoxType |_k#0@@16|) (Lit DatatypeTypeType |r#0@@12|))  (and (=> (< 0 (|ORD#Offset| |_k#0@@16|)) (ite (_module.CoOption.None_q (Lit DatatypeTypeType |r#0@@12|)) false (let ((|num#8| (Lit DatatypeTypeType ($Unbox DatatypeTypeType (_module.CoOption.get (Lit DatatypeTypeType |r#0@@12|))))))
(_module.__default.InfinitePath_k_h ($LS $LZ) (|ORD#Minus| |_k#0@@16| (|ORD#FromNat| 1)) |num#8|)))) (=> (= (LitInt 0) (|ORD#Offset| |_k#0@@16|)) (forall ((|_k'#2@@4| T@U) ) (!  (=> (|ORD#Less| |_k'#2@@4| |_k#0@@16|) (_module.__default.InfinitePath_h ($LS $ly@@26) |_k'#2@@4| |r#0@@12|))
 :pattern ( (_module.__default.InfinitePath_h ($LS $ly@@26) |_k'#2@@4| |r#0@@12|))
)))))))
 :weight 3
 :pattern ( (_module.__default.InfinitePath_h ($LS $ly@@26) (Lit BoxType |_k#0@@16|) (Lit DatatypeTypeType |r#0@@12|)))
))))
(assert (forall ((d@@18 T@U) ($h@@6 T@U) ) (!  (=> (and ($IsGoodHeap $h@@6) ($Is DatatypeTypeType d@@18 Tclass._module.Number)) ($IsAlloc DatatypeTypeType d@@18 Tclass._module.Number $h@@6))
 :pattern ( ($IsAlloc DatatypeTypeType d@@18 Tclass._module.Number $h@@6))
)))
(assert (= (Tag Tclass._System.nat) Tagclass._System.nat))
(assert (= (TagFamily Tclass._System.nat) tytagFamily$nat))
(assert (= (Tag Tclass._module.Number) Tagclass._module.Number))
(assert (= (TagFamily Tclass._module.Number) tytagFamily$Number))
(assert (forall ((o@@6 T@U) (p@@3 T@U) ) (!  (=> (and (|ORD#IsNat| p@@3) (<= (|ORD#Offset| p@@3) (|ORD#Offset| o@@6))) (or (and (= p@@3 (|ORD#FromNat| 0)) (= (|ORD#Minus| o@@6 p@@3) o@@6)) (and (or (not (= p@@3 (|ORD#FromNat| 0))) (not true)) (|ORD#Less| (|ORD#Minus| o@@6 p@@3) o@@6))))
 :pattern ( (|ORD#Minus| o@@6 p@@3))
)))
(assert (forall ((d@@19 T@U) ($h@@7 T@U) ) (!  (=> (and ($IsGoodHeap $h@@7) (and (_module.Number.Succ_q d@@19) ($IsAlloc DatatypeTypeType d@@19 Tclass._module.Number $h@@7))) ($IsAlloc DatatypeTypeType (_module.Number._h4 d@@19) Tclass._module.Number $h@@7))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.Number._h4 d@@19) Tclass._module.Number $h@@7))
)))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((|a#24#0#0| T@U) ) (! (= (|#_module.Number.Succ| (Lit DatatypeTypeType |a#24#0#0|)) (Lit DatatypeTypeType (|#_module.Number.Succ| |a#24#0#0|)))
 :pattern ( (|#_module.Number.Succ| (Lit DatatypeTypeType |a#24#0#0|)))
)))
(assert (forall ((|a#30#0#0| T@U) ) (! (= (|#_module.Number.Zero| (Lit DatatypeTypeType |a#30#0#0|)) (Lit DatatypeTypeType (|#_module.Number.Zero| |a#30#0#0|)))
 :pattern ( (|#_module.Number.Zero| (Lit DatatypeTypeType |a#30#0#0|)))
)))
(assert (forall ((x@@7 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@7)) (Lit BoxType ($Box T@@4 x@@7)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@7)))
)))
(assert (forall ((d@@20 T@U) ($h@@8 T@U) ) (!  (=> (and ($IsGoodHeap $h@@8) (and (_module.Number.Zero_q d@@20) ($IsAlloc DatatypeTypeType d@@20 Tclass._module.Number $h@@8))) ($IsAlloc DatatypeTypeType (_module.Number._h5 d@@20) (Tclass._module.CoOption Tclass._module.Number) $h@@8))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.Number._h5 d@@20) (Tclass._module.CoOption Tclass._module.Number) $h@@8))
)))
(assert (forall ((h@@0 T@U) (v@@1 T@U) ) (! ($IsAlloc intType v@@1 TInt h@@0)
 :pattern ( ($IsAlloc intType v@@1 TInt h@@0))
)))
(assert (forall ((h@@1 T@U) (v@@2 T@U) ) (! ($IsAlloc BoxType v@@2 TORDINAL h@@1)
 :pattern ( ($IsAlloc BoxType v@@2 TORDINAL h@@1))
)))
(assert (forall ((_module.Stream$T@@8 T@U) (|a#5#0#0@@0| T@U) (|a#5#1#0@@0| T@U) ($h@@9 T@U) ) (!  (=> ($IsGoodHeap $h@@9) (= ($IsAlloc DatatypeTypeType (|#_module.Stream.Cons| |a#5#0#0@@0| |a#5#1#0@@0|) (Tclass._module.Stream _module.Stream$T@@8) $h@@9)  (and ($IsAllocBox |a#5#0#0@@0| _module.Stream$T@@8 $h@@9) ($IsAlloc DatatypeTypeType |a#5#1#0@@0| (Tclass._module.Stream _module.Stream$T@@8) $h@@9))))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_module.Stream.Cons| |a#5#0#0@@0| |a#5#1#0@@0|) (Tclass._module.Stream _module.Stream$T@@8) $h@@9))
)))
(assert  (=> (<= 3 $FunctionContextHeight) (forall (($ly@@27 T@U) (|_k#0@@17| T@U) (|num#0@@12| T@U) ) (!  (=> (or (|_module.__default.InfinitePath_k_h#canCall| |_k#0@@17| |num#0@@12|) (and (< 3 $FunctionContextHeight) ($Is DatatypeTypeType |num#0@@12| Tclass._module.Number))) (and (and (=> (< 0 (|ORD#Offset| |_k#0@@17|)) (and (=> (_module.Number.Succ_q |num#0@@12|) (let ((|next#3| (_module.Number._h4 |num#0@@12|)))
(|_module.__default.InfinitePath_k_h#canCall| (|ORD#Minus| |_k#0@@17| (|ORD#FromNat| 1)) |next#3|))) (=> (not (_module.Number.Succ_q |num#0@@12|)) (let ((|r#3| (_module.Number._h5 |num#0@@12|)))
(|_module.__default.InfinitePath_h#canCall| (|ORD#Minus| |_k#0@@17| (|ORD#FromNat| 1)) |r#3|))))) (=> (=> (< 0 (|ORD#Offset| |_k#0@@17|)) (ite (_module.Number.Succ_q |num#0@@12|) (let ((|next#4| (_module.Number._h4 |num#0@@12|)))
(_module.__default.InfinitePath_k_h $ly@@27 (|ORD#Minus| |_k#0@@17| (|ORD#FromNat| 1)) |next#4|)) (let ((|r#4| (_module.Number._h5 |num#0@@12|)))
(_module.__default.InfinitePath_h ($LS $LZ) (|ORD#Minus| |_k#0@@17| (|ORD#FromNat| 1)) |r#4|)))) (=> (= (LitInt 0) (|ORD#Offset| |_k#0@@17|)) (forall ((|_k'#0@@3| T@U) ) (!  (=> (|ORD#Less| |_k'#0@@3| |_k#0@@17|) (|_module.__default.InfinitePath_k_h#canCall| |_k'#0@@3| |num#0@@12|))
 :pattern ( (_module.__default.InfinitePath_k_h $ly@@27 |_k'#0@@3| |num#0@@12|))
))))) (= (_module.__default.InfinitePath_k_h ($LS $ly@@27) |_k#0@@17| |num#0@@12|)  (and (=> (< 0 (|ORD#Offset| |_k#0@@17|)) (ite (_module.Number.Succ_q |num#0@@12|) (let ((|next#2| (_module.Number._h4 |num#0@@12|)))
(_module.__default.InfinitePath_k_h $ly@@27 (|ORD#Minus| |_k#0@@17| (|ORD#FromNat| 1)) |next#2|)) (let ((|r#2| (_module.Number._h5 |num#0@@12|)))
(_module.__default.InfinitePath_h ($LS $LZ) (|ORD#Minus| |_k#0@@17| (|ORD#FromNat| 1)) |r#2|)))) (=> (= (LitInt 0) (|ORD#Offset| |_k#0@@17|)) (forall ((|_k'#0@@4| T@U) ) (!  (=> (|ORD#Less| |_k'#0@@4| |_k#0@@17|) (_module.__default.InfinitePath_k_h $ly@@27 |_k'#0@@4| |num#0@@12|))
 :pattern ( (_module.__default.InfinitePath_k_h $ly@@27 |_k'#0@@4| |num#0@@12|))
)))))))
 :pattern ( (_module.__default.InfinitePath_k_h ($LS $ly@@27) |_k#0@@17| |num#0@@12|))
))))
(assert (forall ((v@@3 T@U) ) (! ($Is intType v@@3 TInt)
 :pattern ( ($Is intType v@@3 TInt))
)))
(assert (forall ((v@@4 T@U) ) (! ($Is BoxType v@@4 TORDINAL)
 :pattern ( ($Is BoxType v@@4 TORDINAL))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |_k#0@@18| () T@U)
(declare-fun |_k##0@0| () T@U)
(declare-fun |n##0@0| () Int)
(declare-fun |r#6@0| () T@U)
(declare-fun |num##0@0| () T@U)
(declare-fun |num#1@@1| () T@U)
(declare-fun $Heap@3 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun $Heap@0 () T@U)
(declare-fun |##_k#0@0| () T@U)
(declare-fun |##s#1@0| () T@U)
(declare-fun |##_k#1@0| () T@U)
(declare-fun |##s#2@0| () T@U)
(declare-fun |##s#3@0| () T@U)
(declare-fun |n#1| () Int)
(declare-fun |##s#4@0| () T@U)
(declare-fun |##s#5@0| () T@U)
(declare-fun |_mcc#1#0@0| () T@U)
(declare-fun |let#0_0_0#0#0| () T@U)
(declare-fun |_mcc#0#0@0| () T@U)
(declare-fun |next#6@0| () T@U)
(declare-fun |let#0_1_0#0#0| () T@U)
(declare-fun |n##1@0| () Int)
(declare-fun $Heap@2 () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $Heap () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 39) (let ((anon17_Then_correct  (and (=> (= (ControlFlow 0 22) (- 0 33)) (|ORD#IsNat| (Lit BoxType (|ORD#FromNat| 1)))) (=> (|ORD#IsNat| (Lit BoxType (|ORD#FromNat| 1))) (and (=> (= (ControlFlow 0 22) (- 0 32)) (<= (|ORD#Offset| (Lit BoxType (|ORD#FromNat| 1))) (|ORD#Offset| |_k#0@@18|))) (=> (<= (|ORD#Offset| (Lit BoxType (|ORD#FromNat| 1))) (|ORD#Offset| |_k#0@@18|)) (=> (= |_k##0@0| (|ORD#Minus| |_k#0@@18| (|ORD#FromNat| 1))) (and (=> (= (ControlFlow 0 22) (- 0 31)) ($Is intType (int_2_U (LitInt 0)) Tclass._System.nat)) (=> ($Is intType (int_2_U (LitInt 0)) Tclass._System.nat) (=> (= |n##0@0| (LitInt 0)) (and (=> (= (ControlFlow 0 22) (- 0 30)) (_module.CoOption.Some_q |r#6@0|)) (=> (_module.CoOption.Some_q |r#6@0|) (=> (= |num##0@0| ($Unbox DatatypeTypeType (_module.CoOption.get |r#6@0|))) (and (=> (= (ControlFlow 0 22) (- 0 29)) (or (|ORD#Less| |_k##0@0| |_k#0@@18|) (and (= |_k##0@0| |_k#0@@18|) (< (DtRank |num##0@0|) (DtRank |num#1@@1|))))) (=> (or (|ORD#Less| |_k##0@0| |_k#0@@18|) (and (= |_k##0@0| |_k#0@@18|) (< (DtRank |num##0@0|) (DtRank |num#1@@1|)))) (and (=> (= (ControlFlow 0 22) (- 0 28)) (=> (|_module.__default.InfinitePath_k#canCall| |num##0@0|) (or (_module.__default.InfinitePath_k ($LS $LZ) |num##0@0|) (=> (_module.Number.Succ_q |num##0@0|) (let ((|next#2@@0| (_module.Number._h4 |num##0@0|)))
(_module.__default.InfinitePath_k ($LS ($LS $LZ)) |next#2@@0|)))))) (=> (=> (|_module.__default.InfinitePath_k#canCall| |num##0@0|) (or (_module.__default.InfinitePath_k ($LS $LZ) |num##0@0|) (=> (_module.Number.Succ_q |num##0@0|) (let ((|next#2@@1| (_module.Number._h4 |num##0@0|)))
(_module.__default.InfinitePath_k ($LS ($LS $LZ)) |next#2@@1|))))) (and (=> (= (ControlFlow 0 22) (- 0 27)) (=> (|_module.__default.InfinitePath_k#canCall| |num##0@0|) (or (_module.__default.InfinitePath_k ($LS $LZ) |num##0@0|) (=> (not (_module.Number.Succ_q |num##0@0|)) (let ((|r#2@@0| (_module.Number._h5 |num##0@0|)))
(_module.__default.InfinitePath ($LS ($LS $LZ)) |r#2@@0|)))))) (=> (=> (|_module.__default.InfinitePath_k#canCall| |num##0@0|) (or (_module.__default.InfinitePath_k ($LS $LZ) |num##0@0|) (=> (not (_module.Number.Succ_q |num##0@0|)) (let ((|r#2@@1| (_module.Number._h5 |num##0@0|)))
(_module.__default.InfinitePath ($LS ($LS $LZ)) |r#2@@1|))))) (=> (and (and (and ($IsGoodHeap $Heap@3) ($IsHeapAnchor $Heap@3)) (and (|_module.__default.N2S_k#canCall| |n##0@0| |num##0@0|) (|_module.__default.IsNeverEndingStream_h#canCall| TInt |_k##0@0| (_module.__default.N2S_k ($LS $LZ) |n##0@0| |num##0@0|)))) (and (and (|_module.__default.IsNeverEndingStream_h#canCall| TInt |_k##0@0| (_module.__default.N2S_k ($LS $LZ) |n##0@0| |num##0@0|)) (and (_module.__default.IsNeverEndingStream_h TInt ($LS $LZ) |_k##0@0| (_module.__default.N2S_k ($LS $LZ) |n##0@0| |num##0@0|)) (and (=> (< 0 (|ORD#Offset| |_k##0@0|)) (ite (_module.Stream.Nil_q (_module.__default.N2S_k ($LS $LZ) |n##0@0| |num##0@0|)) false (let ((|tail#3@@0| (_module.Stream.tail (_module.__default.N2S_k ($LS $LZ) |n##0@0| |num##0@0|))))
(_module.__default.IsNeverEndingStream_h TInt ($LS $LZ) (|ORD#Minus| |_k##0@0| (|ORD#FromNat| 1)) |tail#3@@0|)))) (=> (= (LitInt 0) (|ORD#Offset| |_k##0@0|)) (forall ((|_k'#0@@5| T@U) ) (!  (=> (|ORD#Less| |_k'#0@@5| |_k##0@0|) (_module.__default.IsNeverEndingStream_h TInt ($LS $LZ) |_k'#0@@5| (_module.__default.N2S_k ($LS $LZ) |n##0@0| |num##0@0|)))
 :pattern ( (_module.__default.IsNeverEndingStream_h TInt ($LS $LZ) |_k'#0@@5| (_module.__default.N2S_k ($LS $LZ) |n##0@0| |num##0@0|)))
)))))) (= $Heap@0 $Heap@3))) (and (=> (= (ControlFlow 0 22) (- 0 26)) (|ORD#IsNat| (Lit BoxType (|ORD#FromNat| 1)))) (=> (|ORD#IsNat| (Lit BoxType (|ORD#FromNat| 1))) (and (=> (= (ControlFlow 0 22) (- 0 25)) (<= (|ORD#Offset| (Lit BoxType (|ORD#FromNat| 1))) (|ORD#Offset| |_k#0@@18|))) (=> (<= (|ORD#Offset| (Lit BoxType (|ORD#FromNat| 1))) (|ORD#Offset| |_k#0@@18|)) (=> (= |##_k#0@0| (|ORD#Minus| |_k#0@@18| (|ORD#FromNat| 1))) (=> (and (and (and ($IsAlloc BoxType |##_k#0@0| TORDINAL $Heap@3) ($IsAlloc DatatypeTypeType |r#6@0| (Tclass._module.CoOption Tclass._module.Number) $Heap@3)) (and (|_module.__default.N2S#canCall| |r#6@0|) (= |##s#1@0| (_module.__default.N2S ($LS $LZ) |r#6@0|)))) (and (and ($IsAlloc DatatypeTypeType |##s#1@0| (Tclass._module.Stream TInt) $Heap@3) (|_module.__default.IsNeverEndingStream_h#canCall| TInt (|ORD#Minus| |_k#0@@18| (|ORD#FromNat| 1)) (_module.__default.N2S ($LS $LZ) |r#6@0|))) (and (|_module.__default.N2S#canCall| |r#6@0|) (|_module.__default.IsNeverEndingStream_h#canCall| TInt (|ORD#Minus| |_k#0@@18| (|ORD#FromNat| 1)) (_module.__default.N2S ($LS $LZ) |r#6@0|))))) (and (=> (= (ControlFlow 0 22) (- 0 24)) (=> (U_2_bool (Lit boolType (bool_2_U true))) (=> (|_module.__default.IsNeverEndingStream_h#canCall| TInt (|ORD#Minus| |_k#0@@18| (|ORD#FromNat| 1)) (_module.__default.N2S ($LS $LZ) |r#6@0|)) (or (_module.__default.IsNeverEndingStream_h TInt ($LS $LZ) (|ORD#Minus| |_k#0@@18| (|ORD#FromNat| 1)) (_module.__default.N2S ($LS $LZ) |r#6@0|)) (=> (< 0 (|ORD#Offset| (|ORD#Minus| |_k#0@@18| (|ORD#FromNat| 1)))) (=> (_module.Stream.Nil_q (_module.__default.N2S ($LS $LZ) |r#6@0|)) (U_2_bool (Lit boolType (bool_2_U false))))))))) (and (=> (= (ControlFlow 0 22) (- 0 23)) (=> (U_2_bool (Lit boolType (bool_2_U true))) (=> (|_module.__default.IsNeverEndingStream_h#canCall| TInt (|ORD#Minus| |_k#0@@18| (|ORD#FromNat| 1)) (_module.__default.N2S ($LS $LZ) |r#6@0|)) (or (_module.__default.IsNeverEndingStream_h TInt ($LS $LZ) (|ORD#Minus| |_k#0@@18| (|ORD#FromNat| 1)) (_module.__default.N2S ($LS $LZ) |r#6@0|)) (=> (< 0 (|ORD#Offset| (|ORD#Minus| |_k#0@@18| (|ORD#FromNat| 1)))) (=> (not (_module.Stream.Nil_q (_module.__default.N2S ($LS $LZ) |r#6@0|))) (let ((|tail#6@@0| (_module.Stream.tail (_module.__default.N2S ($LS ($LS $LZ)) |r#6@0|))))
(_module.__default.IsNeverEndingStream_h TInt ($LS ($LS $LZ)) (|ORD#Minus| (|ORD#Minus| |_k#0@@18| (|ORD#FromNat| 1)) (|ORD#FromNat| 1)) |tail#6@@0|)))))))) (=> (= (ControlFlow 0 22) (- 0 21)) (=> (U_2_bool (Lit boolType (bool_2_U true))) (=> (|_module.__default.IsNeverEndingStream_h#canCall| TInt (|ORD#Minus| |_k#0@@18| (|ORD#FromNat| 1)) (_module.__default.N2S ($LS $LZ) |r#6@0|)) (or (_module.__default.IsNeverEndingStream_h TInt ($LS $LZ) (|ORD#Minus| |_k#0@@18| (|ORD#FromNat| 1)) (_module.__default.N2S ($LS $LZ) |r#6@0|)) (=> (= (LitInt 0) (|ORD#Offset| (|ORD#Minus| |_k#0@@18| (|ORD#FromNat| 1)))) (forall ((|_k'#2@@5| T@U) ) (!  (=> (|ORD#Less| |_k'#2@@5| (|ORD#Minus| |_k#0@@18| (|ORD#FromNat| 1))) (_module.__default.IsNeverEndingStream_h TInt ($LS ($LS $LZ)) |_k'#2@@5| (_module.__default.N2S ($LS ($LS $LZ)) |r#6@0|)))
 :pattern ( (_module.__default.IsNeverEndingStream_h TInt ($LS ($LS $LZ)) |_k'#2@@5| (_module.__default.N2S ($LS ($LS $LZ)) |r#6@0|)))
)))))))))))))))))))))))))))))))))))
(let ((anon16_Then_correct  (=> (|ORD#IsNat| (Lit BoxType (|ORD#FromNat| 1))) (=> (and (and (<= (|ORD#Offset| (Lit BoxType (|ORD#FromNat| 1))) (|ORD#Offset| |_k#0@@18|)) (= |##_k#1@0| (|ORD#Minus| |_k#0@@18| (|ORD#FromNat| 1)))) (and ($IsAlloc BoxType |##_k#1@0| TORDINAL $Heap@0) ($IsAlloc DatatypeTypeType |r#6@0| (Tclass._module.CoOption Tclass._module.Number) $Heap@0))) (=> (and (and (and (and (|_module.__default.N2S#canCall| |r#6@0|) (= |##s#2@0| (_module.__default.N2S ($LS $LZ) |r#6@0|))) (and ($IsAlloc DatatypeTypeType |##s#2@0| (Tclass._module.Stream TInt) $Heap@0) (|_module.__default.IsNeverEndingStream_h#canCall| TInt (|ORD#Minus| |_k#0@@18| (|ORD#FromNat| 1)) (_module.__default.N2S ($LS $LZ) |r#6@0|)))) (and (and (|_module.__default.N2S#canCall| |r#6@0|) (|_module.__default.IsNeverEndingStream_h#canCall| TInt (|ORD#Minus| |_k#0@@18| (|ORD#FromNat| 1)) (_module.__default.N2S ($LS $LZ) |r#6@0|))) (_module.__default.IsNeverEndingStream_h TInt ($LS $LZ) (|ORD#Minus| |_k#0@@18| (|ORD#FromNat| 1)) (_module.__default.N2S ($LS $LZ) |r#6@0|)))) (and (and (and ($IsAlloc BoxType |_k#0@@18| TORDINAL $Heap@0) ($IsAlloc DatatypeTypeType |r#6@0| (Tclass._module.CoOption Tclass._module.Number) $Heap@0)) (and (|_module.__default.N2S#canCall| |r#6@0|) (= |##s#3@0| (|#_module.Stream.Cons| ($Box intType (int_2_U |n#1|)) (_module.__default.N2S ($LS $LZ) |r#6@0|))))) (and (and ($IsAlloc DatatypeTypeType |##s#3@0| (Tclass._module.Stream TInt) $Heap@0) (|_module.__default.IsNeverEndingStream_h#canCall| TInt |_k#0@@18| (|#_module.Stream.Cons| ($Box intType (int_2_U |n#1|)) (_module.__default.N2S ($LS $LZ) |r#6@0|)))) (and (|_module.__default.N2S#canCall| |r#6@0|) (|_module.__default.IsNeverEndingStream_h#canCall| TInt |_k#0@@18| (|#_module.Stream.Cons| ($Box intType (int_2_U |n#1|)) (_module.__default.N2S ($LS $LZ) |r#6@0|))))))) (and (=> (= (ControlFlow 0 18) (- 0 20)) (=> (_module.__default.IsNeverEndingStream_h TInt ($LS $LZ) (|ORD#Minus| |_k#0@@18| (|ORD#FromNat| 1)) (_module.__default.N2S ($LS $LZ) |r#6@0|)) (=> (|_module.__default.IsNeverEndingStream_h#canCall| TInt |_k#0@@18| (|#_module.Stream.Cons| ($Box intType (int_2_U |n#1|)) (_module.__default.N2S ($LS $LZ) |r#6@0|))) (or (_module.__default.IsNeverEndingStream_h TInt ($LS $LZ) |_k#0@@18| (|#_module.Stream.Cons| ($Box intType (int_2_U |n#1|)) (_module.__default.N2S ($LS $LZ) |r#6@0|))) (=> (< 0 (|ORD#Offset| |_k#0@@18|)) (=> (_module.Stream.Nil_q (|#_module.Stream.Cons| ($Box intType (int_2_U |n#1|)) (_module.__default.N2S ($LS $LZ) |r#6@0|))) (U_2_bool (Lit boolType (bool_2_U false))))))))) (and (=> (= (ControlFlow 0 18) (- 0 19)) (=> (_module.__default.IsNeverEndingStream_h TInt ($LS $LZ) (|ORD#Minus| |_k#0@@18| (|ORD#FromNat| 1)) (_module.__default.N2S ($LS $LZ) |r#6@0|)) (=> (|_module.__default.IsNeverEndingStream_h#canCall| TInt |_k#0@@18| (|#_module.Stream.Cons| ($Box intType (int_2_U |n#1|)) (_module.__default.N2S ($LS $LZ) |r#6@0|))) (or (_module.__default.IsNeverEndingStream_h TInt ($LS $LZ) |_k#0@@18| (|#_module.Stream.Cons| ($Box intType (int_2_U |n#1|)) (_module.__default.N2S ($LS $LZ) |r#6@0|))) (=> (< 0 (|ORD#Offset| |_k#0@@18|)) (=> (not (_module.Stream.Nil_q (|#_module.Stream.Cons| ($Box intType (int_2_U |n#1|)) (_module.__default.N2S ($LS $LZ) |r#6@0|)))) (let ((|tail#8@@0| (_module.Stream.tail (|#_module.Stream.Cons| ($Box intType (int_2_U |n#1|)) (_module.__default.N2S ($LS ($LS $LZ)) |r#6@0|)))))
(_module.__default.IsNeverEndingStream_h TInt ($LS ($LS $LZ)) (|ORD#Minus| |_k#0@@18| (|ORD#FromNat| 1)) |tail#8@@0|)))))))) (=> (= (ControlFlow 0 18) (- 0 17)) (=> (_module.__default.IsNeverEndingStream_h TInt ($LS $LZ) (|ORD#Minus| |_k#0@@18| (|ORD#FromNat| 1)) (_module.__default.N2S ($LS $LZ) |r#6@0|)) (=> (|_module.__default.IsNeverEndingStream_h#canCall| TInt |_k#0@@18| (|#_module.Stream.Cons| ($Box intType (int_2_U |n#1|)) (_module.__default.N2S ($LS $LZ) |r#6@0|))) (or (_module.__default.IsNeverEndingStream_h TInt ($LS $LZ) |_k#0@@18| (|#_module.Stream.Cons| ($Box intType (int_2_U |n#1|)) (_module.__default.N2S ($LS $LZ) |r#6@0|))) (=> (= (LitInt 0) (|ORD#Offset| |_k#0@@18|)) (forall ((|_k'#3| T@U) ) (!  (=> (|ORD#Less| |_k'#3| |_k#0@@18|) (_module.__default.IsNeverEndingStream_h TInt ($LS ($LS $LZ)) |_k'#3| (|#_module.Stream.Cons| ($Box intType (int_2_U |n#1|)) (_module.__default.N2S ($LS ($LS $LZ)) |r#6@0|))))
 :pattern ( (_module.__default.IsNeverEndingStream_h TInt ($LS ($LS $LZ)) |_k'#3| (|#_module.Stream.Cons| ($Box intType (int_2_U |n#1|)) (_module.__default.N2S ($LS ($LS $LZ)) |r#6@0|))))
))))))))))))))
(let ((anon15_Then_correct  (=> (and ($IsAlloc BoxType |_k#0@@18| TORDINAL $Heap@0) ($IsAlloc DatatypeTypeType |r#6@0| (Tclass._module.CoOption Tclass._module.Number) $Heap@0)) (=> (and (and (and (and (|_module.__default.N2S#canCall| |r#6@0|) (= |##s#4@0| (|#_module.Stream.Cons| ($Box intType (int_2_U |n#1|)) (_module.__default.N2S ($LS $LZ) |r#6@0|)))) (and ($IsAlloc DatatypeTypeType |##s#4@0| (Tclass._module.Stream TInt) $Heap@0) (|_module.__default.IsNeverEndingStream_h#canCall| TInt |_k#0@@18| (|#_module.Stream.Cons| ($Box intType (int_2_U |n#1|)) (_module.__default.N2S ($LS $LZ) |r#6@0|))))) (and (and (|_module.__default.N2S#canCall| |r#6@0|) (|_module.__default.IsNeverEndingStream_h#canCall| TInt |_k#0@@18| (|#_module.Stream.Cons| ($Box intType (int_2_U |n#1|)) (_module.__default.N2S ($LS $LZ) |r#6@0|)))) (and (_module.__default.IsNeverEndingStream_h TInt ($LS $LZ) |_k#0@@18| (|#_module.Stream.Cons| ($Box intType (int_2_U |n#1|)) (_module.__default.N2S ($LS $LZ) |r#6@0|))) ($IsAlloc BoxType |_k#0@@18| TORDINAL $Heap@0)))) (and (and (and ($IsAlloc intType (int_2_U |n#1|) Tclass._System.nat $Heap@0) ($IsAlloc DatatypeTypeType |num#1@@1| Tclass._module.Number $Heap@0)) (and (|_module.__default.N2S_k#canCall| |n#1| |num#1@@1|) (= |##s#5@0| (_module.__default.N2S_k ($LS $LZ) |n#1| |num#1@@1|)))) (and (and ($IsAlloc DatatypeTypeType |##s#5@0| (Tclass._module.Stream TInt) $Heap@0) (|_module.__default.IsNeverEndingStream_h#canCall| TInt |_k#0@@18| (_module.__default.N2S_k ($LS $LZ) |n#1| |num#1@@1|))) (and (|_module.__default.N2S_k#canCall| |n#1| |num#1@@1|) (|_module.__default.IsNeverEndingStream_h#canCall| TInt |_k#0@@18| (_module.__default.N2S_k ($LS $LZ) |n#1| |num#1@@1|)))))) (and (=> (= (ControlFlow 0 14) (- 0 16)) (=> (_module.__default.IsNeverEndingStream_h TInt ($LS $LZ) |_k#0@@18| (|#_module.Stream.Cons| ($Box intType (int_2_U |n#1|)) (_module.__default.N2S ($LS $LZ) |r#6@0|))) (=> (|_module.__default.IsNeverEndingStream_h#canCall| TInt |_k#0@@18| (_module.__default.N2S_k ($LS $LZ) |n#1| |num#1@@1|)) (or (_module.__default.IsNeverEndingStream_h TInt ($LS $LZ) |_k#0@@18| (_module.__default.N2S_k ($LS $LZ) |n#1| |num#1@@1|)) (=> (< 0 (|ORD#Offset| |_k#0@@18|)) (=> (_module.Stream.Nil_q (_module.__default.N2S_k ($LS $LZ) |n#1| |num#1@@1|)) (U_2_bool (Lit boolType (bool_2_U false))))))))) (and (=> (= (ControlFlow 0 14) (- 0 15)) (=> (_module.__default.IsNeverEndingStream_h TInt ($LS $LZ) |_k#0@@18| (|#_module.Stream.Cons| ($Box intType (int_2_U |n#1|)) (_module.__default.N2S ($LS $LZ) |r#6@0|))) (=> (|_module.__default.IsNeverEndingStream_h#canCall| TInt |_k#0@@18| (_module.__default.N2S_k ($LS $LZ) |n#1| |num#1@@1|)) (or (_module.__default.IsNeverEndingStream_h TInt ($LS $LZ) |_k#0@@18| (_module.__default.N2S_k ($LS $LZ) |n#1| |num#1@@1|)) (=> (< 0 (|ORD#Offset| |_k#0@@18|)) (=> (not (_module.Stream.Nil_q (_module.__default.N2S_k ($LS $LZ) |n#1| |num#1@@1|))) (let ((|tail#10@@0| (_module.Stream.tail (_module.__default.N2S_k ($LS ($LS $LZ)) |n#1| |num#1@@1|))))
(_module.__default.IsNeverEndingStream_h TInt ($LS ($LS $LZ)) (|ORD#Minus| |_k#0@@18| (|ORD#FromNat| 1)) |tail#10@@0|)))))))) (=> (= (ControlFlow 0 14) (- 0 13)) (=> (_module.__default.IsNeverEndingStream_h TInt ($LS $LZ) |_k#0@@18| (|#_module.Stream.Cons| ($Box intType (int_2_U |n#1|)) (_module.__default.N2S ($LS $LZ) |r#6@0|))) (=> (|_module.__default.IsNeverEndingStream_h#canCall| TInt |_k#0@@18| (_module.__default.N2S_k ($LS $LZ) |n#1| |num#1@@1|)) (or (_module.__default.IsNeverEndingStream_h TInt ($LS $LZ) |_k#0@@18| (_module.__default.N2S_k ($LS $LZ) |n#1| |num#1@@1|)) (=> (= (LitInt 0) (|ORD#Offset| |_k#0@@18|)) (forall ((|_k'#4| T@U) ) (!  (=> (|ORD#Less| |_k'#4| |_k#0@@18|) (_module.__default.IsNeverEndingStream_h TInt ($LS ($LS $LZ)) |_k'#4| (_module.__default.N2S_k ($LS ($LS $LZ)) |n#1| |num#1@@1|)))
 :pattern ( (_module.__default.IsNeverEndingStream_h TInt ($LS ($LS $LZ)) |_k'#4| (_module.__default.N2S_k ($LS ($LS $LZ)) |n#1| |num#1@@1|)))
)))))))))))))
(let ((anon14_Then_correct true))
(let ((anon13_Else_correct true))
(let ((GeneratedUnifiedExit_correct  (and (=> (= (ControlFlow 0 2) (- 0 4)) (=> (|_module.__default.IsNeverEndingStream_h#canCall| TInt |_k#0@@18| (_module.__default.N2S_k ($LS $LZ) |n#1| |num#1@@1|)) (or (_module.__default.IsNeverEndingStream_h TInt ($LS $LZ) |_k#0@@18| (_module.__default.N2S_k ($LS $LZ) |n#1| |num#1@@1|)) (=> (< 0 (|ORD#Offset| |_k#0@@18|)) (=> (_module.Stream.Nil_q (_module.__default.N2S_k ($LS $LZ) |n#1| |num#1@@1|)) (U_2_bool (Lit boolType (bool_2_U false)))))))) (=> (=> (|_module.__default.IsNeverEndingStream_h#canCall| TInt |_k#0@@18| (_module.__default.N2S_k ($LS $LZ) |n#1| |num#1@@1|)) (or (_module.__default.IsNeverEndingStream_h TInt ($LS $LZ) |_k#0@@18| (_module.__default.N2S_k ($LS $LZ) |n#1| |num#1@@1|)) (=> (< 0 (|ORD#Offset| |_k#0@@18|)) (=> (_module.Stream.Nil_q (_module.__default.N2S_k ($LS $LZ) |n#1| |num#1@@1|)) (U_2_bool (Lit boolType (bool_2_U false))))))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (=> (|_module.__default.IsNeverEndingStream_h#canCall| TInt |_k#0@@18| (_module.__default.N2S_k ($LS $LZ) |n#1| |num#1@@1|)) (or (_module.__default.IsNeverEndingStream_h TInt ($LS $LZ) |_k#0@@18| (_module.__default.N2S_k ($LS $LZ) |n#1| |num#1@@1|)) (=> (< 0 (|ORD#Offset| |_k#0@@18|)) (=> (not (_module.Stream.Nil_q (_module.__default.N2S_k ($LS $LZ) |n#1| |num#1@@1|))) (let ((|tail#4@@0| (_module.Stream.tail (_module.__default.N2S_k ($LS ($LS $LZ)) |n#1| |num#1@@1|))))
(_module.__default.IsNeverEndingStream_h TInt ($LS ($LS $LZ)) (|ORD#Minus| |_k#0@@18| (|ORD#FromNat| 1)) |tail#4@@0|))))))) (=> (=> (|_module.__default.IsNeverEndingStream_h#canCall| TInt |_k#0@@18| (_module.__default.N2S_k ($LS $LZ) |n#1| |num#1@@1|)) (or (_module.__default.IsNeverEndingStream_h TInt ($LS $LZ) |_k#0@@18| (_module.__default.N2S_k ($LS $LZ) |n#1| |num#1@@1|)) (=> (< 0 (|ORD#Offset| |_k#0@@18|)) (=> (not (_module.Stream.Nil_q (_module.__default.N2S_k ($LS $LZ) |n#1| |num#1@@1|))) (let ((|tail#4@@1| (_module.Stream.tail (_module.__default.N2S_k ($LS ($LS $LZ)) |n#1| |num#1@@1|))))
(_module.__default.IsNeverEndingStream_h TInt ($LS ($LS $LZ)) (|ORD#Minus| |_k#0@@18| (|ORD#FromNat| 1)) |tail#4@@1|)))))) (=> (= (ControlFlow 0 2) (- 0 1)) (=> (|_module.__default.IsNeverEndingStream_h#canCall| TInt |_k#0@@18| (_module.__default.N2S_k ($LS $LZ) |n#1| |num#1@@1|)) (or (_module.__default.IsNeverEndingStream_h TInt ($LS $LZ) |_k#0@@18| (_module.__default.N2S_k ($LS $LZ) |n#1| |num#1@@1|)) (=> (= (LitInt 0) (|ORD#Offset| |_k#0@@18|)) (forall ((|_k'#1@@5| T@U) ) (!  (=> (|ORD#Less| |_k'#1@@5| |_k#0@@18|) (_module.__default.IsNeverEndingStream_h TInt ($LS ($LS $LZ)) |_k'#1@@5| (_module.__default.N2S_k ($LS ($LS $LZ)) |n#1| |num#1@@1|)))
 :pattern ( (_module.__default.IsNeverEndingStream_h TInt ($LS ($LS $LZ)) |_k'#1@@5| (_module.__default.N2S_k ($LS ($LS $LZ)) |n#1| |num#1@@1|)))
))))))))))))
(let ((anon17_Else_correct  (=> (and (=> true (_module.__default.IsNeverEndingStream_h TInt ($LS $LZ) |_k#0@@18| (_module.__default.N2S_k ($LS $LZ) |n#1| |num#1@@1|))) (= (ControlFlow 0 34) 2)) GeneratedUnifiedExit_correct)))
(let ((anon13_Then_correct  (=> (= |num#1@@1| (|#_module.Number.Zero| |_mcc#1#0@0|)) (=> (and ($Is DatatypeTypeType |_mcc#1#0@0| (Tclass._module.CoOption Tclass._module.Number)) ($IsAlloc DatatypeTypeType |_mcc#1#0@0| (Tclass._module.CoOption Tclass._module.Number) $Heap@0)) (=> (and (and (and ($Is DatatypeTypeType |r#6@0| (Tclass._module.CoOption Tclass._module.Number)) ($IsAlloc DatatypeTypeType |r#6@0| (Tclass._module.CoOption Tclass._module.Number) $Heap@0)) (= |let#0_0_0#0#0| |_mcc#1#0@0|)) (and ($Is DatatypeTypeType |let#0_0_0#0#0| (Tclass._module.CoOption Tclass._module.Number)) (= |r#6@0| |let#0_0_0#0#0|))) (and (and (and (and (=> (= (ControlFlow 0 35) 12) anon14_Then_correct) (=> (= (ControlFlow 0 35) 14) anon15_Then_correct)) (=> (= (ControlFlow 0 35) 18) anon16_Then_correct)) (=> (= (ControlFlow 0 35) 22) anon17_Then_correct)) (=> (= (ControlFlow 0 35) 34) anon17_Else_correct)))))))
(let ((anon12_Else_correct  (=> (or (not (= |num#1@@1| (|#_module.Number.Succ| |_mcc#0#0@0|))) (not true)) (and (=> (= (ControlFlow 0 36) 35) anon13_Then_correct) (=> (= (ControlFlow 0 36) 11) anon13_Else_correct)))))
(let ((anon12_Then_correct  (=> (= |num#1@@1| (|#_module.Number.Succ| |_mcc#0#0@0|)) (=> (and ($Is DatatypeTypeType |_mcc#0#0@0| Tclass._module.Number) ($IsAlloc DatatypeTypeType |_mcc#0#0@0| Tclass._module.Number $Heap@0)) (=> (and (and (and ($Is DatatypeTypeType |next#6@0| Tclass._module.Number) ($IsAlloc DatatypeTypeType |next#6@0| Tclass._module.Number $Heap@0)) (= |let#0_1_0#0#0| |_mcc#0#0@0|)) (and ($Is DatatypeTypeType |let#0_1_0#0#0| Tclass._module.Number) (= |next#6@0| |let#0_1_0#0#0|))) (and (=> (= (ControlFlow 0 6) (- 0 10)) ($Is intType (int_2_U (+ |n#1| 1)) Tclass._System.nat)) (=> ($Is intType (int_2_U (+ |n#1| 1)) Tclass._System.nat) (=> (= |n##1@0| (+ |n#1| 1)) (and (=> (= (ControlFlow 0 6) (- 0 9)) (or (|ORD#Less| |_k#0@@18| |_k#0@@18|) (and (= |_k#0@@18| |_k#0@@18|) (< (DtRank |next#6@0|) (DtRank |num#1@@1|))))) (=> (or (|ORD#Less| |_k#0@@18| |_k#0@@18|) (and (= |_k#0@@18| |_k#0@@18|) (< (DtRank |next#6@0|) (DtRank |num#1@@1|)))) (and (=> (= (ControlFlow 0 6) (- 0 8)) (=> (|_module.__default.InfinitePath_k#canCall| |next#6@0|) (or (_module.__default.InfinitePath_k ($LS $LZ) |next#6@0|) (=> (_module.Number.Succ_q |next#6@0|) (let ((|next#2@@2| (_module.Number._h4 |next#6@0|)))
(_module.__default.InfinitePath_k ($LS ($LS $LZ)) |next#2@@2|)))))) (=> (=> (|_module.__default.InfinitePath_k#canCall| |next#6@0|) (or (_module.__default.InfinitePath_k ($LS $LZ) |next#6@0|) (=> (_module.Number.Succ_q |next#6@0|) (let ((|next#2@@3| (_module.Number._h4 |next#6@0|)))
(_module.__default.InfinitePath_k ($LS ($LS $LZ)) |next#2@@3|))))) (and (=> (= (ControlFlow 0 6) (- 0 7)) (=> (|_module.__default.InfinitePath_k#canCall| |next#6@0|) (or (_module.__default.InfinitePath_k ($LS $LZ) |next#6@0|) (=> (not (_module.Number.Succ_q |next#6@0|)) (let ((|r#2@@2| (_module.Number._h5 |next#6@0|)))
(_module.__default.InfinitePath ($LS ($LS $LZ)) |r#2@@2|)))))) (=> (=> (|_module.__default.InfinitePath_k#canCall| |next#6@0|) (or (_module.__default.InfinitePath_k ($LS $LZ) |next#6@0|) (=> (not (_module.Number.Succ_q |next#6@0|)) (let ((|r#2@@3| (_module.Number._h5 |next#6@0|)))
(_module.__default.InfinitePath ($LS ($LS $LZ)) |r#2@@3|))))) (=> (and (and (and ($IsGoodHeap $Heap@2) ($IsHeapAnchor $Heap@2)) (and (|_module.__default.N2S_k#canCall| |n##1@0| |next#6@0|) (|_module.__default.IsNeverEndingStream_h#canCall| TInt |_k#0@@18| (_module.__default.N2S_k ($LS $LZ) |n##1@0| |next#6@0|)))) (and (and (|_module.__default.IsNeverEndingStream_h#canCall| TInt |_k#0@@18| (_module.__default.N2S_k ($LS $LZ) |n##1@0| |next#6@0|)) (and (_module.__default.IsNeverEndingStream_h TInt ($LS $LZ) |_k#0@@18| (_module.__default.N2S_k ($LS $LZ) |n##1@0| |next#6@0|)) (and (=> (< 0 (|ORD#Offset| |_k#0@@18|)) (ite (_module.Stream.Nil_q (_module.__default.N2S_k ($LS $LZ) |n##1@0| |next#6@0|)) false (let ((|tail#3@@1| (_module.Stream.tail (_module.__default.N2S_k ($LS $LZ) |n##1@0| |next#6@0|))))
(_module.__default.IsNeverEndingStream_h TInt ($LS $LZ) (|ORD#Minus| |_k#0@@18| (|ORD#FromNat| 1)) |tail#3@@1|)))) (=> (= (LitInt 0) (|ORD#Offset| |_k#0@@18|)) (forall ((|_k'#0@@6| T@U) ) (!  (=> (|ORD#Less| |_k'#0@@6| |_k#0@@18|) (_module.__default.IsNeverEndingStream_h TInt ($LS $LZ) |_k'#0@@6| (_module.__default.N2S_k ($LS $LZ) |n##1@0| |next#6@0|)))
 :pattern ( (_module.__default.IsNeverEndingStream_h TInt ($LS $LZ) |_k'#0@@6| (_module.__default.N2S_k ($LS $LZ) |n##1@0| |next#6@0|)))
)))))) (and (= $Heap@0 $Heap@2) (= (ControlFlow 0 6) 2)))) GeneratedUnifiedExit_correct)))))))))))))))
(let ((anon11_Then_correct  (=> (< 0 (|ORD#Offset| |_k#0@@18|)) (and (=> (= (ControlFlow 0 37) 6) anon12_Then_correct) (=> (= (ControlFlow 0 37) 36) anon12_Else_correct)))))
(let ((anon11_Else_correct  (=> (<= (|ORD#Offset| |_k#0@@18|) 0) (=> (and (and (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1)) (= $Heap@0 $Heap@1)) (and (forall ((|_k'#5| T@U) (|n#2| Int) (|num#2@@0| T@U) ) (!  (=> (and (and (<= (LitInt 0) |n#2|) ($Is DatatypeTypeType |num#2@@0| Tclass._module.Number)) (and (|ORD#Less| |_k'#5| |_k#0@@18|) (_module.__default.InfinitePath_k ($LS $LZ) |num#2@@0|))) (_module.__default.IsNeverEndingStream_h TInt ($LS $LZ) |_k'#5| (_module.__default.N2S_k ($LS $LZ) |n#2| |num#2@@0|)))
 :pattern ( (_module.__default.N2S_k ($LS $LZ) |n#2| |num#2@@0|) (|ORD#Less| |_k'#5| |_k#0@@18|))
)) (= (ControlFlow 0 5) 2))) GeneratedUnifiedExit_correct))))
(let ((anon0_correct  (=> (and (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (|$IsA#_module.Number| |num#1@@1|)) (=> (and (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (and (= $Heap $Heap@0) (forall ((|$ih#_k0#0| T@U) (|$ih#n0#0| Int) (|$ih#num0#0| T@U) ) (!  (=> (and (and (and (<= (LitInt 0) |$ih#n0#0|) ($Is DatatypeTypeType |$ih#num0#0| Tclass._module.Number)) (_module.__default.InfinitePath_k ($LS $LZ) |$ih#num0#0|)) (or (|ORD#Less| |$ih#_k0#0| |_k#0@@18|) (and (= |$ih#_k0#0| |_k#0@@18|) (< (DtRank |$ih#num0#0|) (DtRank |num#1@@1|))))) (_module.__default.IsNeverEndingStream_h TInt ($LS $LZ) |$ih#_k0#0| (_module.__default.N2S_k ($LS $LZ) |$ih#n0#0| |$ih#num0#0|)))
 :pattern ( (_module.__default.IsNeverEndingStream_h TInt ($LS $LZ) |$ih#_k0#0| (_module.__default.N2S_k ($LS $LZ) |$ih#n0#0| |$ih#num0#0|)))
)))) (and (=> (= (ControlFlow 0 38) 37) anon11_Then_correct) (=> (= (ControlFlow 0 38) 5) anon11_Else_correct))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (<= (LitInt 0) |n#1|)) (=> (and (and (and (and ($Is DatatypeTypeType |num#1@@1| Tclass._module.Number) ($IsAlloc DatatypeTypeType |num#1@@1| Tclass._module.Number $Heap)) (|$IsA#_module.Number| |num#1@@1|)) (= 3 $FunctionContextHeight)) (and (and (|_module.__default.InfinitePath_k#canCall| |num#1@@1|) (and (_module.__default.InfinitePath_k ($LS $LZ) |num#1@@1|) (ite (_module.Number.Succ_q |num#1@@1|) (let ((|next#5@@0| (_module.Number._h4 |num#1@@1|)))
(_module.__default.InfinitePath_k ($LS $LZ) |next#5@@0|)) (let ((|r#5@@0| (_module.Number._h5 |num#1@@1|)))
(_module.__default.InfinitePath ($LS $LZ) |r#5@@0|))))) (= (ControlFlow 0 39) 38))) anon0_correct))))
PreconditionGeneratedEntry_correct)))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
