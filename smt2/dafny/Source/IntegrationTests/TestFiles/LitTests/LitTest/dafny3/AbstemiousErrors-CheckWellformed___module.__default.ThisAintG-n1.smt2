(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 (T@U) T@U)
(declare-fun $generated@@22 () Int)
(declare-fun $generated@@23 (T@U) T@U)
(declare-fun $generated@@24 (T@U) T@U)
(declare-fun $generated@@25 () Bool)
(declare-fun $generated@@26 (T@T T@U) T@U)
(declare-fun $generated@@27 () T@T)
(declare-fun $generated@@29 (T@U) Bool)
(declare-fun $generated@@30 (T@T T@U T@U) Bool)
(declare-fun $generated@@31 (T@U) T@U)
(declare-fun $generated@@38 (T@U T@U) T@U)
(declare-fun $generated@@39 (T@U T@U) Bool)
(declare-fun $generated@@43 (T@U) T@U)
(declare-fun $generated@@45 (T@T T@U) T@U)
(declare-fun $generated@@46 (T@T T@U) T@U)
(declare-fun $generated@@52 (T@U) T@U)
(declare-fun $generated@@60 (T@U) T@U)
(declare-fun $generated@@63 (T@U) T@U)
(declare-fun $generated@@66 (T@U) T@U)
(declare-fun $generated@@70 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@71 () T@T)
(declare-fun $generated@@72 () T@T)
(declare-fun $generated@@73 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@74 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@75 () T@T)
(declare-fun $generated@@76 (T@T T@T) T@T)
(declare-fun $generated@@77 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@78 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@79 (T@T) T@T)
(declare-fun $generated@@80 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert (= ($generated@@21 $generated) $generated@@0))
(assert (= ($generated@@5 $generated@@27) 3))
(assert  (=> (<= 1 $generated@@22) (forall (($generated@@28 T@U) ) (!  (=> (or $generated@@25 (< 1 $generated@@22)) (and $generated@@25 (= ($generated@@23 ($generated@@24 $generated@@28)) ($generated@@26 $generated@@27 ($generated@@23 $generated@@28)))))
 :pattern ( ($generated@@23 ($generated@@24 $generated@@28)))
))))
(assert (forall (($generated@@32 T@U) ($generated@@33 T@U) ) (!  (=> ($generated@@30 $generated@@27 $generated@@33 ($generated@@31 $generated@@32)) ($generated@@29 $generated@@33))
 :pattern ( ($generated@@29 $generated@@33) ($generated@@30 $generated@@27 $generated@@33 ($generated@@31 $generated@@32)))
)))
(assert  (=> (<= 1 $generated@@22) (forall (($generated@@34 T@U) ) (!  (=> (or $generated@@25 (< 1 $generated@@22)) (and $generated@@25 (= ($generated@@23 ($generated@@24 $generated@@34)) ($generated@@26 $generated@@27 ($generated@@23 ($generated@@24 $generated@@34))))))
 :weight 3
 :pattern ( ($generated@@23 ($generated@@24 $generated@@34)))
))))
(assert  (=> (<= 1 $generated@@22) (forall (($generated@@35 T@U) ) (!  (=> (or $generated@@25 (< 1 $generated@@22)) ($generated@@30 $generated@@27 ($generated@@23 $generated@@35) ($generated@@31 $generated)))
 :pattern ( ($generated@@23 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ($generated@@37 T@T) ) (! (= ($generated@@26 $generated@@37 $generated@@36) $generated@@36)
 :pattern ( ($generated@@26 $generated@@37 $generated@@36))
)))
(assert (forall (($generated@@40 T@U) ($generated@@41 T@U) ($generated@@42 T@U) ) (! (= ($generated@@30 $generated@@27 ($generated@@38 $generated@@41 $generated@@42) ($generated@@31 $generated@@40))  (and ($generated@@39 $generated@@41 $generated@@40) ($generated@@30 $generated@@27 $generated@@42 ($generated@@31 $generated@@40))))
 :pattern ( ($generated@@30 $generated@@27 ($generated@@38 $generated@@41 $generated@@42) ($generated@@31 $generated@@40)))
)))
(assert (forall (($generated@@44 T@U) ) (! (= ($generated@@29 $generated@@44) (= ($generated@@43 $generated@@44) $generated@@3))
 :pattern ( ($generated@@29 $generated@@44))
)))
(assert (forall (($generated@@47 T@U) ($generated@@48 T@T) ) (! (= ($generated@@46 $generated@@48 ($generated@@45 $generated@@48 $generated@@47)) $generated@@47)
 :pattern ( ($generated@@45 $generated@@48 $generated@@47))
)))
(assert (forall (($generated@@49 T@U) ) (!  (=> ($generated@@29 $generated@@49) (exists (($generated@@50 T@U) ($generated@@51 T@U) ) (= $generated@@49 ($generated@@38 $generated@@50 $generated@@51))))
 :pattern ( ($generated@@29 $generated@@49))
)))
(assert (forall (($generated@@53 T@U) ) (!  (and (= ($generated@@21 ($generated@@31 $generated@@53)) $generated@@2) (= ($generated@@52 ($generated@@31 $generated@@53)) $generated@@4))
 :pattern ( ($generated@@31 $generated@@53))
)))
(assert (forall (($generated@@54 T@U) ) (!  (=> ($generated@@39 $generated@@54 $generated) (and (= ($generated@@46 $generated@@7 ($generated@@45 $generated@@7 $generated@@54)) $generated@@54) ($generated@@30 $generated@@7 ($generated@@45 $generated@@7 $generated@@54) $generated)))
 :pattern ( ($generated@@39 $generated@@54 $generated))
)))
(assert (forall (($generated@@55 T@U) ($generated@@56 T@U) ($generated@@57 T@T) ) (! (= ($generated@@39 ($generated@@46 $generated@@57 $generated@@55) $generated@@56) ($generated@@30 $generated@@57 $generated@@55 $generated@@56))
 :pattern ( ($generated@@39 ($generated@@46 $generated@@57 $generated@@55) $generated@@56))
)))
(assert (forall (($generated@@58 T@U) ($generated@@59 T@U) ) (! (= ($generated@@43 ($generated@@38 $generated@@58 $generated@@59)) $generated@@3)
 :pattern ( ($generated@@38 $generated@@58 $generated@@59))
)))
(assert (forall (($generated@@61 T@U) ($generated@@62 T@U) ) (! (= ($generated@@60 ($generated@@38 $generated@@61 $generated@@62)) $generated@@61)
 :pattern ( ($generated@@38 $generated@@61 $generated@@62))
)))
(assert (forall (($generated@@64 T@U) ($generated@@65 T@U) ) (! (= ($generated@@63 ($generated@@38 $generated@@64 $generated@@65)) $generated@@65)
 :pattern ( ($generated@@38 $generated@@64 $generated@@65))
)))
(assert (forall (($generated@@67 T@U) ) (! (= ($generated@@66 ($generated@@31 $generated@@67)) $generated@@67)
 :pattern ( ($generated@@31 $generated@@67))
)))
(assert (forall (($generated@@68 T@U) ($generated@@69 T@T) ) (! (= ($generated@@45 $generated@@69 ($generated@@46 $generated@@69 $generated@@68)) $generated@@68)
 :pattern ( ($generated@@46 $generated@@69 $generated@@68))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@81 T@T) ($generated@@82 T@T) ($generated@@83 T@T) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ) (! (= ($generated@@70 $generated@@81 $generated@@82 $generated@@83 ($generated@@77 $generated@@81 $generated@@82 $generated@@83 $generated@@85 $generated@@86 $generated@@87 $generated@@84) $generated@@86 $generated@@87) $generated@@84)
 :weight 0
)) (and (forall (($generated@@88 T@T) ($generated@@89 T@T) ($generated@@90 T@T) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ) (!  (or (= $generated@@93 $generated@@95) (= ($generated@@70 $generated@@88 $generated@@89 $generated@@90 ($generated@@77 $generated@@88 $generated@@89 $generated@@90 $generated@@92 $generated@@93 $generated@@94 $generated@@91) $generated@@95 $generated@@96) ($generated@@70 $generated@@88 $generated@@89 $generated@@90 $generated@@92 $generated@@95 $generated@@96)))
 :weight 0
)) (forall (($generated@@97 T@T) ($generated@@98 T@T) ($generated@@99 T@T) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ) (!  (or (= $generated@@103 $generated@@105) (= ($generated@@70 $generated@@97 $generated@@98 $generated@@99 ($generated@@77 $generated@@97 $generated@@98 $generated@@99 $generated@@101 $generated@@102 $generated@@103 $generated@@100) $generated@@104 $generated@@105) ($generated@@70 $generated@@97 $generated@@98 $generated@@99 $generated@@101 $generated@@104 $generated@@105)))
 :weight 0
)))) (= ($generated@@5 $generated@@71) 4)) (= ($generated@@5 $generated@@72) 5)) (forall (($generated@@106 T@T) ($generated@@107 T@T) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ) (! (= ($generated@@74 $generated@@106 $generated@@107 ($generated@@78 $generated@@106 $generated@@107 $generated@@109 $generated@@110 $generated@@108) $generated@@110) $generated@@108)
 :weight 0
))) (forall (($generated@@111 T@T) ($generated@@112 T@T) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ) (!  (or (= $generated@@115 $generated@@116) (= ($generated@@74 $generated@@111 $generated@@112 ($generated@@78 $generated@@111 $generated@@112 $generated@@114 $generated@@115 $generated@@113) $generated@@116) ($generated@@74 $generated@@111 $generated@@112 $generated@@114 $generated@@116)))
 :weight 0
))) (= ($generated@@5 $generated@@75) 6)) (forall (($generated@@117 T@T) ($generated@@118 T@T) ) (= ($generated@@5 ($generated@@76 $generated@@117 $generated@@118)) 7))) (forall (($generated@@119 T@T) ($generated@@120 T@T) ) (! (= ($generated@@79 ($generated@@76 $generated@@119 $generated@@120)) $generated@@119)
 :pattern ( ($generated@@76 $generated@@119 $generated@@120))
))) (forall (($generated@@121 T@T) ($generated@@122 T@T) ) (! (= ($generated@@80 ($generated@@76 $generated@@121 $generated@@122)) $generated@@122)
 :pattern ( ($generated@@76 $generated@@121 $generated@@122))
))))
(assert (forall (($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 Bool) ($generated@@127 T@U) ($generated@@128 T@U) ) (! (= ($generated@@10 ($generated@@70 $generated@@71 $generated@@72 $generated@@6 ($generated@@73 $generated@@123 $generated@@124 $generated@@125 $generated@@126) $generated@@127 $generated@@128))  (=> (and (or (not (= $generated@@127 $generated@@123)) (not true)) ($generated@@10 ($generated@@45 $generated@@6 ($generated@@74 $generated@@72 $generated@@75 ($generated@@74 $generated@@71 ($generated@@76 $generated@@72 $generated@@75) $generated@@124 $generated@@127) $generated@@125)))) $generated@@126))
 :pattern ( ($generated@@70 $generated@@71 $generated@@72 $generated@@6 ($generated@@73 $generated@@123 $generated@@124 $generated@@125 $generated@@126) $generated@@127 $generated@@128))
)))
(assert (forall (($generated@@129 T@U) ) (! (= ($generated@@23 ($generated@@24 $generated@@129)) ($generated@@23 $generated@@129))
 :pattern ( ($generated@@23 ($generated@@24 $generated@@129)))
)))
(assert (forall (($generated@@130 T@U) ($generated@@131 T@U) ) (!  (=> ($generated@@39 $generated@@131 ($generated@@31 $generated@@130)) (and (= ($generated@@46 $generated@@27 ($generated@@45 $generated@@27 $generated@@131)) $generated@@131) ($generated@@30 $generated@@27 ($generated@@45 $generated@@27 $generated@@131) ($generated@@31 $generated@@130))))
 :pattern ( ($generated@@39 $generated@@131 ($generated@@31 $generated@@130)))
)))
(assert (forall (($generated@@132 T@U) ($generated@@133 T@T) ) (! (= ($generated@@46 $generated@@133 ($generated@@26 $generated@@133 $generated@@132)) ($generated@@26 $generated@@75 ($generated@@46 $generated@@133 $generated@@132)))
 :pattern ( ($generated@@46 $generated@@133 ($generated@@26 $generated@@133 $generated@@132)))
)))
(assert (forall (($generated@@134 T@U) ) (! ($generated@@30 $generated@@7 $generated@@134 $generated)
 :pattern ( ($generated@@30 $generated@@7 $generated@@134 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@135 () T@U)
(declare-fun $generated@@136 () T@U)
(declare-fun $generated@@137 () T@U)
(declare-fun $generated@@138 (T@U) Bool)
(declare-fun $generated@@139 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 5) (let (($generated@@140  (=> (= (ControlFlow 0 3) (- 0 2)) false)))
(let (($generated@@141 true))
(let (($generated@@142  (=> (= $generated@@135 ($generated@@73 $generated@@136 $generated@@137 $generated@@1 false)) (and (=> (= (ControlFlow 0 4) 1) $generated@@141) (=> (= (ControlFlow 0 4) 3) $generated@@140)))))
(let (($generated@@143  (=> (and (and ($generated@@138 $generated@@137) ($generated@@139 $generated@@137)) (and (= 1 $generated@@22) (= (ControlFlow 0 5) 4))) $generated@@142)))
$generated@@143)))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 3) (- 2))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
