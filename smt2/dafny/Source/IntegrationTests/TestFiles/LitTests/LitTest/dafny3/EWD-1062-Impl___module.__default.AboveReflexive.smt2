(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (Bool) T@U)
(declare-fun $generated@@7 (T@U) Bool)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun $generated@@9 (T@U) Int)
(declare-fun $generated@@10 (Real) T@U)
(declare-fun $generated@@11 (T@U) Real)
(declare-fun $generated@@18 (T@U) T@U)
(declare-fun $generated@@19 () Int)
(declare-fun $generated@@20 (T@U T@U) Bool)
(declare-fun $generated@@21 (T@U T@U) Bool)
(declare-fun $generated@@22 (T@U T@U) Bool)
(declare-fun $generated@@23 () T@U)
(declare-fun $generated@@24 (T@U T@U) Bool)
(declare-fun $generated@@25 (T@U T@U) Bool)
(declare-fun $generated@@28 (T@U) Bool)
(declare-fun $generated@@29 (T@T T@U) T@U)
(declare-fun $generated@@32 (T@T T@U) T@U)
(declare-fun $generated@@33 (T@T T@U) T@U)
(declare-fun $generated@@36 (T@U) Bool)
(declare-fun $generated@@37 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun $generated@@38 () T@U)
(declare-fun $generated@@42 () T@U)
(declare-fun $generated@@46 (T@U T@U T@U) Bool)
(declare-fun $generated@@47 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@52 (T@T T@U T@U) Bool)
(declare-fun $generated@@68 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@69 () T@T)
(declare-fun $generated@@70 () T@T)
(declare-fun $generated@@71 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@72 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@73 () T@T)
(declare-fun $generated@@74 (T@T T@T) T@T)
(declare-fun $generated@@75 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@76 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@77 (T@T) T@T)
(declare-fun $generated@@78 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@4) 1)) (= ($generated@@2 $generated@@5) 2)) (forall (($generated@@12 Bool) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Int) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Real) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))))
(assert (distinct $generated $generated@@0 $generated@@1)
)
(assert (= ($generated@@18 $generated) $generated@@0))
(assert  (=> (<= 1 $generated@@19) (forall (($generated@@26 T@U) ($generated@@27 T@U) ) (!  (=> (or ($generated@@21 $generated@@26 $generated@@27) (and (< 1 $generated@@19) (and ($generated@@22 $generated@@26 $generated@@23) ($generated@@22 $generated@@27 $generated@@23)))) (and ($generated@@24 $generated@@27 $generated@@26) (= ($generated@@20 $generated@@26 $generated@@27) ($generated@@25 $generated@@27 $generated@@26))))
 :pattern ( ($generated@@20 $generated@@26 $generated@@27))
))))
(assert ($generated@@28 $generated@@23))
(assert (forall (($generated@@30 T@U) ($generated@@31 T@T) ) (! (= ($generated@@29 $generated@@31 $generated@@30) $generated@@30)
 :pattern ( ($generated@@29 $generated@@31 $generated@@30))
)))
(assert (forall (($generated@@34 T@U) ($generated@@35 T@T) ) (! (= ($generated@@33 $generated@@35 ($generated@@32 $generated@@35 $generated@@34)) $generated@@34)
 :pattern ( ($generated@@32 $generated@@35 $generated@@34))
)))
(assert (forall (($generated@@39 T@U) ($generated@@40 T@U) ($generated@@41 T@U) ) (! (= ($generated@@25 $generated@@40 $generated@@41) ($generated@@7 ($generated@@32 $generated@@3 ($generated@@37 $generated@@23 $generated@@23 $generated $generated@@39 $generated@@38 $generated@@40 $generated@@41))))
 :pattern ( ($generated@@25 $generated@@40 $generated@@41) ($generated@@36 $generated@@39))
)))
(assert (forall (($generated@@43 T@U) ($generated@@44 T@U) ($generated@@45 T@U) ) (! (= ($generated@@20 $generated@@44 $generated@@45) ($generated@@7 ($generated@@32 $generated@@3 ($generated@@37 $generated@@23 $generated@@23 $generated $generated@@43 $generated@@42 $generated@@44 $generated@@45))))
 :pattern ( ($generated@@20 $generated@@44 $generated@@45) ($generated@@36 $generated@@43))
)))
(assert (forall (($generated@@48 T@U) ($generated@@49 T@U) ($generated@@50 T@U) ($generated@@51 T@T) ) (! (= ($generated@@46 ($generated@@33 $generated@@51 $generated@@48) $generated@@49 $generated@@50) ($generated@@47 $generated@@51 $generated@@48 $generated@@49 $generated@@50))
 :pattern ( ($generated@@46 ($generated@@33 $generated@@51 $generated@@48) $generated@@49 $generated@@50))
)))
(assert (forall (($generated@@53 T@U) ) (!  (=> ($generated@@22 $generated@@53 $generated) (and (= ($generated@@33 $generated@@3 ($generated@@32 $generated@@3 $generated@@53)) $generated@@53) ($generated@@52 $generated@@3 ($generated@@32 $generated@@3 $generated@@53) $generated)))
 :pattern ( ($generated@@22 $generated@@53 $generated))
)))
(assert (forall (($generated@@54 T@U) ($generated@@55 T@U) ($generated@@56 T@T) ) (! (= ($generated@@22 ($generated@@33 $generated@@56 $generated@@54) $generated@@55) ($generated@@52 $generated@@56 $generated@@54 $generated@@55))
 :pattern ( ($generated@@22 ($generated@@33 $generated@@56 $generated@@54) $generated@@55))
)))
(assert (forall (($generated@@57 T@U) ) (!  (=> ($generated@@28 $generated@@57) (forall (($generated@@58 T@U) ($generated@@59 T@U) ) (!  (=> ($generated@@22 $generated@@59 $generated@@57) ($generated@@46 $generated@@59 $generated@@57 $generated@@58))
 :pattern ( ($generated@@46 $generated@@59 $generated@@57 $generated@@58))
)))
 :pattern ( ($generated@@28 $generated@@57))
)))
(assert (forall (($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@U) ) (! (= ($generated@@37 $generated@@23 $generated@@23 $generated $generated@@60 $generated@@38 $generated@@61 $generated@@62) ($generated@@33 $generated@@3 ($generated@@6 ($generated@@25 $generated@@61 $generated@@62))))
 :pattern ( ($generated@@37 $generated@@23 $generated@@23 $generated $generated@@60 $generated@@38 $generated@@61 $generated@@62))
)))
(assert (forall (($generated@@63 T@U) ($generated@@64 T@U) ($generated@@65 T@U) ) (! (= ($generated@@37 $generated@@23 $generated@@23 $generated $generated@@63 $generated@@42 $generated@@64 $generated@@65) ($generated@@33 $generated@@3 ($generated@@6 ($generated@@20 $generated@@64 $generated@@65))))
 :pattern ( ($generated@@37 $generated@@23 $generated@@23 $generated $generated@@63 $generated@@42 $generated@@64 $generated@@65))
)))
(assert (forall (($generated@@66 T@U) ($generated@@67 T@T) ) (! (= ($generated@@32 $generated@@67 ($generated@@33 $generated@@67 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@33 $generated@@67 $generated@@66))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@79 T@T) ($generated@@80 T@T) ($generated@@81 T@T) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ) (! (= ($generated@@68 $generated@@79 $generated@@80 $generated@@81 ($generated@@75 $generated@@79 $generated@@80 $generated@@81 $generated@@83 $generated@@84 $generated@@85 $generated@@82) $generated@@84 $generated@@85) $generated@@82)
 :weight 0
)) (and (forall (($generated@@86 T@T) ($generated@@87 T@T) ($generated@@88 T@T) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (!  (or (= $generated@@91 $generated@@93) (= ($generated@@68 $generated@@86 $generated@@87 $generated@@88 ($generated@@75 $generated@@86 $generated@@87 $generated@@88 $generated@@90 $generated@@91 $generated@@92 $generated@@89) $generated@@93 $generated@@94) ($generated@@68 $generated@@86 $generated@@87 $generated@@88 $generated@@90 $generated@@93 $generated@@94)))
 :weight 0
)) (forall (($generated@@95 T@T) ($generated@@96 T@T) ($generated@@97 T@T) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ) (!  (or (= $generated@@101 $generated@@103) (= ($generated@@68 $generated@@95 $generated@@96 $generated@@97 ($generated@@75 $generated@@95 $generated@@96 $generated@@97 $generated@@99 $generated@@100 $generated@@101 $generated@@98) $generated@@102 $generated@@103) ($generated@@68 $generated@@95 $generated@@96 $generated@@97 $generated@@99 $generated@@102 $generated@@103)))
 :weight 0
)))) (= ($generated@@2 $generated@@69) 3)) (= ($generated@@2 $generated@@70) 4)) (forall (($generated@@104 T@T) ($generated@@105 T@T) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ) (! (= ($generated@@72 $generated@@104 $generated@@105 ($generated@@76 $generated@@104 $generated@@105 $generated@@107 $generated@@108 $generated@@106) $generated@@108) $generated@@106)
 :weight 0
))) (forall (($generated@@109 T@T) ($generated@@110 T@T) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ) (!  (or (= $generated@@113 $generated@@114) (= ($generated@@72 $generated@@109 $generated@@110 ($generated@@76 $generated@@109 $generated@@110 $generated@@112 $generated@@113 $generated@@111) $generated@@114) ($generated@@72 $generated@@109 $generated@@110 $generated@@112 $generated@@114)))
 :weight 0
))) (= ($generated@@2 $generated@@73) 5)) (forall (($generated@@115 T@T) ($generated@@116 T@T) ) (= ($generated@@2 ($generated@@74 $generated@@115 $generated@@116)) 6))) (forall (($generated@@117 T@T) ($generated@@118 T@T) ) (! (= ($generated@@77 ($generated@@74 $generated@@117 $generated@@118)) $generated@@117)
 :pattern ( ($generated@@74 $generated@@117 $generated@@118))
))) (forall (($generated@@119 T@T) ($generated@@120 T@T) ) (! (= ($generated@@78 ($generated@@74 $generated@@119 $generated@@120)) $generated@@120)
 :pattern ( ($generated@@74 $generated@@119 $generated@@120))
))))
(assert (forall (($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 Bool) ($generated@@125 T@U) ($generated@@126 T@U) ) (! (= ($generated@@7 ($generated@@68 $generated@@69 $generated@@70 $generated@@3 ($generated@@71 $generated@@121 $generated@@122 $generated@@123 $generated@@124) $generated@@125 $generated@@126))  (=> (and (or (not (= $generated@@125 $generated@@121)) (not true)) ($generated@@7 ($generated@@32 $generated@@3 ($generated@@72 $generated@@70 $generated@@73 ($generated@@72 $generated@@69 ($generated@@74 $generated@@70 $generated@@73) $generated@@122 $generated@@125) $generated@@123)))) $generated@@124))
 :pattern ( ($generated@@68 $generated@@69 $generated@@70 $generated@@3 ($generated@@71 $generated@@121 $generated@@122 $generated@@123 $generated@@124) $generated@@125 $generated@@126))
)))
(assert  (=> (<= 1 $generated@@19) (forall (($generated@@127 T@U) ($generated@@128 T@U) ) (!  (=> (or ($generated@@21 ($generated@@29 $generated@@73 $generated@@127) ($generated@@29 $generated@@73 $generated@@128)) (and (< 1 $generated@@19) (and ($generated@@22 $generated@@127 $generated@@23) ($generated@@22 $generated@@128 $generated@@23)))) (and ($generated@@24 ($generated@@29 $generated@@73 $generated@@128) ($generated@@29 $generated@@73 $generated@@127)) (= ($generated@@20 ($generated@@29 $generated@@73 $generated@@127) ($generated@@29 $generated@@73 $generated@@128)) ($generated@@25 ($generated@@29 $generated@@73 $generated@@128) ($generated@@29 $generated@@73 $generated@@127)))))
 :weight 3
 :pattern ( ($generated@@20 ($generated@@29 $generated@@73 $generated@@127) ($generated@@29 $generated@@73 $generated@@128)))
))))
(assert (forall (($generated@@129 T@U) ($generated@@130 T@T) ) (! (= ($generated@@33 $generated@@130 ($generated@@29 $generated@@130 $generated@@129)) ($generated@@29 $generated@@73 ($generated@@33 $generated@@130 $generated@@129)))
 :pattern ( ($generated@@33 $generated@@130 ($generated@@29 $generated@@130 $generated@@129)))
)))
(assert (forall (($generated@@131 T@U) ($generated@@132 T@U) ) (! ($generated@@47 $generated@@3 $generated@@132 $generated $generated@@131)
 :pattern ( ($generated@@47 $generated@@3 $generated@@132 $generated $generated@@131))
)))
(assert (forall (($generated@@133 T@U) ) (! ($generated@@52 $generated@@3 $generated@@133 $generated)
 :pattern ( ($generated@@52 $generated@@3 $generated@@133 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@134 () T@U)
(declare-fun $generated@@135 () T@U)
(declare-fun $generated@@136 () T@U)
(declare-fun $generated@@137 () T@U)
(declare-fun $generated@@138 (T@U) Bool)
(declare-fun $generated@@139 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@140  (=> (= $generated@@134 ($generated@@71 $generated@@135 $generated@@136 $generated@@1 false)) (=> (and (and (and ($generated@@36 $generated@@137) ($generated@@138 $generated@@137)) (and ($generated@@24 $generated@@139 $generated@@139) ($generated@@25 $generated@@139 $generated@@139))) (and (and (= $generated@@136 $generated@@137) (= (ControlFlow 0 2) (- 0 1))) ($generated@@21 $generated@@139 $generated@@139))) (or ($generated@@20 $generated@@139 $generated@@139) ($generated@@25 $generated@@139 $generated@@139))))))
(let (($generated@@141  (=> (and ($generated@@36 $generated@@136) ($generated@@138 $generated@@136)) (=> (and (and ($generated@@22 $generated@@139 $generated@@23) ($generated@@46 $generated@@139 $generated@@23 $generated@@136)) (and (= 2 $generated@@19) (= (ControlFlow 0 3) 2))) $generated@@140))))
$generated@@141)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
