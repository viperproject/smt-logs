(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (Bool) T@U)
(declare-fun $generated@@7 (T@U) Bool)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun $generated@@9 (T@U) Int)
(declare-fun $generated@@10 (Real) T@U)
(declare-fun $generated@@11 (T@U) Real)
(declare-fun $generated@@18 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@19 () T@U)
(declare-fun $generated@@22 () Int)
(declare-fun $generated@@23 (Int) Int)
(declare-fun $generated@@24 (Int) Bool)
(declare-fun $generated@@25 (Int) Int)
(declare-fun $generated@@28 (T@T T@U) T@U)
(declare-fun $generated@@31 (T@T T@U) T@U)
(declare-fun $generated@@32 (T@T T@U) T@U)
(declare-fun $generated@@37 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@38 () T@T)
(declare-fun $generated@@39 () T@T)
(declare-fun $generated@@40 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@41 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@42 () T@T)
(declare-fun $generated@@43 (T@T T@T) T@T)
(declare-fun $generated@@44 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@45 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@46 (T@T) T@T)
(declare-fun $generated@@47 (T@T) T@T)
(declare-fun $generated@@96 (T@U) T@U)
(declare-fun $generated@@97 (T@U) T@U)
(declare-fun $generated@@101 () Bool)
(declare-fun $generated@@102 () Bool)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@4) 1)) (= ($generated@@2 $generated@@5) 2)) (forall (($generated@@12 Bool) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Int) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Real) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))))
(assert (distinct $generated $generated@@0 $generated@@1)
)
(assert (forall (($generated@@20 T@U) ($generated@@21 T@U) ) (! ($generated@@18 $generated@@4 $generated@@20 $generated@@19 $generated@@21)
 :pattern ( ($generated@@18 $generated@@4 $generated@@20 $generated@@19 $generated@@21))
)))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@26 Int) ) (!  (=> (or ($generated@@24 $generated@@26) (and (< 0 $generated@@22) (<= ($generated@@25 0) $generated@@26))) (<= ($generated@@25 0) ($generated@@23 $generated@@26)))
 :pattern ( ($generated@@23 $generated@@26))
))))
(assert (forall (($generated@@27 Int) ) (! (= ($generated@@25 $generated@@27) $generated@@27)
 :pattern ( ($generated@@25 $generated@@27))
)))
(assert (forall (($generated@@29 T@U) ($generated@@30 T@T) ) (! (= ($generated@@28 $generated@@30 $generated@@29) $generated@@29)
 :pattern ( ($generated@@28 $generated@@30 $generated@@29))
)))
(assert (forall (($generated@@33 T@U) ($generated@@34 T@T) ) (! (= ($generated@@32 $generated@@34 ($generated@@31 $generated@@34 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@31 $generated@@34 $generated@@33))
)))
(assert (forall (($generated@@35 T@U) ($generated@@36 T@T) ) (! (= ($generated@@31 $generated@@36 ($generated@@32 $generated@@36 $generated@@35)) $generated@@35)
 :pattern ( ($generated@@32 $generated@@36 $generated@@35))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@48 T@T) ($generated@@49 T@T) ($generated@@50 T@T) ($generated@@51 T@U) ($generated@@52 T@U) ($generated@@53 T@U) ($generated@@54 T@U) ) (! (= ($generated@@37 $generated@@48 $generated@@49 $generated@@50 ($generated@@44 $generated@@48 $generated@@49 $generated@@50 $generated@@52 $generated@@53 $generated@@54 $generated@@51) $generated@@53 $generated@@54) $generated@@51)
 :weight 0
)) (and (forall (($generated@@55 T@T) ($generated@@56 T@T) ($generated@@57 T@T) ($generated@@58 T@U) ($generated@@59 T@U) ($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@U) ) (!  (or (= $generated@@60 $generated@@62) (= ($generated@@37 $generated@@55 $generated@@56 $generated@@57 ($generated@@44 $generated@@55 $generated@@56 $generated@@57 $generated@@59 $generated@@60 $generated@@61 $generated@@58) $generated@@62 $generated@@63) ($generated@@37 $generated@@55 $generated@@56 $generated@@57 $generated@@59 $generated@@62 $generated@@63)))
 :weight 0
)) (forall (($generated@@64 T@T) ($generated@@65 T@T) ($generated@@66 T@T) ($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (!  (or (= $generated@@70 $generated@@72) (= ($generated@@37 $generated@@64 $generated@@65 $generated@@66 ($generated@@44 $generated@@64 $generated@@65 $generated@@66 $generated@@68 $generated@@69 $generated@@70 $generated@@67) $generated@@71 $generated@@72) ($generated@@37 $generated@@64 $generated@@65 $generated@@66 $generated@@68 $generated@@71 $generated@@72)))
 :weight 0
)))) (= ($generated@@2 $generated@@38) 3)) (= ($generated@@2 $generated@@39) 4)) (forall (($generated@@73 T@T) ($generated@@74 T@T) ($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (! (= ($generated@@41 $generated@@73 $generated@@74 ($generated@@45 $generated@@73 $generated@@74 $generated@@76 $generated@@77 $generated@@75) $generated@@77) $generated@@75)
 :weight 0
))) (forall (($generated@@78 T@T) ($generated@@79 T@T) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ) (!  (or (= $generated@@82 $generated@@83) (= ($generated@@41 $generated@@78 $generated@@79 ($generated@@45 $generated@@78 $generated@@79 $generated@@81 $generated@@82 $generated@@80) $generated@@83) ($generated@@41 $generated@@78 $generated@@79 $generated@@81 $generated@@83)))
 :weight 0
))) (= ($generated@@2 $generated@@42) 5)) (forall (($generated@@84 T@T) ($generated@@85 T@T) ) (= ($generated@@2 ($generated@@43 $generated@@84 $generated@@85)) 6))) (forall (($generated@@86 T@T) ($generated@@87 T@T) ) (! (= ($generated@@46 ($generated@@43 $generated@@86 $generated@@87)) $generated@@86)
 :pattern ( ($generated@@43 $generated@@86 $generated@@87))
))) (forall (($generated@@88 T@T) ($generated@@89 T@T) ) (! (= ($generated@@47 ($generated@@43 $generated@@88 $generated@@89)) $generated@@89)
 :pattern ( ($generated@@43 $generated@@88 $generated@@89))
))))
(assert (forall (($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 Bool) ($generated@@94 T@U) ($generated@@95 T@U) ) (! (= ($generated@@7 ($generated@@37 $generated@@38 $generated@@39 $generated@@3 ($generated@@40 $generated@@90 $generated@@91 $generated@@92 $generated@@93) $generated@@94 $generated@@95))  (=> (and (or (not (= $generated@@94 $generated@@90)) (not true)) ($generated@@7 ($generated@@31 $generated@@3 ($generated@@41 $generated@@39 $generated@@42 ($generated@@41 $generated@@38 ($generated@@43 $generated@@39 $generated@@42) $generated@@91 $generated@@94) $generated@@92)))) $generated@@93))
 :pattern ( ($generated@@37 $generated@@38 $generated@@39 $generated@@3 ($generated@@40 $generated@@90 $generated@@91 $generated@@92 $generated@@93) $generated@@94 $generated@@95))
)))
(assert (= ($generated@@96 $generated@@19) $generated@@0))
(assert (= ($generated@@97 $generated@@19) $generated@@1))
(assert (forall (($generated@@98 Int) ) (! (= ($generated@@32 $generated@@4 ($generated@@8 ($generated@@25 $generated@@98))) ($generated@@28 $generated@@42 ($generated@@32 $generated@@4 ($generated@@8 $generated@@98))))
 :pattern ( ($generated@@32 $generated@@4 ($generated@@8 ($generated@@25 $generated@@98))))
)))
(assert (forall (($generated@@99 T@U) ($generated@@100 T@T) ) (! (= ($generated@@32 $generated@@100 ($generated@@28 $generated@@100 $generated@@99)) ($generated@@28 $generated@@42 ($generated@@32 $generated@@100 $generated@@99)))
 :pattern ( ($generated@@32 $generated@@100 ($generated@@28 $generated@@100 $generated@@99)))
)))
(assert  (=> (<= 1 $generated@@22) (=> (or $generated@@101 (< 1 $generated@@22)) (and (forall (($generated@@103 Int) ($generated@@104 Int) ) (!  (=> (<= ($generated@@25 0) $generated@@103) (=> (= $generated@@104 (+ $generated@@103 1)) (and (and ($generated@@24 $generated@@103) ($generated@@24 ($generated@@23 $generated@@103))) ($generated@@24 $generated@@104))))
 :pattern ( ($generated@@23 $generated@@104) ($generated@@23 ($generated@@23 $generated@@103)))
)) (= $generated@@102 (forall (($generated@@105 Int) ($generated@@106 Int) ) (!  (=> (and (<= ($generated@@25 0) $generated@@105) (= $generated@@106 (+ $generated@@105 1))) (< ($generated@@23 ($generated@@23 $generated@@105)) ($generated@@23 $generated@@106)))
 :pattern ( ($generated@@23 $generated@@106) ($generated@@23 ($generated@@23 $generated@@105)))
)))))))
(assert  (=> (<= 1 $generated@@22) (=> (or $generated@@101 (< 1 $generated@@22)) (and (forall (($generated@@107 Int) ($generated@@108 Int) ) (!  (=> (<= ($generated@@25 0) $generated@@107) (=> (= $generated@@108 (+ $generated@@107 1)) (and (and ($generated@@24 $generated@@107) ($generated@@24 ($generated@@23 $generated@@107))) ($generated@@24 $generated@@108))))
 :pattern ( ($generated@@23 $generated@@108) ($generated@@23 ($generated@@23 $generated@@107)))
)) (= $generated@@102 (forall (($generated@@109 Int) ($generated@@110 Int) ) (!  (=> (and (<= ($generated@@25 0) $generated@@109) (= $generated@@110 (+ $generated@@109 1))) (< ($generated@@23 ($generated@@23 $generated@@109)) ($generated@@23 $generated@@110)))
 :pattern ( ($generated@@23 $generated@@110) ($generated@@23 ($generated@@23 $generated@@109)))
)))))))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@111 () Int)
(declare-fun $generated@@112 () T@U)
(declare-fun $generated@@113 (T@U) Bool)
(declare-fun $generated@@114 () T@U)
(declare-fun $generated@@115 (T@U) Bool)
(declare-fun $generated@@116 () T@U)
(declare-fun $generated@@117 () T@U)
(declare-fun $generated@@118 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 14) (let (($generated@@119  (=> (and (= ($generated@@23 $generated@@111) $generated@@111) (= (ControlFlow 0 11) (- 0 10))) (= ($generated@@23 $generated@@111) $generated@@111))))
(let (($generated@@120  (=> ($generated@@18 $generated@@4 ($generated@@8 $generated@@111) $generated@@19 $generated@@112) (=> (and ($generated@@24 $generated@@111) ($generated@@24 $generated@@111)) (and (=> (= (ControlFlow 0 7) (- 0 9)) (=> $generated@@101 (or ($generated@@7 ($generated@@28 $generated@@3 ($generated@@6 $generated@@102))) (forall (($generated@@121 Int) ($generated@@122 Int) ) (!  (=> (and (<= ($generated@@25 0) $generated@@121) (= $generated@@122 (+ $generated@@121 1))) (< ($generated@@23 ($generated@@23 $generated@@121)) ($generated@@23 $generated@@122)))
 :pattern ( ($generated@@23 $generated@@122) ($generated@@23 ($generated@@23 $generated@@121)))
))))) (=> (=> $generated@@101 (or ($generated@@7 ($generated@@28 $generated@@3 ($generated@@6 $generated@@102))) (forall (($generated@@123 Int) ($generated@@124 Int) ) (!  (=> (and (<= ($generated@@25 0) $generated@@123) (= $generated@@124 (+ $generated@@123 1))) (< ($generated@@23 ($generated@@23 $generated@@123)) ($generated@@23 $generated@@124)))
 :pattern ( ($generated@@23 $generated@@124) ($generated@@23 ($generated@@23 $generated@@123)))
)))) (=> (and (and (and ($generated@@113 $generated@@114) ($generated@@115 $generated@@114)) (=> (<= $generated@@111 $generated@@111) ($generated@@24 $generated@@111))) (and (=> (<= $generated@@111 $generated@@111) (<= $generated@@111 ($generated@@23 $generated@@111))) (= $generated@@112 $generated@@114))) (and (=> (= (ControlFlow 0 7) (- 0 8)) (=> $generated@@101 (or ($generated@@7 ($generated@@28 $generated@@3 ($generated@@6 $generated@@102))) (forall (($generated@@125 Int) ($generated@@126 Int) ) (!  (=> (and (<= ($generated@@25 0) $generated@@125) (= $generated@@126 (+ $generated@@125 1))) (< ($generated@@23 ($generated@@23 $generated@@125)) ($generated@@23 $generated@@126)))
 :pattern ( ($generated@@23 $generated@@126) ($generated@@23 ($generated@@23 $generated@@125)))
))))) (=> (=> $generated@@101 (or ($generated@@7 ($generated@@28 $generated@@3 ($generated@@6 $generated@@102))) (forall (($generated@@127 Int) ($generated@@128 Int) ) (!  (=> (and (<= ($generated@@25 0) $generated@@127) (= $generated@@128 (+ $generated@@127 1))) (< ($generated@@23 ($generated@@23 $generated@@127)) ($generated@@23 $generated@@128)))
 :pattern ( ($generated@@23 $generated@@128) ($generated@@23 ($generated@@23 $generated@@127)))
)))) (=> (and ($generated@@113 $generated@@116) ($generated@@115 $generated@@116)) (=> (and (and ($generated@@24 $generated@@111) (<= ($generated@@23 $generated@@111) $generated@@111)) (and (= $generated@@114 $generated@@116) (= (ControlFlow 0 7) (- 0 6)))) (= ($generated@@23 $generated@@111) $generated@@111))))))))))))
(let (($generated@@129 true))
(let (($generated@@130 true))
(let (($generated@@131  (=> (<= ($generated@@25 0) $generated@@111) (and (and (and (=> (= (ControlFlow 0 12) 4) $generated@@130) (=> (= (ControlFlow 0 12) 5) $generated@@129)) (=> (= (ControlFlow 0 12) 7) $generated@@120)) (=> (= (ControlFlow 0 12) 11) $generated@@119)))))
(let (($generated@@132  (=> (= (ControlFlow 0 2) (- 0 1)) (forall (($generated@@133 Int) ) (!  (=> (<= ($generated@@25 0) $generated@@133) (= ($generated@@23 $generated@@133) $generated@@133))
 :pattern ( ($generated@@23 $generated@@133))
)))))
(let (($generated@@134  (=> (and (forall (($generated@@135 Int) ) (!  (=> (and (<= ($generated@@25 0) $generated@@135) ($generated@@7 ($generated@@28 $generated@@3 ($generated@@6 true)))) (= ($generated@@23 $generated@@135) $generated@@135))
 :pattern ( ($generated@@23 $generated@@135))
)) (= (ControlFlow 0 3) 2)) $generated@@132)))
(let (($generated@@136  (=> (= $generated@@117 ($generated@@40 $generated@@118 $generated@@112 $generated false)) (and (=> (= (ControlFlow 0 13) 12) $generated@@131) (=> (= (ControlFlow 0 13) 3) $generated@@134)))))
(let (($generated@@137  (=> (and (and (and ($generated@@113 $generated@@112) ($generated@@115 $generated@@112)) (= 6 $generated@@22)) (and (and $generated@@101 (and ($generated@@7 ($generated@@28 $generated@@3 ($generated@@6 $generated@@102))) (forall (($generated@@138 Int) ($generated@@139 Int) ) (!  (=> (and (<= ($generated@@25 0) $generated@@138) (= $generated@@139 (+ $generated@@138 1))) (< ($generated@@23 ($generated@@23 $generated@@138)) ($generated@@23 $generated@@139)))
 :pattern ( ($generated@@23 $generated@@139) ($generated@@23 ($generated@@23 $generated@@138)))
)))) (= (ControlFlow 0 14) 13))) $generated@@136)))
$generated@@137))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
