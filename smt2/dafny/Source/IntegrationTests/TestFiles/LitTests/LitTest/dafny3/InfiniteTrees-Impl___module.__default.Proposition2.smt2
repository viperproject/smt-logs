(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun alloc () T@U)
(declare-fun Tagclass._module.Stream () T@U)
(declare-fun Tagclass._module.Tree () T@U)
(declare-fun |##_module.Stream.Nil| () T@U)
(declare-fun |##_module.Stream.Cons| () T@U)
(declare-fun |##_module.Tree.Node| () T@U)
(declare-fun tytagFamily$Stream () T@U)
(declare-fun tytagFamily$Tree () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun _module.__default.IsNeverEndingStream (T@U T@U T@U) Bool)
(declare-fun $LS (T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun |_module.__default.IsNeverEndingStream#canCall| (T@U T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun Tclass._module.Stream (T@U) T@U)
(declare-fun _module.Stream.Nil_q (T@U) Bool)
(declare-fun _module.Stream.tail (T@U) T@U)
(declare-fun |ORD#Less| (T@U T@U) Bool)
(declare-fun _module.__default.InfiniteHeightSomewhere__Bad (T@U T@U) Bool)
(declare-fun |_module.__default.InfiniteHeightSomewhere__Bad#canCall| (T@U) Bool)
(declare-fun Tclass._module.Tree () T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun _module.Stream.head (T@U) T@U)
(declare-fun _module.Tree.Node_q (T@U) Bool)
(declare-fun _module.Tree.children (T@U) T@U)
(declare-fun _module.__default.HasFiniteHeightEverywhere__Bad (T@U) Bool)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun |_module.__default.HasFiniteHeightEverywhere__Bad#canCall| (T@U) Bool)
(declare-fun $LZ () T@U)
(declare-fun |ORD#Minus| (T@U T@U) T@U)
(declare-fun |ORD#FromNat| (Int) T@U)
(declare-fun |ORD#Offset| (T@U) Int)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun |#_module.Stream.Nil| () T@U)
(declare-fun _module.__default.IsNeverEndingStream_h (T@U T@U T@U T@U) Bool)
(declare-fun |_module.__default.ATree#canCall| () Bool)
(declare-fun _module.__default.ATree () T@U)
(declare-fun LitInt (Int) Int)
(declare-fun |_module.__default.IsNeverEndingStream_h#canCall| (T@U T@U T@U) Bool)
(declare-fun |#_module.Stream.Cons| (T@U T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun _module.Stream.Cons_q (T@U) Bool)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun _module.__default.InfiniteHeightSomewhere__Bad_h (T@U T@U T@U) Bool)
(declare-fun |#_module.Tree.Node| (T@U) T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun |ORD#IsNat| (T@U) Bool)
(declare-fun BoxType () T@T)
(declare-fun |_module.__default.InfiniteHeightSomewhere__Bad_h#canCall| (T@U T@U) Bool)
(declare-fun _module.__default.ATreeChildren (T@U) T@U)
(declare-fun |_module.__default.ATreeChildren#canCall| () Bool)
(declare-fun Tclass._module.Stream_0 (T@U) T@U)
(declare-fun DtRank (T@U) Int)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct alloc Tagclass._module.Stream Tagclass._module.Tree |##_module.Stream.Nil| |##_module.Stream.Cons| |##_module.Tree.Node| tytagFamily$Stream tytagFamily$Tree)
)
(assert (forall ((_module._default.IsNeverEndingStream$S T@U) ($ly T@U) (|s#0| T@U) ) (! (= (_module.__default.IsNeverEndingStream _module._default.IsNeverEndingStream$S ($LS $ly) |s#0|) (_module.__default.IsNeverEndingStream _module._default.IsNeverEndingStream$S $ly |s#0|))
 :pattern ( (_module.__default.IsNeverEndingStream _module._default.IsNeverEndingStream$S ($LS $ly) |s#0|))
)))
(assert (= (Ctor DatatypeTypeType) 3))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module._default.IsNeverEndingStream$S@@0 T@U) ($ly@@0 T@U) (|s#0@@0| T@U) ) (!  (=> (or (|_module.__default.IsNeverEndingStream#canCall| _module._default.IsNeverEndingStream$S@@0 |s#0@@0|) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |s#0@@0| (Tclass._module.Stream _module._default.IsNeverEndingStream$S@@0)))) (and (=> (not (_module.Stream.Nil_q |s#0@@0|)) (let ((|tail#1| (_module.Stream.tail |s#0@@0|)))
(|_module.__default.IsNeverEndingStream#canCall| _module._default.IsNeverEndingStream$S@@0 |tail#1|))) (= (_module.__default.IsNeverEndingStream _module._default.IsNeverEndingStream$S@@0 ($LS $ly@@0) |s#0@@0|) (ite (_module.Stream.Nil_q |s#0@@0|) false (let ((|tail#0| (_module.Stream.tail |s#0@@0|)))
(_module.__default.IsNeverEndingStream _module._default.IsNeverEndingStream$S@@0 $ly@@0 |tail#0|))))))
 :pattern ( (_module.__default.IsNeverEndingStream _module._default.IsNeverEndingStream$S@@0 ($LS $ly@@0) |s#0@@0|))
))))
(assert (forall ((o T@U) (p T@U) (r T@U) ) (!  (=> (and (|ORD#Less| o p) (|ORD#Less| p r)) (|ORD#Less| o r))
 :pattern ( (|ORD#Less| o p) (|ORD#Less| p r))
 :pattern ( (|ORD#Less| o p) (|ORD#Less| o r))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($ly@@1 T@U) (|s#0@@1| T@U) ) (!  (=> (or (|_module.__default.InfiniteHeightSomewhere__Bad#canCall| |s#0@@1|) (and (< 2 $FunctionContextHeight) ($Is DatatypeTypeType |s#0@@1| (Tclass._module.Stream Tclass._module.Tree)))) (and (=> (not (_module.Stream.Nil_q |s#0@@1|)) (let ((|tail#1@@0| (_module.Stream.tail |s#0@@1|)))
(let ((|t#1| ($Unbox DatatypeTypeType (_module.Stream.head |s#0@@1|))))
 (and (and (_module.Tree.Node_q |t#1|) (|_module.__default.InfiniteHeightSomewhere__Bad#canCall| (_module.Tree.children |t#1|))) (=> (not (_module.__default.InfiniteHeightSomewhere__Bad $ly@@1 (_module.Tree.children |t#1|))) (|_module.__default.InfiniteHeightSomewhere__Bad#canCall| |tail#1@@0|)))))) (= (_module.__default.InfiniteHeightSomewhere__Bad ($LS $ly@@1) |s#0@@1|) (ite (_module.Stream.Nil_q |s#0@@1|) false (let ((|tail#0@@0| (_module.Stream.tail |s#0@@1|)))
(let ((|t#0| ($Unbox DatatypeTypeType (_module.Stream.head |s#0@@1|))))
 (or (_module.__default.InfiniteHeightSomewhere__Bad $ly@@1 (_module.Tree.children |t#0|)) (_module.__default.InfiniteHeightSomewhere__Bad $ly@@1 |tail#0@@0|))))))))
 :pattern ( (_module.__default.InfiniteHeightSomewhere__Bad ($LS $ly@@1) |s#0@@1|))
))))
(assert  (=> (<= 3 $FunctionContextHeight) (forall ((|t#0@@0| T@U) ) (!  (=> (or (|_module.__default.HasFiniteHeightEverywhere__Bad#canCall| (Lit DatatypeTypeType |t#0@@0|)) (and (< 3 $FunctionContextHeight) ($Is DatatypeTypeType |t#0@@0| Tclass._module.Tree))) (and (and (_module.Tree.Node_q (Lit DatatypeTypeType |t#0@@0|)) (|_module.__default.InfiniteHeightSomewhere__Bad#canCall| (Lit DatatypeTypeType (_module.Tree.children (Lit DatatypeTypeType |t#0@@0|))))) (= (_module.__default.HasFiniteHeightEverywhere__Bad (Lit DatatypeTypeType |t#0@@0|))  (not (U_2_bool (Lit boolType (bool_2_U (_module.__default.InfiniteHeightSomewhere__Bad ($LS $LZ) (Lit DatatypeTypeType (_module.Tree.children (Lit DatatypeTypeType |t#0@@0|)))))))))))
 :weight 3
 :pattern ( (_module.__default.HasFiniteHeightEverywhere__Bad (Lit DatatypeTypeType |t#0@@0|)))
))))
(assert (forall ((o@@0 T@U) (m Int) (n Int) ) (!  (=> (and (and (<= 0 m) (<= 0 n)) (<= (+ m n) (|ORD#Offset| o@@0))) (= (|ORD#Minus| (|ORD#Minus| o@@0 (|ORD#FromNat| m)) (|ORD#FromNat| n)) (|ORD#Minus| o@@0 (|ORD#FromNat| (+ m n)))))
 :pattern ( (|ORD#Minus| (|ORD#Minus| o@@0 (|ORD#FromNat| m)) (|ORD#FromNat| n)))
)))
(assert (= (DatatypeCtorId |#_module.Stream.Nil|) |##_module.Stream.Nil|))
(assert (forall ((d T@U) ) (!  (=> ($Is DatatypeTypeType d Tclass._module.Tree) (_module.Tree.Node_q d))
 :pattern ( (_module.Tree.Node_q d) ($Is DatatypeTypeType d Tclass._module.Tree))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|_module._default.IsNeverEndingStream#$S| T@U) ($ly@@2 T@U) (|s#0@@2| T@U) ) (!  (=> (and ($Is DatatypeTypeType |s#0@@2| (Tclass._module.Stream |_module._default.IsNeverEndingStream#$S|)) (_module.__default.IsNeverEndingStream |_module._default.IsNeverEndingStream#$S| ($LS $ly@@2) |s#0@@2|)) (forall ((|_k#0| T@U) ) (! (_module.__default.IsNeverEndingStream_h |_module._default.IsNeverEndingStream#$S| ($LS $ly@@2) |_k#0| |s#0@@2|)
 :pattern ( (_module.__default.IsNeverEndingStream_h |_module._default.IsNeverEndingStream#$S| ($LS $ly@@2) |_k#0| |s#0@@2|))
)))
 :pattern ( (_module.__default.IsNeverEndingStream |_module._default.IsNeverEndingStream#$S| ($LS $ly@@2) |s#0@@2|))
))))
(assert (forall ((_module.Stream$T T@U) ) (! ($Is DatatypeTypeType |#_module.Stream.Nil| (Tclass._module.Stream _module.Stream$T))
 :pattern ( ($Is DatatypeTypeType |#_module.Stream.Nil| (Tclass._module.Stream _module.Stream$T)))
)))
(assert  (=> (<= 3 $FunctionContextHeight) (=> (or |_module.__default.ATree#canCall| (< 3 $FunctionContextHeight)) ($Is DatatypeTypeType _module.__default.ATree Tclass._module.Tree))))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|_module._default.IsNeverEndingStream#$S@@0| T@U) ($ly@@3 T@U) (|s#0@@3| T@U) ) (!  (=> (and ($Is DatatypeTypeType |s#0@@3| (Tclass._module.Stream |_module._default.IsNeverEndingStream#$S@@0|)) (forall ((|_k#0@@0| T@U) ) (! (_module.__default.IsNeverEndingStream_h |_module._default.IsNeverEndingStream#$S@@0| ($LS $ly@@3) |_k#0@@0| |s#0@@3|)
 :pattern ( (_module.__default.IsNeverEndingStream_h |_module._default.IsNeverEndingStream#$S@@0| ($LS $ly@@3) |_k#0@@0| |s#0@@3|))
))) (_module.__default.IsNeverEndingStream |_module._default.IsNeverEndingStream#$S@@0| ($LS $ly@@3) |s#0@@3|))
 :pattern ( (_module.__default.IsNeverEndingStream |_module._default.IsNeverEndingStream#$S@@0| ($LS $ly@@3) |s#0@@3|))
))))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|_module._default.IsNeverEndingStream#$S@@1| T@U) ($ly@@4 T@U) (|_k#0@@1| T@U) (|s#0@@4| T@U) ) (!  (=> (or (|_module.__default.IsNeverEndingStream_h#canCall| |_module._default.IsNeverEndingStream#$S@@1| |_k#0@@1| |s#0@@4|) (and (< 2 $FunctionContextHeight) ($Is DatatypeTypeType |s#0@@4| (Tclass._module.Stream |_module._default.IsNeverEndingStream#$S@@1|)))) (and (and (=> (< 0 (|ORD#Offset| |_k#0@@1|)) (=> (not (_module.Stream.Nil_q |s#0@@4|)) (let ((|tail#3| (_module.Stream.tail |s#0@@4|)))
(|_module.__default.IsNeverEndingStream_h#canCall| |_module._default.IsNeverEndingStream#$S@@1| (|ORD#Minus| |_k#0@@1| (|ORD#FromNat| 1)) |tail#3|)))) (=> (=> (< 0 (|ORD#Offset| |_k#0@@1|)) (ite (_module.Stream.Nil_q |s#0@@4|) false (let ((|tail#4| (_module.Stream.tail |s#0@@4|)))
(_module.__default.IsNeverEndingStream_h |_module._default.IsNeverEndingStream#$S@@1| $ly@@4 (|ORD#Minus| |_k#0@@1| (|ORD#FromNat| 1)) |tail#4|)))) (=> (= (LitInt 0) (|ORD#Offset| |_k#0@@1|)) (forall ((|_k'#0| T@U) ) (!  (=> (|ORD#Less| |_k'#0| |_k#0@@1|) (|_module.__default.IsNeverEndingStream_h#canCall| |_module._default.IsNeverEndingStream#$S@@1| |_k'#0| |s#0@@4|))
 :pattern ( (_module.__default.IsNeverEndingStream_h |_module._default.IsNeverEndingStream#$S@@1| $ly@@4 |_k'#0| |s#0@@4|))
))))) (= (_module.__default.IsNeverEndingStream_h |_module._default.IsNeverEndingStream#$S@@1| ($LS $ly@@4) |_k#0@@1| |s#0@@4|)  (and (=> (< 0 (|ORD#Offset| |_k#0@@1|)) (ite (_module.Stream.Nil_q |s#0@@4|) false (let ((|tail#2| (_module.Stream.tail |s#0@@4|)))
(_module.__default.IsNeverEndingStream_h |_module._default.IsNeverEndingStream#$S@@1| $ly@@4 (|ORD#Minus| |_k#0@@1| (|ORD#FromNat| 1)) |tail#2|)))) (=> (= (LitInt 0) (|ORD#Offset| |_k#0@@1|)) (forall ((|_k'#0@@0| T@U) ) (!  (=> (|ORD#Less| |_k'#0@@0| |_k#0@@1|) (_module.__default.IsNeverEndingStream_h |_module._default.IsNeverEndingStream#$S@@1| $ly@@4 |_k'#0@@0| |s#0@@4|))
 :pattern ( (_module.__default.IsNeverEndingStream_h |_module._default.IsNeverEndingStream#$S@@1| $ly@@4 |_k'#0@@0| |s#0@@4|))
)))))))
 :pattern ( (_module.__default.IsNeverEndingStream_h |_module._default.IsNeverEndingStream#$S@@1| ($LS $ly@@4) |_k#0@@1| |s#0@@4|))
))))
(assert (forall ((_module.Stream$T@@0 T@U) (|a#5#0#0| T@U) (|a#5#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Stream.Cons| |a#5#0#0| |a#5#1#0|) (Tclass._module.Stream _module.Stream$T@@0))  (and ($IsBox |a#5#0#0| _module.Stream$T@@0) ($Is DatatypeTypeType |a#5#1#0| (Tclass._module.Stream _module.Stream$T@@0))))
 :pattern ( ($Is DatatypeTypeType (|#_module.Stream.Cons| |a#5#0#0| |a#5#1#0|) (Tclass._module.Stream _module.Stream$T@@0)))
)))
(assert (forall ((d@@0 T@U) ) (! (= (_module.Stream.Nil_q d@@0) (= (DatatypeCtorId d@@0) |##_module.Stream.Nil|))
 :pattern ( (_module.Stream.Nil_q d@@0))
)))
(assert (forall ((d@@1 T@U) ) (! (= (_module.Stream.Cons_q d@@1) (= (DatatypeCtorId d@@1) |##_module.Stream.Cons|))
 :pattern ( (_module.Stream.Cons_q d@@1))
)))
(assert (forall ((d@@2 T@U) ) (! (= (_module.Tree.Node_q d@@2) (= (DatatypeCtorId d@@2) |##_module.Tree.Node|))
 :pattern ( (_module.Tree.Node_q d@@2))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((d@@3 T@U) ) (!  (=> (_module.Stream.Cons_q d@@3) (exists ((|a#4#0#0| T@U) (|a#4#1#0| T@U) ) (= d@@3 (|#_module.Stream.Cons| |a#4#0#0| |a#4#1#0|))))
 :pattern ( (_module.Stream.Cons_q d@@3))
)))
(assert (forall ((d@@4 T@U) ) (!  (=> (_module.Stream.Nil_q d@@4) (= d@@4 |#_module.Stream.Nil|))
 :pattern ( (_module.Stream.Nil_q d@@4))
)))
(assert  (=> (<= 3 $FunctionContextHeight) (forall (($ly@@5 T@U) (|s#0@@5| T@U) (|_k#0@@2| T@U) ) (!  (=> (and ($Is DatatypeTypeType |s#0@@5| (Tclass._module.Stream Tclass._module.Tree)) (= |_k#0@@2| (|ORD#FromNat| 0))) (_module.__default.InfiniteHeightSomewhere__Bad_h $ly@@5 |_k#0@@2| |s#0@@5|))
 :pattern ( (_module.__default.InfiniteHeightSomewhere__Bad_h $ly@@5 |_k#0@@2| |s#0@@5|))
))))
(assert  (=> (<= 3 $FunctionContextHeight) (forall (($ly@@6 T@U) (|s#0@@6| T@U) ) (!  (=> (and ($Is DatatypeTypeType |s#0@@6| (Tclass._module.Stream Tclass._module.Tree)) (forall ((|_k#0@@3| T@U) ) (! (_module.__default.InfiniteHeightSomewhere__Bad_h ($LS $ly@@6) |_k#0@@3| |s#0@@6|)
 :pattern ( (_module.__default.InfiniteHeightSomewhere__Bad_h ($LS $ly@@6) |_k#0@@3| |s#0@@6|))
))) (_module.__default.InfiniteHeightSomewhere__Bad ($LS $ly@@6) |s#0@@6|))
 :pattern ( (_module.__default.InfiniteHeightSomewhere__Bad ($LS $ly@@6) |s#0@@6|))
))))
(assert (forall ((d@@5 T@U) ) (!  (=> (_module.Tree.Node_q d@@5) (exists ((|a#9#0#0| T@U) ) (= d@@5 (|#_module.Tree.Node| |a#9#0#0|))))
 :pattern ( (_module.Tree.Node_q d@@5))
)))
(assert (forall (($ly@@7 T@U) (|_k#0@@4| T@U) (|s#0@@7| T@U) ) (! (= (_module.__default.InfiniteHeightSomewhere__Bad_h ($LS $ly@@7) |_k#0@@4| |s#0@@7|) (_module.__default.InfiniteHeightSomewhere__Bad_h $ly@@7 |_k#0@@4| |s#0@@7|))
 :pattern ( (_module.__default.InfiniteHeightSomewhere__Bad_h ($LS $ly@@7) |_k#0@@4| |s#0@@7|))
)))
(assert (forall ((_module.Stream$T@@1 T@U) ) (!  (and (= (Tag (Tclass._module.Stream _module.Stream$T@@1)) Tagclass._module.Stream) (= (TagFamily (Tclass._module.Stream _module.Stream$T@@1)) tytagFamily$Stream))
 :pattern ( (Tclass._module.Stream _module.Stream$T@@1))
)))
(assert (forall ((o@@1 T@U) (p@@0 T@U) ) (!  (=> (and (|ORD#IsNat| p@@0) (<= (|ORD#Offset| p@@0) (|ORD#Offset| o@@1))) (and (= (|ORD#IsNat| (|ORD#Minus| o@@1 p@@0)) (|ORD#IsNat| o@@1)) (= (|ORD#Offset| (|ORD#Minus| o@@1 p@@0)) (- (|ORD#Offset| o@@1) (|ORD#Offset| p@@0)))))
 :pattern ( (|ORD#Minus| o@@1 p@@0))
)))
(assert (forall ((n@@0 Int) ) (!  (=> (<= 0 n@@0) (and (|ORD#IsNat| (|ORD#FromNat| n@@0)) (= (|ORD#Offset| (|ORD#FromNat| n@@0)) n@@0)))
 :pattern ( (|ORD#FromNat| n@@0))
)))
(assert  (=> (<= 3 $FunctionContextHeight) (forall (($ly@@8 T@U) (|s#0@@8| T@U) ) (!  (=> (and ($Is DatatypeTypeType |s#0@@8| (Tclass._module.Stream Tclass._module.Tree)) (_module.__default.InfiniteHeightSomewhere__Bad ($LS $ly@@8) |s#0@@8|)) (forall ((|_k#0@@5| T@U) ) (! (_module.__default.InfiniteHeightSomewhere__Bad_h ($LS $ly@@8) |_k#0@@5| |s#0@@8|)
 :pattern ( (_module.__default.InfiniteHeightSomewhere__Bad_h ($LS $ly@@8) |_k#0@@5| |s#0@@8|))
)))
 :pattern ( (_module.__default.InfiniteHeightSomewhere__Bad ($LS $ly@@8) |s#0@@8|))
))))
(assert (forall ((bx T@U) ) (!  (=> ($IsBox bx Tclass._module.Tree) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx)) bx) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx) Tclass._module.Tree)))
 :pattern ( ($IsBox bx Tclass._module.Tree))
)))
(assert  (=> (<= 3 $FunctionContextHeight) (forall ((|t#0@@1| T@U) ) (!  (=> (or (|_module.__default.HasFiniteHeightEverywhere__Bad#canCall| |t#0@@1|) (and (< 3 $FunctionContextHeight) ($Is DatatypeTypeType |t#0@@1| Tclass._module.Tree))) (and (and (_module.Tree.Node_q |t#0@@1|) (|_module.__default.InfiniteHeightSomewhere__Bad#canCall| (_module.Tree.children |t#0@@1|))) (= (_module.__default.HasFiniteHeightEverywhere__Bad |t#0@@1|)  (not (_module.__default.InfiniteHeightSomewhere__Bad ($LS $LZ) (_module.Tree.children |t#0@@1|))))))
 :pattern ( (_module.__default.HasFiniteHeightEverywhere__Bad |t#0@@1|))
))))
(assert (forall ((o@@2 T@U) (p@@1 T@U) ) (!  (or (or (|ORD#Less| o@@2 p@@1) (= o@@2 p@@1)) (|ORD#Less| p@@1 o@@2))
 :pattern ( (|ORD#Less| o@@2 p@@1) (|ORD#Less| p@@1 o@@2))
)))
(assert (forall ((|a#10#0#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Tree.Node| |a#10#0#0|) Tclass._module.Tree) ($Is DatatypeTypeType |a#10#0#0| (Tclass._module.Stream Tclass._module.Tree)))
 :pattern ( ($Is DatatypeTypeType (|#_module.Tree.Node| |a#10#0#0|) Tclass._module.Tree))
)))
(assert (= (Ctor BoxType) 4))
(assert  (=> (<= 3 $FunctionContextHeight) (forall (($ly@@9 T@U) (|_k#0@@6| T@U) (|s#0@@9| T@U) ) (!  (=> (or (|_module.__default.InfiniteHeightSomewhere__Bad_h#canCall| (Lit BoxType |_k#0@@6|) (Lit DatatypeTypeType |s#0@@9|)) (and (< 3 $FunctionContextHeight) ($Is DatatypeTypeType |s#0@@9| (Tclass._module.Stream Tclass._module.Tree)))) (and (and (=> (< 0 (|ORD#Offset| |_k#0@@6|)) (=> (not (U_2_bool (Lit boolType (bool_2_U (_module.Stream.Nil_q (Lit DatatypeTypeType |s#0@@9|)))))) (let ((|tail#9| (Lit DatatypeTypeType (_module.Stream.tail (Lit DatatypeTypeType |s#0@@9|)))))
(let ((|t#9| (Lit DatatypeTypeType ($Unbox DatatypeTypeType (_module.Stream.head (Lit DatatypeTypeType |s#0@@9|))))))
 (and (and (_module.Tree.Node_q |t#9|) (|_module.__default.InfiniteHeightSomewhere__Bad_h#canCall| (|ORD#Minus| |_k#0@@6| (|ORD#FromNat| 1)) (_module.Tree.children |t#9|))) (=> (not (_module.__default.InfiniteHeightSomewhere__Bad_h ($LS $ly@@9) (|ORD#Minus| |_k#0@@6| (|ORD#FromNat| 1)) (_module.Tree.children |t#9|))) (|_module.__default.InfiniteHeightSomewhere__Bad_h#canCall| (|ORD#Minus| |_k#0@@6| (|ORD#FromNat| 1)) |tail#9|))))))) (=> (=> (< 0 (|ORD#Offset| |_k#0@@6|)) (ite (_module.Stream.Nil_q (Lit DatatypeTypeType |s#0@@9|)) false (let ((|tail#10| (Lit DatatypeTypeType (_module.Stream.tail (Lit DatatypeTypeType |s#0@@9|)))))
(let ((|t#10| (Lit DatatypeTypeType ($Unbox DatatypeTypeType (_module.Stream.head (Lit DatatypeTypeType |s#0@@9|))))))
 (or (_module.__default.InfiniteHeightSomewhere__Bad_h ($LS $ly@@9) (|ORD#Minus| |_k#0@@6| (|ORD#FromNat| 1)) (Lit DatatypeTypeType (_module.Tree.children |t#10|))) (_module.__default.InfiniteHeightSomewhere__Bad_h ($LS $ly@@9) (|ORD#Minus| |_k#0@@6| (|ORD#FromNat| 1)) |tail#10|)))))) (=> (= (LitInt 0) (|ORD#Offset| |_k#0@@6|)) (forall ((|_k'#2| T@U) ) (!  (=> (|ORD#Less| |_k'#2| |_k#0@@6|) (|_module.__default.InfiniteHeightSomewhere__Bad_h#canCall| |_k'#2| |s#0@@9|))
 :pattern ( (_module.__default.InfiniteHeightSomewhere__Bad_h ($LS $ly@@9) |_k'#2| |s#0@@9|))
))))) (= (_module.__default.InfiniteHeightSomewhere__Bad_h ($LS $ly@@9) (Lit BoxType |_k#0@@6|) (Lit DatatypeTypeType |s#0@@9|))  (and (=> (< 0 (|ORD#Offset| |_k#0@@6|)) (ite (_module.Stream.Nil_q (Lit DatatypeTypeType |s#0@@9|)) false (let ((|tail#8| (Lit DatatypeTypeType (_module.Stream.tail (Lit DatatypeTypeType |s#0@@9|)))))
(let ((|t#8| (Lit DatatypeTypeType ($Unbox DatatypeTypeType (_module.Stream.head (Lit DatatypeTypeType |s#0@@9|))))))
 (or (_module.__default.InfiniteHeightSomewhere__Bad_h ($LS $ly@@9) (|ORD#Minus| |_k#0@@6| (|ORD#FromNat| 1)) (Lit DatatypeTypeType (_module.Tree.children |t#8|))) (_module.__default.InfiniteHeightSomewhere__Bad_h ($LS $ly@@9) (|ORD#Minus| |_k#0@@6| (|ORD#FromNat| 1)) |tail#8|)))))) (=> (= (LitInt 0) (|ORD#Offset| |_k#0@@6|)) (forall ((|_k'#2@@0| T@U) ) (!  (=> (|ORD#Less| |_k'#2@@0| |_k#0@@6|) (_module.__default.InfiniteHeightSomewhere__Bad_h ($LS $ly@@9) |_k'#2@@0| |s#0@@9|))
 :pattern ( (_module.__default.InfiniteHeightSomewhere__Bad_h ($LS $ly@@9) |_k'#2@@0| |s#0@@9|))
)))))))
 :weight 3
 :pattern ( (_module.__default.InfiniteHeightSomewhere__Bad_h ($LS $ly@@9) (Lit BoxType |_k#0@@6|) (Lit DatatypeTypeType |s#0@@9|)))
))))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($ly@@10 T@U) ) (!  (=> (or |_module.__default.ATreeChildren#canCall| (< 2 $FunctionContextHeight)) (and |_module.__default.ATreeChildren#canCall| (= (_module.__default.ATreeChildren ($LS $ly@@10)) (Lit DatatypeTypeType (|#_module.Stream.Cons| ($Box DatatypeTypeType (Lit DatatypeTypeType (|#_module.Tree.Node| (Lit DatatypeTypeType |#_module.Stream.Nil|)))) (Lit DatatypeTypeType (_module.__default.ATreeChildren $ly@@10)))))))
 :pattern ( (_module.__default.ATreeChildren ($LS $ly@@10)))
))))
(assert (forall ((_module.Stream$T@@2 T@U) (d@@6 T@U) ) (!  (=> ($Is DatatypeTypeType d@@6 (Tclass._module.Stream _module.Stream$T@@2)) (or (_module.Stream.Nil_q d@@6) (_module.Stream.Cons_q d@@6)))
 :pattern ( (_module.Stream.Cons_q d@@6) ($Is DatatypeTypeType d@@6 (Tclass._module.Stream _module.Stream$T@@2)))
 :pattern ( (_module.Stream.Nil_q d@@6) ($Is DatatypeTypeType d@@6 (Tclass._module.Stream _module.Stream$T@@2)))
)))
(assert (forall (($ly@@11 T@U) (|s#0@@10| T@U) ) (! (= (_module.__default.InfiniteHeightSomewhere__Bad ($LS $ly@@11) |s#0@@10|) (_module.__default.InfiniteHeightSomewhere__Bad $ly@@11 |s#0@@10|))
 :pattern ( (_module.__default.InfiniteHeightSomewhere__Bad ($LS $ly@@11) |s#0@@10|))
)))
(assert (forall ((v T@U) (t T@U) (T@@1 T@T) ) (! (= ($IsBox ($Box T@@1 v) t) ($Is T@@1 v t))
 :pattern ( ($IsBox ($Box T@@1 v) t))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|_module._default.IsNeverEndingStream#$S@@2| T@U) ($ly@@12 T@U) (|s#0@@11| T@U) (|_k#0@@7| T@U) ) (!  (=> (and ($Is DatatypeTypeType |s#0@@11| (Tclass._module.Stream |_module._default.IsNeverEndingStream#$S@@2|)) (= |_k#0@@7| (|ORD#FromNat| 0))) (_module.__default.IsNeverEndingStream_h |_module._default.IsNeverEndingStream#$S@@2| $ly@@12 |_k#0@@7| |s#0@@11|))
 :pattern ( (_module.__default.IsNeverEndingStream_h |_module._default.IsNeverEndingStream#$S@@2| $ly@@12 |_k#0@@7| |s#0@@11|))
))))
(assert (forall ((o@@3 T@U) ) (! (<= 0 (|ORD#Offset| o@@3))
 :pattern ( (|ORD#Offset| o@@3))
)))
(assert  (=> (<= 3 $FunctionContextHeight) (=> (or |_module.__default.ATree#canCall| (< 3 $FunctionContextHeight)) (and |_module.__default.ATreeChildren#canCall| (= _module.__default.ATree (Lit DatatypeTypeType (|#_module.Tree.Node| (Lit DatatypeTypeType (_module.__default.ATreeChildren ($LS $LZ))))))))))
(assert  (=> (<= 3 $FunctionContextHeight) (=> (or |_module.__default.ATree#canCall| (< 3 $FunctionContextHeight)) (and |_module.__default.ATreeChildren#canCall| (= _module.__default.ATree (Lit DatatypeTypeType (|#_module.Tree.Node| (Lit DatatypeTypeType (_module.__default.ATreeChildren ($LS $LZ))))))))))
(assert (forall ((|a#3#0#0| T@U) (|a#3#1#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Stream.Cons| |a#3#0#0| |a#3#1#0|)) |##_module.Stream.Cons|)
 :pattern ( (|#_module.Stream.Cons| |a#3#0#0| |a#3#1#0|))
)))
(assert (forall ((|a#6#0#0| T@U) (|a#6#1#0| T@U) ) (! (= (_module.Stream.head (|#_module.Stream.Cons| |a#6#0#0| |a#6#1#0|)) |a#6#0#0|)
 :pattern ( (|#_module.Stream.Cons| |a#6#0#0| |a#6#1#0|))
)))
(assert (forall ((|a#7#0#0| T@U) (|a#7#1#0| T@U) ) (! (= (_module.Stream.tail (|#_module.Stream.Cons| |a#7#0#0| |a#7#1#0|)) |a#7#1#0|)
 :pattern ( (|#_module.Stream.Cons| |a#7#0#0| |a#7#1#0|))
)))
(assert (forall ((_module.Stream$T@@3 T@U) ) (! (= (Tclass._module.Stream_0 (Tclass._module.Stream _module.Stream$T@@3)) _module.Stream$T@@3)
 :pattern ( (Tclass._module.Stream _module.Stream$T@@3))
)))
(assert (forall ((|a#8#0#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Tree.Node| |a#8#0#0|)) |##_module.Tree.Node|)
 :pattern ( (|#_module.Tree.Node| |a#8#0#0|))
)))
(assert (forall ((|a#12#0#0| T@U) ) (! (= (_module.Tree.children (|#_module.Tree.Node| |a#12#0#0|)) |a#12#0#0|)
 :pattern ( (|#_module.Tree.Node| |a#12#0#0|))
)))
(assert (forall ((x@@5 T@U) (T@@2 T@T) ) (! (= ($Unbox T@@2 ($Box T@@2 x@@5)) x@@5)
 :pattern ( ($Box T@@2 x@@5))
)))
(assert (forall ((o@@4 T@U) (p@@2 T@U) ) (!  (and (and (and (=> (|ORD#Less| o@@4 p@@2) (or (not (= o@@4 p@@2)) (not true))) (=> (and (|ORD#IsNat| o@@4) (not (|ORD#IsNat| p@@2))) (|ORD#Less| o@@4 p@@2))) (=> (and (|ORD#IsNat| o@@4) (|ORD#IsNat| p@@2)) (= (|ORD#Less| o@@4 p@@2) (< (|ORD#Offset| o@@4) (|ORD#Offset| p@@2))))) (=> (and (|ORD#Less| o@@4 p@@2) (|ORD#IsNat| p@@2)) (|ORD#IsNat| o@@4)))
 :pattern ( (|ORD#Less| o@@4 p@@2))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|_module._default.IsNeverEndingStream#$S@@3| T@U) ($ly@@13 T@U) (|_k#0@@8| T@U) (|s#0@@12| T@U) ) (!  (=> (or (|_module.__default.IsNeverEndingStream_h#canCall| |_module._default.IsNeverEndingStream#$S@@3| (Lit BoxType |_k#0@@8|) |s#0@@12|) (and (< 2 $FunctionContextHeight) ($Is DatatypeTypeType |s#0@@12| (Tclass._module.Stream |_module._default.IsNeverEndingStream#$S@@3|)))) (and (and (=> (< 0 (|ORD#Offset| |_k#0@@8|)) (=> (not (_module.Stream.Nil_q |s#0@@12|)) (let ((|tail#6| (_module.Stream.tail |s#0@@12|)))
(|_module.__default.IsNeverEndingStream_h#canCall| |_module._default.IsNeverEndingStream#$S@@3| (|ORD#Minus| |_k#0@@8| (|ORD#FromNat| 1)) |tail#6|)))) (=> (=> (< 0 (|ORD#Offset| |_k#0@@8|)) (ite (_module.Stream.Nil_q |s#0@@12|) false (let ((|tail#7| (_module.Stream.tail |s#0@@12|)))
(_module.__default.IsNeverEndingStream_h |_module._default.IsNeverEndingStream#$S@@3| ($LS $ly@@13) (|ORD#Minus| |_k#0@@8| (|ORD#FromNat| 1)) |tail#7|)))) (=> (= (LitInt 0) (|ORD#Offset| |_k#0@@8|)) (forall ((|_k'#1| T@U) ) (!  (=> (|ORD#Less| |_k'#1| |_k#0@@8|) (|_module.__default.IsNeverEndingStream_h#canCall| |_module._default.IsNeverEndingStream#$S@@3| |_k'#1| |s#0@@12|))
 :pattern ( (_module.__default.IsNeverEndingStream_h |_module._default.IsNeverEndingStream#$S@@3| ($LS $ly@@13) |_k'#1| |s#0@@12|))
))))) (= (_module.__default.IsNeverEndingStream_h |_module._default.IsNeverEndingStream#$S@@3| ($LS $ly@@13) (Lit BoxType |_k#0@@8|) |s#0@@12|)  (and (=> (< 0 (|ORD#Offset| |_k#0@@8|)) (ite (_module.Stream.Nil_q |s#0@@12|) false (let ((|tail#5| (_module.Stream.tail |s#0@@12|)))
(_module.__default.IsNeverEndingStream_h |_module._default.IsNeverEndingStream#$S@@3| ($LS $ly@@13) (|ORD#Minus| |_k#0@@8| (|ORD#FromNat| 1)) |tail#5|)))) (=> (= (LitInt 0) (|ORD#Offset| |_k#0@@8|)) (forall ((|_k'#1@@0| T@U) ) (!  (=> (|ORD#Less| |_k'#1@@0| |_k#0@@8|) (_module.__default.IsNeverEndingStream_h |_module._default.IsNeverEndingStream#$S@@3| ($LS $ly@@13) |_k'#1@@0| |s#0@@12|))
 :pattern ( (_module.__default.IsNeverEndingStream_h |_module._default.IsNeverEndingStream#$S@@3| ($LS $ly@@13) |_k'#1@@0| |s#0@@12|))
)))))))
 :weight 3
 :pattern ( (_module.__default.IsNeverEndingStream_h |_module._default.IsNeverEndingStream#$S@@3| ($LS $ly@@13) (Lit BoxType |_k#0@@8|) |s#0@@12|))
))))
(assert  (=> (<= 3 $FunctionContextHeight) (forall (($ly@@14 T@U) (|_k#0@@9| T@U) (|s#0@@13| T@U) ) (!  (=> (or (|_module.__default.InfiniteHeightSomewhere__Bad_h#canCall| (Lit BoxType |_k#0@@9|) |s#0@@13|) (and (< 3 $FunctionContextHeight) ($Is DatatypeTypeType |s#0@@13| (Tclass._module.Stream Tclass._module.Tree)))) (and (and (=> (< 0 (|ORD#Offset| |_k#0@@9|)) (=> (not (_module.Stream.Nil_q |s#0@@13|)) (let ((|tail#6@@0| (_module.Stream.tail |s#0@@13|)))
(let ((|t#6| ($Unbox DatatypeTypeType (_module.Stream.head |s#0@@13|))))
 (and (and (_module.Tree.Node_q |t#6|) (|_module.__default.InfiniteHeightSomewhere__Bad_h#canCall| (|ORD#Minus| |_k#0@@9| (|ORD#FromNat| 1)) (_module.Tree.children |t#6|))) (=> (not (_module.__default.InfiniteHeightSomewhere__Bad_h ($LS $ly@@14) (|ORD#Minus| |_k#0@@9| (|ORD#FromNat| 1)) (_module.Tree.children |t#6|))) (|_module.__default.InfiniteHeightSomewhere__Bad_h#canCall| (|ORD#Minus| |_k#0@@9| (|ORD#FromNat| 1)) |tail#6@@0|))))))) (=> (=> (< 0 (|ORD#Offset| |_k#0@@9|)) (ite (_module.Stream.Nil_q |s#0@@13|) false (let ((|tail#7@@0| (_module.Stream.tail |s#0@@13|)))
(let ((|t#7| ($Unbox DatatypeTypeType (_module.Stream.head |s#0@@13|))))
 (or (_module.__default.InfiniteHeightSomewhere__Bad_h ($LS $ly@@14) (|ORD#Minus| |_k#0@@9| (|ORD#FromNat| 1)) (_module.Tree.children |t#7|)) (_module.__default.InfiniteHeightSomewhere__Bad_h ($LS $ly@@14) (|ORD#Minus| |_k#0@@9| (|ORD#FromNat| 1)) |tail#7@@0|)))))) (=> (= (LitInt 0) (|ORD#Offset| |_k#0@@9|)) (forall ((|_k'#1@@1| T@U) ) (!  (=> (|ORD#Less| |_k'#1@@1| |_k#0@@9|) (|_module.__default.InfiniteHeightSomewhere__Bad_h#canCall| |_k'#1@@1| |s#0@@13|))
 :pattern ( (_module.__default.InfiniteHeightSomewhere__Bad_h ($LS $ly@@14) |_k'#1@@1| |s#0@@13|))
))))) (= (_module.__default.InfiniteHeightSomewhere__Bad_h ($LS $ly@@14) (Lit BoxType |_k#0@@9|) |s#0@@13|)  (and (=> (< 0 (|ORD#Offset| |_k#0@@9|)) (ite (_module.Stream.Nil_q |s#0@@13|) false (let ((|tail#5@@0| (_module.Stream.tail |s#0@@13|)))
(let ((|t#5| ($Unbox DatatypeTypeType (_module.Stream.head |s#0@@13|))))
 (or (_module.__default.InfiniteHeightSomewhere__Bad_h ($LS $ly@@14) (|ORD#Minus| |_k#0@@9| (|ORD#FromNat| 1)) (_module.Tree.children |t#5|)) (_module.__default.InfiniteHeightSomewhere__Bad_h ($LS $ly@@14) (|ORD#Minus| |_k#0@@9| (|ORD#FromNat| 1)) |tail#5@@0|)))))) (=> (= (LitInt 0) (|ORD#Offset| |_k#0@@9|)) (forall ((|_k'#1@@2| T@U) ) (!  (=> (|ORD#Less| |_k'#1@@2| |_k#0@@9|) (_module.__default.InfiniteHeightSomewhere__Bad_h ($LS $ly@@14) |_k'#1@@2| |s#0@@13|))
 :pattern ( (_module.__default.InfiniteHeightSomewhere__Bad_h ($LS $ly@@14) |_k'#1@@2| |s#0@@13|))
)))))))
 :weight 3
 :pattern ( (_module.__default.InfiniteHeightSomewhere__Bad_h ($LS $ly@@14) (Lit BoxType |_k#0@@9|) |s#0@@13|))
))))
(assert (forall ((|_module._default.IsNeverEndingStream#$S@@4| T@U) ($ly@@15 T@U) (|_k#0@@10| T@U) (|s#0@@14| T@U) ) (! (= (_module.__default.IsNeverEndingStream_h |_module._default.IsNeverEndingStream#$S@@4| ($LS $ly@@15) |_k#0@@10| |s#0@@14|) (_module.__default.IsNeverEndingStream_h |_module._default.IsNeverEndingStream#$S@@4| $ly@@15 |_k#0@@10| |s#0@@14|))
 :pattern ( (_module.__default.IsNeverEndingStream_h |_module._default.IsNeverEndingStream#$S@@4| ($LS $ly@@15) |_k#0@@10| |s#0@@14|))
)))
(assert (forall ((|a#13#0#0| T@U) ) (! (< (DtRank |a#13#0#0|) (DtRank (|#_module.Tree.Node| |a#13#0#0|)))
 :pattern ( (|#_module.Tree.Node| |a#13#0#0|))
)))
(assert  (and (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (t2 T@T) (val T@U) (m@@0 T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0 t1 t2 (MapType0Store t0 t1 t2 m@@0 x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@1 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@1 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@1 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@2 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@2 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@2 y0@@0 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 5)) (= (Ctor FieldType) 6)) (forall ((t0@@0 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@3 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 (MapType1Store t0@@0 t1@@0 m@@3 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@4 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@4 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@4 y0@@1)))
 :weight 0
))) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall (($ly@@16 T@U) ) (! (= (_module.__default.ATreeChildren ($LS $ly@@16)) (_module.__default.ATreeChildren $ly@@16))
 :pattern ( (_module.__default.ATreeChildren ($LS $ly@@16)))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|_module._default.IsNeverEndingStream#$S@@5| T@U) ($ly@@17 T@U) (|_k#0@@11| T@U) (|s#0@@15| T@U) ) (!  (=> (or (|_module.__default.IsNeverEndingStream_h#canCall| |_module._default.IsNeverEndingStream#$S@@5| (Lit BoxType |_k#0@@11|) (Lit DatatypeTypeType |s#0@@15|)) (and (< 2 $FunctionContextHeight) ($Is DatatypeTypeType |s#0@@15| (Tclass._module.Stream |_module._default.IsNeverEndingStream#$S@@5|)))) (and (and (=> (< 0 (|ORD#Offset| |_k#0@@11|)) (=> (not (U_2_bool (Lit boolType (bool_2_U (_module.Stream.Nil_q (Lit DatatypeTypeType |s#0@@15|)))))) (let ((|tail#9@@0| (Lit DatatypeTypeType (_module.Stream.tail (Lit DatatypeTypeType |s#0@@15|)))))
(|_module.__default.IsNeverEndingStream_h#canCall| |_module._default.IsNeverEndingStream#$S@@5| (|ORD#Minus| |_k#0@@11| (|ORD#FromNat| 1)) |tail#9@@0|)))) (=> (=> (< 0 (|ORD#Offset| |_k#0@@11|)) (ite (_module.Stream.Nil_q (Lit DatatypeTypeType |s#0@@15|)) false (let ((|tail#10@@0| (Lit DatatypeTypeType (_module.Stream.tail (Lit DatatypeTypeType |s#0@@15|)))))
(_module.__default.IsNeverEndingStream_h |_module._default.IsNeverEndingStream#$S@@5| ($LS $ly@@17) (|ORD#Minus| |_k#0@@11| (|ORD#FromNat| 1)) |tail#10@@0|)))) (=> (= (LitInt 0) (|ORD#Offset| |_k#0@@11|)) (forall ((|_k'#2@@1| T@U) ) (!  (=> (|ORD#Less| |_k'#2@@1| |_k#0@@11|) (|_module.__default.IsNeverEndingStream_h#canCall| |_module._default.IsNeverEndingStream#$S@@5| |_k'#2@@1| |s#0@@15|))
 :pattern ( (_module.__default.IsNeverEndingStream_h |_module._default.IsNeverEndingStream#$S@@5| ($LS $ly@@17) |_k'#2@@1| |s#0@@15|))
))))) (= (_module.__default.IsNeverEndingStream_h |_module._default.IsNeverEndingStream#$S@@5| ($LS $ly@@17) (Lit BoxType |_k#0@@11|) (Lit DatatypeTypeType |s#0@@15|))  (and (=> (< 0 (|ORD#Offset| |_k#0@@11|)) (ite (_module.Stream.Nil_q (Lit DatatypeTypeType |s#0@@15|)) false (let ((|tail#8@@0| (Lit DatatypeTypeType (_module.Stream.tail (Lit DatatypeTypeType |s#0@@15|)))))
(_module.__default.IsNeverEndingStream_h |_module._default.IsNeverEndingStream#$S@@5| ($LS $ly@@17) (|ORD#Minus| |_k#0@@11| (|ORD#FromNat| 1)) |tail#8@@0|)))) (=> (= (LitInt 0) (|ORD#Offset| |_k#0@@11|)) (forall ((|_k'#2@@2| T@U) ) (!  (=> (|ORD#Less| |_k'#2@@2| |_k#0@@11|) (_module.__default.IsNeverEndingStream_h |_module._default.IsNeverEndingStream#$S@@5| ($LS $ly@@17) |_k'#2@@2| |s#0@@15|))
 :pattern ( (_module.__default.IsNeverEndingStream_h |_module._default.IsNeverEndingStream#$S@@5| ($LS $ly@@17) |_k'#2@@2| |s#0@@15|))
)))))))
 :weight 3
 :pattern ( (_module.__default.IsNeverEndingStream_h |_module._default.IsNeverEndingStream#$S@@5| ($LS $ly@@17) (Lit BoxType |_k#0@@11|) (Lit DatatypeTypeType |s#0@@15|)))
))))
(assert (forall ((_module.Stream$T@@4 T@U) (bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 (Tclass._module.Stream _module.Stream$T@@4)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@0)) bx@@0) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@0) (Tclass._module.Stream _module.Stream$T@@4))))
 :pattern ( ($IsBox bx@@0 (Tclass._module.Stream _module.Stream$T@@4)))
)))
(assert (forall ((o@@5 T@U) ) (!  (=> (|ORD#IsNat| o@@5) (= o@@5 (|ORD#FromNat| (|ORD#Offset| o@@5))))
 :pattern ( (|ORD#Offset| o@@5))
 :pattern ( (|ORD#IsNat| o@@5))
)))
(assert (= (Tag Tclass._module.Tree) Tagclass._module.Tree))
(assert (= (TagFamily Tclass._module.Tree) tytagFamily$Tree))
(assert (forall ((o@@6 T@U) (p@@3 T@U) ) (!  (=> (and (|ORD#IsNat| p@@3) (<= (|ORD#Offset| p@@3) (|ORD#Offset| o@@6))) (or (and (= p@@3 (|ORD#FromNat| 0)) (= (|ORD#Minus| o@@6 p@@3) o@@6)) (and (or (not (= p@@3 (|ORD#FromNat| 0))) (not true)) (|ORD#Less| (|ORD#Minus| o@@6 p@@3) o@@6))))
 :pattern ( (|ORD#Minus| o@@6 p@@3))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($ly@@18 T@U) ) (!  (=> (or |_module.__default.ATreeChildren#canCall| (< 2 $FunctionContextHeight)) ($Is DatatypeTypeType (_module.__default.ATreeChildren $ly@@18) (Tclass._module.Stream Tclass._module.Tree)))
 :pattern ( (_module.__default.ATreeChildren $ly@@18))
))))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((|a#11#0#0| T@U) ) (! (= (|#_module.Tree.Node| (Lit DatatypeTypeType |a#11#0#0|)) (Lit DatatypeTypeType (|#_module.Tree.Node| |a#11#0#0|)))
 :pattern ( (|#_module.Tree.Node| (Lit DatatypeTypeType |a#11#0#0|)))
)))
(assert (forall ((x@@7 T@U) (T@@3 T@T) ) (! (= ($Box T@@3 (Lit T@@3 x@@7)) (Lit BoxType ($Box T@@3 x@@7)))
 :pattern ( ($Box T@@3 (Lit T@@3 x@@7)))
)))
(assert  (=> (<= 3 $FunctionContextHeight) (forall (($ly@@19 T@U) (|_k#0@@12| T@U) (|s#0@@16| T@U) ) (!  (=> (or (|_module.__default.InfiniteHeightSomewhere__Bad_h#canCall| |_k#0@@12| |s#0@@16|) (and (< 3 $FunctionContextHeight) ($Is DatatypeTypeType |s#0@@16| (Tclass._module.Stream Tclass._module.Tree)))) (and (and (=> (< 0 (|ORD#Offset| |_k#0@@12|)) (=> (not (_module.Stream.Nil_q |s#0@@16|)) (let ((|tail#3@@0| (_module.Stream.tail |s#0@@16|)))
(let ((|t#3| ($Unbox DatatypeTypeType (_module.Stream.head |s#0@@16|))))
 (and (and (_module.Tree.Node_q |t#3|) (|_module.__default.InfiniteHeightSomewhere__Bad_h#canCall| (|ORD#Minus| |_k#0@@12| (|ORD#FromNat| 1)) (_module.Tree.children |t#3|))) (=> (not (_module.__default.InfiniteHeightSomewhere__Bad_h $ly@@19 (|ORD#Minus| |_k#0@@12| (|ORD#FromNat| 1)) (_module.Tree.children |t#3|))) (|_module.__default.InfiniteHeightSomewhere__Bad_h#canCall| (|ORD#Minus| |_k#0@@12| (|ORD#FromNat| 1)) |tail#3@@0|))))))) (=> (=> (< 0 (|ORD#Offset| |_k#0@@12|)) (ite (_module.Stream.Nil_q |s#0@@16|) false (let ((|tail#4@@0| (_module.Stream.tail |s#0@@16|)))
(let ((|t#4| ($Unbox DatatypeTypeType (_module.Stream.head |s#0@@16|))))
 (or (_module.__default.InfiniteHeightSomewhere__Bad_h $ly@@19 (|ORD#Minus| |_k#0@@12| (|ORD#FromNat| 1)) (_module.Tree.children |t#4|)) (_module.__default.InfiniteHeightSomewhere__Bad_h $ly@@19 (|ORD#Minus| |_k#0@@12| (|ORD#FromNat| 1)) |tail#4@@0|)))))) (=> (= (LitInt 0) (|ORD#Offset| |_k#0@@12|)) (forall ((|_k'#0@@1| T@U) ) (!  (=> (|ORD#Less| |_k'#0@@1| |_k#0@@12|) (|_module.__default.InfiniteHeightSomewhere__Bad_h#canCall| |_k'#0@@1| |s#0@@16|))
 :pattern ( (_module.__default.InfiniteHeightSomewhere__Bad_h $ly@@19 |_k'#0@@1| |s#0@@16|))
))))) (= (_module.__default.InfiniteHeightSomewhere__Bad_h ($LS $ly@@19) |_k#0@@12| |s#0@@16|)  (and (=> (< 0 (|ORD#Offset| |_k#0@@12|)) (ite (_module.Stream.Nil_q |s#0@@16|) false (let ((|tail#2@@0| (_module.Stream.tail |s#0@@16|)))
(let ((|t#2| ($Unbox DatatypeTypeType (_module.Stream.head |s#0@@16|))))
 (or (_module.__default.InfiniteHeightSomewhere__Bad_h $ly@@19 (|ORD#Minus| |_k#0@@12| (|ORD#FromNat| 1)) (_module.Tree.children |t#2|)) (_module.__default.InfiniteHeightSomewhere__Bad_h $ly@@19 (|ORD#Minus| |_k#0@@12| (|ORD#FromNat| 1)) |tail#2@@0|)))))) (=> (= (LitInt 0) (|ORD#Offset| |_k#0@@12|)) (forall ((|_k'#0@@2| T@U) ) (!  (=> (|ORD#Less| |_k'#0@@2| |_k#0@@12|) (_module.__default.InfiniteHeightSomewhere__Bad_h $ly@@19 |_k'#0@@2| |s#0@@16|))
 :pattern ( (_module.__default.InfiniteHeightSomewhere__Bad_h $ly@@19 |_k'#0@@2| |s#0@@16|))
)))))))
 :pattern ( (_module.__default.InfiniteHeightSomewhere__Bad_h ($LS $ly@@19) |_k#0@@12| |s#0@@16|))
))))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $Heap () T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $Heap@0 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |s##0@0| () T@U)
(declare-fun $Heap@1 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 5) (let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (=> (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (=> (and (and (and |_module.__default.ATreeChildren#canCall| (|_module.__default.IsNeverEndingStream#canCall| Tclass._module.Tree (Lit DatatypeTypeType (_module.__default.ATreeChildren ($LS $LZ))))) (and (|_module.__default.IsNeverEndingStream#canCall| Tclass._module.Tree (Lit DatatypeTypeType (_module.__default.ATreeChildren ($LS $LZ)))) (and (U_2_bool (Lit boolType (bool_2_U (_module.__default.IsNeverEndingStream Tclass._module.Tree ($LS $LZ) (Lit DatatypeTypeType (_module.__default.ATreeChildren ($LS $LZ))))))) (ite (_module.Stream.Nil_q (Lit DatatypeTypeType (_module.__default.ATreeChildren ($LS $LZ)))) false (U_2_bool (let ((|tail#1@@1| (Lit DatatypeTypeType (_module.Stream.tail (Lit DatatypeTypeType (_module.__default.ATreeChildren ($LS $LZ)))))))
(Lit boolType (bool_2_U (_module.__default.IsNeverEndingStream Tclass._module.Tree ($LS $LZ) |tail#1@@1|))))))))) (and (and (= $Heap $Heap@0) |_module.__default.ATreeChildren#canCall|) (and |_module.__default.ATreeChildren#canCall| (= |s##0@0| (Lit DatatypeTypeType (_module.__default.ATreeChildren ($LS $LZ))))))) (and (=> (= (ControlFlow 0 2) (- 0 4)) (=> (|_module.__default.IsNeverEndingStream#canCall| Tclass._module.Tree |s##0@0|) (or (_module.__default.IsNeverEndingStream Tclass._module.Tree ($LS $LZ) |s##0@0|) (=> (_module.Stream.Nil_q |s##0@0|) (U_2_bool (Lit boolType (bool_2_U false))))))) (=> (=> (|_module.__default.IsNeverEndingStream#canCall| Tclass._module.Tree |s##0@0|) (or (_module.__default.IsNeverEndingStream Tclass._module.Tree ($LS $LZ) |s##0@0|) (=> (_module.Stream.Nil_q |s##0@0|) (U_2_bool (Lit boolType (bool_2_U false)))))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (=> (|_module.__default.IsNeverEndingStream#canCall| Tclass._module.Tree |s##0@0|) (or (_module.__default.IsNeverEndingStream Tclass._module.Tree ($LS $LZ) |s##0@0|) (=> (not (_module.Stream.Nil_q |s##0@0|)) (let ((|tail#0@@1| (_module.Stream.tail |s##0@0|)))
(_module.__default.IsNeverEndingStream Tclass._module.Tree ($LS ($LS $LZ)) |tail#0@@1|)))))) (=> (=> (|_module.__default.IsNeverEndingStream#canCall| Tclass._module.Tree |s##0@0|) (or (_module.__default.IsNeverEndingStream Tclass._module.Tree ($LS $LZ) |s##0@0|) (=> (not (_module.Stream.Nil_q |s##0@0|)) (let ((|tail#0@@2| (_module.Stream.tail |s##0@0|)))
(_module.__default.IsNeverEndingStream Tclass._module.Tree ($LS ($LS $LZ)) |tail#0@@2|))))) (=> (and (and (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1)) (|_module.__default.InfiniteHeightSomewhere__Bad#canCall| |s##0@0|)) (and (and (|_module.__default.InfiniteHeightSomewhere__Bad#canCall| |s##0@0|) (and (_module.__default.InfiniteHeightSomewhere__Bad ($LS $LZ) |s##0@0|) (ite (_module.Stream.Nil_q |s##0@0|) false (let ((|tail#3@@1| (_module.Stream.tail |s##0@0|)))
(let ((|t#1@@0| ($Unbox DatatypeTypeType (_module.Stream.head |s##0@0|))))
 (or (_module.__default.InfiniteHeightSomewhere__Bad ($LS $LZ) (_module.Tree.children |t#1@@0|)) (_module.__default.InfiniteHeightSomewhere__Bad ($LS $LZ) |tail#3@@1|))))))) (and (= $Heap@0 $Heap@1) (= (ControlFlow 0 2) (- 0 1))))) (not (U_2_bool (Lit boolType (bool_2_U (_module.__default.HasFiniteHeightEverywhere__Bad (Lit DatatypeTypeType _module.__default.ATree))))))))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (and (= 5 $FunctionContextHeight) (= (ControlFlow 0 5) 2))) anon0_correct)))
PreconditionGeneratedEntry_correct)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
