(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun alloc () T@U)
(declare-fun Tagclass._module.Tree () T@U)
(declare-fun |##_module.Tree.Leaf| () T@U)
(declare-fun |##_module.Tree.Node| () T@U)
(declare-fun tytagFamily$Tree () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun |#_module.Tree.Node| (T@U T@U) T@U)
(declare-fun Tclass._module.Tree (T@U) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.size (T@U T@U Bool T@U) Int)
(declare-fun $LS (T@U) T@U)
(declare-fun |_module.__default.size#canCall| (T@U T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun _module.Tree.Leaf_q (T@U) Bool)
(declare-fun _module.Tree._h2 (T@U) T@U)
(declare-fun _module.Tree._h1 (T@U) T@U)
(declare-fun reveal__module._default.size () Bool)
(declare-fun _module.__default.mirror (T@U T@U Bool T@U) T@U)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun |_module.__default.mirror#canCall| (T@U T@U) Bool)
(declare-fun reveal__module._default.mirror () Bool)
(declare-fun LitInt (Int) Int)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun _module.Tree.Node_q (T@U) Bool)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun |#_module.Tree.Leaf| (T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun Tag (T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun |$IsA#_module.Tree| (T@U) Bool)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun Tclass._module.Tree_0 (T@U) T@U)
(declare-fun _module.Tree._h0 (T@U) T@U)
(declare-fun DtRank (T@U) Int)
(declare-fun BoxRank (T@U) Int)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct alloc Tagclass._module.Tree |##_module.Tree.Leaf| |##_module.Tree.Node| tytagFamily$Tree)
)
(assert (= (Ctor DatatypeTypeType) 3))
(assert (forall ((_module.Tree$T T@U) (|a#8#0#0| T@U) (|a#8#1#0| T@U) ($h T@U) ) (!  (=> ($IsGoodHeap $h) (= ($IsAlloc DatatypeTypeType (|#_module.Tree.Node| |a#8#0#0| |a#8#1#0|) (Tclass._module.Tree _module.Tree$T) $h)  (and ($IsAlloc DatatypeTypeType |a#8#0#0| (Tclass._module.Tree _module.Tree$T) $h) ($IsAlloc DatatypeTypeType |a#8#1#0| (Tclass._module.Tree _module.Tree$T) $h))))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_module.Tree.Node| |a#8#0#0| |a#8#1#0|) (Tclass._module.Tree _module.Tree$T) $h))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module._default.size$_T0 T@U) ($ly T@U) (|t#0| T@U) ) (!  (=> (or (|_module.__default.size#canCall| _module._default.size$_T0 |t#0|) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |t#0| (Tclass._module.Tree _module._default.size$_T0)))) (and (=> (not (_module.Tree.Leaf_q |t#0|)) (let ((|right#1| (_module.Tree._h2 |t#0|)))
(let ((|left#1| (_module.Tree._h1 |t#0|)))
 (and (|_module.__default.size#canCall| _module._default.size$_T0 |left#1|) (|_module.__default.size#canCall| _module._default.size$_T0 |right#1|))))) (= (_module.__default.size _module._default.size$_T0 ($LS $ly) true |t#0|) (ite (_module.Tree.Leaf_q |t#0|) 1 (let ((|right#0| (_module.Tree._h2 |t#0|)))
(let ((|left#0| (_module.Tree._h1 |t#0|)))
(+ (+ 1 (_module.__default.size _module._default.size$_T0 $ly reveal__module._default.size |left#0|)) (_module.__default.size _module._default.size$_T0 $ly reveal__module._default.size |right#0|))))))))
 :pattern ( (_module.__default.size _module._default.size$_T0 ($LS $ly) true |t#0|))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module._default.mirror$T T@U) ($ly@@0 T@U) (|t#0@@0| T@U) ) (!  (=> (or (|_module.__default.mirror#canCall| _module._default.mirror$T (Lit DatatypeTypeType |t#0@@0|)) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |t#0@@0| (Tclass._module.Tree _module._default.mirror$T)))) (and (=> (not (U_2_bool (Lit boolType (bool_2_U (_module.Tree.Leaf_q (Lit DatatypeTypeType |t#0@@0|)))))) (let ((|right#3| (Lit DatatypeTypeType (_module.Tree._h2 (Lit DatatypeTypeType |t#0@@0|)))))
(let ((|left#3| (Lit DatatypeTypeType (_module.Tree._h1 (Lit DatatypeTypeType |t#0@@0|)))))
 (and (|_module.__default.mirror#canCall| _module._default.mirror$T |right#3|) (|_module.__default.mirror#canCall| _module._default.mirror$T |left#3|))))) (= (_module.__default.mirror _module._default.mirror$T ($LS $ly@@0) true (Lit DatatypeTypeType |t#0@@0|)) (ite (_module.Tree.Leaf_q (Lit DatatypeTypeType |t#0@@0|)) |t#0@@0| (let ((|right#2| (Lit DatatypeTypeType (_module.Tree._h2 (Lit DatatypeTypeType |t#0@@0|)))))
(let ((|left#2| (Lit DatatypeTypeType (_module.Tree._h1 (Lit DatatypeTypeType |t#0@@0|)))))
(|#_module.Tree.Node| (_module.__default.mirror _module._default.mirror$T ($LS $ly@@0) reveal__module._default.mirror |right#2|) (_module.__default.mirror _module._default.mirror$T ($LS $ly@@0) reveal__module._default.mirror |left#2|))))))))
 :weight 3
 :pattern ( (_module.__default.mirror _module._default.mirror$T ($LS $ly@@0) true (Lit DatatypeTypeType |t#0@@0|)))
))))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((d T@U) ) (! (= (_module.Tree.Leaf_q d) (= (DatatypeCtorId d) |##_module.Tree.Leaf|))
 :pattern ( (_module.Tree.Leaf_q d))
)))
(assert (forall ((d@@0 T@U) ) (! (= (_module.Tree.Node_q d@@0) (= (DatatypeCtorId d@@0) |##_module.Tree.Node|))
 :pattern ( (_module.Tree.Node_q d@@0))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module._default.size$_T0@@0 T@U) ($ly@@1 T@U) ($reveal Bool) (|t#0@@1| T@U) ) (!  (=> (or (|_module.__default.size#canCall| _module._default.size$_T0@@0 |t#0@@1|) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |t#0@@1| (Tclass._module.Tree _module._default.size$_T0@@0)))) (<= (LitInt 0) (_module.__default.size _module._default.size$_T0@@0 $ly@@1 $reveal |t#0@@1|)))
 :pattern ( (_module.__default.size _module._default.size$_T0@@0 $ly@@1 $reveal |t#0@@1|))
))))
(assert (forall ((d@@1 T@U) ) (!  (=> (_module.Tree.Node_q d@@1) (exists ((|a#7#0#0| T@U) (|a#7#1#0| T@U) ) (= d@@1 (|#_module.Tree.Node| |a#7#0#0| |a#7#1#0|))))
 :pattern ( (_module.Tree.Node_q d@@1))
)))
(assert (forall ((_module.Tree$T@@0 T@U) (|a#8#0#0@@0| T@U) (|a#8#1#0@@0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Tree.Node| |a#8#0#0@@0| |a#8#1#0@@0|) (Tclass._module.Tree _module.Tree$T@@0))  (and ($Is DatatypeTypeType |a#8#0#0@@0| (Tclass._module.Tree _module.Tree$T@@0)) ($Is DatatypeTypeType |a#8#1#0@@0| (Tclass._module.Tree _module.Tree$T@@0))))
 :pattern ( ($Is DatatypeTypeType (|#_module.Tree.Node| |a#8#0#0@@0| |a#8#1#0@@0|) (Tclass._module.Tree _module.Tree$T@@0)))
)))
(assert (forall ((d@@2 T@U) ) (!  (=> (_module.Tree.Leaf_q d@@2) (exists ((|a#1#0#0| T@U) ) (= d@@2 (|#_module.Tree.Leaf| |a#1#0#0|))))
 :pattern ( (_module.Tree.Leaf_q d@@2))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module._default.mirror$T@@0 T@U) ($ly@@2 T@U) (|t#0@@2| T@U) ) (!  (=> (or (|_module.__default.mirror#canCall| _module._default.mirror$T@@0 |t#0@@2|) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |t#0@@2| (Tclass._module.Tree _module._default.mirror$T@@0)))) (and (=> (not (_module.Tree.Leaf_q |t#0@@2|)) (let ((|right#1@@0| (_module.Tree._h2 |t#0@@2|)))
(let ((|left#1@@0| (_module.Tree._h1 |t#0@@2|)))
 (and (|_module.__default.mirror#canCall| _module._default.mirror$T@@0 |right#1@@0|) (|_module.__default.mirror#canCall| _module._default.mirror$T@@0 |left#1@@0|))))) (= (_module.__default.mirror _module._default.mirror$T@@0 ($LS $ly@@2) true |t#0@@2|) (ite (_module.Tree.Leaf_q |t#0@@2|) |t#0@@2| (let ((|right#0@@0| (_module.Tree._h2 |t#0@@2|)))
(let ((|left#0@@0| (_module.Tree._h1 |t#0@@2|)))
(|#_module.Tree.Node| (_module.__default.mirror _module._default.mirror$T@@0 $ly@@2 reveal__module._default.mirror |right#0@@0|) (_module.__default.mirror _module._default.mirror$T@@0 $ly@@2 reveal__module._default.mirror |left#0@@0|))))))))
 :pattern ( (_module.__default.mirror _module._default.mirror$T@@0 ($LS $ly@@2) true |t#0@@2|))
))))
(assert (forall ((v T@U) (t T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v) t h) ($IsAlloc T@@1 v t h))
 :pattern ( ($IsAllocBox ($Box T@@1 v) t h))
)))
(assert (forall ((_module.Tree$T@@1 T@U) ) (!  (and (= (Tag (Tclass._module.Tree _module.Tree$T@@1)) Tagclass._module.Tree) (= (TagFamily (Tclass._module.Tree _module.Tree$T@@1)) tytagFamily$Tree))
 :pattern ( (Tclass._module.Tree _module.Tree$T@@1))
)))
(assert (forall ((_module.Tree$T@@2 T@U) (|a#2#0#0| T@U) ($h@@0 T@U) ) (!  (=> ($IsGoodHeap $h@@0) (= ($IsAlloc DatatypeTypeType (|#_module.Tree.Leaf| |a#2#0#0|) (Tclass._module.Tree _module.Tree$T@@2) $h@@0) ($IsAllocBox |a#2#0#0| _module.Tree$T@@2 $h@@0)))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_module.Tree.Leaf| |a#2#0#0|) (Tclass._module.Tree _module.Tree$T@@2) $h@@0))
)))
(assert (forall ((d@@3 T@U) ) (!  (=> (|$IsA#_module.Tree| d@@3) (or (_module.Tree.Leaf_q d@@3) (_module.Tree.Node_q d@@3)))
 :pattern ( (|$IsA#_module.Tree| d@@3))
)))
(assert (forall ((_module.Tree$T@@3 T@U) (d@@4 T@U) ) (!  (=> ($Is DatatypeTypeType d@@4 (Tclass._module.Tree _module.Tree$T@@3)) (or (_module.Tree.Leaf_q d@@4) (_module.Tree.Node_q d@@4)))
 :pattern ( (_module.Tree.Node_q d@@4) ($Is DatatypeTypeType d@@4 (Tclass._module.Tree _module.Tree$T@@3)))
 :pattern ( (_module.Tree.Leaf_q d@@4) ($Is DatatypeTypeType d@@4 (Tclass._module.Tree _module.Tree$T@@3)))
)))
(assert (forall ((v@@0 T@U) (t@@0 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@0) t@@0) ($Is T@@2 v@@0 t@@0))
 :pattern ( ($IsBox ($Box T@@2 v@@0) t@@0))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module._default.mirror$T@@1 T@U) ($ly@@3 T@U) ($reveal@@0 Bool) (|t#0@@3| T@U) ) (!  (=> (or (|_module.__default.mirror#canCall| _module._default.mirror$T@@1 |t#0@@3|) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |t#0@@3| (Tclass._module.Tree _module._default.mirror$T@@1)))) ($Is DatatypeTypeType (_module.__default.mirror _module._default.mirror$T@@1 $ly@@3 $reveal@@0 |t#0@@3|) (Tclass._module.Tree _module._default.mirror$T@@1)))
 :pattern ( (_module.__default.mirror _module._default.mirror$T@@1 $ly@@3 $reveal@@0 |t#0@@3|))
))))
(assert (forall ((|a#6#0#0| T@U) (|a#6#1#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Tree.Node| |a#6#0#0| |a#6#1#0|)) |##_module.Tree.Node|)
 :pattern ( (|#_module.Tree.Node| |a#6#0#0| |a#6#1#0|))
)))
(assert (forall ((|a#10#0#0| T@U) (|a#10#1#0| T@U) ) (! (= (_module.Tree._h1 (|#_module.Tree.Node| |a#10#0#0| |a#10#1#0|)) |a#10#0#0|)
 :pattern ( (|#_module.Tree.Node| |a#10#0#0| |a#10#1#0|))
)))
(assert (forall ((|a#12#0#0| T@U) (|a#12#1#0| T@U) ) (! (= (_module.Tree._h2 (|#_module.Tree.Node| |a#12#0#0| |a#12#1#0|)) |a#12#1#0|)
 :pattern ( (|#_module.Tree.Node| |a#12#0#0| |a#12#1#0|))
)))
(assert (forall ((_module.Tree$T@@4 T@U) ) (! (= (Tclass._module.Tree_0 (Tclass._module.Tree _module.Tree$T@@4)) _module.Tree$T@@4)
 :pattern ( (Tclass._module.Tree _module.Tree$T@@4))
)))
(assert (forall ((|a#0#0#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Tree.Leaf| |a#0#0#0|)) |##_module.Tree.Leaf|)
 :pattern ( (|#_module.Tree.Leaf| |a#0#0#0|))
)))
(assert (forall ((|a#4#0#0| T@U) ) (! (= (_module.Tree._h0 (|#_module.Tree.Leaf| |a#4#0#0|)) |a#4#0#0|)
 :pattern ( (|#_module.Tree.Leaf| |a#4#0#0|))
)))
(assert (forall ((x@@5 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@5)) x@@5)
 :pattern ( ($Box T@@3 x@@5))
)))
(assert (forall ((_module.Tree$T@@5 T@U) (|a#2#0#0@@0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Tree.Leaf| |a#2#0#0@@0|) (Tclass._module.Tree _module.Tree$T@@5)) ($IsBox |a#2#0#0@@0| _module.Tree$T@@5))
 :pattern ( ($Is DatatypeTypeType (|#_module.Tree.Leaf| |a#2#0#0@@0|) (Tclass._module.Tree _module.Tree$T@@5)))
)))
(assert (forall ((|a#11#0#0| T@U) (|a#11#1#0| T@U) ) (! (< (DtRank |a#11#0#0|) (DtRank (|#_module.Tree.Node| |a#11#0#0| |a#11#1#0|)))
 :pattern ( (|#_module.Tree.Node| |a#11#0#0| |a#11#1#0|))
)))
(assert (forall ((|a#13#0#0| T@U) (|a#13#1#0| T@U) ) (! (< (DtRank |a#13#1#0|) (DtRank (|#_module.Tree.Node| |a#13#0#0| |a#13#1#0|)))
 :pattern ( (|#_module.Tree.Node| |a#13#0#0| |a#13#1#0|))
)))
(assert (forall ((|a#5#0#0| T@U) ) (! (< (BoxRank |a#5#0#0|) (DtRank (|#_module.Tree.Leaf| |a#5#0#0|)))
 :pattern ( (|#_module.Tree.Leaf| |a#5#0#0|))
)))
(assert (forall ((d@@5 T@U) (_module.Tree$T@@6 T@U) ($h@@1 T@U) ) (!  (=> (and ($IsGoodHeap $h@@1) (and (_module.Tree.Leaf_q d@@5) ($IsAlloc DatatypeTypeType d@@5 (Tclass._module.Tree _module.Tree$T@@6) $h@@1))) ($IsAllocBox (_module.Tree._h0 d@@5) _module.Tree$T@@6 $h@@1))
 :pattern ( ($IsAllocBox (_module.Tree._h0 d@@5) _module.Tree$T@@6 $h@@1))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0 t1 t2 (MapType0Store t0 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 4)) (= (Ctor FieldType) 5)) (forall ((t0@@0 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 (MapType1Store t0@@0 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :weight 0
))) (= (Ctor BoxType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((d@@6 T@U) ) (! (= (BoxRank ($Box DatatypeTypeType d@@6)) (DtRank d@@6))
 :pattern ( (BoxRank ($Box DatatypeTypeType d@@6)))
)))
(assert (forall ((_module._default.size$_T0@@1 T@U) ($ly@@4 T@U) ($reveal@@1 Bool) (|t#0@@4| T@U) ) (! (= (_module.__default.size _module._default.size$_T0@@1 ($LS $ly@@4) $reveal@@1 |t#0@@4|) (_module.__default.size _module._default.size$_T0@@1 $ly@@4 $reveal@@1 |t#0@@4|))
 :pattern ( (_module.__default.size _module._default.size$_T0@@1 ($LS $ly@@4) $reveal@@1 |t#0@@4|))
)))
(assert (forall ((_module._default.mirror$T@@2 T@U) ($ly@@5 T@U) ($reveal@@2 Bool) (|t#0@@5| T@U) ) (! (= (_module.__default.mirror _module._default.mirror$T@@2 ($LS $ly@@5) $reveal@@2 |t#0@@5|) (_module.__default.mirror _module._default.mirror$T@@2 $ly@@5 $reveal@@2 |t#0@@5|))
 :pattern ( (_module.__default.mirror _module._default.mirror$T@@2 ($LS $ly@@5) $reveal@@2 |t#0@@5|))
)))
(assert (forall ((_module.Tree$T@@7 T@U) (bx T@U) ) (!  (=> ($IsBox bx (Tclass._module.Tree _module.Tree$T@@7)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx)) bx) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx) (Tclass._module.Tree _module.Tree$T@@7))))
 :pattern ( ($IsBox bx (Tclass._module.Tree _module.Tree$T@@7)))
)))
(assert (forall ((d@@7 T@U) (_module.Tree$T@@8 T@U) ($h@@2 T@U) ) (!  (=> (and ($IsGoodHeap $h@@2) (and (_module.Tree.Node_q d@@7) ($IsAlloc DatatypeTypeType d@@7 (Tclass._module.Tree _module.Tree$T@@8) $h@@2))) ($IsAlloc DatatypeTypeType (_module.Tree._h1 d@@7) (Tclass._module.Tree _module.Tree$T@@8) $h@@2))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.Tree._h1 d@@7) (Tclass._module.Tree _module.Tree$T@@8) $h@@2))
)))
(assert (forall ((d@@8 T@U) (_module.Tree$T@@9 T@U) ($h@@3 T@U) ) (!  (=> (and ($IsGoodHeap $h@@3) (and (_module.Tree.Node_q d@@8) ($IsAlloc DatatypeTypeType d@@8 (Tclass._module.Tree _module.Tree$T@@9) $h@@3))) ($IsAlloc DatatypeTypeType (_module.Tree._h2 d@@8) (Tclass._module.Tree _module.Tree$T@@9) $h@@3))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.Tree._h2 d@@8) (Tclass._module.Tree _module.Tree$T@@9) $h@@3))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module._default.size$_T0@@2 T@U) ($ly@@6 T@U) (|t#0@@6| T@U) ) (!  (=> (or (|_module.__default.size#canCall| _module._default.size$_T0@@2 (Lit DatatypeTypeType |t#0@@6|)) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |t#0@@6| (Tclass._module.Tree _module._default.size$_T0@@2)))) (and (=> (not (U_2_bool (Lit boolType (bool_2_U (_module.Tree.Leaf_q (Lit DatatypeTypeType |t#0@@6|)))))) (let ((|right#3@@0| (Lit DatatypeTypeType (_module.Tree._h2 (Lit DatatypeTypeType |t#0@@6|)))))
(let ((|left#3@@0| (Lit DatatypeTypeType (_module.Tree._h1 (Lit DatatypeTypeType |t#0@@6|)))))
 (and (|_module.__default.size#canCall| _module._default.size$_T0@@2 |left#3@@0|) (|_module.__default.size#canCall| _module._default.size$_T0@@2 |right#3@@0|))))) (= (_module.__default.size _module._default.size$_T0@@2 ($LS $ly@@6) true (Lit DatatypeTypeType |t#0@@6|)) (ite (_module.Tree.Leaf_q (Lit DatatypeTypeType |t#0@@6|)) 1 (let ((|right#2@@0| (Lit DatatypeTypeType (_module.Tree._h2 (Lit DatatypeTypeType |t#0@@6|)))))
(let ((|left#2@@0| (Lit DatatypeTypeType (_module.Tree._h1 (Lit DatatypeTypeType |t#0@@6|)))))
(+ (+ 1 (_module.__default.size _module._default.size$_T0@@2 ($LS $ly@@6) reveal__module._default.size |left#2@@0|)) (_module.__default.size _module._default.size$_T0@@2 ($LS $ly@@6) reveal__module._default.size |right#2@@0|))))))))
 :weight 3
 :pattern ( (_module.__default.size _module._default.size$_T0@@2 ($LS $ly@@6) true (Lit DatatypeTypeType |t#0@@6|)))
))))
(assert (forall ((|a#9#0#0| T@U) (|a#9#1#0| T@U) ) (! (= (|#_module.Tree.Node| (Lit DatatypeTypeType |a#9#0#0|) (Lit DatatypeTypeType |a#9#1#0|)) (Lit DatatypeTypeType (|#_module.Tree.Node| |a#9#0#0| |a#9#1#0|)))
 :pattern ( (|#_module.Tree.Node| (Lit DatatypeTypeType |a#9#0#0|) (Lit DatatypeTypeType |a#9#1#0|)))
)))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((|a#3#0#0| T@U) ) (! (= (|#_module.Tree.Leaf| (Lit BoxType |a#3#0#0|)) (Lit DatatypeTypeType (|#_module.Tree.Leaf| |a#3#0#0|)))
 :pattern ( (|#_module.Tree.Leaf| (Lit BoxType |a#3#0#0|)))
)))
(assert (forall ((x@@7 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@7)) (Lit BoxType ($Box T@@4 x@@7)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@7)))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($Heap T@U) (_module._default.mirror$T@@3 T@U) ($ly@@7 T@U) ($reveal@@3 Bool) (|t#0@@7| T@U) ) (!  (=> (and (or (|_module.__default.mirror#canCall| _module._default.mirror$T@@3 |t#0@@7|) (and (< 1 $FunctionContextHeight) (and ($Is DatatypeTypeType |t#0@@7| (Tclass._module.Tree _module._default.mirror$T@@3)) ($IsAlloc DatatypeTypeType |t#0@@7| (Tclass._module.Tree _module._default.mirror$T@@3) $Heap)))) ($IsGoodHeap $Heap)) ($IsAlloc DatatypeTypeType (_module.__default.mirror _module._default.mirror$T@@3 $ly@@7 $reveal@@3 |t#0@@7|) (Tclass._module.Tree _module._default.mirror$T@@3) $Heap))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.__default.mirror _module._default.mirror$T@@3 $ly@@7 $reveal@@3 |t#0@@7|) (Tclass._module.Tree _module._default.mirror$T@@3) $Heap))
))))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |##t#1_0_0_1@0| () T@U)
(declare-fun |x#1_0@0| () T@U)
(declare-fun _module._default.MirrorSize$_T0 () T@U)
(declare-fun $Heap@@0 () T@U)
(declare-fun |##t#1_0_0_0@0| () T@U)
(declare-fun $LZ () T@U)
(declare-fun $Heap@5 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |##t#1_0_0_2@0| () T@U)
(declare-fun |t#0@@8| () T@U)
(declare-fun |_mcc#0#1_0@0| () T@U)
(declare-fun |let#1_0#0#0| () T@U)
(declare-fun |left#0_0@0| () T@U)
(declare-fun |right#0_0@0| () T@U)
(declare-fun $Heap@4 () T@U)
(declare-fun |##t#0_0_0_2@0| () T@U)
(declare-fun |##t#0_0_1_0@0| () T@U)
(declare-fun |##t#0_0_1_2@0| () T@U)
(declare-fun $Heap@2 () T@U)
(declare-fun $Heap@3 () T@U)
(declare-fun |##t#0_0_2_0@0| () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun |##t#0_0_2_3@0| () T@U)
(declare-fun |##t#0_0_2_5@0| () T@U)
(declare-fun |##t#0_0_3_1@0| () T@U)
(declare-fun |##t#0_0_3_0@0| () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun |##t#0_0_3_2@0| () T@U)
(declare-fun |_mcc#1#0_0@0| () T@U)
(declare-fun |_mcc#2#0_0@0| () T@U)
(declare-fun |let#0_0#0#0| () T@U)
(declare-fun |let#0_1#0#0| () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun null () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 24) (let ((anon15_Then_correct  (=> (and (and (and (= |##t#1_0_0_1@0| (|#_module.Tree.Leaf| |x#1_0@0|)) ($IsAlloc DatatypeTypeType |##t#1_0_0_1@0| (Tclass._module.Tree _module._default.MirrorSize$_T0) $Heap@@0)) (and (|_module.__default.mirror#canCall| _module._default.MirrorSize$_T0 (|#_module.Tree.Leaf| |x#1_0@0|)) (= |##t#1_0_0_0@0| (_module.__default.mirror _module._default.MirrorSize$_T0 ($LS $LZ) reveal__module._default.mirror (|#_module.Tree.Leaf| |x#1_0@0|))))) (and (and ($IsAlloc DatatypeTypeType |##t#1_0_0_0@0| (Tclass._module.Tree _module._default.MirrorSize$_T0) $Heap@@0) (|_module.__default.size#canCall| _module._default.MirrorSize$_T0 (_module.__default.mirror _module._default.MirrorSize$_T0 ($LS $LZ) reveal__module._default.mirror (|#_module.Tree.Leaf| |x#1_0@0|)))) (and (|_module.__default.mirror#canCall| _module._default.MirrorSize$_T0 (|#_module.Tree.Leaf| |x#1_0@0|)) (|_module.__default.size#canCall| _module._default.MirrorSize$_T0 (_module.__default.mirror _module._default.MirrorSize$_T0 ($LS $LZ) reveal__module._default.mirror (|#_module.Tree.Leaf| |x#1_0@0|)))))) (=> (and (and (and (and ($IsGoodHeap $Heap@5) ($IsHeapAnchor $Heap@5)) (= $Heap@@0 $Heap@5)) (and reveal__module._default.mirror (= |##t#1_0_0_2@0| (|#_module.Tree.Leaf| |x#1_0@0|)))) (and (and ($IsAlloc DatatypeTypeType |##t#1_0_0_2@0| (Tclass._module.Tree _module._default.MirrorSize$_T0) $Heap@5) (|_module.__default.size#canCall| _module._default.MirrorSize$_T0 (|#_module.Tree.Leaf| |x#1_0@0|))) (and (|_module.__default.size#canCall| _module._default.MirrorSize$_T0 (|#_module.Tree.Leaf| |x#1_0@0|)) (= (ControlFlow 0 20) (- 0 19))))) (= (_module.__default.size _module._default.MirrorSize$_T0 ($LS ($LS $LZ)) reveal__module._default.size (_module.__default.mirror _module._default.MirrorSize$_T0 ($LS ($LS $LZ)) reveal__module._default.mirror (|#_module.Tree.Leaf| |x#1_0@0|))) (_module.__default.size _module._default.MirrorSize$_T0 ($LS ($LS $LZ)) reveal__module._default.size (|#_module.Tree.Leaf| |x#1_0@0|)))))))
(let ((anon14_Then_correct true))
(let ((GeneratedUnifiedExit_correct  (=> (= (ControlFlow 0 14) (- 0 13)) (= (_module.__default.size _module._default.MirrorSize$_T0 ($LS ($LS $LZ)) reveal__module._default.size (_module.__default.mirror _module._default.MirrorSize$_T0 ($LS ($LS $LZ)) reveal__module._default.mirror |t#0@@8|)) (_module.__default.size _module._default.MirrorSize$_T0 ($LS ($LS $LZ)) reveal__module._default.size |t#0@@8|)))))
(let ((anon15_Else_correct  (=> (and (= (_module.__default.size _module._default.MirrorSize$_T0 ($LS $LZ) reveal__module._default.size (_module.__default.mirror _module._default.MirrorSize$_T0 ($LS $LZ) reveal__module._default.mirror (|#_module.Tree.Leaf| |x#1_0@0|))) (_module.__default.size _module._default.MirrorSize$_T0 ($LS $LZ) reveal__module._default.size (|#_module.Tree.Leaf| |x#1_0@0|))) (= (ControlFlow 0 21) 14)) GeneratedUnifiedExit_correct)))
(let ((anon13_Then_correct  (=> (and (= |t#0@@8| (|#_module.Tree.Leaf| |_mcc#0#1_0@0|)) ($IsBox |_mcc#0#1_0@0| _module._default.MirrorSize$_T0)) (=> (and (and (and ($IsBox |x#1_0@0| _module._default.MirrorSize$_T0) ($IsAllocBox |x#1_0@0| _module._default.MirrorSize$_T0 $Heap@@0)) (= |let#1_0#0#0| |_mcc#0#1_0@0|)) (and ($IsBox |let#1_0#0#0| _module._default.MirrorSize$_T0) (= |x#1_0@0| |let#1_0#0#0|))) (and (and (=> (= (ControlFlow 0 22) 18) anon14_Then_correct) (=> (= (ControlFlow 0 22) 20) anon15_Then_correct)) (=> (= (ControlFlow 0 22) 21) anon15_Else_correct))))))
(let ((anon21_Else_correct  (=> (and (= (_module.__default.size _module._default.MirrorSize$_T0 ($LS $LZ) reveal__module._default.size (_module.__default.mirror _module._default.MirrorSize$_T0 ($LS $LZ) reveal__module._default.mirror (|#_module.Tree.Node| |left#0_0@0| |right#0_0@0|))) (_module.__default.size _module._default.MirrorSize$_T0 ($LS $LZ) reveal__module._default.size (|#_module.Tree.Node| |left#0_0@0| |right#0_0@0|))) (= (ControlFlow 0 15) 14)) GeneratedUnifiedExit_correct)))
(let ((anon21_Then_correct  (=> (and ($IsAlloc DatatypeTypeType |right#0_0@0| (Tclass._module.Tree _module._default.MirrorSize$_T0) $Heap@@0) (|_module.__default.size#canCall| _module._default.MirrorSize$_T0 |right#0_0@0|)) (=> (and (and ($IsAlloc DatatypeTypeType |left#0_0@0| (Tclass._module.Tree _module._default.MirrorSize$_T0) $Heap@@0) (|_module.__default.size#canCall| _module._default.MirrorSize$_T0 |left#0_0@0|)) (and (|_module.__default.size#canCall| _module._default.MirrorSize$_T0 |right#0_0@0|) (|_module.__default.size#canCall| _module._default.MirrorSize$_T0 |left#0_0@0|))) (=> (and (and (and (and ($IsGoodHeap $Heap@4) ($IsHeapAnchor $Heap@4)) (= $Heap@@0 $Heap@4)) (and reveal__module._default.size (= |##t#0_0_0_2@0| (|#_module.Tree.Node| |left#0_0@0| |right#0_0@0|)))) (and (and ($IsAlloc DatatypeTypeType |##t#0_0_0_2@0| (Tclass._module.Tree _module._default.MirrorSize$_T0) $Heap@4) (|_module.__default.size#canCall| _module._default.MirrorSize$_T0 (|#_module.Tree.Node| |left#0_0@0| |right#0_0@0|))) (and (|_module.__default.size#canCall| _module._default.MirrorSize$_T0 (|#_module.Tree.Node| |left#0_0@0| |right#0_0@0|)) (= (ControlFlow 0 12) (- 0 11))))) (= (+ (+ 1 (_module.__default.size _module._default.MirrorSize$_T0 ($LS ($LS $LZ)) reveal__module._default.size |right#0_0@0|)) (_module.__default.size _module._default.MirrorSize$_T0 ($LS ($LS $LZ)) reveal__module._default.size |left#0_0@0|)) (_module.__default.size _module._default.MirrorSize$_T0 ($LS ($LS $LZ)) reveal__module._default.size (|#_module.Tree.Node| |left#0_0@0| |right#0_0@0|))))))))
(let ((anon20_Then_correct  (=> (and ($IsAlloc DatatypeTypeType |right#0_0@0| (Tclass._module.Tree _module._default.MirrorSize$_T0) $Heap@@0) (|_module.__default.mirror#canCall| _module._default.MirrorSize$_T0 |right#0_0@0|)) (=> (and (and (= |##t#0_0_1_0@0| (_module.__default.mirror _module._default.MirrorSize$_T0 ($LS $LZ) reveal__module._default.mirror |right#0_0@0|)) ($IsAlloc DatatypeTypeType |##t#0_0_1_0@0| (Tclass._module.Tree _module._default.MirrorSize$_T0) $Heap@@0)) (and (|_module.__default.size#canCall| _module._default.MirrorSize$_T0 (_module.__default.mirror _module._default.MirrorSize$_T0 ($LS $LZ) reveal__module._default.mirror |right#0_0@0|)) ($IsAlloc DatatypeTypeType |left#0_0@0| (Tclass._module.Tree _module._default.MirrorSize$_T0) $Heap@@0))) (=> (and (and (and (|_module.__default.mirror#canCall| _module._default.MirrorSize$_T0 |left#0_0@0|) (= |##t#0_0_1_2@0| (_module.__default.mirror _module._default.MirrorSize$_T0 ($LS $LZ) reveal__module._default.mirror |left#0_0@0|))) (and ($IsAlloc DatatypeTypeType |##t#0_0_1_2@0| (Tclass._module.Tree _module._default.MirrorSize$_T0) $Heap@@0) (|_module.__default.size#canCall| _module._default.MirrorSize$_T0 (_module.__default.mirror _module._default.MirrorSize$_T0 ($LS $LZ) reveal__module._default.mirror |left#0_0@0|)))) (and (and (|_module.__default.mirror#canCall| _module._default.MirrorSize$_T0 |right#0_0@0|) (|_module.__default.size#canCall| _module._default.MirrorSize$_T0 (_module.__default.mirror _module._default.MirrorSize$_T0 ($LS $LZ) reveal__module._default.mirror |right#0_0@0|))) (and (|_module.__default.mirror#canCall| _module._default.MirrorSize$_T0 |left#0_0@0|) (|_module.__default.size#canCall| _module._default.MirrorSize$_T0 (_module.__default.mirror _module._default.MirrorSize$_T0 ($LS $LZ) reveal__module._default.mirror |left#0_0@0|))))) (and (=> (= (ControlFlow 0 8) (- 0 10)) (< (DtRank |right#0_0@0|) (DtRank |t#0@@8|))) (=> (< (DtRank |right#0_0@0|) (DtRank |t#0@@8|)) (=> (and ($IsGoodHeap $Heap@2) ($IsHeapAnchor $Heap@2)) (=> (and (and (and (|_module.__default.mirror#canCall| _module._default.MirrorSize$_T0 |right#0_0@0|) (|_module.__default.size#canCall| _module._default.MirrorSize$_T0 (_module.__default.mirror _module._default.MirrorSize$_T0 ($LS $LZ) reveal__module._default.mirror |right#0_0@0|))) (|_module.__default.size#canCall| _module._default.MirrorSize$_T0 |right#0_0@0|)) (and (= (_module.__default.size _module._default.MirrorSize$_T0 ($LS ($LS $LZ)) reveal__module._default.size (_module.__default.mirror _module._default.MirrorSize$_T0 ($LS ($LS $LZ)) reveal__module._default.mirror |right#0_0@0|)) (_module.__default.size _module._default.MirrorSize$_T0 ($LS ($LS $LZ)) reveal__module._default.size |right#0_0@0|)) (= $Heap@@0 $Heap@2))) (and (=> (= (ControlFlow 0 8) (- 0 9)) (< (DtRank |left#0_0@0|) (DtRank |t#0@@8|))) (=> (< (DtRank |left#0_0@0|) (DtRank |t#0@@8|)) (=> (and ($IsGoodHeap $Heap@3) ($IsHeapAnchor $Heap@3)) (=> (and (and (and (and (|_module.__default.mirror#canCall| _module._default.MirrorSize$_T0 |left#0_0@0|) (|_module.__default.size#canCall| _module._default.MirrorSize$_T0 (_module.__default.mirror _module._default.MirrorSize$_T0 ($LS $LZ) reveal__module._default.mirror |left#0_0@0|))) (|_module.__default.size#canCall| _module._default.MirrorSize$_T0 |left#0_0@0|)) (and (= (_module.__default.size _module._default.MirrorSize$_T0 ($LS ($LS $LZ)) reveal__module._default.size (_module.__default.mirror _module._default.MirrorSize$_T0 ($LS ($LS $LZ)) reveal__module._default.mirror |left#0_0@0|)) (_module.__default.size _module._default.MirrorSize$_T0 ($LS ($LS $LZ)) reveal__module._default.size |left#0_0@0|)) (= $Heap@2 $Heap@3))) (and (and (and ($IsAlloc DatatypeTypeType |right#0_0@0| (Tclass._module.Tree _module._default.MirrorSize$_T0) $Heap@3) (|_module.__default.size#canCall| _module._default.MirrorSize$_T0 |right#0_0@0|)) (and ($IsAlloc DatatypeTypeType |left#0_0@0| (Tclass._module.Tree _module._default.MirrorSize$_T0) $Heap@3) (|_module.__default.size#canCall| _module._default.MirrorSize$_T0 |left#0_0@0|))) (and (and (|_module.__default.size#canCall| _module._default.MirrorSize$_T0 |right#0_0@0|) (|_module.__default.size#canCall| _module._default.MirrorSize$_T0 |left#0_0@0|)) (= (ControlFlow 0 8) (- 0 7))))) (= (+ (+ 1 (_module.__default.size _module._default.MirrorSize$_T0 ($LS ($LS $LZ)) reveal__module._default.size (_module.__default.mirror _module._default.MirrorSize$_T0 ($LS ($LS $LZ)) reveal__module._default.mirror |right#0_0@0|))) (_module.__default.size _module._default.MirrorSize$_T0 ($LS ($LS $LZ)) reveal__module._default.size (_module.__default.mirror _module._default.MirrorSize$_T0 ($LS ($LS $LZ)) reveal__module._default.mirror |left#0_0@0|))) (+ (+ 1 (_module.__default.size _module._default.MirrorSize$_T0 ($LS ($LS $LZ)) reveal__module._default.size |right#0_0@0|)) (_module.__default.size _module._default.MirrorSize$_T0 ($LS ($LS $LZ)) reveal__module._default.size |left#0_0@0|))))))))))))))))
(let ((anon19_Then_correct  (=> ($IsAlloc DatatypeTypeType |right#0_0@0| (Tclass._module.Tree _module._default.MirrorSize$_T0) $Heap@@0) (=> (and (|_module.__default.mirror#canCall| _module._default.MirrorSize$_T0 |right#0_0@0|) ($IsAlloc DatatypeTypeType |left#0_0@0| (Tclass._module.Tree _module._default.MirrorSize$_T0) $Heap@@0)) (=> (and (and (|_module.__default.mirror#canCall| _module._default.MirrorSize$_T0 |left#0_0@0|) (= |##t#0_0_2_0@0| (|#_module.Tree.Node| (_module.__default.mirror _module._default.MirrorSize$_T0 ($LS $LZ) reveal__module._default.mirror |right#0_0@0|) (_module.__default.mirror _module._default.MirrorSize$_T0 ($LS $LZ) reveal__module._default.mirror |left#0_0@0|)))) (and ($IsAlloc DatatypeTypeType |##t#0_0_2_0@0| (Tclass._module.Tree _module._default.MirrorSize$_T0) $Heap@@0) (|_module.__default.size#canCall| _module._default.MirrorSize$_T0 (|#_module.Tree.Node| (_module.__default.mirror _module._default.MirrorSize$_T0 ($LS $LZ) reveal__module._default.mirror |right#0_0@0|) (_module.__default.mirror _module._default.MirrorSize$_T0 ($LS $LZ) reveal__module._default.mirror |left#0_0@0|))))) (=> (and (and (and (and (and (|_module.__default.mirror#canCall| _module._default.MirrorSize$_T0 |right#0_0@0|) (|_module.__default.mirror#canCall| _module._default.MirrorSize$_T0 |left#0_0@0|)) (|_module.__default.size#canCall| _module._default.MirrorSize$_T0 (|#_module.Tree.Node| (_module.__default.mirror _module._default.MirrorSize$_T0 ($LS $LZ) reveal__module._default.mirror |right#0_0@0|) (_module.__default.mirror _module._default.MirrorSize$_T0 ($LS $LZ) reveal__module._default.mirror |left#0_0@0|)))) (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1))) (and (and (= $Heap@@0 $Heap@1) reveal__module._default.size) (and ($IsAlloc DatatypeTypeType |right#0_0@0| (Tclass._module.Tree _module._default.MirrorSize$_T0) $Heap@1) (|_module.__default.mirror#canCall| _module._default.MirrorSize$_T0 |right#0_0@0|)))) (and (and (and (and (= |##t#0_0_2_3@0| (_module.__default.mirror _module._default.MirrorSize$_T0 ($LS $LZ) reveal__module._default.mirror |right#0_0@0|)) ($IsAlloc DatatypeTypeType |##t#0_0_2_3@0| (Tclass._module.Tree _module._default.MirrorSize$_T0) $Heap@1)) (and (|_module.__default.size#canCall| _module._default.MirrorSize$_T0 (_module.__default.mirror _module._default.MirrorSize$_T0 ($LS $LZ) reveal__module._default.mirror |right#0_0@0|)) ($IsAlloc DatatypeTypeType |left#0_0@0| (Tclass._module.Tree _module._default.MirrorSize$_T0) $Heap@1))) (and (and (|_module.__default.mirror#canCall| _module._default.MirrorSize$_T0 |left#0_0@0|) (= |##t#0_0_2_5@0| (_module.__default.mirror _module._default.MirrorSize$_T0 ($LS $LZ) reveal__module._default.mirror |left#0_0@0|))) (and ($IsAlloc DatatypeTypeType |##t#0_0_2_5@0| (Tclass._module.Tree _module._default.MirrorSize$_T0) $Heap@1) (|_module.__default.size#canCall| _module._default.MirrorSize$_T0 (_module.__default.mirror _module._default.MirrorSize$_T0 ($LS $LZ) reveal__module._default.mirror |left#0_0@0|))))) (and (and (and (|_module.__default.mirror#canCall| _module._default.MirrorSize$_T0 |right#0_0@0|) (|_module.__default.size#canCall| _module._default.MirrorSize$_T0 (_module.__default.mirror _module._default.MirrorSize$_T0 ($LS $LZ) reveal__module._default.mirror |right#0_0@0|))) (and (|_module.__default.mirror#canCall| _module._default.MirrorSize$_T0 |left#0_0@0|) (|_module.__default.size#canCall| _module._default.MirrorSize$_T0 (_module.__default.mirror _module._default.MirrorSize$_T0 ($LS $LZ) reveal__module._default.mirror |left#0_0@0|)))) (= (ControlFlow 0 6) (- 0 5))))) (= (_module.__default.size _module._default.MirrorSize$_T0 ($LS ($LS $LZ)) reveal__module._default.size (|#_module.Tree.Node| (_module.__default.mirror _module._default.MirrorSize$_T0 ($LS ($LS $LZ)) reveal__module._default.mirror |right#0_0@0|) (_module.__default.mirror _module._default.MirrorSize$_T0 ($LS ($LS $LZ)) reveal__module._default.mirror |left#0_0@0|))) (+ (+ 1 (_module.__default.size _module._default.MirrorSize$_T0 ($LS ($LS $LZ)) reveal__module._default.size (_module.__default.mirror _module._default.MirrorSize$_T0 ($LS ($LS $LZ)) reveal__module._default.mirror |right#0_0@0|))) (_module.__default.size _module._default.MirrorSize$_T0 ($LS ($LS $LZ)) reveal__module._default.size (_module.__default.mirror _module._default.MirrorSize$_T0 ($LS ($LS $LZ)) reveal__module._default.mirror |left#0_0@0|))))))))))
(let ((anon18_Then_correct  (=> (and (and (= |##t#0_0_3_1@0| (|#_module.Tree.Node| |left#0_0@0| |right#0_0@0|)) ($IsAlloc DatatypeTypeType |##t#0_0_3_1@0| (Tclass._module.Tree _module._default.MirrorSize$_T0) $Heap@@0)) (and (|_module.__default.mirror#canCall| _module._default.MirrorSize$_T0 (|#_module.Tree.Node| |left#0_0@0| |right#0_0@0|)) (= |##t#0_0_3_0@0| (_module.__default.mirror _module._default.MirrorSize$_T0 ($LS $LZ) reveal__module._default.mirror (|#_module.Tree.Node| |left#0_0@0| |right#0_0@0|))))) (=> (and (and (and ($IsAlloc DatatypeTypeType |##t#0_0_3_0@0| (Tclass._module.Tree _module._default.MirrorSize$_T0) $Heap@@0) (|_module.__default.size#canCall| _module._default.MirrorSize$_T0 (_module.__default.mirror _module._default.MirrorSize$_T0 ($LS $LZ) reveal__module._default.mirror (|#_module.Tree.Node| |left#0_0@0| |right#0_0@0|)))) (and (|_module.__default.mirror#canCall| _module._default.MirrorSize$_T0 (|#_module.Tree.Node| |left#0_0@0| |right#0_0@0|)) (|_module.__default.size#canCall| _module._default.MirrorSize$_T0 (_module.__default.mirror _module._default.MirrorSize$_T0 ($LS $LZ) reveal__module._default.mirror (|#_module.Tree.Node| |left#0_0@0| |right#0_0@0|))))) (and (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (= $Heap@@0 $Heap@0))) (=> (and (and (and (and reveal__module._default.mirror ($IsAlloc DatatypeTypeType |right#0_0@0| (Tclass._module.Tree _module._default.MirrorSize$_T0) $Heap@0)) (and (|_module.__default.mirror#canCall| _module._default.MirrorSize$_T0 |right#0_0@0|) ($IsAlloc DatatypeTypeType |left#0_0@0| (Tclass._module.Tree _module._default.MirrorSize$_T0) $Heap@0))) (and (and (|_module.__default.mirror#canCall| _module._default.MirrorSize$_T0 |left#0_0@0|) (= |##t#0_0_3_2@0| (|#_module.Tree.Node| (_module.__default.mirror _module._default.MirrorSize$_T0 ($LS $LZ) reveal__module._default.mirror |right#0_0@0|) (_module.__default.mirror _module._default.MirrorSize$_T0 ($LS $LZ) reveal__module._default.mirror |left#0_0@0|)))) (and ($IsAlloc DatatypeTypeType |##t#0_0_3_2@0| (Tclass._module.Tree _module._default.MirrorSize$_T0) $Heap@0) (|_module.__default.size#canCall| _module._default.MirrorSize$_T0 (|#_module.Tree.Node| (_module.__default.mirror _module._default.MirrorSize$_T0 ($LS $LZ) reveal__module._default.mirror |right#0_0@0|) (_module.__default.mirror _module._default.MirrorSize$_T0 ($LS $LZ) reveal__module._default.mirror |left#0_0@0|)))))) (and (and (and (|_module.__default.mirror#canCall| _module._default.MirrorSize$_T0 |right#0_0@0|) (|_module.__default.mirror#canCall| _module._default.MirrorSize$_T0 |left#0_0@0|)) (|_module.__default.size#canCall| _module._default.MirrorSize$_T0 (|#_module.Tree.Node| (_module.__default.mirror _module._default.MirrorSize$_T0 ($LS $LZ) reveal__module._default.mirror |right#0_0@0|) (_module.__default.mirror _module._default.MirrorSize$_T0 ($LS $LZ) reveal__module._default.mirror |left#0_0@0|)))) (= (ControlFlow 0 4) (- 0 3)))) (= (_module.__default.size _module._default.MirrorSize$_T0 ($LS ($LS $LZ)) reveal__module._default.size (_module.__default.mirror _module._default.MirrorSize$_T0 ($LS ($LS $LZ)) reveal__module._default.mirror (|#_module.Tree.Node| |left#0_0@0| |right#0_0@0|))) (_module.__default.size _module._default.MirrorSize$_T0 ($LS ($LS $LZ)) reveal__module._default.size (|#_module.Tree.Node| (_module.__default.mirror _module._default.MirrorSize$_T0 ($LS ($LS $LZ)) reveal__module._default.mirror |right#0_0@0|) (_module.__default.mirror _module._default.MirrorSize$_T0 ($LS ($LS $LZ)) reveal__module._default.mirror |left#0_0@0|)))))))))
(let ((anon17_Then_correct true))
(let ((anon16_Then_correct  (=> (= |t#0@@8| (|#_module.Tree.Node| |_mcc#1#0_0@0| |_mcc#2#0_0@0|)) (=> (and ($Is DatatypeTypeType |_mcc#1#0_0@0| (Tclass._module.Tree _module._default.MirrorSize$_T0)) ($Is DatatypeTypeType |_mcc#2#0_0@0| (Tclass._module.Tree _module._default.MirrorSize$_T0))) (=> (and (and (and (and ($Is DatatypeTypeType |right#0_0@0| (Tclass._module.Tree _module._default.MirrorSize$_T0)) ($IsAlloc DatatypeTypeType |right#0_0@0| (Tclass._module.Tree _module._default.MirrorSize$_T0) $Heap@@0)) (= |let#0_0#0#0| |_mcc#2#0_0@0|)) (and ($Is DatatypeTypeType |let#0_0#0#0| (Tclass._module.Tree _module._default.MirrorSize$_T0)) (= |right#0_0@0| |let#0_0#0#0|))) (and (and (and ($Is DatatypeTypeType |left#0_0@0| (Tclass._module.Tree _module._default.MirrorSize$_T0)) ($IsAlloc DatatypeTypeType |left#0_0@0| (Tclass._module.Tree _module._default.MirrorSize$_T0) $Heap@@0)) (= |let#0_1#0#0| |_mcc#1#0_0@0|)) (and ($Is DatatypeTypeType |let#0_1#0#0| (Tclass._module.Tree _module._default.MirrorSize$_T0)) (= |left#0_0@0| |let#0_1#0#0|)))) (and (and (and (and (and (=> (= (ControlFlow 0 16) 2) anon17_Then_correct) (=> (= (ControlFlow 0 16) 4) anon18_Then_correct)) (=> (= (ControlFlow 0 16) 6) anon19_Then_correct)) (=> (= (ControlFlow 0 16) 8) anon20_Then_correct)) (=> (= (ControlFlow 0 16) 12) anon21_Then_correct)) (=> (= (ControlFlow 0 16) 15) anon21_Else_correct)))))))
(let ((anon16_Else_correct true))
(let ((anon13_Else_correct  (=> (or (not (= |t#0@@8| (|#_module.Tree.Leaf| |_mcc#0#1_0@0|))) (not true)) (and (=> (= (ControlFlow 0 17) 16) anon16_Then_correct) (=> (= (ControlFlow 0 17) 1) anon16_Else_correct)))))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap@@0 alloc false)) (and (=> (= (ControlFlow 0 23) 22) anon13_Then_correct) (=> (= (ControlFlow 0 23) 17) anon13_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap@@0) ($IsHeapAnchor $Heap@@0)) (=> (and (and (and ($Is DatatypeTypeType |t#0@@8| (Tclass._module.Tree _module._default.MirrorSize$_T0)) ($IsAlloc DatatypeTypeType |t#0@@8| (Tclass._module.Tree _module._default.MirrorSize$_T0) $Heap@@0)) (|$IsA#_module.Tree| |t#0@@8|)) (and (= 2 $FunctionContextHeight) (= (ControlFlow 0 24) 23))) anon0_correct))))
PreconditionGeneratedEntry_correct)))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
