(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 (T@T) Int)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 (Bool) T@U)
(declare-fun $generated@@11 (T@U) Bool)
(declare-fun $generated@@12 (Int) T@U)
(declare-fun $generated@@13 (T@U) Int)
(declare-fun $generated@@14 (Real) T@U)
(declare-fun $generated@@15 (T@U) Real)
(declare-fun $generated@@22 (T@U) T@U)
(declare-fun $generated@@23 (T@U) T@U)
(declare-fun $generated@@24 () T@U)
(declare-fun $generated@@25 () Int)
(declare-fun $generated@@26 (T@U Int) T@U)
(declare-fun $generated@@27 (Int) Bool)
(declare-fun $generated@@28 (T@T T@U T@U) Bool)
(declare-fun $generated@@29 () T@T)
(declare-fun $generated@@30 (T@U) T@U)
(declare-fun $generated@@33 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@34 (T@U) Bool)
(declare-fun $generated@@38 (Int) Int)
(declare-fun $generated@@40 (T@T T@U) T@U)
(declare-fun $generated@@43 (T@U T@U) T@U)
(declare-fun $generated@@44 (T@U T@U) Bool)
(declare-fun $generated@@48 (T@U) Bool)
(declare-fun $generated@@50 (T@U) Bool)
(declare-fun $generated@@52 (T@T T@U) T@U)
(declare-fun $generated@@53 (T@T T@U) T@U)
(declare-fun $generated@@60 (T@U T@U T@U) Bool)
(declare-fun $generated@@65 (T@U) T@U)
(declare-fun $generated@@67 (T@U) T@U)
(declare-fun $generated@@68 (Int Int) Int)
(declare-fun $generated@@79 (T@U) T@U)
(declare-fun $generated@@82 (T@U) T@U)
(declare-fun $generated@@85 (T@U) T@U)
(declare-fun $generated@@94 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@95 () T@T)
(declare-fun $generated@@96 () T@T)
(declare-fun $generated@@97 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@98 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@99 () T@T)
(declare-fun $generated@@100 (T@T T@T) T@T)
(declare-fun $generated@@101 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@102 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@103 (T@T) T@T)
(declare-fun $generated@@104 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@6 $generated@@7) 0) (= ($generated@@6 $generated@@8) 1)) (= ($generated@@6 $generated@@9) 2)) (forall (($generated@@16 Bool) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Int) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Real) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5)
)
(assert (= ($generated@@22 $generated) $generated@@0))
(assert (= ($generated@@23 $generated@@24) $generated@@3))
(assert (= ($generated@@6 $generated@@29) 3))
(assert  (=> (<= 1 $generated@@25) (forall (($generated@@31 T@U) ($generated@@32 Int) ) (!  (=> (or ($generated@@27 $generated@@32) (< 1 $generated@@25)) ($generated@@28 $generated@@29 ($generated@@26 $generated@@31 $generated@@32) ($generated@@30 $generated)))
 :pattern ( ($generated@@26 $generated@@31 $generated@@32))
))))
(assert (forall (($generated@@35 T@U) ($generated@@36 T@U) ) (!  (=> ($generated@@34 $generated@@36) ($generated@@33 $generated@@29 $generated@@24 ($generated@@30 $generated@@35) $generated@@36))
 :pattern ( ($generated@@33 $generated@@29 $generated@@24 ($generated@@30 $generated@@35) $generated@@36))
)))
(assert (forall (($generated@@37 T@U) ) (! ($generated@@28 $generated@@29 $generated@@24 ($generated@@30 $generated@@37))
 :pattern ( ($generated@@28 $generated@@29 $generated@@24 ($generated@@30 $generated@@37)))
)))
(assert (forall (($generated@@39 Int) ) (! (= ($generated@@38 $generated@@39) $generated@@39)
 :pattern ( ($generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@T) ) (! (= ($generated@@40 $generated@@42 $generated@@41) $generated@@41)
 :pattern ( ($generated@@40 $generated@@42 $generated@@41))
)))
(assert (forall (($generated@@45 T@U) ($generated@@46 T@U) ($generated@@47 T@U) ) (! (= ($generated@@28 $generated@@29 ($generated@@43 $generated@@46 $generated@@47) ($generated@@30 $generated@@45))  (and ($generated@@44 $generated@@46 $generated@@45) ($generated@@28 $generated@@29 $generated@@47 ($generated@@30 $generated@@45))))
 :pattern ( ($generated@@28 $generated@@29 ($generated@@43 $generated@@46 $generated@@47) ($generated@@30 $generated@@45)))
)))
(assert (forall (($generated@@49 T@U) ) (! (= ($generated@@48 $generated@@49) (= ($generated@@23 $generated@@49) $generated@@3))
 :pattern ( ($generated@@48 $generated@@49))
)))
(assert (forall (($generated@@51 T@U) ) (! (= ($generated@@50 $generated@@51) (= ($generated@@23 $generated@@51) $generated@@4))
 :pattern ( ($generated@@50 $generated@@51))
)))
(assert (forall (($generated@@54 T@U) ($generated@@55 T@T) ) (! (= ($generated@@53 $generated@@55 ($generated@@52 $generated@@55 $generated@@54)) $generated@@54)
 :pattern ( ($generated@@52 $generated@@55 $generated@@54))
)))
(assert (forall (($generated@@56 T@U) ) (!  (=> ($generated@@50 $generated@@56) (exists (($generated@@57 T@U) ($generated@@58 T@U) ) (= $generated@@56 ($generated@@43 $generated@@57 $generated@@58))))
 :pattern ( ($generated@@50 $generated@@56))
)))
(assert (forall (($generated@@59 T@U) ) (!  (=> ($generated@@48 $generated@@59) (= $generated@@59 $generated@@24))
 :pattern ( ($generated@@48 $generated@@59))
)))
(assert (forall (($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@U) ($generated@@64 T@T) ) (! (= ($generated@@60 ($generated@@53 $generated@@64 $generated@@61) $generated@@62 $generated@@63) ($generated@@33 $generated@@64 $generated@@61 $generated@@62 $generated@@63))
 :pattern ( ($generated@@60 ($generated@@53 $generated@@64 $generated@@61) $generated@@62 $generated@@63))
)))
(assert (forall (($generated@@66 T@U) ) (!  (and (= ($generated@@22 ($generated@@30 $generated@@66)) $generated@@2) (= ($generated@@65 ($generated@@30 $generated@@66)) $generated@@5))
 :pattern ( ($generated@@30 $generated@@66))
)))
(assert  (=> (<= 1 $generated@@25) (forall (($generated@@69 T@U) ($generated@@70 Int) ) (!  (=> (or ($generated@@27 $generated@@70) (< 1 $generated@@25)) (and (and (=> (= ($generated@@68 $generated@@70 ($generated@@38 5)) ($generated@@38 0)) ($generated@@27 (+ $generated@@70 1))) (=> (or (not (= ($generated@@68 $generated@@70 ($generated@@38 5)) ($generated@@38 0))) (not true)) ($generated@@27 (+ $generated@@70 1)))) (= ($generated@@26 ($generated@@67 $generated@@69) $generated@@70) (ite (= ($generated@@68 $generated@@70 ($generated@@38 5)) ($generated@@38 0)) ($generated@@43 ($generated@@53 $generated@@8 ($generated@@12 $generated@@70)) ($generated@@26 $generated@@69 (+ $generated@@70 1))) ($generated@@26 $generated@@69 (+ $generated@@70 1))))))
 :pattern ( ($generated@@26 ($generated@@67 $generated@@69) $generated@@70))
))))
(assert (forall (($generated@@71 T@U) ($generated@@72 T@U) ) (!  (=> ($generated@@28 $generated@@29 $generated@@72 ($generated@@30 $generated@@71)) (or ($generated@@48 $generated@@72) ($generated@@50 $generated@@72)))
 :pattern ( ($generated@@50 $generated@@72) ($generated@@28 $generated@@29 $generated@@72 ($generated@@30 $generated@@71)))
 :pattern ( ($generated@@48 $generated@@72) ($generated@@28 $generated@@29 $generated@@72 ($generated@@30 $generated@@71)))
)))
(assert (forall (($generated@@73 T@U) ) (!  (=> ($generated@@44 $generated@@73 $generated) (and (= ($generated@@53 $generated@@8 ($generated@@52 $generated@@8 $generated@@73)) $generated@@73) ($generated@@28 $generated@@8 ($generated@@52 $generated@@8 $generated@@73) $generated)))
 :pattern ( ($generated@@44 $generated@@73 $generated))
)))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@T) ) (! (= ($generated@@44 ($generated@@53 $generated@@76 $generated@@74) $generated@@75) ($generated@@28 $generated@@76 $generated@@74 $generated@@75))
 :pattern ( ($generated@@44 ($generated@@53 $generated@@76 $generated@@74) $generated@@75))
)))
(assert (forall (($generated@@77 T@U) ($generated@@78 T@U) ) (! (= ($generated@@23 ($generated@@43 $generated@@77 $generated@@78)) $generated@@4)
 :pattern ( ($generated@@43 $generated@@77 $generated@@78))
)))
(assert (forall (($generated@@80 T@U) ($generated@@81 T@U) ) (! (= ($generated@@79 ($generated@@43 $generated@@80 $generated@@81)) $generated@@80)
 :pattern ( ($generated@@43 $generated@@80 $generated@@81))
)))
(assert (forall (($generated@@83 T@U) ($generated@@84 T@U) ) (! (= ($generated@@82 ($generated@@43 $generated@@83 $generated@@84)) $generated@@84)
 :pattern ( ($generated@@43 $generated@@83 $generated@@84))
)))
(assert (forall (($generated@@86 T@U) ) (! (= ($generated@@85 ($generated@@30 $generated@@86)) $generated@@86)
 :pattern ( ($generated@@30 $generated@@86))
)))
(assert (forall (($generated@@87 T@U) ($generated@@88 T@T) ) (! (= ($generated@@52 $generated@@88 ($generated@@53 $generated@@88 $generated@@87)) $generated@@87)
 :pattern ( ($generated@@53 $generated@@88 $generated@@87))
)))
(assert (forall (($generated@@89 T@U) ($generated@@90 Int) ) (! (= ($generated@@26 ($generated@@67 $generated@@89) $generated@@90) ($generated@@26 $generated@@89 $generated@@90))
 :pattern ( ($generated@@26 ($generated@@67 $generated@@89) $generated@@90))
)))
(assert (forall (($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ) (!  (=> (and ($generated@@34 $generated@@93) (and ($generated@@50 $generated@@91) ($generated@@33 $generated@@29 $generated@@91 ($generated@@30 $generated@@92) $generated@@93))) ($generated@@60 ($generated@@79 $generated@@91) $generated@@92 $generated@@93))
 :pattern ( ($generated@@60 ($generated@@79 $generated@@91) $generated@@92 $generated@@93))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@105 T@T) ($generated@@106 T@T) ($generated@@107 T@T) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (! (= ($generated@@94 $generated@@105 $generated@@106 $generated@@107 ($generated@@101 $generated@@105 $generated@@106 $generated@@107 $generated@@109 $generated@@110 $generated@@111 $generated@@108) $generated@@110 $generated@@111) $generated@@108)
 :weight 0
)) (and (forall (($generated@@112 T@T) ($generated@@113 T@T) ($generated@@114 T@T) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (!  (or (= $generated@@117 $generated@@119) (= ($generated@@94 $generated@@112 $generated@@113 $generated@@114 ($generated@@101 $generated@@112 $generated@@113 $generated@@114 $generated@@116 $generated@@117 $generated@@118 $generated@@115) $generated@@119 $generated@@120) ($generated@@94 $generated@@112 $generated@@113 $generated@@114 $generated@@116 $generated@@119 $generated@@120)))
 :weight 0
)) (forall (($generated@@121 T@T) ($generated@@122 T@T) ($generated@@123 T@T) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 T@U) ) (!  (or (= $generated@@127 $generated@@129) (= ($generated@@94 $generated@@121 $generated@@122 $generated@@123 ($generated@@101 $generated@@121 $generated@@122 $generated@@123 $generated@@125 $generated@@126 $generated@@127 $generated@@124) $generated@@128 $generated@@129) ($generated@@94 $generated@@121 $generated@@122 $generated@@123 $generated@@125 $generated@@128 $generated@@129)))
 :weight 0
)))) (= ($generated@@6 $generated@@95) 4)) (= ($generated@@6 $generated@@96) 5)) (forall (($generated@@130 T@T) ($generated@@131 T@T) ($generated@@132 T@U) ($generated@@133 T@U) ($generated@@134 T@U) ) (! (= ($generated@@98 $generated@@130 $generated@@131 ($generated@@102 $generated@@130 $generated@@131 $generated@@133 $generated@@134 $generated@@132) $generated@@134) $generated@@132)
 :weight 0
))) (forall (($generated@@135 T@T) ($generated@@136 T@T) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ($generated@@140 T@U) ) (!  (or (= $generated@@139 $generated@@140) (= ($generated@@98 $generated@@135 $generated@@136 ($generated@@102 $generated@@135 $generated@@136 $generated@@138 $generated@@139 $generated@@137) $generated@@140) ($generated@@98 $generated@@135 $generated@@136 $generated@@138 $generated@@140)))
 :weight 0
))) (= ($generated@@6 $generated@@99) 6)) (forall (($generated@@141 T@T) ($generated@@142 T@T) ) (= ($generated@@6 ($generated@@100 $generated@@141 $generated@@142)) 7))) (forall (($generated@@143 T@T) ($generated@@144 T@T) ) (! (= ($generated@@103 ($generated@@100 $generated@@143 $generated@@144)) $generated@@143)
 :pattern ( ($generated@@100 $generated@@143 $generated@@144))
))) (forall (($generated@@145 T@T) ($generated@@146 T@T) ) (! (= ($generated@@104 ($generated@@100 $generated@@145 $generated@@146)) $generated@@146)
 :pattern ( ($generated@@100 $generated@@145 $generated@@146))
))))
(assert (forall (($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 Bool) ($generated@@151 T@U) ($generated@@152 T@U) ) (! (= ($generated@@11 ($generated@@94 $generated@@95 $generated@@96 $generated@@7 ($generated@@97 $generated@@147 $generated@@148 $generated@@149 $generated@@150) $generated@@151 $generated@@152))  (=> (and (or (not (= $generated@@151 $generated@@147)) (not true)) ($generated@@11 ($generated@@52 $generated@@7 ($generated@@98 $generated@@96 $generated@@99 ($generated@@98 $generated@@95 ($generated@@100 $generated@@96 $generated@@99) $generated@@148 $generated@@151) $generated@@149)))) $generated@@150))
 :pattern ( ($generated@@94 $generated@@95 $generated@@96 $generated@@7 ($generated@@97 $generated@@147 $generated@@148 $generated@@149 $generated@@150) $generated@@151 $generated@@152))
)))
(assert (forall (($generated@@153 Int) ($generated@@154 Int) ) (! (= ($generated@@68 $generated@@153 $generated@@154) (mod $generated@@153 $generated@@154))
 :pattern ( ($generated@@68 $generated@@153 $generated@@154))
)))
(assert (forall (($generated@@155 T@U) ($generated@@156 T@U) ) (!  (=> ($generated@@44 $generated@@156 ($generated@@30 $generated@@155)) (and (= ($generated@@53 $generated@@29 ($generated@@52 $generated@@29 $generated@@156)) $generated@@156) ($generated@@28 $generated@@29 ($generated@@52 $generated@@29 $generated@@156) ($generated@@30 $generated@@155))))
 :pattern ( ($generated@@44 $generated@@156 ($generated@@30 $generated@@155)))
)))
(assert (forall (($generated@@157 T@U) ($generated@@158 T@U) ($generated@@159 T@U) ) (!  (=> (and ($generated@@34 $generated@@159) (and ($generated@@50 $generated@@157) ($generated@@33 $generated@@29 $generated@@157 ($generated@@30 $generated@@158) $generated@@159))) ($generated@@33 $generated@@29 ($generated@@82 $generated@@157) ($generated@@30 $generated@@158) $generated@@159))
 :pattern ( ($generated@@33 $generated@@29 ($generated@@82 $generated@@157) ($generated@@30 $generated@@158) $generated@@159))
)))
(assert (forall (($generated@@160 Int) ) (! (= ($generated@@53 $generated@@8 ($generated@@12 ($generated@@38 $generated@@160))) ($generated@@40 $generated@@99 ($generated@@53 $generated@@8 ($generated@@12 $generated@@160))))
 :pattern ( ($generated@@53 $generated@@8 ($generated@@12 ($generated@@38 $generated@@160))))
)))
(assert (forall (($generated@@161 T@U) ($generated@@162 T@T) ) (! (= ($generated@@53 $generated@@162 ($generated@@40 $generated@@162 $generated@@161)) ($generated@@40 $generated@@99 ($generated@@53 $generated@@162 $generated@@161)))
 :pattern ( ($generated@@53 $generated@@162 ($generated@@40 $generated@@162 $generated@@161)))
)))
(assert (forall (($generated@@163 T@U) ($generated@@164 T@U) ) (! ($generated@@33 $generated@@8 $generated@@164 $generated $generated@@163)
 :pattern ( ($generated@@33 $generated@@8 $generated@@164 $generated $generated@@163))
)))
(assert (forall (($generated@@165 T@U) ($generated@@166 T@U) ($generated@@167 T@U) ($generated@@168 T@U) ) (!  (=> ($generated@@34 $generated@@168) (= ($generated@@33 $generated@@29 ($generated@@43 $generated@@166 $generated@@167) ($generated@@30 $generated@@165) $generated@@168)  (and ($generated@@60 $generated@@166 $generated@@165 $generated@@168) ($generated@@33 $generated@@29 $generated@@167 ($generated@@30 $generated@@165) $generated@@168))))
 :pattern ( ($generated@@33 $generated@@29 ($generated@@43 $generated@@166 $generated@@167) ($generated@@30 $generated@@165) $generated@@168))
)))
(assert (forall (($generated@@169 T@U) ) (! ($generated@@28 $generated@@8 $generated@@169 $generated)
 :pattern ( ($generated@@28 $generated@@8 $generated@@169 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@170 () Int)
(declare-fun $generated@@171 () Int)
(declare-fun $generated@@172 () T@U)
(declare-fun $generated@@173 () T@U)
(declare-fun $generated@@174 () T@U)
(declare-fun $generated@@175 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 11) (let (($generated@@176  (=> (or (not (= ($generated@@68 $generated@@170 ($generated@@38 5)) ($generated@@38 0))) (not true)) (=> (and (= $generated@@171 (+ $generated@@170 1)) ($generated@@33 $generated@@8 ($generated@@12 $generated@@171) $generated $generated@@172)) (and (=> (= (ControlFlow 0 4) (- 0 6)) (or (<= 0 ($generated@@38 1)) (= ($generated@@38 1) ($generated@@38 1)))) (=> (or (<= 0 ($generated@@38 1)) (= ($generated@@38 1) ($generated@@38 1))) (and (=> (= (ControlFlow 0 4) (- 0 5)) (or (or (<= 0 (- 4 ($generated@@68 (- $generated@@170 1) ($generated@@38 5)))) (< ($generated@@38 1) ($generated@@38 1))) (= (- 4 ($generated@@68 (- $generated@@171 1) ($generated@@38 5))) (- 4 ($generated@@68 (- $generated@@170 1) ($generated@@38 5)))))) (=> (or (or (<= 0 (- 4 ($generated@@68 (- $generated@@170 1) ($generated@@38 5)))) (< ($generated@@38 1) ($generated@@38 1))) (= (- 4 ($generated@@68 (- $generated@@171 1) ($generated@@38 5))) (- 4 ($generated@@68 (- $generated@@170 1) ($generated@@38 5))))) (=> (= (ControlFlow 0 4) (- 0 3)) (or (< ($generated@@38 1) ($generated@@38 1)) (and (= ($generated@@38 1) ($generated@@38 1)) (< (- 4 ($generated@@68 (- $generated@@171 1) ($generated@@38 5))) (- 4 ($generated@@68 (- $generated@@170 1) ($generated@@38 5)))))))))))))))
(let (($generated@@177 true))
(let (($generated@@178  (and (=> (= (ControlFlow 0 7) (- 0 8)) (or (not (= ($generated@@38 5) 0)) (not true))) (=> (or (not (= ($generated@@38 5) 0)) (not true)) (and (=> (= (ControlFlow 0 7) 2) $generated@@177) (=> (= (ControlFlow 0 7) 4) $generated@@176))))))
(let (($generated@@179 true))
(let (($generated@@180  (=> (= $generated@@173 ($generated@@97 $generated@@174 $generated@@172 $generated@@1 false)) (and (=> (= (ControlFlow 0 9) (- 0 10)) (or (not (= ($generated@@38 5) 0)) (not true))) (=> (or (not (= ($generated@@38 5) 0)) (not true)) (and (=> (= (ControlFlow 0 9) 1) $generated@@179) (=> (= (ControlFlow 0 9) 7) $generated@@178)))))))
(let (($generated@@181  (=> (and (and ($generated@@34 $generated@@172) ($generated@@175 $generated@@172)) (and (= 1 $generated@@25) (= (ControlFlow 0 11) 9))) $generated@@180)))
$generated@@181)))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
