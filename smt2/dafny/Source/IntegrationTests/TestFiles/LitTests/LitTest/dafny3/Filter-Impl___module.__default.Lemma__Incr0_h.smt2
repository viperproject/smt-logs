(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._System.___hFunc1 () T@U)
(declare-fun Tagclass._System.___hPartialFunc1 () T@U)
(declare-fun Tagclass._System.___hTotalFunc1 () T@U)
(declare-fun Tagclass._module.Stream () T@U)
(declare-fun |##_module.Stream.Cons| () T@U)
(declare-fun |tytagFamily$_#Func1| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1| () T@U)
(declare-fun |tytagFamily$_#TotalFunc1| () T@U)
(declare-fun tytagFamily$Stream () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun |ORD#Less| (T@U T@U) Bool)
(declare-fun |$IsA#_module.Stream| (T@U) Bool)
(declare-fun _module.Stream.Cons_q (T@U) Bool)
(declare-fun |ORD#Minus| (T@U T@U) T@U)
(declare-fun |ORD#FromNat| (Int) T@U)
(declare-fun |ORD#Offset| (T@U) Int)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun |Set#Empty| () T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun Tclass._module.Stream (T@U) T@U)
(declare-fun HandleTypeType () T@T)
(declare-fun Tclass._System.___hFunc1 (T@U T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.IncrFrom (T@U T@U T@U Int T@U) Bool)
(declare-fun $LS (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1 (T@U T@U) T@U)
(declare-fun _module.__default.IncrFrom_h (T@U T@U Int T@U Int T@U) Bool)
(declare-fun LitInt (Int) Int)
(declare-fun _module.__default.Increasing_h (T@U T@U T@U T@U T@U) Bool)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun |_module.__default.Increasing_h#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun _module.Stream.tail (T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun Apply1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun _module.Stream.head (T@U) T@U)
(declare-fun Reads1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun $OneHeap () T@U)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun |#_module.Stream.Cons| (T@U T@U) T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun TagFamily (T@U) T@U)
(declare-fun |ORD#IsNat| (T@U) Bool)
(declare-fun Tclass._System.___hPartialFunc1 (T@U T@U) T@U)
(declare-fun Requires1 (T@U T@U T@U T@U T@U) Bool)
(declare-fun |_module.__default.IncrFrom_h#canCall| (T@U Int T@U Int T@U) Bool)
(declare-fun |_module.__default.IncrFrom#canCall| (T@U T@U Int T@U) Bool)
(declare-fun Tclass._System.___hFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1_1 (T@U) T@U)
(declare-fun Tclass._module.Stream_0 (T@U) T@U)
(declare-fun refType () T@T)
(declare-fun null () T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt alloc Tagclass._System.___hFunc1 Tagclass._System.___hPartialFunc1 Tagclass._System.___hTotalFunc1 Tagclass._module.Stream |##_module.Stream.Cons| |tytagFamily$_#Func1| |tytagFamily$_#PartialFunc1| |tytagFamily$_#TotalFunc1| tytagFamily$Stream)
)
(assert (= (Tag TInt) TagInt))
(assert (forall ((o T@U) (p T@U) (r T@U) ) (!  (=> (and (|ORD#Less| o p) (|ORD#Less| p r)) (|ORD#Less| o r))
 :pattern ( (|ORD#Less| o p) (|ORD#Less| p r))
 :pattern ( (|ORD#Less| o p) (|ORD#Less| o r))
)))
(assert (forall ((d T@U) ) (!  (=> (|$IsA#_module.Stream| d) (_module.Stream.Cons_q d))
 :pattern ( (|$IsA#_module.Stream| d))
)))
(assert (forall ((o@@0 T@U) (m Int) (n Int) ) (!  (=> (and (and (<= 0 m) (<= 0 n)) (<= (+ m n) (|ORD#Offset| o@@0))) (= (|ORD#Minus| (|ORD#Minus| o@@0 (|ORD#FromNat| m)) (|ORD#FromNat| n)) (|ORD#Minus| o@@0 (|ORD#FromNat| (+ m n)))))
 :pattern ( (|ORD#Minus| (|ORD#Minus| o@@0 (|ORD#FromNat| m)) (|ORD#FromNat| n)))
)))
(assert (forall ((o@@1 T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o@@1))
 :pattern ( (|Set#IsMember| |Set#Empty| o@@1))
)))
(assert (= (Ctor DatatypeTypeType) 3))
(assert (forall ((_module.Stream$T T@U) (d@@0 T@U) ) (!  (=> ($Is DatatypeTypeType d@@0 (Tclass._module.Stream _module.Stream$T)) (_module.Stream.Cons_q d@@0))
 :pattern ( (_module.Stream.Cons_q d@@0) ($Is DatatypeTypeType d@@0 (Tclass._module.Stream _module.Stream$T)))
)))
(assert (= (Ctor HandleTypeType) 4))
(assert (forall ((f T@U) (t0 T@U) (t1 T@U) (u0 T@U) (u1 T@U) ) (!  (=> (and (and ($Is HandleTypeType f (Tclass._System.___hFunc1 t0 t1)) (forall ((bx T@U) ) (!  (=> ($IsBox bx u0) ($IsBox bx t0))
 :pattern ( ($IsBox bx u0))
 :pattern ( ($IsBox bx t0))
))) (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 t1) ($IsBox bx@@0 u1))
 :pattern ( ($IsBox bx@@0 t1))
 :pattern ( ($IsBox bx@@0 u1))
))) ($Is HandleTypeType f (Tclass._System.___hFunc1 u0 u1)))
 :pattern ( ($Is HandleTypeType f (Tclass._System.___hFunc1 t0 t1)) ($Is HandleTypeType f (Tclass._System.___hFunc1 u0 u1)))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|_module._default.IncrFrom#$_T0| T@U) ($ly T@U) (|s#0| T@U) (|low#0| Int) (|ord#0| T@U) ) (!  (=> (and (and ($Is DatatypeTypeType |s#0| (Tclass._module.Stream |_module._default.IncrFrom#$_T0|)) ($Is HandleTypeType |ord#0| (Tclass._System.___hTotalFunc1 |_module._default.IncrFrom#$_T0| TInt))) (forall ((|_k#0| Int) ) (!  (=> (<= (LitInt 0) |_k#0|) (_module.__default.IncrFrom_h |_module._default.IncrFrom#$_T0| ($LS $ly) |_k#0| |s#0| |low#0| |ord#0|))
 :pattern ( (_module.__default.IncrFrom_h |_module._default.IncrFrom#$_T0| ($LS $ly) |_k#0| |s#0| |low#0| |ord#0|))
))) (_module.__default.IncrFrom |_module._default.IncrFrom#$_T0| ($LS $ly) |s#0| |low#0| |ord#0|))
 :pattern ( (_module.__default.IncrFrom |_module._default.IncrFrom#$_T0| ($LS $ly) |s#0| |low#0| |ord#0|))
))))
(assert (= (Ctor BoxType) 5))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|_module._default.Increasing#$_T0| T@U) ($ly@@0 T@U) ($Heap T@U) (|_k#0@@0| T@U) (|s#0@@0| T@U) (|ord#0@@0| T@U) ) (!  (=> (or (|_module.__default.Increasing_h#canCall| |_module._default.Increasing#$_T0| (Lit BoxType |_k#0@@0|) (Lit DatatypeTypeType |s#0@@0|) (Lit HandleTypeType |ord#0@@0|)) (and (< 2 $FunctionContextHeight) (and (and ($IsGoodHeap $Heap) ($Is DatatypeTypeType |s#0@@0| (Tclass._module.Stream |_module._default.Increasing#$_T0|))) ($Is HandleTypeType |ord#0@@0| (Tclass._System.___hTotalFunc1 |_module._default.Increasing#$_T0| TInt))))) (and (and (=> (< 0 (|ORD#Offset| |_k#0@@0|)) (and (and (_module.Stream.Cons_q (Lit DatatypeTypeType |s#0@@0|)) (and (_module.Stream.Cons_q (Lit DatatypeTypeType |s#0@@0|)) (_module.Stream.Cons_q (Lit DatatypeTypeType (_module.Stream.tail (Lit DatatypeTypeType |s#0@@0|)))))) (=> (< (U_2_int ($Unbox intType (Apply1 |_module._default.Increasing#$_T0| TInt $Heap (Lit HandleTypeType |ord#0@@0|) (Lit BoxType (_module.Stream.head (Lit DatatypeTypeType |s#0@@0|)))))) (U_2_int ($Unbox intType (Apply1 |_module._default.Increasing#$_T0| TInt $Heap (Lit HandleTypeType |ord#0@@0|) (Lit BoxType (_module.Stream.head (Lit DatatypeTypeType (_module.Stream.tail (Lit DatatypeTypeType |s#0@@0|))))))))) (and (_module.Stream.Cons_q (Lit DatatypeTypeType |s#0@@0|)) (|_module.__default.Increasing_h#canCall| |_module._default.Increasing#$_T0| (|ORD#Minus| |_k#0@@0| (|ORD#FromNat| 1)) (Lit DatatypeTypeType (_module.Stream.tail (Lit DatatypeTypeType |s#0@@0|))) (Lit HandleTypeType |ord#0@@0|)))))) (=> (=> (< 0 (|ORD#Offset| |_k#0@@0|)) (and (< (U_2_int ($Unbox intType (Apply1 |_module._default.Increasing#$_T0| TInt $Heap (Lit HandleTypeType |ord#0@@0|) (Lit BoxType (_module.Stream.head (Lit DatatypeTypeType |s#0@@0|)))))) (U_2_int ($Unbox intType (Apply1 |_module._default.Increasing#$_T0| TInt $Heap (Lit HandleTypeType |ord#0@@0|) (Lit BoxType (_module.Stream.head (Lit DatatypeTypeType (_module.Stream.tail (Lit DatatypeTypeType |s#0@@0|))))))))) (_module.__default.Increasing_h |_module._default.Increasing#$_T0| ($LS $ly@@0) (|ORD#Minus| |_k#0@@0| (|ORD#FromNat| 1)) (Lit DatatypeTypeType (_module.Stream.tail (Lit DatatypeTypeType |s#0@@0|))) (Lit HandleTypeType |ord#0@@0|)))) (=> (= (LitInt 0) (|ORD#Offset| |_k#0@@0|)) (forall ((|_k'#2| T@U) ) (!  (=> (|ORD#Less| |_k'#2| |_k#0@@0|) (|_module.__default.Increasing_h#canCall| |_module._default.Increasing#$_T0| |_k'#2| |s#0@@0| |ord#0@@0|))
 :pattern ( (_module.__default.Increasing_h |_module._default.Increasing#$_T0| ($LS $ly@@0) |_k'#2| |s#0@@0| |ord#0@@0|))
))))) (= (_module.__default.Increasing_h |_module._default.Increasing#$_T0| ($LS $ly@@0) (Lit BoxType |_k#0@@0|) (Lit DatatypeTypeType |s#0@@0|) (Lit HandleTypeType |ord#0@@0|))  (and (=> (< 0 (|ORD#Offset| |_k#0@@0|)) (and (< (U_2_int ($Unbox intType (Apply1 |_module._default.Increasing#$_T0| TInt $Heap (Lit HandleTypeType |ord#0@@0|) (Lit BoxType (_module.Stream.head (Lit DatatypeTypeType |s#0@@0|)))))) (U_2_int ($Unbox intType (Apply1 |_module._default.Increasing#$_T0| TInt $Heap (Lit HandleTypeType |ord#0@@0|) (Lit BoxType (_module.Stream.head (Lit DatatypeTypeType (_module.Stream.tail (Lit DatatypeTypeType |s#0@@0|))))))))) (_module.__default.Increasing_h |_module._default.Increasing#$_T0| ($LS $ly@@0) (|ORD#Minus| |_k#0@@0| (|ORD#FromNat| 1)) (Lit DatatypeTypeType (_module.Stream.tail (Lit DatatypeTypeType |s#0@@0|))) (Lit HandleTypeType |ord#0@@0|)))) (=> (= (LitInt 0) (|ORD#Offset| |_k#0@@0|)) (forall ((|_k'#2@@0| T@U) ) (!  (=> (|ORD#Less| |_k'#2@@0| |_k#0@@0|) (_module.__default.Increasing_h |_module._default.Increasing#$_T0| ($LS $ly@@0) |_k'#2@@0| |s#0@@0| |ord#0@@0|))
 :pattern ( (_module.__default.Increasing_h |_module._default.Increasing#$_T0| ($LS $ly@@0) |_k'#2@@0| |s#0@@0| |ord#0@@0|))
)))))))
 :weight 3
 :pattern ( (_module.__default.Increasing_h |_module._default.Increasing#$_T0| ($LS $ly@@0) (Lit BoxType |_k#0@@0|) (Lit DatatypeTypeType |s#0@@0|) (Lit HandleTypeType |ord#0@@0|)) ($IsGoodHeap $Heap))
))))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((t0@@0 T@U) (t1@@0 T@U) (heap T@U) (f@@0 T@U) (bx0 T@U) ) (!  (=> (and ($IsGoodHeap heap) (and ($IsBox bx0 t0@@0) ($Is HandleTypeType f@@0 (Tclass._System.___hFunc1 t0@@0 t1@@0)))) (= (|Set#Equal| (Reads1 t0@@0 t1@@0 $OneHeap f@@0 bx0) |Set#Empty|) (|Set#Equal| (Reads1 t0@@0 t1@@0 heap f@@0 bx0) |Set#Empty|)))
 :pattern ( (Reads1 t0@@0 t1@@0 $OneHeap f@@0 bx0) ($IsGoodHeap heap))
 :pattern ( (Reads1 t0@@0 t1@@0 heap f@@0 bx0))
)))
(assert (forall ((_module.Stream$T@@0 T@U) (|a#2#0#0| T@U) (|a#2#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Stream.Cons| |a#2#0#0| |a#2#1#0|) (Tclass._module.Stream _module.Stream$T@@0))  (and ($IsBox |a#2#0#0| _module.Stream$T@@0) ($Is DatatypeTypeType |a#2#1#0| (Tclass._module.Stream _module.Stream$T@@0))))
 :pattern ( ($Is DatatypeTypeType (|#_module.Stream.Cons| |a#2#0#0| |a#2#1#0|) (Tclass._module.Stream _module.Stream$T@@0)))
)))
(assert (forall ((d@@1 T@U) ) (! (= (_module.Stream.Cons_q d@@1) (= (DatatypeCtorId d@@1) |##_module.Stream.Cons|))
 :pattern ( (_module.Stream.Cons_q d@@1))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((d@@2 T@U) ) (!  (=> (_module.Stream.Cons_q d@@2) (exists ((|a#1#0#0| T@U) (|a#1#1#0| T@U) ) (= d@@2 (|#_module.Stream.Cons| |a#1#0#0| |a#1#1#0|))))
 :pattern ( (_module.Stream.Cons_q d@@2))
)))
(assert ($IsGoodHeap $OneHeap))
(assert (forall ((v T@U) (t T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v) t h) ($IsAlloc T@@1 v t h))
 :pattern ( ($IsAllocBox ($Box T@@1 v) t h))
)))
(assert (forall ((_module.Stream$T@@1 T@U) ) (!  (and (= (Tag (Tclass._module.Stream _module.Stream$T@@1)) Tagclass._module.Stream) (= (TagFamily (Tclass._module.Stream _module.Stream$T@@1)) tytagFamily$Stream))
 :pattern ( (Tclass._module.Stream _module.Stream$T@@1))
)))
(assert (forall ((o@@2 T@U) (p@@0 T@U) ) (!  (=> (and (|ORD#IsNat| p@@0) (<= (|ORD#Offset| p@@0) (|ORD#Offset| o@@2))) (and (= (|ORD#IsNat| (|ORD#Minus| o@@2 p@@0)) (|ORD#IsNat| o@@2)) (= (|ORD#Offset| (|ORD#Minus| o@@2 p@@0)) (- (|ORD#Offset| o@@2) (|ORD#Offset| p@@0)))))
 :pattern ( (|ORD#Minus| o@@2 p@@0))
)))
(assert (forall ((n@@0 Int) ) (!  (=> (<= 0 n@@0) (and (|ORD#IsNat| (|ORD#FromNat| n@@0)) (= (|ORD#Offset| (|ORD#FromNat| n@@0)) n@@0)))
 :pattern ( (|ORD#FromNat| n@@0))
)))
(assert (forall ((|#$T0| T@U) (|#$R| T@U) (|f#0| T@U) ($h T@U) ) (! (= ($IsAlloc HandleTypeType |f#0| (Tclass._System.___hPartialFunc1 |#$T0| |#$R|) $h) ($IsAlloc HandleTypeType |f#0| (Tclass._System.___hFunc1 |#$T0| |#$R|) $h))
 :pattern ( ($IsAlloc HandleTypeType |f#0| (Tclass._System.___hPartialFunc1 |#$T0| |#$R|) $h))
)))
(assert (forall ((|#$T0@@0| T@U) (|#$R@@0| T@U) (|f#0@@0| T@U) ($h@@0 T@U) ) (! (= ($IsAlloc HandleTypeType |f#0@@0| (Tclass._System.___hTotalFunc1 |#$T0@@0| |#$R@@0|) $h@@0) ($IsAlloc HandleTypeType |f#0@@0| (Tclass._System.___hPartialFunc1 |#$T0@@0| |#$R@@0|) $h@@0))
 :pattern ( ($IsAlloc HandleTypeType |f#0@@0| (Tclass._System.___hTotalFunc1 |#$T0@@0| |#$R@@0|) $h@@0))
)))
(assert (forall ((f@@1 T@U) (t0@@1 T@U) (t1@@1 T@U) (h@@0 T@U) ) (!  (=> (and ($IsGoodHeap h@@0) ($IsAlloc HandleTypeType f@@1 (Tclass._System.___hFunc1 t0@@1 t1@@1) h@@0)) (forall ((bx0@@0 T@U) ) (!  (=> (and ($IsAllocBox bx0@@0 t0@@1 h@@0) (Requires1 t0@@1 t1@@1 h@@0 f@@1 bx0@@0)) ($IsAllocBox (Apply1 t0@@1 t1@@1 h@@0 f@@1 bx0@@0) t1@@1 h@@0))
 :pattern ( (Apply1 t0@@1 t1@@1 h@@0 f@@1 bx0@@0))
)))
 :pattern ( ($IsAlloc HandleTypeType f@@1 (Tclass._System.___hFunc1 t0@@1 t1@@1) h@@0))
)))
(assert (forall ((|_module._default.IncrFrom#$_T0@@0| T@U) ($ly@@1 T@U) (|_k#0@@1| Int) (|s#0@@1| T@U) (|low#0@@0| Int) (|ord#0@@1| T@U) ) (! (= (_module.__default.IncrFrom_h |_module._default.IncrFrom#$_T0@@0| ($LS $ly@@1) |_k#0@@1| |s#0@@1| |low#0@@0| |ord#0@@1|) (_module.__default.IncrFrom_h |_module._default.IncrFrom#$_T0@@0| $ly@@1 |_k#0@@1| |s#0@@1| |low#0@@0| |ord#0@@1|))
 :pattern ( (_module.__default.IncrFrom_h |_module._default.IncrFrom#$_T0@@0| ($LS $ly@@1) |_k#0@@1| |s#0@@1| |low#0@@0| |ord#0@@1|))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|_module._default.Increasing#$_T0@@0| T@U) ($ly@@2 T@U) (|s#0@@2| T@U) (|ord#0@@2| T@U) (|_k#0@@2| T@U) ) (!  (=> (and (and ($Is DatatypeTypeType |s#0@@2| (Tclass._module.Stream |_module._default.Increasing#$_T0@@0|)) ($Is HandleTypeType |ord#0@@2| (Tclass._System.___hTotalFunc1 |_module._default.Increasing#$_T0@@0| TInt))) (= |_k#0@@2| (|ORD#FromNat| 0))) (_module.__default.Increasing_h |_module._default.Increasing#$_T0@@0| $ly@@2 |_k#0@@2| |s#0@@2| |ord#0@@2|))
 :pattern ( (_module.__default.Increasing_h |_module._default.Increasing#$_T0@@0| $ly@@2 |_k#0@@2| |s#0@@2| |ord#0@@2|))
))))
(assert (forall ((o@@3 T@U) (p@@1 T@U) ) (!  (or (or (|ORD#Less| o@@3 p@@1) (= o@@3 p@@1)) (|ORD#Less| p@@1 o@@3))
 :pattern ( (|ORD#Less| o@@3 p@@1) (|ORD#Less| p@@1 o@@3))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|_module._default.IncrFrom#$_T0@@1| T@U) ($ly@@3 T@U) ($Heap@@0 T@U) (|_k#0@@3| Int) (|s#0@@3| T@U) (|low#0@@1| Int) (|ord#0@@3| T@U) ) (!  (=> (or (|_module.__default.IncrFrom_h#canCall| |_module._default.IncrFrom#$_T0@@1| |_k#0@@3| |s#0@@3| |low#0@@1| |ord#0@@3|) (and (< 2 $FunctionContextHeight) (and (and (and ($IsGoodHeap $Heap@@0) (<= (LitInt 0) |_k#0@@3|)) ($Is DatatypeTypeType |s#0@@3| (Tclass._module.Stream |_module._default.IncrFrom#$_T0@@1|))) ($Is HandleTypeType |ord#0@@3| (Tclass._System.___hTotalFunc1 |_module._default.IncrFrom#$_T0@@1| TInt))))) (and (=> (< 0 |_k#0@@3|) (and (_module.Stream.Cons_q |s#0@@3|) (=> (<= |low#0@@1| (U_2_int ($Unbox intType (Apply1 |_module._default.IncrFrom#$_T0@@1| TInt $Heap@@0 |ord#0@@3| (_module.Stream.head |s#0@@3|))))) (and (and (_module.Stream.Cons_q |s#0@@3|) (_module.Stream.Cons_q |s#0@@3|)) (|_module.__default.IncrFrom_h#canCall| |_module._default.IncrFrom#$_T0@@1| (- |_k#0@@3| 1) (_module.Stream.tail |s#0@@3|) (+ (U_2_int ($Unbox intType (Apply1 |_module._default.IncrFrom#$_T0@@1| TInt $Heap@@0 |ord#0@@3| (_module.Stream.head |s#0@@3|)))) 1) |ord#0@@3|))))) (= (_module.__default.IncrFrom_h |_module._default.IncrFrom#$_T0@@1| ($LS $ly@@3) |_k#0@@3| |s#0@@3| |low#0@@1| |ord#0@@3|)  (=> (< 0 |_k#0@@3|) (and (<= |low#0@@1| (U_2_int ($Unbox intType (Apply1 |_module._default.IncrFrom#$_T0@@1| TInt $Heap@@0 |ord#0@@3| (_module.Stream.head |s#0@@3|))))) (_module.__default.IncrFrom_h |_module._default.IncrFrom#$_T0@@1| $ly@@3 (- |_k#0@@3| 1) (_module.Stream.tail |s#0@@3|) (+ (U_2_int ($Unbox intType (Apply1 |_module._default.IncrFrom#$_T0@@1| TInt $Heap@@0 |ord#0@@3| (_module.Stream.head |s#0@@3|)))) 1) |ord#0@@3|))))))
 :pattern ( (_module.__default.IncrFrom_h |_module._default.IncrFrom#$_T0@@1| ($LS $ly@@3) |_k#0@@3| |s#0@@3| |low#0@@1| |ord#0@@3|) ($IsGoodHeap $Heap@@0))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module._default.IncrFrom$_T0 T@U) ($ly@@4 T@U) ($Heap@@1 T@U) (|s#0@@4| T@U) (|low#0@@2| Int) (|ord#0@@4| T@U) ) (!  (=> (or (|_module.__default.IncrFrom#canCall| _module._default.IncrFrom$_T0 |s#0@@4| |low#0@@2| |ord#0@@4|) (and (< 1 $FunctionContextHeight) (and (and ($IsGoodHeap $Heap@@1) ($Is DatatypeTypeType |s#0@@4| (Tclass._module.Stream _module._default.IncrFrom$_T0))) ($Is HandleTypeType |ord#0@@4| (Tclass._System.___hTotalFunc1 _module._default.IncrFrom$_T0 TInt))))) (and (and (_module.Stream.Cons_q |s#0@@4|) (=> (<= |low#0@@2| (U_2_int ($Unbox intType (Apply1 _module._default.IncrFrom$_T0 TInt $Heap@@1 |ord#0@@4| (_module.Stream.head |s#0@@4|))))) (and (and (_module.Stream.Cons_q |s#0@@4|) (_module.Stream.Cons_q |s#0@@4|)) (|_module.__default.IncrFrom#canCall| _module._default.IncrFrom$_T0 (_module.Stream.tail |s#0@@4|) (+ (U_2_int ($Unbox intType (Apply1 _module._default.IncrFrom$_T0 TInt $Heap@@1 |ord#0@@4| (_module.Stream.head |s#0@@4|)))) 1) |ord#0@@4|)))) (= (_module.__default.IncrFrom _module._default.IncrFrom$_T0 ($LS $ly@@4) |s#0@@4| |low#0@@2| |ord#0@@4|)  (and (<= |low#0@@2| (U_2_int ($Unbox intType (Apply1 _module._default.IncrFrom$_T0 TInt $Heap@@1 |ord#0@@4| (_module.Stream.head |s#0@@4|))))) (_module.__default.IncrFrom _module._default.IncrFrom$_T0 $ly@@4 (_module.Stream.tail |s#0@@4|) (+ (U_2_int ($Unbox intType (Apply1 _module._default.IncrFrom$_T0 TInt $Heap@@1 |ord#0@@4| (_module.Stream.head |s#0@@4|)))) 1) |ord#0@@4|)))))
 :pattern ( (_module.__default.IncrFrom _module._default.IncrFrom$_T0 ($LS $ly@@4) |s#0@@4| |low#0@@2| |ord#0@@4|) ($IsGoodHeap $Heap@@1))
))))
(assert (forall ((a T@U) (b T@U) ) (!  (=> (|Set#Equal| a b) (= a b))
 :pattern ( (|Set#Equal| a b))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|_module._default.Increasing#$_T0@@1| T@U) ($ly@@5 T@U) ($Heap@@2 T@U) (|_k#0@@4| T@U) (|s#0@@5| T@U) (|ord#0@@5| T@U) ) (!  (=> (or (|_module.__default.Increasing_h#canCall| |_module._default.Increasing#$_T0@@1| |_k#0@@4| |s#0@@5| |ord#0@@5|) (and (< 2 $FunctionContextHeight) (and (and ($IsGoodHeap $Heap@@2) ($Is DatatypeTypeType |s#0@@5| (Tclass._module.Stream |_module._default.Increasing#$_T0@@1|))) ($Is HandleTypeType |ord#0@@5| (Tclass._System.___hTotalFunc1 |_module._default.Increasing#$_T0@@1| TInt))))) (and (and (=> (< 0 (|ORD#Offset| |_k#0@@4|)) (and (and (_module.Stream.Cons_q |s#0@@5|) (and (_module.Stream.Cons_q |s#0@@5|) (_module.Stream.Cons_q (_module.Stream.tail |s#0@@5|)))) (=> (< (U_2_int ($Unbox intType (Apply1 |_module._default.Increasing#$_T0@@1| TInt $Heap@@2 |ord#0@@5| (_module.Stream.head |s#0@@5|)))) (U_2_int ($Unbox intType (Apply1 |_module._default.Increasing#$_T0@@1| TInt $Heap@@2 |ord#0@@5| (_module.Stream.head (_module.Stream.tail |s#0@@5|)))))) (and (_module.Stream.Cons_q |s#0@@5|) (|_module.__default.Increasing_h#canCall| |_module._default.Increasing#$_T0@@1| (|ORD#Minus| |_k#0@@4| (|ORD#FromNat| 1)) (_module.Stream.tail |s#0@@5|) |ord#0@@5|))))) (=> (=> (< 0 (|ORD#Offset| |_k#0@@4|)) (and (< (U_2_int ($Unbox intType (Apply1 |_module._default.Increasing#$_T0@@1| TInt $Heap@@2 |ord#0@@5| (_module.Stream.head |s#0@@5|)))) (U_2_int ($Unbox intType (Apply1 |_module._default.Increasing#$_T0@@1| TInt $Heap@@2 |ord#0@@5| (_module.Stream.head (_module.Stream.tail |s#0@@5|)))))) (_module.__default.Increasing_h |_module._default.Increasing#$_T0@@1| $ly@@5 (|ORD#Minus| |_k#0@@4| (|ORD#FromNat| 1)) (_module.Stream.tail |s#0@@5|) |ord#0@@5|))) (=> (= (LitInt 0) (|ORD#Offset| |_k#0@@4|)) (forall ((|_k'#0| T@U) ) (!  (=> (|ORD#Less| |_k'#0| |_k#0@@4|) (|_module.__default.Increasing_h#canCall| |_module._default.Increasing#$_T0@@1| |_k'#0| |s#0@@5| |ord#0@@5|))
 :pattern ( (_module.__default.Increasing_h |_module._default.Increasing#$_T0@@1| $ly@@5 |_k'#0| |s#0@@5| |ord#0@@5|))
))))) (= (_module.__default.Increasing_h |_module._default.Increasing#$_T0@@1| ($LS $ly@@5) |_k#0@@4| |s#0@@5| |ord#0@@5|)  (and (=> (< 0 (|ORD#Offset| |_k#0@@4|)) (and (< (U_2_int ($Unbox intType (Apply1 |_module._default.Increasing#$_T0@@1| TInt $Heap@@2 |ord#0@@5| (_module.Stream.head |s#0@@5|)))) (U_2_int ($Unbox intType (Apply1 |_module._default.Increasing#$_T0@@1| TInt $Heap@@2 |ord#0@@5| (_module.Stream.head (_module.Stream.tail |s#0@@5|)))))) (_module.__default.Increasing_h |_module._default.Increasing#$_T0@@1| $ly@@5 (|ORD#Minus| |_k#0@@4| (|ORD#FromNat| 1)) (_module.Stream.tail |s#0@@5|) |ord#0@@5|))) (=> (= (LitInt 0) (|ORD#Offset| |_k#0@@4|)) (forall ((|_k'#0@@0| T@U) ) (!  (=> (|ORD#Less| |_k'#0@@0| |_k#0@@4|) (_module.__default.Increasing_h |_module._default.Increasing#$_T0@@1| $ly@@5 |_k'#0@@0| |s#0@@5| |ord#0@@5|))
 :pattern ( (_module.__default.Increasing_h |_module._default.Increasing#$_T0@@1| $ly@@5 |_k'#0@@0| |s#0@@5| |ord#0@@5|))
)))))))
 :pattern ( (_module.__default.Increasing_h |_module._default.Increasing#$_T0@@1| ($LS $ly@@5) |_k#0@@4| |s#0@@5| |ord#0@@5|) ($IsGoodHeap $Heap@@2))
))))
(assert (forall ((f@@2 T@U) (t0@@2 T@U) (t1@@2 T@U) ) (! (= ($Is HandleTypeType f@@2 (Tclass._System.___hFunc1 t0@@2 t1@@2)) (forall ((h@@1 T@U) (bx0@@1 T@U) ) (!  (=> (and (and ($IsGoodHeap h@@1) ($IsBox bx0@@1 t0@@2)) (Requires1 t0@@2 t1@@2 h@@1 f@@2 bx0@@1)) ($IsBox (Apply1 t0@@2 t1@@2 h@@1 f@@2 bx0@@1) t1@@2))
 :pattern ( (Apply1 t0@@2 t1@@2 h@@1 f@@2 bx0@@1))
)))
 :pattern ( ($Is HandleTypeType f@@2 (Tclass._System.___hFunc1 t0@@2 t1@@2)))
)))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 TInt) (and (= ($Box intType ($Unbox intType bx@@1)) bx@@1) ($Is intType ($Unbox intType bx@@1) TInt)))
 :pattern ( ($IsBox bx@@1 TInt))
)))
(assert (forall ((v@@0 T@U) (t@@0 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@0) t@@0) ($Is T@@2 v@@0 t@@0))
 :pattern ( ($IsBox ($Box T@@2 v@@0) t@@0))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|_module._default.IncrFrom#$_T0@@2| T@U) ($ly@@6 T@U) (|s#0@@6| T@U) (|low#0@@3| Int) (|ord#0@@6| T@U) ) (!  (=> (and (and ($Is DatatypeTypeType |s#0@@6| (Tclass._module.Stream |_module._default.IncrFrom#$_T0@@2|)) ($Is HandleTypeType |ord#0@@6| (Tclass._System.___hTotalFunc1 |_module._default.IncrFrom#$_T0@@2| TInt))) (_module.__default.IncrFrom |_module._default.IncrFrom#$_T0@@2| ($LS $ly@@6) |s#0@@6| |low#0@@3| |ord#0@@6|)) (forall ((|_k#0@@5| Int) ) (!  (=> (<= (LitInt 0) |_k#0@@5|) (_module.__default.IncrFrom_h |_module._default.IncrFrom#$_T0@@2| ($LS $ly@@6) |_k#0@@5| |s#0@@6| |low#0@@3| |ord#0@@6|))
 :pattern ( (_module.__default.IncrFrom_h |_module._default.IncrFrom#$_T0@@2| ($LS $ly@@6) |_k#0@@5| |s#0@@6| |low#0@@3| |ord#0@@6|))
)))
 :pattern ( (_module.__default.IncrFrom |_module._default.IncrFrom#$_T0@@2| ($LS $ly@@6) |s#0@@6| |low#0@@3| |ord#0@@6|))
))))
(assert (forall ((o@@4 T@U) ) (! (<= 0 (|ORD#Offset| o@@4))
 :pattern ( (|ORD#Offset| o@@4))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|_module._default.IncrFrom#$_T0@@3| T@U) ($ly@@7 T@U) (|s#0@@7| T@U) (|low#0@@4| Int) (|ord#0@@7| T@U) (|_k#0@@6| Int) ) (!  (=> (and (and ($Is DatatypeTypeType |s#0@@7| (Tclass._module.Stream |_module._default.IncrFrom#$_T0@@3|)) ($Is HandleTypeType |ord#0@@7| (Tclass._System.___hTotalFunc1 |_module._default.IncrFrom#$_T0@@3| TInt))) (= |_k#0@@6| 0)) (_module.__default.IncrFrom_h |_module._default.IncrFrom#$_T0@@3| $ly@@7 |_k#0@@6| |s#0@@7| |low#0@@4| |ord#0@@7|))
 :pattern ( (_module.__default.IncrFrom_h |_module._default.IncrFrom#$_T0@@3| $ly@@7 |_k#0@@6| |s#0@@7| |low#0@@4| |ord#0@@7|))
))))
(assert (forall ((|#$T0@@1| T@U) (|#$R@@1| T@U) ) (! (= (Tclass._System.___hFunc1_0 (Tclass._System.___hFunc1 |#$T0@@1| |#$R@@1|)) |#$T0@@1|)
 :pattern ( (Tclass._System.___hFunc1 |#$T0@@1| |#$R@@1|))
)))
(assert (forall ((|#$T0@@2| T@U) (|#$R@@2| T@U) ) (! (= (Tclass._System.___hFunc1_1 (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@2|)) |#$R@@2|)
 :pattern ( (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@2|))
)))
(assert (forall ((|#$T0@@3| T@U) (|#$R@@3| T@U) ) (! (= (Tclass._System.___hPartialFunc1_0 (Tclass._System.___hPartialFunc1 |#$T0@@3| |#$R@@3|)) |#$T0@@3|)
 :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@3| |#$R@@3|))
)))
(assert (forall ((|#$T0@@4| T@U) (|#$R@@4| T@U) ) (! (= (Tclass._System.___hPartialFunc1_1 (Tclass._System.___hPartialFunc1 |#$T0@@4| |#$R@@4|)) |#$R@@4|)
 :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@4| |#$R@@4|))
)))
(assert (forall ((|#$T0@@5| T@U) (|#$R@@5| T@U) ) (! (= (Tclass._System.___hTotalFunc1_0 (Tclass._System.___hTotalFunc1 |#$T0@@5| |#$R@@5|)) |#$T0@@5|)
 :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@5| |#$R@@5|))
)))
(assert (forall ((|#$T0@@6| T@U) (|#$R@@6| T@U) ) (! (= (Tclass._System.___hTotalFunc1_1 (Tclass._System.___hTotalFunc1 |#$T0@@6| |#$R@@6|)) |#$R@@6|)
 :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@6| |#$R@@6|))
)))
(assert (forall ((|a#0#0#0| T@U) (|a#0#1#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Stream.Cons| |a#0#0#0| |a#0#1#0|)) |##_module.Stream.Cons|)
 :pattern ( (|#_module.Stream.Cons| |a#0#0#0| |a#0#1#0|))
)))
(assert (forall ((|a#3#0#0| T@U) (|a#3#1#0| T@U) ) (! (= (_module.Stream.head (|#_module.Stream.Cons| |a#3#0#0| |a#3#1#0|)) |a#3#0#0|)
 :pattern ( (|#_module.Stream.Cons| |a#3#0#0| |a#3#1#0|))
)))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| T@U) ) (! (= (_module.Stream.tail (|#_module.Stream.Cons| |a#4#0#0| |a#4#1#0|)) |a#4#1#0|)
 :pattern ( (|#_module.Stream.Cons| |a#4#0#0| |a#4#1#0|))
)))
(assert (forall ((_module.Stream$T@@2 T@U) ) (! (= (Tclass._module.Stream_0 (Tclass._module.Stream _module.Stream$T@@2)) _module.Stream$T@@2)
 :pattern ( (Tclass._module.Stream _module.Stream$T@@2))
)))
(assert (forall ((x@@5 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@5)) x@@5)
 :pattern ( ($Box T@@3 x@@5))
)))
(assert (forall ((o@@5 T@U) (p@@2 T@U) ) (!  (and (and (and (=> (|ORD#Less| o@@5 p@@2) (or (not (= o@@5 p@@2)) (not true))) (=> (and (|ORD#IsNat| o@@5) (not (|ORD#IsNat| p@@2))) (|ORD#Less| o@@5 p@@2))) (=> (and (|ORD#IsNat| o@@5) (|ORD#IsNat| p@@2)) (= (|ORD#Less| o@@5 p@@2) (< (|ORD#Offset| o@@5) (|ORD#Offset| p@@2))))) (=> (and (|ORD#Less| o@@5 p@@2) (|ORD#IsNat| p@@2)) (|ORD#IsNat| o@@5)))
 :pattern ( (|ORD#Less| o@@5 p@@2))
)))
(assert (forall ((|#$T0@@7| T@U) (|#$R@@7| T@U) (|f#0@@1| T@U) ) (! (= ($Is HandleTypeType |f#0@@1| (Tclass._System.___hTotalFunc1 |#$T0@@7| |#$R@@7|))  (and ($Is HandleTypeType |f#0@@1| (Tclass._System.___hPartialFunc1 |#$T0@@7| |#$R@@7|)) (forall ((|x0#0| T@U) )  (=> ($IsBox |x0#0| |#$T0@@7|) (Requires1 |#$T0@@7| |#$R@@7| $OneHeap |f#0@@1| |x0#0|)))))
 :pattern ( ($Is HandleTypeType |f#0@@1| (Tclass._System.___hTotalFunc1 |#$T0@@7| |#$R@@7|)))
)))
(assert (forall ((|#$T0@@8| T@U) (|#$R@@8| T@U) (|f#0@@2| T@U) ) (! (= ($Is HandleTypeType |f#0@@2| (Tclass._System.___hPartialFunc1 |#$T0@@8| |#$R@@8|))  (and ($Is HandleTypeType |f#0@@2| (Tclass._System.___hFunc1 |#$T0@@8| |#$R@@8|)) (forall ((|x0#0@@0| T@U) )  (=> ($IsBox |x0#0@@0| |#$T0@@8|) (|Set#Equal| (Reads1 |#$T0@@8| |#$R@@8| $OneHeap |f#0@@2| |x0#0@@0|) |Set#Empty|)))))
 :pattern ( ($Is HandleTypeType |f#0@@2| (Tclass._System.___hPartialFunc1 |#$T0@@8| |#$R@@8|)))
)))
(assert  (and (and (and (and (and (and (= (Ctor refType) 6) (forall ((t0@@3 T@T) (t1@@3 T@T) (val T@U) (m@@0 T@U) (x0 T@U) ) (! (= (MapType0Select t0@@3 t1@@3 (MapType0Store t0@@3 t1@@3 m@@0 x0 val) x0) val)
 :weight 0
))) (forall ((u0@@0 T@T) (u1@@0 T@T) (val@@0 T@U) (m@@1 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0@@0 u1@@0 (MapType0Store u0@@0 u1@@0 m@@1 x0@@0 val@@0) y0) (MapType0Select u0@@0 u1@@0 m@@1 y0)))
 :weight 0
))) (= (Ctor FieldType) 7)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 8))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((f@@3 T@U) (t0@@4 T@U) (t1@@4 T@U) (h@@2 T@U) ) (!  (=> ($IsGoodHeap h@@2) (= ($IsAlloc HandleTypeType f@@3 (Tclass._System.___hFunc1 t0@@4 t1@@4) h@@2) (forall ((bx0@@2 T@U) ) (!  (=> (and (and ($IsBox bx0@@2 t0@@4) ($IsAllocBox bx0@@2 t0@@4 h@@2)) (Requires1 t0@@4 t1@@4 h@@2 f@@3 bx0@@2)) (forall ((r@@0 T@U) ) (!  (=> (and (or (not (= r@@0 null)) (not true)) (|Set#IsMember| (Reads1 t0@@4 t1@@4 h@@2 f@@3 bx0@@2) ($Box refType r@@0))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@2 r@@0) alloc))))
 :pattern ( (|Set#IsMember| (Reads1 t0@@4 t1@@4 h@@2 f@@3 bx0@@2) ($Box refType r@@0)))
)))
 :pattern ( (Apply1 t0@@4 t1@@4 h@@2 f@@3 bx0@@2))
 :pattern ( (Reads1 t0@@4 t1@@4 h@@2 f@@3 bx0@@2))
))))
 :pattern ( ($IsAlloc HandleTypeType f@@3 (Tclass._System.___hFunc1 t0@@4 t1@@4) h@@2))
)))
(assert (forall ((|#$T0@@9| T@U) (|#$R@@9| T@U) (bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 (Tclass._System.___hFunc1 |#$T0@@9| |#$R@@9|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@2)) bx@@2) ($Is HandleTypeType ($Unbox HandleTypeType bx@@2) (Tclass._System.___hFunc1 |#$T0@@9| |#$R@@9|))))
 :pattern ( ($IsBox bx@@2 (Tclass._System.___hFunc1 |#$T0@@9| |#$R@@9|)))
)))
(assert (forall ((|#$T0@@10| T@U) (|#$R@@10| T@U) (bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 (Tclass._System.___hPartialFunc1 |#$T0@@10| |#$R@@10|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@3)) bx@@3) ($Is HandleTypeType ($Unbox HandleTypeType bx@@3) (Tclass._System.___hPartialFunc1 |#$T0@@10| |#$R@@10|))))
 :pattern ( ($IsBox bx@@3 (Tclass._System.___hPartialFunc1 |#$T0@@10| |#$R@@10|)))
)))
(assert (forall ((|#$T0@@11| T@U) (|#$R@@11| T@U) (bx@@4 T@U) ) (!  (=> ($IsBox bx@@4 (Tclass._System.___hTotalFunc1 |#$T0@@11| |#$R@@11|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@4)) bx@@4) ($Is HandleTypeType ($Unbox HandleTypeType bx@@4) (Tclass._System.___hTotalFunc1 |#$T0@@11| |#$R@@11|))))
 :pattern ( ($IsBox bx@@4 (Tclass._System.___hTotalFunc1 |#$T0@@11| |#$R@@11|)))
)))
(assert (forall ((d@@3 T@U) (_module.Stream$T@@3 T@U) ($h@@1 T@U) ) (!  (=> (and ($IsGoodHeap $h@@1) (and (_module.Stream.Cons_q d@@3) ($IsAlloc DatatypeTypeType d@@3 (Tclass._module.Stream _module.Stream$T@@3) $h@@1))) ($IsAllocBox (_module.Stream.head d@@3) _module.Stream$T@@3 $h@@1))
 :pattern ( ($IsAllocBox (_module.Stream.head d@@3) _module.Stream$T@@3 $h@@1))
)))
(assert  (and (forall ((t0@@5 T@T) (t1@@5 T@T) (t2 T@T) (val@@1 T@U) (m@@2 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@5 t1@@5 t2 (MapType1Store t0@@5 t1@@5 t2 m@@2 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@1 T@T) (u1@@1 T@T) (u2 T@T) (val@@2 T@U) (m@@3 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@1 u1@@1 u2 (MapType1Store u0@@1 u1@@1 u2 m@@3 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@1 u1@@1 u2 m@@3 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@2 T@T) (u1@@2 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@4 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@2 u1@@2 u2@@0 (MapType1Store u0@@2 u1@@2 u2@@0 m@@4 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@2 u1@@2 u2@@0 m@@4 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((|#$T0@@12| T@U) (|#$R@@12| T@U) ) (!  (and (= (Tag (Tclass._System.___hFunc1 |#$T0@@12| |#$R@@12|)) Tagclass._System.___hFunc1) (= (TagFamily (Tclass._System.___hFunc1 |#$T0@@12| |#$R@@12|)) |tytagFamily$_#Func1|))
 :pattern ( (Tclass._System.___hFunc1 |#$T0@@12| |#$R@@12|))
)))
(assert (forall ((|#$T0@@13| T@U) (|#$R@@13| T@U) ) (!  (and (= (Tag (Tclass._System.___hPartialFunc1 |#$T0@@13| |#$R@@13|)) Tagclass._System.___hPartialFunc1) (= (TagFamily (Tclass._System.___hPartialFunc1 |#$T0@@13| |#$R@@13|)) |tytagFamily$_#PartialFunc1|))
 :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@13| |#$R@@13|))
)))
(assert (forall ((|#$T0@@14| T@U) (|#$R@@14| T@U) ) (!  (and (= (Tag (Tclass._System.___hTotalFunc1 |#$T0@@14| |#$R@@14|)) Tagclass._System.___hTotalFunc1) (= (TagFamily (Tclass._System.___hTotalFunc1 |#$T0@@14| |#$R@@14|)) |tytagFamily$_#TotalFunc1|))
 :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@14| |#$R@@14|))
)))
(assert (forall ((t0@@6 T@U) (t1@@6 T@U) (heap@@0 T@U) (f@@4 T@U) (bx0@@3 T@U) ) (!  (=> (and (and ($IsGoodHeap heap@@0) (and ($IsBox bx0@@3 t0@@6) ($Is HandleTypeType f@@4 (Tclass._System.___hFunc1 t0@@6 t1@@6)))) (|Set#Equal| (Reads1 t0@@6 t1@@6 $OneHeap f@@4 bx0@@3) |Set#Empty|)) (= (Requires1 t0@@6 t1@@6 $OneHeap f@@4 bx0@@3) (Requires1 t0@@6 t1@@6 heap@@0 f@@4 bx0@@3)))
 :pattern ( (Requires1 t0@@6 t1@@6 $OneHeap f@@4 bx0@@3) ($IsGoodHeap heap@@0))
 :pattern ( (Requires1 t0@@6 t1@@6 heap@@0 f@@4 bx0@@3))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|_module._default.Increasing#$_T0@@2| T@U) ($ly@@8 T@U) ($Heap@@3 T@U) (|_k#0@@7| T@U) (|s#0@@8| T@U) (|ord#0@@8| T@U) ) (!  (=> (or (|_module.__default.Increasing_h#canCall| |_module._default.Increasing#$_T0@@2| (Lit BoxType |_k#0@@7|) |s#0@@8| |ord#0@@8|) (and (< 2 $FunctionContextHeight) (and (and ($IsGoodHeap $Heap@@3) ($Is DatatypeTypeType |s#0@@8| (Tclass._module.Stream |_module._default.Increasing#$_T0@@2|))) ($Is HandleTypeType |ord#0@@8| (Tclass._System.___hTotalFunc1 |_module._default.Increasing#$_T0@@2| TInt))))) (and (and (=> (< 0 (|ORD#Offset| |_k#0@@7|)) (and (and (_module.Stream.Cons_q |s#0@@8|) (and (_module.Stream.Cons_q |s#0@@8|) (_module.Stream.Cons_q (_module.Stream.tail |s#0@@8|)))) (=> (< (U_2_int ($Unbox intType (Apply1 |_module._default.Increasing#$_T0@@2| TInt $Heap@@3 |ord#0@@8| (_module.Stream.head |s#0@@8|)))) (U_2_int ($Unbox intType (Apply1 |_module._default.Increasing#$_T0@@2| TInt $Heap@@3 |ord#0@@8| (_module.Stream.head (_module.Stream.tail |s#0@@8|)))))) (and (_module.Stream.Cons_q |s#0@@8|) (|_module.__default.Increasing_h#canCall| |_module._default.Increasing#$_T0@@2| (|ORD#Minus| |_k#0@@7| (|ORD#FromNat| 1)) (_module.Stream.tail |s#0@@8|) |ord#0@@8|))))) (=> (=> (< 0 (|ORD#Offset| |_k#0@@7|)) (and (< (U_2_int ($Unbox intType (Apply1 |_module._default.Increasing#$_T0@@2| TInt $Heap@@3 |ord#0@@8| (_module.Stream.head |s#0@@8|)))) (U_2_int ($Unbox intType (Apply1 |_module._default.Increasing#$_T0@@2| TInt $Heap@@3 |ord#0@@8| (_module.Stream.head (_module.Stream.tail |s#0@@8|)))))) (_module.__default.Increasing_h |_module._default.Increasing#$_T0@@2| ($LS $ly@@8) (|ORD#Minus| |_k#0@@7| (|ORD#FromNat| 1)) (_module.Stream.tail |s#0@@8|) |ord#0@@8|))) (=> (= (LitInt 0) (|ORD#Offset| |_k#0@@7|)) (forall ((|_k'#1| T@U) ) (!  (=> (|ORD#Less| |_k'#1| |_k#0@@7|) (|_module.__default.Increasing_h#canCall| |_module._default.Increasing#$_T0@@2| |_k'#1| |s#0@@8| |ord#0@@8|))
 :pattern ( (_module.__default.Increasing_h |_module._default.Increasing#$_T0@@2| ($LS $ly@@8) |_k'#1| |s#0@@8| |ord#0@@8|))
))))) (= (_module.__default.Increasing_h |_module._default.Increasing#$_T0@@2| ($LS $ly@@8) (Lit BoxType |_k#0@@7|) |s#0@@8| |ord#0@@8|)  (and (=> (< 0 (|ORD#Offset| |_k#0@@7|)) (and (< (U_2_int ($Unbox intType (Apply1 |_module._default.Increasing#$_T0@@2| TInt $Heap@@3 |ord#0@@8| (_module.Stream.head |s#0@@8|)))) (U_2_int ($Unbox intType (Apply1 |_module._default.Increasing#$_T0@@2| TInt $Heap@@3 |ord#0@@8| (_module.Stream.head (_module.Stream.tail |s#0@@8|)))))) (_module.__default.Increasing_h |_module._default.Increasing#$_T0@@2| ($LS $ly@@8) (|ORD#Minus| |_k#0@@7| (|ORD#FromNat| 1)) (_module.Stream.tail |s#0@@8|) |ord#0@@8|))) (=> (= (LitInt 0) (|ORD#Offset| |_k#0@@7|)) (forall ((|_k'#1@@0| T@U) ) (!  (=> (|ORD#Less| |_k'#1@@0| |_k#0@@7|) (_module.__default.Increasing_h |_module._default.Increasing#$_T0@@2| ($LS $ly@@8) |_k'#1@@0| |s#0@@8| |ord#0@@8|))
 :pattern ( (_module.__default.Increasing_h |_module._default.Increasing#$_T0@@2| ($LS $ly@@8) |_k'#1@@0| |s#0@@8| |ord#0@@8|))
)))))))
 :weight 3
 :pattern ( (_module.__default.Increasing_h |_module._default.Increasing#$_T0@@2| ($LS $ly@@8) (Lit BoxType |_k#0@@7|) |s#0@@8| |ord#0@@8|) ($IsGoodHeap $Heap@@3))
))))
(assert (forall ((_module.Stream$T@@4 T@U) (bx@@5 T@U) ) (!  (=> ($IsBox bx@@5 (Tclass._module.Stream _module.Stream$T@@4)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@5)) bx@@5) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@5) (Tclass._module.Stream _module.Stream$T@@4))))
 :pattern ( ($IsBox bx@@5 (Tclass._module.Stream _module.Stream$T@@4)))
)))
(assert (forall ((|_module._default.Increasing#$_T0@@3| T@U) ($ly@@9 T@U) (|_k#0@@8| T@U) (|s#0@@9| T@U) (|ord#0@@9| T@U) ) (! (= (_module.__default.Increasing_h |_module._default.Increasing#$_T0@@3| ($LS $ly@@9) |_k#0@@8| |s#0@@9| |ord#0@@9|) (_module.__default.Increasing_h |_module._default.Increasing#$_T0@@3| $ly@@9 |_k#0@@8| |s#0@@9| |ord#0@@9|))
 :pattern ( (_module.__default.Increasing_h |_module._default.Increasing#$_T0@@3| ($LS $ly@@9) |_k#0@@8| |s#0@@9| |ord#0@@9|))
)))
(assert (forall ((_module._default.IncrFrom$_T0@@0 T@U) ($ly@@10 T@U) (|s#0@@10| T@U) (|low#0@@5| Int) (|ord#0@@10| T@U) ) (! (= (_module.__default.IncrFrom _module._default.IncrFrom$_T0@@0 ($LS $ly@@10) |s#0@@10| |low#0@@5| |ord#0@@10|) (_module.__default.IncrFrom _module._default.IncrFrom$_T0@@0 $ly@@10 |s#0@@10| |low#0@@5| |ord#0@@10|))
 :pattern ( (_module.__default.IncrFrom _module._default.IncrFrom$_T0@@0 ($LS $ly@@10) |s#0@@10| |low#0@@5| |ord#0@@10|))
)))
(assert (forall ((o@@6 T@U) ) (!  (=> (|ORD#IsNat| o@@6) (= o@@6 (|ORD#FromNat| (|ORD#Offset| o@@6))))
 :pattern ( (|ORD#Offset| o@@6))
 :pattern ( (|ORD#IsNat| o@@6))
)))
(assert (forall ((d@@4 T@U) (_module.Stream$T@@5 T@U) ($h@@2 T@U) ) (!  (=> (and ($IsGoodHeap $h@@2) (and (_module.Stream.Cons_q d@@4) ($IsAlloc DatatypeTypeType d@@4 (Tclass._module.Stream _module.Stream$T@@5) $h@@2))) ($IsAlloc DatatypeTypeType (_module.Stream.tail d@@4) (Tclass._module.Stream _module.Stream$T@@5) $h@@2))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.Stream.tail d@@4) (Tclass._module.Stream _module.Stream$T@@5) $h@@2))
)))
(assert (forall ((o@@7 T@U) (p@@3 T@U) ) (!  (=> (and (|ORD#IsNat| p@@3) (<= (|ORD#Offset| p@@3) (|ORD#Offset| o@@7))) (or (and (= p@@3 (|ORD#FromNat| 0)) (= (|ORD#Minus| o@@7 p@@3) o@@7)) (and (or (not (= p@@3 (|ORD#FromNat| 0))) (not true)) (|ORD#Less| (|ORD#Minus| o@@7 p@@3) o@@7))))
 :pattern ( (|ORD#Minus| o@@7 p@@3))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) ) (! (= (|Set#Equal| a@@0 b@@0) (forall ((o@@8 T@U) ) (! (= (|Set#IsMember| a@@0 o@@8) (|Set#IsMember| b@@0 o@@8))
 :pattern ( (|Set#IsMember| a@@0 o@@8))
 :pattern ( (|Set#IsMember| b@@0 o@@8))
)))
 :pattern ( (|Set#Equal| a@@0 b@@0))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|_module._default.IncrFrom#$_T0@@4| T@U) ($ly@@11 T@U) ($Heap@@4 T@U) (|_k#0@@9| Int) (|s#0@@11| T@U) (|low#0@@6| Int) (|ord#0@@11| T@U) ) (!  (=> (or (|_module.__default.IncrFrom_h#canCall| |_module._default.IncrFrom#$_T0@@4| (LitInt |_k#0@@9|) (Lit DatatypeTypeType |s#0@@11|) (LitInt |low#0@@6|) (Lit HandleTypeType |ord#0@@11|)) (and (< 2 $FunctionContextHeight) (and (and (and ($IsGoodHeap $Heap@@4) (<= (LitInt 0) |_k#0@@9|)) ($Is DatatypeTypeType |s#0@@11| (Tclass._module.Stream |_module._default.IncrFrom#$_T0@@4|))) ($Is HandleTypeType |ord#0@@11| (Tclass._System.___hTotalFunc1 |_module._default.IncrFrom#$_T0@@4| TInt))))) (and (=> (< 0 |_k#0@@9|) (and (_module.Stream.Cons_q (Lit DatatypeTypeType |s#0@@11|)) (=> (<= (LitInt |low#0@@6|) (U_2_int ($Unbox intType (Apply1 |_module._default.IncrFrom#$_T0@@4| TInt $Heap@@4 (Lit HandleTypeType |ord#0@@11|) (Lit BoxType (_module.Stream.head (Lit DatatypeTypeType |s#0@@11|))))))) (and (and (_module.Stream.Cons_q (Lit DatatypeTypeType |s#0@@11|)) (_module.Stream.Cons_q (Lit DatatypeTypeType |s#0@@11|))) (|_module.__default.IncrFrom_h#canCall| |_module._default.IncrFrom#$_T0@@4| (- |_k#0@@9| 1) (Lit DatatypeTypeType (_module.Stream.tail (Lit DatatypeTypeType |s#0@@11|))) (+ (U_2_int ($Unbox intType (Apply1 |_module._default.IncrFrom#$_T0@@4| TInt $Heap@@4 (Lit HandleTypeType |ord#0@@11|) (Lit BoxType (_module.Stream.head (Lit DatatypeTypeType |s#0@@11|)))))) 1) (Lit HandleTypeType |ord#0@@11|)))))) (= (_module.__default.IncrFrom_h |_module._default.IncrFrom#$_T0@@4| ($LS $ly@@11) (LitInt |_k#0@@9|) (Lit DatatypeTypeType |s#0@@11|) (LitInt |low#0@@6|) (Lit HandleTypeType |ord#0@@11|))  (=> (< 0 |_k#0@@9|) (and (<= (LitInt |low#0@@6|) (U_2_int ($Unbox intType (Apply1 |_module._default.IncrFrom#$_T0@@4| TInt $Heap@@4 (Lit HandleTypeType |ord#0@@11|) (Lit BoxType (_module.Stream.head (Lit DatatypeTypeType |s#0@@11|))))))) (_module.__default.IncrFrom_h |_module._default.IncrFrom#$_T0@@4| ($LS $ly@@11) (- |_k#0@@9| 1) (Lit DatatypeTypeType (_module.Stream.tail (Lit DatatypeTypeType |s#0@@11|))) (+ (U_2_int ($Unbox intType (Apply1 |_module._default.IncrFrom#$_T0@@4| TInt $Heap@@4 (Lit HandleTypeType |ord#0@@11|) (Lit BoxType (_module.Stream.head (Lit DatatypeTypeType |s#0@@11|)))))) 1) (Lit HandleTypeType |ord#0@@11|)))))))
 :weight 3
 :pattern ( (_module.__default.IncrFrom_h |_module._default.IncrFrom#$_T0@@4| ($LS $ly@@11) (LitInt |_k#0@@9|) (Lit DatatypeTypeType |s#0@@11|) (LitInt |low#0@@6|) (Lit HandleTypeType |ord#0@@11|)) ($IsGoodHeap $Heap@@4))
))))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|_module._default.IncrFrom#$_T0@@5| T@U) ($ly@@12 T@U) ($Heap@@5 T@U) (|_k#0@@10| Int) (|s#0@@12| T@U) (|low#0@@7| Int) (|ord#0@@12| T@U) ) (!  (=> (or (|_module.__default.IncrFrom_h#canCall| |_module._default.IncrFrom#$_T0@@5| (LitInt |_k#0@@10|) |s#0@@12| |low#0@@7| |ord#0@@12|) (and (< 2 $FunctionContextHeight) (and (and (and ($IsGoodHeap $Heap@@5) (<= (LitInt 0) |_k#0@@10|)) ($Is DatatypeTypeType |s#0@@12| (Tclass._module.Stream |_module._default.IncrFrom#$_T0@@5|))) ($Is HandleTypeType |ord#0@@12| (Tclass._System.___hTotalFunc1 |_module._default.IncrFrom#$_T0@@5| TInt))))) (and (=> (< 0 |_k#0@@10|) (and (_module.Stream.Cons_q |s#0@@12|) (=> (<= |low#0@@7| (U_2_int ($Unbox intType (Apply1 |_module._default.IncrFrom#$_T0@@5| TInt $Heap@@5 |ord#0@@12| (_module.Stream.head |s#0@@12|))))) (and (and (_module.Stream.Cons_q |s#0@@12|) (_module.Stream.Cons_q |s#0@@12|)) (|_module.__default.IncrFrom_h#canCall| |_module._default.IncrFrom#$_T0@@5| (- |_k#0@@10| 1) (_module.Stream.tail |s#0@@12|) (+ (U_2_int ($Unbox intType (Apply1 |_module._default.IncrFrom#$_T0@@5| TInt $Heap@@5 |ord#0@@12| (_module.Stream.head |s#0@@12|)))) 1) |ord#0@@12|))))) (= (_module.__default.IncrFrom_h |_module._default.IncrFrom#$_T0@@5| ($LS $ly@@12) (LitInt |_k#0@@10|) |s#0@@12| |low#0@@7| |ord#0@@12|)  (=> (< 0 |_k#0@@10|) (and (<= |low#0@@7| (U_2_int ($Unbox intType (Apply1 |_module._default.IncrFrom#$_T0@@5| TInt $Heap@@5 |ord#0@@12| (_module.Stream.head |s#0@@12|))))) (_module.__default.IncrFrom_h |_module._default.IncrFrom#$_T0@@5| ($LS $ly@@12) (- |_k#0@@10| 1) (_module.Stream.tail |s#0@@12|) (+ (U_2_int ($Unbox intType (Apply1 |_module._default.IncrFrom#$_T0@@5| TInt $Heap@@5 |ord#0@@12| (_module.Stream.head |s#0@@12|)))) 1) |ord#0@@12|))))))
 :weight 3
 :pattern ( (_module.__default.IncrFrom_h |_module._default.IncrFrom#$_T0@@5| ($LS $ly@@12) (LitInt |_k#0@@10|) |s#0@@12| |low#0@@7| |ord#0@@12|) ($IsGoodHeap $Heap@@5))
))))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((x@@7 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@7)) (Lit BoxType ($Box T@@4 x@@7)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@7)))
)))
(assert (forall ((h@@3 T@U) (v@@1 T@U) ) (! ($IsAlloc intType v@@1 TInt h@@3)
 :pattern ( ($IsAlloc intType v@@1 TInt h@@3))
)))
(assert (forall ((_module.Stream$T@@6 T@U) (|a#2#0#0@@0| T@U) (|a#2#1#0@@0| T@U) ($h@@3 T@U) ) (!  (=> ($IsGoodHeap $h@@3) (= ($IsAlloc DatatypeTypeType (|#_module.Stream.Cons| |a#2#0#0@@0| |a#2#1#0@@0|) (Tclass._module.Stream _module.Stream$T@@6) $h@@3)  (and ($IsAllocBox |a#2#0#0@@0| _module.Stream$T@@6 $h@@3) ($IsAlloc DatatypeTypeType |a#2#1#0@@0| (Tclass._module.Stream _module.Stream$T@@6) $h@@3))))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_module.Stream.Cons| |a#2#0#0@@0| |a#2#1#0@@0|) (Tclass._module.Stream _module.Stream$T@@6) $h@@3))
)))
(assert (forall ((v@@2 T@U) ) (! ($Is intType v@@2 TInt)
 :pattern ( ($Is intType v@@2 TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |_module._default.Lemma_Incr0#$_T0| () T@U)
(declare-fun |_k#0@@11| () T@U)
(declare-fun |s#1| () T@U)
(declare-fun |ord#1| () T@U)
(declare-fun $LZ () T@U)
(declare-fun $Heap@2 () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun $Heap@0 () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun $Heap@@6 () T@U)
(declare-fun |low#1| () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 8) (let ((GeneratedUnifiedExit_correct  (and (=> (= (ControlFlow 0 2) (- 0 4)) (=> (|_module.__default.Increasing_h#canCall| |_module._default.Lemma_Incr0#$_T0| |_k#0@@11| |s#1| |ord#1|) (or (_module.__default.Increasing_h |_module._default.Lemma_Incr0#$_T0| ($LS $LZ) |_k#0@@11| |s#1| |ord#1|) (=> (< 0 (|ORD#Offset| |_k#0@@11|)) (< (U_2_int ($Unbox intType (Apply1 |_module._default.Lemma_Incr0#$_T0| TInt $Heap@2 |ord#1| (_module.Stream.head |s#1|)))) (U_2_int ($Unbox intType (Apply1 |_module._default.Lemma_Incr0#$_T0| TInt $Heap@2 |ord#1| (_module.Stream.head (_module.Stream.tail |s#1|)))))))))) (=> (=> (|_module.__default.Increasing_h#canCall| |_module._default.Lemma_Incr0#$_T0| |_k#0@@11| |s#1| |ord#1|) (or (_module.__default.Increasing_h |_module._default.Lemma_Incr0#$_T0| ($LS $LZ) |_k#0@@11| |s#1| |ord#1|) (=> (< 0 (|ORD#Offset| |_k#0@@11|)) (< (U_2_int ($Unbox intType (Apply1 |_module._default.Lemma_Incr0#$_T0| TInt $Heap@2 |ord#1| (_module.Stream.head |s#1|)))) (U_2_int ($Unbox intType (Apply1 |_module._default.Lemma_Incr0#$_T0| TInt $Heap@2 |ord#1| (_module.Stream.head (_module.Stream.tail |s#1|))))))))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (=> (|_module.__default.Increasing_h#canCall| |_module._default.Lemma_Incr0#$_T0| |_k#0@@11| |s#1| |ord#1|) (or (_module.__default.Increasing_h |_module._default.Lemma_Incr0#$_T0| ($LS $LZ) |_k#0@@11| |s#1| |ord#1|) (=> (< 0 (|ORD#Offset| |_k#0@@11|)) (_module.__default.Increasing_h |_module._default.Lemma_Incr0#$_T0| ($LS ($LS $LZ)) (|ORD#Minus| |_k#0@@11| (|ORD#FromNat| 1)) (_module.Stream.tail |s#1|) |ord#1|))))) (=> (=> (|_module.__default.Increasing_h#canCall| |_module._default.Lemma_Incr0#$_T0| |_k#0@@11| |s#1| |ord#1|) (or (_module.__default.Increasing_h |_module._default.Lemma_Incr0#$_T0| ($LS $LZ) |_k#0@@11| |s#1| |ord#1|) (=> (< 0 (|ORD#Offset| |_k#0@@11|)) (_module.__default.Increasing_h |_module._default.Lemma_Incr0#$_T0| ($LS ($LS $LZ)) (|ORD#Minus| |_k#0@@11| (|ORD#FromNat| 1)) (_module.Stream.tail |s#1|) |ord#1|)))) (=> (= (ControlFlow 0 2) (- 0 1)) (=> (|_module.__default.Increasing_h#canCall| |_module._default.Lemma_Incr0#$_T0| |_k#0@@11| |s#1| |ord#1|) (or (_module.__default.Increasing_h |_module._default.Lemma_Incr0#$_T0| ($LS $LZ) |_k#0@@11| |s#1| |ord#1|) (=> (= (LitInt 0) (|ORD#Offset| |_k#0@@11|)) (forall ((|_k'#1@@1| T@U) ) (!  (=> (|ORD#Less| |_k'#1@@1| |_k#0@@11|) (_module.__default.Increasing_h |_module._default.Lemma_Incr0#$_T0| ($LS ($LS $LZ)) |_k'#1@@1| |s#1| |ord#1|))
 :pattern ( (_module.__default.Increasing_h |_module._default.Lemma_Incr0#$_T0| ($LS ($LS $LZ)) |_k'#1@@1| |s#1| |ord#1|))
))))))))))))
(let ((anon3_Else_correct  (=> (<= (|ORD#Offset| |_k#0@@11|) 0) (=> (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1)) (=> (and (and (= $Heap@0 $Heap@1) (forall ((|_k'#2@@1| T@U) (|s#2| T@U) (|low#2| Int) (|ord#2| T@U) ) (!  (=> (and (and ($Is DatatypeTypeType |s#2| (Tclass._module.Stream |_module._default.Lemma_Incr0#$_T0|)) ($Is HandleTypeType |ord#2| (Tclass._System.___hTotalFunc1 |_module._default.Lemma_Incr0#$_T0| TInt))) (and (|ORD#Less| |_k'#2@@1| |_k#0@@11|) (_module.__default.IncrFrom |_module._default.Lemma_Incr0#$_T0| ($LS $LZ) |s#2| |low#2| |ord#2|))) (_module.__default.Increasing_h |_module._default.Lemma_Incr0#$_T0| ($LS $LZ) |_k'#2@@1| |s#2| |ord#2|))
 :pattern ( (_module.__default.Increasing_h |_module._default.Lemma_Incr0#$_T0| ($LS $LZ) |_k'#2@@1| |s#2| |ord#2|) (_module.__default.IncrFrom |_module._default.Lemma_Incr0#$_T0| ($LS $LZ) |s#2| |low#2| |ord#2|))
 :pattern ( (_module.__default.IncrFrom |_module._default.Lemma_Incr0#$_T0| ($LS $LZ) |s#2| |low#2| |ord#2|) (|ORD#Less| |_k'#2@@1| |_k#0@@11|))
))) (and (= $Heap@2 $Heap@1) (= (ControlFlow 0 6) 2))) GeneratedUnifiedExit_correct)))))
(let ((anon3_Then_correct  (=> (< 0 (|ORD#Offset| |_k#0@@11|)) (=> (and (= $Heap@2 $Heap@0) (= (ControlFlow 0 5) 2)) GeneratedUnifiedExit_correct))))
(let ((anon0_correct  (=> (and (= $_ModifiesFrame@0 (|lambda#0| null $Heap@@6 alloc false)) (|$IsA#_module.Stream| |s#1|)) (=> (and (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (and (= $Heap@@6 $Heap@0) (forall ((|$ih#_k0#0| T@U) (|$ih#s0#0| T@U) (|$ih#low0#0| Int) ) (!  (=> (and (and ($Is DatatypeTypeType |$ih#s0#0| (Tclass._module.Stream |_module._default.Lemma_Incr0#$_T0|)) (_module.__default.IncrFrom |_module._default.Lemma_Incr0#$_T0| ($LS $LZ) |$ih#s0#0| |$ih#low0#0| |ord#1|)) (or (|ORD#Less| |$ih#_k0#0| |_k#0@@11|) (and (= |$ih#_k0#0| |_k#0@@11|) (and (<= 0 |$ih#low0#0|) (< |$ih#low0#0| |low#1|))))) (_module.__default.Increasing_h |_module._default.Lemma_Incr0#$_T0| ($LS $LZ) |$ih#_k0#0| |$ih#s0#0| |ord#1|))
 :pattern ( (_module.__default.Increasing_h |_module._default.Lemma_Incr0#$_T0| ($LS $LZ) |$ih#_k0#0| |$ih#s0#0| |ord#1|) (_module.__default.IncrFrom |_module._default.Lemma_Incr0#$_T0| ($LS $LZ) |$ih#s0#0| |$ih#low0#0| |ord#1|))
)))) (and (=> (= (ControlFlow 0 7) 5) anon3_Then_correct) (=> (= (ControlFlow 0 7) 6) anon3_Else_correct))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap@@6) ($IsHeapAnchor $Heap@@6)) (=> (and (and ($Is DatatypeTypeType |s#1| (Tclass._module.Stream |_module._default.Lemma_Incr0#$_T0|)) ($IsAlloc DatatypeTypeType |s#1| (Tclass._module.Stream |_module._default.Lemma_Incr0#$_T0|) $Heap@@6)) (|$IsA#_module.Stream| |s#1|)) (=> (and (and (and ($Is HandleTypeType |ord#1| (Tclass._System.___hTotalFunc1 |_module._default.Lemma_Incr0#$_T0| TInt)) ($IsAlloc HandleTypeType |ord#1| (Tclass._System.___hTotalFunc1 |_module._default.Lemma_Incr0#$_T0| TInt) $Heap@@6)) (= 3 $FunctionContextHeight)) (and (and (|_module.__default.IncrFrom#canCall| |_module._default.Lemma_Incr0#$_T0| |s#1| |low#1| |ord#1|) (and (_module.__default.IncrFrom |_module._default.Lemma_Incr0#$_T0| ($LS $LZ) |s#1| |low#1| |ord#1|) (and (<= |low#1| (U_2_int ($Unbox intType (Apply1 |_module._default.Lemma_Incr0#$_T0| TInt $Heap@@6 |ord#1| (_module.Stream.head |s#1|))))) (_module.__default.IncrFrom |_module._default.Lemma_Incr0#$_T0| ($LS $LZ) (_module.Stream.tail |s#1|) (+ (U_2_int ($Unbox intType (Apply1 |_module._default.Lemma_Incr0#$_T0| TInt $Heap@@6 |ord#1| (_module.Stream.head |s#1|)))) 1) |ord#1|)))) (= (ControlFlow 0 8) 7))) anon0_correct)))))
PreconditionGeneratedEntry_correct))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
