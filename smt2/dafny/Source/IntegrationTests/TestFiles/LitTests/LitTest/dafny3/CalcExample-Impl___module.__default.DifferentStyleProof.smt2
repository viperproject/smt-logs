(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun alloc () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt alloc)
)
(assert (= (Tag TInt) TagInt))
(assert (forall ((x@@2 T@U) (T T@T) ) (! (= ($Box T ($Unbox T x@@2)) x@@2)
 :pattern ( ($Unbox T x@@2))
)))
(assert (forall ((x@@3 T@U) (T@@0 T@T) ) (! (= ($Unbox T@@0 ($Box T@@0 x@@3)) x@@3)
 :pattern ( ($Box T@@0 x@@3))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0 t1 t2 (MapType0Store t0 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 3)) (= (Ctor FieldType) 4)) (forall ((t0@@0 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 (MapType1Store t0@@0 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :weight 0
))) (= (Ctor BoxType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 6))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((h T@U) (v T@U) ) (! ($IsAlloc intType v TInt h)
 :pattern ( ($IsAlloc intType v TInt h))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun _module.__default.f (Int Int) Int)
(declare-fun |a#0| () Int)
(declare-fun |b#0| () Int)
(declare-fun |c#0| () Int)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $Heap@0 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |_module.__default.f#canCall| (Int Int) Bool)
(declare-fun $Heap () T@U)
(declare-fun |##y#3@0| () Int)
(declare-fun |##x#5@0| () Int)
(declare-fun |x#0| () Int)
(declare-fun |##x#11@0| () Int)
(declare-fun $Heap@1 () T@U)
(declare-fun |##y#23@0| () Int)
(declare-fun |##y#33@0| () Int)
(declare-fun |##y#31@0| () Int)
(declare-fun |##y#26@0| () Int)
(declare-fun $Heap@2 () T@U)
(declare-fun |##x#14@0| () Int)
(declare-fun |##y#7@0| () Int)
(declare-fun |##x#9@0| () Int)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $FunctionContextHeight () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 46) (let ((anon42_Else_correct true))
(let ((anon42_Then_correct  (=> (= (ControlFlow 0 42) (- 0 41)) (= (_module.__default.f |a#0| (_module.__default.f |b#0| |c#0|)) (_module.__default.f (_module.__default.f |a#0| |b#0|) |c#0|)))))
(let ((anon41_Then_correct  (=> (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (=> (and (and (and (|_module.__default.f#canCall| |b#0| |c#0|) (|_module.__default.f#canCall| |a#0| (_module.__default.f |b#0| |c#0|))) (and (|_module.__default.f#canCall| |a#0| |b#0|) (|_module.__default.f#canCall| (_module.__default.f |a#0| |b#0|) |c#0|))) (and (and (= (_module.__default.f |a#0| (_module.__default.f |b#0| |c#0|)) (_module.__default.f (_module.__default.f |a#0| |b#0|) |c#0|)) (= $Heap $Heap@0)) (and ($IsAlloc intType (int_2_U |a#0|) TInt $Heap@0) ($IsAlloc intType (int_2_U |b#0|) TInt $Heap@0)))) (=> (and (and (and (and ($IsAlloc intType (int_2_U |c#0|) TInt $Heap@0) (|_module.__default.f#canCall| |b#0| |c#0|)) (and (= |##y#3@0| (_module.__default.f |b#0| |c#0|)) ($IsAlloc intType (int_2_U |##y#3@0|) TInt $Heap@0))) (and (and (|_module.__default.f#canCall| |a#0| (_module.__default.f |b#0| |c#0|)) ($IsAlloc intType (int_2_U |a#0|) TInt $Heap@0)) (and ($IsAlloc intType (int_2_U |b#0|) TInt $Heap@0) (|_module.__default.f#canCall| |a#0| |b#0|)))) (and (and (and (= |##x#5@0| (_module.__default.f |a#0| |b#0|)) ($IsAlloc intType (int_2_U |##x#5@0|) TInt $Heap@0)) (and ($IsAlloc intType (int_2_U |c#0|) TInt $Heap@0) (|_module.__default.f#canCall| (_module.__default.f |a#0| |b#0|) |c#0|))) (and (and (|_module.__default.f#canCall| |b#0| |c#0|) (|_module.__default.f#canCall| |a#0| (_module.__default.f |b#0| |c#0|))) (and (|_module.__default.f#canCall| |a#0| |b#0|) (|_module.__default.f#canCall| (_module.__default.f |a#0| |b#0|) |c#0|))))) (and (=> (= (ControlFlow 0 44) 42) anon42_Then_correct) (=> (= (ControlFlow 0 44) 43) anon42_Else_correct)))))))
(let ((anon45_Else_correct true))
(let ((anon45_Then_correct  (=> (= (ControlFlow 0 37) (- 0 36)) (= (_module.__default.f (_module.__default.f |a#0| |b#0|) |c#0|) (_module.__default.f |x#0| |c#0|)))))
(let ((anon44_Then_correct  (=> (= |x#0| (_module.__default.f |a#0| |b#0|)) (=> (and ($IsAlloc intType (int_2_U |a#0|) TInt $Heap) ($IsAlloc intType (int_2_U |b#0|) TInt $Heap)) (=> (and (and (|_module.__default.f#canCall| |a#0| |b#0|) (= |##x#11@0| (_module.__default.f |a#0| |b#0|))) (and ($IsAlloc intType (int_2_U |##x#11@0|) TInt $Heap) ($IsAlloc intType (int_2_U |c#0|) TInt $Heap))) (=> (and (and (and (|_module.__default.f#canCall| (_module.__default.f |a#0| |b#0|) |c#0|) ($IsAlloc intType (int_2_U |x#0|) TInt $Heap)) (and ($IsAlloc intType (int_2_U |c#0|) TInt $Heap) (|_module.__default.f#canCall| |x#0| |c#0|))) (and (and (|_module.__default.f#canCall| |a#0| |b#0|) (|_module.__default.f#canCall| (_module.__default.f |a#0| |b#0|) |c#0|)) (|_module.__default.f#canCall| |x#0| |c#0|))) (and (=> (= (ControlFlow 0 39) 37) anon45_Then_correct) (=> (= (ControlFlow 0 39) 38) anon45_Else_correct))))))))
(let ((anon52_Else_correct true))
(let ((anon52_Then_correct  (=> (= (ControlFlow 0 31) (- 0 30)) (= (_module.__default.f |x#0| |x#0|) |x#0|))))
(let ((anon51_Then_correct  (=> (and (and (and (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1)) (|_module.__default.f#canCall| |x#0| |x#0|)) (and (= (_module.__default.f |x#0| |x#0|) |x#0|) (= $Heap $Heap@1))) (and (and ($IsAlloc intType (int_2_U |x#0|) TInt $Heap@1) ($IsAlloc intType (int_2_U |x#0|) TInt $Heap@1)) (and (|_module.__default.f#canCall| |x#0| |x#0|) (|_module.__default.f#canCall| |x#0| |x#0|)))) (and (=> (= (ControlFlow 0 33) 31) anon52_Then_correct) (=> (= (ControlFlow 0 33) 32) anon52_Else_correct)))))
(let ((anon55_Else_correct true))
(let ((anon55_Then_correct  (=> (= (ControlFlow 0 26) (- 0 25)) (= (_module.__default.f |a#0| (_module.__default.f |b#0| |c#0|)) (_module.__default.f |x#0| |c#0|)))))
(let ((anon54_Then_correct  (=> (and (and (and (and (= (_module.__default.f |a#0| (_module.__default.f |b#0| |c#0|)) (_module.__default.f (_module.__default.f |a#0| |b#0|) |c#0|)) (= (_module.__default.f (_module.__default.f |a#0| |b#0|) |c#0|) (_module.__default.f |x#0| |c#0|))) (and ($IsAlloc intType (int_2_U |a#0|) TInt $Heap) ($IsAlloc intType (int_2_U |b#0|) TInt $Heap))) (and (and ($IsAlloc intType (int_2_U |c#0|) TInt $Heap) (|_module.__default.f#canCall| |b#0| |c#0|)) (and (= |##y#23@0| (_module.__default.f |b#0| |c#0|)) ($IsAlloc intType (int_2_U |##y#23@0|) TInt $Heap)))) (and (and (and (|_module.__default.f#canCall| |a#0| (_module.__default.f |b#0| |c#0|)) ($IsAlloc intType (int_2_U |x#0|) TInt $Heap)) (and ($IsAlloc intType (int_2_U |c#0|) TInt $Heap) (|_module.__default.f#canCall| |x#0| |c#0|))) (and (and (|_module.__default.f#canCall| |b#0| |c#0|) (|_module.__default.f#canCall| |a#0| (_module.__default.f |b#0| |c#0|))) (|_module.__default.f#canCall| |x#0| |c#0|)))) (and (=> (= (ControlFlow 0 28) 26) anon55_Then_correct) (=> (= (ControlFlow 0 28) 27) anon55_Else_correct)))))
(let ((anon58_Else_correct true))
(let ((anon58_Then_correct  (=> (= (ControlFlow 0 21) (- 0 20)) (<= (_module.__default.f |x#0| |c#0|) |x#0|))))
(let ((anon57_Then_correct  (=> (and (<= (_module.__default.f |x#0| |c#0|) (_module.__default.f |x#0| |x#0|)) (= (_module.__default.f |x#0| |x#0|) |x#0|)) (=> (and (and ($IsAlloc intType (int_2_U |x#0|) TInt $Heap) ($IsAlloc intType (int_2_U |c#0|) TInt $Heap)) (and (|_module.__default.f#canCall| |x#0| |c#0|) (|_module.__default.f#canCall| |x#0| |c#0|))) (and (=> (= (ControlFlow 0 23) 21) anon58_Then_correct) (=> (= (ControlFlow 0 23) 22) anon58_Else_correct))))))
(let ((GeneratedUnifiedExit_correct  (=> (= (ControlFlow 0 17) (- 0 16)) (<= (_module.__default.f |a#0| (_module.__default.f |b#0| |c#0|)) |x#0|))))
(let ((anon60_Else_correct  (=> ($IsAlloc intType (int_2_U |a#0|) TInt $Heap) (=> (and ($IsAlloc intType (int_2_U |b#0|) TInt $Heap) ($IsAlloc intType (int_2_U |c#0|) TInt $Heap)) (=> (and (and (and (|_module.__default.f#canCall| |b#0| |c#0|) (= |##y#33@0| (_module.__default.f |b#0| |c#0|))) (and ($IsAlloc intType (int_2_U |##y#33@0|) TInt $Heap) (|_module.__default.f#canCall| |a#0| (_module.__default.f |b#0| |c#0|)))) (and (and (|_module.__default.f#canCall| |b#0| |c#0|) (|_module.__default.f#canCall| |a#0| (_module.__default.f |b#0| |c#0|))) (and (<= (_module.__default.f |a#0| (_module.__default.f |b#0| |c#0|)) |x#0|) (= (ControlFlow 0 18) 17)))) GeneratedUnifiedExit_correct)))))
(let ((anon60_Then_correct  (=> (= (_module.__default.f |a#0| (_module.__default.f |b#0| |c#0|)) (_module.__default.f |x#0| |c#0|)) (=> (and (and (<= (_module.__default.f |x#0| |c#0|) |x#0|) ($IsAlloc intType (int_2_U |a#0|) TInt $Heap)) (and ($IsAlloc intType (int_2_U |b#0|) TInt $Heap) ($IsAlloc intType (int_2_U |c#0|) TInt $Heap))) (=> (and (and (and (|_module.__default.f#canCall| |b#0| |c#0|) (= |##y#31@0| (_module.__default.f |b#0| |c#0|))) (and ($IsAlloc intType (int_2_U |##y#31@0|) TInt $Heap) (|_module.__default.f#canCall| |a#0| (_module.__default.f |b#0| |c#0|)))) (and (and (|_module.__default.f#canCall| |b#0| |c#0|) (|_module.__default.f#canCall| |a#0| (_module.__default.f |b#0| |c#0|))) (= (ControlFlow 0 15) (- 0 14)))) (<= (_module.__default.f |a#0| (_module.__default.f |b#0| |c#0|)) |x#0|))))))
(let ((anon59_Then_correct true))
(let ((anon57_Else_correct  (=> (and (and ($IsAlloc intType (int_2_U |x#0|) TInt $Heap) ($IsAlloc intType (int_2_U |c#0|) TInt $Heap)) (and (|_module.__default.f#canCall| |x#0| |c#0|) (|_module.__default.f#canCall| |x#0| |c#0|))) (and (and (=> (= (ControlFlow 0 19) 13) anon59_Then_correct) (=> (= (ControlFlow 0 19) 15) anon60_Then_correct)) (=> (= (ControlFlow 0 19) 18) anon60_Else_correct)))))
(let ((anon56_Then_correct true))
(let ((anon54_Else_correct  (=> (and ($IsAlloc intType (int_2_U |a#0|) TInt $Heap) ($IsAlloc intType (int_2_U |b#0|) TInt $Heap)) (=> (and (and ($IsAlloc intType (int_2_U |c#0|) TInt $Heap) (|_module.__default.f#canCall| |b#0| |c#0|)) (and (= |##y#26@0| (_module.__default.f |b#0| |c#0|)) ($IsAlloc intType (int_2_U |##y#26@0|) TInt $Heap))) (=> (and (and (and (|_module.__default.f#canCall| |a#0| (_module.__default.f |b#0| |c#0|)) ($IsAlloc intType (int_2_U |x#0|) TInt $Heap)) (and ($IsAlloc intType (int_2_U |c#0|) TInt $Heap) (|_module.__default.f#canCall| |x#0| |c#0|))) (and (and (|_module.__default.f#canCall| |b#0| |c#0|) (|_module.__default.f#canCall| |a#0| (_module.__default.f |b#0| |c#0|))) (|_module.__default.f#canCall| |x#0| |c#0|))) (and (and (=> (= (ControlFlow 0 24) 12) anon56_Then_correct) (=> (= (ControlFlow 0 24) 23) anon57_Then_correct)) (=> (= (ControlFlow 0 24) 19) anon57_Else_correct)))))))
(let ((anon53_Then_correct true))
(let ((anon51_Else_correct  (=> (and (and ($IsAlloc intType (int_2_U |x#0|) TInt $Heap) ($IsAlloc intType (int_2_U |x#0|) TInt $Heap)) (and (|_module.__default.f#canCall| |x#0| |x#0|) (|_module.__default.f#canCall| |x#0| |x#0|))) (and (and (=> (= (ControlFlow 0 29) 11) anon53_Then_correct) (=> (= (ControlFlow 0 29) 28) anon54_Then_correct)) (=> (= (ControlFlow 0 29) 24) anon54_Else_correct)))))
(let ((anon50_Then_correct true))
(let ((anon47_Else_correct  (=> (and (and (and ($IsAlloc intType (int_2_U |x#0|) TInt $Heap) ($IsAlloc intType (int_2_U |c#0|) TInt $Heap)) (and (|_module.__default.f#canCall| |x#0| |c#0|) ($IsAlloc intType (int_2_U |x#0|) TInt $Heap))) (and (and ($IsAlloc intType (int_2_U |x#0|) TInt $Heap) (|_module.__default.f#canCall| |x#0| |x#0|)) (and (|_module.__default.f#canCall| |x#0| |c#0|) (|_module.__default.f#canCall| |x#0| |x#0|)))) (and (and (=> (= (ControlFlow 0 34) 10) anon50_Then_correct) (=> (= (ControlFlow 0 34) 33) anon51_Then_correct)) (=> (= (ControlFlow 0 34) 29) anon51_Else_correct)))))
(let ((anon49_Else_correct true))
(let ((anon49_Then_correct  (=> (= (ControlFlow 0 6) (- 0 5)) (<= (_module.__default.f |x#0| |c#0|) (_module.__default.f |x#0| |x#0|)))))
(let ((anon48_Else_correct  (=> (<= |c#0| |x#0|) (and (=> (= (ControlFlow 0 8) (- 0 9)) (<= |c#0| |x#0|)) (=> (<= |c#0| |x#0|) (=> (and (and (and (and ($IsGoodHeap $Heap@2) ($IsHeapAnchor $Heap@2)) (forall ((|x#1| Int) ) (!  (and (|_module.__default.f#canCall| |x#1| |c#0|) (|_module.__default.f#canCall| |x#1| |x#0|))
 :pattern ( (_module.__default.f |x#1| |x#0|))
 :pattern ( (_module.__default.f |x#1| |c#0|))
))) (and (forall ((|x#1@@0| Int) ) (! (<= (_module.__default.f |x#1@@0| |c#0|) (_module.__default.f |x#1@@0| |x#0|))
 :pattern ( (_module.__default.f |x#1@@0| |x#0|))
 :pattern ( (_module.__default.f |x#1@@0| |c#0|))
)) (= $Heap $Heap@2))) (and (and (and ($IsAlloc intType (int_2_U |x#0|) TInt $Heap@2) ($IsAlloc intType (int_2_U |c#0|) TInt $Heap@2)) (and (|_module.__default.f#canCall| |x#0| |c#0|) ($IsAlloc intType (int_2_U |x#0|) TInt $Heap@2))) (and (and ($IsAlloc intType (int_2_U |x#0|) TInt $Heap@2) (|_module.__default.f#canCall| |x#0| |x#0|)) (and (|_module.__default.f#canCall| |x#0| |c#0|) (|_module.__default.f#canCall| |x#0| |x#0|))))) (and (=> (= (ControlFlow 0 8) 6) anon49_Then_correct) (=> (= (ControlFlow 0 8) 7) anon49_Else_correct))))))))
(let ((anon48_Then_correct  (=> (and (<= |c#0| |x#0|) (= (ControlFlow 0 4) (- 0 3))) (<= |c#0| |x#0|))))
(let ((anon46_Then_correct true))
(let ((anon44_Else_correct  (=> (and ($IsAlloc intType (int_2_U |a#0|) TInt $Heap) ($IsAlloc intType (int_2_U |b#0|) TInt $Heap)) (=> (and (and (|_module.__default.f#canCall| |a#0| |b#0|) (= |##x#14@0| (_module.__default.f |a#0| |b#0|))) (and ($IsAlloc intType (int_2_U |##x#14@0|) TInt $Heap) ($IsAlloc intType (int_2_U |c#0|) TInt $Heap))) (=> (and (and (and (|_module.__default.f#canCall| (_module.__default.f |a#0| |b#0|) |c#0|) ($IsAlloc intType (int_2_U |x#0|) TInt $Heap)) (and ($IsAlloc intType (int_2_U |c#0|) TInt $Heap) (|_module.__default.f#canCall| |x#0| |c#0|))) (and (and (|_module.__default.f#canCall| |a#0| |b#0|) (|_module.__default.f#canCall| (_module.__default.f |a#0| |b#0|) |c#0|)) (|_module.__default.f#canCall| |x#0| |c#0|))) (and (and (and (=> (= (ControlFlow 0 35) 2) anon46_Then_correct) (=> (= (ControlFlow 0 35) 34) anon47_Else_correct)) (=> (= (ControlFlow 0 35) 4) anon48_Then_correct)) (=> (= (ControlFlow 0 35) 8) anon48_Else_correct)))))))
(let ((anon43_Then_correct true))
(let ((anon41_Else_correct  (=> (and ($IsAlloc intType (int_2_U |a#0|) TInt $Heap) ($IsAlloc intType (int_2_U |b#0|) TInt $Heap)) (=> (and (and (and (and ($IsAlloc intType (int_2_U |c#0|) TInt $Heap) (|_module.__default.f#canCall| |b#0| |c#0|)) (and (= |##y#7@0| (_module.__default.f |b#0| |c#0|)) ($IsAlloc intType (int_2_U |##y#7@0|) TInt $Heap))) (and (and (|_module.__default.f#canCall| |a#0| (_module.__default.f |b#0| |c#0|)) ($IsAlloc intType (int_2_U |a#0|) TInt $Heap)) (and ($IsAlloc intType (int_2_U |b#0|) TInt $Heap) (|_module.__default.f#canCall| |a#0| |b#0|)))) (and (and (and (= |##x#9@0| (_module.__default.f |a#0| |b#0|)) ($IsAlloc intType (int_2_U |##x#9@0|) TInt $Heap)) (and ($IsAlloc intType (int_2_U |c#0|) TInt $Heap) (|_module.__default.f#canCall| (_module.__default.f |a#0| |b#0|) |c#0|))) (and (and (|_module.__default.f#canCall| |b#0| |c#0|) (|_module.__default.f#canCall| |a#0| (_module.__default.f |b#0| |c#0|))) (and (|_module.__default.f#canCall| |a#0| |b#0|) (|_module.__default.f#canCall| (_module.__default.f |a#0| |b#0|) |c#0|))))) (and (and (=> (= (ControlFlow 0 40) 1) anon43_Then_correct) (=> (= (ControlFlow 0 40) 39) anon44_Then_correct)) (=> (= (ControlFlow 0 40) 35) anon44_Else_correct))))))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (and (=> (= (ControlFlow 0 45) 44) anon41_Then_correct) (=> (= (ControlFlow 0 45) 40) anon41_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (and (= 2 $FunctionContextHeight) (= (ControlFlow 0 46) 45))) anon0_correct)))
PreconditionGeneratedEntry_correct)))))))))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
