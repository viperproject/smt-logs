(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TBool () T@U)
(declare-fun TagBool () T@U)
(declare-fun alloc () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun $AlwaysAllocated (T@U) Bool)
(declare-fun Tclass._module.T () T@U)
(declare-fun Apply1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |_module.__default.f#Handle| () T@U)
(declare-fun _module.__default.f (T@U) T@U)
(declare-fun |_module.__default.g#Handle| () T@U)
(declare-fun _module.__default.g (T@U) T@U)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun _module.__default.Below (T@U T@U) Bool)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun Apply2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |_module.__default.Below#Handle| () T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun $FunctionContextHeight () Int)
(declare-fun |_module.__default.f#canCall| (T@U) Bool)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun |_module.__default.g#canCall| (T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TBool TagBool alloc)
)
(assert (= (Tag TBool) TagBool))
(assert ($AlwaysAllocated Tclass._module.T))
(assert (forall (($heap T@U) (|$fh$0x#0| T@U) ) (! (= (Apply1 Tclass._module.T Tclass._module.T $heap |_module.__default.f#Handle| |$fh$0x#0|) (_module.__default.f |$fh$0x#0|))
 :pattern ( (Apply1 Tclass._module.T Tclass._module.T $heap |_module.__default.f#Handle| |$fh$0x#0|))
)))
(assert (forall (($heap@@0 T@U) (|$fh$0x#0@@0| T@U) ) (! (= (Apply1 Tclass._module.T Tclass._module.T $heap@@0 |_module.__default.g#Handle| |$fh$0x#0@@0|) (_module.__default.g |$fh$0x#0@@0|))
 :pattern ( (Apply1 Tclass._module.T Tclass._module.T $heap@@0 |_module.__default.g#Handle| |$fh$0x#0@@0|))
)))
(assert (forall ((x@@2 T@U) (T T@T) ) (! (= (Lit T x@@2) x@@2)
 :pattern ( (Lit T x@@2))
)))
(assert (forall ((x@@3 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@3)) x@@3)
 :pattern ( ($Unbox T@@0 x@@3))
)))
(assert (forall (($heap@@1 T@U) (|$fh$0x#0@@1| T@U) (|$fh$0x#1| T@U) ) (! (= (_module.__default.Below |$fh$0x#0@@1| |$fh$0x#1|) (U_2_bool ($Unbox boolType (Apply2 Tclass._module.T Tclass._module.T TBool $heap@@1 |_module.__default.Below#Handle| |$fh$0x#0@@1| |$fh$0x#1|))))
 :pattern ( (_module.__default.Below |$fh$0x#0@@1| |$fh$0x#1|) ($IsGoodHeap $heap@@1))
)))
(assert (forall ((v T@U) (t T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v) t h) ($IsAlloc T@@1 v t h))
 :pattern ( ($IsAllocBox ($Box T@@1 v) t h))
)))
(assert (forall (($heap@@2 T@U) (|$fh$0x#0@@2| T@U) ) (! (= (_module.__default.f |$fh$0x#0@@2|) (Apply1 Tclass._module.T Tclass._module.T $heap@@2 |_module.__default.f#Handle| |$fh$0x#0@@2|))
 :pattern ( (_module.__default.f |$fh$0x#0@@2|) ($IsGoodHeap $heap@@2))
)))
(assert (forall (($heap@@3 T@U) (|$fh$0x#0@@3| T@U) ) (! (= (_module.__default.g |$fh$0x#0@@3|) (Apply1 Tclass._module.T Tclass._module.T $heap@@3 |_module.__default.g#Handle| |$fh$0x#0@@3|))
 :pattern ( (_module.__default.g |$fh$0x#0@@3|) ($IsGoodHeap $heap@@3))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|x#0| T@U) ) (!  (=> (or (|_module.__default.f#canCall| |x#0|) (and (< 0 $FunctionContextHeight) ($IsBox |x#0| Tclass._module.T))) ($IsBox (_module.__default.f |x#0|) Tclass._module.T))
 :pattern ( (_module.__default.f |x#0|))
))))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|x#0@@0| T@U) ) (!  (=> (or (|_module.__default.g#canCall| |x#0@@0|) (and (< 0 $FunctionContextHeight) ($IsBox |x#0@@0| Tclass._module.T))) ($IsBox (_module.__default.g |x#0@@0|) Tclass._module.T))
 :pattern ( (_module.__default.g |x#0@@0|))
))))
(assert (forall ((bx T@U) ) (!  (=> ($IsBox bx TBool) (and (= ($Box boolType ($Unbox boolType bx)) bx) ($Is boolType ($Unbox boolType bx) TBool)))
 :pattern ( ($IsBox bx TBool))
)))
(assert (forall ((v@@0 T@U) (t@@0 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@0) t@@0) ($Is T@@2 v@@0 t@@0))
 :pattern ( ($IsBox ($Box T@@2 v@@0) t@@0))
)))
(assert (forall ((ty T@U) ) (!  (=> ($AlwaysAllocated ty) (forall ((h@@0 T@U) (v@@1 T@U) ) (!  (=> ($IsBox v@@1 ty) ($IsAllocBox v@@1 ty h@@0))
 :pattern ( ($IsAllocBox v@@1 ty h@@0))
)))
 :pattern ( ($AlwaysAllocated ty))
)))
(assert (forall (($heap@@4 T@U) (|$fh$0x#0@@4| T@U) (|$fh$0x#1@@0| T@U) ) (! (= (Apply2 Tclass._module.T Tclass._module.T TBool $heap@@4 |_module.__default.Below#Handle| |$fh$0x#0@@4| |$fh$0x#1@@0|) ($Box boolType (bool_2_U (_module.__default.Below |$fh$0x#0@@4| |$fh$0x#1@@0|))))
 :pattern ( (Apply2 Tclass._module.T Tclass._module.T TBool $heap@@4 |_module.__default.Below#Handle| |$fh$0x#0@@4| |$fh$0x#1@@0|))
)))
(assert (forall ((x@@4 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@4)) x@@4)
 :pattern ( ($Box T@@3 x@@4))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0 t1 t2 (MapType0Store t0 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 3)) (= (Ctor FieldType) 4)) (forall ((t0@@0 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 (MapType1Store t0@@0 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :weight 0
))) (= (Ctor BoxType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 6))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((x@@5 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@5)) (Lit BoxType ($Box T@@4 x@@5)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@5)))
)))
(assert (forall ((h@@1 T@U) (v@@2 T@U) ) (! ($IsAlloc boolType v@@2 TBool h@@1)
 :pattern ( ($IsAlloc boolType v@@2 TBool h@@1))
)))
(assert (forall ((v@@3 T@U) ) (! ($Is boolType v@@3 TBool)
 :pattern ( ($Is boolType v@@3 TBool))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |u#0| () T@U)
(declare-fun |v#0| () T@U)
(declare-fun $Heap@5 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun $Heap@3 () T@U)
(declare-fun |below##0@0| () T@U)
(declare-fun |a##0@0| () T@U)
(declare-fun |b##0@0| () T@U)
(declare-fun $Heap@6 () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun $Heap () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun null () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 17) (let ((GeneratedUnifiedExit_correct  (=> (= (ControlFlow 0 5) (- 0 4)) (_module.__default.Below (_module.__default.f |u#0|) (_module.__default.f |v#0|)))))
(let ((anon12_Else_correct  (=> (and (and ($IsGoodHeap $Heap@5) ($IsHeapAnchor $Heap@5)) (and (= $Heap@3 $Heap@5) (forall ((|x#2_1| T@U) (|y#2_1| T@U) ) (!  (=> (and (and ($IsBox |x#2_1| Tclass._module.T) ($IsBox |y#2_1| Tclass._module.T)) (U_2_bool (Lit boolType (bool_2_U true)))) (= (_module.__default.Below (_module.__default.f |x#2_1|) |y#2_1|) (_module.__default.Below |x#2_1| (_module.__default.g |y#2_1|))))
 :pattern ( (_module.__default.g |y#2_1|) (_module.__default.f |x#2_1|))
)))) (and (=> (= (ControlFlow 0 6) (- 0 13)) (or (not (= 0 $FunctionContextHeight)) (not true))) (=> (or (not (= 0 $FunctionContextHeight)) (not true)) (=> (= |below##0@0| |_module.__default.Below#Handle|) (and (=> (= (ControlFlow 0 6) (- 0 12)) (or (not (= 0 $FunctionContextHeight)) (not true))) (=> (or (not (= 0 $FunctionContextHeight)) (not true)) (=> (= |a##0@0| |_module.__default.f#Handle|) (and (=> (= (ControlFlow 0 6) (- 0 11)) (or (not (= 0 $FunctionContextHeight)) (not true))) (=> (or (not (= 0 $FunctionContextHeight)) (not true)) (=> (= |b##0@0| |_module.__default.g#Handle|) (and (=> (= (ControlFlow 0 6) (- 0 10)) (forall ((|x#1| T@U) ) (!  (=> ($IsBox |x#1| Tclass._module.T) (U_2_bool ($Unbox boolType (Apply2 Tclass._module.T Tclass._module.T TBool $Heap@5 |below##0@0| |x#1| |x#1|))))
 :pattern ( ($Unbox boolType (Apply2 Tclass._module.T Tclass._module.T TBool $Heap@5 |below##0@0| |x#1| |x#1|)))
))) (=> (forall ((|x#1@@0| T@U) ) (!  (=> ($IsBox |x#1@@0| Tclass._module.T) (U_2_bool ($Unbox boolType (Apply2 Tclass._module.T Tclass._module.T TBool $Heap@5 |below##0@0| |x#1@@0| |x#1@@0|))))
 :pattern ( ($Unbox boolType (Apply2 Tclass._module.T Tclass._module.T TBool $Heap@5 |below##0@0| |x#1@@0| |x#1@@0|)))
)) (and (=> (= (ControlFlow 0 6) (- 0 9)) (forall ((|x#3| T@U) (|y#1| T@U) (|z#1| T@U) ) (!  (=> (and (and ($IsBox |x#3| Tclass._module.T) ($IsBox |y#1| Tclass._module.T)) ($IsBox |z#1| Tclass._module.T)) (=> (and (U_2_bool ($Unbox boolType (Apply2 Tclass._module.T Tclass._module.T TBool $Heap@5 |below##0@0| |x#3| |y#1|))) (U_2_bool ($Unbox boolType (Apply2 Tclass._module.T Tclass._module.T TBool $Heap@5 |below##0@0| |y#1| |z#1|)))) (U_2_bool ($Unbox boolType (Apply2 Tclass._module.T Tclass._module.T TBool $Heap@5 |below##0@0| |x#3| |z#1|)))))
 :pattern ( ($Unbox boolType (Apply2 Tclass._module.T Tclass._module.T TBool $Heap@5 |below##0@0| |x#3| |z#1|)) ($Unbox boolType (Apply2 Tclass._module.T Tclass._module.T TBool $Heap@5 |below##0@0| |y#1| |z#1|)))
 :pattern ( ($Unbox boolType (Apply2 Tclass._module.T Tclass._module.T TBool $Heap@5 |below##0@0| |y#1| |z#1|)) ($Unbox boolType (Apply2 Tclass._module.T Tclass._module.T TBool $Heap@5 |below##0@0| |x#3| |y#1|)))
))) (=> (forall ((|x#3@@0| T@U) (|y#1@@0| T@U) (|z#1@@0| T@U) ) (!  (=> (and (and ($IsBox |x#3@@0| Tclass._module.T) ($IsBox |y#1@@0| Tclass._module.T)) ($IsBox |z#1@@0| Tclass._module.T)) (=> (and (U_2_bool ($Unbox boolType (Apply2 Tclass._module.T Tclass._module.T TBool $Heap@5 |below##0@0| |x#3@@0| |y#1@@0|))) (U_2_bool ($Unbox boolType (Apply2 Tclass._module.T Tclass._module.T TBool $Heap@5 |below##0@0| |y#1@@0| |z#1@@0|)))) (U_2_bool ($Unbox boolType (Apply2 Tclass._module.T Tclass._module.T TBool $Heap@5 |below##0@0| |x#3@@0| |z#1@@0|)))))
 :pattern ( ($Unbox boolType (Apply2 Tclass._module.T Tclass._module.T TBool $Heap@5 |below##0@0| |x#3@@0| |z#1@@0|)) ($Unbox boolType (Apply2 Tclass._module.T Tclass._module.T TBool $Heap@5 |below##0@0| |y#1@@0| |z#1@@0|)))
 :pattern ( ($Unbox boolType (Apply2 Tclass._module.T Tclass._module.T TBool $Heap@5 |below##0@0| |y#1@@0| |z#1@@0|)) ($Unbox boolType (Apply2 Tclass._module.T Tclass._module.T TBool $Heap@5 |below##0@0| |x#3@@0| |y#1@@0|)))
)) (and (=> (= (ControlFlow 0 6) (- 0 8)) (forall ((|x#5| T@U) (|y#3| T@U) ) (!  (=> (and ($IsBox |x#5| Tclass._module.T) ($IsBox |y#3| Tclass._module.T)) (= (U_2_bool ($Unbox boolType (Apply2 Tclass._module.T Tclass._module.T TBool $Heap@5 |below##0@0| (Apply1 Tclass._module.T Tclass._module.T $Heap@5 |a##0@0| |x#5|) |y#3|))) (U_2_bool ($Unbox boolType (Apply2 Tclass._module.T Tclass._module.T TBool $Heap@5 |below##0@0| |x#5| (Apply1 Tclass._module.T Tclass._module.T $Heap@5 |b##0@0| |y#3|))))))
 :pattern ( (Apply1 Tclass._module.T Tclass._module.T $Heap@5 |b##0@0| |y#3|) (Apply1 Tclass._module.T Tclass._module.T $Heap@5 |a##0@0| |x#5|))
))) (=> (forall ((|x#5@@0| T@U) (|y#3@@0| T@U) ) (!  (=> (and ($IsBox |x#5@@0| Tclass._module.T) ($IsBox |y#3@@0| Tclass._module.T)) (= (U_2_bool ($Unbox boolType (Apply2 Tclass._module.T Tclass._module.T TBool $Heap@5 |below##0@0| (Apply1 Tclass._module.T Tclass._module.T $Heap@5 |a##0@0| |x#5@@0|) |y#3@@0|))) (U_2_bool ($Unbox boolType (Apply2 Tclass._module.T Tclass._module.T TBool $Heap@5 |below##0@0| |x#5@@0| (Apply1 Tclass._module.T Tclass._module.T $Heap@5 |b##0@0| |y#3@@0|))))))
 :pattern ( (Apply1 Tclass._module.T Tclass._module.T $Heap@5 |b##0@0| |y#3@@0|) (Apply1 Tclass._module.T Tclass._module.T $Heap@5 |a##0@0| |x#5@@0|))
)) (and (=> (= (ControlFlow 0 6) (- 0 7)) (U_2_bool ($Unbox boolType (Apply2 Tclass._module.T Tclass._module.T TBool $Heap@5 |below##0@0| |u#0| |v#0|)))) (=> (U_2_bool ($Unbox boolType (Apply2 Tclass._module.T Tclass._module.T TBool $Heap@5 |below##0@0| |u#0| |v#0|))) (=> (and (and (and ($IsGoodHeap $Heap@6) ($IsHeapAnchor $Heap@6)) (U_2_bool ($Unbox boolType (Apply2 Tclass._module.T Tclass._module.T TBool $Heap@6 |below##0@0| (Apply1 Tclass._module.T Tclass._module.T $Heap@6 |a##0@0| |u#0|) (Apply1 Tclass._module.T Tclass._module.T $Heap@6 |a##0@0| |v#0|))))) (and (= $Heap@5 $Heap@6) (= (ControlFlow 0 6) 5))) GeneratedUnifiedExit_correct)))))))))))))))))))))
(let ((anon12_Then_correct true))
(let ((anon11_Else_correct  (=> (and (and ($IsGoodHeap $Heap@3) ($IsHeapAnchor $Heap@3)) (and (= $Heap@1 $Heap@3) (forall ((|x#1_1| T@U) (|y#1_1| T@U) (|z#1_1| T@U) ) (!  (=> (and (and (and ($IsBox |x#1_1| Tclass._module.T) ($IsBox |y#1_1| Tclass._module.T)) ($IsBox |z#1_1| Tclass._module.T)) (U_2_bool (Lit boolType (bool_2_U true)))) (=> (and (_module.__default.Below |x#1_1| |y#1_1|) (_module.__default.Below |y#1_1| |z#1_1|)) (_module.__default.Below |x#1_1| |z#1_1|)))
 :pattern ( (_module.__default.Below |x#1_1| |z#1_1|) (_module.__default.Below |y#1_1| |z#1_1|))
 :pattern ( (_module.__default.Below |y#1_1| |z#1_1|) (_module.__default.Below |x#1_1| |y#1_1|))
)))) (and (=> (= (ControlFlow 0 14) 3) anon12_Then_correct) (=> (= (ControlFlow 0 14) 6) anon12_Else_correct)))))
(let ((anon11_Then_correct true))
(let ((anon10_Else_correct  (=> (and (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1)) (and (= $Heap $Heap@1) (forall ((|x#0_1| T@U) ) (!  (=> (and ($IsBox |x#0_1| Tclass._module.T) (U_2_bool (Lit boolType (bool_2_U true)))) (_module.__default.Below |x#0_1| |x#0_1|))
 :pattern ( (_module.__default.Below |x#0_1| |x#0_1|))
)))) (and (=> (= (ControlFlow 0 15) 2) anon11_Then_correct) (=> (= (ControlFlow 0 15) 14) anon11_Else_correct)))))
(let ((anon10_Then_correct true))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (and (=> (= (ControlFlow 0 16) 1) anon10_Then_correct) (=> (= (ControlFlow 0 16) 15) anon10_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (and ($IsBox |u#0| Tclass._module.T) ($IsAllocBox |u#0| Tclass._module.T $Heap))) (=> (and (and (and ($IsBox |v#0| Tclass._module.T) ($IsAllocBox |v#0| Tclass._module.T $Heap)) (= 2 $FunctionContextHeight)) (and (_module.__default.Below |u#0| |v#0|) (= (ControlFlow 0 17) 16))) anon0_correct))))
PreconditionGeneratedEntry_correct))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
