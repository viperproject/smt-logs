(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagSet () T@U)
(declare-fun TagSeq () T@U)
(declare-fun alloc () T@U)
(declare-fun allocName () T@U)
(declare-fun Tagclass._System.nat () T@U)
(declare-fun Tagclass._System.object? () T@U)
(declare-fun Tagclass._System.object () T@U)
(declare-fun Tagclass._System.array? () T@U)
(declare-fun Tagclass._System.array () T@U)
(declare-fun Tagclass._System.___hFunc1 () T@U)
(declare-fun Tagclass._module.List () T@U)
(declare-fun Tagclass._module.List? () T@U)
(declare-fun class._module.List? () T@U)
(declare-fun tytagFamily$nat () T@U)
(declare-fun tytagFamily$object () T@U)
(declare-fun tytagFamily$array () T@U)
(declare-fun |tytagFamily$_#Func1| () T@U)
(declare-fun tytagFamily$List () T@U)
(declare-fun field$Repr () T@U)
(declare-fun field$a () T@U)
(declare-fun field$n () T@U)
(declare-fun field$Contents () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun FDim (T@U) Int)
(declare-fun Tag (T@U) T@U)
(declare-fun DeclName (T@U) T@U)
(declare-fun |Set#UnionOne| (T@U T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun Reads1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle1 (T@U T@U T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun SetType () T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun _System.array.Length (T@U) Int)
(declare-fun Tclass._System.array? (T@U) T@U)
(declare-fun null () T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun |lambda#8| (T@U T@U T@U T@U T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun IndexField (Int) T@U)
(declare-fun |Set#Union| (T@U T@U) T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass._System.nat () T@U)
(declare-fun |Set#Difference| (T@U T@U) T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun _module.List.Valid (T@U T@U T@U) Bool)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun Tclass._module.List (T@U) T@U)
(declare-fun _module.List.Repr () T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun Tclass._System.array (T@U) T@U)
(declare-fun Tclass._module.List? (T@U) T@U)
(declare-fun |Set#Empty| () T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun |Seq#Empty| () T@U)
(declare-fun |Seq#Drop| (T@U Int) T@U)
(declare-fun |Seq#Build| (T@U T@U) T@U)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun |Seq#Update| (T@U Int T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun |_module.List.Valid#canCall| (T@U T@U T@U) Bool)
(declare-fun HandleTypeType () T@T)
(declare-fun Tclass._System.___hFunc1 (T@U T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun |Seq#Take| (T@U Int) T@U)
(declare-fun |Seq#Append| (T@U T@U) T@U)
(declare-fun Tclass._System.object () T@U)
(declare-fun Tclass._System.object? () T@U)
(declare-fun FieldOfDecl (T@U T@U) T@U)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun _module.List.Contents () T@U)
(declare-fun _module.List.a () T@U)
(declare-fun _module.List.n () T@U)
(declare-fun |Seq#FromArray| (T@U T@U) T@U)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun SeqType () T@T)
(declare-fun TSeq (T@U) T@U)
(declare-fun $OneHeap () T@U)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun |Seq#Equal| (T@U T@U) Bool)
(declare-fun |Set#Disjoint| (T@U T@U) Bool)
(declare-fun Requires1 (T@U T@U T@U T@U T@U) Bool)
(declare-fun TSet (T@U) T@U)
(declare-fun AtLayer (T@T T@U T@U) T@U)
(declare-fun LayerTypeType () T@T)
(declare-fun Apply1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun |lambda#11| (T@U T@U T@U) T@U)
(declare-fun SetRef_to_SetBox (T@U) T@U)
(declare-fun |lambda#10| (T@U T@U) T@U)
(declare-fun |lambda#12| (T@U) T@U)
(declare-fun DeclType (T@U) T@U)
(declare-fun Tclass._System.___hFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1_1 (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun IndexField_Inverse (T@U) Int)
(declare-fun Tclass._System.array?_0 (T@U) T@U)
(declare-fun Tclass._System.array_0 (T@U) T@U)
(declare-fun Tclass._module.List_0 (T@U) T@U)
(declare-fun Tclass._module.List?_0 (T@U) T@U)
(declare-fun $LS (T@U) T@U)
(declare-fun |lambda#9| (T@U Int) T@U)
(declare-fun |Seq#Build_inv0| (T@U) T@U)
(declare-fun |Seq#Build_inv1| (T@U) T@U)
(declare-fun Mul (Int Int) Int)
(declare-fun |lambda#13| (T@U T@U T@U T@U T@U) T@U)
(declare-fun |lambda#6| (T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt TagSet TagSeq alloc allocName Tagclass._System.nat Tagclass._System.object? Tagclass._System.object Tagclass._System.array? Tagclass._System.array Tagclass._System.___hFunc1 Tagclass._module.List Tagclass._module.List? class._module.List? tytagFamily$nat tytagFamily$object tytagFamily$array |tytagFamily$_#Func1| tytagFamily$List field$Repr field$a field$n field$Contents)
)
(assert (= (FDim alloc) 0))
(assert (= (Tag TInt) TagInt))
(assert (= (DeclName alloc) allocName))
(assert (forall ((a T@U) (x@@2 T@U) ) (! (|Set#IsMember| (|Set#UnionOne| a x@@2) x@@2)
 :pattern ( (|Set#UnionOne| a x@@2))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0 t1 t2 (MapType0Store t0 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
)))) (forall ((t0@@0 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 (MapType1Store t0@@0 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :weight 0
))) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 3))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))) (= (Ctor refType) 4)) (= (Ctor FieldType) 5)) (= (Ctor BoxType) 6)) (= (Ctor SetType) 7)))
(assert (forall ((t0@@1 T@U) (t1@@1 T@U) (heap T@U) (h T@U) (r T@U) (rd T@U) (bx0 T@U) (bx T@U) ) (! (= (|Set#IsMember| (Reads1 t0@@1 t1@@1 heap (Handle1 h r rd) bx0) bx) (|Set#IsMember| (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType SetType rd heap bx0) bx))
 :pattern ( (|Set#IsMember| (Reads1 t0@@1 t1@@1 heap (Handle1 h r rd) bx0) bx))
)))
(assert (forall ((_System.array$arg T@U) ($o T@U) ) (!  (=> (and (or (not (= $o null)) (not true)) (= (dtype $o) (Tclass._System.array? _System.array$arg))) ($Is intType (int_2_U (_System.array.Length $o)) TInt))
 :pattern ( (_System.array.Length $o) (Tclass._System.array? _System.array$arg))
)))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| T@U) (|l#4| T@U) (|$l#0_0#heap#0| T@U) (|$l#0_0#i#0| T@U) ) (! (= (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType (|lambda#8| |l#0| |l#1| |l#2| |l#3| |l#4|) |$l#0_0#heap#0| |$l#0_0#i#0|) (ite (< (U_2_int ($Unbox intType |$l#0_0#i#0|)) (_System.array.Length ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |$l#0_0#heap#0| |l#0|) |l#1|)))) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |$l#0_0#heap#0| ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |$l#0_0#heap#0| |l#2|) |l#3|))) (IndexField (U_2_int ($Unbox intType |$l#0_0#i#0|)))) |l#4|))
 :pattern ( (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType (|lambda#8| |l#0| |l#1| |l#2| |l#3| |l#4|) |$l#0_0#heap#0| |$l#0_0#i#0|))
)))
(assert (forall ((a@@0 T@U) (x@@3 T@U) (y T@U) ) (!  (=> (|Set#IsMember| a@@0 y) (|Set#IsMember| (|Set#UnionOne| a@@0 x@@3) y))
 :pattern ( (|Set#UnionOne| a@@0 x@@3) (|Set#IsMember| a@@0 y))
)))
(assert (forall ((a@@1 T@U) (b T@U) (y@@0 T@U) ) (!  (=> (|Set#IsMember| a@@1 y@@0) (|Set#IsMember| (|Set#Union| a@@1 b) y@@0))
 :pattern ( (|Set#Union| a@@1 b) (|Set#IsMember| a@@1 y@@0))
)))
(assert (forall ((a@@2 T@U) (b@@0 T@U) (y@@1 T@U) ) (!  (=> (|Set#IsMember| b@@0 y@@1) (|Set#IsMember| (|Set#Union| a@@2 b@@0) y@@1))
 :pattern ( (|Set#Union| a@@2 b@@0) (|Set#IsMember| b@@0 y@@1))
)))
(assert (forall ((|x#0| T@U) ($h T@U) ) (! ($IsAlloc intType |x#0| Tclass._System.nat $h)
 :pattern ( ($IsAlloc intType |x#0| Tclass._System.nat $h))
)))
(assert (forall ((a@@3 T@U) (x@@4 T@U) (o T@U) ) (! (= (|Set#IsMember| (|Set#UnionOne| a@@3 x@@4) o)  (or (= o x@@4) (|Set#IsMember| a@@3 o)))
 :pattern ( (|Set#IsMember| (|Set#UnionOne| a@@3 x@@4) o))
)))
(assert (forall ((a@@4 T@U) (b@@1 T@U) (y@@2 T@U) ) (!  (=> (|Set#IsMember| b@@1 y@@2) (not (|Set#IsMember| (|Set#Difference| a@@4 b@@1) y@@2)))
 :pattern ( (|Set#Difference| a@@4 b@@1) (|Set#IsMember| b@@1 y@@2))
)))
(assert (forall ((_module.List$T T@U) ($h0 T@U) ($h1 T@U) (this T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0) ($IsGoodHeap $h1)) (and (or (not (= this null)) (not true)) ($Is refType this (Tclass._module.List _module.List$T)))) (and ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1))) (=> (forall (($o@@0 T@U) ($f T@U) )  (=> (and (or (not (= $o@@0 null)) (not true)) (or (= $o@@0 this) (|Set#IsMember| ($Unbox SetType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h0 this) _module.List.Repr)) ($Box refType $o@@0)))) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h0 $o@@0) $f) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h1 $o@@0) $f)))) (= (_module.List.Valid _module.List$T $h0 this) (_module.List.Valid _module.List$T $h1 this))))
 :pattern ( ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1) (_module.List.Valid _module.List$T $h1 this))
)))
(assert (forall ((_System.array$arg@@0 T@U) (|c#0| T@U) ($h@@0 T@U) ) (! (= ($IsAlloc refType |c#0| (Tclass._System.array _System.array$arg@@0) $h@@0) ($IsAlloc refType |c#0| (Tclass._System.array? _System.array$arg@@0) $h@@0))
 :pattern ( ($IsAlloc refType |c#0| (Tclass._System.array _System.array$arg@@0) $h@@0))
 :pattern ( ($IsAlloc refType |c#0| (Tclass._System.array? _System.array$arg@@0) $h@@0))
)))
(assert (forall ((_module.List$T@@0 T@U) (|c#0@@0| T@U) ($h@@1 T@U) ) (! (= ($IsAlloc refType |c#0@@0| (Tclass._module.List _module.List$T@@0) $h@@1) ($IsAlloc refType |c#0@@0| (Tclass._module.List? _module.List$T@@0) $h@@1))
 :pattern ( ($IsAlloc refType |c#0@@0| (Tclass._module.List _module.List$T@@0) $h@@1))
 :pattern ( ($IsAlloc refType |c#0@@0| (Tclass._module.List? _module.List$T@@0) $h@@1))
)))
(assert (forall ((o@@0 T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o@@0))
 :pattern ( (|Set#IsMember| |Set#Empty| o@@0))
)))
(assert (= (|Seq#Length| |Seq#Empty|) 0))
(assert (forall ((s T@U) (v T@U) (n Int) ) (!  (=> (and (<= 0 n) (<= n (|Seq#Length| s))) (= (|Seq#Drop| (|Seq#Build| s v) n) (|Seq#Build| (|Seq#Drop| s n) v)))
 :pattern ( (|Seq#Drop| (|Seq#Build| s v) n))
)))
(assert (forall ((s@@0 T@U) (i Int) (v@@0 T@U) (n@@0 Int) ) (!  (=> (and (<= 0 n@@0) (< n@@0 (|Seq#Length| s@@0))) (and (=> (= i n@@0) (= (|Seq#Index| (|Seq#Update| s@@0 i v@@0) n@@0) v@@0)) (=> (or (not (= i n@@0)) (not true)) (= (|Seq#Index| (|Seq#Update| s@@0 i v@@0) n@@0) (|Seq#Index| s@@0 n@@0)))))
 :pattern ( (|Seq#Index| (|Seq#Update| s@@0 i v@@0) n@@0))
)))
(assert (forall ((a@@5 T@U) (b@@2 T@U) ) (! (= (|Set#Union| (|Set#Union| a@@5 b@@2) b@@2) (|Set#Union| a@@5 b@@2))
 :pattern ( (|Set#Union| (|Set#Union| a@@5 b@@2) b@@2))
)))
(assert (forall ((a@@6 T@U) (b@@3 T@U) (o@@1 T@U) ) (! (= (|Set#IsMember| (|Set#Difference| a@@6 b@@3) o@@1)  (and (|Set#IsMember| a@@6 o@@1) (not (|Set#IsMember| b@@3 o@@1))))
 :pattern ( (|Set#IsMember| (|Set#Difference| a@@6 b@@3) o@@1))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((_module.List$T@@1 T@U) ($Heap T@U) (this@@0 T@U) ) (!  (=> (or (|_module.List.Valid#canCall| _module.List$T@@1 $Heap this@@0) (and (< 0 $FunctionContextHeight) (and ($IsGoodHeap $Heap) (and (or (not (= this@@0 null)) (not true)) (and ($Is refType this@@0 (Tclass._module.List _module.List$T@@1)) ($IsAlloc refType this@@0 (Tclass._module.List _module.List$T@@1) $Heap)))))) (=> (_module.List.Valid _module.List$T@@1 $Heap this@@0) (|Set#IsMember| ($Unbox SetType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap this@@0) _module.List.Repr)) ($Box refType this@@0))))
 :pattern ( (_module.List.Valid _module.List$T@@1 $Heap this@@0))
))))
(assert (= (Ctor HandleTypeType) 8))
(assert (forall ((f T@U) (t0@@2 T@U) (t1@@2 T@U) (u0@@2 T@U) (u1@@2 T@U) ) (!  (=> (and (and ($Is HandleTypeType f (Tclass._System.___hFunc1 t0@@2 t1@@2)) (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 u0@@2) ($IsBox bx@@0 t0@@2))
 :pattern ( ($IsBox bx@@0 u0@@2))
 :pattern ( ($IsBox bx@@0 t0@@2))
))) (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 t1@@2) ($IsBox bx@@1 u1@@2))
 :pattern ( ($IsBox bx@@1 t1@@2))
 :pattern ( ($IsBox bx@@1 u1@@2))
))) ($Is HandleTypeType f (Tclass._System.___hFunc1 u0@@2 u1@@2)))
 :pattern ( ($Is HandleTypeType f (Tclass._System.___hFunc1 t0@@2 t1@@2)) ($Is HandleTypeType f (Tclass._System.___hFunc1 u0@@2 u1@@2)))
)))
(assert (forall ((s@@1 T@U) (t T@U) (n@@1 Int) ) (!  (=> (= n@@1 (|Seq#Length| s@@1)) (and (= (|Seq#Take| (|Seq#Append| s@@1 t) n@@1) s@@1) (= (|Seq#Drop| (|Seq#Append| s@@1 t) n@@1) t)))
 :pattern ( (|Seq#Take| (|Seq#Append| s@@1 t) n@@1))
 :pattern ( (|Seq#Drop| (|Seq#Append| s@@1 t) n@@1))
)))
(assert (forall ((|c#0@@1| T@U) ($h@@2 T@U) ) (! (= ($IsAlloc refType |c#0@@1| Tclass._System.object $h@@2) ($IsAlloc refType |c#0@@1| Tclass._System.object? $h@@2))
 :pattern ( ($IsAlloc refType |c#0@@1| Tclass._System.object $h@@2))
 :pattern ( ($IsAlloc refType |c#0@@1| Tclass._System.object? $h@@2))
)))
(assert (= (FDim _module.List.Repr) 0))
(assert (= (FieldOfDecl class._module.List? field$Repr) _module.List.Repr))
(assert ($IsGhostField _module.List.Repr))
(assert (= (FDim _module.List.Contents) 0))
(assert (= (FieldOfDecl class._module.List? field$Contents) _module.List.Contents))
(assert ($IsGhostField _module.List.Contents))
(assert (forall ((_System.array$arg@@1 T@U) ($o@@1 T@U) ($h@@3 T@U) ) (! (= ($IsAlloc refType $o@@1 (Tclass._System.array? _System.array$arg@@1) $h@@3)  (or (= $o@@1 null) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@3 $o@@1) alloc)))))
 :pattern ( ($IsAlloc refType $o@@1 (Tclass._System.array? _System.array$arg@@1) $h@@3))
)))
(assert (forall ((_module.List$T@@2 T@U) ($o@@2 T@U) ($h@@4 T@U) ) (! (= ($IsAlloc refType $o@@2 (Tclass._module.List? _module.List$T@@2) $h@@4)  (or (= $o@@2 null) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@4 $o@@2) alloc)))))
 :pattern ( ($IsAlloc refType $o@@2 (Tclass._module.List? _module.List$T@@2) $h@@4))
)))
(assert (= (FDim _module.List.a) 0))
(assert (= (FieldOfDecl class._module.List? field$a) _module.List.a))
(assert  (not ($IsGhostField _module.List.a)))
(assert (= (FDim _module.List.n) 0))
(assert (= (FieldOfDecl class._module.List? field$n) _module.List.n))
(assert  (not ($IsGhostField _module.List.n)))
(assert (forall (($o@@3 T@U) ($h@@5 T@U) ) (! (= ($IsAlloc refType $o@@3 Tclass._System.object? $h@@5)  (or (= $o@@3 null) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@5 $o@@3) alloc)))))
 :pattern ( ($IsAlloc refType $o@@3 Tclass._System.object? $h@@5))
)))
(assert (forall ((h@@0 T@U) (a@@7 T@U) (n0 Int) (n1 Int) ) (!  (=> (and (and (= (+ n0 1) n1) (<= 0 n0)) (<= n1 (_System.array.Length a@@7))) (= (|Seq#Take| (|Seq#FromArray| h@@0 a@@7) n1) (|Seq#Build| (|Seq#Take| (|Seq#FromArray| h@@0 a@@7) n0) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h@@0 a@@7) (IndexField n0)))))
 :pattern ( (|Seq#Take| (|Seq#FromArray| h@@0 a@@7) n0) (|Seq#Take| (|Seq#FromArray| h@@0 a@@7) n1))
)))
(assert (forall ((s@@2 T@U) (i@@0 Int) (v@@1 T@U) (n@@2 Int) ) (!  (=> (and (and (<= 0 n@@2) (<= n@@2 i@@0)) (< i@@0 (|Seq#Length| s@@2))) (= (|Seq#Drop| (|Seq#Update| s@@2 i@@0 v@@1) n@@2) (|Seq#Update| (|Seq#Drop| s@@2 n@@2) (- i@@0 n@@2) v@@1)))
 :pattern ( (|Seq#Drop| (|Seq#Update| s@@2 i@@0 v@@1) n@@2))
)))
(assert (forall ((h@@1 T@U) (k T@U) ) (!  (=> ($HeapSucc h@@1 k) (forall ((o@@2 T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h@@1 o@@2) alloc))) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) k o@@2) alloc))))
 :pattern ( (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) k o@@2) alloc))
)))
 :pattern ( ($HeapSucc h@@1 k))
)))
(assert (forall ((s@@3 T@U) (n@@3 Int) ) (!  (=> (= n@@3 0) (= (|Seq#Drop| s@@3 n@@3) s@@3))
 :pattern ( (|Seq#Drop| s@@3 n@@3))
)))
(assert (forall ((x@@5 Int) ) (! (= (LitInt x@@5) x@@5)
 :pattern ( (LitInt x@@5))
)))
(assert (forall ((x@@6 T@U) (T T@T) ) (! (= (Lit T x@@6) x@@6)
 :pattern ( (Lit T x@@6))
)))
(assert (= (Ctor SeqType) 9))
(assert (forall ((s@@4 T@U) (bx@@2 T@U) (t@@0 T@U) ) (!  (=> (and ($Is SeqType s@@4 (TSeq t@@0)) ($IsBox bx@@2 t@@0)) ($Is SeqType (|Seq#Build| s@@4 bx@@2) (TSeq t@@0)))
 :pattern ( ($Is SeqType (|Seq#Build| s@@4 bx@@2) (TSeq t@@0)))
)))
(assert (forall ((t0@@3 T@U) (t1@@3 T@U) (heap@@0 T@U) (f@@0 T@U) (bx0@@0 T@U) ) (!  (=> (and ($IsGoodHeap heap@@0) (and ($IsBox bx0@@0 t0@@3) ($Is HandleTypeType f@@0 (Tclass._System.___hFunc1 t0@@3 t1@@3)))) (= (|Set#Equal| (Reads1 t0@@3 t1@@3 $OneHeap f@@0 bx0@@0) |Set#Empty|) (|Set#Equal| (Reads1 t0@@3 t1@@3 heap@@0 f@@0 bx0@@0) |Set#Empty|)))
 :pattern ( (Reads1 t0@@3 t1@@3 $OneHeap f@@0 bx0@@0) ($IsGoodHeap heap@@0))
 :pattern ( (Reads1 t0@@3 t1@@3 heap@@0 f@@0 bx0@@0))
)))
(assert (forall ((s@@5 T@U) (n@@4 Int) (j Int) ) (!  (=> (and (and (<= 0 j) (< j n@@4)) (< j (|Seq#Length| s@@5))) (= (|Seq#Index| (|Seq#Take| s@@5 n@@4) j) (|Seq#Index| s@@5 j)))
 :weight 25
 :pattern ( (|Seq#Index| (|Seq#Take| s@@5 n@@4) j))
 :pattern ( (|Seq#Index| s@@5 j) (|Seq#Take| s@@5 n@@4))
)))
(assert (forall ((s@@6 T@U) (n@@5 Int) ) (!  (=> (and (<= 0 n@@5) (<= n@@5 (|Seq#Length| s@@6))) (= (|Seq#Length| (|Seq#Drop| s@@6 n@@5)) (- (|Seq#Length| s@@6) n@@5)))
 :pattern ( (|Seq#Length| (|Seq#Drop| s@@6 n@@5)))
)))
(assert (forall ((_System.array$arg@@2 T@U) ($h@@6 T@U) ($o@@4 T@U) ($i0 Int) ) (!  (=> (and (and (and ($IsGoodHeap $h@@6) (and (or (not (= $o@@4 null)) (not true)) (= (dtype $o@@4) (Tclass._System.array? _System.array$arg@@2)))) (and (<= 0 $i0) (< $i0 (_System.array.Length $o@@4)))) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@6 $o@@4) alloc)))) ($IsAllocBox (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@6 $o@@4) (IndexField $i0)) _System.array$arg@@2 $h@@6))
 :pattern ( (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@6 $o@@4) (IndexField $i0)) (Tclass._System.array? _System.array$arg@@2))
)))
(assert (forall ((s0 T@U) (s1 T@U) ) (! (= (|Seq#Equal| s0 s1)  (and (= (|Seq#Length| s0) (|Seq#Length| s1)) (forall ((j@@0 Int) ) (!  (=> (and (<= 0 j@@0) (< j@@0 (|Seq#Length| s0))) (= (|Seq#Index| s0 j@@0) (|Seq#Index| s1 j@@0)))
 :pattern ( (|Seq#Index| s0 j@@0))
 :pattern ( (|Seq#Index| s1 j@@0))
))))
 :pattern ( (|Seq#Equal| s0 s1))
)))
(assert (forall ((x@@7 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@7)) x@@7)
 :pattern ( ($Unbox T@@0 x@@7))
)))
(assert (forall ((a@@8 T@U) (b@@4 T@U) ) (! (= (|Set#Disjoint| a@@8 b@@4) (forall ((o@@3 T@U) ) (!  (or (not (|Set#IsMember| a@@8 o@@3)) (not (|Set#IsMember| b@@4 o@@3)))
 :pattern ( (|Set#IsMember| a@@8 o@@3))
 :pattern ( (|Set#IsMember| b@@4 o@@3))
)))
 :pattern ( (|Set#Disjoint| a@@8 b@@4))
)))
(assert (forall ((t0@@4 T@U) (t1@@4 T@U) (h0 T@U) (h1 T@U) (f@@1 T@U) (bx0@@1 T@U) ) (!  (=> (and (and (and ($HeapSucc h0 h1) (and ($IsGoodHeap h0) ($IsGoodHeap h1))) (and ($IsBox bx0@@1 t0@@4) ($Is HandleTypeType f@@1 (Tclass._System.___hFunc1 t0@@4 t1@@4)))) (forall ((o@@4 T@U) (fld T@U) )  (=> (and (or (not (= o@@4 null)) (not true)) (|Set#IsMember| (Reads1 t0@@4 t1@@4 h0 f@@1 bx0@@1) ($Box refType o@@4))) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h0 o@@4) fld) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h1 o@@4) fld))))) (= (Requires1 t0@@4 t1@@4 h0 f@@1 bx0@@1) (Requires1 t0@@4 t1@@4 h1 f@@1 bx0@@1)))
 :pattern ( ($HeapSucc h0 h1) (Requires1 t0@@4 t1@@4 h1 f@@1 bx0@@1))
)))
(assert (forall ((t0@@5 T@U) (t1@@5 T@U) (h0@@0 T@U) (h1@@0 T@U) (f@@2 T@U) (bx0@@2 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@0 h1@@0) (and ($IsGoodHeap h0@@0) ($IsGoodHeap h1@@0))) (and ($IsBox bx0@@2 t0@@5) ($Is HandleTypeType f@@2 (Tclass._System.___hFunc1 t0@@5 t1@@5)))) (forall ((o@@5 T@U) (fld@@0 T@U) )  (=> (and (or (not (= o@@5 null)) (not true)) (|Set#IsMember| (Reads1 t0@@5 t1@@5 h1@@0 f@@2 bx0@@2) ($Box refType o@@5))) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h0@@0 o@@5) fld@@0) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h1@@0 o@@5) fld@@0))))) (= (Requires1 t0@@5 t1@@5 h0@@0 f@@2 bx0@@2) (Requires1 t0@@5 t1@@5 h1@@0 f@@2 bx0@@2)))
 :pattern ( ($HeapSucc h0@@0 h1@@0) (Requires1 t0@@5 t1@@5 h1@@0 f@@2 bx0@@2))
)))
(assert (forall ((v@@2 T@U) (t0@@6 T@U) ) (! (= ($Is SetType v@@2 (TSet t0@@6)) (forall ((bx@@3 T@U) ) (!  (=> (|Set#IsMember| v@@2 bx@@3) ($IsBox bx@@3 t0@@6))
 :pattern ( (|Set#IsMember| v@@2 bx@@3))
)))
 :pattern ( ($Is SetType v@@2 (TSet t0@@6)))
)))
(assert (= (Ctor LayerTypeType) 10))
(assert (forall ((f@@3 T@U) (ly T@U) (A T@T) ) (! (= (AtLayer A f@@3 ly) (MapType1Select LayerTypeType A f@@3 ly))
 :pattern ( (AtLayer A f@@3 ly))
)))
(assert (forall ((|x#0@@0| T@U) ) (! (= ($Is intType |x#0@@0| Tclass._System.nat) (<= (LitInt 0) (U_2_int |x#0@@0|)))
 :pattern ( ($Is intType |x#0@@0| Tclass._System.nat))
)))
(assert ($IsGhostField alloc))
(assert ($IsGoodHeap $OneHeap))
(assert (forall ((s@@7 T@U) (v@@3 T@U) ) (! (= (|Seq#Length| (|Seq#Build| s@@7 v@@3)) (+ 1 (|Seq#Length| s@@7)))
 :pattern ( (|Seq#Build| s@@7 v@@3))
)))
(assert (forall ((_System.array$arg@@3 T@U) (|c#0@@2| T@U) ) (! (= ($Is refType |c#0@@2| (Tclass._System.array _System.array$arg@@3))  (and ($Is refType |c#0@@2| (Tclass._System.array? _System.array$arg@@3)) (or (not (= |c#0@@2| null)) (not true))))
 :pattern ( ($Is refType |c#0@@2| (Tclass._System.array _System.array$arg@@3)))
 :pattern ( ($Is refType |c#0@@2| (Tclass._System.array? _System.array$arg@@3)))
)))
(assert (forall ((_module.List$T@@3 T@U) (|c#0@@3| T@U) ) (! (= ($Is refType |c#0@@3| (Tclass._module.List _module.List$T@@3))  (and ($Is refType |c#0@@3| (Tclass._module.List? _module.List$T@@3)) (or (not (= |c#0@@3| null)) (not true))))
 :pattern ( ($Is refType |c#0@@3| (Tclass._module.List _module.List$T@@3)))
 :pattern ( ($Is refType |c#0@@3| (Tclass._module.List? _module.List$T@@3)))
)))
(assert (forall ((v@@4 T@U) (t@@1 T@U) (h@@2 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@4) t@@1 h@@2) ($IsAlloc T@@1 v@@4 t@@1 h@@2))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@4) t@@1 h@@2))
)))
(assert (forall ((h@@3 T@U) (k@@0 T@U) (bx@@4 T@U) (t@@2 T@U) ) (!  (=> ($HeapSucc h@@3 k@@0) (=> ($IsAllocBox bx@@4 t@@2 h@@3) ($IsAllocBox bx@@4 t@@2 k@@0)))
 :pattern ( ($HeapSucc h@@3 k@@0) ($IsAllocBox bx@@4 t@@2 h@@3))
)))
(assert (forall ((h@@4 T@U) (k@@1 T@U) (v@@5 T@U) (t@@3 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@4 k@@1) (=> ($IsAlloc T@@2 v@@5 t@@3 h@@4) ($IsAlloc T@@2 v@@5 t@@3 k@@1)))
 :pattern ( ($HeapSucc h@@4 k@@1) ($IsAlloc T@@2 v@@5 t@@3 h@@4))
)))
(assert (forall ((_module.List$T@@4 T@U) ($h@@7 T@U) ($o@@5 T@U) ) (!  (=> (and ($IsGoodHeap $h@@7) (and (or (not (= $o@@5 null)) (not true)) (= (dtype $o@@5) (Tclass._module.List? _module.List$T@@4)))) ($Is intType ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@7 $o@@5) _module.List.n)) Tclass._System.nat))
 :pattern ( ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@7 $o@@5) _module.List.n)) (Tclass._module.List? _module.List$T@@4))
)))
(assert (forall ((s@@8 T@U) (n@@6 Int) (j@@1 Int) ) (!  (=> (and (and (<= 0 n@@6) (<= 0 j@@1)) (< j@@1 (- (|Seq#Length| s@@8) n@@6))) (= (|Seq#Index| (|Seq#Drop| s@@8 n@@6) j@@1) (|Seq#Index| s@@8 (+ j@@1 n@@6))))
 :weight 25
 :pattern ( (|Seq#Index| (|Seq#Drop| s@@8 n@@6) j@@1))
)))
(assert (forall ((t0@@7 T@U) (t1@@6 T@U) (h0@@1 T@U) (h1@@1 T@U) (f@@4 T@U) (bx0@@3 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@1 h1@@1) (and ($IsGoodHeap h0@@1) ($IsGoodHeap h1@@1))) (and ($IsBox bx0@@3 t0@@7) ($Is HandleTypeType f@@4 (Tclass._System.___hFunc1 t0@@7 t1@@6)))) (forall ((o@@6 T@U) (fld@@1 T@U) )  (=> (and (or (not (= o@@6 null)) (not true)) (|Set#IsMember| (Reads1 t0@@7 t1@@6 h0@@1 f@@4 bx0@@3) ($Box refType o@@6))) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h0@@1 o@@6) fld@@1) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h1@@1 o@@6) fld@@1))))) (= (Reads1 t0@@7 t1@@6 h0@@1 f@@4 bx0@@3) (Reads1 t0@@7 t1@@6 h1@@1 f@@4 bx0@@3)))
 :pattern ( ($HeapSucc h0@@1 h1@@1) (Reads1 t0@@7 t1@@6 h1@@1 f@@4 bx0@@3))
)))
(assert (forall ((t0@@8 T@U) (t1@@7 T@U) (h0@@2 T@U) (h1@@2 T@U) (f@@5 T@U) (bx0@@4 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@2 h1@@2) (and ($IsGoodHeap h0@@2) ($IsGoodHeap h1@@2))) (and ($IsBox bx0@@4 t0@@8) ($Is HandleTypeType f@@5 (Tclass._System.___hFunc1 t0@@8 t1@@7)))) (forall ((o@@7 T@U) (fld@@2 T@U) )  (=> (and (or (not (= o@@7 null)) (not true)) (|Set#IsMember| (Reads1 t0@@8 t1@@7 h1@@2 f@@5 bx0@@4) ($Box refType o@@7))) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h0@@2 o@@7) fld@@2) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h1@@2 o@@7) fld@@2))))) (= (Reads1 t0@@8 t1@@7 h0@@2 f@@5 bx0@@4) (Reads1 t0@@8 t1@@7 h1@@2 f@@5 bx0@@4)))
 :pattern ( ($HeapSucc h0@@2 h1@@2) (Reads1 t0@@8 t1@@7 h1@@2 f@@5 bx0@@4))
)))
(assert (forall ((t0@@9 T@U) (t1@@8 T@U) (h0@@3 T@U) (h1@@3 T@U) (f@@6 T@U) (bx0@@5 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@3 h1@@3) (and ($IsGoodHeap h0@@3) ($IsGoodHeap h1@@3))) (and ($IsBox bx0@@5 t0@@9) ($Is HandleTypeType f@@6 (Tclass._System.___hFunc1 t0@@9 t1@@8)))) (forall ((o@@8 T@U) (fld@@3 T@U) )  (=> (and (or (not (= o@@8 null)) (not true)) (|Set#IsMember| (Reads1 t0@@9 t1@@8 h0@@3 f@@6 bx0@@5) ($Box refType o@@8))) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h0@@3 o@@8) fld@@3) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h1@@3 o@@8) fld@@3))))) (= (Apply1 t0@@9 t1@@8 h0@@3 f@@6 bx0@@5) (Apply1 t0@@9 t1@@8 h1@@3 f@@6 bx0@@5)))
 :pattern ( ($HeapSucc h0@@3 h1@@3) (Apply1 t0@@9 t1@@8 h1@@3 f@@6 bx0@@5))
)))
(assert (forall ((t0@@10 T@U) (t1@@9 T@U) (h0@@4 T@U) (h1@@4 T@U) (f@@7 T@U) (bx0@@6 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@4 h1@@4) (and ($IsGoodHeap h0@@4) ($IsGoodHeap h1@@4))) (and ($IsBox bx0@@6 t0@@10) ($Is HandleTypeType f@@7 (Tclass._System.___hFunc1 t0@@10 t1@@9)))) (forall ((o@@9 T@U) (fld@@4 T@U) )  (=> (and (or (not (= o@@9 null)) (not true)) (|Set#IsMember| (Reads1 t0@@10 t1@@9 h1@@4 f@@7 bx0@@6) ($Box refType o@@9))) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h0@@4 o@@9) fld@@4) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h1@@4 o@@9) fld@@4))))) (= (Apply1 t0@@10 t1@@9 h0@@4 f@@7 bx0@@6) (Apply1 t0@@10 t1@@9 h1@@4 f@@7 bx0@@6)))
 :pattern ( ($HeapSucc h0@@4 h1@@4) (Apply1 t0@@10 t1@@9 h1@@4 f@@7 bx0@@6))
)))
(assert (forall ((_System.array$arg@@4 T@U) ) (!  (and (= (Tag (Tclass._System.array? _System.array$arg@@4)) Tagclass._System.array?) (= (TagFamily (Tclass._System.array? _System.array$arg@@4)) tytagFamily$array))
 :pattern ( (Tclass._System.array? _System.array$arg@@4))
)))
(assert (forall ((_System.array$arg@@5 T@U) ) (!  (and (= (Tag (Tclass._System.array _System.array$arg@@5)) Tagclass._System.array) (= (TagFamily (Tclass._System.array _System.array$arg@@5)) tytagFamily$array))
 :pattern ( (Tclass._System.array _System.array$arg@@5))
)))
(assert (forall ((_module.List$T@@5 T@U) ) (!  (and (= (Tag (Tclass._module.List _module.List$T@@5)) Tagclass._module.List) (= (TagFamily (Tclass._module.List _module.List$T@@5)) tytagFamily$List))
 :pattern ( (Tclass._module.List _module.List$T@@5))
)))
(assert (forall ((_module.List$T@@6 T@U) ) (!  (and (= (Tag (Tclass._module.List? _module.List$T@@6)) Tagclass._module.List?) (= (TagFamily (Tclass._module.List? _module.List$T@@6)) tytagFamily$List))
 :pattern ( (Tclass._module.List? _module.List$T@@6))
)))
(assert (forall ((_module.List$T@@7 T@U) ($h@@8 T@U) ($o@@6 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@8) (and (or (not (= $o@@6 null)) (not true)) (= (dtype $o@@6) (Tclass._module.List? _module.List$T@@7)))) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@8 $o@@6) alloc)))) ($IsAlloc SeqType ($Unbox SeqType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@8 $o@@6) _module.List.Contents)) (TSeq _module.List$T@@7) $h@@8))
 :pattern ( ($Unbox SeqType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@8 $o@@6) _module.List.Contents)) (Tclass._module.List? _module.List$T@@7))
)))
(assert (forall ((_module.List$T@@8 T@U) ($h@@9 T@U) ($o@@7 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@9) (and (or (not (= $o@@7 null)) (not true)) (= (dtype $o@@7) (Tclass._module.List? _module.List$T@@8)))) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@9 $o@@7) alloc)))) ($IsAlloc refType ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@9 $o@@7) _module.List.a)) (Tclass._System.array _module.List$T@@8) $h@@9))
 :pattern ( ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@9 $o@@7) _module.List.a)) (Tclass._module.List? _module.List$T@@8))
)))
(assert (forall ((|l#0@@0| T@U) (|l#1@@0| T@U) (|l#2@@0| T@U) (|$l#0_0#heap#0@@0| T@U) (|$l#0_0#i#0@@0| T@U) ) (! (= (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType SetType (|lambda#11| |l#0@@0| |l#1@@0| |l#2@@0|) |$l#0_0#heap#0@@0| |$l#0_0#i#0@@0|) (SetRef_to_SetBox (|lambda#10| |l#0@@0| ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |$l#0_0#heap#0@@0| |l#1@@0|) |l#2@@0|)))))
 :pattern ( (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType SetType (|lambda#11| |l#0@@0| |l#1@@0| |l#2@@0|) |$l#0_0#heap#0@@0| |$l#0_0#i#0@@0|))
)))
(assert (forall ((s0@@0 T@U) (s1@@0 T@U) ) (! (= (|Seq#Length| (|Seq#Append| s0@@0 s1@@0)) (+ (|Seq#Length| s0@@0) (|Seq#Length| s1@@0)))
 :pattern ( (|Seq#Length| (|Seq#Append| s0@@0 s1@@0)))
)))
(assert (forall ((s@@9 T@U) (bx@@5 T@U) ) (! (= (|Set#IsMember| (SetRef_to_SetBox s@@9) bx@@5) (U_2_bool (MapType1Select refType boolType s@@9 ($Unbox refType bx@@5))))
 :pattern ( (|Set#IsMember| (SetRef_to_SetBox s@@9) bx@@5))
)))
(assert (forall ((t0@@11 T@U) (t1@@10 T@U) (heap@@1 T@U) (h@@5 T@U) (r@@0 T@U) (rd@@0 T@U) (bx0@@7 T@U) ) (! (= (Apply1 t0@@11 t1@@10 heap@@1 (Handle1 h@@5 r@@0 rd@@0) bx0@@7) (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType h@@5 heap@@1 bx0@@7))
 :pattern ( (Apply1 t0@@11 t1@@10 heap@@1 (Handle1 h@@5 r@@0 rd@@0) bx0@@7))
)))
(assert (forall ((bx@@6 T@U) ) (!  (=> ($IsBox bx@@6 Tclass._System.nat) (and (= ($Box intType ($Unbox intType bx@@6)) bx@@6) ($Is intType ($Unbox intType bx@@6) Tclass._System.nat)))
 :pattern ( ($IsBox bx@@6 Tclass._System.nat))
)))
(assert (forall ((bx@@7 T@U) ) (!  (=> ($IsBox bx@@7 Tclass._System.object?) (and (= ($Box refType ($Unbox refType bx@@7)) bx@@7) ($Is refType ($Unbox refType bx@@7) Tclass._System.object?)))
 :pattern ( ($IsBox bx@@7 Tclass._System.object?))
)))
(assert (forall ((bx@@8 T@U) ) (!  (=> ($IsBox bx@@8 Tclass._System.object) (and (= ($Box refType ($Unbox refType bx@@8)) bx@@8) ($Is refType ($Unbox refType bx@@8) Tclass._System.object)))
 :pattern ( ($IsBox bx@@8 Tclass._System.object))
)))
(assert (forall ((_System.array$arg@@6 T@U) ($o@@8 T@U) ) (! (= ($Is refType $o@@8 (Tclass._System.array? _System.array$arg@@6))  (or (= $o@@8 null) (= (dtype $o@@8) (Tclass._System.array? _System.array$arg@@6))))
 :pattern ( ($Is refType $o@@8 (Tclass._System.array? _System.array$arg@@6)))
)))
(assert (forall ((_module.List$T@@9 T@U) ($o@@9 T@U) ) (! (= ($Is refType $o@@9 (Tclass._module.List? _module.List$T@@9))  (or (= $o@@9 null) (= (dtype $o@@9) (Tclass._module.List? _module.List$T@@9))))
 :pattern ( ($Is refType $o@@9 (Tclass._module.List? _module.List$T@@9)))
)))
(assert (forall ((_module.List$T@@10 T@U) ($h@@10 T@U) ($o@@10 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@10) (and (or (not (= $o@@10 null)) (not true)) (= (dtype $o@@10) (Tclass._module.List? _module.List$T@@10)))) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@10 $o@@10) alloc)))) ($IsAlloc intType ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@10 $o@@10) _module.List.n)) Tclass._System.nat $h@@10))
 :pattern ( ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@10 $o@@10) _module.List.n)) (Tclass._module.List? _module.List$T@@10))
)))
(assert (forall ((|c#0@@4| T@U) ) (! (= ($Is refType |c#0@@4| Tclass._System.object)  (and ($Is refType |c#0@@4| Tclass._System.object?) (or (not (= |c#0@@4| null)) (not true))))
 :pattern ( ($Is refType |c#0@@4| Tclass._System.object))
 :pattern ( ($Is refType |c#0@@4| Tclass._System.object?))
)))
(assert (forall ((s@@10 T@U) (i@@1 Int) (v@@6 T@U) ) (!  (and (=> (= i@@1 (|Seq#Length| s@@10)) (= (|Seq#Index| (|Seq#Build| s@@10 v@@6) i@@1) v@@6)) (=> (or (not (= i@@1 (|Seq#Length| s@@10))) (not true)) (= (|Seq#Index| (|Seq#Build| s@@10 v@@6) i@@1) (|Seq#Index| s@@10 i@@1))))
 :pattern ( (|Seq#Index| (|Seq#Build| s@@10 v@@6) i@@1))
)))
(assert (forall ((h@@6 T@U) (a@@9 T@U) ) (! (forall ((i@@2 Int) ) (!  (=> (and (<= 0 i@@2) (< i@@2 (|Seq#Length| (|Seq#FromArray| h@@6 a@@9)))) (= (|Seq#Index| (|Seq#FromArray| h@@6 a@@9) i@@2) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h@@6 a@@9) (IndexField i@@2))))
 :pattern ( (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h@@6 a@@9) (IndexField i@@2)))
 :pattern ( (|Seq#Index| (|Seq#FromArray| h@@6 a@@9) i@@2))
))
 :pattern ( (|Seq#FromArray| h@@6 a@@9))
)))
(assert (forall ((a@@10 T@U) (b@@5 T@U) (o@@10 T@U) ) (! (= (|Set#IsMember| (|Set#Union| a@@10 b@@5) o@@10)  (or (|Set#IsMember| a@@10 o@@10) (|Set#IsMember| b@@5 o@@10)))
 :pattern ( (|Set#IsMember| (|Set#Union| a@@10 b@@5) o@@10))
)))
(assert (forall ((_module.List$T@@11 T@U) ($h@@11 T@U) ($o@@11 T@U) ) (!  (=> (and ($IsGoodHeap $h@@11) (and (or (not (= $o@@11 null)) (not true)) (= (dtype $o@@11) (Tclass._module.List? _module.List$T@@11)))) ($Is SetType ($Unbox SetType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@11 $o@@11) _module.List.Repr)) (TSet Tclass._System.object)))
 :pattern ( ($Unbox SetType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@11 $o@@11) _module.List.Repr)) (Tclass._module.List? _module.List$T@@11))
)))
(assert (forall ((a@@11 T@U) (b@@6 T@U) ) (!  (=> (|Set#Disjoint| a@@11 b@@6) (and (= (|Set#Difference| (|Set#Union| a@@11 b@@6) a@@11) b@@6) (= (|Set#Difference| (|Set#Union| a@@11 b@@6) b@@6) a@@11)))
 :pattern ( (|Set#Union| a@@11 b@@6))
)))
(assert (forall ((f@@8 T@U) (t0@@12 T@U) (t1@@11 T@U) (h@@7 T@U) ) (!  (=> (and ($IsGoodHeap h@@7) ($IsAlloc HandleTypeType f@@8 (Tclass._System.___hFunc1 t0@@12 t1@@11) h@@7)) (forall ((bx0@@8 T@U) ) (!  (=> (and ($IsAllocBox bx0@@8 t0@@12 h@@7) (Requires1 t0@@12 t1@@11 h@@7 f@@8 bx0@@8)) ($IsAllocBox (Apply1 t0@@12 t1@@11 h@@7 f@@8 bx0@@8) t1@@11 h@@7))
 :pattern ( (Apply1 t0@@12 t1@@11 h@@7 f@@8 bx0@@8))
)))
 :pattern ( ($IsAlloc HandleTypeType f@@8 (Tclass._System.___hFunc1 t0@@12 t1@@11) h@@7))
)))
(assert (forall ((_module.List$T@@12 T@U) ($h@@12 T@U) ($o@@12 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@12) (and (or (not (= $o@@12 null)) (not true)) (= (dtype $o@@12) (Tclass._module.List? _module.List$T@@12)))) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@12 $o@@12) alloc)))) ($IsAlloc SetType ($Unbox SetType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@12 $o@@12) _module.List.Repr)) (TSet Tclass._System.object) $h@@12))
 :pattern ( ($Unbox SetType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@12 $o@@12) _module.List.Repr)) (Tclass._module.List? _module.List$T@@12))
)))
(assert (forall ((s@@11 T@U) (i@@3 Int) (v@@7 T@U) (n@@7 Int) ) (!  (=> (and (and (<= 0 i@@3) (< i@@3 n@@7)) (<= n@@7 (|Seq#Length| s@@11))) (= (|Seq#Drop| (|Seq#Update| s@@11 i@@3 v@@7) n@@7) (|Seq#Drop| s@@11 n@@7)))
 :pattern ( (|Seq#Drop| (|Seq#Update| s@@11 i@@3 v@@7) n@@7))
)))
(assert (forall ((|l#0@@1| T@U) (|$l#0_0#ly#0| T@U) ) (! (= (MapType1Select LayerTypeType HandleTypeType (|lambda#12| |l#0@@1|) |$l#0_0#ly#0|) |l#0@@1|)
 :pattern ( (MapType1Select LayerTypeType HandleTypeType (|lambda#12| |l#0@@1|) |$l#0_0#ly#0|))
)))
(assert (forall ((a@@12 T@U) (b@@7 T@U) ) (!  (=> (|Set#Equal| a@@12 b@@7) (= a@@12 b@@7))
 :pattern ( (|Set#Equal| a@@12 b@@7))
)))
(assert (forall ((a@@13 T@U) (b@@8 T@U) ) (!  (=> (|Seq#Equal| a@@13 b@@8) (= a@@13 b@@8))
 :pattern ( (|Seq#Equal| a@@13 b@@8))
)))
(assert (forall ((s@@12 T@U) (n@@8 Int) ) (!  (=> (and (<= 0 n@@8) (<= n@@8 (|Seq#Length| s@@12))) (= (|Seq#Length| (|Seq#Take| s@@12 n@@8)) n@@8))
 :pattern ( (|Seq#Length| (|Seq#Take| s@@12 n@@8)))
)))
(assert (forall ((|l#0@@2| T@U) (|l#1@@1| T@U) (|$l#0_0#o#0| T@U) ) (! (= (U_2_bool (MapType1Select refType boolType (|lambda#10| |l#0@@2| |l#1@@1|) |$l#0_0#o#0|))  (or (= |$l#0_0#o#0| |l#0@@2|) (= |$l#0_0#o#0| |l#1@@1|)))
 :pattern ( (MapType1Select refType boolType (|lambda#10| |l#0@@2| |l#1@@1|) |$l#0_0#o#0|))
)))
(assert (forall ((a@@14 T@U) (b@@9 T@U) (c T@U) ) (!  (=> (or (not (= a@@14 c)) (not true)) (=> (and ($HeapSucc a@@14 b@@9) ($HeapSucc b@@9 c)) ($HeapSucc a@@14 c)))
 :pattern ( ($HeapSucc a@@14 b@@9) ($HeapSucc b@@9 c))
)))
(assert (forall ((f@@9 T@U) (t0@@13 T@U) (t1@@12 T@U) ) (! (= ($Is HandleTypeType f@@9 (Tclass._System.___hFunc1 t0@@13 t1@@12)) (forall ((h@@8 T@U) (bx0@@9 T@U) ) (!  (=> (and (and ($IsGoodHeap h@@8) ($IsBox bx0@@9 t0@@13)) (Requires1 t0@@13 t1@@12 h@@8 f@@9 bx0@@9)) ($IsBox (Apply1 t0@@13 t1@@12 h@@8 f@@9 bx0@@9) t1@@12))
 :pattern ( (Apply1 t0@@13 t1@@12 h@@8 f@@9 bx0@@9))
)))
 :pattern ( ($Is HandleTypeType f@@9 (Tclass._System.___hFunc1 t0@@13 t1@@12)))
)))
(assert (forall ((cl T@U) (nm T@U) ) (!  (and (= (DeclType (FieldOfDecl cl nm)) cl) (= (DeclName (FieldOfDecl cl nm)) nm))
 :pattern ( (FieldOfDecl cl nm))
)))
(assert (forall ((bx@@9 T@U) ) (!  (=> ($IsBox bx@@9 TInt) (and (= ($Box intType ($Unbox intType bx@@9)) bx@@9) ($Is intType ($Unbox intType bx@@9) TInt)))
 :pattern ( ($IsBox bx@@9 TInt))
)))
(assert (forall ((v@@8 T@U) (t@@4 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@8) t@@4) ($Is T@@3 v@@8 t@@4))
 :pattern ( ($IsBox ($Box T@@3 v@@8) t@@4))
)))
(assert (forall ((t0@@14 T@U) (t1@@13 T@U) (heap@@2 T@U) (h@@9 T@U) (r@@1 T@U) (rd@@1 T@U) (bx0@@10 T@U) ) (!  (=> (U_2_bool (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType boolType r@@1 heap@@2 bx0@@10)) (Requires1 t0@@14 t1@@13 heap@@2 (Handle1 h@@9 r@@1 rd@@1) bx0@@10))
 :pattern ( (Requires1 t0@@14 t1@@13 heap@@2 (Handle1 h@@9 r@@1 rd@@1) bx0@@10))
)))
(assert (forall ((s@@13 T@U) (i@@4 Int) (v@@9 T@U) (n@@9 Int) ) (!  (=> (and (<= n@@9 i@@4) (< i@@4 (|Seq#Length| s@@13))) (= (|Seq#Take| (|Seq#Update| s@@13 i@@4 v@@9) n@@9) (|Seq#Take| s@@13 n@@9)))
 :pattern ( (|Seq#Take| (|Seq#Update| s@@13 i@@4 v@@9) n@@9))
)))
(assert (forall ((o@@11 T@U) ) (! (<= 0 (_System.array.Length o@@11))
 :pattern ( (_System.array.Length o@@11))
)))
(assert (forall ((s@@14 T@U) ) (! (<= 0 (|Seq#Length| s@@14))
 :pattern ( (|Seq#Length| s@@14))
)))
(assert (forall ((v@@10 T@U) (t0@@15 T@U) (h@@10 T@U) ) (! (= ($IsAlloc SetType v@@10 (TSet t0@@15) h@@10) (forall ((bx@@10 T@U) ) (!  (=> (|Set#IsMember| v@@10 bx@@10) ($IsAllocBox bx@@10 t0@@15 h@@10))
 :pattern ( (|Set#IsMember| v@@10 bx@@10))
)))
 :pattern ( ($IsAlloc SetType v@@10 (TSet t0@@15) h@@10))
)))
(assert (forall ((|#$T0| T@U) (|#$R| T@U) ) (! (= (Tclass._System.___hFunc1_0 (Tclass._System.___hFunc1 |#$T0| |#$R|)) |#$T0|)
 :pattern ( (Tclass._System.___hFunc1 |#$T0| |#$R|))
)))
(assert (forall ((|#$T0@@0| T@U) (|#$R@@0| T@U) ) (! (= (Tclass._System.___hFunc1_1 (Tclass._System.___hFunc1 |#$T0@@0| |#$R@@0|)) |#$R@@0|)
 :pattern ( (Tclass._System.___hFunc1 |#$T0@@0| |#$R@@0|))
)))
(assert (forall (($o@@13 T@U) ) (! ($Is refType $o@@13 Tclass._System.object?)
 :pattern ( ($Is refType $o@@13 Tclass._System.object?))
)))
(assert (forall ((v@@11 T@U) (t0@@16 T@U) (h@@11 T@U) ) (! (= ($IsAlloc SeqType v@@11 (TSeq t0@@16) h@@11) (forall ((i@@5 Int) ) (!  (=> (and (<= 0 i@@5) (< i@@5 (|Seq#Length| v@@11))) ($IsAllocBox (|Seq#Index| v@@11 i@@5) t0@@16 h@@11))
 :pattern ( (|Seq#Index| v@@11 i@@5))
)))
 :pattern ( ($IsAlloc SeqType v@@11 (TSeq t0@@16) h@@11))
)))
(assert (forall ((t@@5 T@U) ) (! (= (Inv0_TSet (TSet t@@5)) t@@5)
 :pattern ( (TSet t@@5))
)))
(assert (forall ((t@@6 T@U) ) (! (= (Tag (TSet t@@6)) TagSet)
 :pattern ( (TSet t@@6))
)))
(assert (forall ((t@@7 T@U) ) (! (= (Inv0_TSeq (TSeq t@@7)) t@@7)
 :pattern ( (TSeq t@@7))
)))
(assert (forall ((t@@8 T@U) ) (! (= (Tag (TSeq t@@8)) TagSeq)
 :pattern ( (TSeq t@@8))
)))
(assert (forall ((i@@6 Int) ) (! (= (FDim (IndexField i@@6)) 1)
 :pattern ( (IndexField i@@6))
)))
(assert (forall ((i@@7 Int) ) (! (= (IndexField_Inverse (IndexField i@@7)) i@@7)
 :pattern ( (IndexField i@@7))
)))
(assert (forall ((_System.array$arg@@7 T@U) ) (! (= (Tclass._System.array?_0 (Tclass._System.array? _System.array$arg@@7)) _System.array$arg@@7)
 :pattern ( (Tclass._System.array? _System.array$arg@@7))
)))
(assert (forall ((_System.array$arg@@8 T@U) ) (! (= (Tclass._System.array_0 (Tclass._System.array _System.array$arg@@8)) _System.array$arg@@8)
 :pattern ( (Tclass._System.array _System.array$arg@@8))
)))
(assert (forall ((_module.List$T@@13 T@U) ) (! (= (Tclass._module.List_0 (Tclass._module.List _module.List$T@@13)) _module.List$T@@13)
 :pattern ( (Tclass._module.List _module.List$T@@13))
)))
(assert (forall ((_module.List$T@@14 T@U) ) (! (= (Tclass._module.List?_0 (Tclass._module.List? _module.List$T@@14)) _module.List$T@@14)
 :pattern ( (Tclass._module.List? _module.List$T@@14))
)))
(assert (forall ((x@@8 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@8)) x@@8)
 :pattern ( ($Box T@@4 x@@8))
)))
(assert (forall ((h@@12 T@U) (i@@8 Int) (v@@12 T@U) (a@@15 T@U) ) (!  (=> (and (<= 0 i@@8) (< i@@8 (_System.array.Length a@@15))) (= (|Seq#FromArray| (MapType1Store refType (MapType1Type FieldType BoxType) h@@12 a@@15 (MapType1Store FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h@@12 a@@15) (IndexField i@@8) v@@12)) a@@15) (|Seq#Update| (|Seq#FromArray| h@@12 a@@15) i@@8 v@@12)))
 :pattern ( (|Seq#FromArray| (MapType1Store refType (MapType1Type FieldType BoxType) h@@12 a@@15 (MapType1Store FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h@@12 a@@15) (IndexField i@@8) v@@12)) a@@15))
)))
(assert (forall ((_System.array$arg@@9 T@U) ($h@@13 T@U) ($o@@14 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@13) (and (or (not (= $o@@14 null)) (not true)) (= (dtype $o@@14) (Tclass._System.array? _System.array$arg@@9)))) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@13 $o@@14) alloc)))) ($IsAlloc intType (int_2_U (_System.array.Length $o@@14)) TInt $h@@13))
 :pattern ( (_System.array.Length $o@@14) ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@13 $o@@14) alloc)) (Tclass._System.array? _System.array$arg@@9))
)))
(assert (forall ((_System.array$arg@@10 T@U) ($h@@14 T@U) ($o@@15 T@U) ($i0@@0 Int) ) (!  (=> (and (and ($IsGoodHeap $h@@14) (and (or (not (= $o@@15 null)) (not true)) (= (dtype $o@@15) (Tclass._System.array? _System.array$arg@@10)))) (and (<= 0 $i0@@0) (< $i0@@0 (_System.array.Length $o@@15)))) ($IsBox (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@14 $o@@15) (IndexField $i0@@0)) _System.array$arg@@10))
 :pattern ( (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@14 $o@@15) (IndexField $i0@@0)) (Tclass._System.array? _System.array$arg@@10))
)))
(assert (forall ((a@@16 T@U) (b@@10 T@U) ) (! (= (|Set#Union| a@@16 (|Set#Union| a@@16 b@@10)) (|Set#Union| a@@16 b@@10))
 :pattern ( (|Set#Union| a@@16 (|Set#Union| a@@16 b@@10)))
)))
(assert (forall ((f@@10 T@U) (ly@@0 T@U) (A@@0 T@T) ) (! (= (AtLayer A@@0 f@@10 ($LS ly@@0)) (AtLayer A@@0 f@@10 ly@@0))
 :pattern ( (AtLayer A@@0 f@@10 ($LS ly@@0)))
)))
(assert (forall ((|l#0@@3| T@U) (|l#1@@2| Int) (|$l#0_0#heap#0@@1| T@U) (|$l#0_0#i#0@@1| T@U) ) (! (= (U_2_bool (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType boolType (|lambda#9| |l#0@@3| |l#1@@2|) |$l#0_0#heap#0@@1| |$l#0_0#i#0@@1|))  (and ($IsBox |$l#0_0#i#0@@1| |l#0@@3|) (<= |l#1@@2| (U_2_int ($Unbox intType |$l#0_0#i#0@@1|)))))
 :pattern ( (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType boolType (|lambda#9| |l#0@@3| |l#1@@2|) |$l#0_0#heap#0@@1| |$l#0_0#i#0@@1|))
)))
(assert (forall ((f@@11 T@U) (t0@@17 T@U) (t1@@14 T@U) (h@@13 T@U) ) (!  (=> ($IsGoodHeap h@@13) (= ($IsAlloc HandleTypeType f@@11 (Tclass._System.___hFunc1 t0@@17 t1@@14) h@@13) (forall ((bx0@@11 T@U) ) (!  (=> (and (and ($IsBox bx0@@11 t0@@17) ($IsAllocBox bx0@@11 t0@@17 h@@13)) (Requires1 t0@@17 t1@@14 h@@13 f@@11 bx0@@11)) (forall ((r@@2 T@U) ) (!  (=> (and (or (not (= r@@2 null)) (not true)) (|Set#IsMember| (Reads1 t0@@17 t1@@14 h@@13 f@@11 bx0@@11) ($Box refType r@@2))) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h@@13 r@@2) alloc))))
 :pattern ( (|Set#IsMember| (Reads1 t0@@17 t1@@14 h@@13 f@@11 bx0@@11) ($Box refType r@@2)))
)))
 :pattern ( (Apply1 t0@@17 t1@@14 h@@13 f@@11 bx0@@11))
 :pattern ( (Reads1 t0@@17 t1@@14 h@@13 f@@11 bx0@@11))
))))
 :pattern ( ($IsAlloc HandleTypeType f@@11 (Tclass._System.___hFunc1 t0@@17 t1@@14) h@@13))
)))
(assert (forall ((|#$T0@@1| T@U) (|#$R@@1| T@U) (bx@@11 T@U) ) (!  (=> ($IsBox bx@@11 (Tclass._System.___hFunc1 |#$T0@@1| |#$R@@1|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@11)) bx@@11) ($Is HandleTypeType ($Unbox HandleTypeType bx@@11) (Tclass._System.___hFunc1 |#$T0@@1| |#$R@@1|))))
 :pattern ( ($IsBox bx@@11 (Tclass._System.___hFunc1 |#$T0@@1| |#$R@@1|)))
)))
(assert (forall ((h0@@5 T@U) (h1@@5 T@U) (a@@17 T@U) ) (!  (=> (and (and (and ($IsGoodHeap h0@@5) ($IsGoodHeap h1@@5)) ($HeapSucc h0@@5 h1@@5)) (= (MapType1Select refType (MapType1Type FieldType BoxType) h0@@5 a@@17) (MapType1Select refType (MapType1Type FieldType BoxType) h1@@5 a@@17))) (= (|Seq#FromArray| h0@@5 a@@17) (|Seq#FromArray| h1@@5 a@@17)))
 :pattern ( (|Seq#FromArray| h1@@5 a@@17) ($HeapSucc h0@@5 h1@@5))
)))
(assert (forall ((s@@15 T@U) (i@@9 Int) (v@@13 T@U) ) (!  (=> (and (<= 0 i@@9) (< i@@9 (|Seq#Length| s@@15))) (= (|Seq#Length| (|Seq#Update| s@@15 i@@9 v@@13)) (|Seq#Length| s@@15)))
 :pattern ( (|Seq#Length| (|Seq#Update| s@@15 i@@9 v@@13)))
)))
(assert (forall ((h@@14 T@U) (a@@18 T@U) ) (! (= (|Seq#Length| (|Seq#FromArray| h@@14 a@@18)) (_System.array.Length a@@18))
 :pattern ( (|Seq#Length| (|Seq#FromArray| h@@14 a@@18)))
)))
(assert (forall ((s@@16 T@U) (val@@4 T@U) ) (!  (and (= (|Seq#Build_inv0| (|Seq#Build| s@@16 val@@4)) s@@16) (= (|Seq#Build_inv1| (|Seq#Build| s@@16 val@@4)) val@@4))
 :pattern ( (|Seq#Build| s@@16 val@@4))
)))
(assert (forall ((|#$T0@@2| T@U) (|#$R@@2| T@U) ) (!  (and (= (Tag (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@2|)) Tagclass._System.___hFunc1) (= (TagFamily (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@2|)) |tytagFamily$_#Func1|))
 :pattern ( (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@2|))
)))
(assert (forall ((_module.List$T@@15 T@U) ($h@@15 T@U) ($o@@16 T@U) ) (!  (=> (and ($IsGoodHeap $h@@15) (and (or (not (= $o@@16 null)) (not true)) (= (dtype $o@@16) (Tclass._module.List? _module.List$T@@15)))) ($Is SeqType ($Unbox SeqType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@15 $o@@16) _module.List.Contents)) (TSeq _module.List$T@@15)))
 :pattern ( ($Unbox SeqType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@15 $o@@16) _module.List.Contents)) (Tclass._module.List? _module.List$T@@15))
)))
(assert (forall ((_module.List$T@@16 T@U) ($h@@16 T@U) ($o@@17 T@U) ) (!  (=> (and ($IsGoodHeap $h@@16) (and (or (not (= $o@@17 null)) (not true)) (= (dtype $o@@17) (Tclass._module.List? _module.List$T@@16)))) ($Is refType ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@16 $o@@17) _module.List.a)) (Tclass._System.array _module.List$T@@16)))
 :pattern ( ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@16 $o@@17) _module.List.a)) (Tclass._module.List? _module.List$T@@16))
)))
(assert (forall ((x@@9 Int) (y@@3 Int) ) (! (= (Mul x@@9 y@@3) (* x@@9 y@@3))
 :pattern ( (Mul x@@9 y@@3))
)))
(assert (forall ((t0@@18 T@U) (t1@@15 T@U) (heap@@3 T@U) (f@@12 T@U) (bx0@@12 T@U) ) (!  (=> (and (and ($IsGoodHeap heap@@3) (and ($IsBox bx0@@12 t0@@18) ($Is HandleTypeType f@@12 (Tclass._System.___hFunc1 t0@@18 t1@@15)))) (|Set#Equal| (Reads1 t0@@18 t1@@15 $OneHeap f@@12 bx0@@12) |Set#Empty|)) (= (Requires1 t0@@18 t1@@15 $OneHeap f@@12 bx0@@12) (Requires1 t0@@18 t1@@15 heap@@3 f@@12 bx0@@12)))
 :pattern ( (Requires1 t0@@18 t1@@15 $OneHeap f@@12 bx0@@12) ($IsGoodHeap heap@@3))
 :pattern ( (Requires1 t0@@18 t1@@15 heap@@3 f@@12 bx0@@12))
)))
(assert (forall ((bx@@12 T@U) (t@@9 T@U) ) (!  (=> ($IsBox bx@@12 (TSet t@@9)) (and (= ($Box SetType ($Unbox SetType bx@@12)) bx@@12) ($Is SetType ($Unbox SetType bx@@12) (TSet t@@9))))
 :pattern ( ($IsBox bx@@12 (TSet t@@9)))
)))
(assert (forall ((bx@@13 T@U) (t@@10 T@U) ) (!  (=> ($IsBox bx@@13 (TSeq t@@10)) (and (= ($Box SeqType ($Unbox SeqType bx@@13)) bx@@13) ($Is SeqType ($Unbox SeqType bx@@13) (TSeq t@@10))))
 :pattern ( ($IsBox bx@@13 (TSeq t@@10)))
)))
(assert (forall ((_System.array$arg@@11 T@U) (bx@@14 T@U) ) (!  (=> ($IsBox bx@@14 (Tclass._System.array? _System.array$arg@@11)) (and (= ($Box refType ($Unbox refType bx@@14)) bx@@14) ($Is refType ($Unbox refType bx@@14) (Tclass._System.array? _System.array$arg@@11))))
 :pattern ( ($IsBox bx@@14 (Tclass._System.array? _System.array$arg@@11)))
)))
(assert (forall ((_System.array$arg@@12 T@U) (bx@@15 T@U) ) (!  (=> ($IsBox bx@@15 (Tclass._System.array _System.array$arg@@12)) (and (= ($Box refType ($Unbox refType bx@@15)) bx@@15) ($Is refType ($Unbox refType bx@@15) (Tclass._System.array _System.array$arg@@12))))
 :pattern ( ($IsBox bx@@15 (Tclass._System.array _System.array$arg@@12)))
)))
(assert (forall ((_module.List$T@@17 T@U) (bx@@16 T@U) ) (!  (=> ($IsBox bx@@16 (Tclass._module.List _module.List$T@@17)) (and (= ($Box refType ($Unbox refType bx@@16)) bx@@16) ($Is refType ($Unbox refType bx@@16) (Tclass._module.List _module.List$T@@17))))
 :pattern ( ($IsBox bx@@16 (Tclass._module.List _module.List$T@@17)))
)))
(assert (forall ((_module.List$T@@18 T@U) (bx@@17 T@U) ) (!  (=> ($IsBox bx@@17 (Tclass._module.List? _module.List$T@@18)) (and (= ($Box refType ($Unbox refType bx@@17)) bx@@17) ($Is refType ($Unbox refType bx@@17) (Tclass._module.List? _module.List$T@@18))))
 :pattern ( ($IsBox bx@@17 (Tclass._module.List? _module.List$T@@18)))
)))
(assert (forall ((h@@15 T@U) (r@@3 T@U) (f@@13 T@U) (x@@10 T@U) ) (!  (=> ($IsGoodHeap (MapType1Store refType (MapType1Type FieldType BoxType) h@@15 r@@3 (MapType1Store FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h@@15 r@@3) f@@13 x@@10))) ($HeapSucc h@@15 (MapType1Store refType (MapType1Type FieldType BoxType) h@@15 r@@3 (MapType1Store FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h@@15 r@@3) f@@13 x@@10))))
 :pattern ( (MapType1Store refType (MapType1Type FieldType BoxType) h@@15 r@@3 (MapType1Store FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h@@15 r@@3) f@@13 x@@10)))
)))
(assert (= (Tag Tclass._System.nat) Tagclass._System.nat))
(assert (= (TagFamily Tclass._System.nat) tytagFamily$nat))
(assert (= (Tag Tclass._System.object?) Tagclass._System.object?))
(assert (= (TagFamily Tclass._System.object?) tytagFamily$object))
(assert (= (Tag Tclass._System.object) Tagclass._System.object))
(assert (= (TagFamily Tclass._System.object) tytagFamily$object))
(assert (forall ((s@@17 T@U) (n@@10 Int) (k@@2 Int) ) (!  (=> (and (and (<= 0 n@@10) (<= n@@10 k@@2)) (< k@@2 (|Seq#Length| s@@17))) (= (|Seq#Index| (|Seq#Drop| s@@17 n@@10) (- k@@2 n@@10)) (|Seq#Index| s@@17 k@@2)))
 :weight 25
 :pattern ( (|Seq#Index| s@@17 k@@2) (|Seq#Drop| s@@17 n@@10))
)))
(assert (forall ((s@@18 T@U) ) (! ($Is SetType (SetRef_to_SetBox s@@18) (TSet Tclass._System.object?))
 :pattern ( (SetRef_to_SetBox s@@18))
)))
(assert (forall ((|l#0@@4| T@U) (|l#1@@3| T@U) (|l#2@@1| T@U) (|l#3@@0| T@U) (|l#4@@0| T@U) ($o@@18 T@U) ($f@@0 T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#13| |l#0@@4| |l#1@@3| |l#2@@1| |l#3@@0| |l#4@@0|) $o@@18 $f@@0))  (=> (and (or (not (= $o@@18 |l#0@@4|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1@@3| $o@@18) |l#2@@1|)))) (or (= $o@@18 |l#3@@0|) (= $o@@18 |l#4@@0|))))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#13| |l#0@@4| |l#1@@3| |l#2@@1| |l#3@@0| |l#4@@0|) $o@@18 $f@@0))
)))
(assert (forall ((a@@19 T@U) (b@@11 T@U) ) (! (= (|Set#Equal| a@@19 b@@11) (forall ((o@@12 T@U) ) (! (= (|Set#IsMember| a@@19 o@@12) (|Set#IsMember| b@@11 o@@12))
 :pattern ( (|Set#IsMember| a@@19 o@@12))
 :pattern ( (|Set#IsMember| b@@11 o@@12))
)))
 :pattern ( (|Set#Equal| a@@19 b@@11))
)))
(assert (forall ((s@@19 T@U) (m@@4 Int) (n@@11 Int) ) (!  (=> (and (and (<= 0 m@@4) (<= 0 n@@11)) (<= (+ m@@4 n@@11) (|Seq#Length| s@@19))) (= (|Seq#Drop| (|Seq#Drop| s@@19 m@@4) n@@11) (|Seq#Drop| s@@19 (+ m@@4 n@@11))))
 :pattern ( (|Seq#Drop| (|Seq#Drop| s@@19 m@@4) n@@11))
)))
(assert (forall ((s0@@1 T@U) (s1@@1 T@U) (n@@12 Int) ) (!  (and (=> (< n@@12 (|Seq#Length| s0@@1)) (= (|Seq#Index| (|Seq#Append| s0@@1 s1@@1) n@@12) (|Seq#Index| s0@@1 n@@12))) (=> (<= (|Seq#Length| s0@@1) n@@12) (= (|Seq#Index| (|Seq#Append| s0@@1 s1@@1) n@@12) (|Seq#Index| s1@@1 (- n@@12 (|Seq#Length| s0@@1))))))
 :pattern ( (|Seq#Index| (|Seq#Append| s0@@1 s1@@1) n@@12))
)))
(assert (forall ((x@@11 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@11))) (Lit BoxType ($Box intType (int_2_U x@@11))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@11))))
)))
(assert (forall ((x@@12 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@12)) (Lit BoxType ($Box T@@5 x@@12)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@12)))
)))
(assert (forall ((s@@20 T@U) ) (!  (=> (= (|Seq#Length| s@@20) 0) (= s@@20 |Seq#Empty|))
 :pattern ( (|Seq#Length| s@@20))
)))
(assert (forall ((s@@21 T@U) (n@@13 Int) ) (!  (=> (= n@@13 0) (= (|Seq#Take| s@@21 n@@13) |Seq#Empty|))
 :pattern ( (|Seq#Take| s@@21 n@@13))
)))
(assert (forall ((|l#0@@5| T@U) (|l#1@@4| T@U) (|l#2@@2| T@U) (|l#3@@1| T@U) ($o@@19 T@U) ($f@@1 T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#6| |l#0@@5| |l#1@@4| |l#2@@2| |l#3@@1|) $o@@19 $f@@1))  (=> (and (or (not (= $o@@19 |l#0@@5|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1@@4| $o@@19) |l#2@@2|)))) (|Set#IsMember| |l#3@@1| ($Box refType $o@@19))))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#6| |l#0@@5| |l#1@@4| |l#2@@2| |l#3@@1|) $o@@19 $f@@1))
)))
(assert (forall ((h@@16 T@U) (v@@14 T@U) ) (! ($IsAlloc intType v@@14 TInt h@@16)
 :pattern ( ($IsAlloc intType v@@14 TInt h@@16))
)))
(assert (forall ((s@@22 T@U) (i@@10 Int) (v@@15 T@U) (n@@14 Int) ) (!  (=> (and (and (<= 0 i@@10) (< i@@10 n@@14)) (<= n@@14 (|Seq#Length| s@@22))) (= (|Seq#Take| (|Seq#Update| s@@22 i@@10 v@@15) n@@14) (|Seq#Update| (|Seq#Take| s@@22 n@@14) i@@10 v@@15)))
 :pattern ( (|Seq#Take| (|Seq#Update| s@@22 i@@10 v@@15) n@@14))
)))
(assert (forall ((v@@16 T@U) (t0@@19 T@U) ) (! (= ($Is SeqType v@@16 (TSeq t0@@19)) (forall ((i@@11 Int) ) (!  (=> (and (<= 0 i@@11) (< i@@11 (|Seq#Length| v@@16))) ($IsBox (|Seq#Index| v@@16 i@@11) t0@@19))
 :pattern ( (|Seq#Index| v@@16 i@@11))
)))
 :pattern ( ($Is SeqType v@@16 (TSeq t0@@19)))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((_module.List$T@@19 T@U) ($Heap@@0 T@U) (this@@1 T@U) ) (!  (=> (or (|_module.List.Valid#canCall| _module.List$T@@19 $Heap@@0 this@@1) (and (< 0 $FunctionContextHeight) (and ($IsGoodHeap $Heap@@0) (and (or (not (= this@@1 null)) (not true)) (and ($Is refType this@@1 (Tclass._module.List _module.List$T@@19)) ($IsAlloc refType this@@1 (Tclass._module.List _module.List$T@@19) $Heap@@0)))))) (= (_module.List.Valid _module.List$T@@19 $Heap@@0 this@@1)  (and (and (and (|Set#IsMember| ($Unbox SetType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@@0 this@@1) _module.List.Repr)) ($Box refType this@@1)) (|Set#IsMember| ($Unbox SetType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@@0 this@@1) _module.List.Repr)) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@@0 this@@1) _module.List.a))) (<= (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@@0 this@@1) _module.List.n))) (_System.array.Length ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@@0 this@@1) _module.List.a))))) (|Seq#Equal| ($Unbox SeqType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@@0 this@@1) _module.List.Contents)) (|Seq#Take| (|Seq#FromArray| $Heap@@0 ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@@0 this@@1) _module.List.a))) (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@@0 this@@1) _module.List.n))))))))
 :pattern ( (_module.List.Valid _module.List$T@@19 $Heap@@0 this@@1) ($IsGoodHeap $Heap@@0))
))))
(assert (forall ((v@@17 T@U) ) (! ($Is intType v@@17 TInt)
 :pattern ( ($Is intType v@@17 TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |$lambdaHeap#0_0@0| () T@U)
(declare-fun this@@2 () T@U)
(declare-fun |i#0_0@0| () Int)
(declare-fun |lambdaResult#0_0| () T@U)
(declare-fun |t#0| () T@U)
(declare-fun _module.List$T@@20 () T@U)
(declare-fun |$_Frame#l0_0@0| () T@U)
(declare-fun $Heap@@1 () T@U)
(declare-fun |b$reqreads#0_0@0| () Bool)
(declare-fun $Heap@7 () T@U)
(declare-fun $Heap@3 () T@U)
(declare-fun $obj0@0 () T@U)
(declare-fun $index0@0 () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun |$rhs#1@0| () Int)
(declare-fun |$rhs#2@0| () T@U)
(declare-fun $Heap@4 () T@U)
(declare-fun $Heap@5 () T@U)
(declare-fun $Heap@6 () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun $nw@0 () T@U)
(declare-fun |$rhs#0_1@0| () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun $Heap@2 () T@U)
(declare-fun $LZ () T@U)
(declare-fun |b#0_0| () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 54) (let ((anon7_correct true))
(let ((anon17_Else_correct  (=> (and (and (<= (_System.array.Length ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |$lambdaHeap#0_0@0| this@@2) _module.List.a))) |i#0_0@0|) (= |lambdaResult#0_0| |t#0|)) (and ($IsBox |lambdaResult#0_0| _module.List$T@@20) (= (ControlFlow 0 42) 35))) anon7_correct)))
(let ((anon17_Then_correct  (=> (< |i#0_0@0| (_System.array.Length ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |$lambdaHeap#0_0@0| this@@2) _module.List.a)))) (and (=> (= (ControlFlow 0 37) (- 0 41)) (U_2_bool (MapType0Select refType FieldType boolType |$_Frame#l0_0@0| this@@2 _module.List.a))) (=> (U_2_bool (MapType0Select refType FieldType boolType |$_Frame#l0_0@0| this@@2 _module.List.a)) (and (=> (= (ControlFlow 0 37) (- 0 40)) (or (not (= ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |$lambdaHeap#0_0@0| this@@2) _module.List.a)) null)) (not true))) (=> (or (not (= ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |$lambdaHeap#0_0@0| this@@2) _module.List.a)) null)) (not true)) (and (=> (= (ControlFlow 0 37) (- 0 39)) (and (<= 0 |i#0_0@0|) (< |i#0_0@0| (_System.array.Length ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |$lambdaHeap#0_0@0| this@@2) _module.List.a)))))) (=> (and (<= 0 |i#0_0@0|) (< |i#0_0@0| (_System.array.Length ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |$lambdaHeap#0_0@0| this@@2) _module.List.a))))) (and (=> (= (ControlFlow 0 37) (- 0 38)) (U_2_bool (MapType0Select refType FieldType boolType |$_Frame#l0_0@0| ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |$lambdaHeap#0_0@0| this@@2) _module.List.a)) (IndexField |i#0_0@0|)))) (=> (U_2_bool (MapType0Select refType FieldType boolType |$_Frame#l0_0@0| ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |$lambdaHeap#0_0@0| this@@2) _module.List.a)) (IndexField |i#0_0@0|))) (=> (= |lambdaResult#0_0| (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@@1 ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@@1 this@@2) _module.List.a))) (IndexField |i#0_0@0|))) (=> (and ($IsBox |lambdaResult#0_0| _module.List$T@@20) (= (ControlFlow 0 37) 35)) anon7_correct)))))))))))))
(let ((anon16_Then_correct  (=> (<= (LitInt 0) |i#0_0@0|) (and (=> (= (ControlFlow 0 43) (- 0 45)) (U_2_bool (MapType0Select refType FieldType boolType |$_Frame#l0_0@0| this@@2 _module.List.a))) (=> (U_2_bool (MapType0Select refType FieldType boolType |$_Frame#l0_0@0| this@@2 _module.List.a)) (and (=> (= (ControlFlow 0 43) (- 0 44)) (or (not (= ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |$lambdaHeap#0_0@0| this@@2) _module.List.a)) null)) (not true))) (=> (or (not (= ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |$lambdaHeap#0_0@0| this@@2) _module.List.a)) null)) (not true)) (and (=> (= (ControlFlow 0 43) 37) anon17_Then_correct) (=> (= (ControlFlow 0 43) 42) anon17_Else_correct)))))))))
(let ((anon16_Else_correct  (=> (and (< |i#0_0@0| (LitInt 0)) (= (ControlFlow 0 36) 35)) anon7_correct)))
(let ((anon15_Then_correct  (=> (and (= |$_Frame#l0_0@0| (|lambda#13| null |$lambdaHeap#0_0@0| alloc this@@2 ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |$lambdaHeap#0_0@0| this@@2) _module.List.a)))) (= |b$reqreads#0_0@0| (U_2_bool (MapType0Select refType FieldType boolType |$_Frame#l0_0@0| this@@2 _module.List.a)))) (and (=> (= (ControlFlow 0 46) (- 0 47)) |b$reqreads#0_0@0|) (=> |b$reqreads#0_0@0| (and (=> (= (ControlFlow 0 46) 43) anon16_Then_correct) (=> (= (ControlFlow 0 46) 36) anon16_Else_correct)))))))
(let ((anon15_Else_correct true))
(let ((anon14_Then_correct  (=> (and ($IsGoodHeap |$lambdaHeap#0_0@0|) (or (= $Heap@@1 |$lambdaHeap#0_0@0|) ($HeapSucc $Heap@@1 |$lambdaHeap#0_0@0|))) (and (=> (= (ControlFlow 0 48) 46) anon15_Then_correct) (=> (= (ControlFlow 0 48) 34) anon15_Else_correct)))))
(let ((GeneratedUnifiedExit_correct  (and (=> (= (ControlFlow 0 2) (- 0 7)) (=> (|_module.List.Valid#canCall| _module.List$T@@20 $Heap@7 this@@2) (or (_module.List.Valid _module.List$T@@20 $Heap@7 this@@2) (|Set#IsMember| ($Unbox SetType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@7 this@@2) _module.List.Repr)) ($Box refType this@@2))))) (=> (=> (|_module.List.Valid#canCall| _module.List$T@@20 $Heap@7 this@@2) (or (_module.List.Valid _module.List$T@@20 $Heap@7 this@@2) (|Set#IsMember| ($Unbox SetType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@7 this@@2) _module.List.Repr)) ($Box refType this@@2)))) (and (=> (= (ControlFlow 0 2) (- 0 6)) (=> (|_module.List.Valid#canCall| _module.List$T@@20 $Heap@7 this@@2) (or (_module.List.Valid _module.List$T@@20 $Heap@7 this@@2) (|Set#IsMember| ($Unbox SetType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@7 this@@2) _module.List.Repr)) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@7 this@@2) _module.List.a))))) (=> (=> (|_module.List.Valid#canCall| _module.List$T@@20 $Heap@7 this@@2) (or (_module.List.Valid _module.List$T@@20 $Heap@7 this@@2) (|Set#IsMember| ($Unbox SetType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@7 this@@2) _module.List.Repr)) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@7 this@@2) _module.List.a)))) (and (=> (= (ControlFlow 0 2) (- 0 5)) (=> (|_module.List.Valid#canCall| _module.List$T@@20 $Heap@7 this@@2) (or (_module.List.Valid _module.List$T@@20 $Heap@7 this@@2) (<= (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@7 this@@2) _module.List.n))) (_System.array.Length ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@7 this@@2) _module.List.a))))))) (=> (=> (|_module.List.Valid#canCall| _module.List$T@@20 $Heap@7 this@@2) (or (_module.List.Valid _module.List$T@@20 $Heap@7 this@@2) (<= (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@7 this@@2) _module.List.n))) (_System.array.Length ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@7 this@@2) _module.List.a)))))) (and (=> (= (ControlFlow 0 2) (- 0 4)) (=> (|_module.List.Valid#canCall| _module.List$T@@20 $Heap@7 this@@2) (or (_module.List.Valid _module.List$T@@20 $Heap@7 this@@2) (|Seq#Equal| ($Unbox SeqType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@7 this@@2) _module.List.Contents)) (|Seq#Take| (|Seq#FromArray| $Heap@7 ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@7 this@@2) _module.List.a))) (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@7 this@@2) _module.List.n)))))))) (=> (=> (|_module.List.Valid#canCall| _module.List$T@@20 $Heap@7 this@@2) (or (_module.List.Valid _module.List$T@@20 $Heap@7 this@@2) (|Seq#Equal| ($Unbox SeqType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@7 this@@2) _module.List.Contents)) (|Seq#Take| (|Seq#FromArray| $Heap@7 ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@7 this@@2) _module.List.a))) (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@7 this@@2) _module.List.n))))))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (and (forall (($o@@20 T@U) ) (!  (=> (and (|Set#IsMember| ($Unbox SetType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@7 this@@2) _module.List.Repr)) ($Box refType $o@@20)) (not (|Set#IsMember| ($Unbox SetType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@@1 this@@2) _module.List.Repr)) ($Box refType $o@@20)))) (or (not (= $o@@20 null)) (not true)))
 :pattern (  (or (not (= $o@@20 null)) (not true)))
)) (forall (($o@@21 T@U) ) (!  (=> (and (|Set#IsMember| ($Unbox SetType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@7 this@@2) _module.List.Repr)) ($Box refType $o@@21)) (not (|Set#IsMember| ($Unbox SetType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@@1 this@@2) _module.List.Repr)) ($Box refType $o@@21)))) (not (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@@1 $o@@21) alloc)))))
 :pattern ( ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@@1 $o@@21) alloc)))
)))) (=> (and (forall (($o@@22 T@U) ) (!  (=> (and (|Set#IsMember| ($Unbox SetType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@7 this@@2) _module.List.Repr)) ($Box refType $o@@22)) (not (|Set#IsMember| ($Unbox SetType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@@1 this@@2) _module.List.Repr)) ($Box refType $o@@22)))) (or (not (= $o@@22 null)) (not true)))
 :pattern (  (or (not (= $o@@22 null)) (not true)))
)) (forall (($o@@23 T@U) ) (!  (=> (and (|Set#IsMember| ($Unbox SetType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@7 this@@2) _module.List.Repr)) ($Box refType $o@@23)) (not (|Set#IsMember| ($Unbox SetType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@@1 this@@2) _module.List.Repr)) ($Box refType $o@@23)))) (not (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@@1 $o@@23) alloc)))))
 :pattern ( ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@@1 $o@@23) alloc)))
))) (=> (= (ControlFlow 0 2) (- 0 1)) (|Seq#Equal| ($Unbox SeqType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@7 this@@2) _module.List.Contents)) (|Seq#Append| ($Unbox SeqType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@@1 this@@2) _module.List.Contents)) (|Seq#Build| |Seq#Empty| |t#0|))))))))))))))))
(let ((anon12_correct  (and (=> (= (ControlFlow 0 8) (- 0 14)) (or (not (= ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@3 this@@2) _module.List.a)) null)) (not true))) (=> (or (not (= ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@3 this@@2) _module.List.a)) null)) (not true)) (and (=> (= (ControlFlow 0 8) (- 0 13)) (and (<= 0 (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@3 this@@2) _module.List.n)))) (< (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@3 this@@2) _module.List.n))) (_System.array.Length ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@3 this@@2) _module.List.a)))))) (=> (and (<= 0 (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@3 this@@2) _module.List.n)))) (< (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@3 this@@2) _module.List.n))) (_System.array.Length ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@3 this@@2) _module.List.a))))) (=> (and (= $obj0@0 ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@3 this@@2) _module.List.a))) (= $index0@0 (IndexField (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@3 this@@2) _module.List.n)))))) (and (=> (= (ControlFlow 0 8) (- 0 12)) (U_2_bool (MapType0Select refType FieldType boolType $_ModifiesFrame@0 $obj0@0 $index0@0))) (=> (U_2_bool (MapType0Select refType FieldType boolType $_ModifiesFrame@0 $obj0@0 $index0@0)) (and (=> (= (ControlFlow 0 8) (- 0 11)) (U_2_bool (MapType0Select refType FieldType boolType $_ModifiesFrame@0 this@@2 _module.List.n))) (=> (U_2_bool (MapType0Select refType FieldType boolType $_ModifiesFrame@0 this@@2 _module.List.n)) (and (=> (= (ControlFlow 0 8) (- 0 10)) (U_2_bool (MapType0Select refType FieldType boolType $_ModifiesFrame@0 this@@2 _module.List.Contents))) (=> (U_2_bool (MapType0Select refType FieldType boolType $_ModifiesFrame@0 this@@2 _module.List.Contents)) (and (=> (= (ControlFlow 0 8) (- 0 9)) ($Is intType (int_2_U (+ (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@3 this@@2) _module.List.n))) 1)) Tclass._System.nat)) (=> ($Is intType (int_2_U (+ (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@3 this@@2) _module.List.n))) 1)) Tclass._System.nat) (=> (and (= |$rhs#1@0| (+ (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@3 this@@2) _module.List.n))) 1)) (= |$rhs#2@0| (|Seq#Append| ($Unbox SeqType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@3 this@@2) _module.List.Contents)) (|Seq#Build| |Seq#Empty| |t#0|)))) (=> (and (and (and (= $Heap@4 (MapType1Store refType (MapType1Type FieldType BoxType) $Heap@3 $obj0@0 (MapType1Store FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@3 $obj0@0) $index0@0 |t#0|))) ($IsGoodHeap $Heap@4)) (and (= $Heap@5 (MapType1Store refType (MapType1Type FieldType BoxType) $Heap@4 this@@2 (MapType1Store FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@4 this@@2) _module.List.n ($Box intType (int_2_U |$rhs#1@0|))))) ($IsGoodHeap $Heap@5))) (and (and (= $Heap@6 (MapType1Store refType (MapType1Type FieldType BoxType) $Heap@5 this@@2 (MapType1Store FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@5 this@@2) _module.List.Contents ($Box SeqType |$rhs#2@0|)))) ($IsGoodHeap $Heap@6)) (and (= $Heap@7 $Heap@6) (= (ControlFlow 0 8) 2)))) GeneratedUnifiedExit_correct)))))))))))))))))
(let ((anon10_correct  (and (=> (= (ControlFlow 0 16) (- 0 23)) (|Seq#Equal| (|Seq#Take| (|Seq#FromArray| $Heap@0 $nw@0) (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 this@@2) _module.List.n)))) (|Seq#Take| (|Seq#FromArray| $Heap@0 ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 this@@2) _module.List.a))) (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 this@@2) _module.List.n)))))) (and (=> (= (ControlFlow 0 16) (- 0 22)) (|Seq#Equal| (|Seq#Take| (|Seq#FromArray| $Heap@0 ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 this@@2) _module.List.a))) (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 this@@2) _module.List.n)))) ($Unbox SeqType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 this@@2) _module.List.Contents)))) (=> (and (|Seq#Equal| (|Seq#Take| (|Seq#FromArray| $Heap@0 $nw@0) (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 this@@2) _module.List.n)))) (|Seq#Take| (|Seq#FromArray| $Heap@0 ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 this@@2) _module.List.a))) (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 this@@2) _module.List.n))))) (|Seq#Equal| (|Seq#Take| (|Seq#FromArray| $Heap@0 ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 this@@2) _module.List.a))) (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 this@@2) _module.List.n)))) ($Unbox SeqType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 this@@2) _module.List.Contents)))) (and (=> (= (ControlFlow 0 16) (- 0 21)) (U_2_bool (MapType0Select refType FieldType boolType $_ModifiesFrame@0 this@@2 _module.List.a))) (=> (U_2_bool (MapType0Select refType FieldType boolType $_ModifiesFrame@0 this@@2 _module.List.a)) (and (=> (= (ControlFlow 0 16) (- 0 20)) (U_2_bool (MapType0Select refType FieldType boolType $_ModifiesFrame@0 this@@2 _module.List.Repr))) (=> (U_2_bool (MapType0Select refType FieldType boolType $_ModifiesFrame@0 this@@2 _module.List.Repr)) (=> (= |$rhs#0_1@0| (|Set#Union| ($Unbox SetType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 this@@2) _module.List.Repr)) (|Set#UnionOne| |Set#Empty| ($Box refType $nw@0)))) (=> (and (and (= $Heap@1 (MapType1Store refType (MapType1Type FieldType BoxType) $Heap@0 this@@2 (MapType1Store FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 this@@2) _module.List.a ($Box refType $nw@0)))) ($IsGoodHeap $Heap@1)) (and (= $Heap@2 (MapType1Store refType (MapType1Type FieldType BoxType) $Heap@1 this@@2 (MapType1Store FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@1 this@@2) _module.List.Repr ($Box SetType |$rhs#0_1@0|)))) ($IsGoodHeap $Heap@2))) (and (=> (= (ControlFlow 0 16) (- 0 19)) (or (not (= $nw@0 null)) (not true))) (=> (or (not (= $nw@0 null)) (not true)) (and (=> (= (ControlFlow 0 16) (- 0 18)) (and (<= 0 (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@2 this@@2) _module.List.n)))) (<= (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@2 this@@2) _module.List.n))) (_System.array.Length $nw@0)))) (and (=> (= (ControlFlow 0 16) (- 0 17)) (|Seq#Equal| (|Seq#Take| (|Seq#FromArray| $Heap@2 $nw@0) (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@2 this@@2) _module.List.n)))) ($Unbox SeqType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@2 this@@2) _module.List.Contents)))) (=> (|Seq#Equal| (|Seq#Take| (|Seq#FromArray| $Heap@2 $nw@0) (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@2 this@@2) _module.List.n)))) ($Unbox SeqType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@2 this@@2) _module.List.Contents))) (=> (and (= $Heap@3 $Heap@2) (= (ControlFlow 0 16) 8)) anon12_correct)))))))))))))))))
(let ((anon18_Else_correct  (=> (and (not (|Seq#Equal| (|Seq#Take| (|Seq#FromArray| $Heap@0 $nw@0) (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 this@@2) _module.List.n)))) (|Seq#Take| (|Seq#FromArray| $Heap@0 ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 this@@2) _module.List.a))) (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 this@@2) _module.List.n)))))) (= (ControlFlow 0 27) 16)) anon10_correct)))
(let ((anon18_Then_correct  (=> (|Seq#Equal| (|Seq#Take| (|Seq#FromArray| $Heap@0 $nw@0) (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 this@@2) _module.List.n)))) (|Seq#Take| (|Seq#FromArray| $Heap@0 ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 this@@2) _module.List.a))) (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 this@@2) _module.List.n))))) (and (=> (= (ControlFlow 0 24) (- 0 26)) (or (not (= ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 this@@2) _module.List.a)) null)) (not true))) (=> (or (not (= ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 this@@2) _module.List.a)) null)) (not true)) (and (=> (= (ControlFlow 0 24) (- 0 25)) (and (<= 0 (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 this@@2) _module.List.n)))) (<= (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 this@@2) _module.List.n))) (_System.array.Length ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 this@@2) _module.List.a)))))) (=> (= (ControlFlow 0 24) 16) anon10_correct)))))))
(let ((anon14_Else_correct  (=> (and (and (or (not (= $nw@0 null)) (not true)) ($Is refType $nw@0 (Tclass._System.array? _module.List$T@@20))) (and (not (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@@1 $nw@0) alloc)))) (= (_System.array.Length $nw@0) (+ (Mul (LitInt 2) (_System.array.Length ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@@1 this@@2) _module.List.a)))) 1)))) (and (=> (= (ControlFlow 0 28) (- 0 33)) (forall ((|arrayinit#0_0#i0#0| Int) )  (=> (and (<= 0 |arrayinit#0_0#i0#0|) (< |arrayinit#0_0#i0#0| (+ (Mul (LitInt 2) (_System.array.Length ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@@1 this@@2) _module.List.a)))) 1))) (Requires1 TInt _module.List$T@@20 $Heap@@1 (Lit HandleTypeType (AtLayer HandleTypeType (|lambda#12| (Handle1 (|lambda#8| this@@2 _module.List.a this@@2 _module.List.a |t#0|) (|lambda#9| TInt (LitInt 0)) (|lambda#11| this@@2 this@@2 _module.List.a))) ($LS $LZ))) ($Box intType (int_2_U |arrayinit#0_0#i0#0|)))))) (=> (and (and (forall ((|arrayinit#0_0#i0#0@@0| Int) ) (!  (=> (and (<= 0 |arrayinit#0_0#i0#0@@0|) (< |arrayinit#0_0#i0#0@@0| (+ (Mul (LitInt 2) (_System.array.Length ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@@1 this@@2) _module.List.a)))) 1))) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@@1 $nw@0) (IndexField |arrayinit#0_0#i0#0@@0|)) (Apply1 TInt _module.List$T@@20 $Heap@@1 (Lit HandleTypeType (AtLayer HandleTypeType (|lambda#12| (Handle1 (|lambda#8| this@@2 _module.List.a this@@2 _module.List.a |t#0|) (|lambda#9| TInt (LitInt 0)) (|lambda#11| this@@2 this@@2 _module.List.a))) ($LS $LZ))) ($Box intType (int_2_U |arrayinit#0_0#i0#0@@0|)))))
 :pattern ( (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@@1 $nw@0) (IndexField |arrayinit#0_0#i0#0@@0|)))
)) (= $Heap@0 (MapType1Store refType (MapType1Type FieldType BoxType) $Heap@@1 $nw@0 (MapType1Store FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@@1 $nw@0) alloc ($Box boolType (bool_2_U true)))))) (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0))) (and (=> (= (ControlFlow 0 28) (- 0 32)) (or (not (= $nw@0 null)) (not true))) (=> (or (not (= $nw@0 null)) (not true)) (and (=> (= (ControlFlow 0 28) (- 0 31)) (and (<= 0 (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 this@@2) _module.List.n)))) (<= (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 this@@2) _module.List.n))) (_System.array.Length $nw@0)))) (and (=> (= (ControlFlow 0 28) (- 0 30)) (or (not (= ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 this@@2) _module.List.a)) null)) (not true))) (=> (or (not (= ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 this@@2) _module.List.a)) null)) (not true)) (and (=> (= (ControlFlow 0 28) (- 0 29)) (and (<= 0 (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 this@@2) _module.List.n)))) (<= (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 this@@2) _module.List.n))) (_System.array.Length ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 this@@2) _module.List.a)))))) (and (=> (= (ControlFlow 0 28) 24) anon18_Then_correct) (=> (= (ControlFlow 0 28) 27) anon18_Else_correct)))))))))))))
(let ((anon13_Then_correct  (=> (= (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@@1 this@@2) _module.List.n))) (_System.array.Length ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@@1 this@@2) _module.List.a)))) (and (=> (= (ControlFlow 0 49) (- 0 51)) (or (not (= ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@@1 this@@2) _module.List.a)) null)) (not true))) (=> (or (not (= ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@@1 this@@2) _module.List.a)) null)) (not true)) (and (=> (= (ControlFlow 0 49) (- 0 50)) (<= 0 (+ (Mul (LitInt 2) (_System.array.Length ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@@1 this@@2) _module.List.a)))) 1))) (=> (<= 0 (+ (Mul (LitInt 2) (_System.array.Length ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@@1 this@@2) _module.List.a)))) 1)) (and (=> (= (ControlFlow 0 49) 48) anon14_Then_correct) (=> (= (ControlFlow 0 49) 28) anon14_Else_correct)))))))))
(let ((anon13_Else_correct  (=> (or (not (= (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@@1 this@@2) _module.List.n))) (_System.array.Length ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@@1 this@@2) _module.List.a))))) (not true)) (=> (and (= $Heap@3 $Heap@@1) (= (ControlFlow 0 15) 8)) anon12_correct))))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#6| null $Heap@@1 alloc ($Unbox SetType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@@1 this@@2) _module.List.Repr)))) (and (=> (= (ControlFlow 0 52) (- 0 53)) (or (not (= ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@@1 this@@2) _module.List.a)) null)) (not true))) (=> (or (not (= ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@@1 this@@2) _module.List.a)) null)) (not true)) (and (=> (= (ControlFlow 0 52) 49) anon13_Then_correct) (=> (= (ControlFlow 0 52) 15) anon13_Else_correct)))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap@@1) ($IsHeapAnchor $Heap@@1)) (=> (and (and (or (not (= this@@2 null)) (not true)) (and ($Is refType this@@2 (Tclass._module.List _module.List$T@@20)) ($IsAlloc refType this@@2 (Tclass._module.List _module.List$T@@20) $Heap@@1))) (and ($IsBox |t#0| _module.List$T@@20) ($IsAllocBox |t#0| _module.List$T@@20 $Heap@@1))) (=> (and (and (and (and ($Is refType |b#0_0| (Tclass._System.array _module.List$T@@20)) ($IsAlloc refType |b#0_0| (Tclass._System.array _module.List$T@@20) $Heap@@1)) true) (= 1 $FunctionContextHeight)) (and (and (|_module.List.Valid#canCall| _module.List$T@@20 $Heap@@1 this@@2) (and (_module.List.Valid _module.List$T@@20 $Heap@@1 this@@2) (and (and (and (|Set#IsMember| ($Unbox SetType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@@1 this@@2) _module.List.Repr)) ($Box refType this@@2)) (|Set#IsMember| ($Unbox SetType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@@1 this@@2) _module.List.Repr)) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@@1 this@@2) _module.List.a))) (<= (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@@1 this@@2) _module.List.n))) (_System.array.Length ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@@1 this@@2) _module.List.a))))) (|Seq#Equal| ($Unbox SeqType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@@1 this@@2) _module.List.Contents)) (|Seq#Take| (|Seq#FromArray| $Heap@@1 ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@@1 this@@2) _module.List.a))) (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@@1 this@@2) _module.List.n)))))))) (= (ControlFlow 0 54) 52))) anon0_correct)))))
PreconditionGeneratedEntry_correct)))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
