(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TBool () T@U)
(declare-fun TInt () T@U)
(declare-fun TagBool () T@U)
(declare-fun TagInt () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._System.array? () T@U)
(declare-fun Tagclass._System.array () T@U)
(declare-fun tytagFamily$array () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun FDim (T@U) Int)
(declare-fun Tag (T@U) T@U)
(declare-fun |Set#UnionOne| (T@U T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun _System.array.Length (T@U) Int)
(declare-fun Tclass._System.array? (T@U) T@U)
(declare-fun null () T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun Tclass._System.array (T@U) T@U)
(declare-fun |Set#Empty| () T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun |Set#Subset| (T@U T@U) Bool)
(declare-fun IndexField (Int) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun Sort.__default.Sorted (T@U T@U Int Int) Bool)
(declare-fun |Sort.__default.Sorted#canCall| (T@U T@U Int Int) Bool)
(declare-fun Tclass.Sort.O.Abs.T () T@U)
(declare-fun Sort.O.Abs.__default.Leq (T@U T@U) Bool)
(declare-fun TagFamily (T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun IndexField_Inverse (T@U) Int)
(declare-fun Tclass._System.array?_0 (T@U) T@U)
(declare-fun Tclass._System.array_0 (T@U) T@U)
(declare-fun |Sort.O.Abs.__default.Leq#canCall| (T@U T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TBool TInt TagBool TagInt alloc Tagclass._System.array? Tagclass._System.array tytagFamily$array)
)
(assert (= (FDim alloc) 0))
(assert (= (Tag TBool) TagBool))
(assert (= (Tag TInt) TagInt))
(assert (forall ((a T@U) (x@@2 T@U) ) (! (|Set#IsMember| (|Set#UnionOne| a x@@2) x@@2)
 :pattern ( (|Set#UnionOne| a x@@2))
)))
(assert (forall ((_System.array$arg T@U) ($o T@U) ) (!  (=> (and (or (not (= $o null)) (not true)) (= (dtype $o) (Tclass._System.array? _System.array$arg))) ($Is intType (int_2_U (_System.array.Length $o)) TInt))
 :pattern ( (_System.array.Length $o) (Tclass._System.array? _System.array$arg))
)))
(assert (forall ((a@@0 T@U) (x@@3 T@U) (y T@U) ) (!  (=> (|Set#IsMember| a@@0 y) (|Set#IsMember| (|Set#UnionOne| a@@0 x@@3) y))
 :pattern ( (|Set#UnionOne| a@@0 x@@3) (|Set#IsMember| a@@0 y))
)))
(assert (forall ((a@@1 T@U) (x@@4 T@U) (o T@U) ) (! (= (|Set#IsMember| (|Set#UnionOne| a@@1 x@@4) o)  (or (= o x@@4) (|Set#IsMember| a@@1 o)))
 :pattern ( (|Set#IsMember| (|Set#UnionOne| a@@1 x@@4) o))
)))
(assert (= (Ctor refType) 3))
(assert (forall ((_System.array$arg@@0 T@U) (|c#0| T@U) ($h T@U) ) (! (= ($IsAlloc refType |c#0| (Tclass._System.array _System.array$arg@@0) $h) ($IsAlloc refType |c#0| (Tclass._System.array? _System.array$arg@@0) $h))
 :pattern ( ($IsAlloc refType |c#0| (Tclass._System.array _System.array$arg@@0) $h))
 :pattern ( ($IsAlloc refType |c#0| (Tclass._System.array? _System.array$arg@@0) $h))
)))
(assert (forall ((o@@0 T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o@@0))
 :pattern ( (|Set#IsMember| |Set#Empty| o@@0))
)))
(assert  (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 4)) (= (Ctor BoxType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 6))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((_System.array$arg@@1 T@U) ($o@@0 T@U) ($h@@0 T@U) ) (! (= ($IsAlloc refType $o@@0 (Tclass._System.array? _System.array$arg@@1) $h@@0)  (or (= $o@@0 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@0 $o@@0) alloc)))))
 :pattern ( ($IsAlloc refType $o@@0 (Tclass._System.array? _System.array$arg@@1) $h@@0))
)))
(assert (forall ((x@@5 Int) ) (! (= (LitInt x@@5) x@@5)
 :pattern ( (LitInt x@@5))
)))
(assert (forall ((x@@6 T@U) (T T@T) ) (! (= (Lit T x@@6) x@@6)
 :pattern ( (Lit T x@@6))
)))
(assert (forall ((a@@2 T@U) (b T@U) ) (! (= (|Set#Subset| a@@2 b) (forall ((o@@1 T@U) ) (!  (=> (|Set#IsMember| a@@2 o@@1) (|Set#IsMember| b o@@1))
 :pattern ( (|Set#IsMember| a@@2 o@@1))
 :pattern ( (|Set#IsMember| b o@@1))
)))
 :pattern ( (|Set#Subset| a@@2 b))
)))
(assert (forall ((_System.array$arg@@2 T@U) ($h@@1 T@U) ($o@@1 T@U) ($i0 Int) ) (!  (=> (and (and (and ($IsGoodHeap $h@@1) (and (or (not (= $o@@1 null)) (not true)) (= (dtype $o@@1) (Tclass._System.array? _System.array$arg@@2)))) (and (<= 0 $i0) (< $i0 (_System.array.Length $o@@1)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@1 $o@@1) alloc)))) ($IsAllocBox (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@1 $o@@1) (IndexField $i0)) _System.array$arg@@2 $h@@1))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@1 $o@@1) (IndexField $i0)) (Tclass._System.array? _System.array$arg@@2))
)))
(assert (forall ((x@@7 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@7)) x@@7)
 :pattern ( ($Unbox T@@0 x@@7))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($Heap T@U) (|a#0| T@U) (|low#0| Int) (|high#0| Int) ) (!  (=> (or (|Sort.__default.Sorted#canCall| $Heap |a#0| |low#0| |high#0|) (and (< 0 $FunctionContextHeight) (and (and ($IsGoodHeap $Heap) (and ($Is refType |a#0| (Tclass._System.array Tclass.Sort.O.Abs.T)) ($IsAlloc refType |a#0| (Tclass._System.array Tclass.Sort.O.Abs.T) $Heap))) (and (and (<= (LitInt 0) |low#0|) (<= |low#0| |high#0|)) (<= |high#0| (_System.array.Length |a#0|)))))) (=> (Sort.__default.Sorted $Heap |a#0| |low#0| |high#0|) (forall ((|i#0| Int) (|j#0| Int) ) (!  (=> (and (and (<= |low#0| |i#0|) (< |i#0| |j#0|)) (< |j#0| |high#0|)) (Sort.O.Abs.__default.Leq (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |a#0|) (IndexField |i#0|)) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |a#0|) (IndexField |j#0|))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |a#0|) (IndexField |j#0|)) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |a#0|) (IndexField |i#0|)))
))))
 :pattern ( (Sort.__default.Sorted $Heap |a#0| |low#0| |high#0|))
))))
(assert (forall ((_System.array$arg@@3 T@U) (|c#0@@0| T@U) ) (! (= ($Is refType |c#0@@0| (Tclass._System.array _System.array$arg@@3))  (and ($Is refType |c#0@@0| (Tclass._System.array? _System.array$arg@@3)) (or (not (= |c#0@@0| null)) (not true))))
 :pattern ( ($Is refType |c#0@@0| (Tclass._System.array _System.array$arg@@3)))
 :pattern ( ($Is refType |c#0@@0| (Tclass._System.array? _System.array$arg@@3)))
)))
(assert (forall ((v T@U) (t T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v) t h) ($IsAlloc T@@1 v t h))
 :pattern ( ($IsAllocBox ($Box T@@1 v) t h))
)))
(assert (forall ((_System.array$arg@@4 T@U) ) (!  (and (= (Tag (Tclass._System.array? _System.array$arg@@4)) Tagclass._System.array?) (= (TagFamily (Tclass._System.array? _System.array$arg@@4)) tytagFamily$array))
 :pattern ( (Tclass._System.array? _System.array$arg@@4))
)))
(assert (forall ((_System.array$arg@@5 T@U) ) (!  (and (= (Tag (Tclass._System.array _System.array$arg@@5)) Tagclass._System.array) (= (TagFamily (Tclass._System.array _System.array$arg@@5)) tytagFamily$array))
 :pattern ( (Tclass._System.array _System.array$arg@@5))
)))
(assert  (and (forall ((t0@@0 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 t2 (MapType1Store t0@@0 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| T@U) ($o@@2 T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@2 $f))  (=> (and (or (not (= $o@@2 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@2) |l#2|)))) (= $o@@2 |l#3|)))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@2 $f))
)))
(assert (forall ((_System.array$arg@@6 T@U) ($o@@3 T@U) ) (! (= ($Is refType $o@@3 (Tclass._System.array? _System.array$arg@@6))  (or (= $o@@3 null) (= (dtype $o@@3) (Tclass._System.array? _System.array$arg@@6))))
 :pattern ( ($Is refType $o@@3 (Tclass._System.array? _System.array$arg@@6)))
)))
(assert (forall ((a@@3 T@U) (b@@0 T@U) ) (!  (=> (|Set#Equal| a@@3 b@@0) (= a@@3 b@@0))
 :pattern ( (|Set#Equal| a@@3 b@@0))
)))
(assert (forall ((bx T@U) ) (!  (=> ($IsBox bx TInt) (and (= ($Box intType ($Unbox intType bx)) bx) ($Is intType ($Unbox intType bx) TInt)))
 :pattern ( ($IsBox bx TInt))
)))
(assert (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 TBool) (and (= ($Box boolType ($Unbox boolType bx@@0)) bx@@0) ($Is boolType ($Unbox boolType bx@@0) TBool)))
 :pattern ( ($IsBox bx@@0 TBool))
)))
(assert (forall ((v@@0 T@U) (t@@0 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@0) t@@0) ($Is T@@2 v@@0 t@@0))
 :pattern ( ($IsBox ($Box T@@2 v@@0) t@@0))
)))
(assert (forall ((o@@2 T@U) ) (! (<= 0 (_System.array.Length o@@2))
 :pattern ( (_System.array.Length o@@2))
)))
(assert (forall ((i Int) ) (! (= (FDim (IndexField i)) 1)
 :pattern ( (IndexField i))
)))
(assert (forall ((i@@0 Int) ) (! (= (IndexField_Inverse (IndexField i@@0)) i@@0)
 :pattern ( (IndexField i@@0))
)))
(assert (forall ((_System.array$arg@@7 T@U) ) (! (= (Tclass._System.array?_0 (Tclass._System.array? _System.array$arg@@7)) _System.array$arg@@7)
 :pattern ( (Tclass._System.array? _System.array$arg@@7))
)))
(assert (forall ((_System.array$arg@@8 T@U) ) (! (= (Tclass._System.array_0 (Tclass._System.array _System.array$arg@@8)) _System.array$arg@@8)
 :pattern ( (Tclass._System.array _System.array$arg@@8))
)))
(assert (forall ((x@@8 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@8)) x@@8)
 :pattern ( ($Box T@@3 x@@8))
)))
(assert (forall ((_System.array$arg@@9 T@U) ($h@@2 T@U) ($o@@4 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@2) (and (or (not (= $o@@4 null)) (not true)) (= (dtype $o@@4) (Tclass._System.array? _System.array$arg@@9)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o@@4) alloc)))) ($IsAlloc intType (int_2_U (_System.array.Length $o@@4)) TInt $h@@2))
 :pattern ( (_System.array.Length $o@@4) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o@@4) alloc)) (Tclass._System.array? _System.array$arg@@9))
)))
(assert (forall ((_System.array$arg@@10 T@U) ($h@@3 T@U) ($o@@5 T@U) ($i0@@0 Int) ) (!  (=> (and (and ($IsGoodHeap $h@@3) (and (or (not (= $o@@5 null)) (not true)) (= (dtype $o@@5) (Tclass._System.array? _System.array$arg@@10)))) (and (<= 0 $i0@@0) (< $i0@@0 (_System.array.Length $o@@5)))) ($IsBox (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@3 $o@@5) (IndexField $i0@@0)) _System.array$arg@@10))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@3 $o@@5) (IndexField $i0@@0)) (Tclass._System.array? _System.array$arg@@10))
)))
(assert (forall ((_System.array$arg@@11 T@U) (bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 (Tclass._System.array? _System.array$arg@@11)) (and (= ($Box refType ($Unbox refType bx@@1)) bx@@1) ($Is refType ($Unbox refType bx@@1) (Tclass._System.array? _System.array$arg@@11))))
 :pattern ( ($IsBox bx@@1 (Tclass._System.array? _System.array$arg@@11)))
)))
(assert (forall ((_System.array$arg@@12 T@U) (bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 (Tclass._System.array _System.array$arg@@12)) (and (= ($Box refType ($Unbox refType bx@@2)) bx@@2) ($Is refType ($Unbox refType bx@@2) (Tclass._System.array _System.array$arg@@12))))
 :pattern ( ($IsBox bx@@2 (Tclass._System.array _System.array$arg@@12)))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($Heap@@0 T@U) (|a#0@@0| T@U) (|low#0@@0| Int) (|high#0@@0| Int) ) (!  (=> (or (|Sort.__default.Sorted#canCall| $Heap@@0 |a#0@@0| |low#0@@0| |high#0@@0|) (and (< 0 $FunctionContextHeight) (and (and ($IsGoodHeap $Heap@@0) ($Is refType |a#0@@0| (Tclass._System.array Tclass.Sort.O.Abs.T))) (and (and (<= (LitInt 0) |low#0@@0|) (<= |low#0@@0| |high#0@@0|)) (<= |high#0@@0| (_System.array.Length |a#0@@0|)))))) (and (forall ((|i#1| Int) (|j#1| Int) ) (!  (=> (<= |low#0@@0| |i#1|) (=> (< |i#1| |j#1|) (=> (< |j#1| |high#0@@0|) (|Sort.O.Abs.__default.Leq#canCall| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 |a#0@@0|) (IndexField |i#1|)) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 |a#0@@0|) (IndexField |j#1|))))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 |a#0@@0|) (IndexField |j#1|)) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 |a#0@@0|) (IndexField |i#1|)))
)) (= (Sort.__default.Sorted $Heap@@0 |a#0@@0| |low#0@@0| |high#0@@0|) (forall ((|i#1@@0| Int) (|j#1@@0| Int) ) (!  (=> (and (and (<= |low#0@@0| |i#1@@0|) (< |i#1@@0| |j#1@@0|)) (< |j#1@@0| |high#0@@0|)) (Sort.O.Abs.__default.Leq (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 |a#0@@0|) (IndexField |i#1@@0|)) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 |a#0@@0|) (IndexField |j#1@@0|))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 |a#0@@0|) (IndexField |j#1@@0|)) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 |a#0@@0|) (IndexField |i#1@@0|)))
)))))
 :pattern ( (Sort.__default.Sorted $Heap@@0 |a#0@@0| |low#0@@0| |high#0@@0|) ($IsGoodHeap $Heap@@0))
))))
(assert (forall ((a@@4 T@U) (b@@1 T@U) ) (! (= (|Set#Equal| a@@4 b@@1) (forall ((o@@3 T@U) ) (! (= (|Set#IsMember| a@@4 o@@3) (|Set#IsMember| b@@1 o@@3))
 :pattern ( (|Set#IsMember| a@@4 o@@3))
 :pattern ( (|Set#IsMember| b@@1 o@@3))
)))
 :pattern ( (|Set#Equal| a@@4 b@@1))
)))
(assert (forall ((x@@9 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@9))) (Lit BoxType ($Box intType (int_2_U x@@9))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@9))))
)))
(assert (forall ((x@@10 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@10)) (Lit BoxType ($Box T@@4 x@@10)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@10)))
)))
(assert (forall ((h@@0 T@U) (v@@1 T@U) ) (! ($IsAlloc intType v@@1 TInt h@@0)
 :pattern ( ($IsAlloc intType v@@1 TInt h@@0))
)))
(assert (forall ((h@@1 T@U) (v@@2 T@U) ) (! ($IsAlloc boolType v@@2 TBool h@@1)
 :pattern ( ($IsAlloc boolType v@@2 TBool h@@1))
)))
(assert (forall ((v@@3 T@U) ) (! ($Is intType v@@3 TInt)
 :pattern ( ($Is intType v@@3 TInt))
)))
(assert (forall ((v@@4 T@U) ) (! ($Is boolType v@@4 TBool)
 :pattern ( ($Is boolType v@@4 TBool))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $Heap@@1 () T@U)
(declare-fun |a#0@@1| () T@U)
(declare-fun |low#0@@1| () Int)
(declare-fun |high#0@@1| () Int)
(declare-fun |b$reqreads#0@1| () Bool)
(declare-fun |b$reqreads#1@1| () Bool)
(declare-fun |i#4@0| () Int)
(declare-fun |j#4@0| () Int)
(declare-fun |b$reqreads#0@0| () Bool)
(declare-fun $_ReadsFrame@0 () T@U)
(declare-fun |##a#2@0| () T@U)
(declare-fun |b$reqreads#1@0| () Bool)
(declare-fun |##b#1@0| () T@U)
(declare-fun |i#3@0| () Int)
(declare-fun |j#3@0| () Int)
(declare-fun |##a#1@0| () T@U)
(declare-fun |##b#0@0| () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 45) (let ((GeneratedUnifiedExit_correct  (=> (= (ControlFlow 0 23) (- 0 22)) (=> (Sort.__default.Sorted $Heap@@1 |a#0@@1| |low#0@@1| |high#0@@1|) (forall ((|i#2| Int) (|j#2| Int) ) (!  (=> (and (and (<= |low#0@@1| |i#2|) (< |i#2| |j#2|)) (< |j#2| |high#0@@1|)) (Sort.O.Abs.__default.Leq (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |a#0@@1|) (IndexField |i#2|)) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |a#0@@1|) (IndexField |j#2|))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |a#0@@1|) (IndexField |j#2|)) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |a#0@@1|) (IndexField |i#2|)))
))))))
(let ((anon24_correct  (=> (= (Sort.__default.Sorted $Heap@@1 |a#0@@1| |low#0@@1| |high#0@@1|) (forall ((|i#5| Int) (|j#5| Int) ) (!  (=> (and (and (<= |low#0@@1| |i#5|) (< |i#5| |j#5|)) (< |j#5| |high#0@@1|)) (Sort.O.Abs.__default.Leq (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |a#0@@1|) (IndexField |i#5|)) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |a#0@@1|) (IndexField |j#5|))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |a#0@@1|) (IndexField |j#5|)) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |a#0@@1|) (IndexField |i#5|)))
))) (=> (and (forall ((|i#5@@0| Int) (|j#5@@0| Int) ) (!  (=> (and (and (<= |low#0@@1| |i#5@@0|) (< |i#5@@0| |j#5@@0|)) (< |j#5@@0| |high#0@@1|)) (|Sort.O.Abs.__default.Leq#canCall| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |a#0@@1|) (IndexField |i#5@@0|)) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |a#0@@1|) (IndexField |j#5@@0|))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |a#0@@1|) (IndexField |j#5@@0|)) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |a#0@@1|) (IndexField |i#5@@0|)))
)) ($Is boolType (bool_2_U (Sort.__default.Sorted $Heap@@1 |a#0@@1| |low#0@@1| |high#0@@1|)) TBool)) (and (=> (= (ControlFlow 0 24) (- 0 26)) |b$reqreads#0@1|) (=> |b$reqreads#0@1| (and (=> (= (ControlFlow 0 24) (- 0 25)) |b$reqreads#1@1|) (=> |b$reqreads#1@1| (=> (= (ControlFlow 0 24) 23) GeneratedUnifiedExit_correct)))))))))
(let ((anon36_Else_correct  (=> (and (and (not (and (and (<= |low#0@@1| |i#4@0|) (< |i#4@0| |j#4@0|)) (< |j#4@0| |high#0@@1|))) (= |b$reqreads#0@1| true)) (and (= |b$reqreads#1@1| true) (= (ControlFlow 0 32) 24))) anon24_correct)))
(let ((anon36_Then_correct  (=> (and (and (<= |low#0@@1| |i#4@0|) (< |i#4@0| |j#4@0|)) (< |j#4@0| |high#0@@1|)) (and (=> (= (ControlFlow 0 27) (- 0 31)) (or (not (= |a#0@@1| null)) (not true))) (=> (or (not (= |a#0@@1| null)) (not true)) (and (=> (= (ControlFlow 0 27) (- 0 30)) (and (<= 0 |i#4@0|) (< |i#4@0| (_System.array.Length |a#0@@1|)))) (=> (and (<= 0 |i#4@0|) (< |i#4@0| (_System.array.Length |a#0@@1|))) (=> (= |b$reqreads#0@0| (U_2_bool (MapType1Select refType FieldType boolType $_ReadsFrame@0 |a#0@@1| (IndexField |i#4@0|)))) (=> (and (= |##a#2@0| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |a#0@@1|) (IndexField |i#4@0|))) ($IsAllocBox |##a#2@0| Tclass.Sort.O.Abs.T $Heap@@1)) (and (=> (= (ControlFlow 0 27) (- 0 29)) (or (not (= |a#0@@1| null)) (not true))) (=> (or (not (= |a#0@@1| null)) (not true)) (and (=> (= (ControlFlow 0 27) (- 0 28)) (and (<= 0 |j#4@0|) (< |j#4@0| (_System.array.Length |a#0@@1|)))) (=> (and (<= 0 |j#4@0|) (< |j#4@0| (_System.array.Length |a#0@@1|))) (=> (= |b$reqreads#1@0| (U_2_bool (MapType1Select refType FieldType boolType $_ReadsFrame@0 |a#0@@1| (IndexField |j#4@0|)))) (=> (and (= |##b#1@0| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |a#0@@1|) (IndexField |j#4@0|))) ($IsAllocBox |##b#1@0| Tclass.Sort.O.Abs.T $Heap@@1)) (=> (and (and (|Sort.O.Abs.__default.Leq#canCall| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |a#0@@1|) (IndexField |i#4@0|)) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |a#0@@1|) (IndexField |j#4@0|))) (= |b$reqreads#0@1| |b$reqreads#0@0|)) (and (= |b$reqreads#1@1| |b$reqreads#1@0|) (= (ControlFlow 0 27) 24))) anon24_correct))))))))))))))))
(let ((anon35_Else_correct  (=> (not (and (<= |low#0@@1| |i#4@0|) (< |i#4@0| |j#4@0|))) (and (=> (= (ControlFlow 0 34) 27) anon36_Then_correct) (=> (= (ControlFlow 0 34) 32) anon36_Else_correct)))))
(let ((anon35_Then_correct  (=> (and (<= |low#0@@1| |i#4@0|) (< |i#4@0| |j#4@0|)) (and (=> (= (ControlFlow 0 33) 27) anon36_Then_correct) (=> (= (ControlFlow 0 33) 32) anon36_Else_correct)))))
(let ((anon34_Else_correct  (=> (< |i#4@0| |low#0@@1|) (and (=> (= (ControlFlow 0 36) 33) anon35_Then_correct) (=> (= (ControlFlow 0 36) 34) anon35_Else_correct)))))
(let ((anon34_Then_correct  (=> (<= |low#0@@1| |i#4@0|) (and (=> (= (ControlFlow 0 35) 33) anon35_Then_correct) (=> (= (ControlFlow 0 35) 34) anon35_Else_correct)))))
(let ((anon33_Then_correct  (and (=> (= (ControlFlow 0 37) 35) anon34_Then_correct) (=> (= (ControlFlow 0 37) 36) anon34_Else_correct))))
(let ((anon16_correct true))
(let ((anon14_correct  (=> (and (forall ((|i#2@@0| Int) (|j#2@@0| Int) ) (!  (=> (and (and (<= |low#0@@1| |i#2@@0|) (< |i#2@@0| |j#2@@0|)) (< |j#2@@0| |high#0@@1|)) (Sort.O.Abs.__default.Leq (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |a#0@@1|) (IndexField |i#2@@0|)) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |a#0@@1|) (IndexField |j#2@@0|))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |a#0@@1|) (IndexField |j#2@@0|)) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |a#0@@1|) (IndexField |i#2@@0|)))
)) (= (ControlFlow 0 4) 2)) anon16_correct)))
(let ((anon12_correct  (=> (and (and (<= |low#0@@1| |i#3@0|) (< |i#3@0| |j#3@0|)) (< |j#3@0| |high#0@@1|)) (and (=> (= (ControlFlow 0 6) (- 0 10)) (or (not (= |a#0@@1| null)) (not true))) (=> (or (not (= |a#0@@1| null)) (not true)) (and (=> (= (ControlFlow 0 6) (- 0 9)) (and (<= 0 |i#3@0|) (< |i#3@0| (_System.array.Length |a#0@@1|)))) (=> (and (<= 0 |i#3@0|) (< |i#3@0| (_System.array.Length |a#0@@1|))) (=> (and (= |##a#1@0| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |a#0@@1|) (IndexField |i#3@0|))) ($IsAllocBox |##a#1@0| Tclass.Sort.O.Abs.T $Heap@@1)) (and (=> (= (ControlFlow 0 6) (- 0 8)) (or (not (= |a#0@@1| null)) (not true))) (=> (or (not (= |a#0@@1| null)) (not true)) (and (=> (= (ControlFlow 0 6) (- 0 7)) (and (<= 0 |j#3@0|) (< |j#3@0| (_System.array.Length |a#0@@1|)))) (=> (and (<= 0 |j#3@0|) (< |j#3@0| (_System.array.Length |a#0@@1|))) (=> (= |##b#0@0| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |a#0@@1|) (IndexField |j#3@0|))) (=> (and (and ($IsAllocBox |##b#0@0| Tclass.Sort.O.Abs.T $Heap@@1) (|Sort.O.Abs.__default.Leq#canCall| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |a#0@@1|) (IndexField |i#3@0|)) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |a#0@@1|) (IndexField |j#3@0|)))) (and (Sort.O.Abs.__default.Leq (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |a#0@@1|) (IndexField |i#3@0|)) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |a#0@@1|) (IndexField |j#3@0|))) (= (ControlFlow 0 6) 4))) anon14_correct))))))))))))))
(let ((anon32_Else_correct  (=> (and (not (and (<= |low#0@@1| |i#3@0|) (< |i#3@0| |j#3@0|))) (= (ControlFlow 0 12) 6)) anon12_correct)))
(let ((anon32_Then_correct  (=> (and (and (<= |low#0@@1| |i#3@0|) (< |i#3@0| |j#3@0|)) (= (ControlFlow 0 11) 6)) anon12_correct)))
(let ((anon31_Else_correct  (=> (< |i#3@0| |low#0@@1|) (and (=> (= (ControlFlow 0 14) 11) anon32_Then_correct) (=> (= (ControlFlow 0 14) 12) anon32_Else_correct)))))
(let ((anon31_Then_correct  (=> (<= |low#0@@1| |i#3@0|) (and (=> (= (ControlFlow 0 13) 11) anon32_Then_correct) (=> (= (ControlFlow 0 13) 12) anon32_Else_correct)))))
(let ((anon30_Else_correct  (=> (and (=> (and (and (<= |low#0@@1| |i#3@0|) (< |i#3@0| |j#3@0|)) (< |j#3@0| |high#0@@1|)) (Sort.O.Abs.__default.Leq (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |a#0@@1|) (IndexField |i#3@0|)) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |a#0@@1|) (IndexField |j#3@0|)))) (= (ControlFlow 0 5) 4)) anon14_correct)))
(let ((anon29_Then_correct  (=> ($IsAlloc refType |a#0@@1| (Tclass._System.array Tclass.Sort.O.Abs.T) $Heap@@1) (=> (and ($IsAlloc intType (int_2_U |low#0@@1|) TInt $Heap@@1) ($IsAlloc intType (int_2_U |high#0@@1|) TInt $Heap@@1)) (and (=> (= (ControlFlow 0 15) (- 0 21)) (<= (LitInt 0) |low#0@@1|)) (and (=> (= (ControlFlow 0 15) (- 0 20)) (<= |low#0@@1| |high#0@@1|)) (and (=> (= (ControlFlow 0 15) (- 0 19)) (<= |high#0@@1| (_System.array.Length |a#0@@1|))) (=> (and (and (<= (LitInt 0) |low#0@@1|) (<= |low#0@@1| |high#0@@1|)) (<= |high#0@@1| (_System.array.Length |a#0@@1|))) (and (=> (= (ControlFlow 0 15) (- 0 18)) (or (or (or (<= 0 |low#0@@1|) (and (|Set#Subset| (|Set#UnionOne| |Set#Empty| ($Box refType |a#0@@1|)) (|Set#UnionOne| |Set#Empty| ($Box refType |a#0@@1|))) (not (|Set#Subset| (|Set#UnionOne| |Set#Empty| ($Box refType |a#0@@1|)) (|Set#UnionOne| |Set#Empty| ($Box refType |a#0@@1|)))))) (and (= |a#0@@1| null) (or (not (= |a#0@@1| null)) (not true)))) (= |low#0@@1| |low#0@@1|))) (=> (or (or (or (<= 0 |low#0@@1|) (and (|Set#Subset| (|Set#UnionOne| |Set#Empty| ($Box refType |a#0@@1|)) (|Set#UnionOne| |Set#Empty| ($Box refType |a#0@@1|))) (not (|Set#Subset| (|Set#UnionOne| |Set#Empty| ($Box refType |a#0@@1|)) (|Set#UnionOne| |Set#Empty| ($Box refType |a#0@@1|)))))) (and (= |a#0@@1| null) (or (not (= |a#0@@1| null)) (not true)))) (= |low#0@@1| |low#0@@1|)) (and (=> (= (ControlFlow 0 15) (- 0 17)) (or (or (or (or (<= 0 |high#0@@1|) (and (|Set#Subset| (|Set#UnionOne| |Set#Empty| ($Box refType |a#0@@1|)) (|Set#UnionOne| |Set#Empty| ($Box refType |a#0@@1|))) (not (|Set#Subset| (|Set#UnionOne| |Set#Empty| ($Box refType |a#0@@1|)) (|Set#UnionOne| |Set#Empty| ($Box refType |a#0@@1|)))))) (and (= |a#0@@1| null) (or (not (= |a#0@@1| null)) (not true)))) (< |low#0@@1| |low#0@@1|)) (= |high#0@@1| |high#0@@1|))) (=> (or (or (or (or (<= 0 |high#0@@1|) (and (|Set#Subset| (|Set#UnionOne| |Set#Empty| ($Box refType |a#0@@1|)) (|Set#UnionOne| |Set#Empty| ($Box refType |a#0@@1|))) (not (|Set#Subset| (|Set#UnionOne| |Set#Empty| ($Box refType |a#0@@1|)) (|Set#UnionOne| |Set#Empty| ($Box refType |a#0@@1|)))))) (and (= |a#0@@1| null) (or (not (= |a#0@@1| null)) (not true)))) (< |low#0@@1| |low#0@@1|)) (= |high#0@@1| |high#0@@1|)) (and (=> (= (ControlFlow 0 15) (- 0 16)) (or (and (and (= |a#0@@1| |a#0@@1|) (= |low#0@@1| |low#0@@1|)) (= |high#0@@1| |high#0@@1|)) (or (and (|Set#Subset| (|Set#UnionOne| |Set#Empty| ($Box refType |a#0@@1|)) (|Set#UnionOne| |Set#Empty| ($Box refType |a#0@@1|))) (not (|Set#Subset| (|Set#UnionOne| |Set#Empty| ($Box refType |a#0@@1|)) (|Set#UnionOne| |Set#Empty| ($Box refType |a#0@@1|))))) (and (|Set#Equal| (|Set#UnionOne| |Set#Empty| ($Box refType |a#0@@1|)) (|Set#UnionOne| |Set#Empty| ($Box refType |a#0@@1|))) (or (and (= |a#0@@1| null) (or (not (= |a#0@@1| null)) (not true))) (and (=  (or (not (= |a#0@@1| null)) (not true))  (or (not (= |a#0@@1| null)) (not true))) (or (< |low#0@@1| |low#0@@1|) (and (= |low#0@@1| |low#0@@1|) (< |high#0@@1| |high#0@@1|))))))))) (=> (or (and (and (= |a#0@@1| |a#0@@1|) (= |low#0@@1| |low#0@@1|)) (= |high#0@@1| |high#0@@1|)) (or (and (|Set#Subset| (|Set#UnionOne| |Set#Empty| ($Box refType |a#0@@1|)) (|Set#UnionOne| |Set#Empty| ($Box refType |a#0@@1|))) (not (|Set#Subset| (|Set#UnionOne| |Set#Empty| ($Box refType |a#0@@1|)) (|Set#UnionOne| |Set#Empty| ($Box refType |a#0@@1|))))) (and (|Set#Equal| (|Set#UnionOne| |Set#Empty| ($Box refType |a#0@@1|)) (|Set#UnionOne| |Set#Empty| ($Box refType |a#0@@1|))) (or (and (= |a#0@@1| null) (or (not (= |a#0@@1| null)) (not true))) (and (=  (or (not (= |a#0@@1| null)) (not true))  (or (not (= |a#0@@1| null)) (not true))) (or (< |low#0@@1| |low#0@@1|) (and (= |low#0@@1| |low#0@@1|) (< |high#0@@1| |high#0@@1|)))))))) (=> (and (or (and (and (= |a#0@@1| |a#0@@1|) (= |low#0@@1| |low#0@@1|)) (= |high#0@@1| |high#0@@1|)) (|Sort.__default.Sorted#canCall| $Heap@@1 |a#0@@1| |low#0@@1| |high#0@@1|)) (Sort.__default.Sorted $Heap@@1 |a#0@@1| |low#0@@1| |high#0@@1|)) (and (and (=> (= (ControlFlow 0 15) 5) anon30_Else_correct) (=> (= (ControlFlow 0 15) 13) anon31_Then_correct)) (=> (= (ControlFlow 0 15) 14) anon31_Else_correct)))))))))))))))))
(let ((anon29_Else_correct  (=> (and (=> (Sort.__default.Sorted $Heap@@1 |a#0@@1| |low#0@@1| |high#0@@1|) (forall ((|i#2@@1| Int) (|j#2@@1| Int) ) (!  (=> (and (and (<= |low#0@@1| |i#2@@1|) (< |i#2@@1| |j#2@@1|)) (< |j#2@@1| |high#0@@1|)) (Sort.O.Abs.__default.Leq (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |a#0@@1|) (IndexField |i#2@@1|)) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |a#0@@1|) (IndexField |j#2@@1|))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |a#0@@1|) (IndexField |j#2@@1|)) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |a#0@@1|) (IndexField |i#2@@1|)))
))) (= (ControlFlow 0 3) 2)) anon16_correct)))
(let ((anon33_Else_correct true))
(let ((anon5_correct  (=> (and (and (<= (LitInt 0) |low#0@@1|) (<= |low#0@@1| |high#0@@1|)) (<= |high#0@@1| (_System.array.Length |a#0@@1|))) (and (and (and (=> (= (ControlFlow 0 38) 37) anon33_Then_correct) (=> (= (ControlFlow 0 38) 1) anon33_Else_correct)) (=> (= (ControlFlow 0 38) 15) anon29_Then_correct)) (=> (= (ControlFlow 0 38) 3) anon29_Else_correct)))))
(let ((anon27_Else_correct  (=> (and (not (and (<= (LitInt 0) |low#0@@1|) (<= |low#0@@1| |high#0@@1|))) (= (ControlFlow 0 41) 38)) anon5_correct)))
(let ((anon27_Then_correct  (=> (and (<= (LitInt 0) |low#0@@1|) (<= |low#0@@1| |high#0@@1|)) (and (=> (= (ControlFlow 0 39) (- 0 40)) (or (not (= |a#0@@1| null)) (not true))) (=> (or (not (= |a#0@@1| null)) (not true)) (=> (= (ControlFlow 0 39) 38) anon5_correct))))))
(let ((anon26_Else_correct  (=> (< |low#0@@1| (LitInt 0)) (and (=> (= (ControlFlow 0 43) 39) anon27_Then_correct) (=> (= (ControlFlow 0 43) 41) anon27_Else_correct)))))
(let ((anon26_Then_correct  (=> (<= (LitInt 0) |low#0@@1|) (and (=> (= (ControlFlow 0 42) 39) anon27_Then_correct) (=> (= (ControlFlow 0 42) 41) anon27_Else_correct)))))
(let ((anon0_correct  (=> (= $_ReadsFrame@0 (|lambda#0| null $Heap@@1 alloc |a#0@@1|)) (and (=> (= (ControlFlow 0 44) 42) anon26_Then_correct) (=> (= (ControlFlow 0 44) 43) anon26_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (and ($IsGoodHeap $Heap@@1) ($IsHeapAnchor $Heap@@1)) ($Is refType |a#0@@1| (Tclass._System.array Tclass.Sort.O.Abs.T))) (and (= 0 $FunctionContextHeight) (= (ControlFlow 0 45) 44))) anon0_correct)))
PreconditionGeneratedEntry_correct))))))))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
