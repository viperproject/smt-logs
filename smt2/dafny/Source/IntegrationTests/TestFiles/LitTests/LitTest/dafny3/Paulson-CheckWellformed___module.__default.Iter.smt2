(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun alloc () T@U)
(declare-fun Tagclass._System.nat () T@U)
(declare-fun Tagclass._module.FunctionHandle () T@U)
(declare-fun tytagFamily$nat () T@U)
(declare-fun tytagFamily$FunctionHandle () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass._System.nat () T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.Iter (T@U T@U Int T@U T@U) T@U)
(declare-fun |_module.__default.Iter#canCall| (T@U Int T@U T@U) Bool)
(declare-fun LitInt (Int) Int)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun Tclass._module.FunctionHandle (T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $LS (T@U) T@U)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun |_module.__default.Apply#canCall| (T@U T@U T@U) Bool)
(declare-fun _module.__default.Apply (T@U T@U T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun Tclass._module.FunctionHandle_0 (T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct alloc Tagclass._System.nat Tagclass._module.FunctionHandle tytagFamily$nat tytagFamily$FunctionHandle)
)
(assert (forall ((|x#0| T@U) ($h T@U) ) (! ($IsAlloc intType |x#0| Tclass._System.nat $h)
 :pattern ( ($IsAlloc intType |x#0| Tclass._System.nat $h))
)))
(assert (= (Ctor DatatypeTypeType) 3))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((_module._default.Iter$A T@U) ($ly T@U) (|n#0| Int) (|f#0| T@U) (|arg#0| T@U) ) (!  (=> (or (|_module.__default.Iter#canCall| _module._default.Iter$A |n#0| |f#0| |arg#0|) (and (< 2 $FunctionContextHeight) (and (and (<= (LitInt 0) |n#0|) ($Is DatatypeTypeType |f#0| (Tclass._module.FunctionHandle _module._default.Iter$A))) ($IsBox |arg#0| _module._default.Iter$A)))) ($IsBox (_module.__default.Iter _module._default.Iter$A $ly |n#0| |f#0| |arg#0|) _module._default.Iter$A))
 :pattern ( (_module.__default.Iter _module._default.Iter$A $ly |n#0| |f#0| |arg#0|))
))))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((_module._default.Iter$A@@0 T@U) ($ly@@0 T@U) (|n#0@@0| Int) (|f#0@@0| T@U) (|arg#0@@0| T@U) ) (!  (=> (or (|_module.__default.Iter#canCall| _module._default.Iter$A@@0 (LitInt |n#0@@0|) (Lit DatatypeTypeType |f#0@@0|) |arg#0@@0|) (and (< 2 $FunctionContextHeight) (and (and (<= (LitInt 0) |n#0@@0|) ($Is DatatypeTypeType |f#0@@0| (Tclass._module.FunctionHandle _module._default.Iter$A@@0))) ($IsBox |arg#0@@0| _module._default.Iter$A@@0)))) (and (=> (or (not (= (LitInt |n#0@@0|) (LitInt 0))) (not true)) (and (|_module.__default.Iter#canCall| _module._default.Iter$A@@0 (LitInt (- |n#0@@0| 1)) (Lit DatatypeTypeType |f#0@@0|) |arg#0@@0|) (|_module.__default.Apply#canCall| _module._default.Iter$A@@0 (Lit DatatypeTypeType |f#0@@0|) (_module.__default.Iter _module._default.Iter$A@@0 ($LS $ly@@0) (LitInt (- |n#0@@0| 1)) (Lit DatatypeTypeType |f#0@@0|) |arg#0@@0|)))) (= (_module.__default.Iter _module._default.Iter$A@@0 ($LS $ly@@0) (LitInt |n#0@@0|) (Lit DatatypeTypeType |f#0@@0|) |arg#0@@0|) (ite (= (LitInt |n#0@@0|) (LitInt 0)) |arg#0@@0| (_module.__default.Apply _module._default.Iter$A@@0 (Lit DatatypeTypeType |f#0@@0|) (_module.__default.Iter _module._default.Iter$A@@0 ($LS $ly@@0) (LitInt (- |n#0@@0| 1)) (Lit DatatypeTypeType |f#0@@0|) |arg#0@@0|))))))
 :weight 3
 :pattern ( (_module.__default.Iter _module._default.Iter$A@@0 ($LS $ly@@0) (LitInt |n#0@@0|) (Lit DatatypeTypeType |f#0@@0|) |arg#0@@0|))
))))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($Heap T@U) (_module._default.Iter$A@@1 T@U) ($ly@@1 T@U) (|n#0@@1| Int) (|f#0@@1| T@U) (|arg#0@@1| T@U) ) (!  (=> (and (or (|_module.__default.Iter#canCall| _module._default.Iter$A@@1 |n#0@@1| |f#0@@1| |arg#0@@1|) (and (< 2 $FunctionContextHeight) (and (and (<= (LitInt 0) |n#0@@1|) (and ($Is DatatypeTypeType |f#0@@1| (Tclass._module.FunctionHandle _module._default.Iter$A@@1)) ($IsAlloc DatatypeTypeType |f#0@@1| (Tclass._module.FunctionHandle _module._default.Iter$A@@1) $Heap))) (and ($IsBox |arg#0@@1| _module._default.Iter$A@@1) ($IsAllocBox |arg#0@@1| _module._default.Iter$A@@1 $Heap))))) ($IsGoodHeap $Heap)) ($IsAllocBox (_module.__default.Iter _module._default.Iter$A@@1 $ly@@1 |n#0@@1| |f#0@@1| |arg#0@@1|) _module._default.Iter$A@@1 $Heap))
 :pattern ( ($IsAllocBox (_module.__default.Iter _module._default.Iter$A@@1 $ly@@1 |n#0@@1| |f#0@@1| |arg#0@@1|) _module._default.Iter$A@@1 $Heap))
))))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((|x#0@@0| T@U) ) (! (= ($Is intType |x#0@@0| Tclass._System.nat) (<= (LitInt 0) (U_2_int |x#0@@0|)))
 :pattern ( ($Is intType |x#0@@0| Tclass._System.nat))
)))
(assert (forall ((v T@U) (t T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v) t h) ($IsAlloc T@@1 v t h))
 :pattern ( ($IsAllocBox ($Box T@@1 v) t h))
)))
(assert (forall ((_module.FunctionHandle$T T@U) ) (!  (and (= (Tag (Tclass._module.FunctionHandle _module.FunctionHandle$T)) Tagclass._module.FunctionHandle) (= (TagFamily (Tclass._module.FunctionHandle _module.FunctionHandle$T)) tytagFamily$FunctionHandle))
 :pattern ( (Tclass._module.FunctionHandle _module.FunctionHandle$T))
)))
(assert (forall ((bx T@U) ) (!  (=> ($IsBox bx Tclass._System.nat) (and (= ($Box intType ($Unbox intType bx)) bx) ($Is intType ($Unbox intType bx) Tclass._System.nat)))
 :pattern ( ($IsBox bx Tclass._System.nat))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module._default.Apply$T T@U) (|f#0@@2| T@U) (|argument#0| T@U) ) (!  (=> (or (|_module.__default.Apply#canCall| _module._default.Apply$T |f#0@@2| |argument#0|) (and (< 1 $FunctionContextHeight) (and ($Is DatatypeTypeType |f#0@@2| (Tclass._module.FunctionHandle _module._default.Apply$T)) ($IsBox |argument#0| _module._default.Apply$T)))) ($IsBox (_module.__default.Apply _module._default.Apply$T |f#0@@2| |argument#0|) _module._default.Apply$T))
 :pattern ( (_module.__default.Apply _module._default.Apply$T |f#0@@2| |argument#0|))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($Heap@@0 T@U) (_module._default.Apply$T@@0 T@U) (|f#0@@3| T@U) (|argument#0@@0| T@U) ) (!  (=> (and (or (|_module.__default.Apply#canCall| _module._default.Apply$T@@0 |f#0@@3| |argument#0@@0|) (and (< 1 $FunctionContextHeight) (and (and ($Is DatatypeTypeType |f#0@@3| (Tclass._module.FunctionHandle _module._default.Apply$T@@0)) ($IsAlloc DatatypeTypeType |f#0@@3| (Tclass._module.FunctionHandle _module._default.Apply$T@@0) $Heap@@0)) (and ($IsBox |argument#0@@0| _module._default.Apply$T@@0) ($IsAllocBox |argument#0@@0| _module._default.Apply$T@@0 $Heap@@0))))) ($IsGoodHeap $Heap@@0)) ($IsAllocBox (_module.__default.Apply _module._default.Apply$T@@0 |f#0@@3| |argument#0@@0|) _module._default.Apply$T@@0 $Heap@@0))
 :pattern ( ($IsAllocBox (_module.__default.Apply _module._default.Apply$T@@0 |f#0@@3| |argument#0@@0|) _module._default.Apply$T@@0 $Heap@@0))
))))
(assert (forall ((v@@0 T@U) (t@@0 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@0) t@@0) ($Is T@@2 v@@0 t@@0))
 :pattern ( ($IsBox ($Box T@@2 v@@0) t@@0))
)))
(assert (= (Ctor BoxType) 4))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((_module._default.Iter$A@@2 T@U) ($ly@@2 T@U) (|n#0@@2| Int) (|f#0@@4| T@U) (|arg#0@@2| T@U) ) (!  (=> (or (|_module.__default.Iter#canCall| _module._default.Iter$A@@2 (LitInt |n#0@@2|) (Lit DatatypeTypeType |f#0@@4|) (Lit BoxType |arg#0@@2|)) (and (< 2 $FunctionContextHeight) (and (and (<= (LitInt 0) |n#0@@2|) ($Is DatatypeTypeType |f#0@@4| (Tclass._module.FunctionHandle _module._default.Iter$A@@2))) ($IsBox |arg#0@@2| _module._default.Iter$A@@2)))) (and (=> (or (not (= (LitInt |n#0@@2|) (LitInt 0))) (not true)) (and (|_module.__default.Iter#canCall| _module._default.Iter$A@@2 (LitInt (- |n#0@@2| 1)) (Lit DatatypeTypeType |f#0@@4|) (Lit BoxType |arg#0@@2|)) (|_module.__default.Apply#canCall| _module._default.Iter$A@@2 (Lit DatatypeTypeType |f#0@@4|) (Lit BoxType (_module.__default.Iter _module._default.Iter$A@@2 ($LS $ly@@2) (LitInt (- |n#0@@2| 1)) (Lit DatatypeTypeType |f#0@@4|) (Lit BoxType |arg#0@@2|)))))) (= (_module.__default.Iter _module._default.Iter$A@@2 ($LS $ly@@2) (LitInt |n#0@@2|) (Lit DatatypeTypeType |f#0@@4|) (Lit BoxType |arg#0@@2|)) (ite (= (LitInt |n#0@@2|) (LitInt 0)) |arg#0@@2| (_module.__default.Apply _module._default.Iter$A@@2 (Lit DatatypeTypeType |f#0@@4|) (Lit BoxType (_module.__default.Iter _module._default.Iter$A@@2 ($LS $ly@@2) (LitInt (- |n#0@@2| 1)) (Lit DatatypeTypeType |f#0@@4|) (Lit BoxType |arg#0@@2|))))))))
 :weight 3
 :pattern ( (_module.__default.Iter _module._default.Iter$A@@2 ($LS $ly@@2) (LitInt |n#0@@2|) (Lit DatatypeTypeType |f#0@@4|) (Lit BoxType |arg#0@@2|)))
))))
(assert (forall ((_module.FunctionHandle$T@@0 T@U) ) (! (= (Tclass._module.FunctionHandle_0 (Tclass._module.FunctionHandle _module.FunctionHandle$T@@0)) _module.FunctionHandle$T@@0)
 :pattern ( (Tclass._module.FunctionHandle _module.FunctionHandle$T@@0))
)))
(assert (forall ((x@@5 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@5)) x@@5)
 :pattern ( ($Box T@@3 x@@5))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((_module._default.Iter$A@@3 T@U) ($ly@@3 T@U) (|n#0@@3| Int) (|f#0@@5| T@U) (|arg#0@@3| T@U) ) (!  (=> (or (|_module.__default.Iter#canCall| _module._default.Iter$A@@3 |n#0@@3| |f#0@@5| |arg#0@@3|) (and (< 2 $FunctionContextHeight) (and (and (<= (LitInt 0) |n#0@@3|) ($Is DatatypeTypeType |f#0@@5| (Tclass._module.FunctionHandle _module._default.Iter$A@@3))) ($IsBox |arg#0@@3| _module._default.Iter$A@@3)))) (and (=> (or (not (= |n#0@@3| (LitInt 0))) (not true)) (and (|_module.__default.Iter#canCall| _module._default.Iter$A@@3 (- |n#0@@3| 1) |f#0@@5| |arg#0@@3|) (|_module.__default.Apply#canCall| _module._default.Iter$A@@3 |f#0@@5| (_module.__default.Iter _module._default.Iter$A@@3 $ly@@3 (- |n#0@@3| 1) |f#0@@5| |arg#0@@3|)))) (= (_module.__default.Iter _module._default.Iter$A@@3 ($LS $ly@@3) |n#0@@3| |f#0@@5| |arg#0@@3|) (ite (= |n#0@@3| (LitInt 0)) |arg#0@@3| (_module.__default.Apply _module._default.Iter$A@@3 |f#0@@5| (_module.__default.Iter _module._default.Iter$A@@3 $ly@@3 (- |n#0@@3| 1) |f#0@@5| |arg#0@@3|))))))
 :pattern ( (_module.__default.Iter _module._default.Iter$A@@3 ($LS $ly@@3) |n#0@@3| |f#0@@5| |arg#0@@3|))
))))
(assert  (and (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0 t1 t2 (MapType0Store t0 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 5)) (= (Ctor FieldType) 6)) (forall ((t0@@0 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 (MapType1Store t0@@0 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :weight 0
))) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((_module.FunctionHandle$T@@1 T@U) (bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 (Tclass._module.FunctionHandle _module.FunctionHandle$T@@1)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@0)) bx@@0) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@0) (Tclass._module.FunctionHandle _module.FunctionHandle$T@@1))))
 :pattern ( ($IsBox bx@@0 (Tclass._module.FunctionHandle _module.FunctionHandle$T@@1)))
)))
(assert (= (Tag Tclass._System.nat) Tagclass._System.nat))
(assert (= (TagFamily Tclass._System.nat) tytagFamily$nat))
(assert (forall ((_module._default.Iter$A@@4 T@U) ($ly@@4 T@U) (|n#0@@4| Int) (|f#0@@6| T@U) (|arg#0@@4| T@U) ) (! (= (_module.__default.Iter _module._default.Iter$A@@4 ($LS $ly@@4) |n#0@@4| |f#0@@6| |arg#0@@4|) (_module.__default.Iter _module._default.Iter$A@@4 $ly@@4 |n#0@@4| |f#0@@6| |arg#0@@4|))
 :pattern ( (_module.__default.Iter _module._default.Iter$A@@4 ($LS $ly@@4) |n#0@@4| |f#0@@6| |arg#0@@4|))
)))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((x@@7 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@7)) (Lit BoxType ($Box T@@4 x@@7)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@7)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |n#0@@5| () Int)
(declare-fun |f#0@@7| () T@U)
(declare-fun _module._default.Iter$A@@5 () T@U)
(declare-fun $Heap@@1 () T@U)
(declare-fun |##n#0@0| () Int)
(declare-fun |arg#0@@5| () T@U)
(declare-fun DtRank (T@U) Int)
(declare-fun $_ReadsFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 8) (let ((anon8_Else_correct  (=> (and (or (not (= |n#0@@5| (LitInt 0))) (not true)) ($IsAlloc DatatypeTypeType |f#0@@7| (Tclass._module.FunctionHandle _module._default.Iter$A@@5) $Heap@@1)) (and (=> (= (ControlFlow 0 4) (- 0 6)) ($Is intType (int_2_U (- |n#0@@5| 1)) Tclass._System.nat)) (=> ($Is intType (int_2_U (- |n#0@@5| 1)) Tclass._System.nat) (=> (and (and (= |##n#0@0| (- |n#0@@5| 1)) ($IsAlloc intType (int_2_U |##n#0@0|) Tclass._System.nat $Heap@@1)) (and ($IsAlloc DatatypeTypeType |f#0@@7| (Tclass._module.FunctionHandle _module._default.Iter$A@@5) $Heap@@1) ($IsAllocBox |arg#0@@5| _module._default.Iter$A@@5 $Heap@@1))) (and (=> (= (ControlFlow 0 4) (- 0 5)) (or (<= 0 |n#0@@5|) (= |##n#0@0| |n#0@@5|))) (=> (or (<= 0 |n#0@@5|) (= |##n#0@0| |n#0@@5|)) (=> (= (ControlFlow 0 4) (- 0 3)) (or (< |##n#0@0| |n#0@@5|) (and (= |##n#0@0| |n#0@@5|) (< (DtRank |f#0@@7|) (DtRank |f#0@@7|)))))))))))))
(let ((anon8_Then_correct true))
(let ((anon7_Then_correct true))
(let ((anon0_correct  (=> (= $_ReadsFrame@0 (|lambda#0| null $Heap@@1 alloc false)) (and (and (=> (= (ControlFlow 0 7) 1) anon7_Then_correct) (=> (= (ControlFlow 0 7) 2) anon8_Then_correct)) (=> (= (ControlFlow 0 7) 4) anon8_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (and ($IsGoodHeap $Heap@@1) ($IsHeapAnchor $Heap@@1)) (<= (LitInt 0) |n#0@@5|)) (and (and ($Is DatatypeTypeType |f#0@@7| (Tclass._module.FunctionHandle _module._default.Iter$A@@5)) ($IsBox |arg#0@@5| _module._default.Iter$A@@5)) (and (= 2 $FunctionContextHeight) (= (ControlFlow 0 8) 7)))) anon0_correct)))
PreconditionGeneratedEntry_correct))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
