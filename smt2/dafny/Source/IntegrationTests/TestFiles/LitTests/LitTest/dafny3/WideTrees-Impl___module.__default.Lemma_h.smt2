(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun alloc () T@U)
(declare-fun Tagclass._System.nat () T@U)
(declare-fun Tagclass._module.Tree () T@U)
(declare-fun Tagclass._module.Stream () T@U)
(declare-fun |##_module.Stream.SNil| () T@U)
(declare-fun |##_module.Stream.SCons| () T@U)
(declare-fun |##_module.Tree.Node| () T@U)
(declare-fun tytagFamily$nat () T@U)
(declare-fun tytagFamily$Tree () T@U)
(declare-fun tytagFamily$Stream () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun |ORD#Less| (T@U T@U) Bool)
(declare-fun |ORD#Minus| (T@U T@U) T@U)
(declare-fun |ORD#FromNat| (Int) T@U)
(declare-fun |ORD#Offset| (T@U) Int)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun |#_module.Stream.SNil| () T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.SmallTree (T@U Int) T@U)
(declare-fun |_module.__default.SmallTree#canCall| (Int) Bool)
(declare-fun LitInt (Int) Int)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun Tclass._module.Tree () T@U)
(declare-fun _module.Tree.Node_q (T@U) Bool)
(declare-fun Tclass._module.Stream (T@U) T@U)
(declare-fun _module.__default.SmallTrees (T@U Int) T@U)
(declare-fun |_module.__default.SmallTrees#canCall| (Int) Bool)
(declare-fun $LS (T@U) T@U)
(declare-fun |#_module.Stream.SCons| (T@U T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun _module.__default.LowerThan_h (T@U T@U T@U Int) Bool)
(declare-fun BoxType () T@T)
(declare-fun |_module.__default.LowerThan_h#canCall| (T@U T@U Int) Bool)
(declare-fun _module.Stream.SNil_q (T@U) Bool)
(declare-fun _module.Stream.tail (T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun _module.Stream.head (T@U) T@U)
(declare-fun _module.Tree.children (T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun _module.Stream.SCons_q (T@U) Bool)
(declare-fun |#_module.Tree.Node| (T@U) T@U)
(declare-fun Tclass._System.nat () T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun |ORD#IsNat| (T@U) Bool)
(declare-fun Tclass._module.Stream_0 (T@U) T@U)
(declare-fun DtRank (T@U) Int)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct alloc Tagclass._System.nat Tagclass._module.Tree Tagclass._module.Stream |##_module.Stream.SNil| |##_module.Stream.SCons| |##_module.Tree.Node| tytagFamily$nat tytagFamily$Tree tytagFamily$Stream)
)
(assert (forall ((o T@U) (p T@U) (r T@U) ) (!  (=> (and (|ORD#Less| o p) (|ORD#Less| p r)) (|ORD#Less| o r))
 :pattern ( (|ORD#Less| o p) (|ORD#Less| p r))
 :pattern ( (|ORD#Less| o p) (|ORD#Less| o r))
)))
(assert (forall ((o@@0 T@U) (m Int) (n Int) ) (!  (=> (and (and (<= 0 m) (<= 0 n)) (<= (+ m n) (|ORD#Offset| o@@0))) (= (|ORD#Minus| (|ORD#Minus| o@@0 (|ORD#FromNat| m)) (|ORD#FromNat| n)) (|ORD#Minus| o@@0 (|ORD#FromNat| (+ m n)))))
 :pattern ( (|ORD#Minus| (|ORD#Minus| o@@0 (|ORD#FromNat| m)) (|ORD#FromNat| n)))
)))
(assert (= (DatatypeCtorId |#_module.Stream.SNil|) |##_module.Stream.SNil|))
(assert (= (Ctor DatatypeTypeType) 3))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($ly T@U) (|n#0| Int) ) (!  (=> (or (|_module.__default.SmallTree#canCall| |n#0|) (and (< 2 $FunctionContextHeight) (<= (LitInt 0) |n#0|))) ($Is DatatypeTypeType (_module.__default.SmallTree $ly |n#0|) Tclass._module.Tree))
 :pattern ( (_module.__default.SmallTree $ly |n#0|))
))))
(assert (forall ((d T@U) ) (!  (=> ($Is DatatypeTypeType d Tclass._module.Tree) (_module.Tree.Node_q d))
 :pattern ( (_module.Tree.Node_q d) ($Is DatatypeTypeType d Tclass._module.Tree))
)))
(assert (forall ((_module.Stream$T T@U) ) (! ($Is DatatypeTypeType |#_module.Stream.SNil| (Tclass._module.Stream _module.Stream$T))
 :pattern ( ($Is DatatypeTypeType |#_module.Stream.SNil| (Tclass._module.Stream _module.Stream$T)))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($ly@@0 T@U) (|n#0@@0| Int) ) (!  (=> (or (|_module.__default.SmallTrees#canCall| |n#0@@0|) (and (< 2 $FunctionContextHeight) (<= (LitInt 0) |n#0@@0|))) ($Is DatatypeTypeType (_module.__default.SmallTrees $ly@@0 |n#0@@0|) (Tclass._module.Stream Tclass._module.Tree)))
 :pattern ( (_module.__default.SmallTrees $ly@@0 |n#0@@0|))
))))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($ly@@1 T@U) (|n#0@@1| Int) ) (!  (=> (or (|_module.__default.SmallTrees#canCall| |n#0@@1|) (and (< 2 $FunctionContextHeight) (<= (LitInt 0) |n#0@@1|))) (and (=> (or (not (= |n#0@@1| (LitInt 0))) (not true)) (and (|_module.__default.SmallTree#canCall| (- |n#0@@1| 1)) (|_module.__default.SmallTrees#canCall| |n#0@@1|))) (= (_module.__default.SmallTrees ($LS $ly@@1) |n#0@@1|) (ite (= |n#0@@1| (LitInt 0)) |#_module.Stream.SNil| (|#_module.Stream.SCons| ($Box DatatypeTypeType (_module.__default.SmallTree $ly@@1 (- |n#0@@1| 1))) (_module.__default.SmallTrees $ly@@1 |n#0@@1|))))))
 :pattern ( (_module.__default.SmallTrees ($LS $ly@@1) |n#0@@1|))
))))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (= (Ctor BoxType) 4))
(assert  (=> (<= 3 $FunctionContextHeight) (forall (($ly@@2 T@U) (|_k#0| T@U) (|s#0| T@U) (|n#0@@2| Int) ) (!  (=> (or (|_module.__default.LowerThan_h#canCall| (Lit BoxType |_k#0|) (Lit DatatypeTypeType |s#0|) (LitInt |n#0@@2|)) (and (< 3 $FunctionContextHeight) (and ($Is DatatypeTypeType |s#0| (Tclass._module.Stream Tclass._module.Tree)) (<= (LitInt 0) |n#0@@2|)))) (and (and (=> (< 0 (|ORD#Offset| |_k#0|)) (=> (not (U_2_bool (Lit boolType (bool_2_U (_module.Stream.SNil_q (Lit DatatypeTypeType |s#0|)))))) (let ((|tail#9| (Lit DatatypeTypeType (_module.Stream.tail (Lit DatatypeTypeType |s#0|)))))
(let ((|t#9| (Lit DatatypeTypeType ($Unbox DatatypeTypeType (_module.Stream.head (Lit DatatypeTypeType |s#0|))))))
 (=> (<= (LitInt 1) (LitInt |n#0@@2|)) (and (and (_module.Tree.Node_q |t#9|) (|_module.__default.LowerThan_h#canCall| (|ORD#Minus| |_k#0| (|ORD#FromNat| 1)) (_module.Tree.children |t#9|) (LitInt (- |n#0@@2| 1)))) (=> (_module.__default.LowerThan_h ($LS $ly@@2) (|ORD#Minus| |_k#0| (|ORD#FromNat| 1)) (_module.Tree.children |t#9|) (LitInt (- |n#0@@2| 1))) (|_module.__default.LowerThan_h#canCall| (|ORD#Minus| |_k#0| (|ORD#FromNat| 1)) |tail#9| (LitInt |n#0@@2|))))))))) (=> (=> (< 0 (|ORD#Offset| |_k#0|)) (ite (_module.Stream.SNil_q (Lit DatatypeTypeType |s#0|)) true (let ((|tail#10| (Lit DatatypeTypeType (_module.Stream.tail (Lit DatatypeTypeType |s#0|)))))
(let ((|t#10| (Lit DatatypeTypeType ($Unbox DatatypeTypeType (_module.Stream.head (Lit DatatypeTypeType |s#0|))))))
 (and (and (<= (LitInt 1) (LitInt |n#0@@2|)) (_module.__default.LowerThan_h ($LS $ly@@2) (|ORD#Minus| |_k#0| (|ORD#FromNat| 1)) (Lit DatatypeTypeType (_module.Tree.children |t#10|)) (LitInt (- |n#0@@2| 1)))) (_module.__default.LowerThan_h ($LS $ly@@2) (|ORD#Minus| |_k#0| (|ORD#FromNat| 1)) |tail#10| (LitInt |n#0@@2|))))))) (=> (= (LitInt 0) (|ORD#Offset| |_k#0|)) (forall ((|_k'#2| T@U) ) (!  (=> (|ORD#Less| |_k'#2| |_k#0|) (|_module.__default.LowerThan_h#canCall| |_k'#2| |s#0| |n#0@@2|))
 :pattern ( (_module.__default.LowerThan_h ($LS $ly@@2) |_k'#2| |s#0| |n#0@@2|))
))))) (= (_module.__default.LowerThan_h ($LS $ly@@2) (Lit BoxType |_k#0|) (Lit DatatypeTypeType |s#0|) (LitInt |n#0@@2|))  (and (=> (< 0 (|ORD#Offset| |_k#0|)) (ite (_module.Stream.SNil_q (Lit DatatypeTypeType |s#0|)) true (let ((|tail#8| (Lit DatatypeTypeType (_module.Stream.tail (Lit DatatypeTypeType |s#0|)))))
(let ((|t#8| (Lit DatatypeTypeType ($Unbox DatatypeTypeType (_module.Stream.head (Lit DatatypeTypeType |s#0|))))))
 (and (and (<= (LitInt 1) (LitInt |n#0@@2|)) (_module.__default.LowerThan_h ($LS $ly@@2) (|ORD#Minus| |_k#0| (|ORD#FromNat| 1)) (Lit DatatypeTypeType (_module.Tree.children |t#8|)) (LitInt (- |n#0@@2| 1)))) (_module.__default.LowerThan_h ($LS $ly@@2) (|ORD#Minus| |_k#0| (|ORD#FromNat| 1)) |tail#8| (LitInt |n#0@@2|))))))) (=> (= (LitInt 0) (|ORD#Offset| |_k#0|)) (forall ((|_k'#2@@0| T@U) ) (!  (=> (|ORD#Less| |_k'#2@@0| |_k#0|) (_module.__default.LowerThan_h ($LS $ly@@2) |_k'#2@@0| |s#0| |n#0@@2|))
 :pattern ( (_module.__default.LowerThan_h ($LS $ly@@2) |_k'#2@@0| |s#0| |n#0@@2|))
)))))))
 :weight 3
 :pattern ( (_module.__default.LowerThan_h ($LS $ly@@2) (Lit BoxType |_k#0|) (Lit DatatypeTypeType |s#0|) (LitInt |n#0@@2|)))
))))
(assert (forall ((_module.Stream$T@@0 T@U) (|a#5#0#0| T@U) (|a#5#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Stream.SCons| |a#5#0#0| |a#5#1#0|) (Tclass._module.Stream _module.Stream$T@@0))  (and ($IsBox |a#5#0#0| _module.Stream$T@@0) ($Is DatatypeTypeType |a#5#1#0| (Tclass._module.Stream _module.Stream$T@@0))))
 :pattern ( ($Is DatatypeTypeType (|#_module.Stream.SCons| |a#5#0#0| |a#5#1#0|) (Tclass._module.Stream _module.Stream$T@@0)))
)))
(assert (forall ((d@@0 T@U) ) (! (= (_module.Stream.SNil_q d@@0) (= (DatatypeCtorId d@@0) |##_module.Stream.SNil|))
 :pattern ( (_module.Stream.SNil_q d@@0))
)))
(assert (forall ((d@@1 T@U) ) (! (= (_module.Stream.SCons_q d@@1) (= (DatatypeCtorId d@@1) |##_module.Stream.SCons|))
 :pattern ( (_module.Stream.SCons_q d@@1))
)))
(assert (forall ((d@@2 T@U) ) (! (= (_module.Tree.Node_q d@@2) (= (DatatypeCtorId d@@2) |##_module.Tree.Node|))
 :pattern ( (_module.Tree.Node_q d@@2))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($ly@@3 T@U) (|n#0@@3| Int) ) (!  (=> (or (|_module.__default.SmallTree#canCall| |n#0@@3|) (and (< 2 $FunctionContextHeight) (<= (LitInt 0) |n#0@@3|))) (and (|_module.__default.SmallTrees#canCall| |n#0@@3|) (= (_module.__default.SmallTree ($LS $ly@@3) |n#0@@3|) (|#_module.Tree.Node| (_module.__default.SmallTrees $ly@@3 |n#0@@3|)))))
 :pattern ( (_module.__default.SmallTree ($LS $ly@@3) |n#0@@3|))
))))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((d@@3 T@U) ) (!  (=> (_module.Stream.SCons_q d@@3) (exists ((|a#4#0#0| T@U) (|a#4#1#0| T@U) ) (= d@@3 (|#_module.Stream.SCons| |a#4#0#0| |a#4#1#0|))))
 :pattern ( (_module.Stream.SCons_q d@@3))
)))
(assert (forall ((d@@4 T@U) ) (!  (=> (_module.Stream.SNil_q d@@4) (= d@@4 |#_module.Stream.SNil|))
 :pattern ( (_module.Stream.SNil_q d@@4))
)))
(assert (forall ((d@@5 T@U) ) (!  (=> (_module.Tree.Node_q d@@5) (exists ((|a#9#0#0| T@U) ) (= d@@5 (|#_module.Tree.Node| |a#9#0#0|))))
 :pattern ( (_module.Tree.Node_q d@@5))
)))
(assert (forall ((|x#0| T@U) ) (! (= ($Is intType |x#0| Tclass._System.nat) (<= (LitInt 0) (U_2_int |x#0|)))
 :pattern ( ($Is intType |x#0| Tclass._System.nat))
)))
(assert (forall ((_module.Stream$T@@1 T@U) ) (!  (and (= (Tag (Tclass._module.Stream _module.Stream$T@@1)) Tagclass._module.Stream) (= (TagFamily (Tclass._module.Stream _module.Stream$T@@1)) tytagFamily$Stream))
 :pattern ( (Tclass._module.Stream _module.Stream$T@@1))
)))
(assert (forall ((o@@1 T@U) (p@@0 T@U) ) (!  (=> (and (|ORD#IsNat| p@@0) (<= (|ORD#Offset| p@@0) (|ORD#Offset| o@@1))) (and (= (|ORD#IsNat| (|ORD#Minus| o@@1 p@@0)) (|ORD#IsNat| o@@1)) (= (|ORD#Offset| (|ORD#Minus| o@@1 p@@0)) (- (|ORD#Offset| o@@1) (|ORD#Offset| p@@0)))))
 :pattern ( (|ORD#Minus| o@@1 p@@0))
)))
(assert (forall ((n@@0 Int) ) (!  (=> (<= 0 n@@0) (and (|ORD#IsNat| (|ORD#FromNat| n@@0)) (= (|ORD#Offset| (|ORD#FromNat| n@@0)) n@@0)))
 :pattern ( (|ORD#FromNat| n@@0))
)))
(assert (forall ((bx T@U) ) (!  (=> ($IsBox bx Tclass._System.nat) (and (= ($Box intType ($Unbox intType bx)) bx) ($Is intType ($Unbox intType bx) Tclass._System.nat)))
 :pattern ( ($IsBox bx Tclass._System.nat))
)))
(assert (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 Tclass._module.Tree) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@0)) bx@@0) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@0) Tclass._module.Tree)))
 :pattern ( ($IsBox bx@@0 Tclass._module.Tree))
)))
(assert (forall ((o@@2 T@U) (p@@1 T@U) ) (!  (or (or (|ORD#Less| o@@2 p@@1) (= o@@2 p@@1)) (|ORD#Less| p@@1 o@@2))
 :pattern ( (|ORD#Less| o@@2 p@@1) (|ORD#Less| p@@1 o@@2))
)))
(assert (forall ((|a#10#0#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Tree.Node| |a#10#0#0|) Tclass._module.Tree) ($Is DatatypeTypeType |a#10#0#0| (Tclass._module.Stream Tclass._module.Tree)))
 :pattern ( ($Is DatatypeTypeType (|#_module.Tree.Node| |a#10#0#0|) Tclass._module.Tree))
)))
(assert  (=> (<= 3 $FunctionContextHeight) (forall (($ly@@4 T@U) (|_k#0@@0| T@U) (|s#0@@0| T@U) (|n#0@@4| Int) ) (!  (=> (or (|_module.__default.LowerThan_h#canCall| (Lit BoxType |_k#0@@0|) |s#0@@0| |n#0@@4|) (and (< 3 $FunctionContextHeight) (and ($Is DatatypeTypeType |s#0@@0| (Tclass._module.Stream Tclass._module.Tree)) (<= (LitInt 0) |n#0@@4|)))) (and (and (=> (< 0 (|ORD#Offset| |_k#0@@0|)) (=> (not (_module.Stream.SNil_q |s#0@@0|)) (let ((|tail#6| (_module.Stream.tail |s#0@@0|)))
(let ((|t#6| ($Unbox DatatypeTypeType (_module.Stream.head |s#0@@0|))))
 (=> (<= (LitInt 1) |n#0@@4|) (and (and (_module.Tree.Node_q |t#6|) (|_module.__default.LowerThan_h#canCall| (|ORD#Minus| |_k#0@@0| (|ORD#FromNat| 1)) (_module.Tree.children |t#6|) (- |n#0@@4| 1))) (=> (_module.__default.LowerThan_h ($LS $ly@@4) (|ORD#Minus| |_k#0@@0| (|ORD#FromNat| 1)) (_module.Tree.children |t#6|) (- |n#0@@4| 1)) (|_module.__default.LowerThan_h#canCall| (|ORD#Minus| |_k#0@@0| (|ORD#FromNat| 1)) |tail#6| |n#0@@4|)))))))) (=> (=> (< 0 (|ORD#Offset| |_k#0@@0|)) (ite (_module.Stream.SNil_q |s#0@@0|) true (let ((|tail#7| (_module.Stream.tail |s#0@@0|)))
(let ((|t#7| ($Unbox DatatypeTypeType (_module.Stream.head |s#0@@0|))))
 (and (and (<= (LitInt 1) |n#0@@4|) (_module.__default.LowerThan_h ($LS $ly@@4) (|ORD#Minus| |_k#0@@0| (|ORD#FromNat| 1)) (_module.Tree.children |t#7|) (- |n#0@@4| 1))) (_module.__default.LowerThan_h ($LS $ly@@4) (|ORD#Minus| |_k#0@@0| (|ORD#FromNat| 1)) |tail#7| |n#0@@4|)))))) (=> (= (LitInt 0) (|ORD#Offset| |_k#0@@0|)) (forall ((|_k'#1| T@U) ) (!  (=> (|ORD#Less| |_k'#1| |_k#0@@0|) (|_module.__default.LowerThan_h#canCall| |_k'#1| |s#0@@0| |n#0@@4|))
 :pattern ( (_module.__default.LowerThan_h ($LS $ly@@4) |_k'#1| |s#0@@0| |n#0@@4|))
))))) (= (_module.__default.LowerThan_h ($LS $ly@@4) (Lit BoxType |_k#0@@0|) |s#0@@0| |n#0@@4|)  (and (=> (< 0 (|ORD#Offset| |_k#0@@0|)) (ite (_module.Stream.SNil_q |s#0@@0|) true (let ((|tail#5| (_module.Stream.tail |s#0@@0|)))
(let ((|t#5| ($Unbox DatatypeTypeType (_module.Stream.head |s#0@@0|))))
 (and (and (<= (LitInt 1) |n#0@@4|) (_module.__default.LowerThan_h ($LS $ly@@4) (|ORD#Minus| |_k#0@@0| (|ORD#FromNat| 1)) (_module.Tree.children |t#5|) (- |n#0@@4| 1))) (_module.__default.LowerThan_h ($LS $ly@@4) (|ORD#Minus| |_k#0@@0| (|ORD#FromNat| 1)) |tail#5| |n#0@@4|)))))) (=> (= (LitInt 0) (|ORD#Offset| |_k#0@@0|)) (forall ((|_k'#1@@0| T@U) ) (!  (=> (|ORD#Less| |_k'#1@@0| |_k#0@@0|) (_module.__default.LowerThan_h ($LS $ly@@4) |_k'#1@@0| |s#0@@0| |n#0@@4|))
 :pattern ( (_module.__default.LowerThan_h ($LS $ly@@4) |_k'#1@@0| |s#0@@0| |n#0@@4|))
)))))))
 :weight 3
 :pattern ( (_module.__default.LowerThan_h ($LS $ly@@4) (Lit BoxType |_k#0@@0|) |s#0@@0| |n#0@@4|))
))))
(assert (forall ((_module.Stream$T@@2 T@U) (d@@6 T@U) ) (!  (=> ($Is DatatypeTypeType d@@6 (Tclass._module.Stream _module.Stream$T@@2)) (or (_module.Stream.SNil_q d@@6) (_module.Stream.SCons_q d@@6)))
 :pattern ( (_module.Stream.SCons_q d@@6) ($Is DatatypeTypeType d@@6 (Tclass._module.Stream _module.Stream$T@@2)))
 :pattern ( (_module.Stream.SNil_q d@@6) ($Is DatatypeTypeType d@@6 (Tclass._module.Stream _module.Stream$T@@2)))
)))
(assert (forall ((v T@U) (t T@U) (T@@1 T@T) ) (! (= ($IsBox ($Box T@@1 v) t) ($Is T@@1 v t))
 :pattern ( ($IsBox ($Box T@@1 v) t))
)))
(assert  (=> (<= 3 $FunctionContextHeight) (forall (($ly@@5 T@U) (|_k#0@@1| T@U) (|s#0@@1| T@U) (|n#0@@5| Int) ) (!  (=> (or (|_module.__default.LowerThan_h#canCall| |_k#0@@1| |s#0@@1| |n#0@@5|) (and (< 3 $FunctionContextHeight) (and ($Is DatatypeTypeType |s#0@@1| (Tclass._module.Stream Tclass._module.Tree)) (<= (LitInt 0) |n#0@@5|)))) (and (and (=> (< 0 (|ORD#Offset| |_k#0@@1|)) (=> (not (_module.Stream.SNil_q |s#0@@1|)) (let ((|tail#3| (_module.Stream.tail |s#0@@1|)))
(let ((|t#3| ($Unbox DatatypeTypeType (_module.Stream.head |s#0@@1|))))
 (=> (<= (LitInt 1) |n#0@@5|) (and (and (_module.Tree.Node_q |t#3|) (|_module.__default.LowerThan_h#canCall| (|ORD#Minus| |_k#0@@1| (|ORD#FromNat| 1)) (_module.Tree.children |t#3|) (- |n#0@@5| 1))) (=> (_module.__default.LowerThan_h $ly@@5 (|ORD#Minus| |_k#0@@1| (|ORD#FromNat| 1)) (_module.Tree.children |t#3|) (- |n#0@@5| 1)) (|_module.__default.LowerThan_h#canCall| (|ORD#Minus| |_k#0@@1| (|ORD#FromNat| 1)) |tail#3| |n#0@@5|)))))))) (=> (=> (< 0 (|ORD#Offset| |_k#0@@1|)) (ite (_module.Stream.SNil_q |s#0@@1|) true (let ((|tail#4| (_module.Stream.tail |s#0@@1|)))
(let ((|t#4| ($Unbox DatatypeTypeType (_module.Stream.head |s#0@@1|))))
 (and (and (<= (LitInt 1) |n#0@@5|) (_module.__default.LowerThan_h $ly@@5 (|ORD#Minus| |_k#0@@1| (|ORD#FromNat| 1)) (_module.Tree.children |t#4|) (- |n#0@@5| 1))) (_module.__default.LowerThan_h $ly@@5 (|ORD#Minus| |_k#0@@1| (|ORD#FromNat| 1)) |tail#4| |n#0@@5|)))))) (=> (= (LitInt 0) (|ORD#Offset| |_k#0@@1|)) (forall ((|_k'#0| T@U) ) (!  (=> (|ORD#Less| |_k'#0| |_k#0@@1|) (|_module.__default.LowerThan_h#canCall| |_k'#0| |s#0@@1| |n#0@@5|))
 :pattern ( (_module.__default.LowerThan_h $ly@@5 |_k'#0| |s#0@@1| |n#0@@5|))
))))) (= (_module.__default.LowerThan_h ($LS $ly@@5) |_k#0@@1| |s#0@@1| |n#0@@5|)  (and (=> (< 0 (|ORD#Offset| |_k#0@@1|)) (ite (_module.Stream.SNil_q |s#0@@1|) true (let ((|tail#2| (_module.Stream.tail |s#0@@1|)))
(let ((|t#2| ($Unbox DatatypeTypeType (_module.Stream.head |s#0@@1|))))
 (and (and (<= (LitInt 1) |n#0@@5|) (_module.__default.LowerThan_h $ly@@5 (|ORD#Minus| |_k#0@@1| (|ORD#FromNat| 1)) (_module.Tree.children |t#2|) (- |n#0@@5| 1))) (_module.__default.LowerThan_h $ly@@5 (|ORD#Minus| |_k#0@@1| (|ORD#FromNat| 1)) |tail#2| |n#0@@5|)))))) (=> (= (LitInt 0) (|ORD#Offset| |_k#0@@1|)) (forall ((|_k'#0@@0| T@U) ) (!  (=> (|ORD#Less| |_k'#0@@0| |_k#0@@1|) (_module.__default.LowerThan_h $ly@@5 |_k'#0@@0| |s#0@@1| |n#0@@5|))
 :pattern ( (_module.__default.LowerThan_h $ly@@5 |_k'#0@@0| |s#0@@1| |n#0@@5|))
)))))))
 :pattern ( (_module.__default.LowerThan_h ($LS $ly@@5) |_k#0@@1| |s#0@@1| |n#0@@5|))
))))
(assert (forall (($ly@@6 T@U) (|_k#0@@2| T@U) (|s#0@@2| T@U) (|n#0@@6| Int) ) (! (= (_module.__default.LowerThan_h ($LS $ly@@6) |_k#0@@2| |s#0@@2| |n#0@@6|) (_module.__default.LowerThan_h $ly@@6 |_k#0@@2| |s#0@@2| |n#0@@6|))
 :pattern ( (_module.__default.LowerThan_h ($LS $ly@@6) |_k#0@@2| |s#0@@2| |n#0@@6|))
)))
(assert (forall ((o@@3 T@U) ) (! (<= 0 (|ORD#Offset| o@@3))
 :pattern ( (|ORD#Offset| o@@3))
)))
(assert (forall ((|a#3#0#0| T@U) (|a#3#1#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Stream.SCons| |a#3#0#0| |a#3#1#0|)) |##_module.Stream.SCons|)
 :pattern ( (|#_module.Stream.SCons| |a#3#0#0| |a#3#1#0|))
)))
(assert (forall ((|a#6#0#0| T@U) (|a#6#1#0| T@U) ) (! (= (_module.Stream.head (|#_module.Stream.SCons| |a#6#0#0| |a#6#1#0|)) |a#6#0#0|)
 :pattern ( (|#_module.Stream.SCons| |a#6#0#0| |a#6#1#0|))
)))
(assert (forall ((|a#7#0#0| T@U) (|a#7#1#0| T@U) ) (! (= (_module.Stream.tail (|#_module.Stream.SCons| |a#7#0#0| |a#7#1#0|)) |a#7#1#0|)
 :pattern ( (|#_module.Stream.SCons| |a#7#0#0| |a#7#1#0|))
)))
(assert (forall ((_module.Stream$T@@3 T@U) ) (! (= (Tclass._module.Stream_0 (Tclass._module.Stream _module.Stream$T@@3)) _module.Stream$T@@3)
 :pattern ( (Tclass._module.Stream _module.Stream$T@@3))
)))
(assert (forall ((|a#8#0#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Tree.Node| |a#8#0#0|)) |##_module.Tree.Node|)
 :pattern ( (|#_module.Tree.Node| |a#8#0#0|))
)))
(assert (forall ((|a#12#0#0| T@U) ) (! (= (_module.Tree.children (|#_module.Tree.Node| |a#12#0#0|)) |a#12#0#0|)
 :pattern ( (|#_module.Tree.Node| |a#12#0#0|))
)))
(assert (forall ((x@@5 T@U) (T@@2 T@T) ) (! (= ($Unbox T@@2 ($Box T@@2 x@@5)) x@@5)
 :pattern ( ($Box T@@2 x@@5))
)))
(assert (forall ((o@@4 T@U) (p@@2 T@U) ) (!  (and (and (and (=> (|ORD#Less| o@@4 p@@2) (or (not (= o@@4 p@@2)) (not true))) (=> (and (|ORD#IsNat| o@@4) (not (|ORD#IsNat| p@@2))) (|ORD#Less| o@@4 p@@2))) (=> (and (|ORD#IsNat| o@@4) (|ORD#IsNat| p@@2)) (= (|ORD#Less| o@@4 p@@2) (< (|ORD#Offset| o@@4) (|ORD#Offset| p@@2))))) (=> (and (|ORD#Less| o@@4 p@@2) (|ORD#IsNat| p@@2)) (|ORD#IsNat| o@@4)))
 :pattern ( (|ORD#Less| o@@4 p@@2))
)))
(assert (forall (($ly@@7 T@U) (|n#0@@7| Int) ) (! (= (_module.__default.SmallTree ($LS $ly@@7) |n#0@@7|) (_module.__default.SmallTree $ly@@7 |n#0@@7|))
 :pattern ( (_module.__default.SmallTree ($LS $ly@@7) |n#0@@7|))
)))
(assert (forall (($ly@@8 T@U) (|n#0@@8| Int) ) (! (= (_module.__default.SmallTrees ($LS $ly@@8) |n#0@@8|) (_module.__default.SmallTrees $ly@@8 |n#0@@8|))
 :pattern ( (_module.__default.SmallTrees ($LS $ly@@8) |n#0@@8|))
)))
(assert (forall ((|a#13#0#0| T@U) ) (! (< (DtRank |a#13#0#0|) (DtRank (|#_module.Tree.Node| |a#13#0#0|)))
 :pattern ( (|#_module.Tree.Node| |a#13#0#0|))
)))
(assert  (and (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (t2 T@T) (val T@U) (m@@0 T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0 t1 t2 (MapType0Store t0 t1 t2 m@@0 x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@1 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@1 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@1 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@2 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@2 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@2 y0@@0 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 5)) (= (Ctor FieldType) 6)) (forall ((t0@@0 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@3 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 (MapType1Store t0@@0 t1@@0 m@@3 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@4 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@4 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@4 y0@@1)))
 :weight 0
))) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((_module.Stream$T@@4 T@U) (bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 (Tclass._module.Stream _module.Stream$T@@4)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@1)) bx@@1) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@1) (Tclass._module.Stream _module.Stream$T@@4))))
 :pattern ( ($IsBox bx@@1 (Tclass._module.Stream _module.Stream$T@@4)))
)))
(assert (forall ((o@@5 T@U) ) (!  (=> (|ORD#IsNat| o@@5) (= o@@5 (|ORD#FromNat| (|ORD#Offset| o@@5))))
 :pattern ( (|ORD#Offset| o@@5))
 :pattern ( (|ORD#IsNat| o@@5))
)))
(assert (= (Tag Tclass._System.nat) Tagclass._System.nat))
(assert (= (TagFamily Tclass._System.nat) tytagFamily$nat))
(assert (= (Tag Tclass._module.Tree) Tagclass._module.Tree))
(assert (= (TagFamily Tclass._module.Tree) tytagFamily$Tree))
(assert (forall ((o@@6 T@U) (p@@3 T@U) ) (!  (=> (and (|ORD#IsNat| p@@3) (<= (|ORD#Offset| p@@3) (|ORD#Offset| o@@6))) (or (and (= p@@3 (|ORD#FromNat| 0)) (= (|ORD#Minus| o@@6 p@@3) o@@6)) (and (or (not (= p@@3 (|ORD#FromNat| 0))) (not true)) (|ORD#Less| (|ORD#Minus| o@@6 p@@3) o@@6))))
 :pattern ( (|ORD#Minus| o@@6 p@@3))
)))
(assert  (=> (<= 3 $FunctionContextHeight) (forall (($ly@@9 T@U) (|s#0@@3| T@U) (|n#0@@9| Int) (|_k#0@@3| T@U) ) (!  (=> (and (and ($Is DatatypeTypeType |s#0@@3| (Tclass._module.Stream Tclass._module.Tree)) (<= (LitInt 0) |n#0@@9|)) (= |_k#0@@3| (|ORD#FromNat| 0))) (_module.__default.LowerThan_h $ly@@9 |_k#0@@3| |s#0@@3| |n#0@@9|))
 :pattern ( (_module.__default.LowerThan_h $ly@@9 |_k#0@@3| |s#0@@3| |n#0@@9|))
))))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((|a#11#0#0| T@U) ) (! (= (|#_module.Tree.Node| (Lit DatatypeTypeType |a#11#0#0|)) (Lit DatatypeTypeType (|#_module.Tree.Node| |a#11#0#0|)))
 :pattern ( (|#_module.Tree.Node| (Lit DatatypeTypeType |a#11#0#0|)))
)))
(assert (forall ((x@@7 T@U) (T@@3 T@T) ) (! (= ($Box T@@3 (Lit T@@3 x@@7)) (Lit BoxType ($Box T@@3 x@@7)))
 :pattern ( ($Box T@@3 (Lit T@@3 x@@7)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |_k#0@@4| () T@U)
(declare-fun $LZ () T@U)
(declare-fun |n#1| () Int)
(declare-fun |_k##0@0| () T@U)
(declare-fun |n##0@0| () Int)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $Heap@2 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun $Heap@0 () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $Heap () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 15) (let ((GeneratedUnifiedExit_correct  (and (=> (= (ControlFlow 0 2) (- 0 6)) (=> (|_module.__default.LowerThan_h#canCall| |_k#0@@4| (_module.__default.SmallTrees ($LS $LZ) |n#1|) |n#1|) (or (_module.__default.LowerThan_h ($LS $LZ) |_k#0@@4| (_module.__default.SmallTrees ($LS $LZ) |n#1|) |n#1|) (=> (< 0 (|ORD#Offset| |_k#0@@4|)) (=> (_module.Stream.SNil_q (_module.__default.SmallTrees ($LS $LZ) |n#1|)) (U_2_bool (Lit boolType (bool_2_U true)))))))) (=> (=> (|_module.__default.LowerThan_h#canCall| |_k#0@@4| (_module.__default.SmallTrees ($LS $LZ) |n#1|) |n#1|) (or (_module.__default.LowerThan_h ($LS $LZ) |_k#0@@4| (_module.__default.SmallTrees ($LS $LZ) |n#1|) |n#1|) (=> (< 0 (|ORD#Offset| |_k#0@@4|)) (=> (_module.Stream.SNil_q (_module.__default.SmallTrees ($LS $LZ) |n#1|)) (U_2_bool (Lit boolType (bool_2_U true))))))) (and (=> (= (ControlFlow 0 2) (- 0 5)) (=> (|_module.__default.LowerThan_h#canCall| |_k#0@@4| (_module.__default.SmallTrees ($LS $LZ) |n#1|) |n#1|) (or (_module.__default.LowerThan_h ($LS $LZ) |_k#0@@4| (_module.__default.SmallTrees ($LS $LZ) |n#1|) |n#1|) (=> (< 0 (|ORD#Offset| |_k#0@@4|)) (=> (not (_module.Stream.SNil_q (_module.__default.SmallTrees ($LS $LZ) |n#1|))) (<= (LitInt 1) |n#1|)))))) (=> (=> (|_module.__default.LowerThan_h#canCall| |_k#0@@4| (_module.__default.SmallTrees ($LS $LZ) |n#1|) |n#1|) (or (_module.__default.LowerThan_h ($LS $LZ) |_k#0@@4| (_module.__default.SmallTrees ($LS $LZ) |n#1|) |n#1|) (=> (< 0 (|ORD#Offset| |_k#0@@4|)) (=> (not (_module.Stream.SNil_q (_module.__default.SmallTrees ($LS $LZ) |n#1|))) (<= (LitInt 1) |n#1|))))) (and (=> (= (ControlFlow 0 2) (- 0 4)) (=> (|_module.__default.LowerThan_h#canCall| |_k#0@@4| (_module.__default.SmallTrees ($LS $LZ) |n#1|) |n#1|) (or (_module.__default.LowerThan_h ($LS $LZ) |_k#0@@4| (_module.__default.SmallTrees ($LS $LZ) |n#1|) |n#1|) (=> (< 0 (|ORD#Offset| |_k#0@@4|)) (=> (not (_module.Stream.SNil_q (_module.__default.SmallTrees ($LS $LZ) |n#1|))) (let ((|t#4@@0| ($Unbox DatatypeTypeType (_module.Stream.head (_module.__default.SmallTrees ($LS ($LS $LZ)) |n#1|)))))
(_module.__default.LowerThan_h ($LS ($LS $LZ)) (|ORD#Minus| |_k#0@@4| (|ORD#FromNat| 1)) (_module.Tree.children |t#4@@0|) (- |n#1| 1)))))))) (=> (=> (|_module.__default.LowerThan_h#canCall| |_k#0@@4| (_module.__default.SmallTrees ($LS $LZ) |n#1|) |n#1|) (or (_module.__default.LowerThan_h ($LS $LZ) |_k#0@@4| (_module.__default.SmallTrees ($LS $LZ) |n#1|) |n#1|) (=> (< 0 (|ORD#Offset| |_k#0@@4|)) (=> (not (_module.Stream.SNil_q (_module.__default.SmallTrees ($LS $LZ) |n#1|))) (let ((|t#4@@1| ($Unbox DatatypeTypeType (_module.Stream.head (_module.__default.SmallTrees ($LS ($LS $LZ)) |n#1|)))))
(_module.__default.LowerThan_h ($LS ($LS $LZ)) (|ORD#Minus| |_k#0@@4| (|ORD#FromNat| 1)) (_module.Tree.children |t#4@@1|) (- |n#1| 1))))))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (=> (|_module.__default.LowerThan_h#canCall| |_k#0@@4| (_module.__default.SmallTrees ($LS $LZ) |n#1|) |n#1|) (or (_module.__default.LowerThan_h ($LS $LZ) |_k#0@@4| (_module.__default.SmallTrees ($LS $LZ) |n#1|) |n#1|) (=> (< 0 (|ORD#Offset| |_k#0@@4|)) (=> (not (_module.Stream.SNil_q (_module.__default.SmallTrees ($LS $LZ) |n#1|))) (let ((|tail#4@@0| (_module.Stream.tail (_module.__default.SmallTrees ($LS ($LS $LZ)) |n#1|))))
(_module.__default.LowerThan_h ($LS ($LS $LZ)) (|ORD#Minus| |_k#0@@4| (|ORD#FromNat| 1)) |tail#4@@0| |n#1|))))))) (=> (=> (|_module.__default.LowerThan_h#canCall| |_k#0@@4| (_module.__default.SmallTrees ($LS $LZ) |n#1|) |n#1|) (or (_module.__default.LowerThan_h ($LS $LZ) |_k#0@@4| (_module.__default.SmallTrees ($LS $LZ) |n#1|) |n#1|) (=> (< 0 (|ORD#Offset| |_k#0@@4|)) (=> (not (_module.Stream.SNil_q (_module.__default.SmallTrees ($LS $LZ) |n#1|))) (let ((|tail#4@@1| (_module.Stream.tail (_module.__default.SmallTrees ($LS ($LS $LZ)) |n#1|))))
(_module.__default.LowerThan_h ($LS ($LS $LZ)) (|ORD#Minus| |_k#0@@4| (|ORD#FromNat| 1)) |tail#4@@1| |n#1|)))))) (=> (= (ControlFlow 0 2) (- 0 1)) (=> (|_module.__default.LowerThan_h#canCall| |_k#0@@4| (_module.__default.SmallTrees ($LS $LZ) |n#1|) |n#1|) (or (_module.__default.LowerThan_h ($LS $LZ) |_k#0@@4| (_module.__default.SmallTrees ($LS $LZ) |n#1|) |n#1|) (=> (= (LitInt 0) (|ORD#Offset| |_k#0@@4|)) (forall ((|_k'#1@@1| T@U) ) (!  (=> (|ORD#Less| |_k'#1@@1| |_k#0@@4|) (_module.__default.LowerThan_h ($LS ($LS $LZ)) |_k'#1@@1| (_module.__default.SmallTrees ($LS ($LS $LZ)) |n#1|) |n#1|))
 :pattern ( (_module.__default.LowerThan_h ($LS ($LS $LZ)) |_k'#1@@1| (_module.__default.SmallTrees ($LS ($LS $LZ)) |n#1|) |n#1|))
))))))))))))))))
(let ((anon6_Else_correct  (=> (and (<= |n#1| 0) (= (ControlFlow 0 12) 2)) GeneratedUnifiedExit_correct)))
(let ((anon6_Then_correct  (=> (< 0 |n#1|) (and (=> (= (ControlFlow 0 8) (- 0 11)) (|ORD#IsNat| (Lit BoxType (|ORD#FromNat| 1)))) (=> (|ORD#IsNat| (Lit BoxType (|ORD#FromNat| 1))) (and (=> (= (ControlFlow 0 8) (- 0 10)) (<= (|ORD#Offset| (Lit BoxType (|ORD#FromNat| 1))) (|ORD#Offset| |_k#0@@4|))) (=> (<= (|ORD#Offset| (Lit BoxType (|ORD#FromNat| 1))) (|ORD#Offset| |_k#0@@4|)) (=> (= |_k##0@0| (|ORD#Minus| |_k#0@@4| (|ORD#FromNat| 1))) (and (=> (= (ControlFlow 0 8) (- 0 9)) ($Is intType (int_2_U (- |n#1| 1)) Tclass._System.nat)) (=> ($Is intType (int_2_U (- |n#1| 1)) Tclass._System.nat) (=> (= |n##0@0| (- |n#1| 1)) (=> (and (and (and ($IsGoodHeap $Heap@2) ($IsHeapAnchor $Heap@2)) (and (|_module.__default.SmallTrees#canCall| |n##0@0|) (|_module.__default.LowerThan_h#canCall| |_k##0@0| (_module.__default.SmallTrees ($LS $LZ) |n##0@0|) |n##0@0|))) (and (and (|_module.__default.LowerThan_h#canCall| |_k##0@0| (_module.__default.SmallTrees ($LS $LZ) |n##0@0|) |n##0@0|) (and (_module.__default.LowerThan_h ($LS $LZ) |_k##0@0| (_module.__default.SmallTrees ($LS $LZ) |n##0@0|) |n##0@0|) (and (=> (< 0 (|ORD#Offset| |_k##0@0|)) (ite (_module.Stream.SNil_q (_module.__default.SmallTrees ($LS $LZ) |n##0@0|)) true (let ((|tail#3@@0| (_module.Stream.tail (_module.__default.SmallTrees ($LS $LZ) |n##0@0|))))
(let ((|t#3@@0| ($Unbox DatatypeTypeType (_module.Stream.head (_module.__default.SmallTrees ($LS $LZ) |n##0@0|)))))
 (and (and (<= (LitInt 1) |n##0@0|) (_module.__default.LowerThan_h ($LS $LZ) (|ORD#Minus| |_k##0@0| (|ORD#FromNat| 1)) (_module.Tree.children |t#3@@0|) (- |n##0@0| 1))) (_module.__default.LowerThan_h ($LS $LZ) (|ORD#Minus| |_k##0@0| (|ORD#FromNat| 1)) |tail#3@@0| |n##0@0|)))))) (=> (= (LitInt 0) (|ORD#Offset| |_k##0@0|)) (forall ((|_k'#0@@1| T@U) ) (!  (=> (|ORD#Less| |_k'#0@@1| |_k##0@0|) (_module.__default.LowerThan_h ($LS $LZ) |_k'#0@@1| (_module.__default.SmallTrees ($LS $LZ) |n##0@0|) |n##0@0|))
 :pattern ( (_module.__default.LowerThan_h ($LS $LZ) |_k'#0@@1| (_module.__default.SmallTrees ($LS $LZ) |n##0@0|) |n##0@0|))
)))))) (and (= $Heap@0 $Heap@2) (= (ControlFlow 0 8) 2)))) GeneratedUnifiedExit_correct))))))))))))
(let ((anon5_Then_correct  (=> (< 0 (|ORD#Offset| |_k#0@@4|)) (and (=> (= (ControlFlow 0 13) 8) anon6_Then_correct) (=> (= (ControlFlow 0 13) 12) anon6_Else_correct)))))
(let ((anon5_Else_correct  (=> (<= (|ORD#Offset| |_k#0@@4|) 0) (=> (and (and (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1)) (= $Heap@0 $Heap@1)) (and (forall ((|_k'#2@@1| T@U) (|n#2| Int) ) (!  (=> (and (<= (LitInt 0) |n#2|) (|ORD#Less| |_k'#2@@1| |_k#0@@4|)) (_module.__default.LowerThan_h ($LS $LZ) |_k'#2@@1| (_module.__default.SmallTrees ($LS $LZ) |n#2|) |n#2|))
 :pattern ( (_module.__default.SmallTrees ($LS $LZ) |n#2|) (|ORD#Less| |_k'#2@@1| |_k#0@@4|))
)) (= (ControlFlow 0 7) 2))) GeneratedUnifiedExit_correct))))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (=> (and (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (and (= $Heap $Heap@0) (forall ((|$ih#_k0#0| T@U) (|$ih#n0#0| Int) ) (!  (=> (and (and (<= (LitInt 0) |$ih#n0#0|) (U_2_bool (Lit boolType (bool_2_U true)))) (or (|ORD#Less| |$ih#_k0#0| |_k#0@@4|) (and (= |$ih#_k0#0| |_k#0@@4|) (and (<= 0 |$ih#n0#0|) (< |$ih#n0#0| |n#1|))))) (_module.__default.LowerThan_h ($LS $LZ) |$ih#_k0#0| (_module.__default.SmallTrees ($LS $LZ) |$ih#n0#0|) |$ih#n0#0|))
 :pattern ( (_module.__default.LowerThan_h ($LS $LZ) |$ih#_k0#0| (_module.__default.SmallTrees ($LS $LZ) |$ih#n0#0|) |$ih#n0#0|))
)))) (and (=> (= (ControlFlow 0 14) 13) anon5_Then_correct) (=> (= (ControlFlow 0 14) 7) anon5_Else_correct))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (<= (LitInt 0) |n#1|)) (and (= 4 $FunctionContextHeight) (= (ControlFlow 0 15) 14))) anon0_correct)))
PreconditionGeneratedEntry_correct))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
