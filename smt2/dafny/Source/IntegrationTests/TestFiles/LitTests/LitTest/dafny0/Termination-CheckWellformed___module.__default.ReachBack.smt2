(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 (T@T) Int)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Bool) T@U)
(declare-fun $generated@@9 (T@U) Bool)
(declare-fun $generated@@10 (Int) T@U)
(declare-fun $generated@@11 (T@U) Int)
(declare-fun $generated@@12 (Real) T@U)
(declare-fun $generated@@13 (T@U) Real)
(declare-fun $generated@@20 (T@U) T@U)
(declare-fun $generated@@21 () Int)
(declare-fun $generated@@22 (T@U Int) Bool)
(declare-fun $generated@@23 (T@U) T@U)
(declare-fun $generated@@24 (Int) Bool)
(declare-fun $generated@@25 (Int) Int)
(declare-fun $generated@@31 (T@T T@U) T@U)
(declare-fun $generated@@38 (T@T T@U) T@U)
(declare-fun $generated@@39 (T@T T@U) T@U)
(declare-fun $generated@@48 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 () T@T)
(declare-fun $generated@@51 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@52 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@53 () T@T)
(declare-fun $generated@@54 (T@T T@T) T@T)
(declare-fun $generated@@55 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@56 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@57 (T@T) T@T)
(declare-fun $generated@@58 (T@T) T@T)
(declare-fun $generated@@110 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@115 (T@T T@U T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@4 $generated@@5) 0) (= ($generated@@4 $generated@@6) 1)) (= ($generated@@4 $generated@@7) 2)) (forall (($generated@@14 Bool) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Int) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Real) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3)
)
(assert (= ($generated@@20 $generated) $generated@@1))
(assert (= ($generated@@20 $generated@@0) $generated@@2))
(assert  (=> (<= 0 $generated@@21) (forall (($generated@@26 T@U) ($generated@@27 Int) ) (!  (=> (or ($generated@@24 $generated@@27) (and (< 0 $generated@@21) (<= ($generated@@25 0) $generated@@27))) (and (forall (($generated@@28 Int) ) (!  (=> (<= ($generated@@25 0) $generated@@28) (=> (< $generated@@28 $generated@@27) ($generated@@24 $generated@@28)))
 :pattern ( ($generated@@22 $generated@@26 $generated@@28))
)) (= ($generated@@22 ($generated@@23 $generated@@26) $generated@@27) (forall (($generated@@29 Int) ) (!  (=> (and (<= ($generated@@25 0) $generated@@29) (< $generated@@29 $generated@@27)) ($generated@@22 $generated@@26 $generated@@29))
 :pattern ( ($generated@@22 $generated@@26 $generated@@29))
)))))
 :pattern ( ($generated@@22 ($generated@@23 $generated@@26) $generated@@27))
))))
(assert (forall (($generated@@30 Int) ) (! (= ($generated@@25 $generated@@30) $generated@@30)
 :pattern ( ($generated@@25 $generated@@30))
)))
(assert (forall (($generated@@32 T@U) ($generated@@33 T@T) ) (! (= ($generated@@31 $generated@@33 $generated@@32) $generated@@32)
 :pattern ( ($generated@@31 $generated@@33 $generated@@32))
)))
(assert  (=> (<= 0 $generated@@21) (forall (($generated@@34 T@U) ($generated@@35 Int) ) (!  (=> (or ($generated@@24 ($generated@@25 $generated@@35)) (and (< 0 $generated@@21) (<= ($generated@@25 0) ($generated@@25 $generated@@35)))) (and (forall (($generated@@36 Int) ) (!  (=> (<= ($generated@@25 0) $generated@@36) (=> (< $generated@@36 $generated@@35) ($generated@@24 $generated@@36)))
 :pattern ( ($generated@@22 ($generated@@23 $generated@@34) $generated@@36))
)) (= ($generated@@22 ($generated@@23 $generated@@34) ($generated@@25 $generated@@35)) (forall (($generated@@37 Int) ) (!  (=> (and (<= ($generated@@25 0) $generated@@37) (< $generated@@37 $generated@@35)) ($generated@@22 ($generated@@23 $generated@@34) $generated@@37))
 :pattern ( ($generated@@22 ($generated@@23 $generated@@34) $generated@@37))
)))))
 :weight 3
 :pattern ( ($generated@@22 ($generated@@23 $generated@@34) ($generated@@25 $generated@@35)))
))))
(assert (forall (($generated@@40 T@U) ($generated@@41 T@T) ) (! (= ($generated@@39 $generated@@41 ($generated@@38 $generated@@41 $generated@@40)) $generated@@40)
 :pattern ( ($generated@@38 $generated@@41 $generated@@40))
)))
(assert  (=> (<= 0 $generated@@21) (forall (($generated@@42 T@U) ($generated@@43 Int) ) (!  (=> (or ($generated@@24 $generated@@43) (and (< 0 $generated@@21) (<= ($generated@@25 0) $generated@@43))) ($generated@@22 $generated@@42 $generated@@43))
 :pattern ( ($generated@@22 $generated@@42 $generated@@43))
))))
(assert (forall (($generated@@44 T@U) ($generated@@45 Int) ) (! (= ($generated@@22 ($generated@@23 $generated@@44) $generated@@45) ($generated@@22 $generated@@44 $generated@@45))
 :pattern ( ($generated@@22 ($generated@@23 $generated@@44) $generated@@45))
)))
(assert (forall (($generated@@46 T@U) ($generated@@47 T@T) ) (! (= ($generated@@38 $generated@@47 ($generated@@39 $generated@@47 $generated@@46)) $generated@@46)
 :pattern ( ($generated@@39 $generated@@47 $generated@@46))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@59 T@T) ($generated@@60 T@T) ($generated@@61 T@T) ($generated@@62 T@U) ($generated@@63 T@U) ($generated@@64 T@U) ($generated@@65 T@U) ) (! (= ($generated@@48 $generated@@59 $generated@@60 $generated@@61 ($generated@@55 $generated@@59 $generated@@60 $generated@@61 $generated@@63 $generated@@64 $generated@@65 $generated@@62) $generated@@64 $generated@@65) $generated@@62)
 :weight 0
)) (and (forall (($generated@@66 T@T) ($generated@@67 T@T) ($generated@@68 T@T) ($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@U) ) (!  (or (= $generated@@71 $generated@@73) (= ($generated@@48 $generated@@66 $generated@@67 $generated@@68 ($generated@@55 $generated@@66 $generated@@67 $generated@@68 $generated@@70 $generated@@71 $generated@@72 $generated@@69) $generated@@73 $generated@@74) ($generated@@48 $generated@@66 $generated@@67 $generated@@68 $generated@@70 $generated@@73 $generated@@74)))
 :weight 0
)) (forall (($generated@@75 T@T) ($generated@@76 T@T) ($generated@@77 T@T) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ) (!  (or (= $generated@@81 $generated@@83) (= ($generated@@48 $generated@@75 $generated@@76 $generated@@77 ($generated@@55 $generated@@75 $generated@@76 $generated@@77 $generated@@79 $generated@@80 $generated@@81 $generated@@78) $generated@@82 $generated@@83) ($generated@@48 $generated@@75 $generated@@76 $generated@@77 $generated@@79 $generated@@82 $generated@@83)))
 :weight 0
)))) (= ($generated@@4 $generated@@49) 3)) (= ($generated@@4 $generated@@50) 4)) (forall (($generated@@84 T@T) ($generated@@85 T@T) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ) (! (= ($generated@@52 $generated@@84 $generated@@85 ($generated@@56 $generated@@84 $generated@@85 $generated@@87 $generated@@88 $generated@@86) $generated@@88) $generated@@86)
 :weight 0
))) (forall (($generated@@89 T@T) ($generated@@90 T@T) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (!  (or (= $generated@@93 $generated@@94) (= ($generated@@52 $generated@@89 $generated@@90 ($generated@@56 $generated@@89 $generated@@90 $generated@@92 $generated@@93 $generated@@91) $generated@@94) ($generated@@52 $generated@@89 $generated@@90 $generated@@92 $generated@@94)))
 :weight 0
))) (= ($generated@@4 $generated@@53) 5)) (forall (($generated@@95 T@T) ($generated@@96 T@T) ) (= ($generated@@4 ($generated@@54 $generated@@95 $generated@@96)) 6))) (forall (($generated@@97 T@T) ($generated@@98 T@T) ) (! (= ($generated@@57 ($generated@@54 $generated@@97 $generated@@98)) $generated@@97)
 :pattern ( ($generated@@54 $generated@@97 $generated@@98))
))) (forall (($generated@@99 T@T) ($generated@@100 T@T) ) (! (= ($generated@@58 ($generated@@54 $generated@@99 $generated@@100)) $generated@@100)
 :pattern ( ($generated@@54 $generated@@99 $generated@@100))
))))
(assert (forall (($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 Bool) ($generated@@105 T@U) ($generated@@106 T@U) ) (! (= ($generated@@9 ($generated@@48 $generated@@49 $generated@@50 $generated@@5 ($generated@@51 $generated@@101 $generated@@102 $generated@@103 $generated@@104) $generated@@105 $generated@@106))  (=> (and (or (not (= $generated@@105 $generated@@101)) (not true)) ($generated@@9 ($generated@@38 $generated@@5 ($generated@@52 $generated@@50 $generated@@53 ($generated@@52 $generated@@49 ($generated@@54 $generated@@50 $generated@@53) $generated@@102 $generated@@105) $generated@@103)))) $generated@@104))
 :pattern ( ($generated@@48 $generated@@49 $generated@@50 $generated@@5 ($generated@@51 $generated@@101 $generated@@102 $generated@@103 $generated@@104) $generated@@105 $generated@@106))
)))
(assert (forall (($generated@@107 Int) ) (! (= ($generated@@39 $generated@@6 ($generated@@10 ($generated@@25 $generated@@107))) ($generated@@31 $generated@@53 ($generated@@39 $generated@@6 ($generated@@10 $generated@@107))))
 :pattern ( ($generated@@39 $generated@@6 ($generated@@10 ($generated@@25 $generated@@107))))
)))
(assert (forall (($generated@@108 T@U) ($generated@@109 T@T) ) (! (= ($generated@@39 $generated@@109 ($generated@@31 $generated@@109 $generated@@108)) ($generated@@31 $generated@@53 ($generated@@39 $generated@@109 $generated@@108)))
 :pattern ( ($generated@@39 $generated@@109 ($generated@@31 $generated@@109 $generated@@108)))
)))
(assert (forall (($generated@@111 T@U) ($generated@@112 T@U) ) (! ($generated@@110 $generated@@6 $generated@@112 $generated@@0 $generated@@111)
 :pattern ( ($generated@@110 $generated@@6 $generated@@112 $generated@@0 $generated@@111))
)))
(assert (forall (($generated@@113 T@U) ($generated@@114 T@U) ) (! ($generated@@110 $generated@@5 $generated@@114 $generated $generated@@113)
 :pattern ( ($generated@@110 $generated@@5 $generated@@114 $generated $generated@@113))
)))
(assert (forall (($generated@@116 T@U) ) (! ($generated@@115 $generated@@6 $generated@@116 $generated@@0)
 :pattern ( ($generated@@115 $generated@@6 $generated@@116 $generated@@0))
)))
(assert (forall (($generated@@117 T@U) ) (! ($generated@@115 $generated@@5 $generated@@117 $generated)
 :pattern ( ($generated@@115 $generated@@5 $generated@@117 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@118 () T@U)
(declare-fun $generated@@119 () Int)
(declare-fun $generated@@120 () Int)
(declare-fun $generated@@121 () T@U)
(declare-fun $generated@@122 () T@U)
(declare-fun $generated@@123 () T@U)
(declare-fun $generated@@124 (T@U) Bool)
(declare-fun $generated@@125 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 18) (let (($generated@@126  (=> (= (ControlFlow 0 7) (- 0 6)) ($generated@@22 ($generated@@23 ($generated@@23 $generated@@118)) $generated@@119))))
(let (($generated@@127  (=> (and (and (= ($generated@@22 ($generated@@23 $generated@@118) $generated@@119) (forall (($generated@@128 Int) ) (!  (=> (and (<= ($generated@@25 0) $generated@@128) (< $generated@@128 $generated@@119)) ($generated@@22 ($generated@@23 $generated@@118) $generated@@128))
 :pattern ( ($generated@@22 ($generated@@23 $generated@@118) $generated@@128))
))) (forall (($generated@@129 Int) ) (!  (=> (<= ($generated@@25 0) $generated@@129) (=> (< $generated@@129 $generated@@119) ($generated@@24 $generated@@129)))
 :pattern ( ($generated@@22 ($generated@@23 $generated@@118) $generated@@129))
))) (and ($generated@@115 $generated@@5 ($generated@@8 ($generated@@22 ($generated@@23 $generated@@118) $generated@@119)) $generated) (= (ControlFlow 0 8) 7))) $generated@@126)))
(let (($generated@@130  (=> (and (not (and (<= ($generated@@25 0) $generated@@120) (< $generated@@120 $generated@@119))) (= (ControlFlow 0 13) 8)) $generated@@127)))
(let (($generated@@131  (=> (and (and (<= ($generated@@25 0) $generated@@120) (< $generated@@120 $generated@@119)) ($generated@@110 $generated@@6 ($generated@@10 $generated@@120) $generated@@0 $generated@@121)) (and (=> (= (ControlFlow 0 9) (- 0 12)) (<= ($generated@@25 0) $generated@@120)) (=> (<= ($generated@@25 0) $generated@@120) (and (=> (= (ControlFlow 0 9) (- 0 11)) (or (<= 0 $generated@@119) (= $generated@@120 $generated@@119))) (=> (or (<= 0 $generated@@119) (= $generated@@120 $generated@@119)) (and (=> (= (ControlFlow 0 9) (- 0 10)) (< $generated@@120 $generated@@119)) (=> (< $generated@@120 $generated@@119) (=> (and ($generated@@24 $generated@@120) (= (ControlFlow 0 9) 8)) $generated@@127))))))))))
(let (($generated@@132  (=> (< $generated@@120 ($generated@@25 0)) (and (=> (= (ControlFlow 0 15) 9) $generated@@131) (=> (= (ControlFlow 0 15) 13) $generated@@130)))))
(let (($generated@@133  (=> (<= ($generated@@25 0) $generated@@120) (and (=> (= (ControlFlow 0 14) 9) $generated@@131) (=> (= (ControlFlow 0 14) 13) $generated@@130)))))
(let (($generated@@134  (and (=> (= (ControlFlow 0 16) 14) $generated@@133) (=> (= (ControlFlow 0 16) 15) $generated@@132))))
(let (($generated@@135 true))
(let (($generated@@136  (=> ($generated@@110 $generated@@6 ($generated@@10 $generated@@119) $generated@@0 $generated@@121) (and (=> (= (ControlFlow 0 2) (- 0 4)) (<= ($generated@@25 0) $generated@@119)) (=> (<= ($generated@@25 0) $generated@@119) (and (=> (= (ControlFlow 0 2) (- 0 3)) (or (<= 0 $generated@@119) (= $generated@@119 $generated@@119))) (=> (or (<= 0 $generated@@119) (= $generated@@119 $generated@@119)) (=> (= (ControlFlow 0 2) (- 0 1)) (or (= $generated@@119 $generated@@119) (< $generated@@119 $generated@@119))))))))))
(let (($generated@@137  (=> (and (= $generated@@122 ($generated@@51 $generated@@123 $generated@@121 $generated@@3 false)) (<= ($generated@@25 0) $generated@@119)) (and (and (=> (= (ControlFlow 0 17) 2) $generated@@136) (=> (= (ControlFlow 0 17) 16) $generated@@134)) (=> (= (ControlFlow 0 17) 5) $generated@@135)))))
(let (($generated@@138  (=> (and (and ($generated@@124 $generated@@121) ($generated@@125 $generated@@121)) (and (= 0 $generated@@21) (= (ControlFlow 0 18) 17))) $generated@@137)))
$generated@@138))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
