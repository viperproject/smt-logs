(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (Bool) T@U)
(declare-fun $generated@@7 (T@U) Bool)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun $generated@@9 (T@U) Int)
(declare-fun $generated@@10 (Real) T@U)
(declare-fun $generated@@11 (T@U) Real)
(declare-fun $generated@@18 (Int) Int)
(declare-fun $generated@@20 (T@T T@U) T@U)
(declare-fun $generated@@23 (T@T T@U) T@U)
(declare-fun $generated@@24 (T@T T@U) T@U)
(declare-fun $generated@@27 (T@T T@U T@U) Bool)
(declare-fun $generated@@28 () T@U)
(declare-fun $generated@@32 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@33 () T@T)
(declare-fun $generated@@34 () T@T)
(declare-fun $generated@@35 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@36 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@37 () T@T)
(declare-fun $generated@@38 (T@T T@T) T@T)
(declare-fun $generated@@39 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@40 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@41 (T@T) T@T)
(declare-fun $generated@@42 (T@T) T@T)
(declare-fun $generated@@91 (T@U) T@U)
(declare-fun $generated@@92 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@4) 1)) (= ($generated@@2 $generated@@5) 2)) (forall (($generated@@12 Bool) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Int) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Real) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))))
(assert (distinct $generated $generated@@0 $generated@@1)
)
(assert (forall (($generated@@19 Int) ) (! (= ($generated@@18 $generated@@19) $generated@@19)
 :pattern ( ($generated@@18 $generated@@19))
)))
(assert (forall (($generated@@21 T@U) ($generated@@22 T@T) ) (! (= ($generated@@20 $generated@@22 $generated@@21) $generated@@21)
 :pattern ( ($generated@@20 $generated@@22 $generated@@21))
)))
(assert (forall (($generated@@25 T@U) ($generated@@26 T@T) ) (! (= ($generated@@24 $generated@@26 ($generated@@23 $generated@@26 $generated@@25)) $generated@@25)
 :pattern ( ($generated@@23 $generated@@26 $generated@@25))
)))
(assert (forall (($generated@@29 T@U) ) (! (= ($generated@@27 $generated@@4 $generated@@29 $generated@@28) (<= ($generated@@18 0) ($generated@@9 $generated@@29)))
 :pattern ( ($generated@@27 $generated@@4 $generated@@29 $generated@@28))
)))
(assert (forall (($generated@@30 T@U) ($generated@@31 T@T) ) (! (= ($generated@@23 $generated@@31 ($generated@@24 $generated@@31 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@24 $generated@@31 $generated@@30))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@43 T@T) ($generated@@44 T@T) ($generated@@45 T@T) ($generated@@46 T@U) ($generated@@47 T@U) ($generated@@48 T@U) ($generated@@49 T@U) ) (! (= ($generated@@32 $generated@@43 $generated@@44 $generated@@45 ($generated@@39 $generated@@43 $generated@@44 $generated@@45 $generated@@47 $generated@@48 $generated@@49 $generated@@46) $generated@@48 $generated@@49) $generated@@46)
 :weight 0
)) (and (forall (($generated@@50 T@T) ($generated@@51 T@T) ($generated@@52 T@T) ($generated@@53 T@U) ($generated@@54 T@U) ($generated@@55 T@U) ($generated@@56 T@U) ($generated@@57 T@U) ($generated@@58 T@U) ) (!  (or (= $generated@@55 $generated@@57) (= ($generated@@32 $generated@@50 $generated@@51 $generated@@52 ($generated@@39 $generated@@50 $generated@@51 $generated@@52 $generated@@54 $generated@@55 $generated@@56 $generated@@53) $generated@@57 $generated@@58) ($generated@@32 $generated@@50 $generated@@51 $generated@@52 $generated@@54 $generated@@57 $generated@@58)))
 :weight 0
)) (forall (($generated@@59 T@T) ($generated@@60 T@T) ($generated@@61 T@T) ($generated@@62 T@U) ($generated@@63 T@U) ($generated@@64 T@U) ($generated@@65 T@U) ($generated@@66 T@U) ($generated@@67 T@U) ) (!  (or (= $generated@@65 $generated@@67) (= ($generated@@32 $generated@@59 $generated@@60 $generated@@61 ($generated@@39 $generated@@59 $generated@@60 $generated@@61 $generated@@63 $generated@@64 $generated@@65 $generated@@62) $generated@@66 $generated@@67) ($generated@@32 $generated@@59 $generated@@60 $generated@@61 $generated@@63 $generated@@66 $generated@@67)))
 :weight 0
)))) (= ($generated@@2 $generated@@33) 3)) (= ($generated@@2 $generated@@34) 4)) (forall (($generated@@68 T@T) ($generated@@69 T@T) ($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (! (= ($generated@@36 $generated@@68 $generated@@69 ($generated@@40 $generated@@68 $generated@@69 $generated@@71 $generated@@72 $generated@@70) $generated@@72) $generated@@70)
 :weight 0
))) (forall (($generated@@73 T@T) ($generated@@74 T@T) ($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ) (!  (or (= $generated@@77 $generated@@78) (= ($generated@@36 $generated@@73 $generated@@74 ($generated@@40 $generated@@73 $generated@@74 $generated@@76 $generated@@77 $generated@@75) $generated@@78) ($generated@@36 $generated@@73 $generated@@74 $generated@@76 $generated@@78)))
 :weight 0
))) (= ($generated@@2 $generated@@37) 5)) (forall (($generated@@79 T@T) ($generated@@80 T@T) ) (= ($generated@@2 ($generated@@38 $generated@@79 $generated@@80)) 6))) (forall (($generated@@81 T@T) ($generated@@82 T@T) ) (! (= ($generated@@41 ($generated@@38 $generated@@81 $generated@@82)) $generated@@81)
 :pattern ( ($generated@@38 $generated@@81 $generated@@82))
))) (forall (($generated@@83 T@T) ($generated@@84 T@T) ) (! (= ($generated@@42 ($generated@@38 $generated@@83 $generated@@84)) $generated@@84)
 :pattern ( ($generated@@38 $generated@@83 $generated@@84))
))))
(assert (forall (($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 Bool) ($generated@@89 T@U) ($generated@@90 T@U) ) (! (= ($generated@@7 ($generated@@32 $generated@@33 $generated@@34 $generated@@3 ($generated@@35 $generated@@85 $generated@@86 $generated@@87 $generated@@88) $generated@@89 $generated@@90))  (=> (and (or (not (= $generated@@89 $generated@@85)) (not true)) ($generated@@7 ($generated@@23 $generated@@3 ($generated@@36 $generated@@34 $generated@@37 ($generated@@36 $generated@@33 ($generated@@38 $generated@@34 $generated@@37) $generated@@86 $generated@@89) $generated@@87)))) $generated@@88))
 :pattern ( ($generated@@32 $generated@@33 $generated@@34 $generated@@3 ($generated@@35 $generated@@85 $generated@@86 $generated@@87 $generated@@88) $generated@@89 $generated@@90))
)))
(assert (= ($generated@@91 $generated@@28) $generated@@0))
(assert (= ($generated@@92 $generated@@28) $generated@@1))
(assert (forall (($generated@@93 Int) ) (! (= ($generated@@24 $generated@@4 ($generated@@8 ($generated@@18 $generated@@93))) ($generated@@20 $generated@@37 ($generated@@24 $generated@@4 ($generated@@8 $generated@@93))))
 :pattern ( ($generated@@24 $generated@@4 ($generated@@8 ($generated@@18 $generated@@93))))
)))
(assert (forall (($generated@@94 T@U) ($generated@@95 T@T) ) (! (= ($generated@@24 $generated@@95 ($generated@@20 $generated@@95 $generated@@94)) ($generated@@20 $generated@@37 ($generated@@24 $generated@@95 $generated@@94)))
 :pattern ( ($generated@@24 $generated@@95 ($generated@@20 $generated@@95 $generated@@94)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@96 () T@U)
(declare-fun $generated@@97 () T@U)
(declare-fun $generated@@98 () T@U)
(declare-fun $generated@@99 () Bool)
(declare-fun $generated@@100 () Int)
(declare-fun $generated@@101 (T@U) Bool)
(declare-fun $generated@@102 (T@U) Bool)
(declare-fun $generated@@103 () Int)
(declare-fun $generated@@104 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 5) (let (($generated@@105 true))
(let (($generated@@106 true))
(let (($generated@@107  (=> (= $generated@@96 ($generated@@35 $generated@@97 $generated@@98 $generated false)) (=> (and $generated@@99 $generated@@99) (and (=> (= (ControlFlow 0 3) (- 0 4)) ($generated@@27 $generated@@4 ($generated@@8 $generated@@100) $generated@@28)) (=> ($generated@@27 $generated@@4 ($generated@@8 $generated@@100) $generated@@28) (and (=> (= (ControlFlow 0 3) 1) $generated@@106) (=> (= (ControlFlow 0 3) 2) $generated@@105))))))))
(let (($generated@@108  (=> (and (and (and ($generated@@101 $generated@@98) ($generated@@102 $generated@@98)) (<= ($generated@@18 0) $generated@@103)) (and (= 1 $generated@@104) (= (ControlFlow 0 5) 3))) $generated@@107)))
$generated@@108)))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 3) (- 4))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
