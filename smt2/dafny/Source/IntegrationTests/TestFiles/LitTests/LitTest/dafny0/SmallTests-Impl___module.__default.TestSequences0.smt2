(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 (T@U) T@U)
(declare-fun $generated@@20 (T@U T@U) Bool)
(declare-fun $generated@@21 (T@U T@U) T@U)
(declare-fun $generated@@25 () T@U)
(declare-fun $generated@@27 (T@U) Int)
(declare-fun $generated@@28 (Int) Int)
(declare-fun $generated@@30 (T@T T@U) T@U)
(declare-fun $generated@@33 (T@T T@U T@U) Bool)
(declare-fun $generated@@34 () T@T)
(declare-fun $generated@@35 (T@U) T@U)
(declare-fun $generated@@36 (T@U T@U) Bool)
(declare-fun $generated@@40 (T@T T@U) T@U)
(declare-fun $generated@@41 (T@T T@U) T@U)
(declare-fun $generated@@46 (T@U T@U T@U) Bool)
(declare-fun $generated@@47 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@52 (T@U Int) T@U)
(declare-fun $generated@@68 (T@U) T@U)
(declare-fun $generated@@73 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@74 () T@T)
(declare-fun $generated@@75 () T@T)
(declare-fun $generated@@76 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@77 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@78 () T@T)
(declare-fun $generated@@79 (T@T T@T) T@T)
(declare-fun $generated@@80 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@81 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@82 (T@T) T@T)
(declare-fun $generated@@83 (T@T) T@T)
(declare-fun $generated@@132 (T@U) T@U)
(declare-fun $generated@@133 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (= ($generated@@19 $generated) $generated@@0))
(assert (forall (($generated@@22 T@U) ($generated@@23 T@U) ($generated@@24 T@U) ) (! (= ($generated@@20 ($generated@@21 $generated@@22 $generated@@23) $generated@@24)  (or (= $generated@@23 $generated@@24) ($generated@@20 $generated@@22 $generated@@24)))
 :pattern ( ($generated@@20 ($generated@@21 $generated@@22 $generated@@23) $generated@@24))
)))
(assert (forall (($generated@@26 T@U) ) (!  (not ($generated@@20 $generated@@25 $generated@@26))
 :pattern ( ($generated@@20 $generated@@25 $generated@@26))
)))
(assert (= ($generated@@27 $generated@@25) 0))
(assert (forall (($generated@@29 Int) ) (! (= ($generated@@28 $generated@@29) $generated@@29)
 :pattern ( ($generated@@28 $generated@@29))
)))
(assert (forall (($generated@@31 T@U) ($generated@@32 T@T) ) (! (= ($generated@@30 $generated@@32 $generated@@31) $generated@@31)
 :pattern ( ($generated@@30 $generated@@32 $generated@@31))
)))
(assert (= ($generated@@3 $generated@@34) 3))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (!  (=> (and ($generated@@33 $generated@@34 $generated@@37 ($generated@@35 $generated@@39)) ($generated@@36 $generated@@38 $generated@@39)) ($generated@@33 $generated@@34 ($generated@@21 $generated@@37 $generated@@38) ($generated@@35 $generated@@39)))
 :pattern ( ($generated@@33 $generated@@34 ($generated@@21 $generated@@37 $generated@@38) ($generated@@35 $generated@@39)))
)))
(assert (forall (($generated@@42 T@U) ($generated@@43 T@T) ) (! (= ($generated@@41 $generated@@43 ($generated@@40 $generated@@43 $generated@@42)) $generated@@42)
 :pattern ( ($generated@@40 $generated@@43 $generated@@42))
)))
(assert (forall (($generated@@44 T@U) ($generated@@45 T@U) ) (! (= ($generated@@27 ($generated@@21 $generated@@44 $generated@@45)) (+ 1 ($generated@@27 $generated@@44)))
 :pattern ( ($generated@@21 $generated@@44 $generated@@45))
)))
(assert (forall (($generated@@48 T@U) ($generated@@49 T@U) ($generated@@50 T@U) ($generated@@51 T@T) ) (! (= ($generated@@46 ($generated@@41 $generated@@51 $generated@@48) $generated@@49 $generated@@50) ($generated@@47 $generated@@51 $generated@@48 $generated@@49 $generated@@50))
 :pattern ( ($generated@@46 ($generated@@41 $generated@@51 $generated@@48) $generated@@49 $generated@@50))
)))
(assert (forall (($generated@@53 T@U) ($generated@@54 Int) ($generated@@55 T@U) ) (!  (and (=> (= $generated@@54 ($generated@@27 $generated@@53)) (= ($generated@@52 ($generated@@21 $generated@@53 $generated@@55) $generated@@54) $generated@@55)) (=> (or (not (= $generated@@54 ($generated@@27 $generated@@53))) (not true)) (= ($generated@@52 ($generated@@21 $generated@@53 $generated@@55) $generated@@54) ($generated@@52 $generated@@53 $generated@@54))))
 :pattern ( ($generated@@52 ($generated@@21 $generated@@53 $generated@@55) $generated@@54))
)))
(assert (forall (($generated@@56 T@U) ($generated@@57 T@U) ) (! (= ($generated@@20 $generated@@56 $generated@@57) (exists (($generated@@58 Int) ) (!  (and (and (<= 0 $generated@@58) (< $generated@@58 ($generated@@27 $generated@@56))) (= ($generated@@52 $generated@@56 $generated@@58) $generated@@57))
 :pattern ( ($generated@@52 $generated@@56 $generated@@58))
)))
 :pattern ( ($generated@@20 $generated@@56 $generated@@57))
)))
(assert (forall (($generated@@59 T@U) ) (!  (=> ($generated@@36 $generated@@59 $generated) (and (= ($generated@@41 $generated@@5 ($generated@@40 $generated@@5 $generated@@59)) $generated@@59) ($generated@@33 $generated@@5 ($generated@@40 $generated@@5 $generated@@59) $generated)))
 :pattern ( ($generated@@36 $generated@@59 $generated))
)))
(assert (forall (($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@T) ) (! (= ($generated@@36 ($generated@@41 $generated@@62 $generated@@60) $generated@@61) ($generated@@33 $generated@@62 $generated@@60 $generated@@61))
 :pattern ( ($generated@@36 ($generated@@41 $generated@@62 $generated@@60) $generated@@61))
)))
(assert (forall (($generated@@63 T@U) ) (! (<= 0 ($generated@@27 $generated@@63))
 :pattern ( ($generated@@27 $generated@@63))
)))
(assert (forall (($generated@@64 T@U) ($generated@@65 T@U) ($generated@@66 T@U) ) (! (= ($generated@@47 $generated@@34 $generated@@64 ($generated@@35 $generated@@65) $generated@@66) (forall (($generated@@67 Int) ) (!  (=> (and (<= 0 $generated@@67) (< $generated@@67 ($generated@@27 $generated@@64))) ($generated@@46 ($generated@@52 $generated@@64 $generated@@67) $generated@@65 $generated@@66))
 :pattern ( ($generated@@52 $generated@@64 $generated@@67))
)))
 :pattern ( ($generated@@47 $generated@@34 $generated@@64 ($generated@@35 $generated@@65) $generated@@66))
)))
(assert (forall (($generated@@69 T@U) ) (! (= ($generated@@68 ($generated@@35 $generated@@69)) $generated@@69)
 :pattern ( ($generated@@35 $generated@@69))
)))
(assert (forall (($generated@@70 T@U) ) (! (= ($generated@@19 ($generated@@35 $generated@@70)) $generated@@1)
 :pattern ( ($generated@@35 $generated@@70))
)))
(assert (forall (($generated@@71 T@U) ($generated@@72 T@T) ) (! (= ($generated@@40 $generated@@72 ($generated@@41 $generated@@72 $generated@@71)) $generated@@71)
 :pattern ( ($generated@@41 $generated@@72 $generated@@71))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@84 T@T) ($generated@@85 T@T) ($generated@@86 T@T) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ) (! (= ($generated@@73 $generated@@84 $generated@@85 $generated@@86 ($generated@@80 $generated@@84 $generated@@85 $generated@@86 $generated@@88 $generated@@89 $generated@@90 $generated@@87) $generated@@89 $generated@@90) $generated@@87)
 :weight 0
)) (and (forall (($generated@@91 T@T) ($generated@@92 T@T) ($generated@@93 T@T) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ) (!  (or (= $generated@@96 $generated@@98) (= ($generated@@73 $generated@@91 $generated@@92 $generated@@93 ($generated@@80 $generated@@91 $generated@@92 $generated@@93 $generated@@95 $generated@@96 $generated@@97 $generated@@94) $generated@@98 $generated@@99) ($generated@@73 $generated@@91 $generated@@92 $generated@@93 $generated@@95 $generated@@98 $generated@@99)))
 :weight 0
)) (forall (($generated@@100 T@T) ($generated@@101 T@T) ($generated@@102 T@T) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ) (!  (or (= $generated@@106 $generated@@108) (= ($generated@@73 $generated@@100 $generated@@101 $generated@@102 ($generated@@80 $generated@@100 $generated@@101 $generated@@102 $generated@@104 $generated@@105 $generated@@106 $generated@@103) $generated@@107 $generated@@108) ($generated@@73 $generated@@100 $generated@@101 $generated@@102 $generated@@104 $generated@@107 $generated@@108)))
 :weight 0
)))) (= ($generated@@3 $generated@@74) 4)) (= ($generated@@3 $generated@@75) 5)) (forall (($generated@@109 T@T) ($generated@@110 T@T) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ) (! (= ($generated@@77 $generated@@109 $generated@@110 ($generated@@81 $generated@@109 $generated@@110 $generated@@112 $generated@@113 $generated@@111) $generated@@113) $generated@@111)
 :weight 0
))) (forall (($generated@@114 T@T) ($generated@@115 T@T) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ) (!  (or (= $generated@@118 $generated@@119) (= ($generated@@77 $generated@@114 $generated@@115 ($generated@@81 $generated@@114 $generated@@115 $generated@@117 $generated@@118 $generated@@116) $generated@@119) ($generated@@77 $generated@@114 $generated@@115 $generated@@117 $generated@@119)))
 :weight 0
))) (= ($generated@@3 $generated@@78) 6)) (forall (($generated@@120 T@T) ($generated@@121 T@T) ) (= ($generated@@3 ($generated@@79 $generated@@120 $generated@@121)) 7))) (forall (($generated@@122 T@T) ($generated@@123 T@T) ) (! (= ($generated@@82 ($generated@@79 $generated@@122 $generated@@123)) $generated@@122)
 :pattern ( ($generated@@79 $generated@@122 $generated@@123))
))) (forall (($generated@@124 T@T) ($generated@@125 T@T) ) (! (= ($generated@@83 ($generated@@79 $generated@@124 $generated@@125)) $generated@@125)
 :pattern ( ($generated@@79 $generated@@124 $generated@@125))
))))
(assert (forall (($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 Bool) ($generated@@130 T@U) ($generated@@131 T@U) ) (! (= ($generated@@8 ($generated@@73 $generated@@74 $generated@@75 $generated@@4 ($generated@@76 $generated@@126 $generated@@127 $generated@@128 $generated@@129) $generated@@130 $generated@@131))  (=> (and (or (not (= $generated@@130 $generated@@126)) (not true)) ($generated@@8 ($generated@@40 $generated@@4 ($generated@@77 $generated@@75 $generated@@78 ($generated@@77 $generated@@74 ($generated@@79 $generated@@75 $generated@@78) $generated@@127 $generated@@130) $generated@@128)))) $generated@@129))
 :pattern ( ($generated@@73 $generated@@74 $generated@@75 $generated@@4 ($generated@@76 $generated@@126 $generated@@127 $generated@@128 $generated@@129) $generated@@130 $generated@@131))
)))
(assert (forall (($generated@@134 T@U) ($generated@@135 T@U) ) (!  (and (= ($generated@@132 ($generated@@21 $generated@@134 $generated@@135)) $generated@@134) (= ($generated@@133 ($generated@@21 $generated@@134 $generated@@135)) $generated@@135))
 :pattern ( ($generated@@21 $generated@@134 $generated@@135))
)))
(assert (forall (($generated@@136 T@U) ($generated@@137 T@U) ) (!  (=> ($generated@@36 $generated@@136 ($generated@@35 $generated@@137)) (and (= ($generated@@41 $generated@@34 ($generated@@40 $generated@@34 $generated@@136)) $generated@@136) ($generated@@33 $generated@@34 ($generated@@40 $generated@@34 $generated@@136) ($generated@@35 $generated@@137))))
 :pattern ( ($generated@@36 $generated@@136 ($generated@@35 $generated@@137)))
)))
(assert (forall (($generated@@138 Int) ) (! (= ($generated@@41 $generated@@5 ($generated@@9 ($generated@@28 $generated@@138))) ($generated@@30 $generated@@78 ($generated@@41 $generated@@5 ($generated@@9 $generated@@138))))
 :pattern ( ($generated@@41 $generated@@5 ($generated@@9 ($generated@@28 $generated@@138))))
)))
(assert (forall (($generated@@139 T@U) ($generated@@140 T@T) ) (! (= ($generated@@41 $generated@@140 ($generated@@30 $generated@@140 $generated@@139)) ($generated@@30 $generated@@78 ($generated@@41 $generated@@140 $generated@@139)))
 :pattern ( ($generated@@41 $generated@@140 ($generated@@30 $generated@@140 $generated@@139)))
)))
(assert (forall (($generated@@141 T@U) ) (!  (=> (= ($generated@@27 $generated@@141) 0) (= $generated@@141 $generated@@25))
 :pattern ( ($generated@@27 $generated@@141))
)))
(assert (forall (($generated@@142 T@U) ($generated@@143 T@U) ) (! ($generated@@47 $generated@@5 $generated@@143 $generated $generated@@142)
 :pattern ( ($generated@@47 $generated@@5 $generated@@143 $generated $generated@@142))
)))
(assert (forall (($generated@@144 T@U) ($generated@@145 T@U) ) (! (= ($generated@@33 $generated@@34 $generated@@144 ($generated@@35 $generated@@145)) (forall (($generated@@146 Int) ) (!  (=> (and (<= 0 $generated@@146) (< $generated@@146 ($generated@@27 $generated@@144))) ($generated@@36 ($generated@@52 $generated@@144 $generated@@146) $generated@@145))
 :pattern ( ($generated@@52 $generated@@144 $generated@@146))
)))
 :pattern ( ($generated@@33 $generated@@34 $generated@@144 ($generated@@35 $generated@@145)))
)))
(assert (forall (($generated@@147 T@U) ) (! ($generated@@33 $generated@@5 $generated@@147 $generated)
 :pattern ( ($generated@@33 $generated@@5 $generated@@147 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@148 () T@U)
(declare-fun $generated@@149 () Int)
(declare-fun $generated@@150 () T@U)
(declare-fun $generated@@151 () T@U)
(declare-fun $generated@@152 () T@U)
(declare-fun $generated@@153 (T@U) Bool)
(declare-fun $generated@@154 (T@U) Bool)
(declare-fun $generated@@155 () T@U)
(declare-fun $generated@@156 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 19) (let (($generated@@157  (=> (= (ControlFlow 0 3) (- 0 2)) ($generated@@20 $generated@@148 ($generated@@41 $generated@@5 ($generated@@9 7))))))
(let (($generated@@158  (and (=> (= (ControlFlow 0 8) (- 0 9)) (exists (($generated@@159 T@U) ) (!  (and ($generated@@20 $generated@@148 ($generated@@41 $generated@@5 $generated@@159)) (and (<= ($generated@@28 (- 0 3)) ($generated@@10 $generated@@159)) (< ($generated@@10 $generated@@159) 2)))
 :pattern ( ($generated@@20 $generated@@148 ($generated@@41 $generated@@5 $generated@@159)))
))) (=> (exists (($generated@@160 Int) ) (!  (and ($generated@@20 $generated@@148 ($generated@@41 $generated@@5 ($generated@@9 $generated@@160))) (and (<= ($generated@@28 (- 0 3)) $generated@@160) (< $generated@@160 2)))
 :pattern ( ($generated@@20 $generated@@148 ($generated@@41 $generated@@5 ($generated@@9 $generated@@160))))
)) (=> (= (ControlFlow 0 8) 3) $generated@@157)))))
(let (($generated@@161  (=> (and (< $generated@@149 ($generated@@28 (- 0 3))) (= (ControlFlow 0 12) 8)) $generated@@158)))
(let (($generated@@162  (=> (and (<= ($generated@@28 (- 0 3)) $generated@@149) (= (ControlFlow 0 11) 8)) $generated@@158)))
(let (($generated@@163  (=> ($generated@@20 $generated@@148 ($generated@@41 $generated@@5 ($generated@@9 $generated@@149))) (and (=> (= (ControlFlow 0 13) 11) $generated@@162) (=> (= (ControlFlow 0 13) 12) $generated@@161)))))
(let (($generated@@164  (=> (and (not ($generated@@20 $generated@@148 ($generated@@41 $generated@@5 ($generated@@9 $generated@@149)))) (= (ControlFlow 0 10) 8)) $generated@@158)))
(let (($generated@@165  (and (=> (= (ControlFlow 0 14) 13) $generated@@163) (=> (= (ControlFlow 0 14) 10) $generated@@164))))
(let (($generated@@166  (and (=> (= (ControlFlow 0 4) (- 0 7)) ($generated@@20 $generated@@148 ($generated@@41 $generated@@5 ($generated@@9 4)))) (=> ($generated@@20 $generated@@148 ($generated@@41 $generated@@5 ($generated@@9 4))) (and (=> (= (ControlFlow 0 4) (- 0 6)) ($generated@@20 $generated@@148 ($generated@@41 $generated@@5 ($generated@@9 0)))) (=> ($generated@@20 $generated@@148 ($generated@@41 $generated@@5 ($generated@@9 0))) (and (=> (= (ControlFlow 0 4) (- 0 5)) (not ($generated@@20 $generated@@148 ($generated@@41 $generated@@5 ($generated@@9 1))))) (=> (not ($generated@@20 $generated@@148 ($generated@@41 $generated@@5 ($generated@@9 1)))) (=> (= (ControlFlow 0 4) 3) $generated@@157)))))))))
(let (($generated@@167 true))
(let (($generated@@168  (and (=> (= (ControlFlow 0 15) (- 0 17)) ($generated@@20 $generated@@148 ($generated@@41 $generated@@5 ($generated@@9 2)))) (=> ($generated@@20 $generated@@148 ($generated@@41 $generated@@5 ($generated@@9 2))) (and (=> (= (ControlFlow 0 15) (- 0 16)) ($generated@@20 $generated@@148 ($generated@@41 $generated@@5 ($generated@@9 0)))) (=> ($generated@@20 $generated@@148 ($generated@@41 $generated@@5 ($generated@@9 0))) (and (=> (= (ControlFlow 0 15) 14) $generated@@165) (=> (= (ControlFlow 0 15) 1) $generated@@167))))))))
(let (($generated@@169  (=> (and (= $generated@@150 ($generated@@76 $generated@@151 $generated@@152 $generated@@2 false)) (= $generated@@148 ($generated@@30 $generated@@34 ($generated@@21 ($generated@@21 ($generated@@21 $generated@@25 ($generated@@41 $generated@@5 ($generated@@9 ($generated@@28 0)))) ($generated@@41 $generated@@5 ($generated@@9 ($generated@@28 2)))) ($generated@@41 $generated@@5 ($generated@@9 ($generated@@28 4))))))) (and (=> (= (ControlFlow 0 18) 4) $generated@@166) (=> (= (ControlFlow 0 18) 15) $generated@@168)))))
(let (($generated@@170  (=> (and ($generated@@153 $generated@@152) ($generated@@154 $generated@@152)) (=> (and (and (and ($generated@@33 $generated@@34 $generated@@155 ($generated@@35 $generated)) ($generated@@47 $generated@@34 $generated@@155 ($generated@@35 $generated) $generated@@152)) true) (and (= 0 $generated@@156) (= (ControlFlow 0 19) 18))) $generated@@169))))
$generated@@170)))))))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 3) (- 2))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
