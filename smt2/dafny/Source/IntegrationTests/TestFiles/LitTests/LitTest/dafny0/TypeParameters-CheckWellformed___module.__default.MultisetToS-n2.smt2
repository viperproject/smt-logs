(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TagSet () T@U)
(declare-fun TagMultiSet () T@U)
(declare-fun alloc () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun |Set#UnionOne| (T@U T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun |MultiSet#Card| (T@U) Int)
(declare-fun |MultiSet#Difference| (T@U T@U) T@U)
(declare-fun |MultiSet#Intersection| (T@U T@U) T@U)
(declare-fun |MultiSet#Union| (T@U T@U) T@U)
(declare-fun _module.__default.MultisetToSet (T@U T@U T@U) T@U)
(declare-fun AsFuelBottom (T@U) T@U)
(declare-fun $LZ () T@U)
(declare-fun |Set#Union| (T@U T@U) T@U)
(declare-fun |Set#Difference| (T@U T@U) T@U)
(declare-fun |Math#min| (Int Int) Int)
(declare-fun |Set#Empty| () T@U)
(declare-fun $LS (T@U) T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun MultiSetType () T@T)
(declare-fun TMultiSet (T@U) T@U)
(declare-fun $IsGoodMultiSet (T@U) Bool)
(declare-fun |MultiSet#Multiplicity| (T@U T@U) Int)
(declare-fun |Math#clip| (Int) Int)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun |Set#Disjoint| (T@U T@U) Bool)
(declare-fun |MultiSet#UnionOne| (T@U T@U) T@U)
(declare-fun SetType () T@T)
(declare-fun TSet (T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun $FunctionContextHeight () Int)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun |_module.__default.MultisetToSet#canCall| (T@U T@U) Bool)
(declare-fun |$let#0$canCall| (T@U T@U) Bool)
(declare-fun |MultiSet#Empty| () T@U)
(declare-fun |$let#0_x| (T@U T@U) T@U)
(declare-fun |MultiSet#Equal| (T@U T@U) Bool)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun Inv0_TMultiSet (T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun |MultiSet#Subset| (T@U T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TagSet TagMultiSet alloc)
)
(assert (forall ((a T@U) (x@@2 T@U) ) (! (|Set#IsMember| (|Set#UnionOne| a x@@2) x@@2)
 :pattern ( (|Set#UnionOne| a x@@2))
)))
(assert (forall ((a@@0 T@U) (b T@U) ) (!  (and (= (+ (+ (|MultiSet#Card| (|MultiSet#Difference| a@@0 b)) (|MultiSet#Card| (|MultiSet#Difference| b a@@0))) (* 2 (|MultiSet#Card| (|MultiSet#Intersection| a@@0 b)))) (|MultiSet#Card| (|MultiSet#Union| a@@0 b))) (= (|MultiSet#Card| (|MultiSet#Difference| a@@0 b)) (- (|MultiSet#Card| a@@0) (|MultiSet#Card| (|MultiSet#Intersection| a@@0 b)))))
 :pattern ( (|MultiSet#Card| (|MultiSet#Difference| a@@0 b)))
)))
(assert (forall ((_module._default.MultisetToSet$_T0 T@U) ($ly T@U) (|m#0| T@U) ) (! (= (_module.__default.MultisetToSet _module._default.MultisetToSet$_T0 $ly |m#0|) (_module.__default.MultisetToSet _module._default.MultisetToSet$_T0 $LZ |m#0|))
 :pattern ( (_module.__default.MultisetToSet _module._default.MultisetToSet$_T0 (AsFuelBottom $ly) |m#0|))
)))
(assert (forall ((a@@1 T@U) (x@@3 T@U) (y T@U) ) (!  (=> (|Set#IsMember| a@@1 y) (|Set#IsMember| (|Set#UnionOne| a@@1 x@@3) y))
 :pattern ( (|Set#UnionOne| a@@1 x@@3) (|Set#IsMember| a@@1 y))
)))
(assert (forall ((a@@2 T@U) (b@@0 T@U) (y@@0 T@U) ) (!  (=> (|Set#IsMember| a@@2 y@@0) (|Set#IsMember| (|Set#Union| a@@2 b@@0) y@@0))
 :pattern ( (|Set#Union| a@@2 b@@0) (|Set#IsMember| a@@2 y@@0))
)))
(assert (forall ((a@@3 T@U) (b@@1 T@U) (y@@1 T@U) ) (!  (=> (|Set#IsMember| b@@1 y@@1) (|Set#IsMember| (|Set#Union| a@@3 b@@1) y@@1))
 :pattern ( (|Set#Union| a@@3 b@@1) (|Set#IsMember| b@@1 y@@1))
)))
(assert (forall ((a@@4 T@U) (x@@4 T@U) (o T@U) ) (! (= (|Set#IsMember| (|Set#UnionOne| a@@4 x@@4) o)  (or (= o x@@4) (|Set#IsMember| a@@4 o)))
 :pattern ( (|Set#IsMember| (|Set#UnionOne| a@@4 x@@4) o))
)))
(assert (forall ((a@@5 T@U) (b@@2 T@U) (y@@2 T@U) ) (!  (=> (|Set#IsMember| b@@2 y@@2) (not (|Set#IsMember| (|Set#Difference| a@@5 b@@2) y@@2)))
 :pattern ( (|Set#Difference| a@@5 b@@2) (|Set#IsMember| b@@2 y@@2))
)))
(assert (forall ((a@@6 Int) (b@@3 Int) ) (!  (or (= (|Math#min| a@@6 b@@3) a@@6) (= (|Math#min| a@@6 b@@3) b@@3))
 :pattern ( (|Math#min| a@@6 b@@3))
)))
(assert (forall ((o@@0 T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o@@0))
 :pattern ( (|Set#IsMember| |Set#Empty| o@@0))
)))
(assert (forall ((_module._default.MultisetToSet$_T0@@0 T@U) ($ly@@0 T@U) (|m#0@@0| T@U) ) (! (= (_module.__default.MultisetToSet _module._default.MultisetToSet$_T0@@0 ($LS $ly@@0) |m#0@@0|) (_module.__default.MultisetToSet _module._default.MultisetToSet$_T0@@0 $ly@@0 |m#0@@0|))
 :pattern ( (_module.__default.MultisetToSet _module._default.MultisetToSet$_T0@@0 ($LS $ly@@0) |m#0@@0|))
)))
(assert (= (Ctor MultiSetType) 3))
(assert (forall ((v T@U) (t0 T@U) ) (!  (=> ($Is MultiSetType v (TMultiSet t0)) ($IsGoodMultiSet v))
 :pattern ( ($Is MultiSetType v (TMultiSet t0)))
)))
(assert (forall ((a@@7 T@U) (b@@4 T@U) (y@@3 T@U) ) (!  (=> (<= (|MultiSet#Multiplicity| a@@7 y@@3) (|MultiSet#Multiplicity| b@@4 y@@3)) (= (|MultiSet#Multiplicity| (|MultiSet#Difference| a@@7 b@@4) y@@3) 0))
 :pattern ( (|MultiSet#Difference| a@@7 b@@4) (|MultiSet#Multiplicity| b@@4 y@@3) (|MultiSet#Multiplicity| a@@7 y@@3))
)))
(assert (forall ((a@@8 T@U) (b@@5 T@U) ) (! (= (|Set#Union| (|Set#Union| a@@8 b@@5) b@@5) (|Set#Union| a@@8 b@@5))
 :pattern ( (|Set#Union| (|Set#Union| a@@8 b@@5) b@@5))
)))
(assert (forall ((a@@9 T@U) (b@@6 T@U) ) (! (= (|MultiSet#Intersection| (|MultiSet#Intersection| a@@9 b@@6) b@@6) (|MultiSet#Intersection| a@@9 b@@6))
 :pattern ( (|MultiSet#Intersection| (|MultiSet#Intersection| a@@9 b@@6) b@@6))
)))
(assert (forall ((a@@10 T@U) (b@@7 T@U) (o@@1 T@U) ) (! (= (|Set#IsMember| (|Set#Difference| a@@10 b@@7) o@@1)  (and (|Set#IsMember| a@@10 o@@1) (not (|Set#IsMember| b@@7 o@@1))))
 :pattern ( (|Set#IsMember| (|Set#Difference| a@@10 b@@7) o@@1))
)))
(assert (forall ((a@@11 Int) ) (!  (=> (<= 0 a@@11) (= (|Math#clip| a@@11) a@@11))
 :pattern ( (|Math#clip| a@@11))
)))
(assert (forall ((x@@5 Int) ) (! (= (LitInt x@@5) x@@5)
 :pattern ( (LitInt x@@5))
)))
(assert (forall ((x@@6 T@U) (T T@T) ) (! (= (Lit T x@@6) x@@6)
 :pattern ( (Lit T x@@6))
)))
(assert (forall ((a@@12 T@U) (b@@8 T@U) (o@@2 T@U) ) (! (= (|MultiSet#Multiplicity| (|MultiSet#Intersection| a@@12 b@@8) o@@2) (|Math#min| (|MultiSet#Multiplicity| a@@12 o@@2) (|MultiSet#Multiplicity| b@@8 o@@2)))
 :pattern ( (|MultiSet#Multiplicity| (|MultiSet#Intersection| a@@12 b@@8) o@@2))
)))
(assert (forall ((x@@7 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@7)) x@@7)
 :pattern ( ($Unbox T@@0 x@@7))
)))
(assert (forall ((a@@13 T@U) (b@@9 T@U) ) (! (= (|Set#Disjoint| a@@13 b@@9) (forall ((o@@3 T@U) ) (!  (or (not (|Set#IsMember| a@@13 o@@3)) (not (|Set#IsMember| b@@9 o@@3)))
 :pattern ( (|Set#IsMember| a@@13 o@@3))
 :pattern ( (|Set#IsMember| b@@9 o@@3))
)))
 :pattern ( (|Set#Disjoint| a@@13 b@@9))
)))
(assert (forall ((a@@14 T@U) (x@@8 T@U) (y@@4 T@U) ) (!  (=> (or (not (= x@@8 y@@4)) (not true)) (= (|MultiSet#Multiplicity| a@@14 y@@4) (|MultiSet#Multiplicity| (|MultiSet#UnionOne| a@@14 x@@8) y@@4)))
 :pattern ( (|MultiSet#UnionOne| a@@14 x@@8) (|MultiSet#Multiplicity| a@@14 y@@4))
)))
(assert (= (Ctor SetType) 4))
(assert (forall ((v@@0 T@U) (t0@@0 T@U) ) (! (= ($Is SetType v@@0 (TSet t0@@0)) (forall ((bx T@U) ) (!  (=> (|Set#IsMember| v@@0 bx) ($IsBox bx t0@@0))
 :pattern ( (|Set#IsMember| v@@0 bx))
)))
 :pattern ( ($Is SetType v@@0 (TSet t0@@0)))
)))
(assert (forall ((a@@15 T@U) (x@@9 T@U) ) (! (= (|MultiSet#Card| (|MultiSet#UnionOne| a@@15 x@@9)) (+ (|MultiSet#Card| a@@15) 1))
 :pattern ( (|MultiSet#Card| (|MultiSet#UnionOne| a@@15 x@@9)))
)))
(assert (forall ((v@@1 T@U) (t T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@1) t h) ($IsAlloc T@@1 v@@1 t h))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@1) t h))
)))
(assert (forall ((a@@16 T@U) (b@@10 T@U) ) (! (= (|MultiSet#Card| (|MultiSet#Union| a@@16 b@@10)) (+ (|MultiSet#Card| a@@16) (|MultiSet#Card| b@@10)))
 :pattern ( (|MultiSet#Card| (|MultiSet#Union| a@@16 b@@10)))
)))
(assert (forall ((a@@17 T@U) (b@@11 T@U) (o@@4 T@U) ) (! (= (|Set#IsMember| (|Set#Union| a@@17 b@@11) o@@4)  (or (|Set#IsMember| a@@17 o@@4) (|Set#IsMember| b@@11 o@@4)))
 :pattern ( (|Set#IsMember| (|Set#Union| a@@17 b@@11) o@@4))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((_module._default.MultisetToSet$_T0@@1 T@U) ($ly@@1 T@U) ($Heap T@U) (|m#0@@1| T@U) ) (!  (=> (or (|_module.__default.MultisetToSet#canCall| _module._default.MultisetToSet$_T0@@1 (Lit MultiSetType |m#0@@1|)) (and (< 0 $FunctionContextHeight) (and ($IsGoodHeap $Heap) ($Is MultiSetType |m#0@@1| (TMultiSet _module._default.MultisetToSet$_T0@@1))))) (and (=> (or (not (= (|MultiSet#Card| (Lit MultiSetType |m#0@@1|)) (LitInt 0))) (not true)) (and (|$let#0$canCall| _module._default.MultisetToSet$_T0@@1 (Lit MultiSetType |m#0@@1|)) (|_module.__default.MultisetToSet#canCall| _module._default.MultisetToSet$_T0@@1 (|MultiSet#Difference| |m#0@@1| (|MultiSet#UnionOne| |MultiSet#Empty| (|$let#0_x| _module._default.MultisetToSet$_T0@@1 (Lit MultiSetType |m#0@@1|))))))) (= (_module.__default.MultisetToSet _module._default.MultisetToSet$_T0@@1 ($LS $ly@@1) (Lit MultiSetType |m#0@@1|)) (ite (= (|MultiSet#Card| (Lit MultiSetType |m#0@@1|)) (LitInt 0)) |Set#Empty| (let ((|x#1| (|$let#0_x| _module._default.MultisetToSet$_T0@@1 (Lit MultiSetType |m#0@@1|))))
(|Set#Union| (_module.__default.MultisetToSet _module._default.MultisetToSet$_T0@@1 ($LS $ly@@1) (|MultiSet#Difference| |m#0@@1| (|MultiSet#UnionOne| |MultiSet#Empty| |x#1|))) (|Set#UnionOne| |Set#Empty| |x#1|)))))))
 :weight 3
 :pattern ( (_module.__default.MultisetToSet _module._default.MultisetToSet$_T0@@1 ($LS $ly@@1) (Lit MultiSetType |m#0@@1|)) ($IsGoodHeap $Heap))
))))
(assert (forall ((a@@18 T@U) (b@@12 T@U) ) (!  (=> (|Set#Disjoint| a@@18 b@@12) (and (= (|Set#Difference| (|Set#Union| a@@18 b@@12) a@@18) b@@12) (= (|Set#Difference| (|Set#Union| a@@18 b@@12) b@@12) a@@18)))
 :pattern ( (|Set#Union| a@@18 b@@12))
)))
(assert (forall ((a@@19 T@U) (b@@13 T@U) ) (!  (=> (|MultiSet#Equal| a@@19 b@@13) (= a@@19 b@@13))
 :pattern ( (|MultiSet#Equal| a@@19 b@@13))
)))
(assert (forall ((v@@2 T@U) (t0@@1 T@U) ) (! (= ($Is MultiSetType v@@2 (TMultiSet t0@@1)) (forall ((bx@@0 T@U) ) (!  (=> (< 0 (|MultiSet#Multiplicity| v@@2 bx@@0)) ($IsBox bx@@0 t0@@1))
 :pattern ( (|MultiSet#Multiplicity| v@@2 bx@@0))
)))
 :pattern ( ($Is MultiSetType v@@2 (TMultiSet t0@@1)))
)))
(assert (forall ((_module._default.MultisetToSet$_T0@@2 T@U) (m T@U) ) (!  (=> (|$let#0$canCall| _module._default.MultisetToSet$_T0@@2 m) (> (|MultiSet#Multiplicity| m (|$let#0_x| _module._default.MultisetToSet$_T0@@2 m)) 0))
 :pattern ( (|$let#0_x| _module._default.MultisetToSet$_T0@@2 m))
)))
(assert (forall ((v@@3 T@U) (t@@0 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@3) t@@0) ($Is T@@2 v@@3 t@@0))
 :pattern ( ($IsBox ($Box T@@2 v@@3) t@@0))
)))
(assert (forall ((ms T@U) ) (! (= ($IsGoodMultiSet ms) (forall ((bx@@1 T@U) ) (!  (and (<= 0 (|MultiSet#Multiplicity| ms bx@@1)) (<= (|MultiSet#Multiplicity| ms bx@@1) (|MultiSet#Card| ms)))
 :pattern ( (|MultiSet#Multiplicity| ms bx@@1))
)))
 :pattern ( ($IsGoodMultiSet ms))
)))
(assert (forall ((s T@U) ) (! (<= 0 (|MultiSet#Card| s))
 :pattern ( (|MultiSet#Card| s))
)))
(assert (forall ((v@@4 T@U) (t0@@2 T@U) (h@@0 T@U) ) (! (= ($IsAlloc SetType v@@4 (TSet t0@@2) h@@0) (forall ((bx@@2 T@U) ) (!  (=> (|Set#IsMember| v@@4 bx@@2) ($IsAllocBox bx@@2 t0@@2 h@@0))
 :pattern ( (|Set#IsMember| v@@4 bx@@2))
)))
 :pattern ( ($IsAlloc SetType v@@4 (TSet t0@@2) h@@0))
)))
(assert (forall ((o@@5 T@U) ) (! (= (|MultiSet#Multiplicity| |MultiSet#Empty| o@@5) 0)
 :pattern ( (|MultiSet#Multiplicity| |MultiSet#Empty| o@@5))
)))
(assert (forall ((a@@20 T@U) (x@@10 T@U) ) (! (= (|MultiSet#Multiplicity| (|MultiSet#UnionOne| a@@20 x@@10) x@@10) (+ (|MultiSet#Multiplicity| a@@20 x@@10) 1))
 :pattern ( (|MultiSet#UnionOne| a@@20 x@@10))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($Heap@@0 T@U) (_module._default.MultisetToSet$_T0@@3 T@U) ($ly@@2 T@U) (|m#0@@2| T@U) ) (!  (=> (and (or (|_module.__default.MultisetToSet#canCall| _module._default.MultisetToSet$_T0@@3 |m#0@@2|) (and (< 0 $FunctionContextHeight) (and ($Is MultiSetType |m#0@@2| (TMultiSet _module._default.MultisetToSet$_T0@@3)) ($IsAlloc MultiSetType |m#0@@2| (TMultiSet _module._default.MultisetToSet$_T0@@3) $Heap@@0)))) ($IsGoodHeap $Heap@@0)) ($IsAlloc SetType (_module.__default.MultisetToSet _module._default.MultisetToSet$_T0@@3 $ly@@2 |m#0@@2|) (TSet _module._default.MultisetToSet$_T0@@3) $Heap@@0))
 :pattern ( ($IsAlloc SetType (_module.__default.MultisetToSet _module._default.MultisetToSet$_T0@@3 $ly@@2 |m#0@@2|) (TSet _module._default.MultisetToSet$_T0@@3) $Heap@@0))
))))
(assert (forall ((t@@1 T@U) ) (! (= (Inv0_TSet (TSet t@@1)) t@@1)
 :pattern ( (TSet t@@1))
)))
(assert (forall ((t@@2 T@U) ) (! (= (Tag (TSet t@@2)) TagSet)
 :pattern ( (TSet t@@2))
)))
(assert (forall ((t@@3 T@U) ) (! (= (Inv0_TMultiSet (TMultiSet t@@3)) t@@3)
 :pattern ( (TMultiSet t@@3))
)))
(assert (forall ((t@@4 T@U) ) (! (= (Tag (TMultiSet t@@4)) TagMultiSet)
 :pattern ( (TMultiSet t@@4))
)))
(assert (forall ((x@@11 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@11)) x@@11)
 :pattern ( ($Box T@@3 x@@11))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((_module._default.MultisetToSet$_T0@@4 T@U) ($ly@@3 T@U) (|m#0@@3| T@U) ) (!  (=> (or (|_module.__default.MultisetToSet#canCall| _module._default.MultisetToSet$_T0@@4 |m#0@@3|) (and (< 0 $FunctionContextHeight) ($Is MultiSetType |m#0@@3| (TMultiSet _module._default.MultisetToSet$_T0@@4)))) ($Is SetType (_module.__default.MultisetToSet _module._default.MultisetToSet$_T0@@4 $ly@@3 |m#0@@3|) (TSet _module._default.MultisetToSet$_T0@@4)))
 :pattern ( (_module.__default.MultisetToSet _module._default.MultisetToSet$_T0@@4 $ly@@3 |m#0@@3|))
))))
(assert (forall ((a@@21 T@U) (b@@14 T@U) ) (! (= (|Set#Union| a@@21 (|Set#Union| a@@21 b@@14)) (|Set#Union| a@@21 b@@14))
 :pattern ( (|Set#Union| a@@21 (|Set#Union| a@@21 b@@14)))
)))
(assert (forall ((a@@22 T@U) (b@@15 T@U) ) (! (= (|MultiSet#Intersection| a@@22 (|MultiSet#Intersection| a@@22 b@@15)) (|MultiSet#Intersection| a@@22 b@@15))
 :pattern ( (|MultiSet#Intersection| a@@22 (|MultiSet#Intersection| a@@22 b@@15)))
)))
(assert (forall ((s@@0 T@U) ) (!  (and (= (= (|MultiSet#Card| s@@0) 0) (= s@@0 |MultiSet#Empty|)) (=> (or (not (= (|MultiSet#Card| s@@0) 0)) (not true)) (exists ((x@@12 T@U) ) (! (< 0 (|MultiSet#Multiplicity| s@@0 x@@12))
 :pattern ( (|MultiSet#Multiplicity| s@@0 x@@12))
))))
 :pattern ( (|MultiSet#Card| s@@0))
)))
(assert (forall ((a@@23 T@U) (b@@16 T@U) (o@@6 T@U) ) (! (= (|MultiSet#Multiplicity| (|MultiSet#Union| a@@23 b@@16) o@@6) (+ (|MultiSet#Multiplicity| a@@23 o@@6) (|MultiSet#Multiplicity| b@@16 o@@6)))
 :pattern ( (|MultiSet#Multiplicity| (|MultiSet#Union| a@@23 b@@16) o@@6))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall ((t0@@3 T@T) (t1 T@T) (t2 T@T) (val T@U) (m@@0 T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0@@3 t1 t2 (MapType0Store t0@@3 t1 t2 m@@0 x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@1 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@1 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@1 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@2 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@2 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@2 y0@@0 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 5)) (= (Ctor FieldType) 6)) (forall ((t0@@4 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@3 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@4 t1@@0 (MapType1Store t0@@4 t1@@0 m@@3 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@4 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@4 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@4 y0@@1)))
 :weight 0
))) (= (Ctor BoxType) 7)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 8))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((a@@24 Int) (b@@17 Int) ) (! (= (<= a@@24 b@@17) (= (|Math#min| a@@24 b@@17) a@@24))
 :pattern ( (|Math#min| a@@24 b@@17))
)))
(assert (forall ((a@@25 Int) (b@@18 Int) ) (! (= (<= b@@18 a@@25) (= (|Math#min| a@@25 b@@18) b@@18))
 :pattern ( (|Math#min| a@@25 b@@18))
)))
(assert (forall ((bx@@3 T@U) (t@@5 T@U) ) (!  (=> ($IsBox bx@@3 (TSet t@@5)) (and (= ($Box SetType ($Unbox SetType bx@@3)) bx@@3) ($Is SetType ($Unbox SetType bx@@3) (TSet t@@5))))
 :pattern ( ($IsBox bx@@3 (TSet t@@5)))
)))
(assert (forall ((bx@@4 T@U) (t@@6 T@U) ) (!  (=> ($IsBox bx@@4 (TMultiSet t@@6)) (and (= ($Box MultiSetType ($Unbox MultiSetType bx@@4)) bx@@4) ($Is MultiSetType ($Unbox MultiSetType bx@@4) (TMultiSet t@@6))))
 :pattern ( ($IsBox bx@@4 (TMultiSet t@@6)))
)))
(assert (forall ((a@@26 T@U) (b@@19 T@U) (o@@7 T@U) ) (! (= (|MultiSet#Multiplicity| (|MultiSet#Difference| a@@26 b@@19) o@@7) (|Math#clip| (- (|MultiSet#Multiplicity| a@@26 o@@7) (|MultiSet#Multiplicity| b@@19 o@@7))))
 :pattern ( (|MultiSet#Multiplicity| (|MultiSet#Difference| a@@26 b@@19) o@@7))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((_module._default.MultisetToSet$_T0@@5 T@U) ($ly@@4 T@U) ($Heap@@1 T@U) (|m#0@@4| T@U) ) (!  (=> (or (|_module.__default.MultisetToSet#canCall| _module._default.MultisetToSet$_T0@@5 |m#0@@4|) (and (< 0 $FunctionContextHeight) (and ($IsGoodHeap $Heap@@1) ($Is MultiSetType |m#0@@4| (TMultiSet _module._default.MultisetToSet$_T0@@5))))) (and (=> (or (not (= (|MultiSet#Card| |m#0@@4|) (LitInt 0))) (not true)) (and (|$let#0$canCall| _module._default.MultisetToSet$_T0@@5 |m#0@@4|) (|_module.__default.MultisetToSet#canCall| _module._default.MultisetToSet$_T0@@5 (|MultiSet#Difference| |m#0@@4| (|MultiSet#UnionOne| |MultiSet#Empty| (|$let#0_x| _module._default.MultisetToSet$_T0@@5 |m#0@@4|)))))) (= (_module.__default.MultisetToSet _module._default.MultisetToSet$_T0@@5 ($LS $ly@@4) |m#0@@4|) (ite (= (|MultiSet#Card| |m#0@@4|) (LitInt 0)) |Set#Empty| (let ((|x#0| (|$let#0_x| _module._default.MultisetToSet$_T0@@5 |m#0@@4|)))
(|Set#Union| (_module.__default.MultisetToSet _module._default.MultisetToSet$_T0@@5 $ly@@4 (|MultiSet#Difference| |m#0@@4| (|MultiSet#UnionOne| |MultiSet#Empty| |x#0|))) (|Set#UnionOne| |Set#Empty| |x#0|)))))))
 :pattern ( (_module.__default.MultisetToSet _module._default.MultisetToSet$_T0@@5 ($LS $ly@@4) |m#0@@4|) ($IsGoodHeap $Heap@@1))
))))
(assert (forall ((a@@27 Int) ) (!  (=> (< a@@27 0) (= (|Math#clip| a@@27) 0))
 :pattern ( (|Math#clip| a@@27))
)))
(assert (forall ((x@@13 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@13))) (Lit BoxType ($Box intType (int_2_U x@@13))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@13))))
)))
(assert (forall ((x@@14 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@14)) (Lit BoxType ($Box T@@4 x@@14)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@14)))
)))
(assert (forall ((a@@28 T@U) (x@@15 T@U) (y@@5 T@U) ) (!  (=> (< 0 (|MultiSet#Multiplicity| a@@28 y@@5)) (< 0 (|MultiSet#Multiplicity| (|MultiSet#UnionOne| a@@28 x@@15) y@@5)))
 :pattern ( (|MultiSet#UnionOne| a@@28 x@@15) (|MultiSet#Multiplicity| a@@28 y@@5))
)))
(assert (forall ((a@@29 T@U) (x@@16 T@U) (o@@8 T@U) ) (! (= (< 0 (|MultiSet#Multiplicity| (|MultiSet#UnionOne| a@@29 x@@16) o@@8))  (or (= o@@8 x@@16) (< 0 (|MultiSet#Multiplicity| a@@29 o@@8))))
 :pattern ( (|MultiSet#Multiplicity| (|MultiSet#UnionOne| a@@29 x@@16) o@@8))
)))
(assert (forall ((a@@30 T@U) (b@@20 T@U) ) (! (= (|MultiSet#Equal| a@@30 b@@20) (forall ((o@@9 T@U) ) (! (= (|MultiSet#Multiplicity| a@@30 o@@9) (|MultiSet#Multiplicity| b@@20 o@@9))
 :pattern ( (|MultiSet#Multiplicity| a@@30 o@@9))
 :pattern ( (|MultiSet#Multiplicity| b@@20 o@@9))
)))
 :pattern ( (|MultiSet#Equal| a@@30 b@@20))
)))
(assert (forall ((a@@31 T@U) (b@@21 T@U) ) (! (= (|MultiSet#Subset| a@@31 b@@21) (forall ((o@@10 T@U) ) (! (<= (|MultiSet#Multiplicity| a@@31 o@@10) (|MultiSet#Multiplicity| b@@21 o@@10))
 :pattern ( (|MultiSet#Multiplicity| a@@31 o@@10))
 :pattern ( (|MultiSet#Multiplicity| b@@21 o@@10))
)))
 :pattern ( (|MultiSet#Subset| a@@31 b@@21))
)))
(assert (forall ((v@@5 T@U) (t0@@5 T@U) (h@@1 T@U) ) (! (= ($IsAlloc MultiSetType v@@5 (TMultiSet t0@@5) h@@1) (forall ((bx@@5 T@U) ) (!  (=> (< 0 (|MultiSet#Multiplicity| v@@5 bx@@5)) ($IsAllocBox bx@@5 t0@@5 h@@1))
 :pattern ( (|MultiSet#Multiplicity| v@@5 bx@@5))
)))
 :pattern ( ($IsAlloc MultiSetType v@@5 (TMultiSet t0@@5) h@@1))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun _module._default.MultisetToSet$_T0@@6 () T@U)
(declare-fun |m#0@@5| () T@U)
(declare-fun |x#2@0| () T@U)
(declare-fun $Heap@@2 () T@U)
(declare-fun |##m#0@0| () T@U)
(declare-fun $_ReadsFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun StartFuel_ParseGenerics._default.Many () T@U)
(declare-fun BaseFuel_ParseGenerics._default.Many () T@U)
(declare-fun StartFuelAssert_ParseGenerics._default.Many () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 10) (let ((anon7_correct  (and (=> (= (ControlFlow 0 4) (- 0 5)) (exists ((|x#3| T@U) )  (and ($IsBox |x#3| _module._default.MultisetToSet$_T0@@6) (> (|MultiSet#Multiplicity| |m#0@@5| |x#3|) 0)))) (=> (exists ((|x#3@@0| T@U) )  (and ($IsBox |x#3@@0| _module._default.MultisetToSet$_T0@@6) (> (|MultiSet#Multiplicity| |m#0@@5| |x#3@@0|) 0))) (=> (and ($IsBox |x#2@0| _module._default.MultisetToSet$_T0@@6) ($IsAllocBox |x#2@0| _module._default.MultisetToSet$_T0@@6 $Heap@@2)) (=> (and (and (> (|MultiSet#Multiplicity| |m#0@@5| |x#2@0|) 0) (= |##m#0@0| (|MultiSet#Difference| |m#0@@5| (|MultiSet#UnionOne| |MultiSet#Empty| |x#2@0|)))) (and ($IsAlloc MultiSetType |##m#0@0| (TMultiSet _module._default.MultisetToSet$_T0@@6) $Heap@@2) (= (ControlFlow 0 4) (- 0 3)))) (and (|MultiSet#Subset| |##m#0@0| |m#0@@5|) (not (|MultiSet#Equal| |##m#0@0| |m#0@@5|)))))))))
(let ((anon11_Else_correct  (=> (and (not (and ($IsBox |x#2@0| _module._default.MultisetToSet$_T0@@6) ($IsAllocBox |x#2@0| _module._default.MultisetToSet$_T0@@6 $Heap@@2))) (= (ControlFlow 0 7) 4)) anon7_correct)))
(let ((anon11_Then_correct  (=> (and (and ($IsBox |x#2@0| _module._default.MultisetToSet$_T0@@6) ($IsAllocBox |x#2@0| _module._default.MultisetToSet$_T0@@6 $Heap@@2)) (= (ControlFlow 0 6) 4)) anon7_correct)))
(let ((anon10_Else_correct  (=> (or (not (= (|MultiSet#Card| |m#0@@5|) (LitInt 0))) (not true)) (and (=> (= (ControlFlow 0 8) 6) anon11_Then_correct) (=> (= (ControlFlow 0 8) 7) anon11_Else_correct)))))
(let ((anon10_Then_correct true))
(let ((anon9_Then_correct true))
(let ((anon0_correct  (=> (and (and (= $_ReadsFrame@0 (|lambda#0| null $Heap@@2 alloc false)) (= StartFuel_ParseGenerics._default.Many ($LS BaseFuel_ParseGenerics._default.Many))) (and (= StartFuelAssert_ParseGenerics._default.Many ($LS ($LS BaseFuel_ParseGenerics._default.Many))) (= (AsFuelBottom BaseFuel_ParseGenerics._default.Many) BaseFuel_ParseGenerics._default.Many))) (and (and (=> (= (ControlFlow 0 9) 1) anon9_Then_correct) (=> (= (ControlFlow 0 9) 2) anon10_Then_correct)) (=> (= (ControlFlow 0 9) 8) anon10_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (and ($IsGoodHeap $Heap@@2) ($IsHeapAnchor $Heap@@2)) ($Is MultiSetType |m#0@@5| (TMultiSet _module._default.MultisetToSet$_T0@@6))) (and (= 0 $FunctionContextHeight) (= (ControlFlow 0 10) 9))) anon0_correct)))
PreconditionGeneratedEntry_correct)))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
