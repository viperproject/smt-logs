(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () Int)
(declare-fun $generated@@0 (T@U Int Int) Bool)
(declare-fun $generated@@1 (T@U) T@U)
(declare-fun $generated@@2 (Int Int) Bool)
(declare-fun $generated@@3 (Int) Int)
(declare-fun $generated@@4 (Int Int) Bool)
(declare-fun $generated@@5 (T@U Int Int) Bool)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 (T@T) Int)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (T@U) Bool)
(declare-fun $generated@@13 (Int) T@U)
(declare-fun $generated@@14 (T@U) Int)
(declare-fun $generated@@15 (Real) T@U)
(declare-fun $generated@@16 (T@U) Real)
(declare-fun $generated@@36 (T@T T@U) T@U)
(declare-fun $generated@@39 (T@T T@U) T@U)
(declare-fun $generated@@40 (T@T T@U) T@U)
(declare-fun $generated@@57 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@58 () T@T)
(declare-fun $generated@@59 () T@T)
(declare-fun $generated@@60 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@61 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@62 () T@T)
(declare-fun $generated@@63 (T@T T@T) T@T)
(declare-fun $generated@@64 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@65 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@66 (T@T) T@T)
(declare-fun $generated@@67 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@7 $generated@@8) 0) (= ($generated@@7 $generated@@9) 1)) (= ($generated@@7 $generated@@10) 2)) (forall (($generated@@17 Bool) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Int) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@16 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 T@U) ) (! (= ($generated@@15 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))))
(assert  (=> (<= 1 $generated) (forall (($generated@@23 T@U) ($generated@@24 Int) ($generated@@25 Int) ) (!  (=> (or ($generated@@2 $generated@@24 $generated@@25) (and (< 1 $generated) (<= ($generated@@3 0) $generated@@24))) (and (=> (< 0 $generated@@24) ($generated@@4 (- $generated@@24 1) $generated@@25)) (= ($generated@@0 ($generated@@1 $generated@@23) $generated@@24 $generated@@25)  (and (< 0 $generated@@24) ($generated@@5 ($generated@@1 $generated@@6) (- $generated@@24 1) $generated@@25)))))
 :pattern ( ($generated@@0 ($generated@@1 $generated@@23) $generated@@24 $generated@@25))
))))
(assert  (=> (<= 1 $generated) (forall (($generated@@26 T@U) ($generated@@27 Int) ($generated@@28 Int) ) (!  (=> (or ($generated@@4 $generated@@27 $generated@@28) (and (< 1 $generated) (<= ($generated@@3 0) $generated@@27))) (and (=> (< 0 $generated@@27) ($generated@@2 (- $generated@@27 1) $generated@@28)) (= ($generated@@5 ($generated@@1 $generated@@26) $generated@@27 $generated@@28)  (and (< 0 $generated@@27) ($generated@@0 ($generated@@1 $generated@@6) (- $generated@@27 1) $generated@@28)))))
 :pattern ( ($generated@@5 ($generated@@1 $generated@@26) $generated@@27 $generated@@28))
))))
(assert  (=> (<= 1 $generated) (forall (($generated@@29 T@U) ($generated@@30 Int) ($generated@@31 Int) ) (!  (=> (= $generated@@31 0) (not ($generated@@0 $generated@@29 $generated@@31 $generated@@30)))
 :pattern ( ($generated@@0 $generated@@29 $generated@@31 $generated@@30))
))))
(assert  (=> (<= 1 $generated) (forall (($generated@@32 T@U) ($generated@@33 Int) ($generated@@34 Int) ) (!  (=> (= $generated@@34 0) (not ($generated@@5 $generated@@32 $generated@@34 $generated@@33)))
 :pattern ( ($generated@@5 $generated@@32 $generated@@34 $generated@@33))
))))
(assert (forall (($generated@@35 Int) ) (! (= ($generated@@3 $generated@@35) $generated@@35)
 :pattern ( ($generated@@3 $generated@@35))
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@T) ) (! (= ($generated@@36 $generated@@38 $generated@@37) $generated@@37)
 :pattern ( ($generated@@36 $generated@@38 $generated@@37))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@T) ) (! (= ($generated@@40 $generated@@42 ($generated@@39 $generated@@42 $generated@@41)) $generated@@41)
 :pattern ( ($generated@@39 $generated@@42 $generated@@41))
)))
(assert (forall (($generated@@43 T@U) ($generated@@44 Int) ($generated@@45 Int) ) (! (= ($generated@@0 ($generated@@1 $generated@@43) $generated@@44 $generated@@45) ($generated@@0 $generated@@43 $generated@@44 $generated@@45))
 :pattern ( ($generated@@0 ($generated@@1 $generated@@43) $generated@@44 $generated@@45))
)))
(assert (forall (($generated@@46 T@U) ($generated@@47 Int) ($generated@@48 Int) ) (! (= ($generated@@5 ($generated@@1 $generated@@46) $generated@@47 $generated@@48) ($generated@@5 $generated@@46 $generated@@47 $generated@@48))
 :pattern ( ($generated@@5 ($generated@@1 $generated@@46) $generated@@47 $generated@@48))
)))
(assert  (=> (<= 1 $generated) (forall (($generated@@49 T@U) ($generated@@50 Int) ($generated@@51 Int) ) (!  (=> (or ($generated@@2 ($generated@@3 $generated@@50) $generated@@51) (and (< 1 $generated) (<= ($generated@@3 0) $generated@@50))) (and (=> (< 0 $generated@@50) ($generated@@4 (- $generated@@50 1) $generated@@51)) (= ($generated@@0 ($generated@@1 $generated@@49) ($generated@@3 $generated@@50) $generated@@51)  (and (< 0 $generated@@50) ($generated@@5 ($generated@@1 $generated@@6) (- $generated@@50 1) $generated@@51)))))
 :weight 3
 :pattern ( ($generated@@0 ($generated@@1 $generated@@49) ($generated@@3 $generated@@50) $generated@@51))
))))
(assert  (=> (<= 1 $generated) (forall (($generated@@52 T@U) ($generated@@53 Int) ($generated@@54 Int) ) (!  (=> (or ($generated@@4 ($generated@@3 $generated@@53) $generated@@54) (and (< 1 $generated) (<= ($generated@@3 0) $generated@@53))) (and (=> (< 0 $generated@@53) ($generated@@2 (- $generated@@53 1) $generated@@54)) (= ($generated@@5 ($generated@@1 $generated@@52) ($generated@@3 $generated@@53) $generated@@54)  (and (< 0 $generated@@53) ($generated@@0 ($generated@@1 $generated@@6) (- $generated@@53 1) $generated@@54)))))
 :weight 3
 :pattern ( ($generated@@5 ($generated@@1 $generated@@52) ($generated@@3 $generated@@53) $generated@@54))
))))
(assert (forall (($generated@@55 T@U) ($generated@@56 T@T) ) (! (= ($generated@@39 $generated@@56 ($generated@@40 $generated@@56 $generated@@55)) $generated@@55)
 :pattern ( ($generated@@40 $generated@@56 $generated@@55))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@68 T@T) ($generated@@69 T@T) ($generated@@70 T@T) ($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@U) ) (! (= ($generated@@57 $generated@@68 $generated@@69 $generated@@70 ($generated@@64 $generated@@68 $generated@@69 $generated@@70 $generated@@72 $generated@@73 $generated@@74 $generated@@71) $generated@@73 $generated@@74) $generated@@71)
 :weight 0
)) (and (forall (($generated@@75 T@T) ($generated@@76 T@T) ($generated@@77 T@T) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ) (!  (or (= $generated@@80 $generated@@82) (= ($generated@@57 $generated@@75 $generated@@76 $generated@@77 ($generated@@64 $generated@@75 $generated@@76 $generated@@77 $generated@@79 $generated@@80 $generated@@81 $generated@@78) $generated@@82 $generated@@83) ($generated@@57 $generated@@75 $generated@@76 $generated@@77 $generated@@79 $generated@@82 $generated@@83)))
 :weight 0
)) (forall (($generated@@84 T@T) ($generated@@85 T@T) ($generated@@86 T@T) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ) (!  (or (= $generated@@90 $generated@@92) (= ($generated@@57 $generated@@84 $generated@@85 $generated@@86 ($generated@@64 $generated@@84 $generated@@85 $generated@@86 $generated@@88 $generated@@89 $generated@@90 $generated@@87) $generated@@91 $generated@@92) ($generated@@57 $generated@@84 $generated@@85 $generated@@86 $generated@@88 $generated@@91 $generated@@92)))
 :weight 0
)))) (= ($generated@@7 $generated@@58) 3)) (= ($generated@@7 $generated@@59) 4)) (forall (($generated@@93 T@T) ($generated@@94 T@T) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (! (= ($generated@@61 $generated@@93 $generated@@94 ($generated@@65 $generated@@93 $generated@@94 $generated@@96 $generated@@97 $generated@@95) $generated@@97) $generated@@95)
 :weight 0
))) (forall (($generated@@98 T@T) ($generated@@99 T@T) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ) (!  (or (= $generated@@102 $generated@@103) (= ($generated@@61 $generated@@98 $generated@@99 ($generated@@65 $generated@@98 $generated@@99 $generated@@101 $generated@@102 $generated@@100) $generated@@103) ($generated@@61 $generated@@98 $generated@@99 $generated@@101 $generated@@103)))
 :weight 0
))) (= ($generated@@7 $generated@@62) 5)) (forall (($generated@@104 T@T) ($generated@@105 T@T) ) (= ($generated@@7 ($generated@@63 $generated@@104 $generated@@105)) 6))) (forall (($generated@@106 T@T) ($generated@@107 T@T) ) (! (= ($generated@@66 ($generated@@63 $generated@@106 $generated@@107)) $generated@@106)
 :pattern ( ($generated@@63 $generated@@106 $generated@@107))
))) (forall (($generated@@108 T@T) ($generated@@109 T@T) ) (! (= ($generated@@67 ($generated@@63 $generated@@108 $generated@@109)) $generated@@109)
 :pattern ( ($generated@@63 $generated@@108 $generated@@109))
))))
(assert (forall (($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 Bool) ($generated@@114 T@U) ($generated@@115 T@U) ) (! (= ($generated@@12 ($generated@@57 $generated@@58 $generated@@59 $generated@@8 ($generated@@60 $generated@@110 $generated@@111 $generated@@112 $generated@@113) $generated@@114 $generated@@115))  (=> (and (or (not (= $generated@@114 $generated@@110)) (not true)) ($generated@@12 ($generated@@39 $generated@@8 ($generated@@61 $generated@@59 $generated@@62 ($generated@@61 $generated@@58 ($generated@@63 $generated@@59 $generated@@62) $generated@@111 $generated@@114) $generated@@112)))) $generated@@113))
 :pattern ( ($generated@@57 $generated@@58 $generated@@59 $generated@@8 ($generated@@60 $generated@@110 $generated@@111 $generated@@112 $generated@@113) $generated@@114 $generated@@115))
)))
(assert  (=> (<= 1 $generated) (forall (($generated@@116 T@U) ($generated@@117 Int) ($generated@@118 Int) ) (!  (=> (or ($generated@@2 ($generated@@3 $generated@@117) ($generated@@3 $generated@@118)) (and (< 1 $generated) (<= ($generated@@3 0) $generated@@117))) (and (=> (< 0 $generated@@117) ($generated@@4 (- $generated@@117 1) ($generated@@3 $generated@@118))) (= ($generated@@0 ($generated@@1 $generated@@116) ($generated@@3 $generated@@117) ($generated@@3 $generated@@118))  (and (< 0 $generated@@117) ($generated@@5 ($generated@@1 $generated@@6) (- $generated@@117 1) ($generated@@3 $generated@@118))))))
 :weight 3
 :pattern ( ($generated@@0 ($generated@@1 $generated@@116) ($generated@@3 $generated@@117) ($generated@@3 $generated@@118)))
))))
(assert  (=> (<= 1 $generated) (forall (($generated@@119 T@U) ($generated@@120 Int) ($generated@@121 Int) ) (!  (=> (or ($generated@@4 ($generated@@3 $generated@@120) ($generated@@3 $generated@@121)) (and (< 1 $generated) (<= ($generated@@3 0) $generated@@120))) (and (=> (< 0 $generated@@120) ($generated@@2 (- $generated@@120 1) ($generated@@3 $generated@@121))) (= ($generated@@5 ($generated@@1 $generated@@119) ($generated@@3 $generated@@120) ($generated@@3 $generated@@121))  (and (< 0 $generated@@120) ($generated@@0 ($generated@@1 $generated@@6) (- $generated@@120 1) ($generated@@3 $generated@@121))))))
 :weight 3
 :pattern ( ($generated@@5 ($generated@@1 $generated@@119) ($generated@@3 $generated@@120) ($generated@@3 $generated@@121)))
))))
(assert (forall (($generated@@122 Int) ) (! (= ($generated@@40 $generated@@9 ($generated@@13 ($generated@@3 $generated@@122))) ($generated@@36 $generated@@62 ($generated@@40 $generated@@9 ($generated@@13 $generated@@122))))
 :pattern ( ($generated@@40 $generated@@9 ($generated@@13 ($generated@@3 $generated@@122))))
)))
(assert (forall (($generated@@123 T@U) ($generated@@124 T@T) ) (! (= ($generated@@40 $generated@@124 ($generated@@36 $generated@@124 $generated@@123)) ($generated@@36 $generated@@62 ($generated@@40 $generated@@124 $generated@@123)))
 :pattern ( ($generated@@40 $generated@@124 ($generated@@36 $generated@@124 $generated@@123)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@125 () Int)
(declare-fun $generated@@126 () T@U)
(declare-fun $generated@@127 () T@U)
(declare-fun $generated@@128 () T@U)
(declare-fun $generated@@129 () T@U)
(declare-fun $generated@@130 (T@U) Bool)
(declare-fun $generated@@131 () T@U)
(declare-fun $generated@@132 (T@U) Bool)
(declare-fun $generated@@133 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 6) (let (($generated@@134  (=> (= (ControlFlow 0 2) (- 0 1)) ($generated@@12 ($generated@@36 $generated@@8 ($generated@@11 false))))))
(let (($generated@@135  (=> (and (<= $generated@@125 0) (= (ControlFlow 0 4) 2)) $generated@@134)))
(let (($generated@@136  (=> (and (< 0 $generated@@125) (= (ControlFlow 0 3) 2)) $generated@@134)))
(let (($generated@@137  (=> (= $generated@@126 ($generated@@60 $generated@@127 $generated@@128 $generated@@129 false)) (=> (and (and ($generated@@130 $generated@@131) ($generated@@132 $generated@@131)) (and (= $generated@@128 $generated@@131) (forall (($generated@@138 Int) ($generated@@139 Int) ) (!  (=> (and (and (<= ($generated@@3 0) $generated@@138) (or ($generated@@0 ($generated@@1 $generated@@6) $generated@@138 $generated@@139) ($generated@@5 ($generated@@1 $generated@@6) $generated@@138 $generated@@139))) (or (and (<= 0 $generated@@138) (< $generated@@138 $generated@@125)) (and (= $generated@@138 $generated@@125) (and (<= 0 $generated@@139) (< $generated@@139 $generated@@133))))) ($generated@@12 ($generated@@36 $generated@@8 ($generated@@11 false))))
 :pattern ( ($generated@@5 ($generated@@1 $generated@@6) $generated@@138 $generated@@139))
 :pattern ( ($generated@@0 ($generated@@1 $generated@@6) $generated@@138 $generated@@139))
)))) (and (=> (= (ControlFlow 0 5) 3) $generated@@136) (=> (= (ControlFlow 0 5) 4) $generated@@135))))))
(let (($generated@@140  (=> (and ($generated@@130 $generated@@128) ($generated@@132 $generated@@128)) (=> (and (and (<= ($generated@@3 0) $generated@@125) (= 2 $generated)) (and (or ($generated@@0 ($generated@@1 ($generated@@1 $generated@@6)) $generated@@125 $generated@@133) ($generated@@5 ($generated@@1 ($generated@@1 $generated@@6)) $generated@@125 $generated@@133)) (= (ControlFlow 0 6) 5))) $generated@@137))))
$generated@@140))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
