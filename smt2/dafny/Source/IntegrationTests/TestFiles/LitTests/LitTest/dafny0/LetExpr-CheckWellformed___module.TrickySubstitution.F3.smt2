(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 () Int)
(declare-fun $generated@@22 (T@U Int) Int)
(declare-fun $generated@@23 (Int) Int)
(declare-fun $generated@@24 (T@U) Bool)
(declare-fun $generated@@25 (T@U Int) Bool)
(declare-fun $generated@@26 () T@U)
(declare-fun $generated@@27 (T@T T@U T@U) Bool)
(declare-fun $generated@@28 () T@T)
(declare-fun $generated@@29 () T@U)
(declare-fun $generated@@30 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@31 (Int) Bool)
(declare-fun $generated@@32 (Int) Bool)
(declare-fun $generated@@33 (Int) Int)
(declare-fun $generated@@34 (Int) Int)
(declare-fun $generated@@40 (T@U) T@U)
(declare-fun $generated@@41 () T@U)
(declare-fun $generated@@42 (T@U) T@U)
(declare-fun $generated@@48 (T@T T@U) T@U)
(declare-fun $generated@@49 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@50 () T@T)
(declare-fun $generated@@51 () T@T)
(declare-fun $generated@@52 (T@T T@T) T@T)
(declare-fun $generated@@53 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@54 (T@T) T@T)
(declare-fun $generated@@55 (T@T) T@T)
(declare-fun $generated@@76 (T@T T@U) T@U)
(declare-fun $generated@@79 (T@T T@U) T@U)
(declare-fun $generated@@82 (T@U T@U T@U) Bool)
(declare-fun $generated@@102 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@103 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@104 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@136 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert (= ($generated@@5 $generated@@28) 3))
(assert  (=> (<= 0 $generated@@21) (forall (($generated@@35 T@U) ($generated@@36 T@U) ($generated@@37 Int) ) (!  (=> (or ($generated@@25 $generated@@36 ($generated@@23 $generated@@37)) (and (< 0 $generated@@21) (and ($generated@@24 $generated@@35) (and (or (not (= $generated@@36 $generated@@26)) (not true)) (and ($generated@@27 $generated@@28 $generated@@36 $generated@@29) ($generated@@30 $generated@@28 $generated@@36 $generated@@29 $generated@@35)))))) (and (and ($generated@@31 ($generated@@23 $generated@@37)) ($generated@@32 ($generated@@33 ($generated@@23 $generated@@37)))) (= ($generated@@22 $generated@@36 ($generated@@23 $generated@@37)) (let (($generated@@38 ($generated@@33 ($generated@@23 $generated@@37))))
(let (($generated@@39 ($generated@@34 $generated@@38)))
$generated@@39)))))
 :weight 3
 :pattern ( ($generated@@22 $generated@@36 ($generated@@23 $generated@@37)) ($generated@@24 $generated@@35))
))))
(assert (= ($generated@@40 $generated) $generated@@0))
(assert (forall (($generated@@43 T@U) ) (! (= ($generated@@27 $generated@@28 $generated@@43 $generated@@41)  (or (= $generated@@43 $generated@@26) (= ($generated@@42 $generated@@43) $generated@@41)))
 :pattern ( ($generated@@27 $generated@@28 $generated@@43 $generated@@41))
)))
(assert (forall (($generated@@44 T@U) ($generated@@45 T@U) ) (! (= ($generated@@30 $generated@@28 $generated@@44 $generated@@29 $generated@@45) ($generated@@30 $generated@@28 $generated@@44 $generated@@41 $generated@@45))
 :pattern ( ($generated@@30 $generated@@28 $generated@@44 $generated@@29 $generated@@45))
 :pattern ( ($generated@@30 $generated@@28 $generated@@44 $generated@@41 $generated@@45))
)))
(assert  (=> (<= 0 $generated@@21) (forall (($generated@@46 T@U) ($generated@@47 Int) ) (!  (=> (or ($generated@@25 $generated@@46 $generated@@47) (and (< 0 $generated@@21) (and (or (not (= $generated@@46 $generated@@26)) (not true)) ($generated@@27 $generated@@28 $generated@@46 $generated@@29)))) (= ($generated@@22 $generated@@46 $generated@@47) $generated@@47))
 :pattern ( ($generated@@22 $generated@@46 $generated@@47))
))))
(assert  (and (and (and (and (and (and (forall (($generated@@56 T@T) ($generated@@57 T@T) ($generated@@58 T@U) ($generated@@59 T@U) ($generated@@60 T@U) ) (! (= ($generated@@49 $generated@@56 $generated@@57 ($generated@@53 $generated@@56 $generated@@57 $generated@@59 $generated@@60 $generated@@58) $generated@@60) $generated@@58)
 :weight 0
)) (forall (($generated@@61 T@T) ($generated@@62 T@T) ($generated@@63 T@U) ($generated@@64 T@U) ($generated@@65 T@U) ($generated@@66 T@U) ) (!  (or (= $generated@@65 $generated@@66) (= ($generated@@49 $generated@@61 $generated@@62 ($generated@@53 $generated@@61 $generated@@62 $generated@@64 $generated@@65 $generated@@63) $generated@@66) ($generated@@49 $generated@@61 $generated@@62 $generated@@64 $generated@@66)))
 :weight 0
))) (= ($generated@@5 $generated@@50) 4)) (= ($generated@@5 $generated@@51) 5)) (forall (($generated@@67 T@T) ($generated@@68 T@T) ) (= ($generated@@5 ($generated@@52 $generated@@67 $generated@@68)) 6))) (forall (($generated@@69 T@T) ($generated@@70 T@T) ) (! (= ($generated@@54 ($generated@@52 $generated@@69 $generated@@70)) $generated@@69)
 :pattern ( ($generated@@52 $generated@@69 $generated@@70))
))) (forall (($generated@@71 T@T) ($generated@@72 T@T) ) (! (= ($generated@@55 ($generated@@52 $generated@@71 $generated@@72)) $generated@@72)
 :pattern ( ($generated@@52 $generated@@71 $generated@@72))
))))
(assert (forall (($generated@@73 T@U) ($generated@@74 T@U) ) (! (= ($generated@@30 $generated@@28 $generated@@73 $generated@@41 $generated@@74)  (or (= $generated@@73 $generated@@26) ($generated@@10 ($generated@@48 $generated@@6 ($generated@@49 $generated@@50 $generated@@51 ($generated@@49 $generated@@28 ($generated@@52 $generated@@50 $generated@@51) $generated@@74 $generated@@73) $generated@@1)))))
 :pattern ( ($generated@@30 $generated@@28 $generated@@73 $generated@@41 $generated@@74))
)))
(assert (forall (($generated@@75 Int) ) (! (= ($generated@@23 $generated@@75) $generated@@75)
 :pattern ( ($generated@@23 $generated@@75))
)))
(assert (forall (($generated@@77 T@U) ($generated@@78 T@T) ) (! (= ($generated@@76 $generated@@78 $generated@@77) $generated@@77)
 :pattern ( ($generated@@76 $generated@@78 $generated@@77))
)))
(assert (forall (($generated@@80 T@U) ($generated@@81 T@T) ) (! (= ($generated@@79 $generated@@81 ($generated@@48 $generated@@81 $generated@@80)) $generated@@80)
 :pattern ( ($generated@@48 $generated@@81 $generated@@80))
)))
(assert (forall (($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@T) ) (! (= ($generated@@82 ($generated@@79 $generated@@86 $generated@@83) $generated@@84 $generated@@85) ($generated@@30 $generated@@86 $generated@@83 $generated@@84 $generated@@85))
 :pattern ( ($generated@@82 ($generated@@79 $generated@@86 $generated@@83) $generated@@84 $generated@@85))
)))
(assert (forall (($generated@@87 T@U) ) (! (= ($generated@@27 $generated@@28 $generated@@87 $generated@@29)  (and ($generated@@27 $generated@@28 $generated@@87 $generated@@41) (or (not (= $generated@@87 $generated@@26)) (not true))))
 :pattern ( ($generated@@27 $generated@@28 $generated@@87 $generated@@29))
 :pattern ( ($generated@@27 $generated@@28 $generated@@87 $generated@@41))
)))
(assert  (=> (<= 0 $generated@@21) (forall (($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 Int) ) (!  (=> (or ($generated@@25 ($generated@@76 $generated@@28 $generated@@89) ($generated@@23 $generated@@90)) (and (< 0 $generated@@21) (and ($generated@@24 $generated@@88) (and (or (not (= $generated@@89 $generated@@26)) (not true)) (and ($generated@@27 $generated@@28 $generated@@89 $generated@@29) ($generated@@30 $generated@@28 $generated@@89 $generated@@29 $generated@@88)))))) (and (and ($generated@@31 ($generated@@23 $generated@@90)) ($generated@@32 ($generated@@33 ($generated@@23 $generated@@90)))) (= ($generated@@22 ($generated@@76 $generated@@28 $generated@@89) ($generated@@23 $generated@@90)) (let (($generated@@91 ($generated@@33 ($generated@@23 $generated@@90))))
(let (($generated@@92 ($generated@@34 $generated@@91)))
$generated@@92)))))
 :weight 3
 :pattern ( ($generated@@22 ($generated@@76 $generated@@28 $generated@@89) ($generated@@23 $generated@@90)) ($generated@@24 $generated@@88))
))))
(assert  (=> (<= 0 $generated@@21) (forall (($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 Int) ) (!  (=> (or ($generated@@25 $generated@@94 $generated@@95) (and (< 0 $generated@@21) (and ($generated@@24 $generated@@93) (and (or (not (= $generated@@94 $generated@@26)) (not true)) (and ($generated@@27 $generated@@28 $generated@@94 $generated@@29) ($generated@@30 $generated@@28 $generated@@94 $generated@@29 $generated@@93)))))) (and (and ($generated@@31 $generated@@95) ($generated@@32 ($generated@@33 $generated@@95))) (= ($generated@@22 $generated@@94 $generated@@95) (let (($generated@@96 ($generated@@33 $generated@@95)))
(let (($generated@@97 ($generated@@34 $generated@@96)))
$generated@@97)))))
 :pattern ( ($generated@@22 $generated@@94 $generated@@95) ($generated@@24 $generated@@93))
))))
(assert (forall (($generated@@98 Int) ) (!  (=> ($generated@@31 $generated@@98) (= ($generated@@33 $generated@@98) $generated@@98))
 :pattern ( ($generated@@33 $generated@@98))
)))
(assert (forall (($generated@@99 T@U) ($generated@@100 T@T) ) (! (= ($generated@@48 $generated@@100 ($generated@@79 $generated@@100 $generated@@99)) $generated@@99)
 :pattern ( ($generated@@79 $generated@@100 $generated@@99))
)))
(assert (forall (($generated@@101 Int) ) (!  (=> ($generated@@32 $generated@@101) (= $generated@@101 ($generated@@34 $generated@@101)))
 :pattern ( ($generated@@34 $generated@@101))
)))
(assert  (and (forall (($generated@@105 T@T) ($generated@@106 T@T) ($generated@@107 T@T) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (! (= ($generated@@102 $generated@@105 $generated@@106 $generated@@107 ($generated@@104 $generated@@105 $generated@@106 $generated@@107 $generated@@109 $generated@@110 $generated@@111 $generated@@108) $generated@@110 $generated@@111) $generated@@108)
 :weight 0
)) (and (forall (($generated@@112 T@T) ($generated@@113 T@T) ($generated@@114 T@T) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (!  (or (= $generated@@117 $generated@@119) (= ($generated@@102 $generated@@112 $generated@@113 $generated@@114 ($generated@@104 $generated@@112 $generated@@113 $generated@@114 $generated@@116 $generated@@117 $generated@@118 $generated@@115) $generated@@119 $generated@@120) ($generated@@102 $generated@@112 $generated@@113 $generated@@114 $generated@@116 $generated@@119 $generated@@120)))
 :weight 0
)) (forall (($generated@@121 T@T) ($generated@@122 T@T) ($generated@@123 T@T) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 T@U) ) (!  (or (= $generated@@127 $generated@@129) (= ($generated@@102 $generated@@121 $generated@@122 $generated@@123 ($generated@@104 $generated@@121 $generated@@122 $generated@@123 $generated@@125 $generated@@126 $generated@@127 $generated@@124) $generated@@128 $generated@@129) ($generated@@102 $generated@@121 $generated@@122 $generated@@123 $generated@@125 $generated@@128 $generated@@129)))
 :weight 0
)))))
(assert (forall (($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 Bool) ($generated@@134 T@U) ($generated@@135 T@U) ) (! (= ($generated@@10 ($generated@@102 $generated@@28 $generated@@50 $generated@@6 ($generated@@103 $generated@@130 $generated@@131 $generated@@132 $generated@@133) $generated@@134 $generated@@135))  (=> (and (or (not (= $generated@@134 $generated@@130)) (not true)) ($generated@@10 ($generated@@48 $generated@@6 ($generated@@49 $generated@@50 $generated@@51 ($generated@@49 $generated@@28 ($generated@@52 $generated@@50 $generated@@51) $generated@@131 $generated@@134) $generated@@132)))) $generated@@133))
 :pattern ( ($generated@@102 $generated@@28 $generated@@50 $generated@@6 ($generated@@103 $generated@@130 $generated@@131 $generated@@132 $generated@@133) $generated@@134 $generated@@135))
)))
(assert (= ($generated@@40 $generated@@41) $generated@@2))
(assert (= ($generated@@136 $generated@@41) $generated@@4))
(assert (= ($generated@@40 $generated@@29) $generated@@3))
(assert (= ($generated@@136 $generated@@29) $generated@@4))
(assert (forall (($generated@@137 Int) ) (! (= ($generated@@79 $generated@@7 ($generated@@11 ($generated@@23 $generated@@137))) ($generated@@76 $generated@@51 ($generated@@79 $generated@@7 ($generated@@11 $generated@@137))))
 :pattern ( ($generated@@79 $generated@@7 ($generated@@11 ($generated@@23 $generated@@137))))
)))
(assert (forall (($generated@@138 T@U) ($generated@@139 T@T) ) (! (= ($generated@@79 $generated@@139 ($generated@@76 $generated@@139 $generated@@138)) ($generated@@76 $generated@@51 ($generated@@79 $generated@@139 $generated@@138)))
 :pattern ( ($generated@@79 $generated@@139 ($generated@@76 $generated@@139 $generated@@138)))
)))
(assert (forall (($generated@@140 T@U) ($generated@@141 T@U) ) (! ($generated@@30 $generated@@7 $generated@@141 $generated $generated@@140)
 :pattern ( ($generated@@30 $generated@@7 $generated@@141 $generated $generated@@140))
)))
(assert (forall (($generated@@142 T@U) ) (! ($generated@@27 $generated@@7 $generated@@142 $generated)
 :pattern ( ($generated@@27 $generated@@7 $generated@@142 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@143 () T@U)
(declare-fun $generated@@144 () Int)
(declare-fun $generated@@145 () Int)
(declare-fun $generated@@146 () Int)
(declare-fun $generated@@147 () T@U)
(declare-fun $generated@@148 () T@U)
(declare-fun $generated@@149 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 13) (let (($generated@@150  (=> (= (ControlFlow 0 7) (- 0 6)) (= ($generated@@22 $generated@@143 $generated@@144) $generated@@144))))
(let (($generated@@151  (and (=> (= (ControlFlow 0 8) (- 0 9)) (or (and ($generated@@27 $generated@@7 ($generated@@11 $generated@@145) $generated) (= $generated@@145 $generated@@145)) (or (and ($generated@@27 $generated@@7 ($generated@@11 ($generated@@23 0)) $generated) (= $generated@@145 ($generated@@23 0))) (exists (($generated@@152 Int) ) (= $generated@@145 $generated@@152))))) (=> (or (and ($generated@@27 $generated@@7 ($generated@@11 $generated@@145) $generated) (= $generated@@145 $generated@@145)) (or (and ($generated@@27 $generated@@7 ($generated@@11 ($generated@@23 0)) $generated) (= $generated@@145 ($generated@@23 0))) (exists (($generated@@153 Int) ) (= $generated@@145 $generated@@153)))) (=> (= $generated@@145 $generated@@146) (=> (and ($generated@@32 $generated@@145) ($generated@@31 $generated@@144)) (=> (and (and (= ($generated@@22 $generated@@143 $generated@@144) (let (($generated@@154 ($generated@@34 $generated@@145)))
$generated@@154)) ($generated@@32 $generated@@145)) (and ($generated@@27 $generated@@7 ($generated@@11 ($generated@@22 $generated@@143 $generated@@144)) $generated) (= (ControlFlow 0 8) 7))) $generated@@150)))))))
(let (($generated@@155 true))
(let (($generated@@156  (and (=> (= (ControlFlow 0 10) (- 0 11)) (or (and ($generated@@27 $generated@@7 ($generated@@11 $generated@@144) $generated) (= $generated@@144 $generated@@144)) (or (and ($generated@@27 $generated@@7 ($generated@@11 ($generated@@23 0)) $generated) (= ($generated@@23 0) $generated@@144)) (exists (($generated@@157 Int) ) (= $generated@@157 $generated@@144))))) (=> (or (and ($generated@@27 $generated@@7 ($generated@@11 $generated@@144) $generated) (= $generated@@144 $generated@@144)) (or (and ($generated@@27 $generated@@7 ($generated@@11 ($generated@@23 0)) $generated) (= ($generated@@23 0) $generated@@144)) (exists (($generated@@158 Int) ) (= $generated@@158 $generated@@144)))) (=> (= $generated@@145 $generated@@144) (and (=> (= (ControlFlow 0 10) 8) $generated@@151) (=> (= (ControlFlow 0 10) 5) $generated@@155)))))))
(let (($generated@@159 true))
(let (($generated@@160  (=> (and ($generated@@82 ($generated@@79 $generated@@28 $generated@@143) $generated@@41 $generated@@147) ($generated@@30 $generated@@7 ($generated@@11 $generated@@144) $generated $generated@@147)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (or (<= 0 $generated@@144) (= $generated@@144 $generated@@144))) (=> (or (<= 0 $generated@@144) (= $generated@@144 $generated@@144)) (=> (= (ControlFlow 0 2) (- 0 1)) (or (and (= $generated@@143 $generated@@143) (= $generated@@144 $generated@@144)) (< $generated@@144 $generated@@144))))))))
(let (($generated@@161  (=> (= $generated@@148 ($generated@@103 $generated@@26 $generated@@147 $generated@@1 false)) (and (and (=> (= (ControlFlow 0 12) 2) $generated@@160) (=> (= (ControlFlow 0 12) 10) $generated@@156)) (=> (= (ControlFlow 0 12) 4) $generated@@159)))))
(let (($generated@@162  (=> (and ($generated@@24 $generated@@147) ($generated@@149 $generated@@147)) (=> (and (and (or (not (= $generated@@143 $generated@@26)) (not true)) (and ($generated@@27 $generated@@28 $generated@@143 $generated@@29) ($generated@@30 $generated@@28 $generated@@143 $generated@@29 $generated@@147))) (and (= 0 $generated@@21) (= (ControlFlow 0 13) 12))) $generated@@161))))
$generated@@162)))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
