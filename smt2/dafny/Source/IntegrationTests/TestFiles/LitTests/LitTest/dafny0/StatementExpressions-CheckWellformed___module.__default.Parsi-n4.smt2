(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 (T@T) Int)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 () T@T)
(declare-fun $generated@@12 (Bool) T@U)
(declare-fun $generated@@13 (T@U) Bool)
(declare-fun $generated@@14 (Int) T@U)
(declare-fun $generated@@15 (T@U) Int)
(declare-fun $generated@@16 (Real) T@U)
(declare-fun $generated@@17 (T@U) Real)
(declare-fun $generated@@24 (T@U) T@U)
(declare-fun $generated@@25 () Int)
(declare-fun $generated@@26 (T@U) Int)
(declare-fun $generated@@27 (T@T T@U) T@U)
(declare-fun $generated@@28 () T@T)
(declare-fun $generated@@29 (T@U) Bool)
(declare-fun $generated@@30 (T@T T@U T@U) Bool)
(declare-fun $generated@@31 () T@U)
(declare-fun $generated@@32 (T@U) Bool)
(declare-fun $generated@@33 (Int) Int)
(declare-fun $generated@@38 (T@U) T@U)
(declare-fun $generated@@40 (T@U) Bool)
(declare-fun $generated@@42 (T@T T@U) T@U)
(declare-fun $generated@@43 (T@T T@U) T@U)
(declare-fun $generated@@46 (Int) T@U)
(declare-fun $generated@@49 (Bool) T@U)
(declare-fun $generated@@52 (T@U) Bool)
(declare-fun $generated@@56 (T@U) Int)
(declare-fun $generated@@63 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@64 () T@T)
(declare-fun $generated@@65 () T@T)
(declare-fun $generated@@66 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@67 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@68 () T@T)
(declare-fun $generated@@69 (T@T T@T) T@T)
(declare-fun $generated@@70 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@71 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@72 (T@T) T@T)
(declare-fun $generated@@73 (T@T) T@T)
(declare-fun $generated@@122 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@8 $generated@@9) 0) (= ($generated@@8 $generated@@10) 1)) (= ($generated@@8 $generated@@11) 2)) (forall (($generated@@18 Bool) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 Real) ) (! (= ($generated@@17 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 T@U) ) (! (= ($generated@@16 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7)
)
(assert (= ($generated@@24 $generated) $generated@@1))
(assert (= ($generated@@24 $generated@@0) $generated@@2))
(assert (= ($generated@@8 $generated@@28) 3))
(assert  (=> (<= 2 $generated@@25) (forall (($generated@@34 T@U) ) (!  (=> (or ($generated@@29 ($generated@@27 $generated@@28 $generated@@34)) (and (< 2 $generated@@25) ($generated@@30 $generated@@28 $generated@@34 $generated@@31))) (= ($generated@@26 ($generated@@27 $generated@@28 $generated@@34)) (ite ($generated@@32 ($generated@@27 $generated@@28 $generated@@34)) ($generated@@33 17) ($generated@@33 19))))
 :weight 3
 :pattern ( ($generated@@26 ($generated@@27 $generated@@28 $generated@@34)))
))))
(assert (forall (($generated@@35 Int) ) (! (= ($generated@@33 $generated@@35) $generated@@35)
 :pattern ( ($generated@@33 $generated@@35))
)))
(assert (forall (($generated@@36 T@U) ($generated@@37 T@T) ) (! (= ($generated@@27 $generated@@37 $generated@@36) $generated@@36)
 :pattern ( ($generated@@27 $generated@@37 $generated@@36))
)))
(assert (forall (($generated@@39 T@U) ) (! (= ($generated@@32 $generated@@39) (= ($generated@@38 $generated@@39) $generated@@5))
 :pattern ( ($generated@@32 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ) (! (= ($generated@@40 $generated@@41) (= ($generated@@38 $generated@@41) $generated@@6))
 :pattern ( ($generated@@40 $generated@@41))
)))
(assert (forall (($generated@@44 T@U) ($generated@@45 T@T) ) (! (= ($generated@@43 $generated@@45 ($generated@@42 $generated@@45 $generated@@44)) $generated@@44)
 :pattern ( ($generated@@42 $generated@@45 $generated@@44))
)))
(assert (forall (($generated@@47 T@U) ) (!  (=> ($generated@@32 $generated@@47) (exists (($generated@@48 Int) ) (= $generated@@47 ($generated@@46 $generated@@48))))
 :pattern ( ($generated@@32 $generated@@47))
)))
(assert (forall (($generated@@50 T@U) ) (!  (=> ($generated@@40 $generated@@50) (exists (($generated@@51 Bool) ) (= $generated@@50 ($generated@@49 $generated@@51))))
 :pattern ( ($generated@@40 $generated@@50))
)))
(assert (forall (($generated@@53 Bool) ) (! (= ($generated@@52 ($generated@@49 $generated@@53)) $generated@@53)
 :pattern ( ($generated@@49 $generated@@53))
)))
(assert (forall (($generated@@54 T@U) ) (!  (=> ($generated@@30 $generated@@28 $generated@@54 $generated@@31) (or ($generated@@32 $generated@@54) ($generated@@40 $generated@@54)))
 :pattern ( ($generated@@40 $generated@@54) ($generated@@30 $generated@@28 $generated@@54 $generated@@31))
 :pattern ( ($generated@@32 $generated@@54) ($generated@@30 $generated@@28 $generated@@54 $generated@@31))
)))
(assert (forall (($generated@@55 Int) ) (! (= ($generated@@38 ($generated@@46 $generated@@55)) $generated@@5)
 :pattern ( ($generated@@46 $generated@@55))
)))
(assert (forall (($generated@@57 Int) ) (! (= ($generated@@56 ($generated@@46 $generated@@57)) $generated@@57)
 :pattern ( ($generated@@46 $generated@@57))
)))
(assert (forall (($generated@@58 Bool) ) (! (= ($generated@@38 ($generated@@49 $generated@@58)) $generated@@6)
 :pattern ( ($generated@@49 $generated@@58))
)))
(assert (forall (($generated@@59 T@U) ($generated@@60 T@T) ) (! (= ($generated@@42 $generated@@60 ($generated@@43 $generated@@60 $generated@@59)) $generated@@59)
 :pattern ( ($generated@@43 $generated@@60 $generated@@59))
)))
(assert (forall (($generated@@61 Int) ) (! (= ($generated@@30 $generated@@28 ($generated@@46 $generated@@61) $generated@@31) ($generated@@30 $generated@@10 ($generated@@14 $generated@@61) $generated@@0))
 :pattern ( ($generated@@30 $generated@@28 ($generated@@46 $generated@@61) $generated@@31))
)))
(assert (forall (($generated@@62 Bool) ) (! (= ($generated@@30 $generated@@28 ($generated@@49 $generated@@62) $generated@@31) ($generated@@30 $generated@@9 ($generated@@12 $generated@@62) $generated))
 :pattern ( ($generated@@30 $generated@@28 ($generated@@49 $generated@@62) $generated@@31))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@74 T@T) ($generated@@75 T@T) ($generated@@76 T@T) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ) (! (= ($generated@@63 $generated@@74 $generated@@75 $generated@@76 ($generated@@70 $generated@@74 $generated@@75 $generated@@76 $generated@@78 $generated@@79 $generated@@80 $generated@@77) $generated@@79 $generated@@80) $generated@@77)
 :weight 0
)) (and (forall (($generated@@81 T@T) ($generated@@82 T@T) ($generated@@83 T@T) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ) (!  (or (= $generated@@86 $generated@@88) (= ($generated@@63 $generated@@81 $generated@@82 $generated@@83 ($generated@@70 $generated@@81 $generated@@82 $generated@@83 $generated@@85 $generated@@86 $generated@@87 $generated@@84) $generated@@88 $generated@@89) ($generated@@63 $generated@@81 $generated@@82 $generated@@83 $generated@@85 $generated@@88 $generated@@89)))
 :weight 0
)) (forall (($generated@@90 T@T) ($generated@@91 T@T) ($generated@@92 T@T) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ) (!  (or (= $generated@@96 $generated@@98) (= ($generated@@63 $generated@@90 $generated@@91 $generated@@92 ($generated@@70 $generated@@90 $generated@@91 $generated@@92 $generated@@94 $generated@@95 $generated@@96 $generated@@93) $generated@@97 $generated@@98) ($generated@@63 $generated@@90 $generated@@91 $generated@@92 $generated@@94 $generated@@97 $generated@@98)))
 :weight 0
)))) (= ($generated@@8 $generated@@64) 4)) (= ($generated@@8 $generated@@65) 5)) (forall (($generated@@99 T@T) ($generated@@100 T@T) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ) (! (= ($generated@@67 $generated@@99 $generated@@100 ($generated@@71 $generated@@99 $generated@@100 $generated@@102 $generated@@103 $generated@@101) $generated@@103) $generated@@101)
 :weight 0
))) (forall (($generated@@104 T@T) ($generated@@105 T@T) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ) (!  (or (= $generated@@108 $generated@@109) (= ($generated@@67 $generated@@104 $generated@@105 ($generated@@71 $generated@@104 $generated@@105 $generated@@107 $generated@@108 $generated@@106) $generated@@109) ($generated@@67 $generated@@104 $generated@@105 $generated@@107 $generated@@109)))
 :weight 0
))) (= ($generated@@8 $generated@@68) 6)) (forall (($generated@@110 T@T) ($generated@@111 T@T) ) (= ($generated@@8 ($generated@@69 $generated@@110 $generated@@111)) 7))) (forall (($generated@@112 T@T) ($generated@@113 T@T) ) (! (= ($generated@@72 ($generated@@69 $generated@@112 $generated@@113)) $generated@@112)
 :pattern ( ($generated@@69 $generated@@112 $generated@@113))
))) (forall (($generated@@114 T@T) ($generated@@115 T@T) ) (! (= ($generated@@73 ($generated@@69 $generated@@114 $generated@@115)) $generated@@115)
 :pattern ( ($generated@@69 $generated@@114 $generated@@115))
))))
(assert (forall (($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 Bool) ($generated@@120 T@U) ($generated@@121 T@U) ) (! (= ($generated@@13 ($generated@@63 $generated@@64 $generated@@65 $generated@@9 ($generated@@66 $generated@@116 $generated@@117 $generated@@118 $generated@@119) $generated@@120 $generated@@121))  (=> (and (or (not (= $generated@@120 $generated@@116)) (not true)) ($generated@@13 ($generated@@42 $generated@@9 ($generated@@67 $generated@@65 $generated@@68 ($generated@@67 $generated@@64 ($generated@@69 $generated@@65 $generated@@68) $generated@@117 $generated@@120) $generated@@118)))) $generated@@119))
 :pattern ( ($generated@@63 $generated@@64 $generated@@65 $generated@@9 ($generated@@66 $generated@@116 $generated@@117 $generated@@118 $generated@@119) $generated@@120 $generated@@121))
)))
(assert (= ($generated@@24 $generated@@31) $generated@@4))
(assert (= ($generated@@122 $generated@@31) $generated@@7))
(assert (forall (($generated@@123 Int) ) (! (= ($generated@@43 $generated@@10 ($generated@@14 ($generated@@33 $generated@@123))) ($generated@@27 $generated@@68 ($generated@@43 $generated@@10 ($generated@@14 $generated@@123))))
 :pattern ( ($generated@@43 $generated@@10 ($generated@@14 ($generated@@33 $generated@@123))))
)))
(assert (forall (($generated@@124 Int) ) (! (= ($generated@@46 ($generated@@33 $generated@@124)) ($generated@@27 $generated@@28 ($generated@@46 $generated@@124)))
 :pattern ( ($generated@@46 ($generated@@33 $generated@@124)))
)))
(assert (forall (($generated@@125 T@U) ) (! (= ($generated@@49 ($generated@@13 ($generated@@27 $generated@@9 $generated@@125))) ($generated@@27 $generated@@28 ($generated@@49 ($generated@@13 $generated@@125))))
 :pattern ( ($generated@@49 ($generated@@13 ($generated@@27 $generated@@9 $generated@@125))))
)))
(assert (forall (($generated@@126 T@U) ($generated@@127 T@T) ) (! (= ($generated@@43 $generated@@127 ($generated@@27 $generated@@127 $generated@@126)) ($generated@@27 $generated@@68 ($generated@@43 $generated@@127 $generated@@126)))
 :pattern ( ($generated@@43 $generated@@127 ($generated@@27 $generated@@127 $generated@@126)))
)))
(assert  (=> (<= 2 $generated@@25) (forall (($generated@@128 T@U) ) (!  (=> (or ($generated@@29 $generated@@128) (and (< 2 $generated@@25) ($generated@@30 $generated@@28 $generated@@128 $generated@@31))) (= ($generated@@26 $generated@@128) (ite ($generated@@32 $generated@@128) ($generated@@33 17) ($generated@@33 19))))
 :pattern ( ($generated@@26 $generated@@128))
))))
(assert (forall (($generated@@129 T@U) ) (! ($generated@@30 $generated@@10 $generated@@129 $generated@@0)
 :pattern ( ($generated@@30 $generated@@10 $generated@@129 $generated@@0))
)))
(assert (forall (($generated@@130 T@U) ) (! ($generated@@30 $generated@@9 $generated@@130 $generated)
 :pattern ( ($generated@@30 $generated@@9 $generated@@130 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@131 () Int)
(declare-fun $generated@@132 () Int)
(declare-fun $generated@@133 () Int)
(declare-fun $generated@@134 (T@U) Bool)
(declare-fun $generated@@135 () T@U)
(declare-fun $generated@@136 (T@U) Bool)
(declare-fun $generated@@137 () T@U)
(declare-fun $generated@@138 () T@U)
(declare-fun $generated@@139 () Int)
(declare-fun $generated@@140 () Int)
(declare-fun $generated@@141 () Int)
(declare-fun $generated@@142 () Int)
(declare-fun $generated@@143 () T@U)
(declare-fun $generated@@144 () Int)
(declare-fun $generated@@145 () Int)
(declare-fun $generated@@146 () Int)
(declare-fun $generated@@147 () T@U)
(declare-fun $generated@@148 () T@U)
(declare-fun $generated@@149 () Bool)
(declare-fun $generated@@150 () Int)
(declare-fun $generated@@151 () T@U)
(declare-fun $generated@@152 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 27) (let (($generated@@153 true))
(let (($generated@@154  (=> (= (ControlFlow 0 20) (- 0 19)) (< $generated@@131 (+ $generated@@131 1)))))
(let (($generated@@155 true))
(let (($generated@@156  (=> (and (and (< $generated@@132 (+ $generated@@132 1)) (= $generated@@133 ($generated@@33 12))) (and ($generated@@30 $generated@@10 ($generated@@14 $generated@@133) $generated@@0) (= $generated@@131 $generated@@133))) (and (=> (= (ControlFlow 0 22) (- 0 23)) (< $generated@@131 20)) (=> (< $generated@@131 20) (=> (and (and ($generated@@134 $generated@@135) ($generated@@136 $generated@@135)) (= $generated@@137 $generated@@135)) (and (and (=> (= (ControlFlow 0 22) 18) $generated@@155) (=> (= (ControlFlow 0 22) 20) $generated@@154)) (=> (= (ControlFlow 0 22) 21) $generated@@153))))))))
(let (($generated@@157  (=> (= (ControlFlow 0 17) (- 0 16)) (< $generated@@132 (+ $generated@@132 1)))))
(let (($generated@@158 true))
(let (($generated@@159  (=> (= $generated@@138 ($generated@@46 $generated@@139)) (=> (and (= $generated@@140 $generated@@139) ($generated@@30 $generated@@10 ($generated@@14 $generated@@140) $generated@@0)) (=> (and (and (= $generated@@141 $generated@@140) (= $generated@@142 ($generated@@33 12))) (and ($generated@@30 $generated@@10 ($generated@@14 $generated@@142) $generated@@0) (= $generated@@132 $generated@@142))) (and (=> (= (ControlFlow 0 24) (- 0 25)) (< $generated@@132 20)) (=> (< $generated@@132 20) (=> (and (and ($generated@@134 $generated@@137) ($generated@@136 $generated@@137)) (= $generated@@143 $generated@@137)) (and (and (=> (= (ControlFlow 0 24) 15) $generated@@158) (=> (= (ControlFlow 0 24) 17) $generated@@157)) (=> (= (ControlFlow 0 24) 22) $generated@@156))))))))))
(let (($generated@@160 true))
(let (($generated@@161  (=> (= (ControlFlow 0 8) (- 0 7)) (< $generated@@144 (+ $generated@@144 1)))))
(let (($generated@@162 true))
(let (($generated@@163  (=> (and (and (< $generated@@145 (+ $generated@@145 1)) (= $generated@@146 ($generated@@33 12))) (and ($generated@@30 $generated@@10 ($generated@@14 $generated@@146) $generated@@0) (= $generated@@144 $generated@@146))) (and (=> (= (ControlFlow 0 10) (- 0 11)) (< $generated@@144 20)) (=> (< $generated@@144 20) (=> (and (and ($generated@@134 $generated@@147) ($generated@@136 $generated@@147)) (= $generated@@148 $generated@@147)) (and (and (=> (= (ControlFlow 0 10) 6) $generated@@162) (=> (= (ControlFlow 0 10) 8) $generated@@161)) (=> (= (ControlFlow 0 10) 9) $generated@@160))))))))
(let (($generated@@164  (=> (= (ControlFlow 0 5) (- 0 4)) (< $generated@@145 (+ $generated@@145 1)))))
(let (($generated@@165 true))
(let (($generated@@166  (=> (and (and (= $generated@@138 ($generated@@49 $generated@@149)) (= $generated@@150 ($generated@@33 12))) (and ($generated@@30 $generated@@10 ($generated@@14 $generated@@150) $generated@@0) (= $generated@@145 $generated@@150))) (and (=> (= (ControlFlow 0 12) (- 0 13)) (< $generated@@145 20)) (=> (< $generated@@145 20) (=> (and (and ($generated@@134 $generated@@148) ($generated@@136 $generated@@148)) (= $generated@@143 $generated@@148)) (and (and (=> (= (ControlFlow 0 12) 3) $generated@@165) (=> (= (ControlFlow 0 12) 5) $generated@@164)) (=> (= (ControlFlow 0 12) 10) $generated@@163))))))))
(let (($generated@@167 true))
(let (($generated@@168  (=> (or (not (= $generated@@138 ($generated@@46 $generated@@139))) (not true)) (and (=> (= (ControlFlow 0 14) 12) $generated@@166) (=> (= (ControlFlow 0 14) 2) $generated@@167)))))
(let (($generated@@169 true))
(let (($generated@@170  (=> (= $generated@@151 ($generated@@66 $generated@@152 $generated@@143 $generated@@3 false)) (and (and (=> (= (ControlFlow 0 26) 1) $generated@@169) (=> (= (ControlFlow 0 26) 24) $generated@@159)) (=> (= (ControlFlow 0 26) 14) $generated@@168)))))
(let (($generated@@171  (=> (and (and (and ($generated@@134 $generated@@143) ($generated@@136 $generated@@143)) ($generated@@30 $generated@@28 $generated@@138 $generated@@31)) (and (= 2 $generated@@25) (= (ControlFlow 0 27) 26))) $generated@@170)))
$generated@@171))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
