(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U T@U) Bool)
(declare-fun $generated@@0 (T@T) Int)
(declare-fun $generated@@1 () T@T)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 (Bool) T@U)
(declare-fun $generated@@5 (T@U) Bool)
(declare-fun $generated@@6 (Int) T@U)
(declare-fun $generated@@7 (T@U) Int)
(declare-fun $generated@@8 (Real) T@U)
(declare-fun $generated@@9 (T@U) Real)
(declare-fun $generated@@19 (T@U T@U) T@U)
(declare-fun $generated@@20 (Int) T@U)
(declare-fun $generated@@21 (T@U) Int)
(declare-fun $generated@@25 (T@U T@U) Bool)
(declare-fun $generated@@26 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@27 () T@T)
(declare-fun $generated@@28 () T@T)
(declare-fun $generated@@29 () T@T)
(declare-fun $generated@@30 (T@T T@T) T@T)
(declare-fun $generated@@31 () T@U)
(declare-fun $generated@@32 (T@T T@U) T@U)
(declare-fun $generated@@33 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@34 (T@T) T@T)
(declare-fun $generated@@35 (T@T) T@T)
(declare-fun $generated@@56 (T@T T@U) T@U)
(declare-fun $generated@@59 (T@T T@U) T@U)
(declare-fun $generated@@62 (T@U) Bool)
(declare-fun $generated@@76 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@77 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@78 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@0 $generated@@1) 0) (= ($generated@@0 $generated@@2) 1)) (= ($generated@@0 $generated@@3) 2)) (forall (($generated@@10 Bool) ) (! (= ($generated@@5 ($generated@@4 $generated@@10)) $generated@@10)
 :pattern ( ($generated@@4 $generated@@10))
))) (forall (($generated@@11 T@U) ) (! (= ($generated@@4 ($generated@@5 $generated@@11)) $generated@@11)
 :pattern ( ($generated@@5 $generated@@11))
))) (forall (($generated@@12 Int) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Real) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))))
(assert (forall (($generated@@16 T@U) ($generated@@17 T@U) ($generated@@18 T@U) ) (!  (=> (and ($generated $generated@@16 $generated@@17) ($generated $generated@@17 $generated@@18)) ($generated $generated@@16 $generated@@18))
 :pattern ( ($generated $generated@@16 $generated@@17) ($generated $generated@@17 $generated@@18))
 :pattern ( ($generated $generated@@16 $generated@@17) ($generated $generated@@16 $generated@@18))
)))
(assert (forall (($generated@@22 T@U) ($generated@@23 Int) ($generated@@24 Int) ) (!  (=> (and (and (<= 0 $generated@@23) (<= 0 $generated@@24)) (<= (+ $generated@@23 $generated@@24) ($generated@@21 $generated@@22))) (= ($generated@@19 ($generated@@19 $generated@@22 ($generated@@20 $generated@@23)) ($generated@@20 $generated@@24)) ($generated@@19 $generated@@22 ($generated@@20 (+ $generated@@23 $generated@@24)))))
 :pattern ( ($generated@@19 ($generated@@19 $generated@@22 ($generated@@20 $generated@@23)) ($generated@@20 $generated@@24)))
)))
(assert  (and (and (and (and (and (and (and (forall (($generated@@36 T@T) ($generated@@37 T@T) ($generated@@38 T@U) ($generated@@39 T@U) ($generated@@40 T@U) ) (! (= ($generated@@26 $generated@@36 $generated@@37 ($generated@@33 $generated@@36 $generated@@37 $generated@@39 $generated@@40 $generated@@38) $generated@@40) $generated@@38)
 :weight 0
)) (forall (($generated@@41 T@T) ($generated@@42 T@T) ($generated@@43 T@U) ($generated@@44 T@U) ($generated@@45 T@U) ($generated@@46 T@U) ) (!  (or (= $generated@@45 $generated@@46) (= ($generated@@26 $generated@@41 $generated@@42 ($generated@@33 $generated@@41 $generated@@42 $generated@@44 $generated@@45 $generated@@43) $generated@@46) ($generated@@26 $generated@@41 $generated@@42 $generated@@44 $generated@@46)))
 :weight 0
))) (= ($generated@@0 $generated@@27) 3)) (= ($generated@@0 $generated@@28) 4)) (= ($generated@@0 $generated@@29) 5)) (forall (($generated@@47 T@T) ($generated@@48 T@T) ) (= ($generated@@0 ($generated@@30 $generated@@47 $generated@@48)) 6))) (forall (($generated@@49 T@T) ($generated@@50 T@T) ) (! (= ($generated@@34 ($generated@@30 $generated@@49 $generated@@50)) $generated@@49)
 :pattern ( ($generated@@30 $generated@@49 $generated@@50))
))) (forall (($generated@@51 T@T) ($generated@@52 T@T) ) (! (= ($generated@@35 ($generated@@30 $generated@@51 $generated@@52)) $generated@@52)
 :pattern ( ($generated@@30 $generated@@51 $generated@@52))
))))
(assert (forall (($generated@@53 T@U) ($generated@@54 T@U) ) (!  (=> ($generated@@25 $generated@@53 $generated@@54) (forall (($generated@@55 T@U) ) (!  (=> ($generated@@5 ($generated@@32 $generated@@1 ($generated@@26 $generated@@27 $generated@@28 ($generated@@26 $generated@@29 ($generated@@30 $generated@@27 $generated@@28) $generated@@53 $generated@@55) $generated@@31))) ($generated@@5 ($generated@@32 $generated@@1 ($generated@@26 $generated@@27 $generated@@28 ($generated@@26 $generated@@29 ($generated@@30 $generated@@27 $generated@@28) $generated@@54 $generated@@55) $generated@@31))))
 :pattern ( ($generated@@26 $generated@@27 $generated@@28 ($generated@@26 $generated@@29 ($generated@@30 $generated@@27 $generated@@28) $generated@@54 $generated@@55) $generated@@31))
)))
 :pattern ( ($generated@@25 $generated@@53 $generated@@54))
)))
(assert (forall (($generated@@57 T@U) ($generated@@58 T@T) ) (! (= ($generated@@56 $generated@@58 $generated@@57) $generated@@57)
 :pattern ( ($generated@@56 $generated@@58 $generated@@57))
)))
(assert (forall (($generated@@60 T@U) ($generated@@61 T@T) ) (! (= ($generated@@59 $generated@@61 ($generated@@32 $generated@@61 $generated@@60)) $generated@@60)
 :pattern ( ($generated@@32 $generated@@61 $generated@@60))
)))
(assert (forall (($generated@@63 T@U) ($generated@@64 T@U) ) (!  (=> (and ($generated@@62 $generated@@64) (<= ($generated@@21 $generated@@64) ($generated@@21 $generated@@63))) (and (= ($generated@@62 ($generated@@19 $generated@@63 $generated@@64)) ($generated@@62 $generated@@63)) (= ($generated@@21 ($generated@@19 $generated@@63 $generated@@64)) (- ($generated@@21 $generated@@63) ($generated@@21 $generated@@64)))))
 :pattern ( ($generated@@19 $generated@@63 $generated@@64))
)))
(assert (forall (($generated@@65 Int) ) (!  (=> (<= 0 $generated@@65) (and ($generated@@62 ($generated@@20 $generated@@65)) (= ($generated@@21 ($generated@@20 $generated@@65)) $generated@@65)))
 :pattern ( ($generated@@20 $generated@@65))
)))
(assert (forall (($generated@@66 T@U) ($generated@@67 T@U) ) (!  (or (or ($generated $generated@@66 $generated@@67) (= $generated@@66 $generated@@67)) ($generated $generated@@67 $generated@@66))
 :pattern ( ($generated $generated@@66 $generated@@67) ($generated $generated@@67 $generated@@66))
)))
(assert (forall (($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ) (!  (=> (or (not (= $generated@@68 $generated@@70)) (not true)) (=> (and ($generated@@25 $generated@@68 $generated@@69) ($generated@@25 $generated@@69 $generated@@70)) ($generated@@25 $generated@@68 $generated@@70)))
 :pattern ( ($generated@@25 $generated@@68 $generated@@69) ($generated@@25 $generated@@69 $generated@@70))
)))
(assert (forall (($generated@@71 T@U) ) (! (<= 0 ($generated@@21 $generated@@71))
 :pattern ( ($generated@@21 $generated@@71))
)))
(assert (forall (($generated@@72 T@U) ($generated@@73 T@T) ) (! (= ($generated@@32 $generated@@73 ($generated@@59 $generated@@73 $generated@@72)) $generated@@72)
 :pattern ( ($generated@@59 $generated@@73 $generated@@72))
)))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@U) ) (!  (and (and (and (=> ($generated $generated@@74 $generated@@75) (or (not (= $generated@@74 $generated@@75)) (not true))) (=> (and ($generated@@62 $generated@@74) (not ($generated@@62 $generated@@75))) ($generated $generated@@74 $generated@@75))) (=> (and ($generated@@62 $generated@@74) ($generated@@62 $generated@@75)) (= ($generated $generated@@74 $generated@@75) (< ($generated@@21 $generated@@74) ($generated@@21 $generated@@75))))) (=> (and ($generated $generated@@74 $generated@@75) ($generated@@62 $generated@@75)) ($generated@@62 $generated@@74)))
 :pattern ( ($generated $generated@@74 $generated@@75))
)))
(assert  (and (forall (($generated@@79 T@T) ($generated@@80 T@T) ($generated@@81 T@T) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ) (! (= ($generated@@76 $generated@@79 $generated@@80 $generated@@81 ($generated@@78 $generated@@79 $generated@@80 $generated@@81 $generated@@83 $generated@@84 $generated@@85 $generated@@82) $generated@@84 $generated@@85) $generated@@82)
 :weight 0
)) (and (forall (($generated@@86 T@T) ($generated@@87 T@T) ($generated@@88 T@T) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (!  (or (= $generated@@91 $generated@@93) (= ($generated@@76 $generated@@86 $generated@@87 $generated@@88 ($generated@@78 $generated@@86 $generated@@87 $generated@@88 $generated@@90 $generated@@91 $generated@@92 $generated@@89) $generated@@93 $generated@@94) ($generated@@76 $generated@@86 $generated@@87 $generated@@88 $generated@@90 $generated@@93 $generated@@94)))
 :weight 0
)) (forall (($generated@@95 T@T) ($generated@@96 T@T) ($generated@@97 T@T) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ) (!  (or (= $generated@@101 $generated@@103) (= ($generated@@76 $generated@@95 $generated@@96 $generated@@97 ($generated@@78 $generated@@95 $generated@@96 $generated@@97 $generated@@99 $generated@@100 $generated@@101 $generated@@98) $generated@@102 $generated@@103) ($generated@@76 $generated@@95 $generated@@96 $generated@@97 $generated@@99 $generated@@102 $generated@@103)))
 :weight 0
)))))
(assert (forall (($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 Bool) ($generated@@108 T@U) ($generated@@109 T@U) ) (! (= ($generated@@5 ($generated@@76 $generated@@29 $generated@@27 $generated@@1 ($generated@@77 $generated@@104 $generated@@105 $generated@@106 $generated@@107) $generated@@108 $generated@@109))  (=> (and (or (not (= $generated@@108 $generated@@104)) (not true)) ($generated@@5 ($generated@@32 $generated@@1 ($generated@@26 $generated@@27 $generated@@28 ($generated@@26 $generated@@29 ($generated@@30 $generated@@27 $generated@@28) $generated@@105 $generated@@108) $generated@@106)))) $generated@@107))
 :pattern ( ($generated@@76 $generated@@29 $generated@@27 $generated@@1 ($generated@@77 $generated@@104 $generated@@105 $generated@@106 $generated@@107) $generated@@108 $generated@@109))
)))
(assert (forall (($generated@@110 T@U) ) (!  (=> ($generated@@62 $generated@@110) (= $generated@@110 ($generated@@20 ($generated@@21 $generated@@110))))
 :pattern ( ($generated@@21 $generated@@110))
 :pattern ( ($generated@@62 $generated@@110))
)))
(assert (forall (($generated@@111 T@U) ($generated@@112 T@U) ) (!  (=> (and ($generated@@62 $generated@@112) (<= ($generated@@21 $generated@@112) ($generated@@21 $generated@@111))) (or (and (= $generated@@112 ($generated@@20 0)) (= ($generated@@19 $generated@@111 $generated@@112) $generated@@111)) (and (or (not (= $generated@@112 ($generated@@20 0))) (not true)) ($generated ($generated@@19 $generated@@111 $generated@@112) $generated@@111))))
 :pattern ( ($generated@@19 $generated@@111 $generated@@112))
)))
(assert (forall (($generated@@113 T@U) ($generated@@114 T@T) ) (! (= ($generated@@59 $generated@@114 ($generated@@56 $generated@@114 $generated@@113)) ($generated@@56 $generated@@28 ($generated@@59 $generated@@114 $generated@@113)))
 :pattern ( ($generated@@59 $generated@@114 ($generated@@56 $generated@@114 $generated@@113)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@115 () T@U)
(declare-fun $generated@@116 () T@U)
(declare-fun $generated@@117 () T@U)
(declare-fun $generated@@118 () T@U)
(declare-fun $generated@@119 () T@U)
(declare-fun $generated@@120 () Bool)
(declare-fun $generated@@121 () T@U)
(declare-fun $generated@@122 () T@U)
(declare-fun $generated@@123 () T@U)
(declare-fun $generated@@124 () T@U)
(declare-fun $generated@@125 (T@U) Bool)
(declare-fun $generated@@126 (T@U) Bool)
(declare-fun $generated@@127 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 18) (let (($generated@@128 true))
(let (($generated@@129  (=> (= (ControlFlow 0 5) (- 0 4)) ($generated $generated@@115 $generated@@116))))
(let (($generated@@130  (and (=> (= (ControlFlow 0 9) (- 0 10)) (exists (($generated@@131 T@U) ) ($generated $generated@@131 $generated@@116))) (=> (exists (($generated@@132 T@U) ) ($generated $generated@@132 $generated@@116)) (=> ($generated $generated@@117 $generated@@116) (=> (and (= $generated@@115 $generated@@117) (= (ControlFlow 0 9) 5)) $generated@@129))))))
(let (($generated@@133  (=> (= ($generated@@21 $generated@@116) 0) (and (=> (= (ControlFlow 0 12) 9) $generated@@130) (=> (= (ControlFlow 0 12) 11) $generated@@128)))))
(let (($generated@@134  (=> (not (= ($generated@@21 $generated@@116) 0)) (and (=> (= (ControlFlow 0 6) (- 0 8)) ($generated@@62 ($generated@@56 $generated@@28 ($generated@@20 1)))) (=> ($generated@@62 ($generated@@56 $generated@@28 ($generated@@20 1))) (and (=> (= (ControlFlow 0 6) (- 0 7)) (<= ($generated@@21 ($generated@@56 $generated@@28 ($generated@@20 1))) ($generated@@21 $generated@@116))) (=> (<= ($generated@@21 ($generated@@56 $generated@@28 ($generated@@20 1))) ($generated@@21 $generated@@116)) (=> (= $generated@@118 ($generated@@19 $generated@@116 ($generated@@20 1))) (=> (and (= $generated@@115 $generated@@118) (= (ControlFlow 0 6) 5)) $generated@@129)))))))))
(let (($generated@@135  (=> ($generated $generated@@119 $generated@@116) (and (=> (= (ControlFlow 0 13) 12) $generated@@133) (=> (= (ControlFlow 0 13) 6) $generated@@134)))))
(let (($generated@@136 true))
(let (($generated@@137  (=> $generated@@120 (and (=> (= (ControlFlow 0 14) 3) $generated@@136) (=> (= (ControlFlow 0 14) 13) $generated@@135)))))
(let (($generated@@138 true))
(let (($generated@@139  (and (=> (= (ControlFlow 0 15) 2) $generated@@138) (=> (= (ControlFlow 0 15) 14) $generated@@137))))
(let (($generated@@140 true))
(let (($generated@@141  (=> (not false) (=> (and (and (forall (($generated@@142 T@U) ) (!  (=> (and (or (not (= $generated@@142 $generated@@122)) (not true)) ($generated@@5 ($generated@@32 $generated@@1 ($generated@@26 $generated@@27 $generated@@28 ($generated@@26 $generated@@29 ($generated@@30 $generated@@27 $generated@@28) $generated@@121 $generated@@142) $generated@@31)))) (= ($generated@@26 $generated@@29 ($generated@@30 $generated@@27 $generated@@28) $generated@@121 $generated@@142) ($generated@@26 $generated@@29 ($generated@@30 $generated@@27 $generated@@28) $generated@@121 $generated@@142)))
 :pattern ( ($generated@@26 $generated@@29 ($generated@@30 $generated@@27 $generated@@28) $generated@@121 $generated@@142))
)) ($generated@@25 $generated@@121 $generated@@121)) (and (forall (($generated@@143 T@U) ($generated@@144 T@U) ) (!  (=> (and (or (not (= $generated@@143 $generated@@122)) (not true)) ($generated@@5 ($generated@@32 $generated@@1 ($generated@@26 $generated@@27 $generated@@28 ($generated@@26 $generated@@29 ($generated@@30 $generated@@27 $generated@@28) $generated@@121 $generated@@143) $generated@@31)))) (or (= ($generated@@26 $generated@@27 $generated@@28 ($generated@@26 $generated@@29 ($generated@@30 $generated@@27 $generated@@28) $generated@@121 $generated@@143) $generated@@144) ($generated@@26 $generated@@27 $generated@@28 ($generated@@26 $generated@@29 ($generated@@30 $generated@@27 $generated@@28) $generated@@121 $generated@@143) $generated@@144)) ($generated@@5 ($generated@@76 $generated@@29 $generated@@27 $generated@@1 $generated@@123 $generated@@143 $generated@@144))))
 :pattern ( ($generated@@26 $generated@@27 $generated@@28 ($generated@@26 $generated@@29 ($generated@@30 $generated@@27 $generated@@28) $generated@@121 $generated@@143) $generated@@144))
)) (or (= $generated@@116 $generated@@124) ($generated $generated@@116 $generated@@124)))) (and (=> (= (ControlFlow 0 16) 1) $generated@@140) (=> (= (ControlFlow 0 16) 15) $generated@@139))))))
(let (($generated@@145  (=> (and (= $generated@@123 ($generated@@77 $generated@@122 $generated@@121 $generated@@31 false)) (= (ControlFlow 0 17) 16)) $generated@@141)))
(let (($generated@@146  (=> (and (and ($generated@@125 $generated@@121) ($generated@@126 $generated@@121)) (and (= 0 $generated@@127) (= (ControlFlow 0 18) 17))) $generated@@145)))
$generated@@146)))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
