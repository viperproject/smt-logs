(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 (T@T) Int)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Bool) T@U)
(declare-fun $generated@@9 (T@U) Bool)
(declare-fun $generated@@10 (Int) T@U)
(declare-fun $generated@@11 (T@U) Int)
(declare-fun $generated@@12 (Real) T@U)
(declare-fun $generated@@13 (T@U) Real)
(declare-fun $generated@@20 (T@U) T@U)
(declare-fun $generated@@21 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@22 () T@U)
(declare-fun $generated@@25 () Int)
(declare-fun $generated@@26 (Int Int Int) Bool)
(declare-fun $generated@@27 (Int) Int)
(declare-fun $generated@@28 (Int Int Int) Bool)
(declare-fun $generated@@35 (Int Int Int) Bool)
(declare-fun $generated@@36 (Int Int Int) Bool)
(declare-fun $generated@@44 (T@T T@U) T@U)
(declare-fun $generated@@47 (T@T T@U) T@U)
(declare-fun $generated@@48 (T@T T@U) T@U)
(declare-fun $generated@@54 (Int Int) Bool)
(declare-fun $generated@@61 (Int Int) Bool)
(declare-fun $generated@@71 (Int Int) Bool)
(declare-fun $generated@@74 (Int Int) Bool)
(declare-fun $generated@@79 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@80 () T@T)
(declare-fun $generated@@81 () T@T)
(declare-fun $generated@@82 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@83 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@84 () T@T)
(declare-fun $generated@@85 (T@T T@T) T@T)
(declare-fun $generated@@86 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@87 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@88 (T@T) T@T)
(declare-fun $generated@@89 (T@T) T@T)
(declare-fun $generated@@138 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@4 $generated@@5) 0) (= ($generated@@4 $generated@@6) 1)) (= ($generated@@4 $generated@@7) 2)) (forall (($generated@@14 Bool) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Int) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Real) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3)
)
(assert (= ($generated@@20 $generated) $generated@@0))
(assert (forall (($generated@@23 T@U) ($generated@@24 T@U) ) (! ($generated@@21 $generated@@6 $generated@@23 $generated@@22 $generated@@24)
 :pattern ( ($generated@@21 $generated@@6 $generated@@23 $generated@@22 $generated@@24))
)))
(assert  (=> (<= 1 $generated@@25) (forall (($generated@@29 Int) ($generated@@30 Int) ($generated@@31 Int) ) (!  (=> (or ($generated@@28 ($generated@@27 $generated@@29) ($generated@@27 $generated@@30) ($generated@@27 $generated@@31)) (and (< 1 $generated@@25) (<= ($generated@@27 0) $generated@@29))) (= ($generated@@26 ($generated@@27 $generated@@29) ($generated@@27 $generated@@30) ($generated@@27 $generated@@31))  (=> (< 0 $generated@@29) (= ($generated@@27 $generated@@30) ($generated@@27 $generated@@31)))))
 :weight 3
 :pattern ( ($generated@@26 ($generated@@27 $generated@@29) ($generated@@27 $generated@@30) ($generated@@27 $generated@@31)))
))))
(assert  (=> (<= 1 $generated@@25) (forall (($generated@@32 Int) ($generated@@33 Int) ($generated@@34 Int) ) (!  (=> (= $generated@@34 0) ($generated@@26 $generated@@34 $generated@@32 $generated@@33))
 :pattern ( ($generated@@26 $generated@@34 $generated@@32 $generated@@33))
))))
(assert  (=> (<= 1 $generated@@25) (forall (($generated@@37 Int) ($generated@@38 Int) ($generated@@39 Int) ) (!  (=> (or ($generated@@36 ($generated@@27 $generated@@37) ($generated@@27 $generated@@38) ($generated@@27 $generated@@39)) (and (< 1 $generated@@25) (<= ($generated@@27 0) $generated@@37))) (= ($generated@@35 ($generated@@27 $generated@@37) ($generated@@27 $generated@@38) ($generated@@27 $generated@@39))  (and (< 0 $generated@@37) (= ($generated@@27 $generated@@38) ($generated@@27 $generated@@39)))))
 :weight 3
 :pattern ( ($generated@@35 ($generated@@27 $generated@@37) ($generated@@27 $generated@@38) ($generated@@27 $generated@@39)))
))))
(assert  (=> (<= 1 $generated@@25) (forall (($generated@@40 Int) ($generated@@41 Int) ($generated@@42 Int) ) (!  (=> (= $generated@@42 0) (not ($generated@@35 $generated@@42 $generated@@40 $generated@@41)))
 :pattern ( ($generated@@35 $generated@@42 $generated@@40 $generated@@41))
))))
(assert (forall (($generated@@43 Int) ) (! (= ($generated@@27 $generated@@43) $generated@@43)
 :pattern ( ($generated@@27 $generated@@43))
)))
(assert (forall (($generated@@45 T@U) ($generated@@46 T@T) ) (! (= ($generated@@44 $generated@@46 $generated@@45) $generated@@45)
 :pattern ( ($generated@@44 $generated@@46 $generated@@45))
)))
(assert (forall (($generated@@49 T@U) ($generated@@50 T@T) ) (! (= ($generated@@48 $generated@@50 ($generated@@47 $generated@@50 $generated@@49)) $generated@@49)
 :pattern ( ($generated@@47 $generated@@50 $generated@@49))
)))
(assert  (=> (<= 1 $generated@@25) (forall (($generated@@51 Int) ($generated@@52 Int) ($generated@@53 Int) ) (!  (=> (or ($generated@@28 ($generated@@27 $generated@@51) $generated@@52 $generated@@53) (and (< 1 $generated@@25) (<= ($generated@@27 0) $generated@@51))) (= ($generated@@26 ($generated@@27 $generated@@51) $generated@@52 $generated@@53)  (=> (< 0 $generated@@51) (= $generated@@52 $generated@@53))))
 :weight 3
 :pattern ( ($generated@@26 ($generated@@27 $generated@@51) $generated@@52 $generated@@53))
))))
(assert  (=> (<= 1 $generated@@25) (forall (($generated@@55 Int) ($generated@@56 Int) ) (!  (=> (forall (($generated@@57 Int) ) (!  (=> (<= ($generated@@27 0) $generated@@57) ($generated@@26 $generated@@57 $generated@@55 $generated@@56))
 :pattern ( ($generated@@26 $generated@@57 $generated@@55 $generated@@56))
)) ($generated@@54 $generated@@55 $generated@@56))
 :pattern ( ($generated@@54 $generated@@55 $generated@@56))
))))
(assert  (=> (<= 1 $generated@@25) (forall (($generated@@58 Int) ($generated@@59 Int) ($generated@@60 Int) ) (!  (=> (or ($generated@@36 ($generated@@27 $generated@@58) $generated@@59 $generated@@60) (and (< 1 $generated@@25) (<= ($generated@@27 0) $generated@@58))) (= ($generated@@35 ($generated@@27 $generated@@58) $generated@@59 $generated@@60)  (and (< 0 $generated@@58) (= $generated@@59 $generated@@60))))
 :weight 3
 :pattern ( ($generated@@35 ($generated@@27 $generated@@58) $generated@@59 $generated@@60))
))))
(assert  (=> (<= 1 $generated@@25) (forall (($generated@@62 Int) ($generated@@63 Int) ) (!  (=> (exists (($generated@@64 Int) ) (!  (and (<= ($generated@@27 0) $generated@@64) ($generated@@35 $generated@@64 $generated@@62 $generated@@63))
 :pattern ( ($generated@@35 $generated@@64 $generated@@62 $generated@@63))
)) ($generated@@61 $generated@@62 $generated@@63))
 :pattern ( ($generated@@61 $generated@@62 $generated@@63))
))))
(assert  (=> (<= 1 $generated@@25) (forall (($generated@@65 Int) ($generated@@66 Int) ($generated@@67 Int) ) (!  (=> (or ($generated@@28 $generated@@65 $generated@@66 $generated@@67) (and (< 1 $generated@@25) (<= ($generated@@27 0) $generated@@65))) (= ($generated@@26 $generated@@65 $generated@@66 $generated@@67)  (=> (< 0 $generated@@65) (= $generated@@66 $generated@@67))))
 :pattern ( ($generated@@26 $generated@@65 $generated@@66 $generated@@67))
))))
(assert  (=> (<= 1 $generated@@25) (forall (($generated@@68 Int) ($generated@@69 Int) ($generated@@70 Int) ) (!  (=> (or ($generated@@36 $generated@@68 $generated@@69 $generated@@70) (and (< 1 $generated@@25) (<= ($generated@@27 0) $generated@@68))) (= ($generated@@35 $generated@@68 $generated@@69 $generated@@70)  (and (< 0 $generated@@68) (= $generated@@69 $generated@@70))))
 :pattern ( ($generated@@35 $generated@@68 $generated@@69 $generated@@70))
))))
(assert  (=> (<= 0 $generated@@25) (forall (($generated@@72 Int) ($generated@@73 Int) ) (!  (=> (or ($generated@@71 $generated@@72 $generated@@73) (< 0 $generated@@25)) (= ($generated@@54 $generated@@72 $generated@@73) (= $generated@@72 $generated@@73)))
 :pattern ( ($generated@@54 $generated@@72 $generated@@73))
))))
(assert  (=> (<= 0 $generated@@25) (forall (($generated@@75 Int) ($generated@@76 Int) ) (!  (=> (or ($generated@@74 $generated@@75 $generated@@76) (< 0 $generated@@25)) (= ($generated@@61 $generated@@75 $generated@@76) (= $generated@@75 $generated@@76)))
 :pattern ( ($generated@@61 $generated@@75 $generated@@76))
))))
(assert (forall (($generated@@77 T@U) ($generated@@78 T@T) ) (! (= ($generated@@47 $generated@@78 ($generated@@48 $generated@@78 $generated@@77)) $generated@@77)
 :pattern ( ($generated@@48 $generated@@78 $generated@@77))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@90 T@T) ($generated@@91 T@T) ($generated@@92 T@T) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ) (! (= ($generated@@79 $generated@@90 $generated@@91 $generated@@92 ($generated@@86 $generated@@90 $generated@@91 $generated@@92 $generated@@94 $generated@@95 $generated@@96 $generated@@93) $generated@@95 $generated@@96) $generated@@93)
 :weight 0
)) (and (forall (($generated@@97 T@T) ($generated@@98 T@T) ($generated@@99 T@T) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ) (!  (or (= $generated@@102 $generated@@104) (= ($generated@@79 $generated@@97 $generated@@98 $generated@@99 ($generated@@86 $generated@@97 $generated@@98 $generated@@99 $generated@@101 $generated@@102 $generated@@103 $generated@@100) $generated@@104 $generated@@105) ($generated@@79 $generated@@97 $generated@@98 $generated@@99 $generated@@101 $generated@@104 $generated@@105)))
 :weight 0
)) (forall (($generated@@106 T@T) ($generated@@107 T@T) ($generated@@108 T@T) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ) (!  (or (= $generated@@112 $generated@@114) (= ($generated@@79 $generated@@106 $generated@@107 $generated@@108 ($generated@@86 $generated@@106 $generated@@107 $generated@@108 $generated@@110 $generated@@111 $generated@@112 $generated@@109) $generated@@113 $generated@@114) ($generated@@79 $generated@@106 $generated@@107 $generated@@108 $generated@@110 $generated@@113 $generated@@114)))
 :weight 0
)))) (= ($generated@@4 $generated@@80) 3)) (= ($generated@@4 $generated@@81) 4)) (forall (($generated@@115 T@T) ($generated@@116 T@T) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ) (! (= ($generated@@83 $generated@@115 $generated@@116 ($generated@@87 $generated@@115 $generated@@116 $generated@@118 $generated@@119 $generated@@117) $generated@@119) $generated@@117)
 :weight 0
))) (forall (($generated@@120 T@T) ($generated@@121 T@T) ($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ) (!  (or (= $generated@@124 $generated@@125) (= ($generated@@83 $generated@@120 $generated@@121 ($generated@@87 $generated@@120 $generated@@121 $generated@@123 $generated@@124 $generated@@122) $generated@@125) ($generated@@83 $generated@@120 $generated@@121 $generated@@123 $generated@@125)))
 :weight 0
))) (= ($generated@@4 $generated@@84) 5)) (forall (($generated@@126 T@T) ($generated@@127 T@T) ) (= ($generated@@4 ($generated@@85 $generated@@126 $generated@@127)) 6))) (forall (($generated@@128 T@T) ($generated@@129 T@T) ) (! (= ($generated@@88 ($generated@@85 $generated@@128 $generated@@129)) $generated@@128)
 :pattern ( ($generated@@85 $generated@@128 $generated@@129))
))) (forall (($generated@@130 T@T) ($generated@@131 T@T) ) (! (= ($generated@@89 ($generated@@85 $generated@@130 $generated@@131)) $generated@@131)
 :pattern ( ($generated@@85 $generated@@130 $generated@@131))
))))
(assert (forall (($generated@@132 T@U) ($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 Bool) ($generated@@136 T@U) ($generated@@137 T@U) ) (! (= ($generated@@9 ($generated@@79 $generated@@80 $generated@@81 $generated@@5 ($generated@@82 $generated@@132 $generated@@133 $generated@@134 $generated@@135) $generated@@136 $generated@@137))  (=> (and (or (not (= $generated@@136 $generated@@132)) (not true)) ($generated@@9 ($generated@@47 $generated@@5 ($generated@@83 $generated@@81 $generated@@84 ($generated@@83 $generated@@80 ($generated@@85 $generated@@81 $generated@@84) $generated@@133 $generated@@136) $generated@@134)))) $generated@@135))
 :pattern ( ($generated@@79 $generated@@80 $generated@@81 $generated@@5 ($generated@@82 $generated@@132 $generated@@133 $generated@@134 $generated@@135) $generated@@136 $generated@@137))
)))
(assert (= ($generated@@20 $generated@@22) $generated@@2))
(assert (= ($generated@@138 $generated@@22) $generated@@3))
(assert  (=> (<= 1 $generated@@25) (forall (($generated@@139 Int) ($generated@@140 Int) ) (!  (=> ($generated@@54 $generated@@139 $generated@@140) (forall (($generated@@141 Int) ) (!  (=> (<= ($generated@@27 0) $generated@@141) ($generated@@26 $generated@@141 $generated@@139 $generated@@140))
 :pattern ( ($generated@@26 $generated@@141 $generated@@139 $generated@@140))
)))
 :pattern ( ($generated@@54 $generated@@139 $generated@@140))
))))
(assert  (=> (<= 1 $generated@@25) (forall (($generated@@142 Int) ($generated@@143 Int) ) (!  (=> ($generated@@61 $generated@@142 $generated@@143) (exists (($generated@@144 Int) ) (!  (and (<= ($generated@@27 0) $generated@@144) ($generated@@35 $generated@@144 $generated@@142 $generated@@143))
 :pattern ( ($generated@@35 $generated@@144 $generated@@142 $generated@@143))
)))
 :pattern ( ($generated@@61 $generated@@142 $generated@@143))
))))
(assert (forall (($generated@@145 Int) ) (! (= ($generated@@48 $generated@@6 ($generated@@10 ($generated@@27 $generated@@145))) ($generated@@44 $generated@@84 ($generated@@48 $generated@@6 ($generated@@10 $generated@@145))))
 :pattern ( ($generated@@48 $generated@@6 ($generated@@10 ($generated@@27 $generated@@145))))
)))
(assert (forall (($generated@@146 T@U) ($generated@@147 T@T) ) (! (= ($generated@@48 $generated@@147 ($generated@@44 $generated@@147 $generated@@146)) ($generated@@44 $generated@@84 ($generated@@48 $generated@@147 $generated@@146)))
 :pattern ( ($generated@@48 $generated@@147 ($generated@@44 $generated@@147 $generated@@146)))
)))
(assert (forall (($generated@@148 T@U) ($generated@@149 T@U) ) (! ($generated@@21 $generated@@6 $generated@@149 $generated $generated@@148)
 :pattern ( ($generated@@21 $generated@@6 $generated@@149 $generated $generated@@148))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@150 () Int)
(declare-fun $generated@@151 () Int)
(declare-fun $generated@@152 () T@U)
(declare-fun $generated@@153 () T@U)
(declare-fun $generated@@154 () T@U)
(declare-fun $generated@@155 () T@U)
(declare-fun $generated@@156 () Int)
(declare-fun $generated@@157 () Int)
(declare-fun $generated@@158 () Int)
(declare-fun $generated@@159 (T@U) Bool)
(declare-fun $generated@@160 () T@U)
(declare-fun $generated@@161 (T@U) Bool)
(declare-fun $generated@@162 () Int)
(declare-fun $generated@@163 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 12) (let (($generated@@164  (=> (=> (or (not (= $generated@@150 0)) (not true)) ($generated@@36 $generated@@150 $generated@@151 $generated@@151)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (=> (or (not (= $generated@@150 0)) (not true)) (=> ($generated@@36 $generated@@150 $generated@@151 $generated@@151) (or ($generated@@35 $generated@@150 $generated@@151 $generated@@151) (< 0 $generated@@150))))) (=> (= (ControlFlow 0 2) (- 0 1)) (=> (or (not (= $generated@@150 0)) (not true)) (=> ($generated@@36 $generated@@150 $generated@@151 $generated@@151) (or ($generated@@35 $generated@@150 $generated@@151 $generated@@151) (= $generated@@151 $generated@@151)))))))))
(let (($generated@@165  (=> (and (= $generated@@150 0) (= (ControlFlow 0 5) 2)) $generated@@164)))
(let (($generated@@166  (=> (and (or (not (= $generated@@150 0)) (not true)) ($generated@@21 $generated@@6 ($generated@@10 $generated@@150) $generated@@22 $generated@@152)) (=> (and (and ($generated@@21 $generated@@6 ($generated@@10 $generated@@151) $generated $generated@@152) ($generated@@21 $generated@@6 ($generated@@10 $generated@@151) $generated $generated@@152)) (and ($generated@@36 $generated@@150 $generated@@151 $generated@@151) (= (ControlFlow 0 4) 2))) $generated@@164))))
(let (($generated@@167  (=> (= $generated@@153 ($generated@@82 $generated@@154 $generated@@155 $generated@@1 false)) (=> (and (and ($generated@@21 $generated@@6 ($generated@@10 $generated@@156) $generated $generated@@155) ($generated@@21 $generated@@6 ($generated@@10 $generated@@156) $generated $generated@@155)) (and ($generated@@71 $generated@@156 $generated@@156) ($generated@@71 $generated@@156 $generated@@156))) (and (=> (= (ControlFlow 0 6) (- 0 11)) (=> ($generated@@71 $generated@@156 $generated@@156) (or ($generated@@54 $generated@@156 $generated@@156) (= $generated@@156 $generated@@156)))) (=> (and ($generated@@54 $generated@@156 $generated@@156) ($generated@@21 $generated@@6 ($generated@@10 $generated@@150) $generated@@22 $generated@@155)) (=> (and (and ($generated@@21 $generated@@6 ($generated@@10 $generated@@157) $generated $generated@@155) ($generated@@21 $generated@@6 ($generated@@10 $generated@@157) $generated $generated@@155)) (and ($generated@@28 $generated@@150 $generated@@157 $generated@@157) ($generated@@28 $generated@@150 $generated@@157 $generated@@157))) (and (=> (= (ControlFlow 0 6) (- 0 10)) (=> ($generated@@28 $generated@@150 $generated@@157 $generated@@157) (or ($generated@@26 $generated@@150 $generated@@157 $generated@@157) (=> (< 0 $generated@@150) (= $generated@@157 $generated@@157))))) (=> ($generated@@26 $generated@@150 $generated@@157 $generated@@157) (and (=> (= (ControlFlow 0 6) (- 0 9)) (= $generated@@158 $generated@@158)) (=> (= $generated@@158 $generated@@158) (=> (and (and ($generated@@159 $generated@@160) ($generated@@161 $generated@@160)) (= $generated@@155 $generated@@160)) (and (=> (= (ControlFlow 0 6) (- 0 8)) (= $generated@@162 $generated@@162)) (=> (= $generated@@162 $generated@@162) (=> (and (and (and ($generated@@159 $generated@@152) ($generated@@161 $generated@@152)) (= $generated@@160 $generated@@152)) (and (and ($generated@@21 $generated@@6 ($generated@@10 $generated@@163) $generated $generated@@152) ($generated@@21 $generated@@6 ($generated@@10 $generated@@163) $generated $generated@@152)) (and ($generated@@74 $generated@@163 $generated@@163) ($generated@@74 $generated@@163 $generated@@163)))) (and (=> (= (ControlFlow 0 6) (- 0 7)) (=> ($generated@@74 $generated@@163 $generated@@163) (or ($generated@@61 $generated@@163 $generated@@163) (= $generated@@163 $generated@@163)))) (=> ($generated@@61 $generated@@163 $generated@@163) (and (=> (= (ControlFlow 0 6) 4) $generated@@166) (=> (= (ControlFlow 0 6) 5) $generated@@165)))))))))))))))))))
(let (($generated@@168  (=> (and (and (and ($generated@@159 $generated@@155) ($generated@@161 $generated@@155)) (<= ($generated@@27 0) $generated@@150)) (and (= 2 $generated@@25) (= (ControlFlow 0 12) 6))) $generated@@167)))
$generated@@168))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
