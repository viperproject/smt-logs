(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._module.Stream () T@U)
(declare-fun |##_module.Stream.Nil| () T@U)
(declare-fun |##_module.Stream.Cons| () T@U)
(declare-fun tytagFamily$Stream () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun |$Eq#_module.Stream| (T@U T@U T@U) Bool)
(declare-fun $LS (T@U) T@U)
(declare-fun |ORD#Less| (T@U T@U) Bool)
(declare-fun |$PrefixEq#_module.Stream| (T@U T@U T@U T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun Tclass._module.Stream () T@U)
(declare-fun |ORD#Offset| (T@U) Int)
(declare-fun _module.Stream.Nil_q (T@U) Bool)
(declare-fun _module.Stream.Cons_q (T@U) Bool)
(declare-fun _module.Stream.head (T@U) Int)
(declare-fun |ORD#Minus| (T@U T@U) T@U)
(declare-fun |ORD#FromNat| (Int) T@U)
(declare-fun _module.Stream.tail (T@U) T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun |#_module.Stream.Nil| () T@U)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.zeros (T@U) T@U)
(declare-fun |_module.__default.zeros#canCall| () Bool)
(declare-fun |#_module.Stream.Cons| (Int T@U) T@U)
(declare-fun _module.__default.ones (T@U) T@U)
(declare-fun |_module.__default.ones#canCall| () Bool)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun _module.__default.append (T@U T@U T@U) T@U)
(declare-fun |_module.__default.append#canCall| (T@U T@U) Bool)
(declare-fun |ORD#IsNat| (T@U) Bool)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun TagFamily (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt alloc Tagclass._module.Stream |##_module.Stream.Nil| |##_module.Stream.Cons| tytagFamily$Stream)
)
(assert (= (Tag TInt) TagInt))
(assert (forall ((ly T@U) (d0 T@U) (d1 T@U) ) (! (= (|$Eq#_module.Stream| ($LS ly) d0 d1) (= d0 d1))
 :pattern ( (|$Eq#_module.Stream| ($LS ly) d0 d1))
)))
(assert (forall ((o T@U) (p T@U) (r T@U) ) (!  (=> (and (|ORD#Less| o p) (|ORD#Less| p r)) (|ORD#Less| o r))
 :pattern ( (|ORD#Less| o p) (|ORD#Less| p r))
 :pattern ( (|ORD#Less| o p) (|ORD#Less| o r))
)))
(assert (= (Ctor DatatypeTypeType) 3))
(assert (forall ((k T@U) (ly@@0 T@U) (d0@@0 T@U) (d1@@0 T@U) ) (!  (=> (and ($Is DatatypeTypeType d0@@0 Tclass._module.Stream) ($Is DatatypeTypeType d1@@0 Tclass._module.Stream)) (= (|$PrefixEq#_module.Stream| k ($LS ly@@0) d0@@0 d1@@0)  (and (=> (< 0 (|ORD#Offset| k)) (or (and (_module.Stream.Nil_q d0@@0) (_module.Stream.Nil_q d1@@0)) (and (and (_module.Stream.Cons_q d0@@0) (_module.Stream.Cons_q d1@@0)) (=> (and (_module.Stream.Cons_q d0@@0) (_module.Stream.Cons_q d1@@0)) (and (= (_module.Stream.head d0@@0) (_module.Stream.head d1@@0)) (|$PrefixEq#_module.Stream| (|ORD#Minus| k (|ORD#FromNat| 1)) ly@@0 (_module.Stream.tail d0@@0) (_module.Stream.tail d1@@0))))))) (=> (and (or (not (= k (|ORD#FromNat| 0))) (not true)) (= (|ORD#Offset| k) 0)) (|$Eq#_module.Stream| ly@@0 d0@@0 d1@@0)))))
 :pattern ( (|$PrefixEq#_module.Stream| k ($LS ly@@0) d0@@0 d1@@0))
)))
(assert (forall ((o@@0 T@U) (m Int) (n Int) ) (!  (=> (and (and (<= 0 m) (<= 0 n)) (<= (+ m n) (|ORD#Offset| o@@0))) (= (|ORD#Minus| (|ORD#Minus| o@@0 (|ORD#FromNat| m)) (|ORD#FromNat| n)) (|ORD#Minus| o@@0 (|ORD#FromNat| (+ m n)))))
 :pattern ( (|ORD#Minus| (|ORD#Minus| o@@0 (|ORD#FromNat| m)) (|ORD#FromNat| n)))
)))
(assert (= (DatatypeCtorId |#_module.Stream.Nil|) |##_module.Stream.Nil|))
(assert (forall ((ly@@1 T@U) (d0@@1 T@U) (d1@@1 T@U) ) (!  (=> (and ($Is DatatypeTypeType d0@@1 Tclass._module.Stream) ($Is DatatypeTypeType d1@@1 Tclass._module.Stream)) (= (|$Eq#_module.Stream| ($LS ly@@1) d0@@1 d1@@1)  (or (and (_module.Stream.Nil_q d0@@1) (_module.Stream.Nil_q d1@@1)) (and (and (_module.Stream.Cons_q d0@@1) (_module.Stream.Cons_q d1@@1)) (=> (and (_module.Stream.Cons_q d0@@1) (_module.Stream.Cons_q d1@@1)) (and (= (_module.Stream.head d0@@1) (_module.Stream.head d1@@1)) (|$Eq#_module.Stream| ly@@1 (_module.Stream.tail d0@@1) (_module.Stream.tail d1@@1))))))))
 :pattern ( (|$Eq#_module.Stream| ($LS ly@@1) d0@@1 d1@@1))
)))
(assert (forall ((ly@@2 T@U) (d0@@2 T@U) (d1@@2 T@U) ) (!  (=> (forall ((k@@0 Int) ) (!  (=> (<= 0 k@@0) (|$PrefixEq#_module.Stream| (|ORD#FromNat| k@@0) ($LS ly@@2) d0@@2 d1@@2))
 :pattern ( (|$PrefixEq#_module.Stream| (|ORD#FromNat| k@@0) ($LS ly@@2) d0@@2 d1@@2))
)) (|$Eq#_module.Stream| ($LS ly@@2) d0@@2 d1@@2))
 :pattern ( (|$Eq#_module.Stream| ($LS ly@@2) d0@@2 d1@@2))
)))
(assert ($Is DatatypeTypeType |#_module.Stream.Nil| Tclass._module.Stream))
(assert (forall ((k@@1 T@U) (ly@@3 T@U) (d0@@3 T@U) (d1@@3 T@U) (m@@0 T@U) ) (!  (=> (and (|ORD#Less| k@@1 m@@0) (|$PrefixEq#_module.Stream| m@@0 ($LS ly@@3) d0@@3 d1@@3)) (|$PrefixEq#_module.Stream| k@@1 ($LS ly@@3) d0@@3 d1@@3))
 :pattern ( (|$PrefixEq#_module.Stream| k@@1 ($LS ly@@3) d0@@3 d1@@3) (|$PrefixEq#_module.Stream| m@@0 ($LS ly@@3) d0@@3 d1@@3))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($ly T@U) ) (!  (=> (or |_module.__default.zeros#canCall| (< 1 $FunctionContextHeight)) (and |_module.__default.zeros#canCall| (= (_module.__default.zeros ($LS $ly)) (Lit DatatypeTypeType (|#_module.Stream.Cons| (LitInt 0) (Lit DatatypeTypeType (_module.__default.zeros $ly)))))))
 :pattern ( (_module.__default.zeros ($LS $ly)))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($ly@@0 T@U) ) (!  (=> (or |_module.__default.ones#canCall| (< 1 $FunctionContextHeight)) (and |_module.__default.ones#canCall| (= (_module.__default.ones ($LS $ly@@0)) (Lit DatatypeTypeType (|#_module.Stream.Cons| (LitInt 1) (Lit DatatypeTypeType (_module.__default.ones $ly@@0)))))))
 :pattern ( (_module.__default.ones ($LS $ly@@0)))
))))
(assert (forall ((d T@U) ) (! (= (_module.Stream.Nil_q d) (= (DatatypeCtorId d) |##_module.Stream.Nil|))
 :pattern ( (_module.Stream.Nil_q d))
)))
(assert (forall ((d@@0 T@U) ) (! (= (_module.Stream.Cons_q d@@0) (= (DatatypeCtorId d@@0) |##_module.Stream.Cons|))
 :pattern ( (_module.Stream.Cons_q d@@0))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($ly@@1 T@U) (|M#0| T@U) (|N#0| T@U) ) (!  (=> (or (|_module.__default.append#canCall| |M#0| |N#0|) (and (< 1 $FunctionContextHeight) (and ($Is DatatypeTypeType |M#0| Tclass._module.Stream) ($Is DatatypeTypeType |N#0| Tclass._module.Stream)))) (and (=> (not (_module.Stream.Nil_q |M#0|)) (let ((|M'#1| (_module.Stream.tail |M#0|)))
(|_module.__default.append#canCall| |M'#1| |N#0|))) (= (_module.__default.append ($LS $ly@@1) |M#0| |N#0|) (ite (_module.Stream.Nil_q |M#0|) |N#0| (let ((|M'#0| (_module.Stream.tail |M#0|)))
(let ((|t#0| (_module.Stream.head |M#0|)))
(|#_module.Stream.Cons| |t#0| (_module.__default.append $ly@@1 |M'#0| |N#0|))))))))
 :pattern ( (_module.__default.append ($LS $ly@@1) |M#0| |N#0|))
))))
(assert (forall ((d@@1 T@U) ) (!  (=> (_module.Stream.Cons_q d@@1) (exists ((|a#4#0#0| Int) (|a#4#1#0| T@U) ) (= d@@1 (|#_module.Stream.Cons| |a#4#0#0| |a#4#1#0|))))
 :pattern ( (_module.Stream.Cons_q d@@1))
)))
(assert (forall ((d@@2 T@U) ) (!  (=> (_module.Stream.Nil_q d@@2) (= d@@2 |#_module.Stream.Nil|))
 :pattern ( (_module.Stream.Nil_q d@@2))
)))
(assert (forall ((k@@2 T@U) (ly@@4 T@U) (d0@@4 T@U) (d1@@4 T@U) ) (!  (=> (or (not (= k@@2 (|ORD#FromNat| 0))) (not true)) (= (|$PrefixEq#_module.Stream| k@@2 ($LS ly@@4) d0@@4 d1@@4) (|$PrefixEq#_module.Stream| k@@2 ly@@4 d0@@4 d1@@4)))
 :pattern ( (|$PrefixEq#_module.Stream| k@@2 ($LS ly@@4) d0@@4 d1@@4))
)))
(assert (forall ((ly@@5 T@U) (d0@@5 T@U) (d1@@5 T@U) ) (! (= (|$Eq#_module.Stream| ($LS ly@@5) d0@@5 d1@@5) (|$Eq#_module.Stream| ly@@5 d0@@5 d1@@5))
 :pattern ( (|$Eq#_module.Stream| ($LS ly@@5) d0@@5 d1@@5))
)))
(assert (forall ((o@@1 T@U) (p@@0 T@U) ) (!  (=> (and (|ORD#IsNat| p@@0) (<= (|ORD#Offset| p@@0) (|ORD#Offset| o@@1))) (and (= (|ORD#IsNat| (|ORD#Minus| o@@1 p@@0)) (|ORD#IsNat| o@@1)) (= (|ORD#Offset| (|ORD#Minus| o@@1 p@@0)) (- (|ORD#Offset| o@@1) (|ORD#Offset| p@@0)))))
 :pattern ( (|ORD#Minus| o@@1 p@@0))
)))
(assert (forall ((n@@0 Int) ) (!  (=> (<= 0 n@@0) (and (|ORD#IsNat| (|ORD#FromNat| n@@0)) (= (|ORD#Offset| (|ORD#FromNat| n@@0)) n@@0)))
 :pattern ( (|ORD#FromNat| n@@0))
)))
(assert (forall ((ly@@6 T@U) (d0@@6 T@U) (d1@@6 T@U) ) (! (= (|$Eq#_module.Stream| ($LS ly@@6) d0@@6 d1@@6) (forall ((k@@3 T@U) ) (! (|$PrefixEq#_module.Stream| k@@3 ($LS ly@@6) d0@@6 d1@@6)
 :pattern ( (|$PrefixEq#_module.Stream| k@@3 ($LS ly@@6) d0@@6 d1@@6))
)))
 :pattern ( (|$Eq#_module.Stream| ($LS ly@@6) d0@@6 d1@@6))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($ly@@2 T@U) (|M#0@@0| T@U) (|N#0@@0| T@U) ) (!  (=> (or (|_module.__default.append#canCall| |M#0@@0| |N#0@@0|) (and (< 1 $FunctionContextHeight) (and ($Is DatatypeTypeType |M#0@@0| Tclass._module.Stream) ($Is DatatypeTypeType |N#0@@0| Tclass._module.Stream)))) ($Is DatatypeTypeType (_module.__default.append $ly@@2 |M#0@@0| |N#0@@0|) Tclass._module.Stream))
 :pattern ( (_module.__default.append $ly@@2 |M#0@@0| |N#0@@0|))
))))
(assert (forall (($ly@@3 T@U) (|M#0@@1| T@U) (|N#0@@1| T@U) ) (! (= (_module.__default.append ($LS $ly@@3) |M#0@@1| |N#0@@1|) (_module.__default.append $ly@@3 |M#0@@1| |N#0@@1|))
 :pattern ( (_module.__default.append ($LS $ly@@3) |M#0@@1| |N#0@@1|))
)))
(assert (forall ((o@@2 T@U) (p@@1 T@U) ) (!  (or (or (|ORD#Less| o@@2 p@@1) (= o@@2 p@@1)) (|ORD#Less| p@@1 o@@2))
 :pattern ( (|ORD#Less| o@@2 p@@1) (|ORD#Less| p@@1 o@@2))
)))
(assert (forall ((d@@3 T@U) ) (!  (=> ($Is DatatypeTypeType d@@3 Tclass._module.Stream) (or (_module.Stream.Nil_q d@@3) (_module.Stream.Cons_q d@@3)))
 :pattern ( (_module.Stream.Cons_q d@@3) ($Is DatatypeTypeType d@@3 Tclass._module.Stream))
 :pattern ( (_module.Stream.Nil_q d@@3) ($Is DatatypeTypeType d@@3 Tclass._module.Stream))
)))
(assert (forall ((o@@3 T@U) ) (! (<= 0 (|ORD#Offset| o@@3))
 :pattern ( (|ORD#Offset| o@@3))
)))
(assert (forall ((|a#3#0#0| Int) (|a#3#1#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Stream.Cons| |a#3#0#0| |a#3#1#0|)) |##_module.Stream.Cons|)
 :pattern ( (|#_module.Stream.Cons| |a#3#0#0| |a#3#1#0|))
)))
(assert (forall ((|a#6#0#0| Int) (|a#6#1#0| T@U) ) (! (= (_module.Stream.head (|#_module.Stream.Cons| |a#6#0#0| |a#6#1#0|)) |a#6#0#0|)
 :pattern ( (|#_module.Stream.Cons| |a#6#0#0| |a#6#1#0|))
)))
(assert (forall ((|a#7#0#0| Int) (|a#7#1#0| T@U) ) (! (= (_module.Stream.tail (|#_module.Stream.Cons| |a#7#0#0| |a#7#1#0|)) |a#7#1#0|)
 :pattern ( (|#_module.Stream.Cons| |a#7#0#0| |a#7#1#0|))
)))
(assert (forall ((x@@5 T@U) (T@@1 T@T) ) (! (= ($Unbox T@@1 ($Box T@@1 x@@5)) x@@5)
 :pattern ( ($Box T@@1 x@@5))
)))
(assert (forall ((o@@4 T@U) (p@@2 T@U) ) (!  (and (and (and (=> (|ORD#Less| o@@4 p@@2) (or (not (= o@@4 p@@2)) (not true))) (=> (and (|ORD#IsNat| o@@4) (not (|ORD#IsNat| p@@2))) (|ORD#Less| o@@4 p@@2))) (=> (and (|ORD#IsNat| o@@4) (|ORD#IsNat| p@@2)) (= (|ORD#Less| o@@4 p@@2) (< (|ORD#Offset| o@@4) (|ORD#Offset| p@@2))))) (=> (and (|ORD#Less| o@@4 p@@2) (|ORD#IsNat| p@@2)) (|ORD#IsNat| o@@4)))
 :pattern ( (|ORD#Less| o@@4 p@@2))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (t2 T@T) (val T@U) (m@@1 T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0 t1 t2 (MapType0Store t0 t1 t2 m@@1 x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@2 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@2 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@2 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@3 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@3 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@3 y0@@0 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 4)) (= (Ctor FieldType) 5)) (forall ((t0@@0 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@4 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 (MapType1Store t0@@0 t1@@0 m@@4 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@5 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@5 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@5 y0@@1)))
 :weight 0
))) (= (Ctor BoxType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($ly@@4 T@U) ) (!  (=> (or |_module.__default.zeros#canCall| (< 1 $FunctionContextHeight)) ($Is DatatypeTypeType (_module.__default.zeros $ly@@4) Tclass._module.Stream))
 :pattern ( (_module.__default.zeros $ly@@4))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($ly@@5 T@U) ) (!  (=> (or |_module.__default.ones#canCall| (< 1 $FunctionContextHeight)) ($Is DatatypeTypeType (_module.__default.ones $ly@@5) Tclass._module.Stream))
 :pattern ( (_module.__default.ones $ly@@5))
))))
(assert (forall (($ly@@6 T@U) ) (! (= (_module.__default.zeros ($LS $ly@@6)) (_module.__default.zeros $ly@@6))
 :pattern ( (_module.__default.zeros ($LS $ly@@6)))
)))
(assert (forall (($ly@@7 T@U) ) (! (= (_module.__default.ones ($LS $ly@@7)) (_module.__default.ones $ly@@7))
 :pattern ( (_module.__default.ones ($LS $ly@@7)))
)))
(assert (forall ((o@@5 T@U) ) (!  (=> (|ORD#IsNat| o@@5) (= o@@5 (|ORD#FromNat| (|ORD#Offset| o@@5))))
 :pattern ( (|ORD#Offset| o@@5))
 :pattern ( (|ORD#IsNat| o@@5))
)))
(assert (= (Tag Tclass._module.Stream) Tagclass._module.Stream))
(assert (= (TagFamily Tclass._module.Stream) tytagFamily$Stream))
(assert (forall ((o@@6 T@U) (p@@3 T@U) ) (!  (=> (and (|ORD#IsNat| p@@3) (<= (|ORD#Offset| p@@3) (|ORD#Offset| o@@6))) (or (and (= p@@3 (|ORD#FromNat| 0)) (= (|ORD#Minus| o@@6 p@@3) o@@6)) (and (or (not (= p@@3 (|ORD#FromNat| 0))) (not true)) (|ORD#Less| (|ORD#Minus| o@@6 p@@3) o@@6))))
 :pattern ( (|ORD#Minus| o@@6 p@@3))
)))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((x@@7 T@U) (T@@2 T@T) ) (! (= ($Box T@@2 (Lit T@@2 x@@7)) (Lit BoxType ($Box T@@2 x@@7)))
 :pattern ( ($Box T@@2 (Lit T@@2 x@@7)))
)))
(assert (forall ((|a#5#0#0| Int) (|a#5#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Stream.Cons| |a#5#0#0| |a#5#1#0|) Tclass._module.Stream)  (and ($Is intType (int_2_U |a#5#0#0|) TInt) ($Is DatatypeTypeType |a#5#1#0| Tclass._module.Stream)))
 :pattern ( ($Is DatatypeTypeType (|#_module.Stream.Cons| |a#5#0#0| |a#5#1#0|) Tclass._module.Stream))
)))
(assert (forall ((k@@4 T@U) (ly@@7 T@U) (d0@@7 T@U) (d1@@7 T@U) ) (!  (=> (= d0@@7 d1@@7) (|$PrefixEq#_module.Stream| k@@4 ($LS ly@@7) d0@@7 d1@@7))
 :pattern ( (|$PrefixEq#_module.Stream| k@@4 ($LS ly@@7) d0@@7 d1@@7))
)))
(assert (forall ((v T@U) ) (! ($Is intType v TInt)
 :pattern ( ($Is intType v TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |_k#0| () T@U)
(declare-fun $LZ () T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $Heap@1 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun $Heap () T@U)
(declare-fun |_k##0@0| () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun null () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 10) (let ((GeneratedUnifiedExit_correct  (and (=> (= (ControlFlow 0 2) (- 0 4)) (or (|$PrefixEq#_module.Stream| |_k#0| ($LS ($LS $LZ)) (Lit DatatypeTypeType (_module.__default.append ($LS $LZ) (Lit DatatypeTypeType (_module.__default.zeros ($LS $LZ))) (Lit DatatypeTypeType (_module.__default.ones ($LS $LZ))))) (Lit DatatypeTypeType (_module.__default.zeros ($LS $LZ)))) (=> (< 0 (|ORD#Offset| |_k#0|)) (=> (_module.Stream.Nil_q (Lit DatatypeTypeType (_module.__default.append ($LS ($LS $LZ)) (Lit DatatypeTypeType (_module.__default.zeros ($LS ($LS $LZ)))) (Lit DatatypeTypeType (_module.__default.ones ($LS ($LS $LZ))))))) (_module.Stream.Nil_q (Lit DatatypeTypeType (_module.__default.zeros ($LS ($LS $LZ))))))))) (=> (or (|$PrefixEq#_module.Stream| |_k#0| ($LS ($LS $LZ)) (Lit DatatypeTypeType (_module.__default.append ($LS $LZ) (Lit DatatypeTypeType (_module.__default.zeros ($LS $LZ))) (Lit DatatypeTypeType (_module.__default.ones ($LS $LZ))))) (Lit DatatypeTypeType (_module.__default.zeros ($LS $LZ)))) (=> (< 0 (|ORD#Offset| |_k#0|)) (=> (_module.Stream.Nil_q (Lit DatatypeTypeType (_module.__default.append ($LS ($LS $LZ)) (Lit DatatypeTypeType (_module.__default.zeros ($LS ($LS $LZ)))) (Lit DatatypeTypeType (_module.__default.ones ($LS ($LS $LZ))))))) (_module.Stream.Nil_q (Lit DatatypeTypeType (_module.__default.zeros ($LS ($LS $LZ)))))))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (or (|$PrefixEq#_module.Stream| |_k#0| ($LS ($LS $LZ)) (Lit DatatypeTypeType (_module.__default.append ($LS $LZ) (Lit DatatypeTypeType (_module.__default.zeros ($LS $LZ))) (Lit DatatypeTypeType (_module.__default.ones ($LS $LZ))))) (Lit DatatypeTypeType (_module.__default.zeros ($LS $LZ)))) (=> (< 0 (|ORD#Offset| |_k#0|)) (=> (_module.Stream.Cons_q (Lit DatatypeTypeType (_module.__default.append ($LS ($LS $LZ)) (Lit DatatypeTypeType (_module.__default.zeros ($LS ($LS $LZ)))) (Lit DatatypeTypeType (_module.__default.ones ($LS ($LS $LZ))))))) (and (_module.Stream.Cons_q (Lit DatatypeTypeType (_module.__default.zeros ($LS ($LS $LZ))))) (and (= (_module.Stream.head (Lit DatatypeTypeType (_module.__default.append ($LS ($LS $LZ)) (Lit DatatypeTypeType (_module.__default.zeros ($LS ($LS $LZ)))) (Lit DatatypeTypeType (_module.__default.ones ($LS ($LS $LZ))))))) (_module.Stream.head (Lit DatatypeTypeType (_module.__default.zeros ($LS ($LS $LZ)))))) (|$PrefixEq#_module.Stream| (|ORD#Minus| |_k#0| (|ORD#FromNat| 1)) ($LS ($LS $LZ)) (_module.Stream.tail (Lit DatatypeTypeType (_module.__default.append ($LS ($LS $LZ)) (Lit DatatypeTypeType (_module.__default.zeros ($LS ($LS $LZ)))) (Lit DatatypeTypeType (_module.__default.ones ($LS ($LS $LZ))))))) (_module.Stream.tail (Lit DatatypeTypeType (_module.__default.zeros ($LS ($LS $LZ)))))))))))) (=> (or (|$PrefixEq#_module.Stream| |_k#0| ($LS ($LS $LZ)) (Lit DatatypeTypeType (_module.__default.append ($LS $LZ) (Lit DatatypeTypeType (_module.__default.zeros ($LS $LZ))) (Lit DatatypeTypeType (_module.__default.ones ($LS $LZ))))) (Lit DatatypeTypeType (_module.__default.zeros ($LS $LZ)))) (=> (< 0 (|ORD#Offset| |_k#0|)) (=> (_module.Stream.Cons_q (Lit DatatypeTypeType (_module.__default.append ($LS ($LS $LZ)) (Lit DatatypeTypeType (_module.__default.zeros ($LS ($LS $LZ)))) (Lit DatatypeTypeType (_module.__default.ones ($LS ($LS $LZ))))))) (and (_module.Stream.Cons_q (Lit DatatypeTypeType (_module.__default.zeros ($LS ($LS $LZ))))) (and (= (_module.Stream.head (Lit DatatypeTypeType (_module.__default.append ($LS ($LS $LZ)) (Lit DatatypeTypeType (_module.__default.zeros ($LS ($LS $LZ)))) (Lit DatatypeTypeType (_module.__default.ones ($LS ($LS $LZ))))))) (_module.Stream.head (Lit DatatypeTypeType (_module.__default.zeros ($LS ($LS $LZ)))))) (|$PrefixEq#_module.Stream| (|ORD#Minus| |_k#0| (|ORD#FromNat| 1)) ($LS ($LS $LZ)) (_module.Stream.tail (Lit DatatypeTypeType (_module.__default.append ($LS ($LS $LZ)) (Lit DatatypeTypeType (_module.__default.zeros ($LS ($LS $LZ)))) (Lit DatatypeTypeType (_module.__default.ones ($LS ($LS $LZ))))))) (_module.Stream.tail (Lit DatatypeTypeType (_module.__default.zeros ($LS ($LS $LZ))))))))))) (=> (= (ControlFlow 0 2) (- 0 1)) (or (|$PrefixEq#_module.Stream| |_k#0| ($LS ($LS $LZ)) (Lit DatatypeTypeType (_module.__default.append ($LS $LZ) (Lit DatatypeTypeType (_module.__default.zeros ($LS $LZ))) (Lit DatatypeTypeType (_module.__default.ones ($LS $LZ))))) (Lit DatatypeTypeType (_module.__default.zeros ($LS $LZ)))) (or (=> (< 0 (|ORD#Offset| |_k#0|)) (and (=> (_module.Stream.Nil_q (Lit DatatypeTypeType (_module.__default.append ($LS ($LS $LZ)) (Lit DatatypeTypeType (_module.__default.zeros ($LS ($LS $LZ)))) (Lit DatatypeTypeType (_module.__default.ones ($LS ($LS $LZ))))))) (_module.Stream.Nil_q (Lit DatatypeTypeType (_module.__default.zeros ($LS ($LS $LZ)))))) (=> (_module.Stream.Cons_q (Lit DatatypeTypeType (_module.__default.append ($LS ($LS $LZ)) (Lit DatatypeTypeType (_module.__default.zeros ($LS ($LS $LZ)))) (Lit DatatypeTypeType (_module.__default.ones ($LS ($LS $LZ))))))) (and (_module.Stream.Cons_q (Lit DatatypeTypeType (_module.__default.zeros ($LS ($LS $LZ))))) (and (= (_module.Stream.head (Lit DatatypeTypeType (_module.__default.append ($LS ($LS $LZ)) (Lit DatatypeTypeType (_module.__default.zeros ($LS ($LS $LZ)))) (Lit DatatypeTypeType (_module.__default.ones ($LS ($LS $LZ))))))) (_module.Stream.head (Lit DatatypeTypeType (_module.__default.zeros ($LS ($LS $LZ)))))) (|$PrefixEq#_module.Stream| (|ORD#Minus| |_k#0| (|ORD#FromNat| 1)) ($LS ($LS $LZ)) (_module.Stream.tail (Lit DatatypeTypeType (_module.__default.append ($LS ($LS $LZ)) (Lit DatatypeTypeType (_module.__default.zeros ($LS ($LS $LZ)))) (Lit DatatypeTypeType (_module.__default.ones ($LS ($LS $LZ))))))) (_module.Stream.tail (Lit DatatypeTypeType (_module.__default.zeros ($LS ($LS $LZ))))))))))) (=> (and (or (not (= |_k#0| (|ORD#FromNat| 0))) (not true)) (= (|ORD#Offset| |_k#0|) 0)) (|$Eq#_module.Stream| ($LS ($LS $LZ)) (Lit DatatypeTypeType (_module.__default.append ($LS $LZ) (Lit DatatypeTypeType (_module.__default.zeros ($LS $LZ))) (Lit DatatypeTypeType (_module.__default.ones ($LS $LZ))))) (Lit DatatypeTypeType (_module.__default.zeros ($LS $LZ))))))))))))))
(let ((anon3_Else_correct  (=> (<= (|ORD#Offset| |_k#0|) 0) (=> (and (and (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1)) (= $Heap $Heap@1)) (and (forall ((|_k'#0| T@U) ) (!  (=> (|ORD#Less| |_k'#0| |_k#0|) (|$PrefixEq#_module.Stream| |_k'#0| ($LS ($LS $LZ)) (Lit DatatypeTypeType (_module.__default.append ($LS $LZ) (Lit DatatypeTypeType (_module.__default.zeros ($LS $LZ))) (Lit DatatypeTypeType (_module.__default.ones ($LS $LZ))))) (Lit DatatypeTypeType (_module.__default.zeros ($LS $LZ)))))
 :pattern ( (|$PrefixEq#_module.Stream| |_k'#0| ($LS ($LS $LZ)) (_module.__default.append ($LS $LZ) (_module.__default.zeros ($LS $LZ)) (_module.__default.ones ($LS $LZ))) (_module.__default.zeros ($LS $LZ))))
 :pattern ( (|ORD#Less| |_k'#0| |_k#0|))
)) (= (ControlFlow 0 8) 2))) GeneratedUnifiedExit_correct))))
(let ((anon3_Then_correct  (=> (< 0 (|ORD#Offset| |_k#0|)) (and (=> (= (ControlFlow 0 5) (- 0 7)) (|ORD#IsNat| (Lit BoxType (|ORD#FromNat| 1)))) (=> (|ORD#IsNat| (Lit BoxType (|ORD#FromNat| 1))) (and (=> (= (ControlFlow 0 5) (- 0 6)) (<= (|ORD#Offset| (Lit BoxType (|ORD#FromNat| 1))) (|ORD#Offset| |_k#0|))) (=> (<= (|ORD#Offset| (Lit BoxType (|ORD#FromNat| 1))) (|ORD#Offset| |_k#0|)) (=> (= |_k##0@0| (|ORD#Minus| |_k#0| (|ORD#FromNat| 1))) (=> (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (=> (and (and (and (and (and |_module.__default.zeros#canCall| |_module.__default.ones#canCall|) (|_module.__default.append#canCall| (Lit DatatypeTypeType (_module.__default.zeros ($LS $LZ))) (Lit DatatypeTypeType (_module.__default.ones ($LS $LZ))))) |_module.__default.zeros#canCall|) (|$PrefixEq#_module.Stream| |_k##0@0| ($LS ($LS $LZ)) (Lit DatatypeTypeType (_module.__default.append ($LS $LZ) (Lit DatatypeTypeType (_module.__default.zeros ($LS $LZ))) (Lit DatatypeTypeType (_module.__default.ones ($LS $LZ))))) (Lit DatatypeTypeType (_module.__default.zeros ($LS $LZ))))) (and (= $Heap $Heap@0) (= (ControlFlow 0 5) 2))) GeneratedUnifiedExit_correct))))))))))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (and (=> (= (ControlFlow 0 9) 5) anon3_Then_correct) (=> (= (ControlFlow 0 9) 8) anon3_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (and (= 3 $FunctionContextHeight) (= (ControlFlow 0 10) 9))) anon0_correct)))
PreconditionGeneratedEntry_correct))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
