(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TChar () T@U)
(declare-fun TInt () T@U)
(declare-fun TReal () T@U)
(declare-fun TagChar () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagReal () T@U)
(declare-fun TagSet () T@U)
(declare-fun TagISet () T@U)
(declare-fun TagMultiSet () T@U)
(declare-fun TagSeq () T@U)
(declare-fun TagMap () T@U)
(declare-fun TagIMap () T@U)
(declare-fun alloc () T@U)
(declare-fun |##_System._tuple#2._#Make2| () T@U)
(declare-fun Tagclass._System.Tuple2 () T@U)
(declare-fun Tagclass._module.Lower () T@U)
(declare-fun |tytagFamily$_tuple#2| () T@U)
(declare-fun tytagFamily$Lower () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun TBitvector (Int) T@U)
(declare-fun bv12Type () T@T)
(declare-fun bv12_2_U ((_ BitVec 12)) T@U)
(declare-fun U_2_bv12 (T@U) (_ BitVec 12))
(declare-fun bv28Type () T@T)
(declare-fun bv28_2_U ((_ BitVec 28)) T@U)
(declare-fun U_2_bv28 (T@U) (_ BitVec 28))
(declare-fun Tclass._module.Lower () T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun _System.Tuple2.___hMake2_q (T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun Tclass._System.Tuple2 (T@U T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun |Set#Empty| () T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun |Seq#Empty| () T@U)
(declare-fun MultiSetType () T@T)
(declare-fun TMultiSet (T@U) T@U)
(declare-fun $IsGoodMultiSet (T@U) Bool)
(declare-fun |#_System._tuple#2._#Make2| (T@U T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun refType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun TISet (T@U) T@U)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.P (Int) Bool)
(declare-fun |_module.__default.P#canCall| (Int) Bool)
(declare-fun SetType () T@T)
(declare-fun TSet (T@U) T@U)
(declare-fun |IMap#Domain| (T@U) T@U)
(declare-fun |IMap#Empty| () T@U)
(declare-fun |IMap#Values| (T@U) T@U)
(declare-fun |IMap#Items| (T@U) T@U)
(declare-fun _System.Tuple2._0 (T@U) T@U)
(declare-fun |IMap#Elements| (T@U) T@U)
(declare-fun _System.Tuple2._1 (T@U) T@U)
(declare-fun IMapType () T@T)
(declare-fun TIMap (T@U T@U) T@U)
(declare-fun |MultiSet#Multiplicity| (T@U T@U) Int)
(declare-fun |ISet#Empty| () T@U)
(declare-fun charType () T@T)
(declare-fun |MultiSet#Card| (T@U) Int)
(declare-fun |MultiSet#Empty| () T@U)
(declare-fun TMap (T@U T@U) T@U)
(declare-fun Inv0_TMap (T@U) T@U)
(declare-fun Inv1_TMap (T@U) T@U)
(declare-fun Inv0_TIMap (T@U) T@U)
(declare-fun Inv1_TIMap (T@U) T@U)
(declare-fun Tclass._System.Tuple2_0 (T@U) T@U)
(declare-fun Tclass._System.Tuple2_1 (T@U) T@U)
(declare-fun SeqType () T@T)
(declare-fun TSeq (T@U) T@U)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun Inv0_TBitvector (T@U) Int)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun Inv0_TISet (T@U) T@U)
(declare-fun Inv0_TMultiSet (T@U) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun MapType () T@T)
(declare-fun |Map#Elements| (T@U) T@U)
(declare-fun |Map#Domain| (T@U) T@U)
(declare-fun BoxRank (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun |Map#Empty| () T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun |Map#Values| (T@U) T@U)
(declare-fun |Map#Items| (T@U) T@U)
(declare-fun |Map#Build| (T@U T@U T@U) T@U)
(declare-fun |Seq#Rank| (T@U) Int)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TChar TInt TReal TagChar TagInt TagReal TagSet TagISet TagMultiSet TagSeq TagMap TagIMap alloc |##_System._tuple#2._#Make2| Tagclass._System.Tuple2 Tagclass._module.Lower |tytagFamily$_tuple#2| tytagFamily$Lower)
)
(assert (= (Tag TChar) TagChar))
(assert (= (Tag TInt) TagInt))
(assert (= (Tag TReal) TagReal))
(assert (forall ((v T@U) (h T@U) ) (! ($IsAlloc intType v (TBitvector 0) h)
 :pattern ( ($IsAlloc intType v (TBitvector 0) h))
)))
(assert  (and (and (= (Ctor bv12Type) 3) (forall ((arg0@@2 (_ BitVec 12)) ) (! (= (U_2_bv12 (bv12_2_U arg0@@2)) arg0@@2)
 :pattern ( (bv12_2_U arg0@@2))
))) (forall ((x@@2 T@U) ) (! (= (bv12_2_U (U_2_bv12 x@@2)) x@@2)
 :pattern ( (U_2_bv12 x@@2))
))))
(assert (forall ((v@@0 T@U) (heap T@U) ) (! ($IsAlloc bv12Type v@@0 (TBitvector 12) heap)
 :pattern ( ($IsAlloc bv12Type v@@0 (TBitvector 12) heap))
)))
(assert  (and (and (= (Ctor bv28Type) 4) (forall ((arg0@@3 (_ BitVec 28)) ) (! (= (U_2_bv28 (bv28_2_U arg0@@3)) arg0@@3)
 :pattern ( (bv28_2_U arg0@@3))
))) (forall ((x@@3 T@U) ) (! (= (bv28_2_U (U_2_bv28 x@@3)) x@@3)
 :pattern ( (U_2_bv28 x@@3))
))))
(assert (forall ((v@@1 T@U) (heap@@0 T@U) ) (! ($IsAlloc bv28Type v@@1 (TBitvector 28) heap@@0)
 :pattern ( ($IsAlloc bv28Type v@@1 (TBitvector 28) heap@@0))
)))
(assert (forall ((|x#0| T@U) ($h T@U) ) (! ($IsAlloc intType |x#0| Tclass._module.Lower $h)
 :pattern ( ($IsAlloc intType |x#0| Tclass._module.Lower $h))
)))
(assert (forall ((v@@2 T@U) ) (! ($Is intType v@@2 (TBitvector 0))
 :pattern ( ($Is intType v@@2 (TBitvector 0)))
)))
(assert (forall ((v@@3 T@U) ) (! ($Is bv12Type v@@3 (TBitvector 12))
 :pattern ( ($Is bv12Type v@@3 (TBitvector 12)))
)))
(assert (forall ((v@@4 T@U) ) (! ($Is bv28Type v@@4 (TBitvector 28))
 :pattern ( ($Is bv28Type v@@4 (TBitvector 28)))
)))
(assert (= (Ctor DatatypeTypeType) 5))
(assert (forall ((|_System._tuple#2$T0| T@U) (|_System._tuple#2$T1| T@U) (d T@U) ) (!  (=> ($Is DatatypeTypeType d (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)) (_System.Tuple2.___hMake2_q d))
 :pattern ( (_System.Tuple2.___hMake2_q d) ($Is DatatypeTypeType d (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)))
)))
(assert (forall ((o T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o))
 :pattern ( (|Set#IsMember| |Set#Empty| o))
)))
(assert (= (|Seq#Length| |Seq#Empty|) 0))
(assert (= (Ctor MultiSetType) 6))
(assert (forall ((v@@5 T@U) (t0 T@U) ) (!  (=> ($Is MultiSetType v@@5 (TMultiSet t0)) ($IsGoodMultiSet v@@5))
 :pattern ( ($Is MultiSetType v@@5 (TMultiSet t0)))
)))
(assert (forall ((|_System._tuple#2$T0@@0| T@U) (|_System._tuple#2$T1@@0| T@U) (|a#2#0#0| T@U) (|a#2#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|))  (and ($IsBox |a#2#0#0| |_System._tuple#2$T0@@0|) ($IsBox |a#2#1#0| |_System._tuple#2$T1@@0|)))
 :pattern ( ($Is DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|)))
)))
(assert  (and (and (and (and (and (and (and (forall ((t0@@0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0@@0 t1 (MapType0Store t0@@0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 7)) (= (Ctor BoxType) 8)) (= (Ctor refType) 9)) (forall ((arg0@@4 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@4 arg1)) 10))) (forall ((arg0@@5 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@5 arg1@@0)) arg0@@5)
 :pattern ( (MapType0Type arg0@@5 arg1@@0))
))) (forall ((arg0@@6 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@6 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@6 arg1@@1))
))))
(assert (forall ((h@@0 T@U) (k T@U) ) (!  (=> ($HeapSucc h@@0 k) (forall ((o@@0 T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@0 o@@0) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o@@0) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o@@0) alloc))
)))
 :pattern ( ($HeapSucc h@@0 k))
)))
(assert (forall ((v@@6 T@U) (t0@@1 T@U) ) (! (= ($Is (MapType0Type BoxType boolType) v@@6 (TISet t0@@1)) (forall ((bx T@U) ) (!  (=> (U_2_bool (MapType0Select BoxType boolType v@@6 bx)) ($IsBox bx t0@@1))
 :pattern ( (MapType0Select BoxType boolType v@@6 bx))
)))
 :pattern ( ($Is (MapType0Type BoxType boolType) v@@6 (TISet t0@@1)))
)))
(assert (forall ((x@@4 Int) ) (! (= (LitInt x@@4) x@@4)
 :pattern ( (LitInt x@@4))
)))
(assert (forall ((x@@5 T@U) (T T@T) ) (! (= (Lit T x@@5) x@@5)
 :pattern ( (Lit T x@@5))
)))
(assert (forall ((|_System._tuple#2$T0@@1| T@U) (|_System._tuple#2$T1@@1| T@U) (|a#2#0#0@@0| T@U) (|a#2#1#0@@0| T@U) ($h@@0 T@U) ) (!  (=> ($IsGoodHeap $h@@0) (= ($IsAlloc DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0@@0| |a#2#1#0@@0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|) $h@@0)  (and ($IsAllocBox |a#2#0#0@@0| |_System._tuple#2$T0@@1| $h@@0) ($IsAllocBox |a#2#1#0@@0| |_System._tuple#2$T1@@1| $h@@0))))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0@@0| |a#2#1#0@@0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|) $h@@0))
)))
(assert (forall ((d@@0 T@U) ) (! (= (_System.Tuple2.___hMake2_q d@@0) (= (DatatypeCtorId d@@0) |##_System._tuple#2._#Make2|))
 :pattern ( (_System.Tuple2.___hMake2_q d@@0))
)))
(assert (forall ((x@@6 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@6)) x@@6)
 :pattern ( ($Unbox T@@0 x@@6))
)))
(assert (forall ((d@@1 T@U) ) (!  (=> (_System.Tuple2.___hMake2_q d@@1) (exists ((|a#1#0#0| T@U) (|a#1#1#0| T@U) ) (= d@@1 (|#_System._tuple#2._#Make2| |a#1#0#0| |a#1#1#0|))))
 :pattern ( (_System.Tuple2.___hMake2_q d@@1))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|x#0@@0| Int) ) (!  (=> (or (|_module.__default.P#canCall| |x#0@@0|) (< 0 $FunctionContextHeight)) (= (_module.__default.P |x#0@@0|) (= |x#0@@0| (LitInt 157))))
 :pattern ( (_module.__default.P |x#0@@0|))
))))
(assert (= (Ctor SetType) 11))
(assert (forall ((v@@7 T@U) (t0@@2 T@U) ) (! (= ($Is SetType v@@7 (TSet t0@@2)) (forall ((bx@@0 T@U) ) (!  (=> (|Set#IsMember| v@@7 bx@@0) ($IsBox bx@@0 t0@@2))
 :pattern ( (|Set#IsMember| v@@7 bx@@0))
)))
 :pattern ( ($Is SetType v@@7 (TSet t0@@2)))
)))
(assert (forall ((|x#0@@1| T@U) ) (! (= ($Is intType |x#0@@1| Tclass._module.Lower) (<= (LitInt (- 0 2)) (U_2_int |x#0@@1|)))
 :pattern ( ($Is intType |x#0@@1| Tclass._module.Lower))
)))
(assert (forall ((v@@8 T@U) (t T@U) (h@@1 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@8) t h@@1) ($IsAlloc T@@1 v@@8 t h@@1))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@8) t h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@0 T@U) (bx@@1 T@U) (t@@0 T@U) ) (!  (=> ($HeapSucc h@@2 k@@0) (=> ($IsAllocBox bx@@1 t@@0 h@@2) ($IsAllocBox bx@@1 t@@0 k@@0)))
 :pattern ( ($HeapSucc h@@2 k@@0) ($IsAllocBox bx@@1 t@@0 h@@2))
)))
(assert (forall ((h@@3 T@U) (k@@1 T@U) (v@@9 T@U) (t@@1 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@3 k@@1) (=> ($IsAlloc T@@2 v@@9 t@@1 h@@3) ($IsAlloc T@@2 v@@9 t@@1 k@@1)))
 :pattern ( ($HeapSucc h@@3 k@@1) ($IsAlloc T@@2 v@@9 t@@1 h@@3))
)))
(assert (forall ((u T@U) ) (!  (not (U_2_bool (MapType0Select BoxType boolType (|IMap#Domain| |IMap#Empty|) u)))
 :pattern ( (MapType0Select BoxType boolType (|IMap#Domain| |IMap#Empty|) u))
)))
(assert (forall ((bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 Tclass._module.Lower) (and (= ($Box intType ($Unbox intType bx@@2)) bx@@2) ($Is intType ($Unbox intType bx@@2) Tclass._module.Lower)))
 :pattern ( ($IsBox bx@@2 Tclass._module.Lower))
)))
(assert (forall ((m@@1 T@U) ) (!  (or (= m@@1 |IMap#Empty|) (exists ((k@@2 T@U) ) (U_2_bool (MapType0Select BoxType boolType (|IMap#Domain| m@@1) k@@2))))
 :pattern ( (|IMap#Domain| m@@1))
)))
(assert (forall ((m@@2 T@U) ) (!  (or (= m@@2 |IMap#Empty|) (exists ((v@@10 T@U) ) (U_2_bool (MapType0Select BoxType boolType (|IMap#Values| m@@2) v@@10))))
 :pattern ( (|IMap#Values| m@@2))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|x#0@@2| Int) ) (!  (=> (or (|_module.__default.P#canCall| (LitInt |x#0@@2|)) (< 0 $FunctionContextHeight)) (= (_module.__default.P (LitInt |x#0@@2|)) (= (LitInt |x#0@@2|) (LitInt 157))))
 :weight 3
 :pattern ( (_module.__default.P (LitInt |x#0@@2|)))
))))
(assert (forall ((v@@11 T@U) (t0@@3 T@U) (h@@4 T@U) ) (! (= ($IsAlloc (MapType0Type BoxType boolType) v@@11 (TISet t0@@3) h@@4) (forall ((bx@@3 T@U) ) (!  (=> (U_2_bool (MapType0Select BoxType boolType v@@11 bx@@3)) ($IsAllocBox bx@@3 t0@@3 h@@4))
 :pattern ( (MapType0Select BoxType boolType v@@11 bx@@3))
)))
 :pattern ( ($IsAlloc (MapType0Type BoxType boolType) v@@11 (TISet t0@@3) h@@4))
)))
(assert (forall ((m@@3 T@U) (item T@U) ) (! (= (U_2_bool (MapType0Select BoxType boolType (|IMap#Items| m@@3) item))  (and (U_2_bool (MapType0Select BoxType boolType (|IMap#Domain| m@@3) (_System.Tuple2._0 ($Unbox DatatypeTypeType item)))) (= (MapType0Select BoxType BoxType (|IMap#Elements| m@@3) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item)))))
 :pattern ( (MapType0Select BoxType boolType (|IMap#Items| m@@3) item))
)))
(assert (forall ((m@@4 T@U) (v@@12 T@U) ) (! (= (U_2_bool (MapType0Select BoxType boolType (|IMap#Values| m@@4) v@@12)) (exists ((u@@0 T@U) ) (!  (and (U_2_bool (MapType0Select BoxType boolType (|IMap#Domain| m@@4) u@@0)) (= v@@12 (MapType0Select BoxType BoxType (|IMap#Elements| m@@4) u@@0)))
 :pattern ( (MapType0Select BoxType boolType (|IMap#Domain| m@@4) u@@0))
 :pattern ( (MapType0Select BoxType BoxType (|IMap#Elements| m@@4) u@@0))
)))
 :pattern ( (MapType0Select BoxType boolType (|IMap#Values| m@@4) v@@12))
)))
(assert (= (Ctor IMapType) 12))
(assert (forall ((v@@13 T@U) (t0@@4 T@U) (t1@@0 T@U) (h@@5 T@U) ) (! (= ($IsAlloc IMapType v@@13 (TIMap t0@@4 t1@@0) h@@5) (forall ((bx@@4 T@U) ) (!  (=> (U_2_bool (MapType0Select BoxType boolType (|IMap#Domain| v@@13) bx@@4)) (and ($IsAllocBox (MapType0Select BoxType BoxType (|IMap#Elements| v@@13) bx@@4) t1@@0 h@@5) ($IsAllocBox bx@@4 t0@@4 h@@5)))
 :pattern ( (MapType0Select BoxType BoxType (|IMap#Elements| v@@13) bx@@4))
 :pattern ( (MapType0Select BoxType boolType (|IMap#Domain| v@@13) bx@@4))
)))
 :pattern ( ($IsAlloc IMapType v@@13 (TIMap t0@@4 t1@@0) h@@5))
)))
(assert (forall ((v@@14 T@U) (t0@@5 T@U) ) (! (= ($Is MultiSetType v@@14 (TMultiSet t0@@5)) (forall ((bx@@5 T@U) ) (!  (=> (< 0 (|MultiSet#Multiplicity| v@@14 bx@@5)) ($IsBox bx@@5 t0@@5))
 :pattern ( (|MultiSet#Multiplicity| v@@14 bx@@5))
)))
 :pattern ( ($Is MultiSetType v@@14 (TMultiSet t0@@5)))
)))
(assert (forall ((a T@U) (b T@U) (c T@U) ) (!  (=> (or (not (= a c)) (not true)) (=> (and ($HeapSucc a b) ($HeapSucc b c)) ($HeapSucc a c)))
 :pattern ( ($HeapSucc a b) ($HeapSucc b c))
)))
(assert (forall ((m@@5 T@U) ) (! (= (= m@@5 |IMap#Empty|) (= (|IMap#Domain| m@@5) |ISet#Empty|))
 :pattern ( (|IMap#Domain| m@@5))
)))
(assert (forall ((m@@6 T@U) ) (! (= (= m@@6 |IMap#Empty|) (= (|IMap#Values| m@@6) |ISet#Empty|))
 :pattern ( (|IMap#Values| m@@6))
)))
(assert (forall ((m@@7 T@U) ) (! (= (= m@@7 |IMap#Empty|) (= (|IMap#Items| m@@7) |ISet#Empty|))
 :pattern ( (|IMap#Items| m@@7))
)))
(assert (forall ((m@@8 T@U) ) (!  (or (= m@@8 |IMap#Empty|) (exists ((k@@3 T@U) (v@@15 T@U) ) (U_2_bool (MapType0Select BoxType boolType (|IMap#Items| m@@8) ($Box DatatypeTypeType (|#_System._tuple#2._#Make2| k@@3 v@@15))))))
 :pattern ( (|IMap#Items| m@@8))
)))
(assert (forall ((bx@@6 T@U) ) (!  (=> ($IsBox bx@@6 TInt) (and (= ($Box intType ($Unbox intType bx@@6)) bx@@6) ($Is intType ($Unbox intType bx@@6) TInt)))
 :pattern ( ($IsBox bx@@6 TInt))
)))
(assert (forall ((bx@@7 T@U) ) (!  (=> ($IsBox bx@@7 TReal) (and (= ($Box realType ($Unbox realType bx@@7)) bx@@7) ($Is realType ($Unbox realType bx@@7) TReal)))
 :pattern ( ($IsBox bx@@7 TReal))
)))
(assert (= (Ctor charType) 13))
(assert (forall ((bx@@8 T@U) ) (!  (=> ($IsBox bx@@8 TChar) (and (= ($Box charType ($Unbox charType bx@@8)) bx@@8) ($Is charType ($Unbox charType bx@@8) TChar)))
 :pattern ( ($IsBox bx@@8 TChar))
)))
(assert (forall ((v@@16 T@U) (t@@2 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@16) t@@2) ($Is T@@3 v@@16 t@@2))
 :pattern ( ($IsBox ($Box T@@3 v@@16) t@@2))
)))
(assert (forall ((ms T@U) ) (! (= ($IsGoodMultiSet ms) (forall ((bx@@9 T@U) ) (!  (and (<= 0 (|MultiSet#Multiplicity| ms bx@@9)) (<= (|MultiSet#Multiplicity| ms bx@@9) (|MultiSet#Card| ms)))
 :pattern ( (|MultiSet#Multiplicity| ms bx@@9))
)))
 :pattern ( ($IsGoodMultiSet ms))
)))
(assert (forall ((s T@U) ) (! (<= 0 (|MultiSet#Card| s))
 :pattern ( (|MultiSet#Card| s))
)))
(assert (forall ((s@@0 T@U) ) (! (<= 0 (|Seq#Length| s@@0))
 :pattern ( (|Seq#Length| s@@0))
)))
(assert (forall ((v@@17 T@U) (t0@@6 T@U) (h@@6 T@U) ) (! (= ($IsAlloc SetType v@@17 (TSet t0@@6) h@@6) (forall ((bx@@10 T@U) ) (!  (=> (|Set#IsMember| v@@17 bx@@10) ($IsAllocBox bx@@10 t0@@6 h@@6))
 :pattern ( (|Set#IsMember| v@@17 bx@@10))
)))
 :pattern ( ($IsAlloc SetType v@@17 (TSet t0@@6) h@@6))
)))
(assert (forall ((o@@1 T@U) ) (! (= (|MultiSet#Multiplicity| |MultiSet#Empty| o@@1) 0)
 :pattern ( (|MultiSet#Multiplicity| |MultiSet#Empty| o@@1))
)))
(assert (forall ((t@@3 T@U) (u@@1 T@U) ) (! (= (Inv0_TMap (TMap t@@3 u@@1)) t@@3)
 :pattern ( (TMap t@@3 u@@1))
)))
(assert (forall ((t@@4 T@U) (u@@2 T@U) ) (! (= (Inv1_TMap (TMap t@@4 u@@2)) u@@2)
 :pattern ( (TMap t@@4 u@@2))
)))
(assert (forall ((t@@5 T@U) (u@@3 T@U) ) (! (= (Tag (TMap t@@5 u@@3)) TagMap)
 :pattern ( (TMap t@@5 u@@3))
)))
(assert (forall ((t@@6 T@U) (u@@4 T@U) ) (! (= (Inv0_TIMap (TIMap t@@6 u@@4)) t@@6)
 :pattern ( (TIMap t@@6 u@@4))
)))
(assert (forall ((t@@7 T@U) (u@@5 T@U) ) (! (= (Inv1_TIMap (TIMap t@@7 u@@5)) u@@5)
 :pattern ( (TIMap t@@7 u@@5))
)))
(assert (forall ((t@@8 T@U) (u@@6 T@U) ) (! (= (Tag (TIMap t@@8 u@@6)) TagIMap)
 :pattern ( (TIMap t@@8 u@@6))
)))
(assert (forall ((|a#0#0#0| T@U) (|a#0#1#0| T@U) ) (! (= (DatatypeCtorId (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|)) |##_System._tuple#2._#Make2|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|))
)))
(assert (forall ((|_System._tuple#2$T0@@2| T@U) (|_System._tuple#2$T1@@2| T@U) ) (! (= (Tclass._System.Tuple2_0 (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|)) |_System._tuple#2$T0@@2|)
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|))
)))
(assert (forall ((|_System._tuple#2$T0@@3| T@U) (|_System._tuple#2$T1@@3| T@U) ) (! (= (Tclass._System.Tuple2_1 (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|)) |_System._tuple#2$T1@@3|)
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|))
)))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| T@U) ) (! (= (_System.Tuple2._0 (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|)) |a#4#0#0|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|))
)))
(assert (forall ((|a#6#0#0| T@U) (|a#6#1#0| T@U) ) (! (= (_System.Tuple2._1 (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|)) |a#6#1#0|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|))
)))
(assert (= (Ctor SeqType) 14))
(assert (forall ((v@@18 T@U) (t0@@7 T@U) (h@@7 T@U) ) (! (= ($IsAlloc SeqType v@@18 (TSeq t0@@7) h@@7) (forall ((i Int) ) (!  (=> (and (<= 0 i) (< i (|Seq#Length| v@@18))) ($IsAllocBox (|Seq#Index| v@@18 i) t0@@7 h@@7))
 :pattern ( (|Seq#Index| v@@18 i))
)))
 :pattern ( ($IsAlloc SeqType v@@18 (TSeq t0@@7) h@@7))
)))
(assert (forall ((w Int) ) (! (= (Inv0_TBitvector (TBitvector w)) w)
 :pattern ( (TBitvector w))
)))
(assert (forall ((t@@9 T@U) ) (! (= (Inv0_TSet (TSet t@@9)) t@@9)
 :pattern ( (TSet t@@9))
)))
(assert (forall ((t@@10 T@U) ) (! (= (Tag (TSet t@@10)) TagSet)
 :pattern ( (TSet t@@10))
)))
(assert (forall ((t@@11 T@U) ) (! (= (Inv0_TISet (TISet t@@11)) t@@11)
 :pattern ( (TISet t@@11))
)))
(assert (forall ((t@@12 T@U) ) (! (= (Tag (TISet t@@12)) TagISet)
 :pattern ( (TISet t@@12))
)))
(assert (forall ((t@@13 T@U) ) (! (= (Inv0_TMultiSet (TMultiSet t@@13)) t@@13)
 :pattern ( (TMultiSet t@@13))
)))
(assert (forall ((t@@14 T@U) ) (! (= (Tag (TMultiSet t@@14)) TagMultiSet)
 :pattern ( (TMultiSet t@@14))
)))
(assert (forall ((t@@15 T@U) ) (! (= (Inv0_TSeq (TSeq t@@15)) t@@15)
 :pattern ( (TSeq t@@15))
)))
(assert (forall ((t@@16 T@U) ) (! (= (Tag (TSeq t@@16)) TagSeq)
 :pattern ( (TSeq t@@16))
)))
(assert (forall ((x@@7 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@7)) x@@7)
 :pattern ( ($Box T@@4 x@@7))
)))
(assert (= (Ctor MapType) 15))
(assert (forall ((v@@19 T@U) (t0@@8 T@U) (t1@@1 T@U) (h@@8 T@U) ) (! (= ($IsAlloc MapType v@@19 (TMap t0@@8 t1@@1) h@@8) (forall ((bx@@11 T@U) ) (!  (=> (|Set#IsMember| (|Map#Domain| v@@19) bx@@11) (and ($IsAllocBox (MapType0Select BoxType BoxType (|Map#Elements| v@@19) bx@@11) t1@@1 h@@8) ($IsAllocBox bx@@11 t0@@8 h@@8)))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| v@@19) bx@@11))
 :pattern ( (|Set#IsMember| (|Map#Domain| v@@19) bx@@11))
)))
 :pattern ( ($IsAlloc MapType v@@19 (TMap t0@@8 t1@@1) h@@8))
)))
(assert (forall ((v@@20 T@U) (t0@@9 T@U) (t1@@2 T@U) ) (! (= ($Is IMapType v@@20 (TIMap t0@@9 t1@@2)) (forall ((bx@@12 T@U) ) (!  (=> (U_2_bool (MapType0Select BoxType boolType (|IMap#Domain| v@@20) bx@@12)) (and ($IsBox (MapType0Select BoxType BoxType (|IMap#Elements| v@@20) bx@@12) t1@@2) ($IsBox bx@@12 t0@@9)))
 :pattern ( (MapType0Select BoxType BoxType (|IMap#Elements| v@@20) bx@@12))
 :pattern ( (MapType0Select BoxType boolType (|IMap#Domain| v@@20) bx@@12))
)))
 :pattern ( ($Is IMapType v@@20 (TIMap t0@@9 t1@@2)))
)))
(assert (forall ((|a#5#0#0| T@U) (|a#5#1#0| T@U) ) (! (< (BoxRank |a#5#0#0|) (DtRank (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|))
)))
(assert (forall ((|a#7#0#0| T@U) (|a#7#1#0| T@U) ) (! (< (BoxRank |a#7#1#0|) (DtRank (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|))
)))
(assert (forall ((s@@1 T@U) ) (!  (and (= (= (|MultiSet#Card| s@@1) 0) (= s@@1 |MultiSet#Empty|)) (=> (or (not (= (|MultiSet#Card| s@@1) 0)) (not true)) (exists ((x@@8 T@U) ) (! (< 0 (|MultiSet#Multiplicity| s@@1 x@@8))
 :pattern ( (|MultiSet#Multiplicity| s@@1 x@@8))
))))
 :pattern ( (|MultiSet#Card| s@@1))
)))
(assert (forall ((u@@7 T@U) ) (!  (not (|Set#IsMember| (|Map#Domain| |Map#Empty|) u@@7))
 :pattern ( (|Set#IsMember| (|Map#Domain| |Map#Empty|) u@@7))
)))
(assert (forall ((bx@@13 T@U) (s@@2 T@U) (t@@17 T@U) ) (!  (=> ($IsBox bx@@13 (TMap s@@2 t@@17)) (and (= ($Box MapType ($Unbox MapType bx@@13)) bx@@13) ($Is MapType ($Unbox MapType bx@@13) (TMap s@@2 t@@17))))
 :pattern ( ($IsBox bx@@13 (TMap s@@2 t@@17)))
)))
(assert (forall ((bx@@14 T@U) (s@@3 T@U) (t@@18 T@U) ) (!  (=> ($IsBox bx@@14 (TIMap s@@3 t@@18)) (and (= ($Box IMapType ($Unbox IMapType bx@@14)) bx@@14) ($Is IMapType ($Unbox IMapType bx@@14) (TIMap s@@3 t@@18))))
 :pattern ( ($IsBox bx@@14 (TIMap s@@3 t@@18)))
)))
(assert (forall ((|_System._tuple#2$T0@@4| T@U) (|_System._tuple#2$T1@@4| T@U) (bx@@15 T@U) ) (!  (=> ($IsBox bx@@15 (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@15)) bx@@15) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@15) (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|))))
 :pattern ( ($IsBox bx@@15 (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|)))
)))
(assert (forall ((o@@2 T@U) ) (!  (not (U_2_bool (MapType0Select BoxType boolType |ISet#Empty| o@@2)))
 :pattern ( (MapType0Select BoxType boolType |ISet#Empty| o@@2))
)))
(assert  (and (forall ((t0@@10 T@T) (t1@@3 T@T) (t2 T@T) (val@@1 T@U) (m@@9 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@10 t1@@3 t2 (MapType1Store t0@@10 t1@@3 t2 m@@9 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@10 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@10 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@10 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@11 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@11 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@11 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((|_System._tuple#2$T0@@5| T@U) (|_System._tuple#2$T1@@5| T@U) ) (!  (and (= (Tag (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|)) Tagclass._System.Tuple2) (= (TagFamily (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|)) |tytagFamily$_tuple#2|))
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|))
)))
(assert (forall ((m@@12 T@U) ) (!  (or (= m@@12 |Map#Empty|) (exists ((k@@4 T@U) ) (|Set#IsMember| (|Map#Domain| m@@12) k@@4)))
 :pattern ( (|Map#Domain| m@@12))
)))
(assert (forall ((m@@13 T@U) ) (!  (or (= m@@13 |Map#Empty|) (exists ((v@@21 T@U) ) (|Set#IsMember| (|Map#Values| m@@13) v@@21)))
 :pattern ( (|Map#Values| m@@13))
)))
(assert (forall ((m@@14 T@U) (item@@0 T@U) ) (! (= (|Set#IsMember| (|Map#Items| m@@14) item@@0)  (and (|Set#IsMember| (|Map#Domain| m@@14) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0))) (= (MapType0Select BoxType BoxType (|Map#Elements| m@@14) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item@@0)))))
 :pattern ( (|Set#IsMember| (|Map#Items| m@@14) item@@0))
)))
(assert (forall ((m@@15 T@U) (v@@22 T@U) ) (! (= (|Set#IsMember| (|Map#Values| m@@15) v@@22) (exists ((u@@8 T@U) ) (!  (and (|Set#IsMember| (|Map#Domain| m@@15) u@@8) (= v@@22 (MapType0Select BoxType BoxType (|Map#Elements| m@@15) u@@8)))
 :pattern ( (|Set#IsMember| (|Map#Domain| m@@15) u@@8))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| m@@15) u@@8))
)))
 :pattern ( (|Set#IsMember| (|Map#Values| m@@15) v@@22))
)))
(assert (forall ((m@@16 T@U) (u@@9 T@U) (|u'| T@U) (v@@23 T@U) ) (!  (and (=> (= |u'| u@@9) (and (|Set#IsMember| (|Map#Domain| (|Map#Build| m@@16 u@@9 v@@23)) |u'|) (= (MapType0Select BoxType BoxType (|Map#Elements| (|Map#Build| m@@16 u@@9 v@@23)) |u'|) v@@23))) (=> (or (not (= |u'| u@@9)) (not true)) (and (= (|Set#IsMember| (|Map#Domain| (|Map#Build| m@@16 u@@9 v@@23)) |u'|) (|Set#IsMember| (|Map#Domain| m@@16) |u'|)) (= (MapType0Select BoxType BoxType (|Map#Elements| (|Map#Build| m@@16 u@@9 v@@23)) |u'|) (MapType0Select BoxType BoxType (|Map#Elements| m@@16) |u'|)))))
 :pattern ( (|Set#IsMember| (|Map#Domain| (|Map#Build| m@@16 u@@9 v@@23)) |u'|))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| (|Map#Build| m@@16 u@@9 v@@23)) |u'|))
)))
(assert (forall ((d@@2 T@U) ) (! (= (BoxRank ($Box DatatypeTypeType d@@2)) (DtRank d@@2))
 :pattern ( (BoxRank ($Box DatatypeTypeType d@@2)))
)))
(assert (forall ((bx@@16 T@U) ) (!  (=> ($IsBox bx@@16 (TBitvector 0)) (and (= ($Box intType ($Unbox intType bx@@16)) bx@@16) ($Is intType ($Unbox intType bx@@16) (TBitvector 0))))
 :pattern ( ($IsBox bx@@16 (TBitvector 0)))
)))
(assert (forall ((bx@@17 T@U) (t@@19 T@U) ) (!  (=> ($IsBox bx@@17 (TSet t@@19)) (and (= ($Box SetType ($Unbox SetType bx@@17)) bx@@17) ($Is SetType ($Unbox SetType bx@@17) (TSet t@@19))))
 :pattern ( ($IsBox bx@@17 (TSet t@@19)))
)))
(assert (forall ((bx@@18 T@U) (t@@20 T@U) ) (!  (=> ($IsBox bx@@18 (TISet t@@20)) (and (= ($Box (MapType0Type BoxType boolType) ($Unbox (MapType0Type BoxType boolType) bx@@18)) bx@@18) ($Is (MapType0Type BoxType boolType) ($Unbox (MapType0Type BoxType boolType) bx@@18) (TISet t@@20))))
 :pattern ( ($IsBox bx@@18 (TISet t@@20)))
)))
(assert (forall ((bx@@19 T@U) (t@@21 T@U) ) (!  (=> ($IsBox bx@@19 (TMultiSet t@@21)) (and (= ($Box MultiSetType ($Unbox MultiSetType bx@@19)) bx@@19) ($Is MultiSetType ($Unbox MultiSetType bx@@19) (TMultiSet t@@21))))
 :pattern ( ($IsBox bx@@19 (TMultiSet t@@21)))
)))
(assert (forall ((bx@@20 T@U) (t@@22 T@U) ) (!  (=> ($IsBox bx@@20 (TSeq t@@22)) (and (= ($Box SeqType ($Unbox SeqType bx@@20)) bx@@20) ($Is SeqType ($Unbox SeqType bx@@20) (TSeq t@@22))))
 :pattern ( ($IsBox bx@@20 (TSeq t@@22)))
)))
(assert (forall ((bx@@21 T@U) ) (!  (=> ($IsBox bx@@21 (TBitvector 12)) (and (= ($Box bv12Type ($Unbox bv12Type bx@@21)) bx@@21) ($Is bv12Type ($Unbox bv12Type bx@@21) (TBitvector 12))))
 :pattern ( ($IsBox bx@@21 (TBitvector 12)))
)))
(assert (forall ((bx@@22 T@U) ) (!  (=> ($IsBox bx@@22 (TBitvector 28)) (and (= ($Box bv28Type ($Unbox bv28Type bx@@22)) bx@@22) ($Is bv28Type ($Unbox bv28Type bx@@22) (TBitvector 28))))
 :pattern ( ($IsBox bx@@22 (TBitvector 28)))
)))
(assert (forall ((v@@24 T@U) (t0@@11 T@U) (t1@@4 T@U) ) (! (= ($Is MapType v@@24 (TMap t0@@11 t1@@4)) (forall ((bx@@23 T@U) ) (!  (=> (|Set#IsMember| (|Map#Domain| v@@24) bx@@23) (and ($IsBox (MapType0Select BoxType BoxType (|Map#Elements| v@@24) bx@@23) t1@@4) ($IsBox bx@@23 t0@@11)))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| v@@24) bx@@23))
 :pattern ( (|Set#IsMember| (|Map#Domain| v@@24) bx@@23))
)))
 :pattern ( ($Is MapType v@@24 (TMap t0@@11 t1@@4)))
)))
(assert (= (Tag Tclass._module.Lower) Tagclass._module.Lower))
(assert (= (TagFamily Tclass._module.Lower) tytagFamily$Lower))
(assert (forall ((d@@3 T@U) (|_System._tuple#2$T0@@6| T@U) ($h@@1 T@U) ) (!  (=> (and ($IsGoodHeap $h@@1) (and (_System.Tuple2.___hMake2_q d@@3) (exists ((|_System._tuple#2$T1@@6| T@U) ) (! ($IsAlloc DatatypeTypeType d@@3 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@1)
 :pattern ( ($IsAlloc DatatypeTypeType d@@3 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@1))
)))) ($IsAllocBox (_System.Tuple2._0 d@@3) |_System._tuple#2$T0@@6| $h@@1))
 :pattern ( ($IsAllocBox (_System.Tuple2._0 d@@3) |_System._tuple#2$T0@@6| $h@@1))
)))
(assert (forall ((d@@4 T@U) (|_System._tuple#2$T1@@7| T@U) ($h@@2 T@U) ) (!  (=> (and ($IsGoodHeap $h@@2) (and (_System.Tuple2.___hMake2_q d@@4) (exists ((|_System._tuple#2$T0@@7| T@U) ) (! ($IsAlloc DatatypeTypeType d@@4 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|) $h@@2)
 :pattern ( ($IsAlloc DatatypeTypeType d@@4 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|) $h@@2))
)))) ($IsAllocBox (_System.Tuple2._1 d@@4) |_System._tuple#2$T1@@7| $h@@2))
 :pattern ( ($IsAllocBox (_System.Tuple2._1 d@@4) |_System._tuple#2$T1@@7| $h@@2))
)))
(assert (forall ((|a#3#0#0| T@U) (|a#3#1#0| T@U) ) (! (= (|#_System._tuple#2._#Make2| (Lit BoxType |a#3#0#0|) (Lit BoxType |a#3#1#0|)) (Lit DatatypeTypeType (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| (Lit BoxType |a#3#0#0|) (Lit BoxType |a#3#1#0|)))
)))
(assert (forall ((x@@9 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@9))) (Lit BoxType ($Box intType (int_2_U x@@9))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@9))))
)))
(assert (forall ((x@@10 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@10)) (Lit BoxType ($Box T@@5 x@@10)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@10)))
)))
(assert (forall ((s@@4 T@U) ) (!  (=> (= (|Seq#Length| s@@4) 0) (= s@@4 |Seq#Empty|))
 :pattern ( (|Seq#Length| s@@4))
)))
(assert (forall ((v@@25 T@U) (t0@@12 T@U) (h@@9 T@U) ) (! (= ($IsAlloc MultiSetType v@@25 (TMultiSet t0@@12) h@@9) (forall ((bx@@24 T@U) ) (!  (=> (< 0 (|MultiSet#Multiplicity| v@@25 bx@@24)) ($IsAllocBox bx@@24 t0@@12 h@@9))
 :pattern ( (|MultiSet#Multiplicity| v@@25 bx@@24))
)))
 :pattern ( ($IsAlloc MultiSetType v@@25 (TMultiSet t0@@12) h@@9))
)))
(assert (forall ((h@@10 T@U) (v@@26 T@U) ) (! ($IsAlloc intType v@@26 TInt h@@10)
 :pattern ( ($IsAlloc intType v@@26 TInt h@@10))
)))
(assert (forall ((h@@11 T@U) (v@@27 T@U) ) (! ($IsAlloc realType v@@27 TReal h@@11)
 :pattern ( ($IsAlloc realType v@@27 TReal h@@11))
)))
(assert (forall ((h@@12 T@U) (v@@28 T@U) ) (! ($IsAlloc charType v@@28 TChar h@@12)
 :pattern ( ($IsAlloc charType v@@28 TChar h@@12))
)))
(assert (forall ((v@@29 T@U) (t0@@13 T@U) ) (! (= ($Is SeqType v@@29 (TSeq t0@@13)) (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| v@@29))) ($IsBox (|Seq#Index| v@@29 i@@0) t0@@13))
 :pattern ( (|Seq#Index| v@@29 i@@0))
)))
 :pattern ( ($Is SeqType v@@29 (TSeq t0@@13)))
)))
(assert (forall ((m@@17 T@U) ) (!  (or (= m@@17 |Map#Empty|) (exists ((k@@5 T@U) (v@@30 T@U) ) (|Set#IsMember| (|Map#Items| m@@17) ($Box DatatypeTypeType (|#_System._tuple#2._#Make2| k@@5 v@@30)))))
 :pattern ( (|Map#Items| m@@17))
)))
(assert (forall ((s@@5 T@U) (i@@1 Int) ) (!  (=> (and (<= 0 i@@1) (< i@@1 (|Seq#Length| s@@5))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@5 i@@1))) (|Seq#Rank| s@@5)))
 :pattern ( (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@5 i@@1))))
)))
(assert (forall ((v@@31 T@U) (t0@@14 T@U) (t1@@5 T@U) ) (!  (=> ($Is MapType v@@31 (TMap t0@@14 t1@@5)) (and (and ($Is SetType (|Map#Domain| v@@31) (TSet t0@@14)) ($Is SetType (|Map#Values| v@@31) (TSet t1@@5))) ($Is SetType (|Map#Items| v@@31) (TSet (Tclass._System.Tuple2 t0@@14 t1@@5)))))
 :pattern ( ($Is MapType v@@31 (TMap t0@@14 t1@@5)))
)))
(assert (forall ((v@@32 T@U) (t0@@15 T@U) (t1@@6 T@U) ) (!  (=> ($Is IMapType v@@32 (TIMap t0@@15 t1@@6)) (and (and ($Is (MapType0Type BoxType boolType) (|IMap#Domain| v@@32) (TISet t0@@15)) ($Is (MapType0Type BoxType boolType) (|IMap#Values| v@@32) (TISet t1@@6))) ($Is (MapType0Type BoxType boolType) (|IMap#Items| v@@32) (TISet (Tclass._System.Tuple2 t0@@15 t1@@6)))))
 :pattern ( ($Is IMapType v@@32 (TIMap t0@@15 t1@@6)))
)))
(assert (forall ((v@@33 T@U) ) (! ($Is intType v@@33 TInt)
 :pattern ( ($Is intType v@@33 TInt))
)))
(assert (forall ((v@@34 T@U) ) (! ($Is realType v@@34 TReal)
 :pattern ( ($Is realType v@@34 TReal))
)))
(assert (forall ((v@@35 T@U) ) (! ($Is charType v@@35 TChar)
 :pattern ( ($Is charType v@@35 TChar))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |j'#1@0| () Int)
(declare-fun $Heap () T@U)
(declare-fun |newtype$check#3@0| () Int)
(declare-fun |newtype$check#2@0| () Int)
(declare-fun |b#0@4| () Bool)
(declare-fun |l'#1@0| () Int)
(declare-fun |newtype$check#1@0| () Int)
(declare-fun |b#0@3| () Bool)
(declare-fun |u'#1@0| () Int)
(declare-fun |b#0@2| () Bool)
(declare-fun |t'#1@0| () Int)
(declare-fun |b#0@1| () Bool)
(declare-fun |n'#1@0| () Int)
(declare-fun |o#0@0| () Int)
(declare-fun |o#1@0| () Int)
(declare-fun |l#0@0| () Int)
(declare-fun |l#1@0| () Int)
(declare-fun |newtype$check#0@0| () Int)
(declare-fun |u#0@0| () Int)
(declare-fun |u#1@0| () Int)
(declare-fun |t#0@0| () Int)
(declare-fun |t#1@0| () Int)
(declare-fun |n#0@0| () Int)
(declare-fun |n#1@0| () Int)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |n#0| () Int)
(declare-fun |t#0| () Int)
(declare-fun |u#0| () Int)
(declare-fun |l#0@@0| () Int)
(declare-fun |o#0| () Int)
(declare-fun |x0#0| () T@U)
(declare-fun |x1#0| () T@U)
(declare-fun |x2#0| () T@U)
(declare-fun |x3#0| () T@U)
(declare-fun |x4#0| () T@U)
(declare-fun |x5#0| () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 55) (let ((anon29_correct true))
(let ((anon46_Else_correct  (=> (and (not (and (<= (LitInt (- 0 3)) |j'#1@0|) (< |j'#1@0| 7))) (= (ControlFlow 0 4) 1)) anon29_correct)))
(let ((anon46_Then_correct  (=> (and (and (and (<= (LitInt (- 0 3)) |j'#1@0|) (< |j'#1@0| 7)) ($IsAlloc intType (int_2_U |j'#1@0|) TInt $Heap)) (and (|_module.__default.P#canCall| |j'#1@0|) (= (ControlFlow 0 3) 1))) anon29_correct)))
(let ((anon45_Else_correct  (=> (< |j'#1@0| (LitInt (- 0 3))) (and (=> (= (ControlFlow 0 6) 3) anon46_Then_correct) (=> (= (ControlFlow 0 6) 4) anon46_Else_correct)))))
(let ((anon45_Then_correct  (=> (and (<= (LitInt (- 0 3)) |j'#1@0|) (= |newtype$check#3@0| (LitInt 7))) (and (=> (= (ControlFlow 0 5) 3) anon46_Then_correct) (=> (= (ControlFlow 0 5) 4) anon46_Else_correct)))))
(let ((anon44_Then_correct  (=> (and (U_2_bool (Lit boolType (bool_2_U true))) (= |newtype$check#2@0| (LitInt (- 0 3)))) (and (=> (= (ControlFlow 0 7) 5) anon45_Then_correct) (=> (= (ControlFlow 0 7) 6) anon45_Else_correct)))))
(let ((anon44_Else_correct  (=> (and (not (U_2_bool (Lit boolType (bool_2_U true)))) (= (ControlFlow 0 2) 1)) anon29_correct)))
(let ((anon24_correct  (=> (and (forall ((|l'#0| Int) )  (=> (<= (LitInt (- 0 2)) |l'#0|) (=> (< |l'#0| 20) (|_module.__default.P#canCall| |l'#0|)))) (= |b#0@4| (forall ((|l'#0@@0| Int) )  (=> (<= (LitInt (- 0 2)) |l'#0@@0|) (=> (< |l'#0@@0| 20) (_module.__default.P |l'#0@@0|)))))) (and (=> (= (ControlFlow 0 8) 7) anon44_Then_correct) (=> (= (ControlFlow 0 8) 2) anon44_Else_correct)))))
(let ((anon43_Else_correct  (=> (and (<= 20 |l'#1@0|) (= (ControlFlow 0 11) 8)) anon24_correct)))
(let ((anon43_Then_correct  (=> (and (and (< |l'#1@0| 20) ($IsAlloc intType (int_2_U |l'#1@0|) TInt $Heap)) (and (|_module.__default.P#canCall| |l'#1@0|) (= (ControlFlow 0 10) 8))) anon24_correct)))
(let ((anon42_Then_correct  (=> (and (<= (LitInt (- 0 2)) |l'#1@0|) (= |newtype$check#1@0| (LitInt 20))) (and (=> (= (ControlFlow 0 12) (- 0 13)) (<= (LitInt (- 0 2)) |newtype$check#1@0|)) (=> (<= (LitInt (- 0 2)) |newtype$check#1@0|) (and (=> (= (ControlFlow 0 12) 10) anon43_Then_correct) (=> (= (ControlFlow 0 12) 11) anon43_Else_correct)))))))
(let ((anon42_Else_correct  (=> (and (< |l'#1@0| (LitInt (- 0 2))) (= (ControlFlow 0 9) 8)) anon24_correct)))
(let ((anon21_correct  (=> (and (forall ((|u'#0| Int) )  (=> (and (<= (LitInt (- 0 2)) |u'#0|) (< |u'#0| 100)) (=> (U_2_bool (Lit boolType (bool_2_U true))) (|_module.__default.P#canCall| |u'#0|)))) (= |b#0@3| (forall ((|u'#0@@0| Int) )  (=> (and (<= (LitInt (- 0 2)) |u'#0@@0|) (< |u'#0@@0| 100)) (=> true (_module.__default.P |u'#0@@0|)))))) (and (=> (= (ControlFlow 0 14) 12) anon42_Then_correct) (=> (= (ControlFlow 0 14) 9) anon42_Else_correct)))))
(let ((anon41_Else_correct  (=> (and (not (U_2_bool (Lit boolType (bool_2_U true)))) (= (ControlFlow 0 17) 14)) anon21_correct)))
(let ((anon41_Then_correct  (=> (and (and (U_2_bool (Lit boolType (bool_2_U true))) ($IsAlloc intType (int_2_U |u'#1@0|) TInt $Heap)) (and (|_module.__default.P#canCall| |u'#1@0|) (= (ControlFlow 0 16) 14))) anon21_correct)))
(let ((anon40_Then_correct  (=> (and (<= (LitInt (- 0 2)) |u'#1@0|) (< |u'#1@0| 100)) (and (=> (= (ControlFlow 0 18) 16) anon41_Then_correct) (=> (= (ControlFlow 0 18) 17) anon41_Else_correct)))))
(let ((anon40_Else_correct  (=> (and (not (and (<= (LitInt (- 0 2)) |u'#1@0|) (< |u'#1@0| 100))) (= (ControlFlow 0 15) 14)) anon21_correct)))
(let ((anon18_correct  (=> (and (forall ((|t'#0| Int) )  (=> (and (<= (LitInt 0) |t'#0|) (< |t'#0| 100)) (=> (U_2_bool (Lit boolType (bool_2_U true))) (|_module.__default.P#canCall| |t'#0|)))) (= |b#0@2| (forall ((|t'#0@@0| Int) )  (=> (and (<= (LitInt 0) |t'#0@@0|) (< |t'#0@@0| 100)) (=> true (_module.__default.P |t'#0@@0|)))))) (and (=> (= (ControlFlow 0 19) 18) anon40_Then_correct) (=> (= (ControlFlow 0 19) 15) anon40_Else_correct)))))
(let ((anon39_Else_correct  (=> (and (not (U_2_bool (Lit boolType (bool_2_U true)))) (= (ControlFlow 0 22) 19)) anon18_correct)))
(let ((anon39_Then_correct  (=> (and (and (U_2_bool (Lit boolType (bool_2_U true))) ($IsAlloc intType (int_2_U |t'#1@0|) TInt $Heap)) (and (|_module.__default.P#canCall| |t'#1@0|) (= (ControlFlow 0 21) 19))) anon18_correct)))
(let ((anon38_Then_correct  (=> (and (<= (LitInt 0) |t'#1@0|) (< |t'#1@0| 100)) (and (=> (= (ControlFlow 0 23) 21) anon39_Then_correct) (=> (= (ControlFlow 0 23) 22) anon39_Else_correct)))))
(let ((anon38_Else_correct  (=> (and (not (and (<= (LitInt 0) |t'#1@0|) (< |t'#1@0| 100))) (= (ControlFlow 0 20) 19)) anon18_correct)))
(let ((anon15_correct  (=> (and (forall ((|n'#0| Int) )  (=> (and (<= (LitInt 0) |n'#0|) (< |n'#0| 100)) (=> (U_2_bool (Lit boolType (bool_2_U true))) (|_module.__default.P#canCall| |n'#0|)))) (= |b#0@1| (forall ((|n'#0@@0| Int) )  (=> (and (<= (LitInt 0) |n'#0@@0|) (< |n'#0@@0| 100)) (=> true (_module.__default.P |n'#0@@0|)))))) (and (=> (= (ControlFlow 0 24) 23) anon38_Then_correct) (=> (= (ControlFlow 0 24) 20) anon38_Else_correct)))))
(let ((anon37_Else_correct  (=> (and (not (U_2_bool (Lit boolType (bool_2_U true)))) (= (ControlFlow 0 27) 24)) anon15_correct)))
(let ((anon37_Then_correct  (=> (and (and (U_2_bool (Lit boolType (bool_2_U true))) ($IsAlloc intType (int_2_U |n'#1@0|) TInt $Heap)) (and (|_module.__default.P#canCall| |n'#1@0|) (= (ControlFlow 0 26) 24))) anon15_correct)))
(let ((anon36_Then_correct  (=> (and (<= (LitInt 0) |n'#1@0|) (< |n'#1@0| 100)) (and (=> (= (ControlFlow 0 28) 26) anon37_Then_correct) (=> (= (ControlFlow 0 28) 27) anon37_Else_correct)))))
(let ((anon36_Else_correct  (=> (and (not (and (<= (LitInt 0) |n'#1@0|) (< |n'#1@0| 100))) (= (ControlFlow 0 25) 24)) anon15_correct)))
(let ((anon12_correct  (and (=> (= (ControlFlow 0 29) (- 0 30)) (U_2_bool (Lit boolType (bool_2_U true)))) (=> (U_2_bool (Lit boolType (bool_2_U true))) (=> (U_2_bool (Lit boolType (bool_2_U true))) (and (=> (= (ControlFlow 0 29) 28) anon36_Then_correct) (=> (= (ControlFlow 0 29) 25) anon36_Else_correct)))))))
(let ((anon35_Else_correct  (=> (and (not (U_2_bool (Lit boolType (bool_2_U true)))) (= (ControlFlow 0 32) 29)) anon12_correct)))
(let ((anon35_Then_correct  (=> (and (U_2_bool (Lit boolType (bool_2_U true))) (= (ControlFlow 0 31) 29)) anon12_correct)))
(let ((anon10_correct  (and (=> (= (ControlFlow 0 33) (- 0 34)) (U_2_bool (Lit boolType (bool_2_U true)))) (=> (U_2_bool (Lit boolType (bool_2_U true))) (=> (<= (LitInt (- 0 2)) |o#0@0|) (and (=> (= (ControlFlow 0 33) 31) anon35_Then_correct) (=> (= (ControlFlow 0 33) 32) anon35_Else_correct)))))))
(let ((anon34_Else_correct  (=> (and (< |o#1@0| (LitInt (- 0 2))) (= (ControlFlow 0 36) 33)) anon10_correct)))
(let ((anon34_Then_correct  (=> (and (<= (LitInt (- 0 2)) |o#1@0|) (= (ControlFlow 0 35) 33)) anon10_correct)))
(let ((anon8_correct  (and (=> (= (ControlFlow 0 37) (- 0 38)) (or (and ($Is intType (int_2_U (LitInt (- 20 1))) Tclass._module.Lower) (U_2_bool (Lit boolType (bool_2_U (< (- 20 1) 20))))) (or (and ($Is intType (int_2_U (LitInt (- 0 2))) Tclass._module.Lower) (U_2_bool (Lit boolType (bool_2_U (< (- 0 2) 20))))) (or (and ($Is intType (int_2_U (LitInt 0)) Tclass._module.Lower) (U_2_bool (Lit boolType (bool_2_U (< 0 20))))) (exists ((|$as#l0#0| Int) )  (and (<= (LitInt (- 0 2)) |$as#l0#0|) (< |$as#l0#0| 20))))))) (=> (or (and ($Is intType (int_2_U (LitInt (- 20 1))) Tclass._module.Lower) (U_2_bool (Lit boolType (bool_2_U (< (- 20 1) 20))))) (or (and ($Is intType (int_2_U (LitInt (- 0 2))) Tclass._module.Lower) (U_2_bool (Lit boolType (bool_2_U (< (- 0 2) 20))))) (or (and ($Is intType (int_2_U (LitInt 0)) Tclass._module.Lower) (U_2_bool (Lit boolType (bool_2_U (< 0 20))))) (exists ((|$as#l0#0@@0| Int) )  (and (<= (LitInt (- 0 2)) |$as#l0#0@@0|) (< |$as#l0#0@@0| 20)))))) (=> (and (<= (LitInt (- 0 2)) |l#0@0|) (< |l#0@0| 20)) (and (=> (= (ControlFlow 0 37) 35) anon34_Then_correct) (=> (= (ControlFlow 0 37) 36) anon34_Else_correct)))))))
(let ((anon33_Else_correct  (=> (and (< |l#1@0| (LitInt (- 0 2))) (= (ControlFlow 0 41) 37)) anon8_correct)))
(let ((anon33_Then_correct  (=> (and (<= (LitInt (- 0 2)) |l#1@0|) (= |newtype$check#0@0| (LitInt 20))) (and (=> (= (ControlFlow 0 39) (- 0 40)) (<= (LitInt (- 0 2)) |newtype$check#0@0|)) (=> (<= (LitInt (- 0 2)) |newtype$check#0@0|) (=> (= (ControlFlow 0 39) 37) anon8_correct))))))
(let ((anon6_correct  (and (=> (= (ControlFlow 0 42) (- 0 43)) (U_2_bool (Lit boolType (bool_2_U true)))) (=> (U_2_bool (Lit boolType (bool_2_U true))) (=> (and (<= (LitInt (- 0 2)) |u#0@0|) (< |u#0@0| 100)) (and (=> (= (ControlFlow 0 42) 39) anon33_Then_correct) (=> (= (ControlFlow 0 42) 41) anon33_Else_correct)))))))
(let ((anon32_Else_correct  (=> (and (not (and (<= (LitInt (- 0 2)) |u#1@0|) (< |u#1@0| 100))) (= (ControlFlow 0 45) 42)) anon6_correct)))
(let ((anon32_Then_correct  (=> (and (and (<= (LitInt (- 0 2)) |u#1@0|) (< |u#1@0| 100)) (= (ControlFlow 0 44) 42)) anon6_correct)))
(let ((anon4_correct  (and (=> (= (ControlFlow 0 46) (- 0 47)) (U_2_bool (Lit boolType (bool_2_U true)))) (=> (U_2_bool (Lit boolType (bool_2_U true))) (=> (and (<= (LitInt 0) |t#0@0|) (< |t#0@0| 100)) (and (=> (= (ControlFlow 0 46) 44) anon32_Then_correct) (=> (= (ControlFlow 0 46) 45) anon32_Else_correct)))))))
(let ((anon31_Else_correct  (=> (and (not (and (<= (LitInt 0) |t#1@0|) (< |t#1@0| 100))) (= (ControlFlow 0 49) 46)) anon4_correct)))
(let ((anon31_Then_correct  (=> (and (and (<= (LitInt 0) |t#1@0|) (< |t#1@0| 100)) (= (ControlFlow 0 48) 46)) anon4_correct)))
(let ((anon2_correct  (and (=> (= (ControlFlow 0 50) (- 0 51)) (U_2_bool (Lit boolType (bool_2_U true)))) (=> (U_2_bool (Lit boolType (bool_2_U true))) (=> (and (<= (LitInt 0) |n#0@0|) (< |n#0@0| 100)) (and (=> (= (ControlFlow 0 50) 48) anon31_Then_correct) (=> (= (ControlFlow 0 50) 49) anon31_Else_correct)))))))
(let ((anon30_Else_correct  (=> (and (not (and (<= (LitInt 0) |n#1@0|) (< |n#1@0| 100))) (= (ControlFlow 0 53) 50)) anon2_correct)))
(let ((anon30_Then_correct  (=> (and (and (<= (LitInt 0) |n#1@0|) (< |n#1@0| 100)) (= (ControlFlow 0 52) 50)) anon2_correct)))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (and (=> (= (ControlFlow 0 54) 52) anon30_Then_correct) (=> (= (ControlFlow 0 54) 53) anon30_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (=> (and (and (and (and (<= (LitInt 0) |n#0|) (< |n#0| 100)) true) (and (and (<= (LitInt 0) |t#0|) (< |t#0| 100)) true)) (and (and (and (<= (LitInt (- 0 2)) |u#0|) (< |u#0| 100)) true) (and (<= (LitInt (- 0 2)) |l#0@@0|) true))) (=> (and (and (and (and (and (<= (LitInt (- 0 2)) |o#0|) true) (and (U_2_bool (Lit boolType (bool_2_U true))) true)) (and (and ($Is SetType |x0#0| (TSet TInt)) ($IsAlloc SetType |x0#0| (TSet TInt) $Heap)) true)) (and (and (and ($Is SeqType |x1#0| (TSeq TReal)) ($IsAlloc SeqType |x1#0| (TSeq TReal) $Heap)) true) (and (and ($Is MapType |x2#0| (TMap TInt TInt)) ($IsAlloc MapType |x2#0| (TMap TInt TInt) $Heap)) true))) (and (and (and (and ($Is MultiSetType |x3#0| (TMultiSet TChar)) ($IsAlloc MultiSetType |x3#0| (TMultiSet TChar) $Heap)) true) (and (and ($Is (MapType0Type BoxType boolType) |x4#0| (TISet (TBitvector 12))) ($IsAlloc (MapType0Type BoxType boolType) |x4#0| (TISet (TBitvector 12)) $Heap)) true)) (and (and (and ($Is IMapType |x5#0| (TIMap (TBitvector 28) TInt)) ($IsAlloc IMapType |x5#0| (TIMap (TBitvector 28) TInt) $Heap)) true) (and (= 2 $FunctionContextHeight) (= (ControlFlow 0 55) 54))))) anon0_correct)))))
PreconditionGeneratedEntry_correct))))))))))))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
