(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TagSet () T@U)
(declare-fun alloc () T@U)
(declare-fun allocName () T@U)
(declare-fun Tagclass._System.object? () T@U)
(declare-fun Tagclass._System.object () T@U)
(declare-fun class._module.Cell? () T@U)
(declare-fun Tagclass._module.Cell? () T@U)
(declare-fun Tagclass._module.Cell () T@U)
(declare-fun class._module.Iter? () T@U)
(declare-fun Tagclass._module.Iter? () T@U)
(declare-fun Tagclass._module.Iter () T@U)
(declare-fun tytagFamily$object () T@U)
(declare-fun tytagFamily$Cell () T@U)
(declare-fun tytagFamily$Iter () T@U)
(declare-fun field$x () T@U)
(declare-fun field$_new () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun _module.Iter.x (T@U) T@U)
(declare-fun Tclass._module.Iter? (T@U T@U) T@U)
(declare-fun null () T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun _module.Iter.y (T@U) T@U)
(declare-fun _module.Iter.__decreases0 (T@U) T@U)
(declare-fun _module.Iter.__decreases1 (T@U) T@U)
(declare-fun FDim (T@U) Int)
(declare-fun DeclName (T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun refType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun _module.Cell.x () T@U)
(declare-fun Tclass._module.Cell? (T@U) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass._module.Cell (T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun |Set#Empty| () T@U)
(declare-fun Tclass._System.object () T@U)
(declare-fun Tclass._System.object? () T@U)
(declare-fun _module.Iter.__new () T@U)
(declare-fun FieldOfDecl (T@U T@U) T@U)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun _module.Iter.__reads (T@U) T@U)
(declare-fun SetType () T@T)
(declare-fun TSet (T@U) T@U)
(declare-fun _module.Iter.__modifies (T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun Tclass._module.Iter (T@U T@U) T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#5| (T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun _module.Iter.Valid (T@U T@U T@U T@U) Bool)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun DeclType (T@U) T@U)
(declare-fun $AlwaysAllocated (T@U) Bool)
(declare-fun Tclass._module.Iter?_0 (T@U) T@U)
(declare-fun Tclass._module.Iter?_1 (T@U) T@U)
(declare-fun Tclass._module.Iter_0 (T@U) T@U)
(declare-fun Tclass._module.Iter_1 (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun Tclass._module.Cell?_0 (T@U) T@U)
(declare-fun Tclass._module.Cell_0 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TagSet alloc allocName Tagclass._System.object? Tagclass._System.object class._module.Cell? Tagclass._module.Cell? Tagclass._module.Cell class._module.Iter? Tagclass._module.Iter? Tagclass._module.Iter tytagFamily$object tytagFamily$Cell tytagFamily$Iter field$x field$_new)
)
(assert (forall ((_module.Iter$X T@U) (_module.Iter$Y T@U) ($o T@U) ) (!  (=> (and (or (not (= $o null)) (not true)) (= (dtype $o) (Tclass._module.Iter? _module.Iter$X _module.Iter$Y))) ($IsBox (_module.Iter.x $o) _module.Iter$X))
 :pattern ( (_module.Iter.x $o) (Tclass._module.Iter? _module.Iter$X _module.Iter$Y))
)))
(assert (forall ((_module.Iter$X@@0 T@U) (_module.Iter$Y@@0 T@U) ($o@@0 T@U) ) (!  (=> (and (or (not (= $o@@0 null)) (not true)) (= (dtype $o@@0) (Tclass._module.Iter? _module.Iter$X@@0 _module.Iter$Y@@0))) ($IsBox (_module.Iter.y $o@@0) _module.Iter$Y@@0))
 :pattern ( (_module.Iter.y $o@@0) (Tclass._module.Iter? _module.Iter$X@@0 _module.Iter$Y@@0))
)))
(assert (forall ((_module.Iter$X@@1 T@U) (_module.Iter$Y@@1 T@U) ($o@@1 T@U) ) (!  (=> (and (or (not (= $o@@1 null)) (not true)) (= (dtype $o@@1) (Tclass._module.Iter? _module.Iter$X@@1 _module.Iter$Y@@1))) ($IsBox (_module.Iter.__decreases0 $o@@1) _module.Iter$X@@1))
 :pattern ( (_module.Iter.__decreases0 $o@@1) (Tclass._module.Iter? _module.Iter$X@@1 _module.Iter$Y@@1))
)))
(assert (forall ((_module.Iter$X@@2 T@U) (_module.Iter$Y@@2 T@U) ($o@@2 T@U) ) (!  (=> (and (or (not (= $o@@2 null)) (not true)) (= (dtype $o@@2) (Tclass._module.Iter? _module.Iter$X@@2 _module.Iter$Y@@2))) ($IsBox (_module.Iter.__decreases1 $o@@2) _module.Iter$Y@@2))
 :pattern ( (_module.Iter.__decreases1 $o@@2) (Tclass._module.Iter? _module.Iter$X@@2 _module.Iter$Y@@2))
)))
(assert (= (FDim alloc) 0))
(assert (= (DeclName alloc) allocName))
(assert  (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 3)) (= (Ctor BoxType) 4)) (= (Ctor refType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 6))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((_module.Cell$X T@U) ($h T@U) ($o@@3 T@U) ) (!  (=> (and ($IsGoodHeap $h) (and (or (not (= $o@@3 null)) (not true)) (= (dtype $o@@3) (Tclass._module.Cell? _module.Cell$X)))) ($IsBox (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h $o@@3) _module.Cell.x) _module.Cell$X))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h $o@@3) _module.Cell.x) (Tclass._module.Cell? _module.Cell$X))
)))
(assert (forall ((_module.Cell$X@@0 T@U) ($h@@0 T@U) ($o@@4 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@0) (and (or (not (= $o@@4 null)) (not true)) (= (dtype $o@@4) (Tclass._module.Cell? _module.Cell$X@@0)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@0 $o@@4) alloc)))) ($IsAllocBox (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@0 $o@@4) _module.Cell.x) _module.Cell$X@@0 $h@@0))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@0 $o@@4) _module.Cell.x) (Tclass._module.Cell? _module.Cell$X@@0))
)))
(assert (forall ((_module.Cell$X@@1 T@U) (|c#0| T@U) ($h@@1 T@U) ) (! (= ($IsAlloc refType |c#0| (Tclass._module.Cell _module.Cell$X@@1) $h@@1) ($IsAlloc refType |c#0| (Tclass._module.Cell? _module.Cell$X@@1) $h@@1))
 :pattern ( ($IsAlloc refType |c#0| (Tclass._module.Cell _module.Cell$X@@1) $h@@1))
 :pattern ( ($IsAlloc refType |c#0| (Tclass._module.Cell? _module.Cell$X@@1) $h@@1))
)))
(assert (forall ((o T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o))
 :pattern ( (|Set#IsMember| |Set#Empty| o))
)))
(assert (forall ((_module.Iter$X@@3 T@U) (_module.Iter$Y@@3 T@U) ($h@@2 T@U) ($o@@5 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@2) (and (or (not (= $o@@5 null)) (not true)) (= (dtype $o@@5) (Tclass._module.Iter? _module.Iter$X@@3 _module.Iter$Y@@3)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o@@5) alloc)))) ($IsAllocBox (_module.Iter.x $o@@5) _module.Iter$X@@3 $h@@2))
 :pattern ( (_module.Iter.x $o@@5) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o@@5) alloc)) (Tclass._module.Iter? _module.Iter$X@@3 _module.Iter$Y@@3))
)))
(assert (forall ((_module.Iter$X@@4 T@U) (_module.Iter$Y@@4 T@U) ($h@@3 T@U) ($o@@6 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@3) (and (or (not (= $o@@6 null)) (not true)) (= (dtype $o@@6) (Tclass._module.Iter? _module.Iter$X@@4 _module.Iter$Y@@4)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@3 $o@@6) alloc)))) ($IsAllocBox (_module.Iter.y $o@@6) _module.Iter$Y@@4 $h@@3))
 :pattern ( (_module.Iter.y $o@@6) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@3 $o@@6) alloc)) (Tclass._module.Iter? _module.Iter$X@@4 _module.Iter$Y@@4))
)))
(assert (forall ((_module.Iter$X@@5 T@U) (_module.Iter$Y@@5 T@U) ($h@@4 T@U) ($o@@7 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@4) (and (or (not (= $o@@7 null)) (not true)) (= (dtype $o@@7) (Tclass._module.Iter? _module.Iter$X@@5 _module.Iter$Y@@5)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@4 $o@@7) alloc)))) ($IsAllocBox (_module.Iter.__decreases0 $o@@7) _module.Iter$X@@5 $h@@4))
 :pattern ( (_module.Iter.__decreases0 $o@@7) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@4 $o@@7) alloc)) (Tclass._module.Iter? _module.Iter$X@@5 _module.Iter$Y@@5))
)))
(assert (forall ((_module.Iter$X@@6 T@U) (_module.Iter$Y@@6 T@U) ($h@@5 T@U) ($o@@8 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@5) (and (or (not (= $o@@8 null)) (not true)) (= (dtype $o@@8) (Tclass._module.Iter? _module.Iter$X@@6 _module.Iter$Y@@6)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@5 $o@@8) alloc)))) ($IsAllocBox (_module.Iter.__decreases1 $o@@8) _module.Iter$Y@@6 $h@@5))
 :pattern ( (_module.Iter.__decreases1 $o@@8) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@5 $o@@8) alloc)) (Tclass._module.Iter? _module.Iter$X@@6 _module.Iter$Y@@6))
)))
(assert (forall ((|c#0@@0| T@U) ($h@@6 T@U) ) (! (= ($IsAlloc refType |c#0@@0| Tclass._System.object $h@@6) ($IsAlloc refType |c#0@@0| Tclass._System.object? $h@@6))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass._System.object $h@@6))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass._System.object? $h@@6))
)))
(assert (= (FDim _module.Iter.__new) 0))
(assert (= (FieldOfDecl class._module.Iter? field$_new) _module.Iter.__new))
(assert ($IsGhostField _module.Iter.__new))
(assert (forall ((_module.Cell$X@@2 T@U) ($o@@9 T@U) ($h@@7 T@U) ) (! (= ($IsAlloc refType $o@@9 (Tclass._module.Cell? _module.Cell$X@@2) $h@@7)  (or (= $o@@9 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@7 $o@@9) alloc)))))
 :pattern ( ($IsAlloc refType $o@@9 (Tclass._module.Cell? _module.Cell$X@@2) $h@@7))
)))
(assert (= (FDim _module.Cell.x) 0))
(assert (= (FieldOfDecl class._module.Cell? field$x) _module.Cell.x))
(assert  (not ($IsGhostField _module.Cell.x)))
(assert (forall (($o@@10 T@U) ($h@@8 T@U) ) (! (= ($IsAlloc refType $o@@10 Tclass._System.object? $h@@8)  (or (= $o@@10 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@8 $o@@10) alloc)))))
 :pattern ( ($IsAlloc refType $o@@10 Tclass._System.object? $h@@8))
)))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o@@0 T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o@@0) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o@@0) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o@@0) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (= (Ctor SetType) 7))
(assert (forall ((_module.Iter$X@@7 T@U) (_module.Iter$Y@@7 T@U) ($h@@9 T@U) ($o@@11 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@9) (and (or (not (= $o@@11 null)) (not true)) (= (dtype $o@@11) (Tclass._module.Iter? _module.Iter$X@@7 _module.Iter$Y@@7)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@9 $o@@11) alloc)))) ($IsAlloc SetType (_module.Iter.__reads $o@@11) (TSet Tclass._System.object?) $h@@9))
 :pattern ( (_module.Iter.__reads $o@@11) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@9 $o@@11) alloc)) (Tclass._module.Iter? _module.Iter$X@@7 _module.Iter$Y@@7))
)))
(assert (forall ((_module.Iter$X@@8 T@U) (_module.Iter$Y@@8 T@U) ($h@@10 T@U) ($o@@12 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@10) (and (or (not (= $o@@12 null)) (not true)) (= (dtype $o@@12) (Tclass._module.Iter? _module.Iter$X@@8 _module.Iter$Y@@8)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@10 $o@@12) alloc)))) ($IsAlloc SetType (_module.Iter.__modifies $o@@12) (TSet Tclass._System.object?) $h@@10))
 :pattern ( (_module.Iter.__modifies $o@@12) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@10 $o@@12) alloc)) (Tclass._module.Iter? _module.Iter$X@@8 _module.Iter$Y@@8))
)))
(assert (forall ((x@@2 T@U) (T T@T) ) (! (= ($Box T ($Unbox T x@@2)) x@@2)
 :pattern ( ($Unbox T x@@2))
)))
(assert (forall ((v T@U) (t0@@0 T@U) ) (! (= ($Is SetType v (TSet t0@@0)) (forall ((bx T@U) ) (!  (=> (|Set#IsMember| v bx) ($IsBox bx t0@@0))
 :pattern ( (|Set#IsMember| v bx))
)))
 :pattern ( ($Is SetType v (TSet t0@@0)))
)))
(assert (forall ((_module.Iter$X@@9 T@U) (_module.Iter$Y@@9 T@U) (|c#0@@1| T@U) ) (! (= ($Is refType |c#0@@1| (Tclass._module.Iter _module.Iter$X@@9 _module.Iter$Y@@9))  (and ($Is refType |c#0@@1| (Tclass._module.Iter? _module.Iter$X@@9 _module.Iter$Y@@9)) (or (not (= |c#0@@1| null)) (not true))))
 :pattern ( ($Is refType |c#0@@1| (Tclass._module.Iter _module.Iter$X@@9 _module.Iter$Y@@9)))
 :pattern ( ($Is refType |c#0@@1| (Tclass._module.Iter? _module.Iter$X@@9 _module.Iter$Y@@9)))
)))
(assert ($IsGhostField alloc))
(assert (forall ((_module.Cell$X@@3 T@U) (|c#0@@2| T@U) ) (! (= ($Is refType |c#0@@2| (Tclass._module.Cell _module.Cell$X@@3))  (and ($Is refType |c#0@@2| (Tclass._module.Cell? _module.Cell$X@@3)) (or (not (= |c#0@@2| null)) (not true))))
 :pattern ( ($Is refType |c#0@@2| (Tclass._module.Cell _module.Cell$X@@3)))
 :pattern ( ($Is refType |c#0@@2| (Tclass._module.Cell? _module.Cell$X@@3)))
)))
(assert (forall ((v@@0 T@U) (t T@U) (h@@0 T@U) (T@@0 T@T) ) (! (= ($IsAllocBox ($Box T@@0 v@@0) t h@@0) ($IsAlloc T@@0 v@@0 t h@@0))
 :pattern ( ($IsAllocBox ($Box T@@0 v@@0) t h@@0))
)))
(assert (forall ((h@@1 T@U) (k@@0 T@U) (bx@@0 T@U) (t@@0 T@U) ) (!  (=> ($HeapSucc h@@1 k@@0) (=> ($IsAllocBox bx@@0 t@@0 h@@1) ($IsAllocBox bx@@0 t@@0 k@@0)))
 :pattern ( ($HeapSucc h@@1 k@@0) ($IsAllocBox bx@@0 t@@0 h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@1 T@U) (v@@1 T@U) (t@@1 T@U) (T@@1 T@T) ) (!  (=> ($HeapSucc h@@2 k@@1) (=> ($IsAlloc T@@1 v@@1 t@@1 h@@2) ($IsAlloc T@@1 v@@1 t@@1 k@@1)))
 :pattern ( ($HeapSucc h@@2 k@@1) ($IsAlloc T@@1 v@@1 t@@1 h@@2))
)))
(assert (forall ((_module.Iter$X@@10 T@U) (_module.Iter$Y@@10 T@U) ($o@@13 T@U) ) (! (= ($Is refType $o@@13 (Tclass._module.Iter? _module.Iter$X@@10 _module.Iter$Y@@10))  (or (= $o@@13 null) (= (dtype $o@@13) (Tclass._module.Iter? _module.Iter$X@@10 _module.Iter$Y@@10))))
 :pattern ( ($Is refType $o@@13 (Tclass._module.Iter? _module.Iter$X@@10 _module.Iter$Y@@10)))
)))
(assert (forall ((_module.Cell$X@@4 T@U) ) (!  (and (= (Tag (Tclass._module.Cell? _module.Cell$X@@4)) Tagclass._module.Cell?) (= (TagFamily (Tclass._module.Cell? _module.Cell$X@@4)) tytagFamily$Cell))
 :pattern ( (Tclass._module.Cell? _module.Cell$X@@4))
)))
(assert (forall ((_module.Cell$X@@5 T@U) ) (!  (and (= (Tag (Tclass._module.Cell _module.Cell$X@@5)) Tagclass._module.Cell) (= (TagFamily (Tclass._module.Cell _module.Cell$X@@5)) tytagFamily$Cell))
 :pattern ( (Tclass._module.Cell _module.Cell$X@@5))
)))
(assert  (and (forall ((t0@@1 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@1 t1@@0 t2 (MapType1Store t0@@1 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| T@U) ($o@@14 T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#5| |l#0| |l#1| |l#2| |l#3|) $o@@14 $f))  (=> (and (or (not (= $o@@14 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@14) |l#2|)))) (= $o@@14 |l#3|)))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#5| |l#0| |l#1| |l#2| |l#3|) $o@@14 $f))
)))
(assert (forall ((_module.Iter$X@@11 T@U) (_module.Iter$Y@@11 T@U) ($h0 T@U) ($h1 T@U) (this T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0) ($IsGoodHeap $h1)) (and (or (not (= this null)) (not true)) ($Is refType this (Tclass._module.Iter _module.Iter$X@@11 _module.Iter$Y@@11)))) (and ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1))) (=> (forall (($o@@15 T@U) ($f@@0 T@U) )  (=> (and (or (not (= $o@@15 null)) (not true)) (or (or (= $o@@15 this) (|Set#IsMember| (_module.Iter.__reads this) ($Box refType $o@@15))) (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0 this) _module.Iter.__new)) ($Box refType $o@@15)))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0 $o@@15) $f@@0) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1 $o@@15) $f@@0)))) (= (_module.Iter.Valid _module.Iter$X@@11 _module.Iter$Y@@11 $h0 this) (_module.Iter.Valid _module.Iter$X@@11 _module.Iter$Y@@11 $h1 this))))
 :pattern ( ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1) (_module.Iter.Valid _module.Iter$X@@11 _module.Iter$Y@@11 $h1 this))
)))
(assert (forall ((_module.Iter$X@@12 T@U) (_module.Iter$Y@@12 T@U) (|c#0@@3| T@U) ($h@@11 T@U) ) (! (= ($IsAlloc refType |c#0@@3| (Tclass._module.Iter _module.Iter$X@@12 _module.Iter$Y@@12) $h@@11) ($IsAlloc refType |c#0@@3| (Tclass._module.Iter? _module.Iter$X@@12 _module.Iter$Y@@12) $h@@11))
 :pattern ( ($IsAlloc refType |c#0@@3| (Tclass._module.Iter _module.Iter$X@@12 _module.Iter$Y@@12) $h@@11))
 :pattern ( ($IsAlloc refType |c#0@@3| (Tclass._module.Iter? _module.Iter$X@@12 _module.Iter$Y@@12) $h@@11))
)))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 Tclass._System.object?) (and (= ($Box refType ($Unbox refType bx@@1)) bx@@1) ($Is refType ($Unbox refType bx@@1) Tclass._System.object?)))
 :pattern ( ($IsBox bx@@1 Tclass._System.object?))
)))
(assert (forall ((bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 Tclass._System.object) (and (= ($Box refType ($Unbox refType bx@@2)) bx@@2) ($Is refType ($Unbox refType bx@@2) Tclass._System.object)))
 :pattern ( ($IsBox bx@@2 Tclass._System.object))
)))
(assert (forall ((_module.Cell$X@@6 T@U) ($o@@16 T@U) ) (! (= ($Is refType $o@@16 (Tclass._module.Cell? _module.Cell$X@@6))  (or (= $o@@16 null) (= (dtype $o@@16) (Tclass._module.Cell? _module.Cell$X@@6))))
 :pattern ( ($Is refType $o@@16 (Tclass._module.Cell? _module.Cell$X@@6)))
)))
(assert (forall ((|c#0@@4| T@U) ) (! (= ($Is refType |c#0@@4| Tclass._System.object)  (and ($Is refType |c#0@@4| Tclass._System.object?) (or (not (= |c#0@@4| null)) (not true))))
 :pattern ( ($Is refType |c#0@@4| Tclass._System.object))
 :pattern ( ($Is refType |c#0@@4| Tclass._System.object?))
)))
(assert (forall ((_module.Iter$X@@13 T@U) (_module.Iter$Y@@13 T@U) ($h@@12 T@U) ($o@@17 T@U) ) (!  (=> (and ($IsGoodHeap $h@@12) (and (or (not (= $o@@17 null)) (not true)) (= (dtype $o@@17) (Tclass._module.Iter? _module.Iter$X@@13 _module.Iter$Y@@13)))) ($Is SetType ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@12 $o@@17) _module.Iter.__new)) (TSet Tclass._System.object?)))
 :pattern ( ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@12 $o@@17) _module.Iter.__new)) (Tclass._module.Iter? _module.Iter$X@@13 _module.Iter$Y@@13))
)))
(assert (forall ((_module.Iter$X@@14 T@U) (_module.Iter$Y@@14 T@U) ($o@@18 T@U) ($h@@13 T@U) ) (! (= ($IsAlloc refType $o@@18 (Tclass._module.Iter? _module.Iter$X@@14 _module.Iter$Y@@14) $h@@13)  (or (= $o@@18 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@13 $o@@18) alloc)))))
 :pattern ( ($IsAlloc refType $o@@18 (Tclass._module.Iter? _module.Iter$X@@14 _module.Iter$Y@@14) $h@@13))
)))
(assert (forall ((a T@U) (b T@U) ) (!  (=> (|Set#Equal| a b) (= a b))
 :pattern ( (|Set#Equal| a b))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) (c T@U) ) (!  (=> (or (not (= a@@0 c)) (not true)) (=> (and ($HeapSucc a@@0 b@@0) ($HeapSucc b@@0 c)) ($HeapSucc a@@0 c)))
 :pattern ( ($HeapSucc a@@0 b@@0) ($HeapSucc b@@0 c))
)))
(assert (forall ((cl T@U) (nm T@U) ) (!  (and (= (DeclType (FieldOfDecl cl nm)) cl) (= (DeclName (FieldOfDecl cl nm)) nm))
 :pattern ( (FieldOfDecl cl nm))
)))
(assert (forall ((v@@2 T@U) (t@@2 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@2) t@@2) ($Is T@@2 v@@2 t@@2))
 :pattern ( ($IsBox ($Box T@@2 v@@2) t@@2))
)))
(assert (forall ((ty T@U) ) (!  (=> ($AlwaysAllocated ty) (forall ((h@@3 T@U) (v@@3 T@U) ) (!  (=> ($IsBox v@@3 ty) ($IsAllocBox v@@3 ty h@@3))
 :pattern ( ($IsAllocBox v@@3 ty h@@3))
)))
 :pattern ( ($AlwaysAllocated ty))
)))
(assert (forall ((v@@4 T@U) (t0@@2 T@U) (h@@4 T@U) ) (! (= ($IsAlloc SetType v@@4 (TSet t0@@2) h@@4) (forall ((bx@@3 T@U) ) (!  (=> (|Set#IsMember| v@@4 bx@@3) ($IsAllocBox bx@@3 t0@@2 h@@4))
 :pattern ( (|Set#IsMember| v@@4 bx@@3))
)))
 :pattern ( ($IsAlloc SetType v@@4 (TSet t0@@2) h@@4))
)))
(assert (forall ((_module.Iter$X@@15 T@U) (_module.Iter$Y@@15 T@U) ) (! (= (Tclass._module.Iter?_0 (Tclass._module.Iter? _module.Iter$X@@15 _module.Iter$Y@@15)) _module.Iter$X@@15)
 :pattern ( (Tclass._module.Iter? _module.Iter$X@@15 _module.Iter$Y@@15))
)))
(assert (forall ((_module.Iter$X@@16 T@U) (_module.Iter$Y@@16 T@U) ) (! (= (Tclass._module.Iter?_1 (Tclass._module.Iter? _module.Iter$X@@16 _module.Iter$Y@@16)) _module.Iter$Y@@16)
 :pattern ( (Tclass._module.Iter? _module.Iter$X@@16 _module.Iter$Y@@16))
)))
(assert (forall ((_module.Iter$X@@17 T@U) (_module.Iter$Y@@17 T@U) ) (! (= (Tclass._module.Iter_0 (Tclass._module.Iter _module.Iter$X@@17 _module.Iter$Y@@17)) _module.Iter$X@@17)
 :pattern ( (Tclass._module.Iter _module.Iter$X@@17 _module.Iter$Y@@17))
)))
(assert (forall ((_module.Iter$X@@18 T@U) (_module.Iter$Y@@18 T@U) ) (! (= (Tclass._module.Iter_1 (Tclass._module.Iter _module.Iter$X@@18 _module.Iter$Y@@18)) _module.Iter$Y@@18)
 :pattern ( (Tclass._module.Iter _module.Iter$X@@18 _module.Iter$Y@@18))
)))
(assert (forall (($o@@19 T@U) ) (! ($Is refType $o@@19 Tclass._System.object?)
 :pattern ( ($Is refType $o@@19 Tclass._System.object?))
)))
(assert (forall ((t@@3 T@U) ) (! (= (Inv0_TSet (TSet t@@3)) t@@3)
 :pattern ( (TSet t@@3))
)))
(assert (forall ((t@@4 T@U) ) (! (= (Tag (TSet t@@4)) TagSet)
 :pattern ( (TSet t@@4))
)))
(assert (forall ((_module.Cell$X@@7 T@U) ) (! (= (Tclass._module.Cell?_0 (Tclass._module.Cell? _module.Cell$X@@7)) _module.Cell$X@@7)
 :pattern ( (Tclass._module.Cell? _module.Cell$X@@7))
)))
(assert (forall ((_module.Cell$X@@8 T@U) ) (! (= (Tclass._module.Cell_0 (Tclass._module.Cell _module.Cell$X@@8)) _module.Cell$X@@8)
 :pattern ( (Tclass._module.Cell _module.Cell$X@@8))
)))
(assert (forall ((x@@3 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@3)) x@@3)
 :pattern ( ($Box T@@3 x@@3))
)))
(assert (forall ((_module.Iter$X@@19 T@U) (_module.Iter$Y@@19 T@U) (bx@@4 T@U) ) (!  (=> ($IsBox bx@@4 (Tclass._module.Iter? _module.Iter$X@@19 _module.Iter$Y@@19)) (and (= ($Box refType ($Unbox refType bx@@4)) bx@@4) ($Is refType ($Unbox refType bx@@4) (Tclass._module.Iter? _module.Iter$X@@19 _module.Iter$Y@@19))))
 :pattern ( ($IsBox bx@@4 (Tclass._module.Iter? _module.Iter$X@@19 _module.Iter$Y@@19)))
)))
(assert (forall ((_module.Iter$X@@20 T@U) (_module.Iter$Y@@20 T@U) (bx@@5 T@U) ) (!  (=> ($IsBox bx@@5 (Tclass._module.Iter _module.Iter$X@@20 _module.Iter$Y@@20)) (and (= ($Box refType ($Unbox refType bx@@5)) bx@@5) ($Is refType ($Unbox refType bx@@5) (Tclass._module.Iter _module.Iter$X@@20 _module.Iter$Y@@20))))
 :pattern ( ($IsBox bx@@5 (Tclass._module.Iter _module.Iter$X@@20 _module.Iter$Y@@20)))
)))
(assert (forall ((_module.Iter$X@@21 T@U) (_module.Iter$Y@@21 T@U) ) (!  (and (= (Tag (Tclass._module.Iter? _module.Iter$X@@21 _module.Iter$Y@@21)) Tagclass._module.Iter?) (= (TagFamily (Tclass._module.Iter? _module.Iter$X@@21 _module.Iter$Y@@21)) tytagFamily$Iter))
 :pattern ( (Tclass._module.Iter? _module.Iter$X@@21 _module.Iter$Y@@21))
)))
(assert (forall ((_module.Iter$X@@22 T@U) (_module.Iter$Y@@22 T@U) ) (!  (and (= (Tag (Tclass._module.Iter _module.Iter$X@@22 _module.Iter$Y@@22)) Tagclass._module.Iter) (= (TagFamily (Tclass._module.Iter _module.Iter$X@@22 _module.Iter$Y@@22)) tytagFamily$Iter))
 :pattern ( (Tclass._module.Iter _module.Iter$X@@22 _module.Iter$Y@@22))
)))
(assert (forall ((bx@@6 T@U) (t@@5 T@U) ) (!  (=> ($IsBox bx@@6 (TSet t@@5)) (and (= ($Box SetType ($Unbox SetType bx@@6)) bx@@6) ($Is SetType ($Unbox SetType bx@@6) (TSet t@@5))))
 :pattern ( ($IsBox bx@@6 (TSet t@@5)))
)))
(assert (forall ((_module.Cell$X@@9 T@U) (bx@@7 T@U) ) (!  (=> ($IsBox bx@@7 (Tclass._module.Cell? _module.Cell$X@@9)) (and (= ($Box refType ($Unbox refType bx@@7)) bx@@7) ($Is refType ($Unbox refType bx@@7) (Tclass._module.Cell? _module.Cell$X@@9))))
 :pattern ( ($IsBox bx@@7 (Tclass._module.Cell? _module.Cell$X@@9)))
)))
(assert (forall ((_module.Cell$X@@10 T@U) (bx@@8 T@U) ) (!  (=> ($IsBox bx@@8 (Tclass._module.Cell _module.Cell$X@@10)) (and (= ($Box refType ($Unbox refType bx@@8)) bx@@8) ($Is refType ($Unbox refType bx@@8) (Tclass._module.Cell _module.Cell$X@@10))))
 :pattern ( ($IsBox bx@@8 (Tclass._module.Cell _module.Cell$X@@10)))
)))
(assert (forall ((_module.Iter$X@@23 T@U) (_module.Iter$Y@@23 T@U) ($o@@20 T@U) ) (!  (=> (and (or (not (= $o@@20 null)) (not true)) (= (dtype $o@@20) (Tclass._module.Iter? _module.Iter$X@@23 _module.Iter$Y@@23))) ($Is SetType (_module.Iter.__reads $o@@20) (TSet Tclass._System.object?)))
 :pattern ( (_module.Iter.__reads $o@@20) (Tclass._module.Iter? _module.Iter$X@@23 _module.Iter$Y@@23))
)))
(assert (forall ((_module.Iter$X@@24 T@U) (_module.Iter$Y@@24 T@U) ($o@@21 T@U) ) (!  (=> (and (or (not (= $o@@21 null)) (not true)) (= (dtype $o@@21) (Tclass._module.Iter? _module.Iter$X@@24 _module.Iter$Y@@24))) ($Is SetType (_module.Iter.__modifies $o@@21) (TSet Tclass._System.object?)))
 :pattern ( (_module.Iter.__modifies $o@@21) (Tclass._module.Iter? _module.Iter$X@@24 _module.Iter$Y@@24))
)))
(assert (forall ((h@@5 T@U) (r T@U) (f T@U) (x@@4 T@U) ) (!  (=> ($IsGoodHeap (MapType0Store refType (MapType0Type FieldType BoxType) h@@5 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@5 r) f x@@4))) ($HeapSucc h@@5 (MapType0Store refType (MapType0Type FieldType BoxType) h@@5 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@5 r) f x@@4))))
 :pattern ( (MapType0Store refType (MapType0Type FieldType BoxType) h@@5 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@5 r) f x@@4)))
)))
(assert (= (Tag Tclass._System.object?) Tagclass._System.object?))
(assert (= (TagFamily Tclass._System.object?) tytagFamily$object))
(assert (= (Tag Tclass._System.object) Tagclass._System.object))
(assert (= (TagFamily Tclass._System.object) tytagFamily$object))
(assert (forall ((a@@1 T@U) (b@@1 T@U) ) (! (= (|Set#Equal| a@@1 b@@1) (forall ((o@@1 T@U) ) (! (= (|Set#IsMember| a@@1 o@@1) (|Set#IsMember| b@@1 o@@1))
 :pattern ( (|Set#IsMember| a@@1 o@@1))
 :pattern ( (|Set#IsMember| b@@1 o@@1))
)))
 :pattern ( (|Set#Equal| a@@1 b@@1))
)))
(assert (forall ((_module.Iter$X@@25 T@U) (_module.Iter$Y@@25 T@U) ($h@@14 T@U) ($o@@22 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@14) (and (or (not (= $o@@22 null)) (not true)) (= (dtype $o@@22) (Tclass._module.Iter? _module.Iter$X@@25 _module.Iter$Y@@25)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@14 $o@@22) alloc)))) ($IsAlloc SetType ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@14 $o@@22) _module.Iter.__new)) (TSet Tclass._System.object?) $h@@14))
 :pattern ( ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@14 $o@@22) _module.Iter.__new)) (Tclass._module.Iter? _module.Iter$X@@25 _module.Iter$Y@@25))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun $Heap () T@U)
(declare-fun this@@0 () T@U)
(declare-fun |x#0| () T@U)
(declare-fun |y#0| () T@U)
(declare-fun _module.Iter$X@@26 () T@U)
(declare-fun _module.Iter$Y@@26 () T@U)
(declare-fun |_yieldCount#0| () Int)
(declare-fun call1formal@rds@0 () T@U)
(declare-fun call2formal@nw@0 () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun |x##0@0| () T@U)
(declare-fun call3formal@this () T@U)
(declare-fun call0formal@_module.Cell$X () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun call3formal@this@0 () T@U)
(declare-fun call4formal@s@0 () T@U)
(declare-fun $Heap@2 () T@U)
(declare-fun |x##1@0| () T@U)
(declare-fun call3formal@this@@0 () T@U)
(declare-fun call0formal@_module.Cell$X@@0 () T@U)
(declare-fun $Heap@3 () T@U)
(declare-fun call3formal@this@0@@0 () T@U)
(declare-fun call4formal@s@0@@0 () T@U)
(declare-fun $Heap@4 () T@U)
(declare-fun |$rhs#0@0| () T@U)
(declare-fun |$rhs#1@0| () T@U)
(declare-fun $_OldIterHeap () T@U)
(declare-fun |defass#c#0| () Bool)
(declare-fun |c#0@@5| () T@U)
(declare-fun |defass#d#0| () Bool)
(declare-fun |d#0| () T@U)
(declare-fun |defass#cx#0| () Bool)
(declare-fun |cx#0| () T@U)
(declare-fun |defass#dx#0| () Bool)
(declare-fun |dx#0| () T@U)
(declare-fun $FunctionContextHeight () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 10) (let ((anon0_correct  (=> (and (and (= $_ModifiesFrame@0 (|lambda#5| null $Heap alloc this@@0)) (= (_module.Iter.x this@@0) |x#0|)) (and (= (_module.Iter.y this@@0) |y#0|) (_module.Iter.Valid _module.Iter$X@@26 _module.Iter$Y@@26 $Heap this@@0))) (=> (and (and (and (|Set#Equal| (_module.Iter.__reads this@@0) |Set#Empty|) (|Set#Equal| (_module.Iter.__modifies this@@0) |Set#Empty|)) (and (|Set#Equal| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.Iter.__new)) |Set#Empty|) (= (_module.Iter.__decreases0 this@@0) |x#0|))) (and (and (= (_module.Iter.__decreases1 this@@0) |y#0|) (= |_yieldCount#0| 0)) (and (= call1formal@rds@0 (_module.Iter.__reads this@@0)) (= call2formal@nw@0 ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.Iter.__new)))))) (=> (and (and (and (and (and (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (forall (($o@@23 T@U) ($f@@1 T@U) ) (!  (=> (and (or (not (= $o@@23 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@23) alloc)))) (=> (or (or (= $o@@23 this@@0) (|Set#IsMember| call1formal@rds@0 ($Box refType $o@@23))) (|Set#IsMember| call2formal@nw@0 ($Box refType $o@@23))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@23) $f@@1) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@23) $f@@1))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@23) $f@@1))
))) (and ($HeapSucc $Heap $Heap@0) (= |x##0@0| (_module.Iter.x this@@0)))) (and (and (or (not (= call3formal@this null)) (not true)) (and ($Is refType call3formal@this (Tclass._module.Cell call0formal@_module.Cell$X)) ($IsAlloc refType call3formal@this (Tclass._module.Cell call0formal@_module.Cell$X) $Heap))) (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1)))) (and (and (and (or (not (= call3formal@this@0 null)) (not true)) (and ($Is refType call3formal@this@0 (Tclass._module.Cell _module.Iter$X@@26)) ($IsAlloc refType call3formal@this@0 (Tclass._module.Cell _module.Iter$X@@26) $Heap@1))) (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 call3formal@this@0) alloc))))) (and (forall (($o@@24 T@U) ) (!  (=> (and (or (not (= $o@@24 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@24) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@24) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@24)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@24))
)) ($HeapSucc $Heap@0 $Heap@1)))) (and (and (and (and (forall ((bx@@9 T@U) ) (! (= (|Set#IsMember| call4formal@s@0 bx@@9)  (or (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 this@@0) _module.Iter.__new)) bx@@9) (and (and (or (not (= ($Unbox refType bx@@9) null)) (not true)) (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 ($Unbox refType bx@@9)) alloc))))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 ($Unbox refType bx@@9)) alloc))))))
 :pattern ( (|Set#IsMember| call4formal@s@0 bx@@9))
)) (= $Heap@2 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap@1 this@@0 (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 this@@0) _module.Iter.__new ($Box SetType call4formal@s@0))))) (and ($IsGoodHeap $Heap@2) (= |x##1@0| (_module.Iter.y this@@0)))) (and (and (or (not (= call3formal@this@@0 null)) (not true)) (and ($Is refType call3formal@this@@0 (Tclass._module.Cell call0formal@_module.Cell$X@@0)) ($IsAlloc refType call3formal@this@@0 (Tclass._module.Cell call0formal@_module.Cell$X@@0) $Heap))) (and ($IsGoodHeap $Heap@3) ($IsHeapAnchor $Heap@3)))) (and (and (and (or (not (= call3formal@this@0@@0 null)) (not true)) (and ($Is refType call3formal@this@0@@0 (Tclass._module.Cell _module.Iter$Y@@26)) ($IsAlloc refType call3formal@this@0@@0 (Tclass._module.Cell _module.Iter$Y@@26) $Heap@3))) (and (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 call3formal@this@0@@0) alloc)))) (forall (($o@@25 T@U) ) (!  (=> (and (or (not (= $o@@25 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@25) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@25) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@25)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@25))
)))) (and (and ($HeapSucc $Heap@2 $Heap@3) (forall ((bx@@10 T@U) ) (! (= (|Set#IsMember| call4formal@s@0@@0 bx@@10)  (or (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 this@@0) _module.Iter.__new)) bx@@10) (and (and (or (not (= ($Unbox refType bx@@10) null)) (not true)) (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 ($Unbox refType bx@@10)) alloc))))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 ($Unbox refType bx@@10)) alloc))))))
 :pattern ( (|Set#IsMember| call4formal@s@0@@0 bx@@10))
))) (and (= $Heap@4 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap@3 this@@0 (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 this@@0) _module.Iter.__new ($Box SetType call4formal@s@0@@0)))) ($IsGoodHeap $Heap@4)))))) (and (=> (= (ControlFlow 0 2) (- 0 9)) true) (and (=> (= (ControlFlow 0 2) (- 0 8)) (or (not (= call3formal@this@0 null)) (not true))) (=> (or (not (= call3formal@this@0 null)) (not true)) (=> (= |$rhs#0@0| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 call3formal@this@0) _module.Cell.x)) (and (=> (= (ControlFlow 0 2) (- 0 7)) true) (and (=> (= (ControlFlow 0 2) (- 0 6)) (or (not (= call3formal@this@0@@0 null)) (not true))) (=> (or (not (= call3formal@this@0@@0 null)) (not true)) (=> (= |$rhs#1@0| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 call3formal@this@0@@0) _module.Cell.x)) (and (=> (= (ControlFlow 0 2) (- 0 5)) true) (and (=> (= (ControlFlow 0 2) (- 0 4)) ($IsAllocBox |$rhs#0@0| _module.Iter$X@@26 $Heap)) (=> ($IsAllocBox |$rhs#0@0| _module.Iter$X@@26 $Heap) (and (=> (= (ControlFlow 0 2) (- 0 3)) true) (=> (= (ControlFlow 0 2) (- 0 1)) ($IsAllocBox |$rhs#1@0| _module.Iter$Y@@26 $Heap)))))))))))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) ($AlwaysAllocated _module.Iter$X@@26)) (=> (and (and (and (or (not (= this@@0 null)) (not true)) (and ($Is refType this@@0 (Tclass._module.Iter _module.Iter$X@@26 _module.Iter$Y@@26)) ($IsAlloc refType this@@0 (Tclass._module.Iter _module.Iter$X@@26 _module.Iter$Y@@26) $Heap))) (and ($IsBox |x#0| _module.Iter$X@@26) ($IsAllocBox |x#0| _module.Iter$X@@26 $Heap))) (and (and ($IsBox |y#0| _module.Iter$Y@@26) ($IsAllocBox |y#0| _module.Iter$Y@@26 $Heap)) (and true true))) (=> (and (and (and (and ($IsGoodHeap $_OldIterHeap) ($HeapSucc $_OldIterHeap $Heap)) true) (and (=> |defass#c#0| (and ($Is refType |c#0@@5| (Tclass._module.Cell _module.Iter$X@@26)) ($IsAlloc refType |c#0@@5| (Tclass._module.Cell _module.Iter$X@@26) $Heap))) true)) (and (and (and (=> |defass#d#0| (and ($Is refType |d#0| (Tclass._module.Cell _module.Iter$Y@@26)) ($IsAlloc refType |d#0| (Tclass._module.Cell _module.Iter$Y@@26) $Heap))) true) (and (=> |defass#cx#0| (and ($IsBox |cx#0| _module.Iter$X@@26) ($IsAllocBox |cx#0| _module.Iter$X@@26 $Heap))) true)) (and (and (=> |defass#dx#0| (and ($IsBox |dx#0| _module.Iter$Y@@26) ($IsAllocBox |dx#0| _module.Iter$Y@@26 $Heap))) true) (and (= 1 $FunctionContextHeight) (= (ControlFlow 0 10) 2))))) anon0_correct)))))
PreconditionGeneratedEntry_correct)))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
