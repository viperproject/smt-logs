(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TBool () T@U)
(declare-fun TInt () T@U)
(declare-fun TReal () T@U)
(declare-fun TagBool () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagReal () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._module.Dt () T@U)
(declare-fun Tagclass._module.Co () T@U)
(declare-fun Tagclass._module.Primes () T@U)
(declare-fun Tagclass._module.Small () T@U)
(declare-fun |##_module.Dt.Blue| () T@U)
(declare-fun |##_module.Dt.Bucket| () T@U)
(declare-fun |##_module.Dt.Business| () T@U)
(declare-fun |##_module.Co.Cobalt| () T@U)
(declare-fun tytagFamily$Dt () T@U)
(declare-fun tytagFamily$Co () T@U)
(declare-fun tytagFamily$Primes () T@U)
(declare-fun tytagFamily$Small () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun TBitvector (Int) T@U)
(declare-fun bv11Type () T@T)
(declare-fun bv11_2_U ((_ BitVec 11)) T@U)
(declare-fun U_2_bv11 (T@U) (_ BitVec 11))
(declare-fun Tclass._module.Primes () T@U)
(declare-fun Tclass._module.Small () T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun |#_module.Dt.Blue| () T@U)
(declare-fun |#_module.Co.Cobalt| () T@U)
(declare-fun DatatypeTypeType () T@T)
(declare-fun Tclass._module.Dt (T@U) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun Tclass._module.Co (T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.Dt.G (T@U Int) Int)
(declare-fun |_module.Dt.G#canCall| (T@U Int) Bool)
(declare-fun Mul (Int Int) Int)
(declare-fun LitInt (Int) Int)
(declare-fun |#_module.Dt.Business| (Bool T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun refType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun _module.Dt.Blue_q (T@U) Bool)
(declare-fun _module.Dt.Bucket_q (T@U) Bool)
(declare-fun _module.Dt.Business_q (T@U) Bool)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun |#_module.Dt.Bucket| (Real) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun TagFamily (T@U) T@U)
(declare-fun _module.Dt.diameter (T@U) Real)
(declare-fun _module.Dt.trendy (T@U) Bool)
(declare-fun Mod (Int Int) Int)
(declare-fun _module.Dt.a (T@U) T@U)
(declare-fun Inv0_TBitvector (T@U) Int)
(declare-fun Tclass._module.Dt_0 (T@U) T@U)
(declare-fun Tclass._module.Co_0 (T@U) T@U)
(declare-fun BoxRank (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TBool TInt TReal TagBool TagInt TagReal alloc Tagclass._module.Dt Tagclass._module.Co Tagclass._module.Primes Tagclass._module.Small |##_module.Dt.Blue| |##_module.Dt.Bucket| |##_module.Dt.Business| |##_module.Co.Cobalt| tytagFamily$Dt tytagFamily$Co tytagFamily$Primes tytagFamily$Small)
)
(assert (= (Tag TBool) TagBool))
(assert (= (Tag TInt) TagInt))
(assert (= (Tag TReal) TagReal))
(assert (forall ((v T@U) (h T@U) ) (! ($IsAlloc intType v (TBitvector 0) h)
 :pattern ( ($IsAlloc intType v (TBitvector 0) h))
)))
(assert  (and (and (= (Ctor bv11Type) 3) (forall ((arg0@@2 (_ BitVec 11)) ) (! (= (U_2_bv11 (bv11_2_U arg0@@2)) arg0@@2)
 :pattern ( (bv11_2_U arg0@@2))
))) (forall ((x@@2 T@U) ) (! (= (bv11_2_U (U_2_bv11 x@@2)) x@@2)
 :pattern ( (U_2_bv11 x@@2))
))))
(assert (forall ((v@@0 T@U) (heap T@U) ) (! ($IsAlloc bv11Type v@@0 (TBitvector 11) heap)
 :pattern ( ($IsAlloc bv11Type v@@0 (TBitvector 11) heap))
)))
(assert (forall ((|x#0| T@U) ($h T@U) ) (! ($IsAlloc intType |x#0| Tclass._module.Primes $h)
 :pattern ( ($IsAlloc intType |x#0| Tclass._module.Primes $h))
)))
(assert (forall ((|x#0@@0| T@U) ($h@@0 T@U) ) (! ($IsAlloc intType |x#0@@0| Tclass._module.Small $h@@0)
 :pattern ( ($IsAlloc intType |x#0@@0| Tclass._module.Small $h@@0))
)))
(assert (forall ((v@@1 T@U) ) (! ($Is intType v@@1 (TBitvector 0))
 :pattern ( ($Is intType v@@1 (TBitvector 0)))
)))
(assert (forall ((v@@2 T@U) ) (! ($Is bv11Type v@@2 (TBitvector 11))
 :pattern ( ($Is bv11Type v@@2 (TBitvector 11)))
)))
(assert (= (DatatypeCtorId |#_module.Dt.Blue|) |##_module.Dt.Blue|))
(assert (= (DatatypeCtorId |#_module.Co.Cobalt|) |##_module.Co.Cobalt|))
(assert (= (Ctor DatatypeTypeType) 4))
(assert (forall ((_module.Dt$A T@U) ($h@@1 T@U) ) (!  (=> ($IsGoodHeap $h@@1) ($IsAlloc DatatypeTypeType |#_module.Dt.Blue| (Tclass._module.Dt _module.Dt$A) $h@@1))
 :pattern ( ($IsAlloc DatatypeTypeType |#_module.Dt.Blue| (Tclass._module.Dt _module.Dt$A) $h@@1))
)))
(assert (forall ((_module.Co$A T@U) ($h@@2 T@U) ) (!  (=> ($IsGoodHeap $h@@2) ($IsAlloc DatatypeTypeType |#_module.Co.Cobalt| (Tclass._module.Co _module.Co$A) $h@@2))
 :pattern ( ($IsAlloc DatatypeTypeType |#_module.Co.Cobalt| (Tclass._module.Co _module.Co$A) $h@@2))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((_module.Dt$A@@0 T@U) (|x#0@@1| Int) ) (!  (=> (or (|_module.Dt.G#canCall| _module.Dt$A@@0 |x#0@@1|) (< 0 $FunctionContextHeight)) (= (_module.Dt.G _module.Dt$A@@0 |x#0@@1|) (Mul (LitInt 2) |x#0@@1|)))
 :pattern ( (_module.Dt.G _module.Dt$A@@0 |x#0@@1|))
))))
(assert (forall ((_module.Dt$A@@1 T@U) (|a#11#0#0| Bool) (|a#11#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Dt.Business| |a#11#0#0| |a#11#1#0|) (Tclass._module.Dt _module.Dt$A@@1))  (and ($Is boolType (bool_2_U |a#11#0#0|) TBool) ($IsBox |a#11#1#0| _module.Dt$A@@1)))
 :pattern ( ($Is DatatypeTypeType (|#_module.Dt.Business| |a#11#0#0| |a#11#1#0|) (Tclass._module.Dt _module.Dt$A@@1)))
)))
(assert (forall ((_module.Dt$A@@2 T@U) ) (! ($Is DatatypeTypeType |#_module.Dt.Blue| (Tclass._module.Dt _module.Dt$A@@2))
 :pattern ( ($Is DatatypeTypeType |#_module.Dt.Blue| (Tclass._module.Dt _module.Dt$A@@2)))
)))
(assert (forall ((_module.Co$A@@0 T@U) ) (! ($Is DatatypeTypeType |#_module.Co.Cobalt| (Tclass._module.Co _module.Co$A@@0))
 :pattern ( ($Is DatatypeTypeType |#_module.Co.Cobalt| (Tclass._module.Co _module.Co$A@@0)))
)))
(assert  (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 5)) (= (Ctor BoxType) 6)) (= (Ctor refType) 7)) (forall ((arg0@@3 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@3 arg1)) 8))) (forall ((arg0@@4 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@4 arg1@@0)) arg0@@4)
 :pattern ( (MapType0Type arg0@@4 arg1@@0))
))) (forall ((arg0@@5 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@5 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@5 arg1@@1))
))))
(assert (forall ((h@@0 T@U) (k T@U) ) (!  (=> ($HeapSucc h@@0 k) (forall ((o T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@0 o) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))
)))
 :pattern ( ($HeapSucc h@@0 k))
)))
(assert (forall ((x@@3 Int) ) (! (= (LitInt x@@3) x@@3)
 :pattern ( (LitInt x@@3))
)))
(assert (forall ((x@@4 T@U) (T T@T) ) (! (= (Lit T x@@4) x@@4)
 :pattern ( (Lit T x@@4))
)))
(assert (forall ((d T@U) ) (! (= (_module.Dt.Blue_q d) (= (DatatypeCtorId d) |##_module.Dt.Blue|))
 :pattern ( (_module.Dt.Blue_q d))
)))
(assert (forall ((d@@0 T@U) ) (! (= (_module.Dt.Bucket_q d@@0) (= (DatatypeCtorId d@@0) |##_module.Dt.Bucket|))
 :pattern ( (_module.Dt.Bucket_q d@@0))
)))
(assert (forall ((d@@1 T@U) ) (! (= (_module.Dt.Business_q d@@1) (= (DatatypeCtorId d@@1) |##_module.Dt.Business|))
 :pattern ( (_module.Dt.Business_q d@@1))
)))
(assert (forall ((x@@5 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@5)) x@@5)
 :pattern ( ($Unbox T@@0 x@@5))
)))
(assert (forall ((d@@2 T@U) ) (!  (=> (_module.Dt.Business_q d@@2) (exists ((|a#10#0#0| Bool) (|a#10#1#0| T@U) ) (= d@@2 (|#_module.Dt.Business| |a#10#0#0| |a#10#1#0|))))
 :pattern ( (_module.Dt.Business_q d@@2))
)))
(assert (forall ((d@@3 T@U) ) (!  (=> (_module.Dt.Blue_q d@@3) (= d@@3 |#_module.Dt.Blue|))
 :pattern ( (_module.Dt.Blue_q d@@3))
)))
(assert (forall ((d@@4 T@U) ) (!  (=> (_module.Dt.Bucket_q d@@4) (exists ((|a#5#0#0| Real) ) (= d@@4 (|#_module.Dt.Bucket| |a#5#0#0|))))
 :pattern ( (_module.Dt.Bucket_q d@@4))
)))
(assert (forall ((v@@3 T@U) (t T@U) (h@@1 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@3) t h@@1) ($IsAlloc T@@1 v@@3 t h@@1))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@3) t h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@0 T@U) (bx T@U) (t@@0 T@U) ) (!  (=> ($HeapSucc h@@2 k@@0) (=> ($IsAllocBox bx t@@0 h@@2) ($IsAllocBox bx t@@0 k@@0)))
 :pattern ( ($HeapSucc h@@2 k@@0) ($IsAllocBox bx t@@0 h@@2))
)))
(assert (forall ((h@@3 T@U) (k@@1 T@U) (v@@4 T@U) (t@@1 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@3 k@@1) (=> ($IsAlloc T@@2 v@@4 t@@1 h@@3) ($IsAlloc T@@2 v@@4 t@@1 k@@1)))
 :pattern ( ($HeapSucc h@@3 k@@1) ($IsAlloc T@@2 v@@4 t@@1 h@@3))
)))
(assert (forall ((_module.Dt$A@@3 T@U) ) (!  (and (= (Tag (Tclass._module.Dt _module.Dt$A@@3)) Tagclass._module.Dt) (= (TagFamily (Tclass._module.Dt _module.Dt$A@@3)) tytagFamily$Dt))
 :pattern ( (Tclass._module.Dt _module.Dt$A@@3))
)))
(assert (forall ((_module.Co$A@@1 T@U) ) (!  (and (= (Tag (Tclass._module.Co _module.Co$A@@1)) Tagclass._module.Co) (= (TagFamily (Tclass._module.Co _module.Co$A@@1)) tytagFamily$Co))
 :pattern ( (Tclass._module.Co _module.Co$A@@1))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((_module.Dt$A@@4 T@U) (|x#0@@2| Int) ) (!  (=> (or (|_module.Dt.G#canCall| _module.Dt$A@@4 (LitInt |x#0@@2|)) (< 0 $FunctionContextHeight)) (= (_module.Dt.G _module.Dt$A@@4 (LitInt |x#0@@2|)) (LitInt (Mul (LitInt 2) (LitInt |x#0@@2|)))))
 :weight 3
 :pattern ( (_module.Dt.G _module.Dt$A@@4 (LitInt |x#0@@2|)))
))))
(assert (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 Tclass._module.Primes) (and (= ($Box intType ($Unbox intType bx@@0)) bx@@0) ($Is intType ($Unbox intType bx@@0) Tclass._module.Primes)))
 :pattern ( ($IsBox bx@@0 Tclass._module.Primes))
)))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 Tclass._module.Small) (and (= ($Box intType ($Unbox intType bx@@1)) bx@@1) ($Is intType ($Unbox intType bx@@1) Tclass._module.Small)))
 :pattern ( ($IsBox bx@@1 Tclass._module.Small))
)))
(assert (forall ((d@@5 T@U) ($h@@3 T@U) ) (!  (=> (and ($IsGoodHeap $h@@3) (and (_module.Dt.Bucket_q d@@5) (exists ((_module.Dt$A@@5 T@U) ) (! ($IsAlloc DatatypeTypeType d@@5 (Tclass._module.Dt _module.Dt$A@@5) $h@@3)
 :pattern ( ($IsAlloc DatatypeTypeType d@@5 (Tclass._module.Dt _module.Dt$A@@5) $h@@3))
)))) ($IsAlloc realType (real_2_U (_module.Dt.diameter d@@5)) TReal $h@@3))
 :pattern ( ($IsAlloc realType (real_2_U (_module.Dt.diameter d@@5)) TReal $h@@3))
)))
(assert (forall ((d@@6 T@U) ($h@@4 T@U) ) (!  (=> (and ($IsGoodHeap $h@@4) (and (_module.Dt.Business_q d@@6) (exists ((_module.Dt$A@@6 T@U) ) (! ($IsAlloc DatatypeTypeType d@@6 (Tclass._module.Dt _module.Dt$A@@6) $h@@4)
 :pattern ( ($IsAlloc DatatypeTypeType d@@6 (Tclass._module.Dt _module.Dt$A@@6) $h@@4))
)))) ($IsAlloc boolType (bool_2_U (_module.Dt.trendy d@@6)) TBool $h@@4))
 :pattern ( ($IsAlloc boolType (bool_2_U (_module.Dt.trendy d@@6)) TBool $h@@4))
)))
(assert (forall ((_module.Dt$A@@7 T@U) (|a#6#0#0| Real) ($h@@5 T@U) ) (!  (=> ($IsGoodHeap $h@@5) (= ($IsAlloc DatatypeTypeType (|#_module.Dt.Bucket| |a#6#0#0|) (Tclass._module.Dt _module.Dt$A@@7) $h@@5) ($IsAlloc realType (real_2_U |a#6#0#0|) TReal $h@@5)))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_module.Dt.Bucket| |a#6#0#0|) (Tclass._module.Dt _module.Dt$A@@7) $h@@5))
)))
(assert (forall ((|a#13#0#0| Bool) (|a#13#1#0| T@U) ) (! (= (_module.Dt.trendy (|#_module.Dt.Business| |a#13#0#0| |a#13#1#0|)) |a#13#0#0|)
 :pattern ( (|#_module.Dt.Business| |a#13#0#0| |a#13#1#0|))
)))
(assert (forall ((|x#0@@3| T@U) ) (! (= ($Is intType |x#0@@3| Tclass._module.Primes)  (and (<= (LitInt 2) (U_2_int |x#0@@3|)) (forall ((|y#3| Int) )  (=> (and (<= (LitInt 2) |y#3|) (< |y#3| (U_2_int |x#0@@3|))) (or (not (= (Mod (U_2_int |x#0@@3|) |y#3|) 0)) (not true))))))
 :pattern ( ($Is intType |x#0@@3| Tclass._module.Primes))
)))
(assert (forall ((a T@U) (b T@U) (c T@U) ) (!  (=> (or (not (= a c)) (not true)) (=> (and ($HeapSucc a b) ($HeapSucc b c)) ($HeapSucc a c)))
 :pattern ( ($HeapSucc a b) ($HeapSucc b c))
)))
(assert (forall ((bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 TInt) (and (= ($Box intType ($Unbox intType bx@@2)) bx@@2) ($Is intType ($Unbox intType bx@@2) TInt)))
 :pattern ( ($IsBox bx@@2 TInt))
)))
(assert (forall ((bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 TReal) (and (= ($Box realType ($Unbox realType bx@@3)) bx@@3) ($Is realType ($Unbox realType bx@@3) TReal)))
 :pattern ( ($IsBox bx@@3 TReal))
)))
(assert (forall ((bx@@4 T@U) ) (!  (=> ($IsBox bx@@4 TBool) (and (= ($Box boolType ($Unbox boolType bx@@4)) bx@@4) ($Is boolType ($Unbox boolType bx@@4) TBool)))
 :pattern ( ($IsBox bx@@4 TBool))
)))
(assert (forall ((v@@5 T@U) (t@@2 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@5) t@@2) ($Is T@@3 v@@5 t@@2))
 :pattern ( ($IsBox ($Box T@@3 v@@5) t@@2))
)))
(assert (forall ((|a#9#0#0| Bool) (|a#9#1#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Dt.Business| |a#9#0#0| |a#9#1#0|)) |##_module.Dt.Business|)
 :pattern ( (|#_module.Dt.Business| |a#9#0#0| |a#9#1#0|))
)))
(assert (forall ((|a#14#0#0| Bool) (|a#14#1#0| T@U) ) (! (= (_module.Dt.a (|#_module.Dt.Business| |a#14#0#0| |a#14#1#0|)) |a#14#1#0|)
 :pattern ( (|#_module.Dt.Business| |a#14#0#0| |a#14#1#0|))
)))
(assert (forall ((w Int) ) (! (= (Inv0_TBitvector (TBitvector w)) w)
 :pattern ( (TBitvector w))
)))
(assert (forall ((_module.Dt$A@@8 T@U) ) (! (= (Tclass._module.Dt_0 (Tclass._module.Dt _module.Dt$A@@8)) _module.Dt$A@@8)
 :pattern ( (Tclass._module.Dt _module.Dt$A@@8))
)))
(assert (forall ((_module.Co$A@@2 T@U) ) (! (= (Tclass._module.Co_0 (Tclass._module.Co _module.Co$A@@2)) _module.Co$A@@2)
 :pattern ( (Tclass._module.Co _module.Co$A@@2))
)))
(assert (forall ((|a#4#0#0| Real) ) (! (= (DatatypeCtorId (|#_module.Dt.Bucket| |a#4#0#0|)) |##_module.Dt.Bucket|)
 :pattern ( (|#_module.Dt.Bucket| |a#4#0#0|))
)))
(assert (forall ((|a#8#0#0| Real) ) (! (= (_module.Dt.diameter (|#_module.Dt.Bucket| |a#8#0#0|)) |a#8#0#0|)
 :pattern ( (|#_module.Dt.Bucket| |a#8#0#0|))
)))
(assert (forall ((x@@6 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@6)) x@@6)
 :pattern ( ($Box T@@4 x@@6))
)))
(assert (forall ((_module.Dt$A@@9 T@U) (|a#6#0#0@@0| Real) ) (! (= ($Is DatatypeTypeType (|#_module.Dt.Bucket| |a#6#0#0@@0|) (Tclass._module.Dt _module.Dt$A@@9)) ($Is realType (real_2_U |a#6#0#0@@0|) TReal))
 :pattern ( ($Is DatatypeTypeType (|#_module.Dt.Bucket| |a#6#0#0@@0|) (Tclass._module.Dt _module.Dt$A@@9)))
)))
(assert (forall ((|a#15#0#0| Bool) (|a#15#1#0| T@U) ) (! (< (BoxRank |a#15#1#0|) (DtRank (|#_module.Dt.Business| |a#15#0#0| |a#15#1#0|)))
 :pattern ( (|#_module.Dt.Business| |a#15#0#0| |a#15#1#0|))
)))
(assert (forall ((_module.Dt$A@@10 T@U) (d@@7 T@U) ) (!  (=> ($Is DatatypeTypeType d@@7 (Tclass._module.Dt _module.Dt$A@@10)) (or (or (_module.Dt.Blue_q d@@7) (_module.Dt.Bucket_q d@@7)) (_module.Dt.Business_q d@@7)))
 :pattern ( (_module.Dt.Business_q d@@7) ($Is DatatypeTypeType d@@7 (Tclass._module.Dt _module.Dt$A@@10)))
 :pattern ( (_module.Dt.Bucket_q d@@7) ($Is DatatypeTypeType d@@7 (Tclass._module.Dt _module.Dt$A@@10)))
 :pattern ( (_module.Dt.Blue_q d@@7) ($Is DatatypeTypeType d@@7 (Tclass._module.Dt _module.Dt$A@@10)))
)))
(assert (forall ((d@@8 T@U) (_module.Dt$A@@11 T@U) ($h@@6 T@U) ) (!  (=> (and ($IsGoodHeap $h@@6) (and (_module.Dt.Business_q d@@8) ($IsAlloc DatatypeTypeType d@@8 (Tclass._module.Dt _module.Dt$A@@11) $h@@6))) ($IsAllocBox (_module.Dt.a d@@8) _module.Dt$A@@11 $h@@6))
 :pattern ( ($IsAllocBox (_module.Dt.a d@@8) _module.Dt$A@@11 $h@@6))
)))
(assert  (and (forall ((t0@@0 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 t2 (MapType1Store t0@@0 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((x@@7 Int) (y Int) ) (! (= (Mod x@@7 y) (mod x@@7 y))
 :pattern ( (Mod x@@7 y))
)))
(assert (forall ((x@@8 Int) (y@@0 Int) ) (! (= (Mul x@@8 y@@0) (* x@@8 y@@0))
 :pattern ( (Mul x@@8 y@@0))
)))
(assert (forall ((d@@9 T@U) ) (! (= (BoxRank ($Box DatatypeTypeType d@@9)) (DtRank d@@9))
 :pattern ( (BoxRank ($Box DatatypeTypeType d@@9)))
)))
(assert (forall ((bx@@5 T@U) ) (!  (=> ($IsBox bx@@5 (TBitvector 0)) (and (= ($Box intType ($Unbox intType bx@@5)) bx@@5) ($Is intType ($Unbox intType bx@@5) (TBitvector 0))))
 :pattern ( ($IsBox bx@@5 (TBitvector 0)))
)))
(assert (forall ((_module.Dt$A@@12 T@U) (bx@@6 T@U) ) (!  (=> ($IsBox bx@@6 (Tclass._module.Dt _module.Dt$A@@12)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@6)) bx@@6) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@6) (Tclass._module.Dt _module.Dt$A@@12))))
 :pattern ( ($IsBox bx@@6 (Tclass._module.Dt _module.Dt$A@@12)))
)))
(assert (forall ((_module.Co$A@@3 T@U) (bx@@7 T@U) ) (!  (=> ($IsBox bx@@7 (Tclass._module.Co _module.Co$A@@3)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@7)) bx@@7) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@7) (Tclass._module.Co _module.Co$A@@3))))
 :pattern ( ($IsBox bx@@7 (Tclass._module.Co _module.Co$A@@3)))
)))
(assert (forall ((bx@@8 T@U) ) (!  (=> ($IsBox bx@@8 (TBitvector 11)) (and (= ($Box bv11Type ($Unbox bv11Type bx@@8)) bx@@8) ($Is bv11Type ($Unbox bv11Type bx@@8) (TBitvector 11))))
 :pattern ( ($IsBox bx@@8 (TBitvector 11)))
)))
(assert (= (Tag Tclass._module.Primes) Tagclass._module.Primes))
(assert (= (TagFamily Tclass._module.Primes) tytagFamily$Primes))
(assert (= (Tag Tclass._module.Small) Tagclass._module.Small))
(assert (= (TagFamily Tclass._module.Small) tytagFamily$Small))
(assert (= |#_module.Dt.Blue| (Lit DatatypeTypeType |#_module.Dt.Blue|)))
(assert (forall ((_module.Dt$A@@13 T@U) (|a#11#0#0@@0| Bool) (|a#11#1#0@@0| T@U) ($h@@7 T@U) ) (!  (=> ($IsGoodHeap $h@@7) (= ($IsAlloc DatatypeTypeType (|#_module.Dt.Business| |a#11#0#0@@0| |a#11#1#0@@0|) (Tclass._module.Dt _module.Dt$A@@13) $h@@7)  (and ($IsAlloc boolType (bool_2_U |a#11#0#0@@0|) TBool $h@@7) ($IsAllocBox |a#11#1#0@@0| _module.Dt$A@@13 $h@@7))))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_module.Dt.Business| |a#11#0#0@@0| |a#11#1#0@@0|) (Tclass._module.Dt _module.Dt$A@@13) $h@@7))
)))
(assert (forall ((|x#0@@4| T@U) ) (! (= ($Is intType |x#0@@4| Tclass._module.Small)  (and (<= (LitInt 0) (U_2_int |x#0@@4|)) (< (U_2_int |x#0@@4|) 25)))
 :pattern ( ($Is intType |x#0@@4| Tclass._module.Small))
)))
(assert (forall ((|a#12#0#0| T@U) (|a#12#1#0| T@U) ) (! (= (|#_module.Dt.Business| (U_2_bool (Lit boolType |a#12#0#0|)) (Lit BoxType |a#12#1#0|)) (Lit DatatypeTypeType (|#_module.Dt.Business| (U_2_bool |a#12#0#0|) |a#12#1#0|)))
 :pattern ( (|#_module.Dt.Business| (U_2_bool (Lit boolType |a#12#0#0|)) (Lit BoxType |a#12#1#0|)))
)))
(assert (forall ((x@@9 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@9))) (Lit BoxType ($Box intType (int_2_U x@@9))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@9))))
)))
(assert (forall ((x@@10 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@10)) (Lit BoxType ($Box T@@5 x@@10)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@10)))
)))
(assert (forall ((h@@4 T@U) (v@@6 T@U) ) (! ($IsAlloc intType v@@6 TInt h@@4)
 :pattern ( ($IsAlloc intType v@@6 TInt h@@4))
)))
(assert (forall ((h@@5 T@U) (v@@7 T@U) ) (! ($IsAlloc realType v@@7 TReal h@@5)
 :pattern ( ($IsAlloc realType v@@7 TReal h@@5))
)))
(assert (forall ((h@@6 T@U) (v@@8 T@U) ) (! ($IsAlloc boolType v@@8 TBool h@@6)
 :pattern ( ($IsAlloc boolType v@@8 TBool h@@6))
)))
(assert (forall ((v@@9 T@U) ) (! ($Is intType v@@9 TInt)
 :pattern ( ($Is intType v@@9 TInt))
)))
(assert (forall ((v@@10 T@U) ) (! ($Is realType v@@10 TReal)
 :pattern ( ($Is realType v@@10 TReal))
)))
(assert (forall ((v@@11 T@U) ) (! ($Is boolType v@@11 TBool)
 :pattern ( ($Is boolType v@@11 TBool))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $Heap () T@U)
(declare-fun |d#0@0| () T@U)
(declare-fun |##x#0@0| () Int)
(declare-fun |v#0@0| () Int)
(declare-fun |##x#1@0| () Int)
(declare-fun |u#0@0| () Int)
(declare-fun |##x#2@0| () Int)
(declare-fun |_module.Dt.F#canCall| (T@U T@U Int) Bool)
(declare-fun |x##0@0| () Int)
(declare-fun |call5formal@d#0| () T@U)
(declare-fun call0formal@_module.Dt$A () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |call5formal@d#0@0| () T@U)
(declare-fun |x##1@0| () Int)
(declare-fun $Heap@1 () T@U)
(declare-fun |x##2@0| () Int)
(declare-fun $Heap@2 () T@U)
(declare-fun |c#0@0| () T@U)
(declare-fun |##x#3@0| () Int)
(declare-fun |_module.Co.F#canCall| (T@U T@U Int) Bool)
(declare-fun |##x#4@0| () Int)
(declare-fun |_module.Co.G#canCall| (T@U Int) Bool)
(declare-fun |##x#5@0| () Int)
(declare-fun |c'#0@0| () T@U)
(declare-fun |x##3@0| () Int)
(declare-fun |call5formal@d#0@@0| () T@U)
(declare-fun $Heap@3 () T@U)
(declare-fun |call5formal@d#0@0@@0| () T@U)
(declare-fun |x##4@0| () Int)
(declare-fun $Heap@4 () T@U)
(declare-fun |x##5@0| () Int)
(declare-fun $Heap@5 () T@U)
(declare-fun |newtype$check#0@0| () Int)
(declare-fun |pr#0@0| () Int)
(declare-fun |##x#6@0| () Int)
(declare-fun |_module.Primes.F#canCall| (Int Int) Bool)
(declare-fun |##x#7@0| () Int)
(declare-fun |_module.Primes.G#canCall| (Int) Bool)
(declare-fun |##x#8@0| () Int)
(declare-fun |x##6@0| () Int)
(declare-fun |call4formal@d#0| () Int)
(declare-fun $Heap@6 () T@U)
(declare-fun |call4formal@d#0@0| () Int)
(declare-fun |x##7@0| () Int)
(declare-fun $Heap@7 () T@U)
(declare-fun |x##8@0| () Int)
(declare-fun $Heap@8 () T@U)
(declare-fun |newtype$check#1@0| () Int)
(declare-fun |d#0| () T@U)
(declare-fun |dd#0| () T@U)
(declare-fun |c#0| () T@U)
(declare-fun |c'#0| () T@U)
(declare-fun |pr#0| () Int)
(declare-fun |sm#0| () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 4) (let ((anon0_correct  (=> (and (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (= |d#0@0| (Lit DatatypeTypeType (|#_module.Dt.Business| (U_2_bool (Lit boolType (bool_2_U true))) ($Box intType (int_2_U (LitInt 5))))))) (=> (and (and (= |##x#0@0| (LitInt 5)) ($IsAlloc intType (int_2_U |##x#0@0|) TInt $Heap)) (and (|_module.Dt.G#canCall| TInt (LitInt 5)) (|_module.Dt.G#canCall| TInt (LitInt 5)))) (=> (and (and (and (and (= |v#0@0| (LitInt (_module.Dt.G TInt (LitInt 5)))) (= |##x#1@0| (LitInt 7))) (and ($IsAlloc intType (int_2_U |##x#1@0|) TInt $Heap) (|_module.Dt.G#canCall| TInt (LitInt 7)))) (and (and (|_module.Dt.G#canCall| TInt (LitInt 7)) (= |u#0@0| (LitInt (_module.Dt.G TInt (LitInt 7))))) (and ($IsAllocBox ($Box DatatypeTypeType |d#0@0|) (Tclass._module.Dt TInt) $Heap) (= |##x#2@0| (LitInt 10))))) (and (and (and ($IsAlloc intType (int_2_U |##x#2@0|) TInt $Heap) (|_module.Dt.F#canCall| TInt |d#0@0| (LitInt 10))) (and (|_module.Dt.F#canCall| TInt |d#0@0| (LitInt 10)) (= |x##0@0| (LitInt 93)))) (and (and ($Is DatatypeTypeType |call5formal@d#0| (Tclass._module.Dt call0formal@_module.Dt$A)) ($IsAlloc DatatypeTypeType |call5formal@d#0| (Tclass._module.Dt call0formal@_module.Dt$A) $Heap)) (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0))))) (=> (and (and (and (and (and (and ($Is DatatypeTypeType |call5formal@d#0@0| (Tclass._module.Dt TInt)) ($IsAlloc DatatypeTypeType |call5formal@d#0@0| (Tclass._module.Dt TInt) $Heap@0)) (forall (($o@@0 T@U) ) (!  (=> (and (or (not (= $o@@0 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@0) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@0) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@0)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@0))
))) (and ($HeapSucc $Heap $Heap@0) (= |x##1@0| (LitInt 54)))) (and (and (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1)) (forall (($o@@1 T@U) ) (!  (=> (and (or (not (= $o@@1 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@1) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@1) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@1)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@1))
))) (and (and ($HeapSucc $Heap@0 $Heap@1) (= |x##2@0| (LitInt 55))) (and ($IsGoodHeap $Heap@2) ($IsHeapAnchor $Heap@2))))) (and (and (and (and (forall (($o@@2 T@U) ) (!  (=> (and (or (not (= $o@@2 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@2) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@2) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@2)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@2))
)) ($HeapSucc $Heap@1 $Heap@2)) (and (= |c#0@0| (Lit DatatypeTypeType |#_module.Co.Cobalt|)) ($IsAllocBox ($Box DatatypeTypeType |c#0@0|) (Tclass._module.Co TReal) $Heap@2))) (and (and (= |##x#3@0| (LitInt 2)) ($IsAlloc intType (int_2_U |##x#3@0|) TInt $Heap@2)) (and (|_module.Co.F#canCall| TReal |c#0@0| (LitInt 2)) (|_module.Co.F#canCall| TReal |c#0@0| (LitInt 2))))) (and (and (and (= |##x#4@0| (LitInt 70)) ($IsAlloc intType (int_2_U |##x#4@0|) TInt $Heap@2)) (and (|_module.Co.G#canCall| (TBitvector 11) (LitInt 70)) (|_module.Co.G#canCall| (TBitvector 11) (LitInt 70)))) (and (and (= |##x#5@0| (LitInt 71)) ($IsAlloc intType (int_2_U |##x#5@0|) TInt $Heap@2)) (and (|_module.Co.G#canCall| TReal (LitInt 71)) (|_module.Co.G#canCall| TReal (LitInt 71))))))) (and (and (and (and (and ($Is DatatypeTypeType |c'#0@0| (Tclass._module.Co TInt)) ($IsAlloc DatatypeTypeType |c'#0@0| (Tclass._module.Co TInt) $Heap@2)) (= |x##3@0| (LitInt 93))) (and (and ($Is DatatypeTypeType |call5formal@d#0@@0| (Tclass._module.Co TInt)) ($IsAlloc DatatypeTypeType |call5formal@d#0@@0| (Tclass._module.Co TInt) $Heap)) (and ($IsGoodHeap $Heap@3) ($IsHeapAnchor $Heap@3)))) (and (and (and ($Is DatatypeTypeType |call5formal@d#0@0@@0| (Tclass._module.Co TInt)) ($IsAlloc DatatypeTypeType |call5formal@d#0@0@@0| (Tclass._module.Co TInt) $Heap@3)) (forall (($o@@3 T@U) ) (!  (=> (and (or (not (= $o@@3 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@3) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@3) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@3)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@3))
))) (and ($HeapSucc $Heap@2 $Heap@3) (= |x##4@0| (LitInt 54))))) (and (and (and (and ($IsGoodHeap $Heap@4) ($IsHeapAnchor $Heap@4)) (forall (($o@@4 T@U) ) (!  (=> (and (or (not (= $o@@4 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@4) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 $o@@4) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@4)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 $o@@4))
))) (and ($HeapSucc $Heap@3 $Heap@4) (= |x##5@0| (LitInt 55)))) (and (and (and ($IsGoodHeap $Heap@5) ($IsHeapAnchor $Heap@5)) (forall (($o@@5 T@U) ) (!  (=> (and (or (not (= $o@@5 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 $o@@5) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 $o@@5) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 $o@@5)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 $o@@5))
))) (and ($HeapSucc $Heap@4 $Heap@5) (= |newtype$check#0@0| (LitInt 11))))))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (and (<= (LitInt 2) |newtype$check#0@0|) (forall ((|y#1| Int) )  (=> (and (<= (LitInt 2) |y#1|) (< |y#1| |newtype$check#0@0|)) (or (not (= (Mod |newtype$check#0@0| |y#1|) 0)) (not true)))))) (=> (and (<= (LitInt 2) |newtype$check#0@0|) (forall ((|y#1@@0| Int) )  (=> (and (<= (LitInt 2) |y#1@@0|) (< |y#1@@0| |newtype$check#0@0|)) (or (not (= (Mod |newtype$check#0@0| |y#1@@0|) 0)) (not true))))) (=> (= |pr#0@0| (LitInt 11)) (=> (and ($IsAllocBox ($Box intType (int_2_U |pr#0@0|)) Tclass._module.Primes $Heap@5) (= |##x#6@0| (LitInt 2))) (=> (and (and (and (and ($IsAlloc intType (int_2_U |##x#6@0|) TInt $Heap@5) (|_module.Primes.F#canCall| |pr#0@0| (LitInt 2))) (and (|_module.Primes.F#canCall| |pr#0@0| (LitInt 2)) (= |##x#7@0| (LitInt 70)))) (and (and ($IsAlloc intType (int_2_U |##x#7@0|) TInt $Heap@5) (|_module.Primes.G#canCall| (LitInt 70))) (and (|_module.Primes.G#canCall| (LitInt 70)) (= |##x#8@0| (LitInt 71))))) (and (and (and ($IsAlloc intType (int_2_U |##x#8@0|) TInt $Heap@5) (|_module.Primes.G#canCall| (LitInt 71))) (and (|_module.Primes.G#canCall| (LitInt 71)) (= |x##6@0| (LitInt 95)))) (and (and (<= (LitInt 2) |call4formal@d#0|) (forall ((|y#4| Int) )  (=> (and (<= (LitInt 2) |y#4|) (< |y#4| |call4formal@d#0|)) (or (not (= (Mod |call4formal@d#0| |y#4|) 0)) (not true))))) (and ($IsGoodHeap $Heap@6) ($IsHeapAnchor $Heap@6))))) (=> (and (and (and (and (and (<= (LitInt 2) |call4formal@d#0@0|) (forall ((|y#4@@0| Int) )  (=> (and (<= (LitInt 2) |y#4@@0|) (< |y#4@@0| |call4formal@d#0@0|)) (or (not (= (Mod |call4formal@d#0@0| |y#4@@0|) 0)) (not true))))) (forall (($o@@6 T@U) ) (!  (=> (and (or (not (= $o@@6 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 $o@@6) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 $o@@6) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 $o@@6)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 $o@@6))
))) (and ($HeapSucc $Heap@5 $Heap@6) (= |x##7@0| (LitInt 54)))) (and (and ($IsGoodHeap $Heap@7) ($IsHeapAnchor $Heap@7)) (forall (($o@@7 T@U) ) (!  (=> (and (or (not (= $o@@7 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 $o@@7) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@7 $o@@7) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 $o@@7)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@7 $o@@7))
)))) (and (and (and ($HeapSucc $Heap@6 $Heap@7) (= |x##8@0| (LitInt 55))) (and ($IsGoodHeap $Heap@8) ($IsHeapAnchor $Heap@8))) (and (and (forall (($o@@8 T@U) ) (!  (=> (and (or (not (= $o@@8 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@7 $o@@8) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@8 $o@@8) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@7 $o@@8)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@8 $o@@8))
)) ($HeapSucc $Heap@7 $Heap@8)) (and (= |newtype$check#1@0| (LitInt 11)) (= (ControlFlow 0 2) (- 0 1)))))) (and (<= (LitInt 0) |newtype$check#1@0|) (< |newtype$check#1@0| 25))))))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (=> (and (and ($Is DatatypeTypeType |d#0| (Tclass._module.Dt TInt)) ($IsAlloc DatatypeTypeType |d#0| (Tclass._module.Dt TInt) $Heap)) true) (=> (and (and (and ($Is DatatypeTypeType |dd#0| (Tclass._module.Dt TInt)) ($IsAlloc DatatypeTypeType |dd#0| (Tclass._module.Dt TInt) $Heap)) true) (and (and ($Is DatatypeTypeType |c#0| (Tclass._module.Co TReal)) ($IsAlloc DatatypeTypeType |c#0| (Tclass._module.Co TReal) $Heap)) true)) (=> (and (and (and (and ($Is DatatypeTypeType |c'#0| (Tclass._module.Co TInt)) ($IsAlloc DatatypeTypeType |c'#0| (Tclass._module.Co TInt) $Heap)) true) (and (and (<= (LitInt 2) |pr#0|) (forall ((|y#0| Int) )  (=> (and (<= (LitInt 2) |y#0|) (< |y#0| |pr#0|)) (or (not (= (Mod |pr#0| |y#0|) 0)) (not true))))) true)) (and (and (and (<= (LitInt 0) |sm#0|) (< |sm#0| 25)) true) (and (= 2 $FunctionContextHeight) (= (ControlFlow 0 4) 2)))) anon0_correct))))))
PreconditionGeneratedEntry_correct)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
