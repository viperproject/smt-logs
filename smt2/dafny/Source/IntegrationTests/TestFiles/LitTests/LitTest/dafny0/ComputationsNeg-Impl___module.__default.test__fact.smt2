(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (Bool) T@U)
(declare-fun $generated@@7 (T@U) Bool)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun $generated@@9 (T@U) Int)
(declare-fun $generated@@10 (Real) T@U)
(declare-fun $generated@@11 (T@U) Real)
(declare-fun $generated@@18 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@19 () T@U)
(declare-fun $generated@@22 () Int)
(declare-fun $generated@@23 (T@U Int) Int)
(declare-fun $generated@@24 (Int) Bool)
(declare-fun $generated@@25 (Int) Int)
(declare-fun $generated@@29 (T@T T@U) T@U)
(declare-fun $generated@@32 (T@T T@U) T@U)
(declare-fun $generated@@33 (T@T T@U) T@U)
(declare-fun $generated@@36 (T@T T@U T@U) Bool)
(declare-fun $generated@@38 (T@U) T@U)
(declare-fun $generated@@39 (Int Int) Int)
(declare-fun $generated@@46 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 () T@T)
(declare-fun $generated@@49 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@50 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@51 () T@T)
(declare-fun $generated@@52 (T@T T@T) T@T)
(declare-fun $generated@@53 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@54 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@55 (T@T) T@T)
(declare-fun $generated@@56 (T@T) T@T)
(declare-fun $generated@@107 (T@U) T@U)
(declare-fun $generated@@108 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@4) 1)) (= ($generated@@2 $generated@@5) 2)) (forall (($generated@@12 Bool) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Int) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Real) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))))
(assert (distinct $generated $generated@@0 $generated@@1)
)
(assert (forall (($generated@@20 T@U) ($generated@@21 T@U) ) (! ($generated@@18 $generated@@4 $generated@@20 $generated@@19 $generated@@21)
 :pattern ( ($generated@@18 $generated@@4 $generated@@20 $generated@@19 $generated@@21))
)))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@26 T@U) ($generated@@27 Int) ) (!  (=> (or ($generated@@24 $generated@@27) (and (< 0 $generated@@22) (<= ($generated@@25 0) $generated@@27))) (<= ($generated@@25 0) ($generated@@23 $generated@@26 $generated@@27)))
 :pattern ( ($generated@@23 $generated@@26 $generated@@27))
))))
(assert (forall (($generated@@28 Int) ) (! (= ($generated@@25 $generated@@28) $generated@@28)
 :pattern ( ($generated@@25 $generated@@28))
)))
(assert (forall (($generated@@30 T@U) ($generated@@31 T@T) ) (! (= ($generated@@29 $generated@@31 $generated@@30) $generated@@30)
 :pattern ( ($generated@@29 $generated@@31 $generated@@30))
)))
(assert (forall (($generated@@34 T@U) ($generated@@35 T@T) ) (! (= ($generated@@33 $generated@@35 ($generated@@32 $generated@@35 $generated@@34)) $generated@@34)
 :pattern ( ($generated@@32 $generated@@35 $generated@@34))
)))
(assert (forall (($generated@@37 T@U) ) (! (= ($generated@@36 $generated@@4 $generated@@37 $generated@@19) (<= ($generated@@25 0) ($generated@@9 $generated@@37)))
 :pattern ( ($generated@@36 $generated@@4 $generated@@37 $generated@@19))
)))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@40 T@U) ($generated@@41 Int) ) (!  (=> (or ($generated@@24 $generated@@41) (and (< 0 $generated@@22) (<= ($generated@@25 0) $generated@@41))) (and (=> (or (not (= $generated@@41 ($generated@@25 0))) (not true)) ($generated@@24 (- $generated@@41 1))) (= ($generated@@23 ($generated@@38 $generated@@40) $generated@@41) (ite (= $generated@@41 ($generated@@25 0)) 1 ($generated@@39 $generated@@41 ($generated@@23 $generated@@40 (- $generated@@41 1)))))))
 :pattern ( ($generated@@23 ($generated@@38 $generated@@40) $generated@@41))
))))
(assert (forall (($generated@@42 T@U) ($generated@@43 T@T) ) (! (= ($generated@@32 $generated@@43 ($generated@@33 $generated@@43 $generated@@42)) $generated@@42)
 :pattern ( ($generated@@33 $generated@@43 $generated@@42))
)))
(assert (forall (($generated@@44 T@U) ($generated@@45 Int) ) (! (= ($generated@@23 ($generated@@38 $generated@@44) $generated@@45) ($generated@@23 $generated@@44 $generated@@45))
 :pattern ( ($generated@@23 ($generated@@38 $generated@@44) $generated@@45))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@57 T@T) ($generated@@58 T@T) ($generated@@59 T@T) ($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@U) ) (! (= ($generated@@46 $generated@@57 $generated@@58 $generated@@59 ($generated@@53 $generated@@57 $generated@@58 $generated@@59 $generated@@61 $generated@@62 $generated@@63 $generated@@60) $generated@@62 $generated@@63) $generated@@60)
 :weight 0
)) (and (forall (($generated@@64 T@T) ($generated@@65 T@T) ($generated@@66 T@T) ($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (!  (or (= $generated@@69 $generated@@71) (= ($generated@@46 $generated@@64 $generated@@65 $generated@@66 ($generated@@53 $generated@@64 $generated@@65 $generated@@66 $generated@@68 $generated@@69 $generated@@70 $generated@@67) $generated@@71 $generated@@72) ($generated@@46 $generated@@64 $generated@@65 $generated@@66 $generated@@68 $generated@@71 $generated@@72)))
 :weight 0
)) (forall (($generated@@73 T@T) ($generated@@74 T@T) ($generated@@75 T@T) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ) (!  (or (= $generated@@79 $generated@@81) (= ($generated@@46 $generated@@73 $generated@@74 $generated@@75 ($generated@@53 $generated@@73 $generated@@74 $generated@@75 $generated@@77 $generated@@78 $generated@@79 $generated@@76) $generated@@80 $generated@@81) ($generated@@46 $generated@@73 $generated@@74 $generated@@75 $generated@@77 $generated@@80 $generated@@81)))
 :weight 0
)))) (= ($generated@@2 $generated@@47) 3)) (= ($generated@@2 $generated@@48) 4)) (forall (($generated@@82 T@T) ($generated@@83 T@T) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (! (= ($generated@@50 $generated@@82 $generated@@83 ($generated@@54 $generated@@82 $generated@@83 $generated@@85 $generated@@86 $generated@@84) $generated@@86) $generated@@84)
 :weight 0
))) (forall (($generated@@87 T@T) ($generated@@88 T@T) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ) (!  (or (= $generated@@91 $generated@@92) (= ($generated@@50 $generated@@87 $generated@@88 ($generated@@54 $generated@@87 $generated@@88 $generated@@90 $generated@@91 $generated@@89) $generated@@92) ($generated@@50 $generated@@87 $generated@@88 $generated@@90 $generated@@92)))
 :weight 0
))) (= ($generated@@2 $generated@@51) 5)) (forall (($generated@@93 T@T) ($generated@@94 T@T) ) (= ($generated@@2 ($generated@@52 $generated@@93 $generated@@94)) 6))) (forall (($generated@@95 T@T) ($generated@@96 T@T) ) (! (= ($generated@@55 ($generated@@52 $generated@@95 $generated@@96)) $generated@@95)
 :pattern ( ($generated@@52 $generated@@95 $generated@@96))
))) (forall (($generated@@97 T@T) ($generated@@98 T@T) ) (! (= ($generated@@56 ($generated@@52 $generated@@97 $generated@@98)) $generated@@98)
 :pattern ( ($generated@@52 $generated@@97 $generated@@98))
))))
(assert (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 Bool) ($generated@@103 T@U) ($generated@@104 T@U) ) (! (= ($generated@@7 ($generated@@46 $generated@@47 $generated@@48 $generated@@3 ($generated@@49 $generated@@99 $generated@@100 $generated@@101 $generated@@102) $generated@@103 $generated@@104))  (=> (and (or (not (= $generated@@103 $generated@@99)) (not true)) ($generated@@7 ($generated@@32 $generated@@3 ($generated@@50 $generated@@48 $generated@@51 ($generated@@50 $generated@@47 ($generated@@52 $generated@@48 $generated@@51) $generated@@100 $generated@@103) $generated@@101)))) $generated@@102))
 :pattern ( ($generated@@46 $generated@@47 $generated@@48 $generated@@3 ($generated@@49 $generated@@99 $generated@@100 $generated@@101 $generated@@102) $generated@@103 $generated@@104))
)))
(assert (forall (($generated@@105 Int) ($generated@@106 Int) ) (! (= ($generated@@39 $generated@@105 $generated@@106) (* $generated@@105 $generated@@106))
 :pattern ( ($generated@@39 $generated@@105 $generated@@106))
)))
(assert (= ($generated@@107 $generated@@19) $generated@@0))
(assert (= ($generated@@108 $generated@@19) $generated@@1))
(assert (forall (($generated@@109 Int) ) (! (= ($generated@@33 $generated@@4 ($generated@@8 ($generated@@25 $generated@@109))) ($generated@@29 $generated@@51 ($generated@@33 $generated@@4 ($generated@@8 $generated@@109))))
 :pattern ( ($generated@@33 $generated@@4 ($generated@@8 ($generated@@25 $generated@@109))))
)))
(assert (forall (($generated@@110 T@U) ($generated@@111 T@T) ) (! (= ($generated@@33 $generated@@111 ($generated@@29 $generated@@111 $generated@@110)) ($generated@@29 $generated@@51 ($generated@@33 $generated@@111 $generated@@110)))
 :pattern ( ($generated@@33 $generated@@111 ($generated@@29 $generated@@111 $generated@@110)))
)))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@112 T@U) ($generated@@113 Int) ) (!  (=> (or ($generated@@24 ($generated@@25 $generated@@113)) (and (< 0 $generated@@22) (<= ($generated@@25 0) $generated@@113))) (and (=> (or (not (= ($generated@@25 $generated@@113) ($generated@@25 0))) (not true)) ($generated@@24 ($generated@@25 (- $generated@@113 1)))) (= ($generated@@23 ($generated@@38 $generated@@112) ($generated@@25 $generated@@113)) (ite (= ($generated@@25 $generated@@113) ($generated@@25 0)) 1 ($generated@@39 ($generated@@25 $generated@@113) ($generated@@25 ($generated@@23 ($generated@@38 $generated@@112) ($generated@@25 (- $generated@@113 1)))))))))
 :weight 3
 :pattern ( ($generated@@23 ($generated@@38 $generated@@112) ($generated@@25 $generated@@113)))
))))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@114 () T@U)
(declare-fun $generated@@115 () T@U)
(declare-fun $generated@@116 () T@U)
(declare-fun $generated@@117 () Int)
(declare-fun $generated@@118 () T@U)
(declare-fun $generated@@119 (T@U) Bool)
(declare-fun $generated@@120 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 5) (let (($generated@@121  (=> (= $generated@@114 ($generated@@49 $generated@@115 $generated@@116 $generated false)) (and (=> (= (ControlFlow 0 2) (- 0 4)) ($generated@@36 $generated@@4 ($generated@@8 ($generated@@25 0)) $generated@@19)) (=> ($generated@@36 $generated@@4 ($generated@@8 ($generated@@25 0)) $generated@@19) (=> (and (and (= $generated@@117 ($generated@@25 0)) ($generated@@18 $generated@@4 ($generated@@8 $generated@@117) $generated@@19 $generated@@116)) (and ($generated@@24 ($generated@@25 0)) ($generated@@24 ($generated@@25 0)))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (= ($generated@@25 ($generated@@23 ($generated@@38 ($generated@@38 $generated@@118)) ($generated@@25 0))) ($generated@@25 1))) (=> (and (= ($generated@@25 ($generated@@23 ($generated@@38 $generated@@118) ($generated@@25 0))) ($generated@@25 1)) (= (ControlFlow 0 2) (- 0 1))) ($generated@@7 ($generated@@29 $generated@@3 ($generated@@6  (or (not (= 42 42)) (not true)))))))))))))
(let (($generated@@122  (=> (and (and ($generated@@119 $generated@@116) ($generated@@120 $generated@@116)) (and (= 1 $generated@@22) (= (ControlFlow 0 5) 2))) $generated@@121)))
$generated@@122)))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
