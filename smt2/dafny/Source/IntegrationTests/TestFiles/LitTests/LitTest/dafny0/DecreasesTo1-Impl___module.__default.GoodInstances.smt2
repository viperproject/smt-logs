(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 (T@U) T@U)
(declare-fun $generated@@20 (T@U T@U) T@U)
(declare-fun $generated@@21 (T@U T@U) Bool)
(declare-fun $generated@@30 (T@U T@U) T@U)
(declare-fun $generated@@34 () T@U)
(declare-fun $generated@@39 (Int) Int)
(declare-fun $generated@@41 (T@T T@U) T@U)
(declare-fun $generated@@44 (T@U T@U) Bool)
(declare-fun $generated@@48 (T@T T@U) T@U)
(declare-fun $generated@@49 (T@T T@U) T@U)
(declare-fun $generated@@52 (T@T T@U T@U) Bool)
(declare-fun $generated@@53 () T@T)
(declare-fun $generated@@54 (T@U) T@U)
(declare-fun $generated@@55 (T@U T@U) Bool)
(declare-fun $generated@@59 (T@U T@U T@U) Bool)
(declare-fun $generated@@60 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@65 (T@U T@U) Bool)
(declare-fun $generated@@76 (T@U) T@U)
(declare-fun $generated@@81 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@82 () T@T)
(declare-fun $generated@@83 () T@T)
(declare-fun $generated@@84 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@85 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@86 () T@T)
(declare-fun $generated@@87 (T@T T@T) T@T)
(declare-fun $generated@@88 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@89 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@90 (T@T) T@T)
(declare-fun $generated@@91 (T@T) T@T)
(declare-fun $generated@@140 (Int Int) Int)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (= ($generated@@19 $generated) $generated@@0))
(assert (forall (($generated@@22 T@U) ($generated@@23 T@U) ) (! ($generated@@21 ($generated@@20 $generated@@22 $generated@@23) $generated@@23)
 :pattern ( ($generated@@20 $generated@@22 $generated@@23))
)))
(assert (forall (($generated@@24 T@U) ($generated@@25 T@U) ($generated@@26 T@U) ) (!  (=> ($generated@@21 $generated@@24 $generated@@26) ($generated@@21 ($generated@@20 $generated@@24 $generated@@25) $generated@@26))
 :pattern ( ($generated@@20 $generated@@24 $generated@@25) ($generated@@21 $generated@@24 $generated@@26))
)))
(assert (forall (($generated@@27 T@U) ($generated@@28 T@U) ($generated@@29 T@U) ) (! (= ($generated@@21 ($generated@@20 $generated@@27 $generated@@28) $generated@@29)  (or (= $generated@@29 $generated@@28) ($generated@@21 $generated@@27 $generated@@29)))
 :pattern ( ($generated@@21 ($generated@@20 $generated@@27 $generated@@28) $generated@@29))
)))
(assert (forall (($generated@@31 T@U) ($generated@@32 T@U) ($generated@@33 T@U) ) (!  (=> ($generated@@21 $generated@@32 $generated@@33) (not ($generated@@21 ($generated@@30 $generated@@31 $generated@@32) $generated@@33)))
 :pattern ( ($generated@@30 $generated@@31 $generated@@32) ($generated@@21 $generated@@32 $generated@@33))
)))
(assert (forall (($generated@@35 T@U) ) (!  (not ($generated@@21 $generated@@34 $generated@@35))
 :pattern ( ($generated@@21 $generated@@34 $generated@@35))
)))
(assert (forall (($generated@@36 T@U) ($generated@@37 T@U) ($generated@@38 T@U) ) (! (= ($generated@@21 ($generated@@30 $generated@@36 $generated@@37) $generated@@38)  (and ($generated@@21 $generated@@36 $generated@@38) (not ($generated@@21 $generated@@37 $generated@@38))))
 :pattern ( ($generated@@21 ($generated@@30 $generated@@36 $generated@@37) $generated@@38))
)))
(assert (forall (($generated@@40 Int) ) (! (= ($generated@@39 $generated@@40) $generated@@40)
 :pattern ( ($generated@@39 $generated@@40))
)))
(assert (forall (($generated@@42 T@U) ($generated@@43 T@T) ) (! (= ($generated@@41 $generated@@43 $generated@@42) $generated@@42)
 :pattern ( ($generated@@41 $generated@@43 $generated@@42))
)))
(assert (forall (($generated@@45 T@U) ($generated@@46 T@U) ) (! (= ($generated@@44 $generated@@45 $generated@@46) (forall (($generated@@47 T@U) ) (!  (=> ($generated@@21 $generated@@45 $generated@@47) ($generated@@21 $generated@@46 $generated@@47))
 :pattern ( ($generated@@21 $generated@@45 $generated@@47))
 :pattern ( ($generated@@21 $generated@@46 $generated@@47))
)))
 :pattern ( ($generated@@44 $generated@@45 $generated@@46))
)))
(assert (forall (($generated@@50 T@U) ($generated@@51 T@T) ) (! (= ($generated@@49 $generated@@51 ($generated@@48 $generated@@51 $generated@@50)) $generated@@50)
 :pattern ( ($generated@@48 $generated@@51 $generated@@50))
)))
(assert (= ($generated@@3 $generated@@53) 3))
(assert (forall (($generated@@56 T@U) ($generated@@57 T@U) ) (! (= ($generated@@52 $generated@@53 $generated@@56 ($generated@@54 $generated@@57)) (forall (($generated@@58 T@U) ) (!  (=> ($generated@@21 $generated@@56 $generated@@58) ($generated@@55 $generated@@58 $generated@@57))
 :pattern ( ($generated@@21 $generated@@56 $generated@@58))
)))
 :pattern ( ($generated@@52 $generated@@53 $generated@@56 ($generated@@54 $generated@@57)))
)))
(assert (forall (($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@U) ($generated@@64 T@T) ) (! (= ($generated@@59 ($generated@@49 $generated@@64 $generated@@61) $generated@@62 $generated@@63) ($generated@@60 $generated@@64 $generated@@61 $generated@@62 $generated@@63))
 :pattern ( ($generated@@59 ($generated@@49 $generated@@64 $generated@@61) $generated@@62 $generated@@63))
)))
(assert (forall (($generated@@66 T@U) ($generated@@67 T@U) ) (!  (=> ($generated@@65 $generated@@66 $generated@@67) (= $generated@@66 $generated@@67))
 :pattern ( ($generated@@65 $generated@@66 $generated@@67))
)))
(assert (forall (($generated@@68 T@U) ) (!  (=> ($generated@@55 $generated@@68 $generated) (and (= ($generated@@49 $generated@@5 ($generated@@48 $generated@@5 $generated@@68)) $generated@@68) ($generated@@52 $generated@@5 ($generated@@48 $generated@@5 $generated@@68) $generated)))
 :pattern ( ($generated@@55 $generated@@68 $generated))
)))
(assert (forall (($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@T) ) (! (= ($generated@@55 ($generated@@49 $generated@@71 $generated@@69) $generated@@70) ($generated@@52 $generated@@71 $generated@@69 $generated@@70))
 :pattern ( ($generated@@55 ($generated@@49 $generated@@71 $generated@@69) $generated@@70))
)))
(assert (forall (($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@U) ) (! (= ($generated@@60 $generated@@53 $generated@@72 ($generated@@54 $generated@@73) $generated@@74) (forall (($generated@@75 T@U) ) (!  (=> ($generated@@21 $generated@@72 $generated@@75) ($generated@@59 $generated@@75 $generated@@73 $generated@@74))
 :pattern ( ($generated@@21 $generated@@72 $generated@@75))
)))
 :pattern ( ($generated@@60 $generated@@53 $generated@@72 ($generated@@54 $generated@@73) $generated@@74))
)))
(assert (forall (($generated@@77 T@U) ) (! (= ($generated@@76 ($generated@@54 $generated@@77)) $generated@@77)
 :pattern ( ($generated@@54 $generated@@77))
)))
(assert (forall (($generated@@78 T@U) ) (! (= ($generated@@19 ($generated@@54 $generated@@78)) $generated@@1)
 :pattern ( ($generated@@54 $generated@@78))
)))
(assert (forall (($generated@@79 T@U) ($generated@@80 T@T) ) (! (= ($generated@@48 $generated@@80 ($generated@@49 $generated@@80 $generated@@79)) $generated@@79)
 :pattern ( ($generated@@49 $generated@@80 $generated@@79))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@92 T@T) ($generated@@93 T@T) ($generated@@94 T@T) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ) (! (= ($generated@@81 $generated@@92 $generated@@93 $generated@@94 ($generated@@88 $generated@@92 $generated@@93 $generated@@94 $generated@@96 $generated@@97 $generated@@98 $generated@@95) $generated@@97 $generated@@98) $generated@@95)
 :weight 0
)) (and (forall (($generated@@99 T@T) ($generated@@100 T@T) ($generated@@101 T@T) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ) (!  (or (= $generated@@104 $generated@@106) (= ($generated@@81 $generated@@99 $generated@@100 $generated@@101 ($generated@@88 $generated@@99 $generated@@100 $generated@@101 $generated@@103 $generated@@104 $generated@@105 $generated@@102) $generated@@106 $generated@@107) ($generated@@81 $generated@@99 $generated@@100 $generated@@101 $generated@@103 $generated@@106 $generated@@107)))
 :weight 0
)) (forall (($generated@@108 T@T) ($generated@@109 T@T) ($generated@@110 T@T) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ) (!  (or (= $generated@@114 $generated@@116) (= ($generated@@81 $generated@@108 $generated@@109 $generated@@110 ($generated@@88 $generated@@108 $generated@@109 $generated@@110 $generated@@112 $generated@@113 $generated@@114 $generated@@111) $generated@@115 $generated@@116) ($generated@@81 $generated@@108 $generated@@109 $generated@@110 $generated@@112 $generated@@115 $generated@@116)))
 :weight 0
)))) (= ($generated@@3 $generated@@82) 4)) (= ($generated@@3 $generated@@83) 5)) (forall (($generated@@117 T@T) ($generated@@118 T@T) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ) (! (= ($generated@@85 $generated@@117 $generated@@118 ($generated@@89 $generated@@117 $generated@@118 $generated@@120 $generated@@121 $generated@@119) $generated@@121) $generated@@119)
 :weight 0
))) (forall (($generated@@122 T@T) ($generated@@123 T@T) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 T@U) ) (!  (or (= $generated@@126 $generated@@127) (= ($generated@@85 $generated@@122 $generated@@123 ($generated@@89 $generated@@122 $generated@@123 $generated@@125 $generated@@126 $generated@@124) $generated@@127) ($generated@@85 $generated@@122 $generated@@123 $generated@@125 $generated@@127)))
 :weight 0
))) (= ($generated@@3 $generated@@86) 6)) (forall (($generated@@128 T@T) ($generated@@129 T@T) ) (= ($generated@@3 ($generated@@87 $generated@@128 $generated@@129)) 7))) (forall (($generated@@130 T@T) ($generated@@131 T@T) ) (! (= ($generated@@90 ($generated@@87 $generated@@130 $generated@@131)) $generated@@130)
 :pattern ( ($generated@@87 $generated@@130 $generated@@131))
))) (forall (($generated@@132 T@T) ($generated@@133 T@T) ) (! (= ($generated@@91 ($generated@@87 $generated@@132 $generated@@133)) $generated@@133)
 :pattern ( ($generated@@87 $generated@@132 $generated@@133))
))))
(assert (forall (($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 Bool) ($generated@@138 T@U) ($generated@@139 T@U) ) (! (= ($generated@@8 ($generated@@81 $generated@@82 $generated@@83 $generated@@4 ($generated@@84 $generated@@134 $generated@@135 $generated@@136 $generated@@137) $generated@@138 $generated@@139))  (=> (and (or (not (= $generated@@138 $generated@@134)) (not true)) ($generated@@8 ($generated@@48 $generated@@4 ($generated@@85 $generated@@83 $generated@@86 ($generated@@85 $generated@@82 ($generated@@87 $generated@@83 $generated@@86) $generated@@135 $generated@@138) $generated@@136)))) $generated@@137))
 :pattern ( ($generated@@81 $generated@@82 $generated@@83 $generated@@4 ($generated@@84 $generated@@134 $generated@@135 $generated@@136 $generated@@137) $generated@@138 $generated@@139))
)))
(assert (forall (($generated@@141 Int) ($generated@@142 Int) ) (! (= ($generated@@140 $generated@@141 $generated@@142) (* $generated@@141 $generated@@142))
 :pattern ( ($generated@@140 $generated@@141 $generated@@142))
)))
(assert (forall (($generated@@143 T@U) ($generated@@144 T@U) ) (!  (=> ($generated@@55 $generated@@143 ($generated@@54 $generated@@144)) (and (= ($generated@@49 $generated@@53 ($generated@@48 $generated@@53 $generated@@143)) $generated@@143) ($generated@@52 $generated@@53 ($generated@@48 $generated@@53 $generated@@143) ($generated@@54 $generated@@144))))
 :pattern ( ($generated@@55 $generated@@143 ($generated@@54 $generated@@144)))
)))
(assert (forall (($generated@@145 T@U) ($generated@@146 T@U) ) (! (= ($generated@@65 $generated@@145 $generated@@146) (forall (($generated@@147 T@U) ) (! (= ($generated@@21 $generated@@145 $generated@@147) ($generated@@21 $generated@@146 $generated@@147))
 :pattern ( ($generated@@21 $generated@@145 $generated@@147))
 :pattern ( ($generated@@21 $generated@@146 $generated@@147))
)))
 :pattern ( ($generated@@65 $generated@@145 $generated@@146))
)))
(assert (forall (($generated@@148 Int) ) (! (= ($generated@@49 $generated@@5 ($generated@@9 ($generated@@39 $generated@@148))) ($generated@@41 $generated@@86 ($generated@@49 $generated@@5 ($generated@@9 $generated@@148))))
 :pattern ( ($generated@@49 $generated@@5 ($generated@@9 ($generated@@39 $generated@@148))))
)))
(assert (forall (($generated@@149 T@U) ($generated@@150 T@T) ) (! (= ($generated@@49 $generated@@150 ($generated@@41 $generated@@150 $generated@@149)) ($generated@@41 $generated@@86 ($generated@@49 $generated@@150 $generated@@149)))
 :pattern ( ($generated@@49 $generated@@150 ($generated@@41 $generated@@150 $generated@@149)))
)))
(assert (forall (($generated@@151 T@U) ($generated@@152 T@U) ) (! ($generated@@60 $generated@@5 $generated@@152 $generated $generated@@151)
 :pattern ( ($generated@@60 $generated@@5 $generated@@152 $generated $generated@@151))
)))
(assert (forall (($generated@@153 T@U) ) (! ($generated@@52 $generated@@5 $generated@@153 $generated)
 :pattern ( ($generated@@52 $generated@@5 $generated@@153 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@154 () T@U)
(declare-fun $generated@@155 () T@U)
(declare-fun $generated@@156 () T@U)
(declare-fun $generated@@157 () Int)
(declare-fun $generated@@158 () Int)
(declare-fun $generated@@159 () T@U)
(declare-fun $generated@@160 () T@U)
(declare-fun $generated@@161 (T@U) Bool)
(declare-fun $generated@@162 (T@U) Bool)
(declare-fun $generated@@163 () T@U)
(declare-fun $generated@@164 () T@U)
(declare-fun $generated@@165 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 8) (let (($generated@@166  (=> (= $generated@@154 ($generated@@84 $generated@@155 $generated@@156 $generated@@2 false)) (and (=> (= (ControlFlow 0 2) (- 0 7)) (and (not ($generated@@8 ($generated@@41 $generated@@4 ($generated@@7 false)))) ($generated@@8 ($generated@@41 $generated@@4 ($generated@@7 true))))) (=> (and (not ($generated@@8 ($generated@@41 $generated@@4 ($generated@@7 false)))) ($generated@@8 ($generated@@41 $generated@@4 ($generated@@7 true)))) (and (=> (= (ControlFlow 0 2) (- 0 6)) (< ($generated@@39 0) ($generated@@39 1))) (=> (< ($generated@@39 0) ($generated@@39 1)) (and (=> (= (ControlFlow 0 2) (- 0 5)) (< (- $generated@@157 1) $generated@@157)) (=> (< (- $generated@@157 1) $generated@@157) (and (=> (= (ControlFlow 0 2) (- 0 4)) (or (< $generated@@157 $generated@@157) (and (= $generated@@157 $generated@@157) (< (- $generated@@158 1) $generated@@158)))) (=> (or (< $generated@@157 $generated@@157) (and (= $generated@@157 $generated@@157) (< (- $generated@@158 1) $generated@@158))) (=> (and (= $generated@@159 ($generated@@20 ($generated@@20 ($generated@@20 $generated@@34 ($generated@@49 $generated@@5 ($generated@@9 $generated@@157))) ($generated@@49 $generated@@5 ($generated@@9 $generated@@158))) ($generated@@49 $generated@@5 ($generated@@9 ($generated@@140 $generated@@157 $generated@@158))))) (= $generated@@160 ($generated@@30 $generated@@159 ($generated@@20 $generated@@34 ($generated@@49 $generated@@5 ($generated@@9 $generated@@157)))))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (or (and ($generated@@44 $generated@@159 $generated@@159) (not ($generated@@44 $generated@@159 $generated@@159))) (and ($generated@@65 $generated@@159 $generated@@159) (or (and ($generated@@44 $generated@@159 $generated@@159) (not ($generated@@44 $generated@@159 $generated@@159))) (and ($generated@@65 $generated@@159 $generated@@159) (and ($generated@@44 $generated@@160 $generated@@159) (not ($generated@@44 $generated@@159 $generated@@160)))))))) (=> (or (and ($generated@@44 $generated@@159 $generated@@159) (not ($generated@@44 $generated@@159 $generated@@159))) (and ($generated@@65 $generated@@159 $generated@@159) (or (and ($generated@@44 $generated@@159 $generated@@159) (not ($generated@@44 $generated@@159 $generated@@159))) (and ($generated@@65 $generated@@159 $generated@@159) (and ($generated@@44 $generated@@160 $generated@@159) (not ($generated@@44 $generated@@159 $generated@@160))))))) (=> (= (ControlFlow 0 2) (- 0 1)) (<= ($generated@@39 0) ($generated@@39 0)))))))))))))))))
(let (($generated@@167  (=> (and ($generated@@161 $generated@@156) ($generated@@162 $generated@@156)) (=> (and (and ($generated@@52 $generated@@53 $generated@@163 ($generated@@54 $generated)) ($generated@@60 $generated@@53 $generated@@163 ($generated@@54 $generated) $generated@@156)) true) (=> (and (and (and ($generated@@52 $generated@@53 $generated@@164 ($generated@@54 $generated)) ($generated@@60 $generated@@53 $generated@@164 ($generated@@54 $generated) $generated@@156)) true) (and (= 0 $generated@@165) (= (ControlFlow 0 8) 2))) $generated@@166)))))
$generated@@167)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
