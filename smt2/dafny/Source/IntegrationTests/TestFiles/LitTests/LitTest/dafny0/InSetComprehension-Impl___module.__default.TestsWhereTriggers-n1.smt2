(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagSeq () T@U)
(declare-fun alloc () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.Id (T@U T@U) T@U)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun |_module.__default.Id#canCall| (T@U T@U) Bool)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun Tag (T@U) T@U)
(declare-fun |Seq#Contains| (T@U T@U) Bool)
(declare-fun |Seq#Empty| () T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun LitInt (Int) Int)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun _module.__default.Even (Int) Bool)
(declare-fun |_module.__default.Even#canCall| (Int) Bool)
(declare-fun Mod (Int Int) Int)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun SeqType () T@T)
(declare-fun TSeq (T@U) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun $IsGoodHeap (T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt TagSeq alloc)
)
(assert (= (Ctor BoxType) 3))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((_module._default.Id$T T@U) (|t#0| T@U) ) (!  (=> (or (|_module.__default.Id#canCall| _module._default.Id$T (Lit BoxType |t#0|)) (and (< 0 $FunctionContextHeight) ($IsBox |t#0| _module._default.Id$T))) (= (_module.__default.Id _module._default.Id$T (Lit BoxType |t#0|)) (Lit BoxType |t#0|)))
 :weight 3
 :pattern ( (_module.__default.Id _module._default.Id$T (Lit BoxType |t#0|)))
))))
(assert (= (Tag TInt) TagInt))
(assert (forall ((x@@2 T@U) ) (!  (not (|Seq#Contains| |Seq#Empty| x@@2))
 :pattern ( (|Seq#Contains| |Seq#Empty| x@@2))
)))
(assert (= (|Seq#Length| |Seq#Empty|) 0))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((_module._default.Id$T@@0 T@U) (|t#0@@0| T@U) ) (!  (=> (or (|_module.__default.Id#canCall| _module._default.Id$T@@0 |t#0@@0|) (and (< 0 $FunctionContextHeight) ($IsBox |t#0@@0| _module._default.Id$T@@0))) ($IsBox (_module.__default.Id _module._default.Id$T@@0 |t#0@@0|) _module._default.Id$T@@0))
 :pattern ( (_module.__default.Id _module._default.Id$T@@0 |t#0@@0|))
))))
(assert (forall ((x@@3 Int) ) (! (= (LitInt x@@3) x@@3)
 :pattern ( (LitInt x@@3))
)))
(assert (forall ((x@@4 T@U) (T T@T) ) (! (= (Lit T x@@4) x@@4)
 :pattern ( (Lit T x@@4))
)))
(assert (forall ((x@@5 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@5)) x@@5)
 :pattern ( ($Unbox T@@0 x@@5))
)))
(assert (forall ((v T@U) (t T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v) t h) ($IsAlloc T@@1 v t h))
 :pattern ( ($IsAllocBox ($Box T@@1 v) t h))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|x#0| Int) ) (!  (=> (or (|_module.__default.Even#canCall| |x#0|) (< 0 $FunctionContextHeight)) (= (_module.__default.Even |x#0|) (= (Mod |x#0| (LitInt 2)) (LitInt 0))))
 :pattern ( (_module.__default.Even |x#0|))
))))
(assert (forall ((s T@U) (x@@6 T@U) ) (! (= (|Seq#Contains| s x@@6) (exists ((i Int) ) (!  (and (and (<= 0 i) (< i (|Seq#Length| s))) (= (|Seq#Index| s i) x@@6))
 :pattern ( (|Seq#Index| s i))
)))
 :pattern ( (|Seq#Contains| s x@@6))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|x#0@@0| Int) ) (!  (=> (or (|_module.__default.Even#canCall| (LitInt |x#0@@0|)) (< 0 $FunctionContextHeight)) (= (_module.__default.Even (LitInt |x#0@@0|)) (= (LitInt (Mod |x#0@@0| (LitInt 2))) (LitInt 0))))
 :weight 3
 :pattern ( (_module.__default.Even (LitInt |x#0@@0|)))
))))
(assert (forall ((bx T@U) ) (!  (=> ($IsBox bx TInt) (and (= ($Box intType ($Unbox intType bx)) bx) ($Is intType ($Unbox intType bx) TInt)))
 :pattern ( ($IsBox bx TInt))
)))
(assert (forall ((v@@0 T@U) (t@@0 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@0) t@@0) ($Is T@@2 v@@0 t@@0))
 :pattern ( ($IsBox ($Box T@@2 v@@0) t@@0))
)))
(assert (forall ((s@@0 T@U) ) (! (<= 0 (|Seq#Length| s@@0))
 :pattern ( (|Seq#Length| s@@0))
)))
(assert (= (Ctor SeqType) 4))
(assert (forall ((v@@1 T@U) (t0 T@U) (h@@0 T@U) ) (! (= ($IsAlloc SeqType v@@1 (TSeq t0) h@@0) (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| v@@1))) ($IsAllocBox (|Seq#Index| v@@1 i@@0) t0 h@@0))
 :pattern ( (|Seq#Index| v@@1 i@@0))
)))
 :pattern ( ($IsAlloc SeqType v@@1 (TSeq t0) h@@0))
)))
(assert (forall ((t@@1 T@U) ) (! (= (Inv0_TSeq (TSeq t@@1)) t@@1)
 :pattern ( (TSeq t@@1))
)))
(assert (forall ((t@@2 T@U) ) (! (= (Tag (TSeq t@@2)) TagSeq)
 :pattern ( (TSeq t@@2))
)))
(assert (forall ((x@@7 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@7)) x@@7)
 :pattern ( ($Box T@@3 x@@7))
)))
(assert  (and (and (and (and (and (and (and (and (forall ((t0@@0 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0@@0 t1 t2 (MapType0Store t0@@0 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 5)) (= (Ctor FieldType) 6)) (forall ((t0@@1 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@1 t1@@0 (MapType1Store t0@@1 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :weight 0
))) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((_module._default.Id$T@@1 T@U) (|t#0@@1| T@U) ) (!  (=> (or (|_module.__default.Id#canCall| _module._default.Id$T@@1 |t#0@@1|) (and (< 0 $FunctionContextHeight) ($IsBox |t#0@@1| _module._default.Id$T@@1))) (= (_module.__default.Id _module._default.Id$T@@1 |t#0@@1|) |t#0@@1|))
 :pattern ( (_module.__default.Id _module._default.Id$T@@1 |t#0@@1|))
))))
(assert (forall ((x@@8 Int) (y Int) ) (! (= (Mod x@@8 y) (mod x@@8 y))
 :pattern ( (Mod x@@8 y))
)))
(assert (forall ((bx@@0 T@U) (t@@3 T@U) ) (!  (=> ($IsBox bx@@0 (TSeq t@@3)) (and (= ($Box SeqType ($Unbox SeqType bx@@0)) bx@@0) ($Is SeqType ($Unbox SeqType bx@@0) (TSeq t@@3))))
 :pattern ( ($IsBox bx@@0 (TSeq t@@3)))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($Heap T@U) (_module._default.Id$T@@2 T@U) (|t#0@@2| T@U) ) (!  (=> (and (or (|_module.__default.Id#canCall| _module._default.Id$T@@2 |t#0@@2|) (and (< 0 $FunctionContextHeight) (and ($IsBox |t#0@@2| _module._default.Id$T@@2) ($IsAllocBox |t#0@@2| _module._default.Id$T@@2 $Heap)))) ($IsGoodHeap $Heap)) ($IsAllocBox (_module.__default.Id _module._default.Id$T@@2 |t#0@@2|) _module._default.Id$T@@2 $Heap))
 :pattern ( ($IsAllocBox (_module.__default.Id _module._default.Id$T@@2 |t#0@@2|) _module._default.Id$T@@2 $Heap))
))))
(assert (forall ((x@@9 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@9))) (Lit BoxType ($Box intType (int_2_U x@@9))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@9))))
)))
(assert (forall ((x@@10 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@10)) (Lit BoxType ($Box T@@4 x@@10)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@10)))
)))
(assert (forall ((s@@1 T@U) ) (!  (=> (= (|Seq#Length| s@@1) 0) (= s@@1 |Seq#Empty|))
 :pattern ( (|Seq#Length| s@@1))
)))
(assert (forall ((h@@1 T@U) (v@@2 T@U) ) (! ($IsAlloc intType v@@2 TInt h@@1)
 :pattern ( ($IsAlloc intType v@@2 TInt h@@1))
)))
(assert (forall ((v@@3 T@U) (t0@@2 T@U) ) (! (= ($Is SeqType v@@3 (TSeq t0@@2)) (forall ((i@@1 Int) ) (!  (=> (and (<= 0 i@@1) (< i@@1 (|Seq#Length| v@@3))) ($IsBox (|Seq#Index| v@@3 i@@1) t0@@2))
 :pattern ( (|Seq#Index| v@@3 i@@1))
)))
 :pattern ( ($Is SeqType v@@3 (TSeq t0@@2)))
)))
(assert (forall ((v@@4 T@U) ) (! ($Is intType v@@4 TInt)
 :pattern ( ($Is intType v@@4 TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |z#0@5| () Bool)
(declare-fun |z#0@4| () Bool)
(declare-fun |i#4_0@0| () Int)
(declare-fun |z#0@3| () Bool)
(declare-fun |k#3_0@0| () Int)
(declare-fun |z#0@2| () Bool)
(declare-fun |##x#2_1@0| () Int)
(declare-fun $Heap@@0 () T@U)
(declare-fun |m#2_1@0| () Int)
(declare-fun |z#0@1| () Bool)
(declare-fun |t#0@@3| () T@U)
(declare-fun _module._default.TestsWhereTriggersMatter$T () T@U)
(declare-fun |uu#0| () T@U)
(declare-fun |u#1_0@0| () T@U)
(declare-fun |z#0@0| () Bool)
(declare-fun |u#0_1@0| () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 43) (let ((anon29_Else_correct true))
(let ((anon36_Else_correct true))
(let ((GeneratedUnifiedExit_correct  (=> (= (ControlFlow 0 4) (- 0 3)) |z#0@5|)))
(let ((anon6_correct  (=> (= |z#0@4|  (and (<= (LitInt 0) (LitInt 7)) (< 7 10))) (=> (and (= |z#0@5| |z#0@4|) (= (ControlFlow 0 35) 4)) GeneratedUnifiedExit_correct))))
(let ((anon31_Else_correct  (=> (and (not (and (<= (LitInt 0) |i#4_0@0|) (< |i#4_0@0| 10))) (= (ControlFlow 0 37) 35)) anon6_correct)))
(let ((anon31_Then_correct  (=> (and (and (<= (LitInt 0) |i#4_0@0|) (< |i#4_0@0| 10)) (= (ControlFlow 0 36) 35)) anon6_correct)))
(let ((anon30_Else_correct  (=> (< |i#4_0@0| (LitInt 0)) (and (=> (= (ControlFlow 0 39) 36) anon31_Then_correct) (=> (= (ControlFlow 0 39) 37) anon31_Else_correct)))))
(let ((anon30_Then_correct  (=> (<= (LitInt 0) |i#4_0@0|) (and (=> (= (ControlFlow 0 38) 36) anon31_Then_correct) (=> (= (ControlFlow 0 38) 37) anon31_Else_correct)))))
(let ((anon29_Then_correct  (and (=> (= (ControlFlow 0 40) 38) anon30_Then_correct) (=> (= (ControlFlow 0 40) 39) anon30_Else_correct))))
(let ((anon28_Then_correct  (and (=> (= (ControlFlow 0 41) 40) anon29_Then_correct) (=> (= (ControlFlow 0 41) 34) anon29_Else_correct))))
(let ((anon10_correct  (=> (= |z#0@3|  (and (<= (LitInt 0) (LitInt 8)) (U_2_bool (Lit boolType (bool_2_U (< 8 10)))))) (=> (and (= |z#0@5| |z#0@3|) (= (ControlFlow 0 28) 4)) GeneratedUnifiedExit_correct))))
(let ((anon34_Else_correct  (=> (and (<= 10 |k#3_0@0|) (= (ControlFlow 0 31) 28)) anon10_correct)))
(let ((anon34_Then_correct  (=> (and (< |k#3_0@0| 10) (= (ControlFlow 0 30) 28)) anon10_correct)))
(let ((anon33_Then_correct  (=> (<= (LitInt 0) |k#3_0@0|) (and (=> (= (ControlFlow 0 32) 30) anon34_Then_correct) (=> (= (ControlFlow 0 32) 31) anon34_Else_correct)))))
(let ((anon33_Else_correct  (=> (and (< |k#3_0@0| (LitInt 0)) (= (ControlFlow 0 29) 28)) anon10_correct)))
(let ((anon32_Then_correct  (and (=> (= (ControlFlow 0 33) 32) anon33_Then_correct) (=> (= (ControlFlow 0 33) 29) anon33_Else_correct))))
(let ((anon18_correct  (=> (and (forall ((|m#2_0| Int) ) (!  (=> (and (<= (LitInt 0) |m#2_0|) (< |m#2_0| 10)) (|_module.__default.Even#canCall| |m#2_0|))
 :pattern ( (_module.__default.Even |m#2_0|))
)) (= |z#0@2| (exists ((|m#2_0@@0| Int) ) (!  (and (and (and (<= (LitInt 0) |m#2_0@@0|) (< |m#2_0@@0| 10)) (_module.__default.Even |m#2_0@@0|)) (= ($Box intType (int_2_U (LitInt 5))) ($Box intType (int_2_U (+ |m#2_0@@0| 1)))))
 :pattern ( (_module.__default.Even |m#2_0@@0|))
)))) (=> (and (and (= |##x#2_1@0| (LitInt 4)) ($IsAlloc intType (int_2_U |##x#2_1@0|) TInt $Heap@@0)) (and (|_module.__default.Even#canCall| (LitInt 4)) (|_module.__default.Even#canCall| (LitInt 4)))) (and (=> (= (ControlFlow 0 18) (- 0 19)) (=> (|_module.__default.Even#canCall| (LitInt 4)) (or (U_2_bool (Lit boolType (bool_2_U (_module.__default.Even (LitInt 4))))) (= (LitInt (Mod 4 (LitInt 2))) (LitInt 0))))) (=> (U_2_bool (Lit boolType (bool_2_U (_module.__default.Even (LitInt 4))))) (=> (and (= |z#0@5| |z#0@2|) (= (ControlFlow 0 18) 4)) GeneratedUnifiedExit_correct)))))))
(let ((anon39_Else_correct  (=> (and (not (and (and (<= (LitInt 0) |m#2_1@0|) (< |m#2_1@0| 10)) (_module.__default.Even |m#2_1@0|))) (= (ControlFlow 0 21) 18)) anon18_correct)))
(let ((anon39_Then_correct  (=> (and (and (and (<= (LitInt 0) |m#2_1@0|) (< |m#2_1@0| 10)) (_module.__default.Even |m#2_1@0|)) (= (ControlFlow 0 20) 18)) anon18_correct)))
(let ((anon38_Else_correct  (=> (not (and (<= (LitInt 0) |m#2_1@0|) (< |m#2_1@0| 10))) (and (=> (= (ControlFlow 0 23) 20) anon39_Then_correct) (=> (= (ControlFlow 0 23) 21) anon39_Else_correct)))))
(let ((anon38_Then_correct  (=> (and (and (<= (LitInt 0) |m#2_1@0|) (< |m#2_1@0| 10)) (and ($IsAlloc intType (int_2_U |m#2_1@0|) TInt $Heap@@0) (|_module.__default.Even#canCall| |m#2_1@0|))) (and (=> (= (ControlFlow 0 22) 20) anon39_Then_correct) (=> (= (ControlFlow 0 22) 21) anon39_Else_correct)))))
(let ((anon37_Else_correct  (=> (< |m#2_1@0| (LitInt 0)) (and (=> (= (ControlFlow 0 25) 22) anon38_Then_correct) (=> (= (ControlFlow 0 25) 23) anon38_Else_correct)))))
(let ((anon37_Then_correct  (=> (<= (LitInt 0) |m#2_1@0|) (and (=> (= (ControlFlow 0 24) 22) anon38_Then_correct) (=> (= (ControlFlow 0 24) 23) anon38_Else_correct)))))
(let ((anon36_Then_correct  (and (=> (= (ControlFlow 0 26) 24) anon37_Then_correct) (=> (= (ControlFlow 0 26) 25) anon37_Else_correct))))
(let ((anon35_Then_correct  (and (=> (= (ControlFlow 0 27) 26) anon36_Then_correct) (=> (= (ControlFlow 0 27) 17) anon36_Else_correct))))
(let ((anon22_correct  (=> (= |z#0@1|  (and ($IsBox |t#0@@3| _module._default.TestsWhereTriggersMatter$T) (|Seq#Contains| |uu#0| |t#0@@3|))) (=> (and (= |z#0@5| |z#0@1|) (= (ControlFlow 0 11) 4)) GeneratedUnifiedExit_correct))))
(let ((anon42_Else_correct  (=> (and (not (|Seq#Contains| |uu#0| |u#1_0@0|)) (= (ControlFlow 0 14) 11)) anon22_correct)))
(let ((anon42_Then_correct  (=> (and (|Seq#Contains| |uu#0| |u#1_0@0|) (= (ControlFlow 0 13) 11)) anon22_correct)))
(let ((anon41_Then_correct  (=> (and ($IsBox |u#1_0@0| _module._default.TestsWhereTriggersMatter$T) ($IsAllocBox |u#1_0@0| _module._default.TestsWhereTriggersMatter$T $Heap@@0)) (and (=> (= (ControlFlow 0 15) 13) anon42_Then_correct) (=> (= (ControlFlow 0 15) 14) anon42_Else_correct)))))
(let ((anon41_Else_correct  (=> (and (not (and ($IsBox |u#1_0@0| _module._default.TestsWhereTriggersMatter$T) ($IsAllocBox |u#1_0@0| _module._default.TestsWhereTriggersMatter$T $Heap@@0))) (= (ControlFlow 0 12) 11)) anon22_correct)))
(let ((anon40_Then_correct  (and (=> (= (ControlFlow 0 16) 15) anon41_Then_correct) (=> (= (ControlFlow 0 16) 12) anon41_Else_correct))))
(let ((anon26_correct  (=> (and (and (forall ((|u#0_0| T@U) )  (=> ($IsBox |u#0_0| _module._default.TestsWhereTriggersMatter$T) (=> (|Seq#Contains| |uu#0| |u#0_0|) (|_module.__default.Id#canCall| _module._default.TestsWhereTriggersMatter$T |u#0_0|)))) (= |z#0@0| (exists ((|u#0_0@@0| T@U) )  (and (and ($IsBox |u#0_0@@0| _module._default.TestsWhereTriggersMatter$T) (|Seq#Contains| |uu#0| |u#0_0@@0|)) (= |t#0@@3| (_module.__default.Id _module._default.TestsWhereTriggersMatter$T |u#0_0@@0|)))))) (and (= |z#0@5| |z#0@0|) (= (ControlFlow 0 5) 4))) GeneratedUnifiedExit_correct)))
(let ((anon45_Else_correct  (=> (and (not (|Seq#Contains| |uu#0| |u#0_1@0|)) (= (ControlFlow 0 8) 5)) anon26_correct)))
(let ((anon45_Then_correct  (=> (and (and (|Seq#Contains| |uu#0| |u#0_1@0|) ($IsAllocBox |u#0_1@0| _module._default.TestsWhereTriggersMatter$T $Heap@@0)) (and (|_module.__default.Id#canCall| _module._default.TestsWhereTriggersMatter$T |u#0_1@0|) (= (ControlFlow 0 7) 5))) anon26_correct)))
(let ((anon44_Then_correct  (=> (and ($IsBox |u#0_1@0| _module._default.TestsWhereTriggersMatter$T) ($IsAllocBox |u#0_1@0| _module._default.TestsWhereTriggersMatter$T $Heap@@0)) (and (=> (= (ControlFlow 0 9) 7) anon45_Then_correct) (=> (= (ControlFlow 0 9) 8) anon45_Else_correct)))))
(let ((anon44_Else_correct  (=> (and (not (and ($IsBox |u#0_1@0| _module._default.TestsWhereTriggersMatter$T) ($IsAllocBox |u#0_1@0| _module._default.TestsWhereTriggersMatter$T $Heap@@0))) (= (ControlFlow 0 6) 5)) anon26_correct)))
(let ((anon43_Then_correct  (and (=> (= (ControlFlow 0 10) 9) anon44_Then_correct) (=> (= (ControlFlow 0 10) 6) anon44_Else_correct))))
(let ((anon43_Else_correct  (=> (and (and (and (and (and (not (U_2_bool (Lit boolType (bool_2_U true)))) (not (U_2_bool (Lit boolType (bool_2_U true))))) (not (U_2_bool (Lit boolType (bool_2_U true))))) (not (U_2_bool (Lit boolType (bool_2_U true))))) (not (U_2_bool (Lit boolType (bool_2_U true))))) (= (ControlFlow 0 2) (- 0 1))) false)))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap@@0 alloc false)) (and (and (and (and (and (=> (= (ControlFlow 0 42) 41) anon28_Then_correct) (=> (= (ControlFlow 0 42) 33) anon32_Then_correct)) (=> (= (ControlFlow 0 42) 27) anon35_Then_correct)) (=> (= (ControlFlow 0 42) 16) anon40_Then_correct)) (=> (= (ControlFlow 0 42) 10) anon43_Then_correct)) (=> (= (ControlFlow 0 42) 2) anon43_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap@@0) ($IsHeapAnchor $Heap@@0)) (=> (and (and (and ($IsBox |t#0@@3| _module._default.TestsWhereTriggersMatter$T) ($IsAllocBox |t#0@@3| _module._default.TestsWhereTriggersMatter$T $Heap@@0)) (and ($Is SeqType |uu#0| (TSeq _module._default.TestsWhereTriggersMatter$T)) ($IsAlloc SeqType |uu#0| (TSeq _module._default.TestsWhereTriggersMatter$T) $Heap@@0))) (and (and (= 1 $FunctionContextHeight) (<= (LitInt 10) (|Seq#Length| |uu#0|))) (and (= (|Seq#Index| |uu#0| (LitInt 4)) |t#0@@3|) (= (ControlFlow 0 43) 42)))) anon0_correct))))
PreconditionGeneratedEntry_correct)))))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
