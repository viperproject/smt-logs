(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TReal () T@U)
(declare-fun TagReal () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._System.nat () T@U)
(declare-fun Tagclass.Basic.U? () T@U)
(declare-fun Tagclass.Basic.U () T@U)
(declare-fun tytagFamily$nat () T@U)
(declare-fun tytagFamily$U () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass._System.nat () T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun Tclass.Basic.U? () T@U)
(declare-fun null () T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun Tclass.Basic.U () T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun Basic.U.Sw1 (T@U T@U T@U T@U Int T@U T@U) Real)
(declare-fun $LS (T@U) T@U)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun |Basic.U.Sw1#canCall| (T@U T@U T@U Int T@U T@U) Bool)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun LitReal (Real) Real)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TReal TagReal alloc Tagclass._System.nat Tagclass.Basic.U? Tagclass.Basic.U tytagFamily$nat tytagFamily$U)
)
(assert (= (Tag TReal) TagReal))
(assert (forall ((|x#0| T@U) ($h T@U) ) (! ($IsAlloc intType |x#0| Tclass._System.nat $h)
 :pattern ( ($IsAlloc intType |x#0| Tclass._System.nat $h))
)))
(assert (= (Ctor refType) 3))
(assert (forall (($o T@U) ) (! (= ($Is refType $o Tclass.Basic.U?)  (or (= $o null) (= (dtype $o) Tclass.Basic.U?)))
 :pattern ( ($Is refType $o Tclass.Basic.U?))
)))
(assert (forall ((|c#0| T@U) ($h@@0 T@U) ) (! (= ($IsAlloc refType |c#0| Tclass.Basic.U $h@@0) ($IsAlloc refType |c#0| Tclass.Basic.U? $h@@0))
 :pattern ( ($IsAlloc refType |c#0| Tclass.Basic.U $h@@0))
 :pattern ( ($IsAlloc refType |c#0| Tclass.Basic.U? $h@@0))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($ly T@U) ($prevHeap T@U) ($Heap T@U) (this T@U) (|n#0| Int) (|x#0@@0| T@U) (|y#0| T@U) ) (!  (=> (or (|Basic.U.Sw1#canCall| $prevHeap $Heap this (LitInt |n#0|) (Lit refType |x#0@@0|) (Lit refType |y#0|)) (and (< 1 $FunctionContextHeight) (and (and (and (and (and (and (and ($IsGoodHeap $prevHeap) ($IsGoodHeap $Heap)) ($HeapSucc $prevHeap $Heap)) (and (or (not (= this null)) (not true)) (and ($Is refType this Tclass.Basic.U) ($IsAlloc refType this Tclass.Basic.U $prevHeap)))) (<= (LitInt 0) |n#0|)) ($Is refType |x#0@@0| Tclass.Basic.U)) ($Is refType |y#0| Tclass.Basic.U)) (= (Lit refType |x#0@@0|) (Lit refType |y#0|))))) (and (=> (or (not (= (LitInt |n#0|) (LitInt 0))) (not true)) (|Basic.U.Sw1#canCall| $prevHeap $Heap this (LitInt (- |n#0| 1)) (Lit refType |y#0|) (Lit refType |x#0@@0|))) (= (Basic.U.Sw1 ($LS $ly) $prevHeap $Heap this (LitInt |n#0|) (Lit refType |x#0@@0|) (Lit refType |y#0|)) (ite (= (LitInt |n#0|) (LitInt 0)) 8.29 (Basic.U.Sw1 ($LS $ly) $prevHeap $Heap this (LitInt (- |n#0| 1)) (Lit refType |y#0|) (Lit refType |x#0@@0|))))))
 :weight 3
 :pattern ( (Basic.U.Sw1 ($LS $ly) $prevHeap $Heap this (LitInt |n#0|) (Lit refType |x#0@@0|) (Lit refType |y#0|)) ($IsGoodHeap $Heap))
))))
(assert  (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 4)) (= (Ctor BoxType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 6))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall (($o@@0 T@U) ($h@@1 T@U) ) (! (= ($IsAlloc refType $o@@0 Tclass.Basic.U? $h@@1)  (or (= $o@@0 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@1 $o@@0) alloc)))))
 :pattern ( ($IsAlloc refType $o@@0 Tclass.Basic.U? $h@@1))
)))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 Real) ) (! (= (LitReal x@@3) x@@3)
 :pattern ( (LitReal x@@3))
)))
(assert (forall ((x@@4 T@U) (T T@T) ) (! (= (Lit T x@@4) x@@4)
 :pattern ( (Lit T x@@4))
)))
(assert (forall ((x@@5 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@5)) x@@5)
 :pattern ( ($Unbox T@@0 x@@5))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($ly@@0 T@U) ($prevHeap@@0 T@U) ($Heap@@0 T@U) (this@@0 T@U) (|n#0@@0| Int) (|x#0@@1| T@U) (|y#0@@0| T@U) ) (!  (=> (or (|Basic.U.Sw1#canCall| $prevHeap@@0 $Heap@@0 this@@0 |n#0@@0| |x#0@@1| |y#0@@0|) (and (< 1 $FunctionContextHeight) (and (and (and (and (and (and (and ($IsGoodHeap $prevHeap@@0) ($IsGoodHeap $Heap@@0)) ($HeapSucc $prevHeap@@0 $Heap@@0)) (and (or (not (= this@@0 null)) (not true)) (and ($Is refType this@@0 Tclass.Basic.U) ($IsAlloc refType this@@0 Tclass.Basic.U $prevHeap@@0)))) (<= (LitInt 0) |n#0@@0|)) ($Is refType |x#0@@1| Tclass.Basic.U)) ($Is refType |y#0@@0| Tclass.Basic.U)) (= |x#0@@1| |y#0@@0|)))) (and (=> (or (not (= |n#0@@0| (LitInt 0))) (not true)) (|Basic.U.Sw1#canCall| $prevHeap@@0 $Heap@@0 this@@0 (- |n#0@@0| 1) |y#0@@0| |x#0@@1|)) (= (Basic.U.Sw1 ($LS $ly@@0) $prevHeap@@0 $Heap@@0 this@@0 |n#0@@0| |x#0@@1| |y#0@@0|) (ite (= |n#0@@0| (LitInt 0)) 8.29 (Basic.U.Sw1 $ly@@0 $prevHeap@@0 $Heap@@0 this@@0 (- |n#0@@0| 1) |y#0@@0| |x#0@@1|)))))
 :pattern ( (Basic.U.Sw1 ($LS $ly@@0) $prevHeap@@0 $Heap@@0 this@@0 |n#0@@0| |x#0@@1| |y#0@@0|) ($IsGoodHeap $Heap@@0))
))))
(assert (forall ((|x#0@@2| T@U) ) (! (= ($Is intType |x#0@@2| Tclass._System.nat) (<= (LitInt 0) (U_2_int |x#0@@2|)))
 :pattern ( ($Is intType |x#0@@2| Tclass._System.nat))
)))
(assert (forall ((v T@U) (t T@U) (h@@0 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v) t h@@0) ($IsAlloc T@@1 v t h@@0))
 :pattern ( ($IsAllocBox ($Box T@@1 v) t h@@0))
)))
(assert (forall ((h@@1 T@U) (k@@0 T@U) (bx T@U) (t@@0 T@U) ) (!  (=> ($HeapSucc h@@1 k@@0) (=> ($IsAllocBox bx t@@0 h@@1) ($IsAllocBox bx t@@0 k@@0)))
 :pattern ( ($HeapSucc h@@1 k@@0) ($IsAllocBox bx t@@0 h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@1 T@U) (v@@0 T@U) (t@@1 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@2 k@@1) (=> ($IsAlloc T@@2 v@@0 t@@1 h@@2) ($IsAlloc T@@2 v@@0 t@@1 k@@1)))
 :pattern ( ($HeapSucc h@@2 k@@1) ($IsAlloc T@@2 v@@0 t@@1 h@@2))
)))
(assert (forall (($ly@@1 T@U) ($prevHeap@@1 T@U) ($Heap@@1 T@U) (this@@1 T@U) (|n#0@@1| Int) (|x#0@@3| T@U) (|y#0@@1| T@U) ) (! (= (Basic.U.Sw1 ($LS $ly@@1) $prevHeap@@1 $Heap@@1 this@@1 |n#0@@1| |x#0@@3| |y#0@@1|) (Basic.U.Sw1 $ly@@1 $prevHeap@@1 $Heap@@1 this@@1 |n#0@@1| |x#0@@3| |y#0@@1|))
 :pattern ( (Basic.U.Sw1 ($LS $ly@@1) $prevHeap@@1 $Heap@@1 this@@1 |n#0@@1| |x#0@@3| |y#0@@1|))
)))
(assert (forall ((|c#0@@0| T@U) ) (! (= ($Is refType |c#0@@0| Tclass.Basic.U)  (and ($Is refType |c#0@@0| Tclass.Basic.U?) (or (not (= |c#0@@0| null)) (not true))))
 :pattern ( ($Is refType |c#0@@0| Tclass.Basic.U))
 :pattern ( ($Is refType |c#0@@0| Tclass.Basic.U?))
)))
(assert (forall ((a T@U) (b T@U) (c T@U) ) (!  (=> (or (not (= a c)) (not true)) (=> (and ($HeapSucc a b) ($HeapSucc b c)) ($HeapSucc a c)))
 :pattern ( ($HeapSucc a b) ($HeapSucc b c))
)))
(assert (forall (($ly@@2 T@U) ($prevHeap@@2 T@U) ($h0 T@U) ($h1 T@U) (this@@2 T@U) (|n#0@@2| Int) (|x#0@@4| T@U) (|y#0@@2| T@U) ) (!  (=> (and (and (and (and ($IsGoodHeap $h0) ($IsGoodHeap $h1)) (and (or (not (= this@@2 null)) (not true)) ($Is refType this@@2 Tclass.Basic.U))) (or (|Basic.U.Sw1#canCall| $prevHeap@@2 $h0 this@@2 |n#0@@2| |x#0@@4| |y#0@@2|) (and (and (<= (LitInt 0) |n#0@@2|) ($Is refType |x#0@@4| Tclass.Basic.U)) ($Is refType |y#0@@2| Tclass.Basic.U)))) (and ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1))) (=> (forall (($o@@1 T@U) ($f T@U) ) true) (= (Basic.U.Sw1 $ly@@2 $prevHeap@@2 $h0 this@@2 |n#0@@2| |x#0@@4| |y#0@@2|) (Basic.U.Sw1 $ly@@2 $prevHeap@@2 $h1 this@@2 |n#0@@2| |x#0@@4| |y#0@@2|))))
 :pattern ( ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1) (Basic.U.Sw1 $ly@@2 $prevHeap@@2 $h1 this@@2 |n#0@@2| |x#0@@4| |y#0@@2|))
)))
(assert (forall ((x@@6 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@6)) x@@6)
 :pattern ( ($Box T@@3 x@@6))
)))
(assert  (and (forall ((t0@@0 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 t2 (MapType1Store t0@@0 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o@@2 T@U) ($f@@0 T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@2 $f@@0))  (=> (and (or (not (= $o@@2 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@2) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@2 $f@@0))
)))
(assert (= (Tag Tclass._System.nat) Tagclass._System.nat))
(assert (= (TagFamily Tclass._System.nat) tytagFamily$nat))
(assert (= (Tag Tclass.Basic.U?) Tagclass.Basic.U?))
(assert (= (TagFamily Tclass.Basic.U?) tytagFamily$U))
(assert (= (Tag Tclass.Basic.U) Tagclass.Basic.U))
(assert (= (TagFamily Tclass.Basic.U) tytagFamily$U))
(assert (forall ((x@@7 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@7))) (Lit BoxType ($Box intType (int_2_U x@@7))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@7))))
)))
(assert (forall ((x@@8 Real) ) (! (= ($Box realType (real_2_U (LitReal x@@8))) (Lit BoxType ($Box realType (real_2_U x@@8))))
 :pattern ( ($Box realType (real_2_U (LitReal x@@8))))
)))
(assert (forall ((x@@9 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@9)) (Lit BoxType ($Box T@@4 x@@9)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@9)))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($ly@@3 T@U) ($prevHeap@@3 T@U) ($Heap@@2 T@U) (this@@3 T@U) (|n#0@@3| Int) (|x#0@@5| T@U) (|y#0@@3| T@U) ) (!  (=> (or (|Basic.U.Sw1#canCall| $prevHeap@@3 $Heap@@2 (Lit refType this@@3) (LitInt |n#0@@3|) (Lit refType |x#0@@5|) (Lit refType |y#0@@3|)) (and (< 1 $FunctionContextHeight) (and (and (and (and (and (and (and ($IsGoodHeap $prevHeap@@3) ($IsGoodHeap $Heap@@2)) ($HeapSucc $prevHeap@@3 $Heap@@2)) (and (or (not (= this@@3 null)) (not true)) (and ($Is refType this@@3 Tclass.Basic.U) ($IsAlloc refType this@@3 Tclass.Basic.U $prevHeap@@3)))) (<= (LitInt 0) |n#0@@3|)) ($Is refType |x#0@@5| Tclass.Basic.U)) ($Is refType |y#0@@3| Tclass.Basic.U)) (= (Lit refType |x#0@@5|) (Lit refType |y#0@@3|))))) (and (=> (or (not (= (LitInt |n#0@@3|) (LitInt 0))) (not true)) (|Basic.U.Sw1#canCall| $prevHeap@@3 $Heap@@2 (Lit refType this@@3) (LitInt (- |n#0@@3| 1)) (Lit refType |y#0@@3|) (Lit refType |x#0@@5|))) (= (Basic.U.Sw1 ($LS $ly@@3) $prevHeap@@3 $Heap@@2 (Lit refType this@@3) (LitInt |n#0@@3|) (Lit refType |x#0@@5|) (Lit refType |y#0@@3|)) (ite (= (LitInt |n#0@@3|) (LitInt 0)) 8.29 (Basic.U.Sw1 ($LS $ly@@3) $prevHeap@@3 $Heap@@2 (Lit refType this@@3) (LitInt (- |n#0@@3| 1)) (Lit refType |y#0@@3|) (Lit refType |x#0@@5|))))))
 :weight 3
 :pattern ( (Basic.U.Sw1 ($LS $ly@@3) $prevHeap@@3 $Heap@@2 (Lit refType this@@3) (LitInt |n#0@@3|) (Lit refType |x#0@@5|) (Lit refType |y#0@@3|)) ($IsGoodHeap $Heap@@2))
))))
(assert (forall ((h@@3 T@U) (v@@1 T@U) ) (! ($IsAlloc realType v@@1 TReal h@@3)
 :pattern ( ($IsAlloc realType v@@1 TReal h@@3))
)))
(assert (forall ((v@@2 T@U) ) (! ($Is realType v@@2 TReal)
 :pattern ( ($Is realType v@@2 TReal))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |n#0@@4| () Int)
(declare-fun this@@4 () T@U)
(declare-fun current$Heap () T@U)
(declare-fun |##n#0@0| () Int)
(declare-fun |y#0@@4| () T@U)
(declare-fun |x#0@@6| () T@U)
(declare-fun $Heap@@3 () T@U)
(declare-fun $_ReadsFrame@0 () T@U)
(declare-fun previous$Heap () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 11) (let ((anon8_Else_correct  (=> (and (or (not (= |n#0@@4| (LitInt 0))) (not true)) ($IsAllocBox ($Box refType this@@4) Tclass.Basic.U? current$Heap)) (and (=> (= (ControlFlow 0 4) (- 0 9)) ($Is intType (int_2_U (- |n#0@@4| 1)) Tclass._System.nat)) (=> ($Is intType (int_2_U (- |n#0@@4| 1)) Tclass._System.nat) (=> (and (and (= |##n#0@0| (- |n#0@@4| 1)) ($IsAlloc intType (int_2_U |##n#0@0|) Tclass._System.nat current$Heap)) (and ($IsAlloc refType |y#0@@4| Tclass.Basic.U current$Heap) ($IsAlloc refType |x#0@@6| Tclass.Basic.U current$Heap))) (and (=> (= (ControlFlow 0 4) (- 0 8)) ($IsAlloc refType this@@4 Tclass.Basic.U $Heap@@3)) (=> ($IsAlloc refType this@@4 Tclass.Basic.U $Heap@@3) (and (=> (= (ControlFlow 0 4) (- 0 7)) ($IsAlloc refType |y#0@@4| Tclass.Basic.U $Heap@@3)) (=> ($IsAlloc refType |y#0@@4| Tclass.Basic.U $Heap@@3) (and (=> (= (ControlFlow 0 4) (- 0 6)) (= |y#0@@4| |x#0@@6|)) (=> (= |y#0@@4| |x#0@@6|) (and (=> (= (ControlFlow 0 4) (- 0 5)) (or (<= 0 |n#0@@4|) (= |##n#0@0| |n#0@@4|))) (=> (or (<= 0 |n#0@@4|) (= |##n#0@0| |n#0@@4|)) (=> (= (ControlFlow 0 4) (- 0 3)) (or (< |##n#0@0| |n#0@@4|) (and (= |##n#0@0| |n#0@@4|) (or (and (= |y#0@@4| null) (or (not (= |x#0@@6| null)) (not true))) (and (=  (or (not (= |y#0@@4| null)) (not true))  (or (not (= |x#0@@6| null)) (not true))) (and (= |x#0@@6| null) (or (not (= |y#0@@4| null)) (not true))))))))))))))))))))))
(let ((anon8_Then_correct true))
(let ((anon7_Then_correct true))
(let ((anon0_correct  (=> (and (= $_ReadsFrame@0 (|lambda#0| null current$Heap alloc false)) (= |x#0@@6| |y#0@@4|)) (and (and (=> (= (ControlFlow 0 10) 1) anon7_Then_correct) (=> (= (ControlFlow 0 10) 2) anon8_Then_correct)) (=> (= (ControlFlow 0 10) 4) anon8_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap@@3) ($IsHeapAnchor $Heap@@3)) (=> (and (and (and (and (or (not (= this@@4 null)) (not true)) (and ($Is refType this@@4 Tclass.Basic.U) ($IsAlloc refType this@@4 Tclass.Basic.U previous$Heap))) (<= (LitInt 0) |n#0@@4|)) (and ($Is refType |x#0@@6| Tclass.Basic.U) ($IsAlloc refType |x#0@@6| Tclass.Basic.U previous$Heap))) (and (and (and ($Is refType |y#0@@4| Tclass.Basic.U) ($IsAlloc refType |y#0@@4| Tclass.Basic.U current$Heap)) (= 1 $FunctionContextHeight)) (and (and (= previous$Heap $Heap@@3) (and ($HeapSucc previous$Heap current$Heap) ($IsGoodHeap current$Heap))) (= (ControlFlow 0 11) 10)))) anon0_correct))))
PreconditionGeneratedEntry_correct))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
