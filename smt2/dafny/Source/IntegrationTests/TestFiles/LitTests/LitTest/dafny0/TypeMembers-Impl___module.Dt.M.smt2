(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TBool () T@U)
(declare-fun TReal () T@U)
(declare-fun TagBool () T@U)
(declare-fun TagReal () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._module.Dt () T@U)
(declare-fun |##_module.Dt.Blue| () T@U)
(declare-fun |##_module.Dt.Bucket| () T@U)
(declare-fun |##_module.Dt.Business| () T@U)
(declare-fun tytagFamily$Dt () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun |_module.Dt#Equal| (T@U T@U) Bool)
(declare-fun _module.Dt.Bucket_q (T@U) Bool)
(declare-fun _module.Dt.diameter (T@U) Real)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun |#_module.Dt.Blue| () T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun Tclass._module.Dt (T@U) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun |#_module.Dt.Business| (Bool T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun refType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun LitInt (Int) Int)
(declare-fun LitReal (Real) Real)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun _module.Dt.Business_q (T@U) Bool)
(declare-fun _module.Dt.trendy (T@U) Bool)
(declare-fun _module.Dt.a (T@U) T@U)
(declare-fun _module.Dt.Blue_q (T@U) Bool)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun |#_module.Dt.Bucket| (Real) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun TagFamily (T@U) T@U)
(declare-fun Tclass._module.Dt_0 (T@U) T@U)
(declare-fun |$IsA#_module.Dt| (T@U) Bool)
(declare-fun BoxRank (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TBool TReal TagBool TagReal alloc Tagclass._module.Dt |##_module.Dt.Blue| |##_module.Dt.Bucket| |##_module.Dt.Business| tytagFamily$Dt)
)
(assert (= (Tag TBool) TagBool))
(assert (= (Tag TReal) TagReal))
(assert (forall ((a T@U) (b T@U) ) (!  (=> (and (_module.Dt.Bucket_q a) (_module.Dt.Bucket_q b)) (= (|_module.Dt#Equal| a b) (= (_module.Dt.diameter a) (_module.Dt.diameter b))))
 :pattern ( (|_module.Dt#Equal| a b) (_module.Dt.Bucket_q a))
 :pattern ( (|_module.Dt#Equal| a b) (_module.Dt.Bucket_q b))
)))
(assert (= (DatatypeCtorId |#_module.Dt.Blue|) |##_module.Dt.Blue|))
(assert (= (Ctor DatatypeTypeType) 3))
(assert (forall ((_module.Dt$A T@U) ($h T@U) ) (!  (=> ($IsGoodHeap $h) ($IsAlloc DatatypeTypeType |#_module.Dt.Blue| (Tclass._module.Dt _module.Dt$A) $h))
 :pattern ( ($IsAlloc DatatypeTypeType |#_module.Dt.Blue| (Tclass._module.Dt _module.Dt$A) $h))
)))
(assert (forall ((_module.Dt$A@@0 T@U) (|a#11#0#0| Bool) (|a#11#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Dt.Business| |a#11#0#0| |a#11#1#0|) (Tclass._module.Dt _module.Dt$A@@0))  (and ($Is boolType (bool_2_U |a#11#0#0|) TBool) ($IsBox |a#11#1#0| _module.Dt$A@@0)))
 :pattern ( ($Is DatatypeTypeType (|#_module.Dt.Business| |a#11#0#0| |a#11#1#0|) (Tclass._module.Dt _module.Dt$A@@0)))
)))
(assert (forall ((_module.Dt$A@@1 T@U) ) (! ($Is DatatypeTypeType |#_module.Dt.Blue| (Tclass._module.Dt _module.Dt$A@@1))
 :pattern ( ($Is DatatypeTypeType |#_module.Dt.Blue| (Tclass._module.Dt _module.Dt$A@@1)))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) ) (! (= (|_module.Dt#Equal| a@@0 b@@0) (= a@@0 b@@0))
 :pattern ( (|_module.Dt#Equal| a@@0 b@@0))
)))
(assert  (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 4)) (= (Ctor BoxType) 5)) (= (Ctor refType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 Real) ) (! (= (LitReal x@@3) x@@3)
 :pattern ( (LitReal x@@3))
)))
(assert (forall ((x@@4 T@U) (T T@T) ) (! (= (Lit T x@@4) x@@4)
 :pattern ( (Lit T x@@4))
)))
(assert (forall ((a@@1 T@U) (b@@1 T@U) ) (!  (=> (and (_module.Dt.Business_q a@@1) (_module.Dt.Business_q b@@1)) (= (|_module.Dt#Equal| a@@1 b@@1)  (and (= (_module.Dt.trendy a@@1) (_module.Dt.trendy b@@1)) (= (_module.Dt.a a@@1) (_module.Dt.a b@@1)))))
 :pattern ( (|_module.Dt#Equal| a@@1 b@@1) (_module.Dt.Business_q a@@1))
 :pattern ( (|_module.Dt#Equal| a@@1 b@@1) (_module.Dt.Business_q b@@1))
)))
(assert (forall ((d T@U) ) (! (= (_module.Dt.Blue_q d) (= (DatatypeCtorId d) |##_module.Dt.Blue|))
 :pattern ( (_module.Dt.Blue_q d))
)))
(assert (forall ((d@@0 T@U) ) (! (= (_module.Dt.Bucket_q d@@0) (= (DatatypeCtorId d@@0) |##_module.Dt.Bucket|))
 :pattern ( (_module.Dt.Bucket_q d@@0))
)))
(assert (forall ((d@@1 T@U) ) (! (= (_module.Dt.Business_q d@@1) (= (DatatypeCtorId d@@1) |##_module.Dt.Business|))
 :pattern ( (_module.Dt.Business_q d@@1))
)))
(assert (forall ((x@@5 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@5)) x@@5)
 :pattern ( ($Unbox T@@0 x@@5))
)))
(assert (forall ((d@@2 T@U) ) (!  (=> (_module.Dt.Business_q d@@2) (exists ((|a#10#0#0| Bool) (|a#10#1#0| T@U) ) (= d@@2 (|#_module.Dt.Business| |a#10#0#0| |a#10#1#0|))))
 :pattern ( (_module.Dt.Business_q d@@2))
)))
(assert (forall ((d@@3 T@U) ) (!  (=> (_module.Dt.Blue_q d@@3) (= d@@3 |#_module.Dt.Blue|))
 :pattern ( (_module.Dt.Blue_q d@@3))
)))
(assert (forall ((d@@4 T@U) ) (!  (=> (_module.Dt.Bucket_q d@@4) (exists ((|a#5#0#0| Real) ) (= d@@4 (|#_module.Dt.Bucket| |a#5#0#0|))))
 :pattern ( (_module.Dt.Bucket_q d@@4))
)))
(assert (forall ((v T@U) (t T@U) (h@@0 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v) t h@@0) ($IsAlloc T@@1 v t h@@0))
 :pattern ( ($IsAllocBox ($Box T@@1 v) t h@@0))
)))
(assert (forall ((h@@1 T@U) (k@@0 T@U) (bx T@U) (t@@0 T@U) ) (!  (=> ($HeapSucc h@@1 k@@0) (=> ($IsAllocBox bx t@@0 h@@1) ($IsAllocBox bx t@@0 k@@0)))
 :pattern ( ($HeapSucc h@@1 k@@0) ($IsAllocBox bx t@@0 h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@1 T@U) (v@@0 T@U) (t@@1 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@2 k@@1) (=> ($IsAlloc T@@2 v@@0 t@@1 h@@2) ($IsAlloc T@@2 v@@0 t@@1 k@@1)))
 :pattern ( ($HeapSucc h@@2 k@@1) ($IsAlloc T@@2 v@@0 t@@1 h@@2))
)))
(assert (forall ((_module.Dt$A@@2 T@U) ) (!  (and (= (Tag (Tclass._module.Dt _module.Dt$A@@2)) Tagclass._module.Dt) (= (TagFamily (Tclass._module.Dt _module.Dt$A@@2)) tytagFamily$Dt))
 :pattern ( (Tclass._module.Dt _module.Dt$A@@2))
)))
(assert (forall ((d@@5 T@U) ($h@@0 T@U) ) (!  (=> (and ($IsGoodHeap $h@@0) (and (_module.Dt.Bucket_q d@@5) (exists ((_module.Dt$A@@3 T@U) ) (! ($IsAlloc DatatypeTypeType d@@5 (Tclass._module.Dt _module.Dt$A@@3) $h@@0)
 :pattern ( ($IsAlloc DatatypeTypeType d@@5 (Tclass._module.Dt _module.Dt$A@@3) $h@@0))
)))) ($IsAlloc realType (real_2_U (_module.Dt.diameter d@@5)) TReal $h@@0))
 :pattern ( ($IsAlloc realType (real_2_U (_module.Dt.diameter d@@5)) TReal $h@@0))
)))
(assert (forall ((d@@6 T@U) ($h@@1 T@U) ) (!  (=> (and ($IsGoodHeap $h@@1) (and (_module.Dt.Business_q d@@6) (exists ((_module.Dt$A@@4 T@U) ) (! ($IsAlloc DatatypeTypeType d@@6 (Tclass._module.Dt _module.Dt$A@@4) $h@@1)
 :pattern ( ($IsAlloc DatatypeTypeType d@@6 (Tclass._module.Dt _module.Dt$A@@4) $h@@1))
)))) ($IsAlloc boolType (bool_2_U (_module.Dt.trendy d@@6)) TBool $h@@1))
 :pattern ( ($IsAlloc boolType (bool_2_U (_module.Dt.trendy d@@6)) TBool $h@@1))
)))
(assert (forall ((_module.Dt$A@@5 T@U) (|a#6#0#0| Real) ($h@@2 T@U) ) (!  (=> ($IsGoodHeap $h@@2) (= ($IsAlloc DatatypeTypeType (|#_module.Dt.Bucket| |a#6#0#0|) (Tclass._module.Dt _module.Dt$A@@5) $h@@2) ($IsAlloc realType (real_2_U |a#6#0#0|) TReal $h@@2)))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_module.Dt.Bucket| |a#6#0#0|) (Tclass._module.Dt _module.Dt$A@@5) $h@@2))
)))
(assert (forall ((|a#13#0#0| Bool) (|a#13#1#0| T@U) ) (! (= (_module.Dt.trendy (|#_module.Dt.Business| |a#13#0#0| |a#13#1#0|)) |a#13#0#0|)
 :pattern ( (|#_module.Dt.Business| |a#13#0#0| |a#13#1#0|))
)))
(assert (forall ((a@@2 T@U) (b@@2 T@U) (c T@U) ) (!  (=> (or (not (= a@@2 c)) (not true)) (=> (and ($HeapSucc a@@2 b@@2) ($HeapSucc b@@2 c)) ($HeapSucc a@@2 c)))
 :pattern ( ($HeapSucc a@@2 b@@2) ($HeapSucc b@@2 c))
)))
(assert (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 TReal) (and (= ($Box realType ($Unbox realType bx@@0)) bx@@0) ($Is realType ($Unbox realType bx@@0) TReal)))
 :pattern ( ($IsBox bx@@0 TReal))
)))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 TBool) (and (= ($Box boolType ($Unbox boolType bx@@1)) bx@@1) ($Is boolType ($Unbox boolType bx@@1) TBool)))
 :pattern ( ($IsBox bx@@1 TBool))
)))
(assert (forall ((v@@1 T@U) (t@@2 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@1) t@@2) ($Is T@@3 v@@1 t@@2))
 :pattern ( ($IsBox ($Box T@@3 v@@1) t@@2))
)))
(assert (forall ((a@@3 T@U) (b@@3 T@U) ) (!  (=> (and (_module.Dt.Blue_q a@@3) (_module.Dt.Blue_q b@@3)) (|_module.Dt#Equal| a@@3 b@@3))
 :pattern ( (|_module.Dt#Equal| a@@3 b@@3) (_module.Dt.Blue_q a@@3))
 :pattern ( (|_module.Dt#Equal| a@@3 b@@3) (_module.Dt.Blue_q b@@3))
)))
(assert (forall ((|a#9#0#0| Bool) (|a#9#1#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Dt.Business| |a#9#0#0| |a#9#1#0|)) |##_module.Dt.Business|)
 :pattern ( (|#_module.Dt.Business| |a#9#0#0| |a#9#1#0|))
)))
(assert (forall ((|a#14#0#0| Bool) (|a#14#1#0| T@U) ) (! (= (_module.Dt.a (|#_module.Dt.Business| |a#14#0#0| |a#14#1#0|)) |a#14#1#0|)
 :pattern ( (|#_module.Dt.Business| |a#14#0#0| |a#14#1#0|))
)))
(assert (forall ((_module.Dt$A@@6 T@U) ) (! (= (Tclass._module.Dt_0 (Tclass._module.Dt _module.Dt$A@@6)) _module.Dt$A@@6)
 :pattern ( (Tclass._module.Dt _module.Dt$A@@6))
)))
(assert (forall ((|a#4#0#0| Real) ) (! (= (DatatypeCtorId (|#_module.Dt.Bucket| |a#4#0#0|)) |##_module.Dt.Bucket|)
 :pattern ( (|#_module.Dt.Bucket| |a#4#0#0|))
)))
(assert (forall ((|a#8#0#0| Real) ) (! (= (_module.Dt.diameter (|#_module.Dt.Bucket| |a#8#0#0|)) |a#8#0#0|)
 :pattern ( (|#_module.Dt.Bucket| |a#8#0#0|))
)))
(assert (forall ((x@@6 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@6)) x@@6)
 :pattern ( ($Box T@@4 x@@6))
)))
(assert (forall ((d@@7 T@U) ) (!  (=> (|$IsA#_module.Dt| d@@7) (or (or (_module.Dt.Blue_q d@@7) (_module.Dt.Bucket_q d@@7)) (_module.Dt.Business_q d@@7)))
 :pattern ( (|$IsA#_module.Dt| d@@7))
)))
(assert (forall ((_module.Dt$A@@7 T@U) (|a#6#0#0@@0| Real) ) (! (= ($Is DatatypeTypeType (|#_module.Dt.Bucket| |a#6#0#0@@0|) (Tclass._module.Dt _module.Dt$A@@7)) ($Is realType (real_2_U |a#6#0#0@@0|) TReal))
 :pattern ( ($Is DatatypeTypeType (|#_module.Dt.Bucket| |a#6#0#0@@0|) (Tclass._module.Dt _module.Dt$A@@7)))
)))
(assert (forall ((|a#15#0#0| Bool) (|a#15#1#0| T@U) ) (! (< (BoxRank |a#15#1#0|) (DtRank (|#_module.Dt.Business| |a#15#0#0| |a#15#1#0|)))
 :pattern ( (|#_module.Dt.Business| |a#15#0#0| |a#15#1#0|))
)))
(assert (forall ((_module.Dt$A@@8 T@U) (d@@8 T@U) ) (!  (=> ($Is DatatypeTypeType d@@8 (Tclass._module.Dt _module.Dt$A@@8)) (or (or (_module.Dt.Blue_q d@@8) (_module.Dt.Bucket_q d@@8)) (_module.Dt.Business_q d@@8)))
 :pattern ( (_module.Dt.Business_q d@@8) ($Is DatatypeTypeType d@@8 (Tclass._module.Dt _module.Dt$A@@8)))
 :pattern ( (_module.Dt.Bucket_q d@@8) ($Is DatatypeTypeType d@@8 (Tclass._module.Dt _module.Dt$A@@8)))
 :pattern ( (_module.Dt.Blue_q d@@8) ($Is DatatypeTypeType d@@8 (Tclass._module.Dt _module.Dt$A@@8)))
)))
(assert (forall ((d@@9 T@U) (_module.Dt$A@@9 T@U) ($h@@3 T@U) ) (!  (=> (and ($IsGoodHeap $h@@3) (and (_module.Dt.Business_q d@@9) ($IsAlloc DatatypeTypeType d@@9 (Tclass._module.Dt _module.Dt$A@@9) $h@@3))) ($IsAllocBox (_module.Dt.a d@@9) _module.Dt$A@@9 $h@@3))
 :pattern ( ($IsAllocBox (_module.Dt.a d@@9) _module.Dt$A@@9 $h@@3))
)))
(assert  (and (forall ((t0@@0 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 t2 (MapType1Store t0@@0 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((d@@10 T@U) ) (! (= (BoxRank ($Box DatatypeTypeType d@@10)) (DtRank d@@10))
 :pattern ( (BoxRank ($Box DatatypeTypeType d@@10)))
)))
(assert (forall ((_module.Dt$A@@10 T@U) (bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 (Tclass._module.Dt _module.Dt$A@@10)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@2)) bx@@2) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@2) (Tclass._module.Dt _module.Dt$A@@10))))
 :pattern ( ($IsBox bx@@2 (Tclass._module.Dt _module.Dt$A@@10)))
)))
(assert (= |#_module.Dt.Blue| (Lit DatatypeTypeType |#_module.Dt.Blue|)))
(assert (forall ((_module.Dt$A@@11 T@U) (|a#11#0#0@@0| Bool) (|a#11#1#0@@0| T@U) ($h@@4 T@U) ) (!  (=> ($IsGoodHeap $h@@4) (= ($IsAlloc DatatypeTypeType (|#_module.Dt.Business| |a#11#0#0@@0| |a#11#1#0@@0|) (Tclass._module.Dt _module.Dt$A@@11) $h@@4)  (and ($IsAlloc boolType (bool_2_U |a#11#0#0@@0|) TBool $h@@4) ($IsAllocBox |a#11#1#0@@0| _module.Dt$A@@11 $h@@4))))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_module.Dt.Business| |a#11#0#0@@0| |a#11#1#0@@0|) (Tclass._module.Dt _module.Dt$A@@11) $h@@4))
)))
(assert (forall ((|a#12#0#0| T@U) (|a#12#1#0| T@U) ) (! (= (|#_module.Dt.Business| (U_2_bool (Lit boolType |a#12#0#0|)) (Lit BoxType |a#12#1#0|)) (Lit DatatypeTypeType (|#_module.Dt.Business| (U_2_bool |a#12#0#0|) |a#12#1#0|)))
 :pattern ( (|#_module.Dt.Business| (U_2_bool (Lit boolType |a#12#0#0|)) (Lit BoxType |a#12#1#0|)))
)))
(assert (forall ((x@@7 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@7))) (Lit BoxType ($Box intType (int_2_U x@@7))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@7))))
)))
(assert (forall ((x@@8 Real) ) (! (= ($Box realType (real_2_U (LitReal x@@8))) (Lit BoxType ($Box realType (real_2_U x@@8))))
 :pattern ( ($Box realType (real_2_U (LitReal x@@8))))
)))
(assert (forall ((|a#7#0#0| Real) ) (! (= (|#_module.Dt.Bucket| (LitReal |a#7#0#0|)) (Lit DatatypeTypeType (|#_module.Dt.Bucket| |a#7#0#0|)))
 :pattern ( (|#_module.Dt.Bucket| (LitReal |a#7#0#0|)))
)))
(assert (forall ((x@@9 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@9)) (Lit BoxType ($Box T@@5 x@@9)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@9)))
)))
(assert (forall ((h@@3 T@U) (v@@2 T@U) ) (! ($IsAlloc realType v@@2 TReal h@@3)
 :pattern ( ($IsAlloc realType v@@2 TReal h@@3))
)))
(assert (forall ((h@@4 T@U) (v@@3 T@U) ) (! ($IsAlloc boolType v@@3 TBool h@@4)
 :pattern ( ($IsAlloc boolType v@@3 TBool h@@4))
)))
(assert (forall ((v@@4 T@U) ) (! ($Is realType v@@4 TReal)
 :pattern ( ($Is realType v@@4 TReal))
)))
(assert (forall ((v@@5 T@U) ) (! ($Is boolType v@@5 TBool)
 :pattern ( ($Is boolType v@@5 TBool))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun this () T@U)
(declare-fun |_mcc#1#2_0@0| () Bool)
(declare-fun |_mcc#2#2_0@0| () T@U)
(declare-fun _module.Dt$A@@12 () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun |a#2_0@0| () T@U)
(declare-fun |let#2_0#0#0| () T@U)
(declare-fun |let#2_1#0#0| () Bool)
(declare-fun |t#2_0@0| () Bool)
(declare-fun |let#2_2#0#0| () T@U)
(declare-fun |dt_update_tmp#1#Z#2_0@0| () T@U)
(declare-fun |let#2_3#0#0| () Bool)
(declare-fun |dt_update#trendy#0#Z#2_0@0| () Bool)
(declare-fun |_mcc#0#3_0@0| () Real)
(declare-fun |let#3_0#0#0| () Real)
(declare-fun |dm#3_0@0| () Real)
(declare-fun |let#3_1#0#0| () T@U)
(declare-fun |dt_update_tmp#0#Z#3_0@0| () T@U)
(declare-fun |y#0@3| () Int)
(declare-fun |x#0| () Int)
(declare-fun |x##0@0| () Int)
(declare-fun $Heap@0 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |call4formal@z#0@0| () Int)
(declare-fun null () T@U)
(declare-fun $Heap () T@U)
(declare-fun |y#0@2| () Int)
(declare-fun |y#0@1| () Int)
(declare-fun |x##1@0| () Int)
(declare-fun |call3formal@z#0@0| () Int)
(declare-fun |y#0@0| () Int)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun |d#0| () T@U)
(declare-fun $FunctionContextHeight () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 16) (let ((anon11_Else_correct true))
(let ((anon11_Then_correct  (=> (= this (|#_module.Dt.Business| |_mcc#1#2_0@0| |_mcc#2#2_0@0|)) (=> (and ($IsBox |_mcc#2#2_0@0| _module.Dt$A@@12) ($IsAllocBox |_mcc#2#2_0@0| _module.Dt$A@@12 $Heap@1)) (=> (and (and (and ($IsBox |a#2_0@0| _module.Dt$A@@12) ($IsAllocBox |a#2_0@0| _module.Dt$A@@12 $Heap@1)) (and (= |let#2_0#0#0| |_mcc#2#2_0@0|) ($IsBox |let#2_0#0#0| _module.Dt$A@@12))) (and (and (= |a#2_0@0| |let#2_0#0#0|) (= |let#2_1#0#0| |_mcc#1#2_0@0|)) (and ($Is boolType (bool_2_U |let#2_1#0#0|) TBool) (= |t#2_0@0| |let#2_1#0#0|)))) (and (=> (= (ControlFlow 0 7) (- 0 8)) (_module.Dt.Business_q this)) (=> (_module.Dt.Business_q this) (=> (= |let#2_2#0#0| this) (=> (and ($Is DatatypeTypeType |let#2_2#0#0| (Tclass._module.Dt _module.Dt$A@@12)) (= |dt_update_tmp#1#Z#2_0@0| |let#2_2#0#0|)) (=> (and (and (= |let#2_3#0#0|  (not |t#2_0@0|)) ($Is boolType (bool_2_U |let#2_3#0#0|) TBool)) (and (= |dt_update#trendy#0#Z#2_0@0| |let#2_3#0#0|) (= (ControlFlow 0 7) (- 0 6)))) (_module.Dt.Business_q |dt_update_tmp#1#Z#2_0@0|)))))))))))
(let ((anon10_Else_correct  (=> (or (not (= this (|#_module.Dt.Bucket| |_mcc#0#3_0@0|))) (not true)) (and (=> (= (ControlFlow 0 10) 7) anon11_Then_correct) (=> (= (ControlFlow 0 10) 9) anon11_Else_correct)))))
(let ((anon10_Then_correct  (=> (and (and (= this (|#_module.Dt.Bucket| |_mcc#0#3_0@0|)) (= |let#3_0#0#0| |_mcc#0#3_0@0|)) (and ($Is realType (real_2_U |let#3_0#0#0|) TReal) (= |dm#3_0@0| |let#3_0#0#0|))) (and (=> (= (ControlFlow 0 4) (- 0 5)) (_module.Dt.Bucket_q this)) (=> (_module.Dt.Bucket_q this) (=> (and (and (= |let#3_1#0#0| this) ($Is DatatypeTypeType |let#3_1#0#0| (Tclass._module.Dt _module.Dt$A@@12))) (and (= |dt_update_tmp#0#Z#3_0@0| |let#3_1#0#0|) (= (ControlFlow 0 4) (- 0 3)))) (_module.Dt.Bucket_q this)))))))
(let ((anon9_Else_correct  (=> (or (not (= this |#_module.Dt.Blue|)) (not true)) (and (=> (= (ControlFlow 0 11) 4) anon10_Then_correct) (=> (= (ControlFlow 0 11) 10) anon10_Else_correct)))))
(let ((anon9_Then_correct  (=> (and (= this |#_module.Dt.Blue|) (= (ControlFlow 0 2) (- 0 1))) (= |y#0@3| |x#0|))))
(let ((anon3_correct  (=> (= |x##0@0| (LitInt 3)) (=> (and (and (and (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (= |call4formal@z#0@0| (LitInt 0))) (and (forall (($o@@0 T@U) ) (!  (=> (and (or (not (= $o@@0 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@0) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@0) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@0)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@0))
)) ($HeapSucc $Heap $Heap@0))) (and (and (and (= |y#0@2| (+ |y#0@1| |call4formal@z#0@0|)) (= |x##1@0| (LitInt 3))) (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1))) (and (and (= |call3formal@z#0@0| (LitInt 0)) (forall (($o@@1 T@U) ) (!  (=> (and (or (not (= $o@@1 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@1) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@1) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@1)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@1))
))) (and ($HeapSucc $Heap@0 $Heap@1) (= |y#0@3| (+ |y#0@2| |call3formal@z#0@0|)))))) (and (=> (= (ControlFlow 0 12) 2) anon9_Then_correct) (=> (= (ControlFlow 0 12) 11) anon9_Else_correct))))))
(let ((anon8_Else_correct  (=> (and (and (not (|_module.Dt#Equal| this |#_module.Dt.Blue|)) (= |y#0@0| (LitInt 9))) (and (= |y#0@1| |y#0@0|) (= (ControlFlow 0 14) 12))) anon3_correct)))
(let ((anon8_Then_correct  (=> (|_module.Dt#Equal| this |#_module.Dt.Blue|) (=> (and (= |y#0@1| |x#0|) (= (ControlFlow 0 13) 12)) anon3_correct))))
(let ((anon0_correct  (=> (and (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (|$IsA#_module.Dt| this)) (and (=> (= (ControlFlow 0 15) 13) anon8_Then_correct) (=> (= (ControlFlow 0 15) 14) anon8_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (and ($Is DatatypeTypeType this (Tclass._module.Dt _module.Dt$A@@12)) ($IsAlloc DatatypeTypeType this (Tclass._module.Dt _module.Dt$A@@12) $Heap))) (and (and ($Is DatatypeTypeType |d#0| (Tclass._module.Dt _module.Dt$A@@12)) ($IsAlloc DatatypeTypeType |d#0| (Tclass._module.Dt _module.Dt$A@@12) $Heap)) (and (= 1 $FunctionContextHeight) (= (ControlFlow 0 16) 15)))) anon0_correct)))
PreconditionGeneratedEntry_correct))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
