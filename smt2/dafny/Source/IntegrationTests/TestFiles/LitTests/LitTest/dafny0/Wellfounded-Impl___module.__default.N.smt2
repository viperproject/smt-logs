(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagSet () T@U)
(declare-fun TagISet () T@U)
(declare-fun TagMultiSet () T@U)
(declare-fun TagSeq () T@U)
(declare-fun TagMap () T@U)
(declare-fun TagIMap () T@U)
(declare-fun alloc () T@U)
(declare-fun |##_System._tuple#2._#Make2| () T@U)
(declare-fun Tagclass._System.Tuple2 () T@U)
(declare-fun Tagclass._module.Dt () T@U)
(declare-fun |##_module.Dt.Int| () T@U)
(declare-fun |##_module.Dt.Set| () T@U)
(declare-fun |##_module.Dt.Seq| () T@U)
(declare-fun |##_module.Dt.Multiset| () T@U)
(declare-fun |##_module.Dt.Map0| () T@U)
(declare-fun |##_module.Dt.Map1| () T@U)
(declare-fun |##_module.Dt.IMap1| () T@U)
(declare-fun |tytagFamily$_tuple#2| () T@U)
(declare-fun tytagFamily$Dt () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun |#_module.Dt.Seq| (T@U) T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun DatatypeTypeType () T@T)
(declare-fun _System.Tuple2.___hMake2_q (T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun Tclass._System.Tuple2 (T@U T@U) T@U)
(declare-fun |Seq#Empty| () T@U)
(declare-fun MultiSetType () T@T)
(declare-fun TMultiSet (T@U) T@U)
(declare-fun $IsGoodMultiSet (T@U) Bool)
(declare-fun |#_System._tuple#2._#Make2| (T@U T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun refType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun TISet (T@U) T@U)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun |$IsA#_module.Dt| (T@U) Bool)
(declare-fun _module.Dt.Int_q (T@U) Bool)
(declare-fun _module.Dt.Set_q (T@U) Bool)
(declare-fun _module.Dt.Seq_q (T@U) Bool)
(declare-fun _module.Dt.Multiset_q (T@U) Bool)
(declare-fun _module.Dt.Map0_q (T@U) Bool)
(declare-fun _module.Dt.Map1_q (T@U) Bool)
(declare-fun _module.Dt.IMap1_q (T@U) Bool)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun SetType () T@T)
(declare-fun TSet (T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun |#_module.Dt.Int| (Int) T@U)
(declare-fun |#_module.Dt.Set| (T@U) T@U)
(declare-fun |#_module.Dt.Multiset| (T@U) T@U)
(declare-fun |#_module.Dt.Map0| (T@U) T@U)
(declare-fun |#_module.Dt.Map1| (T@U) T@U)
(declare-fun |#_module.Dt.IMap1| (T@U) T@U)
(declare-fun Tclass._module.Dt () T@U)
(declare-fun |IMap#Domain| (T@U) T@U)
(declare-fun |IMap#Elements| (T@U) T@U)
(declare-fun |IMap#Empty| () T@U)
(declare-fun |Map#Domain| (T@U) T@U)
(declare-fun |Map#Elements| (T@U) T@U)
(declare-fun |IMap#Values| (T@U) T@U)
(declare-fun |MultiSet#Multiplicity| (T@U T@U) Int)
(declare-fun MapType () T@T)
(declare-fun TMap (T@U T@U) T@U)
(declare-fun IMapType () T@T)
(declare-fun TIMap (T@U T@U) T@U)
(declare-fun SeqType () T@T)
(declare-fun TSeq (T@U) T@U)
(declare-fun |IMap#Items| (T@U) T@U)
(declare-fun _System.Tuple2._0 (T@U) T@U)
(declare-fun _System.Tuple2._1 (T@U) T@U)
(declare-fun |ISet#Empty| () T@U)
(declare-fun |MultiSet#Card| (T@U) Int)
(declare-fun |MultiSet#Empty| () T@U)
(declare-fun Inv0_TMap (T@U) T@U)
(declare-fun Inv1_TMap (T@U) T@U)
(declare-fun Inv0_TIMap (T@U) T@U)
(declare-fun Inv1_TIMap (T@U) T@U)
(declare-fun Tclass._System.Tuple2_0 (T@U) T@U)
(declare-fun Tclass._System.Tuple2_1 (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun Inv0_TISet (T@U) T@U)
(declare-fun Inv0_TMultiSet (T@U) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun _module.Dt._h0 (T@U) Int)
(declare-fun _module.Dt._h1 (T@U) T@U)
(declare-fun _module.Dt._h2 (T@U) T@U)
(declare-fun _module.Dt._h3 (T@U) T@U)
(declare-fun _module.Dt._h4 (T@U) T@U)
(declare-fun _module.Dt._h5 (T@U) T@U)
(declare-fun _module.Dt._h6 (T@U) T@U)
(declare-fun BoxRank (T@U) Int)
(declare-fun |Map#Empty| () T@U)
(declare-fun |Seq#Rank| (T@U) Int)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun |Map#Values| (T@U) T@U)
(declare-fun |Map#Items| (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt TagSet TagISet TagMultiSet TagSeq TagMap TagIMap alloc |##_System._tuple#2._#Make2| Tagclass._System.Tuple2 Tagclass._module.Dt |##_module.Dt.Int| |##_module.Dt.Set| |##_module.Dt.Seq| |##_module.Dt.Multiset| |##_module.Dt.Map0| |##_module.Dt.Map1| |##_module.Dt.IMap1| |tytagFamily$_tuple#2| tytagFamily$Dt)
)
(assert (= (Tag TInt) TagInt))
(assert (= (Ctor DatatypeTypeType) 3))
(assert (forall ((|a#16#0#0| T@U) (i Int) ) (!  (=> (and (<= 0 i) (< i (|Seq#Length| |a#16#0#0|))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#16#0#0| i))) (DtRank (|#_module.Dt.Seq| |a#16#0#0|))))
 :pattern ( (|Seq#Index| |a#16#0#0| i) (|#_module.Dt.Seq| |a#16#0#0|))
)))
(assert (forall ((|_System._tuple#2$T0| T@U) (|_System._tuple#2$T1| T@U) (d T@U) ) (!  (=> ($Is DatatypeTypeType d (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)) (_System.Tuple2.___hMake2_q d))
 :pattern ( (_System.Tuple2.___hMake2_q d) ($Is DatatypeTypeType d (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)))
)))
(assert (= (|Seq#Length| |Seq#Empty|) 0))
(assert (= (Ctor MultiSetType) 4))
(assert (forall ((v T@U) (t0 T@U) ) (!  (=> ($Is MultiSetType v (TMultiSet t0)) ($IsGoodMultiSet v))
 :pattern ( ($Is MultiSetType v (TMultiSet t0)))
)))
(assert (forall ((|_System._tuple#2$T0@@0| T@U) (|_System._tuple#2$T1@@0| T@U) (|a#2#0#0| T@U) (|a#2#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|))  (and ($IsBox |a#2#0#0| |_System._tuple#2$T0@@0|) ($IsBox |a#2#1#0| |_System._tuple#2$T1@@0|)))
 :pattern ( ($Is DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|)))
)))
(assert  (and (and (and (and (and (and (and (forall ((t0@@0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0@@0 t1 (MapType0Store t0@@0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 5)) (= (Ctor BoxType) 6)) (= (Ctor refType) 7)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 8))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((v@@0 T@U) (t0@@1 T@U) ) (! (= ($Is (MapType0Type BoxType boolType) v@@0 (TISet t0@@1)) (forall ((bx T@U) ) (!  (=> (U_2_bool (MapType0Select BoxType boolType v@@0 bx)) ($IsBox bx t0@@1))
 :pattern ( (MapType0Select BoxType boolType v@@0 bx))
)))
 :pattern ( ($Is (MapType0Type BoxType boolType) v@@0 (TISet t0@@1)))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((|_System._tuple#2$T0@@1| T@U) (|_System._tuple#2$T1@@1| T@U) (|a#2#0#0@@0| T@U) (|a#2#1#0@@0| T@U) ($h T@U) ) (!  (=> ($IsGoodHeap $h) (= ($IsAlloc DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0@@0| |a#2#1#0@@0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|) $h)  (and ($IsAllocBox |a#2#0#0@@0| |_System._tuple#2$T0@@1| $h) ($IsAllocBox |a#2#1#0@@0| |_System._tuple#2$T1@@1| $h))))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0@@0| |a#2#1#0@@0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|) $h))
)))
(assert (forall ((d@@0 T@U) ) (!  (=> (|$IsA#_module.Dt| d@@0) (or (or (or (or (or (or (_module.Dt.Int_q d@@0) (_module.Dt.Set_q d@@0)) (_module.Dt.Seq_q d@@0)) (_module.Dt.Multiset_q d@@0)) (_module.Dt.Map0_q d@@0)) (_module.Dt.Map1_q d@@0)) (_module.Dt.IMap1_q d@@0)))
 :pattern ( (|$IsA#_module.Dt| d@@0))
)))
(assert (forall ((d@@1 T@U) ) (! (= (_System.Tuple2.___hMake2_q d@@1) (= (DatatypeCtorId d@@1) |##_System._tuple#2._#Make2|))
 :pattern ( (_System.Tuple2.___hMake2_q d@@1))
)))
(assert (forall ((d@@2 T@U) ) (! (= (_module.Dt.Int_q d@@2) (= (DatatypeCtorId d@@2) |##_module.Dt.Int|))
 :pattern ( (_module.Dt.Int_q d@@2))
)))
(assert (forall ((d@@3 T@U) ) (! (= (_module.Dt.Set_q d@@3) (= (DatatypeCtorId d@@3) |##_module.Dt.Set|))
 :pattern ( (_module.Dt.Set_q d@@3))
)))
(assert (forall ((d@@4 T@U) ) (! (= (_module.Dt.Seq_q d@@4) (= (DatatypeCtorId d@@4) |##_module.Dt.Seq|))
 :pattern ( (_module.Dt.Seq_q d@@4))
)))
(assert (forall ((d@@5 T@U) ) (! (= (_module.Dt.Multiset_q d@@5) (= (DatatypeCtorId d@@5) |##_module.Dt.Multiset|))
 :pattern ( (_module.Dt.Multiset_q d@@5))
)))
(assert (forall ((d@@6 T@U) ) (! (= (_module.Dt.Map0_q d@@6) (= (DatatypeCtorId d@@6) |##_module.Dt.Map0|))
 :pattern ( (_module.Dt.Map0_q d@@6))
)))
(assert (forall ((d@@7 T@U) ) (! (= (_module.Dt.Map1_q d@@7) (= (DatatypeCtorId d@@7) |##_module.Dt.Map1|))
 :pattern ( (_module.Dt.Map1_q d@@7))
)))
(assert (forall ((d@@8 T@U) ) (! (= (_module.Dt.IMap1_q d@@8) (= (DatatypeCtorId d@@8) |##_module.Dt.IMap1|))
 :pattern ( (_module.Dt.IMap1_q d@@8))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((d@@9 T@U) ) (!  (=> (_System.Tuple2.___hMake2_q d@@9) (exists ((|a#1#0#0| T@U) (|a#1#1#0| T@U) ) (= d@@9 (|#_System._tuple#2._#Make2| |a#1#0#0| |a#1#1#0|))))
 :pattern ( (_System.Tuple2.___hMake2_q d@@9))
)))
(assert (= (Ctor SetType) 9))
(assert (forall ((v@@1 T@U) (t0@@2 T@U) ) (! (= ($Is SetType v@@1 (TSet t0@@2)) (forall ((bx@@0 T@U) ) (!  (=> (|Set#IsMember| v@@1 bx@@0) ($IsBox bx@@0 t0@@2))
 :pattern ( (|Set#IsMember| v@@1 bx@@0))
)))
 :pattern ( ($Is SetType v@@1 (TSet t0@@2)))
)))
(assert (forall ((d@@10 T@U) ) (!  (=> (_module.Dt.Int_q d@@10) (exists ((|a#1#0#0@@0| Int) ) (= d@@10 (|#_module.Dt.Int| |a#1#0#0@@0|))))
 :pattern ( (_module.Dt.Int_q d@@10))
)))
(assert (forall ((d@@11 T@U) ) (!  (=> (_module.Dt.Set_q d@@11) (exists ((|a#6#0#0| T@U) ) (= d@@11 (|#_module.Dt.Set| |a#6#0#0|))))
 :pattern ( (_module.Dt.Set_q d@@11))
)))
(assert (forall ((d@@12 T@U) ) (!  (=> (_module.Dt.Seq_q d@@12) (exists ((|a#12#0#0| T@U) ) (= d@@12 (|#_module.Dt.Seq| |a#12#0#0|))))
 :pattern ( (_module.Dt.Seq_q d@@12))
)))
(assert (forall ((d@@13 T@U) ) (!  (=> (_module.Dt.Multiset_q d@@13) (exists ((|a#19#0#0| T@U) ) (= d@@13 (|#_module.Dt.Multiset| |a#19#0#0|))))
 :pattern ( (_module.Dt.Multiset_q d@@13))
)))
(assert (forall ((d@@14 T@U) ) (!  (=> (_module.Dt.Map0_q d@@14) (exists ((|a#25#0#0| T@U) ) (= d@@14 (|#_module.Dt.Map0| |a#25#0#0|))))
 :pattern ( (_module.Dt.Map0_q d@@14))
)))
(assert (forall ((d@@15 T@U) ) (!  (=> (_module.Dt.Map1_q d@@15) (exists ((|a#32#0#0| T@U) ) (= d@@15 (|#_module.Dt.Map1| |a#32#0#0|))))
 :pattern ( (_module.Dt.Map1_q d@@15))
)))
(assert (forall ((d@@16 T@U) ) (!  (=> (_module.Dt.IMap1_q d@@16) (exists ((|a#39#0#0| T@U) ) (= d@@16 (|#_module.Dt.IMap1| |a#39#0#0|))))
 :pattern ( (_module.Dt.IMap1_q d@@16))
)))
(assert (forall ((d@@17 T@U) ) (!  (=> ($Is DatatypeTypeType d@@17 Tclass._module.Dt) (or (or (or (or (or (or (_module.Dt.Int_q d@@17) (_module.Dt.Set_q d@@17)) (_module.Dt.Seq_q d@@17)) (_module.Dt.Multiset_q d@@17)) (_module.Dt.Map0_q d@@17)) (_module.Dt.Map1_q d@@17)) (_module.Dt.IMap1_q d@@17)))
 :pattern ( (_module.Dt.IMap1_q d@@17) ($Is DatatypeTypeType d@@17 Tclass._module.Dt))
 :pattern ( (_module.Dt.Map1_q d@@17) ($Is DatatypeTypeType d@@17 Tclass._module.Dt))
 :pattern ( (_module.Dt.Map0_q d@@17) ($Is DatatypeTypeType d@@17 Tclass._module.Dt))
 :pattern ( (_module.Dt.Multiset_q d@@17) ($Is DatatypeTypeType d@@17 Tclass._module.Dt))
 :pattern ( (_module.Dt.Seq_q d@@17) ($Is DatatypeTypeType d@@17 Tclass._module.Dt))
 :pattern ( (_module.Dt.Set_q d@@17) ($Is DatatypeTypeType d@@17 Tclass._module.Dt))
 :pattern ( (_module.Dt.Int_q d@@17) ($Is DatatypeTypeType d@@17 Tclass._module.Dt))
)))
(assert (forall ((|a#44#0#0| T@U) (bx@@1 T@U) ) (!  (=> (U_2_bool (MapType0Select BoxType boolType (|IMap#Domain| |a#44#0#0|) bx@@1)) (< (DtRank ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|IMap#Elements| |a#44#0#0|) bx@@1))) (DtRank (|#_module.Dt.IMap1| |a#44#0#0|))))
 :pattern ( (MapType0Select BoxType boolType (|IMap#Domain| |a#44#0#0|) bx@@1) (|#_module.Dt.IMap1| |a#44#0#0|))
)))
(assert (forall ((v@@2 T@U) (t T@U) (h@@0 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@2) t h@@0) ($IsAlloc T@@1 v@@2 t h@@0))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@2) t h@@0))
)))
(assert (forall ((h@@1 T@U) (k@@0 T@U) (bx@@2 T@U) (t@@0 T@U) ) (!  (=> ($HeapSucc h@@1 k@@0) (=> ($IsAllocBox bx@@2 t@@0 h@@1) ($IsAllocBox bx@@2 t@@0 k@@0)))
 :pattern ( ($HeapSucc h@@1 k@@0) ($IsAllocBox bx@@2 t@@0 h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@1 T@U) (v@@3 T@U) (t@@1 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@2 k@@1) (=> ($IsAlloc T@@2 v@@3 t@@1 h@@2) ($IsAlloc T@@2 v@@3 t@@1 k@@1)))
 :pattern ( ($HeapSucc h@@2 k@@1) ($IsAlloc T@@2 v@@3 t@@1 h@@2))
)))
(assert (forall ((u T@U) ) (!  (not (U_2_bool (MapType0Select BoxType boolType (|IMap#Domain| |IMap#Empty|) u)))
 :pattern ( (MapType0Select BoxType boolType (|IMap#Domain| |IMap#Empty|) u))
)))
(assert (forall ((bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 Tclass._module.Dt) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@3)) bx@@3) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@3) Tclass._module.Dt)))
 :pattern ( ($IsBox bx@@3 Tclass._module.Dt))
)))
(assert (forall ((|a#30#0#0| T@U) (bx@@4 T@U) ) (!  (=> (|Set#IsMember| (|Map#Domain| |a#30#0#0|) bx@@4) (< (DtRank ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |a#30#0#0|) bx@@4))) (DtRank (|#_module.Dt.Map0| |a#30#0#0|))))
 :pattern ( (|Set#IsMember| (|Map#Domain| |a#30#0#0|) bx@@4) (|#_module.Dt.Map0| |a#30#0#0|))
)))
(assert (forall ((|a#37#0#0| T@U) (bx@@5 T@U) ) (!  (=> (|Set#IsMember| (|Map#Domain| |a#37#0#0|) bx@@5) (< (DtRank ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |a#37#0#0|) bx@@5))) (DtRank (|#_module.Dt.Map1| |a#37#0#0|))))
 :pattern ( (|Set#IsMember| (|Map#Domain| |a#37#0#0|) bx@@5) (|#_module.Dt.Map1| |a#37#0#0|))
)))
(assert (forall ((m@@1 T@U) ) (!  (or (= m@@1 |IMap#Empty|) (exists ((k@@2 T@U) ) (U_2_bool (MapType0Select BoxType boolType (|IMap#Domain| m@@1) k@@2))))
 :pattern ( (|IMap#Domain| m@@1))
)))
(assert (forall ((m@@2 T@U) ) (!  (or (= m@@2 |IMap#Empty|) (exists ((v@@4 T@U) ) (U_2_bool (MapType0Select BoxType boolType (|IMap#Values| m@@2) v@@4))))
 :pattern ( (|IMap#Values| m@@2))
)))
(assert (forall ((|a#23#0#0| T@U) (d@@18 T@U) ) (!  (=> (> (|MultiSet#Multiplicity| |a#23#0#0| ($Box DatatypeTypeType d@@18)) 0) (< (DtRank d@@18) (DtRank (|#_module.Dt.Multiset| |a#23#0#0|))))
 :pattern ( (|MultiSet#Multiplicity| |a#23#0#0| ($Box DatatypeTypeType d@@18)) (|#_module.Dt.Multiset| |a#23#0#0|))
)))
(assert (= (Ctor MapType) 10))
(assert (forall ((|a#33#0#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Dt.Map1| |a#33#0#0|) Tclass._module.Dt) ($Is MapType |a#33#0#0| (TMap TInt Tclass._module.Dt)))
 :pattern ( ($Is DatatypeTypeType (|#_module.Dt.Map1| |a#33#0#0|) Tclass._module.Dt))
)))
(assert (= (Ctor IMapType) 11))
(assert (forall ((|a#40#0#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Dt.IMap1| |a#40#0#0|) Tclass._module.Dt) ($Is IMapType |a#40#0#0| (TIMap TInt Tclass._module.Dt)))
 :pattern ( ($Is DatatypeTypeType (|#_module.Dt.IMap1| |a#40#0#0|) Tclass._module.Dt))
)))
(assert (forall ((|a#7#0#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Dt.Set| |a#7#0#0|) Tclass._module.Dt) ($Is SetType |a#7#0#0| (TSet Tclass._module.Dt)))
 :pattern ( ($Is DatatypeTypeType (|#_module.Dt.Set| |a#7#0#0|) Tclass._module.Dt))
)))
(assert (= (Ctor SeqType) 12))
(assert (forall ((|a#13#0#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Dt.Seq| |a#13#0#0|) Tclass._module.Dt) ($Is SeqType |a#13#0#0| (TSeq Tclass._module.Dt)))
 :pattern ( ($Is DatatypeTypeType (|#_module.Dt.Seq| |a#13#0#0|) Tclass._module.Dt))
)))
(assert (forall ((|a#20#0#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Dt.Multiset| |a#20#0#0|) Tclass._module.Dt) ($Is MultiSetType |a#20#0#0| (TMultiSet Tclass._module.Dt)))
 :pattern ( ($Is DatatypeTypeType (|#_module.Dt.Multiset| |a#20#0#0|) Tclass._module.Dt))
)))
(assert (forall ((v@@5 T@U) (t0@@3 T@U) (h@@3 T@U) ) (! (= ($IsAlloc (MapType0Type BoxType boolType) v@@5 (TISet t0@@3) h@@3) (forall ((bx@@6 T@U) ) (!  (=> (U_2_bool (MapType0Select BoxType boolType v@@5 bx@@6)) ($IsAllocBox bx@@6 t0@@3 h@@3))
 :pattern ( (MapType0Select BoxType boolType v@@5 bx@@6))
)))
 :pattern ( ($IsAlloc (MapType0Type BoxType boolType) v@@5 (TISet t0@@3) h@@3))
)))
(assert (forall ((m@@3 T@U) (item T@U) ) (! (= (U_2_bool (MapType0Select BoxType boolType (|IMap#Items| m@@3) item))  (and (U_2_bool (MapType0Select BoxType boolType (|IMap#Domain| m@@3) (_System.Tuple2._0 ($Unbox DatatypeTypeType item)))) (= (MapType0Select BoxType BoxType (|IMap#Elements| m@@3) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item)))))
 :pattern ( (MapType0Select BoxType boolType (|IMap#Items| m@@3) item))
)))
(assert (forall ((m@@4 T@U) (v@@6 T@U) ) (! (= (U_2_bool (MapType0Select BoxType boolType (|IMap#Values| m@@4) v@@6)) (exists ((u@@0 T@U) ) (!  (and (U_2_bool (MapType0Select BoxType boolType (|IMap#Domain| m@@4) u@@0)) (= v@@6 (MapType0Select BoxType BoxType (|IMap#Elements| m@@4) u@@0)))
 :pattern ( (MapType0Select BoxType boolType (|IMap#Domain| m@@4) u@@0))
 :pattern ( (MapType0Select BoxType BoxType (|IMap#Elements| m@@4) u@@0))
)))
 :pattern ( (MapType0Select BoxType boolType (|IMap#Values| m@@4) v@@6))
)))
(assert (forall ((v@@7 T@U) (t0@@4 T@U) (t1@@0 T@U) (h@@4 T@U) ) (! (= ($IsAlloc IMapType v@@7 (TIMap t0@@4 t1@@0) h@@4) (forall ((bx@@7 T@U) ) (!  (=> (U_2_bool (MapType0Select BoxType boolType (|IMap#Domain| v@@7) bx@@7)) (and ($IsAllocBox (MapType0Select BoxType BoxType (|IMap#Elements| v@@7) bx@@7) t1@@0 h@@4) ($IsAllocBox bx@@7 t0@@4 h@@4)))
 :pattern ( (MapType0Select BoxType BoxType (|IMap#Elements| v@@7) bx@@7))
 :pattern ( (MapType0Select BoxType boolType (|IMap#Domain| v@@7) bx@@7))
)))
 :pattern ( ($IsAlloc IMapType v@@7 (TIMap t0@@4 t1@@0) h@@4))
)))
(assert (forall ((v@@8 T@U) (t0@@5 T@U) ) (! (= ($Is MultiSetType v@@8 (TMultiSet t0@@5)) (forall ((bx@@8 T@U) ) (!  (=> (< 0 (|MultiSet#Multiplicity| v@@8 bx@@8)) ($IsBox bx@@8 t0@@5))
 :pattern ( (|MultiSet#Multiplicity| v@@8 bx@@8))
)))
 :pattern ( ($Is MultiSetType v@@8 (TMultiSet t0@@5)))
)))
(assert (forall ((a T@U) (b T@U) (c T@U) ) (!  (=> (or (not (= a c)) (not true)) (=> (and ($HeapSucc a b) ($HeapSucc b c)) ($HeapSucc a c)))
 :pattern ( ($HeapSucc a b) ($HeapSucc b c))
)))
(assert (forall ((m@@5 T@U) ) (! (= (= m@@5 |IMap#Empty|) (= (|IMap#Domain| m@@5) |ISet#Empty|))
 :pattern ( (|IMap#Domain| m@@5))
)))
(assert (forall ((m@@6 T@U) ) (! (= (= m@@6 |IMap#Empty|) (= (|IMap#Values| m@@6) |ISet#Empty|))
 :pattern ( (|IMap#Values| m@@6))
)))
(assert (forall ((m@@7 T@U) ) (! (= (= m@@7 |IMap#Empty|) (= (|IMap#Items| m@@7) |ISet#Empty|))
 :pattern ( (|IMap#Items| m@@7))
)))
(assert (forall ((m@@8 T@U) ) (!  (or (= m@@8 |IMap#Empty|) (exists ((k@@3 T@U) (v@@9 T@U) ) (U_2_bool (MapType0Select BoxType boolType (|IMap#Items| m@@8) ($Box DatatypeTypeType (|#_System._tuple#2._#Make2| k@@3 v@@9))))))
 :pattern ( (|IMap#Items| m@@8))
)))
(assert (forall ((bx@@9 T@U) ) (!  (=> ($IsBox bx@@9 TInt) (and (= ($Box intType ($Unbox intType bx@@9)) bx@@9) ($Is intType ($Unbox intType bx@@9) TInt)))
 :pattern ( ($IsBox bx@@9 TInt))
)))
(assert (forall ((v@@10 T@U) (t@@2 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@10) t@@2) ($Is T@@3 v@@10 t@@2))
 :pattern ( ($IsBox ($Box T@@3 v@@10) t@@2))
)))
(assert (forall ((ms T@U) ) (! (= ($IsGoodMultiSet ms) (forall ((bx@@10 T@U) ) (!  (and (<= 0 (|MultiSet#Multiplicity| ms bx@@10)) (<= (|MultiSet#Multiplicity| ms bx@@10) (|MultiSet#Card| ms)))
 :pattern ( (|MultiSet#Multiplicity| ms bx@@10))
)))
 :pattern ( ($IsGoodMultiSet ms))
)))
(assert (forall ((s T@U) ) (! (<= 0 (|MultiSet#Card| s))
 :pattern ( (|MultiSet#Card| s))
)))
(assert (forall ((s@@0 T@U) ) (! (<= 0 (|Seq#Length| s@@0))
 :pattern ( (|Seq#Length| s@@0))
)))
(assert (forall ((v@@11 T@U) (t0@@6 T@U) (h@@5 T@U) ) (! (= ($IsAlloc SetType v@@11 (TSet t0@@6) h@@5) (forall ((bx@@11 T@U) ) (!  (=> (|Set#IsMember| v@@11 bx@@11) ($IsAllocBox bx@@11 t0@@6 h@@5))
 :pattern ( (|Set#IsMember| v@@11 bx@@11))
)))
 :pattern ( ($IsAlloc SetType v@@11 (TSet t0@@6) h@@5))
)))
(assert (forall ((o@@0 T@U) ) (! (= (|MultiSet#Multiplicity| |MultiSet#Empty| o@@0) 0)
 :pattern ( (|MultiSet#Multiplicity| |MultiSet#Empty| o@@0))
)))
(assert (forall ((t@@3 T@U) (u@@1 T@U) ) (! (= (Inv0_TMap (TMap t@@3 u@@1)) t@@3)
 :pattern ( (TMap t@@3 u@@1))
)))
(assert (forall ((t@@4 T@U) (u@@2 T@U) ) (! (= (Inv1_TMap (TMap t@@4 u@@2)) u@@2)
 :pattern ( (TMap t@@4 u@@2))
)))
(assert (forall ((t@@5 T@U) (u@@3 T@U) ) (! (= (Tag (TMap t@@5 u@@3)) TagMap)
 :pattern ( (TMap t@@5 u@@3))
)))
(assert (forall ((t@@6 T@U) (u@@4 T@U) ) (! (= (Inv0_TIMap (TIMap t@@6 u@@4)) t@@6)
 :pattern ( (TIMap t@@6 u@@4))
)))
(assert (forall ((t@@7 T@U) (u@@5 T@U) ) (! (= (Inv1_TIMap (TIMap t@@7 u@@5)) u@@5)
 :pattern ( (TIMap t@@7 u@@5))
)))
(assert (forall ((t@@8 T@U) (u@@6 T@U) ) (! (= (Tag (TIMap t@@8 u@@6)) TagIMap)
 :pattern ( (TIMap t@@8 u@@6))
)))
(assert (forall ((|a#0#0#0| T@U) (|a#0#1#0| T@U) ) (! (= (DatatypeCtorId (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|)) |##_System._tuple#2._#Make2|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|))
)))
(assert (forall ((|_System._tuple#2$T0@@2| T@U) (|_System._tuple#2$T1@@2| T@U) ) (! (= (Tclass._System.Tuple2_0 (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|)) |_System._tuple#2$T0@@2|)
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|))
)))
(assert (forall ((|_System._tuple#2$T0@@3| T@U) (|_System._tuple#2$T1@@3| T@U) ) (! (= (Tclass._System.Tuple2_1 (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|)) |_System._tuple#2$T1@@3|)
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|))
)))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| T@U) ) (! (= (_System.Tuple2._0 (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|)) |a#4#0#0|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|))
)))
(assert (forall ((|a#6#0#0@@0| T@U) (|a#6#1#0| T@U) ) (! (= (_System.Tuple2._1 (|#_System._tuple#2._#Make2| |a#6#0#0@@0| |a#6#1#0|)) |a#6#1#0|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#6#0#0@@0| |a#6#1#0|))
)))
(assert (forall ((v@@12 T@U) (t0@@7 T@U) (h@@6 T@U) ) (! (= ($IsAlloc SeqType v@@12 (TSeq t0@@7) h@@6) (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| v@@12))) ($IsAllocBox (|Seq#Index| v@@12 i@@0) t0@@7 h@@6))
 :pattern ( (|Seq#Index| v@@12 i@@0))
)))
 :pattern ( ($IsAlloc SeqType v@@12 (TSeq t0@@7) h@@6))
)))
(assert (forall ((t@@9 T@U) ) (! (= (Inv0_TSet (TSet t@@9)) t@@9)
 :pattern ( (TSet t@@9))
)))
(assert (forall ((t@@10 T@U) ) (! (= (Tag (TSet t@@10)) TagSet)
 :pattern ( (TSet t@@10))
)))
(assert (forall ((t@@11 T@U) ) (! (= (Inv0_TISet (TISet t@@11)) t@@11)
 :pattern ( (TISet t@@11))
)))
(assert (forall ((t@@12 T@U) ) (! (= (Tag (TISet t@@12)) TagISet)
 :pattern ( (TISet t@@12))
)))
(assert (forall ((t@@13 T@U) ) (! (= (Inv0_TMultiSet (TMultiSet t@@13)) t@@13)
 :pattern ( (TMultiSet t@@13))
)))
(assert (forall ((t@@14 T@U) ) (! (= (Tag (TMultiSet t@@14)) TagMultiSet)
 :pattern ( (TMultiSet t@@14))
)))
(assert (forall ((t@@15 T@U) ) (! (= (Inv0_TSeq (TSeq t@@15)) t@@15)
 :pattern ( (TSeq t@@15))
)))
(assert (forall ((t@@16 T@U) ) (! (= (Tag (TSeq t@@16)) TagSeq)
 :pattern ( (TSeq t@@16))
)))
(assert (forall ((|a#0#0#0@@0| Int) ) (! (= (DatatypeCtorId (|#_module.Dt.Int| |a#0#0#0@@0|)) |##_module.Dt.Int|)
 :pattern ( (|#_module.Dt.Int| |a#0#0#0@@0|))
)))
(assert (forall ((|a#4#0#0@@0| Int) ) (! (= (_module.Dt._h0 (|#_module.Dt.Int| |a#4#0#0@@0|)) |a#4#0#0@@0|)
 :pattern ( (|#_module.Dt.Int| |a#4#0#0@@0|))
)))
(assert (forall ((|a#5#0#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Dt.Set| |a#5#0#0|)) |##_module.Dt.Set|)
 :pattern ( (|#_module.Dt.Set| |a#5#0#0|))
)))
(assert (forall ((|a#9#0#0| T@U) ) (! (= (_module.Dt._h1 (|#_module.Dt.Set| |a#9#0#0|)) |a#9#0#0|)
 :pattern ( (|#_module.Dt.Set| |a#9#0#0|))
)))
(assert (forall ((|a#11#0#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Dt.Seq| |a#11#0#0|)) |##_module.Dt.Seq|)
 :pattern ( (|#_module.Dt.Seq| |a#11#0#0|))
)))
(assert (forall ((|a#15#0#0| T@U) ) (! (= (_module.Dt._h2 (|#_module.Dt.Seq| |a#15#0#0|)) |a#15#0#0|)
 :pattern ( (|#_module.Dt.Seq| |a#15#0#0|))
)))
(assert (forall ((|a#18#0#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Dt.Multiset| |a#18#0#0|)) |##_module.Dt.Multiset|)
 :pattern ( (|#_module.Dt.Multiset| |a#18#0#0|))
)))
(assert (forall ((|a#22#0#0| T@U) ) (! (= (_module.Dt._h3 (|#_module.Dt.Multiset| |a#22#0#0|)) |a#22#0#0|)
 :pattern ( (|#_module.Dt.Multiset| |a#22#0#0|))
)))
(assert (forall ((|a#24#0#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Dt.Map0| |a#24#0#0|)) |##_module.Dt.Map0|)
 :pattern ( (|#_module.Dt.Map0| |a#24#0#0|))
)))
(assert (forall ((|a#28#0#0| T@U) ) (! (= (_module.Dt._h4 (|#_module.Dt.Map0| |a#28#0#0|)) |a#28#0#0|)
 :pattern ( (|#_module.Dt.Map0| |a#28#0#0|))
)))
(assert (forall ((|a#31#0#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Dt.Map1| |a#31#0#0|)) |##_module.Dt.Map1|)
 :pattern ( (|#_module.Dt.Map1| |a#31#0#0|))
)))
(assert (forall ((|a#35#0#0| T@U) ) (! (= (_module.Dt._h5 (|#_module.Dt.Map1| |a#35#0#0|)) |a#35#0#0|)
 :pattern ( (|#_module.Dt.Map1| |a#35#0#0|))
)))
(assert (forall ((|a#38#0#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Dt.IMap1| |a#38#0#0|)) |##_module.Dt.IMap1|)
 :pattern ( (|#_module.Dt.IMap1| |a#38#0#0|))
)))
(assert (forall ((|a#42#0#0| T@U) ) (! (= (_module.Dt._h6 (|#_module.Dt.IMap1| |a#42#0#0|)) |a#42#0#0|)
 :pattern ( (|#_module.Dt.IMap1| |a#42#0#0|))
)))
(assert (forall ((x@@5 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@5)) x@@5)
 :pattern ( ($Box T@@4 x@@5))
)))
(assert (forall ((v@@13 T@U) (t0@@8 T@U) (t1@@1 T@U) (h@@7 T@U) ) (! (= ($IsAlloc MapType v@@13 (TMap t0@@8 t1@@1) h@@7) (forall ((bx@@12 T@U) ) (!  (=> (|Set#IsMember| (|Map#Domain| v@@13) bx@@12) (and ($IsAllocBox (MapType0Select BoxType BoxType (|Map#Elements| v@@13) bx@@12) t1@@1 h@@7) ($IsAllocBox bx@@12 t0@@8 h@@7)))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| v@@13) bx@@12))
 :pattern ( (|Set#IsMember| (|Map#Domain| v@@13) bx@@12))
)))
 :pattern ( ($IsAlloc MapType v@@13 (TMap t0@@8 t1@@1) h@@7))
)))
(assert (forall ((v@@14 T@U) (t0@@9 T@U) (t1@@2 T@U) ) (! (= ($Is IMapType v@@14 (TIMap t0@@9 t1@@2)) (forall ((bx@@13 T@U) ) (!  (=> (U_2_bool (MapType0Select BoxType boolType (|IMap#Domain| v@@14) bx@@13)) (and ($IsBox (MapType0Select BoxType BoxType (|IMap#Elements| v@@14) bx@@13) t1@@2) ($IsBox bx@@13 t0@@9)))
 :pattern ( (MapType0Select BoxType BoxType (|IMap#Elements| v@@14) bx@@13))
 :pattern ( (MapType0Select BoxType boolType (|IMap#Domain| v@@14) bx@@13))
)))
 :pattern ( ($Is IMapType v@@14 (TIMap t0@@9 t1@@2)))
)))
(assert (forall ((|a#5#0#0@@0| T@U) (|a#5#1#0| T@U) ) (! (< (BoxRank |a#5#0#0@@0|) (DtRank (|#_System._tuple#2._#Make2| |a#5#0#0@@0| |a#5#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| |a#5#0#0@@0| |a#5#1#0|))
)))
(assert (forall ((|a#7#0#0@@0| T@U) (|a#7#1#0| T@U) ) (! (< (BoxRank |a#7#1#0|) (DtRank (|#_System._tuple#2._#Make2| |a#7#0#0@@0| |a#7#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| |a#7#0#0@@0| |a#7#1#0|))
)))
(assert (forall ((s@@1 T@U) ) (!  (and (= (= (|MultiSet#Card| s@@1) 0) (= s@@1 |MultiSet#Empty|)) (=> (or (not (= (|MultiSet#Card| s@@1) 0)) (not true)) (exists ((x@@6 T@U) ) (! (< 0 (|MultiSet#Multiplicity| s@@1 x@@6))
 :pattern ( (|MultiSet#Multiplicity| s@@1 x@@6))
))))
 :pattern ( (|MultiSet#Card| s@@1))
)))
(assert (forall ((u@@7 T@U) ) (!  (not (|Set#IsMember| (|Map#Domain| |Map#Empty|) u@@7))
 :pattern ( (|Set#IsMember| (|Map#Domain| |Map#Empty|) u@@7))
)))
(assert (forall ((|a#2#0#0@@1| Int) ) (! (= ($Is DatatypeTypeType (|#_module.Dt.Int| |a#2#0#0@@1|) Tclass._module.Dt) ($Is intType (int_2_U |a#2#0#0@@1|) TInt))
 :pattern ( ($Is DatatypeTypeType (|#_module.Dt.Int| |a#2#0#0@@1|) Tclass._module.Dt))
)))
(assert (forall ((bx@@14 T@U) (s@@2 T@U) (t@@17 T@U) ) (!  (=> ($IsBox bx@@14 (TMap s@@2 t@@17)) (and (= ($Box MapType ($Unbox MapType bx@@14)) bx@@14) ($Is MapType ($Unbox MapType bx@@14) (TMap s@@2 t@@17))))
 :pattern ( ($IsBox bx@@14 (TMap s@@2 t@@17)))
)))
(assert (forall ((bx@@15 T@U) (s@@3 T@U) (t@@18 T@U) ) (!  (=> ($IsBox bx@@15 (TIMap s@@3 t@@18)) (and (= ($Box IMapType ($Unbox IMapType bx@@15)) bx@@15) ($Is IMapType ($Unbox IMapType bx@@15) (TIMap s@@3 t@@18))))
 :pattern ( ($IsBox bx@@15 (TIMap s@@3 t@@18)))
)))
(assert (forall ((|_System._tuple#2$T0@@4| T@U) (|_System._tuple#2$T1@@4| T@U) (bx@@16 T@U) ) (!  (=> ($IsBox bx@@16 (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@16)) bx@@16) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@16) (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|))))
 :pattern ( ($IsBox bx@@16 (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|)))
)))
(assert (forall ((|a#17#0#0| T@U) ) (! (< (|Seq#Rank| |a#17#0#0|) (DtRank (|#_module.Dt.Seq| |a#17#0#0|)))
 :pattern ( (|#_module.Dt.Seq| |a#17#0#0|))
)))
(assert (forall ((o@@1 T@U) ) (!  (not (U_2_bool (MapType0Select BoxType boolType |ISet#Empty| o@@1)))
 :pattern ( (MapType0Select BoxType boolType |ISet#Empty| o@@1))
)))
(assert  (and (forall ((t0@@10 T@T) (t1@@3 T@T) (t2 T@T) (val@@1 T@U) (m@@9 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@10 t1@@3 t2 (MapType1Store t0@@10 t1@@3 t2 m@@9 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@10 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@10 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@10 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@11 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@11 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@11 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((|_System._tuple#2$T0@@5| T@U) (|_System._tuple#2$T1@@5| T@U) ) (!  (and (= (Tag (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|)) Tagclass._System.Tuple2) (= (TagFamily (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|)) |tytagFamily$_tuple#2|))
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|))
)))
(assert (forall ((d@@19 T@U) ($h@@0 T@U) ) (!  (=> (and ($IsGoodHeap $h@@0) (and (_module.Dt.Int_q d@@19) ($IsAlloc DatatypeTypeType d@@19 Tclass._module.Dt $h@@0))) ($IsAlloc intType (int_2_U (_module.Dt._h0 d@@19)) TInt $h@@0))
 :pattern ( ($IsAlloc intType (int_2_U (_module.Dt._h0 d@@19)) TInt $h@@0))
)))
(assert (forall ((|a#43#0#0| T@U) (d@@20 T@U) ) (!  (=> (U_2_bool (MapType0Select BoxType boolType (|IMap#Domain| |a#43#0#0|) ($Box DatatypeTypeType d@@20))) (< (DtRank d@@20) (DtRank (|#_module.Dt.IMap1| |a#43#0#0|))))
 :pattern ( (MapType0Select BoxType boolType (|IMap#Domain| |a#43#0#0|) ($Box DatatypeTypeType d@@20)) (|#_module.Dt.IMap1| |a#43#0#0|))
)))
(assert (forall ((m@@12 T@U) ) (!  (or (= m@@12 |Map#Empty|) (exists ((k@@4 T@U) ) (|Set#IsMember| (|Map#Domain| m@@12) k@@4)))
 :pattern ( (|Map#Domain| m@@12))
)))
(assert (forall ((m@@13 T@U) ) (!  (or (= m@@13 |Map#Empty|) (exists ((v@@15 T@U) ) (|Set#IsMember| (|Map#Values| m@@13) v@@15)))
 :pattern ( (|Map#Values| m@@13))
)))
(assert (forall ((m@@14 T@U) (item@@0 T@U) ) (! (= (|Set#IsMember| (|Map#Items| m@@14) item@@0)  (and (|Set#IsMember| (|Map#Domain| m@@14) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0))) (= (MapType0Select BoxType BoxType (|Map#Elements| m@@14) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item@@0)))))
 :pattern ( (|Set#IsMember| (|Map#Items| m@@14) item@@0))
)))
(assert (forall ((m@@15 T@U) (v@@16 T@U) ) (! (= (|Set#IsMember| (|Map#Values| m@@15) v@@16) (exists ((u@@8 T@U) ) (!  (and (|Set#IsMember| (|Map#Domain| m@@15) u@@8) (= v@@16 (MapType0Select BoxType BoxType (|Map#Elements| m@@15) u@@8)))
 :pattern ( (|Set#IsMember| (|Map#Domain| m@@15) u@@8))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| m@@15) u@@8))
)))
 :pattern ( (|Set#IsMember| (|Map#Values| m@@15) v@@16))
)))
(assert (forall ((d@@21 T@U) ) (! (= (BoxRank ($Box DatatypeTypeType d@@21)) (DtRank d@@21))
 :pattern ( (BoxRank ($Box DatatypeTypeType d@@21)))
)))
(assert (forall ((bx@@17 T@U) (t@@19 T@U) ) (!  (=> ($IsBox bx@@17 (TSet t@@19)) (and (= ($Box SetType ($Unbox SetType bx@@17)) bx@@17) ($Is SetType ($Unbox SetType bx@@17) (TSet t@@19))))
 :pattern ( ($IsBox bx@@17 (TSet t@@19)))
)))
(assert (forall ((bx@@18 T@U) (t@@20 T@U) ) (!  (=> ($IsBox bx@@18 (TISet t@@20)) (and (= ($Box (MapType0Type BoxType boolType) ($Unbox (MapType0Type BoxType boolType) bx@@18)) bx@@18) ($Is (MapType0Type BoxType boolType) ($Unbox (MapType0Type BoxType boolType) bx@@18) (TISet t@@20))))
 :pattern ( ($IsBox bx@@18 (TISet t@@20)))
)))
(assert (forall ((bx@@19 T@U) (t@@21 T@U) ) (!  (=> ($IsBox bx@@19 (TMultiSet t@@21)) (and (= ($Box MultiSetType ($Unbox MultiSetType bx@@19)) bx@@19) ($Is MultiSetType ($Unbox MultiSetType bx@@19) (TMultiSet t@@21))))
 :pattern ( ($IsBox bx@@19 (TMultiSet t@@21)))
)))
(assert (forall ((bx@@20 T@U) (t@@22 T@U) ) (!  (=> ($IsBox bx@@20 (TSeq t@@22)) (and (= ($Box SeqType ($Unbox SeqType bx@@20)) bx@@20) ($Is SeqType ($Unbox SeqType bx@@20) (TSeq t@@22))))
 :pattern ( ($IsBox bx@@20 (TSeq t@@22)))
)))
(assert (forall ((v@@17 T@U) (t0@@11 T@U) (t1@@4 T@U) ) (! (= ($Is MapType v@@17 (TMap t0@@11 t1@@4)) (forall ((bx@@21 T@U) ) (!  (=> (|Set#IsMember| (|Map#Domain| v@@17) bx@@21) (and ($IsBox (MapType0Select BoxType BoxType (|Map#Elements| v@@17) bx@@21) t1@@4) ($IsBox bx@@21 t0@@11)))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| v@@17) bx@@21))
 :pattern ( (|Set#IsMember| (|Map#Domain| v@@17) bx@@21))
)))
 :pattern ( ($Is MapType v@@17 (TMap t0@@11 t1@@4)))
)))
(assert (forall ((d@@22 T@U) ($h@@1 T@U) ) (!  (=> (and ($IsGoodHeap $h@@1) ($Is DatatypeTypeType d@@22 Tclass._module.Dt)) ($IsAlloc DatatypeTypeType d@@22 Tclass._module.Dt $h@@1))
 :pattern ( ($IsAlloc DatatypeTypeType d@@22 Tclass._module.Dt $h@@1))
)))
(assert (= (Tag Tclass._module.Dt) Tagclass._module.Dt))
(assert (= (TagFamily Tclass._module.Dt) tytagFamily$Dt))
(assert (forall ((|a#10#0#0| T@U) (d@@23 T@U) ) (!  (=> (|Set#IsMember| |a#10#0#0| ($Box DatatypeTypeType d@@23)) (< (DtRank d@@23) (DtRank (|#_module.Dt.Set| |a#10#0#0|))))
 :pattern ( (|Set#IsMember| |a#10#0#0| ($Box DatatypeTypeType d@@23)) (|#_module.Dt.Set| |a#10#0#0|))
)))
(assert (forall ((d@@24 T@U) (|_System._tuple#2$T0@@6| T@U) ($h@@2 T@U) ) (!  (=> (and ($IsGoodHeap $h@@2) (and (_System.Tuple2.___hMake2_q d@@24) (exists ((|_System._tuple#2$T1@@6| T@U) ) (! ($IsAlloc DatatypeTypeType d@@24 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@2)
 :pattern ( ($IsAlloc DatatypeTypeType d@@24 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@2))
)))) ($IsAllocBox (_System.Tuple2._0 d@@24) |_System._tuple#2$T0@@6| $h@@2))
 :pattern ( ($IsAllocBox (_System.Tuple2._0 d@@24) |_System._tuple#2$T0@@6| $h@@2))
)))
(assert (forall ((d@@25 T@U) (|_System._tuple#2$T1@@7| T@U) ($h@@3 T@U) ) (!  (=> (and ($IsGoodHeap $h@@3) (and (_System.Tuple2.___hMake2_q d@@25) (exists ((|_System._tuple#2$T0@@7| T@U) ) (! ($IsAlloc DatatypeTypeType d@@25 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|) $h@@3)
 :pattern ( ($IsAlloc DatatypeTypeType d@@25 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|) $h@@3))
)))) ($IsAllocBox (_System.Tuple2._1 d@@25) |_System._tuple#2$T1@@7| $h@@3))
 :pattern ( ($IsAllocBox (_System.Tuple2._1 d@@25) |_System._tuple#2$T1@@7| $h@@3))
)))
(assert (forall ((|a#3#0#0| T@U) (|a#3#1#0| T@U) ) (! (= (|#_System._tuple#2._#Make2| (Lit BoxType |a#3#0#0|) (Lit BoxType |a#3#1#0|)) (Lit DatatypeTypeType (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| (Lit BoxType |a#3#0#0|) (Lit BoxType |a#3#1#0|)))
)))
(assert (forall ((d@@26 T@U) ($h@@4 T@U) ) (!  (=> (and ($IsGoodHeap $h@@4) (and (_module.Dt.Map0_q d@@26) ($IsAlloc DatatypeTypeType d@@26 Tclass._module.Dt $h@@4))) ($IsAlloc MapType (_module.Dt._h4 d@@26) (TMap Tclass._module.Dt TInt) $h@@4))
 :pattern ( ($IsAlloc MapType (_module.Dt._h4 d@@26) (TMap Tclass._module.Dt TInt) $h@@4))
)))
(assert (forall ((x@@7 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@7))) (Lit BoxType ($Box intType (int_2_U x@@7))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@7))))
)))
(assert (forall ((|a#3#0#0@@0| Int) ) (! (= (|#_module.Dt.Int| (LitInt |a#3#0#0@@0|)) (Lit DatatypeTypeType (|#_module.Dt.Int| |a#3#0#0@@0|)))
 :pattern ( (|#_module.Dt.Int| (LitInt |a#3#0#0@@0|)))
)))
(assert (forall ((|a#8#0#0| T@U) ) (! (= (|#_module.Dt.Set| (Lit SetType |a#8#0#0|)) (Lit DatatypeTypeType (|#_module.Dt.Set| |a#8#0#0|)))
 :pattern ( (|#_module.Dt.Set| (Lit SetType |a#8#0#0|)))
)))
(assert (forall ((|a#14#0#0| T@U) ) (! (= (|#_module.Dt.Seq| (Lit SeqType |a#14#0#0|)) (Lit DatatypeTypeType (|#_module.Dt.Seq| |a#14#0#0|)))
 :pattern ( (|#_module.Dt.Seq| (Lit SeqType |a#14#0#0|)))
)))
(assert (forall ((|a#21#0#0| T@U) ) (! (= (|#_module.Dt.Multiset| (Lit MultiSetType |a#21#0#0|)) (Lit DatatypeTypeType (|#_module.Dt.Multiset| |a#21#0#0|)))
 :pattern ( (|#_module.Dt.Multiset| (Lit MultiSetType |a#21#0#0|)))
)))
(assert (forall ((|a#27#0#0| T@U) ) (! (= (|#_module.Dt.Map0| (Lit MapType |a#27#0#0|)) (Lit DatatypeTypeType (|#_module.Dt.Map0| |a#27#0#0|)))
 :pattern ( (|#_module.Dt.Map0| (Lit MapType |a#27#0#0|)))
)))
(assert (forall ((|a#34#0#0| T@U) ) (! (= (|#_module.Dt.Map1| (Lit MapType |a#34#0#0|)) (Lit DatatypeTypeType (|#_module.Dt.Map1| |a#34#0#0|)))
 :pattern ( (|#_module.Dt.Map1| (Lit MapType |a#34#0#0|)))
)))
(assert (forall ((|a#41#0#0| T@U) ) (! (= (|#_module.Dt.IMap1| (Lit IMapType |a#41#0#0|)) (Lit DatatypeTypeType (|#_module.Dt.IMap1| |a#41#0#0|)))
 :pattern ( (|#_module.Dt.IMap1| (Lit IMapType |a#41#0#0|)))
)))
(assert (forall ((x@@8 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@8)) (Lit BoxType ($Box T@@5 x@@8)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@8)))
)))
(assert (forall ((|a#29#0#0| T@U) (d@@27 T@U) ) (!  (=> (|Set#IsMember| (|Map#Domain| |a#29#0#0|) ($Box DatatypeTypeType d@@27)) (< (DtRank d@@27) (DtRank (|#_module.Dt.Map0| |a#29#0#0|))))
 :pattern ( (|Set#IsMember| (|Map#Domain| |a#29#0#0|) ($Box DatatypeTypeType d@@27)) (|#_module.Dt.Map0| |a#29#0#0|))
)))
(assert (forall ((|a#36#0#0| T@U) (d@@28 T@U) ) (!  (=> (|Set#IsMember| (|Map#Domain| |a#36#0#0|) ($Box DatatypeTypeType d@@28)) (< (DtRank d@@28) (DtRank (|#_module.Dt.Map1| |a#36#0#0|))))
 :pattern ( (|Set#IsMember| (|Map#Domain| |a#36#0#0|) ($Box DatatypeTypeType d@@28)) (|#_module.Dt.Map1| |a#36#0#0|))
)))
(assert (forall ((|a#26#0#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Dt.Map0| |a#26#0#0|) Tclass._module.Dt) ($Is MapType |a#26#0#0| (TMap Tclass._module.Dt TInt)))
 :pattern ( ($Is DatatypeTypeType (|#_module.Dt.Map0| |a#26#0#0|) Tclass._module.Dt))
)))
(assert (forall ((s@@4 T@U) ) (!  (=> (= (|Seq#Length| s@@4) 0) (= s@@4 |Seq#Empty|))
 :pattern ( (|Seq#Length| s@@4))
)))
(assert (forall ((d@@29 T@U) ($h@@5 T@U) ) (!  (=> (and ($IsGoodHeap $h@@5) (and (_module.Dt.Map1_q d@@29) ($IsAlloc DatatypeTypeType d@@29 Tclass._module.Dt $h@@5))) ($IsAlloc MapType (_module.Dt._h5 d@@29) (TMap TInt Tclass._module.Dt) $h@@5))
 :pattern ( ($IsAlloc MapType (_module.Dt._h5 d@@29) (TMap TInt Tclass._module.Dt) $h@@5))
)))
(assert (forall ((d@@30 T@U) ($h@@6 T@U) ) (!  (=> (and ($IsGoodHeap $h@@6) (and (_module.Dt.IMap1_q d@@30) ($IsAlloc DatatypeTypeType d@@30 Tclass._module.Dt $h@@6))) ($IsAlloc IMapType (_module.Dt._h6 d@@30) (TIMap TInt Tclass._module.Dt) $h@@6))
 :pattern ( ($IsAlloc IMapType (_module.Dt._h6 d@@30) (TIMap TInt Tclass._module.Dt) $h@@6))
)))
(assert (forall ((d@@31 T@U) ($h@@7 T@U) ) (!  (=> (and ($IsGoodHeap $h@@7) (and (_module.Dt.Set_q d@@31) ($IsAlloc DatatypeTypeType d@@31 Tclass._module.Dt $h@@7))) ($IsAlloc SetType (_module.Dt._h1 d@@31) (TSet Tclass._module.Dt) $h@@7))
 :pattern ( ($IsAlloc SetType (_module.Dt._h1 d@@31) (TSet Tclass._module.Dt) $h@@7))
)))
(assert (forall ((d@@32 T@U) ($h@@8 T@U) ) (!  (=> (and ($IsGoodHeap $h@@8) (and (_module.Dt.Seq_q d@@32) ($IsAlloc DatatypeTypeType d@@32 Tclass._module.Dt $h@@8))) ($IsAlloc SeqType (_module.Dt._h2 d@@32) (TSeq Tclass._module.Dt) $h@@8))
 :pattern ( ($IsAlloc SeqType (_module.Dt._h2 d@@32) (TSeq Tclass._module.Dt) $h@@8))
)))
(assert (forall ((d@@33 T@U) ($h@@9 T@U) ) (!  (=> (and ($IsGoodHeap $h@@9) (and (_module.Dt.Multiset_q d@@33) ($IsAlloc DatatypeTypeType d@@33 Tclass._module.Dt $h@@9))) ($IsAlloc MultiSetType (_module.Dt._h3 d@@33) (TMultiSet Tclass._module.Dt) $h@@9))
 :pattern ( ($IsAlloc MultiSetType (_module.Dt._h3 d@@33) (TMultiSet Tclass._module.Dt) $h@@9))
)))
(assert (forall ((v@@18 T@U) (t0@@12 T@U) (h@@8 T@U) ) (! (= ($IsAlloc MultiSetType v@@18 (TMultiSet t0@@12) h@@8) (forall ((bx@@22 T@U) ) (!  (=> (< 0 (|MultiSet#Multiplicity| v@@18 bx@@22)) ($IsAllocBox bx@@22 t0@@12 h@@8))
 :pattern ( (|MultiSet#Multiplicity| v@@18 bx@@22))
)))
 :pattern ( ($IsAlloc MultiSetType v@@18 (TMultiSet t0@@12) h@@8))
)))
(assert (forall ((h@@9 T@U) (v@@19 T@U) ) (! ($IsAlloc intType v@@19 TInt h@@9)
 :pattern ( ($IsAlloc intType v@@19 TInt h@@9))
)))
(assert (forall ((v@@20 T@U) (t0@@13 T@U) ) (! (= ($Is SeqType v@@20 (TSeq t0@@13)) (forall ((i@@1 Int) ) (!  (=> (and (<= 0 i@@1) (< i@@1 (|Seq#Length| v@@20))) ($IsBox (|Seq#Index| v@@20 i@@1) t0@@13))
 :pattern ( (|Seq#Index| v@@20 i@@1))
)))
 :pattern ( ($Is SeqType v@@20 (TSeq t0@@13)))
)))
(assert (forall ((m@@16 T@U) ) (!  (or (= m@@16 |Map#Empty|) (exists ((k@@5 T@U) (v@@21 T@U) ) (|Set#IsMember| (|Map#Items| m@@16) ($Box DatatypeTypeType (|#_System._tuple#2._#Make2| k@@5 v@@21)))))
 :pattern ( (|Map#Items| m@@16))
)))
(assert (forall ((s@@5 T@U) (i@@2 Int) ) (!  (=> (and (<= 0 i@@2) (< i@@2 (|Seq#Length| s@@5))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@5 i@@2))) (|Seq#Rank| s@@5)))
 :pattern ( (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@5 i@@2))))
)))
(assert (forall ((v@@22 T@U) (t0@@14 T@U) (t1@@5 T@U) ) (!  (=> ($Is MapType v@@22 (TMap t0@@14 t1@@5)) (and (and ($Is SetType (|Map#Domain| v@@22) (TSet t0@@14)) ($Is SetType (|Map#Values| v@@22) (TSet t1@@5))) ($Is SetType (|Map#Items| v@@22) (TSet (Tclass._System.Tuple2 t0@@14 t1@@5)))))
 :pattern ( ($Is MapType v@@22 (TMap t0@@14 t1@@5)))
)))
(assert (forall ((v@@23 T@U) (t0@@15 T@U) (t1@@6 T@U) ) (!  (=> ($Is IMapType v@@23 (TIMap t0@@15 t1@@6)) (and (and ($Is (MapType0Type BoxType boolType) (|IMap#Domain| v@@23) (TISet t0@@15)) ($Is (MapType0Type BoxType boolType) (|IMap#Values| v@@23) (TISet t1@@6))) ($Is (MapType0Type BoxType boolType) (|IMap#Items| v@@23) (TISet (Tclass._System.Tuple2 t0@@15 t1@@6)))))
 :pattern ( ($Is IMapType v@@23 (TIMap t0@@15 t1@@6)))
)))
(assert (forall ((v@@24 T@U) ) (! ($Is intType v@@24 TInt)
 :pattern ( ($Is intType v@@24 TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |j#0_0@0| () Int)
(declare-fun |s#0| () T@U)
(declare-fun |d##1_0@0| () T@U)
(declare-fun |eg$j#0@0| () Int)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $Heap () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |d'#0| () T@U)
(declare-fun $FunctionContextHeight () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 11) (let ((anon8_Else_correct true))
(let ((anon8_Then_correct  (=> (and (<= (LitInt 0) |j#0_0@0|) (< |j#0_0@0| (|Seq#Length| |s#0|))) (and (=> (= (ControlFlow 0 3) (- 0 4)) (and (<= 0 |j#0_0@0|) (< |j#0_0@0| (|Seq#Length| |s#0|)))) (=> (and (<= 0 |j#0_0@0|) (< |j#0_0@0| (|Seq#Length| |s#0|))) (=> (and (= |d##1_0@0| ($Unbox DatatypeTypeType (|Seq#Index| |s#0| |j#0_0@0|))) (= (ControlFlow 0 3) (- 0 2))) (< (DtRank |d##1_0@0|) (|Seq#Rank| |s#0|))))))))
(let ((anon3_correct  (and (=> (= (ControlFlow 0 6) 3) anon8_Then_correct) (=> (= (ControlFlow 0 6) 5) anon8_Else_correct))))
(let ((anon7_Else_correct  (=> (and (< |eg$j#0@0| (LitInt 0)) (= (ControlFlow 0 8) 6)) anon3_correct)))
(let ((anon7_Then_correct  (=> (and (<= (LitInt 0) |eg$j#0@0|) (= (ControlFlow 0 7) 6)) anon3_correct)))
(let ((anon6_Then_correct  (and (=> (= (ControlFlow 0 9) 7) anon7_Then_correct) (=> (= (ControlFlow 0 9) 8) anon7_Else_correct))))
(let ((anon6_Else_correct true))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (and (=> (= (ControlFlow 0 10) 9) anon6_Then_correct) (=> (= (ControlFlow 0 10) 1) anon6_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (and ($Is SeqType |s#0| (TSeq Tclass._module.Dt)) ($IsAlloc SeqType |s#0| (TSeq Tclass._module.Dt) $Heap))) (=> (and (and (and ($Is DatatypeTypeType |d'#0| Tclass._module.Dt) ($IsAlloc DatatypeTypeType |d'#0| Tclass._module.Dt $Heap)) (|$IsA#_module.Dt| |d'#0|)) (and (= 1 $FunctionContextHeight) (= (ControlFlow 0 11) 10))) anon0_correct))))
PreconditionGeneratedEntry_correct))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
