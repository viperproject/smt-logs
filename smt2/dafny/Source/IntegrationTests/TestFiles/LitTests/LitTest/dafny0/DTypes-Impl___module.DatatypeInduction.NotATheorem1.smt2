(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun alloc () T@U)
(declare-fun |##_module.Tree.Leaf| () T@U)
(declare-fun Tagclass._module.Tree () T@U)
(declare-fun |##_module.Tree.Branch| () T@U)
(declare-fun Tagclass._module.DatatypeInduction? () T@U)
(declare-fun Tagclass._module.DatatypeInduction () T@U)
(declare-fun tytagFamily$Tree () T@U)
(declare-fun tytagFamily$DatatypeInduction () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun |#_module.Tree.Branch| (T@U T@U) T@U)
(declare-fun Tclass._module.Tree (T@U) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun refType () T@T)
(declare-fun Tclass._module.DatatypeInduction (T@U) T@U)
(declare-fun Tclass._module.DatatypeInduction? (T@U) T@U)
(declare-fun null () T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun _module.Tree.Leaf_q (T@U) Bool)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun _module.Tree.Branch_q (T@U) Bool)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun |#_module.Tree.Leaf| (T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun Tag (T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun |$IsA#_module.Tree| (T@U) Bool)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.DatatypeInduction.LeafCount (T@U T@U T@U T@U T@U) Int)
(declare-fun $LS (T@U) T@U)
(declare-fun |_module.DatatypeInduction.LeafCount#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun _module.Tree._h3 (T@U) T@U)
(declare-fun _module.Tree._h2 (T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $AlwaysAllocated (T@U) Bool)
(declare-fun Tclass._module.Tree_0 (T@U) T@U)
(declare-fun _module.Tree._h1 (T@U) T@U)
(declare-fun Tclass._module.DatatypeInduction?_0 (T@U) T@U)
(declare-fun Tclass._module.DatatypeInduction_0 (T@U) T@U)
(declare-fun DtRank (T@U) Int)
(declare-fun BoxRank (T@U) Int)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct alloc |##_module.Tree.Leaf| Tagclass._module.Tree |##_module.Tree.Branch| Tagclass._module.DatatypeInduction? Tagclass._module.DatatypeInduction tytagFamily$Tree tytagFamily$DatatypeInduction)
)
(assert (= (Ctor DatatypeTypeType) 3))
(assert (forall ((_module.Tree$T T@U) (|a#17#0#0| T@U) (|a#17#1#0| T@U) ($h T@U) ) (!  (=> ($IsGoodHeap $h) (= ($IsAlloc DatatypeTypeType (|#_module.Tree.Branch| |a#17#0#0| |a#17#1#0|) (Tclass._module.Tree _module.Tree$T) $h)  (and ($IsAlloc DatatypeTypeType |a#17#0#0| (Tclass._module.Tree _module.Tree$T) $h) ($IsAlloc DatatypeTypeType |a#17#1#0| (Tclass._module.Tree _module.Tree$T) $h))))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_module.Tree.Branch| |a#17#0#0| |a#17#1#0|) (Tclass._module.Tree _module.Tree$T) $h))
)))
(assert (= (Ctor refType) 4))
(assert (forall ((_module.DatatypeInduction$T T@U) (|c#0| T@U) ($h@@0 T@U) ) (! (= ($IsAlloc refType |c#0| (Tclass._module.DatatypeInduction _module.DatatypeInduction$T) $h@@0) ($IsAlloc refType |c#0| (Tclass._module.DatatypeInduction? _module.DatatypeInduction$T) $h@@0))
 :pattern ( ($IsAlloc refType |c#0| (Tclass._module.DatatypeInduction _module.DatatypeInduction$T) $h@@0))
 :pattern ( ($IsAlloc refType |c#0| (Tclass._module.DatatypeInduction? _module.DatatypeInduction$T) $h@@0))
)))
(assert  (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 5)) (= (Ctor BoxType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((_module.DatatypeInduction$T@@0 T@U) ($o T@U) ($h@@1 T@U) ) (! (= ($IsAlloc refType $o (Tclass._module.DatatypeInduction? _module.DatatypeInduction$T@@0) $h@@1)  (or (= $o null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@1 $o) alloc)))))
 :pattern ( ($IsAlloc refType $o (Tclass._module.DatatypeInduction? _module.DatatypeInduction$T@@0) $h@@1))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((d T@U) ) (! (= (_module.Tree.Leaf_q d) (= (DatatypeCtorId d) |##_module.Tree.Leaf|))
 :pattern ( (_module.Tree.Leaf_q d))
)))
(assert (forall ((d@@0 T@U) ) (! (= (_module.Tree.Branch_q d@@0) (= (DatatypeCtorId d@@0) |##_module.Tree.Branch|))
 :pattern ( (_module.Tree.Branch_q d@@0))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((d@@1 T@U) ) (!  (=> (_module.Tree.Branch_q d@@1) (exists ((|a#16#0#0| T@U) (|a#16#1#0| T@U) ) (= d@@1 (|#_module.Tree.Branch| |a#16#0#0| |a#16#1#0|))))
 :pattern ( (_module.Tree.Branch_q d@@1))
)))
(assert (forall ((_module.Tree$T@@0 T@U) (|a#17#0#0@@0| T@U) (|a#17#1#0@@0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Tree.Branch| |a#17#0#0@@0| |a#17#1#0@@0|) (Tclass._module.Tree _module.Tree$T@@0))  (and ($Is DatatypeTypeType |a#17#0#0@@0| (Tclass._module.Tree _module.Tree$T@@0)) ($Is DatatypeTypeType |a#17#1#0@@0| (Tclass._module.Tree _module.Tree$T@@0))))
 :pattern ( ($Is DatatypeTypeType (|#_module.Tree.Branch| |a#17#0#0@@0| |a#17#1#0@@0|) (Tclass._module.Tree _module.Tree$T@@0)))
)))
(assert (forall ((d@@2 T@U) ) (!  (=> (_module.Tree.Leaf_q d@@2) (exists ((|a#10#0#0| T@U) ) (= d@@2 (|#_module.Tree.Leaf| |a#10#0#0|))))
 :pattern ( (_module.Tree.Leaf_q d@@2))
)))
(assert (forall ((_module.DatatypeInduction$T@@1 T@U) (|c#0@@0| T@U) ) (! (= ($Is refType |c#0@@0| (Tclass._module.DatatypeInduction _module.DatatypeInduction$T@@1))  (and ($Is refType |c#0@@0| (Tclass._module.DatatypeInduction? _module.DatatypeInduction$T@@1)) (or (not (= |c#0@@0| null)) (not true))))
 :pattern ( ($Is refType |c#0@@0| (Tclass._module.DatatypeInduction _module.DatatypeInduction$T@@1)))
 :pattern ( ($Is refType |c#0@@0| (Tclass._module.DatatypeInduction? _module.DatatypeInduction$T@@1)))
)))
(assert (forall ((v T@U) (t T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v) t h) ($IsAlloc T@@1 v t h))
 :pattern ( ($IsAllocBox ($Box T@@1 v) t h))
)))
(assert (forall ((_module.Tree$T@@1 T@U) ) (!  (and (= (Tag (Tclass._module.Tree _module.Tree$T@@1)) Tagclass._module.Tree) (= (TagFamily (Tclass._module.Tree _module.Tree$T@@1)) tytagFamily$Tree))
 :pattern ( (Tclass._module.Tree _module.Tree$T@@1))
)))
(assert (forall ((_module.DatatypeInduction$T@@2 T@U) ) (!  (and (= (Tag (Tclass._module.DatatypeInduction? _module.DatatypeInduction$T@@2)) Tagclass._module.DatatypeInduction?) (= (TagFamily (Tclass._module.DatatypeInduction? _module.DatatypeInduction$T@@2)) tytagFamily$DatatypeInduction))
 :pattern ( (Tclass._module.DatatypeInduction? _module.DatatypeInduction$T@@2))
)))
(assert (forall ((_module.DatatypeInduction$T@@3 T@U) ) (!  (and (= (Tag (Tclass._module.DatatypeInduction _module.DatatypeInduction$T@@3)) Tagclass._module.DatatypeInduction) (= (TagFamily (Tclass._module.DatatypeInduction _module.DatatypeInduction$T@@3)) tytagFamily$DatatypeInduction))
 :pattern ( (Tclass._module.DatatypeInduction _module.DatatypeInduction$T@@3))
)))
(assert (forall ((_module.DatatypeInduction$T@@4 T@U) ($o@@0 T@U) ) (! (= ($Is refType $o@@0 (Tclass._module.DatatypeInduction? _module.DatatypeInduction$T@@4))  (or (= $o@@0 null) (= (dtype $o@@0) (Tclass._module.DatatypeInduction? _module.DatatypeInduction$T@@4))))
 :pattern ( ($Is refType $o@@0 (Tclass._module.DatatypeInduction? _module.DatatypeInduction$T@@4)))
)))
(assert (forall ((_module.Tree$T@@2 T@U) (|a#11#0#0| T@U) ($h@@2 T@U) ) (!  (=> ($IsGoodHeap $h@@2) (= ($IsAlloc DatatypeTypeType (|#_module.Tree.Leaf| |a#11#0#0|) (Tclass._module.Tree _module.Tree$T@@2) $h@@2) ($IsAllocBox |a#11#0#0| _module.Tree$T@@2 $h@@2)))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_module.Tree.Leaf| |a#11#0#0|) (Tclass._module.Tree _module.Tree$T@@2) $h@@2))
)))
(assert (forall ((d@@3 T@U) ) (!  (=> (|$IsA#_module.Tree| d@@3) (or (_module.Tree.Leaf_q d@@3) (_module.Tree.Branch_q d@@3)))
 :pattern ( (|$IsA#_module.Tree| d@@3))
)))
(assert (forall ((_module.Tree$T@@3 T@U) (d@@4 T@U) ) (!  (=> ($Is DatatypeTypeType d@@4 (Tclass._module.Tree _module.Tree$T@@3)) (or (_module.Tree.Leaf_q d@@4) (_module.Tree.Branch_q d@@4)))
 :pattern ( (_module.Tree.Branch_q d@@4) ($Is DatatypeTypeType d@@4 (Tclass._module.Tree _module.Tree$T@@3)))
 :pattern ( (_module.Tree.Leaf_q d@@4) ($Is DatatypeTypeType d@@4 (Tclass._module.Tree _module.Tree$T@@3)))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module.DatatypeInduction$T@@5 T@U) (_module.DatatypeInduction.LeafCount$G T@U) ($ly T@U) (this T@U) (|tree#0| T@U) ) (!  (=> (or (|_module.DatatypeInduction.LeafCount#canCall| _module.DatatypeInduction$T@@5 _module.DatatypeInduction.LeafCount$G this (Lit DatatypeTypeType |tree#0|)) (and (< 1 $FunctionContextHeight) (and (and (or (not (= this null)) (not true)) ($Is refType this (Tclass._module.DatatypeInduction _module.DatatypeInduction$T@@5))) ($Is DatatypeTypeType |tree#0| (Tclass._module.Tree _module.DatatypeInduction.LeafCount$G))))) (and (=> (not (U_2_bool (Lit boolType (bool_2_U (_module.Tree.Leaf_q (Lit DatatypeTypeType |tree#0|)))))) (let ((|right#3| (Lit DatatypeTypeType (_module.Tree._h3 (Lit DatatypeTypeType |tree#0|)))))
(let ((|left#3| (Lit DatatypeTypeType (_module.Tree._h2 (Lit DatatypeTypeType |tree#0|)))))
 (and (|_module.DatatypeInduction.LeafCount#canCall| _module.DatatypeInduction$T@@5 _module.DatatypeInduction.LeafCount$G this |left#3|) (|_module.DatatypeInduction.LeafCount#canCall| _module.DatatypeInduction$T@@5 _module.DatatypeInduction.LeafCount$G this |right#3|))))) (= (_module.DatatypeInduction.LeafCount _module.DatatypeInduction$T@@5 _module.DatatypeInduction.LeafCount$G ($LS $ly) this (Lit DatatypeTypeType |tree#0|)) (ite (_module.Tree.Leaf_q (Lit DatatypeTypeType |tree#0|)) (LitInt 1) (let ((|right#2| (Lit DatatypeTypeType (_module.Tree._h3 (Lit DatatypeTypeType |tree#0|)))))
(let ((|left#2| (Lit DatatypeTypeType (_module.Tree._h2 (Lit DatatypeTypeType |tree#0|)))))
(+ (_module.DatatypeInduction.LeafCount _module.DatatypeInduction$T@@5 _module.DatatypeInduction.LeafCount$G ($LS $ly) this |left#2|) (_module.DatatypeInduction.LeafCount _module.DatatypeInduction$T@@5 _module.DatatypeInduction.LeafCount$G ($LS $ly) this |right#2|))))))))
 :weight 3
 :pattern ( (_module.DatatypeInduction.LeafCount _module.DatatypeInduction$T@@5 _module.DatatypeInduction.LeafCount$G ($LS $ly) this (Lit DatatypeTypeType |tree#0|)))
))))
(assert (forall ((v@@0 T@U) (t@@0 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@0) t@@0) ($Is T@@2 v@@0 t@@0))
 :pattern ( ($IsBox ($Box T@@2 v@@0) t@@0))
)))
(assert (forall ((ty T@U) ) (!  (=> ($AlwaysAllocated ty) (forall ((h@@0 T@U) (v@@1 T@U) ) (!  (=> ($IsBox v@@1 ty) ($IsAllocBox v@@1 ty h@@0))
 :pattern ( ($IsAllocBox v@@1 ty h@@0))
)))
 :pattern ( ($AlwaysAllocated ty))
)))
(assert (forall ((|a#15#0#0| T@U) (|a#15#1#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Tree.Branch| |a#15#0#0| |a#15#1#0|)) |##_module.Tree.Branch|)
 :pattern ( (|#_module.Tree.Branch| |a#15#0#0| |a#15#1#0|))
)))
(assert (forall ((|a#19#0#0| T@U) (|a#19#1#0| T@U) ) (! (= (_module.Tree._h2 (|#_module.Tree.Branch| |a#19#0#0| |a#19#1#0|)) |a#19#0#0|)
 :pattern ( (|#_module.Tree.Branch| |a#19#0#0| |a#19#1#0|))
)))
(assert (forall ((|a#21#0#0| T@U) (|a#21#1#0| T@U) ) (! (= (_module.Tree._h3 (|#_module.Tree.Branch| |a#21#0#0| |a#21#1#0|)) |a#21#1#0|)
 :pattern ( (|#_module.Tree.Branch| |a#21#0#0| |a#21#1#0|))
)))
(assert (forall ((|a#9#0#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Tree.Leaf| |a#9#0#0|)) |##_module.Tree.Leaf|)
 :pattern ( (|#_module.Tree.Leaf| |a#9#0#0|))
)))
(assert (forall ((_module.Tree$T@@4 T@U) ) (! (= (Tclass._module.Tree_0 (Tclass._module.Tree _module.Tree$T@@4)) _module.Tree$T@@4)
 :pattern ( (Tclass._module.Tree _module.Tree$T@@4))
)))
(assert (forall ((|a#13#0#0| T@U) ) (! (= (_module.Tree._h1 (|#_module.Tree.Leaf| |a#13#0#0|)) |a#13#0#0|)
 :pattern ( (|#_module.Tree.Leaf| |a#13#0#0|))
)))
(assert (forall ((_module.DatatypeInduction$T@@6 T@U) ) (! (= (Tclass._module.DatatypeInduction?_0 (Tclass._module.DatatypeInduction? _module.DatatypeInduction$T@@6)) _module.DatatypeInduction$T@@6)
 :pattern ( (Tclass._module.DatatypeInduction? _module.DatatypeInduction$T@@6))
)))
(assert (forall ((_module.DatatypeInduction$T@@7 T@U) ) (! (= (Tclass._module.DatatypeInduction_0 (Tclass._module.DatatypeInduction _module.DatatypeInduction$T@@7)) _module.DatatypeInduction$T@@7)
 :pattern ( (Tclass._module.DatatypeInduction _module.DatatypeInduction$T@@7))
)))
(assert (forall ((x@@5 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@5)) x@@5)
 :pattern ( ($Box T@@3 x@@5))
)))
(assert (forall ((_module.Tree$T@@5 T@U) (|a#11#0#0@@0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Tree.Leaf| |a#11#0#0@@0|) (Tclass._module.Tree _module.Tree$T@@5)) ($IsBox |a#11#0#0@@0| _module.Tree$T@@5))
 :pattern ( ($Is DatatypeTypeType (|#_module.Tree.Leaf| |a#11#0#0@@0|) (Tclass._module.Tree _module.Tree$T@@5)))
)))
(assert (forall ((|a#20#0#0| T@U) (|a#20#1#0| T@U) ) (! (< (DtRank |a#20#0#0|) (DtRank (|#_module.Tree.Branch| |a#20#0#0| |a#20#1#0|)))
 :pattern ( (|#_module.Tree.Branch| |a#20#0#0| |a#20#1#0|))
)))
(assert (forall ((|a#22#0#0| T@U) (|a#22#1#0| T@U) ) (! (< (DtRank |a#22#1#0|) (DtRank (|#_module.Tree.Branch| |a#22#0#0| |a#22#1#0|)))
 :pattern ( (|#_module.Tree.Branch| |a#22#0#0| |a#22#1#0|))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module.DatatypeInduction$T@@8 T@U) (_module.DatatypeInduction.LeafCount$G@@0 T@U) ($ly@@0 T@U) (this@@0 T@U) (|tree#0@@0| T@U) ) (!  (=> (or (|_module.DatatypeInduction.LeafCount#canCall| _module.DatatypeInduction$T@@8 _module.DatatypeInduction.LeafCount$G@@0 this@@0 |tree#0@@0|) (and (< 1 $FunctionContextHeight) (and (and (or (not (= this@@0 null)) (not true)) ($Is refType this@@0 (Tclass._module.DatatypeInduction _module.DatatypeInduction$T@@8))) ($Is DatatypeTypeType |tree#0@@0| (Tclass._module.Tree _module.DatatypeInduction.LeafCount$G@@0))))) (and (=> (not (_module.Tree.Leaf_q |tree#0@@0|)) (let ((|right#1| (_module.Tree._h3 |tree#0@@0|)))
(let ((|left#1| (_module.Tree._h2 |tree#0@@0|)))
 (and (|_module.DatatypeInduction.LeafCount#canCall| _module.DatatypeInduction$T@@8 _module.DatatypeInduction.LeafCount$G@@0 this@@0 |left#1|) (|_module.DatatypeInduction.LeafCount#canCall| _module.DatatypeInduction$T@@8 _module.DatatypeInduction.LeafCount$G@@0 this@@0 |right#1|))))) (= (_module.DatatypeInduction.LeafCount _module.DatatypeInduction$T@@8 _module.DatatypeInduction.LeafCount$G@@0 ($LS $ly@@0) this@@0 |tree#0@@0|) (ite (_module.Tree.Leaf_q |tree#0@@0|) (LitInt 1) (let ((|right#0| (_module.Tree._h3 |tree#0@@0|)))
(let ((|left#0| (_module.Tree._h2 |tree#0@@0|)))
(+ (_module.DatatypeInduction.LeafCount _module.DatatypeInduction$T@@8 _module.DatatypeInduction.LeafCount$G@@0 $ly@@0 this@@0 |left#0|) (_module.DatatypeInduction.LeafCount _module.DatatypeInduction$T@@8 _module.DatatypeInduction.LeafCount$G@@0 $ly@@0 this@@0 |right#0|))))))))
 :pattern ( (_module.DatatypeInduction.LeafCount _module.DatatypeInduction$T@@8 _module.DatatypeInduction.LeafCount$G@@0 ($LS $ly@@0) this@@0 |tree#0@@0|))
))))
(assert (forall ((|a#14#0#0| T@U) ) (! (< (BoxRank |a#14#0#0|) (DtRank (|#_module.Tree.Leaf| |a#14#0#0|)))
 :pattern ( (|#_module.Tree.Leaf| |a#14#0#0|))
)))
(assert (forall ((d@@5 T@U) (_module.Tree$T@@6 T@U) ($h@@3 T@U) ) (!  (=> (and ($IsGoodHeap $h@@3) (and (_module.Tree.Leaf_q d@@5) ($IsAlloc DatatypeTypeType d@@5 (Tclass._module.Tree _module.Tree$T@@6) $h@@3))) ($IsAllocBox (_module.Tree._h1 d@@5) _module.Tree$T@@6 $h@@3))
 :pattern ( ($IsAllocBox (_module.Tree._h1 d@@5) _module.Tree$T@@6 $h@@3))
)))
(assert  (and (forall ((t0@@0 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 t2 (MapType1Store t0@@0 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o@@1 T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@1 $f))  (=> (and (or (not (= $o@@1 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@1) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@1 $f))
)))
(assert (forall ((d@@6 T@U) ) (! (= (BoxRank ($Box DatatypeTypeType d@@6)) (DtRank d@@6))
 :pattern ( (BoxRank ($Box DatatypeTypeType d@@6)))
)))
(assert (forall ((_module.Tree$T@@7 T@U) (bx T@U) ) (!  (=> ($IsBox bx (Tclass._module.Tree _module.Tree$T@@7)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx)) bx) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx) (Tclass._module.Tree _module.Tree$T@@7))))
 :pattern ( ($IsBox bx (Tclass._module.Tree _module.Tree$T@@7)))
)))
(assert (forall ((_module.DatatypeInduction$T@@9 T@U) (bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 (Tclass._module.DatatypeInduction? _module.DatatypeInduction$T@@9)) (and (= ($Box refType ($Unbox refType bx@@0)) bx@@0) ($Is refType ($Unbox refType bx@@0) (Tclass._module.DatatypeInduction? _module.DatatypeInduction$T@@9))))
 :pattern ( ($IsBox bx@@0 (Tclass._module.DatatypeInduction? _module.DatatypeInduction$T@@9)))
)))
(assert (forall ((_module.DatatypeInduction$T@@10 T@U) (bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 (Tclass._module.DatatypeInduction _module.DatatypeInduction$T@@10)) (and (= ($Box refType ($Unbox refType bx@@1)) bx@@1) ($Is refType ($Unbox refType bx@@1) (Tclass._module.DatatypeInduction _module.DatatypeInduction$T@@10))))
 :pattern ( ($IsBox bx@@1 (Tclass._module.DatatypeInduction _module.DatatypeInduction$T@@10)))
)))
(assert (forall ((d@@7 T@U) (_module.Tree$T@@8 T@U) ($h@@4 T@U) ) (!  (=> (and ($IsGoodHeap $h@@4) (and (_module.Tree.Branch_q d@@7) ($IsAlloc DatatypeTypeType d@@7 (Tclass._module.Tree _module.Tree$T@@8) $h@@4))) ($IsAlloc DatatypeTypeType (_module.Tree._h2 d@@7) (Tclass._module.Tree _module.Tree$T@@8) $h@@4))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.Tree._h2 d@@7) (Tclass._module.Tree _module.Tree$T@@8) $h@@4))
)))
(assert (forall ((d@@8 T@U) (_module.Tree$T@@9 T@U) ($h@@5 T@U) ) (!  (=> (and ($IsGoodHeap $h@@5) (and (_module.Tree.Branch_q d@@8) ($IsAlloc DatatypeTypeType d@@8 (Tclass._module.Tree _module.Tree$T@@9) $h@@5))) ($IsAlloc DatatypeTypeType (_module.Tree._h3 d@@8) (Tclass._module.Tree _module.Tree$T@@9) $h@@5))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.Tree._h3 d@@8) (Tclass._module.Tree _module.Tree$T@@9) $h@@5))
)))
(assert (forall ((|a#18#0#0| T@U) (|a#18#1#0| T@U) ) (! (= (|#_module.Tree.Branch| (Lit DatatypeTypeType |a#18#0#0|) (Lit DatatypeTypeType |a#18#1#0|)) (Lit DatatypeTypeType (|#_module.Tree.Branch| |a#18#0#0| |a#18#1#0|)))
 :pattern ( (|#_module.Tree.Branch| (Lit DatatypeTypeType |a#18#0#0|) (Lit DatatypeTypeType |a#18#1#0|)))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module.DatatypeInduction$T@@11 T@U) (_module.DatatypeInduction.LeafCount$G@@1 T@U) ($ly@@1 T@U) (this@@1 T@U) (|tree#0@@1| T@U) ) (!  (=> (or (|_module.DatatypeInduction.LeafCount#canCall| _module.DatatypeInduction$T@@11 _module.DatatypeInduction.LeafCount$G@@1 (Lit refType this@@1) (Lit DatatypeTypeType |tree#0@@1|)) (and (< 1 $FunctionContextHeight) (and (and (or (not (= this@@1 null)) (not true)) ($Is refType this@@1 (Tclass._module.DatatypeInduction _module.DatatypeInduction$T@@11))) ($Is DatatypeTypeType |tree#0@@1| (Tclass._module.Tree _module.DatatypeInduction.LeafCount$G@@1))))) (and (=> (not (U_2_bool (Lit boolType (bool_2_U (_module.Tree.Leaf_q (Lit DatatypeTypeType |tree#0@@1|)))))) (let ((|right#5| (Lit DatatypeTypeType (_module.Tree._h3 (Lit DatatypeTypeType |tree#0@@1|)))))
(let ((|left#5| (Lit DatatypeTypeType (_module.Tree._h2 (Lit DatatypeTypeType |tree#0@@1|)))))
 (and (|_module.DatatypeInduction.LeafCount#canCall| _module.DatatypeInduction$T@@11 _module.DatatypeInduction.LeafCount$G@@1 (Lit refType this@@1) |left#5|) (|_module.DatatypeInduction.LeafCount#canCall| _module.DatatypeInduction$T@@11 _module.DatatypeInduction.LeafCount$G@@1 (Lit refType this@@1) |right#5|))))) (= (_module.DatatypeInduction.LeafCount _module.DatatypeInduction$T@@11 _module.DatatypeInduction.LeafCount$G@@1 ($LS $ly@@1) (Lit refType this@@1) (Lit DatatypeTypeType |tree#0@@1|)) (ite (_module.Tree.Leaf_q (Lit DatatypeTypeType |tree#0@@1|)) (LitInt 1) (let ((|right#4| (Lit DatatypeTypeType (_module.Tree._h3 (Lit DatatypeTypeType |tree#0@@1|)))))
(let ((|left#4| (Lit DatatypeTypeType (_module.Tree._h2 (Lit DatatypeTypeType |tree#0@@1|)))))
(LitInt (+ (_module.DatatypeInduction.LeafCount _module.DatatypeInduction$T@@11 _module.DatatypeInduction.LeafCount$G@@1 ($LS $ly@@1) (Lit refType this@@1) |left#4|) (_module.DatatypeInduction.LeafCount _module.DatatypeInduction$T@@11 _module.DatatypeInduction.LeafCount$G@@1 ($LS $ly@@1) (Lit refType this@@1) |right#4|)))))))))
 :weight 3
 :pattern ( (_module.DatatypeInduction.LeafCount _module.DatatypeInduction$T@@11 _module.DatatypeInduction.LeafCount$G@@1 ($LS $ly@@1) (Lit refType this@@1) (Lit DatatypeTypeType |tree#0@@1|)))
))))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((|a#12#0#0| T@U) ) (! (= (|#_module.Tree.Leaf| (Lit BoxType |a#12#0#0|)) (Lit DatatypeTypeType (|#_module.Tree.Leaf| |a#12#0#0|)))
 :pattern ( (|#_module.Tree.Leaf| (Lit BoxType |a#12#0#0|)))
)))
(assert (forall ((x@@7 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@7)) (Lit BoxType ($Box T@@4 x@@7)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@7)))
)))
(assert (forall ((_module.DatatypeInduction$T@@12 T@U) (_module.DatatypeInduction.LeafCount$G@@2 T@U) ($ly@@2 T@U) (this@@2 T@U) (|tree#0@@2| T@U) ) (! (= (_module.DatatypeInduction.LeafCount _module.DatatypeInduction$T@@12 _module.DatatypeInduction.LeafCount$G@@2 ($LS $ly@@2) this@@2 |tree#0@@2|) (_module.DatatypeInduction.LeafCount _module.DatatypeInduction$T@@12 _module.DatatypeInduction.LeafCount$G@@2 $ly@@2 this@@2 |tree#0@@2|))
 :pattern ( (_module.DatatypeInduction.LeafCount _module.DatatypeInduction$T@@12 _module.DatatypeInduction.LeafCount$G@@2 ($LS $ly@@2) this@@2 |tree#0@@2|))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun _module.DatatypeInduction$T@@13 () T@U)
(declare-fun $LZ () T@U)
(declare-fun this@@3 () T@U)
(declare-fun |tree#0@@3| () T@U)
(declare-fun |t#0@0| () T@U)
(declare-fun $Heap () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 8) (let ((anon2_correct  (=> (forall ((|t#1| T@U) ) (!  (=> ($Is DatatypeTypeType |t#1| (Tclass._module.Tree _module.DatatypeInduction$T@@13)) (|_module.DatatypeInduction.LeafCount#canCall| _module.DatatypeInduction$T@@13 _module.DatatypeInduction$T@@13 this@@3 |t#1|))
 :pattern ( (_module.DatatypeInduction.LeafCount _module.DatatypeInduction$T@@13 _module.DatatypeInduction$T@@13 ($LS $LZ) this@@3 |t#1|))
)) (and (=> (= (ControlFlow 0 2) (- 0 4)) (forall ((|t#1@@0| T@U) ) (!  (=> (and (and ($Is DatatypeTypeType |t#1@@0| (Tclass._module.Tree _module.DatatypeInduction$T@@13)) (forall ((|t$ih#0#0| T@U) ) (!  (=> ($Is DatatypeTypeType |t$ih#0#0| (Tclass._module.Tree _module.DatatypeInduction$T@@13)) (=> (< (DtRank |t$ih#0#0|) (DtRank |t#1@@0|)) (<= (LitInt 2) (_module.DatatypeInduction.LeafCount _module.DatatypeInduction$T@@13 _module.DatatypeInduction$T@@13 ($LS $LZ) this@@3 |t$ih#0#0|))))
 :pattern ( (_module.DatatypeInduction.LeafCount _module.DatatypeInduction$T@@13 _module.DatatypeInduction$T@@13 ($LS $LZ) this@@3 |t$ih#0#0|))
))) (and true (exists ((|a#0#0#0| T@U) ) (!  (and ($IsBox |a#0#0#0| _module.DatatypeInduction$T@@13) (= (|#_module.Tree.Leaf| |a#0#0#0|) |t#1@@0|))
 :pattern ( (|#_module.Tree.Leaf| |a#0#0#0|))
)))) (<= (LitInt 2) (_module.DatatypeInduction.LeafCount _module.DatatypeInduction$T@@13 _module.DatatypeInduction$T@@13 ($LS ($LS $LZ)) this@@3 |t#1@@0|)))
 :pattern ( (_module.DatatypeInduction.LeafCount _module.DatatypeInduction$T@@13 _module.DatatypeInduction$T@@13 ($LS ($LS $LZ)) this@@3 |t#1@@0|))
))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (forall ((|t#1@@1| T@U) ) (!  (=> (and (and ($Is DatatypeTypeType |t#1@@1| (Tclass._module.Tree _module.DatatypeInduction$T@@13)) (forall ((|t$ih#0#0@@0| T@U) ) (!  (=> ($Is DatatypeTypeType |t$ih#0#0@@0| (Tclass._module.Tree _module.DatatypeInduction$T@@13)) (=> (< (DtRank |t$ih#0#0@@0|) (DtRank |t#1@@1|)) (<= (LitInt 2) (_module.DatatypeInduction.LeafCount _module.DatatypeInduction$T@@13 _module.DatatypeInduction$T@@13 ($LS $LZ) this@@3 |t$ih#0#0@@0|))))
 :pattern ( (_module.DatatypeInduction.LeafCount _module.DatatypeInduction$T@@13 _module.DatatypeInduction$T@@13 ($LS $LZ) this@@3 |t$ih#0#0@@0|))
))) (and true (exists ((|a#1#0#0| T@U) (|a#1#1#0| T@U) ) (!  (and (and ($Is DatatypeTypeType |a#1#0#0| (Tclass._module.Tree _module.DatatypeInduction$T@@13)) ($Is DatatypeTypeType |a#1#1#0| (Tclass._module.Tree _module.DatatypeInduction$T@@13))) (= (|#_module.Tree.Branch| |a#1#0#0| |a#1#1#0|) |t#1@@1|))
 :pattern ( (|#_module.Tree.Branch| |a#1#0#0| |a#1#1#0|))
)))) (<= (LitInt 2) (_module.DatatypeInduction.LeafCount _module.DatatypeInduction$T@@13 _module.DatatypeInduction$T@@13 ($LS ($LS $LZ)) this@@3 |t#1@@1|)))
 :pattern ( (_module.DatatypeInduction.LeafCount _module.DatatypeInduction$T@@13 _module.DatatypeInduction$T@@13 ($LS ($LS $LZ)) this@@3 |t#1@@1|))
))) (=> (and (forall ((|t#1@@2| T@U) ) (!  (=> ($Is DatatypeTypeType |t#1@@2| (Tclass._module.Tree _module.DatatypeInduction$T@@13)) (<= (LitInt 2) (_module.DatatypeInduction.LeafCount _module.DatatypeInduction$T@@13 _module.DatatypeInduction$T@@13 ($LS $LZ) this@@3 |t#1@@2|)))
 :pattern ( (_module.DatatypeInduction.LeafCount _module.DatatypeInduction$T@@13 _module.DatatypeInduction$T@@13 ($LS $LZ) this@@3 |t#1@@2|))
)) (= (ControlFlow 0 2) (- 0 1))) (<= (LitInt 2) (_module.DatatypeInduction.LeafCount _module.DatatypeInduction$T@@13 _module.DatatypeInduction$T@@13 ($LS ($LS $LZ)) this@@3 |tree#0@@3|))))))))
(let ((anon3_Else_correct  (=> (and (not (and ($Is DatatypeTypeType |t#0@0| (Tclass._module.Tree _module.DatatypeInduction$T@@13)) ($IsAlloc DatatypeTypeType |t#0@0| (Tclass._module.Tree _module.DatatypeInduction$T@@13) $Heap))) (= (ControlFlow 0 6) 2)) anon2_correct)))
(let ((anon3_Then_correct  (=> (and ($Is DatatypeTypeType |t#0@0| (Tclass._module.Tree _module.DatatypeInduction$T@@13)) ($IsAlloc DatatypeTypeType |t#0@0| (Tclass._module.Tree _module.DatatypeInduction$T@@13) $Heap)) (=> (and (and ($IsAllocBox ($Box refType this@@3) (Tclass._module.DatatypeInduction? _module.DatatypeInduction$T@@13) $Heap) ($IsAlloc DatatypeTypeType |t#0@0| (Tclass._module.Tree _module.DatatypeInduction$T@@13) $Heap)) (and (|_module.DatatypeInduction.LeafCount#canCall| _module.DatatypeInduction$T@@13 _module.DatatypeInduction$T@@13 this@@3 |t#0@0|) (= (ControlFlow 0 5) 2))) anon2_correct))))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (and (=> (= (ControlFlow 0 7) 5) anon3_Then_correct) (=> (= (ControlFlow 0 7) 6) anon3_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) ($AlwaysAllocated _module.DatatypeInduction$T@@13)) (and (or (not (= this@@3 null)) (not true)) (and ($Is refType this@@3 (Tclass._module.DatatypeInduction _module.DatatypeInduction$T@@13)) ($IsAlloc refType this@@3 (Tclass._module.DatatypeInduction _module.DatatypeInduction$T@@13) $Heap)))) (and (and (and ($Is DatatypeTypeType |tree#0@@3| (Tclass._module.Tree _module.DatatypeInduction$T@@13)) ($IsAlloc DatatypeTypeType |tree#0@@3| (Tclass._module.Tree _module.DatatypeInduction$T@@13) $Heap)) (|$IsA#_module.Tree| |tree#0@@3|)) (and (= 2 $FunctionContextHeight) (= (ControlFlow 0 8) 7)))) anon0_correct)))
PreconditionGeneratedEntry_correct))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 4))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
