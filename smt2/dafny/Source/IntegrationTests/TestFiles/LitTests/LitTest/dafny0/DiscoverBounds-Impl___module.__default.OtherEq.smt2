(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TChar () T@U)
(declare-fun TInt () T@U)
(declare-fun TReal () T@U)
(declare-fun TagChar () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagReal () T@U)
(declare-fun TagSet () T@U)
(declare-fun TagISet () T@U)
(declare-fun TagMultiSet () T@U)
(declare-fun TagSeq () T@U)
(declare-fun TagMap () T@U)
(declare-fun TagIMap () T@U)
(declare-fun alloc () T@U)
(declare-fun |##_System._tuple#2._#Make2| () T@U)
(declare-fun Tagclass._System.Tuple2 () T@U)
(declare-fun |tytagFamily$_tuple#2| () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun TBitvector (Int) T@U)
(declare-fun bv12Type () T@T)
(declare-fun bv12_2_U ((_ BitVec 12)) T@U)
(declare-fun U_2_bv12 (T@U) (_ BitVec 12))
(declare-fun bv28Type () T@T)
(declare-fun bv28_2_U ((_ BitVec 28)) T@U)
(declare-fun U_2_bv28 (T@U) (_ BitVec 28))
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun _System.Tuple2.___hMake2_q (T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun Tclass._System.Tuple2 (T@U T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun |Set#Empty| () T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun |Seq#Empty| () T@U)
(declare-fun MultiSetType () T@T)
(declare-fun TMultiSet (T@U) T@U)
(declare-fun $IsGoodMultiSet (T@U) Bool)
(declare-fun |#_System._tuple#2._#Make2| (T@U T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun BoxType () T@T)
(declare-fun TISet (T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun |$let#0_s''| (T@U) T@U)
(declare-fun |$let#0$canCall| (T@U) Bool)
(declare-fun SetType () T@T)
(declare-fun TSet (T@U) T@U)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun |$let#1_t''| (T@U) T@U)
(declare-fun |$let#1$canCall| (T@U) Bool)
(declare-fun SeqType () T@T)
(declare-fun TSeq (T@U) T@U)
(declare-fun |Seq#Equal| (T@U T@U) Bool)
(declare-fun |$let#3_v''| (T@U) T@U)
(declare-fun |$let#3$canCall| (T@U) Bool)
(declare-fun |MultiSet#Equal| (T@U T@U) Bool)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun |$let#5_x''| (T@U) T@U)
(declare-fun |$let#5$canCall| (T@U) Bool)
(declare-fun IMapType () T@T)
(declare-fun TIMap (T@U T@U) T@U)
(declare-fun |IMap#Equal| (T@U T@U) Bool)
(declare-fun |$let#2_u''| (T@U T@U T@U) T@U)
(declare-fun |$let#2$canCall| (T@U T@U T@U) Bool)
(declare-fun MapType () T@T)
(declare-fun TMap (T@U T@U) T@U)
(declare-fun |Map#Equal| (T@U T@U) Bool)
(declare-fun |$let#4_w''| (T@U) T@U)
(declare-fun |$let#4$canCall| (T@U) Bool)
(declare-fun |ISet#Equal| (T@U T@U) Bool)
(declare-fun |IMap#Domain| (T@U) T@U)
(declare-fun |IMap#Empty| () T@U)
(declare-fun |IMap#Values| (T@U) T@U)
(declare-fun |Map#Domain| (T@U) T@U)
(declare-fun |Map#Elements| (T@U) T@U)
(declare-fun |IMap#Items| (T@U) T@U)
(declare-fun _System.Tuple2._0 (T@U) T@U)
(declare-fun |IMap#Elements| (T@U) T@U)
(declare-fun _System.Tuple2._1 (T@U) T@U)
(declare-fun |MultiSet#Multiplicity| (T@U T@U) Int)
(declare-fun |ISet#Empty| () T@U)
(declare-fun charType () T@T)
(declare-fun |MultiSet#Card| (T@U) Int)
(declare-fun |MultiSet#Empty| () T@U)
(declare-fun Inv0_TMap (T@U) T@U)
(declare-fun Inv1_TMap (T@U) T@U)
(declare-fun Inv0_TIMap (T@U) T@U)
(declare-fun Inv1_TIMap (T@U) T@U)
(declare-fun Tclass._System.Tuple2_0 (T@U) T@U)
(declare-fun Tclass._System.Tuple2_1 (T@U) T@U)
(declare-fun Inv0_TBitvector (T@U) Int)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun Inv0_TISet (T@U) T@U)
(declare-fun Inv0_TMultiSet (T@U) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun BoxRank (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun |Map#Empty| () T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun |Map#Values| (T@U) T@U)
(declare-fun |Map#Items| (T@U) T@U)
(declare-fun |Seq#Rank| (T@U) Int)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TChar TInt TReal TagChar TagInt TagReal TagSet TagISet TagMultiSet TagSeq TagMap TagIMap alloc |##_System._tuple#2._#Make2| Tagclass._System.Tuple2 |tytagFamily$_tuple#2|)
)
(assert (= (Tag TChar) TagChar))
(assert (= (Tag TInt) TagInt))
(assert (= (Tag TReal) TagReal))
(assert (forall ((v T@U) (h T@U) ) (! ($IsAlloc intType v (TBitvector 0) h)
 :pattern ( ($IsAlloc intType v (TBitvector 0) h))
)))
(assert  (and (and (= (Ctor bv12Type) 3) (forall ((arg0@@2 (_ BitVec 12)) ) (! (= (U_2_bv12 (bv12_2_U arg0@@2)) arg0@@2)
 :pattern ( (bv12_2_U arg0@@2))
))) (forall ((x@@2 T@U) ) (! (= (bv12_2_U (U_2_bv12 x@@2)) x@@2)
 :pattern ( (U_2_bv12 x@@2))
))))
(assert (forall ((v@@0 T@U) (heap T@U) ) (! ($IsAlloc bv12Type v@@0 (TBitvector 12) heap)
 :pattern ( ($IsAlloc bv12Type v@@0 (TBitvector 12) heap))
)))
(assert  (and (and (= (Ctor bv28Type) 4) (forall ((arg0@@3 (_ BitVec 28)) ) (! (= (U_2_bv28 (bv28_2_U arg0@@3)) arg0@@3)
 :pattern ( (bv28_2_U arg0@@3))
))) (forall ((x@@3 T@U) ) (! (= (bv28_2_U (U_2_bv28 x@@3)) x@@3)
 :pattern ( (U_2_bv28 x@@3))
))))
(assert (forall ((v@@1 T@U) (heap@@0 T@U) ) (! ($IsAlloc bv28Type v@@1 (TBitvector 28) heap@@0)
 :pattern ( ($IsAlloc bv28Type v@@1 (TBitvector 28) heap@@0))
)))
(assert (forall ((v@@2 T@U) ) (! ($Is intType v@@2 (TBitvector 0))
 :pattern ( ($Is intType v@@2 (TBitvector 0)))
)))
(assert (forall ((v@@3 T@U) ) (! ($Is bv12Type v@@3 (TBitvector 12))
 :pattern ( ($Is bv12Type v@@3 (TBitvector 12)))
)))
(assert (forall ((v@@4 T@U) ) (! ($Is bv28Type v@@4 (TBitvector 28))
 :pattern ( ($Is bv28Type v@@4 (TBitvector 28)))
)))
(assert (= (Ctor DatatypeTypeType) 5))
(assert (forall ((|_System._tuple#2$T0| T@U) (|_System._tuple#2$T1| T@U) (d T@U) ) (!  (=> ($Is DatatypeTypeType d (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)) (_System.Tuple2.___hMake2_q d))
 :pattern ( (_System.Tuple2.___hMake2_q d) ($Is DatatypeTypeType d (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)))
)))
(assert (forall ((o T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o))
 :pattern ( (|Set#IsMember| |Set#Empty| o))
)))
(assert (= (|Seq#Length| |Seq#Empty|) 0))
(assert (= (Ctor MultiSetType) 6))
(assert (forall ((v@@5 T@U) (t0 T@U) ) (!  (=> ($Is MultiSetType v@@5 (TMultiSet t0)) ($IsGoodMultiSet v@@5))
 :pattern ( ($Is MultiSetType v@@5 (TMultiSet t0)))
)))
(assert (forall ((|_System._tuple#2$T0@@0| T@U) (|_System._tuple#2$T1@@0| T@U) (|a#2#0#0| T@U) (|a#2#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|))  (and ($IsBox |a#2#0#0| |_System._tuple#2$T0@@0|) ($IsBox |a#2#1#0| |_System._tuple#2$T1@@0|)))
 :pattern ( ($Is DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|)))
)))
(assert  (and (and (and (and (and (forall ((t0@@0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0@@0 t1 (MapType0Store t0@@0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (forall ((arg0@@4 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@4 arg1)) 7))) (forall ((arg0@@5 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@5 arg1@@0)) arg0@@5)
 :pattern ( (MapType0Type arg0@@5 arg1@@0))
))) (forall ((arg0@@6 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@6 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@6 arg1@@1))
))) (= (Ctor BoxType) 8)))
(assert (forall ((v@@6 T@U) (t0@@1 T@U) ) (! (= ($Is (MapType0Type BoxType boolType) v@@6 (TISet t0@@1)) (forall ((bx T@U) ) (!  (=> (U_2_bool (MapType0Select BoxType boolType v@@6 bx)) ($IsBox bx t0@@1))
 :pattern ( (MapType0Select BoxType boolType v@@6 bx))
)))
 :pattern ( ($Is (MapType0Type BoxType boolType) v@@6 (TISet t0@@1)))
)))
(assert (forall ((x@@4 T@U) (T T@T) ) (! (= (Lit T x@@4) x@@4)
 :pattern ( (Lit T x@@4))
)))
(assert (= (Ctor SetType) 9))
(assert (forall ((s T@U) ) (!  (=> (|$let#0$canCall| s) (and ($Is SetType (|$let#0_s''| s) (TSet TInt)) (|Set#Equal| (|$let#0_s''| s) s)))
 :pattern ( (|$let#0_s''| s))
)))
(assert (= (Ctor SeqType) 10))
(assert (forall ((t T@U) ) (!  (=> (|$let#1$canCall| t) (and ($Is SeqType (|$let#1_t''| t) (TSeq TReal)) (|Seq#Equal| (|$let#1_t''| t) t)))
 :pattern ( (|$let#1_t''| t))
)))
(assert (forall ((v@@7 T@U) ) (!  (=> (|$let#3$canCall| v@@7) (and ($Is MultiSetType (|$let#3_v''| v@@7) (TMultiSet TChar)) (|MultiSet#Equal| (|$let#3_v''| v@@7) v@@7)))
 :pattern ( (|$let#3_v''| v@@7))
)))
(assert (forall ((|_System._tuple#2$T0@@1| T@U) (|_System._tuple#2$T1@@1| T@U) (|a#2#0#0@@0| T@U) (|a#2#1#0@@0| T@U) ($h T@U) ) (!  (=> ($IsGoodHeap $h) (= ($IsAlloc DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0@@0| |a#2#1#0@@0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|) $h)  (and ($IsAllocBox |a#2#0#0@@0| |_System._tuple#2$T0@@1| $h) ($IsAllocBox |a#2#1#0@@0| |_System._tuple#2$T1@@1| $h))))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0@@0| |a#2#1#0@@0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|) $h))
)))
(assert (forall ((d@@0 T@U) ) (! (= (_System.Tuple2.___hMake2_q d@@0) (= (DatatypeCtorId d@@0) |##_System._tuple#2._#Make2|))
 :pattern ( (_System.Tuple2.___hMake2_q d@@0))
)))
(assert (forall ((s0 T@U) (s1 T@U) ) (! (= (|Seq#Equal| s0 s1)  (and (= (|Seq#Length| s0) (|Seq#Length| s1)) (forall ((j Int) ) (!  (=> (and (<= 0 j) (< j (|Seq#Length| s0))) (= (|Seq#Index| s0 j) (|Seq#Index| s1 j)))
 :pattern ( (|Seq#Index| s0 j))
 :pattern ( (|Seq#Index| s1 j))
))))
 :pattern ( (|Seq#Equal| s0 s1))
)))
(assert (forall ((x@@5 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@5)) x@@5)
 :pattern ( ($Unbox T@@0 x@@5))
)))
(assert (= (Ctor IMapType) 11))
(assert (forall ((x@@6 T@U) ) (!  (=> (|$let#5$canCall| x@@6) (and ($Is IMapType (|$let#5_x''| x@@6) (TIMap (TBitvector 28) TInt)) (|IMap#Equal| (|$let#5_x''| x@@6) x@@6)))
 :pattern ( (|$let#5_x''| x@@6))
)))
(assert (= (Ctor MapType) 12))
(assert (forall ((_module._default.OtherEq$U T@U) (_module._default.OtherEq$V T@U) (u T@U) ) (!  (=> (|$let#2$canCall| _module._default.OtherEq$U _module._default.OtherEq$V u) (and ($Is MapType (|$let#2_u''| _module._default.OtherEq$U _module._default.OtherEq$V u) (TMap _module._default.OtherEq$U _module._default.OtherEq$V)) (|Map#Equal| (|$let#2_u''| _module._default.OtherEq$U _module._default.OtherEq$V u) u)))
 :pattern ( (|$let#2_u''| _module._default.OtherEq$U _module._default.OtherEq$V u))
)))
(assert (forall ((d@@1 T@U) ) (!  (=> (_System.Tuple2.___hMake2_q d@@1) (exists ((|a#1#0#0| T@U) (|a#1#1#0| T@U) ) (= d@@1 (|#_System._tuple#2._#Make2| |a#1#0#0| |a#1#1#0|))))
 :pattern ( (_System.Tuple2.___hMake2_q d@@1))
)))
(assert (forall ((w T@U) ) (!  (=> (|$let#4$canCall| w) (and ($Is (MapType0Type BoxType boolType) (|$let#4_w''| w) (TISet (TBitvector 12))) (|ISet#Equal| (|$let#4_w''| w) w)))
 :pattern ( (|$let#4_w''| w))
)))
(assert (forall ((v@@8 T@U) (t0@@2 T@U) ) (! (= ($Is SetType v@@8 (TSet t0@@2)) (forall ((bx@@0 T@U) ) (!  (=> (|Set#IsMember| v@@8 bx@@0) ($IsBox bx@@0 t0@@2))
 :pattern ( (|Set#IsMember| v@@8 bx@@0))
)))
 :pattern ( ($Is SetType v@@8 (TSet t0@@2)))
)))
(assert (forall ((v@@9 T@U) (t@@0 T@U) (h@@0 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@9) t@@0 h@@0) ($IsAlloc T@@1 v@@9 t@@0 h@@0))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@9) t@@0 h@@0))
)))
(assert (forall ((u@@0 T@U) ) (!  (not (U_2_bool (MapType0Select BoxType boolType (|IMap#Domain| |IMap#Empty|) u@@0)))
 :pattern ( (MapType0Select BoxType boolType (|IMap#Domain| |IMap#Empty|) u@@0))
)))
(assert (forall ((a T@U) (b T@U) ) (! (= (|ISet#Equal| a b) (forall ((o@@0 T@U) ) (! (= (U_2_bool (MapType0Select BoxType boolType a o@@0)) (U_2_bool (MapType0Select BoxType boolType b o@@0)))
 :pattern ( (MapType0Select BoxType boolType a o@@0))
 :pattern ( (MapType0Select BoxType boolType b o@@0))
)))
 :pattern ( (|ISet#Equal| a b))
)))
(assert (forall ((m@@1 T@U) ) (!  (or (= m@@1 |IMap#Empty|) (exists ((k T@U) ) (U_2_bool (MapType0Select BoxType boolType (|IMap#Domain| m@@1) k))))
 :pattern ( (|IMap#Domain| m@@1))
)))
(assert (forall ((m@@2 T@U) ) (!  (or (= m@@2 |IMap#Empty|) (exists ((v@@10 T@U) ) (U_2_bool (MapType0Select BoxType boolType (|IMap#Values| m@@2) v@@10))))
 :pattern ( (|IMap#Values| m@@2))
)))
(assert (forall ((m@@3 T@U) (|m'| T@U) ) (! (= (|Map#Equal| m@@3 |m'|)  (and (forall ((u@@1 T@U) ) (= (|Set#IsMember| (|Map#Domain| m@@3) u@@1) (|Set#IsMember| (|Map#Domain| |m'|) u@@1))) (forall ((u@@2 T@U) )  (=> (|Set#IsMember| (|Map#Domain| m@@3) u@@2) (= (MapType0Select BoxType BoxType (|Map#Elements| m@@3) u@@2) (MapType0Select BoxType BoxType (|Map#Elements| |m'|) u@@2))))))
 :pattern ( (|Map#Equal| m@@3 |m'|))
)))
(assert (forall ((v@@11 T@U) (t0@@3 T@U) (h@@1 T@U) ) (! (= ($IsAlloc (MapType0Type BoxType boolType) v@@11 (TISet t0@@3) h@@1) (forall ((bx@@1 T@U) ) (!  (=> (U_2_bool (MapType0Select BoxType boolType v@@11 bx@@1)) ($IsAllocBox bx@@1 t0@@3 h@@1))
 :pattern ( (MapType0Select BoxType boolType v@@11 bx@@1))
)))
 :pattern ( ($IsAlloc (MapType0Type BoxType boolType) v@@11 (TISet t0@@3) h@@1))
)))
(assert (forall ((m@@4 T@U) (item T@U) ) (! (= (U_2_bool (MapType0Select BoxType boolType (|IMap#Items| m@@4) item))  (and (U_2_bool (MapType0Select BoxType boolType (|IMap#Domain| m@@4) (_System.Tuple2._0 ($Unbox DatatypeTypeType item)))) (= (MapType0Select BoxType BoxType (|IMap#Elements| m@@4) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item)))))
 :pattern ( (MapType0Select BoxType boolType (|IMap#Items| m@@4) item))
)))
(assert (forall ((m@@5 T@U) (v@@12 T@U) ) (! (= (U_2_bool (MapType0Select BoxType boolType (|IMap#Values| m@@5) v@@12)) (exists ((u@@3 T@U) ) (!  (and (U_2_bool (MapType0Select BoxType boolType (|IMap#Domain| m@@5) u@@3)) (= v@@12 (MapType0Select BoxType BoxType (|IMap#Elements| m@@5) u@@3)))
 :pattern ( (MapType0Select BoxType boolType (|IMap#Domain| m@@5) u@@3))
 :pattern ( (MapType0Select BoxType BoxType (|IMap#Elements| m@@5) u@@3))
)))
 :pattern ( (MapType0Select BoxType boolType (|IMap#Values| m@@5) v@@12))
)))
(assert (forall ((v@@13 T@U) (t0@@4 T@U) (t1@@0 T@U) (h@@2 T@U) ) (! (= ($IsAlloc IMapType v@@13 (TIMap t0@@4 t1@@0) h@@2) (forall ((bx@@2 T@U) ) (!  (=> (U_2_bool (MapType0Select BoxType boolType (|IMap#Domain| v@@13) bx@@2)) (and ($IsAllocBox (MapType0Select BoxType BoxType (|IMap#Elements| v@@13) bx@@2) t1@@0 h@@2) ($IsAllocBox bx@@2 t0@@4 h@@2)))
 :pattern ( (MapType0Select BoxType BoxType (|IMap#Elements| v@@13) bx@@2))
 :pattern ( (MapType0Select BoxType boolType (|IMap#Domain| v@@13) bx@@2))
)))
 :pattern ( ($IsAlloc IMapType v@@13 (TIMap t0@@4 t1@@0) h@@2))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) ) (!  (=> (|Set#Equal| a@@0 b@@0) (= a@@0 b@@0))
 :pattern ( (|Set#Equal| a@@0 b@@0))
)))
(assert (forall ((a@@1 T@U) (b@@1 T@U) ) (!  (=> (|ISet#Equal| a@@1 b@@1) (= a@@1 b@@1))
 :pattern ( (|ISet#Equal| a@@1 b@@1))
)))
(assert (forall ((a@@2 T@U) (b@@2 T@U) ) (!  (=> (|MultiSet#Equal| a@@2 b@@2) (= a@@2 b@@2))
 :pattern ( (|MultiSet#Equal| a@@2 b@@2))
)))
(assert (forall ((a@@3 T@U) (b@@3 T@U) ) (!  (=> (|Seq#Equal| a@@3 b@@3) (= a@@3 b@@3))
 :pattern ( (|Seq#Equal| a@@3 b@@3))
)))
(assert (forall ((m@@6 T@U) (|m'@@0| T@U) ) (!  (=> (|Map#Equal| m@@6 |m'@@0|) (= m@@6 |m'@@0|))
 :pattern ( (|Map#Equal| m@@6 |m'@@0|))
)))
(assert (forall ((m@@7 T@U) (|m'@@1| T@U) ) (!  (=> (|IMap#Equal| m@@7 |m'@@1|) (= m@@7 |m'@@1|))
 :pattern ( (|IMap#Equal| m@@7 |m'@@1|))
)))
(assert (forall ((v@@14 T@U) (t0@@5 T@U) ) (! (= ($Is MultiSetType v@@14 (TMultiSet t0@@5)) (forall ((bx@@3 T@U) ) (!  (=> (< 0 (|MultiSet#Multiplicity| v@@14 bx@@3)) ($IsBox bx@@3 t0@@5))
 :pattern ( (|MultiSet#Multiplicity| v@@14 bx@@3))
)))
 :pattern ( ($Is MultiSetType v@@14 (TMultiSet t0@@5)))
)))
(assert (forall ((m@@8 T@U) ) (! (= (= m@@8 |IMap#Empty|) (= (|IMap#Domain| m@@8) |ISet#Empty|))
 :pattern ( (|IMap#Domain| m@@8))
)))
(assert (forall ((m@@9 T@U) ) (! (= (= m@@9 |IMap#Empty|) (= (|IMap#Values| m@@9) |ISet#Empty|))
 :pattern ( (|IMap#Values| m@@9))
)))
(assert (forall ((m@@10 T@U) ) (! (= (= m@@10 |IMap#Empty|) (= (|IMap#Items| m@@10) |ISet#Empty|))
 :pattern ( (|IMap#Items| m@@10))
)))
(assert (forall ((m@@11 T@U) ) (!  (or (= m@@11 |IMap#Empty|) (exists ((k@@0 T@U) (v@@15 T@U) ) (U_2_bool (MapType0Select BoxType boolType (|IMap#Items| m@@11) ($Box DatatypeTypeType (|#_System._tuple#2._#Make2| k@@0 v@@15))))))
 :pattern ( (|IMap#Items| m@@11))
)))
(assert (forall ((bx@@4 T@U) ) (!  (=> ($IsBox bx@@4 TInt) (and (= ($Box intType ($Unbox intType bx@@4)) bx@@4) ($Is intType ($Unbox intType bx@@4) TInt)))
 :pattern ( ($IsBox bx@@4 TInt))
)))
(assert (forall ((bx@@5 T@U) ) (!  (=> ($IsBox bx@@5 TReal) (and (= ($Box realType ($Unbox realType bx@@5)) bx@@5) ($Is realType ($Unbox realType bx@@5) TReal)))
 :pattern ( ($IsBox bx@@5 TReal))
)))
(assert (= (Ctor charType) 13))
(assert (forall ((bx@@6 T@U) ) (!  (=> ($IsBox bx@@6 TChar) (and (= ($Box charType ($Unbox charType bx@@6)) bx@@6) ($Is charType ($Unbox charType bx@@6) TChar)))
 :pattern ( ($IsBox bx@@6 TChar))
)))
(assert (forall ((v@@16 T@U) (t@@1 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@16) t@@1) ($Is T@@2 v@@16 t@@1))
 :pattern ( ($IsBox ($Box T@@2 v@@16) t@@1))
)))
(assert (forall ((ms T@U) ) (! (= ($IsGoodMultiSet ms) (forall ((bx@@7 T@U) ) (!  (and (<= 0 (|MultiSet#Multiplicity| ms bx@@7)) (<= (|MultiSet#Multiplicity| ms bx@@7) (|MultiSet#Card| ms)))
 :pattern ( (|MultiSet#Multiplicity| ms bx@@7))
)))
 :pattern ( ($IsGoodMultiSet ms))
)))
(assert (forall ((s@@0 T@U) ) (! (<= 0 (|MultiSet#Card| s@@0))
 :pattern ( (|MultiSet#Card| s@@0))
)))
(assert (forall ((s@@1 T@U) ) (! (<= 0 (|Seq#Length| s@@1))
 :pattern ( (|Seq#Length| s@@1))
)))
(assert (forall ((v@@17 T@U) (t0@@6 T@U) (h@@3 T@U) ) (! (= ($IsAlloc SetType v@@17 (TSet t0@@6) h@@3) (forall ((bx@@8 T@U) ) (!  (=> (|Set#IsMember| v@@17 bx@@8) ($IsAllocBox bx@@8 t0@@6 h@@3))
 :pattern ( (|Set#IsMember| v@@17 bx@@8))
)))
 :pattern ( ($IsAlloc SetType v@@17 (TSet t0@@6) h@@3))
)))
(assert (forall ((o@@1 T@U) ) (! (= (|MultiSet#Multiplicity| |MultiSet#Empty| o@@1) 0)
 :pattern ( (|MultiSet#Multiplicity| |MultiSet#Empty| o@@1))
)))
(assert (forall ((t@@2 T@U) (u@@4 T@U) ) (! (= (Inv0_TMap (TMap t@@2 u@@4)) t@@2)
 :pattern ( (TMap t@@2 u@@4))
)))
(assert (forall ((t@@3 T@U) (u@@5 T@U) ) (! (= (Inv1_TMap (TMap t@@3 u@@5)) u@@5)
 :pattern ( (TMap t@@3 u@@5))
)))
(assert (forall ((t@@4 T@U) (u@@6 T@U) ) (! (= (Tag (TMap t@@4 u@@6)) TagMap)
 :pattern ( (TMap t@@4 u@@6))
)))
(assert (forall ((t@@5 T@U) (u@@7 T@U) ) (! (= (Inv0_TIMap (TIMap t@@5 u@@7)) t@@5)
 :pattern ( (TIMap t@@5 u@@7))
)))
(assert (forall ((t@@6 T@U) (u@@8 T@U) ) (! (= (Inv1_TIMap (TIMap t@@6 u@@8)) u@@8)
 :pattern ( (TIMap t@@6 u@@8))
)))
(assert (forall ((t@@7 T@U) (u@@9 T@U) ) (! (= (Tag (TIMap t@@7 u@@9)) TagIMap)
 :pattern ( (TIMap t@@7 u@@9))
)))
(assert (forall ((|a#0#0#0| T@U) (|a#0#1#0| T@U) ) (! (= (DatatypeCtorId (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|)) |##_System._tuple#2._#Make2|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|))
)))
(assert (forall ((|_System._tuple#2$T0@@2| T@U) (|_System._tuple#2$T1@@2| T@U) ) (! (= (Tclass._System.Tuple2_0 (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|)) |_System._tuple#2$T0@@2|)
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|))
)))
(assert (forall ((|_System._tuple#2$T0@@3| T@U) (|_System._tuple#2$T1@@3| T@U) ) (! (= (Tclass._System.Tuple2_1 (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|)) |_System._tuple#2$T1@@3|)
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|))
)))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| T@U) ) (! (= (_System.Tuple2._0 (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|)) |a#4#0#0|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|))
)))
(assert (forall ((|a#6#0#0| T@U) (|a#6#1#0| T@U) ) (! (= (_System.Tuple2._1 (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|)) |a#6#1#0|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|))
)))
(assert (forall ((v@@18 T@U) (t0@@7 T@U) (h@@4 T@U) ) (! (= ($IsAlloc SeqType v@@18 (TSeq t0@@7) h@@4) (forall ((i Int) ) (!  (=> (and (<= 0 i) (< i (|Seq#Length| v@@18))) ($IsAllocBox (|Seq#Index| v@@18 i) t0@@7 h@@4))
 :pattern ( (|Seq#Index| v@@18 i))
)))
 :pattern ( ($IsAlloc SeqType v@@18 (TSeq t0@@7) h@@4))
)))
(assert (forall ((w@@0 Int) ) (! (= (Inv0_TBitvector (TBitvector w@@0)) w@@0)
 :pattern ( (TBitvector w@@0))
)))
(assert (forall ((t@@8 T@U) ) (! (= (Inv0_TSet (TSet t@@8)) t@@8)
 :pattern ( (TSet t@@8))
)))
(assert (forall ((t@@9 T@U) ) (! (= (Tag (TSet t@@9)) TagSet)
 :pattern ( (TSet t@@9))
)))
(assert (forall ((t@@10 T@U) ) (! (= (Inv0_TISet (TISet t@@10)) t@@10)
 :pattern ( (TISet t@@10))
)))
(assert (forall ((t@@11 T@U) ) (! (= (Tag (TISet t@@11)) TagISet)
 :pattern ( (TISet t@@11))
)))
(assert (forall ((t@@12 T@U) ) (! (= (Inv0_TMultiSet (TMultiSet t@@12)) t@@12)
 :pattern ( (TMultiSet t@@12))
)))
(assert (forall ((t@@13 T@U) ) (! (= (Tag (TMultiSet t@@13)) TagMultiSet)
 :pattern ( (TMultiSet t@@13))
)))
(assert (forall ((t@@14 T@U) ) (! (= (Inv0_TSeq (TSeq t@@14)) t@@14)
 :pattern ( (TSeq t@@14))
)))
(assert (forall ((t@@15 T@U) ) (! (= (Tag (TSeq t@@15)) TagSeq)
 :pattern ( (TSeq t@@15))
)))
(assert (forall ((x@@7 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@7)) x@@7)
 :pattern ( ($Box T@@3 x@@7))
)))
(assert (forall ((v@@19 T@U) (t0@@8 T@U) (t1@@1 T@U) (h@@5 T@U) ) (! (= ($IsAlloc MapType v@@19 (TMap t0@@8 t1@@1) h@@5) (forall ((bx@@9 T@U) ) (!  (=> (|Set#IsMember| (|Map#Domain| v@@19) bx@@9) (and ($IsAllocBox (MapType0Select BoxType BoxType (|Map#Elements| v@@19) bx@@9) t1@@1 h@@5) ($IsAllocBox bx@@9 t0@@8 h@@5)))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| v@@19) bx@@9))
 :pattern ( (|Set#IsMember| (|Map#Domain| v@@19) bx@@9))
)))
 :pattern ( ($IsAlloc MapType v@@19 (TMap t0@@8 t1@@1) h@@5))
)))
(assert (forall ((v@@20 T@U) (t0@@9 T@U) (t1@@2 T@U) ) (! (= ($Is IMapType v@@20 (TIMap t0@@9 t1@@2)) (forall ((bx@@10 T@U) ) (!  (=> (U_2_bool (MapType0Select BoxType boolType (|IMap#Domain| v@@20) bx@@10)) (and ($IsBox (MapType0Select BoxType BoxType (|IMap#Elements| v@@20) bx@@10) t1@@2) ($IsBox bx@@10 t0@@9)))
 :pattern ( (MapType0Select BoxType BoxType (|IMap#Elements| v@@20) bx@@10))
 :pattern ( (MapType0Select BoxType boolType (|IMap#Domain| v@@20) bx@@10))
)))
 :pattern ( ($Is IMapType v@@20 (TIMap t0@@9 t1@@2)))
)))
(assert (forall ((|a#5#0#0| T@U) (|a#5#1#0| T@U) ) (! (< (BoxRank |a#5#0#0|) (DtRank (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|))
)))
(assert (forall ((|a#7#0#0| T@U) (|a#7#1#0| T@U) ) (! (< (BoxRank |a#7#1#0|) (DtRank (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|))
)))
(assert (forall ((s@@2 T@U) ) (!  (and (= (= (|MultiSet#Card| s@@2) 0) (= s@@2 |MultiSet#Empty|)) (=> (or (not (= (|MultiSet#Card| s@@2) 0)) (not true)) (exists ((x@@8 T@U) ) (! (< 0 (|MultiSet#Multiplicity| s@@2 x@@8))
 :pattern ( (|MultiSet#Multiplicity| s@@2 x@@8))
))))
 :pattern ( (|MultiSet#Card| s@@2))
)))
(assert (forall ((u@@10 T@U) ) (!  (not (|Set#IsMember| (|Map#Domain| |Map#Empty|) u@@10))
 :pattern ( (|Set#IsMember| (|Map#Domain| |Map#Empty|) u@@10))
)))
(assert (forall ((bx@@11 T@U) (s@@3 T@U) (t@@16 T@U) ) (!  (=> ($IsBox bx@@11 (TMap s@@3 t@@16)) (and (= ($Box MapType ($Unbox MapType bx@@11)) bx@@11) ($Is MapType ($Unbox MapType bx@@11) (TMap s@@3 t@@16))))
 :pattern ( ($IsBox bx@@11 (TMap s@@3 t@@16)))
)))
(assert (forall ((bx@@12 T@U) (s@@4 T@U) (t@@17 T@U) ) (!  (=> ($IsBox bx@@12 (TIMap s@@4 t@@17)) (and (= ($Box IMapType ($Unbox IMapType bx@@12)) bx@@12) ($Is IMapType ($Unbox IMapType bx@@12) (TIMap s@@4 t@@17))))
 :pattern ( ($IsBox bx@@12 (TIMap s@@4 t@@17)))
)))
(assert (forall ((|_System._tuple#2$T0@@4| T@U) (|_System._tuple#2$T1@@4| T@U) (bx@@13 T@U) ) (!  (=> ($IsBox bx@@13 (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@13)) bx@@13) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@13) (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|))))
 :pattern ( ($IsBox bx@@13 (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|)))
)))
(assert (forall ((o@@2 T@U) ) (!  (not (U_2_bool (MapType0Select BoxType boolType |ISet#Empty| o@@2)))
 :pattern ( (MapType0Select BoxType boolType |ISet#Empty| o@@2))
)))
(assert  (and (and (and (forall ((t0@@10 T@T) (t1@@3 T@T) (t2 T@T) (val@@1 T@U) (m@@12 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@10 t1@@3 t2 (MapType1Store t0@@10 t1@@3 t2 m@@12 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@13 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@13 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@13 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@14 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@14 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@14 y0@@1 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 14)) (= (Ctor FieldType) 15)))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((|_System._tuple#2$T0@@5| T@U) (|_System._tuple#2$T1@@5| T@U) ) (!  (and (= (Tag (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|)) Tagclass._System.Tuple2) (= (TagFamily (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|)) |tytagFamily$_tuple#2|))
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|))
)))
(assert (forall ((m@@15 T@U) (|m'@@2| T@U) ) (! (= (|IMap#Equal| m@@15 |m'@@2|)  (and (forall ((u@@11 T@U) ) (= (U_2_bool (MapType0Select BoxType boolType (|IMap#Domain| m@@15) u@@11)) (U_2_bool (MapType0Select BoxType boolType (|IMap#Domain| |m'@@2|) u@@11)))) (forall ((u@@12 T@U) )  (=> (U_2_bool (MapType0Select BoxType boolType (|IMap#Domain| m@@15) u@@12)) (= (MapType0Select BoxType BoxType (|IMap#Elements| m@@15) u@@12) (MapType0Select BoxType BoxType (|IMap#Elements| |m'@@2|) u@@12))))))
 :pattern ( (|IMap#Equal| m@@15 |m'@@2|))
)))
(assert (forall ((m@@16 T@U) ) (!  (or (= m@@16 |Map#Empty|) (exists ((k@@1 T@U) ) (|Set#IsMember| (|Map#Domain| m@@16) k@@1)))
 :pattern ( (|Map#Domain| m@@16))
)))
(assert (forall ((m@@17 T@U) ) (!  (or (= m@@17 |Map#Empty|) (exists ((v@@21 T@U) ) (|Set#IsMember| (|Map#Values| m@@17) v@@21)))
 :pattern ( (|Map#Values| m@@17))
)))
(assert (forall ((m@@18 T@U) (item@@0 T@U) ) (! (= (|Set#IsMember| (|Map#Items| m@@18) item@@0)  (and (|Set#IsMember| (|Map#Domain| m@@18) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0))) (= (MapType0Select BoxType BoxType (|Map#Elements| m@@18) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item@@0)))))
 :pattern ( (|Set#IsMember| (|Map#Items| m@@18) item@@0))
)))
(assert (forall ((m@@19 T@U) (v@@22 T@U) ) (! (= (|Set#IsMember| (|Map#Values| m@@19) v@@22) (exists ((u@@13 T@U) ) (!  (and (|Set#IsMember| (|Map#Domain| m@@19) u@@13) (= v@@22 (MapType0Select BoxType BoxType (|Map#Elements| m@@19) u@@13)))
 :pattern ( (|Set#IsMember| (|Map#Domain| m@@19) u@@13))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| m@@19) u@@13))
)))
 :pattern ( (|Set#IsMember| (|Map#Values| m@@19) v@@22))
)))
(assert (forall ((d@@2 T@U) ) (! (= (BoxRank ($Box DatatypeTypeType d@@2)) (DtRank d@@2))
 :pattern ( (BoxRank ($Box DatatypeTypeType d@@2)))
)))
(assert (forall ((bx@@14 T@U) ) (!  (=> ($IsBox bx@@14 (TBitvector 0)) (and (= ($Box intType ($Unbox intType bx@@14)) bx@@14) ($Is intType ($Unbox intType bx@@14) (TBitvector 0))))
 :pattern ( ($IsBox bx@@14 (TBitvector 0)))
)))
(assert (forall ((bx@@15 T@U) (t@@18 T@U) ) (!  (=> ($IsBox bx@@15 (TSet t@@18)) (and (= ($Box SetType ($Unbox SetType bx@@15)) bx@@15) ($Is SetType ($Unbox SetType bx@@15) (TSet t@@18))))
 :pattern ( ($IsBox bx@@15 (TSet t@@18)))
)))
(assert (forall ((bx@@16 T@U) (t@@19 T@U) ) (!  (=> ($IsBox bx@@16 (TISet t@@19)) (and (= ($Box (MapType0Type BoxType boolType) ($Unbox (MapType0Type BoxType boolType) bx@@16)) bx@@16) ($Is (MapType0Type BoxType boolType) ($Unbox (MapType0Type BoxType boolType) bx@@16) (TISet t@@19))))
 :pattern ( ($IsBox bx@@16 (TISet t@@19)))
)))
(assert (forall ((bx@@17 T@U) (t@@20 T@U) ) (!  (=> ($IsBox bx@@17 (TMultiSet t@@20)) (and (= ($Box MultiSetType ($Unbox MultiSetType bx@@17)) bx@@17) ($Is MultiSetType ($Unbox MultiSetType bx@@17) (TMultiSet t@@20))))
 :pattern ( ($IsBox bx@@17 (TMultiSet t@@20)))
)))
(assert (forall ((bx@@18 T@U) (t@@21 T@U) ) (!  (=> ($IsBox bx@@18 (TSeq t@@21)) (and (= ($Box SeqType ($Unbox SeqType bx@@18)) bx@@18) ($Is SeqType ($Unbox SeqType bx@@18) (TSeq t@@21))))
 :pattern ( ($IsBox bx@@18 (TSeq t@@21)))
)))
(assert (forall ((bx@@19 T@U) ) (!  (=> ($IsBox bx@@19 (TBitvector 12)) (and (= ($Box bv12Type ($Unbox bv12Type bx@@19)) bx@@19) ($Is bv12Type ($Unbox bv12Type bx@@19) (TBitvector 12))))
 :pattern ( ($IsBox bx@@19 (TBitvector 12)))
)))
(assert (forall ((bx@@20 T@U) ) (!  (=> ($IsBox bx@@20 (TBitvector 28)) (and (= ($Box bv28Type ($Unbox bv28Type bx@@20)) bx@@20) ($Is bv28Type ($Unbox bv28Type bx@@20) (TBitvector 28))))
 :pattern ( ($IsBox bx@@20 (TBitvector 28)))
)))
(assert (forall ((v@@23 T@U) (t0@@11 T@U) (t1@@4 T@U) ) (! (= ($Is MapType v@@23 (TMap t0@@11 t1@@4)) (forall ((bx@@21 T@U) ) (!  (=> (|Set#IsMember| (|Map#Domain| v@@23) bx@@21) (and ($IsBox (MapType0Select BoxType BoxType (|Map#Elements| v@@23) bx@@21) t1@@4) ($IsBox bx@@21 t0@@11)))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| v@@23) bx@@21))
 :pattern ( (|Set#IsMember| (|Map#Domain| v@@23) bx@@21))
)))
 :pattern ( ($Is MapType v@@23 (TMap t0@@11 t1@@4)))
)))
(assert (forall ((a@@4 T@U) (b@@4 T@U) ) (! (= (|Set#Equal| a@@4 b@@4) (forall ((o@@3 T@U) ) (! (= (|Set#IsMember| a@@4 o@@3) (|Set#IsMember| b@@4 o@@3))
 :pattern ( (|Set#IsMember| a@@4 o@@3))
 :pattern ( (|Set#IsMember| b@@4 o@@3))
)))
 :pattern ( (|Set#Equal| a@@4 b@@4))
)))
(assert (forall ((d@@3 T@U) (|_System._tuple#2$T0@@6| T@U) ($h@@0 T@U) ) (!  (=> (and ($IsGoodHeap $h@@0) (and (_System.Tuple2.___hMake2_q d@@3) (exists ((|_System._tuple#2$T1@@6| T@U) ) (! ($IsAlloc DatatypeTypeType d@@3 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@0)
 :pattern ( ($IsAlloc DatatypeTypeType d@@3 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@0))
)))) ($IsAllocBox (_System.Tuple2._0 d@@3) |_System._tuple#2$T0@@6| $h@@0))
 :pattern ( ($IsAllocBox (_System.Tuple2._0 d@@3) |_System._tuple#2$T0@@6| $h@@0))
)))
(assert (forall ((d@@4 T@U) (|_System._tuple#2$T1@@7| T@U) ($h@@1 T@U) ) (!  (=> (and ($IsGoodHeap $h@@1) (and (_System.Tuple2.___hMake2_q d@@4) (exists ((|_System._tuple#2$T0@@7| T@U) ) (! ($IsAlloc DatatypeTypeType d@@4 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|) $h@@1)
 :pattern ( ($IsAlloc DatatypeTypeType d@@4 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|) $h@@1))
)))) ($IsAllocBox (_System.Tuple2._1 d@@4) |_System._tuple#2$T1@@7| $h@@1))
 :pattern ( ($IsAllocBox (_System.Tuple2._1 d@@4) |_System._tuple#2$T1@@7| $h@@1))
)))
(assert (forall ((|a#3#0#0| T@U) (|a#3#1#0| T@U) ) (! (= (|#_System._tuple#2._#Make2| (Lit BoxType |a#3#0#0|) (Lit BoxType |a#3#1#0|)) (Lit DatatypeTypeType (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| (Lit BoxType |a#3#0#0|) (Lit BoxType |a#3#1#0|)))
)))
(assert (forall ((x@@9 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@9)) (Lit BoxType ($Box T@@4 x@@9)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@9)))
)))
(assert (forall ((s@@5 T@U) ) (!  (=> (= (|Seq#Length| s@@5) 0) (= s@@5 |Seq#Empty|))
 :pattern ( (|Seq#Length| s@@5))
)))
(assert (forall ((a@@5 T@U) (b@@5 T@U) ) (! (= (|MultiSet#Equal| a@@5 b@@5) (forall ((o@@4 T@U) ) (! (= (|MultiSet#Multiplicity| a@@5 o@@4) (|MultiSet#Multiplicity| b@@5 o@@4))
 :pattern ( (|MultiSet#Multiplicity| a@@5 o@@4))
 :pattern ( (|MultiSet#Multiplicity| b@@5 o@@4))
)))
 :pattern ( (|MultiSet#Equal| a@@5 b@@5))
)))
(assert (forall ((v@@24 T@U) (t0@@12 T@U) (h@@6 T@U) ) (! (= ($IsAlloc MultiSetType v@@24 (TMultiSet t0@@12) h@@6) (forall ((bx@@22 T@U) ) (!  (=> (< 0 (|MultiSet#Multiplicity| v@@24 bx@@22)) ($IsAllocBox bx@@22 t0@@12 h@@6))
 :pattern ( (|MultiSet#Multiplicity| v@@24 bx@@22))
)))
 :pattern ( ($IsAlloc MultiSetType v@@24 (TMultiSet t0@@12) h@@6))
)))
(assert (forall ((h@@7 T@U) (v@@25 T@U) ) (! ($IsAlloc intType v@@25 TInt h@@7)
 :pattern ( ($IsAlloc intType v@@25 TInt h@@7))
)))
(assert (forall ((h@@8 T@U) (v@@26 T@U) ) (! ($IsAlloc realType v@@26 TReal h@@8)
 :pattern ( ($IsAlloc realType v@@26 TReal h@@8))
)))
(assert (forall ((h@@9 T@U) (v@@27 T@U) ) (! ($IsAlloc charType v@@27 TChar h@@9)
 :pattern ( ($IsAlloc charType v@@27 TChar h@@9))
)))
(assert (forall ((v@@28 T@U) (t0@@13 T@U) ) (! (= ($Is SeqType v@@28 (TSeq t0@@13)) (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| v@@28))) ($IsBox (|Seq#Index| v@@28 i@@0) t0@@13))
 :pattern ( (|Seq#Index| v@@28 i@@0))
)))
 :pattern ( ($Is SeqType v@@28 (TSeq t0@@13)))
)))
(assert (forall ((m@@20 T@U) ) (!  (or (= m@@20 |Map#Empty|) (exists ((k@@2 T@U) (v@@29 T@U) ) (|Set#IsMember| (|Map#Items| m@@20) ($Box DatatypeTypeType (|#_System._tuple#2._#Make2| k@@2 v@@29)))))
 :pattern ( (|Map#Items| m@@20))
)))
(assert (forall ((s@@6 T@U) (i@@1 Int) ) (!  (=> (and (<= 0 i@@1) (< i@@1 (|Seq#Length| s@@6))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@6 i@@1))) (|Seq#Rank| s@@6)))
 :pattern ( (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@6 i@@1))))
)))
(assert (forall ((v@@30 T@U) (t0@@14 T@U) (t1@@5 T@U) ) (!  (=> ($Is MapType v@@30 (TMap t0@@14 t1@@5)) (and (and ($Is SetType (|Map#Domain| v@@30) (TSet t0@@14)) ($Is SetType (|Map#Values| v@@30) (TSet t1@@5))) ($Is SetType (|Map#Items| v@@30) (TSet (Tclass._System.Tuple2 t0@@14 t1@@5)))))
 :pattern ( ($Is MapType v@@30 (TMap t0@@14 t1@@5)))
)))
(assert (forall ((v@@31 T@U) (t0@@15 T@U) (t1@@6 T@U) ) (!  (=> ($Is IMapType v@@31 (TIMap t0@@15 t1@@6)) (and (and ($Is (MapType0Type BoxType boolType) (|IMap#Domain| v@@31) (TISet t0@@15)) ($Is (MapType0Type BoxType boolType) (|IMap#Values| v@@31) (TISet t1@@6))) ($Is (MapType0Type BoxType boolType) (|IMap#Items| v@@31) (TISet (Tclass._System.Tuple2 t0@@15 t1@@6)))))
 :pattern ( ($Is IMapType v@@31 (TIMap t0@@15 t1@@6)))
)))
(assert (forall ((v@@32 T@U) ) (! ($Is intType v@@32 TInt)
 :pattern ( ($Is intType v@@32 TInt))
)))
(assert (forall ((v@@33 T@U) ) (! ($Is realType v@@33 TReal)
 :pattern ( ($Is realType v@@33 TReal))
)))
(assert (forall ((v@@34 T@U) ) (! ($Is charType v@@34 TChar)
 :pattern ( ($Is charType v@@34 TChar))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |x#0| () T@U)
(declare-fun |x'#0_0@0| () T@U)
(declare-fun $Heap () T@U)
(declare-fun |w#0| () T@U)
(declare-fun |w'#0@1| () T@U)
(declare-fun |w'#0_0@0| () T@U)
(declare-fun |v#0| () T@U)
(declare-fun |v'#0@1| () T@U)
(declare-fun |v'#0_0@0| () T@U)
(declare-fun |u#0| () T@U)
(declare-fun _module._default.OtherEq$U@@0 () T@U)
(declare-fun _module._default.OtherEq$V@@0 () T@U)
(declare-fun |u'#0@1| () T@U)
(declare-fun |u'#0_0@0| () T@U)
(declare-fun |t#0| () T@U)
(declare-fun |t'#0@1| () T@U)
(declare-fun |t'#0_0@0| () T@U)
(declare-fun |s#0| () T@U)
(declare-fun |s'#0@1| () T@U)
(declare-fun |s'#0_0@0| () T@U)
(declare-fun |b#0| () Bool)
(declare-fun |x''#1_1@0| () T@U)
(declare-fun |x''#1_2@0| () T@U)
(declare-fun |w''#1_1@0| () T@U)
(declare-fun |w''#1_2@0| () T@U)
(declare-fun |w'#0@0| () T@U)
(declare-fun |v''#1_1@0| () T@U)
(declare-fun |v''#1_2@0| () T@U)
(declare-fun |v'#0@0| () T@U)
(declare-fun |u''#1_1@0| () T@U)
(declare-fun |u''#1_2@0| () T@U)
(declare-fun |u'#0@0| () T@U)
(declare-fun |t''#1_1@0| () T@U)
(declare-fun |t''#1_2@0| () T@U)
(declare-fun |t'#0@0| () T@U)
(declare-fun |s''#1_1@0| () T@U)
(declare-fun |s''#1_2@0| () T@U)
(declare-fun |s'#0@0| () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |s'#0| () T@U)
(declare-fun |t'#0| () T@U)
(declare-fun |u'#0| () T@U)
(declare-fun |v'#0| () T@U)
(declare-fun |w'#0| () T@U)
(declare-fun |x'#0| () T@U)
(declare-fun $FunctionContextHeight () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 58) (let ((anon13_correct  (=> (= (ControlFlow 0 33) (- 0 32)) (or (and ($Is IMapType |x#0| (TIMap (TBitvector 28) TInt)) (|IMap#Equal| |x#0| |x#0|)) (exists ((|$as#x'0_0#0_0| T@U) )  (and ($Is IMapType |$as#x'0_0#0_0| (TIMap (TBitvector 28) TInt)) (|IMap#Equal| |$as#x'0_0#0_0| |x#0|)))))))
(let ((anon33_Else_correct  (=> (and (not (and ($Is IMapType |x'#0_0@0| (TIMap (TBitvector 28) TInt)) ($IsAlloc IMapType |x'#0_0@0| (TIMap (TBitvector 28) TInt) $Heap))) (= (ControlFlow 0 35) 33)) anon13_correct)))
(let ((anon33_Then_correct  (=> (and (and ($Is IMapType |x'#0_0@0| (TIMap (TBitvector 28) TInt)) ($IsAlloc IMapType |x'#0_0@0| (TIMap (TBitvector 28) TInt) $Heap)) (= (ControlFlow 0 34) 33)) anon13_correct)))
(let ((anon11_correct  (and (=> (= (ControlFlow 0 36) (- 0 37)) (or (and ($Is (MapType0Type BoxType boolType) |w#0| (TISet (TBitvector 12))) (|ISet#Equal| |w#0| |w#0|)) (or (and ($Is (MapType0Type BoxType boolType) (Lit (MapType0Type BoxType boolType) |ISet#Empty|) (TISet (TBitvector 12))) (|ISet#Equal| |ISet#Empty| |w#0|)) (exists ((|$as#w'0_0#0_0| T@U) )  (and ($Is (MapType0Type BoxType boolType) |$as#w'0_0#0_0| (TISet (TBitvector 12))) (|ISet#Equal| |$as#w'0_0#0_0| |w#0|)))))) (=> (or (and ($Is (MapType0Type BoxType boolType) |w#0| (TISet (TBitvector 12))) (|ISet#Equal| |w#0| |w#0|)) (or (and ($Is (MapType0Type BoxType boolType) (Lit (MapType0Type BoxType boolType) |ISet#Empty|) (TISet (TBitvector 12))) (|ISet#Equal| |ISet#Empty| |w#0|)) (exists ((|$as#w'0_0#0_0@@0| T@U) )  (and ($Is (MapType0Type BoxType boolType) |$as#w'0_0#0_0@@0| (TISet (TBitvector 12))) (|ISet#Equal| |$as#w'0_0#0_0@@0| |w#0|))))) (=> (and (and ($Is (MapType0Type BoxType boolType) |w'#0@1| (TISet (TBitvector 12))) ($IsAlloc (MapType0Type BoxType boolType) |w'#0@1| (TISet (TBitvector 12)) $Heap)) (|ISet#Equal| |w'#0@1| |w#0|)) (and (=> (= (ControlFlow 0 36) 34) anon33_Then_correct) (=> (= (ControlFlow 0 36) 35) anon33_Else_correct)))))))
(let ((anon32_Else_correct  (=> (and (not (and ($Is (MapType0Type BoxType boolType) |w'#0_0@0| (TISet (TBitvector 12))) ($IsAlloc (MapType0Type BoxType boolType) |w'#0_0@0| (TISet (TBitvector 12)) $Heap))) (= (ControlFlow 0 39) 36)) anon11_correct)))
(let ((anon32_Then_correct  (=> (and (and ($Is (MapType0Type BoxType boolType) |w'#0_0@0| (TISet (TBitvector 12))) ($IsAlloc (MapType0Type BoxType boolType) |w'#0_0@0| (TISet (TBitvector 12)) $Heap)) (= (ControlFlow 0 38) 36)) anon11_correct)))
(let ((anon9_correct  (and (=> (= (ControlFlow 0 40) (- 0 41)) (or (and ($Is MultiSetType |v#0| (TMultiSet TChar)) (|MultiSet#Equal| |v#0| |v#0|)) (or (and ($Is MultiSetType (Lit MultiSetType |MultiSet#Empty|) (TMultiSet TChar)) (|MultiSet#Equal| |MultiSet#Empty| |v#0|)) (exists ((|$as#v'0_0#0_0| T@U) )  (and ($Is MultiSetType |$as#v'0_0#0_0| (TMultiSet TChar)) (|MultiSet#Equal| |$as#v'0_0#0_0| |v#0|)))))) (=> (or (and ($Is MultiSetType |v#0| (TMultiSet TChar)) (|MultiSet#Equal| |v#0| |v#0|)) (or (and ($Is MultiSetType (Lit MultiSetType |MultiSet#Empty|) (TMultiSet TChar)) (|MultiSet#Equal| |MultiSet#Empty| |v#0|)) (exists ((|$as#v'0_0#0_0@@0| T@U) )  (and ($Is MultiSetType |$as#v'0_0#0_0@@0| (TMultiSet TChar)) (|MultiSet#Equal| |$as#v'0_0#0_0@@0| |v#0|))))) (=> (and (and ($Is MultiSetType |v'#0@1| (TMultiSet TChar)) ($IsAlloc MultiSetType |v'#0@1| (TMultiSet TChar) $Heap)) (|MultiSet#Equal| |v'#0@1| |v#0|)) (and (=> (= (ControlFlow 0 40) 38) anon32_Then_correct) (=> (= (ControlFlow 0 40) 39) anon32_Else_correct)))))))
(let ((anon31_Else_correct  (=> (and (not (and ($Is MultiSetType |v'#0_0@0| (TMultiSet TChar)) ($IsAlloc MultiSetType |v'#0_0@0| (TMultiSet TChar) $Heap))) (= (ControlFlow 0 43) 40)) anon9_correct)))
(let ((anon31_Then_correct  (=> (and (and ($Is MultiSetType |v'#0_0@0| (TMultiSet TChar)) ($IsAlloc MultiSetType |v'#0_0@0| (TMultiSet TChar) $Heap)) (= (ControlFlow 0 42) 40)) anon9_correct)))
(let ((anon7_correct  (and (=> (= (ControlFlow 0 44) (- 0 45)) (or (and ($Is MapType |u#0| (TMap _module._default.OtherEq$U@@0 _module._default.OtherEq$V@@0)) (|Map#Equal| |u#0| |u#0|)) (exists ((|$as#u'0_0#0_0| T@U) )  (and ($Is MapType |$as#u'0_0#0_0| (TMap _module._default.OtherEq$U@@0 _module._default.OtherEq$V@@0)) (|Map#Equal| |$as#u'0_0#0_0| |u#0|))))) (=> (or (and ($Is MapType |u#0| (TMap _module._default.OtherEq$U@@0 _module._default.OtherEq$V@@0)) (|Map#Equal| |u#0| |u#0|)) (exists ((|$as#u'0_0#0_0@@0| T@U) )  (and ($Is MapType |$as#u'0_0#0_0@@0| (TMap _module._default.OtherEq$U@@0 _module._default.OtherEq$V@@0)) (|Map#Equal| |$as#u'0_0#0_0@@0| |u#0|)))) (=> (and (and ($Is MapType |u'#0@1| (TMap _module._default.OtherEq$U@@0 _module._default.OtherEq$V@@0)) ($IsAlloc MapType |u'#0@1| (TMap _module._default.OtherEq$U@@0 _module._default.OtherEq$V@@0) $Heap)) (|Map#Equal| |u'#0@1| |u#0|)) (and (=> (= (ControlFlow 0 44) 42) anon31_Then_correct) (=> (= (ControlFlow 0 44) 43) anon31_Else_correct)))))))
(let ((anon30_Else_correct  (=> (and (not (and ($Is MapType |u'#0_0@0| (TMap _module._default.OtherEq$U@@0 _module._default.OtherEq$V@@0)) ($IsAlloc MapType |u'#0_0@0| (TMap _module._default.OtherEq$U@@0 _module._default.OtherEq$V@@0) $Heap))) (= (ControlFlow 0 47) 44)) anon7_correct)))
(let ((anon30_Then_correct  (=> (and (and ($Is MapType |u'#0_0@0| (TMap _module._default.OtherEq$U@@0 _module._default.OtherEq$V@@0)) ($IsAlloc MapType |u'#0_0@0| (TMap _module._default.OtherEq$U@@0 _module._default.OtherEq$V@@0) $Heap)) (= (ControlFlow 0 46) 44)) anon7_correct)))
(let ((anon5_correct  (and (=> (= (ControlFlow 0 48) (- 0 49)) (or (and ($Is SeqType |t#0| (TSeq TReal)) (|Seq#Equal| |t#0| |t#0|)) (or (and ($Is SeqType (Lit SeqType |Seq#Empty|) (TSeq TReal)) (|Seq#Equal| |Seq#Empty| |t#0|)) (exists ((|$as#t'0_0#0_0| T@U) )  (and ($Is SeqType |$as#t'0_0#0_0| (TSeq TReal)) (|Seq#Equal| |$as#t'0_0#0_0| |t#0|)))))) (=> (or (and ($Is SeqType |t#0| (TSeq TReal)) (|Seq#Equal| |t#0| |t#0|)) (or (and ($Is SeqType (Lit SeqType |Seq#Empty|) (TSeq TReal)) (|Seq#Equal| |Seq#Empty| |t#0|)) (exists ((|$as#t'0_0#0_0@@0| T@U) )  (and ($Is SeqType |$as#t'0_0#0_0@@0| (TSeq TReal)) (|Seq#Equal| |$as#t'0_0#0_0@@0| |t#0|))))) (=> (and (and ($Is SeqType |t'#0@1| (TSeq TReal)) ($IsAlloc SeqType |t'#0@1| (TSeq TReal) $Heap)) (|Seq#Equal| |t'#0@1| |t#0|)) (and (=> (= (ControlFlow 0 48) 46) anon30_Then_correct) (=> (= (ControlFlow 0 48) 47) anon30_Else_correct)))))))
(let ((anon29_Else_correct  (=> (and (not (and ($Is SeqType |t'#0_0@0| (TSeq TReal)) ($IsAlloc SeqType |t'#0_0@0| (TSeq TReal) $Heap))) (= (ControlFlow 0 51) 48)) anon5_correct)))
(let ((anon29_Then_correct  (=> (and (and ($Is SeqType |t'#0_0@0| (TSeq TReal)) ($IsAlloc SeqType |t'#0_0@0| (TSeq TReal) $Heap)) (= (ControlFlow 0 50) 48)) anon5_correct)))
(let ((anon3_correct  (and (=> (= (ControlFlow 0 52) (- 0 53)) (or (and ($Is SetType |s#0| (TSet TInt)) (|Set#Equal| |s#0| |s#0|)) (or (and ($Is SetType (Lit SetType |Set#Empty|) (TSet TInt)) (|Set#Equal| |Set#Empty| |s#0|)) (exists ((|$as#s'0_0#0_0| T@U) )  (and ($Is SetType |$as#s'0_0#0_0| (TSet TInt)) (|Set#Equal| |$as#s'0_0#0_0| |s#0|)))))) (=> (or (and ($Is SetType |s#0| (TSet TInt)) (|Set#Equal| |s#0| |s#0|)) (or (and ($Is SetType (Lit SetType |Set#Empty|) (TSet TInt)) (|Set#Equal| |Set#Empty| |s#0|)) (exists ((|$as#s'0_0#0_0@@0| T@U) )  (and ($Is SetType |$as#s'0_0#0_0@@0| (TSet TInt)) (|Set#Equal| |$as#s'0_0#0_0@@0| |s#0|))))) (=> (and (and ($Is SetType |s'#0@1| (TSet TInt)) ($IsAlloc SetType |s'#0@1| (TSet TInt) $Heap)) (|Set#Equal| |s'#0@1| |s#0|)) (and (=> (= (ControlFlow 0 52) 50) anon29_Then_correct) (=> (= (ControlFlow 0 52) 51) anon29_Else_correct)))))))
(let ((anon28_Else_correct  (=> (and (not (and ($Is SetType |s'#0_0@0| (TSet TInt)) ($IsAlloc SetType |s'#0_0@0| (TSet TInt) $Heap))) (= (ControlFlow 0 55) 52)) anon3_correct)))
(let ((anon28_Then_correct  (=> (and (and ($Is SetType |s'#0_0@0| (TSet TInt)) ($IsAlloc SetType |s'#0_0@0| (TSet TInt) $Heap)) (= (ControlFlow 0 54) 52)) anon3_correct)))
(let ((anon27_Then_correct  (=> |b#0| (and (=> (= (ControlFlow 0 56) 54) anon28_Then_correct) (=> (= (ControlFlow 0 56) 55) anon28_Else_correct)))))
(let ((anon26_correct  (and (=> (= (ControlFlow 0 2) (- 0 3)) (or (and ($Is IMapType |x#0| (TIMap (TBitvector 28) TInt)) (|IMap#Equal| |x#0| |x#0|)) (exists ((|x''#1_0| T@U) )  (and ($Is IMapType |x''#1_0| (TIMap (TBitvector 28) TInt)) (|IMap#Equal| |x''#1_0| |x#0|))))) (=> (or (and ($Is IMapType |x#0| (TIMap (TBitvector 28) TInt)) (|IMap#Equal| |x#0| |x#0|)) (exists ((|x''#1_0@@0| T@U) )  (and ($Is IMapType |x''#1_0@@0| (TIMap (TBitvector 28) TInt)) (|IMap#Equal| |x''#1_0@@0| |x#0|)))) (=> (and (and (and ($Is IMapType |x''#1_1@0| (TIMap (TBitvector 28) TInt)) ($IsAlloc IMapType |x''#1_1@0| (TIMap (TBitvector 28) TInt) $Heap)) (|IMap#Equal| |x''#1_1@0| |x#0|)) (and (and ($Is IMapType |x''#1_2@0| (TIMap (TBitvector 28) TInt)) ($IsAlloc IMapType |x''#1_2@0| (TIMap (TBitvector 28) TInt) $Heap)) (and (|IMap#Equal| |x''#1_2@0| |x#0|) (= (ControlFlow 0 2) (- 0 1))))) (|IMap#Equal| |x''#1_1@0| |x''#1_2@0|))))))
(let ((anon39_Else_correct  (=> (and (not (and ($Is IMapType |x''#1_1@0| (TIMap (TBitvector 28) TInt)) ($IsAlloc IMapType |x''#1_1@0| (TIMap (TBitvector 28) TInt) $Heap))) (= (ControlFlow 0 5) 2)) anon26_correct)))
(let ((anon39_Then_correct  (=> (and (and ($Is IMapType |x''#1_1@0| (TIMap (TBitvector 28) TInt)) ($IsAlloc IMapType |x''#1_1@0| (TIMap (TBitvector 28) TInt) $Heap)) (= (ControlFlow 0 4) 2)) anon26_correct)))
(let ((anon24_correct  (and (=> (= (ControlFlow 0 6) (- 0 8)) (or (and ($Is (MapType0Type BoxType boolType) |w#0| (TISet (TBitvector 12))) (|ISet#Equal| |w#0| |w#0|)) (or (and ($Is (MapType0Type BoxType boolType) (Lit (MapType0Type BoxType boolType) |ISet#Empty|) (TISet (TBitvector 12))) (|ISet#Equal| |ISet#Empty| |w#0|)) (exists ((|w''#1_0| T@U) )  (and ($Is (MapType0Type BoxType boolType) |w''#1_0| (TISet (TBitvector 12))) (|ISet#Equal| |w''#1_0| |w#0|)))))) (=> (or (and ($Is (MapType0Type BoxType boolType) |w#0| (TISet (TBitvector 12))) (|ISet#Equal| |w#0| |w#0|)) (or (and ($Is (MapType0Type BoxType boolType) (Lit (MapType0Type BoxType boolType) |ISet#Empty|) (TISet (TBitvector 12))) (|ISet#Equal| |ISet#Empty| |w#0|)) (exists ((|w''#1_0@@0| T@U) )  (and ($Is (MapType0Type BoxType boolType) |w''#1_0@@0| (TISet (TBitvector 12))) (|ISet#Equal| |w''#1_0@@0| |w#0|))))) (=> (and (and (and ($Is (MapType0Type BoxType boolType) |w''#1_1@0| (TISet (TBitvector 12))) ($IsAlloc (MapType0Type BoxType boolType) |w''#1_1@0| (TISet (TBitvector 12)) $Heap)) (|ISet#Equal| |w''#1_1@0| |w#0|)) (and (and ($Is (MapType0Type BoxType boolType) |w''#1_2@0| (TISet (TBitvector 12))) ($IsAlloc (MapType0Type BoxType boolType) |w''#1_2@0| (TISet (TBitvector 12)) $Heap)) (|ISet#Equal| |w''#1_2@0| |w#0|))) (and (=> (= (ControlFlow 0 6) (- 0 7)) (|ISet#Equal| |w''#1_1@0| |w''#1_2@0|)) (=> (|ISet#Equal| |w''#1_1@0| |w''#1_2@0|) (=> (|$let#4$canCall| |w#0|) (=> (and (|$let#4$canCall| |w#0|) (= |w'#0@0| (let ((|w''#1_0@@1| (|$let#4_w''| |w#0|)))
|w''#1_0@@1|))) (and (=> (= (ControlFlow 0 6) 4) anon39_Then_correct) (=> (= (ControlFlow 0 6) 5) anon39_Else_correct)))))))))))
(let ((anon38_Else_correct  (=> (and (not (and ($Is (MapType0Type BoxType boolType) |w''#1_1@0| (TISet (TBitvector 12))) ($IsAlloc (MapType0Type BoxType boolType) |w''#1_1@0| (TISet (TBitvector 12)) $Heap))) (= (ControlFlow 0 10) 6)) anon24_correct)))
(let ((anon38_Then_correct  (=> (and (and ($Is (MapType0Type BoxType boolType) |w''#1_1@0| (TISet (TBitvector 12))) ($IsAlloc (MapType0Type BoxType boolType) |w''#1_1@0| (TISet (TBitvector 12)) $Heap)) (= (ControlFlow 0 9) 6)) anon24_correct)))
(let ((anon22_correct  (and (=> (= (ControlFlow 0 11) (- 0 13)) (or (and ($Is MultiSetType |v#0| (TMultiSet TChar)) (|MultiSet#Equal| |v#0| |v#0|)) (or (and ($Is MultiSetType (Lit MultiSetType |MultiSet#Empty|) (TMultiSet TChar)) (|MultiSet#Equal| |MultiSet#Empty| |v#0|)) (exists ((|v''#1_0| T@U) )  (and ($Is MultiSetType |v''#1_0| (TMultiSet TChar)) (|MultiSet#Equal| |v''#1_0| |v#0|)))))) (=> (or (and ($Is MultiSetType |v#0| (TMultiSet TChar)) (|MultiSet#Equal| |v#0| |v#0|)) (or (and ($Is MultiSetType (Lit MultiSetType |MultiSet#Empty|) (TMultiSet TChar)) (|MultiSet#Equal| |MultiSet#Empty| |v#0|)) (exists ((|v''#1_0@@0| T@U) )  (and ($Is MultiSetType |v''#1_0@@0| (TMultiSet TChar)) (|MultiSet#Equal| |v''#1_0@@0| |v#0|))))) (=> (and (and (and ($Is MultiSetType |v''#1_1@0| (TMultiSet TChar)) ($IsAlloc MultiSetType |v''#1_1@0| (TMultiSet TChar) $Heap)) (|MultiSet#Equal| |v''#1_1@0| |v#0|)) (and (and ($Is MultiSetType |v''#1_2@0| (TMultiSet TChar)) ($IsAlloc MultiSetType |v''#1_2@0| (TMultiSet TChar) $Heap)) (|MultiSet#Equal| |v''#1_2@0| |v#0|))) (and (=> (= (ControlFlow 0 11) (- 0 12)) (|MultiSet#Equal| |v''#1_1@0| |v''#1_2@0|)) (=> (|MultiSet#Equal| |v''#1_1@0| |v''#1_2@0|) (=> (|$let#3$canCall| |v#0|) (=> (and (|$let#3$canCall| |v#0|) (= |v'#0@0| (let ((|v''#1_0@@1| (|$let#3_v''| |v#0|)))
|v''#1_0@@1|))) (and (=> (= (ControlFlow 0 11) 9) anon38_Then_correct) (=> (= (ControlFlow 0 11) 10) anon38_Else_correct)))))))))))
(let ((anon37_Else_correct  (=> (and (not (and ($Is MultiSetType |v''#1_1@0| (TMultiSet TChar)) ($IsAlloc MultiSetType |v''#1_1@0| (TMultiSet TChar) $Heap))) (= (ControlFlow 0 15) 11)) anon22_correct)))
(let ((anon37_Then_correct  (=> (and (and ($Is MultiSetType |v''#1_1@0| (TMultiSet TChar)) ($IsAlloc MultiSetType |v''#1_1@0| (TMultiSet TChar) $Heap)) (= (ControlFlow 0 14) 11)) anon22_correct)))
(let ((anon20_correct  (and (=> (= (ControlFlow 0 16) (- 0 18)) (or (and ($Is MapType |u#0| (TMap _module._default.OtherEq$U@@0 _module._default.OtherEq$V@@0)) (|Map#Equal| |u#0| |u#0|)) (exists ((|u''#1_0| T@U) )  (and ($Is MapType |u''#1_0| (TMap _module._default.OtherEq$U@@0 _module._default.OtherEq$V@@0)) (|Map#Equal| |u''#1_0| |u#0|))))) (=> (or (and ($Is MapType |u#0| (TMap _module._default.OtherEq$U@@0 _module._default.OtherEq$V@@0)) (|Map#Equal| |u#0| |u#0|)) (exists ((|u''#1_0@@0| T@U) )  (and ($Is MapType |u''#1_0@@0| (TMap _module._default.OtherEq$U@@0 _module._default.OtherEq$V@@0)) (|Map#Equal| |u''#1_0@@0| |u#0|)))) (=> (and (and (and ($Is MapType |u''#1_1@0| (TMap _module._default.OtherEq$U@@0 _module._default.OtherEq$V@@0)) ($IsAlloc MapType |u''#1_1@0| (TMap _module._default.OtherEq$U@@0 _module._default.OtherEq$V@@0) $Heap)) (|Map#Equal| |u''#1_1@0| |u#0|)) (and (and ($Is MapType |u''#1_2@0| (TMap _module._default.OtherEq$U@@0 _module._default.OtherEq$V@@0)) ($IsAlloc MapType |u''#1_2@0| (TMap _module._default.OtherEq$U@@0 _module._default.OtherEq$V@@0) $Heap)) (|Map#Equal| |u''#1_2@0| |u#0|))) (and (=> (= (ControlFlow 0 16) (- 0 17)) (|Map#Equal| |u''#1_1@0| |u''#1_2@0|)) (=> (|Map#Equal| |u''#1_1@0| |u''#1_2@0|) (=> (|$let#2$canCall| _module._default.OtherEq$U@@0 _module._default.OtherEq$V@@0 |u#0|) (=> (and (|$let#2$canCall| _module._default.OtherEq$U@@0 _module._default.OtherEq$V@@0 |u#0|) (= |u'#0@0| (let ((|u''#1_0@@1| (|$let#2_u''| _module._default.OtherEq$U@@0 _module._default.OtherEq$V@@0 |u#0|)))
|u''#1_0@@1|))) (and (=> (= (ControlFlow 0 16) 14) anon37_Then_correct) (=> (= (ControlFlow 0 16) 15) anon37_Else_correct)))))))))))
(let ((anon36_Else_correct  (=> (and (not (and ($Is MapType |u''#1_1@0| (TMap _module._default.OtherEq$U@@0 _module._default.OtherEq$V@@0)) ($IsAlloc MapType |u''#1_1@0| (TMap _module._default.OtherEq$U@@0 _module._default.OtherEq$V@@0) $Heap))) (= (ControlFlow 0 20) 16)) anon20_correct)))
(let ((anon36_Then_correct  (=> (and (and ($Is MapType |u''#1_1@0| (TMap _module._default.OtherEq$U@@0 _module._default.OtherEq$V@@0)) ($IsAlloc MapType |u''#1_1@0| (TMap _module._default.OtherEq$U@@0 _module._default.OtherEq$V@@0) $Heap)) (= (ControlFlow 0 19) 16)) anon20_correct)))
(let ((anon18_correct  (and (=> (= (ControlFlow 0 21) (- 0 23)) (or (and ($Is SeqType |t#0| (TSeq TReal)) (|Seq#Equal| |t#0| |t#0|)) (or (and ($Is SeqType (Lit SeqType |Seq#Empty|) (TSeq TReal)) (|Seq#Equal| |Seq#Empty| |t#0|)) (exists ((|t''#1_0| T@U) )  (and ($Is SeqType |t''#1_0| (TSeq TReal)) (|Seq#Equal| |t''#1_0| |t#0|)))))) (=> (or (and ($Is SeqType |t#0| (TSeq TReal)) (|Seq#Equal| |t#0| |t#0|)) (or (and ($Is SeqType (Lit SeqType |Seq#Empty|) (TSeq TReal)) (|Seq#Equal| |Seq#Empty| |t#0|)) (exists ((|t''#1_0@@0| T@U) )  (and ($Is SeqType |t''#1_0@@0| (TSeq TReal)) (|Seq#Equal| |t''#1_0@@0| |t#0|))))) (=> (and (and (and ($Is SeqType |t''#1_1@0| (TSeq TReal)) ($IsAlloc SeqType |t''#1_1@0| (TSeq TReal) $Heap)) (|Seq#Equal| |t''#1_1@0| |t#0|)) (and (and ($Is SeqType |t''#1_2@0| (TSeq TReal)) ($IsAlloc SeqType |t''#1_2@0| (TSeq TReal) $Heap)) (|Seq#Equal| |t''#1_2@0| |t#0|))) (and (=> (= (ControlFlow 0 21) (- 0 22)) (|Seq#Equal| |t''#1_1@0| |t''#1_2@0|)) (=> (|Seq#Equal| |t''#1_1@0| |t''#1_2@0|) (=> (|$let#1$canCall| |t#0|) (=> (and (|$let#1$canCall| |t#0|) (= |t'#0@0| (let ((|t''#1_0@@1| (|$let#1_t''| |t#0|)))
|t''#1_0@@1|))) (and (=> (= (ControlFlow 0 21) 19) anon36_Then_correct) (=> (= (ControlFlow 0 21) 20) anon36_Else_correct)))))))))))
(let ((anon35_Else_correct  (=> (and (not (and ($Is SeqType |t''#1_1@0| (TSeq TReal)) ($IsAlloc SeqType |t''#1_1@0| (TSeq TReal) $Heap))) (= (ControlFlow 0 25) 21)) anon18_correct)))
(let ((anon35_Then_correct  (=> (and (and ($Is SeqType |t''#1_1@0| (TSeq TReal)) ($IsAlloc SeqType |t''#1_1@0| (TSeq TReal) $Heap)) (= (ControlFlow 0 24) 21)) anon18_correct)))
(let ((anon16_correct  (and (=> (= (ControlFlow 0 26) (- 0 28)) (or (and ($Is SetType |s#0| (TSet TInt)) (|Set#Equal| |s#0| |s#0|)) (or (and ($Is SetType (Lit SetType |Set#Empty|) (TSet TInt)) (|Set#Equal| |Set#Empty| |s#0|)) (exists ((|s''#1_0| T@U) )  (and ($Is SetType |s''#1_0| (TSet TInt)) (|Set#Equal| |s''#1_0| |s#0|)))))) (=> (or (and ($Is SetType |s#0| (TSet TInt)) (|Set#Equal| |s#0| |s#0|)) (or (and ($Is SetType (Lit SetType |Set#Empty|) (TSet TInt)) (|Set#Equal| |Set#Empty| |s#0|)) (exists ((|s''#1_0@@0| T@U) )  (and ($Is SetType |s''#1_0@@0| (TSet TInt)) (|Set#Equal| |s''#1_0@@0| |s#0|))))) (=> (and (and (and ($Is SetType |s''#1_1@0| (TSet TInt)) ($IsAlloc SetType |s''#1_1@0| (TSet TInt) $Heap)) (|Set#Equal| |s''#1_1@0| |s#0|)) (and (and ($Is SetType |s''#1_2@0| (TSet TInt)) ($IsAlloc SetType |s''#1_2@0| (TSet TInt) $Heap)) (|Set#Equal| |s''#1_2@0| |s#0|))) (and (=> (= (ControlFlow 0 26) (- 0 27)) (|Set#Equal| |s''#1_1@0| |s''#1_2@0|)) (=> (|Set#Equal| |s''#1_1@0| |s''#1_2@0|) (=> (|$let#0$canCall| |s#0|) (=> (and (|$let#0$canCall| |s#0|) (= |s'#0@0| (let ((|s''#1_0@@1| (|$let#0_s''| |s#0|)))
|s''#1_0@@1|))) (and (=> (= (ControlFlow 0 26) 24) anon35_Then_correct) (=> (= (ControlFlow 0 26) 25) anon35_Else_correct)))))))))))
(let ((anon34_Else_correct  (=> (and (not (and ($Is SetType |s''#1_1@0| (TSet TInt)) ($IsAlloc SetType |s''#1_1@0| (TSet TInt) $Heap))) (= (ControlFlow 0 30) 26)) anon16_correct)))
(let ((anon34_Then_correct  (=> (and (and ($Is SetType |s''#1_1@0| (TSet TInt)) ($IsAlloc SetType |s''#1_1@0| (TSet TInt) $Heap)) (= (ControlFlow 0 29) 26)) anon16_correct)))
(let ((anon27_Else_correct  (=> (not |b#0|) (and (=> (= (ControlFlow 0 31) 29) anon34_Then_correct) (=> (= (ControlFlow 0 31) 30) anon34_Else_correct)))))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (and (=> (= (ControlFlow 0 57) 56) anon27_Then_correct) (=> (= (ControlFlow 0 57) 31) anon27_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (and ($Is SetType |s#0| (TSet TInt)) ($IsAlloc SetType |s#0| (TSet TInt) $Heap))) (=> (and (and (and ($Is SeqType |t#0| (TSeq TReal)) ($IsAlloc SeqType |t#0| (TSeq TReal) $Heap)) (and ($Is MapType |u#0| (TMap _module._default.OtherEq$U@@0 _module._default.OtherEq$V@@0)) ($IsAlloc MapType |u#0| (TMap _module._default.OtherEq$U@@0 _module._default.OtherEq$V@@0) $Heap))) (and (and ($Is MultiSetType |v#0| (TMultiSet TChar)) ($IsAlloc MultiSetType |v#0| (TMultiSet TChar) $Heap)) (and ($Is (MapType0Type BoxType boolType) |w#0| (TISet (TBitvector 12))) ($IsAlloc (MapType0Type BoxType boolType) |w#0| (TISet (TBitvector 12)) $Heap)))) (=> (and (and (and (and ($Is IMapType |x#0| (TIMap (TBitvector 28) TInt)) ($IsAlloc IMapType |x#0| (TIMap (TBitvector 28) TInt) $Heap)) (and ($Is SetType |s'#0| (TSet TInt)) ($IsAlloc SetType |s'#0| (TSet TInt) $Heap))) (and (and ($Is SeqType |t'#0| (TSeq TReal)) ($IsAlloc SeqType |t'#0| (TSeq TReal) $Heap)) (and ($Is MapType |u'#0| (TMap _module._default.OtherEq$U@@0 _module._default.OtherEq$V@@0)) ($IsAlloc MapType |u'#0| (TMap _module._default.OtherEq$U@@0 _module._default.OtherEq$V@@0) $Heap)))) (and (and (and ($Is MultiSetType |v'#0| (TMultiSet TChar)) ($IsAlloc MultiSetType |v'#0| (TMultiSet TChar) $Heap)) (and ($Is (MapType0Type BoxType boolType) |w'#0| (TISet (TBitvector 12))) ($IsAlloc (MapType0Type BoxType boolType) |w'#0| (TISet (TBitvector 12)) $Heap))) (and (and ($Is IMapType |x'#0| (TIMap (TBitvector 28) TInt)) ($IsAlloc IMapType |x'#0| (TIMap (TBitvector 28) TInt) $Heap)) (and (= 0 $FunctionContextHeight) (= (ControlFlow 0 58) 57))))) anon0_correct)))))
PreconditionGeneratedEntry_correct)))))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
