(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 (T@T) Int)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Bool) T@U)
(declare-fun $generated@@9 (T@U) Bool)
(declare-fun $generated@@10 (Int) T@U)
(declare-fun $generated@@11 (T@U) Int)
(declare-fun $generated@@12 (Real) T@U)
(declare-fun $generated@@13 (T@U) Real)
(declare-fun $generated@@20 (T@U) T@U)
(declare-fun $generated@@21 () Int)
(declare-fun $generated@@22 (T@U Int) Bool)
(declare-fun $generated@@23 (T@U) T@U)
(declare-fun $generated@@24 (Int) Int)
(declare-fun $generated@@25 (Int) Bool)
(declare-fun $generated@@29 (T@T T@U) T@U)
(declare-fun $generated@@32 (T@T T@U) T@U)
(declare-fun $generated@@33 (T@T T@U) T@U)
(declare-fun $generated@@42 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@43 () T@T)
(declare-fun $generated@@44 () T@T)
(declare-fun $generated@@45 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@46 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 (T@T T@T) T@T)
(declare-fun $generated@@49 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@50 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@51 (T@T) T@T)
(declare-fun $generated@@52 (T@T) T@T)
(declare-fun $generated@@104 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@109 (T@T T@U T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@4 $generated@@5) 0) (= ($generated@@4 $generated@@6) 1)) (= ($generated@@4 $generated@@7) 2)) (forall (($generated@@14 Bool) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Int) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Real) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3)
)
(assert (= ($generated@@20 $generated) $generated@@1))
(assert (= ($generated@@20 $generated@@0) $generated@@2))
(assert  (=> (<= 0 $generated@@21) (forall (($generated@@26 T@U) ($generated@@27 Int) ) (!  (=> (or ($generated@@25 ($generated@@24 $generated@@27)) (and (< 0 $generated@@21) (<= ($generated@@24 0) ($generated@@24 $generated@@27)))) (and (=> (or (not (= ($generated@@24 $generated@@27) ($generated@@24 0))) (not true)) ($generated@@25 ($generated@@24 (- $generated@@27 1)))) (= ($generated@@22 ($generated@@23 $generated@@26) ($generated@@24 $generated@@27))  (or (= ($generated@@24 $generated@@27) ($generated@@24 0)) ($generated@@22 ($generated@@23 $generated@@26) ($generated@@24 (- $generated@@27 1)))))))
 :weight 3
 :pattern ( ($generated@@22 ($generated@@23 $generated@@26) ($generated@@24 $generated@@27)))
))))
(assert (forall (($generated@@28 Int) ) (! (= ($generated@@24 $generated@@28) $generated@@28)
 :pattern ( ($generated@@24 $generated@@28))
)))
(assert (forall (($generated@@30 T@U) ($generated@@31 T@T) ) (! (= ($generated@@29 $generated@@31 $generated@@30) $generated@@30)
 :pattern ( ($generated@@29 $generated@@31 $generated@@30))
)))
(assert (forall (($generated@@34 T@U) ($generated@@35 T@T) ) (! (= ($generated@@33 $generated@@35 ($generated@@32 $generated@@35 $generated@@34)) $generated@@34)
 :pattern ( ($generated@@32 $generated@@35 $generated@@34))
)))
(assert  (=> (<= 0 $generated@@21) (forall (($generated@@36 T@U) ($generated@@37 Int) ) (!  (=> (or ($generated@@25 $generated@@37) (and (< 0 $generated@@21) (<= ($generated@@24 0) $generated@@37))) (and (=> (or (not (= $generated@@37 ($generated@@24 0))) (not true)) ($generated@@25 (- $generated@@37 1))) (= ($generated@@22 ($generated@@23 $generated@@36) $generated@@37)  (or (= $generated@@37 ($generated@@24 0)) ($generated@@22 $generated@@36 (- $generated@@37 1))))))
 :pattern ( ($generated@@22 ($generated@@23 $generated@@36) $generated@@37))
))))
(assert (forall (($generated@@38 T@U) ($generated@@39 Int) ) (! (= ($generated@@22 ($generated@@23 $generated@@38) $generated@@39) ($generated@@22 $generated@@38 $generated@@39))
 :pattern ( ($generated@@22 ($generated@@23 $generated@@38) $generated@@39))
)))
(assert (forall (($generated@@40 T@U) ($generated@@41 T@T) ) (! (= ($generated@@32 $generated@@41 ($generated@@33 $generated@@41 $generated@@40)) $generated@@40)
 :pattern ( ($generated@@33 $generated@@41 $generated@@40))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@53 T@T) ($generated@@54 T@T) ($generated@@55 T@T) ($generated@@56 T@U) ($generated@@57 T@U) ($generated@@58 T@U) ($generated@@59 T@U) ) (! (= ($generated@@42 $generated@@53 $generated@@54 $generated@@55 ($generated@@49 $generated@@53 $generated@@54 $generated@@55 $generated@@57 $generated@@58 $generated@@59 $generated@@56) $generated@@58 $generated@@59) $generated@@56)
 :weight 0
)) (and (forall (($generated@@60 T@T) ($generated@@61 T@T) ($generated@@62 T@T) ($generated@@63 T@U) ($generated@@64 T@U) ($generated@@65 T@U) ($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ) (!  (or (= $generated@@65 $generated@@67) (= ($generated@@42 $generated@@60 $generated@@61 $generated@@62 ($generated@@49 $generated@@60 $generated@@61 $generated@@62 $generated@@64 $generated@@65 $generated@@66 $generated@@63) $generated@@67 $generated@@68) ($generated@@42 $generated@@60 $generated@@61 $generated@@62 $generated@@64 $generated@@67 $generated@@68)))
 :weight 0
)) (forall (($generated@@69 T@T) ($generated@@70 T@T) ($generated@@71 T@T) ($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (!  (or (= $generated@@75 $generated@@77) (= ($generated@@42 $generated@@69 $generated@@70 $generated@@71 ($generated@@49 $generated@@69 $generated@@70 $generated@@71 $generated@@73 $generated@@74 $generated@@75 $generated@@72) $generated@@76 $generated@@77) ($generated@@42 $generated@@69 $generated@@70 $generated@@71 $generated@@73 $generated@@76 $generated@@77)))
 :weight 0
)))) (= ($generated@@4 $generated@@43) 3)) (= ($generated@@4 $generated@@44) 4)) (forall (($generated@@78 T@T) ($generated@@79 T@T) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (! (= ($generated@@46 $generated@@78 $generated@@79 ($generated@@50 $generated@@78 $generated@@79 $generated@@81 $generated@@82 $generated@@80) $generated@@82) $generated@@80)
 :weight 0
))) (forall (($generated@@83 T@T) ($generated@@84 T@T) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ) (!  (or (= $generated@@87 $generated@@88) (= ($generated@@46 $generated@@83 $generated@@84 ($generated@@50 $generated@@83 $generated@@84 $generated@@86 $generated@@87 $generated@@85) $generated@@88) ($generated@@46 $generated@@83 $generated@@84 $generated@@86 $generated@@88)))
 :weight 0
))) (= ($generated@@4 $generated@@47) 5)) (forall (($generated@@89 T@T) ($generated@@90 T@T) ) (= ($generated@@4 ($generated@@48 $generated@@89 $generated@@90)) 6))) (forall (($generated@@91 T@T) ($generated@@92 T@T) ) (! (= ($generated@@51 ($generated@@48 $generated@@91 $generated@@92)) $generated@@91)
 :pattern ( ($generated@@48 $generated@@91 $generated@@92))
))) (forall (($generated@@93 T@T) ($generated@@94 T@T) ) (! (= ($generated@@52 ($generated@@48 $generated@@93 $generated@@94)) $generated@@94)
 :pattern ( ($generated@@48 $generated@@93 $generated@@94))
))))
(assert (forall (($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 Bool) ($generated@@99 T@U) ($generated@@100 T@U) ) (! (= ($generated@@9 ($generated@@42 $generated@@43 $generated@@44 $generated@@5 ($generated@@45 $generated@@95 $generated@@96 $generated@@97 $generated@@98) $generated@@99 $generated@@100))  (=> (and (or (not (= $generated@@99 $generated@@95)) (not true)) ($generated@@9 ($generated@@32 $generated@@5 ($generated@@46 $generated@@44 $generated@@47 ($generated@@46 $generated@@43 ($generated@@48 $generated@@44 $generated@@47) $generated@@96 $generated@@99) $generated@@97)))) $generated@@98))
 :pattern ( ($generated@@42 $generated@@43 $generated@@44 $generated@@5 ($generated@@45 $generated@@95 $generated@@96 $generated@@97 $generated@@98) $generated@@99 $generated@@100))
)))
(assert (forall (($generated@@101 Int) ) (! (= ($generated@@33 $generated@@6 ($generated@@10 ($generated@@24 $generated@@101))) ($generated@@29 $generated@@47 ($generated@@33 $generated@@6 ($generated@@10 $generated@@101))))
 :pattern ( ($generated@@33 $generated@@6 ($generated@@10 ($generated@@24 $generated@@101))))
)))
(assert (forall (($generated@@102 T@U) ($generated@@103 T@T) ) (! (= ($generated@@33 $generated@@103 ($generated@@29 $generated@@103 $generated@@102)) ($generated@@29 $generated@@47 ($generated@@33 $generated@@103 $generated@@102)))
 :pattern ( ($generated@@33 $generated@@103 ($generated@@29 $generated@@103 $generated@@102)))
)))
(assert (forall (($generated@@105 T@U) ($generated@@106 T@U) ) (! ($generated@@104 $generated@@6 $generated@@106 $generated@@0 $generated@@105)
 :pattern ( ($generated@@104 $generated@@6 $generated@@106 $generated@@0 $generated@@105))
)))
(assert (forall (($generated@@107 T@U) ($generated@@108 T@U) ) (! ($generated@@104 $generated@@5 $generated@@108 $generated $generated@@107)
 :pattern ( ($generated@@104 $generated@@5 $generated@@108 $generated $generated@@107))
)))
(assert (forall (($generated@@110 T@U) ) (! ($generated@@109 $generated@@6 $generated@@110 $generated@@0)
 :pattern ( ($generated@@109 $generated@@6 $generated@@110 $generated@@0))
)))
(assert (forall (($generated@@111 T@U) ) (! ($generated@@109 $generated@@5 $generated@@111 $generated)
 :pattern ( ($generated@@109 $generated@@5 $generated@@111 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@112 () Int)
(declare-fun $generated@@113 () Int)
(declare-fun $generated@@114 () T@U)
(declare-fun $generated@@115 () T@U)
(declare-fun $generated@@116 () T@U)
(declare-fun $generated@@117 (T@U) Bool)
(declare-fun $generated@@118 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 9) (let (($generated@@119 true))
(let (($generated@@120  (=> (and (= $generated@@112 ($generated@@24 0)) (= (ControlFlow 0 7) 2)) $generated@@119)))
(let (($generated@@121  (=> (or (not (= $generated@@112 ($generated@@24 0))) (not true)) (=> (and (= $generated@@113 (- $generated@@112 1)) ($generated@@104 $generated@@6 ($generated@@10 $generated@@113) $generated@@0 $generated@@114)) (and (=> (= (ControlFlow 0 3) (- 0 6)) (<= ($generated@@24 0) $generated@@113)) (=> (<= ($generated@@24 0) $generated@@113) (and (=> (= (ControlFlow 0 3) (- 0 5)) (or (<= 0 $generated@@112) (= $generated@@113 $generated@@112))) (=> (or (<= 0 $generated@@112) (= $generated@@113 $generated@@112)) (and (=> (= (ControlFlow 0 3) (- 0 4)) (< $generated@@113 $generated@@112)) (=> (< $generated@@113 $generated@@112) (=> (and ($generated@@25 (- $generated@@112 1)) (= (ControlFlow 0 3) 2)) $generated@@119)))))))))))
(let (($generated@@122 true))
(let (($generated@@123  (=> (and (= $generated@@115 ($generated@@45 $generated@@116 $generated@@114 $generated@@3 false)) (<= ($generated@@24 0) $generated@@112)) (and (and (=> (= (ControlFlow 0 8) 1) $generated@@122) (=> (= (ControlFlow 0 8) 3) $generated@@121)) (=> (= (ControlFlow 0 8) 7) $generated@@120)))))
(let (($generated@@124  (=> (and (and ($generated@@117 $generated@@114) ($generated@@118 $generated@@114)) (and (= 0 $generated@@21) (= (ControlFlow 0 9) 8))) $generated@@123)))
$generated@@124)))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
