(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagSet () T@U)
(declare-fun alloc () T@U)
(declare-fun allocName () T@U)
(declare-fun Tagclass._System.object? () T@U)
(declare-fun Tagclass._System.object () T@U)
(declare-fun Tagclass._module.C () T@U)
(declare-fun class._module.C? () T@U)
(declare-fun Tagclass._module.C? () T@U)
(declare-fun class._module.I1? () T@U)
(declare-fun Tagclass._module.I1? () T@U)
(declare-fun Tagclass._module.I1 () T@U)
(declare-fun tytagFamily$object () T@U)
(declare-fun tytagFamily$C () T@U)
(declare-fun tytagFamily$I1 () T@U)
(declare-fun field$g () T@U)
(declare-fun field$_new () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun FDim (T@U) Int)
(declare-fun Tag (T@U) T@U)
(declare-fun DeclName (T@U) T@U)
(declare-fun |Set#UnionOne| (T@U T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun _module.I1.u (T@U) Int)
(declare-fun null () T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun Tclass._module.I1? () T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun _module.I1.__decreases2 (T@U) Int)
(declare-fun |Set#Empty| () T@U)
(declare-fun refType () T@T)
(declare-fun Tclass._module.C? () T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass._System.object () T@U)
(declare-fun Tclass._System.object? () T@U)
(declare-fun Tclass._module.C () T@U)
(declare-fun Tclass._module.I1 () T@U)
(declare-fun _module.I1.__new () T@U)
(declare-fun FieldOfDecl (T@U T@U) T@U)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun _module.C.g () T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun SetType () T@T)
(declare-fun TSet (T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun _module.I1.Valid (T@U T@U) Bool)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun _module.I1.__reads (T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#20| (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun DeclType (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun _module.I1.c (T@U) T@U)
(declare-fun _module.I1.d (T@U) T@U)
(declare-fun _module.I1.__decreases0 (T@U) T@U)
(declare-fun _module.I1.__decreases1 (T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun _module.I1.__modifies (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt TagSet alloc allocName Tagclass._System.object? Tagclass._System.object Tagclass._module.C class._module.C? Tagclass._module.C? class._module.I1? Tagclass._module.I1? Tagclass._module.I1 tytagFamily$object tytagFamily$C tytagFamily$I1 field$g field$_new)
)
(assert (= (FDim alloc) 0))
(assert (= (Tag TInt) TagInt))
(assert (= (DeclName alloc) allocName))
(assert (forall ((a T@U) (x@@2 T@U) ) (! (|Set#IsMember| (|Set#UnionOne| a x@@2) x@@2)
 :pattern ( (|Set#UnionOne| a x@@2))
)))
(assert (forall ((a@@0 T@U) (x@@3 T@U) (y T@U) ) (!  (=> (|Set#IsMember| a@@0 y) (|Set#IsMember| (|Set#UnionOne| a@@0 x@@3) y))
 :pattern ( (|Set#UnionOne| a@@0 x@@3) (|Set#IsMember| a@@0 y))
)))
(assert (forall (($o T@U) ) (!  (=> (and (or (not (= $o null)) (not true)) (= (dtype $o) Tclass._module.I1?)) ($Is intType (int_2_U (_module.I1.u $o)) TInt))
 :pattern ( (_module.I1.u $o))
)))
(assert (forall (($o@@0 T@U) ) (!  (=> (and (or (not (= $o@@0 null)) (not true)) (= (dtype $o@@0) Tclass._module.I1?)) ($Is intType (int_2_U (_module.I1.__decreases2 $o@@0)) TInt))
 :pattern ( (_module.I1.__decreases2 $o@@0))
)))
(assert (forall ((a@@1 T@U) (x@@4 T@U) (o T@U) ) (! (= (|Set#IsMember| (|Set#UnionOne| a@@1 x@@4) o)  (or (= o x@@4) (|Set#IsMember| a@@1 o)))
 :pattern ( (|Set#IsMember| (|Set#UnionOne| a@@1 x@@4) o))
)))
(assert (forall ((o@@0 T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o@@0))
 :pattern ( (|Set#IsMember| |Set#Empty| o@@0))
)))
(assert (= (Ctor refType) 3))
(assert (forall (($o@@1 T@U) ) (! (= ($Is refType $o@@1 Tclass._module.C?)  (or (= $o@@1 null) (= (dtype $o@@1) Tclass._module.C?)))
 :pattern ( ($Is refType $o@@1 Tclass._module.C?))
)))
(assert (forall (($o@@2 T@U) ) (! (= ($Is refType $o@@2 Tclass._module.I1?)  (or (= $o@@2 null) (= (dtype $o@@2) Tclass._module.I1?)))
 :pattern ( ($Is refType $o@@2 Tclass._module.I1?))
)))
(assert (forall ((|c#0| T@U) ($h T@U) ) (! (= ($IsAlloc refType |c#0| Tclass._System.object $h) ($IsAlloc refType |c#0| Tclass._System.object? $h))
 :pattern ( ($IsAlloc refType |c#0| Tclass._System.object $h))
 :pattern ( ($IsAlloc refType |c#0| Tclass._System.object? $h))
)))
(assert (forall ((|c#0@@0| T@U) ($h@@0 T@U) ) (! (= ($IsAlloc refType |c#0@@0| Tclass._module.C $h@@0) ($IsAlloc refType |c#0@@0| Tclass._module.C? $h@@0))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass._module.C $h@@0))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass._module.C? $h@@0))
)))
(assert (forall ((|c#0@@1| T@U) ($h@@1 T@U) ) (! (= ($IsAlloc refType |c#0@@1| Tclass._module.I1 $h@@1) ($IsAlloc refType |c#0@@1| Tclass._module.I1? $h@@1))
 :pattern ( ($IsAlloc refType |c#0@@1| Tclass._module.I1 $h@@1))
 :pattern ( ($IsAlloc refType |c#0@@1| Tclass._module.I1? $h@@1))
)))
(assert (= (FDim _module.I1.__new) 0))
(assert (= (FieldOfDecl class._module.I1? field$_new) _module.I1.__new))
(assert ($IsGhostField _module.I1.__new))
(assert (= (FDim _module.C.g) 0))
(assert (= (FieldOfDecl class._module.C? field$g) _module.C.g))
(assert  (not ($IsGhostField _module.C.g)))
(assert  (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 4)) (= (Ctor BoxType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 6))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall (($o@@3 T@U) ($h@@2 T@U) ) (! (= ($IsAlloc refType $o@@3 Tclass._System.object? $h@@2)  (or (= $o@@3 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o@@3) alloc)))))
 :pattern ( ($IsAlloc refType $o@@3 Tclass._System.object? $h@@2))
)))
(assert (forall (($o@@4 T@U) ($h@@3 T@U) ) (! (= ($IsAlloc refType $o@@4 Tclass._module.C? $h@@3)  (or (= $o@@4 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@3 $o@@4) alloc)))))
 :pattern ( ($IsAlloc refType $o@@4 Tclass._module.C? $h@@3))
)))
(assert (forall (($o@@5 T@U) ($h@@4 T@U) ) (! (= ($IsAlloc refType $o@@5 Tclass._module.I1? $h@@4)  (or (= $o@@5 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@4 $o@@5) alloc)))))
 :pattern ( ($IsAlloc refType $o@@5 Tclass._module.I1? $h@@4))
)))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o@@1 T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o@@1) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o@@1) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o@@1) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((x@@5 Int) ) (! (= (LitInt x@@5) x@@5)
 :pattern ( (LitInt x@@5))
)))
(assert (forall ((x@@6 T@U) (T T@T) ) (! (= (Lit T x@@6) x@@6)
 :pattern ( (Lit T x@@6))
)))
(assert (forall ((x@@7 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@7)) x@@7)
 :pattern ( ($Unbox T@@0 x@@7))
)))
(assert (= (Ctor SetType) 7))
(assert (forall ((v T@U) (t0@@0 T@U) ) (! (= ($Is SetType v (TSet t0@@0)) (forall ((bx T@U) ) (!  (=> (|Set#IsMember| v bx) ($IsBox bx t0@@0))
 :pattern ( (|Set#IsMember| v bx))
)))
 :pattern ( ($Is SetType v (TSet t0@@0)))
)))
(assert ($IsGhostField alloc))
(assert (forall (($h0 T@U) ($h1 T@U) (this T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0) ($IsGoodHeap $h1)) (and (or (not (= this null)) (not true)) ($Is refType this Tclass._module.I1))) (and ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1))) (=> (forall (($o@@6 T@U) ($f T@U) )  (=> (and (or (not (= $o@@6 null)) (not true)) (or (or (= $o@@6 this) (|Set#IsMember| (_module.I1.__reads this) ($Box refType $o@@6))) (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0 this) _module.I1.__new)) ($Box refType $o@@6)))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0 $o@@6) $f) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1 $o@@6) $f)))) (= (_module.I1.Valid $h0 this) (_module.I1.Valid $h1 this))))
 :pattern ( ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1) (_module.I1.Valid $h1 this))
)))
(assert (forall (($h@@5 T@U) ($o@@7 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@5) (and (or (not (= $o@@7 null)) (not true)) (= (dtype $o@@7) Tclass._module.C?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@5 $o@@7) alloc)))) ($IsAlloc intType ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@5 $o@@7) _module.C.g)) TInt $h@@5))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@5 $o@@7) _module.C.g)))
)))
(assert (forall ((v@@0 T@U) (t T@U) (h@@0 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t h@@0) ($IsAlloc T@@1 v@@0 t h@@0))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t h@@0))
)))
(assert (forall ((h@@1 T@U) (k@@0 T@U) (bx@@0 T@U) (t@@0 T@U) ) (!  (=> ($HeapSucc h@@1 k@@0) (=> ($IsAllocBox bx@@0 t@@0 h@@1) ($IsAllocBox bx@@0 t@@0 k@@0)))
 :pattern ( ($HeapSucc h@@1 k@@0) ($IsAllocBox bx@@0 t@@0 h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@1 T@U) (v@@1 T@U) (t@@1 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@2 k@@1) (=> ($IsAlloc T@@2 v@@1 t@@1 h@@2) ($IsAlloc T@@2 v@@1 t@@1 k@@1)))
 :pattern ( ($HeapSucc h@@2 k@@1) ($IsAlloc T@@2 v@@1 t@@1 h@@2))
)))
(assert  (and (forall ((t0@@1 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@1 t1@@0 t2 (MapType1Store t0@@1 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| T@U) (|l#4| T@U) (|l#5| T@U) ($o@@8 T@U) ($f@@0 T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#20| |l#0| |l#1| |l#2| |l#3| |l#4| |l#5|) $o@@8 $f@@0))  (=> (and (or (not (= $o@@8 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@8) |l#2|)))) (or (or (= $o@@8 |l#3|) (= $o@@8 |l#4|)) (= $o@@8 |l#5|))))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#20| |l#0| |l#1| |l#2| |l#3| |l#4| |l#5|) $o@@8 $f@@0))
)))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 Tclass._System.object?) (and (= ($Box refType ($Unbox refType bx@@1)) bx@@1) ($Is refType ($Unbox refType bx@@1) Tclass._System.object?)))
 :pattern ( ($IsBox bx@@1 Tclass._System.object?))
)))
(assert (forall ((bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 Tclass._System.object) (and (= ($Box refType ($Unbox refType bx@@2)) bx@@2) ($Is refType ($Unbox refType bx@@2) Tclass._System.object)))
 :pattern ( ($IsBox bx@@2 Tclass._System.object))
)))
(assert (forall ((bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 Tclass._module.C) (and (= ($Box refType ($Unbox refType bx@@3)) bx@@3) ($Is refType ($Unbox refType bx@@3) Tclass._module.C)))
 :pattern ( ($IsBox bx@@3 Tclass._module.C))
)))
(assert (forall ((bx@@4 T@U) ) (!  (=> ($IsBox bx@@4 Tclass._module.C?) (and (= ($Box refType ($Unbox refType bx@@4)) bx@@4) ($Is refType ($Unbox refType bx@@4) Tclass._module.C?)))
 :pattern ( ($IsBox bx@@4 Tclass._module.C?))
)))
(assert (forall ((bx@@5 T@U) ) (!  (=> ($IsBox bx@@5 Tclass._module.I1?) (and (= ($Box refType ($Unbox refType bx@@5)) bx@@5) ($Is refType ($Unbox refType bx@@5) Tclass._module.I1?)))
 :pattern ( ($IsBox bx@@5 Tclass._module.I1?))
)))
(assert (forall ((bx@@6 T@U) ) (!  (=> ($IsBox bx@@6 Tclass._module.I1) (and (= ($Box refType ($Unbox refType bx@@6)) bx@@6) ($Is refType ($Unbox refType bx@@6) Tclass._module.I1)))
 :pattern ( ($IsBox bx@@6 Tclass._module.I1))
)))
(assert (forall ((|c#0@@2| T@U) ) (! (= ($Is refType |c#0@@2| Tclass._System.object)  (and ($Is refType |c#0@@2| Tclass._System.object?) (or (not (= |c#0@@2| null)) (not true))))
 :pattern ( ($Is refType |c#0@@2| Tclass._System.object))
 :pattern ( ($Is refType |c#0@@2| Tclass._System.object?))
)))
(assert (forall ((|c#0@@3| T@U) ) (! (= ($Is refType |c#0@@3| Tclass._module.C)  (and ($Is refType |c#0@@3| Tclass._module.C?) (or (not (= |c#0@@3| null)) (not true))))
 :pattern ( ($Is refType |c#0@@3| Tclass._module.C))
 :pattern ( ($Is refType |c#0@@3| Tclass._module.C?))
)))
(assert (forall ((|c#0@@4| T@U) ) (! (= ($Is refType |c#0@@4| Tclass._module.I1)  (and ($Is refType |c#0@@4| Tclass._module.I1?) (or (not (= |c#0@@4| null)) (not true))))
 :pattern ( ($Is refType |c#0@@4| Tclass._module.I1))
 :pattern ( ($Is refType |c#0@@4| Tclass._module.I1?))
)))
(assert (forall (($h@@6 T@U) ($o@@9 T@U) ) (!  (=> (and ($IsGoodHeap $h@@6) (and (or (not (= $o@@9 null)) (not true)) (= (dtype $o@@9) Tclass._module.I1?))) ($Is SetType ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@6 $o@@9) _module.I1.__new)) (TSet Tclass._System.object?)))
 :pattern ( ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@6 $o@@9) _module.I1.__new)))
)))
(assert (forall (($h@@7 T@U) ($o@@10 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@7) (and (or (not (= $o@@10 null)) (not true)) (= (dtype $o@@10) Tclass._module.I1?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@7 $o@@10) alloc)))) ($IsAlloc SetType ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@7 $o@@10) _module.I1.__new)) (TSet Tclass._System.object?) $h@@7))
 :pattern ( ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@7 $o@@10) _module.I1.__new)))
)))
(assert (forall ((a@@2 T@U) (b T@U) ) (!  (=> (|Set#Equal| a@@2 b) (= a@@2 b))
 :pattern ( (|Set#Equal| a@@2 b))
)))
(assert (forall ((a@@3 T@U) (b@@0 T@U) (c T@U) ) (!  (=> (or (not (= a@@3 c)) (not true)) (=> (and ($HeapSucc a@@3 b@@0) ($HeapSucc b@@0 c)) ($HeapSucc a@@3 c)))
 :pattern ( ($HeapSucc a@@3 b@@0) ($HeapSucc b@@0 c))
)))
(assert (forall ((cl T@U) (nm T@U) ) (!  (and (= (DeclType (FieldOfDecl cl nm)) cl) (= (DeclName (FieldOfDecl cl nm)) nm))
 :pattern ( (FieldOfDecl cl nm))
)))
(assert (forall ((bx@@7 T@U) ) (!  (=> ($IsBox bx@@7 TInt) (and (= ($Box intType ($Unbox intType bx@@7)) bx@@7) ($Is intType ($Unbox intType bx@@7) TInt)))
 :pattern ( ($IsBox bx@@7 TInt))
)))
(assert (forall ((v@@2 T@U) (t@@2 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@2) t@@2) ($Is T@@3 v@@2 t@@2))
 :pattern ( ($IsBox ($Box T@@3 v@@2) t@@2))
)))
(assert (forall ((v@@3 T@U) (t0@@2 T@U) (h@@3 T@U) ) (! (= ($IsAlloc SetType v@@3 (TSet t0@@2) h@@3) (forall ((bx@@8 T@U) ) (!  (=> (|Set#IsMember| v@@3 bx@@8) ($IsAllocBox bx@@8 t0@@2 h@@3))
 :pattern ( (|Set#IsMember| v@@3 bx@@8))
)))
 :pattern ( ($IsAlloc SetType v@@3 (TSet t0@@2) h@@3))
)))
(assert (forall (($o@@11 T@U) ) (! ($Is refType $o@@11 Tclass._System.object?)
 :pattern ( ($Is refType $o@@11 Tclass._System.object?))
)))
(assert (forall ((t@@3 T@U) ) (! (= (Inv0_TSet (TSet t@@3)) t@@3)
 :pattern ( (TSet t@@3))
)))
(assert (forall ((t@@4 T@U) ) (! (= (Tag (TSet t@@4)) TagSet)
 :pattern ( (TSet t@@4))
)))
(assert (forall ((x@@8 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@8)) x@@8)
 :pattern ( ($Box T@@4 x@@8))
)))
(assert (forall (($h@@8 T@U) ($o@@12 T@U) ) (!  (=> (and ($IsGoodHeap $h@@8) (and (or (not (= $o@@12 null)) (not true)) (= (dtype $o@@12) Tclass._module.C?))) ($Is intType ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@8 $o@@12) _module.C.g)) TInt))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@8 $o@@12) _module.C.g)))
)))
(assert (forall (($h@@9 T@U) ($o@@13 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@9) (and (or (not (= $o@@13 null)) (not true)) (= (dtype $o@@13) Tclass._module.I1?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@9 $o@@13) alloc)))) ($IsAlloc intType (int_2_U (_module.I1.u $o@@13)) TInt $h@@9))
 :pattern ( (_module.I1.u $o@@13) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@9 $o@@13) alloc)))
)))
(assert (forall (($h@@10 T@U) ($o@@14 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@10) (and (or (not (= $o@@14 null)) (not true)) (= (dtype $o@@14) Tclass._module.I1?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@10 $o@@14) alloc)))) ($IsAlloc intType (int_2_U (_module.I1.__decreases2 $o@@14)) TInt $h@@10))
 :pattern ( (_module.I1.__decreases2 $o@@14) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@10 $o@@14) alloc)))
)))
(assert (forall (($o@@15 T@U) ) (!  (=> (and (or (not (= $o@@15 null)) (not true)) (= (dtype $o@@15) Tclass._module.I1?)) ($Is refType (_module.I1.c $o@@15) Tclass._module.C))
 :pattern ( (_module.I1.c $o@@15))
)))
(assert (forall (($o@@16 T@U) ) (!  (=> (and (or (not (= $o@@16 null)) (not true)) (= (dtype $o@@16) Tclass._module.I1?)) ($Is refType (_module.I1.d $o@@16) Tclass._module.C))
 :pattern ( (_module.I1.d $o@@16))
)))
(assert (forall (($o@@17 T@U) ) (!  (=> (and (or (not (= $o@@17 null)) (not true)) (= (dtype $o@@17) Tclass._module.I1?)) ($Is refType (_module.I1.__decreases0 $o@@17) Tclass._module.C?))
 :pattern ( (_module.I1.__decreases0 $o@@17))
)))
(assert (forall (($o@@18 T@U) ) (!  (=> (and (or (not (= $o@@18 null)) (not true)) (= (dtype $o@@18) Tclass._module.I1?)) ($Is refType (_module.I1.__decreases1 $o@@18) Tclass._module.C?))
 :pattern ( (_module.I1.__decreases1 $o@@18))
)))
(assert (forall ((bx@@9 T@U) (t@@5 T@U) ) (!  (=> ($IsBox bx@@9 (TSet t@@5)) (and (= ($Box SetType ($Unbox SetType bx@@9)) bx@@9) ($Is SetType ($Unbox SetType bx@@9) (TSet t@@5))))
 :pattern ( ($IsBox bx@@9 (TSet t@@5)))
)))
(assert (forall ((h@@4 T@U) (r T@U) (f T@U) (x@@9 T@U) ) (!  (=> ($IsGoodHeap (MapType0Store refType (MapType0Type FieldType BoxType) h@@4 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@4 r) f x@@9))) ($HeapSucc h@@4 (MapType0Store refType (MapType0Type FieldType BoxType) h@@4 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@4 r) f x@@9))))
 :pattern ( (MapType0Store refType (MapType0Type FieldType BoxType) h@@4 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@4 r) f x@@9)))
)))
(assert (forall (($h@@11 T@U) ($o@@19 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@11) (and (or (not (= $o@@19 null)) (not true)) (= (dtype $o@@19) Tclass._module.I1?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@11 $o@@19) alloc)))) ($IsAlloc refType (_module.I1.c $o@@19) Tclass._module.C $h@@11))
 :pattern ( (_module.I1.c $o@@19) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@11 $o@@19) alloc)))
)))
(assert (forall (($h@@12 T@U) ($o@@20 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@12) (and (or (not (= $o@@20 null)) (not true)) (= (dtype $o@@20) Tclass._module.I1?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@12 $o@@20) alloc)))) ($IsAlloc refType (_module.I1.d $o@@20) Tclass._module.C $h@@12))
 :pattern ( (_module.I1.d $o@@20) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@12 $o@@20) alloc)))
)))
(assert (forall (($h@@13 T@U) ($o@@21 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@13) (and (or (not (= $o@@21 null)) (not true)) (= (dtype $o@@21) Tclass._module.I1?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@13 $o@@21) alloc)))) ($IsAlloc refType (_module.I1.__decreases0 $o@@21) Tclass._module.C? $h@@13))
 :pattern ( (_module.I1.__decreases0 $o@@21) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@13 $o@@21) alloc)))
)))
(assert (forall (($h@@14 T@U) ($o@@22 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@14) (and (or (not (= $o@@22 null)) (not true)) (= (dtype $o@@22) Tclass._module.I1?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@14 $o@@22) alloc)))) ($IsAlloc refType (_module.I1.__decreases1 $o@@22) Tclass._module.C? $h@@14))
 :pattern ( (_module.I1.__decreases1 $o@@22) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@14 $o@@22) alloc)))
)))
(assert (= (Tag Tclass._System.object?) Tagclass._System.object?))
(assert (= (TagFamily Tclass._System.object?) tytagFamily$object))
(assert (= (Tag Tclass._System.object) Tagclass._System.object))
(assert (= (TagFamily Tclass._System.object) tytagFamily$object))
(assert (= (Tag Tclass._module.C) Tagclass._module.C))
(assert (= (TagFamily Tclass._module.C) tytagFamily$C))
(assert (= (Tag Tclass._module.C?) Tagclass._module.C?))
(assert (= (TagFamily Tclass._module.C?) tytagFamily$C))
(assert (= (Tag Tclass._module.I1?) Tagclass._module.I1?))
(assert (= (TagFamily Tclass._module.I1?) tytagFamily$I1))
(assert (= (Tag Tclass._module.I1) Tagclass._module.I1))
(assert (= (TagFamily Tclass._module.I1) tytagFamily$I1))
(assert (forall (($o@@23 T@U) ) (!  (=> (and (or (not (= $o@@23 null)) (not true)) (= (dtype $o@@23) Tclass._module.I1?)) ($Is SetType (_module.I1.__reads $o@@23) (TSet Tclass._System.object?)))
 :pattern ( (_module.I1.__reads $o@@23))
)))
(assert (forall (($o@@24 T@U) ) (!  (=> (and (or (not (= $o@@24 null)) (not true)) (= (dtype $o@@24) Tclass._module.I1?)) ($Is SetType (_module.I1.__modifies $o@@24) (TSet Tclass._System.object?)))
 :pattern ( (_module.I1.__modifies $o@@24))
)))
(assert (forall ((a@@4 T@U) (b@@1 T@U) ) (! (= (|Set#Equal| a@@4 b@@1) (forall ((o@@2 T@U) ) (! (= (|Set#IsMember| a@@4 o@@2) (|Set#IsMember| b@@1 o@@2))
 :pattern ( (|Set#IsMember| a@@4 o@@2))
 :pattern ( (|Set#IsMember| b@@1 o@@2))
)))
 :pattern ( (|Set#Equal| a@@4 b@@1))
)))
(assert (forall (($h@@15 T@U) ($o@@25 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@15) (and (or (not (= $o@@25 null)) (not true)) (= (dtype $o@@25) Tclass._module.I1?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@15 $o@@25) alloc)))) ($IsAlloc SetType (_module.I1.__reads $o@@25) (TSet Tclass._System.object?) $h@@15))
 :pattern ( (_module.I1.__reads $o@@25) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@15 $o@@25) alloc)))
)))
(assert (forall (($h@@16 T@U) ($o@@26 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@16) (and (or (not (= $o@@26 null)) (not true)) (= (dtype $o@@26) Tclass._module.I1?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@16 $o@@26) alloc)))) ($IsAlloc SetType (_module.I1.__modifies $o@@26) (TSet Tclass._System.object?) $h@@16))
 :pattern ( (_module.I1.__modifies $o@@26) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@16 $o@@26) alloc)))
)))
(assert (forall ((x@@10 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@10))) (Lit BoxType ($Box intType (int_2_U x@@10))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@10))))
)))
(assert (forall ((x@@11 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@11)) (Lit BoxType ($Box T@@5 x@@11)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@11)))
)))
(assert (forall ((h@@5 T@U) (v@@4 T@U) ) (! ($IsAlloc intType v@@4 TInt h@@5)
 :pattern ( ($IsAlloc intType v@@4 TInt h@@5))
)))
(assert (forall ((v@@5 T@U) ) (! ($Is intType v@@5 TInt)
 :pattern ( ($Is intType v@@5 TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $Heap@0 () T@U)
(declare-fun this@@0 () T@U)
(declare-fun |v#0@0| () Int)
(declare-fun $Heap () T@U)
(declare-fun |c#0@@5| () T@U)
(declare-fun |u#0| () Int)
(declare-fun |d#0| () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun |v#0@2| () Int)
(declare-fun $Heap@2 () T@U)
(declare-fun |$rhs#4_1_0@0| () Int)
(declare-fun $Heap@6 () T@U)
(declare-fun |_yieldCount#0@2| () Int)
(declare-fun |_yieldCount#0@0| () Int)
(declare-fun call1formal@rds@0 () T@U)
(declare-fun call2formal@nw@0 () T@U)
(declare-fun $Heap@4 () T@U)
(declare-fun $obj1@0 () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun |$rhs#4_1_1@0| () Int)
(declare-fun $Heap@5 () T@U)
(declare-fun |_yieldCount#0@3| () Int)
(declare-fun call1formal@rds@0@@0 () T@U)
(declare-fun call2formal@nw@0@@0 () T@U)
(declare-fun |v#0@1| () Int)
(declare-fun |_yieldCount#0@1| () Int)
(declare-fun call1formal@rds@0@@1 () T@U)
(declare-fun call2formal@nw@0@@1 () T@U)
(declare-fun $Heap@3 () T@U)
(declare-fun |_yieldCount#0| () Int)
(declare-fun call1formal@rds@0@@2 () T@U)
(declare-fun call2formal@nw@0@@2 () T@U)
(declare-fun |$rhs#0@0| () Int)
(declare-fun call1formal@rds@0@@3 () T@U)
(declare-fun call2formal@nw@0@@3 () T@U)
(declare-fun $_OldIterHeap () T@U)
(declare-fun $FunctionContextHeight () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 56) (let ((anon32_Else_correct true))
(let ((anon32_Then_correct  (=> (= (ControlFlow 0 51) (- 0 50)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 (_module.I1.c this@@0)) _module.C.g))) |v#0@0|))))
(let ((anon31_Then_correct  (=> (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |c#0@@5|) _module.C.g))) |u#0|) (and (=> (= (ControlFlow 0 53) (- 0 54)) (or (not (= (_module.I1.c this@@0) null)) (not true))) (and (=> (= (ControlFlow 0 53) 51) anon32_Then_correct) (=> (= (ControlFlow 0 53) 52) anon32_Else_correct))))))
(let ((anon35_Else_correct true))
(let ((anon35_Then_correct  (=> (= (ControlFlow 0 45) (- 0 44)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 (_module.I1.d this@@0)) _module.C.g))) |v#0@0|))))
(let ((anon34_Then_correct  (=> (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |d#0|) _module.C.g))) |u#0|) (and (=> (= (ControlFlow 0 47) (- 0 48)) (or (not (= (_module.I1.d this@@0) null)) (not true))) (and (=> (= (ControlFlow 0 47) 45) anon35_Then_correct) (=> (= (ControlFlow 0 47) 46) anon35_Else_correct))))))
(let ((anon38_Else_correct true))
(let ((anon38_Then_correct  (=> (= (ControlFlow 0 35) (- 0 34)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 (_module.I1.c this@@0)) _module.C.g))) (+ |v#0@0| 2)))))
(let ((anon37_Then_correct  (=> (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 (_module.I1.c this@@0)) _module.C.g))) |v#0@0|) (and (=> (= (ControlFlow 0 37) (- 0 38)) (or (not (= (_module.I1.c this@@0) null)) (not true))) (and (=> (= (ControlFlow 0 37) 35) anon38_Then_correct) (=> (= (ControlFlow 0 37) 36) anon38_Else_correct))))))
(let ((anon43_Else_correct true))
(let ((anon43_Then_correct  (=> (= (ControlFlow 0 26) (- 0 25)) (= (- |v#0@2| 3) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 (_module.I1.c this@@0)) _module.C.g)))))))
(let ((anon42_Then_correct  (=> (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 (_module.I1.c this@@0)) _module.C.g))) |v#0@0|) (and (=> (= (ControlFlow 0 28) (- 0 29)) (or (not (= (_module.I1.c this@@0) null)) (not true))) (and (=> (= (ControlFlow 0 28) 26) anon43_Then_correct) (=> (= (ControlFlow 0 28) 27) anon43_Else_correct))))))
(let ((anon45_Else_correct  (=> (= (- |v#0@2| 3) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 (_module.I1.c this@@0)) _module.C.g)))) (and (=> (= (ControlFlow 0 15) (- 0 19)) ($IsAlloc refType this@@0 Tclass._module.I1 $Heap@2)) (=> ($IsAlloc refType this@@0 Tclass._module.I1 $Heap@2) (and (=> (= (ControlFlow 0 15) (- 0 18)) (or (not (= (_module.I1.c this@@0) null)) (not true))) (and (=> (= (ControlFlow 0 15) (- 0 17)) ($IsAlloc refType (_module.I1.c this@@0) Tclass._module.C $Heap@2)) (=> ($IsAlloc refType (_module.I1.c this@@0) Tclass._module.C $Heap@2) (and (=> (= (ControlFlow 0 15) (- 0 16)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 (_module.I1.c this@@0)) _module.C.g))) (- |v#0@2| 3))) (=> (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 (_module.I1.c this@@0)) _module.C.g))) (- |v#0@2| 3)) (=> (= (ControlFlow 0 15) (- 0 14)) (U_2_bool (Lit boolType (bool_2_U false))))))))))))))
(let ((anon45_Then_correct  (=> (= (- |v#0@2| 3) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 (_module.I1.c this@@0)) _module.C.g)))) (and (=> (= (ControlFlow 0 12) (- 0 13)) (or (not (= (_module.I1.c this@@0) null)) (not true))) (=> (= (ControlFlow 0 12) (- 0 11)) (= (- |$rhs#4_1_0@0| 3) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 (_module.I1.c this@@0)) _module.C.g)))))))))
(let ((anon44_Else_correct  (=> (and (and (and (= |_yieldCount#0@2| (+ |_yieldCount#0@0| 1)) ($IsGoodHeap $Heap@2)) (and (= call1formal@rds@0 (_module.I1.__reads this@@0)) (= call2formal@nw@0 ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 this@@0) _module.I1.__new))))) (and (and ($IsGoodHeap $Heap@4) ($IsHeapAnchor $Heap@4)) (and (forall (($o@@27 T@U) ($f@@1 T@U) ) (!  (=> (and (or (not (= $o@@27 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@27) alloc)))) (=> (or (or (= $o@@27 this@@0) (|Set#IsMember| call1formal@rds@0 ($Box refType $o@@27))) (|Set#IsMember| call2formal@nw@0 ($Box refType $o@@27))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 $o@@27) $f@@1) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@27) $f@@1))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 $o@@27) $f@@1))
)) ($HeapSucc $Heap@2 $Heap@4)))) (and (=> (= (ControlFlow 0 20) (- 0 23)) (or (not (= (_module.I1.c this@@0) null)) (not true))) (=> (or (not (= (_module.I1.c this@@0) null)) (not true)) (=> (= $obj1@0 (_module.I1.c this@@0)) (and (=> (= (ControlFlow 0 20) (- 0 22)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $obj1@0 _module.C.g))) (=> (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $obj1@0 _module.C.g)) (=> (= |$rhs#4_1_0@0| (LitInt 178)) (and (=> (= (ControlFlow 0 20) (- 0 21)) (or (not (= (_module.I1.c this@@0) null)) (not true))) (=> (or (not (= (_module.I1.c this@@0) null)) (not true)) (=> (= |$rhs#4_1_1@0| (+ (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 (_module.I1.c this@@0)) _module.C.g))) 100)) (=> (and (= $Heap@5 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap@4 $obj1@0 (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 $obj1@0) _module.C.g ($Box intType (int_2_U |$rhs#4_1_1@0|))))) ($IsGoodHeap $Heap@5)) (=> (and (and (and (= |_yieldCount#0@3| (+ |_yieldCount#0@2| 1)) ($IsGoodHeap $Heap@5)) (and (= call1formal@rds@0@@0 (_module.I1.__reads this@@0)) (= call2formal@nw@0@@0 ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 this@@0) _module.I1.__new))))) (and (and ($IsGoodHeap $Heap@6) ($IsHeapAnchor $Heap@6)) (and (forall (($o@@28 T@U) ($f@@2 T@U) ) (!  (=> (and (or (not (= $o@@28 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 $o@@28) alloc)))) (=> (or (or (= $o@@28 this@@0) (|Set#IsMember| call1formal@rds@0@@0 ($Box refType $o@@28))) (|Set#IsMember| call2formal@nw@0@@0 ($Box refType $o@@28))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 $o@@28) $f@@2) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 $o@@28) $f@@2))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 $o@@28) $f@@2))
)) ($HeapSucc $Heap@5 $Heap@6)))) (and (=> (= (ControlFlow 0 20) 12) anon45_Then_correct) (=> (= (ControlFlow 0 20) 15) anon45_Else_correct))))))))))))))))
(let ((anon44_Then_correct true))
(let ((anon42_Else_correct  (=> (or (not (= (_module.I1.c this@@0) null)) (not true)) (and (=> (= (ControlFlow 0 24) 10) anon44_Then_correct) (=> (= (ControlFlow 0 24) 20) anon44_Else_correct)))))
(let ((anon41_Else_correct  (=> (= |v#0@2| (+ |v#0@0| 5)) (and (=> (= (ControlFlow 0 30) 28) anon42_Then_correct) (=> (= (ControlFlow 0 30) 24) anon42_Else_correct)))))
(let ((anon41_Then_correct  (=> (and (= |v#0@1| (+ |v#0@0| 3)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 (_module.I1.c this@@0)) _module.C.g))) |v#0@0|)) (=> (and (and (and (= |_yieldCount#0@1| (+ |_yieldCount#0@0| 1)) ($IsGoodHeap $Heap@2)) (and (= call1formal@rds@0@@1 (_module.I1.__reads this@@0)) (= call2formal@nw@0@@1 ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 this@@0) _module.I1.__new))))) (and (and ($IsGoodHeap $Heap@3) ($IsHeapAnchor $Heap@3)) (and (forall (($o@@29 T@U) ($f@@3 T@U) ) (!  (=> (and (or (not (= $o@@29 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@29) alloc)))) (=> (or (or (= $o@@29 this@@0) (|Set#IsMember| call1formal@rds@0@@1 ($Box refType $o@@29))) (|Set#IsMember| call2formal@nw@0@@1 ($Box refType $o@@29))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@29) $f@@3) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@29) $f@@3))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@29) $f@@3))
)) ($HeapSucc $Heap@2 $Heap@3)))) (and (=> (= (ControlFlow 0 8) (- 0 9)) (or (not (= (_module.I1.c this@@0) null)) (not true))) (=> (= (ControlFlow 0 8) (- 0 7)) (= (- |v#0@1| 1) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 (_module.I1.c this@@0)) _module.C.g))))))))))
(let ((anon40_Else_correct  (and (=> (= (ControlFlow 0 31) 8) anon41_Then_correct) (=> (= (ControlFlow 0 31) 30) anon41_Else_correct))))
(let ((anon40_Then_correct  (=> (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |c#0@@5|) _module.C.g))) |u#0|) (and (=> (= (ControlFlow 0 5) (- 0 6)) (or (not (= (_module.I1.c this@@0) null)) (not true))) (=> (= (ControlFlow 0 5) (- 0 4)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 (_module.I1.c this@@0)) _module.C.g))) (_module.I1.u this@@0)))))))
(let ((anon39_Else_correct  (=> (and (and (and (= |_yieldCount#0@0| (+ |_yieldCount#0| 1)) ($IsGoodHeap $Heap@1)) (and (= call1formal@rds@0@@2 (_module.I1.__reads this@@0)) (= call2formal@nw@0@@2 ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 this@@0) _module.I1.__new))))) (and (and ($IsGoodHeap $Heap@2) ($IsHeapAnchor $Heap@2)) (and (forall (($o@@30 T@U) ($f@@4 T@U) ) (!  (=> (and (or (not (= $o@@30 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@30) alloc)))) (=> (or (or (= $o@@30 this@@0) (|Set#IsMember| call1formal@rds@0@@2 ($Box refType $o@@30))) (|Set#IsMember| call2formal@nw@0@@2 ($Box refType $o@@30))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@30) $f@@4) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@30) $f@@4))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@30) $f@@4))
)) ($HeapSucc $Heap@1 $Heap@2)))) (and (=> (= (ControlFlow 0 32) 5) anon40_Then_correct) (=> (= (ControlFlow 0 32) 31) anon40_Else_correct)))))
(let ((anon39_Then_correct true))
(let ((anon37_Else_correct  (=> (or (not (= (_module.I1.c this@@0) null)) (not true)) (and (=> (= (ControlFlow 0 33) 3) anon39_Then_correct) (=> (= (ControlFlow 0 33) 32) anon39_Else_correct)))))
(let ((anon36_Else_correct  (and (=> (= (ControlFlow 0 39) (- 0 42)) (or (not (= (_module.I1.c this@@0) null)) (not true))) (=> (or (not (= (_module.I1.c this@@0) null)) (not true)) (and (=> (= (ControlFlow 0 39) (- 0 41)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 (_module.I1.c this@@0) _module.C.g))) (=> (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 (_module.I1.c this@@0) _module.C.g)) (and (=> (= (ControlFlow 0 39) (- 0 40)) (or (not (= (_module.I1.c this@@0) null)) (not true))) (=> (or (not (= (_module.I1.c this@@0) null)) (not true)) (=> (= |$rhs#0@0| (+ (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 (_module.I1.c this@@0)) _module.C.g))) 2)) (=> (and (= $Heap@1 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap@0 (_module.I1.c this@@0) (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 (_module.I1.c this@@0)) _module.C.g ($Box intType (int_2_U |$rhs#0@0|))))) ($IsGoodHeap $Heap@1)) (and (=> (= (ControlFlow 0 39) 37) anon37_Then_correct) (=> (= (ControlFlow 0 39) 33) anon37_Else_correct))))))))))))
(let ((anon36_Then_correct true))
(let ((anon34_Else_correct  (=> (or (not (= (_module.I1.d this@@0) null)) (not true)) (and (=> (= (ControlFlow 0 43) 2) anon36_Then_correct) (=> (= (ControlFlow 0 43) 39) anon36_Else_correct)))))
(let ((anon33_Then_correct true))
(let ((anon31_Else_correct  (=> (or (not (= (_module.I1.c this@@0) null)) (not true)) (and (and (=> (= (ControlFlow 0 49) 1) anon33_Then_correct) (=> (= (ControlFlow 0 49) 47) anon34_Then_correct)) (=> (= (ControlFlow 0 49) 43) anon34_Else_correct)))))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#20| null $Heap alloc this@@0 |c#0@@5| |d#0|)) (=> (and (or (not (= |c#0@@5| |d#0|)) (not true)) (= (_module.I1.c this@@0) |c#0@@5|)) (=> (and (and (= (_module.I1.d this@@0) |d#0|) (= (_module.I1.u this@@0) |u#0|)) (and (_module.I1.Valid $Heap this@@0) (|Set#Equal| (_module.I1.__reads this@@0) (|Set#UnionOne| |Set#Empty| ($Box refType |c#0@@5|))))) (=> (and (and (and (and (|Set#Equal| (_module.I1.__modifies this@@0) (|Set#UnionOne| (|Set#UnionOne| |Set#Empty| ($Box refType |c#0@@5|)) ($Box refType |d#0|))) (|Set#Equal| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.I1.__new)) |Set#Empty|)) (and (= (_module.I1.__decreases0 this@@0) |c#0@@5|) (= (_module.I1.__decreases1 this@@0) |d#0|))) (and (and (= (_module.I1.__decreases2 this@@0) |u#0|) (= |_yieldCount#0| 0)) (and (= call1formal@rds@0@@3 (_module.I1.__reads this@@0)) (= call2formal@nw@0@@3 ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.I1.__new)))))) (and (and (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (forall (($o@@31 T@U) ($f@@5 T@U) ) (!  (=> (and (or (not (= $o@@31 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@31) alloc)))) (=> (or (or (= $o@@31 this@@0) (|Set#IsMember| call1formal@rds@0@@3 ($Box refType $o@@31))) (|Set#IsMember| call2formal@nw@0@@3 ($Box refType $o@@31))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@31) $f@@5) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@31) $f@@5))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@31) $f@@5))
))) (and ($HeapSucc $Heap $Heap@0) (= |v#0@0| (_module.I1.u this@@0))))) (and (=> (= (ControlFlow 0 55) 53) anon31_Then_correct) (=> (= (ControlFlow 0 55) 49) anon31_Else_correct))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (=> (and (and (and (or (not (= this@@0 null)) (not true)) (and ($Is refType this@@0 Tclass._module.I1) ($IsAlloc refType this@@0 Tclass._module.I1 $Heap))) (and ($Is refType |c#0@@5| Tclass._module.C) ($IsAlloc refType |c#0@@5| Tclass._module.C $Heap))) (and (and ($Is refType |d#0| Tclass._module.C) ($IsAlloc refType |d#0| Tclass._module.C $Heap)) (and true true))) (=> (and (and (and (and ($IsGoodHeap $_OldIterHeap) ($HeapSucc $_OldIterHeap $Heap)) true) (= 0 $FunctionContextHeight)) (and (or (not (= |c#0@@5| |d#0|)) (not true)) (= (ControlFlow 0 56) 55))) anon0_correct)))))
PreconditionGeneratedEntry_correct))))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 45) (- 44))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 5) (- 4))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 12) (- 11))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 15) (- 14))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
