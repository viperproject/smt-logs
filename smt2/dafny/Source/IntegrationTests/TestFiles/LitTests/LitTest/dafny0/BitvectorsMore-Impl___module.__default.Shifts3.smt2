(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.PQ (Int Int Real Int Real (_ BitVec 67) (_ BitVec 32) (_ BitVec 7) (_ BitVec 2) Int Int) Bool)
(declare-fun |_module.__default.PQ#canCall| (Int Int Real Int Real (_ BitVec 67) (_ BitVec 32) (_ BitVec 7) (_ BitVec 2) Int Int) Bool)
(declare-fun LitInt (Int) Int)
(declare-fun Mod (Int Int) Int)
(declare-fun LitReal (Real) Real)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun U_2_bv67 (T@U) (_ BitVec 67))
(declare-fun bv67Type () T@T)
(declare-fun U_2_bv32 (T@U) (_ BitVec 32))
(declare-fun bv32Type () T@T)
(declare-fun U_2_bv7 (T@U) (_ BitVec 7))
(declare-fun bv7Type () T@T)
(declare-fun U_2_bv2 (T@U) (_ BitVec 2))
(declare-fun bv2Type () T@T)
(declare-fun bv67_2_U ((_ BitVec 67)) T@U)
(declare-fun bv32_2_U ((_ BitVec 32)) T@U)
(declare-fun bv7_2_U ((_ BitVec 7)) T@U)
(declare-fun bv2_2_U ((_ BitVec 2)) T@U)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|x#0| Int) (|n#0| Int) (|r#0| Real) (|even#0| Int) (|small#0| Real) (|b67#0| (_ BitVec 67)) (|w#0| (_ BitVec 32)) (|seven#0| (_ BitVec 7)) (|bb#0| (_ BitVec 2)) (|noll#0| Int) (|h#0| Int) ) (!  (=> (or (|_module.__default.PQ#canCall| |x#0| |n#0| |r#0| |even#0| |small#0| |b67#0| |w#0| |seven#0| |bb#0| |noll#0| |h#0|) (and (< 1 $FunctionContextHeight) (and (and (and (and (<= (LitInt 0) |n#0|) (= (Mod |even#0| (LitInt 2)) (LitInt 0))) (and (<= (LitReal (- 0.0 4.0)) |small#0|) (< |small#0| 300.0))) (= 0 |noll#0|)) (and (<= (LitInt 0) |h#0|) (< |h#0| 80))))) (= (_module.__default.PQ |x#0| |n#0| |r#0| |even#0| |small#0| |b67#0| |w#0| |seven#0| |bb#0| |noll#0| |h#0|)  (and (and (and (and (and (and (and (and (and (and (= |x#0| |x#0|) (= |n#0| |n#0|)) (= |r#0| |r#0|)) (= |even#0| |even#0|)) (= |small#0| |small#0|)) (= |b67#0| |b67#0|)) (= |w#0| |w#0|)) (= |seven#0| |seven#0|)) (= |bb#0| |bb#0|)) (= |noll#0| |noll#0|)) (= |h#0| |h#0|))))
 :pattern ( (_module.__default.PQ |x#0| |n#0| |r#0| |even#0| |small#0| |b67#0| |w#0| |seven#0| |bb#0| |noll#0| |h#0|))
))))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 Real) ) (! (= (LitReal x@@3) x@@3)
 :pattern ( (LitReal x@@3))
)))
(assert (forall ((x@@4 T@U) (T T@T) ) (! (= (Lit T x@@4) x@@4)
 :pattern ( (Lit T x@@4))
)))
(assert (forall ((x@@5 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@5)) x@@5)
 :pattern ( ($Unbox T@@0 x@@5))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (= (Ctor bv67Type) 3) (forall ((arg0@@2 (_ BitVec 67)) ) (! (= (U_2_bv67 (bv67_2_U arg0@@2)) arg0@@2)
 :pattern ( (bv67_2_U arg0@@2))
))) (forall ((x@@6 T@U) ) (! (= (bv67_2_U (U_2_bv67 x@@6)) x@@6)
 :pattern ( (U_2_bv67 x@@6))
))) (= (Ctor bv32Type) 4)) (forall ((arg0@@3 (_ BitVec 32)) ) (! (= (U_2_bv32 (bv32_2_U arg0@@3)) arg0@@3)
 :pattern ( (bv32_2_U arg0@@3))
))) (forall ((x@@7 T@U) ) (! (= (bv32_2_U (U_2_bv32 x@@7)) x@@7)
 :pattern ( (U_2_bv32 x@@7))
))) (= (Ctor bv7Type) 5)) (forall ((arg0@@4 (_ BitVec 7)) ) (! (= (U_2_bv7 (bv7_2_U arg0@@4)) arg0@@4)
 :pattern ( (bv7_2_U arg0@@4))
))) (forall ((x@@8 T@U) ) (! (= (bv7_2_U (U_2_bv7 x@@8)) x@@8)
 :pattern ( (U_2_bv7 x@@8))
))) (= (Ctor bv2Type) 6)) (forall ((arg0@@5 (_ BitVec 2)) ) (! (= (U_2_bv2 (bv2_2_U arg0@@5)) arg0@@5)
 :pattern ( (bv2_2_U arg0@@5))
))) (forall ((x@@9 T@U) ) (! (= (bv2_2_U (U_2_bv2 x@@9)) x@@9)
 :pattern ( (U_2_bv2 x@@9))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|x#0@@0| Int) (|n#0@@0| Int) (|r#0@@0| Real) (|even#0@@0| Int) (|small#0@@0| Real) (|b67#0@@0| T@U) (|w#0@@0| T@U) (|seven#0@@0| T@U) (|bb#0@@0| T@U) (|noll#0@@0| Int) (|h#0@@0| Int) ) (!  (=> (or (|_module.__default.PQ#canCall| (LitInt |x#0@@0|) (LitInt |n#0@@0|) (LitReal |r#0@@0|) (LitInt |even#0@@0|) (LitReal |small#0@@0|) (U_2_bv67 (Lit bv67Type |b67#0@@0|)) (U_2_bv32 (Lit bv32Type |w#0@@0|)) (U_2_bv7 (Lit bv7Type |seven#0@@0|)) (U_2_bv2 (Lit bv2Type |bb#0@@0|)) (LitInt |noll#0@@0|) (LitInt |h#0@@0|)) (and (< 1 $FunctionContextHeight) (and (and (and (and (<= (LitInt 0) |n#0@@0|) (= (Mod |even#0@@0| (LitInt 2)) (LitInt 0))) (and (<= (LitReal (- 0.0 4.0)) |small#0@@0|) (< |small#0@@0| 300.0))) (= 0 |noll#0@@0|)) (and (<= (LitInt 0) |h#0@@0|) (< |h#0@@0| 80))))) (= (_module.__default.PQ (LitInt |x#0@@0|) (LitInt |n#0@@0|) (LitReal |r#0@@0|) (LitInt |even#0@@0|) (LitReal |small#0@@0|) (U_2_bv67 (Lit bv67Type |b67#0@@0|)) (U_2_bv32 (Lit bv32Type |w#0@@0|)) (U_2_bv7 (Lit bv7Type |seven#0@@0|)) (U_2_bv2 (Lit bv2Type |bb#0@@0|)) (LitInt |noll#0@@0|) (LitInt |h#0@@0|))  (and (and (and (and (and (and (and (and (and (and (= (LitInt |x#0@@0|) (LitInt |x#0@@0|)) (= (LitInt |n#0@@0|) (LitInt |n#0@@0|))) (= (LitReal |r#0@@0|) (LitReal |r#0@@0|))) (= (LitInt |even#0@@0|) (LitInt |even#0@@0|))) (= (LitReal |small#0@@0|) (LitReal |small#0@@0|))) (= (U_2_bv67 (Lit bv67Type |b67#0@@0|)) (U_2_bv67 (Lit bv67Type |b67#0@@0|)))) (= (U_2_bv32 (Lit bv32Type |w#0@@0|)) (U_2_bv32 (Lit bv32Type |w#0@@0|)))) (= (U_2_bv7 (Lit bv7Type |seven#0@@0|)) (U_2_bv7 (Lit bv7Type |seven#0@@0|)))) (= (U_2_bv2 (Lit bv2Type |bb#0@@0|)) (U_2_bv2 (Lit bv2Type |bb#0@@0|)))) (= (LitInt |noll#0@@0|) (LitInt |noll#0@@0|))) (= (LitInt |h#0@@0|) (LitInt |h#0@@0|)))))
 :weight 3
 :pattern ( (_module.__default.PQ (LitInt |x#0@@0|) (LitInt |n#0@@0|) (LitReal |r#0@@0|) (LitInt |even#0@@0|) (LitReal |small#0@@0|) (U_2_bv67 (Lit bv67Type |b67#0@@0|)) (U_2_bv32 (Lit bv32Type |w#0@@0|)) (U_2_bv7 (Lit bv7Type |seven#0@@0|)) (U_2_bv2 (Lit bv2Type |bb#0@@0|)) (LitInt |noll#0@@0|) (LitInt |h#0@@0|)))
))))
(assert (forall ((x@@10 T@U) (T@@1 T@T) ) (! (= ($Unbox T@@1 ($Box T@@1 x@@10)) x@@10)
 :pattern ( ($Box T@@1 x@@10))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0 t1 t2 (MapType0Store t0 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 7)) (= (Ctor FieldType) 8)) (forall ((t0@@0 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 (MapType1Store t0@@0 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :weight 0
))) (= (Ctor BoxType) 9)) (forall ((arg0@@6 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@6 arg1)) 10))) (forall ((arg0@@7 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@7 arg1@@0)) arg0@@7)
 :pattern ( (MapType1Type arg0@@7 arg1@@0))
))) (forall ((arg0@@8 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@8 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@8 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((x@@11 Int) (y Int) ) (! (= (Mod x@@11 y) (mod x@@11 y))
 :pattern ( (Mod x@@11 y))
)))
(assert (forall ((x@@12 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@12))) (Lit BoxType ($Box intType (int_2_U x@@12))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@12))))
)))
(assert (forall ((x@@13 Real) ) (! (= ($Box realType (real_2_U (LitReal x@@13))) (Lit BoxType ($Box realType (real_2_U x@@13))))
 :pattern ( ($Box realType (real_2_U (LitReal x@@13))))
)))
(assert (forall ((x@@14 T@U) (T@@2 T@T) ) (! (= ($Box T@@2 (Lit T@@2 x@@14)) (Lit BoxType ($Box T@@2 x@@14)))
 :pattern ( ($Box T@@2 (Lit T@@2 x@@14)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |x#0@@1| () Int)
(declare-fun |n#0@@1| () Int)
(declare-fun |r#0@@1| () Real)
(declare-fun |even#0@@1| () Int)
(declare-fun |small#0@@1| () Real)
(declare-fun |b67#0@@1| () (_ BitVec 67))
(declare-fun |w#0@5| () (_ BitVec 32))
(declare-fun |seven#0@@1| () (_ BitVec 7))
(declare-fun |bb#0@@1| () (_ BitVec 2))
(declare-fun |noll#0@@1| () Int)
(declare-fun |h#0@@1| () Int)
(declare-fun |w#0@4| () (_ BitVec 32))
(declare-fun |w#0@@1| () (_ BitVec 32))
(declare-fun |w#0@3| () (_ BitVec 32))
(declare-fun |w#0@2| () (_ BitVec 32))
(declare-fun |w#0@1| () (_ BitVec 32))
(declare-fun |w#0@0| () (_ BitVec 32))
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $Heap () T@U)
(declare-fun alloc () T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsHeapAnchor (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 29) (let ((GeneratedUnifiedExit_correct  (and (=> (= (ControlFlow 0 4) (- 0 14)) (=> (|_module.__default.PQ#canCall| |x#0@@1| |n#0@@1| |r#0@@1| |even#0@@1| |small#0@@1| |b67#0@@1| |w#0@5| |seven#0@@1| |bb#0@@1| |noll#0@@1| |h#0@@1|) (or (_module.__default.PQ |x#0@@1| |n#0@@1| |r#0@@1| |even#0@@1| |small#0@@1| |b67#0@@1| |w#0@5| |seven#0@@1| |bb#0@@1| |noll#0@@1| |h#0@@1|) (= |x#0@@1| |x#0@@1|)))) (=> (=> (|_module.__default.PQ#canCall| |x#0@@1| |n#0@@1| |r#0@@1| |even#0@@1| |small#0@@1| |b67#0@@1| |w#0@5| |seven#0@@1| |bb#0@@1| |noll#0@@1| |h#0@@1|) (or (_module.__default.PQ |x#0@@1| |n#0@@1| |r#0@@1| |even#0@@1| |small#0@@1| |b67#0@@1| |w#0@5| |seven#0@@1| |bb#0@@1| |noll#0@@1| |h#0@@1|) (= |x#0@@1| |x#0@@1|))) (and (=> (= (ControlFlow 0 4) (- 0 13)) (=> (|_module.__default.PQ#canCall| |x#0@@1| |n#0@@1| |r#0@@1| |even#0@@1| |small#0@@1| |b67#0@@1| |w#0@5| |seven#0@@1| |bb#0@@1| |noll#0@@1| |h#0@@1|) (or (_module.__default.PQ |x#0@@1| |n#0@@1| |r#0@@1| |even#0@@1| |small#0@@1| |b67#0@@1| |w#0@5| |seven#0@@1| |bb#0@@1| |noll#0@@1| |h#0@@1|) (= |n#0@@1| |n#0@@1|)))) (=> (=> (|_module.__default.PQ#canCall| |x#0@@1| |n#0@@1| |r#0@@1| |even#0@@1| |small#0@@1| |b67#0@@1| |w#0@5| |seven#0@@1| |bb#0@@1| |noll#0@@1| |h#0@@1|) (or (_module.__default.PQ |x#0@@1| |n#0@@1| |r#0@@1| |even#0@@1| |small#0@@1| |b67#0@@1| |w#0@5| |seven#0@@1| |bb#0@@1| |noll#0@@1| |h#0@@1|) (= |n#0@@1| |n#0@@1|))) (and (=> (= (ControlFlow 0 4) (- 0 12)) (=> (|_module.__default.PQ#canCall| |x#0@@1| |n#0@@1| |r#0@@1| |even#0@@1| |small#0@@1| |b67#0@@1| |w#0@5| |seven#0@@1| |bb#0@@1| |noll#0@@1| |h#0@@1|) (or (_module.__default.PQ |x#0@@1| |n#0@@1| |r#0@@1| |even#0@@1| |small#0@@1| |b67#0@@1| |w#0@5| |seven#0@@1| |bb#0@@1| |noll#0@@1| |h#0@@1|) (= |r#0@@1| |r#0@@1|)))) (=> (=> (|_module.__default.PQ#canCall| |x#0@@1| |n#0@@1| |r#0@@1| |even#0@@1| |small#0@@1| |b67#0@@1| |w#0@5| |seven#0@@1| |bb#0@@1| |noll#0@@1| |h#0@@1|) (or (_module.__default.PQ |x#0@@1| |n#0@@1| |r#0@@1| |even#0@@1| |small#0@@1| |b67#0@@1| |w#0@5| |seven#0@@1| |bb#0@@1| |noll#0@@1| |h#0@@1|) (= |r#0@@1| |r#0@@1|))) (and (=> (= (ControlFlow 0 4) (- 0 11)) (=> (|_module.__default.PQ#canCall| |x#0@@1| |n#0@@1| |r#0@@1| |even#0@@1| |small#0@@1| |b67#0@@1| |w#0@5| |seven#0@@1| |bb#0@@1| |noll#0@@1| |h#0@@1|) (or (_module.__default.PQ |x#0@@1| |n#0@@1| |r#0@@1| |even#0@@1| |small#0@@1| |b67#0@@1| |w#0@5| |seven#0@@1| |bb#0@@1| |noll#0@@1| |h#0@@1|) (= |even#0@@1| |even#0@@1|)))) (=> (=> (|_module.__default.PQ#canCall| |x#0@@1| |n#0@@1| |r#0@@1| |even#0@@1| |small#0@@1| |b67#0@@1| |w#0@5| |seven#0@@1| |bb#0@@1| |noll#0@@1| |h#0@@1|) (or (_module.__default.PQ |x#0@@1| |n#0@@1| |r#0@@1| |even#0@@1| |small#0@@1| |b67#0@@1| |w#0@5| |seven#0@@1| |bb#0@@1| |noll#0@@1| |h#0@@1|) (= |even#0@@1| |even#0@@1|))) (and (=> (= (ControlFlow 0 4) (- 0 10)) (=> (|_module.__default.PQ#canCall| |x#0@@1| |n#0@@1| |r#0@@1| |even#0@@1| |small#0@@1| |b67#0@@1| |w#0@5| |seven#0@@1| |bb#0@@1| |noll#0@@1| |h#0@@1|) (or (_module.__default.PQ |x#0@@1| |n#0@@1| |r#0@@1| |even#0@@1| |small#0@@1| |b67#0@@1| |w#0@5| |seven#0@@1| |bb#0@@1| |noll#0@@1| |h#0@@1|) (= |small#0@@1| |small#0@@1|)))) (=> (=> (|_module.__default.PQ#canCall| |x#0@@1| |n#0@@1| |r#0@@1| |even#0@@1| |small#0@@1| |b67#0@@1| |w#0@5| |seven#0@@1| |bb#0@@1| |noll#0@@1| |h#0@@1|) (or (_module.__default.PQ |x#0@@1| |n#0@@1| |r#0@@1| |even#0@@1| |small#0@@1| |b67#0@@1| |w#0@5| |seven#0@@1| |bb#0@@1| |noll#0@@1| |h#0@@1|) (= |small#0@@1| |small#0@@1|))) (and (=> (= (ControlFlow 0 4) (- 0 9)) (=> (|_module.__default.PQ#canCall| |x#0@@1| |n#0@@1| |r#0@@1| |even#0@@1| |small#0@@1| |b67#0@@1| |w#0@5| |seven#0@@1| |bb#0@@1| |noll#0@@1| |h#0@@1|) (or (_module.__default.PQ |x#0@@1| |n#0@@1| |r#0@@1| |even#0@@1| |small#0@@1| |b67#0@@1| |w#0@5| |seven#0@@1| |bb#0@@1| |noll#0@@1| |h#0@@1|) (= |b67#0@@1| |b67#0@@1|)))) (=> (=> (|_module.__default.PQ#canCall| |x#0@@1| |n#0@@1| |r#0@@1| |even#0@@1| |small#0@@1| |b67#0@@1| |w#0@5| |seven#0@@1| |bb#0@@1| |noll#0@@1| |h#0@@1|) (or (_module.__default.PQ |x#0@@1| |n#0@@1| |r#0@@1| |even#0@@1| |small#0@@1| |b67#0@@1| |w#0@5| |seven#0@@1| |bb#0@@1| |noll#0@@1| |h#0@@1|) (= |b67#0@@1| |b67#0@@1|))) (and (=> (= (ControlFlow 0 4) (- 0 8)) (=> (|_module.__default.PQ#canCall| |x#0@@1| |n#0@@1| |r#0@@1| |even#0@@1| |small#0@@1| |b67#0@@1| |w#0@5| |seven#0@@1| |bb#0@@1| |noll#0@@1| |h#0@@1|) (or (_module.__default.PQ |x#0@@1| |n#0@@1| |r#0@@1| |even#0@@1| |small#0@@1| |b67#0@@1| |w#0@5| |seven#0@@1| |bb#0@@1| |noll#0@@1| |h#0@@1|) (= |w#0@5| |w#0@5|)))) (=> (=> (|_module.__default.PQ#canCall| |x#0@@1| |n#0@@1| |r#0@@1| |even#0@@1| |small#0@@1| |b67#0@@1| |w#0@5| |seven#0@@1| |bb#0@@1| |noll#0@@1| |h#0@@1|) (or (_module.__default.PQ |x#0@@1| |n#0@@1| |r#0@@1| |even#0@@1| |small#0@@1| |b67#0@@1| |w#0@5| |seven#0@@1| |bb#0@@1| |noll#0@@1| |h#0@@1|) (= |w#0@5| |w#0@5|))) (and (=> (= (ControlFlow 0 4) (- 0 7)) (=> (|_module.__default.PQ#canCall| |x#0@@1| |n#0@@1| |r#0@@1| |even#0@@1| |small#0@@1| |b67#0@@1| |w#0@5| |seven#0@@1| |bb#0@@1| |noll#0@@1| |h#0@@1|) (or (_module.__default.PQ |x#0@@1| |n#0@@1| |r#0@@1| |even#0@@1| |small#0@@1| |b67#0@@1| |w#0@5| |seven#0@@1| |bb#0@@1| |noll#0@@1| |h#0@@1|) (= |seven#0@@1| |seven#0@@1|)))) (=> (=> (|_module.__default.PQ#canCall| |x#0@@1| |n#0@@1| |r#0@@1| |even#0@@1| |small#0@@1| |b67#0@@1| |w#0@5| |seven#0@@1| |bb#0@@1| |noll#0@@1| |h#0@@1|) (or (_module.__default.PQ |x#0@@1| |n#0@@1| |r#0@@1| |even#0@@1| |small#0@@1| |b67#0@@1| |w#0@5| |seven#0@@1| |bb#0@@1| |noll#0@@1| |h#0@@1|) (= |seven#0@@1| |seven#0@@1|))) (and (=> (= (ControlFlow 0 4) (- 0 6)) (=> (|_module.__default.PQ#canCall| |x#0@@1| |n#0@@1| |r#0@@1| |even#0@@1| |small#0@@1| |b67#0@@1| |w#0@5| |seven#0@@1| |bb#0@@1| |noll#0@@1| |h#0@@1|) (or (_module.__default.PQ |x#0@@1| |n#0@@1| |r#0@@1| |even#0@@1| |small#0@@1| |b67#0@@1| |w#0@5| |seven#0@@1| |bb#0@@1| |noll#0@@1| |h#0@@1|) (= |bb#0@@1| |bb#0@@1|)))) (=> (=> (|_module.__default.PQ#canCall| |x#0@@1| |n#0@@1| |r#0@@1| |even#0@@1| |small#0@@1| |b67#0@@1| |w#0@5| |seven#0@@1| |bb#0@@1| |noll#0@@1| |h#0@@1|) (or (_module.__default.PQ |x#0@@1| |n#0@@1| |r#0@@1| |even#0@@1| |small#0@@1| |b67#0@@1| |w#0@5| |seven#0@@1| |bb#0@@1| |noll#0@@1| |h#0@@1|) (= |bb#0@@1| |bb#0@@1|))) (and (=> (= (ControlFlow 0 4) (- 0 5)) (=> (|_module.__default.PQ#canCall| |x#0@@1| |n#0@@1| |r#0@@1| |even#0@@1| |small#0@@1| |b67#0@@1| |w#0@5| |seven#0@@1| |bb#0@@1| |noll#0@@1| |h#0@@1|) (or (_module.__default.PQ |x#0@@1| |n#0@@1| |r#0@@1| |even#0@@1| |small#0@@1| |b67#0@@1| |w#0@5| |seven#0@@1| |bb#0@@1| |noll#0@@1| |h#0@@1|) (= |noll#0@@1| |noll#0@@1|)))) (=> (=> (|_module.__default.PQ#canCall| |x#0@@1| |n#0@@1| |r#0@@1| |even#0@@1| |small#0@@1| |b67#0@@1| |w#0@5| |seven#0@@1| |bb#0@@1| |noll#0@@1| |h#0@@1|) (or (_module.__default.PQ |x#0@@1| |n#0@@1| |r#0@@1| |even#0@@1| |small#0@@1| |b67#0@@1| |w#0@5| |seven#0@@1| |bb#0@@1| |noll#0@@1| |h#0@@1|) (= |noll#0@@1| |noll#0@@1|))) (=> (= (ControlFlow 0 4) (- 0 3)) (=> (|_module.__default.PQ#canCall| |x#0@@1| |n#0@@1| |r#0@@1| |even#0@@1| |small#0@@1| |b67#0@@1| |w#0@5| |seven#0@@1| |bb#0@@1| |noll#0@@1| |h#0@@1|) (or (_module.__default.PQ |x#0@@1| |n#0@@1| |r#0@@1| |even#0@@1| |small#0@@1| |b67#0@@1| |w#0@5| |seven#0@@1| |bb#0@@1| |noll#0@@1| |h#0@@1|) (= |h#0@@1| |h#0@@1|))))))))))))))))))))))))))
(let ((anon11_Then_correct  (and (=> (= (ControlFlow 0 26) (- 0 27)) (bvule #b000000 #b100000)) (=> (bvule #b000000 #b100000) (=> (= |w#0@4| (bvshl |w#0@@1| (concat #b00000000000000000000000000 #b000000))) (=> (and (= |w#0@5| |w#0@4|) (= (ControlFlow 0 26) 4)) GeneratedUnifiedExit_correct))))))
(let ((anon10_Then_correct  (and (=> (= (ControlFlow 0 24) (- 0 25)) (bvule (concat #b0000 |bb#0@@1|) #b100000)) (=> (bvule (concat #b0000 |bb#0@@1|) #b100000) (=> (= |w#0@3| (bvshl |w#0@@1| (concat #b00000000000000000000000000 (concat #b0000 |bb#0@@1|)))) (=> (and (= |w#0@5| |w#0@3|) (= (ControlFlow 0 24) 4)) GeneratedUnifiedExit_correct))))))
(let ((anon9_Then_correct  (and (=> (= (ControlFlow 0 21) (- 0 23)) (bvult |seven#0@@1| #b1000000)) (=> (bvult |seven#0@@1| #b1000000) (and (=> (= (ControlFlow 0 21) (- 0 22)) (bvule ((_ extract 5 0) |seven#0@@1|) #b100000)) (=> (bvule ((_ extract 5 0) |seven#0@@1|) #b100000) (=> (= |w#0@2| (bvshl |w#0@@1| (concat #b00000000000000000000000000 ((_ extract 5 0) |seven#0@@1|)))) (=> (and (= |w#0@5| |w#0@2|) (= (ControlFlow 0 21) 4)) GeneratedUnifiedExit_correct))))))))
(let ((anon8_Then_correct  (and (=> (= (ControlFlow 0 18) (- 0 20)) (bvult |w#0@@1| #x00000040)) (=> (bvult |w#0@@1| #x00000040) (and (=> (= (ControlFlow 0 18) (- 0 19)) (bvule ((_ extract 5 0) |w#0@@1|) #b100000)) (=> (bvule ((_ extract 5 0) |w#0@@1|) #b100000) (=> (= |w#0@1| (bvshl |w#0@@1| (concat #b00000000000000000000000000 ((_ extract 5 0) |w#0@@1|)))) (=> (and (= |w#0@5| |w#0@1|) (= (ControlFlow 0 18) 4)) GeneratedUnifiedExit_correct))))))))
(let ((anon7_Then_correct  (and (=> (= (ControlFlow 0 15) (- 0 17)) (bvult |b67#0@@1| #b0000000000000000000000000000000000000000000000000000000000001000000)) (=> (bvult |b67#0@@1| #b0000000000000000000000000000000000000000000000000000000000001000000) (and (=> (= (ControlFlow 0 15) (- 0 16)) (bvule ((_ extract 5 0) |b67#0@@1|) #b100000)) (=> (bvule ((_ extract 5 0) |b67#0@@1|) #b100000) (=> (= |w#0@0| (bvshl |w#0@@1| (concat #b00000000000000000000000000 ((_ extract 5 0) |b67#0@@1|)))) (=> (and (= |w#0@5| |w#0@0|) (= (ControlFlow 0 15) 4)) GeneratedUnifiedExit_correct))))))))
(let ((anon11_Else_correct  (=> (and (and (and (and (and (not (U_2_bool (Lit boolType (bool_2_U true)))) (not (U_2_bool (Lit boolType (bool_2_U true))))) (not (U_2_bool (Lit boolType (bool_2_U true))))) (not (U_2_bool (Lit boolType (bool_2_U true))))) (not (U_2_bool (Lit boolType (bool_2_U true))))) (= (ControlFlow 0 2) (- 0 1))) false)))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (and (and (and (and (and (=> (= (ControlFlow 0 28) 15) anon7_Then_correct) (=> (= (ControlFlow 0 28) 18) anon8_Then_correct)) (=> (= (ControlFlow 0 28) 21) anon9_Then_correct)) (=> (= (ControlFlow 0 28) 24) anon10_Then_correct)) (=> (= (ControlFlow 0 28) 26) anon11_Then_correct)) (=> (= (ControlFlow 0 28) 2) anon11_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (and (<= (LitInt 0) |n#0@@1|) (= (Mod |even#0@@1| (LitInt 2)) (LitInt 0)))) (=> (and (and (and (<= (LitReal (- 0.0 4.0)) |small#0@@1|) (< |small#0@@1| 300.0)) (= 0 |noll#0@@1|)) (and (and (<= (LitInt 0) |h#0@@1|) (< |h#0@@1| 80)) (and (= 2 $FunctionContextHeight) (= (ControlFlow 0 29) 28)))) anon0_correct))))
PreconditionGeneratedEntry_correct))))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 18) (- 20))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 18) (- 19))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 21) (- 23))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 21) (- 22))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
