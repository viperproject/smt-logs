(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 (T@U) T@U)
(declare-fun $generated@@20 () Int)
(declare-fun $generated@@21 (T@U T@U) Int)
(declare-fun $generated@@22 (T@U) T@U)
(declare-fun $generated@@23 (T@T T@U) T@U)
(declare-fun $generated@@24 () T@T)
(declare-fun $generated@@25 (T@U) Bool)
(declare-fun $generated@@26 (T@U) Bool)
(declare-fun $generated@@27 (T@T T@U T@U) Bool)
(declare-fun $generated@@28 (T@U) T@U)
(declare-fun $generated@@29 (T@U) Int)
(declare-fun $generated@@30 (Int) Int)
(declare-fun $generated@@31 (T@U) Bool)
(declare-fun $generated@@32 (T@U Int) T@U)
(declare-fun $generated@@33 (T@U Int) T@U)
(declare-fun $generated@@34 (T@U) Int)
(declare-fun $generated@@39 () T@U)
(declare-fun $generated@@45 (T@U Int) T@U)
(declare-fun $generated@@51 (T@U T@U) Bool)
(declare-fun $generated@@55 (T@T T@U) T@U)
(declare-fun $generated@@56 (T@T T@U) T@U)
(declare-fun $generated@@59 (T@U) Int)
(declare-fun $generated@@64 (T@U T@U T@U) Bool)
(declare-fun $generated@@65 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@78 (T@U T@U) Bool)
(declare-fun $generated@@88 (T@U) T@U)
(declare-fun $generated@@95 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@96 () T@T)
(declare-fun $generated@@97 () T@T)
(declare-fun $generated@@98 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@99 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@100 () T@T)
(declare-fun $generated@@101 (T@T T@T) T@T)
(declare-fun $generated@@102 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@103 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@104 (T@T) T@T)
(declare-fun $generated@@105 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (= ($generated@@19 $generated) $generated@@0))
(assert (= ($generated@@3 $generated@@24) 3))
(assert  (=> (<= 0 $generated@@20) (forall (($generated@@35 T@U) ($generated@@36 T@U) ($generated@@37 T@U) ) (!  (=> (or ($generated@@26 ($generated@@23 $generated@@24 $generated@@37)) (and (< 0 $generated@@20) (and ($generated@@25 $generated@@36) ($generated@@27 $generated@@24 $generated@@37 ($generated@@28 $generated))))) (and (=> (or (not (= ($generated@@29 ($generated@@23 $generated@@24 $generated@@37)) ($generated@@30 0))) (not true)) (and ($generated@@31 ($generated@@23 $generated@@24 $generated@@37)) ($generated@@26 ($generated@@32 ($generated@@33 ($generated@@23 $generated@@24 $generated@@37) ($generated@@34 ($generated@@23 $generated@@24 $generated@@37))) ($generated@@30 0))))) (= ($generated@@21 ($generated@@22 $generated@@35) ($generated@@23 $generated@@24 $generated@@37)) (ite (= ($generated@@29 ($generated@@23 $generated@@24 $generated@@37)) ($generated@@30 0)) 0 (let (($generated@@38 ($generated@@34 ($generated@@23 $generated@@24 $generated@@37))))
(+ $generated@@38 ($generated@@21 ($generated@@22 $generated@@35) ($generated@@32 ($generated@@33 ($generated@@23 $generated@@24 $generated@@37) $generated@@38) ($generated@@30 0)))))))))
 :weight 3
 :pattern ( ($generated@@21 ($generated@@22 $generated@@35) ($generated@@23 $generated@@24 $generated@@37)) ($generated@@25 $generated@@36))
))))
(assert (= ($generated@@29 $generated@@39) 0))
(assert (forall (($generated@@40 T@U) ($generated@@41 Int) ) (!  (=> (= $generated@@41 0) (= ($generated@@32 $generated@@40 $generated@@41) $generated@@40))
 :pattern ( ($generated@@32 $generated@@40 $generated@@41))
)))
(assert (forall (($generated@@42 Int) ) (! (= ($generated@@30 $generated@@42) $generated@@42)
 :pattern ( ($generated@@30 $generated@@42))
)))
(assert (forall (($generated@@43 T@U) ($generated@@44 T@T) ) (! (= ($generated@@23 $generated@@44 $generated@@43) $generated@@43)
 :pattern ( ($generated@@23 $generated@@44 $generated@@43))
)))
(assert (forall (($generated@@46 T@U) ($generated@@47 Int) ($generated@@48 Int) ) (!  (=> (and (and (<= 0 $generated@@48) (< $generated@@48 $generated@@47)) (< $generated@@48 ($generated@@29 $generated@@46))) (= ($generated@@45 ($generated@@33 $generated@@46 $generated@@47) $generated@@48) ($generated@@45 $generated@@46 $generated@@48)))
 :weight 25
 :pattern ( ($generated@@45 ($generated@@33 $generated@@46 $generated@@47) $generated@@48))
 :pattern ( ($generated@@45 $generated@@46 $generated@@48) ($generated@@33 $generated@@46 $generated@@47))
)))
(assert (forall (($generated@@49 T@U) ($generated@@50 Int) ) (!  (=> (and (<= 0 $generated@@50) (<= $generated@@50 ($generated@@29 $generated@@49))) (= ($generated@@29 ($generated@@32 $generated@@49 $generated@@50)) (- ($generated@@29 $generated@@49) $generated@@50)))
 :pattern ( ($generated@@29 ($generated@@32 $generated@@49 $generated@@50)))
)))
(assert (forall (($generated@@52 T@U) ($generated@@53 T@U) ) (! (= ($generated@@51 $generated@@52 $generated@@53)  (and (= ($generated@@29 $generated@@52) ($generated@@29 $generated@@53)) (forall (($generated@@54 Int) ) (!  (=> (and (<= 0 $generated@@54) (< $generated@@54 ($generated@@29 $generated@@52))) (= ($generated@@45 $generated@@52 $generated@@54) ($generated@@45 $generated@@53 $generated@@54)))
 :pattern ( ($generated@@45 $generated@@52 $generated@@54))
 :pattern ( ($generated@@45 $generated@@53 $generated@@54))
))))
 :pattern ( ($generated@@51 $generated@@52 $generated@@53))
)))
(assert (forall (($generated@@57 T@U) ($generated@@58 T@T) ) (! (= ($generated@@56 $generated@@58 ($generated@@55 $generated@@58 $generated@@57)) $generated@@57)
 :pattern ( ($generated@@55 $generated@@58 $generated@@57))
)))
(assert (forall (($generated@@60 T@U) ($generated@@61 Int) ) (!  (=> (and (<= 0 $generated@@61) (< $generated@@61 ($generated@@29 $generated@@60))) (< ($generated@@59 ($generated@@33 $generated@@60 $generated@@61)) ($generated@@59 $generated@@60)))
 :pattern ( ($generated@@59 ($generated@@33 $generated@@60 $generated@@61)))
)))
(assert (forall (($generated@@62 T@U) ($generated@@63 Int) ) (!  (=> (and (< 0 $generated@@63) (<= $generated@@63 ($generated@@29 $generated@@62))) (< ($generated@@59 ($generated@@32 $generated@@62 $generated@@63)) ($generated@@59 $generated@@62)))
 :pattern ( ($generated@@59 ($generated@@32 $generated@@62 $generated@@63)))
)))
(assert (forall (($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@T) ) (! (= ($generated@@64 ($generated@@56 $generated@@69 $generated@@66) $generated@@67 $generated@@68) ($generated@@65 $generated@@69 $generated@@66 $generated@@67 $generated@@68))
 :pattern ( ($generated@@64 ($generated@@56 $generated@@69 $generated@@66) $generated@@67 $generated@@68))
)))
(assert (forall (($generated@@70 T@U) ($generated@@71 Int) ($generated@@72 Int) ) (!  (=> (and (and (<= 0 $generated@@71) (<= 0 $generated@@72)) (< $generated@@72 (- ($generated@@29 $generated@@70) $generated@@71))) (= ($generated@@45 ($generated@@32 $generated@@70 $generated@@71) $generated@@72) ($generated@@45 $generated@@70 (+ $generated@@72 $generated@@71))))
 :weight 25
 :pattern ( ($generated@@45 ($generated@@32 $generated@@70 $generated@@71) $generated@@72))
)))
(assert (forall (($generated@@73 T@U) ) (!  (=> ($generated@@31 $generated@@73) (and (<= ($generated@@30 0) ($generated@@34 $generated@@73)) (< ($generated@@34 $generated@@73) ($generated@@29 $generated@@73))))
 :pattern ( ($generated@@34 $generated@@73))
)))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@U) ) (!  (=> ($generated@@51 $generated@@74 $generated@@75) (= $generated@@74 $generated@@75))
 :pattern ( ($generated@@51 $generated@@74 $generated@@75))
)))
(assert (forall (($generated@@76 T@U) ($generated@@77 Int) ) (!  (=> (and (<= 0 $generated@@77) (<= $generated@@77 ($generated@@29 $generated@@76))) (= ($generated@@29 ($generated@@33 $generated@@76 $generated@@77)) $generated@@77))
 :pattern ( ($generated@@29 ($generated@@33 $generated@@76 $generated@@77)))
)))
(assert (forall (($generated@@79 T@U) ) (!  (=> ($generated@@78 $generated@@79 $generated) (and (= ($generated@@56 $generated@@5 ($generated@@55 $generated@@5 $generated@@79)) $generated@@79) ($generated@@27 $generated@@5 ($generated@@55 $generated@@5 $generated@@79) $generated)))
 :pattern ( ($generated@@78 $generated@@79 $generated))
)))
(assert (forall (($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@T) ) (! (= ($generated@@78 ($generated@@56 $generated@@82 $generated@@80) $generated@@81) ($generated@@27 $generated@@82 $generated@@80 $generated@@81))
 :pattern ( ($generated@@78 ($generated@@56 $generated@@82 $generated@@80) $generated@@81))
)))
(assert (forall (($generated@@83 T@U) ) (! (<= 0 ($generated@@29 $generated@@83))
 :pattern ( ($generated@@29 $generated@@83))
)))
(assert (forall (($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (! (= ($generated@@65 $generated@@24 $generated@@84 ($generated@@28 $generated@@85) $generated@@86) (forall (($generated@@87 Int) ) (!  (=> (and (<= 0 $generated@@87) (< $generated@@87 ($generated@@29 $generated@@84))) ($generated@@64 ($generated@@45 $generated@@84 $generated@@87) $generated@@85 $generated@@86))
 :pattern ( ($generated@@45 $generated@@84 $generated@@87))
)))
 :pattern ( ($generated@@65 $generated@@24 $generated@@84 ($generated@@28 $generated@@85) $generated@@86))
)))
(assert (forall (($generated@@89 T@U) ) (! (= ($generated@@88 ($generated@@28 $generated@@89)) $generated@@89)
 :pattern ( ($generated@@28 $generated@@89))
)))
(assert (forall (($generated@@90 T@U) ) (! (= ($generated@@19 ($generated@@28 $generated@@90)) $generated@@1)
 :pattern ( ($generated@@28 $generated@@90))
)))
(assert (forall (($generated@@91 T@U) ($generated@@92 T@T) ) (! (= ($generated@@55 $generated@@92 ($generated@@56 $generated@@92 $generated@@91)) $generated@@91)
 :pattern ( ($generated@@56 $generated@@92 $generated@@91))
)))
(assert (forall (($generated@@93 T@U) ($generated@@94 T@U) ) (! (= ($generated@@21 ($generated@@22 $generated@@93) $generated@@94) ($generated@@21 $generated@@93 $generated@@94))
 :pattern ( ($generated@@21 ($generated@@22 $generated@@93) $generated@@94))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@106 T@T) ($generated@@107 T@T) ($generated@@108 T@T) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ) (! (= ($generated@@95 $generated@@106 $generated@@107 $generated@@108 ($generated@@102 $generated@@106 $generated@@107 $generated@@108 $generated@@110 $generated@@111 $generated@@112 $generated@@109) $generated@@111 $generated@@112) $generated@@109)
 :weight 0
)) (and (forall (($generated@@113 T@T) ($generated@@114 T@T) ($generated@@115 T@T) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ) (!  (or (= $generated@@118 $generated@@120) (= ($generated@@95 $generated@@113 $generated@@114 $generated@@115 ($generated@@102 $generated@@113 $generated@@114 $generated@@115 $generated@@117 $generated@@118 $generated@@119 $generated@@116) $generated@@120 $generated@@121) ($generated@@95 $generated@@113 $generated@@114 $generated@@115 $generated@@117 $generated@@120 $generated@@121)))
 :weight 0
)) (forall (($generated@@122 T@T) ($generated@@123 T@T) ($generated@@124 T@T) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ) (!  (or (= $generated@@128 $generated@@130) (= ($generated@@95 $generated@@122 $generated@@123 $generated@@124 ($generated@@102 $generated@@122 $generated@@123 $generated@@124 $generated@@126 $generated@@127 $generated@@128 $generated@@125) $generated@@129 $generated@@130) ($generated@@95 $generated@@122 $generated@@123 $generated@@124 $generated@@126 $generated@@129 $generated@@130)))
 :weight 0
)))) (= ($generated@@3 $generated@@96) 4)) (= ($generated@@3 $generated@@97) 5)) (forall (($generated@@131 T@T) ($generated@@132 T@T) ($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ) (! (= ($generated@@99 $generated@@131 $generated@@132 ($generated@@103 $generated@@131 $generated@@132 $generated@@134 $generated@@135 $generated@@133) $generated@@135) $generated@@133)
 :weight 0
))) (forall (($generated@@136 T@T) ($generated@@137 T@T) ($generated@@138 T@U) ($generated@@139 T@U) ($generated@@140 T@U) ($generated@@141 T@U) ) (!  (or (= $generated@@140 $generated@@141) (= ($generated@@99 $generated@@136 $generated@@137 ($generated@@103 $generated@@136 $generated@@137 $generated@@139 $generated@@140 $generated@@138) $generated@@141) ($generated@@99 $generated@@136 $generated@@137 $generated@@139 $generated@@141)))
 :weight 0
))) (= ($generated@@3 $generated@@100) 6)) (forall (($generated@@142 T@T) ($generated@@143 T@T) ) (= ($generated@@3 ($generated@@101 $generated@@142 $generated@@143)) 7))) (forall (($generated@@144 T@T) ($generated@@145 T@T) ) (! (= ($generated@@104 ($generated@@101 $generated@@144 $generated@@145)) $generated@@144)
 :pattern ( ($generated@@101 $generated@@144 $generated@@145))
))) (forall (($generated@@146 T@T) ($generated@@147 T@T) ) (! (= ($generated@@105 ($generated@@101 $generated@@146 $generated@@147)) $generated@@147)
 :pattern ( ($generated@@101 $generated@@146 $generated@@147))
))))
(assert (forall (($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 T@U) ($generated@@151 Bool) ($generated@@152 T@U) ($generated@@153 T@U) ) (! (= ($generated@@8 ($generated@@95 $generated@@96 $generated@@97 $generated@@4 ($generated@@98 $generated@@148 $generated@@149 $generated@@150 $generated@@151) $generated@@152 $generated@@153))  (=> (and (or (not (= $generated@@152 $generated@@148)) (not true)) ($generated@@8 ($generated@@55 $generated@@4 ($generated@@99 $generated@@97 $generated@@100 ($generated@@99 $generated@@96 ($generated@@101 $generated@@97 $generated@@100) $generated@@149 $generated@@152) $generated@@150)))) $generated@@151))
 :pattern ( ($generated@@95 $generated@@96 $generated@@97 $generated@@4 ($generated@@98 $generated@@148 $generated@@149 $generated@@150 $generated@@151) $generated@@152 $generated@@153))
)))
(assert (forall (($generated@@154 T@U) ($generated@@155 T@U) ) (!  (=> ($generated@@78 $generated@@154 ($generated@@28 $generated@@155)) (and (= ($generated@@56 $generated@@24 ($generated@@55 $generated@@24 $generated@@154)) $generated@@154) ($generated@@27 $generated@@24 ($generated@@55 $generated@@24 $generated@@154) ($generated@@28 $generated@@155))))
 :pattern ( ($generated@@78 $generated@@154 ($generated@@28 $generated@@155)))
)))
(assert (forall (($generated@@156 T@U) ($generated@@157 Int) ($generated@@158 Int) ) (!  (=> (and (and (<= 0 $generated@@157) (<= $generated@@157 $generated@@158)) (< $generated@@158 ($generated@@29 $generated@@156))) (= ($generated@@45 ($generated@@32 $generated@@156 $generated@@157) (- $generated@@158 $generated@@157)) ($generated@@45 $generated@@156 $generated@@158)))
 :weight 25
 :pattern ( ($generated@@45 $generated@@156 $generated@@158) ($generated@@32 $generated@@156 $generated@@157))
)))
(assert (forall (($generated@@159 T@U) ($generated@@160 Int) ($generated@@161 Int) ) (!  (=> (and (and (<= 0 $generated@@160) (<= 0 $generated@@161)) (<= (+ $generated@@160 $generated@@161) ($generated@@29 $generated@@159))) (= ($generated@@32 ($generated@@32 $generated@@159 $generated@@160) $generated@@161) ($generated@@32 $generated@@159 (+ $generated@@160 $generated@@161))))
 :pattern ( ($generated@@32 ($generated@@32 $generated@@159 $generated@@160) $generated@@161))
)))
(assert (forall (($generated@@162 Int) ) (! (= ($generated@@56 $generated@@5 ($generated@@9 ($generated@@30 $generated@@162))) ($generated@@23 $generated@@100 ($generated@@56 $generated@@5 ($generated@@9 $generated@@162))))
 :pattern ( ($generated@@56 $generated@@5 ($generated@@9 ($generated@@30 $generated@@162))))
)))
(assert (forall (($generated@@163 T@U) ($generated@@164 T@T) ) (! (= ($generated@@56 $generated@@164 ($generated@@23 $generated@@164 $generated@@163)) ($generated@@23 $generated@@100 ($generated@@56 $generated@@164 $generated@@163)))
 :pattern ( ($generated@@56 $generated@@164 ($generated@@23 $generated@@164 $generated@@163)))
)))
(assert (forall (($generated@@165 T@U) ) (!  (=> (= ($generated@@29 $generated@@165) 0) (= $generated@@165 $generated@@39))
 :pattern ( ($generated@@29 $generated@@165))
)))
(assert (forall (($generated@@166 T@U) ($generated@@167 Int) ) (!  (=> (= $generated@@167 0) (= ($generated@@33 $generated@@166 $generated@@167) $generated@@39))
 :pattern ( ($generated@@33 $generated@@166 $generated@@167))
)))
(assert (forall (($generated@@168 T@U) ($generated@@169 T@U) ) (! ($generated@@65 $generated@@5 $generated@@169 $generated $generated@@168)
 :pattern ( ($generated@@65 $generated@@5 $generated@@169 $generated $generated@@168))
)))
(assert (forall (($generated@@170 T@U) ($generated@@171 T@U) ) (! (= ($generated@@27 $generated@@24 $generated@@170 ($generated@@28 $generated@@171)) (forall (($generated@@172 Int) ) (!  (=> (and (<= 0 $generated@@172) (< $generated@@172 ($generated@@29 $generated@@170))) ($generated@@78 ($generated@@45 $generated@@170 $generated@@172) $generated@@171))
 :pattern ( ($generated@@45 $generated@@170 $generated@@172))
)))
 :pattern ( ($generated@@27 $generated@@24 $generated@@170 ($generated@@28 $generated@@171)))
)))
(assert (forall (($generated@@173 T@U) ) (! ($generated@@27 $generated@@5 $generated@@173 $generated)
 :pattern ( ($generated@@27 $generated@@5 $generated@@173 $generated))
)))
(assert  (=> (<= 0 $generated@@20) (forall (($generated@@174 T@U) ($generated@@175 T@U) ($generated@@176 T@U) ) (!  (=> (or ($generated@@26 $generated@@176) (and (< 0 $generated@@20) (and ($generated@@25 $generated@@175) ($generated@@27 $generated@@24 $generated@@176 ($generated@@28 $generated))))) (and (=> (or (not (= ($generated@@29 $generated@@176) ($generated@@30 0))) (not true)) (and ($generated@@31 $generated@@176) ($generated@@26 ($generated@@32 ($generated@@33 $generated@@176 ($generated@@34 $generated@@176)) ($generated@@30 0))))) (= ($generated@@21 ($generated@@22 $generated@@174) $generated@@176) (ite (= ($generated@@29 $generated@@176) ($generated@@30 0)) 0 (let (($generated@@177 ($generated@@34 $generated@@176)))
(+ $generated@@177 ($generated@@21 $generated@@174 ($generated@@32 ($generated@@33 $generated@@176 $generated@@177) ($generated@@30 0)))))))))
 :pattern ( ($generated@@21 ($generated@@22 $generated@@174) $generated@@176) ($generated@@25 $generated@@175))
))))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@178 () T@U)
(declare-fun $generated@@179 () Int)
(declare-fun $generated@@180 () T@U)
(declare-fun $generated@@181 () T@U)
(declare-fun $generated@@182 () T@U)
(declare-fun $generated@@183 () T@U)
(declare-fun $generated@@184 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 18) (let (($generated@@185  (and (=> (= (ControlFlow 0 5) (- 0 12)) (or (and ($generated@@27 $generated@@5 ($generated@@9 (- ($generated@@29 $generated@@178) 1)) $generated) (and (<= ($generated@@30 0) (- ($generated@@29 $generated@@178) 1)) (< (- ($generated@@29 $generated@@178) 1) ($generated@@29 $generated@@178)))) (or (and ($generated@@27 $generated@@5 ($generated@@9 ($generated@@30 0)) $generated) (and (<= ($generated@@30 0) ($generated@@30 0)) (< 0 ($generated@@29 $generated@@178)))) (or (and ($generated@@27 $generated@@5 ($generated@@9 ($generated@@30 0)) $generated) (and (<= ($generated@@30 0) ($generated@@30 0)) (< 0 ($generated@@29 $generated@@178)))) (exists (($generated@@186 Int) )  (and (<= ($generated@@30 0) $generated@@186) (< $generated@@186 ($generated@@29 $generated@@178)))))))) (=> (or (and ($generated@@27 $generated@@5 ($generated@@9 (- ($generated@@29 $generated@@178) 1)) $generated) (and (<= ($generated@@30 0) (- ($generated@@29 $generated@@178) 1)) (< (- ($generated@@29 $generated@@178) 1) ($generated@@29 $generated@@178)))) (or (and ($generated@@27 $generated@@5 ($generated@@9 ($generated@@30 0)) $generated) (and (<= ($generated@@30 0) ($generated@@30 0)) (< 0 ($generated@@29 $generated@@178)))) (or (and ($generated@@27 $generated@@5 ($generated@@9 ($generated@@30 0)) $generated) (and (<= ($generated@@30 0) ($generated@@30 0)) (< 0 ($generated@@29 $generated@@178)))) (exists (($generated@@187 Int) )  (and (<= ($generated@@30 0) $generated@@187) (< $generated@@187 ($generated@@29 $generated@@178))))))) (=> (and (<= ($generated@@30 0) $generated@@179) (< $generated@@179 ($generated@@29 $generated@@178))) (and (=> (= (ControlFlow 0 5) (- 0 11)) (and (<= 0 ($generated@@30 0)) (<= ($generated@@30 0) ($generated@@29 $generated@@178)))) (and (=> (= (ControlFlow 0 5) (- 0 10)) (and (<= ($generated@@30 0) $generated@@179) (<= $generated@@179 ($generated@@29 $generated@@178)))) (and (=> (= (ControlFlow 0 5) (- 0 9)) (and (<= 0 $generated@@179) (<= $generated@@179 ($generated@@29 $generated@@178)))) (and (=> (= (ControlFlow 0 5) (- 0 8)) ($generated@@51 ($generated@@32 ($generated@@33 $generated@@178 $generated@@179) ($generated@@30 0)) ($generated@@33 $generated@@178 $generated@@179))) (=> ($generated@@51 ($generated@@32 ($generated@@33 $generated@@178 $generated@@179) ($generated@@30 0)) ($generated@@33 $generated@@178 $generated@@179)) (and (=> (= (ControlFlow 0 5) (- 0 7)) (and (<= 0 ($generated@@30 0)) (<= ($generated@@30 0) ($generated@@29 $generated@@178)))) (=> (and (<= 0 ($generated@@30 0)) (<= ($generated@@30 0) ($generated@@29 $generated@@178))) (and (=> (= (ControlFlow 0 5) (- 0 6)) (and (<= ($generated@@30 0) $generated@@179) (<= $generated@@179 ($generated@@29 $generated@@178)))) (=> (and (<= ($generated@@30 0) $generated@@179) (<= $generated@@179 ($generated@@29 $generated@@178))) (=> (= $generated@@180 ($generated@@32 ($generated@@33 $generated@@178 $generated@@179) ($generated@@30 0))) (=> (and ($generated@@65 $generated@@24 $generated@@180 ($generated@@28 $generated) $generated@@181) (= (ControlFlow 0 5) (- 0 4))) (< ($generated@@59 $generated@@180) ($generated@@59 $generated@@178))))))))))))))))))
(let (($generated@@188  (=> (and (< $generated@@179 ($generated@@30 0)) (= (ControlFlow 0 14) 5)) $generated@@185)))
(let (($generated@@189  (=> (and (<= ($generated@@30 0) $generated@@179) (= (ControlFlow 0 13) 5)) $generated@@185)))
(let (($generated@@190  (and (=> (= (ControlFlow 0 15) 13) $generated@@189) (=> (= (ControlFlow 0 15) 14) $generated@@188))))
(let (($generated@@191 true))
(let (($generated@@192  (=> (or (not (= ($generated@@29 $generated@@178) ($generated@@30 0))) (not true)) (and (=> (= (ControlFlow 0 16) 15) $generated@@190) (=> (= (ControlFlow 0 16) 3) $generated@@191)))))
(let (($generated@@193 true))
(let (($generated@@194 true))
(let (($generated@@195  (=> (= $generated@@182 ($generated@@98 $generated@@183 $generated@@181 $generated@@2 false)) (and (and (=> (= (ControlFlow 0 17) 1) $generated@@194) (=> (= (ControlFlow 0 17) 2) $generated@@193)) (=> (= (ControlFlow 0 17) 16) $generated@@192)))))
(let (($generated@@196  (=> (and (and (and ($generated@@25 $generated@@181) ($generated@@184 $generated@@181)) ($generated@@27 $generated@@24 $generated@@178 ($generated@@28 $generated))) (and (= 0 $generated@@20) (= (ControlFlow 0 18) 17))) $generated@@195)))
$generated@@196)))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
