(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@20 () T@U)
(declare-fun $generated@@23 (T@U) Int)
(declare-fun $generated@@24 () T@U)
(declare-fun $generated@@25 (T@U Int) T@U)
(declare-fun $generated@@26 (T@U T@U) T@U)
(declare-fun $generated@@30 (T@U Int) T@U)
(declare-fun $generated@@31 (T@U T@U) T@U)
(declare-fun $generated@@37 (Int) Int)
(declare-fun $generated@@39 (T@T T@U) T@U)
(declare-fun $generated@@42 (T@T T@U T@U) Bool)
(declare-fun $generated@@43 () T@T)
(declare-fun $generated@@44 (T@U) T@U)
(declare-fun $generated@@45 (T@U T@U) Bool)
(declare-fun $generated@@49 (T@U Int) T@U)
(declare-fun $generated@@55 (T@U T@U) Bool)
(declare-fun $generated@@59 (T@T T@U) T@U)
(declare-fun $generated@@60 (T@T T@U) T@U)
(declare-fun $generated@@65 (T@U T@U T@U) Bool)
(declare-fun $generated@@91 (T@U) T@U)
(declare-fun $generated@@93 (T@U) T@U)
(declare-fun $generated@@97 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@98 () T@T)
(declare-fun $generated@@99 () T@T)
(declare-fun $generated@@100 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@101 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@102 () T@T)
(declare-fun $generated@@103 (T@T T@T) T@T)
(declare-fun $generated@@104 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@105 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@106 (T@T) T@T)
(declare-fun $generated@@107 (T@T) T@T)
(declare-fun $generated@@156 (T@U) T@U)
(declare-fun $generated@@157 (T@U) T@U)
(declare-fun $generated@@162 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (forall (($generated@@21 T@U) ($generated@@22 T@U) ) (! ($generated@@19 $generated@@5 $generated@@21 $generated@@20 $generated@@22)
 :pattern ( ($generated@@19 $generated@@5 $generated@@21 $generated@@20 $generated@@22))
)))
(assert (= ($generated@@23 $generated@@24) 0))
(assert (forall (($generated@@27 T@U) ($generated@@28 T@U) ($generated@@29 Int) ) (!  (=> (and (<= 0 $generated@@29) (<= $generated@@29 ($generated@@23 $generated@@27))) (= ($generated@@25 ($generated@@26 $generated@@27 $generated@@28) $generated@@29) ($generated@@26 ($generated@@25 $generated@@27 $generated@@29) $generated@@28)))
 :pattern ( ($generated@@25 ($generated@@26 $generated@@27 $generated@@28) $generated@@29))
)))
(assert (forall (($generated@@32 T@U) ($generated@@33 T@U) ($generated@@34 Int) ) (!  (=> (= $generated@@34 ($generated@@23 $generated@@32)) (and (= ($generated@@30 ($generated@@31 $generated@@32 $generated@@33) $generated@@34) $generated@@32) (= ($generated@@25 ($generated@@31 $generated@@32 $generated@@33) $generated@@34) $generated@@33)))
 :pattern ( ($generated@@30 ($generated@@31 $generated@@32 $generated@@33) $generated@@34))
 :pattern ( ($generated@@25 ($generated@@31 $generated@@32 $generated@@33) $generated@@34))
)))
(assert (forall (($generated@@35 T@U) ($generated@@36 Int) ) (!  (=> (= $generated@@36 0) (= ($generated@@25 $generated@@35 $generated@@36) $generated@@35))
 :pattern ( ($generated@@25 $generated@@35 $generated@@36))
)))
(assert (forall (($generated@@38 Int) ) (! (= ($generated@@37 $generated@@38) $generated@@38)
 :pattern ( ($generated@@37 $generated@@38))
)))
(assert (forall (($generated@@40 T@U) ($generated@@41 T@T) ) (! (= ($generated@@39 $generated@@41 $generated@@40) $generated@@40)
 :pattern ( ($generated@@39 $generated@@41 $generated@@40))
)))
(assert (= ($generated@@3 $generated@@43) 3))
(assert (forall (($generated@@46 T@U) ($generated@@47 T@U) ($generated@@48 T@U) ) (!  (=> (and ($generated@@42 $generated@@43 $generated@@46 ($generated@@44 $generated@@48)) ($generated@@45 $generated@@47 $generated@@48)) ($generated@@42 $generated@@43 ($generated@@26 $generated@@46 $generated@@47) ($generated@@44 $generated@@48)))
 :pattern ( ($generated@@42 $generated@@43 ($generated@@26 $generated@@46 $generated@@47) ($generated@@44 $generated@@48)))
)))
(assert (forall (($generated@@50 T@U) ($generated@@51 Int) ($generated@@52 Int) ) (!  (=> (and (and (<= 0 $generated@@52) (< $generated@@52 $generated@@51)) (< $generated@@52 ($generated@@23 $generated@@50))) (= ($generated@@49 ($generated@@30 $generated@@50 $generated@@51) $generated@@52) ($generated@@49 $generated@@50 $generated@@52)))
 :weight 25
 :pattern ( ($generated@@49 ($generated@@30 $generated@@50 $generated@@51) $generated@@52))
 :pattern ( ($generated@@49 $generated@@50 $generated@@52) ($generated@@30 $generated@@50 $generated@@51))
)))
(assert (forall (($generated@@53 T@U) ($generated@@54 Int) ) (!  (=> (and (<= 0 $generated@@54) (<= $generated@@54 ($generated@@23 $generated@@53))) (= ($generated@@23 ($generated@@25 $generated@@53 $generated@@54)) (- ($generated@@23 $generated@@53) $generated@@54)))
 :pattern ( ($generated@@23 ($generated@@25 $generated@@53 $generated@@54)))
)))
(assert (forall (($generated@@56 T@U) ($generated@@57 T@U) ) (! (= ($generated@@55 $generated@@56 $generated@@57)  (and (= ($generated@@23 $generated@@56) ($generated@@23 $generated@@57)) (forall (($generated@@58 Int) ) (!  (=> (and (<= 0 $generated@@58) (< $generated@@58 ($generated@@23 $generated@@56))) (= ($generated@@49 $generated@@56 $generated@@58) ($generated@@49 $generated@@57 $generated@@58)))
 :pattern ( ($generated@@49 $generated@@56 $generated@@58))
 :pattern ( ($generated@@49 $generated@@57 $generated@@58))
))))
 :pattern ( ($generated@@55 $generated@@56 $generated@@57))
)))
(assert (forall (($generated@@61 T@U) ($generated@@62 T@T) ) (! (= ($generated@@60 $generated@@62 ($generated@@59 $generated@@62 $generated@@61)) $generated@@61)
 :pattern ( ($generated@@59 $generated@@62 $generated@@61))
)))
(assert (forall (($generated@@63 T@U) ($generated@@64 T@U) ) (! (= ($generated@@23 ($generated@@26 $generated@@63 $generated@@64)) (+ 1 ($generated@@23 $generated@@63)))
 :pattern ( ($generated@@26 $generated@@63 $generated@@64))
)))
(assert (forall (($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@T) ) (! (= ($generated@@65 ($generated@@60 $generated@@69 $generated@@66) $generated@@67 $generated@@68) ($generated@@19 $generated@@69 $generated@@66 $generated@@67 $generated@@68))
 :pattern ( ($generated@@65 ($generated@@60 $generated@@69 $generated@@66) $generated@@67 $generated@@68))
)))
(assert (forall (($generated@@70 T@U) ($generated@@71 Int) ($generated@@72 Int) ) (!  (=> (and (and (<= 0 $generated@@71) (<= 0 $generated@@72)) (< $generated@@72 (- ($generated@@23 $generated@@70) $generated@@71))) (= ($generated@@49 ($generated@@25 $generated@@70 $generated@@71) $generated@@72) ($generated@@49 $generated@@70 (+ $generated@@72 $generated@@71))))
 :weight 25
 :pattern ( ($generated@@49 ($generated@@25 $generated@@70 $generated@@71) $generated@@72))
)))
(assert (forall (($generated@@73 T@U) ($generated@@74 T@U) ) (! (= ($generated@@23 ($generated@@31 $generated@@73 $generated@@74)) (+ ($generated@@23 $generated@@73) ($generated@@23 $generated@@74)))
 :pattern ( ($generated@@23 ($generated@@31 $generated@@73 $generated@@74)))
)))
(assert (forall (($generated@@75 T@U) ) (!  (=> ($generated@@45 $generated@@75 $generated@@20) (and (= ($generated@@60 $generated@@5 ($generated@@59 $generated@@5 $generated@@75)) $generated@@75) ($generated@@42 $generated@@5 ($generated@@59 $generated@@5 $generated@@75) $generated@@20)))
 :pattern ( ($generated@@45 $generated@@75 $generated@@20))
)))
(assert (forall (($generated@@76 T@U) ($generated@@77 Int) ($generated@@78 T@U) ) (!  (and (=> (= $generated@@77 ($generated@@23 $generated@@76)) (= ($generated@@49 ($generated@@26 $generated@@76 $generated@@78) $generated@@77) $generated@@78)) (=> (or (not (= $generated@@77 ($generated@@23 $generated@@76))) (not true)) (= ($generated@@49 ($generated@@26 $generated@@76 $generated@@78) $generated@@77) ($generated@@49 $generated@@76 $generated@@77))))
 :pattern ( ($generated@@49 ($generated@@26 $generated@@76 $generated@@78) $generated@@77))
)))
(assert (forall (($generated@@79 T@U) ($generated@@80 T@U) ) (!  (=> ($generated@@55 $generated@@79 $generated@@80) (= $generated@@79 $generated@@80))
 :pattern ( ($generated@@55 $generated@@79 $generated@@80))
)))
(assert (forall (($generated@@81 T@U) ($generated@@82 Int) ) (!  (=> (and (<= 0 $generated@@82) (<= $generated@@82 ($generated@@23 $generated@@81))) (= ($generated@@23 ($generated@@30 $generated@@81 $generated@@82)) $generated@@82))
 :pattern ( ($generated@@23 ($generated@@30 $generated@@81 $generated@@82)))
)))
(assert (forall (($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@T) ) (! (= ($generated@@45 ($generated@@60 $generated@@85 $generated@@83) $generated@@84) ($generated@@42 $generated@@85 $generated@@83 $generated@@84))
 :pattern ( ($generated@@45 ($generated@@60 $generated@@85 $generated@@83) $generated@@84))
)))
(assert (forall (($generated@@86 T@U) ) (! (<= 0 ($generated@@23 $generated@@86))
 :pattern ( ($generated@@23 $generated@@86))
)))
(assert (forall (($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ) (! (= ($generated@@19 $generated@@43 $generated@@87 ($generated@@44 $generated@@88) $generated@@89) (forall (($generated@@90 Int) ) (!  (=> (and (<= 0 $generated@@90) (< $generated@@90 ($generated@@23 $generated@@87))) ($generated@@65 ($generated@@49 $generated@@87 $generated@@90) $generated@@88 $generated@@89))
 :pattern ( ($generated@@49 $generated@@87 $generated@@90))
)))
 :pattern ( ($generated@@19 $generated@@43 $generated@@87 ($generated@@44 $generated@@88) $generated@@89))
)))
(assert (forall (($generated@@92 T@U) ) (! (= ($generated@@91 ($generated@@44 $generated@@92)) $generated@@92)
 :pattern ( ($generated@@44 $generated@@92))
)))
(assert (forall (($generated@@94 T@U) ) (! (= ($generated@@93 ($generated@@44 $generated@@94)) $generated)
 :pattern ( ($generated@@44 $generated@@94))
)))
(assert (forall (($generated@@95 T@U) ($generated@@96 T@T) ) (! (= ($generated@@59 $generated@@96 ($generated@@60 $generated@@96 $generated@@95)) $generated@@95)
 :pattern ( ($generated@@60 $generated@@96 $generated@@95))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@108 T@T) ($generated@@109 T@T) ($generated@@110 T@T) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ) (! (= ($generated@@97 $generated@@108 $generated@@109 $generated@@110 ($generated@@104 $generated@@108 $generated@@109 $generated@@110 $generated@@112 $generated@@113 $generated@@114 $generated@@111) $generated@@113 $generated@@114) $generated@@111)
 :weight 0
)) (and (forall (($generated@@115 T@T) ($generated@@116 T@T) ($generated@@117 T@T) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ) (!  (or (= $generated@@120 $generated@@122) (= ($generated@@97 $generated@@115 $generated@@116 $generated@@117 ($generated@@104 $generated@@115 $generated@@116 $generated@@117 $generated@@119 $generated@@120 $generated@@121 $generated@@118) $generated@@122 $generated@@123) ($generated@@97 $generated@@115 $generated@@116 $generated@@117 $generated@@119 $generated@@122 $generated@@123)))
 :weight 0
)) (forall (($generated@@124 T@T) ($generated@@125 T@T) ($generated@@126 T@T) ($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ) (!  (or (= $generated@@130 $generated@@132) (= ($generated@@97 $generated@@124 $generated@@125 $generated@@126 ($generated@@104 $generated@@124 $generated@@125 $generated@@126 $generated@@128 $generated@@129 $generated@@130 $generated@@127) $generated@@131 $generated@@132) ($generated@@97 $generated@@124 $generated@@125 $generated@@126 $generated@@128 $generated@@131 $generated@@132)))
 :weight 0
)))) (= ($generated@@3 $generated@@98) 4)) (= ($generated@@3 $generated@@99) 5)) (forall (($generated@@133 T@T) ($generated@@134 T@T) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ) (! (= ($generated@@101 $generated@@133 $generated@@134 ($generated@@105 $generated@@133 $generated@@134 $generated@@136 $generated@@137 $generated@@135) $generated@@137) $generated@@135)
 :weight 0
))) (forall (($generated@@138 T@T) ($generated@@139 T@T) ($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ) (!  (or (= $generated@@142 $generated@@143) (= ($generated@@101 $generated@@138 $generated@@139 ($generated@@105 $generated@@138 $generated@@139 $generated@@141 $generated@@142 $generated@@140) $generated@@143) ($generated@@101 $generated@@138 $generated@@139 $generated@@141 $generated@@143)))
 :weight 0
))) (= ($generated@@3 $generated@@102) 6)) (forall (($generated@@144 T@T) ($generated@@145 T@T) ) (= ($generated@@3 ($generated@@103 $generated@@144 $generated@@145)) 7))) (forall (($generated@@146 T@T) ($generated@@147 T@T) ) (! (= ($generated@@106 ($generated@@103 $generated@@146 $generated@@147)) $generated@@146)
 :pattern ( ($generated@@103 $generated@@146 $generated@@147))
))) (forall (($generated@@148 T@T) ($generated@@149 T@T) ) (! (= ($generated@@107 ($generated@@103 $generated@@148 $generated@@149)) $generated@@149)
 :pattern ( ($generated@@103 $generated@@148 $generated@@149))
))))
(assert (forall (($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 Bool) ($generated@@154 T@U) ($generated@@155 T@U) ) (! (= ($generated@@8 ($generated@@97 $generated@@98 $generated@@99 $generated@@4 ($generated@@100 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))  (=> (and (or (not (= $generated@@154 $generated@@150)) (not true)) ($generated@@8 ($generated@@59 $generated@@4 ($generated@@101 $generated@@99 $generated@@102 ($generated@@101 $generated@@98 ($generated@@103 $generated@@99 $generated@@102) $generated@@151 $generated@@154) $generated@@152)))) $generated@@153))
 :pattern ( ($generated@@97 $generated@@98 $generated@@99 $generated@@4 ($generated@@100 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))
)))
(assert (forall (($generated@@158 T@U) ($generated@@159 T@U) ) (!  (and (= ($generated@@156 ($generated@@26 $generated@@158 $generated@@159)) $generated@@158) (= ($generated@@157 ($generated@@26 $generated@@158 $generated@@159)) $generated@@159))
 :pattern ( ($generated@@26 $generated@@158 $generated@@159))
)))
(assert (forall (($generated@@160 T@U) ($generated@@161 T@U) ) (!  (=> ($generated@@45 $generated@@160 ($generated@@44 $generated@@161)) (and (= ($generated@@60 $generated@@43 ($generated@@59 $generated@@43 $generated@@160)) $generated@@160) ($generated@@42 $generated@@43 ($generated@@59 $generated@@43 $generated@@160) ($generated@@44 $generated@@161))))
 :pattern ( ($generated@@45 $generated@@160 ($generated@@44 $generated@@161)))
)))
(assert (= ($generated@@93 $generated@@20) $generated@@1))
(assert (= ($generated@@162 $generated@@20) $generated@@2))
(assert (forall (($generated@@163 T@U) ($generated@@164 Int) ($generated@@165 Int) ) (!  (=> (and (and (<= 0 $generated@@164) (<= $generated@@164 $generated@@165)) (< $generated@@165 ($generated@@23 $generated@@163))) (= ($generated@@49 ($generated@@25 $generated@@163 $generated@@164) (- $generated@@165 $generated@@164)) ($generated@@49 $generated@@163 $generated@@165)))
 :weight 25
 :pattern ( ($generated@@49 $generated@@163 $generated@@165) ($generated@@25 $generated@@163 $generated@@164))
)))
(assert (forall (($generated@@166 T@U) ($generated@@167 Int) ($generated@@168 Int) ) (!  (=> (and (and (<= 0 $generated@@167) (<= 0 $generated@@168)) (<= (+ $generated@@167 $generated@@168) ($generated@@23 $generated@@166))) (= ($generated@@25 ($generated@@25 $generated@@166 $generated@@167) $generated@@168) ($generated@@25 $generated@@166 (+ $generated@@167 $generated@@168))))
 :pattern ( ($generated@@25 ($generated@@25 $generated@@166 $generated@@167) $generated@@168))
)))
(assert (forall (($generated@@169 T@U) ($generated@@170 T@U) ($generated@@171 Int) ) (!  (and (=> (< $generated@@171 ($generated@@23 $generated@@169)) (= ($generated@@49 ($generated@@31 $generated@@169 $generated@@170) $generated@@171) ($generated@@49 $generated@@169 $generated@@171))) (=> (<= ($generated@@23 $generated@@169) $generated@@171) (= ($generated@@49 ($generated@@31 $generated@@169 $generated@@170) $generated@@171) ($generated@@49 $generated@@170 (- $generated@@171 ($generated@@23 $generated@@169))))))
 :pattern ( ($generated@@49 ($generated@@31 $generated@@169 $generated@@170) $generated@@171))
)))
(assert (forall (($generated@@172 T@U) ) (! (= ($generated@@42 $generated@@5 $generated@@172 $generated@@20)  (and (<= ($generated@@37 0) ($generated@@10 $generated@@172)) (< ($generated@@10 $generated@@172) 256)))
 :pattern ( ($generated@@42 $generated@@5 $generated@@172 $generated@@20))
)))
(assert (forall (($generated@@173 Int) ) (! (= ($generated@@60 $generated@@5 ($generated@@9 ($generated@@37 $generated@@173))) ($generated@@39 $generated@@102 ($generated@@60 $generated@@5 ($generated@@9 $generated@@173))))
 :pattern ( ($generated@@60 $generated@@5 ($generated@@9 ($generated@@37 $generated@@173))))
)))
(assert (forall (($generated@@174 T@U) ($generated@@175 T@T) ) (! (= ($generated@@60 $generated@@175 ($generated@@39 $generated@@175 $generated@@174)) ($generated@@39 $generated@@102 ($generated@@60 $generated@@175 $generated@@174)))
 :pattern ( ($generated@@60 $generated@@175 ($generated@@39 $generated@@175 $generated@@174)))
)))
(assert (forall (($generated@@176 T@U) ) (!  (=> (= ($generated@@23 $generated@@176) 0) (= $generated@@176 $generated@@24))
 :pattern ( ($generated@@23 $generated@@176))
)))
(assert (forall (($generated@@177 T@U) ($generated@@178 Int) ) (!  (=> (= $generated@@178 0) (= ($generated@@30 $generated@@177 $generated@@178) $generated@@24))
 :pattern ( ($generated@@30 $generated@@177 $generated@@178))
)))
(assert (forall (($generated@@179 T@U) ($generated@@180 T@U) ) (! (= ($generated@@42 $generated@@43 $generated@@179 ($generated@@44 $generated@@180)) (forall (($generated@@181 Int) ) (!  (=> (and (<= 0 $generated@@181) (< $generated@@181 ($generated@@23 $generated@@179))) ($generated@@45 ($generated@@49 $generated@@179 $generated@@181) $generated@@180))
 :pattern ( ($generated@@49 $generated@@179 $generated@@181))
)))
 :pattern ( ($generated@@42 $generated@@43 $generated@@179 ($generated@@44 $generated@@180)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@182 () T@U)
(declare-fun $generated@@183 () T@U)
(declare-fun $generated@@184 () T@U)
(declare-fun $generated@@185 () T@U)
(declare-fun $generated@@186 (T@U) Bool)
(declare-fun $generated@@187 (T@U) Bool)
(declare-fun $generated@@188 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@189  (=> (and (= $generated@@182 ($generated@@100 $generated@@183 $generated@@184 $generated@@0 false)) (= (ControlFlow 0 2) (- 0 1))) ($generated@@55 ($generated@@25 ($generated@@30 $generated@@185 ($generated@@37 25)) ($generated@@37 0)) ($generated@@31 ($generated@@26 $generated@@24 ($generated@@49 $generated@@185 ($generated@@37 0))) ($generated@@25 ($generated@@30 $generated@@185 ($generated@@37 25)) ($generated@@37 1)))))))
(let (($generated@@190  (=> (and ($generated@@186 $generated@@184) ($generated@@187 $generated@@184)) (=> (and (and (and ($generated@@42 $generated@@43 $generated@@185 ($generated@@44 $generated@@20)) ($generated@@19 $generated@@43 $generated@@185 ($generated@@44 $generated@@20) $generated@@184)) (= 1 $generated@@188)) (and (> ($generated@@23 $generated@@185) 25) (= (ControlFlow 0 3) 2))) $generated@@189))))
$generated@@190)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
