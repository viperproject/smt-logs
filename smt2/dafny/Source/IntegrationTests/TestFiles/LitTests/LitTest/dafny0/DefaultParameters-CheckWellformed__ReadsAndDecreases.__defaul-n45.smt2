(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 (T@U) T@U)
(declare-fun $generated@@22 () Int)
(declare-fun $generated@@23 (Int T@U) Int)
(declare-fun $generated@@24 (Int T@U) Bool)
(declare-fun $generated@@25 (T@T T@U T@U) Bool)
(declare-fun $generated@@26 () T@T)
(declare-fun $generated@@27 () T@U)
(declare-fun $generated@@28 (T@U Int Int) Bool)
(declare-fun $generated@@29 (Int Int) Int)
(declare-fun $generated@@30 (T@U Int Int) Int)
(declare-fun $generated@@33 () T@U)
(declare-fun $generated@@37 () T@U)
(declare-fun $generated@@38 (T@U) T@U)
(declare-fun $generated@@40 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@43 (T@T T@U) T@U)
(declare-fun $generated@@44 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@45 () T@T)
(declare-fun $generated@@46 () T@T)
(declare-fun $generated@@47 (T@T T@T) T@T)
(declare-fun $generated@@48 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@49 (T@T) T@T)
(declare-fun $generated@@50 (T@T) T@T)
(declare-fun $generated@@70 (Int) Int)
(declare-fun $generated@@72 (T@T T@U) T@U)
(declare-fun $generated@@75 (T@T T@U) T@U)
(declare-fun $generated@@78 (T@U T@U T@U) Bool)
(declare-fun $generated@@96 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@97 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@98 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@130 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert (= ($generated@@21 $generated) $generated@@0))
(assert (= ($generated@@5 $generated@@26) 3))
(assert  (=> (<= 1 $generated@@22) (forall (($generated@@31 Int) ($generated@@32 T@U) ) (!  (=> (or ($generated@@24 $generated@@31 $generated@@32) (and (< 1 $generated@@22) (and ($generated@@25 $generated@@26 $generated@@32 $generated@@27) (or (not (= $generated@@31 0)) (not true))))) (and ($generated@@28 $generated@@32 $generated@@31 ($generated@@29 3 $generated@@31)) (= ($generated@@23 $generated@@31 $generated@@32) ($generated@@30 $generated@@32 $generated@@31 ($generated@@29 3 $generated@@31)))))
 :pattern ( ($generated@@23 $generated@@31 $generated@@32))
))))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@34 T@U) ($generated@@35 Int) ($generated@@36 Int) ) (!  (=> (or ($generated@@28 $generated@@34 $generated@@35 $generated@@36) (and (< 0 $generated@@22) (and (or (not (= $generated@@34 $generated@@33)) (not true)) ($generated@@25 $generated@@26 $generated@@34 $generated@@27)))) (= ($generated@@30 $generated@@34 $generated@@35 $generated@@36) (+ $generated@@35 $generated@@36)))
 :pattern ( ($generated@@30 $generated@@34 $generated@@35 $generated@@36))
))))
(assert (forall (($generated@@39 T@U) ) (! (= ($generated@@25 $generated@@26 $generated@@39 $generated@@37)  (or (= $generated@@39 $generated@@33) (= ($generated@@38 $generated@@39) $generated@@37)))
 :pattern ( ($generated@@25 $generated@@26 $generated@@39 $generated@@37))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (= ($generated@@40 $generated@@26 $generated@@41 $generated@@27 $generated@@42) ($generated@@40 $generated@@26 $generated@@41 $generated@@37 $generated@@42))
 :pattern ( ($generated@@40 $generated@@26 $generated@@41 $generated@@27 $generated@@42))
 :pattern ( ($generated@@40 $generated@@26 $generated@@41 $generated@@37 $generated@@42))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@51 T@T) ($generated@@52 T@T) ($generated@@53 T@U) ($generated@@54 T@U) ($generated@@55 T@U) ) (! (= ($generated@@44 $generated@@51 $generated@@52 ($generated@@48 $generated@@51 $generated@@52 $generated@@54 $generated@@55 $generated@@53) $generated@@55) $generated@@53)
 :weight 0
)) (forall (($generated@@56 T@T) ($generated@@57 T@T) ($generated@@58 T@U) ($generated@@59 T@U) ($generated@@60 T@U) ($generated@@61 T@U) ) (!  (or (= $generated@@60 $generated@@61) (= ($generated@@44 $generated@@56 $generated@@57 ($generated@@48 $generated@@56 $generated@@57 $generated@@59 $generated@@60 $generated@@58) $generated@@61) ($generated@@44 $generated@@56 $generated@@57 $generated@@59 $generated@@61)))
 :weight 0
))) (= ($generated@@5 $generated@@45) 4)) (= ($generated@@5 $generated@@46) 5)) (forall (($generated@@62 T@T) ($generated@@63 T@T) ) (= ($generated@@5 ($generated@@47 $generated@@62 $generated@@63)) 6))) (forall (($generated@@64 T@T) ($generated@@65 T@T) ) (! (= ($generated@@49 ($generated@@47 $generated@@64 $generated@@65)) $generated@@64)
 :pattern ( ($generated@@47 $generated@@64 $generated@@65))
))) (forall (($generated@@66 T@T) ($generated@@67 T@T) ) (! (= ($generated@@50 ($generated@@47 $generated@@66 $generated@@67)) $generated@@67)
 :pattern ( ($generated@@47 $generated@@66 $generated@@67))
))))
(assert (forall (($generated@@68 T@U) ($generated@@69 T@U) ) (! (= ($generated@@40 $generated@@26 $generated@@68 $generated@@37 $generated@@69)  (or (= $generated@@68 $generated@@33) ($generated@@10 ($generated@@43 $generated@@6 ($generated@@44 $generated@@45 $generated@@46 ($generated@@44 $generated@@26 ($generated@@47 $generated@@45 $generated@@46) $generated@@69 $generated@@68) $generated@@1)))))
 :pattern ( ($generated@@40 $generated@@26 $generated@@68 $generated@@37 $generated@@69))
)))
(assert (forall (($generated@@71 Int) ) (! (= ($generated@@70 $generated@@71) $generated@@71)
 :pattern ( ($generated@@70 $generated@@71))
)))
(assert (forall (($generated@@73 T@U) ($generated@@74 T@T) ) (! (= ($generated@@72 $generated@@74 $generated@@73) $generated@@73)
 :pattern ( ($generated@@72 $generated@@74 $generated@@73))
)))
(assert (forall (($generated@@76 T@U) ($generated@@77 T@T) ) (! (= ($generated@@75 $generated@@77 ($generated@@43 $generated@@77 $generated@@76)) $generated@@76)
 :pattern ( ($generated@@43 $generated@@77 $generated@@76))
)))
(assert (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@T) ) (! (= ($generated@@78 ($generated@@75 $generated@@82 $generated@@79) $generated@@80 $generated@@81) ($generated@@40 $generated@@82 $generated@@79 $generated@@80 $generated@@81))
 :pattern ( ($generated@@78 ($generated@@75 $generated@@82 $generated@@79) $generated@@80 $generated@@81))
)))
(assert (forall (($generated@@83 T@U) ) (! (= ($generated@@25 $generated@@26 $generated@@83 $generated@@27)  (and ($generated@@25 $generated@@26 $generated@@83 $generated@@37) (or (not (= $generated@@83 $generated@@33)) (not true))))
 :pattern ( ($generated@@25 $generated@@26 $generated@@83 $generated@@27))
 :pattern ( ($generated@@25 $generated@@26 $generated@@83 $generated@@37))
)))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@84 T@U) ($generated@@85 Int) ($generated@@86 Int) ) (!  (=> (or ($generated@@28 ($generated@@72 $generated@@26 $generated@@84) ($generated@@70 $generated@@85) ($generated@@70 $generated@@86)) (and (< 0 $generated@@22) (and (or (not (= $generated@@84 $generated@@33)) (not true)) ($generated@@25 $generated@@26 $generated@@84 $generated@@27)))) (= ($generated@@30 ($generated@@72 $generated@@26 $generated@@84) ($generated@@70 $generated@@85) ($generated@@70 $generated@@86)) ($generated@@70 (+ $generated@@85 $generated@@86))))
 :weight 3
 :pattern ( ($generated@@30 ($generated@@72 $generated@@26 $generated@@84) ($generated@@70 $generated@@85) ($generated@@70 $generated@@86)))
))))
(assert (forall (($generated@@87 Int) ($generated@@88 Int) ) (! (= ($generated@@29 $generated@@87 $generated@@88) (div $generated@@87 $generated@@88))
 :pattern ( ($generated@@29 $generated@@87 $generated@@88))
)))
(assert (forall (($generated@@89 T@U) ($generated@@90 T@T) ) (! (= ($generated@@43 $generated@@90 ($generated@@75 $generated@@90 $generated@@89)) $generated@@89)
 :pattern ( ($generated@@75 $generated@@90 $generated@@89))
)))
(assert  (=> (<= 1 $generated@@22) (forall (($generated@@91 Int) ($generated@@92 T@U) ) (!  (=> (or ($generated@@24 ($generated@@70 $generated@@91) ($generated@@72 $generated@@26 $generated@@92)) (and (< 1 $generated@@22) (and ($generated@@25 $generated@@26 $generated@@92 $generated@@27) ($generated@@10 ($generated@@72 $generated@@6 ($generated@@9  (or (not (= $generated@@91 0)) (not true)))))))) (and ($generated@@28 ($generated@@72 $generated@@26 $generated@@92) ($generated@@70 $generated@@91) ($generated@@70 ($generated@@29 3 ($generated@@70 $generated@@91)))) (= ($generated@@23 ($generated@@70 $generated@@91) ($generated@@72 $generated@@26 $generated@@92)) ($generated@@70 ($generated@@30 ($generated@@72 $generated@@26 $generated@@92) ($generated@@70 $generated@@91) ($generated@@70 ($generated@@29 3 ($generated@@70 $generated@@91))))))))
 :weight 3
 :pattern ( ($generated@@23 ($generated@@70 $generated@@91) ($generated@@72 $generated@@26 $generated@@92)))
))))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@93 T@U) ($generated@@94 Int) ($generated@@95 Int) ) (!  (=> (or ($generated@@28 $generated@@93 ($generated@@70 $generated@@94) ($generated@@70 $generated@@95)) (and (< 0 $generated@@22) (and (or (not (= $generated@@93 $generated@@33)) (not true)) ($generated@@25 $generated@@26 $generated@@93 $generated@@27)))) (= ($generated@@30 $generated@@93 ($generated@@70 $generated@@94) ($generated@@70 $generated@@95)) ($generated@@70 (+ $generated@@94 $generated@@95))))
 :weight 3
 :pattern ( ($generated@@30 $generated@@93 ($generated@@70 $generated@@94) ($generated@@70 $generated@@95)))
))))
(assert  (and (forall (($generated@@99 T@T) ($generated@@100 T@T) ($generated@@101 T@T) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ) (! (= ($generated@@96 $generated@@99 $generated@@100 $generated@@101 ($generated@@98 $generated@@99 $generated@@100 $generated@@101 $generated@@103 $generated@@104 $generated@@105 $generated@@102) $generated@@104 $generated@@105) $generated@@102)
 :weight 0
)) (and (forall (($generated@@106 T@T) ($generated@@107 T@T) ($generated@@108 T@T) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ) (!  (or (= $generated@@111 $generated@@113) (= ($generated@@96 $generated@@106 $generated@@107 $generated@@108 ($generated@@98 $generated@@106 $generated@@107 $generated@@108 $generated@@110 $generated@@111 $generated@@112 $generated@@109) $generated@@113 $generated@@114) ($generated@@96 $generated@@106 $generated@@107 $generated@@108 $generated@@110 $generated@@113 $generated@@114)))
 :weight 0
)) (forall (($generated@@115 T@T) ($generated@@116 T@T) ($generated@@117 T@T) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ) (!  (or (= $generated@@121 $generated@@123) (= ($generated@@96 $generated@@115 $generated@@116 $generated@@117 ($generated@@98 $generated@@115 $generated@@116 $generated@@117 $generated@@119 $generated@@120 $generated@@121 $generated@@118) $generated@@122 $generated@@123) ($generated@@96 $generated@@115 $generated@@116 $generated@@117 $generated@@119 $generated@@122 $generated@@123)))
 :weight 0
)))))
(assert (forall (($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 Bool) ($generated@@128 T@U) ($generated@@129 T@U) ) (! (= ($generated@@10 ($generated@@96 $generated@@26 $generated@@45 $generated@@6 ($generated@@97 $generated@@124 $generated@@125 $generated@@126 $generated@@127) $generated@@128 $generated@@129))  (=> (and (or (not (= $generated@@128 $generated@@124)) (not true)) ($generated@@10 ($generated@@43 $generated@@6 ($generated@@44 $generated@@45 $generated@@46 ($generated@@44 $generated@@26 ($generated@@47 $generated@@45 $generated@@46) $generated@@125 $generated@@128) $generated@@126)))) $generated@@127))
 :pattern ( ($generated@@96 $generated@@26 $generated@@45 $generated@@6 ($generated@@97 $generated@@124 $generated@@125 $generated@@126 $generated@@127) $generated@@128 $generated@@129))
)))
(assert (= ($generated@@21 $generated@@27) $generated@@2))
(assert (= ($generated@@130 $generated@@27) $generated@@4))
(assert (= ($generated@@21 $generated@@37) $generated@@3))
(assert (= ($generated@@130 $generated@@37) $generated@@4))
(assert (forall (($generated@@131 Int) ) (! (= ($generated@@75 $generated@@7 ($generated@@11 ($generated@@70 $generated@@131))) ($generated@@72 $generated@@46 ($generated@@75 $generated@@7 ($generated@@11 $generated@@131))))
 :pattern ( ($generated@@75 $generated@@7 ($generated@@11 ($generated@@70 $generated@@131))))
)))
(assert (forall (($generated@@132 T@U) ($generated@@133 T@T) ) (! (= ($generated@@75 $generated@@133 ($generated@@72 $generated@@133 $generated@@132)) ($generated@@72 $generated@@46 ($generated@@75 $generated@@133 $generated@@132)))
 :pattern ( ($generated@@75 $generated@@133 ($generated@@72 $generated@@133 $generated@@132)))
)))
(assert (forall (($generated@@134 T@U) ($generated@@135 T@U) ) (! ($generated@@40 $generated@@7 $generated@@135 $generated $generated@@134)
 :pattern ( ($generated@@40 $generated@@7 $generated@@135 $generated $generated@@134))
)))
(assert (forall (($generated@@136 T@U) ) (! ($generated@@25 $generated@@7 $generated@@136 $generated)
 :pattern ( ($generated@@25 $generated@@7 $generated@@136 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@137 () T@U)
(declare-fun $generated@@138 () T@U)
(declare-fun $generated@@139 () T@U)
(declare-fun $generated@@140 () Int)
(declare-fun $generated@@141 (T@U) Bool)
(declare-fun $generated@@142 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 5) (let (($generated@@143  (=> (= (ControlFlow 0 3) (- 0 2)) (or (not (= $generated@@137 $generated@@33)) (not true)))))
(let (($generated@@144 true))
(let (($generated@@145  (=> (and (= $generated@@138 ($generated@@97 $generated@@33 $generated@@139 $generated@@1 false)) (or (not (= $generated@@140 0)) (not true))) (and (=> (= (ControlFlow 0 4) 1) $generated@@144) (=> (= (ControlFlow 0 4) 3) $generated@@143)))))
(let (($generated@@146  (=> (and (and (and ($generated@@141 $generated@@139) ($generated@@142 $generated@@139)) ($generated@@25 $generated@@26 $generated@@137 $generated@@27)) (and (= 1 $generated@@22) (= (ControlFlow 0 5) 4))) $generated@@145)))
$generated@@146)))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
