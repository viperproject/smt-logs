(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 (Bool) T@U)
(declare-fun $generated@@6 (T@U) Bool)
(declare-fun $generated@@7 (Int) T@U)
(declare-fun $generated@@8 (T@U) Int)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@17 (T@U) Int)
(declare-fun $generated@@18 () T@U)
(declare-fun $generated@@19 (T@U T@U) Bool)
(declare-fun $generated@@20 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@21 () T@T)
(declare-fun $generated@@22 () T@T)
(declare-fun $generated@@23 () T@T)
(declare-fun $generated@@24 (T@T T@T) T@T)
(declare-fun $generated@@25 (T@T T@U) T@U)
(declare-fun $generated@@26 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@27 (T@T) T@T)
(declare-fun $generated@@28 (T@T) T@T)
(declare-fun $generated@@49 (Int) Int)
(declare-fun $generated@@51 (T@T T@U) T@U)
(declare-fun $generated@@54 (T@T T@U) T@U)
(declare-fun $generated@@57 (T@U T@U T@U) Bool)
(declare-fun $generated@@58 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@75 (T@U T@U) Bool)
(declare-fun $generated@@76 (T@T T@U T@U) Bool)
(declare-fun $generated@@81 () T@T)
(declare-fun $generated@@82 (T@U) T@U)
(declare-fun $generated@@83 (T@U Int) T@U)
(declare-fun $generated@@88 (T@U) T@U)
(declare-fun $generated@@90 (T@U) T@U)
(declare-fun $generated@@94 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@95 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@96 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (forall (($generated@@11 Bool) ) (! (= ($generated@@6 ($generated@@5 $generated@@11)) $generated@@11)
 :pattern ( ($generated@@5 $generated@@11))
))) (forall (($generated@@12 T@U) ) (! (= ($generated@@5 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 Int) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))))
(assert (distinct $generated $generated@@0)
)
(assert (= ($generated@@17 $generated@@18) 0))
(assert  (and (and (and (and (and (and (and (forall (($generated@@29 T@T) ($generated@@30 T@T) ($generated@@31 T@U) ($generated@@32 T@U) ($generated@@33 T@U) ) (! (= ($generated@@20 $generated@@29 $generated@@30 ($generated@@26 $generated@@29 $generated@@30 $generated@@32 $generated@@33 $generated@@31) $generated@@33) $generated@@31)
 :weight 0
)) (forall (($generated@@34 T@T) ($generated@@35 T@T) ($generated@@36 T@U) ($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (!  (or (= $generated@@38 $generated@@39) (= ($generated@@20 $generated@@34 $generated@@35 ($generated@@26 $generated@@34 $generated@@35 $generated@@37 $generated@@38 $generated@@36) $generated@@39) ($generated@@20 $generated@@34 $generated@@35 $generated@@37 $generated@@39)))
 :weight 0
))) (= ($generated@@1 $generated@@21) 3)) (= ($generated@@1 $generated@@22) 4)) (= ($generated@@1 $generated@@23) 5)) (forall (($generated@@40 T@T) ($generated@@41 T@T) ) (= ($generated@@1 ($generated@@24 $generated@@40 $generated@@41)) 6))) (forall (($generated@@42 T@T) ($generated@@43 T@T) ) (! (= ($generated@@27 ($generated@@24 $generated@@42 $generated@@43)) $generated@@42)
 :pattern ( ($generated@@24 $generated@@42 $generated@@43))
))) (forall (($generated@@44 T@T) ($generated@@45 T@T) ) (! (= ($generated@@28 ($generated@@24 $generated@@44 $generated@@45)) $generated@@45)
 :pattern ( ($generated@@24 $generated@@44 $generated@@45))
))))
(assert (forall (($generated@@46 T@U) ($generated@@47 T@U) ) (!  (=> ($generated@@19 $generated@@46 $generated@@47) (forall (($generated@@48 T@U) ) (!  (=> ($generated@@6 ($generated@@25 $generated@@2 ($generated@@20 $generated@@21 $generated@@22 ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@46 $generated@@48) $generated@@0))) ($generated@@6 ($generated@@25 $generated@@2 ($generated@@20 $generated@@21 $generated@@22 ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@47 $generated@@48) $generated@@0))))
 :pattern ( ($generated@@20 $generated@@21 $generated@@22 ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@47 $generated@@48) $generated@@0))
)))
 :pattern ( ($generated@@19 $generated@@46 $generated@@47))
)))
(assert (forall (($generated@@50 Int) ) (! (= ($generated@@49 $generated@@50) $generated@@50)
 :pattern ( ($generated@@49 $generated@@50))
)))
(assert (forall (($generated@@52 T@U) ($generated@@53 T@T) ) (! (= ($generated@@51 $generated@@53 $generated@@52) $generated@@52)
 :pattern ( ($generated@@51 $generated@@53 $generated@@52))
)))
(assert (forall (($generated@@55 T@U) ($generated@@56 T@T) ) (! (= ($generated@@54 $generated@@56 ($generated@@25 $generated@@56 $generated@@55)) $generated@@55)
 :pattern ( ($generated@@25 $generated@@56 $generated@@55))
)))
(assert (forall (($generated@@59 T@U) ($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@T) ) (! (= ($generated@@57 ($generated@@54 $generated@@62 $generated@@59) $generated@@60 $generated@@61) ($generated@@58 $generated@@62 $generated@@59 $generated@@60 $generated@@61))
 :pattern ( ($generated@@57 ($generated@@54 $generated@@62 $generated@@59) $generated@@60 $generated@@61))
)))
(assert (forall (($generated@@63 T@U) ($generated@@64 T@U) ($generated@@65 T@U) ($generated@@66 T@U) ) (!  (=> ($generated@@19 $generated@@63 $generated@@64) (=> ($generated@@57 $generated@@65 $generated@@66 $generated@@63) ($generated@@57 $generated@@65 $generated@@66 $generated@@64)))
 :pattern ( ($generated@@19 $generated@@63 $generated@@64) ($generated@@57 $generated@@65 $generated@@66 $generated@@63))
)))
(assert (forall (($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@T) ) (!  (=> ($generated@@19 $generated@@67 $generated@@68) (=> ($generated@@58 $generated@@71 $generated@@69 $generated@@70 $generated@@67) ($generated@@58 $generated@@71 $generated@@69 $generated@@70 $generated@@68)))
 :pattern ( ($generated@@19 $generated@@67 $generated@@68) ($generated@@58 $generated@@71 $generated@@69 $generated@@70 $generated@@67))
)))
(assert (forall (($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@U) ) (!  (=> (or (not (= $generated@@72 $generated@@74)) (not true)) (=> (and ($generated@@19 $generated@@72 $generated@@73) ($generated@@19 $generated@@73 $generated@@74)) ($generated@@19 $generated@@72 $generated@@74)))
 :pattern ( ($generated@@19 $generated@@72 $generated@@73) ($generated@@19 $generated@@73 $generated@@74))
)))
(assert (forall (($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@T) ) (! (= ($generated@@75 ($generated@@54 $generated@@79 $generated@@77) $generated@@78) ($generated@@76 $generated@@79 $generated@@77 $generated@@78))
 :pattern ( ($generated@@75 ($generated@@54 $generated@@79 $generated@@77) $generated@@78))
)))
(assert (forall (($generated@@80 T@U) ) (! (<= 0 ($generated@@17 $generated@@80))
 :pattern ( ($generated@@17 $generated@@80))
)))
(assert (= ($generated@@1 $generated@@81) 7))
(assert (forall (($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (! (= ($generated@@58 $generated@@81 $generated@@84 ($generated@@82 $generated@@85) $generated@@86) (forall (($generated@@87 Int) ) (!  (=> (and (<= 0 $generated@@87) (< $generated@@87 ($generated@@17 $generated@@84))) ($generated@@57 ($generated@@83 $generated@@84 $generated@@87) $generated@@85 $generated@@86))
 :pattern ( ($generated@@83 $generated@@84 $generated@@87))
)))
 :pattern ( ($generated@@58 $generated@@81 $generated@@84 ($generated@@82 $generated@@85) $generated@@86))
)))
(assert (forall (($generated@@89 T@U) ) (! (= ($generated@@88 ($generated@@82 $generated@@89)) $generated@@89)
 :pattern ( ($generated@@82 $generated@@89))
)))
(assert (forall (($generated@@91 T@U) ) (! (= ($generated@@90 ($generated@@82 $generated@@91)) $generated)
 :pattern ( ($generated@@82 $generated@@91))
)))
(assert (forall (($generated@@92 T@U) ($generated@@93 T@T) ) (! (= ($generated@@25 $generated@@93 ($generated@@54 $generated@@93 $generated@@92)) $generated@@92)
 :pattern ( ($generated@@54 $generated@@93 $generated@@92))
)))
(assert  (and (forall (($generated@@97 T@T) ($generated@@98 T@T) ($generated@@99 T@T) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ) (! (= ($generated@@94 $generated@@97 $generated@@98 $generated@@99 ($generated@@96 $generated@@97 $generated@@98 $generated@@99 $generated@@101 $generated@@102 $generated@@103 $generated@@100) $generated@@102 $generated@@103) $generated@@100)
 :weight 0
)) (and (forall (($generated@@104 T@T) ($generated@@105 T@T) ($generated@@106 T@T) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ) (!  (or (= $generated@@109 $generated@@111) (= ($generated@@94 $generated@@104 $generated@@105 $generated@@106 ($generated@@96 $generated@@104 $generated@@105 $generated@@106 $generated@@108 $generated@@109 $generated@@110 $generated@@107) $generated@@111 $generated@@112) ($generated@@94 $generated@@104 $generated@@105 $generated@@106 $generated@@108 $generated@@111 $generated@@112)))
 :weight 0
)) (forall (($generated@@113 T@T) ($generated@@114 T@T) ($generated@@115 T@T) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ) (!  (or (= $generated@@119 $generated@@121) (= ($generated@@94 $generated@@113 $generated@@114 $generated@@115 ($generated@@96 $generated@@113 $generated@@114 $generated@@115 $generated@@117 $generated@@118 $generated@@119 $generated@@116) $generated@@120 $generated@@121) ($generated@@94 $generated@@113 $generated@@114 $generated@@115 $generated@@117 $generated@@120 $generated@@121)))
 :weight 0
)))))
(assert (forall (($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 Bool) ($generated@@126 T@U) ($generated@@127 T@U) ) (! (= ($generated@@6 ($generated@@94 $generated@@23 $generated@@21 $generated@@2 ($generated@@95 $generated@@122 $generated@@123 $generated@@124 $generated@@125) $generated@@126 $generated@@127))  (=> (and (or (not (= $generated@@126 $generated@@122)) (not true)) ($generated@@6 ($generated@@25 $generated@@2 ($generated@@20 $generated@@21 $generated@@22 ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@123 $generated@@126) $generated@@124)))) $generated@@125))
 :pattern ( ($generated@@94 $generated@@23 $generated@@21 $generated@@2 ($generated@@95 $generated@@122 $generated@@123 $generated@@124 $generated@@125) $generated@@126 $generated@@127))
)))
(assert (forall (($generated@@128 T@U) ($generated@@129 T@U) ) (!  (=> ($generated@@75 $generated@@128 ($generated@@82 $generated@@129)) (and (= ($generated@@54 $generated@@81 ($generated@@25 $generated@@81 $generated@@128)) $generated@@128) ($generated@@76 $generated@@81 ($generated@@25 $generated@@81 $generated@@128) ($generated@@82 $generated@@129))))
 :pattern ( ($generated@@75 $generated@@128 ($generated@@82 $generated@@129)))
)))
(assert (forall (($generated@@130 Int) ) (! (= ($generated@@54 $generated@@3 ($generated@@7 ($generated@@49 $generated@@130))) ($generated@@51 $generated@@22 ($generated@@54 $generated@@3 ($generated@@7 $generated@@130))))
 :pattern ( ($generated@@54 $generated@@3 ($generated@@7 ($generated@@49 $generated@@130))))
)))
(assert (forall (($generated@@131 T@U) ($generated@@132 T@T) ) (! (= ($generated@@54 $generated@@132 ($generated@@51 $generated@@132 $generated@@131)) ($generated@@51 $generated@@22 ($generated@@54 $generated@@132 $generated@@131)))
 :pattern ( ($generated@@54 $generated@@132 ($generated@@51 $generated@@132 $generated@@131)))
)))
(assert (forall (($generated@@133 T@U) ) (!  (=> (= ($generated@@17 $generated@@133) 0) (= $generated@@133 $generated@@18))
 :pattern ( ($generated@@17 $generated@@133))
)))
(assert (forall (($generated@@134 T@U) ($generated@@135 T@U) ) (! (= ($generated@@76 $generated@@81 $generated@@134 ($generated@@82 $generated@@135)) (forall (($generated@@136 Int) ) (!  (=> (and (<= 0 $generated@@136) (< $generated@@136 ($generated@@17 $generated@@134))) ($generated@@75 ($generated@@83 $generated@@134 $generated@@136) $generated@@135))
 :pattern ( ($generated@@83 $generated@@134 $generated@@136))
)))
 :pattern ( ($generated@@76 $generated@@81 $generated@@134 ($generated@@82 $generated@@135)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@137 () Int)
(declare-fun $generated@@138 () Int)
(declare-fun $generated@@139 () T@U)
(declare-fun $generated@@140 () T@U)
(declare-fun $generated@@141 () Int)
(declare-fun $generated@@142 () Int)
(declare-fun $generated@@143 () T@U)
(declare-fun $generated@@144 (T@U) Bool)
(declare-fun $generated@@145 () T@U)
(declare-fun $generated@@146 (T@U) Bool)
(declare-fun $generated@@147 () T@U)
(declare-fun $generated@@148 () T@U)
(declare-fun $generated@@149 () Int)
(declare-fun $generated@@150 () T@U)
(declare-fun $generated@@151 () T@U)
(declare-fun $generated@@152 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 25) (let (($generated@@153  (=> (and (and (<= ($generated@@49 0) $generated@@137) (< $generated@@137 $generated@@138)) (= (ControlFlow 0 2) (- 0 1))) (and (<= 0 $generated@@137) (< $generated@@137 ($generated@@17 $generated@@139))))))
(let (($generated@@154  (=> (and (< $generated@@137 ($generated@@49 0)) (= (ControlFlow 0 4) 2)) $generated@@153)))
(let (($generated@@155  (=> (and (<= ($generated@@49 0) $generated@@137) (= (ControlFlow 0 3) 2)) $generated@@153)))
(let (($generated@@156  (=> (forall (($generated@@157 Int) ) (!  (=> (and (<= ($generated@@49 0) $generated@@157) (< $generated@@157 $generated@@138)) (or (not (= ($generated@@83 $generated@@139 $generated@@157) $generated@@140)) (not true)))
 :pattern ( ($generated@@83 $generated@@139 $generated@@157))
)) (and (=> (= (ControlFlow 0 5) 3) $generated@@155) (=> (= (ControlFlow 0 5) 4) $generated@@154)))))
(let (($generated@@158  (=> (and (<= ($generated@@49 0) $generated@@141) (< $generated@@141 $generated@@138)) (and (=> (= (ControlFlow 0 7) (- 0 8)) (and (<= 0 $generated@@141) (< $generated@@141 ($generated@@17 $generated@@139)))) (=> (and (<= 0 $generated@@141) (< $generated@@141 ($generated@@17 $generated@@139))) (=> (and (or (not (= ($generated@@83 $generated@@139 $generated@@141) $generated@@140)) (not true)) (= (ControlFlow 0 7) 5)) $generated@@156))))))
(let (($generated@@159  (=> (and (< $generated@@141 ($generated@@49 0)) (= (ControlFlow 0 10) 7)) $generated@@158)))
(let (($generated@@160  (=> (and (<= ($generated@@49 0) $generated@@141) (= (ControlFlow 0 9) 7)) $generated@@158)))
(let (($generated@@161  (=> (and (=> (and (<= ($generated@@49 0) $generated@@141) (< $generated@@141 $generated@@138)) (or (not (= ($generated@@83 $generated@@139 $generated@@141) $generated@@140)) (not true))) (= (ControlFlow 0 6) 5)) $generated@@156)))
(let (($generated@@162  (=> (and (<= ($generated@@49 0) $generated@@142) (< $generated@@142 $generated@@138)) (and (=> (= (ControlFlow 0 11) (- 0 12)) (and (<= 0 $generated@@142) (< $generated@@142 ($generated@@17 $generated@@139)))) (=> (and (<= 0 $generated@@142) (< $generated@@142 ($generated@@17 $generated@@139))) (=> (= ($generated@@83 $generated@@139 $generated@@142) $generated@@143) (=> (and (and ($generated@@144 $generated@@145) ($generated@@146 $generated@@145)) (and (forall (($generated@@163 T@U) ) (!  (=> (and (or (not (= $generated@@163 $generated@@147)) (not true)) ($generated@@6 ($generated@@25 $generated@@2 ($generated@@20 $generated@@21 $generated@@22 ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@148 $generated@@163) $generated@@0)))) (= ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@145 $generated@@163) ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@148 $generated@@163)))
 :pattern ( ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@145 $generated@@163))
)) ($generated@@19 $generated@@148 $generated@@145))) (and (and (=> (= (ControlFlow 0 11) 6) $generated@@161) (=> (= (ControlFlow 0 11) 9) $generated@@160)) (=> (= (ControlFlow 0 11) 10) $generated@@159)))))))))
(let (($generated@@164  (=> (and (< $generated@@142 ($generated@@49 0)) (= (ControlFlow 0 14) 11)) $generated@@162)))
(let (($generated@@165  (=> (and (<= ($generated@@49 0) $generated@@142) (= (ControlFlow 0 13) 11)) $generated@@162)))
(let (($generated@@166  (=> (forall (($generated@@167 Int) ) (!  (=> (and (<= ($generated@@49 0) $generated@@167) (< $generated@@167 $generated@@138)) (or (not (= ($generated@@83 $generated@@139 $generated@@167) $generated@@140)) (not true)))
 :pattern ( ($generated@@83 $generated@@139 $generated@@167))
)) (and (=> (= (ControlFlow 0 15) 13) $generated@@165) (=> (= (ControlFlow 0 15) 14) $generated@@164)))))
(let (($generated@@168  (=> (and (<= ($generated@@49 0) $generated@@149) (< $generated@@149 $generated@@138)) (and (=> (= (ControlFlow 0 17) (- 0 18)) (and (<= 0 $generated@@149) (< $generated@@149 ($generated@@17 $generated@@139)))) (=> (and (<= 0 $generated@@149) (< $generated@@149 ($generated@@17 $generated@@139))) (=> (and (or (not (= ($generated@@83 $generated@@139 $generated@@149) $generated@@140)) (not true)) (= (ControlFlow 0 17) 15)) $generated@@166))))))
(let (($generated@@169  (=> (and (< $generated@@149 ($generated@@49 0)) (= (ControlFlow 0 20) 17)) $generated@@168)))
(let (($generated@@170  (=> (and (<= ($generated@@49 0) $generated@@149) (= (ControlFlow 0 19) 17)) $generated@@168)))
(let (($generated@@171  (=> (and (=> (and (<= ($generated@@49 0) $generated@@149) (< $generated@@149 $generated@@138)) (or (not (= ($generated@@83 $generated@@139 $generated@@149) $generated@@140)) (not true))) (= (ControlFlow 0 16) 15)) $generated@@166)))
(let (($generated@@172  (=> (and (<= ($generated@@49 0) $generated@@138) (<= $generated@@138 ($generated@@17 $generated@@139))) (and (and (=> (= (ControlFlow 0 21) 16) $generated@@171) (=> (= (ControlFlow 0 21) 19) $generated@@170)) (=> (= (ControlFlow 0 21) 20) $generated@@169)))))
(let (($generated@@173  (=> (and (< $generated@@138 ($generated@@49 0)) (= (ControlFlow 0 23) 21)) $generated@@172)))
(let (($generated@@174  (=> (and (<= ($generated@@49 0) $generated@@138) (= (ControlFlow 0 22) 21)) $generated@@172)))
(let (($generated@@175  (=> (= $generated@@150 ($generated@@95 $generated@@147 $generated@@148 $generated@@0 false)) (and (=> (= (ControlFlow 0 24) 22) $generated@@174) (=> (= (ControlFlow 0 24) 23) $generated@@173)))))
(let (($generated@@176  (=> (and ($generated@@144 $generated@@148) ($generated@@146 $generated@@148)) (=> (and (and (and ($generated@@76 $generated@@81 $generated@@139 ($generated@@82 $generated@@151)) ($generated@@58 $generated@@81 $generated@@139 ($generated@@82 $generated@@151) $generated@@148)) (and ($generated@@75 $generated@@140 $generated@@151) ($generated@@57 $generated@@140 $generated@@151 $generated@@148))) (and (and ($generated@@75 $generated@@143 $generated@@151) ($generated@@57 $generated@@143 $generated@@151 $generated@@148)) (and (= 0 $generated@@152) (= (ControlFlow 0 25) 24)))) $generated@@175))))
$generated@@176))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
