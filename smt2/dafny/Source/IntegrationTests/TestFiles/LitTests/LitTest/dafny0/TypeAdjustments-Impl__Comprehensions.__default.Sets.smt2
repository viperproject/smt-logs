(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagSet () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._System.nat () T@U)
(declare-fun Tagclass.Comprehensions.ClassA () T@U)
(declare-fun Tagclass.Comprehensions.ClassA? () T@U)
(declare-fun tytagFamily$nat () T@U)
(declare-fun tytagFamily$ClassA () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun Comprehensions.__default.P (Int) Bool)
(declare-fun |Comprehensions.__default.P#canCall| (Int) Bool)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass._System.nat () T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun |lambda#1| (T@U T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun Tclass.Comprehensions.ClassA? () T@U)
(declare-fun null () T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun Tclass.Comprehensions.ClassA () T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun |lambda#4| (Int Int Int Int) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun |Set#FromBoogieMap| (T@U) T@U)
(declare-fun SetType () T@T)
(declare-fun TSet (T@U) T@U)
(declare-fun |lambda#2| (T@U Int Int) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun |lambda#3| (Int Int Int) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt TagSet alloc Tagclass._System.nat Tagclass.Comprehensions.ClassA Tagclass.Comprehensions.ClassA? tytagFamily$nat tytagFamily$ClassA)
)
(assert (= (Tag TInt) TagInt))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|x#0| Int) ) (!  (=> (or (|Comprehensions.__default.P#canCall| |x#0|) (and (< 0 $FunctionContextHeight) (<= (LitInt 0) |x#0|))) (= (Comprehensions.__default.P |x#0|) (U_2_bool (Lit boolType (bool_2_U true)))))
 :pattern ( (Comprehensions.__default.P |x#0|))
))))
(assert (forall ((|x#0@@0| T@U) ($h T@U) ) (! ($IsAlloc intType |x#0@@0| Tclass._System.nat $h)
 :pattern ( ($IsAlloc intType |x#0@@0| Tclass._System.nat $h))
)))
(assert  (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor BoxType) 3)))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|$y#0| T@U) ) (! (= (U_2_bool (MapType0Select BoxType boolType (|lambda#1| |l#0| |l#1|) |$y#0|))  (and ($IsBox |$y#0| |l#0|) (|Set#IsMember| |l#1| |$y#0|)))
 :pattern ( (MapType0Select BoxType boolType (|lambda#1| |l#0| |l#1|) |$y#0|))
)))
(assert (= (Ctor refType) 4))
(assert (forall (($o T@U) ) (! (= ($Is refType $o Tclass.Comprehensions.ClassA?)  (or (= $o null) (= (dtype $o) Tclass.Comprehensions.ClassA?)))
 :pattern ( ($Is refType $o Tclass.Comprehensions.ClassA?))
)))
(assert (forall ((|c#0| T@U) ($h@@0 T@U) ) (! (= ($IsAlloc refType |c#0| Tclass.Comprehensions.ClassA $h@@0) ($IsAlloc refType |c#0| Tclass.Comprehensions.ClassA? $h@@0))
 :pattern ( ($IsAlloc refType |c#0| Tclass.Comprehensions.ClassA $h@@0))
 :pattern ( ($IsAlloc refType |c#0| Tclass.Comprehensions.ClassA? $h@@0))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|x#0@@1| Int) ) (!  (=> (or (|Comprehensions.__default.P#canCall| (LitInt |x#0@@1|)) (and (< 0 $FunctionContextHeight) (<= (LitInt 0) |x#0@@1|))) (= (Comprehensions.__default.P (LitInt |x#0@@1|)) (U_2_bool (Lit boolType (bool_2_U true)))))
 :weight 3
 :pattern ( (Comprehensions.__default.P (LitInt |x#0@@1|)))
))))
(assert  (and (and (and (= (Ctor FieldType) 5) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 6))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall (($o@@0 T@U) ($h@@1 T@U) ) (! (= ($IsAlloc refType $o@@0 Tclass.Comprehensions.ClassA? $h@@1)  (or (= $o@@0 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@1 $o@@0) alloc)))))
 :pattern ( ($IsAlloc refType $o@@0 Tclass.Comprehensions.ClassA? $h@@1))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((|l#0@@0| Int) (|l#1@@0| Int) (|l#2| Int) (|l#3| Int) (|$y#3| T@U) ) (! (= (U_2_bool (MapType0Select BoxType boolType (|lambda#4| |l#0@@0| |l#1@@0| |l#2| |l#3|) |$y#3|)) (exists ((|n#4| Int) ) (!  (and (and (<= |l#0@@0| |n#4|) (and (and (<= |l#1@@0| |n#4|) (< |n#4| |l#2|)) (Comprehensions.__default.P |n#4|))) (= |$y#3| ($Box intType (int_2_U (+ |n#4| |l#3|)))))
 :pattern ( (Comprehensions.__default.P |n#4|))
)))
 :pattern ( (MapType0Select BoxType boolType (|lambda#4| |l#0@@0| |l#1@@0| |l#2| |l#3|) |$y#3|))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((m@@1 T@U) (bx T@U) ) (! (= (|Set#IsMember| (|Set#FromBoogieMap| m@@1) bx) (U_2_bool (MapType0Select BoxType boolType m@@1 bx)))
 :pattern ( (|Set#IsMember| (|Set#FromBoogieMap| m@@1) bx))
)))
(assert (= (Ctor SetType) 7))
(assert (forall ((v T@U) (t0@@0 T@U) ) (! (= ($Is SetType v (TSet t0@@0)) (forall ((bx@@0 T@U) ) (!  (=> (|Set#IsMember| v bx@@0) ($IsBox bx@@0 t0@@0))
 :pattern ( (|Set#IsMember| v bx@@0))
)))
 :pattern ( ($Is SetType v (TSet t0@@0)))
)))
(assert (forall ((|x#0@@2| T@U) ) (! (= ($Is intType |x#0@@2| Tclass._System.nat) (<= (LitInt 0) (U_2_int |x#0@@2|)))
 :pattern ( ($Is intType |x#0@@2| Tclass._System.nat))
)))
(assert (forall ((|l#0@@1| T@U) (|l#1@@1| Int) (|l#2@@0| Int) (|$y#1| T@U) ) (! (= (U_2_bool (MapType0Select BoxType boolType (|lambda#2| |l#0@@1| |l#1@@1| |l#2@@0|) |$y#1|))  (and ($IsBox |$y#1| |l#0@@1|) (and (and (<= |l#1@@1| (U_2_int ($Unbox intType |$y#1|))) (< (U_2_int ($Unbox intType |$y#1|)) |l#2@@0|)) (Comprehensions.__default.P (U_2_int ($Unbox intType |$y#1|))))))
 :pattern ( (MapType0Select BoxType boolType (|lambda#2| |l#0@@1| |l#1@@1| |l#2@@0|) |$y#1|))
)))
(assert (forall ((v@@0 T@U) (t T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t h) ($IsAlloc T@@1 v@@0 t h))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t h))
)))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 Tclass._System.nat) (and (= ($Box intType ($Unbox intType bx@@1)) bx@@1) ($Is intType ($Unbox intType bx@@1) Tclass._System.nat)))
 :pattern ( ($IsBox bx@@1 Tclass._System.nat))
)))
(assert (forall ((bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 Tclass.Comprehensions.ClassA) (and (= ($Box refType ($Unbox refType bx@@2)) bx@@2) ($Is refType ($Unbox refType bx@@2) Tclass.Comprehensions.ClassA)))
 :pattern ( ($IsBox bx@@2 Tclass.Comprehensions.ClassA))
)))
(assert (forall ((bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 Tclass.Comprehensions.ClassA?) (and (= ($Box refType ($Unbox refType bx@@3)) bx@@3) ($Is refType ($Unbox refType bx@@3) Tclass.Comprehensions.ClassA?)))
 :pattern ( ($IsBox bx@@3 Tclass.Comprehensions.ClassA?))
)))
(assert (forall ((|c#0@@0| T@U) ) (! (= ($Is refType |c#0@@0| Tclass.Comprehensions.ClassA)  (and ($Is refType |c#0@@0| Tclass.Comprehensions.ClassA?) (or (not (= |c#0@@0| null)) (not true))))
 :pattern ( ($Is refType |c#0@@0| Tclass.Comprehensions.ClassA))
 :pattern ( ($Is refType |c#0@@0| Tclass.Comprehensions.ClassA?))
)))
(assert (forall ((|l#0@@2| Int) (|l#1@@2| Int) (|l#2@@1| Int) (|$y#2| T@U) ) (! (= (U_2_bool (MapType0Select BoxType boolType (|lambda#3| |l#0@@2| |l#1@@2| |l#2@@1|) |$y#2|)) (exists ((|n#2| Int) ) (!  (and (and (<= |l#0@@2| |n#2|) (and (and (<= |l#1@@2| |n#2|) (< |n#2| |l#2@@1|)) (Comprehensions.__default.P |n#2|))) (= |$y#2| ($Box intType (int_2_U |n#2|))))
 :pattern ( (Comprehensions.__default.P |n#2|))
)))
 :pattern ( (MapType0Select BoxType boolType (|lambda#3| |l#0@@2| |l#1@@2| |l#2@@1|) |$y#2|))
)))
(assert (forall ((bx@@4 T@U) ) (!  (=> ($IsBox bx@@4 TInt) (and (= ($Box intType ($Unbox intType bx@@4)) bx@@4) ($Is intType ($Unbox intType bx@@4) TInt)))
 :pattern ( ($IsBox bx@@4 TInt))
)))
(assert (forall ((v@@1 T@U) (t@@0 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@1) t@@0) ($Is T@@2 v@@1 t@@0))
 :pattern ( ($IsBox ($Box T@@2 v@@1) t@@0))
)))
(assert (forall ((v@@2 T@U) (t0@@1 T@U) (h@@0 T@U) ) (! (= ($IsAlloc SetType v@@2 (TSet t0@@1) h@@0) (forall ((bx@@5 T@U) ) (!  (=> (|Set#IsMember| v@@2 bx@@5) ($IsAllocBox bx@@5 t0@@1 h@@0))
 :pattern ( (|Set#IsMember| v@@2 bx@@5))
)))
 :pattern ( ($IsAlloc SetType v@@2 (TSet t0@@1) h@@0))
)))
(assert (forall ((t@@1 T@U) ) (! (= (Inv0_TSet (TSet t@@1)) t@@1)
 :pattern ( (TSet t@@1))
)))
(assert (forall ((t@@2 T@U) ) (! (= (Tag (TSet t@@2)) TagSet)
 :pattern ( (TSet t@@2))
)))
(assert (forall ((x@@5 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@5)) x@@5)
 :pattern ( ($Box T@@3 x@@5))
)))
(assert  (and (forall ((t0@@2 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@2 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@2 t1@@0 t2 (MapType1Store t0@@2 t1@@0 t2 m@@2 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@3 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@3 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@3 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@4 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@4 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@4 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0@@3| T@U) (|l#1@@3| T@U) (|l#2@@2| T@U) (|l#3@@0| Bool) ($o@@1 T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0@@3| |l#1@@3| |l#2@@2| |l#3@@0|) $o@@1 $f))  (=> (and (or (not (= $o@@1 |l#0@@3|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1@@3| $o@@1) |l#2@@2|)))) |l#3@@0|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0@@3| |l#1@@3| |l#2@@2| |l#3@@0|) $o@@1 $f))
)))
(assert (forall ((bx@@6 T@U) (t@@3 T@U) ) (!  (=> ($IsBox bx@@6 (TSet t@@3)) (and (= ($Box SetType ($Unbox SetType bx@@6)) bx@@6) ($Is SetType ($Unbox SetType bx@@6) (TSet t@@3))))
 :pattern ( ($IsBox bx@@6 (TSet t@@3)))
)))
(assert (= (Tag Tclass._System.nat) Tagclass._System.nat))
(assert (= (TagFamily Tclass._System.nat) tytagFamily$nat))
(assert (= (Tag Tclass.Comprehensions.ClassA) Tagclass.Comprehensions.ClassA))
(assert (= (TagFamily Tclass.Comprehensions.ClassA) tytagFamily$ClassA))
(assert (= (Tag Tclass.Comprehensions.ClassA?) Tagclass.Comprehensions.ClassA?))
(assert (= (TagFamily Tclass.Comprehensions.ClassA?) tytagFamily$ClassA))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((x@@7 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@7)) (Lit BoxType ($Box T@@4 x@@7)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@7)))
)))
(assert (forall ((h@@1 T@U) (v@@3 T@U) ) (! ($IsAlloc intType v@@3 TInt h@@1)
 :pattern ( ($IsAlloc intType v@@3 TInt h@@1))
)))
(assert (forall ((v@@4 T@U) ) (! ($Is intType v@@4 TInt)
 :pattern ( ($Is intType v@@4 TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |$rhs#3@0| () T@U)
(declare-fun |ii#0@0| () T@U)
(declare-fun |$rhs#0@0| () T@U)
(declare-fun |$rhs#1@0| () T@U)
(declare-fun |$rhs#2@0| () T@U)
(declare-fun |n#5@0| () Int)
(declare-fun $Heap () T@U)
(declare-fun |mm#0@0| () T@U)
(declare-fun |n#3@0| () Int)
(declare-fun |nn#0@0| () T@U)
(declare-fun |n#0@0| () Int)
(declare-fun |aa#0@0| () T@U)
(declare-fun |s#0| () T@U)
(declare-fun |o#0@0| () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |aa'#0| () T@U)
(declare-fun |nn'#0| () T@U)
(declare-fun |ii'#0| () T@U)
(declare-fun |aa#0| () T@U)
(declare-fun |nn#0| () T@U)
(declare-fun |mm#0| () T@U)
(declare-fun |ii#0| () T@U)
(declare-fun |$rhs#0| () T@U)
(declare-fun |$rhs#1| () T@U)
(declare-fun |$rhs#2| () T@U)
(declare-fun |$rhs#3| () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 43) (let ((anon51_Else_correct  (=> (and (and (and (and (and (and (not (U_2_bool (Lit boolType (bool_2_U true)))) (not (U_2_bool (Lit boolType (bool_2_U true))))) (not (U_2_bool (Lit boolType (bool_2_U true))))) (not (U_2_bool (Lit boolType (bool_2_U true))))) (not (U_2_bool (Lit boolType (bool_2_U true))))) (not (U_2_bool (Lit boolType (bool_2_U true))))) (= (ControlFlow 0 9) (- 0 8))) false)))
(let ((anon51_Then_correct true))
(let ((anon50_Then_correct  (=> (= (ControlFlow 0 6) (- 0 5)) ($Is SetType |$rhs#3@0| (TSet Tclass._System.nat)))))
(let ((anon49_Then_correct true))
(let ((anon48_Then_correct true))
(let ((anon47_Then_correct true))
(let ((anon46_Then_correct true))
(let ((anon24_correct  (=> (and (forall ((|n#4@@0| Int) ) (!  (=> (<= (LitInt 0) |n#4@@0|) (=> (and (<= (LitInt (- 0 2)) |n#4@@0|) (< |n#4@@0| 8)) (|Comprehensions.__default.P#canCall| |n#4@@0|)))
 :pattern ( (Comprehensions.__default.P |n#4@@0|))
)) (= |ii#0@0| (|Set#FromBoogieMap| (|lambda#4| (LitInt 0) (LitInt (- 0 2)) 8 2)))) (=> (and (and ($Is SetType |$rhs#0@0| (TSet Tclass.Comprehensions.ClassA)) ($Is SetType |$rhs#1@0| (TSet Tclass._System.nat))) (and ($Is SetType |$rhs#2@0| (TSet Tclass._System.nat)) ($Is SetType |$rhs#3@0| (TSet TInt)))) (and (and (and (and (and (and (=> (= (ControlFlow 0 10) 1) anon46_Then_correct) (=> (= (ControlFlow 0 10) 2) anon47_Then_correct)) (=> (= (ControlFlow 0 10) 3) anon48_Then_correct)) (=> (= (ControlFlow 0 10) 4) anon49_Then_correct)) (=> (= (ControlFlow 0 10) 6) anon50_Then_correct)) (=> (= (ControlFlow 0 10) 7) anon51_Then_correct)) (=> (= (ControlFlow 0 10) 9) anon51_Else_correct))))))
(let ((anon45_Else_correct  (=> (and (not (and (and (<= (LitInt (- 0 2)) |n#5@0|) (< |n#5@0| 8)) (Comprehensions.__default.P |n#5@0|))) (= (ControlFlow 0 13) 10)) anon24_correct)))
(let ((anon45_Then_correct  (=> (and (and (and (<= (LitInt (- 0 2)) |n#5@0|) (< |n#5@0| 8)) (Comprehensions.__default.P |n#5@0|)) (= (ControlFlow 0 12) 10)) anon24_correct)))
(let ((anon44_Else_correct  (=> (not (and (<= (LitInt (- 0 2)) |n#5@0|) (< |n#5@0| 8))) (and (=> (= (ControlFlow 0 15) 12) anon45_Then_correct) (=> (= (ControlFlow 0 15) 13) anon45_Else_correct)))))
(let ((anon44_Then_correct  (=> (and (and (<= (LitInt (- 0 2)) |n#5@0|) (< |n#5@0| 8)) (and ($IsAlloc intType (int_2_U |n#5@0|) Tclass._System.nat $Heap) (|Comprehensions.__default.P#canCall| |n#5@0|))) (and (=> (= (ControlFlow 0 14) 12) anon45_Then_correct) (=> (= (ControlFlow 0 14) 13) anon45_Else_correct)))))
(let ((anon43_Else_correct  (=> (< |n#5@0| (LitInt (- 0 2))) (and (=> (= (ControlFlow 0 17) 14) anon44_Then_correct) (=> (= (ControlFlow 0 17) 15) anon44_Else_correct)))))
(let ((anon43_Then_correct  (=> (<= (LitInt (- 0 2)) |n#5@0|) (and (=> (= (ControlFlow 0 16) 14) anon44_Then_correct) (=> (= (ControlFlow 0 16) 15) anon44_Else_correct)))))
(let ((anon42_Then_correct  (=> (<= (LitInt 0) |n#5@0|) (and (=> (= (ControlFlow 0 18) 16) anon43_Then_correct) (=> (= (ControlFlow 0 18) 17) anon43_Else_correct)))))
(let ((anon42_Else_correct  (=> (and (< |n#5@0| (LitInt 0)) (= (ControlFlow 0 11) 10)) anon24_correct)))
(let ((anon17_correct  (=> (and (forall ((|n#2@@0| Int) ) (!  (=> (<= (LitInt 0) |n#2@@0|) (=> (and (<= (LitInt (- 0 2)) |n#2@@0|) (< |n#2@@0| 8)) (|Comprehensions.__default.P#canCall| |n#2@@0|)))
 :pattern ( (Comprehensions.__default.P |n#2@@0|))
)) (= |mm#0@0| (|Set#FromBoogieMap| (|lambda#3| (LitInt 0) (LitInt (- 0 2)) 8)))) (and (=> (= (ControlFlow 0 19) 18) anon42_Then_correct) (=> (= (ControlFlow 0 19) 11) anon42_Else_correct)))))
(let ((anon41_Else_correct  (=> (and (not (and (and (<= (LitInt (- 0 2)) |n#3@0|) (< |n#3@0| 8)) (Comprehensions.__default.P |n#3@0|))) (= (ControlFlow 0 22) 19)) anon17_correct)))
(let ((anon41_Then_correct  (=> (and (and (and (<= (LitInt (- 0 2)) |n#3@0|) (< |n#3@0| 8)) (Comprehensions.__default.P |n#3@0|)) (= (ControlFlow 0 21) 19)) anon17_correct)))
(let ((anon40_Else_correct  (=> (not (and (<= (LitInt (- 0 2)) |n#3@0|) (< |n#3@0| 8))) (and (=> (= (ControlFlow 0 24) 21) anon41_Then_correct) (=> (= (ControlFlow 0 24) 22) anon41_Else_correct)))))
(let ((anon40_Then_correct  (=> (and (and (<= (LitInt (- 0 2)) |n#3@0|) (< |n#3@0| 8)) (and ($IsAlloc intType (int_2_U |n#3@0|) Tclass._System.nat $Heap) (|Comprehensions.__default.P#canCall| |n#3@0|))) (and (=> (= (ControlFlow 0 23) 21) anon41_Then_correct) (=> (= (ControlFlow 0 23) 22) anon41_Else_correct)))))
(let ((anon39_Else_correct  (=> (< |n#3@0| (LitInt (- 0 2))) (and (=> (= (ControlFlow 0 26) 23) anon40_Then_correct) (=> (= (ControlFlow 0 26) 24) anon40_Else_correct)))))
(let ((anon39_Then_correct  (=> (<= (LitInt (- 0 2)) |n#3@0|) (and (=> (= (ControlFlow 0 25) 23) anon40_Then_correct) (=> (= (ControlFlow 0 25) 24) anon40_Else_correct)))))
(let ((anon38_Then_correct  (=> (<= (LitInt 0) |n#3@0|) (and (=> (= (ControlFlow 0 27) 25) anon39_Then_correct) (=> (= (ControlFlow 0 27) 26) anon39_Else_correct)))))
(let ((anon38_Else_correct  (=> (and (< |n#3@0| (LitInt 0)) (= (ControlFlow 0 20) 19)) anon17_correct)))
(let ((anon10_correct  (=> (and (forall ((|n#1| Int) ) (!  (=> (<= (LitInt 0) |n#1|) (=> (and (<= (LitInt (- 0 2)) |n#1|) (< |n#1| 8)) (|Comprehensions.__default.P#canCall| |n#1|)))
 :pattern ( (Comprehensions.__default.P |n#1|))
)) (= |nn#0@0| (|Set#FromBoogieMap| (|lambda#2| Tclass._System.nat (LitInt (- 0 2)) 8)))) (and (=> (= (ControlFlow 0 28) 27) anon38_Then_correct) (=> (= (ControlFlow 0 28) 20) anon38_Else_correct)))))
(let ((anon37_Else_correct  (=> (and (not (and (and (<= (LitInt (- 0 2)) |n#0@0|) (< |n#0@0| 8)) (Comprehensions.__default.P |n#0@0|))) (= (ControlFlow 0 31) 28)) anon10_correct)))
(let ((anon37_Then_correct  (=> (and (and (and (<= (LitInt (- 0 2)) |n#0@0|) (< |n#0@0| 8)) (Comprehensions.__default.P |n#0@0|)) (= (ControlFlow 0 30) 28)) anon10_correct)))
(let ((anon36_Else_correct  (=> (not (and (<= (LitInt (- 0 2)) |n#0@0|) (< |n#0@0| 8))) (and (=> (= (ControlFlow 0 33) 30) anon37_Then_correct) (=> (= (ControlFlow 0 33) 31) anon37_Else_correct)))))
(let ((anon36_Then_correct  (=> (and (and (<= (LitInt (- 0 2)) |n#0@0|) (< |n#0@0| 8)) (and ($IsAlloc intType (int_2_U |n#0@0|) Tclass._System.nat $Heap) (|Comprehensions.__default.P#canCall| |n#0@0|))) (and (=> (= (ControlFlow 0 32) 30) anon37_Then_correct) (=> (= (ControlFlow 0 32) 31) anon37_Else_correct)))))
(let ((anon35_Else_correct  (=> (< |n#0@0| (LitInt (- 0 2))) (and (=> (= (ControlFlow 0 35) 32) anon36_Then_correct) (=> (= (ControlFlow 0 35) 33) anon36_Else_correct)))))
(let ((anon35_Then_correct  (=> (<= (LitInt (- 0 2)) |n#0@0|) (and (=> (= (ControlFlow 0 34) 32) anon36_Then_correct) (=> (= (ControlFlow 0 34) 33) anon36_Else_correct)))))
(let ((anon34_Then_correct  (=> (<= (LitInt 0) |n#0@0|) (and (=> (= (ControlFlow 0 36) 34) anon35_Then_correct) (=> (= (ControlFlow 0 36) 35) anon35_Else_correct)))))
(let ((anon34_Else_correct  (=> (and (< |n#0@0| (LitInt 0)) (= (ControlFlow 0 29) 28)) anon10_correct)))
(let ((anon3_correct  (=> (= |aa#0@0| (|Set#FromBoogieMap| (|lambda#1| Tclass.Comprehensions.ClassA |s#0|))) (and (=> (= (ControlFlow 0 37) 36) anon34_Then_correct) (=> (= (ControlFlow 0 37) 29) anon34_Else_correct)))))
(let ((anon33_Else_correct  (=> (and (not (|Set#IsMember| |s#0| ($Box refType |o#0@0|))) (= (ControlFlow 0 40) 37)) anon3_correct)))
(let ((anon33_Then_correct  (=> (and (|Set#IsMember| |s#0| ($Box refType |o#0@0|)) (= (ControlFlow 0 39) 37)) anon3_correct)))
(let ((anon32_Then_correct  (=> (and ($Is refType |o#0@0| Tclass.Comprehensions.ClassA) ($IsAlloc refType |o#0@0| Tclass.Comprehensions.ClassA $Heap)) (and (=> (= (ControlFlow 0 41) 39) anon33_Then_correct) (=> (= (ControlFlow 0 41) 40) anon33_Else_correct)))))
(let ((anon32_Else_correct  (=> (and (not (and ($Is refType |o#0@0| Tclass.Comprehensions.ClassA) ($IsAlloc refType |o#0@0| Tclass.Comprehensions.ClassA $Heap))) (= (ControlFlow 0 38) 37)) anon3_correct)))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (and (=> (= (ControlFlow 0 42) 41) anon32_Then_correct) (=> (= (ControlFlow 0 42) 38) anon32_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (=> (and (and ($Is SetType |s#0| (TSet Tclass.Comprehensions.ClassA)) ($IsAlloc SetType |s#0| (TSet Tclass.Comprehensions.ClassA) $Heap)) (and ($Is SetType |aa'#0| (TSet Tclass.Comprehensions.ClassA)) ($IsAlloc SetType |aa'#0| (TSet Tclass.Comprehensions.ClassA) $Heap))) (=> (and (and (and (and (and ($Is SetType |nn'#0| (TSet Tclass._System.nat)) ($IsAlloc SetType |nn'#0| (TSet Tclass._System.nat) $Heap)) (and ($Is SetType |ii'#0| (TSet TInt)) ($IsAlloc SetType |ii'#0| (TSet TInt) $Heap))) (and (and ($Is SetType |aa#0| (TSet Tclass.Comprehensions.ClassA)) ($IsAlloc SetType |aa#0| (TSet Tclass.Comprehensions.ClassA) $Heap)) true)) (and (and (and ($Is SetType |nn#0| (TSet Tclass._System.nat)) ($IsAlloc SetType |nn#0| (TSet Tclass._System.nat) $Heap)) true) (and (and ($Is SetType |mm#0| (TSet Tclass._System.nat)) ($IsAlloc SetType |mm#0| (TSet Tclass._System.nat) $Heap)) true))) (and (and (and (and ($Is SetType |ii#0| (TSet TInt)) ($IsAlloc SetType |ii#0| (TSet TInt) $Heap)) true) (and ($Is SetType |$rhs#0| (TSet Tclass.Comprehensions.ClassA)) true)) (and (and (and ($Is SetType |$rhs#1| (TSet Tclass._System.nat)) true) (and ($Is SetType |$rhs#2| (TSet Tclass._System.nat)) true)) (and (and ($Is SetType |$rhs#3| (TSet TInt)) true) (and (= 1 $FunctionContextHeight) (= (ControlFlow 0 43) 42)))))) anon0_correct)))))
PreconditionGeneratedEntry_correct))))))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 6) (- 5))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
