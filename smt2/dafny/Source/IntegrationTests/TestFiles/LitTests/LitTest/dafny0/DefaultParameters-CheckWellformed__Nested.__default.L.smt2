(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (Bool) T@U)
(declare-fun $generated@@7 (T@U) Bool)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun $generated@@9 (T@U) Int)
(declare-fun $generated@@10 (Real) T@U)
(declare-fun $generated@@11 (T@U) Real)
(declare-fun $generated@@18 () Int)
(declare-fun $generated@@19 (T@U Int Int) Int)
(declare-fun $generated@@20 (T@U) T@U)
(declare-fun $generated@@21 (Int Int) Bool)
(declare-fun $generated@@22 (Int) Int)
(declare-fun $generated@@23 (Int Int) Bool)
(declare-fun $generated@@24 (T@U Int Int) Int)
(declare-fun $generated@@28 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@29 () T@U)
(declare-fun $generated@@45 (T@T T@U) T@U)
(declare-fun $generated@@48 (T@T T@U) T@U)
(declare-fun $generated@@49 (T@T T@U) T@U)
(declare-fun $generated@@52 (T@T T@U T@U) Bool)
(declare-fun $generated@@62 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@63 () T@T)
(declare-fun $generated@@64 () T@T)
(declare-fun $generated@@65 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@66 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@67 () T@T)
(declare-fun $generated@@68 (T@T T@T) T@T)
(declare-fun $generated@@69 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@70 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@71 (T@T) T@T)
(declare-fun $generated@@72 (T@T) T@T)
(declare-fun $generated@@121 (T@U) T@U)
(declare-fun $generated@@122 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@4) 1)) (= ($generated@@2 $generated@@5) 2)) (forall (($generated@@12 Bool) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Int) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Real) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))))
(assert (distinct $generated $generated@@0 $generated@@1)
)
(assert  (=> (<= 0 $generated@@18) (forall (($generated@@25 T@U) ($generated@@26 Int) ($generated@@27 Int) ) (!  (=> (or ($generated@@21 $generated@@26 $generated@@27) (and (< 0 $generated@@18) (and (<= ($generated@@22 0) $generated@@26) (<= ($generated@@22 0) $generated@@27)))) (and (and (=> (or (not (= $generated@@26 ($generated@@22 0))) (not true)) ($generated@@21 (- $generated@@26 1) (- $generated@@26 1))) ($generated@@23 $generated@@26 (ite (= $generated@@26 ($generated@@22 0)) 6 ($generated@@19 $generated@@25 (- $generated@@26 1) (- $generated@@26 1))))) (= ($generated@@19 ($generated@@20 $generated@@25) $generated@@26 $generated@@27) ($generated@@24 $generated@@25 $generated@@26 (ite (= $generated@@26 ($generated@@22 0)) 6 ($generated@@19 $generated@@25 (- $generated@@26 1) (- $generated@@26 1)))))))
 :pattern ( ($generated@@19 ($generated@@20 $generated@@25) $generated@@26 $generated@@27))
))))
(assert (forall (($generated@@30 T@U) ($generated@@31 T@U) ) (! ($generated@@28 $generated@@4 $generated@@30 $generated@@29 $generated@@31)
 :pattern ( ($generated@@28 $generated@@4 $generated@@30 $generated@@29 $generated@@31))
)))
(assert  (=> (<= 0 $generated@@18) (forall (($generated@@32 T@U) ($generated@@33 Int) ($generated@@34 Int) ) (!  (=> (or ($generated@@21 ($generated@@22 $generated@@33) $generated@@34) (and (< 0 $generated@@18) (and (<= ($generated@@22 0) $generated@@33) (<= ($generated@@22 0) $generated@@34)))) (and (and (=> (or (not (= ($generated@@22 $generated@@33) ($generated@@22 0))) (not true)) ($generated@@21 ($generated@@22 (- $generated@@33 1)) ($generated@@22 (- $generated@@33 1)))) ($generated@@23 ($generated@@22 $generated@@33) (ite (= ($generated@@22 $generated@@33) ($generated@@22 0)) 6 ($generated@@19 ($generated@@20 $generated@@32) ($generated@@22 (- $generated@@33 1)) ($generated@@22 (- $generated@@33 1)))))) (= ($generated@@19 ($generated@@20 $generated@@32) ($generated@@22 $generated@@33) $generated@@34) ($generated@@24 ($generated@@20 $generated@@32) ($generated@@22 $generated@@33) (ite (= ($generated@@22 $generated@@33) ($generated@@22 0)) 6 ($generated@@19 ($generated@@20 $generated@@32) ($generated@@22 (- $generated@@33 1)) ($generated@@22 (- $generated@@33 1))))))))
 :weight 3
 :pattern ( ($generated@@19 ($generated@@20 $generated@@32) ($generated@@22 $generated@@33) $generated@@34))
))))
(assert  (=> (<= 0 $generated@@18) (forall (($generated@@35 T@U) ($generated@@36 Int) ($generated@@37 Int) ) (!  (=> (or ($generated@@23 $generated@@36 $generated@@37) (and (< 0 $generated@@18) (and (<= ($generated@@22 0) $generated@@36) (<= ($generated@@22 0) $generated@@37)))) (<= ($generated@@22 0) ($generated@@24 $generated@@35 $generated@@36 $generated@@37)))
 :pattern ( ($generated@@24 $generated@@35 $generated@@36 $generated@@37))
))))
(assert  (=> (<= 0 $generated@@18) (forall (($generated@@38 T@U) ($generated@@39 Int) ($generated@@40 Int) ) (!  (=> (or ($generated@@21 $generated@@39 $generated@@40) (and (< 0 $generated@@18) (and (<= ($generated@@22 0) $generated@@39) (<= ($generated@@22 0) $generated@@40)))) (<= ($generated@@22 0) ($generated@@19 $generated@@38 $generated@@39 $generated@@40)))
 :pattern ( ($generated@@19 $generated@@38 $generated@@39 $generated@@40))
))))
(assert  (=> (<= 0 $generated@@18) (forall (($generated@@41 T@U) ($generated@@42 Int) ($generated@@43 Int) ) (!  (=> (or ($generated@@21 ($generated@@22 $generated@@42) ($generated@@22 $generated@@43)) (and (< 0 $generated@@18) (and (<= ($generated@@22 0) $generated@@42) (<= ($generated@@22 0) $generated@@43)))) (and (and (=> (or (not (= ($generated@@22 $generated@@42) ($generated@@22 0))) (not true)) ($generated@@21 ($generated@@22 (- $generated@@42 1)) ($generated@@22 (- $generated@@42 1)))) ($generated@@23 ($generated@@22 $generated@@42) (ite (= ($generated@@22 $generated@@42) ($generated@@22 0)) 6 ($generated@@19 ($generated@@20 $generated@@41) ($generated@@22 (- $generated@@42 1)) ($generated@@22 (- $generated@@42 1)))))) (= ($generated@@19 ($generated@@20 $generated@@41) ($generated@@22 $generated@@42) ($generated@@22 $generated@@43)) ($generated@@24 ($generated@@20 $generated@@41) ($generated@@22 $generated@@42) (ite (= ($generated@@22 $generated@@42) ($generated@@22 0)) 6 ($generated@@19 ($generated@@20 $generated@@41) ($generated@@22 (- $generated@@42 1)) ($generated@@22 (- $generated@@42 1))))))))
 :weight 3
 :pattern ( ($generated@@19 ($generated@@20 $generated@@41) ($generated@@22 $generated@@42) ($generated@@22 $generated@@43)))
))))
(assert (forall (($generated@@44 Int) ) (! (= ($generated@@22 $generated@@44) $generated@@44)
 :pattern ( ($generated@@22 $generated@@44))
)))
(assert (forall (($generated@@46 T@U) ($generated@@47 T@T) ) (! (= ($generated@@45 $generated@@47 $generated@@46) $generated@@46)
 :pattern ( ($generated@@45 $generated@@47 $generated@@46))
)))
(assert (forall (($generated@@50 T@U) ($generated@@51 T@T) ) (! (= ($generated@@49 $generated@@51 ($generated@@48 $generated@@51 $generated@@50)) $generated@@50)
 :pattern ( ($generated@@48 $generated@@51 $generated@@50))
)))
(assert (forall (($generated@@53 T@U) ) (! (= ($generated@@52 $generated@@4 $generated@@53 $generated@@29) (<= ($generated@@22 0) ($generated@@9 $generated@@53)))
 :pattern ( ($generated@@52 $generated@@4 $generated@@53 $generated@@29))
)))
(assert (forall (($generated@@54 T@U) ($generated@@55 Int) ($generated@@56 Int) ) (! (= ($generated@@24 ($generated@@20 $generated@@54) $generated@@55 $generated@@56) ($generated@@24 $generated@@54 $generated@@55 $generated@@56))
 :pattern ( ($generated@@24 ($generated@@20 $generated@@54) $generated@@55 $generated@@56))
)))
(assert (forall (($generated@@57 T@U) ($generated@@58 Int) ($generated@@59 Int) ) (! (= ($generated@@19 ($generated@@20 $generated@@57) $generated@@58 $generated@@59) ($generated@@19 $generated@@57 $generated@@58 $generated@@59))
 :pattern ( ($generated@@19 ($generated@@20 $generated@@57) $generated@@58 $generated@@59))
)))
(assert (forall (($generated@@60 T@U) ($generated@@61 T@T) ) (! (= ($generated@@48 $generated@@61 ($generated@@49 $generated@@61 $generated@@60)) $generated@@60)
 :pattern ( ($generated@@49 $generated@@61 $generated@@60))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@73 T@T) ($generated@@74 T@T) ($generated@@75 T@T) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ) (! (= ($generated@@62 $generated@@73 $generated@@74 $generated@@75 ($generated@@69 $generated@@73 $generated@@74 $generated@@75 $generated@@77 $generated@@78 $generated@@79 $generated@@76) $generated@@78 $generated@@79) $generated@@76)
 :weight 0
)) (and (forall (($generated@@80 T@T) ($generated@@81 T@T) ($generated@@82 T@T) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ) (!  (or (= $generated@@85 $generated@@87) (= ($generated@@62 $generated@@80 $generated@@81 $generated@@82 ($generated@@69 $generated@@80 $generated@@81 $generated@@82 $generated@@84 $generated@@85 $generated@@86 $generated@@83) $generated@@87 $generated@@88) ($generated@@62 $generated@@80 $generated@@81 $generated@@82 $generated@@84 $generated@@87 $generated@@88)))
 :weight 0
)) (forall (($generated@@89 T@T) ($generated@@90 T@T) ($generated@@91 T@T) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (!  (or (= $generated@@95 $generated@@97) (= ($generated@@62 $generated@@89 $generated@@90 $generated@@91 ($generated@@69 $generated@@89 $generated@@90 $generated@@91 $generated@@93 $generated@@94 $generated@@95 $generated@@92) $generated@@96 $generated@@97) ($generated@@62 $generated@@89 $generated@@90 $generated@@91 $generated@@93 $generated@@96 $generated@@97)))
 :weight 0
)))) (= ($generated@@2 $generated@@63) 3)) (= ($generated@@2 $generated@@64) 4)) (forall (($generated@@98 T@T) ($generated@@99 T@T) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (! (= ($generated@@66 $generated@@98 $generated@@99 ($generated@@70 $generated@@98 $generated@@99 $generated@@101 $generated@@102 $generated@@100) $generated@@102) $generated@@100)
 :weight 0
))) (forall (($generated@@103 T@T) ($generated@@104 T@T) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ) (!  (or (= $generated@@107 $generated@@108) (= ($generated@@66 $generated@@103 $generated@@104 ($generated@@70 $generated@@103 $generated@@104 $generated@@106 $generated@@107 $generated@@105) $generated@@108) ($generated@@66 $generated@@103 $generated@@104 $generated@@106 $generated@@108)))
 :weight 0
))) (= ($generated@@2 $generated@@67) 5)) (forall (($generated@@109 T@T) ($generated@@110 T@T) ) (= ($generated@@2 ($generated@@68 $generated@@109 $generated@@110)) 6))) (forall (($generated@@111 T@T) ($generated@@112 T@T) ) (! (= ($generated@@71 ($generated@@68 $generated@@111 $generated@@112)) $generated@@111)
 :pattern ( ($generated@@68 $generated@@111 $generated@@112))
))) (forall (($generated@@113 T@T) ($generated@@114 T@T) ) (! (= ($generated@@72 ($generated@@68 $generated@@113 $generated@@114)) $generated@@114)
 :pattern ( ($generated@@68 $generated@@113 $generated@@114))
))))
(assert (forall (($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 Bool) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (= ($generated@@7 ($generated@@62 $generated@@63 $generated@@64 $generated@@3 ($generated@@65 $generated@@115 $generated@@116 $generated@@117 $generated@@118) $generated@@119 $generated@@120))  (=> (and (or (not (= $generated@@119 $generated@@115)) (not true)) ($generated@@7 ($generated@@48 $generated@@3 ($generated@@66 $generated@@64 $generated@@67 ($generated@@66 $generated@@63 ($generated@@68 $generated@@64 $generated@@67) $generated@@116 $generated@@119) $generated@@117)))) $generated@@118))
 :pattern ( ($generated@@62 $generated@@63 $generated@@64 $generated@@3 ($generated@@65 $generated@@115 $generated@@116 $generated@@117 $generated@@118) $generated@@119 $generated@@120))
)))
(assert (= ($generated@@121 $generated@@29) $generated@@0))
(assert (= ($generated@@122 $generated@@29) $generated@@1))
(assert (forall (($generated@@123 Int) ) (! (= ($generated@@49 $generated@@4 ($generated@@8 ($generated@@22 $generated@@123))) ($generated@@45 $generated@@67 ($generated@@49 $generated@@4 ($generated@@8 $generated@@123))))
 :pattern ( ($generated@@49 $generated@@4 ($generated@@8 ($generated@@22 $generated@@123))))
)))
(assert (forall (($generated@@124 T@U) ($generated@@125 T@T) ) (! (= ($generated@@49 $generated@@125 ($generated@@45 $generated@@125 $generated@@124)) ($generated@@45 $generated@@67 ($generated@@49 $generated@@125 $generated@@124)))
 :pattern ( ($generated@@49 $generated@@125 ($generated@@45 $generated@@125 $generated@@124)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@126 () Int)
(declare-fun $generated@@127 () T@U)
(declare-fun $generated@@128 () Int)
(declare-fun $generated@@129 () T@U)
(declare-fun $generated@@130 () T@U)
(declare-fun $generated@@131 () T@U)
(declare-fun $generated@@132 (T@U) Bool)
(declare-fun $generated@@133 (T@U) Bool)
(declare-fun $generated@@134 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 7) (let (($generated@@135  (=> ($generated@@28 $generated@@4 ($generated@@8 $generated@@126) $generated@@29 $generated@@127) (=> (and (= $generated@@128 (ite (= $generated@@126 ($generated@@22 0)) 6 ($generated@@19 ($generated@@20 $generated@@129) (- $generated@@126 1) (- $generated@@126 1)))) ($generated@@28 $generated@@4 ($generated@@8 $generated@@128) $generated@@29 $generated@@127)) (and (=> (= (ControlFlow 0 3) (- 0 5)) (or (<= 0 $generated@@126) (= $generated@@126 $generated@@126))) (=> (or (<= 0 $generated@@126) (= $generated@@126 $generated@@126)) (and (=> (= (ControlFlow 0 3) (- 0 4)) (or (or (<= 0 ($generated@@22 1)) (< $generated@@126 $generated@@126)) (= ($generated@@22 0) ($generated@@22 1)))) (=> (or (or (<= 0 ($generated@@22 1)) (< $generated@@126 $generated@@126)) (= ($generated@@22 0) ($generated@@22 1))) (=> (= (ControlFlow 0 3) (- 0 2)) (or (< $generated@@126 $generated@@126) (and (= $generated@@126 $generated@@126) (< ($generated@@22 0) ($generated@@22 1)))))))))))))
(let (($generated@@136 true))
(let (($generated@@137  (=> (= $generated@@130 ($generated@@65 $generated@@131 $generated@@127 $generated false)) (and (=> (= (ControlFlow 0 6) 1) $generated@@136) (=> (= (ControlFlow 0 6) 3) $generated@@135)))))
(let (($generated@@138  (=> (and ($generated@@132 $generated@@127) ($generated@@133 $generated@@127)) (=> (and (and (<= ($generated@@22 0) $generated@@126) (<= ($generated@@22 0) $generated@@134)) (and (= 0 $generated@@18) (= (ControlFlow 0 7) 6))) $generated@@137))))
$generated@@138)))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
