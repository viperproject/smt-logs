(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (Bool) T@U)
(declare-fun $generated@@7 (T@U) Bool)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun $generated@@9 (T@U) Int)
(declare-fun $generated@@10 (Real) T@U)
(declare-fun $generated@@11 (T@U) Real)
(declare-fun $generated@@18 (T@U) T@U)
(declare-fun $generated@@19 (T@U T@U) Bool)
(declare-fun $generated@@20 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@21 () T@T)
(declare-fun $generated@@22 () T@T)
(declare-fun $generated@@23 () T@T)
(declare-fun $generated@@24 (T@T T@T) T@T)
(declare-fun $generated@@25 (T@T T@U) T@U)
(declare-fun $generated@@26 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@27 (T@T) T@T)
(declare-fun $generated@@28 (T@T) T@T)
(declare-fun $generated@@49 (Int) Int)
(declare-fun $generated@@51 (T@T T@U) T@U)
(declare-fun $generated@@54 (T@T T@U) T@U)
(declare-fun $generated@@57 () Int)
(declare-fun $generated@@58 (Int Int) Bool)
(declare-fun $generated@@59 (Int Int) Bool)
(declare-fun $generated@@62 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@75 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@76 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@77 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@4) 1)) (= ($generated@@2 $generated@@5) 2)) (forall (($generated@@12 Bool) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Int) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Real) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))))
(assert (distinct $generated $generated@@0 $generated@@1)
)
(assert (= ($generated@@18 $generated) $generated@@0))
(assert  (and (and (and (and (and (and (and (forall (($generated@@29 T@T) ($generated@@30 T@T) ($generated@@31 T@U) ($generated@@32 T@U) ($generated@@33 T@U) ) (! (= ($generated@@20 $generated@@29 $generated@@30 ($generated@@26 $generated@@29 $generated@@30 $generated@@32 $generated@@33 $generated@@31) $generated@@33) $generated@@31)
 :weight 0
)) (forall (($generated@@34 T@T) ($generated@@35 T@T) ($generated@@36 T@U) ($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (!  (or (= $generated@@38 $generated@@39) (= ($generated@@20 $generated@@34 $generated@@35 ($generated@@26 $generated@@34 $generated@@35 $generated@@37 $generated@@38 $generated@@36) $generated@@39) ($generated@@20 $generated@@34 $generated@@35 $generated@@37 $generated@@39)))
 :weight 0
))) (= ($generated@@2 $generated@@21) 3)) (= ($generated@@2 $generated@@22) 4)) (= ($generated@@2 $generated@@23) 5)) (forall (($generated@@40 T@T) ($generated@@41 T@T) ) (= ($generated@@2 ($generated@@24 $generated@@40 $generated@@41)) 6))) (forall (($generated@@42 T@T) ($generated@@43 T@T) ) (! (= ($generated@@27 ($generated@@24 $generated@@42 $generated@@43)) $generated@@42)
 :pattern ( ($generated@@24 $generated@@42 $generated@@43))
))) (forall (($generated@@44 T@T) ($generated@@45 T@T) ) (! (= ($generated@@28 ($generated@@24 $generated@@44 $generated@@45)) $generated@@45)
 :pattern ( ($generated@@24 $generated@@44 $generated@@45))
))))
(assert (forall (($generated@@46 T@U) ($generated@@47 T@U) ) (!  (=> ($generated@@19 $generated@@46 $generated@@47) (forall (($generated@@48 T@U) ) (!  (=> ($generated@@7 ($generated@@25 $generated@@3 ($generated@@20 $generated@@21 $generated@@22 ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@46 $generated@@48) $generated@@1))) ($generated@@7 ($generated@@25 $generated@@3 ($generated@@20 $generated@@21 $generated@@22 ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@47 $generated@@48) $generated@@1))))
 :pattern ( ($generated@@20 $generated@@21 $generated@@22 ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@47 $generated@@48) $generated@@1))
)))
 :pattern ( ($generated@@19 $generated@@46 $generated@@47))
)))
(assert (forall (($generated@@50 Int) ) (! (= ($generated@@49 $generated@@50) $generated@@50)
 :pattern ( ($generated@@49 $generated@@50))
)))
(assert (forall (($generated@@52 T@U) ($generated@@53 T@T) ) (! (= ($generated@@51 $generated@@53 $generated@@52) $generated@@52)
 :pattern ( ($generated@@51 $generated@@53 $generated@@52))
)))
(assert (forall (($generated@@55 T@U) ($generated@@56 T@T) ) (! (= ($generated@@54 $generated@@56 ($generated@@25 $generated@@56 $generated@@55)) $generated@@55)
 :pattern ( ($generated@@25 $generated@@56 $generated@@55))
)))
(assert  (=> (<= 0 $generated@@57) (forall (($generated@@60 Int) ($generated@@61 Int) ) (!  (=> (or ($generated@@59 ($generated@@49 $generated@@60) ($generated@@49 $generated@@61)) (< 0 $generated@@57)) (= ($generated@@58 ($generated@@49 $generated@@60) ($generated@@49 $generated@@61)) (<= ($generated@@49 $generated@@60) ($generated@@49 $generated@@61))))
 :weight 3
 :pattern ( ($generated@@58 ($generated@@49 $generated@@60) ($generated@@49 $generated@@61)))
))))
(assert (forall (($generated@@63 T@U) ($generated@@64 T@U) ($generated@@65 T@U) ($generated@@66 T@U) ($generated@@67 T@T) ) (!  (=> ($generated@@19 $generated@@63 $generated@@64) (=> ($generated@@62 $generated@@67 $generated@@65 $generated@@66 $generated@@63) ($generated@@62 $generated@@67 $generated@@65 $generated@@66 $generated@@64)))
 :pattern ( ($generated@@19 $generated@@63 $generated@@64) ($generated@@62 $generated@@67 $generated@@65 $generated@@66 $generated@@63))
)))
(assert  (=> (<= 0 $generated@@57) (forall (($generated@@68 Int) ($generated@@69 Int) ) (!  (=> (or ($generated@@59 $generated@@68 $generated@@69) (< 0 $generated@@57)) (= ($generated@@58 $generated@@68 $generated@@69) (<= $generated@@68 $generated@@69)))
 :pattern ( ($generated@@58 $generated@@68 $generated@@69))
))))
(assert (forall (($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (!  (=> (or (not (= $generated@@70 $generated@@72)) (not true)) (=> (and ($generated@@19 $generated@@70 $generated@@71) ($generated@@19 $generated@@71 $generated@@72)) ($generated@@19 $generated@@70 $generated@@72)))
 :pattern ( ($generated@@19 $generated@@70 $generated@@71) ($generated@@19 $generated@@71 $generated@@72))
)))
(assert (forall (($generated@@73 T@U) ($generated@@74 T@T) ) (! (= ($generated@@25 $generated@@74 ($generated@@54 $generated@@74 $generated@@73)) $generated@@73)
 :pattern ( ($generated@@54 $generated@@74 $generated@@73))
)))
(assert  (and (forall (($generated@@78 T@T) ($generated@@79 T@T) ($generated@@80 T@T) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ) (! (= ($generated@@75 $generated@@78 $generated@@79 $generated@@80 ($generated@@77 $generated@@78 $generated@@79 $generated@@80 $generated@@82 $generated@@83 $generated@@84 $generated@@81) $generated@@83 $generated@@84) $generated@@81)
 :weight 0
)) (and (forall (($generated@@85 T@T) ($generated@@86 T@T) ($generated@@87 T@T) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ) (!  (or (= $generated@@90 $generated@@92) (= ($generated@@75 $generated@@85 $generated@@86 $generated@@87 ($generated@@77 $generated@@85 $generated@@86 $generated@@87 $generated@@89 $generated@@90 $generated@@91 $generated@@88) $generated@@92 $generated@@93) ($generated@@75 $generated@@85 $generated@@86 $generated@@87 $generated@@89 $generated@@92 $generated@@93)))
 :weight 0
)) (forall (($generated@@94 T@T) ($generated@@95 T@T) ($generated@@96 T@T) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@100 $generated@@102) (= ($generated@@75 $generated@@94 $generated@@95 $generated@@96 ($generated@@77 $generated@@94 $generated@@95 $generated@@96 $generated@@98 $generated@@99 $generated@@100 $generated@@97) $generated@@101 $generated@@102) ($generated@@75 $generated@@94 $generated@@95 $generated@@96 $generated@@98 $generated@@101 $generated@@102)))
 :weight 0
)))))
(assert (forall (($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 Bool) ($generated@@107 T@U) ($generated@@108 T@U) ) (! (= ($generated@@7 ($generated@@75 $generated@@23 $generated@@21 $generated@@3 ($generated@@76 $generated@@103 $generated@@104 $generated@@105 $generated@@106) $generated@@107 $generated@@108))  (=> (and (or (not (= $generated@@107 $generated@@103)) (not true)) ($generated@@7 ($generated@@25 $generated@@3 ($generated@@20 $generated@@21 $generated@@22 ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@104 $generated@@107) $generated@@105)))) $generated@@106))
 :pattern ( ($generated@@75 $generated@@23 $generated@@21 $generated@@3 ($generated@@76 $generated@@103 $generated@@104 $generated@@105 $generated@@106) $generated@@107 $generated@@108))
)))
(assert (forall (($generated@@109 Int) ) (! (= ($generated@@54 $generated@@4 ($generated@@8 ($generated@@49 $generated@@109))) ($generated@@51 $generated@@22 ($generated@@54 $generated@@4 ($generated@@8 $generated@@109))))
 :pattern ( ($generated@@54 $generated@@4 ($generated@@8 ($generated@@49 $generated@@109))))
)))
(assert (forall (($generated@@110 T@U) ($generated@@111 T@T) ) (! (= ($generated@@54 $generated@@111 ($generated@@51 $generated@@111 $generated@@110)) ($generated@@51 $generated@@22 ($generated@@54 $generated@@111 $generated@@110)))
 :pattern ( ($generated@@54 $generated@@111 ($generated@@51 $generated@@111 $generated@@110)))
)))
(assert (forall (($generated@@112 T@U) ($generated@@113 T@U) ) (! ($generated@@62 $generated@@4 $generated@@113 $generated $generated@@112)
 :pattern ( ($generated@@62 $generated@@4 $generated@@113 $generated $generated@@112))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@114 () Int)
(declare-fun $generated@@115 () T@U)
(declare-fun $generated@@116 () Int)
(declare-fun $generated@@117 () Int)
(declare-fun $generated@@118 () Int)
(declare-fun $generated@@119 () Int)
(declare-fun $generated@@120 () Bool)
(declare-fun $generated@@121 () T@U)
(declare-fun $generated@@122 () T@U)
(declare-fun $generated@@123 () Int)
(declare-fun $generated@@124 (T@U) Bool)
(declare-fun $generated@@125 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 11) (let (($generated@@126  (=> ($generated@@62 $generated@@4 ($generated@@8 $generated@@114) $generated $generated@@115) (=> (and ($generated@@62 $generated@@4 ($generated@@8 $generated@@116) $generated $generated@@115) ($generated@@59 $generated@@114 $generated@@116)) (=> (and (and ($generated@@59 $generated@@114 $generated@@116) (= (ControlFlow 0 4) (- 0 3))) ($generated@@59 $generated@@114 $generated@@116)) (or ($generated@@58 $generated@@114 $generated@@116) (<= $generated@@114 $generated@@116)))))))
(let (($generated@@127  (=> (< $generated@@117 $generated@@116) (=> (and (and (= $generated@@118 (- $generated@@116 $generated@@117)) (= $generated@@119 (+ $generated@@117 1))) (and (= $generated@@114 $generated@@119) (= (ControlFlow 0 6) 4))) $generated@@126))))
(let (($generated@@128  (=> (<= $generated@@116 $generated@@117) (=> (and (= $generated@@114 $generated@@117) (= (ControlFlow 0 5) 4)) $generated@@126))))
(let (($generated@@129  (=> $generated@@120 (and (=> (= (ControlFlow 0 7) 5) $generated@@128) (=> (= (ControlFlow 0 7) 6) $generated@@127)))))
(let (($generated@@130 true))
(let (($generated@@131  (and (=> (= (ControlFlow 0 8) 2) $generated@@130) (=> (= (ControlFlow 0 8) 7) $generated@@129))))
(let (($generated@@132 true))
(let (($generated@@133  (=> (= $generated@@121 ($generated@@76 $generated@@122 $generated@@115 $generated@@1 false)) (=> (and (= $generated@@123 (- $generated@@116 $generated@@117)) (=> $generated@@120 ($generated@@59 $generated@@117 $generated@@116))) (and (=> (= (ControlFlow 0 9) (- 0 10)) (=> $generated@@120 (=> ($generated@@59 $generated@@117 $generated@@116) (or ($generated@@58 $generated@@117 $generated@@116) (<= $generated@@117 $generated@@116))))) (=> (=> $generated@@120 (=> ($generated@@59 $generated@@117 $generated@@116) (or ($generated@@58 $generated@@117 $generated@@116) (<= $generated@@117 $generated@@116)))) (=> (=> $generated@@120 (and ($generated@@59 $generated@@117 $generated@@116) (and ($generated@@58 $generated@@117 $generated@@116) (<= $generated@@117 $generated@@116)))) (=> (and (and (forall (($generated@@134 T@U) ) (!  (=> (and (or (not (= $generated@@134 $generated@@122)) (not true)) ($generated@@7 ($generated@@25 $generated@@3 ($generated@@20 $generated@@21 $generated@@22 ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@115 $generated@@134) $generated@@1)))) (= ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@115 $generated@@134) ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@115 $generated@@134)))
 :pattern ( ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@115 $generated@@134))
)) ($generated@@19 $generated@@115 $generated@@115)) (and (forall (($generated@@135 T@U) ($generated@@136 T@U) ) (!  (=> (and (or (not (= $generated@@135 $generated@@122)) (not true)) ($generated@@7 ($generated@@25 $generated@@3 ($generated@@20 $generated@@21 $generated@@22 ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@115 $generated@@135) $generated@@1)))) (or (= ($generated@@20 $generated@@21 $generated@@22 ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@115 $generated@@135) $generated@@136) ($generated@@20 $generated@@21 $generated@@22 ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@115 $generated@@135) $generated@@136)) ($generated@@7 ($generated@@75 $generated@@23 $generated@@21 $generated@@3 $generated@@121 $generated@@135 $generated@@136))))
 :pattern ( ($generated@@20 $generated@@21 $generated@@22 ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@115 $generated@@135) $generated@@136))
)) (<= (- $generated@@116 $generated@@117) $generated@@123))) (and (=> (= (ControlFlow 0 9) 1) $generated@@132) (=> (= (ControlFlow 0 9) 8) $generated@@131))))))))))
(let (($generated@@137  (=> (and (and (and ($generated@@124 $generated@@115) ($generated@@125 $generated@@115)) (<= ($generated@@49 0) $generated@@116)) (and (= 1 $generated@@57) (= (ControlFlow 0 11) 9))) $generated@@133)))
$generated@@137))))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 9) (- 10))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
