(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 (T@T) Int)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 (Bool) T@U)
(declare-fun $generated@@11 (T@U) Bool)
(declare-fun $generated@@12 (Int) T@U)
(declare-fun $generated@@13 (T@U) Int)
(declare-fun $generated@@14 (Real) T@U)
(declare-fun $generated@@15 (T@U) Real)
(declare-fun $generated@@22 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@23 () T@U)
(declare-fun $generated@@26 (T@U) T@U)
(declare-fun $generated@@27 () T@U)
(declare-fun $generated@@28 (T@T T@U T@U) Bool)
(declare-fun $generated@@29 () T@T)
(declare-fun $generated@@30 () T@U)
(declare-fun $generated@@31 (Int) Int)
(declare-fun $generated@@33 (T@T T@U) T@U)
(declare-fun $generated@@36 (T@U) Bool)
(declare-fun $generated@@38 (T@U) Bool)
(declare-fun $generated@@40 (T@T T@U) T@U)
(declare-fun $generated@@41 (T@T T@U) T@U)
(declare-fun $generated@@45 (T@U) T@U)
(declare-fun $generated@@50 (T@U) Bool)
(declare-fun $generated@@52 () Int)
(declare-fun $generated@@53 (T@U Int T@U Int) Bool)
(declare-fun $generated@@54 (T@U) T@U)
(declare-fun $generated@@55 (Int T@U Int) Bool)
(declare-fun $generated@@56 (T@U) T@U)
(declare-fun $generated@@86 (T@U) Int)
(declare-fun $generated@@88 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@89 () T@T)
(declare-fun $generated@@90 () T@T)
(declare-fun $generated@@91 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@92 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@93 () T@T)
(declare-fun $generated@@94 (T@T T@T) T@T)
(declare-fun $generated@@95 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@96 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@97 (T@T) T@T)
(declare-fun $generated@@98 (T@T) T@T)
(declare-fun $generated@@147 (T@U) Bool)
(declare-fun $generated@@150 (T@U) T@U)
(declare-fun $generated@@151 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@6 $generated@@7) 0) (= ($generated@@6 $generated@@8) 1)) (= ($generated@@6 $generated@@9) 2)) (forall (($generated@@16 Bool) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Int) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Real) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5)
)
(assert (forall (($generated@@24 T@U) ($generated@@25 T@U) ) (! ($generated@@22 $generated@@8 $generated@@24 $generated@@23 $generated@@25)
 :pattern ( ($generated@@22 $generated@@8 $generated@@24 $generated@@23 $generated@@25))
)))
(assert (= ($generated@@26 $generated@@27) $generated@@2))
(assert (= ($generated@@6 $generated@@29) 3))
(assert ($generated@@28 $generated@@29 $generated@@27 $generated@@30))
(assert (forall (($generated@@32 Int) ) (! (= ($generated@@31 $generated@@32) $generated@@32)
 :pattern ( ($generated@@31 $generated@@32))
)))
(assert (forall (($generated@@34 T@U) ($generated@@35 T@T) ) (! (= ($generated@@33 $generated@@35 $generated@@34) $generated@@34)
 :pattern ( ($generated@@33 $generated@@35 $generated@@34))
)))
(assert (forall (($generated@@37 T@U) ) (! (= ($generated@@36 $generated@@37) (= ($generated@@26 $generated@@37) $generated@@2))
 :pattern ( ($generated@@36 $generated@@37))
)))
(assert (forall (($generated@@39 T@U) ) (! (= ($generated@@38 $generated@@39) (= ($generated@@26 $generated@@39) $generated@@3))
 :pattern ( ($generated@@38 $generated@@39))
)))
(assert (forall (($generated@@42 T@U) ($generated@@43 T@T) ) (! (= ($generated@@41 $generated@@43 ($generated@@40 $generated@@43 $generated@@42)) $generated@@42)
 :pattern ( ($generated@@40 $generated@@43 $generated@@42))
)))
(assert (forall (($generated@@44 T@U) ) (!  (=> ($generated@@36 $generated@@44) (= $generated@@44 $generated@@27))
 :pattern ( ($generated@@36 $generated@@44))
)))
(assert (forall (($generated@@46 T@U) ) (!  (=> ($generated@@38 $generated@@46) (exists (($generated@@47 T@U) ) (= $generated@@46 ($generated@@45 $generated@@47))))
 :pattern ( ($generated@@38 $generated@@46))
)))
(assert (forall (($generated@@48 T@U) ) (! (= ($generated@@28 $generated@@8 $generated@@48 $generated@@23) (<= ($generated@@31 0) ($generated@@13 $generated@@48)))
 :pattern ( ($generated@@28 $generated@@8 $generated@@48 $generated@@23))
)))
(assert (forall (($generated@@49 T@U) ) (! (= ($generated@@28 $generated@@29 ($generated@@45 $generated@@49) $generated@@30) ($generated@@28 $generated@@29 $generated@@49 $generated@@30))
 :pattern ( ($generated@@28 $generated@@29 ($generated@@45 $generated@@49) $generated@@30))
)))
(assert (forall (($generated@@51 T@U) ) (!  (=> ($generated@@50 $generated@@51) (or ($generated@@36 $generated@@51) ($generated@@38 $generated@@51)))
 :pattern ( ($generated@@50 $generated@@51))
)))
(assert  (=> (<= 1 $generated@@52) (forall (($generated@@57 T@U) ($generated@@58 Int) ($generated@@59 T@U) ($generated@@60 Int) ) (!  (=> (or ($generated@@55 $generated@@58 $generated@@59 $generated@@60) (and (< 1 $generated@@52) (and (and (<= ($generated@@31 0) $generated@@58) ($generated@@28 $generated@@29 $generated@@59 $generated@@30)) (<= ($generated@@31 0) $generated@@60)))) (and (=> (not ($generated@@36 $generated@@59)) (let (($generated@@61 ($generated@@56 $generated@@59)))
 (=> (> $generated@@58 0) (forall (($generated@@62 Int) ($generated@@63 Int) ) (!  (=> (and (<= ($generated@@31 0) $generated@@62) (<= ($generated@@31 0) $generated@@63)) (=> (= $generated@@63 (- $generated@@58 1)) ($generated@@55 $generated@@63 $generated@@61 $generated@@62)))
 :pattern ( ($generated@@53 $generated@@57 $generated@@63 $generated@@61 $generated@@62))
))))) (= ($generated@@53 ($generated@@54 $generated@@57) $generated@@58 $generated@@59 $generated@@60) (ite ($generated@@36 $generated@@59) true (let (($generated@@64 ($generated@@56 $generated@@59)))
 (and (> $generated@@58 0) (exists (($generated@@65 Int) ($generated@@66 Int) ) (!  (and (and (and (<= ($generated@@31 0) $generated@@65) (<= ($generated@@31 0) $generated@@66)) (= $generated@@66 (- $generated@@58 1))) ($generated@@53 $generated@@57 $generated@@66 $generated@@64 $generated@@65))
 :pattern ( ($generated@@53 $generated@@57 $generated@@66 $generated@@64 $generated@@65))
))))))))
 :pattern ( ($generated@@53 ($generated@@54 $generated@@57) $generated@@58 $generated@@59 $generated@@60))
))))
(assert (forall (($generated@@67 T@U) ) (!  (=> ($generated@@28 $generated@@29 $generated@@67 $generated@@30) (or ($generated@@36 $generated@@67) ($generated@@38 $generated@@67)))
 :pattern ( ($generated@@38 $generated@@67) ($generated@@28 $generated@@29 $generated@@67 $generated@@30))
 :pattern ( ($generated@@36 $generated@@67) ($generated@@28 $generated@@29 $generated@@67 $generated@@30))
)))
(assert (forall (($generated@@68 T@U) ($generated@@69 Int) ($generated@@70 T@U) ($generated@@71 Int) ) (! (= ($generated@@53 ($generated@@54 $generated@@68) $generated@@69 $generated@@70 $generated@@71) ($generated@@53 $generated@@68 $generated@@69 $generated@@70 $generated@@71))
 :pattern ( ($generated@@53 ($generated@@54 $generated@@68) $generated@@69 $generated@@70 $generated@@71))
)))
(assert (forall (($generated@@72 T@U) ) (! (= ($generated@@26 ($generated@@45 $generated@@72)) $generated@@3)
 :pattern ( ($generated@@45 $generated@@72))
)))
(assert (forall (($generated@@73 T@U) ) (! (= ($generated@@56 ($generated@@45 $generated@@73)) $generated@@73)
 :pattern ( ($generated@@45 $generated@@73))
)))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@T) ) (! (= ($generated@@40 $generated@@75 ($generated@@41 $generated@@75 $generated@@74)) $generated@@74)
 :pattern ( ($generated@@41 $generated@@75 $generated@@74))
)))
(assert  (=> (<= 1 $generated@@52) (forall (($generated@@76 T@U) ($generated@@77 Int) ($generated@@78 T@U) ($generated@@79 Int) ) (!  (=> (or ($generated@@55 ($generated@@31 $generated@@77) ($generated@@33 $generated@@29 $generated@@78) ($generated@@31 $generated@@79)) (and (< 1 $generated@@52) (and (and (<= ($generated@@31 0) $generated@@77) ($generated@@28 $generated@@29 $generated@@78 $generated@@30)) (<= ($generated@@31 0) $generated@@79)))) (and (=> (not ($generated@@11 ($generated@@33 $generated@@7 ($generated@@10 ($generated@@36 ($generated@@33 $generated@@29 $generated@@78)))))) (let (($generated@@80 ($generated@@33 $generated@@29 ($generated@@56 ($generated@@33 $generated@@29 $generated@@78)))))
 (=> ($generated@@11 ($generated@@33 $generated@@7 ($generated@@10 (> $generated@@77 0)))) (forall (($generated@@81 Int) ($generated@@82 Int) ) (!  (=> (and (<= ($generated@@31 0) $generated@@81) (<= ($generated@@31 0) $generated@@82)) (=> (= $generated@@82 ($generated@@31 (- $generated@@77 1))) ($generated@@55 $generated@@82 $generated@@80 $generated@@81)))
 :pattern ( ($generated@@53 ($generated@@54 $generated@@76) $generated@@82 $generated@@80 $generated@@81))
))))) (= ($generated@@53 ($generated@@54 $generated@@76) ($generated@@31 $generated@@77) ($generated@@33 $generated@@29 $generated@@78) ($generated@@31 $generated@@79)) (ite ($generated@@36 ($generated@@33 $generated@@29 $generated@@78)) true (let (($generated@@83 ($generated@@33 $generated@@29 ($generated@@56 ($generated@@33 $generated@@29 $generated@@78)))))
 (and (> $generated@@77 0) (exists (($generated@@84 Int) ($generated@@85 Int) ) (!  (and (and (and (<= ($generated@@31 0) $generated@@84) (<= ($generated@@31 0) $generated@@85)) (= $generated@@85 ($generated@@31 (- $generated@@77 1)))) ($generated@@53 ($generated@@54 $generated@@76) $generated@@85 $generated@@83 $generated@@84))
 :pattern ( ($generated@@53 ($generated@@54 $generated@@76) $generated@@85 $generated@@83 $generated@@84))
))))))))
 :weight 3
 :pattern ( ($generated@@53 ($generated@@54 $generated@@76) ($generated@@31 $generated@@77) ($generated@@33 $generated@@29 $generated@@78) ($generated@@31 $generated@@79)))
))))
(assert (forall (($generated@@87 T@U) ) (! (< ($generated@@86 $generated@@87) ($generated@@86 ($generated@@45 $generated@@87)))
 :pattern ( ($generated@@45 $generated@@87))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@99 T@T) ($generated@@100 T@T) ($generated@@101 T@T) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ) (! (= ($generated@@88 $generated@@99 $generated@@100 $generated@@101 ($generated@@95 $generated@@99 $generated@@100 $generated@@101 $generated@@103 $generated@@104 $generated@@105 $generated@@102) $generated@@104 $generated@@105) $generated@@102)
 :weight 0
)) (and (forall (($generated@@106 T@T) ($generated@@107 T@T) ($generated@@108 T@T) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ) (!  (or (= $generated@@111 $generated@@113) (= ($generated@@88 $generated@@106 $generated@@107 $generated@@108 ($generated@@95 $generated@@106 $generated@@107 $generated@@108 $generated@@110 $generated@@111 $generated@@112 $generated@@109) $generated@@113 $generated@@114) ($generated@@88 $generated@@106 $generated@@107 $generated@@108 $generated@@110 $generated@@113 $generated@@114)))
 :weight 0
)) (forall (($generated@@115 T@T) ($generated@@116 T@T) ($generated@@117 T@T) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ) (!  (or (= $generated@@121 $generated@@123) (= ($generated@@88 $generated@@115 $generated@@116 $generated@@117 ($generated@@95 $generated@@115 $generated@@116 $generated@@117 $generated@@119 $generated@@120 $generated@@121 $generated@@118) $generated@@122 $generated@@123) ($generated@@88 $generated@@115 $generated@@116 $generated@@117 $generated@@119 $generated@@122 $generated@@123)))
 :weight 0
)))) (= ($generated@@6 $generated@@89) 4)) (= ($generated@@6 $generated@@90) 5)) (forall (($generated@@124 T@T) ($generated@@125 T@T) ($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ) (! (= ($generated@@92 $generated@@124 $generated@@125 ($generated@@96 $generated@@124 $generated@@125 $generated@@127 $generated@@128 $generated@@126) $generated@@128) $generated@@126)
 :weight 0
))) (forall (($generated@@129 T@T) ($generated@@130 T@T) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ($generated@@134 T@U) ) (!  (or (= $generated@@133 $generated@@134) (= ($generated@@92 $generated@@129 $generated@@130 ($generated@@96 $generated@@129 $generated@@130 $generated@@132 $generated@@133 $generated@@131) $generated@@134) ($generated@@92 $generated@@129 $generated@@130 $generated@@132 $generated@@134)))
 :weight 0
))) (= ($generated@@6 $generated@@93) 6)) (forall (($generated@@135 T@T) ($generated@@136 T@T) ) (= ($generated@@6 ($generated@@94 $generated@@135 $generated@@136)) 7))) (forall (($generated@@137 T@T) ($generated@@138 T@T) ) (! (= ($generated@@97 ($generated@@94 $generated@@137 $generated@@138)) $generated@@137)
 :pattern ( ($generated@@94 $generated@@137 $generated@@138))
))) (forall (($generated@@139 T@T) ($generated@@140 T@T) ) (! (= ($generated@@98 ($generated@@94 $generated@@139 $generated@@140)) $generated@@140)
 :pattern ( ($generated@@94 $generated@@139 $generated@@140))
))))
(assert (forall (($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 Bool) ($generated@@145 T@U) ($generated@@146 T@U) ) (! (= ($generated@@11 ($generated@@88 $generated@@89 $generated@@90 $generated@@7 ($generated@@91 $generated@@141 $generated@@142 $generated@@143 $generated@@144) $generated@@145 $generated@@146))  (=> (and (or (not (= $generated@@145 $generated@@141)) (not true)) ($generated@@11 ($generated@@40 $generated@@7 ($generated@@92 $generated@@90 $generated@@93 ($generated@@92 $generated@@89 ($generated@@94 $generated@@90 $generated@@93) $generated@@142 $generated@@145) $generated@@143)))) $generated@@144))
 :pattern ( ($generated@@88 $generated@@89 $generated@@90 $generated@@7 ($generated@@91 $generated@@141 $generated@@142 $generated@@143 $generated@@144) $generated@@145 $generated@@146))
)))
(assert (forall (($generated@@148 T@U) ($generated@@149 T@U) ) (!  (=> (and ($generated@@147 $generated@@149) ($generated@@28 $generated@@29 $generated@@148 $generated@@30)) ($generated@@22 $generated@@29 $generated@@148 $generated@@30 $generated@@149))
 :pattern ( ($generated@@22 $generated@@29 $generated@@148 $generated@@30 $generated@@149))
)))
(assert (= ($generated@@150 $generated@@23) $generated@@0))
(assert (= ($generated@@151 $generated@@23) $generated@@4))
(assert (= ($generated@@150 $generated@@30) $generated@@1))
(assert (= ($generated@@151 $generated@@30) $generated@@5))
(assert (= $generated@@27 ($generated@@33 $generated@@29 $generated@@27)))
(assert (forall (($generated@@152 T@U) ($generated@@153 T@U) ) (!  (=> (and ($generated@@147 $generated@@153) (and ($generated@@38 $generated@@152) ($generated@@22 $generated@@29 $generated@@152 $generated@@30 $generated@@153))) ($generated@@22 $generated@@29 ($generated@@56 $generated@@152) $generated@@30 $generated@@153))
 :pattern ( ($generated@@22 $generated@@29 ($generated@@56 $generated@@152) $generated@@30 $generated@@153))
)))
(assert (forall (($generated@@154 Int) ) (! (= ($generated@@41 $generated@@8 ($generated@@12 ($generated@@31 $generated@@154))) ($generated@@33 $generated@@93 ($generated@@41 $generated@@8 ($generated@@12 $generated@@154))))
 :pattern ( ($generated@@41 $generated@@8 ($generated@@12 ($generated@@31 $generated@@154))))
)))
(assert (forall (($generated@@155 T@U) ) (! (= ($generated@@45 ($generated@@33 $generated@@29 $generated@@155)) ($generated@@33 $generated@@29 ($generated@@45 $generated@@155)))
 :pattern ( ($generated@@45 ($generated@@33 $generated@@29 $generated@@155)))
)))
(assert (forall (($generated@@156 T@U) ($generated@@157 T@T) ) (! (= ($generated@@41 $generated@@157 ($generated@@33 $generated@@157 $generated@@156)) ($generated@@33 $generated@@93 ($generated@@41 $generated@@157 $generated@@156)))
 :pattern ( ($generated@@41 $generated@@157 ($generated@@33 $generated@@157 $generated@@156)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@158 () T@U)
(declare-fun $generated@@159 () T@U)
(declare-fun $generated@@160 () T@U)
(declare-fun $generated@@161 () T@U)
(declare-fun $generated@@162 () Int)
(declare-fun $generated@@163 () Int)
(declare-fun $generated@@164 () T@U)
(declare-fun $generated@@165 () T@U)
(declare-fun $generated@@166 (T@U) Bool)
(declare-fun $generated@@167 () Int)
(declare-fun $generated@@168 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@169  (=> (= $generated@@158 ($generated@@91 $generated@@159 $generated@@160 $generated false)) (=> (and ($generated@@38 $generated@@161) ($generated@@22 $generated@@8 ($generated@@12 $generated@@162) $generated@@23 $generated@@160)) (=> (and (and (and (and ($generated@@22 $generated@@29 $generated@@161 $generated@@30 $generated@@160) ($generated@@22 $generated@@8 ($generated@@12 $generated@@163) $generated@@23 $generated@@160)) (and ($generated@@55 $generated@@162 $generated@@161 $generated@@163) ($generated@@53 ($generated@@54 $generated@@164) $generated@@162 $generated@@161 $generated@@163))) (and (and ($generated@@147 $generated@@165) ($generated@@166 $generated@@165)) (= $generated@@160 $generated@@165))) (and (and (and (<= ($generated@@31 0) $generated@@167) (<= ($generated@@31 0) $generated@@168)) (= $generated@@168 (- $generated@@162 1))) (and ($generated@@22 $generated@@8 ($generated@@12 $generated@@168) $generated@@23 $generated@@165) (= (ControlFlow 0 2) (- 0 1))))) ($generated@@38 $generated@@161))))))
(let (($generated@@170  (=> (and (and ($generated@@147 $generated@@160) ($generated@@166 $generated@@160)) (<= ($generated@@31 0) $generated@@162)) (=> (and (and (and (and ($generated@@28 $generated@@29 $generated@@161 $generated@@30) ($generated@@22 $generated@@29 $generated@@161 $generated@@30 $generated@@160)) ($generated@@50 $generated@@161)) (<= ($generated@@31 0) $generated@@163)) (and (= 2 $generated@@52) (= (ControlFlow 0 3) 2))) $generated@@169))))
$generated@@170)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
