(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (Bool) T@U)
(declare-fun $generated@@7 (T@U) Bool)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun $generated@@9 (T@U) Int)
(declare-fun $generated@@10 (Real) T@U)
(declare-fun $generated@@11 (T@U) Real)
(declare-fun $generated@@18 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@19 () T@U)
(declare-fun $generated@@22 () Int)
(declare-fun $generated@@23 (T@U Int) Int)
(declare-fun $generated@@24 (Int) Bool)
(declare-fun $generated@@25 (Int) Int)
(declare-fun $generated@@28 (T@U) T@U)
(declare-fun $generated@@32 (T@T T@U) T@U)
(declare-fun $generated@@35 (T@T T@U) T@U)
(declare-fun $generated@@36 (T@T T@U) T@U)
(declare-fun $generated@@39 (T@T T@U T@U) Bool)
(declare-fun $generated@@47 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@48 () T@T)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@51 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@52 () T@T)
(declare-fun $generated@@53 (T@T T@T) T@T)
(declare-fun $generated@@54 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@55 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@56 (T@T) T@T)
(declare-fun $generated@@57 (T@T) T@T)
(declare-fun $generated@@106 (T@U) T@U)
(declare-fun $generated@@107 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@4) 1)) (= ($generated@@2 $generated@@5) 2)) (forall (($generated@@12 Bool) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Int) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Real) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))))
(assert (distinct $generated $generated@@0 $generated@@1)
)
(assert (forall (($generated@@20 T@U) ($generated@@21 T@U) ) (! ($generated@@18 $generated@@4 $generated@@20 $generated@@19 $generated@@21)
 :pattern ( ($generated@@18 $generated@@4 $generated@@20 $generated@@19 $generated@@21))
)))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@26 T@U) ($generated@@27 Int) ) (!  (=> (or ($generated@@24 $generated@@27) (and (< 0 $generated@@22) (<= ($generated@@25 0) $generated@@27))) (<= ($generated@@25 0) ($generated@@23 $generated@@26 $generated@@27)))
 :pattern ( ($generated@@23 $generated@@26 $generated@@27))
))))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@29 T@U) ($generated@@30 Int) ) (!  (=> (or ($generated@@24 $generated@@30) (and (< 0 $generated@@22) (<= ($generated@@25 0) $generated@@30))) (and ($generated@@24 $generated@@30) (= ($generated@@23 ($generated@@28 $generated@@29) $generated@@30) ($generated@@23 $generated@@29 $generated@@30))))
 :pattern ( ($generated@@23 ($generated@@28 $generated@@29) $generated@@30))
))))
(assert (forall (($generated@@31 Int) ) (! (= ($generated@@25 $generated@@31) $generated@@31)
 :pattern ( ($generated@@25 $generated@@31))
)))
(assert (forall (($generated@@33 T@U) ($generated@@34 T@T) ) (! (= ($generated@@32 $generated@@34 $generated@@33) $generated@@33)
 :pattern ( ($generated@@32 $generated@@34 $generated@@33))
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@T) ) (! (= ($generated@@36 $generated@@38 ($generated@@35 $generated@@38 $generated@@37)) $generated@@37)
 :pattern ( ($generated@@35 $generated@@38 $generated@@37))
)))
(assert (forall (($generated@@40 T@U) ) (! (= ($generated@@39 $generated@@4 $generated@@40 $generated@@19) (<= ($generated@@25 0) ($generated@@9 $generated@@40)))
 :pattern ( ($generated@@39 $generated@@4 $generated@@40 $generated@@19))
)))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@41 T@U) ($generated@@42 Int) ) (!  (=> (or ($generated@@24 ($generated@@25 $generated@@42)) (and (< 0 $generated@@22) (<= ($generated@@25 0) $generated@@42))) (and ($generated@@24 ($generated@@25 $generated@@42)) (= ($generated@@23 ($generated@@28 $generated@@41) ($generated@@25 $generated@@42)) ($generated@@25 ($generated@@23 ($generated@@28 $generated@@41) ($generated@@25 $generated@@42))))))
 :weight 3
 :pattern ( ($generated@@23 ($generated@@28 $generated@@41) ($generated@@25 $generated@@42)))
))))
(assert (forall (($generated@@43 T@U) ($generated@@44 T@T) ) (! (= ($generated@@35 $generated@@44 ($generated@@36 $generated@@44 $generated@@43)) $generated@@43)
 :pattern ( ($generated@@36 $generated@@44 $generated@@43))
)))
(assert (forall (($generated@@45 T@U) ($generated@@46 Int) ) (! (= ($generated@@23 ($generated@@28 $generated@@45) $generated@@46) ($generated@@23 $generated@@45 $generated@@46))
 :pattern ( ($generated@@23 ($generated@@28 $generated@@45) $generated@@46))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@58 T@T) ($generated@@59 T@T) ($generated@@60 T@T) ($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@U) ($generated@@64 T@U) ) (! (= ($generated@@47 $generated@@58 $generated@@59 $generated@@60 ($generated@@54 $generated@@58 $generated@@59 $generated@@60 $generated@@62 $generated@@63 $generated@@64 $generated@@61) $generated@@63 $generated@@64) $generated@@61)
 :weight 0
)) (and (forall (($generated@@65 T@T) ($generated@@66 T@T) ($generated@@67 T@T) ($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ) (!  (or (= $generated@@70 $generated@@72) (= ($generated@@47 $generated@@65 $generated@@66 $generated@@67 ($generated@@54 $generated@@65 $generated@@66 $generated@@67 $generated@@69 $generated@@70 $generated@@71 $generated@@68) $generated@@72 $generated@@73) ($generated@@47 $generated@@65 $generated@@66 $generated@@67 $generated@@69 $generated@@72 $generated@@73)))
 :weight 0
)) (forall (($generated@@74 T@T) ($generated@@75 T@T) ($generated@@76 T@T) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (or (= $generated@@80 $generated@@82) (= ($generated@@47 $generated@@74 $generated@@75 $generated@@76 ($generated@@54 $generated@@74 $generated@@75 $generated@@76 $generated@@78 $generated@@79 $generated@@80 $generated@@77) $generated@@81 $generated@@82) ($generated@@47 $generated@@74 $generated@@75 $generated@@76 $generated@@78 $generated@@81 $generated@@82)))
 :weight 0
)))) (= ($generated@@2 $generated@@48) 3)) (= ($generated@@2 $generated@@49) 4)) (forall (($generated@@83 T@T) ($generated@@84 T@T) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ) (! (= ($generated@@51 $generated@@83 $generated@@84 ($generated@@55 $generated@@83 $generated@@84 $generated@@86 $generated@@87 $generated@@85) $generated@@87) $generated@@85)
 :weight 0
))) (forall (($generated@@88 T@T) ($generated@@89 T@T) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ) (!  (or (= $generated@@92 $generated@@93) (= ($generated@@51 $generated@@88 $generated@@89 ($generated@@55 $generated@@88 $generated@@89 $generated@@91 $generated@@92 $generated@@90) $generated@@93) ($generated@@51 $generated@@88 $generated@@89 $generated@@91 $generated@@93)))
 :weight 0
))) (= ($generated@@2 $generated@@52) 5)) (forall (($generated@@94 T@T) ($generated@@95 T@T) ) (= ($generated@@2 ($generated@@53 $generated@@94 $generated@@95)) 6))) (forall (($generated@@96 T@T) ($generated@@97 T@T) ) (! (= ($generated@@56 ($generated@@53 $generated@@96 $generated@@97)) $generated@@96)
 :pattern ( ($generated@@53 $generated@@96 $generated@@97))
))) (forall (($generated@@98 T@T) ($generated@@99 T@T) ) (! (= ($generated@@57 ($generated@@53 $generated@@98 $generated@@99)) $generated@@99)
 :pattern ( ($generated@@53 $generated@@98 $generated@@99))
))))
(assert (forall (($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 Bool) ($generated@@104 T@U) ($generated@@105 T@U) ) (! (= ($generated@@7 ($generated@@47 $generated@@48 $generated@@49 $generated@@3 ($generated@@50 $generated@@100 $generated@@101 $generated@@102 $generated@@103) $generated@@104 $generated@@105))  (=> (and (or (not (= $generated@@104 $generated@@100)) (not true)) ($generated@@7 ($generated@@35 $generated@@3 ($generated@@51 $generated@@49 $generated@@52 ($generated@@51 $generated@@48 ($generated@@53 $generated@@49 $generated@@52) $generated@@101 $generated@@104) $generated@@102)))) $generated@@103))
 :pattern ( ($generated@@47 $generated@@48 $generated@@49 $generated@@3 ($generated@@50 $generated@@100 $generated@@101 $generated@@102 $generated@@103) $generated@@104 $generated@@105))
)))
(assert (= ($generated@@106 $generated@@19) $generated@@0))
(assert (= ($generated@@107 $generated@@19) $generated@@1))
(assert (forall (($generated@@108 Int) ) (! (= ($generated@@36 $generated@@4 ($generated@@8 ($generated@@25 $generated@@108))) ($generated@@32 $generated@@52 ($generated@@36 $generated@@4 ($generated@@8 $generated@@108))))
 :pattern ( ($generated@@36 $generated@@4 ($generated@@8 ($generated@@25 $generated@@108))))
)))
(assert (forall (($generated@@109 T@U) ($generated@@110 T@T) ) (! (= ($generated@@36 $generated@@110 ($generated@@32 $generated@@110 $generated@@109)) ($generated@@32 $generated@@52 ($generated@@36 $generated@@110 $generated@@109)))
 :pattern ( ($generated@@36 $generated@@110 ($generated@@32 $generated@@110 $generated@@109)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@111 () Int)
(declare-fun $generated@@112 () T@U)
(declare-fun $generated@@113 () T@U)
(declare-fun $generated@@114 () T@U)
(declare-fun $generated@@115 (T@U) Bool)
(declare-fun $generated@@116 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 6) (let (($generated@@117  (=> ($generated@@18 $generated@@4 ($generated@@8 $generated@@111) $generated@@19 $generated@@112) (and (=> (= (ControlFlow 0 3) (- 0 4)) (or (<= 0 $generated@@111) (= $generated@@111 $generated@@111))) (=> (or (<= 0 $generated@@111) (= $generated@@111 $generated@@111)) (=> (= (ControlFlow 0 3) (- 0 2)) (< $generated@@111 $generated@@111)))))))
(let (($generated@@118 true))
(let (($generated@@119  (=> (= $generated@@113 ($generated@@50 $generated@@114 $generated@@112 $generated false)) (and (=> (= (ControlFlow 0 5) 1) $generated@@118) (=> (= (ControlFlow 0 5) 3) $generated@@117)))))
(let (($generated@@120  (=> (and (and (and ($generated@@115 $generated@@112) ($generated@@116 $generated@@112)) (<= ($generated@@25 0) $generated@@111)) (and (= 0 $generated@@22) (= (ControlFlow 0 6) 5))) $generated@@119)))
$generated@@120)))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 3) (- 2))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
