(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (Bool) T@U)
(declare-fun $generated@@7 (T@U) Bool)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun $generated@@9 (T@U) Int)
(declare-fun $generated@@10 (Real) T@U)
(declare-fun $generated@@11 (T@U) Real)
(declare-fun $generated@@18 () Int)
(declare-fun $generated@@19 (T@U T@U T@U T@U) Bool)
(declare-fun $generated@@20 (T@T T@U) T@U)
(declare-fun $generated@@21 () T@T)
(declare-fun $generated@@22 (T@U T@U T@U T@U) Bool)
(declare-fun $generated@@23 (T@U T@U) Bool)
(declare-fun $generated@@24 () T@U)
(declare-fun $generated@@29 (T@U) T@U)
(declare-fun $generated@@32 (T@T T@U) T@U)
(declare-fun $generated@@33 (T@T T@U) T@U)
(declare-fun $generated@@36 (T@U T@U T@U) Bool)
(declare-fun $generated@@37 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@42 (T@U) Bool)
(declare-fun $generated@@43 (T@U) Bool)
(declare-fun $generated@@49 (T@T T@U T@U) Bool)
(declare-fun $generated@@60 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@61 () T@T)
(declare-fun $generated@@62 () T@T)
(declare-fun $generated@@63 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@64 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@65 (T@T T@T) T@T)
(declare-fun $generated@@66 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@67 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@68 (T@T) T@T)
(declare-fun $generated@@69 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@4) 1)) (= ($generated@@2 $generated@@5) 2)) (forall (($generated@@12 Bool) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Int) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Real) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))))
(assert (distinct $generated $generated@@0 $generated@@1)
)
(assert (= ($generated@@2 $generated@@21) 3))
(assert  (=> (<= 0 $generated@@18) (forall (($generated@@25 T@U) ($generated@@26 T@U) ($generated@@27 T@U) ($generated@@28 T@U) ) (!  (=> (or ($generated@@22 ($generated@@20 $generated@@21 $generated@@25) ($generated@@20 $generated@@21 $generated@@26) ($generated@@20 $generated@@21 $generated@@27) ($generated@@20 $generated@@21 $generated@@28)) (and (< 0 $generated@@18) (and (and (and ($generated@@23 $generated@@25 $generated@@24) ($generated@@23 $generated@@26 $generated@@24)) ($generated@@23 $generated@@27 $generated@@24)) ($generated@@23 $generated@@28 $generated@@24)))) (= ($generated@@19 ($generated@@20 $generated@@21 $generated@@25) ($generated@@20 $generated@@21 $generated@@26) ($generated@@20 $generated@@21 $generated@@27) ($generated@@20 $generated@@21 $generated@@28)) ($generated@@7 ($generated@@20 $generated@@3 ($generated@@6 true)))))
 :weight 3
 :pattern ( ($generated@@19 ($generated@@20 $generated@@21 $generated@@25) ($generated@@20 $generated@@21 $generated@@26) ($generated@@20 $generated@@21 $generated@@27) ($generated@@20 $generated@@21 $generated@@28)))
))))
(assert (= ($generated@@29 $generated) $generated@@0))
(assert (forall (($generated@@30 T@U) ($generated@@31 T@T) ) (! (= ($generated@@20 $generated@@31 $generated@@30) $generated@@30)
 :pattern ( ($generated@@20 $generated@@31 $generated@@30))
)))
(assert (forall (($generated@@34 T@U) ($generated@@35 T@T) ) (! (= ($generated@@33 $generated@@35 ($generated@@32 $generated@@35 $generated@@34)) $generated@@34)
 :pattern ( ($generated@@32 $generated@@35 $generated@@34))
)))
(assert (forall (($generated@@38 T@U) ($generated@@39 T@U) ($generated@@40 T@U) ($generated@@41 T@T) ) (! (= ($generated@@36 ($generated@@33 $generated@@41 $generated@@38) $generated@@39 $generated@@40) ($generated@@37 $generated@@41 $generated@@38 $generated@@39 $generated@@40))
 :pattern ( ($generated@@36 ($generated@@33 $generated@@41 $generated@@38) $generated@@39 $generated@@40))
)))
(assert  (=> (<= 0 $generated@@18) (forall (($generated@@44 T@U) ($generated@@45 T@U) ($generated@@46 T@U) ($generated@@47 T@U) ) (!  (=> (or ($generated@@22 $generated@@44 $generated@@45 $generated@@46 $generated@@47) (and (< 0 $generated@@18) (and (and (and ($generated@@23 $generated@@44 $generated@@24) ($generated@@23 $generated@@45 $generated@@24)) ($generated@@23 $generated@@46 $generated@@24)) ($generated@@23 $generated@@47 $generated@@24)))) (forall (($generated@@48 T@U) ) (!  (=> (and (and ($generated@@43 $generated@@48) ($generated@@42 $generated@@48)) (and ($generated@@19 $generated@@44 $generated@@45 $generated@@46 $generated@@47) (and ($generated@@36 $generated@@46 $generated@@24 $generated@@48) ($generated@@36 $generated@@47 $generated@@24 $generated@@48)))) (and ($generated@@36 $generated@@44 $generated@@24 $generated@@48) ($generated@@36 $generated@@45 $generated@@24 $generated@@48)))
 :pattern ( ($generated@@42 $generated@@48))
)))
 :pattern ( ($generated@@19 $generated@@44 $generated@@45 $generated@@46 $generated@@47))
))))
(assert (forall (($generated@@50 T@U) ) (!  (=> ($generated@@23 $generated@@50 $generated) (and (= ($generated@@33 $generated@@3 ($generated@@32 $generated@@3 $generated@@50)) $generated@@50) ($generated@@49 $generated@@3 ($generated@@32 $generated@@3 $generated@@50) $generated)))
 :pattern ( ($generated@@23 $generated@@50 $generated))
)))
(assert (forall (($generated@@51 T@U) ($generated@@52 T@U) ($generated@@53 T@T) ) (! (= ($generated@@23 ($generated@@33 $generated@@53 $generated@@51) $generated@@52) ($generated@@49 $generated@@53 $generated@@51 $generated@@52))
 :pattern ( ($generated@@23 ($generated@@33 $generated@@53 $generated@@51) $generated@@52))
)))
(assert  (=> (<= 0 $generated@@18) (forall (($generated@@54 T@U) ($generated@@55 T@U) ($generated@@56 T@U) ($generated@@57 T@U) ) (!  (=> (or ($generated@@22 $generated@@54 $generated@@55 $generated@@56 $generated@@57) (and (< 0 $generated@@18) (and (and (and ($generated@@23 $generated@@54 $generated@@24) ($generated@@23 $generated@@55 $generated@@24)) ($generated@@23 $generated@@56 $generated@@24)) ($generated@@23 $generated@@57 $generated@@24)))) (= ($generated@@19 $generated@@54 $generated@@55 $generated@@56 $generated@@57) ($generated@@7 ($generated@@20 $generated@@3 ($generated@@6 true)))))
 :pattern ( ($generated@@19 $generated@@54 $generated@@55 $generated@@56 $generated@@57))
))))
(assert (forall (($generated@@58 T@U) ($generated@@59 T@T) ) (! (= ($generated@@32 $generated@@59 ($generated@@33 $generated@@59 $generated@@58)) $generated@@58)
 :pattern ( ($generated@@33 $generated@@59 $generated@@58))
)))
(assert  (and (and (and (and (and (and (and (and (forall (($generated@@70 T@T) ($generated@@71 T@T) ($generated@@72 T@T) ($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@U) ) (! (= ($generated@@60 $generated@@70 $generated@@71 $generated@@72 ($generated@@66 $generated@@70 $generated@@71 $generated@@72 $generated@@74 $generated@@75 $generated@@76 $generated@@73) $generated@@75 $generated@@76) $generated@@73)
 :weight 0
)) (and (forall (($generated@@77 T@T) ($generated@@78 T@T) ($generated@@79 T@T) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ) (!  (or (= $generated@@82 $generated@@84) (= ($generated@@60 $generated@@77 $generated@@78 $generated@@79 ($generated@@66 $generated@@77 $generated@@78 $generated@@79 $generated@@81 $generated@@82 $generated@@83 $generated@@80) $generated@@84 $generated@@85) ($generated@@60 $generated@@77 $generated@@78 $generated@@79 $generated@@81 $generated@@84 $generated@@85)))
 :weight 0
)) (forall (($generated@@86 T@T) ($generated@@87 T@T) ($generated@@88 T@T) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (!  (or (= $generated@@92 $generated@@94) (= ($generated@@60 $generated@@86 $generated@@87 $generated@@88 ($generated@@66 $generated@@86 $generated@@87 $generated@@88 $generated@@90 $generated@@91 $generated@@92 $generated@@89) $generated@@93 $generated@@94) ($generated@@60 $generated@@86 $generated@@87 $generated@@88 $generated@@90 $generated@@93 $generated@@94)))
 :weight 0
)))) (= ($generated@@2 $generated@@61) 4)) (= ($generated@@2 $generated@@62) 5)) (forall (($generated@@95 T@T) ($generated@@96 T@T) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ) (! (= ($generated@@64 $generated@@95 $generated@@96 ($generated@@67 $generated@@95 $generated@@96 $generated@@98 $generated@@99 $generated@@97) $generated@@99) $generated@@97)
 :weight 0
))) (forall (($generated@@100 T@T) ($generated@@101 T@T) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ) (!  (or (= $generated@@104 $generated@@105) (= ($generated@@64 $generated@@100 $generated@@101 ($generated@@67 $generated@@100 $generated@@101 $generated@@103 $generated@@104 $generated@@102) $generated@@105) ($generated@@64 $generated@@100 $generated@@101 $generated@@103 $generated@@105)))
 :weight 0
))) (forall (($generated@@106 T@T) ($generated@@107 T@T) ) (= ($generated@@2 ($generated@@65 $generated@@106 $generated@@107)) 6))) (forall (($generated@@108 T@T) ($generated@@109 T@T) ) (! (= ($generated@@68 ($generated@@65 $generated@@108 $generated@@109)) $generated@@108)
 :pattern ( ($generated@@65 $generated@@108 $generated@@109))
))) (forall (($generated@@110 T@T) ($generated@@111 T@T) ) (! (= ($generated@@69 ($generated@@65 $generated@@110 $generated@@111)) $generated@@111)
 :pattern ( ($generated@@65 $generated@@110 $generated@@111))
))))
(assert (forall (($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 Bool) ($generated@@116 T@U) ($generated@@117 T@U) ) (! (= ($generated@@7 ($generated@@60 $generated@@61 $generated@@62 $generated@@3 ($generated@@63 $generated@@112 $generated@@113 $generated@@114 $generated@@115) $generated@@116 $generated@@117))  (=> (and (or (not (= $generated@@116 $generated@@112)) (not true)) ($generated@@7 ($generated@@32 $generated@@3 ($generated@@64 $generated@@62 $generated@@21 ($generated@@64 $generated@@61 ($generated@@65 $generated@@62 $generated@@21) $generated@@113 $generated@@116) $generated@@114)))) $generated@@115))
 :pattern ( ($generated@@60 $generated@@61 $generated@@62 $generated@@3 ($generated@@63 $generated@@112 $generated@@113 $generated@@114 $generated@@115) $generated@@116 $generated@@117))
)))
(assert (forall (($generated@@118 T@U) ($generated@@119 T@T) ) (! (= ($generated@@33 $generated@@119 ($generated@@20 $generated@@119 $generated@@118)) ($generated@@20 $generated@@21 ($generated@@33 $generated@@119 $generated@@118)))
 :pattern ( ($generated@@33 $generated@@119 ($generated@@20 $generated@@119 $generated@@118)))
)))
(assert (forall (($generated@@120 T@U) ($generated@@121 T@U) ) (! ($generated@@37 $generated@@3 $generated@@121 $generated $generated@@120)
 :pattern ( ($generated@@37 $generated@@3 $generated@@121 $generated $generated@@120))
)))
(assert (forall (($generated@@122 T@U) ) (! ($generated@@49 $generated@@3 $generated@@122 $generated)
 :pattern ( ($generated@@49 $generated@@3 $generated@@122 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@123 () T@U)
(declare-fun $generated@@124 () T@U)
(declare-fun $generated@@125 () T@U)
(declare-fun $generated@@126 () T@U)
(declare-fun $generated@@127 () T@U)
(declare-fun $generated@@128 () T@U)
(declare-fun $generated@@129 () T@U)
(declare-fun $generated@@130 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 6) (let (($generated@@131  (=> (= (ControlFlow 0 3) (- 0 2)) (forall (($generated@@132 T@U) ) (!  (=> (and (and ($generated@@43 $generated@@132) ($generated@@42 $generated@@132)) (and ($generated@@19 $generated@@123 $generated@@124 $generated@@125 $generated@@126) (and ($generated@@36 $generated@@125 $generated@@24 $generated@@132) ($generated@@36 $generated@@126 $generated@@24 $generated@@132)))) (and ($generated@@36 $generated@@123 $generated@@24 $generated@@132) ($generated@@36 $generated@@124 $generated@@24 $generated@@132)))
 :pattern ( ($generated@@42 $generated@@132))
)))))
(let (($generated@@133  (=> (= ($generated@@19 $generated@@123 $generated@@124 $generated@@125 $generated@@126) ($generated@@7 ($generated@@20 $generated@@3 ($generated@@6 true)))) (=> (and ($generated@@49 $generated@@3 ($generated@@6 ($generated@@19 $generated@@123 $generated@@124 $generated@@125 $generated@@126)) $generated) (= (ControlFlow 0 4) 3)) $generated@@131))))
(let (($generated@@134 true))
(let (($generated@@135  (=> (= $generated@@127 ($generated@@63 $generated@@128 $generated@@129 $generated@@1 false)) (and (=> (= (ControlFlow 0 5) 1) $generated@@134) (=> (= (ControlFlow 0 5) 4) $generated@@133)))))
(let (($generated@@136  (=> (and (and (and ($generated@@43 $generated@@129) ($generated@@130 $generated@@129)) (and ($generated@@23 $generated@@123 $generated@@24) ($generated@@23 $generated@@124 $generated@@24))) (and (and ($generated@@23 $generated@@125 $generated@@24) ($generated@@23 $generated@@126 $generated@@24)) (and (= 0 $generated@@18) (= (ControlFlow 0 6) 5)))) $generated@@135)))
$generated@@136))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 3) (- 2))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
