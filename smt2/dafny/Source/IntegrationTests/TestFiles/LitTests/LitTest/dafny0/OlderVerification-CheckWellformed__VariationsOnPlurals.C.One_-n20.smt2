(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 (T@U) T@U)
(declare-fun $generated@@22 () Int)
(declare-fun $generated@@23 (T@U T@U) Bool)
(declare-fun $generated@@24 (T@U T@U) Bool)
(declare-fun $generated@@25 () T@U)
(declare-fun $generated@@26 (T@T T@U T@U) Bool)
(declare-fun $generated@@27 () T@T)
(declare-fun $generated@@28 () T@U)
(declare-fun $generated@@29 (T@U T@U) Bool)
(declare-fun $generated@@30 () T@U)
(declare-fun $generated@@31 (T@U) Bool)
(declare-fun $generated@@32 (T@U) Bool)
(declare-fun $generated@@33 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@34 (T@U T@U T@U) Bool)
(declare-fun $generated@@38 () T@U)
(declare-fun $generated@@39 (T@U) T@U)
(declare-fun $generated@@43 (T@T T@U) T@U)
(declare-fun $generated@@44 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@45 () T@T)
(declare-fun $generated@@46 () T@T)
(declare-fun $generated@@47 (T@T T@T) T@T)
(declare-fun $generated@@48 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@49 (T@T) T@T)
(declare-fun $generated@@50 (T@T) T@T)
(declare-fun $generated@@70 (T@T T@U) T@U)
(declare-fun $generated@@75 (T@T T@U) T@U)
(declare-fun $generated@@93 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@94 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@95 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@127 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert (= ($generated@@21 $generated) $generated@@0))
(assert (= ($generated@@5 $generated@@27) 3))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@35 T@U) ($generated@@36 T@U) ) (!  (=> (or ($generated@@24 $generated@@35 $generated@@36) (and (< 0 $generated@@22) (and (and (or (not (= $generated@@35 $generated@@25)) (not true)) ($generated@@26 $generated@@27 $generated@@35 $generated@@28)) ($generated@@29 $generated@@36 $generated@@30)))) (forall (($generated@@37 T@U) ) (!  (=> (and (and ($generated@@32 $generated@@37) ($generated@@31 $generated@@37)) (and ($generated@@23 $generated@@35 $generated@@36) ($generated@@33 $generated@@27 $generated@@35 $generated@@28 $generated@@37))) ($generated@@34 $generated@@36 $generated@@30 $generated@@37))
 :pattern ( ($generated@@31 $generated@@37))
)))
 :pattern ( ($generated@@23 $generated@@35 $generated@@36))
))))
(assert (forall (($generated@@40 T@U) ) (! (= ($generated@@26 $generated@@27 $generated@@40 $generated@@38)  (or (= $generated@@40 $generated@@25) (= ($generated@@39 $generated@@40) $generated@@38)))
 :pattern ( ($generated@@26 $generated@@27 $generated@@40 $generated@@38))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (= ($generated@@33 $generated@@27 $generated@@41 $generated@@28 $generated@@42) ($generated@@33 $generated@@27 $generated@@41 $generated@@38 $generated@@42))
 :pattern ( ($generated@@33 $generated@@27 $generated@@41 $generated@@28 $generated@@42))
 :pattern ( ($generated@@33 $generated@@27 $generated@@41 $generated@@38 $generated@@42))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@51 T@T) ($generated@@52 T@T) ($generated@@53 T@U) ($generated@@54 T@U) ($generated@@55 T@U) ) (! (= ($generated@@44 $generated@@51 $generated@@52 ($generated@@48 $generated@@51 $generated@@52 $generated@@54 $generated@@55 $generated@@53) $generated@@55) $generated@@53)
 :weight 0
)) (forall (($generated@@56 T@T) ($generated@@57 T@T) ($generated@@58 T@U) ($generated@@59 T@U) ($generated@@60 T@U) ($generated@@61 T@U) ) (!  (or (= $generated@@60 $generated@@61) (= ($generated@@44 $generated@@56 $generated@@57 ($generated@@48 $generated@@56 $generated@@57 $generated@@59 $generated@@60 $generated@@58) $generated@@61) ($generated@@44 $generated@@56 $generated@@57 $generated@@59 $generated@@61)))
 :weight 0
))) (= ($generated@@5 $generated@@45) 4)) (= ($generated@@5 $generated@@46) 5)) (forall (($generated@@62 T@T) ($generated@@63 T@T) ) (= ($generated@@5 ($generated@@47 $generated@@62 $generated@@63)) 6))) (forall (($generated@@64 T@T) ($generated@@65 T@T) ) (! (= ($generated@@49 ($generated@@47 $generated@@64 $generated@@65)) $generated@@64)
 :pattern ( ($generated@@47 $generated@@64 $generated@@65))
))) (forall (($generated@@66 T@T) ($generated@@67 T@T) ) (! (= ($generated@@50 ($generated@@47 $generated@@66 $generated@@67)) $generated@@67)
 :pattern ( ($generated@@47 $generated@@66 $generated@@67))
))))
(assert (forall (($generated@@68 T@U) ($generated@@69 T@U) ) (! (= ($generated@@33 $generated@@27 $generated@@68 $generated@@38 $generated@@69)  (or (= $generated@@68 $generated@@25) ($generated@@10 ($generated@@43 $generated@@6 ($generated@@44 $generated@@45 $generated@@46 ($generated@@44 $generated@@27 ($generated@@47 $generated@@45 $generated@@46) $generated@@69 $generated@@68) $generated@@1)))))
 :pattern ( ($generated@@33 $generated@@27 $generated@@68 $generated@@38 $generated@@69))
)))
(assert (forall (($generated@@71 T@U) ($generated@@72 T@T) ) (! (= ($generated@@70 $generated@@72 $generated@@71) $generated@@71)
 :pattern ( ($generated@@70 $generated@@72 $generated@@71))
)))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@73 T@U) ($generated@@74 T@U) ) (!  (=> (or ($generated@@24 ($generated@@70 $generated@@27 $generated@@73) ($generated@@70 $generated@@46 $generated@@74)) (and (< 0 $generated@@22) (and (and (or (not (= $generated@@73 $generated@@25)) (not true)) ($generated@@26 $generated@@27 $generated@@73 $generated@@28)) ($generated@@29 $generated@@74 $generated@@30)))) (= ($generated@@23 ($generated@@70 $generated@@27 $generated@@73) ($generated@@70 $generated@@46 $generated@@74)) ($generated@@10 ($generated@@70 $generated@@6 ($generated@@9 true)))))
 :weight 3
 :pattern ( ($generated@@23 ($generated@@70 $generated@@27 $generated@@73) ($generated@@70 $generated@@46 $generated@@74)))
))))
(assert (forall (($generated@@76 T@U) ($generated@@77 T@T) ) (! (= ($generated@@75 $generated@@77 ($generated@@43 $generated@@77 $generated@@76)) $generated@@76)
 :pattern ( ($generated@@43 $generated@@77 $generated@@76))
)))
(assert (forall (($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@T) ) (! (= ($generated@@34 ($generated@@75 $generated@@81 $generated@@78) $generated@@79 $generated@@80) ($generated@@33 $generated@@81 $generated@@78 $generated@@79 $generated@@80))
 :pattern ( ($generated@@34 ($generated@@75 $generated@@81 $generated@@78) $generated@@79 $generated@@80))
)))
(assert (forall (($generated@@82 T@U) ) (!  (=> ($generated@@29 $generated@@82 $generated@@38) (and (= ($generated@@75 $generated@@27 ($generated@@43 $generated@@27 $generated@@82)) $generated@@82) ($generated@@26 $generated@@27 ($generated@@43 $generated@@27 $generated@@82) $generated@@38)))
 :pattern ( ($generated@@29 $generated@@82 $generated@@38))
)))
(assert (forall (($generated@@83 T@U) ) (!  (=> ($generated@@29 $generated@@83 $generated@@28) (and (= ($generated@@75 $generated@@27 ($generated@@43 $generated@@27 $generated@@83)) $generated@@83) ($generated@@26 $generated@@27 ($generated@@43 $generated@@27 $generated@@83) $generated@@28)))
 :pattern ( ($generated@@29 $generated@@83 $generated@@28))
)))
(assert (forall (($generated@@84 T@U) ) (! (= ($generated@@26 $generated@@27 $generated@@84 $generated@@28)  (and ($generated@@26 $generated@@27 $generated@@84 $generated@@38) (or (not (= $generated@@84 $generated@@25)) (not true))))
 :pattern ( ($generated@@26 $generated@@27 $generated@@84 $generated@@28))
 :pattern ( ($generated@@26 $generated@@27 $generated@@84 $generated@@38))
)))
(assert (forall (($generated@@85 T@U) ) (!  (=> ($generated@@29 $generated@@85 $generated) (and (= ($generated@@75 $generated@@6 ($generated@@43 $generated@@6 $generated@@85)) $generated@@85) ($generated@@26 $generated@@6 ($generated@@43 $generated@@6 $generated@@85) $generated)))
 :pattern ( ($generated@@29 $generated@@85 $generated))
)))
(assert (forall (($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@T) ) (! (= ($generated@@29 ($generated@@75 $generated@@88 $generated@@86) $generated@@87) ($generated@@26 $generated@@88 $generated@@86 $generated@@87))
 :pattern ( ($generated@@29 ($generated@@75 $generated@@88 $generated@@86) $generated@@87))
)))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@89 T@U) ($generated@@90 T@U) ) (!  (=> (or ($generated@@24 $generated@@89 $generated@@90) (and (< 0 $generated@@22) (and (and (or (not (= $generated@@89 $generated@@25)) (not true)) ($generated@@26 $generated@@27 $generated@@89 $generated@@28)) ($generated@@29 $generated@@90 $generated@@30)))) (= ($generated@@23 $generated@@89 $generated@@90) ($generated@@10 ($generated@@70 $generated@@6 ($generated@@9 true)))))
 :pattern ( ($generated@@23 $generated@@89 $generated@@90))
))))
(assert (forall (($generated@@91 T@U) ($generated@@92 T@T) ) (! (= ($generated@@43 $generated@@92 ($generated@@75 $generated@@92 $generated@@91)) $generated@@91)
 :pattern ( ($generated@@75 $generated@@92 $generated@@91))
)))
(assert  (and (forall (($generated@@96 T@T) ($generated@@97 T@T) ($generated@@98 T@T) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (! (= ($generated@@93 $generated@@96 $generated@@97 $generated@@98 ($generated@@95 $generated@@96 $generated@@97 $generated@@98 $generated@@100 $generated@@101 $generated@@102 $generated@@99) $generated@@101 $generated@@102) $generated@@99)
 :weight 0
)) (and (forall (($generated@@103 T@T) ($generated@@104 T@T) ($generated@@105 T@T) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (!  (or (= $generated@@108 $generated@@110) (= ($generated@@93 $generated@@103 $generated@@104 $generated@@105 ($generated@@95 $generated@@103 $generated@@104 $generated@@105 $generated@@107 $generated@@108 $generated@@109 $generated@@106) $generated@@110 $generated@@111) ($generated@@93 $generated@@103 $generated@@104 $generated@@105 $generated@@107 $generated@@110 $generated@@111)))
 :weight 0
)) (forall (($generated@@112 T@T) ($generated@@113 T@T) ($generated@@114 T@T) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (!  (or (= $generated@@118 $generated@@120) (= ($generated@@93 $generated@@112 $generated@@113 $generated@@114 ($generated@@95 $generated@@112 $generated@@113 $generated@@114 $generated@@116 $generated@@117 $generated@@118 $generated@@115) $generated@@119 $generated@@120) ($generated@@93 $generated@@112 $generated@@113 $generated@@114 $generated@@116 $generated@@119 $generated@@120)))
 :weight 0
)))))
(assert (forall (($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 Bool) ($generated@@125 T@U) ($generated@@126 T@U) ) (! (= ($generated@@10 ($generated@@93 $generated@@27 $generated@@45 $generated@@6 ($generated@@94 $generated@@121 $generated@@122 $generated@@123 $generated@@124) $generated@@125 $generated@@126))  (=> (and (or (not (= $generated@@125 $generated@@121)) (not true)) ($generated@@10 ($generated@@43 $generated@@6 ($generated@@44 $generated@@45 $generated@@46 ($generated@@44 $generated@@27 ($generated@@47 $generated@@45 $generated@@46) $generated@@122 $generated@@125) $generated@@123)))) $generated@@124))
 :pattern ( ($generated@@93 $generated@@27 $generated@@45 $generated@@6 ($generated@@94 $generated@@121 $generated@@122 $generated@@123 $generated@@124) $generated@@125 $generated@@126))
)))
(assert (= ($generated@@21 $generated@@38) $generated@@2))
(assert (= ($generated@@127 $generated@@38) $generated@@4))
(assert (= ($generated@@21 $generated@@28) $generated@@3))
(assert (= ($generated@@127 $generated@@28) $generated@@4))
(assert (forall (($generated@@128 T@U) ($generated@@129 T@T) ) (! (= ($generated@@75 $generated@@129 ($generated@@70 $generated@@129 $generated@@128)) ($generated@@70 $generated@@46 ($generated@@75 $generated@@129 $generated@@128)))
 :pattern ( ($generated@@75 $generated@@129 ($generated@@70 $generated@@129 $generated@@128)))
)))
(assert (forall (($generated@@130 T@U) ($generated@@131 T@U) ) (! ($generated@@33 $generated@@6 $generated@@131 $generated $generated@@130)
 :pattern ( ($generated@@33 $generated@@6 $generated@@131 $generated $generated@@130))
)))
(assert (forall (($generated@@132 T@U) ) (! ($generated@@26 $generated@@6 $generated@@132 $generated)
 :pattern ( ($generated@@26 $generated@@6 $generated@@132 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@133 () T@U)
(declare-fun $generated@@134 () T@U)
(declare-fun $generated@@135 () T@U)
(declare-fun $generated@@136 () T@U)
(declare-fun $generated@@137 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 6) (let (($generated@@138  (=> (= (ControlFlow 0 3) (- 0 2)) (forall (($generated@@139 T@U) ) (!  (=> (and (and ($generated@@32 $generated@@139) ($generated@@31 $generated@@139)) (and ($generated@@23 $generated@@133 $generated@@134) ($generated@@33 $generated@@27 $generated@@133 $generated@@28 $generated@@139))) ($generated@@34 $generated@@134 $generated@@30 $generated@@139))
 :pattern ( ($generated@@31 $generated@@139))
)))))
(let (($generated@@140  (=> (= ($generated@@23 $generated@@133 $generated@@134) ($generated@@10 ($generated@@70 $generated@@6 ($generated@@9 true)))) (=> (and ($generated@@26 $generated@@6 ($generated@@9 ($generated@@23 $generated@@133 $generated@@134)) $generated) (= (ControlFlow 0 4) 3)) $generated@@138))))
(let (($generated@@141 true))
(let (($generated@@142  (=> (= $generated@@135 ($generated@@94 $generated@@25 $generated@@136 $generated@@1 false)) (and (=> (= (ControlFlow 0 5) 1) $generated@@141) (=> (= (ControlFlow 0 5) 4) $generated@@140)))))
(let (($generated@@143  (=> (and ($generated@@32 $generated@@136) ($generated@@137 $generated@@136)) (=> (and (and (and (or (not (= $generated@@133 $generated@@25)) (not true)) (and ($generated@@26 $generated@@27 $generated@@133 $generated@@28) ($generated@@33 $generated@@27 $generated@@133 $generated@@28 $generated@@136))) ($generated@@29 $generated@@134 $generated@@30)) (and (= 0 $generated@@22) (= (ControlFlow 0 6) 5))) $generated@@142))))
$generated@@143))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 3) (- 2))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
