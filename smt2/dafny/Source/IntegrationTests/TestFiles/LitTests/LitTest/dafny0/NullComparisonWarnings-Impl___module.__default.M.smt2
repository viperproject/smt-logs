(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TagSet () T@U)
(declare-fun alloc () T@U)
(declare-fun allocName () T@U)
(declare-fun Tagclass._System.nat () T@U)
(declare-fun Tagclass._module.MyClass () T@U)
(declare-fun Tagclass._module.MyClass? () T@U)
(declare-fun Tagclass._module.Cell () T@U)
(declare-fun class._module.MyClass? () T@U)
(declare-fun class._module.Cell? () T@U)
(declare-fun Tagclass._module.Cell? () T@U)
(declare-fun tytagFamily$nat () T@U)
(declare-fun tytagFamily$MyClass () T@U)
(declare-fun tytagFamily$Cell () T@U)
(declare-fun field$next () T@U)
(declare-fun field$data () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun FDim (T@U) Int)
(declare-fun DeclName (T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun refType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun _module.Cell.data () T@U)
(declare-fun Tclass._module.Cell? (T@U) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun null () T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass._System.nat () T@U)
(declare-fun Tclass._module.Cell (T@U) T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun Tclass._module.MyClass? () T@U)
(declare-fun Tclass._module.MyClass () T@U)
(declare-fun _module.MyClass.next () T@U)
(declare-fun FieldOfDecl (T@U T@U) T@U)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun SetType () T@T)
(declare-fun TSet (T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun Tag (T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun DeclType (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun Tclass._module.Cell_0 (T@U) T@U)
(declare-fun Tclass._module.Cell?_0 (T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TagSet alloc allocName Tagclass._System.nat Tagclass._module.MyClass Tagclass._module.MyClass? Tagclass._module.Cell class._module.MyClass? class._module.Cell? Tagclass._module.Cell? tytagFamily$nat tytagFamily$MyClass tytagFamily$Cell field$next field$data)
)
(assert (= (FDim alloc) 0))
(assert (= (DeclName alloc) allocName))
(assert  (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 3)) (= (Ctor BoxType) 4)) (= (Ctor refType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 6))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((_module.Cell$G T@U) ($h T@U) ($o T@U) ) (!  (=> (and ($IsGoodHeap $h) (and (or (not (= $o null)) (not true)) (= (dtype $o) (Tclass._module.Cell? _module.Cell$G)))) ($IsBox (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h $o) _module.Cell.data) _module.Cell$G))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h $o) _module.Cell.data) (Tclass._module.Cell? _module.Cell$G))
)))
(assert (forall ((_module.Cell$G@@0 T@U) ($h@@0 T@U) ($o@@0 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@0) (and (or (not (= $o@@0 null)) (not true)) (= (dtype $o@@0) (Tclass._module.Cell? _module.Cell$G@@0)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@0 $o@@0) alloc)))) ($IsAllocBox (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@0 $o@@0) _module.Cell.data) _module.Cell$G@@0 $h@@0))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@0 $o@@0) _module.Cell.data) (Tclass._module.Cell? _module.Cell$G@@0))
)))
(assert (forall ((|x#0| T@U) ($h@@1 T@U) ) (! ($IsAlloc intType |x#0| Tclass._System.nat $h@@1)
 :pattern ( ($IsAlloc intType |x#0| Tclass._System.nat $h@@1))
)))
(assert (forall ((_module.Cell$G@@1 T@U) (|c#0| T@U) ($h@@2 T@U) ) (! (= ($IsAlloc refType |c#0| (Tclass._module.Cell _module.Cell$G@@1) $h@@2) ($IsAlloc refType |c#0| (Tclass._module.Cell? _module.Cell$G@@1) $h@@2))
 :pattern ( ($IsAlloc refType |c#0| (Tclass._module.Cell _module.Cell$G@@1) $h@@2))
 :pattern ( ($IsAlloc refType |c#0| (Tclass._module.Cell? _module.Cell$G@@1) $h@@2))
)))
(assert (forall (($o@@1 T@U) ) (! (= ($Is refType $o@@1 Tclass._module.MyClass?)  (or (= $o@@1 null) (= (dtype $o@@1) Tclass._module.MyClass?)))
 :pattern ( ($Is refType $o@@1 Tclass._module.MyClass?))
)))
(assert (forall ((|c#0@@0| T@U) ($h@@3 T@U) ) (! (= ($IsAlloc refType |c#0@@0| Tclass._module.MyClass $h@@3) ($IsAlloc refType |c#0@@0| Tclass._module.MyClass? $h@@3))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass._module.MyClass $h@@3))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass._module.MyClass? $h@@3))
)))
(assert (forall ((_module.Cell$G@@2 T@U) ($o@@2 T@U) ($h@@4 T@U) ) (! (= ($IsAlloc refType $o@@2 (Tclass._module.Cell? _module.Cell$G@@2) $h@@4)  (or (= $o@@2 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@4 $o@@2) alloc)))))
 :pattern ( ($IsAlloc refType $o@@2 (Tclass._module.Cell? _module.Cell$G@@2) $h@@4))
)))
(assert (= (FDim _module.MyClass.next) 0))
(assert (= (FieldOfDecl class._module.MyClass? field$next) _module.MyClass.next))
(assert  (not ($IsGhostField _module.MyClass.next)))
(assert (= (FDim _module.Cell.data) 0))
(assert (= (FieldOfDecl class._module.Cell? field$data) _module.Cell.data))
(assert  (not ($IsGhostField _module.Cell.data)))
(assert (forall (($o@@3 T@U) ($h@@5 T@U) ) (! (= ($IsAlloc refType $o@@3 Tclass._module.MyClass? $h@@5)  (or (= $o@@3 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@5 $o@@3) alloc)))))
 :pattern ( ($IsAlloc refType $o@@3 Tclass._module.MyClass? $h@@5))
)))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (= (Ctor SetType) 7))
(assert (forall ((v T@U) (t0@@0 T@U) ) (! (= ($Is SetType v (TSet t0@@0)) (forall ((bx T@U) ) (!  (=> (|Set#IsMember| v bx) ($IsBox bx t0@@0))
 :pattern ( (|Set#IsMember| v bx))
)))
 :pattern ( ($Is SetType v (TSet t0@@0)))
)))
(assert (forall ((|x#0@@0| T@U) ) (! (= ($Is intType |x#0@@0| Tclass._System.nat) (<= (LitInt 0) (U_2_int |x#0@@0|)))
 :pattern ( ($Is intType |x#0@@0| Tclass._System.nat))
)))
(assert ($IsGhostField alloc))
(assert (forall ((_module.Cell$G@@3 T@U) (|c#0@@1| T@U) ) (! (= ($Is refType |c#0@@1| (Tclass._module.Cell _module.Cell$G@@3))  (and ($Is refType |c#0@@1| (Tclass._module.Cell? _module.Cell$G@@3)) (or (not (= |c#0@@1| null)) (not true))))
 :pattern ( ($Is refType |c#0@@1| (Tclass._module.Cell _module.Cell$G@@3)))
 :pattern ( ($Is refType |c#0@@1| (Tclass._module.Cell? _module.Cell$G@@3)))
)))
(assert (forall ((v@@0 T@U) (t T@U) (h@@0 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t h@@0) ($IsAlloc T@@1 v@@0 t h@@0))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t h@@0))
)))
(assert (forall ((h@@1 T@U) (k@@0 T@U) (bx@@0 T@U) (t@@0 T@U) ) (!  (=> ($HeapSucc h@@1 k@@0) (=> ($IsAllocBox bx@@0 t@@0 h@@1) ($IsAllocBox bx@@0 t@@0 k@@0)))
 :pattern ( ($HeapSucc h@@1 k@@0) ($IsAllocBox bx@@0 t@@0 h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@1 T@U) (v@@1 T@U) (t@@1 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@2 k@@1) (=> ($IsAlloc T@@2 v@@1 t@@1 h@@2) ($IsAlloc T@@2 v@@1 t@@1 k@@1)))
 :pattern ( ($HeapSucc h@@2 k@@1) ($IsAlloc T@@2 v@@1 t@@1 h@@2))
)))
(assert (forall ((_module.Cell$G@@4 T@U) ) (!  (and (= (Tag (Tclass._module.Cell _module.Cell$G@@4)) Tagclass._module.Cell) (= (TagFamily (Tclass._module.Cell _module.Cell$G@@4)) tytagFamily$Cell))
 :pattern ( (Tclass._module.Cell _module.Cell$G@@4))
)))
(assert (forall ((_module.Cell$G@@5 T@U) ) (!  (and (= (Tag (Tclass._module.Cell? _module.Cell$G@@5)) Tagclass._module.Cell?) (= (TagFamily (Tclass._module.Cell? _module.Cell$G@@5)) tytagFamily$Cell))
 :pattern ( (Tclass._module.Cell? _module.Cell$G@@5))
)))
(assert (forall (($h@@6 T@U) ($o@@4 T@U) ) (!  (=> (and ($IsGoodHeap $h@@6) (and (or (not (= $o@@4 null)) (not true)) (= (dtype $o@@4) Tclass._module.MyClass?))) ($Is refType ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@6 $o@@4) _module.MyClass.next)) Tclass._module.MyClass))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@6 $o@@4) _module.MyClass.next)))
)))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 Tclass._System.nat) (and (= ($Box intType ($Unbox intType bx@@1)) bx@@1) ($Is intType ($Unbox intType bx@@1) Tclass._System.nat)))
 :pattern ( ($IsBox bx@@1 Tclass._System.nat))
)))
(assert (forall ((bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 Tclass._module.MyClass) (and (= ($Box refType ($Unbox refType bx@@2)) bx@@2) ($Is refType ($Unbox refType bx@@2) Tclass._module.MyClass)))
 :pattern ( ($IsBox bx@@2 Tclass._module.MyClass))
)))
(assert (forall ((bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 Tclass._module.MyClass?) (and (= ($Box refType ($Unbox refType bx@@3)) bx@@3) ($Is refType ($Unbox refType bx@@3) Tclass._module.MyClass?)))
 :pattern ( ($IsBox bx@@3 Tclass._module.MyClass?))
)))
(assert (forall ((_module.Cell$G@@6 T@U) ($o@@5 T@U) ) (! (= ($Is refType $o@@5 (Tclass._module.Cell? _module.Cell$G@@6))  (or (= $o@@5 null) (= (dtype $o@@5) (Tclass._module.Cell? _module.Cell$G@@6))))
 :pattern ( ($Is refType $o@@5 (Tclass._module.Cell? _module.Cell$G@@6)))
)))
(assert (forall ((|c#0@@2| T@U) ) (! (= ($Is refType |c#0@@2| Tclass._module.MyClass)  (and ($Is refType |c#0@@2| Tclass._module.MyClass?) (or (not (= |c#0@@2| null)) (not true))))
 :pattern ( ($Is refType |c#0@@2| Tclass._module.MyClass))
 :pattern ( ($Is refType |c#0@@2| Tclass._module.MyClass?))
)))
(assert (forall (($h@@7 T@U) ($o@@6 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@7) (and (or (not (= $o@@6 null)) (not true)) (= (dtype $o@@6) Tclass._module.MyClass?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@7 $o@@6) alloc)))) ($IsAlloc refType ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@7 $o@@6) _module.MyClass.next)) Tclass._module.MyClass $h@@7))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@7 $o@@6) _module.MyClass.next)))
)))
(assert (forall ((a T@U) (b T@U) (c T@U) ) (!  (=> (or (not (= a c)) (not true)) (=> (and ($HeapSucc a b) ($HeapSucc b c)) ($HeapSucc a c)))
 :pattern ( ($HeapSucc a b) ($HeapSucc b c))
)))
(assert (forall ((cl T@U) (nm T@U) ) (!  (and (= (DeclType (FieldOfDecl cl nm)) cl) (= (DeclName (FieldOfDecl cl nm)) nm))
 :pattern ( (FieldOfDecl cl nm))
)))
(assert (forall ((v@@2 T@U) (t@@2 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@2) t@@2) ($Is T@@3 v@@2 t@@2))
 :pattern ( ($IsBox ($Box T@@3 v@@2) t@@2))
)))
(assert (forall ((v@@3 T@U) (t0@@1 T@U) (h@@3 T@U) ) (! (= ($IsAlloc SetType v@@3 (TSet t0@@1) h@@3) (forall ((bx@@4 T@U) ) (!  (=> (|Set#IsMember| v@@3 bx@@4) ($IsAllocBox bx@@4 t0@@1 h@@3))
 :pattern ( (|Set#IsMember| v@@3 bx@@4))
)))
 :pattern ( ($IsAlloc SetType v@@3 (TSet t0@@1) h@@3))
)))
(assert (forall ((t@@3 T@U) ) (! (= (Inv0_TSet (TSet t@@3)) t@@3)
 :pattern ( (TSet t@@3))
)))
(assert (forall ((t@@4 T@U) ) (! (= (Tag (TSet t@@4)) TagSet)
 :pattern ( (TSet t@@4))
)))
(assert (forall ((_module.Cell$G@@7 T@U) ) (! (= (Tclass._module.Cell_0 (Tclass._module.Cell _module.Cell$G@@7)) _module.Cell$G@@7)
 :pattern ( (Tclass._module.Cell _module.Cell$G@@7))
)))
(assert (forall ((_module.Cell$G@@8 T@U) ) (! (= (Tclass._module.Cell?_0 (Tclass._module.Cell? _module.Cell$G@@8)) _module.Cell$G@@8)
 :pattern ( (Tclass._module.Cell? _module.Cell$G@@8))
)))
(assert (forall ((x@@5 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@5)) x@@5)
 :pattern ( ($Box T@@4 x@@5))
)))
(assert  (and (forall ((t0@@2 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@2 t1@@0 t2 (MapType1Store t0@@2 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o@@7 T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@7 $f))  (=> (and (or (not (= $o@@7 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@7) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@7 $f))
)))
(assert (forall ((bx@@5 T@U) (t@@5 T@U) ) (!  (=> ($IsBox bx@@5 (TSet t@@5)) (and (= ($Box SetType ($Unbox SetType bx@@5)) bx@@5) ($Is SetType ($Unbox SetType bx@@5) (TSet t@@5))))
 :pattern ( ($IsBox bx@@5 (TSet t@@5)))
)))
(assert (forall ((_module.Cell$G@@9 T@U) (bx@@6 T@U) ) (!  (=> ($IsBox bx@@6 (Tclass._module.Cell _module.Cell$G@@9)) (and (= ($Box refType ($Unbox refType bx@@6)) bx@@6) ($Is refType ($Unbox refType bx@@6) (Tclass._module.Cell _module.Cell$G@@9))))
 :pattern ( ($IsBox bx@@6 (Tclass._module.Cell _module.Cell$G@@9)))
)))
(assert (forall ((_module.Cell$G@@10 T@U) (bx@@7 T@U) ) (!  (=> ($IsBox bx@@7 (Tclass._module.Cell? _module.Cell$G@@10)) (and (= ($Box refType ($Unbox refType bx@@7)) bx@@7) ($Is refType ($Unbox refType bx@@7) (Tclass._module.Cell? _module.Cell$G@@10))))
 :pattern ( ($IsBox bx@@7 (Tclass._module.Cell? _module.Cell$G@@10)))
)))
(assert (= (Tag Tclass._System.nat) Tagclass._System.nat))
(assert (= (TagFamily Tclass._System.nat) tytagFamily$nat))
(assert (= (Tag Tclass._module.MyClass) Tagclass._module.MyClass))
(assert (= (TagFamily Tclass._module.MyClass) tytagFamily$MyClass))
(assert (= (Tag Tclass._module.MyClass?) Tagclass._module.MyClass?))
(assert (= (TagFamily Tclass._module.MyClass?) tytagFamily$MyClass))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((x@@7 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@7)) (Lit BoxType ($Box T@@5 x@@7)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@7)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |n#0@0| () Int)
(declare-fun |$w$loop#0@0| () Bool)
(declare-fun |b#0@11| () Bool)
(declare-fun |S#0| () T@U)
(declare-fun call3formal@this () T@U)
(declare-fun call0formal@_module.Cell$G () T@U)
(declare-fun $Heap () T@U)
(declare-fun call0formal@_module.Cell$G@0 () T@U)
(declare-fun |call1formal@g#0@0| () T@U)
(declare-fun |c#0@@3| () T@U)
(declare-fun $Heap@3 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun call3formal@this@0 () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun call3formal@this@@0 () T@U)
(declare-fun call0formal@_module.Cell$G@@0 () T@U)
(declare-fun call0formal@_module.Cell$G@0@@0 () T@U)
(declare-fun |call1formal@g#0@0@@0| () T@U)
(declare-fun $Heap@4 () T@U)
(declare-fun call3formal@this@0@@0 () T@U)
(declare-fun |b#0@12| () Bool)
(declare-fun |u#1@0| () T@U)
(declare-fun |b#0@1| () Bool)
(declare-fun |x#0@@1| () T@U)
(declare-fun |defass#y#0@0| () Bool)
(declare-fun |b#0@2| () Bool)
(declare-fun |y#0@0| () T@U)
(declare-fun |b#0@3| () Bool)
(declare-fun |b#0@4| () Bool)
(declare-fun |b#0@5| () Bool)
(declare-fun |b#0@6| () Bool)
(declare-fun |b#0@7| () Bool)
(declare-fun |b#0@8| () Bool)
(declare-fun |b#0@9| () Bool)
(declare-fun |b#0@10| () Bool)
(declare-fun |$decr$loop#00@1| () Int)
(declare-fun call1formal@this () T@U)
(declare-fun $Heap@2 () T@U)
(declare-fun call1formal@this@0 () T@U)
(declare-fun |n#0@1| () Int)
(declare-fun $Heap@0 () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun |$decr_init$loop#00@0| () Int)
(declare-fun call1formal@this@@0 () T@U)
(declare-fun call1formal@this@0@@0 () T@U)
(declare-fun |N#0| () Int)
(declare-fun |defass#y#0| () Bool)
(declare-fun |y#0| () T@U)
(declare-fun |n#0| () Int)
(declare-fun |defass#c0#0| () Bool)
(declare-fun |c0#0| () T@U)
(declare-fun |defass#c1#0| () Bool)
(declare-fun |c1#0| () T@U)
(declare-fun $FunctionContextHeight () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 28) (let ((anon5_correct true))
(let ((anon15_Else_correct  (=> (and (< (LitInt 0) |n#0@0|) (= (ControlFlow 0 23) 21)) anon5_correct)))
(let ((anon15_Then_correct  (=> (and (<= |n#0@0| (LitInt 0)) (= (ControlFlow 0 22) 21)) anon5_correct)))
(let ((anon14_Then_correct  (=> (not |$w$loop#0@0|) (and (=> (= (ControlFlow 0 24) 22) anon15_Then_correct) (=> (= (ControlFlow 0 24) 23) anon15_Else_correct)))))
(let ((anon12_correct  (=> (= |b#0@11| (forall ((|u#0| T@U) ) (!  (=> ($Is refType |u#0| Tclass._module.MyClass) (=> (|Set#IsMember| |S#0| ($Box refType |u#0|)) (or (not (= |u#0| null)) (not true))))
 :pattern ( (|Set#IsMember| |S#0| ($Box refType |u#0|)))
))) (=> (and (or (not (= call3formal@this null)) (not true)) (and ($Is refType call3formal@this (Tclass._module.Cell call0formal@_module.Cell$G)) ($IsAlloc refType call3formal@this (Tclass._module.Cell call0formal@_module.Cell$G) $Heap))) (=> (and (and (and (= call0formal@_module.Cell$G@0 Tclass._module.MyClass?) (= |call1formal@g#0@0| ($Box refType |c#0@@3|))) (and ($IsGoodHeap $Heap@3) ($IsHeapAnchor $Heap@3))) (and (and (or (not (= call3formal@this@0 null)) (not true)) (and ($Is refType call3formal@this@0 (Tclass._module.Cell call0formal@_module.Cell$G@0)) ($IsAlloc refType call3formal@this@0 (Tclass._module.Cell call0formal@_module.Cell$G@0) $Heap@3))) (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 call3formal@this@0) alloc)))))) (=> (and (and (and (and (forall (($o@@8 T@U) ) (!  (=> (and (or (not (= $o@@8 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@8) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@8) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@8)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@8))
)) ($HeapSucc $Heap@1 $Heap@3)) (and (or (not (= call3formal@this@@0 null)) (not true)) (and ($Is refType call3formal@this@@0 (Tclass._module.Cell call0formal@_module.Cell$G@@0)) ($IsAlloc refType call3formal@this@@0 (Tclass._module.Cell call0formal@_module.Cell$G@@0) $Heap)))) (and (and (= call0formal@_module.Cell$G@0@@0 Tclass._module.MyClass) (= |call1formal@g#0@0@@0| ($Box refType |c#0@@3|))) (and ($IsGoodHeap $Heap@4) ($IsHeapAnchor $Heap@4)))) (and (and (and (or (not (= call3formal@this@0@@0 null)) (not true)) (and ($Is refType call3formal@this@0@@0 (Tclass._module.Cell call0formal@_module.Cell$G@0@@0)) ($IsAlloc refType call3formal@this@0@@0 (Tclass._module.Cell call0formal@_module.Cell$G@0@@0) $Heap@4))) (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 call3formal@this@0@@0) alloc))))) (and (forall (($o@@9 T@U) ) (!  (=> (and (or (not (= $o@@9 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@9) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 $o@@9) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@9)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 $o@@9))
)) ($HeapSucc $Heap@3 $Heap@4)))) (and (=> (= (ControlFlow 0 7) (- 0 10)) true) (and (=> (= (ControlFlow 0 7) (- 0 9)) (or (not (= call3formal@this@0 null)) (not true))) (=> (or (not (= call3formal@this@0 null)) (not true)) (=> (= |b#0@12|  (or (not (= null ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 call3formal@this@0) _module.Cell.data)))) (not true))) (and (=> (= (ControlFlow 0 7) (- 0 8)) true) (=> (= (ControlFlow 0 7) (- 0 6)) (or (not (= call3formal@this@0@@0 null)) (not true))))))))))))))
(let ((anon18_Else_correct  (=> (and (not (|Set#IsMember| |S#0| ($Box refType |u#1@0|))) (= (ControlFlow 0 13) 7)) anon12_correct)))
(let ((anon18_Then_correct  (=> (and (|Set#IsMember| |S#0| ($Box refType |u#1@0|)) (= (ControlFlow 0 12) 7)) anon12_correct)))
(let ((anon17_Then_correct  (=> (and ($Is refType |u#1@0| Tclass._module.MyClass) ($IsAlloc refType |u#1@0| Tclass._module.MyClass $Heap@1)) (and (=> (= (ControlFlow 0 14) 12) anon18_Then_correct) (=> (= (ControlFlow 0 14) 13) anon18_Else_correct)))))
(let ((anon17_Else_correct  (=> (and (not (and ($Is refType |u#1@0| Tclass._module.MyClass) ($IsAlloc refType |u#1@0| Tclass._module.MyClass $Heap@1))) (= (ControlFlow 0 11) 7)) anon12_correct)))
(let ((anon16_Then_correct  (=> (and (= |n#0@0| 0) (= |b#0@1| (= |x#0@@1| null))) (and (=> (= (ControlFlow 0 15) (- 0 19)) |defass#y#0@0|) (=> |defass#y#0@0| (=> (= |b#0@2| (= |y#0@0| null)) (and (=> (= (ControlFlow 0 15) (- 0 18)) (or (not (= |c#0@@3| null)) (not true))) (=> (or (not (= |c#0@@3| null)) (not true)) (=> (and (= |b#0@3| (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |c#0@@3|) _module.MyClass.next)) null)) (= |b#0@4|  (or (not (= |x#0@@1| null)) (not true)))) (and (=> (= (ControlFlow 0 15) (- 0 17)) |defass#y#0@0|) (=> |defass#y#0@0| (=> (= |b#0@5|  (or (not (= |y#0@0| null)) (not true))) (and (=> (= (ControlFlow 0 15) (- 0 16)) (or (not (= |c#0@@3| null)) (not true))) (=> (or (not (= |c#0@@3| null)) (not true)) (=> (= |b#0@6|  (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |c#0@@3|) _module.MyClass.next)) null)) (not true))) (=> (and (and (= |b#0@7| (= null |x#0@@1|)) (= |b#0@8| (= |x#0@@1| null))) (and (= |b#0@9| (|Set#IsMember| |S#0| ($Box refType null))) (= |b#0@10|  (not (|Set#IsMember| |S#0| ($Box refType null)))))) (and (=> (= (ControlFlow 0 15) 14) anon17_Then_correct) (=> (= (ControlFlow 0 15) 11) anon17_Else_correct))))))))))))))))))
(let ((anon16_Else_correct  (=> (and (or (not (= |n#0@0| 0)) (not true)) (= |$decr$loop#00@1| (ite (<= |n#0@0| (LitInt 0)) (- 0 |n#0@0|) (- |n#0@0| 0)))) (=> (and (and (or (not (= call1formal@this null)) (not true)) (and ($Is refType call1formal@this Tclass._module.MyClass) ($IsAlloc refType call1formal@this Tclass._module.MyClass $Heap))) (and ($IsGoodHeap $Heap@2) ($IsHeapAnchor $Heap@2))) (=> (and (and (and (or (not (= call1formal@this@0 null)) (not true)) (and ($Is refType call1formal@this@0 Tclass._module.MyClass) ($IsAlloc refType call1formal@this@0 Tclass._module.MyClass $Heap@2))) (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 call1formal@this@0) alloc))))) (and (forall (($o@@10 T@U) ) (!  (=> (and (or (not (= $o@@10 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@10) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@10) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@10)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@10))
)) ($HeapSucc $Heap@1 $Heap@2))) (and (=> (= (ControlFlow 0 3) (- 0 5)) ($Is intType (int_2_U (- |n#0@0| 1)) Tclass._System.nat)) (=> ($Is intType (int_2_U (- |n#0@0| 1)) Tclass._System.nat) (=> (= |n#0@1| (- |n#0@0| 1)) (and (=> (= (ControlFlow 0 3) (- 0 4)) (or (<= 0 |$decr$loop#00@1|) (= (ite (<= |n#0@1| (LitInt 0)) (- 0 |n#0@1|) (- |n#0@1| 0)) |$decr$loop#00@1|))) (=> (or (<= 0 |$decr$loop#00@1|) (= (ite (<= |n#0@1| (LitInt 0)) (- 0 |n#0@1|) (- |n#0@1| 0)) |$decr$loop#00@1|)) (=> (= (ControlFlow 0 3) (- 0 2)) (< (ite (<= |n#0@1| (LitInt 0)) (- 0 |n#0@1|) (- |n#0@1| 0)) |$decr$loop#00@1|))))))))))))
(let ((anon14_Else_correct  (=> |$w$loop#0@0| (and (=> (= (ControlFlow 0 20) 15) anon16_Then_correct) (=> (= (ControlFlow 0 20) 3) anon16_Else_correct)))))
(let ((anon13_LoopBody_correct  (and (=> (= (ControlFlow 0 25) 24) anon14_Then_correct) (=> (= (ControlFlow 0 25) 20) anon14_Else_correct))))
(let ((anon13_LoopDone_correct true))
(let ((anon13_LoopHead_correct  (=> (and (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1)) (and (=> |defass#y#0@0| (and ($Is refType |y#0@0| Tclass._module.MyClass) ($IsAlloc refType |y#0@0| Tclass._module.MyClass $Heap@1))) (<= (LitInt 0) |n#0@0|))) (=> (and (and (and (and (not false) |defass#y#0@0|) true) (forall (($o@@11 T@U) ) (!  (=> (and (or (not (= $o@@11 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@11) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@11) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@11)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@11))
))) (and (and ($HeapSucc $Heap@0 $Heap@1) (forall (($o@@12 T@U) ($f@@0 T@U) ) (!  (=> (and (or (not (= $o@@12 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@12) alloc)))) (or (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@12) $f@@0) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@12) $f@@0)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@12 $f@@0))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@12) $f@@0))
))) (and (=> true |defass#y#0@0|) (<= (ite (<= |n#0@0| (LitInt 0)) (- 0 |n#0@0|) (- |n#0@0| 0)) |$decr_init$loop#00@0|)))) (and (=> (= (ControlFlow 0 26) 1) anon13_LoopDone_correct) (=> (= (ControlFlow 0 26) 25) anon13_LoopBody_correct))))))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (=> (and (and (or (not (= call1formal@this@@0 null)) (not true)) (and ($Is refType call1formal@this@@0 Tclass._module.MyClass) ($IsAlloc refType call1formal@this@@0 Tclass._module.MyClass $Heap))) (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0))) (=> (and (and (and (or (not (= call1formal@this@0@@0 null)) (not true)) (and ($Is refType call1formal@this@0@@0 Tclass._module.MyClass) ($IsAlloc refType call1formal@this@0@@0 Tclass._module.MyClass $Heap@0))) (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap call1formal@this@0@@0) alloc))))) (and (and (forall (($o@@13 T@U) ) (!  (=> (and (or (not (= $o@@13 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@13) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@13) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@13)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@13))
)) ($HeapSucc $Heap $Heap@0)) (and (= |$decr_init$loop#00@0| (ite (<= |N#0| (LitInt 0)) (- 0 |N#0|) (- |N#0| 0))) (= (ControlFlow 0 27) 26)))) anon13_LoopHead_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (and ($Is refType |x#0@@1| Tclass._module.MyClass) ($IsAlloc refType |x#0@@1| Tclass._module.MyClass $Heap))) (=> (and (and (and (and ($Is refType |c#0@@3| Tclass._module.MyClass) ($IsAlloc refType |c#0@@3| Tclass._module.MyClass $Heap)) (<= (LitInt 0) |N#0|)) (and (and ($Is SetType |S#0| (TSet Tclass._module.MyClass)) ($IsAlloc SetType |S#0| (TSet Tclass._module.MyClass) $Heap)) (and (=> |defass#y#0| (and ($Is refType |y#0| Tclass._module.MyClass) ($IsAlloc refType |y#0| Tclass._module.MyClass $Heap))) true))) (and (and (and (<= (LitInt 0) |n#0|) true) (and (=> |defass#c0#0| (and ($Is refType |c0#0| (Tclass._module.Cell Tclass._module.MyClass?)) ($IsAlloc refType |c0#0| (Tclass._module.Cell Tclass._module.MyClass?) $Heap))) true)) (and (and (=> |defass#c1#0| (and ($Is refType |c1#0| (Tclass._module.Cell Tclass._module.MyClass)) ($IsAlloc refType |c1#0| (Tclass._module.Cell Tclass._module.MyClass) $Heap))) true) (and (= 1 $FunctionContextHeight) (= (ControlFlow 0 28) 27))))) anon0_correct))))
PreconditionGeneratedEntry_correct))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
