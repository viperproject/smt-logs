(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (Bool) T@U)
(declare-fun $generated@@7 (T@U) Bool)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun $generated@@9 (T@U) Int)
(declare-fun $generated@@10 (Real) T@U)
(declare-fun $generated@@11 (T@U) Real)
(declare-fun $generated@@18 (T@U) T@U)
(declare-fun $generated@@19 (T@U T@U) Bool)
(declare-fun $generated@@20 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@21 () T@T)
(declare-fun $generated@@22 () T@T)
(declare-fun $generated@@23 () T@T)
(declare-fun $generated@@24 (T@T T@T) T@T)
(declare-fun $generated@@25 (T@T T@U) T@U)
(declare-fun $generated@@26 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@27 (T@T) T@T)
(declare-fun $generated@@28 (T@T) T@T)
(declare-fun $generated@@49 (Real) Int)
(declare-fun $generated@@51 (Real) Real)
(declare-fun $generated@@53 (T@T T@U) T@U)
(declare-fun $generated@@56 (T@T T@U) T@U)
(declare-fun $generated@@59 (T@U T@U T@U) Bool)
(declare-fun $generated@@60 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@74 (Int) Real)
(declare-fun $generated@@79 (T@U T@U) Bool)
(declare-fun $generated@@80 (T@T T@U T@U) Bool)
(declare-fun $generated@@88 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@89 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@90 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@4) 1)) (= ($generated@@2 $generated@@5) 2)) (forall (($generated@@12 Bool) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Int) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Real) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))))
(assert (distinct $generated $generated@@0 $generated@@1)
)
(assert (= ($generated@@18 $generated) $generated@@0))
(assert  (and (and (and (and (and (and (and (forall (($generated@@29 T@T) ($generated@@30 T@T) ($generated@@31 T@U) ($generated@@32 T@U) ($generated@@33 T@U) ) (! (= ($generated@@20 $generated@@29 $generated@@30 ($generated@@26 $generated@@29 $generated@@30 $generated@@32 $generated@@33 $generated@@31) $generated@@33) $generated@@31)
 :weight 0
)) (forall (($generated@@34 T@T) ($generated@@35 T@T) ($generated@@36 T@U) ($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (!  (or (= $generated@@38 $generated@@39) (= ($generated@@20 $generated@@34 $generated@@35 ($generated@@26 $generated@@34 $generated@@35 $generated@@37 $generated@@38 $generated@@36) $generated@@39) ($generated@@20 $generated@@34 $generated@@35 $generated@@37 $generated@@39)))
 :weight 0
))) (= ($generated@@2 $generated@@21) 3)) (= ($generated@@2 $generated@@22) 4)) (= ($generated@@2 $generated@@23) 5)) (forall (($generated@@40 T@T) ($generated@@41 T@T) ) (= ($generated@@2 ($generated@@24 $generated@@40 $generated@@41)) 6))) (forall (($generated@@42 T@T) ($generated@@43 T@T) ) (! (= ($generated@@27 ($generated@@24 $generated@@42 $generated@@43)) $generated@@42)
 :pattern ( ($generated@@24 $generated@@42 $generated@@43))
))) (forall (($generated@@44 T@T) ($generated@@45 T@T) ) (! (= ($generated@@28 ($generated@@24 $generated@@44 $generated@@45)) $generated@@45)
 :pattern ( ($generated@@24 $generated@@44 $generated@@45))
))))
(assert (forall (($generated@@46 T@U) ($generated@@47 T@U) ) (!  (=> ($generated@@19 $generated@@46 $generated@@47) (forall (($generated@@48 T@U) ) (!  (=> ($generated@@7 ($generated@@25 $generated@@3 ($generated@@20 $generated@@21 $generated@@22 ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@46 $generated@@48) $generated@@1))) ($generated@@7 ($generated@@25 $generated@@3 ($generated@@20 $generated@@21 $generated@@22 ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@47 $generated@@48) $generated@@1))))
 :pattern ( ($generated@@20 $generated@@21 $generated@@22 ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@47 $generated@@48) $generated@@1))
)))
 :pattern ( ($generated@@19 $generated@@46 $generated@@47))
)))
(assert (forall (($generated@@50 Real) ) (! (= ($generated@@49 $generated@@50) (to_int $generated@@50))
 :pattern ( ($generated@@49 $generated@@50))
)))
(assert (forall (($generated@@52 Real) ) (! (= ($generated@@51 $generated@@52) $generated@@52)
 :pattern ( ($generated@@51 $generated@@52))
)))
(assert (forall (($generated@@54 T@U) ($generated@@55 T@T) ) (! (= ($generated@@53 $generated@@55 $generated@@54) $generated@@54)
 :pattern ( ($generated@@53 $generated@@55 $generated@@54))
)))
(assert (forall (($generated@@57 T@U) ($generated@@58 T@T) ) (! (= ($generated@@56 $generated@@58 ($generated@@25 $generated@@58 $generated@@57)) $generated@@57)
 :pattern ( ($generated@@25 $generated@@58 $generated@@57))
)))
(assert (forall (($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@U) ($generated@@64 T@T) ) (! (= ($generated@@59 ($generated@@56 $generated@@64 $generated@@61) $generated@@62 $generated@@63) ($generated@@60 $generated@@64 $generated@@61 $generated@@62 $generated@@63))
 :pattern ( ($generated@@59 ($generated@@56 $generated@@64 $generated@@61) $generated@@62 $generated@@63))
)))
(assert (forall (($generated@@65 T@U) ($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ) (!  (=> ($generated@@19 $generated@@65 $generated@@66) (=> ($generated@@59 $generated@@67 $generated@@68 $generated@@65) ($generated@@59 $generated@@67 $generated@@68 $generated@@66)))
 :pattern ( ($generated@@19 $generated@@65 $generated@@66) ($generated@@59 $generated@@67 $generated@@68 $generated@@65))
)))
(assert (forall (($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@T) ) (!  (=> ($generated@@19 $generated@@69 $generated@@70) (=> ($generated@@60 $generated@@73 $generated@@71 $generated@@72 $generated@@69) ($generated@@60 $generated@@73 $generated@@71 $generated@@72 $generated@@70)))
 :pattern ( ($generated@@19 $generated@@69 $generated@@70) ($generated@@60 $generated@@73 $generated@@71 $generated@@72 $generated@@69))
)))
(assert (forall (($generated@@75 Int) ) (! (= ($generated@@74 $generated@@75) (to_real $generated@@75))
 :pattern ( ($generated@@74 $generated@@75))
)))
(assert (forall (($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ) (!  (=> (or (not (= $generated@@76 $generated@@78)) (not true)) (=> (and ($generated@@19 $generated@@76 $generated@@77) ($generated@@19 $generated@@77 $generated@@78)) ($generated@@19 $generated@@76 $generated@@78)))
 :pattern ( ($generated@@19 $generated@@76 $generated@@77) ($generated@@19 $generated@@77 $generated@@78))
)))
(assert (forall (($generated@@81 T@U) ) (!  (=> ($generated@@79 $generated@@81 $generated) (and (= ($generated@@56 $generated@@5 ($generated@@25 $generated@@5 $generated@@81)) $generated@@81) ($generated@@80 $generated@@5 ($generated@@25 $generated@@5 $generated@@81) $generated)))
 :pattern ( ($generated@@79 $generated@@81 $generated))
)))
(assert (forall (($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@T) ) (! (= ($generated@@79 ($generated@@56 $generated@@84 $generated@@82) $generated@@83) ($generated@@80 $generated@@84 $generated@@82 $generated@@83))
 :pattern ( ($generated@@79 ($generated@@56 $generated@@84 $generated@@82) $generated@@83))
)))
(assert (forall (($generated@@85 Int) ) (! (= ($generated@@49 ($generated@@74 $generated@@85)) $generated@@85)
 :pattern ( ($generated@@49 ($generated@@74 $generated@@85)))
)))
(assert (forall (($generated@@86 T@U) ($generated@@87 T@T) ) (! (= ($generated@@25 $generated@@87 ($generated@@56 $generated@@87 $generated@@86)) $generated@@86)
 :pattern ( ($generated@@56 $generated@@87 $generated@@86))
)))
(assert  (and (forall (($generated@@91 T@T) ($generated@@92 T@T) ($generated@@93 T@T) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (! (= ($generated@@88 $generated@@91 $generated@@92 $generated@@93 ($generated@@90 $generated@@91 $generated@@92 $generated@@93 $generated@@95 $generated@@96 $generated@@97 $generated@@94) $generated@@96 $generated@@97) $generated@@94)
 :weight 0
)) (and (forall (($generated@@98 T@T) ($generated@@99 T@T) ($generated@@100 T@T) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or (= $generated@@103 $generated@@105) (= ($generated@@88 $generated@@98 $generated@@99 $generated@@100 ($generated@@90 $generated@@98 $generated@@99 $generated@@100 $generated@@102 $generated@@103 $generated@@104 $generated@@101) $generated@@105 $generated@@106) ($generated@@88 $generated@@98 $generated@@99 $generated@@100 $generated@@102 $generated@@105 $generated@@106)))
 :weight 0
)) (forall (($generated@@107 T@T) ($generated@@108 T@T) ($generated@@109 T@T) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (!  (or (= $generated@@113 $generated@@115) (= ($generated@@88 $generated@@107 $generated@@108 $generated@@109 ($generated@@90 $generated@@107 $generated@@108 $generated@@109 $generated@@111 $generated@@112 $generated@@113 $generated@@110) $generated@@114 $generated@@115) ($generated@@88 $generated@@107 $generated@@108 $generated@@109 $generated@@111 $generated@@114 $generated@@115)))
 :weight 0
)))))
(assert (forall (($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 Bool) ($generated@@120 T@U) ($generated@@121 T@U) ) (! (= ($generated@@7 ($generated@@88 $generated@@23 $generated@@21 $generated@@3 ($generated@@89 $generated@@116 $generated@@117 $generated@@118 $generated@@119) $generated@@120 $generated@@121))  (=> (and (or (not (= $generated@@120 $generated@@116)) (not true)) ($generated@@7 ($generated@@25 $generated@@3 ($generated@@20 $generated@@21 $generated@@22 ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@117 $generated@@120) $generated@@118)))) $generated@@119))
 :pattern ( ($generated@@88 $generated@@23 $generated@@21 $generated@@3 ($generated@@89 $generated@@116 $generated@@117 $generated@@118 $generated@@119) $generated@@120 $generated@@121))
)))
(assert (forall (($generated@@122 Real) ) (! (= ($generated@@56 $generated@@5 ($generated@@10 ($generated@@51 $generated@@122))) ($generated@@53 $generated@@22 ($generated@@56 $generated@@5 ($generated@@10 $generated@@122))))
 :pattern ( ($generated@@56 $generated@@5 ($generated@@10 ($generated@@51 $generated@@122))))
)))
(assert (forall (($generated@@123 T@U) ($generated@@124 T@T) ) (! (= ($generated@@56 $generated@@124 ($generated@@53 $generated@@124 $generated@@123)) ($generated@@53 $generated@@22 ($generated@@56 $generated@@124 $generated@@123)))
 :pattern ( ($generated@@56 $generated@@124 ($generated@@53 $generated@@124 $generated@@123)))
)))
(assert (forall (($generated@@125 T@U) ($generated@@126 T@U) ) (! ($generated@@60 $generated@@5 $generated@@126 $generated $generated@@125)
 :pattern ( ($generated@@60 $generated@@5 $generated@@126 $generated $generated@@125))
)))
(assert (forall (($generated@@127 T@U) ) (! ($generated@@80 $generated@@5 $generated@@127 $generated)
 :pattern ( ($generated@@80 $generated@@5 $generated@@127 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@128 () Real)
(declare-fun $generated@@129 () T@U)
(declare-fun $generated@@130 () T@U)
(declare-fun $generated@@131 () T@U)
(declare-fun $generated@@132 () Real)
(declare-fun $generated@@133 () Real)
(declare-fun $generated@@134 () T@U)
(declare-fun $generated@@135 () T@U)
(declare-fun $generated@@136 (T@U) Bool)
(declare-fun $generated@@137 () T@U)
(declare-fun $generated@@138 (T@U) Bool)
(declare-fun $generated@@139 () T@U)
(declare-fun $generated@@140 () Real)
(declare-fun $generated@@141 () Real)
(declare-fun $generated@@142 () Real)
(declare-fun $generated@@143 () Real)
(declare-fun $generated@@144 () Real)
(declare-fun $generated@@145 () Int)
(declare-fun $generated@@146 () T@U)
(declare-fun $generated@@147 () T@U)
(declare-fun $generated@@148 () T@U)
(declare-fun $generated@@149 () T@U)
(declare-fun $generated@@150 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 8) (let (($generated@@151 true))
(let (($generated@@152  (=> (and (or (not (= $generated@@128 ($generated@@51 0.0))) (not true)) (= (ControlFlow 0 4) 1)) $generated@@151)))
(let (($generated@@153  (=> (= $generated@@128 ($generated@@51 0.0)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (= ($generated@@74 ($generated@@49 $generated@@128)) $generated@@128)) (=> (= ($generated@@74 ($generated@@49 $generated@@128)) $generated@@128) (=> (= (ControlFlow 0 2) 1) $generated@@151))))))
(let (($generated@@154  (=> (and (= $generated@@129 ($generated@@89 $generated@@130 $generated@@131 $generated@@1 false)) (= $generated@@132 (+ $generated@@133 3.4))) (=> (and (and ($generated@@79 $generated@@134 $generated@@135) ($generated@@59 $generated@@134 $generated@@135 $generated@@131)) (and ($generated@@136 $generated@@137) ($generated@@138 $generated@@137))) (=> (and (and (and ($generated@@79 $generated@@139 $generated) ($generated@@59 $generated@@139 $generated $generated@@137)) (forall (($generated@@155 T@U) ) (!  (=> (and (or (not (= $generated@@155 $generated@@130)) (not true)) ($generated@@7 ($generated@@25 $generated@@3 ($generated@@20 $generated@@21 $generated@@22 ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@131 $generated@@155) $generated@@1)))) (= ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@137 $generated@@155) ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@131 $generated@@155)))
 :pattern ( ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@137 $generated@@155))
))) (and (and ($generated@@19 $generated@@131 $generated@@137) (= $generated@@140 ($generated@@11 ($generated@@25 $generated@@5 $generated@@139)))) (and (= $generated@@141 (+ $generated@@140 3.4)) (= $generated@@142 ($generated@@51 0.0))))) (and (=> (= (ControlFlow 0 5) (- 0 7)) (or (not (= ($generated@@51 3.0) 0.0)) (not true))) (=> (or (not (= ($generated@@51 3.0) 0.0)) (not true)) (=> (and (= $generated@@143 ($generated@@51 (/ 2.0 3.0))) (= $generated@@144 (- $generated@@143 $generated@@143))) (and (=> (= (ControlFlow 0 5) (- 0 6)) (= ($generated@@74 ($generated@@49 $generated@@142)) $generated@@142)) (=> (= ($generated@@74 ($generated@@49 $generated@@142)) $generated@@142) (=> (= $generated@@145 ($generated@@49 $generated@@142)) (=> (and (and ($generated@@79 $generated@@146 $generated@@147) ($generated@@59 $generated@@146 $generated@@147 $generated@@131)) (and ($generated@@136 $generated@@148) ($generated@@138 $generated@@148))) (=> (and (and (and ($generated@@79 $generated@@149 $generated) ($generated@@59 $generated@@149 $generated $generated@@148)) (forall (($generated@@156 T@U) ) (!  (=> (and (or (not (= $generated@@156 $generated@@130)) (not true)) ($generated@@7 ($generated@@25 $generated@@3 ($generated@@20 $generated@@21 $generated@@22 ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@137 $generated@@156) $generated@@1)))) (= ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@148 $generated@@156) ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@137 $generated@@156)))
 :pattern ( ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@148 $generated@@156))
))) (and ($generated@@19 $generated@@137 $generated@@148) (= $generated@@128 ($generated@@11 ($generated@@25 $generated@@5 $generated@@149))))) (and (=> (= (ControlFlow 0 5) 2) $generated@@153) (=> (= (ControlFlow 0 5) 4) $generated@@152)))))))))))))))
(let (($generated@@157  (=> (and (and ($generated@@136 $generated@@131) ($generated@@138 $generated@@131)) (and (= 1 $generated@@150) (= (ControlFlow 0 8) 5))) $generated@@154)))
$generated@@157))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
