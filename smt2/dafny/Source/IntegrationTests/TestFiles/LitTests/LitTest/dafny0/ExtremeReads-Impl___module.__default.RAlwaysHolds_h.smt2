(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 (T@U T@U) Bool)
(declare-fun $generated@@23 (T@U T@U) T@U)
(declare-fun $generated@@24 (Int) T@U)
(declare-fun $generated@@25 (T@U) Int)
(declare-fun $generated@@29 (T@T T@U T@U) Bool)
(declare-fun $generated@@30 () T@T)
(declare-fun $generated@@31 () T@U)
(declare-fun $generated@@32 () T@U)
(declare-fun $generated@@33 (T@U) T@U)
(declare-fun $generated@@35 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@36 () T@U)
(declare-fun $generated@@39 (T@T T@U) T@U)
(declare-fun $generated@@40 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@41 () T@T)
(declare-fun $generated@@42 () T@T)
(declare-fun $generated@@43 (T@T T@T) T@T)
(declare-fun $generated@@44 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@45 (T@T) T@T)
(declare-fun $generated@@46 (T@T) T@T)
(declare-fun $generated@@66 (Int) Int)
(declare-fun $generated@@68 (T@T T@U) T@U)
(declare-fun $generated@@71 (T@T T@U) T@U)
(declare-fun $generated@@74 (T@U) Bool)
(declare-fun $generated@@79 () Int)
(declare-fun $generated@@80 (T@U T@U T@U T@U) Bool)
(declare-fun $generated@@81 (T@U) T@U)
(declare-fun $generated@@82 (T@U) Bool)
(declare-fun $generated@@83 (T@U T@U T@U) Bool)
(declare-fun $generated@@101 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@102 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@103 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@136 (T@U) T@U)
(declare-fun $generated@@137 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (forall (($generated@@20 T@U) ($generated@@21 T@U) ($generated@@22 T@U) ) (!  (=> (and ($generated@@19 $generated@@20 $generated@@21) ($generated@@19 $generated@@21 $generated@@22)) ($generated@@19 $generated@@20 $generated@@22))
 :pattern ( ($generated@@19 $generated@@20 $generated@@21) ($generated@@19 $generated@@21 $generated@@22))
 :pattern ( ($generated@@19 $generated@@20 $generated@@21) ($generated@@19 $generated@@20 $generated@@22))
)))
(assert (forall (($generated@@26 T@U) ($generated@@27 Int) ($generated@@28 Int) ) (!  (=> (and (and (<= 0 $generated@@27) (<= 0 $generated@@28)) (<= (+ $generated@@27 $generated@@28) ($generated@@25 $generated@@26))) (= ($generated@@23 ($generated@@23 $generated@@26 ($generated@@24 $generated@@27)) ($generated@@24 $generated@@28)) ($generated@@23 $generated@@26 ($generated@@24 (+ $generated@@27 $generated@@28)))))
 :pattern ( ($generated@@23 ($generated@@23 $generated@@26 ($generated@@24 $generated@@27)) ($generated@@24 $generated@@28)))
)))
(assert (= ($generated@@3 $generated@@30) 3))
(assert (forall (($generated@@34 T@U) ) (! (= ($generated@@29 $generated@@30 $generated@@34 $generated@@31)  (or (= $generated@@34 $generated@@32) (= ($generated@@33 $generated@@34) $generated@@31)))
 :pattern ( ($generated@@29 $generated@@30 $generated@@34 $generated@@31))
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ) (! (= ($generated@@35 $generated@@30 $generated@@37 $generated@@36 $generated@@38) ($generated@@35 $generated@@30 $generated@@37 $generated@@31 $generated@@38))
 :pattern ( ($generated@@35 $generated@@30 $generated@@37 $generated@@36 $generated@@38))
 :pattern ( ($generated@@35 $generated@@30 $generated@@37 $generated@@31 $generated@@38))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@47 T@T) ($generated@@48 T@T) ($generated@@49 T@U) ($generated@@50 T@U) ($generated@@51 T@U) ) (! (= ($generated@@40 $generated@@47 $generated@@48 ($generated@@44 $generated@@47 $generated@@48 $generated@@50 $generated@@51 $generated@@49) $generated@@51) $generated@@49)
 :weight 0
)) (forall (($generated@@52 T@T) ($generated@@53 T@T) ($generated@@54 T@U) ($generated@@55 T@U) ($generated@@56 T@U) ($generated@@57 T@U) ) (!  (or (= $generated@@56 $generated@@57) (= ($generated@@40 $generated@@52 $generated@@53 ($generated@@44 $generated@@52 $generated@@53 $generated@@55 $generated@@56 $generated@@54) $generated@@57) ($generated@@40 $generated@@52 $generated@@53 $generated@@55 $generated@@57)))
 :weight 0
))) (= ($generated@@3 $generated@@41) 4)) (= ($generated@@3 $generated@@42) 5)) (forall (($generated@@58 T@T) ($generated@@59 T@T) ) (= ($generated@@3 ($generated@@43 $generated@@58 $generated@@59)) 6))) (forall (($generated@@60 T@T) ($generated@@61 T@T) ) (! (= ($generated@@45 ($generated@@43 $generated@@60 $generated@@61)) $generated@@60)
 :pattern ( ($generated@@43 $generated@@60 $generated@@61))
))) (forall (($generated@@62 T@T) ($generated@@63 T@T) ) (! (= ($generated@@46 ($generated@@43 $generated@@62 $generated@@63)) $generated@@63)
 :pattern ( ($generated@@43 $generated@@62 $generated@@63))
))))
(assert (forall (($generated@@64 T@U) ($generated@@65 T@U) ) (! (= ($generated@@35 $generated@@30 $generated@@64 $generated@@31 $generated@@65)  (or (= $generated@@64 $generated@@32) ($generated@@8 ($generated@@39 $generated@@4 ($generated@@40 $generated@@41 $generated@@42 ($generated@@40 $generated@@30 ($generated@@43 $generated@@41 $generated@@42) $generated@@65 $generated@@64) $generated)))))
 :pattern ( ($generated@@35 $generated@@30 $generated@@64 $generated@@31 $generated@@65))
)))
(assert (forall (($generated@@67 Int) ) (! (= ($generated@@66 $generated@@67) $generated@@67)
 :pattern ( ($generated@@66 $generated@@67))
)))
(assert (forall (($generated@@69 T@U) ($generated@@70 T@T) ) (! (= ($generated@@68 $generated@@70 $generated@@69) $generated@@69)
 :pattern ( ($generated@@68 $generated@@70 $generated@@69))
)))
(assert (forall (($generated@@72 T@U) ($generated@@73 T@T) ) (! (= ($generated@@71 $generated@@73 ($generated@@39 $generated@@73 $generated@@72)) $generated@@72)
 :pattern ( ($generated@@39 $generated@@73 $generated@@72))
)))
(assert (forall (($generated@@75 T@U) ($generated@@76 T@U) ) (!  (=> (and ($generated@@74 $generated@@76) (<= ($generated@@25 $generated@@76) ($generated@@25 $generated@@75))) (and (= ($generated@@74 ($generated@@23 $generated@@75 $generated@@76)) ($generated@@74 $generated@@75)) (= ($generated@@25 ($generated@@23 $generated@@75 $generated@@76)) (- ($generated@@25 $generated@@75) ($generated@@25 $generated@@76)))))
 :pattern ( ($generated@@23 $generated@@75 $generated@@76))
)))
(assert (forall (($generated@@77 Int) ) (!  (=> (<= 0 $generated@@77) (and ($generated@@74 ($generated@@24 $generated@@77)) (= ($generated@@25 ($generated@@24 $generated@@77)) $generated@@77)))
 :pattern ( ($generated@@24 $generated@@77))
)))
(assert (forall (($generated@@78 T@U) ) (! (= ($generated@@29 $generated@@30 $generated@@78 $generated@@36)  (and ($generated@@29 $generated@@30 $generated@@78 $generated@@31) (or (not (= $generated@@78 $generated@@32)) (not true))))
 :pattern ( ($generated@@29 $generated@@30 $generated@@78 $generated@@36))
 :pattern ( ($generated@@29 $generated@@30 $generated@@78 $generated@@31))
)))
(assert  (=> (<= 1 $generated@@79) (forall (($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ) (!  (=> (or ($generated@@83 $generated@@85 $generated@@86 $generated@@87) (and (< 1 $generated@@79) (and ($generated@@82 $generated@@85) ($generated@@29 $generated@@30 $generated@@87 $generated@@31)))) (and (and (=> (< 0 ($generated@@25 $generated@@86)) ($generated@@83 $generated@@85 ($generated@@23 $generated@@86 ($generated@@24 1)) $generated@@87)) (=> (=> (< 0 ($generated@@25 $generated@@86)) ($generated@@80 $generated@@84 $generated@@85 ($generated@@23 $generated@@86 ($generated@@24 1)) $generated@@87)) (=> (= ($generated@@66 0) ($generated@@25 $generated@@86)) (forall (($generated@@88 T@U) ) (!  (=> ($generated@@19 $generated@@88 $generated@@86) ($generated@@83 $generated@@85 $generated@@88 $generated@@87))
 :pattern ( ($generated@@80 $generated@@84 $generated@@85 $generated@@88 $generated@@87))
))))) (= ($generated@@80 ($generated@@81 $generated@@84) $generated@@85 $generated@@86 $generated@@87)  (and (=> (< 0 ($generated@@25 $generated@@86)) ($generated@@80 $generated@@84 $generated@@85 ($generated@@23 $generated@@86 ($generated@@24 1)) $generated@@87)) (=> (= ($generated@@66 0) ($generated@@25 $generated@@86)) (forall (($generated@@89 T@U) ) (!  (=> ($generated@@19 $generated@@89 $generated@@86) ($generated@@80 $generated@@84 $generated@@85 $generated@@89 $generated@@87))
 :pattern ( ($generated@@80 $generated@@84 $generated@@85 $generated@@89 $generated@@87))
)))))))
 :pattern ( ($generated@@80 ($generated@@81 $generated@@84) $generated@@85 $generated@@86 $generated@@87) ($generated@@82 $generated@@85))
))))
(assert (forall (($generated@@90 T@U) ($generated@@91 T@U) ) (!  (or (or ($generated@@19 $generated@@90 $generated@@91) (= $generated@@90 $generated@@91)) ($generated@@19 $generated@@91 $generated@@90))
 :pattern ( ($generated@@19 $generated@@90 $generated@@91) ($generated@@19 $generated@@91 $generated@@90))
)))
(assert (forall (($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ) (! (= ($generated@@80 ($generated@@81 $generated@@92) $generated@@93 $generated@@94 $generated@@95) ($generated@@80 $generated@@92 $generated@@93 $generated@@94 $generated@@95))
 :pattern ( ($generated@@80 ($generated@@81 $generated@@92) $generated@@93 $generated@@94 $generated@@95))
)))
(assert (forall (($generated@@96 T@U) ) (! (<= 0 ($generated@@25 $generated@@96))
 :pattern ( ($generated@@25 $generated@@96))
)))
(assert (forall (($generated@@97 T@U) ($generated@@98 T@T) ) (! (= ($generated@@39 $generated@@98 ($generated@@71 $generated@@98 $generated@@97)) $generated@@97)
 :pattern ( ($generated@@71 $generated@@98 $generated@@97))
)))
(assert (forall (($generated@@99 T@U) ($generated@@100 T@U) ) (!  (and (and (and (=> ($generated@@19 $generated@@99 $generated@@100) (or (not (= $generated@@99 $generated@@100)) (not true))) (=> (and ($generated@@74 $generated@@99) (not ($generated@@74 $generated@@100))) ($generated@@19 $generated@@99 $generated@@100))) (=> (and ($generated@@74 $generated@@99) ($generated@@74 $generated@@100)) (= ($generated@@19 $generated@@99 $generated@@100) (< ($generated@@25 $generated@@99) ($generated@@25 $generated@@100))))) (=> (and ($generated@@19 $generated@@99 $generated@@100) ($generated@@74 $generated@@100)) ($generated@@74 $generated@@99)))
 :pattern ( ($generated@@19 $generated@@99 $generated@@100))
)))
(assert  (and (forall (($generated@@104 T@T) ($generated@@105 T@T) ($generated@@106 T@T) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ) (! (= ($generated@@101 $generated@@104 $generated@@105 $generated@@106 ($generated@@103 $generated@@104 $generated@@105 $generated@@106 $generated@@108 $generated@@109 $generated@@110 $generated@@107) $generated@@109 $generated@@110) $generated@@107)
 :weight 0
)) (and (forall (($generated@@111 T@T) ($generated@@112 T@T) ($generated@@113 T@T) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ) (!  (or (= $generated@@116 $generated@@118) (= ($generated@@101 $generated@@111 $generated@@112 $generated@@113 ($generated@@103 $generated@@111 $generated@@112 $generated@@113 $generated@@115 $generated@@116 $generated@@117 $generated@@114) $generated@@118 $generated@@119) ($generated@@101 $generated@@111 $generated@@112 $generated@@113 $generated@@115 $generated@@118 $generated@@119)))
 :weight 0
)) (forall (($generated@@120 T@T) ($generated@@121 T@T) ($generated@@122 T@T) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ) (!  (or (= $generated@@126 $generated@@128) (= ($generated@@101 $generated@@120 $generated@@121 $generated@@122 ($generated@@103 $generated@@120 $generated@@121 $generated@@122 $generated@@124 $generated@@125 $generated@@126 $generated@@123) $generated@@127 $generated@@128) ($generated@@101 $generated@@120 $generated@@121 $generated@@122 $generated@@124 $generated@@127 $generated@@128)))
 :weight 0
)))))
(assert (forall (($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 Bool) ($generated@@133 T@U) ($generated@@134 T@U) ) (! (= ($generated@@8 ($generated@@101 $generated@@30 $generated@@41 $generated@@4 ($generated@@102 $generated@@129 $generated@@130 $generated@@131 $generated@@132) $generated@@133 $generated@@134))  (=> (and (or (not (= $generated@@133 $generated@@129)) (not true)) ($generated@@8 ($generated@@39 $generated@@4 ($generated@@40 $generated@@41 $generated@@42 ($generated@@40 $generated@@30 ($generated@@43 $generated@@41 $generated@@42) $generated@@130 $generated@@133) $generated@@131)))) $generated@@132))
 :pattern ( ($generated@@101 $generated@@30 $generated@@41 $generated@@4 ($generated@@102 $generated@@129 $generated@@130 $generated@@131 $generated@@132) $generated@@133 $generated@@134))
)))
(assert (forall (($generated@@135 T@U) ) (!  (=> ($generated@@74 $generated@@135) (= $generated@@135 ($generated@@24 ($generated@@25 $generated@@135))))
 :pattern ( ($generated@@25 $generated@@135))
 :pattern ( ($generated@@74 $generated@@135))
)))
(assert (= ($generated@@136 $generated@@31) $generated@@0))
(assert (= ($generated@@137 $generated@@31) $generated@@2))
(assert (= ($generated@@136 $generated@@36) $generated@@1))
(assert (= ($generated@@137 $generated@@36) $generated@@2))
(assert (forall (($generated@@138 T@U) ($generated@@139 T@U) ) (!  (=> (and ($generated@@74 $generated@@139) (<= ($generated@@25 $generated@@139) ($generated@@25 $generated@@138))) (or (and (= $generated@@139 ($generated@@24 0)) (= ($generated@@23 $generated@@138 $generated@@139) $generated@@138)) (and (or (not (= $generated@@139 ($generated@@24 0))) (not true)) ($generated@@19 ($generated@@23 $generated@@138 $generated@@139) $generated@@138))))
 :pattern ( ($generated@@23 $generated@@138 $generated@@139))
)))
(assert  (=> (<= 1 $generated@@79) (forall (($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ) (!  (=> (and (and ($generated@@82 $generated@@141) ($generated@@29 $generated@@30 $generated@@142 $generated@@31)) (= $generated@@143 ($generated@@24 0))) ($generated@@80 $generated@@140 $generated@@141 $generated@@143 $generated@@142))
 :pattern ( ($generated@@80 $generated@@140 $generated@@141 $generated@@143 $generated@@142))
))))
(assert (forall (($generated@@144 Int) ) (! (= ($generated@@71 $generated@@5 ($generated@@9 ($generated@@66 $generated@@144))) ($generated@@68 $generated@@42 ($generated@@71 $generated@@5 ($generated@@9 $generated@@144))))
 :pattern ( ($generated@@71 $generated@@5 ($generated@@9 ($generated@@66 $generated@@144))))
)))
(assert (forall (($generated@@145 T@U) ($generated@@146 T@T) ) (! (= ($generated@@71 $generated@@146 ($generated@@68 $generated@@146 $generated@@145)) ($generated@@68 $generated@@42 ($generated@@71 $generated@@146 $generated@@145)))
 :pattern ( ($generated@@71 $generated@@146 ($generated@@68 $generated@@146 $generated@@145)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@147 () T@U)
(declare-fun $generated@@148 () T@U)
(declare-fun $generated@@149 () T@U)
(declare-fun $generated@@150 () T@U)
(declare-fun $generated@@151 () T@U)
(declare-fun $generated@@152 (T@U) Bool)
(declare-fun $generated@@153 () T@U)
(declare-fun $generated@@154 () T@U)
(declare-fun $generated@@155 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 7) (let (($generated@@156  (and (=> (= (ControlFlow 0 2) (- 0 3)) (=> ($generated@@83 $generated@@147 $generated@@148 $generated@@149) (or ($generated@@80 ($generated@@81 $generated@@150) $generated@@147 $generated@@148 $generated@@149) (=> (< 0 ($generated@@25 $generated@@148)) ($generated@@80 ($generated@@81 ($generated@@81 $generated@@150)) $generated@@147 ($generated@@23 $generated@@148 ($generated@@24 1)) $generated@@149))))) (=> (=> ($generated@@83 $generated@@147 $generated@@148 $generated@@149) (or ($generated@@80 ($generated@@81 $generated@@150) $generated@@147 $generated@@148 $generated@@149) (=> (< 0 ($generated@@25 $generated@@148)) ($generated@@80 ($generated@@81 ($generated@@81 $generated@@150)) $generated@@147 ($generated@@23 $generated@@148 ($generated@@24 1)) $generated@@149)))) (=> (= (ControlFlow 0 2) (- 0 1)) (=> ($generated@@83 $generated@@147 $generated@@148 $generated@@149) (or ($generated@@80 ($generated@@81 $generated@@150) $generated@@147 $generated@@148 $generated@@149) (=> (= ($generated@@66 0) ($generated@@25 $generated@@148)) (forall (($generated@@157 T@U) ) (!  (=> ($generated@@19 $generated@@157 $generated@@148) ($generated@@80 ($generated@@81 ($generated@@81 $generated@@150)) $generated@@147 $generated@@157 $generated@@149))
 :pattern ( ($generated@@80 ($generated@@81 ($generated@@81 $generated@@150)) $generated@@147 $generated@@157 $generated@@149))
))))))))))
(let (($generated@@158  (=> (<= ($generated@@25 $generated@@148) 0) (=> (and ($generated@@82 $generated@@151) ($generated@@152 $generated@@151)) (=> (and (and (= $generated@@153 $generated@@151) (forall (($generated@@159 T@U) ($generated@@160 T@U) ) (!  (=> (and ($generated@@29 $generated@@30 $generated@@160 $generated@@31) ($generated@@19 $generated@@159 $generated@@148)) ($generated@@80 ($generated@@81 $generated@@150) $generated@@151 $generated@@159 $generated@@160))
 :pattern ( ($generated@@80 ($generated@@81 $generated@@150) $generated@@151 $generated@@159 $generated@@160))
))) (and (= $generated@@147 $generated@@151) (= (ControlFlow 0 5) 2))) $generated@@156)))))
(let (($generated@@161  (=> (< 0 ($generated@@25 $generated@@148)) (=> (and (= $generated@@147 $generated@@153) (= (ControlFlow 0 4) 2)) $generated@@156))))
(let (($generated@@162  (=> (= $generated@@154 ($generated@@102 $generated@@32 $generated@@155 $generated false)) (=> (and (and ($generated@@82 $generated@@153) ($generated@@152 $generated@@153)) (and (= $generated@@155 $generated@@153) (forall (($generated@@163 T@U) ($generated@@164 T@U) ) (!  (=> (and (and ($generated@@29 $generated@@30 $generated@@164 $generated@@31) ($generated@@8 ($generated@@68 $generated@@4 ($generated@@7 true)))) (or ($generated@@19 $generated@@163 $generated@@148) (and (= $generated@@163 $generated@@148) (and (= $generated@@164 $generated@@32) (or (not (= $generated@@149 $generated@@32)) (not true)))))) ($generated@@80 ($generated@@81 $generated@@150) $generated@@153 $generated@@163 $generated@@164))
 :pattern ( ($generated@@80 ($generated@@81 $generated@@150) $generated@@153 $generated@@163 $generated@@164))
)))) (and (=> (= (ControlFlow 0 6) 4) $generated@@161) (=> (= (ControlFlow 0 6) 5) $generated@@158))))))
(let (($generated@@165  (=> (and ($generated@@82 $generated@@155) ($generated@@152 $generated@@155)) (=> (and (and ($generated@@29 $generated@@30 $generated@@149 $generated@@31) ($generated@@35 $generated@@30 $generated@@149 $generated@@31 $generated@@155)) (and (= 2 $generated@@79) (= (ControlFlow 0 7) 6))) $generated@@162))))
$generated@@165))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
