(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@20 () T@U)
(declare-fun $generated@@23 (T@U T@U) Int)
(declare-fun $generated@@24 (T@U T@U Int) T@U)
(declare-fun $generated@@29 (T@T T@U T@U) Bool)
(declare-fun $generated@@30 () T@T)
(declare-fun $generated@@31 (T@U) T@U)
(declare-fun $generated@@32 (T@U) Bool)
(declare-fun $generated@@35 (Int) Int)
(declare-fun $generated@@37 (T@T T@U) T@U)
(declare-fun $generated@@40 (T@T T@U) T@U)
(declare-fun $generated@@41 (T@T T@U) T@U)
(declare-fun $generated@@45 (T@U T@U T@U) Bool)
(declare-fun $generated@@50 (T@U T@U) Bool)
(declare-fun $generated@@55 (T@U) Int)
(declare-fun $generated@@65 () T@U)
(declare-fun $generated@@67 (T@U) T@U)
(declare-fun $generated@@69 (T@U) T@U)
(declare-fun $generated@@75 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@76 () T@T)
(declare-fun $generated@@77 () T@T)
(declare-fun $generated@@78 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@79 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@80 () T@T)
(declare-fun $generated@@81 (T@T T@T) T@T)
(declare-fun $generated@@82 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@83 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@84 (T@T) T@T)
(declare-fun $generated@@85 (T@T) T@T)
(declare-fun $generated@@136 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (forall (($generated@@21 T@U) ($generated@@22 T@U) ) (! ($generated@@19 $generated@@5 $generated@@21 $generated@@20 $generated@@22)
 :pattern ( ($generated@@19 $generated@@5 $generated@@21 $generated@@20 $generated@@22))
)))
(assert (forall (($generated@@25 T@U) ($generated@@26 T@U) ($generated@@27 Int) ($generated@@28 T@U) ) (!  (=> (<= 0 $generated@@27) (and (=> (= $generated@@26 $generated@@28) (= ($generated@@23 ($generated@@24 $generated@@25 $generated@@26 $generated@@27) $generated@@28) $generated@@27)) (=> (or (not (= $generated@@26 $generated@@28)) (not true)) (= ($generated@@23 ($generated@@24 $generated@@25 $generated@@26 $generated@@27) $generated@@28) ($generated@@23 $generated@@25 $generated@@28)))))
 :pattern ( ($generated@@23 ($generated@@24 $generated@@25 $generated@@26 $generated@@27) $generated@@28))
)))
(assert (= ($generated@@3 $generated@@30) 3))
(assert (forall (($generated@@33 T@U) ($generated@@34 T@U) ) (!  (=> ($generated@@29 $generated@@30 $generated@@33 ($generated@@31 $generated@@34)) ($generated@@32 $generated@@33))
 :pattern ( ($generated@@29 $generated@@30 $generated@@33 ($generated@@31 $generated@@34)))
)))
(assert (forall (($generated@@36 Int) ) (! (= ($generated@@35 $generated@@36) $generated@@36)
 :pattern ( ($generated@@35 $generated@@36))
)))
(assert (forall (($generated@@38 T@U) ($generated@@39 T@T) ) (! (= ($generated@@37 $generated@@39 $generated@@38) $generated@@38)
 :pattern ( ($generated@@37 $generated@@39 $generated@@38))
)))
(assert (forall (($generated@@42 T@U) ($generated@@43 T@T) ) (! (= ($generated@@41 $generated@@43 ($generated@@40 $generated@@43 $generated@@42)) $generated@@42)
 :pattern ( ($generated@@40 $generated@@43 $generated@@42))
)))
(assert (forall (($generated@@44 T@U) ) (! (= ($generated@@29 $generated@@5 $generated@@44 $generated@@20) (<= ($generated@@35 0) ($generated@@10 $generated@@44)))
 :pattern ( ($generated@@29 $generated@@5 $generated@@44 $generated@@20))
)))
(assert (forall (($generated@@46 T@U) ($generated@@47 T@U) ($generated@@48 T@U) ($generated@@49 T@T) ) (! (= ($generated@@45 ($generated@@41 $generated@@49 $generated@@46) $generated@@47 $generated@@48) ($generated@@19 $generated@@49 $generated@@46 $generated@@47 $generated@@48))
 :pattern ( ($generated@@45 ($generated@@41 $generated@@49 $generated@@46) $generated@@47 $generated@@48))
)))
(assert (forall (($generated@@51 T@U) ) (!  (=> ($generated@@50 $generated@@51 $generated@@20) (and (= ($generated@@41 $generated@@5 ($generated@@40 $generated@@5 $generated@@51)) $generated@@51) ($generated@@29 $generated@@5 ($generated@@40 $generated@@5 $generated@@51) $generated@@20)))
 :pattern ( ($generated@@50 $generated@@51 $generated@@20))
)))
(assert (forall (($generated@@52 T@U) ($generated@@53 T@U) ) (! (= ($generated@@29 $generated@@30 $generated@@52 ($generated@@31 $generated@@53)) (forall (($generated@@54 T@U) ) (!  (=> (< 0 ($generated@@23 $generated@@52 $generated@@54)) ($generated@@50 $generated@@54 $generated@@53))
 :pattern ( ($generated@@23 $generated@@52 $generated@@54))
)))
 :pattern ( ($generated@@29 $generated@@30 $generated@@52 ($generated@@31 $generated@@53)))
)))
(assert (forall (($generated@@56 T@U) ($generated@@57 T@U) ($generated@@58 Int) ) (!  (=> (<= 0 $generated@@58) (= ($generated@@55 ($generated@@24 $generated@@56 $generated@@57 $generated@@58)) (+ (- ($generated@@55 $generated@@56) ($generated@@23 $generated@@56 $generated@@57)) $generated@@58)))
 :pattern ( ($generated@@55 ($generated@@24 $generated@@56 $generated@@57 $generated@@58)))
)))
(assert (forall (($generated@@59 T@U) ($generated@@60 T@U) ($generated@@61 T@T) ) (! (= ($generated@@50 ($generated@@41 $generated@@61 $generated@@59) $generated@@60) ($generated@@29 $generated@@61 $generated@@59 $generated@@60))
 :pattern ( ($generated@@50 ($generated@@41 $generated@@61 $generated@@59) $generated@@60))
)))
(assert (forall (($generated@@62 T@U) ) (! (= ($generated@@32 $generated@@62) (forall (($generated@@63 T@U) ) (!  (and (<= 0 ($generated@@23 $generated@@62 $generated@@63)) (<= ($generated@@23 $generated@@62 $generated@@63) ($generated@@55 $generated@@62)))
 :pattern ( ($generated@@23 $generated@@62 $generated@@63))
)))
 :pattern ( ($generated@@32 $generated@@62))
)))
(assert (forall (($generated@@64 T@U) ) (! (<= 0 ($generated@@55 $generated@@64))
 :pattern ( ($generated@@55 $generated@@64))
)))
(assert (forall (($generated@@66 T@U) ) (! (= ($generated@@23 $generated@@65 $generated@@66) 0)
 :pattern ( ($generated@@23 $generated@@65 $generated@@66))
)))
(assert (forall (($generated@@68 T@U) ) (! (= ($generated@@67 ($generated@@31 $generated@@68)) $generated@@68)
 :pattern ( ($generated@@31 $generated@@68))
)))
(assert (forall (($generated@@70 T@U) ) (! (= ($generated@@69 ($generated@@31 $generated@@70)) $generated)
 :pattern ( ($generated@@31 $generated@@70))
)))
(assert (forall (($generated@@71 T@U) ($generated@@72 T@T) ) (! (= ($generated@@40 $generated@@72 ($generated@@41 $generated@@72 $generated@@71)) $generated@@71)
 :pattern ( ($generated@@41 $generated@@72 $generated@@71))
)))
(assert (forall (($generated@@73 T@U) ) (!  (and (= (= ($generated@@55 $generated@@73) 0) (= $generated@@73 $generated@@65)) (=> (or (not (= ($generated@@55 $generated@@73) 0)) (not true)) (exists (($generated@@74 T@U) ) (! (< 0 ($generated@@23 $generated@@73 $generated@@74))
 :pattern ( ($generated@@23 $generated@@73 $generated@@74))
))))
 :pattern ( ($generated@@55 $generated@@73))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@86 T@T) ($generated@@87 T@T) ($generated@@88 T@T) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ) (! (= ($generated@@75 $generated@@86 $generated@@87 $generated@@88 ($generated@@82 $generated@@86 $generated@@87 $generated@@88 $generated@@90 $generated@@91 $generated@@92 $generated@@89) $generated@@91 $generated@@92) $generated@@89)
 :weight 0
)) (and (forall (($generated@@93 T@T) ($generated@@94 T@T) ($generated@@95 T@T) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ) (!  (or (= $generated@@98 $generated@@100) (= ($generated@@75 $generated@@93 $generated@@94 $generated@@95 ($generated@@82 $generated@@93 $generated@@94 $generated@@95 $generated@@97 $generated@@98 $generated@@99 $generated@@96) $generated@@100 $generated@@101) ($generated@@75 $generated@@93 $generated@@94 $generated@@95 $generated@@97 $generated@@100 $generated@@101)))
 :weight 0
)) (forall (($generated@@102 T@T) ($generated@@103 T@T) ($generated@@104 T@T) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ) (!  (or (= $generated@@108 $generated@@110) (= ($generated@@75 $generated@@102 $generated@@103 $generated@@104 ($generated@@82 $generated@@102 $generated@@103 $generated@@104 $generated@@106 $generated@@107 $generated@@108 $generated@@105) $generated@@109 $generated@@110) ($generated@@75 $generated@@102 $generated@@103 $generated@@104 $generated@@106 $generated@@109 $generated@@110)))
 :weight 0
)))) (= ($generated@@3 $generated@@76) 4)) (= ($generated@@3 $generated@@77) 5)) (forall (($generated@@111 T@T) ($generated@@112 T@T) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (! (= ($generated@@79 $generated@@111 $generated@@112 ($generated@@83 $generated@@111 $generated@@112 $generated@@114 $generated@@115 $generated@@113) $generated@@115) $generated@@113)
 :weight 0
))) (forall (($generated@@116 T@T) ($generated@@117 T@T) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ) (!  (or (= $generated@@120 $generated@@121) (= ($generated@@79 $generated@@116 $generated@@117 ($generated@@83 $generated@@116 $generated@@117 $generated@@119 $generated@@120 $generated@@118) $generated@@121) ($generated@@79 $generated@@116 $generated@@117 $generated@@119 $generated@@121)))
 :weight 0
))) (= ($generated@@3 $generated@@80) 6)) (forall (($generated@@122 T@T) ($generated@@123 T@T) ) (= ($generated@@3 ($generated@@81 $generated@@122 $generated@@123)) 7))) (forall (($generated@@124 T@T) ($generated@@125 T@T) ) (! (= ($generated@@84 ($generated@@81 $generated@@124 $generated@@125)) $generated@@124)
 :pattern ( ($generated@@81 $generated@@124 $generated@@125))
))) (forall (($generated@@126 T@T) ($generated@@127 T@T) ) (! (= ($generated@@85 ($generated@@81 $generated@@126 $generated@@127)) $generated@@127)
 :pattern ( ($generated@@81 $generated@@126 $generated@@127))
))))
(assert (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 Bool) ($generated@@132 T@U) ($generated@@133 T@U) ) (! (= ($generated@@8 ($generated@@75 $generated@@76 $generated@@77 $generated@@4 ($generated@@78 $generated@@128 $generated@@129 $generated@@130 $generated@@131) $generated@@132 $generated@@133))  (=> (and (or (not (= $generated@@132 $generated@@128)) (not true)) ($generated@@8 ($generated@@40 $generated@@4 ($generated@@79 $generated@@77 $generated@@80 ($generated@@79 $generated@@76 ($generated@@81 $generated@@77 $generated@@80) $generated@@129 $generated@@132) $generated@@130)))) $generated@@131))
 :pattern ( ($generated@@75 $generated@@76 $generated@@77 $generated@@4 ($generated@@78 $generated@@128 $generated@@129 $generated@@130 $generated@@131) $generated@@132 $generated@@133))
)))
(assert (forall (($generated@@134 T@U) ($generated@@135 T@U) ) (!  (=> ($generated@@50 $generated@@134 ($generated@@31 $generated@@135)) (and (= ($generated@@41 $generated@@30 ($generated@@40 $generated@@30 $generated@@134)) $generated@@134) ($generated@@29 $generated@@30 ($generated@@40 $generated@@30 $generated@@134) ($generated@@31 $generated@@135))))
 :pattern ( ($generated@@50 $generated@@134 ($generated@@31 $generated@@135)))
)))
(assert (= ($generated@@69 $generated@@20) $generated@@1))
(assert (= ($generated@@136 $generated@@20) $generated@@2))
(assert (forall (($generated@@137 Int) ) (! (= ($generated@@41 $generated@@5 ($generated@@9 ($generated@@35 $generated@@137))) ($generated@@37 $generated@@80 ($generated@@41 $generated@@5 ($generated@@9 $generated@@137))))
 :pattern ( ($generated@@41 $generated@@5 ($generated@@9 ($generated@@35 $generated@@137))))
)))
(assert (forall (($generated@@138 T@U) ($generated@@139 T@T) ) (! (= ($generated@@41 $generated@@139 ($generated@@37 $generated@@139 $generated@@138)) ($generated@@37 $generated@@80 ($generated@@41 $generated@@139 $generated@@138)))
 :pattern ( ($generated@@41 $generated@@139 ($generated@@37 $generated@@139 $generated@@138)))
)))
(assert (forall (($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ) (! (= ($generated@@19 $generated@@30 $generated@@140 ($generated@@31 $generated@@141) $generated@@142) (forall (($generated@@143 T@U) ) (!  (=> (< 0 ($generated@@23 $generated@@140 $generated@@143)) ($generated@@45 $generated@@143 $generated@@141 $generated@@142))
 :pattern ( ($generated@@23 $generated@@140 $generated@@143))
)))
 :pattern ( ($generated@@19 $generated@@30 $generated@@140 ($generated@@31 $generated@@141) $generated@@142))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@144 () T@U)
(declare-fun $generated@@145 () T@U)
(declare-fun $generated@@146 () T@U)
(declare-fun $generated@@147 () T@U)
(declare-fun $generated@@148 (T@U) Bool)
(declare-fun $generated@@149 (T@U) Bool)
(declare-fun $generated@@150 () T@U)
(declare-fun $generated@@151 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 8) (let (($generated@@152  (and (=> (= (ControlFlow 0 5) (- 0 6)) ($generated@@29 $generated@@5 ($generated@@9 ($generated@@35 2)) $generated@@20)) (=> ($generated@@29 $generated@@5 ($generated@@9 ($generated@@35 2)) $generated@@20) (=> (= (ControlFlow 0 5) (- 0 4)) (<= 0 ($generated@@35 (- 0 5))))))))
(let (($generated@@153  (and (=> (= (ControlFlow 0 2) (- 0 3)) ($generated@@29 $generated@@5 ($generated@@9 ($generated@@35 (- 0 2))) $generated@@20)) (=> ($generated@@29 $generated@@5 ($generated@@9 ($generated@@35 (- 0 2))) $generated@@20) (=> (= (ControlFlow 0 2) (- 0 1)) (<= 0 ($generated@@35 5)))))))
(let (($generated@@154  (=> (= $generated@@144 ($generated@@78 $generated@@145 $generated@@146 $generated@@0 false)) (=> (and ($generated@@29 $generated@@30 $generated@@147 ($generated@@31 $generated@@20)) ($generated@@19 $generated@@30 $generated@@147 ($generated@@31 $generated@@20) $generated@@146)) (and (=> (= (ControlFlow 0 7) 2) $generated@@153) (=> (= (ControlFlow 0 7) 5) $generated@@152))))))
(let (($generated@@155  (=> (and ($generated@@148 $generated@@146) ($generated@@149 $generated@@146)) (=> (and (and (and ($generated@@29 $generated@@30 $generated@@150 ($generated@@31 $generated@@20)) ($generated@@19 $generated@@30 $generated@@150 ($generated@@31 $generated@@20) $generated@@146)) true) (and (= 0 $generated@@151) (= (ControlFlow 0 8) 7))) $generated@@154))))
$generated@@155)))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 5) (- 4))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 3))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
