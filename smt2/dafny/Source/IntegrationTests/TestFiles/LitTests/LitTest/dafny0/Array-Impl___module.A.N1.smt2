(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 (T@T) Int)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 () T@T)
(declare-fun $generated@@12 (Bool) T@U)
(declare-fun $generated@@13 (T@U) Bool)
(declare-fun $generated@@14 (Int) T@U)
(declare-fun $generated@@15 (T@U) Int)
(declare-fun $generated@@16 (Real) T@U)
(declare-fun $generated@@17 (T@U) Real)
(declare-fun $generated@@24 (T@U) T@U)
(declare-fun $generated@@25 (T@U) Int)
(declare-fun $generated@@26 (T@U) T@U)
(declare-fun $generated@@27 () T@U)
(declare-fun $generated@@28 (T@U) T@U)
(declare-fun $generated@@29 (T@T T@U T@U) Bool)
(declare-fun $generated@@32 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@33 () T@T)
(declare-fun $generated@@34 (T@U) T@U)
(declare-fun $generated@@38 () T@U)
(declare-fun $generated@@40 () T@U)
(declare-fun $generated@@43 (T@T T@U) T@U)
(declare-fun $generated@@44 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@45 () T@T)
(declare-fun $generated@@46 () T@T)
(declare-fun $generated@@47 (T@T T@T) T@T)
(declare-fun $generated@@48 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@49 (T@T) T@T)
(declare-fun $generated@@50 (T@T) T@T)
(declare-fun $generated@@73 (T@T T@U) T@U)
(declare-fun $generated@@78 (T@U) T@U)
(declare-fun $generated@@81 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@82 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@83 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@119 (T@U) T@U)
(declare-fun $generated@@121 (T@U) T@U)
(declare-fun $generated@@125 (T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@8 $generated@@9) 0) (= ($generated@@8 $generated@@10) 1)) (= ($generated@@8 $generated@@11) 2)) (forall (($generated@@18 Bool) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 Real) ) (! (= ($generated@@17 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 T@U) ) (! (= ($generated@@16 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7)
)
(assert (= ($generated@@24 $generated) $generated@@0))
(assert (forall (($generated@@30 T@U) ($generated@@31 T@U) ) (!  (=> (and (or (not (= $generated@@31 $generated@@27)) (not true)) (= ($generated@@28 $generated@@31) ($generated@@26 $generated@@30))) ($generated@@29 $generated@@10 ($generated@@14 ($generated@@25 $generated@@31)) $generated))
 :pattern ( ($generated@@25 $generated@@31) ($generated@@26 $generated@@30))
)))
(assert (= ($generated@@8 $generated@@33) 3))
(assert (forall (($generated@@35 T@U) ($generated@@36 T@U) ($generated@@37 T@U) ) (! (= ($generated@@32 $generated@@33 $generated@@36 ($generated@@34 $generated@@35) $generated@@37) ($generated@@32 $generated@@33 $generated@@36 ($generated@@26 $generated@@35) $generated@@37))
 :pattern ( ($generated@@32 $generated@@33 $generated@@36 ($generated@@34 $generated@@35) $generated@@37))
 :pattern ( ($generated@@32 $generated@@33 $generated@@36 ($generated@@26 $generated@@35) $generated@@37))
)))
(assert (forall (($generated@@39 T@U) ) (! (= ($generated@@29 $generated@@33 $generated@@39 $generated@@38)  (or (= $generated@@39 $generated@@27) (= ($generated@@28 $generated@@39) $generated@@38)))
 :pattern ( ($generated@@29 $generated@@33 $generated@@39 $generated@@38))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (= ($generated@@32 $generated@@33 $generated@@41 $generated@@40 $generated@@42) ($generated@@32 $generated@@33 $generated@@41 $generated@@38 $generated@@42))
 :pattern ( ($generated@@32 $generated@@33 $generated@@41 $generated@@40 $generated@@42))
 :pattern ( ($generated@@32 $generated@@33 $generated@@41 $generated@@38 $generated@@42))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@51 T@T) ($generated@@52 T@T) ($generated@@53 T@U) ($generated@@54 T@U) ($generated@@55 T@U) ) (! (= ($generated@@44 $generated@@51 $generated@@52 ($generated@@48 $generated@@51 $generated@@52 $generated@@54 $generated@@55 $generated@@53) $generated@@55) $generated@@53)
 :weight 0
)) (forall (($generated@@56 T@T) ($generated@@57 T@T) ($generated@@58 T@U) ($generated@@59 T@U) ($generated@@60 T@U) ($generated@@61 T@U) ) (!  (or (= $generated@@60 $generated@@61) (= ($generated@@44 $generated@@56 $generated@@57 ($generated@@48 $generated@@56 $generated@@57 $generated@@59 $generated@@60 $generated@@58) $generated@@61) ($generated@@44 $generated@@56 $generated@@57 $generated@@59 $generated@@61)))
 :weight 0
))) (= ($generated@@8 $generated@@45) 4)) (= ($generated@@8 $generated@@46) 5)) (forall (($generated@@62 T@T) ($generated@@63 T@T) ) (= ($generated@@8 ($generated@@47 $generated@@62 $generated@@63)) 6))) (forall (($generated@@64 T@T) ($generated@@65 T@T) ) (! (= ($generated@@49 ($generated@@47 $generated@@64 $generated@@65)) $generated@@64)
 :pattern ( ($generated@@47 $generated@@64 $generated@@65))
))) (forall (($generated@@66 T@T) ($generated@@67 T@T) ) (! (= ($generated@@50 ($generated@@47 $generated@@66 $generated@@67)) $generated@@67)
 :pattern ( ($generated@@47 $generated@@66 $generated@@67))
))))
(assert (forall (($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ) (! (= ($generated@@32 $generated@@33 $generated@@69 ($generated@@26 $generated@@68) $generated@@70)  (or (= $generated@@69 $generated@@27) ($generated@@13 ($generated@@43 $generated@@9 ($generated@@44 $generated@@45 $generated@@46 ($generated@@44 $generated@@33 ($generated@@47 $generated@@45 $generated@@46) $generated@@70 $generated@@69) $generated@@1)))))
 :pattern ( ($generated@@32 $generated@@33 $generated@@69 ($generated@@26 $generated@@68) $generated@@70))
)))
(assert (forall (($generated@@71 T@U) ($generated@@72 T@U) ) (! (= ($generated@@32 $generated@@33 $generated@@71 $generated@@38 $generated@@72)  (or (= $generated@@71 $generated@@27) ($generated@@13 ($generated@@43 $generated@@9 ($generated@@44 $generated@@45 $generated@@46 ($generated@@44 $generated@@33 ($generated@@47 $generated@@45 $generated@@46) $generated@@72 $generated@@71) $generated@@1)))))
 :pattern ( ($generated@@32 $generated@@33 $generated@@71 $generated@@38 $generated@@72))
)))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@T) ) (! (= ($generated@@73 $generated@@75 ($generated@@43 $generated@@75 $generated@@74)) $generated@@74)
 :pattern ( ($generated@@43 $generated@@75 $generated@@74))
)))
(assert (forall (($generated@@76 T@U) ($generated@@77 T@U) ) (! (= ($generated@@29 $generated@@33 $generated@@77 ($generated@@34 $generated@@76))  (and ($generated@@29 $generated@@33 $generated@@77 ($generated@@26 $generated@@76)) (or (not (= $generated@@77 $generated@@27)) (not true))))
 :pattern ( ($generated@@29 $generated@@33 $generated@@77 ($generated@@34 $generated@@76)))
 :pattern ( ($generated@@29 $generated@@33 $generated@@77 ($generated@@26 $generated@@76)))
)))
(assert (forall (($generated@@79 T@U) ) (!  (and (= ($generated@@24 ($generated@@26 $generated@@79)) $generated@@2) (= ($generated@@78 ($generated@@26 $generated@@79)) $generated@@6))
 :pattern ( ($generated@@26 $generated@@79))
)))
(assert (forall (($generated@@80 T@U) ) (!  (and (= ($generated@@24 ($generated@@34 $generated@@80)) $generated@@3) (= ($generated@@78 ($generated@@34 $generated@@80)) $generated@@6))
 :pattern ( ($generated@@34 $generated@@80))
)))
(assert  (and (forall (($generated@@84 T@T) ($generated@@85 T@T) ($generated@@86 T@T) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ) (! (= ($generated@@81 $generated@@84 $generated@@85 $generated@@86 ($generated@@83 $generated@@84 $generated@@85 $generated@@86 $generated@@88 $generated@@89 $generated@@90 $generated@@87) $generated@@89 $generated@@90) $generated@@87)
 :weight 0
)) (and (forall (($generated@@91 T@T) ($generated@@92 T@T) ($generated@@93 T@T) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ) (!  (or (= $generated@@96 $generated@@98) (= ($generated@@81 $generated@@91 $generated@@92 $generated@@93 ($generated@@83 $generated@@91 $generated@@92 $generated@@93 $generated@@95 $generated@@96 $generated@@97 $generated@@94) $generated@@98 $generated@@99) ($generated@@81 $generated@@91 $generated@@92 $generated@@93 $generated@@95 $generated@@98 $generated@@99)))
 :weight 0
)) (forall (($generated@@100 T@T) ($generated@@101 T@T) ($generated@@102 T@T) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ) (!  (or (= $generated@@106 $generated@@108) (= ($generated@@81 $generated@@100 $generated@@101 $generated@@102 ($generated@@83 $generated@@100 $generated@@101 $generated@@102 $generated@@104 $generated@@105 $generated@@106 $generated@@103) $generated@@107 $generated@@108) ($generated@@81 $generated@@100 $generated@@101 $generated@@102 $generated@@104 $generated@@107 $generated@@108)))
 :weight 0
)))))
(assert (forall (($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ) (! (= ($generated@@13 ($generated@@81 $generated@@33 $generated@@45 $generated@@9 ($generated@@82 $generated@@109 $generated@@110 $generated@@111 $generated@@112) $generated@@113 $generated@@114))  (=> (and (or (not (= $generated@@113 $generated@@109)) (not true)) ($generated@@13 ($generated@@43 $generated@@9 ($generated@@44 $generated@@45 $generated@@46 ($generated@@44 $generated@@33 ($generated@@47 $generated@@45 $generated@@46) $generated@@110 $generated@@113) $generated@@111)))) (= $generated@@113 $generated@@112)))
 :pattern ( ($generated@@81 $generated@@33 $generated@@45 $generated@@9 ($generated@@82 $generated@@109 $generated@@110 $generated@@111 $generated@@112) $generated@@113 $generated@@114))
)))
(assert (forall (($generated@@115 T@U) ($generated@@116 T@U) ) (! (= ($generated@@29 $generated@@33 $generated@@116 ($generated@@26 $generated@@115))  (or (= $generated@@116 $generated@@27) (= ($generated@@28 $generated@@116) ($generated@@26 $generated@@115))))
 :pattern ( ($generated@@29 $generated@@33 $generated@@116 ($generated@@26 $generated@@115)))
)))
(assert (forall (($generated@@117 T@U) ) (! (= ($generated@@29 $generated@@33 $generated@@117 $generated@@40)  (and ($generated@@29 $generated@@33 $generated@@117 $generated@@38) (or (not (= $generated@@117 $generated@@27)) (not true))))
 :pattern ( ($generated@@29 $generated@@33 $generated@@117 $generated@@40))
 :pattern ( ($generated@@29 $generated@@33 $generated@@117 $generated@@38))
)))
(assert (forall (($generated@@118 T@U) ) (! (<= 0 ($generated@@25 $generated@@118))
 :pattern ( ($generated@@25 $generated@@118))
)))
(assert (forall (($generated@@120 T@U) ) (! (= ($generated@@119 ($generated@@26 $generated@@120)) $generated@@120)
 :pattern ( ($generated@@26 $generated@@120))
)))
(assert (forall (($generated@@122 T@U) ) (! (= ($generated@@121 ($generated@@34 $generated@@122)) $generated@@122)
 :pattern ( ($generated@@34 $generated@@122))
)))
(assert (forall (($generated@@123 T@U) ($generated@@124 T@T) ) (! (= ($generated@@43 $generated@@124 ($generated@@73 $generated@@124 $generated@@123)) $generated@@123)
 :pattern ( ($generated@@73 $generated@@124 $generated@@123))
)))
(assert (forall (($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ) (!  (=> (and (and ($generated@@125 $generated@@127) (and (or (not (= $generated@@128 $generated@@27)) (not true)) (= ($generated@@28 $generated@@128) ($generated@@26 $generated@@126)))) ($generated@@13 ($generated@@43 $generated@@9 ($generated@@44 $generated@@45 $generated@@46 ($generated@@44 $generated@@33 ($generated@@47 $generated@@45 $generated@@46) $generated@@127 $generated@@128) $generated@@1)))) ($generated@@32 $generated@@10 ($generated@@14 ($generated@@25 $generated@@128)) $generated $generated@@127))
 :pattern ( ($generated@@25 $generated@@128) ($generated@@43 $generated@@9 ($generated@@44 $generated@@45 $generated@@46 ($generated@@44 $generated@@33 ($generated@@47 $generated@@45 $generated@@46) $generated@@127 $generated@@128) $generated@@1)) ($generated@@26 $generated@@126))
)))
(assert (= ($generated@@24 $generated@@38) $generated@@4))
(assert (= ($generated@@78 $generated@@38) $generated@@7))
(assert (= ($generated@@24 $generated@@40) $generated@@5))
(assert (= ($generated@@78 $generated@@40) $generated@@7))
(assert (forall (($generated@@129 T@U) ($generated@@130 T@U) ) (! ($generated@@32 $generated@@10 $generated@@130 $generated $generated@@129)
 :pattern ( ($generated@@32 $generated@@10 $generated@@130 $generated $generated@@129))
)))
(assert (forall (($generated@@131 T@U) ) (! ($generated@@29 $generated@@10 $generated@@131 $generated)
 :pattern ( ($generated@@29 $generated@@10 $generated@@131 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@132 () T@U)
(declare-fun $generated@@133 () T@U)
(declare-fun $generated@@134 () T@U)
(declare-fun $generated@@135 (T@U) Bool)
(declare-fun $generated@@136 () T@U)
(declare-fun $generated@@137 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@138  (=> (and (= $generated@@132 ($generated@@82 $generated@@27 $generated@@133 $generated@@1 $generated@@134)) (= (ControlFlow 0 2) (- 0 1))) (or (not (= $generated@@134 $generated@@27)) (not true)))))
(let (($generated@@139  (=> (and (and (and ($generated@@125 $generated@@133) ($generated@@135 $generated@@133)) (and (or (not (= $generated@@136 $generated@@27)) (not true)) (and ($generated@@29 $generated@@33 $generated@@136 $generated@@40) ($generated@@32 $generated@@33 $generated@@136 $generated@@40 $generated@@133)))) (and (and ($generated@@29 $generated@@33 $generated@@134 ($generated@@26 $generated)) ($generated@@32 $generated@@33 $generated@@134 ($generated@@26 $generated) $generated@@133)) (and (= 0 $generated@@137) (= (ControlFlow 0 3) 2)))) $generated@@138)))
$generated@@139)))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
