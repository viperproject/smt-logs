(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U T@U) Bool)
(declare-fun $generated@@0 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@1 () T@T)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 (T@T T@T) T@T)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 (T@U) Bool)
(declare-fun $generated@@7 (T@T T@U) T@U)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (T@T) Int)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 () T@T)
(declare-fun $generated@@12 (Bool) T@U)
(declare-fun $generated@@13 (Int) T@U)
(declare-fun $generated@@14 (T@U) Int)
(declare-fun $generated@@15 (Real) T@U)
(declare-fun $generated@@16 (T@U) Real)
(declare-fun $generated@@17 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@18 (T@T) T@T)
(declare-fun $generated@@19 (T@T) T@T)
(declare-fun $generated@@46 (Int) Int)
(declare-fun $generated@@48 (Real) Real)
(declare-fun $generated@@50 (T@T T@U) T@U)
(declare-fun $generated@@53 (T@T T@U) T@U)
(declare-fun $generated@@56 (Int) Real)
(declare-fun $generated@@63 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@64 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@65 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@9 $generated@@8) 0) (= ($generated@@9 $generated@@10) 1)) (= ($generated@@9 $generated@@11) 2)) (forall (($generated@@20 Bool) ) (! (= ($generated@@6 ($generated@@12 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@12 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@12 ($generated@@6 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@6 $generated@@21))
))) (forall (($generated@@22 Int) ) (! (= ($generated@@14 ($generated@@13 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@13 $generated@@22))
))) (forall (($generated@@23 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@14 $generated@@23))
))) (forall (($generated@@24 Real) ) (! (= ($generated@@16 ($generated@@15 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@15 $generated@@24))
))) (forall (($generated@@25 T@U) ) (! (= ($generated@@15 ($generated@@16 $generated@@25)) $generated@@25)
 :pattern ( ($generated@@16 $generated@@25))
))) (forall (($generated@@26 T@T) ($generated@@27 T@T) ($generated@@28 T@U) ($generated@@29 T@U) ($generated@@30 T@U) ) (! (= ($generated@@0 $generated@@26 $generated@@27 ($generated@@17 $generated@@26 $generated@@27 $generated@@29 $generated@@30 $generated@@28) $generated@@30) $generated@@28)
 :weight 0
))) (forall (($generated@@31 T@T) ($generated@@32 T@T) ($generated@@33 T@U) ($generated@@34 T@U) ($generated@@35 T@U) ($generated@@36 T@U) ) (!  (or (= $generated@@35 $generated@@36) (= ($generated@@0 $generated@@31 $generated@@32 ($generated@@17 $generated@@31 $generated@@32 $generated@@34 $generated@@35 $generated@@33) $generated@@36) ($generated@@0 $generated@@31 $generated@@32 $generated@@34 $generated@@36)))
 :weight 0
))) (= ($generated@@9 $generated@@1) 3)) (= ($generated@@9 $generated@@2) 4)) (= ($generated@@9 $generated@@3) 5)) (forall (($generated@@37 T@T) ($generated@@38 T@T) ) (= ($generated@@9 ($generated@@4 $generated@@37 $generated@@38)) 6))) (forall (($generated@@39 T@T) ($generated@@40 T@T) ) (! (= ($generated@@18 ($generated@@4 $generated@@39 $generated@@40)) $generated@@39)
 :pattern ( ($generated@@4 $generated@@39 $generated@@40))
))) (forall (($generated@@41 T@T) ($generated@@42 T@T) ) (! (= ($generated@@19 ($generated@@4 $generated@@41 $generated@@42)) $generated@@42)
 :pattern ( ($generated@@4 $generated@@41 $generated@@42))
))))
(assert (forall (($generated@@43 T@U) ($generated@@44 T@U) ) (!  (=> ($generated $generated@@43 $generated@@44) (forall (($generated@@45 T@U) ) (!  (=> ($generated@@6 ($generated@@7 $generated@@8 ($generated@@0 $generated@@1 $generated@@2 ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@43 $generated@@45) $generated@@5))) ($generated@@6 ($generated@@7 $generated@@8 ($generated@@0 $generated@@1 $generated@@2 ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@44 $generated@@45) $generated@@5))))
 :pattern ( ($generated@@0 $generated@@1 $generated@@2 ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@44 $generated@@45) $generated@@5))
)))
 :pattern ( ($generated $generated@@43 $generated@@44))
)))
(assert (forall (($generated@@47 Int) ) (! (= ($generated@@46 $generated@@47) $generated@@47)
 :pattern ( ($generated@@46 $generated@@47))
)))
(assert (forall (($generated@@49 Real) ) (! (= ($generated@@48 $generated@@49) $generated@@49)
 :pattern ( ($generated@@48 $generated@@49))
)))
(assert (forall (($generated@@51 T@U) ($generated@@52 T@T) ) (! (= ($generated@@50 $generated@@52 $generated@@51) $generated@@51)
 :pattern ( ($generated@@50 $generated@@52 $generated@@51))
)))
(assert (forall (($generated@@54 T@U) ($generated@@55 T@T) ) (! (= ($generated@@53 $generated@@55 ($generated@@7 $generated@@55 $generated@@54)) $generated@@54)
 :pattern ( ($generated@@7 $generated@@55 $generated@@54))
)))
(assert (forall (($generated@@57 Int) ) (! (= ($generated@@56 $generated@@57) (to_real $generated@@57))
 :pattern ( ($generated@@56 $generated@@57))
)))
(assert (forall (($generated@@58 T@U) ($generated@@59 T@U) ($generated@@60 T@U) ) (!  (=> (or (not (= $generated@@58 $generated@@60)) (not true)) (=> (and ($generated $generated@@58 $generated@@59) ($generated $generated@@59 $generated@@60)) ($generated $generated@@58 $generated@@60)))
 :pattern ( ($generated $generated@@58 $generated@@59) ($generated $generated@@59 $generated@@60))
)))
(assert (forall (($generated@@61 T@U) ($generated@@62 T@T) ) (! (= ($generated@@7 $generated@@62 ($generated@@53 $generated@@62 $generated@@61)) $generated@@61)
 :pattern ( ($generated@@53 $generated@@62 $generated@@61))
)))
(assert  (and (forall (($generated@@66 T@T) ($generated@@67 T@T) ($generated@@68 T@T) ($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (! (= ($generated@@63 $generated@@66 $generated@@67 $generated@@68 ($generated@@65 $generated@@66 $generated@@67 $generated@@68 $generated@@70 $generated@@71 $generated@@72 $generated@@69) $generated@@71 $generated@@72) $generated@@69)
 :weight 0
)) (and (forall (($generated@@73 T@T) ($generated@@74 T@T) ($generated@@75 T@T) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ) (!  (or (= $generated@@78 $generated@@80) (= ($generated@@63 $generated@@73 $generated@@74 $generated@@75 ($generated@@65 $generated@@73 $generated@@74 $generated@@75 $generated@@77 $generated@@78 $generated@@79 $generated@@76) $generated@@80 $generated@@81) ($generated@@63 $generated@@73 $generated@@74 $generated@@75 $generated@@77 $generated@@80 $generated@@81)))
 :weight 0
)) (forall (($generated@@82 T@T) ($generated@@83 T@T) ($generated@@84 T@T) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ) (!  (or (= $generated@@88 $generated@@90) (= ($generated@@63 $generated@@82 $generated@@83 $generated@@84 ($generated@@65 $generated@@82 $generated@@83 $generated@@84 $generated@@86 $generated@@87 $generated@@88 $generated@@85) $generated@@89 $generated@@90) ($generated@@63 $generated@@82 $generated@@83 $generated@@84 $generated@@86 $generated@@89 $generated@@90)))
 :weight 0
)))))
(assert (forall (($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 Bool) ($generated@@95 T@U) ($generated@@96 T@U) ) (! (= ($generated@@6 ($generated@@63 $generated@@3 $generated@@1 $generated@@8 ($generated@@64 $generated@@91 $generated@@92 $generated@@93 $generated@@94) $generated@@95 $generated@@96))  (=> (and (or (not (= $generated@@95 $generated@@91)) (not true)) ($generated@@6 ($generated@@7 $generated@@8 ($generated@@0 $generated@@1 $generated@@2 ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@92 $generated@@95) $generated@@93)))) $generated@@94))
 :pattern ( ($generated@@63 $generated@@3 $generated@@1 $generated@@8 ($generated@@64 $generated@@91 $generated@@92 $generated@@93 $generated@@94) $generated@@95 $generated@@96))
)))
(assert (forall (($generated@@97 Int) ) (! (= ($generated@@53 $generated@@10 ($generated@@13 ($generated@@46 $generated@@97))) ($generated@@50 $generated@@2 ($generated@@53 $generated@@10 ($generated@@13 $generated@@97))))
 :pattern ( ($generated@@53 $generated@@10 ($generated@@13 ($generated@@46 $generated@@97))))
)))
(assert (forall (($generated@@98 Real) ) (! (= ($generated@@53 $generated@@11 ($generated@@15 ($generated@@48 $generated@@98))) ($generated@@50 $generated@@2 ($generated@@53 $generated@@11 ($generated@@15 $generated@@98))))
 :pattern ( ($generated@@53 $generated@@11 ($generated@@15 ($generated@@48 $generated@@98))))
)))
(assert (forall (($generated@@99 T@U) ($generated@@100 T@T) ) (! (= ($generated@@53 $generated@@100 ($generated@@50 $generated@@100 $generated@@99)) ($generated@@50 $generated@@2 ($generated@@53 $generated@@100 $generated@@99)))
 :pattern ( ($generated@@53 $generated@@100 ($generated@@50 $generated@@100 $generated@@99)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@101 () Int)
(declare-fun $generated@@102 () Int)
(declare-fun $generated@@103 () Real)
(declare-fun $generated@@104 () Real)
(declare-fun $generated@@105 () Int)
(declare-fun $generated@@106 () Bool)
(declare-fun $generated@@107 () Real)
(declare-fun $generated@@108 () Int)
(declare-fun $generated@@109 () Int)
(declare-fun $generated@@110 () T@U)
(declare-fun $generated@@111 () T@U)
(declare-fun $generated@@112 () T@U)
(declare-fun $generated@@113 (T@U) Bool)
(declare-fun $generated@@114 (T@U) Bool)
(declare-fun $generated@@115 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 17) (let (($generated@@116  (=> (and (and (< $generated@@101 10) (= $generated@@102 (- 10 $generated@@101))) (and (= $generated@@103 (+ $generated@@104 0.5)) (= $generated@@105 (+ $generated@@101 1)))) (and (=> (= (ControlFlow 0 9) (- 0 11)) (or (<= 0 $generated@@102) (= (- 10 $generated@@105) $generated@@102))) (=> (or (<= 0 $generated@@102) (= (- 10 $generated@@105) $generated@@102)) (and (=> (= (ControlFlow 0 9) (- 0 10)) (< (- 10 $generated@@105) $generated@@102)) (=> (< (- 10 $generated@@105) $generated@@102) (=> (= (ControlFlow 0 9) (- 0 8)) (=> $generated@@106 (= $generated@@103 (+ 0.3 (* 0.5 ($generated@@56 $generated@@105)))))))))))))
(let (($generated@@117  (=> (<= 10 $generated@@101) (and (=> (= (ControlFlow 0 4) (- 0 7)) (= $generated@@104 ($generated@@48 5.3))) (=> (= $generated@@104 ($generated@@48 5.3)) (and (=> (= (ControlFlow 0 4) (- 0 6)) (< $generated@@104 5.9)) (=> (< $generated@@104 5.9) (and (=> (= (ControlFlow 0 4) (- 0 5)) (<= ($generated@@48 0.59) $generated@@104)) (=> (<= ($generated@@48 0.59) $generated@@104) (=> (= (ControlFlow 0 4) (- 0 3)) (< $generated@@104 0.62)))))))))))
(let (($generated@@118  (=> $generated@@106 (and (=> (= (ControlFlow 0 12) 4) $generated@@117) (=> (= (ControlFlow 0 12) 9) $generated@@116)))))
(let (($generated@@119 true))
(let (($generated@@120  (and (=> (= (ControlFlow 0 13) 2) $generated@@119) (=> (= (ControlFlow 0 13) 12) $generated@@118))))
(let (($generated@@121 true))
(let (($generated@@122  (=> (and (and (and (and (and (and (and (not false) (<= 0.0 $generated@@104)) (and (<= 0 $generated@@101) (< $generated@@101 11))) (and (<= 0.0 $generated@@107) (<= $generated@@107 1.0))) (= $generated@@108 0)) (= $generated@@109 10)) (=> $generated@@106 (= $generated@@104 (+ 0.3 (* 0.5 ($generated@@56 $generated@@101)))))) (and (and (forall (($generated@@123 T@U) ) (!  (=> (and (or (not (= $generated@@123 $generated@@111)) (not true)) ($generated@@6 ($generated@@7 $generated@@8 ($generated@@0 $generated@@1 $generated@@2 ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@110 $generated@@123) $generated@@5)))) (= ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@110 $generated@@123) ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@110 $generated@@123)))
 :pattern ( ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@110 $generated@@123))
)) ($generated $generated@@110 $generated@@110)) (and (forall (($generated@@124 T@U) ($generated@@125 T@U) ) (!  (=> (and (or (not (= $generated@@124 $generated@@111)) (not true)) ($generated@@6 ($generated@@7 $generated@@8 ($generated@@0 $generated@@1 $generated@@2 ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@110 $generated@@124) $generated@@5)))) (or (= ($generated@@0 $generated@@1 $generated@@2 ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@110 $generated@@124) $generated@@125) ($generated@@0 $generated@@1 $generated@@2 ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@110 $generated@@124) $generated@@125)) ($generated@@6 ($generated@@63 $generated@@3 $generated@@1 $generated@@8 $generated@@112 $generated@@124 $generated@@125))))
 :pattern ( ($generated@@0 $generated@@1 $generated@@2 ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@110 $generated@@124) $generated@@125))
)) (<= (- 10 $generated@@101) $generated@@109)))) (and (=> (= (ControlFlow 0 14) 1) $generated@@121) (=> (= (ControlFlow 0 14) 13) $generated@@120)))))
(let (($generated@@126  (=> (and (and (= $generated@@112 ($generated@@64 $generated@@111 $generated@@110 $generated@@5 false)) (= $generated@@107 ($generated@@48 0.3))) (and (= $generated@@108 ($generated@@46 0)) (= $generated@@109 (- 10 $generated@@108)))) (and (=> (= (ControlFlow 0 15) (- 0 16)) (=> $generated@@106 (= $generated@@107 (+ 0.3 (* 0.5 ($generated@@56 $generated@@108)))))) (=> (=> $generated@@106 (= $generated@@107 (+ 0.3 (* 0.5 ($generated@@56 $generated@@108))))) (=> (= (ControlFlow 0 15) 14) $generated@@122))))))
(let (($generated@@127  (=> (and (and ($generated@@113 $generated@@110) ($generated@@114 $generated@@110)) (and (= 0 $generated@@115) (= (ControlFlow 0 17) 15))) $generated@@126)))
$generated@@127))))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 4) (- 3))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
