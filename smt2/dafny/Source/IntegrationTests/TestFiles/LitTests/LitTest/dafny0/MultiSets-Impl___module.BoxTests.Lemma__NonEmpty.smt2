(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 (T@T) Int)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 (Bool) T@U)
(declare-fun $generated@@11 (T@U) Bool)
(declare-fun $generated@@12 (Int) T@U)
(declare-fun $generated@@13 (T@U) Int)
(declare-fun $generated@@14 (Real) T@U)
(declare-fun $generated@@15 (T@U) Real)
(declare-fun $generated@@22 (T@U) T@U)
(declare-fun $generated@@23 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@24 () T@T)
(declare-fun $generated@@25 (T@U) T@U)
(declare-fun $generated@@26 (T@U) T@U)
(declare-fun $generated@@30 (T@U T@U) Bool)
(declare-fun $generated@@31 () T@U)
(declare-fun $generated@@33 (T@U T@U) T@U)
(declare-fun $generated@@39 () T@U)
(declare-fun $generated@@40 (T@T T@U) T@U)
(declare-fun $generated@@41 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@42 () T@T)
(declare-fun $generated@@43 () T@T)
(declare-fun $generated@@44 (T@T T@T) T@T)
(declare-fun $generated@@45 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@46 (T@T) T@T)
(declare-fun $generated@@47 (T@T) T@T)
(declare-fun $generated@@68 (T@T T@U) T@U)
(declare-fun $generated@@71 (T@U T@U) Bool)
(declare-fun $generated@@75 (T@T T@U T@U) Bool)
(declare-fun $generated@@76 () T@T)
(declare-fun $generated@@77 (T@U) T@U)
(declare-fun $generated@@78 (T@U T@U) Bool)
(declare-fun $generated@@84 (T@U T@U T@U) Bool)
(declare-fun $generated@@89 (T@U) T@U)
(declare-fun $generated@@92 (T@U) T@U)
(declare-fun $generated@@95 (T@U T@U) Bool)
(declare-fun $generated@@106 (T@U) T@U)
(declare-fun $generated@@109 (T@U) T@U)
(declare-fun $generated@@111 (T@U) T@U)
(declare-fun $generated@@117 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@118 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@119 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@6 $generated@@7) 0) (= ($generated@@6 $generated@@8) 1)) (= ($generated@@6 $generated@@9) 2)) (forall (($generated@@16 Bool) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Int) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Real) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5)
)
(assert (= ($generated@@22 $generated) $generated@@0))
(assert (= ($generated@@6 $generated@@24) 3))
(assert (forall (($generated@@27 T@U) ($generated@@28 T@U) ($generated@@29 T@U) ) (! (= ($generated@@23 $generated@@24 $generated@@28 ($generated@@25 $generated@@27) $generated@@29) ($generated@@23 $generated@@24 $generated@@28 ($generated@@26 $generated@@27) $generated@@29))
 :pattern ( ($generated@@23 $generated@@24 $generated@@28 ($generated@@25 $generated@@27) $generated@@29))
 :pattern ( ($generated@@23 $generated@@24 $generated@@28 ($generated@@26 $generated@@27) $generated@@29))
)))
(assert (forall (($generated@@32 T@U) ) (!  (not ($generated@@30 $generated@@31 $generated@@32))
 :pattern ( ($generated@@30 $generated@@31 $generated@@32))
)))
(assert (forall (($generated@@34 T@U) ($generated@@35 T@U) ($generated@@36 T@U) ) (! (= ($generated@@30 ($generated@@33 $generated@@34 $generated@@35) $generated@@36)  (and ($generated@@30 $generated@@34 $generated@@36) ($generated@@30 $generated@@35 $generated@@36)))
 :pattern ( ($generated@@30 ($generated@@33 $generated@@34 $generated@@35) $generated@@36))
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ) (! (= ($generated@@33 ($generated@@33 $generated@@37 $generated@@38) $generated@@38) ($generated@@33 $generated@@37 $generated@@38))
 :pattern ( ($generated@@33 ($generated@@33 $generated@@37 $generated@@38) $generated@@38))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@48 T@T) ($generated@@49 T@T) ($generated@@50 T@U) ($generated@@51 T@U) ($generated@@52 T@U) ) (! (= ($generated@@41 $generated@@48 $generated@@49 ($generated@@45 $generated@@48 $generated@@49 $generated@@51 $generated@@52 $generated@@50) $generated@@52) $generated@@50)
 :weight 0
)) (forall (($generated@@53 T@T) ($generated@@54 T@T) ($generated@@55 T@U) ($generated@@56 T@U) ($generated@@57 T@U) ($generated@@58 T@U) ) (!  (or (= $generated@@57 $generated@@58) (= ($generated@@41 $generated@@53 $generated@@54 ($generated@@45 $generated@@53 $generated@@54 $generated@@56 $generated@@57 $generated@@55) $generated@@58) ($generated@@41 $generated@@53 $generated@@54 $generated@@56 $generated@@58)))
 :weight 0
))) (= ($generated@@6 $generated@@42) 4)) (= ($generated@@6 $generated@@43) 5)) (forall (($generated@@59 T@T) ($generated@@60 T@T) ) (= ($generated@@6 ($generated@@44 $generated@@59 $generated@@60)) 6))) (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (! (= ($generated@@46 ($generated@@44 $generated@@61 $generated@@62)) $generated@@61)
 :pattern ( ($generated@@44 $generated@@61 $generated@@62))
))) (forall (($generated@@63 T@T) ($generated@@64 T@T) ) (! (= ($generated@@47 ($generated@@44 $generated@@63 $generated@@64)) $generated@@64)
 :pattern ( ($generated@@44 $generated@@63 $generated@@64))
))))
(assert (forall (($generated@@65 T@U) ($generated@@66 T@U) ($generated@@67 T@U) ) (! (= ($generated@@23 $generated@@24 $generated@@66 ($generated@@26 $generated@@65) $generated@@67)  (or (= $generated@@66 $generated@@39) ($generated@@11 ($generated@@40 $generated@@7 ($generated@@41 $generated@@42 $generated@@43 ($generated@@41 $generated@@24 ($generated@@44 $generated@@42 $generated@@43) $generated@@67 $generated@@66) $generated@@2)))))
 :pattern ( ($generated@@23 $generated@@24 $generated@@66 ($generated@@26 $generated@@65) $generated@@67))
)))
(assert (forall (($generated@@69 T@U) ($generated@@70 T@T) ) (! (= ($generated@@68 $generated@@70 ($generated@@40 $generated@@70 $generated@@69)) $generated@@69)
 :pattern ( ($generated@@40 $generated@@70 $generated@@69))
)))
(assert (forall (($generated@@72 T@U) ($generated@@73 T@U) ) (! (= ($generated@@71 $generated@@72 $generated@@73) (forall (($generated@@74 T@U) ) (!  (or (not ($generated@@30 $generated@@72 $generated@@74)) (not ($generated@@30 $generated@@73 $generated@@74)))
 :pattern ( ($generated@@30 $generated@@72 $generated@@74))
 :pattern ( ($generated@@30 $generated@@73 $generated@@74))
)))
 :pattern ( ($generated@@71 $generated@@72 $generated@@73))
)))
(assert (= ($generated@@6 $generated@@76) 7))
(assert (forall (($generated@@79 T@U) ($generated@@80 T@U) ) (! (= ($generated@@75 $generated@@76 $generated@@79 ($generated@@77 $generated@@80)) (forall (($generated@@81 T@U) ) (!  (=> ($generated@@30 $generated@@79 $generated@@81) ($generated@@78 $generated@@81 $generated@@80))
 :pattern ( ($generated@@30 $generated@@79 $generated@@81))
)))
 :pattern ( ($generated@@75 $generated@@76 $generated@@79 ($generated@@77 $generated@@80)))
)))
(assert (forall (($generated@@82 T@U) ($generated@@83 T@U) ) (! (= ($generated@@75 $generated@@24 $generated@@83 ($generated@@25 $generated@@82))  (and ($generated@@75 $generated@@24 $generated@@83 ($generated@@26 $generated@@82)) (or (not (= $generated@@83 $generated@@39)) (not true))))
 :pattern ( ($generated@@75 $generated@@24 $generated@@83 ($generated@@25 $generated@@82)))
 :pattern ( ($generated@@75 $generated@@24 $generated@@83 ($generated@@26 $generated@@82)))
)))
(assert (forall (($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@T) ) (! (= ($generated@@84 ($generated@@68 $generated@@88 $generated@@85) $generated@@86 $generated@@87) ($generated@@23 $generated@@88 $generated@@85 $generated@@86 $generated@@87))
 :pattern ( ($generated@@84 ($generated@@68 $generated@@88 $generated@@85) $generated@@86 $generated@@87))
)))
(assert (forall (($generated@@90 T@U) ) (!  (and (= ($generated@@22 ($generated@@26 $generated@@90)) $generated@@3) (= ($generated@@89 ($generated@@26 $generated@@90)) $generated@@5))
 :pattern ( ($generated@@26 $generated@@90))
)))
(assert (forall (($generated@@91 T@U) ) (!  (and (= ($generated@@22 ($generated@@25 $generated@@91)) $generated@@4) (= ($generated@@89 ($generated@@25 $generated@@91)) $generated@@5))
 :pattern ( ($generated@@25 $generated@@91))
)))
(assert (forall (($generated@@93 T@U) ($generated@@94 T@U) ) (! (= ($generated@@75 $generated@@24 $generated@@94 ($generated@@26 $generated@@93))  (or (= $generated@@94 $generated@@39) (= ($generated@@92 $generated@@94) ($generated@@26 $generated@@93))))
 :pattern ( ($generated@@75 $generated@@24 $generated@@94 ($generated@@26 $generated@@93)))
)))
(assert (forall (($generated@@96 T@U) ($generated@@97 T@U) ) (!  (=> ($generated@@95 $generated@@96 $generated@@97) (= $generated@@96 $generated@@97))
 :pattern ( ($generated@@95 $generated@@96 $generated@@97))
)))
(assert (forall (($generated@@98 T@U) ) (!  (=> ($generated@@78 $generated@@98 $generated) (and (= ($generated@@68 $generated@@8 ($generated@@40 $generated@@8 $generated@@98)) $generated@@98) ($generated@@75 $generated@@8 ($generated@@40 $generated@@8 $generated@@98) $generated)))
 :pattern ( ($generated@@78 $generated@@98 $generated))
)))
(assert (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@T) ) (! (= ($generated@@78 ($generated@@68 $generated@@101 $generated@@99) $generated@@100) ($generated@@75 $generated@@101 $generated@@99 $generated@@100))
 :pattern ( ($generated@@78 ($generated@@68 $generated@@101 $generated@@99) $generated@@100))
)))
(assert (forall (($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ) (! (= ($generated@@23 $generated@@76 $generated@@102 ($generated@@77 $generated@@103) $generated@@104) (forall (($generated@@105 T@U) ) (!  (=> ($generated@@30 $generated@@102 $generated@@105) ($generated@@84 $generated@@105 $generated@@103 $generated@@104))
 :pattern ( ($generated@@30 $generated@@102 $generated@@105))
)))
 :pattern ( ($generated@@23 $generated@@76 $generated@@102 ($generated@@77 $generated@@103) $generated@@104))
)))
(assert (forall (($generated@@107 T@U) ) (! (= ($generated@@106 ($generated@@77 $generated@@107)) $generated@@107)
 :pattern ( ($generated@@77 $generated@@107))
)))
(assert (forall (($generated@@108 T@U) ) (! (= ($generated@@22 ($generated@@77 $generated@@108)) $generated@@1)
 :pattern ( ($generated@@77 $generated@@108))
)))
(assert (forall (($generated@@110 T@U) ) (! (= ($generated@@109 ($generated@@26 $generated@@110)) $generated@@110)
 :pattern ( ($generated@@26 $generated@@110))
)))
(assert (forall (($generated@@112 T@U) ) (! (= ($generated@@111 ($generated@@25 $generated@@112)) $generated@@112)
 :pattern ( ($generated@@25 $generated@@112))
)))
(assert (forall (($generated@@113 T@U) ($generated@@114 T@T) ) (! (= ($generated@@40 $generated@@114 ($generated@@68 $generated@@114 $generated@@113)) $generated@@113)
 :pattern ( ($generated@@68 $generated@@114 $generated@@113))
)))
(assert (forall (($generated@@115 T@U) ($generated@@116 T@U) ) (! (= ($generated@@33 $generated@@115 ($generated@@33 $generated@@115 $generated@@116)) ($generated@@33 $generated@@115 $generated@@116))
 :pattern ( ($generated@@33 $generated@@115 ($generated@@33 $generated@@115 $generated@@116)))
)))
(assert  (and (forall (($generated@@120 T@T) ($generated@@121 T@T) ($generated@@122 T@T) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ) (! (= ($generated@@117 $generated@@120 $generated@@121 $generated@@122 ($generated@@119 $generated@@120 $generated@@121 $generated@@122 $generated@@124 $generated@@125 $generated@@126 $generated@@123) $generated@@125 $generated@@126) $generated@@123)
 :weight 0
)) (and (forall (($generated@@127 T@T) ($generated@@128 T@T) ($generated@@129 T@T) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ) (!  (or (= $generated@@132 $generated@@134) (= ($generated@@117 $generated@@127 $generated@@128 $generated@@129 ($generated@@119 $generated@@127 $generated@@128 $generated@@129 $generated@@131 $generated@@132 $generated@@133 $generated@@130) $generated@@134 $generated@@135) ($generated@@117 $generated@@127 $generated@@128 $generated@@129 $generated@@131 $generated@@134 $generated@@135)))
 :weight 0
)) (forall (($generated@@136 T@T) ($generated@@137 T@T) ($generated@@138 T@T) ($generated@@139 T@U) ($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ) (!  (or (= $generated@@142 $generated@@144) (= ($generated@@117 $generated@@136 $generated@@137 $generated@@138 ($generated@@119 $generated@@136 $generated@@137 $generated@@138 $generated@@140 $generated@@141 $generated@@142 $generated@@139) $generated@@143 $generated@@144) ($generated@@117 $generated@@136 $generated@@137 $generated@@138 $generated@@140 $generated@@143 $generated@@144)))
 :weight 0
)))))
(assert (forall (($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 Bool) ($generated@@149 T@U) ($generated@@150 T@U) ) (! (= ($generated@@11 ($generated@@117 $generated@@24 $generated@@42 $generated@@7 ($generated@@118 $generated@@145 $generated@@146 $generated@@147 $generated@@148) $generated@@149 $generated@@150))  (=> (and (or (not (= $generated@@149 $generated@@145)) (not true)) ($generated@@11 ($generated@@40 $generated@@7 ($generated@@41 $generated@@42 $generated@@43 ($generated@@41 $generated@@24 ($generated@@44 $generated@@42 $generated@@43) $generated@@146 $generated@@149) $generated@@147)))) $generated@@148))
 :pattern ( ($generated@@117 $generated@@24 $generated@@42 $generated@@7 ($generated@@118 $generated@@145 $generated@@146 $generated@@147 $generated@@148) $generated@@149 $generated@@150))
)))
(assert (forall (($generated@@151 T@U) ($generated@@152 T@U) ) (!  (=> ($generated@@78 $generated@@151 ($generated@@77 $generated@@152)) (and (= ($generated@@68 $generated@@76 ($generated@@40 $generated@@76 $generated@@151)) $generated@@151) ($generated@@75 $generated@@76 ($generated@@40 $generated@@76 $generated@@151) ($generated@@77 $generated@@152))))
 :pattern ( ($generated@@78 $generated@@151 ($generated@@77 $generated@@152)))
)))
(assert (forall (($generated@@153 T@U) ($generated@@154 T@U) ) (!  (=> ($generated@@78 $generated@@154 ($generated@@26 $generated@@153)) (and (= ($generated@@68 $generated@@24 ($generated@@40 $generated@@24 $generated@@154)) $generated@@154) ($generated@@75 $generated@@24 ($generated@@40 $generated@@24 $generated@@154) ($generated@@26 $generated@@153))))
 :pattern ( ($generated@@78 $generated@@154 ($generated@@26 $generated@@153)))
)))
(assert (forall (($generated@@155 T@U) ($generated@@156 T@U) ) (!  (=> ($generated@@78 $generated@@156 ($generated@@25 $generated@@155)) (and (= ($generated@@68 $generated@@24 ($generated@@40 $generated@@24 $generated@@156)) $generated@@156) ($generated@@75 $generated@@24 ($generated@@40 $generated@@24 $generated@@156) ($generated@@25 $generated@@155))))
 :pattern ( ($generated@@78 $generated@@156 ($generated@@25 $generated@@155)))
)))
(assert (forall (($generated@@157 T@U) ($generated@@158 T@U) ) (! (= ($generated@@95 $generated@@157 $generated@@158) (forall (($generated@@159 T@U) ) (! (= ($generated@@30 $generated@@157 $generated@@159) ($generated@@30 $generated@@158 $generated@@159))
 :pattern ( ($generated@@30 $generated@@157 $generated@@159))
 :pattern ( ($generated@@30 $generated@@158 $generated@@159))
)))
 :pattern ( ($generated@@95 $generated@@157 $generated@@158))
)))
(assert (forall (($generated@@160 T@U) ($generated@@161 T@U) ) (! ($generated@@23 $generated@@8 $generated@@161 $generated $generated@@160)
 :pattern ( ($generated@@23 $generated@@8 $generated@@161 $generated $generated@@160))
)))
(assert (forall (($generated@@162 T@U) ) (! ($generated@@75 $generated@@8 $generated@@162 $generated)
 :pattern ( ($generated@@75 $generated@@8 $generated@@162 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@163 () T@U)
(declare-fun $generated@@164 () T@U)
(declare-fun $generated@@165 () T@U)
(declare-fun $generated@@166 () T@U)
(declare-fun $generated@@167 (T@U) Bool)
(declare-fun $generated@@168 (T@U) Bool)
(declare-fun $generated@@169 () T@U)
(declare-fun $generated@@170 () T@U)
(declare-fun $generated@@171 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 7) (let (($generated@@172  (=> (= (ControlFlow 0 3) (- 0 2)) ($generated@@71 $generated@@163 $generated@@164))))
(let (($generated@@173  (and (=> (= (ControlFlow 0 4) (- 0 5)) (forall (($generated@@174 Int) ) (!  (not ($generated@@30 ($generated@@33 $generated@@163 $generated@@164) ($generated@@68 $generated@@8 ($generated@@12 $generated@@174))))
 :pattern ( ($generated@@30 ($generated@@33 $generated@@163 $generated@@164) ($generated@@68 $generated@@8 ($generated@@12 $generated@@174))))
))) (=> (forall (($generated@@175 T@U) ) (!  (not ($generated@@30 ($generated@@33 $generated@@163 $generated@@164) ($generated@@68 $generated@@8 $generated@@175)))
 :pattern ( ($generated@@30 ($generated@@33 $generated@@163 $generated@@164) ($generated@@68 $generated@@8 $generated@@175)))
)) (=> (= (ControlFlow 0 4) 3) $generated@@172)))))
(let (($generated@@176 true))
(let (($generated@@177  (=> (= $generated@@165 ($generated@@118 $generated@@39 $generated@@166 $generated@@2 false)) (and (=> (= (ControlFlow 0 6) 4) $generated@@173) (=> (= (ControlFlow 0 6) 1) $generated@@176)))))
(let (($generated@@178  (=> (and ($generated@@167 $generated@@166) ($generated@@168 $generated@@166)) (=> (and (and (or (not (= $generated@@169 $generated@@39)) (not true)) (and ($generated@@75 $generated@@24 $generated@@169 ($generated@@25 $generated@@170)) ($generated@@23 $generated@@24 $generated@@169 ($generated@@25 $generated@@170) $generated@@166))) (and ($generated@@75 $generated@@76 $generated@@163 ($generated@@77 $generated)) ($generated@@23 $generated@@76 $generated@@163 ($generated@@77 $generated) $generated@@166))) (=> (and (and (and ($generated@@75 $generated@@76 $generated@@164 ($generated@@77 $generated)) ($generated@@23 $generated@@76 $generated@@164 ($generated@@77 $generated) $generated@@166)) (= 0 $generated@@171)) (and ($generated@@95 ($generated@@33 $generated@@163 $generated@@164) $generated@@31) (= (ControlFlow 0 7) 6))) $generated@@177)))))
$generated@@178))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 3) (- 2))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
