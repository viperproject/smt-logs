(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TBool () T@U)
(declare-fun TInt () T@U)
(declare-fun TagBool () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagSet () T@U)
(declare-fun TagSeq () T@U)
(declare-fun alloc () T@U)
(declare-fun allocName () T@U)
(declare-fun Tagclass._System.object? () T@U)
(declare-fun Tagclass._System.object () T@U)
(declare-fun class._module.MyClass? () T@U)
(declare-fun Tagclass._module.MyClass? () T@U)
(declare-fun Tagclass._module.MyClass () T@U)
(declare-fun tytagFamily$object () T@U)
(declare-fun tytagFamily$MyClass () T@U)
(declare-fun field$x () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun FDim (T@U) Int)
(declare-fun Tag (T@U) T@U)
(declare-fun DeclName (T@U) T@U)
(declare-fun |Seq#Contains| (T@U T@U) Bool)
(declare-fun |Seq#Empty| () T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun |Seq#Update| (T@U Int T@U) T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun Tclass._System.object () T@U)
(declare-fun Tclass._System.object? () T@U)
(declare-fun _module.MyClass.x () T@U)
(declare-fun FieldOfDecl (T@U T@U) T@U)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun null () T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun |Seq#Drop| (T@U Int) T@U)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun |Set#Subset| (T@U T@U) Bool)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun |Seq#Take| (T@U Int) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun SetType () T@T)
(declare-fun TSet (T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun Tclass._module.MyClass (T@U T@U) T@U)
(declare-fun Tclass._module.MyClass? (T@U T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#2| (T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun dtype (T@U) T@U)
(declare-fun DeclType (T@U) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun Tclass._module.MyClass?_0 (T@U) T@U)
(declare-fun Tclass._module.MyClass?_1 (T@U) T@U)
(declare-fun Tclass._module.MyClass_0 (T@U) T@U)
(declare-fun Tclass._module.MyClass_1 (T@U) T@U)
(declare-fun SeqType () T@T)
(declare-fun TSeq (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun Mod (Int Int) Int)
(declare-fun TagFamily (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TBool TInt TagBool TagInt TagSet TagSeq alloc allocName Tagclass._System.object? Tagclass._System.object class._module.MyClass? Tagclass._module.MyClass? Tagclass._module.MyClass tytagFamily$object tytagFamily$MyClass field$x)
)
(assert (= (FDim alloc) 0))
(assert (= (Tag TBool) TagBool))
(assert (= (Tag TInt) TagInt))
(assert (= (DeclName alloc) allocName))
(assert (forall ((x@@2 T@U) ) (!  (not (|Seq#Contains| |Seq#Empty| x@@2))
 :pattern ( (|Seq#Contains| |Seq#Empty| x@@2))
)))
(assert (= (|Seq#Length| |Seq#Empty|) 0))
(assert (forall ((s T@U) (i Int) (v T@U) (n Int) ) (!  (=> (and (<= 0 n) (< n (|Seq#Length| s))) (and (=> (= i n) (= (|Seq#Index| (|Seq#Update| s i v) n) v)) (=> (or (not (= i n)) (not true)) (= (|Seq#Index| (|Seq#Update| s i v) n) (|Seq#Index| s n)))))
 :pattern ( (|Seq#Index| (|Seq#Update| s i v) n))
)))
(assert (= (Ctor refType) 3))
(assert (forall ((|c#0| T@U) ($h T@U) ) (! (= ($IsAlloc refType |c#0| Tclass._System.object $h) ($IsAlloc refType |c#0| Tclass._System.object? $h))
 :pattern ( ($IsAlloc refType |c#0| Tclass._System.object $h))
 :pattern ( ($IsAlloc refType |c#0| Tclass._System.object? $h))
)))
(assert (= (FDim _module.MyClass.x) 0))
(assert (= (FieldOfDecl class._module.MyClass? field$x) _module.MyClass.x))
(assert  (not ($IsGhostField _module.MyClass.x)))
(assert  (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 4)) (= (Ctor BoxType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 6))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall (($o T@U) ($h@@0 T@U) ) (! (= ($IsAlloc refType $o Tclass._System.object? $h@@0)  (or (= $o null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@0 $o) alloc)))))
 :pattern ( ($IsAlloc refType $o Tclass._System.object? $h@@0))
)))
(assert (forall ((s@@0 T@U) (i@@0 Int) (v@@0 T@U) (n@@0 Int) ) (!  (=> (and (and (<= 0 n@@0) (<= n@@0 i@@0)) (< i@@0 (|Seq#Length| s@@0))) (= (|Seq#Drop| (|Seq#Update| s@@0 i@@0 v@@0) n@@0) (|Seq#Update| (|Seq#Drop| s@@0 n@@0) (- i@@0 n@@0) v@@0)))
 :pattern ( (|Seq#Drop| (|Seq#Update| s@@0 i@@0 v@@0) n@@0))
)))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((s@@1 T@U) (n@@1 Int) ) (!  (=> (= n@@1 0) (= (|Seq#Drop| s@@1 n@@1) s@@1))
 :pattern ( (|Seq#Drop| s@@1 n@@1))
)))
(assert (forall ((x@@3 Int) ) (! (= (LitInt x@@3) x@@3)
 :pattern ( (LitInt x@@3))
)))
(assert (forall ((x@@4 T@U) (T T@T) ) (! (= (Lit T x@@4) x@@4)
 :pattern ( (Lit T x@@4))
)))
(assert (forall ((a T@U) (b T@U) ) (! (= (|Set#Subset| a b) (forall ((o@@0 T@U) ) (!  (=> (|Set#IsMember| a o@@0) (|Set#IsMember| b o@@0))
 :pattern ( (|Set#IsMember| a o@@0))
 :pattern ( (|Set#IsMember| b o@@0))
)))
 :pattern ( (|Set#Subset| a b))
)))
(assert (forall ((s@@2 T@U) (n@@2 Int) (j Int) ) (!  (=> (and (and (<= 0 j) (< j n@@2)) (< j (|Seq#Length| s@@2))) (= (|Seq#Index| (|Seq#Take| s@@2 n@@2) j) (|Seq#Index| s@@2 j)))
 :weight 25
 :pattern ( (|Seq#Index| (|Seq#Take| s@@2 n@@2) j))
 :pattern ( (|Seq#Index| s@@2 j) (|Seq#Take| s@@2 n@@2))
)))
(assert (forall ((s@@3 T@U) (n@@3 Int) ) (!  (=> (and (<= 0 n@@3) (<= n@@3 (|Seq#Length| s@@3))) (= (|Seq#Length| (|Seq#Drop| s@@3 n@@3)) (- (|Seq#Length| s@@3) n@@3)))
 :pattern ( (|Seq#Length| (|Seq#Drop| s@@3 n@@3)))
)))
(assert (forall ((x@@5 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@5)) x@@5)
 :pattern ( ($Unbox T@@0 x@@5))
)))
(assert (= (Ctor SetType) 7))
(assert (forall ((v@@1 T@U) (t0@@0 T@U) ) (! (= ($Is SetType v@@1 (TSet t0@@0)) (forall ((bx T@U) ) (!  (=> (|Set#IsMember| v@@1 bx) ($IsBox bx t0@@0))
 :pattern ( (|Set#IsMember| v@@1 bx))
)))
 :pattern ( ($Is SetType v@@1 (TSet t0@@0)))
)))
(assert (forall ((_module.MyClass$T T@U) (_module.MyClass$U T@U) (|c#0@@0| T@U) ) (! (= ($Is refType |c#0@@0| (Tclass._module.MyClass _module.MyClass$T _module.MyClass$U))  (and ($Is refType |c#0@@0| (Tclass._module.MyClass? _module.MyClass$T _module.MyClass$U)) (or (not (= |c#0@@0| null)) (not true))))
 :pattern ( ($Is refType |c#0@@0| (Tclass._module.MyClass _module.MyClass$T _module.MyClass$U)))
 :pattern ( ($Is refType |c#0@@0| (Tclass._module.MyClass? _module.MyClass$T _module.MyClass$U)))
)))
(assert  (and (forall ((t0@@1 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@1 t1@@0 t2 (MapType1Store t0@@1 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| T@U) (|l#4| T@U) ($o@@0 T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#2| |l#0| |l#1| |l#2| |l#3| |l#4|) $o@@0 $f))  (=> (and (or (not (= $o@@0 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@0) |l#2|)))) (or (= $o@@0 |l#3|) (|Set#IsMember| |l#4| ($Box refType $o@@0)))))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#2| |l#0| |l#1| |l#2| |l#3| |l#4|) $o@@0 $f))
)))
(assert ($IsGhostField alloc))
(assert (forall ((v@@2 T@U) (t T@U) (h@@0 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@2) t h@@0) ($IsAlloc T@@1 v@@2 t h@@0))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@2) t h@@0))
)))
(assert (forall ((h@@1 T@U) (k@@0 T@U) (bx@@0 T@U) (t@@0 T@U) ) (!  (=> ($HeapSucc h@@1 k@@0) (=> ($IsAllocBox bx@@0 t@@0 h@@1) ($IsAllocBox bx@@0 t@@0 k@@0)))
 :pattern ( ($HeapSucc h@@1 k@@0) ($IsAllocBox bx@@0 t@@0 h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@1 T@U) (v@@3 T@U) (t@@1 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@2 k@@1) (=> ($IsAlloc T@@2 v@@3 t@@1 h@@2) ($IsAlloc T@@2 v@@3 t@@1 k@@1)))
 :pattern ( ($HeapSucc h@@2 k@@1) ($IsAlloc T@@2 v@@3 t@@1 h@@2))
)))
(assert (forall ((_module.MyClass$T@@0 T@U) (_module.MyClass$U@@0 T@U) ($o@@1 T@U) ) (! (= ($Is refType $o@@1 (Tclass._module.MyClass? _module.MyClass$T@@0 _module.MyClass$U@@0))  (or (= $o@@1 null) (= (dtype $o@@1) (Tclass._module.MyClass? _module.MyClass$T@@0 _module.MyClass$U@@0))))
 :pattern ( ($Is refType $o@@1 (Tclass._module.MyClass? _module.MyClass$T@@0 _module.MyClass$U@@0)))
)))
(assert (forall ((s@@4 T@U) (n@@4 Int) (j@@0 Int) ) (!  (=> (and (and (<= 0 n@@4) (<= 0 j@@0)) (< j@@0 (- (|Seq#Length| s@@4) n@@4))) (= (|Seq#Index| (|Seq#Drop| s@@4 n@@4) j@@0) (|Seq#Index| s@@4 (+ j@@0 n@@4))))
 :weight 25
 :pattern ( (|Seq#Index| (|Seq#Drop| s@@4 n@@4) j@@0))
)))
(assert (forall ((_module.MyClass$T@@1 T@U) (_module.MyClass$U@@1 T@U) (|c#0@@1| T@U) ($h@@1 T@U) ) (! (= ($IsAlloc refType |c#0@@1| (Tclass._module.MyClass _module.MyClass$T@@1 _module.MyClass$U@@1) $h@@1) ($IsAlloc refType |c#0@@1| (Tclass._module.MyClass? _module.MyClass$T@@1 _module.MyClass$U@@1) $h@@1))
 :pattern ( ($IsAlloc refType |c#0@@1| (Tclass._module.MyClass _module.MyClass$T@@1 _module.MyClass$U@@1) $h@@1))
 :pattern ( ($IsAlloc refType |c#0@@1| (Tclass._module.MyClass? _module.MyClass$T@@1 _module.MyClass$U@@1) $h@@1))
)))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 Tclass._System.object?) (and (= ($Box refType ($Unbox refType bx@@1)) bx@@1) ($Is refType ($Unbox refType bx@@1) Tclass._System.object?)))
 :pattern ( ($IsBox bx@@1 Tclass._System.object?))
)))
(assert (forall ((bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 Tclass._System.object) (and (= ($Box refType ($Unbox refType bx@@2)) bx@@2) ($Is refType ($Unbox refType bx@@2) Tclass._System.object)))
 :pattern ( ($IsBox bx@@2 Tclass._System.object))
)))
(assert (forall ((|c#0@@2| T@U) ) (! (= ($Is refType |c#0@@2| Tclass._System.object)  (and ($Is refType |c#0@@2| Tclass._System.object?) (or (not (= |c#0@@2| null)) (not true))))
 :pattern ( ($Is refType |c#0@@2| Tclass._System.object))
 :pattern ( ($Is refType |c#0@@2| Tclass._System.object?))
)))
(assert (forall ((s@@5 T@U) (n@@5 Int) (x@@6 T@U) ) (! (= (|Seq#Contains| (|Seq#Take| s@@5 n@@5) x@@6) (exists ((i@@1 Int) ) (!  (and (and (and (<= 0 i@@1) (< i@@1 n@@5)) (< i@@1 (|Seq#Length| s@@5))) (= (|Seq#Index| s@@5 i@@1) x@@6))
 :pattern ( (|Seq#Index| s@@5 i@@1))
)))
 :pattern ( (|Seq#Contains| (|Seq#Take| s@@5 n@@5) x@@6))
)))
(assert (forall ((s@@6 T@U) (x@@7 T@U) ) (! (= (|Seq#Contains| s@@6 x@@7) (exists ((i@@2 Int) ) (!  (and (and (<= 0 i@@2) (< i@@2 (|Seq#Length| s@@6))) (= (|Seq#Index| s@@6 i@@2) x@@7))
 :pattern ( (|Seq#Index| s@@6 i@@2))
)))
 :pattern ( (|Seq#Contains| s@@6 x@@7))
)))
(assert (forall ((_module.MyClass$T@@2 T@U) (_module.MyClass$U@@2 T@U) ($o@@2 T@U) ($h@@2 T@U) ) (! (= ($IsAlloc refType $o@@2 (Tclass._module.MyClass? _module.MyClass$T@@2 _module.MyClass$U@@2) $h@@2)  (or (= $o@@2 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o@@2) alloc)))))
 :pattern ( ($IsAlloc refType $o@@2 (Tclass._module.MyClass? _module.MyClass$T@@2 _module.MyClass$U@@2) $h@@2))
)))
(assert (forall ((s@@7 T@U) (i@@3 Int) (v@@4 T@U) (n@@6 Int) ) (!  (=> (and (and (<= 0 i@@3) (< i@@3 n@@6)) (<= n@@6 (|Seq#Length| s@@7))) (= (|Seq#Drop| (|Seq#Update| s@@7 i@@3 v@@4) n@@6) (|Seq#Drop| s@@7 n@@6)))
 :pattern ( (|Seq#Drop| (|Seq#Update| s@@7 i@@3 v@@4) n@@6))
)))
(assert (forall ((s@@8 T@U) (n@@7 Int) ) (!  (=> (and (<= 0 n@@7) (<= n@@7 (|Seq#Length| s@@8))) (= (|Seq#Length| (|Seq#Take| s@@8 n@@7)) n@@7))
 :pattern ( (|Seq#Length| (|Seq#Take| s@@8 n@@7)))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) (c T@U) ) (!  (=> (or (not (= a@@0 c)) (not true)) (=> (and ($HeapSucc a@@0 b@@0) ($HeapSucc b@@0 c)) ($HeapSucc a@@0 c)))
 :pattern ( ($HeapSucc a@@0 b@@0) ($HeapSucc b@@0 c))
)))
(assert (forall ((cl T@U) (nm T@U) ) (!  (and (= (DeclType (FieldOfDecl cl nm)) cl) (= (DeclName (FieldOfDecl cl nm)) nm))
 :pattern ( (FieldOfDecl cl nm))
)))
(assert (forall ((bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 TInt) (and (= ($Box intType ($Unbox intType bx@@3)) bx@@3) ($Is intType ($Unbox intType bx@@3) TInt)))
 :pattern ( ($IsBox bx@@3 TInt))
)))
(assert (forall ((bx@@4 T@U) ) (!  (=> ($IsBox bx@@4 TBool) (and (= ($Box boolType ($Unbox boolType bx@@4)) bx@@4) ($Is boolType ($Unbox boolType bx@@4) TBool)))
 :pattern ( ($IsBox bx@@4 TBool))
)))
(assert (forall ((v@@5 T@U) (t@@2 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@5) t@@2) ($Is T@@3 v@@5 t@@2))
 :pattern ( ($IsBox ($Box T@@3 v@@5) t@@2))
)))
(assert (forall ((s@@9 T@U) (i@@4 Int) (v@@6 T@U) (n@@8 Int) ) (!  (=> (and (<= n@@8 i@@4) (< i@@4 (|Seq#Length| s@@9))) (= (|Seq#Take| (|Seq#Update| s@@9 i@@4 v@@6) n@@8) (|Seq#Take| s@@9 n@@8)))
 :pattern ( (|Seq#Take| (|Seq#Update| s@@9 i@@4 v@@6) n@@8))
)))
(assert (forall ((s@@10 T@U) ) (! (<= 0 (|Seq#Length| s@@10))
 :pattern ( (|Seq#Length| s@@10))
)))
(assert (forall ((_module.MyClass$T@@3 T@U) (_module.MyClass$U@@3 T@U) ($h@@3 T@U) ($o@@3 T@U) ) (!  (=> (and ($IsGoodHeap $h@@3) (and (or (not (= $o@@3 null)) (not true)) (= (dtype $o@@3) (Tclass._module.MyClass? _module.MyClass$T@@3 _module.MyClass$U@@3)))) ($Is intType ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@3 $o@@3) _module.MyClass.x)) TInt))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@3 $o@@3) _module.MyClass.x)) (Tclass._module.MyClass? _module.MyClass$T@@3 _module.MyClass$U@@3))
)))
(assert (forall ((v@@7 T@U) (t0@@2 T@U) (h@@3 T@U) ) (! (= ($IsAlloc SetType v@@7 (TSet t0@@2) h@@3) (forall ((bx@@5 T@U) ) (!  (=> (|Set#IsMember| v@@7 bx@@5) ($IsAllocBox bx@@5 t0@@2 h@@3))
 :pattern ( (|Set#IsMember| v@@7 bx@@5))
)))
 :pattern ( ($IsAlloc SetType v@@7 (TSet t0@@2) h@@3))
)))
(assert (forall ((_module.MyClass$T@@4 T@U) (_module.MyClass$U@@4 T@U) ) (! (= (Tclass._module.MyClass?_0 (Tclass._module.MyClass? _module.MyClass$T@@4 _module.MyClass$U@@4)) _module.MyClass$T@@4)
 :pattern ( (Tclass._module.MyClass? _module.MyClass$T@@4 _module.MyClass$U@@4))
)))
(assert (forall ((_module.MyClass$T@@5 T@U) (_module.MyClass$U@@5 T@U) ) (! (= (Tclass._module.MyClass?_1 (Tclass._module.MyClass? _module.MyClass$T@@5 _module.MyClass$U@@5)) _module.MyClass$U@@5)
 :pattern ( (Tclass._module.MyClass? _module.MyClass$T@@5 _module.MyClass$U@@5))
)))
(assert (forall ((_module.MyClass$T@@6 T@U) (_module.MyClass$U@@6 T@U) ) (! (= (Tclass._module.MyClass_0 (Tclass._module.MyClass _module.MyClass$T@@6 _module.MyClass$U@@6)) _module.MyClass$T@@6)
 :pattern ( (Tclass._module.MyClass _module.MyClass$T@@6 _module.MyClass$U@@6))
)))
(assert (forall ((_module.MyClass$T@@7 T@U) (_module.MyClass$U@@7 T@U) ) (! (= (Tclass._module.MyClass_1 (Tclass._module.MyClass _module.MyClass$T@@7 _module.MyClass$U@@7)) _module.MyClass$U@@7)
 :pattern ( (Tclass._module.MyClass _module.MyClass$T@@7 _module.MyClass$U@@7))
)))
(assert (forall (($o@@4 T@U) ) (! ($Is refType $o@@4 Tclass._System.object?)
 :pattern ( ($Is refType $o@@4 Tclass._System.object?))
)))
(assert (= (Ctor SeqType) 8))
(assert (forall ((v@@8 T@U) (t0@@3 T@U) (h@@4 T@U) ) (! (= ($IsAlloc SeqType v@@8 (TSeq t0@@3) h@@4) (forall ((i@@5 Int) ) (!  (=> (and (<= 0 i@@5) (< i@@5 (|Seq#Length| v@@8))) ($IsAllocBox (|Seq#Index| v@@8 i@@5) t0@@3 h@@4))
 :pattern ( (|Seq#Index| v@@8 i@@5))
)))
 :pattern ( ($IsAlloc SeqType v@@8 (TSeq t0@@3) h@@4))
)))
(assert (forall ((t@@3 T@U) ) (! (= (Inv0_TSet (TSet t@@3)) t@@3)
 :pattern ( (TSet t@@3))
)))
(assert (forall ((t@@4 T@U) ) (! (= (Tag (TSet t@@4)) TagSet)
 :pattern ( (TSet t@@4))
)))
(assert (forall ((t@@5 T@U) ) (! (= (Inv0_TSeq (TSeq t@@5)) t@@5)
 :pattern ( (TSeq t@@5))
)))
(assert (forall ((t@@6 T@U) ) (! (= (Tag (TSeq t@@6)) TagSeq)
 :pattern ( (TSeq t@@6))
)))
(assert (forall ((x@@8 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@8)) x@@8)
 :pattern ( ($Box T@@4 x@@8))
)))
(assert (forall ((_module.MyClass$T@@8 T@U) (_module.MyClass$U@@8 T@U) ($h@@4 T@U) ($o@@5 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@4) (and (or (not (= $o@@5 null)) (not true)) (= (dtype $o@@5) (Tclass._module.MyClass? _module.MyClass$T@@8 _module.MyClass$U@@8)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@4 $o@@5) alloc)))) ($IsAlloc intType ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@4 $o@@5) _module.MyClass.x)) TInt $h@@4))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@4 $o@@5) _module.MyClass.x)) (Tclass._module.MyClass? _module.MyClass$T@@8 _module.MyClass$U@@8))
)))
(assert (forall ((_module.MyClass$T@@9 T@U) (_module.MyClass$U@@9 T@U) (bx@@6 T@U) ) (!  (=> ($IsBox bx@@6 (Tclass._module.MyClass? _module.MyClass$T@@9 _module.MyClass$U@@9)) (and (= ($Box refType ($Unbox refType bx@@6)) bx@@6) ($Is refType ($Unbox refType bx@@6) (Tclass._module.MyClass? _module.MyClass$T@@9 _module.MyClass$U@@9))))
 :pattern ( ($IsBox bx@@6 (Tclass._module.MyClass? _module.MyClass$T@@9 _module.MyClass$U@@9)))
)))
(assert (forall ((_module.MyClass$T@@10 T@U) (_module.MyClass$U@@10 T@U) (bx@@7 T@U) ) (!  (=> ($IsBox bx@@7 (Tclass._module.MyClass _module.MyClass$T@@10 _module.MyClass$U@@10)) (and (= ($Box refType ($Unbox refType bx@@7)) bx@@7) ($Is refType ($Unbox refType bx@@7) (Tclass._module.MyClass _module.MyClass$T@@10 _module.MyClass$U@@10))))
 :pattern ( ($IsBox bx@@7 (Tclass._module.MyClass _module.MyClass$T@@10 _module.MyClass$U@@10)))
)))
(assert (forall ((s@@11 T@U) (i@@6 Int) (v@@9 T@U) ) (!  (=> (and (<= 0 i@@6) (< i@@6 (|Seq#Length| s@@11))) (= (|Seq#Length| (|Seq#Update| s@@11 i@@6 v@@9)) (|Seq#Length| s@@11)))
 :pattern ( (|Seq#Length| (|Seq#Update| s@@11 i@@6 v@@9)))
)))
(assert (forall ((x@@9 Int) (y Int) ) (! (= (Mod x@@9 y) (mod x@@9 y))
 :pattern ( (Mod x@@9 y))
)))
(assert (forall ((_module.MyClass$T@@11 T@U) (_module.MyClass$U@@11 T@U) ) (!  (and (= (Tag (Tclass._module.MyClass? _module.MyClass$T@@11 _module.MyClass$U@@11)) Tagclass._module.MyClass?) (= (TagFamily (Tclass._module.MyClass? _module.MyClass$T@@11 _module.MyClass$U@@11)) tytagFamily$MyClass))
 :pattern ( (Tclass._module.MyClass? _module.MyClass$T@@11 _module.MyClass$U@@11))
)))
(assert (forall ((_module.MyClass$T@@12 T@U) (_module.MyClass$U@@12 T@U) ) (!  (and (= (Tag (Tclass._module.MyClass _module.MyClass$T@@12 _module.MyClass$U@@12)) Tagclass._module.MyClass) (= (TagFamily (Tclass._module.MyClass _module.MyClass$T@@12 _module.MyClass$U@@12)) tytagFamily$MyClass))
 :pattern ( (Tclass._module.MyClass _module.MyClass$T@@12 _module.MyClass$U@@12))
)))
(assert (forall ((s@@12 T@U) (n@@9 Int) (x@@10 T@U) ) (! (= (|Seq#Contains| (|Seq#Drop| s@@12 n@@9) x@@10) (exists ((i@@7 Int) ) (!  (and (and (and (<= 0 n@@9) (<= n@@9 i@@7)) (< i@@7 (|Seq#Length| s@@12))) (= (|Seq#Index| s@@12 i@@7) x@@10))
 :pattern ( (|Seq#Index| s@@12 i@@7))
)))
 :pattern ( (|Seq#Contains| (|Seq#Drop| s@@12 n@@9) x@@10))
)))
(assert (forall ((bx@@8 T@U) (t@@7 T@U) ) (!  (=> ($IsBox bx@@8 (TSet t@@7)) (and (= ($Box SetType ($Unbox SetType bx@@8)) bx@@8) ($Is SetType ($Unbox SetType bx@@8) (TSet t@@7))))
 :pattern ( ($IsBox bx@@8 (TSet t@@7)))
)))
(assert (forall ((bx@@9 T@U) (t@@8 T@U) ) (!  (=> ($IsBox bx@@9 (TSeq t@@8)) (and (= ($Box SeqType ($Unbox SeqType bx@@9)) bx@@9) ($Is SeqType ($Unbox SeqType bx@@9) (TSeq t@@8))))
 :pattern ( ($IsBox bx@@9 (TSeq t@@8)))
)))
(assert (forall ((h@@5 T@U) (r T@U) (f T@U) (x@@11 T@U) ) (!  (=> ($IsGoodHeap (MapType0Store refType (MapType0Type FieldType BoxType) h@@5 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@5 r) f x@@11))) ($HeapSucc h@@5 (MapType0Store refType (MapType0Type FieldType BoxType) h@@5 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@5 r) f x@@11))))
 :pattern ( (MapType0Store refType (MapType0Type FieldType BoxType) h@@5 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@5 r) f x@@11)))
)))
(assert (= (Tag Tclass._System.object?) Tagclass._System.object?))
(assert (= (TagFamily Tclass._System.object?) tytagFamily$object))
(assert (= (Tag Tclass._System.object) Tagclass._System.object))
(assert (= (TagFamily Tclass._System.object) tytagFamily$object))
(assert (forall ((s@@13 T@U) (n@@10 Int) (k@@2 Int) ) (!  (=> (and (and (<= 0 n@@10) (<= n@@10 k@@2)) (< k@@2 (|Seq#Length| s@@13))) (= (|Seq#Index| (|Seq#Drop| s@@13 n@@10) (- k@@2 n@@10)) (|Seq#Index| s@@13 k@@2)))
 :weight 25
 :pattern ( (|Seq#Index| s@@13 k@@2) (|Seq#Drop| s@@13 n@@10))
)))
(assert (forall ((s@@14 T@U) (m@@4 Int) (n@@11 Int) ) (!  (=> (and (and (<= 0 m@@4) (<= 0 n@@11)) (<= (+ m@@4 n@@11) (|Seq#Length| s@@14))) (= (|Seq#Drop| (|Seq#Drop| s@@14 m@@4) n@@11) (|Seq#Drop| s@@14 (+ m@@4 n@@11))))
 :pattern ( (|Seq#Drop| (|Seq#Drop| s@@14 m@@4) n@@11))
)))
(assert (forall ((x@@12 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@12))) (Lit BoxType ($Box intType (int_2_U x@@12))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@12))))
)))
(assert (forall ((x@@13 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@13)) (Lit BoxType ($Box T@@5 x@@13)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@13)))
)))
(assert (forall ((s@@15 T@U) ) (!  (=> (= (|Seq#Length| s@@15) 0) (= s@@15 |Seq#Empty|))
 :pattern ( (|Seq#Length| s@@15))
)))
(assert (forall ((s@@16 T@U) (n@@12 Int) ) (!  (=> (= n@@12 0) (= (|Seq#Take| s@@16 n@@12) |Seq#Empty|))
 :pattern ( (|Seq#Take| s@@16 n@@12))
)))
(assert (forall ((h@@6 T@U) (v@@10 T@U) ) (! ($IsAlloc intType v@@10 TInt h@@6)
 :pattern ( ($IsAlloc intType v@@10 TInt h@@6))
)))
(assert (forall ((h@@7 T@U) (v@@11 T@U) ) (! ($IsAlloc boolType v@@11 TBool h@@7)
 :pattern ( ($IsAlloc boolType v@@11 TBool h@@7))
)))
(assert (forall ((s@@17 T@U) (i@@8 Int) (v@@12 T@U) (n@@13 Int) ) (!  (=> (and (and (<= 0 i@@8) (< i@@8 n@@13)) (<= n@@13 (|Seq#Length| s@@17))) (= (|Seq#Take| (|Seq#Update| s@@17 i@@8 v@@12) n@@13) (|Seq#Update| (|Seq#Take| s@@17 n@@13) i@@8 v@@12)))
 :pattern ( (|Seq#Take| (|Seq#Update| s@@17 i@@8 v@@12) n@@13))
)))
(assert (forall ((v@@13 T@U) (t0@@4 T@U) ) (! (= ($Is SeqType v@@13 (TSeq t0@@4)) (forall ((i@@9 Int) ) (!  (=> (and (<= 0 i@@9) (< i@@9 (|Seq#Length| v@@13))) ($IsBox (|Seq#Index| v@@13 i@@9) t0@@4))
 :pattern ( (|Seq#Index| v@@13 i@@9))
)))
 :pattern ( ($Is SeqType v@@13 (TSeq t0@@4)))
)))
(assert (forall ((v@@14 T@U) ) (! ($Is intType v@@14 TInt)
 :pattern ( ($Is intType v@@14 TInt))
)))
(assert (forall ((v@@15 T@U) ) (! ($Is boolType v@@15 TBool)
 :pattern ( ($Is boolType v@@15 TBool))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |t#0@1| () T@U)
(declare-fun this () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun |defass#t#0@0| () Bool)
(declare-fun |t#0@0| () T@U)
(declare-fun |call8formal@v#0@0| () T@U)
(declare-fun $Heap@8 () T@U)
(declare-fun |$decr$loop#00@1| () Int)
(declare-fun |$w$loop#0@0| () Bool)
(declare-fun |s##0_0@1| () Bool)
(declare-fun $Heap@5 () T@U)
(declare-fun |lotsaObjects#0| () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun |s#0| () Bool)
(declare-fun |call6formal@t#0| () T@U)
(declare-fun $Heap () T@U)
(declare-fun |call7formal@u#0| () T@U)
(declare-fun |call8formal@v#0| () T@U)
(declare-fun call1formal@_module.MyClass$U () T@U)
(declare-fun $Heap@6 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |call6formal@t#0@0| () T@U)
(declare-fun |call7formal@u#0@0| () T@U)
(declare-fun |call8formal@v#0@0@@0| () T@U)
(declare-fun _module.MyClass$U@@13 () T@U)
(declare-fun |defass#to#0_0| () Bool)
(declare-fun |to#0_0@1| () T@U)
(declare-fun _module.MyClass$T@@13 () T@U)
(declare-fun |s##0_1@1| () Bool)
(declare-fun |call6formal@t#0@@0| () T@U)
(declare-fun |call7formal@u#0@@0| () T@U)
(declare-fun |call8formal@v#0@@0| () T@U)
(declare-fun call1formal@_module.MyClass$U@@0 () T@U)
(declare-fun $Heap@7 () T@U)
(declare-fun |call6formal@t#0@0@@0| () T@U)
(declare-fun |call7formal@u#0@0@@0| () T@U)
(declare-fun |call8formal@v#0@0@@1| () T@U)
(declare-fun |s##0_2@1| () Bool)
(declare-fun |call6formal@t#0@@1| () T@U)
(declare-fun |call7formal@u#0@@1| () T@U)
(declare-fun |call8formal@v#0@@1| () T@U)
(declare-fun call1formal@_module.MyClass$U@@1 () T@U)
(declare-fun |call6formal@t#0@0@@1| () T@U)
(declare-fun |call7formal@u#0@0@@1| () T@U)
(declare-fun $Heap@2 () T@U)
(declare-fun |$rhs#0_1_0@1| () Int)
(declare-fun $Heap@4 () T@U)
(declare-fun |$rhs#0_0_0@1| () Int)
(declare-fun $Heap@3 () T@U)
(declare-fun |$rhs#0_0@1| () Int)
(declare-fun |u#0@0| () T@U)
(declare-fun |v#0@0| () T@U)
(declare-fun |to#0_0@0| () T@U)
(declare-fun |$rhs#0@0| () Int)
(declare-fun $Heap@0 () T@U)
(declare-fun |defass#t#0| () Bool)
(declare-fun |$decr_init$loop#00@0| () Int)
(declare-fun |t#0| () T@U)
(declare-fun |u#0| () T@U)
(declare-fun |v#0| () T@U)
(declare-fun |to#0_0| () T@U)
(declare-fun $FunctionContextHeight () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 47) (let ((GeneratedUnifiedExit_correct  (and (=> (= (ControlFlow 0 37) (- 0 38)) (= |t#0@1| |t#0@1|)) (=> (= |t#0@1| |t#0@1|) (=> (= (ControlFlow 0 37) (- 0 36)) (or (not (= null this)) (not true)))))))
(let ((anon14_Then_correct  (=> (<= 100 (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 this) _module.MyClass.x)))) (and (=> (= (ControlFlow 0 39) (- 0 40)) |defass#t#0@0|) (=> |defass#t#0@0| (=> (and (= |t#0@1| |t#0@0|) (= (ControlFlow 0 39) 37)) GeneratedUnifiedExit_correct))))))
(let ((anon10_correct  (and (=> (= (ControlFlow 0 4) (- 0 7)) (=> (or (not (= ($Unbox refType (|Seq#Index| |call8formal@v#0@0| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@8 this) _module.MyClass.x))))) null)) (not true)) (not (|Seq#Contains| (|Seq#Take| (|Seq#Update| (|Seq#Drop| (|Seq#Drop| (|Seq#Take| |call8formal@v#0@0| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@8 this) _module.MyClass.x)))) (LitInt 2)) (LitInt 1)) (LitInt 5) (|Seq#Index| |call8formal@v#0@0| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@8 this) _module.MyClass.x))))) (LitInt 10)) ($Box refType null))))) (=> (=> (or (not (= ($Unbox refType (|Seq#Index| |call8formal@v#0@0| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@8 this) _module.MyClass.x))))) null)) (not true)) (not (|Seq#Contains| (|Seq#Take| (|Seq#Update| (|Seq#Drop| (|Seq#Drop| (|Seq#Take| |call8formal@v#0@0| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@8 this) _module.MyClass.x)))) (LitInt 2)) (LitInt 1)) (LitInt 5) (|Seq#Index| |call8formal@v#0@0| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@8 this) _module.MyClass.x))))) (LitInt 10)) ($Box refType null)))) (and (=> (= (ControlFlow 0 4) (- 0 6)) (or (<= 0 |$decr$loop#00@1|) (= (- 100 (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@8 this) _module.MyClass.x)))) |$decr$loop#00@1|))) (=> (or (<= 0 |$decr$loop#00@1|) (= (- 100 (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@8 this) _module.MyClass.x)))) |$decr$loop#00@1|)) (and (=> (= (ControlFlow 0 4) (- 0 5)) (< (- 100 (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@8 this) _module.MyClass.x)))) |$decr$loop#00@1|)) (=> (< (- 100 (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@8 this) _module.MyClass.x)))) |$decr$loop#00@1|) (=> (= (ControlFlow 0 4) (- 0 3)) (=> |$w$loop#0@0| (<= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@8 this) _module.MyClass.x))) (LitInt 100))))))))))))
(let ((anon16_Else_correct  (=> (and (= ($Unbox refType (|Seq#Index| |call8formal@v#0@0| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@8 this) _module.MyClass.x))))) null) (= (ControlFlow 0 15) 4)) anon10_correct)))
(let ((anon16_Then_correct  (=> (or (not (= ($Unbox refType (|Seq#Index| |call8formal@v#0@0| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@8 this) _module.MyClass.x))))) null)) (not true)) (and (=> (= (ControlFlow 0 8) (- 0 14)) (and (<= 0 (LitInt 2)) (<= (LitInt 2) (|Seq#Length| |call8formal@v#0@0|)))) (and (=> (= (ControlFlow 0 8) (- 0 13)) (and (<= (LitInt 2) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@8 this) _module.MyClass.x)))) (<= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@8 this) _module.MyClass.x))) (|Seq#Length| |call8formal@v#0@0|)))) (and (=> (= (ControlFlow 0 8) (- 0 12)) (and (<= 0 (LitInt 1)) (<= (LitInt 1) (|Seq#Length| (|Seq#Drop| (|Seq#Take| |call8formal@v#0@0| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@8 this) _module.MyClass.x)))) (LitInt 2)))))) (and (=> (= (ControlFlow 0 8) (- 0 11)) (and (<= 0 (LitInt 5)) (< (LitInt 5) (|Seq#Length| (|Seq#Drop| (|Seq#Drop| (|Seq#Take| |call8formal@v#0@0| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@8 this) _module.MyClass.x)))) (LitInt 2)) (LitInt 1)))))) (and (=> (= (ControlFlow 0 8) (- 0 10)) (and (<= 0 (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@8 this) _module.MyClass.x)))) (< (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@8 this) _module.MyClass.x))) (|Seq#Length| |call8formal@v#0@0|)))) (and (=> (= (ControlFlow 0 8) (- 0 9)) (and (<= 0 (LitInt 10)) (<= (LitInt 10) (|Seq#Length| (|Seq#Update| (|Seq#Drop| (|Seq#Drop| (|Seq#Take| |call8formal@v#0@0| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@8 this) _module.MyClass.x)))) (LitInt 2)) (LitInt 1)) (LitInt 5) (|Seq#Index| |call8formal@v#0@0| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@8 this) _module.MyClass.x))))))))) (=> (= (ControlFlow 0 8) 4) anon10_correct))))))))))
(let ((anon8_correct  (=> (= |s##0_0@1| (U_2_bool (Lit boolType (bool_2_U true)))) (and (=> (= (ControlFlow 0 16) (- 0 28)) (forall (($o@@6 T@U) ($f@@0 T@U) )  (=> (and (and (or (not (= $o@@6 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 $o@@6) alloc)))) (or (= $o@@6 this) (|Set#IsMember| |lotsaObjects#0| ($Box refType $o@@6)))) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@6 $f@@0))))) (=> (forall (($o@@7 T@U) ($f@@1 T@U) )  (=> (and (and (or (not (= $o@@7 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 $o@@7) alloc)))) (or (= $o@@7 this) (|Set#IsMember| |lotsaObjects#0| ($Box refType $o@@7)))) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@7 $f@@1)))) (and (=> (= (ControlFlow 0 16) (- 0 27)) (or (and (not |s##0_0@1|) |s#0|) (and (= |s##0_0@1| |s#0|) (and (|Set#Subset| |lotsaObjects#0| |lotsaObjects#0|) (not (|Set#Subset| |lotsaObjects#0| |lotsaObjects#0|)))))) (=> (or (and (not |s##0_0@1|) |s#0|) (and (= |s##0_0@1| |s#0|) (and (|Set#Subset| |lotsaObjects#0| |lotsaObjects#0|) (not (|Set#Subset| |lotsaObjects#0| |lotsaObjects#0|))))) (=> (and ($Is refType |call6formal@t#0| Tclass._System.object) ($IsAlloc refType |call6formal@t#0| Tclass._System.object $Heap)) (=> (and (and ($Is SetType |call7formal@u#0| (TSet TInt)) ($IsAlloc SetType |call7formal@u#0| (TSet TInt) $Heap)) (and ($Is SeqType |call8formal@v#0| (TSeq (Tclass._module.MyClass? TBool call1formal@_module.MyClass$U))) ($IsAlloc SeqType |call8formal@v#0| (TSeq (Tclass._module.MyClass? TBool call1formal@_module.MyClass$U)) $Heap))) (and (=> (= (ControlFlow 0 16) (- 0 26)) |s##0_0@1|) (=> |s##0_0@1| (=> (and ($IsGoodHeap $Heap@6) ($IsHeapAnchor $Heap@6)) (=> (and (and ($Is refType |call6formal@t#0@0| Tclass._System.object) ($IsAlloc refType |call6formal@t#0@0| Tclass._System.object $Heap@6)) (and ($Is SetType |call7formal@u#0@0| (TSet TInt)) ($IsAlloc SetType |call7formal@u#0@0| (TSet TInt) $Heap@6))) (=> (and (and (and ($Is SeqType |call8formal@v#0@0@@0| (TSeq (Tclass._module.MyClass? TBool _module.MyClass$U@@13))) ($IsAlloc SeqType |call8formal@v#0@0@@0| (TSeq (Tclass._module.MyClass? TBool _module.MyClass$U@@13)) $Heap@6)) (and (= |call6formal@t#0@0| |call6formal@t#0@0|) (or (not (= null this)) (not true)))) (and (and (forall (($o@@8 T@U) ) (!  (=> (and (or (not (= $o@@8 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 $o@@8) alloc)))) (or (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 $o@@8) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 $o@@8)) (or (= $o@@8 this) (|Set#IsMember| |lotsaObjects#0| ($Box refType $o@@8)))))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 $o@@8))
)) ($HeapSucc $Heap@5 $Heap@6)) (and (=> |defass#to#0_0| (and ($Is refType |to#0_0@1| (Tclass._module.MyClass _module.MyClass$T@@13 _module.MyClass$U@@13)) ($IsAlloc refType |to#0_0@1| (Tclass._module.MyClass _module.MyClass$T@@13 _module.MyClass$U@@13) $Heap@6))) (= |s##0_1@1| (U_2_bool (Lit boolType (bool_2_U true))))))) (and (=> (= (ControlFlow 0 16) (- 0 25)) (forall (($o@@9 T@U) ($f@@2 T@U) )  (=> (and (and (or (not (= $o@@9 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 $o@@9) alloc)))) (or (= $o@@9 this) (|Set#IsMember| |lotsaObjects#0| ($Box refType $o@@9)))) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@9 $f@@2))))) (=> (forall (($o@@10 T@U) ($f@@3 T@U) )  (=> (and (and (or (not (= $o@@10 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 $o@@10) alloc)))) (or (= $o@@10 this) (|Set#IsMember| |lotsaObjects#0| ($Box refType $o@@10)))) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@10 $f@@3)))) (and (=> (= (ControlFlow 0 16) (- 0 24)) (or (and (not |s##0_1@1|) |s#0|) (and (= |s##0_1@1| |s#0|) (and (|Set#Subset| |lotsaObjects#0| |lotsaObjects#0|) (not (|Set#Subset| |lotsaObjects#0| |lotsaObjects#0|)))))) (=> (or (and (not |s##0_1@1|) |s#0|) (and (= |s##0_1@1| |s#0|) (and (|Set#Subset| |lotsaObjects#0| |lotsaObjects#0|) (not (|Set#Subset| |lotsaObjects#0| |lotsaObjects#0|))))) (=> (and ($Is refType |call6formal@t#0@@0| Tclass._System.object) ($IsAlloc refType |call6formal@t#0@@0| Tclass._System.object $Heap)) (=> (and (and ($Is SetType |call7formal@u#0@@0| (TSet TInt)) ($IsAlloc SetType |call7formal@u#0@@0| (TSet TInt) $Heap)) (and ($Is SeqType |call8formal@v#0@@0| (TSeq (Tclass._module.MyClass? TBool call1formal@_module.MyClass$U@@0))) ($IsAlloc SeqType |call8formal@v#0@@0| (TSeq (Tclass._module.MyClass? TBool call1formal@_module.MyClass$U@@0)) $Heap))) (and (=> (= (ControlFlow 0 16) (- 0 23)) |s##0_1@1|) (=> |s##0_1@1| (=> (and (and ($IsGoodHeap $Heap@7) ($IsHeapAnchor $Heap@7)) (and ($Is refType |call6formal@t#0@0@@0| Tclass._System.object) ($IsAlloc refType |call6formal@t#0@0@@0| Tclass._System.object $Heap@7))) (=> (and (and (and ($Is SetType |call7formal@u#0@0@@0| (TSet TInt)) ($IsAlloc SetType |call7formal@u#0@0@@0| (TSet TInt) $Heap@7)) (and ($Is SeqType |call8formal@v#0@0@@1| (TSeq (Tclass._module.MyClass? TBool _module.MyClass$U@@13))) ($IsAlloc SeqType |call8formal@v#0@0@@1| (TSeq (Tclass._module.MyClass? TBool _module.MyClass$U@@13)) $Heap@7))) (and (and (= |call6formal@t#0@0@@0| |call6formal@t#0@0@@0|) (or (not (= null this)) (not true))) (and (forall (($o@@11 T@U) ) (!  (=> (and (or (not (= $o@@11 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 $o@@11) alloc)))) (or (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@7 $o@@11) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 $o@@11)) (or (= $o@@11 this) (|Set#IsMember| |lotsaObjects#0| ($Box refType $o@@11)))))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@7 $o@@11))
)) ($HeapSucc $Heap@6 $Heap@7)))) (and (=> (= (ControlFlow 0 16) (- 0 22)) |defass#to#0_0|) (=> |defass#to#0_0| (and (=> (= (ControlFlow 0 16) (- 0 21)) (or (not (= |to#0_0@1| null)) (not true))) (=> (or (not (= |to#0_0@1| null)) (not true)) (=> (= |s##0_2@1| (U_2_bool (Lit boolType (bool_2_U true)))) (and (=> (= (ControlFlow 0 16) (- 0 20)) (forall (($o@@12 T@U) ($f@@4 T@U) )  (=> (and (and (or (not (= $o@@12 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@7 $o@@12) alloc)))) (or (= $o@@12 |to#0_0@1|) (|Set#IsMember| |lotsaObjects#0| ($Box refType $o@@12)))) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@12 $f@@4))))) (=> (forall (($o@@13 T@U) ($f@@5 T@U) )  (=> (and (and (or (not (= $o@@13 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@7 $o@@13) alloc)))) (or (= $o@@13 |to#0_0@1|) (|Set#IsMember| |lotsaObjects#0| ($Box refType $o@@13)))) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@13 $f@@5)))) (and (=> (= (ControlFlow 0 16) (- 0 19)) (or (and (not |s##0_2@1|) |s#0|) (and (= |s##0_2@1| |s#0|) (and (|Set#Subset| |lotsaObjects#0| |lotsaObjects#0|) (not (|Set#Subset| |lotsaObjects#0| |lotsaObjects#0|)))))) (=> (or (and (not |s##0_2@1|) |s#0|) (and (= |s##0_2@1| |s#0|) (and (|Set#Subset| |lotsaObjects#0| |lotsaObjects#0|) (not (|Set#Subset| |lotsaObjects#0| |lotsaObjects#0|))))) (=> (and ($Is refType |call6formal@t#0@@1| Tclass._System.object) ($IsAlloc refType |call6formal@t#0@@1| Tclass._System.object $Heap)) (=> (and (and ($Is SetType |call7formal@u#0@@1| (TSet TInt)) ($IsAlloc SetType |call7formal@u#0@@1| (TSet TInt) $Heap)) (and ($Is SeqType |call8formal@v#0@@1| (TSeq (Tclass._module.MyClass? TBool call1formal@_module.MyClass$U@@1))) ($IsAlloc SeqType |call8formal@v#0@@1| (TSeq (Tclass._module.MyClass? TBool call1formal@_module.MyClass$U@@1)) $Heap))) (and (=> (= (ControlFlow 0 16) (- 0 18)) |s##0_2@1|) (=> |s##0_2@1| (=> (and (and ($IsGoodHeap $Heap@8) ($IsHeapAnchor $Heap@8)) (and ($Is refType |call6formal@t#0@0@@1| Tclass._System.object) ($IsAlloc refType |call6formal@t#0@0@@1| Tclass._System.object $Heap@8))) (=> (and (and (and ($Is SetType |call7formal@u#0@0@@1| (TSet TInt)) ($IsAlloc SetType |call7formal@u#0@0@@1| (TSet TInt) $Heap@8)) (and ($Is SeqType |call8formal@v#0@0| (TSeq (Tclass._module.MyClass? TBool _module.MyClass$U@@13))) ($IsAlloc SeqType |call8formal@v#0@0| (TSeq (Tclass._module.MyClass? TBool _module.MyClass$U@@13)) $Heap@8))) (and (and (= |call6formal@t#0@0@@1| |call6formal@t#0@0@@1|) (or (not (= null |to#0_0@1|)) (not true))) (and (forall (($o@@14 T@U) ) (!  (=> (and (or (not (= $o@@14 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@7 $o@@14) alloc)))) (or (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@8 $o@@14) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@7 $o@@14)) (or (= $o@@14 |to#0_0@1|) (|Set#IsMember| |lotsaObjects#0| ($Box refType $o@@14)))))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@8 $o@@14))
)) ($HeapSucc $Heap@7 $Heap@8)))) (and (=> (= (ControlFlow 0 16) (- 0 17)) (and (<= 0 (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@8 this) _module.MyClass.x)))) (< (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@8 this) _module.MyClass.x))) (|Seq#Length| |call8formal@v#0@0|)))) (and (=> (= (ControlFlow 0 16) 8) anon16_Then_correct) (=> (= (ControlFlow 0 16) 15) anon16_Else_correct))))))))))))))))))))))))))))))))))))))))))
(let ((anon15_Else_correct  (=> (or (not (= (Mod (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 this) _module.MyClass.x))) (LitInt 20)) (LitInt 3))) (not true)) (and (=> (= (ControlFlow 0 31) (- 0 32)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 this _module.MyClass.x))) (=> (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 this _module.MyClass.x)) (=> (= |$rhs#0_1_0@1| (+ (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 this) _module.MyClass.x))) 0)) (=> (and (and (= $Heap@4 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap@2 this (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 this) _module.MyClass.x ($Box intType (int_2_U |$rhs#0_1_0@1|))))) ($IsGoodHeap $Heap@4)) (and (= $Heap@5 $Heap@4) (= (ControlFlow 0 31) 16))) anon8_correct)))))))
(let ((anon15_Then_correct  (=> (= (Mod (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 this) _module.MyClass.x))) (LitInt 20)) (LitInt 3)) (and (=> (= (ControlFlow 0 29) (- 0 30)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 this _module.MyClass.x))) (=> (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 this _module.MyClass.x)) (=> (= |$rhs#0_0_0@1| (+ (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 this) _module.MyClass.x))) 1)) (=> (and (and (= $Heap@3 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap@2 this (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 this) _module.MyClass.x ($Box intType (int_2_U |$rhs#0_0_0@1|))))) ($IsGoodHeap $Heap@3)) (and (= $Heap@5 $Heap@3) (= (ControlFlow 0 29) 16))) anon8_correct)))))))
(let ((anon14_Else_correct  (=> (and (< (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 this) _module.MyClass.x))) 100) (= |$decr$loop#00@1| (- 100 (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 this) _module.MyClass.x)))))) (and (=> (= (ControlFlow 0 33) (- 0 35)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 this _module.MyClass.x))) (=> (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 this _module.MyClass.x)) (=> (= |$rhs#0_0@1| (+ (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 this) _module.MyClass.x))) 17)) (=> (and (= $Heap@2 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap@1 this (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 this) _module.MyClass.x ($Box intType (int_2_U |$rhs#0_0@1|))))) ($IsGoodHeap $Heap@2)) (and (=> (= (ControlFlow 0 33) (- 0 34)) (or (not (= (LitInt 20) 0)) (not true))) (=> (or (not (= (LitInt 20) 0)) (not true)) (and (=> (= (ControlFlow 0 33) 29) anon15_Then_correct) (=> (= (ControlFlow 0 33) 31) anon15_Else_correct)))))))))))
(let ((anon13_Else_correct  (=> |$w$loop#0@0| (and (=> (= (ControlFlow 0 41) 39) anon14_Then_correct) (=> (= (ControlFlow 0 41) 33) anon14_Else_correct)))))
(let ((anon13_Then_correct true))
(let ((anon12_LoopBody_correct  (and (=> (= (ControlFlow 0 42) 2) anon13_Then_correct) (=> (= (ControlFlow 0 42) 41) anon13_Else_correct))))
(let ((anon12_LoopDone_correct true))
(let ((anon12_LoopHead_correct  (=> (and (and (and (and (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1)) (=> |defass#t#0@0| (and ($Is refType |t#0@0| Tclass._System.object) ($IsAlloc refType |t#0@0| Tclass._System.object $Heap@1)))) (and ($Is SetType |u#0@0| (TSet TInt)) ($IsAlloc SetType |u#0@0| (TSet TInt) $Heap@1))) (and (and ($Is SeqType |v#0@0| (TSeq (Tclass._module.MyClass? TBool _module.MyClass$U@@13))) ($IsAlloc SeqType |v#0@0| (TSeq (Tclass._module.MyClass? TBool _module.MyClass$U@@13)) $Heap@1)) (=> |defass#to#0_0| (and ($Is refType |to#0_0@0| (Tclass._module.MyClass _module.MyClass$T@@13 _module.MyClass$U@@13)) ($IsAlloc refType |to#0_0@0| (Tclass._module.MyClass _module.MyClass$T@@13 _module.MyClass$U@@13) $Heap@1))))) (and (and (and (not false) (= |$rhs#0@0| 12)) (and (=> |$w$loop#0@0| (<= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 this) _module.MyClass.x))) (LitInt 100))) (forall (($o@@15 T@U) ) (!  (=> (and (or (not (= $o@@15 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@15) alloc)))) (or (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@15) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@15)) (or (= $o@@15 this) (|Set#IsMember| |lotsaObjects#0| ($Box refType $o@@15)))))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@15))
)))) (and (and ($HeapSucc $Heap@0 $Heap@1) (forall (($o@@16 T@U) ($f@@6 T@U) ) (!  (=> (and (or (not (= $o@@16 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@16) alloc)))) (or (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@16) $f@@6) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@16) $f@@6)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@16 $f@@6))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@16) $f@@6))
))) (and (=> |defass#t#0| |defass#t#0@0|) (<= (- 100 (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 this) _module.MyClass.x)))) |$decr_init$loop#00@0|))))) (and (=> (= (ControlFlow 0 43) 1) anon12_LoopDone_correct) (=> (= (ControlFlow 0 43) 42) anon12_LoopBody_correct)))))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#2| null $Heap alloc this |lotsaObjects#0|)) (and (=> (= (ControlFlow 0 44) (- 0 46)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 this _module.MyClass.x))) (=> (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 this _module.MyClass.x)) (=> (and (and (= |$rhs#0@0| (LitInt 12)) (= $Heap@0 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap this (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.MyClass.x ($Box intType (int_2_U |$rhs#0@0|)))))) (and ($IsGoodHeap $Heap@0) (= |$decr_init$loop#00@0| (- 100 (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 this) _module.MyClass.x))))))) (and (=> (= (ControlFlow 0 44) (- 0 45)) (=> |$w$loop#0@0| (<= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 this) _module.MyClass.x))) (LitInt 100)))) (=> (=> |$w$loop#0@0| (<= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 this) _module.MyClass.x))) (LitInt 100))) (=> (= (ControlFlow 0 44) 43) anon12_LoopHead_correct)))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (and (or (not (= this null)) (not true)) (and ($Is refType this (Tclass._module.MyClass _module.MyClass$T@@13 _module.MyClass$U@@13)) ($IsAlloc refType this (Tclass._module.MyClass _module.MyClass$T@@13 _module.MyClass$U@@13) $Heap)))) (=> (and (and (and (and ($Is SetType |lotsaObjects#0| (TSet Tclass._System.object)) ($IsAlloc SetType |lotsaObjects#0| (TSet Tclass._System.object) $Heap)) (=> |defass#t#0| (and ($Is refType |t#0| Tclass._System.object) ($IsAlloc refType |t#0| Tclass._System.object $Heap)))) (and (and ($Is SetType |u#0| (TSet TInt)) ($IsAlloc SetType |u#0| (TSet TInt) $Heap)) (and ($Is SeqType |v#0| (TSeq (Tclass._module.MyClass? TBool _module.MyClass$U@@13))) ($IsAlloc SeqType |v#0| (TSeq (Tclass._module.MyClass? TBool _module.MyClass$U@@13)) $Heap)))) (and (and (and (=> |defass#to#0_0| (and ($Is refType |to#0_0| (Tclass._module.MyClass _module.MyClass$T@@13 _module.MyClass$U@@13)) ($IsAlloc refType |to#0_0| (Tclass._module.MyClass _module.MyClass$T@@13 _module.MyClass$U@@13) $Heap))) true) (= 1 $FunctionContextHeight)) (and |s#0| (= (ControlFlow 0 47) 44)))) anon0_correct))))
PreconditionGeneratedEntry_correct)))))))))))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 39) (- 40))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 16) (- 27))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
