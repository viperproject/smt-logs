(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 (T@T) Int)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Bool) T@U)
(declare-fun $generated@@9 (T@U) Bool)
(declare-fun $generated@@10 (Int) T@U)
(declare-fun $generated@@11 (T@U) Int)
(declare-fun $generated@@12 (Real) T@U)
(declare-fun $generated@@13 (T@U) Real)
(declare-fun $generated@@20 (T@U) T@U)
(declare-fun $generated@@21 () T@U)
(declare-fun $generated@@22 (T@T T@U T@U) Bool)
(declare-fun $generated@@23 () T@T)
(declare-fun $generated@@24 () T@U)
(declare-fun $generated@@25 (Int) Int)
(declare-fun $generated@@27 (T@T T@U) T@U)
(declare-fun $generated@@30 (T@U) Bool)
(declare-fun $generated@@32 (T@U) Bool)
(declare-fun $generated@@34 (T@T T@U) T@U)
(declare-fun $generated@@35 (T@T T@U) T@U)
(declare-fun $generated@@39 (T@U) T@U)
(declare-fun $generated@@42 () Int)
(declare-fun $generated@@43 (T@U Int T@U Int) Bool)
(declare-fun $generated@@44 (T@U) T@U)
(declare-fun $generated@@45 (Int T@U Int) Bool)
(declare-fun $generated@@46 (T@U) T@U)
(declare-fun $generated@@77 (T@U) Int)
(declare-fun $generated@@79 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@80 () T@T)
(declare-fun $generated@@81 () T@T)
(declare-fun $generated@@82 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@83 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@84 () T@T)
(declare-fun $generated@@85 (T@T T@T) T@T)
(declare-fun $generated@@86 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@87 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@88 (T@T) T@T)
(declare-fun $generated@@89 (T@T) T@T)
(declare-fun $generated@@138 (T@U) T@U)
(declare-fun $generated@@139 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@4 $generated@@5) 0) (= ($generated@@4 $generated@@6) 1)) (= ($generated@@4 $generated@@7) 2)) (forall (($generated@@14 Bool) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Int) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Real) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3)
)
(assert (= ($generated@@20 $generated@@21) $generated@@1))
(assert (= ($generated@@4 $generated@@23) 3))
(assert ($generated@@22 $generated@@23 $generated@@21 $generated@@24))
(assert (forall (($generated@@26 Int) ) (! (= ($generated@@25 $generated@@26) $generated@@26)
 :pattern ( ($generated@@25 $generated@@26))
)))
(assert (forall (($generated@@28 T@U) ($generated@@29 T@T) ) (! (= ($generated@@27 $generated@@29 $generated@@28) $generated@@28)
 :pattern ( ($generated@@27 $generated@@29 $generated@@28))
)))
(assert (forall (($generated@@31 T@U) ) (! (= ($generated@@30 $generated@@31) (= ($generated@@20 $generated@@31) $generated@@1))
 :pattern ( ($generated@@30 $generated@@31))
)))
(assert (forall (($generated@@33 T@U) ) (! (= ($generated@@32 $generated@@33) (= ($generated@@20 $generated@@33) $generated@@2))
 :pattern ( ($generated@@32 $generated@@33))
)))
(assert (forall (($generated@@36 T@U) ($generated@@37 T@T) ) (! (= ($generated@@35 $generated@@37 ($generated@@34 $generated@@37 $generated@@36)) $generated@@36)
 :pattern ( ($generated@@34 $generated@@37 $generated@@36))
)))
(assert (forall (($generated@@38 T@U) ) (!  (=> ($generated@@30 $generated@@38) (= $generated@@38 $generated@@21))
 :pattern ( ($generated@@30 $generated@@38))
)))
(assert (forall (($generated@@40 T@U) ) (!  (=> ($generated@@32 $generated@@40) (exists (($generated@@41 T@U) ) (= $generated@@40 ($generated@@39 $generated@@41))))
 :pattern ( ($generated@@32 $generated@@40))
)))
(assert  (=> (<= 1 $generated@@42) (forall (($generated@@47 T@U) ($generated@@48 Int) ($generated@@49 T@U) ($generated@@50 Int) ) (!  (=> (or ($generated@@45 $generated@@48 $generated@@49 $generated@@50) (and (< 1 $generated@@42) (and (and (<= ($generated@@25 0) $generated@@48) ($generated@@22 $generated@@23 $generated@@49 $generated@@24)) (<= ($generated@@25 0) $generated@@50)))) (and (=> (not ($generated@@30 $generated@@49)) (let (($generated@@51 ($generated@@46 $generated@@49)))
 (=> (> $generated@@48 0) (forall (($generated@@52 Int) ($generated@@53 Int) ) (!  (=> (and (<= ($generated@@25 0) $generated@@52) (<= ($generated@@25 0) $generated@@53)) (=> (= $generated@@53 (- $generated@@48 1)) ($generated@@45 $generated@@53 $generated@@51 $generated@@52)))
 :pattern ( ($generated@@43 $generated@@47 $generated@@53 $generated@@51 $generated@@52))
))))) (= ($generated@@43 ($generated@@44 $generated@@47) $generated@@48 $generated@@49 $generated@@50) (ite ($generated@@30 $generated@@49) true (let (($generated@@54 ($generated@@46 $generated@@49)))
 (and (> $generated@@48 0) (exists (($generated@@55 Int) ($generated@@56 Int) ) (!  (and (and (<= ($generated@@25 0) $generated@@55) (<= ($generated@@25 0) $generated@@56)) (and (= $generated@@56 (- $generated@@48 1)) ($generated@@43 $generated@@47 $generated@@56 $generated@@54 $generated@@55)))
 :pattern ( ($generated@@43 $generated@@47 $generated@@56 $generated@@54 $generated@@55))
))))))))
 :pattern ( ($generated@@43 ($generated@@44 $generated@@47) $generated@@48 $generated@@49 $generated@@50))
))))
(assert (forall (($generated@@57 T@U) ) (! (= ($generated@@22 $generated@@23 ($generated@@39 $generated@@57) $generated@@24) ($generated@@22 $generated@@23 $generated@@57 $generated@@24))
 :pattern ( ($generated@@22 $generated@@23 ($generated@@39 $generated@@57) $generated@@24))
)))
(assert  (=> (<= 1 $generated@@42) (forall (($generated@@58 T@U) ($generated@@59 Int) ($generated@@60 T@U) ($generated@@61 Int) ) (!  (=> (or ($generated@@45 ($generated@@25 $generated@@59) ($generated@@27 $generated@@23 $generated@@60) ($generated@@25 $generated@@61)) (and (< 1 $generated@@42) (and (and (<= ($generated@@25 0) $generated@@59) ($generated@@22 $generated@@23 $generated@@60 $generated@@24)) (<= ($generated@@25 0) $generated@@61)))) (and (=> (not ($generated@@9 ($generated@@27 $generated@@5 ($generated@@8 ($generated@@30 ($generated@@27 $generated@@23 $generated@@60)))))) (let (($generated@@62 ($generated@@27 $generated@@23 ($generated@@46 ($generated@@27 $generated@@23 $generated@@60)))))
 (=> ($generated@@9 ($generated@@27 $generated@@5 ($generated@@8 (> $generated@@59 0)))) (forall (($generated@@63 Int) ($generated@@64 Int) ) (!  (=> (and (<= ($generated@@25 0) $generated@@63) (<= ($generated@@25 0) $generated@@64)) (=> (= $generated@@64 ($generated@@25 (- $generated@@59 1))) ($generated@@45 $generated@@64 $generated@@62 $generated@@63)))
 :pattern ( ($generated@@43 ($generated@@44 $generated@@58) $generated@@64 $generated@@62 $generated@@63))
))))) (= ($generated@@43 ($generated@@44 $generated@@58) ($generated@@25 $generated@@59) ($generated@@27 $generated@@23 $generated@@60) ($generated@@25 $generated@@61)) (ite ($generated@@30 ($generated@@27 $generated@@23 $generated@@60)) true (let (($generated@@65 ($generated@@27 $generated@@23 ($generated@@46 ($generated@@27 $generated@@23 $generated@@60)))))
 (and (> $generated@@59 0) (exists (($generated@@66 Int) ($generated@@67 Int) ) (!  (and (and (<= ($generated@@25 0) $generated@@66) (<= ($generated@@25 0) $generated@@67)) (and (= $generated@@67 ($generated@@25 (- $generated@@59 1))) ($generated@@43 ($generated@@44 $generated@@58) $generated@@67 $generated@@65 $generated@@66)))
 :pattern ( ($generated@@43 ($generated@@44 $generated@@58) $generated@@67 $generated@@65 $generated@@66))
))))))))
 :weight 3
 :pattern ( ($generated@@43 ($generated@@44 $generated@@58) ($generated@@25 $generated@@59) ($generated@@27 $generated@@23 $generated@@60) ($generated@@25 $generated@@61)))
))))
(assert (forall (($generated@@68 T@U) ) (!  (=> ($generated@@22 $generated@@23 $generated@@68 $generated@@24) (or ($generated@@30 $generated@@68) ($generated@@32 $generated@@68)))
 :pattern ( ($generated@@32 $generated@@68) ($generated@@22 $generated@@23 $generated@@68 $generated@@24))
 :pattern ( ($generated@@30 $generated@@68) ($generated@@22 $generated@@23 $generated@@68 $generated@@24))
)))
(assert (forall (($generated@@69 T@U) ($generated@@70 Int) ($generated@@71 T@U) ($generated@@72 Int) ) (! (= ($generated@@43 ($generated@@44 $generated@@69) $generated@@70 $generated@@71 $generated@@72) ($generated@@43 $generated@@69 $generated@@70 $generated@@71 $generated@@72))
 :pattern ( ($generated@@43 ($generated@@44 $generated@@69) $generated@@70 $generated@@71 $generated@@72))
)))
(assert (forall (($generated@@73 T@U) ) (! (= ($generated@@20 ($generated@@39 $generated@@73)) $generated@@2)
 :pattern ( ($generated@@39 $generated@@73))
)))
(assert (forall (($generated@@74 T@U) ) (! (= ($generated@@46 ($generated@@39 $generated@@74)) $generated@@74)
 :pattern ( ($generated@@39 $generated@@74))
)))
(assert (forall (($generated@@75 T@U) ($generated@@76 T@T) ) (! (= ($generated@@34 $generated@@76 ($generated@@35 $generated@@76 $generated@@75)) $generated@@75)
 :pattern ( ($generated@@35 $generated@@76 $generated@@75))
)))
(assert (forall (($generated@@78 T@U) ) (! (< ($generated@@77 $generated@@78) ($generated@@77 ($generated@@39 $generated@@78)))
 :pattern ( ($generated@@39 $generated@@78))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@90 T@T) ($generated@@91 T@T) ($generated@@92 T@T) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ) (! (= ($generated@@79 $generated@@90 $generated@@91 $generated@@92 ($generated@@86 $generated@@90 $generated@@91 $generated@@92 $generated@@94 $generated@@95 $generated@@96 $generated@@93) $generated@@95 $generated@@96) $generated@@93)
 :weight 0
)) (and (forall (($generated@@97 T@T) ($generated@@98 T@T) ($generated@@99 T@T) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ) (!  (or (= $generated@@102 $generated@@104) (= ($generated@@79 $generated@@97 $generated@@98 $generated@@99 ($generated@@86 $generated@@97 $generated@@98 $generated@@99 $generated@@101 $generated@@102 $generated@@103 $generated@@100) $generated@@104 $generated@@105) ($generated@@79 $generated@@97 $generated@@98 $generated@@99 $generated@@101 $generated@@104 $generated@@105)))
 :weight 0
)) (forall (($generated@@106 T@T) ($generated@@107 T@T) ($generated@@108 T@T) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ) (!  (or (= $generated@@112 $generated@@114) (= ($generated@@79 $generated@@106 $generated@@107 $generated@@108 ($generated@@86 $generated@@106 $generated@@107 $generated@@108 $generated@@110 $generated@@111 $generated@@112 $generated@@109) $generated@@113 $generated@@114) ($generated@@79 $generated@@106 $generated@@107 $generated@@108 $generated@@110 $generated@@113 $generated@@114)))
 :weight 0
)))) (= ($generated@@4 $generated@@80) 4)) (= ($generated@@4 $generated@@81) 5)) (forall (($generated@@115 T@T) ($generated@@116 T@T) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ) (! (= ($generated@@83 $generated@@115 $generated@@116 ($generated@@87 $generated@@115 $generated@@116 $generated@@118 $generated@@119 $generated@@117) $generated@@119) $generated@@117)
 :weight 0
))) (forall (($generated@@120 T@T) ($generated@@121 T@T) ($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ) (!  (or (= $generated@@124 $generated@@125) (= ($generated@@83 $generated@@120 $generated@@121 ($generated@@87 $generated@@120 $generated@@121 $generated@@123 $generated@@124 $generated@@122) $generated@@125) ($generated@@83 $generated@@120 $generated@@121 $generated@@123 $generated@@125)))
 :weight 0
))) (= ($generated@@4 $generated@@84) 6)) (forall (($generated@@126 T@T) ($generated@@127 T@T) ) (= ($generated@@4 ($generated@@85 $generated@@126 $generated@@127)) 7))) (forall (($generated@@128 T@T) ($generated@@129 T@T) ) (! (= ($generated@@88 ($generated@@85 $generated@@128 $generated@@129)) $generated@@128)
 :pattern ( ($generated@@85 $generated@@128 $generated@@129))
))) (forall (($generated@@130 T@T) ($generated@@131 T@T) ) (! (= ($generated@@89 ($generated@@85 $generated@@130 $generated@@131)) $generated@@131)
 :pattern ( ($generated@@85 $generated@@130 $generated@@131))
))))
(assert (forall (($generated@@132 T@U) ($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 Bool) ($generated@@136 T@U) ($generated@@137 T@U) ) (! (= ($generated@@9 ($generated@@79 $generated@@80 $generated@@81 $generated@@5 ($generated@@82 $generated@@132 $generated@@133 $generated@@134 $generated@@135) $generated@@136 $generated@@137))  (=> (and (or (not (= $generated@@136 $generated@@132)) (not true)) ($generated@@9 ($generated@@34 $generated@@5 ($generated@@83 $generated@@81 $generated@@84 ($generated@@83 $generated@@80 ($generated@@85 $generated@@81 $generated@@84) $generated@@133 $generated@@136) $generated@@134)))) $generated@@135))
 :pattern ( ($generated@@79 $generated@@80 $generated@@81 $generated@@5 ($generated@@82 $generated@@132 $generated@@133 $generated@@134 $generated@@135) $generated@@136 $generated@@137))
)))
(assert (= ($generated@@138 $generated@@24) $generated@@0))
(assert (= ($generated@@139 $generated@@24) $generated@@3))
(assert (= $generated@@21 ($generated@@27 $generated@@23 $generated@@21)))
(assert (forall (($generated@@140 Int) ) (! (= ($generated@@35 $generated@@6 ($generated@@10 ($generated@@25 $generated@@140))) ($generated@@27 $generated@@84 ($generated@@35 $generated@@6 ($generated@@10 $generated@@140))))
 :pattern ( ($generated@@35 $generated@@6 ($generated@@10 ($generated@@25 $generated@@140))))
)))
(assert (forall (($generated@@141 T@U) ) (! (= ($generated@@39 ($generated@@27 $generated@@23 $generated@@141)) ($generated@@27 $generated@@23 ($generated@@39 $generated@@141)))
 :pattern ( ($generated@@39 ($generated@@27 $generated@@23 $generated@@141)))
)))
(assert (forall (($generated@@142 T@U) ($generated@@143 T@T) ) (! (= ($generated@@35 $generated@@143 ($generated@@27 $generated@@143 $generated@@142)) ($generated@@27 $generated@@84 ($generated@@35 $generated@@143 $generated@@142)))
 :pattern ( ($generated@@35 $generated@@143 ($generated@@27 $generated@@143 $generated@@142)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@144 () T@U)
(declare-fun $generated@@145 () T@U)
(declare-fun $generated@@146 () T@U)
(declare-fun $generated@@147 () T@U)
(declare-fun $generated@@148 (T@U) Bool)
(declare-fun $generated@@149 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 5) (let (($generated@@150  (=> (= $generated@@144 ($generated@@82 $generated@@145 $generated@@146 $generated false)) (and (=> (= (ControlFlow 0 2) (- 0 4)) (=> ($generated@@45 ($generated@@25 10) ($generated@@27 $generated@@23 ($generated@@39 ($generated@@27 $generated@@23 $generated@@21))) ($generated@@25 0)) (or ($generated@@9 ($generated@@27 $generated@@5 ($generated@@8 ($generated@@43 ($generated@@44 $generated@@147) ($generated@@25 10) ($generated@@27 $generated@@23 ($generated@@39 ($generated@@27 $generated@@23 $generated@@21))) ($generated@@25 0))))) (=> ($generated@@9 ($generated@@27 $generated@@5 ($generated@@8 ($generated@@30 ($generated@@27 $generated@@23 ($generated@@39 ($generated@@27 $generated@@23 $generated@@21))))))) ($generated@@9 ($generated@@27 $generated@@5 ($generated@@8 true))))))) (=> (=> ($generated@@45 ($generated@@25 10) ($generated@@27 $generated@@23 ($generated@@39 ($generated@@27 $generated@@23 $generated@@21))) ($generated@@25 0)) (or ($generated@@9 ($generated@@27 $generated@@5 ($generated@@8 ($generated@@43 ($generated@@44 $generated@@147) ($generated@@25 10) ($generated@@27 $generated@@23 ($generated@@39 ($generated@@27 $generated@@23 $generated@@21))) ($generated@@25 0))))) (=> ($generated@@9 ($generated@@27 $generated@@5 ($generated@@8 ($generated@@30 ($generated@@27 $generated@@23 ($generated@@39 ($generated@@27 $generated@@23 $generated@@21))))))) ($generated@@9 ($generated@@27 $generated@@5 ($generated@@8 true)))))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (=> ($generated@@45 ($generated@@25 10) ($generated@@27 $generated@@23 ($generated@@39 ($generated@@27 $generated@@23 $generated@@21))) ($generated@@25 0)) (or ($generated@@9 ($generated@@27 $generated@@5 ($generated@@8 ($generated@@43 ($generated@@44 $generated@@147) ($generated@@25 10) ($generated@@27 $generated@@23 ($generated@@39 ($generated@@27 $generated@@23 $generated@@21))) ($generated@@25 0))))) (=> (not ($generated@@9 ($generated@@27 $generated@@5 ($generated@@8 ($generated@@30 ($generated@@27 $generated@@23 ($generated@@39 ($generated@@27 $generated@@23 $generated@@21)))))))) ($generated@@9 ($generated@@27 $generated@@5 ($generated@@8 (> 10 0)))))))) (=> (=> ($generated@@45 ($generated@@25 10) ($generated@@27 $generated@@23 ($generated@@39 ($generated@@27 $generated@@23 $generated@@21))) ($generated@@25 0)) (or ($generated@@9 ($generated@@27 $generated@@5 ($generated@@8 ($generated@@43 ($generated@@44 $generated@@147) ($generated@@25 10) ($generated@@27 $generated@@23 ($generated@@39 ($generated@@27 $generated@@23 $generated@@21))) ($generated@@25 0))))) (=> (not ($generated@@9 ($generated@@27 $generated@@5 ($generated@@8 ($generated@@30 ($generated@@27 $generated@@23 ($generated@@39 ($generated@@27 $generated@@23 $generated@@21)))))))) ($generated@@9 ($generated@@27 $generated@@5 ($generated@@8 (> 10 0))))))) (=> (= (ControlFlow 0 2) (- 0 1)) (=> ($generated@@45 ($generated@@25 10) ($generated@@27 $generated@@23 ($generated@@39 ($generated@@27 $generated@@23 $generated@@21))) ($generated@@25 0)) (or ($generated@@9 ($generated@@27 $generated@@5 ($generated@@8 ($generated@@43 ($generated@@44 $generated@@147) ($generated@@25 10) ($generated@@27 $generated@@23 ($generated@@39 ($generated@@27 $generated@@23 $generated@@21))) ($generated@@25 0))))) (=> (not ($generated@@9 ($generated@@27 $generated@@5 ($generated@@8 ($generated@@30 ($generated@@27 $generated@@23 ($generated@@39 ($generated@@27 $generated@@23 $generated@@21)))))))) (let (($generated@@151 ($generated@@27 $generated@@23 ($generated@@46 ($generated@@27 $generated@@23 ($generated@@39 ($generated@@27 $generated@@23 $generated@@21)))))))
(exists (($generated@@152 Int) ($generated@@153 Int) ) (!  (and (and (<= ($generated@@25 0) $generated@@152) (<= ($generated@@25 0) $generated@@153)) (and (= $generated@@153 ($generated@@25 (- 10 1))) ($generated@@43 ($generated@@44 $generated@@147) $generated@@153 $generated@@151 $generated@@152)))
 :pattern ( ($generated@@43 ($generated@@44 $generated@@147) $generated@@153 $generated@@151 $generated@@152))
))))))))))))))
(let (($generated@@154  (=> (and (and ($generated@@148 $generated@@146) ($generated@@149 $generated@@146)) (and (= 2 $generated@@42) (= (ControlFlow 0 5) 2))) $generated@@150)))
$generated@@154)))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
