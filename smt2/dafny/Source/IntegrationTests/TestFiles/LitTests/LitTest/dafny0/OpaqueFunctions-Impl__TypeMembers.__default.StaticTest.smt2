(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (Bool) T@U)
(declare-fun $generated@@7 (T@U) Bool)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun $generated@@9 (T@U) Int)
(declare-fun $generated@@10 (Real) T@U)
(declare-fun $generated@@11 (T@U) Real)
(declare-fun $generated@@18 (T@U) T@U)
(declare-fun $generated@@19 (Int) Int)
(declare-fun $generated@@21 (T@T T@U) T@U)
(declare-fun $generated@@24 (T@T T@U) T@U)
(declare-fun $generated@@25 (T@T T@U) T@U)
(declare-fun $generated@@28 () Int)
(declare-fun $generated@@29 (Bool Int) Bool)
(declare-fun $generated@@30 (Int) Bool)
(declare-fun $generated@@32 (Bool Int) Bool)
(declare-fun $generated@@33 (Int) Bool)
(declare-fun $generated@@35 (Bool Int) Bool)
(declare-fun $generated@@36 (Int) Bool)
(declare-fun $generated@@43 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@44 () T@T)
(declare-fun $generated@@45 () T@T)
(declare-fun $generated@@46 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@47 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@48 () T@T)
(declare-fun $generated@@49 (T@T T@T) T@T)
(declare-fun $generated@@50 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@51 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@52 (T@T) T@T)
(declare-fun $generated@@53 (T@T) T@T)
(declare-fun $generated@@105 (T@T T@U T@U T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@4) 1)) (= ($generated@@2 $generated@@5) 2)) (forall (($generated@@12 Bool) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Int) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Real) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))))
(assert (distinct $generated $generated@@0 $generated@@1)
)
(assert (= ($generated@@18 $generated) $generated@@0))
(assert (forall (($generated@@20 Int) ) (! (= ($generated@@19 $generated@@20) $generated@@20)
 :pattern ( ($generated@@19 $generated@@20))
)))
(assert (forall (($generated@@22 T@U) ($generated@@23 T@T) ) (! (= ($generated@@21 $generated@@23 $generated@@22) $generated@@22)
 :pattern ( ($generated@@21 $generated@@23 $generated@@22))
)))
(assert (forall (($generated@@26 T@U) ($generated@@27 T@T) ) (! (= ($generated@@25 $generated@@27 ($generated@@24 $generated@@27 $generated@@26)) $generated@@26)
 :pattern ( ($generated@@24 $generated@@27 $generated@@26))
)))
(assert  (=> (<= 0 $generated@@28) (forall (($generated@@31 Int) ) (!  (=> (or ($generated@@30 $generated@@31) (< 0 $generated@@28)) (= ($generated@@29 true $generated@@31) (= $generated@@31 ($generated@@19 5))))
 :pattern ( ($generated@@29 true $generated@@31))
))))
(assert  (=> (<= 0 $generated@@28) (forall (($generated@@34 Int) ) (!  (=> (or ($generated@@33 $generated@@34) (< 0 $generated@@28)) (= ($generated@@32 true $generated@@34) (= $generated@@34 ($generated@@19 5))))
 :pattern ( ($generated@@32 true $generated@@34))
))))
(assert  (=> (<= 0 $generated@@28) (forall (($generated@@37 Int) ) (!  (=> (or ($generated@@36 $generated@@37) (< 0 $generated@@28)) (= ($generated@@35 true $generated@@37) (= $generated@@37 ($generated@@19 5))))
 :pattern ( ($generated@@35 true $generated@@37))
))))
(assert  (=> (<= 0 $generated@@28) (forall (($generated@@38 Int) ) (!  (=> (or ($generated@@30 ($generated@@19 $generated@@38)) (< 0 $generated@@28)) (= ($generated@@29 true ($generated@@19 $generated@@38)) (= ($generated@@19 $generated@@38) ($generated@@19 5))))
 :weight 3
 :pattern ( ($generated@@29 true ($generated@@19 $generated@@38)))
))))
(assert  (=> (<= 0 $generated@@28) (forall (($generated@@39 Int) ) (!  (=> (or ($generated@@33 ($generated@@19 $generated@@39)) (< 0 $generated@@28)) (= ($generated@@32 true ($generated@@19 $generated@@39)) (= ($generated@@19 $generated@@39) ($generated@@19 5))))
 :weight 3
 :pattern ( ($generated@@32 true ($generated@@19 $generated@@39)))
))))
(assert  (=> (<= 0 $generated@@28) (forall (($generated@@40 Int) ) (!  (=> (or ($generated@@36 ($generated@@19 $generated@@40)) (< 0 $generated@@28)) (= ($generated@@35 true ($generated@@19 $generated@@40)) (= ($generated@@19 $generated@@40) ($generated@@19 5))))
 :weight 3
 :pattern ( ($generated@@35 true ($generated@@19 $generated@@40)))
))))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@T) ) (! (= ($generated@@24 $generated@@42 ($generated@@25 $generated@@42 $generated@@41)) $generated@@41)
 :pattern ( ($generated@@25 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@54 T@T) ($generated@@55 T@T) ($generated@@56 T@T) ($generated@@57 T@U) ($generated@@58 T@U) ($generated@@59 T@U) ($generated@@60 T@U) ) (! (= ($generated@@43 $generated@@54 $generated@@55 $generated@@56 ($generated@@50 $generated@@54 $generated@@55 $generated@@56 $generated@@58 $generated@@59 $generated@@60 $generated@@57) $generated@@59 $generated@@60) $generated@@57)
 :weight 0
)) (and (forall (($generated@@61 T@T) ($generated@@62 T@T) ($generated@@63 T@T) ($generated@@64 T@U) ($generated@@65 T@U) ($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@U) ) (!  (or (= $generated@@66 $generated@@68) (= ($generated@@43 $generated@@61 $generated@@62 $generated@@63 ($generated@@50 $generated@@61 $generated@@62 $generated@@63 $generated@@65 $generated@@66 $generated@@67 $generated@@64) $generated@@68 $generated@@69) ($generated@@43 $generated@@61 $generated@@62 $generated@@63 $generated@@65 $generated@@68 $generated@@69)))
 :weight 0
)) (forall (($generated@@70 T@T) ($generated@@71 T@T) ($generated@@72 T@T) ($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ) (!  (or (= $generated@@76 $generated@@78) (= ($generated@@43 $generated@@70 $generated@@71 $generated@@72 ($generated@@50 $generated@@70 $generated@@71 $generated@@72 $generated@@74 $generated@@75 $generated@@76 $generated@@73) $generated@@77 $generated@@78) ($generated@@43 $generated@@70 $generated@@71 $generated@@72 $generated@@74 $generated@@77 $generated@@78)))
 :weight 0
)))) (= ($generated@@2 $generated@@44) 3)) (= ($generated@@2 $generated@@45) 4)) (forall (($generated@@79 T@T) ($generated@@80 T@T) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ) (! (= ($generated@@47 $generated@@79 $generated@@80 ($generated@@51 $generated@@79 $generated@@80 $generated@@82 $generated@@83 $generated@@81) $generated@@83) $generated@@81)
 :weight 0
))) (forall (($generated@@84 T@T) ($generated@@85 T@T) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ) (!  (or (= $generated@@88 $generated@@89) (= ($generated@@47 $generated@@84 $generated@@85 ($generated@@51 $generated@@84 $generated@@85 $generated@@87 $generated@@88 $generated@@86) $generated@@89) ($generated@@47 $generated@@84 $generated@@85 $generated@@87 $generated@@89)))
 :weight 0
))) (= ($generated@@2 $generated@@48) 5)) (forall (($generated@@90 T@T) ($generated@@91 T@T) ) (= ($generated@@2 ($generated@@49 $generated@@90 $generated@@91)) 6))) (forall (($generated@@92 T@T) ($generated@@93 T@T) ) (! (= ($generated@@52 ($generated@@49 $generated@@92 $generated@@93)) $generated@@92)
 :pattern ( ($generated@@49 $generated@@92 $generated@@93))
))) (forall (($generated@@94 T@T) ($generated@@95 T@T) ) (! (= ($generated@@53 ($generated@@49 $generated@@94 $generated@@95)) $generated@@95)
 :pattern ( ($generated@@49 $generated@@94 $generated@@95))
))))
(assert (forall (($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 Bool) ($generated@@100 T@U) ($generated@@101 T@U) ) (! (= ($generated@@7 ($generated@@43 $generated@@44 $generated@@45 $generated@@3 ($generated@@46 $generated@@96 $generated@@97 $generated@@98 $generated@@99) $generated@@100 $generated@@101))  (=> (and (or (not (= $generated@@100 $generated@@96)) (not true)) ($generated@@7 ($generated@@24 $generated@@3 ($generated@@47 $generated@@45 $generated@@48 ($generated@@47 $generated@@44 ($generated@@49 $generated@@45 $generated@@48) $generated@@97 $generated@@100) $generated@@98)))) $generated@@99))
 :pattern ( ($generated@@43 $generated@@44 $generated@@45 $generated@@3 ($generated@@46 $generated@@96 $generated@@97 $generated@@98 $generated@@99) $generated@@100 $generated@@101))
)))
(assert (forall (($generated@@102 Int) ) (! (= ($generated@@25 $generated@@4 ($generated@@8 ($generated@@19 $generated@@102))) ($generated@@21 $generated@@48 ($generated@@25 $generated@@4 ($generated@@8 $generated@@102))))
 :pattern ( ($generated@@25 $generated@@4 ($generated@@8 ($generated@@19 $generated@@102))))
)))
(assert (forall (($generated@@103 T@U) ($generated@@104 T@T) ) (! (= ($generated@@25 $generated@@104 ($generated@@21 $generated@@104 $generated@@103)) ($generated@@21 $generated@@48 ($generated@@25 $generated@@104 $generated@@103)))
 :pattern ( ($generated@@25 $generated@@104 ($generated@@21 $generated@@104 $generated@@103)))
)))
(assert (forall (($generated@@106 T@U) ($generated@@107 T@U) ) (! ($generated@@105 $generated@@4 $generated@@107 $generated $generated@@106)
 :pattern ( ($generated@@105 $generated@@4 $generated@@107 $generated $generated@@106))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@108 () Bool)
(declare-fun $generated@@109 () Int)
(declare-fun $generated@@110 () Bool)
(declare-fun $generated@@111 () Bool)
(declare-fun $generated@@112 (T@U) Bool)
(declare-fun $generated@@113 () T@U)
(declare-fun $generated@@114 (T@U) Bool)
(declare-fun $generated@@115 () T@U)
(declare-fun $generated@@116 () T@U)
(declare-fun $generated@@117 () T@U)
(declare-fun $generated@@118 () T@U)
(declare-fun $generated@@119 () T@U)
(declare-fun $generated@@120 () T@U)
(declare-fun $generated@@121 () T@U)
(declare-fun $generated@@122 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 25) (let (($generated@@123 true))
(let (($generated@@124  (=> (and (and ($generated@@29 $generated@@108 $generated@@109) ($generated@@32 $generated@@110 $generated@@109)) ($generated@@35 $generated@@111 $generated@@109)) (=> (and (and (and (and ($generated@@112 $generated@@113) ($generated@@114 $generated@@113)) (and (= $generated@@115 $generated@@113) $generated@@108)) (and (and ($generated@@112 $generated@@116) ($generated@@114 $generated@@116)) (and (= $generated@@113 $generated@@116) $generated@@110))) (and (and (and ($generated@@112 $generated@@117) ($generated@@114 $generated@@117)) (= $generated@@116 $generated@@117)) (and $generated@@111 (= (ControlFlow 0 16) (- 0 15))))) (or (not (= $generated@@109 5)) (not true))))))
(let (($generated@@125  (=> (and ($generated@@30 $generated@@109) (=> ($generated@@29 $generated@@108 $generated@@109) (and ($generated@@33 $generated@@109) (=> ($generated@@32 $generated@@110 $generated@@109) ($generated@@36 $generated@@109))))) (and (=> (= (ControlFlow 0 18) 16) $generated@@124) (=> (= (ControlFlow 0 18) 17) $generated@@123)))))
(let (($generated@@126  (=> (and (not (and ($generated@@29 $generated@@108 $generated@@109) ($generated@@32 $generated@@110 $generated@@109))) (= (ControlFlow 0 20) 18)) $generated@@125)))
(let (($generated@@127  (=> (and (and (and ($generated@@29 $generated@@108 $generated@@109) ($generated@@32 $generated@@110 $generated@@109)) ($generated@@105 $generated@@4 ($generated@@8 $generated@@109) $generated $generated@@115)) (and ($generated@@36 $generated@@109) (= (ControlFlow 0 19) 18))) $generated@@125)))
(let (($generated@@128  (=> (not ($generated@@29 $generated@@108 $generated@@109)) (and (=> (= (ControlFlow 0 22) 19) $generated@@127) (=> (= (ControlFlow 0 22) 20) $generated@@126)))))
(let (($generated@@129  (=> ($generated@@29 $generated@@108 $generated@@109) (=> (and ($generated@@105 $generated@@4 ($generated@@8 $generated@@109) $generated $generated@@115) ($generated@@33 $generated@@109)) (and (=> (= (ControlFlow 0 21) 19) $generated@@127) (=> (= (ControlFlow 0 21) 20) $generated@@126))))))
(let (($generated@@130  (=> (and ($generated@@105 $generated@@4 ($generated@@8 $generated@@109) $generated $generated@@115) ($generated@@30 $generated@@109)) (and (=> (= (ControlFlow 0 23) 21) $generated@@129) (=> (= (ControlFlow 0 23) 22) $generated@@128)))))
(let (($generated@@131  (=> (and ($generated@@30 $generated@@109) ($generated@@33 $generated@@109)) (=> (and (and ($generated@@36 $generated@@109) ($generated@@30 $generated@@109)) (and ($generated@@33 $generated@@109) ($generated@@36 $generated@@109))) (=> (and (and (and (and (and (and (and (not ($generated@@29 $generated@@108 $generated@@109)) (not ($generated@@32 $generated@@110 $generated@@109))) (not ($generated@@35 $generated@@111 $generated@@109))) (not ($generated@@29 $generated@@108 $generated@@109))) (not ($generated@@32 $generated@@110 $generated@@109))) (not ($generated@@35 $generated@@111 $generated@@109))) (not ($generated@@7 ($generated@@21 $generated@@3 ($generated@@6 true))))) (= (ControlFlow 0 14) (- 0 13))) false)))))
(let (($generated@@132  (=> (and (and ($generated@@105 $generated@@4 ($generated@@8 $generated@@109) $generated $generated@@115) ($generated@@36 $generated@@109)) (and ($generated@@36 $generated@@109) ($generated@@35 $generated@@111 $generated@@109))) (=> (and (and (and ($generated@@112 $generated@@118) ($generated@@114 $generated@@118)) (= $generated@@115 $generated@@118)) (and $generated@@111 (= (ControlFlow 0 12) (- 0 11)))) (= $generated@@109 ($generated@@19 5))))))
(let (($generated@@133  (=> (and (and ($generated@@105 $generated@@4 ($generated@@8 $generated@@109) $generated $generated@@115) ($generated@@33 $generated@@109)) (and ($generated@@33 $generated@@109) ($generated@@32 $generated@@110 $generated@@109))) (=> (and (and (and ($generated@@112 $generated@@119) ($generated@@114 $generated@@119)) (= $generated@@115 $generated@@119)) (and $generated@@110 (= (ControlFlow 0 10) (- 0 9)))) (= $generated@@109 ($generated@@19 5))))))
(let (($generated@@134  (=> (and (and ($generated@@105 $generated@@4 ($generated@@8 $generated@@109) $generated $generated@@115) ($generated@@30 $generated@@109)) (and ($generated@@30 $generated@@109) ($generated@@29 $generated@@108 $generated@@109))) (=> (and (and (and ($generated@@112 $generated@@120) ($generated@@114 $generated@@120)) (= $generated@@115 $generated@@120)) (and $generated@@108 (= (ControlFlow 0 8) (- 0 7)))) (= $generated@@109 ($generated@@19 5))))))
(let (($generated@@135  (=> ($generated@@105 $generated@@4 ($generated@@8 $generated@@109) $generated $generated@@115) (=> (and (and ($generated@@36 $generated@@109) ($generated@@36 $generated@@109)) (and ($generated@@35 $generated@@111 $generated@@109) (= (ControlFlow 0 6) (- 0 5)))) (= $generated@@109 ($generated@@19 5))))))
(let (($generated@@136  (=> ($generated@@105 $generated@@4 ($generated@@8 $generated@@109) $generated $generated@@115) (=> (and (and ($generated@@33 $generated@@109) ($generated@@33 $generated@@109)) (and ($generated@@32 $generated@@110 $generated@@109) (= (ControlFlow 0 4) (- 0 3)))) (= $generated@@109 ($generated@@19 5))))))
(let (($generated@@137  (=> ($generated@@105 $generated@@4 ($generated@@8 $generated@@109) $generated $generated@@115) (=> (and (and ($generated@@30 $generated@@109) ($generated@@30 $generated@@109)) (and ($generated@@29 $generated@@108 $generated@@109) (= (ControlFlow 0 2) (- 0 1)))) (= $generated@@109 ($generated@@19 5))))))
(let (($generated@@138  (=> (= $generated@@121 ($generated@@46 $generated@@122 $generated@@115 $generated@@1 false)) (and (and (and (and (and (and (and (=> (= (ControlFlow 0 24) 2) $generated@@137) (=> (= (ControlFlow 0 24) 4) $generated@@136)) (=> (= (ControlFlow 0 24) 6) $generated@@135)) (=> (= (ControlFlow 0 24) 8) $generated@@134)) (=> (= (ControlFlow 0 24) 10) $generated@@133)) (=> (= (ControlFlow 0 24) 12) $generated@@132)) (=> (= (ControlFlow 0 24) 23) $generated@@130)) (=> (= (ControlFlow 0 24) 14) $generated@@131)))))
(let (($generated@@139  (=> (and (and ($generated@@112 $generated@@115) ($generated@@114 $generated@@115)) (and (= 1 $generated@@28) (= (ControlFlow 0 25) 24))) $generated@@138)))
$generated@@139))))))))))))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 4) (- 3))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 6) (- 5))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 16) (- 15))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
