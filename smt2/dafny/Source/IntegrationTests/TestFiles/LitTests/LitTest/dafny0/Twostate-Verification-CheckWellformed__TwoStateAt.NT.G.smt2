(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun alloc () T@U)
(declare-fun allocName () T@U)
(declare-fun Tagclass._System.___hFunc2 () T@U)
(declare-fun Tagclass.TwoStateAt.Cell () T@U)
(declare-fun Tagclass.TwoStateAt.Cell? () T@U)
(declare-fun Tagclass.TwoStateAt.NT () T@U)
(declare-fun class.TwoStateAt.Cell? () T@U)
(declare-fun |tytagFamily$_#Func2| () T@U)
(declare-fun tytagFamily$Cell () T@U)
(declare-fun tytagFamily$NT () T@U)
(declare-fun field$data () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun FDim (T@U) Int)
(declare-fun Tag (T@U) T@U)
(declare-fun DeclName (T@U) T@U)
(declare-fun Requires2 (T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Tclass.TwoStateAt.Cell () T@U)
(declare-fun |TwoStateAt.NT.G#Handle| (T@U T@U) T@U)
(declare-fun |TwoStateAt.NT.G#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun refType () T@T)
(declare-fun TwoStateAt.NT.G (T@U T@U T@U T@U T@U) Int)
(declare-fun Apply2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass.TwoStateAt.NT () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun |TwoStateAt.NT.G#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun null () T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun Tclass._System.___hFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_2 (T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun |Set#Empty| () T@U)
(declare-fun Tclass.TwoStateAt.Cell? () T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun HandleTypeType () T@T)
(declare-fun Reads2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |TwoStateAt.NT.F#Handle| (T@U T@U Int) T@U)
(declare-fun TwoStateAt.Cell.data () T@U)
(declare-fun FieldOfDecl (T@U T@U) T@U)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun |TwoStateAt.NT.F#requires| (T@U T@U T@U Int T@U T@U) Bool)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun TwoStateAt.NT.F (T@U T@U T@U Int T@U T@U) Int)
(declare-fun $OneHeap () T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun |TwoStateAt.NT.F#canCall| (T@U T@U T@U Int T@U T@U) Bool)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun DeclType (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt alloc allocName Tagclass._System.___hFunc2 Tagclass.TwoStateAt.Cell Tagclass.TwoStateAt.Cell? Tagclass.TwoStateAt.NT class.TwoStateAt.Cell? |tytagFamily$_#Func2| tytagFamily$Cell tytagFamily$NT field$data)
)
(assert (= (FDim alloc) 0))
(assert (= (Tag TInt) TagInt))
(assert (= (DeclName alloc) allocName))
(assert (= (Ctor refType) 3))
(assert (forall ((TwoStateAt.NT.G$Y T@U) ($prevHeap T@U) ($heap T@U) (|$fh$0x#0| T@U) (|$fh$0x#1| T@U) ) (! (= (Requires2 TwoStateAt.NT.G$Y Tclass.TwoStateAt.Cell TInt $heap (|TwoStateAt.NT.G#Handle| TwoStateAt.NT.G$Y $prevHeap) |$fh$0x#0| |$fh$0x#1|) (|TwoStateAt.NT.G#requires| TwoStateAt.NT.G$Y $prevHeap $heap |$fh$0x#0| ($Unbox refType |$fh$0x#1|)))
 :pattern ( (Requires2 TwoStateAt.NT.G$Y Tclass.TwoStateAt.Cell TInt $heap (|TwoStateAt.NT.G#Handle| TwoStateAt.NT.G$Y $prevHeap) |$fh$0x#0| |$fh$0x#1|))
)))
(assert (forall ((TwoStateAt.NT.G$Y@@0 T@U) ($prevHeap@@0 T@U) ($heap@@0 T@U) (|$fh$0x#0@@0| T@U) (|$fh$0x#1@@0| T@U) ) (! (= (TwoStateAt.NT.G TwoStateAt.NT.G$Y@@0 $prevHeap@@0 $heap@@0 |$fh$0x#0@@0| |$fh$0x#1@@0|) (U_2_int ($Unbox intType (Apply2 TwoStateAt.NT.G$Y@@0 Tclass.TwoStateAt.Cell TInt $heap@@0 (|TwoStateAt.NT.G#Handle| TwoStateAt.NT.G$Y@@0 $prevHeap@@0) |$fh$0x#0@@0| ($Box refType |$fh$0x#1@@0|)))))
 :pattern ( (TwoStateAt.NT.G TwoStateAt.NT.G$Y@@0 $prevHeap@@0 $heap@@0 |$fh$0x#0@@0| |$fh$0x#1@@0|))
)))
(assert (forall ((|x#0| T@U) ($h T@U) ) (! ($IsAlloc intType |x#0| Tclass.TwoStateAt.NT $h)
 :pattern ( ($IsAlloc intType |x#0| Tclass.TwoStateAt.NT $h))
)))
(assert  (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 4)) (= (Ctor BoxType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 6))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((TwoStateAt.NT.G$Y@@1 T@U) ($prevHeap@@1 T@U) ($h0 T@U) ($h1 T@U) (|y#0| T@U) (|c#0| T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0) ($IsGoodHeap $h1)) (or (|TwoStateAt.NT.G#canCall| TwoStateAt.NT.G$Y@@1 $prevHeap@@1 $h0 |y#0| |c#0|) (and ($IsBox |y#0| TwoStateAt.NT.G$Y@@1) ($Is refType |c#0| Tclass.TwoStateAt.Cell)))) (and ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1))) (=> (forall (($o T@U) ($f T@U) )  (=> (and (or (not (= $o null)) (not true)) (= $o |c#0|)) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0 $o) $f) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1 $o) $f)))) (= (TwoStateAt.NT.G TwoStateAt.NT.G$Y@@1 $prevHeap@@1 $h0 |y#0| |c#0|) (TwoStateAt.NT.G TwoStateAt.NT.G$Y@@1 $prevHeap@@1 $h1 |y#0| |c#0|))))
 :pattern ( ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1) (TwoStateAt.NT.G TwoStateAt.NT.G$Y@@1 $prevHeap@@1 $h1 |y#0| |c#0|))
)))
(assert (forall ((|#$T0| T@U) (|#$T1| T@U) (|#$R| T@U) ) (! (= (Tclass._System.___hFunc2_0 (Tclass._System.___hFunc2 |#$T0| |#$T1| |#$R|)) |#$T0|)
 :pattern ( (Tclass._System.___hFunc2 |#$T0| |#$T1| |#$R|))
)))
(assert (forall ((|#$T0@@0| T@U) (|#$T1@@0| T@U) (|#$R@@0| T@U) ) (! (= (Tclass._System.___hFunc2_1 (Tclass._System.___hFunc2 |#$T0@@0| |#$T1@@0| |#$R@@0|)) |#$T1@@0|)
 :pattern ( (Tclass._System.___hFunc2 |#$T0@@0| |#$T1@@0| |#$R@@0|))
)))
(assert (forall ((|#$T0@@1| T@U) (|#$T1@@1| T@U) (|#$R@@1| T@U) ) (! (= (Tclass._System.___hFunc2_2 (Tclass._System.___hFunc2 |#$T0@@1| |#$T1@@1| |#$R@@1|)) |#$R@@1|)
 :pattern ( (Tclass._System.___hFunc2 |#$T0@@1| |#$T1@@1| |#$R@@1|))
)))
(assert (forall ((o T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o))
 :pattern ( (|Set#IsMember| |Set#Empty| o))
)))
(assert (forall (($o@@0 T@U) ) (! (= ($Is refType $o@@0 Tclass.TwoStateAt.Cell?)  (or (= $o@@0 null) (= (dtype $o@@0) Tclass.TwoStateAt.Cell?)))
 :pattern ( ($Is refType $o@@0 Tclass.TwoStateAt.Cell?))
)))
(assert (forall ((|#$T0@@2| T@U) (|#$T1@@2| T@U) (|#$R@@2| T@U) ) (!  (and (= (Tag (Tclass._System.___hFunc2 |#$T0@@2| |#$T1@@2| |#$R@@2|)) Tagclass._System.___hFunc2) (= (TagFamily (Tclass._System.___hFunc2 |#$T0@@2| |#$T1@@2| |#$R@@2|)) |tytagFamily$_#Func2|))
 :pattern ( (Tclass._System.___hFunc2 |#$T0@@2| |#$T1@@2| |#$R@@2|))
)))
(assert (= (Ctor HandleTypeType) 7))
(assert (forall ((|#$T0@@3| T@U) (|#$T1@@3| T@U) (|#$R@@3| T@U) (bx T@U) ) (!  (=> ($IsBox bx (Tclass._System.___hFunc2 |#$T0@@3| |#$T1@@3| |#$R@@3|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx)) bx) ($Is HandleTypeType ($Unbox HandleTypeType bx) (Tclass._System.___hFunc2 |#$T0@@3| |#$T1@@3| |#$R@@3|))))
 :pattern ( ($IsBox bx (Tclass._System.___hFunc2 |#$T0@@3| |#$T1@@3| |#$R@@3|)))
)))
(assert (forall ((|c#0@@0| T@U) ($h@@0 T@U) ) (! (= ($IsAlloc refType |c#0@@0| Tclass.TwoStateAt.Cell $h@@0) ($IsAlloc refType |c#0@@0| Tclass.TwoStateAt.Cell? $h@@0))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass.TwoStateAt.Cell $h@@0))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass.TwoStateAt.Cell? $h@@0))
)))
(assert (forall (($bx T@U) (TwoStateAt.NT.F$Y T@U) ($prevHeap@@2 T@U) ($self Int) ($heap@@1 T@U) (|$fh$0x#0@@1| T@U) (|$fh$0x#1@@1| T@U) ) (! (= (|Set#IsMember| (Reads2 TwoStateAt.NT.F$Y Tclass.TwoStateAt.Cell TInt $heap@@1 (|TwoStateAt.NT.F#Handle| TwoStateAt.NT.F$Y $prevHeap@@2 $self) |$fh$0x#0@@1| |$fh$0x#1@@1|) $bx) (= ($Unbox refType $bx) ($Unbox refType |$fh$0x#1@@1|)))
 :pattern ( (|Set#IsMember| (Reads2 TwoStateAt.NT.F$Y Tclass.TwoStateAt.Cell TInt $heap@@1 (|TwoStateAt.NT.F#Handle| TwoStateAt.NT.F$Y $prevHeap@@2 $self) |$fh$0x#0@@1| |$fh$0x#1@@1|) $bx))
)))
(assert (= (FDim TwoStateAt.Cell.data) 0))
(assert (= (FieldOfDecl class.TwoStateAt.Cell? field$data) TwoStateAt.Cell.data))
(assert  (not ($IsGhostField TwoStateAt.Cell.data)))
(assert (forall (($o@@1 T@U) ($h@@1 T@U) ) (! (= ($IsAlloc refType $o@@1 Tclass.TwoStateAt.Cell? $h@@1)  (or (= $o@@1 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@1 $o@@1) alloc)))))
 :pattern ( ($IsAlloc refType $o@@1 Tclass.TwoStateAt.Cell? $h@@1))
)))
(assert (forall ((TwoStateAt.NT.G$Y@@2 T@U) ($prevHeap@@3 T@U) ($heap@@2 T@U) (|$fh$0x#0@@2| T@U) (|$fh$0x#1@@2| T@U) ) (! (= (Apply2 TwoStateAt.NT.G$Y@@2 Tclass.TwoStateAt.Cell TInt $heap@@2 (|TwoStateAt.NT.G#Handle| TwoStateAt.NT.G$Y@@2 $prevHeap@@3) |$fh$0x#0@@2| |$fh$0x#1@@2|) ($Box intType (int_2_U (TwoStateAt.NT.G TwoStateAt.NT.G$Y@@2 $prevHeap@@3 $heap@@2 |$fh$0x#0@@2| ($Unbox refType |$fh$0x#1@@2|)))))
 :pattern ( (Apply2 TwoStateAt.NT.G$Y@@2 Tclass.TwoStateAt.Cell TInt $heap@@2 (|TwoStateAt.NT.G#Handle| TwoStateAt.NT.G$Y@@2 $prevHeap@@3) |$fh$0x#0@@2| |$fh$0x#1@@2|))
)))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o@@0 T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o@@0) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o@@0) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o@@0) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((TwoStateAt.NT.F$Y@@0 T@U) ($prevHeap@@4 T@U) ($Heap T@U) (this Int) (|y#0@@0| T@U) (|c#0@@1| T@U) ) (!  (=> (and (and (and (and (and ($IsGoodHeap $prevHeap@@4) ($IsGoodHeap $Heap)) ($HeapSucc $prevHeap@@4 $Heap)) (and (<= (LitInt 0) this) (< this 86))) ($IsBox |y#0@@0| TwoStateAt.NT.F$Y@@0)) ($Is refType |c#0@@1| Tclass.TwoStateAt.Cell)) (= (|TwoStateAt.NT.F#requires| TwoStateAt.NT.F$Y@@0 $prevHeap@@4 $Heap this |y#0@@0| |c#0@@1|)  (and ($IsAllocBox |y#0@@0| TwoStateAt.NT.F$Y@@0 $prevHeap@@4) ($IsAlloc refType |c#0@@1| Tclass.TwoStateAt.Cell $prevHeap@@4))))
 :pattern ( (|TwoStateAt.NT.F#requires| TwoStateAt.NT.F$Y@@0 $prevHeap@@4 $Heap this |y#0@@0| |c#0@@1|) ($IsGoodHeap $Heap))
)))
(assert (forall ((TwoStateAt.NT.F$Y@@1 T@U) ($prevHeap@@5 T@U) ($self@@0 Int) ($heap@@3 T@U) (|$fh$0x#0@@3| T@U) (|$fh$0x#1@@3| T@U) ) (! (= (TwoStateAt.NT.F TwoStateAt.NT.F$Y@@1 $prevHeap@@5 $heap@@3 $self@@0 |$fh$0x#0@@3| |$fh$0x#1@@3|) (U_2_int ($Unbox intType (Apply2 TwoStateAt.NT.F$Y@@1 Tclass.TwoStateAt.Cell TInt $heap@@3 (|TwoStateAt.NT.F#Handle| TwoStateAt.NT.F$Y@@1 $prevHeap@@5 $self@@0) |$fh$0x#0@@3| ($Box refType |$fh$0x#1@@3|)))))
 :pattern ( (TwoStateAt.NT.F TwoStateAt.NT.F$Y@@1 $prevHeap@@5 $heap@@3 $self@@0 |$fh$0x#0@@3| |$fh$0x#1@@3|))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert ($IsGhostField alloc))
(assert ($IsGoodHeap $OneHeap))
(assert (forall (($h@@2 T@U) ($o@@2 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@2) (and (or (not (= $o@@2 null)) (not true)) (= (dtype $o@@2) Tclass.TwoStateAt.Cell?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o@@2) alloc)))) ($IsAlloc intType ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o@@2) TwoStateAt.Cell.data)) TInt $h@@2))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o@@2) TwoStateAt.Cell.data)))
)))
(assert (forall ((v T@U) (t T@U) (h@@0 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v) t h@@0) ($IsAlloc T@@1 v t h@@0))
 :pattern ( ($IsAllocBox ($Box T@@1 v) t h@@0))
)))
(assert (forall ((h@@1 T@U) (k@@0 T@U) (bx@@0 T@U) (t@@0 T@U) ) (!  (=> ($HeapSucc h@@1 k@@0) (=> ($IsAllocBox bx@@0 t@@0 h@@1) ($IsAllocBox bx@@0 t@@0 k@@0)))
 :pattern ( ($HeapSucc h@@1 k@@0) ($IsAllocBox bx@@0 t@@0 h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@1 T@U) (v@@0 T@U) (t@@1 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@2 k@@1) (=> ($IsAlloc T@@2 v@@0 t@@1 h@@2) ($IsAlloc T@@2 v@@0 t@@1 k@@1)))
 :pattern ( ($HeapSucc h@@2 k@@1) ($IsAlloc T@@2 v@@0 t@@1 h@@2))
)))
(assert (forall ((TwoStateAt.NT.F$Y@@2 T@U) ($prevHeap@@6 T@U) ($self@@1 Int) ($heap@@4 T@U) (|$fh$0x#0@@4| T@U) (|$fh$0x#1@@4| T@U) ) (! (= (Requires2 TwoStateAt.NT.F$Y@@2 Tclass.TwoStateAt.Cell TInt $heap@@4 (|TwoStateAt.NT.F#Handle| TwoStateAt.NT.F$Y@@2 $prevHeap@@6 $self@@1) |$fh$0x#0@@4| |$fh$0x#1@@4|) (|TwoStateAt.NT.F#requires| TwoStateAt.NT.F$Y@@2 $prevHeap@@6 $heap@@4 $self@@1 |$fh$0x#0@@4| ($Unbox refType |$fh$0x#1@@4|)))
 :pattern ( (Requires2 TwoStateAt.NT.F$Y@@2 Tclass.TwoStateAt.Cell TInt $heap@@4 (|TwoStateAt.NT.F#Handle| TwoStateAt.NT.F$Y@@2 $prevHeap@@6 $self@@1) |$fh$0x#0@@4| |$fh$0x#1@@4|))
)))
(assert  (and (forall ((t0@@0 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 t2 (MapType1Store t0@@0 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| T@U) ($o@@3 T@U) ($f@@0 T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@3 $f@@0))  (=> (and (or (not (= $o@@3 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@3) |l#2|)))) (= $o@@3 |l#3|)))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@3 $f@@0))
)))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 Tclass.TwoStateAt.Cell) (and (= ($Box refType ($Unbox refType bx@@1)) bx@@1) ($Is refType ($Unbox refType bx@@1) Tclass.TwoStateAt.Cell)))
 :pattern ( ($IsBox bx@@1 Tclass.TwoStateAt.Cell))
)))
(assert (forall ((bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 Tclass.TwoStateAt.Cell?) (and (= ($Box refType ($Unbox refType bx@@2)) bx@@2) ($Is refType ($Unbox refType bx@@2) Tclass.TwoStateAt.Cell?)))
 :pattern ( ($IsBox bx@@2 Tclass.TwoStateAt.Cell?))
)))
(assert (forall ((bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 Tclass.TwoStateAt.NT) (and (= ($Box intType ($Unbox intType bx@@3)) bx@@3) ($Is intType ($Unbox intType bx@@3) Tclass.TwoStateAt.NT)))
 :pattern ( ($IsBox bx@@3 Tclass.TwoStateAt.NT))
)))
(assert (forall ((|c#0@@2| T@U) ) (! (= ($Is refType |c#0@@2| Tclass.TwoStateAt.Cell)  (and ($Is refType |c#0@@2| Tclass.TwoStateAt.Cell?) (or (not (= |c#0@@2| null)) (not true))))
 :pattern ( ($Is refType |c#0@@2| Tclass.TwoStateAt.Cell))
 :pattern ( ($Is refType |c#0@@2| Tclass.TwoStateAt.Cell?))
)))
(assert (forall ((f T@U) (t0@@1 T@U) (t1@@1 T@U) (t2@@0 T@U) (h@@3 T@U) ) (!  (=> ($IsGoodHeap h@@3) (= ($IsAlloc HandleTypeType f (Tclass._System.___hFunc2 t0@@1 t1@@1 t2@@0) h@@3) (forall ((bx0 T@U) (bx1 T@U) ) (!  (=> (and (and (and ($IsBox bx0 t0@@1) ($IsAllocBox bx0 t0@@1 h@@3)) (and ($IsBox bx1 t1@@1) ($IsAllocBox bx1 t1@@1 h@@3))) (Requires2 t0@@1 t1@@1 t2@@0 h@@3 f bx0 bx1)) (forall ((r T@U) ) (!  (=> (and (or (not (= r null)) (not true)) (|Set#IsMember| (Reads2 t0@@1 t1@@1 t2@@0 h@@3 f bx0 bx1) ($Box refType r))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@3 r) alloc))))
 :pattern ( (|Set#IsMember| (Reads2 t0@@1 t1@@1 t2@@0 h@@3 f bx0 bx1) ($Box refType r)))
)))
 :pattern ( (Apply2 t0@@1 t1@@1 t2@@0 h@@3 f bx0 bx1))
 :pattern ( (Reads2 t0@@1 t1@@1 t2@@0 h@@3 f bx0 bx1))
))))
 :pattern ( ($IsAlloc HandleTypeType f (Tclass._System.___hFunc2 t0@@1 t1@@1 t2@@0) h@@3))
)))
(assert (forall ((TwoStateAt.NT.G$Y@@3 T@U) ($prevHeap@@7 T@U) ($Heap@@0 T@U) (|y#0@@1| T@U) (|c#0@@3| T@U) ) (!  (=> (and (and (and (and ($IsGoodHeap $prevHeap@@7) ($IsGoodHeap $Heap@@0)) ($HeapSucc $prevHeap@@7 $Heap@@0)) ($IsBox |y#0@@1| TwoStateAt.NT.G$Y@@3)) ($Is refType |c#0@@3| Tclass.TwoStateAt.Cell)) (= (|TwoStateAt.NT.G#requires| TwoStateAt.NT.G$Y@@3 $prevHeap@@7 $Heap@@0 |y#0@@1| |c#0@@3|)  (and ($IsAllocBox |y#0@@1| TwoStateAt.NT.G$Y@@3 $prevHeap@@7) ($IsAlloc refType |c#0@@3| Tclass.TwoStateAt.Cell $prevHeap@@7))))
 :pattern ( (|TwoStateAt.NT.G#requires| TwoStateAt.NT.G$Y@@3 $prevHeap@@7 $Heap@@0 |y#0@@1| |c#0@@3|) ($IsGoodHeap $Heap@@0))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((TwoStateAt.NT.G$Y@@4 T@U) ($prevHeap@@8 T@U) ($Heap@@1 T@U) (|y#0@@2| T@U) (|c#0@@4| T@U) ) (!  (=> (or (|TwoStateAt.NT.G#canCall| TwoStateAt.NT.G$Y@@4 $prevHeap@@8 $Heap@@1 |y#0@@2| |c#0@@4|) (and (< 2 $FunctionContextHeight) (and (and (and (and ($IsGoodHeap $prevHeap@@8) ($IsGoodHeap $Heap@@1)) ($HeapSucc $prevHeap@@8 $Heap@@1)) ($IsBox |y#0@@2| TwoStateAt.NT.G$Y@@4)) ($Is refType |c#0@@4| Tclass.TwoStateAt.Cell)))) (and (|TwoStateAt.NT.F#canCall| TwoStateAt.NT.G$Y@@4 $prevHeap@@8 $Heap@@1 (LitInt 82) |y#0@@2| |c#0@@4|) (= (TwoStateAt.NT.G TwoStateAt.NT.G$Y@@4 $prevHeap@@8 $Heap@@1 |y#0@@2| |c#0@@4|) (TwoStateAt.NT.F TwoStateAt.NT.G$Y@@4 $prevHeap@@8 $Heap@@1 (LitInt 82) |y#0@@2| |c#0@@4|))))
 :pattern ( (TwoStateAt.NT.G TwoStateAt.NT.G$Y@@4 $prevHeap@@8 $Heap@@1 |y#0@@2| |c#0@@4|) ($IsGoodHeap $Heap@@1))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((TwoStateAt.NT.F$Y@@3 T@U) ($prevHeap@@9 T@U) ($Heap@@2 T@U) (this@@0 Int) (|y#0@@3| T@U) (|c#0@@5| T@U) ) (!  (=> (or (|TwoStateAt.NT.F#canCall| TwoStateAt.NT.F$Y@@3 $prevHeap@@9 $Heap@@2 this@@0 |y#0@@3| |c#0@@5|) (and (< 1 $FunctionContextHeight) (and (and (and (and (and ($IsGoodHeap $prevHeap@@9) ($IsGoodHeap $Heap@@2)) ($HeapSucc $prevHeap@@9 $Heap@@2)) (and (<= (LitInt 0) this@@0) (< this@@0 86))) ($IsBox |y#0@@3| TwoStateAt.NT.F$Y@@3)) ($Is refType |c#0@@5| Tclass.TwoStateAt.Cell)))) (= (TwoStateAt.NT.F TwoStateAt.NT.F$Y@@3 $prevHeap@@9 $Heap@@2 this@@0 |y#0@@3| |c#0@@5|) (- (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@2 |c#0@@5|) TwoStateAt.Cell.data))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@9 |c#0@@5|) TwoStateAt.Cell.data))))))
 :pattern ( (TwoStateAt.NT.F TwoStateAt.NT.F$Y@@3 $prevHeap@@9 $Heap@@2 this@@0 |y#0@@3| |c#0@@5|) ($IsGoodHeap $Heap@@2))
))))
(assert (forall ((f@@0 T@U) (t0@@2 T@U) (t1@@2 T@U) (t2@@1 T@U) ) (! (= ($Is HandleTypeType f@@0 (Tclass._System.___hFunc2 t0@@2 t1@@2 t2@@1)) (forall ((h@@4 T@U) (bx0@@0 T@U) (bx1@@0 T@U) ) (!  (=> (and (and ($IsGoodHeap h@@4) (and ($IsBox bx0@@0 t0@@2) ($IsBox bx1@@0 t1@@2))) (Requires2 t0@@2 t1@@2 t2@@1 h@@4 f@@0 bx0@@0 bx1@@0)) ($IsBox (Apply2 t0@@2 t1@@2 t2@@1 h@@4 f@@0 bx0@@0 bx1@@0) t2@@1))
 :pattern ( (Apply2 t0@@2 t1@@2 t2@@1 h@@4 f@@0 bx0@@0 bx1@@0))
)))
 :pattern ( ($Is HandleTypeType f@@0 (Tclass._System.___hFunc2 t0@@2 t1@@2 t2@@1)))
)))
(assert (forall ((TwoStateAt.NT.F$Y@@4 T@U) ($prevHeap@@10 T@U) ($self@@2 Int) ($heap@@5 T@U) (|$fh$0x#0@@5| T@U) (|$fh$0x#1@@5| T@U) ) (! (= (Apply2 TwoStateAt.NT.F$Y@@4 Tclass.TwoStateAt.Cell TInt $heap@@5 (|TwoStateAt.NT.F#Handle| TwoStateAt.NT.F$Y@@4 $prevHeap@@10 $self@@2) |$fh$0x#0@@5| |$fh$0x#1@@5|) ($Box intType (int_2_U (TwoStateAt.NT.F TwoStateAt.NT.F$Y@@4 $prevHeap@@10 $heap@@5 $self@@2 |$fh$0x#0@@5| ($Unbox refType |$fh$0x#1@@5|)))))
 :pattern ( (Apply2 TwoStateAt.NT.F$Y@@4 Tclass.TwoStateAt.Cell TInt $heap@@5 (|TwoStateAt.NT.F#Handle| TwoStateAt.NT.F$Y@@4 $prevHeap@@10 $self@@2) |$fh$0x#0@@5| |$fh$0x#1@@5|))
)))
(assert (forall ((a T@U) (b T@U) ) (!  (=> (|Set#Equal| a b) (= a b))
 :pattern ( (|Set#Equal| a b))
)))
(assert (forall ((t0@@3 T@U) (t1@@3 T@U) (t2@@2 T@U) (heap T@U) (f@@1 T@U) (bx0@@1 T@U) (bx1@@1 T@U) ) (!  (=> (and ($IsGoodHeap heap) (and (and ($IsBox bx0@@1 t0@@3) ($IsBox bx1@@1 t1@@3)) ($Is HandleTypeType f@@1 (Tclass._System.___hFunc2 t0@@3 t1@@3 t2@@2)))) (= (|Set#Equal| (Reads2 t0@@3 t1@@3 t2@@2 $OneHeap f@@1 bx0@@1 bx1@@1) |Set#Empty|) (|Set#Equal| (Reads2 t0@@3 t1@@3 t2@@2 heap f@@1 bx0@@1 bx1@@1) |Set#Empty|)))
 :pattern ( (Reads2 t0@@3 t1@@3 t2@@2 $OneHeap f@@1 bx0@@1 bx1@@1) ($IsGoodHeap heap))
 :pattern ( (Reads2 t0@@3 t1@@3 t2@@2 heap f@@1 bx0@@1 bx1@@1))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) (c T@U) ) (!  (=> (or (not (= a@@0 c)) (not true)) (=> (and ($HeapSucc a@@0 b@@0) ($HeapSucc b@@0 c)) ($HeapSucc a@@0 c)))
 :pattern ( ($HeapSucc a@@0 b@@0) ($HeapSucc b@@0 c))
)))
(assert (forall ((f@@2 T@U) (t0@@4 T@U) (t1@@4 T@U) (t2@@3 T@U) (h@@5 T@U) ) (!  (=> (and ($IsGoodHeap h@@5) ($IsAlloc HandleTypeType f@@2 (Tclass._System.___hFunc2 t0@@4 t1@@4 t2@@3) h@@5)) (forall ((bx0@@2 T@U) (bx1@@2 T@U) ) (!  (=> (and (and ($IsAllocBox bx0@@2 t0@@4 h@@5) ($IsAllocBox bx1@@2 t1@@4 h@@5)) (Requires2 t0@@4 t1@@4 t2@@3 h@@5 f@@2 bx0@@2 bx1@@2)) ($IsAllocBox (Apply2 t0@@4 t1@@4 t2@@3 h@@5 f@@2 bx0@@2 bx1@@2) t2@@3 h@@5))
 :pattern ( (Apply2 t0@@4 t1@@4 t2@@3 h@@5 f@@2 bx0@@2 bx1@@2))
)))
 :pattern ( ($IsAlloc HandleTypeType f@@2 (Tclass._System.___hFunc2 t0@@4 t1@@4 t2@@3) h@@5))
)))
(assert (forall ((cl T@U) (nm T@U) ) (!  (and (= (DeclType (FieldOfDecl cl nm)) cl) (= (DeclName (FieldOfDecl cl nm)) nm))
 :pattern ( (FieldOfDecl cl nm))
)))
(assert (forall ((bx@@4 T@U) ) (!  (=> ($IsBox bx@@4 TInt) (and (= ($Box intType ($Unbox intType bx@@4)) bx@@4) ($Is intType ($Unbox intType bx@@4) TInt)))
 :pattern ( ($IsBox bx@@4 TInt))
)))
(assert (forall ((v@@1 T@U) (t@@2 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@1) t@@2) ($Is T@@3 v@@1 t@@2))
 :pattern ( ($IsBox ($Box T@@3 v@@1) t@@2))
)))
(assert (forall ((x@@5 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@5)) x@@5)
 :pattern ( ($Box T@@4 x@@5))
)))
(assert (forall ((t0@@5 T@U) (t1@@5 T@U) (t2@@4 T@U) (heap@@0 T@U) (f@@3 T@U) (bx0@@3 T@U) (bx1@@3 T@U) ) (!  (=> (and (and ($IsGoodHeap heap@@0) (and (and ($IsBox bx0@@3 t0@@5) ($IsBox bx1@@3 t1@@5)) ($Is HandleTypeType f@@3 (Tclass._System.___hFunc2 t0@@5 t1@@5 t2@@4)))) (|Set#Equal| (Reads2 t0@@5 t1@@5 t2@@4 $OneHeap f@@3 bx0@@3 bx1@@3) |Set#Empty|)) (= (Requires2 t0@@5 t1@@5 t2@@4 $OneHeap f@@3 bx0@@3 bx1@@3) (Requires2 t0@@5 t1@@5 t2@@4 heap@@0 f@@3 bx0@@3 bx1@@3)))
 :pattern ( (Requires2 t0@@5 t1@@5 t2@@4 $OneHeap f@@3 bx0@@3 bx1@@3) ($IsGoodHeap heap@@0))
 :pattern ( (Requires2 t0@@5 t1@@5 t2@@4 heap@@0 f@@3 bx0@@3 bx1@@3))
)))
(assert (forall (($h@@3 T@U) ($o@@4 T@U) ) (!  (=> (and ($IsGoodHeap $h@@3) (and (or (not (= $o@@4 null)) (not true)) (= (dtype $o@@4) Tclass.TwoStateAt.Cell?))) ($Is intType ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@3 $o@@4) TwoStateAt.Cell.data)) TInt))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@3 $o@@4) TwoStateAt.Cell.data)))
)))
(assert (forall ((f@@4 T@U) (t0@@6 T@U) (t1@@6 T@U) (t2@@5 T@U) (u0@@2 T@U) (u1@@2 T@U) (u2@@1 T@U) ) (!  (=> (and (and (and ($Is HandleTypeType f@@4 (Tclass._System.___hFunc2 t0@@6 t1@@6 t2@@5)) (forall ((bx@@5 T@U) ) (!  (=> ($IsBox bx@@5 u0@@2) ($IsBox bx@@5 t0@@6))
 :pattern ( ($IsBox bx@@5 u0@@2))
 :pattern ( ($IsBox bx@@5 t0@@6))
))) (forall ((bx@@6 T@U) ) (!  (=> ($IsBox bx@@6 u1@@2) ($IsBox bx@@6 t1@@6))
 :pattern ( ($IsBox bx@@6 u1@@2))
 :pattern ( ($IsBox bx@@6 t1@@6))
))) (forall ((bx@@7 T@U) ) (!  (=> ($IsBox bx@@7 t2@@5) ($IsBox bx@@7 u2@@1))
 :pattern ( ($IsBox bx@@7 t2@@5))
 :pattern ( ($IsBox bx@@7 u2@@1))
))) ($Is HandleTypeType f@@4 (Tclass._System.___hFunc2 u0@@2 u1@@2 u2@@1)))
 :pattern ( ($Is HandleTypeType f@@4 (Tclass._System.___hFunc2 t0@@6 t1@@6 t2@@5)) ($Is HandleTypeType f@@4 (Tclass._System.___hFunc2 u0@@2 u1@@2 u2@@1)))
)))
(assert (forall ((TwoStateAt.NT.F$Y@@5 T@U) ($prevHeap@@11 T@U) ($h0@@0 T@U) ($h1@@0 T@U) (this@@1 Int) (|y#0@@4| T@U) (|c#0@@6| T@U) ) (!  (=> (and (and (and (and ($IsGoodHeap $h0@@0) ($IsGoodHeap $h1@@0)) (and (<= (LitInt 0) this@@1) (< this@@1 86))) (or (|TwoStateAt.NT.F#canCall| TwoStateAt.NT.F$Y@@5 $prevHeap@@11 $h0@@0 this@@1 |y#0@@4| |c#0@@6|) (and ($IsBox |y#0@@4| TwoStateAt.NT.F$Y@@5) ($Is refType |c#0@@6| Tclass.TwoStateAt.Cell)))) (and ($IsHeapAnchor $h0@@0) ($HeapSucc $h0@@0 $h1@@0))) (=> (forall (($o@@5 T@U) ($f@@1 T@U) )  (=> (and (or (not (= $o@@5 null)) (not true)) (= $o@@5 |c#0@@6|)) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@0 $o@@5) $f@@1) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1@@0 $o@@5) $f@@1)))) (= (TwoStateAt.NT.F TwoStateAt.NT.F$Y@@5 $prevHeap@@11 $h0@@0 this@@1 |y#0@@4| |c#0@@6|) (TwoStateAt.NT.F TwoStateAt.NT.F$Y@@5 $prevHeap@@11 $h1@@0 this@@1 |y#0@@4| |c#0@@6|))))
 :pattern ( ($IsHeapAnchor $h0@@0) ($HeapSucc $h0@@0 $h1@@0) (TwoStateAt.NT.F TwoStateAt.NT.F$Y@@5 $prevHeap@@11 $h1@@0 this@@1 |y#0@@4| |c#0@@6|))
)))
(assert (forall ((t0@@7 T@U) (t1@@7 T@U) (t2@@6 T@U) (h0 T@U) (h1 T@U) (f@@5 T@U) (bx0@@4 T@U) (bx1@@4 T@U) ) (!  (=> (and (and (and ($HeapSucc h0 h1) (and ($IsGoodHeap h0) ($IsGoodHeap h1))) (and (and ($IsBox bx0@@4 t0@@7) ($IsBox bx1@@4 t1@@7)) ($Is HandleTypeType f@@5 (Tclass._System.___hFunc2 t0@@7 t1@@7 t2@@6)))) (forall ((o@@1 T@U) (fld T@U) )  (=> (and (or (not (= o@@1 null)) (not true)) (|Set#IsMember| (Reads2 t0@@7 t1@@7 t2@@6 h0 f@@5 bx0@@4 bx1@@4) ($Box refType o@@1))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0 o@@1) fld) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1 o@@1) fld))))) (= (Requires2 t0@@7 t1@@7 t2@@6 h0 f@@5 bx0@@4 bx1@@4) (Requires2 t0@@7 t1@@7 t2@@6 h1 f@@5 bx0@@4 bx1@@4)))
 :pattern ( ($HeapSucc h0 h1) (Requires2 t0@@7 t1@@7 t2@@6 h1 f@@5 bx0@@4 bx1@@4))
)))
(assert (forall ((t0@@8 T@U) (t1@@8 T@U) (t2@@7 T@U) (h0@@0 T@U) (h1@@0 T@U) (f@@6 T@U) (bx0@@5 T@U) (bx1@@5 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@0 h1@@0) (and ($IsGoodHeap h0@@0) ($IsGoodHeap h1@@0))) (and (and ($IsBox bx0@@5 t0@@8) ($IsBox bx1@@5 t1@@8)) ($Is HandleTypeType f@@6 (Tclass._System.___hFunc2 t0@@8 t1@@8 t2@@7)))) (forall ((o@@2 T@U) (fld@@0 T@U) )  (=> (and (or (not (= o@@2 null)) (not true)) (|Set#IsMember| (Reads2 t0@@8 t1@@8 t2@@7 h1@@0 f@@6 bx0@@5 bx1@@5) ($Box refType o@@2))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0@@0 o@@2) fld@@0) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1@@0 o@@2) fld@@0))))) (= (Requires2 t0@@8 t1@@8 t2@@7 h0@@0 f@@6 bx0@@5 bx1@@5) (Requires2 t0@@8 t1@@8 t2@@7 h1@@0 f@@6 bx0@@5 bx1@@5)))
 :pattern ( ($HeapSucc h0@@0 h1@@0) (Requires2 t0@@8 t1@@8 t2@@7 h1@@0 f@@6 bx0@@5 bx1@@5))
)))
(assert (= (Tag Tclass.TwoStateAt.Cell) Tagclass.TwoStateAt.Cell))
(assert (= (TagFamily Tclass.TwoStateAt.Cell) tytagFamily$Cell))
(assert (= (Tag Tclass.TwoStateAt.Cell?) Tagclass.TwoStateAt.Cell?))
(assert (= (TagFamily Tclass.TwoStateAt.Cell?) tytagFamily$Cell))
(assert (= (Tag Tclass.TwoStateAt.NT) Tagclass.TwoStateAt.NT))
(assert (= (TagFamily Tclass.TwoStateAt.NT) tytagFamily$NT))
(assert (forall (($bx@@0 T@U) (TwoStateAt.NT.G$Y@@5 T@U) ($prevHeap@@12 T@U) ($heap@@6 T@U) (|$fh$0x#0@@6| T@U) (|$fh$0x#1@@6| T@U) ) (! (= (|Set#IsMember| (Reads2 TwoStateAt.NT.G$Y@@5 Tclass.TwoStateAt.Cell TInt $heap@@6 (|TwoStateAt.NT.G#Handle| TwoStateAt.NT.G$Y@@5 $prevHeap@@12) |$fh$0x#0@@6| |$fh$0x#1@@6|) $bx@@0) (= ($Unbox refType $bx@@0) ($Unbox refType |$fh$0x#1@@6|)))
 :pattern ( (|Set#IsMember| (Reads2 TwoStateAt.NT.G$Y@@5 Tclass.TwoStateAt.Cell TInt $heap@@6 (|TwoStateAt.NT.G#Handle| TwoStateAt.NT.G$Y@@5 $prevHeap@@12) |$fh$0x#0@@6| |$fh$0x#1@@6|) $bx@@0))
)))
(assert (forall ((a@@1 T@U) (b@@1 T@U) ) (! (= (|Set#Equal| a@@1 b@@1) (forall ((o@@3 T@U) ) (! (= (|Set#IsMember| a@@1 o@@3) (|Set#IsMember| b@@1 o@@3))
 :pattern ( (|Set#IsMember| a@@1 o@@3))
 :pattern ( (|Set#IsMember| b@@1 o@@3))
)))
 :pattern ( (|Set#Equal| a@@1 b@@1))
)))
(assert (forall ((t0@@9 T@U) (t1@@9 T@U) (t2@@8 T@U) (h0@@1 T@U) (h1@@1 T@U) (f@@7 T@U) (bx0@@6 T@U) (bx1@@6 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@1 h1@@1) (and ($IsGoodHeap h0@@1) ($IsGoodHeap h1@@1))) (and (and ($IsBox bx0@@6 t0@@9) ($IsBox bx1@@6 t1@@9)) ($Is HandleTypeType f@@7 (Tclass._System.___hFunc2 t0@@9 t1@@9 t2@@8)))) (forall ((o@@4 T@U) (fld@@1 T@U) )  (=> (and (or (not (= o@@4 null)) (not true)) (|Set#IsMember| (Reads2 t0@@9 t1@@9 t2@@8 h0@@1 f@@7 bx0@@6 bx1@@6) ($Box refType o@@4))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0@@1 o@@4) fld@@1) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1@@1 o@@4) fld@@1))))) (= (Reads2 t0@@9 t1@@9 t2@@8 h0@@1 f@@7 bx0@@6 bx1@@6) (Reads2 t0@@9 t1@@9 t2@@8 h1@@1 f@@7 bx0@@6 bx1@@6)))
 :pattern ( ($HeapSucc h0@@1 h1@@1) (Reads2 t0@@9 t1@@9 t2@@8 h1@@1 f@@7 bx0@@6 bx1@@6))
)))
(assert (forall ((t0@@10 T@U) (t1@@10 T@U) (t2@@9 T@U) (h0@@2 T@U) (h1@@2 T@U) (f@@8 T@U) (bx0@@7 T@U) (bx1@@7 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@2 h1@@2) (and ($IsGoodHeap h0@@2) ($IsGoodHeap h1@@2))) (and (and ($IsBox bx0@@7 t0@@10) ($IsBox bx1@@7 t1@@10)) ($Is HandleTypeType f@@8 (Tclass._System.___hFunc2 t0@@10 t1@@10 t2@@9)))) (forall ((o@@5 T@U) (fld@@2 T@U) )  (=> (and (or (not (= o@@5 null)) (not true)) (|Set#IsMember| (Reads2 t0@@10 t1@@10 t2@@9 h1@@2 f@@8 bx0@@7 bx1@@7) ($Box refType o@@5))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0@@2 o@@5) fld@@2) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1@@2 o@@5) fld@@2))))) (= (Reads2 t0@@10 t1@@10 t2@@9 h0@@2 f@@8 bx0@@7 bx1@@7) (Reads2 t0@@10 t1@@10 t2@@9 h1@@2 f@@8 bx0@@7 bx1@@7)))
 :pattern ( ($HeapSucc h0@@2 h1@@2) (Reads2 t0@@10 t1@@10 t2@@9 h1@@2 f@@8 bx0@@7 bx1@@7))
)))
(assert (forall ((t0@@11 T@U) (t1@@11 T@U) (t2@@10 T@U) (h0@@3 T@U) (h1@@3 T@U) (f@@9 T@U) (bx0@@8 T@U) (bx1@@8 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@3 h1@@3) (and ($IsGoodHeap h0@@3) ($IsGoodHeap h1@@3))) (and (and ($IsBox bx0@@8 t0@@11) ($IsBox bx1@@8 t1@@11)) ($Is HandleTypeType f@@9 (Tclass._System.___hFunc2 t0@@11 t1@@11 t2@@10)))) (forall ((o@@6 T@U) (fld@@3 T@U) )  (=> (and (or (not (= o@@6 null)) (not true)) (|Set#IsMember| (Reads2 t0@@11 t1@@11 t2@@10 h0@@3 f@@9 bx0@@8 bx1@@8) ($Box refType o@@6))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0@@3 o@@6) fld@@3) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1@@3 o@@6) fld@@3))))) (= (Apply2 t0@@11 t1@@11 t2@@10 h0@@3 f@@9 bx0@@8 bx1@@8) (Apply2 t0@@11 t1@@11 t2@@10 h1@@3 f@@9 bx0@@8 bx1@@8)))
 :pattern ( ($HeapSucc h0@@3 h1@@3) (Apply2 t0@@11 t1@@11 t2@@10 h1@@3 f@@9 bx0@@8 bx1@@8))
)))
(assert (forall ((t0@@12 T@U) (t1@@12 T@U) (t2@@11 T@U) (h0@@4 T@U) (h1@@4 T@U) (f@@10 T@U) (bx0@@9 T@U) (bx1@@9 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@4 h1@@4) (and ($IsGoodHeap h0@@4) ($IsGoodHeap h1@@4))) (and (and ($IsBox bx0@@9 t0@@12) ($IsBox bx1@@9 t1@@12)) ($Is HandleTypeType f@@10 (Tclass._System.___hFunc2 t0@@12 t1@@12 t2@@11)))) (forall ((o@@7 T@U) (fld@@4 T@U) )  (=> (and (or (not (= o@@7 null)) (not true)) (|Set#IsMember| (Reads2 t0@@12 t1@@12 t2@@11 h1@@4 f@@10 bx0@@9 bx1@@9) ($Box refType o@@7))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0@@4 o@@7) fld@@4) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1@@4 o@@7) fld@@4))))) (= (Apply2 t0@@12 t1@@12 t2@@11 h0@@4 f@@10 bx0@@9 bx1@@9) (Apply2 t0@@12 t1@@12 t2@@11 h1@@4 f@@10 bx0@@9 bx1@@9)))
 :pattern ( ($HeapSucc h0@@4 h1@@4) (Apply2 t0@@12 t1@@12 t2@@11 h1@@4 f@@10 bx0@@9 bx1@@9))
)))
(assert (forall ((|x#0@@0| T@U) ) (! (= ($Is intType |x#0@@0| Tclass.TwoStateAt.NT)  (and (<= (LitInt 0) (U_2_int |x#0@@0|)) (< (U_2_int |x#0@@0|) 86)))
 :pattern ( ($Is intType |x#0@@0| Tclass.TwoStateAt.NT))
)))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((x@@7 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@7)) (Lit BoxType ($Box T@@5 x@@7)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@7)))
)))
(assert (forall ((h@@6 T@U) (v@@2 T@U) ) (! ($IsAlloc intType v@@2 TInt h@@6)
 :pattern ( ($IsAlloc intType v@@2 TInt h@@6))
)))
(assert (forall ((v@@3 T@U) ) (! ($Is intType v@@3 TInt)
 :pattern ( ($Is intType v@@3 TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |newtype$check#0@0| () Int)
(declare-fun |newtype$check#1@0| () Int)
(declare-fun current$Heap () T@U)
(declare-fun |y#0@@5| () T@U)
(declare-fun TwoStateAt.NT.G$Y@@6 () T@U)
(declare-fun |c#0@@7| () T@U)
(declare-fun $Heap@@3 () T@U)
(declare-fun |b$reqreads#0@0| () Bool)
(declare-fun $_ReadsFrame@0 () T@U)
(declare-fun previous$Heap () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 9) (let ((anon5_Else_correct  (=> (= |newtype$check#0@0| (LitInt 82)) (and (=> (= (ControlFlow 0 3) (- 0 7)) (and (<= (LitInt 0) |newtype$check#0@0|) (< |newtype$check#0@0| 86))) (=> (and (<= (LitInt 0) |newtype$check#0@0|) (< |newtype$check#0@0| 86)) (=> (= |newtype$check#1@0| (LitInt 82)) (and (=> (= (ControlFlow 0 3) (- 0 6)) (and (<= (LitInt 0) |newtype$check#1@0|) (< |newtype$check#1@0| 86))) (=> (and (<= (LitInt 0) |newtype$check#1@0|) (< |newtype$check#1@0| 86)) (=> ($IsAllocBox ($Box intType (int_2_U (LitInt 82))) Tclass.TwoStateAt.NT current$Heap) (=> (and ($IsAllocBox |y#0@@5| TwoStateAt.NT.G$Y@@6 current$Heap) ($IsAlloc refType |c#0@@7| Tclass.TwoStateAt.Cell current$Heap)) (and (=> (= (ControlFlow 0 3) (- 0 5)) ($IsAllocBox |y#0@@5| TwoStateAt.NT.G$Y@@6 $Heap@@3)) (=> ($IsAllocBox |y#0@@5| TwoStateAt.NT.G$Y@@6 $Heap@@3) (and (=> (= (ControlFlow 0 3) (- 0 4)) ($IsAlloc refType |c#0@@7| Tclass.TwoStateAt.Cell $Heap@@3)) (=> ($IsAlloc refType |c#0@@7| Tclass.TwoStateAt.Cell $Heap@@3) (=> (and (= |b$reqreads#0@0| (forall (($o@@6 T@U) ($f@@2 T@U) )  (=> (and (and (or (not (= $o@@6 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) current$Heap $o@@6) alloc)))) (= $o@@6 |c#0@@7|)) (U_2_bool (MapType1Select refType FieldType boolType $_ReadsFrame@0 $o@@6 $f@@2))))) (|TwoStateAt.NT.F#canCall| TwoStateAt.NT.G$Y@@6 $Heap@@3 current$Heap (LitInt 82) |y#0@@5| |c#0@@7|)) (=> (and (and (= (TwoStateAt.NT.G TwoStateAt.NT.G$Y@@6 $Heap@@3 current$Heap |y#0@@5| |c#0@@7|) (TwoStateAt.NT.F TwoStateAt.NT.G$Y@@6 $Heap@@3 current$Heap (LitInt 82) |y#0@@5| |c#0@@7|)) (|TwoStateAt.NT.F#canCall| TwoStateAt.NT.G$Y@@6 $Heap@@3 current$Heap (LitInt 82) |y#0@@5| |c#0@@7|)) (and ($Is intType (int_2_U (TwoStateAt.NT.G TwoStateAt.NT.G$Y@@6 $Heap@@3 current$Heap |y#0@@5| |c#0@@7|)) TInt) (= (ControlFlow 0 3) (- 0 2)))) |b$reqreads#0@0|))))))))))))))))
(let ((anon5_Then_correct true))
(let ((anon0_correct  (=> (= $_ReadsFrame@0 (|lambda#0| null current$Heap alloc |c#0@@7|)) (and (=> (= (ControlFlow 0 8) 1) anon5_Then_correct) (=> (= (ControlFlow 0 8) 3) anon5_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and ($IsGoodHeap $Heap@@3) ($IsHeapAnchor $Heap@@3)) (and ($IsBox |y#0@@5| TwoStateAt.NT.G$Y@@6) ($IsAllocBox |y#0@@5| TwoStateAt.NT.G$Y@@6 previous$Heap))) (=> (and (and (and ($Is refType |c#0@@7| Tclass.TwoStateAt.Cell) ($IsAlloc refType |c#0@@7| Tclass.TwoStateAt.Cell previous$Heap)) (= 2 $FunctionContextHeight)) (and (and (= previous$Heap $Heap@@3) (and ($HeapSucc previous$Heap current$Heap) ($IsGoodHeap current$Heap))) (= (ControlFlow 0 9) 8))) anon0_correct))))
PreconditionGeneratedEntry_correct)))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
