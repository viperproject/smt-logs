(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun refType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun alloc () T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun boolType () T@T)
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun Mod (Int Int) Int)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :qid |typeInv:U_2_bool|
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :qid |cast:U_2_bool|
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :qid |typeInv:U_2_int|
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :qid |cast:U_2_int|
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :qid |typeInv:U_2_real|
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :qid |cast:U_2_real|
 :pattern ( (U_2_real x@@1))
))) (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :qid |mapAx0:MapType0Select|
 :weight 0
))) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :qid |mapAx1:MapType0Select:0|
 :weight 0
))) (= (Ctor FieldType) 3)) (= (Ctor BoxType) 4)) (= (Ctor refType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (! (= (Ctor (MapType0Type arg0@@2 arg1)) 6)
 :qid |ctor:MapType0Type|
))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :qid |typeInv:MapType0TypeInv0|
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :qid |typeInv:MapType0TypeInv1|
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))))
 :qid |DafnyPreludebpl.609:30|
 :skolemid |118|
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))
)))
 :qid |DafnyPreludebpl.608:15|
 :skolemid |119|
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :qid |DafnyPreludebpl.108:29|
 :skolemid |17|
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :qid |DafnyPreludebpl.102:29|
 :skolemid |15|
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :qid |DafnyPreludebpl.168:18|
 :skolemid |26|
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((a T@U) (b T@U) (c T@U) ) (!  (=> (or (not (= a c)) (not true)) (=> (and ($HeapSucc a b) ($HeapSucc b c)) ($HeapSucc a c)))
 :qid |DafnyPreludebpl.606:15|
 :skolemid |117|
 :pattern ( ($HeapSucc a b) ($HeapSucc b c))
)))
(assert (forall ((x@@5 T@U) (T@@1 T@T) ) (! (= ($Unbox T@@1 ($Box T@@1 x@@5)) x@@5)
 :qid |DafnyPreludebpl.167:18|
 :skolemid |25|
 :pattern ( ($Box T@@1 x@@5))
)))
(assert  (and (forall ((t0@@0 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 t2 (MapType1Store t0@@0 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :qid |mapAx0:MapType1Select|
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :qid |mapAx1:MapType1Select:0|
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :qid |mapAx1:MapType1Select:1|
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :qid |DafnyPreludebpl.156:1|
 :skolemid |715|
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((x@@6 Int) (y Int) ) (! (= (Mod x@@6 y) (mod x@@6 y))
 :qid |DafnyPreludebpl.1649:14|
 :skolemid |340|
 :pattern ( (Mod x@@6 y))
)))
(assert (forall ((x@@7 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@7))) (Lit BoxType ($Box intType (int_2_U x@@7))))
 :qid |DafnyPreludebpl.109:15|
 :skolemid |18|
 :pattern ( ($Box intType (int_2_U (LitInt x@@7))))
)))
(assert (forall ((x@@8 T@U) (T@@2 T@T) ) (! (= ($Box T@@2 (Lit T@@2 x@@8)) (Lit BoxType ($Box T@@2 x@@8)))
 :qid |DafnyPreludebpl.103:18|
 :skolemid |16|
 :pattern ( ($Box T@@2 (Lit T@@2 x@@8)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |$decr$loop#0_0_1_1_1_0_00@3| () Int)
(declare-fun |u#0_0_0@7| () Int)
(declare-fun |N#0| () Int)
(declare-fun |j#0_0@2| () Int)
(declare-fun |a#0@3| () Int)
(declare-fun |c#0@3| () Int)
(declare-fun |e#0@7| () Int)
(declare-fun |i#0@2| () Int)
(declare-fun |i#0@1| () Int)
(declare-fun |$decr$loop#00@1| () Int)
(declare-fun |M#0| () Int)
(declare-fun |e#0@3| () Int)
(declare-fun |c#0@1| () Int)
(declare-fun |a#0@1| () Int)
(declare-fun |c#0@2| () Int)
(declare-fun |e#0@2| () Int)
(declare-fun |a#0@2| () Int)
(declare-fun |b#0@2| () Int)
(declare-fun |e#0@6| () Int)
(declare-fun |e#0@5| () Int)
(declare-fun |b#0@0| () Int)
(declare-fun |b#0@1| () Int)
(declare-fun |e#0@1| () Int)
(declare-fun |k#0_0_0@4| () Int)
(declare-fun |k#0_0_0@3| () Int)
(declare-fun |$decr$loop#0_0_00@3| () Int)
(declare-fun |O#0| () Int)
(declare-fun |d#0@4| () Int)
(declare-fun |e#0@8| () Int)
(declare-fun |j#0_0@3| () Int)
(declare-fun |$decr$loop#0_00@2| () Int)
(declare-fun |e#0@4| () Int)
(declare-fun |d#0@2| () Int)
(declare-fun |d#0@3| () Int)
(declare-fun |$w$loop#0_0_0@2| () Bool)
(declare-fun |$w$loop#0@0| () Bool)
(declare-fun |$w$loop#0_0@1| () Bool)
(declare-fun |u#0_0_0@10| () Int)
(declare-fun $Heap () T@U)
(declare-fun null () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun |$decr_init$loop#0_0_00@2| () Int)
(declare-fun |k#0_0_0@2| () Int)
(declare-fun |u#0_0_0@9| () Int)
(declare-fun |u#0_0_0@8| () Int)
(declare-fun |u#0_0_0@4| () Int)
(declare-fun |u#0_0_0@6| () Int)
(declare-fun |u#0_0_0@5| () Int)
(declare-fun |$w$loop#0_0_1_1_1_0_0@2| () Bool)
(declare-fun |$decr_init$loop#0_0_1_1_1_0_00@2| () Int)
(declare-fun |u#0_0_0@2| () Int)
(declare-fun |u#0_0_0@3| () Int)
(declare-fun |$decr_init$loop#0_00@1| () Int)
(declare-fun |j#0_0@1| () Int)
(declare-fun |$decr_init$loop#00@0| () Int)
(declare-fun |i#0@0| () Int)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun $FunctionContextHeight () Int)
(set-info :boogie-vc-id Impl$$_module.__default.TheBreaker__AllGood)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 86) (let ((anon90_Else_correct  (and (=> (= (ControlFlow 0 66) (- 0 67)) (or (<= 0 |$decr$loop#0_0_1_1_1_0_00@3|) (= (- 10000 |u#0_0_0@7|) |$decr$loop#0_0_1_1_1_0_00@3|))) (=> (or (<= 0 |$decr$loop#0_0_1_1_1_0_00@3|) (= (- 10000 |u#0_0_0@7|) |$decr$loop#0_0_1_1_1_0_00@3|)) (=> (= (ControlFlow 0 66) (- 0 65)) (< (- 10000 |u#0_0_0@7|) |$decr$loop#0_0_1_1_1_0_00@3|))))))
(let ((anon87_Then_correct true))
(let ((anon86_LoopDone_correct true))
(let ((anon71_correct  (and (=> (= (ControlFlow 0 37) (- 0 39)) (or (or (or (<= |N#0| |j#0_0@2|) (= |a#0@3| (LitInt 15))) (= |c#0@3| (LitInt 21))) (= |e#0@7| (LitInt 4)))) (=> (or (or (or (<= |N#0| |j#0_0@2|) (= |a#0@3| (LitInt 15))) (= |c#0@3| (LitInt 21))) (= |e#0@7| (LitInt 4))) (=> (= |i#0@2| (+ |i#0@1| 1)) (and (=> (= (ControlFlow 0 37) (- 0 38)) (or (<= 0 |$decr$loop#00@1|) (= (- |M#0| |i#0@2|) |$decr$loop#00@1|))) (=> (or (<= 0 |$decr$loop#00@1|) (= (- |M#0| |i#0@2|) |$decr$loop#00@1|)) (=> (= (ControlFlow 0 37) (- 0 36)) (< (- |M#0| |i#0@2|) |$decr$loop#00@1|)))))))))
(let ((anon104_Else_correct  (=> (and (or (or (<= |N#0| |j#0_0@2|) (= |a#0@3| (LitInt 15))) (= |c#0@3| (LitInt 21))) (= (ControlFlow 0 41) 37)) anon71_correct)))
(let ((anon104_Then_correct  (=> (and (not (or (or (<= |N#0| |j#0_0@2|) (= |a#0@3| (LitInt 15))) (= |c#0@3| (LitInt 21)))) (= (ControlFlow 0 40) 37)) anon71_correct)))
(let ((anon103_Else_correct  (=> (or (<= |N#0| |j#0_0@2|) (= |a#0@3| (LitInt 15))) (and (=> (= (ControlFlow 0 43) 40) anon104_Then_correct) (=> (= (ControlFlow 0 43) 41) anon104_Else_correct)))))
(let ((anon103_Then_correct  (=> (not (or (<= |N#0| |j#0_0@2|) (= |a#0@3| (LitInt 15)))) (and (=> (= (ControlFlow 0 42) 40) anon104_Then_correct) (=> (= (ControlFlow 0 42) 41) anon104_Else_correct)))))
(let ((anon102_Else_correct  (=> (<= |N#0| |j#0_0@2|) (and (=> (= (ControlFlow 0 45) 42) anon103_Then_correct) (=> (= (ControlFlow 0 45) 43) anon103_Else_correct)))))
(let ((anon102_Then_correct  (=> (< |j#0_0@2| |N#0|) (and (=> (= (ControlFlow 0 44) 42) anon103_Then_correct) (=> (= (ControlFlow 0 44) 43) anon103_Else_correct)))))
(let ((anon97_Then_correct  (=> (and (and (= |e#0@3| (LitInt 4)) (= |c#0@3| |c#0@1|)) (and (= |e#0@7| |e#0@3|) (= |a#0@3| |a#0@1|))) (and (=> (= (ControlFlow 0 49) 44) anon102_Then_correct) (=> (= (ControlFlow 0 49) 45) anon102_Else_correct)))))
(let ((anon84_Then_correct  (=> (and (and (= |c#0@2| (LitInt 21)) (= |c#0@3| |c#0@2|)) (and (= |e#0@7| |e#0@2|) (= |a#0@3| |a#0@1|))) (and (=> (= (ControlFlow 0 48) 44) anon102_Then_correct) (=> (= (ControlFlow 0 48) 45) anon102_Else_correct)))))
(let ((anon82_Then_correct  (=> (and (and (= |a#0@2| (LitInt 15)) (= |c#0@3| |c#0@1|)) (and (= |e#0@7| |e#0@2|) (= |a#0@3| |a#0@2|))) (and (=> (= (ControlFlow 0 47) 44) anon102_Then_correct) (=> (= (ControlFlow 0 47) 45) anon102_Else_correct)))))
(let ((anon81_Then_correct  (=> (and (and (<= |N#0| |j#0_0@2|) (= |c#0@3| |c#0@1|)) (and (= |e#0@7| |e#0@2|) (= |a#0@3| |a#0@1|))) (and (=> (= (ControlFlow 0 46) 44) anon102_Then_correct) (=> (= (ControlFlow 0 46) 45) anon102_Else_correct)))))
(let ((anon75_correct  (=> (= (ControlFlow 0 26) (- 0 25)) (or (or (<= |M#0| |i#0@1|) (= |b#0@2| (LitInt 12))) (= |e#0@6| (LitInt 37))))))
(let ((anon106_Else_correct  (=> (and (or (<= |M#0| |i#0@1|) (= |b#0@2| (LitInt 12))) (= (ControlFlow 0 28) 26)) anon75_correct)))
(let ((anon106_Then_correct  (=> (and (not (or (<= |M#0| |i#0@1|) (= |b#0@2| (LitInt 12)))) (= (ControlFlow 0 27) 26)) anon75_correct)))
(let ((anon105_Else_correct  (=> (<= |M#0| |i#0@1|) (and (=> (= (ControlFlow 0 30) 27) anon106_Then_correct) (=> (= (ControlFlow 0 30) 28) anon106_Else_correct)))))
(let ((anon105_Then_correct  (=> (< |i#0@1| |M#0|) (and (=> (= (ControlFlow 0 29) 27) anon106_Then_correct) (=> (= (ControlFlow 0 29) 28) anon106_Else_correct)))))
(let ((anon99_Then_correct  (=> (= |e#0@5| (LitInt 37)) (=> (and (= |b#0@2| |b#0@0|) (= |e#0@6| |e#0@5|)) (and (=> (= (ControlFlow 0 33) 29) anon105_Then_correct) (=> (= (ControlFlow 0 33) 30) anon105_Else_correct))))))
(let ((anon83_Then_correct  (=> (= |b#0@1| (LitInt 12)) (=> (and (= |b#0@2| |b#0@1|) (= |e#0@6| |e#0@2|)) (and (=> (= (ControlFlow 0 32) 29) anon105_Then_correct) (=> (= (ControlFlow 0 32) 30) anon105_Else_correct))))))
(let ((anon78_Then_correct  (=> (<= |M#0| |i#0@1|) (=> (and (= |b#0@2| |b#0@0|) (= |e#0@6| |e#0@1|)) (and (=> (= (ControlFlow 0 31) 29) anon105_Then_correct) (=> (= (ControlFlow 0 31) 30) anon105_Else_correct))))))
(let ((anon99_Else_correct  (=> (= |k#0_0_0@4| (+ |k#0_0_0@3| 1)) (and (=> (= (ControlFlow 0 23) (- 0 24)) (or (<= 0 |$decr$loop#0_0_00@3|) (= (- |O#0| |k#0_0_0@4|) |$decr$loop#0_0_00@3|))) (=> (or (<= 0 |$decr$loop#0_0_00@3|) (= (- |O#0| |k#0_0_0@4|) |$decr$loop#0_0_00@3|)) (=> (= (ControlFlow 0 23) (- 0 22)) (< (- |O#0| |k#0_0_0@4|) |$decr$loop#0_0_00@3|)))))))
(let ((anon98_Else_correct  (and (=> (= (ControlFlow 0 34) 33) anon99_Then_correct) (=> (= (ControlFlow 0 34) 23) anon99_Else_correct))))
(let ((anon65_correct  (and (=> (= (ControlFlow 0 8) (- 0 10)) (or (or (<= |O#0| |k#0_0_0@3|) (= |d#0@4| (LitInt 187))) (= |e#0@8| (LitInt 7)))) (=> (or (or (<= |O#0| |k#0_0_0@3|) (= |d#0@4| (LitInt 187))) (= |e#0@8| (LitInt 7))) (=> (= |j#0_0@3| (+ |j#0_0@2| 1)) (and (=> (= (ControlFlow 0 8) (- 0 9)) (or (<= 0 |$decr$loop#0_00@2|) (= (- |N#0| |j#0_0@3|) |$decr$loop#0_00@2|))) (=> (or (<= 0 |$decr$loop#0_00@2|) (= (- |N#0| |j#0_0@3|) |$decr$loop#0_00@2|)) (=> (= (ControlFlow 0 8) (- 0 7)) (< (- |N#0| |j#0_0@3|) |$decr$loop#0_00@2|)))))))))
(let ((anon101_Else_correct  (=> (and (or (<= |O#0| |k#0_0_0@3|) (= |d#0@4| (LitInt 187))) (= (ControlFlow 0 12) 8)) anon65_correct)))
(let ((anon101_Then_correct  (=> (and (not (or (<= |O#0| |k#0_0_0@3|) (= |d#0@4| (LitInt 187)))) (= (ControlFlow 0 11) 8)) anon65_correct)))
(let ((anon100_Else_correct  (=> (<= |O#0| |k#0_0_0@3|) (and (=> (= (ControlFlow 0 14) 11) anon101_Then_correct) (=> (= (ControlFlow 0 14) 12) anon101_Else_correct)))))
(let ((anon100_Then_correct  (=> (< |k#0_0_0@3| |O#0|) (and (=> (= (ControlFlow 0 13) 11) anon101_Then_correct) (=> (= (ControlFlow 0 13) 12) anon101_Else_correct)))))
(let ((anon98_Then_correct  (=> (= |e#0@4| (LitInt 7)) (=> (and (= |e#0@8| |e#0@4|) (= |d#0@4| |d#0@2|)) (and (=> (= (ControlFlow 0 21) 13) anon100_Then_correct) (=> (= (ControlFlow 0 21) 14) anon100_Else_correct))))))
(let ((anon97_Else_correct  (and (=> (= (ControlFlow 0 35) 21) anon98_Then_correct) (=> (= (ControlFlow 0 35) 34) anon98_Else_correct))))
(let ((anon96_Then_correct  (=> (< |k#0_0_0@3| |O#0|) (and (=> (= (ControlFlow 0 50) 49) anon97_Then_correct) (=> (= (ControlFlow 0 50) 35) anon97_Else_correct)))))
(let ((anon46_correct  (=> (and (and (and (< |k#0_0_0@3| |O#0|) (= (Mod |k#0_0_0@3| (LitInt 2)) (LitInt 0))) (= |d#0@3| (LitInt 187))) (and (= |e#0@8| |e#0@2|) (= |d#0@4| |d#0@3|))) (and (=> (= (ControlFlow 0 17) 13) anon100_Then_correct) (=> (= (ControlFlow 0 17) 14) anon100_Else_correct)))))
(let ((anon95_Else_correct  (=> (and (<= |O#0| |k#0_0_0@3|) (= (ControlFlow 0 20) 17)) anon46_correct)))
(let ((anon95_Then_correct  (=> (< |k#0_0_0@3| |O#0|) (and (=> (= (ControlFlow 0 18) (- 0 19)) (or (not (= (LitInt 2) 0)) (not true))) (=> (or (not (= (LitInt 2) 0)) (not true)) (=> (= (ControlFlow 0 18) 17) anon46_correct))))))
(let ((anon96_Else_correct  (=> (and (and (not (and (< |k#0_0_0@3| |O#0|) (= (Mod |k#0_0_0@3| (LitInt 2)) (LitInt 0)))) (<= |O#0| |k#0_0_0@3|)) (and (= |e#0@8| |e#0@2|) (= |d#0@4| |d#0@2|))) (and (=> (= (ControlFlow 0 16) 13) anon100_Then_correct) (=> (= (ControlFlow 0 16) 14) anon100_Else_correct)))))
(let ((anon93_Else_correct  (=> (and (U_2_bool (Lit boolType (bool_2_U true))) (= |$decr$loop#0_0_00@3| (- |O#0| |k#0_0_0@3|))) (and (and (and (=> (= (ControlFlow 0 51) 50) anon96_Then_correct) (=> (= (ControlFlow 0 51) 16) anon96_Else_correct)) (=> (= (ControlFlow 0 51) 18) anon95_Then_correct)) (=> (= (ControlFlow 0 51) 20) anon95_Else_correct)))))
(let ((anon93_Then_correct  (=> (not (U_2_bool (Lit boolType (bool_2_U true)))) (=> (and (= |e#0@8| |e#0@2|) (= |d#0@4| |d#0@2|)) (and (=> (= (ControlFlow 0 15) 13) anon100_Then_correct) (=> (= (ControlFlow 0 15) 14) anon100_Else_correct))))))
(let ((anon92_Else_correct  (=> |$w$loop#0_0_0@2| (and (=> (= (ControlFlow 0 52) 15) anon93_Then_correct) (=> (= (ControlFlow 0 52) 51) anon93_Else_correct)))))
(let ((anon92_Then_correct true))
(let ((anon91_LoopBody_correct  (and (=> (= (ControlFlow 0 53) 6) anon92_Then_correct) (=> (= (ControlFlow 0 53) 52) anon92_Else_correct))))
(let ((anon91_LoopDone_correct true))
(let ((anon91_LoopHead_correct  (=> (and (and (and (and (and (and (and (not false) (<= 0 |i#0@1|)) |$w$loop#0@0|) (<= 0 |j#0_0@2|)) |$w$loop#0_0@1|) (= |u#0_0_0@10| 1998)) (<= 0 |k#0_0_0@3|)) (and (and (forall (($o@@0 T@U) ) (!  (=> (and (or (not (= $o@@0 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@0) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@0) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@0)))
 :qid |ControlStructuresdfy.173:7|
 :skolemid |593|
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@0))
)) ($HeapSucc $Heap $Heap)) (and (forall (($o@@1 T@U) ($f@@0 T@U) ) (!  (=> (and (or (not (= $o@@1 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@1) alloc)))) (or (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@1) $f@@0) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@1) $f@@0)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@1 $f@@0))))
 :qid |ControlStructuresdfy.173:7|
 :skolemid |594|
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@1) $f@@0))
)) (<= (- |O#0| |k#0_0_0@3|) |$decr_init$loop#0_0_00@2|)))) (and (=> (= (ControlFlow 0 54) 5) anon91_LoopDone_correct) (=> (= (ControlFlow 0 54) 53) anon91_LoopBody_correct)))))
(let ((after_0_0_0_correct  (and (=> (= (ControlFlow 0 55) (- 0 56)) (= |u#0_0_0@10| (LitInt 1998))) (=> (= |u#0_0_0@10| (LitInt 1998)) (=> (= |k#0_0_0@2| (LitInt 0)) (=> (and (= |$decr_init$loop#0_0_00@2| (- |O#0| |k#0_0_0@2|)) (= (ControlFlow 0 55) 54)) anon91_LoopHead_correct))))))
(let ((anon90_Then_correct  (=> (= |u#0_0_0@9| (LitInt 1998)) (=> (and (= |u#0_0_0@10| |u#0_0_0@9|) (= (ControlFlow 0 64) 55)) after_0_0_0_correct))))
(let ((anon89_Else_correct  (and (=> (= (ControlFlow 0 68) 64) anon90_Then_correct) (=> (= (ControlFlow 0 68) 66) anon90_Else_correct))))
(let ((anon89_Then_correct  (=> (= |u#0_0_0@8| (LitInt 1998)) (=> (and (= |u#0_0_0@10| |u#0_0_0@8|) (= (ControlFlow 0 63) 55)) after_0_0_0_correct))))
(let ((anon88_Else_correct  (=> (< |u#0_0_0@4| 10000) (=> (and (= |$decr$loop#0_0_1_1_1_0_00@3| (- 10000 |u#0_0_0@4|)) (= |u#0_0_0@7| (+ |u#0_0_0@4| 3))) (and (=> (= (ControlFlow 0 69) 63) anon89_Then_correct) (=> (= (ControlFlow 0 69) 68) anon89_Else_correct))))))
(let ((anon36_correct  (=> (and (= |u#0_0_0@10| |u#0_0_0@6|) (= (ControlFlow 0 57) 55)) after_0_0_0_correct)))
(let ((anon88_Then_correct  (=> (<= 10000 |u#0_0_0@4|) (and (=> (= (ControlFlow 0 61) (- 0 62)) (<= (LitInt 10000) |u#0_0_0@4|)) (=> (<= (LitInt 10000) |u#0_0_0@4|) (=> (= |u#0_0_0@5| (LitInt 1998)) (=> (and (= |u#0_0_0@6| |u#0_0_0@5|) (= (ControlFlow 0 61) 57)) anon36_correct)))))))
(let ((anon87_Else_correct  (=> |$w$loop#0_0_1_1_1_0_0@2| (and (=> (= (ControlFlow 0 70) 61) anon88_Then_correct) (=> (= (ControlFlow 0 70) 69) anon88_Else_correct)))))
(let ((anon86_LoopBody_correct  (and (=> (= (ControlFlow 0 71) 60) anon87_Then_correct) (=> (= (ControlFlow 0 71) 70) anon87_Else_correct))))
(let ((anon86_LoopHead_correct  (=> (and (and (and (and (and (and (and (not false) (<= 0 |i#0@1|)) |$w$loop#0@0|) (<= 0 |j#0_0@2|)) |$w$loop#0_0@1|) (<= 2000 |u#0_0_0@4|)) (= |$decr_init$loop#0_0_1_1_1_0_00@2| 8000)) (and (and (forall (($o@@2 T@U) ) (!  (=> (and (or (not (= $o@@2 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@2) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@2) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@2)))
 :qid |ControlStructuresdfy.161:9|
 :skolemid |591|
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@2))
)) ($HeapSucc $Heap $Heap)) (and (forall (($o@@3 T@U) ($f@@1 T@U) ) (!  (=> (and (or (not (= $o@@3 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@3) alloc)))) (or (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@3) $f@@1) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@3) $f@@1)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@3 $f@@1))))
 :qid |ControlStructuresdfy.161:9|
 :skolemid |592|
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@3) $f@@1))
)) (<= (- 10000 |u#0_0_0@4|) |$decr_init$loop#0_0_1_1_1_0_00@2|)))) (and (=> (= (ControlFlow 0 72) 59) anon86_LoopDone_correct) (=> (= (ControlFlow 0 72) 71) anon86_LoopBody_correct)))))
(let ((anon85_Then_correct  (=> (and (= |$decr_init$loop#0_0_1_1_1_0_00@2| (- 10000 |u#0_0_0@2|)) (= (ControlFlow 0 73) 72)) anon86_LoopHead_correct)))
(let ((anon85_Else_correct  (=> (= |u#0_0_0@3| (- |u#0_0_0@2| 2)) (=> (and (= |u#0_0_0@6| |u#0_0_0@3|) (= (ControlFlow 0 58) 57)) anon36_correct))))
(let ((anon84_Else_correct  (and (=> (= (ControlFlow 0 74) 73) anon85_Then_correct) (=> (= (ControlFlow 0 74) 58) anon85_Else_correct))))
(let ((anon83_Else_correct  (and (=> (= (ControlFlow 0 75) 48) anon84_Then_correct) (=> (= (ControlFlow 0 75) 74) anon84_Else_correct))))
(let ((anon82_Else_correct  (and (=> (= (ControlFlow 0 76) 32) anon83_Then_correct) (=> (= (ControlFlow 0 76) 75) anon83_Else_correct))))
(let ((anon81_Else_correct  (=> (< |j#0_0@2| |N#0|) (=> (and (= |$decr$loop#0_00@2| (- |N#0| |j#0_0@2|)) (= |u#0_0_0@2| (LitInt 2000))) (and (=> (= (ControlFlow 0 77) 47) anon82_Then_correct) (=> (= (ControlFlow 0 77) 76) anon82_Else_correct))))))
(let ((anon80_Else_correct  (=> |$w$loop#0_0@1| (and (=> (= (ControlFlow 0 78) 46) anon81_Then_correct) (=> (= (ControlFlow 0 78) 77) anon81_Else_correct)))))
(let ((anon80_Then_correct true))
(let ((anon79_LoopBody_correct  (and (=> (= (ControlFlow 0 79) 4) anon80_Then_correct) (=> (= (ControlFlow 0 79) 78) anon80_Else_correct))))
(let ((anon79_LoopDone_correct true))
(let ((anon79_LoopHead_correct  (=> (and (and (and (and (not false) (<= 0 |i#0@1|)) |$w$loop#0@0|) (<= 0 |j#0_0@2|)) (and (and (forall (($o@@4 T@U) ) (!  (=> (and (or (not (= $o@@4 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@4) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@4) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@4)))
 :qid |ControlStructuresdfy.149:5|
 :skolemid |589|
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@4))
)) ($HeapSucc $Heap $Heap)) (and (forall (($o@@5 T@U) ($f@@2 T@U) ) (!  (=> (and (or (not (= $o@@5 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@5) alloc)))) (or (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@5) $f@@2) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@5) $f@@2)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@5 $f@@2))))
 :qid |ControlStructuresdfy.149:5|
 :skolemid |590|
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@5) $f@@2))
)) (<= (- |N#0| |j#0_0@2|) |$decr_init$loop#0_00@1|)))) (and (=> (= (ControlFlow 0 80) 3) anon79_LoopDone_correct) (=> (= (ControlFlow 0 80) 79) anon79_LoopBody_correct)))))
(let ((anon78_Else_correct  (=> (< |i#0@1| |M#0|) (=> (and (and (= |$decr$loop#00@1| (- |M#0| |i#0@1|)) (= |j#0_0@1| (LitInt 0))) (and (= |$decr_init$loop#0_00@1| (- |N#0| |j#0_0@1|)) (= (ControlFlow 0 81) 80))) anon79_LoopHead_correct))))
(let ((anon77_Else_correct  (=> |$w$loop#0@0| (and (=> (= (ControlFlow 0 82) 31) anon78_Then_correct) (=> (= (ControlFlow 0 82) 81) anon78_Else_correct)))))
(let ((anon77_Then_correct true))
(let ((anon76_LoopBody_correct  (and (=> (= (ControlFlow 0 83) 2) anon77_Then_correct) (=> (= (ControlFlow 0 83) 82) anon77_Else_correct))))
(let ((anon76_LoopDone_correct true))
(let ((anon76_LoopHead_correct  (=> (and (not false) (<= 0 |i#0@1|)) (=> (and (and (forall (($o@@6 T@U) ) (!  (=> (and (or (not (= $o@@6 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@6) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@6) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@6)))
 :qid |ControlStructuresdfy.145:3|
 :skolemid |587|
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@6))
)) ($HeapSucc $Heap $Heap)) (and (forall (($o@@7 T@U) ($f@@3 T@U) ) (!  (=> (and (or (not (= $o@@7 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@7) alloc)))) (or (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@7) $f@@3) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@7) $f@@3)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@7 $f@@3))))
 :qid |ControlStructuresdfy.145:3|
 :skolemid |588|
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@7) $f@@3))
)) (<= (- |M#0| |i#0@1|) |$decr_init$loop#00@0|))) (and (=> (= (ControlFlow 0 84) 1) anon76_LoopDone_correct) (=> (= (ControlFlow 0 84) 83) anon76_LoopBody_correct))))))
(let ((anon0_correct  (=> (and (and (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (= |i#0@0| (LitInt 0))) (and (= |$decr_init$loop#00@0| (- |M#0| |i#0@0|)) (= (ControlFlow 0 85) 84))) anon76_LoopHead_correct)))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (and (= 0 $FunctionContextHeight) (= (ControlFlow 0 86) 85))) anon0_correct)))
PreconditionGeneratedEntry_correct)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
