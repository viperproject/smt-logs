(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 (T@U) T@U)
(declare-fun $generated@@22 (T@T T@U T@U) Bool)
(declare-fun $generated@@23 () T@T)
(declare-fun $generated@@24 () T@U)
(declare-fun $generated@@25 () T@U)
(declare-fun $generated@@26 (T@U) T@U)
(declare-fun $generated@@28 () Int)
(declare-fun $generated@@29 (T@U) Int)
(declare-fun $generated@@30 (T@T T@U) T@U)
(declare-fun $generated@@31 (T@U) Bool)
(declare-fun $generated@@32 () T@U)
(declare-fun $generated@@33 (T@U Int) Bool)
(declare-fun $generated@@34 (Int) Int)
(declare-fun $generated@@35 (T@U Int) Int)
(declare-fun $generated@@37 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@42 (T@T T@U) T@U)
(declare-fun $generated@@43 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@44 () T@T)
(declare-fun $generated@@45 () T@T)
(declare-fun $generated@@46 (T@T T@T) T@T)
(declare-fun $generated@@47 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@48 (T@T) T@T)
(declare-fun $generated@@49 (T@T) T@T)
(declare-fun $generated@@72 (T@T T@U) T@U)
(declare-fun $generated@@77 (T@U T@U T@U) Bool)
(declare-fun $generated@@85 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@86 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@87 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@120 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert (= ($generated@@21 $generated) $generated@@0))
(assert (= ($generated@@5 $generated@@23) 3))
(assert (forall (($generated@@27 T@U) ) (! (= ($generated@@22 $generated@@23 $generated@@27 $generated@@24)  (or (= $generated@@27 $generated@@25) (= ($generated@@26 $generated@@27) $generated@@24)))
 :pattern ( ($generated@@22 $generated@@23 $generated@@27 $generated@@24))
)))
(assert  (=> (<= 1 $generated@@28) (forall (($generated@@36 T@U) ) (!  (=> (or ($generated@@31 ($generated@@30 $generated@@23 $generated@@36)) (and (< 1 $generated@@28) ($generated@@22 $generated@@23 $generated@@36 $generated@@32))) (and ($generated@@33 ($generated@@30 $generated@@23 $generated@@36) ($generated@@34 2)) (= ($generated@@29 ($generated@@30 $generated@@23 $generated@@36)) ($generated@@34 ($generated@@35 ($generated@@30 $generated@@23 $generated@@36) ($generated@@34 2))))))
 :weight 3
 :pattern ( ($generated@@29 ($generated@@30 $generated@@23 $generated@@36)))
))))
(assert (forall (($generated@@38 T@U) ($generated@@39 T@U) ) (! (= ($generated@@37 $generated@@23 $generated@@38 $generated@@32 $generated@@39) ($generated@@37 $generated@@23 $generated@@38 $generated@@24 $generated@@39))
 :pattern ( ($generated@@37 $generated@@23 $generated@@38 $generated@@32 $generated@@39))
 :pattern ( ($generated@@37 $generated@@23 $generated@@38 $generated@@24 $generated@@39))
)))
(assert  (=> (<= 0 $generated@@28) (forall (($generated@@40 T@U) ($generated@@41 Int) ) (!  (=> (or ($generated@@33 $generated@@40 $generated@@41) (and (< 0 $generated@@28) (and (or (not (= $generated@@40 $generated@@25)) (not true)) ($generated@@22 $generated@@23 $generated@@40 $generated@@32)))) (= ($generated@@35 $generated@@40 $generated@@41) $generated@@41))
 :pattern ( ($generated@@35 $generated@@40 $generated@@41))
))))
(assert  (and (and (and (and (and (and (forall (($generated@@50 T@T) ($generated@@51 T@T) ($generated@@52 T@U) ($generated@@53 T@U) ($generated@@54 T@U) ) (! (= ($generated@@43 $generated@@50 $generated@@51 ($generated@@47 $generated@@50 $generated@@51 $generated@@53 $generated@@54 $generated@@52) $generated@@54) $generated@@52)
 :weight 0
)) (forall (($generated@@55 T@T) ($generated@@56 T@T) ($generated@@57 T@U) ($generated@@58 T@U) ($generated@@59 T@U) ($generated@@60 T@U) ) (!  (or (= $generated@@59 $generated@@60) (= ($generated@@43 $generated@@55 $generated@@56 ($generated@@47 $generated@@55 $generated@@56 $generated@@58 $generated@@59 $generated@@57) $generated@@60) ($generated@@43 $generated@@55 $generated@@56 $generated@@58 $generated@@60)))
 :weight 0
))) (= ($generated@@5 $generated@@44) 4)) (= ($generated@@5 $generated@@45) 5)) (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (= ($generated@@5 ($generated@@46 $generated@@61 $generated@@62)) 6))) (forall (($generated@@63 T@T) ($generated@@64 T@T) ) (! (= ($generated@@48 ($generated@@46 $generated@@63 $generated@@64)) $generated@@63)
 :pattern ( ($generated@@46 $generated@@63 $generated@@64))
))) (forall (($generated@@65 T@T) ($generated@@66 T@T) ) (! (= ($generated@@49 ($generated@@46 $generated@@65 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@46 $generated@@65 $generated@@66))
))))
(assert (forall (($generated@@67 T@U) ($generated@@68 T@U) ) (! (= ($generated@@37 $generated@@23 $generated@@67 $generated@@24 $generated@@68)  (or (= $generated@@67 $generated@@25) ($generated@@10 ($generated@@42 $generated@@6 ($generated@@43 $generated@@44 $generated@@45 ($generated@@43 $generated@@23 ($generated@@46 $generated@@44 $generated@@45) $generated@@68 $generated@@67) $generated@@1)))))
 :pattern ( ($generated@@37 $generated@@23 $generated@@67 $generated@@24 $generated@@68))
)))
(assert (forall (($generated@@69 Int) ) (! (= ($generated@@34 $generated@@69) $generated@@69)
 :pattern ( ($generated@@34 $generated@@69))
)))
(assert (forall (($generated@@70 T@U) ($generated@@71 T@T) ) (! (= ($generated@@30 $generated@@71 $generated@@70) $generated@@70)
 :pattern ( ($generated@@30 $generated@@71 $generated@@70))
)))
(assert (forall (($generated@@73 T@U) ($generated@@74 T@T) ) (! (= ($generated@@72 $generated@@74 ($generated@@42 $generated@@74 $generated@@73)) $generated@@73)
 :pattern ( ($generated@@42 $generated@@74 $generated@@73))
)))
(assert  (=> (<= 0 $generated@@28) (forall (($generated@@75 T@U) ($generated@@76 Int) ) (!  (=> (or ($generated@@33 $generated@@75 ($generated@@34 $generated@@76)) (and (< 0 $generated@@28) (and (or (not (= $generated@@75 $generated@@25)) (not true)) ($generated@@22 $generated@@23 $generated@@75 $generated@@32)))) (= ($generated@@35 $generated@@75 ($generated@@34 $generated@@76)) ($generated@@34 $generated@@76)))
 :weight 3
 :pattern ( ($generated@@35 $generated@@75 ($generated@@34 $generated@@76)))
))))
(assert (forall (($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@T) ) (! (= ($generated@@77 ($generated@@72 $generated@@81 $generated@@78) $generated@@79 $generated@@80) ($generated@@37 $generated@@81 $generated@@78 $generated@@79 $generated@@80))
 :pattern ( ($generated@@77 ($generated@@72 $generated@@81 $generated@@78) $generated@@79 $generated@@80))
)))
(assert (forall (($generated@@82 T@U) ) (! (= ($generated@@22 $generated@@23 $generated@@82 $generated@@32)  (and ($generated@@22 $generated@@23 $generated@@82 $generated@@24) (or (not (= $generated@@82 $generated@@25)) (not true))))
 :pattern ( ($generated@@22 $generated@@23 $generated@@82 $generated@@32))
 :pattern ( ($generated@@22 $generated@@23 $generated@@82 $generated@@24))
)))
(assert (forall (($generated@@83 T@U) ($generated@@84 T@T) ) (! (= ($generated@@42 $generated@@84 ($generated@@72 $generated@@84 $generated@@83)) $generated@@83)
 :pattern ( ($generated@@72 $generated@@84 $generated@@83))
)))
(assert  (and (forall (($generated@@88 T@T) ($generated@@89 T@T) ($generated@@90 T@T) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (! (= ($generated@@85 $generated@@88 $generated@@89 $generated@@90 ($generated@@87 $generated@@88 $generated@@89 $generated@@90 $generated@@92 $generated@@93 $generated@@94 $generated@@91) $generated@@93 $generated@@94) $generated@@91)
 :weight 0
)) (and (forall (($generated@@95 T@T) ($generated@@96 T@T) ($generated@@97 T@T) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ) (!  (or (= $generated@@100 $generated@@102) (= ($generated@@85 $generated@@95 $generated@@96 $generated@@97 ($generated@@87 $generated@@95 $generated@@96 $generated@@97 $generated@@99 $generated@@100 $generated@@101 $generated@@98) $generated@@102 $generated@@103) ($generated@@85 $generated@@95 $generated@@96 $generated@@97 $generated@@99 $generated@@102 $generated@@103)))
 :weight 0
)) (forall (($generated@@104 T@T) ($generated@@105 T@T) ($generated@@106 T@T) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ) (!  (or (= $generated@@110 $generated@@112) (= ($generated@@85 $generated@@104 $generated@@105 $generated@@106 ($generated@@87 $generated@@104 $generated@@105 $generated@@106 $generated@@108 $generated@@109 $generated@@110 $generated@@107) $generated@@111 $generated@@112) ($generated@@85 $generated@@104 $generated@@105 $generated@@106 $generated@@108 $generated@@111 $generated@@112)))
 :weight 0
)))))
(assert (forall (($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 Bool) ($generated@@117 T@U) ($generated@@118 T@U) ) (! (= ($generated@@10 ($generated@@85 $generated@@23 $generated@@44 $generated@@6 ($generated@@86 $generated@@113 $generated@@114 $generated@@115 $generated@@116) $generated@@117 $generated@@118))  (=> (and (or (not (= $generated@@117 $generated@@113)) (not true)) ($generated@@10 ($generated@@42 $generated@@6 ($generated@@43 $generated@@44 $generated@@45 ($generated@@43 $generated@@23 ($generated@@46 $generated@@44 $generated@@45) $generated@@114 $generated@@117) $generated@@115)))) $generated@@116))
 :pattern ( ($generated@@85 $generated@@23 $generated@@44 $generated@@6 ($generated@@86 $generated@@113 $generated@@114 $generated@@115 $generated@@116) $generated@@117 $generated@@118))
)))
(assert  (=> (<= 1 $generated@@28) (forall (($generated@@119 T@U) ) (!  (=> (or ($generated@@31 $generated@@119) (and (< 1 $generated@@28) ($generated@@22 $generated@@23 $generated@@119 $generated@@32))) (and ($generated@@33 $generated@@119 ($generated@@34 2)) (= ($generated@@29 $generated@@119) ($generated@@35 $generated@@119 ($generated@@34 2)))))
 :pattern ( ($generated@@29 $generated@@119))
))))
(assert (= ($generated@@21 $generated@@32) $generated@@2))
(assert (= ($generated@@120 $generated@@32) $generated@@4))
(assert (= ($generated@@21 $generated@@24) $generated@@3))
(assert (= ($generated@@120 $generated@@24) $generated@@4))
(assert  (=> (<= 0 $generated@@28) (forall (($generated@@121 T@U) ($generated@@122 Int) ) (!  (=> (or ($generated@@33 ($generated@@30 $generated@@23 $generated@@121) ($generated@@34 $generated@@122)) (and (< 0 $generated@@28) (and (or (not (= $generated@@121 $generated@@25)) (not true)) ($generated@@22 $generated@@23 $generated@@121 $generated@@32)))) (= ($generated@@35 ($generated@@30 $generated@@23 $generated@@121) ($generated@@34 $generated@@122)) ($generated@@34 $generated@@122)))
 :weight 3
 :pattern ( ($generated@@35 ($generated@@30 $generated@@23 $generated@@121) ($generated@@34 $generated@@122)))
))))
(assert (forall (($generated@@123 Int) ) (! (= ($generated@@72 $generated@@7 ($generated@@11 ($generated@@34 $generated@@123))) ($generated@@30 $generated@@45 ($generated@@72 $generated@@7 ($generated@@11 $generated@@123))))
 :pattern ( ($generated@@72 $generated@@7 ($generated@@11 ($generated@@34 $generated@@123))))
)))
(assert (forall (($generated@@124 T@U) ($generated@@125 T@T) ) (! (= ($generated@@72 $generated@@125 ($generated@@30 $generated@@125 $generated@@124)) ($generated@@30 $generated@@45 ($generated@@72 $generated@@125 $generated@@124)))
 :pattern ( ($generated@@72 $generated@@125 ($generated@@30 $generated@@125 $generated@@124)))
)))
(assert (forall (($generated@@126 T@U) ($generated@@127 T@U) ) (! ($generated@@37 $generated@@7 $generated@@127 $generated $generated@@126)
 :pattern ( ($generated@@37 $generated@@7 $generated@@127 $generated $generated@@126))
)))
(assert (forall (($generated@@128 T@U) ) (! ($generated@@22 $generated@@7 $generated@@128 $generated)
 :pattern ( ($generated@@22 $generated@@7 $generated@@128 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@129 () T@U)
(declare-fun $generated@@130 () T@U)
(declare-fun $generated@@131 () T@U)
(declare-fun $generated@@132 (T@U) Bool)
(declare-fun $generated@@133 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 5) (let (($generated@@134  (=> (= (ControlFlow 0 3) (- 0 2)) (or (not (= $generated@@129 $generated@@25)) (not true)))))
(let (($generated@@135 true))
(let (($generated@@136  (=> (= $generated@@130 ($generated@@86 $generated@@25 $generated@@131 $generated@@1 false)) (and (=> (= (ControlFlow 0 4) 1) $generated@@135) (=> (= (ControlFlow 0 4) 3) $generated@@134)))))
(let (($generated@@137  (=> (and (and (and ($generated@@132 $generated@@131) ($generated@@133 $generated@@131)) ($generated@@22 $generated@@23 $generated@@129 $generated@@32)) (and (= 1 $generated@@28) (= (ControlFlow 0 5) 4))) $generated@@136)))
$generated@@137)))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
