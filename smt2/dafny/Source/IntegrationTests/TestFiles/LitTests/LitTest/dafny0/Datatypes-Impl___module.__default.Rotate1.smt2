(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 (T@T) Int)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 (Bool) T@U)
(declare-fun $generated@@11 (T@U) Bool)
(declare-fun $generated@@12 (Int) T@U)
(declare-fun $generated@@13 (T@U) Int)
(declare-fun $generated@@14 (Real) T@U)
(declare-fun $generated@@15 (T@U) Real)
(declare-fun $generated@@22 (T@U) T@U)
(declare-fun $generated@@23 (Int Int Int) T@U)
(declare-fun $generated@@24 (T@U) T@U)
(declare-fun $generated@@28 (T@U) Int)
(declare-fun $generated@@32 (T@U) Int)
(declare-fun $generated@@36 (T@U) Int)
(declare-fun $generated@@40 () T@U)
(declare-fun $generated@@41 (T@T T@U T@U) Bool)
(declare-fun $generated@@42 () T@T)
(declare-fun $generated@@43 () T@U)
(declare-fun $generated@@47 (T@T T@U) T@U)
(declare-fun $generated@@50 (T@U) Bool)
(declare-fun $generated@@52 (T@U) Bool)
(declare-fun $generated@@54 (T@T T@U) T@U)
(declare-fun $generated@@55 (T@T T@U) T@U)
(declare-fun $generated@@63 (T@U) Bool)
(declare-fun $generated@@68 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@69 () T@T)
(declare-fun $generated@@70 () T@T)
(declare-fun $generated@@71 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@72 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@73 () T@T)
(declare-fun $generated@@74 (T@T T@T) T@T)
(declare-fun $generated@@75 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@76 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@77 (T@T) T@T)
(declare-fun $generated@@78 (T@T) T@T)
(declare-fun $generated@@127 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@128 (T@U) Bool)
(declare-fun $generated@@137 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@6 $generated@@7) 0) (= ($generated@@6 $generated@@8) 1)) (= ($generated@@6 $generated@@9) 2)) (forall (($generated@@16 Bool) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Int) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Real) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5)
)
(assert (= ($generated@@22 $generated) $generated@@0))
(assert (forall (($generated@@25 Int) ($generated@@26 Int) ($generated@@27 Int) ) (! (= ($generated@@24 ($generated@@23 $generated@@25 $generated@@26 $generated@@27)) $generated@@3)
 :pattern ( ($generated@@23 $generated@@25 $generated@@26 $generated@@27))
)))
(assert (forall (($generated@@29 Int) ($generated@@30 Int) ($generated@@31 Int) ) (! (= ($generated@@28 ($generated@@23 $generated@@29 $generated@@30 $generated@@31)) $generated@@29)
 :pattern ( ($generated@@23 $generated@@29 $generated@@30 $generated@@31))
)))
(assert (forall (($generated@@33 Int) ($generated@@34 Int) ($generated@@35 Int) ) (! (= ($generated@@32 ($generated@@23 $generated@@33 $generated@@34 $generated@@35)) $generated@@34)
 :pattern ( ($generated@@23 $generated@@33 $generated@@34 $generated@@35))
)))
(assert (forall (($generated@@37 Int) ($generated@@38 Int) ($generated@@39 Int) ) (! (= ($generated@@36 ($generated@@23 $generated@@37 $generated@@38 $generated@@39)) $generated@@39)
 :pattern ( ($generated@@23 $generated@@37 $generated@@38 $generated@@39))
)))
(assert (= ($generated@@24 $generated@@40) $generated@@4))
(assert (= ($generated@@6 $generated@@42) 3))
(assert ($generated@@41 $generated@@42 $generated@@40 $generated@@43))
(assert (forall (($generated@@44 Int) ($generated@@45 Int) ($generated@@46 Int) ) (! (= ($generated@@41 $generated@@42 ($generated@@23 $generated@@44 $generated@@45 $generated@@46) $generated@@43)  (and (and ($generated@@41 $generated@@8 ($generated@@12 $generated@@44) $generated) ($generated@@41 $generated@@8 ($generated@@12 $generated@@45) $generated)) ($generated@@41 $generated@@8 ($generated@@12 $generated@@46) $generated)))
 :pattern ( ($generated@@41 $generated@@42 ($generated@@23 $generated@@44 $generated@@45 $generated@@46) $generated@@43))
)))
(assert (forall (($generated@@48 T@U) ($generated@@49 T@T) ) (! (= ($generated@@47 $generated@@49 $generated@@48) $generated@@48)
 :pattern ( ($generated@@47 $generated@@49 $generated@@48))
)))
(assert (forall (($generated@@51 T@U) ) (! (= ($generated@@50 $generated@@51) (= ($generated@@24 $generated@@51) $generated@@3))
 :pattern ( ($generated@@50 $generated@@51))
)))
(assert (forall (($generated@@53 T@U) ) (! (= ($generated@@52 $generated@@53) (= ($generated@@24 $generated@@53) $generated@@4))
 :pattern ( ($generated@@52 $generated@@53))
)))
(assert (forall (($generated@@56 T@U) ($generated@@57 T@T) ) (! (= ($generated@@55 $generated@@57 ($generated@@54 $generated@@57 $generated@@56)) $generated@@56)
 :pattern ( ($generated@@54 $generated@@57 $generated@@56))
)))
(assert (forall (($generated@@58 T@U) ) (!  (=> ($generated@@50 $generated@@58) (exists (($generated@@59 Int) ($generated@@60 Int) ($generated@@61 Int) ) (= $generated@@58 ($generated@@23 $generated@@59 $generated@@60 $generated@@61))))
 :pattern ( ($generated@@50 $generated@@58))
)))
(assert (forall (($generated@@62 T@U) ) (!  (=> ($generated@@52 $generated@@62) (= $generated@@62 $generated@@40))
 :pattern ( ($generated@@52 $generated@@62))
)))
(assert (forall (($generated@@64 T@U) ) (!  (=> ($generated@@63 $generated@@64) (or ($generated@@50 $generated@@64) ($generated@@52 $generated@@64)))
 :pattern ( ($generated@@63 $generated@@64))
)))
(assert (forall (($generated@@65 T@U) ) (!  (=> ($generated@@41 $generated@@42 $generated@@65 $generated@@43) (or ($generated@@50 $generated@@65) ($generated@@52 $generated@@65)))
 :pattern ( ($generated@@52 $generated@@65) ($generated@@41 $generated@@42 $generated@@65 $generated@@43))
 :pattern ( ($generated@@50 $generated@@65) ($generated@@41 $generated@@42 $generated@@65 $generated@@43))
)))
(assert (forall (($generated@@66 T@U) ($generated@@67 T@T) ) (! (= ($generated@@54 $generated@@67 ($generated@@55 $generated@@67 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@55 $generated@@67 $generated@@66))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@79 T@T) ($generated@@80 T@T) ($generated@@81 T@T) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ) (! (= ($generated@@68 $generated@@79 $generated@@80 $generated@@81 ($generated@@75 $generated@@79 $generated@@80 $generated@@81 $generated@@83 $generated@@84 $generated@@85 $generated@@82) $generated@@84 $generated@@85) $generated@@82)
 :weight 0
)) (and (forall (($generated@@86 T@T) ($generated@@87 T@T) ($generated@@88 T@T) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (!  (or (= $generated@@91 $generated@@93) (= ($generated@@68 $generated@@86 $generated@@87 $generated@@88 ($generated@@75 $generated@@86 $generated@@87 $generated@@88 $generated@@90 $generated@@91 $generated@@92 $generated@@89) $generated@@93 $generated@@94) ($generated@@68 $generated@@86 $generated@@87 $generated@@88 $generated@@90 $generated@@93 $generated@@94)))
 :weight 0
)) (forall (($generated@@95 T@T) ($generated@@96 T@T) ($generated@@97 T@T) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ) (!  (or (= $generated@@101 $generated@@103) (= ($generated@@68 $generated@@95 $generated@@96 $generated@@97 ($generated@@75 $generated@@95 $generated@@96 $generated@@97 $generated@@99 $generated@@100 $generated@@101 $generated@@98) $generated@@102 $generated@@103) ($generated@@68 $generated@@95 $generated@@96 $generated@@97 $generated@@99 $generated@@102 $generated@@103)))
 :weight 0
)))) (= ($generated@@6 $generated@@69) 4)) (= ($generated@@6 $generated@@70) 5)) (forall (($generated@@104 T@T) ($generated@@105 T@T) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ) (! (= ($generated@@72 $generated@@104 $generated@@105 ($generated@@76 $generated@@104 $generated@@105 $generated@@107 $generated@@108 $generated@@106) $generated@@108) $generated@@106)
 :weight 0
))) (forall (($generated@@109 T@T) ($generated@@110 T@T) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ) (!  (or (= $generated@@113 $generated@@114) (= ($generated@@72 $generated@@109 $generated@@110 ($generated@@76 $generated@@109 $generated@@110 $generated@@112 $generated@@113 $generated@@111) $generated@@114) ($generated@@72 $generated@@109 $generated@@110 $generated@@112 $generated@@114)))
 :weight 0
))) (= ($generated@@6 $generated@@73) 6)) (forall (($generated@@115 T@T) ($generated@@116 T@T) ) (= ($generated@@6 ($generated@@74 $generated@@115 $generated@@116)) 7))) (forall (($generated@@117 T@T) ($generated@@118 T@T) ) (! (= ($generated@@77 ($generated@@74 $generated@@117 $generated@@118)) $generated@@117)
 :pattern ( ($generated@@74 $generated@@117 $generated@@118))
))) (forall (($generated@@119 T@T) ($generated@@120 T@T) ) (! (= ($generated@@78 ($generated@@74 $generated@@119 $generated@@120)) $generated@@120)
 :pattern ( ($generated@@74 $generated@@119 $generated@@120))
))))
(assert (forall (($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 Bool) ($generated@@125 T@U) ($generated@@126 T@U) ) (! (= ($generated@@11 ($generated@@68 $generated@@69 $generated@@70 $generated@@7 ($generated@@71 $generated@@121 $generated@@122 $generated@@123 $generated@@124) $generated@@125 $generated@@126))  (=> (and (or (not (= $generated@@125 $generated@@121)) (not true)) ($generated@@11 ($generated@@54 $generated@@7 ($generated@@72 $generated@@70 $generated@@73 ($generated@@72 $generated@@69 ($generated@@74 $generated@@70 $generated@@73) $generated@@122 $generated@@125) $generated@@123)))) $generated@@124))
 :pattern ( ($generated@@68 $generated@@69 $generated@@70 $generated@@7 ($generated@@71 $generated@@121 $generated@@122 $generated@@123 $generated@@124) $generated@@125 $generated@@126))
)))
(assert (forall (($generated@@129 T@U) ($generated@@130 T@U) ) (!  (=> (and ($generated@@128 $generated@@130) (and ($generated@@50 $generated@@129) ($generated@@127 $generated@@42 $generated@@129 $generated@@43 $generated@@130))) ($generated@@127 $generated@@8 ($generated@@12 ($generated@@28 $generated@@129)) $generated $generated@@130))
 :pattern ( ($generated@@127 $generated@@8 ($generated@@12 ($generated@@28 $generated@@129)) $generated $generated@@130))
)))
(assert (forall (($generated@@131 T@U) ($generated@@132 T@U) ) (!  (=> (and ($generated@@128 $generated@@132) (and ($generated@@50 $generated@@131) ($generated@@127 $generated@@42 $generated@@131 $generated@@43 $generated@@132))) ($generated@@127 $generated@@8 ($generated@@12 ($generated@@32 $generated@@131)) $generated $generated@@132))
 :pattern ( ($generated@@127 $generated@@8 ($generated@@12 ($generated@@32 $generated@@131)) $generated $generated@@132))
)))
(assert (forall (($generated@@133 T@U) ($generated@@134 T@U) ) (!  (=> (and ($generated@@128 $generated@@134) (and ($generated@@50 $generated@@133) ($generated@@127 $generated@@42 $generated@@133 $generated@@43 $generated@@134))) ($generated@@127 $generated@@8 ($generated@@12 ($generated@@36 $generated@@133)) $generated $generated@@134))
 :pattern ( ($generated@@127 $generated@@8 ($generated@@12 ($generated@@36 $generated@@133)) $generated $generated@@134))
)))
(assert (forall (($generated@@135 T@U) ($generated@@136 T@U) ) (!  (=> (and ($generated@@128 $generated@@136) ($generated@@41 $generated@@42 $generated@@135 $generated@@43)) ($generated@@127 $generated@@42 $generated@@135 $generated@@43 $generated@@136))
 :pattern ( ($generated@@127 $generated@@42 $generated@@135 $generated@@43 $generated@@136))
)))
(assert (= ($generated@@22 $generated@@43) $generated@@2))
(assert (= ($generated@@137 $generated@@43) $generated@@5))
(assert (= $generated@@40 ($generated@@47 $generated@@42 $generated@@40)))
(assert (forall (($generated@@138 T@U) ($generated@@139 T@T) ) (! (= ($generated@@55 $generated@@139 ($generated@@47 $generated@@139 $generated@@138)) ($generated@@47 $generated@@73 ($generated@@55 $generated@@139 $generated@@138)))
 :pattern ( ($generated@@55 $generated@@139 ($generated@@47 $generated@@139 $generated@@138)))
)))
(assert (forall (($generated@@140 T@U) ($generated@@141 T@U) ) (! ($generated@@127 $generated@@8 $generated@@141 $generated $generated@@140)
 :pattern ( ($generated@@127 $generated@@8 $generated@@141 $generated $generated@@140))
)))
(assert (forall (($generated@@142 T@U) ) (! ($generated@@41 $generated@@8 $generated@@142 $generated)
 :pattern ( ($generated@@41 $generated@@8 $generated@@142 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@143 () T@U)
(declare-fun $generated@@144 () T@U)
(declare-fun $generated@@145 () T@U)
(declare-fun $generated@@146 () T@U)
(declare-fun $generated@@147 (T@U) Bool)
(declare-fun $generated@@148 () T@U)
(declare-fun $generated@@149 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 12) (let (($generated@@150  (=> (and (and (not ($generated@@50 $generated@@143)) (not ($generated@@11 ($generated@@47 $generated@@7 ($generated@@10 true))))) (= (ControlFlow 0 10) (- 0 9))) false)))
(let (($generated@@151  (and (=> (= (ControlFlow 0 6) (- 0 8)) ($generated@@50 $generated@@143)) (=> ($generated@@50 $generated@@143) (and (=> (= (ControlFlow 0 6) (- 0 7)) ($generated@@50 $generated@@143)) (=> ($generated@@50 $generated@@143) (=> (= (ControlFlow 0 6) (- 0 5)) ($generated@@50 $generated@@143))))))))
(let (($generated@@152  (=> ($generated@@50 $generated@@143) (and (=> (= (ControlFlow 0 2) (- 0 4)) ($generated@@50 $generated@@143)) (=> ($generated@@50 $generated@@143) (and (=> (= (ControlFlow 0 2) (- 0 3)) ($generated@@50 $generated@@143)) (=> ($generated@@50 $generated@@143) (=> (= (ControlFlow 0 2) (- 0 1)) ($generated@@50 $generated@@143)))))))))
(let (($generated@@153  (=> (= $generated@@144 ($generated@@71 $generated@@145 $generated@@146 $generated@@1 false)) (and (and (=> (= (ControlFlow 0 11) 2) $generated@@152) (=> (= (ControlFlow 0 11) 6) $generated@@151)) (=> (= (ControlFlow 0 11) 10) $generated@@150)))))
(let (($generated@@154  (=> (and ($generated@@128 $generated@@146) ($generated@@147 $generated@@146)) (=> (and (and (and ($generated@@41 $generated@@42 $generated@@143 $generated@@43) ($generated@@127 $generated@@42 $generated@@143 $generated@@43 $generated@@146)) ($generated@@63 $generated@@143)) (and (and ($generated@@41 $generated@@42 $generated@@148 $generated@@43) ($generated@@127 $generated@@42 $generated@@148 $generated@@43 $generated@@146)) (and (= 1 $generated@@149) (= (ControlFlow 0 12) 11)))) $generated@@153))))
$generated@@154))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 6) (- 8))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
