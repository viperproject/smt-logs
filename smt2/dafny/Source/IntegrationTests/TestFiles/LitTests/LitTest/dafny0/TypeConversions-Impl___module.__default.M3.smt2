(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () Int)
(declare-fun $generated@@0 (Int Int Real Int Real (_ BitVec 67) (_ BitVec 32) (_ BitVec 7) Int) Bool)
(declare-fun $generated@@1 (Int) Int)
(declare-fun $generated@@2 (Real) Real)
(declare-fun $generated@@3 (T@U) (_ BitVec 67))
(declare-fun $generated@@4 (T@T T@U) T@U)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (T@U) (_ BitVec 32))
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (T@U) (_ BitVec 7))
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 (Int Int Real Int Real (_ BitVec 67) (_ BitVec 32) (_ BitVec 7) Int) Bool)
(declare-fun $generated@@11 (Int Int) Int)
(declare-fun $generated@@12 (T@U) Bool)
(declare-fun $generated@@13 () T@T)
(declare-fun $generated@@14 (Bool) T@U)
(declare-fun $generated@@15 (T@T) Int)
(declare-fun $generated@@16 () T@T)
(declare-fun $generated@@17 () T@T)
(declare-fun $generated@@18 (Int) T@U)
(declare-fun $generated@@19 (T@U) Int)
(declare-fun $generated@@20 (Real) T@U)
(declare-fun $generated@@21 (T@U) Real)
(declare-fun $generated@@22 ((_ BitVec 67)) T@U)
(declare-fun $generated@@23 ((_ BitVec 32)) T@U)
(declare-fun $generated@@24 ((_ BitVec 7)) T@U)
(declare-fun $generated@@50 (T@T T@U) T@U)
(declare-fun $generated@@51 (T@T T@U) T@U)
(declare-fun $generated@@54 ((_ BitVec 7)) Int)
(declare-fun $generated@@56 ((_ BitVec 32)) Int)
(declare-fun $generated@@58 ((_ BitVec 67)) Int)
(declare-fun $generated@@69 (Int) Real)
(declare-fun $generated@@73 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@74 () T@T)
(declare-fun $generated@@75 () T@T)
(declare-fun $generated@@76 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@77 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@78 () T@T)
(declare-fun $generated@@79 (T@T T@T) T@T)
(declare-fun $generated@@80 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@81 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@82 (T@T) T@T)
(declare-fun $generated@@83 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@15 $generated@@13) 0) (= ($generated@@15 $generated@@16) 1)) (= ($generated@@15 $generated@@17) 2)) (forall (($generated@@25 Bool) ) (! (= ($generated@@12 ($generated@@14 $generated@@25)) $generated@@25)
 :pattern ( ($generated@@14 $generated@@25))
))) (forall (($generated@@26 T@U) ) (! (= ($generated@@14 ($generated@@12 $generated@@26)) $generated@@26)
 :pattern ( ($generated@@12 $generated@@26))
))) (forall (($generated@@27 Int) ) (! (= ($generated@@19 ($generated@@18 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@18 $generated@@27))
))) (forall (($generated@@28 T@U) ) (! (= ($generated@@18 ($generated@@19 $generated@@28)) $generated@@28)
 :pattern ( ($generated@@19 $generated@@28))
))) (forall (($generated@@29 Real) ) (! (= ($generated@@21 ($generated@@20 $generated@@29)) $generated@@29)
 :pattern ( ($generated@@20 $generated@@29))
))) (forall (($generated@@30 T@U) ) (! (= ($generated@@20 ($generated@@21 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@21 $generated@@30))
))) (= ($generated@@15 $generated@@5) 3)) (forall (($generated@@31 (_ BitVec 67)) ) (! (= ($generated@@3 ($generated@@22 $generated@@31)) $generated@@31)
 :pattern ( ($generated@@22 $generated@@31))
))) (forall (($generated@@32 T@U) ) (! (= ($generated@@22 ($generated@@3 $generated@@32)) $generated@@32)
 :pattern ( ($generated@@3 $generated@@32))
))) (= ($generated@@15 $generated@@7) 4)) (forall (($generated@@33 (_ BitVec 32)) ) (! (= ($generated@@6 ($generated@@23 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@23 $generated@@33))
))) (forall (($generated@@34 T@U) ) (! (= ($generated@@23 ($generated@@6 $generated@@34)) $generated@@34)
 :pattern ( ($generated@@6 $generated@@34))
))) (= ($generated@@15 $generated@@9) 5)) (forall (($generated@@35 (_ BitVec 7)) ) (! (= ($generated@@8 ($generated@@24 $generated@@35)) $generated@@35)
 :pattern ( ($generated@@24 $generated@@35))
))) (forall (($generated@@36 T@U) ) (! (= ($generated@@24 ($generated@@8 $generated@@36)) $generated@@36)
 :pattern ( ($generated@@8 $generated@@36))
))))
(assert  (=> (<= 1 $generated) (forall (($generated@@37 Int) ($generated@@38 Int) ($generated@@39 Real) ($generated@@40 Int) ($generated@@41 Real) ($generated@@42 T@U) ($generated@@43 T@U) ($generated@@44 T@U) ($generated@@45 Int) ) (!  (=> (or ($generated@@10 ($generated@@1 $generated@@37) ($generated@@1 $generated@@38) ($generated@@2 $generated@@39) ($generated@@1 $generated@@40) ($generated@@2 $generated@@41) ($generated@@3 ($generated@@4 $generated@@5 $generated@@42)) ($generated@@6 ($generated@@4 $generated@@7 $generated@@43)) ($generated@@8 ($generated@@4 $generated@@9 $generated@@44)) ($generated@@1 $generated@@45)) (and (< 1 $generated) (and (and (and (<= ($generated@@1 0) $generated@@38) (= ($generated@@11 $generated@@40 ($generated@@1 2)) ($generated@@1 0))) (and (<= ($generated@@2 (- 0.0 4.0)) $generated@@41) (< $generated@@41 300.0))) (= 0 $generated@@45)))) (= ($generated@@0 ($generated@@1 $generated@@37) ($generated@@1 $generated@@38) ($generated@@2 $generated@@39) ($generated@@1 $generated@@40) ($generated@@2 $generated@@41) ($generated@@3 ($generated@@4 $generated@@5 $generated@@42)) ($generated@@6 ($generated@@4 $generated@@7 $generated@@43)) ($generated@@8 ($generated@@4 $generated@@9 $generated@@44)) ($generated@@1 $generated@@45)) ($generated@@12 ($generated@@4 $generated@@13 ($generated@@14 true)))))
 :weight 3
 :pattern ( ($generated@@0 ($generated@@1 $generated@@37) ($generated@@1 $generated@@38) ($generated@@2 $generated@@39) ($generated@@1 $generated@@40) ($generated@@2 $generated@@41) ($generated@@3 ($generated@@4 $generated@@5 $generated@@42)) ($generated@@6 ($generated@@4 $generated@@7 $generated@@43)) ($generated@@8 ($generated@@4 $generated@@9 $generated@@44)) ($generated@@1 $generated@@45)))
))))
(assert (forall (($generated@@46 Int) ) (! (= ($generated@@1 $generated@@46) $generated@@46)
 :pattern ( ($generated@@1 $generated@@46))
)))
(assert (forall (($generated@@47 Real) ) (! (= ($generated@@2 $generated@@47) $generated@@47)
 :pattern ( ($generated@@2 $generated@@47))
)))
(assert (forall (($generated@@48 T@U) ($generated@@49 T@T) ) (! (= ($generated@@4 $generated@@49 $generated@@48) $generated@@48)
 :pattern ( ($generated@@4 $generated@@49 $generated@@48))
)))
(assert (forall (($generated@@52 T@U) ($generated@@53 T@T) ) (! (= ($generated@@51 $generated@@53 ($generated@@50 $generated@@53 $generated@@52)) $generated@@52)
 :pattern ( ($generated@@50 $generated@@53 $generated@@52))
)))
(assert (forall (($generated@@55 (_ BitVec 7)) ) (!  (and (and (<= 0 ($generated@@54 $generated@@55)) (< ($generated@@54 $generated@@55) 128)) (= ($generated@@54 $generated@@55) (bv2int $generated@@55)))
 :pattern ( ($generated@@54 $generated@@55))
)))
(assert (forall (($generated@@57 (_ BitVec 32)) ) (!  (and (and (<= 0 ($generated@@56 $generated@@57)) (< ($generated@@56 $generated@@57) 4294967296)) (= ($generated@@56 $generated@@57) (bv2int $generated@@57)))
 :pattern ( ($generated@@56 $generated@@57))
)))
(assert (forall (($generated@@59 (_ BitVec 67)) ) (!  (and (and (<= 0 ($generated@@58 $generated@@59)) (< ($generated@@58 $generated@@59) 147573952589676412928)) (= ($generated@@58 $generated@@59) (bv2int $generated@@59)))
 :pattern ( ($generated@@58 $generated@@59))
)))
(assert  (=> (<= 1 $generated) (forall (($generated@@60 Int) ($generated@@61 Int) ($generated@@62 Real) ($generated@@63 Int) ($generated@@64 Real) ($generated@@65 (_ BitVec 67)) ($generated@@66 (_ BitVec 32)) ($generated@@67 (_ BitVec 7)) ($generated@@68 Int) ) (!  (=> (or ($generated@@10 $generated@@60 $generated@@61 $generated@@62 $generated@@63 $generated@@64 $generated@@65 $generated@@66 $generated@@67 $generated@@68) (and (< 1 $generated) (and (and (and (<= ($generated@@1 0) $generated@@61) (= ($generated@@11 $generated@@63 ($generated@@1 2)) ($generated@@1 0))) (and (<= ($generated@@2 (- 0.0 4.0)) $generated@@64) (< $generated@@64 300.0))) (= 0 $generated@@68)))) (= ($generated@@0 $generated@@60 $generated@@61 $generated@@62 $generated@@63 $generated@@64 $generated@@65 $generated@@66 $generated@@67 $generated@@68) ($generated@@12 ($generated@@4 $generated@@13 ($generated@@14 true)))))
 :pattern ( ($generated@@0 $generated@@60 $generated@@61 $generated@@62 $generated@@63 $generated@@64 $generated@@65 $generated@@66 $generated@@67 $generated@@68))
))))
(assert (forall (($generated@@70 Int) ) (! (= ($generated@@69 $generated@@70) (to_real $generated@@70))
 :pattern ( ($generated@@69 $generated@@70))
)))
(assert (forall (($generated@@71 T@U) ($generated@@72 T@T) ) (! (= ($generated@@50 $generated@@72 ($generated@@51 $generated@@72 $generated@@71)) $generated@@71)
 :pattern ( ($generated@@51 $generated@@72 $generated@@71))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@84 T@T) ($generated@@85 T@T) ($generated@@86 T@T) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ) (! (= ($generated@@73 $generated@@84 $generated@@85 $generated@@86 ($generated@@80 $generated@@84 $generated@@85 $generated@@86 $generated@@88 $generated@@89 $generated@@90 $generated@@87) $generated@@89 $generated@@90) $generated@@87)
 :weight 0
)) (and (forall (($generated@@91 T@T) ($generated@@92 T@T) ($generated@@93 T@T) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ) (!  (or (= $generated@@96 $generated@@98) (= ($generated@@73 $generated@@91 $generated@@92 $generated@@93 ($generated@@80 $generated@@91 $generated@@92 $generated@@93 $generated@@95 $generated@@96 $generated@@97 $generated@@94) $generated@@98 $generated@@99) ($generated@@73 $generated@@91 $generated@@92 $generated@@93 $generated@@95 $generated@@98 $generated@@99)))
 :weight 0
)) (forall (($generated@@100 T@T) ($generated@@101 T@T) ($generated@@102 T@T) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ) (!  (or (= $generated@@106 $generated@@108) (= ($generated@@73 $generated@@100 $generated@@101 $generated@@102 ($generated@@80 $generated@@100 $generated@@101 $generated@@102 $generated@@104 $generated@@105 $generated@@106 $generated@@103) $generated@@107 $generated@@108) ($generated@@73 $generated@@100 $generated@@101 $generated@@102 $generated@@104 $generated@@107 $generated@@108)))
 :weight 0
)))) (= ($generated@@15 $generated@@74) 6)) (= ($generated@@15 $generated@@75) 7)) (forall (($generated@@109 T@T) ($generated@@110 T@T) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ) (! (= ($generated@@77 $generated@@109 $generated@@110 ($generated@@81 $generated@@109 $generated@@110 $generated@@112 $generated@@113 $generated@@111) $generated@@113) $generated@@111)
 :weight 0
))) (forall (($generated@@114 T@T) ($generated@@115 T@T) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ) (!  (or (= $generated@@118 $generated@@119) (= ($generated@@77 $generated@@114 $generated@@115 ($generated@@81 $generated@@114 $generated@@115 $generated@@117 $generated@@118 $generated@@116) $generated@@119) ($generated@@77 $generated@@114 $generated@@115 $generated@@117 $generated@@119)))
 :weight 0
))) (= ($generated@@15 $generated@@78) 8)) (forall (($generated@@120 T@T) ($generated@@121 T@T) ) (= ($generated@@15 ($generated@@79 $generated@@120 $generated@@121)) 9))) (forall (($generated@@122 T@T) ($generated@@123 T@T) ) (! (= ($generated@@82 ($generated@@79 $generated@@122 $generated@@123)) $generated@@122)
 :pattern ( ($generated@@79 $generated@@122 $generated@@123))
))) (forall (($generated@@124 T@T) ($generated@@125 T@T) ) (! (= ($generated@@83 ($generated@@79 $generated@@124 $generated@@125)) $generated@@125)
 :pattern ( ($generated@@79 $generated@@124 $generated@@125))
))))
(assert (forall (($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 Bool) ($generated@@130 T@U) ($generated@@131 T@U) ) (! (= ($generated@@12 ($generated@@73 $generated@@74 $generated@@75 $generated@@13 ($generated@@76 $generated@@126 $generated@@127 $generated@@128 $generated@@129) $generated@@130 $generated@@131))  (=> (and (or (not (= $generated@@130 $generated@@126)) (not true)) ($generated@@12 ($generated@@50 $generated@@13 ($generated@@77 $generated@@75 $generated@@78 ($generated@@77 $generated@@74 ($generated@@79 $generated@@75 $generated@@78) $generated@@127 $generated@@130) $generated@@128)))) $generated@@129))
 :pattern ( ($generated@@73 $generated@@74 $generated@@75 $generated@@13 ($generated@@76 $generated@@126 $generated@@127 $generated@@128 $generated@@129) $generated@@130 $generated@@131))
)))
(assert (forall (($generated@@132 Int) ($generated@@133 Int) ) (! (= ($generated@@11 $generated@@132 $generated@@133) (mod $generated@@132 $generated@@133))
 :pattern ( ($generated@@11 $generated@@132 $generated@@133))
)))
(assert (forall (($generated@@134 Int) ) (! (= ($generated@@51 $generated@@16 ($generated@@18 ($generated@@1 $generated@@134))) ($generated@@4 $generated@@78 ($generated@@51 $generated@@16 ($generated@@18 $generated@@134))))
 :pattern ( ($generated@@51 $generated@@16 ($generated@@18 ($generated@@1 $generated@@134))))
)))
(assert (forall (($generated@@135 Real) ) (! (= ($generated@@51 $generated@@17 ($generated@@20 ($generated@@2 $generated@@135))) ($generated@@4 $generated@@78 ($generated@@51 $generated@@17 ($generated@@20 $generated@@135))))
 :pattern ( ($generated@@51 $generated@@17 ($generated@@20 ($generated@@2 $generated@@135))))
)))
(assert (forall (($generated@@136 T@U) ($generated@@137 T@T) ) (! (= ($generated@@51 $generated@@137 ($generated@@4 $generated@@137 $generated@@136)) ($generated@@4 $generated@@78 ($generated@@51 $generated@@137 $generated@@136)))
 :pattern ( ($generated@@51 $generated@@137 ($generated@@4 $generated@@137 $generated@@136)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@138 () Int)
(declare-fun $generated@@139 () Int)
(declare-fun $generated@@140 () Real)
(declare-fun $generated@@141 () Int)
(declare-fun $generated@@142 () Real)
(declare-fun $generated@@143 () (_ BitVec 67))
(declare-fun $generated@@144 () (_ BitVec 32))
(declare-fun $generated@@145 () (_ BitVec 7))
(declare-fun $generated@@146 () Int)
(declare-fun $generated@@147 () Int)
(declare-fun $generated@@148 () Real)
(declare-fun $generated@@149 () Int)
(declare-fun $generated@@150 () Real)
(declare-fun $generated@@151 () Int)
(declare-fun $generated@@152 () Real)
(declare-fun $generated@@153 () Int)
(declare-fun $generated@@154 () Real)
(declare-fun $generated@@155 () Int)
(declare-fun $generated@@156 () Real)
(declare-fun $generated@@157 () T@U)
(declare-fun $generated@@158 () T@U)
(declare-fun $generated@@159 () T@U)
(declare-fun $generated@@160 () T@U)
(declare-fun $generated@@161 (T@U) Bool)
(declare-fun $generated@@162 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 15) (let (($generated@@163  (=> (= (ControlFlow 0 4) (- 0 3)) (=> ($generated@@10 $generated@@138 $generated@@139 $generated@@140 $generated@@141 $generated@@142 $generated@@143 $generated@@144 $generated@@145 $generated@@146) (or ($generated@@0 $generated@@138 $generated@@139 $generated@@140 $generated@@141 $generated@@142 $generated@@143 $generated@@144 $generated@@145 $generated@@146) ($generated@@12 ($generated@@4 $generated@@13 ($generated@@14 true))))))))
(let (($generated@@164  (and (=> (= (ControlFlow 0 5) (- 0 7)) (<= ($generated@@1 0) $generated@@147)) (and (=> (= (ControlFlow 0 5) (- 0 6)) (<= ($generated@@2 0.0) $generated@@148)) (=> (and (and (and (<= ($generated@@1 0) $generated@@147) (<= ($generated@@2 0.0) $generated@@148)) (= $generated@@140 $generated@@148)) (and (= $generated@@138 $generated@@147) (= (ControlFlow 0 5) 4))) $generated@@163)))))
(let (($generated@@165  (=> (and (< $generated@@147 ($generated@@1 0)) (= (ControlFlow 0 9) 5)) $generated@@164)))
(let (($generated@@166  (=> (and (<= ($generated@@1 0) $generated@@147) (= (ControlFlow 0 8) 5)) $generated@@164)))
(let (($generated@@167  (=> (and (and (= $generated@@149 0) (= $generated@@150 ($generated@@69 0))) (and (= $generated@@147 $generated@@149) (= $generated@@148 $generated@@150))) (and (=> (= (ControlFlow 0 13) 8) $generated@@166) (=> (= (ControlFlow 0 13) 9) $generated@@165)))))
(let (($generated@@168  (=> (and (and (= $generated@@151 ($generated@@54 $generated@@145)) (= $generated@@152 ($generated@@69 ($generated@@54 $generated@@145)))) (and (= $generated@@147 $generated@@151) (= $generated@@148 $generated@@152))) (and (=> (= (ControlFlow 0 12) 8) $generated@@166) (=> (= (ControlFlow 0 12) 9) $generated@@165)))))
(let (($generated@@169  (=> (and (and (= $generated@@153 ($generated@@56 $generated@@144)) (= $generated@@154 ($generated@@69 ($generated@@56 $generated@@144)))) (and (= $generated@@147 $generated@@153) (= $generated@@148 $generated@@154))) (and (=> (= (ControlFlow 0 11) 8) $generated@@166) (=> (= (ControlFlow 0 11) 9) $generated@@165)))))
(let (($generated@@170  (=> (and (and (= $generated@@155 ($generated@@58 $generated@@143)) (= $generated@@156 ($generated@@69 ($generated@@58 $generated@@143)))) (and (= $generated@@147 $generated@@155) (= $generated@@148 $generated@@156))) (and (=> (= (ControlFlow 0 10) 8) $generated@@166) (=> (= (ControlFlow 0 10) 9) $generated@@165)))))
(let (($generated@@171  (=> (and (and (and (and (not ($generated@@12 ($generated@@4 $generated@@13 ($generated@@14 true)))) (not ($generated@@12 ($generated@@4 $generated@@13 ($generated@@14 true))))) (not ($generated@@12 ($generated@@4 $generated@@13 ($generated@@14 true))))) (not ($generated@@12 ($generated@@4 $generated@@13 ($generated@@14 true))))) (= (ControlFlow 0 2) (- 0 1))) false)))
(let (($generated@@172  (=> (= $generated@@157 ($generated@@76 $generated@@158 $generated@@159 $generated@@160 false)) (and (and (and (and (=> (= (ControlFlow 0 14) 10) $generated@@170) (=> (= (ControlFlow 0 14) 11) $generated@@169)) (=> (= (ControlFlow 0 14) 12) $generated@@168)) (=> (= (ControlFlow 0 14) 13) $generated@@167)) (=> (= (ControlFlow 0 14) 2) $generated@@171)))))
(let (($generated@@173  (=> (and (and ($generated@@161 $generated@@159) ($generated@@162 $generated@@159)) (and (<= ($generated@@1 0) $generated@@139) (= ($generated@@11 $generated@@141 ($generated@@1 2)) ($generated@@1 0)))) (=> (and (and (and (<= ($generated@@2 (- 0.0 4.0)) $generated@@142) (< $generated@@142 300.0)) (= 0 $generated@@146)) (and (= 2 $generated) (= (ControlFlow 0 15) 14))) $generated@@172))))
$generated@@173))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
