(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U T@U) Bool)
(declare-fun $generated@@0 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@1 () T@T)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 (T@T T@T) T@T)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 (T@U) Bool)
(declare-fun $generated@@7 (T@T T@U) T@U)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (T@T) Int)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 () T@T)
(declare-fun $generated@@12 (Bool) T@U)
(declare-fun $generated@@13 (Int) T@U)
(declare-fun $generated@@14 (T@U) Int)
(declare-fun $generated@@15 (Real) T@U)
(declare-fun $generated@@16 (T@U) Real)
(declare-fun $generated@@17 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@18 (T@T) T@T)
(declare-fun $generated@@19 (T@T) T@T)
(declare-fun $generated@@46 (T@T T@U) T@U)
(declare-fun $generated@@54 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@55 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@56 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@9 $generated@@8) 0) (= ($generated@@9 $generated@@10) 1)) (= ($generated@@9 $generated@@11) 2)) (forall (($generated@@20 Bool) ) (! (= ($generated@@6 ($generated@@12 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@12 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@12 ($generated@@6 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@6 $generated@@21))
))) (forall (($generated@@22 Int) ) (! (= ($generated@@14 ($generated@@13 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@13 $generated@@22))
))) (forall (($generated@@23 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@14 $generated@@23))
))) (forall (($generated@@24 Real) ) (! (= ($generated@@16 ($generated@@15 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@15 $generated@@24))
))) (forall (($generated@@25 T@U) ) (! (= ($generated@@15 ($generated@@16 $generated@@25)) $generated@@25)
 :pattern ( ($generated@@16 $generated@@25))
))) (forall (($generated@@26 T@T) ($generated@@27 T@T) ($generated@@28 T@U) ($generated@@29 T@U) ($generated@@30 T@U) ) (! (= ($generated@@0 $generated@@26 $generated@@27 ($generated@@17 $generated@@26 $generated@@27 $generated@@29 $generated@@30 $generated@@28) $generated@@30) $generated@@28)
 :weight 0
))) (forall (($generated@@31 T@T) ($generated@@32 T@T) ($generated@@33 T@U) ($generated@@34 T@U) ($generated@@35 T@U) ($generated@@36 T@U) ) (!  (or (= $generated@@35 $generated@@36) (= ($generated@@0 $generated@@31 $generated@@32 ($generated@@17 $generated@@31 $generated@@32 $generated@@34 $generated@@35 $generated@@33) $generated@@36) ($generated@@0 $generated@@31 $generated@@32 $generated@@34 $generated@@36)))
 :weight 0
))) (= ($generated@@9 $generated@@1) 3)) (= ($generated@@9 $generated@@2) 4)) (= ($generated@@9 $generated@@3) 5)) (forall (($generated@@37 T@T) ($generated@@38 T@T) ) (= ($generated@@9 ($generated@@4 $generated@@37 $generated@@38)) 6))) (forall (($generated@@39 T@T) ($generated@@40 T@T) ) (! (= ($generated@@18 ($generated@@4 $generated@@39 $generated@@40)) $generated@@39)
 :pattern ( ($generated@@4 $generated@@39 $generated@@40))
))) (forall (($generated@@41 T@T) ($generated@@42 T@T) ) (! (= ($generated@@19 ($generated@@4 $generated@@41 $generated@@42)) $generated@@42)
 :pattern ( ($generated@@4 $generated@@41 $generated@@42))
))))
(assert (forall (($generated@@43 T@U) ($generated@@44 T@U) ) (!  (=> ($generated $generated@@43 $generated@@44) (forall (($generated@@45 T@U) ) (!  (=> ($generated@@6 ($generated@@7 $generated@@8 ($generated@@0 $generated@@1 $generated@@2 ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@43 $generated@@45) $generated@@5))) ($generated@@6 ($generated@@7 $generated@@8 ($generated@@0 $generated@@1 $generated@@2 ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@44 $generated@@45) $generated@@5))))
 :pattern ( ($generated@@0 $generated@@1 $generated@@2 ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@44 $generated@@45) $generated@@5))
)))
 :pattern ( ($generated $generated@@43 $generated@@44))
)))
(assert (forall (($generated@@47 T@U) ($generated@@48 T@T) ) (! (= ($generated@@46 $generated@@48 ($generated@@7 $generated@@48 $generated@@47)) $generated@@47)
 :pattern ( ($generated@@7 $generated@@48 $generated@@47))
)))
(assert (forall (($generated@@49 T@U) ($generated@@50 T@U) ($generated@@51 T@U) ) (!  (=> (or (not (= $generated@@49 $generated@@51)) (not true)) (=> (and ($generated $generated@@49 $generated@@50) ($generated $generated@@50 $generated@@51)) ($generated $generated@@49 $generated@@51)))
 :pattern ( ($generated $generated@@49 $generated@@50) ($generated $generated@@50 $generated@@51))
)))
(assert (forall (($generated@@52 T@U) ($generated@@53 T@T) ) (! (= ($generated@@7 $generated@@53 ($generated@@46 $generated@@53 $generated@@52)) $generated@@52)
 :pattern ( ($generated@@46 $generated@@53 $generated@@52))
)))
(assert  (and (forall (($generated@@57 T@T) ($generated@@58 T@T) ($generated@@59 T@T) ($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@U) ) (! (= ($generated@@54 $generated@@57 $generated@@58 $generated@@59 ($generated@@56 $generated@@57 $generated@@58 $generated@@59 $generated@@61 $generated@@62 $generated@@63 $generated@@60) $generated@@62 $generated@@63) $generated@@60)
 :weight 0
)) (and (forall (($generated@@64 T@T) ($generated@@65 T@T) ($generated@@66 T@T) ($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (!  (or (= $generated@@69 $generated@@71) (= ($generated@@54 $generated@@64 $generated@@65 $generated@@66 ($generated@@56 $generated@@64 $generated@@65 $generated@@66 $generated@@68 $generated@@69 $generated@@70 $generated@@67) $generated@@71 $generated@@72) ($generated@@54 $generated@@64 $generated@@65 $generated@@66 $generated@@68 $generated@@71 $generated@@72)))
 :weight 0
)) (forall (($generated@@73 T@T) ($generated@@74 T@T) ($generated@@75 T@T) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ) (!  (or (= $generated@@79 $generated@@81) (= ($generated@@54 $generated@@73 $generated@@74 $generated@@75 ($generated@@56 $generated@@73 $generated@@74 $generated@@75 $generated@@77 $generated@@78 $generated@@79 $generated@@76) $generated@@80 $generated@@81) ($generated@@54 $generated@@73 $generated@@74 $generated@@75 $generated@@77 $generated@@80 $generated@@81)))
 :weight 0
)))))
(assert (forall (($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 Bool) ($generated@@86 T@U) ($generated@@87 T@U) ) (! (= ($generated@@6 ($generated@@54 $generated@@3 $generated@@1 $generated@@8 ($generated@@55 $generated@@82 $generated@@83 $generated@@84 $generated@@85) $generated@@86 $generated@@87))  (=> (and (or (not (= $generated@@86 $generated@@82)) (not true)) ($generated@@6 ($generated@@7 $generated@@8 ($generated@@0 $generated@@1 $generated@@2 ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@83 $generated@@86) $generated@@84)))) $generated@@85))
 :pattern ( ($generated@@54 $generated@@3 $generated@@1 $generated@@8 ($generated@@55 $generated@@82 $generated@@83 $generated@@84 $generated@@85) $generated@@86 $generated@@87))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@88 () Bool)
(declare-fun $generated@@89 () Bool)
(declare-fun $generated@@90 (T@U) Bool)
(declare-fun $generated@@91 () T@U)
(declare-fun $generated@@92 (T@U) Bool)
(declare-fun $generated@@93 () T@U)
(declare-fun $generated@@94 () T@U)
(declare-fun $generated@@95 () Bool)
(declare-fun $generated@@96 () T@U)
(declare-fun $generated@@97 () T@U)
(declare-fun $generated@@98 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 29) (let (($generated@@99  (=> (= (ControlFlow 0 5) (- 0 4)) (or (forall (($generated@@100 Bool) )  (or $generated@@100 (not $generated@@100))) (or (not (= 1 1)) (not true))))))
(let (($generated@@101  (=> (and (forall (($generated@@102 Bool) )  (or $generated@@102 (not $generated@@102))) (= (ControlFlow 0 7) 5)) $generated@@99)))
(let (($generated@@103  (=> (and (not (forall (($generated@@104 Bool) )  (or $generated@@104 (not $generated@@104)))) (= (ControlFlow 0 6) 5)) $generated@@99)))
(let (($generated@@105  (=> $generated@@88 (and (=> (= (ControlFlow 0 9) 6) $generated@@103) (=> (= (ControlFlow 0 9) 7) $generated@@101)))))
(let (($generated@@106  (=> (not $generated@@88) (and (=> (= (ControlFlow 0 8) 6) $generated@@103) (=> (= (ControlFlow 0 8) 7) $generated@@101)))))
(let (($generated@@107  (and (=> (= (ControlFlow 0 10) 8) $generated@@106) (=> (= (ControlFlow 0 10) 9) $generated@@105))))
(let (($generated@@108 true))
(let (($generated@@109  (and (=> (= (ControlFlow 0 11) (- 0 12)) (or (forall (($generated@@110 Bool) )  (or $generated@@110 (not $generated@@110))) (or (not (= 3 3)) (not true)))) (=> (or (forall (($generated@@111 Bool) )  (or $generated@@111 (not $generated@@111))) (or (not (= 3 3)) (not true))) (and (=> (= (ControlFlow 0 11) 10) $generated@@107) (=> (= (ControlFlow 0 11) 3) $generated@@108))))))
(let (($generated@@112  (=> (and (forall (($generated@@113 Bool) )  (or $generated@@113 (not $generated@@113))) (= (ControlFlow 0 14) 11)) $generated@@109)))
(let (($generated@@114  (=> (and (not (forall (($generated@@115 Bool) )  (or $generated@@115 (not $generated@@115)))) (= (ControlFlow 0 13) 11)) $generated@@109)))
(let (($generated@@116  (=> $generated@@89 (and (=> (= (ControlFlow 0 16) 13) $generated@@114) (=> (= (ControlFlow 0 16) 14) $generated@@112)))))
(let (($generated@@117  (=> (not $generated@@89) (and (=> (= (ControlFlow 0 15) 13) $generated@@114) (=> (= (ControlFlow 0 15) 14) $generated@@112)))))
(let (($generated@@118  (and (=> (= (ControlFlow 0 17) 15) $generated@@117) (=> (= (ControlFlow 0 17) 16) $generated@@116))))
(let (($generated@@119 true))
(let (($generated@@120  (=> (and (and (and ($generated@@90 $generated@@91) ($generated@@92 $generated@@91)) (or (forall (($generated@@121 Bool) )  (or $generated@@121 (not $generated@@121))) (or (not (= 2 2)) (not true)))) (and (forall (($generated@@122 T@U) ) (!  (=> (and (or (not (= $generated@@122 $generated@@93)) (not true)) ($generated@@6 ($generated@@7 $generated@@8 ($generated@@0 $generated@@1 $generated@@2 ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@94 $generated@@122) $generated@@5)))) (= ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@91 $generated@@122) ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@94 $generated@@122)))
 :pattern ( ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@91 $generated@@122))
)) ($generated $generated@@94 $generated@@91))) (and (=> (= (ControlFlow 0 18) 17) $generated@@118) (=> (= (ControlFlow 0 18) 2) $generated@@119)))))
(let (($generated@@123  (and (=> (= (ControlFlow 0 20) (- 0 21)) (or (forall (($generated@@124 Bool) )  (or $generated@@124 (not $generated@@124))) (or (not (= 0 0)) (not true)))) (=> (or (forall (($generated@@125 Bool) )  (or $generated@@125 (not $generated@@125))) (or (not (= 0 0)) (not true))) (=> (= (ControlFlow 0 20) 18) $generated@@120)))))
(let (($generated@@126  (=> (and (forall (($generated@@127 Bool) )  (or $generated@@127 (not $generated@@127))) (= (ControlFlow 0 23) 20)) $generated@@123)))
(let (($generated@@128  (=> (and (not (forall (($generated@@129 Bool) )  (or $generated@@129 (not $generated@@129)))) (= (ControlFlow 0 22) 20)) $generated@@123)))
(let (($generated@@130  (=> $generated@@95 (and (=> (= (ControlFlow 0 25) 22) $generated@@128) (=> (= (ControlFlow 0 25) 23) $generated@@126)))))
(let (($generated@@131  (=> (not $generated@@95) (and (=> (= (ControlFlow 0 24) 22) $generated@@128) (=> (= (ControlFlow 0 24) 23) $generated@@126)))))
(let (($generated@@132  (and (=> (= (ControlFlow 0 26) 24) $generated@@131) (=> (= (ControlFlow 0 26) 25) $generated@@130))))
(let (($generated@@133  (=> (= (ControlFlow 0 19) 18) $generated@@120)))
(let (($generated@@134 true))
(let (($generated@@135  (and (=> (= (ControlFlow 0 27) 26) $generated@@132) (=> (= (ControlFlow 0 27) 1) $generated@@134))))
(let (($generated@@136  (=> (= $generated@@96 ($generated@@55 $generated@@93 $generated@@97 $generated@@5 false)) (=> (and (and (and ($generated@@90 $generated@@94) ($generated@@92 $generated@@94)) (or (forall (($generated@@137 Bool) )  (or $generated@@137 (not $generated@@137))) (or (not (= 2 2)) (not true)))) (and (forall (($generated@@138 T@U) ) (!  (=> (and (or (not (= $generated@@138 $generated@@93)) (not true)) ($generated@@6 ($generated@@7 $generated@@8 ($generated@@0 $generated@@1 $generated@@2 ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@97 $generated@@138) $generated@@5)))) (= ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@94 $generated@@138) ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@97 $generated@@138)))
 :pattern ( ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@94 $generated@@138))
)) ($generated $generated@@97 $generated@@94))) (and (=> (= (ControlFlow 0 28) 19) $generated@@133) (=> (= (ControlFlow 0 28) 27) $generated@@135))))))
(let (($generated@@139  (=> (and (and ($generated@@90 $generated@@97) ($generated@@92 $generated@@97)) (and (= 1 $generated@@98) (= (ControlFlow 0 29) 28))) $generated@@136)))
$generated@@139)))))))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
