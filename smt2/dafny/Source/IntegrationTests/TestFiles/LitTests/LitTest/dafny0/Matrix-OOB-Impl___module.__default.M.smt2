(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 (T@U) Int)
(declare-fun $generated@@22 (T@U) T@U)
(declare-fun $generated@@23 (T@U) Int)
(declare-fun $generated@@24 (T@U) T@U)
(declare-fun $generated@@25 () T@U)
(declare-fun $generated@@26 (T@U) T@U)
(declare-fun $generated@@27 (T@T T@U T@U) Bool)
(declare-fun $generated@@30 (T@U) Int)
(declare-fun $generated@@33 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@34 () T@T)
(declare-fun $generated@@35 (T@U) T@U)
(declare-fun $generated@@39 (T@T T@U) T@U)
(declare-fun $generated@@40 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@41 () T@T)
(declare-fun $generated@@42 () T@T)
(declare-fun $generated@@43 (T@T T@T) T@T)
(declare-fun $generated@@44 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@45 (T@T) T@T)
(declare-fun $generated@@46 (T@T) T@T)
(declare-fun $generated@@67 (Int) Int)
(declare-fun $generated@@69 (T@T T@U) T@U)
(declare-fun $generated@@72 (T@T T@U) T@U)
(declare-fun $generated@@75 (T@U Int) T@U)
(declare-fun $generated@@80 (T@U T@U T@U) Bool)
(declare-fun $generated@@85 (Int) T@U)
(declare-fun $generated@@86 (T@U) Bool)
(declare-fun $generated@@92 (T@U) T@U)
(declare-fun $generated@@97 (T@U T@U) Bool)
(declare-fun $generated@@110 (T@U) Int)
(declare-fun $generated@@112 (T@U) T@U)
(declare-fun $generated@@114 (T@U) T@U)
(declare-fun $generated@@124 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@125 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@126 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@158 (T@U) T@U)
(declare-fun $generated@@159 (T@U) Int)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert (= ($generated@@21 $generated@@1) 0))
(assert (= ($generated@@22 $generated) $generated@@0))
(assert (forall (($generated@@28 T@U) ($generated@@29 T@U) ) (!  (=> (and (or (not (= $generated@@29 $generated@@25)) (not true)) (= ($generated@@26 $generated@@29) ($generated@@24 $generated@@28))) ($generated@@27 $generated@@7 ($generated@@11 ($generated@@23 $generated@@29)) $generated))
 :pattern ( ($generated@@23 $generated@@29) ($generated@@24 $generated@@28))
)))
(assert (forall (($generated@@31 T@U) ($generated@@32 T@U) ) (!  (=> (and (or (not (= $generated@@32 $generated@@25)) (not true)) (= ($generated@@26 $generated@@32) ($generated@@24 $generated@@31))) ($generated@@27 $generated@@7 ($generated@@11 ($generated@@30 $generated@@32)) $generated))
 :pattern ( ($generated@@30 $generated@@32) ($generated@@24 $generated@@31))
)))
(assert (= ($generated@@5 $generated@@34) 3))
(assert (forall (($generated@@36 T@U) ($generated@@37 T@U) ($generated@@38 T@U) ) (! (= ($generated@@33 $generated@@34 $generated@@37 ($generated@@35 $generated@@36) $generated@@38) ($generated@@33 $generated@@34 $generated@@37 ($generated@@24 $generated@@36) $generated@@38))
 :pattern ( ($generated@@33 $generated@@34 $generated@@37 ($generated@@35 $generated@@36) $generated@@38))
 :pattern ( ($generated@@33 $generated@@34 $generated@@37 ($generated@@24 $generated@@36) $generated@@38))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@47 T@T) ($generated@@48 T@T) ($generated@@49 T@U) ($generated@@50 T@U) ($generated@@51 T@U) ) (! (= ($generated@@40 $generated@@47 $generated@@48 ($generated@@44 $generated@@47 $generated@@48 $generated@@50 $generated@@51 $generated@@49) $generated@@51) $generated@@49)
 :weight 0
)) (forall (($generated@@52 T@T) ($generated@@53 T@T) ($generated@@54 T@U) ($generated@@55 T@U) ($generated@@56 T@U) ($generated@@57 T@U) ) (!  (or (= $generated@@56 $generated@@57) (= ($generated@@40 $generated@@52 $generated@@53 ($generated@@44 $generated@@52 $generated@@53 $generated@@55 $generated@@56 $generated@@54) $generated@@57) ($generated@@40 $generated@@52 $generated@@53 $generated@@55 $generated@@57)))
 :weight 0
))) (= ($generated@@5 $generated@@41) 4)) (= ($generated@@5 $generated@@42) 5)) (forall (($generated@@58 T@T) ($generated@@59 T@T) ) (= ($generated@@5 ($generated@@43 $generated@@58 $generated@@59)) 6))) (forall (($generated@@60 T@T) ($generated@@61 T@T) ) (! (= ($generated@@45 ($generated@@43 $generated@@60 $generated@@61)) $generated@@60)
 :pattern ( ($generated@@43 $generated@@60 $generated@@61))
))) (forall (($generated@@62 T@T) ($generated@@63 T@T) ) (! (= ($generated@@46 ($generated@@43 $generated@@62 $generated@@63)) $generated@@63)
 :pattern ( ($generated@@43 $generated@@62 $generated@@63))
))))
(assert (forall (($generated@@64 T@U) ($generated@@65 T@U) ($generated@@66 T@U) ) (! (= ($generated@@33 $generated@@34 $generated@@65 ($generated@@24 $generated@@64) $generated@@66)  (or (= $generated@@65 $generated@@25) ($generated@@10 ($generated@@39 $generated@@6 ($generated@@40 $generated@@41 $generated@@42 ($generated@@40 $generated@@34 ($generated@@43 $generated@@41 $generated@@42) $generated@@66 $generated@@65) $generated@@1)))))
 :pattern ( ($generated@@33 $generated@@34 $generated@@65 ($generated@@24 $generated@@64) $generated@@66))
)))
(assert (forall (($generated@@68 Int) ) (! (= ($generated@@67 $generated@@68) $generated@@68)
 :pattern ( ($generated@@67 $generated@@68))
)))
(assert (forall (($generated@@70 T@U) ($generated@@71 T@T) ) (! (= ($generated@@69 $generated@@71 $generated@@70) $generated@@70)
 :pattern ( ($generated@@69 $generated@@71 $generated@@70))
)))
(assert (forall (($generated@@73 T@U) ($generated@@74 T@T) ) (! (= ($generated@@72 $generated@@74 ($generated@@39 $generated@@74 $generated@@73)) $generated@@73)
 :pattern ( ($generated@@39 $generated@@74 $generated@@73))
)))
(assert (forall (($generated@@76 T@U) ($generated@@77 Int) ) (! (= ($generated@@21 ($generated@@75 $generated@@76 $generated@@77)) (+ ($generated@@21 $generated@@76) 1))
 :pattern ( ($generated@@75 $generated@@76 $generated@@77))
)))
(assert (forall (($generated@@78 T@U) ($generated@@79 T@U) ) (! (= ($generated@@27 $generated@@34 $generated@@79 ($generated@@35 $generated@@78))  (and ($generated@@27 $generated@@34 $generated@@79 ($generated@@24 $generated@@78)) (or (not (= $generated@@79 $generated@@25)) (not true))))
 :pattern ( ($generated@@27 $generated@@34 $generated@@79 ($generated@@35 $generated@@78)))
 :pattern ( ($generated@@27 $generated@@34 $generated@@79 ($generated@@24 $generated@@78)))
)))
(assert (forall (($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@T) ) (! (= ($generated@@80 ($generated@@72 $generated@@84 $generated@@81) $generated@@82 $generated@@83) ($generated@@33 $generated@@84 $generated@@81 $generated@@82 $generated@@83))
 :pattern ( ($generated@@80 ($generated@@72 $generated@@84 $generated@@81) $generated@@82 $generated@@83))
)))
(assert (forall (($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 Int) ($generated@@91 Int) ) (!  (=> (and (and (and ($generated@@86 $generated@@88) (and (or (not (= $generated@@89 $generated@@25)) (not true)) (= ($generated@@26 $generated@@89) ($generated@@24 $generated@@87)))) (and (and (<= 0 $generated@@90) (< $generated@@90 ($generated@@23 $generated@@89))) (and (<= 0 $generated@@91) (< $generated@@91 ($generated@@30 $generated@@89))))) ($generated@@10 ($generated@@39 $generated@@6 ($generated@@40 $generated@@41 $generated@@42 ($generated@@40 $generated@@34 ($generated@@43 $generated@@41 $generated@@42) $generated@@88 $generated@@89) $generated@@1)))) ($generated@@80 ($generated@@40 $generated@@41 $generated@@42 ($generated@@40 $generated@@34 ($generated@@43 $generated@@41 $generated@@42) $generated@@88 $generated@@89) ($generated@@75 ($generated@@85 $generated@@90) $generated@@91)) $generated@@87 $generated@@88))
 :pattern ( ($generated@@40 $generated@@41 $generated@@42 ($generated@@40 $generated@@34 ($generated@@43 $generated@@41 $generated@@42) $generated@@88 $generated@@89) ($generated@@75 ($generated@@85 $generated@@90) $generated@@91)) ($generated@@24 $generated@@87))
)))
(assert (forall (($generated@@93 T@U) ) (!  (and (= ($generated@@22 ($generated@@24 $generated@@93)) $generated@@2) (= ($generated@@92 ($generated@@24 $generated@@93)) $generated@@4))
 :pattern ( ($generated@@24 $generated@@93))
)))
(assert (forall (($generated@@94 T@U) ) (!  (and (= ($generated@@22 ($generated@@35 $generated@@94)) $generated@@3) (= ($generated@@92 ($generated@@35 $generated@@94)) $generated@@4))
 :pattern ( ($generated@@35 $generated@@94))
)))
(assert (forall (($generated@@95 T@U) ($generated@@96 T@U) ) (! (= ($generated@@27 $generated@@34 $generated@@96 ($generated@@24 $generated@@95))  (or (= $generated@@96 $generated@@25) (= ($generated@@26 $generated@@96) ($generated@@24 $generated@@95))))
 :pattern ( ($generated@@27 $generated@@34 $generated@@96 ($generated@@24 $generated@@95)))
)))
(assert (forall (($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 Int) ($generated@@102 Int) ) (!  (=> (and (and ($generated@@86 $generated@@99) (and (or (not (= $generated@@100 $generated@@25)) (not true)) (= ($generated@@26 $generated@@100) ($generated@@24 $generated@@98)))) (and (and (<= 0 $generated@@101) (< $generated@@101 ($generated@@23 $generated@@100))) (and (<= 0 $generated@@102) (< $generated@@102 ($generated@@30 $generated@@100))))) ($generated@@97 ($generated@@40 $generated@@41 $generated@@42 ($generated@@40 $generated@@34 ($generated@@43 $generated@@41 $generated@@42) $generated@@99 $generated@@100) ($generated@@75 ($generated@@85 $generated@@101) $generated@@102)) $generated@@98))
 :pattern ( ($generated@@40 $generated@@41 $generated@@42 ($generated@@40 $generated@@34 ($generated@@43 $generated@@41 $generated@@42) $generated@@99 $generated@@100) ($generated@@75 ($generated@@85 $generated@@101) $generated@@102)) ($generated@@24 $generated@@98))
)))
(assert (forall (($generated@@103 T@U) ) (!  (=> ($generated@@97 $generated@@103 $generated) (and (= ($generated@@72 $generated@@7 ($generated@@39 $generated@@7 $generated@@103)) $generated@@103) ($generated@@27 $generated@@7 ($generated@@39 $generated@@7 $generated@@103) $generated)))
 :pattern ( ($generated@@97 $generated@@103 $generated))
)))
(assert (forall (($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@T) ) (! (= ($generated@@97 ($generated@@72 $generated@@106 $generated@@104) $generated@@105) ($generated@@27 $generated@@106 $generated@@104 $generated@@105))
 :pattern ( ($generated@@97 ($generated@@72 $generated@@106 $generated@@104) $generated@@105))
)))
(assert (forall (($generated@@107 T@U) ) (! (<= 0 ($generated@@23 $generated@@107))
 :pattern ( ($generated@@23 $generated@@107))
)))
(assert (forall (($generated@@108 T@U) ) (! (<= 0 ($generated@@30 $generated@@108))
 :pattern ( ($generated@@30 $generated@@108))
)))
(assert (forall (($generated@@109 Int) ) (! (= ($generated@@21 ($generated@@85 $generated@@109)) 1)
 :pattern ( ($generated@@85 $generated@@109))
)))
(assert (forall (($generated@@111 Int) ) (! (= ($generated@@110 ($generated@@85 $generated@@111)) $generated@@111)
 :pattern ( ($generated@@85 $generated@@111))
)))
(assert (forall (($generated@@113 T@U) ) (! (= ($generated@@112 ($generated@@24 $generated@@113)) $generated@@113)
 :pattern ( ($generated@@24 $generated@@113))
)))
(assert (forall (($generated@@115 T@U) ) (! (= ($generated@@114 ($generated@@35 $generated@@115)) $generated@@115)
 :pattern ( ($generated@@35 $generated@@115))
)))
(assert (forall (($generated@@116 T@U) ($generated@@117 T@T) ) (! (= ($generated@@39 $generated@@117 ($generated@@72 $generated@@117 $generated@@116)) $generated@@116)
 :pattern ( ($generated@@72 $generated@@117 $generated@@116))
)))
(assert (forall (($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (!  (=> (and (and ($generated@@86 $generated@@119) (and (or (not (= $generated@@120 $generated@@25)) (not true)) (= ($generated@@26 $generated@@120) ($generated@@24 $generated@@118)))) ($generated@@10 ($generated@@39 $generated@@6 ($generated@@40 $generated@@41 $generated@@42 ($generated@@40 $generated@@34 ($generated@@43 $generated@@41 $generated@@42) $generated@@119 $generated@@120) $generated@@1)))) ($generated@@33 $generated@@7 ($generated@@11 ($generated@@23 $generated@@120)) $generated $generated@@119))
 :pattern ( ($generated@@23 $generated@@120) ($generated@@39 $generated@@6 ($generated@@40 $generated@@41 $generated@@42 ($generated@@40 $generated@@34 ($generated@@43 $generated@@41 $generated@@42) $generated@@119 $generated@@120) $generated@@1)) ($generated@@24 $generated@@118))
)))
(assert (forall (($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ) (!  (=> (and (and ($generated@@86 $generated@@122) (and (or (not (= $generated@@123 $generated@@25)) (not true)) (= ($generated@@26 $generated@@123) ($generated@@24 $generated@@121)))) ($generated@@10 ($generated@@39 $generated@@6 ($generated@@40 $generated@@41 $generated@@42 ($generated@@40 $generated@@34 ($generated@@43 $generated@@41 $generated@@42) $generated@@122 $generated@@123) $generated@@1)))) ($generated@@33 $generated@@7 ($generated@@11 ($generated@@30 $generated@@123)) $generated $generated@@122))
 :pattern ( ($generated@@30 $generated@@123) ($generated@@39 $generated@@6 ($generated@@40 $generated@@41 $generated@@42 ($generated@@40 $generated@@34 ($generated@@43 $generated@@41 $generated@@42) $generated@@122 $generated@@123) $generated@@1)) ($generated@@24 $generated@@121))
)))
(assert  (and (forall (($generated@@127 T@T) ($generated@@128 T@T) ($generated@@129 T@T) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ) (! (= ($generated@@124 $generated@@127 $generated@@128 $generated@@129 ($generated@@126 $generated@@127 $generated@@128 $generated@@129 $generated@@131 $generated@@132 $generated@@133 $generated@@130) $generated@@132 $generated@@133) $generated@@130)
 :weight 0
)) (and (forall (($generated@@134 T@T) ($generated@@135 T@T) ($generated@@136 T@T) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ) (!  (or (= $generated@@139 $generated@@141) (= ($generated@@124 $generated@@134 $generated@@135 $generated@@136 ($generated@@126 $generated@@134 $generated@@135 $generated@@136 $generated@@138 $generated@@139 $generated@@140 $generated@@137) $generated@@141 $generated@@142) ($generated@@124 $generated@@134 $generated@@135 $generated@@136 $generated@@138 $generated@@141 $generated@@142)))
 :weight 0
)) (forall (($generated@@143 T@T) ($generated@@144 T@T) ($generated@@145 T@T) ($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 T@U) ($generated@@151 T@U) ) (!  (or (= $generated@@149 $generated@@151) (= ($generated@@124 $generated@@143 $generated@@144 $generated@@145 ($generated@@126 $generated@@143 $generated@@144 $generated@@145 $generated@@147 $generated@@148 $generated@@149 $generated@@146) $generated@@150 $generated@@151) ($generated@@124 $generated@@143 $generated@@144 $generated@@145 $generated@@147 $generated@@150 $generated@@151)))
 :weight 0
)))))
(assert (forall (($generated@@152 T@U) ($generated@@153 T@U) ($generated@@154 T@U) ($generated@@155 Bool) ($generated@@156 T@U) ($generated@@157 T@U) ) (! (= ($generated@@10 ($generated@@124 $generated@@34 $generated@@41 $generated@@6 ($generated@@125 $generated@@152 $generated@@153 $generated@@154 $generated@@155) $generated@@156 $generated@@157))  (=> (and (or (not (= $generated@@156 $generated@@152)) (not true)) ($generated@@10 ($generated@@39 $generated@@6 ($generated@@40 $generated@@41 $generated@@42 ($generated@@40 $generated@@34 ($generated@@43 $generated@@41 $generated@@42) $generated@@153 $generated@@156) $generated@@154)))) $generated@@155))
 :pattern ( ($generated@@124 $generated@@34 $generated@@41 $generated@@6 ($generated@@125 $generated@@152 $generated@@153 $generated@@154 $generated@@155) $generated@@156 $generated@@157))
)))
(assert (forall (($generated@@160 T@U) ($generated@@161 Int) ) (!  (and (= ($generated@@158 ($generated@@75 $generated@@160 $generated@@161)) $generated@@160) (= ($generated@@159 ($generated@@75 $generated@@160 $generated@@161)) $generated@@161))
 :pattern ( ($generated@@75 $generated@@160 $generated@@161))
)))
(assert (forall (($generated@@162 T@U) ($generated@@163 T@U) ) (!  (=> ($generated@@97 $generated@@163 ($generated@@24 $generated@@162)) (and (= ($generated@@72 $generated@@34 ($generated@@39 $generated@@34 $generated@@163)) $generated@@163) ($generated@@27 $generated@@34 ($generated@@39 $generated@@34 $generated@@163) ($generated@@24 $generated@@162))))
 :pattern ( ($generated@@97 $generated@@163 ($generated@@24 $generated@@162)))
)))
(assert (forall (($generated@@164 T@U) ($generated@@165 T@U) ) (!  (=> ($generated@@97 $generated@@165 ($generated@@35 $generated@@164)) (and (= ($generated@@72 $generated@@34 ($generated@@39 $generated@@34 $generated@@165)) $generated@@165) ($generated@@27 $generated@@34 ($generated@@39 $generated@@34 $generated@@165) ($generated@@35 $generated@@164))))
 :pattern ( ($generated@@97 $generated@@165 ($generated@@35 $generated@@164)))
)))
(assert (forall (($generated@@166 Int) ) (! (= ($generated@@72 $generated@@7 ($generated@@11 ($generated@@67 $generated@@166))) ($generated@@69 $generated@@42 ($generated@@72 $generated@@7 ($generated@@11 $generated@@166))))
 :pattern ( ($generated@@72 $generated@@7 ($generated@@11 ($generated@@67 $generated@@166))))
)))
(assert (forall (($generated@@167 T@U) ($generated@@168 T@T) ) (! (= ($generated@@72 $generated@@168 ($generated@@69 $generated@@168 $generated@@167)) ($generated@@69 $generated@@42 ($generated@@72 $generated@@168 $generated@@167)))
 :pattern ( ($generated@@72 $generated@@168 ($generated@@69 $generated@@168 $generated@@167)))
)))
(assert (forall (($generated@@169 T@U) ($generated@@170 T@U) ) (! ($generated@@33 $generated@@7 $generated@@170 $generated $generated@@169)
 :pattern ( ($generated@@33 $generated@@7 $generated@@170 $generated $generated@@169))
)))
(assert (forall (($generated@@171 T@U) ) (! ($generated@@27 $generated@@7 $generated@@171 $generated)
 :pattern ( ($generated@@27 $generated@@7 $generated@@171 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@172 () T@U)
(declare-fun $generated@@173 () T@U)
(declare-fun $generated@@174 () T@U)
(declare-fun $generated@@175 (T@U) Bool)
(declare-fun $generated@@176 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@177  (=> (and (= $generated@@172 ($generated@@125 $generated@@25 $generated@@173 $generated@@1 false)) (= (ControlFlow 0 2) (- 0 1))) (forall (($generated@@178 Int) ($generated@@179 Int) ) (! (= ($generated@@12 ($generated@@39 $generated@@7 ($generated@@40 $generated@@41 $generated@@42 ($generated@@40 $generated@@34 ($generated@@43 $generated@@41 $generated@@42) $generated@@173 $generated@@174) ($generated@@75 ($generated@@85 $generated@@178) $generated@@179)))) ($generated@@67 0))
 :pattern ( ($generated@@39 $generated@@7 ($generated@@40 $generated@@41 $generated@@42 ($generated@@40 $generated@@34 ($generated@@43 $generated@@41 $generated@@42) $generated@@173 $generated@@174) ($generated@@75 ($generated@@85 $generated@@178) $generated@@179))))
)))))
(let (($generated@@180  (=> (and ($generated@@86 $generated@@173) ($generated@@175 $generated@@173)) (=> (and (and ($generated@@27 $generated@@34 $generated@@174 ($generated@@35 $generated)) ($generated@@33 $generated@@34 $generated@@174 ($generated@@35 $generated) $generated@@173)) (and (= 0 $generated@@176) (= (ControlFlow 0 3) 2))) $generated@@177))))
$generated@@180)))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
