(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 (T@U) T@U)
(declare-fun $generated@@20 (T@U) Int)
(declare-fun $generated@@21 () T@U)
(declare-fun $generated@@22 (T@U Int) T@U)
(declare-fun $generated@@23 (T@U T@U) T@U)
(declare-fun $generated@@24 (T@U Int) T@U)
(declare-fun $generated@@30 (Int) Int)
(declare-fun $generated@@32 (T@T T@U) T@U)
(declare-fun $generated@@35 (T@U Int) T@U)
(declare-fun $generated@@41 (T@T T@U) T@U)
(declare-fun $generated@@42 (T@T T@U) T@U)
(declare-fun $generated@@45 (T@U T@U T@U) Bool)
(declare-fun $generated@@46 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@56 (T@U) Int)
(declare-fun $generated@@57 (T@U) Bool)
(declare-fun $generated@@59 () Int)
(declare-fun $generated@@60 (T@U T@U) Int)
(declare-fun $generated@@61 (T@U) T@U)
(declare-fun $generated@@62 (T@U) Bool)
(declare-fun $generated@@63 (T@U) Bool)
(declare-fun $generated@@64 (T@T T@U T@U) Bool)
(declare-fun $generated@@65 () T@T)
(declare-fun $generated@@66 (T@U) T@U)
(declare-fun $generated@@73 (T@U T@U) Bool)
(declare-fun $generated@@83 (T@U) T@U)
(declare-fun $generated@@94 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@95 () T@T)
(declare-fun $generated@@96 () T@T)
(declare-fun $generated@@97 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@98 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@99 () T@T)
(declare-fun $generated@@100 (T@T T@T) T@T)
(declare-fun $generated@@101 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@102 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@103 (T@T) T@T)
(declare-fun $generated@@104 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (= ($generated@@19 $generated) $generated@@0))
(assert (= ($generated@@20 $generated@@21) 0))
(assert (forall (($generated@@25 T@U) ($generated@@26 T@U) ($generated@@27 Int) ) (!  (=> (= $generated@@27 ($generated@@20 $generated@@25)) (and (= ($generated@@22 ($generated@@23 $generated@@25 $generated@@26) $generated@@27) $generated@@25) (= ($generated@@24 ($generated@@23 $generated@@25 $generated@@26) $generated@@27) $generated@@26)))
 :pattern ( ($generated@@22 ($generated@@23 $generated@@25 $generated@@26) $generated@@27))
 :pattern ( ($generated@@24 ($generated@@23 $generated@@25 $generated@@26) $generated@@27))
)))
(assert (forall (($generated@@28 T@U) ($generated@@29 Int) ) (!  (=> (= $generated@@29 0) (= ($generated@@24 $generated@@28 $generated@@29) $generated@@28))
 :pattern ( ($generated@@24 $generated@@28 $generated@@29))
)))
(assert (forall (($generated@@31 Int) ) (! (= ($generated@@30 $generated@@31) $generated@@31)
 :pattern ( ($generated@@30 $generated@@31))
)))
(assert (forall (($generated@@33 T@U) ($generated@@34 T@T) ) (! (= ($generated@@32 $generated@@34 $generated@@33) $generated@@33)
 :pattern ( ($generated@@32 $generated@@34 $generated@@33))
)))
(assert (forall (($generated@@36 T@U) ($generated@@37 Int) ($generated@@38 Int) ) (!  (=> (and (and (<= 0 $generated@@38) (< $generated@@38 $generated@@37)) (< $generated@@38 ($generated@@20 $generated@@36))) (= ($generated@@35 ($generated@@22 $generated@@36 $generated@@37) $generated@@38) ($generated@@35 $generated@@36 $generated@@38)))
 :weight 25
 :pattern ( ($generated@@35 ($generated@@22 $generated@@36 $generated@@37) $generated@@38))
 :pattern ( ($generated@@35 $generated@@36 $generated@@38) ($generated@@22 $generated@@36 $generated@@37))
)))
(assert (forall (($generated@@39 T@U) ($generated@@40 Int) ) (!  (=> (and (<= 0 $generated@@40) (<= $generated@@40 ($generated@@20 $generated@@39))) (= ($generated@@20 ($generated@@24 $generated@@39 $generated@@40)) (- ($generated@@20 $generated@@39) $generated@@40)))
 :pattern ( ($generated@@20 ($generated@@24 $generated@@39 $generated@@40)))
)))
(assert (forall (($generated@@43 T@U) ($generated@@44 T@T) ) (! (= ($generated@@42 $generated@@44 ($generated@@41 $generated@@44 $generated@@43)) $generated@@43)
 :pattern ( ($generated@@41 $generated@@44 $generated@@43))
)))
(assert (forall (($generated@@47 T@U) ($generated@@48 T@U) ($generated@@49 T@U) ($generated@@50 T@T) ) (! (= ($generated@@45 ($generated@@42 $generated@@50 $generated@@47) $generated@@48 $generated@@49) ($generated@@46 $generated@@50 $generated@@47 $generated@@48 $generated@@49))
 :pattern ( ($generated@@45 ($generated@@42 $generated@@50 $generated@@47) $generated@@48 $generated@@49))
)))
(assert (forall (($generated@@51 T@U) ($generated@@52 Int) ($generated@@53 Int) ) (!  (=> (and (and (<= 0 $generated@@52) (<= 0 $generated@@53)) (< $generated@@53 (- ($generated@@20 $generated@@51) $generated@@52))) (= ($generated@@35 ($generated@@24 $generated@@51 $generated@@52) $generated@@53) ($generated@@35 $generated@@51 (+ $generated@@53 $generated@@52))))
 :weight 25
 :pattern ( ($generated@@35 ($generated@@24 $generated@@51 $generated@@52) $generated@@53))
)))
(assert (forall (($generated@@54 T@U) ($generated@@55 T@U) ) (! (= ($generated@@20 ($generated@@23 $generated@@54 $generated@@55)) (+ ($generated@@20 $generated@@54) ($generated@@20 $generated@@55)))
 :pattern ( ($generated@@20 ($generated@@23 $generated@@54 $generated@@55)))
)))
(assert (forall (($generated@@58 T@U) ) (!  (=> ($generated@@57 $generated@@58) (and (<= ($generated@@30 0) ($generated@@56 $generated@@58)) (< ($generated@@56 $generated@@58) ($generated@@20 $generated@@58))))
 :pattern ( ($generated@@56 $generated@@58))
)))
(assert (= ($generated@@3 $generated@@65) 3))
(assert  (=> (<= 0 $generated@@59) (forall (($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@U) ) (!  (=> (or ($generated@@63 $generated@@69) (and (< 0 $generated@@59) (and ($generated@@62 $generated@@68) ($generated@@64 $generated@@65 $generated@@69 ($generated@@66 $generated))))) (and (=> (or (not (= ($generated@@20 $generated@@69) ($generated@@30 0))) (not true)) (and ($generated@@57 $generated@@69) ($generated@@63 ($generated@@23 ($generated@@22 $generated@@69 ($generated@@56 $generated@@69)) ($generated@@24 $generated@@69 (+ ($generated@@56 $generated@@69) 1)))))) (= ($generated@@60 ($generated@@61 $generated@@67) $generated@@69) (ite (= ($generated@@20 $generated@@69) ($generated@@30 0)) 0 (let (($generated@@70 ($generated@@56 $generated@@69)))
(+ $generated@@70 ($generated@@60 $generated@@67 ($generated@@23 ($generated@@22 $generated@@69 $generated@@70) ($generated@@24 $generated@@69 (+ $generated@@70 1))))))))))
 :pattern ( ($generated@@60 ($generated@@61 $generated@@67) $generated@@69) ($generated@@62 $generated@@68))
))))
(assert (forall (($generated@@71 T@U) ($generated@@72 Int) ) (!  (=> (and (<= 0 $generated@@72) (<= $generated@@72 ($generated@@20 $generated@@71))) (= ($generated@@20 ($generated@@22 $generated@@71 $generated@@72)) $generated@@72))
 :pattern ( ($generated@@20 ($generated@@22 $generated@@71 $generated@@72)))
)))
(assert (forall (($generated@@74 T@U) ) (!  (=> ($generated@@73 $generated@@74 $generated) (and (= ($generated@@42 $generated@@5 ($generated@@41 $generated@@5 $generated@@74)) $generated@@74) ($generated@@64 $generated@@5 ($generated@@41 $generated@@5 $generated@@74) $generated)))
 :pattern ( ($generated@@73 $generated@@74 $generated))
)))
(assert (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@T) ) (! (= ($generated@@73 ($generated@@42 $generated@@77 $generated@@75) $generated@@76) ($generated@@64 $generated@@77 $generated@@75 $generated@@76))
 :pattern ( ($generated@@73 ($generated@@42 $generated@@77 $generated@@75) $generated@@76))
)))
(assert (forall (($generated@@78 T@U) ) (! (<= 0 ($generated@@20 $generated@@78))
 :pattern ( ($generated@@20 $generated@@78))
)))
(assert (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ) (! (= ($generated@@46 $generated@@65 $generated@@79 ($generated@@66 $generated@@80) $generated@@81) (forall (($generated@@82 Int) ) (!  (=> (and (<= 0 $generated@@82) (< $generated@@82 ($generated@@20 $generated@@79))) ($generated@@45 ($generated@@35 $generated@@79 $generated@@82) $generated@@80 $generated@@81))
 :pattern ( ($generated@@35 $generated@@79 $generated@@82))
)))
 :pattern ( ($generated@@46 $generated@@65 $generated@@79 ($generated@@66 $generated@@80) $generated@@81))
)))
(assert (forall (($generated@@84 T@U) ) (! (= ($generated@@83 ($generated@@66 $generated@@84)) $generated@@84)
 :pattern ( ($generated@@66 $generated@@84))
)))
(assert (forall (($generated@@85 T@U) ) (! (= ($generated@@19 ($generated@@66 $generated@@85)) $generated@@1)
 :pattern ( ($generated@@66 $generated@@85))
)))
(assert (forall (($generated@@86 T@U) ($generated@@87 T@T) ) (! (= ($generated@@41 $generated@@87 ($generated@@42 $generated@@87 $generated@@86)) $generated@@86)
 :pattern ( ($generated@@42 $generated@@87 $generated@@86))
)))
(assert (forall (($generated@@88 T@U) ($generated@@89 T@U) ) (! (= ($generated@@60 ($generated@@61 $generated@@88) $generated@@89) ($generated@@60 $generated@@88 $generated@@89))
 :pattern ( ($generated@@60 ($generated@@61 $generated@@88) $generated@@89))
)))
(assert  (=> (<= 0 $generated@@59) (forall (($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ) (!  (=> (or ($generated@@63 ($generated@@32 $generated@@65 $generated@@92)) (and (< 0 $generated@@59) (and ($generated@@62 $generated@@91) ($generated@@64 $generated@@65 $generated@@92 ($generated@@66 $generated))))) (and (=> (or (not (= ($generated@@20 ($generated@@32 $generated@@65 $generated@@92)) ($generated@@30 0))) (not true)) (and ($generated@@57 ($generated@@32 $generated@@65 $generated@@92)) ($generated@@63 ($generated@@23 ($generated@@22 ($generated@@32 $generated@@65 $generated@@92) ($generated@@56 ($generated@@32 $generated@@65 $generated@@92))) ($generated@@24 ($generated@@32 $generated@@65 $generated@@92) (+ ($generated@@56 ($generated@@32 $generated@@65 $generated@@92)) 1)))))) (= ($generated@@60 ($generated@@61 $generated@@90) ($generated@@32 $generated@@65 $generated@@92)) (ite (= ($generated@@20 ($generated@@32 $generated@@65 $generated@@92)) ($generated@@30 0)) 0 (let (($generated@@93 ($generated@@56 ($generated@@32 $generated@@65 $generated@@92))))
(+ $generated@@93 ($generated@@60 ($generated@@61 $generated@@90) ($generated@@23 ($generated@@22 ($generated@@32 $generated@@65 $generated@@92) $generated@@93) ($generated@@24 ($generated@@32 $generated@@65 $generated@@92) (+ $generated@@93 1))))))))))
 :weight 3
 :pattern ( ($generated@@60 ($generated@@61 $generated@@90) ($generated@@32 $generated@@65 $generated@@92)) ($generated@@62 $generated@@91))
))))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@105 T@T) ($generated@@106 T@T) ($generated@@107 T@T) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (! (= ($generated@@94 $generated@@105 $generated@@106 $generated@@107 ($generated@@101 $generated@@105 $generated@@106 $generated@@107 $generated@@109 $generated@@110 $generated@@111 $generated@@108) $generated@@110 $generated@@111) $generated@@108)
 :weight 0
)) (and (forall (($generated@@112 T@T) ($generated@@113 T@T) ($generated@@114 T@T) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (!  (or (= $generated@@117 $generated@@119) (= ($generated@@94 $generated@@112 $generated@@113 $generated@@114 ($generated@@101 $generated@@112 $generated@@113 $generated@@114 $generated@@116 $generated@@117 $generated@@118 $generated@@115) $generated@@119 $generated@@120) ($generated@@94 $generated@@112 $generated@@113 $generated@@114 $generated@@116 $generated@@119 $generated@@120)))
 :weight 0
)) (forall (($generated@@121 T@T) ($generated@@122 T@T) ($generated@@123 T@T) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 T@U) ) (!  (or (= $generated@@127 $generated@@129) (= ($generated@@94 $generated@@121 $generated@@122 $generated@@123 ($generated@@101 $generated@@121 $generated@@122 $generated@@123 $generated@@125 $generated@@126 $generated@@127 $generated@@124) $generated@@128 $generated@@129) ($generated@@94 $generated@@121 $generated@@122 $generated@@123 $generated@@125 $generated@@128 $generated@@129)))
 :weight 0
)))) (= ($generated@@3 $generated@@95) 4)) (= ($generated@@3 $generated@@96) 5)) (forall (($generated@@130 T@T) ($generated@@131 T@T) ($generated@@132 T@U) ($generated@@133 T@U) ($generated@@134 T@U) ) (! (= ($generated@@98 $generated@@130 $generated@@131 ($generated@@102 $generated@@130 $generated@@131 $generated@@133 $generated@@134 $generated@@132) $generated@@134) $generated@@132)
 :weight 0
))) (forall (($generated@@135 T@T) ($generated@@136 T@T) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ($generated@@140 T@U) ) (!  (or (= $generated@@139 $generated@@140) (= ($generated@@98 $generated@@135 $generated@@136 ($generated@@102 $generated@@135 $generated@@136 $generated@@138 $generated@@139 $generated@@137) $generated@@140) ($generated@@98 $generated@@135 $generated@@136 $generated@@138 $generated@@140)))
 :weight 0
))) (= ($generated@@3 $generated@@99) 6)) (forall (($generated@@141 T@T) ($generated@@142 T@T) ) (= ($generated@@3 ($generated@@100 $generated@@141 $generated@@142)) 7))) (forall (($generated@@143 T@T) ($generated@@144 T@T) ) (! (= ($generated@@103 ($generated@@100 $generated@@143 $generated@@144)) $generated@@143)
 :pattern ( ($generated@@100 $generated@@143 $generated@@144))
))) (forall (($generated@@145 T@T) ($generated@@146 T@T) ) (! (= ($generated@@104 ($generated@@100 $generated@@145 $generated@@146)) $generated@@146)
 :pattern ( ($generated@@100 $generated@@145 $generated@@146))
))))
(assert (forall (($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 Bool) ($generated@@151 T@U) ($generated@@152 T@U) ) (! (= ($generated@@8 ($generated@@94 $generated@@95 $generated@@96 $generated@@4 ($generated@@97 $generated@@147 $generated@@148 $generated@@149 $generated@@150) $generated@@151 $generated@@152))  (=> (and (or (not (= $generated@@151 $generated@@147)) (not true)) ($generated@@8 ($generated@@41 $generated@@4 ($generated@@98 $generated@@96 $generated@@99 ($generated@@98 $generated@@95 ($generated@@100 $generated@@96 $generated@@99) $generated@@148 $generated@@151) $generated@@149)))) $generated@@150))
 :pattern ( ($generated@@94 $generated@@95 $generated@@96 $generated@@4 ($generated@@97 $generated@@147 $generated@@148 $generated@@149 $generated@@150) $generated@@151 $generated@@152))
)))
(assert (forall (($generated@@153 T@U) ($generated@@154 T@U) ) (!  (=> ($generated@@73 $generated@@153 ($generated@@66 $generated@@154)) (and (= ($generated@@42 $generated@@65 ($generated@@41 $generated@@65 $generated@@153)) $generated@@153) ($generated@@64 $generated@@65 ($generated@@41 $generated@@65 $generated@@153) ($generated@@66 $generated@@154))))
 :pattern ( ($generated@@73 $generated@@153 ($generated@@66 $generated@@154)))
)))
(assert (forall (($generated@@155 T@U) ($generated@@156 Int) ($generated@@157 Int) ) (!  (=> (and (and (<= 0 $generated@@156) (<= $generated@@156 $generated@@157)) (< $generated@@157 ($generated@@20 $generated@@155))) (= ($generated@@35 ($generated@@24 $generated@@155 $generated@@156) (- $generated@@157 $generated@@156)) ($generated@@35 $generated@@155 $generated@@157)))
 :weight 25
 :pattern ( ($generated@@35 $generated@@155 $generated@@157) ($generated@@24 $generated@@155 $generated@@156))
)))
(assert (forall (($generated@@158 T@U) ($generated@@159 Int) ($generated@@160 Int) ) (!  (=> (and (and (<= 0 $generated@@159) (<= 0 $generated@@160)) (<= (+ $generated@@159 $generated@@160) ($generated@@20 $generated@@158))) (= ($generated@@24 ($generated@@24 $generated@@158 $generated@@159) $generated@@160) ($generated@@24 $generated@@158 (+ $generated@@159 $generated@@160))))
 :pattern ( ($generated@@24 ($generated@@24 $generated@@158 $generated@@159) $generated@@160))
)))
(assert (forall (($generated@@161 T@U) ($generated@@162 T@U) ($generated@@163 Int) ) (!  (and (=> (< $generated@@163 ($generated@@20 $generated@@161)) (= ($generated@@35 ($generated@@23 $generated@@161 $generated@@162) $generated@@163) ($generated@@35 $generated@@161 $generated@@163))) (=> (<= ($generated@@20 $generated@@161) $generated@@163) (= ($generated@@35 ($generated@@23 $generated@@161 $generated@@162) $generated@@163) ($generated@@35 $generated@@162 (- $generated@@163 ($generated@@20 $generated@@161))))))
 :pattern ( ($generated@@35 ($generated@@23 $generated@@161 $generated@@162) $generated@@163))
)))
(assert (forall (($generated@@164 Int) ) (! (= ($generated@@42 $generated@@5 ($generated@@9 ($generated@@30 $generated@@164))) ($generated@@32 $generated@@99 ($generated@@42 $generated@@5 ($generated@@9 $generated@@164))))
 :pattern ( ($generated@@42 $generated@@5 ($generated@@9 ($generated@@30 $generated@@164))))
)))
(assert (forall (($generated@@165 T@U) ($generated@@166 T@T) ) (! (= ($generated@@42 $generated@@166 ($generated@@32 $generated@@166 $generated@@165)) ($generated@@32 $generated@@99 ($generated@@42 $generated@@166 $generated@@165)))
 :pattern ( ($generated@@42 $generated@@166 ($generated@@32 $generated@@166 $generated@@165)))
)))
(assert (forall (($generated@@167 T@U) ) (!  (=> (= ($generated@@20 $generated@@167) 0) (= $generated@@167 $generated@@21))
 :pattern ( ($generated@@20 $generated@@167))
)))
(assert (forall (($generated@@168 T@U) ($generated@@169 Int) ) (!  (=> (= $generated@@169 0) (= ($generated@@22 $generated@@168 $generated@@169) $generated@@21))
 :pattern ( ($generated@@22 $generated@@168 $generated@@169))
)))
(assert (forall (($generated@@170 T@U) ($generated@@171 T@U) ) (! ($generated@@46 $generated@@5 $generated@@171 $generated $generated@@170)
 :pattern ( ($generated@@46 $generated@@5 $generated@@171 $generated $generated@@170))
)))
(assert (forall (($generated@@172 T@U) ($generated@@173 T@U) ) (! (= ($generated@@64 $generated@@65 $generated@@172 ($generated@@66 $generated@@173)) (forall (($generated@@174 Int) ) (!  (=> (and (<= 0 $generated@@174) (< $generated@@174 ($generated@@20 $generated@@172))) ($generated@@73 ($generated@@35 $generated@@172 $generated@@174) $generated@@173))
 :pattern ( ($generated@@35 $generated@@172 $generated@@174))
)))
 :pattern ( ($generated@@64 $generated@@65 $generated@@172 ($generated@@66 $generated@@173)))
)))
(assert (forall (($generated@@175 T@U) ) (! ($generated@@64 $generated@@5 $generated@@175 $generated)
 :pattern ( ($generated@@64 $generated@@5 $generated@@175 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@176 () T@U)
(declare-fun $generated@@177 () Int)
(declare-fun $generated@@178 () T@U)
(declare-fun $generated@@179 () T@U)
(declare-fun $generated@@180 () T@U)
(declare-fun $generated@@181 () T@U)
(declare-fun $generated@@182 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 15) (let (($generated@@183  (and (=> (= (ControlFlow 0 5) (- 0 9)) (or (and ($generated@@64 $generated@@5 ($generated@@9 (- ($generated@@20 $generated@@176) 1)) $generated) (and (<= ($generated@@30 0) (- ($generated@@20 $generated@@176) 1)) (< (- ($generated@@20 $generated@@176) 1) ($generated@@20 $generated@@176)))) (or (and ($generated@@64 $generated@@5 ($generated@@9 ($generated@@30 0)) $generated) (and (<= ($generated@@30 0) ($generated@@30 0)) (< 0 ($generated@@20 $generated@@176)))) (or (and ($generated@@64 $generated@@5 ($generated@@9 ($generated@@30 0)) $generated) (and (<= ($generated@@30 0) ($generated@@30 0)) (< 0 ($generated@@20 $generated@@176)))) (exists (($generated@@184 Int) )  (and (<= ($generated@@30 0) $generated@@184) (< $generated@@184 ($generated@@20 $generated@@176)))))))) (=> (or (and ($generated@@64 $generated@@5 ($generated@@9 (- ($generated@@20 $generated@@176) 1)) $generated) (and (<= ($generated@@30 0) (- ($generated@@20 $generated@@176) 1)) (< (- ($generated@@20 $generated@@176) 1) ($generated@@20 $generated@@176)))) (or (and ($generated@@64 $generated@@5 ($generated@@9 ($generated@@30 0)) $generated) (and (<= ($generated@@30 0) ($generated@@30 0)) (< 0 ($generated@@20 $generated@@176)))) (or (and ($generated@@64 $generated@@5 ($generated@@9 ($generated@@30 0)) $generated) (and (<= ($generated@@30 0) ($generated@@30 0)) (< 0 ($generated@@20 $generated@@176)))) (exists (($generated@@185 Int) )  (and (<= ($generated@@30 0) $generated@@185) (< $generated@@185 ($generated@@20 $generated@@176))))))) (=> (and (<= ($generated@@30 0) $generated@@177) (< $generated@@177 ($generated@@20 $generated@@176))) (and (=> (= (ControlFlow 0 5) (- 0 8)) (and (<= 0 $generated@@177) (<= $generated@@177 ($generated@@20 $generated@@176)))) (=> (and (<= 0 $generated@@177) (<= $generated@@177 ($generated@@20 $generated@@176))) (and (=> (= (ControlFlow 0 5) (- 0 7)) (and (<= 0 (+ $generated@@177 1)) (<= (+ $generated@@177 1) ($generated@@20 $generated@@176)))) (=> (and (<= 0 (+ $generated@@177 1)) (<= (+ $generated@@177 1) ($generated@@20 $generated@@176))) (=> (and (= $generated@@178 ($generated@@23 ($generated@@22 $generated@@176 $generated@@177) ($generated@@24 $generated@@176 (+ $generated@@177 1)))) ($generated@@46 $generated@@65 $generated@@178 ($generated@@66 $generated) $generated@@179)) (and (=> (= (ControlFlow 0 5) (- 0 6)) (or (<= 0 ($generated@@20 $generated@@176)) (= ($generated@@20 $generated@@178) ($generated@@20 $generated@@176)))) (=> (or (<= 0 ($generated@@20 $generated@@176)) (= ($generated@@20 $generated@@178) ($generated@@20 $generated@@176))) (=> (= (ControlFlow 0 5) (- 0 4)) (< ($generated@@20 $generated@@178) ($generated@@20 $generated@@176)))))))))))))))
(let (($generated@@186  (=> (and (< $generated@@177 ($generated@@30 0)) (= (ControlFlow 0 11) 5)) $generated@@183)))
(let (($generated@@187  (=> (and (<= ($generated@@30 0) $generated@@177) (= (ControlFlow 0 10) 5)) $generated@@183)))
(let (($generated@@188  (and (=> (= (ControlFlow 0 12) 10) $generated@@187) (=> (= (ControlFlow 0 12) 11) $generated@@186))))
(let (($generated@@189 true))
(let (($generated@@190  (=> (or (not (= ($generated@@20 $generated@@176) ($generated@@30 0))) (not true)) (and (=> (= (ControlFlow 0 13) 12) $generated@@188) (=> (= (ControlFlow 0 13) 3) $generated@@189)))))
(let (($generated@@191 true))
(let (($generated@@192 true))
(let (($generated@@193  (=> (= $generated@@180 ($generated@@97 $generated@@181 $generated@@179 $generated@@2 false)) (and (and (=> (= (ControlFlow 0 14) 1) $generated@@192) (=> (= (ControlFlow 0 14) 2) $generated@@191)) (=> (= (ControlFlow 0 14) 13) $generated@@190)))))
(let (($generated@@194  (=> (and (and (and ($generated@@62 $generated@@179) ($generated@@182 $generated@@179)) ($generated@@64 $generated@@65 $generated@@176 ($generated@@66 $generated))) (and (= 0 $generated@@59) (= (ControlFlow 0 15) 14))) $generated@@193)))
$generated@@194)))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
