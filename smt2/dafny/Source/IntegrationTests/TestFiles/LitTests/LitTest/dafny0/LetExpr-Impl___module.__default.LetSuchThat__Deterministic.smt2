(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagSet () T@U)
(declare-fun alloc () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun |Set#UnionOne| (T@U T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun |$let#1$canCall| () Bool)
(declare-fun |$let#1_y| () Int)
(declare-fun |$let#2$canCall| () Bool)
(declare-fun |$let#2_y| () Int)
(declare-fun |Set#Union| (T@U T@U) T@U)
(declare-fun |Set#Difference| (T@U T@U) T@U)
(declare-fun |Set#Empty| () T@U)
(declare-fun |$let#3_b| (T@U) Int)
(declare-fun |$let#3_a| (T@U) Int)
(declare-fun |$let#3$canCall| (T@U) Bool)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun |Set#Disjoint| (T@U T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun SetType () T@T)
(declare-fun TSet (T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun Mul (Int Int) Int)
(declare-fun |$let#0$canCall| () Bool)
(declare-fun |$let#0_w| () Int)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt TagSet alloc)
)
(assert (= (Tag TInt) TagInt))
(assert (forall ((a T@U) (x@@2 T@U) ) (! (|Set#IsMember| (|Set#UnionOne| a x@@2) x@@2)
 :pattern ( (|Set#UnionOne| a x@@2))
)))
(assert  (=> |$let#1$canCall| (< |$let#1_y| 0)))
(assert  (=> |$let#2$canCall| (< |$let#2_y| 0)))
(assert (forall ((a@@0 T@U) (x@@3 T@U) (y T@U) ) (!  (=> (|Set#IsMember| a@@0 y) (|Set#IsMember| (|Set#UnionOne| a@@0 x@@3) y))
 :pattern ( (|Set#UnionOne| a@@0 x@@3) (|Set#IsMember| a@@0 y))
)))
(assert (forall ((a@@1 T@U) (b T@U) (y@@0 T@U) ) (!  (=> (|Set#IsMember| a@@1 y@@0) (|Set#IsMember| (|Set#Union| a@@1 b) y@@0))
 :pattern ( (|Set#Union| a@@1 b) (|Set#IsMember| a@@1 y@@0))
)))
(assert (forall ((a@@2 T@U) (b@@0 T@U) (y@@1 T@U) ) (!  (=> (|Set#IsMember| b@@0 y@@1) (|Set#IsMember| (|Set#Union| a@@2 b@@0) y@@1))
 :pattern ( (|Set#Union| a@@2 b@@0) (|Set#IsMember| b@@0 y@@1))
)))
(assert (forall ((a@@3 T@U) (x@@4 T@U) (o T@U) ) (! (= (|Set#IsMember| (|Set#UnionOne| a@@3 x@@4) o)  (or (= o x@@4) (|Set#IsMember| a@@3 o)))
 :pattern ( (|Set#IsMember| (|Set#UnionOne| a@@3 x@@4) o))
)))
(assert (forall ((a@@4 T@U) (b@@1 T@U) (y@@2 T@U) ) (!  (=> (|Set#IsMember| b@@1 y@@2) (not (|Set#IsMember| (|Set#Difference| a@@4 b@@1) y@@2)))
 :pattern ( (|Set#Difference| a@@4 b@@1) (|Set#IsMember| b@@1 y@@2))
)))
(assert (forall ((o@@0 T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o@@0))
 :pattern ( (|Set#IsMember| |Set#Empty| o@@0))
)))
(assert (forall ((t T@U) ) (!  (=> (|$let#3$canCall| t) (and (and (|Set#IsMember| t ($Box intType (int_2_U (|$let#3_a| t)))) (|Set#IsMember| t ($Box intType (int_2_U (|$let#3_b| t))))) (or (not (= (|$let#3_a| t) (|$let#3_b| t))) (not true))))
 :pattern ( (|$let#3_b| t))
 :pattern ( (|$let#3_a| t))
)))
(assert (forall ((a@@5 T@U) (b@@2 T@U) ) (! (= (|Set#Union| (|Set#Union| a@@5 b@@2) b@@2) (|Set#Union| a@@5 b@@2))
 :pattern ( (|Set#Union| (|Set#Union| a@@5 b@@2) b@@2))
)))
(assert (forall ((a@@6 T@U) (b@@3 T@U) (o@@1 T@U) ) (! (= (|Set#IsMember| (|Set#Difference| a@@6 b@@3) o@@1)  (and (|Set#IsMember| a@@6 o@@1) (not (|Set#IsMember| b@@3 o@@1))))
 :pattern ( (|Set#IsMember| (|Set#Difference| a@@6 b@@3) o@@1))
)))
(assert (forall ((x@@5 Int) ) (! (= (LitInt x@@5) x@@5)
 :pattern ( (LitInt x@@5))
)))
(assert (forall ((x@@6 T@U) (T T@T) ) (! (= (Lit T x@@6) x@@6)
 :pattern ( (Lit T x@@6))
)))
(assert (forall ((x@@7 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@7)) x@@7)
 :pattern ( ($Unbox T@@0 x@@7))
)))
(assert (forall ((a@@7 T@U) (b@@4 T@U) ) (! (= (|Set#Disjoint| a@@7 b@@4) (forall ((o@@2 T@U) ) (!  (or (not (|Set#IsMember| a@@7 o@@2)) (not (|Set#IsMember| b@@4 o@@2)))
 :pattern ( (|Set#IsMember| a@@7 o@@2))
 :pattern ( (|Set#IsMember| b@@4 o@@2))
)))
 :pattern ( (|Set#Disjoint| a@@7 b@@4))
)))
(assert (= (Ctor SetType) 3))
(assert (forall ((v T@U) (t0 T@U) ) (! (= ($Is SetType v (TSet t0)) (forall ((bx T@U) ) (!  (=> (|Set#IsMember| v bx) ($IsBox bx t0))
 :pattern ( (|Set#IsMember| v bx))
)))
 :pattern ( ($Is SetType v (TSet t0)))
)))
(assert (forall ((v@@0 T@U) (t@@0 T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t@@0 h) ($IsAlloc T@@1 v@@0 t@@0 h))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t@@0 h))
)))
(assert (forall ((a@@8 T@U) (b@@5 T@U) (o@@3 T@U) ) (! (= (|Set#IsMember| (|Set#Union| a@@8 b@@5) o@@3)  (or (|Set#IsMember| a@@8 o@@3) (|Set#IsMember| b@@5 o@@3)))
 :pattern ( (|Set#IsMember| (|Set#Union| a@@8 b@@5) o@@3))
)))
(assert (forall ((a@@9 T@U) (b@@6 T@U) ) (!  (=> (|Set#Disjoint| a@@9 b@@6) (and (= (|Set#Difference| (|Set#Union| a@@9 b@@6) a@@9) b@@6) (= (|Set#Difference| (|Set#Union| a@@9 b@@6) b@@6) a@@9)))
 :pattern ( (|Set#Union| a@@9 b@@6))
)))
(assert (forall ((a@@10 T@U) (b@@7 T@U) ) (!  (=> (|Set#Equal| a@@10 b@@7) (= a@@10 b@@7))
 :pattern ( (|Set#Equal| a@@10 b@@7))
)))
(assert (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 TInt) (and (= ($Box intType ($Unbox intType bx@@0)) bx@@0) ($Is intType ($Unbox intType bx@@0) TInt)))
 :pattern ( ($IsBox bx@@0 TInt))
)))
(assert (forall ((v@@1 T@U) (t@@1 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@1) t@@1) ($Is T@@2 v@@1 t@@1))
 :pattern ( ($IsBox ($Box T@@2 v@@1) t@@1))
)))
(assert (forall ((v@@2 T@U) (t0@@0 T@U) (h@@0 T@U) ) (! (= ($IsAlloc SetType v@@2 (TSet t0@@0) h@@0) (forall ((bx@@1 T@U) ) (!  (=> (|Set#IsMember| v@@2 bx@@1) ($IsAllocBox bx@@1 t0@@0 h@@0))
 :pattern ( (|Set#IsMember| v@@2 bx@@1))
)))
 :pattern ( ($IsAlloc SetType v@@2 (TSet t0@@0) h@@0))
)))
(assert (forall ((t@@2 T@U) ) (! (= (Inv0_TSet (TSet t@@2)) t@@2)
 :pattern ( (TSet t@@2))
)))
(assert (forall ((t@@3 T@U) ) (! (= (Tag (TSet t@@3)) TagSet)
 :pattern ( (TSet t@@3))
)))
(assert (forall ((x@@8 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@8)) x@@8)
 :pattern ( ($Box T@@3 x@@8))
)))
(assert (forall ((a@@11 T@U) (b@@8 T@U) ) (! (= (|Set#Union| a@@11 (|Set#Union| a@@11 b@@8)) (|Set#Union| a@@11 b@@8))
 :pattern ( (|Set#Union| a@@11 (|Set#Union| a@@11 b@@8)))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall ((t0@@1 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0@@1 t1 t2 (MapType0Store t0@@1 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 4)) (= (Ctor FieldType) 5)) (forall ((t0@@2 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@2 t1@@0 (MapType1Store t0@@2 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :weight 0
))) (= (Ctor BoxType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((x@@9 Int) (y@@3 Int) ) (! (= (Mul x@@9 y@@3) (* x@@9 y@@3))
 :pattern ( (Mul x@@9 y@@3))
)))
(assert (forall ((bx@@2 T@U) (t@@4 T@U) ) (!  (=> ($IsBox bx@@2 (TSet t@@4)) (and (= ($Box SetType ($Unbox SetType bx@@2)) bx@@2) ($Is SetType ($Unbox SetType bx@@2) (TSet t@@4))))
 :pattern ( ($IsBox bx@@2 (TSet t@@4)))
)))
(assert (forall ((a@@12 T@U) (b@@9 T@U) ) (! (= (|Set#Equal| a@@12 b@@9) (forall ((o@@4 T@U) ) (! (= (|Set#IsMember| a@@12 o@@4) (|Set#IsMember| b@@9 o@@4))
 :pattern ( (|Set#IsMember| a@@12 o@@4))
 :pattern ( (|Set#IsMember| b@@9 o@@4))
)))
 :pattern ( (|Set#Equal| a@@12 b@@9))
)))
(assert (forall ((x@@10 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@10))) (Lit BoxType ($Box intType (int_2_U x@@10))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@10))))
)))
(assert (forall ((x@@11 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@11)) (Lit BoxType ($Box T@@4 x@@11)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@11)))
)))
(assert (forall ((h@@1 T@U) (v@@3 T@U) ) (! ($IsAlloc intType v@@3 TInt h@@1)
 :pattern ( ($IsAlloc intType v@@3 TInt h@@1))
)))
(assert  (=> |$let#0$canCall| (= |$let#0_w| (Mul (LitInt 2) |$let#0_w|))))
(assert (forall ((v@@4 T@U) ) (! ($Is intType v@@4 TInt)
 :pattern ( ($Is intType v@@4 TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |t#0@0| () T@U)
(declare-fun |a#1@0| () Int)
(declare-fun |b#1@0| () Int)
(declare-fun |a#2@0| () Int)
(declare-fun |b#2@0| () Int)
(declare-fun |s#0@0| () T@U)
(declare-fun |y#2_1@0| () Int)
(declare-fun |y#2_2@0| () Int)
(declare-fun |x#0@2| () Int)
(declare-fun |y#1_1@0| () Int)
(declare-fun |y#1_2@0| () Int)
(declare-fun |x#0@1| () Int)
(declare-fun |w#0_1@0| () Int)
(declare-fun |w#0_2@0| () Int)
(declare-fun |x#0@0| () Int)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $Heap () T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |t#0| () T@U)
(declare-fun |s#0| () T@U)
(declare-fun $FunctionContextHeight () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 30) (let ((anon18_Else_correct true))
(let ((anon20_Else_correct true))
(let ((anon16_correct  (and (=> (= (ControlFlow 0 6) (- 0 8)) (or (and (and ($Is intType (int_2_U (LitInt 0)) TInt) ($Is intType (int_2_U (LitInt 0)) TInt)) (and (and (|Set#IsMember| |t#0@0| ($Box intType (int_2_U (LitInt 0)))) (|Set#IsMember| |t#0@0| ($Box intType (int_2_U (LitInt 0))))) (or (not (= 0 0)) (not true)))) (or (exists ((|a#0| T@U) )  (and ($Is intType (int_2_U (LitInt 0)) TInt) (and (and (|Set#IsMember| |t#0@0| ($Box intType |a#0|)) (|Set#IsMember| |t#0@0| ($Box intType (int_2_U (LitInt 0))))) (or (not (= (U_2_int |a#0|) 0)) (not true))))) (or (exists ((|b#0| T@U) )  (and ($Is intType (int_2_U (LitInt 0)) TInt) (and (and (|Set#IsMember| |t#0@0| ($Box intType (int_2_U (LitInt 0)))) (|Set#IsMember| |t#0@0| ($Box intType |b#0|))) (or (not (= 0 (U_2_int |b#0|))) (not true))))) (exists ((|a#0@@0| T@U) (|b#0@@0| T@U) )  (and (and (|Set#IsMember| |t#0@0| ($Box intType |a#0@@0|)) (|Set#IsMember| |t#0@0| ($Box intType |b#0@@0|))) (or (not (= (U_2_int |a#0@@0|) (U_2_int |b#0@@0|))) (not true)))))))) (=> (or (and (and ($Is intType (int_2_U (LitInt 0)) TInt) ($Is intType (int_2_U (LitInt 0)) TInt)) (and (and (|Set#IsMember| |t#0@0| ($Box intType (int_2_U (LitInt 0)))) (|Set#IsMember| |t#0@0| ($Box intType (int_2_U (LitInt 0))))) (or (not (= 0 0)) (not true)))) (or (exists ((|a#0@@1| Int) )  (and ($Is intType (int_2_U (LitInt 0)) TInt) (and (and (|Set#IsMember| |t#0@0| ($Box intType (int_2_U |a#0@@1|))) (|Set#IsMember| |t#0@0| ($Box intType (int_2_U (LitInt 0))))) (or (not (= |a#0@@1| 0)) (not true))))) (or (exists ((|b#0@@1| Int) )  (and ($Is intType (int_2_U (LitInt 0)) TInt) (and (and (|Set#IsMember| |t#0@0| ($Box intType (int_2_U (LitInt 0)))) (|Set#IsMember| |t#0@0| ($Box intType (int_2_U |b#0@@1|)))) (or (not (= 0 |b#0@@1|)) (not true))))) (exists ((|a#0@@2| Int) (|b#0@@2| Int) )  (and (and (|Set#IsMember| |t#0@0| ($Box intType (int_2_U |a#0@@2|))) (|Set#IsMember| |t#0@0| ($Box intType (int_2_U |b#0@@2|)))) (or (not (= |a#0@@2| |b#0@@2|)) (not true))))))) (=> (and (and (and (|Set#IsMember| |t#0@0| ($Box intType (int_2_U |a#1@0|))) (|Set#IsMember| |t#0@0| ($Box intType (int_2_U |b#1@0|)))) (or (not (= |a#1@0| |b#1@0|)) (not true))) (and (and (|Set#IsMember| |t#0@0| ($Box intType (int_2_U |a#2@0|))) (|Set#IsMember| |t#0@0| ($Box intType (int_2_U |b#2@0|)))) (or (not (= |a#2@0| |b#2@0|)) (not true)))) (and (=> (= (ControlFlow 0 6) (- 0 7)) (|Set#Equal| (|Set#Union| (|Set#UnionOne| |Set#Empty| ($Box intType (int_2_U |a#1@0|))) (|Set#UnionOne| |Set#Empty| ($Box intType (int_2_U |b#1@0|)))) (|Set#Union| (|Set#UnionOne| |Set#Empty| ($Box intType (int_2_U |a#2@0|))) (|Set#UnionOne| |Set#Empty| ($Box intType (int_2_U |b#2@0|)))))) (=> (|Set#Equal| (|Set#Union| (|Set#UnionOne| |Set#Empty| ($Box intType (int_2_U |a#1@0|))) (|Set#UnionOne| |Set#Empty| ($Box intType (int_2_U |b#1@0|)))) (|Set#Union| (|Set#UnionOne| |Set#Empty| ($Box intType (int_2_U |a#2@0|))) (|Set#UnionOne| |Set#Empty| ($Box intType (int_2_U |b#2@0|))))) (=> (and (and (|$let#3$canCall| |t#0@0|) (|$let#3$canCall| |t#0@0|)) (and (= |s#0@0| (let ((|b#0@@3| (|$let#3_b| |t#0@0|)))
(let ((|a#0@@3| (|$let#3_a| |t#0@0|)))
(|Set#Union| (|Set#UnionOne| |Set#Empty| ($Box intType (int_2_U |a#0@@3|))) (|Set#UnionOne| |Set#Empty| ($Box intType (int_2_U |b#0@@3|))))))) (= (ControlFlow 0 6) (- 0 5)))) (|Set#Equal| |s#0@0| |t#0@0|)))))))))
(let ((anon25_Else_correct  (=> (and (not (and (|Set#IsMember| |t#0@0| ($Box intType (int_2_U |a#1@0|))) (|Set#IsMember| |t#0@0| ($Box intType (int_2_U |b#1@0|))))) (= (ControlFlow 0 10) 6)) anon16_correct)))
(let ((anon25_Then_correct  (=> (and (and (|Set#IsMember| |t#0@0| ($Box intType (int_2_U |a#1@0|))) (|Set#IsMember| |t#0@0| ($Box intType (int_2_U |b#1@0|)))) (= (ControlFlow 0 9) 6)) anon16_correct)))
(let ((anon24_Else_correct  (=> (not (|Set#IsMember| |t#0@0| ($Box intType (int_2_U |a#1@0|)))) (and (=> (= (ControlFlow 0 12) 9) anon25_Then_correct) (=> (= (ControlFlow 0 12) 10) anon25_Else_correct)))))
(let ((anon24_Then_correct  (=> (|Set#IsMember| |t#0@0| ($Box intType (int_2_U |a#1@0|))) (and (=> (= (ControlFlow 0 11) 9) anon25_Then_correct) (=> (= (ControlFlow 0 11) 10) anon25_Else_correct)))))
(let ((anon23_Then_correct  (and (=> (= (ControlFlow 0 13) 11) anon24_Then_correct) (=> (= (ControlFlow 0 13) 12) anon24_Else_correct))))
(let ((anon23_Else_correct true))
(let ((anon11_correct  (=> (= |t#0@0| (Lit SetType (|Set#UnionOne| (|Set#UnionOne| |Set#Empty| ($Box intType (int_2_U (LitInt 3)))) ($Box intType (int_2_U (LitInt 5)))))) (and (=> (= (ControlFlow 0 14) 13) anon23_Then_correct) (=> (= (ControlFlow 0 14) 4) anon23_Else_correct)))))
(let ((anon18_Then_correct  (and (=> (= (ControlFlow 0 24) (- 0 26)) (or (and ($Is intType (int_2_U (LitInt (- 0 1))) TInt) (U_2_bool (Lit boolType (bool_2_U (< (- 0 1) 0))))) (or (and ($Is intType (int_2_U (LitInt 0)) TInt) (U_2_bool (Lit boolType (bool_2_U (< 0 0))))) (exists ((|y#2_0| Int) ) (< |y#2_0| 0))))) (=> (or (and ($Is intType (int_2_U (LitInt (- 0 1))) TInt) (U_2_bool (Lit boolType (bool_2_U (< (- 0 1) 0))))) (or (and ($Is intType (int_2_U (LitInt 0)) TInt) (U_2_bool (Lit boolType (bool_2_U (< 0 0))))) (exists ((|y#2_0@@0| Int) ) (< |y#2_0@@0| 0)))) (=> (and (< |y#2_1@0| 0) (< |y#2_2@0| 0)) (and (=> (= (ControlFlow 0 24) (- 0 25)) (= |y#2_1@0| |y#2_2@0|)) (=> (= |y#2_1@0| |y#2_2@0|) (=> (and (and |$let#2$canCall| |$let#2$canCall|) (and (= |x#0@2| (let ((|y#2_0@@1| |$let#2_y|))
|y#2_0@@1|)) (= (ControlFlow 0 24) 14))) anon11_correct))))))))
(let ((anon17_Then_correct  (and (=> (= (ControlFlow 0 28) 24) anon18_Then_correct) (=> (= (ControlFlow 0 28) 27) anon18_Else_correct))))
(let ((anon20_Then_correct  (and (=> (= (ControlFlow 0 19) (- 0 21)) (or (and ($Is intType (int_2_U (LitInt (- 0 1))) TInt) (U_2_bool (Lit boolType (bool_2_U (< (- 0 1) 0))))) (or (and ($Is intType (int_2_U (LitInt 0)) TInt) (U_2_bool (Lit boolType (bool_2_U (< 0 0))))) (exists ((|y#1_0| Int) ) (< |y#1_0| 0))))) (=> (or (and ($Is intType (int_2_U (LitInt (- 0 1))) TInt) (U_2_bool (Lit boolType (bool_2_U (< (- 0 1) 0))))) (or (and ($Is intType (int_2_U (LitInt 0)) TInt) (U_2_bool (Lit boolType (bool_2_U (< 0 0))))) (exists ((|y#1_0@@0| Int) ) (< |y#1_0@@0| 0)))) (=> (and (< |y#1_1@0| 0) (< |y#1_2@0| 0)) (and (=> (= (ControlFlow 0 19) (- 0 20)) (= (Mul |y#1_1@0| (LitInt 0)) (Mul |y#1_2@0| (LitInt 0)))) (=> (= (Mul |y#1_1@0| (LitInt 0)) (Mul |y#1_2@0| (LitInt 0))) (=> (and (and |$let#1$canCall| |$let#1$canCall|) (and (= |x#0@1| (let ((|y#1_0@@1| |$let#1_y|))
(Mul |y#1_0@@1| (LitInt 0)))) (= (ControlFlow 0 19) 14))) anon11_correct))))))))
(let ((anon19_Then_correct  (and (=> (= (ControlFlow 0 23) 19) anon20_Then_correct) (=> (= (ControlFlow 0 23) 22) anon20_Else_correct))))
(let ((anon22_Then_correct  (and (=> (= (ControlFlow 0 15) (- 0 17)) (or (and ($Is intType (int_2_U (LitInt 0)) TInt) (= (LitInt 0) (LitInt (Mul (LitInt 2) (LitInt 0))))) (exists ((|w#0_0| Int) ) (= |w#0_0| (Mul (LitInt 2) |w#0_0|))))) (=> (or (and ($Is intType (int_2_U (LitInt 0)) TInt) (= (LitInt 0) (LitInt (Mul (LitInt 2) (LitInt 0))))) (exists ((|w#0_0@@0| Int) ) (= |w#0_0@@0| (Mul (LitInt 2) |w#0_0@@0|)))) (=> (and (= |w#0_1@0| (Mul (LitInt 2) |w#0_1@0|)) (= |w#0_2@0| (Mul (LitInt 2) |w#0_2@0|))) (and (=> (= (ControlFlow 0 15) (- 0 16)) (= |w#0_1@0| |w#0_2@0|)) (=> (= |w#0_1@0| |w#0_2@0|) (=> (and (and |$let#0$canCall| |$let#0$canCall|) (and (= |x#0@0| (let ((|w#0_0@@1| |$let#0_w|))
|w#0_0@@1|)) (= (ControlFlow 0 15) 14))) anon11_correct))))))))
(let ((anon22_Else_correct true))
(let ((anon21_Then_correct  (and (=> (= (ControlFlow 0 18) 15) anon22_Then_correct) (=> (= (ControlFlow 0 18) 3) anon22_Else_correct))))
(let ((anon21_Else_correct  (=> (and (and (and (not (U_2_bool (Lit boolType (bool_2_U true)))) (not (U_2_bool (Lit boolType (bool_2_U true))))) (not (U_2_bool (Lit boolType (bool_2_U true))))) (= (ControlFlow 0 2) (- 0 1))) false)))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (and (and (and (=> (= (ControlFlow 0 29) 28) anon17_Then_correct) (=> (= (ControlFlow 0 29) 23) anon19_Then_correct)) (=> (= (ControlFlow 0 29) 18) anon21_Then_correct)) (=> (= (ControlFlow 0 29) 2) anon21_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (=> (and (and ($Is SetType |t#0| (TSet TInt)) ($IsAlloc SetType |t#0| (TSet TInt) $Heap)) true) (=> (and (and (and ($Is SetType |s#0| (TSet TInt)) ($IsAlloc SetType |s#0| (TSet TInt) $Heap)) true) (and (= 0 $FunctionContextHeight) (= (ControlFlow 0 30) 29))) anon0_correct)))))
PreconditionGeneratedEntry_correct)))))))))))))))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 24) (- 25))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
