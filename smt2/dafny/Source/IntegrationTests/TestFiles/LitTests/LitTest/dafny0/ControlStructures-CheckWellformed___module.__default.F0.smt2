(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 (T@T) Int)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 () T@T)
(declare-fun $generated@@12 (Bool) T@U)
(declare-fun $generated@@13 (T@U) Bool)
(declare-fun $generated@@14 (Int) T@U)
(declare-fun $generated@@15 (T@U) Int)
(declare-fun $generated@@16 (Real) T@U)
(declare-fun $generated@@17 (T@U) Real)
(declare-fun $generated@@24 (T@U) T@U)
(declare-fun $generated@@25 (T@U) T@U)
(declare-fun $generated@@26 () T@U)
(declare-fun $generated@@27 () T@U)
(declare-fun $generated@@28 () T@U)
(declare-fun $generated@@29 () T@U)
(declare-fun $generated@@30 (T@T T@U T@U) Bool)
(declare-fun $generated@@31 () T@T)
(declare-fun $generated@@32 () T@U)
(declare-fun $generated@@33 (Int) Int)
(declare-fun $generated@@35 (T@T T@U) T@U)
(declare-fun $generated@@38 (T@U) Bool)
(declare-fun $generated@@40 (T@U) Bool)
(declare-fun $generated@@42 (T@U) Bool)
(declare-fun $generated@@44 (T@U) Bool)
(declare-fun $generated@@46 (T@T T@U) T@U)
(declare-fun $generated@@47 (T@T T@U) T@U)
(declare-fun $generated@@54 () Int)
(declare-fun $generated@@55 (T@U) Int)
(declare-fun $generated@@56 (T@U) Bool)
(declare-fun $generated@@61 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@62 () T@T)
(declare-fun $generated@@63 () T@T)
(declare-fun $generated@@64 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@65 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@66 () T@T)
(declare-fun $generated@@67 (T@T T@T) T@T)
(declare-fun $generated@@68 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@69 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@70 (T@T) T@T)
(declare-fun $generated@@71 (T@T) T@T)
(declare-fun $generated@@120 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@8 $generated@@9) 0) (= ($generated@@8 $generated@@10) 1)) (= ($generated@@8 $generated@@11) 2)) (forall (($generated@@18 Bool) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 Real) ) (! (= ($generated@@17 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 T@U) ) (! (= ($generated@@16 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7)
)
(assert (= ($generated@@24 $generated) $generated@@0))
(assert (= ($generated@@25 $generated@@26) $generated@@3))
(assert (= ($generated@@25 $generated@@27) $generated@@4))
(assert (= ($generated@@25 $generated@@28) $generated@@5))
(assert (= ($generated@@25 $generated@@29) $generated@@6))
(assert (= ($generated@@8 $generated@@31) 3))
(assert ($generated@@30 $generated@@31 $generated@@26 $generated@@32))
(assert ($generated@@30 $generated@@31 $generated@@27 $generated@@32))
(assert ($generated@@30 $generated@@31 $generated@@28 $generated@@32))
(assert ($generated@@30 $generated@@31 $generated@@29 $generated@@32))
(assert (forall (($generated@@34 Int) ) (! (= ($generated@@33 $generated@@34) $generated@@34)
 :pattern ( ($generated@@33 $generated@@34))
)))
(assert (forall (($generated@@36 T@U) ($generated@@37 T@T) ) (! (= ($generated@@35 $generated@@37 $generated@@36) $generated@@36)
 :pattern ( ($generated@@35 $generated@@37 $generated@@36))
)))
(assert (forall (($generated@@39 T@U) ) (! (= ($generated@@38 $generated@@39) (= ($generated@@25 $generated@@39) $generated@@3))
 :pattern ( ($generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ) (! (= ($generated@@40 $generated@@41) (= ($generated@@25 $generated@@41) $generated@@4))
 :pattern ( ($generated@@40 $generated@@41))
)))
(assert (forall (($generated@@43 T@U) ) (! (= ($generated@@42 $generated@@43) (= ($generated@@25 $generated@@43) $generated@@5))
 :pattern ( ($generated@@42 $generated@@43))
)))
(assert (forall (($generated@@45 T@U) ) (! (= ($generated@@44 $generated@@45) (= ($generated@@25 $generated@@45) $generated@@6))
 :pattern ( ($generated@@44 $generated@@45))
)))
(assert (forall (($generated@@48 T@U) ($generated@@49 T@T) ) (! (= ($generated@@47 $generated@@49 ($generated@@46 $generated@@49 $generated@@48)) $generated@@48)
 :pattern ( ($generated@@46 $generated@@49 $generated@@48))
)))
(assert (forall (($generated@@50 T@U) ) (!  (=> ($generated@@38 $generated@@50) (= $generated@@50 $generated@@26))
 :pattern ( ($generated@@38 $generated@@50))
)))
(assert (forall (($generated@@51 T@U) ) (!  (=> ($generated@@40 $generated@@51) (= $generated@@51 $generated@@27))
 :pattern ( ($generated@@40 $generated@@51))
)))
(assert (forall (($generated@@52 T@U) ) (!  (=> ($generated@@42 $generated@@52) (= $generated@@52 $generated@@28))
 :pattern ( ($generated@@42 $generated@@52))
)))
(assert (forall (($generated@@53 T@U) ) (!  (=> ($generated@@44 $generated@@53) (= $generated@@53 $generated@@29))
 :pattern ( ($generated@@44 $generated@@53))
)))
(assert  (=> (<= 1 $generated@@54) (forall (($generated@@57 T@U) ) (!  (=> (or ($generated@@56 $generated@@57) (and (< 1 $generated@@54) ($generated@@30 $generated@@31 $generated@@57 $generated@@32))) (= ($generated@@55 $generated@@57) (ite ($generated@@38 $generated@@57) 0 (ite ($generated@@40 $generated@@57) 2 80))))
 :pattern ( ($generated@@55 $generated@@57))
))))
(assert  (=> (<= 1 $generated@@54) (forall (($generated@@58 T@U) ) (!  (=> (or ($generated@@56 ($generated@@35 $generated@@31 $generated@@58)) (and (< 1 $generated@@54) ($generated@@30 $generated@@31 $generated@@58 $generated@@32))) (= ($generated@@55 ($generated@@35 $generated@@31 $generated@@58)) (ite ($generated@@38 ($generated@@35 $generated@@31 $generated@@58)) 0 (ite ($generated@@40 ($generated@@35 $generated@@31 $generated@@58)) 2 80))))
 :weight 3
 :pattern ( ($generated@@55 ($generated@@35 $generated@@31 $generated@@58)))
))))
(assert (forall (($generated@@59 T@U) ($generated@@60 T@T) ) (! (= ($generated@@46 $generated@@60 ($generated@@47 $generated@@60 $generated@@59)) $generated@@59)
 :pattern ( ($generated@@47 $generated@@60 $generated@@59))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@72 T@T) ($generated@@73 T@T) ($generated@@74 T@T) ($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ) (! (= ($generated@@61 $generated@@72 $generated@@73 $generated@@74 ($generated@@68 $generated@@72 $generated@@73 $generated@@74 $generated@@76 $generated@@77 $generated@@78 $generated@@75) $generated@@77 $generated@@78) $generated@@75)
 :weight 0
)) (and (forall (($generated@@79 T@T) ($generated@@80 T@T) ($generated@@81 T@T) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ) (!  (or (= $generated@@84 $generated@@86) (= ($generated@@61 $generated@@79 $generated@@80 $generated@@81 ($generated@@68 $generated@@79 $generated@@80 $generated@@81 $generated@@83 $generated@@84 $generated@@85 $generated@@82) $generated@@86 $generated@@87) ($generated@@61 $generated@@79 $generated@@80 $generated@@81 $generated@@83 $generated@@86 $generated@@87)))
 :weight 0
)) (forall (($generated@@88 T@T) ($generated@@89 T@T) ($generated@@90 T@T) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ) (!  (or (= $generated@@94 $generated@@96) (= ($generated@@61 $generated@@88 $generated@@89 $generated@@90 ($generated@@68 $generated@@88 $generated@@89 $generated@@90 $generated@@92 $generated@@93 $generated@@94 $generated@@91) $generated@@95 $generated@@96) ($generated@@61 $generated@@88 $generated@@89 $generated@@90 $generated@@92 $generated@@95 $generated@@96)))
 :weight 0
)))) (= ($generated@@8 $generated@@62) 4)) (= ($generated@@8 $generated@@63) 5)) (forall (($generated@@97 T@T) ($generated@@98 T@T) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ) (! (= ($generated@@65 $generated@@97 $generated@@98 ($generated@@69 $generated@@97 $generated@@98 $generated@@100 $generated@@101 $generated@@99) $generated@@101) $generated@@99)
 :weight 0
))) (forall (($generated@@102 T@T) ($generated@@103 T@T) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ) (!  (or (= $generated@@106 $generated@@107) (= ($generated@@65 $generated@@102 $generated@@103 ($generated@@69 $generated@@102 $generated@@103 $generated@@105 $generated@@106 $generated@@104) $generated@@107) ($generated@@65 $generated@@102 $generated@@103 $generated@@105 $generated@@107)))
 :weight 0
))) (= ($generated@@8 $generated@@66) 6)) (forall (($generated@@108 T@T) ($generated@@109 T@T) ) (= ($generated@@8 ($generated@@67 $generated@@108 $generated@@109)) 7))) (forall (($generated@@110 T@T) ($generated@@111 T@T) ) (! (= ($generated@@70 ($generated@@67 $generated@@110 $generated@@111)) $generated@@110)
 :pattern ( ($generated@@67 $generated@@110 $generated@@111))
))) (forall (($generated@@112 T@T) ($generated@@113 T@T) ) (! (= ($generated@@71 ($generated@@67 $generated@@112 $generated@@113)) $generated@@113)
 :pattern ( ($generated@@67 $generated@@112 $generated@@113))
))))
(assert (forall (($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 Bool) ($generated@@118 T@U) ($generated@@119 T@U) ) (! (= ($generated@@13 ($generated@@61 $generated@@62 $generated@@63 $generated@@9 ($generated@@64 $generated@@114 $generated@@115 $generated@@116 $generated@@117) $generated@@118 $generated@@119))  (=> (and (or (not (= $generated@@118 $generated@@114)) (not true)) ($generated@@13 ($generated@@46 $generated@@9 ($generated@@65 $generated@@63 $generated@@66 ($generated@@65 $generated@@62 ($generated@@67 $generated@@63 $generated@@66) $generated@@115 $generated@@118) $generated@@116)))) $generated@@117))
 :pattern ( ($generated@@61 $generated@@62 $generated@@63 $generated@@9 ($generated@@64 $generated@@114 $generated@@115 $generated@@116 $generated@@117) $generated@@118 $generated@@119))
)))
(assert (= ($generated@@24 $generated@@32) $generated@@2))
(assert (= ($generated@@120 $generated@@32) $generated@@7))
(assert (= $generated@@26 ($generated@@35 $generated@@31 $generated@@26)))
(assert (= $generated@@27 ($generated@@35 $generated@@31 $generated@@27)))
(assert (= $generated@@28 ($generated@@35 $generated@@31 $generated@@28)))
(assert (= $generated@@29 ($generated@@35 $generated@@31 $generated@@29)))
(assert (forall (($generated@@121 Int) ) (! (= ($generated@@47 $generated@@10 ($generated@@14 ($generated@@33 $generated@@121))) ($generated@@35 $generated@@66 ($generated@@47 $generated@@10 ($generated@@14 $generated@@121))))
 :pattern ( ($generated@@47 $generated@@10 ($generated@@14 ($generated@@33 $generated@@121))))
)))
(assert (forall (($generated@@122 T@U) ($generated@@123 T@T) ) (! (= ($generated@@47 $generated@@123 ($generated@@35 $generated@@123 $generated@@122)) ($generated@@35 $generated@@66 ($generated@@47 $generated@@123 $generated@@122)))
 :pattern ( ($generated@@47 $generated@@123 ($generated@@35 $generated@@123 $generated@@122)))
)))
(assert (forall (($generated@@124 T@U) ) (!  (=> ($generated@@30 $generated@@31 $generated@@124 $generated@@32) (or (or (or ($generated@@38 $generated@@124) ($generated@@40 $generated@@124)) ($generated@@42 $generated@@124)) ($generated@@44 $generated@@124)))
 :pattern ( ($generated@@44 $generated@@124) ($generated@@30 $generated@@31 $generated@@124 $generated@@32))
 :pattern ( ($generated@@42 $generated@@124) ($generated@@30 $generated@@31 $generated@@124 $generated@@32))
 :pattern ( ($generated@@40 $generated@@124) ($generated@@30 $generated@@31 $generated@@124 $generated@@32))
 :pattern ( ($generated@@38 $generated@@124) ($generated@@30 $generated@@31 $generated@@124 $generated@@32))
)))
(assert (forall (($generated@@125 T@U) ) (! ($generated@@30 $generated@@10 $generated@@125 $generated)
 :pattern ( ($generated@@30 $generated@@10 $generated@@125 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@126 () T@U)
(declare-fun $generated@@127 () T@U)
(declare-fun $generated@@128 () T@U)
(declare-fun $generated@@129 () T@U)
(declare-fun $generated@@130 (T@U) Bool)
(declare-fun $generated@@131 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 12) (let (($generated@@132 true))
(let (($generated@@133  (=> (and (= $generated@@126 $generated@@28) (= (ControlFlow 0 6) (- 0 5))) false)))
(let (($generated@@134  (=> (or (not (= $generated@@126 $generated@@29)) (not true)) (and (=> (= (ControlFlow 0 8) 6) $generated@@133) (=> (= (ControlFlow 0 8) 7) $generated@@132)))))
(let (($generated@@135 true))
(let (($generated@@136  (=> (or (not (= $generated@@126 $generated@@27)) (not true)) (and (=> (= (ControlFlow 0 9) 4) $generated@@135) (=> (= (ControlFlow 0 9) 8) $generated@@134)))))
(let (($generated@@137 true))
(let (($generated@@138  (=> (or (not (= $generated@@126 $generated@@26)) (not true)) (and (=> (= (ControlFlow 0 10) 3) $generated@@137) (=> (= (ControlFlow 0 10) 9) $generated@@136)))))
(let (($generated@@139 true))
(let (($generated@@140 true))
(let (($generated@@141  (=> (= $generated@@127 ($generated@@64 $generated@@128 $generated@@129 $generated@@1 false)) (and (and (=> (= (ControlFlow 0 11) 1) $generated@@140) (=> (= (ControlFlow 0 11) 2) $generated@@139)) (=> (= (ControlFlow 0 11) 10) $generated@@138)))))
(let (($generated@@142  (=> (and (and (and ($generated@@130 $generated@@129) ($generated@@131 $generated@@129)) ($generated@@30 $generated@@31 $generated@@126 $generated@@32)) (and (= 1 $generated@@54) (= (ControlFlow 0 12) 11))) $generated@@141)))
$generated@@142))))))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 6) (- 5))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
