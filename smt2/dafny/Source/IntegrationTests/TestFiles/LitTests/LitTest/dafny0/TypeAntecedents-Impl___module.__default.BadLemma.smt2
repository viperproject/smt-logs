(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun alloc () T@U)
(declare-fun Tagclass._module.Wrapper () T@U)
(declare-fun Tagclass._module.Color () T@U)
(declare-fun |##_module.Wrapper.Wrap| () T@U)
(declare-fun |##_module.Color.Yellow| () T@U)
(declare-fun |##_module.Color.Blue| () T@U)
(declare-fun tytagFamily$Wrapper () T@U)
(declare-fun tytagFamily$Color () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun |$IsA#_module.Wrapper| (T@U) Bool)
(declare-fun _module.Wrapper.Wrap_q (T@U) Bool)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun |#_module.Color.Yellow| () T@U)
(declare-fun |#_module.Color.Blue| () T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun Tclass._module.Wrapper (T@U) T@U)
(declare-fun Tclass._module.Color () T@U)
(declare-fun |_module.Wrapper#Equal| (T@U T@U) Bool)
(declare-fun |_module.Color#Equal| (T@U T@U) Bool)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun _module.Color.Yellow_q (T@U) Bool)
(declare-fun _module.Color.Blue_q (T@U) Bool)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun |#_module.Wrapper.Wrap| (T@U) T@U)
(declare-fun _module.Wrapper._h0 (T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tag (T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun |$IsA#_module.Color| (T@U) Bool)
(declare-fun Tclass._module.Wrapper_0 (T@U) T@U)
(declare-fun BoxRank (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct alloc Tagclass._module.Wrapper Tagclass._module.Color |##_module.Wrapper.Wrap| |##_module.Color.Yellow| |##_module.Color.Blue| tytagFamily$Wrapper tytagFamily$Color)
)
(assert (forall ((d T@U) ) (!  (=> (|$IsA#_module.Wrapper| d) (_module.Wrapper.Wrap_q d))
 :pattern ( (|$IsA#_module.Wrapper| d))
)))
(assert (= (DatatypeCtorId |#_module.Color.Yellow|) |##_module.Color.Yellow|))
(assert (= (DatatypeCtorId |#_module.Color.Blue|) |##_module.Color.Blue|))
(assert (= (Ctor DatatypeTypeType) 3))
(assert (forall ((_module.Wrapper$T T@U) (d@@0 T@U) ) (!  (=> ($Is DatatypeTypeType d@@0 (Tclass._module.Wrapper _module.Wrapper$T)) (_module.Wrapper.Wrap_q d@@0))
 :pattern ( (_module.Wrapper.Wrap_q d@@0) ($Is DatatypeTypeType d@@0 (Tclass._module.Wrapper _module.Wrapper$T)))
)))
(assert ($Is DatatypeTypeType |#_module.Color.Yellow| Tclass._module.Color))
(assert ($Is DatatypeTypeType |#_module.Color.Blue| Tclass._module.Color))
(assert (forall ((a T@U) (b T@U) ) (! (= (|_module.Wrapper#Equal| a b) (= a b))
 :pattern ( (|_module.Wrapper#Equal| a b))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) ) (! (= (|_module.Color#Equal| a@@0 b@@0) (= a@@0 b@@0))
 :pattern ( (|_module.Color#Equal| a@@0 b@@0))
)))
(assert (forall ((x@@2 T@U) (T T@T) ) (! (= (Lit T x@@2) x@@2)
 :pattern ( (Lit T x@@2))
)))
(assert (forall ((d@@1 T@U) ) (! (= (_module.Wrapper.Wrap_q d@@1) (= (DatatypeCtorId d@@1) |##_module.Wrapper.Wrap|))
 :pattern ( (_module.Wrapper.Wrap_q d@@1))
)))
(assert (forall ((d@@2 T@U) ) (! (= (_module.Color.Yellow_q d@@2) (= (DatatypeCtorId d@@2) |##_module.Color.Yellow|))
 :pattern ( (_module.Color.Yellow_q d@@2))
)))
(assert (forall ((d@@3 T@U) ) (! (= (_module.Color.Blue_q d@@3) (= (DatatypeCtorId d@@3) |##_module.Color.Blue|))
 :pattern ( (_module.Color.Blue_q d@@3))
)))
(assert (forall ((x@@3 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@3)) x@@3)
 :pattern ( ($Unbox T@@0 x@@3))
)))
(assert (forall ((d@@4 T@U) ) (!  (=> (_module.Color.Yellow_q d@@4) (= d@@4 |#_module.Color.Yellow|))
 :pattern ( (_module.Color.Yellow_q d@@4))
)))
(assert (forall ((d@@5 T@U) ) (!  (=> (_module.Color.Blue_q d@@5) (= d@@5 |#_module.Color.Blue|))
 :pattern ( (_module.Color.Blue_q d@@5))
)))
(assert (forall ((d@@6 T@U) ) (!  (=> (_module.Wrapper.Wrap_q d@@6) (exists ((|a#1#0#0| T@U) ) (= d@@6 (|#_module.Wrapper.Wrap| |a#1#0#0|))))
 :pattern ( (_module.Wrapper.Wrap_q d@@6))
)))
(assert (forall ((a@@1 T@U) (b@@1 T@U) ) (! (= (|_module.Wrapper#Equal| a@@1 b@@1) (= (_module.Wrapper._h0 a@@1) (_module.Wrapper._h0 b@@1)))
 :pattern ( (|_module.Wrapper#Equal| a@@1 b@@1))
)))
(assert (forall ((v T@U) (t T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v) t h) ($IsAlloc T@@1 v t h))
 :pattern ( ($IsAllocBox ($Box T@@1 v) t h))
)))
(assert (forall ((_module.Wrapper$T@@0 T@U) ) (!  (and (= (Tag (Tclass._module.Wrapper _module.Wrapper$T@@0)) Tagclass._module.Wrapper) (= (TagFamily (Tclass._module.Wrapper _module.Wrapper$T@@0)) tytagFamily$Wrapper))
 :pattern ( (Tclass._module.Wrapper _module.Wrapper$T@@0))
)))
(assert (forall ((bx T@U) ) (!  (=> ($IsBox bx Tclass._module.Color) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx)) bx) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx) Tclass._module.Color)))
 :pattern ( ($IsBox bx Tclass._module.Color))
)))
(assert (forall ((_module.Wrapper$T@@1 T@U) (|a#2#0#0| T@U) ($h T@U) ) (!  (=> ($IsGoodHeap $h) (= ($IsAlloc DatatypeTypeType (|#_module.Wrapper.Wrap| |a#2#0#0|) (Tclass._module.Wrapper _module.Wrapper$T@@1) $h) ($IsAllocBox |a#2#0#0| _module.Wrapper$T@@1 $h)))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_module.Wrapper.Wrap| |a#2#0#0|) (Tclass._module.Wrapper _module.Wrapper$T@@1) $h))
)))
(assert (forall ((d@@7 T@U) ) (!  (=> (|$IsA#_module.Color| d@@7) (or (_module.Color.Yellow_q d@@7) (_module.Color.Blue_q d@@7)))
 :pattern ( (|$IsA#_module.Color| d@@7))
)))
(assert (forall ((d@@8 T@U) ) (!  (=> ($Is DatatypeTypeType d@@8 Tclass._module.Color) (or (_module.Color.Yellow_q d@@8) (_module.Color.Blue_q d@@8)))
 :pattern ( (_module.Color.Blue_q d@@8) ($Is DatatypeTypeType d@@8 Tclass._module.Color))
 :pattern ( (_module.Color.Yellow_q d@@8) ($Is DatatypeTypeType d@@8 Tclass._module.Color))
)))
(assert (forall ((v@@0 T@U) (t@@0 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@0) t@@0) ($Is T@@2 v@@0 t@@0))
 :pattern ( ($IsBox ($Box T@@2 v@@0) t@@0))
)))
(assert (forall ((a@@2 T@U) (b@@2 T@U) ) (!  (=> (and (_module.Color.Yellow_q a@@2) (_module.Color.Yellow_q b@@2)) (|_module.Color#Equal| a@@2 b@@2))
 :pattern ( (|_module.Color#Equal| a@@2 b@@2) (_module.Color.Yellow_q a@@2))
 :pattern ( (|_module.Color#Equal| a@@2 b@@2) (_module.Color.Yellow_q b@@2))
)))
(assert (forall ((a@@3 T@U) (b@@3 T@U) ) (!  (=> (and (_module.Color.Blue_q a@@3) (_module.Color.Blue_q b@@3)) (|_module.Color#Equal| a@@3 b@@3))
 :pattern ( (|_module.Color#Equal| a@@3 b@@3) (_module.Color.Blue_q a@@3))
 :pattern ( (|_module.Color#Equal| a@@3 b@@3) (_module.Color.Blue_q b@@3))
)))
(assert (forall ((_module.Wrapper$T@@2 T@U) ) (! (= (Tclass._module.Wrapper_0 (Tclass._module.Wrapper _module.Wrapper$T@@2)) _module.Wrapper$T@@2)
 :pattern ( (Tclass._module.Wrapper _module.Wrapper$T@@2))
)))
(assert (forall ((|a#0#0#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Wrapper.Wrap| |a#0#0#0|)) |##_module.Wrapper.Wrap|)
 :pattern ( (|#_module.Wrapper.Wrap| |a#0#0#0|))
)))
(assert (forall ((|a#4#0#0| T@U) ) (! (= (_module.Wrapper._h0 (|#_module.Wrapper.Wrap| |a#4#0#0|)) |a#4#0#0|)
 :pattern ( (|#_module.Wrapper.Wrap| |a#4#0#0|))
)))
(assert (forall ((x@@4 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@4)) x@@4)
 :pattern ( ($Box T@@3 x@@4))
)))
(assert (forall ((_module.Wrapper$T@@3 T@U) (|a#2#0#0@@0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Wrapper.Wrap| |a#2#0#0@@0|) (Tclass._module.Wrapper _module.Wrapper$T@@3)) ($IsBox |a#2#0#0@@0| _module.Wrapper$T@@3))
 :pattern ( ($Is DatatypeTypeType (|#_module.Wrapper.Wrap| |a#2#0#0@@0|) (Tclass._module.Wrapper _module.Wrapper$T@@3)))
)))
(assert (forall ((|a#5#0#0| T@U) ) (! (< (BoxRank |a#5#0#0|) (DtRank (|#_module.Wrapper.Wrap| |a#5#0#0|)))
 :pattern ( (|#_module.Wrapper.Wrap| |a#5#0#0|))
)))
(assert (forall ((d@@9 T@U) (_module.Wrapper$T@@4 T@U) ($h@@0 T@U) ) (!  (=> (and ($IsGoodHeap $h@@0) (and (_module.Wrapper.Wrap_q d@@9) ($IsAlloc DatatypeTypeType d@@9 (Tclass._module.Wrapper _module.Wrapper$T@@4) $h@@0))) ($IsAllocBox (_module.Wrapper._h0 d@@9) _module.Wrapper$T@@4 $h@@0))
 :pattern ( ($IsAllocBox (_module.Wrapper._h0 d@@9) _module.Wrapper$T@@4 $h@@0))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0 t1 t2 (MapType0Store t0 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 4)) (= (Ctor FieldType) 5)) (forall ((t0@@0 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 (MapType1Store t0@@0 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :weight 0
))) (= (Ctor BoxType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((d@@10 T@U) ) (! (= (BoxRank ($Box DatatypeTypeType d@@10)) (DtRank d@@10))
 :pattern ( (BoxRank ($Box DatatypeTypeType d@@10)))
)))
(assert (forall ((_module.Wrapper$T@@5 T@U) (bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 (Tclass._module.Wrapper _module.Wrapper$T@@5)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@0)) bx@@0) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@0) (Tclass._module.Wrapper _module.Wrapper$T@@5))))
 :pattern ( ($IsBox bx@@0 (Tclass._module.Wrapper _module.Wrapper$T@@5)))
)))
(assert (forall ((d@@11 T@U) ($h@@1 T@U) ) (!  (=> (and ($IsGoodHeap $h@@1) ($Is DatatypeTypeType d@@11 Tclass._module.Color)) ($IsAlloc DatatypeTypeType d@@11 Tclass._module.Color $h@@1))
 :pattern ( ($IsAlloc DatatypeTypeType d@@11 Tclass._module.Color $h@@1))
)))
(assert (= (Tag Tclass._module.Color) Tagclass._module.Color))
(assert (= (TagFamily Tclass._module.Color) tytagFamily$Color))
(assert (= |#_module.Color.Yellow| (Lit DatatypeTypeType |#_module.Color.Yellow|)))
(assert (= |#_module.Color.Blue| (Lit DatatypeTypeType |#_module.Color.Blue|)))
(assert (forall ((|a#3#0#0| T@U) ) (! (= (|#_module.Wrapper.Wrap| (Lit BoxType |a#3#0#0|)) (Lit DatatypeTypeType (|#_module.Wrapper.Wrap| |a#3#0#0|)))
 :pattern ( (|#_module.Wrapper.Wrap| (Lit BoxType |a#3#0#0|)))
)))
(assert (forall ((x@@5 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@5)) (Lit BoxType ($Box T@@4 x@@5)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@5)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $Heap () T@U)
(declare-fun |w0#0@0| () T@U)
(declare-fun |c0#0| () T@U)
(declare-fun |w1#0@0| () T@U)
(declare-fun |c1#0| () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |w0#0| () T@U)
(declare-fun |w1#0| () T@U)
(declare-fun $FunctionContextHeight () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 4) (let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (=> (and (and (= |w0#0@0| (|#_module.Wrapper.Wrap| ($Box DatatypeTypeType |c0#0|))) (= |w1#0@0| (|#_module.Wrapper.Wrap| ($Box DatatypeTypeType |c1#0|)))) (and (|$IsA#_module.Wrapper| |w0#0@0|) (|$IsA#_module.Wrapper| |w1#0@0|))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (|_module.Wrapper#Equal| |w0#0@0| |w1#0@0|)) (=> (|_module.Wrapper#Equal| |w0#0@0| |w1#0@0|) (=> (= (ControlFlow 0 2) (- 0 1)) (|_module.Color#Equal| |c0#0| |c1#0|))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (=> (and (and ($Is DatatypeTypeType |c0#0| Tclass._module.Color) ($IsAlloc DatatypeTypeType |c0#0| Tclass._module.Color $Heap)) (|$IsA#_module.Color| |c0#0|)) (=> (and (and (and (and ($Is DatatypeTypeType |c1#0| Tclass._module.Color) ($IsAlloc DatatypeTypeType |c1#0| Tclass._module.Color $Heap)) (|$IsA#_module.Color| |c1#0|)) (and (and ($Is DatatypeTypeType |w0#0| (Tclass._module.Wrapper Tclass._module.Color)) ($IsAlloc DatatypeTypeType |w0#0| (Tclass._module.Wrapper Tclass._module.Color) $Heap)) true)) (and (and (and ($Is DatatypeTypeType |w1#0| (Tclass._module.Wrapper Tclass._module.Color)) ($IsAlloc DatatypeTypeType |w1#0| (Tclass._module.Wrapper Tclass._module.Color) $Heap)) true) (and (= 1 $FunctionContextHeight) (= (ControlFlow 0 4) 2)))) anon0_correct)))))
PreconditionGeneratedEntry_correct)))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 3))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
