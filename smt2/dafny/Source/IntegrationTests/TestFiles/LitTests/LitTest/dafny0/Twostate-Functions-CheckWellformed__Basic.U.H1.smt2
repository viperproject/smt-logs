(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 (T@T) Int)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 () T@T)
(declare-fun $generated@@12 (Bool) T@U)
(declare-fun $generated@@13 (T@U) Bool)
(declare-fun $generated@@14 (Int) T@U)
(declare-fun $generated@@15 (T@U) Int)
(declare-fun $generated@@16 (Real) T@U)
(declare-fun $generated@@17 (T@U) Real)
(declare-fun $generated@@24 (T@U) Int)
(declare-fun $generated@@25 (T@U) T@U)
(declare-fun $generated@@26 (T@U) T@U)
(declare-fun $generated@@27 (T@T T@U T@U) Bool)
(declare-fun $generated@@28 () T@T)
(declare-fun $generated@@29 () T@U)
(declare-fun $generated@@30 () T@U)
(declare-fun $generated@@31 (T@U) T@U)
(declare-fun $generated@@33 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@34 () T@U)
(declare-fun $generated@@37 () Int)
(declare-fun $generated@@38 (T@U T@U T@U) Int)
(declare-fun $generated@@39 (T@T T@U) T@U)
(declare-fun $generated@@40 (T@U) Bool)
(declare-fun $generated@@41 (T@U T@U T@U) Bool)
(declare-fun $generated@@42 (T@U T@U) Bool)
(declare-fun $generated@@43 (T@T T@U) T@U)
(declare-fun $generated@@44 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@45 () T@T)
(declare-fun $generated@@46 () T@T)
(declare-fun $generated@@47 (T@T T@T) T@T)
(declare-fun $generated@@48 () T@U)
(declare-fun $generated@@49 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@50 (T@T) T@T)
(declare-fun $generated@@51 (T@T) T@T)
(declare-fun $generated@@72 (T@U T@U) T@U)
(declare-fun $generated@@73 (T@U) Bool)
(declare-fun $generated@@81 (T@T T@U) T@U)
(declare-fun $generated@@91 (T@U) Bool)
(declare-fun $generated@@102 (T@U) T@U)
(declare-fun $generated@@109 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@110 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@111 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@143 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@8 $generated@@9) 0) (= ($generated@@8 $generated@@10) 1)) (= ($generated@@8 $generated@@11) 2)) (forall (($generated@@18 Bool) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 Real) ) (! (= ($generated@@17 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 T@U) ) (! (= ($generated@@16 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7)
)
(assert (= ($generated@@24 $generated@@1) 0))
(assert (= ($generated@@25 $generated) $generated@@0))
(assert (= ($generated@@26 $generated@@1) $generated@@2))
(assert (= ($generated@@8 $generated@@28) 3))
(assert (forall (($generated@@32 T@U) ) (! (= ($generated@@27 $generated@@28 $generated@@32 $generated@@29)  (or (= $generated@@32 $generated@@30) (= ($generated@@31 $generated@@32) $generated@@29)))
 :pattern ( ($generated@@27 $generated@@28 $generated@@32 $generated@@29))
)))
(assert (forall (($generated@@35 T@U) ($generated@@36 T@U) ) (! (= ($generated@@33 $generated@@28 $generated@@35 $generated@@34 $generated@@36) ($generated@@33 $generated@@28 $generated@@35 $generated@@29 $generated@@36))
 :pattern ( ($generated@@33 $generated@@28 $generated@@35 $generated@@34 $generated@@36))
 :pattern ( ($generated@@33 $generated@@28 $generated@@35 $generated@@29 $generated@@36))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@52 T@T) ($generated@@53 T@T) ($generated@@54 T@U) ($generated@@55 T@U) ($generated@@56 T@U) ) (! (= ($generated@@44 $generated@@52 $generated@@53 ($generated@@49 $generated@@52 $generated@@53 $generated@@55 $generated@@56 $generated@@54) $generated@@56) $generated@@54)
 :weight 0
)) (forall (($generated@@57 T@T) ($generated@@58 T@T) ($generated@@59 T@U) ($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@U) ) (!  (or (= $generated@@61 $generated@@62) (= ($generated@@44 $generated@@57 $generated@@58 ($generated@@49 $generated@@57 $generated@@58 $generated@@60 $generated@@61 $generated@@59) $generated@@62) ($generated@@44 $generated@@57 $generated@@58 $generated@@60 $generated@@62)))
 :weight 0
))) (= ($generated@@8 $generated@@45) 4)) (= ($generated@@8 $generated@@46) 5)) (forall (($generated@@63 T@T) ($generated@@64 T@T) ) (= ($generated@@8 ($generated@@47 $generated@@63 $generated@@64)) 6))) (forall (($generated@@65 T@T) ($generated@@66 T@T) ) (! (= ($generated@@50 ($generated@@47 $generated@@65 $generated@@66)) $generated@@65)
 :pattern ( ($generated@@47 $generated@@65 $generated@@66))
))) (forall (($generated@@67 T@T) ($generated@@68 T@T) ) (! (= ($generated@@51 ($generated@@47 $generated@@67 $generated@@68)) $generated@@68)
 :pattern ( ($generated@@47 $generated@@67 $generated@@68))
))))
(assert  (=> (<= 1 $generated@@37) (forall (($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@U) ) (!  (=> (or ($generated@@41 $generated@@69 $generated@@70 ($generated@@39 $generated@@28 $generated@@71)) (and (< 1 $generated@@37) (and (and (and ($generated@@40 $generated@@69) ($generated@@40 $generated@@70)) ($generated@@42 $generated@@69 $generated@@70)) ($generated@@27 $generated@@28 $generated@@71 $generated@@34)))) (= ($generated@@38 $generated@@69 $generated@@70 ($generated@@39 $generated@@28 $generated@@71)) ($generated@@15 ($generated@@43 $generated@@10 ($generated@@44 $generated@@45 $generated@@46 ($generated@@44 $generated@@28 ($generated@@47 $generated@@45 $generated@@46) $generated@@69 ($generated@@39 $generated@@28 $generated@@71)) $generated@@48)))))
 :weight 3
 :pattern ( ($generated@@38 $generated@@69 $generated@@70 ($generated@@39 $generated@@28 $generated@@71)) ($generated@@40 $generated@@70))
))))
(assert (= ($generated@@24 $generated@@48) 0))
(assert (= ($generated@@72 $generated@@3 $generated@@7) $generated@@48))
(assert  (not ($generated@@73 $generated@@48)))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@U) ) (! (= ($generated@@33 $generated@@28 $generated@@74 $generated@@29 $generated@@75)  (or (= $generated@@74 $generated@@30) ($generated@@13 ($generated@@43 $generated@@9 ($generated@@44 $generated@@45 $generated@@46 ($generated@@44 $generated@@28 ($generated@@47 $generated@@45 $generated@@46) $generated@@75 $generated@@74) $generated@@1)))))
 :pattern ( ($generated@@33 $generated@@28 $generated@@74 $generated@@29 $generated@@75))
)))
(assert (forall (($generated@@76 T@U) ($generated@@77 T@U) ) (!  (=> ($generated@@42 $generated@@76 $generated@@77) (forall (($generated@@78 T@U) ) (!  (=> ($generated@@13 ($generated@@43 $generated@@9 ($generated@@44 $generated@@45 $generated@@46 ($generated@@44 $generated@@28 ($generated@@47 $generated@@45 $generated@@46) $generated@@76 $generated@@78) $generated@@1))) ($generated@@13 ($generated@@43 $generated@@9 ($generated@@44 $generated@@45 $generated@@46 ($generated@@44 $generated@@28 ($generated@@47 $generated@@45 $generated@@46) $generated@@77 $generated@@78) $generated@@1))))
 :pattern ( ($generated@@44 $generated@@45 $generated@@46 ($generated@@44 $generated@@28 ($generated@@47 $generated@@45 $generated@@46) $generated@@77 $generated@@78) $generated@@1))
)))
 :pattern ( ($generated@@42 $generated@@76 $generated@@77))
)))
(assert (forall (($generated@@79 T@U) ($generated@@80 T@T) ) (! (= ($generated@@39 $generated@@80 $generated@@79) $generated@@79)
 :pattern ( ($generated@@39 $generated@@80 $generated@@79))
)))
(assert (forall (($generated@@82 T@U) ($generated@@83 T@T) ) (! (= ($generated@@81 $generated@@83 ($generated@@43 $generated@@83 $generated@@82)) $generated@@82)
 :pattern ( ($generated@@43 $generated@@83 $generated@@82))
)))
(assert ($generated@@73 $generated@@1))
(assert (forall (($generated@@84 T@U) ($generated@@85 T@U) ) (!  (=> (and (and ($generated@@40 $generated@@84) (and (or (not (= $generated@@85 $generated@@30)) (not true)) (= ($generated@@31 $generated@@85) $generated@@29))) ($generated@@13 ($generated@@43 $generated@@9 ($generated@@44 $generated@@45 $generated@@46 ($generated@@44 $generated@@28 ($generated@@47 $generated@@45 $generated@@46) $generated@@84 $generated@@85) $generated@@1)))) ($generated@@33 $generated@@10 ($generated@@43 $generated@@10 ($generated@@44 $generated@@45 $generated@@46 ($generated@@44 $generated@@28 ($generated@@47 $generated@@45 $generated@@46) $generated@@84 $generated@@85) $generated@@48)) $generated $generated@@84))
 :pattern ( ($generated@@43 $generated@@10 ($generated@@44 $generated@@45 $generated@@46 ($generated@@44 $generated@@28 ($generated@@47 $generated@@45 $generated@@46) $generated@@84 $generated@@85) $generated@@48)))
)))
(assert (forall (($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@T) ) (!  (=> ($generated@@42 $generated@@86 $generated@@87) (=> ($generated@@33 $generated@@90 $generated@@88 $generated@@89 $generated@@86) ($generated@@33 $generated@@90 $generated@@88 $generated@@89 $generated@@87)))
 :pattern ( ($generated@@42 $generated@@86 $generated@@87) ($generated@@33 $generated@@90 $generated@@88 $generated@@89 $generated@@86))
)))
(assert (forall (($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ) (!  (=> (and (and (and ($generated@@40 $generated@@93) ($generated@@40 $generated@@94)) (or ($generated@@41 $generated@@92 $generated@@93 $generated@@95) ($generated@@27 $generated@@28 $generated@@95 $generated@@34))) (and ($generated@@91 $generated@@93) ($generated@@42 $generated@@93 $generated@@94))) (=> (forall (($generated@@96 T@U) ($generated@@97 T@U) ) true) (= ($generated@@38 $generated@@92 $generated@@93 $generated@@95) ($generated@@38 $generated@@92 $generated@@94 $generated@@95))))
 :pattern ( ($generated@@91 $generated@@93) ($generated@@42 $generated@@93 $generated@@94) ($generated@@38 $generated@@92 $generated@@94 $generated@@95))
)))
(assert (forall (($generated@@98 T@U) ) (! (= ($generated@@27 $generated@@28 $generated@@98 $generated@@34)  (and ($generated@@27 $generated@@28 $generated@@98 $generated@@29) (or (not (= $generated@@98 $generated@@30)) (not true))))
 :pattern ( ($generated@@27 $generated@@28 $generated@@98 $generated@@34))
 :pattern ( ($generated@@27 $generated@@28 $generated@@98 $generated@@29))
)))
(assert (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ) (!  (=> (or (not (= $generated@@99 $generated@@101)) (not true)) (=> (and ($generated@@42 $generated@@99 $generated@@100) ($generated@@42 $generated@@100 $generated@@101)) ($generated@@42 $generated@@99 $generated@@101)))
 :pattern ( ($generated@@42 $generated@@99 $generated@@100) ($generated@@42 $generated@@100 $generated@@101))
)))
(assert (forall (($generated@@103 T@U) ($generated@@104 T@U) ) (!  (and (= ($generated@@102 ($generated@@72 $generated@@103 $generated@@104)) $generated@@103) (= ($generated@@26 ($generated@@72 $generated@@103 $generated@@104)) $generated@@104))
 :pattern ( ($generated@@72 $generated@@103 $generated@@104))
)))
(assert (forall (($generated@@105 T@U) ($generated@@106 T@T) ) (! (= ($generated@@43 $generated@@106 ($generated@@81 $generated@@106 $generated@@105)) $generated@@105)
 :pattern ( ($generated@@81 $generated@@106 $generated@@105))
)))
(assert (forall (($generated@@107 T@U) ($generated@@108 T@U) ) (!  (=> (and ($generated@@40 $generated@@107) (and (or (not (= $generated@@108 $generated@@30)) (not true)) (= ($generated@@31 $generated@@108) $generated@@29))) ($generated@@27 $generated@@10 ($generated@@43 $generated@@10 ($generated@@44 $generated@@45 $generated@@46 ($generated@@44 $generated@@28 ($generated@@47 $generated@@45 $generated@@46) $generated@@107 $generated@@108) $generated@@48)) $generated))
 :pattern ( ($generated@@43 $generated@@10 ($generated@@44 $generated@@45 $generated@@46 ($generated@@44 $generated@@28 ($generated@@47 $generated@@45 $generated@@46) $generated@@107 $generated@@108) $generated@@48)))
)))
(assert  (and (forall (($generated@@112 T@T) ($generated@@113 T@T) ($generated@@114 T@T) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ) (! (= ($generated@@109 $generated@@112 $generated@@113 $generated@@114 ($generated@@111 $generated@@112 $generated@@113 $generated@@114 $generated@@116 $generated@@117 $generated@@118 $generated@@115) $generated@@117 $generated@@118) $generated@@115)
 :weight 0
)) (and (forall (($generated@@119 T@T) ($generated@@120 T@T) ($generated@@121 T@T) ($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 T@U) ) (!  (or (= $generated@@124 $generated@@126) (= ($generated@@109 $generated@@119 $generated@@120 $generated@@121 ($generated@@111 $generated@@119 $generated@@120 $generated@@121 $generated@@123 $generated@@124 $generated@@125 $generated@@122) $generated@@126 $generated@@127) ($generated@@109 $generated@@119 $generated@@120 $generated@@121 $generated@@123 $generated@@126 $generated@@127)))
 :weight 0
)) (forall (($generated@@128 T@T) ($generated@@129 T@T) ($generated@@130 T@T) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ) (!  (or (= $generated@@134 $generated@@136) (= ($generated@@109 $generated@@128 $generated@@129 $generated@@130 ($generated@@111 $generated@@128 $generated@@129 $generated@@130 $generated@@132 $generated@@133 $generated@@134 $generated@@131) $generated@@135 $generated@@136) ($generated@@109 $generated@@128 $generated@@129 $generated@@130 $generated@@132 $generated@@135 $generated@@136)))
 :weight 0
)))))
(assert (forall (($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ($generated@@140 Bool) ($generated@@141 T@U) ($generated@@142 T@U) ) (! (= ($generated@@13 ($generated@@109 $generated@@28 $generated@@45 $generated@@9 ($generated@@110 $generated@@137 $generated@@138 $generated@@139 $generated@@140) $generated@@141 $generated@@142))  (=> (and (or (not (= $generated@@141 $generated@@137)) (not true)) ($generated@@13 ($generated@@43 $generated@@9 ($generated@@44 $generated@@45 $generated@@46 ($generated@@44 $generated@@28 ($generated@@47 $generated@@45 $generated@@46) $generated@@138 $generated@@141) $generated@@139)))) $generated@@140))
 :pattern ( ($generated@@109 $generated@@28 $generated@@45 $generated@@9 ($generated@@110 $generated@@137 $generated@@138 $generated@@139 $generated@@140) $generated@@141 $generated@@142))
)))
(assert (= ($generated@@25 $generated@@29) $generated@@4))
(assert (= ($generated@@143 $generated@@29) $generated@@6))
(assert (= ($generated@@25 $generated@@34) $generated@@5))
(assert (= ($generated@@143 $generated@@34) $generated@@6))
(assert (forall (($generated@@144 T@U) ($generated@@145 T@T) ) (! (= ($generated@@81 $generated@@145 ($generated@@39 $generated@@145 $generated@@144)) ($generated@@39 $generated@@46 ($generated@@81 $generated@@145 $generated@@144)))
 :pattern ( ($generated@@81 $generated@@145 ($generated@@39 $generated@@145 $generated@@144)))
)))
(assert (forall (($generated@@146 T@U) ($generated@@147 T@U) ) (! ($generated@@33 $generated@@10 $generated@@147 $generated $generated@@146)
 :pattern ( ($generated@@33 $generated@@10 $generated@@147 $generated $generated@@146))
)))
(assert  (=> (<= 1 $generated@@37) (forall (($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 T@U) ) (!  (=> (or ($generated@@41 $generated@@148 $generated@@149 $generated@@150) (and (< 1 $generated@@37) (and (and (and ($generated@@40 $generated@@148) ($generated@@40 $generated@@149)) ($generated@@42 $generated@@148 $generated@@149)) ($generated@@27 $generated@@28 $generated@@150 $generated@@34)))) (= ($generated@@38 $generated@@148 $generated@@149 $generated@@150) ($generated@@15 ($generated@@43 $generated@@10 ($generated@@44 $generated@@45 $generated@@46 ($generated@@44 $generated@@28 ($generated@@47 $generated@@45 $generated@@46) $generated@@148 $generated@@150) $generated@@48)))))
 :pattern ( ($generated@@38 $generated@@148 $generated@@149 $generated@@150) ($generated@@40 $generated@@149))
))))
(assert (forall (($generated@@151 T@U) ) (! ($generated@@27 $generated@@10 $generated@@151 $generated)
 :pattern ( ($generated@@27 $generated@@10 $generated@@151 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@152 () T@U)
(declare-fun $generated@@153 () T@U)
(declare-fun $generated@@154 () T@U)
(declare-fun $generated@@155 () T@U)
(declare-fun $generated@@156 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 6) (let (($generated@@157  (and (=> (= (ControlFlow 0 3) (- 0 4)) (or (not (= $generated@@152 $generated@@30)) (not true))) (=> (or (not (= $generated@@152 $generated@@30)) (not true)) (=> (= (ControlFlow 0 3) (- 0 2)) ($generated@@33 $generated@@28 $generated@@152 $generated@@34 $generated@@153))))))
(let (($generated@@158 true))
(let (($generated@@159  (=> (= $generated@@154 ($generated@@110 $generated@@30 $generated@@155 $generated@@1 false)) (and (=> (= (ControlFlow 0 5) 1) $generated@@158) (=> (= (ControlFlow 0 5) 3) $generated@@157)))))
(let (($generated@@160  (=> (and ($generated@@40 $generated@@153) ($generated@@91 $generated@@153)) (=> (and (and (and ($generated@@27 $generated@@28 $generated@@152 $generated@@34) ($generated@@33 $generated@@28 $generated@@152 $generated@@34 $generated@@155)) (= 1 $generated@@37)) (and (and (= $generated@@156 $generated@@153) (and ($generated@@42 $generated@@156 $generated@@155) ($generated@@40 $generated@@155))) (= (ControlFlow 0 6) 5))) $generated@@159))))
$generated@@160)))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 3) (- 2))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
