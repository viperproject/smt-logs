(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun alloc () T@U)
(declare-fun allocName () T@U)
(declare-fun Tagclass._module.Multi () T@U)
(declare-fun Tagclass._module.Multi? () T@U)
(declare-fun class._module.Multi? () T@U)
(declare-fun tytagFamily$Multi () T@U)
(declare-fun field$x () T@U)
(declare-fun field$y () T@U)
(declare-fun field$next () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun FDim (T@U) Int)
(declare-fun Tag (T@U) T@U)
(declare-fun DeclName (T@U) T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun Tclass._module.Multi? () T@U)
(declare-fun null () T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass._module.Multi () T@U)
(declare-fun _module.Multi.x () T@U)
(declare-fun FieldOfDecl (T@U T@U) T@U)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun _module.Multi.y () T@U)
(declare-fun _module.Multi.next () T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun DeclType (T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#5| (T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt alloc allocName Tagclass._module.Multi Tagclass._module.Multi? class._module.Multi? tytagFamily$Multi field$x field$y field$next)
)
(assert (= (FDim alloc) 0))
(assert (= (Tag TInt) TagInt))
(assert (= (DeclName alloc) allocName))
(assert (= (Ctor refType) 3))
(assert (forall (($o T@U) ) (! (= ($Is refType $o Tclass._module.Multi?)  (or (= $o null) (= (dtype $o) Tclass._module.Multi?)))
 :pattern ( ($Is refType $o Tclass._module.Multi?))
)))
(assert (forall ((|c#0| T@U) ($h T@U) ) (! (= ($IsAlloc refType |c#0| Tclass._module.Multi $h) ($IsAlloc refType |c#0| Tclass._module.Multi? $h))
 :pattern ( ($IsAlloc refType |c#0| Tclass._module.Multi $h))
 :pattern ( ($IsAlloc refType |c#0| Tclass._module.Multi? $h))
)))
(assert (= (FDim _module.Multi.x) 0))
(assert (= (FieldOfDecl class._module.Multi? field$x) _module.Multi.x))
(assert  (not ($IsGhostField _module.Multi.x)))
(assert (= (FDim _module.Multi.y) 0))
(assert (= (FieldOfDecl class._module.Multi? field$y) _module.Multi.y))
(assert  (not ($IsGhostField _module.Multi.y)))
(assert (= (FDim _module.Multi.next) 0))
(assert (= (FieldOfDecl class._module.Multi? field$next) _module.Multi.next))
(assert  (not ($IsGhostField _module.Multi.next)))
(assert  (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 4)) (= (Ctor BoxType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 6))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall (($o@@0 T@U) ($h@@0 T@U) ) (! (= ($IsAlloc refType $o@@0 Tclass._module.Multi? $h@@0)  (or (= $o@@0 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@0 $o@@0) alloc)))))
 :pattern ( ($IsAlloc refType $o@@0 Tclass._module.Multi? $h@@0))
)))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert ($IsGhostField alloc))
(assert (forall (($h@@1 T@U) ($o@@1 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@1) (and (or (not (= $o@@1 null)) (not true)) (= (dtype $o@@1) Tclass._module.Multi?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@1 $o@@1) alloc)))) ($IsAlloc intType ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@1 $o@@1) _module.Multi.x)) TInt $h@@1))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@1 $o@@1) _module.Multi.x)))
)))
(assert (forall (($h@@2 T@U) ($o@@2 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@2) (and (or (not (= $o@@2 null)) (not true)) (= (dtype $o@@2) Tclass._module.Multi?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o@@2) alloc)))) ($IsAlloc intType ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o@@2) _module.Multi.y)) TInt $h@@2))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o@@2) _module.Multi.y)))
)))
(assert (forall ((h@@0 T@U) (k@@0 T@U) (v T@U) (t T@U) (T@@1 T@T) ) (!  (=> ($HeapSucc h@@0 k@@0) (=> ($IsAlloc T@@1 v t h@@0) ($IsAlloc T@@1 v t k@@0)))
 :pattern ( ($HeapSucc h@@0 k@@0) ($IsAlloc T@@1 v t h@@0))
)))
(assert (forall (($h@@3 T@U) ($o@@3 T@U) ) (!  (=> (and ($IsGoodHeap $h@@3) (and (or (not (= $o@@3 null)) (not true)) (= (dtype $o@@3) Tclass._module.Multi?))) ($Is refType ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@3 $o@@3) _module.Multi.next)) Tclass._module.Multi?))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@3 $o@@3) _module.Multi.next)))
)))
(assert (forall ((|c#0@@0| T@U) ) (! (= ($Is refType |c#0@@0| Tclass._module.Multi)  (and ($Is refType |c#0@@0| Tclass._module.Multi?) (or (not (= |c#0@@0| null)) (not true))))
 :pattern ( ($Is refType |c#0@@0| Tclass._module.Multi))
 :pattern ( ($Is refType |c#0@@0| Tclass._module.Multi?))
)))
(assert (forall (($h@@4 T@U) ($o@@4 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@4) (and (or (not (= $o@@4 null)) (not true)) (= (dtype $o@@4) Tclass._module.Multi?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@4 $o@@4) alloc)))) ($IsAlloc refType ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@4 $o@@4) _module.Multi.next)) Tclass._module.Multi? $h@@4))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@4 $o@@4) _module.Multi.next)))
)))
(assert (forall ((a T@U) (b T@U) (c T@U) ) (!  (=> (or (not (= a c)) (not true)) (=> (and ($HeapSucc a b) ($HeapSucc b c)) ($HeapSucc a c)))
 :pattern ( ($HeapSucc a b) ($HeapSucc b c))
)))
(assert (forall ((cl T@U) (nm T@U) ) (!  (and (= (DeclType (FieldOfDecl cl nm)) cl) (= (DeclName (FieldOfDecl cl nm)) nm))
 :pattern ( (FieldOfDecl cl nm))
)))
(assert (forall ((x@@5 T@U) (T@@2 T@T) ) (! (= ($Unbox T@@2 ($Box T@@2 x@@5)) x@@5)
 :pattern ( ($Box T@@2 x@@5))
)))
(assert (forall (($h@@5 T@U) ($o@@5 T@U) ) (!  (=> (and ($IsGoodHeap $h@@5) (and (or (not (= $o@@5 null)) (not true)) (= (dtype $o@@5) Tclass._module.Multi?))) ($Is intType ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@5 $o@@5) _module.Multi.x)) TInt))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@5 $o@@5) _module.Multi.x)))
)))
(assert (forall (($h@@6 T@U) ($o@@6 T@U) ) (!  (=> (and ($IsGoodHeap $h@@6) (and (or (not (= $o@@6 null)) (not true)) (= (dtype $o@@6) Tclass._module.Multi?))) ($Is intType ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@6 $o@@6) _module.Multi.y)) TInt))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@6 $o@@6) _module.Multi.y)))
)))
(assert (forall ((h@@1 T@U) (r T@U) (f T@U) (x@@6 T@U) ) (!  (=> ($IsGoodHeap (MapType0Store refType (MapType0Type FieldType BoxType) h@@1 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@1 r) f x@@6))) ($HeapSucc h@@1 (MapType0Store refType (MapType0Type FieldType BoxType) h@@1 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@1 r) f x@@6))))
 :pattern ( (MapType0Store refType (MapType0Type FieldType BoxType) h@@1 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@1 r) f x@@6)))
)))
(assert (= (Tag Tclass._module.Multi) Tagclass._module.Multi))
(assert (= (TagFamily Tclass._module.Multi) tytagFamily$Multi))
(assert (= (Tag Tclass._module.Multi?) Tagclass._module.Multi?))
(assert (= (TagFamily Tclass._module.Multi?) tytagFamily$Multi))
(assert  (and (forall ((t0@@0 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 t2 (MapType1Store t0@@0 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| T@U) (|l#4| T@U) ($o@@7 T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#5| |l#0| |l#1| |l#2| |l#3| |l#4|) $o@@7 $f))  (=> (and (or (not (= $o@@7 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@7) |l#2|)))) (or (= $o@@7 |l#3|) (= $o@@7 |l#4|))))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#5| |l#0| |l#1| |l#2| |l#3| |l#4|) $o@@7 $f))
)))
(assert (forall ((x@@7 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@7))) (Lit BoxType ($Box intType (int_2_U x@@7))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@7))))
)))
(assert (forall ((x@@8 T@U) (T@@3 T@T) ) (! (= ($Box T@@3 (Lit T@@3 x@@8)) (Lit BoxType ($Box T@@3 x@@8)))
 :pattern ( ($Box T@@3 (Lit T@@3 x@@8)))
)))
(assert (forall ((h@@2 T@U) (v@@0 T@U) ) (! ($IsAlloc intType v@@0 TInt h@@2)
 :pattern ( ($IsAlloc intType v@@0 TInt h@@2))
)))
(assert (forall ((v@@1 T@U) ) (! ($Is intType v@@1 TInt)
 :pattern ( ($Is intType v@@1 TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |call2formal@oldX#0@0| () Int)
(declare-fun $Heap@17 () T@U)
(declare-fun |m#0| () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun $Heap@18 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |call2formal@oldX#0@0@@0| () Int)
(declare-fun $Heap@19 () T@U)
(declare-fun $Heap@20 () T@U)
(declare-fun |$rhs#3@0| () Int)
(declare-fun $Heap@14 () T@U)
(declare-fun $Heap@13 () T@U)
(declare-fun $Heap@15 () T@U)
(declare-fun |call2formal@oldX#0@0@@1| () Int)
(declare-fun $Heap@16 () T@U)
(declare-fun |call2formal@oldX#0@0@@2| () Int)
(declare-fun $Heap@9 () T@U)
(declare-fun |a##1_0@0| () Int)
(declare-fun |b##1_0@0| () Int)
(declare-fun $Heap@10 () T@U)
(declare-fun |call3formal@x#0@0| () Int)
(declare-fun |call4formal@y#0@0| () Int)
(declare-fun $Heap@11 () T@U)
(declare-fun $Heap@12 () T@U)
(declare-fun $Heap@2 () T@U)
(declare-fun $obj0@1 () T@U)
(declare-fun |z##1@0| () Int)
(declare-fun |call3formal@m#0| () T@U)
(declare-fun $Heap () T@U)
(declare-fun $Heap@3 () T@U)
(declare-fun |call3formal@m#0@0| () T@U)
(declare-fun $Heap@4 () T@U)
(declare-fun |$rhs#1@0| () Int)
(declare-fun $Heap@5 () T@U)
(declare-fun $Heap@6 () T@U)
(declare-fun |p#0@0| () T@U)
(declare-fun |a##0@0| () Int)
(declare-fun |b##0@0| () Int)
(declare-fun $Heap@7 () T@U)
(declare-fun |call3formal@x#0@0@@0| () Int)
(declare-fun |call4formal@y#0@0@@0| () Int)
(declare-fun $Heap@8 () T@U)
(declare-fun |$rhs#0@0| () Int)
(declare-fun $Heap@0 () T@U)
(declare-fun $obj0@0 () T@U)
(declare-fun |z##0@0| () Int)
(declare-fun |call3formal@m#0@@0| () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun |call3formal@m#0@0@@0| () T@U)
(declare-fun |p#0| () T@U)
(declare-fun $FunctionContextHeight () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 74) (let ((anon14_Else_correct  (=> (= (ControlFlow 0 4) (- 0 3)) (= |call2formal@oldX#0@0| (LitInt 32)))))
(let ((anon14_Then_correct  (=> (= (ControlFlow 0 2) (- 0 1)) (= |call2formal@oldX#0@0| (LitInt 33)))))
(let ((anon8_correct  (and (=> (= (ControlFlow 0 5) (- 0 15)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@17 |m#0|) _module.Multi.y))) (LitInt 31))) (and (=> (= (ControlFlow 0 5) (- 0 14)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@17 |m#0|) _module.Multi.x))) (LitInt 32))) (=> (and (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@17 |m#0|) _module.Multi.y))) (LitInt 31)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@17 |m#0|) _module.Multi.x))) (LitInt 32))) (and (=> (= (ControlFlow 0 5) (- 0 13)) (or (not (= |m#0| null)) (not true))) (=> (or (not (= |m#0| null)) (not true)) (and (=> (= (ControlFlow 0 5) (- 0 12)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 |m#0| _module.Multi.x))) (=> (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 |m#0| _module.Multi.x)) (and (=> (= (ControlFlow 0 5) (- 0 11)) (or (not (= |m#0| null)) (not true))) (=> (or (not (= |m#0| null)) (not true)) (and (=> (= (ControlFlow 0 5) (- 0 10)) (forall (($o@@8 T@U) ($f@@0 T@U) )  (=> (and (and (or (not (= $o@@8 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@17 $o@@8) alloc)))) (= $o@@8 |m#0|)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@8 $f@@0))))) (=> (forall (($o@@9 T@U) ($f@@1 T@U) )  (=> (and (and (or (not (= $o@@9 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@17 $o@@9) alloc)))) (= $o@@9 |m#0|)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@9 $f@@1)))) (=> (and (and (and ($IsGoodHeap $Heap@18) ($IsHeapAnchor $Heap@18)) (and (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@18 |m#0|) _module.Multi.x))) (+ (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@17 |m#0|) _module.Multi.x))) 1)) (= |call2formal@oldX#0@0@@0| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@17 |m#0|) _module.Multi.x)))))) (and (and (forall (($o@@10 T@U) ) (!  (=> (and (or (not (= $o@@10 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@17 $o@@10) alloc)))) (or (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@18 $o@@10) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@17 $o@@10)) (= $o@@10 |m#0|)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@18 $o@@10))
)) ($HeapSucc $Heap@17 $Heap@18)) (and (= $Heap@19 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap@18 |m#0| (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@18 |m#0|) _module.Multi.x ($Box intType (int_2_U |call2formal@oldX#0@0@@0|))))) ($IsGoodHeap $Heap@19)))) (and (=> (= (ControlFlow 0 5) (- 0 9)) (or (not (= |m#0| null)) (not true))) (and (=> (= (ControlFlow 0 5) (- 0 8)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@19 |m#0|) _module.Multi.x))) (LitInt 32))) (=> (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@19 |m#0|) _module.Multi.x))) (LitInt 32)) (and (=> (= (ControlFlow 0 5) (- 0 7)) (or (not (= |m#0| null)) (not true))) (=> (or (not (= |m#0| null)) (not true)) (and (=> (= (ControlFlow 0 5) (- 0 6)) (forall (($o@@11 T@U) ($f@@2 T@U) )  (=> (and (and (or (not (= $o@@11 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@19 $o@@11) alloc)))) (= $o@@11 |m#0|)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@11 $f@@2))))) (=> (forall (($o@@12 T@U) ($f@@3 T@U) )  (=> (and (and (or (not (= $o@@12 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@19 $o@@12) alloc)))) (= $o@@12 |m#0|)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@12 $f@@3)))) (=> (and ($IsGoodHeap $Heap@20) ($IsHeapAnchor $Heap@20)) (=> (and (and (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@20 |m#0|) _module.Multi.x))) (+ (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@19 |m#0|) _module.Multi.x))) 1)) (= |call2formal@oldX#0@0| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@19 |m#0|) _module.Multi.x))))) (and (forall (($o@@13 T@U) ) (!  (=> (and (or (not (= $o@@13 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@19 $o@@13) alloc)))) (or (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@20 $o@@13) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@19 $o@@13)) (= $o@@13 |m#0|)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@20 $o@@13))
)) ($HeapSucc $Heap@19 $Heap@20))) (and (=> (= (ControlFlow 0 5) 2) anon14_Then_correct) (=> (= (ControlFlow 0 5) 4) anon14_Else_correct)))))))))))))))))))))))))
(let ((anon13_Else_correct  (=> (and (or (not (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@17 |m#0|) _module.Multi.y))) (LitInt 31))) (not true)) (= (ControlFlow 0 18) 5)) anon8_correct)))
(let ((anon13_Then_correct  (=> (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@17 |m#0|) _module.Multi.y))) (LitInt 31)) (and (=> (= (ControlFlow 0 16) (- 0 17)) (or (not (= |m#0| null)) (not true))) (=> (= (ControlFlow 0 16) 5) anon8_correct)))))
(let ((anon6_correct  (and (=> (= (ControlFlow 0 19) (- 0 29)) (or (not (= |m#0| null)) (not true))) (=> (or (not (= |m#0| null)) (not true)) (and (=> (= (ControlFlow 0 19) (- 0 28)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 |m#0| _module.Multi.x))) (=> (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 |m#0| _module.Multi.x)) (=> (= |$rhs#3@0| (LitInt 30)) (=> (and (= $Heap@14 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap@13 |m#0| (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@13 |m#0|) _module.Multi.x ($Box intType (int_2_U |$rhs#3@0|))))) ($IsGoodHeap $Heap@14)) (and (=> (= (ControlFlow 0 19) (- 0 27)) (or (not (= |m#0| null)) (not true))) (=> (or (not (= |m#0| null)) (not true)) (and (=> (= (ControlFlow 0 19) (- 0 26)) (forall (($o@@14 T@U) ($f@@4 T@U) )  (=> (and (and (or (not (= $o@@14 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@14 $o@@14) alloc)))) (= $o@@14 |m#0|)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@14 $f@@4))))) (=> (forall (($o@@15 T@U) ($f@@5 T@U) )  (=> (and (and (or (not (= $o@@15 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@14 $o@@15) alloc)))) (= $o@@15 |m#0|)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@15 $f@@5)))) (=> (and ($IsGoodHeap $Heap@15) ($IsHeapAnchor $Heap@15)) (=> (and (and (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@15 |m#0|) _module.Multi.x))) (+ (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@14 |m#0|) _module.Multi.x))) 1)) (= |call2formal@oldX#0@0@@1| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@14 |m#0|) _module.Multi.x))))) (and (forall (($o@@16 T@U) ) (!  (=> (and (or (not (= $o@@16 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@14 $o@@16) alloc)))) (or (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@15 $o@@16) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@14 $o@@16)) (= $o@@16 |m#0|)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@15 $o@@16))
)) ($HeapSucc $Heap@14 $Heap@15))) (and (=> (= (ControlFlow 0 19) (- 0 25)) (= |call2formal@oldX#0@0@@1| (LitInt 30))) (=> (= |call2formal@oldX#0@0@@1| (LitInt 30)) (and (=> (= (ControlFlow 0 19) (- 0 24)) (or (not (= |m#0| null)) (not true))) (=> (or (not (= |m#0| null)) (not true)) (and (=> (= (ControlFlow 0 19) (- 0 23)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 |m#0| _module.Multi.y))) (=> (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 |m#0| _module.Multi.y)) (and (=> (= (ControlFlow 0 19) (- 0 22)) (or (not (= |m#0| null)) (not true))) (=> (or (not (= |m#0| null)) (not true)) (and (=> (= (ControlFlow 0 19) (- 0 21)) (forall (($o@@17 T@U) ($f@@6 T@U) )  (=> (and (and (or (not (= $o@@17 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@15 $o@@17) alloc)))) (= $o@@17 |m#0|)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@17 $f@@6))))) (=> (forall (($o@@18 T@U) ($f@@7 T@U) )  (=> (and (and (or (not (= $o@@18 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@15 $o@@18) alloc)))) (= $o@@18 |m#0|)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@18 $f@@7)))) (=> (and (and (and ($IsGoodHeap $Heap@16) ($IsHeapAnchor $Heap@16)) (and (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@16 |m#0|) _module.Multi.x))) (+ (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@15 |m#0|) _module.Multi.x))) 1)) (= |call2formal@oldX#0@0@@2| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@15 |m#0|) _module.Multi.x)))))) (and (and (forall (($o@@19 T@U) ) (!  (=> (and (or (not (= $o@@19 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@15 $o@@19) alloc)))) (or (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@16 $o@@19) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@15 $o@@19)) (= $o@@19 |m#0|)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@16 $o@@19))
)) ($HeapSucc $Heap@15 $Heap@16)) (and (= $Heap@17 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap@16 |m#0| (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@16 |m#0|) _module.Multi.y ($Box intType (int_2_U |call2formal@oldX#0@0@@2|))))) ($IsGoodHeap $Heap@17)))) (and (=> (= (ControlFlow 0 19) (- 0 20)) (or (not (= |m#0| null)) (not true))) (and (=> (= (ControlFlow 0 19) 16) anon13_Then_correct) (=> (= (ControlFlow 0 19) 18) anon13_Else_correct))))))))))))))))))))))))))))
(let ((anon12_Else_correct  (=> (and (= $Heap@13 $Heap@9) (= (ControlFlow 0 38) 19)) anon6_correct)))
(let ((anon12_Then_correct  (and (=> (= (ControlFlow 0 30) (- 0 37)) (or (not (= |m#0| |m#0|)) (not true))) (=> (or (not (= |m#0| |m#0|)) (not true)) (and (=> (= (ControlFlow 0 30) (- 0 36)) (or (not (= |m#0| null)) (not true))) (=> (or (not (= |m#0| null)) (not true)) (and (=> (= (ControlFlow 0 30) (- 0 35)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 |m#0| _module.Multi.x))) (=> (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 |m#0| _module.Multi.x)) (and (=> (= (ControlFlow 0 30) (- 0 34)) (or (not (= |m#0| null)) (not true))) (=> (or (not (= |m#0| null)) (not true)) (and (=> (= (ControlFlow 0 30) (- 0 33)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 |m#0| _module.Multi.x))) (=> (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 |m#0| _module.Multi.x)) (and (=> (= (ControlFlow 0 30) (- 0 32)) (or (not (= |m#0| null)) (not true))) (=> (or (not (= |m#0| null)) (not true)) (=> (= |a##1_0@0| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@9 |m#0|) _module.Multi.x)))) (and (=> (= (ControlFlow 0 30) (- 0 31)) (or (not (= |m#0| null)) (not true))) (=> (or (not (= |m#0| null)) (not true)) (=> (= |b##1_0@0| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@9 |m#0|) _module.Multi.y)))) (=> (and (and ($IsGoodHeap $Heap@10) ($IsHeapAnchor $Heap@10)) (and (= |call3formal@x#0@0| |b##1_0@0|) (= |call4formal@y#0@0| |a##1_0@0|))) (=> (and (and (and (forall (($o@@20 T@U) ) (!  (=> (and (or (not (= $o@@20 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@9 $o@@20) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@10 $o@@20) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@9 $o@@20)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@10 $o@@20))
)) ($HeapSucc $Heap@9 $Heap@10)) (and (= $Heap@11 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap@10 |m#0| (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@10 |m#0|) _module.Multi.x ($Box intType (int_2_U |call3formal@x#0@0|))))) ($IsGoodHeap $Heap@11))) (and (and (= $Heap@12 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap@11 |m#0| (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 |m#0|) _module.Multi.x ($Box intType (int_2_U |call4formal@y#0@0|))))) ($IsGoodHeap $Heap@12)) (and (= $Heap@13 $Heap@12) (= (ControlFlow 0 30) 19)))) anon6_correct))))))))))))))))))))
(let ((anon3_correct  (and (=> (= (ControlFlow 0 39) (- 0 57)) (or (not (= |m#0| null)) (not true))) (=> (or (not (= |m#0| null)) (not true)) (and (=> (= (ControlFlow 0 39) (- 0 56)) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |m#0|) _module.Multi.next)) null)) (not true))) (=> (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |m#0|) _module.Multi.next)) null)) (not true)) (=> (= $obj0@1 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |m#0|) _module.Multi.next))) (and (=> (= (ControlFlow 0 39) (- 0 55)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $obj0@1 _module.Multi.next))) (=> (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $obj0@1 _module.Multi.next)) (and (=> (= (ControlFlow 0 39) (- 0 54)) (or (not (= |m#0| null)) (not true))) (=> (or (not (= |m#0| null)) (not true)) (=> (= |z##1@0| (LitInt 20)) (and (=> (= (ControlFlow 0 39) (- 0 53)) (forall (($o@@21 T@U) ($f@@8 T@U) )  (=> (and (and (or (not (= $o@@21 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@21) alloc)))) (= $o@@21 |m#0|)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@21 $f@@8))))) (=> (forall (($o@@22 T@U) ($f@@9 T@U) )  (=> (and (and (or (not (= $o@@22 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@22) alloc)))) (= $o@@22 |m#0|)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@22 $f@@9)))) (=> (and ($Is refType |call3formal@m#0| Tclass._module.Multi?) ($IsAlloc refType |call3formal@m#0| Tclass._module.Multi? $Heap)) (and (=> (= (ControlFlow 0 39) (- 0 52)) (<= (LitInt 0) |z##1@0|)) (=> (<= (LitInt 0) |z##1@0|) (=> (and ($IsGoodHeap $Heap@3) ($IsHeapAnchor $Heap@3)) (=> (and (and (and ($Is refType |call3formal@m#0@0| Tclass._module.Multi?) ($IsAlloc refType |call3formal@m#0@0| Tclass._module.Multi? $Heap@3)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |m#0|) _module.Multi.y))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |m#0|) _module.Multi.y))))) (and (and (forall (($o@@23 T@U) ) (!  (=> (and (or (not (= $o@@23 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@23) alloc)))) (or (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@23) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@23)) (= $o@@23 |m#0|)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@23))
)) ($HeapSucc $Heap@2 $Heap@3)) (and (= $Heap@4 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap@3 $obj0@1 (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $obj0@1) _module.Multi.next ($Box refType |call3formal@m#0@0|)))) ($IsGoodHeap $Heap@4)))) (and (=> (= (ControlFlow 0 39) (- 0 51)) (or (not (= |m#0| null)) (not true))) (=> (or (not (= |m#0| null)) (not true)) (and (=> (= (ControlFlow 0 39) (- 0 50)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 |m#0| _module.Multi.x))) (=> (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 |m#0| _module.Multi.x)) (and (=> (= (ControlFlow 0 39) (- 0 49)) (or (not (= |m#0| null)) (not true))) (=> (or (not (= |m#0| null)) (not true)) (and (=> (= (ControlFlow 0 39) (- 0 48)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 |m#0| _module.Multi.next))) (=> (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 |m#0| _module.Multi.next)) (=> (= |$rhs#1@0| (LitInt 12)) (=> (and (and (= $Heap@5 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap@4 |m#0| (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 |m#0|) _module.Multi.x ($Box intType (int_2_U |$rhs#1@0|))))) ($IsGoodHeap $Heap@5)) (and (= $Heap@6 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap@5 |m#0| (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |m#0|) _module.Multi.next ($Box refType |p#0@0|)))) ($IsGoodHeap $Heap@6))) (and (=> (= (ControlFlow 0 39) (- 0 47)) (or (not (= |m#0| null)) (not true))) (=> (or (not (= |m#0| null)) (not true)) (and (=> (= (ControlFlow 0 39) (- 0 46)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 |m#0| _module.Multi.x))) (=> (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 |m#0| _module.Multi.x)) (and (=> (= (ControlFlow 0 39) (- 0 45)) (or (not (= |m#0| null)) (not true))) (=> (or (not (= |m#0| null)) (not true)) (and (=> (= (ControlFlow 0 39) (- 0 44)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 |m#0| _module.Multi.y))) (=> (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 |m#0| _module.Multi.y)) (and (=> (= (ControlFlow 0 39) (- 0 43)) (or (not (= |m#0| null)) (not true))) (=> (or (not (= |m#0| null)) (not true)) (=> (= |a##0@0| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |m#0|) _module.Multi.x)))) (and (=> (= (ControlFlow 0 39) (- 0 42)) (or (not (= |m#0| null)) (not true))) (=> (or (not (= |m#0| null)) (not true)) (=> (= |b##0@0| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |m#0|) _module.Multi.y)))) (=> (and ($IsGoodHeap $Heap@7) ($IsHeapAnchor $Heap@7)) (=> (and (and (and (= |call3formal@x#0@0@@0| |b##0@0|) (= |call4formal@y#0@0@@0| |a##0@0|)) (and (forall (($o@@24 T@U) ) (!  (=> (and (or (not (= $o@@24 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 $o@@24) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@7 $o@@24) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 $o@@24)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@7 $o@@24))
)) ($HeapSucc $Heap@6 $Heap@7))) (and (and (= $Heap@8 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap@7 |m#0| (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@7 |m#0|) _module.Multi.x ($Box intType (int_2_U |call3formal@x#0@0@@0|))))) ($IsGoodHeap $Heap@8)) (and (= $Heap@9 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap@8 |m#0| (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@8 |m#0|) _module.Multi.y ($Box intType (int_2_U |call4formal@y#0@0@@0|))))) ($IsGoodHeap $Heap@9)))) (and (=> (= (ControlFlow 0 39) (- 0 41)) (or (not (= |m#0| null)) (not true))) (and (=> (= (ControlFlow 0 39) (- 0 40)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@9 |m#0|) _module.Multi.y))) (LitInt 12))) (=> (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@9 |m#0|) _module.Multi.y))) (LitInt 12)) (and (=> (= (ControlFlow 0 39) 30) anon12_Then_correct) (=> (= (ControlFlow 0 39) 38) anon12_Else_correct))))))))))))))))))))))))))))))))))))))))))))))))))
(let ((anon11_Then_correct  (and (=> (= (ControlFlow 0 58) (- 0 62)) (or (not (= |m#0| null)) (not true))) (and (=> (= (ControlFlow 0 58) (- 0 61)) (or (not (= |m#0| null)) (not true))) (and (=> (= (ControlFlow 0 58) (- 0 60)) ($IsAlloc refType |m#0| Tclass._module.Multi $Heap)) (=> ($IsAlloc refType |m#0| Tclass._module.Multi $Heap) (and (=> (= (ControlFlow 0 58) (- 0 59)) (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |m#0|) _module.Multi.next)) ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |m#0|) _module.Multi.next)))) (=> (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |m#0|) _module.Multi.next)) ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |m#0|) _module.Multi.next))) (=> (= (ControlFlow 0 58) 39) anon3_correct)))))))))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#5| null $Heap alloc |m#0| ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |m#0|) _module.Multi.next)))) (and (=> (= (ControlFlow 0 63) (- 0 73)) (or (not (= |m#0| null)) (not true))) (=> (or (not (= |m#0| null)) (not true)) (and (=> (= (ControlFlow 0 63) (- 0 72)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 |m#0| _module.Multi.x))) (=> (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 |m#0| _module.Multi.x)) (=> (= |$rhs#0@0| (LitInt 10)) (=> (and (= $Heap@0 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap |m#0| (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |m#0|) _module.Multi.x ($Box intType (int_2_U |$rhs#0@0|))))) ($IsGoodHeap $Heap@0)) (and (=> (= (ControlFlow 0 63) (- 0 71)) (or (not (= |m#0| null)) (not true))) (=> (or (not (= |m#0| null)) (not true)) (=> (= |p#0@0| ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |m#0|) _module.Multi.next))) (and (=> (= (ControlFlow 0 63) (- 0 70)) (or (not (= |m#0| null)) (not true))) (=> (or (not (= |m#0| null)) (not true)) (and (=> (= (ControlFlow 0 63) (- 0 69)) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |m#0|) _module.Multi.next)) null)) (not true))) (=> (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |m#0|) _module.Multi.next)) null)) (not true)) (=> (= $obj0@0 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |m#0|) _module.Multi.next))) (and (=> (= (ControlFlow 0 63) (- 0 68)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $obj0@0 _module.Multi.next))) (=> (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $obj0@0 _module.Multi.next)) (and (=> (= (ControlFlow 0 63) (- 0 67)) (or (not (= |m#0| null)) (not true))) (=> (or (not (= |m#0| null)) (not true)) (and (=> (= (ControlFlow 0 63) (- 0 66)) (or (not (= |m#0| null)) (not true))) (=> (or (not (= |m#0| null)) (not true)) (=> (= |z##0@0| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |m#0|) _module.Multi.x)))) (and (=> (= (ControlFlow 0 63) (- 0 65)) (forall (($o@@25 T@U) ($f@@10 T@U) )  (=> (and (and (or (not (= $o@@25 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@25) alloc)))) (= $o@@25 |m#0|)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@25 $f@@10))))) (=> (forall (($o@@26 T@U) ($f@@11 T@U) )  (=> (and (and (or (not (= $o@@26 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@26) alloc)))) (= $o@@26 |m#0|)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@26 $f@@11)))) (=> (and ($Is refType |call3formal@m#0@@0| Tclass._module.Multi?) ($IsAlloc refType |call3formal@m#0@@0| Tclass._module.Multi? $Heap)) (and (=> (= (ControlFlow 0 63) (- 0 64)) (<= (LitInt 0) |z##0@0|)) (=> (<= (LitInt 0) |z##0@0|) (=> (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1)) (=> (and (and (and ($Is refType |call3formal@m#0@0@@0| Tclass._module.Multi?) ($IsAlloc refType |call3formal@m#0@0@@0| Tclass._module.Multi? $Heap@1)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |m#0|) _module.Multi.y))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |m#0|) _module.Multi.y))))) (and (and (forall (($o@@27 T@U) ) (!  (=> (and (or (not (= $o@@27 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@27) alloc)))) (or (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@27) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@27)) (= $o@@27 |m#0|)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@27))
)) ($HeapSucc $Heap@0 $Heap@1)) (and (= $Heap@2 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap@1 $obj0@0 (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $obj0@0) _module.Multi.next ($Box refType |call3formal@m#0@0@@0|)))) ($IsGoodHeap $Heap@2)))) (and (=> (= (ControlFlow 0 63) 58) anon11_Then_correct) (=> (= (ControlFlow 0 63) 39) anon3_correct)))))))))))))))))))))))))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (and ($Is refType |m#0| Tclass._module.Multi) ($IsAlloc refType |m#0| Tclass._module.Multi $Heap))) (=> (and (and (and (and ($Is refType |p#0| Tclass._module.Multi?) ($IsAlloc refType |p#0| Tclass._module.Multi? $Heap)) true) (= 1 $FunctionContextHeight)) (and (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |m#0|) _module.Multi.next)) null)) (not true)) (= (ControlFlow 0 74) 63))) anon0_correct))))
PreconditionGeneratedEntry_correct)))))))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 39) (- 56))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 39) (- 55))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 30) (- 37))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
