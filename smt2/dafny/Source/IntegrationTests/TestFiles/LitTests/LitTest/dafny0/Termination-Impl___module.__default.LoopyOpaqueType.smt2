(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Bool)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 (Bool) T@U)
(declare-fun $generated@@6 (T@U) Bool)
(declare-fun $generated@@7 (Int) T@U)
(declare-fun $generated@@8 (T@U) Int)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@17 (T@U T@U) Bool)
(declare-fun $generated@@18 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@19 () T@T)
(declare-fun $generated@@20 () T@T)
(declare-fun $generated@@21 () T@T)
(declare-fun $generated@@22 (T@T T@T) T@T)
(declare-fun $generated@@23 () T@U)
(declare-fun $generated@@24 (T@T T@U) T@U)
(declare-fun $generated@@25 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@26 (T@T) T@T)
(declare-fun $generated@@27 (T@T) T@T)
(declare-fun $generated@@48 (T@T T@U) T@U)
(declare-fun $generated@@51 (T@U) Bool)
(declare-fun $generated@@52 (T@U T@U T@U) Bool)
(declare-fun $generated@@53 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@67 (T@U T@U) Bool)
(declare-fun $generated@@75 (T@U T@U) Bool)
(declare-fun $generated@@76 (T@T T@U T@U) Bool)
(declare-fun $generated@@85 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@86 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@87 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (forall (($generated@@11 Bool) ) (! (= ($generated@@6 ($generated@@5 $generated@@11)) $generated@@11)
 :pattern ( ($generated@@5 $generated@@11))
))) (forall (($generated@@12 T@U) ) (! (= ($generated@@5 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 Int) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))))
(assert ($generated $generated@@0))
(assert  (and (and (and (and (and (and (and (forall (($generated@@28 T@T) ($generated@@29 T@T) ($generated@@30 T@U) ($generated@@31 T@U) ($generated@@32 T@U) ) (! (= ($generated@@18 $generated@@28 $generated@@29 ($generated@@25 $generated@@28 $generated@@29 $generated@@31 $generated@@32 $generated@@30) $generated@@32) $generated@@30)
 :weight 0
)) (forall (($generated@@33 T@T) ($generated@@34 T@T) ($generated@@35 T@U) ($generated@@36 T@U) ($generated@@37 T@U) ($generated@@38 T@U) ) (!  (or (= $generated@@37 $generated@@38) (= ($generated@@18 $generated@@33 $generated@@34 ($generated@@25 $generated@@33 $generated@@34 $generated@@36 $generated@@37 $generated@@35) $generated@@38) ($generated@@18 $generated@@33 $generated@@34 $generated@@36 $generated@@38)))
 :weight 0
))) (= ($generated@@1 $generated@@19) 3)) (= ($generated@@1 $generated@@20) 4)) (= ($generated@@1 $generated@@21) 5)) (forall (($generated@@39 T@T) ($generated@@40 T@T) ) (= ($generated@@1 ($generated@@22 $generated@@39 $generated@@40)) 6))) (forall (($generated@@41 T@T) ($generated@@42 T@T) ) (! (= ($generated@@26 ($generated@@22 $generated@@41 $generated@@42)) $generated@@41)
 :pattern ( ($generated@@22 $generated@@41 $generated@@42))
))) (forall (($generated@@43 T@T) ($generated@@44 T@T) ) (! (= ($generated@@27 ($generated@@22 $generated@@43 $generated@@44)) $generated@@44)
 :pattern ( ($generated@@22 $generated@@43 $generated@@44))
))))
(assert (forall (($generated@@45 T@U) ($generated@@46 T@U) ) (!  (=> ($generated@@17 $generated@@45 $generated@@46) (forall (($generated@@47 T@U) ) (!  (=> ($generated@@6 ($generated@@24 $generated@@2 ($generated@@18 $generated@@19 $generated@@20 ($generated@@18 $generated@@21 ($generated@@22 $generated@@19 $generated@@20) $generated@@45 $generated@@47) $generated@@23))) ($generated@@6 ($generated@@24 $generated@@2 ($generated@@18 $generated@@19 $generated@@20 ($generated@@18 $generated@@21 ($generated@@22 $generated@@19 $generated@@20) $generated@@46 $generated@@47) $generated@@23))))
 :pattern ( ($generated@@18 $generated@@19 $generated@@20 ($generated@@18 $generated@@21 ($generated@@22 $generated@@19 $generated@@20) $generated@@46 $generated@@47) $generated@@23))
)))
 :pattern ( ($generated@@17 $generated@@45 $generated@@46))
)))
(assert (forall (($generated@@49 T@U) ($generated@@50 T@T) ) (! (= ($generated@@48 $generated@@50 ($generated@@24 $generated@@50 $generated@@49)) $generated@@49)
 :pattern ( ($generated@@24 $generated@@50 $generated@@49))
)))
(assert ($generated@@51 $generated@@23))
(assert (forall (($generated@@54 T@U) ($generated@@55 T@U) ($generated@@56 T@U) ($generated@@57 T@T) ) (! (= ($generated@@52 ($generated@@48 $generated@@57 $generated@@54) $generated@@55 $generated@@56) ($generated@@53 $generated@@57 $generated@@54 $generated@@55 $generated@@56))
 :pattern ( ($generated@@52 ($generated@@48 $generated@@57 $generated@@54) $generated@@55 $generated@@56))
)))
(assert (forall (($generated@@58 T@U) ($generated@@59 T@U) ($generated@@60 T@U) ($generated@@61 T@U) ) (!  (=> ($generated@@17 $generated@@58 $generated@@59) (=> ($generated@@52 $generated@@60 $generated@@61 $generated@@58) ($generated@@52 $generated@@60 $generated@@61 $generated@@59)))
 :pattern ( ($generated@@17 $generated@@58 $generated@@59) ($generated@@52 $generated@@60 $generated@@61 $generated@@58))
)))
(assert (forall (($generated@@62 T@U) ($generated@@63 T@U) ($generated@@64 T@U) ($generated@@65 T@U) ($generated@@66 T@T) ) (!  (=> ($generated@@17 $generated@@62 $generated@@63) (=> ($generated@@53 $generated@@66 $generated@@64 $generated@@65 $generated@@62) ($generated@@53 $generated@@66 $generated@@64 $generated@@65 $generated@@63)))
 :pattern ( ($generated@@17 $generated@@62 $generated@@63) ($generated@@53 $generated@@66 $generated@@64 $generated@@65 $generated@@62))
)))
(assert (forall (($generated@@68 T@U) ($generated@@69 T@U) ) (!  (=> ($generated@@67 $generated@@68 $generated@@69) (and ($generated@@17 $generated@@68 $generated@@69) (forall (($generated@@70 T@U) ($generated@@71 T@U) ) (!  (=> (not ($generated@@51 $generated@@71)) (= ($generated@@18 $generated@@19 $generated@@20 ($generated@@18 $generated@@21 ($generated@@22 $generated@@19 $generated@@20) $generated@@68 $generated@@70) $generated@@71) ($generated@@18 $generated@@19 $generated@@20 ($generated@@18 $generated@@21 ($generated@@22 $generated@@19 $generated@@20) $generated@@69 $generated@@70) $generated@@71)))
 :pattern ( ($generated@@18 $generated@@19 $generated@@20 ($generated@@18 $generated@@21 ($generated@@22 $generated@@19 $generated@@20) $generated@@69 $generated@@70) $generated@@71))
))))
 :pattern ( ($generated@@67 $generated@@68 $generated@@69))
)))
(assert (forall (($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@U) ) (!  (=> (or (not (= $generated@@72 $generated@@74)) (not true)) (=> (and ($generated@@17 $generated@@72 $generated@@73) ($generated@@17 $generated@@73 $generated@@74)) ($generated@@17 $generated@@72 $generated@@74)))
 :pattern ( ($generated@@17 $generated@@72 $generated@@73) ($generated@@17 $generated@@73 $generated@@74))
)))
(assert (forall (($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@T) ) (! (= ($generated@@75 ($generated@@48 $generated@@79 $generated@@77) $generated@@78) ($generated@@76 $generated@@79 $generated@@77 $generated@@78))
 :pattern ( ($generated@@75 ($generated@@48 $generated@@79 $generated@@77) $generated@@78))
)))
(assert (forall (($generated@@80 T@U) ) (!  (=> ($generated $generated@@80) (forall (($generated@@81 T@U) ($generated@@82 T@U) ) (!  (=> ($generated@@75 $generated@@82 $generated@@80) ($generated@@52 $generated@@82 $generated@@80 $generated@@81))
 :pattern ( ($generated@@52 $generated@@82 $generated@@80 $generated@@81))
)))
 :pattern ( ($generated $generated@@80))
)))
(assert (forall (($generated@@83 T@U) ($generated@@84 T@T) ) (! (= ($generated@@24 $generated@@84 ($generated@@48 $generated@@84 $generated@@83)) $generated@@83)
 :pattern ( ($generated@@48 $generated@@84 $generated@@83))
)))
(assert  (and (forall (($generated@@88 T@T) ($generated@@89 T@T) ($generated@@90 T@T) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (! (= ($generated@@85 $generated@@88 $generated@@89 $generated@@90 ($generated@@87 $generated@@88 $generated@@89 $generated@@90 $generated@@92 $generated@@93 $generated@@94 $generated@@91) $generated@@93 $generated@@94) $generated@@91)
 :weight 0
)) (and (forall (($generated@@95 T@T) ($generated@@96 T@T) ($generated@@97 T@T) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ) (!  (or (= $generated@@100 $generated@@102) (= ($generated@@85 $generated@@95 $generated@@96 $generated@@97 ($generated@@87 $generated@@95 $generated@@96 $generated@@97 $generated@@99 $generated@@100 $generated@@101 $generated@@98) $generated@@102 $generated@@103) ($generated@@85 $generated@@95 $generated@@96 $generated@@97 $generated@@99 $generated@@102 $generated@@103)))
 :weight 0
)) (forall (($generated@@104 T@T) ($generated@@105 T@T) ($generated@@106 T@T) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ) (!  (or (= $generated@@110 $generated@@112) (= ($generated@@85 $generated@@104 $generated@@105 $generated@@106 ($generated@@87 $generated@@104 $generated@@105 $generated@@106 $generated@@108 $generated@@109 $generated@@110 $generated@@107) $generated@@111 $generated@@112) ($generated@@85 $generated@@104 $generated@@105 $generated@@106 $generated@@108 $generated@@111 $generated@@112)))
 :weight 0
)))))
(assert (forall (($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 Bool) ($generated@@117 T@U) ($generated@@118 T@U) ) (! (= ($generated@@6 ($generated@@85 $generated@@21 $generated@@19 $generated@@2 ($generated@@86 $generated@@113 $generated@@114 $generated@@115 $generated@@116) $generated@@117 $generated@@118))  (=> (and (or (not (= $generated@@117 $generated@@113)) (not true)) ($generated@@6 ($generated@@24 $generated@@2 ($generated@@18 $generated@@19 $generated@@20 ($generated@@18 $generated@@21 ($generated@@22 $generated@@19 $generated@@20) $generated@@114 $generated@@117) $generated@@115)))) $generated@@116))
 :pattern ( ($generated@@85 $generated@@21 $generated@@19 $generated@@2 ($generated@@86 $generated@@113 $generated@@114 $generated@@115 $generated@@116) $generated@@117 $generated@@118))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@119 () Int)
(declare-fun $generated@@120 () Bool)
(declare-fun $generated@@121 () T@U)
(declare-fun $generated@@122 () T@U)
(declare-fun $generated@@123 () T@U)
(declare-fun $generated@@124 () T@U)
(declare-fun $generated@@125 (T@U) Bool)
(declare-fun $generated@@126 (T@U) Bool)
(declare-fun $generated@@127 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 9) (let (($generated@@128  (=> (and (< $generated@@119 100) (= (ControlFlow 0 5) (- 0 4))) false)))
(let (($generated@@129 true))
(let (($generated@@130  (=> $generated@@120 (and (=> (= (ControlFlow 0 6) 3) $generated@@129) (=> (= (ControlFlow 0 6) 5) $generated@@128)))))
(let (($generated@@131 true))
(let (($generated@@132  (and (=> (= (ControlFlow 0 7) 2) $generated@@131) (=> (= (ControlFlow 0 7) 6) $generated@@130))))
(let (($generated@@133 true))
(let (($generated@@134  (=> (= $generated@@121 ($generated@@86 $generated@@122 $generated@@123 $generated@@23 false)) (=> (and (and (forall (($generated@@135 T@U) ) (!  (=> (and (or (not (= $generated@@135 $generated@@122)) (not true)) ($generated@@6 ($generated@@24 $generated@@2 ($generated@@18 $generated@@19 $generated@@20 ($generated@@18 $generated@@21 ($generated@@22 $generated@@19 $generated@@20) $generated@@123 $generated@@135) $generated@@23)))) (= ($generated@@18 $generated@@21 ($generated@@22 $generated@@19 $generated@@20) $generated@@123 $generated@@135) ($generated@@18 $generated@@21 ($generated@@22 $generated@@19 $generated@@20) $generated@@123 $generated@@135)))
 :pattern ( ($generated@@18 $generated@@21 ($generated@@22 $generated@@19 $generated@@20) $generated@@123 $generated@@135))
)) ($generated@@67 $generated@@123 $generated@@123)) (and (forall (($generated@@136 T@U) ($generated@@137 T@U) ) (!  (=> (and (or (not (= $generated@@136 $generated@@122)) (not true)) ($generated@@6 ($generated@@24 $generated@@2 ($generated@@18 $generated@@19 $generated@@20 ($generated@@18 $generated@@21 ($generated@@22 $generated@@19 $generated@@20) $generated@@123 $generated@@136) $generated@@23)))) (or (= ($generated@@18 $generated@@19 $generated@@20 ($generated@@18 $generated@@21 ($generated@@22 $generated@@19 $generated@@20) $generated@@123 $generated@@136) $generated@@137) ($generated@@18 $generated@@19 $generated@@20 ($generated@@18 $generated@@21 ($generated@@22 $generated@@19 $generated@@20) $generated@@123 $generated@@136) $generated@@137)) ($generated@@6 ($generated@@85 $generated@@21 $generated@@19 $generated@@2 $generated@@121 $generated@@136 $generated@@137))))
 :pattern ( ($generated@@18 $generated@@19 $generated@@20 ($generated@@18 $generated@@21 ($generated@@22 $generated@@19 $generated@@20) $generated@@123 $generated@@136) $generated@@137))
)) (= $generated@@124 $generated@@124))) (and (=> (= (ControlFlow 0 8) 1) $generated@@133) (=> (= (ControlFlow 0 8) 7) $generated@@132))))))
(let (($generated@@138  (=> (and ($generated@@125 $generated@@123) ($generated@@126 $generated@@123)) (=> (and (and ($generated@@75 $generated@@124 $generated@@0) ($generated@@52 $generated@@124 $generated@@0 $generated@@123)) (and (= 0 $generated@@127) (= (ControlFlow 0 9) 8))) $generated@@134))))
$generated@@138)))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 5) (- 4))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
