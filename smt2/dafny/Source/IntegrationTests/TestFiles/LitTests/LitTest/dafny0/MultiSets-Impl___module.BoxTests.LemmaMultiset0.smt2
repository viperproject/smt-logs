(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 (T@T) Int)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Bool) T@U)
(declare-fun $generated@@9 (T@U) Bool)
(declare-fun $generated@@10 (Int) T@U)
(declare-fun $generated@@11 (T@U) Int)
(declare-fun $generated@@12 (Real) T@U)
(declare-fun $generated@@13 (T@U) Real)
(declare-fun $generated@@20 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@21 () T@T)
(declare-fun $generated@@22 (T@U) T@U)
(declare-fun $generated@@23 (T@U) T@U)
(declare-fun $generated@@27 (T@T T@U T@U) Bool)
(declare-fun $generated@@28 () T@T)
(declare-fun $generated@@29 (T@U) T@U)
(declare-fun $generated@@30 (T@U) Bool)
(declare-fun $generated@@33 () T@U)
(declare-fun $generated@@34 (T@T T@U) T@U)
(declare-fun $generated@@35 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@36 () T@T)
(declare-fun $generated@@37 () T@T)
(declare-fun $generated@@38 (T@T T@T) T@T)
(declare-fun $generated@@39 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@40 (T@T) T@T)
(declare-fun $generated@@41 (T@T) T@T)
(declare-fun $generated@@62 (T@T T@U) T@U)
(declare-fun $generated@@67 (T@U T@U T@U) Bool)
(declare-fun $generated@@72 (T@U) T@U)
(declare-fun $generated@@73 (T@U) T@U)
(declare-fun $generated@@76 (T@U) T@U)
(declare-fun $generated@@79 (T@U T@U) Int)
(declare-fun $generated@@80 (T@U T@U) Bool)
(declare-fun $generated@@87 (T@U) Int)
(declare-fun $generated@@91 () T@U)
(declare-fun $generated@@93 (T@U) T@U)
(declare-fun $generated@@96 (T@U) T@U)
(declare-fun $generated@@98 (T@U) T@U)
(declare-fun $generated@@104 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@105 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@106 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@144 (T@U T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@4 $generated@@5) 0) (= ($generated@@4 $generated@@6) 1)) (= ($generated@@4 $generated@@7) 2)) (forall (($generated@@14 Bool) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Int) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Real) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3)
)
(assert (= ($generated@@4 $generated@@21) 3))
(assert (forall (($generated@@24 T@U) ($generated@@25 T@U) ($generated@@26 T@U) ) (! (= ($generated@@20 $generated@@21 $generated@@25 ($generated@@22 $generated@@24) $generated@@26) ($generated@@20 $generated@@21 $generated@@25 ($generated@@23 $generated@@24) $generated@@26))
 :pattern ( ($generated@@20 $generated@@21 $generated@@25 ($generated@@22 $generated@@24) $generated@@26))
 :pattern ( ($generated@@20 $generated@@21 $generated@@25 ($generated@@23 $generated@@24) $generated@@26))
)))
(assert (= ($generated@@4 $generated@@28) 4))
(assert (forall (($generated@@31 T@U) ($generated@@32 T@U) ) (!  (=> ($generated@@27 $generated@@28 $generated@@31 ($generated@@29 $generated@@32)) ($generated@@30 $generated@@31))
 :pattern ( ($generated@@27 $generated@@28 $generated@@31 ($generated@@29 $generated@@32)))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@42 T@T) ($generated@@43 T@T) ($generated@@44 T@U) ($generated@@45 T@U) ($generated@@46 T@U) ) (! (= ($generated@@35 $generated@@42 $generated@@43 ($generated@@39 $generated@@42 $generated@@43 $generated@@45 $generated@@46 $generated@@44) $generated@@46) $generated@@44)
 :weight 0
)) (forall (($generated@@47 T@T) ($generated@@48 T@T) ($generated@@49 T@U) ($generated@@50 T@U) ($generated@@51 T@U) ($generated@@52 T@U) ) (!  (or (= $generated@@51 $generated@@52) (= ($generated@@35 $generated@@47 $generated@@48 ($generated@@39 $generated@@47 $generated@@48 $generated@@50 $generated@@51 $generated@@49) $generated@@52) ($generated@@35 $generated@@47 $generated@@48 $generated@@50 $generated@@52)))
 :weight 0
))) (= ($generated@@4 $generated@@36) 5)) (= ($generated@@4 $generated@@37) 6)) (forall (($generated@@53 T@T) ($generated@@54 T@T) ) (= ($generated@@4 ($generated@@38 $generated@@53 $generated@@54)) 7))) (forall (($generated@@55 T@T) ($generated@@56 T@T) ) (! (= ($generated@@40 ($generated@@38 $generated@@55 $generated@@56)) $generated@@55)
 :pattern ( ($generated@@38 $generated@@55 $generated@@56))
))) (forall (($generated@@57 T@T) ($generated@@58 T@T) ) (! (= ($generated@@41 ($generated@@38 $generated@@57 $generated@@58)) $generated@@58)
 :pattern ( ($generated@@38 $generated@@57 $generated@@58))
))))
(assert (forall (($generated@@59 T@U) ($generated@@60 T@U) ($generated@@61 T@U) ) (! (= ($generated@@20 $generated@@21 $generated@@60 ($generated@@23 $generated@@59) $generated@@61)  (or (= $generated@@60 $generated@@33) ($generated@@9 ($generated@@34 $generated@@5 ($generated@@35 $generated@@36 $generated@@37 ($generated@@35 $generated@@21 ($generated@@38 $generated@@36 $generated@@37) $generated@@61 $generated@@60) $generated@@0)))))
 :pattern ( ($generated@@20 $generated@@21 $generated@@60 ($generated@@23 $generated@@59) $generated@@61))
)))
(assert (forall (($generated@@63 T@U) ($generated@@64 T@T) ) (! (= ($generated@@62 $generated@@64 ($generated@@34 $generated@@64 $generated@@63)) $generated@@63)
 :pattern ( ($generated@@34 $generated@@64 $generated@@63))
)))
(assert (forall (($generated@@65 T@U) ($generated@@66 T@U) ) (! (= ($generated@@27 $generated@@21 $generated@@66 ($generated@@22 $generated@@65))  (and ($generated@@27 $generated@@21 $generated@@66 ($generated@@23 $generated@@65)) (or (not (= $generated@@66 $generated@@33)) (not true))))
 :pattern ( ($generated@@27 $generated@@21 $generated@@66 ($generated@@22 $generated@@65)))
 :pattern ( ($generated@@27 $generated@@21 $generated@@66 ($generated@@23 $generated@@65)))
)))
(assert (forall (($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@T) ) (! (= ($generated@@67 ($generated@@62 $generated@@71 $generated@@68) $generated@@69 $generated@@70) ($generated@@20 $generated@@71 $generated@@68 $generated@@69 $generated@@70))
 :pattern ( ($generated@@67 ($generated@@62 $generated@@71 $generated@@68) $generated@@69 $generated@@70))
)))
(assert (forall (($generated@@74 T@U) ) (!  (and (= ($generated@@72 ($generated@@23 $generated@@74)) $generated@@1) (= ($generated@@73 ($generated@@23 $generated@@74)) $generated@@3))
 :pattern ( ($generated@@23 $generated@@74))
)))
(assert (forall (($generated@@75 T@U) ) (!  (and (= ($generated@@72 ($generated@@22 $generated@@75)) $generated@@2) (= ($generated@@73 ($generated@@22 $generated@@75)) $generated@@3))
 :pattern ( ($generated@@22 $generated@@75))
)))
(assert (forall (($generated@@77 T@U) ($generated@@78 T@U) ) (! (= ($generated@@27 $generated@@21 $generated@@78 ($generated@@23 $generated@@77))  (or (= $generated@@78 $generated@@33) (= ($generated@@76 $generated@@78) ($generated@@23 $generated@@77))))
 :pattern ( ($generated@@27 $generated@@21 $generated@@78 ($generated@@23 $generated@@77)))
)))
(assert (forall (($generated@@81 T@U) ($generated@@82 T@U) ) (! (= ($generated@@27 $generated@@28 $generated@@81 ($generated@@29 $generated@@82)) (forall (($generated@@83 T@U) ) (!  (=> (< 0 ($generated@@79 $generated@@81 $generated@@83)) ($generated@@80 $generated@@83 $generated@@82))
 :pattern ( ($generated@@79 $generated@@81 $generated@@83))
)))
 :pattern ( ($generated@@27 $generated@@28 $generated@@81 ($generated@@29 $generated@@82)))
)))
(assert (forall (($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@T) ) (! (= ($generated@@80 ($generated@@62 $generated@@86 $generated@@84) $generated@@85) ($generated@@27 $generated@@86 $generated@@84 $generated@@85))
 :pattern ( ($generated@@80 ($generated@@62 $generated@@86 $generated@@84) $generated@@85))
)))
(assert (forall (($generated@@88 T@U) ) (! (= ($generated@@30 $generated@@88) (forall (($generated@@89 T@U) ) (!  (and (<= 0 ($generated@@79 $generated@@88 $generated@@89)) (<= ($generated@@79 $generated@@88 $generated@@89) ($generated@@87 $generated@@88)))
 :pattern ( ($generated@@79 $generated@@88 $generated@@89))
)))
 :pattern ( ($generated@@30 $generated@@88))
)))
(assert (forall (($generated@@90 T@U) ) (! (<= 0 ($generated@@87 $generated@@90))
 :pattern ( ($generated@@87 $generated@@90))
)))
(assert (forall (($generated@@92 T@U) ) (! (= ($generated@@79 $generated@@91 $generated@@92) 0)
 :pattern ( ($generated@@79 $generated@@91 $generated@@92))
)))
(assert (forall (($generated@@94 T@U) ) (! (= ($generated@@93 ($generated@@29 $generated@@94)) $generated@@94)
 :pattern ( ($generated@@29 $generated@@94))
)))
(assert (forall (($generated@@95 T@U) ) (! (= ($generated@@72 ($generated@@29 $generated@@95)) $generated)
 :pattern ( ($generated@@29 $generated@@95))
)))
(assert (forall (($generated@@97 T@U) ) (! (= ($generated@@96 ($generated@@23 $generated@@97)) $generated@@97)
 :pattern ( ($generated@@23 $generated@@97))
)))
(assert (forall (($generated@@99 T@U) ) (! (= ($generated@@98 ($generated@@22 $generated@@99)) $generated@@99)
 :pattern ( ($generated@@22 $generated@@99))
)))
(assert (forall (($generated@@100 T@U) ($generated@@101 T@T) ) (! (= ($generated@@34 $generated@@101 ($generated@@62 $generated@@101 $generated@@100)) $generated@@100)
 :pattern ( ($generated@@62 $generated@@101 $generated@@100))
)))
(assert (forall (($generated@@102 T@U) ) (!  (and (= (= ($generated@@87 $generated@@102) 0) (= $generated@@102 $generated@@91)) (=> (or (not (= ($generated@@87 $generated@@102) 0)) (not true)) (exists (($generated@@103 T@U) ) (! (< 0 ($generated@@79 $generated@@102 $generated@@103))
 :pattern ( ($generated@@79 $generated@@102 $generated@@103))
))))
 :pattern ( ($generated@@87 $generated@@102))
)))
(assert  (and (forall (($generated@@107 T@T) ($generated@@108 T@T) ($generated@@109 T@T) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ) (! (= ($generated@@104 $generated@@107 $generated@@108 $generated@@109 ($generated@@106 $generated@@107 $generated@@108 $generated@@109 $generated@@111 $generated@@112 $generated@@113 $generated@@110) $generated@@112 $generated@@113) $generated@@110)
 :weight 0
)) (and (forall (($generated@@114 T@T) ($generated@@115 T@T) ($generated@@116 T@T) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ) (!  (or (= $generated@@119 $generated@@121) (= ($generated@@104 $generated@@114 $generated@@115 $generated@@116 ($generated@@106 $generated@@114 $generated@@115 $generated@@116 $generated@@118 $generated@@119 $generated@@120 $generated@@117) $generated@@121 $generated@@122) ($generated@@104 $generated@@114 $generated@@115 $generated@@116 $generated@@118 $generated@@121 $generated@@122)))
 :weight 0
)) (forall (($generated@@123 T@T) ($generated@@124 T@T) ($generated@@125 T@T) ($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ) (!  (or (= $generated@@129 $generated@@131) (= ($generated@@104 $generated@@123 $generated@@124 $generated@@125 ($generated@@106 $generated@@123 $generated@@124 $generated@@125 $generated@@127 $generated@@128 $generated@@129 $generated@@126) $generated@@130 $generated@@131) ($generated@@104 $generated@@123 $generated@@124 $generated@@125 $generated@@127 $generated@@130 $generated@@131)))
 :weight 0
)))))
(assert (forall (($generated@@132 T@U) ($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 Bool) ($generated@@136 T@U) ($generated@@137 T@U) ) (! (= ($generated@@9 ($generated@@104 $generated@@21 $generated@@36 $generated@@5 ($generated@@105 $generated@@132 $generated@@133 $generated@@134 $generated@@135) $generated@@136 $generated@@137))  (=> (and (or (not (= $generated@@136 $generated@@132)) (not true)) ($generated@@9 ($generated@@34 $generated@@5 ($generated@@35 $generated@@36 $generated@@37 ($generated@@35 $generated@@21 ($generated@@38 $generated@@36 $generated@@37) $generated@@133 $generated@@136) $generated@@134)))) $generated@@135))
 :pattern ( ($generated@@104 $generated@@21 $generated@@36 $generated@@5 ($generated@@105 $generated@@132 $generated@@133 $generated@@134 $generated@@135) $generated@@136 $generated@@137))
)))
(assert (forall (($generated@@138 T@U) ($generated@@139 T@U) ) (!  (=> ($generated@@80 $generated@@138 ($generated@@29 $generated@@139)) (and (= ($generated@@62 $generated@@28 ($generated@@34 $generated@@28 $generated@@138)) $generated@@138) ($generated@@27 $generated@@28 ($generated@@34 $generated@@28 $generated@@138) ($generated@@29 $generated@@139))))
 :pattern ( ($generated@@80 $generated@@138 ($generated@@29 $generated@@139)))
)))
(assert (forall (($generated@@140 T@U) ($generated@@141 T@U) ) (!  (=> ($generated@@80 $generated@@141 ($generated@@23 $generated@@140)) (and (= ($generated@@62 $generated@@21 ($generated@@34 $generated@@21 $generated@@141)) $generated@@141) ($generated@@27 $generated@@21 ($generated@@34 $generated@@21 $generated@@141) ($generated@@23 $generated@@140))))
 :pattern ( ($generated@@80 $generated@@141 ($generated@@23 $generated@@140)))
)))
(assert (forall (($generated@@142 T@U) ($generated@@143 T@U) ) (!  (=> ($generated@@80 $generated@@143 ($generated@@22 $generated@@142)) (and (= ($generated@@62 $generated@@21 ($generated@@34 $generated@@21 $generated@@143)) $generated@@143) ($generated@@27 $generated@@21 ($generated@@34 $generated@@21 $generated@@143) ($generated@@22 $generated@@142))))
 :pattern ( ($generated@@80 $generated@@143 ($generated@@22 $generated@@142)))
)))
(assert (forall (($generated@@145 T@U) ($generated@@146 T@U) ) (! (= ($generated@@144 $generated@@145 $generated@@146) (forall (($generated@@147 T@U) ) (! (<= ($generated@@79 $generated@@145 $generated@@147) ($generated@@79 $generated@@146 $generated@@147))
 :pattern ( ($generated@@79 $generated@@145 $generated@@147))
 :pattern ( ($generated@@79 $generated@@146 $generated@@147))
)))
 :pattern ( ($generated@@144 $generated@@145 $generated@@146))
)))
(assert (forall (($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 T@U) ) (! (= ($generated@@20 $generated@@28 $generated@@148 ($generated@@29 $generated@@149) $generated@@150) (forall (($generated@@151 T@U) ) (!  (=> (< 0 ($generated@@79 $generated@@148 $generated@@151)) ($generated@@67 $generated@@151 $generated@@149 $generated@@150))
 :pattern ( ($generated@@79 $generated@@148 $generated@@151))
)))
 :pattern ( ($generated@@20 $generated@@28 $generated@@148 ($generated@@29 $generated@@149) $generated@@150))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@152 () T@U)
(declare-fun $generated@@153 () T@U)
(declare-fun $generated@@154 () T@U)
(declare-fun $generated@@155 () T@U)
(declare-fun $generated@@156 (T@U) Bool)
(declare-fun $generated@@157 (T@U) Bool)
(declare-fun $generated@@158 () T@U)
(declare-fun $generated@@159 () T@U)
(declare-fun $generated@@160 () T@U)
(declare-fun $generated@@161 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@162  (=> (and (= $generated@@152 ($generated@@105 $generated@@33 $generated@@153 $generated@@0 false)) (= (ControlFlow 0 2) (- 0 1))) ($generated@@144 $generated@@154 $generated@@155))))
(let (($generated@@163  (=> (and ($generated@@156 $generated@@153) ($generated@@157 $generated@@153)) (=> (and (and (or (not (= $generated@@158 $generated@@33)) (not true)) (and ($generated@@27 $generated@@21 $generated@@158 ($generated@@22 $generated@@159)) ($generated@@20 $generated@@21 $generated@@158 ($generated@@22 $generated@@159) $generated@@153))) (and ($generated@@27 $generated@@28 $generated@@154 ($generated@@29 $generated@@160)) ($generated@@20 $generated@@28 $generated@@154 ($generated@@29 $generated@@160) $generated@@153))) (=> (and (and (and ($generated@@27 $generated@@28 $generated@@155 ($generated@@29 $generated@@160)) ($generated@@20 $generated@@28 $generated@@155 ($generated@@29 $generated@@160) $generated@@153)) (= 0 $generated@@161)) (and (forall (($generated@@164 T@U) ) (!  (=> ($generated@@80 $generated@@164 $generated@@160) (=> (> ($generated@@79 $generated@@154 $generated@@164) 0) (> ($generated@@79 $generated@@155 $generated@@164) 0)))
 :pattern ( ($generated@@79 $generated@@155 $generated@@164))
 :pattern ( ($generated@@79 $generated@@154 $generated@@164))
)) (= (ControlFlow 0 3) 2))) $generated@@162)))))
$generated@@163)))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
