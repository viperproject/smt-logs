(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 (T@T) Int)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Bool) T@U)
(declare-fun $generated@@9 (T@U) Bool)
(declare-fun $generated@@10 (Int) T@U)
(declare-fun $generated@@11 (T@U) Int)
(declare-fun $generated@@12 (Real) T@U)
(declare-fun $generated@@13 (T@U) Real)
(declare-fun $generated@@20 (T@U) T@U)
(declare-fun $generated@@21 () Int)
(declare-fun $generated@@22 (Int) Bool)
(declare-fun $generated@@23 (Int) Bool)
(declare-fun $generated@@25 (Int) Bool)
(declare-fun $generated@@26 (Int) Int)
(declare-fun $generated@@27 (Int) Bool)
(declare-fun $generated@@28 (T@T T@U) T@U)
(declare-fun $generated@@30 (Int) Bool)
(declare-fun $generated@@31 (Int) Bool)
(declare-fun $generated@@36 (T@T T@U) T@U)
(declare-fun $generated@@37 (T@T T@U) T@U)
(declare-fun $generated@@45 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@46 () T@T)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@49 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@50 () T@T)
(declare-fun $generated@@51 (T@T T@T) T@T)
(declare-fun $generated@@52 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@53 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@54 (T@T) T@T)
(declare-fun $generated@@55 (T@T) T@T)
(declare-fun $generated@@107 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@112 (T@T T@U T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@4 $generated@@5) 0) (= ($generated@@4 $generated@@6) 1)) (= ($generated@@4 $generated@@7) 2)) (forall (($generated@@14 Bool) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Int) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Real) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3)
)
(assert (= ($generated@@20 $generated) $generated@@1))
(assert (= ($generated@@20 $generated@@0) $generated@@2))
(assert  (=> (<= 0 $generated@@21) (forall (($generated@@24 Int) ) (!  (=> (or ($generated@@23 $generated@@24) (and (< 0 $generated@@21) (> $generated@@24 4))) (= ($generated@@22 $generated@@24) (> $generated@@24 5)))
 :pattern ( ($generated@@22 $generated@@24))
))))
(assert  (=> (<= 1 $generated@@21) (forall (($generated@@29 Int) ) (!  (=> (or ($generated@@27 ($generated@@26 $generated@@29)) (and (< 1 $generated@@21) (and ($generated@@9 ($generated@@28 $generated@@5 ($generated@@8 (< $generated@@29 50)))) ($generated@@9 ($generated@@28 $generated@@5 ($generated@@8 (> $generated@@29 4))))))) (and ($generated@@23 ($generated@@26 $generated@@29)) (= ($generated@@25 ($generated@@26 $generated@@29)) ($generated@@9 ($generated@@28 $generated@@5 ($generated@@8 ($generated@@22 ($generated@@26 $generated@@29))))))))
 :weight 3
 :pattern ( ($generated@@25 ($generated@@26 $generated@@29)))
))))
(assert  (=> (<= 2 $generated@@21) (forall (($generated@@32 Int) ) (!  (=> (or ($generated@@31 ($generated@@26 $generated@@32)) (and (< 2 $generated@@21) (and ($generated@@9 ($generated@@28 $generated@@5 ($generated@@8 (< $generated@@32 50)))) ($generated@@9 ($generated@@28 $generated@@5 ($generated@@8 (> $generated@@32 4))))))) (and ($generated@@27 ($generated@@26 $generated@@32)) (= ($generated@@30 ($generated@@26 $generated@@32)) ($generated@@9 ($generated@@28 $generated@@5 ($generated@@8 ($generated@@25 ($generated@@26 $generated@@32))))))))
 :weight 3
 :pattern ( ($generated@@30 ($generated@@26 $generated@@32)))
))))
(assert (forall (($generated@@33 Int) ) (! (= ($generated@@26 $generated@@33) $generated@@33)
 :pattern ( ($generated@@26 $generated@@33))
)))
(assert (forall (($generated@@34 T@U) ($generated@@35 T@T) ) (! (= ($generated@@28 $generated@@35 $generated@@34) $generated@@34)
 :pattern ( ($generated@@28 $generated@@35 $generated@@34))
)))
(assert (forall (($generated@@38 T@U) ($generated@@39 T@T) ) (! (= ($generated@@37 $generated@@39 ($generated@@36 $generated@@39 $generated@@38)) $generated@@38)
 :pattern ( ($generated@@36 $generated@@39 $generated@@38))
)))
(assert  (=> (<= 0 $generated@@21) (forall (($generated@@40 Int) ) (!  (=> (or ($generated@@23 ($generated@@26 $generated@@40)) (and (< 0 $generated@@21) ($generated@@9 ($generated@@28 $generated@@5 ($generated@@8 (> $generated@@40 4)))))) (= ($generated@@22 ($generated@@26 $generated@@40)) ($generated@@9 ($generated@@28 $generated@@5 ($generated@@8 (> $generated@@40 5))))))
 :weight 3
 :pattern ( ($generated@@22 ($generated@@26 $generated@@40)))
))))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@T) ) (! (= ($generated@@36 $generated@@42 ($generated@@37 $generated@@42 $generated@@41)) $generated@@41)
 :pattern ( ($generated@@37 $generated@@42 $generated@@41))
)))
(assert  (=> (<= 1 $generated@@21) (forall (($generated@@43 Int) ) (!  (=> (or ($generated@@27 $generated@@43) (and (< 1 $generated@@21) (and (< $generated@@43 50) (> $generated@@43 4)))) (and ($generated@@23 $generated@@43) (= ($generated@@25 $generated@@43) ($generated@@22 $generated@@43))))
 :pattern ( ($generated@@25 $generated@@43))
))))
(assert  (=> (<= 2 $generated@@21) (forall (($generated@@44 Int) ) (!  (=> (or ($generated@@31 $generated@@44) (and (< 2 $generated@@21) (and (< $generated@@44 50) (> $generated@@44 4)))) (and ($generated@@27 $generated@@44) (= ($generated@@30 $generated@@44) ($generated@@25 $generated@@44))))
 :pattern ( ($generated@@30 $generated@@44))
))))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@56 T@T) ($generated@@57 T@T) ($generated@@58 T@T) ($generated@@59 T@U) ($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@U) ) (! (= ($generated@@45 $generated@@56 $generated@@57 $generated@@58 ($generated@@52 $generated@@56 $generated@@57 $generated@@58 $generated@@60 $generated@@61 $generated@@62 $generated@@59) $generated@@61 $generated@@62) $generated@@59)
 :weight 0
)) (and (forall (($generated@@63 T@T) ($generated@@64 T@T) ($generated@@65 T@T) ($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@U) ) (!  (or (= $generated@@68 $generated@@70) (= ($generated@@45 $generated@@63 $generated@@64 $generated@@65 ($generated@@52 $generated@@63 $generated@@64 $generated@@65 $generated@@67 $generated@@68 $generated@@69 $generated@@66) $generated@@70 $generated@@71) ($generated@@45 $generated@@63 $generated@@64 $generated@@65 $generated@@67 $generated@@70 $generated@@71)))
 :weight 0
)) (forall (($generated@@72 T@T) ($generated@@73 T@T) ($generated@@74 T@T) ($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ) (!  (or (= $generated@@78 $generated@@80) (= ($generated@@45 $generated@@72 $generated@@73 $generated@@74 ($generated@@52 $generated@@72 $generated@@73 $generated@@74 $generated@@76 $generated@@77 $generated@@78 $generated@@75) $generated@@79 $generated@@80) ($generated@@45 $generated@@72 $generated@@73 $generated@@74 $generated@@76 $generated@@79 $generated@@80)))
 :weight 0
)))) (= ($generated@@4 $generated@@46) 3)) (= ($generated@@4 $generated@@47) 4)) (forall (($generated@@81 T@T) ($generated@@82 T@T) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ) (! (= ($generated@@49 $generated@@81 $generated@@82 ($generated@@53 $generated@@81 $generated@@82 $generated@@84 $generated@@85 $generated@@83) $generated@@85) $generated@@83)
 :weight 0
))) (forall (($generated@@86 T@T) ($generated@@87 T@T) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ) (!  (or (= $generated@@90 $generated@@91) (= ($generated@@49 $generated@@86 $generated@@87 ($generated@@53 $generated@@86 $generated@@87 $generated@@89 $generated@@90 $generated@@88) $generated@@91) ($generated@@49 $generated@@86 $generated@@87 $generated@@89 $generated@@91)))
 :weight 0
))) (= ($generated@@4 $generated@@50) 5)) (forall (($generated@@92 T@T) ($generated@@93 T@T) ) (= ($generated@@4 ($generated@@51 $generated@@92 $generated@@93)) 6))) (forall (($generated@@94 T@T) ($generated@@95 T@T) ) (! (= ($generated@@54 ($generated@@51 $generated@@94 $generated@@95)) $generated@@94)
 :pattern ( ($generated@@51 $generated@@94 $generated@@95))
))) (forall (($generated@@96 T@T) ($generated@@97 T@T) ) (! (= ($generated@@55 ($generated@@51 $generated@@96 $generated@@97)) $generated@@97)
 :pattern ( ($generated@@51 $generated@@96 $generated@@97))
))))
(assert (forall (($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 Bool) ($generated@@102 T@U) ($generated@@103 T@U) ) (! (= ($generated@@9 ($generated@@45 $generated@@46 $generated@@47 $generated@@5 ($generated@@48 $generated@@98 $generated@@99 $generated@@100 $generated@@101) $generated@@102 $generated@@103))  (=> (and (or (not (= $generated@@102 $generated@@98)) (not true)) ($generated@@9 ($generated@@36 $generated@@5 ($generated@@49 $generated@@47 $generated@@50 ($generated@@49 $generated@@46 ($generated@@51 $generated@@47 $generated@@50) $generated@@99 $generated@@102) $generated@@100)))) $generated@@101))
 :pattern ( ($generated@@45 $generated@@46 $generated@@47 $generated@@5 ($generated@@48 $generated@@98 $generated@@99 $generated@@100 $generated@@101) $generated@@102 $generated@@103))
)))
(assert (forall (($generated@@104 Int) ) (! (= ($generated@@37 $generated@@6 ($generated@@10 ($generated@@26 $generated@@104))) ($generated@@28 $generated@@50 ($generated@@37 $generated@@6 ($generated@@10 $generated@@104))))
 :pattern ( ($generated@@37 $generated@@6 ($generated@@10 ($generated@@26 $generated@@104))))
)))
(assert (forall (($generated@@105 T@U) ($generated@@106 T@T) ) (! (= ($generated@@37 $generated@@106 ($generated@@28 $generated@@106 $generated@@105)) ($generated@@28 $generated@@50 ($generated@@37 $generated@@106 $generated@@105)))
 :pattern ( ($generated@@37 $generated@@106 ($generated@@28 $generated@@106 $generated@@105)))
)))
(assert (forall (($generated@@108 T@U) ($generated@@109 T@U) ) (! ($generated@@107 $generated@@6 $generated@@109 $generated@@0 $generated@@108)
 :pattern ( ($generated@@107 $generated@@6 $generated@@109 $generated@@0 $generated@@108))
)))
(assert (forall (($generated@@110 T@U) ($generated@@111 T@U) ) (! ($generated@@107 $generated@@5 $generated@@111 $generated $generated@@110)
 :pattern ( ($generated@@107 $generated@@5 $generated@@111 $generated $generated@@110))
)))
(assert (forall (($generated@@113 T@U) ) (! ($generated@@112 $generated@@6 $generated@@113 $generated@@0)
 :pattern ( ($generated@@112 $generated@@6 $generated@@113 $generated@@0))
)))
(assert (forall (($generated@@114 T@U) ) (! ($generated@@112 $generated@@5 $generated@@114 $generated)
 :pattern ( ($generated@@112 $generated@@5 $generated@@114 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@115 () Int)
(declare-fun $generated@@116 () T@U)
(declare-fun $generated@@117 () T@U)
(declare-fun $generated@@118 () T@U)
(declare-fun $generated@@119 (T@U) Bool)
(declare-fun $generated@@120 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 6) (let (($generated@@121  (=> ($generated@@107 $generated@@6 ($generated@@10 $generated@@115) $generated@@0 $generated@@116) (and (=> (= (ControlFlow 0 3) (- 0 4)) (< $generated@@115 50)) (=> (and (< $generated@@115 50) (= (ControlFlow 0 3) (- 0 2))) (> $generated@@115 4))))))
(let (($generated@@122 true))
(let (($generated@@123  (=> (= $generated@@117 ($generated@@48 $generated@@118 $generated@@116 $generated@@3 false)) (=> (and (< $generated@@115 50) (> $generated@@115 4)) (and (=> (= (ControlFlow 0 5) 1) $generated@@122) (=> (= (ControlFlow 0 5) 3) $generated@@121))))))
(let (($generated@@124  (=> (and (and ($generated@@119 $generated@@116) ($generated@@120 $generated@@116)) (and (= 2 $generated@@21) (= (ControlFlow 0 6) 5))) $generated@@123)))
$generated@@124)))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
