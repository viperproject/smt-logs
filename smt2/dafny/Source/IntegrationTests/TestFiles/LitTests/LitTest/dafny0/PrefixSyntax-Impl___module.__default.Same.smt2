(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 (T@U) T@U)
(declare-fun $generated@@22 () T@U)
(declare-fun $generated@@23 () T@U)
(declare-fun $generated@@24 () T@U)
(declare-fun $generated@@25 (T@T T@U T@U) Bool)
(declare-fun $generated@@26 () T@T)
(declare-fun $generated@@27 () T@U)
(declare-fun $generated@@28 () Int)
(declare-fun $generated@@29 (Int Int T@U) Bool)
(declare-fun $generated@@30 (Int Int T@U) Bool)
(declare-fun $generated@@31 (T@U) Bool)
(declare-fun $generated@@32 (T@U T@U) Bool)
(declare-fun $generated@@33 (Int) Int)
(declare-fun $generated@@37 (Int Int T@U) Bool)
(declare-fun $generated@@38 (Int Int T@U) Bool)
(declare-fun $generated@@45 (T@T T@U) T@U)
(declare-fun $generated@@48 (T@U) Bool)
(declare-fun $generated@@50 (T@U) Bool)
(declare-fun $generated@@52 (T@U) Bool)
(declare-fun $generated@@54 (T@T T@U) T@U)
(declare-fun $generated@@55 (T@T T@U) T@U)
(declare-fun $generated@@76 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@77 () T@T)
(declare-fun $generated@@78 () T@T)
(declare-fun $generated@@79 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@80 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@81 () T@T)
(declare-fun $generated@@82 (T@T T@T) T@T)
(declare-fun $generated@@83 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@84 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@85 (T@T) T@T)
(declare-fun $generated@@86 (T@T) T@T)
(declare-fun $generated@@136 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@137 (T@U) Bool)
(declare-fun $generated@@140 (T@U) T@U)
(declare-fun $generated@@141 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert (= ($generated@@21 $generated@@22) $generated@@1))
(assert (= ($generated@@21 $generated@@23) $generated@@2))
(assert (= ($generated@@21 $generated@@24) $generated@@3))
(assert (= ($generated@@5 $generated@@26) 3))
(assert ($generated@@25 $generated@@26 $generated@@22 $generated@@27))
(assert ($generated@@25 $generated@@26 $generated@@23 $generated@@27))
(assert ($generated@@25 $generated@@26 $generated@@24 $generated@@27))
(assert  (=> (<= 1 $generated@@28) (forall (($generated@@34 Int) ($generated@@35 Int) ($generated@@36 T@U) ) (!  (=> (or ($generated@@30 $generated@@34 $generated@@35 $generated@@36) (and (< 1 $generated@@28) ($generated@@25 $generated@@26 $generated@@36 $generated@@27))) (and (and ($generated@@31 $generated@@36) (=> (=> ($generated@@32 $generated@@36 $generated@@22) (< $generated@@34 $generated@@35)) (and (and ($generated@@31 $generated@@36) (=> (not ($generated@@32 $generated@@36 $generated@@23)) ($generated@@31 $generated@@36))) (=> (=> (or ($generated@@32 $generated@@36 $generated@@23) ($generated@@32 $generated@@36 $generated@@22)) (and (= $generated@@34 ($generated@@33 100)) (= $generated@@35 ($generated@@33 1000)))) ($generated@@31 $generated@@36))))) (= ($generated@@29 $generated@@34 $generated@@35 $generated@@36)  (and (and (=> ($generated@@32 $generated@@36 $generated@@22) (< $generated@@34 $generated@@35)) (=> (or ($generated@@32 $generated@@36 $generated@@23) ($generated@@32 $generated@@36 $generated@@22)) (and (= $generated@@34 ($generated@@33 100)) (= $generated@@35 ($generated@@33 1000))))) (=> ($generated@@32 $generated@@36 $generated@@24) (or (<= ($generated@@33 0) $generated@@34) (<= ($generated@@33 0) $generated@@35)))))))
 :pattern ( ($generated@@29 $generated@@34 $generated@@35 $generated@@36))
))))
(assert  (=> (<= 1 $generated@@28) (forall (($generated@@39 Int) ($generated@@40 Int) ($generated@@41 T@U) ) (!  (=> (or ($generated@@38 $generated@@39 $generated@@40 $generated@@41) (and (< 1 $generated@@28) ($generated@@25 $generated@@26 $generated@@41 $generated@@27))) (and (and ($generated@@31 $generated@@41) (=> (=> ($generated@@32 $generated@@41 $generated@@22) (< $generated@@39 $generated@@40)) (and (and ($generated@@31 $generated@@41) (=> (not ($generated@@32 $generated@@41 $generated@@23)) ($generated@@31 $generated@@41))) (=> (=> (or ($generated@@32 $generated@@41 $generated@@23) ($generated@@32 $generated@@41 $generated@@22)) (and (= $generated@@39 ($generated@@33 100)) (= $generated@@40 ($generated@@33 1000)))) ($generated@@31 $generated@@41))))) (= ($generated@@37 $generated@@39 $generated@@40 $generated@@41)  (and (and (=> ($generated@@32 $generated@@41 $generated@@22) (< $generated@@39 $generated@@40)) (=> (or ($generated@@32 $generated@@41 $generated@@23) ($generated@@32 $generated@@41 $generated@@22)) (and (= $generated@@39 ($generated@@33 100)) (= $generated@@40 ($generated@@33 1000))))) (=> ($generated@@32 $generated@@41 $generated@@24) (or (<= ($generated@@33 0) $generated@@39) (<= ($generated@@33 0) $generated@@40)))))))
 :pattern ( ($generated@@37 $generated@@39 $generated@@40 $generated@@41))
))))
(assert (forall (($generated@@42 T@U) ($generated@@43 T@U) ) (! (= ($generated@@32 $generated@@42 $generated@@43) (= $generated@@42 $generated@@43))
 :pattern ( ($generated@@32 $generated@@42 $generated@@43))
)))
(assert (forall (($generated@@44 Int) ) (! (= ($generated@@33 $generated@@44) $generated@@44)
 :pattern ( ($generated@@33 $generated@@44))
)))
(assert (forall (($generated@@46 T@U) ($generated@@47 T@T) ) (! (= ($generated@@45 $generated@@47 $generated@@46) $generated@@46)
 :pattern ( ($generated@@45 $generated@@47 $generated@@46))
)))
(assert (forall (($generated@@49 T@U) ) (! (= ($generated@@48 $generated@@49) (= ($generated@@21 $generated@@49) $generated@@1))
 :pattern ( ($generated@@48 $generated@@49))
)))
(assert (forall (($generated@@51 T@U) ) (! (= ($generated@@50 $generated@@51) (= ($generated@@21 $generated@@51) $generated@@2))
 :pattern ( ($generated@@50 $generated@@51))
)))
(assert (forall (($generated@@53 T@U) ) (! (= ($generated@@52 $generated@@53) (= ($generated@@21 $generated@@53) $generated@@3))
 :pattern ( ($generated@@52 $generated@@53))
)))
(assert (forall (($generated@@56 T@U) ($generated@@57 T@T) ) (! (= ($generated@@55 $generated@@57 ($generated@@54 $generated@@57 $generated@@56)) $generated@@56)
 :pattern ( ($generated@@54 $generated@@57 $generated@@56))
)))
(assert (forall (($generated@@58 T@U) ) (!  (=> ($generated@@48 $generated@@58) (= $generated@@58 $generated@@22))
 :pattern ( ($generated@@48 $generated@@58))
)))
(assert (forall (($generated@@59 T@U) ) (!  (=> ($generated@@50 $generated@@59) (= $generated@@59 $generated@@23))
 :pattern ( ($generated@@50 $generated@@59))
)))
(assert (forall (($generated@@60 T@U) ) (!  (=> ($generated@@52 $generated@@60) (= $generated@@60 $generated@@24))
 :pattern ( ($generated@@52 $generated@@60))
)))
(assert  (=> (<= 1 $generated@@28) (forall (($generated@@61 Int) ($generated@@62 Int) ($generated@@63 T@U) ) (!  (=> (or ($generated@@30 ($generated@@33 $generated@@61) ($generated@@33 $generated@@62) ($generated@@45 $generated@@26 $generated@@63)) (and (< 1 $generated@@28) ($generated@@25 $generated@@26 $generated@@63 $generated@@27))) (and (and ($generated@@31 ($generated@@45 $generated@@26 $generated@@63)) (=> (=> ($generated@@32 $generated@@63 $generated@@22) (< $generated@@61 $generated@@62)) (and (and ($generated@@31 ($generated@@45 $generated@@26 $generated@@63)) (=> (not ($generated@@32 $generated@@63 $generated@@23)) ($generated@@31 ($generated@@45 $generated@@26 $generated@@63)))) (=> (=> (or ($generated@@32 $generated@@63 $generated@@23) ($generated@@32 $generated@@63 $generated@@22)) (and (= ($generated@@33 $generated@@61) ($generated@@33 100)) (= ($generated@@33 $generated@@62) ($generated@@33 1000)))) ($generated@@31 ($generated@@45 $generated@@26 $generated@@63)))))) (= ($generated@@29 ($generated@@33 $generated@@61) ($generated@@33 $generated@@62) ($generated@@45 $generated@@26 $generated@@63))  (and (and (=> ($generated@@32 $generated@@63 $generated@@22) (< $generated@@61 $generated@@62)) (=> (or ($generated@@32 $generated@@63 $generated@@23) ($generated@@32 $generated@@63 $generated@@22)) (and (= ($generated@@33 $generated@@61) ($generated@@33 100)) (= ($generated@@33 $generated@@62) ($generated@@33 1000))))) (=> ($generated@@32 $generated@@63 $generated@@24) (or (<= ($generated@@33 0) ($generated@@33 $generated@@61)) (<= ($generated@@33 0) ($generated@@33 $generated@@62))))))))
 :weight 3
 :pattern ( ($generated@@29 ($generated@@33 $generated@@61) ($generated@@33 $generated@@62) ($generated@@45 $generated@@26 $generated@@63)))
))))
(assert  (=> (<= 1 $generated@@28) (forall (($generated@@64 Int) ($generated@@65 Int) ($generated@@66 T@U) ) (!  (=> (or ($generated@@38 ($generated@@33 $generated@@64) ($generated@@33 $generated@@65) ($generated@@45 $generated@@26 $generated@@66)) (and (< 1 $generated@@28) ($generated@@25 $generated@@26 $generated@@66 $generated@@27))) (and (and ($generated@@31 ($generated@@45 $generated@@26 $generated@@66)) (=> (=> ($generated@@32 $generated@@66 $generated@@22) (< $generated@@64 $generated@@65)) (and (and ($generated@@31 ($generated@@45 $generated@@26 $generated@@66)) (=> (not ($generated@@32 $generated@@66 $generated@@23)) ($generated@@31 ($generated@@45 $generated@@26 $generated@@66)))) (=> (=> (or ($generated@@32 $generated@@66 $generated@@23) ($generated@@32 $generated@@66 $generated@@22)) (and (= ($generated@@33 $generated@@64) ($generated@@33 100)) (= ($generated@@33 $generated@@65) ($generated@@33 1000)))) ($generated@@31 ($generated@@45 $generated@@26 $generated@@66)))))) (= ($generated@@37 ($generated@@33 $generated@@64) ($generated@@33 $generated@@65) ($generated@@45 $generated@@26 $generated@@66))  (and (and (=> ($generated@@32 $generated@@66 $generated@@22) (< $generated@@64 $generated@@65)) (=> (or ($generated@@32 $generated@@66 $generated@@23) ($generated@@32 $generated@@66 $generated@@22)) (and (= ($generated@@33 $generated@@64) ($generated@@33 100)) (= ($generated@@33 $generated@@65) ($generated@@33 1000))))) (=> ($generated@@32 $generated@@66 $generated@@24) (or (<= ($generated@@33 0) ($generated@@33 $generated@@64)) (<= ($generated@@33 0) ($generated@@33 $generated@@65))))))))
 :weight 3
 :pattern ( ($generated@@37 ($generated@@33 $generated@@64) ($generated@@33 $generated@@65) ($generated@@45 $generated@@26 $generated@@66)))
))))
(assert (forall (($generated@@67 T@U) ($generated@@68 T@U) ) (!  (=> (and ($generated@@48 $generated@@67) ($generated@@48 $generated@@68)) ($generated@@32 $generated@@67 $generated@@68))
 :pattern ( ($generated@@32 $generated@@67 $generated@@68) ($generated@@48 $generated@@67))
 :pattern ( ($generated@@32 $generated@@67 $generated@@68) ($generated@@48 $generated@@68))
)))
(assert (forall (($generated@@69 T@U) ($generated@@70 T@U) ) (!  (=> (and ($generated@@50 $generated@@69) ($generated@@50 $generated@@70)) ($generated@@32 $generated@@69 $generated@@70))
 :pattern ( ($generated@@32 $generated@@69 $generated@@70) ($generated@@50 $generated@@69))
 :pattern ( ($generated@@32 $generated@@69 $generated@@70) ($generated@@50 $generated@@70))
)))
(assert (forall (($generated@@71 T@U) ($generated@@72 T@U) ) (!  (=> (and ($generated@@52 $generated@@71) ($generated@@52 $generated@@72)) ($generated@@32 $generated@@71 $generated@@72))
 :pattern ( ($generated@@32 $generated@@71 $generated@@72) ($generated@@52 $generated@@71))
 :pattern ( ($generated@@32 $generated@@71 $generated@@72) ($generated@@52 $generated@@72))
)))
(assert (forall (($generated@@73 T@U) ($generated@@74 T@T) ) (! (= ($generated@@54 $generated@@74 ($generated@@55 $generated@@74 $generated@@73)) $generated@@73)
 :pattern ( ($generated@@55 $generated@@74 $generated@@73))
)))
(assert (forall (($generated@@75 T@U) ) (!  (=> ($generated@@31 $generated@@75) (or (or ($generated@@48 $generated@@75) ($generated@@50 $generated@@75)) ($generated@@52 $generated@@75)))
 :pattern ( ($generated@@31 $generated@@75))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@87 T@T) ($generated@@88 T@T) ($generated@@89 T@T) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ) (! (= ($generated@@76 $generated@@87 $generated@@88 $generated@@89 ($generated@@83 $generated@@87 $generated@@88 $generated@@89 $generated@@91 $generated@@92 $generated@@93 $generated@@90) $generated@@92 $generated@@93) $generated@@90)
 :weight 0
)) (and (forall (($generated@@94 T@T) ($generated@@95 T@T) ($generated@@96 T@T) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@99 $generated@@101) (= ($generated@@76 $generated@@94 $generated@@95 $generated@@96 ($generated@@83 $generated@@94 $generated@@95 $generated@@96 $generated@@98 $generated@@99 $generated@@100 $generated@@97) $generated@@101 $generated@@102) ($generated@@76 $generated@@94 $generated@@95 $generated@@96 $generated@@98 $generated@@101 $generated@@102)))
 :weight 0
)) (forall (($generated@@103 T@T) ($generated@@104 T@T) ($generated@@105 T@T) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (!  (or (= $generated@@109 $generated@@111) (= ($generated@@76 $generated@@103 $generated@@104 $generated@@105 ($generated@@83 $generated@@103 $generated@@104 $generated@@105 $generated@@107 $generated@@108 $generated@@109 $generated@@106) $generated@@110 $generated@@111) ($generated@@76 $generated@@103 $generated@@104 $generated@@105 $generated@@107 $generated@@110 $generated@@111)))
 :weight 0
)))) (= ($generated@@5 $generated@@77) 4)) (= ($generated@@5 $generated@@78) 5)) (forall (($generated@@112 T@T) ($generated@@113 T@T) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ) (! (= ($generated@@80 $generated@@112 $generated@@113 ($generated@@84 $generated@@112 $generated@@113 $generated@@115 $generated@@116 $generated@@114) $generated@@116) $generated@@114)
 :weight 0
))) (forall (($generated@@117 T@T) ($generated@@118 T@T) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ) (!  (or (= $generated@@121 $generated@@122) (= ($generated@@80 $generated@@117 $generated@@118 ($generated@@84 $generated@@117 $generated@@118 $generated@@120 $generated@@121 $generated@@119) $generated@@122) ($generated@@80 $generated@@117 $generated@@118 $generated@@120 $generated@@122)))
 :weight 0
))) (= ($generated@@5 $generated@@81) 6)) (forall (($generated@@123 T@T) ($generated@@124 T@T) ) (= ($generated@@5 ($generated@@82 $generated@@123 $generated@@124)) 7))) (forall (($generated@@125 T@T) ($generated@@126 T@T) ) (! (= ($generated@@85 ($generated@@82 $generated@@125 $generated@@126)) $generated@@125)
 :pattern ( ($generated@@82 $generated@@125 $generated@@126))
))) (forall (($generated@@127 T@T) ($generated@@128 T@T) ) (! (= ($generated@@86 ($generated@@82 $generated@@127 $generated@@128)) $generated@@128)
 :pattern ( ($generated@@82 $generated@@127 $generated@@128))
))))
(assert (forall (($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 Bool) ($generated@@133 T@U) ($generated@@134 T@U) ) (! (= ($generated@@10 ($generated@@76 $generated@@77 $generated@@78 $generated@@6 ($generated@@79 $generated@@129 $generated@@130 $generated@@131 $generated@@132) $generated@@133 $generated@@134))  (=> (and (or (not (= $generated@@133 $generated@@129)) (not true)) ($generated@@10 ($generated@@54 $generated@@6 ($generated@@80 $generated@@78 $generated@@81 ($generated@@80 $generated@@77 ($generated@@82 $generated@@78 $generated@@81) $generated@@130 $generated@@133) $generated@@131)))) $generated@@132))
 :pattern ( ($generated@@76 $generated@@77 $generated@@78 $generated@@6 ($generated@@79 $generated@@129 $generated@@130 $generated@@131 $generated@@132) $generated@@133 $generated@@134))
)))
(assert (forall (($generated@@135 T@U) ) (!  (=> ($generated@@25 $generated@@26 $generated@@135 $generated@@27) (or (or ($generated@@48 $generated@@135) ($generated@@50 $generated@@135)) ($generated@@52 $generated@@135)))
 :pattern ( ($generated@@52 $generated@@135) ($generated@@25 $generated@@26 $generated@@135 $generated@@27))
 :pattern ( ($generated@@50 $generated@@135) ($generated@@25 $generated@@26 $generated@@135 $generated@@27))
 :pattern ( ($generated@@48 $generated@@135) ($generated@@25 $generated@@26 $generated@@135 $generated@@27))
)))
(assert (forall (($generated@@138 T@U) ($generated@@139 T@U) ) (!  (=> (and ($generated@@137 $generated@@139) ($generated@@25 $generated@@26 $generated@@138 $generated@@27)) ($generated@@136 $generated@@26 $generated@@138 $generated@@27 $generated@@139))
 :pattern ( ($generated@@136 $generated@@26 $generated@@138 $generated@@27 $generated@@139))
)))
(assert (= ($generated@@140 $generated@@27) $generated@@0))
(assert (= ($generated@@141 $generated@@27) $generated@@4))
(assert (= $generated@@22 ($generated@@45 $generated@@26 $generated@@22)))
(assert (= $generated@@23 ($generated@@45 $generated@@26 $generated@@23)))
(assert (= $generated@@24 ($generated@@45 $generated@@26 $generated@@24)))
(assert (forall (($generated@@142 Int) ) (! (= ($generated@@55 $generated@@7 ($generated@@11 ($generated@@33 $generated@@142))) ($generated@@45 $generated@@81 ($generated@@55 $generated@@7 ($generated@@11 $generated@@142))))
 :pattern ( ($generated@@55 $generated@@7 ($generated@@11 ($generated@@33 $generated@@142))))
)))
(assert (forall (($generated@@143 T@U) ($generated@@144 T@T) ) (! (= ($generated@@55 $generated@@144 ($generated@@45 $generated@@144 $generated@@143)) ($generated@@45 $generated@@81 ($generated@@55 $generated@@144 $generated@@143)))
 :pattern ( ($generated@@55 $generated@@144 ($generated@@45 $generated@@144 $generated@@143)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@145 () T@U)
(declare-fun $generated@@146 () T@U)
(declare-fun $generated@@147 () T@U)
(declare-fun $generated@@148 () Int)
(declare-fun $generated@@149 () Int)
(declare-fun $generated@@150 () T@U)
(declare-fun $generated@@151 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@152  (=> (and (= $generated@@145 ($generated@@79 $generated@@146 $generated@@147 $generated false)) (= (ControlFlow 0 2) (- 0 1))) (= ($generated@@29 $generated@@148 $generated@@149 $generated@@150) ($generated@@37 $generated@@148 $generated@@149 $generated@@150)))))
(let (($generated@@153  (=> (and ($generated@@137 $generated@@147) ($generated@@151 $generated@@147)) (=> (and (and (and ($generated@@25 $generated@@26 $generated@@150 $generated@@27) ($generated@@136 $generated@@26 $generated@@150 $generated@@27 $generated@@147)) ($generated@@31 $generated@@150)) (and (= 2 $generated@@28) (= (ControlFlow 0 3) 2))) $generated@@152))))
$generated@@153)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
