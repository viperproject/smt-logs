(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 (T@T) Int)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 (Bool) T@U)
(declare-fun $generated@@11 (T@U) Bool)
(declare-fun $generated@@12 (Int) T@U)
(declare-fun $generated@@13 (T@U) Int)
(declare-fun $generated@@14 (Real) T@U)
(declare-fun $generated@@15 (T@U) Real)
(declare-fun $generated@@22 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@23 () T@U)
(declare-fun $generated@@26 (T@U) T@U)
(declare-fun $generated@@27 () T@U)
(declare-fun $generated@@28 (T@T T@U T@U) Bool)
(declare-fun $generated@@29 () T@T)
(declare-fun $generated@@30 () T@U)
(declare-fun $generated@@31 (T@U T@U) Bool)
(declare-fun $generated@@32 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@33 () T@T)
(declare-fun $generated@@34 () T@T)
(declare-fun $generated@@35 () T@T)
(declare-fun $generated@@36 (T@T T@T) T@T)
(declare-fun $generated@@37 (T@T T@U) T@U)
(declare-fun $generated@@38 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@39 (T@T) T@T)
(declare-fun $generated@@40 (T@T) T@T)
(declare-fun $generated@@61 (Int) Int)
(declare-fun $generated@@63 (T@T T@U) T@U)
(declare-fun $generated@@66 (T@U) Bool)
(declare-fun $generated@@68 (T@U) Bool)
(declare-fun $generated@@70 (T@T T@U) T@U)
(declare-fun $generated@@74 (T@U) T@U)
(declare-fun $generated@@78 (T@U) Bool)
(declare-fun $generated@@84 (T@U T@U) Bool)
(declare-fun $generated@@89 () Int)
(declare-fun $generated@@90 (T@U Int T@U Int) Bool)
(declare-fun $generated@@91 (T@U) T@U)
(declare-fun $generated@@92 (Int T@U Int) Bool)
(declare-fun $generated@@93 (T@U) T@U)
(declare-fun $generated@@127 (T@U) Int)
(declare-fun $generated@@129 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@130 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@131 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@163 (T@U) Bool)
(declare-fun $generated@@166 (T@U) T@U)
(declare-fun $generated@@167 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@6 $generated@@7) 0) (= ($generated@@6 $generated@@8) 1)) (= ($generated@@6 $generated@@9) 2)) (forall (($generated@@16 Bool) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Int) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Real) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5)
)
(assert (forall (($generated@@24 T@U) ($generated@@25 T@U) ) (! ($generated@@22 $generated@@8 $generated@@24 $generated@@23 $generated@@25)
 :pattern ( ($generated@@22 $generated@@8 $generated@@24 $generated@@23 $generated@@25))
)))
(assert (= ($generated@@26 $generated@@27) $generated@@2))
(assert (= ($generated@@6 $generated@@29) 3))
(assert ($generated@@28 $generated@@29 $generated@@27 $generated@@30))
(assert  (and (and (and (and (and (and (and (forall (($generated@@41 T@T) ($generated@@42 T@T) ($generated@@43 T@U) ($generated@@44 T@U) ($generated@@45 T@U) ) (! (= ($generated@@32 $generated@@41 $generated@@42 ($generated@@38 $generated@@41 $generated@@42 $generated@@44 $generated@@45 $generated@@43) $generated@@45) $generated@@43)
 :weight 0
)) (forall (($generated@@46 T@T) ($generated@@47 T@T) ($generated@@48 T@U) ($generated@@49 T@U) ($generated@@50 T@U) ($generated@@51 T@U) ) (!  (or (= $generated@@50 $generated@@51) (= ($generated@@32 $generated@@46 $generated@@47 ($generated@@38 $generated@@46 $generated@@47 $generated@@49 $generated@@50 $generated@@48) $generated@@51) ($generated@@32 $generated@@46 $generated@@47 $generated@@49 $generated@@51)))
 :weight 0
))) (= ($generated@@6 $generated@@33) 4)) (= ($generated@@6 $generated@@34) 5)) (= ($generated@@6 $generated@@35) 6)) (forall (($generated@@52 T@T) ($generated@@53 T@T) ) (= ($generated@@6 ($generated@@36 $generated@@52 $generated@@53)) 7))) (forall (($generated@@54 T@T) ($generated@@55 T@T) ) (! (= ($generated@@39 ($generated@@36 $generated@@54 $generated@@55)) $generated@@54)
 :pattern ( ($generated@@36 $generated@@54 $generated@@55))
))) (forall (($generated@@56 T@T) ($generated@@57 T@T) ) (! (= ($generated@@40 ($generated@@36 $generated@@56 $generated@@57)) $generated@@57)
 :pattern ( ($generated@@36 $generated@@56 $generated@@57))
))))
(assert (forall (($generated@@58 T@U) ($generated@@59 T@U) ) (!  (=> ($generated@@31 $generated@@58 $generated@@59) (forall (($generated@@60 T@U) ) (!  (=> ($generated@@11 ($generated@@37 $generated@@7 ($generated@@32 $generated@@33 $generated@@34 ($generated@@32 $generated@@35 ($generated@@36 $generated@@33 $generated@@34) $generated@@58 $generated@@60) $generated))) ($generated@@11 ($generated@@37 $generated@@7 ($generated@@32 $generated@@33 $generated@@34 ($generated@@32 $generated@@35 ($generated@@36 $generated@@33 $generated@@34) $generated@@59 $generated@@60) $generated))))
 :pattern ( ($generated@@32 $generated@@33 $generated@@34 ($generated@@32 $generated@@35 ($generated@@36 $generated@@33 $generated@@34) $generated@@59 $generated@@60) $generated))
)))
 :pattern ( ($generated@@31 $generated@@58 $generated@@59))
)))
(assert (forall (($generated@@62 Int) ) (! (= ($generated@@61 $generated@@62) $generated@@62)
 :pattern ( ($generated@@61 $generated@@62))
)))
(assert (forall (($generated@@64 T@U) ($generated@@65 T@T) ) (! (= ($generated@@63 $generated@@65 $generated@@64) $generated@@64)
 :pattern ( ($generated@@63 $generated@@65 $generated@@64))
)))
(assert (forall (($generated@@67 T@U) ) (! (= ($generated@@66 $generated@@67) (= ($generated@@26 $generated@@67) $generated@@2))
 :pattern ( ($generated@@66 $generated@@67))
)))
(assert (forall (($generated@@69 T@U) ) (! (= ($generated@@68 $generated@@69) (= ($generated@@26 $generated@@69) $generated@@3))
 :pattern ( ($generated@@68 $generated@@69))
)))
(assert (forall (($generated@@71 T@U) ($generated@@72 T@T) ) (! (= ($generated@@70 $generated@@72 ($generated@@37 $generated@@72 $generated@@71)) $generated@@71)
 :pattern ( ($generated@@37 $generated@@72 $generated@@71))
)))
(assert (forall (($generated@@73 T@U) ) (!  (=> ($generated@@66 $generated@@73) (= $generated@@73 $generated@@27))
 :pattern ( ($generated@@66 $generated@@73))
)))
(assert (forall (($generated@@75 T@U) ) (!  (=> ($generated@@68 $generated@@75) (exists (($generated@@76 T@U) ) (= $generated@@75 ($generated@@74 $generated@@76))))
 :pattern ( ($generated@@68 $generated@@75))
)))
(assert (forall (($generated@@77 T@U) ) (! (= ($generated@@28 $generated@@8 $generated@@77 $generated@@23) (<= ($generated@@61 0) ($generated@@13 $generated@@77)))
 :pattern ( ($generated@@28 $generated@@8 $generated@@77 $generated@@23))
)))
(assert ($generated@@78 $generated))
(assert (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@T) ) (!  (=> ($generated@@31 $generated@@79 $generated@@80) (=> ($generated@@22 $generated@@83 $generated@@81 $generated@@82 $generated@@79) ($generated@@22 $generated@@83 $generated@@81 $generated@@82 $generated@@80)))
 :pattern ( ($generated@@31 $generated@@79 $generated@@80) ($generated@@22 $generated@@83 $generated@@81 $generated@@82 $generated@@79))
)))
(assert (forall (($generated@@85 T@U) ($generated@@86 T@U) ) (!  (=> ($generated@@84 $generated@@85 $generated@@86) (and ($generated@@31 $generated@@85 $generated@@86) (forall (($generated@@87 T@U) ($generated@@88 T@U) ) (!  (=> (not ($generated@@78 $generated@@88)) (= ($generated@@32 $generated@@33 $generated@@34 ($generated@@32 $generated@@35 ($generated@@36 $generated@@33 $generated@@34) $generated@@85 $generated@@87) $generated@@88) ($generated@@32 $generated@@33 $generated@@34 ($generated@@32 $generated@@35 ($generated@@36 $generated@@33 $generated@@34) $generated@@86 $generated@@87) $generated@@88)))
 :pattern ( ($generated@@32 $generated@@33 $generated@@34 ($generated@@32 $generated@@35 ($generated@@36 $generated@@33 $generated@@34) $generated@@86 $generated@@87) $generated@@88))
))))
 :pattern ( ($generated@@84 $generated@@85 $generated@@86))
)))
(assert  (=> (<= 1 $generated@@89) (forall (($generated@@94 T@U) ($generated@@95 Int) ($generated@@96 T@U) ($generated@@97 Int) ) (!  (=> (or ($generated@@92 $generated@@95 $generated@@96 $generated@@97) (and (< 1 $generated@@89) (and (and (<= ($generated@@61 0) $generated@@95) ($generated@@28 $generated@@29 $generated@@96 $generated@@30)) (<= ($generated@@61 0) $generated@@97)))) (and (=> (not ($generated@@66 $generated@@96)) (let (($generated@@98 ($generated@@93 $generated@@96)))
 (=> (> $generated@@95 0) (forall (($generated@@99 Int) ($generated@@100 Int) ) (!  (=> (and (<= ($generated@@61 0) $generated@@99) (<= ($generated@@61 0) $generated@@100)) (=> (= $generated@@100 (- $generated@@95 1)) ($generated@@92 $generated@@100 $generated@@98 $generated@@99)))
 :pattern ( ($generated@@90 $generated@@94 $generated@@100 $generated@@98 $generated@@99))
))))) (= ($generated@@90 ($generated@@91 $generated@@94) $generated@@95 $generated@@96 $generated@@97) (ite ($generated@@66 $generated@@96) true (let (($generated@@101 ($generated@@93 $generated@@96)))
 (and (> $generated@@95 0) (exists (($generated@@102 Int) ($generated@@103 Int) ) (!  (and (and (<= ($generated@@61 0) $generated@@102) (<= ($generated@@61 0) $generated@@103)) (and (= $generated@@103 (- $generated@@95 1)) ($generated@@90 $generated@@94 $generated@@103 $generated@@101 $generated@@102)))
 :pattern ( ($generated@@90 $generated@@94 $generated@@103 $generated@@101 $generated@@102))
))))))))
 :pattern ( ($generated@@90 ($generated@@91 $generated@@94) $generated@@95 $generated@@96 $generated@@97))
))))
(assert (forall (($generated@@104 T@U) ) (! (= ($generated@@28 $generated@@29 ($generated@@74 $generated@@104) $generated@@30) ($generated@@28 $generated@@29 $generated@@104 $generated@@30))
 :pattern ( ($generated@@28 $generated@@29 ($generated@@74 $generated@@104) $generated@@30))
)))
(assert  (=> (<= 1 $generated@@89) (forall (($generated@@105 T@U) ($generated@@106 Int) ($generated@@107 T@U) ($generated@@108 Int) ) (!  (=> (or ($generated@@92 ($generated@@61 $generated@@106) ($generated@@63 $generated@@29 $generated@@107) ($generated@@61 $generated@@108)) (and (< 1 $generated@@89) (and (and (<= ($generated@@61 0) $generated@@106) ($generated@@28 $generated@@29 $generated@@107 $generated@@30)) (<= ($generated@@61 0) $generated@@108)))) (and (=> (not ($generated@@11 ($generated@@63 $generated@@7 ($generated@@10 ($generated@@66 ($generated@@63 $generated@@29 $generated@@107)))))) (let (($generated@@109 ($generated@@63 $generated@@29 ($generated@@93 ($generated@@63 $generated@@29 $generated@@107)))))
 (=> ($generated@@11 ($generated@@63 $generated@@7 ($generated@@10 (> $generated@@106 0)))) (forall (($generated@@110 Int) ($generated@@111 Int) ) (!  (=> (and (<= ($generated@@61 0) $generated@@110) (<= ($generated@@61 0) $generated@@111)) (=> (= $generated@@111 ($generated@@61 (- $generated@@106 1))) ($generated@@92 $generated@@111 $generated@@109 $generated@@110)))
 :pattern ( ($generated@@90 ($generated@@91 $generated@@105) $generated@@111 $generated@@109 $generated@@110))
))))) (= ($generated@@90 ($generated@@91 $generated@@105) ($generated@@61 $generated@@106) ($generated@@63 $generated@@29 $generated@@107) ($generated@@61 $generated@@108)) (ite ($generated@@66 ($generated@@63 $generated@@29 $generated@@107)) true (let (($generated@@112 ($generated@@63 $generated@@29 ($generated@@93 ($generated@@63 $generated@@29 $generated@@107)))))
 (and (> $generated@@106 0) (exists (($generated@@113 Int) ($generated@@114 Int) ) (!  (and (and (<= ($generated@@61 0) $generated@@113) (<= ($generated@@61 0) $generated@@114)) (and (= $generated@@114 ($generated@@61 (- $generated@@106 1))) ($generated@@90 ($generated@@91 $generated@@105) $generated@@114 $generated@@112 $generated@@113)))
 :pattern ( ($generated@@90 ($generated@@91 $generated@@105) $generated@@114 $generated@@112 $generated@@113))
))))))))
 :weight 3
 :pattern ( ($generated@@90 ($generated@@91 $generated@@105) ($generated@@61 $generated@@106) ($generated@@63 $generated@@29 $generated@@107) ($generated@@61 $generated@@108)))
))))
(assert (forall (($generated@@115 T@U) ) (!  (=> ($generated@@28 $generated@@29 $generated@@115 $generated@@30) (or ($generated@@66 $generated@@115) ($generated@@68 $generated@@115)))
 :pattern ( ($generated@@68 $generated@@115) ($generated@@28 $generated@@29 $generated@@115 $generated@@30))
 :pattern ( ($generated@@66 $generated@@115) ($generated@@28 $generated@@29 $generated@@115 $generated@@30))
)))
(assert (forall (($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ) (!  (=> (or (not (= $generated@@116 $generated@@118)) (not true)) (=> (and ($generated@@31 $generated@@116 $generated@@117) ($generated@@31 $generated@@117 $generated@@118)) ($generated@@31 $generated@@116 $generated@@118)))
 :pattern ( ($generated@@31 $generated@@116 $generated@@117) ($generated@@31 $generated@@117 $generated@@118))
)))
(assert (forall (($generated@@119 T@U) ($generated@@120 Int) ($generated@@121 T@U) ($generated@@122 Int) ) (! (= ($generated@@90 ($generated@@91 $generated@@119) $generated@@120 $generated@@121 $generated@@122) ($generated@@90 $generated@@119 $generated@@120 $generated@@121 $generated@@122))
 :pattern ( ($generated@@90 ($generated@@91 $generated@@119) $generated@@120 $generated@@121 $generated@@122))
)))
(assert (forall (($generated@@123 T@U) ) (! (= ($generated@@26 ($generated@@74 $generated@@123)) $generated@@3)
 :pattern ( ($generated@@74 $generated@@123))
)))
(assert (forall (($generated@@124 T@U) ) (! (= ($generated@@93 ($generated@@74 $generated@@124)) $generated@@124)
 :pattern ( ($generated@@74 $generated@@124))
)))
(assert (forall (($generated@@125 T@U) ($generated@@126 T@T) ) (! (= ($generated@@37 $generated@@126 ($generated@@70 $generated@@126 $generated@@125)) $generated@@125)
 :pattern ( ($generated@@70 $generated@@126 $generated@@125))
)))
(assert (forall (($generated@@128 T@U) ) (! (< ($generated@@127 $generated@@128) ($generated@@127 ($generated@@74 $generated@@128)))
 :pattern ( ($generated@@74 $generated@@128))
)))
(assert  (and (forall (($generated@@132 T@T) ($generated@@133 T@T) ($generated@@134 T@T) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ) (! (= ($generated@@129 $generated@@132 $generated@@133 $generated@@134 ($generated@@131 $generated@@132 $generated@@133 $generated@@134 $generated@@136 $generated@@137 $generated@@138 $generated@@135) $generated@@137 $generated@@138) $generated@@135)
 :weight 0
)) (and (forall (($generated@@139 T@T) ($generated@@140 T@T) ($generated@@141 T@T) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 T@U) ) (!  (or (= $generated@@144 $generated@@146) (= ($generated@@129 $generated@@139 $generated@@140 $generated@@141 ($generated@@131 $generated@@139 $generated@@140 $generated@@141 $generated@@143 $generated@@144 $generated@@145 $generated@@142) $generated@@146 $generated@@147) ($generated@@129 $generated@@139 $generated@@140 $generated@@141 $generated@@143 $generated@@146 $generated@@147)))
 :weight 0
)) (forall (($generated@@148 T@T) ($generated@@149 T@T) ($generated@@150 T@T) ($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 T@U) ($generated@@154 T@U) ($generated@@155 T@U) ($generated@@156 T@U) ) (!  (or (= $generated@@154 $generated@@156) (= ($generated@@129 $generated@@148 $generated@@149 $generated@@150 ($generated@@131 $generated@@148 $generated@@149 $generated@@150 $generated@@152 $generated@@153 $generated@@154 $generated@@151) $generated@@155 $generated@@156) ($generated@@129 $generated@@148 $generated@@149 $generated@@150 $generated@@152 $generated@@155 $generated@@156)))
 :weight 0
)))))
(assert (forall (($generated@@157 T@U) ($generated@@158 T@U) ($generated@@159 T@U) ($generated@@160 Bool) ($generated@@161 T@U) ($generated@@162 T@U) ) (! (= ($generated@@11 ($generated@@129 $generated@@35 $generated@@33 $generated@@7 ($generated@@130 $generated@@157 $generated@@158 $generated@@159 $generated@@160) $generated@@161 $generated@@162))  (=> (and (or (not (= $generated@@161 $generated@@157)) (not true)) ($generated@@11 ($generated@@37 $generated@@7 ($generated@@32 $generated@@33 $generated@@34 ($generated@@32 $generated@@35 ($generated@@36 $generated@@33 $generated@@34) $generated@@158 $generated@@161) $generated@@159)))) $generated@@160))
 :pattern ( ($generated@@129 $generated@@35 $generated@@33 $generated@@7 ($generated@@130 $generated@@157 $generated@@158 $generated@@159 $generated@@160) $generated@@161 $generated@@162))
)))
(assert (forall (($generated@@164 T@U) ($generated@@165 T@U) ) (!  (=> (and ($generated@@163 $generated@@165) ($generated@@28 $generated@@29 $generated@@164 $generated@@30)) ($generated@@22 $generated@@29 $generated@@164 $generated@@30 $generated@@165))
 :pattern ( ($generated@@22 $generated@@29 $generated@@164 $generated@@30 $generated@@165))
)))
(assert (= ($generated@@166 $generated@@23) $generated@@0))
(assert (= ($generated@@167 $generated@@23) $generated@@4))
(assert (= ($generated@@166 $generated@@30) $generated@@1))
(assert (= ($generated@@167 $generated@@30) $generated@@5))
(assert (= $generated@@27 ($generated@@63 $generated@@29 $generated@@27)))
(assert (forall (($generated@@168 T@U) ($generated@@169 T@U) ) (!  (=> (and ($generated@@163 $generated@@169) (and ($generated@@68 $generated@@168) ($generated@@22 $generated@@29 $generated@@168 $generated@@30 $generated@@169))) ($generated@@22 $generated@@29 ($generated@@93 $generated@@168) $generated@@30 $generated@@169))
 :pattern ( ($generated@@22 $generated@@29 ($generated@@93 $generated@@168) $generated@@30 $generated@@169))
)))
(assert (forall (($generated@@170 Int) ) (! (= ($generated@@70 $generated@@8 ($generated@@12 ($generated@@61 $generated@@170))) ($generated@@63 $generated@@34 ($generated@@70 $generated@@8 ($generated@@12 $generated@@170))))
 :pattern ( ($generated@@70 $generated@@8 ($generated@@12 ($generated@@61 $generated@@170))))
)))
(assert (forall (($generated@@171 T@U) ) (! (= ($generated@@74 ($generated@@63 $generated@@29 $generated@@171)) ($generated@@63 $generated@@29 ($generated@@74 $generated@@171)))
 :pattern ( ($generated@@74 ($generated@@63 $generated@@29 $generated@@171)))
)))
(assert (forall (($generated@@172 T@U) ($generated@@173 T@T) ) (! (= ($generated@@70 $generated@@173 ($generated@@63 $generated@@173 $generated@@172)) ($generated@@63 $generated@@34 ($generated@@70 $generated@@173 $generated@@172)))
 :pattern ( ($generated@@70 $generated@@173 ($generated@@63 $generated@@173 $generated@@172)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@174 () T@U)
(declare-fun $generated@@175 () T@U)
(declare-fun $generated@@176 () T@U)
(declare-fun $generated@@177 () T@U)
(declare-fun $generated@@178 (T@U) Bool)
(declare-fun $generated@@179 () Int)
(declare-fun $generated@@180 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 4) (let (($generated@@181  (=> (= $generated@@174 ($generated@@130 $generated@@175 $generated@@176 $generated false)) (=> (and (and ($generated@@163 $generated@@177) ($generated@@178 $generated@@177)) (and (forall (($generated@@182 T@U) ) (!  (=> (and (or (not (= $generated@@182 $generated@@175)) (not true)) ($generated@@11 ($generated@@37 $generated@@7 ($generated@@32 $generated@@33 $generated@@34 ($generated@@32 $generated@@35 ($generated@@36 $generated@@33 $generated@@34) $generated@@176 $generated@@182) $generated)))) (= ($generated@@32 $generated@@35 ($generated@@36 $generated@@33 $generated@@34) $generated@@177 $generated@@182) ($generated@@32 $generated@@35 ($generated@@36 $generated@@33 $generated@@34) $generated@@176 $generated@@182)))
 :pattern ( ($generated@@32 $generated@@35 ($generated@@36 $generated@@33 $generated@@34) $generated@@177 $generated@@182))
)) ($generated@@84 $generated@@176 $generated@@177))) (and (=> (= (ControlFlow 0 2) (- 0 3)) ($generated@@28 $generated@@8 ($generated@@12 ($generated@@61 10)) $generated@@23)) (=> ($generated@@28 $generated@@8 ($generated@@12 ($generated@@61 10)) $generated@@23) (=> (= $generated@@179 ($generated@@61 10)) (=> (and (and ($generated@@22 $generated@@8 ($generated@@12 $generated@@179) $generated@@23 $generated@@177) (= $generated@@180 ($generated@@63 $generated@@29 ($generated@@74 ($generated@@63 $generated@@29 $generated@@27))))) (and ($generated@@22 $generated@@29 $generated@@180 $generated@@30 $generated@@177) (= (ControlFlow 0 2) (- 0 1)))) ($generated@@28 $generated@@8 ($generated@@12 ($generated@@61 0)) $generated@@23)))))))))
(let (($generated@@183  (=> (and (and ($generated@@163 $generated@@176) ($generated@@178 $generated@@176)) (and (= 2 $generated@@89) (= (ControlFlow 0 4) 2))) $generated@@181)))
$generated@@183)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
