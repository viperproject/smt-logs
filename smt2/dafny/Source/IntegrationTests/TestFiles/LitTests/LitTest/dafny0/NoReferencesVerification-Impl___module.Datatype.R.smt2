(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (Bool) T@U)
(declare-fun $generated@@7 (T@U) Bool)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun $generated@@9 (T@U) Int)
(declare-fun $generated@@10 (Real) T@U)
(declare-fun $generated@@11 (T@U) Real)
(declare-fun $generated@@18 (T@U T@U) Bool)
(declare-fun $generated@@19 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@20 () T@T)
(declare-fun $generated@@21 () T@T)
(declare-fun $generated@@22 () T@T)
(declare-fun $generated@@23 (T@T T@T) T@T)
(declare-fun $generated@@24 (T@T T@U) T@U)
(declare-fun $generated@@25 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@26 (T@T) T@T)
(declare-fun $generated@@27 (T@T) T@T)
(declare-fun $generated@@48 (T@T T@U) T@U)
(declare-fun $generated@@51 (T@U T@U T@U) Bool)
(declare-fun $generated@@52 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@69 (T@U T@U) Bool)
(declare-fun $generated@@70 (T@T T@U T@U) Bool)
(declare-fun $generated@@74 (T@U) Bool)
(declare-fun $generated@@78 (T@U T@U) T@U)
(declare-fun $generated@@79 (T@U) T@U)
(declare-fun $generated@@82 (T@U) T@U)
(declare-fun $generated@@87 () T@T)
(declare-fun $generated@@91 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@92 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@93 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@125 (T@U) T@U)
(declare-fun $generated@@126 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@4) 1)) (= ($generated@@2 $generated@@5) 2)) (forall (($generated@@12 Bool) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Int) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Real) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))))
(assert (distinct $generated $generated@@0 $generated@@1)
)
(assert  (and (and (and (and (and (and (and (forall (($generated@@28 T@T) ($generated@@29 T@T) ($generated@@30 T@U) ($generated@@31 T@U) ($generated@@32 T@U) ) (! (= ($generated@@19 $generated@@28 $generated@@29 ($generated@@25 $generated@@28 $generated@@29 $generated@@31 $generated@@32 $generated@@30) $generated@@32) $generated@@30)
 :weight 0
)) (forall (($generated@@33 T@T) ($generated@@34 T@T) ($generated@@35 T@U) ($generated@@36 T@U) ($generated@@37 T@U) ($generated@@38 T@U) ) (!  (or (= $generated@@37 $generated@@38) (= ($generated@@19 $generated@@33 $generated@@34 ($generated@@25 $generated@@33 $generated@@34 $generated@@36 $generated@@37 $generated@@35) $generated@@38) ($generated@@19 $generated@@33 $generated@@34 $generated@@36 $generated@@38)))
 :weight 0
))) (= ($generated@@2 $generated@@20) 3)) (= ($generated@@2 $generated@@21) 4)) (= ($generated@@2 $generated@@22) 5)) (forall (($generated@@39 T@T) ($generated@@40 T@T) ) (= ($generated@@2 ($generated@@23 $generated@@39 $generated@@40)) 6))) (forall (($generated@@41 T@T) ($generated@@42 T@T) ) (! (= ($generated@@26 ($generated@@23 $generated@@41 $generated@@42)) $generated@@41)
 :pattern ( ($generated@@23 $generated@@41 $generated@@42))
))) (forall (($generated@@43 T@T) ($generated@@44 T@T) ) (! (= ($generated@@27 ($generated@@23 $generated@@43 $generated@@44)) $generated@@44)
 :pattern ( ($generated@@23 $generated@@43 $generated@@44))
))))
(assert (forall (($generated@@45 T@U) ($generated@@46 T@U) ) (!  (=> ($generated@@18 $generated@@45 $generated@@46) (forall (($generated@@47 T@U) ) (!  (=> ($generated@@7 ($generated@@24 $generated@@3 ($generated@@19 $generated@@20 $generated@@21 ($generated@@19 $generated@@22 ($generated@@23 $generated@@20 $generated@@21) $generated@@45 $generated@@47) $generated))) ($generated@@7 ($generated@@24 $generated@@3 ($generated@@19 $generated@@20 $generated@@21 ($generated@@19 $generated@@22 ($generated@@23 $generated@@20 $generated@@21) $generated@@46 $generated@@47) $generated))))
 :pattern ( ($generated@@19 $generated@@20 $generated@@21 ($generated@@19 $generated@@22 ($generated@@23 $generated@@20 $generated@@21) $generated@@46 $generated@@47) $generated))
)))
 :pattern ( ($generated@@18 $generated@@45 $generated@@46))
)))
(assert (forall (($generated@@49 T@U) ($generated@@50 T@T) ) (! (= ($generated@@48 $generated@@50 ($generated@@24 $generated@@50 $generated@@49)) $generated@@49)
 :pattern ( ($generated@@24 $generated@@50 $generated@@49))
)))
(assert (forall (($generated@@53 T@U) ($generated@@54 T@U) ($generated@@55 T@U) ($generated@@56 T@T) ) (! (= ($generated@@51 ($generated@@48 $generated@@56 $generated@@53) $generated@@54 $generated@@55) ($generated@@52 $generated@@56 $generated@@53 $generated@@54 $generated@@55))
 :pattern ( ($generated@@51 ($generated@@48 $generated@@56 $generated@@53) $generated@@54 $generated@@55))
)))
(assert (forall (($generated@@57 T@U) ($generated@@58 T@U) ($generated@@59 T@U) ($generated@@60 T@U) ) (!  (=> ($generated@@18 $generated@@57 $generated@@58) (=> ($generated@@51 $generated@@59 $generated@@60 $generated@@57) ($generated@@51 $generated@@59 $generated@@60 $generated@@58)))
 :pattern ( ($generated@@18 $generated@@57 $generated@@58) ($generated@@51 $generated@@59 $generated@@60 $generated@@57))
)))
(assert (forall (($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@U) ($generated@@64 T@U) ($generated@@65 T@T) ) (!  (=> ($generated@@18 $generated@@61 $generated@@62) (=> ($generated@@52 $generated@@65 $generated@@63 $generated@@64 $generated@@61) ($generated@@52 $generated@@65 $generated@@63 $generated@@64 $generated@@62)))
 :pattern ( ($generated@@18 $generated@@61 $generated@@62) ($generated@@52 $generated@@65 $generated@@63 $generated@@64 $generated@@61))
)))
(assert (forall (($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ) (!  (=> (or (not (= $generated@@66 $generated@@68)) (not true)) (=> (and ($generated@@18 $generated@@66 $generated@@67) ($generated@@18 $generated@@67 $generated@@68)) ($generated@@18 $generated@@66 $generated@@68)))
 :pattern ( ($generated@@18 $generated@@66 $generated@@67) ($generated@@18 $generated@@67 $generated@@68))
)))
(assert (forall (($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@T) ) (! (= ($generated@@69 ($generated@@48 $generated@@73 $generated@@71) $generated@@72) ($generated@@70 $generated@@73 $generated@@71 $generated@@72))
 :pattern ( ($generated@@69 ($generated@@48 $generated@@73 $generated@@71) $generated@@72))
)))
(assert (forall (($generated@@75 T@U) ) (!  (=> ($generated@@74 $generated@@75) (forall (($generated@@76 T@U) ($generated@@77 T@U) ) (!  (=> ($generated@@69 $generated@@77 $generated@@75) ($generated@@51 $generated@@77 $generated@@75 $generated@@76))
 :pattern ( ($generated@@51 $generated@@77 $generated@@75 $generated@@76))
)))
 :pattern ( ($generated@@74 $generated@@75))
)))
(assert (forall (($generated@@80 T@U) ($generated@@81 T@U) ) (! (= ($generated@@79 ($generated@@78 $generated@@80 $generated@@81)) $generated@@80)
 :pattern ( ($generated@@78 $generated@@80 $generated@@81))
)))
(assert (forall (($generated@@83 T@U) ($generated@@84 T@U) ) (! (= ($generated@@82 ($generated@@78 $generated@@83 $generated@@84)) $generated@@84)
 :pattern ( ($generated@@78 $generated@@83 $generated@@84))
)))
(assert (forall (($generated@@85 T@U) ($generated@@86 T@T) ) (! (= ($generated@@24 $generated@@86 ($generated@@48 $generated@@86 $generated@@85)) $generated@@85)
 :pattern ( ($generated@@48 $generated@@86 $generated@@85))
)))
(assert (= ($generated@@2 $generated@@87) 7))
(assert (forall (($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ) (!  (=> ($generated@@69 $generated@@90 ($generated@@78 $generated@@88 $generated@@89)) (and (= ($generated@@48 $generated@@87 ($generated@@24 $generated@@87 $generated@@90)) $generated@@90) ($generated@@70 $generated@@87 ($generated@@24 $generated@@87 $generated@@90) ($generated@@78 $generated@@88 $generated@@89))))
 :pattern ( ($generated@@69 $generated@@90 ($generated@@78 $generated@@88 $generated@@89)))
)))
(assert  (and (forall (($generated@@94 T@T) ($generated@@95 T@T) ($generated@@96 T@T) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ) (! (= ($generated@@91 $generated@@94 $generated@@95 $generated@@96 ($generated@@93 $generated@@94 $generated@@95 $generated@@96 $generated@@98 $generated@@99 $generated@@100 $generated@@97) $generated@@99 $generated@@100) $generated@@97)
 :weight 0
)) (and (forall (($generated@@101 T@T) ($generated@@102 T@T) ($generated@@103 T@T) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ) (!  (or (= $generated@@106 $generated@@108) (= ($generated@@91 $generated@@101 $generated@@102 $generated@@103 ($generated@@93 $generated@@101 $generated@@102 $generated@@103 $generated@@105 $generated@@106 $generated@@107 $generated@@104) $generated@@108 $generated@@109) ($generated@@91 $generated@@101 $generated@@102 $generated@@103 $generated@@105 $generated@@108 $generated@@109)))
 :weight 0
)) (forall (($generated@@110 T@T) ($generated@@111 T@T) ($generated@@112 T@T) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ) (!  (or (= $generated@@116 $generated@@118) (= ($generated@@91 $generated@@110 $generated@@111 $generated@@112 ($generated@@93 $generated@@110 $generated@@111 $generated@@112 $generated@@114 $generated@@115 $generated@@116 $generated@@113) $generated@@117 $generated@@118) ($generated@@91 $generated@@110 $generated@@111 $generated@@112 $generated@@114 $generated@@117 $generated@@118)))
 :weight 0
)))))
(assert (forall (($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 Bool) ($generated@@123 T@U) ($generated@@124 T@U) ) (! (= ($generated@@7 ($generated@@91 $generated@@22 $generated@@20 $generated@@3 ($generated@@92 $generated@@119 $generated@@120 $generated@@121 $generated@@122) $generated@@123 $generated@@124))  (=> (and (or (not (= $generated@@123 $generated@@119)) (not true)) ($generated@@7 ($generated@@24 $generated@@3 ($generated@@19 $generated@@20 $generated@@21 ($generated@@19 $generated@@22 ($generated@@23 $generated@@20 $generated@@21) $generated@@120 $generated@@123) $generated@@121)))) $generated@@122))
 :pattern ( ($generated@@91 $generated@@22 $generated@@20 $generated@@3 ($generated@@92 $generated@@119 $generated@@120 $generated@@121 $generated@@122) $generated@@123 $generated@@124))
)))
(assert (forall (($generated@@127 T@U) ($generated@@128 T@U) ) (!  (and (= ($generated@@125 ($generated@@78 $generated@@127 $generated@@128)) $generated@@0) (= ($generated@@126 ($generated@@78 $generated@@127 $generated@@128)) $generated@@1))
 :pattern ( ($generated@@78 $generated@@127 $generated@@128))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@129 () T@U)
(declare-fun $generated@@130 () T@U)
(declare-fun $generated@@131 () T@U)
(declare-fun $generated@@132 () T@U)
(declare-fun $generated@@133 () T@U)
(declare-fun $generated@@134 () T@U)
(declare-fun $generated@@135 () T@U)
(declare-fun $generated@@136 () T@U)
(declare-fun $generated@@137 (T@U) Bool)
(declare-fun $generated@@138 (T@U) Bool)
(declare-fun $generated@@139 () T@U)
(declare-fun $generated@@140 () T@U)
(declare-fun $generated@@141 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 4) (let (($generated@@142  (=> (= $generated@@129 ($generated@@92 $generated@@130 $generated@@131 $generated false)) (and (=> (= (ControlFlow 0 2) (- 0 3)) ($generated@@51 $generated@@132 $generated@@133 $generated@@134)) (=> ($generated@@51 $generated@@132 $generated@@133 $generated@@134) (=> (= (ControlFlow 0 2) (- 0 1)) ($generated@@51 $generated@@135 $generated@@136 $generated@@134)))))))
(let (($generated@@143  (=> (and (and (and (and ($generated@@137 $generated@@134) ($generated@@138 $generated@@134)) ($generated@@74 $generated@@133)) (and (and ($generated@@70 $generated@@87 $generated@@139 ($generated@@78 $generated@@133 $generated@@136)) ($generated@@52 $generated@@87 $generated@@139 ($generated@@78 $generated@@133 $generated@@136) $generated@@140)) (and ($generated@@69 $generated@@132 $generated@@133) ($generated@@51 $generated@@132 $generated@@133 $generated@@131)))) (and (and (and ($generated@@69 $generated@@135 $generated@@136) ($generated@@51 $generated@@135 $generated@@136 $generated@@131)) (= 0 $generated@@141)) (and (and (= $generated@@140 $generated@@134) (and ($generated@@18 $generated@@140 $generated@@131) ($generated@@137 $generated@@131))) (= (ControlFlow 0 4) 2)))) $generated@@142)))
$generated@@143)))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
