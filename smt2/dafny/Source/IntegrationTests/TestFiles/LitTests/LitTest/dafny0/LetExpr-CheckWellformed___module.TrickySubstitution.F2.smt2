(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 (T@U) T@U)
(declare-fun $generated@@22 () Int)
(declare-fun $generated@@23 (T@U Int) Int)
(declare-fun $generated@@24 (Int) Int)
(declare-fun $generated@@25 (T@U) Bool)
(declare-fun $generated@@26 (T@U Int) Bool)
(declare-fun $generated@@27 () T@U)
(declare-fun $generated@@28 (T@T T@U T@U) Bool)
(declare-fun $generated@@29 () T@T)
(declare-fun $generated@@30 () T@U)
(declare-fun $generated@@31 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@32 (Int) Bool)
(declare-fun $generated@@33 (Int) Int)
(declare-fun $generated@@38 () T@U)
(declare-fun $generated@@39 (T@U) T@U)
(declare-fun $generated@@45 (T@T T@U) T@U)
(declare-fun $generated@@46 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 () T@T)
(declare-fun $generated@@49 (T@T T@T) T@T)
(declare-fun $generated@@50 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@51 (T@T) T@T)
(declare-fun $generated@@52 (T@T) T@T)
(declare-fun $generated@@73 (T@T T@U) T@U)
(declare-fun $generated@@76 (T@T T@U) T@U)
(declare-fun $generated@@79 (T@U T@U T@U) Bool)
(declare-fun $generated@@84 (Int) Int)
(declare-fun $generated@@97 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@98 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@99 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@131 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert (= ($generated@@21 $generated) $generated@@0))
(assert (= ($generated@@5 $generated@@29) 3))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@34 T@U) ($generated@@35 T@U) ($generated@@36 Int) ) (!  (=> (or ($generated@@26 $generated@@35 ($generated@@24 $generated@@36)) (and (< 0 $generated@@22) (and ($generated@@25 $generated@@34) (and (or (not (= $generated@@35 $generated@@27)) (not true)) (and ($generated@@28 $generated@@29 $generated@@35 $generated@@30) ($generated@@31 $generated@@29 $generated@@35 $generated@@30 $generated@@34)))))) (and ($generated@@32 ($generated@@24 $generated@@36)) (= ($generated@@23 $generated@@35 ($generated@@24 $generated@@36)) (let (($generated@@37 ($generated@@33 ($generated@@24 $generated@@36))))
$generated@@37))))
 :weight 3
 :pattern ( ($generated@@23 $generated@@35 ($generated@@24 $generated@@36)) ($generated@@25 $generated@@34))
))))
(assert (forall (($generated@@40 T@U) ) (! (= ($generated@@28 $generated@@29 $generated@@40 $generated@@38)  (or (= $generated@@40 $generated@@27) (= ($generated@@39 $generated@@40) $generated@@38)))
 :pattern ( ($generated@@28 $generated@@29 $generated@@40 $generated@@38))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (= ($generated@@31 $generated@@29 $generated@@41 $generated@@30 $generated@@42) ($generated@@31 $generated@@29 $generated@@41 $generated@@38 $generated@@42))
 :pattern ( ($generated@@31 $generated@@29 $generated@@41 $generated@@30 $generated@@42))
 :pattern ( ($generated@@31 $generated@@29 $generated@@41 $generated@@38 $generated@@42))
)))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@43 T@U) ($generated@@44 Int) ) (!  (=> (or ($generated@@26 $generated@@43 $generated@@44) (and (< 0 $generated@@22) (and (or (not (= $generated@@43 $generated@@27)) (not true)) ($generated@@28 $generated@@29 $generated@@43 $generated@@30)))) (= ($generated@@23 $generated@@43 $generated@@44) $generated@@44))
 :pattern ( ($generated@@23 $generated@@43 $generated@@44))
))))
(assert  (and (and (and (and (and (and (forall (($generated@@53 T@T) ($generated@@54 T@T) ($generated@@55 T@U) ($generated@@56 T@U) ($generated@@57 T@U) ) (! (= ($generated@@46 $generated@@53 $generated@@54 ($generated@@50 $generated@@53 $generated@@54 $generated@@56 $generated@@57 $generated@@55) $generated@@57) $generated@@55)
 :weight 0
)) (forall (($generated@@58 T@T) ($generated@@59 T@T) ($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@U) ) (!  (or (= $generated@@62 $generated@@63) (= ($generated@@46 $generated@@58 $generated@@59 ($generated@@50 $generated@@58 $generated@@59 $generated@@61 $generated@@62 $generated@@60) $generated@@63) ($generated@@46 $generated@@58 $generated@@59 $generated@@61 $generated@@63)))
 :weight 0
))) (= ($generated@@5 $generated@@47) 4)) (= ($generated@@5 $generated@@48) 5)) (forall (($generated@@64 T@T) ($generated@@65 T@T) ) (= ($generated@@5 ($generated@@49 $generated@@64 $generated@@65)) 6))) (forall (($generated@@66 T@T) ($generated@@67 T@T) ) (! (= ($generated@@51 ($generated@@49 $generated@@66 $generated@@67)) $generated@@66)
 :pattern ( ($generated@@49 $generated@@66 $generated@@67))
))) (forall (($generated@@68 T@T) ($generated@@69 T@T) ) (! (= ($generated@@52 ($generated@@49 $generated@@68 $generated@@69)) $generated@@69)
 :pattern ( ($generated@@49 $generated@@68 $generated@@69))
))))
(assert (forall (($generated@@70 T@U) ($generated@@71 T@U) ) (! (= ($generated@@31 $generated@@29 $generated@@70 $generated@@38 $generated@@71)  (or (= $generated@@70 $generated@@27) ($generated@@10 ($generated@@45 $generated@@6 ($generated@@46 $generated@@47 $generated@@48 ($generated@@46 $generated@@29 ($generated@@49 $generated@@47 $generated@@48) $generated@@71 $generated@@70) $generated@@1)))))
 :pattern ( ($generated@@31 $generated@@29 $generated@@70 $generated@@38 $generated@@71))
)))
(assert (forall (($generated@@72 Int) ) (! (= ($generated@@24 $generated@@72) $generated@@72)
 :pattern ( ($generated@@24 $generated@@72))
)))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@T) ) (! (= ($generated@@73 $generated@@75 $generated@@74) $generated@@74)
 :pattern ( ($generated@@73 $generated@@75 $generated@@74))
)))
(assert (forall (($generated@@77 T@U) ($generated@@78 T@T) ) (! (= ($generated@@76 $generated@@78 ($generated@@45 $generated@@78 $generated@@77)) $generated@@77)
 :pattern ( ($generated@@45 $generated@@78 $generated@@77))
)))
(assert (forall (($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@T) ) (! (= ($generated@@79 ($generated@@76 $generated@@83 $generated@@80) $generated@@81 $generated@@82) ($generated@@31 $generated@@83 $generated@@80 $generated@@81 $generated@@82))
 :pattern ( ($generated@@79 ($generated@@76 $generated@@83 $generated@@80) $generated@@81 $generated@@82))
)))
(assert (forall (($generated@@85 Int) ) (!  (=> ($generated@@32 $generated@@85) (and (= ($generated@@84 $generated@@85) $generated@@85) (= ($generated@@84 $generated@@85) ($generated@@33 $generated@@85))))
 :pattern ( ($generated@@33 $generated@@85))
 :pattern ( ($generated@@84 $generated@@85))
)))
(assert (forall (($generated@@86 T@U) ) (! (= ($generated@@28 $generated@@29 $generated@@86 $generated@@30)  (and ($generated@@28 $generated@@29 $generated@@86 $generated@@38) (or (not (= $generated@@86 $generated@@27)) (not true))))
 :pattern ( ($generated@@28 $generated@@29 $generated@@86 $generated@@30))
 :pattern ( ($generated@@28 $generated@@29 $generated@@86 $generated@@38))
)))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 Int) ) (!  (=> (or ($generated@@26 ($generated@@73 $generated@@29 $generated@@88) ($generated@@24 $generated@@89)) (and (< 0 $generated@@22) (and ($generated@@25 $generated@@87) (and (or (not (= $generated@@88 $generated@@27)) (not true)) (and ($generated@@28 $generated@@29 $generated@@88 $generated@@30) ($generated@@31 $generated@@29 $generated@@88 $generated@@30 $generated@@87)))))) (and ($generated@@32 ($generated@@24 $generated@@89)) (= ($generated@@23 ($generated@@73 $generated@@29 $generated@@88) ($generated@@24 $generated@@89)) (let (($generated@@90 ($generated@@33 ($generated@@24 $generated@@89))))
$generated@@90))))
 :weight 3
 :pattern ( ($generated@@23 ($generated@@73 $generated@@29 $generated@@88) ($generated@@24 $generated@@89)) ($generated@@25 $generated@@87))
))))
(assert (forall (($generated@@91 T@U) ($generated@@92 T@T) ) (! (= ($generated@@45 $generated@@92 ($generated@@76 $generated@@92 $generated@@91)) $generated@@91)
 :pattern ( ($generated@@76 $generated@@92 $generated@@91))
)))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 Int) ) (!  (=> (or ($generated@@26 $generated@@94 $generated@@95) (and (< 0 $generated@@22) (and ($generated@@25 $generated@@93) (and (or (not (= $generated@@94 $generated@@27)) (not true)) (and ($generated@@28 $generated@@29 $generated@@94 $generated@@30) ($generated@@31 $generated@@29 $generated@@94 $generated@@30 $generated@@93)))))) (and ($generated@@32 $generated@@95) (= ($generated@@23 $generated@@94 $generated@@95) (let (($generated@@96 ($generated@@33 $generated@@95)))
$generated@@96))))
 :pattern ( ($generated@@23 $generated@@94 $generated@@95) ($generated@@25 $generated@@93))
))))
(assert  (and (forall (($generated@@100 T@T) ($generated@@101 T@T) ($generated@@102 T@T) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (! (= ($generated@@97 $generated@@100 $generated@@101 $generated@@102 ($generated@@99 $generated@@100 $generated@@101 $generated@@102 $generated@@104 $generated@@105 $generated@@106 $generated@@103) $generated@@105 $generated@@106) $generated@@103)
 :weight 0
)) (and (forall (($generated@@107 T@T) ($generated@@108 T@T) ($generated@@109 T@T) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (!  (or (= $generated@@112 $generated@@114) (= ($generated@@97 $generated@@107 $generated@@108 $generated@@109 ($generated@@99 $generated@@107 $generated@@108 $generated@@109 $generated@@111 $generated@@112 $generated@@113 $generated@@110) $generated@@114 $generated@@115) ($generated@@97 $generated@@107 $generated@@108 $generated@@109 $generated@@111 $generated@@114 $generated@@115)))
 :weight 0
)) (forall (($generated@@116 T@T) ($generated@@117 T@T) ($generated@@118 T@T) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ) (!  (or (= $generated@@122 $generated@@124) (= ($generated@@97 $generated@@116 $generated@@117 $generated@@118 ($generated@@99 $generated@@116 $generated@@117 $generated@@118 $generated@@120 $generated@@121 $generated@@122 $generated@@119) $generated@@123 $generated@@124) ($generated@@97 $generated@@116 $generated@@117 $generated@@118 $generated@@120 $generated@@123 $generated@@124)))
 :weight 0
)))))
(assert (forall (($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 Bool) ($generated@@129 T@U) ($generated@@130 T@U) ) (! (= ($generated@@10 ($generated@@97 $generated@@29 $generated@@47 $generated@@6 ($generated@@98 $generated@@125 $generated@@126 $generated@@127 $generated@@128) $generated@@129 $generated@@130))  (=> (and (or (not (= $generated@@129 $generated@@125)) (not true)) ($generated@@10 ($generated@@45 $generated@@6 ($generated@@46 $generated@@47 $generated@@48 ($generated@@46 $generated@@29 ($generated@@49 $generated@@47 $generated@@48) $generated@@126 $generated@@129) $generated@@127)))) $generated@@128))
 :pattern ( ($generated@@97 $generated@@29 $generated@@47 $generated@@6 ($generated@@98 $generated@@125 $generated@@126 $generated@@127 $generated@@128) $generated@@129 $generated@@130))
)))
(assert (= ($generated@@21 $generated@@38) $generated@@2))
(assert (= ($generated@@131 $generated@@38) $generated@@4))
(assert (= ($generated@@21 $generated@@30) $generated@@3))
(assert (= ($generated@@131 $generated@@30) $generated@@4))
(assert (forall (($generated@@132 Int) ) (! (= ($generated@@76 $generated@@7 ($generated@@11 ($generated@@24 $generated@@132))) ($generated@@73 $generated@@48 ($generated@@76 $generated@@7 ($generated@@11 $generated@@132))))
 :pattern ( ($generated@@76 $generated@@7 ($generated@@11 ($generated@@24 $generated@@132))))
)))
(assert (forall (($generated@@133 T@U) ($generated@@134 T@T) ) (! (= ($generated@@76 $generated@@134 ($generated@@73 $generated@@134 $generated@@133)) ($generated@@73 $generated@@48 ($generated@@76 $generated@@134 $generated@@133)))
 :pattern ( ($generated@@76 $generated@@134 ($generated@@73 $generated@@134 $generated@@133)))
)))
(assert (forall (($generated@@135 T@U) ($generated@@136 T@U) ) (! ($generated@@31 $generated@@7 $generated@@136 $generated $generated@@135)
 :pattern ( ($generated@@31 $generated@@7 $generated@@136 $generated $generated@@135))
)))
(assert (forall (($generated@@137 T@U) ) (! ($generated@@28 $generated@@7 $generated@@137 $generated)
 :pattern ( ($generated@@28 $generated@@7 $generated@@137 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@138 () T@U)
(declare-fun $generated@@139 () Int)
(declare-fun $generated@@140 () Int)
(declare-fun $generated@@141 () Int)
(declare-fun $generated@@142 () T@U)
(declare-fun $generated@@143 () T@U)
(declare-fun $generated@@144 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 13) (let (($generated@@145  (=> (= (ControlFlow 0 6) (- 0 5)) (= ($generated@@23 $generated@@138 $generated@@139) $generated@@139))))
(let (($generated@@146  (and (=> (= (ControlFlow 0 7) (- 0 8)) (or (and (and ($generated@@28 $generated@@7 ($generated@@11 $generated@@139) $generated) ($generated@@28 $generated@@7 ($generated@@11 $generated@@139) $generated)) (and (= $generated@@139 $generated@@139) (= $generated@@139 $generated@@139))) (or (and (and ($generated@@28 $generated@@7 ($generated@@11 ($generated@@24 0)) $generated) ($generated@@28 $generated@@7 ($generated@@11 ($generated@@24 0)) $generated)) (and (= ($generated@@24 0) $generated@@139) (= ($generated@@24 0) ($generated@@24 0)))) (or (exists (($generated@@147 T@U) )  (and ($generated@@28 $generated@@7 $generated@@147 $generated) (and (= ($generated@@12 $generated@@147) $generated@@139) (= ($generated@@12 $generated@@147) ($generated@@12 $generated@@147))))) (or (and (and ($generated@@28 $generated@@7 ($generated@@11 ($generated@@24 0)) $generated) ($generated@@28 $generated@@7 ($generated@@11 ($generated@@24 0)) $generated)) (and (= ($generated@@24 0) $generated@@139) (= ($generated@@24 0) ($generated@@24 0)))) (or (and (and ($generated@@28 $generated@@7 ($generated@@11 $generated@@139) $generated) ($generated@@28 $generated@@7 ($generated@@11 ($generated@@24 0)) $generated)) (and (= $generated@@139 $generated@@139) (= $generated@@139 ($generated@@24 0)))) (or (and (and ($generated@@28 $generated@@7 ($generated@@11 ($generated@@24 0)) $generated) ($generated@@28 $generated@@7 ($generated@@11 ($generated@@24 0)) $generated)) (and (= ($generated@@24 0) $generated@@139) (= ($generated@@24 0) ($generated@@24 0)))) (or (exists (($generated@@148 Int) )  (and ($generated@@28 $generated@@7 ($generated@@11 ($generated@@24 0)) $generated) (and (= $generated@@148 $generated@@139) (= $generated@@148 ($generated@@24 0))))) (or (exists (($generated@@149 T@U) )  (and ($generated@@28 $generated@@7 $generated@@149 $generated) (and (= ($generated@@12 $generated@@149) $generated@@139) (= ($generated@@12 $generated@@149) ($generated@@12 $generated@@149))))) (or (exists (($generated@@150 Int) )  (and ($generated@@28 $generated@@7 ($generated@@11 $generated@@139) $generated) (and (= $generated@@139 $generated@@139) (= $generated@@139 $generated@@150)))) (or (exists (($generated@@151 Int) )  (and ($generated@@28 $generated@@7 ($generated@@11 ($generated@@24 0)) $generated) (and (= ($generated@@24 0) $generated@@139) (= ($generated@@24 0) $generated@@151)))) (exists (($generated@@152 Int) ($generated@@153 Int) )  (and (= $generated@@152 $generated@@139) (= $generated@@152 $generated@@153)))))))))))))) (=> (or (and (and ($generated@@28 $generated@@7 ($generated@@11 $generated@@139) $generated) ($generated@@28 $generated@@7 ($generated@@11 $generated@@139) $generated)) (and (= $generated@@139 $generated@@139) (= $generated@@139 $generated@@139))) (or (and (and ($generated@@28 $generated@@7 ($generated@@11 ($generated@@24 0)) $generated) ($generated@@28 $generated@@7 ($generated@@11 ($generated@@24 0)) $generated)) (and (= ($generated@@24 0) $generated@@139) (= ($generated@@24 0) ($generated@@24 0)))) (or (exists (($generated@@154 Int) )  (and ($generated@@28 $generated@@7 ($generated@@11 $generated@@154) $generated) (and (= $generated@@154 $generated@@139) (= $generated@@154 $generated@@154)))) (or (and (and ($generated@@28 $generated@@7 ($generated@@11 ($generated@@24 0)) $generated) ($generated@@28 $generated@@7 ($generated@@11 ($generated@@24 0)) $generated)) (and (= ($generated@@24 0) $generated@@139) (= ($generated@@24 0) ($generated@@24 0)))) (or (and (and ($generated@@28 $generated@@7 ($generated@@11 $generated@@139) $generated) ($generated@@28 $generated@@7 ($generated@@11 ($generated@@24 0)) $generated)) (and (= $generated@@139 $generated@@139) (= $generated@@139 ($generated@@24 0)))) (or (and (and ($generated@@28 $generated@@7 ($generated@@11 ($generated@@24 0)) $generated) ($generated@@28 $generated@@7 ($generated@@11 ($generated@@24 0)) $generated)) (and (= ($generated@@24 0) $generated@@139) (= ($generated@@24 0) ($generated@@24 0)))) (or (exists (($generated@@155 Int) )  (and ($generated@@28 $generated@@7 ($generated@@11 ($generated@@24 0)) $generated) (and (= $generated@@155 $generated@@139) (= $generated@@155 ($generated@@24 0))))) (or (exists (($generated@@156 Int) )  (and ($generated@@28 $generated@@7 ($generated@@11 $generated@@156) $generated) (and (= $generated@@156 $generated@@139) (= $generated@@156 $generated@@156)))) (or (exists (($generated@@157 Int) )  (and ($generated@@28 $generated@@7 ($generated@@11 $generated@@139) $generated) (and (= $generated@@139 $generated@@139) (= $generated@@139 $generated@@157)))) (or (exists (($generated@@158 Int) )  (and ($generated@@28 $generated@@7 ($generated@@11 ($generated@@24 0)) $generated) (and (= ($generated@@24 0) $generated@@139) (= ($generated@@24 0) $generated@@158)))) (exists (($generated@@159 Int) ($generated@@160 Int) )  (and (= $generated@@159 $generated@@139) (= $generated@@159 $generated@@160))))))))))))) (=> (and (= $generated@@140 $generated@@139) (= $generated@@140 $generated@@141)) (=> (and (and ($generated@@32 $generated@@139) (= ($generated@@23 $generated@@138 $generated@@139) $generated@@141)) (and ($generated@@28 $generated@@7 ($generated@@11 ($generated@@23 $generated@@138 $generated@@139)) $generated) (= (ControlFlow 0 7) 6))) $generated@@145))))))
(let (($generated@@161  (=> (and (or (not (= $generated@@140 $generated@@139)) (not true)) (= (ControlFlow 0 10) 7)) $generated@@146)))
(let (($generated@@162  (=> (and (= $generated@@140 $generated@@139) (= (ControlFlow 0 9) 7)) $generated@@146)))
(let (($generated@@163  (and (=> (= (ControlFlow 0 11) 9) $generated@@162) (=> (= (ControlFlow 0 11) 10) $generated@@161))))
(let (($generated@@164 true))
(let (($generated@@165  (=> (and ($generated@@79 ($generated@@76 $generated@@29 $generated@@138) $generated@@38 $generated@@142) ($generated@@31 $generated@@7 ($generated@@11 $generated@@139) $generated $generated@@142)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (or (<= 0 $generated@@139) (= $generated@@139 $generated@@139))) (=> (or (<= 0 $generated@@139) (= $generated@@139 $generated@@139)) (=> (= (ControlFlow 0 2) (- 0 1)) (or (and (= $generated@@138 $generated@@138) (= $generated@@139 $generated@@139)) (< $generated@@139 $generated@@139))))))))
(let (($generated@@166  (=> (= $generated@@143 ($generated@@98 $generated@@27 $generated@@142 $generated@@1 false)) (and (and (=> (= (ControlFlow 0 12) 2) $generated@@165) (=> (= (ControlFlow 0 12) 11) $generated@@163)) (=> (= (ControlFlow 0 12) 4) $generated@@164)))))
(let (($generated@@167  (=> (and ($generated@@25 $generated@@142) ($generated@@144 $generated@@142)) (=> (and (and (or (not (= $generated@@138 $generated@@27)) (not true)) (and ($generated@@28 $generated@@29 $generated@@138 $generated@@30) ($generated@@31 $generated@@29 $generated@@138 $generated@@30 $generated@@142))) (and (= 0 $generated@@22) (= (ControlFlow 0 13) 12))) $generated@@166))))
$generated@@167))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
