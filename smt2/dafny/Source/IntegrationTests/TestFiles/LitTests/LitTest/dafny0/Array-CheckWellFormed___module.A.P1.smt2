(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 () T@U)
(declare-fun $generated@@9 () T@U)
(declare-fun $generated@@10 () T@U)
(declare-fun $generated@@11 (T@T) Int)
(declare-fun $generated@@12 () T@T)
(declare-fun $generated@@13 () T@T)
(declare-fun $generated@@14 () T@T)
(declare-fun $generated@@15 (Bool) T@U)
(declare-fun $generated@@16 (T@U) Bool)
(declare-fun $generated@@17 (Int) T@U)
(declare-fun $generated@@18 (T@U) Int)
(declare-fun $generated@@19 (Real) T@U)
(declare-fun $generated@@20 (T@U) Real)
(declare-fun $generated@@27 (T@U) Int)
(declare-fun $generated@@28 (T@U) T@U)
(declare-fun $generated@@29 (T@U) T@U)
(declare-fun $generated@@30 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@31 () T@T)
(declare-fun $generated@@32 (T@U) T@U)
(declare-fun $generated@@33 (T@U) T@U)
(declare-fun $generated@@37 (T@T T@U T@U) Bool)
(declare-fun $generated@@38 () T@U)
(declare-fun $generated@@39 () T@U)
(declare-fun $generated@@40 (T@U) T@U)
(declare-fun $generated@@42 () T@U)
(declare-fun $generated@@45 (T@T T@U) T@U)
(declare-fun $generated@@46 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 () T@T)
(declare-fun $generated@@49 (T@T T@T) T@T)
(declare-fun $generated@@50 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@51 (T@T) T@T)
(declare-fun $generated@@52 (T@T) T@T)
(declare-fun $generated@@73 () T@U)
(declare-fun $generated@@74 (T@U T@U) T@U)
(declare-fun $generated@@75 (T@U) Bool)
(declare-fun $generated@@78 (T@U T@U) Bool)
(declare-fun $generated@@82 (T@T T@U) T@U)
(declare-fun $generated@@92 (T@U) T@U)
(declare-fun $generated@@95 (T@U) Bool)
(declare-fun $generated@@100 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@101 (T@U T@U T@U T@U T@U) T@U)
(declare-fun $generated@@102 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@139 (T@U) T@U)
(declare-fun $generated@@142 (T@U) T@U)
(declare-fun $generated@@144 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@11 $generated@@12) 0) (= ($generated@@11 $generated@@13) 1)) (= ($generated@@11 $generated@@14) 2)) (forall (($generated@@21 Bool) ) (! (= ($generated@@16 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 T@U) ) (! (= ($generated@@15 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 Int) ) (! (= ($generated@@18 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))) (forall (($generated@@24 T@U) ) (! (= ($generated@@17 ($generated@@18 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@18 $generated@@24))
))) (forall (($generated@@25 Real) ) (! (= ($generated@@20 ($generated@@19 $generated@@25)) $generated@@25)
 :pattern ( ($generated@@19 $generated@@25))
))) (forall (($generated@@26 T@U) ) (! (= ($generated@@19 ($generated@@20 $generated@@26)) $generated@@26)
 :pattern ( ($generated@@20 $generated@@26))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7 $generated@@8 $generated@@9 $generated@@10)
)
(assert (= ($generated@@27 $generated@@1) 0))
(assert (= ($generated@@28 $generated) $generated@@0))
(assert (= ($generated@@29 $generated@@1) $generated@@2))
(assert (= ($generated@@11 $generated@@31) 3))
(assert (forall (($generated@@34 T@U) ($generated@@35 T@U) ($generated@@36 T@U) ) (! (= ($generated@@30 $generated@@31 $generated@@35 ($generated@@32 $generated@@34) $generated@@36) ($generated@@30 $generated@@31 $generated@@35 ($generated@@33 $generated@@34) $generated@@36))
 :pattern ( ($generated@@30 $generated@@31 $generated@@35 ($generated@@32 $generated@@34) $generated@@36))
 :pattern ( ($generated@@30 $generated@@31 $generated@@35 ($generated@@33 $generated@@34) $generated@@36))
)))
(assert (forall (($generated@@41 T@U) ) (! (= ($generated@@37 $generated@@31 $generated@@41 $generated@@38)  (or (= $generated@@41 $generated@@39) (= ($generated@@40 $generated@@41) $generated@@38)))
 :pattern ( ($generated@@37 $generated@@31 $generated@@41 $generated@@38))
)))
(assert (forall (($generated@@43 T@U) ($generated@@44 T@U) ) (! (= ($generated@@30 $generated@@31 $generated@@43 $generated@@42 $generated@@44) ($generated@@30 $generated@@31 $generated@@43 $generated@@38 $generated@@44))
 :pattern ( ($generated@@30 $generated@@31 $generated@@43 $generated@@42 $generated@@44))
 :pattern ( ($generated@@30 $generated@@31 $generated@@43 $generated@@38 $generated@@44))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@53 T@T) ($generated@@54 T@T) ($generated@@55 T@U) ($generated@@56 T@U) ($generated@@57 T@U) ) (! (= ($generated@@46 $generated@@53 $generated@@54 ($generated@@50 $generated@@53 $generated@@54 $generated@@56 $generated@@57 $generated@@55) $generated@@57) $generated@@55)
 :weight 0
)) (forall (($generated@@58 T@T) ($generated@@59 T@T) ($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@U) ) (!  (or (= $generated@@62 $generated@@63) (= ($generated@@46 $generated@@58 $generated@@59 ($generated@@50 $generated@@58 $generated@@59 $generated@@61 $generated@@62 $generated@@60) $generated@@63) ($generated@@46 $generated@@58 $generated@@59 $generated@@61 $generated@@63)))
 :weight 0
))) (= ($generated@@11 $generated@@47) 4)) (= ($generated@@11 $generated@@48) 5)) (forall (($generated@@64 T@T) ($generated@@65 T@T) ) (= ($generated@@11 ($generated@@49 $generated@@64 $generated@@65)) 6))) (forall (($generated@@66 T@T) ($generated@@67 T@T) ) (! (= ($generated@@51 ($generated@@49 $generated@@66 $generated@@67)) $generated@@66)
 :pattern ( ($generated@@49 $generated@@66 $generated@@67))
))) (forall (($generated@@68 T@T) ($generated@@69 T@T) ) (! (= ($generated@@52 ($generated@@49 $generated@@68 $generated@@69)) $generated@@69)
 :pattern ( ($generated@@49 $generated@@68 $generated@@69))
))))
(assert (forall (($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (! (= ($generated@@30 $generated@@31 $generated@@71 ($generated@@33 $generated@@70) $generated@@72)  (or (= $generated@@71 $generated@@39) ($generated@@16 ($generated@@45 $generated@@12 ($generated@@46 $generated@@47 $generated@@48 ($generated@@46 $generated@@31 ($generated@@49 $generated@@47 $generated@@48) $generated@@72 $generated@@71) $generated@@1)))))
 :pattern ( ($generated@@30 $generated@@31 $generated@@71 ($generated@@33 $generated@@70) $generated@@72))
)))
(assert (= ($generated@@27 $generated@@73) 0))
(assert (= ($generated@@74 $generated@@5 $generated@@10) $generated@@73))
(assert  (not ($generated@@75 $generated@@73)))
(assert (forall (($generated@@76 T@U) ($generated@@77 T@U) ) (! (= ($generated@@30 $generated@@31 $generated@@76 $generated@@38 $generated@@77)  (or (= $generated@@76 $generated@@39) ($generated@@16 ($generated@@45 $generated@@12 ($generated@@46 $generated@@47 $generated@@48 ($generated@@46 $generated@@31 ($generated@@49 $generated@@47 $generated@@48) $generated@@77 $generated@@76) $generated@@1)))))
 :pattern ( ($generated@@30 $generated@@31 $generated@@76 $generated@@38 $generated@@77))
)))
(assert (forall (($generated@@79 T@U) ($generated@@80 T@U) ) (!  (=> ($generated@@78 $generated@@79 $generated@@80) (forall (($generated@@81 T@U) ) (!  (=> ($generated@@16 ($generated@@45 $generated@@12 ($generated@@46 $generated@@47 $generated@@48 ($generated@@46 $generated@@31 ($generated@@49 $generated@@47 $generated@@48) $generated@@79 $generated@@81) $generated@@1))) ($generated@@16 ($generated@@45 $generated@@12 ($generated@@46 $generated@@47 $generated@@48 ($generated@@46 $generated@@31 ($generated@@49 $generated@@47 $generated@@48) $generated@@80 $generated@@81) $generated@@1))))
 :pattern ( ($generated@@46 $generated@@47 $generated@@48 ($generated@@46 $generated@@31 ($generated@@49 $generated@@47 $generated@@48) $generated@@80 $generated@@81) $generated@@1))
)))
 :pattern ( ($generated@@78 $generated@@79 $generated@@80))
)))
(assert (forall (($generated@@83 T@U) ($generated@@84 T@T) ) (! (= ($generated@@82 $generated@@84 ($generated@@45 $generated@@84 $generated@@83)) $generated@@83)
 :pattern ( ($generated@@45 $generated@@84 $generated@@83))
)))
(assert ($generated@@75 $generated@@1))
(assert (forall (($generated@@85 T@U) ($generated@@86 T@U) ) (! (= ($generated@@37 $generated@@31 $generated@@86 ($generated@@32 $generated@@85))  (and ($generated@@37 $generated@@31 $generated@@86 ($generated@@33 $generated@@85)) (or (not (= $generated@@86 $generated@@39)) (not true))))
 :pattern ( ($generated@@37 $generated@@31 $generated@@86 ($generated@@32 $generated@@85)))
 :pattern ( ($generated@@37 $generated@@31 $generated@@86 ($generated@@33 $generated@@85)))
)))
(assert (forall (($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@T) ) (!  (=> ($generated@@78 $generated@@87 $generated@@88) (=> ($generated@@30 $generated@@91 $generated@@89 $generated@@90 $generated@@87) ($generated@@30 $generated@@91 $generated@@89 $generated@@90 $generated@@88)))
 :pattern ( ($generated@@78 $generated@@87 $generated@@88) ($generated@@30 $generated@@91 $generated@@89 $generated@@90 $generated@@87))
)))
(assert (forall (($generated@@93 T@U) ) (!  (and (= ($generated@@28 ($generated@@33 $generated@@93)) $generated@@3) (= ($generated@@92 ($generated@@33 $generated@@93)) $generated@@8))
 :pattern ( ($generated@@33 $generated@@93))
)))
(assert (forall (($generated@@94 T@U) ) (!  (and (= ($generated@@28 ($generated@@32 $generated@@94)) $generated@@4) (= ($generated@@92 ($generated@@32 $generated@@94)) $generated@@8))
 :pattern ( ($generated@@32 $generated@@94))
)))
(assert (forall (($generated@@96 T@U) ($generated@@97 T@U) ) (!  (=> (and (and ($generated@@95 $generated@@96) (and (or (not (= $generated@@97 $generated@@39)) (not true)) (= ($generated@@40 $generated@@97) $generated@@38))) ($generated@@16 ($generated@@45 $generated@@12 ($generated@@46 $generated@@47 $generated@@48 ($generated@@46 $generated@@31 ($generated@@49 $generated@@47 $generated@@48) $generated@@96 $generated@@97) $generated@@1)))) ($generated@@30 $generated@@31 ($generated@@45 $generated@@31 ($generated@@46 $generated@@47 $generated@@48 ($generated@@46 $generated@@31 ($generated@@49 $generated@@47 $generated@@48) $generated@@96 $generated@@97) $generated@@73)) ($generated@@32 $generated) $generated@@96))
 :pattern ( ($generated@@45 $generated@@31 ($generated@@46 $generated@@47 $generated@@48 ($generated@@46 $generated@@31 ($generated@@49 $generated@@47 $generated@@48) $generated@@96 $generated@@97) $generated@@73)))
)))
(assert (forall (($generated@@98 T@U) ($generated@@99 T@U) ) (! (= ($generated@@37 $generated@@31 $generated@@99 ($generated@@33 $generated@@98))  (or (= $generated@@99 $generated@@39) (= ($generated@@40 $generated@@99) ($generated@@33 $generated@@98))))
 :pattern ( ($generated@@37 $generated@@31 $generated@@99 ($generated@@33 $generated@@98)))
)))
(assert  (and (forall (($generated@@103 T@T) ($generated@@104 T@T) ($generated@@105 T@T) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ) (! (= ($generated@@100 $generated@@103 $generated@@104 $generated@@105 ($generated@@102 $generated@@103 $generated@@104 $generated@@105 $generated@@107 $generated@@108 $generated@@109 $generated@@106) $generated@@108 $generated@@109) $generated@@106)
 :weight 0
)) (and (forall (($generated@@110 T@T) ($generated@@111 T@T) ($generated@@112 T@T) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ) (!  (or (= $generated@@115 $generated@@117) (= ($generated@@100 $generated@@110 $generated@@111 $generated@@112 ($generated@@102 $generated@@110 $generated@@111 $generated@@112 $generated@@114 $generated@@115 $generated@@116 $generated@@113) $generated@@117 $generated@@118) ($generated@@100 $generated@@110 $generated@@111 $generated@@112 $generated@@114 $generated@@117 $generated@@118)))
 :weight 0
)) (forall (($generated@@119 T@T) ($generated@@120 T@T) ($generated@@121 T@T) ($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 T@U) ) (!  (or (= $generated@@125 $generated@@127) (= ($generated@@100 $generated@@119 $generated@@120 $generated@@121 ($generated@@102 $generated@@119 $generated@@120 $generated@@121 $generated@@123 $generated@@124 $generated@@125 $generated@@122) $generated@@126 $generated@@127) ($generated@@100 $generated@@119 $generated@@120 $generated@@121 $generated@@123 $generated@@126 $generated@@127)))
 :weight 0
)))))
(assert (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ($generated@@134 T@U) ) (! (= ($generated@@16 ($generated@@100 $generated@@31 $generated@@47 $generated@@12 ($generated@@101 $generated@@128 $generated@@129 $generated@@130 $generated@@131 $generated@@132) $generated@@133 $generated@@134))  (=> (and (or (not (= $generated@@133 $generated@@128)) (not true)) ($generated@@16 ($generated@@45 $generated@@12 ($generated@@46 $generated@@47 $generated@@48 ($generated@@46 $generated@@31 ($generated@@49 $generated@@47 $generated@@48) $generated@@129 $generated@@133) $generated@@130)))) (and (= $generated@@133 $generated@@131) (= $generated@@134 $generated@@132))))
 :pattern ( ($generated@@100 $generated@@31 $generated@@47 $generated@@12 ($generated@@101 $generated@@128 $generated@@129 $generated@@130 $generated@@131 $generated@@132) $generated@@133 $generated@@134))
)))
(assert (forall (($generated@@135 T@U) ) (! (= ($generated@@37 $generated@@31 $generated@@135 $generated@@42)  (and ($generated@@37 $generated@@31 $generated@@135 $generated@@38) (or (not (= $generated@@135 $generated@@39)) (not true))))
 :pattern ( ($generated@@37 $generated@@31 $generated@@135 $generated@@42))
 :pattern ( ($generated@@37 $generated@@31 $generated@@135 $generated@@38))
)))
(assert (forall (($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ) (!  (=> (or (not (= $generated@@136 $generated@@138)) (not true)) (=> (and ($generated@@78 $generated@@136 $generated@@137) ($generated@@78 $generated@@137 $generated@@138)) ($generated@@78 $generated@@136 $generated@@138)))
 :pattern ( ($generated@@78 $generated@@136 $generated@@137) ($generated@@78 $generated@@137 $generated@@138))
)))
(assert (forall (($generated@@140 T@U) ($generated@@141 T@U) ) (!  (and (= ($generated@@139 ($generated@@74 $generated@@140 $generated@@141)) $generated@@140) (= ($generated@@29 ($generated@@74 $generated@@140 $generated@@141)) $generated@@141))
 :pattern ( ($generated@@74 $generated@@140 $generated@@141))
)))
(assert (forall (($generated@@143 T@U) ) (! (= ($generated@@142 ($generated@@33 $generated@@143)) $generated@@143)
 :pattern ( ($generated@@33 $generated@@143))
)))
(assert (forall (($generated@@145 T@U) ) (! (= ($generated@@144 ($generated@@32 $generated@@145)) $generated@@145)
 :pattern ( ($generated@@32 $generated@@145))
)))
(assert (forall (($generated@@146 T@U) ($generated@@147 T@T) ) (! (= ($generated@@45 $generated@@147 ($generated@@82 $generated@@147 $generated@@146)) $generated@@146)
 :pattern ( ($generated@@82 $generated@@147 $generated@@146))
)))
(assert (forall (($generated@@148 T@U) ($generated@@149 T@U) ) (!  (=> (and ($generated@@95 $generated@@148) (and (or (not (= $generated@@149 $generated@@39)) (not true)) (= ($generated@@40 $generated@@149) $generated@@38))) ($generated@@37 $generated@@31 ($generated@@45 $generated@@31 ($generated@@46 $generated@@47 $generated@@48 ($generated@@46 $generated@@31 ($generated@@49 $generated@@47 $generated@@48) $generated@@148 $generated@@149) $generated@@73)) ($generated@@32 $generated)))
 :pattern ( ($generated@@45 $generated@@31 ($generated@@46 $generated@@47 $generated@@48 ($generated@@46 $generated@@31 ($generated@@49 $generated@@47 $generated@@48) $generated@@148 $generated@@149) $generated@@73)))
)))
(assert (= ($generated@@28 $generated@@38) $generated@@6))
(assert (= ($generated@@92 $generated@@38) $generated@@9))
(assert (= ($generated@@28 $generated@@42) $generated@@7))
(assert (= ($generated@@92 $generated@@42) $generated@@9))
(assert (forall (($generated@@150 T@U) ($generated@@151 T@U) ) (! ($generated@@30 $generated@@13 $generated@@151 $generated $generated@@150)
 :pattern ( ($generated@@30 $generated@@13 $generated@@151 $generated $generated@@150))
)))
(assert (forall (($generated@@152 T@U) ) (! ($generated@@37 $generated@@13 $generated@@152 $generated)
 :pattern ( ($generated@@37 $generated@@13 $generated@@152 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@153 () T@U)
(declare-fun $generated@@154 () T@U)
(declare-fun $generated@@155 () T@U)
(declare-fun $generated@@156 (T@U) Bool)
(declare-fun $generated@@157 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@158  (=> (and (= $generated@@153 ($generated@@101 $generated@@39 $generated@@154 $generated@@1 $generated@@155 $generated@@73)) (= (ControlFlow 0 2) (- 0 1))) (or (not (= $generated@@155 $generated@@39)) (not true)))))
(let (($generated@@159  (=> (and ($generated@@95 $generated@@154) ($generated@@156 $generated@@154)) (=> (and (and (or (not (= $generated@@155 $generated@@39)) (not true)) (and ($generated@@37 $generated@@31 $generated@@155 $generated@@42) ($generated@@30 $generated@@31 $generated@@155 $generated@@42 $generated@@154))) (and (= 0 $generated@@157) (= (ControlFlow 0 3) 2))) $generated@@158))))
$generated@@159)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
