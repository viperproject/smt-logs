(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 (T@U) T@U)
(declare-fun $generated@@20 () Int)
(declare-fun $generated@@21 (Int T@U) Bool)
(declare-fun $generated@@22 (Int) Int)
(declare-fun $generated@@23 (T@T T@U) T@U)
(declare-fun $generated@@24 () T@T)
(declare-fun $generated@@25 (Int T@U) Bool)
(declare-fun $generated@@26 (T@T T@U T@U) Bool)
(declare-fun $generated@@27 (T@U) T@U)
(declare-fun $generated@@28 (T@U T@U T@U) Bool)
(declare-fun $generated@@29 (T@T T@U) T@U)
(declare-fun $generated@@32 (T@U T@U T@U) Bool)
(declare-fun $generated@@33 (T@U T@U) Bool)
(declare-fun $generated@@34 (T@U T@U) Bool)
(declare-fun $generated@@44 (T@T T@U) T@U)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@56 (T@U T@U T@U) Bool)
(declare-fun $generated@@57 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@70 (T@U) T@U)
(declare-fun $generated@@75 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@76 () T@T)
(declare-fun $generated@@77 () T@T)
(declare-fun $generated@@78 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@79 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@80 (T@T T@T) T@T)
(declare-fun $generated@@81 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@82 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@83 (T@T) T@T)
(declare-fun $generated@@84 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (= ($generated@@19 $generated) $generated@@0))
(assert (= ($generated@@3 $generated@@24) 3))
(assert  (=> (<= 1 $generated@@20) (forall (($generated@@30 Int) ($generated@@31 T@U) ) (!  (=> (or ($generated@@25 ($generated@@22 $generated@@30) ($generated@@23 $generated@@24 $generated@@31)) (and (< 1 $generated@@20) (and ($generated@@26 $generated@@24 $generated@@31 ($generated@@27 $generated)) ($generated@@8 ($generated@@23 $generated@@4 ($generated@@7 ($generated@@28 $generated ($generated@@29 $generated@@5 ($generated@@9 ($generated@@22 $generated@@30))) ($generated@@23 $generated@@24 $generated@@31)))))))) (= ($generated@@21 ($generated@@22 $generated@@30) ($generated@@23 $generated@@24 $generated@@31)) ($generated@@8 ($generated@@23 $generated@@4 ($generated@@7 false)))))
 :weight 3
 :pattern ( ($generated@@21 ($generated@@22 $generated@@30) ($generated@@23 $generated@@24 $generated@@31)))
))))
(assert  (=> (<= 0 $generated@@20) (forall (($generated@@35 T@U) ($generated@@36 T@U) ($generated@@37 T@U) ) (!  (=> (or ($generated@@32 $generated@@35 $generated@@36 $generated@@37) (and (< 0 $generated@@20) (and (and ($generated@@33 $generated@@36 $generated@@35) ($generated@@26 $generated@@24 $generated@@37 ($generated@@27 $generated@@35))) (or (= $generated@@36 $generated@@36) ($generated@@34 $generated@@37 $generated@@36))))) (= ($generated@@28 $generated@@35 $generated@@36 $generated@@37) ($generated@@8 ($generated@@23 $generated@@4 ($generated@@7 false)))))
 :pattern ( ($generated@@28 $generated@@35 $generated@@36 $generated@@37))
))))
(assert (forall (($generated@@38 Int) ) (! (= ($generated@@22 $generated@@38) $generated@@38)
 :pattern ( ($generated@@22 $generated@@38))
)))
(assert (forall (($generated@@39 T@U) ($generated@@40 T@T) ) (! (= ($generated@@23 $generated@@40 $generated@@39) $generated@@39)
 :pattern ( ($generated@@23 $generated@@40 $generated@@39))
)))
(assert  (=> (<= 0 $generated@@20) (forall (($generated@@41 T@U) ($generated@@42 T@U) ($generated@@43 T@U) ) (!  (=> (or ($generated@@32 $generated@@41 $generated@@42 ($generated@@23 $generated@@24 $generated@@43)) (and (< 0 $generated@@20) (and (and ($generated@@33 $generated@@42 $generated@@41) ($generated@@26 $generated@@24 $generated@@43 ($generated@@27 $generated@@41))) (or (= $generated@@42 $generated@@42) ($generated@@34 ($generated@@23 $generated@@24 $generated@@43) $generated@@42))))) (= ($generated@@28 $generated@@41 $generated@@42 ($generated@@23 $generated@@24 $generated@@43)) ($generated@@8 ($generated@@23 $generated@@4 ($generated@@7 false)))))
 :weight 3
 :pattern ( ($generated@@28 $generated@@41 $generated@@42 ($generated@@23 $generated@@24 $generated@@43)))
))))
(assert (forall (($generated@@45 T@U) ($generated@@46 T@T) ) (! (= ($generated@@29 $generated@@46 ($generated@@44 $generated@@46 $generated@@45)) $generated@@45)
 :pattern ( ($generated@@44 $generated@@46 $generated@@45))
)))
(assert (= ($generated@@3 $generated@@47) 4))
(assert  (=> (<= 0 $generated@@20) (forall (($generated@@48 T@U) ($generated@@49 T@U) ($generated@@50 T@U) ) (!  (=> (or ($generated@@32 $generated@@48 ($generated@@23 $generated@@47 $generated@@49) ($generated@@23 $generated@@24 $generated@@50)) (and (< 0 $generated@@20) (and (and ($generated@@33 $generated@@49 $generated@@48) ($generated@@26 $generated@@24 $generated@@50 ($generated@@27 $generated@@48))) (or (= ($generated@@23 $generated@@47 $generated@@49) ($generated@@23 $generated@@47 $generated@@49)) ($generated@@34 ($generated@@23 $generated@@24 $generated@@50) ($generated@@23 $generated@@47 $generated@@49)))))) (= ($generated@@28 $generated@@48 ($generated@@23 $generated@@47 $generated@@49) ($generated@@23 $generated@@24 $generated@@50)) ($generated@@8 ($generated@@23 $generated@@4 ($generated@@7 false)))))
 :weight 3
 :pattern ( ($generated@@28 $generated@@48 ($generated@@23 $generated@@47 $generated@@49) ($generated@@23 $generated@@24 $generated@@50)))
))))
(assert  (=> (<= 1 $generated@@20) (forall (($generated@@51 Int) ($generated@@52 T@U) ) (!  (=> (or ($generated@@25 $generated@@51 $generated@@52) (and (< 1 $generated@@20) (and ($generated@@26 $generated@@24 $generated@@52 ($generated@@27 $generated)) ($generated@@28 $generated ($generated@@29 $generated@@5 ($generated@@9 $generated@@51)) $generated@@52)))) (= ($generated@@21 $generated@@51 $generated@@52) ($generated@@8 ($generated@@23 $generated@@4 ($generated@@7 false)))))
 :pattern ( ($generated@@21 $generated@@51 $generated@@52))
))))
(assert (forall (($generated@@53 T@U) ($generated@@54 T@U) ) (! (= ($generated@@26 $generated@@24 $generated@@53 ($generated@@27 $generated@@54)) (forall (($generated@@55 T@U) ) (!  (=> ($generated@@34 $generated@@53 $generated@@55) ($generated@@33 $generated@@55 $generated@@54))
 :pattern ( ($generated@@34 $generated@@53 $generated@@55))
)))
 :pattern ( ($generated@@26 $generated@@24 $generated@@53 ($generated@@27 $generated@@54)))
)))
(assert (forall (($generated@@58 T@U) ($generated@@59 T@U) ($generated@@60 T@U) ($generated@@61 T@T) ) (! (= ($generated@@56 ($generated@@29 $generated@@61 $generated@@58) $generated@@59 $generated@@60) ($generated@@57 $generated@@61 $generated@@58 $generated@@59 $generated@@60))
 :pattern ( ($generated@@56 ($generated@@29 $generated@@61 $generated@@58) $generated@@59 $generated@@60))
)))
(assert (forall (($generated@@62 T@U) ) (!  (=> ($generated@@33 $generated@@62 $generated) (and (= ($generated@@29 $generated@@5 ($generated@@44 $generated@@5 $generated@@62)) $generated@@62) ($generated@@26 $generated@@5 ($generated@@44 $generated@@5 $generated@@62) $generated)))
 :pattern ( ($generated@@33 $generated@@62 $generated))
)))
(assert (forall (($generated@@63 T@U) ($generated@@64 T@U) ($generated@@65 T@T) ) (! (= ($generated@@33 ($generated@@29 $generated@@65 $generated@@63) $generated@@64) ($generated@@26 $generated@@65 $generated@@63 $generated@@64))
 :pattern ( ($generated@@33 ($generated@@29 $generated@@65 $generated@@63) $generated@@64))
)))
(assert (forall (($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ) (! (= ($generated@@57 $generated@@24 $generated@@66 ($generated@@27 $generated@@67) $generated@@68) (forall (($generated@@69 T@U) ) (!  (=> ($generated@@34 $generated@@66 $generated@@69) ($generated@@56 $generated@@69 $generated@@67 $generated@@68))
 :pattern ( ($generated@@34 $generated@@66 $generated@@69))
)))
 :pattern ( ($generated@@57 $generated@@24 $generated@@66 ($generated@@27 $generated@@67) $generated@@68))
)))
(assert (forall (($generated@@71 T@U) ) (! (= ($generated@@70 ($generated@@27 $generated@@71)) $generated@@71)
 :pattern ( ($generated@@27 $generated@@71))
)))
(assert (forall (($generated@@72 T@U) ) (! (= ($generated@@19 ($generated@@27 $generated@@72)) $generated@@1)
 :pattern ( ($generated@@27 $generated@@72))
)))
(assert (forall (($generated@@73 T@U) ($generated@@74 T@T) ) (! (= ($generated@@44 $generated@@74 ($generated@@29 $generated@@74 $generated@@73)) $generated@@73)
 :pattern ( ($generated@@29 $generated@@74 $generated@@73))
)))
(assert  (and (and (and (and (and (and (and (and (forall (($generated@@85 T@T) ($generated@@86 T@T) ($generated@@87 T@T) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ) (! (= ($generated@@75 $generated@@85 $generated@@86 $generated@@87 ($generated@@81 $generated@@85 $generated@@86 $generated@@87 $generated@@89 $generated@@90 $generated@@91 $generated@@88) $generated@@90 $generated@@91) $generated@@88)
 :weight 0
)) (and (forall (($generated@@92 T@T) ($generated@@93 T@T) ($generated@@94 T@T) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ) (!  (or (= $generated@@97 $generated@@99) (= ($generated@@75 $generated@@92 $generated@@93 $generated@@94 ($generated@@81 $generated@@92 $generated@@93 $generated@@94 $generated@@96 $generated@@97 $generated@@98 $generated@@95) $generated@@99 $generated@@100) ($generated@@75 $generated@@92 $generated@@93 $generated@@94 $generated@@96 $generated@@99 $generated@@100)))
 :weight 0
)) (forall (($generated@@101 T@T) ($generated@@102 T@T) ($generated@@103 T@T) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ) (!  (or (= $generated@@107 $generated@@109) (= ($generated@@75 $generated@@101 $generated@@102 $generated@@103 ($generated@@81 $generated@@101 $generated@@102 $generated@@103 $generated@@105 $generated@@106 $generated@@107 $generated@@104) $generated@@108 $generated@@109) ($generated@@75 $generated@@101 $generated@@102 $generated@@103 $generated@@105 $generated@@108 $generated@@109)))
 :weight 0
)))) (= ($generated@@3 $generated@@76) 5)) (= ($generated@@3 $generated@@77) 6)) (forall (($generated@@110 T@T) ($generated@@111 T@T) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ) (! (= ($generated@@79 $generated@@110 $generated@@111 ($generated@@82 $generated@@110 $generated@@111 $generated@@113 $generated@@114 $generated@@112) $generated@@114) $generated@@112)
 :weight 0
))) (forall (($generated@@115 T@T) ($generated@@116 T@T) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (!  (or (= $generated@@119 $generated@@120) (= ($generated@@79 $generated@@115 $generated@@116 ($generated@@82 $generated@@115 $generated@@116 $generated@@118 $generated@@119 $generated@@117) $generated@@120) ($generated@@79 $generated@@115 $generated@@116 $generated@@118 $generated@@120)))
 :weight 0
))) (forall (($generated@@121 T@T) ($generated@@122 T@T) ) (= ($generated@@3 ($generated@@80 $generated@@121 $generated@@122)) 7))) (forall (($generated@@123 T@T) ($generated@@124 T@T) ) (! (= ($generated@@83 ($generated@@80 $generated@@123 $generated@@124)) $generated@@123)
 :pattern ( ($generated@@80 $generated@@123 $generated@@124))
))) (forall (($generated@@125 T@T) ($generated@@126 T@T) ) (! (= ($generated@@84 ($generated@@80 $generated@@125 $generated@@126)) $generated@@126)
 :pattern ( ($generated@@80 $generated@@125 $generated@@126))
))))
(assert (forall (($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 Bool) ($generated@@131 T@U) ($generated@@132 T@U) ) (! (= ($generated@@8 ($generated@@75 $generated@@76 $generated@@77 $generated@@4 ($generated@@78 $generated@@127 $generated@@128 $generated@@129 $generated@@130) $generated@@131 $generated@@132))  (=> (and (or (not (= $generated@@131 $generated@@127)) (not true)) ($generated@@8 ($generated@@44 $generated@@4 ($generated@@79 $generated@@77 $generated@@47 ($generated@@79 $generated@@76 ($generated@@80 $generated@@77 $generated@@47) $generated@@128 $generated@@131) $generated@@129)))) $generated@@130))
 :pattern ( ($generated@@75 $generated@@76 $generated@@77 $generated@@4 ($generated@@78 $generated@@127 $generated@@128 $generated@@129 $generated@@130) $generated@@131 $generated@@132))
)))
(assert (forall (($generated@@133 T@U) ($generated@@134 T@U) ) (!  (=> ($generated@@33 $generated@@133 ($generated@@27 $generated@@134)) (and (= ($generated@@29 $generated@@24 ($generated@@44 $generated@@24 $generated@@133)) $generated@@133) ($generated@@26 $generated@@24 ($generated@@44 $generated@@24 $generated@@133) ($generated@@27 $generated@@134))))
 :pattern ( ($generated@@33 $generated@@133 ($generated@@27 $generated@@134)))
)))
(assert (forall (($generated@@135 Int) ) (! (= ($generated@@29 $generated@@5 ($generated@@9 ($generated@@22 $generated@@135))) ($generated@@23 $generated@@47 ($generated@@29 $generated@@5 ($generated@@9 $generated@@135))))
 :pattern ( ($generated@@29 $generated@@5 ($generated@@9 ($generated@@22 $generated@@135))))
)))
(assert (forall (($generated@@136 T@U) ($generated@@137 T@T) ) (! (= ($generated@@29 $generated@@137 ($generated@@23 $generated@@137 $generated@@136)) ($generated@@23 $generated@@47 ($generated@@29 $generated@@137 $generated@@136)))
 :pattern ( ($generated@@29 $generated@@137 ($generated@@23 $generated@@137 $generated@@136)))
)))
(assert (forall (($generated@@138 T@U) ($generated@@139 T@U) ) (! ($generated@@57 $generated@@5 $generated@@139 $generated $generated@@138)
 :pattern ( ($generated@@57 $generated@@5 $generated@@139 $generated $generated@@138))
)))
(assert (forall (($generated@@140 T@U) ) (! ($generated@@26 $generated@@5 $generated@@140 $generated)
 :pattern ( ($generated@@26 $generated@@5 $generated@@140 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@141 () T@U)
(declare-fun $generated@@142 (T@U) T@U)
(declare-fun $generated@@143 () T@U)
(declare-fun $generated@@144 () T@U)
(declare-fun $generated@@145 (T@U) T@U)
(declare-fun $generated@@146 () T@U)
(declare-fun $generated@@147 () T@U)
(declare-fun $generated@@148 () T@U)
(declare-fun $generated@@149 () Int)
(declare-fun $generated@@150 () T@U)
(declare-fun $generated@@151 () Bool)
(declare-fun $generated@@152 (T@U) Bool)
(declare-fun $generated@@153 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 4) (let (($generated@@154  (=> (and (= $generated@@141 ($generated@@142 $generated@@143)) (= $generated@@144 ($generated@@142 ($generated@@142 $generated@@143)))) (=> (and (and (= ($generated@@145 $generated@@143) $generated@@143) (= $generated@@146 ($generated@@78 $generated@@147 $generated@@148 $generated@@2 false))) (and ($generated@@57 $generated@@5 ($generated@@9 $generated@@149) $generated $generated@@148) ($generated@@57 $generated@@24 $generated@@150 ($generated@@27 $generated) $generated@@148))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (or (= $generated@@149 $generated@@149) ($generated@@34 $generated@@150 ($generated@@29 $generated@@5 ($generated@@9 $generated@@149))))) (=> (or (= $generated@@149 $generated@@149) ($generated@@34 $generated@@150 ($generated@@29 $generated@@5 ($generated@@9 $generated@@149)))) (=> (and (and (and ($generated@@32 $generated ($generated@@29 $generated@@5 ($generated@@9 $generated@@149)) $generated@@150) ($generated@@32 $generated ($generated@@29 $generated@@5 ($generated@@9 $generated@@149)) $generated@@150)) (and (= $generated@@151 ($generated@@28 $generated ($generated@@29 $generated@@5 ($generated@@9 $generated@@149)) $generated@@150)) ($generated@@57 $generated@@5 ($generated@@9 $generated@@149) $generated $generated@@148))) (and (and ($generated@@57 $generated@@24 $generated@@150 ($generated@@27 $generated) $generated@@148) (= (ControlFlow 0 2) (- 0 1))) ($generated@@32 $generated ($generated@@29 $generated@@5 ($generated@@9 $generated@@149)) $generated@@150))) (or ($generated@@28 $generated ($generated@@29 $generated@@5 ($generated@@9 $generated@@149)) $generated@@150) ($generated@@8 ($generated@@23 $generated@@4 ($generated@@7 false)))))))))))
(let (($generated@@155  (=> (and ($generated@@152 $generated@@148) ($generated@@153 $generated@@148)) (=> (and (and (and ($generated@@26 $generated@@24 $generated@@150 ($generated@@27 $generated)) ($generated@@57 $generated@@24 $generated@@150 ($generated@@27 $generated) $generated@@148)) (= 2 $generated@@20)) (and (and ($generated@@32 $generated ($generated@@29 $generated@@5 ($generated@@9 $generated@@149)) $generated@@150) (and ($generated@@28 $generated ($generated@@29 $generated@@5 ($generated@@9 $generated@@149)) $generated@@150) ($generated@@8 ($generated@@23 $generated@@4 ($generated@@7 false))))) (= (ControlFlow 0 4) 2))) $generated@@154))))
$generated@@155)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
