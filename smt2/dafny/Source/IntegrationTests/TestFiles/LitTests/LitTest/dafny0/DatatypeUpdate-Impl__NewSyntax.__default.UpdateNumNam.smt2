(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 () T@U)
(declare-fun $generated@@9 (T@T) Int)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 () T@T)
(declare-fun $generated@@12 () T@T)
(declare-fun $generated@@13 (Bool) T@U)
(declare-fun $generated@@14 (T@U) Bool)
(declare-fun $generated@@15 (Int) T@U)
(declare-fun $generated@@16 (T@U) Int)
(declare-fun $generated@@17 (Real) T@U)
(declare-fun $generated@@18 (T@U) Real)
(declare-fun $generated@@25 (Int Real Bool) T@U)
(declare-fun $generated@@26 (T@U) Bool)
(declare-fun $generated@@30 (T@U) T@U)
(declare-fun $generated@@31 (T@U) Bool)
(declare-fun $generated@@32 (T@U) Bool)
(declare-fun $generated@@34 (T@U) T@U)
(declare-fun $generated@@38 (T@U) Int)
(declare-fun $generated@@42 (T@U) Real)
(declare-fun $generated@@46 (T@T T@U T@U) Bool)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 () T@U)
(declare-fun $generated@@54 (T@T T@U) T@U)
(declare-fun $generated@@55 (T@T T@U) T@U)
(declare-fun $generated@@64 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@65 () T@T)
(declare-fun $generated@@66 () T@T)
(declare-fun $generated@@67 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@68 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@69 () T@T)
(declare-fun $generated@@70 (T@T T@T) T@T)
(declare-fun $generated@@71 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@72 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@73 (T@T) T@T)
(declare-fun $generated@@74 (T@T) T@T)
(declare-fun $generated@@123 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@124 (T@U) Bool)
(declare-fun $generated@@133 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@9 $generated@@10) 0) (= ($generated@@9 $generated@@11) 1)) (= ($generated@@9 $generated@@12) 2)) (forall (($generated@@19 Bool) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 Int) ) (! (= ($generated@@16 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 T@U) ) (! (= ($generated@@15 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= ($generated@@18 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))) (forall (($generated@@24 T@U) ) (! (= ($generated@@17 ($generated@@18 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@18 $generated@@24))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7 $generated@@8)
)
(assert (forall (($generated@@27 Int) ($generated@@28 Real) ($generated@@29 Bool) ) (! (= ($generated@@26 ($generated@@25 $generated@@27 $generated@@28 $generated@@29)) $generated@@29)
 :pattern ( ($generated@@25 $generated@@27 $generated@@28 $generated@@29))
)))
(assert (= ($generated@@30 $generated) $generated@@2))
(assert (= ($generated@@30 $generated@@0) $generated@@3))
(assert (= ($generated@@30 $generated@@1) $generated@@4))
(assert (forall (($generated@@33 T@U) ) (!  (=> ($generated@@31 $generated@@33) ($generated@@32 $generated@@33))
 :pattern ( ($generated@@31 $generated@@33))
)))
(assert (forall (($generated@@35 Int) ($generated@@36 Real) ($generated@@37 Bool) ) (! (= ($generated@@34 ($generated@@25 $generated@@35 $generated@@36 $generated@@37)) $generated@@7)
 :pattern ( ($generated@@25 $generated@@35 $generated@@36 $generated@@37))
)))
(assert (forall (($generated@@39 Int) ($generated@@40 Real) ($generated@@41 Bool) ) (! (= ($generated@@38 ($generated@@25 $generated@@39 $generated@@40 $generated@@41)) $generated@@39)
 :pattern ( ($generated@@25 $generated@@39 $generated@@40 $generated@@41))
)))
(assert (forall (($generated@@43 Int) ($generated@@44 Real) ($generated@@45 Bool) ) (! (= ($generated@@42 ($generated@@25 $generated@@43 $generated@@44 $generated@@45)) $generated@@44)
 :pattern ( ($generated@@25 $generated@@43 $generated@@44 $generated@@45))
)))
(assert (= ($generated@@9 $generated@@47) 3))
(assert (forall (($generated@@49 T@U) ) (!  (=> ($generated@@46 $generated@@47 $generated@@49 $generated@@48) ($generated@@32 $generated@@49))
 :pattern ( ($generated@@32 $generated@@49) ($generated@@46 $generated@@47 $generated@@49 $generated@@48))
)))
(assert (forall (($generated@@50 Int) ($generated@@51 Real) ($generated@@52 Bool) ) (! (= ($generated@@46 $generated@@47 ($generated@@25 $generated@@50 $generated@@51 $generated@@52) $generated@@48)  (and (and ($generated@@46 $generated@@11 ($generated@@15 $generated@@50) $generated@@0) ($generated@@46 $generated@@12 ($generated@@17 $generated@@51) $generated@@1)) ($generated@@46 $generated@@10 ($generated@@13 $generated@@52) $generated)))
 :pattern ( ($generated@@46 $generated@@47 ($generated@@25 $generated@@50 $generated@@51 $generated@@52) $generated@@48))
)))
(assert (forall (($generated@@53 T@U) ) (! (= ($generated@@32 $generated@@53) (= ($generated@@34 $generated@@53) $generated@@7))
 :pattern ( ($generated@@32 $generated@@53))
)))
(assert (forall (($generated@@56 T@U) ($generated@@57 T@T) ) (! (= ($generated@@55 $generated@@57 ($generated@@54 $generated@@57 $generated@@56)) $generated@@56)
 :pattern ( ($generated@@54 $generated@@57 $generated@@56))
)))
(assert (forall (($generated@@58 T@U) ) (!  (=> ($generated@@32 $generated@@58) (exists (($generated@@59 Int) ($generated@@60 Real) ($generated@@61 Bool) ) (= $generated@@58 ($generated@@25 $generated@@59 $generated@@60 $generated@@61))))
 :pattern ( ($generated@@32 $generated@@58))
)))
(assert (forall (($generated@@62 T@U) ($generated@@63 T@T) ) (! (= ($generated@@54 $generated@@63 ($generated@@55 $generated@@63 $generated@@62)) $generated@@62)
 :pattern ( ($generated@@55 $generated@@63 $generated@@62))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@75 T@T) ($generated@@76 T@T) ($generated@@77 T@T) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ) (! (= ($generated@@64 $generated@@75 $generated@@76 $generated@@77 ($generated@@71 $generated@@75 $generated@@76 $generated@@77 $generated@@79 $generated@@80 $generated@@81 $generated@@78) $generated@@80 $generated@@81) $generated@@78)
 :weight 0
)) (and (forall (($generated@@82 T@T) ($generated@@83 T@T) ($generated@@84 T@T) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ) (!  (or (= $generated@@87 $generated@@89) (= ($generated@@64 $generated@@82 $generated@@83 $generated@@84 ($generated@@71 $generated@@82 $generated@@83 $generated@@84 $generated@@86 $generated@@87 $generated@@88 $generated@@85) $generated@@89 $generated@@90) ($generated@@64 $generated@@82 $generated@@83 $generated@@84 $generated@@86 $generated@@89 $generated@@90)))
 :weight 0
)) (forall (($generated@@91 T@T) ($generated@@92 T@T) ($generated@@93 T@T) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ) (!  (or (= $generated@@97 $generated@@99) (= ($generated@@64 $generated@@91 $generated@@92 $generated@@93 ($generated@@71 $generated@@91 $generated@@92 $generated@@93 $generated@@95 $generated@@96 $generated@@97 $generated@@94) $generated@@98 $generated@@99) ($generated@@64 $generated@@91 $generated@@92 $generated@@93 $generated@@95 $generated@@98 $generated@@99)))
 :weight 0
)))) (= ($generated@@9 $generated@@65) 4)) (= ($generated@@9 $generated@@66) 5)) (forall (($generated@@100 T@T) ($generated@@101 T@T) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ) (! (= ($generated@@68 $generated@@100 $generated@@101 ($generated@@72 $generated@@100 $generated@@101 $generated@@103 $generated@@104 $generated@@102) $generated@@104) $generated@@102)
 :weight 0
))) (forall (($generated@@105 T@T) ($generated@@106 T@T) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ) (!  (or (= $generated@@109 $generated@@110) (= ($generated@@68 $generated@@105 $generated@@106 ($generated@@72 $generated@@105 $generated@@106 $generated@@108 $generated@@109 $generated@@107) $generated@@110) ($generated@@68 $generated@@105 $generated@@106 $generated@@108 $generated@@110)))
 :weight 0
))) (= ($generated@@9 $generated@@69) 6)) (forall (($generated@@111 T@T) ($generated@@112 T@T) ) (= ($generated@@9 ($generated@@70 $generated@@111 $generated@@112)) 7))) (forall (($generated@@113 T@T) ($generated@@114 T@T) ) (! (= ($generated@@73 ($generated@@70 $generated@@113 $generated@@114)) $generated@@113)
 :pattern ( ($generated@@70 $generated@@113 $generated@@114))
))) (forall (($generated@@115 T@T) ($generated@@116 T@T) ) (! (= ($generated@@74 ($generated@@70 $generated@@115 $generated@@116)) $generated@@116)
 :pattern ( ($generated@@70 $generated@@115 $generated@@116))
))))
(assert (forall (($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 Bool) ($generated@@121 T@U) ($generated@@122 T@U) ) (! (= ($generated@@14 ($generated@@64 $generated@@65 $generated@@66 $generated@@10 ($generated@@67 $generated@@117 $generated@@118 $generated@@119 $generated@@120) $generated@@121 $generated@@122))  (=> (and (or (not (= $generated@@121 $generated@@117)) (not true)) ($generated@@14 ($generated@@54 $generated@@10 ($generated@@68 $generated@@66 $generated@@69 ($generated@@68 $generated@@65 ($generated@@70 $generated@@66 $generated@@69) $generated@@118 $generated@@121) $generated@@119)))) $generated@@120))
 :pattern ( ($generated@@64 $generated@@65 $generated@@66 $generated@@10 ($generated@@67 $generated@@117 $generated@@118 $generated@@119 $generated@@120) $generated@@121 $generated@@122))
)))
(assert (forall (($generated@@125 T@U) ($generated@@126 T@U) ) (!  (=> (and ($generated@@124 $generated@@126) (and ($generated@@32 $generated@@125) ($generated@@123 $generated@@47 $generated@@125 $generated@@48 $generated@@126))) ($generated@@123 $generated@@11 ($generated@@15 ($generated@@38 $generated@@125)) $generated@@0 $generated@@126))
 :pattern ( ($generated@@123 $generated@@11 ($generated@@15 ($generated@@38 $generated@@125)) $generated@@0 $generated@@126))
)))
(assert (forall (($generated@@127 T@U) ($generated@@128 T@U) ) (!  (=> (and ($generated@@124 $generated@@128) (and ($generated@@32 $generated@@127) ($generated@@123 $generated@@47 $generated@@127 $generated@@48 $generated@@128))) ($generated@@123 $generated@@12 ($generated@@17 ($generated@@42 $generated@@127)) $generated@@1 $generated@@128))
 :pattern ( ($generated@@123 $generated@@12 ($generated@@17 ($generated@@42 $generated@@127)) $generated@@1 $generated@@128))
)))
(assert (forall (($generated@@129 T@U) ($generated@@130 T@U) ) (!  (=> (and ($generated@@124 $generated@@130) (and ($generated@@32 $generated@@129) ($generated@@123 $generated@@47 $generated@@129 $generated@@48 $generated@@130))) ($generated@@123 $generated@@10 ($generated@@13 ($generated@@26 $generated@@129)) $generated $generated@@130))
 :pattern ( ($generated@@123 $generated@@10 ($generated@@13 ($generated@@26 $generated@@129)) $generated $generated@@130))
)))
(assert (forall (($generated@@131 T@U) ($generated@@132 T@U) ) (!  (=> (and ($generated@@124 $generated@@132) ($generated@@46 $generated@@47 $generated@@131 $generated@@48)) ($generated@@123 $generated@@47 $generated@@131 $generated@@48 $generated@@132))
 :pattern ( ($generated@@123 $generated@@47 $generated@@131 $generated@@48 $generated@@132))
)))
(assert (= ($generated@@30 $generated@@48) $generated@@6))
(assert (= ($generated@@133 $generated@@48) $generated@@8))
(assert (forall (($generated@@134 T@U) ($generated@@135 T@U) ) (! ($generated@@123 $generated@@11 $generated@@135 $generated@@0 $generated@@134)
 :pattern ( ($generated@@123 $generated@@11 $generated@@135 $generated@@0 $generated@@134))
)))
(assert (forall (($generated@@136 T@U) ($generated@@137 T@U) ) (! ($generated@@123 $generated@@12 $generated@@137 $generated@@1 $generated@@136)
 :pattern ( ($generated@@123 $generated@@12 $generated@@137 $generated@@1 $generated@@136))
)))
(assert (forall (($generated@@138 T@U) ($generated@@139 T@U) ) (! ($generated@@123 $generated@@10 $generated@@139 $generated $generated@@138)
 :pattern ( ($generated@@123 $generated@@10 $generated@@139 $generated $generated@@138))
)))
(assert (forall (($generated@@140 T@U) ) (! ($generated@@46 $generated@@11 $generated@@140 $generated@@0)
 :pattern ( ($generated@@46 $generated@@11 $generated@@140 $generated@@0))
)))
(assert (forall (($generated@@141 T@U) ) (! ($generated@@46 $generated@@12 $generated@@141 $generated@@1)
 :pattern ( ($generated@@46 $generated@@12 $generated@@141 $generated@@1))
)))
(assert (forall (($generated@@142 T@U) ) (! ($generated@@46 $generated@@10 $generated@@142 $generated)
 :pattern ( ($generated@@46 $generated@@10 $generated@@142 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@143 () T@U)
(declare-fun $generated@@144 () T@U)
(declare-fun $generated@@145 () T@U)
(declare-fun $generated@@146 () T@U)
(declare-fun $generated@@147 () T@U)
(declare-fun $generated@@148 () T@U)
(declare-fun $generated@@149 () Int)
(declare-fun $generated@@150 () Int)
(declare-fun $generated@@151 () Int)
(declare-fun $generated@@152 () T@U)
(declare-fun $generated@@153 (T@U) Bool)
(declare-fun $generated@@154 () T@U)
(declare-fun $generated@@155 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 4) (let (($generated@@156  (=> (= $generated@@143 ($generated@@67 $generated@@144 $generated@@145 $generated@@5 false)) (=> (and (= $generated@@146 $generated@@147) ($generated@@46 $generated@@47 $generated@@146 $generated@@48)) (=> (and (and (and (= $generated@@148 $generated@@146) (= $generated@@149 $generated@@150)) (and ($generated@@46 $generated@@11 ($generated@@15 $generated@@149) $generated@@0) (= $generated@@151 $generated@@149))) (and (and ($generated@@32 $generated@@148) ($generated@@32 $generated@@148)) (and (let (($generated@@157 $generated@@147))
 (and ($generated@@32 $generated@@157) ($generated@@32 $generated@@157))) (= $generated@@152 (let (($generated@@158 $generated@@147))
(let (($generated@@159 $generated@@150))
($generated@@25 $generated@@159 ($generated@@42 $generated@@158) ($generated@@26 $generated@@158)))))))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (= ($generated@@42 $generated@@152) ($generated@@42 $generated@@147))) (=> (= ($generated@@42 $generated@@152) ($generated@@42 $generated@@147)) (=> (= (ControlFlow 0 2) (- 0 1)) (= ($generated@@38 $generated@@152) $generated@@150)))))))))
(let (($generated@@160  (=> (and ($generated@@124 $generated@@145) ($generated@@153 $generated@@145)) (=> (and (and (and ($generated@@46 $generated@@47 $generated@@147 $generated@@48) ($generated@@123 $generated@@47 $generated@@147 $generated@@48 $generated@@145)) ($generated@@31 $generated@@147)) (and (and ($generated@@46 $generated@@47 $generated@@154 $generated@@48) ($generated@@123 $generated@@47 $generated@@154 $generated@@48 $generated@@145)) (and (= 1 $generated@@155) (= (ControlFlow 0 4) 2)))) $generated@@156))))
$generated@@160)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
