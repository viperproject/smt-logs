(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TReal () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagReal () T@U)
(declare-fun alloc () T@U)
(declare-fun allocName () T@U)
(declare-fun Tagclass.XJ.Cell () T@U)
(declare-fun Tagclass.XJ.Cell? () T@U)
(declare-fun class.XJ.Cell? () T@U)
(declare-fun tytagFamily$Cell () T@U)
(declare-fun field$data () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun FDim (T@U) Int)
(declare-fun Tag (T@U) T@U)
(declare-fun DeclName (T@U) T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun Tclass.XJ.Cell? () T@U)
(declare-fun null () T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass.XJ.Cell () T@U)
(declare-fun XJ.Cell.data () T@U)
(declare-fun FieldOfDecl (T@U T@U) T@U)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun LitInt (Int) Int)
(declare-fun LitReal (Real) Real)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun XJ.__default.Z (Real) Bool)
(declare-fun |XJ.__default.Z#canCall| (Real) Bool)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun DeclType (T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TReal TagInt TagReal alloc allocName Tagclass.XJ.Cell Tagclass.XJ.Cell? class.XJ.Cell? tytagFamily$Cell field$data)
)
(assert (= (FDim alloc) 0))
(assert (= (Tag TInt) TagInt))
(assert (= (Tag TReal) TagReal))
(assert (= (DeclName alloc) allocName))
(assert (= (Ctor refType) 3))
(assert (forall (($o T@U) ) (! (= ($Is refType $o Tclass.XJ.Cell?)  (or (= $o null) (= (dtype $o) Tclass.XJ.Cell?)))
 :pattern ( ($Is refType $o Tclass.XJ.Cell?))
)))
(assert (forall ((|c#0| T@U) ($h T@U) ) (! (= ($IsAlloc refType |c#0| Tclass.XJ.Cell $h) ($IsAlloc refType |c#0| Tclass.XJ.Cell? $h))
 :pattern ( ($IsAlloc refType |c#0| Tclass.XJ.Cell $h))
 :pattern ( ($IsAlloc refType |c#0| Tclass.XJ.Cell? $h))
)))
(assert (= (FDim XJ.Cell.data) 0))
(assert (= (FieldOfDecl class.XJ.Cell? field$data) XJ.Cell.data))
(assert  (not ($IsGhostField XJ.Cell.data)))
(assert  (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 4)) (= (Ctor BoxType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 6))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall (($o@@0 T@U) ($h@@0 T@U) ) (! (= ($IsAlloc refType $o@@0 Tclass.XJ.Cell? $h@@0)  (or (= $o@@0 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@0 $o@@0) alloc)))))
 :pattern ( ($IsAlloc refType $o@@0 Tclass.XJ.Cell? $h@@0))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 Real) ) (! (= (LitReal x@@3) x@@3)
 :pattern ( (LitReal x@@3))
)))
(assert (forall ((x@@4 T@U) (T T@T) ) (! (= (Lit T x@@4) x@@4)
 :pattern ( (Lit T x@@4))
)))
(assert (forall ((x@@5 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@5)) x@@5)
 :pattern ( ($Unbox T@@0 x@@5))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|z#0| Real) ) (!  (=> (or (|XJ.__default.Z#canCall| |z#0|) (< 0 $FunctionContextHeight)) (= (XJ.__default.Z |z#0|) (= |z#0| (LitReal 3.14))))
 :pattern ( (XJ.__default.Z |z#0|))
))))
(assert ($IsGhostField alloc))
(assert (forall (($h@@1 T@U) ($o@@1 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@1) (and (or (not (= $o@@1 null)) (not true)) (= (dtype $o@@1) Tclass.XJ.Cell?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@1 $o@@1) alloc)))) ($IsAlloc intType ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@1 $o@@1) XJ.Cell.data)) TInt $h@@1))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@1 $o@@1) XJ.Cell.data)))
)))
(assert (forall ((|c#0@@0| T@U) ) (! (= ($Is refType |c#0@@0| Tclass.XJ.Cell)  (and ($Is refType |c#0@@0| Tclass.XJ.Cell?) (or (not (= |c#0@@0| null)) (not true))))
 :pattern ( ($Is refType |c#0@@0| Tclass.XJ.Cell))
 :pattern ( ($Is refType |c#0@@0| Tclass.XJ.Cell?))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|z#0@@0| Real) ) (!  (=> (or (|XJ.__default.Z#canCall| (LitReal |z#0@@0|)) (< 0 $FunctionContextHeight)) (= (XJ.__default.Z (LitReal |z#0@@0|)) (= (LitReal |z#0@@0|) (LitReal 3.14))))
 :weight 3
 :pattern ( (XJ.__default.Z (LitReal |z#0@@0|)))
))))
(assert (forall ((cl T@U) (nm T@U) ) (!  (and (= (DeclType (FieldOfDecl cl nm)) cl) (= (DeclName (FieldOfDecl cl nm)) nm))
 :pattern ( (FieldOfDecl cl nm))
)))
(assert (forall ((x@@6 T@U) (T@@1 T@T) ) (! (= ($Unbox T@@1 ($Box T@@1 x@@6)) x@@6)
 :pattern ( ($Box T@@1 x@@6))
)))
(assert (forall (($h@@2 T@U) ($o@@2 T@U) ) (!  (=> (and ($IsGoodHeap $h@@2) (and (or (not (= $o@@2 null)) (not true)) (= (dtype $o@@2) Tclass.XJ.Cell?))) ($Is intType ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o@@2) XJ.Cell.data)) TInt))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o@@2) XJ.Cell.data)))
)))
(assert  (and (forall ((t0@@0 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 t2 (MapType1Store t0@@0 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o@@3 T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@3 $f))  (=> (and (or (not (= $o@@3 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@3) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@3 $f))
)))
(assert (= (Tag Tclass.XJ.Cell) Tagclass.XJ.Cell))
(assert (= (TagFamily Tclass.XJ.Cell) tytagFamily$Cell))
(assert (= (Tag Tclass.XJ.Cell?) Tagclass.XJ.Cell?))
(assert (= (TagFamily Tclass.XJ.Cell?) tytagFamily$Cell))
(assert (forall ((x@@7 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@7))) (Lit BoxType ($Box intType (int_2_U x@@7))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@7))))
)))
(assert (forall ((x@@8 Real) ) (! (= ($Box realType (real_2_U (LitReal x@@8))) (Lit BoxType ($Box realType (real_2_U x@@8))))
 :pattern ( ($Box realType (real_2_U (LitReal x@@8))))
)))
(assert (forall ((x@@9 T@U) (T@@2 T@T) ) (! (= ($Box T@@2 (Lit T@@2 x@@9)) (Lit BoxType ($Box T@@2 x@@9)))
 :pattern ( ($Box T@@2 (Lit T@@2 x@@9)))
)))
(assert (forall ((h T@U) (v T@U) ) (! ($IsAlloc intType v TInt h)
 :pattern ( ($IsAlloc intType v TInt h))
)))
(assert (forall ((h@@0 T@U) (v@@0 T@U) ) (! ($IsAlloc realType v@@0 TReal h@@0)
 :pattern ( ($IsAlloc realType v@@0 TReal h@@0))
)))
(assert (forall ((v@@1 T@U) ) (! ($Is intType v@@1 TInt)
 :pattern ( ($Is intType v@@1 TInt))
)))
(assert (forall ((v@@2 T@U) ) (! ($Is realType v@@2 TReal)
 :pattern ( ($Is realType v@@2 TReal))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |z#1@0| () Real)
(declare-fun $Heap () T@U)
(declare-fun |y'4#0@0| () T@U)
(declare-fun |y'4#1@0| () T@U)
(declare-fun |k#0| () Int)
(declare-fun |y'3#0@0| () T@U)
(declare-fun |y'3#1@0| () T@U)
(declare-fun |y''#0@0| () T@U)
(declare-fun |y''#1@0| () T@U)
(declare-fun |y'#0@0| () T@U)
(declare-fun |y'#1@0| () T@U)
(declare-fun |y#0@0| () T@U)
(declare-fun |y#1@0| () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |seven#0| () T@U)
(declare-fun |defass#y#0| () Bool)
(declare-fun |y#0| () T@U)
(declare-fun |y'#0| () T@U)
(declare-fun |defass#y''#0| () Bool)
(declare-fun |y''#0| () T@U)
(declare-fun |defass#y'3#0| () Bool)
(declare-fun |y'3#0| () T@U)
(declare-fun |defass#y'4#0| () Bool)
(declare-fun |y'4#0| () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 30) (let ((anon21_Else_correct true))
(let ((anon21_Then_correct  (=> (and (and ($IsAlloc realType (real_2_U |z#1@0|) TReal $Heap) (|XJ.__default.Z#canCall| |z#1@0|)) (and (|XJ.__default.Z#canCall| |z#1@0|) (= (ControlFlow 0 2) (- 0 1)))) (or (and ($Is realType (real_2_U (LitReal 0.0)) TReal) (U_2_bool (Lit boolType (bool_2_U (XJ.__default.Z (LitReal 0.0)))))) (exists ((|$as#z0#0| Real) ) (XJ.__default.Z |$as#z0#0|))))))
(let ((anon12_correct  (and (=> (= (ControlFlow 0 4) (- 0 5)) (or (and ($Is refType null Tclass.XJ.Cell) (U_2_bool (Lit boolType (bool_2_U false)))) (exists ((|$as#y'40#0| T@U) )  (and (and ($Is refType |$as#y'40#0| Tclass.XJ.Cell) ($IsAlloc refType |$as#y'40#0| Tclass.XJ.Cell $Heap)) (U_2_bool (Lit boolType (bool_2_U false))))))) (=> (or (and ($Is refType null Tclass.XJ.Cell) (U_2_bool (Lit boolType (bool_2_U false)))) (exists ((|$as#y'40#0@@0| T@U) )  (and (and ($Is refType |$as#y'40#0@@0| Tclass.XJ.Cell) ($IsAlloc refType |$as#y'40#0@@0| Tclass.XJ.Cell $Heap)) (U_2_bool (Lit boolType (bool_2_U false)))))) (=> (and (=> true (and ($Is refType |y'4#0@0| Tclass.XJ.Cell) ($IsAlloc refType |y'4#0@0| Tclass.XJ.Cell $Heap))) (U_2_bool (Lit boolType (bool_2_U false)))) (and (=> (= (ControlFlow 0 4) 2) anon21_Then_correct) (=> (= (ControlFlow 0 4) 3) anon21_Else_correct)))))))
(let ((anon20_Else_correct  (=> (and (not (and ($Is refType |y'4#1@0| Tclass.XJ.Cell) ($IsAlloc refType |y'4#1@0| Tclass.XJ.Cell $Heap))) (= (ControlFlow 0 7) 4)) anon12_correct)))
(let ((anon20_Then_correct  (=> (and (and ($Is refType |y'4#1@0| Tclass.XJ.Cell) ($IsAlloc refType |y'4#1@0| Tclass.XJ.Cell $Heap)) (= (ControlFlow 0 6) 4)) anon12_correct)))
(let ((anon10_correct  (and (=> (= (ControlFlow 0 8) (- 0 9)) (or (and ($Is refType null Tclass.XJ.Cell) (= |k#0| (LitInt 113))) (exists ((|$as#y'30#0| T@U) )  (and (and ($Is refType |$as#y'30#0| Tclass.XJ.Cell) ($IsAlloc refType |$as#y'30#0| Tclass.XJ.Cell $Heap)) (= |k#0| (LitInt 113)))))) (=> (or (and ($Is refType null Tclass.XJ.Cell) (= |k#0| (LitInt 113))) (exists ((|$as#y'30#0@@0| T@U) )  (and (and ($Is refType |$as#y'30#0@@0| Tclass.XJ.Cell) ($IsAlloc refType |$as#y'30#0@@0| Tclass.XJ.Cell $Heap)) (= |k#0| (LitInt 113))))) (=> (and (=> true (and ($Is refType |y'3#0@0| Tclass.XJ.Cell) ($IsAlloc refType |y'3#0@0| Tclass.XJ.Cell $Heap))) (= |k#0| (LitInt 113))) (and (=> (= (ControlFlow 0 8) 6) anon20_Then_correct) (=> (= (ControlFlow 0 8) 7) anon20_Else_correct)))))))
(let ((anon19_Else_correct  (=> (and (not (and ($Is refType |y'3#1@0| Tclass.XJ.Cell) ($IsAlloc refType |y'3#1@0| Tclass.XJ.Cell $Heap))) (= (ControlFlow 0 11) 8)) anon10_correct)))
(let ((anon19_Then_correct  (=> (and (and ($Is refType |y'3#1@0| Tclass.XJ.Cell) ($IsAlloc refType |y'3#1@0| Tclass.XJ.Cell $Heap)) (= (ControlFlow 0 10) 8)) anon10_correct)))
(let ((anon8_correct  (and (=> (= (ControlFlow 0 12) (- 0 13)) (or (and ($Is refType null Tclass.XJ.Cell) (U_2_bool (Lit boolType (bool_2_U true)))) (exists ((|$as#y''0#0| T@U) )  (and (and ($Is refType |$as#y''0#0| Tclass.XJ.Cell) ($IsAlloc refType |$as#y''0#0| Tclass.XJ.Cell $Heap)) (U_2_bool (Lit boolType (bool_2_U true))))))) (=> (or (and ($Is refType null Tclass.XJ.Cell) (U_2_bool (Lit boolType (bool_2_U true)))) (exists ((|$as#y''0#0@@0| T@U) )  (and (and ($Is refType |$as#y''0#0@@0| Tclass.XJ.Cell) ($IsAlloc refType |$as#y''0#0@@0| Tclass.XJ.Cell $Heap)) (U_2_bool (Lit boolType (bool_2_U true)))))) (=> (=> true (and ($Is refType |y''#0@0| Tclass.XJ.Cell) ($IsAlloc refType |y''#0@0| Tclass.XJ.Cell $Heap))) (and (=> (= (ControlFlow 0 12) 10) anon19_Then_correct) (=> (= (ControlFlow 0 12) 11) anon19_Else_correct)))))))
(let ((anon18_Else_correct  (=> (and (not (and ($Is refType |y''#1@0| Tclass.XJ.Cell) ($IsAlloc refType |y''#1@0| Tclass.XJ.Cell $Heap))) (= (ControlFlow 0 15) 12)) anon8_correct)))
(let ((anon18_Then_correct  (=> (and (and ($Is refType |y''#1@0| Tclass.XJ.Cell) ($IsAlloc refType |y''#1@0| Tclass.XJ.Cell $Heap)) (= (ControlFlow 0 14) 12)) anon8_correct)))
(let ((anon6_correct  (and (=> (= (ControlFlow 0 16) (- 0 17)) (or (and ($Is refType null Tclass.XJ.Cell?) (or (= null null) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap null) XJ.Cell.data))) (LitInt 8)))) (exists ((|$as#y'0#0| T@U) )  (and (and ($Is refType |$as#y'0#0| Tclass.XJ.Cell?) ($IsAlloc refType |$as#y'0#0| Tclass.XJ.Cell? $Heap)) (or (= |$as#y'0#0| null) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |$as#y'0#0|) XJ.Cell.data))) (LitInt 8))))))) (=> (or (and ($Is refType null Tclass.XJ.Cell?) (or (= null null) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap null) XJ.Cell.data))) (LitInt 8)))) (exists ((|$as#y'0#0@@0| T@U) )  (and (and ($Is refType |$as#y'0#0@@0| Tclass.XJ.Cell?) ($IsAlloc refType |$as#y'0#0@@0| Tclass.XJ.Cell? $Heap)) (or (= |$as#y'0#0@@0| null) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |$as#y'0#0@@0|) XJ.Cell.data))) (LitInt 8)))))) (=> (and (and ($Is refType |y'#0@0| Tclass.XJ.Cell?) ($IsAlloc refType |y'#0@0| Tclass.XJ.Cell? $Heap)) (or (= |y'#0@0| null) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |y'#0@0|) XJ.Cell.data))) (LitInt 8)))) (and (=> (= (ControlFlow 0 16) 14) anon18_Then_correct) (=> (= (ControlFlow 0 16) 15) anon18_Else_correct)))))))
(let ((anon5_correct  (=> (= (ControlFlow 0 19) 16) anon6_correct)))
(let ((anon17_Else_correct  (=> (and (= |y'#1@0| null) (= (ControlFlow 0 22) 19)) anon5_correct)))
(let ((anon17_Then_correct  (=> (or (not (= |y'#1@0| null)) (not true)) (and (=> (= (ControlFlow 0 20) (- 0 21)) (or (not (= |y'#1@0| null)) (not true))) (=> (= (ControlFlow 0 20) 19) anon5_correct)))))
(let ((anon16_Then_correct  (=> (and ($Is refType |y'#1@0| Tclass.XJ.Cell?) ($IsAlloc refType |y'#1@0| Tclass.XJ.Cell? $Heap)) (and (=> (= (ControlFlow 0 23) 20) anon17_Then_correct) (=> (= (ControlFlow 0 23) 22) anon17_Else_correct)))))
(let ((anon16_Else_correct  (=> (and (not (and ($Is refType |y'#1@0| Tclass.XJ.Cell?) ($IsAlloc refType |y'#1@0| Tclass.XJ.Cell? $Heap))) (= (ControlFlow 0 18) 16)) anon6_correct)))
(let ((anon2_correct  (and (=> (= (ControlFlow 0 24) (- 0 25)) (or (and ($Is refType null Tclass.XJ.Cell) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap null) XJ.Cell.data))) (LitInt 7))) (exists ((|$as#y0#0| T@U) )  (and (and ($Is refType |$as#y0#0| Tclass.XJ.Cell) ($IsAlloc refType |$as#y0#0| Tclass.XJ.Cell $Heap)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |$as#y0#0|) XJ.Cell.data))) (LitInt 7)))))) (=> (or (and ($Is refType null Tclass.XJ.Cell) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap null) XJ.Cell.data))) (LitInt 7))) (exists ((|$as#y0#0@@0| T@U) )  (and (and ($Is refType |$as#y0#0@@0| Tclass.XJ.Cell) ($IsAlloc refType |$as#y0#0@@0| Tclass.XJ.Cell $Heap)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |$as#y0#0@@0|) XJ.Cell.data))) (LitInt 7))))) (=> (and (=> true (and ($Is refType |y#0@0| Tclass.XJ.Cell) ($IsAlloc refType |y#0@0| Tclass.XJ.Cell $Heap))) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |y#0@0|) XJ.Cell.data))) (LitInt 7))) (and (=> (= (ControlFlow 0 24) 23) anon16_Then_correct) (=> (= (ControlFlow 0 24) 18) anon16_Else_correct)))))))
(let ((anon15_Else_correct  (=> (and (not (and ($Is refType |y#1@0| Tclass.XJ.Cell) ($IsAlloc refType |y#1@0| Tclass.XJ.Cell $Heap))) (= (ControlFlow 0 28) 24)) anon2_correct)))
(let ((anon15_Then_correct  (=> (and ($Is refType |y#1@0| Tclass.XJ.Cell) ($IsAlloc refType |y#1@0| Tclass.XJ.Cell $Heap)) (and (=> (= (ControlFlow 0 26) (- 0 27)) (or (not (= |y#1@0| null)) (not true))) (=> (= (ControlFlow 0 26) 24) anon2_correct)))))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (and (=> (= (ControlFlow 0 29) 26) anon15_Then_correct) (=> (= (ControlFlow 0 29) 28) anon15_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (=> (and (and ($Is refType |seven#0| Tclass.XJ.Cell) ($IsAlloc refType |seven#0| Tclass.XJ.Cell $Heap)) (and (=> |defass#y#0| (and ($Is refType |y#0| Tclass.XJ.Cell) ($IsAlloc refType |y#0| Tclass.XJ.Cell $Heap))) true)) (=> (and (and (and (and ($Is refType |y'#0| Tclass.XJ.Cell?) ($IsAlloc refType |y'#0| Tclass.XJ.Cell? $Heap)) true) (and (and (=> |defass#y''#0| (and ($Is refType |y''#0| Tclass.XJ.Cell) ($IsAlloc refType |y''#0| Tclass.XJ.Cell $Heap))) true) (and (=> |defass#y'3#0| (and ($Is refType |y'3#0| Tclass.XJ.Cell) ($IsAlloc refType |y'3#0| Tclass.XJ.Cell $Heap))) true))) (and (and (and (=> |defass#y'4#0| (and ($Is refType |y'4#0| Tclass.XJ.Cell) ($IsAlloc refType |y'4#0| Tclass.XJ.Cell $Heap))) true) (= 1 $FunctionContextHeight)) (and (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |seven#0|) XJ.Cell.data))) (LitInt 7)) (= (ControlFlow 0 30) 29)))) anon0_correct)))))
PreconditionGeneratedEntry_correct)))))))))))))))))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 8) (- 9))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 4) (- 5))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
