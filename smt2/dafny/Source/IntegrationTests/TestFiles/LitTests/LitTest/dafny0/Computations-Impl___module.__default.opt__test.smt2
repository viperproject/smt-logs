(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 (T@T) Int)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (T@U) Bool)
(declare-fun $generated@@13 (Int) T@U)
(declare-fun $generated@@14 (T@U) Int)
(declare-fun $generated@@15 (Real) T@U)
(declare-fun $generated@@16 (T@U) Real)
(declare-fun $generated@@23 (T@U) T@U)
(declare-fun $generated@@24 (T@T T@U T@U) Bool)
(declare-fun $generated@@25 () T@T)
(declare-fun $generated@@26 (T@U T@U) T@U)
(declare-fun $generated@@27 () T@U)
(declare-fun $generated@@30 (T@U T@U) Bool)
(declare-fun $generated@@31 (T@U) Bool)
(declare-fun $generated@@32 (T@U) Int)
(declare-fun $generated@@35 (T@U) Bool)
(declare-fun $generated@@36 (T@U) Int)
(declare-fun $generated@@39 () Int)
(declare-fun $generated@@40 (T@U T@U) T@U)
(declare-fun $generated@@41 (T@U) T@U)
(declare-fun $generated@@42 (T@T T@U) T@U)
(declare-fun $generated@@43 (T@U) Bool)
(declare-fun $generated@@44 (T@U) Bool)
(declare-fun $generated@@45 (T@U) T@U)
(declare-fun $generated@@46 (T@U) T@U)
(declare-fun $generated@@47 (Int) Int)
(declare-fun $generated@@59 (T@U) T@U)
(declare-fun $generated@@63 (T@T T@U) T@U)
(declare-fun $generated@@64 (T@T T@U) T@U)
(declare-fun $generated@@70 (Int) T@U)
(declare-fun $generated@@73 (Int) T@U)
(declare-fun $generated@@98 (T@U) Int)
(declare-fun $generated@@107 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@108 () T@T)
(declare-fun $generated@@109 () T@T)
(declare-fun $generated@@110 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@111 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@112 () T@T)
(declare-fun $generated@@113 (T@T T@T) T@T)
(declare-fun $generated@@114 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@115 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@116 (T@T) T@T)
(declare-fun $generated@@117 (T@T) T@T)
(declare-fun $generated@@167 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@7 $generated@@8) 0) (= ($generated@@7 $generated@@9) 1)) (= ($generated@@7 $generated@@10) 2)) (forall (($generated@@17 Bool) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Int) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@16 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 T@U) ) (! (= ($generated@@15 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6)
)
(assert (= ($generated@@23 $generated) $generated@@0))
(assert (= ($generated@@7 $generated@@25) 3))
(assert (forall (($generated@@28 T@U) ($generated@@29 T@U) ) (! (= ($generated@@24 $generated@@25 ($generated@@26 $generated@@28 $generated@@29) $generated@@27)  (and ($generated@@24 $generated@@25 $generated@@28 $generated@@27) ($generated@@24 $generated@@25 $generated@@29 $generated@@27)))
 :pattern ( ($generated@@24 $generated@@25 ($generated@@26 $generated@@28 $generated@@29) $generated@@27))
)))
(assert (forall (($generated@@33 T@U) ($generated@@34 T@U) ) (!  (=> (and ($generated@@31 $generated@@33) ($generated@@31 $generated@@34)) (= ($generated@@30 $generated@@33 $generated@@34) (= ($generated@@32 $generated@@33) ($generated@@32 $generated@@34))))
 :pattern ( ($generated@@30 $generated@@33 $generated@@34) ($generated@@31 $generated@@33))
 :pattern ( ($generated@@30 $generated@@33 $generated@@34) ($generated@@31 $generated@@34))
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ) (!  (=> (and ($generated@@35 $generated@@37) ($generated@@35 $generated@@38)) (= ($generated@@30 $generated@@37 $generated@@38) (= ($generated@@36 $generated@@37) ($generated@@36 $generated@@38))))
 :pattern ( ($generated@@30 $generated@@37 $generated@@38) ($generated@@35 $generated@@37))
 :pattern ( ($generated@@30 $generated@@37 $generated@@38) ($generated@@35 $generated@@38))
)))
(assert  (=> (<= 1 $generated@@39) (forall (($generated@@48 T@U) ($generated@@49 T@U) ) (!  (=> (or ($generated@@43 ($generated@@42 $generated@@25 $generated@@49)) (and (< 1 $generated@@39) ($generated@@24 $generated@@25 $generated@@49 $generated@@27))) (and (=> ($generated@@12 ($generated@@42 $generated@@8 ($generated@@11 ($generated@@44 ($generated@@42 $generated@@25 $generated@@49))))) (let (($generated@@50 ($generated@@42 $generated@@25 ($generated@@45 ($generated@@42 $generated@@25 $generated@@49)))))
($generated@@43 $generated@@50))) (= ($generated@@40 ($generated@@41 $generated@@48) ($generated@@42 $generated@@25 $generated@@49)) (ite ($generated@@44 ($generated@@42 $generated@@25 $generated@@49)) (let (($generated@@51 ($generated@@42 $generated@@25 ($generated@@46 ($generated@@42 $generated@@25 $generated@@49)))))
(let (($generated@@52 ($generated@@42 $generated@@25 ($generated@@45 ($generated@@42 $generated@@25 $generated@@49)))))
(let (($generated@@53 ($generated@@42 $generated@@25 ($generated@@40 ($generated@@41 $generated@@48) $generated@@52))))
(ite  (and ($generated@@31 $generated@@53) (= ($generated@@47 ($generated@@32 $generated@@53)) ($generated@@47 0))) $generated@@51 ($generated@@26 $generated@@53 $generated@@51))))) (ite ($generated@@31 ($generated@@42 $generated@@25 $generated@@49)) ($generated@@42 $generated@@25 $generated@@49) ($generated@@42 $generated@@25 $generated@@49))))))
 :weight 3
 :pattern ( ($generated@@40 ($generated@@41 $generated@@48) ($generated@@42 $generated@@25 $generated@@49)))
))))
(assert (forall (($generated@@54 T@U) ($generated@@55 T@U) ) (! (= ($generated@@30 $generated@@54 $generated@@55) (= $generated@@54 $generated@@55))
 :pattern ( ($generated@@30 $generated@@54 $generated@@55))
)))
(assert (forall (($generated@@56 Int) ) (! (= ($generated@@47 $generated@@56) $generated@@56)
 :pattern ( ($generated@@47 $generated@@56))
)))
(assert (forall (($generated@@57 T@U) ($generated@@58 T@T) ) (! (= ($generated@@42 $generated@@58 $generated@@57) $generated@@57)
 :pattern ( ($generated@@42 $generated@@58 $generated@@57))
)))
(assert (forall (($generated@@60 T@U) ) (! (= ($generated@@44 $generated@@60) (= ($generated@@59 $generated@@60) $generated@@3))
 :pattern ( ($generated@@44 $generated@@60))
)))
(assert (forall (($generated@@61 T@U) ) (! (= ($generated@@31 $generated@@61) (= ($generated@@59 $generated@@61) $generated@@4))
 :pattern ( ($generated@@31 $generated@@61))
)))
(assert (forall (($generated@@62 T@U) ) (! (= ($generated@@35 $generated@@62) (= ($generated@@59 $generated@@62) $generated@@5))
 :pattern ( ($generated@@35 $generated@@62))
)))
(assert (forall (($generated@@65 T@U) ($generated@@66 T@T) ) (! (= ($generated@@64 $generated@@66 ($generated@@63 $generated@@66 $generated@@65)) $generated@@65)
 :pattern ( ($generated@@63 $generated@@66 $generated@@65))
)))
(assert (forall (($generated@@67 T@U) ) (!  (=> ($generated@@44 $generated@@67) (exists (($generated@@68 T@U) ($generated@@69 T@U) ) (= $generated@@67 ($generated@@26 $generated@@68 $generated@@69))))
 :pattern ( ($generated@@44 $generated@@67))
)))
(assert (forall (($generated@@71 T@U) ) (!  (=> ($generated@@31 $generated@@71) (exists (($generated@@72 Int) ) (= $generated@@71 ($generated@@70 $generated@@72))))
 :pattern ( ($generated@@31 $generated@@71))
)))
(assert (forall (($generated@@74 T@U) ) (!  (=> ($generated@@35 $generated@@74) (exists (($generated@@75 Int) ) (= $generated@@74 ($generated@@73 $generated@@75))))
 :pattern ( ($generated@@35 $generated@@74))
)))
(assert  (=> (<= 1 $generated@@39) (forall (($generated@@76 T@U) ($generated@@77 T@U) ) (!  (=> (or ($generated@@43 $generated@@77) (and (< 1 $generated@@39) ($generated@@24 $generated@@25 $generated@@77 $generated@@27))) (and (=> ($generated@@44 $generated@@77) (let (($generated@@78 ($generated@@45 $generated@@77)))
($generated@@43 $generated@@78))) (= ($generated@@40 ($generated@@41 $generated@@76) $generated@@77) (ite ($generated@@44 $generated@@77) (let (($generated@@79 ($generated@@46 $generated@@77)))
(let (($generated@@80 ($generated@@45 $generated@@77)))
(let (($generated@@81 ($generated@@40 $generated@@76 $generated@@80)))
(ite  (and ($generated@@31 $generated@@81) (= ($generated@@32 $generated@@81) ($generated@@47 0))) $generated@@79 ($generated@@26 $generated@@81 $generated@@79))))) (ite ($generated@@31 $generated@@77) $generated@@77 $generated@@77)))))
 :pattern ( ($generated@@40 ($generated@@41 $generated@@76) $generated@@77))
))))
(assert  (=> (<= 1 $generated@@39) (forall (($generated@@82 T@U) ($generated@@83 T@U) ) (!  (=> (or ($generated@@43 $generated@@83) (and (< 1 $generated@@39) ($generated@@24 $generated@@25 $generated@@83 $generated@@27))) ($generated@@24 $generated@@25 ($generated@@40 $generated@@82 $generated@@83) $generated@@27))
 :pattern ( ($generated@@40 $generated@@82 $generated@@83))
))))
(assert (forall (($generated@@84 T@U) ($generated@@85 T@U) ) (!  (=> (and ($generated@@44 $generated@@84) ($generated@@44 $generated@@85)) (= ($generated@@30 $generated@@84 $generated@@85)  (and ($generated@@30 ($generated@@45 $generated@@84) ($generated@@45 $generated@@85)) ($generated@@30 ($generated@@46 $generated@@84) ($generated@@46 $generated@@85)))))
 :pattern ( ($generated@@30 $generated@@84 $generated@@85) ($generated@@44 $generated@@84))
 :pattern ( ($generated@@30 $generated@@84 $generated@@85) ($generated@@44 $generated@@85))
)))
(assert (forall (($generated@@86 T@U) ($generated@@87 T@U) ) (! (= ($generated@@59 ($generated@@26 $generated@@86 $generated@@87)) $generated@@3)
 :pattern ( ($generated@@26 $generated@@86 $generated@@87))
)))
(assert (forall (($generated@@88 T@U) ($generated@@89 T@U) ) (! (= ($generated@@45 ($generated@@26 $generated@@88 $generated@@89)) $generated@@88)
 :pattern ( ($generated@@26 $generated@@88 $generated@@89))
)))
(assert (forall (($generated@@90 T@U) ($generated@@91 T@U) ) (! (= ($generated@@46 ($generated@@26 $generated@@90 $generated@@91)) $generated@@91)
 :pattern ( ($generated@@26 $generated@@90 $generated@@91))
)))
(assert (forall (($generated@@92 Int) ) (! (= ($generated@@59 ($generated@@70 $generated@@92)) $generated@@4)
 :pattern ( ($generated@@70 $generated@@92))
)))
(assert (forall (($generated@@93 Int) ) (! (= ($generated@@32 ($generated@@70 $generated@@93)) $generated@@93)
 :pattern ( ($generated@@70 $generated@@93))
)))
(assert (forall (($generated@@94 Int) ) (! (= ($generated@@59 ($generated@@73 $generated@@94)) $generated@@5)
 :pattern ( ($generated@@73 $generated@@94))
)))
(assert (forall (($generated@@95 Int) ) (! (= ($generated@@36 ($generated@@73 $generated@@95)) $generated@@95)
 :pattern ( ($generated@@73 $generated@@95))
)))
(assert (forall (($generated@@96 T@U) ($generated@@97 T@T) ) (! (= ($generated@@63 $generated@@97 ($generated@@64 $generated@@97 $generated@@96)) $generated@@96)
 :pattern ( ($generated@@64 $generated@@97 $generated@@96))
)))
(assert (forall (($generated@@99 T@U) ($generated@@100 T@U) ) (! (< ($generated@@98 $generated@@99) ($generated@@98 ($generated@@26 $generated@@99 $generated@@100)))
 :pattern ( ($generated@@26 $generated@@99 $generated@@100))
)))
(assert (forall (($generated@@101 T@U) ($generated@@102 T@U) ) (! (< ($generated@@98 $generated@@102) ($generated@@98 ($generated@@26 $generated@@101 $generated@@102)))
 :pattern ( ($generated@@26 $generated@@101 $generated@@102))
)))
(assert (forall (($generated@@103 T@U) ($generated@@104 T@U) ) (! (= ($generated@@40 ($generated@@41 $generated@@103) $generated@@104) ($generated@@40 $generated@@103 $generated@@104))
 :pattern ( ($generated@@40 ($generated@@41 $generated@@103) $generated@@104))
)))
(assert (forall (($generated@@105 Int) ) (! (= ($generated@@24 $generated@@25 ($generated@@70 $generated@@105) $generated@@27) ($generated@@24 $generated@@9 ($generated@@13 $generated@@105) $generated))
 :pattern ( ($generated@@24 $generated@@25 ($generated@@70 $generated@@105) $generated@@27))
)))
(assert (forall (($generated@@106 Int) ) (! (= ($generated@@24 $generated@@25 ($generated@@73 $generated@@106) $generated@@27) ($generated@@24 $generated@@9 ($generated@@13 $generated@@106) $generated))
 :pattern ( ($generated@@24 $generated@@25 ($generated@@73 $generated@@106) $generated@@27))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@118 T@T) ($generated@@119 T@T) ($generated@@120 T@T) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ) (! (= ($generated@@107 $generated@@118 $generated@@119 $generated@@120 ($generated@@114 $generated@@118 $generated@@119 $generated@@120 $generated@@122 $generated@@123 $generated@@124 $generated@@121) $generated@@123 $generated@@124) $generated@@121)
 :weight 0
)) (and (forall (($generated@@125 T@T) ($generated@@126 T@T) ($generated@@127 T@T) ($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ) (!  (or (= $generated@@130 $generated@@132) (= ($generated@@107 $generated@@125 $generated@@126 $generated@@127 ($generated@@114 $generated@@125 $generated@@126 $generated@@127 $generated@@129 $generated@@130 $generated@@131 $generated@@128) $generated@@132 $generated@@133) ($generated@@107 $generated@@125 $generated@@126 $generated@@127 $generated@@129 $generated@@132 $generated@@133)))
 :weight 0
)) (forall (($generated@@134 T@T) ($generated@@135 T@T) ($generated@@136 T@T) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ) (!  (or (= $generated@@140 $generated@@142) (= ($generated@@107 $generated@@134 $generated@@135 $generated@@136 ($generated@@114 $generated@@134 $generated@@135 $generated@@136 $generated@@138 $generated@@139 $generated@@140 $generated@@137) $generated@@141 $generated@@142) ($generated@@107 $generated@@134 $generated@@135 $generated@@136 $generated@@138 $generated@@141 $generated@@142)))
 :weight 0
)))) (= ($generated@@7 $generated@@108) 4)) (= ($generated@@7 $generated@@109) 5)) (forall (($generated@@143 T@T) ($generated@@144 T@T) ($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 T@U) ) (! (= ($generated@@111 $generated@@143 $generated@@144 ($generated@@115 $generated@@143 $generated@@144 $generated@@146 $generated@@147 $generated@@145) $generated@@147) $generated@@145)
 :weight 0
))) (forall (($generated@@148 T@T) ($generated@@149 T@T) ($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 T@U) ) (!  (or (= $generated@@152 $generated@@153) (= ($generated@@111 $generated@@148 $generated@@149 ($generated@@115 $generated@@148 $generated@@149 $generated@@151 $generated@@152 $generated@@150) $generated@@153) ($generated@@111 $generated@@148 $generated@@149 $generated@@151 $generated@@153)))
 :weight 0
))) (= ($generated@@7 $generated@@112) 6)) (forall (($generated@@154 T@T) ($generated@@155 T@T) ) (= ($generated@@7 ($generated@@113 $generated@@154 $generated@@155)) 7))) (forall (($generated@@156 T@T) ($generated@@157 T@T) ) (! (= ($generated@@116 ($generated@@113 $generated@@156 $generated@@157)) $generated@@156)
 :pattern ( ($generated@@113 $generated@@156 $generated@@157))
))) (forall (($generated@@158 T@T) ($generated@@159 T@T) ) (! (= ($generated@@117 ($generated@@113 $generated@@158 $generated@@159)) $generated@@159)
 :pattern ( ($generated@@113 $generated@@158 $generated@@159))
))))
(assert (forall (($generated@@160 T@U) ($generated@@161 T@U) ($generated@@162 T@U) ($generated@@163 Bool) ($generated@@164 T@U) ($generated@@165 T@U) ) (! (= ($generated@@12 ($generated@@107 $generated@@108 $generated@@109 $generated@@8 ($generated@@110 $generated@@160 $generated@@161 $generated@@162 $generated@@163) $generated@@164 $generated@@165))  (=> (and (or (not (= $generated@@164 $generated@@160)) (not true)) ($generated@@12 ($generated@@63 $generated@@8 ($generated@@111 $generated@@109 $generated@@112 ($generated@@111 $generated@@108 ($generated@@113 $generated@@109 $generated@@112) $generated@@161 $generated@@164) $generated@@162)))) $generated@@163))
 :pattern ( ($generated@@107 $generated@@108 $generated@@109 $generated@@8 ($generated@@110 $generated@@160 $generated@@161 $generated@@162 $generated@@163) $generated@@164 $generated@@165))
)))
(assert (forall (($generated@@166 T@U) ) (!  (=> ($generated@@24 $generated@@25 $generated@@166 $generated@@27) (or (or ($generated@@44 $generated@@166) ($generated@@31 $generated@@166)) ($generated@@35 $generated@@166)))
 :pattern ( ($generated@@35 $generated@@166) ($generated@@24 $generated@@25 $generated@@166 $generated@@27))
 :pattern ( ($generated@@31 $generated@@166) ($generated@@24 $generated@@25 $generated@@166 $generated@@27))
 :pattern ( ($generated@@44 $generated@@166) ($generated@@24 $generated@@25 $generated@@166 $generated@@27))
)))
(assert (= ($generated@@23 $generated@@27) $generated@@2))
(assert (= ($generated@@167 $generated@@27) $generated@@6))
(assert (forall (($generated@@168 T@U) ($generated@@169 T@U) ) (! (= ($generated@@26 ($generated@@42 $generated@@25 $generated@@168) ($generated@@42 $generated@@25 $generated@@169)) ($generated@@42 $generated@@25 ($generated@@26 $generated@@168 $generated@@169)))
 :pattern ( ($generated@@26 ($generated@@42 $generated@@25 $generated@@168) ($generated@@42 $generated@@25 $generated@@169)))
)))
(assert (forall (($generated@@170 Int) ) (! (= ($generated@@64 $generated@@9 ($generated@@13 ($generated@@47 $generated@@170))) ($generated@@42 $generated@@112 ($generated@@64 $generated@@9 ($generated@@13 $generated@@170))))
 :pattern ( ($generated@@64 $generated@@9 ($generated@@13 ($generated@@47 $generated@@170))))
)))
(assert (forall (($generated@@171 Int) ) (! (= ($generated@@70 ($generated@@47 $generated@@171)) ($generated@@42 $generated@@25 ($generated@@70 $generated@@171)))
 :pattern ( ($generated@@70 ($generated@@47 $generated@@171)))
)))
(assert (forall (($generated@@172 Int) ) (! (= ($generated@@73 ($generated@@47 $generated@@172)) ($generated@@42 $generated@@25 ($generated@@73 $generated@@172)))
 :pattern ( ($generated@@73 ($generated@@47 $generated@@172)))
)))
(assert (forall (($generated@@173 T@U) ($generated@@174 T@T) ) (! (= ($generated@@64 $generated@@174 ($generated@@42 $generated@@174 $generated@@173)) ($generated@@42 $generated@@112 ($generated@@64 $generated@@174 $generated@@173)))
 :pattern ( ($generated@@64 $generated@@174 ($generated@@42 $generated@@174 $generated@@173)))
)))
(assert (forall (($generated@@175 T@U) ) (! ($generated@@24 $generated@@9 $generated@@175 $generated)
 :pattern ( ($generated@@24 $generated@@9 $generated@@175 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@176 () T@U)
(declare-fun $generated@@177 () T@U)
(declare-fun $generated@@178 () T@U)
(declare-fun $generated@@179 () T@U)
(declare-fun $generated@@180 (T@U) Bool)
(declare-fun $generated@@181 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@182  (=> (and (= $generated@@176 ($generated@@110 $generated@@177 $generated@@178 $generated@@1 false)) (= (ControlFlow 0 2) (- 0 1))) ($generated@@30 ($generated@@40 ($generated@@41 ($generated@@41 $generated@@179)) ($generated@@42 $generated@@25 ($generated@@26 ($generated@@42 $generated@@25 ($generated@@26 ($generated@@42 $generated@@25 ($generated@@26 ($generated@@42 $generated@@25 ($generated@@70 ($generated@@47 0))) ($generated@@42 $generated@@25 ($generated@@70 ($generated@@47 0))))) ($generated@@42 $generated@@25 ($generated@@70 ($generated@@47 0))))) ($generated@@42 $generated@@25 ($generated@@70 ($generated@@47 1)))))) ($generated@@70 ($generated@@47 1))))))
(let (($generated@@183  (=> (and (and ($generated@@180 $generated@@178) ($generated@@181 $generated@@178)) (and (= 2 $generated@@39) (= (ControlFlow 0 3) 2))) $generated@@182)))
$generated@@183)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
