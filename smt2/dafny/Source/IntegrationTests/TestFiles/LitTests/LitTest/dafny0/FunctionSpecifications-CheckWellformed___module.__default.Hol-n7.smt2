(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 (T@T) Int)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Bool) T@U)
(declare-fun $generated@@9 (T@U) Bool)
(declare-fun $generated@@10 (Int) T@U)
(declare-fun $generated@@11 (T@U) Int)
(declare-fun $generated@@12 (Real) T@U)
(declare-fun $generated@@13 (T@U) Real)
(declare-fun $generated@@20 (T@U) T@U)
(declare-fun $generated@@21 () Int)
(declare-fun $generated@@22 (Int) Bool)
(declare-fun $generated@@23 (Int) Bool)
(declare-fun $generated@@25 (Int) Int)
(declare-fun $generated@@27 (T@T T@U) T@U)
(declare-fun $generated@@30 (T@T T@U) T@U)
(declare-fun $generated@@31 (T@T T@U) T@U)
(declare-fun $generated@@38 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@39 () T@T)
(declare-fun $generated@@40 () T@T)
(declare-fun $generated@@41 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@42 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@43 () T@T)
(declare-fun $generated@@44 (T@T T@T) T@T)
(declare-fun $generated@@45 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@46 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@47 (T@T) T@T)
(declare-fun $generated@@48 (T@T) T@T)
(declare-fun $generated@@100 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@105 (T@T T@U T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@4 $generated@@5) 0) (= ($generated@@4 $generated@@6) 1)) (= ($generated@@4 $generated@@7) 2)) (forall (($generated@@14 Bool) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Int) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Real) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3)
)
(assert (= ($generated@@20 $generated) $generated@@1))
(assert (= ($generated@@20 $generated@@0) $generated@@2))
(assert  (=> (<= 0 $generated@@21) (forall (($generated@@24 Int) ) (!  (=> (or ($generated@@23 $generated@@24) (< 0 $generated@@21)) (= ($generated@@22 $generated@@24) (< $generated@@24 (- 0 2))))
 :pattern ( ($generated@@22 $generated@@24))
))))
(assert (forall (($generated@@26 Int) ) (! (= ($generated@@25 $generated@@26) $generated@@26)
 :pattern ( ($generated@@25 $generated@@26))
)))
(assert (forall (($generated@@28 T@U) ($generated@@29 T@T) ) (! (= ($generated@@27 $generated@@29 $generated@@28) $generated@@28)
 :pattern ( ($generated@@27 $generated@@29 $generated@@28))
)))
(assert (forall (($generated@@32 T@U) ($generated@@33 T@T) ) (! (= ($generated@@31 $generated@@33 ($generated@@30 $generated@@33 $generated@@32)) $generated@@32)
 :pattern ( ($generated@@30 $generated@@33 $generated@@32))
)))
(assert  (=> (<= 0 $generated@@21) (forall (($generated@@34 Int) ) (!  (=> (or ($generated@@23 ($generated@@25 $generated@@34)) (< 0 $generated@@21)) (= ($generated@@22 ($generated@@25 $generated@@34)) ($generated@@9 ($generated@@27 $generated@@5 ($generated@@8 (< $generated@@34 (- 0 2)))))))
 :weight 3
 :pattern ( ($generated@@22 ($generated@@25 $generated@@34)))
))))
(assert  (=> (<= 0 $generated@@21) (forall (($generated@@35 Int) ) (!  (=> (or ($generated@@23 $generated@@35) (< 0 $generated@@21)) (=> (= $generated@@35 ($generated@@25 0)) ($generated@@22 $generated@@35)))
 :pattern ( ($generated@@22 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ($generated@@37 T@T) ) (! (= ($generated@@30 $generated@@37 ($generated@@31 $generated@@37 $generated@@36)) $generated@@36)
 :pattern ( ($generated@@31 $generated@@37 $generated@@36))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@49 T@T) ($generated@@50 T@T) ($generated@@51 T@T) ($generated@@52 T@U) ($generated@@53 T@U) ($generated@@54 T@U) ($generated@@55 T@U) ) (! (= ($generated@@38 $generated@@49 $generated@@50 $generated@@51 ($generated@@45 $generated@@49 $generated@@50 $generated@@51 $generated@@53 $generated@@54 $generated@@55 $generated@@52) $generated@@54 $generated@@55) $generated@@52)
 :weight 0
)) (and (forall (($generated@@56 T@T) ($generated@@57 T@T) ($generated@@58 T@T) ($generated@@59 T@U) ($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@U) ($generated@@64 T@U) ) (!  (or (= $generated@@61 $generated@@63) (= ($generated@@38 $generated@@56 $generated@@57 $generated@@58 ($generated@@45 $generated@@56 $generated@@57 $generated@@58 $generated@@60 $generated@@61 $generated@@62 $generated@@59) $generated@@63 $generated@@64) ($generated@@38 $generated@@56 $generated@@57 $generated@@58 $generated@@60 $generated@@63 $generated@@64)))
 :weight 0
)) (forall (($generated@@65 T@T) ($generated@@66 T@T) ($generated@@67 T@T) ($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ) (!  (or (= $generated@@71 $generated@@73) (= ($generated@@38 $generated@@65 $generated@@66 $generated@@67 ($generated@@45 $generated@@65 $generated@@66 $generated@@67 $generated@@69 $generated@@70 $generated@@71 $generated@@68) $generated@@72 $generated@@73) ($generated@@38 $generated@@65 $generated@@66 $generated@@67 $generated@@69 $generated@@72 $generated@@73)))
 :weight 0
)))) (= ($generated@@4 $generated@@39) 3)) (= ($generated@@4 $generated@@40) 4)) (forall (($generated@@74 T@T) ($generated@@75 T@T) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ) (! (= ($generated@@42 $generated@@74 $generated@@75 ($generated@@46 $generated@@74 $generated@@75 $generated@@77 $generated@@78 $generated@@76) $generated@@78) $generated@@76)
 :weight 0
))) (forall (($generated@@79 T@T) ($generated@@80 T@T) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ) (!  (or (= $generated@@83 $generated@@84) (= ($generated@@42 $generated@@79 $generated@@80 ($generated@@46 $generated@@79 $generated@@80 $generated@@82 $generated@@83 $generated@@81) $generated@@84) ($generated@@42 $generated@@79 $generated@@80 $generated@@82 $generated@@84)))
 :weight 0
))) (= ($generated@@4 $generated@@43) 5)) (forall (($generated@@85 T@T) ($generated@@86 T@T) ) (= ($generated@@4 ($generated@@44 $generated@@85 $generated@@86)) 6))) (forall (($generated@@87 T@T) ($generated@@88 T@T) ) (! (= ($generated@@47 ($generated@@44 $generated@@87 $generated@@88)) $generated@@87)
 :pattern ( ($generated@@44 $generated@@87 $generated@@88))
))) (forall (($generated@@89 T@T) ($generated@@90 T@T) ) (! (= ($generated@@48 ($generated@@44 $generated@@89 $generated@@90)) $generated@@90)
 :pattern ( ($generated@@44 $generated@@89 $generated@@90))
))))
(assert (forall (($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 Bool) ($generated@@95 T@U) ($generated@@96 T@U) ) (! (= ($generated@@9 ($generated@@38 $generated@@39 $generated@@40 $generated@@5 ($generated@@41 $generated@@91 $generated@@92 $generated@@93 $generated@@94) $generated@@95 $generated@@96))  (=> (and (or (not (= $generated@@95 $generated@@91)) (not true)) ($generated@@9 ($generated@@30 $generated@@5 ($generated@@42 $generated@@40 $generated@@43 ($generated@@42 $generated@@39 ($generated@@44 $generated@@40 $generated@@43) $generated@@92 $generated@@95) $generated@@93)))) $generated@@94))
 :pattern ( ($generated@@38 $generated@@39 $generated@@40 $generated@@5 ($generated@@41 $generated@@91 $generated@@92 $generated@@93 $generated@@94) $generated@@95 $generated@@96))
)))
(assert (forall (($generated@@97 Int) ) (! (= ($generated@@31 $generated@@6 ($generated@@10 ($generated@@25 $generated@@97))) ($generated@@27 $generated@@43 ($generated@@31 $generated@@6 ($generated@@10 $generated@@97))))
 :pattern ( ($generated@@31 $generated@@6 ($generated@@10 ($generated@@25 $generated@@97))))
)))
(assert (forall (($generated@@98 T@U) ($generated@@99 T@T) ) (! (= ($generated@@31 $generated@@99 ($generated@@27 $generated@@99 $generated@@98)) ($generated@@27 $generated@@43 ($generated@@31 $generated@@99 $generated@@98)))
 :pattern ( ($generated@@31 $generated@@99 ($generated@@27 $generated@@99 $generated@@98)))
)))
(assert (forall (($generated@@101 T@U) ($generated@@102 T@U) ) (! ($generated@@100 $generated@@6 $generated@@102 $generated@@0 $generated@@101)
 :pattern ( ($generated@@100 $generated@@6 $generated@@102 $generated@@0 $generated@@101))
)))
(assert (forall (($generated@@103 T@U) ($generated@@104 T@U) ) (! ($generated@@100 $generated@@5 $generated@@104 $generated $generated@@103)
 :pattern ( ($generated@@100 $generated@@5 $generated@@104 $generated $generated@@103))
)))
(assert (forall (($generated@@106 T@U) ) (! ($generated@@105 $generated@@6 $generated@@106 $generated@@0)
 :pattern ( ($generated@@105 $generated@@6 $generated@@106 $generated@@0))
)))
(assert (forall (($generated@@107 T@U) ) (! ($generated@@105 $generated@@5 $generated@@107 $generated)
 :pattern ( ($generated@@105 $generated@@5 $generated@@107 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@108 () Int)
(declare-fun $generated@@109 () T@U)
(declare-fun $generated@@110 () T@U)
(declare-fun $generated@@111 () T@U)
(declare-fun $generated@@112 (T@U) Bool)
(declare-fun $generated@@113 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 10) (let (($generated@@114  (=> (= (ControlFlow 0 7) (- 0 6)) (=> (= $generated@@108 ($generated@@25 0)) ($generated@@22 $generated@@108)))))
(let (($generated@@115  (=> (= ($generated@@22 $generated@@108) (< $generated@@108 (- 0 2))) (=> (and ($generated@@105 $generated@@5 ($generated@@8 ($generated@@22 $generated@@108)) $generated) (= (ControlFlow 0 8) 7)) $generated@@114))))
(let (($generated@@116 true))
(let (($generated@@117  (=> (and (=> (= $generated@@108 ($generated@@25 0)) ($generated@@22 $generated@@108)) (= (ControlFlow 0 5) 1)) $generated@@116)))
(let (($generated@@118  (=> (and (= $generated@@108 ($generated@@25 0)) ($generated@@100 $generated@@6 ($generated@@10 $generated@@108) $generated@@0 $generated@@109)) (and (=> (= (ControlFlow 0 2) (- 0 4)) (or (<= 0 $generated@@108) (= $generated@@108 $generated@@108))) (=> (or (<= 0 $generated@@108) (= $generated@@108 $generated@@108)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (or (= $generated@@108 $generated@@108) (< $generated@@108 $generated@@108))) (=> (or (= $generated@@108 $generated@@108) (< $generated@@108 $generated@@108)) (=> (or (= $generated@@108 $generated@@108) ($generated@@23 $generated@@108)) (=> (and ($generated@@22 $generated@@108) (= (ControlFlow 0 2) 1)) $generated@@116)))))))))
(let (($generated@@119  (=> (= $generated@@110 ($generated@@41 $generated@@111 $generated@@109 $generated@@3 false)) (and (and (=> (= (ControlFlow 0 9) 8) $generated@@115) (=> (= (ControlFlow 0 9) 2) $generated@@118)) (=> (= (ControlFlow 0 9) 5) $generated@@117)))))
(let (($generated@@120  (=> (and (and ($generated@@112 $generated@@109) ($generated@@113 $generated@@109)) (and (= 0 $generated@@21) (= (ControlFlow 0 10) 9))) $generated@@119)))
$generated@@120))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 7) (- 6))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
