(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 (T@T) Int)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (T@U) Bool)
(declare-fun $generated@@13 (Int) T@U)
(declare-fun $generated@@14 (T@U) Int)
(declare-fun $generated@@15 (Real) T@U)
(declare-fun $generated@@16 (T@U) Real)
(declare-fun $generated@@23 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@24 () T@U)
(declare-fun $generated@@27 () T@U)
(declare-fun $generated@@30 (T@T T@U T@U) Bool)
(declare-fun $generated@@31 () T@T)
(declare-fun $generated@@32 () T@U)
(declare-fun $generated@@33 () T@U)
(declare-fun $generated@@34 (T@U) T@U)
(declare-fun $generated@@36 () T@U)
(declare-fun $generated@@39 (T@T T@U) T@U)
(declare-fun $generated@@40 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@41 () T@T)
(declare-fun $generated@@42 () T@T)
(declare-fun $generated@@43 (T@T T@T) T@T)
(declare-fun $generated@@44 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@45 (T@T) T@T)
(declare-fun $generated@@46 (T@T) T@T)
(declare-fun $generated@@66 (Int) Int)
(declare-fun $generated@@68 (T@T T@U) T@U)
(declare-fun $generated@@71 (T@T T@U) T@U)
(declare-fun $generated@@75 (Int Int) Int)
(declare-fun $generated@@80 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@81 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@82 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@116 (T@U) T@U)
(declare-fun $generated@@117 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@7 $generated@@8) 0) (= ($generated@@7 $generated@@9) 1)) (= ($generated@@7 $generated@@10) 2)) (forall (($generated@@17 Bool) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Int) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@16 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 T@U) ) (! (= ($generated@@15 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6)
)
(assert (forall (($generated@@25 T@U) ($generated@@26 T@U) ) (! ($generated@@23 $generated@@9 $generated@@25 $generated@@24 $generated@@26)
 :pattern ( ($generated@@23 $generated@@9 $generated@@25 $generated@@24 $generated@@26))
)))
(assert (forall (($generated@@28 T@U) ($generated@@29 T@U) ) (! ($generated@@23 $generated@@9 $generated@@28 $generated@@27 $generated@@29)
 :pattern ( ($generated@@23 $generated@@9 $generated@@28 $generated@@27 $generated@@29))
)))
(assert (= ($generated@@7 $generated@@31) 3))
(assert (forall (($generated@@35 T@U) ) (! (= ($generated@@30 $generated@@31 $generated@@35 $generated@@32)  (or (= $generated@@35 $generated@@33) (= ($generated@@34 $generated@@35) $generated@@32)))
 :pattern ( ($generated@@30 $generated@@31 $generated@@35 $generated@@32))
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ) (! (= ($generated@@23 $generated@@31 $generated@@37 $generated@@36 $generated@@38) ($generated@@23 $generated@@31 $generated@@37 $generated@@32 $generated@@38))
 :pattern ( ($generated@@23 $generated@@31 $generated@@37 $generated@@36 $generated@@38))
 :pattern ( ($generated@@23 $generated@@31 $generated@@37 $generated@@32 $generated@@38))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@47 T@T) ($generated@@48 T@T) ($generated@@49 T@U) ($generated@@50 T@U) ($generated@@51 T@U) ) (! (= ($generated@@40 $generated@@47 $generated@@48 ($generated@@44 $generated@@47 $generated@@48 $generated@@50 $generated@@51 $generated@@49) $generated@@51) $generated@@49)
 :weight 0
)) (forall (($generated@@52 T@T) ($generated@@53 T@T) ($generated@@54 T@U) ($generated@@55 T@U) ($generated@@56 T@U) ($generated@@57 T@U) ) (!  (or (= $generated@@56 $generated@@57) (= ($generated@@40 $generated@@52 $generated@@53 ($generated@@44 $generated@@52 $generated@@53 $generated@@55 $generated@@56 $generated@@54) $generated@@57) ($generated@@40 $generated@@52 $generated@@53 $generated@@55 $generated@@57)))
 :weight 0
))) (= ($generated@@7 $generated@@41) 4)) (= ($generated@@7 $generated@@42) 5)) (forall (($generated@@58 T@T) ($generated@@59 T@T) ) (= ($generated@@7 ($generated@@43 $generated@@58 $generated@@59)) 6))) (forall (($generated@@60 T@T) ($generated@@61 T@T) ) (! (= ($generated@@45 ($generated@@43 $generated@@60 $generated@@61)) $generated@@60)
 :pattern ( ($generated@@43 $generated@@60 $generated@@61))
))) (forall (($generated@@62 T@T) ($generated@@63 T@T) ) (! (= ($generated@@46 ($generated@@43 $generated@@62 $generated@@63)) $generated@@63)
 :pattern ( ($generated@@43 $generated@@62 $generated@@63))
))))
(assert (forall (($generated@@64 T@U) ($generated@@65 T@U) ) (! (= ($generated@@23 $generated@@31 $generated@@64 $generated@@32 $generated@@65)  (or (= $generated@@64 $generated@@33) ($generated@@12 ($generated@@39 $generated@@8 ($generated@@40 $generated@@41 $generated@@42 ($generated@@40 $generated@@31 ($generated@@43 $generated@@41 $generated@@42) $generated@@65 $generated@@64) $generated)))))
 :pattern ( ($generated@@23 $generated@@31 $generated@@64 $generated@@32 $generated@@65))
)))
(assert (forall (($generated@@67 Int) ) (! (= ($generated@@66 $generated@@67) $generated@@67)
 :pattern ( ($generated@@66 $generated@@67))
)))
(assert (forall (($generated@@69 T@U) ($generated@@70 T@T) ) (! (= ($generated@@68 $generated@@70 $generated@@69) $generated@@69)
 :pattern ( ($generated@@68 $generated@@70 $generated@@69))
)))
(assert (forall (($generated@@72 T@U) ($generated@@73 T@T) ) (! (= ($generated@@71 $generated@@73 ($generated@@39 $generated@@73 $generated@@72)) $generated@@72)
 :pattern ( ($generated@@39 $generated@@73 $generated@@72))
)))
(assert (forall (($generated@@74 T@U) ) (! (= ($generated@@30 $generated@@31 $generated@@74 $generated@@36)  (and ($generated@@30 $generated@@31 $generated@@74 $generated@@32) (or (not (= $generated@@74 $generated@@33)) (not true))))
 :pattern ( ($generated@@30 $generated@@31 $generated@@74 $generated@@36))
 :pattern ( ($generated@@30 $generated@@31 $generated@@74 $generated@@32))
)))
(assert (forall (($generated@@76 T@U) ) (! (= ($generated@@30 $generated@@9 $generated@@76 $generated@@24) (= ($generated@@75 ($generated@@14 $generated@@76) ($generated@@66 2)) ($generated@@66 0)))
 :pattern ( ($generated@@30 $generated@@9 $generated@@76 $generated@@24))
)))
(assert (forall (($generated@@77 T@U) ) (! (= ($generated@@30 $generated@@9 $generated@@77 $generated@@27)  (and (= ($generated@@75 ($generated@@14 $generated@@77) ($generated@@66 2)) ($generated@@66 0)) (= ($generated@@75 ($generated@@14 $generated@@77) ($generated@@66 3)) ($generated@@66 0))))
 :pattern ( ($generated@@30 $generated@@9 $generated@@77 $generated@@27))
)))
(assert (forall (($generated@@78 T@U) ($generated@@79 T@T) ) (! (= ($generated@@39 $generated@@79 ($generated@@71 $generated@@79 $generated@@78)) $generated@@78)
 :pattern ( ($generated@@71 $generated@@79 $generated@@78))
)))
(assert  (and (forall (($generated@@83 T@T) ($generated@@84 T@T) ($generated@@85 T@T) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ) (! (= ($generated@@80 $generated@@83 $generated@@84 $generated@@85 ($generated@@82 $generated@@83 $generated@@84 $generated@@85 $generated@@87 $generated@@88 $generated@@89 $generated@@86) $generated@@88 $generated@@89) $generated@@86)
 :weight 0
)) (and (forall (($generated@@90 T@T) ($generated@@91 T@T) ($generated@@92 T@T) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ) (!  (or (= $generated@@95 $generated@@97) (= ($generated@@80 $generated@@90 $generated@@91 $generated@@92 ($generated@@82 $generated@@90 $generated@@91 $generated@@92 $generated@@94 $generated@@95 $generated@@96 $generated@@93) $generated@@97 $generated@@98) ($generated@@80 $generated@@90 $generated@@91 $generated@@92 $generated@@94 $generated@@97 $generated@@98)))
 :weight 0
)) (forall (($generated@@99 T@T) ($generated@@100 T@T) ($generated@@101 T@T) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ) (!  (or (= $generated@@105 $generated@@107) (= ($generated@@80 $generated@@99 $generated@@100 $generated@@101 ($generated@@82 $generated@@99 $generated@@100 $generated@@101 $generated@@103 $generated@@104 $generated@@105 $generated@@102) $generated@@106 $generated@@107) ($generated@@80 $generated@@99 $generated@@100 $generated@@101 $generated@@103 $generated@@106 $generated@@107)))
 :weight 0
)))))
(assert (forall (($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 Bool) ($generated@@112 T@U) ($generated@@113 T@U) ) (! (= ($generated@@12 ($generated@@80 $generated@@31 $generated@@41 $generated@@8 ($generated@@81 $generated@@108 $generated@@109 $generated@@110 $generated@@111) $generated@@112 $generated@@113))  (=> (and (or (not (= $generated@@112 $generated@@108)) (not true)) ($generated@@12 ($generated@@39 $generated@@8 ($generated@@40 $generated@@41 $generated@@42 ($generated@@40 $generated@@31 ($generated@@43 $generated@@41 $generated@@42) $generated@@109 $generated@@112) $generated@@110)))) $generated@@111))
 :pattern ( ($generated@@80 $generated@@31 $generated@@41 $generated@@8 ($generated@@81 $generated@@108 $generated@@109 $generated@@110 $generated@@111) $generated@@112 $generated@@113))
)))
(assert (forall (($generated@@114 Int) ($generated@@115 Int) ) (! (= ($generated@@75 $generated@@114 $generated@@115) (mod $generated@@114 $generated@@115))
 :pattern ( ($generated@@75 $generated@@114 $generated@@115))
)))
(assert (= ($generated@@116 $generated@@32) $generated@@0))
(assert (= ($generated@@117 $generated@@32) $generated@@4))
(assert (= ($generated@@116 $generated@@36) $generated@@1))
(assert (= ($generated@@117 $generated@@36) $generated@@4))
(assert (= ($generated@@116 $generated@@27) $generated@@2))
(assert (= ($generated@@117 $generated@@27) $generated@@5))
(assert (= ($generated@@116 $generated@@24) $generated@@3))
(assert (= ($generated@@117 $generated@@24) $generated@@6))
(assert (forall (($generated@@118 Int) ) (! (= ($generated@@71 $generated@@9 ($generated@@13 ($generated@@66 $generated@@118))) ($generated@@68 $generated@@42 ($generated@@71 $generated@@9 ($generated@@13 $generated@@118))))
 :pattern ( ($generated@@71 $generated@@9 ($generated@@13 ($generated@@66 $generated@@118))))
)))
(assert (forall (($generated@@119 T@U) ($generated@@120 T@T) ) (! (= ($generated@@71 $generated@@120 ($generated@@68 $generated@@120 $generated@@119)) ($generated@@68 $generated@@42 ($generated@@71 $generated@@120 $generated@@119)))
 :pattern ( ($generated@@71 $generated@@120 ($generated@@68 $generated@@120 $generated@@119)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@121 () Int)
(declare-fun $generated@@122 () T@U)
(declare-fun $generated@@123 () T@U)
(declare-fun $generated@@124 () T@U)
(declare-fun $generated@@125 (T@U) Bool)
(declare-fun $generated@@126 (T@U) Bool)
(declare-fun $generated@@127 () Bool)
(declare-fun $generated@@128 () T@U)
(declare-fun $generated@@129 () Int)
(declare-fun $generated@@130 () Int)
(declare-fun $generated@@131 () Int)
(declare-fun $generated@@132 () Int)
(declare-fun $generated@@133 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 16) (let (($generated@@134  (=> (and (and (and (and (and (not ($generated@@12 ($generated@@68 $generated@@8 ($generated@@11 true)))) (not ($generated@@12 ($generated@@68 $generated@@8 ($generated@@11 true))))) (or (not (= ($generated@@75 $generated@@121 ($generated@@66 3)) ($generated@@66 0))) (not true))) (or (not (= ($generated@@75 $generated@@121 ($generated@@66 2)) ($generated@@66 0))) (not true))) (not ($generated@@12 ($generated@@68 $generated@@8 ($generated@@11 true))))) (= (ControlFlow 0 14) (- 0 13))) false)))
(let (($generated@@135  (=> (= (ControlFlow 0 12) (- 0 11)) ($generated@@30 $generated@@31 $generated@@122 $generated@@36))))
(let (($generated@@136  (and (=> (= (ControlFlow 0 9) (- 0 10)) (or (not (= ($generated@@66 2) 0)) (not true))) (=> (or (not (= ($generated@@66 2) 0)) (not true)) (=> (and (= ($generated@@75 $generated@@121 ($generated@@66 2)) ($generated@@66 0)) (= (ControlFlow 0 9) (- 0 8))) ($generated@@30 $generated@@9 ($generated@@13 $generated@@121) $generated@@27))))))
(let (($generated@@137  (and (=> (= (ControlFlow 0 6) (- 0 7)) (or (not (= ($generated@@66 3) 0)) (not true))) (=> (or (not (= ($generated@@66 3) 0)) (not true)) (=> (and (= ($generated@@75 $generated@@121 ($generated@@66 3)) ($generated@@66 0)) (= (ControlFlow 0 6) (- 0 5))) ($generated@@30 $generated@@9 ($generated@@13 $generated@@121) $generated@@27))))))
(let (($generated@@138  (=> (= (ControlFlow 0 4) (- 0 3)) ($generated@@30 $generated@@9 ($generated@@13 $generated@@121) $generated@@27))))
(let (($generated@@139  (=> (= (ControlFlow 0 2) (- 0 1)) ($generated@@30 $generated@@9 ($generated@@13 $generated@@121) $generated@@24))))
(let (($generated@@140  (=> (= $generated@@123 ($generated@@81 $generated@@33 $generated@@124 $generated false)) (and (and (and (and (and (=> (= (ControlFlow 0 15) 2) $generated@@139) (=> (= (ControlFlow 0 15) 4) $generated@@138)) (=> (= (ControlFlow 0 15) 6) $generated@@137)) (=> (= (ControlFlow 0 15) 9) $generated@@136)) (=> (= (ControlFlow 0 15) 12) $generated@@135)) (=> (= (ControlFlow 0 15) 14) $generated@@134)))))
(let (($generated@@141  (=> (and ($generated@@125 $generated@@124) ($generated@@126 $generated@@124)) (=> (and (and ($generated@@30 $generated@@31 $generated@@122 $generated@@32) ($generated@@23 $generated@@31 $generated@@122 $generated@@32 $generated@@124)) (and (=> $generated@@127 (and ($generated@@30 $generated@@31 $generated@@128 $generated@@36) ($generated@@23 $generated@@31 $generated@@128 $generated@@36 $generated@@124))) true)) (=> (and (and (and (and (= ($generated@@75 $generated@@129 ($generated@@66 2)) ($generated@@66 0)) (= ($generated@@75 $generated@@129 ($generated@@66 3)) ($generated@@66 0))) true) (and (and (= ($generated@@75 $generated@@130 ($generated@@66 2)) ($generated@@66 0)) (= ($generated@@75 $generated@@130 ($generated@@66 3)) ($generated@@66 0))) true)) (and (and (and (= ($generated@@75 $generated@@131 ($generated@@66 2)) ($generated@@66 0)) (= ($generated@@75 $generated@@131 ($generated@@66 3)) ($generated@@66 0))) true) (and (and (= ($generated@@75 $generated@@132 ($generated@@66 2)) ($generated@@66 0)) true) (and (= 2 $generated@@133) (= (ControlFlow 0 16) 15))))) $generated@@140)))))
$generated@@141)))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 6) (- 5))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 4) (- 3))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 9) (- 8))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
