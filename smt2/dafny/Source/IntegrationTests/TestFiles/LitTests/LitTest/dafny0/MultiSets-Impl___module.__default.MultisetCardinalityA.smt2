(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 (T@U) T@U)
(declare-fun $generated@@20 (T@T T@U T@U) Bool)
(declare-fun $generated@@21 () T@T)
(declare-fun $generated@@22 (T@U) T@U)
(declare-fun $generated@@23 (T@U) Bool)
(declare-fun $generated@@26 (Int) Int)
(declare-fun $generated@@28 (T@T T@U) T@U)
(declare-fun $generated@@31 (T@T T@U) T@U)
(declare-fun $generated@@32 (T@T T@U) T@U)
(declare-fun $generated@@35 (T@U T@U T@U) Bool)
(declare-fun $generated@@36 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@41 (T@U T@U) Bool)
(declare-fun $generated@@44 (T@U T@U) Int)
(declare-fun $generated@@45 (T@U T@U) Bool)
(declare-fun $generated@@53 (T@U) Int)
(declare-fun $generated@@57 () T@U)
(declare-fun $generated@@59 (T@U) T@U)
(declare-fun $generated@@66 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@67 () T@T)
(declare-fun $generated@@68 () T@T)
(declare-fun $generated@@69 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@70 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@71 () T@T)
(declare-fun $generated@@72 (T@T T@T) T@T)
(declare-fun $generated@@73 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@74 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@75 (T@T) T@T)
(declare-fun $generated@@76 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (= ($generated@@19 $generated) $generated@@0))
(assert (= ($generated@@3 $generated@@21) 3))
(assert (forall (($generated@@24 T@U) ($generated@@25 T@U) ) (!  (=> ($generated@@20 $generated@@21 $generated@@24 ($generated@@22 $generated@@25)) ($generated@@23 $generated@@24))
 :pattern ( ($generated@@20 $generated@@21 $generated@@24 ($generated@@22 $generated@@25)))
)))
(assert (forall (($generated@@27 Int) ) (! (= ($generated@@26 $generated@@27) $generated@@27)
 :pattern ( ($generated@@26 $generated@@27))
)))
(assert (forall (($generated@@29 T@U) ($generated@@30 T@T) ) (! (= ($generated@@28 $generated@@30 $generated@@29) $generated@@29)
 :pattern ( ($generated@@28 $generated@@30 $generated@@29))
)))
(assert (forall (($generated@@33 T@U) ($generated@@34 T@T) ) (! (= ($generated@@32 $generated@@34 ($generated@@31 $generated@@34 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@31 $generated@@34 $generated@@33))
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ($generated@@40 T@T) ) (! (= ($generated@@35 ($generated@@32 $generated@@40 $generated@@37) $generated@@38 $generated@@39) ($generated@@36 $generated@@40 $generated@@37 $generated@@38 $generated@@39))
 :pattern ( ($generated@@35 ($generated@@32 $generated@@40 $generated@@37) $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@42 T@U) ($generated@@43 T@U) ) (!  (=> ($generated@@41 $generated@@42 $generated@@43) (= $generated@@42 $generated@@43))
 :pattern ( ($generated@@41 $generated@@42 $generated@@43))
)))
(assert (forall (($generated@@46 T@U) ($generated@@47 T@U) ) (! (= ($generated@@20 $generated@@21 $generated@@46 ($generated@@22 $generated@@47)) (forall (($generated@@48 T@U) ) (!  (=> (< 0 ($generated@@44 $generated@@46 $generated@@48)) ($generated@@45 $generated@@48 $generated@@47))
 :pattern ( ($generated@@44 $generated@@46 $generated@@48))
)))
 :pattern ( ($generated@@20 $generated@@21 $generated@@46 ($generated@@22 $generated@@47)))
)))
(assert (forall (($generated@@49 T@U) ) (!  (=> ($generated@@45 $generated@@49 $generated) (and (= ($generated@@32 $generated@@5 ($generated@@31 $generated@@5 $generated@@49)) $generated@@49) ($generated@@20 $generated@@5 ($generated@@31 $generated@@5 $generated@@49) $generated)))
 :pattern ( ($generated@@45 $generated@@49 $generated))
)))
(assert (forall (($generated@@50 T@U) ($generated@@51 T@U) ($generated@@52 T@T) ) (! (= ($generated@@45 ($generated@@32 $generated@@52 $generated@@50) $generated@@51) ($generated@@20 $generated@@52 $generated@@50 $generated@@51))
 :pattern ( ($generated@@45 ($generated@@32 $generated@@52 $generated@@50) $generated@@51))
)))
(assert (forall (($generated@@54 T@U) ) (! (= ($generated@@23 $generated@@54) (forall (($generated@@55 T@U) ) (!  (and (<= 0 ($generated@@44 $generated@@54 $generated@@55)) (<= ($generated@@44 $generated@@54 $generated@@55) ($generated@@53 $generated@@54)))
 :pattern ( ($generated@@44 $generated@@54 $generated@@55))
)))
 :pattern ( ($generated@@23 $generated@@54))
)))
(assert (forall (($generated@@56 T@U) ) (! (<= 0 ($generated@@53 $generated@@56))
 :pattern ( ($generated@@53 $generated@@56))
)))
(assert (forall (($generated@@58 T@U) ) (! (= ($generated@@44 $generated@@57 $generated@@58) 0)
 :pattern ( ($generated@@44 $generated@@57 $generated@@58))
)))
(assert (forall (($generated@@60 T@U) ) (! (= ($generated@@59 ($generated@@22 $generated@@60)) $generated@@60)
 :pattern ( ($generated@@22 $generated@@60))
)))
(assert (forall (($generated@@61 T@U) ) (! (= ($generated@@19 ($generated@@22 $generated@@61)) $generated@@1)
 :pattern ( ($generated@@22 $generated@@61))
)))
(assert (forall (($generated@@62 T@U) ($generated@@63 T@T) ) (! (= ($generated@@31 $generated@@63 ($generated@@32 $generated@@63 $generated@@62)) $generated@@62)
 :pattern ( ($generated@@32 $generated@@63 $generated@@62))
)))
(assert (forall (($generated@@64 T@U) ) (!  (and (= (= ($generated@@53 $generated@@64) 0) (= $generated@@64 $generated@@57)) (=> (or (not (= ($generated@@53 $generated@@64) 0)) (not true)) (exists (($generated@@65 T@U) ) (! (< 0 ($generated@@44 $generated@@64 $generated@@65))
 :pattern ( ($generated@@44 $generated@@64 $generated@@65))
))))
 :pattern ( ($generated@@53 $generated@@64))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@77 T@T) ($generated@@78 T@T) ($generated@@79 T@T) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ) (! (= ($generated@@66 $generated@@77 $generated@@78 $generated@@79 ($generated@@73 $generated@@77 $generated@@78 $generated@@79 $generated@@81 $generated@@82 $generated@@83 $generated@@80) $generated@@82 $generated@@83) $generated@@80)
 :weight 0
)) (and (forall (($generated@@84 T@T) ($generated@@85 T@T) ($generated@@86 T@T) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ) (!  (or (= $generated@@89 $generated@@91) (= ($generated@@66 $generated@@84 $generated@@85 $generated@@86 ($generated@@73 $generated@@84 $generated@@85 $generated@@86 $generated@@88 $generated@@89 $generated@@90 $generated@@87) $generated@@91 $generated@@92) ($generated@@66 $generated@@84 $generated@@85 $generated@@86 $generated@@88 $generated@@91 $generated@@92)))
 :weight 0
)) (forall (($generated@@93 T@T) ($generated@@94 T@T) ($generated@@95 T@T) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ) (!  (or (= $generated@@99 $generated@@101) (= ($generated@@66 $generated@@93 $generated@@94 $generated@@95 ($generated@@73 $generated@@93 $generated@@94 $generated@@95 $generated@@97 $generated@@98 $generated@@99 $generated@@96) $generated@@100 $generated@@101) ($generated@@66 $generated@@93 $generated@@94 $generated@@95 $generated@@97 $generated@@100 $generated@@101)))
 :weight 0
)))) (= ($generated@@3 $generated@@67) 4)) (= ($generated@@3 $generated@@68) 5)) (forall (($generated@@102 T@T) ($generated@@103 T@T) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (! (= ($generated@@70 $generated@@102 $generated@@103 ($generated@@74 $generated@@102 $generated@@103 $generated@@105 $generated@@106 $generated@@104) $generated@@106) $generated@@104)
 :weight 0
))) (forall (($generated@@107 T@T) ($generated@@108 T@T) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ) (!  (or (= $generated@@111 $generated@@112) (= ($generated@@70 $generated@@107 $generated@@108 ($generated@@74 $generated@@107 $generated@@108 $generated@@110 $generated@@111 $generated@@109) $generated@@112) ($generated@@70 $generated@@107 $generated@@108 $generated@@110 $generated@@112)))
 :weight 0
))) (= ($generated@@3 $generated@@71) 6)) (forall (($generated@@113 T@T) ($generated@@114 T@T) ) (= ($generated@@3 ($generated@@72 $generated@@113 $generated@@114)) 7))) (forall (($generated@@115 T@T) ($generated@@116 T@T) ) (! (= ($generated@@75 ($generated@@72 $generated@@115 $generated@@116)) $generated@@115)
 :pattern ( ($generated@@72 $generated@@115 $generated@@116))
))) (forall (($generated@@117 T@T) ($generated@@118 T@T) ) (! (= ($generated@@76 ($generated@@72 $generated@@117 $generated@@118)) $generated@@118)
 :pattern ( ($generated@@72 $generated@@117 $generated@@118))
))))
(assert (forall (($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 Bool) ($generated@@123 T@U) ($generated@@124 T@U) ) (! (= ($generated@@8 ($generated@@66 $generated@@67 $generated@@68 $generated@@4 ($generated@@69 $generated@@119 $generated@@120 $generated@@121 $generated@@122) $generated@@123 $generated@@124))  (=> (and (or (not (= $generated@@123 $generated@@119)) (not true)) ($generated@@8 ($generated@@31 $generated@@4 ($generated@@70 $generated@@68 $generated@@71 ($generated@@70 $generated@@67 ($generated@@72 $generated@@68 $generated@@71) $generated@@120 $generated@@123) $generated@@121)))) $generated@@122))
 :pattern ( ($generated@@66 $generated@@67 $generated@@68 $generated@@4 ($generated@@69 $generated@@119 $generated@@120 $generated@@121 $generated@@122) $generated@@123 $generated@@124))
)))
(assert (forall (($generated@@125 T@U) ($generated@@126 T@U) ) (!  (=> ($generated@@45 $generated@@125 ($generated@@22 $generated@@126)) (and (= ($generated@@32 $generated@@21 ($generated@@31 $generated@@21 $generated@@125)) $generated@@125) ($generated@@20 $generated@@21 ($generated@@31 $generated@@21 $generated@@125) ($generated@@22 $generated@@126))))
 :pattern ( ($generated@@45 $generated@@125 ($generated@@22 $generated@@126)))
)))
(assert (forall (($generated@@127 Int) ) (! (= ($generated@@32 $generated@@5 ($generated@@9 ($generated@@26 $generated@@127))) ($generated@@28 $generated@@71 ($generated@@32 $generated@@5 ($generated@@9 $generated@@127))))
 :pattern ( ($generated@@32 $generated@@5 ($generated@@9 ($generated@@26 $generated@@127))))
)))
(assert (forall (($generated@@128 T@U) ($generated@@129 T@T) ) (! (= ($generated@@32 $generated@@129 ($generated@@28 $generated@@129 $generated@@128)) ($generated@@28 $generated@@71 ($generated@@32 $generated@@129 $generated@@128)))
 :pattern ( ($generated@@32 $generated@@129 ($generated@@28 $generated@@129 $generated@@128)))
)))
(assert (forall (($generated@@130 T@U) ($generated@@131 T@U) ) (! (= ($generated@@41 $generated@@130 $generated@@131) (forall (($generated@@132 T@U) ) (! (= ($generated@@44 $generated@@130 $generated@@132) ($generated@@44 $generated@@131 $generated@@132))
 :pattern ( ($generated@@44 $generated@@130 $generated@@132))
 :pattern ( ($generated@@44 $generated@@131 $generated@@132))
)))
 :pattern ( ($generated@@41 $generated@@130 $generated@@131))
)))
(assert (forall (($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ) (! (= ($generated@@36 $generated@@21 $generated@@133 ($generated@@22 $generated@@134) $generated@@135) (forall (($generated@@136 T@U) ) (!  (=> (< 0 ($generated@@44 $generated@@133 $generated@@136)) ($generated@@35 $generated@@136 $generated@@134 $generated@@135))
 :pattern ( ($generated@@44 $generated@@133 $generated@@136))
)))
 :pattern ( ($generated@@36 $generated@@21 $generated@@133 ($generated@@22 $generated@@134) $generated@@135))
)))
(assert (forall (($generated@@137 T@U) ($generated@@138 T@U) ) (! ($generated@@36 $generated@@5 $generated@@138 $generated $generated@@137)
 :pattern ( ($generated@@36 $generated@@5 $generated@@138 $generated $generated@@137))
)))
(assert (forall (($generated@@139 T@U) ) (! ($generated@@20 $generated@@5 $generated@@139 $generated)
 :pattern ( ($generated@@20 $generated@@5 $generated@@139 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@140 () T@U)
(declare-fun $generated@@141 () T@U)
(declare-fun $generated@@142 () T@U)
(declare-fun $generated@@143 () T@U)
(declare-fun $generated@@144 (T@U) Bool)
(declare-fun $generated@@145 (T@U) Bool)
(declare-fun $generated@@146 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 16) (let (($generated@@147 true))
(let (($generated@@148  (=> (= (ControlFlow 0 12) (- 0 11)) (exists (($generated@@149 T@U) ) (! (> ($generated@@44 $generated@@140 ($generated@@32 $generated@@5 $generated@@149)) 0)
 :pattern ( ($generated@@44 $generated@@140 ($generated@@32 $generated@@5 $generated@@149)))
)))))
(let (($generated@@150  (and (=> (= (ControlFlow 0 14) 12) $generated@@148) (=> (= (ControlFlow 0 14) 13) $generated@@147))))
(let (($generated@@151 true))
(let (($generated@@152  (=> (= (ControlFlow 0 8) (- 0 7)) (or (and ($generated@@20 $generated@@5 ($generated@@9 ($generated@@26 0)) $generated) (> ($generated@@44 $generated@@140 ($generated@@32 $generated@@5 ($generated@@9 ($generated@@26 0)))) 0)) (exists (($generated@@153 T@U) ) (> ($generated@@44 $generated@@140 ($generated@@32 $generated@@5 $generated@@153)) 0))))))
(let (($generated@@154  (and (=> (= (ControlFlow 0 10) 8) $generated@@152) (=> (= (ControlFlow 0 10) 9) $generated@@151))))
(let (($generated@@155  (=> (and (and (and (and (not ($generated@@8 ($generated@@28 $generated@@4 ($generated@@7 true)))) (not ($generated@@8 ($generated@@28 $generated@@4 ($generated@@7 true))))) (not ($generated@@8 ($generated@@28 $generated@@4 ($generated@@7 true))))) (not ($generated@@8 ($generated@@28 $generated@@4 ($generated@@7 true))))) (= (ControlFlow 0 6) (- 0 5))) false)))
(let (($generated@@156  (=> (= (ControlFlow 0 4) (- 0 3)) (or (not (= ($generated@@53 $generated@@140) 0)) (not true)))))
(let (($generated@@157  (=> (= (ControlFlow 0 2) (- 0 1)) (not ($generated@@41 $generated@@140 $generated@@57)))))
(let (($generated@@158  (=> (= $generated@@141 ($generated@@69 $generated@@142 $generated@@143 $generated@@2 false)) (and (and (and (and (=> (= (ControlFlow 0 15) 2) $generated@@157) (=> (= (ControlFlow 0 15) 4) $generated@@156)) (=> (= (ControlFlow 0 15) 14) $generated@@150)) (=> (= (ControlFlow 0 15) 10) $generated@@154)) (=> (= (ControlFlow 0 15) 6) $generated@@155)))))
(let (($generated@@159  (=> (and ($generated@@144 $generated@@143) ($generated@@145 $generated@@143)) (=> (and (and (and ($generated@@20 $generated@@21 $generated@@140 ($generated@@22 $generated)) ($generated@@36 $generated@@21 $generated@@140 ($generated@@22 $generated) $generated@@143)) (= 0 $generated@@146)) (and (not ($generated@@41 $generated@@140 $generated@@57)) (= (ControlFlow 0 16) 15))) $generated@@158))))
$generated@@159))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
