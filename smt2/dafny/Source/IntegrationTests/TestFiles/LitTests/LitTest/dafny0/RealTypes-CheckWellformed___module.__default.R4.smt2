(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 (T@T) Int)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Bool) T@U)
(declare-fun $generated@@9 (T@U) Bool)
(declare-fun $generated@@10 (Int) T@U)
(declare-fun $generated@@11 (T@U) Int)
(declare-fun $generated@@12 (Real) T@U)
(declare-fun $generated@@13 (T@U) Real)
(declare-fun $generated@@20 (T@U) T@U)
(declare-fun $generated@@21 (Int) Int)
(declare-fun $generated@@23 (Real) Real)
(declare-fun $generated@@25 (T@T T@U) T@U)
(declare-fun $generated@@28 (T@T T@U) T@U)
(declare-fun $generated@@29 (T@T T@U) T@U)
(declare-fun $generated@@32 (T@U Int Real) Int)
(declare-fun $generated@@33 (T@U) T@U)
(declare-fun $generated@@37 () Int)
(declare-fun $generated@@38 (Int Real) Bool)
(declare-fun $generated@@47 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@48 () T@T)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@51 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@52 () T@T)
(declare-fun $generated@@53 (T@T T@T) T@T)
(declare-fun $generated@@54 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@55 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@56 (T@T) T@T)
(declare-fun $generated@@57 (T@T) T@T)
(declare-fun $generated@@110 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@115 (T@T T@U T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@4 $generated@@5) 0) (= ($generated@@4 $generated@@6) 1)) (= ($generated@@4 $generated@@7) 2)) (forall (($generated@@14 Bool) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Int) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Real) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3)
)
(assert (= ($generated@@20 $generated) $generated@@1))
(assert (= ($generated@@20 $generated@@0) $generated@@2))
(assert (forall (($generated@@22 Int) ) (! (= ($generated@@21 $generated@@22) $generated@@22)
 :pattern ( ($generated@@21 $generated@@22))
)))
(assert (forall (($generated@@24 Real) ) (! (= ($generated@@23 $generated@@24) $generated@@24)
 :pattern ( ($generated@@23 $generated@@24))
)))
(assert (forall (($generated@@26 T@U) ($generated@@27 T@T) ) (! (= ($generated@@25 $generated@@27 $generated@@26) $generated@@26)
 :pattern ( ($generated@@25 $generated@@27 $generated@@26))
)))
(assert (forall (($generated@@30 T@U) ($generated@@31 T@T) ) (! (= ($generated@@29 $generated@@31 ($generated@@28 $generated@@31 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@28 $generated@@31 $generated@@30))
)))
(assert (forall (($generated@@34 T@U) ($generated@@35 Int) ($generated@@36 Real) ) (! (= ($generated@@32 ($generated@@33 $generated@@34) $generated@@35 $generated@@36) ($generated@@32 $generated@@34 $generated@@35 $generated@@36))
 :pattern ( ($generated@@32 ($generated@@33 $generated@@34) $generated@@35 $generated@@36))
)))
(assert  (=> (<= 0 $generated@@37) (forall (($generated@@39 T@U) ($generated@@40 Int) ($generated@@41 Real) ) (!  (=> (or ($generated@@38 ($generated@@21 $generated@@40) ($generated@@23 $generated@@41)) (< 0 $generated@@37)) (and (=> (not ($generated@@9 ($generated@@25 $generated@@5 ($generated@@8 (< $generated@@40 0))))) ($generated@@38 ($generated@@21 (- $generated@@40 1)) ($generated@@23 $generated@@41))) (= ($generated@@32 ($generated@@33 $generated@@39) ($generated@@21 $generated@@40) ($generated@@23 $generated@@41)) (ite (< $generated@@40 0) 5 ($generated@@32 ($generated@@33 $generated@@39) ($generated@@21 (- $generated@@40 1)) ($generated@@23 $generated@@41))))))
 :weight 3
 :pattern ( ($generated@@32 ($generated@@33 $generated@@39) ($generated@@21 $generated@@40) ($generated@@23 $generated@@41)))
))))
(assert  (=> (<= 0 $generated@@37) (forall (($generated@@42 T@U) ($generated@@43 Int) ($generated@@44 Real) ) (!  (=> (or ($generated@@38 $generated@@43 $generated@@44) (< 0 $generated@@37)) (and (=> (<= 0 $generated@@43) ($generated@@38 (- $generated@@43 1) $generated@@44)) (= ($generated@@32 ($generated@@33 $generated@@42) $generated@@43 $generated@@44) (ite (< $generated@@43 0) 5 ($generated@@32 $generated@@42 (- $generated@@43 1) $generated@@44)))))
 :pattern ( ($generated@@32 ($generated@@33 $generated@@42) $generated@@43 $generated@@44))
))))
(assert (forall (($generated@@45 T@U) ($generated@@46 T@T) ) (! (= ($generated@@28 $generated@@46 ($generated@@29 $generated@@46 $generated@@45)) $generated@@45)
 :pattern ( ($generated@@29 $generated@@46 $generated@@45))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@58 T@T) ($generated@@59 T@T) ($generated@@60 T@T) ($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@U) ($generated@@64 T@U) ) (! (= ($generated@@47 $generated@@58 $generated@@59 $generated@@60 ($generated@@54 $generated@@58 $generated@@59 $generated@@60 $generated@@62 $generated@@63 $generated@@64 $generated@@61) $generated@@63 $generated@@64) $generated@@61)
 :weight 0
)) (and (forall (($generated@@65 T@T) ($generated@@66 T@T) ($generated@@67 T@T) ($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ) (!  (or (= $generated@@70 $generated@@72) (= ($generated@@47 $generated@@65 $generated@@66 $generated@@67 ($generated@@54 $generated@@65 $generated@@66 $generated@@67 $generated@@69 $generated@@70 $generated@@71 $generated@@68) $generated@@72 $generated@@73) ($generated@@47 $generated@@65 $generated@@66 $generated@@67 $generated@@69 $generated@@72 $generated@@73)))
 :weight 0
)) (forall (($generated@@74 T@T) ($generated@@75 T@T) ($generated@@76 T@T) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (or (= $generated@@80 $generated@@82) (= ($generated@@47 $generated@@74 $generated@@75 $generated@@76 ($generated@@54 $generated@@74 $generated@@75 $generated@@76 $generated@@78 $generated@@79 $generated@@80 $generated@@77) $generated@@81 $generated@@82) ($generated@@47 $generated@@74 $generated@@75 $generated@@76 $generated@@78 $generated@@81 $generated@@82)))
 :weight 0
)))) (= ($generated@@4 $generated@@48) 3)) (= ($generated@@4 $generated@@49) 4)) (forall (($generated@@83 T@T) ($generated@@84 T@T) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ) (! (= ($generated@@51 $generated@@83 $generated@@84 ($generated@@55 $generated@@83 $generated@@84 $generated@@86 $generated@@87 $generated@@85) $generated@@87) $generated@@85)
 :weight 0
))) (forall (($generated@@88 T@T) ($generated@@89 T@T) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ) (!  (or (= $generated@@92 $generated@@93) (= ($generated@@51 $generated@@88 $generated@@89 ($generated@@55 $generated@@88 $generated@@89 $generated@@91 $generated@@92 $generated@@90) $generated@@93) ($generated@@51 $generated@@88 $generated@@89 $generated@@91 $generated@@93)))
 :weight 0
))) (= ($generated@@4 $generated@@52) 5)) (forall (($generated@@94 T@T) ($generated@@95 T@T) ) (= ($generated@@4 ($generated@@53 $generated@@94 $generated@@95)) 6))) (forall (($generated@@96 T@T) ($generated@@97 T@T) ) (! (= ($generated@@56 ($generated@@53 $generated@@96 $generated@@97)) $generated@@96)
 :pattern ( ($generated@@53 $generated@@96 $generated@@97))
))) (forall (($generated@@98 T@T) ($generated@@99 T@T) ) (! (= ($generated@@57 ($generated@@53 $generated@@98 $generated@@99)) $generated@@99)
 :pattern ( ($generated@@53 $generated@@98 $generated@@99))
))))
(assert (forall (($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 Bool) ($generated@@104 T@U) ($generated@@105 T@U) ) (! (= ($generated@@9 ($generated@@47 $generated@@48 $generated@@49 $generated@@5 ($generated@@50 $generated@@100 $generated@@101 $generated@@102 $generated@@103) $generated@@104 $generated@@105))  (=> (and (or (not (= $generated@@104 $generated@@100)) (not true)) ($generated@@9 ($generated@@28 $generated@@5 ($generated@@51 $generated@@49 $generated@@52 ($generated@@51 $generated@@48 ($generated@@53 $generated@@49 $generated@@52) $generated@@101 $generated@@104) $generated@@102)))) $generated@@103))
 :pattern ( ($generated@@47 $generated@@48 $generated@@49 $generated@@5 ($generated@@50 $generated@@100 $generated@@101 $generated@@102 $generated@@103) $generated@@104 $generated@@105))
)))
(assert (forall (($generated@@106 Int) ) (! (= ($generated@@29 $generated@@6 ($generated@@10 ($generated@@21 $generated@@106))) ($generated@@25 $generated@@52 ($generated@@29 $generated@@6 ($generated@@10 $generated@@106))))
 :pattern ( ($generated@@29 $generated@@6 ($generated@@10 ($generated@@21 $generated@@106))))
)))
(assert (forall (($generated@@107 Real) ) (! (= ($generated@@29 $generated@@7 ($generated@@12 ($generated@@23 $generated@@107))) ($generated@@25 $generated@@52 ($generated@@29 $generated@@7 ($generated@@12 $generated@@107))))
 :pattern ( ($generated@@29 $generated@@7 ($generated@@12 ($generated@@23 $generated@@107))))
)))
(assert (forall (($generated@@108 T@U) ($generated@@109 T@T) ) (! (= ($generated@@29 $generated@@109 ($generated@@25 $generated@@109 $generated@@108)) ($generated@@25 $generated@@52 ($generated@@29 $generated@@109 $generated@@108)))
 :pattern ( ($generated@@29 $generated@@109 ($generated@@25 $generated@@109 $generated@@108)))
)))
(assert (forall (($generated@@111 T@U) ($generated@@112 T@U) ) (! ($generated@@110 $generated@@6 $generated@@112 $generated $generated@@111)
 :pattern ( ($generated@@110 $generated@@6 $generated@@112 $generated $generated@@111))
)))
(assert (forall (($generated@@113 T@U) ($generated@@114 T@U) ) (! ($generated@@110 $generated@@7 $generated@@114 $generated@@0 $generated@@113)
 :pattern ( ($generated@@110 $generated@@7 $generated@@114 $generated@@0 $generated@@113))
)))
(assert (forall (($generated@@116 T@U) ) (! ($generated@@115 $generated@@6 $generated@@116 $generated)
 :pattern ( ($generated@@115 $generated@@6 $generated@@116 $generated))
)))
(assert (forall (($generated@@117 T@U) ) (! ($generated@@115 $generated@@7 $generated@@117 $generated@@0)
 :pattern ( ($generated@@115 $generated@@7 $generated@@117 $generated@@0))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@118 () Int)
(declare-fun $generated@@119 () Int)
(declare-fun $generated@@120 () T@U)
(declare-fun $generated@@121 () Real)
(declare-fun $generated@@122 () T@U)
(declare-fun $generated@@123 () T@U)
(declare-fun $generated@@124 (T@U) Bool)
(declare-fun $generated@@125 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 8) (let (($generated@@126  (=> (and (and (<= 0 $generated@@118) (= $generated@@119 (- $generated@@118 1))) (and ($generated@@110 $generated@@6 ($generated@@10 $generated@@119) $generated $generated@@120) ($generated@@110 $generated@@7 ($generated@@12 $generated@@121) $generated@@0 $generated@@120))) (and (=> (= (ControlFlow 0 4) (- 0 6)) (or (<= 0 $generated@@118) (= $generated@@119 $generated@@118))) (=> (or (<= 0 $generated@@118) (= $generated@@119 $generated@@118)) (and (=> (= (ControlFlow 0 4) (- 0 5)) (or (or (<= 0.0 $generated@@121) (< $generated@@119 $generated@@118)) (= $generated@@121 $generated@@121))) (=> (or (or (<= 0.0 $generated@@121) (< $generated@@119 $generated@@118)) (= $generated@@121 $generated@@121)) (=> (= (ControlFlow 0 4) (- 0 3)) (or (< $generated@@119 $generated@@118) (and (= $generated@@119 $generated@@118) (<= $generated@@121 (- $generated@@121 1.0))))))))))))
(let (($generated@@127 true))
(let (($generated@@128 true))
(let (($generated@@129  (=> (= $generated@@122 ($generated@@50 $generated@@123 $generated@@120 $generated@@3 false)) (and (and (=> (= (ControlFlow 0 7) 1) $generated@@128) (=> (= (ControlFlow 0 7) 2) $generated@@127)) (=> (= (ControlFlow 0 7) 4) $generated@@126)))))
(let (($generated@@130  (=> (and (and ($generated@@124 $generated@@120) ($generated@@125 $generated@@120)) (and (= 0 $generated@@37) (= (ControlFlow 0 8) 7))) $generated@@129)))
$generated@@130))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
