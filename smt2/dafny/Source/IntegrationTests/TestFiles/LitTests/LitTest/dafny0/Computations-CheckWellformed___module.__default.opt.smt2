(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 (T@T) Int)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (T@U) Bool)
(declare-fun $generated@@13 (Int) T@U)
(declare-fun $generated@@14 (T@U) Int)
(declare-fun $generated@@15 (Real) T@U)
(declare-fun $generated@@16 (T@U) Real)
(declare-fun $generated@@23 (T@U) T@U)
(declare-fun $generated@@24 (T@T T@U T@U) Bool)
(declare-fun $generated@@25 () T@T)
(declare-fun $generated@@26 (T@U T@U) T@U)
(declare-fun $generated@@27 () T@U)
(declare-fun $generated@@30 () Int)
(declare-fun $generated@@31 (T@U T@U) T@U)
(declare-fun $generated@@32 (T@U) T@U)
(declare-fun $generated@@33 (T@T T@U) T@U)
(declare-fun $generated@@34 (T@U) Bool)
(declare-fun $generated@@35 (T@U) Bool)
(declare-fun $generated@@36 (T@U) T@U)
(declare-fun $generated@@37 (T@U) T@U)
(declare-fun $generated@@38 (T@U) Bool)
(declare-fun $generated@@39 (Int) Int)
(declare-fun $generated@@40 (T@U) Int)
(declare-fun $generated@@50 (T@U) T@U)
(declare-fun $generated@@53 (T@U) Bool)
(declare-fun $generated@@55 (T@T T@U) T@U)
(declare-fun $generated@@56 (T@T T@U) T@U)
(declare-fun $generated@@62 (Int) T@U)
(declare-fun $generated@@65 (Int) T@U)
(declare-fun $generated@@85 (T@U) Int)
(declare-fun $generated@@89 (T@U) Int)
(declare-fun $generated@@98 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@99 () T@T)
(declare-fun $generated@@100 () T@T)
(declare-fun $generated@@101 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@102 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@103 () T@T)
(declare-fun $generated@@104 (T@T T@T) T@T)
(declare-fun $generated@@105 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@106 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@107 (T@T) T@T)
(declare-fun $generated@@108 (T@T) T@T)
(declare-fun $generated@@157 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@158 (T@U) Bool)
(declare-fun $generated@@166 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@7 $generated@@8) 0) (= ($generated@@7 $generated@@9) 1)) (= ($generated@@7 $generated@@10) 2)) (forall (($generated@@17 Bool) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Int) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@16 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 T@U) ) (! (= ($generated@@15 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6)
)
(assert (= ($generated@@23 $generated) $generated@@0))
(assert (= ($generated@@7 $generated@@25) 3))
(assert (forall (($generated@@28 T@U) ($generated@@29 T@U) ) (! (= ($generated@@24 $generated@@25 ($generated@@26 $generated@@28 $generated@@29) $generated@@27)  (and ($generated@@24 $generated@@25 $generated@@28 $generated@@27) ($generated@@24 $generated@@25 $generated@@29 $generated@@27)))
 :pattern ( ($generated@@24 $generated@@25 ($generated@@26 $generated@@28 $generated@@29) $generated@@27))
)))
(assert  (=> (<= 1 $generated@@30) (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (!  (=> (or ($generated@@34 ($generated@@33 $generated@@25 $generated@@42)) (and (< 1 $generated@@30) ($generated@@24 $generated@@25 $generated@@42 $generated@@27))) (and (=> ($generated@@12 ($generated@@33 $generated@@8 ($generated@@11 ($generated@@35 ($generated@@33 $generated@@25 $generated@@42))))) (let (($generated@@43 ($generated@@33 $generated@@25 ($generated@@36 ($generated@@33 $generated@@25 $generated@@42)))))
($generated@@34 $generated@@43))) (= ($generated@@31 ($generated@@32 $generated@@41) ($generated@@33 $generated@@25 $generated@@42)) (ite ($generated@@35 ($generated@@33 $generated@@25 $generated@@42)) (let (($generated@@44 ($generated@@33 $generated@@25 ($generated@@37 ($generated@@33 $generated@@25 $generated@@42)))))
(let (($generated@@45 ($generated@@33 $generated@@25 ($generated@@36 ($generated@@33 $generated@@25 $generated@@42)))))
(let (($generated@@46 ($generated@@33 $generated@@25 ($generated@@31 ($generated@@32 $generated@@41) $generated@@45))))
(ite  (and ($generated@@38 $generated@@46) (= ($generated@@39 ($generated@@40 $generated@@46)) ($generated@@39 0))) $generated@@44 ($generated@@26 $generated@@46 $generated@@44))))) (ite ($generated@@38 ($generated@@33 $generated@@25 $generated@@42)) ($generated@@33 $generated@@25 $generated@@42) ($generated@@33 $generated@@25 $generated@@42))))))
 :weight 3
 :pattern ( ($generated@@31 ($generated@@32 $generated@@41) ($generated@@33 $generated@@25 $generated@@42)))
))))
(assert (forall (($generated@@47 Int) ) (! (= ($generated@@39 $generated@@47) $generated@@47)
 :pattern ( ($generated@@39 $generated@@47))
)))
(assert (forall (($generated@@48 T@U) ($generated@@49 T@T) ) (! (= ($generated@@33 $generated@@49 $generated@@48) $generated@@48)
 :pattern ( ($generated@@33 $generated@@49 $generated@@48))
)))
(assert (forall (($generated@@51 T@U) ) (! (= ($generated@@35 $generated@@51) (= ($generated@@50 $generated@@51) $generated@@3))
 :pattern ( ($generated@@35 $generated@@51))
)))
(assert (forall (($generated@@52 T@U) ) (! (= ($generated@@38 $generated@@52) (= ($generated@@50 $generated@@52) $generated@@4))
 :pattern ( ($generated@@38 $generated@@52))
)))
(assert (forall (($generated@@54 T@U) ) (! (= ($generated@@53 $generated@@54) (= ($generated@@50 $generated@@54) $generated@@5))
 :pattern ( ($generated@@53 $generated@@54))
)))
(assert (forall (($generated@@57 T@U) ($generated@@58 T@T) ) (! (= ($generated@@56 $generated@@58 ($generated@@55 $generated@@58 $generated@@57)) $generated@@57)
 :pattern ( ($generated@@55 $generated@@58 $generated@@57))
)))
(assert (forall (($generated@@59 T@U) ) (!  (=> ($generated@@35 $generated@@59) (exists (($generated@@60 T@U) ($generated@@61 T@U) ) (= $generated@@59 ($generated@@26 $generated@@60 $generated@@61))))
 :pattern ( ($generated@@35 $generated@@59))
)))
(assert (forall (($generated@@63 T@U) ) (!  (=> ($generated@@38 $generated@@63) (exists (($generated@@64 Int) ) (= $generated@@63 ($generated@@62 $generated@@64))))
 :pattern ( ($generated@@38 $generated@@63))
)))
(assert (forall (($generated@@66 T@U) ) (!  (=> ($generated@@53 $generated@@66) (exists (($generated@@67 Int) ) (= $generated@@66 ($generated@@65 $generated@@67))))
 :pattern ( ($generated@@53 $generated@@66))
)))
(assert  (=> (<= 1 $generated@@30) (forall (($generated@@68 T@U) ($generated@@69 T@U) ) (!  (=> (or ($generated@@34 $generated@@69) (and (< 1 $generated@@30) ($generated@@24 $generated@@25 $generated@@69 $generated@@27))) (and (=> ($generated@@35 $generated@@69) (let (($generated@@70 ($generated@@36 $generated@@69)))
($generated@@34 $generated@@70))) (= ($generated@@31 ($generated@@32 $generated@@68) $generated@@69) (ite ($generated@@35 $generated@@69) (let (($generated@@71 ($generated@@37 $generated@@69)))
(let (($generated@@72 ($generated@@36 $generated@@69)))
(let (($generated@@73 ($generated@@31 $generated@@68 $generated@@72)))
(ite  (and ($generated@@38 $generated@@73) (= ($generated@@40 $generated@@73) ($generated@@39 0))) $generated@@71 ($generated@@26 $generated@@73 $generated@@71))))) (ite ($generated@@38 $generated@@69) $generated@@69 $generated@@69)))))
 :pattern ( ($generated@@31 ($generated@@32 $generated@@68) $generated@@69))
))))
(assert  (=> (<= 1 $generated@@30) (forall (($generated@@74 T@U) ($generated@@75 T@U) ) (!  (=> (or ($generated@@34 $generated@@75) (and (< 1 $generated@@30) ($generated@@24 $generated@@25 $generated@@75 $generated@@27))) ($generated@@24 $generated@@25 ($generated@@31 $generated@@74 $generated@@75) $generated@@27))
 :pattern ( ($generated@@31 $generated@@74 $generated@@75))
))))
(assert (forall (($generated@@76 T@U) ($generated@@77 T@U) ) (! (= ($generated@@50 ($generated@@26 $generated@@76 $generated@@77)) $generated@@3)
 :pattern ( ($generated@@26 $generated@@76 $generated@@77))
)))
(assert (forall (($generated@@78 T@U) ($generated@@79 T@U) ) (! (= ($generated@@36 ($generated@@26 $generated@@78 $generated@@79)) $generated@@78)
 :pattern ( ($generated@@26 $generated@@78 $generated@@79))
)))
(assert (forall (($generated@@80 T@U) ($generated@@81 T@U) ) (! (= ($generated@@37 ($generated@@26 $generated@@80 $generated@@81)) $generated@@81)
 :pattern ( ($generated@@26 $generated@@80 $generated@@81))
)))
(assert (forall (($generated@@82 Int) ) (! (= ($generated@@50 ($generated@@62 $generated@@82)) $generated@@4)
 :pattern ( ($generated@@62 $generated@@82))
)))
(assert (forall (($generated@@83 Int) ) (! (= ($generated@@40 ($generated@@62 $generated@@83)) $generated@@83)
 :pattern ( ($generated@@62 $generated@@83))
)))
(assert (forall (($generated@@84 Int) ) (! (= ($generated@@50 ($generated@@65 $generated@@84)) $generated@@5)
 :pattern ( ($generated@@65 $generated@@84))
)))
(assert (forall (($generated@@86 Int) ) (! (= ($generated@@85 ($generated@@65 $generated@@86)) $generated@@86)
 :pattern ( ($generated@@65 $generated@@86))
)))
(assert (forall (($generated@@87 T@U) ($generated@@88 T@T) ) (! (= ($generated@@55 $generated@@88 ($generated@@56 $generated@@88 $generated@@87)) $generated@@87)
 :pattern ( ($generated@@56 $generated@@88 $generated@@87))
)))
(assert (forall (($generated@@90 T@U) ($generated@@91 T@U) ) (! (< ($generated@@89 $generated@@90) ($generated@@89 ($generated@@26 $generated@@90 $generated@@91)))
 :pattern ( ($generated@@26 $generated@@90 $generated@@91))
)))
(assert (forall (($generated@@92 T@U) ($generated@@93 T@U) ) (! (< ($generated@@89 $generated@@93) ($generated@@89 ($generated@@26 $generated@@92 $generated@@93)))
 :pattern ( ($generated@@26 $generated@@92 $generated@@93))
)))
(assert (forall (($generated@@94 T@U) ($generated@@95 T@U) ) (! (= ($generated@@31 ($generated@@32 $generated@@94) $generated@@95) ($generated@@31 $generated@@94 $generated@@95))
 :pattern ( ($generated@@31 ($generated@@32 $generated@@94) $generated@@95))
)))
(assert (forall (($generated@@96 Int) ) (! (= ($generated@@24 $generated@@25 ($generated@@62 $generated@@96) $generated@@27) ($generated@@24 $generated@@9 ($generated@@13 $generated@@96) $generated))
 :pattern ( ($generated@@24 $generated@@25 ($generated@@62 $generated@@96) $generated@@27))
)))
(assert (forall (($generated@@97 Int) ) (! (= ($generated@@24 $generated@@25 ($generated@@65 $generated@@97) $generated@@27) ($generated@@24 $generated@@9 ($generated@@13 $generated@@97) $generated))
 :pattern ( ($generated@@24 $generated@@25 ($generated@@65 $generated@@97) $generated@@27))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@109 T@T) ($generated@@110 T@T) ($generated@@111 T@T) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (! (= ($generated@@98 $generated@@109 $generated@@110 $generated@@111 ($generated@@105 $generated@@109 $generated@@110 $generated@@111 $generated@@113 $generated@@114 $generated@@115 $generated@@112) $generated@@114 $generated@@115) $generated@@112)
 :weight 0
)) (and (forall (($generated@@116 T@T) ($generated@@117 T@T) ($generated@@118 T@T) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ) (!  (or (= $generated@@121 $generated@@123) (= ($generated@@98 $generated@@116 $generated@@117 $generated@@118 ($generated@@105 $generated@@116 $generated@@117 $generated@@118 $generated@@120 $generated@@121 $generated@@122 $generated@@119) $generated@@123 $generated@@124) ($generated@@98 $generated@@116 $generated@@117 $generated@@118 $generated@@120 $generated@@123 $generated@@124)))
 :weight 0
)) (forall (($generated@@125 T@T) ($generated@@126 T@T) ($generated@@127 T@T) ($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ) (!  (or (= $generated@@131 $generated@@133) (= ($generated@@98 $generated@@125 $generated@@126 $generated@@127 ($generated@@105 $generated@@125 $generated@@126 $generated@@127 $generated@@129 $generated@@130 $generated@@131 $generated@@128) $generated@@132 $generated@@133) ($generated@@98 $generated@@125 $generated@@126 $generated@@127 $generated@@129 $generated@@132 $generated@@133)))
 :weight 0
)))) (= ($generated@@7 $generated@@99) 4)) (= ($generated@@7 $generated@@100) 5)) (forall (($generated@@134 T@T) ($generated@@135 T@T) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ) (! (= ($generated@@102 $generated@@134 $generated@@135 ($generated@@106 $generated@@134 $generated@@135 $generated@@137 $generated@@138 $generated@@136) $generated@@138) $generated@@136)
 :weight 0
))) (forall (($generated@@139 T@T) ($generated@@140 T@T) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ) (!  (or (= $generated@@143 $generated@@144) (= ($generated@@102 $generated@@139 $generated@@140 ($generated@@106 $generated@@139 $generated@@140 $generated@@142 $generated@@143 $generated@@141) $generated@@144) ($generated@@102 $generated@@139 $generated@@140 $generated@@142 $generated@@144)))
 :weight 0
))) (= ($generated@@7 $generated@@103) 6)) (forall (($generated@@145 T@T) ($generated@@146 T@T) ) (= ($generated@@7 ($generated@@104 $generated@@145 $generated@@146)) 7))) (forall (($generated@@147 T@T) ($generated@@148 T@T) ) (! (= ($generated@@107 ($generated@@104 $generated@@147 $generated@@148)) $generated@@147)
 :pattern ( ($generated@@104 $generated@@147 $generated@@148))
))) (forall (($generated@@149 T@T) ($generated@@150 T@T) ) (! (= ($generated@@108 ($generated@@104 $generated@@149 $generated@@150)) $generated@@150)
 :pattern ( ($generated@@104 $generated@@149 $generated@@150))
))))
(assert (forall (($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 T@U) ($generated@@154 Bool) ($generated@@155 T@U) ($generated@@156 T@U) ) (! (= ($generated@@12 ($generated@@98 $generated@@99 $generated@@100 $generated@@8 ($generated@@101 $generated@@151 $generated@@152 $generated@@153 $generated@@154) $generated@@155 $generated@@156))  (=> (and (or (not (= $generated@@155 $generated@@151)) (not true)) ($generated@@12 ($generated@@55 $generated@@8 ($generated@@102 $generated@@100 $generated@@103 ($generated@@102 $generated@@99 ($generated@@104 $generated@@100 $generated@@103) $generated@@152 $generated@@155) $generated@@153)))) $generated@@154))
 :pattern ( ($generated@@98 $generated@@99 $generated@@100 $generated@@8 ($generated@@101 $generated@@151 $generated@@152 $generated@@153 $generated@@154) $generated@@155 $generated@@156))
)))
(assert (forall (($generated@@159 T@U) ($generated@@160 T@U) ) (!  (=> (and ($generated@@158 $generated@@160) (and ($generated@@38 $generated@@159) ($generated@@157 $generated@@25 $generated@@159 $generated@@27 $generated@@160))) ($generated@@157 $generated@@9 ($generated@@13 ($generated@@40 $generated@@159)) $generated $generated@@160))
 :pattern ( ($generated@@157 $generated@@9 ($generated@@13 ($generated@@40 $generated@@159)) $generated $generated@@160))
)))
(assert (forall (($generated@@161 T@U) ($generated@@162 T@U) ) (!  (=> (and ($generated@@158 $generated@@162) (and ($generated@@53 $generated@@161) ($generated@@157 $generated@@25 $generated@@161 $generated@@27 $generated@@162))) ($generated@@157 $generated@@9 ($generated@@13 ($generated@@85 $generated@@161)) $generated $generated@@162))
 :pattern ( ($generated@@157 $generated@@9 ($generated@@13 ($generated@@85 $generated@@161)) $generated $generated@@162))
)))
(assert (forall (($generated@@163 T@U) ) (!  (=> ($generated@@24 $generated@@25 $generated@@163 $generated@@27) (or (or ($generated@@35 $generated@@163) ($generated@@38 $generated@@163)) ($generated@@53 $generated@@163)))
 :pattern ( ($generated@@53 $generated@@163) ($generated@@24 $generated@@25 $generated@@163 $generated@@27))
 :pattern ( ($generated@@38 $generated@@163) ($generated@@24 $generated@@25 $generated@@163 $generated@@27))
 :pattern ( ($generated@@35 $generated@@163) ($generated@@24 $generated@@25 $generated@@163 $generated@@27))
)))
(assert (forall (($generated@@164 T@U) ($generated@@165 T@U) ) (!  (=> (and ($generated@@158 $generated@@165) ($generated@@24 $generated@@25 $generated@@164 $generated@@27)) ($generated@@157 $generated@@25 $generated@@164 $generated@@27 $generated@@165))
 :pattern ( ($generated@@157 $generated@@25 $generated@@164 $generated@@27 $generated@@165))
)))
(assert (= ($generated@@23 $generated@@27) $generated@@2))
(assert (= ($generated@@166 $generated@@27) $generated@@6))
(assert (forall (($generated@@167 T@U) ($generated@@168 T@U) ) (!  (=> (and ($generated@@158 $generated@@168) (and ($generated@@35 $generated@@167) ($generated@@157 $generated@@25 $generated@@167 $generated@@27 $generated@@168))) ($generated@@157 $generated@@25 ($generated@@36 $generated@@167) $generated@@27 $generated@@168))
 :pattern ( ($generated@@157 $generated@@25 ($generated@@36 $generated@@167) $generated@@27 $generated@@168))
)))
(assert (forall (($generated@@169 T@U) ($generated@@170 T@U) ) (!  (=> (and ($generated@@158 $generated@@170) (and ($generated@@35 $generated@@169) ($generated@@157 $generated@@25 $generated@@169 $generated@@27 $generated@@170))) ($generated@@157 $generated@@25 ($generated@@37 $generated@@169) $generated@@27 $generated@@170))
 :pattern ( ($generated@@157 $generated@@25 ($generated@@37 $generated@@169) $generated@@27 $generated@@170))
)))
(assert (forall (($generated@@171 T@U) ($generated@@172 T@U) ) (! (= ($generated@@26 ($generated@@33 $generated@@25 $generated@@171) ($generated@@33 $generated@@25 $generated@@172)) ($generated@@33 $generated@@25 ($generated@@26 $generated@@171 $generated@@172)))
 :pattern ( ($generated@@26 ($generated@@33 $generated@@25 $generated@@171) ($generated@@33 $generated@@25 $generated@@172)))
)))
(assert (forall (($generated@@173 Int) ) (! (= ($generated@@56 $generated@@9 ($generated@@13 ($generated@@39 $generated@@173))) ($generated@@33 $generated@@103 ($generated@@56 $generated@@9 ($generated@@13 $generated@@173))))
 :pattern ( ($generated@@56 $generated@@9 ($generated@@13 ($generated@@39 $generated@@173))))
)))
(assert (forall (($generated@@174 Int) ) (! (= ($generated@@62 ($generated@@39 $generated@@174)) ($generated@@33 $generated@@25 ($generated@@62 $generated@@174)))
 :pattern ( ($generated@@62 ($generated@@39 $generated@@174)))
)))
(assert (forall (($generated@@175 Int) ) (! (= ($generated@@65 ($generated@@39 $generated@@175)) ($generated@@33 $generated@@25 ($generated@@65 $generated@@175)))
 :pattern ( ($generated@@65 ($generated@@39 $generated@@175)))
)))
(assert (forall (($generated@@176 T@U) ($generated@@177 T@T) ) (! (= ($generated@@56 $generated@@177 ($generated@@33 $generated@@177 $generated@@176)) ($generated@@33 $generated@@103 ($generated@@56 $generated@@177 $generated@@176)))
 :pattern ( ($generated@@56 $generated@@177 ($generated@@33 $generated@@177 $generated@@176)))
)))
(assert (forall (($generated@@178 T@U) ($generated@@179 T@U) ) (! ($generated@@157 $generated@@9 $generated@@179 $generated $generated@@178)
 :pattern ( ($generated@@157 $generated@@9 $generated@@179 $generated $generated@@178))
)))
(assert (forall (($generated@@180 T@U) ) (! ($generated@@24 $generated@@9 $generated@@180 $generated)
 :pattern ( ($generated@@24 $generated@@9 $generated@@180 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@181 () T@U)
(declare-fun $generated@@182 () T@U)
(declare-fun $generated@@183 () T@U)
(declare-fun $generated@@184 () T@U)
(declare-fun $generated@@185 () T@U)
(declare-fun $generated@@186 () T@U)
(declare-fun $generated@@187 () T@U)
(declare-fun $generated@@188 () T@U)
(declare-fun $generated@@189 () T@U)
(declare-fun $generated@@190 () T@U)
(declare-fun $generated@@191 () T@U)
(declare-fun $generated@@192 () Int)
(declare-fun $generated@@193 () T@U)
(declare-fun $generated@@194 () T@U)
(declare-fun $generated@@195 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 15) (let (($generated@@196 true))
(let (($generated@@197 true))
(let (($generated@@198  (=> (not ($generated@@38 $generated@@181)) (and (=> (= (ControlFlow 0 11) 7) $generated@@197) (=> (= (ControlFlow 0 11) 8) $generated@@196)))))
(let (($generated@@199  (=> ($generated@@38 $generated@@181) (and (=> (= (ControlFlow 0 9) (- 0 10)) ($generated@@38 $generated@@181)) (=> ($generated@@38 $generated@@181) (and (=> (= (ControlFlow 0 9) 7) $generated@@197) (=> (= (ControlFlow 0 9) 8) $generated@@196)))))))
(let (($generated@@200  (=> (and (= $generated@@182 ($generated@@26 $generated@@183 $generated@@184)) ($generated@@24 $generated@@25 $generated@@183 $generated@@27)) (=> (and (and (and ($generated@@24 $generated@@25 $generated@@184 $generated@@27) (= $generated@@185 $generated@@184)) (and ($generated@@24 $generated@@25 $generated@@185 $generated@@27) (= $generated@@186 $generated@@185))) (and (and (= $generated@@187 $generated@@183) ($generated@@24 $generated@@25 $generated@@187 $generated@@27)) (and (= $generated@@188 $generated@@187) ($generated@@157 $generated@@25 $generated@@188 $generated@@27 $generated@@189)))) (and (=> (= (ControlFlow 0 12) (- 0 13)) (< ($generated@@89 $generated@@188) ($generated@@89 $generated@@182))) (=> (< ($generated@@89 $generated@@188) ($generated@@89 $generated@@182)) (=> ($generated@@34 $generated@@188) (=> (and (and (= $generated@@190 ($generated@@31 ($generated@@32 $generated@@191) $generated@@188)) ($generated@@34 $generated@@188)) (and ($generated@@24 $generated@@25 $generated@@190 $generated@@27) (= $generated@@181 $generated@@190))) (and (=> (= (ControlFlow 0 12) 9) $generated@@199) (=> (= (ControlFlow 0 12) 11) $generated@@198))))))))))
(let (($generated@@201 true))
(let (($generated@@202 true))
(let (($generated@@203  (=> (or (not (= $generated@@182 ($generated@@62 $generated@@192))) (not true)) (and (=> (= (ControlFlow 0 5) 3) $generated@@202) (=> (= (ControlFlow 0 5) 4) $generated@@201)))))
(let (($generated@@204 true))
(let (($generated@@205  (=> (or (not (= $generated@@182 ($generated@@26 $generated@@183 $generated@@184))) (not true)) (and (=> (= (ControlFlow 0 6) 2) $generated@@204) (=> (= (ControlFlow 0 6) 5) $generated@@203)))))
(let (($generated@@206 true))
(let (($generated@@207  (=> (= $generated@@193 ($generated@@101 $generated@@194 $generated@@189 $generated@@1 false)) (and (and (=> (= (ControlFlow 0 14) 1) $generated@@206) (=> (= (ControlFlow 0 14) 12) $generated@@200)) (=> (= (ControlFlow 0 14) 6) $generated@@205)))))
(let (($generated@@208  (=> (and (and (and ($generated@@158 $generated@@189) ($generated@@195 $generated@@189)) ($generated@@24 $generated@@25 $generated@@182 $generated@@27)) (and (= 1 $generated@@30) (= (ControlFlow 0 15) 14))) $generated@@207)))
$generated@@208))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
