(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 (Bool) T@U)
(declare-fun $generated@@6 (T@U) Bool)
(declare-fun $generated@@7 (Int) T@U)
(declare-fun $generated@@8 (T@U) Int)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@17 () Int)
(declare-fun $generated@@18 (T@U T@U) T@U)
(declare-fun $generated@@19 (T@U T@U) Bool)
(declare-fun $generated@@20 (T@T T@U T@U) Bool)
(declare-fun $generated@@21 () T@T)
(declare-fun $generated@@22 (T@U) T@U)
(declare-fun $generated@@23 (T@U T@U) Bool)
(declare-fun $generated@@24 (T@U T@U) Bool)
(declare-fun $generated@@28 (T@U T@U) T@U)
(declare-fun $generated@@29 (T@U T@U) Bool)
(declare-fun $generated@@32 () T@U)
(declare-fun $generated@@34 (T@U) Int)
(declare-fun $generated@@35 (T@U) Bool)
(declare-fun $generated@@41 (T@U T@U T@U) Bool)
(declare-fun $generated@@42 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@47 (T@T T@U) T@U)
(declare-fun $generated@@50 (T@T T@U) T@U)
(declare-fun $generated@@51 (T@T T@U) T@U)
(declare-fun $generated@@63 (T@U Int) T@U)
(declare-fun $generated@@75 (T@U) T@U)
(declare-fun $generated@@77 (T@U) T@U)
(declare-fun $generated@@81 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@82 () T@T)
(declare-fun $generated@@83 () T@T)
(declare-fun $generated@@84 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@85 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@86 () T@T)
(declare-fun $generated@@87 (T@T T@T) T@T)
(declare-fun $generated@@88 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@89 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@90 (T@T) T@T)
(declare-fun $generated@@91 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (forall (($generated@@11 Bool) ) (! (= ($generated@@6 ($generated@@5 $generated@@11)) $generated@@11)
 :pattern ( ($generated@@5 $generated@@11))
))) (forall (($generated@@12 T@U) ) (! (= ($generated@@5 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 Int) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))))
(assert (distinct $generated $generated@@0)
)
(assert (= ($generated@@1 $generated@@21) 3))
(assert  (=> (<= 0 $generated@@17) (forall (($generated@@25 T@U) ($generated@@26 T@U) ) (!  (=> (or ($generated@@19 $generated@@25 $generated@@26) (and (< 0 $generated@@17) (and ($generated@@20 $generated@@21 $generated@@26 ($generated@@22 $generated@@25)) (exists (($generated@@27 T@U) ) (!  (and ($generated@@24 $generated@@27 $generated@@25) ($generated@@23 $generated@@26 $generated@@27))
 :pattern ( ($generated@@23 $generated@@26 $generated@@27))
))))) ($generated@@24 ($generated@@18 $generated@@25 $generated@@26) $generated@@25))
 :pattern ( ($generated@@18 $generated@@25 $generated@@26))
))))
(assert (forall (($generated@@30 T@U) ($generated@@31 T@U) ) (!  (=> ($generated@@29 $generated@@30 $generated@@31) ($generated@@23 $generated@@31 ($generated@@28 $generated@@30 $generated@@31)))
 :pattern ( ($generated@@28 $generated@@30 $generated@@31))
)))
(assert (forall (($generated@@33 T@U) ) (!  (not ($generated@@23 $generated@@32 $generated@@33))
 :pattern ( ($generated@@23 $generated@@32 $generated@@33))
)))
(assert (= ($generated@@34 $generated@@32) 0))
(assert  (=> (<= 0 $generated@@17) (forall (($generated@@36 T@U) ($generated@@37 T@U) ($generated@@38 T@U) ) (!  (=> (or ($generated@@19 $generated@@36 $generated@@38) (and (< 0 $generated@@17) (and (and ($generated@@35 $generated@@37) ($generated@@20 $generated@@21 $generated@@38 ($generated@@22 $generated@@36))) (exists (($generated@@39 T@U) ) (!  (and ($generated@@24 $generated@@39 $generated@@36) ($generated@@23 $generated@@38 $generated@@39))
 :pattern ( ($generated@@23 $generated@@38 $generated@@39))
))))) (and ($generated@@29 $generated@@36 $generated@@38) (= ($generated@@18 $generated@@36 $generated@@38) (let (($generated@@40 ($generated@@28 $generated@@36 $generated@@38)))
$generated@@40))))
 :pattern ( ($generated@@18 $generated@@36 $generated@@38) ($generated@@35 $generated@@37))
))))
(assert  (=> (<= 0 $generated@@17) (forall (($generated@@43 T@U) ($generated@@44 T@U) ($generated@@45 T@U) ) (!  (=> (and (or ($generated@@19 $generated@@44 $generated@@45) (and (< 0 $generated@@17) (and (and ($generated@@20 $generated@@21 $generated@@45 ($generated@@22 $generated@@44)) ($generated@@42 $generated@@21 $generated@@45 ($generated@@22 $generated@@44) $generated@@43)) (exists (($generated@@46 T@U) ) (!  (and ($generated@@24 $generated@@46 $generated@@44) ($generated@@23 $generated@@45 $generated@@46))
 :pattern ( ($generated@@23 $generated@@45 $generated@@46))
))))) ($generated@@35 $generated@@43)) ($generated@@41 ($generated@@18 $generated@@44 $generated@@45) $generated@@44 $generated@@43))
 :pattern ( ($generated@@41 ($generated@@18 $generated@@44 $generated@@45) $generated@@44 $generated@@43))
))))
(assert (forall (($generated@@48 T@U) ($generated@@49 T@T) ) (! (= ($generated@@47 $generated@@49 $generated@@48) $generated@@48)
 :pattern ( ($generated@@47 $generated@@49 $generated@@48))
)))
(assert (forall (($generated@@52 T@U) ($generated@@53 T@T) ) (! (= ($generated@@51 $generated@@53 ($generated@@50 $generated@@53 $generated@@52)) $generated@@52)
 :pattern ( ($generated@@50 $generated@@53 $generated@@52))
)))
(assert (forall (($generated@@54 T@U) ($generated@@55 T@U) ($generated@@56 T@U) ($generated@@57 T@T) ) (! (= ($generated@@41 ($generated@@51 $generated@@57 $generated@@54) $generated@@55 $generated@@56) ($generated@@42 $generated@@57 $generated@@54 $generated@@55 $generated@@56))
 :pattern ( ($generated@@41 ($generated@@51 $generated@@57 $generated@@54) $generated@@55 $generated@@56))
)))
(assert  (=> (<= 0 $generated@@17) (forall (($generated@@58 T@U) ($generated@@59 T@U) ($generated@@60 T@U) ) (!  (=> (or ($generated@@19 $generated@@58 ($generated@@47 $generated@@21 $generated@@60)) (and (< 0 $generated@@17) (and (and ($generated@@35 $generated@@59) ($generated@@20 $generated@@21 $generated@@60 ($generated@@22 $generated@@58))) (exists (($generated@@61 T@U) ) (!  (and ($generated@@24 $generated@@61 $generated@@58) ($generated@@23 $generated@@60 $generated@@61))
 :pattern ( ($generated@@23 $generated@@60 $generated@@61))
))))) (and ($generated@@29 $generated@@58 ($generated@@47 $generated@@21 $generated@@60)) (= ($generated@@18 $generated@@58 ($generated@@47 $generated@@21 $generated@@60)) (let (($generated@@62 ($generated@@28 $generated@@58 ($generated@@47 $generated@@21 $generated@@60))))
$generated@@62))))
 :weight 3
 :pattern ( ($generated@@18 $generated@@58 ($generated@@47 $generated@@21 $generated@@60)) ($generated@@35 $generated@@59))
))))
(assert (forall (($generated@@64 T@U) ($generated@@65 T@U) ) (! (= ($generated@@23 $generated@@64 $generated@@65) (exists (($generated@@66 Int) ) (!  (and (and (<= 0 $generated@@66) (< $generated@@66 ($generated@@34 $generated@@64))) (= ($generated@@63 $generated@@64 $generated@@66) $generated@@65))
 :pattern ( ($generated@@63 $generated@@64 $generated@@66))
)))
 :pattern ( ($generated@@23 $generated@@64 $generated@@65))
)))
(assert (forall (($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@T) ) (! (= ($generated@@24 ($generated@@51 $generated@@69 $generated@@67) $generated@@68) ($generated@@20 $generated@@69 $generated@@67 $generated@@68))
 :pattern ( ($generated@@24 ($generated@@51 $generated@@69 $generated@@67) $generated@@68))
)))
(assert (forall (($generated@@70 T@U) ) (! (<= 0 ($generated@@34 $generated@@70))
 :pattern ( ($generated@@34 $generated@@70))
)))
(assert (forall (($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ) (! (= ($generated@@42 $generated@@21 $generated@@71 ($generated@@22 $generated@@72) $generated@@73) (forall (($generated@@74 Int) ) (!  (=> (and (<= 0 $generated@@74) (< $generated@@74 ($generated@@34 $generated@@71))) ($generated@@41 ($generated@@63 $generated@@71 $generated@@74) $generated@@72 $generated@@73))
 :pattern ( ($generated@@63 $generated@@71 $generated@@74))
)))
 :pattern ( ($generated@@42 $generated@@21 $generated@@71 ($generated@@22 $generated@@72) $generated@@73))
)))
(assert (forall (($generated@@76 T@U) ) (! (= ($generated@@75 ($generated@@22 $generated@@76)) $generated@@76)
 :pattern ( ($generated@@22 $generated@@76))
)))
(assert (forall (($generated@@78 T@U) ) (! (= ($generated@@77 ($generated@@22 $generated@@78)) $generated)
 :pattern ( ($generated@@22 $generated@@78))
)))
(assert (forall (($generated@@79 T@U) ($generated@@80 T@T) ) (! (= ($generated@@50 $generated@@80 ($generated@@51 $generated@@80 $generated@@79)) $generated@@79)
 :pattern ( ($generated@@51 $generated@@80 $generated@@79))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@92 T@T) ($generated@@93 T@T) ($generated@@94 T@T) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ) (! (= ($generated@@81 $generated@@92 $generated@@93 $generated@@94 ($generated@@88 $generated@@92 $generated@@93 $generated@@94 $generated@@96 $generated@@97 $generated@@98 $generated@@95) $generated@@97 $generated@@98) $generated@@95)
 :weight 0
)) (and (forall (($generated@@99 T@T) ($generated@@100 T@T) ($generated@@101 T@T) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ) (!  (or (= $generated@@104 $generated@@106) (= ($generated@@81 $generated@@99 $generated@@100 $generated@@101 ($generated@@88 $generated@@99 $generated@@100 $generated@@101 $generated@@103 $generated@@104 $generated@@105 $generated@@102) $generated@@106 $generated@@107) ($generated@@81 $generated@@99 $generated@@100 $generated@@101 $generated@@103 $generated@@106 $generated@@107)))
 :weight 0
)) (forall (($generated@@108 T@T) ($generated@@109 T@T) ($generated@@110 T@T) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ) (!  (or (= $generated@@114 $generated@@116) (= ($generated@@81 $generated@@108 $generated@@109 $generated@@110 ($generated@@88 $generated@@108 $generated@@109 $generated@@110 $generated@@112 $generated@@113 $generated@@114 $generated@@111) $generated@@115 $generated@@116) ($generated@@81 $generated@@108 $generated@@109 $generated@@110 $generated@@112 $generated@@115 $generated@@116)))
 :weight 0
)))) (= ($generated@@1 $generated@@82) 4)) (= ($generated@@1 $generated@@83) 5)) (forall (($generated@@117 T@T) ($generated@@118 T@T) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ) (! (= ($generated@@85 $generated@@117 $generated@@118 ($generated@@89 $generated@@117 $generated@@118 $generated@@120 $generated@@121 $generated@@119) $generated@@121) $generated@@119)
 :weight 0
))) (forall (($generated@@122 T@T) ($generated@@123 T@T) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 T@U) ) (!  (or (= $generated@@126 $generated@@127) (= ($generated@@85 $generated@@122 $generated@@123 ($generated@@89 $generated@@122 $generated@@123 $generated@@125 $generated@@126 $generated@@124) $generated@@127) ($generated@@85 $generated@@122 $generated@@123 $generated@@125 $generated@@127)))
 :weight 0
))) (= ($generated@@1 $generated@@86) 6)) (forall (($generated@@128 T@T) ($generated@@129 T@T) ) (= ($generated@@1 ($generated@@87 $generated@@128 $generated@@129)) 7))) (forall (($generated@@130 T@T) ($generated@@131 T@T) ) (! (= ($generated@@90 ($generated@@87 $generated@@130 $generated@@131)) $generated@@130)
 :pattern ( ($generated@@87 $generated@@130 $generated@@131))
))) (forall (($generated@@132 T@T) ($generated@@133 T@T) ) (! (= ($generated@@91 ($generated@@87 $generated@@132 $generated@@133)) $generated@@133)
 :pattern ( ($generated@@87 $generated@@132 $generated@@133))
))))
(assert (forall (($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 Bool) ($generated@@138 T@U) ($generated@@139 T@U) ) (! (= ($generated@@6 ($generated@@81 $generated@@82 $generated@@83 $generated@@2 ($generated@@84 $generated@@134 $generated@@135 $generated@@136 $generated@@137) $generated@@138 $generated@@139))  (=> (and (or (not (= $generated@@138 $generated@@134)) (not true)) ($generated@@6 ($generated@@50 $generated@@2 ($generated@@85 $generated@@83 $generated@@86 ($generated@@85 $generated@@82 ($generated@@87 $generated@@83 $generated@@86) $generated@@135 $generated@@138) $generated@@136)))) $generated@@137))
 :pattern ( ($generated@@81 $generated@@82 $generated@@83 $generated@@2 ($generated@@84 $generated@@134 $generated@@135 $generated@@136 $generated@@137) $generated@@138 $generated@@139))
)))
(assert (forall (($generated@@140 T@U) ($generated@@141 T@U) ) (!  (=> ($generated@@24 $generated@@140 ($generated@@22 $generated@@141)) (and (= ($generated@@51 $generated@@21 ($generated@@50 $generated@@21 $generated@@140)) $generated@@140) ($generated@@20 $generated@@21 ($generated@@50 $generated@@21 $generated@@140) ($generated@@22 $generated@@141))))
 :pattern ( ($generated@@24 $generated@@140 ($generated@@22 $generated@@141)))
)))
(assert (forall (($generated@@142 T@U) ($generated@@143 T@T) ) (! (= ($generated@@51 $generated@@143 ($generated@@47 $generated@@143 $generated@@142)) ($generated@@47 $generated@@86 ($generated@@51 $generated@@143 $generated@@142)))
 :pattern ( ($generated@@51 $generated@@143 ($generated@@47 $generated@@143 $generated@@142)))
)))
(assert (forall (($generated@@144 T@U) ) (!  (=> (= ($generated@@34 $generated@@144) 0) (= $generated@@144 $generated@@32))
 :pattern ( ($generated@@34 $generated@@144))
)))
(assert (forall (($generated@@145 T@U) ($generated@@146 T@U) ) (! (= ($generated@@20 $generated@@21 $generated@@145 ($generated@@22 $generated@@146)) (forall (($generated@@147 Int) ) (!  (=> (and (<= 0 $generated@@147) (< $generated@@147 ($generated@@34 $generated@@145))) ($generated@@24 ($generated@@63 $generated@@145 $generated@@147) $generated@@146))
 :pattern ( ($generated@@63 $generated@@145 $generated@@147))
)))
 :pattern ( ($generated@@20 $generated@@21 $generated@@145 ($generated@@22 $generated@@146)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@148 () T@U)
(declare-fun $generated@@149 () T@U)
(declare-fun $generated@@150 () T@U)
(declare-fun $generated@@151 () T@U)
(declare-fun $generated@@152 () T@U)
(declare-fun $generated@@153 () T@U)
(declare-fun $generated@@154 () T@U)
(declare-fun $generated@@155 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 7) (let (($generated@@156  (=> (= (ControlFlow 0 3) (- 0 2)) (exists (($generated@@157 T@U) )  (and ($generated@@24 $generated@@157 $generated@@148) ($generated@@23 $generated@@149 $generated@@157))))))
(let (($generated@@158  (=> (and (not (and ($generated@@24 $generated@@150 $generated@@148) ($generated@@41 $generated@@150 $generated@@148 $generated@@151))) (= (ControlFlow 0 5) 3)) $generated@@156)))
(let (($generated@@159  (=> (and (and ($generated@@24 $generated@@150 $generated@@148) ($generated@@41 $generated@@150 $generated@@148 $generated@@151)) (= (ControlFlow 0 4) 3)) $generated@@156)))
(let (($generated@@160 true))
(let (($generated@@161  (=> (= $generated@@152 ($generated@@84 $generated@@153 $generated@@151 $generated@@0 false)) (=> (and (and ($generated@@24 $generated@@154 $generated@@148) ($generated@@41 $generated@@154 $generated@@148 $generated@@151)) ($generated@@23 $generated@@149 $generated@@154)) (and (and (=> (= (ControlFlow 0 6) 1) $generated@@160) (=> (= (ControlFlow 0 6) 4) $generated@@159)) (=> (= (ControlFlow 0 6) 5) $generated@@158))))))
(let (($generated@@162  (=> (and (and (and ($generated@@35 $generated@@151) ($generated@@155 $generated@@151)) ($generated@@20 $generated@@21 $generated@@149 ($generated@@22 $generated@@148))) (and (= 0 $generated@@17) (= (ControlFlow 0 7) 6))) $generated@@161)))
$generated@@162)))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
