(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 (T@T) Int)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Bool) T@U)
(declare-fun $generated@@9 (T@U) Bool)
(declare-fun $generated@@10 (Int) T@U)
(declare-fun $generated@@11 (T@U) Int)
(declare-fun $generated@@12 (Real) T@U)
(declare-fun $generated@@13 (T@U) Real)
(declare-fun $generated@@20 (T@U) T@U)
(declare-fun $generated@@21 () T@U)
(declare-fun $generated@@22 () Int)
(declare-fun $generated@@23 (T@U T@U) Bool)
(declare-fun $generated@@24 (T@U) T@U)
(declare-fun $generated@@25 (T@U) Bool)
(declare-fun $generated@@26 (T@T T@U T@U) Bool)
(declare-fun $generated@@27 () T@T)
(declare-fun $generated@@28 () T@U)
(declare-fun $generated@@29 (T@U) Bool)
(declare-fun $generated@@30 (T@U) T@U)
(declare-fun $generated@@35 (T@T T@U) T@U)
(declare-fun $generated@@43 (T@U) Bool)
(declare-fun $generated@@45 (T@T T@U) T@U)
(declare-fun $generated@@46 (T@T T@U) T@U)
(declare-fun $generated@@50 (T@U) T@U)
(declare-fun $generated@@54 (T@U) Bool)
(declare-fun $generated@@63 (T@U) Int)
(declare-fun $generated@@65 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@66 () T@T)
(declare-fun $generated@@67 () T@T)
(declare-fun $generated@@68 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@69 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@70 () T@T)
(declare-fun $generated@@71 (T@T T@T) T@T)
(declare-fun $generated@@72 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@73 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@74 (T@T) T@T)
(declare-fun $generated@@75 (T@T) T@T)
(declare-fun $generated@@124 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@125 (T@U) Bool)
(declare-fun $generated@@128 (T@U) T@U)
(declare-fun $generated@@129 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@4 $generated@@5) 0) (= ($generated@@4 $generated@@6) 1)) (= ($generated@@4 $generated@@7) 2)) (forall (($generated@@14 Bool) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Int) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Real) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3)
)
(assert (= ($generated@@20 $generated@@21) $generated@@1))
(assert (= ($generated@@4 $generated@@27) 3))
(assert  (=> (<= 1 $generated@@22) (forall (($generated@@31 T@U) ($generated@@32 T@U) ) (!  (=> (or ($generated@@25 $generated@@32) (and (< 1 $generated@@22) ($generated@@26 $generated@@27 $generated@@32 $generated@@28))) (and (=> (not ($generated@@29 $generated@@32)) (=> (not ($generated@@29 ($generated@@30 $generated@@32))) (let (($generated@@33 ($generated@@30 ($generated@@30 $generated@@32))))
($generated@@25 $generated@@33)))) (= ($generated@@23 ($generated@@24 $generated@@31) $generated@@32) (ite ($generated@@29 $generated@@32) true (ite ($generated@@29 ($generated@@30 $generated@@32)) false (let (($generated@@34 ($generated@@30 ($generated@@30 $generated@@32))))
($generated@@23 $generated@@31 $generated@@34)))))))
 :pattern ( ($generated@@23 ($generated@@24 $generated@@31) $generated@@32))
))))
(assert ($generated@@26 $generated@@27 $generated@@21 $generated@@28))
(assert (forall (($generated@@36 T@U) ($generated@@37 T@T) ) (! (= ($generated@@35 $generated@@37 $generated@@36) $generated@@36)
 :pattern ( ($generated@@35 $generated@@37 $generated@@36))
)))
(assert  (=> (<= 1 $generated@@22) (forall (($generated@@38 T@U) ($generated@@39 T@U) ) (!  (=> (or ($generated@@25 ($generated@@35 $generated@@27 $generated@@39)) (and (< 1 $generated@@22) ($generated@@26 $generated@@27 $generated@@39 $generated@@28))) (and (=> (not ($generated@@9 ($generated@@35 $generated@@5 ($generated@@8 ($generated@@29 ($generated@@35 $generated@@27 $generated@@39)))))) (=> (not ($generated@@9 ($generated@@35 $generated@@5 ($generated@@8 ($generated@@29 ($generated@@35 $generated@@27 ($generated@@30 ($generated@@35 $generated@@27 $generated@@39)))))))) (let (($generated@@40 ($generated@@35 $generated@@27 ($generated@@30 ($generated@@35 $generated@@27 ($generated@@30 ($generated@@35 $generated@@27 $generated@@39)))))))
($generated@@25 $generated@@40)))) (= ($generated@@23 ($generated@@24 $generated@@38) ($generated@@35 $generated@@27 $generated@@39)) (ite ($generated@@29 ($generated@@35 $generated@@27 $generated@@39)) true (ite ($generated@@29 ($generated@@35 $generated@@27 ($generated@@30 ($generated@@35 $generated@@27 $generated@@39)))) false ($generated@@9 (let (($generated@@41 ($generated@@35 $generated@@27 ($generated@@30 ($generated@@35 $generated@@27 ($generated@@30 ($generated@@35 $generated@@27 $generated@@39)))))))
($generated@@35 $generated@@5 ($generated@@8 ($generated@@23 ($generated@@24 $generated@@38) $generated@@41))))))))))
 :weight 3
 :pattern ( ($generated@@23 ($generated@@24 $generated@@38) ($generated@@35 $generated@@27 $generated@@39)))
))))
(assert (forall (($generated@@42 T@U) ) (! (= ($generated@@29 $generated@@42) (= ($generated@@20 $generated@@42) $generated@@1))
 :pattern ( ($generated@@29 $generated@@42))
)))
(assert (forall (($generated@@44 T@U) ) (! (= ($generated@@43 $generated@@44) (= ($generated@@20 $generated@@44) $generated@@2))
 :pattern ( ($generated@@43 $generated@@44))
)))
(assert (forall (($generated@@47 T@U) ($generated@@48 T@T) ) (! (= ($generated@@46 $generated@@48 ($generated@@45 $generated@@48 $generated@@47)) $generated@@47)
 :pattern ( ($generated@@45 $generated@@48 $generated@@47))
)))
(assert (forall (($generated@@49 T@U) ) (!  (=> ($generated@@29 $generated@@49) (= $generated@@49 $generated@@21))
 :pattern ( ($generated@@29 $generated@@49))
)))
(assert (forall (($generated@@51 T@U) ) (!  (=> ($generated@@43 $generated@@51) (exists (($generated@@52 T@U) ) (= $generated@@51 ($generated@@50 $generated@@52))))
 :pattern ( ($generated@@43 $generated@@51))
)))
(assert (forall (($generated@@53 T@U) ) (! (= ($generated@@26 $generated@@27 ($generated@@50 $generated@@53) $generated@@28) ($generated@@26 $generated@@27 $generated@@53 $generated@@28))
 :pattern ( ($generated@@26 $generated@@27 ($generated@@50 $generated@@53) $generated@@28))
)))
(assert (forall (($generated@@55 T@U) ) (!  (=> ($generated@@54 $generated@@55) (or ($generated@@29 $generated@@55) ($generated@@43 $generated@@55)))
 :pattern ( ($generated@@54 $generated@@55))
)))
(assert (forall (($generated@@56 T@U) ) (!  (=> ($generated@@26 $generated@@27 $generated@@56 $generated@@28) (or ($generated@@29 $generated@@56) ($generated@@43 $generated@@56)))
 :pattern ( ($generated@@43 $generated@@56) ($generated@@26 $generated@@27 $generated@@56 $generated@@28))
 :pattern ( ($generated@@29 $generated@@56) ($generated@@26 $generated@@27 $generated@@56 $generated@@28))
)))
(assert (forall (($generated@@57 T@U) ($generated@@58 T@U) ) (! (= ($generated@@23 ($generated@@24 $generated@@57) $generated@@58) ($generated@@23 $generated@@57 $generated@@58))
 :pattern ( ($generated@@23 ($generated@@24 $generated@@57) $generated@@58))
)))
(assert (forall (($generated@@59 T@U) ) (! (= ($generated@@20 ($generated@@50 $generated@@59)) $generated@@2)
 :pattern ( ($generated@@50 $generated@@59))
)))
(assert (forall (($generated@@60 T@U) ) (! (= ($generated@@30 ($generated@@50 $generated@@60)) $generated@@60)
 :pattern ( ($generated@@50 $generated@@60))
)))
(assert (forall (($generated@@61 T@U) ($generated@@62 T@T) ) (! (= ($generated@@45 $generated@@62 ($generated@@46 $generated@@62 $generated@@61)) $generated@@61)
 :pattern ( ($generated@@46 $generated@@62 $generated@@61))
)))
(assert (forall (($generated@@64 T@U) ) (! (< ($generated@@63 $generated@@64) ($generated@@63 ($generated@@50 $generated@@64)))
 :pattern ( ($generated@@50 $generated@@64))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@76 T@T) ($generated@@77 T@T) ($generated@@78 T@T) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (! (= ($generated@@65 $generated@@76 $generated@@77 $generated@@78 ($generated@@72 $generated@@76 $generated@@77 $generated@@78 $generated@@80 $generated@@81 $generated@@82 $generated@@79) $generated@@81 $generated@@82) $generated@@79)
 :weight 0
)) (and (forall (($generated@@83 T@T) ($generated@@84 T@T) ($generated@@85 T@T) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ) (!  (or (= $generated@@88 $generated@@90) (= ($generated@@65 $generated@@83 $generated@@84 $generated@@85 ($generated@@72 $generated@@83 $generated@@84 $generated@@85 $generated@@87 $generated@@88 $generated@@89 $generated@@86) $generated@@90 $generated@@91) ($generated@@65 $generated@@83 $generated@@84 $generated@@85 $generated@@87 $generated@@90 $generated@@91)))
 :weight 0
)) (forall (($generated@@92 T@T) ($generated@@93 T@T) ($generated@@94 T@T) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ) (!  (or (= $generated@@98 $generated@@100) (= ($generated@@65 $generated@@92 $generated@@93 $generated@@94 ($generated@@72 $generated@@92 $generated@@93 $generated@@94 $generated@@96 $generated@@97 $generated@@98 $generated@@95) $generated@@99 $generated@@100) ($generated@@65 $generated@@92 $generated@@93 $generated@@94 $generated@@96 $generated@@99 $generated@@100)))
 :weight 0
)))) (= ($generated@@4 $generated@@66) 4)) (= ($generated@@4 $generated@@67) 5)) (forall (($generated@@101 T@T) ($generated@@102 T@T) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ) (! (= ($generated@@69 $generated@@101 $generated@@102 ($generated@@73 $generated@@101 $generated@@102 $generated@@104 $generated@@105 $generated@@103) $generated@@105) $generated@@103)
 :weight 0
))) (forall (($generated@@106 T@T) ($generated@@107 T@T) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (!  (or (= $generated@@110 $generated@@111) (= ($generated@@69 $generated@@106 $generated@@107 ($generated@@73 $generated@@106 $generated@@107 $generated@@109 $generated@@110 $generated@@108) $generated@@111) ($generated@@69 $generated@@106 $generated@@107 $generated@@109 $generated@@111)))
 :weight 0
))) (= ($generated@@4 $generated@@70) 6)) (forall (($generated@@112 T@T) ($generated@@113 T@T) ) (= ($generated@@4 ($generated@@71 $generated@@112 $generated@@113)) 7))) (forall (($generated@@114 T@T) ($generated@@115 T@T) ) (! (= ($generated@@74 ($generated@@71 $generated@@114 $generated@@115)) $generated@@114)
 :pattern ( ($generated@@71 $generated@@114 $generated@@115))
))) (forall (($generated@@116 T@T) ($generated@@117 T@T) ) (! (= ($generated@@75 ($generated@@71 $generated@@116 $generated@@117)) $generated@@117)
 :pattern ( ($generated@@71 $generated@@116 $generated@@117))
))))
(assert (forall (($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 Bool) ($generated@@122 T@U) ($generated@@123 T@U) ) (! (= ($generated@@9 ($generated@@65 $generated@@66 $generated@@67 $generated@@5 ($generated@@68 $generated@@118 $generated@@119 $generated@@120 $generated@@121) $generated@@122 $generated@@123))  (=> (and (or (not (= $generated@@122 $generated@@118)) (not true)) ($generated@@9 ($generated@@45 $generated@@5 ($generated@@69 $generated@@67 $generated@@70 ($generated@@69 $generated@@66 ($generated@@71 $generated@@67 $generated@@70) $generated@@119 $generated@@122) $generated@@120)))) $generated@@121))
 :pattern ( ($generated@@65 $generated@@66 $generated@@67 $generated@@5 ($generated@@68 $generated@@118 $generated@@119 $generated@@120 $generated@@121) $generated@@122 $generated@@123))
)))
(assert (forall (($generated@@126 T@U) ($generated@@127 T@U) ) (!  (=> (and ($generated@@125 $generated@@127) ($generated@@26 $generated@@27 $generated@@126 $generated@@28)) ($generated@@124 $generated@@27 $generated@@126 $generated@@28 $generated@@127))
 :pattern ( ($generated@@124 $generated@@27 $generated@@126 $generated@@28 $generated@@127))
)))
(assert (= ($generated@@128 $generated@@28) $generated@@0))
(assert (= ($generated@@129 $generated@@28) $generated@@3))
(assert (= $generated@@21 ($generated@@35 $generated@@27 $generated@@21)))
(assert (forall (($generated@@130 T@U) ($generated@@131 T@U) ) (!  (=> (and ($generated@@125 $generated@@131) (and ($generated@@43 $generated@@130) ($generated@@124 $generated@@27 $generated@@130 $generated@@28 $generated@@131))) ($generated@@124 $generated@@27 ($generated@@30 $generated@@130) $generated@@28 $generated@@131))
 :pattern ( ($generated@@124 $generated@@27 ($generated@@30 $generated@@130) $generated@@28 $generated@@131))
)))
(assert (forall (($generated@@132 T@U) ) (! (= ($generated@@50 ($generated@@35 $generated@@27 $generated@@132)) ($generated@@35 $generated@@27 ($generated@@50 $generated@@132)))
 :pattern ( ($generated@@50 ($generated@@35 $generated@@27 $generated@@132)))
)))
(assert (forall (($generated@@133 T@U) ($generated@@134 T@T) ) (! (= ($generated@@46 $generated@@134 ($generated@@35 $generated@@134 $generated@@133)) ($generated@@35 $generated@@70 ($generated@@46 $generated@@134 $generated@@133)))
 :pattern ( ($generated@@46 $generated@@134 ($generated@@35 $generated@@134 $generated@@133)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@135 () T@U)
(declare-fun $generated@@136 () T@U)
(declare-fun $generated@@137 () T@U)
(declare-fun $generated@@138 () T@U)
(declare-fun $generated@@139 () T@U)
(declare-fun $generated@@140 () T@U)
(declare-fun $generated@@141 () T@U)
(declare-fun $generated@@142 () T@U)
(declare-fun $generated@@143 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 5) (let (($generated@@144  (=> (= $generated@@135 ($generated@@68 $generated@@136 $generated@@137 $generated false)) (=> (and (and (= $generated@@138 ($generated@@35 $generated@@27 $generated@@21)) ($generated@@124 $generated@@27 $generated@@138 $generated@@28 $generated@@137)) (and ($generated@@25 ($generated@@35 $generated@@27 $generated@@21)) ($generated@@25 ($generated@@35 $generated@@27 $generated@@21)))) (and (=> (= (ControlFlow 0 2) (- 0 4)) (= ($generated@@9 ($generated@@35 $generated@@5 ($generated@@8 ($generated@@23 ($generated@@24 ($generated@@24 $generated@@139)) ($generated@@35 $generated@@27 $generated@@21))))) ($generated@@9 ($generated@@35 $generated@@5 ($generated@@8 true))))) (=> (= ($generated@@9 ($generated@@35 $generated@@5 ($generated@@8 ($generated@@23 ($generated@@24 $generated@@139) ($generated@@35 $generated@@27 $generated@@21))))) ($generated@@9 ($generated@@35 $generated@@5 ($generated@@8 true)))) (=> (and (and (= $generated@@140 ($generated@@35 $generated@@27 ($generated@@50 ($generated@@35 $generated@@27 $generated@@21)))) ($generated@@124 $generated@@27 $generated@@140 $generated@@28 $generated@@137)) (and ($generated@@25 ($generated@@35 $generated@@27 ($generated@@50 ($generated@@35 $generated@@27 $generated@@21)))) ($generated@@25 ($generated@@35 $generated@@27 ($generated@@50 ($generated@@35 $generated@@27 $generated@@21)))))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (= ($generated@@9 ($generated@@35 $generated@@5 ($generated@@8 ($generated@@23 ($generated@@24 ($generated@@24 $generated@@139)) ($generated@@35 $generated@@27 ($generated@@50 ($generated@@35 $generated@@27 $generated@@21))))))) ($generated@@9 ($generated@@35 $generated@@5 ($generated@@8 false))))) (=> (and (= ($generated@@9 ($generated@@35 $generated@@5 ($generated@@8 ($generated@@23 ($generated@@24 $generated@@139) ($generated@@35 $generated@@27 ($generated@@50 ($generated@@35 $generated@@27 $generated@@21))))))) ($generated@@9 ($generated@@35 $generated@@5 ($generated@@8 false)))) (= $generated@@141 ($generated@@50 ($generated@@50 $generated@@142)))) (=> (and (and (and ($generated@@124 $generated@@27 $generated@@141 $generated@@28 $generated@@137) ($generated@@25 ($generated@@50 ($generated@@50 $generated@@142)))) (and ($generated@@124 $generated@@27 $generated@@142 $generated@@28 $generated@@137) ($generated@@25 $generated@@142))) (and (and ($generated@@25 ($generated@@50 ($generated@@50 $generated@@142))) ($generated@@25 $generated@@142)) (= (ControlFlow 0 2) (- 0 1)))) (= ($generated@@23 ($generated@@24 ($generated@@24 $generated@@139)) ($generated@@50 ($generated@@50 $generated@@142))) ($generated@@23 ($generated@@24 ($generated@@24 $generated@@139)) $generated@@142))))))))))))
(let (($generated@@145  (=> (and ($generated@@125 $generated@@137) ($generated@@143 $generated@@137)) (=> (and (and (and ($generated@@26 $generated@@27 $generated@@142 $generated@@28) ($generated@@124 $generated@@27 $generated@@142 $generated@@28 $generated@@137)) ($generated@@54 $generated@@142)) (and (= 2 $generated@@22) (= (ControlFlow 0 5) 2))) $generated@@144))))
$generated@@145)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
