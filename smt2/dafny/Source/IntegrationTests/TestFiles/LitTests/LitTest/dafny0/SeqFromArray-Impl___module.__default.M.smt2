(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagSeq () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._System.array? () T@U)
(declare-fun Tagclass._System.array () T@U)
(declare-fun tytagFamily$array () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun FDim (T@U) Int)
(declare-fun Tag (T@U) T@U)
(declare-fun _System.array.Length (T@U) Int)
(declare-fun Tclass._System.array? (T@U) T@U)
(declare-fun null () T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun Tclass._System.array (T@U) T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun |Seq#Empty| () T@U)
(declare-fun |Seq#Drop| (T@U Int) T@U)
(declare-fun |Seq#Build| (T@U T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun |Seq#Take| (T@U Int) T@U)
(declare-fun |Seq#FromArray| (T@U T@U) T@U)
(declare-fun IndexField (Int) T@U)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun SeqType () T@T)
(declare-fun TSeq (T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun |Seq#Equal| (T@U T@U) Bool)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun IndexField_Inverse (T@U) Int)
(declare-fun Tclass._System.array?_0 (T@U) T@U)
(declare-fun Tclass._System.array_0 (T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun |Seq#Build_inv0| (T@U) T@U)
(declare-fun |Seq#Build_inv1| (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt TagSeq alloc Tagclass._System.array? Tagclass._System.array tytagFamily$array)
)
(assert (= (FDim alloc) 0))
(assert (= (Tag TInt) TagInt))
(assert (forall ((_System.array$arg T@U) ($o T@U) ) (!  (=> (and (or (not (= $o null)) (not true)) (= (dtype $o) (Tclass._System.array? _System.array$arg))) ($Is intType (int_2_U (_System.array.Length $o)) TInt))
 :pattern ( (_System.array.Length $o) (Tclass._System.array? _System.array$arg))
)))
(assert (= (Ctor refType) 3))
(assert (forall ((_System.array$arg@@0 T@U) (|c#0| T@U) ($h T@U) ) (! (= ($IsAlloc refType |c#0| (Tclass._System.array _System.array$arg@@0) $h) ($IsAlloc refType |c#0| (Tclass._System.array? _System.array$arg@@0) $h))
 :pattern ( ($IsAlloc refType |c#0| (Tclass._System.array _System.array$arg@@0) $h))
 :pattern ( ($IsAlloc refType |c#0| (Tclass._System.array? _System.array$arg@@0) $h))
)))
(assert (= (|Seq#Length| |Seq#Empty|) 0))
(assert (forall ((s T@U) (v T@U) (n Int) ) (!  (=> (and (<= 0 n) (<= n (|Seq#Length| s))) (= (|Seq#Drop| (|Seq#Build| s v) n) (|Seq#Build| (|Seq#Drop| s n) v)))
 :pattern ( (|Seq#Drop| (|Seq#Build| s v) n))
)))
(assert  (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 4)) (= (Ctor BoxType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 6))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((_System.array$arg@@1 T@U) ($o@@0 T@U) ($h@@0 T@U) ) (! (= ($IsAlloc refType $o@@0 (Tclass._System.array? _System.array$arg@@1) $h@@0)  (or (= $o@@0 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@0 $o@@0) alloc)))))
 :pattern ( ($IsAlloc refType $o@@0 (Tclass._System.array? _System.array$arg@@1) $h@@0))
)))
(assert (forall ((h T@U) (a T@U) (n0 Int) (n1 Int) ) (!  (=> (and (and (= (+ n0 1) n1) (<= 0 n0)) (<= n1 (_System.array.Length a))) (= (|Seq#Take| (|Seq#FromArray| h a) n1) (|Seq#Build| (|Seq#Take| (|Seq#FromArray| h a) n0) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h a) (IndexField n0)))))
 :pattern ( (|Seq#Take| (|Seq#FromArray| h a) n0) (|Seq#Take| (|Seq#FromArray| h a) n1))
)))
(assert (forall ((s@@0 T@U) (n@@0 Int) ) (!  (=> (= n@@0 0) (= (|Seq#Drop| s@@0 n@@0) s@@0))
 :pattern ( (|Seq#Drop| s@@0 n@@0))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (= (Ctor SeqType) 7))
(assert (forall ((s@@1 T@U) (bx T@U) (t T@U) ) (!  (=> (and ($Is SeqType s@@1 (TSeq t)) ($IsBox bx t)) ($Is SeqType (|Seq#Build| s@@1 bx) (TSeq t)))
 :pattern ( ($Is SeqType (|Seq#Build| s@@1 bx) (TSeq t)))
)))
(assert (forall ((s@@2 T@U) (n@@1 Int) (j Int) ) (!  (=> (and (and (<= 0 j) (< j n@@1)) (< j (|Seq#Length| s@@2))) (= (|Seq#Index| (|Seq#Take| s@@2 n@@1) j) (|Seq#Index| s@@2 j)))
 :weight 25
 :pattern ( (|Seq#Index| (|Seq#Take| s@@2 n@@1) j))
 :pattern ( (|Seq#Index| s@@2 j) (|Seq#Take| s@@2 n@@1))
)))
(assert (forall ((s@@3 T@U) (n@@2 Int) ) (!  (=> (and (<= 0 n@@2) (<= n@@2 (|Seq#Length| s@@3))) (= (|Seq#Length| (|Seq#Drop| s@@3 n@@2)) (- (|Seq#Length| s@@3) n@@2)))
 :pattern ( (|Seq#Length| (|Seq#Drop| s@@3 n@@2)))
)))
(assert (forall ((_System.array$arg@@2 T@U) ($h@@1 T@U) ($o@@1 T@U) ($i0 Int) ) (!  (=> (and (and (and ($IsGoodHeap $h@@1) (and (or (not (= $o@@1 null)) (not true)) (= (dtype $o@@1) (Tclass._System.array? _System.array$arg@@2)))) (and (<= 0 $i0) (< $i0 (_System.array.Length $o@@1)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@1 $o@@1) alloc)))) ($IsAllocBox (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@1 $o@@1) (IndexField $i0)) _System.array$arg@@2 $h@@1))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@1 $o@@1) (IndexField $i0)) (Tclass._System.array? _System.array$arg@@2))
)))
(assert (forall ((s0 T@U) (s1 T@U) ) (! (= (|Seq#Equal| s0 s1)  (and (= (|Seq#Length| s0) (|Seq#Length| s1)) (forall ((j@@0 Int) ) (!  (=> (and (<= 0 j@@0) (< j@@0 (|Seq#Length| s0))) (= (|Seq#Index| s0 j@@0) (|Seq#Index| s1 j@@0)))
 :pattern ( (|Seq#Index| s0 j@@0))
 :pattern ( (|Seq#Index| s1 j@@0))
))))
 :pattern ( (|Seq#Equal| s0 s1))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((s@@4 T@U) (v@@0 T@U) ) (! (= (|Seq#Length| (|Seq#Build| s@@4 v@@0)) (+ 1 (|Seq#Length| s@@4)))
 :pattern ( (|Seq#Build| s@@4 v@@0))
)))
(assert (forall ((_System.array$arg@@3 T@U) (|c#0@@0| T@U) ) (! (= ($Is refType |c#0@@0| (Tclass._System.array _System.array$arg@@3))  (and ($Is refType |c#0@@0| (Tclass._System.array? _System.array$arg@@3)) (or (not (= |c#0@@0| null)) (not true))))
 :pattern ( ($Is refType |c#0@@0| (Tclass._System.array _System.array$arg@@3)))
 :pattern ( ($Is refType |c#0@@0| (Tclass._System.array? _System.array$arg@@3)))
)))
(assert (forall ((v@@1 T@U) (t@@0 T@U) (h@@0 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@1) t@@0 h@@0) ($IsAlloc T@@1 v@@1 t@@0 h@@0))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@1) t@@0 h@@0))
)))
(assert (forall ((s@@5 T@U) (n@@3 Int) (j@@1 Int) ) (!  (=> (and (and (<= 0 n@@3) (<= 0 j@@1)) (< j@@1 (- (|Seq#Length| s@@5) n@@3))) (= (|Seq#Index| (|Seq#Drop| s@@5 n@@3) j@@1) (|Seq#Index| s@@5 (+ j@@1 n@@3))))
 :weight 25
 :pattern ( (|Seq#Index| (|Seq#Drop| s@@5 n@@3) j@@1))
)))
(assert (forall ((_System.array$arg@@4 T@U) ) (!  (and (= (Tag (Tclass._System.array? _System.array$arg@@4)) Tagclass._System.array?) (= (TagFamily (Tclass._System.array? _System.array$arg@@4)) tytagFamily$array))
 :pattern ( (Tclass._System.array? _System.array$arg@@4))
)))
(assert (forall ((_System.array$arg@@5 T@U) ) (!  (and (= (Tag (Tclass._System.array _System.array$arg@@5)) Tagclass._System.array) (= (TagFamily (Tclass._System.array _System.array$arg@@5)) tytagFamily$array))
 :pattern ( (Tclass._System.array _System.array$arg@@5))
)))
(assert (forall ((_System.array$arg@@6 T@U) ($o@@2 T@U) ) (! (= ($Is refType $o@@2 (Tclass._System.array? _System.array$arg@@6))  (or (= $o@@2 null) (= (dtype $o@@2) (Tclass._System.array? _System.array$arg@@6))))
 :pattern ( ($Is refType $o@@2 (Tclass._System.array? _System.array$arg@@6)))
)))
(assert (forall ((s@@6 T@U) (i Int) (v@@2 T@U) ) (!  (and (=> (= i (|Seq#Length| s@@6)) (= (|Seq#Index| (|Seq#Build| s@@6 v@@2) i) v@@2)) (=> (or (not (= i (|Seq#Length| s@@6))) (not true)) (= (|Seq#Index| (|Seq#Build| s@@6 v@@2) i) (|Seq#Index| s@@6 i))))
 :pattern ( (|Seq#Index| (|Seq#Build| s@@6 v@@2) i))
)))
(assert (forall ((h@@1 T@U) (a@@0 T@U) ) (! (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| (|Seq#FromArray| h@@1 a@@0)))) (= (|Seq#Index| (|Seq#FromArray| h@@1 a@@0) i@@0) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@1 a@@0) (IndexField i@@0))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@1 a@@0) (IndexField i@@0)))
 :pattern ( (|Seq#Index| (|Seq#FromArray| h@@1 a@@0) i@@0))
))
 :pattern ( (|Seq#FromArray| h@@1 a@@0))
)))
(assert (forall ((a@@1 T@U) (b T@U) ) (!  (=> (|Seq#Equal| a@@1 b) (= a@@1 b))
 :pattern ( (|Seq#Equal| a@@1 b))
)))
(assert (forall ((s@@7 T@U) (n@@4 Int) ) (!  (=> (and (<= 0 n@@4) (<= n@@4 (|Seq#Length| s@@7))) (= (|Seq#Length| (|Seq#Take| s@@7 n@@4)) n@@4))
 :pattern ( (|Seq#Length| (|Seq#Take| s@@7 n@@4)))
)))
(assert (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 TInt) (and (= ($Box intType ($Unbox intType bx@@0)) bx@@0) ($Is intType ($Unbox intType bx@@0) TInt)))
 :pattern ( ($IsBox bx@@0 TInt))
)))
(assert (forall ((v@@3 T@U) (t@@1 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@3) t@@1) ($Is T@@2 v@@3 t@@1))
 :pattern ( ($IsBox ($Box T@@2 v@@3) t@@1))
)))
(assert (forall ((o T@U) ) (! (<= 0 (_System.array.Length o))
 :pattern ( (_System.array.Length o))
)))
(assert (forall ((s@@8 T@U) ) (! (<= 0 (|Seq#Length| s@@8))
 :pattern ( (|Seq#Length| s@@8))
)))
(assert (forall ((v@@4 T@U) (t0@@0 T@U) (h@@2 T@U) ) (! (= ($IsAlloc SeqType v@@4 (TSeq t0@@0) h@@2) (forall ((i@@1 Int) ) (!  (=> (and (<= 0 i@@1) (< i@@1 (|Seq#Length| v@@4))) ($IsAllocBox (|Seq#Index| v@@4 i@@1) t0@@0 h@@2))
 :pattern ( (|Seq#Index| v@@4 i@@1))
)))
 :pattern ( ($IsAlloc SeqType v@@4 (TSeq t0@@0) h@@2))
)))
(assert (forall ((t@@2 T@U) ) (! (= (Inv0_TSeq (TSeq t@@2)) t@@2)
 :pattern ( (TSeq t@@2))
)))
(assert (forall ((t@@3 T@U) ) (! (= (Tag (TSeq t@@3)) TagSeq)
 :pattern ( (TSeq t@@3))
)))
(assert (forall ((i@@2 Int) ) (! (= (FDim (IndexField i@@2)) 1)
 :pattern ( (IndexField i@@2))
)))
(assert (forall ((i@@3 Int) ) (! (= (IndexField_Inverse (IndexField i@@3)) i@@3)
 :pattern ( (IndexField i@@3))
)))
(assert (forall ((_System.array$arg@@7 T@U) ) (! (= (Tclass._System.array?_0 (Tclass._System.array? _System.array$arg@@7)) _System.array$arg@@7)
 :pattern ( (Tclass._System.array? _System.array$arg@@7))
)))
(assert (forall ((_System.array$arg@@8 T@U) ) (! (= (Tclass._System.array_0 (Tclass._System.array _System.array$arg@@8)) _System.array$arg@@8)
 :pattern ( (Tclass._System.array _System.array$arg@@8))
)))
(assert (forall ((x@@5 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@5)) x@@5)
 :pattern ( ($Box T@@3 x@@5))
)))
(assert (forall ((_System.array$arg@@9 T@U) ($h@@2 T@U) ($o@@3 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@2) (and (or (not (= $o@@3 null)) (not true)) (= (dtype $o@@3) (Tclass._System.array? _System.array$arg@@9)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o@@3) alloc)))) ($IsAlloc intType (int_2_U (_System.array.Length $o@@3)) TInt $h@@2))
 :pattern ( (_System.array.Length $o@@3) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o@@3) alloc)) (Tclass._System.array? _System.array$arg@@9))
)))
(assert (forall ((_System.array$arg@@10 T@U) ($h@@3 T@U) ($o@@4 T@U) ($i0@@0 Int) ) (!  (=> (and (and ($IsGoodHeap $h@@3) (and (or (not (= $o@@4 null)) (not true)) (= (dtype $o@@4) (Tclass._System.array? _System.array$arg@@10)))) (and (<= 0 $i0@@0) (< $i0@@0 (_System.array.Length $o@@4)))) ($IsBox (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@3 $o@@4) (IndexField $i0@@0)) _System.array$arg@@10))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@3 $o@@4) (IndexField $i0@@0)) (Tclass._System.array? _System.array$arg@@10))
)))
(assert  (and (forall ((t0@@1 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@1 t1@@0 t2 (MapType1Store t0@@1 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o@@5 T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@5 $f))  (=> (and (or (not (= $o@@5 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@5) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@5 $f))
)))
(assert (forall ((h@@3 T@U) (a@@2 T@U) ) (! (= (|Seq#Length| (|Seq#FromArray| h@@3 a@@2)) (_System.array.Length a@@2))
 :pattern ( (|Seq#Length| (|Seq#FromArray| h@@3 a@@2)))
)))
(assert (forall ((s@@9 T@U) (val@@4 T@U) ) (!  (and (= (|Seq#Build_inv0| (|Seq#Build| s@@9 val@@4)) s@@9) (= (|Seq#Build_inv1| (|Seq#Build| s@@9 val@@4)) val@@4))
 :pattern ( (|Seq#Build| s@@9 val@@4))
)))
(assert (forall ((bx@@1 T@U) (t@@4 T@U) ) (!  (=> ($IsBox bx@@1 (TSeq t@@4)) (and (= ($Box SeqType ($Unbox SeqType bx@@1)) bx@@1) ($Is SeqType ($Unbox SeqType bx@@1) (TSeq t@@4))))
 :pattern ( ($IsBox bx@@1 (TSeq t@@4)))
)))
(assert (forall ((_System.array$arg@@11 T@U) (bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 (Tclass._System.array? _System.array$arg@@11)) (and (= ($Box refType ($Unbox refType bx@@2)) bx@@2) ($Is refType ($Unbox refType bx@@2) (Tclass._System.array? _System.array$arg@@11))))
 :pattern ( ($IsBox bx@@2 (Tclass._System.array? _System.array$arg@@11)))
)))
(assert (forall ((_System.array$arg@@12 T@U) (bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 (Tclass._System.array _System.array$arg@@12)) (and (= ($Box refType ($Unbox refType bx@@3)) bx@@3) ($Is refType ($Unbox refType bx@@3) (Tclass._System.array _System.array$arg@@12))))
 :pattern ( ($IsBox bx@@3 (Tclass._System.array _System.array$arg@@12)))
)))
(assert (forall ((s@@10 T@U) (n@@5 Int) (k Int) ) (!  (=> (and (and (<= 0 n@@5) (<= n@@5 k)) (< k (|Seq#Length| s@@10))) (= (|Seq#Index| (|Seq#Drop| s@@10 n@@5) (- k n@@5)) (|Seq#Index| s@@10 k)))
 :weight 25
 :pattern ( (|Seq#Index| s@@10 k) (|Seq#Drop| s@@10 n@@5))
)))
(assert (forall ((s@@11 T@U) (m@@4 Int) (n@@6 Int) ) (!  (=> (and (and (<= 0 m@@4) (<= 0 n@@6)) (<= (+ m@@4 n@@6) (|Seq#Length| s@@11))) (= (|Seq#Drop| (|Seq#Drop| s@@11 m@@4) n@@6) (|Seq#Drop| s@@11 (+ m@@4 n@@6))))
 :pattern ( (|Seq#Drop| (|Seq#Drop| s@@11 m@@4) n@@6))
)))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((x@@7 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@7)) (Lit BoxType ($Box T@@4 x@@7)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@7)))
)))
(assert (forall ((s@@12 T@U) ) (!  (=> (= (|Seq#Length| s@@12) 0) (= s@@12 |Seq#Empty|))
 :pattern ( (|Seq#Length| s@@12))
)))
(assert (forall ((s@@13 T@U) (n@@7 Int) ) (!  (=> (= n@@7 0) (= (|Seq#Take| s@@13 n@@7) |Seq#Empty|))
 :pattern ( (|Seq#Take| s@@13 n@@7))
)))
(assert (forall ((h@@4 T@U) (v@@5 T@U) ) (! ($IsAlloc intType v@@5 TInt h@@4)
 :pattern ( ($IsAlloc intType v@@5 TInt h@@4))
)))
(assert (forall ((v@@6 T@U) (t0@@2 T@U) ) (! (= ($Is SeqType v@@6 (TSeq t0@@2)) (forall ((i@@4 Int) ) (!  (=> (and (<= 0 i@@4) (< i@@4 (|Seq#Length| v@@6))) ($IsBox (|Seq#Index| v@@6 i@@4) t0@@2))
 :pattern ( (|Seq#Index| v@@6 i@@4))
)))
 :pattern ( ($Is SeqType v@@6 (TSeq t0@@2)))
)))
(assert (forall ((v@@7 T@U) ) (! ($Is intType v@@7 TInt)
 :pattern ( ($Is intType v@@7 TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |i#0| () Int)
(declare-fun |n#0| () Int)
(declare-fun $Heap () T@U)
(declare-fun |a#0| () T@U)
(declare-fun |k#0| () Int)
(declare-fun |c#0@@1| () T@U)
(declare-fun |l#0@@0| () Int)
(declare-fun |C#0@0| () T@U)
(declare-fun |A#0@0| () T@U)
(declare-fun |m#0| () Int)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |A#0| () T@U)
(declare-fun |C#0| () T@U)
(declare-fun $FunctionContextHeight () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 61) (let ((anon32_correct  (=> (= (ControlFlow 0 39) (- 0 38)) (=> (and (<= (LitInt 0) |i#0|) (< |i#0| |n#0|)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |a#0|) (IndexField (+ |k#0| |i#0|))))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |c#0@@1|) (IndexField (+ |l#0@@0| |i#0|))))))))))
(let ((anon51_Else_correct  (=> (and (not (and (<= (LitInt 0) |i#0|) (< |i#0| |n#0|))) (= (ControlFlow 0 45) 39)) anon32_correct)))
(let ((anon51_Then_correct  (=> (and (<= (LitInt 0) |i#0|) (< |i#0| |n#0|)) (and (=> (= (ControlFlow 0 40) (- 0 44)) (or (not (= |a#0| null)) (not true))) (=> (or (not (= |a#0| null)) (not true)) (and (=> (= (ControlFlow 0 40) (- 0 43)) (and (<= 0 (+ |k#0| |i#0|)) (< (+ |k#0| |i#0|) (_System.array.Length |a#0|)))) (and (=> (= (ControlFlow 0 40) (- 0 42)) (or (not (= |c#0@@1| null)) (not true))) (=> (or (not (= |c#0@@1| null)) (not true)) (and (=> (= (ControlFlow 0 40) (- 0 41)) (and (<= 0 (+ |l#0@@0| |i#0|)) (< (+ |l#0@@0| |i#0|) (_System.array.Length |c#0@@1|)))) (=> (= (ControlFlow 0 40) 39) anon32_correct))))))))))
(let ((anon50_Else_correct  (=> (< |i#0| (LitInt 0)) (and (=> (= (ControlFlow 0 47) 40) anon51_Then_correct) (=> (= (ControlFlow 0 47) 45) anon51_Else_correct)))))
(let ((anon50_Then_correct  (=> (<= (LitInt 0) |i#0|) (and (=> (= (ControlFlow 0 46) 40) anon51_Then_correct) (=> (= (ControlFlow 0 46) 45) anon51_Else_correct)))))
(let ((anon46_Else_correct  (and (=> (= (ControlFlow 0 48) 46) anon50_Then_correct) (=> (= (ControlFlow 0 48) 47) anon50_Else_correct))))
(let ((anon26_correct  (=> (= (ControlFlow 0 30) (- 0 29)) (=> (and (<= (LitInt 0) |i#0|) (< |i#0| |n#0|)) (= (U_2_int ($Unbox intType (|Seq#Index| |C#0@0| |i#0|))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |c#0@@1|) (IndexField (+ |l#0@@0| |i#0|))))))))))
(let ((anon48_Else_correct  (=> (and (not (and (<= (LitInt 0) |i#0|) (< |i#0| |n#0|))) (= (ControlFlow 0 35) 30)) anon26_correct)))
(let ((anon48_Then_correct  (=> (and (<= (LitInt 0) |i#0|) (< |i#0| |n#0|)) (and (=> (= (ControlFlow 0 31) (- 0 34)) (and (<= 0 |i#0|) (< |i#0| (|Seq#Length| |C#0@0|)))) (and (=> (= (ControlFlow 0 31) (- 0 33)) (or (not (= |c#0@@1| null)) (not true))) (=> (or (not (= |c#0@@1| null)) (not true)) (and (=> (= (ControlFlow 0 31) (- 0 32)) (and (<= 0 (+ |l#0@@0| |i#0|)) (< (+ |l#0@@0| |i#0|) (_System.array.Length |c#0@@1|)))) (=> (= (ControlFlow 0 31) 30) anon26_correct))))))))
(let ((anon47_Else_correct  (=> (< |i#0| (LitInt 0)) (and (=> (= (ControlFlow 0 37) 31) anon48_Then_correct) (=> (= (ControlFlow 0 37) 35) anon48_Else_correct)))))
(let ((anon47_Then_correct  (=> (<= (LitInt 0) |i#0|) (and (=> (= (ControlFlow 0 36) 31) anon48_Then_correct) (=> (= (ControlFlow 0 36) 35) anon48_Else_correct)))))
(let ((anon43_Else_correct  (and (and (=> (= (ControlFlow 0 49) 48) anon46_Else_correct) (=> (= (ControlFlow 0 49) 36) anon47_Then_correct)) (=> (= (ControlFlow 0 49) 37) anon47_Else_correct))))
(let ((anon20_correct  (=> (= (ControlFlow 0 21) (- 0 20)) (=> (and (<= (LitInt 0) |i#0|) (< |i#0| |n#0|)) (= (U_2_int ($Unbox intType (|Seq#Index| |A#0@0| |i#0|))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |a#0|) (IndexField (+ |k#0| |i#0|))))))))))
(let ((anon45_Else_correct  (=> (and (not (and (<= (LitInt 0) |i#0|) (< |i#0| |n#0|))) (= (ControlFlow 0 26) 21)) anon20_correct)))
(let ((anon45_Then_correct  (=> (and (<= (LitInt 0) |i#0|) (< |i#0| |n#0|)) (and (=> (= (ControlFlow 0 22) (- 0 25)) (and (<= 0 |i#0|) (< |i#0| (|Seq#Length| |A#0@0|)))) (and (=> (= (ControlFlow 0 22) (- 0 24)) (or (not (= |a#0| null)) (not true))) (=> (or (not (= |a#0| null)) (not true)) (and (=> (= (ControlFlow 0 22) (- 0 23)) (and (<= 0 (+ |k#0| |i#0|)) (< (+ |k#0| |i#0|) (_System.array.Length |a#0|)))) (=> (= (ControlFlow 0 22) 21) anon20_correct))))))))
(let ((anon44_Else_correct  (=> (< |i#0| (LitInt 0)) (and (=> (= (ControlFlow 0 28) 22) anon45_Then_correct) (=> (= (ControlFlow 0 28) 26) anon45_Else_correct)))))
(let ((anon44_Then_correct  (=> (<= (LitInt 0) |i#0|) (and (=> (= (ControlFlow 0 27) 22) anon45_Then_correct) (=> (= (ControlFlow 0 27) 26) anon45_Else_correct)))))
(let ((anon40_Else_correct  (and (and (=> (= (ControlFlow 0 50) 49) anon43_Else_correct) (=> (= (ControlFlow 0 50) 27) anon44_Then_correct)) (=> (= (ControlFlow 0 50) 28) anon44_Else_correct))))
(let ((anon14_correct  (=> (= (ControlFlow 0 13) (- 0 12)) (=> (and (<= |k#0| |i#0|) (< |i#0| (+ |k#0| |n#0|))) (= (U_2_int ($Unbox intType (|Seq#Index| |A#0@0| (- |i#0| |k#0|)))) (U_2_int ($Unbox intType (|Seq#Index| |C#0@0| (- |i#0| |k#0|)))))))))
(let ((anon42_Else_correct  (=> (and (not (and (<= |k#0| |i#0|) (< |i#0| (+ |k#0| |n#0|)))) (= (ControlFlow 0 17) 13)) anon14_correct)))
(let ((anon42_Then_correct  (=> (and (<= |k#0| |i#0|) (< |i#0| (+ |k#0| |n#0|))) (and (=> (= (ControlFlow 0 14) (- 0 16)) (and (<= 0 (- |i#0| |k#0|)) (< (- |i#0| |k#0|) (|Seq#Length| |A#0@0|)))) (and (=> (= (ControlFlow 0 14) (- 0 15)) (and (<= 0 (- |i#0| |k#0|)) (< (- |i#0| |k#0|) (|Seq#Length| |C#0@0|)))) (=> (= (ControlFlow 0 14) 13) anon14_correct))))))
(let ((anon41_Else_correct  (=> (< |i#0| |k#0|) (and (=> (= (ControlFlow 0 19) 14) anon42_Then_correct) (=> (= (ControlFlow 0 19) 17) anon42_Else_correct)))))
(let ((anon41_Then_correct  (=> (<= |k#0| |i#0|) (and (=> (= (ControlFlow 0 18) 14) anon42_Then_correct) (=> (= (ControlFlow 0 18) 17) anon42_Else_correct)))))
(let ((anon37_Else_correct  (and (and (=> (= (ControlFlow 0 51) 50) anon40_Else_correct) (=> (= (ControlFlow 0 51) 18) anon41_Then_correct)) (=> (= (ControlFlow 0 51) 19) anon41_Else_correct))))
(let ((anon8_correct  (=> (= (ControlFlow 0 5) (- 0 4)) (=> (and (<= (LitInt 0) |i#0|) (< |i#0| |n#0|)) (= (U_2_int ($Unbox intType (|Seq#Index| |A#0@0| |i#0|))) (U_2_int ($Unbox intType (|Seq#Index| |C#0@0| |i#0|))))))))
(let ((anon39_Else_correct  (=> (and (not (and (<= (LitInt 0) |i#0|) (< |i#0| |n#0|))) (= (ControlFlow 0 9) 5)) anon8_correct)))
(let ((anon39_Then_correct  (=> (and (<= (LitInt 0) |i#0|) (< |i#0| |n#0|)) (and (=> (= (ControlFlow 0 6) (- 0 8)) (and (<= 0 |i#0|) (< |i#0| (|Seq#Length| |A#0@0|)))) (and (=> (= (ControlFlow 0 6) (- 0 7)) (and (<= 0 |i#0|) (< |i#0| (|Seq#Length| |C#0@0|)))) (=> (= (ControlFlow 0 6) 5) anon8_correct))))))
(let ((anon38_Else_correct  (=> (< |i#0| (LitInt 0)) (and (=> (= (ControlFlow 0 11) 6) anon39_Then_correct) (=> (= (ControlFlow 0 11) 9) anon39_Else_correct)))))
(let ((anon38_Then_correct  (=> (<= (LitInt 0) |i#0|) (and (=> (= (ControlFlow 0 10) 6) anon39_Then_correct) (=> (= (ControlFlow 0 10) 9) anon39_Else_correct)))))
(let ((anon36_Else_correct  (and (and (=> (= (ControlFlow 0 52) 51) anon37_Else_correct) (=> (= (ControlFlow 0 52) 10) anon38_Then_correct)) (=> (= (ControlFlow 0 52) 11) anon38_Else_correct))))
(let ((anon36_Then_correct  (=> (= (ControlFlow 0 3) (- 0 2)) (= |m#0| |n#0|))))
(let ((anon35_Then_correct  (=> (|Seq#Equal| |A#0@0| |C#0@0|) (and (=> (= (ControlFlow 0 53) 3) anon36_Then_correct) (=> (= (ControlFlow 0 53) 52) anon36_Else_correct)))))
(let ((anon35_Else_correct true))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (and (=> (= (ControlFlow 0 54) (- 0 60)) (or (not (= |a#0| null)) (not true))) (=> (or (not (= |a#0| null)) (not true)) (and (=> (= (ControlFlow 0 54) (- 0 59)) (and (<= 0 |k#0|) (<= |k#0| (_System.array.Length |a#0|)))) (=> (and (<= 0 |k#0|) (<= |k#0| (_System.array.Length |a#0|))) (and (=> (= (ControlFlow 0 54) (- 0 58)) (and (<= |k#0| (+ |k#0| |m#0|)) (<= (+ |k#0| |m#0|) (_System.array.Length |a#0|)))) (=> (and (<= |k#0| (+ |k#0| |m#0|)) (<= (+ |k#0| |m#0|) (_System.array.Length |a#0|))) (=> (= |A#0@0| (|Seq#Drop| (|Seq#Take| (|Seq#FromArray| $Heap |a#0|) (+ |k#0| |m#0|)) |k#0|)) (and (=> (= (ControlFlow 0 54) (- 0 57)) (or (not (= |c#0@@1| null)) (not true))) (=> (or (not (= |c#0@@1| null)) (not true)) (and (=> (= (ControlFlow 0 54) (- 0 56)) (and (<= 0 |l#0@@0|) (<= |l#0@@0| (_System.array.Length |c#0@@1|)))) (=> (and (<= 0 |l#0@@0|) (<= |l#0@@0| (_System.array.Length |c#0@@1|))) (and (=> (= (ControlFlow 0 54) (- 0 55)) (and (<= |l#0@@0| (+ |l#0@@0| |n#0|)) (<= (+ |l#0@@0| |n#0|) (_System.array.Length |c#0@@1|)))) (=> (and (<= |l#0@@0| (+ |l#0@@0| |n#0|)) (<= (+ |l#0@@0| |n#0|) (_System.array.Length |c#0@@1|))) (=> (= |C#0@0| (|Seq#Drop| (|Seq#Take| (|Seq#FromArray| $Heap |c#0@@1|) (+ |l#0@@0| |n#0|)) |l#0@@0|)) (and (=> (= (ControlFlow 0 54) 53) anon35_Then_correct) (=> (= (ControlFlow 0 54) 1) anon35_Else_correct)))))))))))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (=> (and (and ($Is refType |a#0| (Tclass._System.array TInt)) ($IsAlloc refType |a#0| (Tclass._System.array TInt) $Heap)) (and ($Is refType |c#0@@1| (Tclass._System.array TInt)) ($IsAlloc refType |c#0@@1| (Tclass._System.array TInt) $Heap))) (=> (and (and (and (and (<= (LitInt 0) |m#0|) (<= (LitInt 0) |n#0|)) (and (<= (LitInt 0) |k#0|) (<= (LitInt 0) |l#0@@0|))) (and (and ($Is SeqType |A#0| (TSeq TInt)) ($IsAlloc SeqType |A#0| (TSeq TInt) $Heap)) true)) (and (and (and ($Is SeqType |C#0| (TSeq TInt)) ($IsAlloc SeqType |C#0| (TSeq TInt) $Heap)) true) (and (and (= 0 $FunctionContextHeight) (<= (+ |k#0| |m#0|) (_System.array.Length |a#0|))) (and (<= (+ |l#0@@0| |n#0|) (_System.array.Length |c#0@@1|)) (= (ControlFlow 0 61) 54))))) anon0_correct)))))
PreconditionGeneratedEntry_correct))))))))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
