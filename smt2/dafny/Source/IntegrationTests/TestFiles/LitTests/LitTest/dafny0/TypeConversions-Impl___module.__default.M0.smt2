(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (Bool) T@U)
(declare-fun $generated@@7 (T@U) Bool)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun $generated@@9 (T@U) Int)
(declare-fun $generated@@10 (Real) T@U)
(declare-fun $generated@@11 (T@U) Real)
(declare-fun $generated@@18 () Int)
(declare-fun $generated@@19 (Int Int Real Int Real (_ BitVec 67) (_ BitVec 32) (_ BitVec 7) Int) Bool)
(declare-fun $generated@@20 (Int) Int)
(declare-fun $generated@@21 (Real) Real)
(declare-fun $generated@@22 (T@U) (_ BitVec 67))
(declare-fun $generated@@23 (T@T T@U) T@U)
(declare-fun $generated@@24 () T@T)
(declare-fun $generated@@25 (T@U) (_ BitVec 32))
(declare-fun $generated@@26 () T@T)
(declare-fun $generated@@27 (T@U) (_ BitVec 7))
(declare-fun $generated@@28 () T@T)
(declare-fun $generated@@29 (Int Int Real Int Real (_ BitVec 67) (_ BitVec 32) (_ BitVec 7) Int) Bool)
(declare-fun $generated@@30 (Int Int) Int)
(declare-fun $generated@@31 ((_ BitVec 67)) T@U)
(declare-fun $generated@@32 ((_ BitVec 32)) T@U)
(declare-fun $generated@@33 ((_ BitVec 7)) T@U)
(declare-fun $generated@@49 (Real) Int)
(declare-fun $generated@@55 (T@T T@U) T@U)
(declare-fun $generated@@56 (T@T T@U) T@U)
(declare-fun $generated@@59 (T@T T@U T@U) Bool)
(declare-fun $generated@@60 () T@U)
(declare-fun $generated@@71 (Int) Real)
(declare-fun $generated@@76 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@77 () T@T)
(declare-fun $generated@@78 () T@T)
(declare-fun $generated@@79 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@80 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@81 () T@T)
(declare-fun $generated@@82 (T@T T@T) T@T)
(declare-fun $generated@@83 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@84 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@85 (T@T) T@T)
(declare-fun $generated@@86 (T@T) T@T)
(declare-fun $generated@@137 (T@U) T@U)
(declare-fun $generated@@138 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@4) 1)) (= ($generated@@2 $generated@@5) 2)) (forall (($generated@@12 Bool) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Int) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Real) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))))
(assert (distinct $generated $generated@@0 $generated@@1)
)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@24) 3) (forall (($generated@@34 (_ BitVec 67)) ) (! (= ($generated@@22 ($generated@@31 $generated@@34)) $generated@@34)
 :pattern ( ($generated@@31 $generated@@34))
))) (forall (($generated@@35 T@U) ) (! (= ($generated@@31 ($generated@@22 $generated@@35)) $generated@@35)
 :pattern ( ($generated@@22 $generated@@35))
))) (= ($generated@@2 $generated@@26) 4)) (forall (($generated@@36 (_ BitVec 32)) ) (! (= ($generated@@25 ($generated@@32 $generated@@36)) $generated@@36)
 :pattern ( ($generated@@32 $generated@@36))
))) (forall (($generated@@37 T@U) ) (! (= ($generated@@32 ($generated@@25 $generated@@37)) $generated@@37)
 :pattern ( ($generated@@25 $generated@@37))
))) (= ($generated@@2 $generated@@28) 5)) (forall (($generated@@38 (_ BitVec 7)) ) (! (= ($generated@@27 ($generated@@33 $generated@@38)) $generated@@38)
 :pattern ( ($generated@@33 $generated@@38))
))) (forall (($generated@@39 T@U) ) (! (= ($generated@@33 ($generated@@27 $generated@@39)) $generated@@39)
 :pattern ( ($generated@@27 $generated@@39))
))))
(assert  (=> (<= 1 $generated@@18) (forall (($generated@@40 Int) ($generated@@41 Int) ($generated@@42 Real) ($generated@@43 Int) ($generated@@44 Real) ($generated@@45 T@U) ($generated@@46 T@U) ($generated@@47 T@U) ($generated@@48 Int) ) (!  (=> (or ($generated@@29 ($generated@@20 $generated@@40) ($generated@@20 $generated@@41) ($generated@@21 $generated@@42) ($generated@@20 $generated@@43) ($generated@@21 $generated@@44) ($generated@@22 ($generated@@23 $generated@@24 $generated@@45)) ($generated@@25 ($generated@@23 $generated@@26 $generated@@46)) ($generated@@27 ($generated@@23 $generated@@28 $generated@@47)) ($generated@@20 $generated@@48)) (and (< 1 $generated@@18) (and (and (and (<= ($generated@@20 0) $generated@@41) (= ($generated@@30 $generated@@43 ($generated@@20 2)) ($generated@@20 0))) (and (<= ($generated@@21 (- 0.0 4.0)) $generated@@44) (< $generated@@44 300.0))) (= 0 $generated@@48)))) (= ($generated@@19 ($generated@@20 $generated@@40) ($generated@@20 $generated@@41) ($generated@@21 $generated@@42) ($generated@@20 $generated@@43) ($generated@@21 $generated@@44) ($generated@@22 ($generated@@23 $generated@@24 $generated@@45)) ($generated@@25 ($generated@@23 $generated@@26 $generated@@46)) ($generated@@27 ($generated@@23 $generated@@28 $generated@@47)) ($generated@@20 $generated@@48)) ($generated@@7 ($generated@@23 $generated@@3 ($generated@@6 true)))))
 :weight 3
 :pattern ( ($generated@@19 ($generated@@20 $generated@@40) ($generated@@20 $generated@@41) ($generated@@21 $generated@@42) ($generated@@20 $generated@@43) ($generated@@21 $generated@@44) ($generated@@22 ($generated@@23 $generated@@24 $generated@@45)) ($generated@@25 ($generated@@23 $generated@@26 $generated@@46)) ($generated@@27 ($generated@@23 $generated@@28 $generated@@47)) ($generated@@20 $generated@@48)))
))))
(assert (forall (($generated@@50 Real) ) (! (= ($generated@@49 $generated@@50) (to_int $generated@@50))
 :pattern ( ($generated@@49 $generated@@50))
)))
(assert (forall (($generated@@51 Int) ) (! (= ($generated@@20 $generated@@51) $generated@@51)
 :pattern ( ($generated@@20 $generated@@51))
)))
(assert (forall (($generated@@52 Real) ) (! (= ($generated@@21 $generated@@52) $generated@@52)
 :pattern ( ($generated@@21 $generated@@52))
)))
(assert (forall (($generated@@53 T@U) ($generated@@54 T@T) ) (! (= ($generated@@23 $generated@@54 $generated@@53) $generated@@53)
 :pattern ( ($generated@@23 $generated@@54 $generated@@53))
)))
(assert (forall (($generated@@57 T@U) ($generated@@58 T@T) ) (! (= ($generated@@56 $generated@@58 ($generated@@55 $generated@@58 $generated@@57)) $generated@@57)
 :pattern ( ($generated@@55 $generated@@58 $generated@@57))
)))
(assert (forall (($generated@@61 T@U) ) (! (= ($generated@@59 $generated@@4 $generated@@61 $generated@@60) (<= ($generated@@20 0) ($generated@@9 $generated@@61)))
 :pattern ( ($generated@@59 $generated@@4 $generated@@61 $generated@@60))
)))
(assert  (=> (<= 1 $generated@@18) (forall (($generated@@62 Int) ($generated@@63 Int) ($generated@@64 Real) ($generated@@65 Int) ($generated@@66 Real) ($generated@@67 (_ BitVec 67)) ($generated@@68 (_ BitVec 32)) ($generated@@69 (_ BitVec 7)) ($generated@@70 Int) ) (!  (=> (or ($generated@@29 $generated@@62 $generated@@63 $generated@@64 $generated@@65 $generated@@66 $generated@@67 $generated@@68 $generated@@69 $generated@@70) (and (< 1 $generated@@18) (and (and (and (<= ($generated@@20 0) $generated@@63) (= ($generated@@30 $generated@@65 ($generated@@20 2)) ($generated@@20 0))) (and (<= ($generated@@21 (- 0.0 4.0)) $generated@@66) (< $generated@@66 300.0))) (= 0 $generated@@70)))) (= ($generated@@19 $generated@@62 $generated@@63 $generated@@64 $generated@@65 $generated@@66 $generated@@67 $generated@@68 $generated@@69 $generated@@70) ($generated@@7 ($generated@@23 $generated@@3 ($generated@@6 true)))))
 :pattern ( ($generated@@19 $generated@@62 $generated@@63 $generated@@64 $generated@@65 $generated@@66 $generated@@67 $generated@@68 $generated@@69 $generated@@70))
))))
(assert (forall (($generated@@72 Int) ) (! (= ($generated@@71 $generated@@72) (to_real $generated@@72))
 :pattern ( ($generated@@71 $generated@@72))
)))
(assert (forall (($generated@@73 Int) ) (! (= ($generated@@49 ($generated@@71 $generated@@73)) $generated@@73)
 :pattern ( ($generated@@49 ($generated@@71 $generated@@73)))
)))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@T) ) (! (= ($generated@@55 $generated@@75 ($generated@@56 $generated@@75 $generated@@74)) $generated@@74)
 :pattern ( ($generated@@56 $generated@@75 $generated@@74))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@87 T@T) ($generated@@88 T@T) ($generated@@89 T@T) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ) (! (= ($generated@@76 $generated@@87 $generated@@88 $generated@@89 ($generated@@83 $generated@@87 $generated@@88 $generated@@89 $generated@@91 $generated@@92 $generated@@93 $generated@@90) $generated@@92 $generated@@93) $generated@@90)
 :weight 0
)) (and (forall (($generated@@94 T@T) ($generated@@95 T@T) ($generated@@96 T@T) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@99 $generated@@101) (= ($generated@@76 $generated@@94 $generated@@95 $generated@@96 ($generated@@83 $generated@@94 $generated@@95 $generated@@96 $generated@@98 $generated@@99 $generated@@100 $generated@@97) $generated@@101 $generated@@102) ($generated@@76 $generated@@94 $generated@@95 $generated@@96 $generated@@98 $generated@@101 $generated@@102)))
 :weight 0
)) (forall (($generated@@103 T@T) ($generated@@104 T@T) ($generated@@105 T@T) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (!  (or (= $generated@@109 $generated@@111) (= ($generated@@76 $generated@@103 $generated@@104 $generated@@105 ($generated@@83 $generated@@103 $generated@@104 $generated@@105 $generated@@107 $generated@@108 $generated@@109 $generated@@106) $generated@@110 $generated@@111) ($generated@@76 $generated@@103 $generated@@104 $generated@@105 $generated@@107 $generated@@110 $generated@@111)))
 :weight 0
)))) (= ($generated@@2 $generated@@77) 6)) (= ($generated@@2 $generated@@78) 7)) (forall (($generated@@112 T@T) ($generated@@113 T@T) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ) (! (= ($generated@@80 $generated@@112 $generated@@113 ($generated@@84 $generated@@112 $generated@@113 $generated@@115 $generated@@116 $generated@@114) $generated@@116) $generated@@114)
 :weight 0
))) (forall (($generated@@117 T@T) ($generated@@118 T@T) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ) (!  (or (= $generated@@121 $generated@@122) (= ($generated@@80 $generated@@117 $generated@@118 ($generated@@84 $generated@@117 $generated@@118 $generated@@120 $generated@@121 $generated@@119) $generated@@122) ($generated@@80 $generated@@117 $generated@@118 $generated@@120 $generated@@122)))
 :weight 0
))) (= ($generated@@2 $generated@@81) 8)) (forall (($generated@@123 T@T) ($generated@@124 T@T) ) (= ($generated@@2 ($generated@@82 $generated@@123 $generated@@124)) 9))) (forall (($generated@@125 T@T) ($generated@@126 T@T) ) (! (= ($generated@@85 ($generated@@82 $generated@@125 $generated@@126)) $generated@@125)
 :pattern ( ($generated@@82 $generated@@125 $generated@@126))
))) (forall (($generated@@127 T@T) ($generated@@128 T@T) ) (! (= ($generated@@86 ($generated@@82 $generated@@127 $generated@@128)) $generated@@128)
 :pattern ( ($generated@@82 $generated@@127 $generated@@128))
))))
(assert (forall (($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 Bool) ($generated@@133 T@U) ($generated@@134 T@U) ) (! (= ($generated@@7 ($generated@@76 $generated@@77 $generated@@78 $generated@@3 ($generated@@79 $generated@@129 $generated@@130 $generated@@131 $generated@@132) $generated@@133 $generated@@134))  (=> (and (or (not (= $generated@@133 $generated@@129)) (not true)) ($generated@@7 ($generated@@55 $generated@@3 ($generated@@80 $generated@@78 $generated@@81 ($generated@@80 $generated@@77 ($generated@@82 $generated@@78 $generated@@81) $generated@@130 $generated@@133) $generated@@131)))) $generated@@132))
 :pattern ( ($generated@@76 $generated@@77 $generated@@78 $generated@@3 ($generated@@79 $generated@@129 $generated@@130 $generated@@131 $generated@@132) $generated@@133 $generated@@134))
)))
(assert (forall (($generated@@135 Int) ($generated@@136 Int) ) (! (= ($generated@@30 $generated@@135 $generated@@136) (mod $generated@@135 $generated@@136))
 :pattern ( ($generated@@30 $generated@@135 $generated@@136))
)))
(assert (= ($generated@@137 $generated@@60) $generated@@0))
(assert (= ($generated@@138 $generated@@60) $generated@@1))
(assert (forall (($generated@@139 Int) ) (! (= ($generated@@56 $generated@@4 ($generated@@8 ($generated@@20 $generated@@139))) ($generated@@23 $generated@@81 ($generated@@56 $generated@@4 ($generated@@8 $generated@@139))))
 :pattern ( ($generated@@56 $generated@@4 ($generated@@8 ($generated@@20 $generated@@139))))
)))
(assert (forall (($generated@@140 Real) ) (! (= ($generated@@56 $generated@@5 ($generated@@10 ($generated@@21 $generated@@140))) ($generated@@23 $generated@@81 ($generated@@56 $generated@@5 ($generated@@10 $generated@@140))))
 :pattern ( ($generated@@56 $generated@@5 ($generated@@10 ($generated@@21 $generated@@140))))
)))
(assert (forall (($generated@@141 T@U) ($generated@@142 T@T) ) (! (= ($generated@@56 $generated@@142 ($generated@@23 $generated@@142 $generated@@141)) ($generated@@23 $generated@@81 ($generated@@56 $generated@@142 $generated@@141)))
 :pattern ( ($generated@@56 $generated@@142 ($generated@@23 $generated@@142 $generated@@141)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@143 () Int)
(declare-fun $generated@@144 () Int)
(declare-fun $generated@@145 () Real)
(declare-fun $generated@@146 () Int)
(declare-fun $generated@@147 () Real)
(declare-fun $generated@@148 () (_ BitVec 67))
(declare-fun $generated@@149 () (_ BitVec 32))
(declare-fun $generated@@150 () (_ BitVec 7))
(declare-fun $generated@@151 () Int)
(declare-fun $generated@@152 () Int)
(declare-fun $generated@@153 () Int)
(declare-fun $generated@@154 () Int)
(declare-fun $generated@@155 () Real)
(declare-fun $generated@@156 () Int)
(declare-fun $generated@@157 () Int)
(declare-fun $generated@@158 () Int)
(declare-fun $generated@@159 () Bool)
(declare-fun $generated@@160 () Int)
(declare-fun $generated@@161 () Int)
(declare-fun $generated@@162 () Int)
(declare-fun $generated@@163 () Int)
(declare-fun $generated@@164 () T@U)
(declare-fun $generated@@165 () T@U)
(declare-fun $generated@@166 () T@U)
(declare-fun $generated@@167 (T@U) Bool)
(declare-fun $generated@@168 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 31) (let (($generated@@169  (=> (= (ControlFlow 0 4) (- 0 3)) (=> ($generated@@29 $generated@@143 $generated@@144 $generated@@145 $generated@@146 $generated@@147 $generated@@148 $generated@@149 $generated@@150 $generated@@151) (or ($generated@@19 $generated@@143 $generated@@144 $generated@@145 $generated@@146 $generated@@147 $generated@@148 $generated@@149 $generated@@150 $generated@@151) ($generated@@7 ($generated@@23 $generated@@3 ($generated@@6 true))))))))
(let (($generated@@170  (and (=> (= (ControlFlow 0 24) (- 0 26)) (<= ($generated@@20 (- 0 4)) ($generated@@49 $generated@@147))) (and (=> (= (ControlFlow 0 24) (- 0 25)) (< ($generated@@49 $generated@@147) 300)) (=> (and (<= ($generated@@20 (- 0 4)) ($generated@@49 $generated@@147)) (< ($generated@@49 $generated@@147) 300)) (=> (and (and (= $generated@@146 $generated@@152) (= $generated@@143 $generated@@153)) (and (= $generated@@144 $generated@@154) (= (ControlFlow 0 24) 4))) $generated@@169))))))
(let (($generated@@171  (=> (and (< ($generated@@49 $generated@@147) ($generated@@20 (- 0 4))) (= (ControlFlow 0 28) 24)) $generated@@170)))
(let (($generated@@172  (=> (and (<= ($generated@@20 (- 0 4)) ($generated@@49 $generated@@147)) (= (ControlFlow 0 27) 24)) $generated@@170)))
(let (($generated@@173  (and (=> (= (ControlFlow 0 29) 27) $generated@@172) (=> (= (ControlFlow 0 29) 28) $generated@@171))))
(let (($generated@@174  (=> (= $generated@@155 ($generated@@21 6.0)) (and (=> (= (ControlFlow 0 18) (- 0 23)) (= ($generated@@71 ($generated@@49 $generated@@155)) $generated@@155)) (=> (= ($generated@@71 ($generated@@49 $generated@@155)) $generated@@155) (and (=> (= (ControlFlow 0 18) (- 0 22)) (= ($generated@@30 ($generated@@49 $generated@@155) ($generated@@20 2)) ($generated@@20 0))) (=> (= ($generated@@30 ($generated@@49 $generated@@155) ($generated@@20 2)) ($generated@@20 0)) (=> (= $generated@@156 ($generated@@49 ($generated@@21 6.0))) (and (=> (= (ControlFlow 0 18) (- 0 21)) (= ($generated@@30 $generated@@156 ($generated@@20 2)) ($generated@@20 0))) (=> (= ($generated@@30 $generated@@156 ($generated@@20 2)) ($generated@@20 0)) (=> (and (= $generated@@157 ($generated@@49 ($generated@@21 6.0))) (= $generated@@158 ($generated@@20 6))) (and (=> (= (ControlFlow 0 18) (- 0 20)) (= ($generated@@30 $generated@@158 ($generated@@20 2)) ($generated@@20 0))) (=> (= ($generated@@30 $generated@@158 ($generated@@20 2)) ($generated@@20 0)) (and (=> (= (ControlFlow 0 18) (- 0 19)) (= $generated@@157 ($generated@@20 6))) (=> (= $generated@@157 ($generated@@20 6)) (=> (and (and (= $generated@@146 $generated@@157) (= $generated@@143 $generated@@153)) (and (= $generated@@144 $generated@@154) (= (ControlFlow 0 18) 4))) $generated@@169))))))))))))))))
(let (($generated@@175  (and (=> (= (ControlFlow 0 16) (- 0 17)) (= ($generated@@71 ($generated@@49 $generated@@145)) $generated@@145)) (=> (= ($generated@@71 ($generated@@49 $generated@@145)) $generated@@145) (=> (= $generated@@159 (= ($generated@@49 $generated@@145) ($generated@@49 $generated@@145))) (=> (and (and (= $generated@@146 $generated@@152) (= $generated@@143 $generated@@153)) (and (= $generated@@144 $generated@@154) (= (ControlFlow 0 16) 4))) $generated@@169))))))
(let (($generated@@176  (=> (= $generated@@145 ($generated@@71 ($generated@@49 $generated@@145))) (and (=> (= (ControlFlow 0 14) (- 0 15)) (= ($generated@@71 ($generated@@49 $generated@@145)) $generated@@145)) (=> (= ($generated@@71 ($generated@@49 $generated@@145)) $generated@@145) (=> (= $generated@@160 ($generated@@49 $generated@@145)) (=> (and (and (= $generated@@146 $generated@@152) (= $generated@@143 $generated@@160)) (and (= $generated@@144 $generated@@154) (= (ControlFlow 0 14) 4))) $generated@@169)))))))
(let (($generated@@177  (=> (<= ($generated@@21 0.0) $generated@@145) (and (=> (= (ControlFlow 0 12) (- 0 13)) ($generated@@59 $generated@@4 ($generated@@8 ($generated@@49 $generated@@145)) $generated@@60)) (=> ($generated@@59 $generated@@4 ($generated@@8 ($generated@@49 $generated@@145)) $generated@@60) (=> (= $generated@@161 ($generated@@49 $generated@@145)) (=> (and (and (= $generated@@146 $generated@@152) (= $generated@@143 $generated@@153)) (and (= $generated@@144 $generated@@161) (= (ControlFlow 0 12) 4))) $generated@@169)))))))
(let (($generated@@178  (and (=> (= (ControlFlow 0 10) (- 0 11)) ($generated@@59 $generated@@4 ($generated@@8 ($generated@@49 $generated@@145)) $generated@@60)) (=> ($generated@@59 $generated@@4 ($generated@@8 ($generated@@49 $generated@@145)) $generated@@60) (=> (= $generated@@162 ($generated@@49 $generated@@145)) (=> (and (and (= $generated@@146 $generated@@152) (= $generated@@143 $generated@@153)) (and (= $generated@@144 $generated@@162) (= (ControlFlow 0 10) 4))) $generated@@169))))))
(let (($generated@@179  (and (=> (= (ControlFlow 0 8) (- 0 9)) (= ($generated@@71 ($generated@@49 $generated@@145)) $generated@@145)) (=> (= ($generated@@71 ($generated@@49 $generated@@145)) $generated@@145) (=> (= $generated@@163 ($generated@@49 $generated@@145)) (=> (and (and (= $generated@@146 $generated@@152) (= $generated@@143 $generated@@163)) (and (= $generated@@144 $generated@@154) (= (ControlFlow 0 8) 4))) $generated@@169))))))
(let (($generated@@180  (=> (<= ($generated@@20 0) $generated@@153) (=> (and (and (= $generated@@146 $generated@@152) (= $generated@@143 $generated@@153)) (and (= $generated@@144 $generated@@154) (= (ControlFlow 0 7) 4))) $generated@@169))))
(let (($generated@@181  (and (=> (= (ControlFlow 0 5) (- 0 6)) ($generated@@59 $generated@@4 ($generated@@8 $generated@@153) $generated@@60)) (=> ($generated@@59 $generated@@4 ($generated@@8 $generated@@153) $generated@@60) (=> (and (and (= $generated@@146 $generated@@152) (= $generated@@143 $generated@@153)) (and (= $generated@@144 $generated@@153) (= (ControlFlow 0 5) 4))) $generated@@169)))))
(let (($generated@@182  (=> (and (and (and (and (and (and (and (and (and (not ($generated@@7 ($generated@@23 $generated@@3 ($generated@@6 true)))) (< $generated@@153 ($generated@@20 0))) (not ($generated@@7 ($generated@@23 $generated@@3 ($generated@@6 true))))) (not ($generated@@7 ($generated@@23 $generated@@3 ($generated@@6 true))))) (< $generated@@145 ($generated@@21 0.0))) (or (not (= $generated@@145 ($generated@@71 ($generated@@49 $generated@@145)))) (not true))) (not ($generated@@7 ($generated@@23 $generated@@3 ($generated@@6 true))))) (not ($generated@@7 ($generated@@23 $generated@@3 ($generated@@6 true))))) (not ($generated@@7 ($generated@@23 $generated@@3 ($generated@@6 true))))) (= (ControlFlow 0 2) (- 0 1))) false)))
(let (($generated@@183  (=> (= $generated@@164 ($generated@@79 $generated@@165 $generated@@166 $generated false)) (and (and (and (and (and (and (and (and (and (=> (= (ControlFlow 0 30) 5) $generated@@181) (=> (= (ControlFlow 0 30) 7) $generated@@180)) (=> (= (ControlFlow 0 30) 8) $generated@@179)) (=> (= (ControlFlow 0 30) 10) $generated@@178)) (=> (= (ControlFlow 0 30) 12) $generated@@177)) (=> (= (ControlFlow 0 30) 14) $generated@@176)) (=> (= (ControlFlow 0 30) 16) $generated@@175)) (=> (= (ControlFlow 0 30) 29) $generated@@173)) (=> (= (ControlFlow 0 30) 18) $generated@@174)) (=> (= (ControlFlow 0 30) 2) $generated@@182)))))
(let (($generated@@184  (=> (and (and ($generated@@167 $generated@@166) ($generated@@168 $generated@@166)) (and (<= ($generated@@20 0) $generated@@154) (= ($generated@@30 $generated@@152 ($generated@@20 2)) ($generated@@20 0)))) (=> (and (and (and (<= ($generated@@21 (- 0.0 4.0)) $generated@@147) (< $generated@@147 300.0)) (= 0 $generated@@151)) (and (= 2 $generated@@18) (= (ControlFlow 0 31) 30))) $generated@@183))))
$generated@@184)))))))))))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 5) (- 6))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 8) (- 9))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 10) (- 11))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 16) (- 17))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
