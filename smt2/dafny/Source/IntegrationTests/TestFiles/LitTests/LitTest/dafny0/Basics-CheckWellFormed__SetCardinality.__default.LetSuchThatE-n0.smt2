(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 (T@U) T@U)
(declare-fun $generated@@20 (T@U T@U) Bool)
(declare-fun $generated@@21 () T@U)
(declare-fun $generated@@23 (T@U) Int)
(declare-fun $generated@@26 (T@U T@U) Bool)
(declare-fun $generated@@27 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@28 () T@T)
(declare-fun $generated@@29 () T@T)
(declare-fun $generated@@30 () T@T)
(declare-fun $generated@@31 (T@T T@T) T@T)
(declare-fun $generated@@32 (T@T T@U) T@U)
(declare-fun $generated@@33 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@34 (T@T) T@T)
(declare-fun $generated@@35 (T@T) T@T)
(declare-fun $generated@@56 (T@U) Int)
(declare-fun $generated@@57 (T@U) Bool)
(declare-fun $generated@@58 (T@T T@U) T@U)
(declare-fun $generated@@60 (Int) Int)
(declare-fun $generated@@62 (T@T T@U) T@U)
(declare-fun $generated@@67 (T@T T@U T@U) Bool)
(declare-fun $generated@@68 () T@T)
(declare-fun $generated@@69 (T@U) T@U)
(declare-fun $generated@@70 (T@U T@U) Bool)
(declare-fun $generated@@74 (T@U T@U T@U) Bool)
(declare-fun $generated@@75 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@101 (T@U) T@U)
(declare-fun $generated@@106 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@107 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@108 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (= ($generated@@19 $generated) $generated@@0))
(assert (forall (($generated@@22 T@U) ) (!  (not ($generated@@20 $generated@@21 $generated@@22))
 :pattern ( ($generated@@20 $generated@@21 $generated@@22))
)))
(assert (forall (($generated@@24 T@U) ) (!  (and (= (= ($generated@@23 $generated@@24) 0) (= $generated@@24 $generated@@21)) (=> (or (not (= ($generated@@23 $generated@@24) 0)) (not true)) (exists (($generated@@25 T@U) ) (! ($generated@@20 $generated@@24 $generated@@25)
 :pattern ( ($generated@@20 $generated@@24 $generated@@25))
))))
 :pattern ( ($generated@@23 $generated@@24))
)))
(assert  (and (and (and (and (and (and (and (forall (($generated@@36 T@T) ($generated@@37 T@T) ($generated@@38 T@U) ($generated@@39 T@U) ($generated@@40 T@U) ) (! (= ($generated@@27 $generated@@36 $generated@@37 ($generated@@33 $generated@@36 $generated@@37 $generated@@39 $generated@@40 $generated@@38) $generated@@40) $generated@@38)
 :weight 0
)) (forall (($generated@@41 T@T) ($generated@@42 T@T) ($generated@@43 T@U) ($generated@@44 T@U) ($generated@@45 T@U) ($generated@@46 T@U) ) (!  (or (= $generated@@45 $generated@@46) (= ($generated@@27 $generated@@41 $generated@@42 ($generated@@33 $generated@@41 $generated@@42 $generated@@44 $generated@@45 $generated@@43) $generated@@46) ($generated@@27 $generated@@41 $generated@@42 $generated@@44 $generated@@46)))
 :weight 0
))) (= ($generated@@3 $generated@@28) 3)) (= ($generated@@3 $generated@@29) 4)) (= ($generated@@3 $generated@@30) 5)) (forall (($generated@@47 T@T) ($generated@@48 T@T) ) (= ($generated@@3 ($generated@@31 $generated@@47 $generated@@48)) 6))) (forall (($generated@@49 T@T) ($generated@@50 T@T) ) (! (= ($generated@@34 ($generated@@31 $generated@@49 $generated@@50)) $generated@@49)
 :pattern ( ($generated@@31 $generated@@49 $generated@@50))
))) (forall (($generated@@51 T@T) ($generated@@52 T@T) ) (! (= ($generated@@35 ($generated@@31 $generated@@51 $generated@@52)) $generated@@52)
 :pattern ( ($generated@@31 $generated@@51 $generated@@52))
))))
(assert (forall (($generated@@53 T@U) ($generated@@54 T@U) ) (!  (=> ($generated@@26 $generated@@53 $generated@@54) (forall (($generated@@55 T@U) ) (!  (=> ($generated@@8 ($generated@@32 $generated@@4 ($generated@@27 $generated@@28 $generated@@29 ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@53 $generated@@55) $generated@@2))) ($generated@@8 ($generated@@32 $generated@@4 ($generated@@27 $generated@@28 $generated@@29 ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@54 $generated@@55) $generated@@2))))
 :pattern ( ($generated@@27 $generated@@28 $generated@@29 ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@54 $generated@@55) $generated@@2))
)))
 :pattern ( ($generated@@26 $generated@@53 $generated@@54))
)))
(assert (forall (($generated@@59 T@U) ) (!  (=> ($generated@@57 $generated@@59) ($generated@@20 $generated@@59 ($generated@@58 $generated@@5 ($generated@@9 ($generated@@56 $generated@@59)))))
 :pattern ( ($generated@@56 $generated@@59))
)))
(assert (forall (($generated@@61 Int) ) (! (= ($generated@@60 $generated@@61) $generated@@61)
 :pattern ( ($generated@@60 $generated@@61))
)))
(assert (forall (($generated@@63 T@U) ($generated@@64 T@T) ) (! (= ($generated@@62 $generated@@64 $generated@@63) $generated@@63)
 :pattern ( ($generated@@62 $generated@@64 $generated@@63))
)))
(assert (forall (($generated@@65 T@U) ($generated@@66 T@T) ) (! (= ($generated@@58 $generated@@66 ($generated@@32 $generated@@66 $generated@@65)) $generated@@65)
 :pattern ( ($generated@@32 $generated@@66 $generated@@65))
)))
(assert (= ($generated@@3 $generated@@68) 7))
(assert (forall (($generated@@71 T@U) ($generated@@72 T@U) ) (! (= ($generated@@67 $generated@@68 $generated@@71 ($generated@@69 $generated@@72)) (forall (($generated@@73 T@U) ) (!  (=> ($generated@@20 $generated@@71 $generated@@73) ($generated@@70 $generated@@73 $generated@@72))
 :pattern ( ($generated@@20 $generated@@71 $generated@@73))
)))
 :pattern ( ($generated@@67 $generated@@68 $generated@@71 ($generated@@69 $generated@@72)))
)))
(assert (forall (($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@T) ) (! (= ($generated@@74 ($generated@@58 $generated@@79 $generated@@76) $generated@@77 $generated@@78) ($generated@@75 $generated@@79 $generated@@76 $generated@@77 $generated@@78))
 :pattern ( ($generated@@74 ($generated@@58 $generated@@79 $generated@@76) $generated@@77 $generated@@78))
)))
(assert (forall (($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ) (!  (=> ($generated@@26 $generated@@80 $generated@@81) (=> ($generated@@74 $generated@@82 $generated@@83 $generated@@80) ($generated@@74 $generated@@82 $generated@@83 $generated@@81)))
 :pattern ( ($generated@@26 $generated@@80 $generated@@81) ($generated@@74 $generated@@82 $generated@@83 $generated@@80))
)))
(assert (forall (($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@T) ) (!  (=> ($generated@@26 $generated@@84 $generated@@85) (=> ($generated@@75 $generated@@88 $generated@@86 $generated@@87 $generated@@84) ($generated@@75 $generated@@88 $generated@@86 $generated@@87 $generated@@85)))
 :pattern ( ($generated@@26 $generated@@84 $generated@@85) ($generated@@75 $generated@@88 $generated@@86 $generated@@87 $generated@@84))
)))
(assert (forall (($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ) (!  (=> (or (not (= $generated@@89 $generated@@91)) (not true)) (=> (and ($generated@@26 $generated@@89 $generated@@90) ($generated@@26 $generated@@90 $generated@@91)) ($generated@@26 $generated@@89 $generated@@91)))
 :pattern ( ($generated@@26 $generated@@89 $generated@@90) ($generated@@26 $generated@@90 $generated@@91))
)))
(assert (forall (($generated@@92 T@U) ) (!  (=> ($generated@@70 $generated@@92 $generated) (and (= ($generated@@58 $generated@@5 ($generated@@32 $generated@@5 $generated@@92)) $generated@@92) ($generated@@67 $generated@@5 ($generated@@32 $generated@@5 $generated@@92) $generated)))
 :pattern ( ($generated@@70 $generated@@92 $generated))
)))
(assert (forall (($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@T) ) (! (= ($generated@@70 ($generated@@58 $generated@@95 $generated@@93) $generated@@94) ($generated@@67 $generated@@95 $generated@@93 $generated@@94))
 :pattern ( ($generated@@70 ($generated@@58 $generated@@95 $generated@@93) $generated@@94))
)))
(assert (forall (($generated@@96 T@U) ) (! (<= 0 ($generated@@23 $generated@@96))
 :pattern ( ($generated@@23 $generated@@96))
)))
(assert (forall (($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ) (! (= ($generated@@75 $generated@@68 $generated@@97 ($generated@@69 $generated@@98) $generated@@99) (forall (($generated@@100 T@U) ) (!  (=> ($generated@@20 $generated@@97 $generated@@100) ($generated@@74 $generated@@100 $generated@@98 $generated@@99))
 :pattern ( ($generated@@20 $generated@@97 $generated@@100))
)))
 :pattern ( ($generated@@75 $generated@@68 $generated@@97 ($generated@@69 $generated@@98) $generated@@99))
)))
(assert (forall (($generated@@102 T@U) ) (! (= ($generated@@101 ($generated@@69 $generated@@102)) $generated@@102)
 :pattern ( ($generated@@69 $generated@@102))
)))
(assert (forall (($generated@@103 T@U) ) (! (= ($generated@@19 ($generated@@69 $generated@@103)) $generated@@1)
 :pattern ( ($generated@@69 $generated@@103))
)))
(assert (forall (($generated@@104 T@U) ($generated@@105 T@T) ) (! (= ($generated@@32 $generated@@105 ($generated@@58 $generated@@105 $generated@@104)) $generated@@104)
 :pattern ( ($generated@@58 $generated@@105 $generated@@104))
)))
(assert  (and (forall (($generated@@109 T@T) ($generated@@110 T@T) ($generated@@111 T@T) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (! (= ($generated@@106 $generated@@109 $generated@@110 $generated@@111 ($generated@@108 $generated@@109 $generated@@110 $generated@@111 $generated@@113 $generated@@114 $generated@@115 $generated@@112) $generated@@114 $generated@@115) $generated@@112)
 :weight 0
)) (and (forall (($generated@@116 T@T) ($generated@@117 T@T) ($generated@@118 T@T) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ) (!  (or (= $generated@@121 $generated@@123) (= ($generated@@106 $generated@@116 $generated@@117 $generated@@118 ($generated@@108 $generated@@116 $generated@@117 $generated@@118 $generated@@120 $generated@@121 $generated@@122 $generated@@119) $generated@@123 $generated@@124) ($generated@@106 $generated@@116 $generated@@117 $generated@@118 $generated@@120 $generated@@123 $generated@@124)))
 :weight 0
)) (forall (($generated@@125 T@T) ($generated@@126 T@T) ($generated@@127 T@T) ($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ) (!  (or (= $generated@@131 $generated@@133) (= ($generated@@106 $generated@@125 $generated@@126 $generated@@127 ($generated@@108 $generated@@125 $generated@@126 $generated@@127 $generated@@129 $generated@@130 $generated@@131 $generated@@128) $generated@@132 $generated@@133) ($generated@@106 $generated@@125 $generated@@126 $generated@@127 $generated@@129 $generated@@132 $generated@@133)))
 :weight 0
)))))
(assert (forall (($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 Bool) ($generated@@138 T@U) ($generated@@139 T@U) ) (! (= ($generated@@8 ($generated@@106 $generated@@30 $generated@@28 $generated@@4 ($generated@@107 $generated@@134 $generated@@135 $generated@@136 $generated@@137) $generated@@138 $generated@@139))  (=> (and (or (not (= $generated@@138 $generated@@134)) (not true)) ($generated@@8 ($generated@@32 $generated@@4 ($generated@@27 $generated@@28 $generated@@29 ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@135 $generated@@138) $generated@@136)))) $generated@@137))
 :pattern ( ($generated@@106 $generated@@30 $generated@@28 $generated@@4 ($generated@@107 $generated@@134 $generated@@135 $generated@@136 $generated@@137) $generated@@138 $generated@@139))
)))
(assert (forall (($generated@@140 T@U) ($generated@@141 T@U) ) (!  (=> ($generated@@70 $generated@@140 ($generated@@69 $generated@@141)) (and (= ($generated@@58 $generated@@68 ($generated@@32 $generated@@68 $generated@@140)) $generated@@140) ($generated@@67 $generated@@68 ($generated@@32 $generated@@68 $generated@@140) ($generated@@69 $generated@@141))))
 :pattern ( ($generated@@70 $generated@@140 ($generated@@69 $generated@@141)))
)))
(assert (forall (($generated@@142 Int) ) (! (= ($generated@@58 $generated@@5 ($generated@@9 ($generated@@60 $generated@@142))) ($generated@@62 $generated@@29 ($generated@@58 $generated@@5 ($generated@@9 $generated@@142))))
 :pattern ( ($generated@@58 $generated@@5 ($generated@@9 ($generated@@60 $generated@@142))))
)))
(assert (forall (($generated@@143 T@U) ($generated@@144 T@T) ) (! (= ($generated@@58 $generated@@144 ($generated@@62 $generated@@144 $generated@@143)) ($generated@@62 $generated@@29 ($generated@@58 $generated@@144 $generated@@143)))
 :pattern ( ($generated@@58 $generated@@144 ($generated@@62 $generated@@144 $generated@@143)))
)))
(assert (forall (($generated@@145 T@U) ($generated@@146 T@U) ) (! ($generated@@75 $generated@@5 $generated@@146 $generated $generated@@145)
 :pattern ( ($generated@@75 $generated@@5 $generated@@146 $generated $generated@@145))
)))
(assert (forall (($generated@@147 T@U) ) (! ($generated@@67 $generated@@5 $generated@@147 $generated)
 :pattern ( ($generated@@67 $generated@@5 $generated@@147 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@148 () T@U)
(declare-fun $generated@@149 () T@U)
(declare-fun $generated@@150 () T@U)
(declare-fun $generated@@151 () T@U)
(declare-fun $generated@@152 (T@U) Bool)
(declare-fun $generated@@153 () T@U)
(declare-fun $generated@@154 (T@U) Bool)
(declare-fun $generated@@155 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 7) (let (($generated@@156 true))
(let (($generated@@157  (=> (= (ControlFlow 0 3) (- 0 2)) (or (and ($generated@@67 $generated@@5 ($generated@@9 ($generated@@60 0)) $generated) ($generated@@20 $generated@@148 ($generated@@58 $generated@@5 ($generated@@9 ($generated@@60 0))))) (exists (($generated@@158 T@U) ) ($generated@@20 $generated@@148 ($generated@@58 $generated@@5 $generated@@158)))))))
(let (($generated@@159  (=> (or (not (= ($generated@@23 $generated@@148) 0)) (not true)) (and (=> (= (ControlFlow 0 5) 3) $generated@@157) (=> (= (ControlFlow 0 5) 4) $generated@@156)))))
(let (($generated@@160 true))
(let (($generated@@161  (=> (= $generated@@149 ($generated@@107 $generated@@150 $generated@@151 $generated@@2 false)) (=> (and (and ($generated@@152 $generated@@153) ($generated@@154 $generated@@153)) (and (forall (($generated@@162 T@U) ) (!  (=> (and (or (not (= $generated@@162 $generated@@150)) (not true)) ($generated@@8 ($generated@@32 $generated@@4 ($generated@@27 $generated@@28 $generated@@29 ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@151 $generated@@162) $generated@@2)))) (= ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@153 $generated@@162) ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@151 $generated@@162)))
 :pattern ( ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@153 $generated@@162))
)) ($generated@@26 $generated@@151 $generated@@153))) (and (=> (= (ControlFlow 0 6) 5) $generated@@159) (=> (= (ControlFlow 0 6) 1) $generated@@160))))))
(let (($generated@@163  (=> (and ($generated@@152 $generated@@151) ($generated@@154 $generated@@151)) (=> (and (and ($generated@@67 $generated@@68 $generated@@148 ($generated@@69 $generated)) ($generated@@75 $generated@@68 $generated@@148 ($generated@@69 $generated) $generated@@151)) (and (= 0 $generated@@155) (= (ControlFlow 0 7) 6))) $generated@@161))))
$generated@@163)))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
