(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 (T@U) T@U)
(declare-fun $generated@@22 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@23 () T@T)
(declare-fun $generated@@24 (T@U) T@U)
(declare-fun $generated@@25 (T@U) T@U)
(declare-fun $generated@@29 () T@U)
(declare-fun $generated@@30 (T@T T@U) T@U)
(declare-fun $generated@@31 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@32 () T@T)
(declare-fun $generated@@33 () T@T)
(declare-fun $generated@@34 (T@T T@T) T@T)
(declare-fun $generated@@35 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@36 (T@T) T@T)
(declare-fun $generated@@37 (T@T) T@T)
(declare-fun $generated@@58 (T@T T@U) T@U)
(declare-fun $generated@@61 (T@T T@U T@U) Bool)
(declare-fun $generated@@64 (T@U) T@U)
(declare-fun $generated@@67 (T@U) T@U)
(declare-fun $generated@@70 (T@U) T@U)
(declare-fun $generated@@72 (T@U) T@U)
(declare-fun $generated@@76 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@77 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@78 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert (= ($generated@@21 $generated) $generated@@0))
(assert (= ($generated@@5 $generated@@23) 3))
(assert (forall (($generated@@26 T@U) ($generated@@27 T@U) ($generated@@28 T@U) ) (! (= ($generated@@22 $generated@@23 $generated@@27 ($generated@@24 $generated@@26) $generated@@28) ($generated@@22 $generated@@23 $generated@@27 ($generated@@25 $generated@@26) $generated@@28))
 :pattern ( ($generated@@22 $generated@@23 $generated@@27 ($generated@@24 $generated@@26) $generated@@28))
 :pattern ( ($generated@@22 $generated@@23 $generated@@27 ($generated@@25 $generated@@26) $generated@@28))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@38 T@T) ($generated@@39 T@T) ($generated@@40 T@U) ($generated@@41 T@U) ($generated@@42 T@U) ) (! (= ($generated@@31 $generated@@38 $generated@@39 ($generated@@35 $generated@@38 $generated@@39 $generated@@41 $generated@@42 $generated@@40) $generated@@42) $generated@@40)
 :weight 0
)) (forall (($generated@@43 T@T) ($generated@@44 T@T) ($generated@@45 T@U) ($generated@@46 T@U) ($generated@@47 T@U) ($generated@@48 T@U) ) (!  (or (= $generated@@47 $generated@@48) (= ($generated@@31 $generated@@43 $generated@@44 ($generated@@35 $generated@@43 $generated@@44 $generated@@46 $generated@@47 $generated@@45) $generated@@48) ($generated@@31 $generated@@43 $generated@@44 $generated@@46 $generated@@48)))
 :weight 0
))) (= ($generated@@5 $generated@@32) 4)) (= ($generated@@5 $generated@@33) 5)) (forall (($generated@@49 T@T) ($generated@@50 T@T) ) (= ($generated@@5 ($generated@@34 $generated@@49 $generated@@50)) 6))) (forall (($generated@@51 T@T) ($generated@@52 T@T) ) (! (= ($generated@@36 ($generated@@34 $generated@@51 $generated@@52)) $generated@@51)
 :pattern ( ($generated@@34 $generated@@51 $generated@@52))
))) (forall (($generated@@53 T@T) ($generated@@54 T@T) ) (! (= ($generated@@37 ($generated@@34 $generated@@53 $generated@@54)) $generated@@54)
 :pattern ( ($generated@@34 $generated@@53 $generated@@54))
))))
(assert (forall (($generated@@55 T@U) ($generated@@56 T@U) ($generated@@57 T@U) ) (! (= ($generated@@22 $generated@@23 $generated@@56 ($generated@@25 $generated@@55) $generated@@57)  (or (= $generated@@56 $generated@@29) ($generated@@10 ($generated@@30 $generated@@6 ($generated@@31 $generated@@32 $generated@@33 ($generated@@31 $generated@@23 ($generated@@34 $generated@@32 $generated@@33) $generated@@57 $generated@@56) $generated@@1)))))
 :pattern ( ($generated@@22 $generated@@23 $generated@@56 ($generated@@25 $generated@@55) $generated@@57))
)))
(assert (forall (($generated@@59 T@U) ($generated@@60 T@T) ) (! (= ($generated@@58 $generated@@60 ($generated@@30 $generated@@60 $generated@@59)) $generated@@59)
 :pattern ( ($generated@@30 $generated@@60 $generated@@59))
)))
(assert (forall (($generated@@62 T@U) ($generated@@63 T@U) ) (! (= ($generated@@61 $generated@@23 $generated@@63 ($generated@@24 $generated@@62))  (and ($generated@@61 $generated@@23 $generated@@63 ($generated@@25 $generated@@62)) (or (not (= $generated@@63 $generated@@29)) (not true))))
 :pattern ( ($generated@@61 $generated@@23 $generated@@63 ($generated@@24 $generated@@62)))
 :pattern ( ($generated@@61 $generated@@23 $generated@@63 ($generated@@25 $generated@@62)))
)))
(assert (forall (($generated@@65 T@U) ) (!  (and (= ($generated@@21 ($generated@@25 $generated@@65)) $generated@@2) (= ($generated@@64 ($generated@@25 $generated@@65)) $generated@@4))
 :pattern ( ($generated@@25 $generated@@65))
)))
(assert (forall (($generated@@66 T@U) ) (!  (and (= ($generated@@21 ($generated@@24 $generated@@66)) $generated@@3) (= ($generated@@64 ($generated@@24 $generated@@66)) $generated@@4))
 :pattern ( ($generated@@24 $generated@@66))
)))
(assert (forall (($generated@@68 T@U) ($generated@@69 T@U) ) (! (= ($generated@@61 $generated@@23 $generated@@69 ($generated@@25 $generated@@68))  (or (= $generated@@69 $generated@@29) (= ($generated@@67 $generated@@69) ($generated@@25 $generated@@68))))
 :pattern ( ($generated@@61 $generated@@23 $generated@@69 ($generated@@25 $generated@@68)))
)))
(assert (forall (($generated@@71 T@U) ) (! (= ($generated@@70 ($generated@@25 $generated@@71)) $generated@@71)
 :pattern ( ($generated@@25 $generated@@71))
)))
(assert (forall (($generated@@73 T@U) ) (! (= ($generated@@72 ($generated@@24 $generated@@73)) $generated@@73)
 :pattern ( ($generated@@24 $generated@@73))
)))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@T) ) (! (= ($generated@@30 $generated@@75 ($generated@@58 $generated@@75 $generated@@74)) $generated@@74)
 :pattern ( ($generated@@58 $generated@@75 $generated@@74))
)))
(assert  (and (forall (($generated@@79 T@T) ($generated@@80 T@T) ($generated@@81 T@T) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ) (! (= ($generated@@76 $generated@@79 $generated@@80 $generated@@81 ($generated@@78 $generated@@79 $generated@@80 $generated@@81 $generated@@83 $generated@@84 $generated@@85 $generated@@82) $generated@@84 $generated@@85) $generated@@82)
 :weight 0
)) (and (forall (($generated@@86 T@T) ($generated@@87 T@T) ($generated@@88 T@T) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (!  (or (= $generated@@91 $generated@@93) (= ($generated@@76 $generated@@86 $generated@@87 $generated@@88 ($generated@@78 $generated@@86 $generated@@87 $generated@@88 $generated@@90 $generated@@91 $generated@@92 $generated@@89) $generated@@93 $generated@@94) ($generated@@76 $generated@@86 $generated@@87 $generated@@88 $generated@@90 $generated@@93 $generated@@94)))
 :weight 0
)) (forall (($generated@@95 T@T) ($generated@@96 T@T) ($generated@@97 T@T) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ) (!  (or (= $generated@@101 $generated@@103) (= ($generated@@76 $generated@@95 $generated@@96 $generated@@97 ($generated@@78 $generated@@95 $generated@@96 $generated@@97 $generated@@99 $generated@@100 $generated@@101 $generated@@98) $generated@@102 $generated@@103) ($generated@@76 $generated@@95 $generated@@96 $generated@@97 $generated@@99 $generated@@102 $generated@@103)))
 :weight 0
)))))
(assert (forall (($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 Bool) ($generated@@108 T@U) ($generated@@109 T@U) ) (! (= ($generated@@10 ($generated@@76 $generated@@23 $generated@@32 $generated@@6 ($generated@@77 $generated@@104 $generated@@105 $generated@@106 $generated@@107) $generated@@108 $generated@@109))  (=> (and (or (not (= $generated@@108 $generated@@104)) (not true)) ($generated@@10 ($generated@@30 $generated@@6 ($generated@@31 $generated@@32 $generated@@33 ($generated@@31 $generated@@23 ($generated@@34 $generated@@32 $generated@@33) $generated@@105 $generated@@108) $generated@@106)))) $generated@@107))
 :pattern ( ($generated@@76 $generated@@23 $generated@@32 $generated@@6 ($generated@@77 $generated@@104 $generated@@105 $generated@@106 $generated@@107) $generated@@108 $generated@@109))
)))
(assert (forall (($generated@@110 T@U) ($generated@@111 T@U) ) (! ($generated@@22 $generated@@8 $generated@@111 $generated $generated@@110)
 :pattern ( ($generated@@22 $generated@@8 $generated@@111 $generated $generated@@110))
)))
(assert (forall (($generated@@112 T@U) ) (! ($generated@@61 $generated@@8 $generated@@112 $generated)
 :pattern ( ($generated@@61 $generated@@8 $generated@@112 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@113 () T@U)
(declare-fun $generated@@114 () T@U)
(declare-fun $generated@@115 () T@U)
(declare-fun $generated@@116 () T@U)
(declare-fun $generated@@117 (T@U) Bool)
(declare-fun $generated@@118 (T@U) Bool)
(declare-fun $generated@@119 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@120  (=> (and (and (= $generated@@113 ($generated@@77 $generated@@29 $generated@@114 $generated@@1 false)) (= (ControlFlow 0 2) (- 0 1))) false) (or (not (= $generated@@115 $generated@@116)) (not true)))))
(let (($generated@@121  (=> (and (and (and ($generated@@117 $generated@@114) ($generated@@118 $generated@@114)) (and ($generated@@61 $generated@@23 $generated@@115 ($generated@@24 $generated)) ($generated@@22 $generated@@23 $generated@@115 ($generated@@24 $generated) $generated@@114))) (and (and ($generated@@61 $generated@@23 $generated@@116 ($generated@@24 $generated)) ($generated@@22 $generated@@23 $generated@@116 ($generated@@24 $generated) $generated@@114)) (and (= 1 $generated@@119) (= (ControlFlow 0 3) 2)))) $generated@@120)))
$generated@@121)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
