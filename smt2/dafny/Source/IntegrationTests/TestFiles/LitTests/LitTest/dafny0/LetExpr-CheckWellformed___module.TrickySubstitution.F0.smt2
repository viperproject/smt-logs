(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 (T@U) T@U)
(declare-fun $generated@@22 (T@T T@U T@U) Bool)
(declare-fun $generated@@23 () T@T)
(declare-fun $generated@@24 () T@U)
(declare-fun $generated@@25 () T@U)
(declare-fun $generated@@26 (T@U) T@U)
(declare-fun $generated@@28 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@29 () T@U)
(declare-fun $generated@@32 () Int)
(declare-fun $generated@@33 (T@U Int) Int)
(declare-fun $generated@@34 (T@U Int) Bool)
(declare-fun $generated@@37 (T@T T@U) T@U)
(declare-fun $generated@@38 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@39 () T@T)
(declare-fun $generated@@40 () T@T)
(declare-fun $generated@@41 (T@T T@T) T@T)
(declare-fun $generated@@42 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@43 (T@T) T@T)
(declare-fun $generated@@44 (T@T) T@T)
(declare-fun $generated@@64 (Int) Int)
(declare-fun $generated@@66 (T@T T@U) T@U)
(declare-fun $generated@@69 (T@T T@U) T@U)
(declare-fun $generated@@72 (T@U T@U T@U) Bool)
(declare-fun $generated@@77 (T@U) Bool)
(declare-fun $generated@@78 (Int) Bool)
(declare-fun $generated@@79 (Int) Int)
(declare-fun $generated@@92 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@93 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@94 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@126 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert (= ($generated@@21 $generated) $generated@@0))
(assert (= ($generated@@5 $generated@@23) 3))
(assert (forall (($generated@@27 T@U) ) (! (= ($generated@@22 $generated@@23 $generated@@27 $generated@@24)  (or (= $generated@@27 $generated@@25) (= ($generated@@26 $generated@@27) $generated@@24)))
 :pattern ( ($generated@@22 $generated@@23 $generated@@27 $generated@@24))
)))
(assert (forall (($generated@@30 T@U) ($generated@@31 T@U) ) (! (= ($generated@@28 $generated@@23 $generated@@30 $generated@@29 $generated@@31) ($generated@@28 $generated@@23 $generated@@30 $generated@@24 $generated@@31))
 :pattern ( ($generated@@28 $generated@@23 $generated@@30 $generated@@29 $generated@@31))
 :pattern ( ($generated@@28 $generated@@23 $generated@@30 $generated@@24 $generated@@31))
)))
(assert  (=> (<= 0 $generated@@32) (forall (($generated@@35 T@U) ($generated@@36 Int) ) (!  (=> (or ($generated@@34 $generated@@35 $generated@@36) (and (< 0 $generated@@32) (and (or (not (= $generated@@35 $generated@@25)) (not true)) ($generated@@22 $generated@@23 $generated@@35 $generated@@29)))) (= ($generated@@33 $generated@@35 $generated@@36) $generated@@36))
 :pattern ( ($generated@@33 $generated@@35 $generated@@36))
))))
(assert  (and (and (and (and (and (and (forall (($generated@@45 T@T) ($generated@@46 T@T) ($generated@@47 T@U) ($generated@@48 T@U) ($generated@@49 T@U) ) (! (= ($generated@@38 $generated@@45 $generated@@46 ($generated@@42 $generated@@45 $generated@@46 $generated@@48 $generated@@49 $generated@@47) $generated@@49) $generated@@47)
 :weight 0
)) (forall (($generated@@50 T@T) ($generated@@51 T@T) ($generated@@52 T@U) ($generated@@53 T@U) ($generated@@54 T@U) ($generated@@55 T@U) ) (!  (or (= $generated@@54 $generated@@55) (= ($generated@@38 $generated@@50 $generated@@51 ($generated@@42 $generated@@50 $generated@@51 $generated@@53 $generated@@54 $generated@@52) $generated@@55) ($generated@@38 $generated@@50 $generated@@51 $generated@@53 $generated@@55)))
 :weight 0
))) (= ($generated@@5 $generated@@39) 4)) (= ($generated@@5 $generated@@40) 5)) (forall (($generated@@56 T@T) ($generated@@57 T@T) ) (= ($generated@@5 ($generated@@41 $generated@@56 $generated@@57)) 6))) (forall (($generated@@58 T@T) ($generated@@59 T@T) ) (! (= ($generated@@43 ($generated@@41 $generated@@58 $generated@@59)) $generated@@58)
 :pattern ( ($generated@@41 $generated@@58 $generated@@59))
))) (forall (($generated@@60 T@T) ($generated@@61 T@T) ) (! (= ($generated@@44 ($generated@@41 $generated@@60 $generated@@61)) $generated@@61)
 :pattern ( ($generated@@41 $generated@@60 $generated@@61))
))))
(assert (forall (($generated@@62 T@U) ($generated@@63 T@U) ) (! (= ($generated@@28 $generated@@23 $generated@@62 $generated@@24 $generated@@63)  (or (= $generated@@62 $generated@@25) ($generated@@10 ($generated@@37 $generated@@6 ($generated@@38 $generated@@39 $generated@@40 ($generated@@38 $generated@@23 ($generated@@41 $generated@@39 $generated@@40) $generated@@63 $generated@@62) $generated@@1)))))
 :pattern ( ($generated@@28 $generated@@23 $generated@@62 $generated@@24 $generated@@63))
)))
(assert (forall (($generated@@65 Int) ) (! (= ($generated@@64 $generated@@65) $generated@@65)
 :pattern ( ($generated@@64 $generated@@65))
)))
(assert (forall (($generated@@67 T@U) ($generated@@68 T@T) ) (! (= ($generated@@66 $generated@@68 $generated@@67) $generated@@67)
 :pattern ( ($generated@@66 $generated@@68 $generated@@67))
)))
(assert (forall (($generated@@70 T@U) ($generated@@71 T@T) ) (! (= ($generated@@69 $generated@@71 ($generated@@37 $generated@@71 $generated@@70)) $generated@@70)
 :pattern ( ($generated@@37 $generated@@71 $generated@@70))
)))
(assert (forall (($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@T) ) (! (= ($generated@@72 ($generated@@69 $generated@@76 $generated@@73) $generated@@74 $generated@@75) ($generated@@28 $generated@@76 $generated@@73 $generated@@74 $generated@@75))
 :pattern ( ($generated@@72 ($generated@@69 $generated@@76 $generated@@73) $generated@@74 $generated@@75))
)))
(assert  (=> (<= 0 $generated@@32) (forall (($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 Int) ) (!  (=> (or ($generated@@34 ($generated@@66 $generated@@23 $generated@@81) ($generated@@64 $generated@@82)) (and (< 0 $generated@@32) (and ($generated@@77 $generated@@80) (and (or (not (= $generated@@81 $generated@@25)) (not true)) (and ($generated@@22 $generated@@23 $generated@@81 $generated@@29) ($generated@@28 $generated@@23 $generated@@81 $generated@@29 $generated@@80)))))) (and ($generated@@78 ($generated@@64 $generated@@82)) (= ($generated@@33 ($generated@@66 $generated@@23 $generated@@81) ($generated@@64 $generated@@82)) (let (($generated@@83 ($generated@@79 ($generated@@64 $generated@@82))))
$generated@@83))))
 :weight 3
 :pattern ( ($generated@@33 ($generated@@66 $generated@@23 $generated@@81) ($generated@@64 $generated@@82)) ($generated@@77 $generated@@80))
))))
(assert (forall (($generated@@84 T@U) ) (! (= ($generated@@22 $generated@@23 $generated@@84 $generated@@29)  (and ($generated@@22 $generated@@23 $generated@@84 $generated@@24) (or (not (= $generated@@84 $generated@@25)) (not true))))
 :pattern ( ($generated@@22 $generated@@23 $generated@@84 $generated@@29))
 :pattern ( ($generated@@22 $generated@@23 $generated@@84 $generated@@24))
)))
(assert  (=> (<= 0 $generated@@32) (forall (($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 Int) ) (!  (=> (or ($generated@@34 $generated@@86 $generated@@87) (and (< 0 $generated@@32) (and ($generated@@77 $generated@@85) (and (or (not (= $generated@@86 $generated@@25)) (not true)) (and ($generated@@22 $generated@@23 $generated@@86 $generated@@29) ($generated@@28 $generated@@23 $generated@@86 $generated@@29 $generated@@85)))))) (and ($generated@@78 $generated@@87) (= ($generated@@33 $generated@@86 $generated@@87) (let (($generated@@88 ($generated@@79 $generated@@87)))
$generated@@88))))
 :pattern ( ($generated@@33 $generated@@86 $generated@@87) ($generated@@77 $generated@@85))
))))
(assert (forall (($generated@@89 T@U) ($generated@@90 T@T) ) (! (= ($generated@@37 $generated@@90 ($generated@@69 $generated@@90 $generated@@89)) $generated@@89)
 :pattern ( ($generated@@69 $generated@@90 $generated@@89))
)))
(assert (forall (($generated@@91 Int) ) (!  (=> ($generated@@78 $generated@@91) (= $generated@@91 ($generated@@79 $generated@@91)))
 :pattern ( ($generated@@79 $generated@@91))
)))
(assert  (and (forall (($generated@@95 T@T) ($generated@@96 T@T) ($generated@@97 T@T) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ) (! (= ($generated@@92 $generated@@95 $generated@@96 $generated@@97 ($generated@@94 $generated@@95 $generated@@96 $generated@@97 $generated@@99 $generated@@100 $generated@@101 $generated@@98) $generated@@100 $generated@@101) $generated@@98)
 :weight 0
)) (and (forall (($generated@@102 T@T) ($generated@@103 T@T) ($generated@@104 T@T) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ) (!  (or (= $generated@@107 $generated@@109) (= ($generated@@92 $generated@@102 $generated@@103 $generated@@104 ($generated@@94 $generated@@102 $generated@@103 $generated@@104 $generated@@106 $generated@@107 $generated@@108 $generated@@105) $generated@@109 $generated@@110) ($generated@@92 $generated@@102 $generated@@103 $generated@@104 $generated@@106 $generated@@109 $generated@@110)))
 :weight 0
)) (forall (($generated@@111 T@T) ($generated@@112 T@T) ($generated@@113 T@T) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ) (!  (or (= $generated@@117 $generated@@119) (= ($generated@@92 $generated@@111 $generated@@112 $generated@@113 ($generated@@94 $generated@@111 $generated@@112 $generated@@113 $generated@@115 $generated@@116 $generated@@117 $generated@@114) $generated@@118 $generated@@119) ($generated@@92 $generated@@111 $generated@@112 $generated@@113 $generated@@115 $generated@@118 $generated@@119)))
 :weight 0
)))))
(assert (forall (($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 Bool) ($generated@@124 T@U) ($generated@@125 T@U) ) (! (= ($generated@@10 ($generated@@92 $generated@@23 $generated@@39 $generated@@6 ($generated@@93 $generated@@120 $generated@@121 $generated@@122 $generated@@123) $generated@@124 $generated@@125))  (=> (and (or (not (= $generated@@124 $generated@@120)) (not true)) ($generated@@10 ($generated@@37 $generated@@6 ($generated@@38 $generated@@39 $generated@@40 ($generated@@38 $generated@@23 ($generated@@41 $generated@@39 $generated@@40) $generated@@121 $generated@@124) $generated@@122)))) $generated@@123))
 :pattern ( ($generated@@92 $generated@@23 $generated@@39 $generated@@6 ($generated@@93 $generated@@120 $generated@@121 $generated@@122 $generated@@123) $generated@@124 $generated@@125))
)))
(assert (= ($generated@@21 $generated@@24) $generated@@2))
(assert (= ($generated@@126 $generated@@24) $generated@@4))
(assert (= ($generated@@21 $generated@@29) $generated@@3))
(assert (= ($generated@@126 $generated@@29) $generated@@4))
(assert (forall (($generated@@127 Int) ) (! (= ($generated@@69 $generated@@7 ($generated@@11 ($generated@@64 $generated@@127))) ($generated@@66 $generated@@40 ($generated@@69 $generated@@7 ($generated@@11 $generated@@127))))
 :pattern ( ($generated@@69 $generated@@7 ($generated@@11 ($generated@@64 $generated@@127))))
)))
(assert (forall (($generated@@128 T@U) ($generated@@129 T@T) ) (! (= ($generated@@69 $generated@@129 ($generated@@66 $generated@@129 $generated@@128)) ($generated@@66 $generated@@40 ($generated@@69 $generated@@129 $generated@@128)))
 :pattern ( ($generated@@69 $generated@@129 ($generated@@66 $generated@@129 $generated@@128)))
)))
(assert (forall (($generated@@130 T@U) ($generated@@131 T@U) ) (! ($generated@@28 $generated@@7 $generated@@131 $generated $generated@@130)
 :pattern ( ($generated@@28 $generated@@7 $generated@@131 $generated $generated@@130))
)))
(assert  (=> (<= 0 $generated@@32) (forall (($generated@@132 T@U) ($generated@@133 T@U) ($generated@@134 Int) ) (!  (=> (or ($generated@@34 $generated@@133 ($generated@@64 $generated@@134)) (and (< 0 $generated@@32) (and ($generated@@77 $generated@@132) (and (or (not (= $generated@@133 $generated@@25)) (not true)) (and ($generated@@22 $generated@@23 $generated@@133 $generated@@29) ($generated@@28 $generated@@23 $generated@@133 $generated@@29 $generated@@132)))))) (and ($generated@@78 ($generated@@64 $generated@@134)) (= ($generated@@33 $generated@@133 ($generated@@64 $generated@@134)) (let (($generated@@135 ($generated@@79 ($generated@@64 $generated@@134))))
$generated@@135))))
 :weight 3
 :pattern ( ($generated@@33 $generated@@133 ($generated@@64 $generated@@134)) ($generated@@77 $generated@@132))
))))
(assert (forall (($generated@@136 T@U) ) (! ($generated@@22 $generated@@7 $generated@@136 $generated)
 :pattern ( ($generated@@22 $generated@@7 $generated@@136 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@137 () T@U)
(declare-fun $generated@@138 () Int)
(declare-fun $generated@@139 () Int)
(declare-fun $generated@@140 () T@U)
(declare-fun $generated@@141 () T@U)
(declare-fun $generated@@142 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 10) (let (($generated@@143  (=> (= (ControlFlow 0 6) (- 0 5)) (= ($generated@@33 $generated@@137 $generated@@138) $generated@@138))))
(let (($generated@@144  (and (=> (= (ControlFlow 0 7) (- 0 8)) (or (and ($generated@@22 $generated@@7 ($generated@@11 $generated@@138) $generated) (= $generated@@138 $generated@@138)) (or (and ($generated@@22 $generated@@7 ($generated@@11 ($generated@@64 0)) $generated) (= $generated@@138 ($generated@@64 0))) (exists (($generated@@145 Int) ) (= $generated@@138 $generated@@145))))) (=> (or (and ($generated@@22 $generated@@7 ($generated@@11 $generated@@138) $generated) (= $generated@@138 $generated@@138)) (or (and ($generated@@22 $generated@@7 ($generated@@11 ($generated@@64 0)) $generated) (= $generated@@138 ($generated@@64 0))) (exists (($generated@@146 Int) ) (= $generated@@138 $generated@@146)))) (=> (= $generated@@138 $generated@@139) (=> (and (and ($generated@@78 $generated@@138) (= ($generated@@33 $generated@@137 $generated@@138) $generated@@139)) (and ($generated@@22 $generated@@7 ($generated@@11 ($generated@@33 $generated@@137 $generated@@138)) $generated) (= (ControlFlow 0 7) 6))) $generated@@143))))))
(let (($generated@@147 true))
(let (($generated@@148  (=> (and ($generated@@72 ($generated@@69 $generated@@23 $generated@@137) $generated@@24 $generated@@140) ($generated@@28 $generated@@7 ($generated@@11 $generated@@138) $generated $generated@@140)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (or (<= 0 $generated@@138) (= $generated@@138 $generated@@138))) (=> (or (<= 0 $generated@@138) (= $generated@@138 $generated@@138)) (=> (= (ControlFlow 0 2) (- 0 1)) (or (and (= $generated@@137 $generated@@137) (= $generated@@138 $generated@@138)) (< $generated@@138 $generated@@138))))))))
(let (($generated@@149  (=> (= $generated@@141 ($generated@@93 $generated@@25 $generated@@140 $generated@@1 false)) (and (and (=> (= (ControlFlow 0 9) 2) $generated@@148) (=> (= (ControlFlow 0 9) 7) $generated@@144)) (=> (= (ControlFlow 0 9) 4) $generated@@147)))))
(let (($generated@@150  (=> (and ($generated@@77 $generated@@140) ($generated@@142 $generated@@140)) (=> (and (and (or (not (= $generated@@137 $generated@@25)) (not true)) (and ($generated@@22 $generated@@23 $generated@@137 $generated@@29) ($generated@@28 $generated@@23 $generated@@137 $generated@@29 $generated@@140))) (and (= 0 $generated@@32) (= (ControlFlow 0 10) 9))) $generated@@149))))
$generated@@150)))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
