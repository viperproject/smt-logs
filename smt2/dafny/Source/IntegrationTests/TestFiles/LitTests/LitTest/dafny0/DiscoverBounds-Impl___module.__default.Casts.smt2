(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (Bool) T@U)
(declare-fun $generated@@7 (T@U) Bool)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun $generated@@9 (T@U) Int)
(declare-fun $generated@@10 (Real) T@U)
(declare-fun $generated@@11 (T@U) Real)
(declare-fun $generated@@18 (T@U) T@U)
(declare-fun $generated@@19 () Int)
(declare-fun $generated@@20 (Int) Bool)
(declare-fun $generated@@21 (Int) Bool)
(declare-fun $generated@@23 (Int) Int)
(declare-fun $generated@@25 (T@T T@U) T@U)
(declare-fun $generated@@28 (T@T T@U) T@U)
(declare-fun $generated@@29 (T@T T@U) T@U)
(declare-fun $generated@@35 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@36 () T@T)
(declare-fun $generated@@37 () T@T)
(declare-fun $generated@@38 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@39 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@40 () T@T)
(declare-fun $generated@@41 (T@T T@T) T@T)
(declare-fun $generated@@42 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@43 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@44 (T@T) T@T)
(declare-fun $generated@@45 (T@T) T@T)
(declare-fun $generated@@97 (T@T T@U T@U T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@4) 1)) (= ($generated@@2 $generated@@5) 2)) (forall (($generated@@12 Bool) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Int) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Real) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))))
(assert (distinct $generated $generated@@0 $generated@@1)
)
(assert (= ($generated@@18 $generated) $generated@@0))
(assert  (=> (<= 0 $generated@@19) (forall (($generated@@22 Int) ) (!  (=> (or ($generated@@21 $generated@@22) (< 0 $generated@@19)) (= ($generated@@20 $generated@@22) (< $generated@@22 4)))
 :pattern ( ($generated@@20 $generated@@22))
))))
(assert (forall (($generated@@24 Int) ) (! (= ($generated@@23 $generated@@24) $generated@@24)
 :pattern ( ($generated@@23 $generated@@24))
)))
(assert (forall (($generated@@26 T@U) ($generated@@27 T@T) ) (! (= ($generated@@25 $generated@@27 $generated@@26) $generated@@26)
 :pattern ( ($generated@@25 $generated@@27 $generated@@26))
)))
(assert (forall (($generated@@30 T@U) ($generated@@31 T@T) ) (! (= ($generated@@29 $generated@@31 ($generated@@28 $generated@@31 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@28 $generated@@31 $generated@@30))
)))
(assert  (=> (<= 0 $generated@@19) (forall (($generated@@32 Int) ) (!  (=> (or ($generated@@21 ($generated@@23 $generated@@32)) (< 0 $generated@@19)) (= ($generated@@20 ($generated@@23 $generated@@32)) ($generated@@7 ($generated@@25 $generated@@3 ($generated@@6 (< $generated@@32 4))))))
 :weight 3
 :pattern ( ($generated@@20 ($generated@@23 $generated@@32)))
))))
(assert (forall (($generated@@33 T@U) ($generated@@34 T@T) ) (! (= ($generated@@28 $generated@@34 ($generated@@29 $generated@@34 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@29 $generated@@34 $generated@@33))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@46 T@T) ($generated@@47 T@T) ($generated@@48 T@T) ($generated@@49 T@U) ($generated@@50 T@U) ($generated@@51 T@U) ($generated@@52 T@U) ) (! (= ($generated@@35 $generated@@46 $generated@@47 $generated@@48 ($generated@@42 $generated@@46 $generated@@47 $generated@@48 $generated@@50 $generated@@51 $generated@@52 $generated@@49) $generated@@51 $generated@@52) $generated@@49)
 :weight 0
)) (and (forall (($generated@@53 T@T) ($generated@@54 T@T) ($generated@@55 T@T) ($generated@@56 T@U) ($generated@@57 T@U) ($generated@@58 T@U) ($generated@@59 T@U) ($generated@@60 T@U) ($generated@@61 T@U) ) (!  (or (= $generated@@58 $generated@@60) (= ($generated@@35 $generated@@53 $generated@@54 $generated@@55 ($generated@@42 $generated@@53 $generated@@54 $generated@@55 $generated@@57 $generated@@58 $generated@@59 $generated@@56) $generated@@60 $generated@@61) ($generated@@35 $generated@@53 $generated@@54 $generated@@55 $generated@@57 $generated@@60 $generated@@61)))
 :weight 0
)) (forall (($generated@@62 T@T) ($generated@@63 T@T) ($generated@@64 T@T) ($generated@@65 T@U) ($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ) (!  (or (= $generated@@68 $generated@@70) (= ($generated@@35 $generated@@62 $generated@@63 $generated@@64 ($generated@@42 $generated@@62 $generated@@63 $generated@@64 $generated@@66 $generated@@67 $generated@@68 $generated@@65) $generated@@69 $generated@@70) ($generated@@35 $generated@@62 $generated@@63 $generated@@64 $generated@@66 $generated@@69 $generated@@70)))
 :weight 0
)))) (= ($generated@@2 $generated@@36) 3)) (= ($generated@@2 $generated@@37) 4)) (forall (($generated@@71 T@T) ($generated@@72 T@T) ($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@U) ) (! (= ($generated@@39 $generated@@71 $generated@@72 ($generated@@43 $generated@@71 $generated@@72 $generated@@74 $generated@@75 $generated@@73) $generated@@75) $generated@@73)
 :weight 0
))) (forall (($generated@@76 T@T) ($generated@@77 T@T) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ) (!  (or (= $generated@@80 $generated@@81) (= ($generated@@39 $generated@@76 $generated@@77 ($generated@@43 $generated@@76 $generated@@77 $generated@@79 $generated@@80 $generated@@78) $generated@@81) ($generated@@39 $generated@@76 $generated@@77 $generated@@79 $generated@@81)))
 :weight 0
))) (= ($generated@@2 $generated@@40) 5)) (forall (($generated@@82 T@T) ($generated@@83 T@T) ) (= ($generated@@2 ($generated@@41 $generated@@82 $generated@@83)) 6))) (forall (($generated@@84 T@T) ($generated@@85 T@T) ) (! (= ($generated@@44 ($generated@@41 $generated@@84 $generated@@85)) $generated@@84)
 :pattern ( ($generated@@41 $generated@@84 $generated@@85))
))) (forall (($generated@@86 T@T) ($generated@@87 T@T) ) (! (= ($generated@@45 ($generated@@41 $generated@@86 $generated@@87)) $generated@@87)
 :pattern ( ($generated@@41 $generated@@86 $generated@@87))
))))
(assert (forall (($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 Bool) ($generated@@92 T@U) ($generated@@93 T@U) ) (! (= ($generated@@7 ($generated@@35 $generated@@36 $generated@@37 $generated@@3 ($generated@@38 $generated@@88 $generated@@89 $generated@@90 $generated@@91) $generated@@92 $generated@@93))  (=> (and (or (not (= $generated@@92 $generated@@88)) (not true)) ($generated@@7 ($generated@@28 $generated@@3 ($generated@@39 $generated@@37 $generated@@40 ($generated@@39 $generated@@36 ($generated@@41 $generated@@37 $generated@@40) $generated@@89 $generated@@92) $generated@@90)))) $generated@@91))
 :pattern ( ($generated@@35 $generated@@36 $generated@@37 $generated@@3 ($generated@@38 $generated@@88 $generated@@89 $generated@@90 $generated@@91) $generated@@92 $generated@@93))
)))
(assert (forall (($generated@@94 Int) ) (! (= ($generated@@29 $generated@@4 ($generated@@8 ($generated@@23 $generated@@94))) ($generated@@25 $generated@@40 ($generated@@29 $generated@@4 ($generated@@8 $generated@@94))))
 :pattern ( ($generated@@29 $generated@@4 ($generated@@8 ($generated@@23 $generated@@94))))
)))
(assert (forall (($generated@@95 T@U) ($generated@@96 T@T) ) (! (= ($generated@@29 $generated@@96 ($generated@@25 $generated@@96 $generated@@95)) ($generated@@25 $generated@@40 ($generated@@29 $generated@@96 $generated@@95)))
 :pattern ( ($generated@@29 $generated@@96 ($generated@@25 $generated@@96 $generated@@95)))
)))
(assert (forall (($generated@@98 T@U) ($generated@@99 T@U) ) (! ($generated@@97 $generated@@4 $generated@@99 $generated $generated@@98)
 :pattern ( ($generated@@97 $generated@@4 $generated@@99 $generated $generated@@98))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@100 () Int)
(declare-fun $generated@@101 () T@U)
(declare-fun $generated@@102 () Int)
(declare-fun $generated@@103 () Int)
(declare-fun $generated@@104 () Int)
(declare-fun $generated@@105 () Int)
(declare-fun $generated@@106 () Int)
(declare-fun $generated@@107 () Int)
(declare-fun $generated@@108 () T@U)
(declare-fun $generated@@109 () T@U)
(declare-fun $generated@@110 (T@U) Bool)
(declare-fun $generated@@111 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 39) (let (($generated@@112 true))
(let (($generated@@113  (=> (and (not (and (<= ($generated@@23 (- 0 100)) (- $generated@@100 3)) (< (- $generated@@100 3) (- 0 11)))) (= (ControlFlow 0 7) 5)) $generated@@112)))
(let (($generated@@114  (=> (and (and (and (<= ($generated@@23 (- 0 100)) (- $generated@@100 3)) (< (- $generated@@100 3) (- 0 11))) ($generated@@97 $generated@@4 ($generated@@8 $generated@@100) $generated $generated@@101)) (and ($generated@@21 $generated@@100) (= (ControlFlow 0 6) 5))) $generated@@112)))
(let (($generated@@115  (=> (< (- $generated@@100 3) ($generated@@23 (- 0 100))) (and (=> (= (ControlFlow 0 9) 6) $generated@@114) (=> (= (ControlFlow 0 9) 7) $generated@@113)))))
(let (($generated@@116  (=> (<= ($generated@@23 (- 0 100)) (- $generated@@100 3)) (and (=> (= (ControlFlow 0 8) 6) $generated@@114) (=> (= (ControlFlow 0 8) 7) $generated@@113)))))
(let (($generated@@117  (and (=> (= (ControlFlow 0 10) 8) $generated@@116) (=> (= (ControlFlow 0 10) 9) $generated@@115))))
(let (($generated@@118 true))
(let (($generated@@119  (=> (forall (($generated@@120 Int) ) (!  (=> (<= ($generated@@23 0) $generated@@120) (=> (<= ($generated@@23 12) $generated@@120) (=> (< (- $generated@@120 20) 0) ($generated@@21 $generated@@120))))
 :pattern ( ($generated@@20 $generated@@120))
)) (and (=> (= (ControlFlow 0 11) 10) $generated@@117) (=> (= (ControlFlow 0 11) 4) $generated@@118)))))
(let (($generated@@121  (=> (and (not (and (<= ($generated@@23 12) $generated@@102) (< (- $generated@@102 20) 0))) (= (ControlFlow 0 14) 11)) $generated@@119)))
(let (($generated@@122  (=> (and (and (and (<= ($generated@@23 12) $generated@@102) (< (- $generated@@102 20) 0)) ($generated@@97 $generated@@4 ($generated@@8 $generated@@102) $generated $generated@@101)) (and ($generated@@21 $generated@@102) (= (ControlFlow 0 13) 11))) $generated@@119)))
(let (($generated@@123  (=> (< $generated@@102 ($generated@@23 12)) (and (=> (= (ControlFlow 0 16) 13) $generated@@122) (=> (= (ControlFlow 0 16) 14) $generated@@121)))))
(let (($generated@@124  (=> (<= ($generated@@23 12) $generated@@102) (and (=> (= (ControlFlow 0 15) 13) $generated@@122) (=> (= (ControlFlow 0 15) 14) $generated@@121)))))
(let (($generated@@125  (=> (<= ($generated@@23 0) $generated@@102) (and (=> (= (ControlFlow 0 17) 15) $generated@@124) (=> (= (ControlFlow 0 17) 16) $generated@@123)))))
(let (($generated@@126  (=> (and (< $generated@@102 ($generated@@23 0)) (= (ControlFlow 0 12) 11)) $generated@@119)))
(let (($generated@@127  (=> (forall (($generated@@128 Int) ) (!  (=> (<= ($generated@@23 12) $generated@@128) (=> (< (- $generated@@128 2) 24) ($generated@@21 $generated@@128)))
 :pattern ( ($generated@@20 $generated@@128))
)) (and (=> (= (ControlFlow 0 18) 17) $generated@@125) (=> (= (ControlFlow 0 18) 12) $generated@@126)))))
(let (($generated@@129  (=> (and (not (and (<= ($generated@@23 12) $generated@@103) (< (- $generated@@103 2) 24))) (= (ControlFlow 0 20) 18)) $generated@@127)))
(let (($generated@@130  (=> (and (and (and (<= ($generated@@23 12) $generated@@103) (< (- $generated@@103 2) 24)) ($generated@@97 $generated@@4 ($generated@@8 $generated@@103) $generated $generated@@101)) (and ($generated@@21 $generated@@103) (= (ControlFlow 0 19) 18))) $generated@@127)))
(let (($generated@@131  (=> (< $generated@@103 ($generated@@23 12)) (and (=> (= (ControlFlow 0 24) 19) $generated@@130) (=> (= (ControlFlow 0 24) 20) $generated@@129)))))
(let (($generated@@132  (=> (and (<= ($generated@@23 12) $generated@@103) (= $generated@@104 (- $generated@@103 2))) (and (=> (= (ControlFlow 0 21) (- 0 23)) (<= ($generated@@23 0) $generated@@104)) (=> (<= ($generated@@23 0) $generated@@104) (=> (= $generated@@105 (- $generated@@103 2)) (and (=> (= (ControlFlow 0 21) (- 0 22)) (<= ($generated@@23 0) $generated@@105)) (=> (<= ($generated@@23 0) $generated@@105) (and (=> (= (ControlFlow 0 21) 19) $generated@@130) (=> (= (ControlFlow 0 21) 20) $generated@@129))))))))))
(let (($generated@@133  (and (=> (= (ControlFlow 0 25) 21) $generated@@132) (=> (= (ControlFlow 0 25) 24) $generated@@131))))
(let (($generated@@134 true))
(let (($generated@@135  (=> (forall (($generated@@136 Int) ) (!  (=> (<= ($generated@@23 12) $generated@@136) (=> (< (- $generated@@136 20) 0) ($generated@@21 $generated@@136)))
 :pattern ( ($generated@@20 $generated@@136))
)) (and (=> (= (ControlFlow 0 26) 25) $generated@@133) (=> (= (ControlFlow 0 26) 3) $generated@@134)))))
(let (($generated@@137  (=> (and (not (and (<= ($generated@@23 12) $generated@@106) (< (- $generated@@106 20) 0))) (= (ControlFlow 0 28) 26)) $generated@@135)))
(let (($generated@@138  (=> (and (and (and (<= ($generated@@23 12) $generated@@106) (< (- $generated@@106 20) 0)) ($generated@@97 $generated@@4 ($generated@@8 $generated@@106) $generated $generated@@101)) (and ($generated@@21 $generated@@106) (= (ControlFlow 0 27) 26))) $generated@@135)))
(let (($generated@@139  (=> (< $generated@@106 ($generated@@23 12)) (and (=> (= (ControlFlow 0 30) 27) $generated@@138) (=> (= (ControlFlow 0 30) 28) $generated@@137)))))
(let (($generated@@140  (=> (<= ($generated@@23 12) $generated@@106) (and (=> (= (ControlFlow 0 29) 27) $generated@@138) (=> (= (ControlFlow 0 29) 28) $generated@@137)))))
(let (($generated@@141  (and (=> (= (ControlFlow 0 31) 29) $generated@@140) (=> (= (ControlFlow 0 31) 30) $generated@@139))))
(let (($generated@@142 true))
(let (($generated@@143  (=> (forall (($generated@@144 Int) ) (!  (=> (<= ($generated@@23 (- 0 12)) $generated@@144) (=> (< (- $generated@@144 2) 0) ($generated@@21 $generated@@144)))
 :pattern ( ($generated@@20 $generated@@144))
)) (and (=> (= (ControlFlow 0 32) 31) $generated@@141) (=> (= (ControlFlow 0 32) 2) $generated@@142)))))
(let (($generated@@145  (=> (and (not (and (<= ($generated@@23 (- 0 12)) $generated@@107) (< (- $generated@@107 2) 0))) (= (ControlFlow 0 34) 32)) $generated@@143)))
(let (($generated@@146  (=> (and (and (and (<= ($generated@@23 (- 0 12)) $generated@@107) (< (- $generated@@107 2) 0)) ($generated@@97 $generated@@4 ($generated@@8 $generated@@107) $generated $generated@@101)) (and ($generated@@21 $generated@@107) (= (ControlFlow 0 33) 32))) $generated@@143)))
(let (($generated@@147  (=> (< $generated@@107 ($generated@@23 (- 0 12))) (and (=> (= (ControlFlow 0 36) 33) $generated@@146) (=> (= (ControlFlow 0 36) 34) $generated@@145)))))
(let (($generated@@148  (=> (<= ($generated@@23 (- 0 12)) $generated@@107) (and (=> (= (ControlFlow 0 35) 33) $generated@@146) (=> (= (ControlFlow 0 35) 34) $generated@@145)))))
(let (($generated@@149  (and (=> (= (ControlFlow 0 37) 35) $generated@@148) (=> (= (ControlFlow 0 37) 36) $generated@@147))))
(let (($generated@@150 true))
(let (($generated@@151  (=> (= $generated@@108 ($generated@@38 $generated@@109 $generated@@101 $generated@@1 false)) (and (=> (= (ControlFlow 0 38) 37) $generated@@149) (=> (= (ControlFlow 0 38) 1) $generated@@150)))))
(let (($generated@@152  (=> (and (and ($generated@@110 $generated@@101) ($generated@@111 $generated@@101)) (and (= 1 $generated@@19) (= (ControlFlow 0 39) 38))) $generated@@151)))
$generated@@152))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
