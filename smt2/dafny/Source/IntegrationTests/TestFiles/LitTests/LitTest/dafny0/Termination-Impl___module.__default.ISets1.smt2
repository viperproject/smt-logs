(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 (Bool) T@U)
(declare-fun $generated@@6 (T@U) Bool)
(declare-fun $generated@@7 (Int) T@U)
(declare-fun $generated@@8 (T@U) Int)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@17 (T@U T@U) Bool)
(declare-fun $generated@@18 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@19 () T@T)
(declare-fun $generated@@20 () T@T)
(declare-fun $generated@@21 () T@T)
(declare-fun $generated@@22 (T@T T@T) T@T)
(declare-fun $generated@@23 (T@T T@U) T@U)
(declare-fun $generated@@24 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@25 (T@T) T@T)
(declare-fun $generated@@26 (T@T) T@T)
(declare-fun $generated@@47 (T@T T@U T@U) Bool)
(declare-fun $generated@@48 (T@U) T@U)
(declare-fun $generated@@49 (T@U T@U) Bool)
(declare-fun $generated@@53 (T@T T@U) T@U)
(declare-fun $generated@@56 (T@U T@U T@U) Bool)
(declare-fun $generated@@57 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@71 (T@U T@U) T@U)
(declare-fun $generated@@79 (T@U T@U) T@U)
(declare-fun $generated@@97 (T@U) T@U)
(declare-fun $generated@@99 (T@U) T@U)
(declare-fun $generated@@103 () T@U)
(declare-fun $generated@@105 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@106 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@107 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@141 (T@U T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (forall (($generated@@11 Bool) ) (! (= ($generated@@6 ($generated@@5 $generated@@11)) $generated@@11)
 :pattern ( ($generated@@5 $generated@@11))
))) (forall (($generated@@12 T@U) ) (! (= ($generated@@5 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 Int) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))))
(assert (distinct $generated $generated@@0)
)
(assert  (and (and (and (and (and (and (and (forall (($generated@@27 T@T) ($generated@@28 T@T) ($generated@@29 T@U) ($generated@@30 T@U) ($generated@@31 T@U) ) (! (= ($generated@@18 $generated@@27 $generated@@28 ($generated@@24 $generated@@27 $generated@@28 $generated@@30 $generated@@31 $generated@@29) $generated@@31) $generated@@29)
 :weight 0
)) (forall (($generated@@32 T@T) ($generated@@33 T@T) ($generated@@34 T@U) ($generated@@35 T@U) ($generated@@36 T@U) ($generated@@37 T@U) ) (!  (or (= $generated@@36 $generated@@37) (= ($generated@@18 $generated@@32 $generated@@33 ($generated@@24 $generated@@32 $generated@@33 $generated@@35 $generated@@36 $generated@@34) $generated@@37) ($generated@@18 $generated@@32 $generated@@33 $generated@@35 $generated@@37)))
 :weight 0
))) (= ($generated@@1 $generated@@19) 3)) (= ($generated@@1 $generated@@20) 4)) (= ($generated@@1 $generated@@21) 5)) (forall (($generated@@38 T@T) ($generated@@39 T@T) ) (= ($generated@@1 ($generated@@22 $generated@@38 $generated@@39)) 6))) (forall (($generated@@40 T@T) ($generated@@41 T@T) ) (! (= ($generated@@25 ($generated@@22 $generated@@40 $generated@@41)) $generated@@40)
 :pattern ( ($generated@@22 $generated@@40 $generated@@41))
))) (forall (($generated@@42 T@T) ($generated@@43 T@T) ) (! (= ($generated@@26 ($generated@@22 $generated@@42 $generated@@43)) $generated@@43)
 :pattern ( ($generated@@22 $generated@@42 $generated@@43))
))))
(assert (forall (($generated@@44 T@U) ($generated@@45 T@U) ) (!  (=> ($generated@@17 $generated@@44 $generated@@45) (forall (($generated@@46 T@U) ) (!  (=> ($generated@@6 ($generated@@23 $generated@@2 ($generated@@18 $generated@@19 $generated@@20 ($generated@@18 $generated@@21 ($generated@@22 $generated@@19 $generated@@20) $generated@@44 $generated@@46) $generated@@0))) ($generated@@6 ($generated@@23 $generated@@2 ($generated@@18 $generated@@19 $generated@@20 ($generated@@18 $generated@@21 ($generated@@22 $generated@@19 $generated@@20) $generated@@45 $generated@@46) $generated@@0))))
 :pattern ( ($generated@@18 $generated@@19 $generated@@20 ($generated@@18 $generated@@21 ($generated@@22 $generated@@19 $generated@@20) $generated@@45 $generated@@46) $generated@@0))
)))
 :pattern ( ($generated@@17 $generated@@44 $generated@@45))
)))
(assert (forall (($generated@@50 T@U) ($generated@@51 T@U) ) (! (= ($generated@@47 ($generated@@22 $generated@@20 $generated@@2) $generated@@50 ($generated@@48 $generated@@51)) (forall (($generated@@52 T@U) ) (!  (=> ($generated@@6 ($generated@@18 $generated@@20 $generated@@2 $generated@@50 $generated@@52)) ($generated@@49 $generated@@52 $generated@@51))
 :pattern ( ($generated@@18 $generated@@20 $generated@@2 $generated@@50 $generated@@52))
)))
 :pattern ( ($generated@@47 ($generated@@22 $generated@@20 $generated@@2) $generated@@50 ($generated@@48 $generated@@51)))
)))
(assert (forall (($generated@@54 T@U) ($generated@@55 T@T) ) (! (= ($generated@@53 $generated@@55 ($generated@@23 $generated@@55 $generated@@54)) $generated@@54)
 :pattern ( ($generated@@23 $generated@@55 $generated@@54))
)))
(assert (forall (($generated@@58 T@U) ($generated@@59 T@U) ($generated@@60 T@U) ($generated@@61 T@T) ) (! (= ($generated@@56 ($generated@@53 $generated@@61 $generated@@58) $generated@@59 $generated@@60) ($generated@@57 $generated@@61 $generated@@58 $generated@@59 $generated@@60))
 :pattern ( ($generated@@56 ($generated@@53 $generated@@61 $generated@@58) $generated@@59 $generated@@60))
)))
(assert (forall (($generated@@62 T@U) ($generated@@63 T@U) ($generated@@64 T@U) ($generated@@65 T@U) ) (!  (=> ($generated@@17 $generated@@62 $generated@@63) (=> ($generated@@56 $generated@@64 $generated@@65 $generated@@62) ($generated@@56 $generated@@64 $generated@@65 $generated@@63)))
 :pattern ( ($generated@@17 $generated@@62 $generated@@63) ($generated@@56 $generated@@64 $generated@@65 $generated@@62))
)))
(assert (forall (($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@T) ) (!  (=> ($generated@@17 $generated@@66 $generated@@67) (=> ($generated@@57 $generated@@70 $generated@@68 $generated@@69 $generated@@66) ($generated@@57 $generated@@70 $generated@@68 $generated@@69 $generated@@67)))
 :pattern ( ($generated@@17 $generated@@66 $generated@@67) ($generated@@57 $generated@@70 $generated@@68 $generated@@69 $generated@@66))
)))
(assert (forall (($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@U) ) (! (= ($generated@@6 ($generated@@18 $generated@@20 $generated@@2 ($generated@@71 $generated@@72 $generated@@73) $generated@@74))  (and ($generated@@6 ($generated@@18 $generated@@20 $generated@@2 $generated@@72 $generated@@74)) (not ($generated@@6 ($generated@@18 $generated@@20 $generated@@2 $generated@@73 $generated@@74)))))
 :pattern ( ($generated@@18 $generated@@20 $generated@@2 ($generated@@71 $generated@@72 $generated@@73) $generated@@74))
)))
(assert (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (! (= ($generated@@57 ($generated@@22 $generated@@20 $generated@@2) $generated@@75 ($generated@@48 $generated@@76) $generated@@77) (forall (($generated@@78 T@U) ) (!  (=> ($generated@@6 ($generated@@18 $generated@@20 $generated@@2 $generated@@75 $generated@@78)) ($generated@@56 $generated@@78 $generated@@76 $generated@@77))
 :pattern ( ($generated@@18 $generated@@20 $generated@@2 $generated@@75 $generated@@78))
)))
 :pattern ( ($generated@@57 ($generated@@22 $generated@@20 $generated@@2) $generated@@75 ($generated@@48 $generated@@76) $generated@@77))
)))
(assert (forall (($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (=> ($generated@@6 ($generated@@18 $generated@@20 $generated@@2 $generated@@80 $generated@@82)) ($generated@@6 ($generated@@18 $generated@@20 $generated@@2 ($generated@@79 $generated@@80 $generated@@81) $generated@@82)))
 :pattern ( ($generated@@79 $generated@@80 $generated@@81) ($generated@@18 $generated@@20 $generated@@2 $generated@@80 $generated@@82))
)))
(assert (forall (($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ) (! (= ($generated@@6 ($generated@@18 $generated@@20 $generated@@2 ($generated@@79 $generated@@83 $generated@@84) $generated@@85))  (or (= $generated@@85 $generated@@84) ($generated@@6 ($generated@@18 $generated@@20 $generated@@2 $generated@@83 $generated@@85))))
 :pattern ( ($generated@@18 $generated@@20 $generated@@2 ($generated@@79 $generated@@83 $generated@@84) $generated@@85))
)))
(assert (forall (($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ) (!  (=> (or (not (= $generated@@86 $generated@@88)) (not true)) (=> (and ($generated@@17 $generated@@86 $generated@@87) ($generated@@17 $generated@@87 $generated@@88)) ($generated@@17 $generated@@86 $generated@@88)))
 :pattern ( ($generated@@17 $generated@@86 $generated@@87) ($generated@@17 $generated@@87 $generated@@88))
)))
(assert (forall (($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ) (!  (=> ($generated@@6 ($generated@@18 $generated@@20 $generated@@2 $generated@@90 $generated@@91)) (not ($generated@@6 ($generated@@18 $generated@@20 $generated@@2 ($generated@@71 $generated@@89 $generated@@90) $generated@@91))))
 :pattern ( ($generated@@71 $generated@@89 $generated@@90) ($generated@@18 $generated@@20 $generated@@2 $generated@@90 $generated@@91))
)))
(assert (forall (($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@T) ) (! (= ($generated@@49 ($generated@@53 $generated@@94 $generated@@92) $generated@@93) ($generated@@47 $generated@@94 $generated@@92 $generated@@93))
 :pattern ( ($generated@@49 ($generated@@53 $generated@@94 $generated@@92) $generated@@93))
)))
(assert (forall (($generated@@95 T@U) ($generated@@96 T@U) ) (! ($generated@@6 ($generated@@18 $generated@@20 $generated@@2 ($generated@@79 $generated@@95 $generated@@96) $generated@@96))
 :pattern ( ($generated@@79 $generated@@95 $generated@@96))
)))
(assert (forall (($generated@@98 T@U) ) (! (= ($generated@@97 ($generated@@48 $generated@@98)) $generated@@98)
 :pattern ( ($generated@@48 $generated@@98))
)))
(assert (forall (($generated@@100 T@U) ) (! (= ($generated@@99 ($generated@@48 $generated@@100)) $generated)
 :pattern ( ($generated@@48 $generated@@100))
)))
(assert (forall (($generated@@101 T@U) ($generated@@102 T@T) ) (! (= ($generated@@23 $generated@@102 ($generated@@53 $generated@@102 $generated@@101)) $generated@@101)
 :pattern ( ($generated@@53 $generated@@102 $generated@@101))
)))
(assert (forall (($generated@@104 T@U) ) (!  (not ($generated@@6 ($generated@@18 $generated@@20 $generated@@2 $generated@@103 $generated@@104)))
 :pattern ( ($generated@@18 $generated@@20 $generated@@2 $generated@@103 $generated@@104))
)))
(assert  (and (forall (($generated@@108 T@T) ($generated@@109 T@T) ($generated@@110 T@T) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ) (! (= ($generated@@105 $generated@@108 $generated@@109 $generated@@110 ($generated@@107 $generated@@108 $generated@@109 $generated@@110 $generated@@112 $generated@@113 $generated@@114 $generated@@111) $generated@@113 $generated@@114) $generated@@111)
 :weight 0
)) (and (forall (($generated@@115 T@T) ($generated@@116 T@T) ($generated@@117 T@T) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ) (!  (or (= $generated@@120 $generated@@122) (= ($generated@@105 $generated@@115 $generated@@116 $generated@@117 ($generated@@107 $generated@@115 $generated@@116 $generated@@117 $generated@@119 $generated@@120 $generated@@121 $generated@@118) $generated@@122 $generated@@123) ($generated@@105 $generated@@115 $generated@@116 $generated@@117 $generated@@119 $generated@@122 $generated@@123)))
 :weight 0
)) (forall (($generated@@124 T@T) ($generated@@125 T@T) ($generated@@126 T@T) ($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ) (!  (or (= $generated@@130 $generated@@132) (= ($generated@@105 $generated@@124 $generated@@125 $generated@@126 ($generated@@107 $generated@@124 $generated@@125 $generated@@126 $generated@@128 $generated@@129 $generated@@130 $generated@@127) $generated@@131 $generated@@132) ($generated@@105 $generated@@124 $generated@@125 $generated@@126 $generated@@128 $generated@@131 $generated@@132)))
 :weight 0
)))))
(assert (forall (($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 Bool) ($generated@@137 T@U) ($generated@@138 T@U) ) (! (= ($generated@@6 ($generated@@105 $generated@@21 $generated@@19 $generated@@2 ($generated@@106 $generated@@133 $generated@@134 $generated@@135 $generated@@136) $generated@@137 $generated@@138))  (=> (and (or (not (= $generated@@137 $generated@@133)) (not true)) ($generated@@6 ($generated@@23 $generated@@2 ($generated@@18 $generated@@19 $generated@@20 ($generated@@18 $generated@@21 ($generated@@22 $generated@@19 $generated@@20) $generated@@134 $generated@@137) $generated@@135)))) $generated@@136))
 :pattern ( ($generated@@105 $generated@@21 $generated@@19 $generated@@2 ($generated@@106 $generated@@133 $generated@@134 $generated@@135 $generated@@136) $generated@@137 $generated@@138))
)))
(assert (forall (($generated@@139 T@U) ($generated@@140 T@U) ) (!  (=> ($generated@@49 $generated@@139 ($generated@@48 $generated@@140)) (and (= ($generated@@53 ($generated@@22 $generated@@20 $generated@@2) ($generated@@23 ($generated@@22 $generated@@20 $generated@@2) $generated@@139)) $generated@@139) ($generated@@47 ($generated@@22 $generated@@20 $generated@@2) ($generated@@23 ($generated@@22 $generated@@20 $generated@@2) $generated@@139) ($generated@@48 $generated@@140))))
 :pattern ( ($generated@@49 $generated@@139 ($generated@@48 $generated@@140)))
)))
(assert (forall (($generated@@142 T@U) ($generated@@143 T@U) ) (! (= ($generated@@141 $generated@@142 $generated@@143) (forall (($generated@@144 T@U) ) (!  (=> ($generated@@6 ($generated@@18 $generated@@20 $generated@@2 $generated@@142 $generated@@144)) ($generated@@6 ($generated@@18 $generated@@20 $generated@@2 $generated@@143 $generated@@144)))
 :pattern ( ($generated@@18 $generated@@20 $generated@@2 $generated@@142 $generated@@144))
 :pattern ( ($generated@@18 $generated@@20 $generated@@2 $generated@@143 $generated@@144))
)))
 :pattern ( ($generated@@141 $generated@@142 $generated@@143))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@145 () T@U)
(declare-fun $generated@@146 () T@U)
(declare-fun $generated@@147 () T@U)
(declare-fun $generated@@148 () T@U)
(declare-fun $generated@@149 () T@U)
(declare-fun $generated@@150 () T@U)
(declare-fun $generated@@151 () Bool)
(declare-fun $generated@@152 () T@U)
(declare-fun $generated@@153 () T@U)
(declare-fun $generated@@154 (T@U) Bool)
(declare-fun $generated@@155 (T@U) Bool)
(declare-fun $generated@@156 () T@U)
(declare-fun $generated@@157 () Bool)
(declare-fun $generated@@158 () T@U)
(declare-fun $generated@@159 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 14) (let (($generated@@160  (and (=> (= (ControlFlow 0 5) (- 0 7)) (exists (($generated@@161 T@U) )  (and ($generated@@49 $generated@@161 $generated@@145) ($generated@@6 ($generated@@18 $generated@@20 $generated@@2 $generated@@146 $generated@@161))))) (=> (exists (($generated@@162 T@U) )  (and ($generated@@49 $generated@@162 $generated@@145) ($generated@@6 ($generated@@18 $generated@@20 $generated@@2 $generated@@146 $generated@@162)))) (=> (and (=> true (and ($generated@@49 $generated@@147 $generated@@145) ($generated@@56 $generated@@147 $generated@@145 $generated@@148))) ($generated@@6 ($generated@@18 $generated@@20 $generated@@2 $generated@@146 $generated@@147))) (and (=> (= (ControlFlow 0 5) (- 0 6)) true) (=> (and (= $generated@@149 ($generated@@71 $generated@@146 ($generated@@79 $generated@@103 $generated@@147))) (= (ControlFlow 0 5) (- 0 4))) false)))))))
(let (($generated@@163  (=> (and (not (and ($generated@@49 $generated@@150 $generated@@145) ($generated@@56 $generated@@150 $generated@@145 $generated@@148))) (= (ControlFlow 0 9) 5)) $generated@@160)))
(let (($generated@@164  (=> (and (and ($generated@@49 $generated@@150 $generated@@145) ($generated@@56 $generated@@150 $generated@@145 $generated@@148)) (= (ControlFlow 0 8) 5)) $generated@@160)))
(let (($generated@@165  (=> (and ($generated@@141 $generated@@103 $generated@@146) (not ($generated@@141 $generated@@146 $generated@@103))) (and (=> (= (ControlFlow 0 10) 8) $generated@@164) (=> (= (ControlFlow 0 10) 9) $generated@@163)))))
(let (($generated@@166 true))
(let (($generated@@167  (=> $generated@@151 (and (=> (= (ControlFlow 0 11) 3) $generated@@166) (=> (= (ControlFlow 0 11) 10) $generated@@165)))))
(let (($generated@@168 true))
(let (($generated@@169  (and (=> (= (ControlFlow 0 12) 2) $generated@@168) (=> (= (ControlFlow 0 12) 11) $generated@@167))))
(let (($generated@@170 true))
(let (($generated@@171  (=> (and (and (= $generated@@152 ($generated@@106 $generated@@153 $generated@@148 $generated@@0 false)) (forall (($generated@@172 T@U) ) (!  (=> (and (or (not (= $generated@@172 $generated@@153)) (not true)) ($generated@@6 ($generated@@23 $generated@@2 ($generated@@18 $generated@@19 $generated@@20 ($generated@@18 $generated@@21 ($generated@@22 $generated@@19 $generated@@20) $generated@@148 $generated@@172) $generated@@0)))) (= ($generated@@18 $generated@@21 ($generated@@22 $generated@@19 $generated@@20) $generated@@148 $generated@@172) ($generated@@18 $generated@@21 ($generated@@22 $generated@@19 $generated@@20) $generated@@148 $generated@@172)))
 :pattern ( ($generated@@18 $generated@@21 ($generated@@22 $generated@@19 $generated@@20) $generated@@148 $generated@@172))
))) (and ($generated@@17 $generated@@148 $generated@@148) (forall (($generated@@173 T@U) ($generated@@174 T@U) ) (!  (=> (and (or (not (= $generated@@173 $generated@@153)) (not true)) ($generated@@6 ($generated@@23 $generated@@2 ($generated@@18 $generated@@19 $generated@@20 ($generated@@18 $generated@@21 ($generated@@22 $generated@@19 $generated@@20) $generated@@148 $generated@@173) $generated@@0)))) (or (= ($generated@@18 $generated@@19 $generated@@20 ($generated@@18 $generated@@21 ($generated@@22 $generated@@19 $generated@@20) $generated@@148 $generated@@173) $generated@@174) ($generated@@18 $generated@@19 $generated@@20 ($generated@@18 $generated@@21 ($generated@@22 $generated@@19 $generated@@20) $generated@@148 $generated@@173) $generated@@174)) ($generated@@6 ($generated@@105 $generated@@21 $generated@@19 $generated@@2 $generated@@152 $generated@@173 $generated@@174))))
 :pattern ( ($generated@@18 $generated@@19 $generated@@20 ($generated@@18 $generated@@21 ($generated@@22 $generated@@19 $generated@@20) $generated@@148 $generated@@173) $generated@@174))
)))) (and (=> (= (ControlFlow 0 13) 1) $generated@@170) (=> (= (ControlFlow 0 13) 12) $generated@@169)))))
(let (($generated@@175  (=> (and (and ($generated@@154 $generated@@148) ($generated@@155 $generated@@148)) (and ($generated@@47 ($generated@@22 $generated@@20 $generated@@2) $generated@@146 ($generated@@48 $generated@@145)) ($generated@@57 ($generated@@22 $generated@@20 $generated@@2) $generated@@146 ($generated@@48 $generated@@145) $generated@@148))) (=> (and (and (and ($generated@@47 ($generated@@22 $generated@@20 $generated@@2) $generated@@156 ($generated@@48 $generated@@145)) ($generated@@57 ($generated@@22 $generated@@20 $generated@@2) $generated@@156 ($generated@@48 $generated@@145) $generated@@148)) true) (and (and (=> $generated@@157 (and ($generated@@49 $generated@@158 $generated@@145) ($generated@@56 $generated@@158 $generated@@145 $generated@@148))) true) (and (= 0 $generated@@159) (= (ControlFlow 0 14) 13)))) $generated@@171))))
$generated@@175))))))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 5) (- 4))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
