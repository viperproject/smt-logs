(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () Int)
(declare-fun $generated@@0 (T@U T@U) T@U)
(declare-fun $generated@@1 (T@T T@U) T@U)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 (T@U T@U) Bool)
(declare-fun $generated@@4 (T@U T@U) Bool)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@23 (T@U T@U Int) T@U)
(declare-fun $generated@@24 (Int) Int)
(declare-fun $generated@@25 (T@U T@U Int) Bool)
(declare-fun $generated@@26 (T@U Int) T@U)
(declare-fun $generated@@27 (T@U T@U) T@U)
(declare-fun $generated@@28 () T@U)
(declare-fun $generated@@34 (T@U) Int)
(declare-fun $generated@@45 (T@T T@U) T@U)
(declare-fun $generated@@46 (T@T T@U) T@U)
(declare-fun $generated@@51 (T@U T@U T@U) Bool)
(declare-fun $generated@@52 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@63 (T@T T@U T@U) Bool)
(declare-fun $generated@@70 () T@T)
(declare-fun $generated@@76 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@77 () T@T)
(declare-fun $generated@@78 () T@T)
(declare-fun $generated@@79 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@80 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@81 (T@T T@T) T@T)
(declare-fun $generated@@82 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@83 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@84 (T@T) T@T)
(declare-fun $generated@@85 (T@T) T@T)
(declare-fun $generated@@136 (T@U) T@U)
(declare-fun $generated@@137 (T@U) T@U)
(declare-fun $generated@@140 (T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (= ($generated@@5 $generated@@2) 3)))
(assert  (=> (<= 0 $generated) (forall (($generated@@21 T@U) ($generated@@22 T@U) ) (!  (=> (or ($generated@@3 $generated@@21 ($generated@@1 $generated@@2 $generated@@22)) (and (< 0 $generated) ($generated@@4 $generated@@22 $generated@@21))) (= ($generated@@0 $generated@@21 ($generated@@1 $generated@@2 $generated@@22)) ($generated@@1 $generated@@2 $generated@@22)))
 :weight 3
 :pattern ( ($generated@@0 $generated@@21 ($generated@@1 $generated@@2 $generated@@22)))
))))
(assert  (=> (<= 1 $generated) (forall (($generated@@29 T@U) ($generated@@30 T@U) ($generated@@31 Int) ) (!  (=> (or ($generated@@25 $generated@@29 $generated@@30 ($generated@@24 $generated@@31)) (and (< 1 $generated) ($generated@@4 $generated@@30 $generated@@29))) (and (let (($generated@@32 $generated@@30))
 (=> (= ($generated@@24 $generated@@31) ($generated@@24 80)) ($generated@@3 $generated@@29 $generated@@32))) (= ($generated@@23 $generated@@29 $generated@@30 ($generated@@24 $generated@@31)) (let (($generated@@33 $generated@@30))
(ite (= ($generated@@24 $generated@@31) ($generated@@24 80)) ($generated@@0 $generated@@29 $generated@@33) ($generated@@26 ($generated@@27 $generated@@28 $generated@@33) ($generated@@24 0)))))))
 :weight 3
 :pattern ( ($generated@@23 $generated@@29 $generated@@30 ($generated@@24 $generated@@31)))
))))
(assert (= ($generated@@34 $generated@@28) 0))
(assert  (=> (<= 0 $generated) (forall (($generated@@35 T@U) ($generated@@36 T@U) ) (!  (=> (or ($generated@@3 $generated@@35 $generated@@36) (and (< 0 $generated) ($generated@@4 $generated@@36 $generated@@35))) ($generated@@4 ($generated@@0 $generated@@35 $generated@@36) $generated@@35))
 :pattern ( ($generated@@0 $generated@@35 $generated@@36))
))))
(assert  (=> (<= 1 $generated) (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 Int) ) (!  (=> (or ($generated@@25 $generated@@37 $generated@@38 $generated@@39) (and (< 1 $generated) ($generated@@4 $generated@@38 $generated@@37))) (and (let (($generated@@40 $generated@@38))
 (=> (= $generated@@39 ($generated@@24 80)) ($generated@@3 $generated@@37 $generated@@40))) (= ($generated@@23 $generated@@37 $generated@@38 $generated@@39) (let (($generated@@41 $generated@@38))
(ite (= $generated@@39 ($generated@@24 80)) ($generated@@0 $generated@@37 $generated@@41) ($generated@@26 ($generated@@27 $generated@@28 $generated@@41) ($generated@@24 0)))))))
 :pattern ( ($generated@@23 $generated@@37 $generated@@38 $generated@@39))
))))
(assert (forall (($generated@@42 Int) ) (! (= ($generated@@24 $generated@@42) $generated@@42)
 :pattern ( ($generated@@24 $generated@@42))
)))
(assert (forall (($generated@@43 T@U) ($generated@@44 T@T) ) (! (= ($generated@@1 $generated@@44 $generated@@43) $generated@@43)
 :pattern ( ($generated@@1 $generated@@44 $generated@@43))
)))
(assert (forall (($generated@@47 T@U) ($generated@@48 T@T) ) (! (= ($generated@@46 $generated@@48 ($generated@@45 $generated@@48 $generated@@47)) $generated@@47)
 :pattern ( ($generated@@45 $generated@@48 $generated@@47))
)))
(assert (forall (($generated@@49 T@U) ($generated@@50 T@U) ) (! (= ($generated@@34 ($generated@@27 $generated@@49 $generated@@50)) (+ 1 ($generated@@34 $generated@@49)))
 :pattern ( ($generated@@27 $generated@@49 $generated@@50))
)))
(assert (forall (($generated@@53 T@U) ($generated@@54 T@U) ($generated@@55 T@U) ($generated@@56 T@T) ) (! (= ($generated@@51 ($generated@@46 $generated@@56 $generated@@53) $generated@@54 $generated@@55) ($generated@@52 $generated@@56 $generated@@53 $generated@@54 $generated@@55))
 :pattern ( ($generated@@51 ($generated@@46 $generated@@56 $generated@@53) $generated@@54 $generated@@55))
)))
(assert (forall (($generated@@57 T@U) ($generated@@58 Int) ($generated@@59 T@U) ) (!  (and (=> (= $generated@@58 ($generated@@34 $generated@@57)) (= ($generated@@26 ($generated@@27 $generated@@57 $generated@@59) $generated@@58) $generated@@59)) (=> (or (not (= $generated@@58 ($generated@@34 $generated@@57))) (not true)) (= ($generated@@26 ($generated@@27 $generated@@57 $generated@@59) $generated@@58) ($generated@@26 $generated@@57 $generated@@58))))
 :pattern ( ($generated@@26 ($generated@@27 $generated@@57 $generated@@59) $generated@@58))
)))
(assert  (=> (<= 1 $generated) (forall (($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 Int) ) (!  (=> (or ($generated@@25 $generated@@60 $generated@@61 $generated@@62) (and (< 1 $generated) ($generated@@4 $generated@@61 $generated@@60))) ($generated@@4 ($generated@@23 $generated@@60 $generated@@61 $generated@@62) $generated@@60))
 :pattern ( ($generated@@23 $generated@@60 $generated@@61 $generated@@62))
))))
(assert (forall (($generated@@64 T@U) ($generated@@65 T@U) ($generated@@66 T@T) ) (! (= ($generated@@4 ($generated@@46 $generated@@66 $generated@@64) $generated@@65) ($generated@@63 $generated@@66 $generated@@64 $generated@@65))
 :pattern ( ($generated@@4 ($generated@@46 $generated@@66 $generated@@64) $generated@@65))
)))
(assert (forall (($generated@@67 T@U) ) (! (<= 0 ($generated@@34 $generated@@67))
 :pattern ( ($generated@@34 $generated@@67))
)))
(assert (forall (($generated@@68 T@U) ($generated@@69 T@T) ) (! (= ($generated@@45 $generated@@69 ($generated@@46 $generated@@69 $generated@@68)) $generated@@68)
 :pattern ( ($generated@@46 $generated@@69 $generated@@68))
)))
(assert (= ($generated@@5 $generated@@70) 4))
(assert  (=> (<= 1 $generated) (forall (($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 Int) ) (!  (=> (or ($generated@@25 $generated@@71 ($generated@@1 $generated@@2 $generated@@72) ($generated@@24 $generated@@73)) (and (< 1 $generated) ($generated@@4 $generated@@72 $generated@@71))) (and (let (($generated@@74 ($generated@@1 $generated@@2 $generated@@72)))
 (=> (= ($generated@@24 $generated@@73) ($generated@@24 80)) ($generated@@3 $generated@@71 $generated@@74))) (= ($generated@@23 $generated@@71 ($generated@@1 $generated@@2 $generated@@72) ($generated@@24 $generated@@73)) (let (($generated@@75 ($generated@@1 $generated@@2 $generated@@72)))
(ite (= ($generated@@24 $generated@@73) ($generated@@24 80)) ($generated@@0 $generated@@71 $generated@@75) ($generated@@26 ($generated@@1 $generated@@70 ($generated@@27 $generated@@28 $generated@@75)) ($generated@@24 0)))))))
 :weight 3
 :pattern ( ($generated@@23 $generated@@71 ($generated@@1 $generated@@2 $generated@@72) ($generated@@24 $generated@@73)))
))))
(assert  (and (and (and (and (and (and (and (and (forall (($generated@@86 T@T) ($generated@@87 T@T) ($generated@@88 T@T) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ) (! (= ($generated@@76 $generated@@86 $generated@@87 $generated@@88 ($generated@@82 $generated@@86 $generated@@87 $generated@@88 $generated@@90 $generated@@91 $generated@@92 $generated@@89) $generated@@91 $generated@@92) $generated@@89)
 :weight 0
)) (and (forall (($generated@@93 T@T) ($generated@@94 T@T) ($generated@@95 T@T) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ) (!  (or (= $generated@@98 $generated@@100) (= ($generated@@76 $generated@@93 $generated@@94 $generated@@95 ($generated@@82 $generated@@93 $generated@@94 $generated@@95 $generated@@97 $generated@@98 $generated@@99 $generated@@96) $generated@@100 $generated@@101) ($generated@@76 $generated@@93 $generated@@94 $generated@@95 $generated@@97 $generated@@100 $generated@@101)))
 :weight 0
)) (forall (($generated@@102 T@T) ($generated@@103 T@T) ($generated@@104 T@T) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ) (!  (or (= $generated@@108 $generated@@110) (= ($generated@@76 $generated@@102 $generated@@103 $generated@@104 ($generated@@82 $generated@@102 $generated@@103 $generated@@104 $generated@@106 $generated@@107 $generated@@108 $generated@@105) $generated@@109 $generated@@110) ($generated@@76 $generated@@102 $generated@@103 $generated@@104 $generated@@106 $generated@@109 $generated@@110)))
 :weight 0
)))) (= ($generated@@5 $generated@@77) 5)) (= ($generated@@5 $generated@@78) 6)) (forall (($generated@@111 T@T) ($generated@@112 T@T) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (! (= ($generated@@80 $generated@@111 $generated@@112 ($generated@@83 $generated@@111 $generated@@112 $generated@@114 $generated@@115 $generated@@113) $generated@@115) $generated@@113)
 :weight 0
))) (forall (($generated@@116 T@T) ($generated@@117 T@T) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ) (!  (or (= $generated@@120 $generated@@121) (= ($generated@@80 $generated@@116 $generated@@117 ($generated@@83 $generated@@116 $generated@@117 $generated@@119 $generated@@120 $generated@@118) $generated@@121) ($generated@@80 $generated@@116 $generated@@117 $generated@@119 $generated@@121)))
 :weight 0
))) (forall (($generated@@122 T@T) ($generated@@123 T@T) ) (= ($generated@@5 ($generated@@81 $generated@@122 $generated@@123)) 7))) (forall (($generated@@124 T@T) ($generated@@125 T@T) ) (! (= ($generated@@84 ($generated@@81 $generated@@124 $generated@@125)) $generated@@124)
 :pattern ( ($generated@@81 $generated@@124 $generated@@125))
))) (forall (($generated@@126 T@T) ($generated@@127 T@T) ) (! (= ($generated@@85 ($generated@@81 $generated@@126 $generated@@127)) $generated@@127)
 :pattern ( ($generated@@81 $generated@@126 $generated@@127))
))))
(assert (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 Bool) ($generated@@132 T@U) ($generated@@133 T@U) ) (! (= ($generated@@10 ($generated@@76 $generated@@77 $generated@@78 $generated@@6 ($generated@@79 $generated@@128 $generated@@129 $generated@@130 $generated@@131) $generated@@132 $generated@@133))  (=> (and (or (not (= $generated@@132 $generated@@128)) (not true)) ($generated@@10 ($generated@@45 $generated@@6 ($generated@@80 $generated@@78 $generated@@2 ($generated@@80 $generated@@77 ($generated@@81 $generated@@78 $generated@@2) $generated@@129 $generated@@132) $generated@@130)))) $generated@@131))
 :pattern ( ($generated@@76 $generated@@77 $generated@@78 $generated@@6 ($generated@@79 $generated@@128 $generated@@129 $generated@@130 $generated@@131) $generated@@132 $generated@@133))
)))
(assert  (=> (<= 0 $generated) (forall (($generated@@134 T@U) ($generated@@135 T@U) ) (!  (=> (or ($generated@@3 $generated@@134 $generated@@135) (and (< 0 $generated) ($generated@@4 $generated@@135 $generated@@134))) (= ($generated@@0 $generated@@134 $generated@@135) $generated@@135))
 :pattern ( ($generated@@0 $generated@@134 $generated@@135))
))))
(assert (forall (($generated@@138 T@U) ($generated@@139 T@U) ) (!  (and (= ($generated@@136 ($generated@@27 $generated@@138 $generated@@139)) $generated@@138) (= ($generated@@137 ($generated@@27 $generated@@138 $generated@@139)) $generated@@139))
 :pattern ( ($generated@@27 $generated@@138 $generated@@139))
)))
(assert  (=> (<= 0 $generated) (forall (($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ) (!  (=> (and (or ($generated@@3 $generated@@142 $generated@@143) (and (< 0 $generated) (and ($generated@@4 $generated@@143 $generated@@142) ($generated@@51 $generated@@143 $generated@@142 $generated@@141)))) ($generated@@140 $generated@@141)) ($generated@@51 ($generated@@0 $generated@@142 $generated@@143) $generated@@142 $generated@@141))
 :pattern ( ($generated@@51 ($generated@@0 $generated@@142 $generated@@143) $generated@@142 $generated@@141))
))))
(assert (forall (($generated@@144 Int) ) (! (= ($generated@@46 $generated@@7 ($generated@@11 ($generated@@24 $generated@@144))) ($generated@@1 $generated@@2 ($generated@@46 $generated@@7 ($generated@@11 $generated@@144))))
 :pattern ( ($generated@@46 $generated@@7 ($generated@@11 ($generated@@24 $generated@@144))))
)))
(assert (forall (($generated@@145 T@U) ($generated@@146 T@T) ) (! (= ($generated@@46 $generated@@146 ($generated@@1 $generated@@146 $generated@@145)) ($generated@@1 $generated@@2 ($generated@@46 $generated@@146 $generated@@145)))
 :pattern ( ($generated@@46 $generated@@146 ($generated@@1 $generated@@146 $generated@@145)))
)))
(assert (forall (($generated@@147 T@U) ) (!  (=> (= ($generated@@34 $generated@@147) 0) (= $generated@@147 $generated@@28))
 :pattern ( ($generated@@34 $generated@@147))
)))
(assert  (=> (<= 1 $generated) (forall (($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 T@U) ($generated@@151 Int) ) (!  (=> (and (or ($generated@@25 $generated@@149 $generated@@150 $generated@@151) (and (< 1 $generated) (and ($generated@@4 $generated@@150 $generated@@149) ($generated@@51 $generated@@150 $generated@@149 $generated@@148)))) ($generated@@140 $generated@@148)) ($generated@@51 ($generated@@23 $generated@@149 $generated@@150 $generated@@151) $generated@@149 $generated@@148))
 :pattern ( ($generated@@51 ($generated@@23 $generated@@149 $generated@@150 $generated@@151) $generated@@149 $generated@@148))
))))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@152 () Int)
(declare-fun $generated@@153 () T@U)
(declare-fun $generated@@154 () T@U)
(declare-fun $generated@@155 () T@U)
(declare-fun $generated@@156 () T@U)
(declare-fun $generated@@157 () T@U)
(declare-fun $generated@@158 () T@U)
(declare-fun $generated@@159 () T@U)
(declare-fun $generated@@160 () T@U)
(declare-fun $generated@@161 () T@U)
(declare-fun $generated@@162 (T@U) T@U)
(declare-fun $generated@@163 () T@U)
(declare-fun $generated@@164 () T@U)
(declare-fun $generated@@165 (T@U) T@U)
(declare-fun $generated@@166 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 7) (let (($generated@@167  (=> (and (or (not (= $generated@@152 ($generated@@24 80))) (not true)) (= (ControlFlow 0 4) (- 0 3))) (and (<= 0 ($generated@@24 0)) (< ($generated@@24 0) ($generated@@34 ($generated@@27 $generated@@28 $generated@@153)))))))
(let (($generated@@168 true))
(let (($generated@@169  (=> (= $generated@@154 $generated@@155) (=> (and ($generated@@4 $generated@@154 $generated@@156) (= $generated@@153 $generated@@154)) (and (=> (= (ControlFlow 0 5) 2) $generated@@168) (=> (= (ControlFlow 0 5) 4) $generated@@167))))))
(let (($generated@@170 true))
(let (($generated@@171  (=> (and (and (= $generated@@157 ($generated@@79 $generated@@158 $generated@@159 $generated@@160 false)) (= $generated@@161 ($generated@@162 $generated@@163))) (and (= $generated@@164 ($generated@@162 ($generated@@162 $generated@@163))) (= ($generated@@165 $generated@@163) $generated@@163))) (and (=> (= (ControlFlow 0 6) 1) $generated@@170) (=> (= (ControlFlow 0 6) 5) $generated@@169)))))
(let (($generated@@172  (=> (and (and (and ($generated@@140 $generated@@159) ($generated@@166 $generated@@159)) ($generated@@4 $generated@@155 $generated@@156)) (and (= 1 $generated) (= (ControlFlow 0 7) 6))) $generated@@171)))
$generated@@172)))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
