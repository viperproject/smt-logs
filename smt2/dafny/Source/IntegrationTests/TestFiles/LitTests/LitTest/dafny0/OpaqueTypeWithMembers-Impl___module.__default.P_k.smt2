(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (Bool) T@U)
(declare-fun $generated@@7 (T@U) Bool)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun $generated@@9 (T@U) Int)
(declare-fun $generated@@10 (Real) T@U)
(declare-fun $generated@@11 (T@U) Real)
(declare-fun $generated@@18 (T@U) T@U)
(declare-fun $generated@@19 () Int)
(declare-fun $generated@@20 (T@U) Int)
(declare-fun $generated@@21 (T@U T@U T@U) Bool)
(declare-fun $generated@@22 () T@U)
(declare-fun $generated@@23 (T@U) Bool)
(declare-fun $generated@@24 (T@U T@U) Bool)
(declare-fun $generated@@25 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@28 (T@U) Bool)
(declare-fun $generated@@29 (T@U) Bool)
(declare-fun $generated@@30 (T@U) Bool)
(declare-fun $generated@@32 (T@T T@U) T@U)
(declare-fun $generated@@35 (T@U) Real)
(declare-fun $generated@@36 () T@T)
(declare-fun $generated@@37 (T@U) Bool)
(declare-fun $generated@@38 (Int) Real)
(declare-fun $generated@@40 (T@U) Int)
(declare-fun $generated@@41 (T@U) Bool)
(declare-fun $generated@@42 (Int Int) Int)
(declare-fun $generated@@45 (T@T T@U) T@U)
(declare-fun $generated@@46 (T@T T@U) T@U)
(declare-fun $generated@@53 (T@T T@U T@U) Bool)
(declare-fun $generated@@68 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@69 () T@T)
(declare-fun $generated@@70 () T@T)
(declare-fun $generated@@71 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@72 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@73 (T@T T@T) T@T)
(declare-fun $generated@@74 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@75 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@76 (T@T) T@T)
(declare-fun $generated@@77 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@4) 1)) (= ($generated@@2 $generated@@5) 2)) (forall (($generated@@12 Bool) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Int) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Real) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))))
(assert (distinct $generated $generated@@0 $generated@@1)
)
(assert (= ($generated@@18 $generated) $generated@@0))
(assert  (=> (< 0 $generated@@19) (forall (($generated@@26 T@U) ($generated@@27 T@U) ) (!  (=> (and (and ($generated@@23 $generated@@26) ($generated@@24 $generated@@27 $generated@@22)) ($generated@@21 $generated@@27 $generated@@22 $generated@@26)) ($generated@@25 $generated@@4 ($generated@@8 ($generated@@20 $generated@@27)) $generated $generated@@26))
 :pattern ( ($generated@@20 $generated@@27) ($generated@@21 $generated@@27 $generated@@22 $generated@@26))
))))
(assert ($generated@@28 $generated@@22))
(assert  (=> (<= 1 $generated@@19) (forall (($generated@@31 T@U) ) (!  (=> (or ($generated@@30 $generated@@31) (and (< 1 $generated@@19) ($generated@@24 $generated@@31 $generated@@22))) (= ($generated@@29 $generated@@31) (< ($generated@@20 $generated@@31) 10)))
 :pattern ( ($generated@@29 $generated@@31))
))))
(assert (forall (($generated@@33 T@U) ($generated@@34 T@T) ) (! (= ($generated@@32 $generated@@34 $generated@@33) $generated@@33)
 :pattern ( ($generated@@32 $generated@@34 $generated@@33))
)))
(assert (= ($generated@@2 $generated@@36) 3))
(assert  (=> (<= 2 $generated@@19) (forall (($generated@@39 T@U) ) (!  (=> (or ($generated@@37 ($generated@@32 $generated@@36 $generated@@39)) (and (< 2 $generated@@19) (and ($generated@@24 $generated@@39 $generated@@22) (not ($generated@@7 ($generated@@32 $generated@@3 ($generated@@6 ($generated@@29 ($generated@@32 $generated@@36 $generated@@39))))))))) (= ($generated@@35 ($generated@@32 $generated@@36 $generated@@39)) (/ 100.0 ($generated@@38 ($generated@@20 ($generated@@32 $generated@@36 $generated@@39))))))
 :weight 3
 :pattern ( ($generated@@35 ($generated@@32 $generated@@36 $generated@@39)))
))))
(assert  (=> (<= 2 $generated@@19) (forall (($generated@@43 T@U) ) (!  (=> (or ($generated@@41 $generated@@43) (and (< 2 $generated@@19) (and ($generated@@24 $generated@@43 $generated@@22) ($generated@@29 $generated@@43)))) (= ($generated@@40 $generated@@43) ($generated@@42 100 (- ($generated@@20 $generated@@43) 10))))
 :pattern ( ($generated@@40 $generated@@43))
))))
(assert  (=> (<= 1 $generated@@19) (forall (($generated@@44 T@U) ) (!  (=> (or ($generated@@30 ($generated@@32 $generated@@36 $generated@@44)) (and (< 1 $generated@@19) ($generated@@24 $generated@@44 $generated@@22))) (= ($generated@@29 ($generated@@32 $generated@@36 $generated@@44)) (< ($generated@@20 ($generated@@32 $generated@@36 $generated@@44)) 10)))
 :weight 3
 :pattern ( ($generated@@29 ($generated@@32 $generated@@36 $generated@@44)))
))))
(assert (forall (($generated@@47 T@U) ($generated@@48 T@T) ) (! (= ($generated@@46 $generated@@48 ($generated@@45 $generated@@48 $generated@@47)) $generated@@47)
 :pattern ( ($generated@@45 $generated@@48 $generated@@47))
)))
(assert (forall (($generated@@49 T@U) ($generated@@50 T@U) ($generated@@51 T@U) ($generated@@52 T@T) ) (! (= ($generated@@21 ($generated@@46 $generated@@52 $generated@@49) $generated@@50 $generated@@51) ($generated@@25 $generated@@52 $generated@@49 $generated@@50 $generated@@51))
 :pattern ( ($generated@@21 ($generated@@46 $generated@@52 $generated@@49) $generated@@50 $generated@@51))
)))
(assert  (=> (< 0 $generated@@19) (forall (($generated@@54 T@U) ) (!  (=> ($generated@@24 $generated@@54 $generated@@22) ($generated@@53 $generated@@4 ($generated@@8 ($generated@@20 $generated@@54)) $generated))
 :pattern ( ($generated@@20 $generated@@54))
))))
(assert  (=> (<= 2 $generated@@19) (forall (($generated@@55 T@U) ) (!  (=> (or ($generated@@41 ($generated@@32 $generated@@36 $generated@@55)) (and (< 2 $generated@@19) (and ($generated@@24 $generated@@55 $generated@@22) ($generated@@7 ($generated@@32 $generated@@3 ($generated@@6 ($generated@@29 ($generated@@32 $generated@@36 $generated@@55)))))))) (= ($generated@@40 ($generated@@32 $generated@@36 $generated@@55)) ($generated@@42 100 (- ($generated@@20 ($generated@@32 $generated@@36 $generated@@55)) 10))))
 :weight 3
 :pattern ( ($generated@@40 ($generated@@32 $generated@@36 $generated@@55)))
))))
(assert (forall (($generated@@56 Int) ($generated@@57 Int) ) (! (= ($generated@@42 $generated@@56 $generated@@57) (div $generated@@56 $generated@@57))
 :pattern ( ($generated@@42 $generated@@56 $generated@@57))
)))
(assert (forall (($generated@@58 Int) ) (! (= ($generated@@38 $generated@@58) (to_real $generated@@58))
 :pattern ( ($generated@@38 $generated@@58))
)))
(assert (forall (($generated@@59 T@U) ) (!  (=> ($generated@@24 $generated@@59 $generated) (and (= ($generated@@46 $generated@@4 ($generated@@45 $generated@@4 $generated@@59)) $generated@@59) ($generated@@53 $generated@@4 ($generated@@45 $generated@@4 $generated@@59) $generated)))
 :pattern ( ($generated@@24 $generated@@59 $generated))
)))
(assert (forall (($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@T) ) (! (= ($generated@@24 ($generated@@46 $generated@@62 $generated@@60) $generated@@61) ($generated@@53 $generated@@62 $generated@@60 $generated@@61))
 :pattern ( ($generated@@24 ($generated@@46 $generated@@62 $generated@@60) $generated@@61))
)))
(assert (forall (($generated@@63 T@U) ) (!  (=> ($generated@@28 $generated@@63) (forall (($generated@@64 T@U) ($generated@@65 T@U) ) (!  (=> ($generated@@24 $generated@@65 $generated@@63) ($generated@@21 $generated@@65 $generated@@63 $generated@@64))
 :pattern ( ($generated@@21 $generated@@65 $generated@@63 $generated@@64))
)))
 :pattern ( ($generated@@28 $generated@@63))
)))
(assert (forall (($generated@@66 T@U) ($generated@@67 T@T) ) (! (= ($generated@@45 $generated@@67 ($generated@@46 $generated@@67 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@46 $generated@@67 $generated@@66))
)))
(assert  (and (and (and (and (and (and (and (and (forall (($generated@@78 T@T) ($generated@@79 T@T) ($generated@@80 T@T) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ) (! (= ($generated@@68 $generated@@78 $generated@@79 $generated@@80 ($generated@@74 $generated@@78 $generated@@79 $generated@@80 $generated@@82 $generated@@83 $generated@@84 $generated@@81) $generated@@83 $generated@@84) $generated@@81)
 :weight 0
)) (and (forall (($generated@@85 T@T) ($generated@@86 T@T) ($generated@@87 T@T) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ) (!  (or (= $generated@@90 $generated@@92) (= ($generated@@68 $generated@@85 $generated@@86 $generated@@87 ($generated@@74 $generated@@85 $generated@@86 $generated@@87 $generated@@89 $generated@@90 $generated@@91 $generated@@88) $generated@@92 $generated@@93) ($generated@@68 $generated@@85 $generated@@86 $generated@@87 $generated@@89 $generated@@92 $generated@@93)))
 :weight 0
)) (forall (($generated@@94 T@T) ($generated@@95 T@T) ($generated@@96 T@T) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@100 $generated@@102) (= ($generated@@68 $generated@@94 $generated@@95 $generated@@96 ($generated@@74 $generated@@94 $generated@@95 $generated@@96 $generated@@98 $generated@@99 $generated@@100 $generated@@97) $generated@@101 $generated@@102) ($generated@@68 $generated@@94 $generated@@95 $generated@@96 $generated@@98 $generated@@101 $generated@@102)))
 :weight 0
)))) (= ($generated@@2 $generated@@69) 4)) (= ($generated@@2 $generated@@70) 5)) (forall (($generated@@103 T@T) ($generated@@104 T@T) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ) (! (= ($generated@@72 $generated@@103 $generated@@104 ($generated@@75 $generated@@103 $generated@@104 $generated@@106 $generated@@107 $generated@@105) $generated@@107) $generated@@105)
 :weight 0
))) (forall (($generated@@108 T@T) ($generated@@109 T@T) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ) (!  (or (= $generated@@112 $generated@@113) (= ($generated@@72 $generated@@108 $generated@@109 ($generated@@75 $generated@@108 $generated@@109 $generated@@111 $generated@@112 $generated@@110) $generated@@113) ($generated@@72 $generated@@108 $generated@@109 $generated@@111 $generated@@113)))
 :weight 0
))) (forall (($generated@@114 T@T) ($generated@@115 T@T) ) (= ($generated@@2 ($generated@@73 $generated@@114 $generated@@115)) 6))) (forall (($generated@@116 T@T) ($generated@@117 T@T) ) (! (= ($generated@@76 ($generated@@73 $generated@@116 $generated@@117)) $generated@@116)
 :pattern ( ($generated@@73 $generated@@116 $generated@@117))
))) (forall (($generated@@118 T@T) ($generated@@119 T@T) ) (! (= ($generated@@77 ($generated@@73 $generated@@118 $generated@@119)) $generated@@119)
 :pattern ( ($generated@@73 $generated@@118 $generated@@119))
))))
(assert (forall (($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 Bool) ($generated@@124 T@U) ($generated@@125 T@U) ) (! (= ($generated@@7 ($generated@@68 $generated@@69 $generated@@70 $generated@@3 ($generated@@71 $generated@@120 $generated@@121 $generated@@122 $generated@@123) $generated@@124 $generated@@125))  (=> (and (or (not (= $generated@@124 $generated@@120)) (not true)) ($generated@@7 ($generated@@45 $generated@@3 ($generated@@72 $generated@@70 $generated@@36 ($generated@@72 $generated@@69 ($generated@@73 $generated@@70 $generated@@36) $generated@@121 $generated@@124) $generated@@122)))) $generated@@123))
 :pattern ( ($generated@@68 $generated@@69 $generated@@70 $generated@@3 ($generated@@71 $generated@@120 $generated@@121 $generated@@122 $generated@@123) $generated@@124 $generated@@125))
)))
(assert (forall (($generated@@126 T@U) ($generated@@127 T@T) ) (! (= ($generated@@46 $generated@@127 ($generated@@32 $generated@@127 $generated@@126)) ($generated@@32 $generated@@36 ($generated@@46 $generated@@127 $generated@@126)))
 :pattern ( ($generated@@46 $generated@@127 ($generated@@32 $generated@@127 $generated@@126)))
)))
(assert  (=> (<= 2 $generated@@19) (forall (($generated@@128 T@U) ) (!  (=> (or ($generated@@37 $generated@@128) (and (< 2 $generated@@19) (and ($generated@@24 $generated@@128 $generated@@22) (not ($generated@@29 $generated@@128))))) (= ($generated@@35 $generated@@128) (/ 100.0 ($generated@@38 ($generated@@20 $generated@@128)))))
 :pattern ( ($generated@@35 $generated@@128))
))))
(assert (forall (($generated@@129 T@U) ($generated@@130 T@U) ) (! ($generated@@25 $generated@@4 $generated@@130 $generated $generated@@129)
 :pattern ( ($generated@@25 $generated@@4 $generated@@130 $generated $generated@@129))
)))
(assert (forall (($generated@@131 T@U) ) (! ($generated@@53 $generated@@4 $generated@@131 $generated)
 :pattern ( ($generated@@53 $generated@@4 $generated@@131 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@132 () T@U)
(declare-fun $generated@@133 () T@U)
(declare-fun $generated@@134 () T@U)
(declare-fun $generated@@135 () T@U)
(declare-fun $generated@@136 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 6) (let (($generated@@137  (=> (<= 10 ($generated@@20 $generated@@132)) (=> (and (and ($generated@@21 $generated@@132 $generated@@22 $generated@@133) (= (ControlFlow 0 4) (- 0 3))) ($generated@@30 $generated@@132)) (or ($generated@@29 $generated@@132) (< ($generated@@20 $generated@@132) 10))))))
(let (($generated@@138  (=> (< ($generated@@20 $generated@@132) 10) (=> (and ($generated@@21 $generated@@132 $generated@@22 $generated@@133) (= (ControlFlow 0 2) (- 0 1))) (not ($generated@@29 $generated@@132))))))
(let (($generated@@139  (=> (= $generated@@134 ($generated@@71 $generated@@135 $generated@@133 $generated@@1 false)) (and (=> (= (ControlFlow 0 5) 2) $generated@@138) (=> (= (ControlFlow 0 5) 4) $generated@@137)))))
(let (($generated@@140  (=> (and ($generated@@23 $generated@@133) ($generated@@136 $generated@@133)) (=> (and (and ($generated@@24 $generated@@132 $generated@@22) ($generated@@21 $generated@@132 $generated@@22 $generated@@133)) (and (= 3 $generated@@19) (= (ControlFlow 0 6) 5))) $generated@@139))))
$generated@@140)))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 4) (- 3))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
