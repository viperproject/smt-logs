(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 (T@U) T@U)
(declare-fun $generated@@20 (T@U) Int)
(declare-fun $generated@@21 () T@U)
(declare-fun $generated@@22 (T@U Int) T@U)
(declare-fun $generated@@23 (T@U T@U) T@U)
(declare-fun $generated@@27 (T@U Int) T@U)
(declare-fun $generated@@28 (T@U T@U) T@U)
(declare-fun $generated@@34 (Int) Int)
(declare-fun $generated@@36 (T@T T@U) T@U)
(declare-fun $generated@@39 (T@T T@U T@U) Bool)
(declare-fun $generated@@40 () T@T)
(declare-fun $generated@@41 (T@U) T@U)
(declare-fun $generated@@42 (T@U T@U) Bool)
(declare-fun $generated@@46 (T@U Int) T@U)
(declare-fun $generated@@52 (T@U T@U) Bool)
(declare-fun $generated@@56 (T@T T@U) T@U)
(declare-fun $generated@@57 (T@T T@U) T@U)
(declare-fun $generated@@62 (T@U T@U T@U) Bool)
(declare-fun $generated@@63 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@89 (T@U) T@U)
(declare-fun $generated@@94 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@95 () T@T)
(declare-fun $generated@@96 () T@T)
(declare-fun $generated@@97 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@98 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@99 () T@T)
(declare-fun $generated@@100 (T@T T@T) T@T)
(declare-fun $generated@@101 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@102 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@103 (T@T) T@T)
(declare-fun $generated@@104 (T@T) T@T)
(declare-fun $generated@@153 (T@U) T@U)
(declare-fun $generated@@154 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (= ($generated@@19 $generated) $generated@@0))
(assert (= ($generated@@20 $generated@@21) 0))
(assert (forall (($generated@@24 T@U) ($generated@@25 T@U) ($generated@@26 Int) ) (!  (=> (and (<= 0 $generated@@26) (<= $generated@@26 ($generated@@20 $generated@@24))) (= ($generated@@22 ($generated@@23 $generated@@24 $generated@@25) $generated@@26) ($generated@@23 ($generated@@22 $generated@@24 $generated@@26) $generated@@25)))
 :pattern ( ($generated@@22 ($generated@@23 $generated@@24 $generated@@25) $generated@@26))
)))
(assert (forall (($generated@@29 T@U) ($generated@@30 T@U) ($generated@@31 Int) ) (!  (=> (= $generated@@31 ($generated@@20 $generated@@29)) (and (= ($generated@@27 ($generated@@28 $generated@@29 $generated@@30) $generated@@31) $generated@@29) (= ($generated@@22 ($generated@@28 $generated@@29 $generated@@30) $generated@@31) $generated@@30)))
 :pattern ( ($generated@@27 ($generated@@28 $generated@@29 $generated@@30) $generated@@31))
 :pattern ( ($generated@@22 ($generated@@28 $generated@@29 $generated@@30) $generated@@31))
)))
(assert (forall (($generated@@32 T@U) ($generated@@33 Int) ) (!  (=> (= $generated@@33 0) (= ($generated@@22 $generated@@32 $generated@@33) $generated@@32))
 :pattern ( ($generated@@22 $generated@@32 $generated@@33))
)))
(assert (forall (($generated@@35 Int) ) (! (= ($generated@@34 $generated@@35) $generated@@35)
 :pattern ( ($generated@@34 $generated@@35))
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@T) ) (! (= ($generated@@36 $generated@@38 $generated@@37) $generated@@37)
 :pattern ( ($generated@@36 $generated@@38 $generated@@37))
)))
(assert (= ($generated@@3 $generated@@40) 3))
(assert (forall (($generated@@43 T@U) ($generated@@44 T@U) ($generated@@45 T@U) ) (!  (=> (and ($generated@@39 $generated@@40 $generated@@43 ($generated@@41 $generated@@45)) ($generated@@42 $generated@@44 $generated@@45)) ($generated@@39 $generated@@40 ($generated@@23 $generated@@43 $generated@@44) ($generated@@41 $generated@@45)))
 :pattern ( ($generated@@39 $generated@@40 ($generated@@23 $generated@@43 $generated@@44) ($generated@@41 $generated@@45)))
)))
(assert (forall (($generated@@47 T@U) ($generated@@48 Int) ($generated@@49 Int) ) (!  (=> (and (and (<= 0 $generated@@49) (< $generated@@49 $generated@@48)) (< $generated@@49 ($generated@@20 $generated@@47))) (= ($generated@@46 ($generated@@27 $generated@@47 $generated@@48) $generated@@49) ($generated@@46 $generated@@47 $generated@@49)))
 :weight 25
 :pattern ( ($generated@@46 ($generated@@27 $generated@@47 $generated@@48) $generated@@49))
 :pattern ( ($generated@@46 $generated@@47 $generated@@49) ($generated@@27 $generated@@47 $generated@@48))
)))
(assert (forall (($generated@@50 T@U) ($generated@@51 Int) ) (!  (=> (and (<= 0 $generated@@51) (<= $generated@@51 ($generated@@20 $generated@@50))) (= ($generated@@20 ($generated@@22 $generated@@50 $generated@@51)) (- ($generated@@20 $generated@@50) $generated@@51)))
 :pattern ( ($generated@@20 ($generated@@22 $generated@@50 $generated@@51)))
)))
(assert (forall (($generated@@53 T@U) ($generated@@54 T@U) ) (! (= ($generated@@52 $generated@@53 $generated@@54)  (and (= ($generated@@20 $generated@@53) ($generated@@20 $generated@@54)) (forall (($generated@@55 Int) ) (!  (=> (and (<= 0 $generated@@55) (< $generated@@55 ($generated@@20 $generated@@53))) (= ($generated@@46 $generated@@53 $generated@@55) ($generated@@46 $generated@@54 $generated@@55)))
 :pattern ( ($generated@@46 $generated@@53 $generated@@55))
 :pattern ( ($generated@@46 $generated@@54 $generated@@55))
))))
 :pattern ( ($generated@@52 $generated@@53 $generated@@54))
)))
(assert (forall (($generated@@58 T@U) ($generated@@59 T@T) ) (! (= ($generated@@57 $generated@@59 ($generated@@56 $generated@@59 $generated@@58)) $generated@@58)
 :pattern ( ($generated@@56 $generated@@59 $generated@@58))
)))
(assert (forall (($generated@@60 T@U) ($generated@@61 T@U) ) (! (= ($generated@@20 ($generated@@23 $generated@@60 $generated@@61)) (+ 1 ($generated@@20 $generated@@60)))
 :pattern ( ($generated@@23 $generated@@60 $generated@@61))
)))
(assert (forall (($generated@@64 T@U) ($generated@@65 T@U) ($generated@@66 T@U) ($generated@@67 T@T) ) (! (= ($generated@@62 ($generated@@57 $generated@@67 $generated@@64) $generated@@65 $generated@@66) ($generated@@63 $generated@@67 $generated@@64 $generated@@65 $generated@@66))
 :pattern ( ($generated@@62 ($generated@@57 $generated@@67 $generated@@64) $generated@@65 $generated@@66))
)))
(assert (forall (($generated@@68 T@U) ($generated@@69 Int) ($generated@@70 Int) ) (!  (=> (and (and (<= 0 $generated@@69) (<= 0 $generated@@70)) (< $generated@@70 (- ($generated@@20 $generated@@68) $generated@@69))) (= ($generated@@46 ($generated@@22 $generated@@68 $generated@@69) $generated@@70) ($generated@@46 $generated@@68 (+ $generated@@70 $generated@@69))))
 :weight 25
 :pattern ( ($generated@@46 ($generated@@22 $generated@@68 $generated@@69) $generated@@70))
)))
(assert (forall (($generated@@71 T@U) ($generated@@72 T@U) ) (! (= ($generated@@20 ($generated@@28 $generated@@71 $generated@@72)) (+ ($generated@@20 $generated@@71) ($generated@@20 $generated@@72)))
 :pattern ( ($generated@@20 ($generated@@28 $generated@@71 $generated@@72)))
)))
(assert (forall (($generated@@73 T@U) ($generated@@74 Int) ($generated@@75 T@U) ) (!  (and (=> (= $generated@@74 ($generated@@20 $generated@@73)) (= ($generated@@46 ($generated@@23 $generated@@73 $generated@@75) $generated@@74) $generated@@75)) (=> (or (not (= $generated@@74 ($generated@@20 $generated@@73))) (not true)) (= ($generated@@46 ($generated@@23 $generated@@73 $generated@@75) $generated@@74) ($generated@@46 $generated@@73 $generated@@74))))
 :pattern ( ($generated@@46 ($generated@@23 $generated@@73 $generated@@75) $generated@@74))
)))
(assert (forall (($generated@@76 T@U) ($generated@@77 T@U) ) (!  (=> ($generated@@52 $generated@@76 $generated@@77) (= $generated@@76 $generated@@77))
 :pattern ( ($generated@@52 $generated@@76 $generated@@77))
)))
(assert (forall (($generated@@78 T@U) ($generated@@79 Int) ) (!  (=> (and (<= 0 $generated@@79) (<= $generated@@79 ($generated@@20 $generated@@78))) (= ($generated@@20 ($generated@@27 $generated@@78 $generated@@79)) $generated@@79))
 :pattern ( ($generated@@20 ($generated@@27 $generated@@78 $generated@@79)))
)))
(assert (forall (($generated@@80 T@U) ) (!  (=> ($generated@@42 $generated@@80 $generated) (and (= ($generated@@57 $generated@@5 ($generated@@56 $generated@@5 $generated@@80)) $generated@@80) ($generated@@39 $generated@@5 ($generated@@56 $generated@@5 $generated@@80) $generated)))
 :pattern ( ($generated@@42 $generated@@80 $generated))
)))
(assert (forall (($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@T) ) (! (= ($generated@@42 ($generated@@57 $generated@@83 $generated@@81) $generated@@82) ($generated@@39 $generated@@83 $generated@@81 $generated@@82))
 :pattern ( ($generated@@42 ($generated@@57 $generated@@83 $generated@@81) $generated@@82))
)))
(assert (forall (($generated@@84 T@U) ) (! (<= 0 ($generated@@20 $generated@@84))
 :pattern ( ($generated@@20 $generated@@84))
)))
(assert (forall (($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ) (! (= ($generated@@63 $generated@@40 $generated@@85 ($generated@@41 $generated@@86) $generated@@87) (forall (($generated@@88 Int) ) (!  (=> (and (<= 0 $generated@@88) (< $generated@@88 ($generated@@20 $generated@@85))) ($generated@@62 ($generated@@46 $generated@@85 $generated@@88) $generated@@86 $generated@@87))
 :pattern ( ($generated@@46 $generated@@85 $generated@@88))
)))
 :pattern ( ($generated@@63 $generated@@40 $generated@@85 ($generated@@41 $generated@@86) $generated@@87))
)))
(assert (forall (($generated@@90 T@U) ) (! (= ($generated@@89 ($generated@@41 $generated@@90)) $generated@@90)
 :pattern ( ($generated@@41 $generated@@90))
)))
(assert (forall (($generated@@91 T@U) ) (! (= ($generated@@19 ($generated@@41 $generated@@91)) $generated@@1)
 :pattern ( ($generated@@41 $generated@@91))
)))
(assert (forall (($generated@@92 T@U) ($generated@@93 T@T) ) (! (= ($generated@@56 $generated@@93 ($generated@@57 $generated@@93 $generated@@92)) $generated@@92)
 :pattern ( ($generated@@57 $generated@@93 $generated@@92))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@105 T@T) ($generated@@106 T@T) ($generated@@107 T@T) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (! (= ($generated@@94 $generated@@105 $generated@@106 $generated@@107 ($generated@@101 $generated@@105 $generated@@106 $generated@@107 $generated@@109 $generated@@110 $generated@@111 $generated@@108) $generated@@110 $generated@@111) $generated@@108)
 :weight 0
)) (and (forall (($generated@@112 T@T) ($generated@@113 T@T) ($generated@@114 T@T) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (!  (or (= $generated@@117 $generated@@119) (= ($generated@@94 $generated@@112 $generated@@113 $generated@@114 ($generated@@101 $generated@@112 $generated@@113 $generated@@114 $generated@@116 $generated@@117 $generated@@118 $generated@@115) $generated@@119 $generated@@120) ($generated@@94 $generated@@112 $generated@@113 $generated@@114 $generated@@116 $generated@@119 $generated@@120)))
 :weight 0
)) (forall (($generated@@121 T@T) ($generated@@122 T@T) ($generated@@123 T@T) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 T@U) ) (!  (or (= $generated@@127 $generated@@129) (= ($generated@@94 $generated@@121 $generated@@122 $generated@@123 ($generated@@101 $generated@@121 $generated@@122 $generated@@123 $generated@@125 $generated@@126 $generated@@127 $generated@@124) $generated@@128 $generated@@129) ($generated@@94 $generated@@121 $generated@@122 $generated@@123 $generated@@125 $generated@@128 $generated@@129)))
 :weight 0
)))) (= ($generated@@3 $generated@@95) 4)) (= ($generated@@3 $generated@@96) 5)) (forall (($generated@@130 T@T) ($generated@@131 T@T) ($generated@@132 T@U) ($generated@@133 T@U) ($generated@@134 T@U) ) (! (= ($generated@@98 $generated@@130 $generated@@131 ($generated@@102 $generated@@130 $generated@@131 $generated@@133 $generated@@134 $generated@@132) $generated@@134) $generated@@132)
 :weight 0
))) (forall (($generated@@135 T@T) ($generated@@136 T@T) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ($generated@@140 T@U) ) (!  (or (= $generated@@139 $generated@@140) (= ($generated@@98 $generated@@135 $generated@@136 ($generated@@102 $generated@@135 $generated@@136 $generated@@138 $generated@@139 $generated@@137) $generated@@140) ($generated@@98 $generated@@135 $generated@@136 $generated@@138 $generated@@140)))
 :weight 0
))) (= ($generated@@3 $generated@@99) 6)) (forall (($generated@@141 T@T) ($generated@@142 T@T) ) (= ($generated@@3 ($generated@@100 $generated@@141 $generated@@142)) 7))) (forall (($generated@@143 T@T) ($generated@@144 T@T) ) (! (= ($generated@@103 ($generated@@100 $generated@@143 $generated@@144)) $generated@@143)
 :pattern ( ($generated@@100 $generated@@143 $generated@@144))
))) (forall (($generated@@145 T@T) ($generated@@146 T@T) ) (! (= ($generated@@104 ($generated@@100 $generated@@145 $generated@@146)) $generated@@146)
 :pattern ( ($generated@@100 $generated@@145 $generated@@146))
))))
(assert (forall (($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 Bool) ($generated@@151 T@U) ($generated@@152 T@U) ) (! (= ($generated@@8 ($generated@@94 $generated@@95 $generated@@96 $generated@@4 ($generated@@97 $generated@@147 $generated@@148 $generated@@149 $generated@@150) $generated@@151 $generated@@152))  (=> (and (or (not (= $generated@@151 $generated@@147)) (not true)) ($generated@@8 ($generated@@56 $generated@@4 ($generated@@98 $generated@@96 $generated@@99 ($generated@@98 $generated@@95 ($generated@@100 $generated@@96 $generated@@99) $generated@@148 $generated@@151) $generated@@149)))) $generated@@150))
 :pattern ( ($generated@@94 $generated@@95 $generated@@96 $generated@@4 ($generated@@97 $generated@@147 $generated@@148 $generated@@149 $generated@@150) $generated@@151 $generated@@152))
)))
(assert (forall (($generated@@155 T@U) ($generated@@156 T@U) ) (!  (and (= ($generated@@153 ($generated@@23 $generated@@155 $generated@@156)) $generated@@155) (= ($generated@@154 ($generated@@23 $generated@@155 $generated@@156)) $generated@@156))
 :pattern ( ($generated@@23 $generated@@155 $generated@@156))
)))
(assert (forall (($generated@@157 T@U) ($generated@@158 T@U) ) (!  (=> ($generated@@42 $generated@@157 ($generated@@41 $generated@@158)) (and (= ($generated@@57 $generated@@40 ($generated@@56 $generated@@40 $generated@@157)) $generated@@157) ($generated@@39 $generated@@40 ($generated@@56 $generated@@40 $generated@@157) ($generated@@41 $generated@@158))))
 :pattern ( ($generated@@42 $generated@@157 ($generated@@41 $generated@@158)))
)))
(assert (forall (($generated@@159 T@U) ($generated@@160 Int) ($generated@@161 Int) ) (!  (=> (and (and (<= 0 $generated@@160) (<= $generated@@160 $generated@@161)) (< $generated@@161 ($generated@@20 $generated@@159))) (= ($generated@@46 ($generated@@22 $generated@@159 $generated@@160) (- $generated@@161 $generated@@160)) ($generated@@46 $generated@@159 $generated@@161)))
 :weight 25
 :pattern ( ($generated@@46 $generated@@159 $generated@@161) ($generated@@22 $generated@@159 $generated@@160))
)))
(assert (forall (($generated@@162 T@U) ($generated@@163 Int) ($generated@@164 Int) ) (!  (=> (and (and (<= 0 $generated@@163) (<= 0 $generated@@164)) (<= (+ $generated@@163 $generated@@164) ($generated@@20 $generated@@162))) (= ($generated@@22 ($generated@@22 $generated@@162 $generated@@163) $generated@@164) ($generated@@22 $generated@@162 (+ $generated@@163 $generated@@164))))
 :pattern ( ($generated@@22 ($generated@@22 $generated@@162 $generated@@163) $generated@@164))
)))
(assert (forall (($generated@@165 T@U) ($generated@@166 T@U) ($generated@@167 Int) ) (!  (and (=> (< $generated@@167 ($generated@@20 $generated@@165)) (= ($generated@@46 ($generated@@28 $generated@@165 $generated@@166) $generated@@167) ($generated@@46 $generated@@165 $generated@@167))) (=> (<= ($generated@@20 $generated@@165) $generated@@167) (= ($generated@@46 ($generated@@28 $generated@@165 $generated@@166) $generated@@167) ($generated@@46 $generated@@166 (- $generated@@167 ($generated@@20 $generated@@165))))))
 :pattern ( ($generated@@46 ($generated@@28 $generated@@165 $generated@@166) $generated@@167))
)))
(assert (forall (($generated@@168 Int) ) (! (= ($generated@@57 $generated@@5 ($generated@@9 ($generated@@34 $generated@@168))) ($generated@@36 $generated@@99 ($generated@@57 $generated@@5 ($generated@@9 $generated@@168))))
 :pattern ( ($generated@@57 $generated@@5 ($generated@@9 ($generated@@34 $generated@@168))))
)))
(assert (forall (($generated@@169 T@U) ($generated@@170 T@T) ) (! (= ($generated@@57 $generated@@170 ($generated@@36 $generated@@170 $generated@@169)) ($generated@@36 $generated@@99 ($generated@@57 $generated@@170 $generated@@169)))
 :pattern ( ($generated@@57 $generated@@170 ($generated@@36 $generated@@170 $generated@@169)))
)))
(assert (forall (($generated@@171 T@U) ) (!  (=> (= ($generated@@20 $generated@@171) 0) (= $generated@@171 $generated@@21))
 :pattern ( ($generated@@20 $generated@@171))
)))
(assert (forall (($generated@@172 T@U) ($generated@@173 Int) ) (!  (=> (= $generated@@173 0) (= ($generated@@27 $generated@@172 $generated@@173) $generated@@21))
 :pattern ( ($generated@@27 $generated@@172 $generated@@173))
)))
(assert (forall (($generated@@174 T@U) ($generated@@175 T@U) ) (! ($generated@@63 $generated@@5 $generated@@175 $generated $generated@@174)
 :pattern ( ($generated@@63 $generated@@5 $generated@@175 $generated $generated@@174))
)))
(assert (forall (($generated@@176 T@U) ($generated@@177 T@U) ) (! (= ($generated@@39 $generated@@40 $generated@@176 ($generated@@41 $generated@@177)) (forall (($generated@@178 Int) ) (!  (=> (and (<= 0 $generated@@178) (< $generated@@178 ($generated@@20 $generated@@176))) ($generated@@42 ($generated@@46 $generated@@176 $generated@@178) $generated@@177))
 :pattern ( ($generated@@46 $generated@@176 $generated@@178))
)))
 :pattern ( ($generated@@39 $generated@@40 $generated@@176 ($generated@@41 $generated@@177)))
)))
(assert (forall (($generated@@179 T@U) ) (! ($generated@@39 $generated@@5 $generated@@179 $generated)
 :pattern ( ($generated@@39 $generated@@5 $generated@@179 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@180 () T@U)
(declare-fun $generated@@181 () T@U)
(declare-fun $generated@@182 () T@U)
(declare-fun $generated@@183 () T@U)
(declare-fun $generated@@184 (T@U) Bool)
(declare-fun $generated@@185 () T@U)
(declare-fun $generated@@186 (T@U) Bool)
(declare-fun $generated@@187 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 7) (let (($generated@@188  (=> (and (= $generated@@180 ($generated@@97 $generated@@181 $generated@@182 $generated@@2 false)) (> ($generated@@20 $generated@@183) 25)) (=> (and (and ($generated@@184 $generated@@185) ($generated@@186 $generated@@185)) (= $generated@@182 $generated@@185)) (and (=> (= (ControlFlow 0 2) (- 0 6)) (and (<= 0 ($generated@@34 0)) (<= ($generated@@34 0) ($generated@@20 $generated@@183)))) (=> (and (<= 0 ($generated@@34 0)) (<= ($generated@@34 0) ($generated@@20 $generated@@183))) (and (=> (= (ControlFlow 0 2) (- 0 5)) (and (<= ($generated@@34 0) ($generated@@34 25)) (<= ($generated@@34 25) ($generated@@20 $generated@@183)))) (=> (and (<= ($generated@@34 0) ($generated@@34 25)) (<= ($generated@@34 25) ($generated@@20 $generated@@183))) (and (=> (= (ControlFlow 0 2) (- 0 4)) (and (<= 0 ($generated@@34 0)) (< ($generated@@34 0) ($generated@@20 $generated@@183)))) (=> (and (<= 0 ($generated@@34 0)) (< ($generated@@34 0) ($generated@@20 $generated@@183))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (and (<= 0 ($generated@@34 1)) (<= ($generated@@34 1) ($generated@@20 $generated@@183)))) (=> (and (<= 0 ($generated@@34 1)) (<= ($generated@@34 1) ($generated@@20 $generated@@183))) (=> (= (ControlFlow 0 2) (- 0 1)) (and (<= ($generated@@34 1) ($generated@@34 25)) (<= ($generated@@34 25) ($generated@@20 $generated@@183))))))))))))))))
(let (($generated@@189  (=> (and ($generated@@184 $generated@@182) ($generated@@186 $generated@@182)) (=> (and (and ($generated@@39 $generated@@40 $generated@@183 ($generated@@41 $generated)) ($generated@@63 $generated@@40 $generated@@183 ($generated@@41 $generated) $generated@@182)) (and (= 0 $generated@@187) (= (ControlFlow 0 7) 2))) $generated@@188))))
$generated@@189)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
