(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 () Int)
(declare-fun $generated@@20 (T@U T@U) Int)
(declare-fun $generated@@21 (T@U) T@U)
(declare-fun $generated@@22 (T@U) Bool)
(declare-fun $generated@@23 (T@U) Bool)
(declare-fun $generated@@24 (T@T T@U T@U) Bool)
(declare-fun $generated@@25 () T@T)
(declare-fun $generated@@26 (T@U) T@U)
(declare-fun $generated@@27 (T@U) Int)
(declare-fun $generated@@28 (Int) Int)
(declare-fun $generated@@29 (T@U) Bool)
(declare-fun $generated@@30 (T@U Int) T@U)
(declare-fun $generated@@31 (T@U) Int)
(declare-fun $generated@@36 (T@U) T@U)
(declare-fun $generated@@37 () T@U)
(declare-fun $generated@@42 (T@T T@U) T@U)
(declare-fun $generated@@47 (T@T T@U) T@U)
(declare-fun $generated@@48 (T@T T@U) T@U)
(declare-fun $generated@@55 (T@U) Int)
(declare-fun $generated@@58 (T@U T@U T@U) Bool)
(declare-fun $generated@@59 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@64 (T@U Int) T@U)
(declare-fun $generated@@68 (T@U T@U) Bool)
(declare-fun $generated@@78 (T@U) T@U)
(declare-fun $generated@@85 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@86 () T@T)
(declare-fun $generated@@87 () T@T)
(declare-fun $generated@@88 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@89 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@90 () T@T)
(declare-fun $generated@@91 (T@T T@T) T@T)
(declare-fun $generated@@92 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@93 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@94 (T@T) T@T)
(declare-fun $generated@@95 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (= ($generated@@3 $generated@@25) 3))
(assert  (=> (<= 0 $generated@@19) (forall (($generated@@32 T@U) ($generated@@33 T@U) ($generated@@34 T@U) ) (!  (=> (or ($generated@@23 $generated@@34) (and (< 0 $generated@@19) (and ($generated@@22 $generated@@33) ($generated@@24 $generated@@25 $generated@@34 ($generated@@26 $generated))))) (and (=> (or (not (= ($generated@@27 $generated@@34) ($generated@@28 0))) (not true)) (and ($generated@@29 $generated@@34) ($generated@@23 ($generated@@30 $generated@@34 ($generated@@31 $generated@@34))))) (= ($generated@@20 ($generated@@21 $generated@@32) $generated@@34) (ite (= ($generated@@27 $generated@@34) ($generated@@28 0)) 0 (let (($generated@@35 ($generated@@31 $generated@@34)))
(+ $generated@@35 ($generated@@20 $generated@@32 ($generated@@30 $generated@@34 $generated@@35))))))))
 :pattern ( ($generated@@20 ($generated@@21 $generated@@32) $generated@@34) ($generated@@22 $generated@@33))
))))
(assert (= ($generated@@36 $generated) $generated@@0))
(assert (= ($generated@@27 $generated@@37) 0))
(assert (forall (($generated@@38 T@U) ) (!  (=> ($generated@@29 $generated@@38) (and (< 0 ($generated@@31 $generated@@38)) (<= ($generated@@31 $generated@@38) ($generated@@27 $generated@@38))))
 :pattern ( ($generated@@31 $generated@@38))
)))
(assert (forall (($generated@@39 T@U) ($generated@@40 Int) ) (!  (=> (= $generated@@40 0) (= ($generated@@30 $generated@@39 $generated@@40) $generated@@39))
 :pattern ( ($generated@@30 $generated@@39 $generated@@40))
)))
(assert (forall (($generated@@41 Int) ) (! (= ($generated@@28 $generated@@41) $generated@@41)
 :pattern ( ($generated@@28 $generated@@41))
)))
(assert (forall (($generated@@43 T@U) ($generated@@44 T@T) ) (! (= ($generated@@42 $generated@@44 $generated@@43) $generated@@43)
 :pattern ( ($generated@@42 $generated@@44 $generated@@43))
)))
(assert (forall (($generated@@45 T@U) ($generated@@46 Int) ) (!  (=> (and (<= 0 $generated@@46) (<= $generated@@46 ($generated@@27 $generated@@45))) (= ($generated@@27 ($generated@@30 $generated@@45 $generated@@46)) (- ($generated@@27 $generated@@45) $generated@@46)))
 :pattern ( ($generated@@27 ($generated@@30 $generated@@45 $generated@@46)))
)))
(assert (forall (($generated@@49 T@U) ($generated@@50 T@T) ) (! (= ($generated@@48 $generated@@50 ($generated@@47 $generated@@50 $generated@@49)) $generated@@49)
 :pattern ( ($generated@@47 $generated@@50 $generated@@49))
)))
(assert  (=> (<= 0 $generated@@19) (forall (($generated@@51 T@U) ($generated@@52 T@U) ($generated@@53 T@U) ) (!  (=> (or ($generated@@23 ($generated@@42 $generated@@25 $generated@@53)) (and (< 0 $generated@@19) (and ($generated@@22 $generated@@52) ($generated@@24 $generated@@25 $generated@@53 ($generated@@26 $generated))))) (and (=> (or (not (= ($generated@@27 ($generated@@42 $generated@@25 $generated@@53)) ($generated@@28 0))) (not true)) (and ($generated@@29 ($generated@@42 $generated@@25 $generated@@53)) ($generated@@23 ($generated@@30 ($generated@@42 $generated@@25 $generated@@53) ($generated@@31 ($generated@@42 $generated@@25 $generated@@53)))))) (= ($generated@@20 ($generated@@21 $generated@@51) ($generated@@42 $generated@@25 $generated@@53)) (ite (= ($generated@@27 ($generated@@42 $generated@@25 $generated@@53)) ($generated@@28 0)) 0 (let (($generated@@54 ($generated@@31 ($generated@@42 $generated@@25 $generated@@53))))
(+ $generated@@54 ($generated@@20 ($generated@@21 $generated@@51) ($generated@@30 ($generated@@42 $generated@@25 $generated@@53) $generated@@54))))))))
 :weight 3
 :pattern ( ($generated@@20 ($generated@@21 $generated@@51) ($generated@@42 $generated@@25 $generated@@53)) ($generated@@22 $generated@@52))
))))
(assert (forall (($generated@@56 T@U) ($generated@@57 Int) ) (!  (=> (and (< 0 $generated@@57) (<= $generated@@57 ($generated@@27 $generated@@56))) (< ($generated@@55 ($generated@@30 $generated@@56 $generated@@57)) ($generated@@55 $generated@@56)))
 :pattern ( ($generated@@55 ($generated@@30 $generated@@56 $generated@@57)))
)))
(assert (forall (($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@T) ) (! (= ($generated@@58 ($generated@@48 $generated@@63 $generated@@60) $generated@@61 $generated@@62) ($generated@@59 $generated@@63 $generated@@60 $generated@@61 $generated@@62))
 :pattern ( ($generated@@58 ($generated@@48 $generated@@63 $generated@@60) $generated@@61 $generated@@62))
)))
(assert (forall (($generated@@65 T@U) ($generated@@66 Int) ($generated@@67 Int) ) (!  (=> (and (and (<= 0 $generated@@66) (<= 0 $generated@@67)) (< $generated@@67 (- ($generated@@27 $generated@@65) $generated@@66))) (= ($generated@@64 ($generated@@30 $generated@@65 $generated@@66) $generated@@67) ($generated@@64 $generated@@65 (+ $generated@@67 $generated@@66))))
 :weight 25
 :pattern ( ($generated@@64 ($generated@@30 $generated@@65 $generated@@66) $generated@@67))
)))
(assert (forall (($generated@@69 T@U) ) (!  (=> ($generated@@68 $generated@@69 $generated) (and (= ($generated@@48 $generated@@5 ($generated@@47 $generated@@5 $generated@@69)) $generated@@69) ($generated@@24 $generated@@5 ($generated@@47 $generated@@5 $generated@@69) $generated)))
 :pattern ( ($generated@@68 $generated@@69 $generated))
)))
(assert (forall (($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@T) ) (! (= ($generated@@68 ($generated@@48 $generated@@72 $generated@@70) $generated@@71) ($generated@@24 $generated@@72 $generated@@70 $generated@@71))
 :pattern ( ($generated@@68 ($generated@@48 $generated@@72 $generated@@70) $generated@@71))
)))
(assert (forall (($generated@@73 T@U) ) (! (<= 0 ($generated@@27 $generated@@73))
 :pattern ( ($generated@@27 $generated@@73))
)))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@U) ) (! (= ($generated@@59 $generated@@25 $generated@@74 ($generated@@26 $generated@@75) $generated@@76) (forall (($generated@@77 Int) ) (!  (=> (and (<= 0 $generated@@77) (< $generated@@77 ($generated@@27 $generated@@74))) ($generated@@58 ($generated@@64 $generated@@74 $generated@@77) $generated@@75 $generated@@76))
 :pattern ( ($generated@@64 $generated@@74 $generated@@77))
)))
 :pattern ( ($generated@@59 $generated@@25 $generated@@74 ($generated@@26 $generated@@75) $generated@@76))
)))
(assert (forall (($generated@@79 T@U) ) (! (= ($generated@@78 ($generated@@26 $generated@@79)) $generated@@79)
 :pattern ( ($generated@@26 $generated@@79))
)))
(assert (forall (($generated@@80 T@U) ) (! (= ($generated@@36 ($generated@@26 $generated@@80)) $generated@@1)
 :pattern ( ($generated@@26 $generated@@80))
)))
(assert (forall (($generated@@81 T@U) ($generated@@82 T@T) ) (! (= ($generated@@47 $generated@@82 ($generated@@48 $generated@@82 $generated@@81)) $generated@@81)
 :pattern ( ($generated@@48 $generated@@82 $generated@@81))
)))
(assert (forall (($generated@@83 T@U) ($generated@@84 T@U) ) (! (= ($generated@@20 ($generated@@21 $generated@@83) $generated@@84) ($generated@@20 $generated@@83 $generated@@84))
 :pattern ( ($generated@@20 ($generated@@21 $generated@@83) $generated@@84))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@96 T@T) ($generated@@97 T@T) ($generated@@98 T@T) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (! (= ($generated@@85 $generated@@96 $generated@@97 $generated@@98 ($generated@@92 $generated@@96 $generated@@97 $generated@@98 $generated@@100 $generated@@101 $generated@@102 $generated@@99) $generated@@101 $generated@@102) $generated@@99)
 :weight 0
)) (and (forall (($generated@@103 T@T) ($generated@@104 T@T) ($generated@@105 T@T) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (!  (or (= $generated@@108 $generated@@110) (= ($generated@@85 $generated@@103 $generated@@104 $generated@@105 ($generated@@92 $generated@@103 $generated@@104 $generated@@105 $generated@@107 $generated@@108 $generated@@109 $generated@@106) $generated@@110 $generated@@111) ($generated@@85 $generated@@103 $generated@@104 $generated@@105 $generated@@107 $generated@@110 $generated@@111)))
 :weight 0
)) (forall (($generated@@112 T@T) ($generated@@113 T@T) ($generated@@114 T@T) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (!  (or (= $generated@@118 $generated@@120) (= ($generated@@85 $generated@@112 $generated@@113 $generated@@114 ($generated@@92 $generated@@112 $generated@@113 $generated@@114 $generated@@116 $generated@@117 $generated@@118 $generated@@115) $generated@@119 $generated@@120) ($generated@@85 $generated@@112 $generated@@113 $generated@@114 $generated@@116 $generated@@119 $generated@@120)))
 :weight 0
)))) (= ($generated@@3 $generated@@86) 4)) (= ($generated@@3 $generated@@87) 5)) (forall (($generated@@121 T@T) ($generated@@122 T@T) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ) (! (= ($generated@@89 $generated@@121 $generated@@122 ($generated@@93 $generated@@121 $generated@@122 $generated@@124 $generated@@125 $generated@@123) $generated@@125) $generated@@123)
 :weight 0
))) (forall (($generated@@126 T@T) ($generated@@127 T@T) ($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ) (!  (or (= $generated@@130 $generated@@131) (= ($generated@@89 $generated@@126 $generated@@127 ($generated@@93 $generated@@126 $generated@@127 $generated@@129 $generated@@130 $generated@@128) $generated@@131) ($generated@@89 $generated@@126 $generated@@127 $generated@@129 $generated@@131)))
 :weight 0
))) (= ($generated@@3 $generated@@90) 6)) (forall (($generated@@132 T@T) ($generated@@133 T@T) ) (= ($generated@@3 ($generated@@91 $generated@@132 $generated@@133)) 7))) (forall (($generated@@134 T@T) ($generated@@135 T@T) ) (! (= ($generated@@94 ($generated@@91 $generated@@134 $generated@@135)) $generated@@134)
 :pattern ( ($generated@@91 $generated@@134 $generated@@135))
))) (forall (($generated@@136 T@T) ($generated@@137 T@T) ) (! (= ($generated@@95 ($generated@@91 $generated@@136 $generated@@137)) $generated@@137)
 :pattern ( ($generated@@91 $generated@@136 $generated@@137))
))))
(assert (forall (($generated@@138 T@U) ($generated@@139 T@U) ($generated@@140 T@U) ($generated@@141 Bool) ($generated@@142 T@U) ($generated@@143 T@U) ) (! (= ($generated@@8 ($generated@@85 $generated@@86 $generated@@87 $generated@@4 ($generated@@88 $generated@@138 $generated@@139 $generated@@140 $generated@@141) $generated@@142 $generated@@143))  (=> (and (or (not (= $generated@@142 $generated@@138)) (not true)) ($generated@@8 ($generated@@47 $generated@@4 ($generated@@89 $generated@@87 $generated@@90 ($generated@@89 $generated@@86 ($generated@@91 $generated@@87 $generated@@90) $generated@@139 $generated@@142) $generated@@140)))) $generated@@141))
 :pattern ( ($generated@@85 $generated@@86 $generated@@87 $generated@@4 ($generated@@88 $generated@@138 $generated@@139 $generated@@140 $generated@@141) $generated@@142 $generated@@143))
)))
(assert (forall (($generated@@144 T@U) ($generated@@145 T@U) ) (!  (=> ($generated@@68 $generated@@144 ($generated@@26 $generated@@145)) (and (= ($generated@@48 $generated@@25 ($generated@@47 $generated@@25 $generated@@144)) $generated@@144) ($generated@@24 $generated@@25 ($generated@@47 $generated@@25 $generated@@144) ($generated@@26 $generated@@145))))
 :pattern ( ($generated@@68 $generated@@144 ($generated@@26 $generated@@145)))
)))
(assert (forall (($generated@@146 T@U) ($generated@@147 Int) ($generated@@148 Int) ) (!  (=> (and (and (<= 0 $generated@@147) (<= $generated@@147 $generated@@148)) (< $generated@@148 ($generated@@27 $generated@@146))) (= ($generated@@64 ($generated@@30 $generated@@146 $generated@@147) (- $generated@@148 $generated@@147)) ($generated@@64 $generated@@146 $generated@@148)))
 :weight 25
 :pattern ( ($generated@@64 $generated@@146 $generated@@148) ($generated@@30 $generated@@146 $generated@@147))
)))
(assert (forall (($generated@@149 T@U) ($generated@@150 Int) ($generated@@151 Int) ) (!  (=> (and (and (<= 0 $generated@@150) (<= 0 $generated@@151)) (<= (+ $generated@@150 $generated@@151) ($generated@@27 $generated@@149))) (= ($generated@@30 ($generated@@30 $generated@@149 $generated@@150) $generated@@151) ($generated@@30 $generated@@149 (+ $generated@@150 $generated@@151))))
 :pattern ( ($generated@@30 ($generated@@30 $generated@@149 $generated@@150) $generated@@151))
)))
(assert (forall (($generated@@152 Int) ) (! (= ($generated@@48 $generated@@5 ($generated@@9 ($generated@@28 $generated@@152))) ($generated@@42 $generated@@90 ($generated@@48 $generated@@5 ($generated@@9 $generated@@152))))
 :pattern ( ($generated@@48 $generated@@5 ($generated@@9 ($generated@@28 $generated@@152))))
)))
(assert (forall (($generated@@153 T@U) ($generated@@154 T@T) ) (! (= ($generated@@48 $generated@@154 ($generated@@42 $generated@@154 $generated@@153)) ($generated@@42 $generated@@90 ($generated@@48 $generated@@154 $generated@@153)))
 :pattern ( ($generated@@48 $generated@@154 ($generated@@42 $generated@@154 $generated@@153)))
)))
(assert (forall (($generated@@155 T@U) ) (!  (=> (= ($generated@@27 $generated@@155) 0) (= $generated@@155 $generated@@37))
 :pattern ( ($generated@@27 $generated@@155))
)))
(assert (forall (($generated@@156 T@U) ($generated@@157 T@U) ) (! ($generated@@59 $generated@@5 $generated@@157 $generated $generated@@156)
 :pattern ( ($generated@@59 $generated@@5 $generated@@157 $generated $generated@@156))
)))
(assert (forall (($generated@@158 T@U) ($generated@@159 T@U) ) (! (= ($generated@@24 $generated@@25 $generated@@158 ($generated@@26 $generated@@159)) (forall (($generated@@160 Int) ) (!  (=> (and (<= 0 $generated@@160) (< $generated@@160 ($generated@@27 $generated@@158))) ($generated@@68 ($generated@@64 $generated@@158 $generated@@160) $generated@@159))
 :pattern ( ($generated@@64 $generated@@158 $generated@@160))
)))
 :pattern ( ($generated@@24 $generated@@25 $generated@@158 ($generated@@26 $generated@@159)))
)))
(assert (forall (($generated@@161 T@U) ) (! ($generated@@24 $generated@@5 $generated@@161 $generated)
 :pattern ( ($generated@@24 $generated@@5 $generated@@161 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@162 () T@U)
(declare-fun $generated@@163 () Int)
(declare-fun $generated@@164 () T@U)
(declare-fun $generated@@165 () T@U)
(declare-fun $generated@@166 () T@U)
(declare-fun $generated@@167 () T@U)
(declare-fun $generated@@168 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 13) (let (($generated@@169  (and (=> (= (ControlFlow 0 5) (- 0 7)) (or (and ($generated@@24 $generated@@5 ($generated@@9 (- (+ ($generated@@27 $generated@@162) 1) 1)) $generated) (and (< 0 (- (+ ($generated@@27 $generated@@162) 1) 1)) (<= (- (+ ($generated@@27 $generated@@162) 1) 1) ($generated@@27 $generated@@162)))) (or (and ($generated@@24 $generated@@5 ($generated@@9 ($generated@@28 (+ 0 1))) $generated) (and (< 0 (+ 0 1)) (<= ($generated@@28 (+ 0 1)) ($generated@@27 $generated@@162)))) (or (and ($generated@@24 $generated@@5 ($generated@@9 ($generated@@28 0)) $generated) (and (< 0 0) (<= ($generated@@28 0) ($generated@@27 $generated@@162)))) (exists (($generated@@170 Int) )  (and (< 0 $generated@@170) (<= $generated@@170 ($generated@@27 $generated@@162)))))))) (=> (or (and ($generated@@24 $generated@@5 ($generated@@9 (- (+ ($generated@@27 $generated@@162) 1) 1)) $generated) (and (< 0 (- (+ ($generated@@27 $generated@@162) 1) 1)) (<= (- (+ ($generated@@27 $generated@@162) 1) 1) ($generated@@27 $generated@@162)))) (or (and ($generated@@24 $generated@@5 ($generated@@9 ($generated@@28 (+ 0 1))) $generated) (and (< 0 (+ 0 1)) (<= ($generated@@28 (+ 0 1)) ($generated@@27 $generated@@162)))) (or (and ($generated@@24 $generated@@5 ($generated@@9 ($generated@@28 0)) $generated) (and (< 0 0) (<= ($generated@@28 0) ($generated@@27 $generated@@162)))) (exists (($generated@@171 Int) )  (and (< 0 $generated@@171) (<= $generated@@171 ($generated@@27 $generated@@162))))))) (=> (and (< 0 $generated@@163) (<= $generated@@163 ($generated@@27 $generated@@162))) (and (=> (= (ControlFlow 0 5) (- 0 6)) (and (<= 0 $generated@@163) (<= $generated@@163 ($generated@@27 $generated@@162)))) (=> (and (<= 0 $generated@@163) (<= $generated@@163 ($generated@@27 $generated@@162))) (=> (= $generated@@164 ($generated@@30 $generated@@162 $generated@@163)) (=> (and ($generated@@59 $generated@@25 $generated@@164 ($generated@@26 $generated) $generated@@165) (= (ControlFlow 0 5) (- 0 4))) (< ($generated@@55 $generated@@164) ($generated@@55 $generated@@162)))))))))))
(let (($generated@@172  (=> (and (<= $generated@@163 0) (= (ControlFlow 0 9) 5)) $generated@@169)))
(let (($generated@@173  (=> (and (< 0 $generated@@163) (= (ControlFlow 0 8) 5)) $generated@@169)))
(let (($generated@@174  (and (=> (= (ControlFlow 0 10) 8) $generated@@173) (=> (= (ControlFlow 0 10) 9) $generated@@172))))
(let (($generated@@175 true))
(let (($generated@@176  (=> (or (not (= ($generated@@27 $generated@@162) ($generated@@28 0))) (not true)) (and (=> (= (ControlFlow 0 11) 10) $generated@@174) (=> (= (ControlFlow 0 11) 3) $generated@@175)))))
(let (($generated@@177 true))
(let (($generated@@178 true))
(let (($generated@@179  (=> (= $generated@@166 ($generated@@88 $generated@@167 $generated@@165 $generated@@2 false)) (and (and (=> (= (ControlFlow 0 12) 1) $generated@@178) (=> (= (ControlFlow 0 12) 2) $generated@@177)) (=> (= (ControlFlow 0 12) 11) $generated@@176)))))
(let (($generated@@180  (=> (and (and (and ($generated@@22 $generated@@165) ($generated@@168 $generated@@165)) ($generated@@24 $generated@@25 $generated@@162 ($generated@@26 $generated))) (and (= 0 $generated@@19) (= (ControlFlow 0 13) 12))) $generated@@179)))
$generated@@180)))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
