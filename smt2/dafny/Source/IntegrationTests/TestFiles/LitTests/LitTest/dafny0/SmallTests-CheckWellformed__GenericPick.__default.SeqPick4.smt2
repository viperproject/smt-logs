(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 () Int)
(declare-fun $generated@@20 (T@U T@U) T@U)
(declare-fun $generated@@21 (T@U T@U) Bool)
(declare-fun $generated@@22 (T@T T@U T@U) Bool)
(declare-fun $generated@@23 () T@T)
(declare-fun $generated@@24 (T@U) T@U)
(declare-fun $generated@@25 (Int) Int)
(declare-fun $generated@@26 (T@U) Int)
(declare-fun $generated@@27 (T@U T@U) Bool)
(declare-fun $generated@@31 (T@U) T@U)
(declare-fun $generated@@32 () T@U)
(declare-fun $generated@@33 (T@U) Bool)
(declare-fun $generated@@34 (T@U T@U) Bool)
(declare-fun $generated@@35 (T@U T@U) Int)
(declare-fun $generated@@36 (T@U Int) T@U)
(declare-fun $generated@@43 (T@T T@U) T@U)
(declare-fun $generated@@46 (T@U T@U T@U) Bool)
(declare-fun $generated@@47 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@52 (T@T T@U) T@U)
(declare-fun $generated@@53 (T@T T@U) T@U)
(declare-fun $generated@@76 (T@U) T@U)
(declare-fun $generated@@81 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@82 () T@T)
(declare-fun $generated@@83 () T@T)
(declare-fun $generated@@84 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@85 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@86 () T@T)
(declare-fun $generated@@87 (T@T T@T) T@T)
(declare-fun $generated@@88 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@89 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@90 (T@T) T@T)
(declare-fun $generated@@91 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (= ($generated@@3 $generated@@23) 3))
(assert  (=> (<= 0 $generated@@19) (forall (($generated@@28 T@U) ($generated@@29 T@U) ) (!  (=> (or ($generated@@21 $generated@@28 $generated@@29) (and (< 0 $generated@@19) (and ($generated@@22 $generated@@23 $generated@@29 ($generated@@24 $generated@@28)) (exists (($generated@@30 Int) )  (and (<= ($generated@@25 0) $generated@@30) (< $generated@@30 ($generated@@26 $generated@@29))))))) ($generated@@27 ($generated@@20 $generated@@28 $generated@@29) $generated@@28))
 :pattern ( ($generated@@20 $generated@@28 $generated@@29))
))))
(assert (= ($generated@@31 $generated) $generated@@0))
(assert (= ($generated@@26 $generated@@32) 0))
(assert  (=> (<= 0 $generated@@19) (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (!  (=> (or ($generated@@21 $generated@@37 $generated@@39) (and (< 0 $generated@@19) (and (and ($generated@@33 $generated@@38) ($generated@@22 $generated@@23 $generated@@39 ($generated@@24 $generated@@37))) (exists (($generated@@40 Int) )  (and (<= ($generated@@25 0) $generated@@40) (< $generated@@40 ($generated@@26 $generated@@39))))))) (and ($generated@@34 $generated@@37 $generated@@39) (= ($generated@@20 $generated@@37 $generated@@39) (let (($generated@@41 ($generated@@35 $generated@@37 $generated@@39)))
($generated@@36 $generated@@39 $generated@@41)))))
 :pattern ( ($generated@@20 $generated@@37 $generated@@39) ($generated@@33 $generated@@38))
))))
(assert (forall (($generated@@42 Int) ) (! (= ($generated@@25 $generated@@42) $generated@@42)
 :pattern ( ($generated@@25 $generated@@42))
)))
(assert (forall (($generated@@44 T@U) ($generated@@45 T@T) ) (! (= ($generated@@43 $generated@@45 $generated@@44) $generated@@44)
 :pattern ( ($generated@@43 $generated@@45 $generated@@44))
)))
(assert  (=> (<= 0 $generated@@19) (forall (($generated@@48 T@U) ($generated@@49 T@U) ($generated@@50 T@U) ) (!  (=> (and (or ($generated@@21 $generated@@49 $generated@@50) (and (< 0 $generated@@19) (and (and ($generated@@22 $generated@@23 $generated@@50 ($generated@@24 $generated@@49)) ($generated@@47 $generated@@23 $generated@@50 ($generated@@24 $generated@@49) $generated@@48)) (exists (($generated@@51 Int) )  (and (<= ($generated@@25 0) $generated@@51) (< $generated@@51 ($generated@@26 $generated@@50))))))) ($generated@@33 $generated@@48)) ($generated@@46 ($generated@@20 $generated@@49 $generated@@50) $generated@@49 $generated@@48))
 :pattern ( ($generated@@46 ($generated@@20 $generated@@49 $generated@@50) $generated@@49 $generated@@48))
))))
(assert (forall (($generated@@54 T@U) ($generated@@55 T@T) ) (! (= ($generated@@53 $generated@@55 ($generated@@52 $generated@@55 $generated@@54)) $generated@@54)
 :pattern ( ($generated@@52 $generated@@55 $generated@@54))
)))
(assert (forall (($generated@@56 T@U) ($generated@@57 T@U) ) (!  (=> ($generated@@34 $generated@@56 $generated@@57) (and (<= ($generated@@25 0) ($generated@@35 $generated@@56 $generated@@57)) (< ($generated@@35 $generated@@56 $generated@@57) ($generated@@26 $generated@@57))))
 :pattern ( ($generated@@35 $generated@@56 $generated@@57))
)))
(assert (forall (($generated@@58 T@U) ($generated@@59 T@U) ($generated@@60 T@U) ($generated@@61 T@T) ) (! (= ($generated@@46 ($generated@@53 $generated@@61 $generated@@58) $generated@@59 $generated@@60) ($generated@@47 $generated@@61 $generated@@58 $generated@@59 $generated@@60))
 :pattern ( ($generated@@46 ($generated@@53 $generated@@61 $generated@@58) $generated@@59 $generated@@60))
)))
(assert  (=> (<= 0 $generated@@19) (forall (($generated@@62 T@U) ($generated@@63 T@U) ($generated@@64 T@U) ) (!  (=> (or ($generated@@21 $generated@@62 ($generated@@43 $generated@@23 $generated@@64)) (and (< 0 $generated@@19) (and (and ($generated@@33 $generated@@63) ($generated@@22 $generated@@23 $generated@@64 ($generated@@24 $generated@@62))) (exists (($generated@@65 Int) )  (and (<= ($generated@@25 0) $generated@@65) (< $generated@@65 ($generated@@26 ($generated@@43 $generated@@23 $generated@@64)))))))) (and ($generated@@34 $generated@@62 ($generated@@43 $generated@@23 $generated@@64)) (= ($generated@@20 $generated@@62 ($generated@@43 $generated@@23 $generated@@64)) (let (($generated@@66 ($generated@@35 $generated@@62 ($generated@@43 $generated@@23 $generated@@64))))
($generated@@36 ($generated@@43 $generated@@23 $generated@@64) $generated@@66)))))
 :weight 3
 :pattern ( ($generated@@20 $generated@@62 ($generated@@43 $generated@@23 $generated@@64)) ($generated@@33 $generated@@63))
))))
(assert (forall (($generated@@67 T@U) ) (!  (=> ($generated@@27 $generated@@67 $generated) (and (= ($generated@@53 $generated@@5 ($generated@@52 $generated@@5 $generated@@67)) $generated@@67) ($generated@@22 $generated@@5 ($generated@@52 $generated@@5 $generated@@67) $generated)))
 :pattern ( ($generated@@27 $generated@@67 $generated))
)))
(assert (forall (($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@T) ) (! (= ($generated@@27 ($generated@@53 $generated@@70 $generated@@68) $generated@@69) ($generated@@22 $generated@@70 $generated@@68 $generated@@69))
 :pattern ( ($generated@@27 ($generated@@53 $generated@@70 $generated@@68) $generated@@69))
)))
(assert (forall (($generated@@71 T@U) ) (! (<= 0 ($generated@@26 $generated@@71))
 :pattern ( ($generated@@26 $generated@@71))
)))
(assert (forall (($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@U) ) (! (= ($generated@@47 $generated@@23 $generated@@72 ($generated@@24 $generated@@73) $generated@@74) (forall (($generated@@75 Int) ) (!  (=> (and (<= 0 $generated@@75) (< $generated@@75 ($generated@@26 $generated@@72))) ($generated@@46 ($generated@@36 $generated@@72 $generated@@75) $generated@@73 $generated@@74))
 :pattern ( ($generated@@36 $generated@@72 $generated@@75))
)))
 :pattern ( ($generated@@47 $generated@@23 $generated@@72 ($generated@@24 $generated@@73) $generated@@74))
)))
(assert (forall (($generated@@77 T@U) ) (! (= ($generated@@76 ($generated@@24 $generated@@77)) $generated@@77)
 :pattern ( ($generated@@24 $generated@@77))
)))
(assert (forall (($generated@@78 T@U) ) (! (= ($generated@@31 ($generated@@24 $generated@@78)) $generated@@1)
 :pattern ( ($generated@@24 $generated@@78))
)))
(assert (forall (($generated@@79 T@U) ($generated@@80 T@T) ) (! (= ($generated@@52 $generated@@80 ($generated@@53 $generated@@80 $generated@@79)) $generated@@79)
 :pattern ( ($generated@@53 $generated@@80 $generated@@79))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@92 T@T) ($generated@@93 T@T) ($generated@@94 T@T) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ) (! (= ($generated@@81 $generated@@92 $generated@@93 $generated@@94 ($generated@@88 $generated@@92 $generated@@93 $generated@@94 $generated@@96 $generated@@97 $generated@@98 $generated@@95) $generated@@97 $generated@@98) $generated@@95)
 :weight 0
)) (and (forall (($generated@@99 T@T) ($generated@@100 T@T) ($generated@@101 T@T) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ) (!  (or (= $generated@@104 $generated@@106) (= ($generated@@81 $generated@@99 $generated@@100 $generated@@101 ($generated@@88 $generated@@99 $generated@@100 $generated@@101 $generated@@103 $generated@@104 $generated@@105 $generated@@102) $generated@@106 $generated@@107) ($generated@@81 $generated@@99 $generated@@100 $generated@@101 $generated@@103 $generated@@106 $generated@@107)))
 :weight 0
)) (forall (($generated@@108 T@T) ($generated@@109 T@T) ($generated@@110 T@T) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ) (!  (or (= $generated@@114 $generated@@116) (= ($generated@@81 $generated@@108 $generated@@109 $generated@@110 ($generated@@88 $generated@@108 $generated@@109 $generated@@110 $generated@@112 $generated@@113 $generated@@114 $generated@@111) $generated@@115 $generated@@116) ($generated@@81 $generated@@108 $generated@@109 $generated@@110 $generated@@112 $generated@@115 $generated@@116)))
 :weight 0
)))) (= ($generated@@3 $generated@@82) 4)) (= ($generated@@3 $generated@@83) 5)) (forall (($generated@@117 T@T) ($generated@@118 T@T) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ) (! (= ($generated@@85 $generated@@117 $generated@@118 ($generated@@89 $generated@@117 $generated@@118 $generated@@120 $generated@@121 $generated@@119) $generated@@121) $generated@@119)
 :weight 0
))) (forall (($generated@@122 T@T) ($generated@@123 T@T) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 T@U) ) (!  (or (= $generated@@126 $generated@@127) (= ($generated@@85 $generated@@122 $generated@@123 ($generated@@89 $generated@@122 $generated@@123 $generated@@125 $generated@@126 $generated@@124) $generated@@127) ($generated@@85 $generated@@122 $generated@@123 $generated@@125 $generated@@127)))
 :weight 0
))) (= ($generated@@3 $generated@@86) 6)) (forall (($generated@@128 T@T) ($generated@@129 T@T) ) (= ($generated@@3 ($generated@@87 $generated@@128 $generated@@129)) 7))) (forall (($generated@@130 T@T) ($generated@@131 T@T) ) (! (= ($generated@@90 ($generated@@87 $generated@@130 $generated@@131)) $generated@@130)
 :pattern ( ($generated@@87 $generated@@130 $generated@@131))
))) (forall (($generated@@132 T@T) ($generated@@133 T@T) ) (! (= ($generated@@91 ($generated@@87 $generated@@132 $generated@@133)) $generated@@133)
 :pattern ( ($generated@@87 $generated@@132 $generated@@133))
))))
(assert (forall (($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 Bool) ($generated@@138 T@U) ($generated@@139 T@U) ) (! (= ($generated@@8 ($generated@@81 $generated@@82 $generated@@83 $generated@@4 ($generated@@84 $generated@@134 $generated@@135 $generated@@136 $generated@@137) $generated@@138 $generated@@139))  (=> (and (or (not (= $generated@@138 $generated@@134)) (not true)) ($generated@@8 ($generated@@52 $generated@@4 ($generated@@85 $generated@@83 $generated@@86 ($generated@@85 $generated@@82 ($generated@@87 $generated@@83 $generated@@86) $generated@@135 $generated@@138) $generated@@136)))) $generated@@137))
 :pattern ( ($generated@@81 $generated@@82 $generated@@83 $generated@@4 ($generated@@84 $generated@@134 $generated@@135 $generated@@136 $generated@@137) $generated@@138 $generated@@139))
)))
(assert (forall (($generated@@140 T@U) ($generated@@141 T@U) ) (!  (=> ($generated@@27 $generated@@140 ($generated@@24 $generated@@141)) (and (= ($generated@@53 $generated@@23 ($generated@@52 $generated@@23 $generated@@140)) $generated@@140) ($generated@@22 $generated@@23 ($generated@@52 $generated@@23 $generated@@140) ($generated@@24 $generated@@141))))
 :pattern ( ($generated@@27 $generated@@140 ($generated@@24 $generated@@141)))
)))
(assert (forall (($generated@@142 Int) ) (! (= ($generated@@53 $generated@@5 ($generated@@9 ($generated@@25 $generated@@142))) ($generated@@43 $generated@@86 ($generated@@53 $generated@@5 ($generated@@9 $generated@@142))))
 :pattern ( ($generated@@53 $generated@@5 ($generated@@9 ($generated@@25 $generated@@142))))
)))
(assert (forall (($generated@@143 T@U) ($generated@@144 T@T) ) (! (= ($generated@@53 $generated@@144 ($generated@@43 $generated@@144 $generated@@143)) ($generated@@43 $generated@@86 ($generated@@53 $generated@@144 $generated@@143)))
 :pattern ( ($generated@@53 $generated@@144 ($generated@@43 $generated@@144 $generated@@143)))
)))
(assert (forall (($generated@@145 T@U) ) (!  (=> (= ($generated@@26 $generated@@145) 0) (= $generated@@145 $generated@@32))
 :pattern ( ($generated@@26 $generated@@145))
)))
(assert (forall (($generated@@146 T@U) ($generated@@147 T@U) ) (! ($generated@@47 $generated@@5 $generated@@147 $generated $generated@@146)
 :pattern ( ($generated@@47 $generated@@5 $generated@@147 $generated $generated@@146))
)))
(assert (forall (($generated@@148 T@U) ($generated@@149 T@U) ) (! (= ($generated@@22 $generated@@23 $generated@@148 ($generated@@24 $generated@@149)) (forall (($generated@@150 Int) ) (!  (=> (and (<= 0 $generated@@150) (< $generated@@150 ($generated@@26 $generated@@148))) ($generated@@27 ($generated@@36 $generated@@148 $generated@@150) $generated@@149))
 :pattern ( ($generated@@36 $generated@@148 $generated@@150))
)))
 :pattern ( ($generated@@22 $generated@@23 $generated@@148 ($generated@@24 $generated@@149)))
)))
(assert (forall (($generated@@151 T@U) ) (! ($generated@@22 $generated@@5 $generated@@151 $generated)
 :pattern ( ($generated@@22 $generated@@5 $generated@@151 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@152 () T@U)
(declare-fun $generated@@153 () Int)
(declare-fun $generated@@154 () Int)
(declare-fun $generated@@155 () T@U)
(declare-fun $generated@@156 () T@U)
(declare-fun $generated@@157 () T@U)
(declare-fun $generated@@158 (T@U) Bool)
(declare-fun $generated@@159 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 13) (let (($generated@@160  (and (=> (= (ControlFlow 0 4) (- 0 5)) (or (and ($generated@@22 $generated@@5 ($generated@@9 (- ($generated@@26 $generated@@152) 1)) $generated) (and (<= ($generated@@25 0) (- ($generated@@26 $generated@@152) 1)) (< (- ($generated@@26 $generated@@152) 1) ($generated@@26 $generated@@152)))) (or (and ($generated@@22 $generated@@5 ($generated@@9 ($generated@@25 0)) $generated) (and (<= ($generated@@25 0) ($generated@@25 0)) (< 0 ($generated@@26 $generated@@152)))) (or (and ($generated@@22 $generated@@5 ($generated@@9 ($generated@@25 0)) $generated) (and (<= ($generated@@25 0) ($generated@@25 0)) (< 0 ($generated@@26 $generated@@152)))) (exists (($generated@@161 Int) )  (and (<= ($generated@@25 0) $generated@@161) (< $generated@@161 ($generated@@26 $generated@@152)))))))) (=> (or (and ($generated@@22 $generated@@5 ($generated@@9 (- ($generated@@26 $generated@@152) 1)) $generated) (and (<= ($generated@@25 0) (- ($generated@@26 $generated@@152) 1)) (< (- ($generated@@26 $generated@@152) 1) ($generated@@26 $generated@@152)))) (or (and ($generated@@22 $generated@@5 ($generated@@9 ($generated@@25 0)) $generated) (and (<= ($generated@@25 0) ($generated@@25 0)) (< 0 ($generated@@26 $generated@@152)))) (or (and ($generated@@22 $generated@@5 ($generated@@9 ($generated@@25 0)) $generated) (and (<= ($generated@@25 0) ($generated@@25 0)) (< 0 ($generated@@26 $generated@@152)))) (exists (($generated@@162 Int) )  (and (<= ($generated@@25 0) $generated@@162) (< $generated@@162 ($generated@@26 $generated@@152))))))) (=> (and (and (<= ($generated@@25 0) $generated@@153) (< $generated@@153 ($generated@@26 $generated@@152))) (= (ControlFlow 0 4) (- 0 3))) (and (<= 0 $generated@@153) (< $generated@@153 ($generated@@26 $generated@@152))))))))
(let (($generated@@163  (=> (and (< $generated@@153 ($generated@@25 0)) (= (ControlFlow 0 7) 4)) $generated@@160)))
(let (($generated@@164  (=> (and (<= ($generated@@25 0) $generated@@153) (= (ControlFlow 0 6) 4)) $generated@@160)))
(let (($generated@@165  (and (=> (= (ControlFlow 0 8) 6) $generated@@164) (=> (= (ControlFlow 0 8) 7) $generated@@163))))
(let (($generated@@166 true))
(let (($generated@@167 true))
(let (($generated@@168  (=> (and (<= ($generated@@25 0) $generated@@154) (< $generated@@154 ($generated@@26 $generated@@152))) (and (and (=> (= (ControlFlow 0 9) 1) $generated@@167) (=> (= (ControlFlow 0 9) 8) $generated@@165)) (=> (= (ControlFlow 0 9) 2) $generated@@166)))))
(let (($generated@@169  (=> (and (< $generated@@154 ($generated@@25 0)) (= (ControlFlow 0 11) 9)) $generated@@168)))
(let (($generated@@170  (=> (and (<= ($generated@@25 0) $generated@@154) (= (ControlFlow 0 10) 9)) $generated@@168)))
(let (($generated@@171  (=> (= $generated@@155 ($generated@@84 $generated@@156 $generated@@157 $generated@@2 false)) (and (=> (= (ControlFlow 0 12) 10) $generated@@170) (=> (= (ControlFlow 0 12) 11) $generated@@169)))))
(let (($generated@@172  (=> (and (and (and ($generated@@33 $generated@@157) ($generated@@158 $generated@@157)) ($generated@@22 $generated@@23 $generated@@152 ($generated@@24 $generated@@159))) (and (= 0 $generated@@19) (= (ControlFlow 0 13) 12))) $generated@@171)))
$generated@@172))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
