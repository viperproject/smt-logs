(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 (Bool) T@U)
(declare-fun $generated@@6 (T@U) Bool)
(declare-fun $generated@@7 (Int) T@U)
(declare-fun $generated@@8 (T@U) Int)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@17 (T@U) Int)
(declare-fun $generated@@18 () T@U)
(declare-fun $generated@@19 (T@U T@U) Bool)
(declare-fun $generated@@20 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@21 () T@T)
(declare-fun $generated@@22 () T@T)
(declare-fun $generated@@23 () T@T)
(declare-fun $generated@@24 (T@T T@T) T@T)
(declare-fun $generated@@25 (T@T T@U) T@U)
(declare-fun $generated@@26 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@27 (T@T) T@T)
(declare-fun $generated@@28 (T@T) T@T)
(declare-fun $generated@@49 (T@U Int) T@U)
(declare-fun $generated@@52 (Int) Int)
(declare-fun $generated@@54 (T@T T@U) T@U)
(declare-fun $generated@@59 (T@U T@U) Bool)
(declare-fun $generated@@60 (T@U Int) T@U)
(declare-fun $generated@@64 (T@T T@U) T@U)
(declare-fun $generated@@67 (T@U) Int)
(declare-fun $generated@@70 (T@U T@U T@U) Bool)
(declare-fun $generated@@71 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@93 (T@U T@U) Bool)
(declare-fun $generated@@94 (T@T T@U T@U) Bool)
(declare-fun $generated@@99 () T@T)
(declare-fun $generated@@100 (T@U) T@U)
(declare-fun $generated@@105 (T@U) T@U)
(declare-fun $generated@@107 (T@U) T@U)
(declare-fun $generated@@111 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@112 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@113 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (forall (($generated@@11 Bool) ) (! (= ($generated@@6 ($generated@@5 $generated@@11)) $generated@@11)
 :pattern ( ($generated@@5 $generated@@11))
))) (forall (($generated@@12 T@U) ) (! (= ($generated@@5 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 Int) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))))
(assert (distinct $generated $generated@@0)
)
(assert (= ($generated@@17 $generated@@18) 0))
(assert  (and (and (and (and (and (and (and (forall (($generated@@29 T@T) ($generated@@30 T@T) ($generated@@31 T@U) ($generated@@32 T@U) ($generated@@33 T@U) ) (! (= ($generated@@20 $generated@@29 $generated@@30 ($generated@@26 $generated@@29 $generated@@30 $generated@@32 $generated@@33 $generated@@31) $generated@@33) $generated@@31)
 :weight 0
)) (forall (($generated@@34 T@T) ($generated@@35 T@T) ($generated@@36 T@U) ($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (!  (or (= $generated@@38 $generated@@39) (= ($generated@@20 $generated@@34 $generated@@35 ($generated@@26 $generated@@34 $generated@@35 $generated@@37 $generated@@38 $generated@@36) $generated@@39) ($generated@@20 $generated@@34 $generated@@35 $generated@@37 $generated@@39)))
 :weight 0
))) (= ($generated@@1 $generated@@21) 3)) (= ($generated@@1 $generated@@22) 4)) (= ($generated@@1 $generated@@23) 5)) (forall (($generated@@40 T@T) ($generated@@41 T@T) ) (= ($generated@@1 ($generated@@24 $generated@@40 $generated@@41)) 6))) (forall (($generated@@42 T@T) ($generated@@43 T@T) ) (! (= ($generated@@27 ($generated@@24 $generated@@42 $generated@@43)) $generated@@42)
 :pattern ( ($generated@@24 $generated@@42 $generated@@43))
))) (forall (($generated@@44 T@T) ($generated@@45 T@T) ) (! (= ($generated@@28 ($generated@@24 $generated@@44 $generated@@45)) $generated@@45)
 :pattern ( ($generated@@24 $generated@@44 $generated@@45))
))))
(assert (forall (($generated@@46 T@U) ($generated@@47 T@U) ) (!  (=> ($generated@@19 $generated@@46 $generated@@47) (forall (($generated@@48 T@U) ) (!  (=> ($generated@@6 ($generated@@25 $generated@@2 ($generated@@20 $generated@@21 $generated@@22 ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@46 $generated@@48) $generated@@0))) ($generated@@6 ($generated@@25 $generated@@2 ($generated@@20 $generated@@21 $generated@@22 ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@47 $generated@@48) $generated@@0))))
 :pattern ( ($generated@@20 $generated@@21 $generated@@22 ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@47 $generated@@48) $generated@@0))
)))
 :pattern ( ($generated@@19 $generated@@46 $generated@@47))
)))
(assert (forall (($generated@@50 T@U) ($generated@@51 Int) ) (!  (=> (= $generated@@51 0) (= ($generated@@49 $generated@@50 $generated@@51) $generated@@50))
 :pattern ( ($generated@@49 $generated@@50 $generated@@51))
)))
(assert (forall (($generated@@53 Int) ) (! (= ($generated@@52 $generated@@53) $generated@@53)
 :pattern ( ($generated@@52 $generated@@53))
)))
(assert (forall (($generated@@55 T@U) ($generated@@56 T@T) ) (! (= ($generated@@54 $generated@@56 $generated@@55) $generated@@55)
 :pattern ( ($generated@@54 $generated@@56 $generated@@55))
)))
(assert (forall (($generated@@57 T@U) ($generated@@58 Int) ) (!  (=> (and (<= 0 $generated@@58) (<= $generated@@58 ($generated@@17 $generated@@57))) (= ($generated@@17 ($generated@@49 $generated@@57 $generated@@58)) (- ($generated@@17 $generated@@57) $generated@@58)))
 :pattern ( ($generated@@17 ($generated@@49 $generated@@57 $generated@@58)))
)))
(assert (forall (($generated@@61 T@U) ($generated@@62 T@U) ) (! (= ($generated@@59 $generated@@61 $generated@@62)  (and (= ($generated@@17 $generated@@61) ($generated@@17 $generated@@62)) (forall (($generated@@63 Int) ) (!  (=> (and (<= 0 $generated@@63) (< $generated@@63 ($generated@@17 $generated@@61))) (= ($generated@@60 $generated@@61 $generated@@63) ($generated@@60 $generated@@62 $generated@@63)))
 :pattern ( ($generated@@60 $generated@@61 $generated@@63))
 :pattern ( ($generated@@60 $generated@@62 $generated@@63))
))))
 :pattern ( ($generated@@59 $generated@@61 $generated@@62))
)))
(assert (forall (($generated@@65 T@U) ($generated@@66 T@T) ) (! (= ($generated@@64 $generated@@66 ($generated@@25 $generated@@66 $generated@@65)) $generated@@65)
 :pattern ( ($generated@@25 $generated@@66 $generated@@65))
)))
(assert (forall (($generated@@68 T@U) ($generated@@69 Int) ) (!  (=> (and (< 0 $generated@@69) (<= $generated@@69 ($generated@@17 $generated@@68))) (< ($generated@@67 ($generated@@49 $generated@@68 $generated@@69)) ($generated@@67 $generated@@68)))
 :pattern ( ($generated@@67 ($generated@@49 $generated@@68 $generated@@69)))
)))
(assert (forall (($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@T) ) (! (= ($generated@@70 ($generated@@64 $generated@@75 $generated@@72) $generated@@73 $generated@@74) ($generated@@71 $generated@@75 $generated@@72 $generated@@73 $generated@@74))
 :pattern ( ($generated@@70 ($generated@@64 $generated@@75 $generated@@72) $generated@@73 $generated@@74))
)))
(assert (forall (($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ) (!  (=> ($generated@@19 $generated@@76 $generated@@77) (=> ($generated@@70 $generated@@78 $generated@@79 $generated@@76) ($generated@@70 $generated@@78 $generated@@79 $generated@@77)))
 :pattern ( ($generated@@19 $generated@@76 $generated@@77) ($generated@@70 $generated@@78 $generated@@79 $generated@@76))
)))
(assert (forall (($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@T) ) (!  (=> ($generated@@19 $generated@@80 $generated@@81) (=> ($generated@@71 $generated@@84 $generated@@82 $generated@@83 $generated@@80) ($generated@@71 $generated@@84 $generated@@82 $generated@@83 $generated@@81)))
 :pattern ( ($generated@@19 $generated@@80 $generated@@81) ($generated@@71 $generated@@84 $generated@@82 $generated@@83 $generated@@80))
)))
(assert (forall (($generated@@85 T@U) ($generated@@86 Int) ($generated@@87 Int) ) (!  (=> (and (and (<= 0 $generated@@86) (<= 0 $generated@@87)) (< $generated@@87 (- ($generated@@17 $generated@@85) $generated@@86))) (= ($generated@@60 ($generated@@49 $generated@@85 $generated@@86) $generated@@87) ($generated@@60 $generated@@85 (+ $generated@@87 $generated@@86))))
 :weight 25
 :pattern ( ($generated@@60 ($generated@@49 $generated@@85 $generated@@86) $generated@@87))
)))
(assert (forall (($generated@@88 T@U) ($generated@@89 T@U) ) (!  (=> ($generated@@59 $generated@@88 $generated@@89) (= $generated@@88 $generated@@89))
 :pattern ( ($generated@@59 $generated@@88 $generated@@89))
)))
(assert (forall (($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ) (!  (=> (or (not (= $generated@@90 $generated@@92)) (not true)) (=> (and ($generated@@19 $generated@@90 $generated@@91) ($generated@@19 $generated@@91 $generated@@92)) ($generated@@19 $generated@@90 $generated@@92)))
 :pattern ( ($generated@@19 $generated@@90 $generated@@91) ($generated@@19 $generated@@91 $generated@@92))
)))
(assert (forall (($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@T) ) (! (= ($generated@@93 ($generated@@64 $generated@@97 $generated@@95) $generated@@96) ($generated@@94 $generated@@97 $generated@@95 $generated@@96))
 :pattern ( ($generated@@93 ($generated@@64 $generated@@97 $generated@@95) $generated@@96))
)))
(assert (forall (($generated@@98 T@U) ) (! (<= 0 ($generated@@17 $generated@@98))
 :pattern ( ($generated@@17 $generated@@98))
)))
(assert (= ($generated@@1 $generated@@99) 7))
(assert (forall (($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ) (! (= ($generated@@71 $generated@@99 $generated@@101 ($generated@@100 $generated@@102) $generated@@103) (forall (($generated@@104 Int) ) (!  (=> (and (<= 0 $generated@@104) (< $generated@@104 ($generated@@17 $generated@@101))) ($generated@@70 ($generated@@60 $generated@@101 $generated@@104) $generated@@102 $generated@@103))
 :pattern ( ($generated@@60 $generated@@101 $generated@@104))
)))
 :pattern ( ($generated@@71 $generated@@99 $generated@@101 ($generated@@100 $generated@@102) $generated@@103))
)))
(assert (forall (($generated@@106 T@U) ) (! (= ($generated@@105 ($generated@@100 $generated@@106)) $generated@@106)
 :pattern ( ($generated@@100 $generated@@106))
)))
(assert (forall (($generated@@108 T@U) ) (! (= ($generated@@107 ($generated@@100 $generated@@108)) $generated)
 :pattern ( ($generated@@100 $generated@@108))
)))
(assert (forall (($generated@@109 T@U) ($generated@@110 T@T) ) (! (= ($generated@@25 $generated@@110 ($generated@@64 $generated@@110 $generated@@109)) $generated@@109)
 :pattern ( ($generated@@64 $generated@@110 $generated@@109))
)))
(assert  (and (forall (($generated@@114 T@T) ($generated@@115 T@T) ($generated@@116 T@T) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (= ($generated@@111 $generated@@114 $generated@@115 $generated@@116 ($generated@@113 $generated@@114 $generated@@115 $generated@@116 $generated@@118 $generated@@119 $generated@@120 $generated@@117) $generated@@119 $generated@@120) $generated@@117)
 :weight 0
)) (and (forall (($generated@@121 T@T) ($generated@@122 T@T) ($generated@@123 T@T) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 T@U) ) (!  (or (= $generated@@126 $generated@@128) (= ($generated@@111 $generated@@121 $generated@@122 $generated@@123 ($generated@@113 $generated@@121 $generated@@122 $generated@@123 $generated@@125 $generated@@126 $generated@@127 $generated@@124) $generated@@128 $generated@@129) ($generated@@111 $generated@@121 $generated@@122 $generated@@123 $generated@@125 $generated@@128 $generated@@129)))
 :weight 0
)) (forall (($generated@@130 T@T) ($generated@@131 T@T) ($generated@@132 T@T) ($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ) (!  (or (= $generated@@136 $generated@@138) (= ($generated@@111 $generated@@130 $generated@@131 $generated@@132 ($generated@@113 $generated@@130 $generated@@131 $generated@@132 $generated@@134 $generated@@135 $generated@@136 $generated@@133) $generated@@137 $generated@@138) ($generated@@111 $generated@@130 $generated@@131 $generated@@132 $generated@@134 $generated@@137 $generated@@138)))
 :weight 0
)))))
(assert (forall (($generated@@139 T@U) ($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 Bool) ($generated@@143 T@U) ($generated@@144 T@U) ) (! (= ($generated@@6 ($generated@@111 $generated@@23 $generated@@21 $generated@@2 ($generated@@112 $generated@@139 $generated@@140 $generated@@141 $generated@@142) $generated@@143 $generated@@144))  (=> (and (or (not (= $generated@@143 $generated@@139)) (not true)) ($generated@@6 ($generated@@25 $generated@@2 ($generated@@20 $generated@@21 $generated@@22 ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@140 $generated@@143) $generated@@141)))) $generated@@142))
 :pattern ( ($generated@@111 $generated@@23 $generated@@21 $generated@@2 ($generated@@112 $generated@@139 $generated@@140 $generated@@141 $generated@@142) $generated@@143 $generated@@144))
)))
(assert (forall (($generated@@145 T@U) ($generated@@146 T@U) ) (!  (=> ($generated@@93 $generated@@145 ($generated@@100 $generated@@146)) (and (= ($generated@@64 $generated@@99 ($generated@@25 $generated@@99 $generated@@145)) $generated@@145) ($generated@@94 $generated@@99 ($generated@@25 $generated@@99 $generated@@145) ($generated@@100 $generated@@146))))
 :pattern ( ($generated@@93 $generated@@145 ($generated@@100 $generated@@146)))
)))
(assert (forall (($generated@@147 T@U) ($generated@@148 Int) ($generated@@149 Int) ) (!  (=> (and (and (<= 0 $generated@@148) (<= $generated@@148 $generated@@149)) (< $generated@@149 ($generated@@17 $generated@@147))) (= ($generated@@60 ($generated@@49 $generated@@147 $generated@@148) (- $generated@@149 $generated@@148)) ($generated@@60 $generated@@147 $generated@@149)))
 :weight 25
 :pattern ( ($generated@@60 $generated@@147 $generated@@149) ($generated@@49 $generated@@147 $generated@@148))
)))
(assert (forall (($generated@@150 T@U) ($generated@@151 Int) ($generated@@152 Int) ) (!  (=> (and (and (<= 0 $generated@@151) (<= 0 $generated@@152)) (<= (+ $generated@@151 $generated@@152) ($generated@@17 $generated@@150))) (= ($generated@@49 ($generated@@49 $generated@@150 $generated@@151) $generated@@152) ($generated@@49 $generated@@150 (+ $generated@@151 $generated@@152))))
 :pattern ( ($generated@@49 ($generated@@49 $generated@@150 $generated@@151) $generated@@152))
)))
(assert (forall (($generated@@153 Int) ) (! (= ($generated@@64 $generated@@3 ($generated@@7 ($generated@@52 $generated@@153))) ($generated@@54 $generated@@22 ($generated@@64 $generated@@3 ($generated@@7 $generated@@153))))
 :pattern ( ($generated@@64 $generated@@3 ($generated@@7 ($generated@@52 $generated@@153))))
)))
(assert (forall (($generated@@154 T@U) ($generated@@155 T@T) ) (! (= ($generated@@64 $generated@@155 ($generated@@54 $generated@@155 $generated@@154)) ($generated@@54 $generated@@22 ($generated@@64 $generated@@155 $generated@@154)))
 :pattern ( ($generated@@64 $generated@@155 ($generated@@54 $generated@@155 $generated@@154)))
)))
(assert (forall (($generated@@156 T@U) ) (!  (=> (= ($generated@@17 $generated@@156) 0) (= $generated@@156 $generated@@18))
 :pattern ( ($generated@@17 $generated@@156))
)))
(assert (forall (($generated@@157 T@U) ($generated@@158 T@U) ) (! (= ($generated@@94 $generated@@99 $generated@@157 ($generated@@100 $generated@@158)) (forall (($generated@@159 Int) ) (!  (=> (and (<= 0 $generated@@159) (< $generated@@159 ($generated@@17 $generated@@157))) ($generated@@93 ($generated@@60 $generated@@157 $generated@@159) $generated@@158))
 :pattern ( ($generated@@60 $generated@@157 $generated@@159))
)))
 :pattern ( ($generated@@94 $generated@@99 $generated@@157 ($generated@@100 $generated@@158)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@160 () T@U)
(declare-fun $generated@@161 () T@U)
(declare-fun $generated@@162 () Bool)
(declare-fun $generated@@163 () T@U)
(declare-fun $generated@@164 () T@U)
(declare-fun $generated@@165 () T@U)
(declare-fun $generated@@166 () T@U)
(declare-fun $generated@@167 () T@U)
(declare-fun $generated@@168 (T@U) Bool)
(declare-fun $generated@@169 (T@U) Bool)
(declare-fun $generated@@170 () T@U)
(declare-fun $generated@@171 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 11) (let (($generated@@172  (=> (not ($generated@@59 $generated@@18 $generated@@160)) (and (=> (= (ControlFlow 0 5) (- 0 6)) (and (<= 0 ($generated@@52 1)) (<= ($generated@@52 1) ($generated@@17 $generated@@160)))) (=> (and (<= 0 ($generated@@52 1)) (<= ($generated@@52 1) ($generated@@17 $generated@@160))) (=> (and (= $generated@@161 ($generated@@49 $generated@@160 ($generated@@52 1))) (= (ControlFlow 0 5) (- 0 4))) (< ($generated@@67 $generated@@161) ($generated@@67 $generated@@160))))))))
(let (($generated@@173 true))
(let (($generated@@174  (=> $generated@@162 (and (=> (= (ControlFlow 0 7) 3) $generated@@173) (=> (= (ControlFlow 0 7) 5) $generated@@172)))))
(let (($generated@@175 true))
(let (($generated@@176  (and (=> (= (ControlFlow 0 8) 2) $generated@@175) (=> (= (ControlFlow 0 8) 7) $generated@@174))))
(let (($generated@@177 true))
(let (($generated@@178  (=> (and (and (and ($generated@@94 $generated@@99 $generated@@160 ($generated@@100 $generated@@163)) ($generated@@71 $generated@@99 $generated@@160 ($generated@@100 $generated@@163) $generated@@164)) (not false)) (and (and (forall (($generated@@179 T@U) ) (!  (=> (and (or (not (= $generated@@179 $generated@@165)) (not true)) ($generated@@6 ($generated@@25 $generated@@2 ($generated@@20 $generated@@21 $generated@@22 ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@164 $generated@@179) $generated@@0)))) (= ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@164 $generated@@179) ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@164 $generated@@179)))
 :pattern ( ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@164 $generated@@179))
)) ($generated@@19 $generated@@164 $generated@@164)) (and (forall (($generated@@180 T@U) ($generated@@181 T@U) ) (!  (=> (and (or (not (= $generated@@180 $generated@@165)) (not true)) ($generated@@6 ($generated@@25 $generated@@2 ($generated@@20 $generated@@21 $generated@@22 ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@164 $generated@@180) $generated@@0)))) (or (= ($generated@@20 $generated@@21 $generated@@22 ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@164 $generated@@180) $generated@@181) ($generated@@20 $generated@@21 $generated@@22 ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@164 $generated@@180) $generated@@181)) ($generated@@6 ($generated@@111 $generated@@23 $generated@@21 $generated@@2 $generated@@166 $generated@@180 $generated@@181))))
 :pattern ( ($generated@@20 $generated@@21 $generated@@22 ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@164 $generated@@180) $generated@@181))
)) (<= ($generated@@67 $generated@@160) ($generated@@67 $generated@@167))))) (and (=> (= (ControlFlow 0 9) 1) $generated@@177) (=> (= (ControlFlow 0 9) 8) $generated@@176)))))
(let (($generated@@182  (=> (and (= $generated@@166 ($generated@@112 $generated@@165 $generated@@164 $generated@@0 false)) (= (ControlFlow 0 10) 9)) $generated@@178)))
(let (($generated@@183  (=> (and (and ($generated@@168 $generated@@164) ($generated@@169 $generated@@164)) (and ($generated@@94 $generated@@99 $generated@@167 ($generated@@100 $generated@@163)) ($generated@@71 $generated@@99 $generated@@167 ($generated@@100 $generated@@163) $generated@@164))) (=> (and (and (and ($generated@@94 $generated@@99 $generated@@170 ($generated@@100 $generated@@163)) ($generated@@71 $generated@@99 $generated@@170 ($generated@@100 $generated@@163) $generated@@164)) true) (and (= 0 $generated@@171) (= (ControlFlow 0 11) 10))) $generated@@182))))
$generated@@183))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
