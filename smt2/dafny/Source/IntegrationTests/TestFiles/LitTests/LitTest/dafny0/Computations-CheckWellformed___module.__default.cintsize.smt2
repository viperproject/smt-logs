(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 (T@T) Int)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 () T@T)
(declare-fun $generated@@12 (Bool) T@U)
(declare-fun $generated@@13 (T@U) Bool)
(declare-fun $generated@@14 (Int) T@U)
(declare-fun $generated@@15 (T@U) Int)
(declare-fun $generated@@16 (Real) T@U)
(declare-fun $generated@@17 (T@U) Real)
(declare-fun $generated@@24 (T@U) T@U)
(declare-fun $generated@@25 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@26 () T@U)
(declare-fun $generated@@29 (T@U) T@U)
(declare-fun $generated@@30 () T@U)
(declare-fun $generated@@31 (T@T T@U T@U) Bool)
(declare-fun $generated@@32 () T@T)
(declare-fun $generated@@33 () T@U)
(declare-fun $generated@@34 (Int) Int)
(declare-fun $generated@@36 (T@T T@U) T@U)
(declare-fun $generated@@39 (T@U) Bool)
(declare-fun $generated@@41 (T@U) Bool)
(declare-fun $generated@@43 (T@T T@U) T@U)
(declare-fun $generated@@44 (T@T T@U) T@U)
(declare-fun $generated@@47 (Int T@U) T@U)
(declare-fun $generated@@53 () Int)
(declare-fun $generated@@54 (T@U T@U) Int)
(declare-fun $generated@@55 (T@U) Bool)
(declare-fun $generated@@59 (T@U) T@U)
(declare-fun $generated@@60 (T@U) T@U)
(declare-fun $generated@@67 (T@U) Int)
(declare-fun $generated@@74 (T@U) Int)
(declare-fun $generated@@79 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@80 () T@T)
(declare-fun $generated@@81 () T@T)
(declare-fun $generated@@82 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@83 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@84 () T@T)
(declare-fun $generated@@85 (T@T T@T) T@T)
(declare-fun $generated@@86 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@87 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@88 (T@T) T@T)
(declare-fun $generated@@89 (T@T) T@T)
(declare-fun $generated@@138 (T@U) Bool)
(declare-fun $generated@@143 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@8 $generated@@9) 0) (= ($generated@@8 $generated@@10) 1)) (= ($generated@@8 $generated@@11) 2)) (forall (($generated@@18 Bool) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 Real) ) (! (= ($generated@@17 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 T@U) ) (! (= ($generated@@16 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7)
)
(assert (= ($generated@@24 $generated) $generated@@0))
(assert (forall (($generated@@27 T@U) ($generated@@28 T@U) ) (! ($generated@@25 $generated@@10 $generated@@27 $generated@@26 $generated@@28)
 :pattern ( ($generated@@25 $generated@@10 $generated@@27 $generated@@26 $generated@@28))
)))
(assert (= ($generated@@29 $generated@@30) $generated@@4))
(assert (= ($generated@@8 $generated@@32) 3))
(assert ($generated@@31 $generated@@32 $generated@@30 $generated@@33))
(assert (forall (($generated@@35 Int) ) (! (= ($generated@@34 $generated@@35) $generated@@35)
 :pattern ( ($generated@@34 $generated@@35))
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@T) ) (! (= ($generated@@36 $generated@@38 $generated@@37) $generated@@37)
 :pattern ( ($generated@@36 $generated@@38 $generated@@37))
)))
(assert (forall (($generated@@40 T@U) ) (! (= ($generated@@39 $generated@@40) (= ($generated@@29 $generated@@40) $generated@@4))
 :pattern ( ($generated@@39 $generated@@40))
)))
(assert (forall (($generated@@42 T@U) ) (! (= ($generated@@41 $generated@@42) (= ($generated@@29 $generated@@42) $generated@@5))
 :pattern ( ($generated@@41 $generated@@42))
)))
(assert (forall (($generated@@45 T@U) ($generated@@46 T@T) ) (! (= ($generated@@44 $generated@@46 ($generated@@43 $generated@@46 $generated@@45)) $generated@@45)
 :pattern ( ($generated@@43 $generated@@46 $generated@@45))
)))
(assert (forall (($generated@@48 T@U) ) (!  (=> ($generated@@41 $generated@@48) (exists (($generated@@49 Int) ($generated@@50 T@U) ) (= $generated@@48 ($generated@@47 $generated@@49 $generated@@50))))
 :pattern ( ($generated@@41 $generated@@48))
)))
(assert (forall (($generated@@51 T@U) ) (!  (=> ($generated@@39 $generated@@51) (= $generated@@51 $generated@@30))
 :pattern ( ($generated@@39 $generated@@51))
)))
(assert (forall (($generated@@52 T@U) ) (! (= ($generated@@31 $generated@@10 $generated@@52 $generated@@26) (<= ($generated@@34 0) ($generated@@15 $generated@@52)))
 :pattern ( ($generated@@31 $generated@@10 $generated@@52 $generated@@26))
)))
(assert  (=> (<= 1 $generated@@53) (forall (($generated@@56 T@U) ($generated@@57 T@U) ) (!  (=> (or ($generated@@55 $generated@@57) (and (< 1 $generated@@53) ($generated@@31 $generated@@32 $generated@@57 $generated@@33))) (<= ($generated@@34 0) ($generated@@54 $generated@@56 $generated@@57)))
 :pattern ( ($generated@@54 $generated@@56 $generated@@57))
))))
(assert (forall (($generated@@58 T@U) ) (!  (=> ($generated@@31 $generated@@32 $generated@@58 $generated@@33) (or ($generated@@39 $generated@@58) ($generated@@41 $generated@@58)))
 :pattern ( ($generated@@41 $generated@@58) ($generated@@31 $generated@@32 $generated@@58 $generated@@33))
 :pattern ( ($generated@@39 $generated@@58) ($generated@@31 $generated@@32 $generated@@58 $generated@@33))
)))
(assert  (=> (<= 1 $generated@@53) (forall (($generated@@61 T@U) ($generated@@62 T@U) ) (!  (=> (or ($generated@@55 $generated@@62) (and (< 1 $generated@@53) ($generated@@31 $generated@@32 $generated@@62 $generated@@33))) (and (=> (not ($generated@@39 $generated@@62)) (let (($generated@@63 ($generated@@60 $generated@@62)))
($generated@@55 $generated@@63))) (= ($generated@@54 ($generated@@59 $generated@@61) $generated@@62) (ite ($generated@@39 $generated@@62) 0 (let (($generated@@64 ($generated@@60 $generated@@62)))
(+ 1 ($generated@@54 $generated@@61 $generated@@64)))))))
 :pattern ( ($generated@@54 ($generated@@59 $generated@@61) $generated@@62))
))))
(assert (forall (($generated@@65 Int) ($generated@@66 T@U) ) (! (= ($generated@@29 ($generated@@47 $generated@@65 $generated@@66)) $generated@@5)
 :pattern ( ($generated@@47 $generated@@65 $generated@@66))
)))
(assert (forall (($generated@@68 Int) ($generated@@69 T@U) ) (! (= ($generated@@67 ($generated@@47 $generated@@68 $generated@@69)) $generated@@68)
 :pattern ( ($generated@@47 $generated@@68 $generated@@69))
)))
(assert (forall (($generated@@70 Int) ($generated@@71 T@U) ) (! (= ($generated@@60 ($generated@@47 $generated@@70 $generated@@71)) $generated@@71)
 :pattern ( ($generated@@47 $generated@@70 $generated@@71))
)))
(assert (forall (($generated@@72 T@U) ($generated@@73 T@T) ) (! (= ($generated@@43 $generated@@73 ($generated@@44 $generated@@73 $generated@@72)) $generated@@72)
 :pattern ( ($generated@@44 $generated@@73 $generated@@72))
)))
(assert (forall (($generated@@75 Int) ($generated@@76 T@U) ) (! (< ($generated@@74 $generated@@76) ($generated@@74 ($generated@@47 $generated@@75 $generated@@76)))
 :pattern ( ($generated@@47 $generated@@75 $generated@@76))
)))
(assert (forall (($generated@@77 T@U) ($generated@@78 T@U) ) (! (= ($generated@@54 ($generated@@59 $generated@@77) $generated@@78) ($generated@@54 $generated@@77 $generated@@78))
 :pattern ( ($generated@@54 ($generated@@59 $generated@@77) $generated@@78))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@90 T@T) ($generated@@91 T@T) ($generated@@92 T@T) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ) (! (= ($generated@@79 $generated@@90 $generated@@91 $generated@@92 ($generated@@86 $generated@@90 $generated@@91 $generated@@92 $generated@@94 $generated@@95 $generated@@96 $generated@@93) $generated@@95 $generated@@96) $generated@@93)
 :weight 0
)) (and (forall (($generated@@97 T@T) ($generated@@98 T@T) ($generated@@99 T@T) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ) (!  (or (= $generated@@102 $generated@@104) (= ($generated@@79 $generated@@97 $generated@@98 $generated@@99 ($generated@@86 $generated@@97 $generated@@98 $generated@@99 $generated@@101 $generated@@102 $generated@@103 $generated@@100) $generated@@104 $generated@@105) ($generated@@79 $generated@@97 $generated@@98 $generated@@99 $generated@@101 $generated@@104 $generated@@105)))
 :weight 0
)) (forall (($generated@@106 T@T) ($generated@@107 T@T) ($generated@@108 T@T) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ) (!  (or (= $generated@@112 $generated@@114) (= ($generated@@79 $generated@@106 $generated@@107 $generated@@108 ($generated@@86 $generated@@106 $generated@@107 $generated@@108 $generated@@110 $generated@@111 $generated@@112 $generated@@109) $generated@@113 $generated@@114) ($generated@@79 $generated@@106 $generated@@107 $generated@@108 $generated@@110 $generated@@113 $generated@@114)))
 :weight 0
)))) (= ($generated@@8 $generated@@80) 4)) (= ($generated@@8 $generated@@81) 5)) (forall (($generated@@115 T@T) ($generated@@116 T@T) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ) (! (= ($generated@@83 $generated@@115 $generated@@116 ($generated@@87 $generated@@115 $generated@@116 $generated@@118 $generated@@119 $generated@@117) $generated@@119) $generated@@117)
 :weight 0
))) (forall (($generated@@120 T@T) ($generated@@121 T@T) ($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ) (!  (or (= $generated@@124 $generated@@125) (= ($generated@@83 $generated@@120 $generated@@121 ($generated@@87 $generated@@120 $generated@@121 $generated@@123 $generated@@124 $generated@@122) $generated@@125) ($generated@@83 $generated@@120 $generated@@121 $generated@@123 $generated@@125)))
 :weight 0
))) (= ($generated@@8 $generated@@84) 6)) (forall (($generated@@126 T@T) ($generated@@127 T@T) ) (= ($generated@@8 ($generated@@85 $generated@@126 $generated@@127)) 7))) (forall (($generated@@128 T@T) ($generated@@129 T@T) ) (! (= ($generated@@88 ($generated@@85 $generated@@128 $generated@@129)) $generated@@128)
 :pattern ( ($generated@@85 $generated@@128 $generated@@129))
))) (forall (($generated@@130 T@T) ($generated@@131 T@T) ) (! (= ($generated@@89 ($generated@@85 $generated@@130 $generated@@131)) $generated@@131)
 :pattern ( ($generated@@85 $generated@@130 $generated@@131))
))))
(assert (forall (($generated@@132 T@U) ($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 Bool) ($generated@@136 T@U) ($generated@@137 T@U) ) (! (= ($generated@@13 ($generated@@79 $generated@@80 $generated@@81 $generated@@9 ($generated@@82 $generated@@132 $generated@@133 $generated@@134 $generated@@135) $generated@@136 $generated@@137))  (=> (and (or (not (= $generated@@136 $generated@@132)) (not true)) ($generated@@13 ($generated@@43 $generated@@9 ($generated@@83 $generated@@81 $generated@@84 ($generated@@83 $generated@@80 ($generated@@85 $generated@@81 $generated@@84) $generated@@133 $generated@@136) $generated@@134)))) $generated@@135))
 :pattern ( ($generated@@79 $generated@@80 $generated@@81 $generated@@9 ($generated@@82 $generated@@132 $generated@@133 $generated@@134 $generated@@135) $generated@@136 $generated@@137))
)))
(assert (forall (($generated@@139 T@U) ($generated@@140 T@U) ) (!  (=> (and ($generated@@138 $generated@@140) (and ($generated@@41 $generated@@139) ($generated@@25 $generated@@32 $generated@@139 $generated@@33 $generated@@140))) ($generated@@25 $generated@@10 ($generated@@14 ($generated@@67 $generated@@139)) $generated $generated@@140))
 :pattern ( ($generated@@25 $generated@@10 ($generated@@14 ($generated@@67 $generated@@139)) $generated $generated@@140))
)))
(assert (forall (($generated@@141 T@U) ($generated@@142 T@U) ) (!  (=> (and ($generated@@138 $generated@@142) ($generated@@31 $generated@@32 $generated@@141 $generated@@33)) ($generated@@25 $generated@@32 $generated@@141 $generated@@33 $generated@@142))
 :pattern ( ($generated@@25 $generated@@32 $generated@@141 $generated@@33 $generated@@142))
)))
(assert (= ($generated@@24 $generated@@26) $generated@@2))
(assert (= ($generated@@143 $generated@@26) $generated@@6))
(assert (= ($generated@@24 $generated@@33) $generated@@3))
(assert (= ($generated@@143 $generated@@33) $generated@@7))
(assert (= $generated@@30 ($generated@@36 $generated@@32 $generated@@30)))
(assert  (=> (<= 1 $generated@@53) (forall (($generated@@144 T@U) ($generated@@145 T@U) ) (!  (=> (or ($generated@@55 ($generated@@36 $generated@@32 $generated@@145)) (and (< 1 $generated@@53) ($generated@@31 $generated@@32 $generated@@145 $generated@@33))) (and (=> (not ($generated@@13 ($generated@@36 $generated@@9 ($generated@@12 ($generated@@39 ($generated@@36 $generated@@32 $generated@@145)))))) (let (($generated@@146 ($generated@@36 $generated@@32 ($generated@@60 ($generated@@36 $generated@@32 $generated@@145)))))
($generated@@55 $generated@@146))) (= ($generated@@54 ($generated@@59 $generated@@144) ($generated@@36 $generated@@32 $generated@@145)) (ite ($generated@@39 ($generated@@36 $generated@@32 $generated@@145)) 0 (let (($generated@@147 ($generated@@36 $generated@@32 ($generated@@60 ($generated@@36 $generated@@32 $generated@@145)))))
($generated@@34 (+ 1 ($generated@@54 ($generated@@59 $generated@@144) $generated@@147))))))))
 :weight 3
 :pattern ( ($generated@@54 ($generated@@59 $generated@@144) ($generated@@36 $generated@@32 $generated@@145)))
))))
(assert (forall (($generated@@148 T@U) ($generated@@149 T@U) ) (!  (=> (and ($generated@@138 $generated@@149) (and ($generated@@41 $generated@@148) ($generated@@25 $generated@@32 $generated@@148 $generated@@33 $generated@@149))) ($generated@@25 $generated@@32 ($generated@@60 $generated@@148) $generated@@33 $generated@@149))
 :pattern ( ($generated@@25 $generated@@32 ($generated@@60 $generated@@148) $generated@@33 $generated@@149))
)))
(assert (forall (($generated@@150 Int) ($generated@@151 T@U) ) (! (= ($generated@@47 ($generated@@34 $generated@@150) ($generated@@36 $generated@@32 $generated@@151)) ($generated@@36 $generated@@32 ($generated@@47 $generated@@150 $generated@@151)))
 :pattern ( ($generated@@47 ($generated@@34 $generated@@150) ($generated@@36 $generated@@32 $generated@@151)))
)))
(assert (forall (($generated@@152 Int) ) (! (= ($generated@@44 $generated@@10 ($generated@@14 ($generated@@34 $generated@@152))) ($generated@@36 $generated@@84 ($generated@@44 $generated@@10 ($generated@@14 $generated@@152))))
 :pattern ( ($generated@@44 $generated@@10 ($generated@@14 ($generated@@34 $generated@@152))))
)))
(assert (forall (($generated@@153 T@U) ($generated@@154 T@T) ) (! (= ($generated@@44 $generated@@154 ($generated@@36 $generated@@154 $generated@@153)) ($generated@@36 $generated@@84 ($generated@@44 $generated@@154 $generated@@153)))
 :pattern ( ($generated@@44 $generated@@154 ($generated@@36 $generated@@154 $generated@@153)))
)))
(assert (forall (($generated@@155 Int) ($generated@@156 T@U) ) (! (= ($generated@@31 $generated@@32 ($generated@@47 $generated@@155 $generated@@156) $generated@@33)  (and ($generated@@31 $generated@@10 ($generated@@14 $generated@@155) $generated) ($generated@@31 $generated@@32 $generated@@156 $generated@@33)))
 :pattern ( ($generated@@31 $generated@@32 ($generated@@47 $generated@@155 $generated@@156) $generated@@33))
)))
(assert (forall (($generated@@157 T@U) ($generated@@158 T@U) ) (! ($generated@@25 $generated@@10 $generated@@158 $generated $generated@@157)
 :pattern ( ($generated@@25 $generated@@10 $generated@@158 $generated $generated@@157))
)))
(assert (forall (($generated@@159 T@U) ) (! ($generated@@31 $generated@@10 $generated@@159 $generated)
 :pattern ( ($generated@@31 $generated@@10 $generated@@159 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@160 () T@U)
(declare-fun $generated@@161 () Int)
(declare-fun $generated@@162 () T@U)
(declare-fun $generated@@163 () T@U)
(declare-fun $generated@@164 () T@U)
(declare-fun $generated@@165 () Int)
(declare-fun $generated@@166 () Int)
(declare-fun $generated@@167 () T@U)
(declare-fun $generated@@168 () T@U)
(declare-fun $generated@@169 () T@U)
(declare-fun $generated@@170 () T@U)
(declare-fun $generated@@171 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 10) (let (($generated@@172 true))
(let (($generated@@173  (=> (= $generated@@160 ($generated@@47 $generated@@161 $generated@@162)) (=> (and (and (and ($generated@@31 $generated@@32 $generated@@162 $generated@@33) (= $generated@@163 $generated@@162)) (and ($generated@@31 $generated@@32 $generated@@163 $generated@@33) (= $generated@@164 $generated@@163))) (and (and (= $generated@@165 $generated@@161) ($generated@@31 $generated@@10 ($generated@@14 $generated@@165) $generated)) (and (= $generated@@166 $generated@@165) ($generated@@25 $generated@@32 $generated@@164 $generated@@33 $generated@@167)))) (and (=> (= (ControlFlow 0 5) (- 0 6)) (< ($generated@@74 $generated@@164) ($generated@@74 $generated@@160))) (=> (< ($generated@@74 $generated@@164) ($generated@@74 $generated@@160)) (=> (and ($generated@@55 $generated@@164) (= (ControlFlow 0 5) (- 0 4))) ($generated@@31 $generated@@10 ($generated@@14 (+ 1 ($generated@@54 ($generated@@59 $generated@@168) $generated@@164))) $generated@@26))))))))
(let (($generated@@174  (=> (or (not (= $generated@@160 $generated@@30)) (not true)) (and (=> (= (ControlFlow 0 8) 5) $generated@@173) (=> (= (ControlFlow 0 8) 7) $generated@@172)))))
(let (($generated@@175  (=> (and (= $generated@@160 $generated@@30) (= (ControlFlow 0 3) (- 0 2))) ($generated@@31 $generated@@10 ($generated@@14 ($generated@@34 0)) $generated@@26))))
(let (($generated@@176 true))
(let (($generated@@177  (=> (= $generated@@169 ($generated@@82 $generated@@170 $generated@@167 $generated@@1 false)) (and (and (=> (= (ControlFlow 0 9) 1) $generated@@176) (=> (= (ControlFlow 0 9) 3) $generated@@175)) (=> (= (ControlFlow 0 9) 8) $generated@@174)))))
(let (($generated@@178  (=> (and (and (and ($generated@@138 $generated@@167) ($generated@@171 $generated@@167)) ($generated@@31 $generated@@32 $generated@@160 $generated@@33)) (and (= 1 $generated@@53) (= (ControlFlow 0 10) 9))) $generated@@177)))
$generated@@178))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
