(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._module.Tuple () T@U)
(declare-fun |##_module.Tuple.Pair| () T@U)
(declare-fun tytagFamily$Tuple () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.Rainbow (T@U T@U) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun DatatypeTypeType () T@T)
(declare-fun |_module.__default.Rainbow#canCall| (T@U T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun Tclass._module.Tuple (T@U T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun _module.Tuple._1 (T@U) T@U)
(declare-fun Mul (Int Int) Int)
(declare-fun _module.Tuple.Pair_q (T@U) Bool)
(declare-fun |_module.Tuple#Equal| (T@U T@U) Bool)
(declare-fun _module.Tuple._0 (T@U) T@U)
(declare-fun |#_module.Tuple.Pair| (T@U T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun LitInt (Int) Int)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun Tclass._module.Tuple_0 (T@U) T@U)
(declare-fun Tclass._module.Tuple_1 (T@U) T@U)
(declare-fun BoxRank (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun TagFamily (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt alloc Tagclass._module.Tuple |##_module.Tuple.Pair| tytagFamily$Tuple)
)
(assert (= (Tag TInt) TagInt))
(assert (= (Ctor DatatypeTypeType) 3))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module._default.Rainbow$X T@U) (|tup#0| T@U) ) (!  (=> (or (|_module.__default.Rainbow#canCall| _module._default.Rainbow$X (Lit DatatypeTypeType |tup#0|)) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |tup#0| (Tclass._module.Tuple _module._default.Rainbow$X TInt)))) (= (_module.__default.Rainbow _module._default.Rainbow$X (Lit DatatypeTypeType |tup#0|)) (let ((|right#1| (U_2_int ($Unbox intType (_module.Tuple._1 (Lit DatatypeTypeType |tup#0|))))))
(Mul |right#1| |right#1|))))
 :weight 3
 :pattern ( (_module.__default.Rainbow _module._default.Rainbow$X (Lit DatatypeTypeType |tup#0|)))
))))
(assert (forall ((_module.Tuple$T T@U) (_module.Tuple$U T@U) (d T@U) ) (!  (=> ($Is DatatypeTypeType d (Tclass._module.Tuple _module.Tuple$T _module.Tuple$U)) (_module.Tuple.Pair_q d))
 :pattern ( (_module.Tuple.Pair_q d) ($Is DatatypeTypeType d (Tclass._module.Tuple _module.Tuple$T _module.Tuple$U)))
)))
(assert (forall ((a T@U) (b T@U) ) (! (= (|_module.Tuple#Equal| a b)  (and (= (_module.Tuple._0 a) (_module.Tuple._0 b)) (= (_module.Tuple._1 a) (_module.Tuple._1 b))))
 :pattern ( (|_module.Tuple#Equal| a b))
)))
(assert (forall ((_module.Tuple$T@@0 T@U) (_module.Tuple$U@@0 T@U) (|a#14#0#0| T@U) (|a#14#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Tuple.Pair| |a#14#0#0| |a#14#1#0|) (Tclass._module.Tuple _module.Tuple$T@@0 _module.Tuple$U@@0))  (and ($IsBox |a#14#0#0| _module.Tuple$T@@0) ($IsBox |a#14#1#0| _module.Tuple$U@@0)))
 :pattern ( ($Is DatatypeTypeType (|#_module.Tuple.Pair| |a#14#0#0| |a#14#1#0|) (Tclass._module.Tuple _module.Tuple$T@@0 _module.Tuple$U@@0)))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) ) (! (= (|_module.Tuple#Equal| a@@0 b@@0) (= a@@0 b@@0))
 :pattern ( (|_module.Tuple#Equal| a@@0 b@@0))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((_module.Tuple$T@@1 T@U) (_module.Tuple$U@@1 T@U) (|a#14#0#0@@0| T@U) (|a#14#1#0@@0| T@U) ($h T@U) ) (!  (=> ($IsGoodHeap $h) (= ($IsAlloc DatatypeTypeType (|#_module.Tuple.Pair| |a#14#0#0@@0| |a#14#1#0@@0|) (Tclass._module.Tuple _module.Tuple$T@@1 _module.Tuple$U@@1) $h)  (and ($IsAllocBox |a#14#0#0@@0| _module.Tuple$T@@1 $h) ($IsAllocBox |a#14#1#0@@0| _module.Tuple$U@@1 $h))))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_module.Tuple.Pair| |a#14#0#0@@0| |a#14#1#0@@0|) (Tclass._module.Tuple _module.Tuple$T@@1 _module.Tuple$U@@1) $h))
)))
(assert (forall ((d@@0 T@U) ) (! (= (_module.Tuple.Pair_q d@@0) (= (DatatypeCtorId d@@0) |##_module.Tuple.Pair|))
 :pattern ( (_module.Tuple.Pair_q d@@0))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((d@@1 T@U) ) (!  (=> (_module.Tuple.Pair_q d@@1) (exists ((|a#13#0#0| T@U) (|a#13#1#0| T@U) ) (= d@@1 (|#_module.Tuple.Pair| |a#13#0#0| |a#13#1#0|))))
 :pattern ( (_module.Tuple.Pair_q d@@1))
)))
(assert (forall ((v T@U) (t T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v) t h) ($IsAlloc T@@1 v t h))
 :pattern ( ($IsAllocBox ($Box T@@1 v) t h))
)))
(assert (forall ((bx T@U) ) (!  (=> ($IsBox bx TInt) (and (= ($Box intType ($Unbox intType bx)) bx) ($Is intType ($Unbox intType bx) TInt)))
 :pattern ( ($IsBox bx TInt))
)))
(assert (forall ((v@@0 T@U) (t@@0 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@0) t@@0) ($Is T@@2 v@@0 t@@0))
 :pattern ( ($IsBox ($Box T@@2 v@@0) t@@0))
)))
(assert (forall ((_module.Tuple$T@@2 T@U) (_module.Tuple$U@@2 T@U) ) (! (= (Tclass._module.Tuple_0 (Tclass._module.Tuple _module.Tuple$T@@2 _module.Tuple$U@@2)) _module.Tuple$T@@2)
 :pattern ( (Tclass._module.Tuple _module.Tuple$T@@2 _module.Tuple$U@@2))
)))
(assert (forall ((_module.Tuple$T@@3 T@U) (_module.Tuple$U@@3 T@U) ) (! (= (Tclass._module.Tuple_1 (Tclass._module.Tuple _module.Tuple$T@@3 _module.Tuple$U@@3)) _module.Tuple$U@@3)
 :pattern ( (Tclass._module.Tuple _module.Tuple$T@@3 _module.Tuple$U@@3))
)))
(assert (forall ((|a#12#0#0| T@U) (|a#12#1#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Tuple.Pair| |a#12#0#0| |a#12#1#0|)) |##_module.Tuple.Pair|)
 :pattern ( (|#_module.Tuple.Pair| |a#12#0#0| |a#12#1#0|))
)))
(assert (forall ((|a#16#0#0| T@U) (|a#16#1#0| T@U) ) (! (= (_module.Tuple._0 (|#_module.Tuple.Pair| |a#16#0#0| |a#16#1#0|)) |a#16#0#0|)
 :pattern ( (|#_module.Tuple.Pair| |a#16#0#0| |a#16#1#0|))
)))
(assert (forall ((|a#18#0#0| T@U) (|a#18#1#0| T@U) ) (! (= (_module.Tuple._1 (|#_module.Tuple.Pair| |a#18#0#0| |a#18#1#0|)) |a#18#1#0|)
 :pattern ( (|#_module.Tuple.Pair| |a#18#0#0| |a#18#1#0|))
)))
(assert (forall ((x@@5 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@5)) x@@5)
 :pattern ( ($Box T@@3 x@@5))
)))
(assert (forall ((|a#17#0#0| T@U) (|a#17#1#0| T@U) ) (! (< (BoxRank |a#17#0#0|) (DtRank (|#_module.Tuple.Pair| |a#17#0#0| |a#17#1#0|)))
 :pattern ( (|#_module.Tuple.Pair| |a#17#0#0| |a#17#1#0|))
)))
(assert (forall ((|a#19#0#0| T@U) (|a#19#1#0| T@U) ) (! (< (BoxRank |a#19#1#0|) (DtRank (|#_module.Tuple.Pair| |a#19#0#0| |a#19#1#0|)))
 :pattern ( (|#_module.Tuple.Pair| |a#19#0#0| |a#19#1#0|))
)))
(assert (forall ((_module.Tuple$T@@4 T@U) (_module.Tuple$U@@4 T@U) (bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 (Tclass._module.Tuple _module.Tuple$T@@4 _module.Tuple$U@@4)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@0)) bx@@0) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@0) (Tclass._module.Tuple _module.Tuple$T@@4 _module.Tuple$U@@4))))
 :pattern ( ($IsBox bx@@0 (Tclass._module.Tuple _module.Tuple$T@@4 _module.Tuple$U@@4)))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0 t1 t2 (MapType0Store t0 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 4)) (= (Ctor FieldType) 5)) (forall ((t0@@0 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 (MapType1Store t0@@0 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :weight 0
))) (= (Ctor BoxType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module._default.Rainbow$X@@0 T@U) (|tup#0@@0| T@U) ) (!  (=> (or (|_module.__default.Rainbow#canCall| _module._default.Rainbow$X@@0 |tup#0@@0|) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |tup#0@@0| (Tclass._module.Tuple _module._default.Rainbow$X@@0 TInt)))) (= (_module.__default.Rainbow _module._default.Rainbow$X@@0 |tup#0@@0|) (let ((|right#0| (U_2_int ($Unbox intType (_module.Tuple._1 |tup#0@@0|)))))
(Mul |right#0| |right#0|))))
 :pattern ( (_module.__default.Rainbow _module._default.Rainbow$X@@0 |tup#0@@0|))
))))
(assert (forall ((_module.Tuple$T@@5 T@U) (_module.Tuple$U@@5 T@U) ) (!  (and (= (Tag (Tclass._module.Tuple _module.Tuple$T@@5 _module.Tuple$U@@5)) Tagclass._module.Tuple) (= (TagFamily (Tclass._module.Tuple _module.Tuple$T@@5 _module.Tuple$U@@5)) tytagFamily$Tuple))
 :pattern ( (Tclass._module.Tuple _module.Tuple$T@@5 _module.Tuple$U@@5))
)))
(assert (forall ((x@@6 Int) (y Int) ) (! (= (Mul x@@6 y) (* x@@6 y))
 :pattern ( (Mul x@@6 y))
)))
(assert (forall ((d@@2 T@U) ) (! (= (BoxRank ($Box DatatypeTypeType d@@2)) (DtRank d@@2))
 :pattern ( (BoxRank ($Box DatatypeTypeType d@@2)))
)))
(assert (forall ((d@@3 T@U) (_module.Tuple$T@@6 T@U) ($h@@0 T@U) ) (!  (=> (and ($IsGoodHeap $h@@0) (and (_module.Tuple.Pair_q d@@3) (exists ((_module.Tuple$U@@6 T@U) ) (! ($IsAlloc DatatypeTypeType d@@3 (Tclass._module.Tuple _module.Tuple$T@@6 _module.Tuple$U@@6) $h@@0)
 :pattern ( ($IsAlloc DatatypeTypeType d@@3 (Tclass._module.Tuple _module.Tuple$T@@6 _module.Tuple$U@@6) $h@@0))
)))) ($IsAllocBox (_module.Tuple._0 d@@3) _module.Tuple$T@@6 $h@@0))
 :pattern ( ($IsAllocBox (_module.Tuple._0 d@@3) _module.Tuple$T@@6 $h@@0))
)))
(assert (forall ((d@@4 T@U) (_module.Tuple$U@@7 T@U) ($h@@1 T@U) ) (!  (=> (and ($IsGoodHeap $h@@1) (and (_module.Tuple.Pair_q d@@4) (exists ((_module.Tuple$T@@7 T@U) ) (! ($IsAlloc DatatypeTypeType d@@4 (Tclass._module.Tuple _module.Tuple$T@@7 _module.Tuple$U@@7) $h@@1)
 :pattern ( ($IsAlloc DatatypeTypeType d@@4 (Tclass._module.Tuple _module.Tuple$T@@7 _module.Tuple$U@@7) $h@@1))
)))) ($IsAllocBox (_module.Tuple._1 d@@4) _module.Tuple$U@@7 $h@@1))
 :pattern ( ($IsAllocBox (_module.Tuple._1 d@@4) _module.Tuple$U@@7 $h@@1))
)))
(assert (forall ((|a#15#0#0| T@U) (|a#15#1#0| T@U) ) (! (= (|#_module.Tuple.Pair| (Lit BoxType |a#15#0#0|) (Lit BoxType |a#15#1#0|)) (Lit DatatypeTypeType (|#_module.Tuple.Pair| |a#15#0#0| |a#15#1#0|)))
 :pattern ( (|#_module.Tuple.Pair| (Lit BoxType |a#15#0#0|) (Lit BoxType |a#15#1#0|)))
)))
(assert (forall ((x@@7 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@7))) (Lit BoxType ($Box intType (int_2_U x@@7))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@7))))
)))
(assert (forall ((x@@8 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@8)) (Lit BoxType ($Box T@@4 x@@8)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@8)))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module._default.Rainbow$X@@1 T@U) (|tup#0@@1| T@U) ) (!  (=> (or (|_module.__default.Rainbow#canCall| _module._default.Rainbow$X@@1 |tup#0@@1|) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |tup#0@@1| (Tclass._module.Tuple _module._default.Rainbow$X@@1 TInt)))) (<= (LitInt 0) (_module.__default.Rainbow _module._default.Rainbow$X@@1 |tup#0@@1|)))
 :pattern ( (_module.__default.Rainbow _module._default.Rainbow$X@@1 |tup#0@@1|))
))))
(assert (forall ((h@@0 T@U) (v@@1 T@U) ) (! ($IsAlloc intType v@@1 TInt h@@0)
 :pattern ( ($IsAlloc intType v@@1 TInt h@@0))
)))
(assert (forall ((v@@2 T@U) ) (! ($Is intType v@@2 TInt)
 :pattern ( ($Is intType v@@2 TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun _module._default.Rainbow$X@@2 () T@U)
(declare-fun |tup#0@@2| () T@U)
(declare-fun |let#0#0#0| () T@U)
(declare-fun |left#Z#0@0| () T@U)
(declare-fun |right#Z#0@0| () Int)
(declare-fun $Heap () T@U)
(declare-fun $_ReadsFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 7) (let ((GeneratedUnifiedExit_correct  (=> (= (ControlFlow 0 4) (- 0 3)) (<= (LitInt 0) (_module.__default.Rainbow _module._default.Rainbow$X@@2 |tup#0@@2|)))))
(let ((anon5_Else_correct  (=> (= |let#0#0#0| |tup#0@@2|) (=> (and ($Is DatatypeTypeType |let#0#0#0| (Tclass._module.Tuple _module._default.Rainbow$X@@2 TInt)) (_module.Tuple.Pair_q |let#0#0#0|)) (=> (and (and (= (|#_module.Tuple.Pair| |left#Z#0@0| ($Box intType (int_2_U |right#Z#0@0|))) |let#0#0#0|) (= (_module.__default.Rainbow _module._default.Rainbow$X@@2 |tup#0@@2|) (Mul |right#Z#0@0| |right#Z#0@0|))) (and ($Is intType (int_2_U (_module.__default.Rainbow _module._default.Rainbow$X@@2 |tup#0@@2|)) TInt) (= (ControlFlow 0 5) 4))) GeneratedUnifiedExit_correct)))))
(let ((anon5_Then_correct  (=> (and ($IsAlloc DatatypeTypeType |tup#0@@2| (Tclass._module.Tuple _module._default.Rainbow$X@@2 TInt) $Heap) (= (ControlFlow 0 2) (- 0 1))) (or (|_module.Tuple#Equal| |tup#0@@2| |tup#0@@2|) (< (DtRank |tup#0@@2|) (DtRank |tup#0@@2|))))))
(let ((anon0_correct  (=> (= $_ReadsFrame@0 (|lambda#0| null $Heap alloc false)) (and (=> (= (ControlFlow 0 6) 2) anon5_Then_correct) (=> (= (ControlFlow 0 6) 5) anon5_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) ($Is DatatypeTypeType |tup#0@@2| (Tclass._module.Tuple _module._default.Rainbow$X@@2 TInt))) (and (= 1 $FunctionContextHeight) (= (ControlFlow 0 7) 6))) anon0_correct)))
PreconditionGeneratedEntry_correct))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
