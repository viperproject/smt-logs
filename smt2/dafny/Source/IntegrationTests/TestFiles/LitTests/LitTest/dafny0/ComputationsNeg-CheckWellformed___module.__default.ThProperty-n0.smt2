(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 (T@T) Int)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 () T@T)
(declare-fun $generated@@12 (Bool) T@U)
(declare-fun $generated@@13 (T@U) Bool)
(declare-fun $generated@@14 (Int) T@U)
(declare-fun $generated@@15 (T@U) Int)
(declare-fun $generated@@16 (Real) T@U)
(declare-fun $generated@@17 (T@U) Real)
(declare-fun $generated@@24 (T@U) T@U)
(declare-fun $generated@@25 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@26 () T@U)
(declare-fun $generated@@29 (T@U) T@U)
(declare-fun $generated@@30 () T@U)
(declare-fun $generated@@31 (T@T T@U T@U) Bool)
(declare-fun $generated@@32 () T@T)
(declare-fun $generated@@33 () T@U)
(declare-fun $generated@@34 (Int) Int)
(declare-fun $generated@@36 (T@T T@U) T@U)
(declare-fun $generated@@39 (T@U) Bool)
(declare-fun $generated@@41 (T@U) Bool)
(declare-fun $generated@@43 (T@T T@U) T@U)
(declare-fun $generated@@44 (T@T T@U) T@U)
(declare-fun $generated@@48 (T@U) T@U)
(declare-fun $generated@@52 () Int)
(declare-fun $generated@@53 (T@U Int T@U Int) Bool)
(declare-fun $generated@@54 (T@U) T@U)
(declare-fun $generated@@55 (Int T@U Int) Bool)
(declare-fun $generated@@56 (T@U) T@U)
(declare-fun $generated@@87 (T@U) Int)
(declare-fun $generated@@89 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@90 () T@T)
(declare-fun $generated@@91 () T@T)
(declare-fun $generated@@92 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@93 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@94 () T@T)
(declare-fun $generated@@95 (T@T T@T) T@T)
(declare-fun $generated@@96 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@97 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@98 (T@T) T@T)
(declare-fun $generated@@99 (T@T) T@T)
(declare-fun $generated@@148 (T@U) Bool)
(declare-fun $generated@@151 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@8 $generated@@9) 0) (= ($generated@@8 $generated@@10) 1)) (= ($generated@@8 $generated@@11) 2)) (forall (($generated@@18 Bool) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 Real) ) (! (= ($generated@@17 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 T@U) ) (! (= ($generated@@16 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7)
)
(assert (= ($generated@@24 $generated) $generated@@0))
(assert (forall (($generated@@27 T@U) ($generated@@28 T@U) ) (! ($generated@@25 $generated@@10 $generated@@27 $generated@@26 $generated@@28)
 :pattern ( ($generated@@25 $generated@@10 $generated@@27 $generated@@26 $generated@@28))
)))
(assert (= ($generated@@29 $generated@@30) $generated@@4))
(assert (= ($generated@@8 $generated@@32) 3))
(assert ($generated@@31 $generated@@32 $generated@@30 $generated@@33))
(assert (forall (($generated@@35 Int) ) (! (= ($generated@@34 $generated@@35) $generated@@35)
 :pattern ( ($generated@@34 $generated@@35))
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@T) ) (! (= ($generated@@36 $generated@@38 $generated@@37) $generated@@37)
 :pattern ( ($generated@@36 $generated@@38 $generated@@37))
)))
(assert (forall (($generated@@40 T@U) ) (! (= ($generated@@39 $generated@@40) (= ($generated@@29 $generated@@40) $generated@@4))
 :pattern ( ($generated@@39 $generated@@40))
)))
(assert (forall (($generated@@42 T@U) ) (! (= ($generated@@41 $generated@@42) (= ($generated@@29 $generated@@42) $generated@@5))
 :pattern ( ($generated@@41 $generated@@42))
)))
(assert (forall (($generated@@45 T@U) ($generated@@46 T@T) ) (! (= ($generated@@44 $generated@@46 ($generated@@43 $generated@@46 $generated@@45)) $generated@@45)
 :pattern ( ($generated@@43 $generated@@46 $generated@@45))
)))
(assert (forall (($generated@@47 T@U) ) (!  (=> ($generated@@39 $generated@@47) (= $generated@@47 $generated@@30))
 :pattern ( ($generated@@39 $generated@@47))
)))
(assert (forall (($generated@@49 T@U) ) (!  (=> ($generated@@41 $generated@@49) (exists (($generated@@50 T@U) ) (= $generated@@49 ($generated@@48 $generated@@50))))
 :pattern ( ($generated@@41 $generated@@49))
)))
(assert (forall (($generated@@51 T@U) ) (! (= ($generated@@31 $generated@@10 $generated@@51 $generated@@26) (<= ($generated@@34 0) ($generated@@15 $generated@@51)))
 :pattern ( ($generated@@31 $generated@@10 $generated@@51 $generated@@26))
)))
(assert  (=> (<= 1 $generated@@52) (forall (($generated@@57 T@U) ($generated@@58 Int) ($generated@@59 T@U) ($generated@@60 Int) ) (!  (=> (or ($generated@@55 $generated@@58 $generated@@59 $generated@@60) (and (< 1 $generated@@52) (and (and (<= ($generated@@34 0) $generated@@58) ($generated@@31 $generated@@32 $generated@@59 $generated@@33)) (<= ($generated@@34 0) $generated@@60)))) (and (=> (not ($generated@@39 $generated@@59)) (let (($generated@@61 ($generated@@56 $generated@@59)))
 (=> (> $generated@@58 0) (forall (($generated@@62 Int) ($generated@@63 Int) ) (!  (=> (and (<= ($generated@@34 0) $generated@@62) (<= ($generated@@34 0) $generated@@63)) (=> (= $generated@@63 (- $generated@@58 1)) ($generated@@55 $generated@@63 $generated@@61 $generated@@62)))
 :pattern ( ($generated@@53 $generated@@57 $generated@@63 $generated@@61 $generated@@62))
))))) (= ($generated@@53 ($generated@@54 $generated@@57) $generated@@58 $generated@@59 $generated@@60) (ite ($generated@@39 $generated@@59) true (let (($generated@@64 ($generated@@56 $generated@@59)))
 (and (> $generated@@58 0) (exists (($generated@@65 Int) ($generated@@66 Int) ) (!  (and (and (<= ($generated@@34 0) $generated@@65) (<= ($generated@@34 0) $generated@@66)) (and (= $generated@@66 (- $generated@@58 1)) ($generated@@53 $generated@@57 $generated@@66 $generated@@64 $generated@@65)))
 :pattern ( ($generated@@53 $generated@@57 $generated@@66 $generated@@64 $generated@@65))
))))))))
 :pattern ( ($generated@@53 ($generated@@54 $generated@@57) $generated@@58 $generated@@59 $generated@@60))
))))
(assert (forall (($generated@@67 T@U) ) (! (= ($generated@@31 $generated@@32 ($generated@@48 $generated@@67) $generated@@33) ($generated@@31 $generated@@32 $generated@@67 $generated@@33))
 :pattern ( ($generated@@31 $generated@@32 ($generated@@48 $generated@@67) $generated@@33))
)))
(assert  (=> (<= 1 $generated@@52) (forall (($generated@@68 T@U) ($generated@@69 Int) ($generated@@70 T@U) ($generated@@71 Int) ) (!  (=> (or ($generated@@55 ($generated@@34 $generated@@69) ($generated@@36 $generated@@32 $generated@@70) ($generated@@34 $generated@@71)) (and (< 1 $generated@@52) (and (and (<= ($generated@@34 0) $generated@@69) ($generated@@31 $generated@@32 $generated@@70 $generated@@33)) (<= ($generated@@34 0) $generated@@71)))) (and (=> (not ($generated@@13 ($generated@@36 $generated@@9 ($generated@@12 ($generated@@39 ($generated@@36 $generated@@32 $generated@@70)))))) (let (($generated@@72 ($generated@@36 $generated@@32 ($generated@@56 ($generated@@36 $generated@@32 $generated@@70)))))
 (=> ($generated@@13 ($generated@@36 $generated@@9 ($generated@@12 (> $generated@@69 0)))) (forall (($generated@@73 Int) ($generated@@74 Int) ) (!  (=> (and (<= ($generated@@34 0) $generated@@73) (<= ($generated@@34 0) $generated@@74)) (=> (= $generated@@74 ($generated@@34 (- $generated@@69 1))) ($generated@@55 $generated@@74 $generated@@72 $generated@@73)))
 :pattern ( ($generated@@53 ($generated@@54 $generated@@68) $generated@@74 $generated@@72 $generated@@73))
))))) (= ($generated@@53 ($generated@@54 $generated@@68) ($generated@@34 $generated@@69) ($generated@@36 $generated@@32 $generated@@70) ($generated@@34 $generated@@71)) (ite ($generated@@39 ($generated@@36 $generated@@32 $generated@@70)) true (let (($generated@@75 ($generated@@36 $generated@@32 ($generated@@56 ($generated@@36 $generated@@32 $generated@@70)))))
 (and (> $generated@@69 0) (exists (($generated@@76 Int) ($generated@@77 Int) ) (!  (and (and (<= ($generated@@34 0) $generated@@76) (<= ($generated@@34 0) $generated@@77)) (and (= $generated@@77 ($generated@@34 (- $generated@@69 1))) ($generated@@53 ($generated@@54 $generated@@68) $generated@@77 $generated@@75 $generated@@76)))
 :pattern ( ($generated@@53 ($generated@@54 $generated@@68) $generated@@77 $generated@@75 $generated@@76))
))))))))
 :weight 3
 :pattern ( ($generated@@53 ($generated@@54 $generated@@68) ($generated@@34 $generated@@69) ($generated@@36 $generated@@32 $generated@@70) ($generated@@34 $generated@@71)))
))))
(assert (forall (($generated@@78 T@U) ) (!  (=> ($generated@@31 $generated@@32 $generated@@78 $generated@@33) (or ($generated@@39 $generated@@78) ($generated@@41 $generated@@78)))
 :pattern ( ($generated@@41 $generated@@78) ($generated@@31 $generated@@32 $generated@@78 $generated@@33))
 :pattern ( ($generated@@39 $generated@@78) ($generated@@31 $generated@@32 $generated@@78 $generated@@33))
)))
(assert (forall (($generated@@79 T@U) ($generated@@80 Int) ($generated@@81 T@U) ($generated@@82 Int) ) (! (= ($generated@@53 ($generated@@54 $generated@@79) $generated@@80 $generated@@81 $generated@@82) ($generated@@53 $generated@@79 $generated@@80 $generated@@81 $generated@@82))
 :pattern ( ($generated@@53 ($generated@@54 $generated@@79) $generated@@80 $generated@@81 $generated@@82))
)))
(assert (forall (($generated@@83 T@U) ) (! (= ($generated@@29 ($generated@@48 $generated@@83)) $generated@@5)
 :pattern ( ($generated@@48 $generated@@83))
)))
(assert (forall (($generated@@84 T@U) ) (! (= ($generated@@56 ($generated@@48 $generated@@84)) $generated@@84)
 :pattern ( ($generated@@48 $generated@@84))
)))
(assert (forall (($generated@@85 T@U) ($generated@@86 T@T) ) (! (= ($generated@@43 $generated@@86 ($generated@@44 $generated@@86 $generated@@85)) $generated@@85)
 :pattern ( ($generated@@44 $generated@@86 $generated@@85))
)))
(assert (forall (($generated@@88 T@U) ) (! (< ($generated@@87 $generated@@88) ($generated@@87 ($generated@@48 $generated@@88)))
 :pattern ( ($generated@@48 $generated@@88))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@100 T@T) ($generated@@101 T@T) ($generated@@102 T@T) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (! (= ($generated@@89 $generated@@100 $generated@@101 $generated@@102 ($generated@@96 $generated@@100 $generated@@101 $generated@@102 $generated@@104 $generated@@105 $generated@@106 $generated@@103) $generated@@105 $generated@@106) $generated@@103)
 :weight 0
)) (and (forall (($generated@@107 T@T) ($generated@@108 T@T) ($generated@@109 T@T) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (!  (or (= $generated@@112 $generated@@114) (= ($generated@@89 $generated@@107 $generated@@108 $generated@@109 ($generated@@96 $generated@@107 $generated@@108 $generated@@109 $generated@@111 $generated@@112 $generated@@113 $generated@@110) $generated@@114 $generated@@115) ($generated@@89 $generated@@107 $generated@@108 $generated@@109 $generated@@111 $generated@@114 $generated@@115)))
 :weight 0
)) (forall (($generated@@116 T@T) ($generated@@117 T@T) ($generated@@118 T@T) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ) (!  (or (= $generated@@122 $generated@@124) (= ($generated@@89 $generated@@116 $generated@@117 $generated@@118 ($generated@@96 $generated@@116 $generated@@117 $generated@@118 $generated@@120 $generated@@121 $generated@@122 $generated@@119) $generated@@123 $generated@@124) ($generated@@89 $generated@@116 $generated@@117 $generated@@118 $generated@@120 $generated@@123 $generated@@124)))
 :weight 0
)))) (= ($generated@@8 $generated@@90) 4)) (= ($generated@@8 $generated@@91) 5)) (forall (($generated@@125 T@T) ($generated@@126 T@T) ($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 T@U) ) (! (= ($generated@@93 $generated@@125 $generated@@126 ($generated@@97 $generated@@125 $generated@@126 $generated@@128 $generated@@129 $generated@@127) $generated@@129) $generated@@127)
 :weight 0
))) (forall (($generated@@130 T@T) ($generated@@131 T@T) ($generated@@132 T@U) ($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ) (!  (or (= $generated@@134 $generated@@135) (= ($generated@@93 $generated@@130 $generated@@131 ($generated@@97 $generated@@130 $generated@@131 $generated@@133 $generated@@134 $generated@@132) $generated@@135) ($generated@@93 $generated@@130 $generated@@131 $generated@@133 $generated@@135)))
 :weight 0
))) (= ($generated@@8 $generated@@94) 6)) (forall (($generated@@136 T@T) ($generated@@137 T@T) ) (= ($generated@@8 ($generated@@95 $generated@@136 $generated@@137)) 7))) (forall (($generated@@138 T@T) ($generated@@139 T@T) ) (! (= ($generated@@98 ($generated@@95 $generated@@138 $generated@@139)) $generated@@138)
 :pattern ( ($generated@@95 $generated@@138 $generated@@139))
))) (forall (($generated@@140 T@T) ($generated@@141 T@T) ) (! (= ($generated@@99 ($generated@@95 $generated@@140 $generated@@141)) $generated@@141)
 :pattern ( ($generated@@95 $generated@@140 $generated@@141))
))))
(assert (forall (($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 Bool) ($generated@@146 T@U) ($generated@@147 T@U) ) (! (= ($generated@@13 ($generated@@89 $generated@@90 $generated@@91 $generated@@9 ($generated@@92 $generated@@142 $generated@@143 $generated@@144 $generated@@145) $generated@@146 $generated@@147))  (=> (and (or (not (= $generated@@146 $generated@@142)) (not true)) ($generated@@13 ($generated@@43 $generated@@9 ($generated@@93 $generated@@91 $generated@@94 ($generated@@93 $generated@@90 ($generated@@95 $generated@@91 $generated@@94) $generated@@143 $generated@@146) $generated@@144)))) $generated@@145))
 :pattern ( ($generated@@89 $generated@@90 $generated@@91 $generated@@9 ($generated@@92 $generated@@142 $generated@@143 $generated@@144 $generated@@145) $generated@@146 $generated@@147))
)))
(assert (forall (($generated@@149 T@U) ($generated@@150 T@U) ) (!  (=> (and ($generated@@148 $generated@@150) ($generated@@31 $generated@@32 $generated@@149 $generated@@33)) ($generated@@25 $generated@@32 $generated@@149 $generated@@33 $generated@@150))
 :pattern ( ($generated@@25 $generated@@32 $generated@@149 $generated@@33 $generated@@150))
)))
(assert (= ($generated@@24 $generated@@26) $generated@@2))
(assert (= ($generated@@151 $generated@@26) $generated@@6))
(assert (= ($generated@@24 $generated@@33) $generated@@3))
(assert (= ($generated@@151 $generated@@33) $generated@@7))
(assert (= $generated@@30 ($generated@@36 $generated@@32 $generated@@30)))
(assert (forall (($generated@@152 T@U) ($generated@@153 T@U) ) (!  (=> (and ($generated@@148 $generated@@153) (and ($generated@@41 $generated@@152) ($generated@@25 $generated@@32 $generated@@152 $generated@@33 $generated@@153))) ($generated@@25 $generated@@32 ($generated@@56 $generated@@152) $generated@@33 $generated@@153))
 :pattern ( ($generated@@25 $generated@@32 ($generated@@56 $generated@@152) $generated@@33 $generated@@153))
)))
(assert (forall (($generated@@154 Int) ) (! (= ($generated@@44 $generated@@10 ($generated@@14 ($generated@@34 $generated@@154))) ($generated@@36 $generated@@94 ($generated@@44 $generated@@10 ($generated@@14 $generated@@154))))
 :pattern ( ($generated@@44 $generated@@10 ($generated@@14 ($generated@@34 $generated@@154))))
)))
(assert (forall (($generated@@155 T@U) ) (! (= ($generated@@48 ($generated@@36 $generated@@32 $generated@@155)) ($generated@@36 $generated@@32 ($generated@@48 $generated@@155)))
 :pattern ( ($generated@@48 ($generated@@36 $generated@@32 $generated@@155)))
)))
(assert (forall (($generated@@156 T@U) ($generated@@157 T@T) ) (! (= ($generated@@44 $generated@@157 ($generated@@36 $generated@@157 $generated@@156)) ($generated@@36 $generated@@94 ($generated@@44 $generated@@157 $generated@@156)))
 :pattern ( ($generated@@44 $generated@@157 ($generated@@36 $generated@@157 $generated@@156)))
)))
(assert (forall (($generated@@158 T@U) ($generated@@159 T@U) ) (! ($generated@@25 $generated@@9 $generated@@159 $generated $generated@@158)
 :pattern ( ($generated@@25 $generated@@9 $generated@@159 $generated $generated@@158))
)))
(assert (forall (($generated@@160 T@U) ) (! ($generated@@31 $generated@@9 $generated@@160 $generated)
 :pattern ( ($generated@@31 $generated@@9 $generated@@160 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@161 () Int)
(declare-fun $generated@@162 () Int)
(declare-fun $generated@@163 () T@U)
(declare-fun $generated@@164 () T@U)
(declare-fun $generated@@165 () Int)
(declare-fun $generated@@166 () Int)
(declare-fun $generated@@167 () T@U)
(declare-fun $generated@@168 () T@U)
(declare-fun $generated@@169 () T@U)
(declare-fun $generated@@170 () T@U)
(declare-fun $generated@@171 () T@U)
(declare-fun $generated@@172 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 17) (let (($generated@@173 true))
(let (($generated@@174  (=> (and (or (not (= $generated@@161 (- $generated@@162 1))) (not true)) (= (ControlFlow 0 11) 4)) $generated@@173)))
(let (($generated@@175  (=> (and (and (= $generated@@161 (- $generated@@162 1)) ($generated@@25 $generated@@10 ($generated@@14 $generated@@161) $generated@@26 $generated@@163)) (and ($generated@@25 $generated@@32 $generated@@164 $generated@@33 $generated@@163) ($generated@@25 $generated@@10 ($generated@@14 $generated@@165) $generated@@26 $generated@@163))) (and (=> (= (ControlFlow 0 7) (- 0 10)) (or (<= 0 $generated@@162) (= $generated@@161 $generated@@162))) (=> (or (<= 0 $generated@@162) (= $generated@@161 $generated@@162)) (and (=> (= (ControlFlow 0 7) (- 0 9)) (or (or (or (<= 0 $generated@@166) (< $generated@@161 $generated@@162)) (< ($generated@@87 $generated@@164) ($generated@@87 $generated@@167))) (= $generated@@165 $generated@@166))) (=> (or (or (or (<= 0 $generated@@166) (< $generated@@161 $generated@@162)) (< ($generated@@87 $generated@@164) ($generated@@87 $generated@@167))) (= $generated@@165 $generated@@166)) (and (=> (= (ControlFlow 0 7) (- 0 8)) (or (< $generated@@161 $generated@@162) (and (= $generated@@161 $generated@@162) (or (< ($generated@@87 $generated@@164) ($generated@@87 $generated@@167)) (and (= ($generated@@87 $generated@@164) ($generated@@87 $generated@@167)) (< $generated@@165 $generated@@166)))))) (=> (or (< $generated@@161 $generated@@162) (and (= $generated@@161 $generated@@162) (or (< ($generated@@87 $generated@@164) ($generated@@87 $generated@@167)) (and (= ($generated@@87 $generated@@164) ($generated@@87 $generated@@167)) (< $generated@@165 $generated@@166))))) (=> (and ($generated@@55 $generated@@161 $generated@@164 $generated@@165) (= (ControlFlow 0 7) 4)) $generated@@173))))))))))
(let (($generated@@176  (=> (and (<= ($generated@@34 0) $generated@@165) (<= ($generated@@34 0) $generated@@161)) (and (=> (= (ControlFlow 0 12) 7) $generated@@175) (=> (= (ControlFlow 0 12) 11) $generated@@174)))))
(let (($generated@@177  (=> (and (not (and (<= ($generated@@34 0) $generated@@165) (<= ($generated@@34 0) $generated@@161))) (= (ControlFlow 0 6) 4)) $generated@@173)))
(let (($generated@@178  (=> (> $generated@@162 0) (and (=> (= (ControlFlow 0 13) 12) $generated@@176) (=> (= (ControlFlow 0 13) 6) $generated@@177)))))
(let (($generated@@179  (=> (and (>= 0 $generated@@162) (= (ControlFlow 0 5) 4)) $generated@@173)))
(let (($generated@@180  (=> (= $generated@@167 ($generated@@48 $generated@@168)) (=> (and (and ($generated@@31 $generated@@32 $generated@@168 $generated@@33) (= $generated@@169 $generated@@168)) (and ($generated@@31 $generated@@32 $generated@@169 $generated@@33) (= $generated@@164 $generated@@169))) (and (=> (= (ControlFlow 0 14) 13) $generated@@178) (=> (= (ControlFlow 0 14) 5) $generated@@179))))))
(let (($generated@@181 true))
(let (($generated@@182  (=> (or (not (= $generated@@167 $generated@@30)) (not true)) (and (=> (= (ControlFlow 0 15) 14) $generated@@180) (=> (= (ControlFlow 0 15) 3) $generated@@181)))))
(let (($generated@@183 true))
(let (($generated@@184 true))
(let (($generated@@185  (=> (= $generated@@170 ($generated@@92 $generated@@171 $generated@@163 $generated@@1 false)) (and (and (=> (= (ControlFlow 0 16) 1) $generated@@184) (=> (= (ControlFlow 0 16) 2) $generated@@183)) (=> (= (ControlFlow 0 16) 15) $generated@@182)))))
(let (($generated@@186  (=> (and (and (and ($generated@@148 $generated@@163) ($generated@@172 $generated@@163)) (<= ($generated@@34 0) $generated@@162)) (and (and ($generated@@31 $generated@@32 $generated@@167 $generated@@33) (<= ($generated@@34 0) $generated@@166)) (and (= 1 $generated@@52) (= (ControlFlow 0 17) 16)))) $generated@@185)))
$generated@@186)))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
