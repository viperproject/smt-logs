(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun LitInt (Int) Int)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun Mod (Int Int) Int)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((x@@5 T@U) (T@@1 T@T) ) (! (= ($Unbox T@@1 ($Box T@@1 x@@5)) x@@5)
 :pattern ( ($Box T@@1 x@@5))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0 t1 t2 (MapType0Store t0 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 3)) (= (Ctor FieldType) 4)) (forall ((t0@@0 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 (MapType1Store t0@@0 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :weight 0
))) (= (Ctor BoxType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 6))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((x@@6 Int) (y Int) ) (! (= (Mod x@@6 y) (mod x@@6 y))
 :pattern ( (Mod x@@6 y))
)))
(assert (forall ((x@@7 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@7))) (Lit BoxType ($Box intType (int_2_U x@@7))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@7))))
)))
(assert (forall ((x@@8 T@U) (T@@2 T@T) ) (! (= ($Box T@@2 (Lit T@@2 x@@8)) (Lit BoxType ($Box T@@2 x@@8)))
 :pattern ( ($Box T@@2 (Lit T@@2 x@@8)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $Heap@4 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun $Heap () T@U)
(declare-fun $Heap@3 () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun alloc () T@U)
(declare-fun $FunctionContextHeight () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 46) (let ((anon6_correct  (and (=> (= (ControlFlow 0 38) (- 0 41)) (U_2_bool (Lit boolType (bool_2_U (< 5 6))))) (and (=> (= (ControlFlow 0 38) (- 0 40)) (<= (LitInt 6) (LitInt (+ 5 1)))) (=> (and (< 5 6) (<= (LitInt 6) (LitInt (+ 5 1)))) (=> (and (and ($IsGoodHeap $Heap@4) ($IsHeapAnchor $Heap@4)) (= $Heap $Heap@4)) (and (=> (= (ControlFlow 0 38) (- 0 39)) (U_2_bool (Lit boolType (bool_2_U (< 6 7))))) (=> (U_2_bool (Lit boolType (bool_2_U (< 6 7)))) (=> (= (ControlFlow 0 38) (- 0 37)) (U_2_bool (Lit boolType (bool_2_U (< 5 7)))))))))))))
(let ((anon33_Else_correct  (=> (and (not (U_2_bool (Lit boolType (bool_2_U (< 5 6))))) (= (ControlFlow 0 43) 38)) anon6_correct)))
(let ((anon33_Then_correct  (=> (and (U_2_bool (Lit boolType (bool_2_U (< 5 6)))) (= (ControlFlow 0 42) 38)) anon6_correct)))
(let ((anon32_Then_correct  (and (=> (= (ControlFlow 0 44) 42) anon33_Then_correct) (=> (= (ControlFlow 0 44) 43) anon33_Else_correct))))
(let ((anon41_Else_correct  (and (=> (= (ControlFlow 0 32) (- 0 33)) (U_2_bool (Lit boolType (bool_2_U (< 42 100))))) (=> (U_2_bool (Lit boolType (bool_2_U (< 42 100)))) (=> (= (ControlFlow 0 32) (- 0 31)) (<= (LitInt 19) (LitInt 23)))))))
(let ((anon41_Then_correct true))
(let ((anon40_Then_correct  (=> (and (and ($IsGoodHeap $Heap@3) ($IsHeapAnchor $Heap@3)) (= $Heap $Heap@3)) (and (=> (= (ControlFlow 0 34) (- 0 35)) (= (LitInt (+ 19 23)) (LitInt 42))) (=> (= (LitInt (+ 19 23)) (LitInt 42)) (and (=> (= (ControlFlow 0 34) 30) anon41_Then_correct) (=> (= (ControlFlow 0 34) 32) anon41_Else_correct)))))))
(let ((anon44_Else_correct  (=> (and (U_2_bool (Lit boolType (bool_2_U (< 71 73)))) (= (ControlFlow 0 28) (- 0 27))) (<= (LitInt 23) (LitInt 29)))))
(let ((anon44_Then_correct  (and (=> (= (ControlFlow 0 24) (- 0 26)) (or (not (= (LitInt 19) 0)) (not true))) (and (=> (= (ControlFlow 0 24) (- 0 25)) (U_2_bool (Lit boolType (bool_2_U  (or (not (= (Mod 71 (LitInt 19)) 0)) (not true)))))) (=> (U_2_bool (Lit boolType (bool_2_U  (or (not (= (Mod 71 (LitInt 19)) 0)) (not true))))) (=> (= (ControlFlow 0 24) (- 0 23)) (U_2_bool (Lit boolType (bool_2_U (< 71 73))))))))))
(let ((anon43_Then_correct true))
(let ((anon42_Then_correct  (and (and (=> (= (ControlFlow 0 29) 22) anon43_Then_correct) (=> (= (ControlFlow 0 29) 24) anon44_Then_correct)) (=> (= (ControlFlow 0 29) 28) anon44_Else_correct))))
(let ((anon48_Else_correct  (=> (and (U_2_bool (Lit boolType (bool_2_U (< 311 331)))) (= (ControlFlow 0 20) (- 0 19))) (<= (LitInt 29) (LitInt 31)))))
(let ((anon48_Then_correct  (=> (= (ControlFlow 0 18) (- 0 17)) (U_2_bool (Lit boolType (bool_2_U (< 313 331)))))))
(let ((anon47_Then_correct  (=> (= (ControlFlow 0 16) (- 0 15)) (U_2_bool (Lit boolType (bool_2_U (< 311 313)))))))
(let ((anon46_Then_correct true))
(let ((anon45_Then_correct  (and (and (and (=> (= (ControlFlow 0 21) 14) anon46_Then_correct) (=> (= (ControlFlow 0 21) 16) anon47_Then_correct)) (=> (= (ControlFlow 0 21) 18) anon48_Then_correct)) (=> (= (ControlFlow 0 21) 20) anon48_Else_correct))))
(let ((anon45_Else_correct true))
(let ((anon39_Then_correct true))
(let ((anon38_Then_correct true))
(let ((anon37_Then_correct true))
(let ((anon36_Then_correct true))
(let ((anon35_Else_correct  (=> (U_2_bool (Lit boolType (bool_2_U (< 2 11)))) (and (and (and (and (and (and (and (=> (= (ControlFlow 0 36) 9) anon36_Then_correct) (=> (= (ControlFlow 0 36) 10) anon37_Then_correct)) (=> (= (ControlFlow 0 36) 11) anon38_Then_correct)) (=> (= (ControlFlow 0 36) 12) anon39_Then_correct)) (=> (= (ControlFlow 0 36) 34) anon40_Then_correct)) (=> (= (ControlFlow 0 36) 29) anon42_Then_correct)) (=> (= (ControlFlow 0 36) 21) anon45_Then_correct)) (=> (= (ControlFlow 0 36) 13) anon45_Else_correct)))))
(let ((anon35_Then_correct true))
(let ((anon34_Then_correct  (=> (= (ControlFlow 0 7) (- 0 6)) (U_2_bool (Lit boolType (bool_2_U (< 7 11)))))))
(let ((anon31_Then_correct  (=> (= (ControlFlow 0 5) (- 0 4)) (U_2_bool (Lit boolType (bool_2_U (< 3 5)))))))
(let ((anon30_Then_correct  (=> (and (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (and (= $Heap $Heap@0) (= (ControlFlow 0 3) (- 0 2)))) (<= (LitInt 2) (LitInt 3)))))
(let ((anon29_Then_correct true))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (and (and (and (and (and (and (=> (= (ControlFlow 0 45) 1) anon29_Then_correct) (=> (= (ControlFlow 0 45) 3) anon30_Then_correct)) (=> (= (ControlFlow 0 45) 5) anon31_Then_correct)) (=> (= (ControlFlow 0 45) 44) anon32_Then_correct)) (=> (= (ControlFlow 0 45) 7) anon34_Then_correct)) (=> (= (ControlFlow 0 45) 8) anon35_Then_correct)) (=> (= (ControlFlow 0 45) 36) anon35_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (and (= 1 $FunctionContextHeight) (= (ControlFlow 0 46) 45))) anon0_correct)))
PreconditionGeneratedEntry_correct))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
