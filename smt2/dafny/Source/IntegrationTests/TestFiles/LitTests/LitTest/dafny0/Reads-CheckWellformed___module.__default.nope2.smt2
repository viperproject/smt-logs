(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 () T@U)
(declare-fun $generated@@9 () T@U)
(declare-fun $generated@@10 () T@U)
(declare-fun $generated@@11 (T@T) Int)
(declare-fun $generated@@12 () T@T)
(declare-fun $generated@@13 () T@T)
(declare-fun $generated@@14 () T@T)
(declare-fun $generated@@15 (Bool) T@U)
(declare-fun $generated@@16 (T@U) Bool)
(declare-fun $generated@@17 (Int) T@U)
(declare-fun $generated@@18 (T@U) Int)
(declare-fun $generated@@19 (Real) T@U)
(declare-fun $generated@@20 (T@U) Real)
(declare-fun $generated@@27 (T@U) Int)
(declare-fun $generated@@28 (T@U) T@U)
(declare-fun $generated@@29 (T@U) T@U)
(declare-fun $generated@@30 (T@U T@U) T@U)
(declare-fun $generated@@31 (T@U T@U) Bool)
(declare-fun $generated@@37 () Int)
(declare-fun $generated@@38 (T@U T@U) T@U)
(declare-fun $generated@@39 (T@U) Bool)
(declare-fun $generated@@40 (T@U T@U) Bool)
(declare-fun $generated@@41 (T@T T@U T@U) Bool)
(declare-fun $generated@@42 () T@T)
(declare-fun $generated@@43 () T@U)
(declare-fun $generated@@44 () T@U)
(declare-fun $generated@@45 (T@T T@U) T@U)
(declare-fun $generated@@46 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 () T@T)
(declare-fun $generated@@49 (T@T T@T) T@T)
(declare-fun $generated@@50 () T@U)
(declare-fun $generated@@51 (T@T T@U) T@U)
(declare-fun $generated@@52 () T@T)
(declare-fun $generated@@53 () T@U)
(declare-fun $generated@@54 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@55 (T@T) T@T)
(declare-fun $generated@@56 (T@T) T@T)
(declare-fun $generated@@79 () T@U)
(declare-fun $generated@@81 (T@U) T@U)
(declare-fun $generated@@82 (T@U) T@U)
(declare-fun $generated@@84 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@85 () T@U)
(declare-fun $generated@@88 () T@U)
(declare-fun $generated@@89 (T@U T@U) T@U)
(declare-fun $generated@@90 (T@U) Bool)
(declare-fun $generated@@95 (T@T T@U) T@U)
(declare-fun $generated@@103 (T@U) T@U)
(declare-fun $generated@@112 (T@U) T@U)
(declare-fun $generated@@115 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@116 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@117 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@11 $generated@@12) 0) (= ($generated@@11 $generated@@13) 1)) (= ($generated@@11 $generated@@14) 2)) (forall (($generated@@21 Bool) ) (! (= ($generated@@16 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 T@U) ) (! (= ($generated@@15 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 Int) ) (! (= ($generated@@18 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))) (forall (($generated@@24 T@U) ) (! (= ($generated@@17 ($generated@@18 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@18 $generated@@24))
))) (forall (($generated@@25 Real) ) (! (= ($generated@@20 ($generated@@19 $generated@@25)) $generated@@25)
 :pattern ( ($generated@@19 $generated@@25))
))) (forall (($generated@@26 T@U) ) (! (= ($generated@@19 ($generated@@20 $generated@@26)) $generated@@26)
 :pattern ( ($generated@@20 $generated@@26))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7 $generated@@8 $generated@@9 $generated@@10)
)
(assert (= ($generated@@27 $generated@@1) 0))
(assert (= ($generated@@28 $generated) $generated@@0))
(assert (= ($generated@@29 $generated@@1) $generated@@2))
(assert (forall (($generated@@32 T@U) ($generated@@33 T@U) ) (! ($generated@@31 ($generated@@30 $generated@@32 $generated@@33) $generated@@33)
 :pattern ( ($generated@@30 $generated@@32 $generated@@33))
)))
(assert (forall (($generated@@34 T@U) ($generated@@35 T@U) ($generated@@36 T@U) ) (!  (=> ($generated@@31 $generated@@34 $generated@@36) ($generated@@31 ($generated@@30 $generated@@34 $generated@@35) $generated@@36))
 :pattern ( ($generated@@30 $generated@@34 $generated@@35) ($generated@@31 $generated@@34 $generated@@36))
)))
(assert  (and (and (and (and (and (and (and (and (= ($generated@@11 $generated@@42) 3) (forall (($generated@@57 T@T) ($generated@@58 T@T) ($generated@@59 T@U) ($generated@@60 T@U) ($generated@@61 T@U) ) (! (= ($generated@@46 $generated@@57 $generated@@58 ($generated@@54 $generated@@57 $generated@@58 $generated@@60 $generated@@61 $generated@@59) $generated@@61) $generated@@59)
 :weight 0
))) (forall (($generated@@62 T@T) ($generated@@63 T@T) ($generated@@64 T@U) ($generated@@65 T@U) ($generated@@66 T@U) ($generated@@67 T@U) ) (!  (or (= $generated@@66 $generated@@67) (= ($generated@@46 $generated@@62 $generated@@63 ($generated@@54 $generated@@62 $generated@@63 $generated@@65 $generated@@66 $generated@@64) $generated@@67) ($generated@@46 $generated@@62 $generated@@63 $generated@@65 $generated@@67)))
 :weight 0
))) (= ($generated@@11 $generated@@47) 4)) (= ($generated@@11 $generated@@48) 5)) (forall (($generated@@68 T@T) ($generated@@69 T@T) ) (= ($generated@@11 ($generated@@49 $generated@@68 $generated@@69)) 6))) (forall (($generated@@70 T@T) ($generated@@71 T@T) ) (! (= ($generated@@55 ($generated@@49 $generated@@70 $generated@@71)) $generated@@70)
 :pattern ( ($generated@@49 $generated@@70 $generated@@71))
))) (forall (($generated@@72 T@T) ($generated@@73 T@T) ) (! (= ($generated@@56 ($generated@@49 $generated@@72 $generated@@73)) $generated@@73)
 :pattern ( ($generated@@49 $generated@@72 $generated@@73))
))) (= ($generated@@11 $generated@@52) 7)))
(assert  (=> (<= 0 $generated@@37) (forall (($generated@@74 T@U) ($generated@@75 T@U) ) (!  (=> (or ($generated@@40 $generated@@74 $generated@@75) (and (< 0 $generated@@37) (and (and ($generated@@39 $generated@@74) ($generated@@41 $generated@@42 $generated@@75 $generated@@43)) (and (or (not (= $generated@@75 $generated@@44)) (not true)) (> ($generated@@18 ($generated@@45 $generated@@13 ($generated@@46 $generated@@47 $generated@@48 ($generated@@46 $generated@@42 ($generated@@49 $generated@@47 $generated@@48) $generated@@74 $generated@@75) $generated@@50))) 0))))) (= ($generated@@38 $generated@@74 $generated@@75) ($generated@@51 $generated@@52 $generated@@53)))
 :pattern ( ($generated@@38 $generated@@74 $generated@@75) ($generated@@39 $generated@@74))
))))
(assert (forall (($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ) (! (= ($generated@@31 ($generated@@30 $generated@@76 $generated@@77) $generated@@78)  (or (= $generated@@78 $generated@@77) ($generated@@31 $generated@@76 $generated@@78)))
 :pattern ( ($generated@@31 ($generated@@30 $generated@@76 $generated@@77) $generated@@78))
)))
(assert (forall (($generated@@80 T@U) ) (!  (not ($generated@@31 $generated@@79 $generated@@80))
 :pattern ( ($generated@@31 $generated@@79 $generated@@80))
)))
(assert (= ($generated@@81 $generated@@53) $generated@@3))
(assert (forall (($generated@@83 T@U) ) (! (= ($generated@@41 $generated@@42 $generated@@83 $generated@@43)  (or (= $generated@@83 $generated@@44) (= ($generated@@82 $generated@@83) $generated@@43)))
 :pattern ( ($generated@@41 $generated@@42 $generated@@83 $generated@@43))
)))
(assert (forall (($generated@@86 T@U) ($generated@@87 T@U) ) (! (= ($generated@@84 $generated@@42 $generated@@86 $generated@@85 $generated@@87) ($generated@@84 $generated@@42 $generated@@86 $generated@@43 $generated@@87))
 :pattern ( ($generated@@84 $generated@@42 $generated@@86 $generated@@85 $generated@@87))
 :pattern ( ($generated@@84 $generated@@42 $generated@@86 $generated@@43 $generated@@87))
)))
(assert ($generated@@41 $generated@@52 $generated@@53 $generated@@88))
(assert (= ($generated@@27 $generated@@50) 0))
(assert (= ($generated@@89 $generated@@7 $generated@@10) $generated@@50))
(assert  (not ($generated@@90 $generated@@50)))
(assert (forall (($generated@@91 T@U) ($generated@@92 T@U) ) (! (= ($generated@@84 $generated@@42 $generated@@91 $generated@@43 $generated@@92)  (or (= $generated@@91 $generated@@44) ($generated@@16 ($generated@@45 $generated@@12 ($generated@@46 $generated@@47 $generated@@48 ($generated@@46 $generated@@42 ($generated@@49 $generated@@47 $generated@@48) $generated@@92 $generated@@91) $generated@@1)))))
 :pattern ( ($generated@@84 $generated@@42 $generated@@91 $generated@@43 $generated@@92))
)))
(assert (forall (($generated@@93 T@U) ($generated@@94 T@T) ) (! (= ($generated@@51 $generated@@94 $generated@@93) $generated@@93)
 :pattern ( ($generated@@51 $generated@@94 $generated@@93))
)))
(assert (forall (($generated@@96 T@U) ($generated@@97 T@T) ) (! (= ($generated@@95 $generated@@97 ($generated@@45 $generated@@97 $generated@@96)) $generated@@96)
 :pattern ( ($generated@@45 $generated@@97 $generated@@96))
)))
(assert ($generated@@90 $generated@@1))
(assert (forall (($generated@@98 T@U) ($generated@@99 T@U) ) (!  (=> (and (and ($generated@@39 $generated@@98) (and (or (not (= $generated@@99 $generated@@44)) (not true)) (= ($generated@@82 $generated@@99) $generated@@43))) ($generated@@16 ($generated@@45 $generated@@12 ($generated@@46 $generated@@47 $generated@@48 ($generated@@46 $generated@@42 ($generated@@49 $generated@@47 $generated@@48) $generated@@98 $generated@@99) $generated@@1)))) ($generated@@84 $generated@@13 ($generated@@45 $generated@@13 ($generated@@46 $generated@@47 $generated@@48 ($generated@@46 $generated@@42 ($generated@@49 $generated@@47 $generated@@48) $generated@@98 $generated@@99) $generated@@50)) $generated $generated@@98))
 :pattern ( ($generated@@45 $generated@@13 ($generated@@46 $generated@@47 $generated@@48 ($generated@@46 $generated@@42 ($generated@@49 $generated@@47 $generated@@48) $generated@@98 $generated@@99) $generated@@50)))
)))
(assert  (=> (<= 0 $generated@@37) (forall (($generated@@100 T@U) ($generated@@101 T@U) ) (!  (=> (or ($generated@@40 $generated@@100 $generated@@101) (and (< 0 $generated@@37) (and (and ($generated@@39 $generated@@100) (and ($generated@@41 $generated@@42 $generated@@101 $generated@@43) ($generated@@84 $generated@@42 $generated@@101 $generated@@43 $generated@@100))) (and (or (not (= $generated@@101 $generated@@44)) (not true)) (> ($generated@@18 ($generated@@45 $generated@@13 ($generated@@46 $generated@@47 $generated@@48 ($generated@@46 $generated@@42 ($generated@@49 $generated@@47 $generated@@48) $generated@@100 $generated@@101) $generated@@50))) 0))))) ($generated@@41 $generated@@52 ($generated@@38 $generated@@100 $generated@@101) $generated@@88))
 :pattern ( ($generated@@38 $generated@@100 $generated@@101))
))))
(assert (forall (($generated@@102 T@U) ) (! (= ($generated@@41 $generated@@42 $generated@@102 $generated@@85)  (and ($generated@@41 $generated@@42 $generated@@102 $generated@@43) (or (not (= $generated@@102 $generated@@44)) (not true))))
 :pattern ( ($generated@@41 $generated@@42 $generated@@102 $generated@@85))
 :pattern ( ($generated@@41 $generated@@42 $generated@@102 $generated@@43))
)))
(assert (forall (($generated@@104 T@U) ($generated@@105 T@U) ) (!  (and (= ($generated@@103 ($generated@@89 $generated@@104 $generated@@105)) $generated@@104) (= ($generated@@29 ($generated@@89 $generated@@104 $generated@@105)) $generated@@105))
 :pattern ( ($generated@@89 $generated@@104 $generated@@105))
)))
(assert (forall (($generated@@106 T@U) ($generated@@107 T@T) ) (! (= ($generated@@45 $generated@@107 ($generated@@95 $generated@@107 $generated@@106)) $generated@@106)
 :pattern ( ($generated@@95 $generated@@107 $generated@@106))
)))
(assert (forall (($generated@@108 T@U) ($generated@@109 T@U) ) (!  (=> (and ($generated@@39 $generated@@108) (and (or (not (= $generated@@109 $generated@@44)) (not true)) (= ($generated@@82 $generated@@109) $generated@@43))) ($generated@@41 $generated@@13 ($generated@@45 $generated@@13 ($generated@@46 $generated@@47 $generated@@48 ($generated@@46 $generated@@42 ($generated@@49 $generated@@47 $generated@@48) $generated@@108 $generated@@109) $generated@@50)) $generated))
 :pattern ( ($generated@@45 $generated@@13 ($generated@@46 $generated@@47 $generated@@48 ($generated@@46 $generated@@42 ($generated@@49 $generated@@47 $generated@@48) $generated@@108 $generated@@109) $generated@@50)))
)))
(assert (forall (($generated@@110 T@U) ($generated@@111 T@U) ) (!  (=> (and ($generated@@39 $generated@@111) ($generated@@41 $generated@@52 $generated@@110 $generated@@88)) ($generated@@84 $generated@@52 $generated@@110 $generated@@88 $generated@@111))
 :pattern ( ($generated@@84 $generated@@52 $generated@@110 $generated@@88 $generated@@111))
)))
(assert (= ($generated@@28 $generated@@88) $generated@@4))
(assert (= ($generated@@112 $generated@@88) $generated@@8))
(assert (= ($generated@@28 $generated@@85) $generated@@5))
(assert (= ($generated@@112 $generated@@85) $generated@@9))
(assert (= ($generated@@28 $generated@@43) $generated@@6))
(assert (= ($generated@@112 $generated@@43) $generated@@9))
(assert (= $generated@@53 ($generated@@51 $generated@@52 $generated@@53)))
(assert (forall (($generated@@113 T@U) ($generated@@114 T@T) ) (! (= ($generated@@95 $generated@@114 ($generated@@51 $generated@@114 $generated@@113)) ($generated@@51 $generated@@48 ($generated@@95 $generated@@114 $generated@@113)))
 :pattern ( ($generated@@95 $generated@@114 ($generated@@51 $generated@@114 $generated@@113)))
)))
(assert  (and (forall (($generated@@118 T@T) ($generated@@119 T@T) ($generated@@120 T@T) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ) (! (= ($generated@@115 $generated@@118 $generated@@119 $generated@@120 ($generated@@117 $generated@@118 $generated@@119 $generated@@120 $generated@@122 $generated@@123 $generated@@124 $generated@@121) $generated@@123 $generated@@124) $generated@@121)
 :weight 0
)) (and (forall (($generated@@125 T@T) ($generated@@126 T@T) ($generated@@127 T@T) ($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ) (!  (or (= $generated@@130 $generated@@132) (= ($generated@@115 $generated@@125 $generated@@126 $generated@@127 ($generated@@117 $generated@@125 $generated@@126 $generated@@127 $generated@@129 $generated@@130 $generated@@131 $generated@@128) $generated@@132 $generated@@133) ($generated@@115 $generated@@125 $generated@@126 $generated@@127 $generated@@129 $generated@@132 $generated@@133)))
 :weight 0
)) (forall (($generated@@134 T@T) ($generated@@135 T@T) ($generated@@136 T@T) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ) (!  (or (= $generated@@140 $generated@@142) (= ($generated@@115 $generated@@134 $generated@@135 $generated@@136 ($generated@@117 $generated@@134 $generated@@135 $generated@@136 $generated@@138 $generated@@139 $generated@@140 $generated@@137) $generated@@141 $generated@@142) ($generated@@115 $generated@@134 $generated@@135 $generated@@136 $generated@@138 $generated@@141 $generated@@142)))
 :weight 0
)))))
(assert (forall (($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ) (! (= ($generated@@16 ($generated@@115 $generated@@42 $generated@@47 $generated@@12 ($generated@@116 $generated@@143 $generated@@144 $generated@@145 $generated@@146) $generated@@147 $generated@@148))  (=> (and (or (not (= $generated@@147 $generated@@143)) (not true)) ($generated@@16 ($generated@@45 $generated@@12 ($generated@@46 $generated@@47 $generated@@48 ($generated@@46 $generated@@42 ($generated@@49 $generated@@47 $generated@@48) $generated@@144 $generated@@147) $generated@@145)))) ($generated@@31 $generated@@146 ($generated@@95 $generated@@42 $generated@@147))))
 :pattern ( ($generated@@115 $generated@@42 $generated@@47 $generated@@12 ($generated@@116 $generated@@143 $generated@@144 $generated@@145 $generated@@146) $generated@@147 $generated@@148))
)))
(assert (forall (($generated@@149 T@U) ($generated@@150 T@U) ) (! ($generated@@84 $generated@@13 $generated@@150 $generated $generated@@149)
 :pattern ( ($generated@@84 $generated@@13 $generated@@150 $generated $generated@@149))
)))
(assert (forall (($generated@@151 T@U) ) (! ($generated@@41 $generated@@13 $generated@@151 $generated)
 :pattern ( ($generated@@41 $generated@@13 $generated@@151 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@152 () T@U)
(declare-fun $generated@@153 () T@U)
(declare-fun $generated@@154 () T@U)
(declare-fun $generated@@155 () Bool)
(declare-fun $generated@@156 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 10) (let (($generated@@157 true))
(let (($generated@@158 true))
(let (($generated@@159  (=> (= $generated@@152 $generated@@44) (and (=> (= (ControlFlow 0 4) 1) $generated@@158) (=> (= (ControlFlow 0 4) 2) $generated@@157)))))
(let (($generated@@160  (=> (or (not (= $generated@@152 $generated@@44)) (not true)) (and (=> (= (ControlFlow 0 3) 1) $generated@@158) (=> (= (ControlFlow 0 3) 2) $generated@@157)))))
(let (($generated@@161  (=> (= $generated@@152 $generated@@44) (and (=> (= (ControlFlow 0 6) 3) $generated@@160) (=> (= (ControlFlow 0 6) 4) $generated@@159)))))
(let (($generated@@162  (=> (or (not (= $generated@@152 $generated@@44)) (not true)) (and (=> (= (ControlFlow 0 5) 3) $generated@@160) (=> (= (ControlFlow 0 5) 4) $generated@@159)))))
(let (($generated@@163  (=> (and (= $generated@@153 ($generated@@116 $generated@@44 $generated@@154 $generated@@1 (ite  (or (not (= $generated@@152 $generated@@44)) (not true)) $generated@@79 ($generated@@30 $generated@@79 ($generated@@95 $generated@@42 $generated@@152))))) (or (not (= $generated@@152 $generated@@44)) (not true))) (and (=> (= (ControlFlow 0 7) (- 0 9)) (or (not (= $generated@@152 $generated@@44)) (not true))) (=> (or (not (= $generated@@152 $generated@@44)) (not true)) (=> (and (= $generated@@155 ($generated@@16 ($generated@@115 $generated@@42 $generated@@47 $generated@@12 $generated@@153 $generated@@152 $generated@@50))) (> ($generated@@18 ($generated@@45 $generated@@13 ($generated@@46 $generated@@47 $generated@@48 ($generated@@46 $generated@@42 ($generated@@49 $generated@@47 $generated@@48) $generated@@154 $generated@@152) $generated@@50))) 0)) (and (=> (= (ControlFlow 0 7) (- 0 8)) $generated@@155) (=> $generated@@155 (and (=> (= (ControlFlow 0 7) 5) $generated@@162) (=> (= (ControlFlow 0 7) 6) $generated@@161))))))))))
(let (($generated@@164  (=> (and (and (and ($generated@@39 $generated@@154) ($generated@@156 $generated@@154)) ($generated@@41 $generated@@42 $generated@@152 $generated@@43)) (and (= 0 $generated@@37) (= (ControlFlow 0 10) 7))) $generated@@163)))
$generated@@164)))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 7) (- 8))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
