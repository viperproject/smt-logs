(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 (T@T) Int)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 () T@T)
(declare-fun $generated@@12 (Bool) T@U)
(declare-fun $generated@@13 (T@U) Bool)
(declare-fun $generated@@14 (Int) T@U)
(declare-fun $generated@@15 (T@U) Int)
(declare-fun $generated@@16 (Real) T@U)
(declare-fun $generated@@17 (T@U) Real)
(declare-fun $generated@@24 (T@U) T@U)
(declare-fun $generated@@25 (T@T T@U) T@U)
(declare-fun $generated@@28 (T@U) Bool)
(declare-fun $generated@@29 (T@U) T@U)
(declare-fun $generated@@31 (T@U) Bool)
(declare-fun $generated@@33 (T@T T@U) T@U)
(declare-fun $generated@@34 (T@T T@U) T@U)
(declare-fun $generated@@37 (Int) T@U)
(declare-fun $generated@@40 (T@U) T@U)
(declare-fun $generated@@43 (T@T T@U T@U) Bool)
(declare-fun $generated@@44 () T@T)
(declare-fun $generated@@45 () T@U)
(declare-fun $generated@@47 () Int)
(declare-fun $generated@@48 (T@U) Bool)
(declare-fun $generated@@49 (T@U) Bool)
(declare-fun $generated@@50 (T@U) Int)
(declare-fun $generated@@51 (T@U) Bool)
(declare-fun $generated@@52 (T@U) Bool)
(declare-fun $generated@@58 (T@U) T@U)
(declare-fun $generated@@63 (T@U) Int)
(declare-fun $generated@@65 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@66 () T@T)
(declare-fun $generated@@67 () T@T)
(declare-fun $generated@@68 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@69 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@70 () T@T)
(declare-fun $generated@@71 (T@T T@T) T@T)
(declare-fun $generated@@72 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@73 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@74 (T@T) T@T)
(declare-fun $generated@@75 (T@T) T@T)
(declare-fun $generated@@124 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@125 (T@U) Bool)
(declare-fun $generated@@130 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@8 $generated@@9) 0) (= ($generated@@8 $generated@@10) 1)) (= ($generated@@8 $generated@@11) 2)) (forall (($generated@@18 Bool) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 Real) ) (! (= ($generated@@17 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 T@U) ) (! (= ($generated@@16 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7)
)
(assert (= ($generated@@24 $generated) $generated@@1))
(assert (= ($generated@@24 $generated@@0) $generated@@2))
(assert (forall (($generated@@26 T@U) ($generated@@27 T@T) ) (! (= ($generated@@25 $generated@@27 $generated@@26) $generated@@26)
 :pattern ( ($generated@@25 $generated@@27 $generated@@26))
)))
(assert (forall (($generated@@30 T@U) ) (! (= ($generated@@28 $generated@@30) (= ($generated@@29 $generated@@30) $generated@@5))
 :pattern ( ($generated@@28 $generated@@30))
)))
(assert (forall (($generated@@32 T@U) ) (! (= ($generated@@31 $generated@@32) (= ($generated@@29 $generated@@32) $generated@@6))
 :pattern ( ($generated@@31 $generated@@32))
)))
(assert (forall (($generated@@35 T@U) ($generated@@36 T@T) ) (! (= ($generated@@34 $generated@@36 ($generated@@33 $generated@@36 $generated@@35)) $generated@@35)
 :pattern ( ($generated@@33 $generated@@36 $generated@@35))
)))
(assert (forall (($generated@@38 T@U) ) (!  (=> ($generated@@28 $generated@@38) (exists (($generated@@39 Int) ) (= $generated@@38 ($generated@@37 $generated@@39))))
 :pattern ( ($generated@@28 $generated@@38))
)))
(assert (forall (($generated@@41 T@U) ) (!  (=> ($generated@@31 $generated@@41) (exists (($generated@@42 T@U) ) (= $generated@@41 ($generated@@40 $generated@@42))))
 :pattern ( ($generated@@31 $generated@@41))
)))
(assert (= ($generated@@8 $generated@@44) 3))
(assert (forall (($generated@@46 T@U) ) (! (= ($generated@@43 $generated@@44 ($generated@@40 $generated@@46) $generated@@45) ($generated@@43 $generated@@44 $generated@@46 $generated@@45))
 :pattern ( ($generated@@43 $generated@@44 ($generated@@40 $generated@@46) $generated@@45))
)))
(assert  (=> (<= 2 $generated@@47) (forall (($generated@@53 T@U) ) (!  (=> (or ($generated@@49 $generated@@53) (and (< 2 $generated@@47) (and ($generated@@43 $generated@@44 $generated@@53 $generated@@45) (and ($generated@@28 $generated@@53) (> ($generated@@50 $generated@@53) 3))))) (and ($generated@@51 $generated@@53) (= ($generated@@48 $generated@@53) ($generated@@52 $generated@@53))))
 :pattern ( ($generated@@48 $generated@@53))
))))
(assert (forall (($generated@@54 T@U) ) (!  (=> ($generated@@43 $generated@@44 $generated@@54 $generated@@45) (or ($generated@@28 $generated@@54) ($generated@@31 $generated@@54)))
 :pattern ( ($generated@@31 $generated@@54) ($generated@@43 $generated@@44 $generated@@54 $generated@@45))
 :pattern ( ($generated@@28 $generated@@54) ($generated@@43 $generated@@44 $generated@@54 $generated@@45))
)))
(assert (forall (($generated@@55 Int) ) (! (= ($generated@@29 ($generated@@37 $generated@@55)) $generated@@5)
 :pattern ( ($generated@@37 $generated@@55))
)))
(assert (forall (($generated@@56 Int) ) (! (= ($generated@@50 ($generated@@37 $generated@@56)) $generated@@56)
 :pattern ( ($generated@@37 $generated@@56))
)))
(assert (forall (($generated@@57 T@U) ) (! (= ($generated@@29 ($generated@@40 $generated@@57)) $generated@@6)
 :pattern ( ($generated@@40 $generated@@57))
)))
(assert (forall (($generated@@59 T@U) ) (! (= ($generated@@58 ($generated@@40 $generated@@59)) $generated@@59)
 :pattern ( ($generated@@40 $generated@@59))
)))
(assert (forall (($generated@@60 T@U) ($generated@@61 T@T) ) (! (= ($generated@@33 $generated@@61 ($generated@@34 $generated@@61 $generated@@60)) $generated@@60)
 :pattern ( ($generated@@34 $generated@@61 $generated@@60))
)))
(assert (forall (($generated@@62 Int) ) (! (= ($generated@@43 $generated@@44 ($generated@@37 $generated@@62) $generated@@45) ($generated@@43 $generated@@10 ($generated@@14 $generated@@62) $generated@@0))
 :pattern ( ($generated@@43 $generated@@44 ($generated@@37 $generated@@62) $generated@@45))
)))
(assert (forall (($generated@@64 T@U) ) (! (< ($generated@@63 $generated@@64) ($generated@@63 ($generated@@40 $generated@@64)))
 :pattern ( ($generated@@40 $generated@@64))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@76 T@T) ($generated@@77 T@T) ($generated@@78 T@T) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (! (= ($generated@@65 $generated@@76 $generated@@77 $generated@@78 ($generated@@72 $generated@@76 $generated@@77 $generated@@78 $generated@@80 $generated@@81 $generated@@82 $generated@@79) $generated@@81 $generated@@82) $generated@@79)
 :weight 0
)) (and (forall (($generated@@83 T@T) ($generated@@84 T@T) ($generated@@85 T@T) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ) (!  (or (= $generated@@88 $generated@@90) (= ($generated@@65 $generated@@83 $generated@@84 $generated@@85 ($generated@@72 $generated@@83 $generated@@84 $generated@@85 $generated@@87 $generated@@88 $generated@@89 $generated@@86) $generated@@90 $generated@@91) ($generated@@65 $generated@@83 $generated@@84 $generated@@85 $generated@@87 $generated@@90 $generated@@91)))
 :weight 0
)) (forall (($generated@@92 T@T) ($generated@@93 T@T) ($generated@@94 T@T) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ) (!  (or (= $generated@@98 $generated@@100) (= ($generated@@65 $generated@@92 $generated@@93 $generated@@94 ($generated@@72 $generated@@92 $generated@@93 $generated@@94 $generated@@96 $generated@@97 $generated@@98 $generated@@95) $generated@@99 $generated@@100) ($generated@@65 $generated@@92 $generated@@93 $generated@@94 $generated@@96 $generated@@99 $generated@@100)))
 :weight 0
)))) (= ($generated@@8 $generated@@66) 4)) (= ($generated@@8 $generated@@67) 5)) (forall (($generated@@101 T@T) ($generated@@102 T@T) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ) (! (= ($generated@@69 $generated@@101 $generated@@102 ($generated@@73 $generated@@101 $generated@@102 $generated@@104 $generated@@105 $generated@@103) $generated@@105) $generated@@103)
 :weight 0
))) (forall (($generated@@106 T@T) ($generated@@107 T@T) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (!  (or (= $generated@@110 $generated@@111) (= ($generated@@69 $generated@@106 $generated@@107 ($generated@@73 $generated@@106 $generated@@107 $generated@@109 $generated@@110 $generated@@108) $generated@@111) ($generated@@69 $generated@@106 $generated@@107 $generated@@109 $generated@@111)))
 :weight 0
))) (= ($generated@@8 $generated@@70) 6)) (forall (($generated@@112 T@T) ($generated@@113 T@T) ) (= ($generated@@8 ($generated@@71 $generated@@112 $generated@@113)) 7))) (forall (($generated@@114 T@T) ($generated@@115 T@T) ) (! (= ($generated@@74 ($generated@@71 $generated@@114 $generated@@115)) $generated@@114)
 :pattern ( ($generated@@71 $generated@@114 $generated@@115))
))) (forall (($generated@@116 T@T) ($generated@@117 T@T) ) (! (= ($generated@@75 ($generated@@71 $generated@@116 $generated@@117)) $generated@@117)
 :pattern ( ($generated@@71 $generated@@116 $generated@@117))
))))
(assert (forall (($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 Bool) ($generated@@122 T@U) ($generated@@123 T@U) ) (! (= ($generated@@13 ($generated@@65 $generated@@66 $generated@@67 $generated@@9 ($generated@@68 $generated@@118 $generated@@119 $generated@@120 $generated@@121) $generated@@122 $generated@@123))  (=> (and (or (not (= $generated@@122 $generated@@118)) (not true)) ($generated@@13 ($generated@@33 $generated@@9 ($generated@@69 $generated@@67 $generated@@70 ($generated@@69 $generated@@66 ($generated@@71 $generated@@67 $generated@@70) $generated@@119 $generated@@122) $generated@@120)))) $generated@@121))
 :pattern ( ($generated@@65 $generated@@66 $generated@@67 $generated@@9 ($generated@@68 $generated@@118 $generated@@119 $generated@@120 $generated@@121) $generated@@122 $generated@@123))
)))
(assert (forall (($generated@@126 T@U) ($generated@@127 T@U) ) (!  (=> (and ($generated@@125 $generated@@127) (and ($generated@@28 $generated@@126) ($generated@@124 $generated@@44 $generated@@126 $generated@@45 $generated@@127))) ($generated@@124 $generated@@10 ($generated@@14 ($generated@@50 $generated@@126)) $generated@@0 $generated@@127))
 :pattern ( ($generated@@124 $generated@@10 ($generated@@14 ($generated@@50 $generated@@126)) $generated@@0 $generated@@127))
)))
(assert (forall (($generated@@128 T@U) ($generated@@129 T@U) ) (!  (=> (and ($generated@@125 $generated@@129) ($generated@@43 $generated@@44 $generated@@128 $generated@@45)) ($generated@@124 $generated@@44 $generated@@128 $generated@@45 $generated@@129))
 :pattern ( ($generated@@124 $generated@@44 $generated@@128 $generated@@45 $generated@@129))
)))
(assert (= ($generated@@24 $generated@@45) $generated@@4))
(assert (= ($generated@@130 $generated@@45) $generated@@7))
(assert (forall (($generated@@131 T@U) ($generated@@132 T@U) ) (!  (=> (and ($generated@@125 $generated@@132) (and ($generated@@31 $generated@@131) ($generated@@124 $generated@@44 $generated@@131 $generated@@45 $generated@@132))) ($generated@@124 $generated@@44 ($generated@@58 $generated@@131) $generated@@45 $generated@@132))
 :pattern ( ($generated@@124 $generated@@44 ($generated@@58 $generated@@131) $generated@@45 $generated@@132))
)))
(assert (forall (($generated@@133 T@U) ) (! (= ($generated@@40 ($generated@@25 $generated@@44 $generated@@133)) ($generated@@25 $generated@@44 ($generated@@40 $generated@@133)))
 :pattern ( ($generated@@40 ($generated@@25 $generated@@44 $generated@@133)))
)))
(assert (forall (($generated@@134 T@U) ($generated@@135 T@T) ) (! (= ($generated@@34 $generated@@135 ($generated@@25 $generated@@135 $generated@@134)) ($generated@@25 $generated@@70 ($generated@@34 $generated@@135 $generated@@134)))
 :pattern ( ($generated@@34 $generated@@135 ($generated@@25 $generated@@135 $generated@@134)))
)))
(assert (forall (($generated@@136 T@U) ($generated@@137 T@U) ) (! ($generated@@124 $generated@@10 $generated@@137 $generated@@0 $generated@@136)
 :pattern ( ($generated@@124 $generated@@10 $generated@@137 $generated@@0 $generated@@136))
)))
(assert (forall (($generated@@138 T@U) ($generated@@139 T@U) ) (! ($generated@@124 $generated@@9 $generated@@139 $generated $generated@@138)
 :pattern ( ($generated@@124 $generated@@9 $generated@@139 $generated $generated@@138))
)))
(assert  (=> (<= 2 $generated@@47) (forall (($generated@@140 T@U) ) (!  (=> (or ($generated@@49 ($generated@@25 $generated@@44 $generated@@140)) (and (< 2 $generated@@47) (and ($generated@@43 $generated@@44 $generated@@140 $generated@@45) ($generated@@13 ($generated@@25 $generated@@9 ($generated@@12  (and ($generated@@28 ($generated@@25 $generated@@44 $generated@@140)) (> ($generated@@50 ($generated@@25 $generated@@44 $generated@@140)) 3)))))))) (and ($generated@@51 ($generated@@25 $generated@@44 $generated@@140)) (= ($generated@@48 ($generated@@25 $generated@@44 $generated@@140)) ($generated@@52 ($generated@@25 $generated@@44 $generated@@140)))))
 :weight 3
 :pattern ( ($generated@@48 ($generated@@25 $generated@@44 $generated@@140)))
))))
(assert (forall (($generated@@141 T@U) ) (! ($generated@@43 $generated@@10 $generated@@141 $generated@@0)
 :pattern ( ($generated@@43 $generated@@10 $generated@@141 $generated@@0))
)))
(assert (forall (($generated@@142 T@U) ) (! ($generated@@43 $generated@@9 $generated@@142 $generated)
 :pattern ( ($generated@@43 $generated@@9 $generated@@142 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@143 () T@U)
(declare-fun $generated@@144 () T@U)
(declare-fun $generated@@145 () T@U)
(declare-fun $generated@@146 () T@U)
(declare-fun $generated@@147 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 10) (let (($generated@@148  (=> ($generated@@124 $generated@@44 $generated@@143 $generated@@45 $generated@@144) (and (=> (= (ControlFlow 0 3) (- 0 4)) ($generated@@28 $generated@@143)) (=> (= (ControlFlow 0 3) (- 0 2)) (> ($generated@@50 $generated@@143) 3))))))
(let (($generated@@149 true))
(let (($generated@@150  (=> (and ($generated@@28 $generated@@143) (> ($generated@@50 $generated@@143) 3)) (and (=> (= (ControlFlow 0 5) 1) $generated@@149) (=> (= (ControlFlow 0 5) 3) $generated@@148)))))
(let (($generated@@151  (=> (and (not ($generated@@28 $generated@@143)) (= (ControlFlow 0 8) 5)) $generated@@150)))
(let (($generated@@152  (=> ($generated@@28 $generated@@143) (and (=> (= (ControlFlow 0 6) (- 0 7)) ($generated@@28 $generated@@143)) (=> ($generated@@28 $generated@@143) (=> (= (ControlFlow 0 6) 5) $generated@@150))))))
(let (($generated@@153  (=> (= $generated@@145 ($generated@@68 $generated@@146 $generated@@144 $generated@@3 false)) (and (=> (= (ControlFlow 0 9) 6) $generated@@152) (=> (= (ControlFlow 0 9) 8) $generated@@151)))))
(let (($generated@@154  (=> (and (and (and ($generated@@125 $generated@@144) ($generated@@147 $generated@@144)) ($generated@@43 $generated@@44 $generated@@143 $generated@@45)) (and (= 2 $generated@@47) (= (ControlFlow 0 10) 9))) $generated@@153)))
$generated@@154))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
