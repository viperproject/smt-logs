(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 () Int)
(declare-fun $generated@@20 (T@U T@U) Int)
(declare-fun $generated@@21 (T@U) T@U)
(declare-fun $generated@@22 (T@U) Bool)
(declare-fun $generated@@23 (T@U) Bool)
(declare-fun $generated@@24 (T@T T@U T@U) Bool)
(declare-fun $generated@@25 () T@T)
(declare-fun $generated@@26 (T@U) T@U)
(declare-fun $generated@@27 (T@U) Int)
(declare-fun $generated@@28 (Int) Int)
(declare-fun $generated@@29 (T@U) Bool)
(declare-fun $generated@@30 (T@U Int) T@U)
(declare-fun $generated@@31 (T@U) Int)
(declare-fun $generated@@36 (T@U) T@U)
(declare-fun $generated@@37 () T@U)
(declare-fun $generated@@39 (T@T T@U) T@U)
(declare-fun $generated@@42 (T@U Int) T@U)
(declare-fun $generated@@46 (T@T T@U) T@U)
(declare-fun $generated@@47 (T@T T@U) T@U)
(declare-fun $generated@@50 (T@U) Int)
(declare-fun $generated@@57 (T@U T@U T@U) Bool)
(declare-fun $generated@@58 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@66 (T@U T@U) Bool)
(declare-fun $generated@@76 (T@U) T@U)
(declare-fun $generated@@83 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@84 () T@T)
(declare-fun $generated@@85 () T@T)
(declare-fun $generated@@86 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@87 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@88 () T@T)
(declare-fun $generated@@89 (T@T T@T) T@T)
(declare-fun $generated@@90 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@91 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@92 (T@T) T@T)
(declare-fun $generated@@93 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (= ($generated@@3 $generated@@25) 3))
(assert  (=> (<= 0 $generated@@19) (forall (($generated@@32 T@U) ($generated@@33 T@U) ($generated@@34 T@U) ) (!  (=> (or ($generated@@23 $generated@@34) (and (< 0 $generated@@19) (and ($generated@@22 $generated@@33) ($generated@@24 $generated@@25 $generated@@34 ($generated@@26 $generated))))) (and (=> (or (not (= ($generated@@27 $generated@@34) ($generated@@28 0))) (not true)) (and ($generated@@29 $generated@@34) ($generated@@23 ($generated@@30 $generated@@34 ($generated@@31 $generated@@34))))) (= ($generated@@20 ($generated@@21 $generated@@32) $generated@@34) (ite (= ($generated@@27 $generated@@34) ($generated@@28 0)) 0 (let (($generated@@35 ($generated@@31 $generated@@34)))
(+ $generated@@35 ($generated@@20 $generated@@32 ($generated@@30 $generated@@34 $generated@@35))))))))
 :pattern ( ($generated@@20 ($generated@@21 $generated@@32) $generated@@34) ($generated@@22 $generated@@33))
))))
(assert (= ($generated@@36 $generated) $generated@@0))
(assert (= ($generated@@27 $generated@@37) 0))
(assert (forall (($generated@@38 Int) ) (! (= ($generated@@28 $generated@@38) $generated@@38)
 :pattern ( ($generated@@28 $generated@@38))
)))
(assert (forall (($generated@@40 T@U) ($generated@@41 T@T) ) (! (= ($generated@@39 $generated@@41 $generated@@40) $generated@@40)
 :pattern ( ($generated@@39 $generated@@41 $generated@@40))
)))
(assert (forall (($generated@@43 T@U) ($generated@@44 Int) ($generated@@45 Int) ) (!  (=> (and (and (<= 0 $generated@@45) (< $generated@@45 $generated@@44)) (< $generated@@45 ($generated@@27 $generated@@43))) (= ($generated@@42 ($generated@@30 $generated@@43 $generated@@44) $generated@@45) ($generated@@42 $generated@@43 $generated@@45)))
 :weight 25
 :pattern ( ($generated@@42 ($generated@@30 $generated@@43 $generated@@44) $generated@@45))
 :pattern ( ($generated@@42 $generated@@43 $generated@@45) ($generated@@30 $generated@@43 $generated@@44))
)))
(assert (forall (($generated@@48 T@U) ($generated@@49 T@T) ) (! (= ($generated@@47 $generated@@49 ($generated@@46 $generated@@49 $generated@@48)) $generated@@48)
 :pattern ( ($generated@@46 $generated@@49 $generated@@48))
)))
(assert (forall (($generated@@51 T@U) ($generated@@52 Int) ) (!  (=> (and (<= 0 $generated@@52) (< $generated@@52 ($generated@@27 $generated@@51))) (< ($generated@@50 ($generated@@30 $generated@@51 $generated@@52)) ($generated@@50 $generated@@51)))
 :pattern ( ($generated@@50 ($generated@@30 $generated@@51 $generated@@52)))
)))
(assert  (=> (<= 0 $generated@@19) (forall (($generated@@53 T@U) ($generated@@54 T@U) ($generated@@55 T@U) ) (!  (=> (or ($generated@@23 ($generated@@39 $generated@@25 $generated@@55)) (and (< 0 $generated@@19) (and ($generated@@22 $generated@@54) ($generated@@24 $generated@@25 $generated@@55 ($generated@@26 $generated))))) (and (=> (or (not (= ($generated@@27 ($generated@@39 $generated@@25 $generated@@55)) ($generated@@28 0))) (not true)) (and ($generated@@29 ($generated@@39 $generated@@25 $generated@@55)) ($generated@@23 ($generated@@30 ($generated@@39 $generated@@25 $generated@@55) ($generated@@31 ($generated@@39 $generated@@25 $generated@@55)))))) (= ($generated@@20 ($generated@@21 $generated@@53) ($generated@@39 $generated@@25 $generated@@55)) (ite (= ($generated@@27 ($generated@@39 $generated@@25 $generated@@55)) ($generated@@28 0)) 0 (let (($generated@@56 ($generated@@31 ($generated@@39 $generated@@25 $generated@@55))))
(+ $generated@@56 ($generated@@20 ($generated@@21 $generated@@53) ($generated@@30 ($generated@@39 $generated@@25 $generated@@55) $generated@@56))))))))
 :weight 3
 :pattern ( ($generated@@20 ($generated@@21 $generated@@53) ($generated@@39 $generated@@25 $generated@@55)) ($generated@@22 $generated@@54))
))))
(assert (forall (($generated@@59 T@U) ($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@T) ) (! (= ($generated@@57 ($generated@@47 $generated@@62 $generated@@59) $generated@@60 $generated@@61) ($generated@@58 $generated@@62 $generated@@59 $generated@@60 $generated@@61))
 :pattern ( ($generated@@57 ($generated@@47 $generated@@62 $generated@@59) $generated@@60 $generated@@61))
)))
(assert (forall (($generated@@63 T@U) ) (!  (=> ($generated@@29 $generated@@63) (and (<= ($generated@@28 0) ($generated@@31 $generated@@63)) (< ($generated@@31 $generated@@63) ($generated@@27 $generated@@63))))
 :pattern ( ($generated@@31 $generated@@63))
)))
(assert (forall (($generated@@64 T@U) ($generated@@65 Int) ) (!  (=> (and (<= 0 $generated@@65) (<= $generated@@65 ($generated@@27 $generated@@64))) (= ($generated@@27 ($generated@@30 $generated@@64 $generated@@65)) $generated@@65))
 :pattern ( ($generated@@27 ($generated@@30 $generated@@64 $generated@@65)))
)))
(assert (forall (($generated@@67 T@U) ) (!  (=> ($generated@@66 $generated@@67 $generated) (and (= ($generated@@47 $generated@@5 ($generated@@46 $generated@@5 $generated@@67)) $generated@@67) ($generated@@24 $generated@@5 ($generated@@46 $generated@@5 $generated@@67) $generated)))
 :pattern ( ($generated@@66 $generated@@67 $generated))
)))
(assert (forall (($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@T) ) (! (= ($generated@@66 ($generated@@47 $generated@@70 $generated@@68) $generated@@69) ($generated@@24 $generated@@70 $generated@@68 $generated@@69))
 :pattern ( ($generated@@66 ($generated@@47 $generated@@70 $generated@@68) $generated@@69))
)))
(assert (forall (($generated@@71 T@U) ) (! (<= 0 ($generated@@27 $generated@@71))
 :pattern ( ($generated@@27 $generated@@71))
)))
(assert (forall (($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@U) ) (! (= ($generated@@58 $generated@@25 $generated@@72 ($generated@@26 $generated@@73) $generated@@74) (forall (($generated@@75 Int) ) (!  (=> (and (<= 0 $generated@@75) (< $generated@@75 ($generated@@27 $generated@@72))) ($generated@@57 ($generated@@42 $generated@@72 $generated@@75) $generated@@73 $generated@@74))
 :pattern ( ($generated@@42 $generated@@72 $generated@@75))
)))
 :pattern ( ($generated@@58 $generated@@25 $generated@@72 ($generated@@26 $generated@@73) $generated@@74))
)))
(assert (forall (($generated@@77 T@U) ) (! (= ($generated@@76 ($generated@@26 $generated@@77)) $generated@@77)
 :pattern ( ($generated@@26 $generated@@77))
)))
(assert (forall (($generated@@78 T@U) ) (! (= ($generated@@36 ($generated@@26 $generated@@78)) $generated@@1)
 :pattern ( ($generated@@26 $generated@@78))
)))
(assert (forall (($generated@@79 T@U) ($generated@@80 T@T) ) (! (= ($generated@@46 $generated@@80 ($generated@@47 $generated@@80 $generated@@79)) $generated@@79)
 :pattern ( ($generated@@47 $generated@@80 $generated@@79))
)))
(assert (forall (($generated@@81 T@U) ($generated@@82 T@U) ) (! (= ($generated@@20 ($generated@@21 $generated@@81) $generated@@82) ($generated@@20 $generated@@81 $generated@@82))
 :pattern ( ($generated@@20 ($generated@@21 $generated@@81) $generated@@82))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@94 T@T) ($generated@@95 T@T) ($generated@@96 T@T) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ) (! (= ($generated@@83 $generated@@94 $generated@@95 $generated@@96 ($generated@@90 $generated@@94 $generated@@95 $generated@@96 $generated@@98 $generated@@99 $generated@@100 $generated@@97) $generated@@99 $generated@@100) $generated@@97)
 :weight 0
)) (and (forall (($generated@@101 T@T) ($generated@@102 T@T) ($generated@@103 T@T) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ) (!  (or (= $generated@@106 $generated@@108) (= ($generated@@83 $generated@@101 $generated@@102 $generated@@103 ($generated@@90 $generated@@101 $generated@@102 $generated@@103 $generated@@105 $generated@@106 $generated@@107 $generated@@104) $generated@@108 $generated@@109) ($generated@@83 $generated@@101 $generated@@102 $generated@@103 $generated@@105 $generated@@108 $generated@@109)))
 :weight 0
)) (forall (($generated@@110 T@T) ($generated@@111 T@T) ($generated@@112 T@T) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ) (!  (or (= $generated@@116 $generated@@118) (= ($generated@@83 $generated@@110 $generated@@111 $generated@@112 ($generated@@90 $generated@@110 $generated@@111 $generated@@112 $generated@@114 $generated@@115 $generated@@116 $generated@@113) $generated@@117 $generated@@118) ($generated@@83 $generated@@110 $generated@@111 $generated@@112 $generated@@114 $generated@@117 $generated@@118)))
 :weight 0
)))) (= ($generated@@3 $generated@@84) 4)) (= ($generated@@3 $generated@@85) 5)) (forall (($generated@@119 T@T) ($generated@@120 T@T) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ) (! (= ($generated@@87 $generated@@119 $generated@@120 ($generated@@91 $generated@@119 $generated@@120 $generated@@122 $generated@@123 $generated@@121) $generated@@123) $generated@@121)
 :weight 0
))) (forall (($generated@@124 T@T) ($generated@@125 T@T) ($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 T@U) ) (!  (or (= $generated@@128 $generated@@129) (= ($generated@@87 $generated@@124 $generated@@125 ($generated@@91 $generated@@124 $generated@@125 $generated@@127 $generated@@128 $generated@@126) $generated@@129) ($generated@@87 $generated@@124 $generated@@125 $generated@@127 $generated@@129)))
 :weight 0
))) (= ($generated@@3 $generated@@88) 6)) (forall (($generated@@130 T@T) ($generated@@131 T@T) ) (= ($generated@@3 ($generated@@89 $generated@@130 $generated@@131)) 7))) (forall (($generated@@132 T@T) ($generated@@133 T@T) ) (! (= ($generated@@92 ($generated@@89 $generated@@132 $generated@@133)) $generated@@132)
 :pattern ( ($generated@@89 $generated@@132 $generated@@133))
))) (forall (($generated@@134 T@T) ($generated@@135 T@T) ) (! (= ($generated@@93 ($generated@@89 $generated@@134 $generated@@135)) $generated@@135)
 :pattern ( ($generated@@89 $generated@@134 $generated@@135))
))))
(assert (forall (($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 Bool) ($generated@@140 T@U) ($generated@@141 T@U) ) (! (= ($generated@@8 ($generated@@83 $generated@@84 $generated@@85 $generated@@4 ($generated@@86 $generated@@136 $generated@@137 $generated@@138 $generated@@139) $generated@@140 $generated@@141))  (=> (and (or (not (= $generated@@140 $generated@@136)) (not true)) ($generated@@8 ($generated@@46 $generated@@4 ($generated@@87 $generated@@85 $generated@@88 ($generated@@87 $generated@@84 ($generated@@89 $generated@@85 $generated@@88) $generated@@137 $generated@@140) $generated@@138)))) $generated@@139))
 :pattern ( ($generated@@83 $generated@@84 $generated@@85 $generated@@4 ($generated@@86 $generated@@136 $generated@@137 $generated@@138 $generated@@139) $generated@@140 $generated@@141))
)))
(assert (forall (($generated@@142 T@U) ($generated@@143 T@U) ) (!  (=> ($generated@@66 $generated@@142 ($generated@@26 $generated@@143)) (and (= ($generated@@47 $generated@@25 ($generated@@46 $generated@@25 $generated@@142)) $generated@@142) ($generated@@24 $generated@@25 ($generated@@46 $generated@@25 $generated@@142) ($generated@@26 $generated@@143))))
 :pattern ( ($generated@@66 $generated@@142 ($generated@@26 $generated@@143)))
)))
(assert (forall (($generated@@144 Int) ) (! (= ($generated@@47 $generated@@5 ($generated@@9 ($generated@@28 $generated@@144))) ($generated@@39 $generated@@88 ($generated@@47 $generated@@5 ($generated@@9 $generated@@144))))
 :pattern ( ($generated@@47 $generated@@5 ($generated@@9 ($generated@@28 $generated@@144))))
)))
(assert (forall (($generated@@145 T@U) ($generated@@146 T@T) ) (! (= ($generated@@47 $generated@@146 ($generated@@39 $generated@@146 $generated@@145)) ($generated@@39 $generated@@88 ($generated@@47 $generated@@146 $generated@@145)))
 :pattern ( ($generated@@47 $generated@@146 ($generated@@39 $generated@@146 $generated@@145)))
)))
(assert (forall (($generated@@147 T@U) ) (!  (=> (= ($generated@@27 $generated@@147) 0) (= $generated@@147 $generated@@37))
 :pattern ( ($generated@@27 $generated@@147))
)))
(assert (forall (($generated@@148 T@U) ($generated@@149 Int) ) (!  (=> (= $generated@@149 0) (= ($generated@@30 $generated@@148 $generated@@149) $generated@@37))
 :pattern ( ($generated@@30 $generated@@148 $generated@@149))
)))
(assert (forall (($generated@@150 T@U) ($generated@@151 T@U) ) (! ($generated@@58 $generated@@5 $generated@@151 $generated $generated@@150)
 :pattern ( ($generated@@58 $generated@@5 $generated@@151 $generated $generated@@150))
)))
(assert (forall (($generated@@152 T@U) ($generated@@153 T@U) ) (! (= ($generated@@24 $generated@@25 $generated@@152 ($generated@@26 $generated@@153)) (forall (($generated@@154 Int) ) (!  (=> (and (<= 0 $generated@@154) (< $generated@@154 ($generated@@27 $generated@@152))) ($generated@@66 ($generated@@42 $generated@@152 $generated@@154) $generated@@153))
 :pattern ( ($generated@@42 $generated@@152 $generated@@154))
)))
 :pattern ( ($generated@@24 $generated@@25 $generated@@152 ($generated@@26 $generated@@153)))
)))
(assert (forall (($generated@@155 T@U) ) (! ($generated@@24 $generated@@5 $generated@@155 $generated)
 :pattern ( ($generated@@24 $generated@@5 $generated@@155 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@156 () T@U)
(declare-fun $generated@@157 () Int)
(declare-fun $generated@@158 () T@U)
(declare-fun $generated@@159 () T@U)
(declare-fun $generated@@160 () T@U)
(declare-fun $generated@@161 () T@U)
(declare-fun $generated@@162 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 13) (let (($generated@@163  (and (=> (= (ControlFlow 0 5) (- 0 7)) (or (and ($generated@@24 $generated@@5 ($generated@@9 (- ($generated@@27 $generated@@156) 1)) $generated) (and (<= ($generated@@28 0) (- ($generated@@27 $generated@@156) 1)) (< (- ($generated@@27 $generated@@156) 1) ($generated@@27 $generated@@156)))) (or (and ($generated@@24 $generated@@5 ($generated@@9 ($generated@@28 0)) $generated) (and (<= ($generated@@28 0) ($generated@@28 0)) (< 0 ($generated@@27 $generated@@156)))) (or (and ($generated@@24 $generated@@5 ($generated@@9 ($generated@@28 0)) $generated) (and (<= ($generated@@28 0) ($generated@@28 0)) (< 0 ($generated@@27 $generated@@156)))) (exists (($generated@@164 Int) )  (and (<= ($generated@@28 0) $generated@@164) (< $generated@@164 ($generated@@27 $generated@@156)))))))) (=> (or (and ($generated@@24 $generated@@5 ($generated@@9 (- ($generated@@27 $generated@@156) 1)) $generated) (and (<= ($generated@@28 0) (- ($generated@@27 $generated@@156) 1)) (< (- ($generated@@27 $generated@@156) 1) ($generated@@27 $generated@@156)))) (or (and ($generated@@24 $generated@@5 ($generated@@9 ($generated@@28 0)) $generated) (and (<= ($generated@@28 0) ($generated@@28 0)) (< 0 ($generated@@27 $generated@@156)))) (or (and ($generated@@24 $generated@@5 ($generated@@9 ($generated@@28 0)) $generated) (and (<= ($generated@@28 0) ($generated@@28 0)) (< 0 ($generated@@27 $generated@@156)))) (exists (($generated@@165 Int) )  (and (<= ($generated@@28 0) $generated@@165) (< $generated@@165 ($generated@@27 $generated@@156))))))) (=> (and (<= ($generated@@28 0) $generated@@157) (< $generated@@157 ($generated@@27 $generated@@156))) (and (=> (= (ControlFlow 0 5) (- 0 6)) (and (<= 0 $generated@@157) (<= $generated@@157 ($generated@@27 $generated@@156)))) (=> (and (<= 0 $generated@@157) (<= $generated@@157 ($generated@@27 $generated@@156))) (=> (= $generated@@158 ($generated@@30 $generated@@156 $generated@@157)) (=> (and ($generated@@58 $generated@@25 $generated@@158 ($generated@@26 $generated) $generated@@159) (= (ControlFlow 0 5) (- 0 4))) (< ($generated@@50 $generated@@158) ($generated@@50 $generated@@156)))))))))))
(let (($generated@@166  (=> (and (< $generated@@157 ($generated@@28 0)) (= (ControlFlow 0 9) 5)) $generated@@163)))
(let (($generated@@167  (=> (and (<= ($generated@@28 0) $generated@@157) (= (ControlFlow 0 8) 5)) $generated@@163)))
(let (($generated@@168  (and (=> (= (ControlFlow 0 10) 8) $generated@@167) (=> (= (ControlFlow 0 10) 9) $generated@@166))))
(let (($generated@@169 true))
(let (($generated@@170  (=> (or (not (= ($generated@@27 $generated@@156) ($generated@@28 0))) (not true)) (and (=> (= (ControlFlow 0 11) 10) $generated@@168) (=> (= (ControlFlow 0 11) 3) $generated@@169)))))
(let (($generated@@171 true))
(let (($generated@@172 true))
(let (($generated@@173  (=> (= $generated@@160 ($generated@@86 $generated@@161 $generated@@159 $generated@@2 false)) (and (and (=> (= (ControlFlow 0 12) 1) $generated@@172) (=> (= (ControlFlow 0 12) 2) $generated@@171)) (=> (= (ControlFlow 0 12) 11) $generated@@170)))))
(let (($generated@@174  (=> (and (and (and ($generated@@22 $generated@@159) ($generated@@162 $generated@@159)) ($generated@@24 $generated@@25 $generated@@156 ($generated@@26 $generated))) (and (= 0 $generated@@19) (= (ControlFlow 0 13) 12))) $generated@@173)))
$generated@@174)))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
