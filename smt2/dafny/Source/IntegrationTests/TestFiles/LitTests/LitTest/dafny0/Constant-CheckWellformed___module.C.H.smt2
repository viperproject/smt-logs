(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 () Int)
(declare-fun $generated@@22 (T@U) Int)
(declare-fun $generated@@23 (T@T T@U) T@U)
(declare-fun $generated@@24 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@25 () T@T)
(declare-fun $generated@@26 () T@T)
(declare-fun $generated@@27 () T@T)
(declare-fun $generated@@28 (T@T T@T) T@T)
(declare-fun $generated@@29 (T@U) Bool)
(declare-fun $generated@@30 () T@U)
(declare-fun $generated@@31 (T@U) T@U)
(declare-fun $generated@@32 () T@U)
(declare-fun $generated@@33 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@34 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@35 (T@T) T@T)
(declare-fun $generated@@36 (T@T) T@T)
(declare-fun $generated@@56 (T@U) Int)
(declare-fun $generated@@59 (T@U T@U) Int)
(declare-fun $generated@@60 (T@U T@U) Bool)
(declare-fun $generated@@61 (T@T T@U T@U) Bool)
(declare-fun $generated@@62 () T@U)
(declare-fun $generated@@63 (Int) Int)
(declare-fun $generated@@66 (T@U) T@U)
(declare-fun $generated@@67 () Int)
(declare-fun $generated@@68 () Int)
(declare-fun $generated@@77 (T@T T@U) T@U)
(declare-fun $generated@@80 (T@T T@U) T@U)
(declare-fun $generated@@90 (T@U T@U T@U) Bool)
(declare-fun $generated@@100 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@101 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@102 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@134 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert  (and (and (and (and (and (and (and (forall (($generated@@37 T@T) ($generated@@38 T@T) ($generated@@39 T@U) ($generated@@40 T@U) ($generated@@41 T@U) ) (! (= ($generated@@24 $generated@@37 $generated@@38 ($generated@@34 $generated@@37 $generated@@38 $generated@@40 $generated@@41 $generated@@39) $generated@@41) $generated@@39)
 :weight 0
)) (forall (($generated@@42 T@T) ($generated@@43 T@T) ($generated@@44 T@U) ($generated@@45 T@U) ($generated@@46 T@U) ($generated@@47 T@U) ) (!  (or (= $generated@@46 $generated@@47) (= ($generated@@24 $generated@@42 $generated@@43 ($generated@@34 $generated@@42 $generated@@43 $generated@@45 $generated@@46 $generated@@44) $generated@@47) ($generated@@24 $generated@@42 $generated@@43 $generated@@45 $generated@@47)))
 :weight 0
))) (= ($generated@@5 $generated@@25) 3)) (= ($generated@@5 $generated@@26) 4)) (= ($generated@@5 $generated@@27) 5)) (forall (($generated@@48 T@T) ($generated@@49 T@T) ) (= ($generated@@5 ($generated@@28 $generated@@48 $generated@@49)) 6))) (forall (($generated@@50 T@T) ($generated@@51 T@T) ) (! (= ($generated@@35 ($generated@@28 $generated@@50 $generated@@51)) $generated@@50)
 :pattern ( ($generated@@28 $generated@@50 $generated@@51))
))) (forall (($generated@@52 T@T) ($generated@@53 T@T) ) (! (= ($generated@@36 ($generated@@28 $generated@@52 $generated@@53)) $generated@@53)
 :pattern ( ($generated@@28 $generated@@52 $generated@@53))
))))
(assert  (=> (< 0 $generated@@21) (forall (($generated@@54 T@U) ($generated@@55 T@U) ) (!  (=> (and (and ($generated@@29 $generated@@54) (and (or (not (= $generated@@55 $generated@@30)) (not true)) (= ($generated@@31 $generated@@55) $generated@@32))) ($generated@@10 ($generated@@23 $generated@@6 ($generated@@24 $generated@@25 $generated@@26 ($generated@@24 $generated@@27 ($generated@@28 $generated@@25 $generated@@26) $generated@@54 $generated@@55) $generated@@1)))) ($generated@@33 $generated@@7 ($generated@@11 ($generated@@22 $generated@@55)) $generated $generated@@54))
 :pattern ( ($generated@@22 $generated@@55) ($generated@@23 $generated@@6 ($generated@@24 $generated@@25 $generated@@26 ($generated@@24 $generated@@27 ($generated@@28 $generated@@25 $generated@@26) $generated@@54 $generated@@55) $generated@@1)))
))))
(assert  (=> (< 1 $generated@@21) (forall (($generated@@57 T@U) ($generated@@58 T@U) ) (!  (=> (and (and ($generated@@29 $generated@@57) (and (or (not (= $generated@@58 $generated@@30)) (not true)) (= ($generated@@31 $generated@@58) $generated@@32))) ($generated@@10 ($generated@@23 $generated@@6 ($generated@@24 $generated@@25 $generated@@26 ($generated@@24 $generated@@27 ($generated@@28 $generated@@25 $generated@@26) $generated@@57 $generated@@58) $generated@@1)))) ($generated@@33 $generated@@7 ($generated@@11 ($generated@@56 $generated@@58)) $generated $generated@@57))
 :pattern ( ($generated@@56 $generated@@58) ($generated@@23 $generated@@6 ($generated@@24 $generated@@25 $generated@@26 ($generated@@24 $generated@@27 ($generated@@28 $generated@@25 $generated@@26) $generated@@57 $generated@@58) $generated@@1)))
))))
(assert  (=> (<= 2 $generated@@21) (forall (($generated@@64 T@U) ($generated@@65 T@U) ) (!  (=> (or ($generated@@60 $generated@@64 $generated@@65) (and (< 2 $generated@@21) (and (and (or (not (= $generated@@64 $generated@@30)) (not true)) ($generated@@61 $generated@@27 $generated@@64 $generated@@62)) ($generated@@61 $generated@@27 $generated@@65 $generated@@62)))) (and (= ($generated@@59 $generated@@64 $generated@@65) ($generated@@63 (+ (+ (+ (+ (+ (+ 50 52) 50) 6) 5) 5) 5))) (= ($generated@@63 (+ (+ (+ (+ (+ (+ 50 52) 50) 6) 5) 5) 5)) ($generated@@63 173))))
 :pattern ( ($generated@@59 $generated@@64 $generated@@65))
))))
(assert (= ($generated@@66 $generated) $generated@@0))
(assert  (=> (<= 2 $generated@@21) (forall (($generated@@69 T@U) ($generated@@70 T@U) ) (!  (=> (or ($generated@@60 $generated@@69 $generated@@70) (and (< 2 $generated@@21) (and (and (or (not (= $generated@@69 $generated@@30)) (not true)) ($generated@@61 $generated@@27 $generated@@69 $generated@@62)) ($generated@@61 $generated@@27 $generated@@70 $generated@@62)))) (= ($generated@@59 $generated@@69 $generated@@70) (+ (+ (+ (+ (+ (+ ($generated@@56 $generated@@69) ($generated@@22 $generated@@69)) ($generated@@22 $generated@@70)) $generated@@67) $generated@@68) $generated@@68) $generated@@68)))
 :pattern ( ($generated@@59 $generated@@69 $generated@@70))
))))
(assert (forall (($generated@@71 T@U) ) (! (= ($generated@@61 $generated@@27 $generated@@71 $generated@@32)  (or (= $generated@@71 $generated@@30) (= ($generated@@31 $generated@@71) $generated@@32)))
 :pattern ( ($generated@@61 $generated@@27 $generated@@71 $generated@@32))
)))
(assert (forall (($generated@@72 T@U) ($generated@@73 T@U) ) (! (= ($generated@@33 $generated@@27 $generated@@72 $generated@@62 $generated@@73) ($generated@@33 $generated@@27 $generated@@72 $generated@@32 $generated@@73))
 :pattern ( ($generated@@33 $generated@@27 $generated@@72 $generated@@62 $generated@@73))
 :pattern ( ($generated@@33 $generated@@27 $generated@@72 $generated@@32 $generated@@73))
)))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@U) ) (! (= ($generated@@33 $generated@@27 $generated@@74 $generated@@32 $generated@@75)  (or (= $generated@@74 $generated@@30) ($generated@@10 ($generated@@23 $generated@@6 ($generated@@24 $generated@@25 $generated@@26 ($generated@@24 $generated@@27 ($generated@@28 $generated@@25 $generated@@26) $generated@@75 $generated@@74) $generated@@1)))))
 :pattern ( ($generated@@33 $generated@@27 $generated@@74 $generated@@32 $generated@@75))
)))
(assert (forall (($generated@@76 Int) ) (! (= ($generated@@63 $generated@@76) $generated@@76)
 :pattern ( ($generated@@63 $generated@@76))
)))
(assert (forall (($generated@@78 T@U) ($generated@@79 T@T) ) (! (= ($generated@@77 $generated@@79 $generated@@78) $generated@@78)
 :pattern ( ($generated@@77 $generated@@79 $generated@@78))
)))
(assert (forall (($generated@@81 T@U) ($generated@@82 T@T) ) (! (= ($generated@@80 $generated@@82 ($generated@@23 $generated@@82 $generated@@81)) $generated@@81)
 :pattern ( ($generated@@23 $generated@@82 $generated@@81))
)))
(assert  (=> (<= 2 $generated@@21) (forall (($generated@@83 T@U) ($generated@@84 T@U) ) (!  (=> (or ($generated@@60 ($generated@@77 $generated@@27 $generated@@83) ($generated@@77 $generated@@27 $generated@@84)) (and (< 2 $generated@@21) (and (and (or (not (= $generated@@83 $generated@@30)) (not true)) ($generated@@61 $generated@@27 $generated@@83 $generated@@62)) ($generated@@61 $generated@@27 $generated@@84 $generated@@62)))) (= ($generated@@59 ($generated@@77 $generated@@27 $generated@@83) ($generated@@77 $generated@@27 $generated@@84)) (+ (+ (+ (+ (+ (+ ($generated@@56 ($generated@@77 $generated@@27 $generated@@83)) ($generated@@22 ($generated@@77 $generated@@27 $generated@@83))) ($generated@@22 ($generated@@77 $generated@@27 $generated@@84))) $generated@@67) $generated@@68) $generated@@68) $generated@@68)))
 :weight 3
 :pattern ( ($generated@@59 ($generated@@77 $generated@@27 $generated@@83) ($generated@@77 $generated@@27 $generated@@84)))
))))
(assert  (=> (< 0 $generated@@21) (forall (($generated@@85 T@U) ) (!  (=> (and (or (not (= $generated@@85 $generated@@30)) (not true)) (= ($generated@@31 $generated@@85) $generated@@32)) ($generated@@61 $generated@@7 ($generated@@11 ($generated@@22 $generated@@85)) $generated))
 :pattern ( ($generated@@22 $generated@@85))
))))
(assert  (=> (< 1 $generated@@21) (forall (($generated@@86 T@U) ) (!  (=> (and (or (not (= $generated@@86 $generated@@30)) (not true)) (= ($generated@@31 $generated@@86) $generated@@32)) ($generated@@61 $generated@@7 ($generated@@11 ($generated@@56 $generated@@86)) $generated))
 :pattern ( ($generated@@56 $generated@@86))
))))
(assert (= $generated@@67 (+ $generated@@68 1)))
(assert (forall (($generated@@87 T@U) ) (! (= ($generated@@22 $generated@@87) ($generated@@63 50))
 :pattern ( ($generated@@22 $generated@@87))
)))
(assert  (=> (< 0 $generated@@21) (forall (($generated@@88 T@U) ) (!  (=> ($generated@@29 $generated@@88) ($generated@@33 $generated@@7 ($generated@@11 $generated@@68) $generated $generated@@88))
 :pattern ( ($generated@@33 $generated@@7 ($generated@@11 $generated@@68) $generated $generated@@88))
))))
(assert  (=> (< 1 $generated@@21) (forall (($generated@@89 T@U) ) (!  (=> ($generated@@29 $generated@@89) ($generated@@33 $generated@@7 ($generated@@11 $generated@@67) $generated $generated@@89))
 :pattern ( ($generated@@33 $generated@@7 ($generated@@11 $generated@@67) $generated $generated@@89))
))))
(assert (forall (($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@T) ) (! (= ($generated@@90 ($generated@@80 $generated@@94 $generated@@91) $generated@@92 $generated@@93) ($generated@@33 $generated@@94 $generated@@91 $generated@@92 $generated@@93))
 :pattern ( ($generated@@90 ($generated@@80 $generated@@94 $generated@@91) $generated@@92 $generated@@93))
)))
(assert (forall (($generated@@95 T@U) ) (! (= ($generated@@61 $generated@@27 $generated@@95 $generated@@62)  (and ($generated@@61 $generated@@27 $generated@@95 $generated@@32) (or (not (= $generated@@95 $generated@@30)) (not true))))
 :pattern ( ($generated@@61 $generated@@27 $generated@@95 $generated@@62))
 :pattern ( ($generated@@61 $generated@@27 $generated@@95 $generated@@32))
)))
(assert  (=> (<= 2 $generated@@21) (forall (($generated@@96 T@U) ($generated@@97 T@U) ) (!  (=> (or ($generated@@60 $generated@@96 ($generated@@77 $generated@@27 $generated@@97)) (and (< 2 $generated@@21) (and (and (or (not (= $generated@@96 $generated@@30)) (not true)) ($generated@@61 $generated@@27 $generated@@96 $generated@@62)) ($generated@@61 $generated@@27 $generated@@97 $generated@@62)))) (= ($generated@@59 $generated@@96 ($generated@@77 $generated@@27 $generated@@97)) (+ (+ (+ (+ (+ (+ ($generated@@56 $generated@@96) ($generated@@22 $generated@@96)) ($generated@@22 ($generated@@77 $generated@@27 $generated@@97))) $generated@@67) $generated@@68) $generated@@68) $generated@@68)))
 :weight 3
 :pattern ( ($generated@@59 $generated@@96 ($generated@@77 $generated@@27 $generated@@97)))
))))
(assert  (=> (< 0 $generated@@21) ($generated@@61 $generated@@7 ($generated@@11 $generated@@68) $generated)))
(assert  (=> (< 1 $generated@@21) ($generated@@61 $generated@@7 ($generated@@11 $generated@@67) $generated)))
(assert (forall (($generated@@98 T@U) ($generated@@99 T@T) ) (! (= ($generated@@23 $generated@@99 ($generated@@80 $generated@@99 $generated@@98)) $generated@@98)
 :pattern ( ($generated@@80 $generated@@99 $generated@@98))
)))
(assert (= $generated@@68 ($generated@@63 5)))
(assert  (and (forall (($generated@@103 T@T) ($generated@@104 T@T) ($generated@@105 T@T) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ) (! (= ($generated@@100 $generated@@103 $generated@@104 $generated@@105 ($generated@@102 $generated@@103 $generated@@104 $generated@@105 $generated@@107 $generated@@108 $generated@@109 $generated@@106) $generated@@108 $generated@@109) $generated@@106)
 :weight 0
)) (and (forall (($generated@@110 T@T) ($generated@@111 T@T) ($generated@@112 T@T) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ) (!  (or (= $generated@@115 $generated@@117) (= ($generated@@100 $generated@@110 $generated@@111 $generated@@112 ($generated@@102 $generated@@110 $generated@@111 $generated@@112 $generated@@114 $generated@@115 $generated@@116 $generated@@113) $generated@@117 $generated@@118) ($generated@@100 $generated@@110 $generated@@111 $generated@@112 $generated@@114 $generated@@117 $generated@@118)))
 :weight 0
)) (forall (($generated@@119 T@T) ($generated@@120 T@T) ($generated@@121 T@T) ($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 T@U) ) (!  (or (= $generated@@125 $generated@@127) (= ($generated@@100 $generated@@119 $generated@@120 $generated@@121 ($generated@@102 $generated@@119 $generated@@120 $generated@@121 $generated@@123 $generated@@124 $generated@@125 $generated@@122) $generated@@126 $generated@@127) ($generated@@100 $generated@@119 $generated@@120 $generated@@121 $generated@@123 $generated@@126 $generated@@127)))
 :weight 0
)))))
(assert (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 Bool) ($generated@@132 T@U) ($generated@@133 T@U) ) (! (= ($generated@@10 ($generated@@100 $generated@@27 $generated@@25 $generated@@6 ($generated@@101 $generated@@128 $generated@@129 $generated@@130 $generated@@131) $generated@@132 $generated@@133))  (=> (and (or (not (= $generated@@132 $generated@@128)) (not true)) ($generated@@10 ($generated@@23 $generated@@6 ($generated@@24 $generated@@25 $generated@@26 ($generated@@24 $generated@@27 ($generated@@28 $generated@@25 $generated@@26) $generated@@129 $generated@@132) $generated@@130)))) $generated@@131))
 :pattern ( ($generated@@100 $generated@@27 $generated@@25 $generated@@6 ($generated@@101 $generated@@128 $generated@@129 $generated@@130 $generated@@131) $generated@@132 $generated@@133))
)))
(assert (= ($generated@@66 $generated@@62) $generated@@2))
(assert (= ($generated@@134 $generated@@62) $generated@@4))
(assert (= ($generated@@66 $generated@@32) $generated@@3))
(assert (= ($generated@@134 $generated@@32) $generated@@4))
(assert (forall (($generated@@135 T@U) ) (! (= ($generated@@56 $generated@@135) (+ ($generated@@22 $generated@@135) 2))
 :pattern ( ($generated@@56 $generated@@135))
)))
(assert (forall (($generated@@136 Int) ) (! (= ($generated@@80 $generated@@7 ($generated@@11 ($generated@@63 $generated@@136))) ($generated@@77 $generated@@26 ($generated@@80 $generated@@7 ($generated@@11 $generated@@136))))
 :pattern ( ($generated@@80 $generated@@7 ($generated@@11 ($generated@@63 $generated@@136))))
)))
(assert (forall (($generated@@137 T@U) ($generated@@138 T@T) ) (! (= ($generated@@80 $generated@@138 ($generated@@77 $generated@@138 $generated@@137)) ($generated@@77 $generated@@26 ($generated@@80 $generated@@138 $generated@@137)))
 :pattern ( ($generated@@80 $generated@@138 ($generated@@77 $generated@@138 $generated@@137)))
)))
(assert (forall (($generated@@139 T@U) ($generated@@140 T@U) ) (! ($generated@@33 $generated@@7 $generated@@140 $generated $generated@@139)
 :pattern ( ($generated@@33 $generated@@7 $generated@@140 $generated $generated@@139))
)))
(assert (forall (($generated@@141 T@U) ) (! ($generated@@61 $generated@@7 $generated@@141 $generated)
 :pattern ( ($generated@@61 $generated@@7 $generated@@141 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@142 () T@U)
(declare-fun $generated@@143 () T@U)
(declare-fun $generated@@144 () T@U)
(declare-fun $generated@@145 () T@U)
(declare-fun $generated@@146 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 12) (let (($generated@@147 true))
(let (($generated@@148  (=> (and (or (not (= ($generated@@59 $generated@@142 $generated@@143) ($generated@@63 (+ (+ (+ (+ (+ (+ 50 52) 50) 6) 5) 5) 5)))) (not true)) (= (ControlFlow 0 8) 6)) $generated@@147)))
(let (($generated@@149  (=> (and (= ($generated@@59 $generated@@142 $generated@@143) ($generated@@63 (+ (+ (+ (+ (+ (+ 50 52) 50) 6) 5) 5) 5))) (= (ControlFlow 0 7) 6)) $generated@@147)))
(let (($generated@@150  (=> (and ($generated@@90 ($generated@@80 $generated@@27 $generated@@142) $generated@@32 $generated@@144) ($generated@@33 $generated@@27 $generated@@143 $generated@@62 $generated@@144)) (and (=> (= (ControlFlow 0 9) (- 0 10)) (or (and (= $generated@@142 $generated@@142) (= $generated@@143 $generated@@143)) (and (= $generated@@143 $generated@@30) (or (not (= $generated@@143 $generated@@30)) (not true))))) (=> (or (and (= $generated@@142 $generated@@142) (= $generated@@143 $generated@@143)) (and (= $generated@@143 $generated@@30) (or (not (= $generated@@143 $generated@@30)) (not true)))) (=> (or (and (= $generated@@142 $generated@@142) (= $generated@@143 $generated@@143)) ($generated@@60 $generated@@142 $generated@@143)) (and (=> (= (ControlFlow 0 9) 7) $generated@@149) (=> (= (ControlFlow 0 9) 8) $generated@@148))))))))
(let (($generated@@151  (and (=> (= (ControlFlow 0 2) (- 0 3)) (= ($generated@@59 $generated@@142 $generated@@143) ($generated@@63 (+ (+ (+ (+ (+ (+ 50 52) 50) 6) 5) 5) 5)))) (=> (= ($generated@@59 $generated@@142 $generated@@143) ($generated@@63 (+ (+ (+ (+ (+ (+ 50 52) 50) 6) 5) 5) 5))) (=> (= (ControlFlow 0 2) (- 0 1)) (= ($generated@@63 (+ (+ (+ (+ (+ (+ 50 52) 50) 6) 5) 5) 5)) ($generated@@63 173)))))))
(let (($generated@@152  (and (=> (= (ControlFlow 0 4) (- 0 5)) (or (not (= $generated@@143 $generated@@30)) (not true))) (=> (or (not (= $generated@@143 $generated@@30)) (not true)) (=> (= ($generated@@59 $generated@@142 $generated@@143) (+ (+ (+ (+ (+ (+ ($generated@@56 $generated@@142) ($generated@@22 $generated@@142)) ($generated@@22 $generated@@143)) $generated@@67) $generated@@68) $generated@@68) $generated@@68)) (=> (and ($generated@@61 $generated@@7 ($generated@@11 ($generated@@59 $generated@@142 $generated@@143)) $generated) (= (ControlFlow 0 4) 2)) $generated@@151))))))
(let (($generated@@153  (=> (= $generated@@145 ($generated@@101 $generated@@30 $generated@@144 $generated@@1 false)) (and (=> (= (ControlFlow 0 11) 9) $generated@@150) (=> (= (ControlFlow 0 11) 4) $generated@@152)))))
(let (($generated@@154  (=> (and ($generated@@29 $generated@@144) ($generated@@146 $generated@@144)) (=> (and (and (and (or (not (= $generated@@142 $generated@@30)) (not true)) (and ($generated@@61 $generated@@27 $generated@@142 $generated@@62) ($generated@@33 $generated@@27 $generated@@142 $generated@@62 $generated@@144))) ($generated@@61 $generated@@27 $generated@@143 $generated@@62)) (and (= 2 $generated@@21) (= (ControlFlow 0 12) 11))) $generated@@153))))
$generated@@154)))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
