(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 () T@U)
(declare-fun $generated@@9 (T@T) Int)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 () T@T)
(declare-fun $generated@@12 () T@T)
(declare-fun $generated@@13 (Bool) T@U)
(declare-fun $generated@@14 (T@U) Bool)
(declare-fun $generated@@15 (Int) T@U)
(declare-fun $generated@@16 (T@U) Int)
(declare-fun $generated@@17 (Real) T@U)
(declare-fun $generated@@18 (T@U) Real)
(declare-fun $generated@@25 (T@U) Int)
(declare-fun $generated@@26 (T@U) T@U)
(declare-fun $generated@@27 (T@T T@U T@U) Bool)
(declare-fun $generated@@28 () T@T)
(declare-fun $generated@@29 () T@U)
(declare-fun $generated@@30 () T@U)
(declare-fun $generated@@31 (T@U) T@U)
(declare-fun $generated@@33 () T@U)
(declare-fun $generated@@35 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@36 () T@U)
(declare-fun $generated@@39 () T@U)
(declare-fun $generated@@42 () T@U)
(declare-fun $generated@@43 (T@U T@U) T@U)
(declare-fun $generated@@44 (T@U) Bool)
(declare-fun $generated@@45 (T@T T@U) T@U)
(declare-fun $generated@@46 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 () T@T)
(declare-fun $generated@@49 (T@T T@T) T@T)
(declare-fun $generated@@50 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@51 (T@T) T@T)
(declare-fun $generated@@52 (T@T) T@T)
(declare-fun $generated@@74 (T@U T@U) Bool)
(declare-fun $generated@@78 (T@T T@U) T@U)
(declare-fun $generated@@81 (T@T T@U) T@U)
(declare-fun $generated@@89 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@90 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@91 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@123 (T@U) Bool)
(declare-fun $generated@@133 (T@U) T@U)
(declare-fun $generated@@138 (T@U) T@U)
(declare-fun $generated@@139 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@9 $generated@@10) 0) (= ($generated@@9 $generated@@11) 1)) (= ($generated@@9 $generated@@12) 2)) (forall (($generated@@19 Bool) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 Int) ) (! (= ($generated@@16 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 T@U) ) (! (= ($generated@@15 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= ($generated@@18 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))) (forall (($generated@@24 T@U) ) (! (= ($generated@@17 ($generated@@18 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@18 $generated@@24))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7 $generated@@8)
)
(assert (= ($generated@@25 $generated) 0))
(assert (= ($generated@@26 $generated) $generated@@0))
(assert (= ($generated@@9 $generated@@28) 3))
(assert (forall (($generated@@32 T@U) ) (! (= ($generated@@27 $generated@@28 $generated@@32 $generated@@29)  (or (= $generated@@32 $generated@@30) (= ($generated@@31 $generated@@32) $generated@@29)))
 :pattern ( ($generated@@27 $generated@@28 $generated@@32 $generated@@29))
)))
(assert (forall (($generated@@34 T@U) ) (! (= ($generated@@27 $generated@@28 $generated@@34 $generated@@33)  (or (= $generated@@34 $generated@@30) (= ($generated@@31 $generated@@34) $generated@@33)))
 :pattern ( ($generated@@27 $generated@@28 $generated@@34 $generated@@33))
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ) (! (= ($generated@@35 $generated@@28 $generated@@37 $generated@@36 $generated@@38) ($generated@@35 $generated@@28 $generated@@37 $generated@@29 $generated@@38))
 :pattern ( ($generated@@35 $generated@@28 $generated@@37 $generated@@36 $generated@@38))
 :pattern ( ($generated@@35 $generated@@28 $generated@@37 $generated@@29 $generated@@38))
)))
(assert (forall (($generated@@40 T@U) ($generated@@41 T@U) ) (! (= ($generated@@35 $generated@@28 $generated@@40 $generated@@39 $generated@@41) ($generated@@35 $generated@@28 $generated@@40 $generated@@33 $generated@@41))
 :pattern ( ($generated@@35 $generated@@28 $generated@@40 $generated@@39 $generated@@41))
 :pattern ( ($generated@@35 $generated@@28 $generated@@40 $generated@@33 $generated@@41))
)))
(assert (= ($generated@@25 $generated@@42) 0))
(assert (= ($generated@@43 $generated@@4 $generated@@8) $generated@@42))
(assert  (not ($generated@@44 $generated@@42)))
(assert  (and (and (and (and (and (and (forall (($generated@@53 T@T) ($generated@@54 T@T) ($generated@@55 T@U) ($generated@@56 T@U) ($generated@@57 T@U) ) (! (= ($generated@@46 $generated@@53 $generated@@54 ($generated@@50 $generated@@53 $generated@@54 $generated@@56 $generated@@57 $generated@@55) $generated@@57) $generated@@55)
 :weight 0
)) (forall (($generated@@58 T@T) ($generated@@59 T@T) ($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@U) ) (!  (or (= $generated@@62 $generated@@63) (= ($generated@@46 $generated@@58 $generated@@59 ($generated@@50 $generated@@58 $generated@@59 $generated@@61 $generated@@62 $generated@@60) $generated@@63) ($generated@@46 $generated@@58 $generated@@59 $generated@@61 $generated@@63)))
 :weight 0
))) (= ($generated@@9 $generated@@47) 4)) (= ($generated@@9 $generated@@48) 5)) (forall (($generated@@64 T@T) ($generated@@65 T@T) ) (= ($generated@@9 ($generated@@49 $generated@@64 $generated@@65)) 6))) (forall (($generated@@66 T@T) ($generated@@67 T@T) ) (! (= ($generated@@51 ($generated@@49 $generated@@66 $generated@@67)) $generated@@66)
 :pattern ( ($generated@@49 $generated@@66 $generated@@67))
))) (forall (($generated@@68 T@T) ($generated@@69 T@T) ) (! (= ($generated@@52 ($generated@@49 $generated@@68 $generated@@69)) $generated@@69)
 :pattern ( ($generated@@49 $generated@@68 $generated@@69))
))))
(assert (forall (($generated@@70 T@U) ($generated@@71 T@U) ) (! (= ($generated@@35 $generated@@28 $generated@@70 $generated@@29 $generated@@71)  (or (= $generated@@70 $generated@@30) ($generated@@14 ($generated@@45 $generated@@10 ($generated@@46 $generated@@47 $generated@@48 ($generated@@46 $generated@@28 ($generated@@49 $generated@@47 $generated@@48) $generated@@71 $generated@@70) $generated)))))
 :pattern ( ($generated@@35 $generated@@28 $generated@@70 $generated@@29 $generated@@71))
)))
(assert (forall (($generated@@72 T@U) ($generated@@73 T@U) ) (! (= ($generated@@35 $generated@@28 $generated@@72 $generated@@33 $generated@@73)  (or (= $generated@@72 $generated@@30) ($generated@@14 ($generated@@45 $generated@@10 ($generated@@46 $generated@@47 $generated@@48 ($generated@@46 $generated@@28 ($generated@@49 $generated@@47 $generated@@48) $generated@@73 $generated@@72) $generated)))))
 :pattern ( ($generated@@35 $generated@@28 $generated@@72 $generated@@33 $generated@@73))
)))
(assert (forall (($generated@@75 T@U) ($generated@@76 T@U) ) (!  (=> ($generated@@74 $generated@@75 $generated@@76) (forall (($generated@@77 T@U) ) (!  (=> ($generated@@14 ($generated@@45 $generated@@10 ($generated@@46 $generated@@47 $generated@@48 ($generated@@46 $generated@@28 ($generated@@49 $generated@@47 $generated@@48) $generated@@75 $generated@@77) $generated))) ($generated@@14 ($generated@@45 $generated@@10 ($generated@@46 $generated@@47 $generated@@48 ($generated@@46 $generated@@28 ($generated@@49 $generated@@47 $generated@@48) $generated@@76 $generated@@77) $generated))))
 :pattern ( ($generated@@46 $generated@@47 $generated@@48 ($generated@@46 $generated@@28 ($generated@@49 $generated@@47 $generated@@48) $generated@@76 $generated@@77) $generated))
)))
 :pattern ( ($generated@@74 $generated@@75 $generated@@76))
)))
(assert (forall (($generated@@79 T@U) ($generated@@80 T@T) ) (! (= ($generated@@78 $generated@@80 $generated@@79) $generated@@79)
 :pattern ( ($generated@@78 $generated@@80 $generated@@79))
)))
(assert (forall (($generated@@82 T@U) ($generated@@83 T@T) ) (! (= ($generated@@81 $generated@@83 ($generated@@45 $generated@@83 $generated@@82)) $generated@@82)
 :pattern ( ($generated@@45 $generated@@83 $generated@@82))
)))
(assert ($generated@@44 $generated))
(assert (forall (($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@T) ) (!  (=> ($generated@@74 $generated@@84 $generated@@85) (=> ($generated@@35 $generated@@88 $generated@@86 $generated@@87 $generated@@84) ($generated@@35 $generated@@88 $generated@@86 $generated@@87 $generated@@85)))
 :pattern ( ($generated@@74 $generated@@84 $generated@@85) ($generated@@35 $generated@@88 $generated@@86 $generated@@87 $generated@@84))
)))
(assert  (and (forall (($generated@@92 T@T) ($generated@@93 T@T) ($generated@@94 T@T) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ) (! (= ($generated@@89 $generated@@92 $generated@@93 $generated@@94 ($generated@@91 $generated@@92 $generated@@93 $generated@@94 $generated@@96 $generated@@97 $generated@@98 $generated@@95) $generated@@97 $generated@@98) $generated@@95)
 :weight 0
)) (and (forall (($generated@@99 T@T) ($generated@@100 T@T) ($generated@@101 T@T) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ) (!  (or (= $generated@@104 $generated@@106) (= ($generated@@89 $generated@@99 $generated@@100 $generated@@101 ($generated@@91 $generated@@99 $generated@@100 $generated@@101 $generated@@103 $generated@@104 $generated@@105 $generated@@102) $generated@@106 $generated@@107) ($generated@@89 $generated@@99 $generated@@100 $generated@@101 $generated@@103 $generated@@106 $generated@@107)))
 :weight 0
)) (forall (($generated@@108 T@T) ($generated@@109 T@T) ($generated@@110 T@T) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ) (!  (or (= $generated@@114 $generated@@116) (= ($generated@@89 $generated@@108 $generated@@109 $generated@@110 ($generated@@91 $generated@@108 $generated@@109 $generated@@110 $generated@@112 $generated@@113 $generated@@114 $generated@@111) $generated@@115 $generated@@116) ($generated@@89 $generated@@108 $generated@@109 $generated@@110 $generated@@112 $generated@@115 $generated@@116)))
 :weight 0
)))))
(assert (forall (($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ) (! (= ($generated@@14 ($generated@@89 $generated@@28 $generated@@47 $generated@@10 ($generated@@90 $generated@@117 $generated@@118 $generated@@119 $generated@@120) $generated@@121 $generated@@122))  (=> (and (or (not (= $generated@@121 $generated@@117)) (not true)) ($generated@@14 ($generated@@45 $generated@@10 ($generated@@46 $generated@@47 $generated@@48 ($generated@@46 $generated@@28 ($generated@@49 $generated@@47 $generated@@48) $generated@@118 $generated@@121) $generated@@119)))) (= $generated@@121 $generated@@120)))
 :pattern ( ($generated@@89 $generated@@28 $generated@@47 $generated@@10 ($generated@@90 $generated@@117 $generated@@118 $generated@@119 $generated@@120) $generated@@121 $generated@@122))
)))
(assert (forall (($generated@@124 T@U) ($generated@@125 T@U) ) (!  (=> (and ($generated@@123 $generated@@124) (and (or (not (= $generated@@125 $generated@@30)) (not true)) (= ($generated@@31 $generated@@125) $generated@@33))) ($generated@@27 $generated@@28 ($generated@@45 $generated@@28 ($generated@@46 $generated@@47 $generated@@48 ($generated@@46 $generated@@28 ($generated@@49 $generated@@47 $generated@@48) $generated@@124 $generated@@125) $generated@@42)) $generated@@36))
 :pattern ( ($generated@@45 $generated@@28 ($generated@@46 $generated@@47 $generated@@48 ($generated@@46 $generated@@28 ($generated@@49 $generated@@47 $generated@@48) $generated@@124 $generated@@125) $generated@@42)))
)))
(assert (forall (($generated@@126 T@U) ) (! (= ($generated@@27 $generated@@28 $generated@@126 $generated@@36)  (and ($generated@@27 $generated@@28 $generated@@126 $generated@@29) (or (not (= $generated@@126 $generated@@30)) (not true))))
 :pattern ( ($generated@@27 $generated@@28 $generated@@126 $generated@@36))
 :pattern ( ($generated@@27 $generated@@28 $generated@@126 $generated@@29))
)))
(assert (forall (($generated@@127 T@U) ) (! (= ($generated@@27 $generated@@28 $generated@@127 $generated@@39)  (and ($generated@@27 $generated@@28 $generated@@127 $generated@@33) (or (not (= $generated@@127 $generated@@30)) (not true))))
 :pattern ( ($generated@@27 $generated@@28 $generated@@127 $generated@@39))
 :pattern ( ($generated@@27 $generated@@28 $generated@@127 $generated@@33))
)))
(assert (forall (($generated@@128 T@U) ($generated@@129 T@U) ) (!  (=> (and (and ($generated@@123 $generated@@128) (and (or (not (= $generated@@129 $generated@@30)) (not true)) (= ($generated@@31 $generated@@129) $generated@@33))) ($generated@@14 ($generated@@45 $generated@@10 ($generated@@46 $generated@@47 $generated@@48 ($generated@@46 $generated@@28 ($generated@@49 $generated@@47 $generated@@48) $generated@@128 $generated@@129) $generated)))) ($generated@@35 $generated@@28 ($generated@@45 $generated@@28 ($generated@@46 $generated@@47 $generated@@48 ($generated@@46 $generated@@28 ($generated@@49 $generated@@47 $generated@@48) $generated@@128 $generated@@129) $generated@@42)) $generated@@36 $generated@@128))
 :pattern ( ($generated@@45 $generated@@28 ($generated@@46 $generated@@47 $generated@@48 ($generated@@46 $generated@@28 ($generated@@49 $generated@@47 $generated@@48) $generated@@128 $generated@@129) $generated@@42)))
)))
(assert (forall (($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ) (!  (=> (or (not (= $generated@@130 $generated@@132)) (not true)) (=> (and ($generated@@74 $generated@@130 $generated@@131) ($generated@@74 $generated@@131 $generated@@132)) ($generated@@74 $generated@@130 $generated@@132)))
 :pattern ( ($generated@@74 $generated@@130 $generated@@131) ($generated@@74 $generated@@131 $generated@@132))
)))
(assert (forall (($generated@@134 T@U) ($generated@@135 T@U) ) (!  (and (= ($generated@@133 ($generated@@43 $generated@@134 $generated@@135)) $generated@@134) (= ($generated@@26 ($generated@@43 $generated@@134 $generated@@135)) $generated@@135))
 :pattern ( ($generated@@43 $generated@@134 $generated@@135))
)))
(assert (forall (($generated@@136 T@U) ($generated@@137 T@T) ) (! (= ($generated@@45 $generated@@137 ($generated@@81 $generated@@137 $generated@@136)) $generated@@136)
 :pattern ( ($generated@@81 $generated@@137 $generated@@136))
)))
(assert (= ($generated@@138 $generated@@36) $generated@@1))
(assert (= ($generated@@139 $generated@@36) $generated@@6))
(assert (= ($generated@@138 $generated@@39) $generated@@2))
(assert (= ($generated@@139 $generated@@39) $generated@@7))
(assert (= ($generated@@138 $generated@@29) $generated@@3))
(assert (= ($generated@@139 $generated@@29) $generated@@6))
(assert (= ($generated@@138 $generated@@33) $generated@@5))
(assert (= ($generated@@139 $generated@@33) $generated@@7))
(assert (forall (($generated@@140 T@U) ($generated@@141 T@T) ) (! (= ($generated@@81 $generated@@141 ($generated@@78 $generated@@141 $generated@@140)) ($generated@@78 $generated@@48 ($generated@@81 $generated@@141 $generated@@140)))
 :pattern ( ($generated@@81 $generated@@141 ($generated@@78 $generated@@141 $generated@@140)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@142 () T@U)
(declare-fun $generated@@143 () T@U)
(declare-fun $generated@@144 () T@U)
(declare-fun $generated@@145 () T@U)
(declare-fun $generated@@146 () T@U)
(declare-fun $generated@@147 (T@U) Bool)
(declare-fun $generated@@148 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 5) (let (($generated@@149  (=> (= $generated@@142 ($generated@@90 $generated@@30 $generated@@143 $generated $generated@@144)) (and (=> (= (ControlFlow 0 2) (- 0 4)) (forall (($generated@@150 T@U) ($generated@@151 T@U) )  (=> (and (and (or (not (= $generated@@150 $generated@@30)) (not true)) ($generated@@14 ($generated@@45 $generated@@10 ($generated@@46 $generated@@47 $generated@@48 ($generated@@46 $generated@@28 ($generated@@49 $generated@@47 $generated@@48) $generated@@143 $generated@@150) $generated)))) (= $generated@@150 $generated@@144)) ($generated@@14 ($generated@@89 $generated@@28 $generated@@47 $generated@@10 $generated@@142 $generated@@150 $generated@@151))))) (=> (forall (($generated@@152 T@U) ($generated@@153 T@U) )  (=> (and (and (or (not (= $generated@@152 $generated@@30)) (not true)) ($generated@@14 ($generated@@45 $generated@@10 ($generated@@46 $generated@@47 $generated@@48 ($generated@@46 $generated@@28 ($generated@@49 $generated@@47 $generated@@48) $generated@@143 $generated@@152) $generated)))) (= $generated@@152 $generated@@144)) ($generated@@14 ($generated@@89 $generated@@28 $generated@@47 $generated@@10 $generated@@142 $generated@@152 $generated@@153)))) (=> (= $generated@@145 ($generated@@90 $generated@@30 $generated@@143 $generated $generated@@144)) (=> (and (and ($generated@@123 $generated@@146) ($generated@@147 $generated@@146)) (and ($generated@@74 $generated@@143 $generated@@146) (forall (($generated@@154 T@U) ($generated@@155 T@U) ) (!  (=> (and (or (not (= $generated@@154 $generated@@30)) (not true)) ($generated@@14 ($generated@@45 $generated@@10 ($generated@@46 $generated@@47 $generated@@48 ($generated@@46 $generated@@28 ($generated@@49 $generated@@47 $generated@@48) $generated@@143 $generated@@154) $generated)))) (or (= ($generated@@46 $generated@@47 $generated@@48 ($generated@@46 $generated@@28 ($generated@@49 $generated@@47 $generated@@48) $generated@@146 $generated@@154) $generated@@155) ($generated@@46 $generated@@47 $generated@@48 ($generated@@46 $generated@@28 ($generated@@49 $generated@@47 $generated@@48) $generated@@143 $generated@@154) $generated@@155)) ($generated@@14 ($generated@@89 $generated@@28 $generated@@47 $generated@@10 $generated@@145 $generated@@154 $generated@@155))))
 :pattern ( ($generated@@46 $generated@@47 $generated@@48 ($generated@@46 $generated@@28 ($generated@@49 $generated@@47 $generated@@48) $generated@@146 $generated@@154) $generated@@155))
)))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (or (not (= $generated@@144 $generated@@30)) (not true))) (=> (and (and (or (not (= ($generated@@45 $generated@@28 ($generated@@46 $generated@@47 $generated@@48 ($generated@@46 $generated@@28 ($generated@@49 $generated@@47 $generated@@48) $generated@@146 $generated@@144) $generated@@42)) $generated@@30)) (not true)) (not ($generated@@14 ($generated@@45 $generated@@10 ($generated@@46 $generated@@47 $generated@@48 ($generated@@46 $generated@@28 ($generated@@49 $generated@@47 $generated@@48) $generated@@143 ($generated@@45 $generated@@28 ($generated@@46 $generated@@47 $generated@@48 ($generated@@46 $generated@@28 ($generated@@49 $generated@@47 $generated@@48) $generated@@146 $generated@@144) $generated@@42))) $generated))))) (= (ControlFlow 0 2) (- 0 1))) ($generated@@14 ($generated@@78 $generated@@10 ($generated@@13 false))))))))))))
(let (($generated@@156  (=> (and ($generated@@123 $generated@@143) ($generated@@147 $generated@@143)) (=> (and (and ($generated@@27 $generated@@28 $generated@@144 $generated@@39) ($generated@@35 $generated@@28 $generated@@144 $generated@@39 $generated@@143)) (and (= 1 $generated@@148) (= (ControlFlow 0 5) 2))) $generated@@149))))
$generated@@156)))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
