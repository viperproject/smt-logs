(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TBool () T@U)
(declare-fun TInt () T@U)
(declare-fun TagBool () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagSet () T@U)
(declare-fun alloc () T@U)
(declare-fun allocName () T@U)
(declare-fun Tagclass._System.Tuple2 () T@U)
(declare-fun Tagclass._module.NonEmptyIntSet () T@U)
(declare-fun Tagclass._module.WithTypeParameters () T@U)
(declare-fun Tagclass._module.Dt () T@U)
(declare-fun Tagclass._module.MyClass () T@U)
(declare-fun Tagclass._module.MyClass? () T@U)
(declare-fun Tagclass._module.MyClassWithCtor () T@U)
(declare-fun Tagclass._module.Tr? () T@U)
(declare-fun Tagclass._module.Tr () T@U)
(declare-fun class._module.MyClass? () T@U)
(declare-fun class._module.MyClassWithCtor? () T@U)
(declare-fun Tagclass._module.MyClassWithCtor? () T@U)
(declare-fun |tytagFamily$_tuple#2| () T@U)
(declare-fun tytagFamily$NonEmptyIntSet () T@U)
(declare-fun tytagFamily$WithTypeParameters () T@U)
(declare-fun tytagFamily$Dt () T@U)
(declare-fun tytagFamily$MyClass () T@U)
(declare-fun tytagFamily$MyClassWithCtor () T@U)
(declare-fun tytagFamily$Tr () T@U)
(declare-fun field$nes () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun FDim (T@U) Int)
(declare-fun Tag (T@U) T@U)
(declare-fun DeclName (T@U) T@U)
(declare-fun implements$_module.Tr (T@U) Bool)
(declare-fun Tclass._module.MyClass? () T@U)
(declare-fun Tclass._module.MyClassWithCtor? () T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun |Set#Empty| () T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun SetType () T@T)
(declare-fun Tclass._module.NonEmptyIntSet () T@U)
(declare-fun TSet (T@U) T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun null () T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun Tclass._module.Tr? () T@U)
(declare-fun Tclass._module.Tr () T@U)
(declare-fun Tclass._module.MyClass () T@U)
(declare-fun Tclass._module.MyClassWithCtor () T@U)
(declare-fun |Set#Card| (T@U) Int)
(declare-fun _module.MyClass.nes () T@U)
(declare-fun FieldOfDecl (T@U T@U) T@U)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun _module.MyClassWithCtor.nes () T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun Tclass._module.WithTypeParameters (T@U T@U) T@U)
(declare-fun Tclass._System.Tuple2 (T@U T@U) T@U)
(declare-fun Tclass._module.Dt () T@U)
(declare-fun DeclType (T@U) T@U)
(declare-fun Tclass._System.Tuple2_0 (T@U) T@U)
(declare-fun Tclass._System.Tuple2_1 (T@U) T@U)
(declare-fun Tclass._module.WithTypeParameters_0 (T@U) T@U)
(declare-fun Tclass._module.WithTypeParameters_1 (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TBool TInt TagBool TagInt TagSet alloc allocName Tagclass._System.Tuple2 Tagclass._module.NonEmptyIntSet Tagclass._module.WithTypeParameters Tagclass._module.Dt Tagclass._module.MyClass Tagclass._module.MyClass? Tagclass._module.MyClassWithCtor Tagclass._module.Tr? Tagclass._module.Tr class._module.MyClass? class._module.MyClassWithCtor? Tagclass._module.MyClassWithCtor? |tytagFamily$_tuple#2| tytagFamily$NonEmptyIntSet tytagFamily$WithTypeParameters tytagFamily$Dt tytagFamily$MyClass tytagFamily$MyClassWithCtor tytagFamily$Tr field$nes)
)
(assert (= (FDim alloc) 0))
(assert (= (Tag TBool) TagBool))
(assert (= (Tag TInt) TagInt))
(assert (= (DeclName alloc) allocName))
(assert (implements$_module.Tr Tclass._module.MyClass?))
(assert (implements$_module.Tr Tclass._module.MyClassWithCtor?))
(assert (forall ((o T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o))
 :pattern ( (|Set#IsMember| |Set#Empty| o))
)))
(assert (= (Ctor SetType) 3))
(assert (forall ((|s#0| T@U) ($h T@U) ) (! (= ($IsAlloc SetType |s#0| Tclass._module.NonEmptyIntSet $h) ($IsAlloc SetType |s#0| (TSet TInt) $h))
 :pattern ( ($IsAlloc SetType |s#0| Tclass._module.NonEmptyIntSet $h))
)))
(assert (= (Ctor refType) 4))
(assert (forall (($o T@U) ) (! (= ($Is refType $o Tclass._module.MyClass?)  (or (= $o null) (= (dtype $o) Tclass._module.MyClass?)))
 :pattern ( ($Is refType $o Tclass._module.MyClass?))
)))
(assert (forall (($o@@0 T@U) ) (! (= ($Is refType $o@@0 Tclass._module.MyClassWithCtor?)  (or (= $o@@0 null) (= (dtype $o@@0) Tclass._module.MyClassWithCtor?)))
 :pattern ( ($Is refType $o@@0 Tclass._module.MyClassWithCtor?))
)))
(assert (forall ((bx T@U) ($h@@0 T@U) ) (!  (=> (and ($IsAllocBox bx Tclass._module.MyClass? $h@@0) ($IsGoodHeap $h@@0)) ($IsAllocBox bx Tclass._module.Tr? $h@@0))
 :pattern ( ($IsAllocBox bx Tclass._module.MyClass? $h@@0))
)))
(assert (forall ((bx@@0 T@U) ($h@@1 T@U) ) (!  (=> (and ($IsAllocBox bx@@0 Tclass._module.MyClassWithCtor? $h@@1) ($IsGoodHeap $h@@1)) ($IsAllocBox bx@@0 Tclass._module.Tr? $h@@1))
 :pattern ( ($IsAllocBox bx@@0 Tclass._module.MyClassWithCtor? $h@@1))
)))
(assert (forall ((|c#0| T@U) ($h@@2 T@U) ) (! (= ($IsAlloc refType |c#0| Tclass._module.Tr $h@@2) ($IsAlloc refType |c#0| Tclass._module.Tr? $h@@2))
 :pattern ( ($IsAlloc refType |c#0| Tclass._module.Tr $h@@2))
 :pattern ( ($IsAlloc refType |c#0| Tclass._module.Tr? $h@@2))
)))
(assert (forall ((|c#0@@0| T@U) ($h@@3 T@U) ) (! (= ($IsAlloc refType |c#0@@0| Tclass._module.MyClass $h@@3) ($IsAlloc refType |c#0@@0| Tclass._module.MyClass? $h@@3))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass._module.MyClass $h@@3))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass._module.MyClass? $h@@3))
)))
(assert (forall ((|c#0@@1| T@U) ($h@@4 T@U) ) (! (= ($IsAlloc refType |c#0@@1| Tclass._module.MyClassWithCtor $h@@4) ($IsAlloc refType |c#0@@1| Tclass._module.MyClassWithCtor? $h@@4))
 :pattern ( ($IsAlloc refType |c#0@@1| Tclass._module.MyClassWithCtor $h@@4))
 :pattern ( ($IsAlloc refType |c#0@@1| Tclass._module.MyClassWithCtor? $h@@4))
)))
(assert (forall ((s T@U) ) (!  (and (= (= (|Set#Card| s) 0) (= s |Set#Empty|)) (=> (or (not (= (|Set#Card| s) 0)) (not true)) (exists ((x@@2 T@U) ) (! (|Set#IsMember| s x@@2)
 :pattern ( (|Set#IsMember| s x@@2))
))))
 :pattern ( (|Set#Card| s))
)))
(assert (= (FDim _module.MyClass.nes) 0))
(assert (= (FieldOfDecl class._module.MyClass? field$nes) _module.MyClass.nes))
(assert  (not ($IsGhostField _module.MyClass.nes)))
(assert (= (FDim _module.MyClassWithCtor.nes) 0))
(assert (= (FieldOfDecl class._module.MyClassWithCtor? field$nes) _module.MyClassWithCtor.nes))
(assert  (not ($IsGhostField _module.MyClassWithCtor.nes)))
(assert  (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 5)) (= (Ctor BoxType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall (($o@@1 T@U) ($h@@5 T@U) ) (! (= ($IsAlloc refType $o@@1 Tclass._module.Tr? $h@@5)  (or (= $o@@1 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@5 $o@@1) alloc)))))
 :pattern ( ($IsAlloc refType $o@@1 Tclass._module.Tr? $h@@5))
)))
(assert (forall (($o@@2 T@U) ($h@@6 T@U) ) (! (= ($IsAlloc refType $o@@2 Tclass._module.MyClass? $h@@6)  (or (= $o@@2 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@6 $o@@2) alloc)))))
 :pattern ( ($IsAlloc refType $o@@2 Tclass._module.MyClass? $h@@6))
)))
(assert (forall (($o@@3 T@U) ($h@@7 T@U) ) (! (= ($IsAlloc refType $o@@3 Tclass._module.MyClassWithCtor? $h@@7)  (or (= $o@@3 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@7 $o@@3) alloc)))))
 :pattern ( ($IsAlloc refType $o@@3 Tclass._module.MyClassWithCtor? $h@@7))
)))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o@@0 T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o@@0) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o@@0) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o@@0) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((x@@3 Int) ) (! (= (LitInt x@@3) x@@3)
 :pattern ( (LitInt x@@3))
)))
(assert (forall ((x@@4 T@U) (T T@T) ) (! (= (Lit T x@@4) x@@4)
 :pattern ( (Lit T x@@4))
)))
(assert (forall ((x@@5 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@5)) x@@5)
 :pattern ( ($Unbox T@@0 x@@5))
)))
(assert (forall ((v T@U) (t0@@0 T@U) ) (! (= ($Is SetType v (TSet t0@@0)) (forall ((bx@@1 T@U) ) (!  (=> (|Set#IsMember| v bx@@1) ($IsBox bx@@1 t0@@0))
 :pattern ( (|Set#IsMember| v bx@@1))
)))
 :pattern ( ($Is SetType v (TSet t0@@0)))
)))
(assert ($IsGhostField alloc))
(assert (forall ((v@@0 T@U) (t T@U) (h@@0 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t h@@0) ($IsAlloc T@@1 v@@0 t h@@0))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t h@@0))
)))
(assert (forall ((h@@1 T@U) (k@@0 T@U) (bx@@2 T@U) (t@@0 T@U) ) (!  (=> ($HeapSucc h@@1 k@@0) (=> ($IsAllocBox bx@@2 t@@0 h@@1) ($IsAllocBox bx@@2 t@@0 k@@0)))
 :pattern ( ($HeapSucc h@@1 k@@0) ($IsAllocBox bx@@2 t@@0 h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@1 T@U) (v@@1 T@U) (t@@1 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@2 k@@1) (=> ($IsAlloc T@@2 v@@1 t@@1 h@@2) ($IsAlloc T@@2 v@@1 t@@1 k@@1)))
 :pattern ( ($HeapSucc h@@2 k@@1) ($IsAlloc T@@2 v@@1 t@@1 h@@2))
)))
(assert (forall (($h@@8 T@U) ($o@@4 T@U) ) (!  (=> (and ($IsGoodHeap $h@@8) (and (or (not (= $o@@4 null)) (not true)) (= (dtype $o@@4) Tclass._module.MyClass?))) ($Is SetType ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@8 $o@@4) _module.MyClass.nes)) Tclass._module.NonEmptyIntSet))
 :pattern ( ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@8 $o@@4) _module.MyClass.nes)))
)))
(assert (forall (($h@@9 T@U) ($o@@5 T@U) ) (!  (=> (and ($IsGoodHeap $h@@9) (and (or (not (= $o@@5 null)) (not true)) (= (dtype $o@@5) Tclass._module.MyClassWithCtor?))) ($Is SetType ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@9 $o@@5) _module.MyClassWithCtor.nes)) Tclass._module.NonEmptyIntSet))
 :pattern ( ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@9 $o@@5) _module.MyClassWithCtor.nes)))
)))
(assert (= (Ctor DatatypeTypeType) 8))
(assert (forall ((_module.WithTypeParameters$A T@U) (_module.WithTypeParameters$B T@U) (|ignoreTypeParams#0| T@U) ($h@@10 T@U) ) (! (= ($IsAlloc DatatypeTypeType |ignoreTypeParams#0| (Tclass._module.WithTypeParameters _module.WithTypeParameters$A _module.WithTypeParameters$B) $h@@10) ($IsAlloc DatatypeTypeType |ignoreTypeParams#0| (Tclass._System.Tuple2 TInt TBool) $h@@10))
 :pattern ( ($IsAlloc DatatypeTypeType |ignoreTypeParams#0| (Tclass._module.WithTypeParameters _module.WithTypeParameters$A _module.WithTypeParameters$B) $h@@10))
)))
(assert (forall ((bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 Tclass._module.NonEmptyIntSet) (and (= ($Box SetType ($Unbox SetType bx@@3)) bx@@3) ($Is SetType ($Unbox SetType bx@@3) Tclass._module.NonEmptyIntSet)))
 :pattern ( ($IsBox bx@@3 Tclass._module.NonEmptyIntSet))
)))
(assert (forall ((bx@@4 T@U) ) (!  (=> ($IsBox bx@@4 Tclass._module.Dt) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@4)) bx@@4) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@4) Tclass._module.Dt)))
 :pattern ( ($IsBox bx@@4 Tclass._module.Dt))
)))
(assert (forall ((bx@@5 T@U) ) (!  (=> ($IsBox bx@@5 Tclass._module.MyClass) (and (= ($Box refType ($Unbox refType bx@@5)) bx@@5) ($Is refType ($Unbox refType bx@@5) Tclass._module.MyClass)))
 :pattern ( ($IsBox bx@@5 Tclass._module.MyClass))
)))
(assert (forall ((bx@@6 T@U) ) (!  (=> ($IsBox bx@@6 Tclass._module.MyClass?) (and (= ($Box refType ($Unbox refType bx@@6)) bx@@6) ($Is refType ($Unbox refType bx@@6) Tclass._module.MyClass?)))
 :pattern ( ($IsBox bx@@6 Tclass._module.MyClass?))
)))
(assert (forall ((bx@@7 T@U) ) (!  (=> ($IsBox bx@@7 Tclass._module.MyClassWithCtor) (and (= ($Box refType ($Unbox refType bx@@7)) bx@@7) ($Is refType ($Unbox refType bx@@7) Tclass._module.MyClassWithCtor)))
 :pattern ( ($IsBox bx@@7 Tclass._module.MyClassWithCtor))
)))
(assert (forall ((bx@@8 T@U) ) (!  (=> ($IsBox bx@@8 Tclass._module.Tr?) (and (= ($Box refType ($Unbox refType bx@@8)) bx@@8) ($Is refType ($Unbox refType bx@@8) Tclass._module.Tr?)))
 :pattern ( ($IsBox bx@@8 Tclass._module.Tr?))
)))
(assert (forall ((bx@@9 T@U) ) (!  (=> ($IsBox bx@@9 Tclass._module.Tr) (and (= ($Box refType ($Unbox refType bx@@9)) bx@@9) ($Is refType ($Unbox refType bx@@9) Tclass._module.Tr)))
 :pattern ( ($IsBox bx@@9 Tclass._module.Tr))
)))
(assert (forall ((bx@@10 T@U) ) (!  (=> ($IsBox bx@@10 Tclass._module.MyClassWithCtor?) (and (= ($Box refType ($Unbox refType bx@@10)) bx@@10) ($Is refType ($Unbox refType bx@@10) Tclass._module.MyClassWithCtor?)))
 :pattern ( ($IsBox bx@@10 Tclass._module.MyClassWithCtor?))
)))
(assert (forall ((|c#0@@2| T@U) ) (! (= ($Is refType |c#0@@2| Tclass._module.Tr)  (and ($Is refType |c#0@@2| Tclass._module.Tr?) (or (not (= |c#0@@2| null)) (not true))))
 :pattern ( ($Is refType |c#0@@2| Tclass._module.Tr))
 :pattern ( ($Is refType |c#0@@2| Tclass._module.Tr?))
)))
(assert (forall ((|c#0@@3| T@U) ) (! (= ($Is refType |c#0@@3| Tclass._module.MyClass)  (and ($Is refType |c#0@@3| Tclass._module.MyClass?) (or (not (= |c#0@@3| null)) (not true))))
 :pattern ( ($Is refType |c#0@@3| Tclass._module.MyClass))
 :pattern ( ($Is refType |c#0@@3| Tclass._module.MyClass?))
)))
(assert (forall ((|c#0@@4| T@U) ) (! (= ($Is refType |c#0@@4| Tclass._module.MyClassWithCtor)  (and ($Is refType |c#0@@4| Tclass._module.MyClassWithCtor?) (or (not (= |c#0@@4| null)) (not true))))
 :pattern ( ($Is refType |c#0@@4| Tclass._module.MyClassWithCtor))
 :pattern ( ($Is refType |c#0@@4| Tclass._module.MyClassWithCtor?))
)))
(assert (forall (($h@@11 T@U) ($o@@6 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@11) (and (or (not (= $o@@6 null)) (not true)) (= (dtype $o@@6) Tclass._module.MyClass?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@11 $o@@6) alloc)))) ($IsAlloc SetType ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@11 $o@@6) _module.MyClass.nes)) Tclass._module.NonEmptyIntSet $h@@11))
 :pattern ( ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@11 $o@@6) _module.MyClass.nes)))
)))
(assert (forall (($h@@12 T@U) ($o@@7 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@12) (and (or (not (= $o@@7 null)) (not true)) (= (dtype $o@@7) Tclass._module.MyClassWithCtor?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@12 $o@@7) alloc)))) ($IsAlloc SetType ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@12 $o@@7) _module.MyClassWithCtor.nes)) Tclass._module.NonEmptyIntSet $h@@12))
 :pattern ( ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@12 $o@@7) _module.MyClassWithCtor.nes)))
)))
(assert (forall ((|s#0@@0| T@U) ) (! (= ($Is SetType |s#0@@0| Tclass._module.NonEmptyIntSet)  (and ($Is SetType |s#0@@0| (TSet TInt)) (or (not (= (|Set#Card| |s#0@@0|) 0)) (not true))))
 :pattern ( ($Is SetType |s#0@@0| Tclass._module.NonEmptyIntSet))
)))
(assert (forall (($o@@8 T@U) ($heap T@U) ) (!  (=> ($IsAlloc refType $o@@8 Tclass._module.MyClass? $heap) ($IsAlloc refType $o@@8 Tclass._module.Tr? $heap))
 :pattern ( ($IsAlloc refType $o@@8 Tclass._module.MyClass? $heap))
)))
(assert (forall (($o@@9 T@U) ($heap@@0 T@U) ) (!  (=> ($IsAlloc refType $o@@9 Tclass._module.MyClassWithCtor? $heap@@0) ($IsAlloc refType $o@@9 Tclass._module.Tr? $heap@@0))
 :pattern ( ($IsAlloc refType $o@@9 Tclass._module.MyClassWithCtor? $heap@@0))
)))
(assert (forall ((a T@U) (b T@U) (c T@U) ) (!  (=> (or (not (= a c)) (not true)) (=> (and ($HeapSucc a b) ($HeapSucc b c)) ($HeapSucc a c)))
 :pattern ( ($HeapSucc a b) ($HeapSucc b c))
)))
(assert (forall ((cl T@U) (nm T@U) ) (!  (and (= (DeclType (FieldOfDecl cl nm)) cl) (= (DeclName (FieldOfDecl cl nm)) nm))
 :pattern ( (FieldOfDecl cl nm))
)))
(assert (forall ((bx@@11 T@U) ) (!  (=> ($IsBox bx@@11 TInt) (and (= ($Box intType ($Unbox intType bx@@11)) bx@@11) ($Is intType ($Unbox intType bx@@11) TInt)))
 :pattern ( ($IsBox bx@@11 TInt))
)))
(assert (forall ((bx@@12 T@U) ) (!  (=> ($IsBox bx@@12 TBool) (and (= ($Box boolType ($Unbox boolType bx@@12)) bx@@12) ($Is boolType ($Unbox boolType bx@@12) TBool)))
 :pattern ( ($IsBox bx@@12 TBool))
)))
(assert (forall ((v@@2 T@U) (t@@2 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@2) t@@2) ($Is T@@3 v@@2 t@@2))
 :pattern ( ($IsBox ($Box T@@3 v@@2) t@@2))
)))
(assert (forall ((s@@0 T@U) ) (! (<= 0 (|Set#Card| s@@0))
 :pattern ( (|Set#Card| s@@0))
)))
(assert (forall ((v@@3 T@U) (t0@@1 T@U) (h@@3 T@U) ) (! (= ($IsAlloc SetType v@@3 (TSet t0@@1) h@@3) (forall ((bx@@13 T@U) ) (!  (=> (|Set#IsMember| v@@3 bx@@13) ($IsAllocBox bx@@13 t0@@1 h@@3))
 :pattern ( (|Set#IsMember| v@@3 bx@@13))
)))
 :pattern ( ($IsAlloc SetType v@@3 (TSet t0@@1) h@@3))
)))
(assert (forall ((|_System._tuple#2$T0| T@U) (|_System._tuple#2$T1| T@U) ) (! (= (Tclass._System.Tuple2_0 (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)) |_System._tuple#2$T0|)
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|))
)))
(assert (forall ((|_System._tuple#2$T0@@0| T@U) (|_System._tuple#2$T1@@0| T@U) ) (! (= (Tclass._System.Tuple2_1 (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|)) |_System._tuple#2$T1@@0|)
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|))
)))
(assert (forall ((_module.WithTypeParameters$A@@0 T@U) (_module.WithTypeParameters$B@@0 T@U) ) (! (= (Tclass._module.WithTypeParameters_0 (Tclass._module.WithTypeParameters _module.WithTypeParameters$A@@0 _module.WithTypeParameters$B@@0)) _module.WithTypeParameters$A@@0)
 :pattern ( (Tclass._module.WithTypeParameters _module.WithTypeParameters$A@@0 _module.WithTypeParameters$B@@0))
)))
(assert (forall ((_module.WithTypeParameters$A@@1 T@U) (_module.WithTypeParameters$B@@1 T@U) ) (! (= (Tclass._module.WithTypeParameters_1 (Tclass._module.WithTypeParameters _module.WithTypeParameters$A@@1 _module.WithTypeParameters$B@@1)) _module.WithTypeParameters$B@@1)
 :pattern ( (Tclass._module.WithTypeParameters _module.WithTypeParameters$A@@1 _module.WithTypeParameters$B@@1))
)))
(assert (forall ((t@@3 T@U) ) (! (= (Inv0_TSet (TSet t@@3)) t@@3)
 :pattern ( (TSet t@@3))
)))
(assert (forall ((t@@4 T@U) ) (! (= (Tag (TSet t@@4)) TagSet)
 :pattern ( (TSet t@@4))
)))
(assert (forall ((x@@6 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@6)) x@@6)
 :pattern ( ($Box T@@4 x@@6))
)))
(assert (forall ((|_System._tuple#2$T0@@1| T@U) (|_System._tuple#2$T1@@1| T@U) (bx@@14 T@U) ) (!  (=> ($IsBox bx@@14 (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@14)) bx@@14) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@14) (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|))))
 :pattern ( ($IsBox bx@@14 (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|)))
)))
(assert (forall ((_module.WithTypeParameters$A@@2 T@U) (_module.WithTypeParameters$B@@2 T@U) (bx@@15 T@U) ) (!  (=> ($IsBox bx@@15 (Tclass._module.WithTypeParameters _module.WithTypeParameters$A@@2 _module.WithTypeParameters$B@@2)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@15)) bx@@15) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@15) (Tclass._module.WithTypeParameters _module.WithTypeParameters$A@@2 _module.WithTypeParameters$B@@2))))
 :pattern ( ($IsBox bx@@15 (Tclass._module.WithTypeParameters _module.WithTypeParameters$A@@2 _module.WithTypeParameters$B@@2)))
)))
(assert  (and (forall ((t0@@2 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@2 t1@@0 t2 (MapType1Store t0@@2 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o@@10 T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@10 $f))  (=> (and (or (not (= $o@@10 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@10) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@10 $f))
)))
(assert (forall ((|_System._tuple#2$T0@@2| T@U) (|_System._tuple#2$T1@@2| T@U) ) (!  (and (= (Tag (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|)) Tagclass._System.Tuple2) (= (TagFamily (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|)) |tytagFamily$_tuple#2|))
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|))
)))
(assert (forall ((_module.WithTypeParameters$A@@3 T@U) (_module.WithTypeParameters$B@@3 T@U) ) (!  (and (= (Tag (Tclass._module.WithTypeParameters _module.WithTypeParameters$A@@3 _module.WithTypeParameters$B@@3)) Tagclass._module.WithTypeParameters) (= (TagFamily (Tclass._module.WithTypeParameters _module.WithTypeParameters$A@@3 _module.WithTypeParameters$B@@3)) tytagFamily$WithTypeParameters))
 :pattern ( (Tclass._module.WithTypeParameters _module.WithTypeParameters$A@@3 _module.WithTypeParameters$B@@3))
)))
(assert (forall ((_module.WithTypeParameters$A@@4 T@U) (_module.WithTypeParameters$B@@4 T@U) (|ignoreTypeParams#0@@0| T@U) ) (! (= ($Is DatatypeTypeType |ignoreTypeParams#0@@0| (Tclass._module.WithTypeParameters _module.WithTypeParameters$A@@4 _module.WithTypeParameters$B@@4))  (and ($Is DatatypeTypeType |ignoreTypeParams#0@@0| (Tclass._System.Tuple2 TInt TBool)) (U_2_bool (Lit boolType (bool_2_U true)))))
 :pattern ( ($Is DatatypeTypeType |ignoreTypeParams#0@@0| (Tclass._module.WithTypeParameters _module.WithTypeParameters$A@@4 _module.WithTypeParameters$B@@4)))
)))
(assert (forall ((bx@@16 T@U) (t@@5 T@U) ) (!  (=> ($IsBox bx@@16 (TSet t@@5)) (and (= ($Box SetType ($Unbox SetType bx@@16)) bx@@16) ($Is SetType ($Unbox SetType bx@@16) (TSet t@@5))))
 :pattern ( ($IsBox bx@@16 (TSet t@@5)))
)))
(assert (forall (($o@@11 T@U) ) (!  (=> ($Is refType $o@@11 Tclass._module.MyClass?) ($Is refType $o@@11 Tclass._module.Tr?))
 :pattern ( ($Is refType $o@@11 Tclass._module.MyClass?))
)))
(assert (forall ((bx@@17 T@U) ) (!  (=> ($IsBox bx@@17 Tclass._module.MyClass?) ($IsBox bx@@17 Tclass._module.Tr?))
 :pattern ( ($IsBox bx@@17 Tclass._module.MyClass?))
)))
(assert (forall (($o@@12 T@U) ) (!  (=> ($Is refType $o@@12 Tclass._module.MyClassWithCtor?) ($Is refType $o@@12 Tclass._module.Tr?))
 :pattern ( ($Is refType $o@@12 Tclass._module.MyClassWithCtor?))
)))
(assert (forall ((bx@@18 T@U) ) (!  (=> ($IsBox bx@@18 Tclass._module.MyClassWithCtor?) ($IsBox bx@@18 Tclass._module.Tr?))
 :pattern ( ($IsBox bx@@18 Tclass._module.MyClassWithCtor?))
)))
(assert (forall ((h@@4 T@U) (r T@U) (f T@U) (x@@7 T@U) ) (!  (=> ($IsGoodHeap (MapType0Store refType (MapType0Type FieldType BoxType) h@@4 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@4 r) f x@@7))) ($HeapSucc h@@4 (MapType0Store refType (MapType0Type FieldType BoxType) h@@4 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@4 r) f x@@7))))
 :pattern ( (MapType0Store refType (MapType0Type FieldType BoxType) h@@4 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@4 r) f x@@7)))
)))
(assert (forall ((d T@U) ($h@@13 T@U) ) (!  (=> (and ($IsGoodHeap $h@@13) ($Is DatatypeTypeType d Tclass._module.Dt)) ($IsAlloc DatatypeTypeType d Tclass._module.Dt $h@@13))
 :pattern ( ($IsAlloc DatatypeTypeType d Tclass._module.Dt $h@@13))
)))
(assert (= (Tag Tclass._module.NonEmptyIntSet) Tagclass._module.NonEmptyIntSet))
(assert (= (TagFamily Tclass._module.NonEmptyIntSet) tytagFamily$NonEmptyIntSet))
(assert (= (Tag Tclass._module.Dt) Tagclass._module.Dt))
(assert (= (TagFamily Tclass._module.Dt) tytagFamily$Dt))
(assert (= (Tag Tclass._module.MyClass) Tagclass._module.MyClass))
(assert (= (TagFamily Tclass._module.MyClass) tytagFamily$MyClass))
(assert (= (Tag Tclass._module.MyClass?) Tagclass._module.MyClass?))
(assert (= (TagFamily Tclass._module.MyClass?) tytagFamily$MyClass))
(assert (= (Tag Tclass._module.MyClassWithCtor) Tagclass._module.MyClassWithCtor))
(assert (= (TagFamily Tclass._module.MyClassWithCtor) tytagFamily$MyClassWithCtor))
(assert (= (Tag Tclass._module.Tr?) Tagclass._module.Tr?))
(assert (= (TagFamily Tclass._module.Tr?) tytagFamily$Tr))
(assert (= (Tag Tclass._module.Tr) Tagclass._module.Tr))
(assert (= (TagFamily Tclass._module.Tr) tytagFamily$Tr))
(assert (= (Tag Tclass._module.MyClassWithCtor?) Tagclass._module.MyClassWithCtor?))
(assert (= (TagFamily Tclass._module.MyClassWithCtor?) tytagFamily$MyClassWithCtor))
(assert (forall (($o@@13 T@U) ) (! (= ($Is refType $o@@13 Tclass._module.Tr?)  (or (= $o@@13 null) (implements$_module.Tr (dtype $o@@13))))
 :pattern ( ($Is refType $o@@13 Tclass._module.Tr?))
)))
(assert (forall ((x@@8 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@8))) (Lit BoxType ($Box intType (int_2_U x@@8))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@8))))
)))
(assert (forall ((x@@9 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@9)) (Lit BoxType ($Box T@@5 x@@9)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@9)))
)))
(assert (forall ((h@@5 T@U) (v@@4 T@U) ) (! ($IsAlloc intType v@@4 TInt h@@5)
 :pattern ( ($IsAlloc intType v@@4 TInt h@@5))
)))
(assert (forall ((h@@6 T@U) (v@@5 T@U) ) (! ($IsAlloc boolType v@@5 TBool h@@6)
 :pattern ( ($IsAlloc boolType v@@5 TBool h@@6))
)))
(assert (forall ((v@@6 T@U) ) (! ($Is intType v@@6 TInt)
 :pattern ( ($Is intType v@@6 TInt))
)))
(assert (forall ((v@@7 T@U) ) (! ($Is boolType v@@7 TBool)
 :pattern ( ($Is boolType v@@7 TBool))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |m#0@0| () Int)
(declare-fun |n#0@0| () Int)
(declare-fun |s#0@0| () Int)
(declare-fun |s'#0@0| () Int)
(declare-fun |nes#0@0| () T@U)
(declare-fun $Heap () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |f0#0@0| () T@U)
(declare-fun |f1#0@0| () T@U)
(declare-fun |dt#0@0| () T@U)
(declare-fun $nw@0 () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun |S##1@0| () T@U)
(declare-fun $Heap@2 () T@U)
(declare-fun |y##0@0| () Int)
(declare-fun call2formal@this () T@U)
(declare-fun $Heap@3 () T@U)
(declare-fun call2formal@this@0 () T@U)
(declare-fun |S##2@0| () T@U)
(declare-fun $Heap@4 () T@U)
(declare-fun |which##0@0| () Int)
(declare-fun $Heap@5 () T@U)
(declare-fun |which##1@0| () Int)
(declare-fun |newtype$check#0@0| () Int)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun |m#0| () Int)
(declare-fun |n#0| () Int)
(declare-fun |s#0@@1| () Int)
(declare-fun |s'#0| () Int)
(declare-fun |nes#0| () T@U)
(declare-fun |f0#0| () T@U)
(declare-fun |f1#0| () T@U)
(declare-fun |dt#0| () T@U)
(declare-fun |defass#cl#0| () Bool)
(declare-fun |cl#0| () T@U)
(declare-fun |defass#cl'#0| () Bool)
(declare-fun |cl'#0| () T@U)
(declare-fun $FunctionContextHeight () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 26) (let ((anon2_correct  (and (=> (= (ControlFlow 0 2) (- 0 21)) (<= (LitInt 6) |m#0@0|)) (and (=> (= (ControlFlow 0 2) (- 0 20)) (<= (LitInt 6) |n#0@0|)) (=> (and (and (and (<= (LitInt 6) |m#0@0|) (<= (LitInt 6) |n#0@0|)) (and (<= (LitInt (- 0 32768)) |s#0@0|) (< |s#0@0| 32768))) (and (and (<= (LitInt (- 0 32768)) |s'#0@0|) (< |s'#0@0| 32768)) (and ($Is SetType |nes#0@0| Tclass._module.NonEmptyIntSet) ($IsAlloc SetType |nes#0@0| Tclass._module.NonEmptyIntSet $Heap)))) (=> (and (and (and (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (and (forall (($o@@14 T@U) ) (!  (=> (and (or (not (= $o@@14 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@14) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@14) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@14)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@14))
)) ($HeapSucc $Heap $Heap@0))) (and (and ($Is DatatypeTypeType |f0#0@0| (Tclass._System.Tuple2 TInt TBool)) ($IsAlloc DatatypeTypeType |f0#0@0| (Tclass._System.Tuple2 TInt TBool) $Heap@0)) (and ($Is DatatypeTypeType |f1#0@0| (Tclass._module.WithTypeParameters TInt TBool)) ($IsAlloc DatatypeTypeType |f1#0@0| (Tclass._module.WithTypeParameters TInt TBool) $Heap@0)))) (and (and (and ($Is DatatypeTypeType |dt#0@0| Tclass._module.Dt) ($IsAlloc DatatypeTypeType |dt#0@0| Tclass._module.Dt $Heap@0)) (and (or (not (= $nw@0 null)) (not true)) ($Is refType $nw@0 Tclass._module.MyClass?))) (and (and (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $nw@0) alloc)))) (= $Heap@1 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap@0 $nw@0 (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $nw@0) alloc ($Box boolType (bool_2_U true)))))) (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1))))) (and (=> (= (ControlFlow 0 2) (- 0 19)) true) (and (=> (= (ControlFlow 0 2) (- 0 18)) (or (not (= $nw@0 null)) (not true))) (and (=> (= (ControlFlow 0 2) (- 0 17)) true) (and (=> (= (ControlFlow 0 2) (- 0 16)) (or (not (= $nw@0 null)) (not true))) (and (=> (= (ControlFlow 0 2) (- 0 15)) true) (and (=> (= (ControlFlow 0 2) (- 0 14)) (or (not (= $nw@0 null)) (not true))) (and (=> (= (ControlFlow 0 2) (- 0 13)) true) (and (=> (= (ControlFlow 0 2) (- 0 12)) (or (not (= $nw@0 null)) (not true))) (=> (or (not (= $nw@0 null)) (not true)) (=> (= |S##1@0| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@0) _module.MyClass.nes))) (=> (and (and (and (and (and ($IsGoodHeap $Heap@2) ($IsHeapAnchor $Heap@2)) (forall (($o@@15 T@U) ) (!  (=> (and (or (not (= $o@@15 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@15) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@15) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@15)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@15))
))) (and ($HeapSucc $Heap@1 $Heap@2) (= |y##0@0| (LitInt 20)))) (and (and (or (not (= call2formal@this null)) (not true)) (and ($Is refType call2formal@this Tclass._module.MyClassWithCtor) ($IsAlloc refType call2formal@this Tclass._module.MyClassWithCtor $Heap))) (and ($IsGoodHeap $Heap@3) ($IsHeapAnchor $Heap@3)))) (and (and (and (or (not (= call2formal@this@0 null)) (not true)) (and ($Is refType call2formal@this@0 Tclass._module.MyClassWithCtor) ($IsAlloc refType call2formal@this@0 Tclass._module.MyClassWithCtor $Heap@3))) (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 call2formal@this@0) alloc))))) (and (forall (($o@@16 T@U) ) (!  (=> (and (or (not (= $o@@16 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@16) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@16) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@16)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@16))
)) ($HeapSucc $Heap@2 $Heap@3)))) (and (=> (= (ControlFlow 0 2) (- 0 11)) true) (and (=> (= (ControlFlow 0 2) (- 0 10)) (or (not (= call2formal@this@0 null)) (not true))) (and (=> (= (ControlFlow 0 2) (- 0 9)) true) (and (=> (= (ControlFlow 0 2) (- 0 8)) (or (not (= call2formal@this@0 null)) (not true))) (and (=> (= (ControlFlow 0 2) (- 0 7)) true) (and (=> (= (ControlFlow 0 2) (- 0 6)) (or (not (= call2formal@this@0 null)) (not true))) (and (=> (= (ControlFlow 0 2) (- 0 5)) true) (and (=> (= (ControlFlow 0 2) (- 0 4)) (or (not (= call2formal@this@0 null)) (not true))) (=> (or (not (= call2formal@this@0 null)) (not true)) (=> (= |S##2@0| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 call2formal@this@0) _module.MyClassWithCtor.nes))) (=> (and (and (and ($IsGoodHeap $Heap@4) ($IsHeapAnchor $Heap@4)) (forall (($o@@17 T@U) ) (!  (=> (and (or (not (= $o@@17 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@17) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 $o@@17) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@17)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 $o@@17))
))) (and ($HeapSucc $Heap@3 $Heap@4) (= |which##0@0| (LitInt 0)))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (or (= |which##0@0| (LitInt 0)) (= |which##0@0| (LitInt 1)))) (=> (or (= |which##0@0| (LitInt 0)) (= |which##0@0| (LitInt 1))) (=> (and ($IsGoodHeap $Heap@5) ($IsHeapAnchor $Heap@5)) (=> (and (and (forall (($o@@18 T@U) ) (!  (=> (and (or (not (= $o@@18 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 $o@@18) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 $o@@18) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 $o@@18)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 $o@@18))
)) ($HeapSucc $Heap@4 $Heap@5)) (and (= |which##1@0| (LitInt 1)) (= (ControlFlow 0 2) (- 0 1)))) (or (= |which##1@0| (LitInt 0)) (= |which##1@0| (LitInt 1)))))))))))))))))))))))))))))))))))
(let ((anon3_Else_correct  (=> (and (< |m#0@0| (LitInt 6)) (= (ControlFlow 0 24) 2)) anon2_correct)))
(let ((anon3_Then_correct  (=> (and (<= (LitInt 6) |m#0@0|) (= |newtype$check#0@0| (LitInt 6))) (and (=> (= (ControlFlow 0 22) (- 0 23)) (<= (LitInt 6) |newtype$check#0@0|)) (=> (<= (LitInt 6) |newtype$check#0@0|) (=> (= (ControlFlow 0 22) 2) anon2_correct))))))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (=> (and (<= (LitInt 6) |m#0@0|) (<= (LitInt 6) |n#0@0|)) (and (=> (= (ControlFlow 0 25) 22) anon3_Then_correct) (=> (= (ControlFlow 0 25) 24) anon3_Else_correct))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (=> (and (and (and (<= (LitInt 6) |m#0|) true) (and (<= (LitInt 6) |n#0|) true)) (and (and (<= (LitInt (- 0 32768)) |s#0@@1|) (< |s#0@@1| 32768)) true)) (=> (and (and (and (and (and (<= (LitInt (- 0 32768)) |s'#0|) (< |s'#0| 32768)) true) (and (and ($Is SetType |nes#0| Tclass._module.NonEmptyIntSet) ($IsAlloc SetType |nes#0| Tclass._module.NonEmptyIntSet $Heap)) true)) (and (and (and ($Is DatatypeTypeType |f0#0| (Tclass._System.Tuple2 TInt TBool)) ($IsAlloc DatatypeTypeType |f0#0| (Tclass._System.Tuple2 TInt TBool) $Heap)) true) (and (and ($Is DatatypeTypeType |f1#0| (Tclass._module.WithTypeParameters TInt TBool)) ($IsAlloc DatatypeTypeType |f1#0| (Tclass._module.WithTypeParameters TInt TBool) $Heap)) true))) (and (and (and (and ($Is DatatypeTypeType |dt#0| Tclass._module.Dt) ($IsAlloc DatatypeTypeType |dt#0| Tclass._module.Dt $Heap)) true) (and (=> |defass#cl#0| (and ($Is refType |cl#0| Tclass._module.MyClass) ($IsAlloc refType |cl#0| Tclass._module.MyClass $Heap))) true)) (and (and (=> |defass#cl'#0| (and ($Is refType |cl'#0| Tclass._module.MyClassWithCtor) ($IsAlloc refType |cl'#0| Tclass._module.MyClassWithCtor $Heap))) true) (and (= 2 $FunctionContextHeight) (= (ControlFlow 0 26) 25))))) anon0_correct)))))
PreconditionGeneratedEntry_correct))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
