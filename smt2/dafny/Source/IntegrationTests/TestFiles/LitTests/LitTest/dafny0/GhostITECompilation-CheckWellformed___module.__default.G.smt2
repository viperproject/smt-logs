(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 (T@T) Int)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Bool) T@U)
(declare-fun $generated@@9 (T@U) Bool)
(declare-fun $generated@@10 (Int) T@U)
(declare-fun $generated@@11 (T@U) Int)
(declare-fun $generated@@12 (Real) T@U)
(declare-fun $generated@@13 (T@U) Real)
(declare-fun $generated@@20 () Int)
(declare-fun $generated@@21 (T@U Int Int) Int)
(declare-fun $generated@@22 (T@U) T@U)
(declare-fun $generated@@23 (Int Int) Bool)
(declare-fun $generated@@24 (Int) Int)
(declare-fun $generated@@31 (T@U) T@U)
(declare-fun $generated@@32 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@33 () T@U)
(declare-fun $generated@@40 (T@T T@U) T@U)
(declare-fun $generated@@43 (T@T T@U) T@U)
(declare-fun $generated@@44 (T@T T@U) T@U)
(declare-fun $generated@@47 (T@T T@U T@U) Bool)
(declare-fun $generated@@60 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@61 () T@T)
(declare-fun $generated@@62 () T@T)
(declare-fun $generated@@63 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@64 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@65 () T@T)
(declare-fun $generated@@66 (T@T T@T) T@T)
(declare-fun $generated@@67 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@68 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@69 (T@T) T@T)
(declare-fun $generated@@70 (T@T) T@T)
(declare-fun $generated@@119 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@4 $generated@@5) 0) (= ($generated@@4 $generated@@6) 1)) (= ($generated@@4 $generated@@7) 2)) (forall (($generated@@14 Bool) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Int) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Real) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3)
)
(assert  (=> (<= 0 $generated@@20) (forall (($generated@@25 T@U) ($generated@@26 Int) ($generated@@27 Int) ) (!  (=> (or ($generated@@23 $generated@@26 $generated@@27) (and (< 0 $generated@@20) (and (<= ($generated@@24 0) $generated@@26) (<= ($generated@@24 0) $generated@@27)))) (and (=> (or (not (= $generated@@26 ($generated@@24 0))) (not true)) (and (=> (or (not (= $generated@@27 0)) (not true)) (let (($generated@@28 (+ $generated@@26 $generated@@26)))
 (and (=> (< $generated@@26 $generated@@28) ($generated@@23 $generated@@26 (- $generated@@27 1))) (=> (<= $generated@@28 $generated@@26) ($generated@@23 $generated@@26 (- $generated@@27 1)))))) (=> (= $generated@@27 0) ($generated@@23 (- $generated@@26 1) ($generated@@24 60))))) (= ($generated@@21 ($generated@@22 $generated@@25) $generated@@26 $generated@@27) (ite (= $generated@@26 ($generated@@24 0)) 0 (ite  (or (not (= $generated@@27 0)) (not true)) (let (($generated@@29 (+ $generated@@26 $generated@@26)))
(let (($generated@@30 (ite (< $generated@@26 $generated@@29) ($generated@@21 $generated@@25 $generated@@26 (- $generated@@27 1)) ($generated@@21 $generated@@25 $generated@@26 (- $generated@@27 1)))))
$generated@@30)) (+ ($generated@@21 $generated@@25 (- $generated@@26 1) ($generated@@24 60)) 13))))))
 :pattern ( ($generated@@21 ($generated@@22 $generated@@25) $generated@@26 $generated@@27))
))))
(assert (= ($generated@@31 $generated) $generated@@0))
(assert (forall (($generated@@34 T@U) ($generated@@35 T@U) ) (! ($generated@@32 $generated@@6 $generated@@34 $generated@@33 $generated@@35)
 :pattern ( ($generated@@32 $generated@@6 $generated@@34 $generated@@33 $generated@@35))
)))
(assert  (=> (<= 0 $generated@@20) (forall (($generated@@36 T@U) ($generated@@37 Int) ($generated@@38 Int) ) (!  (=> (or ($generated@@23 $generated@@37 $generated@@38) (and (< 0 $generated@@20) (and (<= ($generated@@24 0) $generated@@37) (<= ($generated@@24 0) $generated@@38)))) (<= ($generated@@24 0) ($generated@@21 $generated@@36 $generated@@37 $generated@@38)))
 :pattern ( ($generated@@21 $generated@@36 $generated@@37 $generated@@38))
))))
(assert (forall (($generated@@39 Int) ) (! (= ($generated@@24 $generated@@39) $generated@@39)
 :pattern ( ($generated@@24 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@T) ) (! (= ($generated@@40 $generated@@42 $generated@@41) $generated@@41)
 :pattern ( ($generated@@40 $generated@@42 $generated@@41))
)))
(assert (forall (($generated@@45 T@U) ($generated@@46 T@T) ) (! (= ($generated@@44 $generated@@46 ($generated@@43 $generated@@46 $generated@@45)) $generated@@45)
 :pattern ( ($generated@@43 $generated@@46 $generated@@45))
)))
(assert (forall (($generated@@48 T@U) ) (! (= ($generated@@47 $generated@@6 $generated@@48 $generated@@33) (<= ($generated@@24 0) ($generated@@11 $generated@@48)))
 :pattern ( ($generated@@47 $generated@@6 $generated@@48 $generated@@33))
)))
(assert (forall (($generated@@49 T@U) ($generated@@50 Int) ($generated@@51 Int) ) (! (= ($generated@@21 ($generated@@22 $generated@@49) $generated@@50 $generated@@51) ($generated@@21 $generated@@49 $generated@@50 $generated@@51))
 :pattern ( ($generated@@21 ($generated@@22 $generated@@49) $generated@@50 $generated@@51))
)))
(assert  (=> (<= 0 $generated@@20) (forall (($generated@@52 T@U) ($generated@@53 Int) ($generated@@54 Int) ) (!  (=> (or ($generated@@23 ($generated@@24 $generated@@53) ($generated@@24 $generated@@54)) (and (< 0 $generated@@20) (and (<= ($generated@@24 0) $generated@@53) (<= ($generated@@24 0) $generated@@54)))) (and (=> (or (not (= ($generated@@24 $generated@@53) ($generated@@24 0))) (not true)) (and (=> ($generated@@9 ($generated@@40 $generated@@5 ($generated@@8  (or (not (= $generated@@54 0)) (not true))))) (let (($generated@@55 ($generated@@24 (+ $generated@@53 $generated@@53))))
 (and (=> (< $generated@@53 $generated@@55) ($generated@@23 ($generated@@24 $generated@@53) ($generated@@24 (- $generated@@54 1)))) (=> (<= $generated@@55 $generated@@53) ($generated@@23 ($generated@@24 $generated@@53) ($generated@@24 (- $generated@@54 1))))))) (=> (not ($generated@@9 ($generated@@40 $generated@@5 ($generated@@8  (or (not (= $generated@@54 0)) (not true)))))) ($generated@@23 ($generated@@24 (- $generated@@53 1)) ($generated@@24 60))))) (= ($generated@@21 ($generated@@22 $generated@@52) ($generated@@24 $generated@@53) ($generated@@24 $generated@@54)) (ite (= ($generated@@24 $generated@@53) ($generated@@24 0)) 0 (ite  (or (not (= $generated@@54 0)) (not true)) (let (($generated@@56 ($generated@@24 (+ $generated@@53 $generated@@53))))
(let (($generated@@57 (ite (< $generated@@53 $generated@@56) ($generated@@21 ($generated@@22 $generated@@52) ($generated@@24 $generated@@53) ($generated@@24 (- $generated@@54 1))) ($generated@@21 ($generated@@22 $generated@@52) ($generated@@24 $generated@@53) ($generated@@24 (- $generated@@54 1))))))
$generated@@57)) (+ ($generated@@21 ($generated@@22 $generated@@52) ($generated@@24 (- $generated@@53 1)) ($generated@@24 60)) 13))))))
 :weight 3
 :pattern ( ($generated@@21 ($generated@@22 $generated@@52) ($generated@@24 $generated@@53) ($generated@@24 $generated@@54)))
))))
(assert (forall (($generated@@58 T@U) ($generated@@59 T@T) ) (! (= ($generated@@43 $generated@@59 ($generated@@44 $generated@@59 $generated@@58)) $generated@@58)
 :pattern ( ($generated@@44 $generated@@59 $generated@@58))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@71 T@T) ($generated@@72 T@T) ($generated@@73 T@T) ($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (! (= ($generated@@60 $generated@@71 $generated@@72 $generated@@73 ($generated@@67 $generated@@71 $generated@@72 $generated@@73 $generated@@75 $generated@@76 $generated@@77 $generated@@74) $generated@@76 $generated@@77) $generated@@74)
 :weight 0
)) (and (forall (($generated@@78 T@T) ($generated@@79 T@T) ($generated@@80 T@T) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (!  (or (= $generated@@83 $generated@@85) (= ($generated@@60 $generated@@78 $generated@@79 $generated@@80 ($generated@@67 $generated@@78 $generated@@79 $generated@@80 $generated@@82 $generated@@83 $generated@@84 $generated@@81) $generated@@85 $generated@@86) ($generated@@60 $generated@@78 $generated@@79 $generated@@80 $generated@@82 $generated@@85 $generated@@86)))
 :weight 0
)) (forall (($generated@@87 T@T) ($generated@@88 T@T) ($generated@@89 T@T) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ) (!  (or (= $generated@@93 $generated@@95) (= ($generated@@60 $generated@@87 $generated@@88 $generated@@89 ($generated@@67 $generated@@87 $generated@@88 $generated@@89 $generated@@91 $generated@@92 $generated@@93 $generated@@90) $generated@@94 $generated@@95) ($generated@@60 $generated@@87 $generated@@88 $generated@@89 $generated@@91 $generated@@94 $generated@@95)))
 :weight 0
)))) (= ($generated@@4 $generated@@61) 3)) (= ($generated@@4 $generated@@62) 4)) (forall (($generated@@96 T@T) ($generated@@97 T@T) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ) (! (= ($generated@@64 $generated@@96 $generated@@97 ($generated@@68 $generated@@96 $generated@@97 $generated@@99 $generated@@100 $generated@@98) $generated@@100) $generated@@98)
 :weight 0
))) (forall (($generated@@101 T@T) ($generated@@102 T@T) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or (= $generated@@105 $generated@@106) (= ($generated@@64 $generated@@101 $generated@@102 ($generated@@68 $generated@@101 $generated@@102 $generated@@104 $generated@@105 $generated@@103) $generated@@106) ($generated@@64 $generated@@101 $generated@@102 $generated@@104 $generated@@106)))
 :weight 0
))) (= ($generated@@4 $generated@@65) 5)) (forall (($generated@@107 T@T) ($generated@@108 T@T) ) (= ($generated@@4 ($generated@@66 $generated@@107 $generated@@108)) 6))) (forall (($generated@@109 T@T) ($generated@@110 T@T) ) (! (= ($generated@@69 ($generated@@66 $generated@@109 $generated@@110)) $generated@@109)
 :pattern ( ($generated@@66 $generated@@109 $generated@@110))
))) (forall (($generated@@111 T@T) ($generated@@112 T@T) ) (! (= ($generated@@70 ($generated@@66 $generated@@111 $generated@@112)) $generated@@112)
 :pattern ( ($generated@@66 $generated@@111 $generated@@112))
))))
(assert (forall (($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 Bool) ($generated@@117 T@U) ($generated@@118 T@U) ) (! (= ($generated@@9 ($generated@@60 $generated@@61 $generated@@62 $generated@@5 ($generated@@63 $generated@@113 $generated@@114 $generated@@115 $generated@@116) $generated@@117 $generated@@118))  (=> (and (or (not (= $generated@@117 $generated@@113)) (not true)) ($generated@@9 ($generated@@43 $generated@@5 ($generated@@64 $generated@@62 $generated@@65 ($generated@@64 $generated@@61 ($generated@@66 $generated@@62 $generated@@65) $generated@@114 $generated@@117) $generated@@115)))) $generated@@116))
 :pattern ( ($generated@@60 $generated@@61 $generated@@62 $generated@@5 ($generated@@63 $generated@@113 $generated@@114 $generated@@115 $generated@@116) $generated@@117 $generated@@118))
)))
(assert (= ($generated@@31 $generated@@33) $generated@@2))
(assert (= ($generated@@119 $generated@@33) $generated@@3))
(assert (forall (($generated@@120 Int) ) (! (= ($generated@@44 $generated@@6 ($generated@@10 ($generated@@24 $generated@@120))) ($generated@@40 $generated@@65 ($generated@@44 $generated@@6 ($generated@@10 $generated@@120))))
 :pattern ( ($generated@@44 $generated@@6 ($generated@@10 ($generated@@24 $generated@@120))))
)))
(assert (forall (($generated@@121 T@U) ($generated@@122 T@T) ) (! (= ($generated@@44 $generated@@122 ($generated@@40 $generated@@122 $generated@@121)) ($generated@@40 $generated@@65 ($generated@@44 $generated@@122 $generated@@121)))
 :pattern ( ($generated@@44 $generated@@122 ($generated@@40 $generated@@122 $generated@@121)))
)))
(assert (forall (($generated@@123 T@U) ($generated@@124 T@U) ) (! ($generated@@32 $generated@@6 $generated@@124 $generated $generated@@123)
 :pattern ( ($generated@@32 $generated@@6 $generated@@124 $generated $generated@@123))
)))
(assert (forall (($generated@@125 T@U) ) (! ($generated@@47 $generated@@6 $generated@@125 $generated)
 :pattern ( ($generated@@47 $generated@@6 $generated@@125 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@126 () Int)
(declare-fun $generated@@127 () Int)
(declare-fun $generated@@128 () Int)
(declare-fun $generated@@129 () Int)
(declare-fun $generated@@130 () Int)
(declare-fun $generated@@131 () T@U)
(declare-fun $generated@@132 () Int)
(declare-fun $generated@@133 () Int)
(declare-fun $generated@@134 () Int)
(declare-fun $generated@@135 () T@U)
(declare-fun $generated@@136 () Int)
(declare-fun $generated@@137 () Int)
(declare-fun $generated@@138 () Int)
(declare-fun $generated@@139 () Int)
(declare-fun $generated@@140 () Int)
(declare-fun $generated@@141 () Int)
(declare-fun $generated@@142 () Int)
(declare-fun $generated@@143 () T@U)
(declare-fun $generated@@144 () T@U)
(declare-fun $generated@@145 (T@U) Bool)
(declare-fun $generated@@146 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 31) (let (($generated@@147  (=> (= $generated@@126 $generated@@127) (=> (and (and (= $generated@@128 ($generated@@24 200)) ($generated@@47 $generated@@6 ($generated@@10 $generated@@128) $generated)) (and (= $generated@@129 $generated@@128) ($generated@@32 $generated@@6 ($generated@@10 $generated@@130) $generated@@33 $generated@@131))) (and (=> (= (ControlFlow 0 12) (- 0 17)) ($generated@@47 $generated@@6 ($generated@@10 (- $generated@@132 1)) $generated@@33)) (=> ($generated@@47 $generated@@6 ($generated@@10 (- $generated@@132 1)) $generated@@33) (=> (and (= $generated@@133 (- $generated@@132 1)) ($generated@@32 $generated@@6 ($generated@@10 $generated@@133) $generated@@33 $generated@@131)) (and (=> (= (ControlFlow 0 12) (- 0 16)) (or (<= 0 $generated@@130) (= $generated@@130 $generated@@130))) (=> (or (<= 0 $generated@@130) (= $generated@@130 $generated@@130)) (and (=> (= (ControlFlow 0 12) (- 0 15)) (or (or (<= 0 $generated@@132) (< $generated@@130 $generated@@130)) (= $generated@@133 $generated@@132))) (=> (or (or (<= 0 $generated@@132) (< $generated@@130 $generated@@130)) (= $generated@@133 $generated@@132)) (and (=> (= (ControlFlow 0 12) (- 0 14)) (or (< $generated@@130 $generated@@130) (and (= $generated@@130 $generated@@130) (< $generated@@133 $generated@@132)))) (=> (or (< $generated@@130 $generated@@130) (and (= $generated@@130 $generated@@130) (< $generated@@133 $generated@@132))) (=> (and ($generated@@23 $generated@@130 (- $generated@@132 1)) ($generated@@23 $generated@@130 (- $generated@@132 1))) (and (=> (= (ControlFlow 0 12) (- 0 13)) (= (+ (+ $generated@@134 $generated@@126) $generated@@129) (+ ($generated@@21 ($generated@@22 ($generated@@22 $generated@@135)) $generated@@130 (- $generated@@132 1)) 300))) (=> (and (= (+ (+ $generated@@134 $generated@@126) $generated@@129) (+ ($generated@@21 ($generated@@22 $generated@@135) $generated@@130 (- $generated@@132 1)) 300)) (= (ControlFlow 0 12) (- 0 11))) ($generated@@47 $generated@@6 ($generated@@10 $generated@@126) $generated@@33)))))))))))))))))
(let (($generated@@148  (=> (and (<= $generated@@136 $generated@@130) ($generated@@32 $generated@@6 ($generated@@10 $generated@@130) $generated@@33 $generated@@131)) (and (=> (= (ControlFlow 0 23) (- 0 27)) ($generated@@47 $generated@@6 ($generated@@10 (- $generated@@132 1)) $generated@@33)) (=> ($generated@@47 $generated@@6 ($generated@@10 (- $generated@@132 1)) $generated@@33) (=> (and (= $generated@@137 (- $generated@@132 1)) ($generated@@32 $generated@@6 ($generated@@10 $generated@@137) $generated@@33 $generated@@131)) (and (=> (= (ControlFlow 0 23) (- 0 26)) (or (<= 0 $generated@@130) (= $generated@@130 $generated@@130))) (=> (or (<= 0 $generated@@130) (= $generated@@130 $generated@@130)) (and (=> (= (ControlFlow 0 23) (- 0 25)) (or (or (<= 0 $generated@@132) (< $generated@@130 $generated@@130)) (= $generated@@137 $generated@@132))) (=> (or (or (<= 0 $generated@@132) (< $generated@@130 $generated@@130)) (= $generated@@137 $generated@@132)) (and (=> (= (ControlFlow 0 23) (- 0 24)) (or (< $generated@@130 $generated@@130) (and (= $generated@@130 $generated@@130) (< $generated@@137 $generated@@132)))) (=> (or (< $generated@@130 $generated@@130) (and (= $generated@@130 $generated@@130) (< $generated@@137 $generated@@132))) (=> ($generated@@23 $generated@@130 (- $generated@@132 1)) (=> (and (and (= $generated@@127 ($generated@@21 ($generated@@22 $generated@@135) $generated@@130 (- $generated@@132 1))) ($generated@@23 $generated@@130 (- $generated@@132 1))) (and ($generated@@47 $generated@@6 ($generated@@10 $generated@@127) $generated) (= (ControlFlow 0 23) 12))) $generated@@147))))))))))))))
(let (($generated@@149  (=> (and (< $generated@@130 $generated@@136) ($generated@@32 $generated@@6 ($generated@@10 $generated@@130) $generated@@33 $generated@@131)) (and (=> (= (ControlFlow 0 18) (- 0 22)) ($generated@@47 $generated@@6 ($generated@@10 (- $generated@@132 1)) $generated@@33)) (=> ($generated@@47 $generated@@6 ($generated@@10 (- $generated@@132 1)) $generated@@33) (=> (and (= $generated@@138 (- $generated@@132 1)) ($generated@@32 $generated@@6 ($generated@@10 $generated@@138) $generated@@33 $generated@@131)) (and (=> (= (ControlFlow 0 18) (- 0 21)) (or (<= 0 $generated@@130) (= $generated@@130 $generated@@130))) (=> (or (<= 0 $generated@@130) (= $generated@@130 $generated@@130)) (and (=> (= (ControlFlow 0 18) (- 0 20)) (or (or (<= 0 $generated@@132) (< $generated@@130 $generated@@130)) (= $generated@@138 $generated@@132))) (=> (or (or (<= 0 $generated@@132) (< $generated@@130 $generated@@130)) (= $generated@@138 $generated@@132)) (and (=> (= (ControlFlow 0 18) (- 0 19)) (or (< $generated@@130 $generated@@130) (and (= $generated@@130 $generated@@130) (< $generated@@138 $generated@@132)))) (=> (or (< $generated@@130 $generated@@130) (and (= $generated@@130 $generated@@130) (< $generated@@138 $generated@@132))) (=> ($generated@@23 $generated@@130 (- $generated@@132 1)) (=> (and (and (= $generated@@127 ($generated@@21 ($generated@@22 $generated@@135) $generated@@130 (- $generated@@132 1))) ($generated@@23 $generated@@130 (- $generated@@132 1))) (and ($generated@@47 $generated@@6 ($generated@@10 $generated@@127) $generated) (= (ControlFlow 0 18) 12))) $generated@@147))))))))))))))
(let (($generated@@150  (=> (or (not (= $generated@@132 0)) (not true)) (=> (and (= $generated@@139 (+ $generated@@130 $generated@@130)) ($generated@@47 $generated@@6 ($generated@@10 $generated@@139) $generated)) (=> (and (and (= $generated@@136 $generated@@139) (= $generated@@140 ($generated@@24 100))) (and ($generated@@47 $generated@@6 ($generated@@10 $generated@@140) $generated) (= $generated@@134 $generated@@140))) (and (=> (= (ControlFlow 0 28) 18) $generated@@149) (=> (= (ControlFlow 0 28) 23) $generated@@148)))))))
(let (($generated@@151  (=> (= $generated@@132 0) (and (=> (= (ControlFlow 0 5) (- 0 10)) ($generated@@47 $generated@@6 ($generated@@10 (- $generated@@130 1)) $generated@@33)) (=> ($generated@@47 $generated@@6 ($generated@@10 (- $generated@@130 1)) $generated@@33) (=> (and (= $generated@@141 (- $generated@@130 1)) ($generated@@32 $generated@@6 ($generated@@10 $generated@@141) $generated@@33 $generated@@131)) (and (=> (= (ControlFlow 0 5) (- 0 9)) ($generated@@47 $generated@@6 ($generated@@10 ($generated@@24 60)) $generated@@33)) (=> ($generated@@47 $generated@@6 ($generated@@10 ($generated@@24 60)) $generated@@33) (=> (and (= $generated@@142 ($generated@@24 60)) ($generated@@32 $generated@@6 ($generated@@10 $generated@@142) $generated@@33 $generated@@131)) (and (=> (= (ControlFlow 0 5) (- 0 8)) (or (<= 0 $generated@@130) (= $generated@@141 $generated@@130))) (=> (or (<= 0 $generated@@130) (= $generated@@141 $generated@@130)) (and (=> (= (ControlFlow 0 5) (- 0 7)) (or (or (<= 0 $generated@@132) (< $generated@@141 $generated@@130)) (= $generated@@142 $generated@@132))) (=> (or (or (<= 0 $generated@@132) (< $generated@@141 $generated@@130)) (= $generated@@142 $generated@@132)) (and (=> (= (ControlFlow 0 5) (- 0 6)) (or (< $generated@@141 $generated@@130) (and (= $generated@@141 $generated@@130) (< $generated@@142 $generated@@132)))) (=> (or (< $generated@@141 $generated@@130) (and (= $generated@@141 $generated@@130) (< $generated@@142 $generated@@132))) (=> (and ($generated@@23 (- $generated@@130 1) ($generated@@24 60)) (= (ControlFlow 0 5) (- 0 4))) ($generated@@47 $generated@@6 ($generated@@10 (+ ($generated@@21 ($generated@@22 $generated@@135) (- $generated@@130 1) ($generated@@24 60)) 13)) $generated@@33)))))))))))))))))
(let (($generated@@152  (=> (or (not (= $generated@@130 ($generated@@24 0))) (not true)) (and (=> (= (ControlFlow 0 29) 28) $generated@@150) (=> (= (ControlFlow 0 29) 5) $generated@@151)))))
(let (($generated@@153  (=> (and (= $generated@@130 ($generated@@24 0)) (= (ControlFlow 0 3) (- 0 2))) ($generated@@47 $generated@@6 ($generated@@10 ($generated@@24 0)) $generated@@33))))
(let (($generated@@154 true))
(let (($generated@@155  (=> (= $generated@@143 ($generated@@63 $generated@@144 $generated@@131 $generated@@1 false)) (and (and (=> (= (ControlFlow 0 30) 1) $generated@@154) (=> (= (ControlFlow 0 30) 3) $generated@@153)) (=> (= (ControlFlow 0 30) 29) $generated@@152)))))
(let (($generated@@156  (=> (and ($generated@@145 $generated@@131) ($generated@@146 $generated@@131)) (=> (and (and (<= ($generated@@24 0) $generated@@130) (<= ($generated@@24 0) $generated@@132)) (and (= 0 $generated@@20) (= (ControlFlow 0 31) 30))) $generated@@155))))
$generated@@156)))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
