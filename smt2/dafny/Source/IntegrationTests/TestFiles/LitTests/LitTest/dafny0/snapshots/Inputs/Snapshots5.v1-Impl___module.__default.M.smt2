(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U T@U) Bool)
(declare-fun $generated@@0 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@1 () T@T)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 (T@T T@T) T@T)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 (T@U) Bool)
(declare-fun $generated@@7 (T@T T@U) T@U)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (T@T) Int)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 () T@T)
(declare-fun $generated@@12 (Bool) T@U)
(declare-fun $generated@@13 (Int) T@U)
(declare-fun $generated@@14 (T@U) Int)
(declare-fun $generated@@15 (Real) T@U)
(declare-fun $generated@@16 (T@U) Real)
(declare-fun $generated@@17 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@18 (T@T) T@T)
(declare-fun $generated@@19 (T@T) T@T)
(declare-fun $generated@@46 (T@T T@U) T@U)
(declare-fun $generated@@49 (T@T T@U) T@U)
(declare-fun $generated@@57 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@58 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@59 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@9 $generated@@8) 0) (= ($generated@@9 $generated@@10) 1)) (= ($generated@@9 $generated@@11) 2)) (forall (($generated@@20 Bool) ) (! (= ($generated@@6 ($generated@@12 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@12 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@12 ($generated@@6 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@6 $generated@@21))
))) (forall (($generated@@22 Int) ) (! (= ($generated@@14 ($generated@@13 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@13 $generated@@22))
))) (forall (($generated@@23 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@14 $generated@@23))
))) (forall (($generated@@24 Real) ) (! (= ($generated@@16 ($generated@@15 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@15 $generated@@24))
))) (forall (($generated@@25 T@U) ) (! (= ($generated@@15 ($generated@@16 $generated@@25)) $generated@@25)
 :pattern ( ($generated@@16 $generated@@25))
))) (forall (($generated@@26 T@T) ($generated@@27 T@T) ($generated@@28 T@U) ($generated@@29 T@U) ($generated@@30 T@U) ) (! (= ($generated@@0 $generated@@26 $generated@@27 ($generated@@17 $generated@@26 $generated@@27 $generated@@29 $generated@@30 $generated@@28) $generated@@30) $generated@@28)
 :weight 0
))) (forall (($generated@@31 T@T) ($generated@@32 T@T) ($generated@@33 T@U) ($generated@@34 T@U) ($generated@@35 T@U) ($generated@@36 T@U) ) (!  (or (= $generated@@35 $generated@@36) (= ($generated@@0 $generated@@31 $generated@@32 ($generated@@17 $generated@@31 $generated@@32 $generated@@34 $generated@@35 $generated@@33) $generated@@36) ($generated@@0 $generated@@31 $generated@@32 $generated@@34 $generated@@36)))
 :weight 0
))) (= ($generated@@9 $generated@@1) 3)) (= ($generated@@9 $generated@@2) 4)) (= ($generated@@9 $generated@@3) 5)) (forall (($generated@@37 T@T) ($generated@@38 T@T) ) (= ($generated@@9 ($generated@@4 $generated@@37 $generated@@38)) 6))) (forall (($generated@@39 T@T) ($generated@@40 T@T) ) (! (= ($generated@@18 ($generated@@4 $generated@@39 $generated@@40)) $generated@@39)
 :pattern ( ($generated@@4 $generated@@39 $generated@@40))
))) (forall (($generated@@41 T@T) ($generated@@42 T@T) ) (! (= ($generated@@19 ($generated@@4 $generated@@41 $generated@@42)) $generated@@42)
 :pattern ( ($generated@@4 $generated@@41 $generated@@42))
))))
(assert (forall (($generated@@43 T@U) ($generated@@44 T@U) ) (!  (=> ($generated $generated@@43 $generated@@44) (forall (($generated@@45 T@U) ) (!  (=> ($generated@@6 ($generated@@7 $generated@@8 ($generated@@0 $generated@@1 $generated@@2 ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@43 $generated@@45) $generated@@5))) ($generated@@6 ($generated@@7 $generated@@8 ($generated@@0 $generated@@1 $generated@@2 ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@44 $generated@@45) $generated@@5))))
 :pattern ( ($generated@@0 $generated@@1 $generated@@2 ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@44 $generated@@45) $generated@@5))
)))
 :pattern ( ($generated $generated@@43 $generated@@44))
)))
(assert (forall (($generated@@47 T@U) ($generated@@48 T@T) ) (! (= ($generated@@46 $generated@@48 $generated@@47) $generated@@47)
 :pattern ( ($generated@@46 $generated@@48 $generated@@47))
)))
(assert (forall (($generated@@50 T@U) ($generated@@51 T@T) ) (! (= ($generated@@49 $generated@@51 ($generated@@7 $generated@@51 $generated@@50)) $generated@@50)
 :pattern ( ($generated@@7 $generated@@51 $generated@@50))
)))
(assert (forall (($generated@@52 T@U) ($generated@@53 T@U) ($generated@@54 T@U) ) (!  (=> (or (not (= $generated@@52 $generated@@54)) (not true)) (=> (and ($generated $generated@@52 $generated@@53) ($generated $generated@@53 $generated@@54)) ($generated $generated@@52 $generated@@54)))
 :pattern ( ($generated $generated@@52 $generated@@53) ($generated $generated@@53 $generated@@54))
)))
(assert (forall (($generated@@55 T@U) ($generated@@56 T@T) ) (! (= ($generated@@7 $generated@@56 ($generated@@49 $generated@@56 $generated@@55)) $generated@@55)
 :pattern ( ($generated@@49 $generated@@56 $generated@@55))
)))
(assert  (and (forall (($generated@@60 T@T) ($generated@@61 T@T) ($generated@@62 T@T) ($generated@@63 T@U) ($generated@@64 T@U) ($generated@@65 T@U) ($generated@@66 T@U) ) (! (= ($generated@@57 $generated@@60 $generated@@61 $generated@@62 ($generated@@59 $generated@@60 $generated@@61 $generated@@62 $generated@@64 $generated@@65 $generated@@66 $generated@@63) $generated@@65 $generated@@66) $generated@@63)
 :weight 0
)) (and (forall (($generated@@67 T@T) ($generated@@68 T@T) ($generated@@69 T@T) ($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@U) ) (!  (or (= $generated@@72 $generated@@74) (= ($generated@@57 $generated@@67 $generated@@68 $generated@@69 ($generated@@59 $generated@@67 $generated@@68 $generated@@69 $generated@@71 $generated@@72 $generated@@73 $generated@@70) $generated@@74 $generated@@75) ($generated@@57 $generated@@67 $generated@@68 $generated@@69 $generated@@71 $generated@@74 $generated@@75)))
 :weight 0
)) (forall (($generated@@76 T@T) ($generated@@77 T@T) ($generated@@78 T@T) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ) (!  (or (= $generated@@82 $generated@@84) (= ($generated@@57 $generated@@76 $generated@@77 $generated@@78 ($generated@@59 $generated@@76 $generated@@77 $generated@@78 $generated@@80 $generated@@81 $generated@@82 $generated@@79) $generated@@83 $generated@@84) ($generated@@57 $generated@@76 $generated@@77 $generated@@78 $generated@@80 $generated@@83 $generated@@84)))
 :weight 0
)))))
(assert (forall (($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 Bool) ($generated@@89 T@U) ($generated@@90 T@U) ) (! (= ($generated@@6 ($generated@@57 $generated@@3 $generated@@1 $generated@@8 ($generated@@58 $generated@@85 $generated@@86 $generated@@87 $generated@@88) $generated@@89 $generated@@90))  (=> (and (or (not (= $generated@@89 $generated@@85)) (not true)) ($generated@@6 ($generated@@7 $generated@@8 ($generated@@0 $generated@@1 $generated@@2 ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@86 $generated@@89) $generated@@87)))) $generated@@88))
 :pattern ( ($generated@@57 $generated@@3 $generated@@1 $generated@@8 ($generated@@58 $generated@@85 $generated@@86 $generated@@87 $generated@@88) $generated@@89 $generated@@90))
)))
(assert (forall (($generated@@91 T@U) ($generated@@92 T@T) ) (! (= ($generated@@49 $generated@@92 ($generated@@46 $generated@@92 $generated@@91)) ($generated@@46 $generated@@2 ($generated@@49 $generated@@92 $generated@@91)))
 :pattern ( ($generated@@49 $generated@@92 ($generated@@46 $generated@@92 $generated@@91)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@93 () Bool)
(declare-fun $generated@@94 (T@U) Bool)
(declare-fun $generated@@95 () T@U)
(declare-fun $generated@@96 (T@U) Bool)
(declare-fun $generated@@97 () T@U)
(declare-fun $generated@@98 () T@U)
(declare-fun $generated@@99 () Bool)
(declare-fun $generated@@100 () T@U)
(declare-fun $generated@@101 () T@U)
(declare-fun $generated@@102 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 35) (let (($generated@@103  (=> (= (ControlFlow 0 6) (- 0 5)) (or (exists (($generated@@104 Bool) ) ($generated@@6 ($generated@@46 $generated@@8 ($generated@@12 true)))) (or (not (= 5 5)) (not true))))))
(let (($generated@@105  (=> (and (exists (($generated@@106 Bool) ) ($generated@@6 ($generated@@46 $generated@@8 ($generated@@12 true)))) (= (ControlFlow 0 8) 6)) $generated@@103)))
(let (($generated@@107  (=> (and (not (exists (($generated@@108 Bool) ) ($generated@@6 ($generated@@46 $generated@@8 ($generated@@12 true))))) (= (ControlFlow 0 7) 6)) $generated@@103)))
(let (($generated@@109  (and (=> (= (ControlFlow 0 9) 7) $generated@@107) (=> (= (ControlFlow 0 9) 8) $generated@@105))))
(let (($generated@@110 true))
(let (($generated@@111  (and (=> (= (ControlFlow 0 11) (- 0 12)) (or (exists (($generated@@112 Bool) ) ($generated@@6 ($generated@@46 $generated@@8 ($generated@@12 true)))) (or (not (= 4 4)) (not true)))) (=> (or (exists (($generated@@113 Bool) ) ($generated@@6 ($generated@@46 $generated@@8 ($generated@@12 true)))) (or (not (= 4 4)) (not true))) (and (=> (= (ControlFlow 0 11) 9) $generated@@109) (=> (= (ControlFlow 0 11) 4) $generated@@110))))))
(let (($generated@@114  (=> (and (exists (($generated@@115 Bool) ) ($generated@@6 ($generated@@46 $generated@@8 ($generated@@12 true)))) (= (ControlFlow 0 14) 11)) $generated@@111)))
(let (($generated@@116  (=> (and (not (exists (($generated@@117 Bool) ) ($generated@@6 ($generated@@46 $generated@@8 ($generated@@12 true))))) (= (ControlFlow 0 13) 11)) $generated@@111)))
(let (($generated@@118  (and (=> (= (ControlFlow 0 15) 13) $generated@@116) (=> (= (ControlFlow 0 15) 14) $generated@@114))))
(let (($generated@@119  (and (=> (= (ControlFlow 0 10) 9) $generated@@109) (=> (= (ControlFlow 0 10) 4) $generated@@110))))
(let (($generated@@120 true))
(let (($generated@@121  (and (=> (= (ControlFlow 0 16) 15) $generated@@118) (=> (= (ControlFlow 0 16) 3) $generated@@120))))
(let (($generated@@122  (and (=> (= (ControlFlow 0 17) (- 0 18)) (or (forall (($generated@@123 Bool) )  (or $generated@@123 (not $generated@@123))) (or (not (= 3 3)) (not true)))) (=> (or (forall (($generated@@124 Bool) )  (or $generated@@124 (not $generated@@124))) (or (not (= 3 3)) (not true))) (and (=> (= (ControlFlow 0 17) 10) $generated@@119) (=> (= (ControlFlow 0 17) 16) $generated@@121))))))
(let (($generated@@125  (=> (and (forall (($generated@@126 Bool) )  (or $generated@@126 (not $generated@@126))) (= (ControlFlow 0 20) 17)) $generated@@122)))
(let (($generated@@127  (=> (and (not (forall (($generated@@128 Bool) )  (or $generated@@128 (not $generated@@128)))) (= (ControlFlow 0 19) 17)) $generated@@122)))
(let (($generated@@129  (=> $generated@@93 (and (=> (= (ControlFlow 0 22) 19) $generated@@127) (=> (= (ControlFlow 0 22) 20) $generated@@125)))))
(let (($generated@@130  (=> (not $generated@@93) (and (=> (= (ControlFlow 0 21) 19) $generated@@127) (=> (= (ControlFlow 0 21) 20) $generated@@125)))))
(let (($generated@@131  (and (=> (= (ControlFlow 0 23) 21) $generated@@130) (=> (= (ControlFlow 0 23) 22) $generated@@129))))
(let (($generated@@132 true))
(let (($generated@@133  (=> (and (and (and ($generated@@94 $generated@@95) ($generated@@96 $generated@@95)) (or (forall (($generated@@134 Bool) )  (or $generated@@134 (not $generated@@134))) (or (not (= 2 2)) (not true)))) (and (forall (($generated@@135 T@U) ) (!  (=> (and (or (not (= $generated@@135 $generated@@97)) (not true)) ($generated@@6 ($generated@@7 $generated@@8 ($generated@@0 $generated@@1 $generated@@2 ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@98 $generated@@135) $generated@@5)))) (= ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@95 $generated@@135) ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@98 $generated@@135)))
 :pattern ( ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@95 $generated@@135))
)) ($generated $generated@@98 $generated@@95))) (and (=> (= (ControlFlow 0 24) 23) $generated@@131) (=> (= (ControlFlow 0 24) 2) $generated@@132)))))
(let (($generated@@136  (and (=> (= (ControlFlow 0 26) (- 0 27)) (or (forall (($generated@@137 Bool) )  (or $generated@@137 (not $generated@@137))) (or (not (= 0 0)) (not true)))) (=> (or (forall (($generated@@138 Bool) )  (or $generated@@138 (not $generated@@138))) (or (not (= 0 0)) (not true))) (=> (= (ControlFlow 0 26) 24) $generated@@133)))))
(let (($generated@@139  (=> (and (forall (($generated@@140 Bool) )  (or $generated@@140 (not $generated@@140))) (= (ControlFlow 0 29) 26)) $generated@@136)))
(let (($generated@@141  (=> (and (not (forall (($generated@@142 Bool) )  (or $generated@@142 (not $generated@@142)))) (= (ControlFlow 0 28) 26)) $generated@@136)))
(let (($generated@@143  (=> $generated@@99 (and (=> (= (ControlFlow 0 31) 28) $generated@@141) (=> (= (ControlFlow 0 31) 29) $generated@@139)))))
(let (($generated@@144  (=> (not $generated@@99) (and (=> (= (ControlFlow 0 30) 28) $generated@@141) (=> (= (ControlFlow 0 30) 29) $generated@@139)))))
(let (($generated@@145  (and (=> (= (ControlFlow 0 32) 30) $generated@@144) (=> (= (ControlFlow 0 32) 31) $generated@@143))))
(let (($generated@@146  (=> (= (ControlFlow 0 25) 24) $generated@@133)))
(let (($generated@@147 true))
(let (($generated@@148  (and (=> (= (ControlFlow 0 33) 32) $generated@@145) (=> (= (ControlFlow 0 33) 1) $generated@@147))))
(let (($generated@@149  (=> (= $generated@@100 ($generated@@58 $generated@@97 $generated@@101 $generated@@5 false)) (=> (and (and (and ($generated@@94 $generated@@98) ($generated@@96 $generated@@98)) (or (forall (($generated@@150 Bool) )  (or $generated@@150 (not $generated@@150))) (or (not (= 2 2)) (not true)))) (and (forall (($generated@@151 T@U) ) (!  (=> (and (or (not (= $generated@@151 $generated@@97)) (not true)) ($generated@@6 ($generated@@7 $generated@@8 ($generated@@0 $generated@@1 $generated@@2 ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@101 $generated@@151) $generated@@5)))) (= ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@98 $generated@@151) ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@101 $generated@@151)))
 :pattern ( ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@98 $generated@@151))
)) ($generated $generated@@101 $generated@@98))) (and (=> (= (ControlFlow 0 34) 25) $generated@@146) (=> (= (ControlFlow 0 34) 33) $generated@@148))))))
(let (($generated@@152  (=> (and (and ($generated@@94 $generated@@101) ($generated@@96 $generated@@101)) (and (= 1 $generated@@102) (= (ControlFlow 0 35) 34))) $generated@@149)))
$generated@@152))))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
