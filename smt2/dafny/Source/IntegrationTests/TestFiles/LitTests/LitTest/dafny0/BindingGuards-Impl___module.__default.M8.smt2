(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (Bool) T@U)
(declare-fun $generated@@7 (T@U) Bool)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun $generated@@9 (T@U) Int)
(declare-fun $generated@@10 (Real) T@U)
(declare-fun $generated@@11 (T@U) Real)
(declare-fun $generated@@18 (T@U) T@U)
(declare-fun $generated@@19 (Int) Int)
(declare-fun $generated@@21 (T@T T@U) T@U)
(declare-fun $generated@@24 (T@T T@U) T@U)
(declare-fun $generated@@25 (T@T T@U) T@U)
(declare-fun $generated@@28 () Int)
(declare-fun $generated@@29 (Int) Bool)
(declare-fun $generated@@30 (Int) Bool)
(declare-fun $generated@@31 (Int Int) Int)
(declare-fun $generated@@36 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@37 () T@T)
(declare-fun $generated@@38 () T@T)
(declare-fun $generated@@39 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@40 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@41 () T@T)
(declare-fun $generated@@42 (T@T T@T) T@T)
(declare-fun $generated@@43 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@44 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@45 (T@T) T@T)
(declare-fun $generated@@46 (T@T) T@T)
(declare-fun $generated@@100 (T@T T@U T@U T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@4) 1)) (= ($generated@@2 $generated@@5) 2)) (forall (($generated@@12 Bool) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Int) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Real) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))))
(assert (distinct $generated $generated@@0 $generated@@1)
)
(assert (= ($generated@@18 $generated) $generated@@0))
(assert (forall (($generated@@20 Int) ) (! (= ($generated@@19 $generated@@20) $generated@@20)
 :pattern ( ($generated@@19 $generated@@20))
)))
(assert (forall (($generated@@22 T@U) ($generated@@23 T@T) ) (! (= ($generated@@21 $generated@@23 $generated@@22) $generated@@22)
 :pattern ( ($generated@@21 $generated@@23 $generated@@22))
)))
(assert (forall (($generated@@26 T@U) ($generated@@27 T@T) ) (! (= ($generated@@25 $generated@@27 ($generated@@24 $generated@@27 $generated@@26)) $generated@@26)
 :pattern ( ($generated@@24 $generated@@27 $generated@@26))
)))
(assert  (=> (<= 0 $generated@@28) (forall (($generated@@32 Int) ) (!  (=> (or ($generated@@30 $generated@@32) (< 0 $generated@@28)) (= ($generated@@29 $generated@@32) (= ($generated@@31 $generated@@32 ($generated@@19 2)) ($generated@@19 0))))
 :pattern ( ($generated@@29 $generated@@32))
))))
(assert  (=> (<= 0 $generated@@28) (forall (($generated@@33 Int) ) (!  (=> (or ($generated@@30 ($generated@@19 $generated@@33)) (< 0 $generated@@28)) (= ($generated@@29 ($generated@@19 $generated@@33)) (= ($generated@@19 ($generated@@31 $generated@@33 ($generated@@19 2))) ($generated@@19 0))))
 :weight 3
 :pattern ( ($generated@@29 ($generated@@19 $generated@@33)))
))))
(assert (forall (($generated@@34 T@U) ($generated@@35 T@T) ) (! (= ($generated@@24 $generated@@35 ($generated@@25 $generated@@35 $generated@@34)) $generated@@34)
 :pattern ( ($generated@@25 $generated@@35 $generated@@34))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@47 T@T) ($generated@@48 T@T) ($generated@@49 T@T) ($generated@@50 T@U) ($generated@@51 T@U) ($generated@@52 T@U) ($generated@@53 T@U) ) (! (= ($generated@@36 $generated@@47 $generated@@48 $generated@@49 ($generated@@43 $generated@@47 $generated@@48 $generated@@49 $generated@@51 $generated@@52 $generated@@53 $generated@@50) $generated@@52 $generated@@53) $generated@@50)
 :weight 0
)) (and (forall (($generated@@54 T@T) ($generated@@55 T@T) ($generated@@56 T@T) ($generated@@57 T@U) ($generated@@58 T@U) ($generated@@59 T@U) ($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@U) ) (!  (or (= $generated@@59 $generated@@61) (= ($generated@@36 $generated@@54 $generated@@55 $generated@@56 ($generated@@43 $generated@@54 $generated@@55 $generated@@56 $generated@@58 $generated@@59 $generated@@60 $generated@@57) $generated@@61 $generated@@62) ($generated@@36 $generated@@54 $generated@@55 $generated@@56 $generated@@58 $generated@@61 $generated@@62)))
 :weight 0
)) (forall (($generated@@63 T@T) ($generated@@64 T@T) ($generated@@65 T@T) ($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@U) ) (!  (or (= $generated@@69 $generated@@71) (= ($generated@@36 $generated@@63 $generated@@64 $generated@@65 ($generated@@43 $generated@@63 $generated@@64 $generated@@65 $generated@@67 $generated@@68 $generated@@69 $generated@@66) $generated@@70 $generated@@71) ($generated@@36 $generated@@63 $generated@@64 $generated@@65 $generated@@67 $generated@@70 $generated@@71)))
 :weight 0
)))) (= ($generated@@2 $generated@@37) 3)) (= ($generated@@2 $generated@@38) 4)) (forall (($generated@@72 T@T) ($generated@@73 T@T) ($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@U) ) (! (= ($generated@@40 $generated@@72 $generated@@73 ($generated@@44 $generated@@72 $generated@@73 $generated@@75 $generated@@76 $generated@@74) $generated@@76) $generated@@74)
 :weight 0
))) (forall (($generated@@77 T@T) ($generated@@78 T@T) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (or (= $generated@@81 $generated@@82) (= ($generated@@40 $generated@@77 $generated@@78 ($generated@@44 $generated@@77 $generated@@78 $generated@@80 $generated@@81 $generated@@79) $generated@@82) ($generated@@40 $generated@@77 $generated@@78 $generated@@80 $generated@@82)))
 :weight 0
))) (= ($generated@@2 $generated@@41) 5)) (forall (($generated@@83 T@T) ($generated@@84 T@T) ) (= ($generated@@2 ($generated@@42 $generated@@83 $generated@@84)) 6))) (forall (($generated@@85 T@T) ($generated@@86 T@T) ) (! (= ($generated@@45 ($generated@@42 $generated@@85 $generated@@86)) $generated@@85)
 :pattern ( ($generated@@42 $generated@@85 $generated@@86))
))) (forall (($generated@@87 T@T) ($generated@@88 T@T) ) (! (= ($generated@@46 ($generated@@42 $generated@@87 $generated@@88)) $generated@@88)
 :pattern ( ($generated@@42 $generated@@87 $generated@@88))
))))
(assert (forall (($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 Bool) ($generated@@93 T@U) ($generated@@94 T@U) ) (! (= ($generated@@7 ($generated@@36 $generated@@37 $generated@@38 $generated@@3 ($generated@@39 $generated@@89 $generated@@90 $generated@@91 $generated@@92) $generated@@93 $generated@@94))  (=> (and (or (not (= $generated@@93 $generated@@89)) (not true)) ($generated@@7 ($generated@@24 $generated@@3 ($generated@@40 $generated@@38 $generated@@41 ($generated@@40 $generated@@37 ($generated@@42 $generated@@38 $generated@@41) $generated@@90 $generated@@93) $generated@@91)))) $generated@@92))
 :pattern ( ($generated@@36 $generated@@37 $generated@@38 $generated@@3 ($generated@@39 $generated@@89 $generated@@90 $generated@@91 $generated@@92) $generated@@93 $generated@@94))
)))
(assert (forall (($generated@@95 Int) ($generated@@96 Int) ) (! (= ($generated@@31 $generated@@95 $generated@@96) (mod $generated@@95 $generated@@96))
 :pattern ( ($generated@@31 $generated@@95 $generated@@96))
)))
(assert (forall (($generated@@97 Int) ) (! (= ($generated@@25 $generated@@4 ($generated@@8 ($generated@@19 $generated@@97))) ($generated@@21 $generated@@41 ($generated@@25 $generated@@4 ($generated@@8 $generated@@97))))
 :pattern ( ($generated@@25 $generated@@4 ($generated@@8 ($generated@@19 $generated@@97))))
)))
(assert (forall (($generated@@98 T@U) ($generated@@99 T@T) ) (! (= ($generated@@25 $generated@@99 ($generated@@21 $generated@@99 $generated@@98)) ($generated@@21 $generated@@41 ($generated@@25 $generated@@99 $generated@@98)))
 :pattern ( ($generated@@25 $generated@@99 ($generated@@21 $generated@@99 $generated@@98)))
)))
(assert (forall (($generated@@101 T@U) ($generated@@102 T@U) ) (! ($generated@@100 $generated@@4 $generated@@102 $generated $generated@@101)
 :pattern ( ($generated@@100 $generated@@4 $generated@@102 $generated $generated@@101))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@103 () Int)
(declare-fun $generated@@104 () Int)
(declare-fun $generated@@105 () Int)
(declare-fun $generated@@106 () T@U)
(declare-fun $generated@@107 () Int)
(declare-fun $generated@@108 () Int)
(declare-fun $generated@@109 () Int)
(declare-fun $generated@@110 () Int)
(declare-fun $generated@@111 () Int)
(declare-fun $generated@@112 () Int)
(declare-fun $generated@@113 () Int)
(declare-fun $generated@@114 () Int)
(declare-fun $generated@@115 () Int)
(declare-fun $generated@@116 () Int)
(declare-fun $generated@@117 () T@U)
(declare-fun $generated@@118 () T@U)
(declare-fun $generated@@119 (T@U) Bool)
(declare-fun $generated@@120 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 35) (let (($generated@@121  (=> (= (ControlFlow 0 3) (- 0 2)) (=> (< $generated@@103 0) (<= $generated@@104 $generated@@105)))))
(let (($generated@@122  (=> (and (<= 0 $generated@@103) (= (ControlFlow 0 5) 3)) $generated@@121)))
(let (($generated@@123  (=> (and (< $generated@@103 0) (= (ControlFlow 0 4) 3)) $generated@@121)))
(let (($generated@@124  (=> (and ($generated@@30 $generated@@105) (=> ($generated@@29 $generated@@105) ($generated@@30 $generated@@105))) (and (=> (= (ControlFlow 0 7) (- 0 10)) (=> ($generated@@30 $generated@@105) (or ($generated@@29 $generated@@105) (= ($generated@@31 $generated@@105 ($generated@@19 2)) ($generated@@19 0))))) (and (=> (= (ControlFlow 0 7) (- 0 9)) (not ($generated@@29 $generated@@105))) (=> (and ($generated@@29 $generated@@105) (not ($generated@@29 $generated@@105))) (and (=> (= (ControlFlow 0 7) (- 0 8)) ($generated@@7 ($generated@@21 $generated@@3 ($generated@@6 false)))) (=> ($generated@@7 ($generated@@21 $generated@@3 ($generated@@6 false))) (and (=> (= (ControlFlow 0 7) 4) $generated@@123) (=> (= (ControlFlow 0 7) 5) $generated@@122))))))))))
(let (($generated@@125  (=> (and (not ($generated@@29 $generated@@105)) (= (ControlFlow 0 12) 7)) $generated@@124)))
(let (($generated@@126  (=> (and (and ($generated@@29 $generated@@105) ($generated@@100 $generated@@4 ($generated@@8 $generated@@105) $generated $generated@@106)) (and ($generated@@30 $generated@@105) (= (ControlFlow 0 11) 7))) $generated@@124)))
(let (($generated@@127  (=> (and (and (< $generated@@103 0) (< $generated@@105 $generated@@104)) (and ($generated@@100 $generated@@4 ($generated@@8 $generated@@105) $generated $generated@@106) ($generated@@30 $generated@@105))) (and (=> (= (ControlFlow 0 13) 11) $generated@@126) (=> (= (ControlFlow 0 13) 12) $generated@@125)))))
(let (($generated@@128  (=> (not (and (< $generated@@103 0) (< $generated@@105 $generated@@104))) (and (=> (= (ControlFlow 0 6) 4) $generated@@123) (=> (= (ControlFlow 0 6) 5) $generated@@122)))))
(let (($generated@@129  (and (=> (= (ControlFlow 0 14) 13) $generated@@127) (=> (= (ControlFlow 0 14) 6) $generated@@128))))
(let (($generated@@130  (=> (and (<= 0 $generated@@103) (= (ControlFlow 0 16) 14)) $generated@@129)))
(let (($generated@@131  (=> (and (< $generated@@103 0) (= (ControlFlow 0 15) 14)) $generated@@129)))
(let (($generated@@132  (=> (= $generated@@103 $generated@@107) (and (=> (= (ControlFlow 0 18) 15) $generated@@131) (=> (= (ControlFlow 0 18) 16) $generated@@130)))))
(let (($generated@@133  (=> (and (= $generated@@107 $generated@@108) (= (ControlFlow 0 20) 18)) $generated@@132)))
(let (($generated@@134  (=> (and (= $generated@@108 $generated@@109) (= (ControlFlow 0 22) 20)) $generated@@133)))
(let (($generated@@135  (=> (and (and (not ($generated@@29 $generated@@110)) (= $generated@@111 ($generated@@19 (- 0 100)))) (and (= $generated@@109 $generated@@111) (= (ControlFlow 0 24) 22))) $generated@@134)))
(let (($generated@@136  (=> (and (and ($generated@@29 $generated@@110) (= $generated@@112 ($generated@@19 8))) (and (= $generated@@109 $generated@@112) (= (ControlFlow 0 23) 22))) $generated@@134)))
(let (($generated@@137  (=> ($generated@@100 $generated@@4 ($generated@@8 $generated@@110) $generated $generated@@106) (=> (and ($generated@@30 $generated@@110) ($generated@@30 $generated@@110)) (and (=> (= (ControlFlow 0 25) 23) $generated@@136) (=> (= (ControlFlow 0 25) 24) $generated@@135))))))
(let (($generated@@138  (=> (= $generated@@113 (- $generated@@110 $generated@@105)) (=> (and (= $generated@@108 $generated@@113) (= (ControlFlow 0 21) 20)) $generated@@133))))
(let (($generated@@139  (and (=> (= (ControlFlow 0 26) 21) $generated@@138) (=> (= (ControlFlow 0 26) 25) $generated@@137))))
(let (($generated@@140  (=> (= $generated@@114 (- $generated@@104 $generated@@110)) (=> (and (= $generated@@107 $generated@@114) (= (ControlFlow 0 19) 18)) $generated@@132))))
(let (($generated@@141  (=> (and (and (<= $generated@@105 $generated@@110) (< $generated@@110 $generated@@104)) ($generated@@29 $generated@@110)) (and (=> (= (ControlFlow 0 27) 19) $generated@@140) (=> (= (ControlFlow 0 27) 26) $generated@@139)))))
(let (($generated@@142  (=> (and (not (exists (($generated@@143 Int) ) (!  (and (and (<= $generated@@105 $generated@@143) (< $generated@@143 $generated@@104)) ($generated@@29 $generated@@143))
 :pattern ( ($generated@@29 $generated@@143))
))) (= $generated@@103 $generated@@115)) (and (=> (= (ControlFlow 0 17) 15) $generated@@131) (=> (= (ControlFlow 0 17) 16) $generated@@130)))))
(let (($generated@@144  (=> (forall (($generated@@145 Int) ) (!  (=> (<= $generated@@105 $generated@@145) (=> (< $generated@@145 $generated@@104) ($generated@@30 $generated@@145)))
 :pattern ( ($generated@@29 $generated@@145))
)) (and (=> (= (ControlFlow 0 28) 27) $generated@@141) (=> (= (ControlFlow 0 28) 17) $generated@@142)))))
(let (($generated@@146  (=> (and (not (and (<= $generated@@105 $generated@@116) (< $generated@@116 $generated@@104))) (= (ControlFlow 0 30) 28)) $generated@@144)))
(let (($generated@@147  (=> (and (and (and (<= $generated@@105 $generated@@116) (< $generated@@116 $generated@@104)) ($generated@@100 $generated@@4 ($generated@@8 $generated@@116) $generated $generated@@106)) (and ($generated@@30 $generated@@116) (= (ControlFlow 0 29) 28))) $generated@@144)))
(let (($generated@@148  (=> (< $generated@@116 $generated@@105) (and (=> (= (ControlFlow 0 32) 29) $generated@@147) (=> (= (ControlFlow 0 32) 30) $generated@@146)))))
(let (($generated@@149  (=> (<= $generated@@105 $generated@@116) (and (=> (= (ControlFlow 0 31) 29) $generated@@147) (=> (= (ControlFlow 0 31) 30) $generated@@146)))))
(let (($generated@@150  (and (=> (= (ControlFlow 0 33) 31) $generated@@149) (=> (= (ControlFlow 0 33) 32) $generated@@148))))
(let (($generated@@151 true))
(let (($generated@@152  (=> (and (= $generated@@117 ($generated@@39 $generated@@118 $generated@@106 $generated@@1 false)) (= $generated@@115 ($generated@@19 (- 0 1)))) (and (=> (= (ControlFlow 0 34) 33) $generated@@150) (=> (= (ControlFlow 0 34) 1) $generated@@151)))))
(let (($generated@@153  (=> (and (and (and ($generated@@119 $generated@@106) ($generated@@120 $generated@@106)) (= 1 $generated@@28)) (and (forall (($generated@@154 Int) ) (!  (=> (and (<= $generated@@105 $generated@@154) (< $generated@@154 $generated@@104)) ($generated@@29 $generated@@154))
 :pattern ( ($generated@@29 $generated@@154))
)) (= (ControlFlow 0 35) 34))) $generated@@152)))
$generated@@153))))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
