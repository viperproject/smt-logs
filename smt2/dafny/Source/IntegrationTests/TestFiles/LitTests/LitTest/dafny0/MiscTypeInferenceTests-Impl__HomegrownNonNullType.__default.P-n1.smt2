(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 (T@T T@U T@U) Bool)
(declare-fun $generated@@22 () T@T)
(declare-fun $generated@@23 () T@U)
(declare-fun $generated@@24 () T@U)
(declare-fun $generated@@25 (T@U) T@U)
(declare-fun $generated@@27 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@28 () T@U)
(declare-fun $generated@@31 () T@U)
(declare-fun $generated@@34 (T@T T@U) T@U)
(declare-fun $generated@@35 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@36 () T@T)
(declare-fun $generated@@37 () T@T)
(declare-fun $generated@@38 (T@T T@T) T@T)
(declare-fun $generated@@39 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@40 (T@T) T@T)
(declare-fun $generated@@41 (T@T) T@T)
(declare-fun $generated@@61 (T@T T@U) T@U)
(declare-fun $generated@@68 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@69 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@70 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@102 (T@U) T@U)
(declare-fun $generated@@103 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert (= ($generated@@5 $generated@@22) 3))
(assert (forall (($generated@@26 T@U) ) (! (= ($generated@@21 $generated@@22 $generated@@26 $generated@@23)  (or (= $generated@@26 $generated@@24) (= ($generated@@25 $generated@@26) $generated@@23)))
 :pattern ( ($generated@@21 $generated@@22 $generated@@26 $generated@@23))
)))
(assert (forall (($generated@@29 T@U) ($generated@@30 T@U) ) (! (= ($generated@@27 $generated@@22 $generated@@29 $generated@@28 $generated@@30) ($generated@@27 $generated@@22 $generated@@29 $generated@@23 $generated@@30))
 :pattern ( ($generated@@27 $generated@@22 $generated@@29 $generated@@28 $generated@@30))
 :pattern ( ($generated@@27 $generated@@22 $generated@@29 $generated@@23 $generated@@30))
)))
(assert (forall (($generated@@32 T@U) ($generated@@33 T@U) ) (! (= ($generated@@27 $generated@@22 $generated@@32 $generated@@31 $generated@@33) ($generated@@27 $generated@@22 $generated@@32 $generated@@23 $generated@@33))
 :pattern ( ($generated@@27 $generated@@22 $generated@@32 $generated@@31 $generated@@33))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@42 T@T) ($generated@@43 T@T) ($generated@@44 T@U) ($generated@@45 T@U) ($generated@@46 T@U) ) (! (= ($generated@@35 $generated@@42 $generated@@43 ($generated@@39 $generated@@42 $generated@@43 $generated@@45 $generated@@46 $generated@@44) $generated@@46) $generated@@44)
 :weight 0
)) (forall (($generated@@47 T@T) ($generated@@48 T@T) ($generated@@49 T@U) ($generated@@50 T@U) ($generated@@51 T@U) ($generated@@52 T@U) ) (!  (or (= $generated@@51 $generated@@52) (= ($generated@@35 $generated@@47 $generated@@48 ($generated@@39 $generated@@47 $generated@@48 $generated@@50 $generated@@51 $generated@@49) $generated@@52) ($generated@@35 $generated@@47 $generated@@48 $generated@@50 $generated@@52)))
 :weight 0
))) (= ($generated@@5 $generated@@36) 4)) (= ($generated@@5 $generated@@37) 5)) (forall (($generated@@53 T@T) ($generated@@54 T@T) ) (= ($generated@@5 ($generated@@38 $generated@@53 $generated@@54)) 6))) (forall (($generated@@55 T@T) ($generated@@56 T@T) ) (! (= ($generated@@40 ($generated@@38 $generated@@55 $generated@@56)) $generated@@55)
 :pattern ( ($generated@@38 $generated@@55 $generated@@56))
))) (forall (($generated@@57 T@T) ($generated@@58 T@T) ) (! (= ($generated@@41 ($generated@@38 $generated@@57 $generated@@58)) $generated@@58)
 :pattern ( ($generated@@38 $generated@@57 $generated@@58))
))))
(assert (forall (($generated@@59 T@U) ($generated@@60 T@U) ) (! (= ($generated@@27 $generated@@22 $generated@@59 $generated@@23 $generated@@60)  (or (= $generated@@59 $generated@@24) ($generated@@10 ($generated@@34 $generated@@6 ($generated@@35 $generated@@36 $generated@@37 ($generated@@35 $generated@@22 ($generated@@38 $generated@@36 $generated@@37) $generated@@60 $generated@@59) $generated)))))
 :pattern ( ($generated@@27 $generated@@22 $generated@@59 $generated@@23 $generated@@60))
)))
(assert (forall (($generated@@62 T@U) ($generated@@63 T@T) ) (! (= ($generated@@61 $generated@@63 ($generated@@34 $generated@@63 $generated@@62)) $generated@@62)
 :pattern ( ($generated@@34 $generated@@63 $generated@@62))
)))
(assert (forall (($generated@@64 T@U) ) (! (= ($generated@@21 $generated@@22 $generated@@64 $generated@@28)  (and ($generated@@21 $generated@@22 $generated@@64 $generated@@23) (or (not (= $generated@@64 $generated@@24)) (not true))))
 :pattern ( ($generated@@21 $generated@@22 $generated@@64 $generated@@28))
 :pattern ( ($generated@@21 $generated@@22 $generated@@64 $generated@@23))
)))
(assert (forall (($generated@@65 T@U) ) (! (= ($generated@@21 $generated@@22 $generated@@65 $generated@@31)  (and ($generated@@21 $generated@@22 $generated@@65 $generated@@23) (or (not (= $generated@@65 $generated@@24)) (not true))))
 :pattern ( ($generated@@21 $generated@@22 $generated@@65 $generated@@31))
)))
(assert (forall (($generated@@66 T@U) ($generated@@67 T@T) ) (! (= ($generated@@34 $generated@@67 ($generated@@61 $generated@@67 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@61 $generated@@67 $generated@@66))
)))
(assert  (and (forall (($generated@@71 T@T) ($generated@@72 T@T) ($generated@@73 T@T) ($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (! (= ($generated@@68 $generated@@71 $generated@@72 $generated@@73 ($generated@@70 $generated@@71 $generated@@72 $generated@@73 $generated@@75 $generated@@76 $generated@@77 $generated@@74) $generated@@76 $generated@@77) $generated@@74)
 :weight 0
)) (and (forall (($generated@@78 T@T) ($generated@@79 T@T) ($generated@@80 T@T) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (!  (or (= $generated@@83 $generated@@85) (= ($generated@@68 $generated@@78 $generated@@79 $generated@@80 ($generated@@70 $generated@@78 $generated@@79 $generated@@80 $generated@@82 $generated@@83 $generated@@84 $generated@@81) $generated@@85 $generated@@86) ($generated@@68 $generated@@78 $generated@@79 $generated@@80 $generated@@82 $generated@@85 $generated@@86)))
 :weight 0
)) (forall (($generated@@87 T@T) ($generated@@88 T@T) ($generated@@89 T@T) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ) (!  (or (= $generated@@93 $generated@@95) (= ($generated@@68 $generated@@87 $generated@@88 $generated@@89 ($generated@@70 $generated@@87 $generated@@88 $generated@@89 $generated@@91 $generated@@92 $generated@@93 $generated@@90) $generated@@94 $generated@@95) ($generated@@68 $generated@@87 $generated@@88 $generated@@89 $generated@@91 $generated@@94 $generated@@95)))
 :weight 0
)))))
(assert (forall (($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 Bool) ($generated@@100 T@U) ($generated@@101 T@U) ) (! (= ($generated@@10 ($generated@@68 $generated@@22 $generated@@36 $generated@@6 ($generated@@69 $generated@@96 $generated@@97 $generated@@98 $generated@@99) $generated@@100 $generated@@101))  (=> (and (or (not (= $generated@@100 $generated@@96)) (not true)) ($generated@@10 ($generated@@34 $generated@@6 ($generated@@35 $generated@@36 $generated@@37 ($generated@@35 $generated@@22 ($generated@@38 $generated@@36 $generated@@37) $generated@@97 $generated@@100) $generated@@98)))) $generated@@99))
 :pattern ( ($generated@@68 $generated@@22 $generated@@36 $generated@@6 ($generated@@69 $generated@@96 $generated@@97 $generated@@98 $generated@@99) $generated@@100 $generated@@101))
)))
(assert (= ($generated@@102 $generated@@28) $generated@@0))
(assert (= ($generated@@103 $generated@@28) $generated@@3))
(assert (= ($generated@@102 $generated@@31) $generated@@1))
(assert (= ($generated@@103 $generated@@31) $generated@@4))
(assert (= ($generated@@102 $generated@@23) $generated@@2))
(assert (= ($generated@@103 $generated@@23) $generated@@3))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@104 () T@U)
(declare-fun $generated@@105 () T@U)
(declare-fun $generated@@106 () T@U)
(declare-fun $generated@@107 (T@U) Bool)
(declare-fun $generated@@108 (T@U) Bool)
(declare-fun $generated@@109 () T@U)
(declare-fun $generated@@110 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@111  (=> (and (= $generated@@104 ($generated@@69 $generated@@24 $generated@@105 $generated false)) (= (ControlFlow 0 2) (- 0 1))) (or (not (= $generated@@106 $generated@@24)) (not true)))))
(let (($generated@@112  (=> (and (and ($generated@@107 $generated@@105) ($generated@@108 $generated@@105)) (and ($generated@@21 $generated@@22 $generated@@106 $generated@@31) ($generated@@27 $generated@@22 $generated@@106 $generated@@31 $generated@@105))) (=> (and (and (and ($generated@@21 $generated@@22 $generated@@109 $generated@@23) ($generated@@27 $generated@@22 $generated@@109 $generated@@23 $generated@@105)) true) (and (= 3 $generated@@110) (= (ControlFlow 0 3) 2))) $generated@@111))))
$generated@@112)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
