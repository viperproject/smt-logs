(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 (T@U) T@U)
(declare-fun $generated@@20 (T@U) Int)
(declare-fun $generated@@21 () T@U)
(declare-fun $generated@@22 (T@U Int) T@U)
(declare-fun $generated@@23 (T@U T@U) T@U)
(declare-fun $generated@@24 (T@U Int) T@U)
(declare-fun $generated@@30 (Int) Int)
(declare-fun $generated@@32 (T@T T@U) T@U)
(declare-fun $generated@@35 (T@U Int) T@U)
(declare-fun $generated@@41 (T@T T@U) T@U)
(declare-fun $generated@@42 (T@T T@U) T@U)
(declare-fun $generated@@45 (T@U) Int)
(declare-fun $generated@@50 (T@U T@U T@U) Bool)
(declare-fun $generated@@51 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@61 (T@U) Int)
(declare-fun $generated@@62 (T@U) Bool)
(declare-fun $generated@@64 () Int)
(declare-fun $generated@@65 (T@U T@U) Int)
(declare-fun $generated@@66 (T@U) T@U)
(declare-fun $generated@@67 (T@U) Bool)
(declare-fun $generated@@68 (T@U) Bool)
(declare-fun $generated@@69 (T@T T@U T@U) Bool)
(declare-fun $generated@@70 () T@T)
(declare-fun $generated@@71 (T@U) T@U)
(declare-fun $generated@@78 (T@U T@U) Bool)
(declare-fun $generated@@91 (T@U) T@U)
(declare-fun $generated@@102 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@103 () T@T)
(declare-fun $generated@@104 () T@T)
(declare-fun $generated@@105 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@106 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@107 () T@T)
(declare-fun $generated@@108 (T@T T@T) T@T)
(declare-fun $generated@@109 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@110 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@111 (T@T) T@T)
(declare-fun $generated@@112 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (= ($generated@@19 $generated) $generated@@0))
(assert (= ($generated@@20 $generated@@21) 0))
(assert (forall (($generated@@25 T@U) ($generated@@26 T@U) ($generated@@27 Int) ) (!  (=> (= $generated@@27 ($generated@@20 $generated@@25)) (and (= ($generated@@22 ($generated@@23 $generated@@25 $generated@@26) $generated@@27) $generated@@25) (= ($generated@@24 ($generated@@23 $generated@@25 $generated@@26) $generated@@27) $generated@@26)))
 :pattern ( ($generated@@22 ($generated@@23 $generated@@25 $generated@@26) $generated@@27))
 :pattern ( ($generated@@24 ($generated@@23 $generated@@25 $generated@@26) $generated@@27))
)))
(assert (forall (($generated@@28 T@U) ($generated@@29 Int) ) (!  (=> (= $generated@@29 0) (= ($generated@@24 $generated@@28 $generated@@29) $generated@@28))
 :pattern ( ($generated@@24 $generated@@28 $generated@@29))
)))
(assert (forall (($generated@@31 Int) ) (! (= ($generated@@30 $generated@@31) $generated@@31)
 :pattern ( ($generated@@30 $generated@@31))
)))
(assert (forall (($generated@@33 T@U) ($generated@@34 T@T) ) (! (= ($generated@@32 $generated@@34 $generated@@33) $generated@@33)
 :pattern ( ($generated@@32 $generated@@34 $generated@@33))
)))
(assert (forall (($generated@@36 T@U) ($generated@@37 Int) ($generated@@38 Int) ) (!  (=> (and (and (<= 0 $generated@@38) (< $generated@@38 $generated@@37)) (< $generated@@38 ($generated@@20 $generated@@36))) (= ($generated@@35 ($generated@@22 $generated@@36 $generated@@37) $generated@@38) ($generated@@35 $generated@@36 $generated@@38)))
 :weight 25
 :pattern ( ($generated@@35 ($generated@@22 $generated@@36 $generated@@37) $generated@@38))
 :pattern ( ($generated@@35 $generated@@36 $generated@@38) ($generated@@22 $generated@@36 $generated@@37))
)))
(assert (forall (($generated@@39 T@U) ($generated@@40 Int) ) (!  (=> (and (<= 0 $generated@@40) (<= $generated@@40 ($generated@@20 $generated@@39))) (= ($generated@@20 ($generated@@24 $generated@@39 $generated@@40)) (- ($generated@@20 $generated@@39) $generated@@40)))
 :pattern ( ($generated@@20 ($generated@@24 $generated@@39 $generated@@40)))
)))
(assert (forall (($generated@@43 T@U) ($generated@@44 T@T) ) (! (= ($generated@@42 $generated@@44 ($generated@@41 $generated@@44 $generated@@43)) $generated@@43)
 :pattern ( ($generated@@41 $generated@@44 $generated@@43))
)))
(assert (forall (($generated@@46 T@U) ($generated@@47 Int) ) (!  (=> (and (<= 0 $generated@@47) (< $generated@@47 ($generated@@20 $generated@@46))) (< ($generated@@45 ($generated@@22 $generated@@46 $generated@@47)) ($generated@@45 $generated@@46)))
 :pattern ( ($generated@@45 ($generated@@22 $generated@@46 $generated@@47)))
)))
(assert (forall (($generated@@48 T@U) ($generated@@49 Int) ) (!  (=> (and (< 0 $generated@@49) (<= $generated@@49 ($generated@@20 $generated@@48))) (< ($generated@@45 ($generated@@24 $generated@@48 $generated@@49)) ($generated@@45 $generated@@48)))
 :pattern ( ($generated@@45 ($generated@@24 $generated@@48 $generated@@49)))
)))
(assert (forall (($generated@@52 T@U) ($generated@@53 T@U) ($generated@@54 T@U) ($generated@@55 T@T) ) (! (= ($generated@@50 ($generated@@42 $generated@@55 $generated@@52) $generated@@53 $generated@@54) ($generated@@51 $generated@@55 $generated@@52 $generated@@53 $generated@@54))
 :pattern ( ($generated@@50 ($generated@@42 $generated@@55 $generated@@52) $generated@@53 $generated@@54))
)))
(assert (forall (($generated@@56 T@U) ($generated@@57 Int) ($generated@@58 Int) ) (!  (=> (and (and (<= 0 $generated@@57) (<= 0 $generated@@58)) (< $generated@@58 (- ($generated@@20 $generated@@56) $generated@@57))) (= ($generated@@35 ($generated@@24 $generated@@56 $generated@@57) $generated@@58) ($generated@@35 $generated@@56 (+ $generated@@58 $generated@@57))))
 :weight 25
 :pattern ( ($generated@@35 ($generated@@24 $generated@@56 $generated@@57) $generated@@58))
)))
(assert (forall (($generated@@59 T@U) ($generated@@60 T@U) ) (! (= ($generated@@20 ($generated@@23 $generated@@59 $generated@@60)) (+ ($generated@@20 $generated@@59) ($generated@@20 $generated@@60)))
 :pattern ( ($generated@@20 ($generated@@23 $generated@@59 $generated@@60)))
)))
(assert (forall (($generated@@63 T@U) ) (!  (=> ($generated@@62 $generated@@63) (and (<= ($generated@@30 0) ($generated@@61 $generated@@63)) (< ($generated@@61 $generated@@63) ($generated@@20 $generated@@63))))
 :pattern ( ($generated@@61 $generated@@63))
)))
(assert (= ($generated@@3 $generated@@70) 3))
(assert  (=> (<= 0 $generated@@64) (forall (($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@U) ) (!  (=> (or ($generated@@68 $generated@@74) (and (< 0 $generated@@64) (and ($generated@@67 $generated@@73) ($generated@@69 $generated@@70 $generated@@74 ($generated@@71 $generated))))) (and (=> (or (not (= ($generated@@20 $generated@@74) ($generated@@30 0))) (not true)) (and ($generated@@62 $generated@@74) ($generated@@68 ($generated@@23 ($generated@@22 $generated@@74 ($generated@@61 $generated@@74)) ($generated@@24 $generated@@74 (+ ($generated@@61 $generated@@74) 1)))))) (= ($generated@@65 ($generated@@66 $generated@@72) $generated@@74) (ite (= ($generated@@20 $generated@@74) ($generated@@30 0)) 0 (let (($generated@@75 ($generated@@61 $generated@@74)))
(+ $generated@@75 ($generated@@65 $generated@@72 ($generated@@23 ($generated@@22 $generated@@74 $generated@@75) ($generated@@24 $generated@@74 (+ $generated@@75 1))))))))))
 :pattern ( ($generated@@65 ($generated@@66 $generated@@72) $generated@@74) ($generated@@67 $generated@@73))
))))
(assert (forall (($generated@@76 T@U) ($generated@@77 Int) ) (!  (=> (and (<= 0 $generated@@77) (<= $generated@@77 ($generated@@20 $generated@@76))) (= ($generated@@20 ($generated@@22 $generated@@76 $generated@@77)) $generated@@77))
 :pattern ( ($generated@@20 ($generated@@22 $generated@@76 $generated@@77)))
)))
(assert (forall (($generated@@79 T@U) ) (!  (=> ($generated@@78 $generated@@79 $generated) (and (= ($generated@@42 $generated@@5 ($generated@@41 $generated@@5 $generated@@79)) $generated@@79) ($generated@@69 $generated@@5 ($generated@@41 $generated@@5 $generated@@79) $generated)))
 :pattern ( ($generated@@78 $generated@@79 $generated))
)))
(assert (forall (($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@T) ) (! (= ($generated@@78 ($generated@@42 $generated@@82 $generated@@80) $generated@@81) ($generated@@69 $generated@@82 $generated@@80 $generated@@81))
 :pattern ( ($generated@@78 ($generated@@42 $generated@@82 $generated@@80) $generated@@81))
)))
(assert (forall (($generated@@83 T@U) ) (! (<= 0 ($generated@@20 $generated@@83))
 :pattern ( ($generated@@20 $generated@@83))
)))
(assert (forall (($generated@@84 T@U) ($generated@@85 Int) ($generated@@86 Int) ) (!  (=> (and (and (<= 0 $generated@@85) (< $generated@@85 $generated@@86)) (<= $generated@@86 ($generated@@20 $generated@@84))) (< ($generated@@45 ($generated@@23 ($generated@@22 $generated@@84 $generated@@85) ($generated@@24 $generated@@84 $generated@@86))) ($generated@@45 $generated@@84)))
 :pattern ( ($generated@@45 ($generated@@23 ($generated@@22 $generated@@84 $generated@@85) ($generated@@24 $generated@@84 $generated@@86))))
)))
(assert (forall (($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ) (! (= ($generated@@51 $generated@@70 $generated@@87 ($generated@@71 $generated@@88) $generated@@89) (forall (($generated@@90 Int) ) (!  (=> (and (<= 0 $generated@@90) (< $generated@@90 ($generated@@20 $generated@@87))) ($generated@@50 ($generated@@35 $generated@@87 $generated@@90) $generated@@88 $generated@@89))
 :pattern ( ($generated@@35 $generated@@87 $generated@@90))
)))
 :pattern ( ($generated@@51 $generated@@70 $generated@@87 ($generated@@71 $generated@@88) $generated@@89))
)))
(assert (forall (($generated@@92 T@U) ) (! (= ($generated@@91 ($generated@@71 $generated@@92)) $generated@@92)
 :pattern ( ($generated@@71 $generated@@92))
)))
(assert (forall (($generated@@93 T@U) ) (! (= ($generated@@19 ($generated@@71 $generated@@93)) $generated@@1)
 :pattern ( ($generated@@71 $generated@@93))
)))
(assert (forall (($generated@@94 T@U) ($generated@@95 T@T) ) (! (= ($generated@@41 $generated@@95 ($generated@@42 $generated@@95 $generated@@94)) $generated@@94)
 :pattern ( ($generated@@42 $generated@@95 $generated@@94))
)))
(assert (forall (($generated@@96 T@U) ($generated@@97 T@U) ) (! (= ($generated@@65 ($generated@@66 $generated@@96) $generated@@97) ($generated@@65 $generated@@96 $generated@@97))
 :pattern ( ($generated@@65 ($generated@@66 $generated@@96) $generated@@97))
)))
(assert  (=> (<= 0 $generated@@64) (forall (($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ) (!  (=> (or ($generated@@68 ($generated@@32 $generated@@70 $generated@@100)) (and (< 0 $generated@@64) (and ($generated@@67 $generated@@99) ($generated@@69 $generated@@70 $generated@@100 ($generated@@71 $generated))))) (and (=> (or (not (= ($generated@@20 ($generated@@32 $generated@@70 $generated@@100)) ($generated@@30 0))) (not true)) (and ($generated@@62 ($generated@@32 $generated@@70 $generated@@100)) ($generated@@68 ($generated@@23 ($generated@@22 ($generated@@32 $generated@@70 $generated@@100) ($generated@@61 ($generated@@32 $generated@@70 $generated@@100))) ($generated@@24 ($generated@@32 $generated@@70 $generated@@100) (+ ($generated@@61 ($generated@@32 $generated@@70 $generated@@100)) 1)))))) (= ($generated@@65 ($generated@@66 $generated@@98) ($generated@@32 $generated@@70 $generated@@100)) (ite (= ($generated@@20 ($generated@@32 $generated@@70 $generated@@100)) ($generated@@30 0)) 0 (let (($generated@@101 ($generated@@61 ($generated@@32 $generated@@70 $generated@@100))))
(+ $generated@@101 ($generated@@65 ($generated@@66 $generated@@98) ($generated@@23 ($generated@@22 ($generated@@32 $generated@@70 $generated@@100) $generated@@101) ($generated@@24 ($generated@@32 $generated@@70 $generated@@100) (+ $generated@@101 1))))))))))
 :weight 3
 :pattern ( ($generated@@65 ($generated@@66 $generated@@98) ($generated@@32 $generated@@70 $generated@@100)) ($generated@@67 $generated@@99))
))))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@113 T@T) ($generated@@114 T@T) ($generated@@115 T@T) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ) (! (= ($generated@@102 $generated@@113 $generated@@114 $generated@@115 ($generated@@109 $generated@@113 $generated@@114 $generated@@115 $generated@@117 $generated@@118 $generated@@119 $generated@@116) $generated@@118 $generated@@119) $generated@@116)
 :weight 0
)) (and (forall (($generated@@120 T@T) ($generated@@121 T@T) ($generated@@122 T@T) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ) (!  (or (= $generated@@125 $generated@@127) (= ($generated@@102 $generated@@120 $generated@@121 $generated@@122 ($generated@@109 $generated@@120 $generated@@121 $generated@@122 $generated@@124 $generated@@125 $generated@@126 $generated@@123) $generated@@127 $generated@@128) ($generated@@102 $generated@@120 $generated@@121 $generated@@122 $generated@@124 $generated@@127 $generated@@128)))
 :weight 0
)) (forall (($generated@@129 T@T) ($generated@@130 T@T) ($generated@@131 T@T) ($generated@@132 T@U) ($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ) (!  (or (= $generated@@135 $generated@@137) (= ($generated@@102 $generated@@129 $generated@@130 $generated@@131 ($generated@@109 $generated@@129 $generated@@130 $generated@@131 $generated@@133 $generated@@134 $generated@@135 $generated@@132) $generated@@136 $generated@@137) ($generated@@102 $generated@@129 $generated@@130 $generated@@131 $generated@@133 $generated@@136 $generated@@137)))
 :weight 0
)))) (= ($generated@@3 $generated@@103) 4)) (= ($generated@@3 $generated@@104) 5)) (forall (($generated@@138 T@T) ($generated@@139 T@T) ($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ) (! (= ($generated@@106 $generated@@138 $generated@@139 ($generated@@110 $generated@@138 $generated@@139 $generated@@141 $generated@@142 $generated@@140) $generated@@142) $generated@@140)
 :weight 0
))) (forall (($generated@@143 T@T) ($generated@@144 T@T) ($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ) (!  (or (= $generated@@147 $generated@@148) (= ($generated@@106 $generated@@143 $generated@@144 ($generated@@110 $generated@@143 $generated@@144 $generated@@146 $generated@@147 $generated@@145) $generated@@148) ($generated@@106 $generated@@143 $generated@@144 $generated@@146 $generated@@148)))
 :weight 0
))) (= ($generated@@3 $generated@@107) 6)) (forall (($generated@@149 T@T) ($generated@@150 T@T) ) (= ($generated@@3 ($generated@@108 $generated@@149 $generated@@150)) 7))) (forall (($generated@@151 T@T) ($generated@@152 T@T) ) (! (= ($generated@@111 ($generated@@108 $generated@@151 $generated@@152)) $generated@@151)
 :pattern ( ($generated@@108 $generated@@151 $generated@@152))
))) (forall (($generated@@153 T@T) ($generated@@154 T@T) ) (! (= ($generated@@112 ($generated@@108 $generated@@153 $generated@@154)) $generated@@154)
 :pattern ( ($generated@@108 $generated@@153 $generated@@154))
))))
(assert (forall (($generated@@155 T@U) ($generated@@156 T@U) ($generated@@157 T@U) ($generated@@158 Bool) ($generated@@159 T@U) ($generated@@160 T@U) ) (! (= ($generated@@8 ($generated@@102 $generated@@103 $generated@@104 $generated@@4 ($generated@@105 $generated@@155 $generated@@156 $generated@@157 $generated@@158) $generated@@159 $generated@@160))  (=> (and (or (not (= $generated@@159 $generated@@155)) (not true)) ($generated@@8 ($generated@@41 $generated@@4 ($generated@@106 $generated@@104 $generated@@107 ($generated@@106 $generated@@103 ($generated@@108 $generated@@104 $generated@@107) $generated@@156 $generated@@159) $generated@@157)))) $generated@@158))
 :pattern ( ($generated@@102 $generated@@103 $generated@@104 $generated@@4 ($generated@@105 $generated@@155 $generated@@156 $generated@@157 $generated@@158) $generated@@159 $generated@@160))
)))
(assert (forall (($generated@@161 T@U) ($generated@@162 T@U) ) (!  (=> ($generated@@78 $generated@@161 ($generated@@71 $generated@@162)) (and (= ($generated@@42 $generated@@70 ($generated@@41 $generated@@70 $generated@@161)) $generated@@161) ($generated@@69 $generated@@70 ($generated@@41 $generated@@70 $generated@@161) ($generated@@71 $generated@@162))))
 :pattern ( ($generated@@78 $generated@@161 ($generated@@71 $generated@@162)))
)))
(assert (forall (($generated@@163 T@U) ($generated@@164 Int) ($generated@@165 Int) ) (!  (=> (and (and (<= 0 $generated@@164) (<= $generated@@164 $generated@@165)) (< $generated@@165 ($generated@@20 $generated@@163))) (= ($generated@@35 ($generated@@24 $generated@@163 $generated@@164) (- $generated@@165 $generated@@164)) ($generated@@35 $generated@@163 $generated@@165)))
 :weight 25
 :pattern ( ($generated@@35 $generated@@163 $generated@@165) ($generated@@24 $generated@@163 $generated@@164))
)))
(assert (forall (($generated@@166 T@U) ($generated@@167 Int) ($generated@@168 Int) ) (!  (=> (and (and (<= 0 $generated@@167) (<= 0 $generated@@168)) (<= (+ $generated@@167 $generated@@168) ($generated@@20 $generated@@166))) (= ($generated@@24 ($generated@@24 $generated@@166 $generated@@167) $generated@@168) ($generated@@24 $generated@@166 (+ $generated@@167 $generated@@168))))
 :pattern ( ($generated@@24 ($generated@@24 $generated@@166 $generated@@167) $generated@@168))
)))
(assert (forall (($generated@@169 T@U) ($generated@@170 T@U) ($generated@@171 Int) ) (!  (and (=> (< $generated@@171 ($generated@@20 $generated@@169)) (= ($generated@@35 ($generated@@23 $generated@@169 $generated@@170) $generated@@171) ($generated@@35 $generated@@169 $generated@@171))) (=> (<= ($generated@@20 $generated@@169) $generated@@171) (= ($generated@@35 ($generated@@23 $generated@@169 $generated@@170) $generated@@171) ($generated@@35 $generated@@170 (- $generated@@171 ($generated@@20 $generated@@169))))))
 :pattern ( ($generated@@35 ($generated@@23 $generated@@169 $generated@@170) $generated@@171))
)))
(assert (forall (($generated@@172 Int) ) (! (= ($generated@@42 $generated@@5 ($generated@@9 ($generated@@30 $generated@@172))) ($generated@@32 $generated@@107 ($generated@@42 $generated@@5 ($generated@@9 $generated@@172))))
 :pattern ( ($generated@@42 $generated@@5 ($generated@@9 ($generated@@30 $generated@@172))))
)))
(assert (forall (($generated@@173 T@U) ($generated@@174 T@T) ) (! (= ($generated@@42 $generated@@174 ($generated@@32 $generated@@174 $generated@@173)) ($generated@@32 $generated@@107 ($generated@@42 $generated@@174 $generated@@173)))
 :pattern ( ($generated@@42 $generated@@174 ($generated@@32 $generated@@174 $generated@@173)))
)))
(assert (forall (($generated@@175 T@U) ) (!  (=> (= ($generated@@20 $generated@@175) 0) (= $generated@@175 $generated@@21))
 :pattern ( ($generated@@20 $generated@@175))
)))
(assert (forall (($generated@@176 T@U) ($generated@@177 Int) ) (!  (=> (= $generated@@177 0) (= ($generated@@22 $generated@@176 $generated@@177) $generated@@21))
 :pattern ( ($generated@@22 $generated@@176 $generated@@177))
)))
(assert (forall (($generated@@178 T@U) ($generated@@179 T@U) ) (! ($generated@@51 $generated@@5 $generated@@179 $generated $generated@@178)
 :pattern ( ($generated@@51 $generated@@5 $generated@@179 $generated $generated@@178))
)))
(assert (forall (($generated@@180 T@U) ($generated@@181 T@U) ) (! (= ($generated@@69 $generated@@70 $generated@@180 ($generated@@71 $generated@@181)) (forall (($generated@@182 Int) ) (!  (=> (and (<= 0 $generated@@182) (< $generated@@182 ($generated@@20 $generated@@180))) ($generated@@78 ($generated@@35 $generated@@180 $generated@@182) $generated@@181))
 :pattern ( ($generated@@35 $generated@@180 $generated@@182))
)))
 :pattern ( ($generated@@69 $generated@@70 $generated@@180 ($generated@@71 $generated@@181)))
)))
(assert (forall (($generated@@183 T@U) ) (! ($generated@@69 $generated@@5 $generated@@183 $generated)
 :pattern ( ($generated@@69 $generated@@5 $generated@@183 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@184 () T@U)
(declare-fun $generated@@185 () Int)
(declare-fun $generated@@186 () T@U)
(declare-fun $generated@@187 () T@U)
(declare-fun $generated@@188 () T@U)
(declare-fun $generated@@189 () T@U)
(declare-fun $generated@@190 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 14) (let (($generated@@191  (and (=> (= (ControlFlow 0 5) (- 0 8)) (or (and ($generated@@69 $generated@@5 ($generated@@9 (- ($generated@@20 $generated@@184) 1)) $generated) (and (<= ($generated@@30 0) (- ($generated@@20 $generated@@184) 1)) (< (- ($generated@@20 $generated@@184) 1) ($generated@@20 $generated@@184)))) (or (and ($generated@@69 $generated@@5 ($generated@@9 ($generated@@30 0)) $generated) (and (<= ($generated@@30 0) ($generated@@30 0)) (< 0 ($generated@@20 $generated@@184)))) (or (and ($generated@@69 $generated@@5 ($generated@@9 ($generated@@30 0)) $generated) (and (<= ($generated@@30 0) ($generated@@30 0)) (< 0 ($generated@@20 $generated@@184)))) (exists (($generated@@192 Int) )  (and (<= ($generated@@30 0) $generated@@192) (< $generated@@192 ($generated@@20 $generated@@184)))))))) (=> (or (and ($generated@@69 $generated@@5 ($generated@@9 (- ($generated@@20 $generated@@184) 1)) $generated) (and (<= ($generated@@30 0) (- ($generated@@20 $generated@@184) 1)) (< (- ($generated@@20 $generated@@184) 1) ($generated@@20 $generated@@184)))) (or (and ($generated@@69 $generated@@5 ($generated@@9 ($generated@@30 0)) $generated) (and (<= ($generated@@30 0) ($generated@@30 0)) (< 0 ($generated@@20 $generated@@184)))) (or (and ($generated@@69 $generated@@5 ($generated@@9 ($generated@@30 0)) $generated) (and (<= ($generated@@30 0) ($generated@@30 0)) (< 0 ($generated@@20 $generated@@184)))) (exists (($generated@@193 Int) )  (and (<= ($generated@@30 0) $generated@@193) (< $generated@@193 ($generated@@20 $generated@@184))))))) (=> (and (<= ($generated@@30 0) $generated@@185) (< $generated@@185 ($generated@@20 $generated@@184))) (and (=> (= (ControlFlow 0 5) (- 0 7)) (and (<= 0 $generated@@185) (<= $generated@@185 ($generated@@20 $generated@@184)))) (=> (and (<= 0 $generated@@185) (<= $generated@@185 ($generated@@20 $generated@@184))) (and (=> (= (ControlFlow 0 5) (- 0 6)) (and (<= 0 (+ $generated@@185 1)) (<= (+ $generated@@185 1) ($generated@@20 $generated@@184)))) (=> (and (<= 0 (+ $generated@@185 1)) (<= (+ $generated@@185 1) ($generated@@20 $generated@@184))) (=> (= $generated@@186 ($generated@@23 ($generated@@22 $generated@@184 $generated@@185) ($generated@@24 $generated@@184 (+ $generated@@185 1)))) (=> (and ($generated@@51 $generated@@70 $generated@@186 ($generated@@71 $generated) $generated@@187) (= (ControlFlow 0 5) (- 0 4))) (< ($generated@@45 $generated@@186) ($generated@@45 $generated@@184)))))))))))))
(let (($generated@@194  (=> (and (< $generated@@185 ($generated@@30 0)) (= (ControlFlow 0 10) 5)) $generated@@191)))
(let (($generated@@195  (=> (and (<= ($generated@@30 0) $generated@@185) (= (ControlFlow 0 9) 5)) $generated@@191)))
(let (($generated@@196  (and (=> (= (ControlFlow 0 11) 9) $generated@@195) (=> (= (ControlFlow 0 11) 10) $generated@@194))))
(let (($generated@@197 true))
(let (($generated@@198  (=> (or (not (= ($generated@@20 $generated@@184) ($generated@@30 0))) (not true)) (and (=> (= (ControlFlow 0 12) 11) $generated@@196) (=> (= (ControlFlow 0 12) 3) $generated@@197)))))
(let (($generated@@199 true))
(let (($generated@@200 true))
(let (($generated@@201  (=> (= $generated@@188 ($generated@@105 $generated@@189 $generated@@187 $generated@@2 false)) (and (and (=> (= (ControlFlow 0 13) 1) $generated@@200) (=> (= (ControlFlow 0 13) 2) $generated@@199)) (=> (= (ControlFlow 0 13) 12) $generated@@198)))))
(let (($generated@@202  (=> (and (and (and ($generated@@67 $generated@@187) ($generated@@190 $generated@@187)) ($generated@@69 $generated@@70 $generated@@184 ($generated@@71 $generated))) (and (= 0 $generated@@64) (= (ControlFlow 0 14) 13))) $generated@@201)))
$generated@@202)))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
