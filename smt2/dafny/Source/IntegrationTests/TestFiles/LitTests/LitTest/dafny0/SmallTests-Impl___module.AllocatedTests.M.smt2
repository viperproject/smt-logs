(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 () T@U)
(declare-fun $generated@@9 (T@T) Int)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 () T@T)
(declare-fun $generated@@12 () T@T)
(declare-fun $generated@@13 (Bool) T@U)
(declare-fun $generated@@14 (T@U) Bool)
(declare-fun $generated@@15 (Int) T@U)
(declare-fun $generated@@16 (T@U) Int)
(declare-fun $generated@@17 (Real) T@U)
(declare-fun $generated@@18 (T@U) Real)
(declare-fun $generated@@25 (T@T T@U T@U) Bool)
(declare-fun $generated@@26 () T@T)
(declare-fun $generated@@27 () T@U)
(declare-fun $generated@@28 () T@U)
(declare-fun $generated@@29 (T@U) T@U)
(declare-fun $generated@@31 () T@U)
(declare-fun $generated@@33 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@34 () T@U)
(declare-fun $generated@@35 () T@U)
(declare-fun $generated@@38 () T@U)
(declare-fun $generated@@41 () T@U)
(declare-fun $generated@@44 (T@T T@U) T@U)
(declare-fun $generated@@45 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@46 () T@T)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 (T@T T@T) T@T)
(declare-fun $generated@@49 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@50 (T@T) T@T)
(declare-fun $generated@@51 (T@T) T@T)
(declare-fun $generated@@75 (T@U T@U) Bool)
(declare-fun $generated@@79 (T@T T@U) T@U)
(declare-fun $generated@@82 (T@T T@U) T@U)
(declare-fun $generated@@85 (T@U T@U T@U) Bool)
(declare-fun $generated@@108 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@109 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@110 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@142 (T@U) Bool)
(declare-fun $generated@@147 (T@U) T@U)
(declare-fun $generated@@148 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@9 $generated@@10) 0) (= ($generated@@9 $generated@@11) 1)) (= ($generated@@9 $generated@@12) 2)) (forall (($generated@@19 Bool) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 Int) ) (! (= ($generated@@16 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 T@U) ) (! (= ($generated@@15 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= ($generated@@18 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))) (forall (($generated@@24 T@U) ) (! (= ($generated@@17 ($generated@@18 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@18 $generated@@24))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7 $generated@@8)
)
(assert (= ($generated@@9 $generated@@26) 3))
(assert (forall (($generated@@30 T@U) ) (! (= ($generated@@25 $generated@@26 $generated@@30 $generated@@27)  (or (= $generated@@30 $generated@@28) (= ($generated@@29 $generated@@30) $generated@@27)))
 :pattern ( ($generated@@25 $generated@@26 $generated@@30 $generated@@27))
)))
(assert (forall (($generated@@32 T@U) ) (! (= ($generated@@25 $generated@@26 $generated@@32 $generated@@31)  (or (= $generated@@32 $generated@@28) (= ($generated@@29 $generated@@32) $generated@@31)))
 :pattern ( ($generated@@25 $generated@@26 $generated@@32 $generated@@31))
)))
(assert (forall (($generated@@36 T@U) ($generated@@37 T@U) ) (! (= ($generated@@33 $generated@@26 $generated@@36 $generated@@34 $generated@@37) ($generated@@33 $generated@@26 $generated@@36 $generated@@35 $generated@@37))
 :pattern ( ($generated@@33 $generated@@26 $generated@@36 $generated@@34 $generated@@37))
 :pattern ( ($generated@@33 $generated@@26 $generated@@36 $generated@@35 $generated@@37))
)))
(assert (forall (($generated@@39 T@U) ($generated@@40 T@U) ) (! (= ($generated@@33 $generated@@26 $generated@@39 $generated@@38 $generated@@40) ($generated@@33 $generated@@26 $generated@@39 $generated@@27 $generated@@40))
 :pattern ( ($generated@@33 $generated@@26 $generated@@39 $generated@@38 $generated@@40))
 :pattern ( ($generated@@33 $generated@@26 $generated@@39 $generated@@27 $generated@@40))
)))
(assert (forall (($generated@@42 T@U) ($generated@@43 T@U) ) (! (= ($generated@@33 $generated@@26 $generated@@42 $generated@@41 $generated@@43) ($generated@@33 $generated@@26 $generated@@42 $generated@@31 $generated@@43))
 :pattern ( ($generated@@33 $generated@@26 $generated@@42 $generated@@41 $generated@@43))
 :pattern ( ($generated@@33 $generated@@26 $generated@@42 $generated@@31 $generated@@43))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@52 T@T) ($generated@@53 T@T) ($generated@@54 T@U) ($generated@@55 T@U) ($generated@@56 T@U) ) (! (= ($generated@@45 $generated@@52 $generated@@53 ($generated@@49 $generated@@52 $generated@@53 $generated@@55 $generated@@56 $generated@@54) $generated@@56) $generated@@54)
 :weight 0
)) (forall (($generated@@57 T@T) ($generated@@58 T@T) ($generated@@59 T@U) ($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@U) ) (!  (or (= $generated@@61 $generated@@62) (= ($generated@@45 $generated@@57 $generated@@58 ($generated@@49 $generated@@57 $generated@@58 $generated@@60 $generated@@61 $generated@@59) $generated@@62) ($generated@@45 $generated@@57 $generated@@58 $generated@@60 $generated@@62)))
 :weight 0
))) (= ($generated@@9 $generated@@46) 4)) (= ($generated@@9 $generated@@47) 5)) (forall (($generated@@63 T@T) ($generated@@64 T@T) ) (= ($generated@@9 ($generated@@48 $generated@@63 $generated@@64)) 6))) (forall (($generated@@65 T@T) ($generated@@66 T@T) ) (! (= ($generated@@50 ($generated@@48 $generated@@65 $generated@@66)) $generated@@65)
 :pattern ( ($generated@@48 $generated@@65 $generated@@66))
))) (forall (($generated@@67 T@T) ($generated@@68 T@T) ) (! (= ($generated@@51 ($generated@@48 $generated@@67 $generated@@68)) $generated@@68)
 :pattern ( ($generated@@48 $generated@@67 $generated@@68))
))))
(assert (forall (($generated@@69 T@U) ($generated@@70 T@U) ) (! (= ($generated@@33 $generated@@26 $generated@@69 $generated@@35 $generated@@70)  (or (= $generated@@69 $generated@@28) ($generated@@14 ($generated@@44 $generated@@10 ($generated@@45 $generated@@46 $generated@@47 ($generated@@45 $generated@@26 ($generated@@48 $generated@@46 $generated@@47) $generated@@70 $generated@@69) $generated)))))
 :pattern ( ($generated@@33 $generated@@26 $generated@@69 $generated@@35 $generated@@70))
)))
(assert (forall (($generated@@71 T@U) ($generated@@72 T@U) ) (! (= ($generated@@33 $generated@@26 $generated@@71 $generated@@27 $generated@@72)  (or (= $generated@@71 $generated@@28) ($generated@@14 ($generated@@44 $generated@@10 ($generated@@45 $generated@@46 $generated@@47 ($generated@@45 $generated@@26 ($generated@@48 $generated@@46 $generated@@47) $generated@@72 $generated@@71) $generated)))))
 :pattern ( ($generated@@33 $generated@@26 $generated@@71 $generated@@27 $generated@@72))
)))
(assert (forall (($generated@@73 T@U) ($generated@@74 T@U) ) (! (= ($generated@@33 $generated@@26 $generated@@73 $generated@@31 $generated@@74)  (or (= $generated@@73 $generated@@28) ($generated@@14 ($generated@@44 $generated@@10 ($generated@@45 $generated@@46 $generated@@47 ($generated@@45 $generated@@26 ($generated@@48 $generated@@46 $generated@@47) $generated@@74 $generated@@73) $generated)))))
 :pattern ( ($generated@@33 $generated@@26 $generated@@73 $generated@@31 $generated@@74))
)))
(assert (forall (($generated@@76 T@U) ($generated@@77 T@U) ) (!  (=> ($generated@@75 $generated@@76 $generated@@77) (forall (($generated@@78 T@U) ) (!  (=> ($generated@@14 ($generated@@44 $generated@@10 ($generated@@45 $generated@@46 $generated@@47 ($generated@@45 $generated@@26 ($generated@@48 $generated@@46 $generated@@47) $generated@@76 $generated@@78) $generated))) ($generated@@14 ($generated@@44 $generated@@10 ($generated@@45 $generated@@46 $generated@@47 ($generated@@45 $generated@@26 ($generated@@48 $generated@@46 $generated@@47) $generated@@77 $generated@@78) $generated))))
 :pattern ( ($generated@@45 $generated@@46 $generated@@47 ($generated@@45 $generated@@26 ($generated@@48 $generated@@46 $generated@@47) $generated@@77 $generated@@78) $generated))
)))
 :pattern ( ($generated@@75 $generated@@76 $generated@@77))
)))
(assert (forall (($generated@@80 T@U) ($generated@@81 T@T) ) (! (= ($generated@@79 $generated@@81 $generated@@80) $generated@@80)
 :pattern ( ($generated@@79 $generated@@81 $generated@@80))
)))
(assert (forall (($generated@@83 T@U) ($generated@@84 T@T) ) (! (= ($generated@@82 $generated@@84 ($generated@@44 $generated@@84 $generated@@83)) $generated@@83)
 :pattern ( ($generated@@44 $generated@@84 $generated@@83))
)))
(assert (forall (($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@T) ) (! (= ($generated@@85 ($generated@@82 $generated@@89 $generated@@86) $generated@@87 $generated@@88) ($generated@@33 $generated@@89 $generated@@86 $generated@@87 $generated@@88))
 :pattern ( ($generated@@85 ($generated@@82 $generated@@89 $generated@@86) $generated@@87 $generated@@88))
)))
(assert (forall (($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ) (!  (=> ($generated@@75 $generated@@90 $generated@@91) (=> ($generated@@85 $generated@@92 $generated@@93 $generated@@90) ($generated@@85 $generated@@92 $generated@@93 $generated@@91)))
 :pattern ( ($generated@@75 $generated@@90 $generated@@91) ($generated@@85 $generated@@92 $generated@@93 $generated@@90))
)))
(assert (forall (($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@T) ) (!  (=> ($generated@@75 $generated@@94 $generated@@95) (=> ($generated@@33 $generated@@98 $generated@@96 $generated@@97 $generated@@94) ($generated@@33 $generated@@98 $generated@@96 $generated@@97 $generated@@95)))
 :pattern ( ($generated@@75 $generated@@94 $generated@@95) ($generated@@33 $generated@@98 $generated@@96 $generated@@97 $generated@@94))
)))
(assert (forall (($generated@@99 T@U) ) (! (= ($generated@@25 $generated@@26 $generated@@99 $generated@@34)  (and ($generated@@25 $generated@@26 $generated@@99 $generated@@35) (or (not (= $generated@@99 $generated@@28)) (not true))))
 :pattern ( ($generated@@25 $generated@@26 $generated@@99 $generated@@34))
 :pattern ( ($generated@@25 $generated@@26 $generated@@99 $generated@@35))
)))
(assert (forall (($generated@@100 T@U) ) (! (= ($generated@@25 $generated@@26 $generated@@100 $generated@@38)  (and ($generated@@25 $generated@@26 $generated@@100 $generated@@27) (or (not (= $generated@@100 $generated@@28)) (not true))))
 :pattern ( ($generated@@25 $generated@@26 $generated@@100 $generated@@38))
 :pattern ( ($generated@@25 $generated@@26 $generated@@100 $generated@@27))
)))
(assert (forall (($generated@@101 T@U) ) (! (= ($generated@@25 $generated@@26 $generated@@101 $generated@@41)  (and ($generated@@25 $generated@@26 $generated@@101 $generated@@31) (or (not (= $generated@@101 $generated@@28)) (not true))))
 :pattern ( ($generated@@25 $generated@@26 $generated@@101 $generated@@41))
 :pattern ( ($generated@@25 $generated@@26 $generated@@101 $generated@@31))
)))
(assert (forall (($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ) (!  (=> (or (not (= $generated@@102 $generated@@104)) (not true)) (=> (and ($generated@@75 $generated@@102 $generated@@103) ($generated@@75 $generated@@103 $generated@@104)) ($generated@@75 $generated@@102 $generated@@104)))
 :pattern ( ($generated@@75 $generated@@102 $generated@@103) ($generated@@75 $generated@@103 $generated@@104))
)))
(assert (forall (($generated@@105 T@U) ) (! ($generated@@25 $generated@@26 $generated@@105 $generated@@35)
 :pattern ( ($generated@@25 $generated@@26 $generated@@105 $generated@@35))
)))
(assert (forall (($generated@@106 T@U) ($generated@@107 T@T) ) (! (= ($generated@@44 $generated@@107 ($generated@@82 $generated@@107 $generated@@106)) $generated@@106)
 :pattern ( ($generated@@82 $generated@@107 $generated@@106))
)))
(assert  (and (forall (($generated@@111 T@T) ($generated@@112 T@T) ($generated@@113 T@T) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ) (! (= ($generated@@108 $generated@@111 $generated@@112 $generated@@113 ($generated@@110 $generated@@111 $generated@@112 $generated@@113 $generated@@115 $generated@@116 $generated@@117 $generated@@114) $generated@@116 $generated@@117) $generated@@114)
 :weight 0
)) (and (forall (($generated@@118 T@T) ($generated@@119 T@T) ($generated@@120 T@T) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ) (!  (or (= $generated@@123 $generated@@125) (= ($generated@@108 $generated@@118 $generated@@119 $generated@@120 ($generated@@110 $generated@@118 $generated@@119 $generated@@120 $generated@@122 $generated@@123 $generated@@124 $generated@@121) $generated@@125 $generated@@126) ($generated@@108 $generated@@118 $generated@@119 $generated@@120 $generated@@122 $generated@@125 $generated@@126)))
 :weight 0
)) (forall (($generated@@127 T@T) ($generated@@128 T@T) ($generated@@129 T@T) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ) (!  (or (= $generated@@133 $generated@@135) (= ($generated@@108 $generated@@127 $generated@@128 $generated@@129 ($generated@@110 $generated@@127 $generated@@128 $generated@@129 $generated@@131 $generated@@132 $generated@@133 $generated@@130) $generated@@134 $generated@@135) ($generated@@108 $generated@@127 $generated@@128 $generated@@129 $generated@@131 $generated@@134 $generated@@135)))
 :weight 0
)))))
(assert (forall (($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 Bool) ($generated@@140 T@U) ($generated@@141 T@U) ) (! (= ($generated@@14 ($generated@@108 $generated@@26 $generated@@46 $generated@@10 ($generated@@109 $generated@@136 $generated@@137 $generated@@138 $generated@@139) $generated@@140 $generated@@141))  (=> (and (or (not (= $generated@@140 $generated@@136)) (not true)) ($generated@@14 ($generated@@44 $generated@@10 ($generated@@45 $generated@@46 $generated@@47 ($generated@@45 $generated@@26 ($generated@@48 $generated@@46 $generated@@47) $generated@@137 $generated@@140) $generated@@138)))) $generated@@139))
 :pattern ( ($generated@@108 $generated@@26 $generated@@46 $generated@@10 ($generated@@109 $generated@@136 $generated@@137 $generated@@138 $generated@@139) $generated@@140 $generated@@141))
)))
(assert (forall (($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ($generated@@146 T@U) ) (!  (=> ($generated@@142 ($generated@@49 $generated@@26 ($generated@@48 $generated@@46 $generated@@47) $generated@@143 $generated@@144 ($generated@@49 $generated@@46 $generated@@47 ($generated@@45 $generated@@26 ($generated@@48 $generated@@46 $generated@@47) $generated@@143 $generated@@144) $generated@@145 $generated@@146))) ($generated@@75 $generated@@143 ($generated@@49 $generated@@26 ($generated@@48 $generated@@46 $generated@@47) $generated@@143 $generated@@144 ($generated@@49 $generated@@46 $generated@@47 ($generated@@45 $generated@@26 ($generated@@48 $generated@@46 $generated@@47) $generated@@143 $generated@@144) $generated@@145 $generated@@146))))
 :pattern ( ($generated@@49 $generated@@26 ($generated@@48 $generated@@46 $generated@@47) $generated@@143 $generated@@144 ($generated@@49 $generated@@46 $generated@@47 ($generated@@45 $generated@@26 ($generated@@48 $generated@@46 $generated@@47) $generated@@143 $generated@@144) $generated@@145 $generated@@146)))
)))
(assert (= ($generated@@147 $generated@@35) $generated@@0))
(assert (= ($generated@@148 $generated@@35) $generated@@6))
(assert (= ($generated@@147 $generated@@34) $generated@@1))
(assert (= ($generated@@148 $generated@@34) $generated@@6))
(assert (= ($generated@@147 $generated@@38) $generated@@2))
(assert (= ($generated@@148 $generated@@38) $generated@@7))
(assert (= ($generated@@147 $generated@@27) $generated@@3))
(assert (= ($generated@@148 $generated@@27) $generated@@7))
(assert (= ($generated@@147 $generated@@31) $generated@@4))
(assert (= ($generated@@148 $generated@@31) $generated@@8))
(assert (= ($generated@@147 $generated@@41) $generated@@5))
(assert (= ($generated@@148 $generated@@41) $generated@@8))
(assert (forall (($generated@@149 T@U) ($generated@@150 T@T) ) (! (= ($generated@@82 $generated@@150 ($generated@@79 $generated@@150 $generated@@149)) ($generated@@79 $generated@@47 ($generated@@82 $generated@@150 $generated@@149)))
 :pattern ( ($generated@@82 $generated@@150 ($generated@@79 $generated@@150 $generated@@149)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@151 () T@U)
(declare-fun $generated@@152 () T@U)
(declare-fun $generated@@153 () T@U)
(declare-fun $generated@@154 () T@U)
(declare-fun $generated@@155 (T@U) Bool)
(declare-fun $generated@@156 () T@U)
(declare-fun $generated@@157 () Bool)
(declare-fun $generated@@158 () T@U)
(declare-fun $generated@@159 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 28) (let (($generated@@160  (and (=> (= (ControlFlow 0 16) (- 0 18)) (and (or (not (= $generated@@151 $generated@@28)) (not true)) (not ($generated@@14 ($generated@@44 $generated@@10 ($generated@@45 $generated@@46 $generated@@47 ($generated@@45 $generated@@26 ($generated@@48 $generated@@46 $generated@@47) $generated@@152 $generated@@151) $generated)))))) (and (=> (= (ControlFlow 0 16) (- 0 17)) (not ($generated@@85 ($generated@@82 $generated@@26 $generated@@151) $generated@@38 $generated@@152))) (=> (= (ControlFlow 0 16) (- 0 15)) ($generated@@85 ($generated@@82 $generated@@26 $generated@@151) $generated@@38 $generated@@153))))))
(let (($generated@@161  (=> (and (not (and (and (or (not (= $generated@@151 $generated@@28)) (not true)) (not ($generated@@14 ($generated@@44 $generated@@10 ($generated@@45 $generated@@46 $generated@@47 ($generated@@45 $generated@@26 ($generated@@48 $generated@@46 $generated@@47) $generated@@152 $generated@@151) $generated))))) (not ($generated@@85 ($generated@@82 $generated@@26 $generated@@151) $generated@@38 $generated@@152)))) (= (ControlFlow 0 21) 16)) $generated@@160)))
(let (($generated@@162  (=> (and (and (or (not (= $generated@@151 $generated@@28)) (not true)) (not ($generated@@14 ($generated@@44 $generated@@10 ($generated@@45 $generated@@46 $generated@@47 ($generated@@45 $generated@@26 ($generated@@48 $generated@@46 $generated@@47) $generated@@152 $generated@@151) $generated))))) (not ($generated@@85 ($generated@@82 $generated@@26 $generated@@151) $generated@@38 $generated@@152))) (and (=> (= (ControlFlow 0 19) (- 0 20)) true) (=> (= (ControlFlow 0 19) 16) $generated@@160)))))
(let (($generated@@163  (=> (not (and (or (not (= $generated@@151 $generated@@28)) (not true)) (not ($generated@@14 ($generated@@44 $generated@@10 ($generated@@45 $generated@@46 $generated@@47 ($generated@@45 $generated@@26 ($generated@@48 $generated@@46 $generated@@47) $generated@@152 $generated@@151) $generated)))))) (and (=> (= (ControlFlow 0 24) 19) $generated@@162) (=> (= (ControlFlow 0 24) 21) $generated@@161)))))
(let (($generated@@164  (=> (and (or (not (= $generated@@151 $generated@@28)) (not true)) (not ($generated@@14 ($generated@@44 $generated@@10 ($generated@@45 $generated@@46 $generated@@47 ($generated@@45 $generated@@26 ($generated@@48 $generated@@46 $generated@@47) $generated@@152 $generated@@151) $generated))))) (and (=> (= (ControlFlow 0 22) (- 0 23)) true) (and (=> (= (ControlFlow 0 22) 19) $generated@@162) (=> (= (ControlFlow 0 22) 21) $generated@@161))))))
(let (($generated@@165  (and (=> (= (ControlFlow 0 25) (- 0 26)) true) (and (=> (= (ControlFlow 0 25) 22) $generated@@164) (=> (= (ControlFlow 0 25) 24) $generated@@163)))))
(let (($generated@@166  (=> (and (and (and (and (and (and (not ($generated@@14 ($generated@@79 $generated@@10 ($generated@@13 true)))) (not ($generated@@14 ($generated@@79 $generated@@10 ($generated@@13 true))))) (not ($generated@@14 ($generated@@79 $generated@@10 ($generated@@13 true))))) (not ($generated@@14 ($generated@@79 $generated@@10 ($generated@@13 true))))) (not ($generated@@14 ($generated@@79 $generated@@10 ($generated@@13 true))))) (not ($generated@@14 ($generated@@79 $generated@@10 ($generated@@13 true))))) (= (ControlFlow 0 14) (- 0 13))) false)))
(let (($generated@@167  (=> (= (ControlFlow 0 12) (- 0 11)) ($generated@@85 ($generated@@82 $generated@@26 $generated@@28) $generated@@35 $generated@@153))))
(let (($generated@@168  (=> (= (ControlFlow 0 10) (- 0 9)) (not (and (or (not (= $generated@@28 $generated@@28)) (not true)) (not ($generated@@14 ($generated@@44 $generated@@10 ($generated@@45 $generated@@46 $generated@@47 ($generated@@45 $generated@@26 ($generated@@48 $generated@@46 $generated@@47) $generated@@152 $generated@@28) $generated)))))))))
(let (($generated@@169  (=> (= (ControlFlow 0 8) (- 0 7)) (and (or (not (= $generated@@28 $generated@@28)) (not true)) (not ($generated@@14 ($generated@@44 $generated@@10 ($generated@@45 $generated@@46 $generated@@47 ($generated@@45 $generated@@26 ($generated@@48 $generated@@46 $generated@@47) $generated@@152 $generated@@28) $generated))))))))
(let (($generated@@170  (and (=> (= (ControlFlow 0 5) (- 0 6)) true) (=> (= (ControlFlow 0 5) (- 0 4)) (not (and (or (not (= $generated@@151 $generated@@28)) (not true)) (not ($generated@@14 ($generated@@44 $generated@@10 ($generated@@45 $generated@@46 $generated@@47 ($generated@@45 $generated@@26 ($generated@@48 $generated@@46 $generated@@47) $generated@@152 $generated@@151) $generated))))))))))
(let (($generated@@171  (and (=> (= (ControlFlow 0 2) (- 0 3)) true) (=> (= (ControlFlow 0 2) (- 0 1)) ($generated@@85 ($generated@@82 $generated@@26 $generated@@151) $generated@@38 $generated@@152)))))
(let (($generated@@172  (=> (= $generated@@154 ($generated@@109 $generated@@28 $generated@@152 $generated false)) (=> (and (or (not (= $generated@@151 $generated@@28)) (not true)) ($generated@@25 $generated@@26 $generated@@151 $generated@@27)) (=> (and (and (not ($generated@@14 ($generated@@44 $generated@@10 ($generated@@45 $generated@@46 $generated@@47 ($generated@@45 $generated@@26 ($generated@@48 $generated@@46 $generated@@47) $generated@@152 $generated@@151) $generated)))) (= $generated@@153 ($generated@@49 $generated@@26 ($generated@@48 $generated@@46 $generated@@47) $generated@@152 $generated@@151 ($generated@@49 $generated@@46 $generated@@47 ($generated@@45 $generated@@26 ($generated@@48 $generated@@46 $generated@@47) $generated@@152 $generated@@151) $generated ($generated@@82 $generated@@10 ($generated@@13 true)))))) (and ($generated@@142 $generated@@153) ($generated@@155 $generated@@153))) (and (and (and (and (and (and (=> (= (ControlFlow 0 27) 2) $generated@@171) (=> (= (ControlFlow 0 27) 5) $generated@@170)) (=> (= (ControlFlow 0 27) 25) $generated@@165)) (=> (= (ControlFlow 0 27) 8) $generated@@169)) (=> (= (ControlFlow 0 27) 10) $generated@@168)) (=> (= (ControlFlow 0 27) 12) $generated@@167)) (=> (= (ControlFlow 0 27) 14) $generated@@166)))))))
(let (($generated@@173  (=> (and (and (and ($generated@@142 $generated@@152) ($generated@@155 $generated@@152)) (and (or (not (= $generated@@156 $generated@@28)) (not true)) (and ($generated@@25 $generated@@26 $generated@@156 $generated@@41) ($generated@@33 $generated@@26 $generated@@156 $generated@@41 $generated@@152)))) (and (and (=> $generated@@157 (and ($generated@@25 $generated@@26 $generated@@158 $generated@@38) ($generated@@33 $generated@@26 $generated@@158 $generated@@38 $generated@@152))) true) (and (= 1 $generated@@159) (= (ControlFlow 0 28) 27)))) $generated@@172)))
$generated@@173)))))))))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 5) (- 4))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 8) (- 7))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
