(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 (T@U) T@U)
(declare-fun $generated@@20 (T@U T@U) T@U)
(declare-fun $generated@@21 (T@U T@U) Bool)
(declare-fun $generated@@30 () T@U)
(declare-fun $generated@@32 (Int) Int)
(declare-fun $generated@@34 (T@T T@U) T@U)
(declare-fun $generated@@37 (T@T T@U) T@U)
(declare-fun $generated@@38 (T@T T@U) T@U)
(declare-fun $generated@@41 (T@U) T@U)
(declare-fun $generated@@42 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@43 () T@T)
(declare-fun $generated@@44 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@58 (T@U Int Int Int Int Int Int Int) T@U)
(declare-fun $generated@@59 (T@U T@U) Bool)
(declare-fun $generated@@69 (T@T T@U T@U) Bool)
(declare-fun $generated@@70 () T@T)
(declare-fun $generated@@71 (T@U) T@U)
(declare-fun $generated@@75 (T@U T@U T@U) Bool)
(declare-fun $generated@@76 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@81 (T@U T@U) Bool)
(declare-fun $generated@@92 (T@U) T@U)
(declare-fun $generated@@97 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@98 () T@T)
(declare-fun $generated@@99 () T@T)
(declare-fun $generated@@100 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@101 (T@T T@T) T@T)
(declare-fun $generated@@102 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@103 (T@T) T@T)
(declare-fun $generated@@104 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (= ($generated@@19 $generated) $generated@@0))
(assert (forall (($generated@@22 T@U) ($generated@@23 T@U) ) (! ($generated@@21 ($generated@@20 $generated@@22 $generated@@23) $generated@@23)
 :pattern ( ($generated@@20 $generated@@22 $generated@@23))
)))
(assert (forall (($generated@@24 T@U) ($generated@@25 T@U) ($generated@@26 T@U) ) (!  (=> ($generated@@21 $generated@@24 $generated@@26) ($generated@@21 ($generated@@20 $generated@@24 $generated@@25) $generated@@26))
 :pattern ( ($generated@@20 $generated@@24 $generated@@25) ($generated@@21 $generated@@24 $generated@@26))
)))
(assert (forall (($generated@@27 T@U) ($generated@@28 T@U) ($generated@@29 T@U) ) (! (= ($generated@@21 ($generated@@20 $generated@@27 $generated@@28) $generated@@29)  (or (= $generated@@29 $generated@@28) ($generated@@21 $generated@@27 $generated@@29)))
 :pattern ( ($generated@@21 ($generated@@20 $generated@@27 $generated@@28) $generated@@29))
)))
(assert (forall (($generated@@31 T@U) ) (!  (not ($generated@@21 $generated@@30 $generated@@31))
 :pattern ( ($generated@@21 $generated@@30 $generated@@31))
)))
(assert (forall (($generated@@33 Int) ) (! (= ($generated@@32 $generated@@33) $generated@@33)
 :pattern ( ($generated@@32 $generated@@33))
)))
(assert (forall (($generated@@35 T@U) ($generated@@36 T@T) ) (! (= ($generated@@34 $generated@@36 $generated@@35) $generated@@35)
 :pattern ( ($generated@@34 $generated@@36 $generated@@35))
)))
(assert (forall (($generated@@39 T@U) ($generated@@40 T@T) ) (! (= ($generated@@38 $generated@@40 ($generated@@37 $generated@@40 $generated@@39)) $generated@@39)
 :pattern ( ($generated@@37 $generated@@40 $generated@@39))
)))
(assert  (and (and (forall (($generated@@45 T@T) ($generated@@46 T@T) ($generated@@47 T@U) ($generated@@48 T@U) ($generated@@49 T@U) ) (! (= ($generated@@42 $generated@@45 $generated@@46 ($generated@@44 $generated@@45 $generated@@46 $generated@@48 $generated@@49 $generated@@47) $generated@@49) $generated@@47)
 :weight 0
)) (forall (($generated@@50 T@T) ($generated@@51 T@T) ($generated@@52 T@U) ($generated@@53 T@U) ($generated@@54 T@U) ($generated@@55 T@U) ) (!  (or (= $generated@@54 $generated@@55) (= ($generated@@42 $generated@@50 $generated@@51 ($generated@@44 $generated@@50 $generated@@51 $generated@@53 $generated@@54 $generated@@52) $generated@@55) ($generated@@42 $generated@@50 $generated@@51 $generated@@53 $generated@@55)))
 :weight 0
))) (= ($generated@@3 $generated@@43) 3)))
(assert (forall (($generated@@56 T@U) ($generated@@57 T@U) ) (! (= ($generated@@21 ($generated@@41 $generated@@56) $generated@@57) ($generated@@8 ($generated@@42 $generated@@43 $generated@@4 $generated@@56 $generated@@57)))
 :pattern ( ($generated@@21 ($generated@@41 $generated@@56) $generated@@57))
)))
(assert (forall (($generated@@60 T@U) ($generated@@61 Int) ($generated@@62 Int) ($generated@@63 Int) ($generated@@64 Int) ($generated@@65 Int) ($generated@@66 Int) ($generated@@67 Int) ($generated@@68 T@U) ) (! (= ($generated@@8 ($generated@@42 $generated@@43 $generated@@4 ($generated@@58 $generated@@60 $generated@@61 $generated@@62 $generated@@63 $generated@@64 $generated@@65 $generated@@66 $generated@@67) $generated@@68))  (and ($generated@@59 $generated@@68 $generated@@60) (and (or (or (or (or (or (= ($generated@@10 ($generated@@37 $generated@@5 $generated@@68)) $generated@@61) (= ($generated@@10 ($generated@@37 $generated@@5 $generated@@68)) $generated@@62)) (= ($generated@@10 ($generated@@37 $generated@@5 $generated@@68)) $generated@@63)) (= ($generated@@10 ($generated@@37 $generated@@5 $generated@@68)) $generated@@64)) (= ($generated@@10 ($generated@@37 $generated@@5 $generated@@68)) $generated@@65)) (= ($generated@@10 ($generated@@37 $generated@@5 $generated@@68)) $generated@@66)) (< ($generated@@10 ($generated@@37 $generated@@5 $generated@@68)) $generated@@67))))
 :pattern ( ($generated@@42 $generated@@43 $generated@@4 ($generated@@58 $generated@@60 $generated@@61 $generated@@62 $generated@@63 $generated@@64 $generated@@65 $generated@@66 $generated@@67) $generated@@68))
)))
(assert (= ($generated@@3 $generated@@70) 4))
(assert (forall (($generated@@72 T@U) ($generated@@73 T@U) ) (! (= ($generated@@69 $generated@@70 $generated@@72 ($generated@@71 $generated@@73)) (forall (($generated@@74 T@U) ) (!  (=> ($generated@@21 $generated@@72 $generated@@74) ($generated@@59 $generated@@74 $generated@@73))
 :pattern ( ($generated@@21 $generated@@72 $generated@@74))
)))
 :pattern ( ($generated@@69 $generated@@70 $generated@@72 ($generated@@71 $generated@@73)))
)))
(assert (forall (($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@T) ) (! (= ($generated@@75 ($generated@@38 $generated@@80 $generated@@77) $generated@@78 $generated@@79) ($generated@@76 $generated@@80 $generated@@77 $generated@@78 $generated@@79))
 :pattern ( ($generated@@75 ($generated@@38 $generated@@80 $generated@@77) $generated@@78 $generated@@79))
)))
(assert (forall (($generated@@82 T@U) ($generated@@83 T@U) ) (!  (=> ($generated@@81 $generated@@82 $generated@@83) (= $generated@@82 $generated@@83))
 :pattern ( ($generated@@81 $generated@@82 $generated@@83))
)))
(assert (forall (($generated@@84 T@U) ) (!  (=> ($generated@@59 $generated@@84 $generated) (and (= ($generated@@38 $generated@@5 ($generated@@37 $generated@@5 $generated@@84)) $generated@@84) ($generated@@69 $generated@@5 ($generated@@37 $generated@@5 $generated@@84) $generated)))
 :pattern ( ($generated@@59 $generated@@84 $generated))
)))
(assert (forall (($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@T) ) (! (= ($generated@@59 ($generated@@38 $generated@@87 $generated@@85) $generated@@86) ($generated@@69 $generated@@87 $generated@@85 $generated@@86))
 :pattern ( ($generated@@59 ($generated@@38 $generated@@87 $generated@@85) $generated@@86))
)))
(assert (forall (($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ) (! (= ($generated@@76 $generated@@70 $generated@@88 ($generated@@71 $generated@@89) $generated@@90) (forall (($generated@@91 T@U) ) (!  (=> ($generated@@21 $generated@@88 $generated@@91) ($generated@@75 $generated@@91 $generated@@89 $generated@@90))
 :pattern ( ($generated@@21 $generated@@88 $generated@@91))
)))
 :pattern ( ($generated@@76 $generated@@70 $generated@@88 ($generated@@71 $generated@@89) $generated@@90))
)))
(assert (forall (($generated@@93 T@U) ) (! (= ($generated@@92 ($generated@@71 $generated@@93)) $generated@@93)
 :pattern ( ($generated@@71 $generated@@93))
)))
(assert (forall (($generated@@94 T@U) ) (! (= ($generated@@19 ($generated@@71 $generated@@94)) $generated@@1)
 :pattern ( ($generated@@71 $generated@@94))
)))
(assert (forall (($generated@@95 T@U) ($generated@@96 T@T) ) (! (= ($generated@@37 $generated@@96 ($generated@@38 $generated@@96 $generated@@95)) $generated@@95)
 :pattern ( ($generated@@38 $generated@@96 $generated@@95))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@105 T@T) ($generated@@106 T@T) ($generated@@107 T@T) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (! (= ($generated@@97 $generated@@105 $generated@@106 $generated@@107 ($generated@@102 $generated@@105 $generated@@106 $generated@@107 $generated@@109 $generated@@110 $generated@@111 $generated@@108) $generated@@110 $generated@@111) $generated@@108)
 :weight 0
)) (and (forall (($generated@@112 T@T) ($generated@@113 T@T) ($generated@@114 T@T) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (!  (or (= $generated@@117 $generated@@119) (= ($generated@@97 $generated@@112 $generated@@113 $generated@@114 ($generated@@102 $generated@@112 $generated@@113 $generated@@114 $generated@@116 $generated@@117 $generated@@118 $generated@@115) $generated@@119 $generated@@120) ($generated@@97 $generated@@112 $generated@@113 $generated@@114 $generated@@116 $generated@@119 $generated@@120)))
 :weight 0
)) (forall (($generated@@121 T@T) ($generated@@122 T@T) ($generated@@123 T@T) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 T@U) ) (!  (or (= $generated@@127 $generated@@129) (= ($generated@@97 $generated@@121 $generated@@122 $generated@@123 ($generated@@102 $generated@@121 $generated@@122 $generated@@123 $generated@@125 $generated@@126 $generated@@127 $generated@@124) $generated@@128 $generated@@129) ($generated@@97 $generated@@121 $generated@@122 $generated@@123 $generated@@125 $generated@@128 $generated@@129)))
 :weight 0
)))) (= ($generated@@3 $generated@@98) 5)) (= ($generated@@3 $generated@@99) 6)) (forall (($generated@@130 T@T) ($generated@@131 T@T) ) (= ($generated@@3 ($generated@@101 $generated@@130 $generated@@131)) 7))) (forall (($generated@@132 T@T) ($generated@@133 T@T) ) (! (= ($generated@@103 ($generated@@101 $generated@@132 $generated@@133)) $generated@@132)
 :pattern ( ($generated@@101 $generated@@132 $generated@@133))
))) (forall (($generated@@134 T@T) ($generated@@135 T@T) ) (! (= ($generated@@104 ($generated@@101 $generated@@134 $generated@@135)) $generated@@135)
 :pattern ( ($generated@@101 $generated@@134 $generated@@135))
))))
(assert (forall (($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 Bool) ($generated@@140 T@U) ($generated@@141 T@U) ) (! (= ($generated@@8 ($generated@@97 $generated@@98 $generated@@99 $generated@@4 ($generated@@100 $generated@@136 $generated@@137 $generated@@138 $generated@@139) $generated@@140 $generated@@141))  (=> (and (or (not (= $generated@@140 $generated@@136)) (not true)) ($generated@@8 ($generated@@37 $generated@@4 ($generated@@42 $generated@@99 $generated@@43 ($generated@@42 $generated@@98 ($generated@@101 $generated@@99 $generated@@43) $generated@@137 $generated@@140) $generated@@138)))) $generated@@139))
 :pattern ( ($generated@@97 $generated@@98 $generated@@99 $generated@@4 ($generated@@100 $generated@@136 $generated@@137 $generated@@138 $generated@@139) $generated@@140 $generated@@141))
)))
(assert (forall (($generated@@142 T@U) ($generated@@143 T@U) ) (!  (=> ($generated@@59 $generated@@142 ($generated@@71 $generated@@143)) (and (= ($generated@@38 $generated@@70 ($generated@@37 $generated@@70 $generated@@142)) $generated@@142) ($generated@@69 $generated@@70 ($generated@@37 $generated@@70 $generated@@142) ($generated@@71 $generated@@143))))
 :pattern ( ($generated@@59 $generated@@142 ($generated@@71 $generated@@143)))
)))
(assert (forall (($generated@@144 T@U) ($generated@@145 T@U) ) (! (= ($generated@@81 $generated@@144 $generated@@145) (forall (($generated@@146 T@U) ) (! (= ($generated@@21 $generated@@144 $generated@@146) ($generated@@21 $generated@@145 $generated@@146))
 :pattern ( ($generated@@21 $generated@@144 $generated@@146))
 :pattern ( ($generated@@21 $generated@@145 $generated@@146))
)))
 :pattern ( ($generated@@81 $generated@@144 $generated@@145))
)))
(assert (forall (($generated@@147 Int) ) (! (= ($generated@@38 $generated@@5 ($generated@@9 ($generated@@32 $generated@@147))) ($generated@@34 $generated@@43 ($generated@@38 $generated@@5 ($generated@@9 $generated@@147))))
 :pattern ( ($generated@@38 $generated@@5 ($generated@@9 ($generated@@32 $generated@@147))))
)))
(assert (forall (($generated@@148 T@U) ($generated@@149 T@T) ) (! (= ($generated@@38 $generated@@149 ($generated@@34 $generated@@149 $generated@@148)) ($generated@@34 $generated@@43 ($generated@@38 $generated@@149 $generated@@148)))
 :pattern ( ($generated@@38 $generated@@149 ($generated@@34 $generated@@149 $generated@@148)))
)))
(assert (forall (($generated@@150 T@U) ($generated@@151 T@U) ) (! ($generated@@76 $generated@@5 $generated@@151 $generated $generated@@150)
 :pattern ( ($generated@@76 $generated@@5 $generated@@151 $generated $generated@@150))
)))
(assert (forall (($generated@@152 T@U) ) (! ($generated@@69 $generated@@5 $generated@@152 $generated)
 :pattern ( ($generated@@69 $generated@@5 $generated@@152 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@153 () T@U)
(declare-fun $generated@@154 () T@U)
(declare-fun $generated@@155 () Int)
(declare-fun $generated@@156 () Int)
(declare-fun $generated@@157 () Int)
(declare-fun $generated@@158 () T@U)
(declare-fun $generated@@159 () T@U)
(declare-fun $generated@@160 () T@U)
(declare-fun $generated@@161 (T@U) Bool)
(declare-fun $generated@@162 (T@U) Bool)
(declare-fun $generated@@163 () T@U)
(declare-fun $generated@@164 () T@U)
(declare-fun $generated@@165 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 30) (let (($generated@@166  (=> (= (ControlFlow 0 13) (- 0 12)) (forall (($generated@@167 Int) ) (!  (=> ($generated@@21 $generated@@154 ($generated@@38 $generated@@5 ($generated@@9 $generated@@167))) ($generated@@21 $generated@@153 ($generated@@38 $generated@@5 ($generated@@9 $generated@@167))))
 :pattern ( ($generated@@21 $generated@@153 ($generated@@38 $generated@@5 ($generated@@9 $generated@@167))))
 :pattern ( ($generated@@21 $generated@@154 ($generated@@38 $generated@@5 ($generated@@9 $generated@@167))))
)))))
(let (($generated@@168  (=> (and (not ($generated@@21 $generated@@154 ($generated@@38 $generated@@5 ($generated@@9 $generated@@155)))) (= (ControlFlow 0 15) 13)) $generated@@166)))
(let (($generated@@169  (=> (and ($generated@@21 $generated@@154 ($generated@@38 $generated@@5 ($generated@@9 $generated@@155))) (= (ControlFlow 0 14) 13)) $generated@@166)))
(let (($generated@@170  (and (=> (= (ControlFlow 0 16) 14) $generated@@169) (=> (= (ControlFlow 0 16) 15) $generated@@168))))
(let (($generated@@171 true))
(let (($generated@@172  (and (=> (= (ControlFlow 0 17) (- 0 18)) (forall (($generated@@173 Int) ) (!  (=> ($generated@@21 $generated@@153 ($generated@@38 $generated@@5 ($generated@@9 $generated@@173))) ($generated@@21 $generated@@154 ($generated@@38 $generated@@5 ($generated@@9 $generated@@173))))
 :pattern ( ($generated@@21 $generated@@154 ($generated@@38 $generated@@5 ($generated@@9 $generated@@173))))
 :pattern ( ($generated@@21 $generated@@153 ($generated@@38 $generated@@5 ($generated@@9 $generated@@173))))
))) (=> (forall (($generated@@174 T@U) ) (!  (=> ($generated@@21 $generated@@153 ($generated@@38 $generated@@5 $generated@@174)) ($generated@@21 $generated@@154 ($generated@@38 $generated@@5 $generated@@174)))
 :pattern ( ($generated@@21 $generated@@154 ($generated@@38 $generated@@5 $generated@@174)))
 :pattern ( ($generated@@21 $generated@@153 ($generated@@38 $generated@@5 $generated@@174)))
)) (and (=> (= (ControlFlow 0 17) 16) $generated@@170) (=> (= (ControlFlow 0 17) 11) $generated@@171))))))
(let (($generated@@175  (=> (and (not ($generated@@21 $generated@@153 ($generated@@38 $generated@@5 ($generated@@9 $generated@@156)))) (= (ControlFlow 0 20) 17)) $generated@@172)))
(let (($generated@@176  (=> (and ($generated@@21 $generated@@153 ($generated@@38 $generated@@5 ($generated@@9 $generated@@156))) (= (ControlFlow 0 19) 17)) $generated@@172)))
(let (($generated@@177  (and (=> (= (ControlFlow 0 21) 19) $generated@@176) (=> (= (ControlFlow 0 21) 20) $generated@@175))))
(let (($generated@@178 true))
(let (($generated@@179  (and (=> (= (ControlFlow 0 22) 21) $generated@@177) (=> (= (ControlFlow 0 22) 10) $generated@@178))))
(let (($generated@@180 true))
(let (($generated@@181  (=> (= (ControlFlow 0 7) (- 0 6)) (forall (($generated@@182 Int) ) (! (= ($generated@@21 $generated@@153 ($generated@@38 $generated@@5 ($generated@@9 $generated@@182))) ($generated@@21 $generated@@154 ($generated@@38 $generated@@5 ($generated@@9 $generated@@182))))
 :pattern ( ($generated@@21 $generated@@154 ($generated@@38 $generated@@5 ($generated@@9 $generated@@182))))
 :pattern ( ($generated@@21 $generated@@153 ($generated@@38 $generated@@5 ($generated@@9 $generated@@182))))
)))))
(let (($generated@@183  (and (=> (= (ControlFlow 0 9) 7) $generated@@181) (=> (= (ControlFlow 0 9) 8) $generated@@180))))
(let (($generated@@184  (=> (and (and (and (not ($generated@@8 ($generated@@34 $generated@@4 ($generated@@7 true)))) (not ($generated@@8 ($generated@@34 $generated@@4 ($generated@@7 true))))) (not ($generated@@8 ($generated@@34 $generated@@4 ($generated@@7 true))))) (= (ControlFlow 0 5) (- 0 4))) false)))
(let (($generated@@185  (=> (= (ControlFlow 0 3) (- 0 2)) ($generated@@81 $generated@@153 $generated@@154))))
(let (($generated@@186  (=> (and (= $generated@@153 ($generated@@41 ($generated@@58 $generated ($generated@@32 0) ($generated@@32 1) ($generated@@32 2) ($generated@@32 3) ($generated@@32 4) ($generated@@32 5) 3))) (= $generated@@154 ($generated@@34 $generated@@70 ($generated@@20 ($generated@@20 ($generated@@20 $generated@@30 ($generated@@38 $generated@@5 ($generated@@9 ($generated@@32 0)))) ($generated@@38 $generated@@5 ($generated@@9 ($generated@@32 1)))) ($generated@@38 $generated@@5 ($generated@@9 ($generated@@32 2))))))) (and (and (and (=> (= (ControlFlow 0 23) 3) $generated@@185) (=> (= (ControlFlow 0 23) 22) $generated@@179)) (=> (= (ControlFlow 0 23) 9) $generated@@183)) (=> (= (ControlFlow 0 23) 5) $generated@@184)))))
(let (($generated@@187  (=> (and (not (and (or (or (or (or (or (= $generated@@157 ($generated@@32 0)) (= $generated@@157 ($generated@@32 1))) (= $generated@@157 ($generated@@32 2))) (= $generated@@157 ($generated@@32 3))) (= $generated@@157 ($generated@@32 4))) (= $generated@@157 ($generated@@32 5))) (< $generated@@157 3))) (= (ControlFlow 0 25) 23)) $generated@@186)))
(let (($generated@@188  (=> (and (and (or (or (or (or (or (= $generated@@157 ($generated@@32 0)) (= $generated@@157 ($generated@@32 1))) (= $generated@@157 ($generated@@32 2))) (= $generated@@157 ($generated@@32 3))) (= $generated@@157 ($generated@@32 4))) (= $generated@@157 ($generated@@32 5))) (< $generated@@157 3)) (= (ControlFlow 0 24) 23)) $generated@@186)))
(let (($generated@@189  (=> (not (or (or (or (or (or (= $generated@@157 ($generated@@32 0)) (= $generated@@157 ($generated@@32 1))) (= $generated@@157 ($generated@@32 2))) (= $generated@@157 ($generated@@32 3))) (= $generated@@157 ($generated@@32 4))) (= $generated@@157 ($generated@@32 5)))) (and (=> (= (ControlFlow 0 27) 24) $generated@@188) (=> (= (ControlFlow 0 27) 25) $generated@@187)))))
(let (($generated@@190  (=> (or (or (or (or (or (= $generated@@157 ($generated@@32 0)) (= $generated@@157 ($generated@@32 1))) (= $generated@@157 ($generated@@32 2))) (= $generated@@157 ($generated@@32 3))) (= $generated@@157 ($generated@@32 4))) (= $generated@@157 ($generated@@32 5))) (and (=> (= (ControlFlow 0 26) 24) $generated@@188) (=> (= (ControlFlow 0 26) 25) $generated@@187)))))
(let (($generated@@191  (and (=> (= (ControlFlow 0 28) 26) $generated@@190) (=> (= (ControlFlow 0 28) 27) $generated@@189))))
(let (($generated@@192 true))
(let (($generated@@193  (=> (= $generated@@158 ($generated@@100 $generated@@159 $generated@@160 $generated@@2 false)) (and (=> (= (ControlFlow 0 29) 28) $generated@@191) (=> (= (ControlFlow 0 29) 1) $generated@@192)))))
(let (($generated@@194  (=> (and ($generated@@161 $generated@@160) ($generated@@162 $generated@@160)) (=> (and (and ($generated@@69 $generated@@70 $generated@@163 ($generated@@71 $generated)) ($generated@@76 $generated@@70 $generated@@163 ($generated@@71 $generated) $generated@@160)) true) (=> (and (and (and ($generated@@69 $generated@@70 $generated@@164 ($generated@@71 $generated)) ($generated@@76 $generated@@70 $generated@@164 ($generated@@71 $generated) $generated@@160)) true) (and (= 0 $generated@@165) (= (ControlFlow 0 30) 29))) $generated@@193)))))
$generated@@194))))))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
