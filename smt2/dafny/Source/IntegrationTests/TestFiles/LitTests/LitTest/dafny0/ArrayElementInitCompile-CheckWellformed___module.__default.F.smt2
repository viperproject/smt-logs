(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 (T@T) Int)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Bool) T@U)
(declare-fun $generated@@9 (T@U) Bool)
(declare-fun $generated@@10 (Int) T@U)
(declare-fun $generated@@11 (T@U) Int)
(declare-fun $generated@@12 (Real) T@U)
(declare-fun $generated@@13 (T@U) Real)
(declare-fun $generated@@20 (T@U) T@U)
(declare-fun $generated@@21 () Int)
(declare-fun $generated@@22 (Int) T@U)
(declare-fun $generated@@23 (Int) Bool)
(declare-fun $generated@@24 (T@T T@U T@U) Bool)
(declare-fun $generated@@25 () T@T)
(declare-fun $generated@@27 (Int) Int)
(declare-fun $generated@@29 (T@T T@U) T@U)
(declare-fun $generated@@32 (T@T T@U) T@U)
(declare-fun $generated@@33 (T@T T@U) T@U)
(declare-fun $generated@@36 (T@U) Bool)
(declare-fun $generated@@37 (T@U T@U T@U T@U T@U) T@U)
(declare-fun $generated@@38 () T@U)
(declare-fun $generated@@41 (Int Int) Int)
(declare-fun $generated@@42 (Int) T@U)
(declare-fun $generated@@48 (T@U) Int)
(declare-fun $generated@@50 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@51 () T@T)
(declare-fun $generated@@52 () T@T)
(declare-fun $generated@@53 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@54 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@55 () T@T)
(declare-fun $generated@@56 (T@T T@T) T@T)
(declare-fun $generated@@57 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@58 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@59 (T@T) T@T)
(declare-fun $generated@@60 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@4 $generated@@5) 0) (= ($generated@@4 $generated@@6) 1)) (= ($generated@@4 $generated@@7) 2)) (forall (($generated@@14 Bool) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Int) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Real) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3)
)
(assert (= ($generated@@20 $generated) $generated@@1))
(assert (= ($generated@@20 $generated@@0) $generated@@2))
(assert (= ($generated@@4 $generated@@25) 3))
(assert  (=> (<= 0 $generated@@21) (forall (($generated@@26 Int) ) (!  (=> (or ($generated@@23 $generated@@26) (< 0 $generated@@21)) ($generated@@24 $generated@@25 ($generated@@22 $generated@@26) $generated))
 :pattern ( ($generated@@22 $generated@@26))
))))
(assert (forall (($generated@@28 Int) ) (! (= ($generated@@27 $generated@@28) $generated@@28)
 :pattern ( ($generated@@27 $generated@@28))
)))
(assert (forall (($generated@@30 T@U) ($generated@@31 T@T) ) (! (= ($generated@@29 $generated@@31 $generated@@30) $generated@@30)
 :pattern ( ($generated@@29 $generated@@31 $generated@@30))
)))
(assert (forall (($generated@@34 T@U) ($generated@@35 T@T) ) (! (= ($generated@@33 $generated@@35 ($generated@@32 $generated@@35 $generated@@34)) $generated@@34)
 :pattern ( ($generated@@32 $generated@@35 $generated@@34))
)))
(assert (forall (($generated@@39 T@U) ($generated@@40 Int) ) (! (= ($generated@@22 $generated@@40) ($generated@@32 $generated@@25 ($generated@@37 $generated@@0 $generated $generated@@39 $generated@@38 ($generated@@33 $generated@@6 ($generated@@10 $generated@@40)))))
 :pattern ( ($generated@@22 $generated@@40) ($generated@@36 $generated@@39))
)))
(assert  (=> (<= 0 $generated@@21) (forall (($generated@@43 Int) ) (!  (=> (or ($generated@@23 ($generated@@27 $generated@@43)) (< 0 $generated@@21)) (= ($generated@@22 ($generated@@27 $generated@@43)) (ite (= ($generated@@27 ($generated@@41 $generated@@43 ($generated@@27 2))) ($generated@@27 0)) ($generated@@42 79) ($generated@@42 46))))
 :weight 3
 :pattern ( ($generated@@22 ($generated@@27 $generated@@43)))
))))
(assert (forall (($generated@@44 T@U) ($generated@@45 T@U) ) (! (= ($generated@@37 $generated@@0 $generated $generated@@44 $generated@@38 $generated@@45) ($generated@@33 $generated@@25 ($generated@@22 ($generated@@11 ($generated@@32 $generated@@6 $generated@@45)))))
 :pattern ( ($generated@@37 $generated@@0 $generated $generated@@44 $generated@@38 $generated@@45))
)))
(assert (forall (($generated@@46 T@U) ($generated@@47 T@T) ) (! (= ($generated@@32 $generated@@47 ($generated@@33 $generated@@47 $generated@@46)) $generated@@46)
 :pattern ( ($generated@@33 $generated@@47 $generated@@46))
)))
(assert (forall (($generated@@49 Int) ) (!  (=> (or (and (<= 0 $generated@@49) (< $generated@@49 55296)) (and (<= 57344 $generated@@49) (< $generated@@49 1114112))) (= ($generated@@48 ($generated@@42 $generated@@49)) $generated@@49))
 :pattern ( ($generated@@42 $generated@@49))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@61 T@T) ($generated@@62 T@T) ($generated@@63 T@T) ($generated@@64 T@U) ($generated@@65 T@U) ($generated@@66 T@U) ($generated@@67 T@U) ) (! (= ($generated@@50 $generated@@61 $generated@@62 $generated@@63 ($generated@@57 $generated@@61 $generated@@62 $generated@@63 $generated@@65 $generated@@66 $generated@@67 $generated@@64) $generated@@66 $generated@@67) $generated@@64)
 :weight 0
)) (and (forall (($generated@@68 T@T) ($generated@@69 T@T) ($generated@@70 T@T) ($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@U) ) (!  (or (= $generated@@73 $generated@@75) (= ($generated@@50 $generated@@68 $generated@@69 $generated@@70 ($generated@@57 $generated@@68 $generated@@69 $generated@@70 $generated@@72 $generated@@73 $generated@@74 $generated@@71) $generated@@75 $generated@@76) ($generated@@50 $generated@@68 $generated@@69 $generated@@70 $generated@@72 $generated@@75 $generated@@76)))
 :weight 0
)) (forall (($generated@@77 T@T) ($generated@@78 T@T) ($generated@@79 T@T) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ) (!  (or (= $generated@@83 $generated@@85) (= ($generated@@50 $generated@@77 $generated@@78 $generated@@79 ($generated@@57 $generated@@77 $generated@@78 $generated@@79 $generated@@81 $generated@@82 $generated@@83 $generated@@80) $generated@@84 $generated@@85) ($generated@@50 $generated@@77 $generated@@78 $generated@@79 $generated@@81 $generated@@84 $generated@@85)))
 :weight 0
)))) (= ($generated@@4 $generated@@51) 4)) (= ($generated@@4 $generated@@52) 5)) (forall (($generated@@86 T@T) ($generated@@87 T@T) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ) (! (= ($generated@@54 $generated@@86 $generated@@87 ($generated@@58 $generated@@86 $generated@@87 $generated@@89 $generated@@90 $generated@@88) $generated@@90) $generated@@88)
 :weight 0
))) (forall (($generated@@91 T@T) ($generated@@92 T@T) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ) (!  (or (= $generated@@95 $generated@@96) (= ($generated@@54 $generated@@91 $generated@@92 ($generated@@58 $generated@@91 $generated@@92 $generated@@94 $generated@@95 $generated@@93) $generated@@96) ($generated@@54 $generated@@91 $generated@@92 $generated@@94 $generated@@96)))
 :weight 0
))) (= ($generated@@4 $generated@@55) 6)) (forall (($generated@@97 T@T) ($generated@@98 T@T) ) (= ($generated@@4 ($generated@@56 $generated@@97 $generated@@98)) 7))) (forall (($generated@@99 T@T) ($generated@@100 T@T) ) (! (= ($generated@@59 ($generated@@56 $generated@@99 $generated@@100)) $generated@@99)
 :pattern ( ($generated@@56 $generated@@99 $generated@@100))
))) (forall (($generated@@101 T@T) ($generated@@102 T@T) ) (! (= ($generated@@60 ($generated@@56 $generated@@101 $generated@@102)) $generated@@102)
 :pattern ( ($generated@@56 $generated@@101 $generated@@102))
))))
(assert (forall (($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 Bool) ($generated@@107 T@U) ($generated@@108 T@U) ) (! (= ($generated@@9 ($generated@@50 $generated@@51 $generated@@52 $generated@@5 ($generated@@53 $generated@@103 $generated@@104 $generated@@105 $generated@@106) $generated@@107 $generated@@108))  (=> (and (or (not (= $generated@@107 $generated@@103)) (not true)) ($generated@@9 ($generated@@32 $generated@@5 ($generated@@54 $generated@@52 $generated@@55 ($generated@@54 $generated@@51 ($generated@@56 $generated@@52 $generated@@55) $generated@@104 $generated@@107) $generated@@105)))) $generated@@106))
 :pattern ( ($generated@@50 $generated@@51 $generated@@52 $generated@@5 ($generated@@53 $generated@@103 $generated@@104 $generated@@105 $generated@@106) $generated@@107 $generated@@108))
)))
(assert (forall (($generated@@109 Int) ($generated@@110 Int) ) (! (= ($generated@@41 $generated@@109 $generated@@110) (mod $generated@@109 $generated@@110))
 :pattern ( ($generated@@41 $generated@@109 $generated@@110))
)))
(assert  (=> (<= 0 $generated@@21) (forall (($generated@@111 Int) ) (!  (=> (or ($generated@@23 $generated@@111) (< 0 $generated@@21)) (= ($generated@@22 $generated@@111) (ite (= ($generated@@41 $generated@@111 ($generated@@27 2)) ($generated@@27 0)) ($generated@@42 79) ($generated@@42 46))))
 :pattern ( ($generated@@22 $generated@@111))
))))
(assert (forall (($generated@@112 T@U) ) (!  (and (= ($generated@@42 ($generated@@48 $generated@@112)) $generated@@112) (or (and (<= 0 ($generated@@48 $generated@@112)) (< ($generated@@48 $generated@@112) 55296)) (and (<= 57344 ($generated@@48 $generated@@112)) (< ($generated@@48 $generated@@112) 1114112))))
 :pattern ( ($generated@@48 $generated@@112))
)))
(assert (forall (($generated@@113 Int) ) (! (= ($generated@@33 $generated@@6 ($generated@@10 ($generated@@27 $generated@@113))) ($generated@@29 $generated@@55 ($generated@@33 $generated@@6 ($generated@@10 $generated@@113))))
 :pattern ( ($generated@@33 $generated@@6 ($generated@@10 ($generated@@27 $generated@@113))))
)))
(assert (forall (($generated@@114 T@U) ($generated@@115 T@T) ) (! (= ($generated@@33 $generated@@115 ($generated@@29 $generated@@115 $generated@@114)) ($generated@@29 $generated@@55 ($generated@@33 $generated@@115 $generated@@114)))
 :pattern ( ($generated@@33 $generated@@115 ($generated@@29 $generated@@115 $generated@@114)))
)))
(assert (forall (($generated@@116 T@U) ) (! ($generated@@24 $generated@@6 $generated@@116 $generated@@0)
 :pattern ( ($generated@@24 $generated@@6 $generated@@116 $generated@@0))
)))
(assert (forall (($generated@@117 T@U) ) (! ($generated@@24 $generated@@25 $generated@@117 $generated)
 :pattern ( ($generated@@24 $generated@@25 $generated@@117 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@118 () T@U)
(declare-fun $generated@@119 () T@U)
(declare-fun $generated@@120 () T@U)
(declare-fun $generated@@121 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 7) (let (($generated@@122 true))
(let (($generated@@123 true))
(let (($generated@@124  (and (=> (= (ControlFlow 0 4) (- 0 5)) (or (not (= ($generated@@27 2) 0)) (not true))) (=> (or (not (= ($generated@@27 2) 0)) (not true)) (and (=> (= (ControlFlow 0 4) 2) $generated@@123) (=> (= (ControlFlow 0 4) 3) $generated@@122))))))
(let (($generated@@125 true))
(let (($generated@@126  (=> (= $generated@@118 ($generated@@53 $generated@@119 $generated@@120 $generated@@3 false)) (and (=> (= (ControlFlow 0 6) 1) $generated@@125) (=> (= (ControlFlow 0 6) 4) $generated@@124)))))
(let (($generated@@127  (=> (and (and ($generated@@36 $generated@@120) ($generated@@121 $generated@@120)) (and (= 0 $generated@@21) (= (ControlFlow 0 7) 6))) $generated@@126)))
$generated@@127)))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
