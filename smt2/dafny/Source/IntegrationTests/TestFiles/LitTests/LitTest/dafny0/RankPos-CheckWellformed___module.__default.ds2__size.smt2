(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagSeq () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._module.d2 () T@U)
(declare-fun |##_module.d2.A2| () T@U)
(declare-fun |##_module.d2.B2| () T@U)
(declare-fun tytagFamily$d2 () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun |#_module.d2.B2| (T@U) T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun DatatypeTypeType () T@T)
(declare-fun |Seq#Empty| () T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun |#_module.d2.A2| () T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun Tclass._module.d2 () T@U)
(declare-fun |Seq#Drop| (T@U Int) T@U)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun _module.d2.A2_q (T@U) Bool)
(declare-fun _module.d2.B2_q (T@U) Bool)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.ds2__size (T@U T@U) Int)
(declare-fun $LS (T@U) T@U)
(declare-fun SeqType () T@T)
(declare-fun |_module.__default.ds2__size#canCall| (T@U) Bool)
(declare-fun TSeq (T@U) T@U)
(declare-fun |_module.__default.d2__size#canCall| (T@U) Bool)
(declare-fun _module.__default.d2__size (T@U T@U) Int)
(declare-fun |Seq#Rank| (T@U) Int)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun _module.d2.ds (T@U) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun TagFamily (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt TagSeq alloc Tagclass._module.d2 |##_module.d2.A2| |##_module.d2.B2| tytagFamily$d2)
)
(assert (= (Tag TInt) TagInt))
(assert (= (Ctor DatatypeTypeType) 3))
(assert (forall ((|a#31#0#0| T@U) (i Int) ) (!  (=> (and (<= 0 i) (< i (|Seq#Length| |a#31#0#0|))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#31#0#0| i))) (DtRank (|#_module.d2.B2| |a#31#0#0|))))
 :pattern ( (|Seq#Index| |a#31#0#0| i) (|#_module.d2.B2| |a#31#0#0|))
)))
(assert (= (|Seq#Length| |Seq#Empty|) 0))
(assert (= (DatatypeCtorId |#_module.d2.A2|) |##_module.d2.A2|))
(assert ($Is DatatypeTypeType |#_module.d2.A2| Tclass._module.d2))
(assert (forall ((s T@U) (n Int) ) (!  (=> (= n 0) (= (|Seq#Drop| s n) s))
 :pattern ( (|Seq#Drop| s n))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((s@@0 T@U) (n@@0 Int) ) (!  (=> (and (<= 0 n@@0) (<= n@@0 (|Seq#Length| s@@0))) (= (|Seq#Length| (|Seq#Drop| s@@0 n@@0)) (- (|Seq#Length| s@@0) n@@0)))
 :pattern ( (|Seq#Length| (|Seq#Drop| s@@0 n@@0)))
)))
(assert (forall ((d T@U) ) (! (= (_module.d2.A2_q d) (= (DatatypeCtorId d) |##_module.d2.A2|))
 :pattern ( (_module.d2.A2_q d))
)))
(assert (forall ((d@@0 T@U) ) (! (= (_module.d2.B2_q d@@0) (= (DatatypeCtorId d@@0) |##_module.d2.B2|))
 :pattern ( (_module.d2.B2_q d@@0))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (= (Ctor SeqType) 4))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($ly T@U) (|xs#0| T@U) ) (!  (=> (or (|_module.__default.ds2__size#canCall| (Lit SeqType |xs#0|)) (and (< 1 $FunctionContextHeight) ($Is SeqType |xs#0| (TSeq Tclass._module.d2)))) (and (=> (or (not (= (|Seq#Length| (Lit SeqType |xs#0|)) (LitInt 0))) (not true)) (and (|_module.__default.d2__size#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit SeqType |xs#0|) (LitInt 0)))) (|_module.__default.ds2__size#canCall| (Lit SeqType (|Seq#Drop| (Lit SeqType |xs#0|) (LitInt 1)))))) (= (_module.__default.ds2__size ($LS $ly) (Lit SeqType |xs#0|)) (ite (= (|Seq#Length| (Lit SeqType |xs#0|)) (LitInt 0)) 1 (+ (+ 1 (_module.__default.d2__size ($LS $ly) ($Unbox DatatypeTypeType (|Seq#Index| (Lit SeqType |xs#0|) (LitInt 0))))) (_module.__default.ds2__size ($LS $ly) (Lit SeqType (|Seq#Drop| (Lit SeqType |xs#0|) (LitInt 1)))))))))
 :weight 3
 :pattern ( (_module.__default.ds2__size ($LS $ly) (Lit SeqType |xs#0|)))
))))
(assert (forall ((d@@1 T@U) ) (!  (=> (_module.d2.A2_q d@@1) (= d@@1 |#_module.d2.A2|))
 :pattern ( (_module.d2.A2_q d@@1))
)))
(assert (forall ((s@@1 T@U) (i@@0 Int) ) (!  (=> (and (< 0 i@@0) (<= i@@0 (|Seq#Length| s@@1))) (< (|Seq#Rank| (|Seq#Drop| s@@1 i@@0)) (|Seq#Rank| s@@1)))
 :pattern ( (|Seq#Rank| (|Seq#Drop| s@@1 i@@0)))
)))
(assert (forall ((d@@2 T@U) ) (!  (=> (_module.d2.B2_q d@@2) (exists ((|a#27#0#0| T@U) ) (= d@@2 (|#_module.d2.B2| |a#27#0#0|))))
 :pattern ( (_module.d2.B2_q d@@2))
)))
(assert (forall ((v T@U) (t T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v) t h) ($IsAlloc T@@1 v t h))
 :pattern ( ($IsAllocBox ($Box T@@1 v) t h))
)))
(assert (forall ((s@@2 T@U) (n@@1 Int) (j Int) ) (!  (=> (and (and (<= 0 n@@1) (<= 0 j)) (< j (- (|Seq#Length| s@@2) n@@1))) (= (|Seq#Index| (|Seq#Drop| s@@2 n@@1) j) (|Seq#Index| s@@2 (+ j n@@1))))
 :weight 25
 :pattern ( (|Seq#Index| (|Seq#Drop| s@@2 n@@1) j))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($ly@@0 T@U) (|xs#0@@0| T@U) ) (!  (=> (or (|_module.__default.ds2__size#canCall| |xs#0@@0|) (and (< 1 $FunctionContextHeight) ($Is SeqType |xs#0@@0| (TSeq Tclass._module.d2)))) (and (=> (or (not (= (|Seq#Length| |xs#0@@0|) (LitInt 0))) (not true)) (and (|_module.__default.d2__size#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |xs#0@@0| (LitInt 0)))) (|_module.__default.ds2__size#canCall| (|Seq#Drop| |xs#0@@0| (LitInt 1))))) (= (_module.__default.ds2__size ($LS $ly@@0) |xs#0@@0|) (ite (= (|Seq#Length| |xs#0@@0|) (LitInt 0)) 1 (+ (+ 1 (_module.__default.d2__size $ly@@0 ($Unbox DatatypeTypeType (|Seq#Index| |xs#0@@0| (LitInt 0))))) (_module.__default.ds2__size $ly@@0 (|Seq#Drop| |xs#0@@0| (LitInt 1))))))))
 :pattern ( (_module.__default.ds2__size ($LS $ly@@0) |xs#0@@0|))
))))
(assert (forall ((bx T@U) ) (!  (=> ($IsBox bx Tclass._module.d2) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx)) bx) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx) Tclass._module.d2)))
 :pattern ( ($IsBox bx Tclass._module.d2))
)))
(assert (forall ((|a#28#0#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.d2.B2| |a#28#0#0|) Tclass._module.d2) ($Is SeqType |a#28#0#0| (TSeq Tclass._module.d2)))
 :pattern ( ($Is DatatypeTypeType (|#_module.d2.B2| |a#28#0#0|) Tclass._module.d2))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($ly@@1 T@U) (|x#0| T@U) ) (!  (=> (or (|_module.__default.d2__size#canCall| (Lit DatatypeTypeType |x#0|)) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |x#0| Tclass._module.d2))) (and (=> (not (U_2_bool (Lit boolType (bool_2_U (_module.d2.A2_q (Lit DatatypeTypeType |x#0|)))))) (let ((|ds#3| (Lit SeqType (_module.d2.ds (Lit DatatypeTypeType |x#0|)))))
(|_module.__default.ds2__size#canCall| |ds#3|))) (= (_module.__default.d2__size ($LS $ly@@1) (Lit DatatypeTypeType |x#0|)) (ite (_module.d2.A2_q (Lit DatatypeTypeType |x#0|)) 1 (let ((|ds#2| (Lit SeqType (_module.d2.ds (Lit DatatypeTypeType |x#0|)))))
(LitInt (+ 1 (_module.__default.ds2__size ($LS $ly@@1) |ds#2|))))))))
 :weight 3
 :pattern ( (_module.__default.d2__size ($LS $ly@@1) (Lit DatatypeTypeType |x#0|)))
))))
(assert (forall ((d@@3 T@U) ) (!  (=> ($Is DatatypeTypeType d@@3 Tclass._module.d2) (or (_module.d2.A2_q d@@3) (_module.d2.B2_q d@@3)))
 :pattern ( (_module.d2.B2_q d@@3) ($Is DatatypeTypeType d@@3 Tclass._module.d2))
 :pattern ( (_module.d2.A2_q d@@3) ($Is DatatypeTypeType d@@3 Tclass._module.d2))
)))
(assert (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 TInt) (and (= ($Box intType ($Unbox intType bx@@0)) bx@@0) ($Is intType ($Unbox intType bx@@0) TInt)))
 :pattern ( ($IsBox bx@@0 TInt))
)))
(assert (forall ((v@@0 T@U) (t@@0 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@0) t@@0) ($Is T@@2 v@@0 t@@0))
 :pattern ( ($IsBox ($Box T@@2 v@@0) t@@0))
)))
(assert (forall ((s@@3 T@U) ) (! (<= 0 (|Seq#Length| s@@3))
 :pattern ( (|Seq#Length| s@@3))
)))
(assert (forall ((v@@1 T@U) (t0 T@U) (h@@0 T@U) ) (! (= ($IsAlloc SeqType v@@1 (TSeq t0) h@@0) (forall ((i@@1 Int) ) (!  (=> (and (<= 0 i@@1) (< i@@1 (|Seq#Length| v@@1))) ($IsAllocBox (|Seq#Index| v@@1 i@@1) t0 h@@0))
 :pattern ( (|Seq#Index| v@@1 i@@1))
)))
 :pattern ( ($IsAlloc SeqType v@@1 (TSeq t0) h@@0))
)))
(assert (forall ((t@@1 T@U) ) (! (= (Inv0_TSeq (TSeq t@@1)) t@@1)
 :pattern ( (TSeq t@@1))
)))
(assert (forall ((t@@2 T@U) ) (! (= (Tag (TSeq t@@2)) TagSeq)
 :pattern ( (TSeq t@@2))
)))
(assert (forall ((|a#26#0#0| T@U) ) (! (= (DatatypeCtorId (|#_module.d2.B2| |a#26#0#0|)) |##_module.d2.B2|)
 :pattern ( (|#_module.d2.B2| |a#26#0#0|))
)))
(assert (forall ((|a#30#0#0| T@U) ) (! (= (_module.d2.ds (|#_module.d2.B2| |a#30#0#0|)) |a#30#0#0|)
 :pattern ( (|#_module.d2.B2| |a#30#0#0|))
)))
(assert (forall ((x@@5 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@5)) x@@5)
 :pattern ( ($Box T@@3 x@@5))
)))
(assert (forall (($ly@@2 T@U) (|x#0@@0| T@U) ) (! (= (_module.__default.d2__size ($LS $ly@@2) |x#0@@0|) (_module.__default.d2__size $ly@@2 |x#0@@0|))
 :pattern ( (_module.__default.d2__size ($LS $ly@@2) |x#0@@0|))
)))
(assert (forall (($ly@@3 T@U) (|xs#0@@1| T@U) ) (! (= (_module.__default.ds2__size ($LS $ly@@3) |xs#0@@1|) (_module.__default.ds2__size $ly@@3 |xs#0@@1|))
 :pattern ( (_module.__default.ds2__size ($LS $ly@@3) |xs#0@@1|))
)))
(assert (forall ((|a#32#0#0| T@U) ) (! (< (|Seq#Rank| |a#32#0#0|) (DtRank (|#_module.d2.B2| |a#32#0#0|)))
 :pattern ( (|#_module.d2.B2| |a#32#0#0|))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall ((t0@@0 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0@@0 t1 t2 (MapType0Store t0@@0 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 5)) (= (Ctor FieldType) 6)) (forall ((t0@@1 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@1 t1@@0 (MapType1Store t0@@1 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :weight 0
))) (= (Ctor BoxType) 7)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 8))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((bx@@1 T@U) (t@@3 T@U) ) (!  (=> ($IsBox bx@@1 (TSeq t@@3)) (and (= ($Box SeqType ($Unbox SeqType bx@@1)) bx@@1) ($Is SeqType ($Unbox SeqType bx@@1) (TSeq t@@3))))
 :pattern ( ($IsBox bx@@1 (TSeq t@@3)))
)))
(assert (forall ((d@@4 T@U) ($h T@U) ) (!  (=> (and ($IsGoodHeap $h) ($Is DatatypeTypeType d@@4 Tclass._module.d2)) ($IsAlloc DatatypeTypeType d@@4 Tclass._module.d2 $h))
 :pattern ( ($IsAlloc DatatypeTypeType d@@4 Tclass._module.d2 $h))
)))
(assert (= (Tag Tclass._module.d2) Tagclass._module.d2))
(assert (= (TagFamily Tclass._module.d2) tytagFamily$d2))
(assert (forall ((s@@4 T@U) (n@@2 Int) (k Int) ) (!  (=> (and (and (<= 0 n@@2) (<= n@@2 k)) (< k (|Seq#Length| s@@4))) (= (|Seq#Index| (|Seq#Drop| s@@4 n@@2) (- k n@@2)) (|Seq#Index| s@@4 k)))
 :weight 25
 :pattern ( (|Seq#Index| s@@4 k) (|Seq#Drop| s@@4 n@@2))
)))
(assert (= |#_module.d2.A2| (Lit DatatypeTypeType |#_module.d2.A2|)))
(assert (forall ((s@@5 T@U) (m@@4 Int) (n@@3 Int) ) (!  (=> (and (and (<= 0 m@@4) (<= 0 n@@3)) (<= (+ m@@4 n@@3) (|Seq#Length| s@@5))) (= (|Seq#Drop| (|Seq#Drop| s@@5 m@@4) n@@3) (|Seq#Drop| s@@5 (+ m@@4 n@@3))))
 :pattern ( (|Seq#Drop| (|Seq#Drop| s@@5 m@@4) n@@3))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($ly@@4 T@U) (|x#0@@1| T@U) ) (!  (=> (or (|_module.__default.d2__size#canCall| |x#0@@1|) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |x#0@@1| Tclass._module.d2))) (and (=> (not (_module.d2.A2_q |x#0@@1|)) (let ((|ds#1| (_module.d2.ds |x#0@@1|)))
(|_module.__default.ds2__size#canCall| |ds#1|))) (= (_module.__default.d2__size ($LS $ly@@4) |x#0@@1|) (ite (_module.d2.A2_q |x#0@@1|) 1 (let ((|ds#0| (_module.d2.ds |x#0@@1|)))
(+ 1 (_module.__default.ds2__size $ly@@4 |ds#0|)))))))
 :pattern ( (_module.__default.d2__size ($LS $ly@@4) |x#0@@1|))
))))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((|a#29#0#0| T@U) ) (! (= (|#_module.d2.B2| (Lit SeqType |a#29#0#0|)) (Lit DatatypeTypeType (|#_module.d2.B2| |a#29#0#0|)))
 :pattern ( (|#_module.d2.B2| (Lit SeqType |a#29#0#0|)))
)))
(assert (forall ((x@@7 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@7)) (Lit BoxType ($Box T@@4 x@@7)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@7)))
)))
(assert (forall ((s@@6 T@U) ) (!  (=> (= (|Seq#Length| s@@6) 0) (= s@@6 |Seq#Empty|))
 :pattern ( (|Seq#Length| s@@6))
)))
(assert (forall ((d@@5 T@U) ($h@@0 T@U) ) (!  (=> (and ($IsGoodHeap $h@@0) (and (_module.d2.B2_q d@@5) ($IsAlloc DatatypeTypeType d@@5 Tclass._module.d2 $h@@0))) ($IsAlloc SeqType (_module.d2.ds d@@5) (TSeq Tclass._module.d2) $h@@0))
 :pattern ( ($IsAlloc SeqType (_module.d2.ds d@@5) (TSeq Tclass._module.d2) $h@@0))
)))
(assert (forall ((h@@1 T@U) (v@@2 T@U) ) (! ($IsAlloc intType v@@2 TInt h@@1)
 :pattern ( ($IsAlloc intType v@@2 TInt h@@1))
)))
(assert (forall ((v@@3 T@U) (t0@@2 T@U) ) (! (= ($Is SeqType v@@3 (TSeq t0@@2)) (forall ((i@@2 Int) ) (!  (=> (and (<= 0 i@@2) (< i@@2 (|Seq#Length| v@@3))) ($IsBox (|Seq#Index| v@@3 i@@2) t0@@2))
 :pattern ( (|Seq#Index| v@@3 i@@2))
)))
 :pattern ( ($Is SeqType v@@3 (TSeq t0@@2)))
)))
(assert (forall ((s@@7 T@U) (i@@3 Int) ) (!  (=> (and (<= 0 i@@3) (< i@@3 (|Seq#Length| s@@7))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@7 i@@3))) (|Seq#Rank| s@@7)))
 :pattern ( (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@7 i@@3))))
)))
(assert (forall ((v@@4 T@U) ) (! ($Is intType v@@4 TInt)
 :pattern ( ($Is intType v@@4 TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |xs#0@@2| () T@U)
(declare-fun |##x#0@0| () T@U)
(declare-fun $Heap () T@U)
(declare-fun |##xs#0@0| () T@U)
(declare-fun $_ReadsFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 9) (let ((anon8_Else_correct  (=> (or (not (= (|Seq#Length| |xs#0@@2|) (LitInt 0))) (not true)) (and (=> (= (ControlFlow 0 4) (- 0 7)) (and (<= 0 (LitInt 0)) (< (LitInt 0) (|Seq#Length| |xs#0@@2|)))) (=> (and (<= 0 (LitInt 0)) (< (LitInt 0) (|Seq#Length| |xs#0@@2|))) (=> (and (= |##x#0@0| ($Unbox DatatypeTypeType (|Seq#Index| |xs#0@@2| (LitInt 0)))) ($IsAlloc DatatypeTypeType |##x#0@0| Tclass._module.d2 $Heap)) (and (=> (= (ControlFlow 0 4) (- 0 6)) (< (DtRank |##x#0@0|) (|Seq#Rank| |xs#0@@2|))) (=> (< (DtRank |##x#0@0|) (|Seq#Rank| |xs#0@@2|)) (=> (|_module.__default.d2__size#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |xs#0@@2| (LitInt 0)))) (and (=> (= (ControlFlow 0 4) (- 0 5)) (and (<= 0 (LitInt 1)) (<= (LitInt 1) (|Seq#Length| |xs#0@@2|)))) (=> (and (<= 0 (LitInt 1)) (<= (LitInt 1) (|Seq#Length| |xs#0@@2|))) (=> (= |##xs#0@0| (|Seq#Drop| |xs#0@@2| (LitInt 1))) (=> (and ($IsAlloc SeqType |##xs#0@0| (TSeq Tclass._module.d2) $Heap) (= (ControlFlow 0 4) (- 0 3))) (< (|Seq#Rank| |##xs#0@0|) (|Seq#Rank| |xs#0@@2|)))))))))))))))
(let ((anon8_Then_correct true))
(let ((anon7_Then_correct true))
(let ((anon0_correct  (=> (= $_ReadsFrame@0 (|lambda#0| null $Heap alloc false)) (and (and (=> (= (ControlFlow 0 8) 1) anon7_Then_correct) (=> (= (ControlFlow 0 8) 2) anon8_Then_correct)) (=> (= (ControlFlow 0 8) 4) anon8_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) ($Is SeqType |xs#0@@2| (TSeq Tclass._module.d2))) (and (= 1 $FunctionContextHeight) (= (ControlFlow 0 9) 8))) anon0_correct)))
PreconditionGeneratedEntry_correct))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
