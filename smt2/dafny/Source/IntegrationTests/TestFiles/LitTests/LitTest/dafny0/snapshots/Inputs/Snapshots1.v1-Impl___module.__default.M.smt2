(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () Int)
(declare-fun $generated@@0 () Bool)
(declare-fun $generated@@1 () Bool)
(declare-fun $generated@@2 (T@U) Bool)
(declare-fun $generated@@3 (T@T T@U) T@U)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 (Bool) T@U)
(declare-fun $generated@@6 (T@T) Int)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 (T@U T@U) Bool)
(declare-fun $generated@@20 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@21 () T@T)
(declare-fun $generated@@22 () T@T)
(declare-fun $generated@@23 () T@T)
(declare-fun $generated@@24 (T@T T@T) T@T)
(declare-fun $generated@@25 () T@U)
(declare-fun $generated@@26 (T@T T@U) T@U)
(declare-fun $generated@@27 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@28 (T@T) T@T)
(declare-fun $generated@@29 (T@T) T@T)
(declare-fun $generated@@52 (T@T T@U) T@U)
(declare-fun $generated@@60 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@61 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@62 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@6 $generated@@4) 0) (= ($generated@@6 $generated@@7) 1)) (= ($generated@@6 $generated@@8) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@2 ($generated@@5 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@5 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@5 ($generated@@2 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@2 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert  (=> (<= 0 $generated) (=> (or $generated@@0 (< 0 $generated)) (= $generated@@1 ($generated@@2 ($generated@@3 $generated@@4 ($generated@@5 true)))))))
(assert  (=> (<= 0 $generated) (=> (or $generated@@0 (< 0 $generated)) (= $generated@@1 ($generated@@2 ($generated@@3 $generated@@4 ($generated@@5 true)))))))
(assert  (and (and (and (and (and (and (and (forall (($generated@@30 T@T) ($generated@@31 T@T) ($generated@@32 T@U) ($generated@@33 T@U) ($generated@@34 T@U) ) (! (= ($generated@@20 $generated@@30 $generated@@31 ($generated@@27 $generated@@30 $generated@@31 $generated@@33 $generated@@34 $generated@@32) $generated@@34) $generated@@32)
 :weight 0
)) (forall (($generated@@35 T@T) ($generated@@36 T@T) ($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ($generated@@40 T@U) ) (!  (or (= $generated@@39 $generated@@40) (= ($generated@@20 $generated@@35 $generated@@36 ($generated@@27 $generated@@35 $generated@@36 $generated@@38 $generated@@39 $generated@@37) $generated@@40) ($generated@@20 $generated@@35 $generated@@36 $generated@@38 $generated@@40)))
 :weight 0
))) (= ($generated@@6 $generated@@21) 3)) (= ($generated@@6 $generated@@22) 4)) (= ($generated@@6 $generated@@23) 5)) (forall (($generated@@41 T@T) ($generated@@42 T@T) ) (= ($generated@@6 ($generated@@24 $generated@@41 $generated@@42)) 6))) (forall (($generated@@43 T@T) ($generated@@44 T@T) ) (! (= ($generated@@28 ($generated@@24 $generated@@43 $generated@@44)) $generated@@43)
 :pattern ( ($generated@@24 $generated@@43 $generated@@44))
))) (forall (($generated@@45 T@T) ($generated@@46 T@T) ) (! (= ($generated@@29 ($generated@@24 $generated@@45 $generated@@46)) $generated@@46)
 :pattern ( ($generated@@24 $generated@@45 $generated@@46))
))))
(assert (forall (($generated@@47 T@U) ($generated@@48 T@U) ) (!  (=> ($generated@@19 $generated@@47 $generated@@48) (forall (($generated@@49 T@U) ) (!  (=> ($generated@@2 ($generated@@26 $generated@@4 ($generated@@20 $generated@@21 $generated@@22 ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@47 $generated@@49) $generated@@25))) ($generated@@2 ($generated@@26 $generated@@4 ($generated@@20 $generated@@21 $generated@@22 ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@48 $generated@@49) $generated@@25))))
 :pattern ( ($generated@@20 $generated@@21 $generated@@22 ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@48 $generated@@49) $generated@@25))
)))
 :pattern ( ($generated@@19 $generated@@47 $generated@@48))
)))
(assert (forall (($generated@@50 T@U) ($generated@@51 T@T) ) (! (= ($generated@@3 $generated@@51 $generated@@50) $generated@@50)
 :pattern ( ($generated@@3 $generated@@51 $generated@@50))
)))
(assert (forall (($generated@@53 T@U) ($generated@@54 T@T) ) (! (= ($generated@@52 $generated@@54 ($generated@@26 $generated@@54 $generated@@53)) $generated@@53)
 :pattern ( ($generated@@26 $generated@@54 $generated@@53))
)))
(assert (forall (($generated@@55 T@U) ($generated@@56 T@U) ($generated@@57 T@U) ) (!  (=> (or (not (= $generated@@55 $generated@@57)) (not true)) (=> (and ($generated@@19 $generated@@55 $generated@@56) ($generated@@19 $generated@@56 $generated@@57)) ($generated@@19 $generated@@55 $generated@@57)))
 :pattern ( ($generated@@19 $generated@@55 $generated@@56) ($generated@@19 $generated@@56 $generated@@57))
)))
(assert (forall (($generated@@58 T@U) ($generated@@59 T@T) ) (! (= ($generated@@26 $generated@@59 ($generated@@52 $generated@@59 $generated@@58)) $generated@@58)
 :pattern ( ($generated@@52 $generated@@59 $generated@@58))
)))
(assert  (and (forall (($generated@@63 T@T) ($generated@@64 T@T) ($generated@@65 T@T) ($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@U) ) (! (= ($generated@@60 $generated@@63 $generated@@64 $generated@@65 ($generated@@62 $generated@@63 $generated@@64 $generated@@65 $generated@@67 $generated@@68 $generated@@69 $generated@@66) $generated@@68 $generated@@69) $generated@@66)
 :weight 0
)) (and (forall (($generated@@70 T@T) ($generated@@71 T@T) ($generated@@72 T@T) ($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ) (!  (or (= $generated@@75 $generated@@77) (= ($generated@@60 $generated@@70 $generated@@71 $generated@@72 ($generated@@62 $generated@@70 $generated@@71 $generated@@72 $generated@@74 $generated@@75 $generated@@76 $generated@@73) $generated@@77 $generated@@78) ($generated@@60 $generated@@70 $generated@@71 $generated@@72 $generated@@74 $generated@@77 $generated@@78)))
 :weight 0
)) (forall (($generated@@79 T@T) ($generated@@80 T@T) ($generated@@81 T@T) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ) (!  (or (= $generated@@85 $generated@@87) (= ($generated@@60 $generated@@79 $generated@@80 $generated@@81 ($generated@@62 $generated@@79 $generated@@80 $generated@@81 $generated@@83 $generated@@84 $generated@@85 $generated@@82) $generated@@86 $generated@@87) ($generated@@60 $generated@@79 $generated@@80 $generated@@81 $generated@@83 $generated@@86 $generated@@87)))
 :weight 0
)))))
(assert (forall (($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 Bool) ($generated@@92 T@U) ($generated@@93 T@U) ) (! (= ($generated@@2 ($generated@@60 $generated@@23 $generated@@21 $generated@@4 ($generated@@61 $generated@@88 $generated@@89 $generated@@90 $generated@@91) $generated@@92 $generated@@93))  (=> (and (or (not (= $generated@@92 $generated@@88)) (not true)) ($generated@@2 ($generated@@26 $generated@@4 ($generated@@20 $generated@@21 $generated@@22 ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@89 $generated@@92) $generated@@90)))) $generated@@91))
 :pattern ( ($generated@@60 $generated@@23 $generated@@21 $generated@@4 ($generated@@61 $generated@@88 $generated@@89 $generated@@90 $generated@@91) $generated@@92 $generated@@93))
)))
(assert (forall (($generated@@94 T@U) ($generated@@95 T@T) ) (! (= ($generated@@52 $generated@@95 ($generated@@3 $generated@@95 $generated@@94)) ($generated@@3 $generated@@22 ($generated@@52 $generated@@95 $generated@@94)))
 :pattern ( ($generated@@52 $generated@@95 ($generated@@3 $generated@@95 $generated@@94)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@96 () T@U)
(declare-fun $generated@@97 () T@U)
(declare-fun $generated@@98 () T@U)
(declare-fun $generated@@99 (T@U) Bool)
(declare-fun $generated@@100 () T@U)
(declare-fun $generated@@101 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@102  (=> (= $generated@@96 ($generated@@61 $generated@@97 $generated@@98 $generated@@25 false)) (=> (and (and ($generated@@99 $generated@@100) ($generated@@101 $generated@@100)) $generated@@0) (=> (and (and (and $generated@@0 (and ($generated@@2 ($generated@@3 $generated@@4 ($generated@@5 $generated@@1))) ($generated@@2 ($generated@@3 $generated@@4 ($generated@@5 true))))) (forall (($generated@@103 T@U) ) (!  (=> (and (or (not (= $generated@@103 $generated@@97)) (not true)) ($generated@@2 ($generated@@26 $generated@@4 ($generated@@20 $generated@@21 $generated@@22 ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@98 $generated@@103) $generated@@25)))) (= ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@100 $generated@@103) ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@98 $generated@@103)))
 :pattern ( ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@100 $generated@@103))
))) (and ($generated@@19 $generated@@98 $generated@@100) (= (ControlFlow 0 2) (- 0 1)))) ($generated@@2 ($generated@@3 $generated@@4 ($generated@@5 false))))))))
(let (($generated@@104  (=> (and (and ($generated@@99 $generated@@98) ($generated@@101 $generated@@98)) (and (= 2 $generated) (= (ControlFlow 0 3) 2))) $generated@@102)))
$generated@@104)))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
