(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TReal () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagReal () T@U)
(declare-fun alloc () T@U)
(declare-fun |##_System._tuple#2._#Make2| () T@U)
(declare-fun Tagclass._System.Tuple2 () T@U)
(declare-fun Tagclass._module.List () T@U)
(declare-fun Tagclass._module.TwoLists () T@U)
(declare-fun Tagclass._module.Co () T@U)
(declare-fun |##_module.List.Nil| () T@U)
(declare-fun |##_module.List.Cons| () T@U)
(declare-fun |##_module.List.ICons| () T@U)
(declare-fun |##_module.TwoLists.Two| () T@U)
(declare-fun |tytagFamily$_tuple#2| () T@U)
(declare-fun tytagFamily$List () T@U)
(declare-fun tytagFamily$TwoLists () T@U)
(declare-fun tytagFamily$Co () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun |#_module.TwoLists.Two| (T@U T@U) T@U)
(declare-fun Tclass._module.TwoLists (T@U) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun Tclass._module.List (T@U) T@U)
(declare-fun _System.Tuple2.___hMake2_q (T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun Tclass._System.Tuple2 (T@U T@U) T@U)
(declare-fun _module.__default.CoValue (T@U T@U T@U) T@U)
(declare-fun $LS (T@U) T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun |#_module.List.Nil| () T@U)
(declare-fun _module.TwoLists.Two_q (T@U) Bool)
(declare-fun |#_System._tuple#2._#Make2| (T@U T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun refType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun LitReal (Real) Real)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun |#_module.List.Cons| (T@U T@U) T@U)
(declare-fun |#_module.List.ICons| (Int T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun _module.List.Nil_q (T@U) Bool)
(declare-fun _module.List.Cons_q (T@U) Bool)
(declare-fun _module.List.ICons_q (T@U) Bool)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun Tclass._module.Co (T@U) T@U)
(declare-fun _module.List._h2 (T@U) Int)
(declare-fun $FunctionContextHeight () Int)
(declare-fun |_module.__default.CoValue#canCall| (T@U T@U) Bool)
(declare-fun Tclass._System.Tuple2_0 (T@U) T@U)
(declare-fun Tclass._System.Tuple2_1 (T@U) T@U)
(declare-fun _System.Tuple2._0 (T@U) T@U)
(declare-fun _System.Tuple2._1 (T@U) T@U)
(declare-fun _module.List._h0 (T@U) T@U)
(declare-fun _module.List._h1 (T@U) T@U)
(declare-fun _module.List._h3 (T@U) T@U)
(declare-fun _module.TwoLists._h4 (T@U) T@U)
(declare-fun _module.TwoLists._h5 (T@U) T@U)
(declare-fun Tclass._module.List_0 (T@U) T@U)
(declare-fun Tclass._module.TwoLists_0 (T@U) T@U)
(declare-fun Tclass._module.Co_0 (T@U) T@U)
(declare-fun BoxRank (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TReal TagInt TagReal alloc |##_System._tuple#2._#Make2| Tagclass._System.Tuple2 Tagclass._module.List Tagclass._module.TwoLists Tagclass._module.Co |##_module.List.Nil| |##_module.List.Cons| |##_module.List.ICons| |##_module.TwoLists.Two| |tytagFamily$_tuple#2| tytagFamily$List tytagFamily$TwoLists tytagFamily$Co)
)
(assert (= (Tag TInt) TagInt))
(assert (= (Tag TReal) TagReal))
(assert (= (Ctor DatatypeTypeType) 3))
(assert (forall ((_module.TwoLists$A T@U) (|a#21#0#0| T@U) (|a#21#1#0| T@U) ($h T@U) ) (!  (=> ($IsGoodHeap $h) (= ($IsAlloc DatatypeTypeType (|#_module.TwoLists.Two| |a#21#0#0| |a#21#1#0|) (Tclass._module.TwoLists _module.TwoLists$A) $h)  (and ($IsAlloc DatatypeTypeType |a#21#0#0| (Tclass._module.List _module.TwoLists$A) $h) ($IsAlloc DatatypeTypeType |a#21#1#0| (Tclass._module.List _module.TwoLists$A) $h))))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_module.TwoLists.Two| |a#21#0#0| |a#21#1#0|) (Tclass._module.TwoLists _module.TwoLists$A) $h))
)))
(assert (forall ((|_System._tuple#2$T0| T@U) (|_System._tuple#2$T1| T@U) (d T@U) ) (!  (=> ($Is DatatypeTypeType d (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)) (_System.Tuple2.___hMake2_q d))
 :pattern ( (_System.Tuple2.___hMake2_q d) ($Is DatatypeTypeType d (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)))
)))
(assert (forall ((_module._default.CoValue$A T@U) ($ly T@U) (|x#0| T@U) ) (! (= (_module.__default.CoValue _module._default.CoValue$A ($LS $ly) |x#0|) (_module.__default.CoValue _module._default.CoValue$A $ly |x#0|))
 :pattern ( (_module.__default.CoValue _module._default.CoValue$A ($LS $ly) |x#0|))
)))
(assert (= (DatatypeCtorId |#_module.List.Nil|) |##_module.List.Nil|))
(assert (forall ((_module.TwoLists$A@@0 T@U) (d@@0 T@U) ) (!  (=> ($Is DatatypeTypeType d@@0 (Tclass._module.TwoLists _module.TwoLists$A@@0)) (_module.TwoLists.Two_q d@@0))
 :pattern ( (_module.TwoLists.Two_q d@@0) ($Is DatatypeTypeType d@@0 (Tclass._module.TwoLists _module.TwoLists$A@@0)))
)))
(assert (forall ((_module.List$A T@U) ($h@@0 T@U) ) (!  (=> ($IsGoodHeap $h@@0) ($IsAlloc DatatypeTypeType |#_module.List.Nil| (Tclass._module.List _module.List$A) $h@@0))
 :pattern ( ($IsAlloc DatatypeTypeType |#_module.List.Nil| (Tclass._module.List _module.List$A) $h@@0))
)))
(assert (forall ((|_System._tuple#2$T0@@0| T@U) (|_System._tuple#2$T1@@0| T@U) (|a#2#0#0| T@U) (|a#2#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|))  (and ($IsBox |a#2#0#0| |_System._tuple#2$T0@@0|) ($IsBox |a#2#1#0| |_System._tuple#2$T1@@0|)))
 :pattern ( ($Is DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|)))
)))
(assert (forall ((_module.List$A@@0 T@U) ) (! ($Is DatatypeTypeType |#_module.List.Nil| (Tclass._module.List _module.List$A@@0))
 :pattern ( ($Is DatatypeTypeType |#_module.List.Nil| (Tclass._module.List _module.List$A@@0)))
)))
(assert  (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 4)) (= (Ctor BoxType) 5)) (= (Ctor refType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((x@@2 Real) ) (! (= (LitReal x@@2) x@@2)
 :pattern ( (LitReal x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((_module.List$A@@1 T@U) (|a#6#0#0| T@U) (|a#6#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.List.Cons| |a#6#0#0| |a#6#1#0|) (Tclass._module.List _module.List$A@@1))  (and ($IsBox |a#6#0#0| _module.List$A@@1) ($Is DatatypeTypeType |a#6#1#0| (Tclass._module.List _module.List$A@@1))))
 :pattern ( ($Is DatatypeTypeType (|#_module.List.Cons| |a#6#0#0| |a#6#1#0|) (Tclass._module.List _module.List$A@@1)))
)))
(assert (forall ((_module.List$A@@2 T@U) (|a#14#0#0| Int) (|a#14#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.List.ICons| |a#14#0#0| |a#14#1#0|) (Tclass._module.List _module.List$A@@2))  (and ($Is intType (int_2_U |a#14#0#0|) TInt) ($Is DatatypeTypeType |a#14#1#0| (Tclass._module.List _module.List$A@@2))))
 :pattern ( ($Is DatatypeTypeType (|#_module.List.ICons| |a#14#0#0| |a#14#1#0|) (Tclass._module.List _module.List$A@@2)))
)))
(assert (forall ((|_System._tuple#2$T0@@1| T@U) (|_System._tuple#2$T1@@1| T@U) (|a#2#0#0@@0| T@U) (|a#2#1#0@@0| T@U) ($h@@1 T@U) ) (!  (=> ($IsGoodHeap $h@@1) (= ($IsAlloc DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0@@0| |a#2#1#0@@0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|) $h@@1)  (and ($IsAllocBox |a#2#0#0@@0| |_System._tuple#2$T0@@1| $h@@1) ($IsAllocBox |a#2#1#0@@0| |_System._tuple#2$T1@@1| $h@@1))))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0@@0| |a#2#1#0@@0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|) $h@@1))
)))
(assert (forall ((d@@1 T@U) ) (! (= (_System.Tuple2.___hMake2_q d@@1) (= (DatatypeCtorId d@@1) |##_System._tuple#2._#Make2|))
 :pattern ( (_System.Tuple2.___hMake2_q d@@1))
)))
(assert (forall ((d@@2 T@U) ) (! (= (_module.List.Nil_q d@@2) (= (DatatypeCtorId d@@2) |##_module.List.Nil|))
 :pattern ( (_module.List.Nil_q d@@2))
)))
(assert (forall ((d@@3 T@U) ) (! (= (_module.List.Cons_q d@@3) (= (DatatypeCtorId d@@3) |##_module.List.Cons|))
 :pattern ( (_module.List.Cons_q d@@3))
)))
(assert (forall ((d@@4 T@U) ) (! (= (_module.List.ICons_q d@@4) (= (DatatypeCtorId d@@4) |##_module.List.ICons|))
 :pattern ( (_module.List.ICons_q d@@4))
)))
(assert (forall ((d@@5 T@U) ) (! (= (_module.TwoLists.Two_q d@@5) (= (DatatypeCtorId d@@5) |##_module.TwoLists.Two|))
 :pattern ( (_module.TwoLists.Two_q d@@5))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((d@@6 T@U) ) (!  (=> (_System.Tuple2.___hMake2_q d@@6) (exists ((|a#1#0#0| T@U) (|a#1#1#0| T@U) ) (= d@@6 (|#_System._tuple#2._#Make2| |a#1#0#0| |a#1#1#0|))))
 :pattern ( (_System.Tuple2.___hMake2_q d@@6))
)))
(assert (forall ((d@@7 T@U) ) (!  (=> (_module.List.Cons_q d@@7) (exists ((|a#5#0#0| T@U) (|a#5#1#0| T@U) ) (= d@@7 (|#_module.List.Cons| |a#5#0#0| |a#5#1#0|))))
 :pattern ( (_module.List.Cons_q d@@7))
)))
(assert (forall ((d@@8 T@U) ) (!  (=> (_module.List.ICons_q d@@8) (exists ((|a#13#0#0| Int) (|a#13#1#0| T@U) ) (= d@@8 (|#_module.List.ICons| |a#13#0#0| |a#13#1#0|))))
 :pattern ( (_module.List.ICons_q d@@8))
)))
(assert (forall ((d@@9 T@U) ) (!  (=> (_module.TwoLists.Two_q d@@9) (exists ((|a#20#0#0| T@U) (|a#20#1#0| T@U) ) (= d@@9 (|#_module.TwoLists.Two| |a#20#0#0| |a#20#1#0|))))
 :pattern ( (_module.TwoLists.Two_q d@@9))
)))
(assert (forall ((_module.TwoLists$A@@1 T@U) (|a#21#0#0@@0| T@U) (|a#21#1#0@@0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.TwoLists.Two| |a#21#0#0@@0| |a#21#1#0@@0|) (Tclass._module.TwoLists _module.TwoLists$A@@1))  (and ($Is DatatypeTypeType |a#21#0#0@@0| (Tclass._module.List _module.TwoLists$A@@1)) ($Is DatatypeTypeType |a#21#1#0@@0| (Tclass._module.List _module.TwoLists$A@@1))))
 :pattern ( ($Is DatatypeTypeType (|#_module.TwoLists.Two| |a#21#0#0@@0| |a#21#1#0@@0|) (Tclass._module.TwoLists _module.TwoLists$A@@1)))
)))
(assert (forall ((d@@10 T@U) ) (!  (=> (_module.List.Nil_q d@@10) (= d@@10 |#_module.List.Nil|))
 :pattern ( (_module.List.Nil_q d@@10))
)))
(assert (forall ((v T@U) (t T@U) (h@@0 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v) t h@@0) ($IsAlloc T@@1 v t h@@0))
 :pattern ( ($IsAllocBox ($Box T@@1 v) t h@@0))
)))
(assert (forall ((h@@1 T@U) (k@@0 T@U) (bx T@U) (t@@0 T@U) ) (!  (=> ($HeapSucc h@@1 k@@0) (=> ($IsAllocBox bx t@@0 h@@1) ($IsAllocBox bx t@@0 k@@0)))
 :pattern ( ($HeapSucc h@@1 k@@0) ($IsAllocBox bx t@@0 h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@1 T@U) (v@@0 T@U) (t@@1 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@2 k@@1) (=> ($IsAlloc T@@2 v@@0 t@@1 h@@2) ($IsAlloc T@@2 v@@0 t@@1 k@@1)))
 :pattern ( ($HeapSucc h@@2 k@@1) ($IsAlloc T@@2 v@@0 t@@1 h@@2))
)))
(assert (forall ((_module.List$A@@3 T@U) ) (!  (and (= (Tag (Tclass._module.List _module.List$A@@3)) Tagclass._module.List) (= (TagFamily (Tclass._module.List _module.List$A@@3)) tytagFamily$List))
 :pattern ( (Tclass._module.List _module.List$A@@3))
)))
(assert (forall ((_module.TwoLists$A@@2 T@U) ) (!  (and (= (Tag (Tclass._module.TwoLists _module.TwoLists$A@@2)) Tagclass._module.TwoLists) (= (TagFamily (Tclass._module.TwoLists _module.TwoLists$A@@2)) tytagFamily$TwoLists))
 :pattern ( (Tclass._module.TwoLists _module.TwoLists$A@@2))
)))
(assert (forall ((_module.Co$A T@U) ) (!  (and (= (Tag (Tclass._module.Co _module.Co$A)) Tagclass._module.Co) (= (TagFamily (Tclass._module.Co _module.Co$A)) tytagFamily$Co))
 :pattern ( (Tclass._module.Co _module.Co$A))
)))
(assert (forall ((d@@11 T@U) ($h@@2 T@U) ) (!  (=> (and ($IsGoodHeap $h@@2) (and (_module.List.ICons_q d@@11) (exists ((_module.List$A@@4 T@U) ) (! ($IsAlloc DatatypeTypeType d@@11 (Tclass._module.List _module.List$A@@4) $h@@2)
 :pattern ( ($IsAlloc DatatypeTypeType d@@11 (Tclass._module.List _module.List$A@@4) $h@@2))
)))) ($IsAlloc intType (int_2_U (_module.List._h2 d@@11)) TInt $h@@2))
 :pattern ( ($IsAlloc intType (int_2_U (_module.List._h2 d@@11)) TInt $h@@2))
)))
(assert (forall ((a T@U) (b T@U) (c T@U) ) (!  (=> (or (not (= a c)) (not true)) (=> (and ($HeapSucc a b) ($HeapSucc b c)) ($HeapSucc a c)))
 :pattern ( ($HeapSucc a b) ($HeapSucc b c))
)))
(assert (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 TInt) (and (= ($Box intType ($Unbox intType bx@@0)) bx@@0) ($Is intType ($Unbox intType bx@@0) TInt)))
 :pattern ( ($IsBox bx@@0 TInt))
)))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 TReal) (and (= ($Box realType ($Unbox realType bx@@1)) bx@@1) ($Is realType ($Unbox realType bx@@1) TReal)))
 :pattern ( ($IsBox bx@@1 TReal))
)))
(assert (forall ((v@@1 T@U) (t@@2 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@1) t@@2) ($Is T@@3 v@@1 t@@2))
 :pattern ( ($IsBox ($Box T@@3 v@@1) t@@2))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module._default.CoValue$A@@0 T@U) ($ly@@0 T@U) (|x#0@@0| T@U) ) (!  (=> (or (|_module.__default.CoValue#canCall| _module._default.CoValue$A@@0 |x#0@@0|) (and (< 1 $FunctionContextHeight) ($IsBox |x#0@@0| _module._default.CoValue$A@@0))) ($Is DatatypeTypeType (_module.__default.CoValue _module._default.CoValue$A@@0 $ly@@0 |x#0@@0|) (Tclass._module.Co _module._default.CoValue$A@@0)))
 :pattern ( (_module.__default.CoValue _module._default.CoValue$A@@0 $ly@@0 |x#0@@0|))
))))
(assert (forall ((|a#0#0#0| T@U) (|a#0#1#0| T@U) ) (! (= (DatatypeCtorId (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|)) |##_System._tuple#2._#Make2|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|))
)))
(assert (forall ((|_System._tuple#2$T0@@2| T@U) (|_System._tuple#2$T1@@2| T@U) ) (! (= (Tclass._System.Tuple2_0 (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|)) |_System._tuple#2$T0@@2|)
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|))
)))
(assert (forall ((|_System._tuple#2$T0@@3| T@U) (|_System._tuple#2$T1@@3| T@U) ) (! (= (Tclass._System.Tuple2_1 (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|)) |_System._tuple#2$T1@@3|)
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|))
)))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| T@U) ) (! (= (_System.Tuple2._0 (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|)) |a#4#0#0|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|))
)))
(assert (forall ((|a#6#0#0@@0| T@U) (|a#6#1#0@@0| T@U) ) (! (= (_System.Tuple2._1 (|#_System._tuple#2._#Make2| |a#6#0#0@@0| |a#6#1#0@@0|)) |a#6#1#0@@0|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#6#0#0@@0| |a#6#1#0@@0|))
)))
(assert (forall ((|a#4#0#0@@0| T@U) (|a#4#1#0@@0| T@U) ) (! (= (DatatypeCtorId (|#_module.List.Cons| |a#4#0#0@@0| |a#4#1#0@@0|)) |##_module.List.Cons|)
 :pattern ( (|#_module.List.Cons| |a#4#0#0@@0| |a#4#1#0@@0|))
)))
(assert (forall ((|a#8#0#0| T@U) (|a#8#1#0| T@U) ) (! (= (_module.List._h0 (|#_module.List.Cons| |a#8#0#0| |a#8#1#0|)) |a#8#0#0|)
 :pattern ( (|#_module.List.Cons| |a#8#0#0| |a#8#1#0|))
)))
(assert (forall ((|a#10#0#0| T@U) (|a#10#1#0| T@U) ) (! (= (_module.List._h1 (|#_module.List.Cons| |a#10#0#0| |a#10#1#0|)) |a#10#1#0|)
 :pattern ( (|#_module.List.Cons| |a#10#0#0| |a#10#1#0|))
)))
(assert (forall ((|a#12#0#0| Int) (|a#12#1#0| T@U) ) (! (= (DatatypeCtorId (|#_module.List.ICons| |a#12#0#0| |a#12#1#0|)) |##_module.List.ICons|)
 :pattern ( (|#_module.List.ICons| |a#12#0#0| |a#12#1#0|))
)))
(assert (forall ((|a#16#0#0| Int) (|a#16#1#0| T@U) ) (! (= (_module.List._h2 (|#_module.List.ICons| |a#16#0#0| |a#16#1#0|)) |a#16#0#0|)
 :pattern ( (|#_module.List.ICons| |a#16#0#0| |a#16#1#0|))
)))
(assert (forall ((|a#17#0#0| Int) (|a#17#1#0| T@U) ) (! (= (_module.List._h3 (|#_module.List.ICons| |a#17#0#0| |a#17#1#0|)) |a#17#1#0|)
 :pattern ( (|#_module.List.ICons| |a#17#0#0| |a#17#1#0|))
)))
(assert (forall ((|a#19#0#0| T@U) (|a#19#1#0| T@U) ) (! (= (DatatypeCtorId (|#_module.TwoLists.Two| |a#19#0#0| |a#19#1#0|)) |##_module.TwoLists.Two|)
 :pattern ( (|#_module.TwoLists.Two| |a#19#0#0| |a#19#1#0|))
)))
(assert (forall ((|a#23#0#0| T@U) (|a#23#1#0| T@U) ) (! (= (_module.TwoLists._h4 (|#_module.TwoLists.Two| |a#23#0#0| |a#23#1#0|)) |a#23#0#0|)
 :pattern ( (|#_module.TwoLists.Two| |a#23#0#0| |a#23#1#0|))
)))
(assert (forall ((|a#25#0#0| T@U) (|a#25#1#0| T@U) ) (! (= (_module.TwoLists._h5 (|#_module.TwoLists.Two| |a#25#0#0| |a#25#1#0|)) |a#25#1#0|)
 :pattern ( (|#_module.TwoLists.Two| |a#25#0#0| |a#25#1#0|))
)))
(assert (forall ((_module.List$A@@5 T@U) ) (! (= (Tclass._module.List_0 (Tclass._module.List _module.List$A@@5)) _module.List$A@@5)
 :pattern ( (Tclass._module.List _module.List$A@@5))
)))
(assert (forall ((_module.TwoLists$A@@3 T@U) ) (! (= (Tclass._module.TwoLists_0 (Tclass._module.TwoLists _module.TwoLists$A@@3)) _module.TwoLists$A@@3)
 :pattern ( (Tclass._module.TwoLists _module.TwoLists$A@@3))
)))
(assert (forall ((_module.Co$A@@0 T@U) ) (! (= (Tclass._module.Co_0 (Tclass._module.Co _module.Co$A@@0)) _module.Co$A@@0)
 :pattern ( (Tclass._module.Co _module.Co$A@@0))
)))
(assert (forall ((x@@5 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@5)) x@@5)
 :pattern ( ($Box T@@4 x@@5))
)))
(assert (forall ((|a#5#0#0@@0| T@U) (|a#5#1#0@@0| T@U) ) (! (< (BoxRank |a#5#0#0@@0|) (DtRank (|#_System._tuple#2._#Make2| |a#5#0#0@@0| |a#5#1#0@@0|)))
 :pattern ( (|#_System._tuple#2._#Make2| |a#5#0#0@@0| |a#5#1#0@@0|))
)))
(assert (forall ((|a#7#0#0| T@U) (|a#7#1#0| T@U) ) (! (< (BoxRank |a#7#1#0|) (DtRank (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|))
)))
(assert (forall ((|a#9#0#0| T@U) (|a#9#1#0| T@U) ) (! (< (BoxRank |a#9#0#0|) (DtRank (|#_module.List.Cons| |a#9#0#0| |a#9#1#0|)))
 :pattern ( (|#_module.List.Cons| |a#9#0#0| |a#9#1#0|))
)))
(assert (forall ((|a#11#0#0| T@U) (|a#11#1#0| T@U) ) (! (< (DtRank |a#11#1#0|) (DtRank (|#_module.List.Cons| |a#11#0#0| |a#11#1#0|)))
 :pattern ( (|#_module.List.Cons| |a#11#0#0| |a#11#1#0|))
)))
(assert (forall ((|a#18#0#0| Int) (|a#18#1#0| T@U) ) (! (< (DtRank |a#18#1#0|) (DtRank (|#_module.List.ICons| |a#18#0#0| |a#18#1#0|)))
 :pattern ( (|#_module.List.ICons| |a#18#0#0| |a#18#1#0|))
)))
(assert (forall ((|a#24#0#0| T@U) (|a#24#1#0| T@U) ) (! (< (DtRank |a#24#0#0|) (DtRank (|#_module.TwoLists.Two| |a#24#0#0| |a#24#1#0|)))
 :pattern ( (|#_module.TwoLists.Two| |a#24#0#0| |a#24#1#0|))
)))
(assert (forall ((|a#26#0#0| T@U) (|a#26#1#0| T@U) ) (! (< (DtRank |a#26#1#0|) (DtRank (|#_module.TwoLists.Two| |a#26#0#0| |a#26#1#0|)))
 :pattern ( (|#_module.TwoLists.Two| |a#26#0#0| |a#26#1#0|))
)))
(assert (forall ((|_System._tuple#2$T0@@4| T@U) (|_System._tuple#2$T1@@4| T@U) (bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@2)) bx@@2) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@2) (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|))))
 :pattern ( ($IsBox bx@@2 (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|)))
)))
(assert (forall ((_module.List$A@@6 T@U) (d@@12 T@U) ) (!  (=> ($Is DatatypeTypeType d@@12 (Tclass._module.List _module.List$A@@6)) (or (or (_module.List.Nil_q d@@12) (_module.List.Cons_q d@@12)) (_module.List.ICons_q d@@12)))
 :pattern ( (_module.List.ICons_q d@@12) ($Is DatatypeTypeType d@@12 (Tclass._module.List _module.List$A@@6)))
 :pattern ( (_module.List.Cons_q d@@12) ($Is DatatypeTypeType d@@12 (Tclass._module.List _module.List$A@@6)))
 :pattern ( (_module.List.Nil_q d@@12) ($Is DatatypeTypeType d@@12 (Tclass._module.List _module.List$A@@6)))
)))
(assert (forall ((d@@13 T@U) (_module.List$A@@7 T@U) ($h@@3 T@U) ) (!  (=> (and ($IsGoodHeap $h@@3) (and (_module.List.Cons_q d@@13) ($IsAlloc DatatypeTypeType d@@13 (Tclass._module.List _module.List$A@@7) $h@@3))) ($IsAllocBox (_module.List._h0 d@@13) _module.List$A@@7 $h@@3))
 :pattern ( ($IsAllocBox (_module.List._h0 d@@13) _module.List$A@@7 $h@@3))
)))
(assert  (and (forall ((t0@@0 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 t2 (MapType1Store t0@@0 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((|_System._tuple#2$T0@@5| T@U) (|_System._tuple#2$T1@@5| T@U) ) (!  (and (= (Tag (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|)) Tagclass._System.Tuple2) (= (TagFamily (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|)) |tytagFamily$_tuple#2|))
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|))
)))
(assert (forall ((d@@14 T@U) ) (! (= (BoxRank ($Box DatatypeTypeType d@@14)) (DtRank d@@14))
 :pattern ( (BoxRank ($Box DatatypeTypeType d@@14)))
)))
(assert (forall ((_module.List$A@@8 T@U) (bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 (Tclass._module.List _module.List$A@@8)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@3)) bx@@3) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@3) (Tclass._module.List _module.List$A@@8))))
 :pattern ( ($IsBox bx@@3 (Tclass._module.List _module.List$A@@8)))
)))
(assert (forall ((_module.TwoLists$A@@4 T@U) (bx@@4 T@U) ) (!  (=> ($IsBox bx@@4 (Tclass._module.TwoLists _module.TwoLists$A@@4)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@4)) bx@@4) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@4) (Tclass._module.TwoLists _module.TwoLists$A@@4))))
 :pattern ( ($IsBox bx@@4 (Tclass._module.TwoLists _module.TwoLists$A@@4)))
)))
(assert (forall ((_module.Co$A@@1 T@U) (bx@@5 T@U) ) (!  (=> ($IsBox bx@@5 (Tclass._module.Co _module.Co$A@@1)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@5)) bx@@5) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@5) (Tclass._module.Co _module.Co$A@@1))))
 :pattern ( ($IsBox bx@@5 (Tclass._module.Co _module.Co$A@@1)))
)))
(assert (forall ((d@@15 T@U) (_module.List$A@@9 T@U) ($h@@4 T@U) ) (!  (=> (and ($IsGoodHeap $h@@4) (and (_module.List.Cons_q d@@15) ($IsAlloc DatatypeTypeType d@@15 (Tclass._module.List _module.List$A@@9) $h@@4))) ($IsAlloc DatatypeTypeType (_module.List._h1 d@@15) (Tclass._module.List _module.List$A@@9) $h@@4))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.List._h1 d@@15) (Tclass._module.List _module.List$A@@9) $h@@4))
)))
(assert (forall ((d@@16 T@U) (_module.List$A@@10 T@U) ($h@@5 T@U) ) (!  (=> (and ($IsGoodHeap $h@@5) (and (_module.List.ICons_q d@@16) ($IsAlloc DatatypeTypeType d@@16 (Tclass._module.List _module.List$A@@10) $h@@5))) ($IsAlloc DatatypeTypeType (_module.List._h3 d@@16) (Tclass._module.List _module.List$A@@10) $h@@5))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.List._h3 d@@16) (Tclass._module.List _module.List$A@@10) $h@@5))
)))
(assert (forall ((d@@17 T@U) (_module.TwoLists$A@@5 T@U) ($h@@6 T@U) ) (!  (=> (and ($IsGoodHeap $h@@6) (and (_module.TwoLists.Two_q d@@17) ($IsAlloc DatatypeTypeType d@@17 (Tclass._module.TwoLists _module.TwoLists$A@@5) $h@@6))) ($IsAlloc DatatypeTypeType (_module.TwoLists._h4 d@@17) (Tclass._module.List _module.TwoLists$A@@5) $h@@6))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.TwoLists._h4 d@@17) (Tclass._module.List _module.TwoLists$A@@5) $h@@6))
)))
(assert (forall ((d@@18 T@U) (_module.TwoLists$A@@6 T@U) ($h@@7 T@U) ) (!  (=> (and ($IsGoodHeap $h@@7) (and (_module.TwoLists.Two_q d@@18) ($IsAlloc DatatypeTypeType d@@18 (Tclass._module.TwoLists _module.TwoLists$A@@6) $h@@7))) ($IsAlloc DatatypeTypeType (_module.TwoLists._h5 d@@18) (Tclass._module.List _module.TwoLists$A@@6) $h@@7))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.TwoLists._h5 d@@18) (Tclass._module.List _module.TwoLists$A@@6) $h@@7))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($Heap T@U) (_module._default.CoValue$A@@1 T@U) ($ly@@1 T@U) (|x#0@@1| T@U) ) (!  (=> (and (or (|_module.__default.CoValue#canCall| _module._default.CoValue$A@@1 |x#0@@1|) (and (< 1 $FunctionContextHeight) (and ($IsBox |x#0@@1| _module._default.CoValue$A@@1) ($IsAllocBox |x#0@@1| _module._default.CoValue$A@@1 $Heap)))) ($IsGoodHeap $Heap)) ($IsAlloc DatatypeTypeType (_module.__default.CoValue _module._default.CoValue$A@@1 $ly@@1 |x#0@@1|) (Tclass._module.Co _module._default.CoValue$A@@1) $Heap))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.__default.CoValue _module._default.CoValue$A@@1 $ly@@1 |x#0@@1|) (Tclass._module.Co _module._default.CoValue$A@@1) $Heap))
))))
(assert (= |#_module.List.Nil| (Lit DatatypeTypeType |#_module.List.Nil|)))
(assert (forall ((d@@19 T@U) (|_System._tuple#2$T0@@6| T@U) ($h@@8 T@U) ) (!  (=> (and ($IsGoodHeap $h@@8) (and (_System.Tuple2.___hMake2_q d@@19) (exists ((|_System._tuple#2$T1@@6| T@U) ) (! ($IsAlloc DatatypeTypeType d@@19 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@8)
 :pattern ( ($IsAlloc DatatypeTypeType d@@19 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@8))
)))) ($IsAllocBox (_System.Tuple2._0 d@@19) |_System._tuple#2$T0@@6| $h@@8))
 :pattern ( ($IsAllocBox (_System.Tuple2._0 d@@19) |_System._tuple#2$T0@@6| $h@@8))
)))
(assert (forall ((d@@20 T@U) (|_System._tuple#2$T1@@7| T@U) ($h@@9 T@U) ) (!  (=> (and ($IsGoodHeap $h@@9) (and (_System.Tuple2.___hMake2_q d@@20) (exists ((|_System._tuple#2$T0@@7| T@U) ) (! ($IsAlloc DatatypeTypeType d@@20 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|) $h@@9)
 :pattern ( ($IsAlloc DatatypeTypeType d@@20 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|) $h@@9))
)))) ($IsAllocBox (_System.Tuple2._1 d@@20) |_System._tuple#2$T1@@7| $h@@9))
 :pattern ( ($IsAllocBox (_System.Tuple2._1 d@@20) |_System._tuple#2$T1@@7| $h@@9))
)))
(assert (forall ((|a#3#0#0| T@U) (|a#3#1#0| T@U) ) (! (= (|#_System._tuple#2._#Make2| (Lit BoxType |a#3#0#0|) (Lit BoxType |a#3#1#0|)) (Lit DatatypeTypeType (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| (Lit BoxType |a#3#0#0|) (Lit BoxType |a#3#1#0|)))
)))
(assert (forall ((|a#7#0#0@@0| T@U) (|a#7#1#0@@0| T@U) ) (! (= (|#_module.List.Cons| (Lit BoxType |a#7#0#0@@0|) (Lit DatatypeTypeType |a#7#1#0@@0|)) (Lit DatatypeTypeType (|#_module.List.Cons| |a#7#0#0@@0| |a#7#1#0@@0|)))
 :pattern ( (|#_module.List.Cons| (Lit BoxType |a#7#0#0@@0|) (Lit DatatypeTypeType |a#7#1#0@@0|)))
)))
(assert (forall ((|a#22#0#0| T@U) (|a#22#1#0| T@U) ) (! (= (|#_module.TwoLists.Two| (Lit DatatypeTypeType |a#22#0#0|) (Lit DatatypeTypeType |a#22#1#0|)) (Lit DatatypeTypeType (|#_module.TwoLists.Two| |a#22#0#0| |a#22#1#0|)))
 :pattern ( (|#_module.TwoLists.Two| (Lit DatatypeTypeType |a#22#0#0|) (Lit DatatypeTypeType |a#22#1#0|)))
)))
(assert (forall ((x@@6 Real) ) (! (= ($Box realType (real_2_U (LitReal x@@6))) (Lit BoxType ($Box realType (real_2_U x@@6))))
 :pattern ( ($Box realType (real_2_U (LitReal x@@6))))
)))
(assert (forall ((x@@7 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@7)) (Lit BoxType ($Box T@@5 x@@7)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@7)))
)))
(assert (forall ((h@@3 T@U) (v@@2 T@U) ) (! ($IsAlloc intType v@@2 TInt h@@3)
 :pattern ( ($IsAlloc intType v@@2 TInt h@@3))
)))
(assert (forall ((h@@4 T@U) (v@@3 T@U) ) (! ($IsAlloc realType v@@3 TReal h@@4)
 :pattern ( ($IsAlloc realType v@@3 TReal h@@4))
)))
(assert (forall ((_module.List$A@@11 T@U) (|a#6#0#0@@1| T@U) (|a#6#1#0@@1| T@U) ($h@@10 T@U) ) (!  (=> ($IsGoodHeap $h@@10) (= ($IsAlloc DatatypeTypeType (|#_module.List.Cons| |a#6#0#0@@1| |a#6#1#0@@1|) (Tclass._module.List _module.List$A@@11) $h@@10)  (and ($IsAllocBox |a#6#0#0@@1| _module.List$A@@11 $h@@10) ($IsAlloc DatatypeTypeType |a#6#1#0@@1| (Tclass._module.List _module.List$A@@11) $h@@10))))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_module.List.Cons| |a#6#0#0@@1| |a#6#1#0@@1|) (Tclass._module.List _module.List$A@@11) $h@@10))
)))
(assert (forall ((_module.List$A@@12 T@U) (|a#14#0#0@@0| Int) (|a#14#1#0@@0| T@U) ($h@@11 T@U) ) (!  (=> ($IsGoodHeap $h@@11) (= ($IsAlloc DatatypeTypeType (|#_module.List.ICons| |a#14#0#0@@0| |a#14#1#0@@0|) (Tclass._module.List _module.List$A@@12) $h@@11)  (and ($IsAlloc intType (int_2_U |a#14#0#0@@0|) TInt $h@@11) ($IsAlloc DatatypeTypeType |a#14#1#0@@0| (Tclass._module.List _module.List$A@@12) $h@@11))))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_module.List.ICons| |a#14#0#0@@0| |a#14#1#0@@0|) (Tclass._module.List _module.List$A@@12) $h@@11))
)))
(assert (forall ((v@@4 T@U) ) (! ($Is intType v@@4 TInt)
 :pattern ( ($Is intType v@@4 TInt))
)))
(assert (forall ((v@@5 T@U) ) (! ($Is realType v@@5 TReal)
 :pattern ( ($Is realType v@@5 TReal))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 2) true)
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
