(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 (T@T) Int)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (T@U) Bool)
(declare-fun $generated@@13 (Int) T@U)
(declare-fun $generated@@14 (T@U) Int)
(declare-fun $generated@@15 (Real) T@U)
(declare-fun $generated@@16 (T@U) Real)
(declare-fun $generated@@23 (T@U T@U T@U) Int)
(declare-fun $generated@@24 (T@U) T@U)
(declare-fun $generated@@28 (T@U) T@U)
(declare-fun $generated@@29 () T@U)
(declare-fun $generated@@30 () T@U)
(declare-fun $generated@@31 () Int)
(declare-fun $generated@@32 (T@T T@U) T@U)
(declare-fun $generated@@33 () T@T)
(declare-fun $generated@@34 (T@U T@U) Bool)
(declare-fun $generated@@35 (T@T T@U T@U) Bool)
(declare-fun $generated@@36 (T@U) T@U)
(declare-fun $generated@@37 (T@U) Bool)
(declare-fun $generated@@38 (T@U) T@U)
(declare-fun $generated@@42 () T@U)
(declare-fun $generated@@44 (Int) Int)
(declare-fun $generated@@48 (T@U T@U) T@U)
(declare-fun $generated@@49 (T@U T@U) Bool)
(declare-fun $generated@@54 (T@U) Bool)
(declare-fun $generated@@56 (T@T T@U) T@U)
(declare-fun $generated@@57 (T@T T@U) T@U)
(declare-fun $generated@@64 (T@U) T@U)
(declare-fun $generated@@65 (T@U) T@U)
(declare-fun $generated@@78 (T@U) T@U)
(declare-fun $generated@@83 (T@U) T@U)
(declare-fun $generated@@87 (T@U) Int)
(declare-fun $generated@@88 (T@U) Int)
(declare-fun $generated@@93 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@94 () T@T)
(declare-fun $generated@@95 () T@T)
(declare-fun $generated@@96 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@97 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@98 () T@T)
(declare-fun $generated@@99 (T@T T@T) T@T)
(declare-fun $generated@@100 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@101 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@102 (T@T) T@T)
(declare-fun $generated@@103 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@7 $generated@@8) 0) (= ($generated@@7 $generated@@9) 1)) (= ($generated@@7 $generated@@10) 2)) (forall (($generated@@17 Bool) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Int) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@16 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 T@U) ) (! (= ($generated@@15 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6)
)
(assert (forall (($generated@@25 T@U) ($generated@@26 T@U) ($generated@@27 T@U) ) (! (= ($generated@@23 $generated@@25 ($generated@@24 $generated@@26) $generated@@27) ($generated@@23 $generated@@25 $generated@@26 $generated@@27))
 :pattern ( ($generated@@23 $generated@@25 ($generated@@24 $generated@@26) $generated@@27))
)))
(assert (= ($generated@@28 $generated@@29) $generated@@2))
(assert (= ($generated@@28 $generated@@30) $generated@@3))
(assert (= ($generated@@7 $generated@@33) 3))
(assert  (=> (<= 1 $generated@@31) (forall (($generated@@39 T@U) ($generated@@40 T@U) ($generated@@41 T@U) ) (!  (=> (or ($generated@@34 $generated@@39 ($generated@@32 $generated@@33 $generated@@41)) (and (< 1 $generated@@31) ($generated@@35 $generated@@33 $generated@@41 ($generated@@36 $generated@@39)))) (and (=> (not ($generated@@12 ($generated@@32 $generated@@8 ($generated@@11 ($generated@@37 ($generated@@32 $generated@@33 $generated@@41)))))) ($generated@@34 $generated@@39 ($generated@@32 $generated@@33 ($generated@@38 ($generated@@32 $generated@@33 $generated@@41))))) (= ($generated@@23 $generated@@39 ($generated@@24 $generated@@40) ($generated@@32 $generated@@33 $generated@@41)) (ite ($generated@@37 ($generated@@32 $generated@@33 $generated@@41)) 0 (+ 1 ($generated@@23 $generated@@39 ($generated@@24 $generated@@40) ($generated@@32 $generated@@33 ($generated@@38 ($generated@@32 $generated@@33 $generated@@41)))))))))
 :weight 3
 :pattern ( ($generated@@23 $generated@@39 ($generated@@24 $generated@@40) ($generated@@32 $generated@@33 $generated@@41)))
))))
(assert ($generated@@35 $generated@@33 $generated@@29 $generated@@42))
(assert (forall (($generated@@43 T@U) ) (! ($generated@@35 $generated@@33 $generated@@30 ($generated@@36 $generated@@43))
 :pattern ( ($generated@@35 $generated@@33 $generated@@30 ($generated@@36 $generated@@43)))
)))
(assert (forall (($generated@@45 Int) ) (! (= ($generated@@44 $generated@@45) $generated@@45)
 :pattern ( ($generated@@44 $generated@@45))
)))
(assert (forall (($generated@@46 T@U) ($generated@@47 T@T) ) (! (= ($generated@@32 $generated@@47 $generated@@46) $generated@@46)
 :pattern ( ($generated@@32 $generated@@47 $generated@@46))
)))
(assert (forall (($generated@@50 T@U) ($generated@@51 T@U) ($generated@@52 T@U) ) (! (= ($generated@@35 $generated@@33 ($generated@@48 $generated@@51 $generated@@52) ($generated@@36 $generated@@50))  (and ($generated@@49 $generated@@51 $generated@@50) ($generated@@35 $generated@@33 $generated@@52 ($generated@@36 $generated@@50))))
 :pattern ( ($generated@@35 $generated@@33 ($generated@@48 $generated@@51 $generated@@52) ($generated@@36 $generated@@50)))
)))
(assert (forall (($generated@@53 T@U) ) (! (= ($generated@@37 $generated@@53) (= ($generated@@28 $generated@@53) $generated@@3))
 :pattern ( ($generated@@37 $generated@@53))
)))
(assert (forall (($generated@@55 T@U) ) (! (= ($generated@@54 $generated@@55) (= ($generated@@28 $generated@@55) $generated@@4))
 :pattern ( ($generated@@54 $generated@@55))
)))
(assert (forall (($generated@@58 T@U) ($generated@@59 T@T) ) (! (= ($generated@@57 $generated@@59 ($generated@@56 $generated@@59 $generated@@58)) $generated@@58)
 :pattern ( ($generated@@56 $generated@@59 $generated@@58))
)))
(assert (forall (($generated@@60 T@U) ) (!  (=> ($generated@@54 $generated@@60) (exists (($generated@@61 T@U) ($generated@@62 T@U) ) (= $generated@@60 ($generated@@48 $generated@@61 $generated@@62))))
 :pattern ( ($generated@@54 $generated@@60))
)))
(assert (forall (($generated@@63 T@U) ) (!  (=> ($generated@@37 $generated@@63) (= $generated@@63 $generated@@30))
 :pattern ( ($generated@@37 $generated@@63))
)))
(assert (forall (($generated@@66 T@U) ) (!  (and (= ($generated@@64 ($generated@@36 $generated@@66)) $generated@@1) (= ($generated@@65 ($generated@@36 $generated@@66)) $generated@@6))
 :pattern ( ($generated@@36 $generated@@66))
)))
(assert (forall (($generated@@67 T@U) ) (!  (=> ($generated@@49 $generated@@67 $generated@@42) (and (= ($generated@@57 $generated@@33 ($generated@@56 $generated@@33 $generated@@67)) $generated@@67) ($generated@@35 $generated@@33 ($generated@@56 $generated@@33 $generated@@67) $generated@@42)))
 :pattern ( ($generated@@49 $generated@@67 $generated@@42))
)))
(assert  (=> (<= 1 $generated@@31) (forall (($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ) (!  (=> (or ($generated@@34 $generated@@68 $generated@@70) (and (< 1 $generated@@31) ($generated@@35 $generated@@33 $generated@@70 ($generated@@36 $generated@@68)))) (and (=> (not ($generated@@37 $generated@@70)) ($generated@@34 $generated@@68 ($generated@@38 $generated@@70))) (= ($generated@@23 $generated@@68 ($generated@@24 $generated@@69) $generated@@70) (ite ($generated@@37 $generated@@70) 0 (+ 1 ($generated@@23 $generated@@68 $generated@@69 ($generated@@38 $generated@@70)))))))
 :pattern ( ($generated@@23 $generated@@68 ($generated@@24 $generated@@69) $generated@@70))
))))
(assert (forall (($generated@@71 T@U) ($generated@@72 T@U) ) (!  (=> ($generated@@35 $generated@@33 $generated@@72 ($generated@@36 $generated@@71)) (or ($generated@@37 $generated@@72) ($generated@@54 $generated@@72)))
 :pattern ( ($generated@@54 $generated@@72) ($generated@@35 $generated@@33 $generated@@72 ($generated@@36 $generated@@71)))
 :pattern ( ($generated@@37 $generated@@72) ($generated@@35 $generated@@33 $generated@@72 ($generated@@36 $generated@@71)))
)))
(assert (forall (($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@T) ) (! (= ($generated@@49 ($generated@@57 $generated@@75 $generated@@73) $generated@@74) ($generated@@35 $generated@@75 $generated@@73 $generated@@74))
 :pattern ( ($generated@@49 ($generated@@57 $generated@@75 $generated@@73) $generated@@74))
)))
(assert (forall (($generated@@76 T@U) ($generated@@77 T@U) ) (! (= ($generated@@28 ($generated@@48 $generated@@76 $generated@@77)) $generated@@4)
 :pattern ( ($generated@@48 $generated@@76 $generated@@77))
)))
(assert (forall (($generated@@79 T@U) ($generated@@80 T@U) ) (! (= ($generated@@78 ($generated@@48 $generated@@79 $generated@@80)) $generated@@79)
 :pattern ( ($generated@@48 $generated@@79 $generated@@80))
)))
(assert (forall (($generated@@81 T@U) ($generated@@82 T@U) ) (! (= ($generated@@38 ($generated@@48 $generated@@81 $generated@@82)) $generated@@82)
 :pattern ( ($generated@@48 $generated@@81 $generated@@82))
)))
(assert (forall (($generated@@84 T@U) ) (! (= ($generated@@83 ($generated@@36 $generated@@84)) $generated@@84)
 :pattern ( ($generated@@36 $generated@@84))
)))
(assert (forall (($generated@@85 T@U) ($generated@@86 T@T) ) (! (= ($generated@@56 $generated@@86 ($generated@@57 $generated@@86 $generated@@85)) $generated@@85)
 :pattern ( ($generated@@57 $generated@@86 $generated@@85))
)))
(assert (forall (($generated@@89 T@U) ($generated@@90 T@U) ) (! (< ($generated@@87 $generated@@89) ($generated@@88 ($generated@@48 $generated@@89 $generated@@90)))
 :pattern ( ($generated@@48 $generated@@89 $generated@@90))
)))
(assert (forall (($generated@@91 T@U) ($generated@@92 T@U) ) (! (< ($generated@@88 $generated@@92) ($generated@@88 ($generated@@48 $generated@@91 $generated@@92)))
 :pattern ( ($generated@@48 $generated@@91 $generated@@92))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@104 T@T) ($generated@@105 T@T) ($generated@@106 T@T) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ) (! (= ($generated@@93 $generated@@104 $generated@@105 $generated@@106 ($generated@@100 $generated@@104 $generated@@105 $generated@@106 $generated@@108 $generated@@109 $generated@@110 $generated@@107) $generated@@109 $generated@@110) $generated@@107)
 :weight 0
)) (and (forall (($generated@@111 T@T) ($generated@@112 T@T) ($generated@@113 T@T) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ) (!  (or (= $generated@@116 $generated@@118) (= ($generated@@93 $generated@@111 $generated@@112 $generated@@113 ($generated@@100 $generated@@111 $generated@@112 $generated@@113 $generated@@115 $generated@@116 $generated@@117 $generated@@114) $generated@@118 $generated@@119) ($generated@@93 $generated@@111 $generated@@112 $generated@@113 $generated@@115 $generated@@118 $generated@@119)))
 :weight 0
)) (forall (($generated@@120 T@T) ($generated@@121 T@T) ($generated@@122 T@T) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ) (!  (or (= $generated@@126 $generated@@128) (= ($generated@@93 $generated@@120 $generated@@121 $generated@@122 ($generated@@100 $generated@@120 $generated@@121 $generated@@122 $generated@@124 $generated@@125 $generated@@126 $generated@@123) $generated@@127 $generated@@128) ($generated@@93 $generated@@120 $generated@@121 $generated@@122 $generated@@124 $generated@@127 $generated@@128)))
 :weight 0
)))) (= ($generated@@7 $generated@@94) 4)) (= ($generated@@7 $generated@@95) 5)) (forall (($generated@@129 T@T) ($generated@@130 T@T) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ) (! (= ($generated@@97 $generated@@129 $generated@@130 ($generated@@101 $generated@@129 $generated@@130 $generated@@132 $generated@@133 $generated@@131) $generated@@133) $generated@@131)
 :weight 0
))) (forall (($generated@@134 T@T) ($generated@@135 T@T) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ) (!  (or (= $generated@@138 $generated@@139) (= ($generated@@97 $generated@@134 $generated@@135 ($generated@@101 $generated@@134 $generated@@135 $generated@@137 $generated@@138 $generated@@136) $generated@@139) ($generated@@97 $generated@@134 $generated@@135 $generated@@137 $generated@@139)))
 :weight 0
))) (= ($generated@@7 $generated@@98) 6)) (forall (($generated@@140 T@T) ($generated@@141 T@T) ) (= ($generated@@7 ($generated@@99 $generated@@140 $generated@@141)) 7))) (forall (($generated@@142 T@T) ($generated@@143 T@T) ) (! (= ($generated@@102 ($generated@@99 $generated@@142 $generated@@143)) $generated@@142)
 :pattern ( ($generated@@99 $generated@@142 $generated@@143))
))) (forall (($generated@@144 T@T) ($generated@@145 T@T) ) (! (= ($generated@@103 ($generated@@99 $generated@@144 $generated@@145)) $generated@@145)
 :pattern ( ($generated@@99 $generated@@144 $generated@@145))
))))
(assert (forall (($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 Bool) ($generated@@150 T@U) ($generated@@151 T@U) ) (! (= ($generated@@12 ($generated@@93 $generated@@94 $generated@@95 $generated@@8 ($generated@@96 $generated@@146 $generated@@147 $generated@@148 $generated@@149) $generated@@150 $generated@@151))  (=> (and (or (not (= $generated@@150 $generated@@146)) (not true)) ($generated@@12 ($generated@@56 $generated@@8 ($generated@@97 $generated@@95 $generated@@98 ($generated@@97 $generated@@94 ($generated@@99 $generated@@95 $generated@@98) $generated@@147 $generated@@150) $generated@@148)))) $generated@@149))
 :pattern ( ($generated@@93 $generated@@94 $generated@@95 $generated@@8 ($generated@@96 $generated@@146 $generated@@147 $generated@@148 $generated@@149) $generated@@150 $generated@@151))
)))
(assert (forall (($generated@@152 T@U) ) (! (= ($generated@@87 ($generated@@57 $generated@@33 $generated@@152)) ($generated@@88 $generated@@152))
 :pattern ( ($generated@@87 ($generated@@57 $generated@@33 $generated@@152)))
)))
(assert (forall (($generated@@153 T@U) ($generated@@154 T@U) ) (!  (=> ($generated@@49 $generated@@154 ($generated@@36 $generated@@153)) (and (= ($generated@@57 $generated@@33 ($generated@@56 $generated@@33 $generated@@154)) $generated@@154) ($generated@@35 $generated@@33 ($generated@@56 $generated@@33 $generated@@154) ($generated@@36 $generated@@153))))
 :pattern ( ($generated@@49 $generated@@154 ($generated@@36 $generated@@153)))
)))
(assert (= ($generated@@64 $generated@@42) $generated@@0))
(assert (= ($generated@@65 $generated@@42) $generated@@5))
(assert (= $generated@@29 ($generated@@32 $generated@@33 $generated@@29)))
(assert (= $generated@@30 ($generated@@32 $generated@@33 $generated@@30)))
(assert (forall (($generated@@155 T@U) ($generated@@156 T@U) ) (! (= ($generated@@48 ($generated@@32 $generated@@98 $generated@@155) ($generated@@32 $generated@@33 $generated@@156)) ($generated@@32 $generated@@33 ($generated@@48 $generated@@155 $generated@@156)))
 :pattern ( ($generated@@48 ($generated@@32 $generated@@98 $generated@@155) ($generated@@32 $generated@@33 $generated@@156)))
)))
(assert (forall (($generated@@157 Int) ) (! (= ($generated@@57 $generated@@9 ($generated@@13 ($generated@@44 $generated@@157))) ($generated@@32 $generated@@98 ($generated@@57 $generated@@9 ($generated@@13 $generated@@157))))
 :pattern ( ($generated@@57 $generated@@9 ($generated@@13 ($generated@@44 $generated@@157))))
)))
(assert (forall (($generated@@158 T@U) ($generated@@159 T@T) ) (! (= ($generated@@57 $generated@@159 ($generated@@32 $generated@@159 $generated@@158)) ($generated@@32 $generated@@98 ($generated@@57 $generated@@159 $generated@@158)))
 :pattern ( ($generated@@57 $generated@@159 ($generated@@32 $generated@@159 $generated@@158)))
)))
(assert  (=> (<= 1 $generated@@31) (forall (($generated@@160 T@U) ($generated@@161 T@U) ($generated@@162 T@U) ) (!  (=> (or ($generated@@34 $generated@@160 $generated@@162) (and (< 1 $generated@@31) ($generated@@35 $generated@@33 $generated@@162 ($generated@@36 $generated@@160)))) (<= ($generated@@44 0) ($generated@@23 $generated@@160 $generated@@161 $generated@@162)))
 :pattern ( ($generated@@23 $generated@@160 $generated@@161 $generated@@162))
))))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@163 () T@U)
(declare-fun $generated@@164 () T@U)
(declare-fun $generated@@165 () T@U)
(declare-fun $generated@@166 () T@U)
(declare-fun $generated@@167 (T@U) Bool)
(declare-fun $generated@@168 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@169  (=> (and (= $generated@@163 ($generated@@96 $generated@@164 $generated@@165 $generated false)) (= (ControlFlow 0 2) (- 0 1))) (= ($generated@@44 ($generated@@23 $generated@@42 ($generated@@24 ($generated@@24 $generated@@166)) ($generated@@32 $generated@@33 ($generated@@48 ($generated@@57 $generated@@33 ($generated@@32 $generated@@33 $generated@@29)) ($generated@@32 $generated@@33 ($generated@@48 ($generated@@57 $generated@@33 ($generated@@32 $generated@@33 $generated@@29)) ($generated@@32 $generated@@33 ($generated@@48 ($generated@@57 $generated@@33 ($generated@@32 $generated@@33 $generated@@29)) ($generated@@32 $generated@@33 ($generated@@48 ($generated@@57 $generated@@33 ($generated@@32 $generated@@33 $generated@@29)) ($generated@@32 $generated@@33 $generated@@30))))))))))) ($generated@@44 4)))))
(let (($generated@@170  (=> (and (and ($generated@@167 $generated@@165) ($generated@@168 $generated@@165)) (and (= 2 $generated@@31) (= (ControlFlow 0 3) 2))) $generated@@169)))
$generated@@170)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
