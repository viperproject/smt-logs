(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 (T@T) Int)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 (Bool) T@U)
(declare-fun $generated@@11 (T@U) Bool)
(declare-fun $generated@@12 (Int) T@U)
(declare-fun $generated@@13 (T@U) Int)
(declare-fun $generated@@14 (Real) T@U)
(declare-fun $generated@@15 (T@U) Real)
(declare-fun $generated@@22 (T@U) T@U)
(declare-fun $generated@@23 () T@U)
(declare-fun $generated@@24 () T@U)
(declare-fun $generated@@25 () T@U)
(declare-fun $generated@@26 () T@U)
(declare-fun $generated@@27 (T@T T@U T@U) Bool)
(declare-fun $generated@@28 () T@T)
(declare-fun $generated@@29 () T@U)
(declare-fun $generated@@30 (T@U T@U) Bool)
(declare-fun $generated@@33 (T@T T@U) T@U)
(declare-fun $generated@@36 (T@U) Bool)
(declare-fun $generated@@38 (T@U) Bool)
(declare-fun $generated@@40 (T@U) Bool)
(declare-fun $generated@@42 (T@U) Bool)
(declare-fun $generated@@44 (T@T T@U) T@U)
(declare-fun $generated@@45 (T@T T@U) T@U)
(declare-fun $generated@@62 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@63 () T@T)
(declare-fun $generated@@64 () T@T)
(declare-fun $generated@@65 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@66 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@67 () T@T)
(declare-fun $generated@@68 (T@T T@T) T@T)
(declare-fun $generated@@69 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@70 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@71 (T@T) T@T)
(declare-fun $generated@@72 (T@T) T@T)
(declare-fun $generated@@121 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@122 (T@U) Bool)
(declare-fun $generated@@125 (T@U) T@U)
(declare-fun $generated@@126 (T@U) T@U)
(declare-fun $generated@@127 (T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@6 $generated@@7) 0) (= ($generated@@6 $generated@@8) 1)) (= ($generated@@6 $generated@@9) 2)) (forall (($generated@@16 Bool) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Int) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Real) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5)
)
(assert (= ($generated@@22 $generated@@23) $generated@@1))
(assert (= ($generated@@22 $generated@@24) $generated@@2))
(assert (= ($generated@@22 $generated@@25) $generated@@3))
(assert (= ($generated@@22 $generated@@26) $generated@@4))
(assert (= ($generated@@6 $generated@@28) 3))
(assert ($generated@@27 $generated@@28 $generated@@23 $generated@@29))
(assert ($generated@@27 $generated@@28 $generated@@24 $generated@@29))
(assert ($generated@@27 $generated@@28 $generated@@25 $generated@@29))
(assert ($generated@@27 $generated@@28 $generated@@26 $generated@@29))
(assert (forall (($generated@@31 T@U) ($generated@@32 T@U) ) (! (= ($generated@@30 $generated@@31 $generated@@32) (= $generated@@31 $generated@@32))
 :pattern ( ($generated@@30 $generated@@31 $generated@@32))
)))
(assert (forall (($generated@@34 T@U) ($generated@@35 T@T) ) (! (= ($generated@@33 $generated@@35 $generated@@34) $generated@@34)
 :pattern ( ($generated@@33 $generated@@35 $generated@@34))
)))
(assert (forall (($generated@@37 T@U) ) (! (= ($generated@@36 $generated@@37) (= ($generated@@22 $generated@@37) $generated@@1))
 :pattern ( ($generated@@36 $generated@@37))
)))
(assert (forall (($generated@@39 T@U) ) (! (= ($generated@@38 $generated@@39) (= ($generated@@22 $generated@@39) $generated@@2))
 :pattern ( ($generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ) (! (= ($generated@@40 $generated@@41) (= ($generated@@22 $generated@@41) $generated@@3))
 :pattern ( ($generated@@40 $generated@@41))
)))
(assert (forall (($generated@@43 T@U) ) (! (= ($generated@@42 $generated@@43) (= ($generated@@22 $generated@@43) $generated@@4))
 :pattern ( ($generated@@42 $generated@@43))
)))
(assert (forall (($generated@@46 T@U) ($generated@@47 T@T) ) (! (= ($generated@@45 $generated@@47 ($generated@@44 $generated@@47 $generated@@46)) $generated@@46)
 :pattern ( ($generated@@44 $generated@@47 $generated@@46))
)))
(assert (forall (($generated@@48 T@U) ) (!  (=> ($generated@@36 $generated@@48) (= $generated@@48 $generated@@23))
 :pattern ( ($generated@@36 $generated@@48))
)))
(assert (forall (($generated@@49 T@U) ) (!  (=> ($generated@@38 $generated@@49) (= $generated@@49 $generated@@24))
 :pattern ( ($generated@@38 $generated@@49))
)))
(assert (forall (($generated@@50 T@U) ) (!  (=> ($generated@@40 $generated@@50) (= $generated@@50 $generated@@25))
 :pattern ( ($generated@@40 $generated@@50))
)))
(assert (forall (($generated@@51 T@U) ) (!  (=> ($generated@@42 $generated@@51) (= $generated@@51 $generated@@26))
 :pattern ( ($generated@@42 $generated@@51))
)))
(assert (forall (($generated@@52 T@U) ($generated@@53 T@U) ) (!  (=> (and ($generated@@36 $generated@@52) ($generated@@36 $generated@@53)) ($generated@@30 $generated@@52 $generated@@53))
 :pattern ( ($generated@@30 $generated@@52 $generated@@53) ($generated@@36 $generated@@52))
 :pattern ( ($generated@@30 $generated@@52 $generated@@53) ($generated@@36 $generated@@53))
)))
(assert (forall (($generated@@54 T@U) ($generated@@55 T@U) ) (!  (=> (and ($generated@@38 $generated@@54) ($generated@@38 $generated@@55)) ($generated@@30 $generated@@54 $generated@@55))
 :pattern ( ($generated@@30 $generated@@54 $generated@@55) ($generated@@38 $generated@@54))
 :pattern ( ($generated@@30 $generated@@54 $generated@@55) ($generated@@38 $generated@@55))
)))
(assert (forall (($generated@@56 T@U) ($generated@@57 T@U) ) (!  (=> (and ($generated@@40 $generated@@56) ($generated@@40 $generated@@57)) ($generated@@30 $generated@@56 $generated@@57))
 :pattern ( ($generated@@30 $generated@@56 $generated@@57) ($generated@@40 $generated@@56))
 :pattern ( ($generated@@30 $generated@@56 $generated@@57) ($generated@@40 $generated@@57))
)))
(assert (forall (($generated@@58 T@U) ($generated@@59 T@U) ) (!  (=> (and ($generated@@42 $generated@@58) ($generated@@42 $generated@@59)) ($generated@@30 $generated@@58 $generated@@59))
 :pattern ( ($generated@@30 $generated@@58 $generated@@59) ($generated@@42 $generated@@58))
 :pattern ( ($generated@@30 $generated@@58 $generated@@59) ($generated@@42 $generated@@59))
)))
(assert (forall (($generated@@60 T@U) ($generated@@61 T@T) ) (! (= ($generated@@44 $generated@@61 ($generated@@45 $generated@@61 $generated@@60)) $generated@@60)
 :pattern ( ($generated@@45 $generated@@61 $generated@@60))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@73 T@T) ($generated@@74 T@T) ($generated@@75 T@T) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ) (! (= ($generated@@62 $generated@@73 $generated@@74 $generated@@75 ($generated@@69 $generated@@73 $generated@@74 $generated@@75 $generated@@77 $generated@@78 $generated@@79 $generated@@76) $generated@@78 $generated@@79) $generated@@76)
 :weight 0
)) (and (forall (($generated@@80 T@T) ($generated@@81 T@T) ($generated@@82 T@T) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ) (!  (or (= $generated@@85 $generated@@87) (= ($generated@@62 $generated@@80 $generated@@81 $generated@@82 ($generated@@69 $generated@@80 $generated@@81 $generated@@82 $generated@@84 $generated@@85 $generated@@86 $generated@@83) $generated@@87 $generated@@88) ($generated@@62 $generated@@80 $generated@@81 $generated@@82 $generated@@84 $generated@@87 $generated@@88)))
 :weight 0
)) (forall (($generated@@89 T@T) ($generated@@90 T@T) ($generated@@91 T@T) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (!  (or (= $generated@@95 $generated@@97) (= ($generated@@62 $generated@@89 $generated@@90 $generated@@91 ($generated@@69 $generated@@89 $generated@@90 $generated@@91 $generated@@93 $generated@@94 $generated@@95 $generated@@92) $generated@@96 $generated@@97) ($generated@@62 $generated@@89 $generated@@90 $generated@@91 $generated@@93 $generated@@96 $generated@@97)))
 :weight 0
)))) (= ($generated@@6 $generated@@63) 4)) (= ($generated@@6 $generated@@64) 5)) (forall (($generated@@98 T@T) ($generated@@99 T@T) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (! (= ($generated@@66 $generated@@98 $generated@@99 ($generated@@70 $generated@@98 $generated@@99 $generated@@101 $generated@@102 $generated@@100) $generated@@102) $generated@@100)
 :weight 0
))) (forall (($generated@@103 T@T) ($generated@@104 T@T) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ) (!  (or (= $generated@@107 $generated@@108) (= ($generated@@66 $generated@@103 $generated@@104 ($generated@@70 $generated@@103 $generated@@104 $generated@@106 $generated@@107 $generated@@105) $generated@@108) ($generated@@66 $generated@@103 $generated@@104 $generated@@106 $generated@@108)))
 :weight 0
))) (= ($generated@@6 $generated@@67) 6)) (forall (($generated@@109 T@T) ($generated@@110 T@T) ) (= ($generated@@6 ($generated@@68 $generated@@109 $generated@@110)) 7))) (forall (($generated@@111 T@T) ($generated@@112 T@T) ) (! (= ($generated@@71 ($generated@@68 $generated@@111 $generated@@112)) $generated@@111)
 :pattern ( ($generated@@68 $generated@@111 $generated@@112))
))) (forall (($generated@@113 T@T) ($generated@@114 T@T) ) (! (= ($generated@@72 ($generated@@68 $generated@@113 $generated@@114)) $generated@@114)
 :pattern ( ($generated@@68 $generated@@113 $generated@@114))
))))
(assert (forall (($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 Bool) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (= ($generated@@11 ($generated@@62 $generated@@63 $generated@@64 $generated@@7 ($generated@@65 $generated@@115 $generated@@116 $generated@@117 $generated@@118) $generated@@119 $generated@@120))  (=> (and (or (not (= $generated@@119 $generated@@115)) (not true)) ($generated@@11 ($generated@@44 $generated@@7 ($generated@@66 $generated@@64 $generated@@67 ($generated@@66 $generated@@63 ($generated@@68 $generated@@64 $generated@@67) $generated@@116 $generated@@119) $generated@@117)))) $generated@@118))
 :pattern ( ($generated@@62 $generated@@63 $generated@@64 $generated@@7 ($generated@@65 $generated@@115 $generated@@116 $generated@@117 $generated@@118) $generated@@119 $generated@@120))
)))
(assert (forall (($generated@@123 T@U) ($generated@@124 T@U) ) (!  (=> (and ($generated@@122 $generated@@124) ($generated@@27 $generated@@28 $generated@@123 $generated@@29)) ($generated@@121 $generated@@28 $generated@@123 $generated@@29 $generated@@124))
 :pattern ( ($generated@@121 $generated@@28 $generated@@123 $generated@@29 $generated@@124))
)))
(assert (= ($generated@@125 $generated@@29) $generated@@0))
(assert (= ($generated@@126 $generated@@29) $generated@@5))
(assert (= $generated@@23 ($generated@@33 $generated@@28 $generated@@23)))
(assert (= $generated@@24 ($generated@@33 $generated@@28 $generated@@24)))
(assert (= $generated@@25 ($generated@@33 $generated@@28 $generated@@25)))
(assert (= $generated@@26 ($generated@@33 $generated@@28 $generated@@26)))
(assert (forall (($generated@@128 T@U) ) (!  (=> ($generated@@127 $generated@@128) (or (or (or ($generated@@36 $generated@@128) ($generated@@38 $generated@@128)) ($generated@@40 $generated@@128)) ($generated@@42 $generated@@128)))
 :pattern ( ($generated@@127 $generated@@128))
)))
(assert (forall (($generated@@129 T@U) ($generated@@130 T@T) ) (! (= ($generated@@45 $generated@@130 ($generated@@33 $generated@@130 $generated@@129)) ($generated@@33 $generated@@67 ($generated@@45 $generated@@130 $generated@@129)))
 :pattern ( ($generated@@45 $generated@@130 ($generated@@33 $generated@@130 $generated@@129)))
)))
(assert (forall (($generated@@131 T@U) ) (!  (=> ($generated@@27 $generated@@28 $generated@@131 $generated@@29) (or (or (or ($generated@@36 $generated@@131) ($generated@@38 $generated@@131)) ($generated@@40 $generated@@131)) ($generated@@42 $generated@@131)))
 :pattern ( ($generated@@42 $generated@@131) ($generated@@27 $generated@@28 $generated@@131 $generated@@29))
 :pattern ( ($generated@@40 $generated@@131) ($generated@@27 $generated@@28 $generated@@131 $generated@@29))
 :pattern ( ($generated@@38 $generated@@131) ($generated@@27 $generated@@28 $generated@@131 $generated@@29))
 :pattern ( ($generated@@36 $generated@@131) ($generated@@27 $generated@@28 $generated@@131 $generated@@29))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@132 () T@U)
(declare-fun $generated@@133 () T@U)
(declare-fun $generated@@134 () T@U)
(declare-fun $generated@@135 () T@U)
(declare-fun $generated@@136 (T@U) Bool)
(declare-fun $generated@@137 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 12) (let (($generated@@138 true))
(let (($generated@@139  (=> (and (= $generated@@132 $generated@@24) (= (ControlFlow 0 6) (- 0 5))) false)))
(let (($generated@@140  (=> (or (not (= $generated@@132 $generated@@26)) (not true)) (and (=> (= (ControlFlow 0 8) 6) $generated@@139) (=> (= (ControlFlow 0 8) 7) $generated@@138)))))
(let (($generated@@141  (=> (and (= $generated@@132 $generated@@26) (= (ControlFlow 0 4) (- 0 3))) false)))
(let (($generated@@142  (=> (or (not (= $generated@@132 $generated@@25)) (not true)) (and (=> (= (ControlFlow 0 9) 4) $generated@@141) (=> (= (ControlFlow 0 9) 8) $generated@@140)))))
(let (($generated@@143 true))
(let (($generated@@144  (=> (or (not (= $generated@@132 $generated@@23)) (not true)) (and (=> (= (ControlFlow 0 10) 2) $generated@@143) (=> (= (ControlFlow 0 10) 9) $generated@@142)))))
(let (($generated@@145 true))
(let (($generated@@146  (=> (= $generated@@133 ($generated@@65 $generated@@134 $generated@@135 $generated false)) (and (=> (= (ControlFlow 0 11) 1) $generated@@145) (=> (= (ControlFlow 0 11) 10) $generated@@144)))))
(let (($generated@@147  (=> (and ($generated@@122 $generated@@135) ($generated@@136 $generated@@135)) (=> (and (and (and (and ($generated@@27 $generated@@28 $generated@@132 $generated@@29) ($generated@@121 $generated@@28 $generated@@132 $generated@@29 $generated@@135)) ($generated@@127 $generated@@132)) (= 1 $generated@@137)) (and (not ($generated@@30 $generated@@132 $generated@@24)) (= (ControlFlow 0 12) 11))) $generated@@146))))
$generated@@147)))))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 4) (- 3))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
