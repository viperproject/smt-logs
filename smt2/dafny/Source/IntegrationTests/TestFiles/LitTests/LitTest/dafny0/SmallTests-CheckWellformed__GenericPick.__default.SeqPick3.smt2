(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 (Bool) T@U)
(declare-fun $generated@@6 (T@U) Bool)
(declare-fun $generated@@7 (Int) T@U)
(declare-fun $generated@@8 (T@U) Int)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@17 () Int)
(declare-fun $generated@@18 (T@U T@U) T@U)
(declare-fun $generated@@19 (T@U T@U) Bool)
(declare-fun $generated@@20 (T@T T@U T@U) Bool)
(declare-fun $generated@@21 () T@T)
(declare-fun $generated@@22 (T@U) T@U)
(declare-fun $generated@@23 (Int) Int)
(declare-fun $generated@@24 (T@U) Int)
(declare-fun $generated@@25 (T@U T@U) Bool)
(declare-fun $generated@@29 (T@U T@U) T@U)
(declare-fun $generated@@30 (T@U T@U) Bool)
(declare-fun $generated@@31 (T@U T@U) Bool)
(declare-fun $generated@@34 () T@U)
(declare-fun $generated@@36 (T@U) Bool)
(declare-fun $generated@@43 (T@T T@U) T@U)
(declare-fun $generated@@46 (T@U T@U T@U) Bool)
(declare-fun $generated@@47 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@52 (T@U T@U) Bool)
(declare-fun $generated@@53 (T@U Int) T@U)
(declare-fun $generated@@57 (T@T T@U) T@U)
(declare-fun $generated@@58 (T@T T@U) T@U)
(declare-fun $generated@@83 (T@U) T@U)
(declare-fun $generated@@85 (T@U) T@U)
(declare-fun $generated@@89 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@90 () T@T)
(declare-fun $generated@@91 () T@T)
(declare-fun $generated@@92 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@93 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@94 () T@T)
(declare-fun $generated@@95 (T@T T@T) T@T)
(declare-fun $generated@@96 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@97 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@98 (T@T) T@T)
(declare-fun $generated@@99 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (forall (($generated@@11 Bool) ) (! (= ($generated@@6 ($generated@@5 $generated@@11)) $generated@@11)
 :pattern ( ($generated@@5 $generated@@11))
))) (forall (($generated@@12 T@U) ) (! (= ($generated@@5 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 Int) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))))
(assert (distinct $generated $generated@@0)
)
(assert (= ($generated@@1 $generated@@21) 3))
(assert  (=> (<= 1 $generated@@17) (forall (($generated@@26 T@U) ($generated@@27 T@U) ) (!  (=> (or ($generated@@19 $generated@@26 $generated@@27) (and (< 1 $generated@@17) (and ($generated@@20 $generated@@21 $generated@@27 ($generated@@22 $generated@@26)) (exists (($generated@@28 Int) )  (and (<= ($generated@@23 0) $generated@@28) (< $generated@@28 ($generated@@24 $generated@@27))))))) ($generated@@25 ($generated@@18 $generated@@26 $generated@@27) $generated@@26))
 :pattern ( ($generated@@18 $generated@@26 $generated@@27))
))))
(assert (forall (($generated@@32 T@U) ($generated@@33 T@U) ) (!  (=> ($generated@@30 $generated@@32 $generated@@33) ($generated@@31 $generated@@33 ($generated@@29 $generated@@32 $generated@@33)))
 :pattern ( ($generated@@29 $generated@@32 $generated@@33))
)))
(assert (forall (($generated@@35 T@U) ) (!  (not ($generated@@31 $generated@@34 $generated@@35))
 :pattern ( ($generated@@31 $generated@@34 $generated@@35))
)))
(assert (= ($generated@@24 $generated@@34) 0))
(assert  (=> (<= 1 $generated@@17) (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (!  (=> (or ($generated@@19 $generated@@37 $generated@@39) (and (< 1 $generated@@17) (and (and ($generated@@36 $generated@@38) ($generated@@20 $generated@@21 $generated@@39 ($generated@@22 $generated@@37))) (exists (($generated@@40 Int) )  (and (<= ($generated@@23 0) $generated@@40) (< $generated@@40 ($generated@@24 $generated@@39))))))) (and ($generated@@30 $generated@@37 $generated@@39) (= ($generated@@18 $generated@@37 $generated@@39) (let (($generated@@41 ($generated@@29 $generated@@37 $generated@@39)))
$generated@@41))))
 :pattern ( ($generated@@18 $generated@@37 $generated@@39) ($generated@@36 $generated@@38))
))))
(assert (forall (($generated@@42 Int) ) (! (= ($generated@@23 $generated@@42) $generated@@42)
 :pattern ( ($generated@@23 $generated@@42))
)))
(assert (forall (($generated@@44 T@U) ($generated@@45 T@T) ) (! (= ($generated@@43 $generated@@45 $generated@@44) $generated@@44)
 :pattern ( ($generated@@43 $generated@@45 $generated@@44))
)))
(assert  (=> (<= 1 $generated@@17) (forall (($generated@@48 T@U) ($generated@@49 T@U) ($generated@@50 T@U) ) (!  (=> (and (or ($generated@@19 $generated@@49 $generated@@50) (and (< 1 $generated@@17) (and (and ($generated@@20 $generated@@21 $generated@@50 ($generated@@22 $generated@@49)) ($generated@@47 $generated@@21 $generated@@50 ($generated@@22 $generated@@49) $generated@@48)) (exists (($generated@@51 Int) )  (and (<= ($generated@@23 0) $generated@@51) (< $generated@@51 ($generated@@24 $generated@@50))))))) ($generated@@36 $generated@@48)) ($generated@@46 ($generated@@18 $generated@@49 $generated@@50) $generated@@49 $generated@@48))
 :pattern ( ($generated@@46 ($generated@@18 $generated@@49 $generated@@50) $generated@@49 $generated@@48))
))))
(assert (forall (($generated@@54 T@U) ($generated@@55 T@U) ) (! (= ($generated@@52 $generated@@54 $generated@@55)  (and (= ($generated@@24 $generated@@54) ($generated@@24 $generated@@55)) (forall (($generated@@56 Int) ) (!  (=> (and (<= 0 $generated@@56) (< $generated@@56 ($generated@@24 $generated@@54))) (= ($generated@@53 $generated@@54 $generated@@56) ($generated@@53 $generated@@55 $generated@@56)))
 :pattern ( ($generated@@53 $generated@@54 $generated@@56))
 :pattern ( ($generated@@53 $generated@@55 $generated@@56))
))))
 :pattern ( ($generated@@52 $generated@@54 $generated@@55))
)))
(assert (forall (($generated@@59 T@U) ($generated@@60 T@T) ) (! (= ($generated@@58 $generated@@60 ($generated@@57 $generated@@60 $generated@@59)) $generated@@59)
 :pattern ( ($generated@@57 $generated@@60 $generated@@59))
)))
(assert (forall (($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@U) ($generated@@64 T@T) ) (! (= ($generated@@46 ($generated@@58 $generated@@64 $generated@@61) $generated@@62 $generated@@63) ($generated@@47 $generated@@64 $generated@@61 $generated@@62 $generated@@63))
 :pattern ( ($generated@@46 ($generated@@58 $generated@@64 $generated@@61) $generated@@62 $generated@@63))
)))
(assert  (=> (<= 1 $generated@@17) (forall (($generated@@65 T@U) ($generated@@66 T@U) ($generated@@67 T@U) ) (!  (=> (or ($generated@@19 $generated@@65 ($generated@@43 $generated@@21 $generated@@67)) (and (< 1 $generated@@17) (and (and ($generated@@36 $generated@@66) ($generated@@20 $generated@@21 $generated@@67 ($generated@@22 $generated@@65))) (exists (($generated@@68 Int) )  (and (<= ($generated@@23 0) $generated@@68) (< $generated@@68 ($generated@@24 ($generated@@43 $generated@@21 $generated@@67)))))))) (and ($generated@@30 $generated@@65 ($generated@@43 $generated@@21 $generated@@67)) (= ($generated@@18 $generated@@65 ($generated@@43 $generated@@21 $generated@@67)) (let (($generated@@69 ($generated@@29 $generated@@65 ($generated@@43 $generated@@21 $generated@@67))))
$generated@@69))))
 :weight 3
 :pattern ( ($generated@@18 $generated@@65 ($generated@@43 $generated@@21 $generated@@67)) ($generated@@36 $generated@@66))
))))
(assert (forall (($generated@@70 T@U) ($generated@@71 T@U) ) (! (= ($generated@@31 $generated@@70 $generated@@71) (exists (($generated@@72 Int) ) (!  (and (and (<= 0 $generated@@72) (< $generated@@72 ($generated@@24 $generated@@70))) (= ($generated@@53 $generated@@70 $generated@@72) $generated@@71))
 :pattern ( ($generated@@53 $generated@@70 $generated@@72))
)))
 :pattern ( ($generated@@31 $generated@@70 $generated@@71))
)))
(assert (forall (($generated@@73 T@U) ($generated@@74 T@U) ) (!  (=> ($generated@@52 $generated@@73 $generated@@74) (= $generated@@73 $generated@@74))
 :pattern ( ($generated@@52 $generated@@73 $generated@@74))
)))
(assert (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@T) ) (! (= ($generated@@25 ($generated@@58 $generated@@77 $generated@@75) $generated@@76) ($generated@@20 $generated@@77 $generated@@75 $generated@@76))
 :pattern ( ($generated@@25 ($generated@@58 $generated@@77 $generated@@75) $generated@@76))
)))
(assert (forall (($generated@@78 T@U) ) (! (<= 0 ($generated@@24 $generated@@78))
 :pattern ( ($generated@@24 $generated@@78))
)))
(assert (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ) (! (= ($generated@@47 $generated@@21 $generated@@79 ($generated@@22 $generated@@80) $generated@@81) (forall (($generated@@82 Int) ) (!  (=> (and (<= 0 $generated@@82) (< $generated@@82 ($generated@@24 $generated@@79))) ($generated@@46 ($generated@@53 $generated@@79 $generated@@82) $generated@@80 $generated@@81))
 :pattern ( ($generated@@53 $generated@@79 $generated@@82))
)))
 :pattern ( ($generated@@47 $generated@@21 $generated@@79 ($generated@@22 $generated@@80) $generated@@81))
)))
(assert (forall (($generated@@84 T@U) ) (! (= ($generated@@83 ($generated@@22 $generated@@84)) $generated@@84)
 :pattern ( ($generated@@22 $generated@@84))
)))
(assert (forall (($generated@@86 T@U) ) (! (= ($generated@@85 ($generated@@22 $generated@@86)) $generated)
 :pattern ( ($generated@@22 $generated@@86))
)))
(assert (forall (($generated@@87 T@U) ($generated@@88 T@T) ) (! (= ($generated@@57 $generated@@88 ($generated@@58 $generated@@88 $generated@@87)) $generated@@87)
 :pattern ( ($generated@@58 $generated@@88 $generated@@87))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@100 T@T) ($generated@@101 T@T) ($generated@@102 T@T) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (! (= ($generated@@89 $generated@@100 $generated@@101 $generated@@102 ($generated@@96 $generated@@100 $generated@@101 $generated@@102 $generated@@104 $generated@@105 $generated@@106 $generated@@103) $generated@@105 $generated@@106) $generated@@103)
 :weight 0
)) (and (forall (($generated@@107 T@T) ($generated@@108 T@T) ($generated@@109 T@T) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (!  (or (= $generated@@112 $generated@@114) (= ($generated@@89 $generated@@107 $generated@@108 $generated@@109 ($generated@@96 $generated@@107 $generated@@108 $generated@@109 $generated@@111 $generated@@112 $generated@@113 $generated@@110) $generated@@114 $generated@@115) ($generated@@89 $generated@@107 $generated@@108 $generated@@109 $generated@@111 $generated@@114 $generated@@115)))
 :weight 0
)) (forall (($generated@@116 T@T) ($generated@@117 T@T) ($generated@@118 T@T) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ) (!  (or (= $generated@@122 $generated@@124) (= ($generated@@89 $generated@@116 $generated@@117 $generated@@118 ($generated@@96 $generated@@116 $generated@@117 $generated@@118 $generated@@120 $generated@@121 $generated@@122 $generated@@119) $generated@@123 $generated@@124) ($generated@@89 $generated@@116 $generated@@117 $generated@@118 $generated@@120 $generated@@123 $generated@@124)))
 :weight 0
)))) (= ($generated@@1 $generated@@90) 4)) (= ($generated@@1 $generated@@91) 5)) (forall (($generated@@125 T@T) ($generated@@126 T@T) ($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 T@U) ) (! (= ($generated@@93 $generated@@125 $generated@@126 ($generated@@97 $generated@@125 $generated@@126 $generated@@128 $generated@@129 $generated@@127) $generated@@129) $generated@@127)
 :weight 0
))) (forall (($generated@@130 T@T) ($generated@@131 T@T) ($generated@@132 T@U) ($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ) (!  (or (= $generated@@134 $generated@@135) (= ($generated@@93 $generated@@130 $generated@@131 ($generated@@97 $generated@@130 $generated@@131 $generated@@133 $generated@@134 $generated@@132) $generated@@135) ($generated@@93 $generated@@130 $generated@@131 $generated@@133 $generated@@135)))
 :weight 0
))) (= ($generated@@1 $generated@@94) 6)) (forall (($generated@@136 T@T) ($generated@@137 T@T) ) (= ($generated@@1 ($generated@@95 $generated@@136 $generated@@137)) 7))) (forall (($generated@@138 T@T) ($generated@@139 T@T) ) (! (= ($generated@@98 ($generated@@95 $generated@@138 $generated@@139)) $generated@@138)
 :pattern ( ($generated@@95 $generated@@138 $generated@@139))
))) (forall (($generated@@140 T@T) ($generated@@141 T@T) ) (! (= ($generated@@99 ($generated@@95 $generated@@140 $generated@@141)) $generated@@141)
 :pattern ( ($generated@@95 $generated@@140 $generated@@141))
))))
(assert (forall (($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 Bool) ($generated@@146 T@U) ($generated@@147 T@U) ) (! (= ($generated@@6 ($generated@@89 $generated@@90 $generated@@91 $generated@@2 ($generated@@92 $generated@@142 $generated@@143 $generated@@144 $generated@@145) $generated@@146 $generated@@147))  (=> (and (or (not (= $generated@@146 $generated@@142)) (not true)) ($generated@@6 ($generated@@57 $generated@@2 ($generated@@93 $generated@@91 $generated@@94 ($generated@@93 $generated@@90 ($generated@@95 $generated@@91 $generated@@94) $generated@@143 $generated@@146) $generated@@144)))) $generated@@145))
 :pattern ( ($generated@@89 $generated@@90 $generated@@91 $generated@@2 ($generated@@92 $generated@@142 $generated@@143 $generated@@144 $generated@@145) $generated@@146 $generated@@147))
)))
(assert (forall (($generated@@148 T@U) ($generated@@149 T@U) ) (!  (=> ($generated@@25 $generated@@148 ($generated@@22 $generated@@149)) (and (= ($generated@@58 $generated@@21 ($generated@@57 $generated@@21 $generated@@148)) $generated@@148) ($generated@@20 $generated@@21 ($generated@@57 $generated@@21 $generated@@148) ($generated@@22 $generated@@149))))
 :pattern ( ($generated@@25 $generated@@148 ($generated@@22 $generated@@149)))
)))
(assert (forall (($generated@@150 Int) ) (! (= ($generated@@58 $generated@@3 ($generated@@7 ($generated@@23 $generated@@150))) ($generated@@43 $generated@@94 ($generated@@58 $generated@@3 ($generated@@7 $generated@@150))))
 :pattern ( ($generated@@58 $generated@@3 ($generated@@7 ($generated@@23 $generated@@150))))
)))
(assert (forall (($generated@@151 T@U) ($generated@@152 T@T) ) (! (= ($generated@@58 $generated@@152 ($generated@@43 $generated@@152 $generated@@151)) ($generated@@43 $generated@@94 ($generated@@58 $generated@@152 $generated@@151)))
 :pattern ( ($generated@@58 $generated@@152 ($generated@@43 $generated@@152 $generated@@151)))
)))
(assert (forall (($generated@@153 T@U) ) (!  (=> (= ($generated@@24 $generated@@153) 0) (= $generated@@153 $generated@@34))
 :pattern ( ($generated@@24 $generated@@153))
)))
(assert (forall (($generated@@154 T@U) ($generated@@155 T@U) ) (! (= ($generated@@20 $generated@@21 $generated@@154 ($generated@@22 $generated@@155)) (forall (($generated@@156 Int) ) (!  (=> (and (<= 0 $generated@@156) (< $generated@@156 ($generated@@24 $generated@@154))) ($generated@@25 ($generated@@53 $generated@@154 $generated@@156) $generated@@155))
 :pattern ( ($generated@@53 $generated@@154 $generated@@156))
)))
 :pattern ( ($generated@@20 $generated@@21 $generated@@154 ($generated@@22 $generated@@155)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@157 () T@U)
(declare-fun $generated@@158 () T@U)
(declare-fun $generated@@159 () T@U)
(declare-fun $generated@@160 () T@U)
(declare-fun $generated@@161 (T@U) Bool)
(declare-fun $generated@@162 () T@U)
(declare-fun $generated@@163 () Int)
(declare-fun $generated@@164 () T@U)
(declare-fun $generated@@165 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 12) (let (($generated@@166  (=> (= (ControlFlow 0 3) (- 0 2)) (exists (($generated@@167 T@U) )  (and ($generated@@25 $generated@@167 $generated@@157) ($generated@@31 $generated@@158 $generated@@167))))))
(let (($generated@@168  (=> (and (not (and ($generated@@25 $generated@@159 $generated@@157) ($generated@@46 $generated@@159 $generated@@157 $generated@@160))) (= (ControlFlow 0 5) 3)) $generated@@166)))
(let (($generated@@169  (=> (and (and ($generated@@25 $generated@@159 $generated@@157) ($generated@@46 $generated@@159 $generated@@157 $generated@@160)) (= (ControlFlow 0 4) 3)) $generated@@166)))
(let (($generated@@170  (and (=> (= (ControlFlow 0 6) (- 0 7)) (or (or (not ($generated@@52 $generated@@158 $generated@@34)) (or (not (= ($generated@@24 $generated@@158) 0)) (not true))) (exists (($generated@@171 Int) )  (and (<= ($generated@@23 0) $generated@@171) (< $generated@@171 ($generated@@24 $generated@@158)))))) (=> (or (or (not ($generated@@52 $generated@@158 $generated@@34)) (or (not (= ($generated@@24 $generated@@158) 0)) (not true))) (exists (($generated@@172 Int) )  (and (<= ($generated@@23 0) $generated@@172) (< $generated@@172 ($generated@@24 $generated@@158))))) (=> (and (and ($generated@@36 $generated@@160) ($generated@@161 $generated@@160)) (and (exists (($generated@@173 T@U) ) (!  (and ($generated@@25 $generated@@173 $generated@@157) ($generated@@31 $generated@@158 $generated@@173))
 :pattern ( ($generated@@31 $generated@@158 $generated@@173))
)) (= $generated@@162 $generated@@160))) (and (=> (= (ControlFlow 0 6) 4) $generated@@169) (=> (= (ControlFlow 0 6) 5) $generated@@168)))))))
(let (($generated@@174 true))
(let (($generated@@175  (=> (and (<= ($generated@@23 0) $generated@@163) (< $generated@@163 ($generated@@24 $generated@@158))) (and (=> (= (ControlFlow 0 8) 1) $generated@@174) (=> (= (ControlFlow 0 8) 6) $generated@@170)))))
(let (($generated@@176  (=> (and (< $generated@@163 ($generated@@23 0)) (= (ControlFlow 0 10) 8)) $generated@@175)))
(let (($generated@@177  (=> (and (<= ($generated@@23 0) $generated@@163) (= (ControlFlow 0 9) 8)) $generated@@175)))
(let (($generated@@178  (=> (= $generated@@164 ($generated@@92 $generated@@165 $generated@@162 $generated@@0 false)) (and (=> (= (ControlFlow 0 11) 9) $generated@@177) (=> (= (ControlFlow 0 11) 10) $generated@@176)))))
(let (($generated@@179  (=> (and (and (and ($generated@@36 $generated@@162) ($generated@@161 $generated@@162)) ($generated@@20 $generated@@21 $generated@@158 ($generated@@22 $generated@@157))) (and (= 1 $generated@@17) (= (ControlFlow 0 12) 11))) $generated@@178)))
$generated@@179)))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
