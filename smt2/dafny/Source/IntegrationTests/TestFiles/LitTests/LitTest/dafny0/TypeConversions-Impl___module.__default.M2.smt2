(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () Int)
(declare-fun $generated@@0 (Int Int Real Int Real (_ BitVec 67) (_ BitVec 32) (_ BitVec 7) Int) Bool)
(declare-fun $generated@@1 (Int) Int)
(declare-fun $generated@@2 (Real) Real)
(declare-fun $generated@@3 (T@U) (_ BitVec 67))
(declare-fun $generated@@4 (T@T T@U) T@U)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (T@U) (_ BitVec 32))
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (T@U) (_ BitVec 7))
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 (Int Int Real Int Real (_ BitVec 67) (_ BitVec 32) (_ BitVec 7) Int) Bool)
(declare-fun $generated@@11 (Int Int) Int)
(declare-fun $generated@@12 (T@U) Bool)
(declare-fun $generated@@13 () T@T)
(declare-fun $generated@@14 (Bool) T@U)
(declare-fun $generated@@15 (T@T) Int)
(declare-fun $generated@@16 () T@T)
(declare-fun $generated@@17 () T@T)
(declare-fun $generated@@18 (Int) T@U)
(declare-fun $generated@@19 (T@U) Int)
(declare-fun $generated@@20 (Real) T@U)
(declare-fun $generated@@21 (T@U) Real)
(declare-fun $generated@@22 ((_ BitVec 67)) T@U)
(declare-fun $generated@@23 ((_ BitVec 32)) T@U)
(declare-fun $generated@@24 ((_ BitVec 7)) T@U)
(declare-fun $generated@@50 (T@T T@U) T@U)
(declare-fun $generated@@51 (T@T T@U) T@U)
(declare-fun $generated@@65 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@66 () T@T)
(declare-fun $generated@@67 () T@T)
(declare-fun $generated@@68 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@69 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@70 () T@T)
(declare-fun $generated@@71 (T@T T@T) T@T)
(declare-fun $generated@@72 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@73 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@74 (T@T) T@T)
(declare-fun $generated@@75 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@15 $generated@@13) 0) (= ($generated@@15 $generated@@16) 1)) (= ($generated@@15 $generated@@17) 2)) (forall (($generated@@25 Bool) ) (! (= ($generated@@12 ($generated@@14 $generated@@25)) $generated@@25)
 :pattern ( ($generated@@14 $generated@@25))
))) (forall (($generated@@26 T@U) ) (! (= ($generated@@14 ($generated@@12 $generated@@26)) $generated@@26)
 :pattern ( ($generated@@12 $generated@@26))
))) (forall (($generated@@27 Int) ) (! (= ($generated@@19 ($generated@@18 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@18 $generated@@27))
))) (forall (($generated@@28 T@U) ) (! (= ($generated@@18 ($generated@@19 $generated@@28)) $generated@@28)
 :pattern ( ($generated@@19 $generated@@28))
))) (forall (($generated@@29 Real) ) (! (= ($generated@@21 ($generated@@20 $generated@@29)) $generated@@29)
 :pattern ( ($generated@@20 $generated@@29))
))) (forall (($generated@@30 T@U) ) (! (= ($generated@@20 ($generated@@21 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@21 $generated@@30))
))) (= ($generated@@15 $generated@@5) 3)) (forall (($generated@@31 (_ BitVec 67)) ) (! (= ($generated@@3 ($generated@@22 $generated@@31)) $generated@@31)
 :pattern ( ($generated@@22 $generated@@31))
))) (forall (($generated@@32 T@U) ) (! (= ($generated@@22 ($generated@@3 $generated@@32)) $generated@@32)
 :pattern ( ($generated@@3 $generated@@32))
))) (= ($generated@@15 $generated@@7) 4)) (forall (($generated@@33 (_ BitVec 32)) ) (! (= ($generated@@6 ($generated@@23 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@23 $generated@@33))
))) (forall (($generated@@34 T@U) ) (! (= ($generated@@23 ($generated@@6 $generated@@34)) $generated@@34)
 :pattern ( ($generated@@6 $generated@@34))
))) (= ($generated@@15 $generated@@9) 5)) (forall (($generated@@35 (_ BitVec 7)) ) (! (= ($generated@@8 ($generated@@24 $generated@@35)) $generated@@35)
 :pattern ( ($generated@@24 $generated@@35))
))) (forall (($generated@@36 T@U) ) (! (= ($generated@@24 ($generated@@8 $generated@@36)) $generated@@36)
 :pattern ( ($generated@@8 $generated@@36))
))))
(assert  (=> (<= 1 $generated) (forall (($generated@@37 Int) ($generated@@38 Int) ($generated@@39 Real) ($generated@@40 Int) ($generated@@41 Real) ($generated@@42 T@U) ($generated@@43 T@U) ($generated@@44 T@U) ($generated@@45 Int) ) (!  (=> (or ($generated@@10 ($generated@@1 $generated@@37) ($generated@@1 $generated@@38) ($generated@@2 $generated@@39) ($generated@@1 $generated@@40) ($generated@@2 $generated@@41) ($generated@@3 ($generated@@4 $generated@@5 $generated@@42)) ($generated@@6 ($generated@@4 $generated@@7 $generated@@43)) ($generated@@8 ($generated@@4 $generated@@9 $generated@@44)) ($generated@@1 $generated@@45)) (and (< 1 $generated) (and (and (and (<= ($generated@@1 0) $generated@@38) (= ($generated@@11 $generated@@40 ($generated@@1 2)) ($generated@@1 0))) (and (<= ($generated@@2 (- 0.0 4.0)) $generated@@41) (< $generated@@41 300.0))) (= 0 $generated@@45)))) (= ($generated@@0 ($generated@@1 $generated@@37) ($generated@@1 $generated@@38) ($generated@@2 $generated@@39) ($generated@@1 $generated@@40) ($generated@@2 $generated@@41) ($generated@@3 ($generated@@4 $generated@@5 $generated@@42)) ($generated@@6 ($generated@@4 $generated@@7 $generated@@43)) ($generated@@8 ($generated@@4 $generated@@9 $generated@@44)) ($generated@@1 $generated@@45)) ($generated@@12 ($generated@@4 $generated@@13 ($generated@@14 true)))))
 :weight 3
 :pattern ( ($generated@@0 ($generated@@1 $generated@@37) ($generated@@1 $generated@@38) ($generated@@2 $generated@@39) ($generated@@1 $generated@@40) ($generated@@2 $generated@@41) ($generated@@3 ($generated@@4 $generated@@5 $generated@@42)) ($generated@@6 ($generated@@4 $generated@@7 $generated@@43)) ($generated@@8 ($generated@@4 $generated@@9 $generated@@44)) ($generated@@1 $generated@@45)))
))))
(assert (forall (($generated@@46 Int) ) (! (= ($generated@@1 $generated@@46) $generated@@46)
 :pattern ( ($generated@@1 $generated@@46))
)))
(assert (forall (($generated@@47 Real) ) (! (= ($generated@@2 $generated@@47) $generated@@47)
 :pattern ( ($generated@@2 $generated@@47))
)))
(assert (forall (($generated@@48 T@U) ($generated@@49 T@T) ) (! (= ($generated@@4 $generated@@49 $generated@@48) $generated@@48)
 :pattern ( ($generated@@4 $generated@@49 $generated@@48))
)))
(assert (forall (($generated@@52 T@U) ($generated@@53 T@T) ) (! (= ($generated@@51 $generated@@53 ($generated@@50 $generated@@53 $generated@@52)) $generated@@52)
 :pattern ( ($generated@@50 $generated@@53 $generated@@52))
)))
(assert  (=> (<= 1 $generated) (forall (($generated@@54 Int) ($generated@@55 Int) ($generated@@56 Real) ($generated@@57 Int) ($generated@@58 Real) ($generated@@59 (_ BitVec 67)) ($generated@@60 (_ BitVec 32)) ($generated@@61 (_ BitVec 7)) ($generated@@62 Int) ) (!  (=> (or ($generated@@10 $generated@@54 $generated@@55 $generated@@56 $generated@@57 $generated@@58 $generated@@59 $generated@@60 $generated@@61 $generated@@62) (and (< 1 $generated) (and (and (and (<= ($generated@@1 0) $generated@@55) (= ($generated@@11 $generated@@57 ($generated@@1 2)) ($generated@@1 0))) (and (<= ($generated@@2 (- 0.0 4.0)) $generated@@58) (< $generated@@58 300.0))) (= 0 $generated@@62)))) (= ($generated@@0 $generated@@54 $generated@@55 $generated@@56 $generated@@57 $generated@@58 $generated@@59 $generated@@60 $generated@@61 $generated@@62) ($generated@@12 ($generated@@4 $generated@@13 ($generated@@14 true)))))
 :pattern ( ($generated@@0 $generated@@54 $generated@@55 $generated@@56 $generated@@57 $generated@@58 $generated@@59 $generated@@60 $generated@@61 $generated@@62))
))))
(assert (forall (($generated@@63 T@U) ($generated@@64 T@T) ) (! (= ($generated@@50 $generated@@64 ($generated@@51 $generated@@64 $generated@@63)) $generated@@63)
 :pattern ( ($generated@@51 $generated@@64 $generated@@63))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@76 T@T) ($generated@@77 T@T) ($generated@@78 T@T) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (! (= ($generated@@65 $generated@@76 $generated@@77 $generated@@78 ($generated@@72 $generated@@76 $generated@@77 $generated@@78 $generated@@80 $generated@@81 $generated@@82 $generated@@79) $generated@@81 $generated@@82) $generated@@79)
 :weight 0
)) (and (forall (($generated@@83 T@T) ($generated@@84 T@T) ($generated@@85 T@T) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ) (!  (or (= $generated@@88 $generated@@90) (= ($generated@@65 $generated@@83 $generated@@84 $generated@@85 ($generated@@72 $generated@@83 $generated@@84 $generated@@85 $generated@@87 $generated@@88 $generated@@89 $generated@@86) $generated@@90 $generated@@91) ($generated@@65 $generated@@83 $generated@@84 $generated@@85 $generated@@87 $generated@@90 $generated@@91)))
 :weight 0
)) (forall (($generated@@92 T@T) ($generated@@93 T@T) ($generated@@94 T@T) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ) (!  (or (= $generated@@98 $generated@@100) (= ($generated@@65 $generated@@92 $generated@@93 $generated@@94 ($generated@@72 $generated@@92 $generated@@93 $generated@@94 $generated@@96 $generated@@97 $generated@@98 $generated@@95) $generated@@99 $generated@@100) ($generated@@65 $generated@@92 $generated@@93 $generated@@94 $generated@@96 $generated@@99 $generated@@100)))
 :weight 0
)))) (= ($generated@@15 $generated@@66) 6)) (= ($generated@@15 $generated@@67) 7)) (forall (($generated@@101 T@T) ($generated@@102 T@T) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ) (! (= ($generated@@69 $generated@@101 $generated@@102 ($generated@@73 $generated@@101 $generated@@102 $generated@@104 $generated@@105 $generated@@103) $generated@@105) $generated@@103)
 :weight 0
))) (forall (($generated@@106 T@T) ($generated@@107 T@T) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (!  (or (= $generated@@110 $generated@@111) (= ($generated@@69 $generated@@106 $generated@@107 ($generated@@73 $generated@@106 $generated@@107 $generated@@109 $generated@@110 $generated@@108) $generated@@111) ($generated@@69 $generated@@106 $generated@@107 $generated@@109 $generated@@111)))
 :weight 0
))) (= ($generated@@15 $generated@@70) 8)) (forall (($generated@@112 T@T) ($generated@@113 T@T) ) (= ($generated@@15 ($generated@@71 $generated@@112 $generated@@113)) 9))) (forall (($generated@@114 T@T) ($generated@@115 T@T) ) (! (= ($generated@@74 ($generated@@71 $generated@@114 $generated@@115)) $generated@@114)
 :pattern ( ($generated@@71 $generated@@114 $generated@@115))
))) (forall (($generated@@116 T@T) ($generated@@117 T@T) ) (! (= ($generated@@75 ($generated@@71 $generated@@116 $generated@@117)) $generated@@117)
 :pattern ( ($generated@@71 $generated@@116 $generated@@117))
))))
(assert (forall (($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 Bool) ($generated@@122 T@U) ($generated@@123 T@U) ) (! (= ($generated@@12 ($generated@@65 $generated@@66 $generated@@67 $generated@@13 ($generated@@68 $generated@@118 $generated@@119 $generated@@120 $generated@@121) $generated@@122 $generated@@123))  (=> (and (or (not (= $generated@@122 $generated@@118)) (not true)) ($generated@@12 ($generated@@50 $generated@@13 ($generated@@69 $generated@@67 $generated@@70 ($generated@@69 $generated@@66 ($generated@@71 $generated@@67 $generated@@70) $generated@@119 $generated@@122) $generated@@120)))) $generated@@121))
 :pattern ( ($generated@@65 $generated@@66 $generated@@67 $generated@@13 ($generated@@68 $generated@@118 $generated@@119 $generated@@120 $generated@@121) $generated@@122 $generated@@123))
)))
(assert (forall (($generated@@124 Int) ($generated@@125 Int) ) (! (= ($generated@@11 $generated@@124 $generated@@125) (mod $generated@@124 $generated@@125))
 :pattern ( ($generated@@11 $generated@@124 $generated@@125))
)))
(assert (forall (($generated@@126 Int) ) (! (= ($generated@@51 $generated@@16 ($generated@@18 ($generated@@1 $generated@@126))) ($generated@@4 $generated@@70 ($generated@@51 $generated@@16 ($generated@@18 $generated@@126))))
 :pattern ( ($generated@@51 $generated@@16 ($generated@@18 ($generated@@1 $generated@@126))))
)))
(assert (forall (($generated@@127 Real) ) (! (= ($generated@@51 $generated@@17 ($generated@@20 ($generated@@2 $generated@@127))) ($generated@@4 $generated@@70 ($generated@@51 $generated@@17 ($generated@@20 $generated@@127))))
 :pattern ( ($generated@@51 $generated@@17 ($generated@@20 ($generated@@2 $generated@@127))))
)))
(assert (forall (($generated@@128 T@U) ($generated@@129 T@T) ) (! (= ($generated@@51 $generated@@129 ($generated@@4 $generated@@129 $generated@@128)) ($generated@@4 $generated@@70 ($generated@@51 $generated@@129 $generated@@128)))
 :pattern ( ($generated@@51 $generated@@129 ($generated@@4 $generated@@129 $generated@@128)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@130 () Int)
(declare-fun $generated@@131 () Int)
(declare-fun $generated@@132 () Real)
(declare-fun $generated@@133 () Int)
(declare-fun $generated@@134 () Real)
(declare-fun $generated@@135 () (_ BitVec 67))
(declare-fun $generated@@136 () (_ BitVec 32))
(declare-fun $generated@@137 () (_ BitVec 7))
(declare-fun $generated@@138 () Int)
(declare-fun $generated@@139 () (_ BitVec 32))
(declare-fun $generated@@140 () (_ BitVec 67))
(declare-fun $generated@@141 () (_ BitVec 7))
(declare-fun $generated@@142 () (_ BitVec 7))
(declare-fun $generated@@143 () (_ BitVec 7))
(declare-fun $generated@@144 () (_ BitVec 32))
(declare-fun $generated@@145 () (_ BitVec 32))
(declare-fun $generated@@146 () (_ BitVec 67))
(declare-fun $generated@@147 () (_ BitVec 67))
(declare-fun $generated@@148 () T@U)
(declare-fun $generated@@149 () T@U)
(declare-fun $generated@@150 () T@U)
(declare-fun $generated@@151 () T@U)
(declare-fun $generated@@152 (T@U) Bool)
(declare-fun $generated@@153 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 21) (let (($generated@@154  (=> (= (ControlFlow 0 4) (- 0 3)) (=> ($generated@@10 $generated@@130 $generated@@131 $generated@@132 $generated@@133 $generated@@134 $generated@@135 $generated@@136 $generated@@137 $generated@@138) (or ($generated@@0 $generated@@130 $generated@@131 $generated@@132 $generated@@133 $generated@@134 $generated@@135 $generated@@136 $generated@@137 $generated@@138) ($generated@@12 ($generated@@4 $generated@@13 ($generated@@14 true))))))))
(let (($generated@@155  (=> (and (and (= $generated@@137 #b0000000) (= $generated@@136 $generated@@139)) (and (= $generated@@135 $generated@@140) (= (ControlFlow 0 19) 4))) $generated@@154)))
(let (($generated@@156  (=> (and (and (= $generated@@137 $generated@@141) (= $generated@@136 $generated@@139)) (and (= $generated@@135 $generated@@140) (= (ControlFlow 0 18) 4))) $generated@@154)))
(let (($generated@@157  (and (=> (= (ControlFlow 0 16) (- 0 17)) (bvult $generated@@139 #x00000080)) (=> (bvult $generated@@139 #x00000080) (=> (= $generated@@142 ((_ extract 6 0) $generated@@139)) (=> (and (and (= $generated@@137 $generated@@142) (= $generated@@136 $generated@@139)) (and (= $generated@@135 $generated@@140) (= (ControlFlow 0 16) 4))) $generated@@154))))))
(let (($generated@@158  (and (=> (= (ControlFlow 0 14) (- 0 15)) (bvult $generated@@140 #b0000000000000000000000000000000000000000000000000000000000010000000)) (=> (bvult $generated@@140 #b0000000000000000000000000000000000000000000000000000000000010000000) (=> (= $generated@@143 ((_ extract 6 0) $generated@@140)) (=> (and (and (= $generated@@137 $generated@@143) (= $generated@@136 $generated@@139)) (and (= $generated@@135 $generated@@140) (= (ControlFlow 0 14) 4))) $generated@@154))))))
(let (($generated@@159  (=> (and (and (= $generated@@137 $generated@@141) (= $generated@@136 #x00000000)) (and (= $generated@@135 $generated@@140) (= (ControlFlow 0 13) 4))) $generated@@154)))
(let (($generated@@160  (=> (= $generated@@144 (concat #b0000000000000000000000000 $generated@@141)) (=> (and (and (= $generated@@137 $generated@@141) (= $generated@@136 $generated@@144)) (and (= $generated@@135 $generated@@140) (= (ControlFlow 0 12) 4))) $generated@@154))))
(let (($generated@@161  (=> (and (and (= $generated@@137 $generated@@141) (= $generated@@136 $generated@@139)) (and (= $generated@@135 $generated@@140) (= (ControlFlow 0 11) 4))) $generated@@154)))
(let (($generated@@162  (and (=> (= (ControlFlow 0 9) (- 0 10)) (bvult $generated@@140 #b0000000000000000000000000000000000100000000000000000000000000000000)) (=> (bvult $generated@@140 #b0000000000000000000000000000000000100000000000000000000000000000000) (=> (= $generated@@145 ((_ extract 31 0) $generated@@140)) (=> (and (and (= $generated@@137 $generated@@141) (= $generated@@136 $generated@@145)) (and (= $generated@@135 $generated@@140) (= (ControlFlow 0 9) 4))) $generated@@154))))))
(let (($generated@@163  (=> (and (and (= $generated@@137 $generated@@141) (= $generated@@136 $generated@@139)) (and (= $generated@@135 #b0000000000000000000000000000000000000000000000000000000000000000000) (= (ControlFlow 0 8) 4))) $generated@@154)))
(let (($generated@@164  (=> (= $generated@@146 (concat #b000000000000000000000000000000000000000000000000000000000000 $generated@@141)) (=> (and (and (= $generated@@137 $generated@@141) (= $generated@@136 $generated@@139)) (and (= $generated@@135 $generated@@146) (= (ControlFlow 0 7) 4))) $generated@@154))))
(let (($generated@@165  (=> (= $generated@@147 (concat #b00000000000000000000000000000000000 $generated@@139)) (=> (and (and (= $generated@@137 $generated@@141) (= $generated@@136 $generated@@139)) (and (= $generated@@135 $generated@@147) (= (ControlFlow 0 6) 4))) $generated@@154))))
(let (($generated@@166  (=> (and (and (= $generated@@137 $generated@@141) (= $generated@@136 $generated@@139)) (and (= $generated@@135 $generated@@140) (= (ControlFlow 0 5) 4))) $generated@@154)))
(let (($generated@@167  (=> (and (and (and (and (and (and (and (and (and (and (and (and (not ($generated@@12 ($generated@@4 $generated@@13 ($generated@@14 true)))) (not ($generated@@12 ($generated@@4 $generated@@13 ($generated@@14 true))))) (not ($generated@@12 ($generated@@4 $generated@@13 ($generated@@14 true))))) (not ($generated@@12 ($generated@@4 $generated@@13 ($generated@@14 true))))) (not ($generated@@12 ($generated@@4 $generated@@13 ($generated@@14 true))))) (not ($generated@@12 ($generated@@4 $generated@@13 ($generated@@14 true))))) (not ($generated@@12 ($generated@@4 $generated@@13 ($generated@@14 true))))) (not ($generated@@12 ($generated@@4 $generated@@13 ($generated@@14 true))))) (not ($generated@@12 ($generated@@4 $generated@@13 ($generated@@14 true))))) (not ($generated@@12 ($generated@@4 $generated@@13 ($generated@@14 true))))) (not ($generated@@12 ($generated@@4 $generated@@13 ($generated@@14 true))))) (not ($generated@@12 ($generated@@4 $generated@@13 ($generated@@14 true))))) (= (ControlFlow 0 2) (- 0 1))) false)))
(let (($generated@@168  (=> (= $generated@@148 ($generated@@68 $generated@@149 $generated@@150 $generated@@151 false)) (and (and (and (and (and (and (and (and (and (and (and (and (=> (= (ControlFlow 0 20) 5) $generated@@166) (=> (= (ControlFlow 0 20) 6) $generated@@165)) (=> (= (ControlFlow 0 20) 7) $generated@@164)) (=> (= (ControlFlow 0 20) 8) $generated@@163)) (=> (= (ControlFlow 0 20) 9) $generated@@162)) (=> (= (ControlFlow 0 20) 11) $generated@@161)) (=> (= (ControlFlow 0 20) 12) $generated@@160)) (=> (= (ControlFlow 0 20) 13) $generated@@159)) (=> (= (ControlFlow 0 20) 14) $generated@@158)) (=> (= (ControlFlow 0 20) 16) $generated@@157)) (=> (= (ControlFlow 0 20) 18) $generated@@156)) (=> (= (ControlFlow 0 20) 19) $generated@@155)) (=> (= (ControlFlow 0 20) 2) $generated@@167)))))
(let (($generated@@169  (=> (and (and ($generated@@152 $generated@@150) ($generated@@153 $generated@@150)) (and (<= ($generated@@1 0) $generated@@131) (= ($generated@@11 $generated@@133 ($generated@@1 2)) ($generated@@1 0)))) (=> (and (and (and (<= ($generated@@2 (- 0.0 4.0)) $generated@@134) (< $generated@@134 300.0)) (= 0 $generated@@138)) (and (= 2 $generated) (= (ControlFlow 0 21) 20))) $generated@@168))))
$generated@@169)))))))))))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 9) (- 10))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 14) (- 15))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 16) (- 17))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
