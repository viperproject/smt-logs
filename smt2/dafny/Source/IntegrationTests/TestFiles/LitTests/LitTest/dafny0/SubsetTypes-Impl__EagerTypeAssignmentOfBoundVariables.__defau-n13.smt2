(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@22 () T@U)
(declare-fun $generated@@25 (T@U) Bool)
(declare-fun $generated@@26 (T@U) Bool)
(declare-fun $generated@@28 (T@T T@U T@U) Bool)
(declare-fun $generated@@29 () T@T)
(declare-fun $generated@@30 () T@U)
(declare-fun $generated@@32 (Int) Int)
(declare-fun $generated@@34 (T@T T@U) T@U)
(declare-fun $generated@@37 (T@U) T@U)
(declare-fun $generated@@39 (T@T T@U) T@U)
(declare-fun $generated@@40 (T@T T@U) T@U)
(declare-fun $generated@@43 (Int) T@U)
(declare-fun $generated@@49 (T@U) Int)
(declare-fun $generated@@53 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@54 () T@T)
(declare-fun $generated@@55 () T@T)
(declare-fun $generated@@56 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@57 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@58 () T@T)
(declare-fun $generated@@59 (T@T T@T) T@T)
(declare-fun $generated@@60 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@61 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@62 (T@T) T@T)
(declare-fun $generated@@63 (T@T) T@T)
(declare-fun $generated@@112 (T@U) Bool)
(declare-fun $generated@@115 (T@U) T@U)
(declare-fun $generated@@116 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert (forall (($generated@@23 T@U) ($generated@@24 T@U) ) (! ($generated@@21 $generated@@7 $generated@@23 $generated@@22 $generated@@24)
 :pattern ( ($generated@@21 $generated@@7 $generated@@23 $generated@@22 $generated@@24))
)))
(assert (forall (($generated@@27 T@U) ) (!  (=> ($generated@@25 $generated@@27) ($generated@@26 $generated@@27))
 :pattern ( ($generated@@25 $generated@@27))
)))
(assert (= ($generated@@5 $generated@@29) 3))
(assert (forall (($generated@@31 T@U) ) (!  (=> ($generated@@28 $generated@@29 $generated@@31 $generated@@30) ($generated@@26 $generated@@31))
 :pattern ( ($generated@@26 $generated@@31) ($generated@@28 $generated@@29 $generated@@31 $generated@@30))
)))
(assert (forall (($generated@@33 Int) ) (! (= ($generated@@32 $generated@@33) $generated@@33)
 :pattern ( ($generated@@32 $generated@@33))
)))
(assert (forall (($generated@@35 T@U) ($generated@@36 T@T) ) (! (= ($generated@@34 $generated@@36 $generated@@35) $generated@@35)
 :pattern ( ($generated@@34 $generated@@36 $generated@@35))
)))
(assert (forall (($generated@@38 T@U) ) (! (= ($generated@@26 $generated@@38) (= ($generated@@37 $generated@@38) $generated@@2))
 :pattern ( ($generated@@26 $generated@@38))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@T) ) (! (= ($generated@@40 $generated@@42 ($generated@@39 $generated@@42 $generated@@41)) $generated@@41)
 :pattern ( ($generated@@39 $generated@@42 $generated@@41))
)))
(assert (forall (($generated@@44 T@U) ) (!  (=> ($generated@@26 $generated@@44) (exists (($generated@@45 Int) ) (= $generated@@44 ($generated@@43 $generated@@45))))
 :pattern ( ($generated@@26 $generated@@44))
)))
(assert (forall (($generated@@46 T@U) ) (! (= ($generated@@28 $generated@@7 $generated@@46 $generated@@22) (<= ($generated@@32 0) ($generated@@12 $generated@@46)))
 :pattern ( ($generated@@28 $generated@@7 $generated@@46 $generated@@22))
)))
(assert (forall (($generated@@47 Int) ) (! (= ($generated@@28 $generated@@29 ($generated@@43 $generated@@47) $generated@@30) ($generated@@28 $generated@@7 ($generated@@11 $generated@@47) $generated@@22))
 :pattern ( ($generated@@28 $generated@@29 ($generated@@43 $generated@@47) $generated@@30))
)))
(assert (forall (($generated@@48 Int) ) (! (= ($generated@@37 ($generated@@43 $generated@@48)) $generated@@2)
 :pattern ( ($generated@@43 $generated@@48))
)))
(assert (forall (($generated@@50 Int) ) (! (= ($generated@@49 ($generated@@43 $generated@@50)) $generated@@50)
 :pattern ( ($generated@@43 $generated@@50))
)))
(assert (forall (($generated@@51 T@U) ($generated@@52 T@T) ) (! (= ($generated@@39 $generated@@52 ($generated@@40 $generated@@52 $generated@@51)) $generated@@51)
 :pattern ( ($generated@@40 $generated@@52 $generated@@51))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@64 T@T) ($generated@@65 T@T) ($generated@@66 T@T) ($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ) (! (= ($generated@@53 $generated@@64 $generated@@65 $generated@@66 ($generated@@60 $generated@@64 $generated@@65 $generated@@66 $generated@@68 $generated@@69 $generated@@70 $generated@@67) $generated@@69 $generated@@70) $generated@@67)
 :weight 0
)) (and (forall (($generated@@71 T@T) ($generated@@72 T@T) ($generated@@73 T@T) ($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ) (!  (or (= $generated@@76 $generated@@78) (= ($generated@@53 $generated@@71 $generated@@72 $generated@@73 ($generated@@60 $generated@@71 $generated@@72 $generated@@73 $generated@@75 $generated@@76 $generated@@77 $generated@@74) $generated@@78 $generated@@79) ($generated@@53 $generated@@71 $generated@@72 $generated@@73 $generated@@75 $generated@@78 $generated@@79)))
 :weight 0
)) (forall (($generated@@80 T@T) ($generated@@81 T@T) ($generated@@82 T@T) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ) (!  (or (= $generated@@86 $generated@@88) (= ($generated@@53 $generated@@80 $generated@@81 $generated@@82 ($generated@@60 $generated@@80 $generated@@81 $generated@@82 $generated@@84 $generated@@85 $generated@@86 $generated@@83) $generated@@87 $generated@@88) ($generated@@53 $generated@@80 $generated@@81 $generated@@82 $generated@@84 $generated@@87 $generated@@88)))
 :weight 0
)))) (= ($generated@@5 $generated@@54) 4)) (= ($generated@@5 $generated@@55) 5)) (forall (($generated@@89 T@T) ($generated@@90 T@T) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ) (! (= ($generated@@57 $generated@@89 $generated@@90 ($generated@@61 $generated@@89 $generated@@90 $generated@@92 $generated@@93 $generated@@91) $generated@@93) $generated@@91)
 :weight 0
))) (forall (($generated@@94 T@T) ($generated@@95 T@T) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ) (!  (or (= $generated@@98 $generated@@99) (= ($generated@@57 $generated@@94 $generated@@95 ($generated@@61 $generated@@94 $generated@@95 $generated@@97 $generated@@98 $generated@@96) $generated@@99) ($generated@@57 $generated@@94 $generated@@95 $generated@@97 $generated@@99)))
 :weight 0
))) (= ($generated@@5 $generated@@58) 6)) (forall (($generated@@100 T@T) ($generated@@101 T@T) ) (= ($generated@@5 ($generated@@59 $generated@@100 $generated@@101)) 7))) (forall (($generated@@102 T@T) ($generated@@103 T@T) ) (! (= ($generated@@62 ($generated@@59 $generated@@102 $generated@@103)) $generated@@102)
 :pattern ( ($generated@@59 $generated@@102 $generated@@103))
))) (forall (($generated@@104 T@T) ($generated@@105 T@T) ) (! (= ($generated@@63 ($generated@@59 $generated@@104 $generated@@105)) $generated@@105)
 :pattern ( ($generated@@59 $generated@@104 $generated@@105))
))))
(assert (forall (($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 Bool) ($generated@@110 T@U) ($generated@@111 T@U) ) (! (= ($generated@@10 ($generated@@53 $generated@@54 $generated@@55 $generated@@6 ($generated@@56 $generated@@106 $generated@@107 $generated@@108 $generated@@109) $generated@@110 $generated@@111))  (=> (and (or (not (= $generated@@110 $generated@@106)) (not true)) ($generated@@10 ($generated@@39 $generated@@6 ($generated@@57 $generated@@55 $generated@@58 ($generated@@57 $generated@@54 ($generated@@59 $generated@@55 $generated@@58) $generated@@107 $generated@@110) $generated@@108)))) $generated@@109))
 :pattern ( ($generated@@53 $generated@@54 $generated@@55 $generated@@6 ($generated@@56 $generated@@106 $generated@@107 $generated@@108 $generated@@109) $generated@@110 $generated@@111))
)))
(assert (forall (($generated@@113 T@U) ($generated@@114 T@U) ) (!  (=> (and ($generated@@112 $generated@@114) ($generated@@28 $generated@@29 $generated@@113 $generated@@30)) ($generated@@21 $generated@@29 $generated@@113 $generated@@30 $generated@@114))
 :pattern ( ($generated@@21 $generated@@29 $generated@@113 $generated@@30 $generated@@114))
)))
(assert (= ($generated@@115 $generated@@22) $generated@@0))
(assert (= ($generated@@116 $generated@@22) $generated@@3))
(assert (= ($generated@@115 $generated@@30) $generated@@1))
(assert (= ($generated@@116 $generated@@30) $generated@@4))
(assert (forall (($generated@@117 T@U) ($generated@@118 T@U) ) (!  (=> (and ($generated@@112 $generated@@118) (and ($generated@@26 $generated@@117) ($generated@@21 $generated@@29 $generated@@117 $generated@@30 $generated@@118))) ($generated@@21 $generated@@7 ($generated@@11 ($generated@@49 $generated@@117)) $generated@@22 $generated@@118))
 :pattern ( ($generated@@21 $generated@@7 ($generated@@11 ($generated@@49 $generated@@117)) $generated@@22 $generated@@118))
)))
(assert (forall (($generated@@119 Int) ) (! (= ($generated@@40 $generated@@7 ($generated@@11 ($generated@@32 $generated@@119))) ($generated@@34 $generated@@58 ($generated@@40 $generated@@7 ($generated@@11 $generated@@119))))
 :pattern ( ($generated@@40 $generated@@7 ($generated@@11 ($generated@@32 $generated@@119))))
)))
(assert (forall (($generated@@120 Int) ) (! (= ($generated@@43 ($generated@@32 $generated@@120)) ($generated@@34 $generated@@29 ($generated@@43 $generated@@120)))
 :pattern ( ($generated@@43 ($generated@@32 $generated@@120)))
)))
(assert (forall (($generated@@121 T@U) ($generated@@122 T@T) ) (! (= ($generated@@40 $generated@@122 ($generated@@34 $generated@@122 $generated@@121)) ($generated@@34 $generated@@58 ($generated@@40 $generated@@122 $generated@@121)))
 :pattern ( ($generated@@40 $generated@@122 ($generated@@34 $generated@@122 $generated@@121)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@123 () T@U)
(declare-fun $generated@@124 () Int)
(declare-fun $generated@@125 () Int)
(declare-fun $generated@@126 () Int)
(declare-fun $generated@@127 () T@U)
(declare-fun $generated@@128 () T@U)
(declare-fun $generated@@129 () T@U)
(declare-fun $generated@@130 (T@U) Bool)
(declare-fun $generated@@131 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 5) (let (($generated@@132 true))
(let (($generated@@133  (=> (= $generated@@123 ($generated@@43 $generated@@124)) (=> (and (<= ($generated@@32 0) $generated@@124) (<= ($generated@@32 0) $generated@@125)) (=> (and (and (= $generated@@126 $generated@@124) ($generated@@28 $generated@@7 ($generated@@11 $generated@@126) $generated@@22)) (and (= $generated@@125 $generated@@126) (= (ControlFlow 0 2) (- 0 1)))) (<= ($generated@@32 0) (- $generated@@125 10)))))))
(let (($generated@@134  (=> (= $generated@@127 ($generated@@56 $generated@@128 $generated@@129 $generated false)) (and (=> (= (ControlFlow 0 4) 2) $generated@@133) (=> (= (ControlFlow 0 4) 3) $generated@@132)))))
(let (($generated@@135  (=> (and ($generated@@112 $generated@@129) ($generated@@130 $generated@@129)) (=> (and (and (and ($generated@@28 $generated@@29 $generated@@123 $generated@@30) ($generated@@21 $generated@@29 $generated@@123 $generated@@30 $generated@@129)) ($generated@@25 $generated@@123)) (and (= 1 $generated@@131) (= (ControlFlow 0 5) 4))) $generated@@134))))
$generated@@135)))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
