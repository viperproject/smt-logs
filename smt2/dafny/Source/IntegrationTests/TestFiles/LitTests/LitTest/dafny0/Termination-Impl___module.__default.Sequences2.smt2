(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 (Bool) T@U)
(declare-fun $generated@@6 (T@U) Bool)
(declare-fun $generated@@7 (Int) T@U)
(declare-fun $generated@@8 (T@U) Int)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@17 (T@U) Int)
(declare-fun $generated@@18 () T@U)
(declare-fun $generated@@19 (T@U T@U) Bool)
(declare-fun $generated@@20 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@21 () T@T)
(declare-fun $generated@@22 () T@T)
(declare-fun $generated@@23 () T@T)
(declare-fun $generated@@24 (T@T T@T) T@T)
(declare-fun $generated@@25 (T@T T@U) T@U)
(declare-fun $generated@@26 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@27 (T@T) T@T)
(declare-fun $generated@@28 (T@T) T@T)
(declare-fun $generated@@49 (T@U Int) T@U)
(declare-fun $generated@@50 (T@U Int) T@U)
(declare-fun $generated@@54 (T@T T@U) T@U)
(declare-fun $generated@@57 (T@U) Int)
(declare-fun $generated@@60 (T@U T@U T@U) Bool)
(declare-fun $generated@@61 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@80 (T@U T@U) Bool)
(declare-fun $generated@@81 (T@T T@U T@U) Bool)
(declare-fun $generated@@86 () T@T)
(declare-fun $generated@@87 (T@U) T@U)
(declare-fun $generated@@92 (T@U) T@U)
(declare-fun $generated@@94 (T@U) T@U)
(declare-fun $generated@@98 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@99 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@100 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@134 (T@U T@U Int) Bool)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (forall (($generated@@11 Bool) ) (! (= ($generated@@6 ($generated@@5 $generated@@11)) $generated@@11)
 :pattern ( ($generated@@5 $generated@@11))
))) (forall (($generated@@12 T@U) ) (! (= ($generated@@5 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 Int) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))))
(assert (distinct $generated $generated@@0)
)
(assert (= ($generated@@17 $generated@@18) 0))
(assert  (and (and (and (and (and (and (and (forall (($generated@@29 T@T) ($generated@@30 T@T) ($generated@@31 T@U) ($generated@@32 T@U) ($generated@@33 T@U) ) (! (= ($generated@@20 $generated@@29 $generated@@30 ($generated@@26 $generated@@29 $generated@@30 $generated@@32 $generated@@33 $generated@@31) $generated@@33) $generated@@31)
 :weight 0
)) (forall (($generated@@34 T@T) ($generated@@35 T@T) ($generated@@36 T@U) ($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (!  (or (= $generated@@38 $generated@@39) (= ($generated@@20 $generated@@34 $generated@@35 ($generated@@26 $generated@@34 $generated@@35 $generated@@37 $generated@@38 $generated@@36) $generated@@39) ($generated@@20 $generated@@34 $generated@@35 $generated@@37 $generated@@39)))
 :weight 0
))) (= ($generated@@1 $generated@@21) 3)) (= ($generated@@1 $generated@@22) 4)) (= ($generated@@1 $generated@@23) 5)) (forall (($generated@@40 T@T) ($generated@@41 T@T) ) (= ($generated@@1 ($generated@@24 $generated@@40 $generated@@41)) 6))) (forall (($generated@@42 T@T) ($generated@@43 T@T) ) (! (= ($generated@@27 ($generated@@24 $generated@@42 $generated@@43)) $generated@@42)
 :pattern ( ($generated@@24 $generated@@42 $generated@@43))
))) (forall (($generated@@44 T@T) ($generated@@45 T@T) ) (! (= ($generated@@28 ($generated@@24 $generated@@44 $generated@@45)) $generated@@45)
 :pattern ( ($generated@@24 $generated@@44 $generated@@45))
))))
(assert (forall (($generated@@46 T@U) ($generated@@47 T@U) ) (!  (=> ($generated@@19 $generated@@46 $generated@@47) (forall (($generated@@48 T@U) ) (!  (=> ($generated@@6 ($generated@@25 $generated@@2 ($generated@@20 $generated@@21 $generated@@22 ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@46 $generated@@48) $generated@@0))) ($generated@@6 ($generated@@25 $generated@@2 ($generated@@20 $generated@@21 $generated@@22 ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@47 $generated@@48) $generated@@0))))
 :pattern ( ($generated@@20 $generated@@21 $generated@@22 ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@47 $generated@@48) $generated@@0))
)))
 :pattern ( ($generated@@19 $generated@@46 $generated@@47))
)))
(assert (forall (($generated@@51 T@U) ($generated@@52 Int) ($generated@@53 Int) ) (!  (=> (and (and (<= 0 $generated@@53) (< $generated@@53 $generated@@52)) (< $generated@@53 ($generated@@17 $generated@@51))) (= ($generated@@49 ($generated@@50 $generated@@51 $generated@@52) $generated@@53) ($generated@@49 $generated@@51 $generated@@53)))
 :weight 25
 :pattern ( ($generated@@49 ($generated@@50 $generated@@51 $generated@@52) $generated@@53))
 :pattern ( ($generated@@49 $generated@@51 $generated@@53) ($generated@@50 $generated@@51 $generated@@52))
)))
(assert (forall (($generated@@55 T@U) ($generated@@56 T@T) ) (! (= ($generated@@54 $generated@@56 ($generated@@25 $generated@@56 $generated@@55)) $generated@@55)
 :pattern ( ($generated@@25 $generated@@56 $generated@@55))
)))
(assert (forall (($generated@@58 T@U) ($generated@@59 Int) ) (!  (=> (and (<= 0 $generated@@59) (< $generated@@59 ($generated@@17 $generated@@58))) (< ($generated@@57 ($generated@@50 $generated@@58 $generated@@59)) ($generated@@57 $generated@@58)))
 :pattern ( ($generated@@57 ($generated@@50 $generated@@58 $generated@@59)))
)))
(assert (forall (($generated@@62 T@U) ($generated@@63 T@U) ($generated@@64 T@U) ($generated@@65 T@T) ) (! (= ($generated@@60 ($generated@@54 $generated@@65 $generated@@62) $generated@@63 $generated@@64) ($generated@@61 $generated@@65 $generated@@62 $generated@@63 $generated@@64))
 :pattern ( ($generated@@60 ($generated@@54 $generated@@65 $generated@@62) $generated@@63 $generated@@64))
)))
(assert (forall (($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@U) ) (!  (=> ($generated@@19 $generated@@66 $generated@@67) (=> ($generated@@60 $generated@@68 $generated@@69 $generated@@66) ($generated@@60 $generated@@68 $generated@@69 $generated@@67)))
 :pattern ( ($generated@@19 $generated@@66 $generated@@67) ($generated@@60 $generated@@68 $generated@@69 $generated@@66))
)))
(assert (forall (($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@T) ) (!  (=> ($generated@@19 $generated@@70 $generated@@71) (=> ($generated@@61 $generated@@74 $generated@@72 $generated@@73 $generated@@70) ($generated@@61 $generated@@74 $generated@@72 $generated@@73 $generated@@71)))
 :pattern ( ($generated@@19 $generated@@70 $generated@@71) ($generated@@61 $generated@@74 $generated@@72 $generated@@73 $generated@@70))
)))
(assert (forall (($generated@@75 T@U) ($generated@@76 Int) ) (!  (=> (and (<= 0 $generated@@76) (<= $generated@@76 ($generated@@17 $generated@@75))) (= ($generated@@17 ($generated@@50 $generated@@75 $generated@@76)) $generated@@76))
 :pattern ( ($generated@@17 ($generated@@50 $generated@@75 $generated@@76)))
)))
(assert (forall (($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ) (!  (=> (or (not (= $generated@@77 $generated@@79)) (not true)) (=> (and ($generated@@19 $generated@@77 $generated@@78) ($generated@@19 $generated@@78 $generated@@79)) ($generated@@19 $generated@@77 $generated@@79)))
 :pattern ( ($generated@@19 $generated@@77 $generated@@78) ($generated@@19 $generated@@78 $generated@@79))
)))
(assert (forall (($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@T) ) (! (= ($generated@@80 ($generated@@54 $generated@@84 $generated@@82) $generated@@83) ($generated@@81 $generated@@84 $generated@@82 $generated@@83))
 :pattern ( ($generated@@80 ($generated@@54 $generated@@84 $generated@@82) $generated@@83))
)))
(assert (forall (($generated@@85 T@U) ) (! (<= 0 ($generated@@17 $generated@@85))
 :pattern ( ($generated@@17 $generated@@85))
)))
(assert (= ($generated@@1 $generated@@86) 7))
(assert (forall (($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ) (! (= ($generated@@61 $generated@@86 $generated@@88 ($generated@@87 $generated@@89) $generated@@90) (forall (($generated@@91 Int) ) (!  (=> (and (<= 0 $generated@@91) (< $generated@@91 ($generated@@17 $generated@@88))) ($generated@@60 ($generated@@49 $generated@@88 $generated@@91) $generated@@89 $generated@@90))
 :pattern ( ($generated@@49 $generated@@88 $generated@@91))
)))
 :pattern ( ($generated@@61 $generated@@86 $generated@@88 ($generated@@87 $generated@@89) $generated@@90))
)))
(assert (forall (($generated@@93 T@U) ) (! (= ($generated@@92 ($generated@@87 $generated@@93)) $generated@@93)
 :pattern ( ($generated@@87 $generated@@93))
)))
(assert (forall (($generated@@95 T@U) ) (! (= ($generated@@94 ($generated@@87 $generated@@95)) $generated)
 :pattern ( ($generated@@87 $generated@@95))
)))
(assert (forall (($generated@@96 T@U) ($generated@@97 T@T) ) (! (= ($generated@@25 $generated@@97 ($generated@@54 $generated@@97 $generated@@96)) $generated@@96)
 :pattern ( ($generated@@54 $generated@@97 $generated@@96))
)))
(assert  (and (forall (($generated@@101 T@T) ($generated@@102 T@T) ($generated@@103 T@T) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ) (! (= ($generated@@98 $generated@@101 $generated@@102 $generated@@103 ($generated@@100 $generated@@101 $generated@@102 $generated@@103 $generated@@105 $generated@@106 $generated@@107 $generated@@104) $generated@@106 $generated@@107) $generated@@104)
 :weight 0
)) (and (forall (($generated@@108 T@T) ($generated@@109 T@T) ($generated@@110 T@T) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ) (!  (or (= $generated@@113 $generated@@115) (= ($generated@@98 $generated@@108 $generated@@109 $generated@@110 ($generated@@100 $generated@@108 $generated@@109 $generated@@110 $generated@@112 $generated@@113 $generated@@114 $generated@@111) $generated@@115 $generated@@116) ($generated@@98 $generated@@108 $generated@@109 $generated@@110 $generated@@112 $generated@@115 $generated@@116)))
 :weight 0
)) (forall (($generated@@117 T@T) ($generated@@118 T@T) ($generated@@119 T@T) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ) (!  (or (= $generated@@123 $generated@@125) (= ($generated@@98 $generated@@117 $generated@@118 $generated@@119 ($generated@@100 $generated@@117 $generated@@118 $generated@@119 $generated@@121 $generated@@122 $generated@@123 $generated@@120) $generated@@124 $generated@@125) ($generated@@98 $generated@@117 $generated@@118 $generated@@119 $generated@@121 $generated@@124 $generated@@125)))
 :weight 0
)))))
(assert (forall (($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 Bool) ($generated@@130 T@U) ($generated@@131 T@U) ) (! (= ($generated@@6 ($generated@@98 $generated@@23 $generated@@21 $generated@@2 ($generated@@99 $generated@@126 $generated@@127 $generated@@128 $generated@@129) $generated@@130 $generated@@131))  (=> (and (or (not (= $generated@@130 $generated@@126)) (not true)) ($generated@@6 ($generated@@25 $generated@@2 ($generated@@20 $generated@@21 $generated@@22 ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@127 $generated@@130) $generated@@128)))) $generated@@129))
 :pattern ( ($generated@@98 $generated@@23 $generated@@21 $generated@@2 ($generated@@99 $generated@@126 $generated@@127 $generated@@128 $generated@@129) $generated@@130 $generated@@131))
)))
(assert (forall (($generated@@132 T@U) ($generated@@133 T@U) ) (!  (=> ($generated@@80 $generated@@132 ($generated@@87 $generated@@133)) (and (= ($generated@@54 $generated@@86 ($generated@@25 $generated@@86 $generated@@132)) $generated@@132) ($generated@@81 $generated@@86 ($generated@@25 $generated@@86 $generated@@132) ($generated@@87 $generated@@133))))
 :pattern ( ($generated@@80 $generated@@132 ($generated@@87 $generated@@133)))
)))
(assert (forall (($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 Int) ) (! (= ($generated@@134 $generated@@135 $generated@@136 $generated@@137) (forall (($generated@@138 Int) ) (!  (=> (and (<= 0 $generated@@138) (< $generated@@138 $generated@@137)) (= ($generated@@49 $generated@@135 $generated@@138) ($generated@@49 $generated@@136 $generated@@138)))
 :pattern ( ($generated@@49 $generated@@135 $generated@@138))
 :pattern ( ($generated@@49 $generated@@136 $generated@@138))
)))
 :pattern ( ($generated@@134 $generated@@135 $generated@@136 $generated@@137))
)))
(assert (forall (($generated@@139 T@U) ) (!  (=> (= ($generated@@17 $generated@@139) 0) (= $generated@@139 $generated@@18))
 :pattern ( ($generated@@17 $generated@@139))
)))
(assert (forall (($generated@@140 T@U) ($generated@@141 Int) ) (!  (=> (= $generated@@141 0) (= ($generated@@50 $generated@@140 $generated@@141) $generated@@18))
 :pattern ( ($generated@@50 $generated@@140 $generated@@141))
)))
(assert (forall (($generated@@142 T@U) ($generated@@143 T@U) ) (! (= ($generated@@81 $generated@@86 $generated@@142 ($generated@@87 $generated@@143)) (forall (($generated@@144 Int) ) (!  (=> (and (<= 0 $generated@@144) (< $generated@@144 ($generated@@17 $generated@@142))) ($generated@@80 ($generated@@49 $generated@@142 $generated@@144) $generated@@143))
 :pattern ( ($generated@@49 $generated@@142 $generated@@144))
)))
 :pattern ( ($generated@@81 $generated@@86 $generated@@142 ($generated@@87 $generated@@143)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@145 () T@U)
(declare-fun $generated@@146 () T@U)
(declare-fun $generated@@147 () Bool)
(declare-fun $generated@@148 () T@U)
(declare-fun $generated@@149 () T@U)
(declare-fun $generated@@150 () T@U)
(declare-fun $generated@@151 () T@U)
(declare-fun $generated@@152 () T@U)
(declare-fun $generated@@153 (T@U) Bool)
(declare-fun $generated@@154 (T@U) Bool)
(declare-fun $generated@@155 () T@U)
(declare-fun $generated@@156 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 11) (let (($generated@@157  (=> (and (< ($generated@@17 $generated@@18) ($generated@@17 $generated@@145)) ($generated@@134 $generated@@18 $generated@@145 ($generated@@17 $generated@@18))) (and (=> (= (ControlFlow 0 5) (- 0 6)) (and (<= 0 (- ($generated@@17 $generated@@145) 1)) (<= (- ($generated@@17 $generated@@145) 1) ($generated@@17 $generated@@145)))) (=> (and (<= 0 (- ($generated@@17 $generated@@145) 1)) (<= (- ($generated@@17 $generated@@145) 1) ($generated@@17 $generated@@145))) (=> (and (= $generated@@146 ($generated@@50 $generated@@145 (- ($generated@@17 $generated@@145) 1))) (= (ControlFlow 0 5) (- 0 4))) (< ($generated@@57 $generated@@146) ($generated@@57 $generated@@145))))))))
(let (($generated@@158 true))
(let (($generated@@159  (=> $generated@@147 (and (=> (= (ControlFlow 0 7) 3) $generated@@158) (=> (= (ControlFlow 0 7) 5) $generated@@157)))))
(let (($generated@@160 true))
(let (($generated@@161  (and (=> (= (ControlFlow 0 8) 2) $generated@@160) (=> (= (ControlFlow 0 8) 7) $generated@@159))))
(let (($generated@@162 true))
(let (($generated@@163  (=> (and (and (and ($generated@@81 $generated@@86 $generated@@145 ($generated@@87 $generated@@148)) ($generated@@61 $generated@@86 $generated@@145 ($generated@@87 $generated@@148) $generated@@149)) (not false)) (and (and (forall (($generated@@164 T@U) ) (!  (=> (and (or (not (= $generated@@164 $generated@@150)) (not true)) ($generated@@6 ($generated@@25 $generated@@2 ($generated@@20 $generated@@21 $generated@@22 ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@149 $generated@@164) $generated@@0)))) (= ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@149 $generated@@164) ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@149 $generated@@164)))
 :pattern ( ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@149 $generated@@164))
)) ($generated@@19 $generated@@149 $generated@@149)) (and (forall (($generated@@165 T@U) ($generated@@166 T@U) ) (!  (=> (and (or (not (= $generated@@165 $generated@@150)) (not true)) ($generated@@6 ($generated@@25 $generated@@2 ($generated@@20 $generated@@21 $generated@@22 ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@149 $generated@@165) $generated@@0)))) (or (= ($generated@@20 $generated@@21 $generated@@22 ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@149 $generated@@165) $generated@@166) ($generated@@20 $generated@@21 $generated@@22 ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@149 $generated@@165) $generated@@166)) ($generated@@6 ($generated@@98 $generated@@23 $generated@@21 $generated@@2 $generated@@151 $generated@@165 $generated@@166))))
 :pattern ( ($generated@@20 $generated@@21 $generated@@22 ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@149 $generated@@165) $generated@@166))
)) (<= ($generated@@57 $generated@@145) ($generated@@57 $generated@@152))))) (and (=> (= (ControlFlow 0 9) 1) $generated@@162) (=> (= (ControlFlow 0 9) 8) $generated@@161)))))
(let (($generated@@167  (=> (and (= $generated@@151 ($generated@@99 $generated@@150 $generated@@149 $generated@@0 false)) (= (ControlFlow 0 10) 9)) $generated@@163)))
(let (($generated@@168  (=> (and (and ($generated@@153 $generated@@149) ($generated@@154 $generated@@149)) (and ($generated@@81 $generated@@86 $generated@@152 ($generated@@87 $generated@@148)) ($generated@@61 $generated@@86 $generated@@152 ($generated@@87 $generated@@148) $generated@@149))) (=> (and (and (and ($generated@@81 $generated@@86 $generated@@155 ($generated@@87 $generated@@148)) ($generated@@61 $generated@@86 $generated@@155 ($generated@@87 $generated@@148) $generated@@149)) true) (and (= 0 $generated@@156) (= (ControlFlow 0 11) 10))) $generated@@167))))
$generated@@168))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
