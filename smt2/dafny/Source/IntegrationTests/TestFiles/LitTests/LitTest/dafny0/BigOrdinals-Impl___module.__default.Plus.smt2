(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U T@U) Bool)
(declare-fun $generated@@0 (T@T) Int)
(declare-fun $generated@@1 () T@T)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 (Bool) T@U)
(declare-fun $generated@@5 (T@U) Bool)
(declare-fun $generated@@6 (Int) T@U)
(declare-fun $generated@@7 (T@U) Int)
(declare-fun $generated@@8 (Real) T@U)
(declare-fun $generated@@9 (T@U) Real)
(declare-fun $generated@@19 (Int) Int)
(declare-fun $generated@@21 (T@T T@U) T@U)
(declare-fun $generated@@24 (T@T T@U) T@U)
(declare-fun $generated@@25 (T@T T@U) T@U)
(declare-fun $generated@@28 (Int) T@U)
(declare-fun $generated@@29 (T@U) Bool)
(declare-fun $generated@@30 (T@U) Int)
(declare-fun $generated@@32 (T@U T@U) T@U)
(declare-fun $generated@@44 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@45 () T@T)
(declare-fun $generated@@46 () T@T)
(declare-fun $generated@@47 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@48 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 (T@T T@T) T@T)
(declare-fun $generated@@51 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@52 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@53 (T@T) T@T)
(declare-fun $generated@@54 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@0 $generated@@1) 0) (= ($generated@@0 $generated@@2) 1)) (= ($generated@@0 $generated@@3) 2)) (forall (($generated@@10 Bool) ) (! (= ($generated@@5 ($generated@@4 $generated@@10)) $generated@@10)
 :pattern ( ($generated@@4 $generated@@10))
))) (forall (($generated@@11 T@U) ) (! (= ($generated@@4 ($generated@@5 $generated@@11)) $generated@@11)
 :pattern ( ($generated@@5 $generated@@11))
))) (forall (($generated@@12 Int) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Real) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))))
(assert (forall (($generated@@16 T@U) ($generated@@17 T@U) ($generated@@18 T@U) ) (!  (=> (and ($generated $generated@@16 $generated@@17) ($generated $generated@@17 $generated@@18)) ($generated $generated@@16 $generated@@18))
 :pattern ( ($generated $generated@@16 $generated@@17) ($generated $generated@@17 $generated@@18))
 :pattern ( ($generated $generated@@16 $generated@@17) ($generated $generated@@16 $generated@@18))
)))
(assert (forall (($generated@@20 Int) ) (! (= ($generated@@19 $generated@@20) $generated@@20)
 :pattern ( ($generated@@19 $generated@@20))
)))
(assert (forall (($generated@@22 T@U) ($generated@@23 T@T) ) (! (= ($generated@@21 $generated@@23 $generated@@22) $generated@@22)
 :pattern ( ($generated@@21 $generated@@23 $generated@@22))
)))
(assert (forall (($generated@@26 T@U) ($generated@@27 T@T) ) (! (= ($generated@@25 $generated@@27 ($generated@@24 $generated@@27 $generated@@26)) $generated@@26)
 :pattern ( ($generated@@24 $generated@@27 $generated@@26))
)))
(assert (forall (($generated@@31 Int) ) (!  (=> (<= 0 $generated@@31) (and ($generated@@29 ($generated@@28 $generated@@31)) (= ($generated@@30 ($generated@@28 $generated@@31)) $generated@@31)))
 :pattern ( ($generated@@28 $generated@@31))
)))
(assert (forall (($generated@@33 T@U) ($generated@@34 T@U) ) (!  (and (or (= $generated@@33 ($generated@@32 $generated@@33 $generated@@34)) ($generated $generated@@33 ($generated@@32 $generated@@33 $generated@@34))) (or (= $generated@@34 ($generated@@32 $generated@@33 $generated@@34)) ($generated $generated@@34 ($generated@@32 $generated@@33 $generated@@34))))
 :pattern ( ($generated@@32 $generated@@33 $generated@@34))
)))
(assert (forall (($generated@@35 T@U) ($generated@@36 T@U) ) (!  (or (or ($generated $generated@@35 $generated@@36) (= $generated@@35 $generated@@36)) ($generated $generated@@36 $generated@@35))
 :pattern ( ($generated $generated@@35 $generated@@36) ($generated $generated@@36 $generated@@35))
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ) (!  (and (=> (= $generated@@37 ($generated@@28 0)) (= ($generated@@32 $generated@@37 $generated@@38) $generated@@38)) (=> (= $generated@@38 ($generated@@28 0)) (= ($generated@@32 $generated@@37 $generated@@38) $generated@@37)))
 :pattern ( ($generated@@32 $generated@@37 $generated@@38))
)))
(assert (forall (($generated@@39 T@U) ) (! (<= 0 ($generated@@30 $generated@@39))
 :pattern ( ($generated@@30 $generated@@39))
)))
(assert (forall (($generated@@40 T@U) ($generated@@41 T@T) ) (! (= ($generated@@24 $generated@@41 ($generated@@25 $generated@@41 $generated@@40)) $generated@@40)
 :pattern ( ($generated@@25 $generated@@41 $generated@@40))
)))
(assert (forall (($generated@@42 T@U) ($generated@@43 T@U) ) (!  (and (and (and (=> ($generated $generated@@42 $generated@@43) (or (not (= $generated@@42 $generated@@43)) (not true))) (=> (and ($generated@@29 $generated@@42) (not ($generated@@29 $generated@@43))) ($generated $generated@@42 $generated@@43))) (=> (and ($generated@@29 $generated@@42) ($generated@@29 $generated@@43)) (= ($generated $generated@@42 $generated@@43) (< ($generated@@30 $generated@@42) ($generated@@30 $generated@@43))))) (=> (and ($generated $generated@@42 $generated@@43) ($generated@@29 $generated@@43)) ($generated@@29 $generated@@42)))
 :pattern ( ($generated $generated@@42 $generated@@43))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@55 T@T) ($generated@@56 T@T) ($generated@@57 T@T) ($generated@@58 T@U) ($generated@@59 T@U) ($generated@@60 T@U) ($generated@@61 T@U) ) (! (= ($generated@@44 $generated@@55 $generated@@56 $generated@@57 ($generated@@51 $generated@@55 $generated@@56 $generated@@57 $generated@@59 $generated@@60 $generated@@61 $generated@@58) $generated@@60 $generated@@61) $generated@@58)
 :weight 0
)) (and (forall (($generated@@62 T@T) ($generated@@63 T@T) ($generated@@64 T@T) ($generated@@65 T@U) ($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ) (!  (or (= $generated@@67 $generated@@69) (= ($generated@@44 $generated@@62 $generated@@63 $generated@@64 ($generated@@51 $generated@@62 $generated@@63 $generated@@64 $generated@@66 $generated@@67 $generated@@68 $generated@@65) $generated@@69 $generated@@70) ($generated@@44 $generated@@62 $generated@@63 $generated@@64 $generated@@66 $generated@@69 $generated@@70)))
 :weight 0
)) (forall (($generated@@71 T@T) ($generated@@72 T@T) ($generated@@73 T@T) ($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ) (!  (or (= $generated@@77 $generated@@79) (= ($generated@@44 $generated@@71 $generated@@72 $generated@@73 ($generated@@51 $generated@@71 $generated@@72 $generated@@73 $generated@@75 $generated@@76 $generated@@77 $generated@@74) $generated@@78 $generated@@79) ($generated@@44 $generated@@71 $generated@@72 $generated@@73 $generated@@75 $generated@@78 $generated@@79)))
 :weight 0
)))) (= ($generated@@0 $generated@@45) 3)) (= ($generated@@0 $generated@@46) 4)) (forall (($generated@@80 T@T) ($generated@@81 T@T) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ) (! (= ($generated@@48 $generated@@80 $generated@@81 ($generated@@52 $generated@@80 $generated@@81 $generated@@83 $generated@@84 $generated@@82) $generated@@84) $generated@@82)
 :weight 0
))) (forall (($generated@@85 T@T) ($generated@@86 T@T) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ) (!  (or (= $generated@@89 $generated@@90) (= ($generated@@48 $generated@@85 $generated@@86 ($generated@@52 $generated@@85 $generated@@86 $generated@@88 $generated@@89 $generated@@87) $generated@@90) ($generated@@48 $generated@@85 $generated@@86 $generated@@88 $generated@@90)))
 :weight 0
))) (= ($generated@@0 $generated@@49) 5)) (forall (($generated@@91 T@T) ($generated@@92 T@T) ) (= ($generated@@0 ($generated@@50 $generated@@91 $generated@@92)) 6))) (forall (($generated@@93 T@T) ($generated@@94 T@T) ) (! (= ($generated@@53 ($generated@@50 $generated@@93 $generated@@94)) $generated@@93)
 :pattern ( ($generated@@50 $generated@@93 $generated@@94))
))) (forall (($generated@@95 T@T) ($generated@@96 T@T) ) (! (= ($generated@@54 ($generated@@50 $generated@@95 $generated@@96)) $generated@@96)
 :pattern ( ($generated@@50 $generated@@95 $generated@@96))
))))
(assert (forall (($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 Bool) ($generated@@101 T@U) ($generated@@102 T@U) ) (! (= ($generated@@5 ($generated@@44 $generated@@45 $generated@@46 $generated@@1 ($generated@@47 $generated@@97 $generated@@98 $generated@@99 $generated@@100) $generated@@101 $generated@@102))  (=> (and (or (not (= $generated@@101 $generated@@97)) (not true)) ($generated@@5 ($generated@@24 $generated@@1 ($generated@@48 $generated@@46 $generated@@49 ($generated@@48 $generated@@45 ($generated@@50 $generated@@46 $generated@@49) $generated@@98 $generated@@101) $generated@@99)))) $generated@@100))
 :pattern ( ($generated@@44 $generated@@45 $generated@@46 $generated@@1 ($generated@@47 $generated@@97 $generated@@98 $generated@@99 $generated@@100) $generated@@101 $generated@@102))
)))
(assert (forall (($generated@@103 T@U) ($generated@@104 Int) ($generated@@105 Int) ) (!  (=> (and (<= 0 $generated@@104) (<= 0 $generated@@105)) (= ($generated@@32 ($generated@@32 $generated@@103 ($generated@@28 $generated@@104)) ($generated@@28 $generated@@105)) ($generated@@32 $generated@@103 ($generated@@28 (+ $generated@@104 $generated@@105)))))
 :pattern ( ($generated@@32 ($generated@@32 $generated@@103 ($generated@@28 $generated@@104)) ($generated@@28 $generated@@105)))
)))
(assert (forall (($generated@@106 T@U) ) (!  (=> ($generated@@29 $generated@@106) (= $generated@@106 ($generated@@28 ($generated@@30 $generated@@106))))
 :pattern ( ($generated@@30 $generated@@106))
 :pattern ( ($generated@@29 $generated@@106))
)))
(assert (forall (($generated@@107 T@U) ($generated@@108 T@U) ) (!  (and (=> ($generated@@29 ($generated@@32 $generated@@107 $generated@@108)) (and ($generated@@29 $generated@@107) ($generated@@29 $generated@@108))) (=> ($generated@@29 $generated@@108) (and (= ($generated@@29 ($generated@@32 $generated@@107 $generated@@108)) ($generated@@29 $generated@@107)) (= ($generated@@30 ($generated@@32 $generated@@107 $generated@@108)) (+ ($generated@@30 $generated@@107) ($generated@@30 $generated@@108))))))
 :pattern ( ($generated@@32 $generated@@107 $generated@@108))
)))
(assert (forall (($generated@@109 Int) ) (! (= ($generated@@25 $generated@@2 ($generated@@6 ($generated@@19 $generated@@109))) ($generated@@21 $generated@@49 ($generated@@25 $generated@@2 ($generated@@6 $generated@@109))))
 :pattern ( ($generated@@25 $generated@@2 ($generated@@6 ($generated@@19 $generated@@109))))
)))
(assert (forall (($generated@@110 T@U) ($generated@@111 T@T) ) (! (= ($generated@@25 $generated@@111 ($generated@@21 $generated@@111 $generated@@110)) ($generated@@21 $generated@@49 ($generated@@25 $generated@@111 $generated@@110)))
 :pattern ( ($generated@@25 $generated@@111 ($generated@@21 $generated@@111 $generated@@110)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@112 () T@U)
(declare-fun $generated@@113 () Int)
(declare-fun $generated@@114 () T@U)
(declare-fun $generated@@115 () T@U)
(declare-fun $generated@@116 () T@U)
(declare-fun $generated@@117 () T@U)
(declare-fun $generated@@118 () T@U)
(declare-fun $generated@@119 () T@U)
(declare-fun $generated@@120 () T@U)
(declare-fun $generated@@121 () T@U)
(declare-fun $generated@@122 () T@U)
(declare-fun $generated@@123 () T@U)
(declare-fun $generated@@124 (T@U) Bool)
(declare-fun $generated@@125 (T@U) Bool)
(declare-fun $generated@@126 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 34) (let (($generated@@127  (=> (and (and (and (not ($generated@@5 ($generated@@21 $generated@@1 ($generated@@4 true)))) (or (not (= $generated@@112 ($generated@@28 $generated@@113))) (not true))) (not ($generated@@5 ($generated@@21 $generated@@1 ($generated@@4 true))))) (= (ControlFlow 0 29) (- 0 28))) false)))
(let (($generated@@128  (=> (= (ControlFlow 0 27) (- 0 26)) (or (= $generated@@114 $generated@@115) ($generated $generated@@114 $generated@@115)))))
(let (($generated@@129  (and (=> (= (ControlFlow 0 24) (- 0 25)) (<= 0 $generated@@113)) (=> (<= 0 $generated@@113) (=> (and (= $generated@@112 ($generated@@28 $generated@@113)) (= (ControlFlow 0 24) (- 0 23))) (or (= $generated@@112 $generated@@115) ($generated $generated@@112 $generated@@115)))))))
(let (($generated@@130  (=> (= (ControlFlow 0 22) (- 0 21)) (or (= $generated@@112 $generated@@115) ($generated $generated@@112 $generated@@115)))))
(let (($generated@@131  (=> (and (= $generated@@114 ($generated@@21 $generated@@49 ($generated@@28 50))) (= $generated@@115 ($generated@@32 $generated@@112 $generated@@114))) (and (and (and (=> (= (ControlFlow 0 30) 22) $generated@@130) (=> (= (ControlFlow 0 30) 24) $generated@@129)) (=> (= (ControlFlow 0 30) 27) $generated@@128)) (=> (= (ControlFlow 0 30) 29) $generated@@127)))))
(let (($generated@@132  (and (=> (= (ControlFlow 0 14) (- 0 15)) (= ($generated@@32 ($generated@@28 0) $generated@@112) $generated@@112)) (=> (= (ControlFlow 0 14) (- 0 13)) (= $generated@@112 ($generated@@32 $generated@@112 ($generated@@28 0)))))))
(let (($generated@@133  (=> (and (or (not (= ($generated@@32 ($generated@@28 0) $generated@@112) $generated@@112)) (not true)) (= (ControlFlow 0 17) 14)) $generated@@132)))
(let (($generated@@134  (=> (and (= ($generated@@32 ($generated@@28 0) $generated@@112) $generated@@112) (= (ControlFlow 0 16) 14)) $generated@@132)))
(let (($generated@@135  (and (=> (= (ControlFlow 0 18) 16) $generated@@134) (=> (= (ControlFlow 0 18) 17) $generated@@133))))
(let (($generated@@136  (and (=> (= (ControlFlow 0 11) (- 0 12)) (or (= $generated@@112 ($generated@@32 ($generated@@28 1) $generated@@112)) ($generated $generated@@112 ($generated@@32 ($generated@@28 1) $generated@@112)))) (=> (or (= $generated@@112 ($generated@@32 ($generated@@28 1) $generated@@112)) ($generated $generated@@112 ($generated@@32 ($generated@@28 1) $generated@@112))) (=> (= (ControlFlow 0 11) (- 0 10)) ($generated $generated@@112 ($generated@@32 ($generated@@28 1) $generated@@112)))))))
(let (($generated@@137  (and (=> (= (ControlFlow 0 19) 11) $generated@@136) (=> (= (ControlFlow 0 19) 18) $generated@@135))))
(let (($generated@@138  (=> (= (ControlFlow 0 9) (- 0 8)) ($generated $generated@@112 ($generated@@32 $generated@@112 ($generated@@28 1))))))
(let (($generated@@139  (and (=> (= (ControlFlow 0 20) 9) $generated@@138) (=> (= (ControlFlow 0 20) 19) $generated@@137))))
(let (($generated@@140  (and (=> (= (ControlFlow 0 31) 30) $generated@@131) (=> (= (ControlFlow 0 31) 20) $generated@@139))))
(let (($generated@@141  (=> (and (= $generated@@116 ($generated@@32 $generated@@112 $generated@@117)) (= (ControlFlow 0 7) (- 0 6))) (or (= $generated@@112 $generated@@116) ($generated $generated@@112 $generated@@116)))))
(let (($generated@@142  (and (=> (= (ControlFlow 0 32) 7) $generated@@141) (=> (= (ControlFlow 0 32) 31) $generated@@140))))
(let (($generated@@143  (=> (and (= $generated@@118 ($generated@@21 $generated@@49 ($generated@@28 100))) (= $generated@@119 ($generated@@21 $generated@@49 ($generated@@28 105)))) (and (=> (= (ControlFlow 0 2) (- 0 5)) (= ($generated@@32 $generated@@118 $generated@@119) ($generated@@21 $generated@@49 ($generated@@28 205)))) (=> (= ($generated@@32 $generated@@118 $generated@@119) ($generated@@21 $generated@@49 ($generated@@28 205))) (and (=> (= (ControlFlow 0 2) (- 0 4)) ($generated $generated@@118 $generated@@119)) (=> ($generated $generated@@118 $generated@@119) (and (=> (= (ControlFlow 0 2) (- 0 3)) (or (= $generated@@118 $generated@@119) ($generated $generated@@118 $generated@@119))) (=> (or (= $generated@@118 $generated@@119) ($generated $generated@@118 $generated@@119)) (=> (= (ControlFlow 0 2) (- 0 1)) ($generated $generated@@119 $generated@@118)))))))))))
(let (($generated@@144  (=> (= $generated@@120 ($generated@@47 $generated@@121 $generated@@122 $generated@@123 false)) (and (=> (= (ControlFlow 0 33) 2) $generated@@143) (=> (= (ControlFlow 0 33) 32) $generated@@142)))))
(let (($generated@@145  (=> (and (and (and ($generated@@124 $generated@@122) ($generated@@125 $generated@@122)) (<= ($generated@@19 0) $generated@@113)) (and (= 0 $generated@@126) (= (ControlFlow 0 34) 33))) $generated@@144)))
$generated@@145))))))))))))))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 11) (- 10))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
