(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun alloc () T@U)
(declare-fun allocName () T@U)
(declare-fun Tagclass._System.array? () T@U)
(declare-fun Tagclass._System.array () T@U)
(declare-fun class._module.AClass? () T@U)
(declare-fun Tagclass._module.AClass? () T@U)
(declare-fun Tagclass._module.AClass () T@U)
(declare-fun tytagFamily$array () T@U)
(declare-fun tytagFamily$AClass () T@U)
(declare-fun field$index () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun FDim (T@U) Int)
(declare-fun Tag (T@U) T@U)
(declare-fun DeclName (T@U) T@U)
(declare-fun _System.array.Length (T@U) Int)
(declare-fun Tclass._System.array? (T@U) T@U)
(declare-fun null () T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun Tclass._System.array (T@U) T@U)
(declare-fun Tclass._module.AClass? () T@U)
(declare-fun Tclass._module.AClass () T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun _module.AClass.index () T@U)
(declare-fun FieldOfDecl (T@U T@U) T@U)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun IndexField (Int) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun DeclType (T@U) T@U)
(declare-fun IndexField_Inverse (T@U) Int)
(declare-fun Tclass._System.array?_0 (T@U) T@U)
(declare-fun Tclass._System.array_0 (T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#22| (T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt alloc allocName Tagclass._System.array? Tagclass._System.array class._module.AClass? Tagclass._module.AClass? Tagclass._module.AClass tytagFamily$array tytagFamily$AClass field$index)
)
(assert (= (FDim alloc) 0))
(assert (= (Tag TInt) TagInt))
(assert (= (DeclName alloc) allocName))
(assert (forall ((_System.array$arg T@U) ($o T@U) ) (!  (=> (and (or (not (= $o null)) (not true)) (= (dtype $o) (Tclass._System.array? _System.array$arg))) ($Is intType (int_2_U (_System.array.Length $o)) TInt))
 :pattern ( (_System.array.Length $o) (Tclass._System.array? _System.array$arg))
)))
(assert (= (Ctor refType) 3))
(assert (forall ((_System.array$arg@@0 T@U) (|c#0| T@U) ($h T@U) ) (! (= ($IsAlloc refType |c#0| (Tclass._System.array _System.array$arg@@0) $h) ($IsAlloc refType |c#0| (Tclass._System.array? _System.array$arg@@0) $h))
 :pattern ( ($IsAlloc refType |c#0| (Tclass._System.array _System.array$arg@@0) $h))
 :pattern ( ($IsAlloc refType |c#0| (Tclass._System.array? _System.array$arg@@0) $h))
)))
(assert (forall (($o@@0 T@U) ) (! (= ($Is refType $o@@0 Tclass._module.AClass?)  (or (= $o@@0 null) (= (dtype $o@@0) Tclass._module.AClass?)))
 :pattern ( ($Is refType $o@@0 Tclass._module.AClass?))
)))
(assert (forall ((|c#0@@0| T@U) ($h@@0 T@U) ) (! (= ($IsAlloc refType |c#0@@0| Tclass._module.AClass $h@@0) ($IsAlloc refType |c#0@@0| Tclass._module.AClass? $h@@0))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass._module.AClass $h@@0))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass._module.AClass? $h@@0))
)))
(assert  (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 4)) (= (Ctor BoxType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 6))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((_System.array$arg@@1 T@U) ($o@@1 T@U) ($h@@1 T@U) ) (! (= ($IsAlloc refType $o@@1 (Tclass._System.array? _System.array$arg@@1) $h@@1)  (or (= $o@@1 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@1 $o@@1) alloc)))))
 :pattern ( ($IsAlloc refType $o@@1 (Tclass._System.array? _System.array$arg@@1) $h@@1))
)))
(assert (= (FDim _module.AClass.index) 0))
(assert (= (FieldOfDecl class._module.AClass? field$index) _module.AClass.index))
(assert  (not ($IsGhostField _module.AClass.index)))
(assert (forall (($o@@2 T@U) ($h@@2 T@U) ) (! (= ($IsAlloc refType $o@@2 Tclass._module.AClass? $h@@2)  (or (= $o@@2 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o@@2) alloc)))))
 :pattern ( ($IsAlloc refType $o@@2 Tclass._module.AClass? $h@@2))
)))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((_System.array$arg@@2 T@U) ($h@@3 T@U) ($o@@3 T@U) ($i0 Int) ) (!  (=> (and (and (and ($IsGoodHeap $h@@3) (and (or (not (= $o@@3 null)) (not true)) (= (dtype $o@@3) (Tclass._System.array? _System.array$arg@@2)))) (and (<= 0 $i0) (< $i0 (_System.array.Length $o@@3)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@3 $o@@3) alloc)))) ($IsAllocBox (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@3 $o@@3) (IndexField $i0)) _System.array$arg@@2 $h@@3))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@3 $o@@3) (IndexField $i0)) (Tclass._System.array? _System.array$arg@@2))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert ($IsGhostField alloc))
(assert (forall (($h@@4 T@U) ($o@@4 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@4) (and (or (not (= $o@@4 null)) (not true)) (= (dtype $o@@4) Tclass._module.AClass?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@4 $o@@4) alloc)))) ($IsAlloc intType ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@4 $o@@4) _module.AClass.index)) TInt $h@@4))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@4 $o@@4) _module.AClass.index)))
)))
(assert (forall ((_System.array$arg@@3 T@U) (|c#0@@1| T@U) ) (! (= ($Is refType |c#0@@1| (Tclass._System.array _System.array$arg@@3))  (and ($Is refType |c#0@@1| (Tclass._System.array? _System.array$arg@@3)) (or (not (= |c#0@@1| null)) (not true))))
 :pattern ( ($Is refType |c#0@@1| (Tclass._System.array _System.array$arg@@3)))
 :pattern ( ($Is refType |c#0@@1| (Tclass._System.array? _System.array$arg@@3)))
)))
(assert (forall ((v T@U) (t T@U) (h@@0 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v) t h@@0) ($IsAlloc T@@1 v t h@@0))
 :pattern ( ($IsAllocBox ($Box T@@1 v) t h@@0))
)))
(assert (forall ((h@@1 T@U) (k@@0 T@U) (bx T@U) (t@@0 T@U) ) (!  (=> ($HeapSucc h@@1 k@@0) (=> ($IsAllocBox bx t@@0 h@@1) ($IsAllocBox bx t@@0 k@@0)))
 :pattern ( ($HeapSucc h@@1 k@@0) ($IsAllocBox bx t@@0 h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@1 T@U) (v@@0 T@U) (t@@1 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@2 k@@1) (=> ($IsAlloc T@@2 v@@0 t@@1 h@@2) ($IsAlloc T@@2 v@@0 t@@1 k@@1)))
 :pattern ( ($HeapSucc h@@2 k@@1) ($IsAlloc T@@2 v@@0 t@@1 h@@2))
)))
(assert (forall ((_System.array$arg@@4 T@U) ) (!  (and (= (Tag (Tclass._System.array? _System.array$arg@@4)) Tagclass._System.array?) (= (TagFamily (Tclass._System.array? _System.array$arg@@4)) tytagFamily$array))
 :pattern ( (Tclass._System.array? _System.array$arg@@4))
)))
(assert (forall ((_System.array$arg@@5 T@U) ) (!  (and (= (Tag (Tclass._System.array _System.array$arg@@5)) Tagclass._System.array) (= (TagFamily (Tclass._System.array _System.array$arg@@5)) tytagFamily$array))
 :pattern ( (Tclass._System.array _System.array$arg@@5))
)))
(assert (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 Tclass._module.AClass?) (and (= ($Box refType ($Unbox refType bx@@0)) bx@@0) ($Is refType ($Unbox refType bx@@0) Tclass._module.AClass?)))
 :pattern ( ($IsBox bx@@0 Tclass._module.AClass?))
)))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 Tclass._module.AClass) (and (= ($Box refType ($Unbox refType bx@@1)) bx@@1) ($Is refType ($Unbox refType bx@@1) Tclass._module.AClass)))
 :pattern ( ($IsBox bx@@1 Tclass._module.AClass))
)))
(assert (forall ((_System.array$arg@@6 T@U) ($o@@5 T@U) ) (! (= ($Is refType $o@@5 (Tclass._System.array? _System.array$arg@@6))  (or (= $o@@5 null) (= (dtype $o@@5) (Tclass._System.array? _System.array$arg@@6))))
 :pattern ( ($Is refType $o@@5 (Tclass._System.array? _System.array$arg@@6)))
)))
(assert (forall ((|c#0@@2| T@U) ) (! (= ($Is refType |c#0@@2| Tclass._module.AClass)  (and ($Is refType |c#0@@2| Tclass._module.AClass?) (or (not (= |c#0@@2| null)) (not true))))
 :pattern ( ($Is refType |c#0@@2| Tclass._module.AClass))
 :pattern ( ($Is refType |c#0@@2| Tclass._module.AClass?))
)))
(assert (forall ((a T@U) (b T@U) (c T@U) ) (!  (=> (or (not (= a c)) (not true)) (=> (and ($HeapSucc a b) ($HeapSucc b c)) ($HeapSucc a c)))
 :pattern ( ($HeapSucc a b) ($HeapSucc b c))
)))
(assert (forall ((cl T@U) (nm T@U) ) (!  (and (= (DeclType (FieldOfDecl cl nm)) cl) (= (DeclName (FieldOfDecl cl nm)) nm))
 :pattern ( (FieldOfDecl cl nm))
)))
(assert (forall ((bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 TInt) (and (= ($Box intType ($Unbox intType bx@@2)) bx@@2) ($Is intType ($Unbox intType bx@@2) TInt)))
 :pattern ( ($IsBox bx@@2 TInt))
)))
(assert (forall ((v@@1 T@U) (t@@2 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@1) t@@2) ($Is T@@3 v@@1 t@@2))
 :pattern ( ($IsBox ($Box T@@3 v@@1) t@@2))
)))
(assert (forall ((o@@0 T@U) ) (! (<= 0 (_System.array.Length o@@0))
 :pattern ( (_System.array.Length o@@0))
)))
(assert (forall ((i Int) ) (! (= (FDim (IndexField i)) 1)
 :pattern ( (IndexField i))
)))
(assert (forall ((i@@0 Int) ) (! (= (IndexField_Inverse (IndexField i@@0)) i@@0)
 :pattern ( (IndexField i@@0))
)))
(assert (forall ((_System.array$arg@@7 T@U) ) (! (= (Tclass._System.array?_0 (Tclass._System.array? _System.array$arg@@7)) _System.array$arg@@7)
 :pattern ( (Tclass._System.array? _System.array$arg@@7))
)))
(assert (forall ((_System.array$arg@@8 T@U) ) (! (= (Tclass._System.array_0 (Tclass._System.array _System.array$arg@@8)) _System.array$arg@@8)
 :pattern ( (Tclass._System.array _System.array$arg@@8))
)))
(assert (forall ((x@@5 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@5)) x@@5)
 :pattern ( ($Box T@@4 x@@5))
)))
(assert (forall ((_System.array$arg@@9 T@U) ($h@@5 T@U) ($o@@6 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@5) (and (or (not (= $o@@6 null)) (not true)) (= (dtype $o@@6) (Tclass._System.array? _System.array$arg@@9)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@5 $o@@6) alloc)))) ($IsAlloc intType (int_2_U (_System.array.Length $o@@6)) TInt $h@@5))
 :pattern ( (_System.array.Length $o@@6) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@5 $o@@6) alloc)) (Tclass._System.array? _System.array$arg@@9))
)))
(assert (forall ((_System.array$arg@@10 T@U) ($h@@6 T@U) ($o@@7 T@U) ($i0@@0 Int) ) (!  (=> (and (and ($IsGoodHeap $h@@6) (and (or (not (= $o@@7 null)) (not true)) (= (dtype $o@@7) (Tclass._System.array? _System.array$arg@@10)))) (and (<= 0 $i0@@0) (< $i0@@0 (_System.array.Length $o@@7)))) ($IsBox (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@6 $o@@7) (IndexField $i0@@0)) _System.array$arg@@10))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@6 $o@@7) (IndexField $i0@@0)) (Tclass._System.array? _System.array$arg@@10))
)))
(assert (forall (($h@@7 T@U) ($o@@8 T@U) ) (!  (=> (and ($IsGoodHeap $h@@7) (and (or (not (= $o@@8 null)) (not true)) (= (dtype $o@@8) Tclass._module.AClass?))) ($Is intType ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@7 $o@@8) _module.AClass.index)) TInt))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@7 $o@@8) _module.AClass.index)))
)))
(assert (forall ((_System.array$arg@@11 T@U) (bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 (Tclass._System.array? _System.array$arg@@11)) (and (= ($Box refType ($Unbox refType bx@@3)) bx@@3) ($Is refType ($Unbox refType bx@@3) (Tclass._System.array? _System.array$arg@@11))))
 :pattern ( ($IsBox bx@@3 (Tclass._System.array? _System.array$arg@@11)))
)))
(assert (forall ((_System.array$arg@@12 T@U) (bx@@4 T@U) ) (!  (=> ($IsBox bx@@4 (Tclass._System.array _System.array$arg@@12)) (and (= ($Box refType ($Unbox refType bx@@4)) bx@@4) ($Is refType ($Unbox refType bx@@4) (Tclass._System.array _System.array$arg@@12))))
 :pattern ( ($IsBox bx@@4 (Tclass._System.array _System.array$arg@@12)))
)))
(assert (forall ((h@@3 T@U) (r T@U) (f T@U) (x@@6 T@U) ) (!  (=> ($IsGoodHeap (MapType0Store refType (MapType0Type FieldType BoxType) h@@3 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@3 r) f x@@6))) ($HeapSucc h@@3 (MapType0Store refType (MapType0Type FieldType BoxType) h@@3 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@3 r) f x@@6))))
 :pattern ( (MapType0Store refType (MapType0Type FieldType BoxType) h@@3 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@3 r) f x@@6)))
)))
(assert (= (Tag Tclass._module.AClass?) Tagclass._module.AClass?))
(assert (= (TagFamily Tclass._module.AClass?) tytagFamily$AClass))
(assert (= (Tag Tclass._module.AClass) Tagclass._module.AClass))
(assert (= (TagFamily Tclass._module.AClass) tytagFamily$AClass))
(assert  (and (forall ((t0@@0 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 t2 (MapType1Store t0@@0 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| T@U) (|l#4| T@U) ($o@@9 T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#22| |l#0| |l#1| |l#2| |l#3| |l#4|) $o@@9 $f))  (=> (and (or (not (= $o@@9 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@9) |l#2|)))) (or (= $o@@9 |l#3|) (= $o@@9 |l#4|))))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#22| |l#0| |l#1| |l#2| |l#3| |l#4|) $o@@9 $f))
)))
(assert (forall ((x@@7 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@7))) (Lit BoxType ($Box intType (int_2_U x@@7))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@7))))
)))
(assert (forall ((x@@8 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@8)) (Lit BoxType ($Box T@@5 x@@8)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@8)))
)))
(assert (forall ((h@@4 T@U) (v@@2 T@U) ) (! ($IsAlloc intType v@@2 TInt h@@4)
 :pattern ( ($IsAlloc intType v@@2 TInt h@@4))
)))
(assert (forall ((v@@3 T@U) ) (! ($Is intType v@@3 TInt)
 :pattern ( ($Is intType v@@3 TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |j#0@0| () Int)
(declare-fun |i#0@0| () Int)
(declare-fun $Heap () T@U)
(declare-fun |a#0| () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun |k#6@0| () Int)
(declare-fun |k#4@0| () Int)
(declare-fun |k#2@0| () Int)
(declare-fun |$w$loop#0@0| () Bool)
(declare-fun |ii#0@1| () Int)
(declare-fun $Heap@3 () T@U)
(declare-fun this () T@U)
(declare-fun |b#0@0| () Bool)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun |ii#0@0| () Int)
(declare-fun $index1@1 () T@U)
(declare-fun |$rhs#0_0@1| () Int)
(declare-fun |$rhs#0_1@1| () Int)
(declare-fun $Heap@2 () T@U)
(declare-fun |$decr$loop#00@1| () Int)
(declare-fun |j#0@1| () Int)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |$rhs#0@0| () Int)
(declare-fun |$rhs#1@0| () Int)
(declare-fun |$decr_init$loop#00@0| () Int)
(declare-fun $FunctionContextHeight () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 100) (let ((anon53_Else_correct true))
(let ((anon30_correct  (=> (and (or (and (and (<= (LitInt 0) |j#0@0|) (< |j#0@0| |i#0@0|)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |a#0|) (IndexField |j#0@0|)))) (LitInt 19))) (and (= |j#0@0| (LitInt (- 0 1))) (exists ((|k#7| Int) ) (!  (and (and (<= |i#0@0| |k#7|) (< |k#7| (_System.array.Length |a#0|))) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |a#0|) (IndexField |k#7|)))) (LitInt 19)))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |a#0|) (IndexField |k#7|))))
)))) (= (ControlFlow 0 38) (- 0 37))) (or (not (= |a#0| null)) (not true)))))
(let ((anon55_Else_correct  (=> (and (not (and (<= |i#0@0| |k#6@0|) (< |k#6@0| (_System.array.Length |a#0|)))) (= (ControlFlow 0 45) 38)) anon30_correct)))
(let ((anon55_Then_correct  (=> (and (<= |i#0@0| |k#6@0|) (< |k#6@0| (_System.array.Length |a#0|))) (and (=> (= (ControlFlow 0 42) (- 0 44)) (or (not (= |a#0| null)) (not true))) (=> (or (not (= |a#0| null)) (not true)) (and (=> (= (ControlFlow 0 42) (- 0 43)) (and (<= 0 |k#6@0|) (< |k#6@0| (_System.array.Length |a#0|)))) (=> (= (ControlFlow 0 42) 38) anon30_correct)))))))
(let ((anon54_Else_correct  (=> (< |k#6@0| |i#0@0|) (and (=> (= (ControlFlow 0 48) 42) anon55_Then_correct) (=> (= (ControlFlow 0 48) 45) anon55_Else_correct)))))
(let ((anon54_Then_correct  (=> (<= |i#0@0| |k#6@0|) (and (=> (= (ControlFlow 0 46) (- 0 47)) (or (not (= |a#0| null)) (not true))) (and (=> (= (ControlFlow 0 46) 42) anon55_Then_correct) (=> (= (ControlFlow 0 46) 45) anon55_Else_correct))))))
(let ((anon53_Then_correct  (and (=> (= (ControlFlow 0 49) 46) anon54_Then_correct) (=> (= (ControlFlow 0 49) 48) anon54_Else_correct))))
(let ((anon52_Then_correct  (=> (= |j#0@0| (LitInt (- 0 1))) (and (=> (= (ControlFlow 0 50) 49) anon53_Then_correct) (=> (= (ControlFlow 0 50) 41) anon53_Else_correct)))))
(let ((anon52_Else_correct  (=> (and (or (not (= |j#0@0| (LitInt (- 0 1)))) (not true)) (= (ControlFlow 0 40) 38)) anon30_correct)))
(let ((anon51_Then_correct  (=> (not (and (and (<= (LitInt 0) |j#0@0|) (< |j#0@0| |i#0@0|)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |a#0|) (IndexField |j#0@0|)))) (LitInt 19)))) (and (=> (= (ControlFlow 0 51) 50) anon52_Then_correct) (=> (= (ControlFlow 0 51) 40) anon52_Else_correct)))))
(let ((anon51_Else_correct  (=> (and (and (and (<= (LitInt 0) |j#0@0|) (< |j#0@0| |i#0@0|)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |a#0|) (IndexField |j#0@0|)))) (LitInt 19))) (= (ControlFlow 0 39) 38)) anon30_correct)))
(let ((anon50_Else_correct  (=> (not (and (<= (LitInt 0) |j#0@0|) (< |j#0@0| |i#0@0|))) (and (=> (= (ControlFlow 0 56) 51) anon51_Then_correct) (=> (= (ControlFlow 0 56) 39) anon51_Else_correct)))))
(let ((anon50_Then_correct  (=> (and (<= (LitInt 0) |j#0@0|) (< |j#0@0| |i#0@0|)) (and (=> (= (ControlFlow 0 52) (- 0 55)) (or (not (= |a#0| null)) (not true))) (=> (or (not (= |a#0| null)) (not true)) (and (=> (= (ControlFlow 0 52) (- 0 54)) ($IsAlloc refType |a#0| (Tclass._System.array? TInt) $Heap)) (=> ($IsAlloc refType |a#0| (Tclass._System.array? TInt) $Heap) (and (=> (= (ControlFlow 0 52) (- 0 53)) (and (<= 0 |j#0@0|) (< |j#0@0| (_System.array.Length |a#0|)))) (and (=> (= (ControlFlow 0 52) 51) anon51_Then_correct) (=> (= (ControlFlow 0 52) 39) anon51_Else_correct))))))))))
(let ((anon49_Else_correct  (=> (< |j#0@0| (LitInt 0)) (and (=> (= (ControlFlow 0 58) 52) anon50_Then_correct) (=> (= (ControlFlow 0 58) 56) anon50_Else_correct)))))
(let ((anon49_Then_correct  (=> (<= (LitInt 0) |j#0@0|) (and (=> (= (ControlFlow 0 57) 52) anon50_Then_correct) (=> (= (ControlFlow 0 57) 56) anon50_Else_correct)))))
(let ((anon18_correct  (=> (forall ((|k#5| Int) ) (!  (=> (and (<= |i#0@0| |k#5|) (< |k#5| (_System.array.Length |a#0|))) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |a#0|) (IndexField |k#5|)))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |a#0|) (IndexField |k#5|))))))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |a#0|) (IndexField |k#5|))))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |a#0|) (IndexField |k#5|))))
)) (and (=> (= (ControlFlow 0 59) 57) anon49_Then_correct) (=> (= (ControlFlow 0 59) 58) anon49_Else_correct)))))
(let ((anon48_Else_correct  (=> (and (not (and (<= |i#0@0| |k#4@0|) (< |k#4@0| (_System.array.Length |a#0|)))) (= (ControlFlow 0 66) 59)) anon18_correct)))
(let ((anon48_Then_correct  (=> (and (<= |i#0@0| |k#4@0|) (< |k#4@0| (_System.array.Length |a#0|))) (and (=> (= (ControlFlow 0 60) (- 0 65)) (or (not (= |a#0| null)) (not true))) (=> (or (not (= |a#0| null)) (not true)) (and (=> (= (ControlFlow 0 60) (- 0 64)) (and (<= 0 |k#4@0|) (< |k#4@0| (_System.array.Length |a#0|)))) (and (=> (= (ControlFlow 0 60) (- 0 63)) (or (not (= |a#0| null)) (not true))) (=> (or (not (= |a#0| null)) (not true)) (and (=> (= (ControlFlow 0 60) (- 0 62)) ($IsAlloc refType |a#0| (Tclass._System.array? TInt) $Heap)) (=> ($IsAlloc refType |a#0| (Tclass._System.array? TInt) $Heap) (and (=> (= (ControlFlow 0 60) (- 0 61)) (and (<= 0 |k#4@0|) (< |k#4@0| (_System.array.Length |a#0|)))) (=> (= (ControlFlow 0 60) 59) anon18_correct))))))))))))
(let ((anon47_Else_correct  (=> (< |k#4@0| |i#0@0|) (and (=> (= (ControlFlow 0 69) 60) anon48_Then_correct) (=> (= (ControlFlow 0 69) 66) anon48_Else_correct)))))
(let ((anon47_Then_correct  (=> (<= |i#0@0| |k#4@0|) (and (=> (= (ControlFlow 0 67) (- 0 68)) (or (not (= |a#0| null)) (not true))) (and (=> (= (ControlFlow 0 67) 60) anon48_Then_correct) (=> (= (ControlFlow 0 67) 66) anon48_Else_correct))))))
(let ((anon46_Then_correct  (and (=> (= (ControlFlow 0 70) 67) anon47_Then_correct) (=> (= (ControlFlow 0 70) 69) anon47_Else_correct))))
(let ((anon46_Else_correct true))
(let ((anon13_correct  (=> (forall ((|k#3| Int) ) (!  (=> (and (<= (LitInt 0) |k#3|) (< |k#3| |i#0@0|)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |a#0|) (IndexField |k#3|)))) (LitInt 21)))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |a#0|) (IndexField |k#3|))))
)) (and (=> (= (ControlFlow 0 71) 70) anon46_Then_correct) (=> (= (ControlFlow 0 71) 36) anon46_Else_correct)))))
(let ((anon45_Else_correct  (=> (and (not (and (<= (LitInt 0) |k#2@0|) (< |k#2@0| |i#0@0|))) (= (ControlFlow 0 75) 71)) anon13_correct)))
(let ((anon45_Then_correct  (=> (and (<= (LitInt 0) |k#2@0|) (< |k#2@0| |i#0@0|)) (and (=> (= (ControlFlow 0 72) (- 0 74)) (or (not (= |a#0| null)) (not true))) (=> (or (not (= |a#0| null)) (not true)) (and (=> (= (ControlFlow 0 72) (- 0 73)) (and (<= 0 |k#2@0|) (< |k#2@0| (_System.array.Length |a#0|)))) (=> (= (ControlFlow 0 72) 71) anon13_correct)))))))
(let ((anon44_Else_correct  (=> (< |k#2@0| (LitInt 0)) (and (=> (= (ControlFlow 0 77) 72) anon45_Then_correct) (=> (= (ControlFlow 0 77) 75) anon45_Else_correct)))))
(let ((anon44_Then_correct  (=> (<= (LitInt 0) |k#2@0|) (and (=> (= (ControlFlow 0 76) 72) anon45_Then_correct) (=> (= (ControlFlow 0 76) 75) anon45_Else_correct)))))
(let ((anon43_Then_correct  (and (=> (= (ControlFlow 0 78) 76) anon44_Then_correct) (=> (= (ControlFlow 0 78) 77) anon44_Else_correct))))
(let ((anon43_Else_correct true))
(let ((anon8_correct  (=> (and (<= (LitInt 0) |i#0@0|) (<= |i#0@0| (_System.array.Length |a#0|))) (and (=> (= (ControlFlow 0 79) 78) anon43_Then_correct) (=> (= (ControlFlow 0 79) 35) anon43_Else_correct)))))
(let ((anon42_Else_correct  (=> (and (< |i#0@0| (LitInt 0)) (= (ControlFlow 0 82) 79)) anon8_correct)))
(let ((anon42_Then_correct  (=> (<= (LitInt 0) |i#0@0|) (and (=> (= (ControlFlow 0 80) (- 0 81)) (or (not (= |a#0| null)) (not true))) (=> (= (ControlFlow 0 80) 79) anon8_correct)))))
(let ((anon41_Then_correct  (=> (not |$w$loop#0@0|) (and (=> (= (ControlFlow 0 83) 80) anon42_Then_correct) (=> (= (ControlFlow 0 83) 82) anon42_Else_correct)))))
(let ((GeneratedUnifiedExit_correct  (and (=> (= (ControlFlow 0 19) (- 0 30)) (= |ii#0@1| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 this) _module.AClass.index))))) (=> (= |ii#0@1| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 this) _module.AClass.index)))) (and (=> (= (ControlFlow 0 19) (- 0 29)) (<= (LitInt 0) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 this) _module.AClass.index))))) (=> (<= (LitInt 0) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 this) _module.AClass.index)))) (and (=> (= (ControlFlow 0 19) (- 0 28)) (< (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 this) _module.AClass.index))) (_System.array.Length |a#0|))) (=> (< (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 this) _module.AClass.index))) (_System.array.Length |a#0|)) (and (=> (= (ControlFlow 0 19) (- 0 27)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |a#0|) (IndexField |ii#0@1|)))) (LitInt 19))) (=> (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |a#0|) (IndexField |ii#0@1|)))) (LitInt 19)) (and (=> (= (ControlFlow 0 19) (- 0 26)) (<= (LitInt 0) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 this) _module.AClass.index))))) (=> (<= (LitInt 0) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 this) _module.AClass.index)))) (and (=> (= (ControlFlow 0 19) (- 0 25)) (< (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 this) _module.AClass.index))) (_System.array.Length |a#0|))) (=> (< (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 this) _module.AClass.index))) (_System.array.Length |a#0|)) (and (=> (= (ControlFlow 0 19) (- 0 24)) (let ((|newIndex#0| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 this) _module.AClass.index)))))
(= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |a#0|) (IndexField |newIndex#0|)))) (LitInt 19)))) (=> (let ((|newIndex#0@@0| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 this) _module.AClass.index)))))
(= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |a#0|) (IndexField |newIndex#0@@0|)))) (LitInt 19))) (and (=> (= (ControlFlow 0 19) (- 0 23)) (=> |b#0@0| (let ((|oldIndex#0| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.AClass.index)))))
(<= (LitInt 0) |oldIndex#0|)))) (=> (=> |b#0@0| (let ((|oldIndex#0@@0| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.AClass.index)))))
(<= (LitInt 0) |oldIndex#0@@0|))) (and (=> (= (ControlFlow 0 19) (- 0 22)) (=> |b#0@0| (let ((|oldIndex#0@@1| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.AClass.index)))))
(< |oldIndex#0@@1| (_System.array.Length |a#0|))))) (=> (=> |b#0@0| (let ((|oldIndex#0@@2| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.AClass.index)))))
(< |oldIndex#0@@2| (_System.array.Length |a#0|)))) (and (=> (= (ControlFlow 0 19) (- 0 21)) (=> |b#0@0| (let ((|oldIndex#0@@3| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.AClass.index)))))
(= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |a#0|) (IndexField |oldIndex#0@@3|)))) (LitInt 17))))) (=> (=> |b#0@0| (let ((|oldIndex#0@@4| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.AClass.index)))))
(= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |a#0|) (IndexField |oldIndex#0@@4|)))) (LitInt 17)))) (and (=> (= (ControlFlow 0 19) (- 0 20)) (let ((|oi#0| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.AClass.index)))))
 (=> (= |oi#0| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 this) _module.AClass.index)))) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0|) (IndexField |oi#0|)))) (LitInt 21))))) (=> (let ((|oi#0@@0| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.AClass.index)))))
 (=> (= |oi#0@@0| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 this) _module.AClass.index)))) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0|) (IndexField |oi#0@@0|)))) (LitInt 21)))) (=> (= (ControlFlow 0 19) (- 0 18)) (let ((|oi#0@@1| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.AClass.index)))))
 (=> (= |oi#0@@1| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 this) _module.AClass.index)))) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |a#0|) (IndexField |oi#0@@1|)))) (LitInt 19)))))))))))))))))))))))))))))
(let ((anon56_Then_correct  (=> (<= (_System.array.Length |a#0|) |i#0@0|) (and (=> (= (ControlFlow 0 31) (- 0 32)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 this _module.AClass.index))) (=> (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 this _module.AClass.index)) (=> (and (= $Heap@1 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap@0 this (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 this) _module.AClass.index ($Box intType (int_2_U |j#0@0|))))) ($IsGoodHeap $Heap@1)) (=> (and (and (= |ii#0@0| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 this) _module.AClass.index)))) (= $Heap@3 $Heap@1)) (and (= |ii#0@1| |ii#0@0|) (= (ControlFlow 0 31) 19))) GeneratedUnifiedExit_correct)))))))
(let ((anon36_correct  (and (=> (= (ControlFlow 0 3) (- 0 12)) (or (not (= |a#0| null)) (not true))) (=> (or (not (= |a#0| null)) (not true)) (and (=> (= (ControlFlow 0 3) (- 0 11)) (and (<= 0 |i#0@0|) (< |i#0@0| (_System.array.Length |a#0|)))) (=> (and (<= 0 |i#0@0|) (< |i#0@0| (_System.array.Length |a#0|))) (=> (= $index1@1 (IndexField |i#0@0|)) (and (=> (= (ControlFlow 0 3) (- 0 10)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 |a#0| $index1@1))) (=> (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 |a#0| $index1@1)) (=> (and (and (= |$rhs#0_0@1| (+ |i#0@0| 1)) (= |$rhs#0_1@1| (LitInt 21))) (and (= $Heap@2 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap@0 |a#0| (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |a#0|) $index1@1 ($Box intType (int_2_U |$rhs#0_1@1|))))) ($IsGoodHeap $Heap@2))) (and (=> (= (ControlFlow 0 3) (- 0 9)) (or (<= 0 |$decr$loop#00@1|) (= (- (_System.array.Length |a#0|) |$rhs#0_0@1|) |$decr$loop#00@1|))) (=> (or (<= 0 |$decr$loop#00@1|) (= (- (_System.array.Length |a#0|) |$rhs#0_0@1|) |$decr$loop#00@1|)) (and (=> (= (ControlFlow 0 3) (- 0 8)) (< (- (_System.array.Length |a#0|) |$rhs#0_0@1|) |$decr$loop#00@1|)) (=> (< (- (_System.array.Length |a#0|) |$rhs#0_0@1|) |$decr$loop#00@1|) (and (=> (= (ControlFlow 0 3) (- 0 7)) (=> |$w$loop#0@0| (<= (LitInt 0) |$rhs#0_0@1|))) (=> (=> |$w$loop#0@0| (<= (LitInt 0) |$rhs#0_0@1|)) (and (=> (= (ControlFlow 0 3) (- 0 6)) (=> |$w$loop#0@0| (<= |$rhs#0_0@1| (_System.array.Length |a#0|)))) (=> (=> |$w$loop#0@0| (<= |$rhs#0_0@1| (_System.array.Length |a#0|))) (and (=> (= (ControlFlow 0 3) (- 0 5)) (=> |$w$loop#0@0| (forall ((|k#3@@0| Int) ) (!  (=> (and (<= (LitInt 0) |k#3@@0|) (< |k#3@@0| |$rhs#0_0@1|)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |a#0|) (IndexField |k#3@@0|)))) (LitInt 21)))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |a#0|) (IndexField |k#3@@0|))))
)))) (=> (=> |$w$loop#0@0| (forall ((|k#3@@1| Int) ) (!  (=> (and (<= (LitInt 0) |k#3@@1|) (< |k#3@@1| |$rhs#0_0@1|)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |a#0|) (IndexField |k#3@@1|)))) (LitInt 21)))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |a#0|) (IndexField |k#3@@1|))))
))) (and (=> (= (ControlFlow 0 3) (- 0 4)) (=> |$w$loop#0@0| (forall ((|k#5@@0| Int) ) (!  (=> (and (<= |$rhs#0_0@1| |k#5@@0|) (< |k#5@@0| (_System.array.Length |a#0|))) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |a#0|) (IndexField |k#5@@0|)))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |a#0|) (IndexField |k#5@@0|))))))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |a#0|) (IndexField |k#5@@0|))))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |a#0|) (IndexField |k#5@@0|))))
)))) (=> (=> |$w$loop#0@0| (forall ((|k#5@@1| Int) ) (!  (=> (and (<= |$rhs#0_0@1| |k#5@@1|) (< |k#5@@1| (_System.array.Length |a#0|))) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |a#0|) (IndexField |k#5@@1|)))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |a#0|) (IndexField |k#5@@1|))))))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |a#0|) (IndexField |k#5@@1|))))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |a#0|) (IndexField |k#5@@1|))))
))) (=> (= (ControlFlow 0 3) (- 0 2)) (=> |$w$loop#0@0| (or (and (and (<= (LitInt 0) |j#0@1|) (< |j#0@1| |$rhs#0_0@1|)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |a#0|) (IndexField |j#0@1|)))) (LitInt 19))) (and (= |j#0@1| (LitInt (- 0 1))) (exists ((|k#7@@0| Int) ) (!  (and (and (<= |$rhs#0_0@1| |k#7@@0|) (< |k#7@@0| (_System.array.Length |a#0|))) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |a#0|) (IndexField |k#7@@0|)))) (LitInt 19)))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |a#0|) (IndexField |k#7@@0|))))
))))))))))))))))))))))))))))
(let ((anon57_Else_correct  (=> (or (not (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |a#0|) (IndexField |i#0@0|)))) (LitInt 19))) (not true)) (=> (and (= |j#0@1| |j#0@0|) (= (ControlFlow 0 14) 3)) anon36_correct))))
(let ((anon57_Then_correct  (=> (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |a#0|) (IndexField |i#0@0|)))) (LitInt 19)) (=> (and (= |j#0@1| |i#0@0|) (= (ControlFlow 0 13) 3)) anon36_correct))))
(let ((anon56_Else_correct  (=> (and (< |i#0@0| (_System.array.Length |a#0|)) (= |$decr$loop#00@1| (- (_System.array.Length |a#0|) |i#0@0|))) (and (=> (= (ControlFlow 0 15) (- 0 17)) (or (not (= |a#0| null)) (not true))) (=> (or (not (= |a#0| null)) (not true)) (and (=> (= (ControlFlow 0 15) (- 0 16)) (and (<= 0 |i#0@0|) (< |i#0@0| (_System.array.Length |a#0|)))) (=> (and (<= 0 |i#0@0|) (< |i#0@0| (_System.array.Length |a#0|))) (and (=> (= (ControlFlow 0 15) 13) anon57_Then_correct) (=> (= (ControlFlow 0 15) 14) anon57_Else_correct)))))))))
(let ((anon41_Else_correct  (=> |$w$loop#0@0| (and (=> (= (ControlFlow 0 33) (- 0 34)) (or (not (= |a#0| null)) (not true))) (=> (or (not (= |a#0| null)) (not true)) (and (=> (= (ControlFlow 0 33) 31) anon56_Then_correct) (=> (= (ControlFlow 0 33) 15) anon56_Else_correct)))))))
(let ((anon40_LoopBody_correct  (and (=> (= (ControlFlow 0 84) 83) anon41_Then_correct) (=> (= (ControlFlow 0 84) 33) anon41_Else_correct))))
(let ((anon40_LoopDone_correct true))
(let ((anon40_LoopHead_correct  (=> (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (=> (and (and (and (and (and (and (not false) (<= 0 |i#0@0|)) (<= (- 0 1) |j#0@0|)) (= |$rhs#0@0| 0)) (= |$rhs#1@0| (- 0 1))) (=> |$w$loop#0@0| (<= (LitInt 0) |i#0@0|))) (and (and (and (=> |$w$loop#0@0| (<= |i#0@0| (_System.array.Length |a#0|))) (=> |$w$loop#0@0| (forall ((|k#3@@2| Int) ) (!  (=> (and (<= (LitInt 0) |k#3@@2|) (< |k#3@@2| |i#0@0|)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |a#0|) (IndexField |k#3@@2|)))) (LitInt 21)))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |a#0|) (IndexField |k#3@@2|))))
)))) (and (=> |$w$loop#0@0| (forall ((|k#5@@2| Int) ) (!  (=> (and (<= |i#0@0| |k#5@@2|) (< |k#5@@2| (_System.array.Length |a#0|))) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |a#0|) (IndexField |k#5@@2|)))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |a#0|) (IndexField |k#5@@2|))))))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |a#0|) (IndexField |k#5@@2|))))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |a#0|) (IndexField |k#5@@2|))))
))) (=> |$w$loop#0@0| (or (and (and (<= (LitInt 0) |j#0@0|) (< |j#0@0| |i#0@0|)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |a#0|) (IndexField |j#0@0|)))) (LitInt 19))) (and (= |j#0@0| (LitInt (- 0 1))) (exists ((|k#7@@1| Int) ) (!  (and (and (<= |i#0@0| |k#7@@1|) (< |k#7@@1| (_System.array.Length |a#0|))) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |a#0|) (IndexField |k#7@@1|)))) (LitInt 19)))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |a#0|) (IndexField |k#7@@1|))))
))))))) (and (and (forall (($o@@10 T@U) ) (!  (=> (and (or (not (= $o@@10 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@10) alloc)))) (or (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@10) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@10)) (or (= $o@@10 this) (= $o@@10 |a#0|))))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@10))
)) ($HeapSucc $Heap $Heap@0)) (and (forall (($o@@11 T@U) ($f@@0 T@U) ) (!  (=> (and (or (not (= $o@@11 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@11) alloc)))) (or (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@11) $f@@0) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@11) $f@@0)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@11 $f@@0))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@11) $f@@0))
)) (<= (- (_System.array.Length |a#0|) |i#0@0|) |$decr_init$loop#00@0|))))) (and (=> (= (ControlFlow 0 85) 1) anon40_LoopDone_correct) (=> (= (ControlFlow 0 85) 84) anon40_LoopBody_correct))))))
(let ((anon4_correct  (=> (and (and (= |b#0@0|  (and (and (<= (LitInt 0) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.AClass.index)))) (< (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.AClass.index))) (_System.array.Length |a#0|))) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |a#0|) (IndexField (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.AClass.index))))))) (LitInt 17)))) (= |$rhs#0@0| (LitInt 0))) (and (= |$rhs#1@0| (LitInt (- 0 1))) (= |$decr_init$loop#00@0| (- (_System.array.Length |a#0|) |$rhs#0@0|)))) (and (=> (= (ControlFlow 0 86) (- 0 91)) (=> |$w$loop#0@0| (<= (LitInt 0) |$rhs#0@0|))) (=> (=> |$w$loop#0@0| (<= (LitInt 0) |$rhs#0@0|)) (and (=> (= (ControlFlow 0 86) (- 0 90)) (=> |$w$loop#0@0| (<= |$rhs#0@0| (_System.array.Length |a#0|)))) (=> (=> |$w$loop#0@0| (<= |$rhs#0@0| (_System.array.Length |a#0|))) (and (=> (= (ControlFlow 0 86) (- 0 89)) (=> |$w$loop#0@0| (forall ((|k#3@@3| Int) ) (!  (=> (and (<= (LitInt 0) |k#3@@3|) (< |k#3@@3| |$rhs#0@0|)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |a#0|) (IndexField |k#3@@3|)))) (LitInt 21)))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |a#0|) (IndexField |k#3@@3|))))
)))) (=> (=> |$w$loop#0@0| (forall ((|k#3@@4| Int) ) (!  (=> (and (<= (LitInt 0) |k#3@@4|) (< |k#3@@4| |$rhs#0@0|)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |a#0|) (IndexField |k#3@@4|)))) (LitInt 21)))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |a#0|) (IndexField |k#3@@4|))))
))) (and (=> (= (ControlFlow 0 86) (- 0 88)) (=> |$w$loop#0@0| (forall ((|k#5@@3| Int) ) (!  (=> (and (<= |$rhs#0@0| |k#5@@3|) (< |k#5@@3| (_System.array.Length |a#0|))) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |a#0|) (IndexField |k#5@@3|)))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |a#0|) (IndexField |k#5@@3|))))))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |a#0|) (IndexField |k#5@@3|))))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |a#0|) (IndexField |k#5@@3|))))
)))) (=> (=> |$w$loop#0@0| (forall ((|k#5@@4| Int) ) (!  (=> (and (<= |$rhs#0@0| |k#5@@4|) (< |k#5@@4| (_System.array.Length |a#0|))) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |a#0|) (IndexField |k#5@@4|)))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |a#0|) (IndexField |k#5@@4|))))))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |a#0|) (IndexField |k#5@@4|))))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |a#0|) (IndexField |k#5@@4|))))
))) (and (=> (= (ControlFlow 0 86) (- 0 87)) (=> |$w$loop#0@0| (or (and (and (<= (LitInt 0) |$rhs#1@0|) (< |$rhs#1@0| |$rhs#0@0|)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |a#0|) (IndexField |$rhs#1@0|)))) (LitInt 19))) (and (= |$rhs#1@0| (LitInt (- 0 1))) (exists ((|k#7@@2| Int) ) (!  (and (and (<= |$rhs#0@0| |k#7@@2|) (< |k#7@@2| (_System.array.Length |a#0|))) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |a#0|) (IndexField |k#7@@2|)))) (LitInt 19)))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |a#0|) (IndexField |k#7@@2|))))
)))))) (=> (=> |$w$loop#0@0| (or (and (and (<= (LitInt 0) |$rhs#1@0|) (< |$rhs#1@0| |$rhs#0@0|)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |a#0|) (IndexField |$rhs#1@0|)))) (LitInt 19))) (and (= |$rhs#1@0| (LitInt (- 0 1))) (exists ((|k#7@@3| Int) ) (!  (and (and (<= |$rhs#0@0| |k#7@@3|) (< |k#7@@3| (_System.array.Length |a#0|))) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |a#0|) (IndexField |k#7@@3|)))) (LitInt 19)))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |a#0|) (IndexField |k#7@@3|))))
))))) (=> (= (ControlFlow 0 86) 85) anon40_LoopHead_correct))))))))))))))
(let ((anon39_Else_correct  (=> (and (not (and (<= (LitInt 0) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.AClass.index)))) (< (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.AClass.index))) (_System.array.Length |a#0|)))) (= (ControlFlow 0 95) 86)) anon4_correct)))
(let ((anon39_Then_correct  (=> (and (<= (LitInt 0) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.AClass.index)))) (< (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.AClass.index))) (_System.array.Length |a#0|))) (and (=> (= (ControlFlow 0 92) (- 0 94)) (or (not (= |a#0| null)) (not true))) (=> (or (not (= |a#0| null)) (not true)) (and (=> (= (ControlFlow 0 92) (- 0 93)) (and (<= 0 (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.AClass.index)))) (< (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.AClass.index))) (_System.array.Length |a#0|)))) (=> (and (<= 0 (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.AClass.index)))) (< (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.AClass.index))) (_System.array.Length |a#0|))) (=> (= (ControlFlow 0 92) 86) anon4_correct))))))))
(let ((anon38_Else_correct  (=> (< (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.AClass.index))) (LitInt 0)) (and (=> (= (ControlFlow 0 98) 92) anon39_Then_correct) (=> (= (ControlFlow 0 98) 95) anon39_Else_correct)))))
(let ((anon38_Then_correct  (=> (<= (LitInt 0) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.AClass.index)))) (and (=> (= (ControlFlow 0 96) (- 0 97)) (or (not (= |a#0| null)) (not true))) (=> (or (not (= |a#0| null)) (not true)) (and (=> (= (ControlFlow 0 96) 92) anon39_Then_correct) (=> (= (ControlFlow 0 96) 95) anon39_Else_correct)))))))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#22| null $Heap alloc this |a#0|)) (and (=> (= (ControlFlow 0 99) 96) anon38_Then_correct) (=> (= (ControlFlow 0 99) 98) anon38_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (and (or (not (= this null)) (not true)) (and ($Is refType this Tclass._module.AClass) ($IsAlloc refType this Tclass._module.AClass $Heap)))) (=> (and (and (and ($Is refType |a#0| (Tclass._System.array TInt)) ($IsAlloc refType |a#0| (Tclass._System.array TInt) $Heap)) (= 0 $FunctionContextHeight)) (and (exists ((|k#1| Int) ) (!  (and (and (<= (LitInt 0) |k#1|) (< |k#1| (_System.array.Length |a#0|))) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |a#0|) (IndexField |k#1|)))) (LitInt 19)))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |a#0|) (IndexField |k#1|))))
)) (= (ControlFlow 0 100) 99))) anon0_correct))))
PreconditionGeneratedEntry_correct)))))))))))))))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
