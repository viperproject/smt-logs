(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun |ORD#Less| (T@U T@U) Bool)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun |ORD#Minus| (T@U T@U) T@U)
(declare-fun |ORD#FromNat| (Int) T@U)
(declare-fun |ORD#Offset| (T@U) Int)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun |ORD#IsNat| (T@U) Bool)
(declare-fun |ORD#Plus| (T@U T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (forall ((o T@U) (p T@U) (r T@U) ) (!  (=> (and (|ORD#Less| o p) (|ORD#Less| p r)) (|ORD#Less| o r))
 :pattern ( (|ORD#Less| o p) (|ORD#Less| p r))
 :pattern ( (|ORD#Less| o p) (|ORD#Less| o r))
)))
(assert (forall ((o@@0 T@U) (m Int) (n Int) ) (!  (=> (and (and (<= 0 m) (<= 0 n)) (<= (+ m n) (|ORD#Offset| o@@0))) (= (|ORD#Minus| (|ORD#Minus| o@@0 (|ORD#FromNat| m)) (|ORD#FromNat| n)) (|ORD#Minus| o@@0 (|ORD#FromNat| (+ m n)))))
 :pattern ( (|ORD#Minus| (|ORD#Minus| o@@0 (|ORD#FromNat| m)) (|ORD#FromNat| n)))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((o@@1 T@U) (p@@0 T@U) ) (!  (=> (and (|ORD#IsNat| p@@0) (<= (|ORD#Offset| p@@0) (|ORD#Offset| o@@1))) (and (= (|ORD#IsNat| (|ORD#Minus| o@@1 p@@0)) (|ORD#IsNat| o@@1)) (= (|ORD#Offset| (|ORD#Minus| o@@1 p@@0)) (- (|ORD#Offset| o@@1) (|ORD#Offset| p@@0)))))
 :pattern ( (|ORD#Minus| o@@1 p@@0))
)))
(assert (forall ((n@@0 Int) ) (!  (=> (<= 0 n@@0) (and (|ORD#IsNat| (|ORD#FromNat| n@@0)) (= (|ORD#Offset| (|ORD#FromNat| n@@0)) n@@0)))
 :pattern ( (|ORD#FromNat| n@@0))
)))
(assert (forall ((o@@2 T@U) (p@@1 T@U) ) (!  (and (or (= o@@2 (|ORD#Plus| o@@2 p@@1)) (|ORD#Less| o@@2 (|ORD#Plus| o@@2 p@@1))) (or (= p@@1 (|ORD#Plus| o@@2 p@@1)) (|ORD#Less| p@@1 (|ORD#Plus| o@@2 p@@1))))
 :pattern ( (|ORD#Plus| o@@2 p@@1))
)))
(assert (forall ((o@@3 T@U) (p@@2 T@U) ) (!  (or (or (|ORD#Less| o@@3 p@@2) (= o@@3 p@@2)) (|ORD#Less| p@@2 o@@3))
 :pattern ( (|ORD#Less| o@@3 p@@2) (|ORD#Less| p@@2 o@@3))
)))
(assert (forall ((o@@4 T@U) (p@@3 T@U) ) (!  (and (=> (= o@@4 (|ORD#FromNat| 0)) (= (|ORD#Plus| o@@4 p@@3) p@@3)) (=> (= p@@3 (|ORD#FromNat| 0)) (= (|ORD#Plus| o@@4 p@@3) o@@4)))
 :pattern ( (|ORD#Plus| o@@4 p@@3))
)))
(assert (forall ((o@@5 T@U) ) (! (<= 0 (|ORD#Offset| o@@5))
 :pattern ( (|ORD#Offset| o@@5))
)))
(assert (forall ((x@@5 T@U) (T@@1 T@T) ) (! (= ($Unbox T@@1 ($Box T@@1 x@@5)) x@@5)
 :pattern ( ($Box T@@1 x@@5))
)))
(assert (forall ((o@@6 T@U) (p@@4 T@U) ) (!  (and (and (and (=> (|ORD#Less| o@@6 p@@4) (or (not (= o@@6 p@@4)) (not true))) (=> (and (|ORD#IsNat| o@@6) (not (|ORD#IsNat| p@@4))) (|ORD#Less| o@@6 p@@4))) (=> (and (|ORD#IsNat| o@@6) (|ORD#IsNat| p@@4)) (= (|ORD#Less| o@@6 p@@4) (< (|ORD#Offset| o@@6) (|ORD#Offset| p@@4))))) (=> (and (|ORD#Less| o@@6 p@@4) (|ORD#IsNat| p@@4)) (|ORD#IsNat| o@@6)))
 :pattern ( (|ORD#Less| o@@6 p@@4))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (t2 T@T) (val T@U) (m@@0 T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0 t1 t2 (MapType0Store t0 t1 t2 m@@0 x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@1 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@1 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@1 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@2 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@2 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@2 y0@@0 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 3)) (= (Ctor FieldType) 4)) (forall ((t0@@0 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@3 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 (MapType1Store t0@@0 t1@@0 m@@3 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@4 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@4 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@4 y0@@1)))
 :weight 0
))) (= (Ctor BoxType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 6))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((o@@7 T@U) (m@@5 Int) (n@@1 Int) ) (!  (=> (and (<= 0 m@@5) (<= 0 n@@1)) (= (|ORD#Plus| (|ORD#Plus| o@@7 (|ORD#FromNat| m@@5)) (|ORD#FromNat| n@@1)) (|ORD#Plus| o@@7 (|ORD#FromNat| (+ m@@5 n@@1)))))
 :pattern ( (|ORD#Plus| (|ORD#Plus| o@@7 (|ORD#FromNat| m@@5)) (|ORD#FromNat| n@@1)))
)))
(assert (forall ((o@@8 T@U) (m@@6 Int) (n@@2 Int) ) (!  (=> (and (and (<= 0 m@@6) (<= 0 n@@2)) (<= n@@2 (+ (|ORD#Offset| o@@8) m@@6))) (and (=> (<= 0 (- m@@6 n@@2)) (= (|ORD#Minus| (|ORD#Plus| o@@8 (|ORD#FromNat| m@@6)) (|ORD#FromNat| n@@2)) (|ORD#Plus| o@@8 (|ORD#FromNat| (- m@@6 n@@2))))) (=> (<= (- m@@6 n@@2) 0) (= (|ORD#Minus| (|ORD#Plus| o@@8 (|ORD#FromNat| m@@6)) (|ORD#FromNat| n@@2)) (|ORD#Minus| o@@8 (|ORD#FromNat| (- n@@2 m@@6)))))))
 :pattern ( (|ORD#Minus| (|ORD#Plus| o@@8 (|ORD#FromNat| m@@6)) (|ORD#FromNat| n@@2)))
)))
(assert (forall ((o@@9 T@U) (m@@7 Int) (n@@3 Int) ) (!  (=> (and (and (<= 0 m@@7) (<= 0 n@@3)) (<= n@@3 (+ (|ORD#Offset| o@@9) m@@7))) (and (=> (<= 0 (- m@@7 n@@3)) (= (|ORD#Plus| (|ORD#Minus| o@@9 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3)) (|ORD#Minus| o@@9 (|ORD#FromNat| (- m@@7 n@@3))))) (=> (<= (- m@@7 n@@3) 0) (= (|ORD#Plus| (|ORD#Minus| o@@9 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3)) (|ORD#Plus| o@@9 (|ORD#FromNat| (- n@@3 m@@7)))))))
 :pattern ( (|ORD#Plus| (|ORD#Minus| o@@9 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3)))
)))
(assert (forall ((o@@10 T@U) ) (!  (=> (|ORD#IsNat| o@@10) (= o@@10 (|ORD#FromNat| (|ORD#Offset| o@@10))))
 :pattern ( (|ORD#Offset| o@@10))
 :pattern ( (|ORD#IsNat| o@@10))
)))
(assert (forall ((o@@11 T@U) (p@@5 T@U) ) (!  (=> (and (|ORD#IsNat| p@@5) (<= (|ORD#Offset| p@@5) (|ORD#Offset| o@@11))) (or (and (= p@@5 (|ORD#FromNat| 0)) (= (|ORD#Minus| o@@11 p@@5) o@@11)) (and (or (not (= p@@5 (|ORD#FromNat| 0))) (not true)) (|ORD#Less| (|ORD#Minus| o@@11 p@@5) o@@11))))
 :pattern ( (|ORD#Minus| o@@11 p@@5))
)))
(assert (forall ((o@@12 T@U) (p@@6 T@U) ) (!  (and (=> (|ORD#IsNat| (|ORD#Plus| o@@12 p@@6)) (and (|ORD#IsNat| o@@12) (|ORD#IsNat| p@@6))) (=> (|ORD#IsNat| p@@6) (and (= (|ORD#IsNat| (|ORD#Plus| o@@12 p@@6)) (|ORD#IsNat| o@@12)) (= (|ORD#Offset| (|ORD#Plus| o@@12 p@@6)) (+ (|ORD#Offset| o@@12) (|ORD#Offset| p@@6))))))
 :pattern ( (|ORD#Plus| o@@12 p@@6))
)))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((x@@7 T@U) (T@@2 T@T) ) (! (= ($Box T@@2 (Lit T@@2 x@@7)) (Lit BoxType ($Box T@@2 x@@7)))
 :pattern ( ($Box T@@2 (Lit T@@2 x@@7)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |b#0| () T@U)
(declare-fun |a#0| () T@U)
(declare-fun |n#0| () Int)
(declare-fun |c#0| () T@U)
(declare-fun |g#5_0@0| () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $Heap () T@U)
(declare-fun alloc () T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun $FunctionContextHeight () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 44) (let ((anon8_correct  (=> (and (|ORD#Less| |b#0| |a#0|) (= |a#0| (|ORD#FromNat| |n#0|))) (and (=> (= (ControlFlow 0 38) (- 0 39)) (|ORD#IsNat| (Lit BoxType (|ORD#FromNat| 1)))) (=> (|ORD#IsNat| (Lit BoxType (|ORD#FromNat| 1))) (=> (= (ControlFlow 0 38) (- 0 37)) (<= (|ORD#Offset| (Lit BoxType (|ORD#FromNat| 1))) (|ORD#Offset| |a#0|))))))))
(let ((anon19_Else_correct  (=> (and (not (|ORD#Less| |b#0| |a#0|)) (= (ControlFlow 0 42) 38)) anon8_correct)))
(let ((anon19_Then_correct  (=> (|ORD#Less| |b#0| |a#0|) (and (=> (= (ControlFlow 0 40) (- 0 41)) (<= 0 |n#0|)) (=> (<= 0 |n#0|) (=> (= (ControlFlow 0 40) 38) anon8_correct))))))
(let ((anon22_Else_correct  (=> (and (and (and (and (and (and (and (and (and (not (U_2_bool (Lit boolType (bool_2_U true)))) (not (U_2_bool (Lit boolType (bool_2_U true))))) (not (U_2_bool (Lit boolType (bool_2_U true))))) (or (not (= |b#0| (|ORD#FromNat| |n#0|))) (not true))) (not (|ORD#Less| |b#0| |a#0|))) (not (and (|ORD#Less| |b#0| |a#0|) (= |a#0| (|ORD#FromNat| |n#0|))))) (or (not (= |b#0| (|ORD#FromNat| |n#0|))) (not true))) (< (|ORD#Offset| |c#0|) (LitInt 10))) (not (U_2_bool (Lit boolType (bool_2_U true))))) (= (ControlFlow 0 36) (- 0 35))) false)))
(let ((anon22_Then_correct  (and (=> (= (ControlFlow 0 32) (- 0 34)) (|ORD#IsNat| (Lit BoxType (|ORD#FromNat| 0)))) (=> (|ORD#IsNat| (Lit BoxType (|ORD#FromNat| 0))) (and (=> (= (ControlFlow 0 32) (- 0 33)) (<= (|ORD#Offset| (Lit BoxType (|ORD#FromNat| 0))) (|ORD#Offset| |c#0|))) (=> (<= (|ORD#Offset| (Lit BoxType (|ORD#FromNat| 0))) (|ORD#Offset| |c#0|)) (=> (= (ControlFlow 0 32) (- 0 31)) (= |c#0| (|ORD#Minus| |c#0| (|ORD#FromNat| 0))))))))))
(let ((anon21_Then_correct  (=> (<= (LitInt 10) (|ORD#Offset| |c#0|)) (and (=> (= (ControlFlow 0 28) (- 0 30)) (|ORD#IsNat| (Lit BoxType (|ORD#FromNat| 1)))) (=> (|ORD#IsNat| (Lit BoxType (|ORD#FromNat| 1))) (and (=> (= (ControlFlow 0 28) (- 0 29)) (<= (|ORD#Offset| (Lit BoxType (|ORD#FromNat| 1))) (|ORD#Offset| |c#0|))) (=> (<= (|ORD#Offset| (Lit BoxType (|ORD#FromNat| 1))) (|ORD#Offset| |c#0|)) (=> (= (ControlFlow 0 28) (- 0 27)) (|ORD#Less| (|ORD#Minus| |c#0| (|ORD#FromNat| 1)) |c#0|)))))))))
(let ((anon20_Then_correct  (and (=> (= (ControlFlow 0 19) (- 0 26)) (<= 0 |n#0|)) (=> (<= 0 |n#0|) (=> (= |b#0| (|ORD#FromNat| |n#0|)) (and (=> (= (ControlFlow 0 19) (- 0 25)) (|ORD#IsNat| (Lit BoxType (|ORD#FromNat| 1)))) (=> (|ORD#IsNat| (Lit BoxType (|ORD#FromNat| 1))) (and (=> (= (ControlFlow 0 19) (- 0 24)) (<= (|ORD#Offset| (Lit BoxType (|ORD#FromNat| 1))) (|ORD#Offset| |b#0|))) (=> (<= (|ORD#Offset| (Lit BoxType (|ORD#FromNat| 1))) (|ORD#Offset| |b#0|)) (and (=> (= (ControlFlow 0 19) (- 0 23)) (|ORD#IsNat| (Lit BoxType (|ORD#FromNat| 1)))) (=> (|ORD#IsNat| (Lit BoxType (|ORD#FromNat| 1))) (and (=> (= (ControlFlow 0 19) (- 0 22)) (<= (|ORD#Offset| (Lit BoxType (|ORD#FromNat| 1))) (|ORD#Offset| (|ORD#Minus| |b#0| (|ORD#FromNat| 1))))) (=> (<= (|ORD#Offset| (Lit BoxType (|ORD#FromNat| 1))) (|ORD#Offset| (|ORD#Minus| |b#0| (|ORD#FromNat| 1)))) (and (=> (= (ControlFlow 0 19) (- 0 21)) (|ORD#IsNat| (Lit BoxType (|ORD#FromNat| 2)))) (=> (|ORD#IsNat| (Lit BoxType (|ORD#FromNat| 2))) (and (=> (= (ControlFlow 0 19) (- 0 20)) (<= (|ORD#Offset| (Lit BoxType (|ORD#FromNat| 2))) (|ORD#Offset| |b#0|))) (=> (<= (|ORD#Offset| (Lit BoxType (|ORD#FromNat| 2))) (|ORD#Offset| |b#0|)) (=> (= (ControlFlow 0 19) (- 0 18)) (= (|ORD#Minus| (|ORD#Minus| |b#0| (|ORD#FromNat| 1)) (|ORD#FromNat| 1)) (|ORD#Minus| |b#0| (|ORD#FromNat| 2)))))))))))))))))))))
(let ((anon17_Then_correct  (=> (|ORD#Less| |b#0| |a#0|) (and (=> (= (ControlFlow 0 16) (- 0 17)) (|ORD#IsNat| (Lit BoxType (|ORD#FromNat| 1)))) (=> (|ORD#IsNat| (Lit BoxType (|ORD#FromNat| 1))) (=> (= (ControlFlow 0 16) (- 0 15)) (<= (|ORD#Offset| (Lit BoxType (|ORD#FromNat| 1))) (|ORD#Offset| |a#0|))))))))
(let ((anon16_Then_correct  (and (=> (= (ControlFlow 0 11) (- 0 14)) (<= 0 |n#0|)) (=> (<= 0 |n#0|) (=> (= |b#0| (|ORD#FromNat| |n#0|)) (and (=> (= (ControlFlow 0 11) (- 0 13)) (|ORD#IsNat| (Lit BoxType (|ORD#FromNat| 1)))) (=> (|ORD#IsNat| (Lit BoxType (|ORD#FromNat| 1))) (and (=> (= (ControlFlow 0 11) (- 0 12)) (<= (|ORD#Offset| (Lit BoxType (|ORD#FromNat| 1))) (|ORD#Offset| |b#0|))) (=> (<= (|ORD#Offset| (Lit BoxType (|ORD#FromNat| 1))) (|ORD#Offset| |b#0|)) (=> (and (= |g#5_0@0| (|ORD#Minus| |b#0| (|ORD#FromNat| 1))) (= (ControlFlow 0 11) (- 0 10))) (= (|ORD#Plus| |g#5_0@0| (|ORD#FromNat| 1)) |b#0|)))))))))))
(let ((anon15_Then_correct  (and (=> (= (ControlFlow 0 8) (- 0 9)) (|ORD#IsNat| (Lit BoxType (|ORD#FromNat| 1)))) (=> (|ORD#IsNat| (Lit BoxType (|ORD#FromNat| 1))) (=> (= (ControlFlow 0 8) (- 0 7)) (<= (|ORD#Offset| (Lit BoxType (|ORD#FromNat| 1))) (|ORD#Offset| |b#0|)))))))
(let ((anon14_Then_correct  (and (=> (= (ControlFlow 0 5) (- 0 6)) (|ORD#IsNat| (Lit BoxType (|ORD#FromNat| 12)))) (=> (|ORD#IsNat| (Lit BoxType (|ORD#FromNat| 12))) (=> (= (ControlFlow 0 5) (- 0 4)) (<= (|ORD#Offset| (Lit BoxType (|ORD#FromNat| 12))) (|ORD#Offset| |b#0|)))))))
(let ((anon13_Then_correct  (and (=> (= (ControlFlow 0 2) (- 0 3)) (|ORD#IsNat| (Lit BoxType (|ORD#FromNat| 1)))) (=> (|ORD#IsNat| (Lit BoxType (|ORD#FromNat| 1))) (=> (= (ControlFlow 0 2) (- 0 1)) (<= (|ORD#Offset| (Lit BoxType (|ORD#FromNat| 1))) (|ORD#Offset| |a#0|)))))))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (and (and (and (and (and (and (and (and (and (and (=> (= (ControlFlow 0 43) 2) anon13_Then_correct) (=> (= (ControlFlow 0 43) 5) anon14_Then_correct)) (=> (= (ControlFlow 0 43) 8) anon15_Then_correct)) (=> (= (ControlFlow 0 43) 11) anon16_Then_correct)) (=> (= (ControlFlow 0 43) 16) anon17_Then_correct)) (=> (= (ControlFlow 0 43) 19) anon20_Then_correct)) (=> (= (ControlFlow 0 43) 28) anon21_Then_correct)) (=> (= (ControlFlow 0 43) 32) anon22_Then_correct)) (=> (= (ControlFlow 0 43) 36) anon22_Else_correct)) (=> (= (ControlFlow 0 43) 40) anon19_Then_correct)) (=> (= (ControlFlow 0 43) 42) anon19_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (=> (and (and (<= (LitInt 0) |n#0|) (= 0 $FunctionContextHeight)) (and (or (= (|ORD#FromNat| 10) |b#0|) (|ORD#Less| (|ORD#FromNat| 10) |b#0|)) (= (ControlFlow 0 44) 43))) anon0_correct))))
PreconditionGeneratedEntry_correct)))))))))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 16) (- 15))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 5) (- 4))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 8) (- 7))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
