(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U T@U) Bool)
(declare-fun $generated@@0 (T@T) Int)
(declare-fun $generated@@1 () T@T)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 (Bool) T@U)
(declare-fun $generated@@5 (T@U) Bool)
(declare-fun $generated@@6 (Int) T@U)
(declare-fun $generated@@7 (T@U) Int)
(declare-fun $generated@@8 (Real) T@U)
(declare-fun $generated@@9 (T@U) Real)
(declare-fun $generated@@19 (T@U T@U) T@U)
(declare-fun $generated@@20 (Int) T@U)
(declare-fun $generated@@21 (T@U) Int)
(declare-fun $generated@@25 (Int) Int)
(declare-fun $generated@@27 (T@T T@U) T@U)
(declare-fun $generated@@30 (T@T T@U) T@U)
(declare-fun $generated@@31 (T@T T@U) T@U)
(declare-fun $generated@@34 (T@U) Bool)
(declare-fun $generated@@38 (T@U T@U) T@U)
(declare-fun $generated@@50 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@51 () T@T)
(declare-fun $generated@@52 () T@T)
(declare-fun $generated@@53 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@54 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@55 () T@T)
(declare-fun $generated@@56 (T@T T@T) T@T)
(declare-fun $generated@@57 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@58 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@59 (T@T) T@T)
(declare-fun $generated@@60 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@0 $generated@@1) 0) (= ($generated@@0 $generated@@2) 1)) (= ($generated@@0 $generated@@3) 2)) (forall (($generated@@10 Bool) ) (! (= ($generated@@5 ($generated@@4 $generated@@10)) $generated@@10)
 :pattern ( ($generated@@4 $generated@@10))
))) (forall (($generated@@11 T@U) ) (! (= ($generated@@4 ($generated@@5 $generated@@11)) $generated@@11)
 :pattern ( ($generated@@5 $generated@@11))
))) (forall (($generated@@12 Int) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Real) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))))
(assert (forall (($generated@@16 T@U) ($generated@@17 T@U) ($generated@@18 T@U) ) (!  (=> (and ($generated $generated@@16 $generated@@17) ($generated $generated@@17 $generated@@18)) ($generated $generated@@16 $generated@@18))
 :pattern ( ($generated $generated@@16 $generated@@17) ($generated $generated@@17 $generated@@18))
 :pattern ( ($generated $generated@@16 $generated@@17) ($generated $generated@@16 $generated@@18))
)))
(assert (forall (($generated@@22 T@U) ($generated@@23 Int) ($generated@@24 Int) ) (!  (=> (and (and (<= 0 $generated@@23) (<= 0 $generated@@24)) (<= (+ $generated@@23 $generated@@24) ($generated@@21 $generated@@22))) (= ($generated@@19 ($generated@@19 $generated@@22 ($generated@@20 $generated@@23)) ($generated@@20 $generated@@24)) ($generated@@19 $generated@@22 ($generated@@20 (+ $generated@@23 $generated@@24)))))
 :pattern ( ($generated@@19 ($generated@@19 $generated@@22 ($generated@@20 $generated@@23)) ($generated@@20 $generated@@24)))
)))
(assert (forall (($generated@@26 Int) ) (! (= ($generated@@25 $generated@@26) $generated@@26)
 :pattern ( ($generated@@25 $generated@@26))
)))
(assert (forall (($generated@@28 T@U) ($generated@@29 T@T) ) (! (= ($generated@@27 $generated@@29 $generated@@28) $generated@@28)
 :pattern ( ($generated@@27 $generated@@29 $generated@@28))
)))
(assert (forall (($generated@@32 T@U) ($generated@@33 T@T) ) (! (= ($generated@@31 $generated@@33 ($generated@@30 $generated@@33 $generated@@32)) $generated@@32)
 :pattern ( ($generated@@30 $generated@@33 $generated@@32))
)))
(assert (forall (($generated@@35 T@U) ($generated@@36 T@U) ) (!  (=> (and ($generated@@34 $generated@@36) (<= ($generated@@21 $generated@@36) ($generated@@21 $generated@@35))) (and (= ($generated@@34 ($generated@@19 $generated@@35 $generated@@36)) ($generated@@34 $generated@@35)) (= ($generated@@21 ($generated@@19 $generated@@35 $generated@@36)) (- ($generated@@21 $generated@@35) ($generated@@21 $generated@@36)))))
 :pattern ( ($generated@@19 $generated@@35 $generated@@36))
)))
(assert (forall (($generated@@37 Int) ) (!  (=> (<= 0 $generated@@37) (and ($generated@@34 ($generated@@20 $generated@@37)) (= ($generated@@21 ($generated@@20 $generated@@37)) $generated@@37)))
 :pattern ( ($generated@@20 $generated@@37))
)))
(assert (forall (($generated@@39 T@U) ($generated@@40 T@U) ) (!  (and (or (= $generated@@39 ($generated@@38 $generated@@39 $generated@@40)) ($generated $generated@@39 ($generated@@38 $generated@@39 $generated@@40))) (or (= $generated@@40 ($generated@@38 $generated@@39 $generated@@40)) ($generated $generated@@40 ($generated@@38 $generated@@39 $generated@@40))))
 :pattern ( ($generated@@38 $generated@@39 $generated@@40))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (!  (or (or ($generated $generated@@41 $generated@@42) (= $generated@@41 $generated@@42)) ($generated $generated@@42 $generated@@41))
 :pattern ( ($generated $generated@@41 $generated@@42) ($generated $generated@@42 $generated@@41))
)))
(assert (forall (($generated@@43 T@U) ($generated@@44 T@U) ) (!  (and (=> (= $generated@@43 ($generated@@20 0)) (= ($generated@@38 $generated@@43 $generated@@44) $generated@@44)) (=> (= $generated@@44 ($generated@@20 0)) (= ($generated@@38 $generated@@43 $generated@@44) $generated@@43)))
 :pattern ( ($generated@@38 $generated@@43 $generated@@44))
)))
(assert (forall (($generated@@45 T@U) ) (! (<= 0 ($generated@@21 $generated@@45))
 :pattern ( ($generated@@21 $generated@@45))
)))
(assert (forall (($generated@@46 T@U) ($generated@@47 T@T) ) (! (= ($generated@@30 $generated@@47 ($generated@@31 $generated@@47 $generated@@46)) $generated@@46)
 :pattern ( ($generated@@31 $generated@@47 $generated@@46))
)))
(assert (forall (($generated@@48 T@U) ($generated@@49 T@U) ) (!  (and (and (and (=> ($generated $generated@@48 $generated@@49) (or (not (= $generated@@48 $generated@@49)) (not true))) (=> (and ($generated@@34 $generated@@48) (not ($generated@@34 $generated@@49))) ($generated $generated@@48 $generated@@49))) (=> (and ($generated@@34 $generated@@48) ($generated@@34 $generated@@49)) (= ($generated $generated@@48 $generated@@49) (< ($generated@@21 $generated@@48) ($generated@@21 $generated@@49))))) (=> (and ($generated $generated@@48 $generated@@49) ($generated@@34 $generated@@49)) ($generated@@34 $generated@@48)))
 :pattern ( ($generated $generated@@48 $generated@@49))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@61 T@T) ($generated@@62 T@T) ($generated@@63 T@T) ($generated@@64 T@U) ($generated@@65 T@U) ($generated@@66 T@U) ($generated@@67 T@U) ) (! (= ($generated@@50 $generated@@61 $generated@@62 $generated@@63 ($generated@@57 $generated@@61 $generated@@62 $generated@@63 $generated@@65 $generated@@66 $generated@@67 $generated@@64) $generated@@66 $generated@@67) $generated@@64)
 :weight 0
)) (and (forall (($generated@@68 T@T) ($generated@@69 T@T) ($generated@@70 T@T) ($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@U) ) (!  (or (= $generated@@73 $generated@@75) (= ($generated@@50 $generated@@68 $generated@@69 $generated@@70 ($generated@@57 $generated@@68 $generated@@69 $generated@@70 $generated@@72 $generated@@73 $generated@@74 $generated@@71) $generated@@75 $generated@@76) ($generated@@50 $generated@@68 $generated@@69 $generated@@70 $generated@@72 $generated@@75 $generated@@76)))
 :weight 0
)) (forall (($generated@@77 T@T) ($generated@@78 T@T) ($generated@@79 T@T) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ) (!  (or (= $generated@@83 $generated@@85) (= ($generated@@50 $generated@@77 $generated@@78 $generated@@79 ($generated@@57 $generated@@77 $generated@@78 $generated@@79 $generated@@81 $generated@@82 $generated@@83 $generated@@80) $generated@@84 $generated@@85) ($generated@@50 $generated@@77 $generated@@78 $generated@@79 $generated@@81 $generated@@84 $generated@@85)))
 :weight 0
)))) (= ($generated@@0 $generated@@51) 3)) (= ($generated@@0 $generated@@52) 4)) (forall (($generated@@86 T@T) ($generated@@87 T@T) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ) (! (= ($generated@@54 $generated@@86 $generated@@87 ($generated@@58 $generated@@86 $generated@@87 $generated@@89 $generated@@90 $generated@@88) $generated@@90) $generated@@88)
 :weight 0
))) (forall (($generated@@91 T@T) ($generated@@92 T@T) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ) (!  (or (= $generated@@95 $generated@@96) (= ($generated@@54 $generated@@91 $generated@@92 ($generated@@58 $generated@@91 $generated@@92 $generated@@94 $generated@@95 $generated@@93) $generated@@96) ($generated@@54 $generated@@91 $generated@@92 $generated@@94 $generated@@96)))
 :weight 0
))) (= ($generated@@0 $generated@@55) 5)) (forall (($generated@@97 T@T) ($generated@@98 T@T) ) (= ($generated@@0 ($generated@@56 $generated@@97 $generated@@98)) 6))) (forall (($generated@@99 T@T) ($generated@@100 T@T) ) (! (= ($generated@@59 ($generated@@56 $generated@@99 $generated@@100)) $generated@@99)
 :pattern ( ($generated@@56 $generated@@99 $generated@@100))
))) (forall (($generated@@101 T@T) ($generated@@102 T@T) ) (! (= ($generated@@60 ($generated@@56 $generated@@101 $generated@@102)) $generated@@102)
 :pattern ( ($generated@@56 $generated@@101 $generated@@102))
))))
(assert (forall (($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 Bool) ($generated@@107 T@U) ($generated@@108 T@U) ) (! (= ($generated@@5 ($generated@@50 $generated@@51 $generated@@52 $generated@@1 ($generated@@53 $generated@@103 $generated@@104 $generated@@105 $generated@@106) $generated@@107 $generated@@108))  (=> (and (or (not (= $generated@@107 $generated@@103)) (not true)) ($generated@@5 ($generated@@30 $generated@@1 ($generated@@54 $generated@@52 $generated@@55 ($generated@@54 $generated@@51 ($generated@@56 $generated@@52 $generated@@55) $generated@@104 $generated@@107) $generated@@105)))) $generated@@106))
 :pattern ( ($generated@@50 $generated@@51 $generated@@52 $generated@@1 ($generated@@53 $generated@@103 $generated@@104 $generated@@105 $generated@@106) $generated@@107 $generated@@108))
)))
(assert (forall (($generated@@109 T@U) ($generated@@110 Int) ($generated@@111 Int) ) (!  (=> (and (<= 0 $generated@@110) (<= 0 $generated@@111)) (= ($generated@@38 ($generated@@38 $generated@@109 ($generated@@20 $generated@@110)) ($generated@@20 $generated@@111)) ($generated@@38 $generated@@109 ($generated@@20 (+ $generated@@110 $generated@@111)))))
 :pattern ( ($generated@@38 ($generated@@38 $generated@@109 ($generated@@20 $generated@@110)) ($generated@@20 $generated@@111)))
)))
(assert (forall (($generated@@112 T@U) ($generated@@113 Int) ($generated@@114 Int) ) (!  (=> (and (and (<= 0 $generated@@113) (<= 0 $generated@@114)) (<= $generated@@114 (+ ($generated@@21 $generated@@112) $generated@@113))) (and (=> (<= 0 (- $generated@@113 $generated@@114)) (= ($generated@@19 ($generated@@38 $generated@@112 ($generated@@20 $generated@@113)) ($generated@@20 $generated@@114)) ($generated@@38 $generated@@112 ($generated@@20 (- $generated@@113 $generated@@114))))) (=> (<= (- $generated@@113 $generated@@114) 0) (= ($generated@@19 ($generated@@38 $generated@@112 ($generated@@20 $generated@@113)) ($generated@@20 $generated@@114)) ($generated@@19 $generated@@112 ($generated@@20 (- $generated@@114 $generated@@113)))))))
 :pattern ( ($generated@@19 ($generated@@38 $generated@@112 ($generated@@20 $generated@@113)) ($generated@@20 $generated@@114)))
)))
(assert (forall (($generated@@115 T@U) ($generated@@116 Int) ($generated@@117 Int) ) (!  (=> (and (and (<= 0 $generated@@116) (<= 0 $generated@@117)) (<= $generated@@117 (+ ($generated@@21 $generated@@115) $generated@@116))) (and (=> (<= 0 (- $generated@@116 $generated@@117)) (= ($generated@@38 ($generated@@19 $generated@@115 ($generated@@20 $generated@@116)) ($generated@@20 $generated@@117)) ($generated@@19 $generated@@115 ($generated@@20 (- $generated@@116 $generated@@117))))) (=> (<= (- $generated@@116 $generated@@117) 0) (= ($generated@@38 ($generated@@19 $generated@@115 ($generated@@20 $generated@@116)) ($generated@@20 $generated@@117)) ($generated@@38 $generated@@115 ($generated@@20 (- $generated@@117 $generated@@116)))))))
 :pattern ( ($generated@@38 ($generated@@19 $generated@@115 ($generated@@20 $generated@@116)) ($generated@@20 $generated@@117)))
)))
(assert (forall (($generated@@118 T@U) ) (!  (=> ($generated@@34 $generated@@118) (= $generated@@118 ($generated@@20 ($generated@@21 $generated@@118))))
 :pattern ( ($generated@@21 $generated@@118))
 :pattern ( ($generated@@34 $generated@@118))
)))
(assert (forall (($generated@@119 T@U) ($generated@@120 T@U) ) (!  (=> (and ($generated@@34 $generated@@120) (<= ($generated@@21 $generated@@120) ($generated@@21 $generated@@119))) (or (and (= $generated@@120 ($generated@@20 0)) (= ($generated@@19 $generated@@119 $generated@@120) $generated@@119)) (and (or (not (= $generated@@120 ($generated@@20 0))) (not true)) ($generated ($generated@@19 $generated@@119 $generated@@120) $generated@@119))))
 :pattern ( ($generated@@19 $generated@@119 $generated@@120))
)))
(assert (forall (($generated@@121 T@U) ($generated@@122 T@U) ) (!  (and (=> ($generated@@34 ($generated@@38 $generated@@121 $generated@@122)) (and ($generated@@34 $generated@@121) ($generated@@34 $generated@@122))) (=> ($generated@@34 $generated@@122) (and (= ($generated@@34 ($generated@@38 $generated@@121 $generated@@122)) ($generated@@34 $generated@@121)) (= ($generated@@21 ($generated@@38 $generated@@121 $generated@@122)) (+ ($generated@@21 $generated@@121) ($generated@@21 $generated@@122))))))
 :pattern ( ($generated@@38 $generated@@121 $generated@@122))
)))
(assert (forall (($generated@@123 Int) ) (! (= ($generated@@31 $generated@@2 ($generated@@6 ($generated@@25 $generated@@123))) ($generated@@27 $generated@@55 ($generated@@31 $generated@@2 ($generated@@6 $generated@@123))))
 :pattern ( ($generated@@31 $generated@@2 ($generated@@6 ($generated@@25 $generated@@123))))
)))
(assert (forall (($generated@@124 T@U) ($generated@@125 T@T) ) (! (= ($generated@@31 $generated@@125 ($generated@@27 $generated@@125 $generated@@124)) ($generated@@27 $generated@@55 ($generated@@31 $generated@@125 $generated@@124)))
 :pattern ( ($generated@@31 $generated@@125 ($generated@@27 $generated@@125 $generated@@124)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@126 () T@U)
(declare-fun $generated@@127 () T@U)
(declare-fun $generated@@128 () Int)
(declare-fun $generated@@129 () T@U)
(declare-fun $generated@@130 () T@U)
(declare-fun $generated@@131 () T@U)
(declare-fun $generated@@132 () T@U)
(declare-fun $generated@@133 () T@U)
(declare-fun $generated@@134 () T@U)
(declare-fun $generated@@135 (T@U) Bool)
(declare-fun $generated@@136 (T@U) Bool)
(declare-fun $generated@@137 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 44) (let (($generated@@138  (=> (and ($generated $generated@@126 $generated@@127) (= $generated@@127 ($generated@@20 $generated@@128))) (and (=> (= (ControlFlow 0 38) (- 0 39)) ($generated@@34 ($generated@@27 $generated@@55 ($generated@@20 1)))) (=> ($generated@@34 ($generated@@27 $generated@@55 ($generated@@20 1))) (=> (= (ControlFlow 0 38) (- 0 37)) (<= ($generated@@21 ($generated@@27 $generated@@55 ($generated@@20 1))) ($generated@@21 $generated@@127))))))))
(let (($generated@@139  (=> (and (not ($generated $generated@@126 $generated@@127)) (= (ControlFlow 0 42) 38)) $generated@@138)))
(let (($generated@@140  (=> ($generated $generated@@126 $generated@@127) (and (=> (= (ControlFlow 0 40) (- 0 41)) (<= 0 $generated@@128)) (=> (<= 0 $generated@@128) (=> (= (ControlFlow 0 40) 38) $generated@@138))))))
(let (($generated@@141  (=> (and (and (and (and (and (and (and (and (and (not ($generated@@5 ($generated@@27 $generated@@1 ($generated@@4 true)))) (not ($generated@@5 ($generated@@27 $generated@@1 ($generated@@4 true))))) (not ($generated@@5 ($generated@@27 $generated@@1 ($generated@@4 true))))) (or (not (= $generated@@126 ($generated@@20 $generated@@128))) (not true))) (not ($generated $generated@@126 $generated@@127))) (not (and ($generated $generated@@126 $generated@@127) (= $generated@@127 ($generated@@20 $generated@@128))))) (or (not (= $generated@@126 ($generated@@20 $generated@@128))) (not true))) (< ($generated@@21 $generated@@129) ($generated@@25 10))) (not ($generated@@5 ($generated@@27 $generated@@1 ($generated@@4 true))))) (= (ControlFlow 0 36) (- 0 35))) false)))
(let (($generated@@142  (and (=> (= (ControlFlow 0 32) (- 0 34)) ($generated@@34 ($generated@@27 $generated@@55 ($generated@@20 0)))) (=> ($generated@@34 ($generated@@27 $generated@@55 ($generated@@20 0))) (and (=> (= (ControlFlow 0 32) (- 0 33)) (<= ($generated@@21 ($generated@@27 $generated@@55 ($generated@@20 0))) ($generated@@21 $generated@@129))) (=> (<= ($generated@@21 ($generated@@27 $generated@@55 ($generated@@20 0))) ($generated@@21 $generated@@129)) (=> (= (ControlFlow 0 32) (- 0 31)) (= $generated@@129 ($generated@@19 $generated@@129 ($generated@@20 0))))))))))
(let (($generated@@143  (=> (<= ($generated@@25 10) ($generated@@21 $generated@@129)) (and (=> (= (ControlFlow 0 28) (- 0 30)) ($generated@@34 ($generated@@27 $generated@@55 ($generated@@20 1)))) (=> ($generated@@34 ($generated@@27 $generated@@55 ($generated@@20 1))) (and (=> (= (ControlFlow 0 28) (- 0 29)) (<= ($generated@@21 ($generated@@27 $generated@@55 ($generated@@20 1))) ($generated@@21 $generated@@129))) (=> (<= ($generated@@21 ($generated@@27 $generated@@55 ($generated@@20 1))) ($generated@@21 $generated@@129)) (=> (= (ControlFlow 0 28) (- 0 27)) ($generated ($generated@@19 $generated@@129 ($generated@@20 1)) $generated@@129)))))))))
(let (($generated@@144  (and (=> (= (ControlFlow 0 19) (- 0 26)) (<= 0 $generated@@128)) (=> (<= 0 $generated@@128) (=> (= $generated@@126 ($generated@@20 $generated@@128)) (and (=> (= (ControlFlow 0 19) (- 0 25)) ($generated@@34 ($generated@@27 $generated@@55 ($generated@@20 1)))) (=> ($generated@@34 ($generated@@27 $generated@@55 ($generated@@20 1))) (and (=> (= (ControlFlow 0 19) (- 0 24)) (<= ($generated@@21 ($generated@@27 $generated@@55 ($generated@@20 1))) ($generated@@21 $generated@@126))) (=> (<= ($generated@@21 ($generated@@27 $generated@@55 ($generated@@20 1))) ($generated@@21 $generated@@126)) (and (=> (= (ControlFlow 0 19) (- 0 23)) ($generated@@34 ($generated@@27 $generated@@55 ($generated@@20 1)))) (=> ($generated@@34 ($generated@@27 $generated@@55 ($generated@@20 1))) (and (=> (= (ControlFlow 0 19) (- 0 22)) (<= ($generated@@21 ($generated@@27 $generated@@55 ($generated@@20 1))) ($generated@@21 ($generated@@19 $generated@@126 ($generated@@20 1))))) (=> (<= ($generated@@21 ($generated@@27 $generated@@55 ($generated@@20 1))) ($generated@@21 ($generated@@19 $generated@@126 ($generated@@20 1)))) (and (=> (= (ControlFlow 0 19) (- 0 21)) ($generated@@34 ($generated@@27 $generated@@55 ($generated@@20 2)))) (=> ($generated@@34 ($generated@@27 $generated@@55 ($generated@@20 2))) (and (=> (= (ControlFlow 0 19) (- 0 20)) (<= ($generated@@21 ($generated@@27 $generated@@55 ($generated@@20 2))) ($generated@@21 $generated@@126))) (=> (<= ($generated@@21 ($generated@@27 $generated@@55 ($generated@@20 2))) ($generated@@21 $generated@@126)) (=> (= (ControlFlow 0 19) (- 0 18)) (= ($generated@@19 ($generated@@19 $generated@@126 ($generated@@20 1)) ($generated@@20 1)) ($generated@@19 $generated@@126 ($generated@@20 2)))))))))))))))))))))
(let (($generated@@145  (=> ($generated $generated@@126 $generated@@127) (and (=> (= (ControlFlow 0 16) (- 0 17)) ($generated@@34 ($generated@@27 $generated@@55 ($generated@@20 1)))) (=> ($generated@@34 ($generated@@27 $generated@@55 ($generated@@20 1))) (=> (= (ControlFlow 0 16) (- 0 15)) (<= ($generated@@21 ($generated@@27 $generated@@55 ($generated@@20 1))) ($generated@@21 $generated@@127))))))))
(let (($generated@@146  (and (=> (= (ControlFlow 0 11) (- 0 14)) (<= 0 $generated@@128)) (=> (<= 0 $generated@@128) (=> (= $generated@@126 ($generated@@20 $generated@@128)) (and (=> (= (ControlFlow 0 11) (- 0 13)) ($generated@@34 ($generated@@27 $generated@@55 ($generated@@20 1)))) (=> ($generated@@34 ($generated@@27 $generated@@55 ($generated@@20 1))) (and (=> (= (ControlFlow 0 11) (- 0 12)) (<= ($generated@@21 ($generated@@27 $generated@@55 ($generated@@20 1))) ($generated@@21 $generated@@126))) (=> (<= ($generated@@21 ($generated@@27 $generated@@55 ($generated@@20 1))) ($generated@@21 $generated@@126)) (=> (and (= $generated@@130 ($generated@@19 $generated@@126 ($generated@@20 1))) (= (ControlFlow 0 11) (- 0 10))) (= ($generated@@38 $generated@@130 ($generated@@20 1)) $generated@@126)))))))))))
(let (($generated@@147  (and (=> (= (ControlFlow 0 8) (- 0 9)) ($generated@@34 ($generated@@27 $generated@@55 ($generated@@20 1)))) (=> ($generated@@34 ($generated@@27 $generated@@55 ($generated@@20 1))) (=> (= (ControlFlow 0 8) (- 0 7)) (<= ($generated@@21 ($generated@@27 $generated@@55 ($generated@@20 1))) ($generated@@21 $generated@@126)))))))
(let (($generated@@148  (and (=> (= (ControlFlow 0 5) (- 0 6)) ($generated@@34 ($generated@@27 $generated@@55 ($generated@@20 12)))) (=> ($generated@@34 ($generated@@27 $generated@@55 ($generated@@20 12))) (=> (= (ControlFlow 0 5) (- 0 4)) (<= ($generated@@21 ($generated@@27 $generated@@55 ($generated@@20 12))) ($generated@@21 $generated@@126)))))))
(let (($generated@@149  (and (=> (= (ControlFlow 0 2) (- 0 3)) ($generated@@34 ($generated@@27 $generated@@55 ($generated@@20 1)))) (=> ($generated@@34 ($generated@@27 $generated@@55 ($generated@@20 1))) (=> (= (ControlFlow 0 2) (- 0 1)) (<= ($generated@@21 ($generated@@27 $generated@@55 ($generated@@20 1))) ($generated@@21 $generated@@127)))))))
(let (($generated@@150  (=> (= $generated@@131 ($generated@@53 $generated@@132 $generated@@133 $generated@@134 false)) (and (and (and (and (and (and (and (and (and (and (=> (= (ControlFlow 0 43) 2) $generated@@149) (=> (= (ControlFlow 0 43) 5) $generated@@148)) (=> (= (ControlFlow 0 43) 8) $generated@@147)) (=> (= (ControlFlow 0 43) 11) $generated@@146)) (=> (= (ControlFlow 0 43) 16) $generated@@145)) (=> (= (ControlFlow 0 43) 19) $generated@@144)) (=> (= (ControlFlow 0 43) 28) $generated@@143)) (=> (= (ControlFlow 0 43) 32) $generated@@142)) (=> (= (ControlFlow 0 43) 36) $generated@@141)) (=> (= (ControlFlow 0 43) 40) $generated@@140)) (=> (= (ControlFlow 0 43) 42) $generated@@139)))))
(let (($generated@@151  (=> (and ($generated@@135 $generated@@133) ($generated@@136 $generated@@133)) (=> (and (and (<= ($generated@@25 0) $generated@@128) (= 0 $generated@@137)) (and (or (= ($generated@@20 10) $generated@@126) ($generated ($generated@@20 10) $generated@@126)) (= (ControlFlow 0 44) 43))) $generated@@150))))
$generated@@151)))))))))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 8) (- 7))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 16) (- 15))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 5) (- 4))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
