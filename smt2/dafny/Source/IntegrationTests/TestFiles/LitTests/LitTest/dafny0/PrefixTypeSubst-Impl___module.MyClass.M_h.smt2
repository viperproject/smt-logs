(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TChar () T@U)
(declare-fun TORDINAL () T@U)
(declare-fun TagChar () T@U)
(declare-fun TagORDINAL () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._module.MyClass () T@U)
(declare-fun Tagclass._module.MyClass? () T@U)
(declare-fun tytagFamily$MyClass () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun |ORD#Less| (T@U T@U) Bool)
(declare-fun |ORD#Minus| (T@U T@U) T@U)
(declare-fun |ORD#FromNat| (Int) T@U)
(declare-fun |ORD#Offset| (T@U) Int)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.MyClass.R_h (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun $LS (T@U) T@U)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun |_module.MyClass.R_h#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun null () T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun Tclass._module.MyClass (T@U T@U) T@U)
(declare-fun LitInt (Int) Int)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun Tclass._module.MyClass? (T@U T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun dtype (T@U) T@U)
(declare-fun |ORD#IsNat| (T@U) Bool)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun Tclass._module.MyClass_0 (T@U) T@U)
(declare-fun Tclass._module.MyClass_1 (T@U) T@U)
(declare-fun Tclass._module.MyClass?_0 (T@U) T@U)
(declare-fun Tclass._module.MyClass?_1 (T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun charType () T@T)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TChar TORDINAL TagChar TagORDINAL alloc Tagclass._module.MyClass Tagclass._module.MyClass? tytagFamily$MyClass)
)
(assert (= (Tag TChar) TagChar))
(assert (= (Tag TORDINAL) TagORDINAL))
(assert (forall ((o T@U) (p T@U) (r T@U) ) (!  (=> (and (|ORD#Less| o p) (|ORD#Less| p r)) (|ORD#Less| o r))
 :pattern ( (|ORD#Less| o p) (|ORD#Less| p r))
 :pattern ( (|ORD#Less| o p) (|ORD#Less| o r))
)))
(assert (forall ((o@@0 T@U) (m Int) (n Int) ) (!  (=> (and (and (<= 0 m) (<= 0 n)) (<= (+ m n) (|ORD#Offset| o@@0))) (= (|ORD#Minus| (|ORD#Minus| o@@0 (|ORD#FromNat| m)) (|ORD#FromNat| n)) (|ORD#Minus| o@@0 (|ORD#FromNat| (+ m n)))))
 :pattern ( (|ORD#Minus| (|ORD#Minus| o@@0 (|ORD#FromNat| m)) (|ORD#FromNat| n)))
)))
(assert  (and (= (Ctor BoxType) 3) (= (Ctor refType) 4)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module.MyClass$A T@U) (_module.MyClass$B T@U) (|_module.MyClass.R#$T| T@U) ($ly T@U) (this T@U) (|_k#0| T@U) ) (!  (=> (or (|_module.MyClass.R_h#canCall| _module.MyClass$A _module.MyClass$B |_module.MyClass.R#$T| this (Lit BoxType |_k#0|)) (and (< 1 $FunctionContextHeight) (and (or (not (= this null)) (not true)) ($Is refType this (Tclass._module.MyClass _module.MyClass$A _module.MyClass$B))))) (and (and (=> (< 0 (|ORD#Offset| |_k#0|)) (|_module.MyClass.R_h#canCall| _module.MyClass$A _module.MyClass$B |_module.MyClass.R#$T| this (|ORD#Minus| |_k#0| (|ORD#FromNat| 1)))) (=> (=> (< 0 (|ORD#Offset| |_k#0|)) (_module.MyClass.R_h _module.MyClass$A _module.MyClass$B |_module.MyClass.R#$T| ($LS $ly) this (|ORD#Minus| |_k#0| (|ORD#FromNat| 1)))) (=> (= (LitInt 0) (|ORD#Offset| |_k#0|)) (forall ((|_k'#1| T@U) ) (!  (=> (|ORD#Less| |_k'#1| |_k#0|) (|_module.MyClass.R_h#canCall| _module.MyClass$A _module.MyClass$B |_module.MyClass.R#$T| this |_k'#1|))
 :pattern ( (_module.MyClass.R_h _module.MyClass$A _module.MyClass$B |_module.MyClass.R#$T| ($LS $ly) this |_k'#1|))
))))) (= (_module.MyClass.R_h _module.MyClass$A _module.MyClass$B |_module.MyClass.R#$T| ($LS $ly) this (Lit BoxType |_k#0|))  (and (=> (< 0 (|ORD#Offset| |_k#0|)) (_module.MyClass.R_h _module.MyClass$A _module.MyClass$B |_module.MyClass.R#$T| ($LS $ly) this (|ORD#Minus| |_k#0| (|ORD#FromNat| 1)))) (=> (= (LitInt 0) (|ORD#Offset| |_k#0|)) (forall ((|_k'#1@@0| T@U) ) (!  (=> (|ORD#Less| |_k'#1@@0| |_k#0|) (_module.MyClass.R_h _module.MyClass$A _module.MyClass$B |_module.MyClass.R#$T| ($LS $ly) this |_k'#1@@0|))
 :pattern ( (_module.MyClass.R_h _module.MyClass$A _module.MyClass$B |_module.MyClass.R#$T| ($LS $ly) this |_k'#1@@0|))
)))))))
 :weight 3
 :pattern ( (_module.MyClass.R_h _module.MyClass$A _module.MyClass$B |_module.MyClass.R#$T| ($LS $ly) this (Lit BoxType |_k#0|)))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module.MyClass$A@@0 T@U) (_module.MyClass$B@@0 T@U) (|_module.MyClass.R#$T@@0| T@U) ($ly@@0 T@U) (this@@0 T@U) (|_k#0@@0| T@U) ) (!  (=> (or (|_module.MyClass.R_h#canCall| _module.MyClass$A@@0 _module.MyClass$B@@0 |_module.MyClass.R#$T@@0| this@@0 |_k#0@@0|) (and (< 1 $FunctionContextHeight) (and (or (not (= this@@0 null)) (not true)) ($Is refType this@@0 (Tclass._module.MyClass _module.MyClass$A@@0 _module.MyClass$B@@0))))) (and (and (=> (< 0 (|ORD#Offset| |_k#0@@0|)) (|_module.MyClass.R_h#canCall| _module.MyClass$A@@0 _module.MyClass$B@@0 |_module.MyClass.R#$T@@0| this@@0 (|ORD#Minus| |_k#0@@0| (|ORD#FromNat| 1)))) (=> (=> (< 0 (|ORD#Offset| |_k#0@@0|)) (_module.MyClass.R_h _module.MyClass$A@@0 _module.MyClass$B@@0 |_module.MyClass.R#$T@@0| $ly@@0 this@@0 (|ORD#Minus| |_k#0@@0| (|ORD#FromNat| 1)))) (=> (= (LitInt 0) (|ORD#Offset| |_k#0@@0|)) (forall ((|_k'#0| T@U) ) (!  (=> (|ORD#Less| |_k'#0| |_k#0@@0|) (|_module.MyClass.R_h#canCall| _module.MyClass$A@@0 _module.MyClass$B@@0 |_module.MyClass.R#$T@@0| this@@0 |_k'#0|))
 :pattern ( (_module.MyClass.R_h _module.MyClass$A@@0 _module.MyClass$B@@0 |_module.MyClass.R#$T@@0| $ly@@0 this@@0 |_k'#0|))
))))) (= (_module.MyClass.R_h _module.MyClass$A@@0 _module.MyClass$B@@0 |_module.MyClass.R#$T@@0| ($LS $ly@@0) this@@0 |_k#0@@0|)  (and (=> (< 0 (|ORD#Offset| |_k#0@@0|)) (_module.MyClass.R_h _module.MyClass$A@@0 _module.MyClass$B@@0 |_module.MyClass.R#$T@@0| $ly@@0 this@@0 (|ORD#Minus| |_k#0@@0| (|ORD#FromNat| 1)))) (=> (= (LitInt 0) (|ORD#Offset| |_k#0@@0|)) (forall ((|_k'#0@@0| T@U) ) (!  (=> (|ORD#Less| |_k'#0@@0| |_k#0@@0|) (_module.MyClass.R_h _module.MyClass$A@@0 _module.MyClass$B@@0 |_module.MyClass.R#$T@@0| $ly@@0 this@@0 |_k'#0@@0|))
 :pattern ( (_module.MyClass.R_h _module.MyClass$A@@0 _module.MyClass$B@@0 |_module.MyClass.R#$T@@0| $ly@@0 this@@0 |_k'#0@@0|))
)))))))
 :pattern ( (_module.MyClass.R_h _module.MyClass$A@@0 _module.MyClass$B@@0 |_module.MyClass.R#$T@@0| ($LS $ly@@0) this@@0 |_k#0@@0|))
))))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((_module.MyClass$A@@1 T@U) (_module.MyClass$B@@1 T@U) (|c#0| T@U) ) (! (= ($Is refType |c#0| (Tclass._module.MyClass _module.MyClass$A@@1 _module.MyClass$B@@1))  (and ($Is refType |c#0| (Tclass._module.MyClass? _module.MyClass$A@@1 _module.MyClass$B@@1)) (or (not (= |c#0| null)) (not true))))
 :pattern ( ($Is refType |c#0| (Tclass._module.MyClass _module.MyClass$A@@1 _module.MyClass$B@@1)))
 :pattern ( ($Is refType |c#0| (Tclass._module.MyClass? _module.MyClass$A@@1 _module.MyClass$B@@1)))
)))
(assert (forall ((_module.MyClass$A@@2 T@U) (_module.MyClass$B@@2 T@U) (|_module.MyClass.R#$T@@1| T@U) ($ly@@1 T@U) (this@@1 T@U) (|_k#0@@1| T@U) ) (! (= (_module.MyClass.R_h _module.MyClass$A@@2 _module.MyClass$B@@2 |_module.MyClass.R#$T@@1| ($LS $ly@@1) this@@1 |_k#0@@1|) (_module.MyClass.R_h _module.MyClass$A@@2 _module.MyClass$B@@2 |_module.MyClass.R#$T@@1| $ly@@1 this@@1 |_k#0@@1|))
 :pattern ( (_module.MyClass.R_h _module.MyClass$A@@2 _module.MyClass$B@@2 |_module.MyClass.R#$T@@1| ($LS $ly@@1) this@@1 |_k#0@@1|))
)))
(assert (forall ((v T@U) (t T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v) t h) ($IsAlloc T@@1 v t h))
 :pattern ( ($IsAllocBox ($Box T@@1 v) t h))
)))
(assert (forall ((_module.MyClass$A@@3 T@U) (_module.MyClass$B@@3 T@U) ($o T@U) ) (! (= ($Is refType $o (Tclass._module.MyClass? _module.MyClass$A@@3 _module.MyClass$B@@3))  (or (= $o null) (= (dtype $o) (Tclass._module.MyClass? _module.MyClass$A@@3 _module.MyClass$B@@3))))
 :pattern ( ($Is refType $o (Tclass._module.MyClass? _module.MyClass$A@@3 _module.MyClass$B@@3)))
)))
(assert (forall ((o@@1 T@U) (p@@0 T@U) ) (!  (=> (and (|ORD#IsNat| p@@0) (<= (|ORD#Offset| p@@0) (|ORD#Offset| o@@1))) (and (= (|ORD#IsNat| (|ORD#Minus| o@@1 p@@0)) (|ORD#IsNat| o@@1)) (= (|ORD#Offset| (|ORD#Minus| o@@1 p@@0)) (- (|ORD#Offset| o@@1) (|ORD#Offset| p@@0)))))
 :pattern ( (|ORD#Minus| o@@1 p@@0))
)))
(assert (forall ((n@@0 Int) ) (!  (=> (<= 0 n@@0) (and (|ORD#IsNat| (|ORD#FromNat| n@@0)) (= (|ORD#Offset| (|ORD#FromNat| n@@0)) n@@0)))
 :pattern ( (|ORD#FromNat| n@@0))
)))
(assert (forall ((_module.MyClass$A@@4 T@U) (_module.MyClass$B@@4 T@U) (|c#0@@0| T@U) ($h T@U) ) (! (= ($IsAlloc refType |c#0@@0| (Tclass._module.MyClass _module.MyClass$A@@4 _module.MyClass$B@@4) $h) ($IsAlloc refType |c#0@@0| (Tclass._module.MyClass? _module.MyClass$A@@4 _module.MyClass$B@@4) $h))
 :pattern ( ($IsAlloc refType |c#0@@0| (Tclass._module.MyClass _module.MyClass$A@@4 _module.MyClass$B@@4) $h))
 :pattern ( ($IsAlloc refType |c#0@@0| (Tclass._module.MyClass? _module.MyClass$A@@4 _module.MyClass$B@@4) $h))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module.MyClass$A@@5 T@U) (_module.MyClass$B@@5 T@U) (|_module.MyClass.R#$T@@2| T@U) ($ly@@2 T@U) (this@@2 T@U) (|_k#0@@2| T@U) ) (!  (=> (or (|_module.MyClass.R_h#canCall| _module.MyClass$A@@5 _module.MyClass$B@@5 |_module.MyClass.R#$T@@2| (Lit refType this@@2) (Lit BoxType |_k#0@@2|)) (and (< 1 $FunctionContextHeight) (and (or (not (= this@@2 null)) (not true)) ($Is refType this@@2 (Tclass._module.MyClass _module.MyClass$A@@5 _module.MyClass$B@@5))))) (and (and (=> (< 0 (|ORD#Offset| |_k#0@@2|)) (|_module.MyClass.R_h#canCall| _module.MyClass$A@@5 _module.MyClass$B@@5 |_module.MyClass.R#$T@@2| (Lit refType this@@2) (|ORD#Minus| |_k#0@@2| (|ORD#FromNat| 1)))) (=> (=> (< 0 (|ORD#Offset| |_k#0@@2|)) (_module.MyClass.R_h _module.MyClass$A@@5 _module.MyClass$B@@5 |_module.MyClass.R#$T@@2| ($LS $ly@@2) (Lit refType this@@2) (|ORD#Minus| |_k#0@@2| (|ORD#FromNat| 1)))) (=> (= (LitInt 0) (|ORD#Offset| |_k#0@@2|)) (forall ((|_k'#2| T@U) ) (!  (=> (|ORD#Less| |_k'#2| |_k#0@@2|) (|_module.MyClass.R_h#canCall| _module.MyClass$A@@5 _module.MyClass$B@@5 |_module.MyClass.R#$T@@2| this@@2 |_k'#2|))
 :pattern ( (_module.MyClass.R_h _module.MyClass$A@@5 _module.MyClass$B@@5 |_module.MyClass.R#$T@@2| ($LS $ly@@2) this@@2 |_k'#2|))
))))) (= (_module.MyClass.R_h _module.MyClass$A@@5 _module.MyClass$B@@5 |_module.MyClass.R#$T@@2| ($LS $ly@@2) (Lit refType this@@2) (Lit BoxType |_k#0@@2|))  (and (=> (< 0 (|ORD#Offset| |_k#0@@2|)) (_module.MyClass.R_h _module.MyClass$A@@5 _module.MyClass$B@@5 |_module.MyClass.R#$T@@2| ($LS $ly@@2) (Lit refType this@@2) (|ORD#Minus| |_k#0@@2| (|ORD#FromNat| 1)))) (=> (= (LitInt 0) (|ORD#Offset| |_k#0@@2|)) (forall ((|_k'#2@@0| T@U) ) (!  (=> (|ORD#Less| |_k'#2@@0| |_k#0@@2|) (_module.MyClass.R_h _module.MyClass$A@@5 _module.MyClass$B@@5 |_module.MyClass.R#$T@@2| ($LS $ly@@2) this@@2 |_k'#2@@0|))
 :pattern ( (_module.MyClass.R_h _module.MyClass$A@@5 _module.MyClass$B@@5 |_module.MyClass.R#$T@@2| ($LS $ly@@2) this@@2 |_k'#2@@0|))
)))))))
 :weight 3
 :pattern ( (_module.MyClass.R_h _module.MyClass$A@@5 _module.MyClass$B@@5 |_module.MyClass.R#$T@@2| ($LS $ly@@2) (Lit refType this@@2) (Lit BoxType |_k#0@@2|)))
))))
(assert  (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m@@0 T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m@@0 x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@1 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@1 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@1 y0)))
 :weight 0
))) (= (Ctor FieldType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 6))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((_module.MyClass$A@@6 T@U) (_module.MyClass$B@@6 T@U) ($o@@0 T@U) ($h@@0 T@U) ) (! (= ($IsAlloc refType $o@@0 (Tclass._module.MyClass? _module.MyClass$A@@6 _module.MyClass$B@@6) $h@@0)  (or (= $o@@0 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@0 $o@@0) alloc)))))
 :pattern ( ($IsAlloc refType $o@@0 (Tclass._module.MyClass? _module.MyClass$A@@6 _module.MyClass$B@@6) $h@@0))
)))
(assert (forall ((o@@2 T@U) (p@@1 T@U) ) (!  (or (or (|ORD#Less| o@@2 p@@1) (= o@@2 p@@1)) (|ORD#Less| p@@1 o@@2))
 :pattern ( (|ORD#Less| o@@2 p@@1) (|ORD#Less| p@@1 o@@2))
)))
(assert (forall ((o@@3 T@U) ) (! (<= 0 (|ORD#Offset| o@@3))
 :pattern ( (|ORD#Offset| o@@3))
)))
(assert (forall ((_module.MyClass$A@@7 T@U) (_module.MyClass$B@@7 T@U) ) (! (= (Tclass._module.MyClass_0 (Tclass._module.MyClass _module.MyClass$A@@7 _module.MyClass$B@@7)) _module.MyClass$A@@7)
 :pattern ( (Tclass._module.MyClass _module.MyClass$A@@7 _module.MyClass$B@@7))
)))
(assert (forall ((_module.MyClass$A@@8 T@U) (_module.MyClass$B@@8 T@U) ) (! (= (Tclass._module.MyClass_1 (Tclass._module.MyClass _module.MyClass$A@@8 _module.MyClass$B@@8)) _module.MyClass$B@@8)
 :pattern ( (Tclass._module.MyClass _module.MyClass$A@@8 _module.MyClass$B@@8))
)))
(assert (forall ((_module.MyClass$A@@9 T@U) (_module.MyClass$B@@9 T@U) ) (! (= (Tclass._module.MyClass?_0 (Tclass._module.MyClass? _module.MyClass$A@@9 _module.MyClass$B@@9)) _module.MyClass$A@@9)
 :pattern ( (Tclass._module.MyClass? _module.MyClass$A@@9 _module.MyClass$B@@9))
)))
(assert (forall ((_module.MyClass$A@@10 T@U) (_module.MyClass$B@@10 T@U) ) (! (= (Tclass._module.MyClass?_1 (Tclass._module.MyClass? _module.MyClass$A@@10 _module.MyClass$B@@10)) _module.MyClass$B@@10)
 :pattern ( (Tclass._module.MyClass? _module.MyClass$A@@10 _module.MyClass$B@@10))
)))
(assert (forall ((x@@5 T@U) (T@@2 T@T) ) (! (= ($Unbox T@@2 ($Box T@@2 x@@5)) x@@5)
 :pattern ( ($Box T@@2 x@@5))
)))
(assert (forall ((o@@4 T@U) (p@@2 T@U) ) (!  (and (and (and (=> (|ORD#Less| o@@4 p@@2) (or (not (= o@@4 p@@2)) (not true))) (=> (and (|ORD#IsNat| o@@4) (not (|ORD#IsNat| p@@2))) (|ORD#Less| o@@4 p@@2))) (=> (and (|ORD#IsNat| o@@4) (|ORD#IsNat| p@@2)) (= (|ORD#Less| o@@4 p@@2) (< (|ORD#Offset| o@@4) (|ORD#Offset| p@@2))))) (=> (and (|ORD#Less| o@@4 p@@2) (|ORD#IsNat| p@@2)) (|ORD#IsNat| o@@4)))
 :pattern ( (|ORD#Less| o@@4 p@@2))
)))
(assert  (and (forall ((t0@@0 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@2 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 t2 (MapType1Store t0@@0 t1@@0 t2 m@@2 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@3 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@3 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@3 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@4 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@4 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@4 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o@@1 T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@1 $f))  (=> (and (or (not (= $o@@1 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@1) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@1 $f))
)))
(assert (forall ((_module.MyClass$A@@11 T@U) (_module.MyClass$B@@11 T@U) ) (!  (and (= (Tag (Tclass._module.MyClass _module.MyClass$A@@11 _module.MyClass$B@@11)) Tagclass._module.MyClass) (= (TagFamily (Tclass._module.MyClass _module.MyClass$A@@11 _module.MyClass$B@@11)) tytagFamily$MyClass))
 :pattern ( (Tclass._module.MyClass _module.MyClass$A@@11 _module.MyClass$B@@11))
)))
(assert (forall ((_module.MyClass$A@@12 T@U) (_module.MyClass$B@@12 T@U) ) (!  (and (= (Tag (Tclass._module.MyClass? _module.MyClass$A@@12 _module.MyClass$B@@12)) Tagclass._module.MyClass?) (= (TagFamily (Tclass._module.MyClass? _module.MyClass$A@@12 _module.MyClass$B@@12)) tytagFamily$MyClass))
 :pattern ( (Tclass._module.MyClass? _module.MyClass$A@@12 _module.MyClass$B@@12))
)))
(assert (forall ((o@@5 T@U) ) (!  (=> (|ORD#IsNat| o@@5) (= o@@5 (|ORD#FromNat| (|ORD#Offset| o@@5))))
 :pattern ( (|ORD#Offset| o@@5))
 :pattern ( (|ORD#IsNat| o@@5))
)))
(assert (forall ((o@@6 T@U) (p@@3 T@U) ) (!  (=> (and (|ORD#IsNat| p@@3) (<= (|ORD#Offset| p@@3) (|ORD#Offset| o@@6))) (or (and (= p@@3 (|ORD#FromNat| 0)) (= (|ORD#Minus| o@@6 p@@3) o@@6)) (and (or (not (= p@@3 (|ORD#FromNat| 0))) (not true)) (|ORD#Less| (|ORD#Minus| o@@6 p@@3) o@@6))))
 :pattern ( (|ORD#Minus| o@@6 p@@3))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module.MyClass$A@@13 T@U) (_module.MyClass$B@@13 T@U) (|_module.MyClass.R#$T@@3| T@U) ($ly@@3 T@U) (this@@3 T@U) (|_k#0@@3| T@U) ) (!  (=> (and (and (or (not (= this@@3 null)) (not true)) ($Is refType this@@3 (Tclass._module.MyClass _module.MyClass$A@@13 _module.MyClass$B@@13))) (= |_k#0@@3| (|ORD#FromNat| 0))) (_module.MyClass.R_h _module.MyClass$A@@13 _module.MyClass$B@@13 |_module.MyClass.R#$T@@3| $ly@@3 this@@3 |_k#0@@3|))
 :pattern ( (_module.MyClass.R_h _module.MyClass$A@@13 _module.MyClass$B@@13 |_module.MyClass.R#$T@@3| $ly@@3 this@@3 |_k#0@@3|))
))))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((x@@7 T@U) (T@@3 T@T) ) (! (= ($Box T@@3 (Lit T@@3 x@@7)) (Lit BoxType ($Box T@@3 x@@7)))
 :pattern ( ($Box T@@3 (Lit T@@3 x@@7)))
)))
(assert (= (Ctor charType) 7))
(assert (forall ((h@@0 T@U) (v@@0 T@U) ) (! ($IsAlloc charType v@@0 TChar h@@0)
 :pattern ( ($IsAlloc charType v@@0 TChar h@@0))
)))
(assert (forall ((h@@1 T@U) (v@@1 T@U) ) (! ($IsAlloc BoxType v@@1 TORDINAL h@@1)
 :pattern ( ($IsAlloc BoxType v@@1 TORDINAL h@@1))
)))
(assert (forall ((v@@2 T@U) ) (! ($Is charType v@@2 TChar)
 :pattern ( ($Is charType v@@2 TChar))
)))
(assert (forall ((v@@3 T@U) ) (! ($Is BoxType v@@3 TORDINAL)
 :pattern ( ($Is BoxType v@@3 TORDINAL))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun _module.MyClass$A@@14 () T@U)
(declare-fun _module.MyClass$B@@14 () T@U)
(declare-fun this@@4 () T@U)
(declare-fun |_k#0@@4| () T@U)
(declare-fun $LZ () T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $Heap@2 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun $Heap@0 () T@U)
(declare-fun |_k##0@0| () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun |##_k#0@0| () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun $Heap () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 13) (let ((GeneratedUnifiedExit_correct  (and (=> (= (ControlFlow 0 2) (- 0 3)) (=> (|_module.MyClass.R_h#canCall| _module.MyClass$A@@14 _module.MyClass$B@@14 TChar this@@4 |_k#0@@4|) (or (_module.MyClass.R_h _module.MyClass$A@@14 _module.MyClass$B@@14 TChar ($LS $LZ) this@@4 |_k#0@@4|) (=> (< 0 (|ORD#Offset| |_k#0@@4|)) (_module.MyClass.R_h _module.MyClass$A@@14 _module.MyClass$B@@14 TChar ($LS ($LS $LZ)) this@@4 (|ORD#Minus| |_k#0@@4| (|ORD#FromNat| 1))))))) (=> (=> (|_module.MyClass.R_h#canCall| _module.MyClass$A@@14 _module.MyClass$B@@14 TChar this@@4 |_k#0@@4|) (or (_module.MyClass.R_h _module.MyClass$A@@14 _module.MyClass$B@@14 TChar ($LS $LZ) this@@4 |_k#0@@4|) (=> (< 0 (|ORD#Offset| |_k#0@@4|)) (_module.MyClass.R_h _module.MyClass$A@@14 _module.MyClass$B@@14 TChar ($LS ($LS $LZ)) this@@4 (|ORD#Minus| |_k#0@@4| (|ORD#FromNat| 1)))))) (=> (= (ControlFlow 0 2) (- 0 1)) (=> (|_module.MyClass.R_h#canCall| _module.MyClass$A@@14 _module.MyClass$B@@14 TChar this@@4 |_k#0@@4|) (or (_module.MyClass.R_h _module.MyClass$A@@14 _module.MyClass$B@@14 TChar ($LS $LZ) this@@4 |_k#0@@4|) (=> (= (LitInt 0) (|ORD#Offset| |_k#0@@4|)) (forall ((|_k'#1@@1| T@U) ) (!  (=> (|ORD#Less| |_k'#1@@1| |_k#0@@4|) (_module.MyClass.R_h _module.MyClass$A@@14 _module.MyClass$B@@14 TChar ($LS ($LS $LZ)) this@@4 |_k'#1@@1|))
 :pattern ( (_module.MyClass.R_h _module.MyClass$A@@14 _module.MyClass$B@@14 TChar ($LS ($LS $LZ)) this@@4 |_k'#1@@1|))
))))))))))
(let ((anon3_Else_correct  (=> (<= (|ORD#Offset| |_k#0@@4|) 0) (=> (and (and (and ($IsGoodHeap $Heap@2) ($IsHeapAnchor $Heap@2)) (= $Heap@0 $Heap@2)) (and (forall ((|_k'#3| T@U) ) (!  (=> (|ORD#Less| |_k'#3| |_k#0@@4|) (_module.MyClass.R_h _module.MyClass$A@@14 _module.MyClass$B@@14 TChar ($LS $LZ) this@@4 |_k'#3|))
 :pattern ( (_module.MyClass.R_h _module.MyClass$A@@14 _module.MyClass$B@@14 TChar ($LS $LZ) this@@4 |_k'#3|))
 :pattern ( (|ORD#Less| |_k'#3| |_k#0@@4|))
)) (= (ControlFlow 0 11) 2))) GeneratedUnifiedExit_correct))))
(let ((anon3_Then_correct  (=> (< 0 (|ORD#Offset| |_k#0@@4|)) (and (=> (= (ControlFlow 0 4) (- 0 10)) (|ORD#IsNat| (Lit BoxType (|ORD#FromNat| 1)))) (=> (|ORD#IsNat| (Lit BoxType (|ORD#FromNat| 1))) (and (=> (= (ControlFlow 0 4) (- 0 9)) (<= (|ORD#Offset| (Lit BoxType (|ORD#FromNat| 1))) (|ORD#Offset| |_k#0@@4|))) (=> (<= (|ORD#Offset| (Lit BoxType (|ORD#FromNat| 1))) (|ORD#Offset| |_k#0@@4|)) (=> (= |_k##0@0| (|ORD#Minus| |_k#0@@4| (|ORD#FromNat| 1))) (=> (and (and (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1)) (|_module.MyClass.R_h#canCall| _module.MyClass$A@@14 _module.MyClass$B@@14 TChar this@@4 |_k##0@0|)) (and (and (|_module.MyClass.R_h#canCall| _module.MyClass$A@@14 _module.MyClass$B@@14 TChar this@@4 |_k##0@0|) (and (_module.MyClass.R_h _module.MyClass$A@@14 _module.MyClass$B@@14 TChar ($LS $LZ) this@@4 |_k##0@0|) (and (=> (< 0 (|ORD#Offset| |_k##0@0|)) (_module.MyClass.R_h _module.MyClass$A@@14 _module.MyClass$B@@14 TChar ($LS $LZ) this@@4 (|ORD#Minus| |_k##0@0| (|ORD#FromNat| 1)))) (=> (= (LitInt 0) (|ORD#Offset| |_k##0@0|)) (forall ((|_k'#0@@1| T@U) ) (!  (=> (|ORD#Less| |_k'#0@@1| |_k##0@0|) (_module.MyClass.R_h _module.MyClass$A@@14 _module.MyClass$B@@14 TChar ($LS $LZ) this@@4 |_k'#0@@1|))
 :pattern ( (_module.MyClass.R_h _module.MyClass$A@@14 _module.MyClass$B@@14 TChar ($LS $LZ) this@@4 |_k'#0@@1|))
)))))) (and (= $Heap@0 $Heap@1) ($IsAllocBox ($Box refType this@@4) (Tclass._module.MyClass? _module.MyClass$A@@14 _module.MyClass$B@@14) $Heap@1)))) (and (=> (= (ControlFlow 0 4) (- 0 8)) (|ORD#IsNat| (Lit BoxType (|ORD#FromNat| 1)))) (=> (|ORD#IsNat| (Lit BoxType (|ORD#FromNat| 1))) (and (=> (= (ControlFlow 0 4) (- 0 7)) (<= (|ORD#Offset| (Lit BoxType (|ORD#FromNat| 1))) (|ORD#Offset| |_k#0@@4|))) (=> (<= (|ORD#Offset| (Lit BoxType (|ORD#FromNat| 1))) (|ORD#Offset| |_k#0@@4|)) (=> (and (and (= |##_k#0@0| (|ORD#Minus| |_k#0@@4| (|ORD#FromNat| 1))) ($IsAlloc BoxType |##_k#0@0| TORDINAL $Heap@1)) (and (|_module.MyClass.R_h#canCall| _module.MyClass$A@@14 _module.MyClass$B@@14 TChar this@@4 (|ORD#Minus| |_k#0@@4| (|ORD#FromNat| 1))) (|_module.MyClass.R_h#canCall| _module.MyClass$A@@14 _module.MyClass$B@@14 TChar this@@4 (|ORD#Minus| |_k#0@@4| (|ORD#FromNat| 1))))) (and (=> (= (ControlFlow 0 4) (- 0 6)) (=> (|_module.MyClass.R_h#canCall| _module.MyClass$A@@14 _module.MyClass$B@@14 TChar this@@4 (|ORD#Minus| |_k#0@@4| (|ORD#FromNat| 1))) (or (_module.MyClass.R_h _module.MyClass$A@@14 _module.MyClass$B@@14 TChar ($LS $LZ) this@@4 (|ORD#Minus| |_k#0@@4| (|ORD#FromNat| 1))) (=> (< 0 (|ORD#Offset| (|ORD#Minus| |_k#0@@4| (|ORD#FromNat| 1)))) (_module.MyClass.R_h _module.MyClass$A@@14 _module.MyClass$B@@14 TChar ($LS ($LS $LZ)) this@@4 (|ORD#Minus| (|ORD#Minus| |_k#0@@4| (|ORD#FromNat| 1)) (|ORD#FromNat| 1))))))) (and (=> (= (ControlFlow 0 4) (- 0 5)) (=> (|_module.MyClass.R_h#canCall| _module.MyClass$A@@14 _module.MyClass$B@@14 TChar this@@4 (|ORD#Minus| |_k#0@@4| (|ORD#FromNat| 1))) (or (_module.MyClass.R_h _module.MyClass$A@@14 _module.MyClass$B@@14 TChar ($LS $LZ) this@@4 (|ORD#Minus| |_k#0@@4| (|ORD#FromNat| 1))) (=> (= (LitInt 0) (|ORD#Offset| (|ORD#Minus| |_k#0@@4| (|ORD#FromNat| 1)))) (forall ((|_k'#2@@1| T@U) ) (!  (=> (|ORD#Less| |_k'#2@@1| (|ORD#Minus| |_k#0@@4| (|ORD#FromNat| 1))) (_module.MyClass.R_h _module.MyClass$A@@14 _module.MyClass$B@@14 TChar ($LS ($LS $LZ)) this@@4 |_k'#2@@1|))
 :pattern ( (_module.MyClass.R_h _module.MyClass$A@@14 _module.MyClass$B@@14 TChar ($LS ($LS $LZ)) this@@4 |_k'#2@@1|))
)))))) (=> (and (_module.MyClass.R_h _module.MyClass$A@@14 _module.MyClass$B@@14 TChar ($LS $LZ) this@@4 (|ORD#Minus| |_k#0@@4| (|ORD#FromNat| 1))) (= (ControlFlow 0 4) 2)) GeneratedUnifiedExit_correct)))))))))))))))))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (=> (and (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (and (= $Heap $Heap@0) (forall ((|$ih#_k0#0| T@U) ) (!  (=> (and (U_2_bool (Lit boolType (bool_2_U true))) (|ORD#Less| |$ih#_k0#0| |_k#0@@4|)) (_module.MyClass.R_h _module.MyClass$A@@14 _module.MyClass$B@@14 TChar ($LS $LZ) this@@4 |$ih#_k0#0|))
 :pattern ( (_module.MyClass.R_h _module.MyClass$A@@14 _module.MyClass$B@@14 TChar ($LS $LZ) this@@4 |$ih#_k0#0|))
)))) (and (=> (= (ControlFlow 0 12) 4) anon3_Then_correct) (=> (= (ControlFlow 0 12) 11) anon3_Else_correct))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (=> (and (and (or (not (= this@@4 null)) (not true)) (and ($Is refType this@@4 (Tclass._module.MyClass _module.MyClass$A@@14 _module.MyClass$B@@14)) ($IsAlloc refType this@@4 (Tclass._module.MyClass _module.MyClass$A@@14 _module.MyClass$B@@14) $Heap))) (and (= 3 $FunctionContextHeight) (= (ControlFlow 0 13) 12))) anon0_correct))))
PreconditionGeneratedEntry_correct))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
