(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (Bool) T@U)
(declare-fun $generated@@7 (T@U) Bool)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun $generated@@9 (T@U) Int)
(declare-fun $generated@@10 (Real) T@U)
(declare-fun $generated@@11 (T@U) Real)
(declare-fun $generated@@18 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@19 () T@U)
(declare-fun $generated@@22 () Int)
(declare-fun $generated@@23 (T@U Int) Int)
(declare-fun $generated@@24 (T@U) T@U)
(declare-fun $generated@@25 (Int) Bool)
(declare-fun $generated@@26 (Int) Int)
(declare-fun $generated@@29 (T@U T@U) Bool)
(declare-fun $generated@@30 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@31 () T@T)
(declare-fun $generated@@32 () T@T)
(declare-fun $generated@@33 () T@T)
(declare-fun $generated@@34 (T@T T@T) T@T)
(declare-fun $generated@@35 (T@T T@U) T@U)
(declare-fun $generated@@36 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@37 (T@T) T@T)
(declare-fun $generated@@38 (T@T) T@T)
(declare-fun $generated@@60 (T@T T@U) T@U)
(declare-fun $generated@@65 (T@T T@U) T@U)
(declare-fun $generated@@68 (T@T T@U T@U) Bool)
(declare-fun $generated@@82 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@83 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@84 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@116 (T@U) T@U)
(declare-fun $generated@@117 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@4) 1)) (= ($generated@@2 $generated@@5) 2)) (forall (($generated@@12 Bool) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Int) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Real) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))))
(assert (distinct $generated $generated@@0 $generated@@1)
)
(assert (forall (($generated@@20 T@U) ($generated@@21 T@U) ) (! ($generated@@18 $generated@@4 $generated@@20 $generated@@19 $generated@@21)
 :pattern ( ($generated@@18 $generated@@4 $generated@@20 $generated@@19 $generated@@21))
)))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@27 T@U) ($generated@@28 Int) ) (!  (=> (or ($generated@@25 $generated@@28) (and (< 0 $generated@@22) (<= ($generated@@26 0) $generated@@28))) (and (=> (or (not (= $generated@@28 ($generated@@26 0))) (not true)) ($generated@@25 (- $generated@@28 1))) (= ($generated@@23 ($generated@@24 $generated@@27) $generated@@28) (ite (= $generated@@28 ($generated@@26 0)) 0 (+ 1 ($generated@@23 $generated@@27 (- $generated@@28 1)))))))
 :pattern ( ($generated@@23 ($generated@@24 $generated@@27) $generated@@28))
))))
(assert  (and (and (and (and (and (and (and (forall (($generated@@39 T@T) ($generated@@40 T@T) ($generated@@41 T@U) ($generated@@42 T@U) ($generated@@43 T@U) ) (! (= ($generated@@30 $generated@@39 $generated@@40 ($generated@@36 $generated@@39 $generated@@40 $generated@@42 $generated@@43 $generated@@41) $generated@@43) $generated@@41)
 :weight 0
)) (forall (($generated@@44 T@T) ($generated@@45 T@T) ($generated@@46 T@U) ($generated@@47 T@U) ($generated@@48 T@U) ($generated@@49 T@U) ) (!  (or (= $generated@@48 $generated@@49) (= ($generated@@30 $generated@@44 $generated@@45 ($generated@@36 $generated@@44 $generated@@45 $generated@@47 $generated@@48 $generated@@46) $generated@@49) ($generated@@30 $generated@@44 $generated@@45 $generated@@47 $generated@@49)))
 :weight 0
))) (= ($generated@@2 $generated@@31) 3)) (= ($generated@@2 $generated@@32) 4)) (= ($generated@@2 $generated@@33) 5)) (forall (($generated@@50 T@T) ($generated@@51 T@T) ) (= ($generated@@2 ($generated@@34 $generated@@50 $generated@@51)) 6))) (forall (($generated@@52 T@T) ($generated@@53 T@T) ) (! (= ($generated@@37 ($generated@@34 $generated@@52 $generated@@53)) $generated@@52)
 :pattern ( ($generated@@34 $generated@@52 $generated@@53))
))) (forall (($generated@@54 T@T) ($generated@@55 T@T) ) (! (= ($generated@@38 ($generated@@34 $generated@@54 $generated@@55)) $generated@@55)
 :pattern ( ($generated@@34 $generated@@54 $generated@@55))
))))
(assert (forall (($generated@@56 T@U) ($generated@@57 T@U) ) (!  (=> ($generated@@29 $generated@@56 $generated@@57) (forall (($generated@@58 T@U) ) (!  (=> ($generated@@7 ($generated@@35 $generated@@3 ($generated@@30 $generated@@31 $generated@@32 ($generated@@30 $generated@@33 ($generated@@34 $generated@@31 $generated@@32) $generated@@56 $generated@@58) $generated))) ($generated@@7 ($generated@@35 $generated@@3 ($generated@@30 $generated@@31 $generated@@32 ($generated@@30 $generated@@33 ($generated@@34 $generated@@31 $generated@@32) $generated@@57 $generated@@58) $generated))))
 :pattern ( ($generated@@30 $generated@@31 $generated@@32 ($generated@@30 $generated@@33 ($generated@@34 $generated@@31 $generated@@32) $generated@@57 $generated@@58) $generated))
)))
 :pattern ( ($generated@@29 $generated@@56 $generated@@57))
)))
(assert (forall (($generated@@59 Int) ) (! (= ($generated@@26 $generated@@59) $generated@@59)
 :pattern ( ($generated@@26 $generated@@59))
)))
(assert (forall (($generated@@61 T@U) ($generated@@62 T@T) ) (! (= ($generated@@60 $generated@@62 $generated@@61) $generated@@61)
 :pattern ( ($generated@@60 $generated@@62 $generated@@61))
)))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@63 T@U) ($generated@@64 Int) ) (!  (=> (or ($generated@@25 ($generated@@26 $generated@@64)) (and (< 0 $generated@@22) (<= ($generated@@26 0) $generated@@64))) (and (=> (or (not (= ($generated@@26 $generated@@64) ($generated@@26 0))) (not true)) ($generated@@25 ($generated@@26 (- $generated@@64 1)))) (= ($generated@@23 ($generated@@24 $generated@@63) ($generated@@26 $generated@@64)) (ite (= ($generated@@26 $generated@@64) ($generated@@26 0)) 0 (+ 1 ($generated@@23 ($generated@@24 $generated@@63) ($generated@@26 (- $generated@@64 1))))))))
 :weight 3
 :pattern ( ($generated@@23 ($generated@@24 $generated@@63) ($generated@@26 $generated@@64)))
))))
(assert (forall (($generated@@66 T@U) ($generated@@67 T@T) ) (! (= ($generated@@65 $generated@@67 ($generated@@35 $generated@@67 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@35 $generated@@67 $generated@@66))
)))
(assert (forall (($generated@@69 T@U) ) (! (= ($generated@@68 $generated@@4 $generated@@69 $generated@@19) (<= ($generated@@26 0) ($generated@@9 $generated@@69)))
 :pattern ( ($generated@@68 $generated@@4 $generated@@69 $generated@@19))
)))
(assert (forall (($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@T) ) (!  (=> ($generated@@29 $generated@@70 $generated@@71) (=> ($generated@@18 $generated@@74 $generated@@72 $generated@@73 $generated@@70) ($generated@@18 $generated@@74 $generated@@72 $generated@@73 $generated@@71)))
 :pattern ( ($generated@@29 $generated@@70 $generated@@71) ($generated@@18 $generated@@74 $generated@@72 $generated@@73 $generated@@70))
)))
(assert (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (!  (=> (or (not (= $generated@@75 $generated@@77)) (not true)) (=> (and ($generated@@29 $generated@@75 $generated@@76) ($generated@@29 $generated@@76 $generated@@77)) ($generated@@29 $generated@@75 $generated@@77)))
 :pattern ( ($generated@@29 $generated@@75 $generated@@76) ($generated@@29 $generated@@76 $generated@@77))
)))
(assert (forall (($generated@@78 T@U) ($generated@@79 T@T) ) (! (= ($generated@@35 $generated@@79 ($generated@@65 $generated@@79 $generated@@78)) $generated@@78)
 :pattern ( ($generated@@65 $generated@@79 $generated@@78))
)))
(assert (forall (($generated@@80 T@U) ($generated@@81 Int) ) (! (= ($generated@@23 ($generated@@24 $generated@@80) $generated@@81) ($generated@@23 $generated@@80 $generated@@81))
 :pattern ( ($generated@@23 ($generated@@24 $generated@@80) $generated@@81))
)))
(assert  (and (forall (($generated@@85 T@T) ($generated@@86 T@T) ($generated@@87 T@T) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ) (! (= ($generated@@82 $generated@@85 $generated@@86 $generated@@87 ($generated@@84 $generated@@85 $generated@@86 $generated@@87 $generated@@89 $generated@@90 $generated@@91 $generated@@88) $generated@@90 $generated@@91) $generated@@88)
 :weight 0
)) (and (forall (($generated@@92 T@T) ($generated@@93 T@T) ($generated@@94 T@T) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ) (!  (or (= $generated@@97 $generated@@99) (= ($generated@@82 $generated@@92 $generated@@93 $generated@@94 ($generated@@84 $generated@@92 $generated@@93 $generated@@94 $generated@@96 $generated@@97 $generated@@98 $generated@@95) $generated@@99 $generated@@100) ($generated@@82 $generated@@92 $generated@@93 $generated@@94 $generated@@96 $generated@@99 $generated@@100)))
 :weight 0
)) (forall (($generated@@101 T@T) ($generated@@102 T@T) ($generated@@103 T@T) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ) (!  (or (= $generated@@107 $generated@@109) (= ($generated@@82 $generated@@101 $generated@@102 $generated@@103 ($generated@@84 $generated@@101 $generated@@102 $generated@@103 $generated@@105 $generated@@106 $generated@@107 $generated@@104) $generated@@108 $generated@@109) ($generated@@82 $generated@@101 $generated@@102 $generated@@103 $generated@@105 $generated@@108 $generated@@109)))
 :weight 0
)))))
(assert (forall (($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 Bool) ($generated@@114 T@U) ($generated@@115 T@U) ) (! (= ($generated@@7 ($generated@@82 $generated@@33 $generated@@31 $generated@@3 ($generated@@83 $generated@@110 $generated@@111 $generated@@112 $generated@@113) $generated@@114 $generated@@115))  (=> (and (or (not (= $generated@@114 $generated@@110)) (not true)) ($generated@@7 ($generated@@35 $generated@@3 ($generated@@30 $generated@@31 $generated@@32 ($generated@@30 $generated@@33 ($generated@@34 $generated@@31 $generated@@32) $generated@@111 $generated@@114) $generated@@112)))) $generated@@113))
 :pattern ( ($generated@@82 $generated@@33 $generated@@31 $generated@@3 ($generated@@83 $generated@@110 $generated@@111 $generated@@112 $generated@@113) $generated@@114 $generated@@115))
)))
(assert (= ($generated@@116 $generated@@19) $generated@@0))
(assert (= ($generated@@117 $generated@@19) $generated@@1))
(assert (forall (($generated@@118 Int) ) (! (= ($generated@@65 $generated@@4 ($generated@@8 ($generated@@26 $generated@@118))) ($generated@@60 $generated@@32 ($generated@@65 $generated@@4 ($generated@@8 $generated@@118))))
 :pattern ( ($generated@@65 $generated@@4 ($generated@@8 ($generated@@26 $generated@@118))))
)))
(assert (forall (($generated@@119 T@U) ($generated@@120 T@T) ) (! (= ($generated@@65 $generated@@120 ($generated@@60 $generated@@120 $generated@@119)) ($generated@@60 $generated@@32 ($generated@@65 $generated@@120 $generated@@119)))
 :pattern ( ($generated@@65 $generated@@120 ($generated@@60 $generated@@120 $generated@@119)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@121 () Int)
(declare-fun $generated@@122 () Int)
(declare-fun $generated@@123 () T@U)
(declare-fun $generated@@124 () Bool)
(declare-fun $generated@@125 () Int)
(declare-fun $generated@@126 () Int)
(declare-fun $generated@@127 () Int)
(declare-fun $generated@@128 () T@U)
(declare-fun $generated@@129 () T@U)
(declare-fun $generated@@130 () T@U)
(declare-fun $generated@@131 () Int)
(declare-fun $generated@@132 () Int)
(declare-fun $generated@@133 (T@U) Bool)
(declare-fun $generated@@134 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 21) (let (($generated@@135 true))
(let (($generated@@136  (=> (and (not (and (<= ($generated@@26 0) $generated@@121) (<= $generated@@121 $generated@@122))) (= (ControlFlow 0 12) 9)) $generated@@135)))
(let (($generated@@137  (=> (and (<= ($generated@@26 0) $generated@@121) (<= $generated@@121 $generated@@122)) (and (=> (= (ControlFlow 0 10) (- 0 11)) ($generated@@68 $generated@@4 ($generated@@8 $generated@@121) $generated@@19)) (=> ($generated@@68 $generated@@4 ($generated@@8 $generated@@121) $generated@@19) (=> ($generated@@18 $generated@@4 ($generated@@8 $generated@@121) $generated@@19 $generated@@123) (=> (and ($generated@@25 $generated@@121) (= (ControlFlow 0 10) 9)) $generated@@135)))))))
(let (($generated@@138  (=> (< $generated@@121 ($generated@@26 0)) (and (=> (= (ControlFlow 0 14) 10) $generated@@137) (=> (= (ControlFlow 0 14) 12) $generated@@136)))))
(let (($generated@@139  (=> (<= ($generated@@26 0) $generated@@121) (and (=> (= (ControlFlow 0 13) 10) $generated@@137) (=> (= (ControlFlow 0 13) 12) $generated@@136)))))
(let (($generated@@140  (and (=> (= (ControlFlow 0 15) 13) $generated@@139) (=> (= (ControlFlow 0 15) 14) $generated@@138))))
(let (($generated@@141 true))
(let (($generated@@142  (=> (not $generated@@124) (and (=> (= (ControlFlow 0 16) 15) $generated@@140) (=> (= (ControlFlow 0 16) 8) $generated@@141)))))
(let (($generated@@143  (=> (< $generated@@122 $generated@@125) (=> (and (= $generated@@126 (- $generated@@125 $generated@@122)) (= $generated@@127 (+ $generated@@122 1))) (and (=> (= (ControlFlow 0 4) (- 0 6)) (or (<= 0 $generated@@126) (= (- $generated@@125 $generated@@127) $generated@@126))) (=> (or (<= 0 $generated@@126) (= (- $generated@@125 $generated@@127) $generated@@126)) (and (=> (= (ControlFlow 0 4) (- 0 5)) (< (- $generated@@125 $generated@@127) $generated@@126)) (=> (< (- $generated@@125 $generated@@127) $generated@@126) (=> (and (and (forall (($generated@@144 Int) ) (!  (=> (and (<= ($generated@@26 0) $generated@@144) (<= $generated@@144 $generated@@127)) ($generated@@25 $generated@@144))
 :pattern ( ($generated@@23 ($generated@@24 $generated@@128) $generated@@144))
)) (= (ControlFlow 0 4) (- 0 3))) $generated@@124) (forall (($generated@@145 Int) ) (!  (=> (and (<= ($generated@@26 0) $generated@@145) (<= $generated@@145 $generated@@127)) (= ($generated@@23 ($generated@@24 ($generated@@24 $generated@@128)) $generated@@145) $generated@@145))
 :pattern ( ($generated@@23 ($generated@@24 ($generated@@24 $generated@@128)) $generated@@145))
)))))))))))
(let (($generated@@146 true))
(let (($generated@@147  (=> $generated@@124 (and (=> (= (ControlFlow 0 7) 2) $generated@@146) (=> (= (ControlFlow 0 7) 4) $generated@@143)))))
(let (($generated@@148  (and (=> (= (ControlFlow 0 17) 16) $generated@@142) (=> (= (ControlFlow 0 17) 7) $generated@@147))))
(let (($generated@@149 true))
(let (($generated@@150  (=> (and (and (and (and (not false) (<= 0 $generated@@122)) (=> $generated@@124 (forall (($generated@@151 Int) ) (!  (=> (and (<= ($generated@@26 0) $generated@@151) (<= $generated@@151 $generated@@122)) ($generated@@25 $generated@@151))
 :pattern ( ($generated@@23 ($generated@@24 $generated@@128) $generated@@151))
)))) (and (=> $generated@@124 (forall (($generated@@152 Int) ) (!  (=> (and (<= ($generated@@26 0) $generated@@152) (<= $generated@@152 $generated@@122)) (= ($generated@@23 ($generated@@24 ($generated@@24 $generated@@128)) $generated@@152) $generated@@152))
 :pattern ( ($generated@@23 ($generated@@24 ($generated@@24 $generated@@128)) $generated@@152))
))) (=> $generated@@124 (forall (($generated@@153 Int) ) (!  (=> (and (<= ($generated@@26 0) $generated@@153) (<= $generated@@153 $generated@@122)) (= ($generated@@23 ($generated@@24 $generated@@128) $generated@@153) $generated@@153))
 :pattern ( ($generated@@23 ($generated@@24 $generated@@128) $generated@@153))
))))) (and (and (forall (($generated@@154 T@U) ) (!  (=> (and (or (not (= $generated@@154 $generated@@129)) (not true)) ($generated@@7 ($generated@@35 $generated@@3 ($generated@@30 $generated@@31 $generated@@32 ($generated@@30 $generated@@33 ($generated@@34 $generated@@31 $generated@@32) $generated@@123 $generated@@154) $generated)))) (= ($generated@@30 $generated@@33 ($generated@@34 $generated@@31 $generated@@32) $generated@@123 $generated@@154) ($generated@@30 $generated@@33 ($generated@@34 $generated@@31 $generated@@32) $generated@@123 $generated@@154)))
 :pattern ( ($generated@@30 $generated@@33 ($generated@@34 $generated@@31 $generated@@32) $generated@@123 $generated@@154))
)) ($generated@@29 $generated@@123 $generated@@123)) (and (forall (($generated@@155 T@U) ($generated@@156 T@U) ) (!  (=> (and (or (not (= $generated@@155 $generated@@129)) (not true)) ($generated@@7 ($generated@@35 $generated@@3 ($generated@@30 $generated@@31 $generated@@32 ($generated@@30 $generated@@33 ($generated@@34 $generated@@31 $generated@@32) $generated@@123 $generated@@155) $generated)))) (or (= ($generated@@30 $generated@@31 $generated@@32 ($generated@@30 $generated@@33 ($generated@@34 $generated@@31 $generated@@32) $generated@@123 $generated@@155) $generated@@156) ($generated@@30 $generated@@31 $generated@@32 ($generated@@30 $generated@@33 ($generated@@34 $generated@@31 $generated@@32) $generated@@123 $generated@@155) $generated@@156)) ($generated@@7 ($generated@@82 $generated@@33 $generated@@31 $generated@@3 $generated@@130 $generated@@155 $generated@@156))))
 :pattern ( ($generated@@30 $generated@@31 $generated@@32 ($generated@@30 $generated@@33 ($generated@@34 $generated@@31 $generated@@32) $generated@@123 $generated@@155) $generated@@156))
)) (<= (- $generated@@125 $generated@@122) $generated@@131)))) (and (=> (= (ControlFlow 0 18) 1) $generated@@149) (=> (= (ControlFlow 0 18) 17) $generated@@148)))))
(let (($generated@@157  (=> (= $generated@@130 ($generated@@83 $generated@@129 $generated@@123 $generated false)) (=> (and (= $generated@@132 ($generated@@26 0)) (= $generated@@131 (- $generated@@125 $generated@@132))) (and (=> (= (ControlFlow 0 19) (- 0 20)) (=> $generated@@124 (forall (($generated@@158 Int) ) (!  (=> (and (<= ($generated@@26 0) $generated@@158) (<= $generated@@158 $generated@@132)) (= ($generated@@23 ($generated@@24 ($generated@@24 $generated@@128)) $generated@@158) $generated@@158))
 :pattern ( ($generated@@23 ($generated@@24 ($generated@@24 $generated@@128)) $generated@@158))
)))) (=> (=> $generated@@124 (forall (($generated@@159 Int) ) (!  (=> (and (<= ($generated@@26 0) $generated@@159) (<= $generated@@159 $generated@@132)) (= ($generated@@23 ($generated@@24 ($generated@@24 $generated@@128)) $generated@@159) $generated@@159))
 :pattern ( ($generated@@23 ($generated@@24 ($generated@@24 $generated@@128)) $generated@@159))
))) (=> (= (ControlFlow 0 19) 18) $generated@@150)))))))
(let (($generated@@160  (=> (and (and (and ($generated@@133 $generated@@123) ($generated@@134 $generated@@123)) (<= ($generated@@26 0) $generated@@125)) (and (= 1 $generated@@22) (= (ControlFlow 0 21) 19))) $generated@@157)))
$generated@@160)))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
