(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 (T@T) Int)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (T@U) Bool)
(declare-fun $generated@@13 (Int) T@U)
(declare-fun $generated@@14 (T@U) Int)
(declare-fun $generated@@15 (Real) T@U)
(declare-fun $generated@@16 (T@U) Real)
(declare-fun $generated@@23 () Int)
(declare-fun $generated@@24 (T@U) Int)
(declare-fun $generated@@25 (T@T T@U) T@U)
(declare-fun $generated@@26 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@27 () T@T)
(declare-fun $generated@@28 () T@T)
(declare-fun $generated@@29 () T@T)
(declare-fun $generated@@30 (T@T T@T) T@T)
(declare-fun $generated@@31 (T@U) Bool)
(declare-fun $generated@@32 () T@U)
(declare-fun $generated@@33 (T@U) T@U)
(declare-fun $generated@@34 () T@U)
(declare-fun $generated@@35 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@36 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@37 (T@T) T@T)
(declare-fun $generated@@38 (T@T) T@T)
(declare-fun $generated@@58 (T@U) T@U)
(declare-fun $generated@@59 (T@T T@U T@U) Bool)
(declare-fun $generated@@61 () T@U)
(declare-fun $generated@@64 () T@U)
(declare-fun $generated@@69 (T@U T@U) Bool)
(declare-fun $generated@@73 (Int) Int)
(declare-fun $generated@@75 (T@T T@U) T@U)
(declare-fun $generated@@78 (T@T T@U) T@U)
(declare-fun $generated@@94 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@95 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@96 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@128 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@7 $generated@@8) 0) (= ($generated@@7 $generated@@9) 1)) (= ($generated@@7 $generated@@10) 2)) (forall (($generated@@17 Bool) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Int) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@16 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 T@U) ) (! (= ($generated@@15 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6)
)
(assert  (and (and (and (and (and (and (and (forall (($generated@@39 T@T) ($generated@@40 T@T) ($generated@@41 T@U) ($generated@@42 T@U) ($generated@@43 T@U) ) (! (= ($generated@@26 $generated@@39 $generated@@40 ($generated@@36 $generated@@39 $generated@@40 $generated@@42 $generated@@43 $generated@@41) $generated@@43) $generated@@41)
 :weight 0
)) (forall (($generated@@44 T@T) ($generated@@45 T@T) ($generated@@46 T@U) ($generated@@47 T@U) ($generated@@48 T@U) ($generated@@49 T@U) ) (!  (or (= $generated@@48 $generated@@49) (= ($generated@@26 $generated@@44 $generated@@45 ($generated@@36 $generated@@44 $generated@@45 $generated@@47 $generated@@48 $generated@@46) $generated@@49) ($generated@@26 $generated@@44 $generated@@45 $generated@@47 $generated@@49)))
 :weight 0
))) (= ($generated@@7 $generated@@27) 3)) (= ($generated@@7 $generated@@28) 4)) (= ($generated@@7 $generated@@29) 5)) (forall (($generated@@50 T@T) ($generated@@51 T@T) ) (= ($generated@@7 ($generated@@30 $generated@@50 $generated@@51)) 6))) (forall (($generated@@52 T@T) ($generated@@53 T@T) ) (! (= ($generated@@37 ($generated@@30 $generated@@52 $generated@@53)) $generated@@52)
 :pattern ( ($generated@@30 $generated@@52 $generated@@53))
))) (forall (($generated@@54 T@T) ($generated@@55 T@T) ) (! (= ($generated@@38 ($generated@@30 $generated@@54 $generated@@55)) $generated@@55)
 :pattern ( ($generated@@30 $generated@@54 $generated@@55))
))))
(assert  (=> (< 0 $generated@@23) (forall (($generated@@56 T@U) ($generated@@57 T@U) ) (!  (=> (and (and ($generated@@31 $generated@@56) (and (or (not (= $generated@@57 $generated@@32)) (not true)) (= ($generated@@33 $generated@@57) $generated@@34))) ($generated@@12 ($generated@@25 $generated@@8 ($generated@@26 $generated@@27 $generated@@28 ($generated@@26 $generated@@29 ($generated@@30 $generated@@27 $generated@@28) $generated@@56 $generated@@57) $generated@@1)))) ($generated@@35 $generated@@9 ($generated@@13 ($generated@@24 $generated@@57)) $generated $generated@@56))
 :pattern ( ($generated@@24 $generated@@57) ($generated@@25 $generated@@8 ($generated@@26 $generated@@27 $generated@@28 ($generated@@26 $generated@@29 ($generated@@30 $generated@@27 $generated@@28) $generated@@56 $generated@@57) $generated@@1)))
))))
(assert (= ($generated@@58 $generated) $generated@@0))
(assert (forall (($generated@@60 T@U) ) (! (= ($generated@@59 $generated@@29 $generated@@60 $generated@@34)  (or (= $generated@@60 $generated@@32) (= ($generated@@33 $generated@@60) $generated@@34)))
 :pattern ( ($generated@@59 $generated@@29 $generated@@60 $generated@@34))
)))
(assert (forall (($generated@@62 T@U) ($generated@@63 T@U) ) (! (= ($generated@@35 $generated@@29 $generated@@62 $generated@@61 $generated@@63) ($generated@@35 $generated@@29 $generated@@62 $generated@@34 $generated@@63))
 :pattern ( ($generated@@35 $generated@@29 $generated@@62 $generated@@61 $generated@@63))
 :pattern ( ($generated@@35 $generated@@29 $generated@@62 $generated@@34 $generated@@63))
)))
(assert (forall (($generated@@65 T@U) ($generated@@66 T@U) ) (! (= ($generated@@35 $generated@@29 $generated@@65 $generated@@64 $generated@@66) ($generated@@35 $generated@@29 $generated@@65 $generated@@61 $generated@@66))
 :pattern ( ($generated@@35 $generated@@29 $generated@@65 $generated@@64 $generated@@66))
)))
(assert (forall (($generated@@67 T@U) ($generated@@68 T@U) ) (! (= ($generated@@35 $generated@@29 $generated@@67 $generated@@34 $generated@@68)  (or (= $generated@@67 $generated@@32) ($generated@@12 ($generated@@25 $generated@@8 ($generated@@26 $generated@@27 $generated@@28 ($generated@@26 $generated@@29 ($generated@@30 $generated@@27 $generated@@28) $generated@@68 $generated@@67) $generated@@1)))))
 :pattern ( ($generated@@35 $generated@@29 $generated@@67 $generated@@34 $generated@@68))
)))
(assert (forall (($generated@@70 T@U) ($generated@@71 T@U) ) (!  (=> ($generated@@69 $generated@@70 $generated@@71) (forall (($generated@@72 T@U) ) (!  (=> ($generated@@12 ($generated@@25 $generated@@8 ($generated@@26 $generated@@27 $generated@@28 ($generated@@26 $generated@@29 ($generated@@30 $generated@@27 $generated@@28) $generated@@70 $generated@@72) $generated@@1))) ($generated@@12 ($generated@@25 $generated@@8 ($generated@@26 $generated@@27 $generated@@28 ($generated@@26 $generated@@29 ($generated@@30 $generated@@27 $generated@@28) $generated@@71 $generated@@72) $generated@@1))))
 :pattern ( ($generated@@26 $generated@@27 $generated@@28 ($generated@@26 $generated@@29 ($generated@@30 $generated@@27 $generated@@28) $generated@@71 $generated@@72) $generated@@1))
)))
 :pattern ( ($generated@@69 $generated@@70 $generated@@71))
)))
(assert (forall (($generated@@74 Int) ) (! (= ($generated@@73 $generated@@74) $generated@@74)
 :pattern ( ($generated@@73 $generated@@74))
)))
(assert (forall (($generated@@76 T@U) ($generated@@77 T@T) ) (! (= ($generated@@75 $generated@@77 $generated@@76) $generated@@76)
 :pattern ( ($generated@@75 $generated@@77 $generated@@76))
)))
(assert (forall (($generated@@79 T@U) ($generated@@80 T@T) ) (! (= ($generated@@78 $generated@@80 ($generated@@25 $generated@@80 $generated@@79)) $generated@@79)
 :pattern ( ($generated@@25 $generated@@80 $generated@@79))
)))
(assert  (=> (< 0 $generated@@23) (forall (($generated@@81 T@U) ) (!  (=> (and (or (not (= $generated@@81 $generated@@32)) (not true)) (= ($generated@@33 $generated@@81) $generated@@34)) ($generated@@59 $generated@@9 ($generated@@13 ($generated@@24 $generated@@81)) $generated))
 :pattern ( ($generated@@24 $generated@@81))
))))
(assert (forall (($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@T) ) (!  (=> ($generated@@69 $generated@@82 $generated@@83) (=> ($generated@@35 $generated@@86 $generated@@84 $generated@@85 $generated@@82) ($generated@@35 $generated@@86 $generated@@84 $generated@@85 $generated@@83)))
 :pattern ( ($generated@@69 $generated@@82 $generated@@83) ($generated@@35 $generated@@86 $generated@@84 $generated@@85 $generated@@82))
)))
(assert (forall (($generated@@87 T@U) ) (! (= ($generated@@59 $generated@@29 $generated@@87 $generated@@61)  (and ($generated@@59 $generated@@29 $generated@@87 $generated@@34) (or (not (= $generated@@87 $generated@@32)) (not true))))
 :pattern ( ($generated@@59 $generated@@29 $generated@@87 $generated@@61))
 :pattern ( ($generated@@59 $generated@@29 $generated@@87 $generated@@34))
)))
(assert (forall (($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ) (!  (=> (or (not (= $generated@@88 $generated@@90)) (not true)) (=> (and ($generated@@69 $generated@@88 $generated@@89) ($generated@@69 $generated@@89 $generated@@90)) ($generated@@69 $generated@@88 $generated@@90)))
 :pattern ( ($generated@@69 $generated@@88 $generated@@89) ($generated@@69 $generated@@89 $generated@@90))
)))
(assert (forall (($generated@@91 T@U) ) (! (= ($generated@@59 $generated@@29 $generated@@91 $generated@@64)  (and ($generated@@59 $generated@@29 $generated@@91 $generated@@61) (= ($generated@@24 $generated@@91) ($generated@@73 10))))
 :pattern ( ($generated@@59 $generated@@29 $generated@@91 $generated@@64))
)))
(assert (forall (($generated@@92 T@U) ($generated@@93 T@T) ) (! (= ($generated@@25 $generated@@93 ($generated@@78 $generated@@93 $generated@@92)) $generated@@92)
 :pattern ( ($generated@@78 $generated@@93 $generated@@92))
)))
(assert  (and (forall (($generated@@97 T@T) ($generated@@98 T@T) ($generated@@99 T@T) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ) (! (= ($generated@@94 $generated@@97 $generated@@98 $generated@@99 ($generated@@96 $generated@@97 $generated@@98 $generated@@99 $generated@@101 $generated@@102 $generated@@103 $generated@@100) $generated@@102 $generated@@103) $generated@@100)
 :weight 0
)) (and (forall (($generated@@104 T@T) ($generated@@105 T@T) ($generated@@106 T@T) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ) (!  (or (= $generated@@109 $generated@@111) (= ($generated@@94 $generated@@104 $generated@@105 $generated@@106 ($generated@@96 $generated@@104 $generated@@105 $generated@@106 $generated@@108 $generated@@109 $generated@@110 $generated@@107) $generated@@111 $generated@@112) ($generated@@94 $generated@@104 $generated@@105 $generated@@106 $generated@@108 $generated@@111 $generated@@112)))
 :weight 0
)) (forall (($generated@@113 T@T) ($generated@@114 T@T) ($generated@@115 T@T) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ) (!  (or (= $generated@@119 $generated@@121) (= ($generated@@94 $generated@@113 $generated@@114 $generated@@115 ($generated@@96 $generated@@113 $generated@@114 $generated@@115 $generated@@117 $generated@@118 $generated@@119 $generated@@116) $generated@@120 $generated@@121) ($generated@@94 $generated@@113 $generated@@114 $generated@@115 $generated@@117 $generated@@120 $generated@@121)))
 :weight 0
)))))
(assert (forall (($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 Bool) ($generated@@126 T@U) ($generated@@127 T@U) ) (! (= ($generated@@12 ($generated@@94 $generated@@29 $generated@@27 $generated@@8 ($generated@@95 $generated@@122 $generated@@123 $generated@@124 $generated@@125) $generated@@126 $generated@@127))  (=> (and (or (not (= $generated@@126 $generated@@122)) (not true)) ($generated@@12 ($generated@@25 $generated@@8 ($generated@@26 $generated@@27 $generated@@28 ($generated@@26 $generated@@29 ($generated@@30 $generated@@27 $generated@@28) $generated@@123 $generated@@126) $generated@@124)))) $generated@@125))
 :pattern ( ($generated@@94 $generated@@29 $generated@@27 $generated@@8 ($generated@@95 $generated@@122 $generated@@123 $generated@@124 $generated@@125) $generated@@126 $generated@@127))
)))
(assert (= ($generated@@58 $generated@@61) $generated@@2))
(assert (= ($generated@@128 $generated@@61) $generated@@5))
(assert (= ($generated@@58 $generated@@34) $generated@@3))
(assert (= ($generated@@128 $generated@@34) $generated@@5))
(assert (= ($generated@@58 $generated@@64) $generated@@4))
(assert (= ($generated@@128 $generated@@64) $generated@@6))
(assert (forall (($generated@@129 Int) ) (! (= ($generated@@78 $generated@@9 ($generated@@13 ($generated@@73 $generated@@129))) ($generated@@75 $generated@@28 ($generated@@78 $generated@@9 ($generated@@13 $generated@@129))))
 :pattern ( ($generated@@78 $generated@@9 ($generated@@13 ($generated@@73 $generated@@129))))
)))
(assert (forall (($generated@@130 T@U) ($generated@@131 T@T) ) (! (= ($generated@@78 $generated@@131 ($generated@@75 $generated@@131 $generated@@130)) ($generated@@75 $generated@@28 ($generated@@78 $generated@@131 $generated@@130)))
 :pattern ( ($generated@@78 $generated@@131 ($generated@@75 $generated@@131 $generated@@130)))
)))
(assert (forall (($generated@@132 T@U) ($generated@@133 T@U) ) (! ($generated@@35 $generated@@9 $generated@@133 $generated $generated@@132)
 :pattern ( ($generated@@35 $generated@@9 $generated@@133 $generated $generated@@132))
)))
(assert (forall (($generated@@134 T@U) ) (! ($generated@@59 $generated@@9 $generated@@134 $generated)
 :pattern ( ($generated@@59 $generated@@9 $generated@@134 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@135 () T@U)
(declare-fun $generated@@136 () T@U)
(declare-fun $generated@@137 () T@U)
(declare-fun $generated@@138 () T@U)
(declare-fun $generated@@139 () Int)
(declare-fun $generated@@140 () T@U)
(declare-fun $generated@@141 () T@U)
(declare-fun $generated@@142 (T@U) Bool)
(declare-fun $generated@@143 () Int)
(declare-fun $generated@@144 () T@U)
(declare-fun $generated@@145 () T@U)
(declare-fun $generated@@146 () Bool)
(declare-fun $generated@@147 () T@U)
(declare-fun $generated@@148 () Bool)
(declare-fun $generated@@149 () T@U)
(declare-fun $generated@@150 () T@U)
(declare-fun $generated@@151 () T@U)
(declare-fun $generated@@152 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 18) (let (($generated@@153  (=> (and (and (and (and (and (not ($generated@@12 ($generated@@75 $generated@@8 ($generated@@11 true)))) (not ($generated@@12 ($generated@@75 $generated@@8 ($generated@@11 true))))) (not ($generated@@12 ($generated@@75 $generated@@8 ($generated@@11 true))))) (not ($generated@@12 ($generated@@75 $generated@@8 ($generated@@11 true))))) (not ($generated@@12 ($generated@@75 $generated@@8 ($generated@@11 true))))) (= (ControlFlow 0 14) (- 0 13))) false)))
(let (($generated@@154  (=> (= (ControlFlow 0 12) (- 0 11)) ($generated@@59 $generated@@29 $generated@@32 $generated@@64))))
(let (($generated@@155  (=> (= (ControlFlow 0 10) (- 0 9)) ($generated@@59 $generated@@29 $generated@@135 $generated@@64))))
(let (($generated@@156  (=> (= (ControlFlow 0 8) (- 0 7)) ($generated@@59 $generated@@29 $generated@@136 $generated@@64))))
(let (($generated@@157  (and (=> (= (ControlFlow 0 5) (- 0 6)) true) (=> (= (ControlFlow 0 5) (- 0 4)) ($generated@@59 $generated@@29 $generated@@135 $generated@@64)))))
(let (($generated@@158  (and (=> (= (ControlFlow 0 2) (- 0 3)) true) (=> (= (ControlFlow 0 2) (- 0 1)) ($generated@@59 $generated@@29 $generated@@136 $generated@@64)))))
(let (($generated@@159  (=> (and (= $generated@@137 ($generated@@95 $generated@@32 $generated@@138 $generated@@1 false)) (= $generated@@139 ($generated@@73 8))) (=> (and (and (or (not (= $generated@@140 $generated@@32)) (not true)) (and ($generated@@59 $generated@@29 $generated@@140 $generated@@61) ($generated@@35 $generated@@29 $generated@@140 $generated@@61 $generated@@138))) (and ($generated@@31 $generated@@141) ($generated@@142 $generated@@141))) (=> (and (and (and (and (and (or (not (= $generated@@136 $generated@@32)) (not true)) (and ($generated@@59 $generated@@29 $generated@@136 $generated@@61) ($generated@@35 $generated@@29 $generated@@136 $generated@@61 $generated@@141))) (= ($generated@@24 $generated@@136) $generated@@139)) (and (not ($generated@@12 ($generated@@25 $generated@@8 ($generated@@26 $generated@@27 $generated@@28 ($generated@@26 $generated@@29 ($generated@@30 $generated@@27 $generated@@28) $generated@@138 $generated@@136) $generated@@1)))) (forall (($generated@@160 T@U) ) (!  (=> (and (or (not (= $generated@@160 $generated@@32)) (not true)) ($generated@@12 ($generated@@25 $generated@@8 ($generated@@26 $generated@@27 $generated@@28 ($generated@@26 $generated@@29 ($generated@@30 $generated@@27 $generated@@28) $generated@@138 $generated@@160) $generated@@1)))) (= ($generated@@26 $generated@@29 ($generated@@30 $generated@@27 $generated@@28) $generated@@141 $generated@@160) ($generated@@26 $generated@@29 ($generated@@30 $generated@@27 $generated@@28) $generated@@138 $generated@@160)))
 :pattern ( ($generated@@26 $generated@@29 ($generated@@30 $generated@@27 $generated@@28) $generated@@141 $generated@@160))
)))) (and (and ($generated@@69 $generated@@138 $generated@@141) (= $generated@@143 ($generated@@73 10))) (and (or (not (= $generated@@144 $generated@@32)) (not true)) (and ($generated@@59 $generated@@29 $generated@@144 $generated@@61) ($generated@@35 $generated@@29 $generated@@144 $generated@@61 $generated@@138))))) (and (and (and ($generated@@31 $generated@@145) ($generated@@142 $generated@@145)) (and (or (not (= $generated@@135 $generated@@32)) (not true)) (and ($generated@@59 $generated@@29 $generated@@135 $generated@@61) ($generated@@35 $generated@@29 $generated@@135 $generated@@61 $generated@@145)))) (and (and (= ($generated@@24 $generated@@135) $generated@@143) (not ($generated@@12 ($generated@@25 $generated@@8 ($generated@@26 $generated@@27 $generated@@28 ($generated@@26 $generated@@29 ($generated@@30 $generated@@27 $generated@@28) $generated@@141 $generated@@135) $generated@@1))))) (and (forall (($generated@@161 T@U) ) (!  (=> (and (or (not (= $generated@@161 $generated@@32)) (not true)) ($generated@@12 ($generated@@25 $generated@@8 ($generated@@26 $generated@@27 $generated@@28 ($generated@@26 $generated@@29 ($generated@@30 $generated@@27 $generated@@28) $generated@@141 $generated@@161) $generated@@1)))) (= ($generated@@26 $generated@@29 ($generated@@30 $generated@@27 $generated@@28) $generated@@145 $generated@@161) ($generated@@26 $generated@@29 ($generated@@30 $generated@@27 $generated@@28) $generated@@141 $generated@@161)))
 :pattern ( ($generated@@26 $generated@@29 ($generated@@30 $generated@@27 $generated@@28) $generated@@145 $generated@@161))
)) ($generated@@69 $generated@@141 $generated@@145))))) (and (=> (= (ControlFlow 0 15) (- 0 17)) true) (and (=> (= (ControlFlow 0 15) (- 0 16)) true) (and (and (and (and (and (=> (= (ControlFlow 0 15) 2) $generated@@158) (=> (= (ControlFlow 0 15) 5) $generated@@157)) (=> (= (ControlFlow 0 15) 8) $generated@@156)) (=> (= (ControlFlow 0 15) 10) $generated@@155)) (=> (= (ControlFlow 0 15) 12) $generated@@154)) (=> (= (ControlFlow 0 15) 14) $generated@@153)))))))))
(let (($generated@@162  (=> (and ($generated@@31 $generated@@138) ($generated@@142 $generated@@138)) (=> (and (and (=> $generated@@146 (and ($generated@@59 $generated@@29 $generated@@147 $generated@@61) ($generated@@35 $generated@@29 $generated@@147 $generated@@61 $generated@@138))) true) (and (=> $generated@@148 (and ($generated@@59 $generated@@29 $generated@@149 $generated@@61) ($generated@@35 $generated@@29 $generated@@149 $generated@@61 $generated@@138))) true)) (=> (and (and (and (and ($generated@@59 $generated@@29 $generated@@150 $generated@@34) ($generated@@35 $generated@@29 $generated@@150 $generated@@34 $generated@@138)) true) (and (and ($generated@@59 $generated@@29 $generated@@151 $generated@@34) ($generated@@35 $generated@@29 $generated@@151 $generated@@34 $generated@@138)) true)) (and (and (and ($generated@@59 $generated@@29 $generated@@152 $generated@@34) ($generated@@35 $generated@@29 $generated@@152 $generated@@34 $generated@@138)) true) (and (= 2 $generated@@23) (= (ControlFlow 0 18) 15)))) $generated@@159)))))
$generated@@162)))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 8) (- 7))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 12) (- 11))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
