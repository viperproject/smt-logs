(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._module.exp () T@U)
(declare-fun |##_module.exp.Plus| () T@U)
(declare-fun |##_module.exp.Num| () T@U)
(declare-fun |##_module.exp.Var| () T@U)
(declare-fun tytagFamily$exp () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun |#_module.exp.Plus| (T@U T@U) T@U)
(declare-fun Tclass._module.exp () T@U)
(declare-fun |_module.exp#Equal| (T@U T@U) Bool)
(declare-fun _module.exp.Num_q (T@U) Bool)
(declare-fun _module.exp.n (T@U) Int)
(declare-fun _module.exp.Var_q (T@U) Bool)
(declare-fun _module.exp.x (T@U) Int)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun _module.exp.Plus_q (T@U) Bool)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun |#_module.exp.Num| (Int) T@U)
(declare-fun |#_module.exp.Var| (Int) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.copt (T@U T@U) T@U)
(declare-fun $LS (T@U) T@U)
(declare-fun |_module.__default.copt#canCall| (T@U) Bool)
(declare-fun _module.exp.e1 (T@U) T@U)
(declare-fun _module.exp.e2 (T@U) T@U)
(declare-fun DtRank (T@U) Int)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun TagFamily (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt alloc Tagclass._module.exp |##_module.exp.Plus| |##_module.exp.Num| |##_module.exp.Var| tytagFamily$exp)
)
(assert (= (Tag TInt) TagInt))
(assert (= (Ctor DatatypeTypeType) 3))
(assert (forall ((|a#25#0#0| T@U) (|a#25#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.exp.Plus| |a#25#0#0| |a#25#1#0|) Tclass._module.exp)  (and ($Is DatatypeTypeType |a#25#0#0| Tclass._module.exp) ($Is DatatypeTypeType |a#25#1#0| Tclass._module.exp)))
 :pattern ( ($Is DatatypeTypeType (|#_module.exp.Plus| |a#25#0#0| |a#25#1#0|) Tclass._module.exp))
)))
(assert (forall ((a T@U) (b T@U) ) (!  (=> (and (_module.exp.Num_q a) (_module.exp.Num_q b)) (= (|_module.exp#Equal| a b) (= (_module.exp.n a) (_module.exp.n b))))
 :pattern ( (|_module.exp#Equal| a b) (_module.exp.Num_q a))
 :pattern ( (|_module.exp#Equal| a b) (_module.exp.Num_q b))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) ) (!  (=> (and (_module.exp.Var_q a@@0) (_module.exp.Var_q b@@0)) (= (|_module.exp#Equal| a@@0 b@@0) (= (_module.exp.x a@@0) (_module.exp.x b@@0))))
 :pattern ( (|_module.exp#Equal| a@@0 b@@0) (_module.exp.Var_q a@@0))
 :pattern ( (|_module.exp#Equal| a@@0 b@@0) (_module.exp.Var_q b@@0))
)))
(assert (forall ((a@@1 T@U) (b@@1 T@U) ) (! (= (|_module.exp#Equal| a@@1 b@@1) (= a@@1 b@@1))
 :pattern ( (|_module.exp#Equal| a@@1 b@@1))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((d T@U) ) (! (= (_module.exp.Plus_q d) (= (DatatypeCtorId d) |##_module.exp.Plus|))
 :pattern ( (_module.exp.Plus_q d))
)))
(assert (forall ((d@@0 T@U) ) (! (= (_module.exp.Num_q d@@0) (= (DatatypeCtorId d@@0) |##_module.exp.Num|))
 :pattern ( (_module.exp.Num_q d@@0))
)))
(assert (forall ((d@@1 T@U) ) (! (= (_module.exp.Var_q d@@1) (= (DatatypeCtorId d@@1) |##_module.exp.Var|))
 :pattern ( (_module.exp.Var_q d@@1))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((d@@2 T@U) ) (!  (=> (_module.exp.Plus_q d@@2) (exists ((|a#24#0#0| T@U) (|a#24#1#0| T@U) ) (= d@@2 (|#_module.exp.Plus| |a#24#0#0| |a#24#1#0|))))
 :pattern ( (_module.exp.Plus_q d@@2))
)))
(assert (forall ((d@@3 T@U) ) (!  (=> (_module.exp.Num_q d@@3) (exists ((|a#32#0#0| Int) ) (= d@@3 (|#_module.exp.Num| |a#32#0#0|))))
 :pattern ( (_module.exp.Num_q d@@3))
)))
(assert (forall ((d@@4 T@U) ) (!  (=> (_module.exp.Var_q d@@4) (exists ((|a#37#0#0| Int) ) (= d@@4 (|#_module.exp.Var| |a#37#0#0|))))
 :pattern ( (_module.exp.Var_q d@@4))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($ly T@U) (|e#0| T@U) ) (!  (=> (or (|_module.__default.copt#canCall| |e#0|) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |e#0| Tclass._module.exp))) (and (=> (_module.exp.Plus_q |e#0|) (let ((|e1#1| (_module.exp.e1 |e#0|)))
 (=> (_module.exp.Plus_q |e1#1|) (|_module.__default.copt#canCall| |e1#1|)))) (= (_module.__default.copt ($LS $ly) |e#0|) (ite (_module.exp.Plus_q |e#0|) (let ((|e2#0| (_module.exp.e2 |e#0|)))
(let ((|e1#0| (_module.exp.e1 |e#0|)))
(ite (_module.exp.Plus_q |e1#0|) (let ((|o1#0| (_module.__default.copt $ly |e1#0|)))
(ite  (and (_module.exp.Num_q |o1#0|) (= (_module.exp.n |o1#0|) (LitInt 0))) |e2#0| (|#_module.exp.Plus| |o1#0| |e2#0|))) (ite (_module.exp.Num_q |e1#0|) (let ((|n#0| (_module.exp.n |e1#0|)))
(ite (= |n#0| (LitInt 0)) |e2#0| |e#0|)) |e#0|)))) (ite (_module.exp.Num_q |e#0|) |e#0| |e#0|)))))
 :pattern ( (_module.__default.copt ($LS $ly) |e#0|))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($ly@@0 T@U) (|e#0@@0| T@U) ) (!  (=> (or (|_module.__default.copt#canCall| |e#0@@0|) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |e#0@@0| Tclass._module.exp))) ($Is DatatypeTypeType (_module.__default.copt $ly@@0 |e#0@@0|) Tclass._module.exp))
 :pattern ( (_module.__default.copt $ly@@0 |e#0@@0|))
))))
(assert (forall ((a@@2 T@U) (b@@2 T@U) ) (!  (=> (and (_module.exp.Plus_q a@@2) (_module.exp.Plus_q b@@2)) (= (|_module.exp#Equal| a@@2 b@@2)  (and (|_module.exp#Equal| (_module.exp.e1 a@@2) (_module.exp.e1 b@@2)) (|_module.exp#Equal| (_module.exp.e2 a@@2) (_module.exp.e2 b@@2)))))
 :pattern ( (|_module.exp#Equal| a@@2 b@@2) (_module.exp.Plus_q a@@2))
 :pattern ( (|_module.exp#Equal| a@@2 b@@2) (_module.exp.Plus_q b@@2))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($ly@@1 T@U) (|e#0@@1| T@U) ) (!  (=> (or (|_module.__default.copt#canCall| (Lit DatatypeTypeType |e#0@@1|)) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |e#0@@1| Tclass._module.exp))) (and (=> (U_2_bool (Lit boolType (bool_2_U (_module.exp.Plus_q (Lit DatatypeTypeType |e#0@@1|))))) (let ((|e1#3| (Lit DatatypeTypeType (_module.exp.e1 (Lit DatatypeTypeType |e#0@@1|)))))
 (=> (_module.exp.Plus_q |e1#3|) (|_module.__default.copt#canCall| |e1#3|)))) (= (_module.__default.copt ($LS $ly@@1) (Lit DatatypeTypeType |e#0@@1|)) (ite (_module.exp.Plus_q (Lit DatatypeTypeType |e#0@@1|)) (let ((|e2#2| (Lit DatatypeTypeType (_module.exp.e2 (Lit DatatypeTypeType |e#0@@1|)))))
(let ((|e1#2| (Lit DatatypeTypeType (_module.exp.e1 (Lit DatatypeTypeType |e#0@@1|)))))
(ite (_module.exp.Plus_q |e1#2|) (let ((|o1#2| (Lit DatatypeTypeType (_module.__default.copt ($LS $ly@@1) |e1#2|))))
(ite  (and (_module.exp.Num_q |o1#2|) (= (LitInt (_module.exp.n |o1#2|)) (LitInt 0))) |e2#2| (|#_module.exp.Plus| |o1#2| |e2#2|))) (ite (_module.exp.Num_q |e1#2|) (let ((|n#4| (LitInt (_module.exp.n |e1#2|))))
(ite (= |n#4| (LitInt 0)) |e2#2| |e#0@@1|)) (Lit DatatypeTypeType |e#0@@1|))))) (ite (_module.exp.Num_q (Lit DatatypeTypeType |e#0@@1|)) (Lit DatatypeTypeType |e#0@@1|) (Lit DatatypeTypeType |e#0@@1|))))))
 :weight 3
 :pattern ( (_module.__default.copt ($LS $ly@@1) (Lit DatatypeTypeType |e#0@@1|)))
))))
(assert (forall ((|a#23#0#0| T@U) (|a#23#1#0| T@U) ) (! (= (DatatypeCtorId (|#_module.exp.Plus| |a#23#0#0| |a#23#1#0|)) |##_module.exp.Plus|)
 :pattern ( (|#_module.exp.Plus| |a#23#0#0| |a#23#1#0|))
)))
(assert (forall ((|a#27#0#0| T@U) (|a#27#1#0| T@U) ) (! (= (_module.exp.e1 (|#_module.exp.Plus| |a#27#0#0| |a#27#1#0|)) |a#27#0#0|)
 :pattern ( (|#_module.exp.Plus| |a#27#0#0| |a#27#1#0|))
)))
(assert (forall ((|a#29#0#0| T@U) (|a#29#1#0| T@U) ) (! (= (_module.exp.e2 (|#_module.exp.Plus| |a#29#0#0| |a#29#1#0|)) |a#29#1#0|)
 :pattern ( (|#_module.exp.Plus| |a#29#0#0| |a#29#1#0|))
)))
(assert (forall ((|a#31#0#0| Int) ) (! (= (DatatypeCtorId (|#_module.exp.Num| |a#31#0#0|)) |##_module.exp.Num|)
 :pattern ( (|#_module.exp.Num| |a#31#0#0|))
)))
(assert (forall ((|a#35#0#0| Int) ) (! (= (_module.exp.n (|#_module.exp.Num| |a#35#0#0|)) |a#35#0#0|)
 :pattern ( (|#_module.exp.Num| |a#35#0#0|))
)))
(assert (forall ((|a#36#0#0| Int) ) (! (= (DatatypeCtorId (|#_module.exp.Var| |a#36#0#0|)) |##_module.exp.Var|)
 :pattern ( (|#_module.exp.Var| |a#36#0#0|))
)))
(assert (forall ((|a#40#0#0| Int) ) (! (= (_module.exp.x (|#_module.exp.Var| |a#40#0#0|)) |a#40#0#0|)
 :pattern ( (|#_module.exp.Var| |a#40#0#0|))
)))
(assert (forall ((x@@5 T@U) (T@@1 T@T) ) (! (= ($Unbox T@@1 ($Box T@@1 x@@5)) x@@5)
 :pattern ( ($Box T@@1 x@@5))
)))
(assert (forall ((|a#28#0#0| T@U) (|a#28#1#0| T@U) ) (! (< (DtRank |a#28#0#0|) (DtRank (|#_module.exp.Plus| |a#28#0#0| |a#28#1#0|)))
 :pattern ( (|#_module.exp.Plus| |a#28#0#0| |a#28#1#0|))
)))
(assert (forall ((|a#30#0#0| T@U) (|a#30#1#0| T@U) ) (! (< (DtRank |a#30#1#0|) (DtRank (|#_module.exp.Plus| |a#30#0#0| |a#30#1#0|)))
 :pattern ( (|#_module.exp.Plus| |a#30#0#0| |a#30#1#0|))
)))
(assert (forall (($ly@@2 T@U) (|e#0@@2| T@U) ) (! (= (_module.__default.copt ($LS $ly@@2) |e#0@@2|) (_module.__default.copt $ly@@2 |e#0@@2|))
 :pattern ( (_module.__default.copt ($LS $ly@@2) |e#0@@2|))
)))
(assert (forall ((|a#33#0#0| Int) ) (! (= ($Is DatatypeTypeType (|#_module.exp.Num| |a#33#0#0|) Tclass._module.exp) ($Is intType (int_2_U |a#33#0#0|) TInt))
 :pattern ( ($Is DatatypeTypeType (|#_module.exp.Num| |a#33#0#0|) Tclass._module.exp))
)))
(assert (forall ((|a#38#0#0| Int) ) (! (= ($Is DatatypeTypeType (|#_module.exp.Var| |a#38#0#0|) Tclass._module.exp) ($Is intType (int_2_U |a#38#0#0|) TInt))
 :pattern ( ($Is DatatypeTypeType (|#_module.exp.Var| |a#38#0#0|) Tclass._module.exp))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0 t1 t2 (MapType0Store t0 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 4)) (= (Ctor FieldType) 5)) (forall ((t0@@0 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 (MapType1Store t0@@0 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :weight 0
))) (= (Ctor BoxType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((d@@5 T@U) ) (!  (=> ($Is DatatypeTypeType d@@5 Tclass._module.exp) (or (or (_module.exp.Plus_q d@@5) (_module.exp.Num_q d@@5)) (_module.exp.Var_q d@@5)))
 :pattern ( (_module.exp.Var_q d@@5) ($Is DatatypeTypeType d@@5 Tclass._module.exp))
 :pattern ( (_module.exp.Num_q d@@5) ($Is DatatypeTypeType d@@5 Tclass._module.exp))
 :pattern ( (_module.exp.Plus_q d@@5) ($Is DatatypeTypeType d@@5 Tclass._module.exp))
)))
(assert (= (Tag Tclass._module.exp) Tagclass._module.exp))
(assert (= (TagFamily Tclass._module.exp) tytagFamily$exp))
(assert (forall ((|a#26#0#0| T@U) (|a#26#1#0| T@U) ) (! (= (|#_module.exp.Plus| (Lit DatatypeTypeType |a#26#0#0|) (Lit DatatypeTypeType |a#26#1#0|)) (Lit DatatypeTypeType (|#_module.exp.Plus| |a#26#0#0| |a#26#1#0|)))
 :pattern ( (|#_module.exp.Plus| (Lit DatatypeTypeType |a#26#0#0|) (Lit DatatypeTypeType |a#26#1#0|)))
)))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((|a#34#0#0| Int) ) (! (= (|#_module.exp.Num| (LitInt |a#34#0#0|)) (Lit DatatypeTypeType (|#_module.exp.Num| |a#34#0#0|)))
 :pattern ( (|#_module.exp.Num| (LitInt |a#34#0#0|)))
)))
(assert (forall ((|a#39#0#0| Int) ) (! (= (|#_module.exp.Var| (LitInt |a#39#0#0|)) (Lit DatatypeTypeType (|#_module.exp.Var| |a#39#0#0|)))
 :pattern ( (|#_module.exp.Var| (LitInt |a#39#0#0|)))
)))
(assert (forall ((x@@7 T@U) (T@@2 T@T) ) (! (= ($Box T@@2 (Lit T@@2 x@@7)) (Lit BoxType ($Box T@@2 x@@7)))
 :pattern ( ($Box T@@2 (Lit T@@2 x@@7)))
)))
(assert (forall ((v T@U) ) (! ($Is intType v TInt)
 :pattern ( ($Is intType v TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $Heap () T@U)
(declare-fun $LZ () T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsHeapAnchor (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let ((anon0_correct  (=> (and (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (= (ControlFlow 0 2) (- 0 1))) (|_module.exp#Equal| (_module.__default.copt ($LS ($LS $LZ)) (Lit DatatypeTypeType (|#_module.exp.Plus| (Lit DatatypeTypeType (|#_module.exp.Plus| (Lit DatatypeTypeType (|#_module.exp.Plus| (Lit DatatypeTypeType (|#_module.exp.Num| (LitInt 0))) (Lit DatatypeTypeType (|#_module.exp.Num| (LitInt 0))))) (Lit DatatypeTypeType (|#_module.exp.Num| (LitInt 0))))) (Lit DatatypeTypeType (|#_module.exp.Num| (LitInt 1)))))) (|#_module.exp.Num| (LitInt 1))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (and (= 2 $FunctionContextHeight) (= (ControlFlow 0 3) 2))) anon0_correct)))
PreconditionGeneratedEntry_correct)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
