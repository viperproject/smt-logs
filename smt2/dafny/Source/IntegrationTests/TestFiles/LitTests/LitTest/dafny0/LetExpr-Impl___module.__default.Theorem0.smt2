(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () Int)
(declare-fun $generated@@0 (T@U Int) Int)
(declare-fun $generated@@1 (T@U) T@U)
(declare-fun $generated@@2 (Int) Bool)
(declare-fun $generated@@3 (Int) Int)
(declare-fun $generated@@4 (T@T) Int)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Bool) T@U)
(declare-fun $generated@@9 (T@U) Bool)
(declare-fun $generated@@10 (Int) T@U)
(declare-fun $generated@@11 (T@U) Int)
(declare-fun $generated@@12 (Real) T@U)
(declare-fun $generated@@13 (T@U) Real)
(declare-fun $generated@@24 (T@U T@U) Bool)
(declare-fun $generated@@25 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@26 () T@T)
(declare-fun $generated@@27 () T@T)
(declare-fun $generated@@28 () T@T)
(declare-fun $generated@@29 (T@T T@T) T@T)
(declare-fun $generated@@30 () T@U)
(declare-fun $generated@@31 (T@T T@U) T@U)
(declare-fun $generated@@32 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@33 (T@T) T@T)
(declare-fun $generated@@34 (T@T) T@T)
(declare-fun $generated@@56 (T@T T@U) T@U)
(declare-fun $generated@@59 (T@T T@U) T@U)
(declare-fun $generated@@71 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@72 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@73 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@4 $generated@@5) 0) (= ($generated@@4 $generated@@6) 1)) (= ($generated@@4 $generated@@7) 2)) (forall (($generated@@14 Bool) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Int) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Real) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))))
(assert  (=> (<= 0 $generated) (forall (($generated@@20 T@U) ($generated@@21 Int) ) (!  (=> (or ($generated@@2 $generated@@21) (and (< 0 $generated) (<= ($generated@@3 0) $generated@@21))) (and (=> (<= 2 $generated@@21) (and ($generated@@2 (- $generated@@21 1)) ($generated@@2 (- $generated@@21 2)))) (= ($generated@@0 ($generated@@1 $generated@@20) $generated@@21) (ite (< $generated@@21 2) $generated@@21 (+ ($generated@@0 $generated@@20 (- $generated@@21 1)) ($generated@@0 $generated@@20 (- $generated@@21 2)))))))
 :pattern ( ($generated@@0 ($generated@@1 $generated@@20) $generated@@21))
))))
(assert  (=> (<= 0 $generated) (forall (($generated@@22 T@U) ($generated@@23 Int) ) (!  (=> (or ($generated@@2 $generated@@23) (and (< 0 $generated) (<= ($generated@@3 0) $generated@@23))) (<= ($generated@@3 0) ($generated@@0 $generated@@22 $generated@@23)))
 :pattern ( ($generated@@0 $generated@@22 $generated@@23))
))))
(assert  (and (and (and (and (and (and (and (forall (($generated@@35 T@T) ($generated@@36 T@T) ($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (= ($generated@@25 $generated@@35 $generated@@36 ($generated@@32 $generated@@35 $generated@@36 $generated@@38 $generated@@39 $generated@@37) $generated@@39) $generated@@37)
 :weight 0
)) (forall (($generated@@40 T@T) ($generated@@41 T@T) ($generated@@42 T@U) ($generated@@43 T@U) ($generated@@44 T@U) ($generated@@45 T@U) ) (!  (or (= $generated@@44 $generated@@45) (= ($generated@@25 $generated@@40 $generated@@41 ($generated@@32 $generated@@40 $generated@@41 $generated@@43 $generated@@44 $generated@@42) $generated@@45) ($generated@@25 $generated@@40 $generated@@41 $generated@@43 $generated@@45)))
 :weight 0
))) (= ($generated@@4 $generated@@26) 3)) (= ($generated@@4 $generated@@27) 4)) (= ($generated@@4 $generated@@28) 5)) (forall (($generated@@46 T@T) ($generated@@47 T@T) ) (= ($generated@@4 ($generated@@29 $generated@@46 $generated@@47)) 6))) (forall (($generated@@48 T@T) ($generated@@49 T@T) ) (! (= ($generated@@33 ($generated@@29 $generated@@48 $generated@@49)) $generated@@48)
 :pattern ( ($generated@@29 $generated@@48 $generated@@49))
))) (forall (($generated@@50 T@T) ($generated@@51 T@T) ) (! (= ($generated@@34 ($generated@@29 $generated@@50 $generated@@51)) $generated@@51)
 :pattern ( ($generated@@29 $generated@@50 $generated@@51))
))))
(assert (forall (($generated@@52 T@U) ($generated@@53 T@U) ) (!  (=> ($generated@@24 $generated@@52 $generated@@53) (forall (($generated@@54 T@U) ) (!  (=> ($generated@@9 ($generated@@31 $generated@@5 ($generated@@25 $generated@@26 $generated@@27 ($generated@@25 $generated@@28 ($generated@@29 $generated@@26 $generated@@27) $generated@@52 $generated@@54) $generated@@30))) ($generated@@9 ($generated@@31 $generated@@5 ($generated@@25 $generated@@26 $generated@@27 ($generated@@25 $generated@@28 ($generated@@29 $generated@@26 $generated@@27) $generated@@53 $generated@@54) $generated@@30))))
 :pattern ( ($generated@@25 $generated@@26 $generated@@27 ($generated@@25 $generated@@28 ($generated@@29 $generated@@26 $generated@@27) $generated@@53 $generated@@54) $generated@@30))
)))
 :pattern ( ($generated@@24 $generated@@52 $generated@@53))
)))
(assert (forall (($generated@@55 Int) ) (! (= ($generated@@3 $generated@@55) $generated@@55)
 :pattern ( ($generated@@3 $generated@@55))
)))
(assert (forall (($generated@@57 T@U) ($generated@@58 T@T) ) (! (= ($generated@@56 $generated@@58 $generated@@57) $generated@@57)
 :pattern ( ($generated@@56 $generated@@58 $generated@@57))
)))
(assert (forall (($generated@@60 T@U) ($generated@@61 T@T) ) (! (= ($generated@@59 $generated@@61 ($generated@@31 $generated@@61 $generated@@60)) $generated@@60)
 :pattern ( ($generated@@31 $generated@@61 $generated@@60))
)))
(assert  (=> (<= 0 $generated) (forall (($generated@@62 T@U) ($generated@@63 Int) ) (!  (=> (or ($generated@@2 ($generated@@3 $generated@@63)) (and (< 0 $generated) (<= ($generated@@3 0) $generated@@63))) (and (=> (not ($generated@@9 ($generated@@56 $generated@@5 ($generated@@8 (< $generated@@63 2))))) (and ($generated@@2 ($generated@@3 (- $generated@@63 1))) ($generated@@2 ($generated@@3 (- $generated@@63 2))))) (= ($generated@@0 ($generated@@1 $generated@@62) ($generated@@3 $generated@@63)) (ite (< $generated@@63 2) $generated@@63 (+ ($generated@@0 ($generated@@1 $generated@@62) ($generated@@3 (- $generated@@63 1))) ($generated@@0 ($generated@@1 $generated@@62) ($generated@@3 (- $generated@@63 2))))))))
 :weight 3
 :pattern ( ($generated@@0 ($generated@@1 $generated@@62) ($generated@@3 $generated@@63)))
))))
(assert (forall (($generated@@64 T@U) ($generated@@65 T@U) ($generated@@66 T@U) ) (!  (=> (or (not (= $generated@@64 $generated@@66)) (not true)) (=> (and ($generated@@24 $generated@@64 $generated@@65) ($generated@@24 $generated@@65 $generated@@66)) ($generated@@24 $generated@@64 $generated@@66)))
 :pattern ( ($generated@@24 $generated@@64 $generated@@65) ($generated@@24 $generated@@65 $generated@@66))
)))
(assert (forall (($generated@@67 T@U) ($generated@@68 T@T) ) (! (= ($generated@@31 $generated@@68 ($generated@@59 $generated@@68 $generated@@67)) $generated@@67)
 :pattern ( ($generated@@59 $generated@@68 $generated@@67))
)))
(assert (forall (($generated@@69 T@U) ($generated@@70 Int) ) (! (= ($generated@@0 ($generated@@1 $generated@@69) $generated@@70) ($generated@@0 $generated@@69 $generated@@70))
 :pattern ( ($generated@@0 ($generated@@1 $generated@@69) $generated@@70))
)))
(assert  (and (forall (($generated@@74 T@T) ($generated@@75 T@T) ($generated@@76 T@T) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ) (! (= ($generated@@71 $generated@@74 $generated@@75 $generated@@76 ($generated@@73 $generated@@74 $generated@@75 $generated@@76 $generated@@78 $generated@@79 $generated@@80 $generated@@77) $generated@@79 $generated@@80) $generated@@77)
 :weight 0
)) (and (forall (($generated@@81 T@T) ($generated@@82 T@T) ($generated@@83 T@T) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ) (!  (or (= $generated@@86 $generated@@88) (= ($generated@@71 $generated@@81 $generated@@82 $generated@@83 ($generated@@73 $generated@@81 $generated@@82 $generated@@83 $generated@@85 $generated@@86 $generated@@87 $generated@@84) $generated@@88 $generated@@89) ($generated@@71 $generated@@81 $generated@@82 $generated@@83 $generated@@85 $generated@@88 $generated@@89)))
 :weight 0
)) (forall (($generated@@90 T@T) ($generated@@91 T@T) ($generated@@92 T@T) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ) (!  (or (= $generated@@96 $generated@@98) (= ($generated@@71 $generated@@90 $generated@@91 $generated@@92 ($generated@@73 $generated@@90 $generated@@91 $generated@@92 $generated@@94 $generated@@95 $generated@@96 $generated@@93) $generated@@97 $generated@@98) ($generated@@71 $generated@@90 $generated@@91 $generated@@92 $generated@@94 $generated@@97 $generated@@98)))
 :weight 0
)))))
(assert (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 Bool) ($generated@@103 T@U) ($generated@@104 T@U) ) (! (= ($generated@@9 ($generated@@71 $generated@@28 $generated@@26 $generated@@5 ($generated@@72 $generated@@99 $generated@@100 $generated@@101 $generated@@102) $generated@@103 $generated@@104))  (=> (and (or (not (= $generated@@103 $generated@@99)) (not true)) ($generated@@9 ($generated@@31 $generated@@5 ($generated@@25 $generated@@26 $generated@@27 ($generated@@25 $generated@@28 ($generated@@29 $generated@@26 $generated@@27) $generated@@100 $generated@@103) $generated@@101)))) $generated@@102))
 :pattern ( ($generated@@71 $generated@@28 $generated@@26 $generated@@5 ($generated@@72 $generated@@99 $generated@@100 $generated@@101 $generated@@102) $generated@@103 $generated@@104))
)))
(assert (forall (($generated@@105 Int) ) (! (= ($generated@@59 $generated@@6 ($generated@@10 ($generated@@3 $generated@@105))) ($generated@@56 $generated@@27 ($generated@@59 $generated@@6 ($generated@@10 $generated@@105))))
 :pattern ( ($generated@@59 $generated@@6 ($generated@@10 ($generated@@3 $generated@@105))))
)))
(assert (forall (($generated@@106 T@U) ($generated@@107 T@T) ) (! (= ($generated@@59 $generated@@107 ($generated@@56 $generated@@107 $generated@@106)) ($generated@@56 $generated@@27 ($generated@@59 $generated@@107 $generated@@106)))
 :pattern ( ($generated@@59 $generated@@107 ($generated@@56 $generated@@107 $generated@@106)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@108 () T@U)
(declare-fun $generated@@109 () Int)
(declare-fun $generated@@110 () Int)
(declare-fun $generated@@111 (T@U) Bool)
(declare-fun $generated@@112 () T@U)
(declare-fun $generated@@113 (T@U) Bool)
(declare-fun $generated@@114 () T@U)
(declare-fun $generated@@115 () T@U)
(declare-fun $generated@@116 () Int)
(declare-fun $generated@@117 () T@U)
(declare-fun $generated@@118 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 12) (let (($generated@@119  (=> (= (ControlFlow 0 2) (- 0 1)) (<= ($generated@@3 1) ($generated@@0 ($generated@@1 ($generated@@1 $generated@@108)) $generated@@109)))))
(let (($generated@@120  (=> (and (<= 3 $generated@@109) (= $generated@@110 (- $generated@@109 2))) (and (=> (= (ControlFlow 0 4) (- 0 10)) (or (<= 0 $generated@@109) (= $generated@@110 $generated@@109))) (=> (or (<= 0 $generated@@109) (= $generated@@110 $generated@@109)) (and (=> (= (ControlFlow 0 4) (- 0 9)) (< $generated@@110 $generated@@109)) (=> (< $generated@@110 $generated@@109) (and (=> (= (ControlFlow 0 4) (- 0 8)) (<= ($generated@@3 1) $generated@@110)) (=> (<= ($generated@@3 1) $generated@@110) (=> (and (and (and ($generated@@111 $generated@@112) ($generated@@113 $generated@@112)) ($generated@@2 $generated@@110)) (and (and (<= ($generated@@3 1) ($generated@@0 ($generated@@1 ($generated@@1 $generated@@108)) $generated@@110)) (forall (($generated@@121 T@U) ) (!  (=> (and (or (not (= $generated@@121 $generated@@114)) (not true)) ($generated@@9 ($generated@@31 $generated@@5 ($generated@@25 $generated@@26 $generated@@27 ($generated@@25 $generated@@28 ($generated@@29 $generated@@26 $generated@@27) $generated@@115 $generated@@121) $generated@@30)))) (= ($generated@@25 $generated@@28 ($generated@@29 $generated@@26 $generated@@27) $generated@@112 $generated@@121) ($generated@@25 $generated@@28 ($generated@@29 $generated@@26 $generated@@27) $generated@@115 $generated@@121)))
 :pattern ( ($generated@@25 $generated@@28 ($generated@@29 $generated@@26 $generated@@27) $generated@@112 $generated@@121))
))) (and ($generated@@24 $generated@@115 $generated@@112) (= $generated@@116 (- $generated@@109 1))))) (and (=> (= (ControlFlow 0 4) (- 0 7)) (or (<= 0 $generated@@109) (= $generated@@116 $generated@@109))) (=> (or (<= 0 $generated@@109) (= $generated@@116 $generated@@109)) (and (=> (= (ControlFlow 0 4) (- 0 6)) (< $generated@@116 $generated@@109)) (=> (< $generated@@116 $generated@@109) (and (=> (= (ControlFlow 0 4) (- 0 5)) (<= ($generated@@3 1) $generated@@116)) (=> (<= ($generated@@3 1) $generated@@116) (=> (and (and (and ($generated@@111 $generated@@117) ($generated@@113 $generated@@117)) ($generated@@2 $generated@@116)) (and (and (<= ($generated@@3 1) ($generated@@0 ($generated@@1 ($generated@@1 $generated@@108)) $generated@@116)) (forall (($generated@@122 T@U) ) (!  (=> (and (or (not (= $generated@@122 $generated@@114)) (not true)) ($generated@@9 ($generated@@31 $generated@@5 ($generated@@25 $generated@@26 $generated@@27 ($generated@@25 $generated@@28 ($generated@@29 $generated@@26 $generated@@27) $generated@@112 $generated@@122) $generated@@30)))) (= ($generated@@25 $generated@@28 ($generated@@29 $generated@@26 $generated@@27) $generated@@117 $generated@@122) ($generated@@25 $generated@@28 ($generated@@29 $generated@@26 $generated@@27) $generated@@112 $generated@@122)))
 :pattern ( ($generated@@25 $generated@@28 ($generated@@29 $generated@@26 $generated@@27) $generated@@117 $generated@@122))
))) (and ($generated@@24 $generated@@112 $generated@@117) (= (ControlFlow 0 4) 2)))) $generated@@119)))))))))))))))))
(let (($generated@@123  (=> (and (< $generated@@109 3) (= (ControlFlow 0 3) 2)) $generated@@119)))
(let (($generated@@124  (=> (= $generated@@118 ($generated@@72 $generated@@114 $generated@@115 $generated@@30 false)) (and (=> (= (ControlFlow 0 11) 3) $generated@@123) (=> (= (ControlFlow 0 11) 4) $generated@@120)))))
(let (($generated@@125  (=> (and (and (and ($generated@@111 $generated@@115) ($generated@@113 $generated@@115)) (= 1 $generated)) (and (<= ($generated@@3 1) $generated@@109) (= (ControlFlow 0 12) 11))) $generated@@124)))
$generated@@125))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
