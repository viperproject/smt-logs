(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () Int)
(declare-fun $generated@@0 (T@U T@U T@U) T@U)
(declare-fun $generated@@1 (T@U T@U T@U) Bool)
(declare-fun $generated@@2 (T@U T@U) Bool)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@22 (T@T T@U) T@U)
(declare-fun $generated@@25 (T@T T@U) T@U)
(declare-fun $generated@@26 (T@T T@U) T@U)
(declare-fun $generated@@29 (T@U T@U T@U) Bool)
(declare-fun $generated@@30 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@35 (T@U) Bool)
(declare-fun $generated@@40 (T@T T@U T@U) Bool)
(declare-fun $generated@@46 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 () T@T)
(declare-fun $generated@@49 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@50 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@51 () T@T)
(declare-fun $generated@@52 (T@T T@T) T@T)
(declare-fun $generated@@53 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@54 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@55 (T@T) T@T)
(declare-fun $generated@@56 (T@T) T@T)
(declare-fun $generated@@105 (T@U T@U T@U) T@U)
(declare-fun $generated@@106 (T@U T@U T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert  (=> (<= 0 $generated) (forall (($generated@@19 T@U) ($generated@@20 T@U) ($generated@@21 T@U) ) (!  (=> (or ($generated@@1 $generated@@19 $generated@@20 $generated@@21) (and (< 0 $generated) (and (and ($generated@@2 $generated@@20 $generated@@19) ($generated@@2 $generated@@21 $generated@@19)) (or (not (= $generated@@20 $generated@@21)) (not true))))) ($generated@@2 ($generated@@0 $generated@@19 $generated@@20 $generated@@21) $generated@@19))
 :pattern ( ($generated@@0 $generated@@19 $generated@@20 $generated@@21))
))))
(assert (forall (($generated@@23 T@U) ($generated@@24 T@T) ) (! (= ($generated@@22 $generated@@24 $generated@@23) $generated@@23)
 :pattern ( ($generated@@22 $generated@@24 $generated@@23))
)))
(assert (forall (($generated@@27 T@U) ($generated@@28 T@T) ) (! (= ($generated@@26 $generated@@28 ($generated@@25 $generated@@28 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@25 $generated@@28 $generated@@27))
)))
(assert (forall (($generated@@31 T@U) ($generated@@32 T@U) ($generated@@33 T@U) ($generated@@34 T@T) ) (! (= ($generated@@29 ($generated@@26 $generated@@34 $generated@@31) $generated@@32 $generated@@33) ($generated@@30 $generated@@34 $generated@@31 $generated@@32 $generated@@33))
 :pattern ( ($generated@@29 ($generated@@26 $generated@@34 $generated@@31) $generated@@32 $generated@@33))
)))
(assert  (=> (<= 0 $generated) (forall (($generated@@36 T@U) ($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (!  (=> (and (or ($generated@@1 $generated@@37 $generated@@38 $generated@@39) (and (< 0 $generated) (and (and (and ($generated@@2 $generated@@38 $generated@@37) ($generated@@29 $generated@@38 $generated@@37 $generated@@36)) (and ($generated@@2 $generated@@39 $generated@@37) ($generated@@29 $generated@@39 $generated@@37 $generated@@36))) (or (not (= $generated@@38 $generated@@39)) (not true))))) ($generated@@35 $generated@@36)) ($generated@@29 ($generated@@0 $generated@@37 $generated@@38 $generated@@39) $generated@@37 $generated@@36))
 :pattern ( ($generated@@29 ($generated@@0 $generated@@37 $generated@@38 $generated@@39) $generated@@37 $generated@@36))
))))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ($generated@@43 T@T) ) (! (= ($generated@@2 ($generated@@26 $generated@@43 $generated@@41) $generated@@42) ($generated@@40 $generated@@43 $generated@@41 $generated@@42))
 :pattern ( ($generated@@2 ($generated@@26 $generated@@43 $generated@@41) $generated@@42))
)))
(assert (forall (($generated@@44 T@U) ($generated@@45 T@T) ) (! (= ($generated@@25 $generated@@45 ($generated@@26 $generated@@45 $generated@@44)) $generated@@44)
 :pattern ( ($generated@@26 $generated@@45 $generated@@44))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@57 T@T) ($generated@@58 T@T) ($generated@@59 T@T) ($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@U) ) (! (= ($generated@@46 $generated@@57 $generated@@58 $generated@@59 ($generated@@53 $generated@@57 $generated@@58 $generated@@59 $generated@@61 $generated@@62 $generated@@63 $generated@@60) $generated@@62 $generated@@63) $generated@@60)
 :weight 0
)) (and (forall (($generated@@64 T@T) ($generated@@65 T@T) ($generated@@66 T@T) ($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (!  (or (= $generated@@69 $generated@@71) (= ($generated@@46 $generated@@64 $generated@@65 $generated@@66 ($generated@@53 $generated@@64 $generated@@65 $generated@@66 $generated@@68 $generated@@69 $generated@@70 $generated@@67) $generated@@71 $generated@@72) ($generated@@46 $generated@@64 $generated@@65 $generated@@66 $generated@@68 $generated@@71 $generated@@72)))
 :weight 0
)) (forall (($generated@@73 T@T) ($generated@@74 T@T) ($generated@@75 T@T) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ) (!  (or (= $generated@@79 $generated@@81) (= ($generated@@46 $generated@@73 $generated@@74 $generated@@75 ($generated@@53 $generated@@73 $generated@@74 $generated@@75 $generated@@77 $generated@@78 $generated@@79 $generated@@76) $generated@@80 $generated@@81) ($generated@@46 $generated@@73 $generated@@74 $generated@@75 $generated@@77 $generated@@80 $generated@@81)))
 :weight 0
)))) (= ($generated@@3 $generated@@47) 3)) (= ($generated@@3 $generated@@48) 4)) (forall (($generated@@82 T@T) ($generated@@83 T@T) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (! (= ($generated@@50 $generated@@82 $generated@@83 ($generated@@54 $generated@@82 $generated@@83 $generated@@85 $generated@@86 $generated@@84) $generated@@86) $generated@@84)
 :weight 0
))) (forall (($generated@@87 T@T) ($generated@@88 T@T) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ) (!  (or (= $generated@@91 $generated@@92) (= ($generated@@50 $generated@@87 $generated@@88 ($generated@@54 $generated@@87 $generated@@88 $generated@@90 $generated@@91 $generated@@89) $generated@@92) ($generated@@50 $generated@@87 $generated@@88 $generated@@90 $generated@@92)))
 :weight 0
))) (= ($generated@@3 $generated@@51) 5)) (forall (($generated@@93 T@T) ($generated@@94 T@T) ) (= ($generated@@3 ($generated@@52 $generated@@93 $generated@@94)) 6))) (forall (($generated@@95 T@T) ($generated@@96 T@T) ) (! (= ($generated@@55 ($generated@@52 $generated@@95 $generated@@96)) $generated@@95)
 :pattern ( ($generated@@52 $generated@@95 $generated@@96))
))) (forall (($generated@@97 T@T) ($generated@@98 T@T) ) (! (= ($generated@@56 ($generated@@52 $generated@@97 $generated@@98)) $generated@@98)
 :pattern ( ($generated@@52 $generated@@97 $generated@@98))
))))
(assert (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 Bool) ($generated@@103 T@U) ($generated@@104 T@U) ) (! (= ($generated@@8 ($generated@@46 $generated@@47 $generated@@48 $generated@@4 ($generated@@49 $generated@@99 $generated@@100 $generated@@101 $generated@@102) $generated@@103 $generated@@104))  (=> (and (or (not (= $generated@@103 $generated@@99)) (not true)) ($generated@@8 ($generated@@25 $generated@@4 ($generated@@50 $generated@@48 $generated@@51 ($generated@@50 $generated@@47 ($generated@@52 $generated@@48 $generated@@51) $generated@@100 $generated@@103) $generated@@101)))) $generated@@102))
 :pattern ( ($generated@@46 $generated@@47 $generated@@48 $generated@@4 ($generated@@49 $generated@@99 $generated@@100 $generated@@101 $generated@@102) $generated@@103 $generated@@104))
)))
(assert (forall (($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ) (!  (=> ($generated@@106 $generated@@107 $generated@@108 $generated@@109) (and (or (= ($generated@@105 $generated@@107 $generated@@108 $generated@@109) $generated@@108) (= ($generated@@105 $generated@@107 $generated@@108 $generated@@109) $generated@@109)) (or (not (= ($generated@@105 $generated@@107 $generated@@108 $generated@@109) $generated@@108)) (not true))))
 :pattern ( ($generated@@105 $generated@@107 $generated@@108 $generated@@109))
)))
(assert  (=> (<= 0 $generated) (forall (($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ) (!  (=> (or ($generated@@1 $generated@@110 ($generated@@22 $generated@@51 $generated@@112) ($generated@@22 $generated@@51 $generated@@113)) (and (< 0 $generated) (and (and (and ($generated@@35 $generated@@111) ($generated@@2 $generated@@112 $generated@@110)) ($generated@@2 $generated@@113 $generated@@110)) ($generated@@8 ($generated@@22 $generated@@4 ($generated@@7  (or (not (= $generated@@112 $generated@@113)) (not true)))))))) (and ($generated@@106 $generated@@110 ($generated@@22 $generated@@51 $generated@@112) ($generated@@22 $generated@@51 $generated@@113)) (= ($generated@@0 $generated@@110 ($generated@@22 $generated@@51 $generated@@112) ($generated@@22 $generated@@51 $generated@@113)) (let (($generated@@114 ($generated@@105 $generated@@110 ($generated@@22 $generated@@51 $generated@@112) ($generated@@22 $generated@@51 $generated@@113))))
$generated@@114))))
 :weight 3
 :pattern ( ($generated@@0 $generated@@110 ($generated@@22 $generated@@51 $generated@@112) ($generated@@22 $generated@@51 $generated@@113)) ($generated@@35 $generated@@111))
))))
(assert (forall (($generated@@115 T@U) ($generated@@116 T@T) ) (! (= ($generated@@26 $generated@@116 ($generated@@22 $generated@@116 $generated@@115)) ($generated@@22 $generated@@51 ($generated@@26 $generated@@116 $generated@@115)))
 :pattern ( ($generated@@26 $generated@@116 ($generated@@22 $generated@@116 $generated@@115)))
)))
(assert  (=> (<= 0 $generated) (forall (($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (!  (=> (or ($generated@@1 $generated@@117 $generated@@119 $generated@@120) (and (< 0 $generated) (and (and (and ($generated@@35 $generated@@118) ($generated@@2 $generated@@119 $generated@@117)) ($generated@@2 $generated@@120 $generated@@117)) (or (not (= $generated@@119 $generated@@120)) (not true))))) (and ($generated@@106 $generated@@117 $generated@@119 $generated@@120) (= ($generated@@0 $generated@@117 $generated@@119 $generated@@120) (let (($generated@@121 ($generated@@105 $generated@@117 $generated@@119 $generated@@120)))
$generated@@121))))
 :pattern ( ($generated@@0 $generated@@117 $generated@@119 $generated@@120) ($generated@@35 $generated@@118))
))))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@122 () T@U)
(declare-fun $generated@@123 () T@U)
(declare-fun $generated@@124 () T@U)
(declare-fun $generated@@125 () T@U)
(declare-fun $generated@@126 () T@U)
(declare-fun $generated@@127 () T@U)
(declare-fun $generated@@128 () T@U)
(declare-fun $generated@@129 () T@U)
(declare-fun $generated@@130 () T@U)
(declare-fun $generated@@131 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 10) (let (($generated@@132  (and (=> (= (ControlFlow 0 3) (- 0 4)) (or (and ($generated@@2 $generated@@122 $generated@@123) (and (or (= $generated@@122 $generated@@124) (= $generated@@122 $generated@@122)) (or (not (= $generated@@122 $generated@@124)) (not true)))) (or (and ($generated@@2 $generated@@124 $generated@@123) (and (or (= $generated@@124 $generated@@124) (= $generated@@124 $generated@@122)) (or (not (= $generated@@124 $generated@@124)) (not true)))) (exists (($generated@@133 T@U) )  (and ($generated@@2 $generated@@133 $generated@@123) (and (or (= $generated@@133 $generated@@124) (= $generated@@133 $generated@@122)) (or (not (= $generated@@133 $generated@@124)) (not true)))))))) (=> (or (and ($generated@@2 $generated@@122 $generated@@123) (and (or (= $generated@@122 $generated@@124) (= $generated@@122 $generated@@122)) (or (not (= $generated@@122 $generated@@124)) (not true)))) (or (and ($generated@@2 $generated@@124 $generated@@123) (and (or (= $generated@@124 $generated@@124) (= $generated@@124 $generated@@122)) (or (not (= $generated@@124 $generated@@124)) (not true)))) (exists (($generated@@134 T@U) )  (and ($generated@@2 $generated@@134 $generated@@123) (and (or (= $generated@@134 $generated@@124) (= $generated@@134 $generated@@122)) (or (not (= $generated@@134 $generated@@124)) (not true))))))) (=> (and ($generated@@2 $generated@@125 $generated@@123) ($generated@@29 $generated@@125 $generated@@123 $generated@@126)) (=> (and (and (and (or (= $generated@@125 $generated@@124) (= $generated@@125 $generated@@122)) (or (not (= $generated@@125 $generated@@124)) (not true))) (and ($generated@@2 $generated@@127 $generated@@123) ($generated@@29 $generated@@127 $generated@@123 $generated@@126))) (and (and (or (= $generated@@127 $generated@@124) (= $generated@@127 $generated@@122)) (or (not (= $generated@@127 $generated@@124)) (not true))) (= (ControlFlow 0 3) (- 0 2)))) (= $generated@@125 $generated@@127)))))))
(let (($generated@@135  (=> (and (not (or (= $generated@@125 $generated@@124) (= $generated@@125 $generated@@122))) (= (ControlFlow 0 7) 3)) $generated@@132)))
(let (($generated@@136  (=> (and (or (= $generated@@125 $generated@@124) (= $generated@@125 $generated@@122)) (= (ControlFlow 0 6) 3)) $generated@@132)))
(let (($generated@@137  (=> (and ($generated@@2 $generated@@125 $generated@@123) ($generated@@29 $generated@@125 $generated@@123 $generated@@126)) (and (=> (= (ControlFlow 0 8) 6) $generated@@136) (=> (= (ControlFlow 0 8) 7) $generated@@135)))))
(let (($generated@@138  (=> (and (not (and ($generated@@2 $generated@@125 $generated@@123) ($generated@@29 $generated@@125 $generated@@123 $generated@@126))) (= (ControlFlow 0 5) 3)) $generated@@132)))
(let (($generated@@139 true))
(let (($generated@@140  (=> (and (= $generated@@128 ($generated@@49 $generated@@129 $generated@@126 $generated@@130 false)) (or (not (= $generated@@124 $generated@@122)) (not true))) (and (and (=> (= (ControlFlow 0 9) 1) $generated@@139) (=> (= (ControlFlow 0 9) 8) $generated@@137)) (=> (= (ControlFlow 0 9) 5) $generated@@138)))))
(let (($generated@@141  (=> (and ($generated@@35 $generated@@126) ($generated@@131 $generated@@126)) (=> (and (and ($generated@@2 $generated@@124 $generated@@123) ($generated@@2 $generated@@122 $generated@@123)) (and (= 0 $generated) (= (ControlFlow 0 10) 9))) $generated@@140))))
$generated@@141)))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
