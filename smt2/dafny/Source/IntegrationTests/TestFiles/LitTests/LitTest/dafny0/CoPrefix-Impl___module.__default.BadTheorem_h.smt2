(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 (T@U) T@U)
(declare-fun $generated@@22 (T@U T@U) Bool)
(declare-fun $generated@@26 (T@U) Bool)
(declare-fun $generated@@27 (T@U) Bool)
(declare-fun $generated@@29 (T@U T@U) T@U)
(declare-fun $generated@@30 (Int) T@U)
(declare-fun $generated@@31 (T@U) Int)
(declare-fun $generated@@35 (T@T T@U T@U) Bool)
(declare-fun $generated@@36 () T@T)
(declare-fun $generated@@37 () T@U)
(declare-fun $generated@@39 (T@T T@U) T@U)
(declare-fun $generated@@42 (T@U) T@U)
(declare-fun $generated@@44 (T@T T@U) T@U)
(declare-fun $generated@@45 (T@T T@U) T@U)
(declare-fun $generated@@48 (Int T@U) T@U)
(declare-fun $generated@@52 (T@U) Bool)
(declare-fun $generated@@61 (T@U) Int)
(declare-fun $generated@@64 (T@U) T@U)
(declare-fun $generated@@71 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@72 () T@T)
(declare-fun $generated@@73 () T@T)
(declare-fun $generated@@74 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@75 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@76 () T@T)
(declare-fun $generated@@77 (T@T T@T) T@T)
(declare-fun $generated@@78 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@79 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@80 (T@T) T@T)
(declare-fun $generated@@81 (T@T) T@T)
(declare-fun $generated@@130 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@131 (T@U) Bool)
(declare-fun $generated@@137 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert (= ($generated@@21 $generated) $generated@@0))
(assert (forall (($generated@@23 T@U) ($generated@@24 T@U) ($generated@@25 T@U) ) (!  (=> (and ($generated@@22 $generated@@23 $generated@@24) ($generated@@22 $generated@@24 $generated@@25)) ($generated@@22 $generated@@23 $generated@@25))
 :pattern ( ($generated@@22 $generated@@23 $generated@@24) ($generated@@22 $generated@@24 $generated@@25))
 :pattern ( ($generated@@22 $generated@@23 $generated@@24) ($generated@@22 $generated@@23 $generated@@25))
)))
(assert (forall (($generated@@28 T@U) ) (!  (=> ($generated@@26 $generated@@28) ($generated@@27 $generated@@28))
 :pattern ( ($generated@@26 $generated@@28))
)))
(assert (forall (($generated@@32 T@U) ($generated@@33 Int) ($generated@@34 Int) ) (!  (=> (and (and (<= 0 $generated@@33) (<= 0 $generated@@34)) (<= (+ $generated@@33 $generated@@34) ($generated@@31 $generated@@32))) (= ($generated@@29 ($generated@@29 $generated@@32 ($generated@@30 $generated@@33)) ($generated@@30 $generated@@34)) ($generated@@29 $generated@@32 ($generated@@30 (+ $generated@@33 $generated@@34)))))
 :pattern ( ($generated@@29 ($generated@@29 $generated@@32 ($generated@@30 $generated@@33)) ($generated@@30 $generated@@34)))
)))
(assert (= ($generated@@5 $generated@@36) 3))
(assert (forall (($generated@@38 T@U) ) (!  (=> ($generated@@35 $generated@@36 $generated@@38 $generated@@37) ($generated@@27 $generated@@38))
 :pattern ( ($generated@@27 $generated@@38) ($generated@@35 $generated@@36 $generated@@38 $generated@@37))
)))
(assert (forall (($generated@@40 T@U) ($generated@@41 T@T) ) (! (= ($generated@@39 $generated@@41 $generated@@40) $generated@@40)
 :pattern ( ($generated@@39 $generated@@41 $generated@@40))
)))
(assert (forall (($generated@@43 T@U) ) (! (= ($generated@@27 $generated@@43) (= ($generated@@42 $generated@@43) $generated@@3))
 :pattern ( ($generated@@27 $generated@@43))
)))
(assert (forall (($generated@@46 T@U) ($generated@@47 T@T) ) (! (= ($generated@@45 $generated@@47 ($generated@@44 $generated@@47 $generated@@46)) $generated@@46)
 :pattern ( ($generated@@44 $generated@@47 $generated@@46))
)))
(assert (forall (($generated@@49 T@U) ) (!  (=> ($generated@@27 $generated@@49) (exists (($generated@@50 Int) ($generated@@51 T@U) ) (= $generated@@49 ($generated@@48 $generated@@50 $generated@@51))))
 :pattern ( ($generated@@27 $generated@@49))
)))
(assert (forall (($generated@@53 T@U) ($generated@@54 T@U) ) (!  (=> (and ($generated@@52 $generated@@54) (<= ($generated@@31 $generated@@54) ($generated@@31 $generated@@53))) (and (= ($generated@@52 ($generated@@29 $generated@@53 $generated@@54)) ($generated@@52 $generated@@53)) (= ($generated@@31 ($generated@@29 $generated@@53 $generated@@54)) (- ($generated@@31 $generated@@53) ($generated@@31 $generated@@54)))))
 :pattern ( ($generated@@29 $generated@@53 $generated@@54))
)))
(assert (forall (($generated@@55 Int) ) (!  (=> (<= 0 $generated@@55) (and ($generated@@52 ($generated@@30 $generated@@55)) (= ($generated@@31 ($generated@@30 $generated@@55)) $generated@@55)))
 :pattern ( ($generated@@30 $generated@@55))
)))
(assert (forall (($generated@@56 T@U) ($generated@@57 T@U) ) (!  (or (or ($generated@@22 $generated@@56 $generated@@57) (= $generated@@56 $generated@@57)) ($generated@@22 $generated@@57 $generated@@56))
 :pattern ( ($generated@@22 $generated@@56 $generated@@57) ($generated@@22 $generated@@57 $generated@@56))
)))
(assert (forall (($generated@@58 T@U) ) (! (<= 0 ($generated@@31 $generated@@58))
 :pattern ( ($generated@@31 $generated@@58))
)))
(assert (forall (($generated@@59 Int) ($generated@@60 T@U) ) (! (= ($generated@@42 ($generated@@48 $generated@@59 $generated@@60)) $generated@@3)
 :pattern ( ($generated@@48 $generated@@59 $generated@@60))
)))
(assert (forall (($generated@@62 Int) ($generated@@63 T@U) ) (! (= ($generated@@61 ($generated@@48 $generated@@62 $generated@@63)) $generated@@62)
 :pattern ( ($generated@@48 $generated@@62 $generated@@63))
)))
(assert (forall (($generated@@65 Int) ($generated@@66 T@U) ) (! (= ($generated@@64 ($generated@@48 $generated@@65 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@48 $generated@@65 $generated@@66))
)))
(assert (forall (($generated@@67 T@U) ($generated@@68 T@T) ) (! (= ($generated@@44 $generated@@68 ($generated@@45 $generated@@68 $generated@@67)) $generated@@67)
 :pattern ( ($generated@@45 $generated@@68 $generated@@67))
)))
(assert (forall (($generated@@69 T@U) ($generated@@70 T@U) ) (!  (and (and (and (=> ($generated@@22 $generated@@69 $generated@@70) (or (not (= $generated@@69 $generated@@70)) (not true))) (=> (and ($generated@@52 $generated@@69) (not ($generated@@52 $generated@@70))) ($generated@@22 $generated@@69 $generated@@70))) (=> (and ($generated@@52 $generated@@69) ($generated@@52 $generated@@70)) (= ($generated@@22 $generated@@69 $generated@@70) (< ($generated@@31 $generated@@69) ($generated@@31 $generated@@70))))) (=> (and ($generated@@22 $generated@@69 $generated@@70) ($generated@@52 $generated@@70)) ($generated@@52 $generated@@69)))
 :pattern ( ($generated@@22 $generated@@69 $generated@@70))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@82 T@T) ($generated@@83 T@T) ($generated@@84 T@T) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ) (! (= ($generated@@71 $generated@@82 $generated@@83 $generated@@84 ($generated@@78 $generated@@82 $generated@@83 $generated@@84 $generated@@86 $generated@@87 $generated@@88 $generated@@85) $generated@@87 $generated@@88) $generated@@85)
 :weight 0
)) (and (forall (($generated@@89 T@T) ($generated@@90 T@T) ($generated@@91 T@T) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (!  (or (= $generated@@94 $generated@@96) (= ($generated@@71 $generated@@89 $generated@@90 $generated@@91 ($generated@@78 $generated@@89 $generated@@90 $generated@@91 $generated@@93 $generated@@94 $generated@@95 $generated@@92) $generated@@96 $generated@@97) ($generated@@71 $generated@@89 $generated@@90 $generated@@91 $generated@@93 $generated@@96 $generated@@97)))
 :weight 0
)) (forall (($generated@@98 T@T) ($generated@@99 T@T) ($generated@@100 T@T) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or (= $generated@@104 $generated@@106) (= ($generated@@71 $generated@@98 $generated@@99 $generated@@100 ($generated@@78 $generated@@98 $generated@@99 $generated@@100 $generated@@102 $generated@@103 $generated@@104 $generated@@101) $generated@@105 $generated@@106) ($generated@@71 $generated@@98 $generated@@99 $generated@@100 $generated@@102 $generated@@105 $generated@@106)))
 :weight 0
)))) (= ($generated@@5 $generated@@72) 4)) (= ($generated@@5 $generated@@73) 5)) (forall (($generated@@107 T@T) ($generated@@108 T@T) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (! (= ($generated@@75 $generated@@107 $generated@@108 ($generated@@79 $generated@@107 $generated@@108 $generated@@110 $generated@@111 $generated@@109) $generated@@111) $generated@@109)
 :weight 0
))) (forall (($generated@@112 T@T) ($generated@@113 T@T) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ) (!  (or (= $generated@@116 $generated@@117) (= ($generated@@75 $generated@@112 $generated@@113 ($generated@@79 $generated@@112 $generated@@113 $generated@@115 $generated@@116 $generated@@114) $generated@@117) ($generated@@75 $generated@@112 $generated@@113 $generated@@115 $generated@@117)))
 :weight 0
))) (= ($generated@@5 $generated@@76) 6)) (forall (($generated@@118 T@T) ($generated@@119 T@T) ) (= ($generated@@5 ($generated@@77 $generated@@118 $generated@@119)) 7))) (forall (($generated@@120 T@T) ($generated@@121 T@T) ) (! (= ($generated@@80 ($generated@@77 $generated@@120 $generated@@121)) $generated@@120)
 :pattern ( ($generated@@77 $generated@@120 $generated@@121))
))) (forall (($generated@@122 T@T) ($generated@@123 T@T) ) (! (= ($generated@@81 ($generated@@77 $generated@@122 $generated@@123)) $generated@@123)
 :pattern ( ($generated@@77 $generated@@122 $generated@@123))
))))
(assert (forall (($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 Bool) ($generated@@128 T@U) ($generated@@129 T@U) ) (! (= ($generated@@10 ($generated@@71 $generated@@72 $generated@@73 $generated@@6 ($generated@@74 $generated@@124 $generated@@125 $generated@@126 $generated@@127) $generated@@128 $generated@@129))  (=> (and (or (not (= $generated@@128 $generated@@124)) (not true)) ($generated@@10 ($generated@@44 $generated@@6 ($generated@@75 $generated@@73 $generated@@76 ($generated@@75 $generated@@72 ($generated@@77 $generated@@73 $generated@@76) $generated@@125 $generated@@128) $generated@@126)))) $generated@@127))
 :pattern ( ($generated@@71 $generated@@72 $generated@@73 $generated@@6 ($generated@@74 $generated@@124 $generated@@125 $generated@@126 $generated@@127) $generated@@128 $generated@@129))
)))
(assert (forall (($generated@@132 T@U) ($generated@@133 T@U) ) (!  (=> (and ($generated@@131 $generated@@133) (and ($generated@@27 $generated@@132) ($generated@@130 $generated@@36 $generated@@132 $generated@@37 $generated@@133))) ($generated@@130 $generated@@7 ($generated@@11 ($generated@@61 $generated@@132)) $generated $generated@@133))
 :pattern ( ($generated@@130 $generated@@7 ($generated@@11 ($generated@@61 $generated@@132)) $generated $generated@@133))
)))
(assert (forall (($generated@@134 T@U) ) (!  (=> ($generated@@52 $generated@@134) (= $generated@@134 ($generated@@30 ($generated@@31 $generated@@134))))
 :pattern ( ($generated@@31 $generated@@134))
 :pattern ( ($generated@@52 $generated@@134))
)))
(assert (forall (($generated@@135 T@U) ($generated@@136 T@U) ) (!  (=> (and ($generated@@131 $generated@@136) ($generated@@35 $generated@@36 $generated@@135 $generated@@37)) ($generated@@130 $generated@@36 $generated@@135 $generated@@37 $generated@@136))
 :pattern ( ($generated@@130 $generated@@36 $generated@@135 $generated@@37 $generated@@136))
)))
(assert (= ($generated@@21 $generated@@37) $generated@@2))
(assert (= ($generated@@137 $generated@@37) $generated@@4))
(assert (forall (($generated@@138 T@U) ($generated@@139 T@U) ) (!  (=> (and ($generated@@52 $generated@@139) (<= ($generated@@31 $generated@@139) ($generated@@31 $generated@@138))) (or (and (= $generated@@139 ($generated@@30 0)) (= ($generated@@29 $generated@@138 $generated@@139) $generated@@138)) (and (or (not (= $generated@@139 ($generated@@30 0))) (not true)) ($generated@@22 ($generated@@29 $generated@@138 $generated@@139) $generated@@138))))
 :pattern ( ($generated@@29 $generated@@138 $generated@@139))
)))
(assert (forall (($generated@@140 T@U) ($generated@@141 T@U) ) (!  (=> (and ($generated@@131 $generated@@141) (and ($generated@@27 $generated@@140) ($generated@@130 $generated@@36 $generated@@140 $generated@@37 $generated@@141))) ($generated@@130 $generated@@36 ($generated@@64 $generated@@140) $generated@@37 $generated@@141))
 :pattern ( ($generated@@130 $generated@@36 ($generated@@64 $generated@@140) $generated@@37 $generated@@141))
)))
(assert (forall (($generated@@142 T@U) ($generated@@143 T@T) ) (! (= ($generated@@45 $generated@@143 ($generated@@39 $generated@@143 $generated@@142)) ($generated@@39 $generated@@76 ($generated@@45 $generated@@143 $generated@@142)))
 :pattern ( ($generated@@45 $generated@@143 ($generated@@39 $generated@@143 $generated@@142)))
)))
(assert (forall (($generated@@144 Int) ($generated@@145 T@U) ) (! (= ($generated@@35 $generated@@36 ($generated@@48 $generated@@144 $generated@@145) $generated@@37)  (and ($generated@@35 $generated@@7 ($generated@@11 $generated@@144) $generated) ($generated@@35 $generated@@36 $generated@@145 $generated@@37)))
 :pattern ( ($generated@@35 $generated@@36 ($generated@@48 $generated@@144 $generated@@145) $generated@@37))
)))
(assert (forall (($generated@@146 T@U) ($generated@@147 T@U) ) (! ($generated@@130 $generated@@7 $generated@@147 $generated $generated@@146)
 :pattern ( ($generated@@130 $generated@@7 $generated@@147 $generated $generated@@146))
)))
(assert (forall (($generated@@148 T@U) ) (! ($generated@@35 $generated@@7 $generated@@148 $generated)
 :pattern ( ($generated@@35 $generated@@7 $generated@@148 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@149 () T@U)
(declare-fun $generated@@150 () T@U)
(declare-fun $generated@@151 (T@U) Bool)
(declare-fun $generated@@152 () T@U)
(declare-fun $generated@@153 () T@U)
(declare-fun $generated@@154 () T@U)
(declare-fun $generated@@155 () T@U)
(declare-fun $generated@@156 () T@U)
(declare-fun $generated@@157 () T@U)
(declare-fun $generated@@158 () T@U)
(declare-fun $generated@@159 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 8) (let (($generated@@160  (=> (= (ControlFlow 0 2) (- 0 1)) ($generated@@10 ($generated@@39 $generated@@6 ($generated@@9 false))))))
(let (($generated@@161  (=> (<= ($generated@@31 $generated@@149) 0) (=> (and (and (and ($generated@@131 $generated@@150) ($generated@@151 $generated@@150)) (= $generated@@152 $generated@@150)) (and (forall (($generated@@162 T@U) ($generated@@163 T@U) )  (=> (and ($generated@@35 $generated@@36 $generated@@163 $generated@@37) ($generated@@22 $generated@@162 $generated@@149)) ($generated@@10 ($generated@@39 $generated@@6 ($generated@@9 false))))) (= (ControlFlow 0 6) 2))) $generated@@160))))
(let (($generated@@164  (=> (< 0 ($generated@@31 $generated@@149)) (and (=> (= (ControlFlow 0 3) (- 0 5)) ($generated@@52 ($generated@@39 $generated@@76 ($generated@@30 1)))) (=> ($generated@@52 ($generated@@39 $generated@@76 ($generated@@30 1))) (and (=> (= (ControlFlow 0 3) (- 0 4)) (<= ($generated@@31 ($generated@@39 $generated@@76 ($generated@@30 1))) ($generated@@31 $generated@@149))) (=> (<= ($generated@@31 ($generated@@39 $generated@@76 ($generated@@30 1))) ($generated@@31 $generated@@149)) (=> (and (and (= $generated@@153 ($generated@@29 $generated@@149 ($generated@@30 1))) ($generated@@27 $generated@@154)) (and ($generated@@27 $generated@@154) (= $generated@@155 ($generated@@64 $generated@@154)))) (=> (and (and (and ($generated@@131 $generated@@156) ($generated@@151 $generated@@156)) ($generated@@10 ($generated@@39 $generated@@6 ($generated@@9 false)))) (and (= $generated@@152 $generated@@156) (= (ControlFlow 0 3) 2))) $generated@@160)))))))))
(let (($generated@@165  (=> (= $generated@@157 ($generated@@74 $generated@@158 $generated@@152 $generated@@1 false)) (and (=> (= (ControlFlow 0 7) 3) $generated@@164) (=> (= (ControlFlow 0 7) 6) $generated@@161)))))
(let (($generated@@166  (=> (and ($generated@@131 $generated@@152) ($generated@@151 $generated@@152)) (=> (and (and (and ($generated@@35 $generated@@36 $generated@@154 $generated@@37) ($generated@@130 $generated@@36 $generated@@154 $generated@@37 $generated@@152)) ($generated@@26 $generated@@154)) (and (= 2 $generated@@159) (= (ControlFlow 0 8) 7))) $generated@@165))))
$generated@@166))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
