(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U T@U) Bool)
(declare-fun $generated@@0 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@1 () T@T)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 (T@T T@T) T@T)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 (T@U) Bool)
(declare-fun $generated@@7 (T@T T@U) T@U)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (T@T) Int)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 () T@T)
(declare-fun $generated@@12 (Bool) T@U)
(declare-fun $generated@@13 (Int) T@U)
(declare-fun $generated@@14 (T@U) Int)
(declare-fun $generated@@15 (Real) T@U)
(declare-fun $generated@@16 (T@U) Real)
(declare-fun $generated@@17 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@18 (T@T) T@T)
(declare-fun $generated@@19 (T@T) T@T)
(declare-fun $generated@@46 (Int) Int)
(declare-fun $generated@@48 (T@T T@U) T@U)
(declare-fun $generated@@51 (T@T T@U) T@U)
(declare-fun $generated@@54 (T@U) Bool)
(declare-fun $generated@@55 (T@U T@U) Bool)
(declare-fun $generated@@65 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@66 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@67 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@9 $generated@@8) 0) (= ($generated@@9 $generated@@10) 1)) (= ($generated@@9 $generated@@11) 2)) (forall (($generated@@20 Bool) ) (! (= ($generated@@6 ($generated@@12 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@12 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@12 ($generated@@6 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@6 $generated@@21))
))) (forall (($generated@@22 Int) ) (! (= ($generated@@14 ($generated@@13 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@13 $generated@@22))
))) (forall (($generated@@23 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@14 $generated@@23))
))) (forall (($generated@@24 Real) ) (! (= ($generated@@16 ($generated@@15 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@15 $generated@@24))
))) (forall (($generated@@25 T@U) ) (! (= ($generated@@15 ($generated@@16 $generated@@25)) $generated@@25)
 :pattern ( ($generated@@16 $generated@@25))
))) (forall (($generated@@26 T@T) ($generated@@27 T@T) ($generated@@28 T@U) ($generated@@29 T@U) ($generated@@30 T@U) ) (! (= ($generated@@0 $generated@@26 $generated@@27 ($generated@@17 $generated@@26 $generated@@27 $generated@@29 $generated@@30 $generated@@28) $generated@@30) $generated@@28)
 :weight 0
))) (forall (($generated@@31 T@T) ($generated@@32 T@T) ($generated@@33 T@U) ($generated@@34 T@U) ($generated@@35 T@U) ($generated@@36 T@U) ) (!  (or (= $generated@@35 $generated@@36) (= ($generated@@0 $generated@@31 $generated@@32 ($generated@@17 $generated@@31 $generated@@32 $generated@@34 $generated@@35 $generated@@33) $generated@@36) ($generated@@0 $generated@@31 $generated@@32 $generated@@34 $generated@@36)))
 :weight 0
))) (= ($generated@@9 $generated@@1) 3)) (= ($generated@@9 $generated@@2) 4)) (= ($generated@@9 $generated@@3) 5)) (forall (($generated@@37 T@T) ($generated@@38 T@T) ) (= ($generated@@9 ($generated@@4 $generated@@37 $generated@@38)) 6))) (forall (($generated@@39 T@T) ($generated@@40 T@T) ) (! (= ($generated@@18 ($generated@@4 $generated@@39 $generated@@40)) $generated@@39)
 :pattern ( ($generated@@4 $generated@@39 $generated@@40))
))) (forall (($generated@@41 T@T) ($generated@@42 T@T) ) (! (= ($generated@@19 ($generated@@4 $generated@@41 $generated@@42)) $generated@@42)
 :pattern ( ($generated@@4 $generated@@41 $generated@@42))
))))
(assert (forall (($generated@@43 T@U) ($generated@@44 T@U) ) (!  (=> ($generated $generated@@43 $generated@@44) (forall (($generated@@45 T@U) ) (!  (=> ($generated@@6 ($generated@@7 $generated@@8 ($generated@@0 $generated@@1 $generated@@2 ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@43 $generated@@45) $generated@@5))) ($generated@@6 ($generated@@7 $generated@@8 ($generated@@0 $generated@@1 $generated@@2 ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@44 $generated@@45) $generated@@5))))
 :pattern ( ($generated@@0 $generated@@1 $generated@@2 ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@44 $generated@@45) $generated@@5))
)))
 :pattern ( ($generated $generated@@43 $generated@@44))
)))
(assert (forall (($generated@@47 Int) ) (! (= ($generated@@46 $generated@@47) $generated@@47)
 :pattern ( ($generated@@46 $generated@@47))
)))
(assert (forall (($generated@@49 T@U) ($generated@@50 T@T) ) (! (= ($generated@@48 $generated@@50 $generated@@49) $generated@@49)
 :pattern ( ($generated@@48 $generated@@50 $generated@@49))
)))
(assert (forall (($generated@@52 T@U) ($generated@@53 T@T) ) (! (= ($generated@@51 $generated@@53 ($generated@@7 $generated@@53 $generated@@52)) $generated@@52)
 :pattern ( ($generated@@7 $generated@@53 $generated@@52))
)))
(assert ($generated@@54 $generated@@5))
(assert (forall (($generated@@56 T@U) ($generated@@57 T@U) ) (!  (=> ($generated@@55 $generated@@56 $generated@@57) (and ($generated $generated@@56 $generated@@57) (forall (($generated@@58 T@U) ($generated@@59 T@U) ) (!  (=> (not ($generated@@54 $generated@@59)) (= ($generated@@0 $generated@@1 $generated@@2 ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@56 $generated@@58) $generated@@59) ($generated@@0 $generated@@1 $generated@@2 ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@57 $generated@@58) $generated@@59)))
 :pattern ( ($generated@@0 $generated@@1 $generated@@2 ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@57 $generated@@58) $generated@@59))
))))
 :pattern ( ($generated@@55 $generated@@56 $generated@@57))
)))
(assert (forall (($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@U) ) (!  (=> (or (not (= $generated@@60 $generated@@62)) (not true)) (=> (and ($generated $generated@@60 $generated@@61) ($generated $generated@@61 $generated@@62)) ($generated $generated@@60 $generated@@62)))
 :pattern ( ($generated $generated@@60 $generated@@61) ($generated $generated@@61 $generated@@62))
)))
(assert (forall (($generated@@63 T@U) ($generated@@64 T@T) ) (! (= ($generated@@7 $generated@@64 ($generated@@51 $generated@@64 $generated@@63)) $generated@@63)
 :pattern ( ($generated@@51 $generated@@64 $generated@@63))
)))
(assert  (and (forall (($generated@@68 T@T) ($generated@@69 T@T) ($generated@@70 T@T) ($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@U) ) (! (= ($generated@@65 $generated@@68 $generated@@69 $generated@@70 ($generated@@67 $generated@@68 $generated@@69 $generated@@70 $generated@@72 $generated@@73 $generated@@74 $generated@@71) $generated@@73 $generated@@74) $generated@@71)
 :weight 0
)) (and (forall (($generated@@75 T@T) ($generated@@76 T@T) ($generated@@77 T@T) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ) (!  (or (= $generated@@80 $generated@@82) (= ($generated@@65 $generated@@75 $generated@@76 $generated@@77 ($generated@@67 $generated@@75 $generated@@76 $generated@@77 $generated@@79 $generated@@80 $generated@@81 $generated@@78) $generated@@82 $generated@@83) ($generated@@65 $generated@@75 $generated@@76 $generated@@77 $generated@@79 $generated@@82 $generated@@83)))
 :weight 0
)) (forall (($generated@@84 T@T) ($generated@@85 T@T) ($generated@@86 T@T) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ) (!  (or (= $generated@@90 $generated@@92) (= ($generated@@65 $generated@@84 $generated@@85 $generated@@86 ($generated@@67 $generated@@84 $generated@@85 $generated@@86 $generated@@88 $generated@@89 $generated@@90 $generated@@87) $generated@@91 $generated@@92) ($generated@@65 $generated@@84 $generated@@85 $generated@@86 $generated@@88 $generated@@91 $generated@@92)))
 :weight 0
)))))
(assert (forall (($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 Bool) ($generated@@97 T@U) ($generated@@98 T@U) ) (! (= ($generated@@6 ($generated@@65 $generated@@3 $generated@@1 $generated@@8 ($generated@@66 $generated@@93 $generated@@94 $generated@@95 $generated@@96) $generated@@97 $generated@@98))  (=> (and (or (not (= $generated@@97 $generated@@93)) (not true)) ($generated@@6 ($generated@@7 $generated@@8 ($generated@@0 $generated@@1 $generated@@2 ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@94 $generated@@97) $generated@@95)))) $generated@@96))
 :pattern ( ($generated@@65 $generated@@3 $generated@@1 $generated@@8 ($generated@@66 $generated@@93 $generated@@94 $generated@@95 $generated@@96) $generated@@97 $generated@@98))
)))
(assert (forall (($generated@@99 Int) ) (! (= ($generated@@51 $generated@@10 ($generated@@13 ($generated@@46 $generated@@99))) ($generated@@48 $generated@@2 ($generated@@51 $generated@@10 ($generated@@13 $generated@@99))))
 :pattern ( ($generated@@51 $generated@@10 ($generated@@13 ($generated@@46 $generated@@99))))
)))
(assert (forall (($generated@@100 T@U) ($generated@@101 T@T) ) (! (= ($generated@@51 $generated@@101 ($generated@@48 $generated@@101 $generated@@100)) ($generated@@48 $generated@@2 ($generated@@51 $generated@@101 $generated@@100)))
 :pattern ( ($generated@@51 $generated@@101 ($generated@@48 $generated@@101 $generated@@100)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@102 () Int)
(declare-fun $generated@@103 () Int)
(declare-fun $generated@@104 () Int)
(declare-fun $generated@@105 () Int)
(declare-fun $generated@@106 () Bool)
(declare-fun $generated@@107 () Bool)
(declare-fun $generated@@108 () Int)
(declare-fun $generated@@109 () Int)
(declare-fun $generated@@110 () T@U)
(declare-fun $generated@@111 () T@U)
(declare-fun $generated@@112 () T@U)
(declare-fun $generated@@113 () Bool)
(declare-fun $generated@@114 () Int)
(declare-fun $generated@@115 () Int)
(declare-fun $generated@@116 () Bool)
(declare-fun $generated@@117 (T@U) Bool)
(declare-fun $generated@@118 (T@U) Bool)
(declare-fun $generated@@119 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 29) (let (($generated@@120  (=> (= (ControlFlow 0 12) (- 0 11)) (=> false (<= $generated@@102 ($generated@@46 100))))))
(let (($generated@@121  (=> (and (or (not (= $generated@@103 $generated@@104)) (not true)) (= (ControlFlow 0 14) 12)) $generated@@120)))
(let (($generated@@122 true))
(let (($generated@@123 true))
(let (($generated@@124  (=> (= (ControlFlow 0 7) (- 0 6)) (=> false (<= $generated@@105 ($generated@@46 100))))))
(let (($generated@@125  (=> (and ($generated@@6 ($generated@@48 $generated@@8 ($generated@@12 true))) (= (ControlFlow 0 8) 7)) $generated@@124)))
(let (($generated@@126 true))
(let (($generated@@127 true))
(let (($generated@@128  (=> (= (ControlFlow 0 2) (- 0 1)) ($generated@@6 ($generated@@48 $generated@@8 ($generated@@12 false))))))
(let (($generated@@129  (=> (and (= $generated@@103 $generated@@104) (= (ControlFlow 0 13) 2)) $generated@@128)))
(let (($generated@@130  (and (=> (= (ControlFlow 0 15) 13) $generated@@129) (=> (= (ControlFlow 0 15) 14) $generated@@121))))
(let (($generated@@131  (=> $generated@@106 (and (=> (= (ControlFlow 0 16) 15) $generated@@130) (=> (= (ControlFlow 0 16) 12) $generated@@120)))))
(let (($generated@@132  (and (=> (= (ControlFlow 0 17) 10) $generated@@122) (=> (= (ControlFlow 0 17) 16) $generated@@131))))
(let (($generated@@133  (=> (and (and (and (and (and (not false) $generated@@107) (= $generated@@108 0)) (= $generated@@104 100)) (and (<= $generated@@108 $generated@@103) (<= $generated@@103 $generated@@104))) (and (and (=> $generated@@106 (<= $generated@@109 ($generated@@46 100))) (forall (($generated@@134 T@U) ) (!  (=> (and (or (not (= $generated@@134 $generated@@111)) (not true)) ($generated@@6 ($generated@@7 $generated@@8 ($generated@@0 $generated@@1 $generated@@2 ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@110 $generated@@134) $generated@@5)))) (= ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@110 $generated@@134) ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@110 $generated@@134)))
 :pattern ( ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@110 $generated@@134))
))) (and ($generated@@55 $generated@@110 $generated@@110) (forall (($generated@@135 T@U) ($generated@@136 T@U) ) (!  (=> (and (or (not (= $generated@@135 $generated@@111)) (not true)) ($generated@@6 ($generated@@7 $generated@@8 ($generated@@0 $generated@@1 $generated@@2 ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@110 $generated@@135) $generated@@5)))) (or (= ($generated@@0 $generated@@1 $generated@@2 ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@110 $generated@@135) $generated@@136) ($generated@@0 $generated@@1 $generated@@2 ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@110 $generated@@135) $generated@@136)) ($generated@@6 ($generated@@65 $generated@@3 $generated@@1 $generated@@8 $generated@@112 $generated@@135 $generated@@136))))
 :pattern ( ($generated@@0 $generated@@1 $generated@@2 ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@110 $generated@@135) $generated@@136))
))))) (and (=> (= (ControlFlow 0 18) 9) $generated@@123) (=> (= (ControlFlow 0 18) 17) $generated@@132)))))
(let (($generated@@137  (=> (not ($generated@@6 ($generated@@48 $generated@@8 ($generated@@12 true)))) (=> (and (= $generated@@108 ($generated@@46 0)) (= $generated@@104 ($generated@@46 100))) (and (=> (= (ControlFlow 0 19) (- 0 21)) (<= $generated@@108 $generated@@104)) (=> (<= $generated@@108 $generated@@104) (and (=> (= (ControlFlow 0 19) (- 0 20)) (=> $generated@@113 (<= $generated@@114 ($generated@@46 100)))) (=> (=> $generated@@113 (<= $generated@@114 ($generated@@46 100))) (=> (= (ControlFlow 0 19) 18) $generated@@133)))))))))
(let (($generated@@138  (and (=> (= (ControlFlow 0 22) 19) $generated@@137) (=> (= (ControlFlow 0 22) 8) $generated@@125))))
(let (($generated@@139  (=> $generated@@107 (and (=> (= (ControlFlow 0 23) 22) $generated@@138) (=> (= (ControlFlow 0 23) 7) $generated@@124)))))
(let (($generated@@140  (and (=> (= (ControlFlow 0 24) 5) $generated@@126) (=> (= (ControlFlow 0 24) 23) $generated@@139))))
(let (($generated@@141  (=> (not false) (=> (and (and (=> $generated@@107 (<= $generated@@114 ($generated@@46 100))) (forall (($generated@@142 T@U) ) (!  (=> (and (or (not (= $generated@@142 $generated@@111)) (not true)) ($generated@@6 ($generated@@7 $generated@@8 ($generated@@0 $generated@@1 $generated@@2 ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@110 $generated@@142) $generated@@5)))) (= ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@110 $generated@@142) ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@110 $generated@@142)))
 :pattern ( ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@110 $generated@@142))
))) (and ($generated@@55 $generated@@110 $generated@@110) (forall (($generated@@143 T@U) ($generated@@144 T@U) ) (!  (=> (and (or (not (= $generated@@143 $generated@@111)) (not true)) ($generated@@6 ($generated@@7 $generated@@8 ($generated@@0 $generated@@1 $generated@@2 ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@110 $generated@@143) $generated@@5)))) (or (= ($generated@@0 $generated@@1 $generated@@2 ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@110 $generated@@143) $generated@@144) ($generated@@0 $generated@@1 $generated@@2 ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@110 $generated@@143) $generated@@144)) ($generated@@6 ($generated@@65 $generated@@3 $generated@@1 $generated@@8 $generated@@112 $generated@@143 $generated@@144))))
 :pattern ( ($generated@@0 $generated@@1 $generated@@2 ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@110 $generated@@143) $generated@@144))
)))) (and (=> (= (ControlFlow 0 25) 4) $generated@@127) (=> (= (ControlFlow 0 25) 24) $generated@@140))))))
(let (($generated@@145  (=> (= $generated@@115 $generated@@115) (and (=> (= (ControlFlow 0 26) (- 0 27)) (=> $generated@@116 (<= $generated@@115 ($generated@@46 100)))) (=> (=> $generated@@116 (<= $generated@@115 ($generated@@46 100))) (=> (= (ControlFlow 0 26) 25) $generated@@141))))))
(let (($generated@@146  (=> (and (or (not (= $generated@@115 $generated@@115)) (not true)) (= (ControlFlow 0 3) 2)) $generated@@128)))
(let (($generated@@147  (=> (= $generated@@112 ($generated@@66 $generated@@111 $generated@@110 $generated@@5 false)) (and (=> (= (ControlFlow 0 28) 26) $generated@@145) (=> (= (ControlFlow 0 28) 3) $generated@@146)))))
(let (($generated@@148  (=> (and (and (and ($generated@@117 $generated@@110) ($generated@@118 $generated@@110)) (= 0 $generated@@119)) (and (<= $generated@@115 ($generated@@46 100)) (= (ControlFlow 0 29) 28))) $generated@@147)))
$generated@@148))))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
