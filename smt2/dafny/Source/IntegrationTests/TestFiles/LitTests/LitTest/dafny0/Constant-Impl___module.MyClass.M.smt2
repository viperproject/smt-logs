(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 (T@T) Int)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 () T@T)
(declare-fun $generated@@12 (Bool) T@U)
(declare-fun $generated@@13 (T@U) Bool)
(declare-fun $generated@@14 (Int) T@U)
(declare-fun $generated@@15 (T@U) Int)
(declare-fun $generated@@16 (Real) T@U)
(declare-fun $generated@@17 (T@U) Real)
(declare-fun $generated@@24 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@25 () T@U)
(declare-fun $generated@@28 () T@T)
(declare-fun $generated@@29 (T@U) T@U)
(declare-fun $generated@@30 (T@U) T@U)
(declare-fun $generated@@34 (T@T T@U T@U) Bool)
(declare-fun $generated@@35 () T@U)
(declare-fun $generated@@36 () T@U)
(declare-fun $generated@@37 (T@U) T@U)
(declare-fun $generated@@39 () Int)
(declare-fun $generated@@40 (T@U) T@U)
(declare-fun $generated@@42 () T@U)
(declare-fun $generated@@45 (T@T T@U) T@U)
(declare-fun $generated@@46 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 () T@T)
(declare-fun $generated@@49 (T@T T@T) T@T)
(declare-fun $generated@@50 (T@U) Bool)
(declare-fun $generated@@51 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@52 (T@T) T@T)
(declare-fun $generated@@53 (T@T) T@T)
(declare-fun $generated@@78 (Int) Int)
(declare-fun $generated@@80 (T@T T@U) T@U)
(declare-fun $generated@@83 (T@T T@U) T@U)
(declare-fun $generated@@88 (T@U) T@U)
(declare-fun $generated@@89 (T@U) T@U)
(declare-fun $generated@@95 (T@U) T@U)
(declare-fun $generated@@97 (T@U) T@U)
(declare-fun $generated@@101 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@102 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@103 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@8 $generated@@9) 0) (= ($generated@@8 $generated@@10) 1)) (= ($generated@@8 $generated@@11) 2)) (forall (($generated@@18 Bool) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 Real) ) (! (= ($generated@@17 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 T@U) ) (! (= ($generated@@16 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7)
)
(assert (forall (($generated@@26 T@U) ($generated@@27 T@U) ) (! ($generated@@24 $generated@@10 $generated@@26 $generated@@25 $generated@@27)
 :pattern ( ($generated@@24 $generated@@10 $generated@@26 $generated@@25 $generated@@27))
)))
(assert (= ($generated@@8 $generated@@28) 3))
(assert (forall (($generated@@31 T@U) ($generated@@32 T@U) ($generated@@33 T@U) ) (! (= ($generated@@24 $generated@@28 $generated@@32 ($generated@@29 $generated@@31) $generated@@33) ($generated@@24 $generated@@28 $generated@@32 ($generated@@30 $generated@@31) $generated@@33))
 :pattern ( ($generated@@24 $generated@@28 $generated@@32 ($generated@@29 $generated@@31) $generated@@33))
 :pattern ( ($generated@@24 $generated@@28 $generated@@32 ($generated@@30 $generated@@31) $generated@@33))
)))
(assert (forall (($generated@@38 T@U) ) (! (= ($generated@@34 $generated@@28 $generated@@38 $generated@@35)  (or (= $generated@@38 $generated@@36) (= ($generated@@37 $generated@@38) $generated@@35)))
 :pattern ( ($generated@@34 $generated@@28 $generated@@38 $generated@@35))
)))
(assert  (=> (< 1 $generated@@39) (forall (($generated@@41 T@U) ) (!  (=> (and (or (not (= $generated@@41 $generated@@36)) (not true)) (= ($generated@@37 $generated@@41) $generated@@35)) ($generated@@34 $generated@@28 ($generated@@40 $generated@@41) ($generated@@29 $generated@@25)))
 :pattern ( ($generated@@40 $generated@@41))
))))
(assert (forall (($generated@@43 T@U) ($generated@@44 T@U) ) (! (= ($generated@@24 $generated@@28 $generated@@43 $generated@@42 $generated@@44) ($generated@@24 $generated@@28 $generated@@43 $generated@@35 $generated@@44))
 :pattern ( ($generated@@24 $generated@@28 $generated@@43 $generated@@42 $generated@@44))
 :pattern ( ($generated@@24 $generated@@28 $generated@@43 $generated@@35 $generated@@44))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@54 T@T) ($generated@@55 T@T) ($generated@@56 T@U) ($generated@@57 T@U) ($generated@@58 T@U) ) (! (= ($generated@@46 $generated@@54 $generated@@55 ($generated@@51 $generated@@54 $generated@@55 $generated@@57 $generated@@58 $generated@@56) $generated@@58) $generated@@56)
 :weight 0
)) (forall (($generated@@59 T@T) ($generated@@60 T@T) ($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@U) ($generated@@64 T@U) ) (!  (or (= $generated@@63 $generated@@64) (= ($generated@@46 $generated@@59 $generated@@60 ($generated@@51 $generated@@59 $generated@@60 $generated@@62 $generated@@63 $generated@@61) $generated@@64) ($generated@@46 $generated@@59 $generated@@60 $generated@@62 $generated@@64)))
 :weight 0
))) (= ($generated@@8 $generated@@47) 4)) (= ($generated@@8 $generated@@48) 5)) (forall (($generated@@65 T@T) ($generated@@66 T@T) ) (= ($generated@@8 ($generated@@49 $generated@@65 $generated@@66)) 6))) (forall (($generated@@67 T@T) ($generated@@68 T@T) ) (! (= ($generated@@52 ($generated@@49 $generated@@67 $generated@@68)) $generated@@67)
 :pattern ( ($generated@@49 $generated@@67 $generated@@68))
))) (forall (($generated@@69 T@T) ($generated@@70 T@T) ) (! (= ($generated@@53 ($generated@@49 $generated@@69 $generated@@70)) $generated@@70)
 :pattern ( ($generated@@49 $generated@@69 $generated@@70))
))))
(assert  (=> (< 1 $generated@@39) (forall (($generated@@71 T@U) ($generated@@72 T@U) ) (!  (=> (and (and ($generated@@50 $generated@@71) (and (or (not (= $generated@@72 $generated@@36)) (not true)) (= ($generated@@37 $generated@@72) $generated@@35))) ($generated@@13 ($generated@@45 $generated@@9 ($generated@@46 $generated@@47 $generated@@48 ($generated@@46 $generated@@28 ($generated@@49 $generated@@47 $generated@@48) $generated@@71 $generated@@72) $generated)))) ($generated@@24 $generated@@28 ($generated@@40 $generated@@72) ($generated@@29 $generated@@25) $generated@@71))
 :pattern ( ($generated@@40 $generated@@72) ($generated@@45 $generated@@9 ($generated@@46 $generated@@47 $generated@@48 ($generated@@46 $generated@@28 ($generated@@49 $generated@@47 $generated@@48) $generated@@71 $generated@@72) $generated)))
))))
(assert (forall (($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@U) ) (! (= ($generated@@24 $generated@@28 $generated@@74 ($generated@@30 $generated@@73) $generated@@75)  (or (= $generated@@74 $generated@@36) ($generated@@13 ($generated@@45 $generated@@9 ($generated@@46 $generated@@47 $generated@@48 ($generated@@46 $generated@@28 ($generated@@49 $generated@@47 $generated@@48) $generated@@75 $generated@@74) $generated)))))
 :pattern ( ($generated@@24 $generated@@28 $generated@@74 ($generated@@30 $generated@@73) $generated@@75))
)))
(assert (forall (($generated@@76 T@U) ($generated@@77 T@U) ) (! (= ($generated@@24 $generated@@28 $generated@@76 $generated@@35 $generated@@77)  (or (= $generated@@76 $generated@@36) ($generated@@13 ($generated@@45 $generated@@9 ($generated@@46 $generated@@47 $generated@@48 ($generated@@46 $generated@@28 ($generated@@49 $generated@@47 $generated@@48) $generated@@77 $generated@@76) $generated)))))
 :pattern ( ($generated@@24 $generated@@28 $generated@@76 $generated@@35 $generated@@77))
)))
(assert (forall (($generated@@79 Int) ) (! (= ($generated@@78 $generated@@79) $generated@@79)
 :pattern ( ($generated@@78 $generated@@79))
)))
(assert (forall (($generated@@81 T@U) ($generated@@82 T@T) ) (! (= ($generated@@80 $generated@@82 $generated@@81) $generated@@81)
 :pattern ( ($generated@@80 $generated@@82 $generated@@81))
)))
(assert (forall (($generated@@84 T@U) ($generated@@85 T@T) ) (! (= ($generated@@83 $generated@@85 ($generated@@45 $generated@@85 $generated@@84)) $generated@@84)
 :pattern ( ($generated@@45 $generated@@85 $generated@@84))
)))
(assert (forall (($generated@@86 T@U) ($generated@@87 T@U) ) (! (= ($generated@@34 $generated@@28 $generated@@87 ($generated@@29 $generated@@86))  (and ($generated@@34 $generated@@28 $generated@@87 ($generated@@30 $generated@@86)) (or (not (= $generated@@87 $generated@@36)) (not true))))
 :pattern ( ($generated@@34 $generated@@28 $generated@@87 ($generated@@29 $generated@@86)))
 :pattern ( ($generated@@34 $generated@@28 $generated@@87 ($generated@@30 $generated@@86)))
)))
(assert (forall (($generated@@90 T@U) ) (!  (and (= ($generated@@88 ($generated@@30 $generated@@90)) $generated@@0) (= ($generated@@89 ($generated@@30 $generated@@90)) $generated@@5))
 :pattern ( ($generated@@30 $generated@@90))
)))
(assert (forall (($generated@@91 T@U) ) (!  (and (= ($generated@@88 ($generated@@29 $generated@@91)) $generated@@1) (= ($generated@@89 ($generated@@29 $generated@@91)) $generated@@5))
 :pattern ( ($generated@@29 $generated@@91))
)))
(assert (forall (($generated@@92 T@U) ($generated@@93 T@U) ) (! (= ($generated@@34 $generated@@28 $generated@@93 ($generated@@30 $generated@@92))  (or (= $generated@@93 $generated@@36) (= ($generated@@37 $generated@@93) ($generated@@30 $generated@@92))))
 :pattern ( ($generated@@34 $generated@@28 $generated@@93 ($generated@@30 $generated@@92)))
)))
(assert (forall (($generated@@94 T@U) ) (! (= ($generated@@34 $generated@@28 $generated@@94 $generated@@42)  (and ($generated@@34 $generated@@28 $generated@@94 $generated@@35) (or (not (= $generated@@94 $generated@@36)) (not true))))
 :pattern ( ($generated@@34 $generated@@28 $generated@@94 $generated@@42))
 :pattern ( ($generated@@34 $generated@@28 $generated@@94 $generated@@35))
)))
(assert (forall (($generated@@96 T@U) ) (! (= ($generated@@95 ($generated@@30 $generated@@96)) $generated@@96)
 :pattern ( ($generated@@30 $generated@@96))
)))
(assert (forall (($generated@@98 T@U) ) (! (= ($generated@@97 ($generated@@29 $generated@@98)) $generated@@98)
 :pattern ( ($generated@@29 $generated@@98))
)))
(assert (forall (($generated@@99 T@U) ($generated@@100 T@T) ) (! (= ($generated@@45 $generated@@100 ($generated@@83 $generated@@100 $generated@@99)) $generated@@99)
 :pattern ( ($generated@@83 $generated@@100 $generated@@99))
)))
(assert  (and (forall (($generated@@104 T@T) ($generated@@105 T@T) ($generated@@106 T@T) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ) (! (= ($generated@@101 $generated@@104 $generated@@105 $generated@@106 ($generated@@103 $generated@@104 $generated@@105 $generated@@106 $generated@@108 $generated@@109 $generated@@110 $generated@@107) $generated@@109 $generated@@110) $generated@@107)
 :weight 0
)) (and (forall (($generated@@111 T@T) ($generated@@112 T@T) ($generated@@113 T@T) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ) (!  (or (= $generated@@116 $generated@@118) (= ($generated@@101 $generated@@111 $generated@@112 $generated@@113 ($generated@@103 $generated@@111 $generated@@112 $generated@@113 $generated@@115 $generated@@116 $generated@@117 $generated@@114) $generated@@118 $generated@@119) ($generated@@101 $generated@@111 $generated@@112 $generated@@113 $generated@@115 $generated@@118 $generated@@119)))
 :weight 0
)) (forall (($generated@@120 T@T) ($generated@@121 T@T) ($generated@@122 T@T) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ) (!  (or (= $generated@@126 $generated@@128) (= ($generated@@101 $generated@@120 $generated@@121 $generated@@122 ($generated@@103 $generated@@120 $generated@@121 $generated@@122 $generated@@124 $generated@@125 $generated@@126 $generated@@123) $generated@@127 $generated@@128) ($generated@@101 $generated@@120 $generated@@121 $generated@@122 $generated@@124 $generated@@127 $generated@@128)))
 :weight 0
)))))
(assert (forall (($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 Bool) ($generated@@133 T@U) ($generated@@134 T@U) ) (! (= ($generated@@13 ($generated@@101 $generated@@28 $generated@@47 $generated@@9 ($generated@@102 $generated@@129 $generated@@130 $generated@@131 $generated@@132) $generated@@133 $generated@@134))  (=> (and (or (not (= $generated@@133 $generated@@129)) (not true)) ($generated@@13 ($generated@@45 $generated@@9 ($generated@@46 $generated@@47 $generated@@48 ($generated@@46 $generated@@28 ($generated@@49 $generated@@47 $generated@@48) $generated@@130 $generated@@133) $generated@@131)))) $generated@@132))
 :pattern ( ($generated@@101 $generated@@28 $generated@@47 $generated@@9 ($generated@@102 $generated@@129 $generated@@130 $generated@@131 $generated@@132) $generated@@133 $generated@@134))
)))
(assert (= ($generated@@88 $generated@@25) $generated@@2))
(assert (= ($generated@@89 $generated@@25) $generated@@6))
(assert (= ($generated@@88 $generated@@35) $generated@@3))
(assert (= ($generated@@89 $generated@@35) $generated@@7))
(assert (= ($generated@@88 $generated@@42) $generated@@4))
(assert (= ($generated@@89 $generated@@42) $generated@@7))
(assert (forall (($generated@@135 T@U) ) (! (= ($generated@@34 $generated@@10 $generated@@135 $generated@@25)  (and (<= ($generated@@78 0) ($generated@@15 $generated@@135)) (< ($generated@@15 $generated@@135) 256)))
 :pattern ( ($generated@@34 $generated@@10 $generated@@135 $generated@@25))
)))
(assert (forall (($generated@@136 Int) ) (! (= ($generated@@83 $generated@@10 ($generated@@14 ($generated@@78 $generated@@136))) ($generated@@80 $generated@@48 ($generated@@83 $generated@@10 ($generated@@14 $generated@@136))))
 :pattern ( ($generated@@83 $generated@@10 ($generated@@14 ($generated@@78 $generated@@136))))
)))
(assert (forall (($generated@@137 T@U) ($generated@@138 T@T) ) (! (= ($generated@@83 $generated@@138 ($generated@@80 $generated@@138 $generated@@137)) ($generated@@80 $generated@@48 ($generated@@83 $generated@@138 $generated@@137)))
 :pattern ( ($generated@@83 $generated@@138 ($generated@@80 $generated@@138 $generated@@137)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@139 () T@U)
(declare-fun $generated@@140 () T@U)
(declare-fun $generated@@141 () T@U)
(declare-fun $generated@@142 () T@U)
(declare-fun $generated@@143 (T@U) Bool)
(declare-fun $generated@@144 () T@U)
(declare-fun $generated@@145 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@146  (=> (= $generated@@139 ($generated@@102 $generated@@36 $generated@@140 $generated false)) (=> (and (= $generated@@141 ($generated@@40 $generated@@142)) (= (ControlFlow 0 2) (- 0 1))) ($generated@@34 $generated@@28 $generated@@141 ($generated@@29 $generated@@25))))))
(let (($generated@@147  (=> (and (and (and (and ($generated@@50 $generated@@140) ($generated@@143 $generated@@140)) (and (or (not (= $generated@@142 $generated@@36)) (not true)) (and ($generated@@34 $generated@@28 $generated@@142 $generated@@42) ($generated@@24 $generated@@28 $generated@@142 $generated@@42 $generated@@140)))) (and (and ($generated@@34 $generated@@28 $generated@@144 ($generated@@30 $generated@@25)) ($generated@@24 $generated@@28 $generated@@144 ($generated@@30 $generated@@25) $generated@@140)) true)) (and (and (and ($generated@@34 $generated@@28 $generated@@145 ($generated@@29 $generated@@25)) ($generated@@24 $generated@@28 $generated@@145 ($generated@@29 $generated@@25) $generated@@140)) true) (and (= 2 $generated@@39) (= (ControlFlow 0 3) 2)))) $generated@@146)))
$generated@@147)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
