(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U T@U) Bool)
(declare-fun $generated@@0 (T@T) Int)
(declare-fun $generated@@1 () T@T)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 (Bool) T@U)
(declare-fun $generated@@5 (T@U) Bool)
(declare-fun $generated@@6 (Int) T@U)
(declare-fun $generated@@7 (T@U) Int)
(declare-fun $generated@@8 (Real) T@U)
(declare-fun $generated@@9 (T@U) Real)
(declare-fun $generated@@19 (T@U T@U) T@U)
(declare-fun $generated@@20 (Int) T@U)
(declare-fun $generated@@21 (T@U) Int)
(declare-fun $generated@@25 () Int)
(declare-fun $generated@@26 (T@U T@U Int) Bool)
(declare-fun $generated@@27 (T@U) T@U)
(declare-fun $generated@@28 (T@U Int) Bool)
(declare-fun $generated@@29 (Int) Int)
(declare-fun $generated@@35 (T@T T@U) T@U)
(declare-fun $generated@@36 () T@T)
(declare-fun $generated@@45 (T@U Int) Bool)
(declare-fun $generated@@52 (T@T T@U) T@U)
(declare-fun $generated@@53 (T@T T@U) T@U)
(declare-fun $generated@@62 (T@U) Bool)
(declare-fun $generated@@66 (Int) Bool)
(declare-fun $generated@@83 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@84 () T@T)
(declare-fun $generated@@85 () T@T)
(declare-fun $generated@@86 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@87 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@88 (T@T T@T) T@T)
(declare-fun $generated@@89 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@90 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@91 (T@T) T@T)
(declare-fun $generated@@92 (T@T) T@T)
(declare-fun $generated@@141 (Int Int) Int)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@0 $generated@@1) 0) (= ($generated@@0 $generated@@2) 1)) (= ($generated@@0 $generated@@3) 2)) (forall (($generated@@10 Bool) ) (! (= ($generated@@5 ($generated@@4 $generated@@10)) $generated@@10)
 :pattern ( ($generated@@4 $generated@@10))
))) (forall (($generated@@11 T@U) ) (! (= ($generated@@4 ($generated@@5 $generated@@11)) $generated@@11)
 :pattern ( ($generated@@5 $generated@@11))
))) (forall (($generated@@12 Int) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Real) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))))
(assert (forall (($generated@@16 T@U) ($generated@@17 T@U) ($generated@@18 T@U) ) (!  (=> (and ($generated $generated@@16 $generated@@17) ($generated $generated@@17 $generated@@18)) ($generated $generated@@16 $generated@@18))
 :pattern ( ($generated $generated@@16 $generated@@17) ($generated $generated@@17 $generated@@18))
 :pattern ( ($generated $generated@@16 $generated@@17) ($generated $generated@@16 $generated@@18))
)))
(assert (forall (($generated@@22 T@U) ($generated@@23 Int) ($generated@@24 Int) ) (!  (=> (and (and (<= 0 $generated@@23) (<= 0 $generated@@24)) (<= (+ $generated@@23 $generated@@24) ($generated@@21 $generated@@22))) (= ($generated@@19 ($generated@@19 $generated@@22 ($generated@@20 $generated@@23)) ($generated@@20 $generated@@24)) ($generated@@19 $generated@@22 ($generated@@20 (+ $generated@@23 $generated@@24)))))
 :pattern ( ($generated@@19 ($generated@@19 $generated@@22 ($generated@@20 $generated@@23)) ($generated@@20 $generated@@24)))
)))
(assert  (=> (<= 1 $generated@@25) (forall (($generated@@30 T@U) ($generated@@31 T@U) ($generated@@32 Int) ) (!  (=> (or ($generated@@28 $generated@@31 $generated@@32) (< 1 $generated@@25)) (and (and (=> (< 0 ($generated@@21 $generated@@31)) (=> (or (not (= $generated@@32 (- 0 2))) (not true)) ($generated@@28 ($generated@@19 $generated@@31 ($generated@@20 1)) (+ $generated@@32 2)))) (=> (=> (< 0 ($generated@@21 $generated@@31)) (and (or (not (= $generated@@32 (- 0 2))) (not true)) ($generated@@26 $generated@@30 ($generated@@19 $generated@@31 ($generated@@20 1)) (+ $generated@@32 2)))) (=> (= ($generated@@29 0) ($generated@@21 $generated@@31)) (forall (($generated@@33 T@U) ) (!  (=> ($generated $generated@@33 $generated@@31) ($generated@@28 $generated@@33 $generated@@32))
 :pattern ( ($generated@@26 $generated@@30 $generated@@33 $generated@@32))
))))) (= ($generated@@26 ($generated@@27 $generated@@30) $generated@@31 $generated@@32)  (and (=> (< 0 ($generated@@21 $generated@@31)) (and (or (not (= $generated@@32 (- 0 2))) (not true)) ($generated@@26 $generated@@30 ($generated@@19 $generated@@31 ($generated@@20 1)) (+ $generated@@32 2)))) (=> (= ($generated@@29 0) ($generated@@21 $generated@@31)) (forall (($generated@@34 T@U) ) (!  (=> ($generated $generated@@34 $generated@@31) ($generated@@26 $generated@@30 $generated@@34 $generated@@32))
 :pattern ( ($generated@@26 $generated@@30 $generated@@34 $generated@@32))
)))))))
 :pattern ( ($generated@@26 ($generated@@27 $generated@@30) $generated@@31 $generated@@32))
))))
(assert (= ($generated@@0 $generated@@36) 3))
(assert  (=> (<= 1 $generated@@25) (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 Int) ) (!  (=> (or ($generated@@28 ($generated@@35 $generated@@36 $generated@@38) ($generated@@29 $generated@@39)) (< 1 $generated@@25)) (and (and (=> (< 0 ($generated@@21 $generated@@38)) (=> ($generated@@5 ($generated@@35 $generated@@1 ($generated@@4  (or (not (= $generated@@39 (- 0 2))) (not true))))) ($generated@@28 ($generated@@19 $generated@@38 ($generated@@20 1)) ($generated@@29 (+ $generated@@39 2))))) (=> (=> (< 0 ($generated@@21 $generated@@38)) (and (or (not (= $generated@@39 (- 0 2))) (not true)) ($generated@@26 ($generated@@27 $generated@@37) ($generated@@19 $generated@@38 ($generated@@20 1)) ($generated@@29 (+ $generated@@39 2))))) (=> (= ($generated@@29 0) ($generated@@21 $generated@@38)) (forall (($generated@@40 T@U) ) (!  (=> ($generated $generated@@40 $generated@@38) ($generated@@28 $generated@@40 $generated@@39))
 :pattern ( ($generated@@26 ($generated@@27 $generated@@37) $generated@@40 $generated@@39))
))))) (= ($generated@@26 ($generated@@27 $generated@@37) ($generated@@35 $generated@@36 $generated@@38) ($generated@@29 $generated@@39))  (and (=> (< 0 ($generated@@21 $generated@@38)) (and (or (not (= $generated@@39 (- 0 2))) (not true)) ($generated@@26 ($generated@@27 $generated@@37) ($generated@@19 $generated@@38 ($generated@@20 1)) ($generated@@29 (+ $generated@@39 2))))) (=> (= ($generated@@29 0) ($generated@@21 $generated@@38)) (forall (($generated@@41 T@U) ) (!  (=> ($generated $generated@@41 $generated@@38) ($generated@@26 ($generated@@27 $generated@@37) $generated@@41 $generated@@39))
 :pattern ( ($generated@@26 ($generated@@27 $generated@@37) $generated@@41 $generated@@39))
)))))))
 :weight 3
 :pattern ( ($generated@@26 ($generated@@27 $generated@@37) ($generated@@35 $generated@@36 $generated@@38) ($generated@@29 $generated@@39)))
))))
(assert  (=> (<= 1 $generated@@25) (forall (($generated@@42 T@U) ($generated@@43 Int) ($generated@@44 T@U) ) (!  (=> (= $generated@@44 ($generated@@20 0)) ($generated@@26 $generated@@42 $generated@@44 $generated@@43))
 :pattern ( ($generated@@26 $generated@@42 $generated@@44 $generated@@43))
))))
(assert  (=> (<= 1 $generated@@25) (forall (($generated@@46 T@U) ($generated@@47 Int) ) (!  (=> (forall (($generated@@48 T@U) ) (! ($generated@@26 ($generated@@27 $generated@@46) $generated@@48 $generated@@47)
 :pattern ( ($generated@@26 ($generated@@27 $generated@@46) $generated@@48 $generated@@47))
)) ($generated@@45 ($generated@@27 $generated@@46) $generated@@47))
 :pattern ( ($generated@@45 ($generated@@27 $generated@@46) $generated@@47))
))))
(assert (forall (($generated@@49 Int) ) (! (= ($generated@@29 $generated@@49) $generated@@49)
 :pattern ( ($generated@@29 $generated@@49))
)))
(assert (forall (($generated@@50 T@U) ($generated@@51 T@T) ) (! (= ($generated@@35 $generated@@51 $generated@@50) $generated@@50)
 :pattern ( ($generated@@35 $generated@@51 $generated@@50))
)))
(assert (forall (($generated@@54 T@U) ($generated@@55 T@T) ) (! (= ($generated@@53 $generated@@55 ($generated@@52 $generated@@55 $generated@@54)) $generated@@54)
 :pattern ( ($generated@@52 $generated@@55 $generated@@54))
)))
(assert  (=> (<= 1 $generated@@25) (forall (($generated@@56 T@U) ($generated@@57 Int) ) (!  (=> ($generated@@45 ($generated@@27 $generated@@56) $generated@@57) (forall (($generated@@58 T@U) ) (! ($generated@@26 ($generated@@27 $generated@@56) $generated@@58 $generated@@57)
 :pattern ( ($generated@@26 ($generated@@27 $generated@@56) $generated@@58 $generated@@57))
)))
 :pattern ( ($generated@@45 ($generated@@27 $generated@@56) $generated@@57))
))))
(assert (forall (($generated@@59 T@U) ($generated@@60 T@U) ($generated@@61 Int) ) (! (= ($generated@@26 ($generated@@27 $generated@@59) $generated@@60 $generated@@61) ($generated@@26 $generated@@59 $generated@@60 $generated@@61))
 :pattern ( ($generated@@26 ($generated@@27 $generated@@59) $generated@@60 $generated@@61))
)))
(assert (forall (($generated@@63 T@U) ($generated@@64 T@U) ) (!  (=> (and ($generated@@62 $generated@@64) (<= ($generated@@21 $generated@@64) ($generated@@21 $generated@@63))) (and (= ($generated@@62 ($generated@@19 $generated@@63 $generated@@64)) ($generated@@62 $generated@@63)) (= ($generated@@21 ($generated@@19 $generated@@63 $generated@@64)) (- ($generated@@21 $generated@@63) ($generated@@21 $generated@@64)))))
 :pattern ( ($generated@@19 $generated@@63 $generated@@64))
)))
(assert (forall (($generated@@65 Int) ) (!  (=> (<= 0 $generated@@65) (and ($generated@@62 ($generated@@20 $generated@@65)) (= ($generated@@21 ($generated@@20 $generated@@65)) $generated@@65)))
 :pattern ( ($generated@@20 $generated@@65))
)))
(assert  (=> (<= 0 $generated@@25) (forall (($generated@@67 T@U) ($generated@@68 Int) ) (!  (=> (or ($generated@@66 $generated@@68) (< 0 $generated@@25)) (and (=> (or (not (= $generated@@68 (- 0 2))) (not true)) ($generated@@66 (+ $generated@@68 2))) (= ($generated@@45 ($generated@@27 $generated@@67) $generated@@68)  (and (or (not (= $generated@@68 (- 0 2))) (not true)) ($generated@@45 $generated@@67 (+ $generated@@68 2))))))
 :pattern ( ($generated@@45 ($generated@@27 $generated@@67) $generated@@68))
))))
(assert  (=> (<= 1 $generated@@25) (forall (($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 Int) ) (!  (=> (or ($generated@@28 ($generated@@35 $generated@@36 $generated@@70) $generated@@71) (< 1 $generated@@25)) (and (and (=> (< 0 ($generated@@21 $generated@@70)) (=> (or (not (= $generated@@71 (- 0 2))) (not true)) ($generated@@28 ($generated@@19 $generated@@70 ($generated@@20 1)) (+ $generated@@71 2)))) (=> (=> (< 0 ($generated@@21 $generated@@70)) (and (or (not (= $generated@@71 (- 0 2))) (not true)) ($generated@@26 ($generated@@27 $generated@@69) ($generated@@19 $generated@@70 ($generated@@20 1)) (+ $generated@@71 2)))) (=> (= ($generated@@29 0) ($generated@@21 $generated@@70)) (forall (($generated@@72 T@U) ) (!  (=> ($generated $generated@@72 $generated@@70) ($generated@@28 $generated@@72 $generated@@71))
 :pattern ( ($generated@@26 ($generated@@27 $generated@@69) $generated@@72 $generated@@71))
))))) (= ($generated@@26 ($generated@@27 $generated@@69) ($generated@@35 $generated@@36 $generated@@70) $generated@@71)  (and (=> (< 0 ($generated@@21 $generated@@70)) (and (or (not (= $generated@@71 (- 0 2))) (not true)) ($generated@@26 ($generated@@27 $generated@@69) ($generated@@19 $generated@@70 ($generated@@20 1)) (+ $generated@@71 2)))) (=> (= ($generated@@29 0) ($generated@@21 $generated@@70)) (forall (($generated@@73 T@U) ) (!  (=> ($generated $generated@@73 $generated@@70) ($generated@@26 ($generated@@27 $generated@@69) $generated@@73 $generated@@71))
 :pattern ( ($generated@@26 ($generated@@27 $generated@@69) $generated@@73 $generated@@71))
)))))))
 :weight 3
 :pattern ( ($generated@@26 ($generated@@27 $generated@@69) ($generated@@35 $generated@@36 $generated@@70) $generated@@71))
))))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@U) ) (!  (or (or ($generated $generated@@74 $generated@@75) (= $generated@@74 $generated@@75)) ($generated $generated@@75 $generated@@74))
 :pattern ( ($generated $generated@@74 $generated@@75) ($generated $generated@@75 $generated@@74))
)))
(assert (forall (($generated@@76 T@U) ($generated@@77 Int) ) (! (= ($generated@@45 ($generated@@27 $generated@@76) $generated@@77) ($generated@@45 $generated@@76 $generated@@77))
 :pattern ( ($generated@@45 ($generated@@27 $generated@@76) $generated@@77))
)))
(assert (forall (($generated@@78 T@U) ) (! (<= 0 ($generated@@21 $generated@@78))
 :pattern ( ($generated@@21 $generated@@78))
)))
(assert (forall (($generated@@79 T@U) ($generated@@80 T@T) ) (! (= ($generated@@52 $generated@@80 ($generated@@53 $generated@@80 $generated@@79)) $generated@@79)
 :pattern ( ($generated@@53 $generated@@80 $generated@@79))
)))
(assert (forall (($generated@@81 T@U) ($generated@@82 T@U) ) (!  (and (and (and (=> ($generated $generated@@81 $generated@@82) (or (not (= $generated@@81 $generated@@82)) (not true))) (=> (and ($generated@@62 $generated@@81) (not ($generated@@62 $generated@@82))) ($generated $generated@@81 $generated@@82))) (=> (and ($generated@@62 $generated@@81) ($generated@@62 $generated@@82)) (= ($generated $generated@@81 $generated@@82) (< ($generated@@21 $generated@@81) ($generated@@21 $generated@@82))))) (=> (and ($generated $generated@@81 $generated@@82) ($generated@@62 $generated@@82)) ($generated@@62 $generated@@81)))
 :pattern ( ($generated $generated@@81 $generated@@82))
)))
(assert  (and (and (and (and (and (and (and (and (forall (($generated@@93 T@T) ($generated@@94 T@T) ($generated@@95 T@T) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ) (! (= ($generated@@83 $generated@@93 $generated@@94 $generated@@95 ($generated@@89 $generated@@93 $generated@@94 $generated@@95 $generated@@97 $generated@@98 $generated@@99 $generated@@96) $generated@@98 $generated@@99) $generated@@96)
 :weight 0
)) (and (forall (($generated@@100 T@T) ($generated@@101 T@T) ($generated@@102 T@T) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ) (!  (or (= $generated@@105 $generated@@107) (= ($generated@@83 $generated@@100 $generated@@101 $generated@@102 ($generated@@89 $generated@@100 $generated@@101 $generated@@102 $generated@@104 $generated@@105 $generated@@106 $generated@@103) $generated@@107 $generated@@108) ($generated@@83 $generated@@100 $generated@@101 $generated@@102 $generated@@104 $generated@@107 $generated@@108)))
 :weight 0
)) (forall (($generated@@109 T@T) ($generated@@110 T@T) ($generated@@111 T@T) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ) (!  (or (= $generated@@115 $generated@@117) (= ($generated@@83 $generated@@109 $generated@@110 $generated@@111 ($generated@@89 $generated@@109 $generated@@110 $generated@@111 $generated@@113 $generated@@114 $generated@@115 $generated@@112) $generated@@116 $generated@@117) ($generated@@83 $generated@@109 $generated@@110 $generated@@111 $generated@@113 $generated@@116 $generated@@117)))
 :weight 0
)))) (= ($generated@@0 $generated@@84) 4)) (= ($generated@@0 $generated@@85) 5)) (forall (($generated@@118 T@T) ($generated@@119 T@T) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ) (! (= ($generated@@87 $generated@@118 $generated@@119 ($generated@@90 $generated@@118 $generated@@119 $generated@@121 $generated@@122 $generated@@120) $generated@@122) $generated@@120)
 :weight 0
))) (forall (($generated@@123 T@T) ($generated@@124 T@T) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ) (!  (or (= $generated@@127 $generated@@128) (= ($generated@@87 $generated@@123 $generated@@124 ($generated@@90 $generated@@123 $generated@@124 $generated@@126 $generated@@127 $generated@@125) $generated@@128) ($generated@@87 $generated@@123 $generated@@124 $generated@@126 $generated@@128)))
 :weight 0
))) (forall (($generated@@129 T@T) ($generated@@130 T@T) ) (= ($generated@@0 ($generated@@88 $generated@@129 $generated@@130)) 6))) (forall (($generated@@131 T@T) ($generated@@132 T@T) ) (! (= ($generated@@91 ($generated@@88 $generated@@131 $generated@@132)) $generated@@131)
 :pattern ( ($generated@@88 $generated@@131 $generated@@132))
))) (forall (($generated@@133 T@T) ($generated@@134 T@T) ) (! (= ($generated@@92 ($generated@@88 $generated@@133 $generated@@134)) $generated@@134)
 :pattern ( ($generated@@88 $generated@@133 $generated@@134))
))))
(assert (forall (($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 Bool) ($generated@@139 T@U) ($generated@@140 T@U) ) (! (= ($generated@@5 ($generated@@83 $generated@@84 $generated@@85 $generated@@1 ($generated@@86 $generated@@135 $generated@@136 $generated@@137 $generated@@138) $generated@@139 $generated@@140))  (=> (and (or (not (= $generated@@139 $generated@@135)) (not true)) ($generated@@5 ($generated@@52 $generated@@1 ($generated@@87 $generated@@85 $generated@@36 ($generated@@87 $generated@@84 ($generated@@88 $generated@@85 $generated@@36) $generated@@136 $generated@@139) $generated@@137)))) $generated@@138))
 :pattern ( ($generated@@83 $generated@@84 $generated@@85 $generated@@1 ($generated@@86 $generated@@135 $generated@@136 $generated@@137 $generated@@138) $generated@@139 $generated@@140))
)))
(assert (forall (($generated@@142 Int) ($generated@@143 Int) ) (! (= ($generated@@141 $generated@@142 $generated@@143) (mod $generated@@142 $generated@@143))
 :pattern ( ($generated@@141 $generated@@142 $generated@@143))
)))
(assert (forall (($generated@@144 T@U) ) (!  (=> ($generated@@62 $generated@@144) (= $generated@@144 ($generated@@20 ($generated@@21 $generated@@144))))
 :pattern ( ($generated@@21 $generated@@144))
 :pattern ( ($generated@@62 $generated@@144))
)))
(assert (forall (($generated@@145 T@U) ($generated@@146 T@U) ) (!  (=> (and ($generated@@62 $generated@@146) (<= ($generated@@21 $generated@@146) ($generated@@21 $generated@@145))) (or (and (= $generated@@146 ($generated@@20 0)) (= ($generated@@19 $generated@@145 $generated@@146) $generated@@145)) (and (or (not (= $generated@@146 ($generated@@20 0))) (not true)) ($generated ($generated@@19 $generated@@145 $generated@@146) $generated@@145))))
 :pattern ( ($generated@@19 $generated@@145 $generated@@146))
)))
(assert (forall (($generated@@147 Int) ) (! (= ($generated@@53 $generated@@2 ($generated@@6 ($generated@@29 $generated@@147))) ($generated@@35 $generated@@36 ($generated@@53 $generated@@2 ($generated@@6 $generated@@147))))
 :pattern ( ($generated@@53 $generated@@2 ($generated@@6 ($generated@@29 $generated@@147))))
)))
(assert (forall (($generated@@148 T@U) ($generated@@149 T@T) ) (! (= ($generated@@53 $generated@@149 ($generated@@35 $generated@@149 $generated@@148)) ($generated@@35 $generated@@36 ($generated@@53 $generated@@149 $generated@@148)))
 :pattern ( ($generated@@53 $generated@@149 ($generated@@35 $generated@@149 $generated@@148)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@150 () Int)
(declare-fun $generated@@151 () T@U)
(declare-fun $generated@@152 (T@U) Bool)
(declare-fun $generated@@153 () T@U)
(declare-fun $generated@@154 (T@U) Bool)
(declare-fun $generated@@155 () T@U)
(declare-fun $generated@@156 () T@U)
(declare-fun $generated@@157 () T@U)
(declare-fun $generated@@158 () T@U)
(declare-fun $generated@@159 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 8) (let (($generated@@160  (and (=> (= (ControlFlow 0 4) (- 0 5)) (=> ($generated@@66 $generated@@150) (or ($generated@@45 ($generated@@27 $generated@@151) $generated@@150) (or (not (= $generated@@150 (- 0 2))) (not true))))) (=> (=> ($generated@@66 $generated@@150) (or ($generated@@45 ($generated@@27 $generated@@151) $generated@@150) (or (not (= $generated@@150 (- 0 2))) (not true)))) (=> (= (ControlFlow 0 4) (- 0 3)) (=> ($generated@@66 $generated@@150) (or ($generated@@45 ($generated@@27 $generated@@151) $generated@@150) ($generated@@45 ($generated@@27 ($generated@@27 $generated@@151)) (+ $generated@@150 2)))))))))
(let (($generated@@161  (=> (and (and (and ($generated@@152 $generated@@153) ($generated@@154 $generated@@153)) (= $generated@@155 $generated@@153)) (and (forall (($generated@@162 T@U) ) (!  (=> ($generated@@5 ($generated@@35 $generated@@1 ($generated@@4 true))) ($generated@@26 ($generated@@27 $generated@@151) $generated@@162 $generated@@150))
 :pattern ( ($generated@@26 ($generated@@27 $generated@@151) $generated@@162 $generated@@150))
)) (= (ControlFlow 0 6) 4))) $generated@@160)))
(let (($generated@@163  (=> (= (ControlFlow 0 2) (- 0 1)) (or (<= ($generated@@29 0) $generated@@150) (= ($generated@@141 $generated@@150 ($generated@@29 2)) ($generated@@29 1))))))
(let (($generated@@164  (=> (= $generated@@156 ($generated@@86 $generated@@157 $generated@@158 $generated@@159 false)) (=> (and (and ($generated@@152 $generated@@155) ($generated@@154 $generated@@155)) (and (= $generated@@158 $generated@@155) (forall (($generated@@165 Int) ) (!  (=> (and (or (<= ($generated@@29 0) $generated@@165) (= ($generated@@141 $generated@@165 ($generated@@29 2)) ($generated@@29 1))) (and (<= 0 $generated@@165) (< $generated@@165 $generated@@150))) ($generated@@45 ($generated@@27 $generated@@151) $generated@@165))
 :pattern ( ($generated@@45 ($generated@@27 $generated@@151) $generated@@165))
)))) (and (=> (= (ControlFlow 0 7) 2) $generated@@163) (=> (= (ControlFlow 0 7) 6) $generated@@161))))))
(let (($generated@@166  (=> (and (and (and ($generated@@152 $generated@@158) ($generated@@154 $generated@@158)) (= 3 $generated@@25)) (and (or (<= ($generated@@29 0) $generated@@150) (= ($generated@@141 $generated@@150 ($generated@@29 2)) ($generated@@29 1))) (= (ControlFlow 0 8) 7))) $generated@@164)))
$generated@@166))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
