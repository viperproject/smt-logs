(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 (T@U) T@U)
(declare-fun $generated@@20 (T@U) Int)
(declare-fun $generated@@21 () T@U)
(declare-fun $generated@@22 () Int)
(declare-fun $generated@@23 (T@U T@U) Int)
(declare-fun $generated@@24 (T@U) T@U)
(declare-fun $generated@@25 (T@T T@U) T@U)
(declare-fun $generated@@26 () T@T)
(declare-fun $generated@@27 (T@U) Bool)
(declare-fun $generated@@28 (T@T T@U T@U) Bool)
(declare-fun $generated@@29 (T@U) T@U)
(declare-fun $generated@@30 (Int) Int)
(declare-fun $generated@@31 (T@U Int) T@U)
(declare-fun $generated@@41 (T@T T@U) T@U)
(declare-fun $generated@@42 (T@T T@U) T@U)
(declare-fun $generated@@45 (T@U) Int)
(declare-fun $generated@@48 (T@U T@U T@U) Bool)
(declare-fun $generated@@49 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@54 (T@U Int) T@U)
(declare-fun $generated@@58 (T@U T@U) Bool)
(declare-fun $generated@@68 (T@U) T@U)
(declare-fun $generated@@75 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@76 () T@T)
(declare-fun $generated@@77 () T@T)
(declare-fun $generated@@78 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@79 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@80 () T@T)
(declare-fun $generated@@81 (T@T T@T) T@T)
(declare-fun $generated@@82 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@83 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@84 (T@T) T@T)
(declare-fun $generated@@85 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (= ($generated@@19 $generated) $generated@@0))
(assert (= ($generated@@20 $generated@@21) 0))
(assert (= ($generated@@3 $generated@@26) 3))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@32 T@U) ($generated@@33 T@U) ) (!  (=> (or ($generated@@27 ($generated@@25 $generated@@26 $generated@@33)) (and (< 0 $generated@@22) ($generated@@28 $generated@@26 $generated@@33 ($generated@@29 $generated)))) (and (=> (or (not (= ($generated@@20 ($generated@@25 $generated@@26 $generated@@33)) ($generated@@30 0))) (not true)) ($generated@@27 ($generated@@25 $generated@@26 ($generated@@31 ($generated@@25 $generated@@26 $generated@@33) ($generated@@30 1))))) (= ($generated@@23 ($generated@@24 $generated@@32) ($generated@@25 $generated@@26 $generated@@33)) (ite (= ($generated@@20 ($generated@@25 $generated@@26 $generated@@33)) ($generated@@30 0)) 0 (+ 1 ($generated@@23 ($generated@@24 $generated@@32) ($generated@@25 $generated@@26 ($generated@@31 ($generated@@25 $generated@@26 $generated@@33) ($generated@@30 1)))))))))
 :weight 3
 :pattern ( ($generated@@23 ($generated@@24 $generated@@32) ($generated@@25 $generated@@26 $generated@@33)))
))))
(assert (forall (($generated@@34 T@U) ($generated@@35 Int) ) (!  (=> (= $generated@@35 0) (= ($generated@@31 $generated@@34 $generated@@35) $generated@@34))
 :pattern ( ($generated@@31 $generated@@34 $generated@@35))
)))
(assert (forall (($generated@@36 Int) ) (! (= ($generated@@30 $generated@@36) $generated@@36)
 :pattern ( ($generated@@30 $generated@@36))
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@T) ) (! (= ($generated@@25 $generated@@38 $generated@@37) $generated@@37)
 :pattern ( ($generated@@25 $generated@@38 $generated@@37))
)))
(assert (forall (($generated@@39 T@U) ($generated@@40 Int) ) (!  (=> (and (<= 0 $generated@@40) (<= $generated@@40 ($generated@@20 $generated@@39))) (= ($generated@@20 ($generated@@31 $generated@@39 $generated@@40)) (- ($generated@@20 $generated@@39) $generated@@40)))
 :pattern ( ($generated@@20 ($generated@@31 $generated@@39 $generated@@40)))
)))
(assert (forall (($generated@@43 T@U) ($generated@@44 T@T) ) (! (= ($generated@@42 $generated@@44 ($generated@@41 $generated@@44 $generated@@43)) $generated@@43)
 :pattern ( ($generated@@41 $generated@@44 $generated@@43))
)))
(assert (forall (($generated@@46 T@U) ($generated@@47 Int) ) (!  (=> (and (< 0 $generated@@47) (<= $generated@@47 ($generated@@20 $generated@@46))) (< ($generated@@45 ($generated@@31 $generated@@46 $generated@@47)) ($generated@@45 $generated@@46)))
 :pattern ( ($generated@@45 ($generated@@31 $generated@@46 $generated@@47)))
)))
(assert (forall (($generated@@50 T@U) ($generated@@51 T@U) ($generated@@52 T@U) ($generated@@53 T@T) ) (! (= ($generated@@48 ($generated@@42 $generated@@53 $generated@@50) $generated@@51 $generated@@52) ($generated@@49 $generated@@53 $generated@@50 $generated@@51 $generated@@52))
 :pattern ( ($generated@@48 ($generated@@42 $generated@@53 $generated@@50) $generated@@51 $generated@@52))
)))
(assert (forall (($generated@@55 T@U) ($generated@@56 Int) ($generated@@57 Int) ) (!  (=> (and (and (<= 0 $generated@@56) (<= 0 $generated@@57)) (< $generated@@57 (- ($generated@@20 $generated@@55) $generated@@56))) (= ($generated@@54 ($generated@@31 $generated@@55 $generated@@56) $generated@@57) ($generated@@54 $generated@@55 (+ $generated@@57 $generated@@56))))
 :weight 25
 :pattern ( ($generated@@54 ($generated@@31 $generated@@55 $generated@@56) $generated@@57))
)))
(assert (forall (($generated@@59 T@U) ) (!  (=> ($generated@@58 $generated@@59 $generated) (and (= ($generated@@42 $generated@@5 ($generated@@41 $generated@@5 $generated@@59)) $generated@@59) ($generated@@28 $generated@@5 ($generated@@41 $generated@@5 $generated@@59) $generated)))
 :pattern ( ($generated@@58 $generated@@59 $generated))
)))
(assert (forall (($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@T) ) (! (= ($generated@@58 ($generated@@42 $generated@@62 $generated@@60) $generated@@61) ($generated@@28 $generated@@62 $generated@@60 $generated@@61))
 :pattern ( ($generated@@58 ($generated@@42 $generated@@62 $generated@@60) $generated@@61))
)))
(assert (forall (($generated@@63 T@U) ) (! (<= 0 ($generated@@20 $generated@@63))
 :pattern ( ($generated@@20 $generated@@63))
)))
(assert (forall (($generated@@64 T@U) ($generated@@65 T@U) ($generated@@66 T@U) ) (! (= ($generated@@49 $generated@@26 $generated@@64 ($generated@@29 $generated@@65) $generated@@66) (forall (($generated@@67 Int) ) (!  (=> (and (<= 0 $generated@@67) (< $generated@@67 ($generated@@20 $generated@@64))) ($generated@@48 ($generated@@54 $generated@@64 $generated@@67) $generated@@65 $generated@@66))
 :pattern ( ($generated@@54 $generated@@64 $generated@@67))
)))
 :pattern ( ($generated@@49 $generated@@26 $generated@@64 ($generated@@29 $generated@@65) $generated@@66))
)))
(assert (forall (($generated@@69 T@U) ) (! (= ($generated@@68 ($generated@@29 $generated@@69)) $generated@@69)
 :pattern ( ($generated@@29 $generated@@69))
)))
(assert (forall (($generated@@70 T@U) ) (! (= ($generated@@19 ($generated@@29 $generated@@70)) $generated@@1)
 :pattern ( ($generated@@29 $generated@@70))
)))
(assert (forall (($generated@@71 T@U) ($generated@@72 T@T) ) (! (= ($generated@@41 $generated@@72 ($generated@@42 $generated@@72 $generated@@71)) $generated@@71)
 :pattern ( ($generated@@42 $generated@@72 $generated@@71))
)))
(assert (forall (($generated@@73 T@U) ($generated@@74 T@U) ) (! (= ($generated@@23 ($generated@@24 $generated@@73) $generated@@74) ($generated@@23 $generated@@73 $generated@@74))
 :pattern ( ($generated@@23 ($generated@@24 $generated@@73) $generated@@74))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@86 T@T) ($generated@@87 T@T) ($generated@@88 T@T) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ) (! (= ($generated@@75 $generated@@86 $generated@@87 $generated@@88 ($generated@@82 $generated@@86 $generated@@87 $generated@@88 $generated@@90 $generated@@91 $generated@@92 $generated@@89) $generated@@91 $generated@@92) $generated@@89)
 :weight 0
)) (and (forall (($generated@@93 T@T) ($generated@@94 T@T) ($generated@@95 T@T) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ) (!  (or (= $generated@@98 $generated@@100) (= ($generated@@75 $generated@@93 $generated@@94 $generated@@95 ($generated@@82 $generated@@93 $generated@@94 $generated@@95 $generated@@97 $generated@@98 $generated@@99 $generated@@96) $generated@@100 $generated@@101) ($generated@@75 $generated@@93 $generated@@94 $generated@@95 $generated@@97 $generated@@100 $generated@@101)))
 :weight 0
)) (forall (($generated@@102 T@T) ($generated@@103 T@T) ($generated@@104 T@T) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ) (!  (or (= $generated@@108 $generated@@110) (= ($generated@@75 $generated@@102 $generated@@103 $generated@@104 ($generated@@82 $generated@@102 $generated@@103 $generated@@104 $generated@@106 $generated@@107 $generated@@108 $generated@@105) $generated@@109 $generated@@110) ($generated@@75 $generated@@102 $generated@@103 $generated@@104 $generated@@106 $generated@@109 $generated@@110)))
 :weight 0
)))) (= ($generated@@3 $generated@@76) 4)) (= ($generated@@3 $generated@@77) 5)) (forall (($generated@@111 T@T) ($generated@@112 T@T) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (! (= ($generated@@79 $generated@@111 $generated@@112 ($generated@@83 $generated@@111 $generated@@112 $generated@@114 $generated@@115 $generated@@113) $generated@@115) $generated@@113)
 :weight 0
))) (forall (($generated@@116 T@T) ($generated@@117 T@T) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ) (!  (or (= $generated@@120 $generated@@121) (= ($generated@@79 $generated@@116 $generated@@117 ($generated@@83 $generated@@116 $generated@@117 $generated@@119 $generated@@120 $generated@@118) $generated@@121) ($generated@@79 $generated@@116 $generated@@117 $generated@@119 $generated@@121)))
 :weight 0
))) (= ($generated@@3 $generated@@80) 6)) (forall (($generated@@122 T@T) ($generated@@123 T@T) ) (= ($generated@@3 ($generated@@81 $generated@@122 $generated@@123)) 7))) (forall (($generated@@124 T@T) ($generated@@125 T@T) ) (! (= ($generated@@84 ($generated@@81 $generated@@124 $generated@@125)) $generated@@124)
 :pattern ( ($generated@@81 $generated@@124 $generated@@125))
))) (forall (($generated@@126 T@T) ($generated@@127 T@T) ) (! (= ($generated@@85 ($generated@@81 $generated@@126 $generated@@127)) $generated@@127)
 :pattern ( ($generated@@81 $generated@@126 $generated@@127))
))))
(assert (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 Bool) ($generated@@132 T@U) ($generated@@133 T@U) ) (! (= ($generated@@8 ($generated@@75 $generated@@76 $generated@@77 $generated@@4 ($generated@@78 $generated@@128 $generated@@129 $generated@@130 $generated@@131) $generated@@132 $generated@@133))  (=> (and (or (not (= $generated@@132 $generated@@128)) (not true)) ($generated@@8 ($generated@@41 $generated@@4 ($generated@@79 $generated@@77 $generated@@80 ($generated@@79 $generated@@76 ($generated@@81 $generated@@77 $generated@@80) $generated@@129 $generated@@132) $generated@@130)))) $generated@@131))
 :pattern ( ($generated@@75 $generated@@76 $generated@@77 $generated@@4 ($generated@@78 $generated@@128 $generated@@129 $generated@@130 $generated@@131) $generated@@132 $generated@@133))
)))
(assert (forall (($generated@@134 T@U) ($generated@@135 T@U) ) (!  (=> ($generated@@58 $generated@@134 ($generated@@29 $generated@@135)) (and (= ($generated@@42 $generated@@26 ($generated@@41 $generated@@26 $generated@@134)) $generated@@134) ($generated@@28 $generated@@26 ($generated@@41 $generated@@26 $generated@@134) ($generated@@29 $generated@@135))))
 :pattern ( ($generated@@58 $generated@@134 ($generated@@29 $generated@@135)))
)))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@136 T@U) ($generated@@137 T@U) ) (!  (=> (or ($generated@@27 $generated@@137) (and (< 0 $generated@@22) ($generated@@28 $generated@@26 $generated@@137 ($generated@@29 $generated)))) (and (=> (or (not (= ($generated@@20 $generated@@137) ($generated@@30 0))) (not true)) ($generated@@27 ($generated@@31 $generated@@137 ($generated@@30 1)))) (= ($generated@@23 ($generated@@24 $generated@@136) $generated@@137) (ite (= ($generated@@20 $generated@@137) ($generated@@30 0)) 0 (+ 1 ($generated@@23 $generated@@136 ($generated@@31 $generated@@137 ($generated@@30 1))))))))
 :pattern ( ($generated@@23 ($generated@@24 $generated@@136) $generated@@137))
))))
(assert (forall (($generated@@138 T@U) ($generated@@139 Int) ($generated@@140 Int) ) (!  (=> (and (and (<= 0 $generated@@139) (<= $generated@@139 $generated@@140)) (< $generated@@140 ($generated@@20 $generated@@138))) (= ($generated@@54 ($generated@@31 $generated@@138 $generated@@139) (- $generated@@140 $generated@@139)) ($generated@@54 $generated@@138 $generated@@140)))
 :weight 25
 :pattern ( ($generated@@54 $generated@@138 $generated@@140) ($generated@@31 $generated@@138 $generated@@139))
)))
(assert (forall (($generated@@141 T@U) ($generated@@142 Int) ($generated@@143 Int) ) (!  (=> (and (and (<= 0 $generated@@142) (<= 0 $generated@@143)) (<= (+ $generated@@142 $generated@@143) ($generated@@20 $generated@@141))) (= ($generated@@31 ($generated@@31 $generated@@141 $generated@@142) $generated@@143) ($generated@@31 $generated@@141 (+ $generated@@142 $generated@@143))))
 :pattern ( ($generated@@31 ($generated@@31 $generated@@141 $generated@@142) $generated@@143))
)))
(assert (forall (($generated@@144 Int) ) (! (= ($generated@@42 $generated@@5 ($generated@@9 ($generated@@30 $generated@@144))) ($generated@@25 $generated@@80 ($generated@@42 $generated@@5 ($generated@@9 $generated@@144))))
 :pattern ( ($generated@@42 $generated@@5 ($generated@@9 ($generated@@30 $generated@@144))))
)))
(assert (forall (($generated@@145 T@U) ($generated@@146 T@T) ) (! (= ($generated@@42 $generated@@146 ($generated@@25 $generated@@146 $generated@@145)) ($generated@@25 $generated@@80 ($generated@@42 $generated@@146 $generated@@145)))
 :pattern ( ($generated@@42 $generated@@146 ($generated@@25 $generated@@146 $generated@@145)))
)))
(assert (forall (($generated@@147 T@U) ) (!  (=> (= ($generated@@20 $generated@@147) 0) (= $generated@@147 $generated@@21))
 :pattern ( ($generated@@20 $generated@@147))
)))
(assert (forall (($generated@@148 T@U) ($generated@@149 T@U) ) (! ($generated@@49 $generated@@5 $generated@@149 $generated $generated@@148)
 :pattern ( ($generated@@49 $generated@@5 $generated@@149 $generated $generated@@148))
)))
(assert (forall (($generated@@150 T@U) ($generated@@151 T@U) ) (! (= ($generated@@28 $generated@@26 $generated@@150 ($generated@@29 $generated@@151)) (forall (($generated@@152 Int) ) (!  (=> (and (<= 0 $generated@@152) (< $generated@@152 ($generated@@20 $generated@@150))) ($generated@@58 ($generated@@54 $generated@@150 $generated@@152) $generated@@151))
 :pattern ( ($generated@@54 $generated@@150 $generated@@152))
)))
 :pattern ( ($generated@@28 $generated@@26 $generated@@150 ($generated@@29 $generated@@151)))
)))
(assert (forall (($generated@@153 T@U) ) (! ($generated@@28 $generated@@5 $generated@@153 $generated)
 :pattern ( ($generated@@28 $generated@@5 $generated@@153 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@154 () T@U)
(declare-fun $generated@@155 () T@U)
(declare-fun $generated@@156 () T@U)
(declare-fun $generated@@157 () T@U)
(declare-fun $generated@@158 () T@U)
(declare-fun $generated@@159 (T@U) Bool)
(declare-fun $generated@@160 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 7) (let (($generated@@161  (=> (or (not (= ($generated@@20 $generated@@154) ($generated@@30 0))) (not true)) (and (=> (= (ControlFlow 0 4) (- 0 5)) (and (<= 0 ($generated@@30 1)) (<= ($generated@@30 1) ($generated@@20 $generated@@154)))) (=> (and (<= 0 ($generated@@30 1)) (<= ($generated@@30 1) ($generated@@20 $generated@@154))) (=> (= $generated@@155 ($generated@@31 $generated@@154 ($generated@@30 1))) (=> (and ($generated@@49 $generated@@26 $generated@@155 ($generated@@29 $generated) $generated@@156) (= (ControlFlow 0 4) (- 0 3))) (< ($generated@@45 $generated@@155) ($generated@@45 $generated@@154)))))))))
(let (($generated@@162 true))
(let (($generated@@163 true))
(let (($generated@@164  (=> (= $generated@@157 ($generated@@78 $generated@@158 $generated@@156 $generated@@2 false)) (and (and (=> (= (ControlFlow 0 6) 1) $generated@@163) (=> (= (ControlFlow 0 6) 2) $generated@@162)) (=> (= (ControlFlow 0 6) 4) $generated@@161)))))
(let (($generated@@165  (=> (and (and (and ($generated@@159 $generated@@156) ($generated@@160 $generated@@156)) ($generated@@28 $generated@@26 $generated@@154 ($generated@@29 $generated))) (and (= 0 $generated@@22) (= (ControlFlow 0 7) 6))) $generated@@164)))
$generated@@165))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
