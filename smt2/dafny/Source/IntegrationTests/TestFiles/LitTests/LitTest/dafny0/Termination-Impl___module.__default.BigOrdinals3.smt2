(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U T@U) Bool)
(declare-fun $generated@@0 (T@T) Int)
(declare-fun $generated@@1 () T@T)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 (Bool) T@U)
(declare-fun $generated@@5 (T@U) Bool)
(declare-fun $generated@@6 (Int) T@U)
(declare-fun $generated@@7 (T@U) Int)
(declare-fun $generated@@8 (Real) T@U)
(declare-fun $generated@@9 (T@U) Real)
(declare-fun $generated@@19 (T@U T@U) Bool)
(declare-fun $generated@@20 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@21 () T@T)
(declare-fun $generated@@22 () T@T)
(declare-fun $generated@@23 () T@T)
(declare-fun $generated@@24 (T@T T@T) T@T)
(declare-fun $generated@@25 () T@U)
(declare-fun $generated@@26 (T@T T@U) T@U)
(declare-fun $generated@@27 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@28 (T@T) T@T)
(declare-fun $generated@@29 (T@T) T@T)
(declare-fun $generated@@50 (T@T T@U) T@U)
(declare-fun $generated@@53 (Int) T@U)
(declare-fun $generated@@54 (T@U) Bool)
(declare-fun $generated@@55 (T@U) Int)
(declare-fun $generated@@57 (T@U T@U) T@U)
(declare-fun $generated@@72 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@73 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@74 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@0 $generated@@1) 0) (= ($generated@@0 $generated@@2) 1)) (= ($generated@@0 $generated@@3) 2)) (forall (($generated@@10 Bool) ) (! (= ($generated@@5 ($generated@@4 $generated@@10)) $generated@@10)
 :pattern ( ($generated@@4 $generated@@10))
))) (forall (($generated@@11 T@U) ) (! (= ($generated@@4 ($generated@@5 $generated@@11)) $generated@@11)
 :pattern ( ($generated@@5 $generated@@11))
))) (forall (($generated@@12 Int) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Real) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))))
(assert (forall (($generated@@16 T@U) ($generated@@17 T@U) ($generated@@18 T@U) ) (!  (=> (and ($generated $generated@@16 $generated@@17) ($generated $generated@@17 $generated@@18)) ($generated $generated@@16 $generated@@18))
 :pattern ( ($generated $generated@@16 $generated@@17) ($generated $generated@@17 $generated@@18))
 :pattern ( ($generated $generated@@16 $generated@@17) ($generated $generated@@16 $generated@@18))
)))
(assert  (and (and (and (and (and (and (and (forall (($generated@@30 T@T) ($generated@@31 T@T) ($generated@@32 T@U) ($generated@@33 T@U) ($generated@@34 T@U) ) (! (= ($generated@@20 $generated@@30 $generated@@31 ($generated@@27 $generated@@30 $generated@@31 $generated@@33 $generated@@34 $generated@@32) $generated@@34) $generated@@32)
 :weight 0
)) (forall (($generated@@35 T@T) ($generated@@36 T@T) ($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ($generated@@40 T@U) ) (!  (or (= $generated@@39 $generated@@40) (= ($generated@@20 $generated@@35 $generated@@36 ($generated@@27 $generated@@35 $generated@@36 $generated@@38 $generated@@39 $generated@@37) $generated@@40) ($generated@@20 $generated@@35 $generated@@36 $generated@@38 $generated@@40)))
 :weight 0
))) (= ($generated@@0 $generated@@21) 3)) (= ($generated@@0 $generated@@22) 4)) (= ($generated@@0 $generated@@23) 5)) (forall (($generated@@41 T@T) ($generated@@42 T@T) ) (= ($generated@@0 ($generated@@24 $generated@@41 $generated@@42)) 6))) (forall (($generated@@43 T@T) ($generated@@44 T@T) ) (! (= ($generated@@28 ($generated@@24 $generated@@43 $generated@@44)) $generated@@43)
 :pattern ( ($generated@@24 $generated@@43 $generated@@44))
))) (forall (($generated@@45 T@T) ($generated@@46 T@T) ) (! (= ($generated@@29 ($generated@@24 $generated@@45 $generated@@46)) $generated@@46)
 :pattern ( ($generated@@24 $generated@@45 $generated@@46))
))))
(assert (forall (($generated@@47 T@U) ($generated@@48 T@U) ) (!  (=> ($generated@@19 $generated@@47 $generated@@48) (forall (($generated@@49 T@U) ) (!  (=> ($generated@@5 ($generated@@26 $generated@@1 ($generated@@20 $generated@@21 $generated@@22 ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@47 $generated@@49) $generated@@25))) ($generated@@5 ($generated@@26 $generated@@1 ($generated@@20 $generated@@21 $generated@@22 ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@48 $generated@@49) $generated@@25))))
 :pattern ( ($generated@@20 $generated@@21 $generated@@22 ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@48 $generated@@49) $generated@@25))
)))
 :pattern ( ($generated@@19 $generated@@47 $generated@@48))
)))
(assert (forall (($generated@@51 T@U) ($generated@@52 T@T) ) (! (= ($generated@@50 $generated@@52 ($generated@@26 $generated@@52 $generated@@51)) $generated@@51)
 :pattern ( ($generated@@26 $generated@@52 $generated@@51))
)))
(assert (forall (($generated@@56 Int) ) (!  (=> (<= 0 $generated@@56) (and ($generated@@54 ($generated@@53 $generated@@56)) (= ($generated@@55 ($generated@@53 $generated@@56)) $generated@@56)))
 :pattern ( ($generated@@53 $generated@@56))
)))
(assert (forall (($generated@@58 T@U) ($generated@@59 T@U) ) (!  (and (or (= $generated@@58 ($generated@@57 $generated@@58 $generated@@59)) ($generated $generated@@58 ($generated@@57 $generated@@58 $generated@@59))) (or (= $generated@@59 ($generated@@57 $generated@@58 $generated@@59)) ($generated $generated@@59 ($generated@@57 $generated@@58 $generated@@59))))
 :pattern ( ($generated@@57 $generated@@58 $generated@@59))
)))
(assert (forall (($generated@@60 T@U) ($generated@@61 T@U) ) (!  (or (or ($generated $generated@@60 $generated@@61) (= $generated@@60 $generated@@61)) ($generated $generated@@61 $generated@@60))
 :pattern ( ($generated $generated@@60 $generated@@61) ($generated $generated@@61 $generated@@60))
)))
(assert (forall (($generated@@62 T@U) ($generated@@63 T@U) ) (!  (and (=> (= $generated@@62 ($generated@@53 0)) (= ($generated@@57 $generated@@62 $generated@@63) $generated@@63)) (=> (= $generated@@63 ($generated@@53 0)) (= ($generated@@57 $generated@@62 $generated@@63) $generated@@62)))
 :pattern ( ($generated@@57 $generated@@62 $generated@@63))
)))
(assert (forall (($generated@@64 T@U) ($generated@@65 T@U) ($generated@@66 T@U) ) (!  (=> (or (not (= $generated@@64 $generated@@66)) (not true)) (=> (and ($generated@@19 $generated@@64 $generated@@65) ($generated@@19 $generated@@65 $generated@@66)) ($generated@@19 $generated@@64 $generated@@66)))
 :pattern ( ($generated@@19 $generated@@64 $generated@@65) ($generated@@19 $generated@@65 $generated@@66))
)))
(assert (forall (($generated@@67 T@U) ) (! (<= 0 ($generated@@55 $generated@@67))
 :pattern ( ($generated@@55 $generated@@67))
)))
(assert (forall (($generated@@68 T@U) ($generated@@69 T@T) ) (! (= ($generated@@26 $generated@@69 ($generated@@50 $generated@@69 $generated@@68)) $generated@@68)
 :pattern ( ($generated@@50 $generated@@69 $generated@@68))
)))
(assert (forall (($generated@@70 T@U) ($generated@@71 T@U) ) (!  (and (and (and (=> ($generated $generated@@70 $generated@@71) (or (not (= $generated@@70 $generated@@71)) (not true))) (=> (and ($generated@@54 $generated@@70) (not ($generated@@54 $generated@@71))) ($generated $generated@@70 $generated@@71))) (=> (and ($generated@@54 $generated@@70) ($generated@@54 $generated@@71)) (= ($generated $generated@@70 $generated@@71) (< ($generated@@55 $generated@@70) ($generated@@55 $generated@@71))))) (=> (and ($generated $generated@@70 $generated@@71) ($generated@@54 $generated@@71)) ($generated@@54 $generated@@70)))
 :pattern ( ($generated $generated@@70 $generated@@71))
)))
(assert  (and (forall (($generated@@75 T@T) ($generated@@76 T@T) ($generated@@77 T@T) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ) (! (= ($generated@@72 $generated@@75 $generated@@76 $generated@@77 ($generated@@74 $generated@@75 $generated@@76 $generated@@77 $generated@@79 $generated@@80 $generated@@81 $generated@@78) $generated@@80 $generated@@81) $generated@@78)
 :weight 0
)) (and (forall (($generated@@82 T@T) ($generated@@83 T@T) ($generated@@84 T@T) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ) (!  (or (= $generated@@87 $generated@@89) (= ($generated@@72 $generated@@82 $generated@@83 $generated@@84 ($generated@@74 $generated@@82 $generated@@83 $generated@@84 $generated@@86 $generated@@87 $generated@@88 $generated@@85) $generated@@89 $generated@@90) ($generated@@72 $generated@@82 $generated@@83 $generated@@84 $generated@@86 $generated@@89 $generated@@90)))
 :weight 0
)) (forall (($generated@@91 T@T) ($generated@@92 T@T) ($generated@@93 T@T) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ) (!  (or (= $generated@@97 $generated@@99) (= ($generated@@72 $generated@@91 $generated@@92 $generated@@93 ($generated@@74 $generated@@91 $generated@@92 $generated@@93 $generated@@95 $generated@@96 $generated@@97 $generated@@94) $generated@@98 $generated@@99) ($generated@@72 $generated@@91 $generated@@92 $generated@@93 $generated@@95 $generated@@98 $generated@@99)))
 :weight 0
)))))
(assert (forall (($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 Bool) ($generated@@104 T@U) ($generated@@105 T@U) ) (! (= ($generated@@5 ($generated@@72 $generated@@23 $generated@@21 $generated@@1 ($generated@@73 $generated@@100 $generated@@101 $generated@@102 $generated@@103) $generated@@104 $generated@@105))  (=> (and (or (not (= $generated@@104 $generated@@100)) (not true)) ($generated@@5 ($generated@@26 $generated@@1 ($generated@@20 $generated@@21 $generated@@22 ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@101 $generated@@104) $generated@@102)))) $generated@@103))
 :pattern ( ($generated@@72 $generated@@23 $generated@@21 $generated@@1 ($generated@@73 $generated@@100 $generated@@101 $generated@@102 $generated@@103) $generated@@104 $generated@@105))
)))
(assert (forall (($generated@@106 T@U) ($generated@@107 Int) ($generated@@108 Int) ) (!  (=> (and (<= 0 $generated@@107) (<= 0 $generated@@108)) (= ($generated@@57 ($generated@@57 $generated@@106 ($generated@@53 $generated@@107)) ($generated@@53 $generated@@108)) ($generated@@57 $generated@@106 ($generated@@53 (+ $generated@@107 $generated@@108)))))
 :pattern ( ($generated@@57 ($generated@@57 $generated@@106 ($generated@@53 $generated@@107)) ($generated@@53 $generated@@108)))
)))
(assert (forall (($generated@@109 T@U) ) (!  (=> ($generated@@54 $generated@@109) (= $generated@@109 ($generated@@53 ($generated@@55 $generated@@109))))
 :pattern ( ($generated@@55 $generated@@109))
 :pattern ( ($generated@@54 $generated@@109))
)))
(assert (forall (($generated@@110 T@U) ($generated@@111 T@U) ) (!  (and (=> ($generated@@54 ($generated@@57 $generated@@110 $generated@@111)) (and ($generated@@54 $generated@@110) ($generated@@54 $generated@@111))) (=> ($generated@@54 $generated@@111) (and (= ($generated@@54 ($generated@@57 $generated@@110 $generated@@111)) ($generated@@54 $generated@@110)) (= ($generated@@55 ($generated@@57 $generated@@110 $generated@@111)) (+ ($generated@@55 $generated@@110) ($generated@@55 $generated@@111))))))
 :pattern ( ($generated@@57 $generated@@110 $generated@@111))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@112 () T@U)
(declare-fun $generated@@113 () T@U)
(declare-fun $generated@@114 () T@U)
(declare-fun $generated@@115 () Bool)
(declare-fun $generated@@116 () T@U)
(declare-fun $generated@@117 () T@U)
(declare-fun $generated@@118 () T@U)
(declare-fun $generated@@119 (T@U) Bool)
(declare-fun $generated@@120 (T@U) Bool)
(declare-fun $generated@@121 () Int)
(declare-fun $generated@@122 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 10) (let (($generated@@123  (=> ($generated $generated@@112 $generated@@113) (=> (and (= $generated@@114 ($generated@@57 $generated@@112 ($generated@@53 1))) (= (ControlFlow 0 5) (- 0 4))) ($generated $generated@@113 $generated@@113)))))
(let (($generated@@124 true))
(let (($generated@@125  (=> $generated@@115 (and (=> (= (ControlFlow 0 6) 3) $generated@@124) (=> (= (ControlFlow 0 6) 5) $generated@@123)))))
(let (($generated@@126 true))
(let (($generated@@127  (and (=> (= (ControlFlow 0 7) 2) $generated@@126) (=> (= (ControlFlow 0 7) 6) $generated@@125))))
(let (($generated@@128 true))
(let (($generated@@129  (=> (not false) (=> (and (and (forall (($generated@@130 T@U) ) (!  (=> (and (or (not (= $generated@@130 $generated@@117)) (not true)) ($generated@@5 ($generated@@26 $generated@@1 ($generated@@20 $generated@@21 $generated@@22 ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@116 $generated@@130) $generated@@25)))) (= ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@116 $generated@@130) ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@116 $generated@@130)))
 :pattern ( ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@116 $generated@@130))
)) ($generated@@19 $generated@@116 $generated@@116)) (and (forall (($generated@@131 T@U) ($generated@@132 T@U) ) (!  (=> (and (or (not (= $generated@@131 $generated@@117)) (not true)) ($generated@@5 ($generated@@26 $generated@@1 ($generated@@20 $generated@@21 $generated@@22 ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@116 $generated@@131) $generated@@25)))) (or (= ($generated@@20 $generated@@21 $generated@@22 ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@116 $generated@@131) $generated@@132) ($generated@@20 $generated@@21 $generated@@22 ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@116 $generated@@131) $generated@@132)) ($generated@@5 ($generated@@72 $generated@@23 $generated@@21 $generated@@1 $generated@@118 $generated@@131 $generated@@132))))
 :pattern ( ($generated@@20 $generated@@21 $generated@@22 ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@116 $generated@@131) $generated@@132))
)) (or (= $generated@@113 $generated@@113) ($generated $generated@@113 $generated@@113)))) (and (=> (= (ControlFlow 0 8) 1) $generated@@128) (=> (= (ControlFlow 0 8) 7) $generated@@127))))))
(let (($generated@@133  (=> (and (= $generated@@118 ($generated@@73 $generated@@117 $generated@@116 $generated@@25 false)) (= (ControlFlow 0 9) 8)) $generated@@129)))
(let (($generated@@134  (=> (and (and (and ($generated@@119 $generated@@116) ($generated@@120 $generated@@116)) (= 0 $generated@@121)) (and (or (= $generated@@122 $generated@@113) ($generated $generated@@122 $generated@@113)) (= (ControlFlow 0 10) 9))) $generated@@133)))
$generated@@134))))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 5) (- 4))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
