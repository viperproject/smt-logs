(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 (T@U) T@U)
(declare-fun $generated@@22 () T@U)
(declare-fun $generated@@23 () T@U)
(declare-fun $generated@@24 () T@U)
(declare-fun $generated@@25 (T@T T@U T@U) Bool)
(declare-fun $generated@@26 () T@T)
(declare-fun $generated@@27 () T@U)
(declare-fun $generated@@28 (Int) Int)
(declare-fun $generated@@30 (T@T T@U) T@U)
(declare-fun $generated@@33 (T@U) Bool)
(declare-fun $generated@@35 (T@U) Bool)
(declare-fun $generated@@37 (T@U) Bool)
(declare-fun $generated@@39 (T@T T@U) T@U)
(declare-fun $generated@@40 (T@T T@U) T@U)
(declare-fun $generated@@46 () Int)
(declare-fun $generated@@47 (T@U) Int)
(declare-fun $generated@@48 (T@U) Bool)
(declare-fun $generated@@53 (T@U) Bool)
(declare-fun $generated@@55 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@56 () T@T)
(declare-fun $generated@@57 () T@T)
(declare-fun $generated@@58 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@59 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@60 () T@T)
(declare-fun $generated@@61 (T@T T@T) T@T)
(declare-fun $generated@@62 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@63 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@64 (T@T) T@T)
(declare-fun $generated@@65 (T@T) T@T)
(declare-fun $generated@@115 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@116 (T@U) Bool)
(declare-fun $generated@@119 (T@U) T@U)
(declare-fun $generated@@120 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert (= ($generated@@21 $generated@@22) $generated@@1))
(assert (= ($generated@@21 $generated@@23) $generated@@2))
(assert (= ($generated@@21 $generated@@24) $generated@@3))
(assert (= ($generated@@5 $generated@@26) 3))
(assert ($generated@@25 $generated@@26 $generated@@22 $generated@@27))
(assert ($generated@@25 $generated@@26 $generated@@23 $generated@@27))
(assert ($generated@@25 $generated@@26 $generated@@24 $generated@@27))
(assert (forall (($generated@@29 Int) ) (! (= ($generated@@28 $generated@@29) $generated@@29)
 :pattern ( ($generated@@28 $generated@@29))
)))
(assert (forall (($generated@@31 T@U) ($generated@@32 T@T) ) (! (= ($generated@@30 $generated@@32 $generated@@31) $generated@@31)
 :pattern ( ($generated@@30 $generated@@32 $generated@@31))
)))
(assert (forall (($generated@@34 T@U) ) (! (= ($generated@@33 $generated@@34) (= ($generated@@21 $generated@@34) $generated@@1))
 :pattern ( ($generated@@33 $generated@@34))
)))
(assert (forall (($generated@@36 T@U) ) (! (= ($generated@@35 $generated@@36) (= ($generated@@21 $generated@@36) $generated@@2))
 :pattern ( ($generated@@35 $generated@@36))
)))
(assert (forall (($generated@@38 T@U) ) (! (= ($generated@@37 $generated@@38) (= ($generated@@21 $generated@@38) $generated@@3))
 :pattern ( ($generated@@37 $generated@@38))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@T) ) (! (= ($generated@@40 $generated@@42 ($generated@@39 $generated@@42 $generated@@41)) $generated@@41)
 :pattern ( ($generated@@39 $generated@@42 $generated@@41))
)))
(assert (forall (($generated@@43 T@U) ) (!  (=> ($generated@@33 $generated@@43) (= $generated@@43 $generated@@22))
 :pattern ( ($generated@@33 $generated@@43))
)))
(assert (forall (($generated@@44 T@U) ) (!  (=> ($generated@@35 $generated@@44) (= $generated@@44 $generated@@23))
 :pattern ( ($generated@@35 $generated@@44))
)))
(assert (forall (($generated@@45 T@U) ) (!  (=> ($generated@@37 $generated@@45) (= $generated@@45 $generated@@24))
 :pattern ( ($generated@@37 $generated@@45))
)))
(assert  (=> (<= 1 $generated@@46) (forall (($generated@@49 T@U) ) (!  (=> (or ($generated@@48 $generated@@49) (and (< 1 $generated@@46) ($generated@@25 $generated@@26 $generated@@49 $generated@@27))) (= ($generated@@47 $generated@@49) (ite ($generated@@33 $generated@@49) 10 (ite ($generated@@35 $generated@@49) 12 14))))
 :pattern ( ($generated@@47 $generated@@49))
))))
(assert  (=> (<= 1 $generated@@46) (forall (($generated@@50 T@U) ) (!  (=> (or ($generated@@48 ($generated@@30 $generated@@26 $generated@@50)) (and (< 1 $generated@@46) ($generated@@25 $generated@@26 $generated@@50 $generated@@27))) (= ($generated@@47 ($generated@@30 $generated@@26 $generated@@50)) (ite ($generated@@33 ($generated@@30 $generated@@26 $generated@@50)) 10 (ite ($generated@@35 ($generated@@30 $generated@@26 $generated@@50)) 12 14))))
 :weight 3
 :pattern ( ($generated@@47 ($generated@@30 $generated@@26 $generated@@50)))
))))
(assert (forall (($generated@@51 T@U) ($generated@@52 T@T) ) (! (= ($generated@@39 $generated@@52 ($generated@@40 $generated@@52 $generated@@51)) $generated@@51)
 :pattern ( ($generated@@40 $generated@@52 $generated@@51))
)))
(assert (forall (($generated@@54 T@U) ) (!  (=> ($generated@@53 $generated@@54) (or (or ($generated@@33 $generated@@54) ($generated@@35 $generated@@54)) ($generated@@37 $generated@@54)))
 :pattern ( ($generated@@53 $generated@@54))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@66 T@T) ($generated@@67 T@T) ($generated@@68 T@T) ($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (! (= ($generated@@55 $generated@@66 $generated@@67 $generated@@68 ($generated@@62 $generated@@66 $generated@@67 $generated@@68 $generated@@70 $generated@@71 $generated@@72 $generated@@69) $generated@@71 $generated@@72) $generated@@69)
 :weight 0
)) (and (forall (($generated@@73 T@T) ($generated@@74 T@T) ($generated@@75 T@T) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ) (!  (or (= $generated@@78 $generated@@80) (= ($generated@@55 $generated@@73 $generated@@74 $generated@@75 ($generated@@62 $generated@@73 $generated@@74 $generated@@75 $generated@@77 $generated@@78 $generated@@79 $generated@@76) $generated@@80 $generated@@81) ($generated@@55 $generated@@73 $generated@@74 $generated@@75 $generated@@77 $generated@@80 $generated@@81)))
 :weight 0
)) (forall (($generated@@82 T@T) ($generated@@83 T@T) ($generated@@84 T@T) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ) (!  (or (= $generated@@88 $generated@@90) (= ($generated@@55 $generated@@82 $generated@@83 $generated@@84 ($generated@@62 $generated@@82 $generated@@83 $generated@@84 $generated@@86 $generated@@87 $generated@@88 $generated@@85) $generated@@89 $generated@@90) ($generated@@55 $generated@@82 $generated@@83 $generated@@84 $generated@@86 $generated@@89 $generated@@90)))
 :weight 0
)))) (= ($generated@@5 $generated@@56) 4)) (= ($generated@@5 $generated@@57) 5)) (forall (($generated@@91 T@T) ($generated@@92 T@T) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ) (! (= ($generated@@59 $generated@@91 $generated@@92 ($generated@@63 $generated@@91 $generated@@92 $generated@@94 $generated@@95 $generated@@93) $generated@@95) $generated@@93)
 :weight 0
))) (forall (($generated@@96 T@T) ($generated@@97 T@T) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ) (!  (or (= $generated@@100 $generated@@101) (= ($generated@@59 $generated@@96 $generated@@97 ($generated@@63 $generated@@96 $generated@@97 $generated@@99 $generated@@100 $generated@@98) $generated@@101) ($generated@@59 $generated@@96 $generated@@97 $generated@@99 $generated@@101)))
 :weight 0
))) (= ($generated@@5 $generated@@60) 6)) (forall (($generated@@102 T@T) ($generated@@103 T@T) ) (= ($generated@@5 ($generated@@61 $generated@@102 $generated@@103)) 7))) (forall (($generated@@104 T@T) ($generated@@105 T@T) ) (! (= ($generated@@64 ($generated@@61 $generated@@104 $generated@@105)) $generated@@104)
 :pattern ( ($generated@@61 $generated@@104 $generated@@105))
))) (forall (($generated@@106 T@T) ($generated@@107 T@T) ) (! (= ($generated@@65 ($generated@@61 $generated@@106 $generated@@107)) $generated@@107)
 :pattern ( ($generated@@61 $generated@@106 $generated@@107))
))))
(assert (forall (($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 Bool) ($generated@@112 T@U) ($generated@@113 T@U) ) (! (= ($generated@@10 ($generated@@55 $generated@@56 $generated@@57 $generated@@6 ($generated@@58 $generated@@108 $generated@@109 $generated@@110 $generated@@111) $generated@@112 $generated@@113))  (=> (and (or (not (= $generated@@112 $generated@@108)) (not true)) ($generated@@10 ($generated@@39 $generated@@6 ($generated@@59 $generated@@57 $generated@@60 ($generated@@59 $generated@@56 ($generated@@61 $generated@@57 $generated@@60) $generated@@109 $generated@@112) $generated@@110)))) $generated@@111))
 :pattern ( ($generated@@55 $generated@@56 $generated@@57 $generated@@6 ($generated@@58 $generated@@108 $generated@@109 $generated@@110 $generated@@111) $generated@@112 $generated@@113))
)))
(assert (forall (($generated@@114 T@U) ) (!  (=> ($generated@@25 $generated@@26 $generated@@114 $generated@@27) (or (or ($generated@@33 $generated@@114) ($generated@@35 $generated@@114)) ($generated@@37 $generated@@114)))
 :pattern ( ($generated@@37 $generated@@114) ($generated@@25 $generated@@26 $generated@@114 $generated@@27))
 :pattern ( ($generated@@35 $generated@@114) ($generated@@25 $generated@@26 $generated@@114 $generated@@27))
 :pattern ( ($generated@@33 $generated@@114) ($generated@@25 $generated@@26 $generated@@114 $generated@@27))
)))
(assert (forall (($generated@@117 T@U) ($generated@@118 T@U) ) (!  (=> (and ($generated@@116 $generated@@118) ($generated@@25 $generated@@26 $generated@@117 $generated@@27)) ($generated@@115 $generated@@26 $generated@@117 $generated@@27 $generated@@118))
 :pattern ( ($generated@@115 $generated@@26 $generated@@117 $generated@@27 $generated@@118))
)))
(assert (= ($generated@@119 $generated@@27) $generated@@0))
(assert (= ($generated@@120 $generated@@27) $generated@@4))
(assert (= $generated@@22 ($generated@@30 $generated@@26 $generated@@22)))
(assert (= $generated@@23 ($generated@@30 $generated@@26 $generated@@23)))
(assert (= $generated@@24 ($generated@@30 $generated@@26 $generated@@24)))
(assert (forall (($generated@@121 Int) ) (! (= ($generated@@40 $generated@@7 ($generated@@11 ($generated@@28 $generated@@121))) ($generated@@30 $generated@@60 ($generated@@40 $generated@@7 ($generated@@11 $generated@@121))))
 :pattern ( ($generated@@40 $generated@@7 ($generated@@11 ($generated@@28 $generated@@121))))
)))
(assert (forall (($generated@@122 T@U) ($generated@@123 T@T) ) (! (= ($generated@@40 $generated@@123 ($generated@@30 $generated@@123 $generated@@122)) ($generated@@30 $generated@@60 ($generated@@40 $generated@@123 $generated@@122)))
 :pattern ( ($generated@@40 $generated@@123 ($generated@@30 $generated@@123 $generated@@122)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@124 () T@U)
(declare-fun $generated@@125 () T@U)
(declare-fun $generated@@126 () T@U)
(declare-fun $generated@@127 () T@U)
(declare-fun $generated@@128 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 26) (let (($generated@@129 true))
(let (($generated@@130  (=> (and (= $generated@@124 $generated@@22) (= (ControlFlow 0 19) (- 0 18))) false)))
(let (($generated@@131  (=> (or (not (= $generated@@124 $generated@@23)) (not true)) (and (=> (= (ControlFlow 0 21) 19) $generated@@130) (=> (= (ControlFlow 0 21) 20) $generated@@129)))))
(let (($generated@@132  (=> (and (= $generated@@124 $generated@@23) (= (ControlFlow 0 17) (- 0 16))) false)))
(let (($generated@@133  (=> (or (not (= $generated@@124 $generated@@24)) (not true)) (and (=> (= (ControlFlow 0 22) 17) $generated@@132) (=> (= (ControlFlow 0 22) 21) $generated@@131)))))
(let (($generated@@134  (=> (and (= $generated@@124 $generated@@24) (= (ControlFlow 0 15) (- 0 14))) false)))
(let (($generated@@135  (=> (= $generated@@124 $generated@@23) (and (=> (= (ControlFlow 0 23) 15) $generated@@134) (=> (= (ControlFlow 0 23) 22) $generated@@133)))))
(let (($generated@@136 true))
(let (($generated@@137  (=> (and (= $generated@@124 $generated@@22) (= (ControlFlow 0 8) (- 0 7))) false)))
(let (($generated@@138  (=> (or (not (= $generated@@124 $generated@@23)) (not true)) (and (=> (= (ControlFlow 0 10) 8) $generated@@137) (=> (= (ControlFlow 0 10) 9) $generated@@136)))))
(let (($generated@@139  (=> (and (= $generated@@124 $generated@@23) (= (ControlFlow 0 6) (- 0 5))) false)))
(let (($generated@@140  (=> (or (not (= $generated@@124 $generated@@24)) (not true)) (and (=> (= (ControlFlow 0 11) 6) $generated@@139) (=> (= (ControlFlow 0 11) 10) $generated@@138)))))
(let (($generated@@141  (=> (and (= $generated@@124 $generated@@24) (= (ControlFlow 0 4) (- 0 3))) false)))
(let (($generated@@142  (=> (= $generated@@124 $generated@@24) (and (=> (= (ControlFlow 0 12) 4) $generated@@141) (=> (= (ControlFlow 0 12) 11) $generated@@140)))))
(let (($generated@@143 true))
(let (($generated@@144  (=> (or (not (= $generated@@124 $generated@@23)) (not true)) (and (=> (= (ControlFlow 0 13) 12) $generated@@142) (=> (= (ControlFlow 0 13) 2) $generated@@143)))))
(let (($generated@@145  (=> (or (not (= $generated@@124 $generated@@22)) (not true)) (and (=> (= (ControlFlow 0 24) 23) $generated@@135) (=> (= (ControlFlow 0 24) 13) $generated@@144)))))
(let (($generated@@146 true))
(let (($generated@@147  (=> (= $generated@@125 ($generated@@58 $generated@@126 $generated@@127 $generated false)) (and (=> (= (ControlFlow 0 25) 1) $generated@@146) (=> (= (ControlFlow 0 25) 24) $generated@@145)))))
(let (($generated@@148  (=> (and ($generated@@116 $generated@@127) ($generated@@128 $generated@@127)) (=> (and (and (and (and ($generated@@25 $generated@@26 $generated@@124 $generated@@27) ($generated@@115 $generated@@26 $generated@@124 $generated@@27 $generated@@127)) ($generated@@53 $generated@@124)) (= 2 $generated@@46)) (and (= ($generated@@47 $generated@@124) ($generated@@28 10)) (= (ControlFlow 0 26) 25))) $generated@@147))))
$generated@@148)))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
