(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (Bool) T@U)
(declare-fun $generated@@7 (T@U) Bool)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun $generated@@9 (T@U) Int)
(declare-fun $generated@@10 (Real) T@U)
(declare-fun $generated@@11 (T@U) Real)
(declare-fun $generated@@18 (T@U) T@U)
(declare-fun $generated@@19 (T@U Bool Int) Int)
(declare-fun $generated@@20 (T@U) T@U)
(declare-fun $generated@@21 () T@U)
(declare-fun $generated@@25 () Int)
(declare-fun $generated@@26 (T@U) T@U)
(declare-fun $generated@@27 (Int) Bool)
(declare-fun $generated@@28 (Int) Bool)
(declare-fun $generated@@29 (T@U Int) Int)
(declare-fun $generated@@30 () T@U)
(declare-fun $generated@@33 (Int) Int)
(declare-fun $generated@@35 (T@T T@U) T@U)
(declare-fun $generated@@38 (T@T T@U) T@U)
(declare-fun $generated@@39 (T@T T@U) T@U)
(declare-fun $generated@@42 (T@U Int) Int)
(declare-fun $generated@@43 (Int) Bool)
(declare-fun $generated@@46 (T@U Int) Int)
(declare-fun $generated@@47 (Int) Bool)
(declare-fun $generated@@77 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@78 () T@T)
(declare-fun $generated@@79 () T@T)
(declare-fun $generated@@80 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@81 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@82 () T@T)
(declare-fun $generated@@83 (T@T T@T) T@T)
(declare-fun $generated@@84 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@85 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@86 (T@T) T@T)
(declare-fun $generated@@87 (T@T) T@T)
(declare-fun $generated@@139 (T@T T@U T@U T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@4) 1)) (= ($generated@@2 $generated@@5) 2)) (forall (($generated@@12 Bool) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Int) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Real) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))))
(assert (distinct $generated $generated@@0 $generated@@1)
)
(assert (= ($generated@@18 $generated) $generated@@0))
(assert (forall (($generated@@22 T@U) ($generated@@23 Bool) ($generated@@24 Int) ) (! (= ($generated@@19 $generated@@22 $generated@@23 $generated@@24) ($generated@@19 $generated@@21 $generated@@23 $generated@@24))
 :pattern ( ($generated@@19 ($generated@@20 $generated@@22) $generated@@23 $generated@@24))
)))
(assert  (=> (<= 1 $generated@@25) (forall (($generated@@31 T@U) ($generated@@32 Int) ) (!  (=> (or ($generated@@27 $generated@@32) (< 1 $generated@@25)) (and (=> (<= 0 $generated@@32) ($generated@@28 (- $generated@@32 1))) (= ($generated@@19 ($generated@@26 $generated@@31) true $generated@@32) (ite (< $generated@@32 0) 0 (+ 1 ($generated@@29 $generated@@30 (- $generated@@32 1)))))))
 :pattern ( ($generated@@19 ($generated@@26 $generated@@31) true $generated@@32))
))))
(assert (forall (($generated@@34 Int) ) (! (= ($generated@@33 $generated@@34) $generated@@34)
 :pattern ( ($generated@@33 $generated@@34))
)))
(assert (forall (($generated@@36 T@U) ($generated@@37 T@T) ) (! (= ($generated@@35 $generated@@37 $generated@@36) $generated@@36)
 :pattern ( ($generated@@35 $generated@@37 $generated@@36))
)))
(assert (forall (($generated@@40 T@U) ($generated@@41 T@T) ) (! (= ($generated@@39 $generated@@41 ($generated@@38 $generated@@41 $generated@@40)) $generated@@40)
 :pattern ( ($generated@@38 $generated@@41 $generated@@40))
)))
(assert  (=> (<= 0 $generated@@25) (forall (($generated@@44 T@U) ($generated@@45 Int) ) (!  (=> (or ($generated@@43 $generated@@45) (< 0 $generated@@25)) (and (=> (<= 0 $generated@@45) ($generated@@43 (- $generated@@45 1))) (= ($generated@@42 ($generated@@26 $generated@@44) $generated@@45) (ite (< $generated@@45 0) 0 (+ 1 ($generated@@42 $generated@@44 (- $generated@@45 1)))))))
 :pattern ( ($generated@@42 ($generated@@26 $generated@@44) $generated@@45))
))))
(assert  (=> (<= 0 $generated@@25) (forall (($generated@@48 T@U) ($generated@@49 Int) ) (!  (=> (or ($generated@@47 $generated@@49) (< 0 $generated@@25)) (and (=> (<= 0 $generated@@49) ($generated@@47 (- $generated@@49 1))) (= ($generated@@46 ($generated@@26 $generated@@48) $generated@@49) (ite (< $generated@@49 0) 0 (+ 1 ($generated@@46 $generated@@48 (- $generated@@49 1)))))))
 :pattern ( ($generated@@46 ($generated@@26 $generated@@48) $generated@@49))
))))
(assert  (=> (<= 0 $generated@@25) (forall (($generated@@50 T@U) ($generated@@51 Int) ) (!  (=> (or ($generated@@28 $generated@@51) (< 0 $generated@@25)) (and (=> (<= 0 $generated@@51) ($generated@@28 (- $generated@@51 1))) (= ($generated@@29 ($generated@@26 $generated@@50) $generated@@51) (ite (< $generated@@51 0) 0 (+ 1 ($generated@@29 $generated@@50 (- $generated@@51 1)))))))
 :pattern ( ($generated@@29 ($generated@@26 $generated@@50) $generated@@51))
))))
(assert  (=> (<= 1 $generated@@25) (forall (($generated@@52 T@U) ($generated@@53 Int) ) (!  (=> (or ($generated@@27 ($generated@@33 $generated@@53)) (< 1 $generated@@25)) (and (=> (not ($generated@@7 ($generated@@35 $generated@@3 ($generated@@6 (< $generated@@53 0))))) ($generated@@28 ($generated@@33 (- $generated@@53 1)))) (= ($generated@@19 ($generated@@26 $generated@@52) true ($generated@@33 $generated@@53)) (ite (< $generated@@53 0) 0 (+ 1 ($generated@@29 $generated@@30 ($generated@@33 (- $generated@@53 1))))))))
 :weight 3
 :pattern ( ($generated@@19 ($generated@@26 $generated@@52) true ($generated@@33 $generated@@53)))
))))
(assert (forall (($generated@@54 T@U) ($generated@@55 Bool) ($generated@@56 Int) ) (! (= ($generated@@19 ($generated@@26 $generated@@54) $generated@@55 $generated@@56) ($generated@@19 $generated@@54 $generated@@55 $generated@@56))
 :pattern ( ($generated@@19 ($generated@@26 $generated@@54) $generated@@55 $generated@@56))
)))
(assert (forall (($generated@@57 T@U) ($generated@@58 Int) ) (! (= ($generated@@42 $generated@@57 $generated@@58) ($generated@@42 $generated@@21 $generated@@58))
 :pattern ( ($generated@@42 ($generated@@20 $generated@@57) $generated@@58))
)))
(assert (forall (($generated@@59 T@U) ($generated@@60 Int) ) (! (= ($generated@@46 $generated@@59 $generated@@60) ($generated@@46 $generated@@21 $generated@@60))
 :pattern ( ($generated@@46 ($generated@@20 $generated@@59) $generated@@60))
)))
(assert (forall (($generated@@61 T@U) ($generated@@62 Int) ) (! (= ($generated@@29 $generated@@61 $generated@@62) ($generated@@29 $generated@@21 $generated@@62))
 :pattern ( ($generated@@29 ($generated@@20 $generated@@61) $generated@@62))
)))
(assert  (=> (<= 0 $generated@@25) (forall (($generated@@63 T@U) ($generated@@64 Int) ) (!  (=> (or ($generated@@43 ($generated@@33 $generated@@64)) (< 0 $generated@@25)) (and (=> (not ($generated@@7 ($generated@@35 $generated@@3 ($generated@@6 (< $generated@@64 0))))) ($generated@@43 ($generated@@33 (- $generated@@64 1)))) (= ($generated@@42 ($generated@@26 $generated@@63) ($generated@@33 $generated@@64)) (ite (< $generated@@64 0) 0 (+ 1 ($generated@@42 ($generated@@26 $generated@@63) ($generated@@33 (- $generated@@64 1))))))))
 :weight 3
 :pattern ( ($generated@@42 ($generated@@26 $generated@@63) ($generated@@33 $generated@@64)))
))))
(assert  (=> (<= 0 $generated@@25) (forall (($generated@@65 T@U) ($generated@@66 Int) ) (!  (=> (or ($generated@@47 ($generated@@33 $generated@@66)) (< 0 $generated@@25)) (and (=> (not ($generated@@7 ($generated@@35 $generated@@3 ($generated@@6 (< $generated@@66 0))))) ($generated@@47 ($generated@@33 (- $generated@@66 1)))) (= ($generated@@46 ($generated@@26 $generated@@65) ($generated@@33 $generated@@66)) (ite (< $generated@@66 0) 0 (+ 1 ($generated@@46 ($generated@@26 $generated@@65) ($generated@@33 (- $generated@@66 1))))))))
 :weight 3
 :pattern ( ($generated@@46 ($generated@@26 $generated@@65) ($generated@@33 $generated@@66)))
))))
(assert  (=> (<= 0 $generated@@25) (forall (($generated@@67 T@U) ($generated@@68 Int) ) (!  (=> (or ($generated@@28 ($generated@@33 $generated@@68)) (< 0 $generated@@25)) (and (=> (not ($generated@@7 ($generated@@35 $generated@@3 ($generated@@6 (< $generated@@68 0))))) ($generated@@28 ($generated@@33 (- $generated@@68 1)))) (= ($generated@@29 ($generated@@26 $generated@@67) ($generated@@33 $generated@@68)) (ite (< $generated@@68 0) 0 (+ 1 ($generated@@29 ($generated@@26 $generated@@67) ($generated@@33 (- $generated@@68 1))))))))
 :weight 3
 :pattern ( ($generated@@29 ($generated@@26 $generated@@67) ($generated@@33 $generated@@68)))
))))
(assert (forall (($generated@@69 T@U) ($generated@@70 T@T) ) (! (= ($generated@@38 $generated@@70 ($generated@@39 $generated@@70 $generated@@69)) $generated@@69)
 :pattern ( ($generated@@39 $generated@@70 $generated@@69))
)))
(assert (forall (($generated@@71 T@U) ($generated@@72 Int) ) (! (= ($generated@@42 ($generated@@26 $generated@@71) $generated@@72) ($generated@@42 $generated@@71 $generated@@72))
 :pattern ( ($generated@@42 ($generated@@26 $generated@@71) $generated@@72))
)))
(assert (forall (($generated@@73 T@U) ($generated@@74 Int) ) (! (= ($generated@@46 ($generated@@26 $generated@@73) $generated@@74) ($generated@@46 $generated@@73 $generated@@74))
 :pattern ( ($generated@@46 ($generated@@26 $generated@@73) $generated@@74))
)))
(assert (forall (($generated@@75 T@U) ($generated@@76 Int) ) (! (= ($generated@@29 ($generated@@26 $generated@@75) $generated@@76) ($generated@@29 $generated@@75 $generated@@76))
 :pattern ( ($generated@@29 ($generated@@26 $generated@@75) $generated@@76))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@88 T@T) ($generated@@89 T@T) ($generated@@90 T@T) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (! (= ($generated@@77 $generated@@88 $generated@@89 $generated@@90 ($generated@@84 $generated@@88 $generated@@89 $generated@@90 $generated@@92 $generated@@93 $generated@@94 $generated@@91) $generated@@93 $generated@@94) $generated@@91)
 :weight 0
)) (and (forall (($generated@@95 T@T) ($generated@@96 T@T) ($generated@@97 T@T) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ) (!  (or (= $generated@@100 $generated@@102) (= ($generated@@77 $generated@@95 $generated@@96 $generated@@97 ($generated@@84 $generated@@95 $generated@@96 $generated@@97 $generated@@99 $generated@@100 $generated@@101 $generated@@98) $generated@@102 $generated@@103) ($generated@@77 $generated@@95 $generated@@96 $generated@@97 $generated@@99 $generated@@102 $generated@@103)))
 :weight 0
)) (forall (($generated@@104 T@T) ($generated@@105 T@T) ($generated@@106 T@T) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ) (!  (or (= $generated@@110 $generated@@112) (= ($generated@@77 $generated@@104 $generated@@105 $generated@@106 ($generated@@84 $generated@@104 $generated@@105 $generated@@106 $generated@@108 $generated@@109 $generated@@110 $generated@@107) $generated@@111 $generated@@112) ($generated@@77 $generated@@104 $generated@@105 $generated@@106 $generated@@108 $generated@@111 $generated@@112)))
 :weight 0
)))) (= ($generated@@2 $generated@@78) 3)) (= ($generated@@2 $generated@@79) 4)) (forall (($generated@@113 T@T) ($generated@@114 T@T) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ) (! (= ($generated@@81 $generated@@113 $generated@@114 ($generated@@85 $generated@@113 $generated@@114 $generated@@116 $generated@@117 $generated@@115) $generated@@117) $generated@@115)
 :weight 0
))) (forall (($generated@@118 T@T) ($generated@@119 T@T) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ) (!  (or (= $generated@@122 $generated@@123) (= ($generated@@81 $generated@@118 $generated@@119 ($generated@@85 $generated@@118 $generated@@119 $generated@@121 $generated@@122 $generated@@120) $generated@@123) ($generated@@81 $generated@@118 $generated@@119 $generated@@121 $generated@@123)))
 :weight 0
))) (= ($generated@@2 $generated@@82) 5)) (forall (($generated@@124 T@T) ($generated@@125 T@T) ) (= ($generated@@2 ($generated@@83 $generated@@124 $generated@@125)) 6))) (forall (($generated@@126 T@T) ($generated@@127 T@T) ) (! (= ($generated@@86 ($generated@@83 $generated@@126 $generated@@127)) $generated@@126)
 :pattern ( ($generated@@83 $generated@@126 $generated@@127))
))) (forall (($generated@@128 T@T) ($generated@@129 T@T) ) (! (= ($generated@@87 ($generated@@83 $generated@@128 $generated@@129)) $generated@@129)
 :pattern ( ($generated@@83 $generated@@128 $generated@@129))
))))
(assert (forall (($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 Bool) ($generated@@134 T@U) ($generated@@135 T@U) ) (! (= ($generated@@7 ($generated@@77 $generated@@78 $generated@@79 $generated@@3 ($generated@@80 $generated@@130 $generated@@131 $generated@@132 $generated@@133) $generated@@134 $generated@@135))  (=> (and (or (not (= $generated@@134 $generated@@130)) (not true)) ($generated@@7 ($generated@@38 $generated@@3 ($generated@@81 $generated@@79 $generated@@82 ($generated@@81 $generated@@78 ($generated@@83 $generated@@79 $generated@@82) $generated@@131 $generated@@134) $generated@@132)))) $generated@@133))
 :pattern ( ($generated@@77 $generated@@78 $generated@@79 $generated@@3 ($generated@@80 $generated@@130 $generated@@131 $generated@@132 $generated@@133) $generated@@134 $generated@@135))
)))
(assert (forall (($generated@@136 Int) ) (! (= ($generated@@39 $generated@@4 ($generated@@8 ($generated@@33 $generated@@136))) ($generated@@35 $generated@@82 ($generated@@39 $generated@@4 ($generated@@8 $generated@@136))))
 :pattern ( ($generated@@39 $generated@@4 ($generated@@8 ($generated@@33 $generated@@136))))
)))
(assert (forall (($generated@@137 T@U) ($generated@@138 T@T) ) (! (= ($generated@@39 $generated@@138 ($generated@@35 $generated@@138 $generated@@137)) ($generated@@35 $generated@@82 ($generated@@39 $generated@@138 $generated@@137)))
 :pattern ( ($generated@@39 $generated@@138 ($generated@@35 $generated@@138 $generated@@137)))
)))
(assert (forall (($generated@@140 T@U) ($generated@@141 T@U) ) (! ($generated@@139 $generated@@4 $generated@@141 $generated $generated@@140)
 :pattern ( ($generated@@139 $generated@@4 $generated@@141 $generated $generated@@140))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@142 (T@U) Bool)
(declare-fun $generated@@143 () T@U)
(declare-fun $generated@@144 (T@U) Bool)
(declare-fun $generated@@145 () T@U)
(declare-fun $generated@@146 () Bool)
(declare-fun $generated@@147 () Int)
(declare-fun $generated@@148 () Int)
(declare-fun $generated@@149 () T@U)
(declare-fun $generated@@150 () Int)
(declare-fun $generated@@151 () Int)
(declare-fun $generated@@152 () Int)
(declare-fun $generated@@153 () T@U)
(declare-fun $generated@@154 () T@U)
(declare-fun $generated@@155 () T@U)
(declare-fun $generated@@156 () T@U)
(declare-fun $generated@@157 () T@U)
(declare-fun $generated@@158 () T@U)
(declare-fun $generated@@159 () T@U)
(declare-fun $generated@@160 () T@U)
(declare-fun $generated@@161 () T@U)
(declare-fun $generated@@162 () T@U)
(declare-fun $generated@@163 () T@U)
(declare-fun $generated@@164 () T@U)
(declare-fun $generated@@165 () Int)
(declare-fun $generated@@166 () Int)
(declare-fun $generated@@167 () Int)
(declare-fun $generated@@168 () Int)
(declare-fun $generated@@169 () Int)
(declare-fun $generated@@170 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 19) (let (($generated@@171  (=> (and (and (and (and ($generated@@142 $generated@@143) ($generated@@144 $generated@@143)) (= $generated@@145 $generated@@143)) (and $generated@@146 ($generated@@139 $generated@@4 ($generated@@8 $generated@@147) $generated $generated@@143))) (and (and (and ($generated@@27 $generated@@147) (= $generated@@148 (- $generated@@147 5))) (and ($generated@@139 $generated@@4 ($generated@@8 $generated@@148) $generated $generated@@143) ($generated@@27 (- $generated@@147 5)))) (and (and ($generated@@27 $generated@@147) ($generated@@27 (- $generated@@147 5))) (= (ControlFlow 0 4) (- 0 3))))) (= ($generated@@19 $generated@@149 $generated@@146 $generated@@147) (+ 5 ($generated@@19 $generated@@149 $generated@@146 (- $generated@@147 5)))))))
(let (($generated@@172  (=> (and (and ($generated@@139 $generated@@4 ($generated@@8 $generated@@150) $generated $generated@@145) ($generated@@27 $generated@@150)) (and ($generated@@27 $generated@@150) (= (ControlFlow 0 2) (- 0 1)))) (= ($generated@@19 $generated@@149 $generated@@146 $generated@@150) ($generated@@33 0)))))
(let (($generated@@173  (and (=> (= (ControlFlow 0 5) 2) $generated@@172) (=> (= (ControlFlow 0 5) 4) $generated@@171))))
(let (($generated@@174  (=> ($generated@@139 $generated@@4 ($generated@@8 $generated@@147) $generated $generated@@145) (=> (and ($generated@@28 $generated@@147) (= $generated@@151 (- $generated@@147 6))) (=> (and (and ($generated@@139 $generated@@4 ($generated@@8 $generated@@151) $generated $generated@@145) ($generated@@28 (- $generated@@147 6))) (and ($generated@@28 $generated@@147) ($generated@@28 (- $generated@@147 6)))) (and (=> (= (ControlFlow 0 8) (- 0 9)) (= ($generated@@29 $generated@@30 $generated@@147) (+ 6 ($generated@@29 $generated@@30 (- $generated@@147 6))))) (=> (and (= ($generated@@29 $generated@@30 $generated@@147) (+ 6 ($generated@@29 $generated@@30 (- $generated@@147 6)))) (= (ControlFlow 0 8) 5)) $generated@@173)))))))
(let (($generated@@175  (=> ($generated@@139 $generated@@4 ($generated@@8 $generated@@147) $generated $generated@@145) (=> (and ($generated@@28 $generated@@147) (= $generated@@152 (- $generated@@147 5))) (=> (and (and ($generated@@139 $generated@@4 ($generated@@8 $generated@@152) $generated $generated@@145) ($generated@@28 (- $generated@@147 5))) (and ($generated@@28 $generated@@147) ($generated@@28 (- $generated@@147 5)))) (and (=> (= (ControlFlow 0 6) (- 0 7)) (= ($generated@@29 $generated@@30 $generated@@147) (+ 5 ($generated@@29 $generated@@30 (- $generated@@147 5))))) (=> (and (= ($generated@@29 $generated@@30 $generated@@147) (+ 5 ($generated@@29 $generated@@30 (- $generated@@147 5)))) (= (ControlFlow 0 6) 5)) $generated@@173)))))))
(let (($generated@@176  (=> (and (and (and (and (= $generated@@153 ($generated@@26 ($generated@@26 ($generated@@26 $generated@@154)))) (= $generated@@155 ($generated@@26 ($generated@@26 ($generated@@26 ($generated@@26 $generated@@154)))))) (and (= ($generated@@20 $generated@@154) $generated@@154) (= $generated@@156 ($generated@@26 ($generated@@26 ($generated@@26 ($generated@@26 $generated@@157))))))) (and (and (= $generated@@158 ($generated@@26 ($generated@@26 ($generated@@26 ($generated@@26 ($generated@@26 $generated@@157)))))) (= ($generated@@20 $generated@@157) $generated@@157)) (and (= $generated@@159 ($generated@@26 ($generated@@26 ($generated@@26 ($generated@@26 $generated@@160))))) (= $generated@@30 ($generated@@26 ($generated@@26 ($generated@@26 ($generated@@26 ($generated@@26 $generated@@160))))))))) (and (and (and (= ($generated@@20 $generated@@160) $generated@@160) (= $generated@@161 ($generated@@26 ($generated@@26 ($generated@@26 ($generated@@26 $generated@@162)))))) (and (= $generated@@149 ($generated@@26 ($generated@@26 ($generated@@26 ($generated@@26 ($generated@@26 $generated@@162)))))) (= ($generated@@20 $generated@@162) $generated@@162))) (and (and (= $generated@@163 ($generated@@80 $generated@@164 $generated@@145 $generated@@1 false)) ($generated@@139 $generated@@4 ($generated@@8 $generated@@150) $generated $generated@@145)) (and ($generated@@43 $generated@@150) ($generated@@43 $generated@@150))))) (and (=> (= (ControlFlow 0 10) (- 0 18)) (= ($generated@@42 $generated@@155 $generated@@150) ($generated@@33 0))) (=> (= ($generated@@42 $generated@@155 $generated@@150) ($generated@@33 0)) (=> (and (and (= $generated@@165 ($generated@@33 (- 0 1))) ($generated@@139 $generated@@4 ($generated@@8 $generated@@165) $generated $generated@@145)) (and ($generated@@43 ($generated@@33 (- 0 1))) ($generated@@43 ($generated@@33 (- 0 1))))) (and (=> (= (ControlFlow 0 10) (- 0 17)) (= ($generated@@33 ($generated@@42 $generated@@155 ($generated@@33 (- 0 1)))) ($generated@@33 0))) (=> (and (and (and (= ($generated@@33 ($generated@@42 $generated@@155 ($generated@@33 (- 0 1)))) ($generated@@33 0)) ($generated@@139 $generated@@4 ($generated@@8 $generated@@147) $generated $generated@@145)) (and ($generated@@43 $generated@@147) (= $generated@@166 (- $generated@@147 3)))) (and (and ($generated@@139 $generated@@4 ($generated@@8 $generated@@166) $generated $generated@@145) ($generated@@43 (- $generated@@147 3))) (and ($generated@@43 $generated@@147) ($generated@@43 (- $generated@@147 3))))) (and (=> (= (ControlFlow 0 10) (- 0 16)) (= ($generated@@42 $generated@@155 $generated@@147) (+ 3 ($generated@@42 $generated@@155 (- $generated@@147 3))))) (=> (and (and (and (= ($generated@@42 $generated@@155 $generated@@147) (+ 3 ($generated@@42 $generated@@155 (- $generated@@147 3)))) ($generated@@139 $generated@@4 ($generated@@8 $generated@@147) $generated $generated@@145)) (and ($generated@@43 $generated@@147) (= $generated@@167 (- $generated@@147 4)))) (and (and ($generated@@139 $generated@@4 ($generated@@8 $generated@@167) $generated $generated@@145) ($generated@@43 (- $generated@@147 4))) (and ($generated@@43 $generated@@147) ($generated@@43 (- $generated@@147 4))))) (and (=> (= (ControlFlow 0 10) (- 0 15)) (= ($generated@@42 $generated@@155 $generated@@147) (+ 4 ($generated@@42 $generated@@155 (- $generated@@147 4))))) (=> (and (and (= ($generated@@42 $generated@@155 $generated@@147) (+ 4 ($generated@@42 $generated@@155 (- $generated@@147 4)))) ($generated@@139 $generated@@4 ($generated@@8 $generated@@150) $generated $generated@@145)) (and ($generated@@47 $generated@@150) ($generated@@47 $generated@@150))) (and (=> (= (ControlFlow 0 10) (- 0 14)) (= ($generated@@46 $generated@@158 $generated@@150) ($generated@@33 0))) (=> (= ($generated@@46 $generated@@158 $generated@@150) ($generated@@33 0)) (=> (and (and (= $generated@@168 ($generated@@33 (- 0 1))) ($generated@@139 $generated@@4 ($generated@@8 $generated@@168) $generated $generated@@145)) (and ($generated@@47 ($generated@@33 (- 0 1))) ($generated@@47 ($generated@@33 (- 0 1))))) (and (=> (= (ControlFlow 0 10) (- 0 13)) (= ($generated@@33 ($generated@@46 $generated@@158 ($generated@@33 (- 0 1)))) ($generated@@33 0))) (=> (and (and (and (= ($generated@@33 ($generated@@46 $generated@@158 ($generated@@33 (- 0 1)))) ($generated@@33 0)) ($generated@@139 $generated@@4 ($generated@@8 $generated@@147) $generated $generated@@145)) (and ($generated@@47 $generated@@147) (= $generated@@169 (- $generated@@147 3)))) (and (and ($generated@@139 $generated@@4 ($generated@@8 $generated@@169) $generated $generated@@145) ($generated@@47 (- $generated@@147 3))) (and ($generated@@47 $generated@@147) ($generated@@47 (- $generated@@147 3))))) (and (=> (= (ControlFlow 0 10) (- 0 12)) (= ($generated@@46 $generated@@158 $generated@@147) (+ 3 ($generated@@46 $generated@@158 (- $generated@@147 3))))) (=> (and (and (and (= ($generated@@46 $generated@@158 $generated@@147) (+ 3 ($generated@@46 $generated@@158 (- $generated@@147 3)))) ($generated@@139 $generated@@4 ($generated@@8 $generated@@147) $generated $generated@@145)) (and ($generated@@47 $generated@@147) (= $generated@@170 (- $generated@@147 4)))) (and (and ($generated@@139 $generated@@4 ($generated@@8 $generated@@170) $generated $generated@@145) ($generated@@47 (- $generated@@147 4))) (and ($generated@@47 $generated@@147) ($generated@@47 (- $generated@@147 4))))) (and (=> (= (ControlFlow 0 10) (- 0 11)) (= ($generated@@46 $generated@@158 $generated@@147) (+ 4 ($generated@@46 $generated@@158 (- $generated@@147 4))))) (=> (= ($generated@@46 $generated@@158 $generated@@147) (+ 4 ($generated@@46 $generated@@158 (- $generated@@147 4)))) (and (=> (= (ControlFlow 0 10) 6) $generated@@175) (=> (= (ControlFlow 0 10) 8) $generated@@174)))))))))))))))))))))))
(let (($generated@@177  (=> (and ($generated@@142 $generated@@145) ($generated@@144 $generated@@145)) (=> (and (and (= 2 $generated@@25) (> $generated@@147 5)) (and (< $generated@@150 0) (= (ControlFlow 0 19) 10))) $generated@@176))))
$generated@@177))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 8) (- 9))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
