(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._System.object? () T@U)
(declare-fun Tagclass._System.object () T@U)
(declare-fun Tagclass._module.C? () T@U)
(declare-fun Tagclass._module.C () T@U)
(declare-fun Tagclass._module.CP? () T@U)
(declare-fun Tagclass._module.CP () T@U)
(declare-fun tytagFamily$object () T@U)
(declare-fun tytagFamily$C () T@U)
(declare-fun tytagFamily$CP () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun Tclass._module.C? () T@U)
(declare-fun null () T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass._System.object () T@U)
(declare-fun Tclass._System.object? () T@U)
(declare-fun Tclass._module.C () T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun Tclass._module.CP (T@U T@U) T@U)
(declare-fun Tclass._module.CP? (T@U T@U) T@U)
(declare-fun Tclass._module.CP?_0 (T@U) T@U)
(declare-fun Tclass._module.CP?_1 (T@U) T@U)
(declare-fun Tclass._module.CP_0 (T@U) T@U)
(declare-fun Tclass._module.CP_1 (T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt alloc Tagclass._System.object? Tagclass._System.object Tagclass._module.C? Tagclass._module.C Tagclass._module.CP? Tagclass._module.CP tytagFamily$object tytagFamily$C tytagFamily$CP)
)
(assert (= (Tag TInt) TagInt))
(assert (= (Ctor refType) 3))
(assert (forall (($o T@U) ) (! (= ($Is refType $o Tclass._module.C?)  (or (= $o null) (= (dtype $o) Tclass._module.C?)))
 :pattern ( ($Is refType $o Tclass._module.C?))
)))
(assert (forall ((|c#0| T@U) ($h T@U) ) (! (= ($IsAlloc refType |c#0| Tclass._System.object $h) ($IsAlloc refType |c#0| Tclass._System.object? $h))
 :pattern ( ($IsAlloc refType |c#0| Tclass._System.object $h))
 :pattern ( ($IsAlloc refType |c#0| Tclass._System.object? $h))
)))
(assert (forall ((|c#0@@0| T@U) ($h@@0 T@U) ) (! (= ($IsAlloc refType |c#0@@0| Tclass._module.C $h@@0) ($IsAlloc refType |c#0@@0| Tclass._module.C? $h@@0))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass._module.C $h@@0))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass._module.C? $h@@0))
)))
(assert  (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 4)) (= (Ctor BoxType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 6))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall (($o@@0 T@U) ($h@@1 T@U) ) (! (= ($IsAlloc refType $o@@0 Tclass._System.object? $h@@1)  (or (= $o@@0 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@1 $o@@0) alloc)))))
 :pattern ( ($IsAlloc refType $o@@0 Tclass._System.object? $h@@1))
)))
(assert (forall (($o@@1 T@U) ($h@@2 T@U) ) (! (= ($IsAlloc refType $o@@1 Tclass._module.C? $h@@2)  (or (= $o@@1 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o@@1) alloc)))))
 :pattern ( ($IsAlloc refType $o@@1 Tclass._module.C? $h@@2))
)))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((x@@2 T@U) (T T@T) ) (! (= ($Box T ($Unbox T x@@2)) x@@2)
 :pattern ( ($Unbox T x@@2))
)))
(assert (forall ((_module.CP$T T@U) (_module.CP$U T@U) (|c#0@@1| T@U) ) (! (= ($Is refType |c#0@@1| (Tclass._module.CP _module.CP$T _module.CP$U))  (and ($Is refType |c#0@@1| (Tclass._module.CP? _module.CP$T _module.CP$U)) (or (not (= |c#0@@1| null)) (not true))))
 :pattern ( ($Is refType |c#0@@1| (Tclass._module.CP _module.CP$T _module.CP$U)))
 :pattern ( ($Is refType |c#0@@1| (Tclass._module.CP? _module.CP$T _module.CP$U)))
)))
(assert (forall ((h@@0 T@U) (k@@0 T@U) (v T@U) (t T@U) (T@@0 T@T) ) (!  (=> ($HeapSucc h@@0 k@@0) (=> ($IsAlloc T@@0 v t h@@0) ($IsAlloc T@@0 v t k@@0)))
 :pattern ( ($HeapSucc h@@0 k@@0) ($IsAlloc T@@0 v t h@@0))
)))
(assert (forall ((_module.CP$T@@0 T@U) (_module.CP$U@@0 T@U) ($o@@2 T@U) ) (! (= ($Is refType $o@@2 (Tclass._module.CP? _module.CP$T@@0 _module.CP$U@@0))  (or (= $o@@2 null) (= (dtype $o@@2) (Tclass._module.CP? _module.CP$T@@0 _module.CP$U@@0))))
 :pattern ( ($Is refType $o@@2 (Tclass._module.CP? _module.CP$T@@0 _module.CP$U@@0)))
)))
(assert (forall ((_module.CP$T@@1 T@U) (_module.CP$U@@1 T@U) (|c#0@@2| T@U) ($h@@3 T@U) ) (! (= ($IsAlloc refType |c#0@@2| (Tclass._module.CP _module.CP$T@@1 _module.CP$U@@1) $h@@3) ($IsAlloc refType |c#0@@2| (Tclass._module.CP? _module.CP$T@@1 _module.CP$U@@1) $h@@3))
 :pattern ( ($IsAlloc refType |c#0@@2| (Tclass._module.CP _module.CP$T@@1 _module.CP$U@@1) $h@@3))
 :pattern ( ($IsAlloc refType |c#0@@2| (Tclass._module.CP? _module.CP$T@@1 _module.CP$U@@1) $h@@3))
)))
(assert (forall ((|c#0@@3| T@U) ) (! (= ($Is refType |c#0@@3| Tclass._System.object)  (and ($Is refType |c#0@@3| Tclass._System.object?) (or (not (= |c#0@@3| null)) (not true))))
 :pattern ( ($Is refType |c#0@@3| Tclass._System.object))
 :pattern ( ($Is refType |c#0@@3| Tclass._System.object?))
)))
(assert (forall ((|c#0@@4| T@U) ) (! (= ($Is refType |c#0@@4| Tclass._module.C)  (and ($Is refType |c#0@@4| Tclass._module.C?) (or (not (= |c#0@@4| null)) (not true))))
 :pattern ( ($Is refType |c#0@@4| Tclass._module.C))
 :pattern ( ($Is refType |c#0@@4| Tclass._module.C?))
)))
(assert (forall ((_module.CP$T@@2 T@U) (_module.CP$U@@2 T@U) ($o@@3 T@U) ($h@@4 T@U) ) (! (= ($IsAlloc refType $o@@3 (Tclass._module.CP? _module.CP$T@@2 _module.CP$U@@2) $h@@4)  (or (= $o@@3 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@4 $o@@3) alloc)))))
 :pattern ( ($IsAlloc refType $o@@3 (Tclass._module.CP? _module.CP$T@@2 _module.CP$U@@2) $h@@4))
)))
(assert (forall ((a T@U) (b T@U) (c T@U) ) (!  (=> (or (not (= a c)) (not true)) (=> (and ($HeapSucc a b) ($HeapSucc b c)) ($HeapSucc a c)))
 :pattern ( ($HeapSucc a b) ($HeapSucc b c))
)))
(assert (forall ((_module.CP$T@@3 T@U) (_module.CP$U@@3 T@U) ) (! (= (Tclass._module.CP?_0 (Tclass._module.CP? _module.CP$T@@3 _module.CP$U@@3)) _module.CP$T@@3)
 :pattern ( (Tclass._module.CP? _module.CP$T@@3 _module.CP$U@@3))
)))
(assert (forall ((_module.CP$T@@4 T@U) (_module.CP$U@@4 T@U) ) (! (= (Tclass._module.CP?_1 (Tclass._module.CP? _module.CP$T@@4 _module.CP$U@@4)) _module.CP$U@@4)
 :pattern ( (Tclass._module.CP? _module.CP$T@@4 _module.CP$U@@4))
)))
(assert (forall ((_module.CP$T@@5 T@U) (_module.CP$U@@5 T@U) ) (! (= (Tclass._module.CP_0 (Tclass._module.CP _module.CP$T@@5 _module.CP$U@@5)) _module.CP$T@@5)
 :pattern ( (Tclass._module.CP _module.CP$T@@5 _module.CP$U@@5))
)))
(assert (forall ((_module.CP$T@@6 T@U) (_module.CP$U@@6 T@U) ) (! (= (Tclass._module.CP_1 (Tclass._module.CP _module.CP$T@@6 _module.CP$U@@6)) _module.CP$U@@6)
 :pattern ( (Tclass._module.CP _module.CP$T@@6 _module.CP$U@@6))
)))
(assert (forall (($o@@4 T@U) ) (! ($Is refType $o@@4 Tclass._System.object?)
 :pattern ( ($Is refType $o@@4 Tclass._System.object?))
)))
(assert (forall ((x@@3 T@U) (T@@1 T@T) ) (! (= ($Unbox T@@1 ($Box T@@1 x@@3)) x@@3)
 :pattern ( ($Box T@@1 x@@3))
)))
(assert  (and (forall ((t0@@0 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 t2 (MapType1Store t0@@0 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o@@5 T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@5 $f))  (=> (and (or (not (= $o@@5 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@5) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@5 $f))
)))
(assert (forall ((_module.CP$T@@7 T@U) (_module.CP$U@@7 T@U) ) (!  (and (= (Tag (Tclass._module.CP? _module.CP$T@@7 _module.CP$U@@7)) Tagclass._module.CP?) (= (TagFamily (Tclass._module.CP? _module.CP$T@@7 _module.CP$U@@7)) tytagFamily$CP))
 :pattern ( (Tclass._module.CP? _module.CP$T@@7 _module.CP$U@@7))
)))
(assert (forall ((_module.CP$T@@8 T@U) (_module.CP$U@@8 T@U) ) (!  (and (= (Tag (Tclass._module.CP _module.CP$T@@8 _module.CP$U@@8)) Tagclass._module.CP) (= (TagFamily (Tclass._module.CP _module.CP$T@@8 _module.CP$U@@8)) tytagFamily$CP))
 :pattern ( (Tclass._module.CP _module.CP$T@@8 _module.CP$U@@8))
)))
(assert (forall ((h@@1 T@U) (r T@U) (f T@U) (x@@4 T@U) ) (!  (=> ($IsGoodHeap (MapType0Store refType (MapType0Type FieldType BoxType) h@@1 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@1 r) f x@@4))) ($HeapSucc h@@1 (MapType0Store refType (MapType0Type FieldType BoxType) h@@1 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@1 r) f x@@4))))
 :pattern ( (MapType0Store refType (MapType0Type FieldType BoxType) h@@1 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@1 r) f x@@4)))
)))
(assert (= (Tag Tclass._System.object?) Tagclass._System.object?))
(assert (= (TagFamily Tclass._System.object?) tytagFamily$object))
(assert (= (Tag Tclass._System.object) Tagclass._System.object))
(assert (= (TagFamily Tclass._System.object) tytagFamily$object))
(assert (= (Tag Tclass._module.C?) Tagclass._module.C?))
(assert (= (TagFamily Tclass._module.C?) tytagFamily$C))
(assert (= (Tag Tclass._module.C) Tagclass._module.C))
(assert (= (TagFamily Tclass._module.C) tytagFamily$C))
(assert (forall ((h@@2 T@U) (v@@0 T@U) ) (! ($IsAlloc intType v@@0 TInt h@@2)
 :pattern ( ($IsAlloc intType v@@0 TInt h@@2))
)))
(assert (forall ((v@@1 T@U) ) (! ($Is intType v@@1 TInt)
 :pattern ( ($Is intType v@@1 TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |a#0@0| () T@U)
(declare-fun $nw@1 () T@U)
(declare-fun |defass#a#0@0| () Bool)
(declare-fun |$w$loop#0@0| () Bool)
(declare-fun $Heap@1 () T@U)
(declare-fun |x#0_0@0| () T@U)
(declare-fun |y#0_0@0| () T@U)
(declare-fun $Heap () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun $nw@0 () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun this () T@U)
(declare-fun |defass#a#0| () Bool)
(declare-fun |a#0| () T@U)
(declare-fun |defass#b#0| () Bool)
(declare-fun |b#0| () T@U)
(declare-fun |x#0_0| () T@U)
(declare-fun |y#0_0| () T@U)
(declare-fun $FunctionContextHeight () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 17) (let ((anon7_correct  (and (=> (= (ControlFlow 0 5) (- 0 6)) (=> (= |a#0@0| $nw@1) (= |a#0@0| null))) (=> (and (=> (= |a#0@0| $nw@1) (= |a#0@0| null)) (= (ControlFlow 0 5) (- 0 4))) |defass#a#0@0|))))
(let ((anon11_Else_correct  (=> (and (or (not (= |a#0@0| $nw@1)) (not true)) (= (ControlFlow 0 8) 5)) anon7_correct)))
(let ((anon11_Then_correct  (=> (and (= |a#0@0| $nw@1) (= (ControlFlow 0 7) 5)) anon7_correct)))
(let ((anon10_Else_correct  (=> (or (not (= |a#0@0| null)) (not true)) (and (=> (= (ControlFlow 0 9) (- 0 11)) |defass#a#0@0|) (=> |defass#a#0@0| (and (=> (= (ControlFlow 0 9) (- 0 10)) true) (and (=> (= (ControlFlow 0 9) 7) anon11_Then_correct) (=> (= (ControlFlow 0 9) 8) anon11_Else_correct))))))))
(let ((anon10_Then_correct true))
(let ((anon9_Else_correct  (=> |$w$loop#0@0| (and (=> (= (ControlFlow 0 12) (- 0 13)) |defass#a#0@0|) (=> |defass#a#0@0| (and (=> (= (ControlFlow 0 12) 3) anon10_Then_correct) (=> (= (ControlFlow 0 12) 9) anon10_Else_correct)))))))
(let ((anon9_Then_correct true))
(let ((anon8_LoopBody_correct  (and (=> (= (ControlFlow 0 14) 2) anon9_Then_correct) (=> (= (ControlFlow 0 14) 12) anon9_Else_correct))))
(let ((anon8_LoopDone_correct true))
(let ((anon8_LoopHead_correct  (=> (=> |defass#a#0@0| (and ($Is refType |a#0@0| (Tclass._module.CP TInt Tclass._module.C)) ($IsAlloc refType |a#0@0| (Tclass._module.CP TInt Tclass._module.C) $Heap@1))) (=> (and (and ($Is refType |x#0_0@0| Tclass._System.object?) ($IsAlloc refType |x#0_0@0| Tclass._System.object? $Heap@1)) (and ($Is refType |y#0_0@0| Tclass._System.object?) ($IsAlloc refType |y#0_0@0| Tclass._System.object? $Heap@1))) (=> (and (and (and (and (not false) |defass#a#0@0|) true) true) (and (and (forall (($o@@6 T@U) ) (!  (=> (and (or (not (= $o@@6 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@6) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@6) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@6)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@6))
)) ($HeapSucc $Heap@1 $Heap@1)) (and (forall (($o@@7 T@U) ($f@@0 T@U) ) (!  (=> (and (or (not (= $o@@7 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@7) alloc)))) (or (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@7) $f@@0) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@7) $f@@0)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@7 $f@@0))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@7) $f@@0))
)) (=> true |defass#a#0@0|)))) (and (=> (= (ControlFlow 0 15) 1) anon8_LoopDone_correct) (=> (= (ControlFlow 0 15) 14) anon8_LoopBody_correct)))))))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (=> (and (or (not (= $nw@0 null)) (not true)) ($Is refType $nw@0 (Tclass._module.CP? TInt Tclass._module.C))) (=> (and (and (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $nw@0) alloc)))) (= $Heap@0 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap $nw@0 (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $nw@0) alloc ($Box boolType (bool_2_U true)))))) (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0))) (=> (and (and (and (or (not (= $nw@1 null)) (not true)) ($Is refType $nw@1 (Tclass._module.CP? TInt Tclass._System.object))) (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $nw@1) alloc))))) (and (and (= $Heap@1 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap@0 $nw@1 (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $nw@1) alloc ($Box boolType (bool_2_U true))))) ($IsGoodHeap $Heap@1)) (and ($IsHeapAnchor $Heap@1) (= (ControlFlow 0 16) 15)))) anon8_LoopHead_correct))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (and (or (not (= this null)) (not true)) (and ($Is refType this Tclass._module.C) ($IsAlloc refType this Tclass._module.C $Heap)))) (=> (and (and (and (and (=> |defass#a#0| (and ($Is refType |a#0| (Tclass._module.CP TInt Tclass._module.C)) ($IsAlloc refType |a#0| (Tclass._module.CP TInt Tclass._module.C) $Heap))) true) (and (=> |defass#b#0| (and ($Is refType |b#0| (Tclass._module.CP TInt Tclass._System.object)) ($IsAlloc refType |b#0| (Tclass._module.CP TInt Tclass._System.object) $Heap))) true)) (and (and ($Is refType |x#0_0| Tclass._System.object?) ($IsAlloc refType |x#0_0| Tclass._System.object? $Heap)) true)) (and (and (and ($Is refType |y#0_0| Tclass._System.object?) ($IsAlloc refType |y#0_0| Tclass._System.object? $Heap)) true) (and (= 1 $FunctionContextHeight) (= (ControlFlow 0 17) 16)))) anon0_correct))))
PreconditionGeneratedEntry_correct)))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
