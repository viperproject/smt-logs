(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun alloc () T@U)
(declare-fun Tagclass.NestedMatch.List () T@U)
(declare-fun |##NestedMatch.List.Nil| () T@U)
(declare-fun |##NestedMatch.List.Cons| () T@U)
(declare-fun tytagFamily$List () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun |#NestedMatch.List.Nil| () T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun Tclass.NestedMatch.List (T@U) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun |NestedMatch.List#Equal| (T@U T@U) Bool)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun refType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun NestedMatch.List.Cons_q (T@U) Bool)
(declare-fun NestedMatch.List._h1 (T@U) T@U)
(declare-fun NestedMatch.List._h2 (T@U) T@U)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun |#NestedMatch.List.Cons| (T@U T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun NestedMatch.List.Nil_q (T@U) Bool)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun Tag (T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun |$IsA#NestedMatch.List| (T@U) Bool)
(declare-fun Tclass.NestedMatch.List_0 (T@U) T@U)
(declare-fun BoxRank (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct alloc Tagclass.NestedMatch.List |##NestedMatch.List.Nil| |##NestedMatch.List.Cons| tytagFamily$List)
)
(assert (= (DatatypeCtorId |#NestedMatch.List.Nil|) |##NestedMatch.List.Nil|))
(assert (= (Ctor DatatypeTypeType) 3))
(assert (forall ((NestedMatch.List$T T@U) ($h T@U) ) (!  (=> ($IsGoodHeap $h) ($IsAlloc DatatypeTypeType |#NestedMatch.List.Nil| (Tclass.NestedMatch.List NestedMatch.List$T) $h))
 :pattern ( ($IsAlloc DatatypeTypeType |#NestedMatch.List.Nil| (Tclass.NestedMatch.List NestedMatch.List$T) $h))
)))
(assert (forall ((NestedMatch.List$T@@0 T@U) ) (! ($Is DatatypeTypeType |#NestedMatch.List.Nil| (Tclass.NestedMatch.List NestedMatch.List$T@@0))
 :pattern ( ($Is DatatypeTypeType |#NestedMatch.List.Nil| (Tclass.NestedMatch.List NestedMatch.List$T@@0)))
)))
(assert (forall ((a T@U) (b T@U) ) (! (= (|NestedMatch.List#Equal| a b) (= a b))
 :pattern ( (|NestedMatch.List#Equal| a b))
)))
(assert  (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 4)) (= (Ctor BoxType) 5)) (= (Ctor refType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) ) (!  (=> (and (NestedMatch.List.Cons_q a@@0) (NestedMatch.List.Cons_q b@@0)) (= (|NestedMatch.List#Equal| a@@0 b@@0)  (and (= (NestedMatch.List._h1 a@@0) (NestedMatch.List._h1 b@@0)) (|NestedMatch.List#Equal| (NestedMatch.List._h2 a@@0) (NestedMatch.List._h2 b@@0)))))
 :pattern ( (|NestedMatch.List#Equal| a@@0 b@@0) (NestedMatch.List.Cons_q a@@0))
 :pattern ( (|NestedMatch.List#Equal| a@@0 b@@0) (NestedMatch.List.Cons_q b@@0))
)))
(assert (forall ((x@@2 T@U) (T T@T) ) (! (= (Lit T x@@2) x@@2)
 :pattern ( (Lit T x@@2))
)))
(assert (forall ((NestedMatch.List$T@@1 T@U) (|a#16#0#0| T@U) (|a#16#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#NestedMatch.List.Cons| |a#16#0#0| |a#16#1#0|) (Tclass.NestedMatch.List NestedMatch.List$T@@1))  (and ($IsBox |a#16#0#0| NestedMatch.List$T@@1) ($Is DatatypeTypeType |a#16#1#0| (Tclass.NestedMatch.List NestedMatch.List$T@@1))))
 :pattern ( ($Is DatatypeTypeType (|#NestedMatch.List.Cons| |a#16#0#0| |a#16#1#0|) (Tclass.NestedMatch.List NestedMatch.List$T@@1)))
)))
(assert (forall ((d T@U) ) (! (= (NestedMatch.List.Nil_q d) (= (DatatypeCtorId d) |##NestedMatch.List.Nil|))
 :pattern ( (NestedMatch.List.Nil_q d))
)))
(assert (forall ((d@@0 T@U) ) (! (= (NestedMatch.List.Cons_q d@@0) (= (DatatypeCtorId d@@0) |##NestedMatch.List.Cons|))
 :pattern ( (NestedMatch.List.Cons_q d@@0))
)))
(assert (forall ((x@@3 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@3)) x@@3)
 :pattern ( ($Unbox T@@0 x@@3))
)))
(assert (forall ((d@@1 T@U) ) (!  (=> (NestedMatch.List.Cons_q d@@1) (exists ((|a#15#0#0| T@U) (|a#15#1#0| T@U) ) (= d@@1 (|#NestedMatch.List.Cons| |a#15#0#0| |a#15#1#0|))))
 :pattern ( (NestedMatch.List.Cons_q d@@1))
)))
(assert (forall ((d@@2 T@U) ) (!  (=> (NestedMatch.List.Nil_q d@@2) (= d@@2 |#NestedMatch.List.Nil|))
 :pattern ( (NestedMatch.List.Nil_q d@@2))
)))
(assert (forall ((v T@U) (t T@U) (h@@0 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v) t h@@0) ($IsAlloc T@@1 v t h@@0))
 :pattern ( ($IsAllocBox ($Box T@@1 v) t h@@0))
)))
(assert (forall ((h@@1 T@U) (k@@0 T@U) (bx T@U) (t@@0 T@U) ) (!  (=> ($HeapSucc h@@1 k@@0) (=> ($IsAllocBox bx t@@0 h@@1) ($IsAllocBox bx t@@0 k@@0)))
 :pattern ( ($HeapSucc h@@1 k@@0) ($IsAllocBox bx t@@0 h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@1 T@U) (v@@0 T@U) (t@@1 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@2 k@@1) (=> ($IsAlloc T@@2 v@@0 t@@1 h@@2) ($IsAlloc T@@2 v@@0 t@@1 k@@1)))
 :pattern ( ($HeapSucc h@@2 k@@1) ($IsAlloc T@@2 v@@0 t@@1 h@@2))
)))
(assert (forall ((NestedMatch.List$T@@2 T@U) ) (!  (and (= (Tag (Tclass.NestedMatch.List NestedMatch.List$T@@2)) Tagclass.NestedMatch.List) (= (TagFamily (Tclass.NestedMatch.List NestedMatch.List$T@@2)) tytagFamily$List))
 :pattern ( (Tclass.NestedMatch.List NestedMatch.List$T@@2))
)))
(assert (forall ((d@@3 T@U) ) (!  (=> (|$IsA#NestedMatch.List| d@@3) (or (NestedMatch.List.Nil_q d@@3) (NestedMatch.List.Cons_q d@@3)))
 :pattern ( (|$IsA#NestedMatch.List| d@@3))
)))
(assert (forall ((NestedMatch.List$T@@3 T@U) (d@@4 T@U) ) (!  (=> ($Is DatatypeTypeType d@@4 (Tclass.NestedMatch.List NestedMatch.List$T@@3)) (or (NestedMatch.List.Nil_q d@@4) (NestedMatch.List.Cons_q d@@4)))
 :pattern ( (NestedMatch.List.Cons_q d@@4) ($Is DatatypeTypeType d@@4 (Tclass.NestedMatch.List NestedMatch.List$T@@3)))
 :pattern ( (NestedMatch.List.Nil_q d@@4) ($Is DatatypeTypeType d@@4 (Tclass.NestedMatch.List NestedMatch.List$T@@3)))
)))
(assert (forall ((a@@1 T@U) (b@@1 T@U) (c T@U) ) (!  (=> (or (not (= a@@1 c)) (not true)) (=> (and ($HeapSucc a@@1 b@@1) ($HeapSucc b@@1 c)) ($HeapSucc a@@1 c)))
 :pattern ( ($HeapSucc a@@1 b@@1) ($HeapSucc b@@1 c))
)))
(assert (forall ((v@@1 T@U) (t@@2 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@1) t@@2) ($Is T@@3 v@@1 t@@2))
 :pattern ( ($IsBox ($Box T@@3 v@@1) t@@2))
)))
(assert (forall ((a@@2 T@U) (b@@2 T@U) ) (!  (=> (and (NestedMatch.List.Nil_q a@@2) (NestedMatch.List.Nil_q b@@2)) (|NestedMatch.List#Equal| a@@2 b@@2))
 :pattern ( (|NestedMatch.List#Equal| a@@2 b@@2) (NestedMatch.List.Nil_q a@@2))
 :pattern ( (|NestedMatch.List#Equal| a@@2 b@@2) (NestedMatch.List.Nil_q b@@2))
)))
(assert (forall ((|a#14#0#0| T@U) (|a#14#1#0| T@U) ) (! (= (DatatypeCtorId (|#NestedMatch.List.Cons| |a#14#0#0| |a#14#1#0|)) |##NestedMatch.List.Cons|)
 :pattern ( (|#NestedMatch.List.Cons| |a#14#0#0| |a#14#1#0|))
)))
(assert (forall ((|a#18#0#0| T@U) (|a#18#1#0| T@U) ) (! (= (NestedMatch.List._h1 (|#NestedMatch.List.Cons| |a#18#0#0| |a#18#1#0|)) |a#18#0#0|)
 :pattern ( (|#NestedMatch.List.Cons| |a#18#0#0| |a#18#1#0|))
)))
(assert (forall ((|a#20#0#0| T@U) (|a#20#1#0| T@U) ) (! (= (NestedMatch.List._h2 (|#NestedMatch.List.Cons| |a#20#0#0| |a#20#1#0|)) |a#20#1#0|)
 :pattern ( (|#NestedMatch.List.Cons| |a#20#0#0| |a#20#1#0|))
)))
(assert (forall ((NestedMatch.List$T@@4 T@U) ) (! (= (Tclass.NestedMatch.List_0 (Tclass.NestedMatch.List NestedMatch.List$T@@4)) NestedMatch.List$T@@4)
 :pattern ( (Tclass.NestedMatch.List NestedMatch.List$T@@4))
)))
(assert (forall ((x@@4 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@4)) x@@4)
 :pattern ( ($Box T@@4 x@@4))
)))
(assert (forall ((|a#19#0#0| T@U) (|a#19#1#0| T@U) ) (! (< (BoxRank |a#19#0#0|) (DtRank (|#NestedMatch.List.Cons| |a#19#0#0| |a#19#1#0|)))
 :pattern ( (|#NestedMatch.List.Cons| |a#19#0#0| |a#19#1#0|))
)))
(assert (forall ((|a#21#0#0| T@U) (|a#21#1#0| T@U) ) (! (< (DtRank |a#21#1#0|) (DtRank (|#NestedMatch.List.Cons| |a#21#0#0| |a#21#1#0|)))
 :pattern ( (|#NestedMatch.List.Cons| |a#21#0#0| |a#21#1#0|))
)))
(assert (forall ((d@@5 T@U) (NestedMatch.List$T@@5 T@U) ($h@@0 T@U) ) (!  (=> (and ($IsGoodHeap $h@@0) (and (NestedMatch.List.Cons_q d@@5) ($IsAlloc DatatypeTypeType d@@5 (Tclass.NestedMatch.List NestedMatch.List$T@@5) $h@@0))) ($IsAllocBox (NestedMatch.List._h1 d@@5) NestedMatch.List$T@@5 $h@@0))
 :pattern ( ($IsAllocBox (NestedMatch.List._h1 d@@5) NestedMatch.List$T@@5 $h@@0))
)))
(assert  (and (forall ((t0@@0 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 t2 (MapType1Store t0@@0 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((d@@6 T@U) ) (! (= (BoxRank ($Box DatatypeTypeType d@@6)) (DtRank d@@6))
 :pattern ( (BoxRank ($Box DatatypeTypeType d@@6)))
)))
(assert (forall ((NestedMatch.List$T@@6 T@U) (bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 (Tclass.NestedMatch.List NestedMatch.List$T@@6)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@0)) bx@@0) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@0) (Tclass.NestedMatch.List NestedMatch.List$T@@6))))
 :pattern ( ($IsBox bx@@0 (Tclass.NestedMatch.List NestedMatch.List$T@@6)))
)))
(assert (forall ((d@@7 T@U) (NestedMatch.List$T@@7 T@U) ($h@@1 T@U) ) (!  (=> (and ($IsGoodHeap $h@@1) (and (NestedMatch.List.Cons_q d@@7) ($IsAlloc DatatypeTypeType d@@7 (Tclass.NestedMatch.List NestedMatch.List$T@@7) $h@@1))) ($IsAlloc DatatypeTypeType (NestedMatch.List._h2 d@@7) (Tclass.NestedMatch.List NestedMatch.List$T@@7) $h@@1))
 :pattern ( ($IsAlloc DatatypeTypeType (NestedMatch.List._h2 d@@7) (Tclass.NestedMatch.List NestedMatch.List$T@@7) $h@@1))
)))
(assert (= |#NestedMatch.List.Nil| (Lit DatatypeTypeType |#NestedMatch.List.Nil|)))
(assert (forall ((|a#17#0#0| T@U) (|a#17#1#0| T@U) ) (! (= (|#NestedMatch.List.Cons| (Lit BoxType |a#17#0#0|) (Lit DatatypeTypeType |a#17#1#0|)) (Lit DatatypeTypeType (|#NestedMatch.List.Cons| |a#17#0#0| |a#17#1#0|)))
 :pattern ( (|#NestedMatch.List.Cons| (Lit BoxType |a#17#0#0|) (Lit DatatypeTypeType |a#17#1#0|)))
)))
(assert (forall ((x@@5 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@5)) (Lit BoxType ($Box T@@5 x@@5)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@5)))
)))
(assert (forall ((NestedMatch.List$T@@8 T@U) (|a#16#0#0@@0| T@U) (|a#16#1#0@@0| T@U) ($h@@2 T@U) ) (!  (=> ($IsGoodHeap $h@@2) (= ($IsAlloc DatatypeTypeType (|#NestedMatch.List.Cons| |a#16#0#0@@0| |a#16#1#0@@0|) (Tclass.NestedMatch.List NestedMatch.List$T@@8) $h@@2)  (and ($IsAllocBox |a#16#0#0@@0| NestedMatch.List$T@@8 $h@@2) ($IsAlloc DatatypeTypeType |a#16#1#0@@0| (Tclass.NestedMatch.List NestedMatch.List$T@@8) $h@@2))))
 :pattern ( ($IsAlloc DatatypeTypeType (|#NestedMatch.List.Cons| |a#16#0#0@@0| |a#16#1#0@@0|) (Tclass.NestedMatch.List NestedMatch.List$T@@8) $h@@2))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |_mcc#1#0_0@0| () T@U)
(declare-fun |_mcc#2#0_0_0@0| () T@U)
(declare-fun |_mcc#3#0_0_0@0| () T@U)
(declare-fun NestedMatch._default.Last$T () T@U)
(declare-fun $Heap () T@U)
(declare-fun |zs#0_0_0@0| () T@U)
(declare-fun |let#0_0_0#0#0| () T@U)
(declare-fun |z#0_0_0@0| () T@U)
(declare-fun |let#0_0_1#0#0| () T@U)
(declare-fun |y#0_0_0@0| () T@U)
(declare-fun |let#0_0_2#0#0| () T@U)
(declare-fun |_mcc#0#0_0@0| () T@U)
(declare-fun |xs##0_0_0@0| () T@U)
(declare-fun |xs#0| () T@U)
(declare-fun |call3formal@x#0| () T@U)
(declare-fun call0formal@NestedMatch._default.Last$T () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |call3formal@x#0@0| () T@U)
(declare-fun null () T@U)
(declare-fun |y#0_1_0@0| () T@U)
(declare-fun |let#0_1_0#0#0| () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun |defass#x#0| () Bool)
(declare-fun |x#0| () T@U)
(declare-fun $FunctionContextHeight () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 15) (let ((anon7_correct  (=> (= (ControlFlow 0 7) (- 0 6)) true)))
(let ((anon10_Then_correct  (=> (= |_mcc#1#0_0@0| (|#NestedMatch.List.Cons| |_mcc#2#0_0_0@0| |_mcc#3#0_0_0@0|)) (=> (and (and ($IsBox |_mcc#2#0_0_0@0| NestedMatch._default.Last$T) ($IsAllocBox |_mcc#2#0_0_0@0| NestedMatch._default.Last$T $Heap)) (and ($Is DatatypeTypeType |_mcc#3#0_0_0@0| (Tclass.NestedMatch.List NestedMatch._default.Last$T)) ($IsAlloc DatatypeTypeType |_mcc#3#0_0_0@0| (Tclass.NestedMatch.List NestedMatch._default.Last$T) $Heap))) (=> (and (and (and (and (and ($Is DatatypeTypeType |zs#0_0_0@0| (Tclass.NestedMatch.List NestedMatch._default.Last$T)) ($IsAlloc DatatypeTypeType |zs#0_0_0@0| (Tclass.NestedMatch.List NestedMatch._default.Last$T) $Heap)) (= |let#0_0_0#0#0| |_mcc#3#0_0_0@0|)) (and ($Is DatatypeTypeType |let#0_0_0#0#0| (Tclass.NestedMatch.List NestedMatch._default.Last$T)) (= |zs#0_0_0@0| |let#0_0_0#0#0|))) (and (and ($IsBox |z#0_0_0@0| NestedMatch._default.Last$T) ($IsAllocBox |z#0_0_0@0| NestedMatch._default.Last$T $Heap)) (= |let#0_0_1#0#0| |_mcc#2#0_0_0@0|))) (and (and (and ($IsBox |let#0_0_1#0#0| NestedMatch._default.Last$T) (= |z#0_0_0@0| |let#0_0_1#0#0|)) (and ($IsBox |y#0_0_0@0| NestedMatch._default.Last$T) ($IsAllocBox |y#0_0_0@0| NestedMatch._default.Last$T $Heap))) (and (and (= |let#0_0_2#0#0| |_mcc#0#0_0@0|) ($IsBox |let#0_0_2#0#0| NestedMatch._default.Last$T)) (and (= |y#0_0_0@0| |let#0_0_2#0#0|) (= |xs##0_0_0@0| (|#NestedMatch.List.Cons| |z#0_0_0@0| |zs#0_0_0@0|)))))) (and (=> (= (ControlFlow 0 9) (- 0 11)) (< (DtRank |xs##0_0_0@0|) (DtRank |xs#0|))) (=> (< (DtRank |xs##0_0_0@0|) (DtRank |xs#0|)) (=> (and ($IsBox |call3formal@x#0| call0formal@NestedMatch._default.Last$T) ($IsAllocBox |call3formal@x#0| call0formal@NestedMatch._default.Last$T $Heap)) (and (=> (= (ControlFlow 0 9) (- 0 10)) (not (|NestedMatch.List#Equal| |xs##0_0_0@0| |#NestedMatch.List.Nil|))) (=> (not (|NestedMatch.List#Equal| |xs##0_0_0@0| |#NestedMatch.List.Nil|)) (=> (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (=> (and (and (and ($IsBox |call3formal@x#0@0| NestedMatch._default.Last$T) ($IsAllocBox |call3formal@x#0@0| NestedMatch._default.Last$T $Heap@0)) (forall (($o@@0 T@U) ) (!  (=> (and (or (not (= $o@@0 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@0) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@0) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@0)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@0))
))) (and ($HeapSucc $Heap $Heap@0) (= (ControlFlow 0 9) 7))) anon7_correct))))))))))))
(let ((anon9_Then_correct  (=> (= |_mcc#1#0_0@0| |#NestedMatch.List.Nil|) (=> (and ($IsBox |y#0_1_0@0| NestedMatch._default.Last$T) ($IsAllocBox |y#0_1_0@0| NestedMatch._default.Last$T $Heap)) (=> (and (and (= |let#0_1_0#0#0| |_mcc#0#0_0@0|) ($IsBox |let#0_1_0#0#0| NestedMatch._default.Last$T)) (and (= |y#0_1_0@0| |let#0_1_0#0#0|) (= (ControlFlow 0 8) 7))) anon7_correct)))))
(let ((anon10_Else_correct true))
(let ((anon9_Else_correct  (=> (or (not (= |_mcc#1#0_0@0| |#NestedMatch.List.Nil|)) (not true)) (and (=> (= (ControlFlow 0 12) 9) anon10_Then_correct) (=> (= (ControlFlow 0 12) 5) anon10_Else_correct)))))
(let ((anon8_Then_correct  (=> (= |xs#0| (|#NestedMatch.List.Cons| |_mcc#0#0_0@0| |_mcc#1#0_0@0|)) (=> (and (and ($IsBox |_mcc#0#0_0@0| NestedMatch._default.Last$T) ($IsAllocBox |_mcc#0#0_0@0| NestedMatch._default.Last$T $Heap)) (and ($Is DatatypeTypeType |_mcc#1#0_0@0| (Tclass.NestedMatch.List NestedMatch._default.Last$T)) ($IsAlloc DatatypeTypeType |_mcc#1#0_0@0| (Tclass.NestedMatch.List NestedMatch._default.Last$T) $Heap))) (and (=> (= (ControlFlow 0 13) 8) anon9_Then_correct) (=> (= (ControlFlow 0 13) 12) anon9_Else_correct))))))
(let ((anon11_Else_correct true))
(let ((anon11_Then_correct  (=> (and (= |xs#0| |#NestedMatch.List.Nil|) (= (ControlFlow 0 2) (- 0 1))) false)))
(let ((anon8_Else_correct  (=> (or (not (= |xs#0| (|#NestedMatch.List.Cons| |_mcc#0#0_0@0| |_mcc#1#0_0@0|))) (not true)) (and (=> (= (ControlFlow 0 4) 2) anon11_Then_correct) (=> (= (ControlFlow 0 4) 3) anon11_Else_correct)))))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (and (=> (= (ControlFlow 0 14) 13) anon8_Then_correct) (=> (= (ControlFlow 0 14) 4) anon8_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (=> (and (and (and ($Is DatatypeTypeType |xs#0| (Tclass.NestedMatch.List NestedMatch._default.Last$T)) ($IsAlloc DatatypeTypeType |xs#0| (Tclass.NestedMatch.List NestedMatch._default.Last$T) $Heap)) (|$IsA#NestedMatch.List| |xs#0|)) (and (and (=> |defass#x#0| (and ($IsBox |x#0| NestedMatch._default.Last$T) ($IsAllocBox |x#0| NestedMatch._default.Last$T $Heap))) (= 1 $FunctionContextHeight)) (and (not (|NestedMatch.List#Equal| |xs#0| |#NestedMatch.List.Nil|)) (= (ControlFlow 0 15) 14)))) anon0_correct))))
PreconditionGeneratedEntry_correct))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
