(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (Bool) T@U)
(declare-fun $generated@@7 (T@U) Bool)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun $generated@@9 (T@U) Int)
(declare-fun $generated@@10 (Real) T@U)
(declare-fun $generated@@11 (T@U) Real)
(declare-fun $generated@@18 () Int)
(declare-fun $generated@@19 (T@U Int) Int)
(declare-fun $generated@@20 (T@U) T@U)
(declare-fun $generated@@21 (Int) Bool)
(declare-fun $generated@@22 (Int) Int)
(declare-fun $generated@@23 (Int) Bool)
(declare-fun $generated@@24 (T@U Int) Int)
(declare-fun $generated@@29 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@30 () T@U)
(declare-fun $generated@@38 (T@T T@U) T@U)
(declare-fun $generated@@41 (T@T T@U) T@U)
(declare-fun $generated@@42 (T@T T@U) T@U)
(declare-fun $generated@@45 (T@T T@U T@U) Bool)
(declare-fun $generated@@57 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@58 () T@T)
(declare-fun $generated@@59 () T@T)
(declare-fun $generated@@60 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@61 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@62 () T@T)
(declare-fun $generated@@63 (T@T T@T) T@T)
(declare-fun $generated@@64 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@65 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@66 (T@T) T@T)
(declare-fun $generated@@67 (T@T) T@T)
(declare-fun $generated@@116 (T@U) T@U)
(declare-fun $generated@@117 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@4) 1)) (= ($generated@@2 $generated@@5) 2)) (forall (($generated@@12 Bool) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Int) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Real) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))))
(assert (distinct $generated $generated@@0 $generated@@1)
)
(assert  (=> (<= 0 $generated@@18) (forall (($generated@@25 T@U) ($generated@@26 Int) ) (!  (=> (or ($generated@@21 $generated@@26) (and (< 0 $generated@@18) (<= ($generated@@22 0) $generated@@26))) (and ($generated@@23 (+ $generated@@26 1)) (= ($generated@@19 ($generated@@20 $generated@@25) $generated@@26) ($generated@@24 $generated@@25 (+ $generated@@26 1)))))
 :pattern ( ($generated@@19 ($generated@@20 $generated@@25) $generated@@26))
))))
(assert  (=> (<= 0 $generated@@18) (forall (($generated@@27 T@U) ($generated@@28 Int) ) (!  (=> (or ($generated@@23 $generated@@28) (and (< 0 $generated@@18) (<= ($generated@@22 0) $generated@@28))) (and ($generated@@21 (+ $generated@@28 1)) (= ($generated@@24 ($generated@@20 $generated@@27) $generated@@28) ($generated@@19 $generated@@27 (+ $generated@@28 1)))))
 :pattern ( ($generated@@24 ($generated@@20 $generated@@27) $generated@@28))
))))
(assert (forall (($generated@@31 T@U) ($generated@@32 T@U) ) (! ($generated@@29 $generated@@4 $generated@@31 $generated@@30 $generated@@32)
 :pattern ( ($generated@@29 $generated@@4 $generated@@31 $generated@@30 $generated@@32))
)))
(assert  (=> (<= 0 $generated@@18) (forall (($generated@@33 T@U) ($generated@@34 Int) ) (!  (=> (or ($generated@@21 $generated@@34) (and (< 0 $generated@@18) (<= ($generated@@22 0) $generated@@34))) (<= ($generated@@22 0) ($generated@@19 $generated@@33 $generated@@34)))
 :pattern ( ($generated@@19 $generated@@33 $generated@@34))
))))
(assert  (=> (<= 0 $generated@@18) (forall (($generated@@35 T@U) ($generated@@36 Int) ) (!  (=> (or ($generated@@23 $generated@@36) (and (< 0 $generated@@18) (<= ($generated@@22 0) $generated@@36))) (<= ($generated@@22 0) ($generated@@24 $generated@@35 $generated@@36)))
 :pattern ( ($generated@@24 $generated@@35 $generated@@36))
))))
(assert (forall (($generated@@37 Int) ) (! (= ($generated@@22 $generated@@37) $generated@@37)
 :pattern ( ($generated@@22 $generated@@37))
)))
(assert (forall (($generated@@39 T@U) ($generated@@40 T@T) ) (! (= ($generated@@38 $generated@@40 $generated@@39) $generated@@39)
 :pattern ( ($generated@@38 $generated@@40 $generated@@39))
)))
(assert (forall (($generated@@43 T@U) ($generated@@44 T@T) ) (! (= ($generated@@42 $generated@@44 ($generated@@41 $generated@@44 $generated@@43)) $generated@@43)
 :pattern ( ($generated@@41 $generated@@44 $generated@@43))
)))
(assert (forall (($generated@@46 T@U) ) (! (= ($generated@@45 $generated@@4 $generated@@46 $generated@@30) (<= ($generated@@22 0) ($generated@@9 $generated@@46)))
 :pattern ( ($generated@@45 $generated@@4 $generated@@46 $generated@@30))
)))
(assert  (=> (<= 0 $generated@@18) (forall (($generated@@47 T@U) ($generated@@48 Int) ) (!  (=> (or ($generated@@21 ($generated@@22 $generated@@48)) (and (< 0 $generated@@18) (<= ($generated@@22 0) $generated@@48))) (and ($generated@@23 ($generated@@22 (+ $generated@@48 1))) (= ($generated@@19 ($generated@@20 $generated@@47) ($generated@@22 $generated@@48)) ($generated@@22 ($generated@@24 ($generated@@20 $generated@@47) ($generated@@22 (+ $generated@@48 1)))))))
 :weight 3
 :pattern ( ($generated@@19 ($generated@@20 $generated@@47) ($generated@@22 $generated@@48)))
))))
(assert  (=> (<= 0 $generated@@18) (forall (($generated@@49 T@U) ($generated@@50 Int) ) (!  (=> (or ($generated@@23 ($generated@@22 $generated@@50)) (and (< 0 $generated@@18) (<= ($generated@@22 0) $generated@@50))) (and ($generated@@21 ($generated@@22 (+ $generated@@50 1))) (= ($generated@@24 ($generated@@20 $generated@@49) ($generated@@22 $generated@@50)) ($generated@@22 ($generated@@19 ($generated@@20 $generated@@49) ($generated@@22 (+ $generated@@50 1)))))))
 :weight 3
 :pattern ( ($generated@@24 ($generated@@20 $generated@@49) ($generated@@22 $generated@@50)))
))))
(assert (forall (($generated@@51 T@U) ($generated@@52 T@T) ) (! (= ($generated@@41 $generated@@52 ($generated@@42 $generated@@52 $generated@@51)) $generated@@51)
 :pattern ( ($generated@@42 $generated@@52 $generated@@51))
)))
(assert (forall (($generated@@53 T@U) ($generated@@54 Int) ) (! (= ($generated@@19 ($generated@@20 $generated@@53) $generated@@54) ($generated@@19 $generated@@53 $generated@@54))
 :pattern ( ($generated@@19 ($generated@@20 $generated@@53) $generated@@54))
)))
(assert (forall (($generated@@55 T@U) ($generated@@56 Int) ) (! (= ($generated@@24 ($generated@@20 $generated@@55) $generated@@56) ($generated@@24 $generated@@55 $generated@@56))
 :pattern ( ($generated@@24 ($generated@@20 $generated@@55) $generated@@56))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@68 T@T) ($generated@@69 T@T) ($generated@@70 T@T) ($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@U) ) (! (= ($generated@@57 $generated@@68 $generated@@69 $generated@@70 ($generated@@64 $generated@@68 $generated@@69 $generated@@70 $generated@@72 $generated@@73 $generated@@74 $generated@@71) $generated@@73 $generated@@74) $generated@@71)
 :weight 0
)) (and (forall (($generated@@75 T@T) ($generated@@76 T@T) ($generated@@77 T@T) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ) (!  (or (= $generated@@80 $generated@@82) (= ($generated@@57 $generated@@75 $generated@@76 $generated@@77 ($generated@@64 $generated@@75 $generated@@76 $generated@@77 $generated@@79 $generated@@80 $generated@@81 $generated@@78) $generated@@82 $generated@@83) ($generated@@57 $generated@@75 $generated@@76 $generated@@77 $generated@@79 $generated@@82 $generated@@83)))
 :weight 0
)) (forall (($generated@@84 T@T) ($generated@@85 T@T) ($generated@@86 T@T) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ) (!  (or (= $generated@@90 $generated@@92) (= ($generated@@57 $generated@@84 $generated@@85 $generated@@86 ($generated@@64 $generated@@84 $generated@@85 $generated@@86 $generated@@88 $generated@@89 $generated@@90 $generated@@87) $generated@@91 $generated@@92) ($generated@@57 $generated@@84 $generated@@85 $generated@@86 $generated@@88 $generated@@91 $generated@@92)))
 :weight 0
)))) (= ($generated@@2 $generated@@58) 3)) (= ($generated@@2 $generated@@59) 4)) (forall (($generated@@93 T@T) ($generated@@94 T@T) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (! (= ($generated@@61 $generated@@93 $generated@@94 ($generated@@65 $generated@@93 $generated@@94 $generated@@96 $generated@@97 $generated@@95) $generated@@97) $generated@@95)
 :weight 0
))) (forall (($generated@@98 T@T) ($generated@@99 T@T) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ) (!  (or (= $generated@@102 $generated@@103) (= ($generated@@61 $generated@@98 $generated@@99 ($generated@@65 $generated@@98 $generated@@99 $generated@@101 $generated@@102 $generated@@100) $generated@@103) ($generated@@61 $generated@@98 $generated@@99 $generated@@101 $generated@@103)))
 :weight 0
))) (= ($generated@@2 $generated@@62) 5)) (forall (($generated@@104 T@T) ($generated@@105 T@T) ) (= ($generated@@2 ($generated@@63 $generated@@104 $generated@@105)) 6))) (forall (($generated@@106 T@T) ($generated@@107 T@T) ) (! (= ($generated@@66 ($generated@@63 $generated@@106 $generated@@107)) $generated@@106)
 :pattern ( ($generated@@63 $generated@@106 $generated@@107))
))) (forall (($generated@@108 T@T) ($generated@@109 T@T) ) (! (= ($generated@@67 ($generated@@63 $generated@@108 $generated@@109)) $generated@@109)
 :pattern ( ($generated@@63 $generated@@108 $generated@@109))
))))
(assert (forall (($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 Bool) ($generated@@114 T@U) ($generated@@115 T@U) ) (! (= ($generated@@7 ($generated@@57 $generated@@58 $generated@@59 $generated@@3 ($generated@@60 $generated@@110 $generated@@111 $generated@@112 $generated@@113) $generated@@114 $generated@@115))  (=> (and (or (not (= $generated@@114 $generated@@110)) (not true)) ($generated@@7 ($generated@@41 $generated@@3 ($generated@@61 $generated@@59 $generated@@62 ($generated@@61 $generated@@58 ($generated@@63 $generated@@59 $generated@@62) $generated@@111 $generated@@114) $generated@@112)))) $generated@@113))
 :pattern ( ($generated@@57 $generated@@58 $generated@@59 $generated@@3 ($generated@@60 $generated@@110 $generated@@111 $generated@@112 $generated@@113) $generated@@114 $generated@@115))
)))
(assert (= ($generated@@116 $generated@@30) $generated@@0))
(assert (= ($generated@@117 $generated@@30) $generated@@1))
(assert (forall (($generated@@118 Int) ) (! (= ($generated@@42 $generated@@4 ($generated@@8 ($generated@@22 $generated@@118))) ($generated@@38 $generated@@62 ($generated@@42 $generated@@4 ($generated@@8 $generated@@118))))
 :pattern ( ($generated@@42 $generated@@4 ($generated@@8 ($generated@@22 $generated@@118))))
)))
(assert (forall (($generated@@119 T@U) ($generated@@120 T@T) ) (! (= ($generated@@42 $generated@@120 ($generated@@38 $generated@@120 $generated@@119)) ($generated@@38 $generated@@62 ($generated@@42 $generated@@120 $generated@@119)))
 :pattern ( ($generated@@42 $generated@@120 ($generated@@38 $generated@@120 $generated@@119)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@121 () Int)
(declare-fun $generated@@122 () Int)
(declare-fun $generated@@123 () T@U)
(declare-fun $generated@@124 () T@U)
(declare-fun $generated@@125 () T@U)
(declare-fun $generated@@126 (T@U) Bool)
(declare-fun $generated@@127 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 7) (let (($generated@@128  (and (=> (= (ControlFlow 0 3) (- 0 5)) ($generated@@45 $generated@@4 ($generated@@8 (+ $generated@@121 1)) $generated@@30)) (=> ($generated@@45 $generated@@4 ($generated@@8 (+ $generated@@121 1)) $generated@@30) (=> (and (= $generated@@122 (+ $generated@@121 1)) ($generated@@29 $generated@@4 ($generated@@8 $generated@@122) $generated@@30 $generated@@123)) (and (=> (= (ControlFlow 0 3) (- 0 4)) (or (<= 0 $generated@@121) (= $generated@@122 $generated@@121))) (=> (or (<= 0 $generated@@121) (= $generated@@122 $generated@@121)) (=> (= (ControlFlow 0 3) (- 0 2)) (< $generated@@122 $generated@@121)))))))))
(let (($generated@@129 true))
(let (($generated@@130  (=> (= $generated@@124 ($generated@@60 $generated@@125 $generated@@123 $generated false)) (and (=> (= (ControlFlow 0 6) 1) $generated@@129) (=> (= (ControlFlow 0 6) 3) $generated@@128)))))
(let (($generated@@131  (=> (and (and (and ($generated@@126 $generated@@123) ($generated@@127 $generated@@123)) (<= ($generated@@22 0) $generated@@121)) (and (= 0 $generated@@18) (= (ControlFlow 0 7) 6))) $generated@@130)))
$generated@@131)))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 3) (- 2))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
