(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 (T@T) Int)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 (Bool) T@U)
(declare-fun $generated@@11 (T@U) Bool)
(declare-fun $generated@@12 (Int) T@U)
(declare-fun $generated@@13 (T@U) Int)
(declare-fun $generated@@14 (Real) T@U)
(declare-fun $generated@@15 (T@U) Real)
(declare-fun $generated@@22 (T@U) T@U)
(declare-fun $generated@@23 (T@U) T@U)
(declare-fun $generated@@24 () T@U)
(declare-fun $generated@@25 (T@T T@U T@U) Bool)
(declare-fun $generated@@26 () T@T)
(declare-fun $generated@@27 () T@U)
(declare-fun $generated@@28 (T@U T@U) Bool)
(declare-fun $generated@@29 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@30 () T@T)
(declare-fun $generated@@31 () T@T)
(declare-fun $generated@@32 () T@T)
(declare-fun $generated@@33 (T@T T@T) T@T)
(declare-fun $generated@@34 (T@T T@U) T@U)
(declare-fun $generated@@35 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@36 (T@T) T@T)
(declare-fun $generated@@37 (T@T) T@T)
(declare-fun $generated@@58 (Int) Int)
(declare-fun $generated@@60 (T@T T@U) T@U)
(declare-fun $generated@@63 (T@U) Bool)
(declare-fun $generated@@65 (T@U) Bool)
(declare-fun $generated@@67 (T@T T@U) T@U)
(declare-fun $generated@@70 (Int T@U) T@U)
(declare-fun $generated@@75 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@81 (T@U) Bool)
(declare-fun $generated@@89 (T@U) Int)
(declare-fun $generated@@92 (T@U) T@U)
(declare-fun $generated@@97 (T@U) Int)
(declare-fun $generated@@100 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@101 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@102 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@134 (T@U) Bool)
(declare-fun $generated@@139 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@6 $generated@@7) 0) (= ($generated@@6 $generated@@8) 1)) (= ($generated@@6 $generated@@9) 2)) (forall (($generated@@16 Bool) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Int) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Real) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5)
)
(assert (= ($generated@@22 $generated) $generated@@0))
(assert (= ($generated@@23 $generated@@24) $generated@@3))
(assert (= ($generated@@6 $generated@@26) 3))
(assert ($generated@@25 $generated@@26 $generated@@24 $generated@@27))
(assert  (and (and (and (and (and (and (and (forall (($generated@@38 T@T) ($generated@@39 T@T) ($generated@@40 T@U) ($generated@@41 T@U) ($generated@@42 T@U) ) (! (= ($generated@@29 $generated@@38 $generated@@39 ($generated@@35 $generated@@38 $generated@@39 $generated@@41 $generated@@42 $generated@@40) $generated@@42) $generated@@40)
 :weight 0
)) (forall (($generated@@43 T@T) ($generated@@44 T@T) ($generated@@45 T@U) ($generated@@46 T@U) ($generated@@47 T@U) ($generated@@48 T@U) ) (!  (or (= $generated@@47 $generated@@48) (= ($generated@@29 $generated@@43 $generated@@44 ($generated@@35 $generated@@43 $generated@@44 $generated@@46 $generated@@47 $generated@@45) $generated@@48) ($generated@@29 $generated@@43 $generated@@44 $generated@@46 $generated@@48)))
 :weight 0
))) (= ($generated@@6 $generated@@30) 4)) (= ($generated@@6 $generated@@31) 5)) (= ($generated@@6 $generated@@32) 6)) (forall (($generated@@49 T@T) ($generated@@50 T@T) ) (= ($generated@@6 ($generated@@33 $generated@@49 $generated@@50)) 7))) (forall (($generated@@51 T@T) ($generated@@52 T@T) ) (! (= ($generated@@36 ($generated@@33 $generated@@51 $generated@@52)) $generated@@51)
 :pattern ( ($generated@@33 $generated@@51 $generated@@52))
))) (forall (($generated@@53 T@T) ($generated@@54 T@T) ) (! (= ($generated@@37 ($generated@@33 $generated@@53 $generated@@54)) $generated@@54)
 :pattern ( ($generated@@33 $generated@@53 $generated@@54))
))))
(assert (forall (($generated@@55 T@U) ($generated@@56 T@U) ) (!  (=> ($generated@@28 $generated@@55 $generated@@56) (forall (($generated@@57 T@U) ) (!  (=> ($generated@@11 ($generated@@34 $generated@@7 ($generated@@29 $generated@@30 $generated@@31 ($generated@@29 $generated@@32 ($generated@@33 $generated@@30 $generated@@31) $generated@@55 $generated@@57) $generated@@1))) ($generated@@11 ($generated@@34 $generated@@7 ($generated@@29 $generated@@30 $generated@@31 ($generated@@29 $generated@@32 ($generated@@33 $generated@@30 $generated@@31) $generated@@56 $generated@@57) $generated@@1))))
 :pattern ( ($generated@@29 $generated@@30 $generated@@31 ($generated@@29 $generated@@32 ($generated@@33 $generated@@30 $generated@@31) $generated@@56 $generated@@57) $generated@@1))
)))
 :pattern ( ($generated@@28 $generated@@55 $generated@@56))
)))
(assert (forall (($generated@@59 Int) ) (! (= ($generated@@58 $generated@@59) $generated@@59)
 :pattern ( ($generated@@58 $generated@@59))
)))
(assert (forall (($generated@@61 T@U) ($generated@@62 T@T) ) (! (= ($generated@@60 $generated@@62 $generated@@61) $generated@@61)
 :pattern ( ($generated@@60 $generated@@62 $generated@@61))
)))
(assert (forall (($generated@@64 T@U) ) (! (= ($generated@@63 $generated@@64) (= ($generated@@23 $generated@@64) $generated@@3))
 :pattern ( ($generated@@63 $generated@@64))
)))
(assert (forall (($generated@@66 T@U) ) (! (= ($generated@@65 $generated@@66) (= ($generated@@23 $generated@@66) $generated@@4))
 :pattern ( ($generated@@65 $generated@@66))
)))
(assert (forall (($generated@@68 T@U) ($generated@@69 T@T) ) (! (= ($generated@@67 $generated@@69 ($generated@@34 $generated@@69 $generated@@68)) $generated@@68)
 :pattern ( ($generated@@34 $generated@@69 $generated@@68))
)))
(assert (forall (($generated@@71 T@U) ) (!  (=> ($generated@@65 $generated@@71) (exists (($generated@@72 Int) ($generated@@73 T@U) ) (= $generated@@71 ($generated@@70 $generated@@72 $generated@@73))))
 :pattern ( ($generated@@65 $generated@@71))
)))
(assert (forall (($generated@@74 T@U) ) (!  (=> ($generated@@63 $generated@@74) (= $generated@@74 $generated@@24))
 :pattern ( ($generated@@63 $generated@@74))
)))
(assert (forall (($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@T) ) (!  (=> ($generated@@28 $generated@@76 $generated@@77) (=> ($generated@@75 $generated@@80 $generated@@78 $generated@@79 $generated@@76) ($generated@@75 $generated@@80 $generated@@78 $generated@@79 $generated@@77)))
 :pattern ( ($generated@@28 $generated@@76 $generated@@77) ($generated@@75 $generated@@80 $generated@@78 $generated@@79 $generated@@76))
)))
(assert (forall (($generated@@82 T@U) ) (!  (=> ($generated@@81 $generated@@82) (or ($generated@@63 $generated@@82) ($generated@@65 $generated@@82)))
 :pattern ( ($generated@@81 $generated@@82))
)))
(assert (forall (($generated@@83 T@U) ) (!  (=> ($generated@@25 $generated@@26 $generated@@83 $generated@@27) (or ($generated@@63 $generated@@83) ($generated@@65 $generated@@83)))
 :pattern ( ($generated@@65 $generated@@83) ($generated@@25 $generated@@26 $generated@@83 $generated@@27))
 :pattern ( ($generated@@63 $generated@@83) ($generated@@25 $generated@@26 $generated@@83 $generated@@27))
)))
(assert (forall (($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (!  (=> (or (not (= $generated@@84 $generated@@86)) (not true)) (=> (and ($generated@@28 $generated@@84 $generated@@85) ($generated@@28 $generated@@85 $generated@@86)) ($generated@@28 $generated@@84 $generated@@86)))
 :pattern ( ($generated@@28 $generated@@84 $generated@@85) ($generated@@28 $generated@@85 $generated@@86))
)))
(assert (forall (($generated@@87 Int) ($generated@@88 T@U) ) (! (= ($generated@@23 ($generated@@70 $generated@@87 $generated@@88)) $generated@@4)
 :pattern ( ($generated@@70 $generated@@87 $generated@@88))
)))
(assert (forall (($generated@@90 Int) ($generated@@91 T@U) ) (! (= ($generated@@89 ($generated@@70 $generated@@90 $generated@@91)) $generated@@90)
 :pattern ( ($generated@@70 $generated@@90 $generated@@91))
)))
(assert (forall (($generated@@93 Int) ($generated@@94 T@U) ) (! (= ($generated@@92 ($generated@@70 $generated@@93 $generated@@94)) $generated@@94)
 :pattern ( ($generated@@70 $generated@@93 $generated@@94))
)))
(assert (forall (($generated@@95 T@U) ($generated@@96 T@T) ) (! (= ($generated@@34 $generated@@96 ($generated@@67 $generated@@96 $generated@@95)) $generated@@95)
 :pattern ( ($generated@@67 $generated@@96 $generated@@95))
)))
(assert (forall (($generated@@98 Int) ($generated@@99 T@U) ) (! (< ($generated@@97 $generated@@99) ($generated@@97 ($generated@@70 $generated@@98 $generated@@99)))
 :pattern ( ($generated@@70 $generated@@98 $generated@@99))
)))
(assert  (and (forall (($generated@@103 T@T) ($generated@@104 T@T) ($generated@@105 T@T) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ) (! (= ($generated@@100 $generated@@103 $generated@@104 $generated@@105 ($generated@@102 $generated@@103 $generated@@104 $generated@@105 $generated@@107 $generated@@108 $generated@@109 $generated@@106) $generated@@108 $generated@@109) $generated@@106)
 :weight 0
)) (and (forall (($generated@@110 T@T) ($generated@@111 T@T) ($generated@@112 T@T) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ) (!  (or (= $generated@@115 $generated@@117) (= ($generated@@100 $generated@@110 $generated@@111 $generated@@112 ($generated@@102 $generated@@110 $generated@@111 $generated@@112 $generated@@114 $generated@@115 $generated@@116 $generated@@113) $generated@@117 $generated@@118) ($generated@@100 $generated@@110 $generated@@111 $generated@@112 $generated@@114 $generated@@117 $generated@@118)))
 :weight 0
)) (forall (($generated@@119 T@T) ($generated@@120 T@T) ($generated@@121 T@T) ($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 T@U) ) (!  (or (= $generated@@125 $generated@@127) (= ($generated@@100 $generated@@119 $generated@@120 $generated@@121 ($generated@@102 $generated@@119 $generated@@120 $generated@@121 $generated@@123 $generated@@124 $generated@@125 $generated@@122) $generated@@126 $generated@@127) ($generated@@100 $generated@@119 $generated@@120 $generated@@121 $generated@@123 $generated@@126 $generated@@127)))
 :weight 0
)))))
(assert (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 Bool) ($generated@@132 T@U) ($generated@@133 T@U) ) (! (= ($generated@@11 ($generated@@100 $generated@@32 $generated@@30 $generated@@7 ($generated@@101 $generated@@128 $generated@@129 $generated@@130 $generated@@131) $generated@@132 $generated@@133))  (=> (and (or (not (= $generated@@132 $generated@@128)) (not true)) ($generated@@11 ($generated@@34 $generated@@7 ($generated@@29 $generated@@30 $generated@@31 ($generated@@29 $generated@@32 ($generated@@33 $generated@@30 $generated@@31) $generated@@129 $generated@@132) $generated@@130)))) $generated@@131))
 :pattern ( ($generated@@100 $generated@@32 $generated@@30 $generated@@7 ($generated@@101 $generated@@128 $generated@@129 $generated@@130 $generated@@131) $generated@@132 $generated@@133))
)))
(assert (forall (($generated@@135 T@U) ($generated@@136 T@U) ) (!  (=> (and ($generated@@134 $generated@@136) (and ($generated@@65 $generated@@135) ($generated@@75 $generated@@26 $generated@@135 $generated@@27 $generated@@136))) ($generated@@75 $generated@@8 ($generated@@12 ($generated@@89 $generated@@135)) $generated $generated@@136))
 :pattern ( ($generated@@75 $generated@@8 ($generated@@12 ($generated@@89 $generated@@135)) $generated $generated@@136))
)))
(assert (forall (($generated@@137 T@U) ($generated@@138 T@U) ) (!  (=> (and ($generated@@134 $generated@@138) ($generated@@25 $generated@@26 $generated@@137 $generated@@27)) ($generated@@75 $generated@@26 $generated@@137 $generated@@27 $generated@@138))
 :pattern ( ($generated@@75 $generated@@26 $generated@@137 $generated@@27 $generated@@138))
)))
(assert (= ($generated@@22 $generated@@27) $generated@@2))
(assert (= ($generated@@139 $generated@@27) $generated@@5))
(assert (= $generated@@24 ($generated@@60 $generated@@26 $generated@@24)))
(assert (forall (($generated@@140 T@U) ($generated@@141 T@U) ) (!  (=> (and ($generated@@134 $generated@@141) (and ($generated@@65 $generated@@140) ($generated@@75 $generated@@26 $generated@@140 $generated@@27 $generated@@141))) ($generated@@75 $generated@@26 ($generated@@92 $generated@@140) $generated@@27 $generated@@141))
 :pattern ( ($generated@@75 $generated@@26 ($generated@@92 $generated@@140) $generated@@27 $generated@@141))
)))
(assert (forall (($generated@@142 Int) ($generated@@143 T@U) ) (! (= ($generated@@70 ($generated@@58 $generated@@142) ($generated@@60 $generated@@26 $generated@@143)) ($generated@@60 $generated@@26 ($generated@@70 $generated@@142 $generated@@143)))
 :pattern ( ($generated@@70 ($generated@@58 $generated@@142) ($generated@@60 $generated@@26 $generated@@143)))
)))
(assert (forall (($generated@@144 Int) ) (! (= ($generated@@67 $generated@@8 ($generated@@12 ($generated@@58 $generated@@144))) ($generated@@60 $generated@@31 ($generated@@67 $generated@@8 ($generated@@12 $generated@@144))))
 :pattern ( ($generated@@67 $generated@@8 ($generated@@12 ($generated@@58 $generated@@144))))
)))
(assert (forall (($generated@@145 T@U) ($generated@@146 T@T) ) (! (= ($generated@@67 $generated@@146 ($generated@@60 $generated@@146 $generated@@145)) ($generated@@60 $generated@@31 ($generated@@67 $generated@@146 $generated@@145)))
 :pattern ( ($generated@@67 $generated@@146 ($generated@@60 $generated@@146 $generated@@145)))
)))
(assert (forall (($generated@@147 Int) ($generated@@148 T@U) ) (! (= ($generated@@25 $generated@@26 ($generated@@70 $generated@@147 $generated@@148) $generated@@27)  (and ($generated@@25 $generated@@8 ($generated@@12 $generated@@147) $generated) ($generated@@25 $generated@@26 $generated@@148 $generated@@27)))
 :pattern ( ($generated@@25 $generated@@26 ($generated@@70 $generated@@147 $generated@@148) $generated@@27))
)))
(assert (forall (($generated@@149 T@U) ($generated@@150 T@U) ) (! ($generated@@75 $generated@@8 $generated@@150 $generated $generated@@149)
 :pattern ( ($generated@@75 $generated@@8 $generated@@150 $generated $generated@@149))
)))
(assert (forall (($generated@@151 T@U) ) (! ($generated@@25 $generated@@8 $generated@@151 $generated)
 :pattern ( ($generated@@25 $generated@@8 $generated@@151 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@152 () T@U)
(declare-fun $generated@@153 () T@U)
(declare-fun $generated@@154 () T@U)
(declare-fun $generated@@155 () T@U)
(declare-fun $generated@@156 (T@U) Bool)
(declare-fun $generated@@157 () T@U)
(declare-fun $generated@@158 () T@U)
(declare-fun $generated@@159 () T@U)
(declare-fun $generated@@160 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@161  (=> (= $generated@@152 ($generated@@101 $generated@@153 $generated@@154 $generated@@1 false)) (=> (and (and (and ($generated@@134 $generated@@155) ($generated@@156 $generated@@155)) (and (forall (($generated@@162 T@U) ) (!  (=> (and (or (not (= $generated@@162 $generated@@153)) (not true)) ($generated@@11 ($generated@@34 $generated@@7 ($generated@@29 $generated@@30 $generated@@31 ($generated@@29 $generated@@32 ($generated@@33 $generated@@30 $generated@@31) $generated@@154 $generated@@162) $generated@@1)))) (= ($generated@@29 $generated@@32 ($generated@@33 $generated@@30 $generated@@31) $generated@@155 $generated@@162) ($generated@@29 $generated@@32 ($generated@@33 $generated@@30 $generated@@31) $generated@@154 $generated@@162)))
 :pattern ( ($generated@@29 $generated@@32 ($generated@@33 $generated@@30 $generated@@31) $generated@@155 $generated@@162))
)) ($generated@@28 $generated@@154 $generated@@155))) (and (and ($generated@@25 $generated@@26 $generated@@157 $generated@@27) ($generated@@75 $generated@@26 $generated@@157 $generated@@27 $generated@@155)) (= (ControlFlow 0 2) (- 0 1)))) ($generated@@65 $generated@@157)))))
(let (($generated@@163  (=> (and ($generated@@134 $generated@@154) ($generated@@156 $generated@@154)) (=> (and (and (and ($generated@@25 $generated@@26 $generated@@158 $generated@@27) ($generated@@75 $generated@@26 $generated@@158 $generated@@27 $generated@@154)) ($generated@@81 $generated@@158)) (and (and ($generated@@25 $generated@@26 $generated@@159 $generated@@27) ($generated@@75 $generated@@26 $generated@@159 $generated@@27 $generated@@154)) (and (= 1 $generated@@160) (= (ControlFlow 0 3) 2)))) $generated@@161))))
$generated@@163)))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
