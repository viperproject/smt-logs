(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U T@U) Bool)
(declare-fun $generated@@0 (T@T) Int)
(declare-fun $generated@@1 () T@T)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 (Bool) T@U)
(declare-fun $generated@@5 (T@U) Bool)
(declare-fun $generated@@6 (Int) T@U)
(declare-fun $generated@@7 (T@U) Int)
(declare-fun $generated@@8 (Real) T@U)
(declare-fun $generated@@9 (T@U) Real)
(declare-fun $generated@@19 (T@U T@U) T@U)
(declare-fun $generated@@20 (Int) T@U)
(declare-fun $generated@@21 (T@U) Int)
(declare-fun $generated@@25 (Int) Int)
(declare-fun $generated@@27 (T@T T@U) T@U)
(declare-fun $generated@@30 (T@T T@U) T@U)
(declare-fun $generated@@31 (T@T T@U) T@U)
(declare-fun $generated@@34 (T@U) Bool)
(declare-fun $generated@@45 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@46 () T@T)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@49 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@50 () T@T)
(declare-fun $generated@@51 (T@T T@T) T@T)
(declare-fun $generated@@52 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@53 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@54 (T@T) T@T)
(declare-fun $generated@@55 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@0 $generated@@1) 0) (= ($generated@@0 $generated@@2) 1)) (= ($generated@@0 $generated@@3) 2)) (forall (($generated@@10 Bool) ) (! (= ($generated@@5 ($generated@@4 $generated@@10)) $generated@@10)
 :pattern ( ($generated@@4 $generated@@10))
))) (forall (($generated@@11 T@U) ) (! (= ($generated@@4 ($generated@@5 $generated@@11)) $generated@@11)
 :pattern ( ($generated@@5 $generated@@11))
))) (forall (($generated@@12 Int) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Real) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))))
(assert (forall (($generated@@16 T@U) ($generated@@17 T@U) ($generated@@18 T@U) ) (!  (=> (and ($generated $generated@@16 $generated@@17) ($generated $generated@@17 $generated@@18)) ($generated $generated@@16 $generated@@18))
 :pattern ( ($generated $generated@@16 $generated@@17) ($generated $generated@@17 $generated@@18))
 :pattern ( ($generated $generated@@16 $generated@@17) ($generated $generated@@16 $generated@@18))
)))
(assert (forall (($generated@@22 T@U) ($generated@@23 Int) ($generated@@24 Int) ) (!  (=> (and (and (<= 0 $generated@@23) (<= 0 $generated@@24)) (<= (+ $generated@@23 $generated@@24) ($generated@@21 $generated@@22))) (= ($generated@@19 ($generated@@19 $generated@@22 ($generated@@20 $generated@@23)) ($generated@@20 $generated@@24)) ($generated@@19 $generated@@22 ($generated@@20 (+ $generated@@23 $generated@@24)))))
 :pattern ( ($generated@@19 ($generated@@19 $generated@@22 ($generated@@20 $generated@@23)) ($generated@@20 $generated@@24)))
)))
(assert (forall (($generated@@26 Int) ) (! (= ($generated@@25 $generated@@26) $generated@@26)
 :pattern ( ($generated@@25 $generated@@26))
)))
(assert (forall (($generated@@28 T@U) ($generated@@29 T@T) ) (! (= ($generated@@27 $generated@@29 $generated@@28) $generated@@28)
 :pattern ( ($generated@@27 $generated@@29 $generated@@28))
)))
(assert (forall (($generated@@32 T@U) ($generated@@33 T@T) ) (! (= ($generated@@31 $generated@@33 ($generated@@30 $generated@@33 $generated@@32)) $generated@@32)
 :pattern ( ($generated@@30 $generated@@33 $generated@@32))
)))
(assert (forall (($generated@@35 T@U) ($generated@@36 T@U) ) (!  (=> (and ($generated@@34 $generated@@36) (<= ($generated@@21 $generated@@36) ($generated@@21 $generated@@35))) (and (= ($generated@@34 ($generated@@19 $generated@@35 $generated@@36)) ($generated@@34 $generated@@35)) (= ($generated@@21 ($generated@@19 $generated@@35 $generated@@36)) (- ($generated@@21 $generated@@35) ($generated@@21 $generated@@36)))))
 :pattern ( ($generated@@19 $generated@@35 $generated@@36))
)))
(assert (forall (($generated@@37 Int) ) (!  (=> (<= 0 $generated@@37) (and ($generated@@34 ($generated@@20 $generated@@37)) (= ($generated@@21 ($generated@@20 $generated@@37)) $generated@@37)))
 :pattern ( ($generated@@20 $generated@@37))
)))
(assert (forall (($generated@@38 T@U) ($generated@@39 T@U) ) (!  (or (or ($generated $generated@@38 $generated@@39) (= $generated@@38 $generated@@39)) ($generated $generated@@39 $generated@@38))
 :pattern ( ($generated $generated@@38 $generated@@39) ($generated $generated@@39 $generated@@38))
)))
(assert (forall (($generated@@40 T@U) ) (! (<= 0 ($generated@@21 $generated@@40))
 :pattern ( ($generated@@21 $generated@@40))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@T) ) (! (= ($generated@@30 $generated@@42 ($generated@@31 $generated@@42 $generated@@41)) $generated@@41)
 :pattern ( ($generated@@31 $generated@@42 $generated@@41))
)))
(assert (forall (($generated@@43 T@U) ($generated@@44 T@U) ) (!  (and (and (and (=> ($generated $generated@@43 $generated@@44) (or (not (= $generated@@43 $generated@@44)) (not true))) (=> (and ($generated@@34 $generated@@43) (not ($generated@@34 $generated@@44))) ($generated $generated@@43 $generated@@44))) (=> (and ($generated@@34 $generated@@43) ($generated@@34 $generated@@44)) (= ($generated $generated@@43 $generated@@44) (< ($generated@@21 $generated@@43) ($generated@@21 $generated@@44))))) (=> (and ($generated $generated@@43 $generated@@44) ($generated@@34 $generated@@44)) ($generated@@34 $generated@@43)))
 :pattern ( ($generated $generated@@43 $generated@@44))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@56 T@T) ($generated@@57 T@T) ($generated@@58 T@T) ($generated@@59 T@U) ($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@U) ) (! (= ($generated@@45 $generated@@56 $generated@@57 $generated@@58 ($generated@@52 $generated@@56 $generated@@57 $generated@@58 $generated@@60 $generated@@61 $generated@@62 $generated@@59) $generated@@61 $generated@@62) $generated@@59)
 :weight 0
)) (and (forall (($generated@@63 T@T) ($generated@@64 T@T) ($generated@@65 T@T) ($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@U) ) (!  (or (= $generated@@68 $generated@@70) (= ($generated@@45 $generated@@63 $generated@@64 $generated@@65 ($generated@@52 $generated@@63 $generated@@64 $generated@@65 $generated@@67 $generated@@68 $generated@@69 $generated@@66) $generated@@70 $generated@@71) ($generated@@45 $generated@@63 $generated@@64 $generated@@65 $generated@@67 $generated@@70 $generated@@71)))
 :weight 0
)) (forall (($generated@@72 T@T) ($generated@@73 T@T) ($generated@@74 T@T) ($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ) (!  (or (= $generated@@78 $generated@@80) (= ($generated@@45 $generated@@72 $generated@@73 $generated@@74 ($generated@@52 $generated@@72 $generated@@73 $generated@@74 $generated@@76 $generated@@77 $generated@@78 $generated@@75) $generated@@79 $generated@@80) ($generated@@45 $generated@@72 $generated@@73 $generated@@74 $generated@@76 $generated@@79 $generated@@80)))
 :weight 0
)))) (= ($generated@@0 $generated@@46) 3)) (= ($generated@@0 $generated@@47) 4)) (forall (($generated@@81 T@T) ($generated@@82 T@T) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ) (! (= ($generated@@49 $generated@@81 $generated@@82 ($generated@@53 $generated@@81 $generated@@82 $generated@@84 $generated@@85 $generated@@83) $generated@@85) $generated@@83)
 :weight 0
))) (forall (($generated@@86 T@T) ($generated@@87 T@T) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ) (!  (or (= $generated@@90 $generated@@91) (= ($generated@@49 $generated@@86 $generated@@87 ($generated@@53 $generated@@86 $generated@@87 $generated@@89 $generated@@90 $generated@@88) $generated@@91) ($generated@@49 $generated@@86 $generated@@87 $generated@@89 $generated@@91)))
 :weight 0
))) (= ($generated@@0 $generated@@50) 5)) (forall (($generated@@92 T@T) ($generated@@93 T@T) ) (= ($generated@@0 ($generated@@51 $generated@@92 $generated@@93)) 6))) (forall (($generated@@94 T@T) ($generated@@95 T@T) ) (! (= ($generated@@54 ($generated@@51 $generated@@94 $generated@@95)) $generated@@94)
 :pattern ( ($generated@@51 $generated@@94 $generated@@95))
))) (forall (($generated@@96 T@T) ($generated@@97 T@T) ) (! (= ($generated@@55 ($generated@@51 $generated@@96 $generated@@97)) $generated@@97)
 :pattern ( ($generated@@51 $generated@@96 $generated@@97))
))))
(assert (forall (($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 Bool) ($generated@@102 T@U) ($generated@@103 T@U) ) (! (= ($generated@@5 ($generated@@45 $generated@@46 $generated@@47 $generated@@1 ($generated@@48 $generated@@98 $generated@@99 $generated@@100 $generated@@101) $generated@@102 $generated@@103))  (=> (and (or (not (= $generated@@102 $generated@@98)) (not true)) ($generated@@5 ($generated@@30 $generated@@1 ($generated@@49 $generated@@47 $generated@@50 ($generated@@49 $generated@@46 ($generated@@51 $generated@@47 $generated@@50) $generated@@99 $generated@@102) $generated@@100)))) $generated@@101))
 :pattern ( ($generated@@45 $generated@@46 $generated@@47 $generated@@1 ($generated@@48 $generated@@98 $generated@@99 $generated@@100 $generated@@101) $generated@@102 $generated@@103))
)))
(assert (forall (($generated@@104 T@U) ) (!  (=> ($generated@@34 $generated@@104) (= $generated@@104 ($generated@@20 ($generated@@21 $generated@@104))))
 :pattern ( ($generated@@21 $generated@@104))
 :pattern ( ($generated@@34 $generated@@104))
)))
(assert (forall (($generated@@105 T@U) ($generated@@106 T@U) ) (!  (=> (and ($generated@@34 $generated@@106) (<= ($generated@@21 $generated@@106) ($generated@@21 $generated@@105))) (or (and (= $generated@@106 ($generated@@20 0)) (= ($generated@@19 $generated@@105 $generated@@106) $generated@@105)) (and (or (not (= $generated@@106 ($generated@@20 0))) (not true)) ($generated ($generated@@19 $generated@@105 $generated@@106) $generated@@105))))
 :pattern ( ($generated@@19 $generated@@105 $generated@@106))
)))
(assert (forall (($generated@@107 Int) ) (! (= ($generated@@31 $generated@@2 ($generated@@6 ($generated@@25 $generated@@107))) ($generated@@27 $generated@@50 ($generated@@31 $generated@@2 ($generated@@6 $generated@@107))))
 :pattern ( ($generated@@31 $generated@@2 ($generated@@6 ($generated@@25 $generated@@107))))
)))
(assert (forall (($generated@@108 T@U) ($generated@@109 T@T) ) (! (= ($generated@@31 $generated@@109 ($generated@@27 $generated@@109 $generated@@108)) ($generated@@27 $generated@@50 ($generated@@31 $generated@@109 $generated@@108)))
 :pattern ( ($generated@@31 $generated@@109 ($generated@@27 $generated@@109 $generated@@108)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@110 () T@U)
(declare-fun $generated@@111 () T@U)
(declare-fun $generated@@112 () Int)
(declare-fun $generated@@113 () T@U)
(declare-fun $generated@@114 () Int)
(declare-fun $generated@@115 () Int)
(declare-fun $generated@@116 () T@U)
(declare-fun $generated@@117 () T@U)
(declare-fun $generated@@118 () T@U)
(declare-fun $generated@@119 () T@U)
(declare-fun $generated@@120 () T@U)
(declare-fun $generated@@121 (T@U) Bool)
(declare-fun $generated@@122 (T@U) Bool)
(declare-fun $generated@@123 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 43) (let (($generated@@124 true))
(let (($generated@@125  (=> ($generated $generated@@110 $generated@@111) (and (=> (= (ControlFlow 0 7) (- 0 8)) (or (or (<= 0 $generated@@112) ($generated $generated@@110 $generated@@111)) (= $generated@@112 $generated@@112))) (=> (or (or (<= 0 $generated@@112) ($generated $generated@@110 $generated@@111)) (= $generated@@112 $generated@@112)) (=> (= (ControlFlow 0 7) (- 0 6)) (or ($generated $generated@@110 $generated@@111) (and (= $generated@@110 $generated@@111) (< $generated@@112 $generated@@112)))))))))
(let (($generated@@126  (=> (= ($generated@@21 $generated@@111) 0) (and (=> (= (ControlFlow 0 10) 7) $generated@@125) (=> (= (ControlFlow 0 10) 9) $generated@@124)))))
(let (($generated@@127  (=> (or (not (= ($generated@@21 $generated@@111) 0)) (not true)) (and (=> (= (ControlFlow 0 2) (- 0 5)) ($generated@@34 ($generated@@27 $generated@@50 ($generated@@20 1)))) (=> ($generated@@34 ($generated@@27 $generated@@50 ($generated@@20 1))) (and (=> (= (ControlFlow 0 2) (- 0 4)) (<= ($generated@@21 ($generated@@27 $generated@@50 ($generated@@20 1))) ($generated@@21 $generated@@111))) (=> (<= ($generated@@21 ($generated@@27 $generated@@50 ($generated@@20 1))) ($generated@@21 $generated@@111)) (=> (= $generated@@113 ($generated@@19 $generated@@111 ($generated@@20 1))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (or (or (<= 0 $generated@@112) ($generated $generated@@113 $generated@@111)) (= $generated@@112 $generated@@112))) (=> (or (or (<= 0 $generated@@112) ($generated $generated@@113 $generated@@111)) (= $generated@@112 $generated@@112)) (=> (= (ControlFlow 0 2) (- 0 1)) (or ($generated $generated@@113 $generated@@111) (and (= $generated@@113 $generated@@111) (< $generated@@112 $generated@@112))))))))))))))
(let (($generated@@128  (and (=> (= (ControlFlow 0 11) (- 0 12)) (=> ($generated@@34 $generated@@111) (= $generated@@111 ($generated@@20 ($generated@@21 $generated@@111))))) (=> (=> ($generated@@34 $generated@@111) (= $generated@@111 ($generated@@20 ($generated@@21 $generated@@111)))) (and (=> (= (ControlFlow 0 11) 2) $generated@@127) (=> (= (ControlFlow 0 11) 10) $generated@@126))))))
(let (($generated@@129  (=> (and (not ($generated@@34 $generated@@111)) (= (ControlFlow 0 15) 11)) $generated@@128)))
(let (($generated@@130  (=> (and ($generated@@34 $generated@@111) (= $generated@@114 ($generated@@21 $generated@@111))) (and (=> (= (ControlFlow 0 13) (- 0 14)) (<= 0 $generated@@114)) (=> (<= 0 $generated@@114) (=> (= (ControlFlow 0 13) 11) $generated@@128))))))
(let (($generated@@131  (and (=> (= (ControlFlow 0 16) (- 0 19)) (=> ($generated@@34 $generated@@111) (= ($generated@@21 $generated@@111) ($generated@@21 $generated@@111)))) (=> (=> ($generated@@34 $generated@@111) (= ($generated@@21 $generated@@111) ($generated@@21 $generated@@111))) (and (=> (= (ControlFlow 0 16) (- 0 18)) (= (= ($generated@@21 $generated@@111) ($generated@@25 0)) (= ($generated@@21 $generated@@111) 0))) (=> (= (= ($generated@@21 $generated@@111) ($generated@@25 0)) (= ($generated@@21 $generated@@111) 0)) (and (=> (= (ControlFlow 0 16) (- 0 17)) (= (> ($generated@@21 $generated@@111) 0) (< 0 ($generated@@21 $generated@@111)))) (=> (= (> ($generated@@21 $generated@@111) 0) (< 0 ($generated@@21 $generated@@111))) (and (=> (= (ControlFlow 0 16) 13) $generated@@130) (=> (= (ControlFlow 0 16) 15) $generated@@129))))))))))
(let (($generated@@132  (=> (and (not ($generated@@34 $generated@@111)) (= (ControlFlow 0 22) 16)) $generated@@131)))
(let (($generated@@133  (=> ($generated@@34 $generated@@111) (and (=> (= (ControlFlow 0 20) (- 0 21)) ($generated@@34 $generated@@111)) (=> ($generated@@34 $generated@@111) (=> (= (ControlFlow 0 20) 16) $generated@@131))))))
(let (($generated@@134  (and (=> (= (ControlFlow 0 23) (- 0 24)) (=> ($generated@@34 $generated@@111) (exists (($generated@@135 Int) ) (!  (and (<= ($generated@@25 0) $generated@@135) (= $generated@@111 ($generated@@20 $generated@@135)))
 :pattern ( ($generated@@20 $generated@@135))
)))) (=> (=> ($generated@@34 $generated@@111) (exists (($generated@@136 Int) ) (!  (and (<= ($generated@@25 0) $generated@@136) (= $generated@@111 ($generated@@20 $generated@@136)))
 :pattern ( ($generated@@20 $generated@@136))
))) (and (=> (= (ControlFlow 0 23) 20) $generated@@133) (=> (= (ControlFlow 0 23) 22) $generated@@132))))))
(let (($generated@@137  (=> (and (< $generated@@115 ($generated@@25 0)) (= (ControlFlow 0 28) 23)) $generated@@134)))
(let (($generated@@138  (=> (<= ($generated@@25 0) $generated@@115) (and (=> (= (ControlFlow 0 26) (- 0 27)) (<= 0 $generated@@115)) (=> (<= 0 $generated@@115) (=> (= (ControlFlow 0 26) 23) $generated@@134))))))
(let (($generated@@139  (=> ($generated@@34 $generated@@111) (and (=> (= (ControlFlow 0 29) 26) $generated@@138) (=> (= (ControlFlow 0 29) 28) $generated@@137)))))
(let (($generated@@140  (=> (and (not ($generated@@34 $generated@@111)) (= (ControlFlow 0 25) 23)) $generated@@134)))
(let (($generated@@141  (and (=> (= (ControlFlow 0 30) (- 0 32)) (=> (= $generated@@111 ($generated@@20 $generated@@112)) ($generated@@34 $generated@@111))) (and (=> (= (ControlFlow 0 30) (- 0 31)) (=> (= $generated@@111 ($generated@@20 $generated@@112)) (= ($generated@@21 $generated@@111) $generated@@112))) (=> (=> (= $generated@@111 ($generated@@20 $generated@@112)) (and ($generated@@34 $generated@@111) (= ($generated@@21 $generated@@111) $generated@@112))) (and (=> (= (ControlFlow 0 30) 29) $generated@@139) (=> (= (ControlFlow 0 30) 25) $generated@@140)))))))
(let (($generated@@142  (=> (and (not ($generated@@34 $generated@@111)) (= (ControlFlow 0 35) 30)) $generated@@141)))
(let (($generated@@143  (=> (and ($generated@@34 $generated@@111) (= (ControlFlow 0 34) 30)) $generated@@141)))
(let (($generated@@144  (=> (= $generated@@111 ($generated@@20 $generated@@112)) (and (=> (= (ControlFlow 0 36) 34) $generated@@143) (=> (= (ControlFlow 0 36) 35) $generated@@142)))))
(let (($generated@@145  (=> (and (or (not (= $generated@@111 ($generated@@20 $generated@@112))) (not true)) (= (ControlFlow 0 33) 30)) $generated@@141)))
(let (($generated@@146  (=> (and (= $generated@@116 ($generated@@48 $generated@@117 $generated@@118 $generated@@119 false)) (= $generated@@120 ($generated@@27 $generated@@50 ($generated@@20 25)))) (and (=> (= (ControlFlow 0 37) (- 0 42)) ($generated@@34 $generated@@120)) (=> ($generated@@34 $generated@@120) (and (=> (= (ControlFlow 0 37) (- 0 41)) (= ($generated@@21 $generated@@120) ($generated@@25 25))) (=> (= ($generated@@21 $generated@@120) ($generated@@25 25)) (and (=> (= (ControlFlow 0 37) (- 0 40)) (not (= ($generated@@21 $generated@@120) 0))) (=> (not (= ($generated@@21 $generated@@120) 0)) (and (=> (= (ControlFlow 0 37) (- 0 39)) (< 0 ($generated@@21 $generated@@120))) (=> (< 0 ($generated@@21 $generated@@120)) (and (=> (= (ControlFlow 0 37) (- 0 38)) (<= 0 $generated@@112)) (=> (<= 0 $generated@@112) (and (=> (= (ControlFlow 0 37) 36) $generated@@144) (=> (= (ControlFlow 0 37) 33) $generated@@145)))))))))))))))
(let (($generated@@147  (=> (and (and (and ($generated@@121 $generated@@118) ($generated@@122 $generated@@118)) (<= ($generated@@25 0) $generated@@112)) (and (= 0 $generated@@123) (= (ControlFlow 0 43) 37))) $generated@@146)))
$generated@@147)))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
