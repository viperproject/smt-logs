(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 (T@U) T@U)
(declare-fun $generated@@20 (T@U) Int)
(declare-fun $generated@@21 () T@U)
(declare-fun $generated@@22 (Int) Int)
(declare-fun $generated@@24 (T@T T@U) T@U)
(declare-fun $generated@@27 (T@T T@U) T@U)
(declare-fun $generated@@28 (T@T T@U) T@U)
(declare-fun $generated@@31 (T@U T@U T@U) Bool)
(declare-fun $generated@@32 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@37 (T@U T@U) Bool)
(declare-fun $generated@@38 (T@T T@U T@U) Bool)
(declare-fun $generated@@44 () T@T)
(declare-fun $generated@@45 (T@U) T@U)
(declare-fun $generated@@46 (T@U Int) T@U)
(declare-fun $generated@@51 (T@U) T@U)
(declare-fun $generated@@56 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@57 () T@T)
(declare-fun $generated@@58 () T@T)
(declare-fun $generated@@59 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@60 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@61 () T@T)
(declare-fun $generated@@62 (T@T T@T) T@T)
(declare-fun $generated@@63 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@64 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@65 (T@T) T@T)
(declare-fun $generated@@66 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (= ($generated@@19 $generated) $generated@@0))
(assert (= ($generated@@20 $generated@@21) 0))
(assert (forall (($generated@@23 Int) ) (! (= ($generated@@22 $generated@@23) $generated@@23)
 :pattern ( ($generated@@22 $generated@@23))
)))
(assert (forall (($generated@@25 T@U) ($generated@@26 T@T) ) (! (= ($generated@@24 $generated@@26 $generated@@25) $generated@@25)
 :pattern ( ($generated@@24 $generated@@26 $generated@@25))
)))
(assert (forall (($generated@@29 T@U) ($generated@@30 T@T) ) (! (= ($generated@@28 $generated@@30 ($generated@@27 $generated@@30 $generated@@29)) $generated@@29)
 :pattern ( ($generated@@27 $generated@@30 $generated@@29))
)))
(assert (forall (($generated@@33 T@U) ($generated@@34 T@U) ($generated@@35 T@U) ($generated@@36 T@T) ) (! (= ($generated@@31 ($generated@@28 $generated@@36 $generated@@33) $generated@@34 $generated@@35) ($generated@@32 $generated@@36 $generated@@33 $generated@@34 $generated@@35))
 :pattern ( ($generated@@31 ($generated@@28 $generated@@36 $generated@@33) $generated@@34 $generated@@35))
)))
(assert (forall (($generated@@39 T@U) ) (!  (=> ($generated@@37 $generated@@39 $generated) (and (= ($generated@@28 $generated@@5 ($generated@@27 $generated@@5 $generated@@39)) $generated@@39) ($generated@@38 $generated@@5 ($generated@@27 $generated@@5 $generated@@39) $generated)))
 :pattern ( ($generated@@37 $generated@@39 $generated))
)))
(assert (forall (($generated@@40 T@U) ($generated@@41 T@U) ($generated@@42 T@T) ) (! (= ($generated@@37 ($generated@@28 $generated@@42 $generated@@40) $generated@@41) ($generated@@38 $generated@@42 $generated@@40 $generated@@41))
 :pattern ( ($generated@@37 ($generated@@28 $generated@@42 $generated@@40) $generated@@41))
)))
(assert (forall (($generated@@43 T@U) ) (! (<= 0 ($generated@@20 $generated@@43))
 :pattern ( ($generated@@20 $generated@@43))
)))
(assert (= ($generated@@3 $generated@@44) 3))
(assert (forall (($generated@@47 T@U) ($generated@@48 T@U) ($generated@@49 T@U) ) (! (= ($generated@@32 $generated@@44 $generated@@47 ($generated@@45 $generated@@48) $generated@@49) (forall (($generated@@50 Int) ) (!  (=> (and (<= 0 $generated@@50) (< $generated@@50 ($generated@@20 $generated@@47))) ($generated@@31 ($generated@@46 $generated@@47 $generated@@50) $generated@@48 $generated@@49))
 :pattern ( ($generated@@46 $generated@@47 $generated@@50))
)))
 :pattern ( ($generated@@32 $generated@@44 $generated@@47 ($generated@@45 $generated@@48) $generated@@49))
)))
(assert (forall (($generated@@52 T@U) ) (! (= ($generated@@51 ($generated@@45 $generated@@52)) $generated@@52)
 :pattern ( ($generated@@45 $generated@@52))
)))
(assert (forall (($generated@@53 T@U) ) (! (= ($generated@@19 ($generated@@45 $generated@@53)) $generated@@1)
 :pattern ( ($generated@@45 $generated@@53))
)))
(assert (forall (($generated@@54 T@U) ($generated@@55 T@T) ) (! (= ($generated@@27 $generated@@55 ($generated@@28 $generated@@55 $generated@@54)) $generated@@54)
 :pattern ( ($generated@@28 $generated@@55 $generated@@54))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@67 T@T) ($generated@@68 T@T) ($generated@@69 T@T) ($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ) (! (= ($generated@@56 $generated@@67 $generated@@68 $generated@@69 ($generated@@63 $generated@@67 $generated@@68 $generated@@69 $generated@@71 $generated@@72 $generated@@73 $generated@@70) $generated@@72 $generated@@73) $generated@@70)
 :weight 0
)) (and (forall (($generated@@74 T@T) ($generated@@75 T@T) ($generated@@76 T@T) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (or (= $generated@@79 $generated@@81) (= ($generated@@56 $generated@@74 $generated@@75 $generated@@76 ($generated@@63 $generated@@74 $generated@@75 $generated@@76 $generated@@78 $generated@@79 $generated@@80 $generated@@77) $generated@@81 $generated@@82) ($generated@@56 $generated@@74 $generated@@75 $generated@@76 $generated@@78 $generated@@81 $generated@@82)))
 :weight 0
)) (forall (($generated@@83 T@T) ($generated@@84 T@T) ($generated@@85 T@T) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ) (!  (or (= $generated@@89 $generated@@91) (= ($generated@@56 $generated@@83 $generated@@84 $generated@@85 ($generated@@63 $generated@@83 $generated@@84 $generated@@85 $generated@@87 $generated@@88 $generated@@89 $generated@@86) $generated@@90 $generated@@91) ($generated@@56 $generated@@83 $generated@@84 $generated@@85 $generated@@87 $generated@@90 $generated@@91)))
 :weight 0
)))) (= ($generated@@3 $generated@@57) 4)) (= ($generated@@3 $generated@@58) 5)) (forall (($generated@@92 T@T) ($generated@@93 T@T) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ) (! (= ($generated@@60 $generated@@92 $generated@@93 ($generated@@64 $generated@@92 $generated@@93 $generated@@95 $generated@@96 $generated@@94) $generated@@96) $generated@@94)
 :weight 0
))) (forall (($generated@@97 T@T) ($generated@@98 T@T) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@101 $generated@@102) (= ($generated@@60 $generated@@97 $generated@@98 ($generated@@64 $generated@@97 $generated@@98 $generated@@100 $generated@@101 $generated@@99) $generated@@102) ($generated@@60 $generated@@97 $generated@@98 $generated@@100 $generated@@102)))
 :weight 0
))) (= ($generated@@3 $generated@@61) 6)) (forall (($generated@@103 T@T) ($generated@@104 T@T) ) (= ($generated@@3 ($generated@@62 $generated@@103 $generated@@104)) 7))) (forall (($generated@@105 T@T) ($generated@@106 T@T) ) (! (= ($generated@@65 ($generated@@62 $generated@@105 $generated@@106)) $generated@@105)
 :pattern ( ($generated@@62 $generated@@105 $generated@@106))
))) (forall (($generated@@107 T@T) ($generated@@108 T@T) ) (! (= ($generated@@66 ($generated@@62 $generated@@107 $generated@@108)) $generated@@108)
 :pattern ( ($generated@@62 $generated@@107 $generated@@108))
))))
(assert (forall (($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 Bool) ($generated@@113 T@U) ($generated@@114 T@U) ) (! (= ($generated@@8 ($generated@@56 $generated@@57 $generated@@58 $generated@@4 ($generated@@59 $generated@@109 $generated@@110 $generated@@111 $generated@@112) $generated@@113 $generated@@114))  (=> (and (or (not (= $generated@@113 $generated@@109)) (not true)) ($generated@@8 ($generated@@27 $generated@@4 ($generated@@60 $generated@@58 $generated@@61 ($generated@@60 $generated@@57 ($generated@@62 $generated@@58 $generated@@61) $generated@@110 $generated@@113) $generated@@111)))) $generated@@112))
 :pattern ( ($generated@@56 $generated@@57 $generated@@58 $generated@@4 ($generated@@59 $generated@@109 $generated@@110 $generated@@111 $generated@@112) $generated@@113 $generated@@114))
)))
(assert (forall (($generated@@115 T@U) ($generated@@116 T@U) ) (!  (=> ($generated@@37 $generated@@115 ($generated@@45 $generated@@116)) (and (= ($generated@@28 $generated@@44 ($generated@@27 $generated@@44 $generated@@115)) $generated@@115) ($generated@@38 $generated@@44 ($generated@@27 $generated@@44 $generated@@115) ($generated@@45 $generated@@116))))
 :pattern ( ($generated@@37 $generated@@115 ($generated@@45 $generated@@116)))
)))
(assert (forall (($generated@@117 Int) ) (! (= ($generated@@28 $generated@@5 ($generated@@9 ($generated@@22 $generated@@117))) ($generated@@24 $generated@@61 ($generated@@28 $generated@@5 ($generated@@9 $generated@@117))))
 :pattern ( ($generated@@28 $generated@@5 ($generated@@9 ($generated@@22 $generated@@117))))
)))
(assert (forall (($generated@@118 T@U) ($generated@@119 T@T) ) (! (= ($generated@@28 $generated@@119 ($generated@@24 $generated@@119 $generated@@118)) ($generated@@24 $generated@@61 ($generated@@28 $generated@@119 $generated@@118)))
 :pattern ( ($generated@@28 $generated@@119 ($generated@@24 $generated@@119 $generated@@118)))
)))
(assert (forall (($generated@@120 T@U) ) (!  (=> (= ($generated@@20 $generated@@120) 0) (= $generated@@120 $generated@@21))
 :pattern ( ($generated@@20 $generated@@120))
)))
(assert (forall (($generated@@121 T@U) ($generated@@122 T@U) ) (! ($generated@@32 $generated@@5 $generated@@122 $generated $generated@@121)
 :pattern ( ($generated@@32 $generated@@5 $generated@@122 $generated $generated@@121))
)))
(assert (forall (($generated@@123 T@U) ($generated@@124 T@U) ) (! (= ($generated@@38 $generated@@44 $generated@@123 ($generated@@45 $generated@@124)) (forall (($generated@@125 Int) ) (!  (=> (and (<= 0 $generated@@125) (< $generated@@125 ($generated@@20 $generated@@123))) ($generated@@37 ($generated@@46 $generated@@123 $generated@@125) $generated@@124))
 :pattern ( ($generated@@46 $generated@@123 $generated@@125))
)))
 :pattern ( ($generated@@38 $generated@@44 $generated@@123 ($generated@@45 $generated@@124)))
)))
(assert (forall (($generated@@126 T@U) ) (! ($generated@@38 $generated@@5 $generated@@126 $generated)
 :pattern ( ($generated@@38 $generated@@5 $generated@@126 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@127 () T@U)
(declare-fun $generated@@128 () T@U)
(declare-fun $generated@@129 () T@U)
(declare-fun $generated@@130 () T@U)
(declare-fun $generated@@131 (T@U) Bool)
(declare-fun $generated@@132 (T@U) Bool)
(declare-fun $generated@@133 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@134  (=> (and (= $generated@@127 ($generated@@59 $generated@@128 $generated@@129 $generated@@2 false)) (= (ControlFlow 0 2) (- 0 1))) (forall (($generated@@135 Int) ($generated@@136 Int) ) (!  (=> (and (and (<= ($generated@@22 0) $generated@@135) (< $generated@@135 $generated@@136)) (< $generated@@136 ($generated@@20 $generated@@130))) (<= ($generated@@10 ($generated@@27 $generated@@5 ($generated@@46 $generated@@130 $generated@@135))) ($generated@@10 ($generated@@27 $generated@@5 ($generated@@46 $generated@@130 $generated@@136)))))
 :pattern ( ($generated@@27 $generated@@5 ($generated@@46 $generated@@130 $generated@@136)) ($generated@@27 $generated@@5 ($generated@@46 $generated@@130 $generated@@135)))
)))))
(let (($generated@@137  (=> (and ($generated@@131 $generated@@129) ($generated@@132 $generated@@129)) (=> (and (and (and ($generated@@38 $generated@@44 $generated@@130 ($generated@@45 $generated)) ($generated@@32 $generated@@44 $generated@@130 ($generated@@45 $generated) $generated@@129)) (= 0 $generated@@133)) (and (forall (($generated@@138 Int) ($generated@@139 Int) ) (!  (=> (= $generated@@139 (- $generated@@138 1)) (=> (and (<= ($generated@@22 1) $generated@@138) (< $generated@@138 ($generated@@20 $generated@@130))) (<= ($generated@@10 ($generated@@27 $generated@@5 ($generated@@46 $generated@@130 $generated@@139))) ($generated@@10 ($generated@@27 $generated@@5 ($generated@@46 $generated@@130 $generated@@138))))))
 :pattern ( ($generated@@27 $generated@@5 ($generated@@46 $generated@@130 $generated@@138)) ($generated@@27 $generated@@5 ($generated@@46 $generated@@130 $generated@@139)))
)) (= (ControlFlow 0 3) 2))) $generated@@134))))
$generated@@137)))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
