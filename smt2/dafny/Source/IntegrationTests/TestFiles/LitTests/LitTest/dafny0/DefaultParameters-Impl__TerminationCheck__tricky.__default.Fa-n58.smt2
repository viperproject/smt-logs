(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@22 () T@U)
(declare-fun $generated@@25 (T@U) Bool)
(declare-fun $generated@@26 (T@T T@U T@U) Bool)
(declare-fun $generated@@27 () T@T)
(declare-fun $generated@@28 () T@U)
(declare-fun $generated@@30 (Int) Int)
(declare-fun $generated@@32 (T@T T@U) T@U)
(declare-fun $generated@@35 (T@U) T@U)
(declare-fun $generated@@37 (T@T T@U) T@U)
(declare-fun $generated@@38 (T@T T@U) T@U)
(declare-fun $generated@@41 (Int) T@U)
(declare-fun $generated@@45 () Int)
(declare-fun $generated@@46 (T@U T@U) T@U)
(declare-fun $generated@@47 (T@U) Bool)
(declare-fun $generated@@48 (T@U) Int)
(declare-fun $generated@@51 (T@U) T@U)
(declare-fun $generated@@61 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@62 () T@T)
(declare-fun $generated@@63 () T@T)
(declare-fun $generated@@64 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@65 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@66 () T@T)
(declare-fun $generated@@67 (T@T T@T) T@T)
(declare-fun $generated@@68 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@69 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@70 (T@T) T@T)
(declare-fun $generated@@71 (T@T) T@T)
(declare-fun $generated@@120 (T@U) Bool)
(declare-fun $generated@@123 (T@U) T@U)
(declare-fun $generated@@124 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert (forall (($generated@@23 T@U) ($generated@@24 T@U) ) (! ($generated@@21 $generated@@7 $generated@@23 $generated@@22 $generated@@24)
 :pattern ( ($generated@@21 $generated@@7 $generated@@23 $generated@@22 $generated@@24))
)))
(assert (= ($generated@@5 $generated@@27) 3))
(assert (forall (($generated@@29 T@U) ) (!  (=> ($generated@@26 $generated@@27 $generated@@29 $generated@@28) ($generated@@25 $generated@@29))
 :pattern ( ($generated@@25 $generated@@29) ($generated@@26 $generated@@27 $generated@@29 $generated@@28))
)))
(assert (forall (($generated@@31 Int) ) (! (= ($generated@@30 $generated@@31) $generated@@31)
 :pattern ( ($generated@@30 $generated@@31))
)))
(assert (forall (($generated@@33 T@U) ($generated@@34 T@T) ) (! (= ($generated@@32 $generated@@34 $generated@@33) $generated@@33)
 :pattern ( ($generated@@32 $generated@@34 $generated@@33))
)))
(assert (forall (($generated@@36 T@U) ) (! (= ($generated@@25 $generated@@36) (= ($generated@@35 $generated@@36) $generated@@2))
 :pattern ( ($generated@@25 $generated@@36))
)))
(assert (forall (($generated@@39 T@U) ($generated@@40 T@T) ) (! (= ($generated@@38 $generated@@40 ($generated@@37 $generated@@40 $generated@@39)) $generated@@39)
 :pattern ( ($generated@@37 $generated@@40 $generated@@39))
)))
(assert (forall (($generated@@42 T@U) ) (!  (=> ($generated@@25 $generated@@42) (exists (($generated@@43 Int) ) (= $generated@@42 ($generated@@41 $generated@@43))))
 :pattern ( ($generated@@25 $generated@@42))
)))
(assert (forall (($generated@@44 T@U) ) (! (= ($generated@@26 $generated@@7 $generated@@44 $generated@@22) (<= ($generated@@30 0) ($generated@@12 $generated@@44)))
 :pattern ( ($generated@@26 $generated@@7 $generated@@44 $generated@@22))
)))
(assert  (=> (<= 0 $generated@@45) (forall (($generated@@49 T@U) ($generated@@50 T@U) ) (!  (=> (or ($generated@@47 $generated@@50) (and (< 0 $generated@@45) ($generated@@26 $generated@@27 $generated@@50 $generated@@28))) (and (<= ($generated@@30 0) ($generated@@48 ($generated@@46 $generated@@49 $generated@@50))) ($generated@@26 $generated@@27 ($generated@@46 $generated@@49 $generated@@50) $generated@@28)))
 :pattern ( ($generated@@46 $generated@@49 $generated@@50))
))))
(assert  (=> (<= 0 $generated@@45) (forall (($generated@@52 T@U) ($generated@@53 T@U) ) (!  (=> (or ($generated@@47 ($generated@@32 $generated@@27 $generated@@53)) (and (< 0 $generated@@45) ($generated@@26 $generated@@27 $generated@@53 $generated@@28))) (and ($generated@@25 ($generated@@32 $generated@@27 $generated@@53)) (= ($generated@@46 ($generated@@51 $generated@@52) ($generated@@32 $generated@@27 $generated@@53)) ($generated@@32 $generated@@27 $generated@@53))))
 :weight 3
 :pattern ( ($generated@@46 ($generated@@51 $generated@@52) ($generated@@32 $generated@@27 $generated@@53)))
))))
(assert (forall (($generated@@54 Int) ) (! (= ($generated@@26 $generated@@27 ($generated@@41 $generated@@54) $generated@@28) ($generated@@26 $generated@@7 ($generated@@11 $generated@@54) $generated@@22))
 :pattern ( ($generated@@26 $generated@@27 ($generated@@41 $generated@@54) $generated@@28))
)))
(assert (forall (($generated@@55 Int) ) (! (= ($generated@@35 ($generated@@41 $generated@@55)) $generated@@2)
 :pattern ( ($generated@@41 $generated@@55))
)))
(assert (forall (($generated@@56 Int) ) (! (= ($generated@@48 ($generated@@41 $generated@@56)) $generated@@56)
 :pattern ( ($generated@@41 $generated@@56))
)))
(assert (forall (($generated@@57 T@U) ($generated@@58 T@T) ) (! (= ($generated@@37 $generated@@58 ($generated@@38 $generated@@58 $generated@@57)) $generated@@57)
 :pattern ( ($generated@@38 $generated@@58 $generated@@57))
)))
(assert (forall (($generated@@59 T@U) ($generated@@60 T@U) ) (! (= ($generated@@46 ($generated@@51 $generated@@59) $generated@@60) ($generated@@46 $generated@@59 $generated@@60))
 :pattern ( ($generated@@46 ($generated@@51 $generated@@59) $generated@@60))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@72 T@T) ($generated@@73 T@T) ($generated@@74 T@T) ($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ) (! (= ($generated@@61 $generated@@72 $generated@@73 $generated@@74 ($generated@@68 $generated@@72 $generated@@73 $generated@@74 $generated@@76 $generated@@77 $generated@@78 $generated@@75) $generated@@77 $generated@@78) $generated@@75)
 :weight 0
)) (and (forall (($generated@@79 T@T) ($generated@@80 T@T) ($generated@@81 T@T) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ) (!  (or (= $generated@@84 $generated@@86) (= ($generated@@61 $generated@@79 $generated@@80 $generated@@81 ($generated@@68 $generated@@79 $generated@@80 $generated@@81 $generated@@83 $generated@@84 $generated@@85 $generated@@82) $generated@@86 $generated@@87) ($generated@@61 $generated@@79 $generated@@80 $generated@@81 $generated@@83 $generated@@86 $generated@@87)))
 :weight 0
)) (forall (($generated@@88 T@T) ($generated@@89 T@T) ($generated@@90 T@T) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ) (!  (or (= $generated@@94 $generated@@96) (= ($generated@@61 $generated@@88 $generated@@89 $generated@@90 ($generated@@68 $generated@@88 $generated@@89 $generated@@90 $generated@@92 $generated@@93 $generated@@94 $generated@@91) $generated@@95 $generated@@96) ($generated@@61 $generated@@88 $generated@@89 $generated@@90 $generated@@92 $generated@@95 $generated@@96)))
 :weight 0
)))) (= ($generated@@5 $generated@@62) 4)) (= ($generated@@5 $generated@@63) 5)) (forall (($generated@@97 T@T) ($generated@@98 T@T) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ) (! (= ($generated@@65 $generated@@97 $generated@@98 ($generated@@69 $generated@@97 $generated@@98 $generated@@100 $generated@@101 $generated@@99) $generated@@101) $generated@@99)
 :weight 0
))) (forall (($generated@@102 T@T) ($generated@@103 T@T) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ) (!  (or (= $generated@@106 $generated@@107) (= ($generated@@65 $generated@@102 $generated@@103 ($generated@@69 $generated@@102 $generated@@103 $generated@@105 $generated@@106 $generated@@104) $generated@@107) ($generated@@65 $generated@@102 $generated@@103 $generated@@105 $generated@@107)))
 :weight 0
))) (= ($generated@@5 $generated@@66) 6)) (forall (($generated@@108 T@T) ($generated@@109 T@T) ) (= ($generated@@5 ($generated@@67 $generated@@108 $generated@@109)) 7))) (forall (($generated@@110 T@T) ($generated@@111 T@T) ) (! (= ($generated@@70 ($generated@@67 $generated@@110 $generated@@111)) $generated@@110)
 :pattern ( ($generated@@67 $generated@@110 $generated@@111))
))) (forall (($generated@@112 T@T) ($generated@@113 T@T) ) (! (= ($generated@@71 ($generated@@67 $generated@@112 $generated@@113)) $generated@@113)
 :pattern ( ($generated@@67 $generated@@112 $generated@@113))
))))
(assert (forall (($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 Bool) ($generated@@118 T@U) ($generated@@119 T@U) ) (! (= ($generated@@10 ($generated@@61 $generated@@62 $generated@@63 $generated@@6 ($generated@@64 $generated@@114 $generated@@115 $generated@@116 $generated@@117) $generated@@118 $generated@@119))  (=> (and (or (not (= $generated@@118 $generated@@114)) (not true)) ($generated@@10 ($generated@@37 $generated@@6 ($generated@@65 $generated@@63 $generated@@66 ($generated@@65 $generated@@62 ($generated@@67 $generated@@63 $generated@@66) $generated@@115 $generated@@118) $generated@@116)))) $generated@@117))
 :pattern ( ($generated@@61 $generated@@62 $generated@@63 $generated@@6 ($generated@@64 $generated@@114 $generated@@115 $generated@@116 $generated@@117) $generated@@118 $generated@@119))
)))
(assert (forall (($generated@@121 T@U) ($generated@@122 T@U) ) (!  (=> (and ($generated@@120 $generated@@122) ($generated@@26 $generated@@27 $generated@@121 $generated@@28)) ($generated@@21 $generated@@27 $generated@@121 $generated@@28 $generated@@122))
 :pattern ( ($generated@@21 $generated@@27 $generated@@121 $generated@@28 $generated@@122))
)))
(assert (= ($generated@@123 $generated@@22) $generated@@0))
(assert (= ($generated@@124 $generated@@22) $generated@@3))
(assert (= ($generated@@123 $generated@@28) $generated@@1))
(assert (= ($generated@@124 $generated@@28) $generated@@4))
(assert (forall (($generated@@125 T@U) ($generated@@126 T@U) ) (!  (=> (and ($generated@@120 $generated@@126) (and ($generated@@25 $generated@@125) ($generated@@21 $generated@@27 $generated@@125 $generated@@28 $generated@@126))) ($generated@@21 $generated@@7 ($generated@@11 ($generated@@48 $generated@@125)) $generated@@22 $generated@@126))
 :pattern ( ($generated@@21 $generated@@7 ($generated@@11 ($generated@@48 $generated@@125)) $generated@@22 $generated@@126))
)))
(assert (forall (($generated@@127 Int) ) (! (= ($generated@@38 $generated@@7 ($generated@@11 ($generated@@30 $generated@@127))) ($generated@@32 $generated@@66 ($generated@@38 $generated@@7 ($generated@@11 $generated@@127))))
 :pattern ( ($generated@@38 $generated@@7 ($generated@@11 ($generated@@30 $generated@@127))))
)))
(assert (forall (($generated@@128 Int) ) (! (= ($generated@@41 ($generated@@30 $generated@@128)) ($generated@@32 $generated@@27 ($generated@@41 $generated@@128)))
 :pattern ( ($generated@@41 ($generated@@30 $generated@@128)))
)))
(assert (forall (($generated@@129 T@U) ($generated@@130 T@T) ) (! (= ($generated@@38 $generated@@130 ($generated@@32 $generated@@130 $generated@@129)) ($generated@@32 $generated@@66 ($generated@@38 $generated@@130 $generated@@129)))
 :pattern ( ($generated@@38 $generated@@130 ($generated@@32 $generated@@130 $generated@@129)))
)))
(assert  (=> (<= 0 $generated@@45) (forall (($generated@@131 T@U) ($generated@@132 T@U) ) (!  (=> (or ($generated@@47 $generated@@132) (and (< 0 $generated@@45) ($generated@@26 $generated@@27 $generated@@132 $generated@@28))) (and ($generated@@25 $generated@@132) (= ($generated@@46 ($generated@@51 $generated@@131) $generated@@132) $generated@@132)))
 :pattern ( ($generated@@46 ($generated@@51 $generated@@131) $generated@@132))
))))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@133 () T@U)
(declare-fun $generated@@134 () T@U)
(declare-fun $generated@@135 () T@U)
(declare-fun $generated@@136 () T@U)
(declare-fun $generated@@137 () T@U)
(declare-fun $generated@@138 (T@U) Bool)
(declare-fun $generated@@139 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 6) (let (($generated@@140  (=> (and (and (= $generated@@133 ($generated@@64 $generated@@134 $generated@@135 $generated false)) (= $generated@@136 ($generated@@32 $generated@@27 ($generated@@41 ($generated@@30 (- 0 3)))))) (and ($generated@@25 $generated@@136) ($generated@@25 $generated@@136))) (and (=> (= (ControlFlow 0 2) (- 0 5)) (= ($generated@@48 $generated@@136) ($generated@@30 (- 0 3)))) (=> (= ($generated@@48 $generated@@136) ($generated@@30 (- 0 3))) (=> ($generated@@21 $generated@@27 $generated@@136 $generated@@28 $generated@@135) (and (=> (= (ControlFlow 0 2) (- 0 4)) true) (=> ($generated@@47 $generated@@136) (=> (and (and ($generated@@25 ($generated@@46 ($generated@@51 $generated@@137) $generated@@136)) ($generated@@25 ($generated@@46 ($generated@@51 $generated@@137) $generated@@136))) (and ($generated@@47 $generated@@136) ($generated@@25 ($generated@@46 ($generated@@51 $generated@@137) $generated@@136)))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (<= ($generated@@30 0) ($generated@@48 ($generated@@46 ($generated@@51 ($generated@@51 $generated@@137)) $generated@@136)))) (=> (and (<= ($generated@@30 0) ($generated@@48 ($generated@@46 ($generated@@51 $generated@@137) $generated@@136))) (= (ControlFlow 0 2) (- 0 1))) ($generated@@10 ($generated@@32 $generated@@6 ($generated@@9 false))))))))))))))
(let (($generated@@141  (=> (and ($generated@@120 $generated@@135) ($generated@@138 $generated@@135)) (=> (and (and (and ($generated@@26 $generated@@27 $generated@@139 $generated@@28) ($generated@@21 $generated@@27 $generated@@139 $generated@@28 $generated@@135)) true) (and (= 0 $generated@@45) (= (ControlFlow 0 6) 2))) $generated@@140))))
$generated@@141)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
