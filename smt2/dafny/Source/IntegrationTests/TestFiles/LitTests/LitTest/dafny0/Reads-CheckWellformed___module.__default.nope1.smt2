(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 () T@U)
(declare-fun $generated@@9 () T@U)
(declare-fun $generated@@10 () T@U)
(declare-fun $generated@@11 (T@T) Int)
(declare-fun $generated@@12 () T@T)
(declare-fun $generated@@13 () T@T)
(declare-fun $generated@@14 () T@T)
(declare-fun $generated@@15 (Bool) T@U)
(declare-fun $generated@@16 (T@U) Bool)
(declare-fun $generated@@17 (Int) T@U)
(declare-fun $generated@@18 (T@U) Int)
(declare-fun $generated@@19 (Real) T@U)
(declare-fun $generated@@20 (T@U) Real)
(declare-fun $generated@@27 (T@U) Int)
(declare-fun $generated@@28 (T@U) T@U)
(declare-fun $generated@@29 (T@U) T@U)
(declare-fun $generated@@30 (T@U) T@U)
(declare-fun $generated@@31 () T@U)
(declare-fun $generated@@32 (T@T T@U T@U) Bool)
(declare-fun $generated@@33 () T@T)
(declare-fun $generated@@34 () T@U)
(declare-fun $generated@@35 () T@U)
(declare-fun $generated@@36 (T@U) T@U)
(declare-fun $generated@@38 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@39 () T@U)
(declare-fun $generated@@42 () T@T)
(declare-fun $generated@@43 () T@U)
(declare-fun $generated@@44 () T@U)
(declare-fun $generated@@45 (T@U T@U) T@U)
(declare-fun $generated@@46 (T@U) Bool)
(declare-fun $generated@@47 (T@T T@U) T@U)
(declare-fun $generated@@48 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 () T@T)
(declare-fun $generated@@51 (T@T T@T) T@T)
(declare-fun $generated@@52 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@53 (T@T) T@T)
(declare-fun $generated@@54 (T@T) T@T)
(declare-fun $generated@@74 (T@T T@U) T@U)
(declare-fun $generated@@77 (T@T T@U) T@U)
(declare-fun $generated@@80 (T@U) Bool)
(declare-fun $generated@@83 () Int)
(declare-fun $generated@@84 (T@U) T@U)
(declare-fun $generated@@85 (T@U) Bool)
(declare-fun $generated@@89 (T@U) T@U)
(declare-fun $generated@@96 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@97 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@98 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@134 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@11 $generated@@12) 0) (= ($generated@@11 $generated@@13) 1)) (= ($generated@@11 $generated@@14) 2)) (forall (($generated@@21 Bool) ) (! (= ($generated@@16 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 T@U) ) (! (= ($generated@@15 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 Int) ) (! (= ($generated@@18 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))) (forall (($generated@@24 T@U) ) (! (= ($generated@@17 ($generated@@18 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@18 $generated@@24))
))) (forall (($generated@@25 Real) ) (! (= ($generated@@20 ($generated@@19 $generated@@25)) $generated@@25)
 :pattern ( ($generated@@19 $generated@@25))
))) (forall (($generated@@26 T@U) ) (! (= ($generated@@19 ($generated@@20 $generated@@26)) $generated@@26)
 :pattern ( ($generated@@20 $generated@@26))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7 $generated@@8 $generated@@9 $generated@@10)
)
(assert (= ($generated@@27 $generated@@1) 0))
(assert (= ($generated@@28 $generated) $generated@@0))
(assert (= ($generated@@29 $generated@@1) $generated@@2))
(assert (= ($generated@@30 $generated@@31) $generated@@3))
(assert (= ($generated@@11 $generated@@33) 3))
(assert (forall (($generated@@37 T@U) ) (! (= ($generated@@32 $generated@@33 $generated@@37 $generated@@34)  (or (= $generated@@37 $generated@@35) (= ($generated@@36 $generated@@37) $generated@@34)))
 :pattern ( ($generated@@32 $generated@@33 $generated@@37 $generated@@34))
)))
(assert (forall (($generated@@40 T@U) ($generated@@41 T@U) ) (! (= ($generated@@38 $generated@@33 $generated@@40 $generated@@39 $generated@@41) ($generated@@38 $generated@@33 $generated@@40 $generated@@34 $generated@@41))
 :pattern ( ($generated@@38 $generated@@33 $generated@@40 $generated@@39 $generated@@41))
 :pattern ( ($generated@@38 $generated@@33 $generated@@40 $generated@@34 $generated@@41))
)))
(assert (= ($generated@@11 $generated@@42) 4))
(assert ($generated@@32 $generated@@42 $generated@@31 $generated@@43))
(assert (= ($generated@@27 $generated@@44) 0))
(assert (= ($generated@@45 $generated@@7 $generated@@10) $generated@@44))
(assert  (not ($generated@@46 $generated@@44)))
(assert  (and (and (and (and (and (and (forall (($generated@@55 T@T) ($generated@@56 T@T) ($generated@@57 T@U) ($generated@@58 T@U) ($generated@@59 T@U) ) (! (= ($generated@@48 $generated@@55 $generated@@56 ($generated@@52 $generated@@55 $generated@@56 $generated@@58 $generated@@59 $generated@@57) $generated@@59) $generated@@57)
 :weight 0
)) (forall (($generated@@60 T@T) ($generated@@61 T@T) ($generated@@62 T@U) ($generated@@63 T@U) ($generated@@64 T@U) ($generated@@65 T@U) ) (!  (or (= $generated@@64 $generated@@65) (= ($generated@@48 $generated@@60 $generated@@61 ($generated@@52 $generated@@60 $generated@@61 $generated@@63 $generated@@64 $generated@@62) $generated@@65) ($generated@@48 $generated@@60 $generated@@61 $generated@@63 $generated@@65)))
 :weight 0
))) (= ($generated@@11 $generated@@49) 5)) (= ($generated@@11 $generated@@50) 6)) (forall (($generated@@66 T@T) ($generated@@67 T@T) ) (= ($generated@@11 ($generated@@51 $generated@@66 $generated@@67)) 7))) (forall (($generated@@68 T@T) ($generated@@69 T@T) ) (! (= ($generated@@53 ($generated@@51 $generated@@68 $generated@@69)) $generated@@68)
 :pattern ( ($generated@@51 $generated@@68 $generated@@69))
))) (forall (($generated@@70 T@T) ($generated@@71 T@T) ) (! (= ($generated@@54 ($generated@@51 $generated@@70 $generated@@71)) $generated@@71)
 :pattern ( ($generated@@51 $generated@@70 $generated@@71))
))))
(assert (forall (($generated@@72 T@U) ($generated@@73 T@U) ) (! (= ($generated@@38 $generated@@33 $generated@@72 $generated@@34 $generated@@73)  (or (= $generated@@72 $generated@@35) ($generated@@16 ($generated@@47 $generated@@12 ($generated@@48 $generated@@49 $generated@@50 ($generated@@48 $generated@@33 ($generated@@51 $generated@@49 $generated@@50) $generated@@73 $generated@@72) $generated@@1)))))
 :pattern ( ($generated@@38 $generated@@33 $generated@@72 $generated@@34 $generated@@73))
)))
(assert (forall (($generated@@75 T@U) ($generated@@76 T@T) ) (! (= ($generated@@74 $generated@@76 $generated@@75) $generated@@75)
 :pattern ( ($generated@@74 $generated@@76 $generated@@75))
)))
(assert (forall (($generated@@78 T@U) ($generated@@79 T@T) ) (! (= ($generated@@77 $generated@@79 ($generated@@47 $generated@@79 $generated@@78)) $generated@@78)
 :pattern ( ($generated@@47 $generated@@79 $generated@@78))
)))
(assert ($generated@@46 $generated@@1))
(assert (forall (($generated@@81 T@U) ($generated@@82 T@U) ) (!  (=> (and (and ($generated@@80 $generated@@81) (and (or (not (= $generated@@82 $generated@@35)) (not true)) (= ($generated@@36 $generated@@82) $generated@@34))) ($generated@@16 ($generated@@47 $generated@@12 ($generated@@48 $generated@@49 $generated@@50 ($generated@@48 $generated@@33 ($generated@@51 $generated@@49 $generated@@50) $generated@@81 $generated@@82) $generated@@1)))) ($generated@@38 $generated@@13 ($generated@@47 $generated@@13 ($generated@@48 $generated@@49 $generated@@50 ($generated@@48 $generated@@33 ($generated@@51 $generated@@49 $generated@@50) $generated@@81 $generated@@82) $generated@@44)) $generated $generated@@81))
 :pattern ( ($generated@@47 $generated@@13 ($generated@@48 $generated@@49 $generated@@50 ($generated@@48 $generated@@33 ($generated@@51 $generated@@49 $generated@@50) $generated@@81 $generated@@82) $generated@@44)))
)))
(assert  (=> (<= 1 $generated@@83) (forall (($generated@@86 T@U) ($generated@@87 T@U) ) (!  (=> (or ($generated@@85 $generated@@87) (and (< 1 $generated@@83) (and (and ($generated@@80 $generated@@86) ($generated@@32 $generated@@33 $generated@@87 $generated@@39)) (> ($generated@@18 ($generated@@47 $generated@@13 ($generated@@48 $generated@@49 $generated@@50 ($generated@@48 $generated@@33 ($generated@@51 $generated@@49 $generated@@50) $generated@@86 $generated@@87) $generated@@44))) 0)))) (= ($generated@@84 $generated@@87) ($generated@@74 $generated@@42 $generated@@31)))
 :pattern ( ($generated@@84 $generated@@87) ($generated@@80 $generated@@86))
))))
(assert (forall (($generated@@88 T@U) ) (! (= ($generated@@32 $generated@@33 $generated@@88 $generated@@39)  (and ($generated@@32 $generated@@33 $generated@@88 $generated@@34) (or (not (= $generated@@88 $generated@@35)) (not true))))
 :pattern ( ($generated@@32 $generated@@33 $generated@@88 $generated@@39))
 :pattern ( ($generated@@32 $generated@@33 $generated@@88 $generated@@34))
)))
(assert (forall (($generated@@90 T@U) ($generated@@91 T@U) ) (!  (and (= ($generated@@89 ($generated@@45 $generated@@90 $generated@@91)) $generated@@90) (= ($generated@@29 ($generated@@45 $generated@@90 $generated@@91)) $generated@@91))
 :pattern ( ($generated@@45 $generated@@90 $generated@@91))
)))
(assert (forall (($generated@@92 T@U) ($generated@@93 T@T) ) (! (= ($generated@@47 $generated@@93 ($generated@@77 $generated@@93 $generated@@92)) $generated@@92)
 :pattern ( ($generated@@77 $generated@@93 $generated@@92))
)))
(assert (forall (($generated@@94 T@U) ($generated@@95 T@U) ) (!  (=> (and ($generated@@80 $generated@@94) (and (or (not (= $generated@@95 $generated@@35)) (not true)) (= ($generated@@36 $generated@@95) $generated@@34))) ($generated@@32 $generated@@13 ($generated@@47 $generated@@13 ($generated@@48 $generated@@49 $generated@@50 ($generated@@48 $generated@@33 ($generated@@51 $generated@@49 $generated@@50) $generated@@94 $generated@@95) $generated@@44)) $generated))
 :pattern ( ($generated@@47 $generated@@13 ($generated@@48 $generated@@49 $generated@@50 ($generated@@48 $generated@@33 ($generated@@51 $generated@@49 $generated@@50) $generated@@94 $generated@@95) $generated@@44)))
)))
(assert  (and (forall (($generated@@99 T@T) ($generated@@100 T@T) ($generated@@101 T@T) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ) (! (= ($generated@@96 $generated@@99 $generated@@100 $generated@@101 ($generated@@98 $generated@@99 $generated@@100 $generated@@101 $generated@@103 $generated@@104 $generated@@105 $generated@@102) $generated@@104 $generated@@105) $generated@@102)
 :weight 0
)) (and (forall (($generated@@106 T@T) ($generated@@107 T@T) ($generated@@108 T@T) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ) (!  (or (= $generated@@111 $generated@@113) (= ($generated@@96 $generated@@106 $generated@@107 $generated@@108 ($generated@@98 $generated@@106 $generated@@107 $generated@@108 $generated@@110 $generated@@111 $generated@@112 $generated@@109) $generated@@113 $generated@@114) ($generated@@96 $generated@@106 $generated@@107 $generated@@108 $generated@@110 $generated@@113 $generated@@114)))
 :weight 0
)) (forall (($generated@@115 T@T) ($generated@@116 T@T) ($generated@@117 T@T) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ) (!  (or (= $generated@@121 $generated@@123) (= ($generated@@96 $generated@@115 $generated@@116 $generated@@117 ($generated@@98 $generated@@115 $generated@@116 $generated@@117 $generated@@119 $generated@@120 $generated@@121 $generated@@118) $generated@@122 $generated@@123) ($generated@@96 $generated@@115 $generated@@116 $generated@@117 $generated@@119 $generated@@122 $generated@@123)))
 :weight 0
)))))
(assert (forall (($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 Bool) ($generated@@128 T@U) ($generated@@129 T@U) ) (! (= ($generated@@16 ($generated@@96 $generated@@33 $generated@@49 $generated@@12 ($generated@@97 $generated@@124 $generated@@125 $generated@@126 $generated@@127) $generated@@128 $generated@@129))  (=> (and (or (not (= $generated@@128 $generated@@124)) (not true)) ($generated@@16 ($generated@@47 $generated@@12 ($generated@@48 $generated@@49 $generated@@50 ($generated@@48 $generated@@33 ($generated@@51 $generated@@49 $generated@@50) $generated@@125 $generated@@128) $generated@@126)))) $generated@@127))
 :pattern ( ($generated@@96 $generated@@33 $generated@@49 $generated@@12 ($generated@@97 $generated@@124 $generated@@125 $generated@@126 $generated@@127) $generated@@128 $generated@@129))
)))
(assert  (=> (<= 1 $generated@@83) (forall (($generated@@130 T@U) ($generated@@131 T@U) ) (!  (=> (or ($generated@@85 $generated@@131) (and (< 1 $generated@@83) (and (and ($generated@@80 $generated@@130) (and ($generated@@32 $generated@@33 $generated@@131 $generated@@39) ($generated@@38 $generated@@33 $generated@@131 $generated@@39 $generated@@130))) (> ($generated@@18 ($generated@@47 $generated@@13 ($generated@@48 $generated@@49 $generated@@50 ($generated@@48 $generated@@33 ($generated@@51 $generated@@49 $generated@@50) $generated@@130 $generated@@131) $generated@@44))) 0)))) ($generated@@32 $generated@@42 ($generated@@84 $generated@@131) $generated@@43))
 :pattern ( ($generated@@84 $generated@@131) ($generated@@80 $generated@@130))
))))
(assert (forall (($generated@@132 T@U) ($generated@@133 T@U) ) (!  (=> (and ($generated@@80 $generated@@133) ($generated@@32 $generated@@42 $generated@@132 $generated@@43)) ($generated@@38 $generated@@42 $generated@@132 $generated@@43 $generated@@133))
 :pattern ( ($generated@@38 $generated@@42 $generated@@132 $generated@@43 $generated@@133))
)))
(assert (= ($generated@@28 $generated@@43) $generated@@4))
(assert (= ($generated@@134 $generated@@43) $generated@@8))
(assert (= ($generated@@28 $generated@@39) $generated@@5))
(assert (= ($generated@@134 $generated@@39) $generated@@9))
(assert (= ($generated@@28 $generated@@34) $generated@@6))
(assert (= ($generated@@134 $generated@@34) $generated@@9))
(assert (= $generated@@31 ($generated@@74 $generated@@42 $generated@@31)))
(assert (forall (($generated@@135 T@U) ($generated@@136 T@T) ) (! (= ($generated@@77 $generated@@136 ($generated@@74 $generated@@136 $generated@@135)) ($generated@@74 $generated@@50 ($generated@@77 $generated@@136 $generated@@135)))
 :pattern ( ($generated@@77 $generated@@136 ($generated@@74 $generated@@136 $generated@@135)))
)))
(assert (forall (($generated@@137 T@U) ($generated@@138 T@U) ) (! ($generated@@38 $generated@@13 $generated@@138 $generated $generated@@137)
 :pattern ( ($generated@@38 $generated@@13 $generated@@138 $generated $generated@@137))
)))
(assert  (=> (<= 1 $generated@@83) (forall (($generated@@139 T@U) ($generated@@140 T@U) ) (!  (=> (or ($generated@@85 ($generated@@74 $generated@@33 $generated@@140)) (and (< 1 $generated@@83) (and (and ($generated@@80 $generated@@139) ($generated@@32 $generated@@33 $generated@@140 $generated@@39)) (> ($generated@@18 ($generated@@47 $generated@@13 ($generated@@48 $generated@@49 $generated@@50 ($generated@@48 $generated@@33 ($generated@@51 $generated@@49 $generated@@50) $generated@@139 ($generated@@74 $generated@@33 $generated@@140)) $generated@@44))) 0)))) (= ($generated@@84 ($generated@@74 $generated@@33 $generated@@140)) ($generated@@74 $generated@@42 $generated@@31)))
 :weight 3
 :pattern ( ($generated@@84 ($generated@@74 $generated@@33 $generated@@140)) ($generated@@80 $generated@@139))
))))
(assert (forall (($generated@@141 T@U) ) (! ($generated@@32 $generated@@13 $generated@@141 $generated)
 :pattern ( ($generated@@32 $generated@@13 $generated@@141 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@142 () T@U)
(declare-fun $generated@@143 () T@U)
(declare-fun $generated@@144 () T@U)
(declare-fun $generated@@145 () Bool)
(declare-fun $generated@@146 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 6) (let (($generated@@147 true))
(let (($generated@@148 true))
(let (($generated@@149  (=> (= $generated@@142 ($generated@@97 $generated@@35 $generated@@143 $generated@@1 false)) (and (=> (= (ControlFlow 0 3) (- 0 5)) (or (not (= $generated@@144 $generated@@35)) (not true))) (=> (or (not (= $generated@@144 $generated@@35)) (not true)) (=> (and (= $generated@@145 ($generated@@16 ($generated@@96 $generated@@33 $generated@@49 $generated@@12 $generated@@142 $generated@@144 $generated@@44))) (> ($generated@@18 ($generated@@47 $generated@@13 ($generated@@48 $generated@@49 $generated@@50 ($generated@@48 $generated@@33 ($generated@@51 $generated@@49 $generated@@50) $generated@@143 $generated@@144) $generated@@44))) 0)) (and (=> (= (ControlFlow 0 3) (- 0 4)) $generated@@145) (=> $generated@@145 (and (=> (= (ControlFlow 0 3) 1) $generated@@148) (=> (= (ControlFlow 0 3) 2) $generated@@147))))))))))
(let (($generated@@150  (=> (and (and (and ($generated@@80 $generated@@143) ($generated@@146 $generated@@143)) ($generated@@32 $generated@@33 $generated@@144 $generated@@39)) (and (= 1 $generated@@83) (= (ControlFlow 0 6) 3))) $generated@@149)))
$generated@@150)))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 3) (- 4))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
