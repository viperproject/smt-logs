(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TChar () T@U)
(declare-fun TagChar () T@U)
(declare-fun TagSeq () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._module.CharChar? () T@U)
(declare-fun Tagclass._module.CharChar () T@U)
(declare-fun tytagFamily$CharChar () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.CharChar.MinChar (T@U T@U T@U) T@U)
(declare-fun |_module.CharChar.MinChar#canCall| (T@U T@U) Bool)
(declare-fun null () T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun Tclass._module.CharChar () T@U)
(declare-fun SeqType () T@T)
(declare-fun TSeq (T@U) T@U)
(declare-fun |Seq#Equal| (T@U T@U) Bool)
(declare-fun |Seq#Empty| () T@U)
(declare-fun charType () T@T)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun Tclass._module.CharChar? () T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun $LS (T@U) T@U)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun LitInt (Int) Int)
(declare-fun |Seq#Drop| (T@U Int) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun |char#ToInt| (T@U) Int)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun |char#FromInt| (Int) T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TChar TagChar TagSeq alloc Tagclass._module.CharChar? Tagclass._module.CharChar tytagFamily$CharChar)
)
(assert (= (Tag TChar) TagChar))
(assert  (and (and (= (Ctor refType) 3) (= (Ctor SeqType) 4)) (= (Ctor charType) 5)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($ly T@U) (this T@U) (|s#0| T@U) ) (!  (=> (or (|_module.CharChar.MinChar#canCall| this |s#0|) (and (< 0 $FunctionContextHeight) (and (and (and (or (not (= this null)) (not true)) ($Is refType this Tclass._module.CharChar)) ($Is SeqType |s#0| (TSeq TChar))) (not (|Seq#Equal| |s#0| |Seq#Empty|))))) ($Is charType (_module.CharChar.MinChar $ly this |s#0|) TChar))
 :pattern ( (_module.CharChar.MinChar $ly this |s#0|))
))))
(assert (= (|Seq#Length| |Seq#Empty|) 0))
(assert (forall (($o T@U) ) (! (= ($Is refType $o Tclass._module.CharChar?)  (or (= $o null) (= (dtype $o) Tclass._module.CharChar?)))
 :pattern ( ($Is refType $o Tclass._module.CharChar?))
)))
(assert (forall ((|c#0| T@U) ($h T@U) ) (! (= ($IsAlloc refType |c#0| Tclass._module.CharChar $h) ($IsAlloc refType |c#0| Tclass._module.CharChar? $h))
 :pattern ( ($IsAlloc refType |c#0| Tclass._module.CharChar $h))
 :pattern ( ($IsAlloc refType |c#0| Tclass._module.CharChar? $h))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($ly@@0 T@U) (this@@0 T@U) (|s#0@@0| T@U) ) (!  (=> (or (|_module.CharChar.MinChar#canCall| (Lit refType this@@0) (Lit SeqType |s#0@@0|)) (and (< 0 $FunctionContextHeight) (and (and (and (or (not (= this@@0 null)) (not true)) ($Is refType this@@0 Tclass._module.CharChar)) ($Is SeqType |s#0@@0| (TSeq TChar))) (not (|Seq#Equal| |s#0@@0| |Seq#Empty|))))) (and (=> (or (not (= (|Seq#Length| (Lit SeqType |s#0@@0|)) (LitInt 1))) (not true)) (|_module.CharChar.MinChar#canCall| (Lit refType this@@0) (Lit SeqType (|Seq#Drop| (Lit SeqType |s#0@@0|) (LitInt 1))))) (= (_module.CharChar.MinChar ($LS $ly@@0) (Lit refType this@@0) (Lit SeqType |s#0@@0|)) (let ((|ch#2| ($Unbox charType (|Seq#Index| (Lit SeqType |s#0@@0|) (LitInt 0)))))
(ite (= (|Seq#Length| (Lit SeqType |s#0@@0|)) (LitInt 1)) |ch#2| (let ((|m#2| (Lit charType (_module.CharChar.MinChar ($LS $ly@@0) (Lit refType this@@0) (Lit SeqType (|Seq#Drop| (Lit SeqType |s#0@@0|) (LitInt 1)))))))
(ite (< (|char#ToInt| |m#2|) (|char#ToInt| |ch#2|)) |m#2| |ch#2|)))))))
 :weight 3
 :pattern ( (_module.CharChar.MinChar ($LS $ly@@0) (Lit refType this@@0) (Lit SeqType |s#0@@0|)))
))))
(assert  (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 6)) (= (Ctor BoxType) 7)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 8))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall (($o@@0 T@U) ($h@@0 T@U) ) (! (= ($IsAlloc refType $o@@0 Tclass._module.CharChar? $h@@0)  (or (= $o@@0 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@0 $o@@0) alloc)))))
 :pattern ( ($IsAlloc refType $o@@0 Tclass._module.CharChar? $h@@0))
)))
(assert (forall ((s T@U) (n Int) ) (!  (=> (= n 0) (= (|Seq#Drop| s n) s))
 :pattern ( (|Seq#Drop| s n))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((s@@0 T@U) (n@@0 Int) ) (!  (=> (and (<= 0 n@@0) (<= n@@0 (|Seq#Length| s@@0))) (= (|Seq#Length| (|Seq#Drop| s@@0 n@@0)) (- (|Seq#Length| s@@0) n@@0)))
 :pattern ( (|Seq#Length| (|Seq#Drop| s@@0 n@@0)))
)))
(assert (forall ((s0 T@U) (s1 T@U) ) (! (= (|Seq#Equal| s0 s1)  (and (= (|Seq#Length| s0) (|Seq#Length| s1)) (forall ((j Int) ) (!  (=> (and (<= 0 j) (< j (|Seq#Length| s0))) (= (|Seq#Index| s0 j) (|Seq#Index| s1 j)))
 :pattern ( (|Seq#Index| s0 j))
 :pattern ( (|Seq#Index| s1 j))
))))
 :pattern ( (|Seq#Equal| s0 s1))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((v T@U) (t T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v) t h) ($IsAlloc T@@1 v t h))
 :pattern ( ($IsAllocBox ($Box T@@1 v) t h))
)))
(assert (forall ((s@@1 T@U) (n@@1 Int) (j@@0 Int) ) (!  (=> (and (and (<= 0 n@@1) (<= 0 j@@0)) (< j@@0 (- (|Seq#Length| s@@1) n@@1))) (= (|Seq#Index| (|Seq#Drop| s@@1 n@@1) j@@0) (|Seq#Index| s@@1 (+ j@@0 n@@1))))
 :weight 25
 :pattern ( (|Seq#Index| (|Seq#Drop| s@@1 n@@1) j@@0))
)))
(assert (forall ((bx T@U) ) (!  (=> ($IsBox bx Tclass._module.CharChar?) (and (= ($Box refType ($Unbox refType bx)) bx) ($Is refType ($Unbox refType bx) Tclass._module.CharChar?)))
 :pattern ( ($IsBox bx Tclass._module.CharChar?))
)))
(assert (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 Tclass._module.CharChar) (and (= ($Box refType ($Unbox refType bx@@0)) bx@@0) ($Is refType ($Unbox refType bx@@0) Tclass._module.CharChar)))
 :pattern ( ($IsBox bx@@0 Tclass._module.CharChar))
)))
(assert (forall ((|c#0@@0| T@U) ) (! (= ($Is refType |c#0@@0| Tclass._module.CharChar)  (and ($Is refType |c#0@@0| Tclass._module.CharChar?) (or (not (= |c#0@@0| null)) (not true))))
 :pattern ( ($Is refType |c#0@@0| Tclass._module.CharChar))
 :pattern ( ($Is refType |c#0@@0| Tclass._module.CharChar?))
)))
(assert (forall (($ly@@1 T@U) (this@@1 T@U) (|s#0@@1| T@U) ) (! (= (_module.CharChar.MinChar ($LS $ly@@1) this@@1 |s#0@@1|) (_module.CharChar.MinChar $ly@@1 this@@1 |s#0@@1|))
 :pattern ( (_module.CharChar.MinChar ($LS $ly@@1) this@@1 |s#0@@1|))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($ly@@2 T@U) (this@@2 T@U) (|s#0@@2| T@U) ) (!  (=> (or (|_module.CharChar.MinChar#canCall| this@@2 (Lit SeqType |s#0@@2|)) (and (< 0 $FunctionContextHeight) (and (and (and (or (not (= this@@2 null)) (not true)) ($Is refType this@@2 Tclass._module.CharChar)) ($Is SeqType |s#0@@2| (TSeq TChar))) (not (|Seq#Equal| |s#0@@2| |Seq#Empty|))))) (and (=> (or (not (= (|Seq#Length| (Lit SeqType |s#0@@2|)) (LitInt 1))) (not true)) (|_module.CharChar.MinChar#canCall| this@@2 (Lit SeqType (|Seq#Drop| (Lit SeqType |s#0@@2|) (LitInt 1))))) (= (_module.CharChar.MinChar ($LS $ly@@2) this@@2 (Lit SeqType |s#0@@2|)) (let ((|ch#1| ($Unbox charType (|Seq#Index| (Lit SeqType |s#0@@2|) (LitInt 0)))))
(ite (= (|Seq#Length| (Lit SeqType |s#0@@2|)) (LitInt 1)) |ch#1| (let ((|m#1| (_module.CharChar.MinChar ($LS $ly@@2) this@@2 (Lit SeqType (|Seq#Drop| (Lit SeqType |s#0@@2|) (LitInt 1))))))
(ite (< (|char#ToInt| |m#1|) (|char#ToInt| |ch#1|)) |m#1| |ch#1|)))))))
 :weight 3
 :pattern ( (_module.CharChar.MinChar ($LS $ly@@2) this@@2 (Lit SeqType |s#0@@2|)))
))))
(assert (forall ((a T@U) (b T@U) ) (!  (=> (|Seq#Equal| a b) (= a b))
 :pattern ( (|Seq#Equal| a b))
)))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 TChar) (and (= ($Box charType ($Unbox charType bx@@1)) bx@@1) ($Is charType ($Unbox charType bx@@1) TChar)))
 :pattern ( ($IsBox bx@@1 TChar))
)))
(assert (forall ((v@@0 T@U) (t@@0 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@0) t@@0) ($Is T@@2 v@@0 t@@0))
 :pattern ( ($IsBox ($Box T@@2 v@@0) t@@0))
)))
(assert (forall ((s@@2 T@U) ) (! (<= 0 (|Seq#Length| s@@2))
 :pattern ( (|Seq#Length| s@@2))
)))
(assert (forall ((v@@1 T@U) (t0@@0 T@U) (h@@0 T@U) ) (! (= ($IsAlloc SeqType v@@1 (TSeq t0@@0) h@@0) (forall ((i Int) ) (!  (=> (and (<= 0 i) (< i (|Seq#Length| v@@1))) ($IsAllocBox (|Seq#Index| v@@1 i) t0@@0 h@@0))
 :pattern ( (|Seq#Index| v@@1 i))
)))
 :pattern ( ($IsAlloc SeqType v@@1 (TSeq t0@@0) h@@0))
)))
(assert (forall ((t@@1 T@U) ) (! (= (Inv0_TSeq (TSeq t@@1)) t@@1)
 :pattern ( (TSeq t@@1))
)))
(assert (forall ((t@@2 T@U) ) (! (= (Tag (TSeq t@@2)) TagSeq)
 :pattern ( (TSeq t@@2))
)))
(assert (forall ((x@@5 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@5)) x@@5)
 :pattern ( ($Box T@@3 x@@5))
)))
(assert (forall ((n@@2 Int) ) (!  (=> (or (and (<= 0 n@@2) (< n@@2 55296)) (and (<= 57344 n@@2) (< n@@2 1114112))) (= (|char#ToInt| (|char#FromInt| n@@2)) n@@2))
 :pattern ( (|char#FromInt| n@@2))
)))
(assert  (and (forall ((t0@@1 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@1 t1@@0 t2 (MapType1Store t0@@1 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o@@1 T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@1 $f))  (=> (and (or (not (= $o@@1 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@1) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@1 $f))
)))
(assert (forall ((bx@@2 T@U) (t@@3 T@U) ) (!  (=> ($IsBox bx@@2 (TSeq t@@3)) (and (= ($Box SeqType ($Unbox SeqType bx@@2)) bx@@2) ($Is SeqType ($Unbox SeqType bx@@2) (TSeq t@@3))))
 :pattern ( ($IsBox bx@@2 (TSeq t@@3)))
)))
(assert (forall ((ch T@U) ) (!  (and (= (|char#FromInt| (|char#ToInt| ch)) ch) (or (and (<= 0 (|char#ToInt| ch)) (< (|char#ToInt| ch) 55296)) (and (<= 57344 (|char#ToInt| ch)) (< (|char#ToInt| ch) 1114112))))
 :pattern ( (|char#ToInt| ch))
)))
(assert (= (Tag Tclass._module.CharChar?) Tagclass._module.CharChar?))
(assert (= (TagFamily Tclass._module.CharChar?) tytagFamily$CharChar))
(assert (= (Tag Tclass._module.CharChar) Tagclass._module.CharChar))
(assert (= (TagFamily Tclass._module.CharChar) tytagFamily$CharChar))
(assert (forall ((s@@3 T@U) (n@@3 Int) (k Int) ) (!  (=> (and (and (<= 0 n@@3) (<= n@@3 k)) (< k (|Seq#Length| s@@3))) (= (|Seq#Index| (|Seq#Drop| s@@3 n@@3) (- k n@@3)) (|Seq#Index| s@@3 k)))
 :weight 25
 :pattern ( (|Seq#Index| s@@3 k) (|Seq#Drop| s@@3 n@@3))
)))
(assert (forall ((s@@4 T@U) (m@@4 Int) (n@@4 Int) ) (!  (=> (and (and (<= 0 m@@4) (<= 0 n@@4)) (<= (+ m@@4 n@@4) (|Seq#Length| s@@4))) (= (|Seq#Drop| (|Seq#Drop| s@@4 m@@4) n@@4) (|Seq#Drop| s@@4 (+ m@@4 n@@4))))
 :pattern ( (|Seq#Drop| (|Seq#Drop| s@@4 m@@4) n@@4))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($ly@@3 T@U) (this@@3 T@U) (|s#0@@3| T@U) ) (!  (=> (or (|_module.CharChar.MinChar#canCall| this@@3 |s#0@@3|) (and (< 0 $FunctionContextHeight) (and (and (and (or (not (= this@@3 null)) (not true)) ($Is refType this@@3 Tclass._module.CharChar)) ($Is SeqType |s#0@@3| (TSeq TChar))) (not (|Seq#Equal| |s#0@@3| |Seq#Empty|))))) (and (=> (or (not (= (|Seq#Length| |s#0@@3|) (LitInt 1))) (not true)) (|_module.CharChar.MinChar#canCall| this@@3 (|Seq#Drop| |s#0@@3| (LitInt 1)))) (= (_module.CharChar.MinChar ($LS $ly@@3) this@@3 |s#0@@3|) (let ((|ch#0| ($Unbox charType (|Seq#Index| |s#0@@3| (LitInt 0)))))
(ite (= (|Seq#Length| |s#0@@3|) (LitInt 1)) |ch#0| (let ((|m#0| (_module.CharChar.MinChar $ly@@3 this@@3 (|Seq#Drop| |s#0@@3| (LitInt 1)))))
(ite (< (|char#ToInt| |m#0|) (|char#ToInt| |ch#0|)) |m#0| |ch#0|)))))))
 :pattern ( (_module.CharChar.MinChar ($LS $ly@@3) this@@3 |s#0@@3|))
))))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((x@@7 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@7)) (Lit BoxType ($Box T@@4 x@@7)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@7)))
)))
(assert (forall ((s@@5 T@U) ) (!  (=> (= (|Seq#Length| s@@5) 0) (= s@@5 |Seq#Empty|))
 :pattern ( (|Seq#Length| s@@5))
)))
(assert (forall ((h@@1 T@U) (v@@2 T@U) ) (! ($IsAlloc charType v@@2 TChar h@@1)
 :pattern ( ($IsAlloc charType v@@2 TChar h@@1))
)))
(assert (forall ((v@@3 T@U) (t0@@2 T@U) ) (! (= ($Is SeqType v@@3 (TSeq t0@@2)) (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| v@@3))) ($IsBox (|Seq#Index| v@@3 i@@0) t0@@2))
 :pattern ( (|Seq#Index| v@@3 i@@0))
)))
 :pattern ( ($Is SeqType v@@3 (TSeq t0@@2)))
)))
(assert (forall ((v@@4 T@U) ) (! ($Is charType v@@4 TChar)
 :pattern ( ($Is charType v@@4 TChar))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |i#0@0| () Int)
(declare-fun |s#0@@4| () T@U)
(declare-fun this@@4 () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun $LZ () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun $Heap () T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsHeapAnchor (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 9) (let ((anon6_correct true))
(let ((anon4_correct  (=> (and (and (<= (LitInt 0) |i#0@0|) (< |i#0@0| (|Seq#Length| |s#0@@4|))) (and ($IsAllocBox ($Box refType this@@4) Tclass._module.CharChar? $Heap@0) ($IsAlloc SeqType |s#0@@4| (TSeq TChar) $Heap@0))) (and (=> (= (ControlFlow 0 3) (- 0 5)) (not (|Seq#Equal| |s#0@@4| |Seq#Empty|))) (=> (and (not (|Seq#Equal| |s#0@@4| |Seq#Empty|)) (|_module.CharChar.MinChar#canCall| this@@4 |s#0@@4|)) (and (=> (= (ControlFlow 0 3) (- 0 4)) (and (<= 0 |i#0@0|) (< |i#0@0| (|Seq#Length| |s#0@@4|)))) (=> (and (<= 0 |i#0@0|) (< |i#0@0| (|Seq#Length| |s#0@@4|))) (=> (and (<= (|char#ToInt| (_module.CharChar.MinChar ($LS $LZ) this@@4 |s#0@@4|)) (|char#ToInt| ($Unbox charType (|Seq#Index| |s#0@@4| |i#0@0|)))) (= (ControlFlow 0 3) 1)) anon6_correct))))))))
(let ((anon8_Else_correct  (=> (and (< |i#0@0| (LitInt 0)) (= (ControlFlow 0 7) 3)) anon4_correct)))
(let ((anon8_Then_correct  (=> (and (<= (LitInt 0) |i#0@0|) (= (ControlFlow 0 6) 3)) anon4_correct)))
(let ((anon7_Else_correct  (=> (and (=> (and (<= (LitInt 0) |i#0@0|) (< |i#0@0| (|Seq#Length| |s#0@@4|))) (<= (|char#ToInt| (_module.CharChar.MinChar ($LS $LZ) this@@4 |s#0@@4|)) (|char#ToInt| ($Unbox charType (|Seq#Index| |s#0@@4| |i#0@0|))))) (= (ControlFlow 0 2) 1)) anon6_correct)))
(let ((anon0_correct  (=> (and (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (or (not (= (|Seq#Length| |s#0@@4|) 0)) (not true))) (=> (and (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (= $Heap $Heap@0)) (and (and (=> (= (ControlFlow 0 8) 2) anon7_Else_correct) (=> (= (ControlFlow 0 8) 6) anon8_Then_correct)) (=> (= (ControlFlow 0 8) 7) anon8_Else_correct))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (and (or (not (= this@@4 null)) (not true)) (and ($Is refType this@@4 Tclass._module.CharChar) ($IsAlloc refType this@@4 Tclass._module.CharChar $Heap)))) (and (and ($Is SeqType |s#0@@4| (TSeq TChar)) ($IsAlloc SeqType |s#0@@4| (TSeq TChar) $Heap)) (and (= 1 $FunctionContextHeight) (= (ControlFlow 0 9) 8)))) anon0_correct)))
PreconditionGeneratedEntry_correct))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
