(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@22 () T@T)
(declare-fun $generated@@23 () T@U)
(declare-fun $generated@@24 () T@U)
(declare-fun $generated@@27 () T@U)
(declare-fun $generated@@30 () T@U)
(declare-fun $generated@@31 (T@T T@U) T@U)
(declare-fun $generated@@32 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@33 () T@T)
(declare-fun $generated@@34 () T@T)
(declare-fun $generated@@35 (T@T T@T) T@T)
(declare-fun $generated@@36 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@37 (T@T) T@T)
(declare-fun $generated@@38 (T@T) T@T)
(declare-fun $generated@@58 (T@U T@U) Bool)
(declare-fun $generated@@62 (T@T T@U) T@U)
(declare-fun $generated@@65 (T@T T@U) T@U)
(declare-fun $generated@@73 (T@T T@U T@U) Bool)
(declare-fun $generated@@80 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@81 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@82 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@114 (T@U) T@U)
(declare-fun $generated@@115 (T@U) T@U)
(declare-fun $generated@@116 (T@U) Bool)
(declare-fun $generated@@117 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert (= ($generated@@5 $generated@@22) 3))
(assert (forall (($generated@@25 T@U) ($generated@@26 T@U) ) (! (= ($generated@@21 $generated@@22 $generated@@25 $generated@@23 $generated@@26) ($generated@@21 $generated@@22 $generated@@25 $generated@@24 $generated@@26))
 :pattern ( ($generated@@21 $generated@@22 $generated@@25 $generated@@23 $generated@@26))
 :pattern ( ($generated@@21 $generated@@22 $generated@@25 $generated@@24 $generated@@26))
)))
(assert (forall (($generated@@28 T@U) ($generated@@29 T@U) ) (! (= ($generated@@21 $generated@@22 $generated@@28 $generated@@27 $generated@@29) ($generated@@21 $generated@@22 $generated@@28 $generated@@24 $generated@@29))
 :pattern ( ($generated@@21 $generated@@22 $generated@@28 $generated@@27 $generated@@29))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@39 T@T) ($generated@@40 T@T) ($generated@@41 T@U) ($generated@@42 T@U) ($generated@@43 T@U) ) (! (= ($generated@@32 $generated@@39 $generated@@40 ($generated@@36 $generated@@39 $generated@@40 $generated@@42 $generated@@43 $generated@@41) $generated@@43) $generated@@41)
 :weight 0
)) (forall (($generated@@44 T@T) ($generated@@45 T@T) ($generated@@46 T@U) ($generated@@47 T@U) ($generated@@48 T@U) ($generated@@49 T@U) ) (!  (or (= $generated@@48 $generated@@49) (= ($generated@@32 $generated@@44 $generated@@45 ($generated@@36 $generated@@44 $generated@@45 $generated@@47 $generated@@48 $generated@@46) $generated@@49) ($generated@@32 $generated@@44 $generated@@45 $generated@@47 $generated@@49)))
 :weight 0
))) (= ($generated@@5 $generated@@33) 4)) (= ($generated@@5 $generated@@34) 5)) (forall (($generated@@50 T@T) ($generated@@51 T@T) ) (= ($generated@@5 ($generated@@35 $generated@@50 $generated@@51)) 6))) (forall (($generated@@52 T@T) ($generated@@53 T@T) ) (! (= ($generated@@37 ($generated@@35 $generated@@52 $generated@@53)) $generated@@52)
 :pattern ( ($generated@@35 $generated@@52 $generated@@53))
))) (forall (($generated@@54 T@T) ($generated@@55 T@T) ) (! (= ($generated@@38 ($generated@@35 $generated@@54 $generated@@55)) $generated@@55)
 :pattern ( ($generated@@35 $generated@@54 $generated@@55))
))))
(assert (forall (($generated@@56 T@U) ($generated@@57 T@U) ) (! (= ($generated@@21 $generated@@22 $generated@@56 $generated@@24 $generated@@57)  (or (= $generated@@56 $generated@@30) ($generated@@10 ($generated@@31 $generated@@6 ($generated@@32 $generated@@33 $generated@@34 ($generated@@32 $generated@@22 ($generated@@35 $generated@@33 $generated@@34) $generated@@57 $generated@@56) $generated)))))
 :pattern ( ($generated@@21 $generated@@22 $generated@@56 $generated@@24 $generated@@57))
)))
(assert (forall (($generated@@59 T@U) ($generated@@60 T@U) ) (!  (=> ($generated@@58 $generated@@59 $generated@@60) (forall (($generated@@61 T@U) ) (!  (=> ($generated@@10 ($generated@@31 $generated@@6 ($generated@@32 $generated@@33 $generated@@34 ($generated@@32 $generated@@22 ($generated@@35 $generated@@33 $generated@@34) $generated@@59 $generated@@61) $generated))) ($generated@@10 ($generated@@31 $generated@@6 ($generated@@32 $generated@@33 $generated@@34 ($generated@@32 $generated@@22 ($generated@@35 $generated@@33 $generated@@34) $generated@@60 $generated@@61) $generated))))
 :pattern ( ($generated@@32 $generated@@33 $generated@@34 ($generated@@32 $generated@@22 ($generated@@35 $generated@@33 $generated@@34) $generated@@60 $generated@@61) $generated))
)))
 :pattern ( ($generated@@58 $generated@@59 $generated@@60))
)))
(assert (forall (($generated@@63 T@U) ($generated@@64 T@T) ) (! (= ($generated@@62 $generated@@64 $generated@@63) $generated@@63)
 :pattern ( ($generated@@62 $generated@@64 $generated@@63))
)))
(assert (forall (($generated@@66 T@U) ($generated@@67 T@T) ) (! (= ($generated@@65 $generated@@67 ($generated@@31 $generated@@67 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@31 $generated@@67 $generated@@66))
)))
(assert (forall (($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@T) ) (!  (=> ($generated@@58 $generated@@68 $generated@@69) (=> ($generated@@21 $generated@@72 $generated@@70 $generated@@71 $generated@@68) ($generated@@21 $generated@@72 $generated@@70 $generated@@71 $generated@@69)))
 :pattern ( ($generated@@58 $generated@@68 $generated@@69) ($generated@@21 $generated@@72 $generated@@70 $generated@@71 $generated@@68))
)))
(assert (forall (($generated@@74 T@U) ) (! (= ($generated@@73 $generated@@22 $generated@@74 $generated@@23)  (and ($generated@@73 $generated@@22 $generated@@74 $generated@@24) (or (not (= $generated@@74 $generated@@30)) (not true))))
 :pattern ( ($generated@@73 $generated@@22 $generated@@74 $generated@@23))
 :pattern ( ($generated@@73 $generated@@22 $generated@@74 $generated@@24))
)))
(assert (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (!  (=> (or (not (= $generated@@75 $generated@@77)) (not true)) (=> (and ($generated@@58 $generated@@75 $generated@@76) ($generated@@58 $generated@@76 $generated@@77)) ($generated@@58 $generated@@75 $generated@@77)))
 :pattern ( ($generated@@58 $generated@@75 $generated@@76) ($generated@@58 $generated@@76 $generated@@77))
)))
(assert (forall (($generated@@78 T@U) ($generated@@79 T@T) ) (! (= ($generated@@31 $generated@@79 ($generated@@65 $generated@@79 $generated@@78)) $generated@@78)
 :pattern ( ($generated@@65 $generated@@79 $generated@@78))
)))
(assert  (and (forall (($generated@@83 T@T) ($generated@@84 T@T) ($generated@@85 T@T) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ) (! (= ($generated@@80 $generated@@83 $generated@@84 $generated@@85 ($generated@@82 $generated@@83 $generated@@84 $generated@@85 $generated@@87 $generated@@88 $generated@@89 $generated@@86) $generated@@88 $generated@@89) $generated@@86)
 :weight 0
)) (and (forall (($generated@@90 T@T) ($generated@@91 T@T) ($generated@@92 T@T) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ) (!  (or (= $generated@@95 $generated@@97) (= ($generated@@80 $generated@@90 $generated@@91 $generated@@92 ($generated@@82 $generated@@90 $generated@@91 $generated@@92 $generated@@94 $generated@@95 $generated@@96 $generated@@93) $generated@@97 $generated@@98) ($generated@@80 $generated@@90 $generated@@91 $generated@@92 $generated@@94 $generated@@97 $generated@@98)))
 :weight 0
)) (forall (($generated@@99 T@T) ($generated@@100 T@T) ($generated@@101 T@T) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ) (!  (or (= $generated@@105 $generated@@107) (= ($generated@@80 $generated@@99 $generated@@100 $generated@@101 ($generated@@82 $generated@@99 $generated@@100 $generated@@101 $generated@@103 $generated@@104 $generated@@105 $generated@@102) $generated@@106 $generated@@107) ($generated@@80 $generated@@99 $generated@@100 $generated@@101 $generated@@103 $generated@@106 $generated@@107)))
 :weight 0
)))))
(assert (forall (($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 Bool) ($generated@@112 T@U) ($generated@@113 T@U) ) (! (= ($generated@@10 ($generated@@80 $generated@@22 $generated@@33 $generated@@6 ($generated@@81 $generated@@108 $generated@@109 $generated@@110 $generated@@111) $generated@@112 $generated@@113))  (=> (and (or (not (= $generated@@112 $generated@@108)) (not true)) ($generated@@10 ($generated@@31 $generated@@6 ($generated@@32 $generated@@33 $generated@@34 ($generated@@32 $generated@@22 ($generated@@35 $generated@@33 $generated@@34) $generated@@109 $generated@@112) $generated@@110)))) $generated@@111))
 :pattern ( ($generated@@80 $generated@@22 $generated@@33 $generated@@6 ($generated@@81 $generated@@108 $generated@@109 $generated@@110 $generated@@111) $generated@@112 $generated@@113))
)))
(assert (= ($generated@@114 $generated@@23) $generated@@0))
(assert (= ($generated@@115 $generated@@23) $generated@@3))
(assert (= ($generated@@114 $generated@@27) $generated@@1))
(assert (= ($generated@@115 $generated@@27) $generated@@4))
(assert (= ($generated@@114 $generated@@24) $generated@@2))
(assert (= ($generated@@115 $generated@@24) $generated@@3))
(assert (forall (($generated@@118 T@U) ) (! (= ($generated@@73 $generated@@22 $generated@@118 $generated@@24)  (or (= $generated@@118 $generated@@30) ($generated@@116 ($generated@@117 $generated@@118))))
 :pattern ( ($generated@@73 $generated@@22 $generated@@118 $generated@@24))
)))
(assert (forall (($generated@@119 T@U) ) (! (= ($generated@@73 $generated@@22 $generated@@119 $generated@@27)  (and ($generated@@73 $generated@@22 $generated@@119 $generated@@24) ($generated@@10 ($generated@@62 $generated@@6 ($generated@@9 true)))))
 :pattern ( ($generated@@73 $generated@@22 $generated@@119 $generated@@27))
)))
(assert (forall (($generated@@120 T@U) ($generated@@121 T@T) ) (! (= ($generated@@65 $generated@@121 ($generated@@62 $generated@@121 $generated@@120)) ($generated@@62 $generated@@34 ($generated@@65 $generated@@121 $generated@@120)))
 :pattern ( ($generated@@65 $generated@@121 ($generated@@62 $generated@@121 $generated@@120)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@122 () Bool)
(declare-fun $generated@@123 () Bool)
(declare-fun $generated@@124 () T@U)
(declare-fun $generated@@125 () T@U)
(declare-fun $generated@@126 () T@U)
(declare-fun $generated@@127 () T@U)
(declare-fun $generated@@128 () T@U)
(declare-fun $generated@@129 (T@U) Bool)
(declare-fun $generated@@130 (T@U) Bool)
(declare-fun $generated@@131 () T@U)
(declare-fun $generated@@132 () T@U)
(declare-fun $generated@@133 () T@U)
(declare-fun $generated@@134 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 9) (let (($generated@@135  (=> (and (and (and (not ($generated@@10 ($generated@@62 $generated@@6 ($generated@@9 true)))) (not ($generated@@10 ($generated@@62 $generated@@6 ($generated@@9 true))))) (not ($generated@@10 ($generated@@62 $generated@@6 ($generated@@9 true))))) (= (ControlFlow 0 7) (- 0 6))) false)))
(let (($generated@@136 true))
(let (($generated@@137  (=> (= (ControlFlow 0 4) (- 0 3)) $generated@@122)))
(let (($generated@@138  (=> (= (ControlFlow 0 2) (- 0 1)) $generated@@123)))
(let (($generated@@139  (=> (= $generated@@124 ($generated@@81 $generated@@30 $generated@@125 $generated false)) (=> (and (and (=> $generated@@123 (and ($generated@@73 $generated@@22 $generated@@126 $generated@@23) ($generated@@21 $generated@@22 $generated@@126 $generated@@23 $generated@@125))) (=> $generated@@122 (and ($generated@@73 $generated@@22 $generated@@127 $generated@@27) ($generated@@21 $generated@@22 $generated@@127 $generated@@27 $generated@@125)))) (and ($generated@@73 $generated@@22 $generated@@128 $generated@@24) ($generated@@21 $generated@@22 $generated@@128 $generated@@24 $generated@@125))) (and (and (and (=> (= (ControlFlow 0 8) 2) $generated@@138) (=> (= (ControlFlow 0 8) 4) $generated@@137)) (=> (= (ControlFlow 0 8) 5) $generated@@136)) (=> (= (ControlFlow 0 8) 7) $generated@@135))))))
(let (($generated@@140  (=> (and ($generated@@129 $generated@@125) ($generated@@130 $generated@@125)) (=> (and (and (=> $generated@@123 (and ($generated@@73 $generated@@22 $generated@@131 $generated@@23) ($generated@@21 $generated@@22 $generated@@131 $generated@@23 $generated@@125))) true) (and (=> $generated@@122 (and ($generated@@73 $generated@@22 $generated@@132 $generated@@27) ($generated@@21 $generated@@22 $generated@@132 $generated@@27 $generated@@125))) true)) (=> (and (and (and ($generated@@73 $generated@@22 $generated@@133 $generated@@24) ($generated@@21 $generated@@22 $generated@@133 $generated@@24 $generated@@125)) true) (and (= 1 $generated@@134) (= (ControlFlow 0 9) 8))) $generated@@139)))))
$generated@@140)))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 4) (- 3))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
