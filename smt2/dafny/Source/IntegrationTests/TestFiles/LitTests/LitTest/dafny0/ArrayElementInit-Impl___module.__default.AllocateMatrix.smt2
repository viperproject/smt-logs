(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._System.object? () T@U)
(declare-fun Tagclass._System.object () T@U)
(declare-fun Tagclass._System.array? () T@U)
(declare-fun Tagclass._System.array () T@U)
(declare-fun Tagclass._System.array3? () T@U)
(declare-fun Tagclass._System.array3 () T@U)
(declare-fun Tagclass._System.array2? () T@U)
(declare-fun Tagclass._System.array2 () T@U)
(declare-fun tytagFamily$object () T@U)
(declare-fun tytagFamily$array () T@U)
(declare-fun tytagFamily$array3 () T@U)
(declare-fun tytagFamily$array2 () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun _System.array.Length (T@U) Int)
(declare-fun Tclass._System.array? (T@U) T@U)
(declare-fun null () T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun _System.array3.Length0 (T@U) Int)
(declare-fun Tclass._System.array3? (T@U) T@U)
(declare-fun _System.array3.Length1 (T@U) Int)
(declare-fun _System.array3.Length2 (T@U) Int)
(declare-fun _System.array2.Length0 (T@U) Int)
(declare-fun Tclass._System.array2? (T@U) T@U)
(declare-fun _System.array2.Length1 (T@U) Int)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun Tclass._System.array (T@U) T@U)
(declare-fun Tclass._System.array3 (T@U) T@U)
(declare-fun Tclass._System.array2 (T@U) T@U)
(declare-fun Tclass._System.object () T@U)
(declare-fun Tclass._System.object? () T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun Tclass._System.array?_0 (T@U) T@U)
(declare-fun Tclass._System.array_0 (T@U) T@U)
(declare-fun Tclass._System.array3?_0 (T@U) T@U)
(declare-fun Tclass._System.array3_0 (T@U) T@U)
(declare-fun Tclass._System.array2?_0 (T@U) T@U)
(declare-fun Tclass._System.array2_0 (T@U) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt alloc Tagclass._System.object? Tagclass._System.object Tagclass._System.array? Tagclass._System.array Tagclass._System.array3? Tagclass._System.array3 Tagclass._System.array2? Tagclass._System.array2 tytagFamily$object tytagFamily$array tytagFamily$array3 tytagFamily$array2)
)
(assert (= (Tag TInt) TagInt))
(assert (forall ((_System.array$arg T@U) ($o T@U) ) (!  (=> (and (or (not (= $o null)) (not true)) (= (dtype $o) (Tclass._System.array? _System.array$arg))) ($Is intType (int_2_U (_System.array.Length $o)) TInt))
 :pattern ( (_System.array.Length $o) (Tclass._System.array? _System.array$arg))
)))
(assert (forall ((_System.array3$arg T@U) ($o@@0 T@U) ) (!  (=> (and (or (not (= $o@@0 null)) (not true)) (= (dtype $o@@0) (Tclass._System.array3? _System.array3$arg))) ($Is intType (int_2_U (_System.array3.Length0 $o@@0)) TInt))
 :pattern ( (_System.array3.Length0 $o@@0) (Tclass._System.array3? _System.array3$arg))
)))
(assert (forall ((_System.array3$arg@@0 T@U) ($o@@1 T@U) ) (!  (=> (and (or (not (= $o@@1 null)) (not true)) (= (dtype $o@@1) (Tclass._System.array3? _System.array3$arg@@0))) ($Is intType (int_2_U (_System.array3.Length1 $o@@1)) TInt))
 :pattern ( (_System.array3.Length1 $o@@1) (Tclass._System.array3? _System.array3$arg@@0))
)))
(assert (forall ((_System.array3$arg@@1 T@U) ($o@@2 T@U) ) (!  (=> (and (or (not (= $o@@2 null)) (not true)) (= (dtype $o@@2) (Tclass._System.array3? _System.array3$arg@@1))) ($Is intType (int_2_U (_System.array3.Length2 $o@@2)) TInt))
 :pattern ( (_System.array3.Length2 $o@@2) (Tclass._System.array3? _System.array3$arg@@1))
)))
(assert (forall ((_System.array2$arg T@U) ($o@@3 T@U) ) (!  (=> (and (or (not (= $o@@3 null)) (not true)) (= (dtype $o@@3) (Tclass._System.array2? _System.array2$arg))) ($Is intType (int_2_U (_System.array2.Length0 $o@@3)) TInt))
 :pattern ( (_System.array2.Length0 $o@@3) (Tclass._System.array2? _System.array2$arg))
)))
(assert (forall ((_System.array2$arg@@0 T@U) ($o@@4 T@U) ) (!  (=> (and (or (not (= $o@@4 null)) (not true)) (= (dtype $o@@4) (Tclass._System.array2? _System.array2$arg@@0))) ($Is intType (int_2_U (_System.array2.Length1 $o@@4)) TInt))
 :pattern ( (_System.array2.Length1 $o@@4) (Tclass._System.array2? _System.array2$arg@@0))
)))
(assert (= (Ctor refType) 3))
(assert (forall ((_System.array$arg@@0 T@U) (|c#0| T@U) ($h T@U) ) (! (= ($IsAlloc refType |c#0| (Tclass._System.array _System.array$arg@@0) $h) ($IsAlloc refType |c#0| (Tclass._System.array? _System.array$arg@@0) $h))
 :pattern ( ($IsAlloc refType |c#0| (Tclass._System.array _System.array$arg@@0) $h))
 :pattern ( ($IsAlloc refType |c#0| (Tclass._System.array? _System.array$arg@@0) $h))
)))
(assert (forall ((_System.array3$arg@@2 T@U) (|c#0@@0| T@U) ($h@@0 T@U) ) (! (= ($IsAlloc refType |c#0@@0| (Tclass._System.array3 _System.array3$arg@@2) $h@@0) ($IsAlloc refType |c#0@@0| (Tclass._System.array3? _System.array3$arg@@2) $h@@0))
 :pattern ( ($IsAlloc refType |c#0@@0| (Tclass._System.array3 _System.array3$arg@@2) $h@@0))
 :pattern ( ($IsAlloc refType |c#0@@0| (Tclass._System.array3? _System.array3$arg@@2) $h@@0))
)))
(assert (forall ((_System.array2$arg@@1 T@U) (|c#0@@1| T@U) ($h@@1 T@U) ) (! (= ($IsAlloc refType |c#0@@1| (Tclass._System.array2 _System.array2$arg@@1) $h@@1) ($IsAlloc refType |c#0@@1| (Tclass._System.array2? _System.array2$arg@@1) $h@@1))
 :pattern ( ($IsAlloc refType |c#0@@1| (Tclass._System.array2 _System.array2$arg@@1) $h@@1))
 :pattern ( ($IsAlloc refType |c#0@@1| (Tclass._System.array2? _System.array2$arg@@1) $h@@1))
)))
(assert (forall ((|c#0@@2| T@U) ($h@@2 T@U) ) (! (= ($IsAlloc refType |c#0@@2| Tclass._System.object $h@@2) ($IsAlloc refType |c#0@@2| Tclass._System.object? $h@@2))
 :pattern ( ($IsAlloc refType |c#0@@2| Tclass._System.object $h@@2))
 :pattern ( ($IsAlloc refType |c#0@@2| Tclass._System.object? $h@@2))
)))
(assert  (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 4)) (= (Ctor BoxType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 6))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((_System.array$arg@@1 T@U) ($o@@5 T@U) ($h@@3 T@U) ) (! (= ($IsAlloc refType $o@@5 (Tclass._System.array? _System.array$arg@@1) $h@@3)  (or (= $o@@5 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@3 $o@@5) alloc)))))
 :pattern ( ($IsAlloc refType $o@@5 (Tclass._System.array? _System.array$arg@@1) $h@@3))
)))
(assert (forall ((_System.array3$arg@@3 T@U) ($o@@6 T@U) ($h@@4 T@U) ) (! (= ($IsAlloc refType $o@@6 (Tclass._System.array3? _System.array3$arg@@3) $h@@4)  (or (= $o@@6 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@4 $o@@6) alloc)))))
 :pattern ( ($IsAlloc refType $o@@6 (Tclass._System.array3? _System.array3$arg@@3) $h@@4))
)))
(assert (forall ((_System.array2$arg@@2 T@U) ($o@@7 T@U) ($h@@5 T@U) ) (! (= ($IsAlloc refType $o@@7 (Tclass._System.array2? _System.array2$arg@@2) $h@@5)  (or (= $o@@7 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@5 $o@@7) alloc)))))
 :pattern ( ($IsAlloc refType $o@@7 (Tclass._System.array2? _System.array2$arg@@2) $h@@5))
)))
(assert (forall (($o@@8 T@U) ($h@@6 T@U) ) (! (= ($IsAlloc refType $o@@8 Tclass._System.object? $h@@6)  (or (= $o@@8 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@6 $o@@8) alloc)))))
 :pattern ( ($IsAlloc refType $o@@8 Tclass._System.object? $h@@6))
)))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((_System.array$arg@@2 T@U) (|c#0@@3| T@U) ) (! (= ($Is refType |c#0@@3| (Tclass._System.array _System.array$arg@@2))  (and ($Is refType |c#0@@3| (Tclass._System.array? _System.array$arg@@2)) (or (not (= |c#0@@3| null)) (not true))))
 :pattern ( ($Is refType |c#0@@3| (Tclass._System.array _System.array$arg@@2)))
 :pattern ( ($Is refType |c#0@@3| (Tclass._System.array? _System.array$arg@@2)))
)))
(assert (forall ((_System.array3$arg@@4 T@U) (|c#0@@4| T@U) ) (! (= ($Is refType |c#0@@4| (Tclass._System.array3 _System.array3$arg@@4))  (and ($Is refType |c#0@@4| (Tclass._System.array3? _System.array3$arg@@4)) (or (not (= |c#0@@4| null)) (not true))))
 :pattern ( ($Is refType |c#0@@4| (Tclass._System.array3 _System.array3$arg@@4)))
 :pattern ( ($Is refType |c#0@@4| (Tclass._System.array3? _System.array3$arg@@4)))
)))
(assert (forall ((_System.array2$arg@@3 T@U) (|c#0@@5| T@U) ) (! (= ($Is refType |c#0@@5| (Tclass._System.array2 _System.array2$arg@@3))  (and ($Is refType |c#0@@5| (Tclass._System.array2? _System.array2$arg@@3)) (or (not (= |c#0@@5| null)) (not true))))
 :pattern ( ($Is refType |c#0@@5| (Tclass._System.array2 _System.array2$arg@@3)))
 :pattern ( ($Is refType |c#0@@5| (Tclass._System.array2? _System.array2$arg@@3)))
)))
(assert (forall ((h@@0 T@U) (k@@0 T@U) (v T@U) (t T@U) (T@@1 T@T) ) (!  (=> ($HeapSucc h@@0 k@@0) (=> ($IsAlloc T@@1 v t h@@0) ($IsAlloc T@@1 v t k@@0)))
 :pattern ( ($HeapSucc h@@0 k@@0) ($IsAlloc T@@1 v t h@@0))
)))
(assert (forall ((_System.array$arg@@3 T@U) ) (!  (and (= (Tag (Tclass._System.array? _System.array$arg@@3)) Tagclass._System.array?) (= (TagFamily (Tclass._System.array? _System.array$arg@@3)) tytagFamily$array))
 :pattern ( (Tclass._System.array? _System.array$arg@@3))
)))
(assert (forall ((_System.array$arg@@4 T@U) ) (!  (and (= (Tag (Tclass._System.array _System.array$arg@@4)) Tagclass._System.array) (= (TagFamily (Tclass._System.array _System.array$arg@@4)) tytagFamily$array))
 :pattern ( (Tclass._System.array _System.array$arg@@4))
)))
(assert (forall ((_System.array3$arg@@5 T@U) ) (!  (and (= (Tag (Tclass._System.array3? _System.array3$arg@@5)) Tagclass._System.array3?) (= (TagFamily (Tclass._System.array3? _System.array3$arg@@5)) tytagFamily$array3))
 :pattern ( (Tclass._System.array3? _System.array3$arg@@5))
)))
(assert (forall ((_System.array3$arg@@6 T@U) ) (!  (and (= (Tag (Tclass._System.array3 _System.array3$arg@@6)) Tagclass._System.array3) (= (TagFamily (Tclass._System.array3 _System.array3$arg@@6)) tytagFamily$array3))
 :pattern ( (Tclass._System.array3 _System.array3$arg@@6))
)))
(assert (forall ((_System.array2$arg@@4 T@U) ) (!  (and (= (Tag (Tclass._System.array2? _System.array2$arg@@4)) Tagclass._System.array2?) (= (TagFamily (Tclass._System.array2? _System.array2$arg@@4)) tytagFamily$array2))
 :pattern ( (Tclass._System.array2? _System.array2$arg@@4))
)))
(assert (forall ((_System.array2$arg@@5 T@U) ) (!  (and (= (Tag (Tclass._System.array2 _System.array2$arg@@5)) Tagclass._System.array2) (= (TagFamily (Tclass._System.array2 _System.array2$arg@@5)) tytagFamily$array2))
 :pattern ( (Tclass._System.array2 _System.array2$arg@@5))
)))
(assert (forall ((_System.array$arg@@5 T@U) ($o@@9 T@U) ) (! (= ($Is refType $o@@9 (Tclass._System.array? _System.array$arg@@5))  (or (= $o@@9 null) (= (dtype $o@@9) (Tclass._System.array? _System.array$arg@@5))))
 :pattern ( ($Is refType $o@@9 (Tclass._System.array? _System.array$arg@@5)))
)))
(assert (forall ((_System.array3$arg@@7 T@U) ($o@@10 T@U) ) (! (= ($Is refType $o@@10 (Tclass._System.array3? _System.array3$arg@@7))  (or (= $o@@10 null) (= (dtype $o@@10) (Tclass._System.array3? _System.array3$arg@@7))))
 :pattern ( ($Is refType $o@@10 (Tclass._System.array3? _System.array3$arg@@7)))
)))
(assert (forall ((_System.array2$arg@@6 T@U) ($o@@11 T@U) ) (! (= ($Is refType $o@@11 (Tclass._System.array2? _System.array2$arg@@6))  (or (= $o@@11 null) (= (dtype $o@@11) (Tclass._System.array2? _System.array2$arg@@6))))
 :pattern ( ($Is refType $o@@11 (Tclass._System.array2? _System.array2$arg@@6)))
)))
(assert (forall ((|c#0@@6| T@U) ) (! (= ($Is refType |c#0@@6| Tclass._System.object)  (and ($Is refType |c#0@@6| Tclass._System.object?) (or (not (= |c#0@@6| null)) (not true))))
 :pattern ( ($Is refType |c#0@@6| Tclass._System.object))
 :pattern ( ($Is refType |c#0@@6| Tclass._System.object?))
)))
(assert (forall ((a T@U) (b T@U) (c T@U) ) (!  (=> (or (not (= a c)) (not true)) (=> (and ($HeapSucc a b) ($HeapSucc b c)) ($HeapSucc a c)))
 :pattern ( ($HeapSucc a b) ($HeapSucc b c))
)))
(assert (forall ((o@@0 T@U) ) (! (<= 0 (_System.array.Length o@@0))
 :pattern ( (_System.array.Length o@@0))
)))
(assert (forall ((o@@1 T@U) ) (! (<= 0 (_System.array3.Length0 o@@1))
 :pattern ( (_System.array3.Length0 o@@1))
)))
(assert (forall ((o@@2 T@U) ) (! (<= 0 (_System.array3.Length1 o@@2))
 :pattern ( (_System.array3.Length1 o@@2))
)))
(assert (forall ((o@@3 T@U) ) (! (<= 0 (_System.array3.Length2 o@@3))
 :pattern ( (_System.array3.Length2 o@@3))
)))
(assert (forall ((o@@4 T@U) ) (! (<= 0 (_System.array2.Length0 o@@4))
 :pattern ( (_System.array2.Length0 o@@4))
)))
(assert (forall ((o@@5 T@U) ) (! (<= 0 (_System.array2.Length1 o@@5))
 :pattern ( (_System.array2.Length1 o@@5))
)))
(assert (forall (($o@@12 T@U) ) (! ($Is refType $o@@12 Tclass._System.object?)
 :pattern ( ($Is refType $o@@12 Tclass._System.object?))
)))
(assert (forall ((_System.array$arg@@6 T@U) ) (! (= (Tclass._System.array?_0 (Tclass._System.array? _System.array$arg@@6)) _System.array$arg@@6)
 :pattern ( (Tclass._System.array? _System.array$arg@@6))
)))
(assert (forall ((_System.array$arg@@7 T@U) ) (! (= (Tclass._System.array_0 (Tclass._System.array _System.array$arg@@7)) _System.array$arg@@7)
 :pattern ( (Tclass._System.array _System.array$arg@@7))
)))
(assert (forall ((_System.array3$arg@@8 T@U) ) (! (= (Tclass._System.array3?_0 (Tclass._System.array3? _System.array3$arg@@8)) _System.array3$arg@@8)
 :pattern ( (Tclass._System.array3? _System.array3$arg@@8))
)))
(assert (forall ((_System.array3$arg@@9 T@U) ) (! (= (Tclass._System.array3_0 (Tclass._System.array3 _System.array3$arg@@9)) _System.array3$arg@@9)
 :pattern ( (Tclass._System.array3 _System.array3$arg@@9))
)))
(assert (forall ((_System.array2$arg@@7 T@U) ) (! (= (Tclass._System.array2?_0 (Tclass._System.array2? _System.array2$arg@@7)) _System.array2$arg@@7)
 :pattern ( (Tclass._System.array2? _System.array2$arg@@7))
)))
(assert (forall ((_System.array2$arg@@8 T@U) ) (! (= (Tclass._System.array2_0 (Tclass._System.array2 _System.array2$arg@@8)) _System.array2$arg@@8)
 :pattern ( (Tclass._System.array2 _System.array2$arg@@8))
)))
(assert (forall ((x@@5 T@U) (T@@2 T@T) ) (! (= ($Unbox T@@2 ($Box T@@2 x@@5)) x@@5)
 :pattern ( ($Box T@@2 x@@5))
)))
(assert (forall ((_System.array$arg@@8 T@U) ($h@@7 T@U) ($o@@13 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@7) (and (or (not (= $o@@13 null)) (not true)) (= (dtype $o@@13) (Tclass._System.array? _System.array$arg@@8)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@7 $o@@13) alloc)))) ($IsAlloc intType (int_2_U (_System.array.Length $o@@13)) TInt $h@@7))
 :pattern ( (_System.array.Length $o@@13) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@7 $o@@13) alloc)) (Tclass._System.array? _System.array$arg@@8))
)))
(assert (forall ((_System.array3$arg@@10 T@U) ($h@@8 T@U) ($o@@14 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@8) (and (or (not (= $o@@14 null)) (not true)) (= (dtype $o@@14) (Tclass._System.array3? _System.array3$arg@@10)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@8 $o@@14) alloc)))) ($IsAlloc intType (int_2_U (_System.array3.Length0 $o@@14)) TInt $h@@8))
 :pattern ( (_System.array3.Length0 $o@@14) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@8 $o@@14) alloc)) (Tclass._System.array3? _System.array3$arg@@10))
)))
(assert (forall ((_System.array3$arg@@11 T@U) ($h@@9 T@U) ($o@@15 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@9) (and (or (not (= $o@@15 null)) (not true)) (= (dtype $o@@15) (Tclass._System.array3? _System.array3$arg@@11)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@9 $o@@15) alloc)))) ($IsAlloc intType (int_2_U (_System.array3.Length1 $o@@15)) TInt $h@@9))
 :pattern ( (_System.array3.Length1 $o@@15) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@9 $o@@15) alloc)) (Tclass._System.array3? _System.array3$arg@@11))
)))
(assert (forall ((_System.array3$arg@@12 T@U) ($h@@10 T@U) ($o@@16 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@10) (and (or (not (= $o@@16 null)) (not true)) (= (dtype $o@@16) (Tclass._System.array3? _System.array3$arg@@12)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@10 $o@@16) alloc)))) ($IsAlloc intType (int_2_U (_System.array3.Length2 $o@@16)) TInt $h@@10))
 :pattern ( (_System.array3.Length2 $o@@16) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@10 $o@@16) alloc)) (Tclass._System.array3? _System.array3$arg@@12))
)))
(assert (forall ((_System.array2$arg@@9 T@U) ($h@@11 T@U) ($o@@17 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@11) (and (or (not (= $o@@17 null)) (not true)) (= (dtype $o@@17) (Tclass._System.array2? _System.array2$arg@@9)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@11 $o@@17) alloc)))) ($IsAlloc intType (int_2_U (_System.array2.Length0 $o@@17)) TInt $h@@11))
 :pattern ( (_System.array2.Length0 $o@@17) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@11 $o@@17) alloc)) (Tclass._System.array2? _System.array2$arg@@9))
)))
(assert (forall ((_System.array2$arg@@10 T@U) ($h@@12 T@U) ($o@@18 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@12) (and (or (not (= $o@@18 null)) (not true)) (= (dtype $o@@18) (Tclass._System.array2? _System.array2$arg@@10)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@12 $o@@18) alloc)))) ($IsAlloc intType (int_2_U (_System.array2.Length1 $o@@18)) TInt $h@@12))
 :pattern ( (_System.array2.Length1 $o@@18) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@12 $o@@18) alloc)) (Tclass._System.array2? _System.array2$arg@@10))
)))
(assert  (and (forall ((t0@@0 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 t2 (MapType1Store t0@@0 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o@@19 T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@19 $f))  (=> (and (or (not (= $o@@19 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@19) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@19 $f))
)))
(assert (forall ((h@@1 T@U) (r T@U) (f T@U) (x@@6 T@U) ) (!  (=> ($IsGoodHeap (MapType0Store refType (MapType0Type FieldType BoxType) h@@1 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@1 r) f x@@6))) ($HeapSucc h@@1 (MapType0Store refType (MapType0Type FieldType BoxType) h@@1 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@1 r) f x@@6))))
 :pattern ( (MapType0Store refType (MapType0Type FieldType BoxType) h@@1 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@1 r) f x@@6)))
)))
(assert (= (Tag Tclass._System.object?) Tagclass._System.object?))
(assert (= (TagFamily Tclass._System.object?) tytagFamily$object))
(assert (= (Tag Tclass._System.object) Tagclass._System.object))
(assert (= (TagFamily Tclass._System.object) tytagFamily$object))
(assert (forall ((x@@7 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@7))) (Lit BoxType ($Box intType (int_2_U x@@7))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@7))))
)))
(assert (forall ((x@@8 T@U) (T@@3 T@T) ) (! (= ($Box T@@3 (Lit T@@3 x@@8)) (Lit BoxType ($Box T@@3 x@@8)))
 :pattern ( ($Box T@@3 (Lit T@@3 x@@8)))
)))
(assert (forall ((h@@2 T@U) (v@@0 T@U) ) (! ($IsAlloc intType v@@0 TInt h@@2)
 :pattern ( ($IsAlloc intType v@@0 TInt h@@2))
)))
(assert (forall ((v@@1 T@U) ) (! ($Is intType v@@1 TInt)
 :pattern ( ($Is intType v@@1 TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |a#0| () Int)
(declare-fun |b#0| () Int)
(declare-fun |c#0@@7| () Int)
(declare-fun $nw@10 () T@U)
(declare-fun _module._default.AllocateMatrix$D () T@U)
(declare-fun $Heap () T@U)
(declare-fun $Heap@10 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun $nw@9 () T@U)
(declare-fun $Heap@9 () T@U)
(declare-fun $nw@8 () T@U)
(declare-fun $Heap@8 () T@U)
(declare-fun $nw@7 () T@U)
(declare-fun $Heap@7 () T@U)
(declare-fun $nw@6 () T@U)
(declare-fun $Heap@6 () T@U)
(declare-fun $nw@5 () T@U)
(declare-fun $Heap@5 () T@U)
(declare-fun $nw@4 () T@U)
(declare-fun $Heap@4 () T@U)
(declare-fun $nw@3 () T@U)
(declare-fun $Heap@3 () T@U)
(declare-fun $nw@2 () T@U)
(declare-fun $Heap@2 () T@U)
(declare-fun $nw@1 () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun $nw@0 () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun |defass#o#0| () Bool)
(declare-fun |o#0| () T@U)
(declare-fun $FunctionContextHeight () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 57) (let ((anon17_correct  (=> (= (ControlFlow 0 4) (- 0 3)) true)))
(let ((anon15_correct  (=> (or (or (= (+ |a#0| |b#0|) (LitInt 0)) (= (+ |b#0| |c#0@@7|) (LitInt 0))) (= (+ |c#0@@7| |a#0|) (LitInt 0))) (and (=> (= (ControlFlow 0 47) (- 0 51)) (<= 0 |a#0|)) (=> (<= 0 |a#0|) (and (=> (= (ControlFlow 0 47) (- 0 50)) (<= 0 |b#0|)) (=> (<= 0 |b#0|) (and (=> (= (ControlFlow 0 47) (- 0 49)) (<= 0 |c#0@@7|)) (=> (<= 0 |c#0@@7|) (and (=> (= (ControlFlow 0 47) (- 0 48)) (or (or (= 0 |a#0|) (= 0 |b#0|)) (= 0 |c#0@@7|))) (=> (or (or (= 0 |a#0|) (= 0 |b#0|)) (= 0 |c#0@@7|)) (=> (and (or (not (= $nw@10 null)) (not true)) ($Is refType $nw@10 (Tclass._System.array3? _module._default.AllocateMatrix$D))) (=> (and (and (and (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $nw@10) alloc)))) (= (_System.array3.Length0 $nw@10) |a#0|)) (and (= (_System.array3.Length1 $nw@10) |b#0|) (= (_System.array3.Length2 $nw@10) |c#0@@7|))) (and (and (= $Heap@10 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap $nw@10 (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $nw@10) alloc ($Box boolType (bool_2_U true))))) ($IsGoodHeap $Heap@10)) (and ($IsHeapAnchor $Heap@10) (= (ControlFlow 0 47) 4)))) anon17_correct)))))))))))))
(let ((anon30_Else_correct  (=> (and (or (= (+ |a#0| |b#0|) (LitInt 0)) (= (+ |b#0| |c#0@@7|) (LitInt 0))) (= (ControlFlow 0 53) 47)) anon15_correct)))
(let ((anon30_Then_correct  (=> (and (not (or (= (+ |a#0| |b#0|) (LitInt 0)) (= (+ |b#0| |c#0@@7|) (LitInt 0)))) (= (ControlFlow 0 52) 47)) anon15_correct)))
(let ((anon29_Else_correct  (=> (= (+ |a#0| |b#0|) (LitInt 0)) (and (=> (= (ControlFlow 0 55) 52) anon30_Then_correct) (=> (= (ControlFlow 0 55) 53) anon30_Else_correct)))))
(let ((anon29_Then_correct  (=> (or (not (= (+ |a#0| |b#0|) (LitInt 0))) (not true)) (and (=> (= (ControlFlow 0 54) 52) anon30_Then_correct) (=> (= (ControlFlow 0 54) 53) anon30_Else_correct)))))
(let ((anon27_Then_correct  (=> (= |c#0@@7| (LitInt 0)) (and (=> (= (ControlFlow 0 42) (- 0 46)) (<= 0 |a#0|)) (=> (<= 0 |a#0|) (and (=> (= (ControlFlow 0 42) (- 0 45)) (<= 0 |b#0|)) (=> (<= 0 |b#0|) (and (=> (= (ControlFlow 0 42) (- 0 44)) (<= 0 |c#0@@7|)) (=> (<= 0 |c#0@@7|) (and (=> (= (ControlFlow 0 42) (- 0 43)) (or (or (= 0 |a#0|) (= 0 |b#0|)) (= 0 |c#0@@7|))) (=> (or (or (= 0 |a#0|) (= 0 |b#0|)) (= 0 |c#0@@7|)) (=> (and (or (not (= $nw@9 null)) (not true)) ($Is refType $nw@9 (Tclass._System.array3? _module._default.AllocateMatrix$D))) (=> (and (and (and (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $nw@9) alloc)))) (= (_System.array3.Length0 $nw@9) |a#0|)) (and (= (_System.array3.Length1 $nw@9) |b#0|) (= (_System.array3.Length2 $nw@9) |c#0@@7|))) (and (and (= $Heap@9 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap $nw@9 (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $nw@9) alloc ($Box boolType (bool_2_U true))))) ($IsGoodHeap $Heap@9)) (and ($IsHeapAnchor $Heap@9) (= (ControlFlow 0 42) 4)))) anon17_correct)))))))))))))
(let ((anon26_Then_correct  (=> (= |b#0| (LitInt 0)) (and (=> (= (ControlFlow 0 37) (- 0 41)) (<= 0 |a#0|)) (=> (<= 0 |a#0|) (and (=> (= (ControlFlow 0 37) (- 0 40)) (<= 0 |b#0|)) (=> (<= 0 |b#0|) (and (=> (= (ControlFlow 0 37) (- 0 39)) (<= 0 |c#0@@7|)) (=> (<= 0 |c#0@@7|) (and (=> (= (ControlFlow 0 37) (- 0 38)) (or (or (= 0 |a#0|) (= 0 |b#0|)) (= 0 |c#0@@7|))) (=> (or (or (= 0 |a#0|) (= 0 |b#0|)) (= 0 |c#0@@7|)) (=> (and (or (not (= $nw@8 null)) (not true)) ($Is refType $nw@8 (Tclass._System.array3? _module._default.AllocateMatrix$D))) (=> (and (and (and (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $nw@8) alloc)))) (= (_System.array3.Length0 $nw@8) |a#0|)) (and (= (_System.array3.Length1 $nw@8) |b#0|) (= (_System.array3.Length2 $nw@8) |c#0@@7|))) (and (and (= $Heap@8 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap $nw@8 (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $nw@8) alloc ($Box boolType (bool_2_U true))))) ($IsGoodHeap $Heap@8)) (and ($IsHeapAnchor $Heap@8) (= (ControlFlow 0 37) 4)))) anon17_correct)))))))))))))
(let ((anon25_Then_correct  (=> (= |a#0| (LitInt 0)) (and (=> (= (ControlFlow 0 32) (- 0 36)) (<= 0 |a#0|)) (=> (<= 0 |a#0|) (and (=> (= (ControlFlow 0 32) (- 0 35)) (<= 0 |b#0|)) (=> (<= 0 |b#0|) (and (=> (= (ControlFlow 0 32) (- 0 34)) (<= 0 |c#0@@7|)) (=> (<= 0 |c#0@@7|) (and (=> (= (ControlFlow 0 32) (- 0 33)) (or (or (= 0 |a#0|) (= 0 |b#0|)) (= 0 |c#0@@7|))) (=> (or (or (= 0 |a#0|) (= 0 |b#0|)) (= 0 |c#0@@7|)) (=> (and (or (not (= $nw@7 null)) (not true)) ($Is refType $nw@7 (Tclass._System.array3? _module._default.AllocateMatrix$D))) (=> (and (and (and (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $nw@7) alloc)))) (= (_System.array3.Length0 $nw@7) |a#0|)) (and (= (_System.array3.Length1 $nw@7) |b#0|) (= (_System.array3.Length2 $nw@7) |c#0@@7|))) (and (and (= $Heap@7 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap $nw@7 (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $nw@7) alloc ($Box boolType (bool_2_U true))))) ($IsGoodHeap $Heap@7)) (and ($IsHeapAnchor $Heap@7) (= (ControlFlow 0 32) 4)))) anon17_correct)))))))))))))
(let ((anon24_Then_correct  (and (=> (= (ControlFlow 0 27) (- 0 31)) (<= 0 |a#0|)) (=> (<= 0 |a#0|) (and (=> (= (ControlFlow 0 27) (- 0 30)) (<= 0 |b#0|)) (=> (<= 0 |b#0|) (and (=> (= (ControlFlow 0 27) (- 0 29)) (<= 0 |c#0@@7|)) (=> (<= 0 |c#0@@7|) (and (=> (= (ControlFlow 0 27) (- 0 28)) (or (or (= 0 |a#0|) (= 0 |b#0|)) (= 0 |c#0@@7|))) (=> (or (or (= 0 |a#0|) (= 0 |b#0|)) (= 0 |c#0@@7|)) (=> (and (or (not (= $nw@6 null)) (not true)) ($Is refType $nw@6 (Tclass._System.array3? _module._default.AllocateMatrix$D))) (=> (and (and (and (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $nw@6) alloc)))) (= (_System.array3.Length0 $nw@6) |a#0|)) (and (= (_System.array3.Length1 $nw@6) |b#0|) (= (_System.array3.Length2 $nw@6) |c#0@@7|))) (and (and (= $Heap@6 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap $nw@6 (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $nw@6) alloc ($Box boolType (bool_2_U true))))) ($IsGoodHeap $Heap@6)) (and ($IsHeapAnchor $Heap@6) (= (ControlFlow 0 27) 4)))) anon17_correct))))))))))))
(let ((anon23_Then_correct  (=> (= (+ |a#0| |b#0|) (LitInt 0)) (and (=> (= (ControlFlow 0 23) (- 0 26)) (<= 0 |a#0|)) (=> (<= 0 |a#0|) (and (=> (= (ControlFlow 0 23) (- 0 25)) (<= 0 |b#0|)) (=> (<= 0 |b#0|) (and (=> (= (ControlFlow 0 23) (- 0 24)) (or (= 0 |a#0|) (= 0 |b#0|))) (=> (or (= 0 |a#0|) (= 0 |b#0|)) (=> (and (and (and (and (or (not (= $nw@5 null)) (not true)) ($Is refType $nw@5 (Tclass._System.array2? _module._default.AllocateMatrix$D))) (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $nw@5) alloc))))) (and (= (_System.array2.Length0 $nw@5) |a#0|) (= (_System.array2.Length1 $nw@5) |b#0|))) (and (and (= $Heap@5 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap $nw@5 (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $nw@5) alloc ($Box boolType (bool_2_U true))))) ($IsGoodHeap $Heap@5)) (and ($IsHeapAnchor $Heap@5) (= (ControlFlow 0 23) 4)))) anon17_correct))))))))))
(let ((anon22_Then_correct  (=> (= |b#0| (LitInt 0)) (and (=> (= (ControlFlow 0 19) (- 0 22)) (<= 0 |a#0|)) (=> (<= 0 |a#0|) (and (=> (= (ControlFlow 0 19) (- 0 21)) (<= 0 |b#0|)) (=> (<= 0 |b#0|) (and (=> (= (ControlFlow 0 19) (- 0 20)) (or (= 0 |a#0|) (= 0 |b#0|))) (=> (or (= 0 |a#0|) (= 0 |b#0|)) (=> (and (and (and (and (or (not (= $nw@4 null)) (not true)) ($Is refType $nw@4 (Tclass._System.array2? _module._default.AllocateMatrix$D))) (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $nw@4) alloc))))) (and (= (_System.array2.Length0 $nw@4) |a#0|) (= (_System.array2.Length1 $nw@4) |b#0|))) (and (and (= $Heap@4 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap $nw@4 (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $nw@4) alloc ($Box boolType (bool_2_U true))))) ($IsGoodHeap $Heap@4)) (and ($IsHeapAnchor $Heap@4) (= (ControlFlow 0 19) 4)))) anon17_correct))))))))))
(let ((anon21_Then_correct  (=> (= |a#0| (LitInt 0)) (and (=> (= (ControlFlow 0 15) (- 0 18)) (<= 0 |a#0|)) (=> (<= 0 |a#0|) (and (=> (= (ControlFlow 0 15) (- 0 17)) (<= 0 |b#0|)) (=> (<= 0 |b#0|) (and (=> (= (ControlFlow 0 15) (- 0 16)) (or (= 0 |a#0|) (= 0 |b#0|))) (=> (or (= 0 |a#0|) (= 0 |b#0|)) (=> (and (and (and (and (or (not (= $nw@3 null)) (not true)) ($Is refType $nw@3 (Tclass._System.array2? _module._default.AllocateMatrix$D))) (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $nw@3) alloc))))) (and (= (_System.array2.Length0 $nw@3) |a#0|) (= (_System.array2.Length1 $nw@3) |b#0|))) (and (and (= $Heap@3 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap $nw@3 (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $nw@3) alloc ($Box boolType (bool_2_U true))))) ($IsGoodHeap $Heap@3)) (and ($IsHeapAnchor $Heap@3) (= (ControlFlow 0 15) 4)))) anon17_correct))))))))))
(let ((anon20_Then_correct  (and (=> (= (ControlFlow 0 11) (- 0 14)) (<= 0 |a#0|)) (=> (<= 0 |a#0|) (and (=> (= (ControlFlow 0 11) (- 0 13)) (<= 0 |b#0|)) (=> (<= 0 |b#0|) (and (=> (= (ControlFlow 0 11) (- 0 12)) (or (= 0 |a#0|) (= 0 |b#0|))) (=> (or (= 0 |a#0|) (= 0 |b#0|)) (=> (and (and (and (and (or (not (= $nw@2 null)) (not true)) ($Is refType $nw@2 (Tclass._System.array2? _module._default.AllocateMatrix$D))) (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $nw@2) alloc))))) (and (= (_System.array2.Length0 $nw@2) |a#0|) (= (_System.array2.Length1 $nw@2) |b#0|))) (and (and (= $Heap@2 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap $nw@2 (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $nw@2) alloc ($Box boolType (bool_2_U true))))) ($IsGoodHeap $Heap@2)) (and ($IsHeapAnchor $Heap@2) (= (ControlFlow 0 11) 4)))) anon17_correct)))))))))
(let ((anon19_Then_correct  (=> (= |a#0| (LitInt 0)) (and (=> (= (ControlFlow 0 8) (- 0 10)) (<= 0 |a#0|)) (=> (<= 0 |a#0|) (and (=> (= (ControlFlow 0 8) (- 0 9)) (= 0 |a#0|)) (=> (= 0 |a#0|) (=> (and (and (and (or (not (= $nw@1 null)) (not true)) ($Is refType $nw@1 (Tclass._System.array? _module._default.AllocateMatrix$D))) (and (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $nw@1) alloc)))) (= (_System.array.Length $nw@1) |a#0|))) (and (and (= $Heap@1 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap $nw@1 (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $nw@1) alloc ($Box boolType (bool_2_U true))))) ($IsGoodHeap $Heap@1)) (and ($IsHeapAnchor $Heap@1) (= (ControlFlow 0 8) 4)))) anon17_correct))))))))
(let ((anon18_Then_correct  (and (=> (= (ControlFlow 0 5) (- 0 7)) (<= 0 |a#0|)) (=> (<= 0 |a#0|) (and (=> (= (ControlFlow 0 5) (- 0 6)) (= 0 |a#0|)) (=> (= 0 |a#0|) (=> (and (and (and (or (not (= $nw@0 null)) (not true)) ($Is refType $nw@0 (Tclass._System.array? _module._default.AllocateMatrix$D))) (and (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $nw@0) alloc)))) (= (_System.array.Length $nw@0) |a#0|))) (and (and (= $Heap@0 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap $nw@0 (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $nw@0) alloc ($Box boolType (bool_2_U true))))) ($IsGoodHeap $Heap@0)) (and ($IsHeapAnchor $Heap@0) (= (ControlFlow 0 5) 4)))) anon17_correct)))))))
(let ((anon28_Else_correct  (=> (and (and (and (and (and (and (and (and (and (and (and (not (U_2_bool (Lit boolType (bool_2_U true)))) (or (not (= |a#0| (LitInt 0))) (not true))) (not (U_2_bool (Lit boolType (bool_2_U true))))) (or (not (= |a#0| (LitInt 0))) (not true))) (or (not (= |b#0| (LitInt 0))) (not true))) (or (not (= (+ |a#0| |b#0|) (LitInt 0))) (not true))) (not (U_2_bool (Lit boolType (bool_2_U true))))) (or (not (= |a#0| (LitInt 0))) (not true))) (or (not (= |b#0| (LitInt 0))) (not true))) (or (not (= |c#0@@7| (LitInt 0))) (not true))) (not (or (or (= (+ |a#0| |b#0|) (LitInt 0)) (= (+ |b#0| |c#0@@7|) (LitInt 0))) (= (+ |c#0@@7| |a#0|) (LitInt 0))))) (= (ControlFlow 0 2) (- 0 1))) false)))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (and (and (and (and (and (and (and (and (and (and (and (and (=> (= (ControlFlow 0 56) 5) anon18_Then_correct) (=> (= (ControlFlow 0 56) 8) anon19_Then_correct)) (=> (= (ControlFlow 0 56) 11) anon20_Then_correct)) (=> (= (ControlFlow 0 56) 15) anon21_Then_correct)) (=> (= (ControlFlow 0 56) 19) anon22_Then_correct)) (=> (= (ControlFlow 0 56) 23) anon23_Then_correct)) (=> (= (ControlFlow 0 56) 27) anon24_Then_correct)) (=> (= (ControlFlow 0 56) 32) anon25_Then_correct)) (=> (= (ControlFlow 0 56) 37) anon26_Then_correct)) (=> (= (ControlFlow 0 56) 42) anon27_Then_correct)) (=> (= (ControlFlow 0 56) 2) anon28_Else_correct)) (=> (= (ControlFlow 0 56) 54) anon29_Then_correct)) (=> (= (ControlFlow 0 56) 55) anon29_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (and (<= (LitInt 0) |a#0|) (<= (LitInt 0) |b#0|))) (and (and (<= (LitInt 0) |c#0@@7|) (=> |defass#o#0| (and ($Is refType |o#0| Tclass._System.object) ($IsAlloc refType |o#0| Tclass._System.object $Heap)))) (and (= 0 $FunctionContextHeight) (= (ControlFlow 0 57) 56)))) anon0_correct)))
PreconditionGeneratedEntry_correct))))))))))))))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 5) (- 6))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 27) (- 28))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 11) (- 12))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
