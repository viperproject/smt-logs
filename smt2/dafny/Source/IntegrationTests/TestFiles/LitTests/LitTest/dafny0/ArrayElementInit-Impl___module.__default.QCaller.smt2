(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@22 () T@U)
(declare-fun $generated@@25 () T@T)
(declare-fun $generated@@26 (T@U) T@U)
(declare-fun $generated@@27 (T@U) T@U)
(declare-fun $generated@@31 () T@U)
(declare-fun $generated@@32 (T@T T@U) T@U)
(declare-fun $generated@@33 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@34 () T@T)
(declare-fun $generated@@35 () T@T)
(declare-fun $generated@@36 (T@T T@T) T@T)
(declare-fun $generated@@37 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@38 (T@T) T@T)
(declare-fun $generated@@39 (T@T) T@T)
(declare-fun $generated@@60 (T@U T@U) Bool)
(declare-fun $generated@@64 (Int) Int)
(declare-fun $generated@@66 (T@T T@U) T@U)
(declare-fun $generated@@69 (T@T T@U) T@U)
(declare-fun $generated@@72 (T@T T@U T@U) Bool)
(declare-fun $generated@@81 (T@U) T@U)
(declare-fun $generated@@82 (T@U) T@U)
(declare-fun $generated@@85 (T@U) T@U)
(declare-fun $generated@@91 (T@U) T@U)
(declare-fun $generated@@93 (T@U) T@U)
(declare-fun $generated@@97 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@98 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@99 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert (forall (($generated@@23 T@U) ($generated@@24 T@U) ) (! ($generated@@21 $generated@@7 $generated@@23 $generated@@22 $generated@@24)
 :pattern ( ($generated@@21 $generated@@7 $generated@@23 $generated@@22 $generated@@24))
)))
(assert (= ($generated@@5 $generated@@25) 3))
(assert (forall (($generated@@28 T@U) ($generated@@29 T@U) ($generated@@30 T@U) ) (! (= ($generated@@21 $generated@@25 $generated@@29 ($generated@@26 $generated@@28) $generated@@30) ($generated@@21 $generated@@25 $generated@@29 ($generated@@27 $generated@@28) $generated@@30))
 :pattern ( ($generated@@21 $generated@@25 $generated@@29 ($generated@@26 $generated@@28) $generated@@30))
 :pattern ( ($generated@@21 $generated@@25 $generated@@29 ($generated@@27 $generated@@28) $generated@@30))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@40 T@T) ($generated@@41 T@T) ($generated@@42 T@U) ($generated@@43 T@U) ($generated@@44 T@U) ) (! (= ($generated@@33 $generated@@40 $generated@@41 ($generated@@37 $generated@@40 $generated@@41 $generated@@43 $generated@@44 $generated@@42) $generated@@44) $generated@@42)
 :weight 0
)) (forall (($generated@@45 T@T) ($generated@@46 T@T) ($generated@@47 T@U) ($generated@@48 T@U) ($generated@@49 T@U) ($generated@@50 T@U) ) (!  (or (= $generated@@49 $generated@@50) (= ($generated@@33 $generated@@45 $generated@@46 ($generated@@37 $generated@@45 $generated@@46 $generated@@48 $generated@@49 $generated@@47) $generated@@50) ($generated@@33 $generated@@45 $generated@@46 $generated@@48 $generated@@50)))
 :weight 0
))) (= ($generated@@5 $generated@@34) 4)) (= ($generated@@5 $generated@@35) 5)) (forall (($generated@@51 T@T) ($generated@@52 T@T) ) (= ($generated@@5 ($generated@@36 $generated@@51 $generated@@52)) 6))) (forall (($generated@@53 T@T) ($generated@@54 T@T) ) (! (= ($generated@@38 ($generated@@36 $generated@@53 $generated@@54)) $generated@@53)
 :pattern ( ($generated@@36 $generated@@53 $generated@@54))
))) (forall (($generated@@55 T@T) ($generated@@56 T@T) ) (! (= ($generated@@39 ($generated@@36 $generated@@55 $generated@@56)) $generated@@56)
 :pattern ( ($generated@@36 $generated@@55 $generated@@56))
))))
(assert (forall (($generated@@57 T@U) ($generated@@58 T@U) ($generated@@59 T@U) ) (! (= ($generated@@21 $generated@@25 $generated@@58 ($generated@@27 $generated@@57) $generated@@59)  (or (= $generated@@58 $generated@@31) ($generated@@10 ($generated@@32 $generated@@6 ($generated@@33 $generated@@34 $generated@@35 ($generated@@33 $generated@@25 ($generated@@36 $generated@@34 $generated@@35) $generated@@59 $generated@@58) $generated)))))
 :pattern ( ($generated@@21 $generated@@25 $generated@@58 ($generated@@27 $generated@@57) $generated@@59))
)))
(assert (forall (($generated@@61 T@U) ($generated@@62 T@U) ) (!  (=> ($generated@@60 $generated@@61 $generated@@62) (forall (($generated@@63 T@U) ) (!  (=> ($generated@@10 ($generated@@32 $generated@@6 ($generated@@33 $generated@@34 $generated@@35 ($generated@@33 $generated@@25 ($generated@@36 $generated@@34 $generated@@35) $generated@@61 $generated@@63) $generated))) ($generated@@10 ($generated@@32 $generated@@6 ($generated@@33 $generated@@34 $generated@@35 ($generated@@33 $generated@@25 ($generated@@36 $generated@@34 $generated@@35) $generated@@62 $generated@@63) $generated))))
 :pattern ( ($generated@@33 $generated@@34 $generated@@35 ($generated@@33 $generated@@25 ($generated@@36 $generated@@34 $generated@@35) $generated@@62 $generated@@63) $generated))
)))
 :pattern ( ($generated@@60 $generated@@61 $generated@@62))
)))
(assert (forall (($generated@@65 Int) ) (! (= ($generated@@64 $generated@@65) $generated@@65)
 :pattern ( ($generated@@64 $generated@@65))
)))
(assert (forall (($generated@@67 T@U) ($generated@@68 T@T) ) (! (= ($generated@@66 $generated@@68 $generated@@67) $generated@@67)
 :pattern ( ($generated@@66 $generated@@68 $generated@@67))
)))
(assert (forall (($generated@@70 T@U) ($generated@@71 T@T) ) (! (= ($generated@@69 $generated@@71 ($generated@@32 $generated@@71 $generated@@70)) $generated@@70)
 :pattern ( ($generated@@32 $generated@@71 $generated@@70))
)))
(assert (forall (($generated@@73 T@U) ) (! (= ($generated@@72 $generated@@7 $generated@@73 $generated@@22) (<= ($generated@@64 6) ($generated@@12 $generated@@73)))
 :pattern ( ($generated@@72 $generated@@7 $generated@@73 $generated@@22))
)))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@U) ) (! (= ($generated@@72 $generated@@25 $generated@@75 ($generated@@26 $generated@@74))  (and ($generated@@72 $generated@@25 $generated@@75 ($generated@@27 $generated@@74)) (or (not (= $generated@@75 $generated@@31)) (not true))))
 :pattern ( ($generated@@72 $generated@@25 $generated@@75 ($generated@@26 $generated@@74)))
 :pattern ( ($generated@@72 $generated@@25 $generated@@75 ($generated@@27 $generated@@74)))
)))
(assert (forall (($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@T) ) (!  (=> ($generated@@60 $generated@@76 $generated@@77) (=> ($generated@@21 $generated@@80 $generated@@78 $generated@@79 $generated@@76) ($generated@@21 $generated@@80 $generated@@78 $generated@@79 $generated@@77)))
 :pattern ( ($generated@@60 $generated@@76 $generated@@77) ($generated@@21 $generated@@80 $generated@@78 $generated@@79 $generated@@76))
)))
(assert (forall (($generated@@83 T@U) ) (!  (and (= ($generated@@81 ($generated@@27 $generated@@83)) $generated@@0) (= ($generated@@82 ($generated@@27 $generated@@83)) $generated@@3))
 :pattern ( ($generated@@27 $generated@@83))
)))
(assert (forall (($generated@@84 T@U) ) (!  (and (= ($generated@@81 ($generated@@26 $generated@@84)) $generated@@1) (= ($generated@@82 ($generated@@26 $generated@@84)) $generated@@3))
 :pattern ( ($generated@@26 $generated@@84))
)))
(assert (forall (($generated@@86 T@U) ($generated@@87 T@U) ) (! (= ($generated@@72 $generated@@25 $generated@@87 ($generated@@27 $generated@@86))  (or (= $generated@@87 $generated@@31) (= ($generated@@85 $generated@@87) ($generated@@27 $generated@@86))))
 :pattern ( ($generated@@72 $generated@@25 $generated@@87 ($generated@@27 $generated@@86)))
)))
(assert (forall (($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ) (!  (=> (or (not (= $generated@@88 $generated@@90)) (not true)) (=> (and ($generated@@60 $generated@@88 $generated@@89) ($generated@@60 $generated@@89 $generated@@90)) ($generated@@60 $generated@@88 $generated@@90)))
 :pattern ( ($generated@@60 $generated@@88 $generated@@89) ($generated@@60 $generated@@89 $generated@@90))
)))
(assert (forall (($generated@@92 T@U) ) (! (= ($generated@@91 ($generated@@27 $generated@@92)) $generated@@92)
 :pattern ( ($generated@@27 $generated@@92))
)))
(assert (forall (($generated@@94 T@U) ) (! (= ($generated@@93 ($generated@@26 $generated@@94)) $generated@@94)
 :pattern ( ($generated@@26 $generated@@94))
)))
(assert (forall (($generated@@95 T@U) ($generated@@96 T@T) ) (! (= ($generated@@32 $generated@@96 ($generated@@69 $generated@@96 $generated@@95)) $generated@@95)
 :pattern ( ($generated@@69 $generated@@96 $generated@@95))
)))
(assert  (and (forall (($generated@@100 T@T) ($generated@@101 T@T) ($generated@@102 T@T) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (! (= ($generated@@97 $generated@@100 $generated@@101 $generated@@102 ($generated@@99 $generated@@100 $generated@@101 $generated@@102 $generated@@104 $generated@@105 $generated@@106 $generated@@103) $generated@@105 $generated@@106) $generated@@103)
 :weight 0
)) (and (forall (($generated@@107 T@T) ($generated@@108 T@T) ($generated@@109 T@T) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (!  (or (= $generated@@112 $generated@@114) (= ($generated@@97 $generated@@107 $generated@@108 $generated@@109 ($generated@@99 $generated@@107 $generated@@108 $generated@@109 $generated@@111 $generated@@112 $generated@@113 $generated@@110) $generated@@114 $generated@@115) ($generated@@97 $generated@@107 $generated@@108 $generated@@109 $generated@@111 $generated@@114 $generated@@115)))
 :weight 0
)) (forall (($generated@@116 T@T) ($generated@@117 T@T) ($generated@@118 T@T) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ) (!  (or (= $generated@@122 $generated@@124) (= ($generated@@97 $generated@@116 $generated@@117 $generated@@118 ($generated@@99 $generated@@116 $generated@@117 $generated@@118 $generated@@120 $generated@@121 $generated@@122 $generated@@119) $generated@@123 $generated@@124) ($generated@@97 $generated@@116 $generated@@117 $generated@@118 $generated@@120 $generated@@123 $generated@@124)))
 :weight 0
)))))
(assert (forall (($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 Bool) ($generated@@129 T@U) ($generated@@130 T@U) ) (! (= ($generated@@10 ($generated@@97 $generated@@25 $generated@@34 $generated@@6 ($generated@@98 $generated@@125 $generated@@126 $generated@@127 $generated@@128) $generated@@129 $generated@@130))  (=> (and (or (not (= $generated@@129 $generated@@125)) (not true)) ($generated@@10 ($generated@@32 $generated@@6 ($generated@@33 $generated@@34 $generated@@35 ($generated@@33 $generated@@25 ($generated@@36 $generated@@34 $generated@@35) $generated@@126 $generated@@129) $generated@@127)))) $generated@@128))
 :pattern ( ($generated@@97 $generated@@25 $generated@@34 $generated@@6 ($generated@@98 $generated@@125 $generated@@126 $generated@@127 $generated@@128) $generated@@129 $generated@@130))
)))
(assert (= ($generated@@81 $generated@@22) $generated@@2))
(assert (= ($generated@@82 $generated@@22) $generated@@4))
(assert (forall (($generated@@131 Int) ) (! (= ($generated@@69 $generated@@7 ($generated@@11 ($generated@@64 $generated@@131))) ($generated@@66 $generated@@35 ($generated@@69 $generated@@7 ($generated@@11 $generated@@131))))
 :pattern ( ($generated@@69 $generated@@7 ($generated@@11 ($generated@@64 $generated@@131))))
)))
(assert (forall (($generated@@132 T@U) ($generated@@133 T@T) ) (! (= ($generated@@69 $generated@@133 ($generated@@66 $generated@@133 $generated@@132)) ($generated@@66 $generated@@35 ($generated@@69 $generated@@133 $generated@@132)))
 :pattern ( ($generated@@69 $generated@@133 ($generated@@66 $generated@@133 $generated@@132)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@134 () T@U)
(declare-fun $generated@@135 () T@U)
(declare-fun $generated@@136 () Int)
(declare-fun $generated@@137 () Int)
(declare-fun $generated@@138 () T@U)
(declare-fun $generated@@139 (T@U) Bool)
(declare-fun $generated@@140 (T@U) Bool)
(declare-fun $generated@@141 () Int)
(declare-fun $generated@@142 () T@U)
(declare-fun $generated@@143 () T@U)
(declare-fun $generated@@144 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@145  (=> (= $generated@@134 ($generated@@98 $generated@@31 $generated@@135 $generated false)) (=> (and (<= ($generated@@64 6) $generated@@136) (= $generated@@137 ($generated@@64 217))) (=> (and (and ($generated@@72 $generated@@25 $generated@@138 ($generated@@26 $generated@@22)) ($generated@@21 $generated@@25 $generated@@138 ($generated@@26 $generated@@22) $generated@@135)) (= (ControlFlow 0 2) (- 0 1))) (<= ($generated@@64 100) $generated@@137))))))
(let (($generated@@146  (=> (and (and (and (and ($generated@@139 $generated@@135) ($generated@@140 $generated@@135)) (and (<= ($generated@@64 6) $generated@@141) true)) (and (and ($generated@@72 $generated@@25 $generated@@142 ($generated@@26 $generated@@22)) ($generated@@21 $generated@@25 $generated@@142 ($generated@@26 $generated@@22) $generated@@135)) true)) (and (and (and ($generated@@72 $generated@@25 $generated@@143 ($generated@@26 $generated@@22)) ($generated@@21 $generated@@25 $generated@@143 ($generated@@26 $generated@@22) $generated@@135)) true) (and (= 2 $generated@@144) (= (ControlFlow 0 3) 2)))) $generated@@145)))
$generated@@146)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
