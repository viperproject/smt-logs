(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 (T@T) Int)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 (Bool) T@U)
(declare-fun $generated@@11 (T@U) Bool)
(declare-fun $generated@@12 (Int) T@U)
(declare-fun $generated@@13 (T@U) Int)
(declare-fun $generated@@14 (Real) T@U)
(declare-fun $generated@@15 (T@U) Real)
(declare-fun $generated@@22 (T@U) T@U)
(declare-fun $generated@@23 (T@U) T@U)
(declare-fun $generated@@24 () T@U)
(declare-fun $generated@@25 (T@T T@U T@U) Bool)
(declare-fun $generated@@26 () T@T)
(declare-fun $generated@@27 () T@U)
(declare-fun $generated@@28 (Int) Int)
(declare-fun $generated@@30 (T@T T@U) T@U)
(declare-fun $generated@@33 (T@U) Bool)
(declare-fun $generated@@35 (T@U) Bool)
(declare-fun $generated@@37 (T@T T@U) T@U)
(declare-fun $generated@@38 (T@T T@U) T@U)
(declare-fun $generated@@41 (Int T@U) T@U)
(declare-fun $generated@@46 () Int)
(declare-fun $generated@@47 (T@U T@U) Int)
(declare-fun $generated@@48 (T@U) T@U)
(declare-fun $generated@@49 (T@U) Bool)
(declare-fun $generated@@50 (T@U) T@U)
(declare-fun $generated@@58 (T@U) Int)
(declare-fun $generated@@65 (T@U) Int)
(declare-fun $generated@@70 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@71 () T@T)
(declare-fun $generated@@72 () T@T)
(declare-fun $generated@@73 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@74 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@75 () T@T)
(declare-fun $generated@@76 (T@T T@T) T@T)
(declare-fun $generated@@77 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@78 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@79 (T@T) T@T)
(declare-fun $generated@@80 (T@T) T@T)
(declare-fun $generated@@131 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@6 $generated@@7) 0) (= ($generated@@6 $generated@@8) 1)) (= ($generated@@6 $generated@@9) 2)) (forall (($generated@@16 Bool) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Int) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Real) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5)
)
(assert (= ($generated@@22 $generated) $generated@@0))
(assert (= ($generated@@23 $generated@@24) $generated@@3))
(assert (= ($generated@@6 $generated@@26) 3))
(assert ($generated@@25 $generated@@26 $generated@@24 $generated@@27))
(assert (forall (($generated@@29 Int) ) (! (= ($generated@@28 $generated@@29) $generated@@29)
 :pattern ( ($generated@@28 $generated@@29))
)))
(assert (forall (($generated@@31 T@U) ($generated@@32 T@T) ) (! (= ($generated@@30 $generated@@32 $generated@@31) $generated@@31)
 :pattern ( ($generated@@30 $generated@@32 $generated@@31))
)))
(assert (forall (($generated@@34 T@U) ) (! (= ($generated@@33 $generated@@34) (= ($generated@@23 $generated@@34) $generated@@3))
 :pattern ( ($generated@@33 $generated@@34))
)))
(assert (forall (($generated@@36 T@U) ) (! (= ($generated@@35 $generated@@36) (= ($generated@@23 $generated@@36) $generated@@4))
 :pattern ( ($generated@@35 $generated@@36))
)))
(assert (forall (($generated@@39 T@U) ($generated@@40 T@T) ) (! (= ($generated@@38 $generated@@40 ($generated@@37 $generated@@40 $generated@@39)) $generated@@39)
 :pattern ( ($generated@@37 $generated@@40 $generated@@39))
)))
(assert (forall (($generated@@42 T@U) ) (!  (=> ($generated@@35 $generated@@42) (exists (($generated@@43 Int) ($generated@@44 T@U) ) (= $generated@@42 ($generated@@41 $generated@@43 $generated@@44))))
 :pattern ( ($generated@@35 $generated@@42))
)))
(assert (forall (($generated@@45 T@U) ) (!  (=> ($generated@@33 $generated@@45) (= $generated@@45 $generated@@24))
 :pattern ( ($generated@@33 $generated@@45))
)))
(assert  (=> (<= 1 $generated@@46) (forall (($generated@@51 T@U) ($generated@@52 T@U) ) (!  (=> (or ($generated@@49 ($generated@@30 $generated@@26 $generated@@52)) (and (< 1 $generated@@46) ($generated@@25 $generated@@26 $generated@@52 $generated@@27))) (and (=> (not ($generated@@11 ($generated@@30 $generated@@7 ($generated@@10 ($generated@@33 ($generated@@30 $generated@@26 $generated@@52)))))) ($generated@@49 ($generated@@30 $generated@@26 ($generated@@50 ($generated@@30 $generated@@26 $generated@@52))))) (= ($generated@@47 ($generated@@48 $generated@@51) ($generated@@30 $generated@@26 $generated@@52)) (ite ($generated@@33 ($generated@@30 $generated@@26 $generated@@52)) 0 (+ 1 ($generated@@47 ($generated@@48 $generated@@51) ($generated@@30 $generated@@26 ($generated@@50 ($generated@@30 $generated@@26 $generated@@52)))))))))
 :weight 3
 :pattern ( ($generated@@47 ($generated@@48 $generated@@51) ($generated@@30 $generated@@26 $generated@@52)))
))))
(assert  (=> (<= 1 $generated@@46) (forall (($generated@@53 T@U) ($generated@@54 T@U) ) (!  (=> (or ($generated@@49 $generated@@54) (and (< 1 $generated@@46) ($generated@@25 $generated@@26 $generated@@54 $generated@@27))) (<= ($generated@@28 0) ($generated@@47 $generated@@53 $generated@@54)))
 :pattern ( ($generated@@47 $generated@@53 $generated@@54))
))))
(assert (forall (($generated@@55 T@U) ) (!  (=> ($generated@@25 $generated@@26 $generated@@55 $generated@@27) (or ($generated@@33 $generated@@55) ($generated@@35 $generated@@55)))
 :pattern ( ($generated@@35 $generated@@55) ($generated@@25 $generated@@26 $generated@@55 $generated@@27))
 :pattern ( ($generated@@33 $generated@@55) ($generated@@25 $generated@@26 $generated@@55 $generated@@27))
)))
(assert (forall (($generated@@56 Int) ($generated@@57 T@U) ) (! (= ($generated@@23 ($generated@@41 $generated@@56 $generated@@57)) $generated@@4)
 :pattern ( ($generated@@41 $generated@@56 $generated@@57))
)))
(assert (forall (($generated@@59 Int) ($generated@@60 T@U) ) (! (= ($generated@@58 ($generated@@41 $generated@@59 $generated@@60)) $generated@@59)
 :pattern ( ($generated@@41 $generated@@59 $generated@@60))
)))
(assert (forall (($generated@@61 Int) ($generated@@62 T@U) ) (! (= ($generated@@50 ($generated@@41 $generated@@61 $generated@@62)) $generated@@62)
 :pattern ( ($generated@@41 $generated@@61 $generated@@62))
)))
(assert (forall (($generated@@63 T@U) ($generated@@64 T@T) ) (! (= ($generated@@37 $generated@@64 ($generated@@38 $generated@@64 $generated@@63)) $generated@@63)
 :pattern ( ($generated@@38 $generated@@64 $generated@@63))
)))
(assert (forall (($generated@@66 Int) ($generated@@67 T@U) ) (! (< ($generated@@65 $generated@@67) ($generated@@65 ($generated@@41 $generated@@66 $generated@@67)))
 :pattern ( ($generated@@41 $generated@@66 $generated@@67))
)))
(assert (forall (($generated@@68 T@U) ($generated@@69 T@U) ) (! (= ($generated@@47 ($generated@@48 $generated@@68) $generated@@69) ($generated@@47 $generated@@68 $generated@@69))
 :pattern ( ($generated@@47 ($generated@@48 $generated@@68) $generated@@69))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@81 T@T) ($generated@@82 T@T) ($generated@@83 T@T) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ) (! (= ($generated@@70 $generated@@81 $generated@@82 $generated@@83 ($generated@@77 $generated@@81 $generated@@82 $generated@@83 $generated@@85 $generated@@86 $generated@@87 $generated@@84) $generated@@86 $generated@@87) $generated@@84)
 :weight 0
)) (and (forall (($generated@@88 T@T) ($generated@@89 T@T) ($generated@@90 T@T) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ) (!  (or (= $generated@@93 $generated@@95) (= ($generated@@70 $generated@@88 $generated@@89 $generated@@90 ($generated@@77 $generated@@88 $generated@@89 $generated@@90 $generated@@92 $generated@@93 $generated@@94 $generated@@91) $generated@@95 $generated@@96) ($generated@@70 $generated@@88 $generated@@89 $generated@@90 $generated@@92 $generated@@95 $generated@@96)))
 :weight 0
)) (forall (($generated@@97 T@T) ($generated@@98 T@T) ($generated@@99 T@T) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ) (!  (or (= $generated@@103 $generated@@105) (= ($generated@@70 $generated@@97 $generated@@98 $generated@@99 ($generated@@77 $generated@@97 $generated@@98 $generated@@99 $generated@@101 $generated@@102 $generated@@103 $generated@@100) $generated@@104 $generated@@105) ($generated@@70 $generated@@97 $generated@@98 $generated@@99 $generated@@101 $generated@@104 $generated@@105)))
 :weight 0
)))) (= ($generated@@6 $generated@@71) 4)) (= ($generated@@6 $generated@@72) 5)) (forall (($generated@@106 T@T) ($generated@@107 T@T) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ) (! (= ($generated@@74 $generated@@106 $generated@@107 ($generated@@78 $generated@@106 $generated@@107 $generated@@109 $generated@@110 $generated@@108) $generated@@110) $generated@@108)
 :weight 0
))) (forall (($generated@@111 T@T) ($generated@@112 T@T) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ) (!  (or (= $generated@@115 $generated@@116) (= ($generated@@74 $generated@@111 $generated@@112 ($generated@@78 $generated@@111 $generated@@112 $generated@@114 $generated@@115 $generated@@113) $generated@@116) ($generated@@74 $generated@@111 $generated@@112 $generated@@114 $generated@@116)))
 :weight 0
))) (= ($generated@@6 $generated@@75) 6)) (forall (($generated@@117 T@T) ($generated@@118 T@T) ) (= ($generated@@6 ($generated@@76 $generated@@117 $generated@@118)) 7))) (forall (($generated@@119 T@T) ($generated@@120 T@T) ) (! (= ($generated@@79 ($generated@@76 $generated@@119 $generated@@120)) $generated@@119)
 :pattern ( ($generated@@76 $generated@@119 $generated@@120))
))) (forall (($generated@@121 T@T) ($generated@@122 T@T) ) (! (= ($generated@@80 ($generated@@76 $generated@@121 $generated@@122)) $generated@@122)
 :pattern ( ($generated@@76 $generated@@121 $generated@@122))
))))
(assert (forall (($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 Bool) ($generated@@127 T@U) ($generated@@128 T@U) ) (! (= ($generated@@11 ($generated@@70 $generated@@71 $generated@@72 $generated@@7 ($generated@@73 $generated@@123 $generated@@124 $generated@@125 $generated@@126) $generated@@127 $generated@@128))  (=> (and (or (not (= $generated@@127 $generated@@123)) (not true)) ($generated@@11 ($generated@@37 $generated@@7 ($generated@@74 $generated@@72 $generated@@75 ($generated@@74 $generated@@71 ($generated@@76 $generated@@72 $generated@@75) $generated@@124 $generated@@127) $generated@@125)))) $generated@@126))
 :pattern ( ($generated@@70 $generated@@71 $generated@@72 $generated@@7 ($generated@@73 $generated@@123 $generated@@124 $generated@@125 $generated@@126) $generated@@127 $generated@@128))
)))
(assert  (=> (<= 1 $generated@@46) (forall (($generated@@129 T@U) ($generated@@130 T@U) ) (!  (=> (or ($generated@@49 $generated@@130) (and (< 1 $generated@@46) ($generated@@25 $generated@@26 $generated@@130 $generated@@27))) (and (=> (not ($generated@@33 $generated@@130)) ($generated@@49 ($generated@@50 $generated@@130))) (= ($generated@@47 ($generated@@48 $generated@@129) $generated@@130) (ite ($generated@@33 $generated@@130) 0 (+ 1 ($generated@@47 $generated@@129 ($generated@@50 $generated@@130)))))))
 :pattern ( ($generated@@47 ($generated@@48 $generated@@129) $generated@@130))
))))
(assert (= ($generated@@22 $generated@@27) $generated@@2))
(assert (= ($generated@@131 $generated@@27) $generated@@5))
(assert (= $generated@@24 ($generated@@30 $generated@@26 $generated@@24)))
(assert (forall (($generated@@132 Int) ($generated@@133 T@U) ) (! (= ($generated@@41 ($generated@@28 $generated@@132) ($generated@@30 $generated@@26 $generated@@133)) ($generated@@30 $generated@@26 ($generated@@41 $generated@@132 $generated@@133)))
 :pattern ( ($generated@@41 ($generated@@28 $generated@@132) ($generated@@30 $generated@@26 $generated@@133)))
)))
(assert (forall (($generated@@134 Int) ) (! (= ($generated@@38 $generated@@8 ($generated@@12 ($generated@@28 $generated@@134))) ($generated@@30 $generated@@75 ($generated@@38 $generated@@8 ($generated@@12 $generated@@134))))
 :pattern ( ($generated@@38 $generated@@8 ($generated@@12 ($generated@@28 $generated@@134))))
)))
(assert (forall (($generated@@135 T@U) ($generated@@136 T@T) ) (! (= ($generated@@38 $generated@@136 ($generated@@30 $generated@@136 $generated@@135)) ($generated@@30 $generated@@75 ($generated@@38 $generated@@136 $generated@@135)))
 :pattern ( ($generated@@38 $generated@@136 ($generated@@30 $generated@@136 $generated@@135)))
)))
(assert (forall (($generated@@137 Int) ($generated@@138 T@U) ) (! (= ($generated@@25 $generated@@26 ($generated@@41 $generated@@137 $generated@@138) $generated@@27)  (and ($generated@@25 $generated@@8 ($generated@@12 $generated@@137) $generated) ($generated@@25 $generated@@26 $generated@@138 $generated@@27)))
 :pattern ( ($generated@@25 $generated@@26 ($generated@@41 $generated@@137 $generated@@138) $generated@@27))
)))
(assert (forall (($generated@@139 T@U) ) (! ($generated@@25 $generated@@8 $generated@@139 $generated)
 :pattern ( ($generated@@25 $generated@@8 $generated@@139 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@140 () T@U)
(declare-fun $generated@@141 () T@U)
(declare-fun $generated@@142 () T@U)
(declare-fun $generated@@143 () T@U)
(declare-fun $generated@@144 (T@U) Bool)
(declare-fun $generated@@145 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@146  (=> (and (= $generated@@140 ($generated@@73 $generated@@141 $generated@@142 $generated@@1 false)) (= (ControlFlow 0 2) (- 0 1))) (= ($generated@@28 ($generated@@47 ($generated@@48 ($generated@@48 $generated@@143)) ($generated@@30 $generated@@26 ($generated@@41 ($generated@@28 1) ($generated@@30 $generated@@26 ($generated@@41 ($generated@@28 2) ($generated@@30 $generated@@26 ($generated@@41 ($generated@@28 3) ($generated@@30 $generated@@26 ($generated@@41 ($generated@@28 4) ($generated@@30 $generated@@26 $generated@@24))))))))))) ($generated@@28 4)))))
(let (($generated@@147  (=> (and (and ($generated@@144 $generated@@142) ($generated@@145 $generated@@142)) (and (= 2 $generated@@46) (= (ControlFlow 0 3) 2))) $generated@@146)))
$generated@@147)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
