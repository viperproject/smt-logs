(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 (T@T) Int)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 (Bool) T@U)
(declare-fun $generated@@11 (T@U) Bool)
(declare-fun $generated@@12 (Int) T@U)
(declare-fun $generated@@13 (T@U) Int)
(declare-fun $generated@@14 (Real) T@U)
(declare-fun $generated@@15 (T@U) Real)
(declare-fun $generated@@22 (T@U) T@U)
(declare-fun $generated@@23 (T@U) T@U)
(declare-fun $generated@@24 () T@U)
(declare-fun $generated@@25 (T@T T@U T@U) Bool)
(declare-fun $generated@@26 () T@T)
(declare-fun $generated@@27 (T@U) T@U)
(declare-fun $generated@@29 (Int) Int)
(declare-fun $generated@@31 (T@T T@U) T@U)
(declare-fun $generated@@34 (T@U T@U) T@U)
(declare-fun $generated@@35 (T@U T@U) Bool)
(declare-fun $generated@@39 (T@U) Bool)
(declare-fun $generated@@41 (T@U) Bool)
(declare-fun $generated@@43 (T@T T@U) T@U)
(declare-fun $generated@@44 (T@T T@U) T@U)
(declare-fun $generated@@47 () Int)
(declare-fun $generated@@48 (T@U) Int)
(declare-fun $generated@@49 (T@U) Bool)
(declare-fun $generated@@50 () T@U)
(declare-fun $generated@@56 (T@U) T@U)
(declare-fun $generated@@66 (T@U) T@U)
(declare-fun $generated@@69 (T@U) T@U)
(declare-fun $generated@@72 (T@U) T@U)
(declare-fun $generated@@76 (T@U) Int)
(declare-fun $generated@@77 (T@U) Int)
(declare-fun $generated@@82 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@83 () T@T)
(declare-fun $generated@@84 () T@T)
(declare-fun $generated@@85 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@86 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@87 () T@T)
(declare-fun $generated@@88 (T@T T@T) T@T)
(declare-fun $generated@@89 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@90 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@91 (T@T) T@T)
(declare-fun $generated@@92 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@6 $generated@@7) 0) (= ($generated@@6 $generated@@8) 1)) (= ($generated@@6 $generated@@9) 2)) (forall (($generated@@16 Bool) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Int) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Real) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5)
)
(assert (= ($generated@@22 $generated) $generated@@0))
(assert (= ($generated@@23 $generated@@24) $generated@@3))
(assert (= ($generated@@6 $generated@@26) 3))
(assert (forall (($generated@@28 T@U) ) (! ($generated@@25 $generated@@26 $generated@@24 ($generated@@27 $generated@@28))
 :pattern ( ($generated@@25 $generated@@26 $generated@@24 ($generated@@27 $generated@@28)))
)))
(assert (forall (($generated@@30 Int) ) (! (= ($generated@@29 $generated@@30) $generated@@30)
 :pattern ( ($generated@@29 $generated@@30))
)))
(assert (forall (($generated@@32 T@U) ($generated@@33 T@T) ) (! (= ($generated@@31 $generated@@33 $generated@@32) $generated@@32)
 :pattern ( ($generated@@31 $generated@@33 $generated@@32))
)))
(assert (forall (($generated@@36 T@U) ($generated@@37 T@U) ($generated@@38 T@U) ) (! (= ($generated@@25 $generated@@26 ($generated@@34 $generated@@37 $generated@@38) ($generated@@27 $generated@@36))  (and ($generated@@35 $generated@@37 $generated@@36) ($generated@@25 $generated@@26 $generated@@38 ($generated@@27 $generated@@36))))
 :pattern ( ($generated@@25 $generated@@26 ($generated@@34 $generated@@37 $generated@@38) ($generated@@27 $generated@@36)))
)))
(assert (forall (($generated@@40 T@U) ) (! (= ($generated@@39 $generated@@40) (= ($generated@@23 $generated@@40) $generated@@3))
 :pattern ( ($generated@@39 $generated@@40))
)))
(assert (forall (($generated@@42 T@U) ) (! (= ($generated@@41 $generated@@42) (= ($generated@@23 $generated@@42) $generated@@4))
 :pattern ( ($generated@@41 $generated@@42))
)))
(assert (forall (($generated@@45 T@U) ($generated@@46 T@T) ) (! (= ($generated@@44 $generated@@46 ($generated@@43 $generated@@46 $generated@@45)) $generated@@45)
 :pattern ( ($generated@@43 $generated@@46 $generated@@45))
)))
(assert  (=> (<= 1 $generated@@47) (forall (($generated@@51 T@U) ) (!  (=> (or ($generated@@49 ($generated@@31 $generated@@26 $generated@@51)) (and (< 1 $generated@@47) ($generated@@25 $generated@@26 $generated@@51 ($generated@@27 $generated)))) (= ($generated@@48 ($generated@@31 $generated@@26 $generated@@51)) (ite ($generated@@39 ($generated@@31 $generated@@26 $generated@@51)) 0 ($generated@@13 ($generated@@43 $generated@@8 $generated@@50)))))
 :weight 3
 :pattern ( ($generated@@48 ($generated@@31 $generated@@26 $generated@@51)))
))))
(assert (forall (($generated@@52 T@U) ) (!  (=> ($generated@@41 $generated@@52) (exists (($generated@@53 T@U) ($generated@@54 T@U) ) (= $generated@@52 ($generated@@34 $generated@@53 $generated@@54))))
 :pattern ( ($generated@@41 $generated@@52))
)))
(assert (forall (($generated@@55 T@U) ) (!  (=> ($generated@@39 $generated@@55) (= $generated@@55 $generated@@24))
 :pattern ( ($generated@@39 $generated@@55))
)))
(assert (forall (($generated@@57 T@U) ) (!  (and (= ($generated@@22 ($generated@@27 $generated@@57)) $generated@@2) (= ($generated@@56 ($generated@@27 $generated@@57)) $generated@@5))
 :pattern ( ($generated@@27 $generated@@57))
)))
(assert (forall (($generated@@58 T@U) ($generated@@59 T@U) ) (!  (=> ($generated@@25 $generated@@26 $generated@@59 ($generated@@27 $generated@@58)) (or ($generated@@39 $generated@@59) ($generated@@41 $generated@@59)))
 :pattern ( ($generated@@41 $generated@@59) ($generated@@25 $generated@@26 $generated@@59 ($generated@@27 $generated@@58)))
 :pattern ( ($generated@@39 $generated@@59) ($generated@@25 $generated@@26 $generated@@59 ($generated@@27 $generated@@58)))
)))
(assert (forall (($generated@@60 T@U) ) (!  (=> ($generated@@35 $generated@@60 $generated) (and (= ($generated@@44 $generated@@8 ($generated@@43 $generated@@8 $generated@@60)) $generated@@60) ($generated@@25 $generated@@8 ($generated@@43 $generated@@8 $generated@@60) $generated)))
 :pattern ( ($generated@@35 $generated@@60 $generated))
)))
(assert (forall (($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@T) ) (! (= ($generated@@35 ($generated@@44 $generated@@63 $generated@@61) $generated@@62) ($generated@@25 $generated@@63 $generated@@61 $generated@@62))
 :pattern ( ($generated@@35 ($generated@@44 $generated@@63 $generated@@61) $generated@@62))
)))
(assert (forall (($generated@@64 T@U) ($generated@@65 T@U) ) (! (= ($generated@@23 ($generated@@34 $generated@@64 $generated@@65)) $generated@@4)
 :pattern ( ($generated@@34 $generated@@64 $generated@@65))
)))
(assert (forall (($generated@@67 T@U) ($generated@@68 T@U) ) (! (= ($generated@@66 ($generated@@34 $generated@@67 $generated@@68)) $generated@@67)
 :pattern ( ($generated@@34 $generated@@67 $generated@@68))
)))
(assert (forall (($generated@@70 T@U) ($generated@@71 T@U) ) (! (= ($generated@@69 ($generated@@34 $generated@@70 $generated@@71)) $generated@@71)
 :pattern ( ($generated@@34 $generated@@70 $generated@@71))
)))
(assert (forall (($generated@@73 T@U) ) (! (= ($generated@@72 ($generated@@27 $generated@@73)) $generated@@73)
 :pattern ( ($generated@@27 $generated@@73))
)))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@T) ) (! (= ($generated@@43 $generated@@75 ($generated@@44 $generated@@75 $generated@@74)) $generated@@74)
 :pattern ( ($generated@@44 $generated@@75 $generated@@74))
)))
(assert (forall (($generated@@78 T@U) ($generated@@79 T@U) ) (! (< ($generated@@76 $generated@@78) ($generated@@77 ($generated@@34 $generated@@78 $generated@@79)))
 :pattern ( ($generated@@34 $generated@@78 $generated@@79))
)))
(assert (forall (($generated@@80 T@U) ($generated@@81 T@U) ) (! (< ($generated@@77 $generated@@81) ($generated@@77 ($generated@@34 $generated@@80 $generated@@81)))
 :pattern ( ($generated@@34 $generated@@80 $generated@@81))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@93 T@T) ($generated@@94 T@T) ($generated@@95 T@T) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ) (! (= ($generated@@82 $generated@@93 $generated@@94 $generated@@95 ($generated@@89 $generated@@93 $generated@@94 $generated@@95 $generated@@97 $generated@@98 $generated@@99 $generated@@96) $generated@@98 $generated@@99) $generated@@96)
 :weight 0
)) (and (forall (($generated@@100 T@T) ($generated@@101 T@T) ($generated@@102 T@T) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ) (!  (or (= $generated@@105 $generated@@107) (= ($generated@@82 $generated@@100 $generated@@101 $generated@@102 ($generated@@89 $generated@@100 $generated@@101 $generated@@102 $generated@@104 $generated@@105 $generated@@106 $generated@@103) $generated@@107 $generated@@108) ($generated@@82 $generated@@100 $generated@@101 $generated@@102 $generated@@104 $generated@@107 $generated@@108)))
 :weight 0
)) (forall (($generated@@109 T@T) ($generated@@110 T@T) ($generated@@111 T@T) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ) (!  (or (= $generated@@115 $generated@@117) (= ($generated@@82 $generated@@109 $generated@@110 $generated@@111 ($generated@@89 $generated@@109 $generated@@110 $generated@@111 $generated@@113 $generated@@114 $generated@@115 $generated@@112) $generated@@116 $generated@@117) ($generated@@82 $generated@@109 $generated@@110 $generated@@111 $generated@@113 $generated@@116 $generated@@117)))
 :weight 0
)))) (= ($generated@@6 $generated@@83) 4)) (= ($generated@@6 $generated@@84) 5)) (forall (($generated@@118 T@T) ($generated@@119 T@T) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ) (! (= ($generated@@86 $generated@@118 $generated@@119 ($generated@@90 $generated@@118 $generated@@119 $generated@@121 $generated@@122 $generated@@120) $generated@@122) $generated@@120)
 :weight 0
))) (forall (($generated@@123 T@T) ($generated@@124 T@T) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ) (!  (or (= $generated@@127 $generated@@128) (= ($generated@@86 $generated@@123 $generated@@124 ($generated@@90 $generated@@123 $generated@@124 $generated@@126 $generated@@127 $generated@@125) $generated@@128) ($generated@@86 $generated@@123 $generated@@124 $generated@@126 $generated@@128)))
 :weight 0
))) (= ($generated@@6 $generated@@87) 6)) (forall (($generated@@129 T@T) ($generated@@130 T@T) ) (= ($generated@@6 ($generated@@88 $generated@@129 $generated@@130)) 7))) (forall (($generated@@131 T@T) ($generated@@132 T@T) ) (! (= ($generated@@91 ($generated@@88 $generated@@131 $generated@@132)) $generated@@131)
 :pattern ( ($generated@@88 $generated@@131 $generated@@132))
))) (forall (($generated@@133 T@T) ($generated@@134 T@T) ) (! (= ($generated@@92 ($generated@@88 $generated@@133 $generated@@134)) $generated@@134)
 :pattern ( ($generated@@88 $generated@@133 $generated@@134))
))))
(assert (forall (($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 Bool) ($generated@@139 T@U) ($generated@@140 T@U) ) (! (= ($generated@@11 ($generated@@82 $generated@@83 $generated@@84 $generated@@7 ($generated@@85 $generated@@135 $generated@@136 $generated@@137 $generated@@138) $generated@@139 $generated@@140))  (=> (and (or (not (= $generated@@139 $generated@@135)) (not true)) ($generated@@11 ($generated@@43 $generated@@7 ($generated@@86 $generated@@84 $generated@@87 ($generated@@86 $generated@@83 ($generated@@88 $generated@@84 $generated@@87) $generated@@136 $generated@@139) $generated@@137)))) $generated@@138))
 :pattern ( ($generated@@82 $generated@@83 $generated@@84 $generated@@7 ($generated@@85 $generated@@135 $generated@@136 $generated@@137 $generated@@138) $generated@@139 $generated@@140))
)))
(assert (forall (($generated@@141 T@U) ) (! (= ($generated@@76 ($generated@@44 $generated@@26 $generated@@141)) ($generated@@77 $generated@@141))
 :pattern ( ($generated@@76 ($generated@@44 $generated@@26 $generated@@141)))
)))
(assert (forall (($generated@@142 T@U) ($generated@@143 T@U) ) (!  (=> ($generated@@35 $generated@@143 ($generated@@27 $generated@@142)) (and (= ($generated@@44 $generated@@26 ($generated@@43 $generated@@26 $generated@@143)) $generated@@143) ($generated@@25 $generated@@26 ($generated@@43 $generated@@26 $generated@@143) ($generated@@27 $generated@@142))))
 :pattern ( ($generated@@35 $generated@@143 ($generated@@27 $generated@@142)))
)))
(assert (= $generated@@24 ($generated@@31 $generated@@26 $generated@@24)))
(assert (forall (($generated@@144 T@U) ($generated@@145 T@U) ) (! (= ($generated@@34 ($generated@@31 $generated@@87 $generated@@144) ($generated@@31 $generated@@26 $generated@@145)) ($generated@@31 $generated@@26 ($generated@@34 $generated@@144 $generated@@145)))
 :pattern ( ($generated@@34 ($generated@@31 $generated@@87 $generated@@144) ($generated@@31 $generated@@26 $generated@@145)))
)))
(assert (forall (($generated@@146 Int) ) (! (= ($generated@@44 $generated@@8 ($generated@@12 ($generated@@29 $generated@@146))) ($generated@@31 $generated@@87 ($generated@@44 $generated@@8 ($generated@@12 $generated@@146))))
 :pattern ( ($generated@@44 $generated@@8 ($generated@@12 ($generated@@29 $generated@@146))))
)))
(assert (forall (($generated@@147 T@U) ($generated@@148 T@T) ) (! (= ($generated@@44 $generated@@148 ($generated@@31 $generated@@148 $generated@@147)) ($generated@@31 $generated@@87 ($generated@@44 $generated@@148 $generated@@147)))
 :pattern ( ($generated@@44 $generated@@148 ($generated@@31 $generated@@148 $generated@@147)))
)))
(assert  (=> (<= 1 $generated@@47) (forall (($generated@@149 T@U) ) (!  (=> (or ($generated@@49 $generated@@149) (and (< 1 $generated@@47) ($generated@@25 $generated@@26 $generated@@149 ($generated@@27 $generated)))) (= ($generated@@48 $generated@@149) (ite ($generated@@39 $generated@@149) 0 ($generated@@13 ($generated@@43 $generated@@8 $generated@@50)))))
 :pattern ( ($generated@@48 $generated@@149))
))))
(assert (forall (($generated@@150 T@U) ) (! ($generated@@25 $generated@@8 $generated@@150 $generated)
 :pattern ( ($generated@@25 $generated@@8 $generated@@150 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@151 () T@U)
(declare-fun $generated@@152 () T@U)
(declare-fun $generated@@153 () T@U)
(declare-fun $generated@@154 () T@U)
(declare-fun $generated@@155 () Int)
(declare-fun $generated@@156 () T@U)
(declare-fun $generated@@157 () T@U)
(declare-fun $generated@@158 () T@U)
(declare-fun $generated@@159 () T@U)
(declare-fun $generated@@160 () T@U)
(declare-fun $generated@@161 (T@U) Bool)
(declare-fun $generated@@162 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 13) (let (($generated@@163 true))
(let (($generated@@164  (=> (and (= $generated@@151 $generated@@24) (= (ControlFlow 0 7) (- 0 6))) false)))
(let (($generated@@165  (=> (or (not (= $generated@@151 ($generated@@34 $generated@@152 $generated@@153))) (not true)) (and (=> (= (ControlFlow 0 9) 7) $generated@@164) (=> (= (ControlFlow 0 9) 8) $generated@@163)))))
(let (($generated@@166  (=> (and (= $generated@@151 ($generated@@34 $generated@@152 $generated@@153)) (= (ControlFlow 0 5) (- 0 4))) false)))
(let (($generated@@167  (=> (= $generated@@154 ($generated@@34 ($generated@@44 $generated@@8 ($generated@@12 $generated@@155)) $generated@@156)) (=> (and (and ($generated@@25 $generated@@26 $generated@@156 ($generated@@27 $generated)) (= $generated@@157 $generated@@156)) (and ($generated@@25 $generated@@26 $generated@@157 ($generated@@27 $generated)) (= $generated@@151 $generated@@157))) (and (=> (= (ControlFlow 0 10) 5) $generated@@166) (=> (= (ControlFlow 0 10) 9) $generated@@165))))))
(let (($generated@@168 true))
(let (($generated@@169  (=> (or (not (= $generated@@154 $generated@@24)) (not true)) (and (=> (= (ControlFlow 0 11) 10) $generated@@167) (=> (= (ControlFlow 0 11) 3) $generated@@168)))))
(let (($generated@@170 true))
(let (($generated@@171 true))
(let (($generated@@172  (=> (= $generated@@158 ($generated@@85 $generated@@159 $generated@@160 $generated@@1 false)) (and (and (=> (= (ControlFlow 0 12) 1) $generated@@171) (=> (= (ControlFlow 0 12) 2) $generated@@170)) (=> (= (ControlFlow 0 12) 11) $generated@@169)))))
(let (($generated@@173  (=> (and (and (and ($generated@@161 $generated@@160) ($generated@@162 $generated@@160)) ($generated@@25 $generated@@26 $generated@@154 ($generated@@27 $generated))) (and (= 1 $generated@@47) (= (ControlFlow 0 13) 12))) $generated@@172)))
$generated@@173))))))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 7) (- 6))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 5) (- 4))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
