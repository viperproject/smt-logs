(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 (T@T) Int)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (T@U) Bool)
(declare-fun $generated@@13 (Int) T@U)
(declare-fun $generated@@14 (T@U) Int)
(declare-fun $generated@@15 (Real) T@U)
(declare-fun $generated@@16 (T@U) Real)
(declare-fun $generated@@23 (T@U) T@U)
(declare-fun $generated@@24 (T@U T@U) Bool)
(declare-fun $generated@@25 () T@U)
(declare-fun $generated@@27 (T@U) Int)
(declare-fun $generated@@28 () T@U)
(declare-fun $generated@@29 (T@T T@U T@U) Bool)
(declare-fun $generated@@30 () T@T)
(declare-fun $generated@@31 () T@U)
(declare-fun $generated@@32 () T@U)
(declare-fun $generated@@33 (T@U) T@U)
(declare-fun $generated@@35 (T@U Int) T@U)
(declare-fun $generated@@36 (T@U Int T@U) T@U)
(declare-fun $generated@@41 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@42 () T@U)
(declare-fun $generated@@45 (T@T T@U) T@U)
(declare-fun $generated@@46 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 () T@T)
(declare-fun $generated@@49 (T@T T@T) T@T)
(declare-fun $generated@@50 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@51 (T@T) T@T)
(declare-fun $generated@@52 (T@T) T@T)
(declare-fun $generated@@72 (T@T T@U) T@U)
(declare-fun $generated@@75 (T@T T@U) T@U)
(declare-fun $generated@@78 () T@T)
(declare-fun $generated@@79 (T@U) T@U)
(declare-fun $generated@@80 (T@U T@U) Bool)
(declare-fun $generated@@84 (T@U T@U T@U) Bool)
(declare-fun $generated@@101 () T@T)
(declare-fun $generated@@102 (T@U) T@U)
(declare-fun $generated@@107 (T@U) T@U)
(declare-fun $generated@@110 (T@U) T@U)
(declare-fun $generated@@115 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@116 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@117 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@156 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@7 $generated@@8) 0) (= ($generated@@7 $generated@@9) 1)) (= ($generated@@7 $generated@@10) 2)) (forall (($generated@@17 Bool) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Int) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@16 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 T@U) ) (! (= ($generated@@15 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6)
)
(assert (= ($generated@@23 $generated) $generated@@0))
(assert (forall (($generated@@26 T@U) ) (!  (not ($generated@@24 $generated@@25 $generated@@26))
 :pattern ( ($generated@@24 $generated@@25 $generated@@26))
)))
(assert (= ($generated@@27 $generated@@28) 0))
(assert (= ($generated@@7 $generated@@30) 3))
(assert (forall (($generated@@34 T@U) ) (! (= ($generated@@29 $generated@@30 $generated@@34 $generated@@31)  (or (= $generated@@34 $generated@@32) (= ($generated@@33 $generated@@34) $generated@@31)))
 :pattern ( ($generated@@29 $generated@@30 $generated@@34 $generated@@31))
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 Int) ($generated@@39 T@U) ($generated@@40 Int) ) (!  (=> (and (<= 0 $generated@@40) (< $generated@@40 ($generated@@27 $generated@@37))) (and (=> (= $generated@@38 $generated@@40) (= ($generated@@35 ($generated@@36 $generated@@37 $generated@@38 $generated@@39) $generated@@40) $generated@@39)) (=> (or (not (= $generated@@38 $generated@@40)) (not true)) (= ($generated@@35 ($generated@@36 $generated@@37 $generated@@38 $generated@@39) $generated@@40) ($generated@@35 $generated@@37 $generated@@40)))))
 :pattern ( ($generated@@35 ($generated@@36 $generated@@37 $generated@@38 $generated@@39) $generated@@40))
)))
(assert (forall (($generated@@43 T@U) ($generated@@44 T@U) ) (! (= ($generated@@41 $generated@@30 $generated@@43 $generated@@42 $generated@@44) ($generated@@41 $generated@@30 $generated@@43 $generated@@31 $generated@@44))
 :pattern ( ($generated@@41 $generated@@30 $generated@@43 $generated@@42 $generated@@44))
 :pattern ( ($generated@@41 $generated@@30 $generated@@43 $generated@@31 $generated@@44))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@53 T@T) ($generated@@54 T@T) ($generated@@55 T@U) ($generated@@56 T@U) ($generated@@57 T@U) ) (! (= ($generated@@46 $generated@@53 $generated@@54 ($generated@@50 $generated@@53 $generated@@54 $generated@@56 $generated@@57 $generated@@55) $generated@@57) $generated@@55)
 :weight 0
)) (forall (($generated@@58 T@T) ($generated@@59 T@T) ($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@U) ) (!  (or (= $generated@@62 $generated@@63) (= ($generated@@46 $generated@@58 $generated@@59 ($generated@@50 $generated@@58 $generated@@59 $generated@@61 $generated@@62 $generated@@60) $generated@@63) ($generated@@46 $generated@@58 $generated@@59 $generated@@61 $generated@@63)))
 :weight 0
))) (= ($generated@@7 $generated@@47) 4)) (= ($generated@@7 $generated@@48) 5)) (forall (($generated@@64 T@T) ($generated@@65 T@T) ) (= ($generated@@7 ($generated@@49 $generated@@64 $generated@@65)) 6))) (forall (($generated@@66 T@T) ($generated@@67 T@T) ) (! (= ($generated@@51 ($generated@@49 $generated@@66 $generated@@67)) $generated@@66)
 :pattern ( ($generated@@49 $generated@@66 $generated@@67))
))) (forall (($generated@@68 T@T) ($generated@@69 T@T) ) (! (= ($generated@@52 ($generated@@49 $generated@@68 $generated@@69)) $generated@@69)
 :pattern ( ($generated@@49 $generated@@68 $generated@@69))
))))
(assert (forall (($generated@@70 T@U) ($generated@@71 T@U) ) (! (= ($generated@@41 $generated@@30 $generated@@70 $generated@@31 $generated@@71)  (or (= $generated@@70 $generated@@32) ($generated@@12 ($generated@@45 $generated@@8 ($generated@@46 $generated@@47 $generated@@48 ($generated@@46 $generated@@30 ($generated@@49 $generated@@47 $generated@@48) $generated@@71 $generated@@70) $generated@@3)))))
 :pattern ( ($generated@@41 $generated@@30 $generated@@70 $generated@@31 $generated@@71))
)))
(assert (forall (($generated@@73 T@U) ($generated@@74 T@T) ) (! (= ($generated@@72 $generated@@74 $generated@@73) $generated@@73)
 :pattern ( ($generated@@72 $generated@@74 $generated@@73))
)))
(assert (forall (($generated@@76 T@U) ($generated@@77 T@T) ) (! (= ($generated@@75 $generated@@77 ($generated@@45 $generated@@77 $generated@@76)) $generated@@76)
 :pattern ( ($generated@@45 $generated@@77 $generated@@76))
)))
(assert (= ($generated@@7 $generated@@78) 7))
(assert (forall (($generated@@81 T@U) ($generated@@82 T@U) ) (! (= ($generated@@29 $generated@@78 $generated@@81 ($generated@@79 $generated@@82)) (forall (($generated@@83 T@U) ) (!  (=> ($generated@@24 $generated@@81 $generated@@83) ($generated@@80 $generated@@83 $generated@@82))
 :pattern ( ($generated@@24 $generated@@81 $generated@@83))
)))
 :pattern ( ($generated@@29 $generated@@78 $generated@@81 ($generated@@79 $generated@@82)))
)))
(assert (forall (($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@T) ) (! (= ($generated@@84 ($generated@@75 $generated@@88 $generated@@85) $generated@@86 $generated@@87) ($generated@@41 $generated@@88 $generated@@85 $generated@@86 $generated@@87))
 :pattern ( ($generated@@84 ($generated@@75 $generated@@88 $generated@@85) $generated@@86 $generated@@87))
)))
(assert (forall (($generated@@89 T@U) ) (!  (=> ($generated@@80 $generated@@89 $generated@@42) (and (= ($generated@@75 $generated@@30 ($generated@@45 $generated@@30 $generated@@89)) $generated@@89) ($generated@@29 $generated@@30 ($generated@@45 $generated@@30 $generated@@89) $generated@@42)))
 :pattern ( ($generated@@80 $generated@@89 $generated@@42))
)))
(assert (forall (($generated@@90 T@U) ) (!  (=> ($generated@@80 $generated@@90 $generated@@31) (and (= ($generated@@75 $generated@@30 ($generated@@45 $generated@@30 $generated@@90)) $generated@@90) ($generated@@29 $generated@@30 ($generated@@45 $generated@@30 $generated@@90) $generated@@31)))
 :pattern ( ($generated@@80 $generated@@90 $generated@@31))
)))
(assert (forall (($generated@@91 T@U) ) (! (= ($generated@@29 $generated@@30 $generated@@91 $generated@@42)  (and ($generated@@29 $generated@@30 $generated@@91 $generated@@31) (or (not (= $generated@@91 $generated@@32)) (not true))))
 :pattern ( ($generated@@29 $generated@@30 $generated@@91 $generated@@42))
 :pattern ( ($generated@@29 $generated@@30 $generated@@91 $generated@@31))
)))
(assert (forall (($generated@@92 T@U) ) (!  (=> ($generated@@80 $generated@@92 $generated) (and (= ($generated@@75 $generated@@9 ($generated@@45 $generated@@9 $generated@@92)) $generated@@92) ($generated@@29 $generated@@9 ($generated@@45 $generated@@9 $generated@@92) $generated)))
 :pattern ( ($generated@@80 $generated@@92 $generated))
)))
(assert (forall (($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@T) ) (! (= ($generated@@80 ($generated@@75 $generated@@95 $generated@@93) $generated@@94) ($generated@@29 $generated@@95 $generated@@93 $generated@@94))
 :pattern ( ($generated@@80 ($generated@@75 $generated@@95 $generated@@93) $generated@@94))
)))
(assert (forall (($generated@@96 T@U) ) (! (<= 0 ($generated@@27 $generated@@96))
 :pattern ( ($generated@@27 $generated@@96))
)))
(assert (forall (($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ) (! (= ($generated@@41 $generated@@78 $generated@@97 ($generated@@79 $generated@@98) $generated@@99) (forall (($generated@@100 T@U) ) (!  (=> ($generated@@24 $generated@@97 $generated@@100) ($generated@@84 $generated@@100 $generated@@98 $generated@@99))
 :pattern ( ($generated@@24 $generated@@97 $generated@@100))
)))
 :pattern ( ($generated@@41 $generated@@78 $generated@@97 ($generated@@79 $generated@@98) $generated@@99))
)))
(assert (= ($generated@@7 $generated@@101) 8))
(assert (forall (($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ) (! (= ($generated@@41 $generated@@101 $generated@@103 ($generated@@102 $generated@@104) $generated@@105) (forall (($generated@@106 Int) ) (!  (=> (and (<= 0 $generated@@106) (< $generated@@106 ($generated@@27 $generated@@103))) ($generated@@84 ($generated@@35 $generated@@103 $generated@@106) $generated@@104 $generated@@105))
 :pattern ( ($generated@@35 $generated@@103 $generated@@106))
)))
 :pattern ( ($generated@@41 $generated@@101 $generated@@103 ($generated@@102 $generated@@104) $generated@@105))
)))
(assert (forall (($generated@@108 T@U) ) (! (= ($generated@@107 ($generated@@79 $generated@@108)) $generated@@108)
 :pattern ( ($generated@@79 $generated@@108))
)))
(assert (forall (($generated@@109 T@U) ) (! (= ($generated@@23 ($generated@@79 $generated@@109)) $generated@@1)
 :pattern ( ($generated@@79 $generated@@109))
)))
(assert (forall (($generated@@111 T@U) ) (! (= ($generated@@110 ($generated@@102 $generated@@111)) $generated@@111)
 :pattern ( ($generated@@102 $generated@@111))
)))
(assert (forall (($generated@@112 T@U) ) (! (= ($generated@@23 ($generated@@102 $generated@@112)) $generated@@2)
 :pattern ( ($generated@@102 $generated@@112))
)))
(assert (forall (($generated@@113 T@U) ($generated@@114 T@T) ) (! (= ($generated@@45 $generated@@114 ($generated@@75 $generated@@114 $generated@@113)) $generated@@113)
 :pattern ( ($generated@@75 $generated@@114 $generated@@113))
)))
(assert  (and (forall (($generated@@118 T@T) ($generated@@119 T@T) ($generated@@120 T@T) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ) (! (= ($generated@@115 $generated@@118 $generated@@119 $generated@@120 ($generated@@117 $generated@@118 $generated@@119 $generated@@120 $generated@@122 $generated@@123 $generated@@124 $generated@@121) $generated@@123 $generated@@124) $generated@@121)
 :weight 0
)) (and (forall (($generated@@125 T@T) ($generated@@126 T@T) ($generated@@127 T@T) ($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ) (!  (or (= $generated@@130 $generated@@132) (= ($generated@@115 $generated@@125 $generated@@126 $generated@@127 ($generated@@117 $generated@@125 $generated@@126 $generated@@127 $generated@@129 $generated@@130 $generated@@131 $generated@@128) $generated@@132 $generated@@133) ($generated@@115 $generated@@125 $generated@@126 $generated@@127 $generated@@129 $generated@@132 $generated@@133)))
 :weight 0
)) (forall (($generated@@134 T@T) ($generated@@135 T@T) ($generated@@136 T@T) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ) (!  (or (= $generated@@140 $generated@@142) (= ($generated@@115 $generated@@134 $generated@@135 $generated@@136 ($generated@@117 $generated@@134 $generated@@135 $generated@@136 $generated@@138 $generated@@139 $generated@@140 $generated@@137) $generated@@141 $generated@@142) ($generated@@115 $generated@@134 $generated@@135 $generated@@136 $generated@@138 $generated@@141 $generated@@142)))
 :weight 0
)))))
(assert (forall (($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ($generated@@146 Bool) ($generated@@147 T@U) ($generated@@148 T@U) ) (! (= ($generated@@12 ($generated@@115 $generated@@30 $generated@@47 $generated@@8 ($generated@@116 $generated@@143 $generated@@144 $generated@@145 $generated@@146) $generated@@147 $generated@@148))  (=> (and (or (not (= $generated@@147 $generated@@143)) (not true)) ($generated@@12 ($generated@@45 $generated@@8 ($generated@@46 $generated@@47 $generated@@48 ($generated@@46 $generated@@30 ($generated@@49 $generated@@47 $generated@@48) $generated@@144 $generated@@147) $generated@@145)))) $generated@@146))
 :pattern ( ($generated@@115 $generated@@30 $generated@@47 $generated@@8 ($generated@@116 $generated@@143 $generated@@144 $generated@@145 $generated@@146) $generated@@147 $generated@@148))
)))
(assert (forall (($generated@@149 T@U) ($generated@@150 Int) ($generated@@151 T@U) ) (!  (=> (and (<= 0 $generated@@150) (< $generated@@150 ($generated@@27 $generated@@149))) (= ($generated@@27 ($generated@@36 $generated@@149 $generated@@150 $generated@@151)) ($generated@@27 $generated@@149)))
 :pattern ( ($generated@@27 ($generated@@36 $generated@@149 $generated@@150 $generated@@151)))
)))
(assert (forall (($generated@@152 T@U) ($generated@@153 T@U) ) (!  (=> ($generated@@80 $generated@@152 ($generated@@79 $generated@@153)) (and (= ($generated@@75 $generated@@78 ($generated@@45 $generated@@78 $generated@@152)) $generated@@152) ($generated@@29 $generated@@78 ($generated@@45 $generated@@78 $generated@@152) ($generated@@79 $generated@@153))))
 :pattern ( ($generated@@80 $generated@@152 ($generated@@79 $generated@@153)))
)))
(assert (forall (($generated@@154 T@U) ($generated@@155 T@U) ) (!  (=> ($generated@@80 $generated@@154 ($generated@@102 $generated@@155)) (and (= ($generated@@75 $generated@@101 ($generated@@45 $generated@@101 $generated@@154)) $generated@@154) ($generated@@29 $generated@@101 ($generated@@45 $generated@@101 $generated@@154) ($generated@@102 $generated@@155))))
 :pattern ( ($generated@@80 $generated@@154 ($generated@@102 $generated@@155)))
)))
(assert (= ($generated@@23 $generated@@42) $generated@@4))
(assert (= ($generated@@156 $generated@@42) $generated@@6))
(assert (= ($generated@@23 $generated@@31) $generated@@5))
(assert (= ($generated@@156 $generated@@31) $generated@@6))
(assert (forall (($generated@@157 T@U) ($generated@@158 T@T) ) (! (= ($generated@@75 $generated@@158 ($generated@@72 $generated@@158 $generated@@157)) ($generated@@72 $generated@@48 ($generated@@75 $generated@@158 $generated@@157)))
 :pattern ( ($generated@@75 $generated@@158 ($generated@@72 $generated@@158 $generated@@157)))
)))
(assert (forall (($generated@@159 T@U) ) (!  (=> (= ($generated@@27 $generated@@159) 0) (= $generated@@159 $generated@@28))
 :pattern ( ($generated@@27 $generated@@159))
)))
(assert (forall (($generated@@160 T@U) ($generated@@161 T@U) ) (! ($generated@@41 $generated@@9 $generated@@161 $generated $generated@@160)
 :pattern ( ($generated@@41 $generated@@9 $generated@@161 $generated $generated@@160))
)))
(assert (forall (($generated@@162 T@U) ($generated@@163 T@U) ) (! (= ($generated@@29 $generated@@101 $generated@@162 ($generated@@102 $generated@@163)) (forall (($generated@@164 Int) ) (!  (=> (and (<= 0 $generated@@164) (< $generated@@164 ($generated@@27 $generated@@162))) ($generated@@80 ($generated@@35 $generated@@162 $generated@@164) $generated@@163))
 :pattern ( ($generated@@35 $generated@@162 $generated@@164))
)))
 :pattern ( ($generated@@29 $generated@@101 $generated@@162 ($generated@@102 $generated@@163)))
)))
(assert (forall (($generated@@165 T@U) ) (! ($generated@@29 $generated@@9 $generated@@165 $generated)
 :pattern ( ($generated@@29 $generated@@9 $generated@@165 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@166 () T@U)
(declare-fun $generated@@167 () T@U)
(declare-fun $generated@@168 () Int)
(declare-fun $generated@@169 () T@U)
(declare-fun $generated@@170 (T@U) Bool)
(declare-fun $generated@@171 (T@U) Bool)
(declare-fun $generated@@172 () T@U)
(declare-fun $generated@@173 () T@U)
(declare-fun $generated@@174 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@175  (=> (and (= $generated@@166 ($generated@@116 $generated@@32 $generated@@167 $generated@@3 false)) (= (ControlFlow 0 2) (- 0 1))) (and (<= 0 $generated@@168) (< $generated@@168 ($generated@@27 $generated@@169))))))
(let (($generated@@176  (=> (and ($generated@@170 $generated@@167) ($generated@@171 $generated@@167)) (=> (and (and (and (or (not (= $generated@@172 $generated@@32)) (not true)) (and ($generated@@29 $generated@@30 $generated@@172 $generated@@42) ($generated@@41 $generated@@30 $generated@@172 $generated@@42 $generated@@167))) (and ($generated@@29 $generated@@101 $generated@@169 ($generated@@102 ($generated@@79 $generated))) ($generated@@41 $generated@@101 $generated@@169 ($generated@@102 ($generated@@79 $generated)) $generated@@167))) (and (and ($generated@@29 $generated@@101 $generated@@173 ($generated@@102 ($generated@@79 $generated))) ($generated@@41 $generated@@101 $generated@@173 ($generated@@102 ($generated@@79 $generated)) $generated@@167)) (and (= 0 $generated@@174) (= (ControlFlow 0 3) 2)))) $generated@@175))))
$generated@@176)))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
