(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 (T@T) Int)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (T@U) Bool)
(declare-fun $generated@@13 (Int) T@U)
(declare-fun $generated@@14 (T@U) Int)
(declare-fun $generated@@15 (Real) T@U)
(declare-fun $generated@@16 (T@U) Real)
(declare-fun $generated@@23 (T@U) T@U)
(declare-fun $generated@@24 () Int)
(declare-fun $generated@@25 (T@U Int) Bool)
(declare-fun $generated@@26 (T@U Int) Bool)
(declare-fun $generated@@27 () T@U)
(declare-fun $generated@@28 (T@T T@U T@U) Bool)
(declare-fun $generated@@29 () T@T)
(declare-fun $generated@@30 () T@U)
(declare-fun $generated@@33 () T@U)
(declare-fun $generated@@34 (T@U) T@U)
(declare-fun $generated@@36 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@39 (T@T T@U) T@U)
(declare-fun $generated@@42 (T@T T@U) T@U)
(declare-fun $generated@@43 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@44 () T@T)
(declare-fun $generated@@45 () T@T)
(declare-fun $generated@@46 (T@T T@T) T@T)
(declare-fun $generated@@47 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@48 (T@T) T@T)
(declare-fun $generated@@49 (T@T) T@T)
(declare-fun $generated@@69 (Int) Int)
(declare-fun $generated@@75 (T@T T@U) T@U)
(declare-fun $generated@@78 (T@U T@U T@U) Bool)
(declare-fun $generated@@88 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@89 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@90 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@122 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@7 $generated@@8) 0) (= ($generated@@7 $generated@@9) 1)) (= ($generated@@7 $generated@@10) 2)) (forall (($generated@@17 Bool) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Int) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@16 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 T@U) ) (! (= ($generated@@15 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6)
)
(assert (= ($generated@@23 $generated) $generated@@1))
(assert (= ($generated@@23 $generated@@0) $generated@@2))
(assert (= ($generated@@7 $generated@@29) 3))
(assert  (=> (<= 0 $generated@@24) (forall (($generated@@31 T@U) ($generated@@32 Int) ) (!  (=> (or ($generated@@26 $generated@@31 $generated@@32) (and (< 0 $generated@@24) (and (or (not (= $generated@@31 $generated@@27)) (not true)) ($generated@@28 $generated@@29 $generated@@31 $generated@@30)))) (=> ($generated@@25 $generated@@31 $generated@@32) (< $generated@@32 60)))
 :pattern ( ($generated@@25 $generated@@31 $generated@@32))
))))
(assert (forall (($generated@@35 T@U) ) (! (= ($generated@@28 $generated@@29 $generated@@35 $generated@@33)  (or (= $generated@@35 $generated@@27) (= ($generated@@34 $generated@@35) $generated@@33)))
 :pattern ( ($generated@@28 $generated@@29 $generated@@35 $generated@@33))
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ) (! (= ($generated@@36 $generated@@29 $generated@@37 $generated@@30 $generated@@38) ($generated@@36 $generated@@29 $generated@@37 $generated@@33 $generated@@38))
 :pattern ( ($generated@@36 $generated@@29 $generated@@37 $generated@@30 $generated@@38))
 :pattern ( ($generated@@36 $generated@@29 $generated@@37 $generated@@33 $generated@@38))
)))
(assert  (=> (<= 0 $generated@@24) (forall (($generated@@40 T@U) ($generated@@41 Int) ) (!  (=> (or ($generated@@26 $generated@@40 $generated@@41) (and (< 0 $generated@@24) (and (or (not (= $generated@@40 $generated@@27)) (not true)) ($generated@@28 $generated@@29 $generated@@40 $generated@@30)))) (= ($generated@@25 $generated@@40 $generated@@41) ($generated@@12 ($generated@@39 $generated@@8 ($generated@@11 true)))))
 :pattern ( ($generated@@25 $generated@@40 $generated@@41))
))))
(assert  (and (and (and (and (and (and (forall (($generated@@50 T@T) ($generated@@51 T@T) ($generated@@52 T@U) ($generated@@53 T@U) ($generated@@54 T@U) ) (! (= ($generated@@43 $generated@@50 $generated@@51 ($generated@@47 $generated@@50 $generated@@51 $generated@@53 $generated@@54 $generated@@52) $generated@@54) $generated@@52)
 :weight 0
)) (forall (($generated@@55 T@T) ($generated@@56 T@T) ($generated@@57 T@U) ($generated@@58 T@U) ($generated@@59 T@U) ($generated@@60 T@U) ) (!  (or (= $generated@@59 $generated@@60) (= ($generated@@43 $generated@@55 $generated@@56 ($generated@@47 $generated@@55 $generated@@56 $generated@@58 $generated@@59 $generated@@57) $generated@@60) ($generated@@43 $generated@@55 $generated@@56 $generated@@58 $generated@@60)))
 :weight 0
))) (= ($generated@@7 $generated@@44) 4)) (= ($generated@@7 $generated@@45) 5)) (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (= ($generated@@7 ($generated@@46 $generated@@61 $generated@@62)) 6))) (forall (($generated@@63 T@T) ($generated@@64 T@T) ) (! (= ($generated@@48 ($generated@@46 $generated@@63 $generated@@64)) $generated@@63)
 :pattern ( ($generated@@46 $generated@@63 $generated@@64))
))) (forall (($generated@@65 T@T) ($generated@@66 T@T) ) (! (= ($generated@@49 ($generated@@46 $generated@@65 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@46 $generated@@65 $generated@@66))
))))
(assert (forall (($generated@@67 T@U) ($generated@@68 T@U) ) (! (= ($generated@@36 $generated@@29 $generated@@67 $generated@@33 $generated@@68)  (or (= $generated@@67 $generated@@27) ($generated@@12 ($generated@@42 $generated@@8 ($generated@@43 $generated@@44 $generated@@45 ($generated@@43 $generated@@29 ($generated@@46 $generated@@44 $generated@@45) $generated@@68 $generated@@67) $generated@@3)))))
 :pattern ( ($generated@@36 $generated@@29 $generated@@67 $generated@@33 $generated@@68))
)))
(assert (forall (($generated@@70 Int) ) (! (= ($generated@@69 $generated@@70) $generated@@70)
 :pattern ( ($generated@@69 $generated@@70))
)))
(assert (forall (($generated@@71 T@U) ($generated@@72 T@T) ) (! (= ($generated@@39 $generated@@72 $generated@@71) $generated@@71)
 :pattern ( ($generated@@39 $generated@@72 $generated@@71))
)))
(assert  (=> (<= 0 $generated@@24) (forall (($generated@@73 T@U) ($generated@@74 Int) ) (!  (=> (or ($generated@@26 $generated@@73 ($generated@@69 $generated@@74)) (and (< 0 $generated@@24) (and (or (not (= $generated@@73 $generated@@27)) (not true)) ($generated@@28 $generated@@29 $generated@@73 $generated@@30)))) (= ($generated@@25 $generated@@73 ($generated@@69 $generated@@74)) ($generated@@12 ($generated@@39 $generated@@8 ($generated@@11 true)))))
 :weight 3
 :pattern ( ($generated@@25 $generated@@73 ($generated@@69 $generated@@74)))
))))
(assert (forall (($generated@@76 T@U) ($generated@@77 T@T) ) (! (= ($generated@@75 $generated@@77 ($generated@@42 $generated@@77 $generated@@76)) $generated@@76)
 :pattern ( ($generated@@42 $generated@@77 $generated@@76))
)))
(assert (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@T) ) (! (= ($generated@@78 ($generated@@75 $generated@@82 $generated@@79) $generated@@80 $generated@@81) ($generated@@36 $generated@@82 $generated@@79 $generated@@80 $generated@@81))
 :pattern ( ($generated@@78 ($generated@@75 $generated@@82 $generated@@79) $generated@@80 $generated@@81))
)))
(assert (forall (($generated@@83 T@U) ) (! (= ($generated@@28 $generated@@29 $generated@@83 $generated@@30)  (and ($generated@@28 $generated@@29 $generated@@83 $generated@@33) (or (not (= $generated@@83 $generated@@27)) (not true))))
 :pattern ( ($generated@@28 $generated@@29 $generated@@83 $generated@@30))
 :pattern ( ($generated@@28 $generated@@29 $generated@@83 $generated@@33))
)))
(assert (forall (($generated@@84 T@U) ($generated@@85 T@T) ) (! (= ($generated@@42 $generated@@85 ($generated@@75 $generated@@85 $generated@@84)) $generated@@84)
 :pattern ( ($generated@@75 $generated@@85 $generated@@84))
)))
(assert  (=> (<= 0 $generated@@24) (forall (($generated@@86 T@U) ($generated@@87 Int) ) (!  (=> (or ($generated@@26 ($generated@@39 $generated@@29 $generated@@86) ($generated@@69 $generated@@87)) (and (< 0 $generated@@24) (and (or (not (= $generated@@86 $generated@@27)) (not true)) ($generated@@28 $generated@@29 $generated@@86 $generated@@30)))) (= ($generated@@25 ($generated@@39 $generated@@29 $generated@@86) ($generated@@69 $generated@@87)) ($generated@@12 ($generated@@39 $generated@@8 ($generated@@11 true)))))
 :weight 3
 :pattern ( ($generated@@25 ($generated@@39 $generated@@29 $generated@@86) ($generated@@69 $generated@@87)))
))))
(assert  (and (forall (($generated@@91 T@T) ($generated@@92 T@T) ($generated@@93 T@T) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (! (= ($generated@@88 $generated@@91 $generated@@92 $generated@@93 ($generated@@90 $generated@@91 $generated@@92 $generated@@93 $generated@@95 $generated@@96 $generated@@97 $generated@@94) $generated@@96 $generated@@97) $generated@@94)
 :weight 0
)) (and (forall (($generated@@98 T@T) ($generated@@99 T@T) ($generated@@100 T@T) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or (= $generated@@103 $generated@@105) (= ($generated@@88 $generated@@98 $generated@@99 $generated@@100 ($generated@@90 $generated@@98 $generated@@99 $generated@@100 $generated@@102 $generated@@103 $generated@@104 $generated@@101) $generated@@105 $generated@@106) ($generated@@88 $generated@@98 $generated@@99 $generated@@100 $generated@@102 $generated@@105 $generated@@106)))
 :weight 0
)) (forall (($generated@@107 T@T) ($generated@@108 T@T) ($generated@@109 T@T) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (!  (or (= $generated@@113 $generated@@115) (= ($generated@@88 $generated@@107 $generated@@108 $generated@@109 ($generated@@90 $generated@@107 $generated@@108 $generated@@109 $generated@@111 $generated@@112 $generated@@113 $generated@@110) $generated@@114 $generated@@115) ($generated@@88 $generated@@107 $generated@@108 $generated@@109 $generated@@111 $generated@@114 $generated@@115)))
 :weight 0
)))))
(assert (forall (($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 Bool) ($generated@@120 T@U) ($generated@@121 T@U) ) (! (= ($generated@@12 ($generated@@88 $generated@@29 $generated@@44 $generated@@8 ($generated@@89 $generated@@116 $generated@@117 $generated@@118 $generated@@119) $generated@@120 $generated@@121))  (=> (and (or (not (= $generated@@120 $generated@@116)) (not true)) ($generated@@12 ($generated@@42 $generated@@8 ($generated@@43 $generated@@44 $generated@@45 ($generated@@43 $generated@@29 ($generated@@46 $generated@@44 $generated@@45) $generated@@117 $generated@@120) $generated@@118)))) $generated@@119))
 :pattern ( ($generated@@88 $generated@@29 $generated@@44 $generated@@8 ($generated@@89 $generated@@116 $generated@@117 $generated@@118 $generated@@119) $generated@@120 $generated@@121))
)))
(assert (= ($generated@@23 $generated@@33) $generated@@4))
(assert (= ($generated@@122 $generated@@33) $generated@@6))
(assert (= ($generated@@23 $generated@@30) $generated@@5))
(assert (= ($generated@@122 $generated@@30) $generated@@6))
(assert (forall (($generated@@123 Int) ) (! (= ($generated@@75 $generated@@9 ($generated@@13 ($generated@@69 $generated@@123))) ($generated@@39 $generated@@45 ($generated@@75 $generated@@9 ($generated@@13 $generated@@123))))
 :pattern ( ($generated@@75 $generated@@9 ($generated@@13 ($generated@@69 $generated@@123))))
)))
(assert (forall (($generated@@124 T@U) ($generated@@125 T@T) ) (! (= ($generated@@75 $generated@@125 ($generated@@39 $generated@@125 $generated@@124)) ($generated@@39 $generated@@45 ($generated@@75 $generated@@125 $generated@@124)))
 :pattern ( ($generated@@75 $generated@@125 ($generated@@39 $generated@@125 $generated@@124)))
)))
(assert (forall (($generated@@126 T@U) ($generated@@127 T@U) ) (! ($generated@@36 $generated@@9 $generated@@127 $generated@@0 $generated@@126)
 :pattern ( ($generated@@36 $generated@@9 $generated@@127 $generated@@0 $generated@@126))
)))
(assert (forall (($generated@@128 T@U) ($generated@@129 T@U) ) (! ($generated@@36 $generated@@8 $generated@@129 $generated $generated@@128)
 :pattern ( ($generated@@36 $generated@@8 $generated@@129 $generated $generated@@128))
)))
(assert (forall (($generated@@130 T@U) ) (! ($generated@@28 $generated@@9 $generated@@130 $generated@@0)
 :pattern ( ($generated@@28 $generated@@9 $generated@@130 $generated@@0))
)))
(assert (forall (($generated@@131 T@U) ) (! ($generated@@28 $generated@@8 $generated@@131 $generated)
 :pattern ( ($generated@@28 $generated@@8 $generated@@131 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@132 () T@U)
(declare-fun $generated@@133 () Int)
(declare-fun $generated@@134 () T@U)
(declare-fun $generated@@135 () T@U)
(declare-fun $generated@@136 (T@U) Bool)
(declare-fun $generated@@137 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 10) (let (($generated@@138  (=> (= (ControlFlow 0 7) (- 0 6)) (=> ($generated@@25 $generated@@132 $generated@@133) (< $generated@@133 60)))))
(let (($generated@@139  (=> (= ($generated@@25 $generated@@132 $generated@@133) ($generated@@12 ($generated@@39 $generated@@8 ($generated@@11 true)))) (=> (and ($generated@@28 $generated@@8 ($generated@@11 ($generated@@25 $generated@@132 $generated@@133)) $generated) (= (ControlFlow 0 8) 7)) $generated@@138))))
(let (($generated@@140 true))
(let (($generated@@141  (=> (and (=> ($generated@@25 $generated@@132 $generated@@133) (< $generated@@133 60)) (= (ControlFlow 0 5) 1)) $generated@@140)))
(let (($generated@@142  (=> (and ($generated@@78 ($generated@@75 $generated@@29 $generated@@132) $generated@@33 $generated@@134) ($generated@@36 $generated@@9 ($generated@@13 $generated@@133) $generated@@0 $generated@@134)) (and (=> (= (ControlFlow 0 2) (- 0 4)) (or (<= 0 $generated@@133) (= $generated@@133 $generated@@133))) (=> (or (<= 0 $generated@@133) (= $generated@@133 $generated@@133)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (or (and (= $generated@@132 $generated@@132) (= $generated@@133 $generated@@133)) (< $generated@@133 $generated@@133))) (=> (or (and (= $generated@@132 $generated@@132) (= $generated@@133 $generated@@133)) (< $generated@@133 $generated@@133)) (=> (and (and (or (and (= $generated@@132 $generated@@132) (= $generated@@133 $generated@@133)) ($generated@@26 $generated@@132 $generated@@133)) ($generated@@25 $generated@@132 $generated@@133)) (and (< $generated@@133 60) (= (ControlFlow 0 2) 1))) $generated@@140))))))))
(let (($generated@@143  (=> (= $generated@@135 ($generated@@89 $generated@@27 $generated@@134 $generated@@3 false)) (and (and (=> (= (ControlFlow 0 9) 8) $generated@@139) (=> (= (ControlFlow 0 9) 2) $generated@@142)) (=> (= (ControlFlow 0 9) 5) $generated@@141)))))
(let (($generated@@144  (=> (and ($generated@@136 $generated@@134) ($generated@@137 $generated@@134)) (=> (and (and (or (not (= $generated@@132 $generated@@27)) (not true)) (and ($generated@@28 $generated@@29 $generated@@132 $generated@@30) ($generated@@36 $generated@@29 $generated@@132 $generated@@30 $generated@@134))) (and (= 0 $generated@@24) (= (ControlFlow 0 10) 9))) $generated@@143))))
$generated@@144))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 7) (- 6))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
