(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (Bool) T@U)
(declare-fun $generated@@7 (T@U) Bool)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun $generated@@9 (T@U) Int)
(declare-fun $generated@@10 (Real) T@U)
(declare-fun $generated@@11 (T@U) Real)
(declare-fun $generated@@18 (T@U) T@U)
(declare-fun $generated@@19 (Int) Int)
(declare-fun $generated@@21 (T@T T@U) T@U)
(declare-fun $generated@@24 (T@T T@U) T@U)
(declare-fun $generated@@25 (T@T T@U) T@U)
(declare-fun $generated@@28 () Int)
(declare-fun $generated@@29 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@30 () Int)
(declare-fun $generated@@31 (T@U) Bool)
(declare-fun $generated@@33 () Int)
(declare-fun $generated@@35 () Int)
(declare-fun $generated@@37 (Int) Bool)
(declare-fun $generated@@38 (Int) Bool)
(declare-fun $generated@@39 (Int Int) Int)
(declare-fun $generated@@42 (T@T T@U T@U) Bool)
(declare-fun $generated@@45 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@46 () T@T)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@49 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@50 () T@T)
(declare-fun $generated@@51 (T@T T@T) T@T)
(declare-fun $generated@@52 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@53 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@54 (T@T) T@T)
(declare-fun $generated@@55 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@4) 1)) (= ($generated@@2 $generated@@5) 2)) (forall (($generated@@12 Bool) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Int) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Real) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))))
(assert (distinct $generated $generated@@0 $generated@@1)
)
(assert (= ($generated@@18 $generated) $generated@@0))
(assert (forall (($generated@@20 Int) ) (! (= ($generated@@19 $generated@@20) $generated@@20)
 :pattern ( ($generated@@19 $generated@@20))
)))
(assert (forall (($generated@@22 T@U) ($generated@@23 T@T) ) (! (= ($generated@@21 $generated@@23 $generated@@22) $generated@@22)
 :pattern ( ($generated@@21 $generated@@23 $generated@@22))
)))
(assert (forall (($generated@@26 T@U) ($generated@@27 T@T) ) (! (= ($generated@@25 $generated@@27 ($generated@@24 $generated@@27 $generated@@26)) $generated@@26)
 :pattern ( ($generated@@24 $generated@@27 $generated@@26))
)))
(assert  (=> (< 0 $generated@@28) (forall (($generated@@32 T@U) ) (!  (=> ($generated@@31 $generated@@32) ($generated@@29 $generated@@4 ($generated@@8 $generated@@30) $generated $generated@@32))
 :pattern ( ($generated@@29 $generated@@4 ($generated@@8 $generated@@30) $generated $generated@@32))
))))
(assert  (=> (< 0 $generated@@28) (forall (($generated@@34 T@U) ) (!  (=> ($generated@@31 $generated@@34) ($generated@@29 $generated@@4 ($generated@@8 $generated@@33) $generated $generated@@34))
 :pattern ( ($generated@@29 $generated@@4 ($generated@@8 $generated@@33) $generated $generated@@34))
))))
(assert  (=> (< 0 $generated@@28) (forall (($generated@@36 T@U) ) (!  (=> ($generated@@31 $generated@@36) ($generated@@29 $generated@@4 ($generated@@8 $generated@@35) $generated $generated@@36))
 :pattern ( ($generated@@29 $generated@@4 ($generated@@8 $generated@@35) $generated $generated@@36))
))))
(assert  (=> (<= 0 $generated@@28) (forall (($generated@@40 Int) ) (!  (=> (or ($generated@@38 $generated@@40) (< 0 $generated@@28)) (= ($generated@@37 $generated@@40) (= ($generated@@39 $generated@@40 ($generated@@19 2)) ($generated@@19 1))))
 :pattern ( ($generated@@37 $generated@@40))
))))
(assert  (=> (<= 0 $generated@@28) (forall (($generated@@41 Int) ) (!  (=> (or ($generated@@38 ($generated@@19 $generated@@41)) (< 0 $generated@@28)) (= ($generated@@37 ($generated@@19 $generated@@41)) (= ($generated@@19 ($generated@@39 $generated@@41 ($generated@@19 2))) ($generated@@19 1))))
 :weight 3
 :pattern ( ($generated@@37 ($generated@@19 $generated@@41)))
))))
(assert  (=> (< 0 $generated@@28) ($generated@@42 $generated@@4 ($generated@@8 $generated@@30) $generated)))
(assert  (=> (< 0 $generated@@28) ($generated@@42 $generated@@4 ($generated@@8 $generated@@33) $generated)))
(assert  (=> (< 0 $generated@@28) ($generated@@42 $generated@@4 ($generated@@8 $generated@@35) $generated)))
(assert (forall (($generated@@43 T@U) ($generated@@44 T@T) ) (! (= ($generated@@24 $generated@@44 ($generated@@25 $generated@@44 $generated@@43)) $generated@@43)
 :pattern ( ($generated@@25 $generated@@44 $generated@@43))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@56 T@T) ($generated@@57 T@T) ($generated@@58 T@T) ($generated@@59 T@U) ($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@U) ) (! (= ($generated@@45 $generated@@56 $generated@@57 $generated@@58 ($generated@@52 $generated@@56 $generated@@57 $generated@@58 $generated@@60 $generated@@61 $generated@@62 $generated@@59) $generated@@61 $generated@@62) $generated@@59)
 :weight 0
)) (and (forall (($generated@@63 T@T) ($generated@@64 T@T) ($generated@@65 T@T) ($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@U) ) (!  (or (= $generated@@68 $generated@@70) (= ($generated@@45 $generated@@63 $generated@@64 $generated@@65 ($generated@@52 $generated@@63 $generated@@64 $generated@@65 $generated@@67 $generated@@68 $generated@@69 $generated@@66) $generated@@70 $generated@@71) ($generated@@45 $generated@@63 $generated@@64 $generated@@65 $generated@@67 $generated@@70 $generated@@71)))
 :weight 0
)) (forall (($generated@@72 T@T) ($generated@@73 T@T) ($generated@@74 T@T) ($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ) (!  (or (= $generated@@78 $generated@@80) (= ($generated@@45 $generated@@72 $generated@@73 $generated@@74 ($generated@@52 $generated@@72 $generated@@73 $generated@@74 $generated@@76 $generated@@77 $generated@@78 $generated@@75) $generated@@79 $generated@@80) ($generated@@45 $generated@@72 $generated@@73 $generated@@74 $generated@@76 $generated@@79 $generated@@80)))
 :weight 0
)))) (= ($generated@@2 $generated@@46) 3)) (= ($generated@@2 $generated@@47) 4)) (forall (($generated@@81 T@T) ($generated@@82 T@T) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ) (! (= ($generated@@49 $generated@@81 $generated@@82 ($generated@@53 $generated@@81 $generated@@82 $generated@@84 $generated@@85 $generated@@83) $generated@@85) $generated@@83)
 :weight 0
))) (forall (($generated@@86 T@T) ($generated@@87 T@T) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ) (!  (or (= $generated@@90 $generated@@91) (= ($generated@@49 $generated@@86 $generated@@87 ($generated@@53 $generated@@86 $generated@@87 $generated@@89 $generated@@90 $generated@@88) $generated@@91) ($generated@@49 $generated@@86 $generated@@87 $generated@@89 $generated@@91)))
 :weight 0
))) (= ($generated@@2 $generated@@50) 5)) (forall (($generated@@92 T@T) ($generated@@93 T@T) ) (= ($generated@@2 ($generated@@51 $generated@@92 $generated@@93)) 6))) (forall (($generated@@94 T@T) ($generated@@95 T@T) ) (! (= ($generated@@54 ($generated@@51 $generated@@94 $generated@@95)) $generated@@94)
 :pattern ( ($generated@@51 $generated@@94 $generated@@95))
))) (forall (($generated@@96 T@T) ($generated@@97 T@T) ) (! (= ($generated@@55 ($generated@@51 $generated@@96 $generated@@97)) $generated@@97)
 :pattern ( ($generated@@51 $generated@@96 $generated@@97))
))))
(assert (forall (($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 Bool) ($generated@@102 T@U) ($generated@@103 T@U) ) (! (= ($generated@@7 ($generated@@45 $generated@@46 $generated@@47 $generated@@3 ($generated@@48 $generated@@98 $generated@@99 $generated@@100 $generated@@101) $generated@@102 $generated@@103))  (=> (and (or (not (= $generated@@102 $generated@@98)) (not true)) ($generated@@7 ($generated@@24 $generated@@3 ($generated@@49 $generated@@47 $generated@@50 ($generated@@49 $generated@@46 ($generated@@51 $generated@@47 $generated@@50) $generated@@99 $generated@@102) $generated@@100)))) $generated@@101))
 :pattern ( ($generated@@45 $generated@@46 $generated@@47 $generated@@3 ($generated@@48 $generated@@98 $generated@@99 $generated@@100 $generated@@101) $generated@@102 $generated@@103))
)))
(assert (forall (($generated@@104 Int) ($generated@@105 Int) ) (! (= ($generated@@39 $generated@@104 $generated@@105) (mod $generated@@104 $generated@@105))
 :pattern ( ($generated@@39 $generated@@104 $generated@@105))
)))
(assert (forall (($generated@@106 Int) ) (! (= ($generated@@25 $generated@@4 ($generated@@8 ($generated@@19 $generated@@106))) ($generated@@21 $generated@@50 ($generated@@25 $generated@@4 ($generated@@8 $generated@@106))))
 :pattern ( ($generated@@25 $generated@@4 ($generated@@8 ($generated@@19 $generated@@106))))
)))
(assert (forall (($generated@@107 T@U) ($generated@@108 T@T) ) (! (= ($generated@@25 $generated@@108 ($generated@@21 $generated@@108 $generated@@107)) ($generated@@21 $generated@@50 ($generated@@25 $generated@@108 $generated@@107)))
 :pattern ( ($generated@@25 $generated@@108 ($generated@@21 $generated@@108 $generated@@107)))
)))
(assert (forall (($generated@@109 T@U) ($generated@@110 T@U) ) (! ($generated@@29 $generated@@4 $generated@@110 $generated $generated@@109)
 :pattern ( ($generated@@29 $generated@@4 $generated@@110 $generated $generated@@109))
)))
(assert (forall (($generated@@111 T@U) ) (! ($generated@@42 $generated@@4 $generated@@111 $generated)
 :pattern ( ($generated@@42 $generated@@4 $generated@@111 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@112 () T@U)
(declare-fun $generated@@113 (T@U) Bool)
(declare-fun $generated@@114 () T@U)
(declare-fun $generated@@115 () T@U)
(declare-fun $generated@@116 () T@U)
(declare-fun $generated@@117 () Int)
(declare-fun $generated@@118 () Int)
(declare-fun $generated@@119 () Int)
(declare-fun $generated@@120 () Int)
(declare-fun $generated@@121 () T@U)
(declare-fun $generated@@122 () Int)
(declare-fun $generated@@123 () T@U)
(declare-fun $generated@@124 () Int)
(declare-fun $generated@@125 () T@U)
(declare-fun $generated@@126 () Int)
(declare-fun $generated@@127 () Int)
(declare-fun $generated@@128 () Int)
(declare-fun $generated@@129 () T@U)
(declare-fun $generated@@130 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 30) (let (($generated@@131  (=> (= (ControlFlow 0 17) (- 0 16)) (or (or (or (not (= $generated@@30 5)) (not true)) (or (not (= $generated@@33 5)) (not true))) (or (not (= $generated@@35 5)) (not true))))))
(let (($generated@@132  (=> (and (or (or (not (= $generated@@30 5)) (not true)) (or (not (= $generated@@33 5)) (not true))) (= (ControlFlow 0 19) 17)) $generated@@131)))
(let (($generated@@133  (=> (and (not (or (or (not (= $generated@@30 5)) (not true)) (or (not (= $generated@@33 5)) (not true)))) (= (ControlFlow 0 18) 17)) $generated@@131)))
(let (($generated@@134  (=> (or (not (= $generated@@30 5)) (not true)) (and (=> (= (ControlFlow 0 21) 18) $generated@@133) (=> (= (ControlFlow 0 21) 19) $generated@@132)))))
(let (($generated@@135  (=> (= $generated@@30 5) (and (=> (= (ControlFlow 0 20) 18) $generated@@133) (=> (= (ControlFlow 0 20) 19) $generated@@132)))))
(let (($generated@@136  (=> (and (and (and (and ($generated@@37 $generated@@30) ($generated@@37 $generated@@33)) ($generated@@37 $generated@@35)) (and (and ($generated@@31 $generated@@112) ($generated@@113 $generated@@112)) (and (= $generated@@30 ($generated@@19 5)) (= $generated@@114 $generated@@112)))) (and (and (and ($generated@@31 $generated@@115) ($generated@@113 $generated@@115)) (and (= $generated@@33 ($generated@@19 5)) (= $generated@@112 $generated@@115))) (and (and ($generated@@31 $generated@@116) ($generated@@113 $generated@@116)) (and (= $generated@@35 ($generated@@19 5)) (= $generated@@115 $generated@@116))))) (and (=> (= (ControlFlow 0 22) 20) $generated@@135) (=> (= (ControlFlow 0 22) 21) $generated@@134)))))
(let (($generated@@137 true))
(let (($generated@@138  (=> (and ($generated@@38 $generated@@30) (=> ($generated@@37 $generated@@30) (and ($generated@@38 $generated@@33) (=> ($generated@@37 $generated@@33) ($generated@@38 $generated@@35))))) (and (=> (= (ControlFlow 0 23) 22) $generated@@136) (=> (= (ControlFlow 0 23) 15) $generated@@137)))))
(let (($generated@@139  (=> (and (not (and ($generated@@37 $generated@@30) ($generated@@37 $generated@@33))) (= (ControlFlow 0 25) 23)) $generated@@138)))
(let (($generated@@140  (=> (and ($generated@@37 $generated@@30) ($generated@@37 $generated@@33)) (=> (and (and (= $generated@@117 $generated@@35) ($generated@@29 $generated@@4 ($generated@@8 $generated@@117) $generated $generated@@114)) (and ($generated@@38 $generated@@35) (= (ControlFlow 0 24) 23))) $generated@@138))))
(let (($generated@@141  (=> (not ($generated@@37 $generated@@30)) (and (=> (= (ControlFlow 0 27) 24) $generated@@140) (=> (= (ControlFlow 0 27) 25) $generated@@139)))))
(let (($generated@@142  (=> (and (and ($generated@@37 $generated@@30) (= $generated@@118 $generated@@33)) (and ($generated@@29 $generated@@4 ($generated@@8 $generated@@118) $generated $generated@@114) ($generated@@38 $generated@@33))) (and (=> (= (ControlFlow 0 26) 24) $generated@@140) (=> (= (ControlFlow 0 26) 25) $generated@@139)))))
(let (($generated@@143  (=> (= $generated@@119 $generated@@30) (=> (and ($generated@@29 $generated@@4 ($generated@@8 $generated@@119) $generated $generated@@114) ($generated@@38 $generated@@30)) (and (=> (= (ControlFlow 0 28) 26) $generated@@142) (=> (= (ControlFlow 0 28) 27) $generated@@141))))))
(let (($generated@@144  (=> (and ($generated@@38 $generated@@30) ($generated@@38 $generated@@33)) (=> (and (and ($generated@@38 $generated@@35) ($generated@@38 $generated@@30)) (and ($generated@@38 $generated@@33) ($generated@@38 $generated@@35))) (=> (and (and (and (and (and (and (and (not ($generated@@37 $generated@@30)) (not ($generated@@37 $generated@@33))) (not ($generated@@37 $generated@@35))) (not ($generated@@37 $generated@@30))) (not ($generated@@37 $generated@@33))) (not ($generated@@37 $generated@@35))) (not ($generated@@7 ($generated@@21 $generated@@3 ($generated@@6 true))))) (= (ControlFlow 0 14) (- 0 13))) false)))))
(let (($generated@@145  (=> (= $generated@@120 $generated@@35) (=> (and (and ($generated@@29 $generated@@4 ($generated@@8 $generated@@120) $generated $generated@@114) ($generated@@38 $generated@@35)) (and ($generated@@38 $generated@@35) ($generated@@37 $generated@@35))) (=> (and (and (and ($generated@@31 $generated@@121) ($generated@@113 $generated@@121)) (= $generated@@35 ($generated@@19 5))) (and (= $generated@@114 $generated@@121) (= (ControlFlow 0 12) (- 0 11)))) (= $generated@@35 ($generated@@19 5)))))))
(let (($generated@@146  (=> (= $generated@@122 $generated@@33) (=> (and (and ($generated@@29 $generated@@4 ($generated@@8 $generated@@122) $generated $generated@@114) ($generated@@38 $generated@@33)) (and ($generated@@38 $generated@@33) ($generated@@37 $generated@@33))) (=> (and (and (and ($generated@@31 $generated@@123) ($generated@@113 $generated@@123)) (= $generated@@33 ($generated@@19 5))) (and (= $generated@@114 $generated@@123) (= (ControlFlow 0 10) (- 0 9)))) (= $generated@@33 ($generated@@19 5)))))))
(let (($generated@@147  (=> (= $generated@@124 $generated@@30) (=> (and (and ($generated@@29 $generated@@4 ($generated@@8 $generated@@124) $generated $generated@@114) ($generated@@38 $generated@@30)) (and ($generated@@38 $generated@@30) ($generated@@37 $generated@@30))) (=> (and (and (and ($generated@@31 $generated@@125) ($generated@@113 $generated@@125)) (= $generated@@30 ($generated@@19 5))) (and (= $generated@@114 $generated@@125) (= (ControlFlow 0 8) (- 0 7)))) (= $generated@@30 ($generated@@19 5)))))))
(let (($generated@@148  (=> (and (= $generated@@126 $generated@@35) ($generated@@29 $generated@@4 ($generated@@8 $generated@@126) $generated $generated@@114)) (=> (and (and ($generated@@38 $generated@@35) ($generated@@38 $generated@@35)) (and ($generated@@37 $generated@@35) (= (ControlFlow 0 6) (- 0 5)))) (= $generated@@33 ($generated@@19 5))))))
(let (($generated@@149  (=> (and (= $generated@@127 $generated@@33) ($generated@@29 $generated@@4 ($generated@@8 $generated@@127) $generated $generated@@114)) (=> (and (and ($generated@@38 $generated@@33) ($generated@@38 $generated@@33)) (and ($generated@@37 $generated@@33) (= (ControlFlow 0 4) (- 0 3)))) (= $generated@@33 ($generated@@19 5))))))
(let (($generated@@150  (=> (and (= $generated@@128 $generated@@30) ($generated@@29 $generated@@4 ($generated@@8 $generated@@128) $generated $generated@@114)) (=> (and (and ($generated@@38 $generated@@30) ($generated@@38 $generated@@30)) (and ($generated@@37 $generated@@30) (= (ControlFlow 0 2) (- 0 1)))) (= $generated@@30 ($generated@@19 5))))))
(let (($generated@@151  (=> (= $generated@@129 ($generated@@48 $generated@@130 $generated@@114 $generated@@1 false)) (and (and (and (and (and (and (and (=> (= (ControlFlow 0 29) 2) $generated@@150) (=> (= (ControlFlow 0 29) 4) $generated@@149)) (=> (= (ControlFlow 0 29) 6) $generated@@148)) (=> (= (ControlFlow 0 29) 8) $generated@@147)) (=> (= (ControlFlow 0 29) 10) $generated@@146)) (=> (= (ControlFlow 0 29) 12) $generated@@145)) (=> (= (ControlFlow 0 29) 28) $generated@@143)) (=> (= (ControlFlow 0 29) 14) $generated@@144)))))
(let (($generated@@152  (=> (and (and ($generated@@31 $generated@@114) ($generated@@113 $generated@@114)) (and (= 2 $generated@@28) (= (ControlFlow 0 30) 29))) $generated@@151)))
$generated@@152)))))))))))))))))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 4) (- 3))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 6) (- 5))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 17) (- 16))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
