(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun alloc () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun TypeMembers.Tr.Five () Int)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun TypeMembers.Color.Five () Int)
(declare-fun TypeMembers.Small.Five () Int)
(declare-fun TypeMembers.__default.IsUneven (Int) Bool)
(declare-fun |TypeMembers.__default.IsUneven#canCall| (Int) Bool)
(declare-fun Mod (Int Int) Int)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt alloc)
)
(assert (= (Tag TInt) TagInt))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert  (=> (< 0 $FunctionContextHeight) (forall (($h T@U) ) (!  (=> ($IsGoodHeap $h) ($IsAlloc intType (int_2_U TypeMembers.Tr.Five) TInt $h))
 :pattern ( ($IsAlloc intType (int_2_U TypeMembers.Tr.Five) TInt $h))
))))
(assert  (=> (< 0 $FunctionContextHeight) (forall (($h@@0 T@U) ) (!  (=> ($IsGoodHeap $h@@0) ($IsAlloc intType (int_2_U TypeMembers.Color.Five) TInt $h@@0))
 :pattern ( ($IsAlloc intType (int_2_U TypeMembers.Color.Five) TInt $h@@0))
))))
(assert  (=> (< 0 $FunctionContextHeight) (forall (($h@@1 T@U) ) (!  (=> ($IsGoodHeap $h@@1) ($IsAlloc intType (int_2_U TypeMembers.Small.Five) TInt $h@@1))
 :pattern ( ($IsAlloc intType (int_2_U TypeMembers.Small.Five) TInt $h@@1))
))))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|i#0| Int) ) (!  (=> (or (|TypeMembers.__default.IsUneven#canCall| |i#0|) (< 0 $FunctionContextHeight)) (= (TypeMembers.__default.IsUneven |i#0|) (= (Mod |i#0| (LitInt 2)) (LitInt 1))))
 :pattern ( (TypeMembers.__default.IsUneven |i#0|))
))))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|i#0@@0| Int) ) (!  (=> (or (|TypeMembers.__default.IsUneven#canCall| (LitInt |i#0@@0|)) (< 0 $FunctionContextHeight)) (= (TypeMembers.__default.IsUneven (LitInt |i#0@@0|)) (= (LitInt (Mod |i#0@@0| (LitInt 2))) (LitInt 1))))
 :weight 3
 :pattern ( (TypeMembers.__default.IsUneven (LitInt |i#0@@0|)))
))))
(assert  (=> (< 0 $FunctionContextHeight) ($Is intType (int_2_U TypeMembers.Tr.Five) TInt)))
(assert  (=> (< 0 $FunctionContextHeight) ($Is intType (int_2_U TypeMembers.Color.Five) TInt)))
(assert  (=> (< 0 $FunctionContextHeight) ($Is intType (int_2_U TypeMembers.Small.Five) TInt)))
(assert (forall ((x@@5 T@U) (T@@1 T@T) ) (! (= ($Unbox T@@1 ($Box T@@1 x@@5)) x@@5)
 :pattern ( ($Box T@@1 x@@5))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0 t1 t2 (MapType0Store t0 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 3)) (= (Ctor FieldType) 4)) (forall ((t0@@0 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 (MapType1Store t0@@0 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :weight 0
))) (= (Ctor BoxType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 6))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((x@@6 Int) (y Int) ) (! (= (Mod x@@6 y) (mod x@@6 y))
 :pattern ( (Mod x@@6 y))
)))
(assert (forall ((x@@7 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@7))) (Lit BoxType ($Box intType (int_2_U x@@7))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@7))))
)))
(assert (forall ((x@@8 T@U) (T@@2 T@T) ) (! (= ($Box T@@2 (Lit T@@2 x@@8)) (Lit BoxType ($Box T@@2 x@@8)))
 :pattern ( ($Box T@@2 (Lit T@@2 x@@8)))
)))
(assert (forall ((h T@U) (v T@U) ) (! ($IsAlloc intType v TInt h)
 :pattern ( ($IsAlloc intType v TInt h))
)))
(assert (forall ((v@@0 T@U) ) (! ($Is intType v@@0 TInt)
 :pattern ( ($Is intType v@@0 TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $Heap@3 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun $Heap () T@U)
(declare-fun $Heap@4 () T@U)
(declare-fun $Heap@5 () T@U)
(declare-fun |##i#0_2@0| () Int)
(declare-fun |##i#0_1@0| () Int)
(declare-fun |##i#0_0@0| () Int)
(declare-fun |##i#1_0@0| () Int)
(declare-fun $Heap@2 () T@U)
(declare-fun |##i#2_0@0| () Int)
(declare-fun $Heap@1 () T@U)
(declare-fun |##i#3_0@0| () Int)
(declare-fun $Heap@0 () T@U)
(declare-fun |##i#4_0@0| () Int)
(declare-fun |##i#5_0@0| () Int)
(declare-fun |##i#6_0@0| () Int)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun null () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 30) (let ((anon16_correct  (=> (= (ControlFlow 0 17) (- 0 16)) (or (or (or (not (= TypeMembers.Tr.Five 5)) (not true)) (or (not (= TypeMembers.Color.Five 5)) (not true))) (or (not (= TypeMembers.Small.Five 5)) (not true))))))
(let ((anon30_Else_correct  (=> (and (or (or (not (= TypeMembers.Tr.Five 5)) (not true)) (or (not (= TypeMembers.Color.Five 5)) (not true))) (= (ControlFlow 0 19) 17)) anon16_correct)))
(let ((anon30_Then_correct  (=> (and (not (or (or (not (= TypeMembers.Tr.Five 5)) (not true)) (or (not (= TypeMembers.Color.Five 5)) (not true)))) (= (ControlFlow 0 18) 17)) anon16_correct)))
(let ((anon29_Else_correct  (=> (or (not (= TypeMembers.Tr.Five 5)) (not true)) (and (=> (= (ControlFlow 0 21) 18) anon30_Then_correct) (=> (= (ControlFlow 0 21) 19) anon30_Else_correct)))))
(let ((anon29_Then_correct  (=> (= TypeMembers.Tr.Five 5) (and (=> (= (ControlFlow 0 20) 18) anon30_Then_correct) (=> (= (ControlFlow 0 20) 19) anon30_Else_correct)))))
(let ((anon28_Then_correct  (=> (and (and (and (and (TypeMembers.__default.IsUneven TypeMembers.Tr.Five) (TypeMembers.__default.IsUneven TypeMembers.Color.Five)) (TypeMembers.__default.IsUneven TypeMembers.Small.Five)) (and (and ($IsGoodHeap $Heap@3) ($IsHeapAnchor $Heap@3)) (and (= TypeMembers.Tr.Five (LitInt 5)) (= $Heap $Heap@3)))) (and (and (and ($IsGoodHeap $Heap@4) ($IsHeapAnchor $Heap@4)) (and (= TypeMembers.Color.Five (LitInt 5)) (= $Heap@3 $Heap@4))) (and (and ($IsGoodHeap $Heap@5) ($IsHeapAnchor $Heap@5)) (and (= TypeMembers.Small.Five (LitInt 5)) (= $Heap@4 $Heap@5))))) (and (=> (= (ControlFlow 0 22) 20) anon29_Then_correct) (=> (= (ControlFlow 0 22) 21) anon29_Else_correct)))))
(let ((anon28_Else_correct true))
(let ((anon11_correct  (=> (and (|TypeMembers.__default.IsUneven#canCall| TypeMembers.Tr.Five) (=> (TypeMembers.__default.IsUneven TypeMembers.Tr.Five) (and (|TypeMembers.__default.IsUneven#canCall| TypeMembers.Color.Five) (=> (TypeMembers.__default.IsUneven TypeMembers.Color.Five) (|TypeMembers.__default.IsUneven#canCall| TypeMembers.Small.Five))))) (and (=> (= (ControlFlow 0 23) 22) anon28_Then_correct) (=> (= (ControlFlow 0 23) 15) anon28_Else_correct)))))
(let ((anon27_Else_correct  (=> (and (not (and (TypeMembers.__default.IsUneven TypeMembers.Tr.Five) (TypeMembers.__default.IsUneven TypeMembers.Color.Five))) (= (ControlFlow 0 25) 23)) anon11_correct)))
(let ((anon27_Then_correct  (=> (and (TypeMembers.__default.IsUneven TypeMembers.Tr.Five) (TypeMembers.__default.IsUneven TypeMembers.Color.Five)) (=> (and (and (= |##i#0_2@0| TypeMembers.Small.Five) ($IsAlloc intType (int_2_U |##i#0_2@0|) TInt $Heap)) (and (|TypeMembers.__default.IsUneven#canCall| TypeMembers.Small.Five) (= (ControlFlow 0 24) 23))) anon11_correct))))
(let ((anon26_Else_correct  (=> (not (TypeMembers.__default.IsUneven TypeMembers.Tr.Five)) (and (=> (= (ControlFlow 0 27) 24) anon27_Then_correct) (=> (= (ControlFlow 0 27) 25) anon27_Else_correct)))))
(let ((anon26_Then_correct  (=> (and (and (TypeMembers.__default.IsUneven TypeMembers.Tr.Five) (= |##i#0_1@0| TypeMembers.Color.Five)) (and ($IsAlloc intType (int_2_U |##i#0_1@0|) TInt $Heap) (|TypeMembers.__default.IsUneven#canCall| TypeMembers.Color.Five))) (and (=> (= (ControlFlow 0 26) 24) anon27_Then_correct) (=> (= (ControlFlow 0 26) 25) anon27_Else_correct)))))
(let ((anon25_Then_correct  (=> (= |##i#0_0@0| TypeMembers.Tr.Five) (=> (and ($IsAlloc intType (int_2_U |##i#0_0@0|) TInt $Heap) (|TypeMembers.__default.IsUneven#canCall| TypeMembers.Tr.Five)) (and (=> (= (ControlFlow 0 28) 26) anon26_Then_correct) (=> (= (ControlFlow 0 28) 27) anon26_Else_correct))))))
(let ((anon25_Else_correct  (=> (and (|TypeMembers.__default.IsUneven#canCall| TypeMembers.Tr.Five) (|TypeMembers.__default.IsUneven#canCall| TypeMembers.Color.Five)) (=> (and (and (|TypeMembers.__default.IsUneven#canCall| TypeMembers.Small.Five) (|TypeMembers.__default.IsUneven#canCall| TypeMembers.Tr.Five)) (and (|TypeMembers.__default.IsUneven#canCall| TypeMembers.Color.Five) (|TypeMembers.__default.IsUneven#canCall| TypeMembers.Small.Five))) (=> (and (and (and (and (and (and (and (not (TypeMembers.__default.IsUneven TypeMembers.Tr.Five)) (not (TypeMembers.__default.IsUneven TypeMembers.Color.Five))) (not (TypeMembers.__default.IsUneven TypeMembers.Small.Five))) (not (TypeMembers.__default.IsUneven TypeMembers.Tr.Five))) (not (TypeMembers.__default.IsUneven TypeMembers.Color.Five))) (not (TypeMembers.__default.IsUneven TypeMembers.Small.Five))) (not (U_2_bool (Lit boolType (bool_2_U true))))) (= (ControlFlow 0 14) (- 0 13))) false)))))
(let ((anon24_Then_correct  (=> (= |##i#1_0@0| TypeMembers.Small.Five) (=> (and (and ($IsAlloc intType (int_2_U |##i#1_0@0|) TInt $Heap) (|TypeMembers.__default.IsUneven#canCall| TypeMembers.Small.Five)) (and (|TypeMembers.__default.IsUneven#canCall| TypeMembers.Small.Five) (TypeMembers.__default.IsUneven TypeMembers.Small.Five))) (=> (and (and (and ($IsGoodHeap $Heap@2) ($IsHeapAnchor $Heap@2)) (= TypeMembers.Small.Five (LitInt 5))) (and (= $Heap $Heap@2) (= (ControlFlow 0 12) (- 0 11)))) (= TypeMembers.Small.Five (LitInt 5)))))))
(let ((anon23_Then_correct  (=> (= |##i#2_0@0| TypeMembers.Color.Five) (=> (and (and ($IsAlloc intType (int_2_U |##i#2_0@0|) TInt $Heap) (|TypeMembers.__default.IsUneven#canCall| TypeMembers.Color.Five)) (and (|TypeMembers.__default.IsUneven#canCall| TypeMembers.Color.Five) (TypeMembers.__default.IsUneven TypeMembers.Color.Five))) (=> (and (and (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1)) (= TypeMembers.Color.Five (LitInt 5))) (and (= $Heap $Heap@1) (= (ControlFlow 0 10) (- 0 9)))) (= TypeMembers.Color.Five (LitInt 5)))))))
(let ((anon22_Then_correct  (=> (= |##i#3_0@0| TypeMembers.Tr.Five) (=> (and (and ($IsAlloc intType (int_2_U |##i#3_0@0|) TInt $Heap) (|TypeMembers.__default.IsUneven#canCall| TypeMembers.Tr.Five)) (and (|TypeMembers.__default.IsUneven#canCall| TypeMembers.Tr.Five) (TypeMembers.__default.IsUneven TypeMembers.Tr.Five))) (=> (and (and (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (= TypeMembers.Tr.Five (LitInt 5))) (and (= $Heap $Heap@0) (= (ControlFlow 0 8) (- 0 7)))) (= TypeMembers.Tr.Five (LitInt 5)))))))
(let ((anon21_Then_correct  (=> (and (= |##i#4_0@0| TypeMembers.Small.Five) ($IsAlloc intType (int_2_U |##i#4_0@0|) TInt $Heap)) (=> (and (and (|TypeMembers.__default.IsUneven#canCall| TypeMembers.Small.Five) (|TypeMembers.__default.IsUneven#canCall| TypeMembers.Small.Five)) (and (TypeMembers.__default.IsUneven TypeMembers.Small.Five) (= (ControlFlow 0 6) (- 0 5)))) (= TypeMembers.Color.Five (LitInt 5))))))
(let ((anon20_Then_correct  (=> (and (= |##i#5_0@0| TypeMembers.Color.Five) ($IsAlloc intType (int_2_U |##i#5_0@0|) TInt $Heap)) (=> (and (and (|TypeMembers.__default.IsUneven#canCall| TypeMembers.Color.Five) (|TypeMembers.__default.IsUneven#canCall| TypeMembers.Color.Five)) (and (TypeMembers.__default.IsUneven TypeMembers.Color.Five) (= (ControlFlow 0 4) (- 0 3)))) (= TypeMembers.Color.Five (LitInt 5))))))
(let ((anon19_Then_correct  (=> (and (= |##i#6_0@0| TypeMembers.Tr.Five) ($IsAlloc intType (int_2_U |##i#6_0@0|) TInt $Heap)) (=> (and (and (|TypeMembers.__default.IsUneven#canCall| TypeMembers.Tr.Five) (|TypeMembers.__default.IsUneven#canCall| TypeMembers.Tr.Five)) (and (TypeMembers.__default.IsUneven TypeMembers.Tr.Five) (= (ControlFlow 0 2) (- 0 1)))) (= TypeMembers.Tr.Five (LitInt 5))))))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (and (and (and (and (and (and (and (=> (= (ControlFlow 0 29) 2) anon19_Then_correct) (=> (= (ControlFlow 0 29) 4) anon20_Then_correct)) (=> (= (ControlFlow 0 29) 6) anon21_Then_correct)) (=> (= (ControlFlow 0 29) 8) anon22_Then_correct)) (=> (= (ControlFlow 0 29) 10) anon23_Then_correct)) (=> (= (ControlFlow 0 29) 12) anon24_Then_correct)) (=> (= (ControlFlow 0 29) 28) anon25_Then_correct)) (=> (= (ControlFlow 0 29) 14) anon25_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (and (= 2 $FunctionContextHeight) (= (ControlFlow 0 30) 29))) anon0_correct)))
PreconditionGeneratedEntry_correct)))))))))))))))))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 4) (- 3))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 6) (- 5))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 17) (- 16))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
