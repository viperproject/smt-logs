(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () Int)
(declare-fun $generated@@0 (T@U T@U Int) Bool)
(declare-fun $generated@@1 (T@U) T@U)
(declare-fun $generated@@2 (T@T T@U) T@U)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 (Int) Int)
(declare-fun $generated@@5 (T@U Int) Bool)
(declare-fun $generated@@6 (T@U) Int)
(declare-fun $generated@@7 (T@U Int) Bool)
(declare-fun $generated@@8 (T@U T@U) T@U)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U T@U Int) Bool)
(declare-fun $generated@@11 () T@U)
(declare-fun $generated@@12 (T@U T@U) Bool)
(declare-fun $generated@@13 (T@T) Int)
(declare-fun $generated@@14 () T@T)
(declare-fun $generated@@15 () T@T)
(declare-fun $generated@@16 () T@T)
(declare-fun $generated@@17 (Bool) T@U)
(declare-fun $generated@@18 (T@U) Bool)
(declare-fun $generated@@19 (Int) T@U)
(declare-fun $generated@@20 (T@U) Int)
(declare-fun $generated@@21 (Real) T@U)
(declare-fun $generated@@22 (T@U) Real)
(declare-fun $generated@@39 (T@U T@U) Bool)
(declare-fun $generated@@75 (T@T T@U) T@U)
(declare-fun $generated@@76 (T@T T@U) T@U)
(declare-fun $generated@@85 (T@U) Bool)
(declare-fun $generated@@108 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@109 () T@T)
(declare-fun $generated@@110 () T@T)
(declare-fun $generated@@111 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@112 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@113 (T@T T@T) T@T)
(declare-fun $generated@@114 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@115 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@116 (T@T) T@T)
(declare-fun $generated@@117 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (and (= ($generated@@13 $generated@@14) 0) (= ($generated@@13 $generated@@15) 1)) (= ($generated@@13 $generated@@16) 2)) (forall (($generated@@23 Bool) ) (! (= ($generated@@18 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))) (forall (($generated@@24 T@U) ) (! (= ($generated@@17 ($generated@@18 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@18 $generated@@24))
))) (forall (($generated@@25 Int) ) (! (= ($generated@@20 ($generated@@19 $generated@@25)) $generated@@25)
 :pattern ( ($generated@@19 $generated@@25))
))) (forall (($generated@@26 T@U) ) (! (= ($generated@@19 ($generated@@20 $generated@@26)) $generated@@26)
 :pattern ( ($generated@@20 $generated@@26))
))) (forall (($generated@@27 Real) ) (! (= ($generated@@22 ($generated@@21 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@21 $generated@@27))
))) (forall (($generated@@28 T@U) ) (! (= ($generated@@21 ($generated@@22 $generated@@28)) $generated@@28)
 :pattern ( ($generated@@22 $generated@@28))
))) (= ($generated@@13 $generated@@3) 3)))
(assert  (=> (<= 1 $generated) (forall (($generated@@29 T@U) ($generated@@30 T@U) ($generated@@31 Int) ) (!  (=> (or ($generated@@5 ($generated@@2 $generated@@3 $generated@@30) ($generated@@4 $generated@@31)) (< 1 $generated)) (and (and (=> (< 0 ($generated@@6 $generated@@30)) ($generated@@7 ($generated@@8 $generated@@30 ($generated@@9 1)) ($generated@@4 $generated@@31))) (=> (=> (< 0 ($generated@@6 $generated@@30)) ($generated@@10 ($generated@@1 $generated@@11) ($generated@@8 $generated@@30 ($generated@@9 1)) ($generated@@4 $generated@@31))) (=> (= ($generated@@4 0) ($generated@@6 $generated@@30)) (forall (($generated@@32 T@U) ) (!  (=> ($generated@@12 $generated@@32 $generated@@30) ($generated@@5 $generated@@32 $generated@@31))
 :pattern ( ($generated@@0 ($generated@@1 $generated@@29) $generated@@32 $generated@@31))
))))) (= ($generated@@0 ($generated@@1 $generated@@29) ($generated@@2 $generated@@3 $generated@@30) ($generated@@4 $generated@@31))  (and (=> (< 0 ($generated@@6 $generated@@30)) ($generated@@10 ($generated@@1 $generated@@11) ($generated@@8 $generated@@30 ($generated@@9 1)) ($generated@@4 $generated@@31))) (=> (= ($generated@@4 0) ($generated@@6 $generated@@30)) (exists (($generated@@33 T@U) ) (!  (and ($generated@@12 $generated@@33 $generated@@30) ($generated@@0 ($generated@@1 $generated@@29) $generated@@33 $generated@@31))
 :pattern ( ($generated@@0 ($generated@@1 $generated@@29) $generated@@33 $generated@@31))
)))))))
 :weight 3
 :pattern ( ($generated@@0 ($generated@@1 $generated@@29) ($generated@@2 $generated@@3 $generated@@30) ($generated@@4 $generated@@31)))
))))
(assert  (=> (<= 1 $generated) (forall (($generated@@34 T@U) ($generated@@35 T@U) ($generated@@36 Int) ) (!  (=> (or ($generated@@7 ($generated@@2 $generated@@3 $generated@@35) ($generated@@4 $generated@@36)) (< 1 $generated)) (and (and (=> (< 0 ($generated@@6 $generated@@35)) ($generated@@5 ($generated@@8 $generated@@35 ($generated@@9 1)) ($generated@@4 $generated@@36))) (=> (=> (< 0 ($generated@@6 $generated@@35)) ($generated@@0 ($generated@@1 $generated@@11) ($generated@@8 $generated@@35 ($generated@@9 1)) ($generated@@4 $generated@@36))) (=> (= ($generated@@4 0) ($generated@@6 $generated@@35)) (forall (($generated@@37 T@U) ) (!  (=> ($generated@@12 $generated@@37 $generated@@35) ($generated@@7 $generated@@37 $generated@@36))
 :pattern ( ($generated@@10 ($generated@@1 $generated@@34) $generated@@37 $generated@@36))
))))) (= ($generated@@10 ($generated@@1 $generated@@34) ($generated@@2 $generated@@3 $generated@@35) ($generated@@4 $generated@@36))  (and (=> (< 0 ($generated@@6 $generated@@35)) ($generated@@0 ($generated@@1 $generated@@11) ($generated@@8 $generated@@35 ($generated@@9 1)) ($generated@@4 $generated@@36))) (=> (= ($generated@@4 0) ($generated@@6 $generated@@35)) (exists (($generated@@38 T@U) ) (!  (and ($generated@@12 $generated@@38 $generated@@35) ($generated@@10 ($generated@@1 $generated@@34) $generated@@38 $generated@@36))
 :pattern ( ($generated@@10 ($generated@@1 $generated@@34) $generated@@38 $generated@@36))
)))))))
 :weight 3
 :pattern ( ($generated@@10 ($generated@@1 $generated@@34) ($generated@@2 $generated@@3 $generated@@35) ($generated@@4 $generated@@36)))
))))
(assert  (=> (<= 1 $generated) (forall (($generated@@40 T@U) ($generated@@41 Int) ($generated@@42 T@U) ($generated@@43 T@U) ($generated@@44 T@U) ) (!  (=> ($generated@@39 $generated@@42 $generated@@43) (=> ($generated@@0 $generated@@40 $generated@@42 $generated@@41) ($generated@@0 $generated@@40 $generated@@43 $generated@@41)))
 :pattern ( ($generated@@0 $generated@@40 $generated@@42 $generated@@41) ($generated@@12 $generated@@42 $generated@@44) ($generated@@12 $generated@@43 $generated@@44))
))))
(assert  (=> (<= 1 $generated) (forall (($generated@@45 T@U) ($generated@@46 Int) ($generated@@47 T@U) ($generated@@48 T@U) ($generated@@49 T@U) ) (!  (=> ($generated@@39 $generated@@47 $generated@@48) (=> ($generated@@10 $generated@@45 $generated@@47 $generated@@46) ($generated@@10 $generated@@45 $generated@@48 $generated@@46)))
 :pattern ( ($generated@@10 $generated@@45 $generated@@47 $generated@@46) ($generated@@12 $generated@@47 $generated@@49) ($generated@@12 $generated@@48 $generated@@49))
))))
(assert (forall (($generated@@50 T@U) ($generated@@51 T@U) ($generated@@52 T@U) ) (!  (=> (and ($generated@@39 $generated@@50 $generated@@51) ($generated@@39 $generated@@51 $generated@@52)) ($generated@@39 $generated@@50 $generated@@52))
 :pattern ( ($generated@@39 $generated@@50 $generated@@51) ($generated@@39 $generated@@51 $generated@@52))
 :pattern ( ($generated@@39 $generated@@50 $generated@@51) ($generated@@39 $generated@@50 $generated@@52))
)))
(assert (forall (($generated@@53 T@U) ($generated@@54 Int) ($generated@@55 Int) ) (!  (=> (and (and (<= 0 $generated@@54) (<= 0 $generated@@55)) (<= (+ $generated@@54 $generated@@55) ($generated@@6 $generated@@53))) (= ($generated@@8 ($generated@@8 $generated@@53 ($generated@@9 $generated@@54)) ($generated@@9 $generated@@55)) ($generated@@8 $generated@@53 ($generated@@9 (+ $generated@@54 $generated@@55)))))
 :pattern ( ($generated@@8 ($generated@@8 $generated@@53 ($generated@@9 $generated@@54)) ($generated@@9 $generated@@55)))
)))
(assert  (=> (<= 1 $generated) (forall (($generated@@56 T@U) ($generated@@57 T@U) ($generated@@58 Int) ) (!  (=> (or ($generated@@5 $generated@@57 $generated@@58) (< 1 $generated)) (and (and (=> (< 0 ($generated@@6 $generated@@57)) ($generated@@7 ($generated@@8 $generated@@57 ($generated@@9 1)) $generated@@58)) (=> (=> (< 0 ($generated@@6 $generated@@57)) ($generated@@10 ($generated@@1 $generated@@11) ($generated@@8 $generated@@57 ($generated@@9 1)) $generated@@58)) (=> (= ($generated@@4 0) ($generated@@6 $generated@@57)) (forall (($generated@@59 T@U) ) (!  (=> ($generated@@12 $generated@@59 $generated@@57) ($generated@@5 $generated@@59 $generated@@58))
 :pattern ( ($generated@@0 $generated@@56 $generated@@59 $generated@@58))
))))) (= ($generated@@0 ($generated@@1 $generated@@56) $generated@@57 $generated@@58)  (and (=> (< 0 ($generated@@6 $generated@@57)) ($generated@@10 ($generated@@1 $generated@@11) ($generated@@8 $generated@@57 ($generated@@9 1)) $generated@@58)) (=> (= ($generated@@4 0) ($generated@@6 $generated@@57)) (exists (($generated@@60 T@U) ) (!  (and ($generated@@12 $generated@@60 $generated@@57) ($generated@@0 $generated@@56 $generated@@60 $generated@@58))
 :pattern ( ($generated@@0 $generated@@56 $generated@@60 $generated@@58))
)))))))
 :pattern ( ($generated@@0 ($generated@@1 $generated@@56) $generated@@57 $generated@@58))
))))
(assert  (=> (<= 1 $generated) (forall (($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 Int) ) (!  (=> (or ($generated@@7 $generated@@62 $generated@@63) (< 1 $generated)) (and (and (=> (< 0 ($generated@@6 $generated@@62)) ($generated@@5 ($generated@@8 $generated@@62 ($generated@@9 1)) $generated@@63)) (=> (=> (< 0 ($generated@@6 $generated@@62)) ($generated@@0 ($generated@@1 $generated@@11) ($generated@@8 $generated@@62 ($generated@@9 1)) $generated@@63)) (=> (= ($generated@@4 0) ($generated@@6 $generated@@62)) (forall (($generated@@64 T@U) ) (!  (=> ($generated@@12 $generated@@64 $generated@@62) ($generated@@7 $generated@@64 $generated@@63))
 :pattern ( ($generated@@10 $generated@@61 $generated@@64 $generated@@63))
))))) (= ($generated@@10 ($generated@@1 $generated@@61) $generated@@62 $generated@@63)  (and (=> (< 0 ($generated@@6 $generated@@62)) ($generated@@0 ($generated@@1 $generated@@11) ($generated@@8 $generated@@62 ($generated@@9 1)) $generated@@63)) (=> (= ($generated@@4 0) ($generated@@6 $generated@@62)) (exists (($generated@@65 T@U) ) (!  (and ($generated@@12 $generated@@65 $generated@@62) ($generated@@10 $generated@@61 $generated@@65 $generated@@63))
 :pattern ( ($generated@@10 $generated@@61 $generated@@65 $generated@@63))
)))))))
 :pattern ( ($generated@@10 ($generated@@1 $generated@@61) $generated@@62 $generated@@63))
))))
(assert  (=> (<= 1 $generated) (forall (($generated@@66 T@U) ($generated@@67 Int) ($generated@@68 T@U) ) (!  (=> (= $generated@@68 ($generated@@9 0)) (not ($generated@@0 $generated@@66 $generated@@68 $generated@@67)))
 :pattern ( ($generated@@0 $generated@@66 $generated@@68 $generated@@67))
))))
(assert  (=> (<= 1 $generated) (forall (($generated@@69 T@U) ($generated@@70 Int) ($generated@@71 T@U) ) (!  (=> (= $generated@@71 ($generated@@9 0)) (not ($generated@@10 $generated@@69 $generated@@71 $generated@@70)))
 :pattern ( ($generated@@10 $generated@@69 $generated@@71 $generated@@70))
))))
(assert (forall (($generated@@72 Int) ) (! (= ($generated@@4 $generated@@72) $generated@@72)
 :pattern ( ($generated@@4 $generated@@72))
)))
(assert (forall (($generated@@73 T@U) ($generated@@74 T@T) ) (! (= ($generated@@2 $generated@@74 $generated@@73) $generated@@73)
 :pattern ( ($generated@@2 $generated@@74 $generated@@73))
)))
(assert (forall (($generated@@77 T@U) ($generated@@78 T@T) ) (! (= ($generated@@76 $generated@@78 ($generated@@75 $generated@@78 $generated@@77)) $generated@@77)
 :pattern ( ($generated@@75 $generated@@78 $generated@@77))
)))
(assert (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 Int) ) (! (= ($generated@@0 ($generated@@1 $generated@@79) $generated@@80 $generated@@81) ($generated@@0 $generated@@79 $generated@@80 $generated@@81))
 :pattern ( ($generated@@0 ($generated@@1 $generated@@79) $generated@@80 $generated@@81))
)))
(assert (forall (($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 Int) ) (! (= ($generated@@10 ($generated@@1 $generated@@82) $generated@@83 $generated@@84) ($generated@@10 $generated@@82 $generated@@83 $generated@@84))
 :pattern ( ($generated@@10 ($generated@@1 $generated@@82) $generated@@83 $generated@@84))
)))
(assert (forall (($generated@@86 T@U) ($generated@@87 T@U) ) (!  (=> (and ($generated@@85 $generated@@87) (<= ($generated@@6 $generated@@87) ($generated@@6 $generated@@86))) (and (= ($generated@@85 ($generated@@8 $generated@@86 $generated@@87)) ($generated@@85 $generated@@86)) (= ($generated@@6 ($generated@@8 $generated@@86 $generated@@87)) (- ($generated@@6 $generated@@86) ($generated@@6 $generated@@87)))))
 :pattern ( ($generated@@8 $generated@@86 $generated@@87))
)))
(assert (forall (($generated@@88 Int) ) (!  (=> (<= 0 $generated@@88) (and ($generated@@85 ($generated@@9 $generated@@88)) (= ($generated@@6 ($generated@@9 $generated@@88)) $generated@@88)))
 :pattern ( ($generated@@9 $generated@@88))
)))
(assert (forall (($generated@@89 T@U) ($generated@@90 T@U) ) (!  (or (or ($generated@@39 $generated@@89 $generated@@90) (= $generated@@89 $generated@@90)) ($generated@@39 $generated@@90 $generated@@89))
 :pattern ( ($generated@@39 $generated@@89 $generated@@90) ($generated@@39 $generated@@90 $generated@@89))
)))
(assert (forall (($generated@@91 T@U) ($generated@@92 T@U) ) (! (= ($generated@@12 $generated@@91 $generated@@92) ($generated@@39 $generated@@91 $generated@@92))
 :pattern ( ($generated@@12 $generated@@91 $generated@@92))
)))
(assert (forall (($generated@@93 T@U) ) (! (<= 0 ($generated@@6 $generated@@93))
 :pattern ( ($generated@@6 $generated@@93))
)))
(assert (forall (($generated@@94 T@U) ($generated@@95 T@T) ) (! (= ($generated@@75 $generated@@95 ($generated@@76 $generated@@95 $generated@@94)) $generated@@94)
 :pattern ( ($generated@@76 $generated@@95 $generated@@94))
)))
(assert  (=> (<= 1 $generated) (forall (($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 Int) ) (!  (=> (or ($generated@@5 ($generated@@2 $generated@@3 $generated@@97) $generated@@98) (< 1 $generated)) (and (and (=> (< 0 ($generated@@6 $generated@@97)) ($generated@@7 ($generated@@8 $generated@@97 ($generated@@9 1)) $generated@@98)) (=> (=> (< 0 ($generated@@6 $generated@@97)) ($generated@@10 ($generated@@1 $generated@@11) ($generated@@8 $generated@@97 ($generated@@9 1)) $generated@@98)) (=> (= ($generated@@4 0) ($generated@@6 $generated@@97)) (forall (($generated@@99 T@U) ) (!  (=> ($generated@@12 $generated@@99 $generated@@97) ($generated@@5 $generated@@99 $generated@@98))
 :pattern ( ($generated@@0 ($generated@@1 $generated@@96) $generated@@99 $generated@@98))
))))) (= ($generated@@0 ($generated@@1 $generated@@96) ($generated@@2 $generated@@3 $generated@@97) $generated@@98)  (and (=> (< 0 ($generated@@6 $generated@@97)) ($generated@@10 ($generated@@1 $generated@@11) ($generated@@8 $generated@@97 ($generated@@9 1)) $generated@@98)) (=> (= ($generated@@4 0) ($generated@@6 $generated@@97)) (exists (($generated@@100 T@U) ) (!  (and ($generated@@12 $generated@@100 $generated@@97) ($generated@@0 ($generated@@1 $generated@@96) $generated@@100 $generated@@98))
 :pattern ( ($generated@@0 ($generated@@1 $generated@@96) $generated@@100 $generated@@98))
)))))))
 :weight 3
 :pattern ( ($generated@@0 ($generated@@1 $generated@@96) ($generated@@2 $generated@@3 $generated@@97) $generated@@98))
))))
(assert  (=> (<= 1 $generated) (forall (($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 Int) ) (!  (=> (or ($generated@@7 ($generated@@2 $generated@@3 $generated@@102) $generated@@103) (< 1 $generated)) (and (and (=> (< 0 ($generated@@6 $generated@@102)) ($generated@@5 ($generated@@8 $generated@@102 ($generated@@9 1)) $generated@@103)) (=> (=> (< 0 ($generated@@6 $generated@@102)) ($generated@@0 ($generated@@1 $generated@@11) ($generated@@8 $generated@@102 ($generated@@9 1)) $generated@@103)) (=> (= ($generated@@4 0) ($generated@@6 $generated@@102)) (forall (($generated@@104 T@U) ) (!  (=> ($generated@@12 $generated@@104 $generated@@102) ($generated@@7 $generated@@104 $generated@@103))
 :pattern ( ($generated@@10 ($generated@@1 $generated@@101) $generated@@104 $generated@@103))
))))) (= ($generated@@10 ($generated@@1 $generated@@101) ($generated@@2 $generated@@3 $generated@@102) $generated@@103)  (and (=> (< 0 ($generated@@6 $generated@@102)) ($generated@@0 ($generated@@1 $generated@@11) ($generated@@8 $generated@@102 ($generated@@9 1)) $generated@@103)) (=> (= ($generated@@4 0) ($generated@@6 $generated@@102)) (exists (($generated@@105 T@U) ) (!  (and ($generated@@12 $generated@@105 $generated@@102) ($generated@@10 ($generated@@1 $generated@@101) $generated@@105 $generated@@103))
 :pattern ( ($generated@@10 ($generated@@1 $generated@@101) $generated@@105 $generated@@103))
)))))))
 :weight 3
 :pattern ( ($generated@@10 ($generated@@1 $generated@@101) ($generated@@2 $generated@@3 $generated@@102) $generated@@103))
))))
(assert (forall (($generated@@106 T@U) ($generated@@107 T@U) ) (!  (and (and (and (=> ($generated@@39 $generated@@106 $generated@@107) (or (not (= $generated@@106 $generated@@107)) (not true))) (=> (and ($generated@@85 $generated@@106) (not ($generated@@85 $generated@@107))) ($generated@@39 $generated@@106 $generated@@107))) (=> (and ($generated@@85 $generated@@106) ($generated@@85 $generated@@107)) (= ($generated@@39 $generated@@106 $generated@@107) (< ($generated@@6 $generated@@106) ($generated@@6 $generated@@107))))) (=> (and ($generated@@39 $generated@@106 $generated@@107) ($generated@@85 $generated@@107)) ($generated@@85 $generated@@106)))
 :pattern ( ($generated@@39 $generated@@106 $generated@@107))
)))
(assert  (and (and (and (and (and (and (and (and (forall (($generated@@118 T@T) ($generated@@119 T@T) ($generated@@120 T@T) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ) (! (= ($generated@@108 $generated@@118 $generated@@119 $generated@@120 ($generated@@114 $generated@@118 $generated@@119 $generated@@120 $generated@@122 $generated@@123 $generated@@124 $generated@@121) $generated@@123 $generated@@124) $generated@@121)
 :weight 0
)) (and (forall (($generated@@125 T@T) ($generated@@126 T@T) ($generated@@127 T@T) ($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ) (!  (or (= $generated@@130 $generated@@132) (= ($generated@@108 $generated@@125 $generated@@126 $generated@@127 ($generated@@114 $generated@@125 $generated@@126 $generated@@127 $generated@@129 $generated@@130 $generated@@131 $generated@@128) $generated@@132 $generated@@133) ($generated@@108 $generated@@125 $generated@@126 $generated@@127 $generated@@129 $generated@@132 $generated@@133)))
 :weight 0
)) (forall (($generated@@134 T@T) ($generated@@135 T@T) ($generated@@136 T@T) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ) (!  (or (= $generated@@140 $generated@@142) (= ($generated@@108 $generated@@134 $generated@@135 $generated@@136 ($generated@@114 $generated@@134 $generated@@135 $generated@@136 $generated@@138 $generated@@139 $generated@@140 $generated@@137) $generated@@141 $generated@@142) ($generated@@108 $generated@@134 $generated@@135 $generated@@136 $generated@@138 $generated@@141 $generated@@142)))
 :weight 0
)))) (= ($generated@@13 $generated@@109) 4)) (= ($generated@@13 $generated@@110) 5)) (forall (($generated@@143 T@T) ($generated@@144 T@T) ($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 T@U) ) (! (= ($generated@@112 $generated@@143 $generated@@144 ($generated@@115 $generated@@143 $generated@@144 $generated@@146 $generated@@147 $generated@@145) $generated@@147) $generated@@145)
 :weight 0
))) (forall (($generated@@148 T@T) ($generated@@149 T@T) ($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 T@U) ) (!  (or (= $generated@@152 $generated@@153) (= ($generated@@112 $generated@@148 $generated@@149 ($generated@@115 $generated@@148 $generated@@149 $generated@@151 $generated@@152 $generated@@150) $generated@@153) ($generated@@112 $generated@@148 $generated@@149 $generated@@151 $generated@@153)))
 :weight 0
))) (forall (($generated@@154 T@T) ($generated@@155 T@T) ) (= ($generated@@13 ($generated@@113 $generated@@154 $generated@@155)) 6))) (forall (($generated@@156 T@T) ($generated@@157 T@T) ) (! (= ($generated@@116 ($generated@@113 $generated@@156 $generated@@157)) $generated@@156)
 :pattern ( ($generated@@113 $generated@@156 $generated@@157))
))) (forall (($generated@@158 T@T) ($generated@@159 T@T) ) (! (= ($generated@@117 ($generated@@113 $generated@@158 $generated@@159)) $generated@@159)
 :pattern ( ($generated@@113 $generated@@158 $generated@@159))
))))
(assert (forall (($generated@@160 T@U) ($generated@@161 T@U) ($generated@@162 T@U) ($generated@@163 Bool) ($generated@@164 T@U) ($generated@@165 T@U) ) (! (= ($generated@@18 ($generated@@108 $generated@@109 $generated@@110 $generated@@14 ($generated@@111 $generated@@160 $generated@@161 $generated@@162 $generated@@163) $generated@@164 $generated@@165))  (=> (and (or (not (= $generated@@164 $generated@@160)) (not true)) ($generated@@18 ($generated@@75 $generated@@14 ($generated@@112 $generated@@110 $generated@@3 ($generated@@112 $generated@@109 ($generated@@113 $generated@@110 $generated@@3) $generated@@161 $generated@@164) $generated@@162)))) $generated@@163))
 :pattern ( ($generated@@108 $generated@@109 $generated@@110 $generated@@14 ($generated@@111 $generated@@160 $generated@@161 $generated@@162 $generated@@163) $generated@@164 $generated@@165))
)))
(assert (forall (($generated@@166 T@U) ) (!  (=> ($generated@@85 $generated@@166) (= $generated@@166 ($generated@@9 ($generated@@6 $generated@@166))))
 :pattern ( ($generated@@6 $generated@@166))
 :pattern ( ($generated@@85 $generated@@166))
)))
(assert (forall (($generated@@167 T@U) ($generated@@168 T@U) ) (!  (=> (and ($generated@@85 $generated@@168) (<= ($generated@@6 $generated@@168) ($generated@@6 $generated@@167))) (or (and (= $generated@@168 ($generated@@9 0)) (= ($generated@@8 $generated@@167 $generated@@168) $generated@@167)) (and (or (not (= $generated@@168 ($generated@@9 0))) (not true)) ($generated@@39 ($generated@@8 $generated@@167 $generated@@168) $generated@@167))))
 :pattern ( ($generated@@8 $generated@@167 $generated@@168))
)))
(assert (forall (($generated@@169 Int) ) (! (= ($generated@@76 $generated@@15 ($generated@@19 ($generated@@4 $generated@@169))) ($generated@@2 $generated@@3 ($generated@@76 $generated@@15 ($generated@@19 $generated@@169))))
 :pattern ( ($generated@@76 $generated@@15 ($generated@@19 ($generated@@4 $generated@@169))))
)))
(assert (forall (($generated@@170 T@U) ($generated@@171 T@T) ) (! (= ($generated@@76 $generated@@171 ($generated@@2 $generated@@171 $generated@@170)) ($generated@@2 $generated@@3 ($generated@@76 $generated@@171 $generated@@170)))
 :pattern ( ($generated@@76 $generated@@171 ($generated@@2 $generated@@171 $generated@@170)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@172 () T@U)
(declare-fun $generated@@173 (T@U) Bool)
(declare-fun $generated@@174 () T@U)
(declare-fun $generated@@175 (T@U) Bool)
(declare-fun $generated@@176 () T@U)
(declare-fun $generated@@177 () T@U)
(declare-fun $generated@@178 () T@U)
(declare-fun $generated@@179 () T@U)
(declare-fun $generated@@180 () T@U)
(declare-fun $generated@@181 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 6) (let (($generated@@182  (=> (= (ControlFlow 0 2) (- 0 1)) ($generated@@18 ($generated@@2 $generated@@14 ($generated@@17 false))))))
(let (($generated@@183  (=> (<= ($generated@@6 $generated@@172) 0) (=> (and (and (and ($generated@@173 $generated@@174) ($generated@@175 $generated@@174)) (= $generated@@176 $generated@@174)) (and (forall (($generated@@184 T@U) ($generated@@185 Int) ) (!  (=> (and ($generated@@39 $generated@@184 $generated@@172) (or ($generated@@0 ($generated@@1 $generated@@11) $generated@@184 $generated@@185) ($generated@@10 ($generated@@1 $generated@@11) $generated@@184 $generated@@185))) ($generated@@18 ($generated@@2 $generated@@14 ($generated@@17 false))))
 :pattern ( ($generated@@10 ($generated@@1 $generated@@11) $generated@@184 $generated@@185))
 :pattern ( ($generated@@0 ($generated@@1 $generated@@11) $generated@@184 $generated@@185))
)) (= (ControlFlow 0 4) 2))) $generated@@182))))
(let (($generated@@186  (=> (and (< 0 ($generated@@6 $generated@@172)) (= (ControlFlow 0 3) 2)) $generated@@182)))
(let (($generated@@187  (=> (= $generated@@177 ($generated@@111 $generated@@178 $generated@@179 $generated@@180 false)) (=> (and (and ($generated@@173 $generated@@176) ($generated@@175 $generated@@176)) (and (= $generated@@179 $generated@@176) (forall (($generated@@188 T@U) ($generated@@189 Int) ) (!  (=> (and (or ($generated@@0 ($generated@@1 $generated@@11) $generated@@188 $generated@@189) ($generated@@10 ($generated@@1 $generated@@11) $generated@@188 $generated@@189)) (or ($generated@@39 $generated@@188 $generated@@172) (and (= $generated@@188 $generated@@172) (and (<= 0 $generated@@189) (< $generated@@189 $generated@@181))))) ($generated@@18 ($generated@@2 $generated@@14 ($generated@@17 false))))
 :pattern ( ($generated@@10 ($generated@@1 $generated@@11) $generated@@188 $generated@@189))
 :pattern ( ($generated@@0 ($generated@@1 $generated@@11) $generated@@188 $generated@@189))
)))) (and (=> (= (ControlFlow 0 5) 3) $generated@@186) (=> (= (ControlFlow 0 5) 4) $generated@@183))))))
(let (($generated@@190  (=> (and (and (and ($generated@@173 $generated@@179) ($generated@@175 $generated@@179)) (= 2 $generated)) (and (or ($generated@@0 ($generated@@1 ($generated@@1 $generated@@11)) $generated@@172 $generated@@181) ($generated@@10 ($generated@@1 ($generated@@1 $generated@@11)) $generated@@172 $generated@@181)) (= (ControlFlow 0 6) 5))) $generated@@187)))
$generated@@190))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
