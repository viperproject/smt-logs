(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 (T@T) Int)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 (Bool) T@U)
(declare-fun $generated@@11 (T@U) Bool)
(declare-fun $generated@@12 (Int) T@U)
(declare-fun $generated@@13 (T@U) Int)
(declare-fun $generated@@14 (Real) T@U)
(declare-fun $generated@@15 (T@U) Real)
(declare-fun $generated@@22 (T@U) T@U)
(declare-fun $generated@@23 () Int)
(declare-fun $generated@@24 (T@U Int) Int)
(declare-fun $generated@@25 (T@U) T@U)
(declare-fun $generated@@26 (Int) Bool)
(declare-fun $generated@@27 (Int) Int)
(declare-fun $generated@@32 (T@U) T@U)
(declare-fun $generated@@33 () T@U)
(declare-fun $generated@@34 (T@T T@U T@U) Bool)
(declare-fun $generated@@35 () T@T)
(declare-fun $generated@@36 () T@U)
(declare-fun $generated@@37 (T@U T@U) Bool)
(declare-fun $generated@@40 (T@U) Bool)
(declare-fun $generated@@41 (T@U) Int)
(declare-fun $generated@@42 (T@U) T@U)
(declare-fun $generated@@46 (T@T T@U) T@U)
(declare-fun $generated@@49 (T@U) Int)
(declare-fun $generated@@50 (T@U) Bool)
(declare-fun $generated@@51 (T@U) Bool)
(declare-fun $generated@@52 () T@U)
(declare-fun $generated@@58 (T@T T@U) T@U)
(declare-fun $generated@@59 (T@T T@U) T@U)
(declare-fun $generated@@62 (Int T@U) T@U)
(declare-fun $generated@@84 (T@U) Int)
(declare-fun $generated@@89 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@90 () T@T)
(declare-fun $generated@@91 () T@T)
(declare-fun $generated@@92 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@93 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@94 () T@T)
(declare-fun $generated@@95 (T@T T@T) T@T)
(declare-fun $generated@@96 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@97 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@98 (T@T) T@T)
(declare-fun $generated@@99 (T@T) T@T)
(declare-fun $generated@@148 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@149 (T@U) Bool)
(declare-fun $generated@@154 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@6 $generated@@7) 0) (= ($generated@@6 $generated@@8) 1)) (= ($generated@@6 $generated@@9) 2)) (forall (($generated@@16 Bool) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Int) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Real) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5)
)
(assert (= ($generated@@22 $generated) $generated@@0))
(assert  (=> (<= 0 $generated@@23) (forall (($generated@@28 T@U) ($generated@@29 Int) ) (!  (=> (or ($generated@@26 $generated@@29) (and (< 0 $generated@@23) (<= ($generated@@27 0) $generated@@29))) (and (=> (<= 2 $generated@@29) (and ($generated@@26 (- $generated@@29 2)) ($generated@@26 (- $generated@@29 1)))) (= ($generated@@24 ($generated@@25 $generated@@28) $generated@@29) (ite (< $generated@@29 2) $generated@@29 (+ ($generated@@24 $generated@@28 (- $generated@@29 2)) ($generated@@24 $generated@@28 (- $generated@@29 1)))))))
 :pattern ( ($generated@@24 ($generated@@25 $generated@@28) $generated@@29))
))))
(assert  (=> (<= 0 $generated@@23) (forall (($generated@@30 T@U) ($generated@@31 Int) ) (!  (=> (or ($generated@@26 $generated@@31) (and (< 0 $generated@@23) (<= ($generated@@27 0) $generated@@31))) (<= ($generated@@27 0) ($generated@@24 $generated@@30 $generated@@31)))
 :pattern ( ($generated@@24 $generated@@30 $generated@@31))
))))
(assert (= ($generated@@32 $generated@@33) $generated@@3))
(assert (= ($generated@@6 $generated@@35) 3))
(assert ($generated@@34 $generated@@35 $generated@@33 $generated@@36))
(assert (forall (($generated@@38 T@U) ($generated@@39 T@U) ) (! (= ($generated@@37 $generated@@38 $generated@@39) (= $generated@@38 $generated@@39))
 :pattern ( ($generated@@37 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@43 T@U) ($generated@@44 T@U) ) (!  (=> (and ($generated@@40 $generated@@43) ($generated@@40 $generated@@44)) (= ($generated@@37 $generated@@43 $generated@@44)  (and (= ($generated@@41 $generated@@43) ($generated@@41 $generated@@44)) ($generated@@37 ($generated@@42 $generated@@43) ($generated@@42 $generated@@44)))))
 :pattern ( ($generated@@37 $generated@@43 $generated@@44) ($generated@@40 $generated@@43))
 :pattern ( ($generated@@37 $generated@@43 $generated@@44) ($generated@@40 $generated@@44))
)))
(assert (forall (($generated@@45 Int) ) (! (= ($generated@@27 $generated@@45) $generated@@45)
 :pattern ( ($generated@@27 $generated@@45))
)))
(assert (forall (($generated@@47 T@U) ($generated@@48 T@T) ) (! (= ($generated@@46 $generated@@48 $generated@@47) $generated@@47)
 :pattern ( ($generated@@46 $generated@@48 $generated@@47))
)))
(assert  (=> (<= 1 $generated@@23) (forall (($generated@@53 T@U) ) (!  (=> (or ($generated@@50 ($generated@@46 $generated@@35 $generated@@53)) (and (< 1 $generated@@23) ($generated@@34 $generated@@35 $generated@@53 $generated@@36))) (and (=> (not ($generated@@11 ($generated@@46 $generated@@7 ($generated@@10 ($generated@@51 ($generated@@46 $generated@@35 $generated@@53)))))) (let (($generated@@54 ($generated@@27 ($generated@@41 ($generated@@46 $generated@@35 $generated@@53)))))
 (=> (<= 0 $generated@@54) ($generated@@26 $generated@@54)))) (= ($generated@@49 ($generated@@46 $generated@@35 $generated@@53)) (ite ($generated@@51 ($generated@@46 $generated@@35 $generated@@53)) 0 (let (($generated@@55 ($generated@@27 ($generated@@41 ($generated@@46 $generated@@35 $generated@@53)))))
(ite (< $generated@@55 0) 0 ($generated@@24 ($generated@@25 $generated@@52) $generated@@55)))))))
 :weight 3
 :pattern ( ($generated@@49 ($generated@@46 $generated@@35 $generated@@53)))
))))
(assert (forall (($generated@@56 T@U) ) (! (= ($generated@@51 $generated@@56) (= ($generated@@32 $generated@@56) $generated@@3))
 :pattern ( ($generated@@51 $generated@@56))
)))
(assert (forall (($generated@@57 T@U) ) (! (= ($generated@@40 $generated@@57) (= ($generated@@32 $generated@@57) $generated@@4))
 :pattern ( ($generated@@40 $generated@@57))
)))
(assert (forall (($generated@@60 T@U) ($generated@@61 T@T) ) (! (= ($generated@@59 $generated@@61 ($generated@@58 $generated@@61 $generated@@60)) $generated@@60)
 :pattern ( ($generated@@58 $generated@@61 $generated@@60))
)))
(assert (forall (($generated@@63 T@U) ) (!  (=> ($generated@@40 $generated@@63) (exists (($generated@@64 Int) ($generated@@65 T@U) ) (= $generated@@63 ($generated@@62 $generated@@64 $generated@@65))))
 :pattern ( ($generated@@40 $generated@@63))
)))
(assert (forall (($generated@@66 T@U) ) (!  (=> ($generated@@51 $generated@@66) (= $generated@@66 $generated@@33))
 :pattern ( ($generated@@51 $generated@@66))
)))
(assert  (=> (<= 1 $generated@@23) (forall (($generated@@67 T@U) ) (!  (=> (or ($generated@@50 $generated@@67) (and (< 1 $generated@@23) ($generated@@34 $generated@@35 $generated@@67 $generated@@36))) (and (=> (not ($generated@@51 $generated@@67)) (let (($generated@@68 ($generated@@41 $generated@@67)))
 (=> (<= 0 $generated@@68) ($generated@@26 $generated@@68)))) (= ($generated@@49 $generated@@67) (ite ($generated@@51 $generated@@67) 0 (let (($generated@@69 ($generated@@41 $generated@@67)))
(ite (< $generated@@69 0) 0 ($generated@@24 ($generated@@25 $generated@@52) $generated@@69)))))))
 :pattern ( ($generated@@49 $generated@@67))
))))
(assert  (=> (<= 1 $generated@@23) (forall (($generated@@70 T@U) ) (!  (=> (or ($generated@@50 $generated@@70) (and (< 1 $generated@@23) ($generated@@34 $generated@@35 $generated@@70 $generated@@36))) (<= ($generated@@27 0) ($generated@@49 $generated@@70)))
 :pattern ( ($generated@@49 $generated@@70))
))))
(assert (forall (($generated@@71 T@U) ) (!  (=> ($generated@@34 $generated@@35 $generated@@71 $generated@@36) (or ($generated@@51 $generated@@71) ($generated@@40 $generated@@71)))
 :pattern ( ($generated@@40 $generated@@71) ($generated@@34 $generated@@35 $generated@@71 $generated@@36))
 :pattern ( ($generated@@51 $generated@@71) ($generated@@34 $generated@@35 $generated@@71 $generated@@36))
)))
(assert  (=> (<= 0 $generated@@23) (forall (($generated@@72 T@U) ($generated@@73 Int) ) (!  (=> (or ($generated@@26 ($generated@@27 $generated@@73)) (and (< 0 $generated@@23) (<= ($generated@@27 0) ($generated@@27 $generated@@73)))) (and (=> (not ($generated@@11 ($generated@@46 $generated@@7 ($generated@@10 (< $generated@@73 2))))) (and ($generated@@26 ($generated@@27 (- $generated@@73 2))) ($generated@@26 ($generated@@27 (- $generated@@73 1))))) (= ($generated@@24 ($generated@@25 $generated@@72) ($generated@@27 $generated@@73)) (ite (< $generated@@73 2) $generated@@73 (+ ($generated@@24 ($generated@@25 $generated@@72) ($generated@@27 (- $generated@@73 2))) ($generated@@24 ($generated@@25 $generated@@72) ($generated@@27 (- $generated@@73 1))))))))
 :weight 3
 :pattern ( ($generated@@24 ($generated@@25 $generated@@72) ($generated@@27 $generated@@73)))
))))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@U) ) (!  (=> (and ($generated@@51 $generated@@74) ($generated@@51 $generated@@75)) ($generated@@37 $generated@@74 $generated@@75))
 :pattern ( ($generated@@37 $generated@@74 $generated@@75) ($generated@@51 $generated@@74))
 :pattern ( ($generated@@37 $generated@@74 $generated@@75) ($generated@@51 $generated@@75))
)))
(assert (forall (($generated@@76 Int) ($generated@@77 T@U) ) (! (= ($generated@@32 ($generated@@62 $generated@@76 $generated@@77)) $generated@@4)
 :pattern ( ($generated@@62 $generated@@76 $generated@@77))
)))
(assert (forall (($generated@@78 Int) ($generated@@79 T@U) ) (! (= ($generated@@41 ($generated@@62 $generated@@78 $generated@@79)) $generated@@78)
 :pattern ( ($generated@@62 $generated@@78 $generated@@79))
)))
(assert (forall (($generated@@80 Int) ($generated@@81 T@U) ) (! (= ($generated@@42 ($generated@@62 $generated@@80 $generated@@81)) $generated@@81)
 :pattern ( ($generated@@62 $generated@@80 $generated@@81))
)))
(assert (forall (($generated@@82 T@U) ($generated@@83 T@T) ) (! (= ($generated@@58 $generated@@83 ($generated@@59 $generated@@83 $generated@@82)) $generated@@82)
 :pattern ( ($generated@@59 $generated@@83 $generated@@82))
)))
(assert (forall (($generated@@85 Int) ($generated@@86 T@U) ) (! (< ($generated@@84 $generated@@86) ($generated@@84 ($generated@@62 $generated@@85 $generated@@86)))
 :pattern ( ($generated@@62 $generated@@85 $generated@@86))
)))
(assert (forall (($generated@@87 T@U) ($generated@@88 Int) ) (! (= ($generated@@24 ($generated@@25 $generated@@87) $generated@@88) ($generated@@24 $generated@@87 $generated@@88))
 :pattern ( ($generated@@24 ($generated@@25 $generated@@87) $generated@@88))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@100 T@T) ($generated@@101 T@T) ($generated@@102 T@T) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (! (= ($generated@@89 $generated@@100 $generated@@101 $generated@@102 ($generated@@96 $generated@@100 $generated@@101 $generated@@102 $generated@@104 $generated@@105 $generated@@106 $generated@@103) $generated@@105 $generated@@106) $generated@@103)
 :weight 0
)) (and (forall (($generated@@107 T@T) ($generated@@108 T@T) ($generated@@109 T@T) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (!  (or (= $generated@@112 $generated@@114) (= ($generated@@89 $generated@@107 $generated@@108 $generated@@109 ($generated@@96 $generated@@107 $generated@@108 $generated@@109 $generated@@111 $generated@@112 $generated@@113 $generated@@110) $generated@@114 $generated@@115) ($generated@@89 $generated@@107 $generated@@108 $generated@@109 $generated@@111 $generated@@114 $generated@@115)))
 :weight 0
)) (forall (($generated@@116 T@T) ($generated@@117 T@T) ($generated@@118 T@T) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ) (!  (or (= $generated@@122 $generated@@124) (= ($generated@@89 $generated@@116 $generated@@117 $generated@@118 ($generated@@96 $generated@@116 $generated@@117 $generated@@118 $generated@@120 $generated@@121 $generated@@122 $generated@@119) $generated@@123 $generated@@124) ($generated@@89 $generated@@116 $generated@@117 $generated@@118 $generated@@120 $generated@@123 $generated@@124)))
 :weight 0
)))) (= ($generated@@6 $generated@@90) 4)) (= ($generated@@6 $generated@@91) 5)) (forall (($generated@@125 T@T) ($generated@@126 T@T) ($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 T@U) ) (! (= ($generated@@93 $generated@@125 $generated@@126 ($generated@@97 $generated@@125 $generated@@126 $generated@@128 $generated@@129 $generated@@127) $generated@@129) $generated@@127)
 :weight 0
))) (forall (($generated@@130 T@T) ($generated@@131 T@T) ($generated@@132 T@U) ($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ) (!  (or (= $generated@@134 $generated@@135) (= ($generated@@93 $generated@@130 $generated@@131 ($generated@@97 $generated@@130 $generated@@131 $generated@@133 $generated@@134 $generated@@132) $generated@@135) ($generated@@93 $generated@@130 $generated@@131 $generated@@133 $generated@@135)))
 :weight 0
))) (= ($generated@@6 $generated@@94) 6)) (forall (($generated@@136 T@T) ($generated@@137 T@T) ) (= ($generated@@6 ($generated@@95 $generated@@136 $generated@@137)) 7))) (forall (($generated@@138 T@T) ($generated@@139 T@T) ) (! (= ($generated@@98 ($generated@@95 $generated@@138 $generated@@139)) $generated@@138)
 :pattern ( ($generated@@95 $generated@@138 $generated@@139))
))) (forall (($generated@@140 T@T) ($generated@@141 T@T) ) (! (= ($generated@@99 ($generated@@95 $generated@@140 $generated@@141)) $generated@@141)
 :pattern ( ($generated@@95 $generated@@140 $generated@@141))
))))
(assert (forall (($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 Bool) ($generated@@146 T@U) ($generated@@147 T@U) ) (! (= ($generated@@11 ($generated@@89 $generated@@90 $generated@@91 $generated@@7 ($generated@@92 $generated@@142 $generated@@143 $generated@@144 $generated@@145) $generated@@146 $generated@@147))  (=> (and (or (not (= $generated@@146 $generated@@142)) (not true)) ($generated@@11 ($generated@@58 $generated@@7 ($generated@@93 $generated@@91 $generated@@94 ($generated@@93 $generated@@90 ($generated@@95 $generated@@91 $generated@@94) $generated@@143 $generated@@146) $generated@@144)))) $generated@@145))
 :pattern ( ($generated@@89 $generated@@90 $generated@@91 $generated@@7 ($generated@@92 $generated@@142 $generated@@143 $generated@@144 $generated@@145) $generated@@146 $generated@@147))
)))
(assert (forall (($generated@@150 T@U) ($generated@@151 T@U) ) (!  (=> (and ($generated@@149 $generated@@151) (and ($generated@@40 $generated@@150) ($generated@@148 $generated@@35 $generated@@150 $generated@@36 $generated@@151))) ($generated@@148 $generated@@8 ($generated@@12 ($generated@@41 $generated@@150)) $generated $generated@@151))
 :pattern ( ($generated@@148 $generated@@8 ($generated@@12 ($generated@@41 $generated@@150)) $generated $generated@@151))
)))
(assert (forall (($generated@@152 T@U) ($generated@@153 T@U) ) (!  (=> (and ($generated@@149 $generated@@153) ($generated@@34 $generated@@35 $generated@@152 $generated@@36)) ($generated@@148 $generated@@35 $generated@@152 $generated@@36 $generated@@153))
 :pattern ( ($generated@@148 $generated@@35 $generated@@152 $generated@@36 $generated@@153))
)))
(assert (= ($generated@@22 $generated@@36) $generated@@2))
(assert (= ($generated@@154 $generated@@36) $generated@@5))
(assert (= $generated@@33 ($generated@@46 $generated@@35 $generated@@33)))
(assert (forall (($generated@@155 T@U) ($generated@@156 T@U) ) (!  (=> (and ($generated@@149 $generated@@156) (and ($generated@@40 $generated@@155) ($generated@@148 $generated@@35 $generated@@155 $generated@@36 $generated@@156))) ($generated@@148 $generated@@35 ($generated@@42 $generated@@155) $generated@@36 $generated@@156))
 :pattern ( ($generated@@148 $generated@@35 ($generated@@42 $generated@@155) $generated@@36 $generated@@156))
)))
(assert (forall (($generated@@157 Int) ($generated@@158 T@U) ) (! (= ($generated@@62 ($generated@@27 $generated@@157) ($generated@@46 $generated@@35 $generated@@158)) ($generated@@46 $generated@@35 ($generated@@62 $generated@@157 $generated@@158)))
 :pattern ( ($generated@@62 ($generated@@27 $generated@@157) ($generated@@46 $generated@@35 $generated@@158)))
)))
(assert (forall (($generated@@159 Int) ) (! (= ($generated@@59 $generated@@8 ($generated@@12 ($generated@@27 $generated@@159))) ($generated@@46 $generated@@94 ($generated@@59 $generated@@8 ($generated@@12 $generated@@159))))
 :pattern ( ($generated@@59 $generated@@8 ($generated@@12 ($generated@@27 $generated@@159))))
)))
(assert (forall (($generated@@160 T@U) ($generated@@161 T@T) ) (! (= ($generated@@59 $generated@@161 ($generated@@46 $generated@@161 $generated@@160)) ($generated@@46 $generated@@94 ($generated@@59 $generated@@161 $generated@@160)))
 :pattern ( ($generated@@59 $generated@@161 ($generated@@46 $generated@@161 $generated@@160)))
)))
(assert (forall (($generated@@162 Int) ($generated@@163 T@U) ) (! (= ($generated@@34 $generated@@35 ($generated@@62 $generated@@162 $generated@@163) $generated@@36)  (and ($generated@@34 $generated@@8 ($generated@@12 $generated@@162) $generated) ($generated@@34 $generated@@35 $generated@@163 $generated@@36)))
 :pattern ( ($generated@@34 $generated@@35 ($generated@@62 $generated@@162 $generated@@163) $generated@@36))
)))
(assert (forall (($generated@@164 T@U) ($generated@@165 T@U) ) (! ($generated@@148 $generated@@8 $generated@@165 $generated $generated@@164)
 :pattern ( ($generated@@148 $generated@@8 $generated@@165 $generated $generated@@164))
)))
(assert (forall (($generated@@166 T@U) ) (! ($generated@@34 $generated@@8 $generated@@166 $generated)
 :pattern ( ($generated@@34 $generated@@8 $generated@@166 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@167 () T@U)
(declare-fun $generated@@168 () Int)
(declare-fun $generated@@169 () T@U)
(declare-fun $generated@@170 () Int)
(declare-fun $generated@@171 () T@U)
(declare-fun $generated@@172 () T@U)
(declare-fun $generated@@173 () T@U)
(declare-fun $generated@@174 () Int)
(declare-fun $generated@@175 () T@U)
(declare-fun $generated@@176 () T@U)
(declare-fun $generated@@177 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 13) (let (($generated@@178  (=> (= (ControlFlow 0 5) (- 0 4)) (<= ($generated@@27 0) ($generated@@49 $generated@@167)))))
(let (($generated@@179  (=> (and (<= 0 $generated@@168) ($generated@@148 $generated@@8 ($generated@@12 $generated@@168) $generated $generated@@169)) (and (=> (= (ControlFlow 0 8) (- 0 9)) (<= ($generated@@27 0) $generated@@168)) (=> (and (<= ($generated@@27 0) $generated@@168) ($generated@@26 $generated@@168)) (=> (and (and (= ($generated@@49 $generated@@167) ($generated@@24 ($generated@@25 $generated@@52) $generated@@168)) ($generated@@26 $generated@@168)) (and ($generated@@34 $generated@@8 ($generated@@12 ($generated@@49 $generated@@167)) $generated) (= (ControlFlow 0 8) 5))) $generated@@178))))))
(let (($generated@@180  (=> (and (and (< $generated@@168 0) (= ($generated@@49 $generated@@167) ($generated@@27 0))) (and ($generated@@34 $generated@@8 ($generated@@12 ($generated@@49 $generated@@167)) $generated) (= (ControlFlow 0 7) 5))) $generated@@178)))
(let (($generated@@181  (=> (and (and (and (= $generated@@167 ($generated@@62 $generated@@170 $generated@@171)) ($generated@@34 $generated@@35 $generated@@171 $generated@@36)) (and (= $generated@@172 $generated@@171) ($generated@@34 $generated@@35 $generated@@172 $generated@@36))) (and (and (= $generated@@173 $generated@@172) (= $generated@@174 $generated@@170)) (and ($generated@@34 $generated@@8 ($generated@@12 $generated@@174) $generated) (= $generated@@168 $generated@@174)))) (and (=> (= (ControlFlow 0 10) 7) $generated@@180) (=> (= (ControlFlow 0 10) 8) $generated@@179)))))
(let (($generated@@182  (=> (and (and (= $generated@@167 $generated@@33) (= ($generated@@49 $generated@@167) ($generated@@27 0))) (and ($generated@@34 $generated@@8 ($generated@@12 ($generated@@49 $generated@@167)) $generated) (= (ControlFlow 0 6) 5))) $generated@@178)))
(let (($generated@@183 true))
(let (($generated@@184  (=> (or (not (= $generated@@167 $generated@@33)) (not true)) (and (=> (= (ControlFlow 0 11) 10) $generated@@181) (=> (= (ControlFlow 0 11) 3) $generated@@183)))))
(let (($generated@@185  (=> (and ($generated@@148 $generated@@35 $generated@@167 $generated@@36 $generated@@169) (= (ControlFlow 0 2) (- 0 1))) (or ($generated@@37 $generated@@167 $generated@@167) (< ($generated@@84 $generated@@167) ($generated@@84 $generated@@167))))))
(let (($generated@@186  (=> (= $generated@@175 ($generated@@92 $generated@@176 $generated@@169 $generated@@1 false)) (and (and (=> (= (ControlFlow 0 12) 2) $generated@@185) (=> (= (ControlFlow 0 12) 6) $generated@@182)) (=> (= (ControlFlow 0 12) 11) $generated@@184)))))
(let (($generated@@187  (=> (and (and (and ($generated@@149 $generated@@169) ($generated@@177 $generated@@169)) ($generated@@34 $generated@@35 $generated@@167 $generated@@36)) (and (= 1 $generated@@23) (= (ControlFlow 0 13) 12))) $generated@@186)))
$generated@@187)))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
