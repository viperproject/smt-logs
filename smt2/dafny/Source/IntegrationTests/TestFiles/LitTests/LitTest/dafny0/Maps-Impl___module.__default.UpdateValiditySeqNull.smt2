(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 (T@T) Int)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Bool) T@U)
(declare-fun $generated@@9 (T@U) Bool)
(declare-fun $generated@@10 (Int) T@U)
(declare-fun $generated@@11 (T@U) Int)
(declare-fun $generated@@12 (Real) T@U)
(declare-fun $generated@@13 (T@U) Real)
(declare-fun $generated@@20 (T@U) Int)
(declare-fun $generated@@21 () T@U)
(declare-fun $generated@@22 (T@T T@U T@U) Bool)
(declare-fun $generated@@23 () T@T)
(declare-fun $generated@@24 () T@U)
(declare-fun $generated@@25 () T@U)
(declare-fun $generated@@26 (T@U) T@U)
(declare-fun $generated@@28 (T@U Int) T@U)
(declare-fun $generated@@29 (T@U Int T@U) T@U)
(declare-fun $generated@@34 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@35 () T@U)
(declare-fun $generated@@38 (T@T T@U) T@U)
(declare-fun $generated@@39 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@40 () T@T)
(declare-fun $generated@@41 () T@T)
(declare-fun $generated@@42 (T@T T@T) T@T)
(declare-fun $generated@@43 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@44 (T@T) T@T)
(declare-fun $generated@@45 (T@T) T@T)
(declare-fun $generated@@65 (Int) Int)
(declare-fun $generated@@67 (T@T T@U) T@U)
(declare-fun $generated@@70 () T@T)
(declare-fun $generated@@71 (T@U T@U) T@U)
(declare-fun $generated@@72 (T@U) T@U)
(declare-fun $generated@@73 (T@U T@U) Bool)
(declare-fun $generated@@77 (T@T T@U) T@U)
(declare-fun $generated@@82 (T@U T@U T@U) Bool)
(declare-fun $generated@@101 (T@U) T@U)
(declare-fun $generated@@103 (T@U) T@U)
(declare-fun $generated@@107 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@108 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@109 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@144 (T@U) T@U)
(declare-fun $generated@@145 (T@U) T@U)
(declare-fun $generated@@150 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@4 $generated@@5) 0) (= ($generated@@4 $generated@@6) 1)) (= ($generated@@4 $generated@@7) 2)) (forall (($generated@@14 Bool) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Int) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Real) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3)
)
(assert (= ($generated@@20 $generated@@21) 0))
(assert (= ($generated@@4 $generated@@23) 3))
(assert (forall (($generated@@27 T@U) ) (! (= ($generated@@22 $generated@@23 $generated@@27 $generated@@24)  (or (= $generated@@27 $generated@@25) (= ($generated@@26 $generated@@27) $generated@@24)))
 :pattern ( ($generated@@22 $generated@@23 $generated@@27 $generated@@24))
)))
(assert (forall (($generated@@30 T@U) ($generated@@31 Int) ($generated@@32 T@U) ($generated@@33 Int) ) (!  (=> (and (<= 0 $generated@@33) (< $generated@@33 ($generated@@20 $generated@@30))) (and (=> (= $generated@@31 $generated@@33) (= ($generated@@28 ($generated@@29 $generated@@30 $generated@@31 $generated@@32) $generated@@33) $generated@@32)) (=> (or (not (= $generated@@31 $generated@@33)) (not true)) (= ($generated@@28 ($generated@@29 $generated@@30 $generated@@31 $generated@@32) $generated@@33) ($generated@@28 $generated@@30 $generated@@33)))))
 :pattern ( ($generated@@28 ($generated@@29 $generated@@30 $generated@@31 $generated@@32) $generated@@33))
)))
(assert (forall (($generated@@36 T@U) ($generated@@37 T@U) ) (! (= ($generated@@34 $generated@@23 $generated@@36 $generated@@35 $generated@@37) ($generated@@34 $generated@@23 $generated@@36 $generated@@24 $generated@@37))
 :pattern ( ($generated@@34 $generated@@23 $generated@@36 $generated@@35 $generated@@37))
 :pattern ( ($generated@@34 $generated@@23 $generated@@36 $generated@@24 $generated@@37))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@46 T@T) ($generated@@47 T@T) ($generated@@48 T@U) ($generated@@49 T@U) ($generated@@50 T@U) ) (! (= ($generated@@39 $generated@@46 $generated@@47 ($generated@@43 $generated@@46 $generated@@47 $generated@@49 $generated@@50 $generated@@48) $generated@@50) $generated@@48)
 :weight 0
)) (forall (($generated@@51 T@T) ($generated@@52 T@T) ($generated@@53 T@U) ($generated@@54 T@U) ($generated@@55 T@U) ($generated@@56 T@U) ) (!  (or (= $generated@@55 $generated@@56) (= ($generated@@39 $generated@@51 $generated@@52 ($generated@@43 $generated@@51 $generated@@52 $generated@@54 $generated@@55 $generated@@53) $generated@@56) ($generated@@39 $generated@@51 $generated@@52 $generated@@54 $generated@@56)))
 :weight 0
))) (= ($generated@@4 $generated@@40) 4)) (= ($generated@@4 $generated@@41) 5)) (forall (($generated@@57 T@T) ($generated@@58 T@T) ) (= ($generated@@4 ($generated@@42 $generated@@57 $generated@@58)) 6))) (forall (($generated@@59 T@T) ($generated@@60 T@T) ) (! (= ($generated@@44 ($generated@@42 $generated@@59 $generated@@60)) $generated@@59)
 :pattern ( ($generated@@42 $generated@@59 $generated@@60))
))) (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (! (= ($generated@@45 ($generated@@42 $generated@@61 $generated@@62)) $generated@@62)
 :pattern ( ($generated@@42 $generated@@61 $generated@@62))
))))
(assert (forall (($generated@@63 T@U) ($generated@@64 T@U) ) (! (= ($generated@@34 $generated@@23 $generated@@63 $generated@@24 $generated@@64)  (or (= $generated@@63 $generated@@25) ($generated@@9 ($generated@@38 $generated@@5 ($generated@@39 $generated@@40 $generated@@41 ($generated@@39 $generated@@23 ($generated@@42 $generated@@40 $generated@@41) $generated@@64 $generated@@63) $generated@@0)))))
 :pattern ( ($generated@@34 $generated@@23 $generated@@63 $generated@@24 $generated@@64))
)))
(assert (forall (($generated@@66 Int) ) (! (= ($generated@@65 $generated@@66) $generated@@66)
 :pattern ( ($generated@@65 $generated@@66))
)))
(assert (forall (($generated@@68 T@U) ($generated@@69 T@T) ) (! (= ($generated@@67 $generated@@69 $generated@@68) $generated@@68)
 :pattern ( ($generated@@67 $generated@@69 $generated@@68))
)))
(assert (= ($generated@@4 $generated@@70) 7))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@U) ) (!  (=> (and ($generated@@22 $generated@@70 $generated@@74 ($generated@@72 $generated@@76)) ($generated@@73 $generated@@75 $generated@@76)) ($generated@@22 $generated@@70 ($generated@@71 $generated@@74 $generated@@75) ($generated@@72 $generated@@76)))
 :pattern ( ($generated@@22 $generated@@70 ($generated@@71 $generated@@74 $generated@@75) ($generated@@72 $generated@@76)))
)))
(assert (forall (($generated@@78 T@U) ($generated@@79 T@T) ) (! (= ($generated@@77 $generated@@79 ($generated@@38 $generated@@79 $generated@@78)) $generated@@78)
 :pattern ( ($generated@@38 $generated@@79 $generated@@78))
)))
(assert (forall (($generated@@80 T@U) ($generated@@81 T@U) ) (! (= ($generated@@20 ($generated@@71 $generated@@80 $generated@@81)) (+ 1 ($generated@@20 $generated@@80)))
 :pattern ( ($generated@@71 $generated@@80 $generated@@81))
)))
(assert (forall (($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@T) ) (! (= ($generated@@82 ($generated@@77 $generated@@86 $generated@@83) $generated@@84 $generated@@85) ($generated@@34 $generated@@86 $generated@@83 $generated@@84 $generated@@85))
 :pattern ( ($generated@@82 ($generated@@77 $generated@@86 $generated@@83) $generated@@84 $generated@@85))
)))
(assert (forall (($generated@@87 T@U) ) (!  (=> ($generated@@73 $generated@@87 $generated@@24) (and (= ($generated@@77 $generated@@23 ($generated@@38 $generated@@23 $generated@@87)) $generated@@87) ($generated@@22 $generated@@23 ($generated@@38 $generated@@23 $generated@@87) $generated@@24)))
 :pattern ( ($generated@@73 $generated@@87 $generated@@24))
)))
(assert (forall (($generated@@88 T@U) ) (!  (=> ($generated@@73 $generated@@88 $generated@@35) (and (= ($generated@@77 $generated@@23 ($generated@@38 $generated@@23 $generated@@88)) $generated@@88) ($generated@@22 $generated@@23 ($generated@@38 $generated@@23 $generated@@88) $generated@@35)))
 :pattern ( ($generated@@73 $generated@@88 $generated@@35))
)))
(assert (forall (($generated@@89 T@U) ) (! (= ($generated@@22 $generated@@23 $generated@@89 $generated@@35)  (and ($generated@@22 $generated@@23 $generated@@89 $generated@@24) (or (not (= $generated@@89 $generated@@25)) (not true))))
 :pattern ( ($generated@@22 $generated@@23 $generated@@89 $generated@@35))
 :pattern ( ($generated@@22 $generated@@23 $generated@@89 $generated@@24))
)))
(assert (forall (($generated@@90 T@U) ($generated@@91 Int) ($generated@@92 T@U) ) (!  (and (=> (= $generated@@91 ($generated@@20 $generated@@90)) (= ($generated@@28 ($generated@@71 $generated@@90 $generated@@92) $generated@@91) $generated@@92)) (=> (or (not (= $generated@@91 ($generated@@20 $generated@@90))) (not true)) (= ($generated@@28 ($generated@@71 $generated@@90 $generated@@92) $generated@@91) ($generated@@28 $generated@@90 $generated@@91))))
 :pattern ( ($generated@@28 ($generated@@71 $generated@@90 $generated@@92) $generated@@91))
)))
(assert (forall (($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@T) ) (! (= ($generated@@73 ($generated@@77 $generated@@95 $generated@@93) $generated@@94) ($generated@@22 $generated@@95 $generated@@93 $generated@@94))
 :pattern ( ($generated@@73 ($generated@@77 $generated@@95 $generated@@93) $generated@@94))
)))
(assert (forall (($generated@@96 T@U) ) (! (<= 0 ($generated@@20 $generated@@96))
 :pattern ( ($generated@@20 $generated@@96))
)))
(assert (forall (($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ) (! (= ($generated@@34 $generated@@70 $generated@@97 ($generated@@72 $generated@@98) $generated@@99) (forall (($generated@@100 Int) ) (!  (=> (and (<= 0 $generated@@100) (< $generated@@100 ($generated@@20 $generated@@97))) ($generated@@82 ($generated@@28 $generated@@97 $generated@@100) $generated@@98 $generated@@99))
 :pattern ( ($generated@@28 $generated@@97 $generated@@100))
)))
 :pattern ( ($generated@@34 $generated@@70 $generated@@97 ($generated@@72 $generated@@98) $generated@@99))
)))
(assert (forall (($generated@@102 T@U) ) (! (= ($generated@@101 ($generated@@72 $generated@@102)) $generated@@102)
 :pattern ( ($generated@@72 $generated@@102))
)))
(assert (forall (($generated@@104 T@U) ) (! (= ($generated@@103 ($generated@@72 $generated@@104)) $generated)
 :pattern ( ($generated@@72 $generated@@104))
)))
(assert (forall (($generated@@105 T@U) ($generated@@106 T@T) ) (! (= ($generated@@38 $generated@@106 ($generated@@77 $generated@@106 $generated@@105)) $generated@@105)
 :pattern ( ($generated@@77 $generated@@106 $generated@@105))
)))
(assert  (and (forall (($generated@@110 T@T) ($generated@@111 T@T) ($generated@@112 T@T) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ) (! (= ($generated@@107 $generated@@110 $generated@@111 $generated@@112 ($generated@@109 $generated@@110 $generated@@111 $generated@@112 $generated@@114 $generated@@115 $generated@@116 $generated@@113) $generated@@115 $generated@@116) $generated@@113)
 :weight 0
)) (and (forall (($generated@@117 T@T) ($generated@@118 T@T) ($generated@@119 T@T) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ) (!  (or (= $generated@@122 $generated@@124) (= ($generated@@107 $generated@@117 $generated@@118 $generated@@119 ($generated@@109 $generated@@117 $generated@@118 $generated@@119 $generated@@121 $generated@@122 $generated@@123 $generated@@120) $generated@@124 $generated@@125) ($generated@@107 $generated@@117 $generated@@118 $generated@@119 $generated@@121 $generated@@124 $generated@@125)))
 :weight 0
)) (forall (($generated@@126 T@T) ($generated@@127 T@T) ($generated@@128 T@T) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ($generated@@134 T@U) ) (!  (or (= $generated@@132 $generated@@134) (= ($generated@@107 $generated@@126 $generated@@127 $generated@@128 ($generated@@109 $generated@@126 $generated@@127 $generated@@128 $generated@@130 $generated@@131 $generated@@132 $generated@@129) $generated@@133 $generated@@134) ($generated@@107 $generated@@126 $generated@@127 $generated@@128 $generated@@130 $generated@@133 $generated@@134)))
 :weight 0
)))))
(assert (forall (($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 Bool) ($generated@@139 T@U) ($generated@@140 T@U) ) (! (= ($generated@@9 ($generated@@107 $generated@@23 $generated@@40 $generated@@5 ($generated@@108 $generated@@135 $generated@@136 $generated@@137 $generated@@138) $generated@@139 $generated@@140))  (=> (and (or (not (= $generated@@139 $generated@@135)) (not true)) ($generated@@9 ($generated@@38 $generated@@5 ($generated@@39 $generated@@40 $generated@@41 ($generated@@39 $generated@@23 ($generated@@42 $generated@@40 $generated@@41) $generated@@136 $generated@@139) $generated@@137)))) $generated@@138))
 :pattern ( ($generated@@107 $generated@@23 $generated@@40 $generated@@5 ($generated@@108 $generated@@135 $generated@@136 $generated@@137 $generated@@138) $generated@@139 $generated@@140))
)))
(assert (forall (($generated@@141 T@U) ($generated@@142 Int) ($generated@@143 T@U) ) (!  (=> (and (<= 0 $generated@@142) (< $generated@@142 ($generated@@20 $generated@@141))) (= ($generated@@20 ($generated@@29 $generated@@141 $generated@@142 $generated@@143)) ($generated@@20 $generated@@141)))
 :pattern ( ($generated@@20 ($generated@@29 $generated@@141 $generated@@142 $generated@@143)))
)))
(assert (forall (($generated@@146 T@U) ($generated@@147 T@U) ) (!  (and (= ($generated@@144 ($generated@@71 $generated@@146 $generated@@147)) $generated@@146) (= ($generated@@145 ($generated@@71 $generated@@146 $generated@@147)) $generated@@147))
 :pattern ( ($generated@@71 $generated@@146 $generated@@147))
)))
(assert (forall (($generated@@148 T@U) ($generated@@149 T@U) ) (!  (=> ($generated@@73 $generated@@148 ($generated@@72 $generated@@149)) (and (= ($generated@@77 $generated@@70 ($generated@@38 $generated@@70 $generated@@148)) $generated@@148) ($generated@@22 $generated@@70 ($generated@@38 $generated@@70 $generated@@148) ($generated@@72 $generated@@149))))
 :pattern ( ($generated@@73 $generated@@148 ($generated@@72 $generated@@149)))
)))
(assert (= ($generated@@103 $generated@@24) $generated@@1))
(assert (= ($generated@@150 $generated@@24) $generated@@3))
(assert (= ($generated@@103 $generated@@35) $generated@@2))
(assert (= ($generated@@150 $generated@@35) $generated@@3))
(assert (forall (($generated@@151 Int) ) (! (= ($generated@@77 $generated@@6 ($generated@@10 ($generated@@65 $generated@@151))) ($generated@@67 $generated@@41 ($generated@@77 $generated@@6 ($generated@@10 $generated@@151))))
 :pattern ( ($generated@@77 $generated@@6 ($generated@@10 ($generated@@65 $generated@@151))))
)))
(assert (forall (($generated@@152 T@U) ($generated@@153 T@T) ) (! (= ($generated@@77 $generated@@153 ($generated@@67 $generated@@153 $generated@@152)) ($generated@@67 $generated@@41 ($generated@@77 $generated@@153 $generated@@152)))
 :pattern ( ($generated@@77 $generated@@153 ($generated@@67 $generated@@153 $generated@@152)))
)))
(assert (forall (($generated@@154 T@U) ) (!  (=> (= ($generated@@20 $generated@@154) 0) (= $generated@@154 $generated@@21))
 :pattern ( ($generated@@20 $generated@@154))
)))
(assert (forall (($generated@@155 T@U) ($generated@@156 T@U) ) (! (= ($generated@@22 $generated@@70 $generated@@155 ($generated@@72 $generated@@156)) (forall (($generated@@157 Int) ) (!  (=> (and (<= 0 $generated@@157) (< $generated@@157 ($generated@@20 $generated@@155))) ($generated@@73 ($generated@@28 $generated@@155 $generated@@157) $generated@@156))
 :pattern ( ($generated@@28 $generated@@155 $generated@@157))
)))
 :pattern ( ($generated@@22 $generated@@70 $generated@@155 ($generated@@72 $generated@@156)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@158 () T@U)
(declare-fun $generated@@159 () T@U)
(declare-fun $generated@@160 () T@U)
(declare-fun $generated@@161 () T@U)
(declare-fun $generated@@162 () T@U)
(declare-fun $generated@@163 (T@U) Bool)
(declare-fun $generated@@164 (T@U) Bool)
(declare-fun $generated@@165 () T@U)
(declare-fun $generated@@166 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 7) (let (($generated@@167  (and (=> (= (ControlFlow 0 4) (- 0 5)) (and (<= 0 ($generated@@65 1)) (< ($generated@@65 1) ($generated@@20 $generated@@158)))) (=> (and (<= 0 ($generated@@65 1)) (< ($generated@@65 1) ($generated@@20 $generated@@158))) (=> (= (ControlFlow 0 4) (- 0 3)) ($generated@@22 $generated@@23 $generated@@159 $generated@@35))))))
(let (($generated@@168  (=> (= (ControlFlow 0 2) (- 0 1)) (and (<= 0 ($generated@@65 10)) (< ($generated@@65 10) ($generated@@20 $generated@@158))))))
(let (($generated@@169  (=> (and (= $generated@@160 ($generated@@108 $generated@@25 $generated@@161 $generated@@0 false)) (= $generated@@158 ($generated@@71 ($generated@@71 ($generated@@71 ($generated@@71 ($generated@@71 $generated@@21 ($generated@@77 $generated@@23 $generated@@162)) ($generated@@77 $generated@@23 $generated@@162)) ($generated@@77 $generated@@23 $generated@@162)) ($generated@@77 $generated@@23 $generated@@162)) ($generated@@77 $generated@@23 $generated@@162)))) (and (=> (= (ControlFlow 0 6) 2) $generated@@168) (=> (= (ControlFlow 0 6) 4) $generated@@167)))))
(let (($generated@@170  (=> (and ($generated@@163 $generated@@161) ($generated@@164 $generated@@161)) (=> (and (and ($generated@@22 $generated@@23 $generated@@159 $generated@@24) ($generated@@34 $generated@@23 $generated@@159 $generated@@24 $generated@@161)) (and ($generated@@22 $generated@@23 $generated@@162 $generated@@35) ($generated@@34 $generated@@23 $generated@@162 $generated@@35 $generated@@161))) (=> (and (and (and ($generated@@22 $generated@@70 $generated@@165 ($generated@@72 $generated@@35)) ($generated@@34 $generated@@70 $generated@@165 ($generated@@72 $generated@@35) $generated@@161)) true) (and (= 1 $generated@@166) (= (ControlFlow 0 7) 6))) $generated@@169)))))
$generated@@170)))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 4) (- 3))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
