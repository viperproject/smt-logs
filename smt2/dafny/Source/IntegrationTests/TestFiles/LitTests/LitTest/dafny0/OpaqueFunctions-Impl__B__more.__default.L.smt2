(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 (T@U) Int)
(declare-fun $generated@@22 (T@U) T@U)
(declare-fun $generated@@23 (T@U) T@U)
(declare-fun $generated@@24 (T@U) T@U)
(declare-fun $generated@@25 () T@U)
(declare-fun $generated@@26 () T@U)
(declare-fun $generated@@27 (T@T T@U T@U) Bool)
(declare-fun $generated@@28 () T@T)
(declare-fun $generated@@29 () T@U)
(declare-fun $generated@@30 (T@U) T@U)
(declare-fun $generated@@32 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@35 () T@U)
(declare-fun $generated@@36 (T@U T@U) T@U)
(declare-fun $generated@@37 () T@U)
(declare-fun $generated@@38 (T@U) Bool)
(declare-fun $generated@@39 (T@T T@U) T@U)
(declare-fun $generated@@40 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@41 () T@T)
(declare-fun $generated@@42 () T@T)
(declare-fun $generated@@43 (T@T T@T) T@T)
(declare-fun $generated@@44 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@45 (T@T) T@T)
(declare-fun $generated@@46 (T@T) T@T)
(declare-fun $generated@@66 (T@T T@U) T@U)
(declare-fun $generated@@69 (T@U) Bool)
(declare-fun $generated@@72 (T@U T@U T@U) Bool)
(declare-fun $generated@@77 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@78 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@79 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@112 (T@U) T@U)
(declare-fun $generated@@119 (T@U T@U) Int)
(declare-fun $generated@@120 (T@U T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert (= ($generated@@21 $generated@@1) 0))
(assert (= ($generated@@22 $generated) $generated@@0))
(assert (= ($generated@@23 $generated@@1) $generated@@2))
(assert (= ($generated@@24 $generated@@25) $generated@@3))
(assert (= ($generated@@24 $generated@@26) $generated@@3))
(assert (= ($generated@@5 $generated@@28) 3))
(assert (forall (($generated@@31 T@U) ) (! (= ($generated@@27 $generated@@28 $generated@@31 $generated@@26)  (or (= $generated@@31 $generated@@29) (= ($generated@@30 $generated@@31) $generated@@26)))
 :pattern ( ($generated@@27 $generated@@28 $generated@@31 $generated@@26))
)))
(assert (forall (($generated@@33 T@U) ($generated@@34 T@U) ) (! (= ($generated@@32 $generated@@28 $generated@@33 $generated@@25 $generated@@34) ($generated@@32 $generated@@28 $generated@@33 $generated@@26 $generated@@34))
 :pattern ( ($generated@@32 $generated@@28 $generated@@33 $generated@@25 $generated@@34))
 :pattern ( ($generated@@32 $generated@@28 $generated@@33 $generated@@26 $generated@@34))
)))
(assert (= ($generated@@21 $generated@@35) 0))
(assert (= ($generated@@36 $generated@@37 $generated@@4) $generated@@35))
(assert  (not ($generated@@38 $generated@@35)))
(assert  (and (and (and (and (and (and (forall (($generated@@47 T@T) ($generated@@48 T@T) ($generated@@49 T@U) ($generated@@50 T@U) ($generated@@51 T@U) ) (! (= ($generated@@40 $generated@@47 $generated@@48 ($generated@@44 $generated@@47 $generated@@48 $generated@@50 $generated@@51 $generated@@49) $generated@@51) $generated@@49)
 :weight 0
)) (forall (($generated@@52 T@T) ($generated@@53 T@T) ($generated@@54 T@U) ($generated@@55 T@U) ($generated@@56 T@U) ($generated@@57 T@U) ) (!  (or (= $generated@@56 $generated@@57) (= ($generated@@40 $generated@@52 $generated@@53 ($generated@@44 $generated@@52 $generated@@53 $generated@@55 $generated@@56 $generated@@54) $generated@@57) ($generated@@40 $generated@@52 $generated@@53 $generated@@55 $generated@@57)))
 :weight 0
))) (= ($generated@@5 $generated@@41) 4)) (= ($generated@@5 $generated@@42) 5)) (forall (($generated@@58 T@T) ($generated@@59 T@T) ) (= ($generated@@5 ($generated@@43 $generated@@58 $generated@@59)) 6))) (forall (($generated@@60 T@T) ($generated@@61 T@T) ) (! (= ($generated@@45 ($generated@@43 $generated@@60 $generated@@61)) $generated@@60)
 :pattern ( ($generated@@43 $generated@@60 $generated@@61))
))) (forall (($generated@@62 T@T) ($generated@@63 T@T) ) (! (= ($generated@@46 ($generated@@43 $generated@@62 $generated@@63)) $generated@@63)
 :pattern ( ($generated@@43 $generated@@62 $generated@@63))
))))
(assert (forall (($generated@@64 T@U) ($generated@@65 T@U) ) (! (= ($generated@@32 $generated@@28 $generated@@64 $generated@@26 $generated@@65)  (or (= $generated@@64 $generated@@29) ($generated@@10 ($generated@@39 $generated@@6 ($generated@@40 $generated@@41 $generated@@42 ($generated@@40 $generated@@28 ($generated@@43 $generated@@41 $generated@@42) $generated@@65 $generated@@64) $generated@@1)))))
 :pattern ( ($generated@@32 $generated@@28 $generated@@64 $generated@@26 $generated@@65))
)))
(assert (forall (($generated@@67 T@U) ($generated@@68 T@T) ) (! (= ($generated@@66 $generated@@68 ($generated@@39 $generated@@68 $generated@@67)) $generated@@67)
 :pattern ( ($generated@@39 $generated@@68 $generated@@67))
)))
(assert ($generated@@38 $generated@@1))
(assert (forall (($generated@@70 T@U) ($generated@@71 T@U) ) (!  (=> (and (and ($generated@@69 $generated@@70) (and (or (not (= $generated@@71 $generated@@29)) (not true)) (= ($generated@@30 $generated@@71) $generated@@26))) ($generated@@10 ($generated@@39 $generated@@6 ($generated@@40 $generated@@41 $generated@@42 ($generated@@40 $generated@@28 ($generated@@43 $generated@@41 $generated@@42) $generated@@70 $generated@@71) $generated@@1)))) ($generated@@32 $generated@@7 ($generated@@39 $generated@@7 ($generated@@40 $generated@@41 $generated@@42 ($generated@@40 $generated@@28 ($generated@@43 $generated@@41 $generated@@42) $generated@@70 $generated@@71) $generated@@35)) $generated $generated@@70))
 :pattern ( ($generated@@39 $generated@@7 ($generated@@40 $generated@@41 $generated@@42 ($generated@@40 $generated@@28 ($generated@@43 $generated@@41 $generated@@42) $generated@@70 $generated@@71) $generated@@35)))
)))
(assert (forall (($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@T) ) (! (= ($generated@@72 ($generated@@66 $generated@@76 $generated@@73) $generated@@74 $generated@@75) ($generated@@32 $generated@@76 $generated@@73 $generated@@74 $generated@@75))
 :pattern ( ($generated@@72 ($generated@@66 $generated@@76 $generated@@73) $generated@@74 $generated@@75))
)))
(assert  (and (forall (($generated@@80 T@T) ($generated@@81 T@T) ($generated@@82 T@T) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (! (= ($generated@@77 $generated@@80 $generated@@81 $generated@@82 ($generated@@79 $generated@@80 $generated@@81 $generated@@82 $generated@@84 $generated@@85 $generated@@86 $generated@@83) $generated@@85 $generated@@86) $generated@@83)
 :weight 0
)) (and (forall (($generated@@87 T@T) ($generated@@88 T@T) ($generated@@89 T@T) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ) (!  (or (= $generated@@92 $generated@@94) (= ($generated@@77 $generated@@87 $generated@@88 $generated@@89 ($generated@@79 $generated@@87 $generated@@88 $generated@@89 $generated@@91 $generated@@92 $generated@@93 $generated@@90) $generated@@94 $generated@@95) ($generated@@77 $generated@@87 $generated@@88 $generated@@89 $generated@@91 $generated@@94 $generated@@95)))
 :weight 0
)) (forall (($generated@@96 T@T) ($generated@@97 T@T) ($generated@@98 T@T) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ) (!  (or (= $generated@@102 $generated@@104) (= ($generated@@77 $generated@@96 $generated@@97 $generated@@98 ($generated@@79 $generated@@96 $generated@@97 $generated@@98 $generated@@100 $generated@@101 $generated@@102 $generated@@99) $generated@@103 $generated@@104) ($generated@@77 $generated@@96 $generated@@97 $generated@@98 $generated@@100 $generated@@103 $generated@@104)))
 :weight 0
)))))
(assert (forall (($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ) (! (= ($generated@@10 ($generated@@77 $generated@@28 $generated@@41 $generated@@6 ($generated@@78 $generated@@105 $generated@@106 $generated@@107 $generated@@108) $generated@@109 $generated@@110))  (=> (and (or (not (= $generated@@109 $generated@@105)) (not true)) ($generated@@10 ($generated@@39 $generated@@6 ($generated@@40 $generated@@41 $generated@@42 ($generated@@40 $generated@@28 ($generated@@43 $generated@@41 $generated@@42) $generated@@106 $generated@@109) $generated@@107)))) (= $generated@@109 $generated@@108)))
 :pattern ( ($generated@@77 $generated@@28 $generated@@41 $generated@@6 ($generated@@78 $generated@@105 $generated@@106 $generated@@107 $generated@@108) $generated@@109 $generated@@110))
)))
(assert (forall (($generated@@111 T@U) ) (! (= ($generated@@27 $generated@@28 $generated@@111 $generated@@25)  (and ($generated@@27 $generated@@28 $generated@@111 $generated@@26) (or (not (= $generated@@111 $generated@@29)) (not true))))
 :pattern ( ($generated@@27 $generated@@28 $generated@@111 $generated@@25))
 :pattern ( ($generated@@27 $generated@@28 $generated@@111 $generated@@26))
)))
(assert (forall (($generated@@113 T@U) ($generated@@114 T@U) ) (!  (and (= ($generated@@112 ($generated@@36 $generated@@113 $generated@@114)) $generated@@113) (= ($generated@@23 ($generated@@36 $generated@@113 $generated@@114)) $generated@@114))
 :pattern ( ($generated@@36 $generated@@113 $generated@@114))
)))
(assert (forall (($generated@@115 T@U) ($generated@@116 T@T) ) (! (= ($generated@@39 $generated@@116 ($generated@@66 $generated@@116 $generated@@115)) $generated@@115)
 :pattern ( ($generated@@66 $generated@@116 $generated@@115))
)))
(assert (forall (($generated@@117 T@U) ($generated@@118 T@U) ) (!  (=> (and ($generated@@69 $generated@@117) (and (or (not (= $generated@@118 $generated@@29)) (not true)) (= ($generated@@30 $generated@@118) $generated@@26))) ($generated@@27 $generated@@7 ($generated@@39 $generated@@7 ($generated@@40 $generated@@41 $generated@@42 ($generated@@40 $generated@@28 ($generated@@43 $generated@@41 $generated@@42) $generated@@117 $generated@@118) $generated@@35)) $generated))
 :pattern ( ($generated@@39 $generated@@7 ($generated@@40 $generated@@41 $generated@@42 ($generated@@40 $generated@@28 ($generated@@43 $generated@@41 $generated@@42) $generated@@117 $generated@@118) $generated@@35)))
)))
(assert (forall (($generated@@121 T@U) ($generated@@122 T@U) ) (!  (=> (or ($generated@@120 $generated@@121 $generated@@122) (and ($generated@@69 $generated@@121) (and (or (not (= $generated@@122 $generated@@29)) (not true)) (and ($generated@@27 $generated@@28 $generated@@122 $generated@@25) ($generated@@32 $generated@@28 $generated@@122 $generated@@25 $generated@@121))))) (= ($generated@@119 $generated@@121 $generated@@122) ($generated@@12 ($generated@@39 $generated@@7 ($generated@@40 $generated@@41 $generated@@42 ($generated@@40 $generated@@28 ($generated@@43 $generated@@41 $generated@@42) $generated@@121 $generated@@122) $generated@@35)))))
 :pattern ( ($generated@@119 $generated@@121 $generated@@122) ($generated@@69 $generated@@121))
)))
(assert (forall (($generated@@123 T@U) ($generated@@124 T@U) ) (! ($generated@@32 $generated@@7 $generated@@124 $generated $generated@@123)
 :pattern ( ($generated@@32 $generated@@7 $generated@@124 $generated $generated@@123))
)))
(assert (forall (($generated@@125 T@U) ) (! ($generated@@27 $generated@@7 $generated@@125 $generated)
 :pattern ( ($generated@@27 $generated@@7 $generated@@125 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@126 () T@U)
(declare-fun $generated@@127 () T@U)
(declare-fun $generated@@128 () T@U)
(declare-fun $generated@@129 (T@U) Bool)
(declare-fun $generated@@130 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 5) (let (($generated@@131  (=> (= $generated@@126 ($generated@@78 $generated@@29 $generated@@127 $generated@@1 $generated@@128)) (and (=> (= (ControlFlow 0 2) (- 0 4)) (or (not (= $generated@@128 $generated@@29)) (not true))) (=> (and ($generated@@72 ($generated@@66 $generated@@28 $generated@@128) $generated@@26 $generated@@127) ($generated@@120 $generated@@127 $generated@@128)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (or (not (= $generated@@128 $generated@@29)) (not true))) (=> (and ($generated@@120 $generated@@127 $generated@@128) (= (ControlFlow 0 2) (- 0 1))) (= ($generated@@119 $generated@@127 $generated@@128) ($generated@@12 ($generated@@39 $generated@@7 ($generated@@40 $generated@@41 $generated@@42 ($generated@@40 $generated@@28 ($generated@@43 $generated@@41 $generated@@42) $generated@@127 $generated@@128) $generated@@35)))))))))))
(let (($generated@@132  (=> (and ($generated@@69 $generated@@127) ($generated@@129 $generated@@127)) (=> (and (and ($generated@@27 $generated@@28 $generated@@128 $generated@@25) ($generated@@32 $generated@@28 $generated@@128 $generated@@25 $generated@@127)) (and (= 0 $generated@@130) (= (ControlFlow 0 5) 2))) $generated@@131))))
$generated@@132)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
