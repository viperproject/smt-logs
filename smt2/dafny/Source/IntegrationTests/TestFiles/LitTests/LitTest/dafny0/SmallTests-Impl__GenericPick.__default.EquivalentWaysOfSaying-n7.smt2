(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 (Bool) T@U)
(declare-fun $generated@@6 (T@U) Bool)
(declare-fun $generated@@7 (Int) T@U)
(declare-fun $generated@@8 (T@U) Int)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@17 (T@U T@U) Bool)
(declare-fun $generated@@18 () T@U)
(declare-fun $generated@@20 (T@U) Int)
(declare-fun $generated@@21 (Int) Int)
(declare-fun $generated@@23 (T@T T@U) T@U)
(declare-fun $generated@@26 (T@U T@U) Bool)
(declare-fun $generated@@27 (T@U Int) T@U)
(declare-fun $generated@@31 (T@T T@U) T@U)
(declare-fun $generated@@32 (T@T T@U) T@U)
(declare-fun $generated@@35 (T@U T@U T@U) Bool)
(declare-fun $generated@@36 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@46 (T@U T@U) Bool)
(declare-fun $generated@@47 (T@T T@U T@U) Bool)
(declare-fun $generated@@52 () T@T)
(declare-fun $generated@@53 (T@U) T@U)
(declare-fun $generated@@58 (T@U) T@U)
(declare-fun $generated@@60 (T@U) T@U)
(declare-fun $generated@@64 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@65 () T@T)
(declare-fun $generated@@66 () T@T)
(declare-fun $generated@@67 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@68 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@69 () T@T)
(declare-fun $generated@@70 (T@T T@T) T@T)
(declare-fun $generated@@71 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@72 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@73 (T@T) T@T)
(declare-fun $generated@@74 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (forall (($generated@@11 Bool) ) (! (= ($generated@@6 ($generated@@5 $generated@@11)) $generated@@11)
 :pattern ( ($generated@@5 $generated@@11))
))) (forall (($generated@@12 T@U) ) (! (= ($generated@@5 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 Int) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))))
(assert (distinct $generated $generated@@0)
)
(assert (forall (($generated@@19 T@U) ) (!  (not ($generated@@17 $generated@@18 $generated@@19))
 :pattern ( ($generated@@17 $generated@@18 $generated@@19))
)))
(assert (= ($generated@@20 $generated@@18) 0))
(assert (forall (($generated@@22 Int) ) (! (= ($generated@@21 $generated@@22) $generated@@22)
 :pattern ( ($generated@@21 $generated@@22))
)))
(assert (forall (($generated@@24 T@U) ($generated@@25 T@T) ) (! (= ($generated@@23 $generated@@25 $generated@@24) $generated@@24)
 :pattern ( ($generated@@23 $generated@@25 $generated@@24))
)))
(assert (forall (($generated@@28 T@U) ($generated@@29 T@U) ) (! (= ($generated@@26 $generated@@28 $generated@@29)  (and (= ($generated@@20 $generated@@28) ($generated@@20 $generated@@29)) (forall (($generated@@30 Int) ) (!  (=> (and (<= 0 $generated@@30) (< $generated@@30 ($generated@@20 $generated@@28))) (= ($generated@@27 $generated@@28 $generated@@30) ($generated@@27 $generated@@29 $generated@@30)))
 :pattern ( ($generated@@27 $generated@@28 $generated@@30))
 :pattern ( ($generated@@27 $generated@@29 $generated@@30))
))))
 :pattern ( ($generated@@26 $generated@@28 $generated@@29))
)))
(assert (forall (($generated@@33 T@U) ($generated@@34 T@T) ) (! (= ($generated@@32 $generated@@34 ($generated@@31 $generated@@34 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@31 $generated@@34 $generated@@33))
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ($generated@@40 T@T) ) (! (= ($generated@@35 ($generated@@32 $generated@@40 $generated@@37) $generated@@38 $generated@@39) ($generated@@36 $generated@@40 $generated@@37 $generated@@38 $generated@@39))
 :pattern ( ($generated@@35 ($generated@@32 $generated@@40 $generated@@37) $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (= ($generated@@17 $generated@@41 $generated@@42) (exists (($generated@@43 Int) ) (!  (and (and (<= 0 $generated@@43) (< $generated@@43 ($generated@@20 $generated@@41))) (= ($generated@@27 $generated@@41 $generated@@43) $generated@@42))
 :pattern ( ($generated@@27 $generated@@41 $generated@@43))
)))
 :pattern ( ($generated@@17 $generated@@41 $generated@@42))
)))
(assert (forall (($generated@@44 T@U) ($generated@@45 T@U) ) (!  (=> ($generated@@26 $generated@@44 $generated@@45) (= $generated@@44 $generated@@45))
 :pattern ( ($generated@@26 $generated@@44 $generated@@45))
)))
(assert (forall (($generated@@48 T@U) ($generated@@49 T@U) ($generated@@50 T@T) ) (! (= ($generated@@46 ($generated@@32 $generated@@50 $generated@@48) $generated@@49) ($generated@@47 $generated@@50 $generated@@48 $generated@@49))
 :pattern ( ($generated@@46 ($generated@@32 $generated@@50 $generated@@48) $generated@@49))
)))
(assert (forall (($generated@@51 T@U) ) (! (<= 0 ($generated@@20 $generated@@51))
 :pattern ( ($generated@@20 $generated@@51))
)))
(assert (= ($generated@@1 $generated@@52) 3))
(assert (forall (($generated@@54 T@U) ($generated@@55 T@U) ($generated@@56 T@U) ) (! (= ($generated@@36 $generated@@52 $generated@@54 ($generated@@53 $generated@@55) $generated@@56) (forall (($generated@@57 Int) ) (!  (=> (and (<= 0 $generated@@57) (< $generated@@57 ($generated@@20 $generated@@54))) ($generated@@35 ($generated@@27 $generated@@54 $generated@@57) $generated@@55 $generated@@56))
 :pattern ( ($generated@@27 $generated@@54 $generated@@57))
)))
 :pattern ( ($generated@@36 $generated@@52 $generated@@54 ($generated@@53 $generated@@55) $generated@@56))
)))
(assert (forall (($generated@@59 T@U) ) (! (= ($generated@@58 ($generated@@53 $generated@@59)) $generated@@59)
 :pattern ( ($generated@@53 $generated@@59))
)))
(assert (forall (($generated@@61 T@U) ) (! (= ($generated@@60 ($generated@@53 $generated@@61)) $generated)
 :pattern ( ($generated@@53 $generated@@61))
)))
(assert (forall (($generated@@62 T@U) ($generated@@63 T@T) ) (! (= ($generated@@31 $generated@@63 ($generated@@32 $generated@@63 $generated@@62)) $generated@@62)
 :pattern ( ($generated@@32 $generated@@63 $generated@@62))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@75 T@T) ($generated@@76 T@T) ($generated@@77 T@T) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ) (! (= ($generated@@64 $generated@@75 $generated@@76 $generated@@77 ($generated@@71 $generated@@75 $generated@@76 $generated@@77 $generated@@79 $generated@@80 $generated@@81 $generated@@78) $generated@@80 $generated@@81) $generated@@78)
 :weight 0
)) (and (forall (($generated@@82 T@T) ($generated@@83 T@T) ($generated@@84 T@T) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ) (!  (or (= $generated@@87 $generated@@89) (= ($generated@@64 $generated@@82 $generated@@83 $generated@@84 ($generated@@71 $generated@@82 $generated@@83 $generated@@84 $generated@@86 $generated@@87 $generated@@88 $generated@@85) $generated@@89 $generated@@90) ($generated@@64 $generated@@82 $generated@@83 $generated@@84 $generated@@86 $generated@@89 $generated@@90)))
 :weight 0
)) (forall (($generated@@91 T@T) ($generated@@92 T@T) ($generated@@93 T@T) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ) (!  (or (= $generated@@97 $generated@@99) (= ($generated@@64 $generated@@91 $generated@@92 $generated@@93 ($generated@@71 $generated@@91 $generated@@92 $generated@@93 $generated@@95 $generated@@96 $generated@@97 $generated@@94) $generated@@98 $generated@@99) ($generated@@64 $generated@@91 $generated@@92 $generated@@93 $generated@@95 $generated@@98 $generated@@99)))
 :weight 0
)))) (= ($generated@@1 $generated@@65) 4)) (= ($generated@@1 $generated@@66) 5)) (forall (($generated@@100 T@T) ($generated@@101 T@T) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ) (! (= ($generated@@68 $generated@@100 $generated@@101 ($generated@@72 $generated@@100 $generated@@101 $generated@@103 $generated@@104 $generated@@102) $generated@@104) $generated@@102)
 :weight 0
))) (forall (($generated@@105 T@T) ($generated@@106 T@T) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ) (!  (or (= $generated@@109 $generated@@110) (= ($generated@@68 $generated@@105 $generated@@106 ($generated@@72 $generated@@105 $generated@@106 $generated@@108 $generated@@109 $generated@@107) $generated@@110) ($generated@@68 $generated@@105 $generated@@106 $generated@@108 $generated@@110)))
 :weight 0
))) (= ($generated@@1 $generated@@69) 6)) (forall (($generated@@111 T@T) ($generated@@112 T@T) ) (= ($generated@@1 ($generated@@70 $generated@@111 $generated@@112)) 7))) (forall (($generated@@113 T@T) ($generated@@114 T@T) ) (! (= ($generated@@73 ($generated@@70 $generated@@113 $generated@@114)) $generated@@113)
 :pattern ( ($generated@@70 $generated@@113 $generated@@114))
))) (forall (($generated@@115 T@T) ($generated@@116 T@T) ) (! (= ($generated@@74 ($generated@@70 $generated@@115 $generated@@116)) $generated@@116)
 :pattern ( ($generated@@70 $generated@@115 $generated@@116))
))))
(assert (forall (($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 Bool) ($generated@@121 T@U) ($generated@@122 T@U) ) (! (= ($generated@@6 ($generated@@64 $generated@@65 $generated@@66 $generated@@2 ($generated@@67 $generated@@117 $generated@@118 $generated@@119 $generated@@120) $generated@@121 $generated@@122))  (=> (and (or (not (= $generated@@121 $generated@@117)) (not true)) ($generated@@6 ($generated@@31 $generated@@2 ($generated@@68 $generated@@66 $generated@@69 ($generated@@68 $generated@@65 ($generated@@70 $generated@@66 $generated@@69) $generated@@118 $generated@@121) $generated@@119)))) $generated@@120))
 :pattern ( ($generated@@64 $generated@@65 $generated@@66 $generated@@2 ($generated@@67 $generated@@117 $generated@@118 $generated@@119 $generated@@120) $generated@@121 $generated@@122))
)))
(assert (forall (($generated@@123 T@U) ($generated@@124 T@U) ) (!  (=> ($generated@@46 $generated@@123 ($generated@@53 $generated@@124)) (and (= ($generated@@32 $generated@@52 ($generated@@31 $generated@@52 $generated@@123)) $generated@@123) ($generated@@47 $generated@@52 ($generated@@31 $generated@@52 $generated@@123) ($generated@@53 $generated@@124))))
 :pattern ( ($generated@@46 $generated@@123 ($generated@@53 $generated@@124)))
)))
(assert (forall (($generated@@125 Int) ) (! (= ($generated@@32 $generated@@3 ($generated@@7 ($generated@@21 $generated@@125))) ($generated@@23 $generated@@69 ($generated@@32 $generated@@3 ($generated@@7 $generated@@125))))
 :pattern ( ($generated@@32 $generated@@3 ($generated@@7 ($generated@@21 $generated@@125))))
)))
(assert (forall (($generated@@126 T@U) ($generated@@127 T@T) ) (! (= ($generated@@32 $generated@@127 ($generated@@23 $generated@@127 $generated@@126)) ($generated@@23 $generated@@69 ($generated@@32 $generated@@127 $generated@@126)))
 :pattern ( ($generated@@32 $generated@@127 ($generated@@23 $generated@@127 $generated@@126)))
)))
(assert (forall (($generated@@128 T@U) ) (!  (=> (= ($generated@@20 $generated@@128) 0) (= $generated@@128 $generated@@18))
 :pattern ( ($generated@@20 $generated@@128))
)))
(assert (forall (($generated@@129 T@U) ($generated@@130 T@U) ) (! (= ($generated@@47 $generated@@52 $generated@@129 ($generated@@53 $generated@@130)) (forall (($generated@@131 Int) ) (!  (=> (and (<= 0 $generated@@131) (< $generated@@131 ($generated@@20 $generated@@129))) ($generated@@46 ($generated@@27 $generated@@129 $generated@@131) $generated@@130))
 :pattern ( ($generated@@27 $generated@@129 $generated@@131))
)))
 :pattern ( ($generated@@47 $generated@@52 $generated@@129 ($generated@@53 $generated@@130)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@132 () T@U)
(declare-fun $generated@@133 () T@U)
(declare-fun $generated@@134 () T@U)
(declare-fun $generated@@135 () T@U)
(declare-fun $generated@@136 () T@U)
(declare-fun $generated@@137 (T@U) Bool)
(declare-fun $generated@@138 (T@U) Bool)
(declare-fun $generated@@139 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 5) (let (($generated@@140  (=> (= $generated@@132 ($generated@@67 $generated@@133 $generated@@134 $generated@@0 false)) (and (=> (= (ControlFlow 0 2) (- 0 4)) (and (<= 0 ($generated@@21 0)) (< ($generated@@21 0) ($generated@@20 $generated@@135)))) (and (=> (= (ControlFlow 0 2) (- 0 3)) ($generated@@17 $generated@@135 ($generated@@27 $generated@@135 ($generated@@21 0)))) (=> ($generated@@17 $generated@@135 ($generated@@27 $generated@@135 ($generated@@21 0))) (=> (= (ControlFlow 0 2) (- 0 1)) (exists (($generated@@141 T@U) ) (!  (and ($generated@@46 $generated@@141 $generated@@136) ($generated@@17 $generated@@135 $generated@@141))
 :pattern ( ($generated@@17 $generated@@135 $generated@@141))
)))))))))
(let (($generated@@142  (=> (and ($generated@@137 $generated@@134) ($generated@@138 $generated@@134)) (=> (and (and (and ($generated@@47 $generated@@52 $generated@@135 ($generated@@53 $generated@@136)) ($generated@@36 $generated@@52 $generated@@135 ($generated@@53 $generated@@136) $generated@@134)) (= 0 $generated@@139)) (and (or (or (not ($generated@@26 $generated@@135 $generated@@18)) (or (not (= ($generated@@20 $generated@@135) 0)) (not true))) (exists (($generated@@143 Int) )  (and (<= ($generated@@21 0) $generated@@143) (< $generated@@143 ($generated@@20 $generated@@135))))) (= (ControlFlow 0 5) 2))) $generated@@140))))
$generated@@142)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
