(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 (T@U) T@U)
(declare-fun $generated@@20 (T@U) Int)
(declare-fun $generated@@21 () T@U)
(declare-fun $generated@@22 (T@T T@U) T@U)
(declare-fun $generated@@25 (T@T T@U) T@U)
(declare-fun $generated@@26 (T@T T@U) T@U)
(declare-fun $generated@@29 (T@U T@U T@U) Bool)
(declare-fun $generated@@30 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@35 (T@U T@U) Bool)
(declare-fun $generated@@36 (T@T T@U T@U) Bool)
(declare-fun $generated@@42 () T@T)
(declare-fun $generated@@43 (T@U) T@U)
(declare-fun $generated@@44 (T@U Int) T@U)
(declare-fun $generated@@49 (T@U) T@U)
(declare-fun $generated@@54 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@55 () T@T)
(declare-fun $generated@@56 () T@T)
(declare-fun $generated@@57 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@58 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@59 () T@T)
(declare-fun $generated@@60 (T@T T@T) T@T)
(declare-fun $generated@@61 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@62 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@63 (T@T) T@T)
(declare-fun $generated@@64 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (= ($generated@@19 $generated) $generated@@0))
(assert (= ($generated@@20 $generated@@21) 0))
(assert (forall (($generated@@23 T@U) ($generated@@24 T@T) ) (! (= ($generated@@22 $generated@@24 $generated@@23) $generated@@23)
 :pattern ( ($generated@@22 $generated@@24 $generated@@23))
)))
(assert (forall (($generated@@27 T@U) ($generated@@28 T@T) ) (! (= ($generated@@26 $generated@@28 ($generated@@25 $generated@@28 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@25 $generated@@28 $generated@@27))
)))
(assert (forall (($generated@@31 T@U) ($generated@@32 T@U) ($generated@@33 T@U) ($generated@@34 T@T) ) (! (= ($generated@@29 ($generated@@26 $generated@@34 $generated@@31) $generated@@32 $generated@@33) ($generated@@30 $generated@@34 $generated@@31 $generated@@32 $generated@@33))
 :pattern ( ($generated@@29 ($generated@@26 $generated@@34 $generated@@31) $generated@@32 $generated@@33))
)))
(assert (forall (($generated@@37 T@U) ) (!  (=> ($generated@@35 $generated@@37 $generated) (and (= ($generated@@26 $generated@@5 ($generated@@25 $generated@@5 $generated@@37)) $generated@@37) ($generated@@36 $generated@@5 ($generated@@25 $generated@@5 $generated@@37) $generated)))
 :pattern ( ($generated@@35 $generated@@37 $generated))
)))
(assert (forall (($generated@@38 T@U) ($generated@@39 T@U) ($generated@@40 T@T) ) (! (= ($generated@@35 ($generated@@26 $generated@@40 $generated@@38) $generated@@39) ($generated@@36 $generated@@40 $generated@@38 $generated@@39))
 :pattern ( ($generated@@35 ($generated@@26 $generated@@40 $generated@@38) $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ) (! (<= 0 ($generated@@20 $generated@@41))
 :pattern ( ($generated@@20 $generated@@41))
)))
(assert (= ($generated@@3 $generated@@42) 3))
(assert (forall (($generated@@45 T@U) ($generated@@46 T@U) ($generated@@47 T@U) ) (! (= ($generated@@30 $generated@@42 $generated@@45 ($generated@@43 $generated@@46) $generated@@47) (forall (($generated@@48 Int) ) (!  (=> (and (<= 0 $generated@@48) (< $generated@@48 ($generated@@20 $generated@@45))) ($generated@@29 ($generated@@44 $generated@@45 $generated@@48) $generated@@46 $generated@@47))
 :pattern ( ($generated@@44 $generated@@45 $generated@@48))
)))
 :pattern ( ($generated@@30 $generated@@42 $generated@@45 ($generated@@43 $generated@@46) $generated@@47))
)))
(assert (forall (($generated@@50 T@U) ) (! (= ($generated@@49 ($generated@@43 $generated@@50)) $generated@@50)
 :pattern ( ($generated@@43 $generated@@50))
)))
(assert (forall (($generated@@51 T@U) ) (! (= ($generated@@19 ($generated@@43 $generated@@51)) $generated@@1)
 :pattern ( ($generated@@43 $generated@@51))
)))
(assert (forall (($generated@@52 T@U) ($generated@@53 T@T) ) (! (= ($generated@@25 $generated@@53 ($generated@@26 $generated@@53 $generated@@52)) $generated@@52)
 :pattern ( ($generated@@26 $generated@@53 $generated@@52))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@65 T@T) ($generated@@66 T@T) ($generated@@67 T@T) ($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@U) ) (! (= ($generated@@54 $generated@@65 $generated@@66 $generated@@67 ($generated@@61 $generated@@65 $generated@@66 $generated@@67 $generated@@69 $generated@@70 $generated@@71 $generated@@68) $generated@@70 $generated@@71) $generated@@68)
 :weight 0
)) (and (forall (($generated@@72 T@T) ($generated@@73 T@T) ($generated@@74 T@T) ($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ) (!  (or (= $generated@@77 $generated@@79) (= ($generated@@54 $generated@@72 $generated@@73 $generated@@74 ($generated@@61 $generated@@72 $generated@@73 $generated@@74 $generated@@76 $generated@@77 $generated@@78 $generated@@75) $generated@@79 $generated@@80) ($generated@@54 $generated@@72 $generated@@73 $generated@@74 $generated@@76 $generated@@79 $generated@@80)))
 :weight 0
)) (forall (($generated@@81 T@T) ($generated@@82 T@T) ($generated@@83 T@T) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ) (!  (or (= $generated@@87 $generated@@89) (= ($generated@@54 $generated@@81 $generated@@82 $generated@@83 ($generated@@61 $generated@@81 $generated@@82 $generated@@83 $generated@@85 $generated@@86 $generated@@87 $generated@@84) $generated@@88 $generated@@89) ($generated@@54 $generated@@81 $generated@@82 $generated@@83 $generated@@85 $generated@@88 $generated@@89)))
 :weight 0
)))) (= ($generated@@3 $generated@@55) 4)) (= ($generated@@3 $generated@@56) 5)) (forall (($generated@@90 T@T) ($generated@@91 T@T) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (! (= ($generated@@58 $generated@@90 $generated@@91 ($generated@@62 $generated@@90 $generated@@91 $generated@@93 $generated@@94 $generated@@92) $generated@@94) $generated@@92)
 :weight 0
))) (forall (($generated@@95 T@T) ($generated@@96 T@T) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ) (!  (or (= $generated@@99 $generated@@100) (= ($generated@@58 $generated@@95 $generated@@96 ($generated@@62 $generated@@95 $generated@@96 $generated@@98 $generated@@99 $generated@@97) $generated@@100) ($generated@@58 $generated@@95 $generated@@96 $generated@@98 $generated@@100)))
 :weight 0
))) (= ($generated@@3 $generated@@59) 6)) (forall (($generated@@101 T@T) ($generated@@102 T@T) ) (= ($generated@@3 ($generated@@60 $generated@@101 $generated@@102)) 7))) (forall (($generated@@103 T@T) ($generated@@104 T@T) ) (! (= ($generated@@63 ($generated@@60 $generated@@103 $generated@@104)) $generated@@103)
 :pattern ( ($generated@@60 $generated@@103 $generated@@104))
))) (forall (($generated@@105 T@T) ($generated@@106 T@T) ) (! (= ($generated@@64 ($generated@@60 $generated@@105 $generated@@106)) $generated@@106)
 :pattern ( ($generated@@60 $generated@@105 $generated@@106))
))))
(assert (forall (($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 Bool) ($generated@@111 T@U) ($generated@@112 T@U) ) (! (= ($generated@@8 ($generated@@54 $generated@@55 $generated@@56 $generated@@4 ($generated@@57 $generated@@107 $generated@@108 $generated@@109 $generated@@110) $generated@@111 $generated@@112))  (=> (and (or (not (= $generated@@111 $generated@@107)) (not true)) ($generated@@8 ($generated@@25 $generated@@4 ($generated@@58 $generated@@56 $generated@@59 ($generated@@58 $generated@@55 ($generated@@60 $generated@@56 $generated@@59) $generated@@108 $generated@@111) $generated@@109)))) $generated@@110))
 :pattern ( ($generated@@54 $generated@@55 $generated@@56 $generated@@4 ($generated@@57 $generated@@107 $generated@@108 $generated@@109 $generated@@110) $generated@@111 $generated@@112))
)))
(assert (forall (($generated@@113 T@U) ($generated@@114 T@U) ) (!  (=> ($generated@@35 $generated@@113 ($generated@@43 $generated@@114)) (and (= ($generated@@26 $generated@@42 ($generated@@25 $generated@@42 $generated@@113)) $generated@@113) ($generated@@36 $generated@@42 ($generated@@25 $generated@@42 $generated@@113) ($generated@@43 $generated@@114))))
 :pattern ( ($generated@@35 $generated@@113 ($generated@@43 $generated@@114)))
)))
(assert (forall (($generated@@115 T@U) ($generated@@116 T@T) ) (! (= ($generated@@26 $generated@@116 ($generated@@22 $generated@@116 $generated@@115)) ($generated@@22 $generated@@59 ($generated@@26 $generated@@116 $generated@@115)))
 :pattern ( ($generated@@26 $generated@@116 ($generated@@22 $generated@@116 $generated@@115)))
)))
(assert (forall (($generated@@117 T@U) ) (!  (=> (= ($generated@@20 $generated@@117) 0) (= $generated@@117 $generated@@21))
 :pattern ( ($generated@@20 $generated@@117))
)))
(assert (forall (($generated@@118 T@U) ($generated@@119 T@U) ) (! ($generated@@30 $generated@@5 $generated@@119 $generated $generated@@118)
 :pattern ( ($generated@@30 $generated@@5 $generated@@119 $generated $generated@@118))
)))
(assert (forall (($generated@@120 T@U) ($generated@@121 T@U) ) (! (= ($generated@@36 $generated@@42 $generated@@120 ($generated@@43 $generated@@121)) (forall (($generated@@122 Int) ) (!  (=> (and (<= 0 $generated@@122) (< $generated@@122 ($generated@@20 $generated@@120))) ($generated@@35 ($generated@@44 $generated@@120 $generated@@122) $generated@@121))
 :pattern ( ($generated@@44 $generated@@120 $generated@@122))
)))
 :pattern ( ($generated@@36 $generated@@42 $generated@@120 ($generated@@43 $generated@@121)))
)))
(assert (forall (($generated@@123 T@U) ) (! ($generated@@36 $generated@@5 $generated@@123 $generated)
 :pattern ( ($generated@@36 $generated@@5 $generated@@123 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@124 (T@U) Bool)
(declare-fun $generated@@125 (T@U) Bool)
(declare-fun $generated@@126 () T@U)
(declare-fun $generated@@127 () T@U)
(declare-fun $generated@@128 () T@U)
(declare-fun $generated@@129 () T@U)
(declare-fun $generated@@130 () T@U)
(declare-fun $generated@@131 () T@U)
(declare-fun $generated@@132 (T@U) Bool)
(declare-fun $generated@@133 (T@U) Bool)
(declare-fun $generated@@134 () T@U)
(declare-fun $generated@@135 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 10) (let (($generated@@136  (=> (and (forall (($generated@@137 T@U) ) (!  (=> ($generated@@36 $generated@@42 $generated@@137 ($generated@@43 $generated)) ($generated@@125 $generated@@137))
 :pattern ( ($generated@@124 $generated@@137))
)) (= (ControlFlow 0 2) (- 0 1))) (exists (($generated@@138 T@U) ) (!  (and ($generated@@36 $generated@@42 $generated@@138 ($generated@@43 $generated)) ($generated@@124 $generated@@138))
 :pattern ( ($generated@@124 $generated@@138))
)))))
(let (($generated@@139  (=> (and (not (and ($generated@@36 $generated@@42 $generated@@126 ($generated@@43 $generated)) ($generated@@30 $generated@@42 $generated@@126 ($generated@@43 $generated) $generated@@127))) (= (ControlFlow 0 4) 2)) $generated@@136)))
(let (($generated@@140  (=> (and (and (and ($generated@@36 $generated@@42 $generated@@126 ($generated@@43 $generated)) ($generated@@30 $generated@@42 $generated@@126 ($generated@@43 $generated) $generated@@127)) ($generated@@30 $generated@@42 $generated@@126 ($generated@@43 $generated) $generated@@127)) (and ($generated@@125 $generated@@126) (= (ControlFlow 0 3) 2))) $generated@@136)))
(let (($generated@@141  (and (=> (= (ControlFlow 0 5) (- 0 6)) ($generated@@8 ($generated@@22 $generated@@4 ($generated@@7 true)))) (=> ($generated@@8 ($generated@@22 $generated@@4 ($generated@@7 true))) (=> (and ($generated@@36 $generated@@42 $generated@@128 ($generated@@43 $generated)) ($generated@@30 $generated@@42 $generated@@128 ($generated@@43 $generated) $generated@@127)) (=> (and (and ($generated@@30 $generated@@42 $generated@@128 ($generated@@43 $generated) $generated@@127) ($generated@@125 $generated@@128)) (and ($generated@@125 $generated@@128) ($generated@@124 $generated@@128))) (and (=> (= (ControlFlow 0 5) 3) $generated@@140) (=> (= (ControlFlow 0 5) 4) $generated@@139))))))))
(let (($generated@@142  (=> (and (not (and ($generated@@36 $generated@@42 $generated@@129 ($generated@@43 $generated)) ($generated@@30 $generated@@42 $generated@@129 ($generated@@43 $generated) $generated@@127))) (= (ControlFlow 0 8) 5)) $generated@@141)))
(let (($generated@@143  (=> (and (and ($generated@@36 $generated@@42 $generated@@129 ($generated@@43 $generated)) ($generated@@30 $generated@@42 $generated@@129 ($generated@@43 $generated) $generated@@127)) (= (ControlFlow 0 7) 5)) $generated@@141)))
(let (($generated@@144  (=> (= $generated@@130 ($generated@@57 $generated@@131 $generated@@127 $generated@@2 false)) (and (=> (= (ControlFlow 0 9) 7) $generated@@143) (=> (= (ControlFlow 0 9) 8) $generated@@142)))))
(let (($generated@@145  (=> (and ($generated@@132 $generated@@127) ($generated@@133 $generated@@127)) (=> (and (and (and ($generated@@36 $generated@@42 $generated@@134 ($generated@@43 $generated)) ($generated@@30 $generated@@42 $generated@@134 ($generated@@43 $generated) $generated@@127)) true) (and (= 1 $generated@@135) (= (ControlFlow 0 10) 9))) $generated@@144))))
$generated@@145)))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
