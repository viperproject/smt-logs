(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 (T@T) Int)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Bool) T@U)
(declare-fun $generated@@9 (T@U) Bool)
(declare-fun $generated@@10 (Int) T@U)
(declare-fun $generated@@11 (T@U) Int)
(declare-fun $generated@@12 (Real) T@U)
(declare-fun $generated@@13 (T@U) Real)
(declare-fun $generated@@20 (T@U) T@U)
(declare-fun $generated@@21 () T@U)
(declare-fun $generated@@22 () T@U)
(declare-fun $generated@@23 (T@T T@U T@U) Bool)
(declare-fun $generated@@24 () T@T)
(declare-fun $generated@@25 () T@U)
(declare-fun $generated@@26 (T@U T@U) Bool)
(declare-fun $generated@@29 (T@U T@U) Bool)
(declare-fun $generated@@30 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@31 () T@T)
(declare-fun $generated@@32 () T@T)
(declare-fun $generated@@33 () T@T)
(declare-fun $generated@@34 (T@T T@T) T@T)
(declare-fun $generated@@35 (T@T T@U) T@U)
(declare-fun $generated@@36 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@37 (T@T) T@T)
(declare-fun $generated@@38 (T@T) T@T)
(declare-fun $generated@@59 (T@T T@U) T@U)
(declare-fun $generated@@62 (T@U) Bool)
(declare-fun $generated@@64 (T@U) Bool)
(declare-fun $generated@@66 (T@T T@U) T@U)
(declare-fun $generated@@71 (T@U) Bool)
(declare-fun $generated@@83 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@84 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@85 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@117 (T@U) T@U)
(declare-fun $generated@@118 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@4 $generated@@5) 0) (= ($generated@@4 $generated@@6) 1)) (= ($generated@@4 $generated@@7) 2)) (forall (($generated@@14 Bool) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Int) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Real) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3)
)
(assert (= ($generated@@20 $generated@@21) $generated@@1))
(assert (= ($generated@@20 $generated@@22) $generated@@2))
(assert (= ($generated@@4 $generated@@24) 3))
(assert ($generated@@23 $generated@@24 $generated@@21 $generated@@25))
(assert ($generated@@23 $generated@@24 $generated@@22 $generated@@25))
(assert (forall (($generated@@27 T@U) ($generated@@28 T@U) ) (! (= ($generated@@26 $generated@@27 $generated@@28) (= $generated@@27 $generated@@28))
 :pattern ( ($generated@@26 $generated@@27 $generated@@28))
)))
(assert  (and (and (and (and (and (and (and (forall (($generated@@39 T@T) ($generated@@40 T@T) ($generated@@41 T@U) ($generated@@42 T@U) ($generated@@43 T@U) ) (! (= ($generated@@30 $generated@@39 $generated@@40 ($generated@@36 $generated@@39 $generated@@40 $generated@@42 $generated@@43 $generated@@41) $generated@@43) $generated@@41)
 :weight 0
)) (forall (($generated@@44 T@T) ($generated@@45 T@T) ($generated@@46 T@U) ($generated@@47 T@U) ($generated@@48 T@U) ($generated@@49 T@U) ) (!  (or (= $generated@@48 $generated@@49) (= ($generated@@30 $generated@@44 $generated@@45 ($generated@@36 $generated@@44 $generated@@45 $generated@@47 $generated@@48 $generated@@46) $generated@@49) ($generated@@30 $generated@@44 $generated@@45 $generated@@47 $generated@@49)))
 :weight 0
))) (= ($generated@@4 $generated@@31) 4)) (= ($generated@@4 $generated@@32) 5)) (= ($generated@@4 $generated@@33) 6)) (forall (($generated@@50 T@T) ($generated@@51 T@T) ) (= ($generated@@4 ($generated@@34 $generated@@50 $generated@@51)) 7))) (forall (($generated@@52 T@T) ($generated@@53 T@T) ) (! (= ($generated@@37 ($generated@@34 $generated@@52 $generated@@53)) $generated@@52)
 :pattern ( ($generated@@34 $generated@@52 $generated@@53))
))) (forall (($generated@@54 T@T) ($generated@@55 T@T) ) (! (= ($generated@@38 ($generated@@34 $generated@@54 $generated@@55)) $generated@@55)
 :pattern ( ($generated@@34 $generated@@54 $generated@@55))
))))
(assert (forall (($generated@@56 T@U) ($generated@@57 T@U) ) (!  (=> ($generated@@29 $generated@@56 $generated@@57) (forall (($generated@@58 T@U) ) (!  (=> ($generated@@9 ($generated@@35 $generated@@5 ($generated@@30 $generated@@31 $generated@@32 ($generated@@30 $generated@@33 ($generated@@34 $generated@@31 $generated@@32) $generated@@56 $generated@@58) $generated))) ($generated@@9 ($generated@@35 $generated@@5 ($generated@@30 $generated@@31 $generated@@32 ($generated@@30 $generated@@33 ($generated@@34 $generated@@31 $generated@@32) $generated@@57 $generated@@58) $generated))))
 :pattern ( ($generated@@30 $generated@@31 $generated@@32 ($generated@@30 $generated@@33 ($generated@@34 $generated@@31 $generated@@32) $generated@@57 $generated@@58) $generated))
)))
 :pattern ( ($generated@@29 $generated@@56 $generated@@57))
)))
(assert (forall (($generated@@60 T@U) ($generated@@61 T@T) ) (! (= ($generated@@59 $generated@@61 $generated@@60) $generated@@60)
 :pattern ( ($generated@@59 $generated@@61 $generated@@60))
)))
(assert (forall (($generated@@63 T@U) ) (! (= ($generated@@62 $generated@@63) (= ($generated@@20 $generated@@63) $generated@@1))
 :pattern ( ($generated@@62 $generated@@63))
)))
(assert (forall (($generated@@65 T@U) ) (! (= ($generated@@64 $generated@@65) (= ($generated@@20 $generated@@65) $generated@@2))
 :pattern ( ($generated@@64 $generated@@65))
)))
(assert (forall (($generated@@67 T@U) ($generated@@68 T@T) ) (! (= ($generated@@66 $generated@@68 ($generated@@35 $generated@@68 $generated@@67)) $generated@@67)
 :pattern ( ($generated@@35 $generated@@68 $generated@@67))
)))
(assert (forall (($generated@@69 T@U) ) (!  (=> ($generated@@62 $generated@@69) (= $generated@@69 $generated@@21))
 :pattern ( ($generated@@62 $generated@@69))
)))
(assert (forall (($generated@@70 T@U) ) (!  (=> ($generated@@64 $generated@@70) (= $generated@@70 $generated@@22))
 :pattern ( ($generated@@64 $generated@@70))
)))
(assert (forall (($generated@@72 T@U) ) (!  (=> ($generated@@71 $generated@@72) (or ($generated@@62 $generated@@72) ($generated@@64 $generated@@72)))
 :pattern ( ($generated@@71 $generated@@72))
)))
(assert (forall (($generated@@73 T@U) ) (!  (=> ($generated@@23 $generated@@24 $generated@@73 $generated@@25) (or ($generated@@62 $generated@@73) ($generated@@64 $generated@@73)))
 :pattern ( ($generated@@64 $generated@@73) ($generated@@23 $generated@@24 $generated@@73 $generated@@25))
 :pattern ( ($generated@@62 $generated@@73) ($generated@@23 $generated@@24 $generated@@73 $generated@@25))
)))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@U) ) (!  (=> (or (not (= $generated@@74 $generated@@76)) (not true)) (=> (and ($generated@@29 $generated@@74 $generated@@75) ($generated@@29 $generated@@75 $generated@@76)) ($generated@@29 $generated@@74 $generated@@76)))
 :pattern ( ($generated@@29 $generated@@74 $generated@@75) ($generated@@29 $generated@@75 $generated@@76))
)))
(assert (forall (($generated@@77 T@U) ($generated@@78 T@U) ) (!  (=> (and ($generated@@62 $generated@@77) ($generated@@62 $generated@@78)) ($generated@@26 $generated@@77 $generated@@78))
 :pattern ( ($generated@@26 $generated@@77 $generated@@78) ($generated@@62 $generated@@77))
 :pattern ( ($generated@@26 $generated@@77 $generated@@78) ($generated@@62 $generated@@78))
)))
(assert (forall (($generated@@79 T@U) ($generated@@80 T@U) ) (!  (=> (and ($generated@@64 $generated@@79) ($generated@@64 $generated@@80)) ($generated@@26 $generated@@79 $generated@@80))
 :pattern ( ($generated@@26 $generated@@79 $generated@@80) ($generated@@64 $generated@@79))
 :pattern ( ($generated@@26 $generated@@79 $generated@@80) ($generated@@64 $generated@@80))
)))
(assert (forall (($generated@@81 T@U) ($generated@@82 T@T) ) (! (= ($generated@@35 $generated@@82 ($generated@@66 $generated@@82 $generated@@81)) $generated@@81)
 :pattern ( ($generated@@66 $generated@@82 $generated@@81))
)))
(assert  (and (forall (($generated@@86 T@T) ($generated@@87 T@T) ($generated@@88 T@T) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ) (! (= ($generated@@83 $generated@@86 $generated@@87 $generated@@88 ($generated@@85 $generated@@86 $generated@@87 $generated@@88 $generated@@90 $generated@@91 $generated@@92 $generated@@89) $generated@@91 $generated@@92) $generated@@89)
 :weight 0
)) (and (forall (($generated@@93 T@T) ($generated@@94 T@T) ($generated@@95 T@T) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ) (!  (or (= $generated@@98 $generated@@100) (= ($generated@@83 $generated@@93 $generated@@94 $generated@@95 ($generated@@85 $generated@@93 $generated@@94 $generated@@95 $generated@@97 $generated@@98 $generated@@99 $generated@@96) $generated@@100 $generated@@101) ($generated@@83 $generated@@93 $generated@@94 $generated@@95 $generated@@97 $generated@@100 $generated@@101)))
 :weight 0
)) (forall (($generated@@102 T@T) ($generated@@103 T@T) ($generated@@104 T@T) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ) (!  (or (= $generated@@108 $generated@@110) (= ($generated@@83 $generated@@102 $generated@@103 $generated@@104 ($generated@@85 $generated@@102 $generated@@103 $generated@@104 $generated@@106 $generated@@107 $generated@@108 $generated@@105) $generated@@109 $generated@@110) ($generated@@83 $generated@@102 $generated@@103 $generated@@104 $generated@@106 $generated@@109 $generated@@110)))
 :weight 0
)))))
(assert (forall (($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 Bool) ($generated@@115 T@U) ($generated@@116 T@U) ) (! (= ($generated@@9 ($generated@@83 $generated@@33 $generated@@31 $generated@@5 ($generated@@84 $generated@@111 $generated@@112 $generated@@113 $generated@@114) $generated@@115 $generated@@116))  (=> (and (or (not (= $generated@@115 $generated@@111)) (not true)) ($generated@@9 ($generated@@35 $generated@@5 ($generated@@30 $generated@@31 $generated@@32 ($generated@@30 $generated@@33 ($generated@@34 $generated@@31 $generated@@32) $generated@@112 $generated@@115) $generated@@113)))) $generated@@114))
 :pattern ( ($generated@@83 $generated@@33 $generated@@31 $generated@@5 ($generated@@84 $generated@@111 $generated@@112 $generated@@113 $generated@@114) $generated@@115 $generated@@116))
)))
(assert (= ($generated@@117 $generated@@25) $generated@@0))
(assert (= ($generated@@118 $generated@@25) $generated@@3))
(assert (= $generated@@21 ($generated@@59 $generated@@24 $generated@@21)))
(assert (= $generated@@22 ($generated@@59 $generated@@24 $generated@@22)))
(assert (forall (($generated@@119 T@U) ($generated@@120 T@T) ) (! (= ($generated@@66 $generated@@120 ($generated@@59 $generated@@120 $generated@@119)) ($generated@@59 $generated@@32 ($generated@@66 $generated@@120 $generated@@119)))
 :pattern ( ($generated@@66 $generated@@120 ($generated@@59 $generated@@120 $generated@@119)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@121 () T@U)
(declare-fun $generated@@122 () T@U)
(declare-fun $generated@@123 () T@U)
(declare-fun $generated@@124 () T@U)
(declare-fun $generated@@125 () T@U)
(declare-fun $generated@@126 (T@U) Bool)
(declare-fun $generated@@127 () T@U)
(declare-fun $generated@@128 (T@U) Bool)
(declare-fun $generated@@129 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@130  (=> (= $generated@@121 ($generated@@84 $generated@@122 $generated@@123 $generated false)) (=> (and (= $generated@@124 ($generated@@59 $generated@@24 $generated@@21)) (= $generated@@125 ($generated@@59 $generated@@24 $generated@@22))) (=> (and (and (and ($generated@@126 $generated@@127) ($generated@@128 $generated@@127)) (and ($generated@@71 $generated@@124) ($generated@@71 $generated@@125))) (and (and ($generated@@26 $generated@@124 $generated@@125) (forall (($generated@@131 T@U) ) (!  (=> (and (or (not (= $generated@@131 $generated@@122)) (not true)) ($generated@@9 ($generated@@35 $generated@@5 ($generated@@30 $generated@@31 $generated@@32 ($generated@@30 $generated@@33 ($generated@@34 $generated@@31 $generated@@32) $generated@@123 $generated@@131) $generated)))) (= ($generated@@30 $generated@@33 ($generated@@34 $generated@@31 $generated@@32) $generated@@127 $generated@@131) ($generated@@30 $generated@@33 ($generated@@34 $generated@@31 $generated@@32) $generated@@123 $generated@@131)))
 :pattern ( ($generated@@30 $generated@@33 ($generated@@34 $generated@@31 $generated@@32) $generated@@127 $generated@@131))
))) (and ($generated@@29 $generated@@123 $generated@@127) (= (ControlFlow 0 2) (- 0 1))))) ($generated@@9 ($generated@@59 $generated@@5 ($generated@@8 false))))))))
(let (($generated@@132  (=> (and (and ($generated@@126 $generated@@123) ($generated@@128 $generated@@123)) (and (= 2 $generated@@129) (= (ControlFlow 0 3) 2))) $generated@@130)))
$generated@@132)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
