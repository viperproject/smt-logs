(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 (T@U) T@U)
(declare-fun $generated@@22 () Int)
(declare-fun $generated@@23 (T@U) T@U)
(declare-fun $generated@@24 (T@U) T@U)
(declare-fun $generated@@25 () Bool)
(declare-fun $generated@@26 () Bool)
(declare-fun $generated@@27 (T@T T@U) T@U)
(declare-fun $generated@@28 () T@T)
(declare-fun $generated@@29 (T@U) T@U)
(declare-fun $generated@@31 (T@U) Bool)
(declare-fun $generated@@32 (T@T T@U T@U) Bool)
(declare-fun $generated@@33 (T@U) T@U)
(declare-fun $generated@@39 (Int) Int)
(declare-fun $generated@@43 (T@U T@U) T@U)
(declare-fun $generated@@44 (T@U T@U) Bool)
(declare-fun $generated@@48 (T@U) T@U)
(declare-fun $generated@@50 (T@T T@U) T@U)
(declare-fun $generated@@51 (T@T T@U) T@U)
(declare-fun $generated@@58 (T@U T@U T@U) Bool)
(declare-fun $generated@@59 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@64 (T@U) T@U)
(declare-fun $generated@@73 (T@U) T@U)
(declare-fun $generated@@76 (T@U) T@U)
(declare-fun $generated@@79 (T@U) T@U)
(declare-fun $generated@@83 (T@U) Bool)
(declare-fun $generated@@87 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@88 () T@T)
(declare-fun $generated@@89 () T@T)
(declare-fun $generated@@90 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@91 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@92 () T@T)
(declare-fun $generated@@93 (T@T T@T) T@T)
(declare-fun $generated@@94 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@95 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@96 (T@T) T@T)
(declare-fun $generated@@97 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert (= ($generated@@21 $generated) $generated@@0))
(assert (= ($generated@@5 $generated@@28) 3))
(assert  (=> (<= 1 $generated@@22) (forall (($generated@@30 T@U) ) (!  (=> (or $generated@@25 (< 1 $generated@@22)) (and $generated@@26 (= ($generated@@23 ($generated@@24 $generated@@30)) ($generated@@27 $generated@@28 ($generated@@29 $generated@@30)))))
 :pattern ( ($generated@@23 ($generated@@24 $generated@@30)))
))))
(assert (forall (($generated@@34 T@U) ($generated@@35 T@U) ) (!  (=> ($generated@@32 $generated@@28 $generated@@35 ($generated@@33 $generated@@34)) ($generated@@31 $generated@@35))
 :pattern ( ($generated@@31 $generated@@35) ($generated@@32 $generated@@28 $generated@@35 ($generated@@33 $generated@@34)))
)))
(assert  (=> (<= 1 $generated@@22) (forall (($generated@@36 T@U) ) (!  (=> (or $generated@@25 (< 1 $generated@@22)) (and $generated@@26 (= ($generated@@23 ($generated@@24 $generated@@36)) ($generated@@27 $generated@@28 ($generated@@29 ($generated@@24 $generated@@36))))))
 :weight 3
 :pattern ( ($generated@@23 ($generated@@24 $generated@@36)))
))))
(assert  (=> (<= 1 $generated@@22) (forall (($generated@@37 T@U) ) (!  (=> (or $generated@@25 (< 1 $generated@@22)) ($generated@@32 $generated@@28 ($generated@@23 $generated@@37) ($generated@@33 $generated)))
 :pattern ( ($generated@@23 $generated@@37))
))))
(assert  (=> (<= 1 $generated@@22) (forall (($generated@@38 T@U) ) (!  (=> (or $generated@@26 (< 1 $generated@@22)) ($generated@@32 $generated@@28 ($generated@@29 $generated@@38) ($generated@@33 $generated)))
 :pattern ( ($generated@@29 $generated@@38))
))))
(assert (forall (($generated@@40 Int) ) (! (= ($generated@@39 $generated@@40) $generated@@40)
 :pattern ( ($generated@@39 $generated@@40))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@T) ) (! (= ($generated@@27 $generated@@42 $generated@@41) $generated@@41)
 :pattern ( ($generated@@27 $generated@@42 $generated@@41))
)))
(assert (forall (($generated@@45 T@U) ($generated@@46 T@U) ($generated@@47 T@U) ) (! (= ($generated@@32 $generated@@28 ($generated@@43 $generated@@46 $generated@@47) ($generated@@33 $generated@@45))  (and ($generated@@44 $generated@@46 $generated@@45) ($generated@@32 $generated@@28 $generated@@47 ($generated@@33 $generated@@45))))
 :pattern ( ($generated@@32 $generated@@28 ($generated@@43 $generated@@46 $generated@@47) ($generated@@33 $generated@@45)))
)))
(assert (forall (($generated@@49 T@U) ) (! (= ($generated@@31 $generated@@49) (= ($generated@@48 $generated@@49) $generated@@3))
 :pattern ( ($generated@@31 $generated@@49))
)))
(assert (forall (($generated@@52 T@U) ($generated@@53 T@T) ) (! (= ($generated@@51 $generated@@53 ($generated@@50 $generated@@53 $generated@@52)) $generated@@52)
 :pattern ( ($generated@@50 $generated@@53 $generated@@52))
)))
(assert (forall (($generated@@54 T@U) ) (!  (=> ($generated@@31 $generated@@54) (exists (($generated@@55 T@U) ($generated@@56 T@U) ) (= $generated@@54 ($generated@@43 $generated@@55 $generated@@56))))
 :pattern ( ($generated@@31 $generated@@54))
)))
(assert  (=> (<= 1 $generated@@22) (forall (($generated@@57 T@U) ) (!  (=> (or $generated@@26 (< 1 $generated@@22)) (and $generated@@25 (= ($generated@@29 ($generated@@24 $generated@@57)) ($generated@@27 $generated@@28 ($generated@@43 ($generated@@51 $generated@@7 ($generated@@11 ($generated@@39 5))) ($generated@@27 $generated@@28 ($generated@@23 $generated@@57)))))))
 :pattern ( ($generated@@29 ($generated@@24 $generated@@57)))
))))
(assert (forall (($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@T) ) (! (= ($generated@@58 ($generated@@51 $generated@@63 $generated@@60) $generated@@61 $generated@@62) ($generated@@59 $generated@@63 $generated@@60 $generated@@61 $generated@@62))
 :pattern ( ($generated@@58 ($generated@@51 $generated@@63 $generated@@60) $generated@@61 $generated@@62))
)))
(assert (forall (($generated@@65 T@U) ) (!  (and (= ($generated@@21 ($generated@@33 $generated@@65)) $generated@@2) (= ($generated@@64 ($generated@@33 $generated@@65)) $generated@@4))
 :pattern ( ($generated@@33 $generated@@65))
)))
(assert  (=> (<= 1 $generated@@22) (forall (($generated@@66 T@U) ) (!  (=> (or $generated@@26 (< 1 $generated@@22)) (and $generated@@25 (= ($generated@@29 ($generated@@24 $generated@@66)) ($generated@@27 $generated@@28 ($generated@@43 ($generated@@51 $generated@@7 ($generated@@11 ($generated@@39 5))) ($generated@@27 $generated@@28 ($generated@@23 ($generated@@24 $generated@@66))))))))
 :weight 3
 :pattern ( ($generated@@29 ($generated@@24 $generated@@66)))
))))
(assert (forall (($generated@@67 T@U) ) (!  (=> ($generated@@44 $generated@@67 $generated) (and (= ($generated@@51 $generated@@7 ($generated@@50 $generated@@7 $generated@@67)) $generated@@67) ($generated@@32 $generated@@7 ($generated@@50 $generated@@7 $generated@@67) $generated)))
 :pattern ( ($generated@@44 $generated@@67 $generated))
)))
(assert (forall (($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@T) ) (! (= ($generated@@44 ($generated@@51 $generated@@70 $generated@@68) $generated@@69) ($generated@@32 $generated@@70 $generated@@68 $generated@@69))
 :pattern ( ($generated@@44 ($generated@@51 $generated@@70 $generated@@68) $generated@@69))
)))
(assert (forall (($generated@@71 T@U) ($generated@@72 T@U) ) (! (= ($generated@@48 ($generated@@43 $generated@@71 $generated@@72)) $generated@@3)
 :pattern ( ($generated@@43 $generated@@71 $generated@@72))
)))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@U) ) (! (= ($generated@@73 ($generated@@43 $generated@@74 $generated@@75)) $generated@@74)
 :pattern ( ($generated@@43 $generated@@74 $generated@@75))
)))
(assert (forall (($generated@@77 T@U) ($generated@@78 T@U) ) (! (= ($generated@@76 ($generated@@43 $generated@@77 $generated@@78)) $generated@@78)
 :pattern ( ($generated@@43 $generated@@77 $generated@@78))
)))
(assert (forall (($generated@@80 T@U) ) (! (= ($generated@@79 ($generated@@33 $generated@@80)) $generated@@80)
 :pattern ( ($generated@@33 $generated@@80))
)))
(assert (forall (($generated@@81 T@U) ($generated@@82 T@T) ) (! (= ($generated@@50 $generated@@82 ($generated@@51 $generated@@82 $generated@@81)) $generated@@81)
 :pattern ( ($generated@@51 $generated@@82 $generated@@81))
)))
(assert (forall (($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (!  (=> (and ($generated@@83 $generated@@86) (and ($generated@@31 $generated@@84) ($generated@@59 $generated@@28 $generated@@84 ($generated@@33 $generated@@85) $generated@@86))) ($generated@@58 ($generated@@73 $generated@@84) $generated@@85 $generated@@86))
 :pattern ( ($generated@@58 ($generated@@73 $generated@@84) $generated@@85 $generated@@86))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@98 T@T) ($generated@@99 T@T) ($generated@@100 T@T) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ) (! (= ($generated@@87 $generated@@98 $generated@@99 $generated@@100 ($generated@@94 $generated@@98 $generated@@99 $generated@@100 $generated@@102 $generated@@103 $generated@@104 $generated@@101) $generated@@103 $generated@@104) $generated@@101)
 :weight 0
)) (and (forall (($generated@@105 T@T) ($generated@@106 T@T) ($generated@@107 T@T) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ) (!  (or (= $generated@@110 $generated@@112) (= ($generated@@87 $generated@@105 $generated@@106 $generated@@107 ($generated@@94 $generated@@105 $generated@@106 $generated@@107 $generated@@109 $generated@@110 $generated@@111 $generated@@108) $generated@@112 $generated@@113) ($generated@@87 $generated@@105 $generated@@106 $generated@@107 $generated@@109 $generated@@112 $generated@@113)))
 :weight 0
)) (forall (($generated@@114 T@T) ($generated@@115 T@T) ($generated@@116 T@T) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ) (!  (or (= $generated@@120 $generated@@122) (= ($generated@@87 $generated@@114 $generated@@115 $generated@@116 ($generated@@94 $generated@@114 $generated@@115 $generated@@116 $generated@@118 $generated@@119 $generated@@120 $generated@@117) $generated@@121 $generated@@122) ($generated@@87 $generated@@114 $generated@@115 $generated@@116 $generated@@118 $generated@@121 $generated@@122)))
 :weight 0
)))) (= ($generated@@5 $generated@@88) 4)) (= ($generated@@5 $generated@@89) 5)) (forall (($generated@@123 T@T) ($generated@@124 T@T) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 T@U) ) (! (= ($generated@@91 $generated@@123 $generated@@124 ($generated@@95 $generated@@123 $generated@@124 $generated@@126 $generated@@127 $generated@@125) $generated@@127) $generated@@125)
 :weight 0
))) (forall (($generated@@128 T@T) ($generated@@129 T@T) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ) (!  (or (= $generated@@132 $generated@@133) (= ($generated@@91 $generated@@128 $generated@@129 ($generated@@95 $generated@@128 $generated@@129 $generated@@131 $generated@@132 $generated@@130) $generated@@133) ($generated@@91 $generated@@128 $generated@@129 $generated@@131 $generated@@133)))
 :weight 0
))) (= ($generated@@5 $generated@@92) 6)) (forall (($generated@@134 T@T) ($generated@@135 T@T) ) (= ($generated@@5 ($generated@@93 $generated@@134 $generated@@135)) 7))) (forall (($generated@@136 T@T) ($generated@@137 T@T) ) (! (= ($generated@@96 ($generated@@93 $generated@@136 $generated@@137)) $generated@@136)
 :pattern ( ($generated@@93 $generated@@136 $generated@@137))
))) (forall (($generated@@138 T@T) ($generated@@139 T@T) ) (! (= ($generated@@97 ($generated@@93 $generated@@138 $generated@@139)) $generated@@139)
 :pattern ( ($generated@@93 $generated@@138 $generated@@139))
))))
(assert (forall (($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 Bool) ($generated@@144 T@U) ($generated@@145 T@U) ) (! (= ($generated@@10 ($generated@@87 $generated@@88 $generated@@89 $generated@@6 ($generated@@90 $generated@@140 $generated@@141 $generated@@142 $generated@@143) $generated@@144 $generated@@145))  (=> (and (or (not (= $generated@@144 $generated@@140)) (not true)) ($generated@@10 ($generated@@50 $generated@@6 ($generated@@91 $generated@@89 $generated@@92 ($generated@@91 $generated@@88 ($generated@@93 $generated@@89 $generated@@92) $generated@@141 $generated@@144) $generated@@142)))) $generated@@143))
 :pattern ( ($generated@@87 $generated@@88 $generated@@89 $generated@@6 ($generated@@90 $generated@@140 $generated@@141 $generated@@142 $generated@@143) $generated@@144 $generated@@145))
)))
(assert (forall (($generated@@146 T@U) ) (! (= ($generated@@23 ($generated@@24 $generated@@146)) ($generated@@23 $generated@@146))
 :pattern ( ($generated@@23 ($generated@@24 $generated@@146)))
)))
(assert (forall (($generated@@147 T@U) ) (! (= ($generated@@29 ($generated@@24 $generated@@147)) ($generated@@29 $generated@@147))
 :pattern ( ($generated@@29 ($generated@@24 $generated@@147)))
)))
(assert (forall (($generated@@148 T@U) ($generated@@149 T@U) ) (!  (=> ($generated@@44 $generated@@149 ($generated@@33 $generated@@148)) (and (= ($generated@@51 $generated@@28 ($generated@@50 $generated@@28 $generated@@149)) $generated@@149) ($generated@@32 $generated@@28 ($generated@@50 $generated@@28 $generated@@149) ($generated@@33 $generated@@148))))
 :pattern ( ($generated@@44 $generated@@149 ($generated@@33 $generated@@148)))
)))
(assert (forall (($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ) (!  (=> (and ($generated@@83 $generated@@152) (and ($generated@@31 $generated@@150) ($generated@@59 $generated@@28 $generated@@150 ($generated@@33 $generated@@151) $generated@@152))) ($generated@@59 $generated@@28 ($generated@@76 $generated@@150) ($generated@@33 $generated@@151) $generated@@152))
 :pattern ( ($generated@@59 $generated@@28 ($generated@@76 $generated@@150) ($generated@@33 $generated@@151) $generated@@152))
)))
(assert (forall (($generated@@153 Int) ) (! (= ($generated@@51 $generated@@7 ($generated@@11 ($generated@@39 $generated@@153))) ($generated@@27 $generated@@92 ($generated@@51 $generated@@7 ($generated@@11 $generated@@153))))
 :pattern ( ($generated@@51 $generated@@7 ($generated@@11 ($generated@@39 $generated@@153))))
)))
(assert (forall (($generated@@154 T@U) ($generated@@155 T@T) ) (! (= ($generated@@51 $generated@@155 ($generated@@27 $generated@@155 $generated@@154)) ($generated@@27 $generated@@92 ($generated@@51 $generated@@155 $generated@@154)))
 :pattern ( ($generated@@51 $generated@@155 ($generated@@27 $generated@@155 $generated@@154)))
)))
(assert (forall (($generated@@156 T@U) ($generated@@157 T@U) ) (! ($generated@@59 $generated@@7 $generated@@157 $generated $generated@@156)
 :pattern ( ($generated@@59 $generated@@7 $generated@@157 $generated $generated@@156))
)))
(assert (forall (($generated@@158 T@U) ($generated@@159 T@U) ($generated@@160 T@U) ($generated@@161 T@U) ) (!  (=> ($generated@@83 $generated@@161) (= ($generated@@59 $generated@@28 ($generated@@43 $generated@@159 $generated@@160) ($generated@@33 $generated@@158) $generated@@161)  (and ($generated@@58 $generated@@159 $generated@@158 $generated@@161) ($generated@@59 $generated@@28 $generated@@160 ($generated@@33 $generated@@158) $generated@@161))))
 :pattern ( ($generated@@59 $generated@@28 ($generated@@43 $generated@@159 $generated@@160) ($generated@@33 $generated@@158) $generated@@161))
)))
(assert (forall (($generated@@162 T@U) ) (! ($generated@@32 $generated@@7 $generated@@162 $generated)
 :pattern ( ($generated@@32 $generated@@7 $generated@@162 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@163 () T@U)
(declare-fun $generated@@164 () T@U)
(declare-fun $generated@@165 () T@U)
(declare-fun $generated@@166 (T@U) Bool)
(declare-fun $generated@@167 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 4) (let (($generated@@168  (=> (= $generated@@163 ($generated@@90 $generated@@164 $generated@@165 $generated@@1 false)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (or (<= 0 ($generated@@39 1)) (= ($generated@@39 0) ($generated@@39 1)))) (=> (or (<= 0 ($generated@@39 1)) (= ($generated@@39 0) ($generated@@39 1))) (=> (= (ControlFlow 0 2) (- 0 1)) (< ($generated@@39 0) ($generated@@39 1))))))))
(let (($generated@@169  (=> (and ($generated@@83 $generated@@165) ($generated@@166 $generated@@165)) (=> (and (and (and ($generated@@32 $generated@@28 $generated@@167 ($generated@@33 $generated)) ($generated@@59 $generated@@28 $generated@@167 ($generated@@33 $generated) $generated@@165)) true) (and (= 1 $generated@@22) (= (ControlFlow 0 4) 2))) $generated@@168))))
$generated@@169)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
