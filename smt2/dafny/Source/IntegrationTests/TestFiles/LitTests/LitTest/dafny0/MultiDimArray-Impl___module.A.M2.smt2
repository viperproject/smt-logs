(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun alloc () T@U)
(declare-fun allocName () T@U)
(declare-fun Tagclass._System.array3? () T@U)
(declare-fun Tagclass._System.array3 () T@U)
(declare-fun class._module.A? () T@U)
(declare-fun Tagclass._module.A? () T@U)
(declare-fun Tagclass._module.A () T@U)
(declare-fun tytagFamily$array3 () T@U)
(declare-fun tytagFamily$A () T@U)
(declare-fun field$f () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun FDim (T@U) Int)
(declare-fun Tag (T@U) T@U)
(declare-fun DeclName (T@U) T@U)
(declare-fun _System.array3.Length0 (T@U) Int)
(declare-fun Tclass._System.array3? (T@U) T@U)
(declare-fun null () T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun _System.array3.Length1 (T@U) Int)
(declare-fun _System.array3.Length2 (T@U) Int)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun Tclass._System.array3 (T@U) T@U)
(declare-fun Tclass._module.A? () T@U)
(declare-fun Tclass._module.A () T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun _module.A.f () T@U)
(declare-fun FieldOfDecl (T@U T@U) T@U)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun MultiIndexField (T@U Int) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun TagFamily (T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun DeclType (T@U) T@U)
(declare-fun IndexField (Int) T@U)
(declare-fun IndexField_Inverse (T@U) Int)
(declare-fun Tclass._System.array3?_0 (T@U) T@U)
(declare-fun Tclass._System.array3_0 (T@U) T@U)
(declare-fun MultiIndexField_Inverse0 (T@U) T@U)
(declare-fun MultiIndexField_Inverse1 (T@U) Int)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt alloc allocName Tagclass._System.array3? Tagclass._System.array3 class._module.A? Tagclass._module.A? Tagclass._module.A tytagFamily$array3 tytagFamily$A field$f)
)
(assert (= (FDim alloc) 0))
(assert (= (Tag TInt) TagInt))
(assert (= (DeclName alloc) allocName))
(assert (forall ((_System.array3$arg T@U) ($o T@U) ) (!  (=> (and (or (not (= $o null)) (not true)) (= (dtype $o) (Tclass._System.array3? _System.array3$arg))) ($Is intType (int_2_U (_System.array3.Length0 $o)) TInt))
 :pattern ( (_System.array3.Length0 $o) (Tclass._System.array3? _System.array3$arg))
)))
(assert (forall ((_System.array3$arg@@0 T@U) ($o@@0 T@U) ) (!  (=> (and (or (not (= $o@@0 null)) (not true)) (= (dtype $o@@0) (Tclass._System.array3? _System.array3$arg@@0))) ($Is intType (int_2_U (_System.array3.Length1 $o@@0)) TInt))
 :pattern ( (_System.array3.Length1 $o@@0) (Tclass._System.array3? _System.array3$arg@@0))
)))
(assert (forall ((_System.array3$arg@@1 T@U) ($o@@1 T@U) ) (!  (=> (and (or (not (= $o@@1 null)) (not true)) (= (dtype $o@@1) (Tclass._System.array3? _System.array3$arg@@1))) ($Is intType (int_2_U (_System.array3.Length2 $o@@1)) TInt))
 :pattern ( (_System.array3.Length2 $o@@1) (Tclass._System.array3? _System.array3$arg@@1))
)))
(assert (= (Ctor refType) 3))
(assert (forall ((_System.array3$arg@@2 T@U) (|c#0| T@U) ($h T@U) ) (! (= ($IsAlloc refType |c#0| (Tclass._System.array3 _System.array3$arg@@2) $h) ($IsAlloc refType |c#0| (Tclass._System.array3? _System.array3$arg@@2) $h))
 :pattern ( ($IsAlloc refType |c#0| (Tclass._System.array3 _System.array3$arg@@2) $h))
 :pattern ( ($IsAlloc refType |c#0| (Tclass._System.array3? _System.array3$arg@@2) $h))
)))
(assert (forall (($o@@2 T@U) ) (! (= ($Is refType $o@@2 Tclass._module.A?)  (or (= $o@@2 null) (= (dtype $o@@2) Tclass._module.A?)))
 :pattern ( ($Is refType $o@@2 Tclass._module.A?))
)))
(assert (forall ((|c#0@@0| T@U) ($h@@0 T@U) ) (! (= ($IsAlloc refType |c#0@@0| Tclass._module.A $h@@0) ($IsAlloc refType |c#0@@0| Tclass._module.A? $h@@0))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass._module.A $h@@0))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass._module.A? $h@@0))
)))
(assert  (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 4)) (= (Ctor BoxType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 6))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((_System.array3$arg@@3 T@U) ($o@@3 T@U) ($h@@1 T@U) ) (! (= ($IsAlloc refType $o@@3 (Tclass._System.array3? _System.array3$arg@@3) $h@@1)  (or (= $o@@3 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@1 $o@@3) alloc)))))
 :pattern ( ($IsAlloc refType $o@@3 (Tclass._System.array3? _System.array3$arg@@3) $h@@1))
)))
(assert (= (FDim _module.A.f) 0))
(assert (= (FieldOfDecl class._module.A? field$f) _module.A.f))
(assert  (not ($IsGhostField _module.A.f)))
(assert (forall (($o@@4 T@U) ($h@@2 T@U) ) (! (= ($IsAlloc refType $o@@4 Tclass._module.A? $h@@2)  (or (= $o@@4 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o@@4) alloc)))))
 :pattern ( ($IsAlloc refType $o@@4 Tclass._module.A? $h@@2))
)))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((f T@U) (i Int) ) (! (= (FDim (MultiIndexField f i)) (+ (FDim f) 1))
 :pattern ( (MultiIndexField f i))
)))
(assert ($IsGhostField alloc))
(assert (forall ((_System.array3$arg@@4 T@U) (|c#0@@1| T@U) ) (! (= ($Is refType |c#0@@1| (Tclass._System.array3 _System.array3$arg@@4))  (and ($Is refType |c#0@@1| (Tclass._System.array3? _System.array3$arg@@4)) (or (not (= |c#0@@1| null)) (not true))))
 :pattern ( ($Is refType |c#0@@1| (Tclass._System.array3 _System.array3$arg@@4)))
 :pattern ( ($Is refType |c#0@@1| (Tclass._System.array3? _System.array3$arg@@4)))
)))
(assert (forall ((v T@U) (t T@U) (h@@0 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v) t h@@0) ($IsAlloc T@@1 v t h@@0))
 :pattern ( ($IsAllocBox ($Box T@@1 v) t h@@0))
)))
(assert (forall ((h@@1 T@U) (k@@0 T@U) (bx T@U) (t@@0 T@U) ) (!  (=> ($HeapSucc h@@1 k@@0) (=> ($IsAllocBox bx t@@0 h@@1) ($IsAllocBox bx t@@0 k@@0)))
 :pattern ( ($HeapSucc h@@1 k@@0) ($IsAllocBox bx t@@0 h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@1 T@U) (v@@0 T@U) (t@@1 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@2 k@@1) (=> ($IsAlloc T@@2 v@@0 t@@1 h@@2) ($IsAlloc T@@2 v@@0 t@@1 k@@1)))
 :pattern ( ($HeapSucc h@@2 k@@1) ($IsAlloc T@@2 v@@0 t@@1 h@@2))
)))
(assert (forall ((_System.array3$arg@@5 T@U) ) (!  (and (= (Tag (Tclass._System.array3? _System.array3$arg@@5)) Tagclass._System.array3?) (= (TagFamily (Tclass._System.array3? _System.array3$arg@@5)) tytagFamily$array3))
 :pattern ( (Tclass._System.array3? _System.array3$arg@@5))
)))
(assert (forall ((_System.array3$arg@@6 T@U) ) (!  (and (= (Tag (Tclass._System.array3 _System.array3$arg@@6)) Tagclass._System.array3) (= (TagFamily (Tclass._System.array3 _System.array3$arg@@6)) tytagFamily$array3))
 :pattern ( (Tclass._System.array3 _System.array3$arg@@6))
)))
(assert  (and (forall ((t0@@0 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 t2 (MapType1Store t0@@0 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| T@U) ($o@@5 T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@5 $f))  (=> (and (or (not (= $o@@5 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@5) |l#2|)))) (= $o@@5 |l#3|)))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@5 $f))
)))
(assert (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 Tclass._module.A?) (and (= ($Box refType ($Unbox refType bx@@0)) bx@@0) ($Is refType ($Unbox refType bx@@0) Tclass._module.A?)))
 :pattern ( ($IsBox bx@@0 Tclass._module.A?))
)))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 Tclass._module.A) (and (= ($Box refType ($Unbox refType bx@@1)) bx@@1) ($Is refType ($Unbox refType bx@@1) Tclass._module.A)))
 :pattern ( ($IsBox bx@@1 Tclass._module.A))
)))
(assert (forall ((_System.array3$arg@@7 T@U) ($o@@6 T@U) ) (! (= ($Is refType $o@@6 (Tclass._System.array3? _System.array3$arg@@7))  (or (= $o@@6 null) (= (dtype $o@@6) (Tclass._System.array3? _System.array3$arg@@7))))
 :pattern ( ($Is refType $o@@6 (Tclass._System.array3? _System.array3$arg@@7)))
)))
(assert (forall ((|c#0@@2| T@U) ) (! (= ($Is refType |c#0@@2| Tclass._module.A)  (and ($Is refType |c#0@@2| Tclass._module.A?) (or (not (= |c#0@@2| null)) (not true))))
 :pattern ( ($Is refType |c#0@@2| Tclass._module.A))
 :pattern ( ($Is refType |c#0@@2| Tclass._module.A?))
)))
(assert (forall (($h@@3 T@U) ($o@@7 T@U) ) (!  (=> (and ($IsGoodHeap $h@@3) (and (or (not (= $o@@7 null)) (not true)) (= (dtype $o@@7) Tclass._module.A?))) ($Is refType ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@3 $o@@7) _module.A.f)) (Tclass._System.array3 Tclass._module.A?)))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@3 $o@@7) _module.A.f)))
)))
(assert (forall (($h@@4 T@U) ($o@@8 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@4) (and (or (not (= $o@@8 null)) (not true)) (= (dtype $o@@8) Tclass._module.A?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@4 $o@@8) alloc)))) ($IsAlloc refType ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@4 $o@@8) _module.A.f)) (Tclass._System.array3 Tclass._module.A?) $h@@4))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@4 $o@@8) _module.A.f)))
)))
(assert (forall ((a T@U) (b T@U) (c T@U) ) (!  (=> (or (not (= a c)) (not true)) (=> (and ($HeapSucc a b) ($HeapSucc b c)) ($HeapSucc a c)))
 :pattern ( ($HeapSucc a b) ($HeapSucc b c))
)))
(assert (forall ((cl T@U) (nm T@U) ) (!  (and (= (DeclType (FieldOfDecl cl nm)) cl) (= (DeclName (FieldOfDecl cl nm)) nm))
 :pattern ( (FieldOfDecl cl nm))
)))
(assert (forall ((bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 TInt) (and (= ($Box intType ($Unbox intType bx@@2)) bx@@2) ($Is intType ($Unbox intType bx@@2) TInt)))
 :pattern ( ($IsBox bx@@2 TInt))
)))
(assert (forall ((v@@1 T@U) (t@@2 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@1) t@@2) ($Is T@@3 v@@1 t@@2))
 :pattern ( ($IsBox ($Box T@@3 v@@1) t@@2))
)))
(assert (forall ((o@@0 T@U) ) (! (<= 0 (_System.array3.Length0 o@@0))
 :pattern ( (_System.array3.Length0 o@@0))
)))
(assert (forall ((o@@1 T@U) ) (! (<= 0 (_System.array3.Length1 o@@1))
 :pattern ( (_System.array3.Length1 o@@1))
)))
(assert (forall ((o@@2 T@U) ) (! (<= 0 (_System.array3.Length2 o@@2))
 :pattern ( (_System.array3.Length2 o@@2))
)))
(assert (forall ((i@@0 Int) ) (! (= (FDim (IndexField i@@0)) 1)
 :pattern ( (IndexField i@@0))
)))
(assert (forall ((i@@1 Int) ) (! (= (IndexField_Inverse (IndexField i@@1)) i@@1)
 :pattern ( (IndexField i@@1))
)))
(assert (forall ((_System.array3$arg@@8 T@U) ) (! (= (Tclass._System.array3?_0 (Tclass._System.array3? _System.array3$arg@@8)) _System.array3$arg@@8)
 :pattern ( (Tclass._System.array3? _System.array3$arg@@8))
)))
(assert (forall ((_System.array3$arg@@9 T@U) ) (! (= (Tclass._System.array3_0 (Tclass._System.array3 _System.array3$arg@@9)) _System.array3$arg@@9)
 :pattern ( (Tclass._System.array3 _System.array3$arg@@9))
)))
(assert (forall ((x@@5 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@5)) x@@5)
 :pattern ( ($Box T@@4 x@@5))
)))
(assert (forall ((_System.array3$arg@@10 T@U) ($h@@5 T@U) ($o@@9 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@5) (and (or (not (= $o@@9 null)) (not true)) (= (dtype $o@@9) (Tclass._System.array3? _System.array3$arg@@10)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@5 $o@@9) alloc)))) ($IsAlloc intType (int_2_U (_System.array3.Length0 $o@@9)) TInt $h@@5))
 :pattern ( (_System.array3.Length0 $o@@9) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@5 $o@@9) alloc)) (Tclass._System.array3? _System.array3$arg@@10))
)))
(assert (forall ((_System.array3$arg@@11 T@U) ($h@@6 T@U) ($o@@10 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@6) (and (or (not (= $o@@10 null)) (not true)) (= (dtype $o@@10) (Tclass._System.array3? _System.array3$arg@@11)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@6 $o@@10) alloc)))) ($IsAlloc intType (int_2_U (_System.array3.Length1 $o@@10)) TInt $h@@6))
 :pattern ( (_System.array3.Length1 $o@@10) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@6 $o@@10) alloc)) (Tclass._System.array3? _System.array3$arg@@11))
)))
(assert (forall ((_System.array3$arg@@12 T@U) ($h@@7 T@U) ($o@@11 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@7) (and (or (not (= $o@@11 null)) (not true)) (= (dtype $o@@11) (Tclass._System.array3? _System.array3$arg@@12)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@7 $o@@11) alloc)))) ($IsAlloc intType (int_2_U (_System.array3.Length2 $o@@11)) TInt $h@@7))
 :pattern ( (_System.array3.Length2 $o@@11) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@7 $o@@11) alloc)) (Tclass._System.array3? _System.array3$arg@@12))
)))
(assert (forall ((_System.array3$arg@@13 T@U) ($h@@8 T@U) ($o@@12 T@U) ($i0 Int) ($i1 Int) ($i2 Int) ) (!  (=> (and (and ($IsGoodHeap $h@@8) (and (or (not (= $o@@12 null)) (not true)) (= (dtype $o@@12) (Tclass._System.array3? _System.array3$arg@@13)))) (and (and (and (<= 0 $i0) (< $i0 (_System.array3.Length0 $o@@12))) (and (<= 0 $i1) (< $i1 (_System.array3.Length1 $o@@12)))) (and (<= 0 $i2) (< $i2 (_System.array3.Length2 $o@@12))))) ($IsBox (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@8 $o@@12) (MultiIndexField (MultiIndexField (IndexField $i0) $i1) $i2)) _System.array3$arg@@13))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@8 $o@@12) (MultiIndexField (MultiIndexField (IndexField $i0) $i1) $i2)) (Tclass._System.array3? _System.array3$arg@@13))
)))
(assert (forall ((f@@0 T@U) (i@@2 Int) ) (!  (and (= (MultiIndexField_Inverse0 (MultiIndexField f@@0 i@@2)) f@@0) (= (MultiIndexField_Inverse1 (MultiIndexField f@@0 i@@2)) i@@2))
 :pattern ( (MultiIndexField f@@0 i@@2))
)))
(assert (forall ((_System.array3$arg@@14 T@U) (bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 (Tclass._System.array3? _System.array3$arg@@14)) (and (= ($Box refType ($Unbox refType bx@@3)) bx@@3) ($Is refType ($Unbox refType bx@@3) (Tclass._System.array3? _System.array3$arg@@14))))
 :pattern ( ($IsBox bx@@3 (Tclass._System.array3? _System.array3$arg@@14)))
)))
(assert (forall ((_System.array3$arg@@15 T@U) (bx@@4 T@U) ) (!  (=> ($IsBox bx@@4 (Tclass._System.array3 _System.array3$arg@@15)) (and (= ($Box refType ($Unbox refType bx@@4)) bx@@4) ($Is refType ($Unbox refType bx@@4) (Tclass._System.array3 _System.array3$arg@@15))))
 :pattern ( ($IsBox bx@@4 (Tclass._System.array3 _System.array3$arg@@15)))
)))
(assert (forall ((h@@3 T@U) (r T@U) (f@@1 T@U) (x@@6 T@U) ) (!  (=> ($IsGoodHeap (MapType0Store refType (MapType0Type FieldType BoxType) h@@3 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@3 r) f@@1 x@@6))) ($HeapSucc h@@3 (MapType0Store refType (MapType0Type FieldType BoxType) h@@3 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@3 r) f@@1 x@@6))))
 :pattern ( (MapType0Store refType (MapType0Type FieldType BoxType) h@@3 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@3 r) f@@1 x@@6)))
)))
(assert (= (Tag Tclass._module.A?) Tagclass._module.A?))
(assert (= (TagFamily Tclass._module.A?) tytagFamily$A))
(assert (= (Tag Tclass._module.A) Tagclass._module.A))
(assert (= (TagFamily Tclass._module.A) tytagFamily$A))
(assert (forall ((x@@7 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@7))) (Lit BoxType ($Box intType (int_2_U x@@7))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@7))))
)))
(assert (forall ((x@@8 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@8)) (Lit BoxType ($Box T@@5 x@@8)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@8)))
)))
(assert (forall ((_System.array3$arg@@16 T@U) ($h@@9 T@U) ($o@@13 T@U) ($i0@@0 Int) ($i1@@0 Int) ($i2@@0 Int) ) (!  (=> (and (and (and ($IsGoodHeap $h@@9) (and (or (not (= $o@@13 null)) (not true)) (= (dtype $o@@13) (Tclass._System.array3? _System.array3$arg@@16)))) (and (and (and (<= 0 $i0@@0) (< $i0@@0 (_System.array3.Length0 $o@@13))) (and (<= 0 $i1@@0) (< $i1@@0 (_System.array3.Length1 $o@@13)))) (and (<= 0 $i2@@0) (< $i2@@0 (_System.array3.Length2 $o@@13))))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@9 $o@@13) alloc)))) ($IsAllocBox (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@9 $o@@13) (MultiIndexField (MultiIndexField (IndexField $i0@@0) $i1@@0) $i2@@0)) _System.array3$arg@@16 $h@@9))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@9 $o@@13) (MultiIndexField (MultiIndexField (IndexField $i0@@0) $i1@@0) $i2@@0)) (Tclass._System.array3? _System.array3$arg@@16))
)))
(assert (forall ((h@@4 T@U) (v@@2 T@U) ) (! ($IsAlloc intType v@@2 TInt h@@4)
 :pattern ( ($IsAlloc intType v@@2 TInt h@@4))
)))
(assert (forall ((v@@3 T@U) ) (! ($Is intType v@@3 TInt)
 :pattern ( ($Is intType v@@3 TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |k#0| () Int)
(declare-fun $Heap () T@U)
(declare-fun this () T@U)
(declare-fun |j#0| () Int)
(declare-fun |save#0_0_0@0| () T@U)
(declare-fun |i#0| () Int)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun |val#0| () T@U)
(declare-fun |save#1_0_0_0@0| () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |save#0_0_0| () T@U)
(declare-fun |save#1_0_0_0| () T@U)
(declare-fun $FunctionContextHeight () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 44) (let ((anon12_Else_correct true))
(let ((anon12_Then_correct  (=> (< |k#0| (_System.array3.Length0 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.A.f)))) (and (=> (= (ControlFlow 0 26) (- 0 39)) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.A.f)) null)) (not true))) (=> (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.A.f)) null)) (not true)) (and (=> (= (ControlFlow 0 26) (- 0 38)) (and (<= 0 |k#0|) (< |k#0| (_System.array3.Length0 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.A.f)))))) (=> (and (<= 0 |k#0|) (< |k#0| (_System.array3.Length0 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.A.f))))) (and (=> (= (ControlFlow 0 26) (- 0 37)) (and (<= 0 |j#0|) (< |j#0| (_System.array3.Length1 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.A.f)))))) (=> (and (<= 0 |j#0|) (< |j#0| (_System.array3.Length1 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.A.f))))) (and (=> (= (ControlFlow 0 26) (- 0 36)) (and (<= 0 |k#0|) (< |k#0| (_System.array3.Length2 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.A.f)))))) (=> (and (<= 0 |k#0|) (< |k#0| (_System.array3.Length2 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.A.f))))) (=> (= |save#0_0_0@0| ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.A.f))) (MultiIndexField (MultiIndexField (IndexField |k#0|) |j#0|) |k#0|)))) (and (=> (= (ControlFlow 0 26) (- 0 35)) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.A.f)) null)) (not true))) (=> (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.A.f)) null)) (not true)) (and (=> (= (ControlFlow 0 26) (- 0 34)) (and (<= 0 |i#0|) (< |i#0| (_System.array3.Length0 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.A.f)))))) (=> (and (<= 0 |i#0|) (< |i#0| (_System.array3.Length0 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.A.f))))) (and (=> (= (ControlFlow 0 26) (- 0 33)) (and (<= 0 |j#0|) (< |j#0| (_System.array3.Length1 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.A.f)))))) (=> (and (<= 0 |j#0|) (< |j#0| (_System.array3.Length1 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.A.f))))) (and (=> (= (ControlFlow 0 26) (- 0 32)) (and (<= 0 |k#0|) (< |k#0| (_System.array3.Length2 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.A.f)))))) (=> (and (<= 0 |k#0|) (< |k#0| (_System.array3.Length2 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.A.f))))) (and (=> (= (ControlFlow 0 26) (- 0 31)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.A.f)) (MultiIndexField (MultiIndexField (IndexField |i#0|) |j#0|) |k#0|)))) (=> (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.A.f)) (MultiIndexField (MultiIndexField (IndexField |i#0|) |j#0|) |k#0|))) (=> (and (= $Heap@1 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.A.f)) (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.A.f))) (MultiIndexField (MultiIndexField (IndexField |i#0|) |j#0|) |k#0|) ($Box refType |val#0|)))) ($IsGoodHeap $Heap@1)) (and (=> (= (ControlFlow 0 26) (- 0 30)) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 this) _module.A.f)) null)) (not true))) (=> (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 this) _module.A.f)) null)) (not true)) (and (=> (= (ControlFlow 0 26) (- 0 29)) (and (<= 0 |k#0|) (< |k#0| (_System.array3.Length0 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 this) _module.A.f)))))) (and (=> (= (ControlFlow 0 26) (- 0 28)) (and (<= 0 |j#0|) (< |j#0| (_System.array3.Length1 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 this) _module.A.f)))))) (and (=> (= (ControlFlow 0 26) (- 0 27)) (and (<= 0 |k#0|) (< |k#0| (_System.array3.Length2 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 this) _module.A.f)))))) (=> (= (ControlFlow 0 26) (- 0 25)) (= |save#0_0_0@0| ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 this) _module.A.f))) (MultiIndexField (MultiIndexField (IndexField |k#0|) |j#0|) |k#0|)))))))))))))))))))))))))))))))))
(let ((anon11_Then_correct  (and (=> (= (ControlFlow 0 41) (- 0 42)) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.A.f)) null)) (not true))) (=> (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.A.f)) null)) (not true)) (and (=> (= (ControlFlow 0 41) 26) anon12_Then_correct) (=> (= (ControlFlow 0 41) 40) anon12_Else_correct))))))
(let ((anon15_Else_correct true))
(let ((anon15_Then_correct  (=> (< |k#0| (_System.array3.Length0 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.A.f)))) (and (=> (= (ControlFlow 0 3) (- 0 16)) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.A.f)) null)) (not true))) (=> (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.A.f)) null)) (not true)) (and (=> (= (ControlFlow 0 3) (- 0 15)) (and (<= 0 |k#0|) (< |k#0| (_System.array3.Length0 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.A.f)))))) (=> (and (<= 0 |k#0|) (< |k#0| (_System.array3.Length0 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.A.f))))) (and (=> (= (ControlFlow 0 3) (- 0 14)) (and (<= 0 |j#0|) (< |j#0| (_System.array3.Length1 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.A.f)))))) (=> (and (<= 0 |j#0|) (< |j#0| (_System.array3.Length1 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.A.f))))) (and (=> (= (ControlFlow 0 3) (- 0 13)) (and (<= 0 |k#0|) (< |k#0| (_System.array3.Length2 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.A.f)))))) (=> (and (<= 0 |k#0|) (< |k#0| (_System.array3.Length2 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.A.f))))) (=> (= |save#1_0_0_0@0| ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.A.f))) (MultiIndexField (MultiIndexField (IndexField |k#0|) |j#0|) |k#0|)))) (and (=> (= (ControlFlow 0 3) (- 0 12)) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.A.f)) null)) (not true))) (=> (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.A.f)) null)) (not true)) (and (=> (= (ControlFlow 0 3) (- 0 11)) (and (<= 0 |i#0|) (< |i#0| (_System.array3.Length0 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.A.f)))))) (=> (and (<= 0 |i#0|) (< |i#0| (_System.array3.Length0 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.A.f))))) (and (=> (= (ControlFlow 0 3) (- 0 10)) (and (<= 0 |j#0|) (< |j#0| (_System.array3.Length1 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.A.f)))))) (=> (and (<= 0 |j#0|) (< |j#0| (_System.array3.Length1 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.A.f))))) (and (=> (= (ControlFlow 0 3) (- 0 9)) (and (<= 0 |k#0|) (< |k#0| (_System.array3.Length2 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.A.f)))))) (=> (and (<= 0 |k#0|) (< |k#0| (_System.array3.Length2 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.A.f))))) (and (=> (= (ControlFlow 0 3) (- 0 8)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.A.f)) (MultiIndexField (MultiIndexField (IndexField |i#0|) |j#0|) |k#0|)))) (=> (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.A.f)) (MultiIndexField (MultiIndexField (IndexField |i#0|) |j#0|) |k#0|))) (=> (and (= $Heap@0 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.A.f)) (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.A.f))) (MultiIndexField (MultiIndexField (IndexField |i#0|) |j#0|) |k#0|) ($Box refType |val#0|)))) ($IsGoodHeap $Heap@0)) (and (=> (= (ControlFlow 0 3) (- 0 7)) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 this) _module.A.f)) null)) (not true))) (=> (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 this) _module.A.f)) null)) (not true)) (and (=> (= (ControlFlow 0 3) (- 0 6)) (and (<= 0 |k#0|) (< |k#0| (_System.array3.Length0 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 this) _module.A.f)))))) (and (=> (= (ControlFlow 0 3) (- 0 5)) (and (<= 0 |j#0|) (< |j#0| (_System.array3.Length1 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 this) _module.A.f)))))) (and (=> (= (ControlFlow 0 3) (- 0 4)) (and (<= 0 |k#0|) (< |k#0| (_System.array3.Length2 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 this) _module.A.f)))))) (=> (= (ControlFlow 0 3) (- 0 2)) (= |save#1_0_0_0@0| ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 this) _module.A.f))) (MultiIndexField (MultiIndexField (IndexField |k#0|) |j#0|) |k#0|)))))))))))))))))))))))))))))))))
(let ((anon14_Then_correct  (=> (and (< |k#0| (_System.array3.Length0 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.A.f)))) (or (not (= |k#0| |i#0|)) (not true))) (and (=> (= (ControlFlow 0 18) (- 0 19)) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.A.f)) null)) (not true))) (=> (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.A.f)) null)) (not true)) (and (=> (= (ControlFlow 0 18) 3) anon15_Then_correct) (=> (= (ControlFlow 0 18) 17) anon15_Else_correct)))))))
(let ((anon14_Else_correct true))
(let ((anon6_correct  (and (=> (= (ControlFlow 0 20) 18) anon14_Then_correct) (=> (= (ControlFlow 0 20) 1) anon14_Else_correct))))
(let ((anon13_Else_correct  (=> (and (<= (_System.array3.Length0 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.A.f))) |k#0|) (= (ControlFlow 0 22) 20)) anon6_correct)))
(let ((anon13_Then_correct  (=> (and (< |k#0| (_System.array3.Length0 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.A.f)))) (= (ControlFlow 0 21) 20)) anon6_correct)))
(let ((anon11_Else_correct  (and (=> (= (ControlFlow 0 23) (- 0 24)) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.A.f)) null)) (not true))) (=> (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.A.f)) null)) (not true)) (and (=> (= (ControlFlow 0 23) 21) anon13_Then_correct) (=> (= (ControlFlow 0 23) 22) anon13_Else_correct))))))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.A.f)))) (and (=> (= (ControlFlow 0 43) 41) anon11_Then_correct) (=> (= (ControlFlow 0 43) 23) anon11_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (=> (and (and (or (not (= this null)) (not true)) (and ($Is refType this Tclass._module.A) ($IsAlloc refType this Tclass._module.A $Heap))) (and ($Is refType |val#0| Tclass._module.A) ($IsAlloc refType |val#0| Tclass._module.A $Heap))) (=> (and (and (and (and ($Is refType |save#0_0_0| Tclass._module.A?) ($IsAlloc refType |save#0_0_0| Tclass._module.A? $Heap)) true) (and (and ($Is refType |save#1_0_0_0| Tclass._module.A?) ($IsAlloc refType |save#1_0_0_0| Tclass._module.A? $Heap)) true)) (and (and (and (= 1 $FunctionContextHeight) (<= (LitInt 0) |i#0|)) (and (< |i#0| (_System.array3.Length0 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.A.f)))) (<= (LitInt 0) |j#0|))) (and (and (< |j#0| (_System.array3.Length1 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.A.f)))) (<= (LitInt 0) |k#0|)) (and (< |k#0| (_System.array3.Length2 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.A.f)))) (= (ControlFlow 0 44) 43))))) anon0_correct)))))
PreconditionGeneratedEntry_correct))))))))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 26) (- 25))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
