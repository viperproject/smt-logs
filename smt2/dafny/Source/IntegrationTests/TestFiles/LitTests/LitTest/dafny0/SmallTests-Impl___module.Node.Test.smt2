(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 (T@T) Int)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (T@U) Bool)
(declare-fun $generated@@13 (Int) T@U)
(declare-fun $generated@@14 (T@U) Int)
(declare-fun $generated@@15 (Real) T@U)
(declare-fun $generated@@16 (T@U) Real)
(declare-fun $generated@@23 (T@U) Int)
(declare-fun $generated@@24 (T@U) T@U)
(declare-fun $generated@@25 (T@U T@U) T@U)
(declare-fun $generated@@26 (T@U T@U) Bool)
(declare-fun $generated@@35 (T@U T@U) T@U)
(declare-fun $generated@@39 () T@U)
(declare-fun $generated@@41 (T@T T@U T@U) Bool)
(declare-fun $generated@@42 () T@T)
(declare-fun $generated@@43 () T@U)
(declare-fun $generated@@44 () T@U)
(declare-fun $generated@@45 (T@U) T@U)
(declare-fun $generated@@50 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@51 () T@U)
(declare-fun $generated@@54 () T@U)
(declare-fun $generated@@55 (T@U T@U) T@U)
(declare-fun $generated@@56 (T@U) Bool)
(declare-fun $generated@@57 (T@T T@U) T@U)
(declare-fun $generated@@58 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@59 () T@T)
(declare-fun $generated@@60 () T@T)
(declare-fun $generated@@61 (T@T T@T) T@T)
(declare-fun $generated@@62 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@63 (T@T) T@T)
(declare-fun $generated@@64 (T@T) T@T)
(declare-fun $generated@@84 (T@T T@U) T@U)
(declare-fun $generated@@87 () T@T)
(declare-fun $generated@@88 (T@U) T@U)
(declare-fun $generated@@89 (T@U T@U) Bool)
(declare-fun $generated@@93 (T@U T@U T@U) Bool)
(declare-fun $generated@@98 (T@U) Bool)
(declare-fun $generated@@106 (T@U T@U) Bool)
(declare-fun $generated@@109 (T@U) T@U)
(declare-fun $generated@@115 (T@U T@U T@U T@U) Bool)
(declare-fun $generated@@116 (T@U) T@U)
(declare-fun $generated@@125 () Int)
(declare-fun $generated@@126 (T@U T@U T@U) Bool)
(declare-fun $generated@@131 (T@U) T@U)
(declare-fun $generated@@133 (T@U) T@U)
(declare-fun $generated@@137 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@138 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@139 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@173 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@7 $generated@@8) 0) (= ($generated@@7 $generated@@9) 1)) (= ($generated@@7 $generated@@10) 2)) (forall (($generated@@17 Bool) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Int) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@16 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 T@U) ) (! (= ($generated@@15 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6)
)
(assert (= ($generated@@23 $generated@@0) 0))
(assert (= ($generated@@24 $generated@@0) $generated@@1))
(assert (forall (($generated@@27 T@U) ($generated@@28 T@U) ) (! ($generated@@26 ($generated@@25 $generated@@27 $generated@@28) $generated@@28)
 :pattern ( ($generated@@25 $generated@@27 $generated@@28))
)))
(assert (forall (($generated@@29 T@U) ($generated@@30 T@U) ($generated@@31 T@U) ) (!  (=> ($generated@@26 $generated@@29 $generated@@31) ($generated@@26 ($generated@@25 $generated@@29 $generated@@30) $generated@@31))
 :pattern ( ($generated@@25 $generated@@29 $generated@@30) ($generated@@26 $generated@@29 $generated@@31))
)))
(assert (forall (($generated@@32 T@U) ($generated@@33 T@U) ($generated@@34 T@U) ) (! (= ($generated@@26 ($generated@@25 $generated@@32 $generated@@33) $generated@@34)  (or (= $generated@@34 $generated@@33) ($generated@@26 $generated@@32 $generated@@34)))
 :pattern ( ($generated@@26 ($generated@@25 $generated@@32 $generated@@33) $generated@@34))
)))
(assert (forall (($generated@@36 T@U) ($generated@@37 T@U) ($generated@@38 T@U) ) (!  (=> ($generated@@26 $generated@@37 $generated@@38) (not ($generated@@26 ($generated@@35 $generated@@36 $generated@@37) $generated@@38)))
 :pattern ( ($generated@@35 $generated@@36 $generated@@37) ($generated@@26 $generated@@37 $generated@@38))
)))
(assert (forall (($generated@@40 T@U) ) (!  (not ($generated@@26 $generated@@39 $generated@@40))
 :pattern ( ($generated@@26 $generated@@39 $generated@@40))
)))
(assert (= ($generated@@7 $generated@@42) 3))
(assert (forall (($generated@@46 T@U) ) (! (= ($generated@@41 $generated@@42 $generated@@46 $generated@@43)  (or (= $generated@@46 $generated@@44) (= ($generated@@45 $generated@@46) $generated@@43)))
 :pattern ( ($generated@@41 $generated@@42 $generated@@46 $generated@@43))
)))
(assert (forall (($generated@@47 T@U) ($generated@@48 T@U) ($generated@@49 T@U) ) (! (= ($generated@@26 ($generated@@35 $generated@@47 $generated@@48) $generated@@49)  (and ($generated@@26 $generated@@47 $generated@@49) (not ($generated@@26 $generated@@48 $generated@@49))))
 :pattern ( ($generated@@26 ($generated@@35 $generated@@47 $generated@@48) $generated@@49))
)))
(assert (forall (($generated@@52 T@U) ($generated@@53 T@U) ) (! (= ($generated@@50 $generated@@42 $generated@@52 $generated@@51 $generated@@53) ($generated@@50 $generated@@42 $generated@@52 $generated@@43 $generated@@53))
 :pattern ( ($generated@@50 $generated@@42 $generated@@52 $generated@@51 $generated@@53))
 :pattern ( ($generated@@50 $generated@@42 $generated@@52 $generated@@43 $generated@@53))
)))
(assert (= ($generated@@23 $generated@@54) 0))
(assert (= ($generated@@55 $generated@@4 $generated@@6) $generated@@54))
(assert  (not ($generated@@56 $generated@@54)))
(assert  (and (and (and (and (and (and (forall (($generated@@65 T@T) ($generated@@66 T@T) ($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@U) ) (! (= ($generated@@58 $generated@@65 $generated@@66 ($generated@@62 $generated@@65 $generated@@66 $generated@@68 $generated@@69 $generated@@67) $generated@@69) $generated@@67)
 :weight 0
)) (forall (($generated@@70 T@T) ($generated@@71 T@T) ($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@U) ) (!  (or (= $generated@@74 $generated@@75) (= ($generated@@58 $generated@@70 $generated@@71 ($generated@@62 $generated@@70 $generated@@71 $generated@@73 $generated@@74 $generated@@72) $generated@@75) ($generated@@58 $generated@@70 $generated@@71 $generated@@73 $generated@@75)))
 :weight 0
))) (= ($generated@@7 $generated@@59) 4)) (= ($generated@@7 $generated@@60) 5)) (forall (($generated@@76 T@T) ($generated@@77 T@T) ) (= ($generated@@7 ($generated@@61 $generated@@76 $generated@@77)) 6))) (forall (($generated@@78 T@T) ($generated@@79 T@T) ) (! (= ($generated@@63 ($generated@@61 $generated@@78 $generated@@79)) $generated@@78)
 :pattern ( ($generated@@61 $generated@@78 $generated@@79))
))) (forall (($generated@@80 T@T) ($generated@@81 T@T) ) (! (= ($generated@@64 ($generated@@61 $generated@@80 $generated@@81)) $generated@@81)
 :pattern ( ($generated@@61 $generated@@80 $generated@@81))
))))
(assert (forall (($generated@@82 T@U) ($generated@@83 T@U) ) (! (= ($generated@@50 $generated@@42 $generated@@82 $generated@@43 $generated@@83)  (or (= $generated@@82 $generated@@44) ($generated@@12 ($generated@@57 $generated@@8 ($generated@@58 $generated@@59 $generated@@60 ($generated@@58 $generated@@42 ($generated@@61 $generated@@59 $generated@@60) $generated@@83 $generated@@82) $generated@@0)))))
 :pattern ( ($generated@@50 $generated@@42 $generated@@82 $generated@@43 $generated@@83))
)))
(assert (forall (($generated@@85 T@U) ($generated@@86 T@T) ) (! (= ($generated@@84 $generated@@86 ($generated@@57 $generated@@86 $generated@@85)) $generated@@85)
 :pattern ( ($generated@@57 $generated@@86 $generated@@85))
)))
(assert (= ($generated@@7 $generated@@87) 7))
(assert (forall (($generated@@90 T@U) ($generated@@91 T@U) ) (! (= ($generated@@41 $generated@@87 $generated@@90 ($generated@@88 $generated@@91)) (forall (($generated@@92 T@U) ) (!  (=> ($generated@@26 $generated@@90 $generated@@92) ($generated@@89 $generated@@92 $generated@@91))
 :pattern ( ($generated@@26 $generated@@90 $generated@@92))
)))
 :pattern ( ($generated@@41 $generated@@87 $generated@@90 ($generated@@88 $generated@@91)))
)))
(assert ($generated@@56 $generated@@0))
(assert (forall (($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@T) ) (! (= ($generated@@93 ($generated@@84 $generated@@97 $generated@@94) $generated@@95 $generated@@96) ($generated@@50 $generated@@97 $generated@@94 $generated@@95 $generated@@96))
 :pattern ( ($generated@@93 ($generated@@84 $generated@@97 $generated@@94) $generated@@95 $generated@@96))
)))
(assert (forall (($generated@@99 T@U) ($generated@@100 T@U) ) (!  (=> (and ($generated@@98 $generated@@99) (and (or (not (= $generated@@100 $generated@@44)) (not true)) (= ($generated@@45 $generated@@100) $generated@@43))) ($generated@@41 $generated@@42 ($generated@@57 $generated@@42 ($generated@@58 $generated@@59 $generated@@60 ($generated@@58 $generated@@42 ($generated@@61 $generated@@59 $generated@@60) $generated@@99 $generated@@100) $generated@@54)) $generated@@43))
 :pattern ( ($generated@@57 $generated@@42 ($generated@@58 $generated@@59 $generated@@60 ($generated@@58 $generated@@42 ($generated@@61 $generated@@59 $generated@@60) $generated@@99 $generated@@100) $generated@@54)))
)))
(assert (forall (($generated@@101 T@U) ) (!  (=> ($generated@@89 $generated@@101 $generated@@51) (and (= ($generated@@84 $generated@@42 ($generated@@57 $generated@@42 $generated@@101)) $generated@@101) ($generated@@41 $generated@@42 ($generated@@57 $generated@@42 $generated@@101) $generated@@51)))
 :pattern ( ($generated@@89 $generated@@101 $generated@@51))
)))
(assert (forall (($generated@@102 T@U) ) (!  (=> ($generated@@89 $generated@@102 $generated@@43) (and (= ($generated@@84 $generated@@42 ($generated@@57 $generated@@42 $generated@@102)) $generated@@102) ($generated@@41 $generated@@42 ($generated@@57 $generated@@42 $generated@@102) $generated@@43)))
 :pattern ( ($generated@@89 $generated@@102 $generated@@43))
)))
(assert (forall (($generated@@103 T@U) ) (! (= ($generated@@41 $generated@@42 $generated@@103 $generated@@51)  (and ($generated@@41 $generated@@42 $generated@@103 $generated@@43) (or (not (= $generated@@103 $generated@@44)) (not true))))
 :pattern ( ($generated@@41 $generated@@42 $generated@@103 $generated@@51))
 :pattern ( ($generated@@41 $generated@@42 $generated@@103 $generated@@43))
)))
(assert (forall (($generated@@104 T@U) ($generated@@105 T@U) ) (!  (=> (and (and ($generated@@98 $generated@@104) (and (or (not (= $generated@@105 $generated@@44)) (not true)) (= ($generated@@45 $generated@@105) $generated@@43))) ($generated@@12 ($generated@@57 $generated@@8 ($generated@@58 $generated@@59 $generated@@60 ($generated@@58 $generated@@42 ($generated@@61 $generated@@59 $generated@@60) $generated@@104 $generated@@105) $generated@@0)))) ($generated@@50 $generated@@42 ($generated@@57 $generated@@42 ($generated@@58 $generated@@59 $generated@@60 ($generated@@58 $generated@@42 ($generated@@61 $generated@@59 $generated@@60) $generated@@104 $generated@@105) $generated@@54)) $generated@@43 $generated@@104))
 :pattern ( ($generated@@57 $generated@@42 ($generated@@58 $generated@@59 $generated@@60 ($generated@@58 $generated@@42 ($generated@@61 $generated@@59 $generated@@60) $generated@@104 $generated@@105) $generated@@54)))
)))
(assert (forall (($generated@@107 T@U) ($generated@@108 T@U) ) (!  (=> ($generated@@106 $generated@@107 $generated@@108) (= $generated@@107 $generated@@108))
 :pattern ( ($generated@@106 $generated@@107 $generated@@108))
)))
(assert (forall (($generated@@110 T@U) ($generated@@111 T@U) ) (!  (and (= ($generated@@109 ($generated@@55 $generated@@110 $generated@@111)) $generated@@110) (= ($generated@@24 ($generated@@55 $generated@@110 $generated@@111)) $generated@@111))
 :pattern ( ($generated@@55 $generated@@110 $generated@@111))
)))
(assert (forall (($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@T) ) (! (= ($generated@@89 ($generated@@84 $generated@@114 $generated@@112) $generated@@113) ($generated@@41 $generated@@114 $generated@@112 $generated@@113))
 :pattern ( ($generated@@89 ($generated@@84 $generated@@114 $generated@@112) $generated@@113))
)))
(assert (forall (($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (= ($generated@@115 ($generated@@116 $generated@@117) $generated@@118 $generated@@119 $generated@@120) ($generated@@115 $generated@@117 $generated@@118 $generated@@119 $generated@@120))
 :pattern ( ($generated@@115 ($generated@@116 $generated@@117) $generated@@118 $generated@@119 $generated@@120))
)))
(assert (forall (($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ) (! (= ($generated@@50 $generated@@87 $generated@@121 ($generated@@88 $generated@@122) $generated@@123) (forall (($generated@@124 T@U) ) (!  (=> ($generated@@26 $generated@@121 $generated@@124) ($generated@@93 $generated@@124 $generated@@122 $generated@@123))
 :pattern ( ($generated@@26 $generated@@121 $generated@@124))
)))
 :pattern ( ($generated@@50 $generated@@87 $generated@@121 ($generated@@88 $generated@@122) $generated@@123))
)))
(assert  (=> (<= 1 $generated@@125) (forall (($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ) (!  (=> (or ($generated@@126 $generated@@128 $generated@@129 $generated@@130) (and (< 1 $generated@@125) (and (and ($generated@@98 $generated@@128) (and (or (not (= $generated@@129 $generated@@44)) (not true)) (and ($generated@@41 $generated@@42 $generated@@129 $generated@@51) ($generated@@50 $generated@@42 $generated@@129 $generated@@51 $generated@@128)))) ($generated@@41 $generated@@87 $generated@@130 ($generated@@88 $generated@@51))))) (and (=> ($generated@@26 $generated@@130 ($generated@@84 $generated@@42 $generated@@129)) (=> (or (not (= ($generated@@57 $generated@@42 ($generated@@58 $generated@@59 $generated@@60 ($generated@@58 $generated@@42 ($generated@@61 $generated@@59 $generated@@60) $generated@@128 $generated@@129) $generated@@54)) $generated@@44)) (not true)) ($generated@@126 $generated@@128 ($generated@@57 $generated@@42 ($generated@@58 $generated@@59 $generated@@60 ($generated@@58 $generated@@42 ($generated@@61 $generated@@59 $generated@@60) $generated@@128 $generated@@129) $generated@@54)) ($generated@@35 $generated@@130 ($generated@@25 $generated@@39 ($generated@@84 $generated@@42 $generated@@129)))))) (= ($generated@@115 ($generated@@116 $generated@@127) $generated@@128 $generated@@129 $generated@@130)  (and ($generated@@26 $generated@@130 ($generated@@84 $generated@@42 $generated@@129)) (=> (or (not (= ($generated@@57 $generated@@42 ($generated@@58 $generated@@59 $generated@@60 ($generated@@58 $generated@@42 ($generated@@61 $generated@@59 $generated@@60) $generated@@128 $generated@@129) $generated@@54)) $generated@@44)) (not true)) ($generated@@115 $generated@@127 $generated@@128 ($generated@@57 $generated@@42 ($generated@@58 $generated@@59 $generated@@60 ($generated@@58 $generated@@42 ($generated@@61 $generated@@59 $generated@@60) $generated@@128 $generated@@129) $generated@@54)) ($generated@@35 $generated@@130 ($generated@@25 $generated@@39 ($generated@@84 $generated@@42 $generated@@129)))))))))
 :pattern ( ($generated@@115 ($generated@@116 $generated@@127) $generated@@128 $generated@@129 $generated@@130) ($generated@@98 $generated@@128))
))))
(assert (forall (($generated@@132 T@U) ) (! (= ($generated@@131 ($generated@@88 $generated@@132)) $generated@@132)
 :pattern ( ($generated@@88 $generated@@132))
)))
(assert (forall (($generated@@134 T@U) ) (! (= ($generated@@133 ($generated@@88 $generated@@134)) $generated)
 :pattern ( ($generated@@88 $generated@@134))
)))
(assert (forall (($generated@@135 T@U) ($generated@@136 T@T) ) (! (= ($generated@@57 $generated@@136 ($generated@@84 $generated@@136 $generated@@135)) $generated@@135)
 :pattern ( ($generated@@84 $generated@@136 $generated@@135))
)))
(assert  (and (forall (($generated@@140 T@T) ($generated@@141 T@T) ($generated@@142 T@T) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ($generated@@146 T@U) ) (! (= ($generated@@137 $generated@@140 $generated@@141 $generated@@142 ($generated@@139 $generated@@140 $generated@@141 $generated@@142 $generated@@144 $generated@@145 $generated@@146 $generated@@143) $generated@@145 $generated@@146) $generated@@143)
 :weight 0
)) (and (forall (($generated@@147 T@T) ($generated@@148 T@T) ($generated@@149 T@T) ($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 T@U) ($generated@@154 T@U) ($generated@@155 T@U) ) (!  (or (= $generated@@152 $generated@@154) (= ($generated@@137 $generated@@147 $generated@@148 $generated@@149 ($generated@@139 $generated@@147 $generated@@148 $generated@@149 $generated@@151 $generated@@152 $generated@@153 $generated@@150) $generated@@154 $generated@@155) ($generated@@137 $generated@@147 $generated@@148 $generated@@149 $generated@@151 $generated@@154 $generated@@155)))
 :weight 0
)) (forall (($generated@@156 T@T) ($generated@@157 T@T) ($generated@@158 T@T) ($generated@@159 T@U) ($generated@@160 T@U) ($generated@@161 T@U) ($generated@@162 T@U) ($generated@@163 T@U) ($generated@@164 T@U) ) (!  (or (= $generated@@162 $generated@@164) (= ($generated@@137 $generated@@156 $generated@@157 $generated@@158 ($generated@@139 $generated@@156 $generated@@157 $generated@@158 $generated@@160 $generated@@161 $generated@@162 $generated@@159) $generated@@163 $generated@@164) ($generated@@137 $generated@@156 $generated@@157 $generated@@158 $generated@@160 $generated@@163 $generated@@164)))
 :weight 0
)))))
(assert (forall (($generated@@165 T@U) ($generated@@166 T@U) ($generated@@167 T@U) ($generated@@168 Bool) ($generated@@169 T@U) ($generated@@170 T@U) ) (! (= ($generated@@12 ($generated@@137 $generated@@42 $generated@@59 $generated@@8 ($generated@@138 $generated@@165 $generated@@166 $generated@@167 $generated@@168) $generated@@169 $generated@@170))  (=> (and (or (not (= $generated@@169 $generated@@165)) (not true)) ($generated@@12 ($generated@@57 $generated@@8 ($generated@@58 $generated@@59 $generated@@60 ($generated@@58 $generated@@42 ($generated@@61 $generated@@59 $generated@@60) $generated@@166 $generated@@169) $generated@@167)))) $generated@@168))
 :pattern ( ($generated@@137 $generated@@42 $generated@@59 $generated@@8 ($generated@@138 $generated@@165 $generated@@166 $generated@@167 $generated@@168) $generated@@169 $generated@@170))
)))
(assert (forall (($generated@@171 T@U) ($generated@@172 T@U) ) (!  (=> ($generated@@89 $generated@@171 ($generated@@88 $generated@@172)) (and (= ($generated@@84 $generated@@87 ($generated@@57 $generated@@87 $generated@@171)) $generated@@171) ($generated@@41 $generated@@87 ($generated@@57 $generated@@87 $generated@@171) ($generated@@88 $generated@@172))))
 :pattern ( ($generated@@89 $generated@@171 ($generated@@88 $generated@@172)))
)))
(assert (= ($generated@@133 $generated@@51) $generated@@2))
(assert (= ($generated@@173 $generated@@51) $generated@@5))
(assert (= ($generated@@133 $generated@@43) $generated@@3))
(assert (= ($generated@@173 $generated@@43) $generated@@5))
(assert (forall (($generated@@174 T@U) ($generated@@175 T@U) ) (! (= ($generated@@106 $generated@@174 $generated@@175) (forall (($generated@@176 T@U) ) (! (= ($generated@@26 $generated@@174 $generated@@176) ($generated@@26 $generated@@175 $generated@@176))
 :pattern ( ($generated@@26 $generated@@174 $generated@@176))
 :pattern ( ($generated@@26 $generated@@175 $generated@@176))
)))
 :pattern ( ($generated@@106 $generated@@174 $generated@@175))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@177 () T@U)
(declare-fun $generated@@178 () T@U)
(declare-fun $generated@@179 () T@U)
(declare-fun $generated@@180 () T@U)
(declare-fun $generated@@181 () T@U)
(declare-fun $generated@@182 () T@U)
(declare-fun $generated@@183 () T@U)
(declare-fun $generated@@184 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@185  (=> (= $generated@@177 ($generated@@138 $generated@@44 $generated@@178 $generated@@0 false)) (=> (and (and ($generated@@106 $generated@@179 ($generated@@35 $generated@@179 ($generated@@25 $generated@@39 ($generated@@84 $generated@@42 $generated@@180)))) ($generated@@93 ($generated@@84 $generated@@42 $generated@@181) $generated@@43 $generated@@178)) (and ($generated@@50 $generated@@87 $generated@@179 ($generated@@88 $generated@@51) $generated@@178) ($generated@@126 $generated@@178 $generated@@181 $generated@@179))) (=> (and (and (and ($generated@@93 ($generated@@84 $generated@@42 $generated@@181) $generated@@43 $generated@@178) (= $generated@@182 ($generated@@35 $generated@@179 ($generated@@25 $generated@@39 ($generated@@84 $generated@@42 $generated@@180))))) (and ($generated@@50 $generated@@87 $generated@@182 ($generated@@88 $generated@@51) $generated@@178) ($generated@@126 $generated@@178 $generated@@181 ($generated@@35 $generated@@179 ($generated@@25 $generated@@39 ($generated@@84 $generated@@42 $generated@@180)))))) (and (and ($generated@@126 $generated@@178 $generated@@181 $generated@@179) ($generated@@126 $generated@@178 $generated@@181 ($generated@@35 $generated@@179 ($generated@@25 $generated@@39 ($generated@@84 $generated@@42 $generated@@180))))) (= (ControlFlow 0 2) (- 0 1)))) (= ($generated@@115 ($generated@@116 ($generated@@116 $generated@@183)) $generated@@178 $generated@@181 $generated@@179) ($generated@@115 ($generated@@116 ($generated@@116 $generated@@183)) $generated@@178 $generated@@181 ($generated@@35 $generated@@179 ($generated@@25 $generated@@39 ($generated@@84 $generated@@42 $generated@@180))))))))))
(let (($generated@@186  (=> (and ($generated@@98 $generated@@178) ($generated@@184 $generated@@178)) (=> (and (and (and (or (not (= $generated@@181 $generated@@44)) (not true)) (and ($generated@@41 $generated@@42 $generated@@181 $generated@@51) ($generated@@50 $generated@@42 $generated@@181 $generated@@51 $generated@@178))) (and ($generated@@41 $generated@@42 $generated@@180 $generated@@51) ($generated@@50 $generated@@42 $generated@@180 $generated@@51 $generated@@178))) (and (and ($generated@@41 $generated@@87 $generated@@179 ($generated@@88 $generated@@51)) ($generated@@50 $generated@@87 $generated@@179 ($generated@@88 $generated@@51) $generated@@178)) (and (= 2 $generated@@125) (= (ControlFlow 0 3) 2)))) $generated@@185))))
$generated@@186)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
