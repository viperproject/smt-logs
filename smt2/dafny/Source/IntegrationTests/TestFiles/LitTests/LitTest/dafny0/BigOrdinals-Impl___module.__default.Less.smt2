(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U T@U) Bool)
(declare-fun $generated@@0 (T@T) Int)
(declare-fun $generated@@1 () T@T)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 (Bool) T@U)
(declare-fun $generated@@5 (T@U) Bool)
(declare-fun $generated@@6 (Int) T@U)
(declare-fun $generated@@7 (T@U) Int)
(declare-fun $generated@@8 (Real) T@U)
(declare-fun $generated@@9 (T@U) Real)
(declare-fun $generated@@19 (T@T T@U) T@U)
(declare-fun $generated@@22 (T@T T@U) T@U)
(declare-fun $generated@@23 (T@T T@U) T@U)
(declare-fun $generated@@26 (Int) T@U)
(declare-fun $generated@@27 (T@U) Bool)
(declare-fun $generated@@28 (T@U) Int)
(declare-fun $generated@@37 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@38 () T@T)
(declare-fun $generated@@39 () T@T)
(declare-fun $generated@@40 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@41 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@42 () T@T)
(declare-fun $generated@@43 (T@T T@T) T@T)
(declare-fun $generated@@44 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@45 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@46 (T@T) T@T)
(declare-fun $generated@@47 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@0 $generated@@1) 0) (= ($generated@@0 $generated@@2) 1)) (= ($generated@@0 $generated@@3) 2)) (forall (($generated@@10 Bool) ) (! (= ($generated@@5 ($generated@@4 $generated@@10)) $generated@@10)
 :pattern ( ($generated@@4 $generated@@10))
))) (forall (($generated@@11 T@U) ) (! (= ($generated@@4 ($generated@@5 $generated@@11)) $generated@@11)
 :pattern ( ($generated@@5 $generated@@11))
))) (forall (($generated@@12 Int) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Real) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))))
(assert (forall (($generated@@16 T@U) ($generated@@17 T@U) ($generated@@18 T@U) ) (!  (=> (and ($generated $generated@@16 $generated@@17) ($generated $generated@@17 $generated@@18)) ($generated $generated@@16 $generated@@18))
 :pattern ( ($generated $generated@@16 $generated@@17) ($generated $generated@@17 $generated@@18))
 :pattern ( ($generated $generated@@16 $generated@@17) ($generated $generated@@16 $generated@@18))
)))
(assert (forall (($generated@@20 T@U) ($generated@@21 T@T) ) (! (= ($generated@@19 $generated@@21 $generated@@20) $generated@@20)
 :pattern ( ($generated@@19 $generated@@21 $generated@@20))
)))
(assert (forall (($generated@@24 T@U) ($generated@@25 T@T) ) (! (= ($generated@@23 $generated@@25 ($generated@@22 $generated@@25 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@22 $generated@@25 $generated@@24))
)))
(assert (forall (($generated@@29 Int) ) (!  (=> (<= 0 $generated@@29) (and ($generated@@27 ($generated@@26 $generated@@29)) (= ($generated@@28 ($generated@@26 $generated@@29)) $generated@@29)))
 :pattern ( ($generated@@26 $generated@@29))
)))
(assert (forall (($generated@@30 T@U) ($generated@@31 T@U) ) (!  (or (or ($generated $generated@@30 $generated@@31) (= $generated@@30 $generated@@31)) ($generated $generated@@31 $generated@@30))
 :pattern ( ($generated $generated@@30 $generated@@31) ($generated $generated@@31 $generated@@30))
)))
(assert (forall (($generated@@32 T@U) ) (! (<= 0 ($generated@@28 $generated@@32))
 :pattern ( ($generated@@28 $generated@@32))
)))
(assert (forall (($generated@@33 T@U) ($generated@@34 T@T) ) (! (= ($generated@@22 $generated@@34 ($generated@@23 $generated@@34 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@23 $generated@@34 $generated@@33))
)))
(assert (forall (($generated@@35 T@U) ($generated@@36 T@U) ) (!  (and (and (and (=> ($generated $generated@@35 $generated@@36) (or (not (= $generated@@35 $generated@@36)) (not true))) (=> (and ($generated@@27 $generated@@35) (not ($generated@@27 $generated@@36))) ($generated $generated@@35 $generated@@36))) (=> (and ($generated@@27 $generated@@35) ($generated@@27 $generated@@36)) (= ($generated $generated@@35 $generated@@36) (< ($generated@@28 $generated@@35) ($generated@@28 $generated@@36))))) (=> (and ($generated $generated@@35 $generated@@36) ($generated@@27 $generated@@36)) ($generated@@27 $generated@@35)))
 :pattern ( ($generated $generated@@35 $generated@@36))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@48 T@T) ($generated@@49 T@T) ($generated@@50 T@T) ($generated@@51 T@U) ($generated@@52 T@U) ($generated@@53 T@U) ($generated@@54 T@U) ) (! (= ($generated@@37 $generated@@48 $generated@@49 $generated@@50 ($generated@@44 $generated@@48 $generated@@49 $generated@@50 $generated@@52 $generated@@53 $generated@@54 $generated@@51) $generated@@53 $generated@@54) $generated@@51)
 :weight 0
)) (and (forall (($generated@@55 T@T) ($generated@@56 T@T) ($generated@@57 T@T) ($generated@@58 T@U) ($generated@@59 T@U) ($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@U) ) (!  (or (= $generated@@60 $generated@@62) (= ($generated@@37 $generated@@55 $generated@@56 $generated@@57 ($generated@@44 $generated@@55 $generated@@56 $generated@@57 $generated@@59 $generated@@60 $generated@@61 $generated@@58) $generated@@62 $generated@@63) ($generated@@37 $generated@@55 $generated@@56 $generated@@57 $generated@@59 $generated@@62 $generated@@63)))
 :weight 0
)) (forall (($generated@@64 T@T) ($generated@@65 T@T) ($generated@@66 T@T) ($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (!  (or (= $generated@@70 $generated@@72) (= ($generated@@37 $generated@@64 $generated@@65 $generated@@66 ($generated@@44 $generated@@64 $generated@@65 $generated@@66 $generated@@68 $generated@@69 $generated@@70 $generated@@67) $generated@@71 $generated@@72) ($generated@@37 $generated@@64 $generated@@65 $generated@@66 $generated@@68 $generated@@71 $generated@@72)))
 :weight 0
)))) (= ($generated@@0 $generated@@38) 3)) (= ($generated@@0 $generated@@39) 4)) (forall (($generated@@73 T@T) ($generated@@74 T@T) ($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (! (= ($generated@@41 $generated@@73 $generated@@74 ($generated@@45 $generated@@73 $generated@@74 $generated@@76 $generated@@77 $generated@@75) $generated@@77) $generated@@75)
 :weight 0
))) (forall (($generated@@78 T@T) ($generated@@79 T@T) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ) (!  (or (= $generated@@82 $generated@@83) (= ($generated@@41 $generated@@78 $generated@@79 ($generated@@45 $generated@@78 $generated@@79 $generated@@81 $generated@@82 $generated@@80) $generated@@83) ($generated@@41 $generated@@78 $generated@@79 $generated@@81 $generated@@83)))
 :weight 0
))) (= ($generated@@0 $generated@@42) 5)) (forall (($generated@@84 T@T) ($generated@@85 T@T) ) (= ($generated@@0 ($generated@@43 $generated@@84 $generated@@85)) 6))) (forall (($generated@@86 T@T) ($generated@@87 T@T) ) (! (= ($generated@@46 ($generated@@43 $generated@@86 $generated@@87)) $generated@@86)
 :pattern ( ($generated@@43 $generated@@86 $generated@@87))
))) (forall (($generated@@88 T@T) ($generated@@89 T@T) ) (! (= ($generated@@47 ($generated@@43 $generated@@88 $generated@@89)) $generated@@89)
 :pattern ( ($generated@@43 $generated@@88 $generated@@89))
))))
(assert (forall (($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 Bool) ($generated@@94 T@U) ($generated@@95 T@U) ) (! (= ($generated@@5 ($generated@@37 $generated@@38 $generated@@39 $generated@@1 ($generated@@40 $generated@@90 $generated@@91 $generated@@92 $generated@@93) $generated@@94 $generated@@95))  (=> (and (or (not (= $generated@@94 $generated@@90)) (not true)) ($generated@@5 ($generated@@22 $generated@@1 ($generated@@41 $generated@@39 $generated@@42 ($generated@@41 $generated@@38 ($generated@@43 $generated@@39 $generated@@42) $generated@@91 $generated@@94) $generated@@92)))) $generated@@93))
 :pattern ( ($generated@@37 $generated@@38 $generated@@39 $generated@@1 ($generated@@40 $generated@@90 $generated@@91 $generated@@92 $generated@@93) $generated@@94 $generated@@95))
)))
(assert (forall (($generated@@96 T@U) ) (!  (=> ($generated@@27 $generated@@96) (= $generated@@96 ($generated@@26 ($generated@@28 $generated@@96))))
 :pattern ( ($generated@@28 $generated@@96))
 :pattern ( ($generated@@27 $generated@@96))
)))
(assert (forall (($generated@@97 T@U) ($generated@@98 T@T) ) (! (= ($generated@@23 $generated@@98 ($generated@@19 $generated@@98 $generated@@97)) ($generated@@19 $generated@@42 ($generated@@23 $generated@@98 $generated@@97)))
 :pattern ( ($generated@@23 $generated@@98 ($generated@@19 $generated@@98 $generated@@97)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@99 () T@U)
(declare-fun $generated@@100 () T@U)
(declare-fun $generated@@101 () T@U)
(declare-fun $generated@@102 () T@U)
(declare-fun $generated@@103 () T@U)
(declare-fun $generated@@104 () T@U)
(declare-fun $generated@@105 () T@U)
(declare-fun $generated@@106 (T@U) Bool)
(declare-fun $generated@@107 (T@U) Bool)
(declare-fun $generated@@108 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 32) (let (($generated@@109  (=> (= (ControlFlow 0 25) (- 0 24)) (or (or ($generated $generated@@99 $generated@@100) (= $generated@@99 $generated@@100)) ($generated $generated@@100 $generated@@99)))))
(let (($generated@@110  (=> (and (or ($generated $generated@@99 $generated@@100) (= $generated@@99 $generated@@100)) (= (ControlFlow 0 27) 25)) $generated@@109)))
(let (($generated@@111  (=> (and (not (or ($generated $generated@@99 $generated@@100) (= $generated@@99 $generated@@100))) (= (ControlFlow 0 26) 25)) $generated@@109)))
(let (($generated@@112  (=> ($generated $generated@@99 $generated@@100) (and (=> (= (ControlFlow 0 29) 26) $generated@@111) (=> (= (ControlFlow 0 29) 27) $generated@@110)))))
(let (($generated@@113  (=> (not ($generated $generated@@99 $generated@@100)) (and (=> (= (ControlFlow 0 28) 26) $generated@@111) (=> (= (ControlFlow 0 28) 27) $generated@@110)))))
(let (($generated@@114  (and (=> (= (ControlFlow 0 30) 28) $generated@@113) (=> (= (ControlFlow 0 30) 29) $generated@@112))))
(let (($generated@@115  (=> (= (ControlFlow 0 20) (- 0 19)) (or (or (= $generated@@99 $generated@@100) ($generated $generated@@99 $generated@@100)) (or (= $generated@@100 $generated@@99) ($generated $generated@@100 $generated@@99))))))
(let (($generated@@116  (=> (and (or (= $generated@@99 $generated@@100) ($generated $generated@@99 $generated@@100)) (= (ControlFlow 0 22) 20)) $generated@@115)))
(let (($generated@@117  (=> (and (not (or (= $generated@@99 $generated@@100) ($generated $generated@@99 $generated@@100))) (= (ControlFlow 0 21) 20)) $generated@@115)))
(let (($generated@@118  (and (=> (= (ControlFlow 0 23) 21) $generated@@117) (=> (= (ControlFlow 0 23) 22) $generated@@116))))
(let (($generated@@119  (=> (and (and (or (= $generated@@99 $generated@@100) ($generated $generated@@99 $generated@@100)) (or (= $generated@@100 $generated@@101) ($generated $generated@@100 $generated@@101))) (= (ControlFlow 0 16) (- 0 15))) (or (= $generated@@99 $generated@@101) ($generated $generated@@99 $generated@@101)))))
(let (($generated@@120  (=> (and (not (or (= $generated@@99 $generated@@100) ($generated $generated@@99 $generated@@100))) (= (ControlFlow 0 18) 16)) $generated@@119)))
(let (($generated@@121  (=> (and (or (= $generated@@99 $generated@@100) ($generated $generated@@99 $generated@@100)) (= (ControlFlow 0 17) 16)) $generated@@119)))
(let (($generated@@122  (=> (and (and ($generated $generated@@99 $generated@@100) ($generated $generated@@100 $generated@@101)) (= (ControlFlow 0 12) (- 0 11))) ($generated $generated@@99 $generated@@101))))
(let (($generated@@123  (=> (and (not ($generated $generated@@99 $generated@@100)) (= (ControlFlow 0 14) 12)) $generated@@122)))
(let (($generated@@124  (=> (and ($generated $generated@@99 $generated@@100) (= (ControlFlow 0 13) 12)) $generated@@122)))
(let (($generated@@125  (=> (and (and (and (and (and (and (and (and (not ($generated@@5 ($generated@@19 $generated@@1 ($generated@@4 true)))) (not ($generated@@5 ($generated@@19 $generated@@1 ($generated@@4 true))))) (not ($generated@@5 ($generated@@19 $generated@@1 ($generated@@4 true))))) (not ($generated@@5 ($generated@@19 $generated@@1 ($generated@@4 true))))) (not (and ($generated $generated@@99 $generated@@100) ($generated $generated@@100 $generated@@101)))) (not (and (or (= $generated@@99 $generated@@100) ($generated $generated@@99 $generated@@100)) (or (= $generated@@100 $generated@@101) ($generated $generated@@100 $generated@@101))))) (not ($generated@@5 ($generated@@19 $generated@@1 ($generated@@4 true))))) (= $generated@@99 ($generated@@26 0))) (= (ControlFlow 0 10) (- 0 9))) false)))
(let (($generated@@126  (=> (and (or (not (= $generated@@99 ($generated@@26 0))) (not true)) (= (ControlFlow 0 8) (- 0 7))) ($generated ($generated@@26 0) $generated@@99))))
(let (($generated@@127  (=> (= (ControlFlow 0 6) (- 0 5)) (or (= ($generated@@26 0) $generated@@99) ($generated ($generated@@26 0) $generated@@99)))))
(let (($generated@@128  (=> (= (ControlFlow 0 4) (- 0 3)) (or (= $generated@@99 $generated@@99) ($generated $generated@@99 $generated@@99)))))
(let (($generated@@129  (=> (= (ControlFlow 0 2) (- 0 1)) ($generated $generated@@99 $generated@@99))))
(let (($generated@@130  (=> (= $generated@@102 ($generated@@40 $generated@@103 $generated@@104 $generated@@105 false)) (and (and (and (and (and (and (and (and (and (and (=> (= (ControlFlow 0 31) 2) $generated@@129) (=> (= (ControlFlow 0 31) 4) $generated@@128)) (=> (= (ControlFlow 0 31) 30) $generated@@114)) (=> (= (ControlFlow 0 31) 23) $generated@@118)) (=> (= (ControlFlow 0 31) 6) $generated@@127)) (=> (= (ControlFlow 0 31) 8) $generated@@126)) (=> (= (ControlFlow 0 31) 10) $generated@@125)) (=> (= (ControlFlow 0 31) 17) $generated@@121)) (=> (= (ControlFlow 0 31) 18) $generated@@120)) (=> (= (ControlFlow 0 31) 13) $generated@@124)) (=> (= (ControlFlow 0 31) 14) $generated@@123)))))
(let (($generated@@131  (=> (and (and ($generated@@106 $generated@@104) ($generated@@107 $generated@@104)) (and (= 0 $generated@@108) (= (ControlFlow 0 32) 31))) $generated@@130)))
$generated@@131))))))))))))))))))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
