(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 (T@U T@U) Bool)
(declare-fun $generated@@20 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@21 () T@T)
(declare-fun $generated@@22 () T@T)
(declare-fun $generated@@23 () T@T)
(declare-fun $generated@@24 (T@T T@T) T@T)
(declare-fun $generated@@25 (T@T T@U) T@U)
(declare-fun $generated@@26 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@27 (T@T) T@T)
(declare-fun $generated@@28 (T@T) T@T)
(declare-fun $generated@@49 (T@T T@U) T@U)
(declare-fun $generated@@52 (T@T T@U T@U) Bool)
(declare-fun $generated@@53 (T@U T@U) T@U)
(declare-fun $generated@@54 (T@U T@U) T@U)
(declare-fun $generated@@55 () T@U)
(declare-fun $generated@@59 (T@U T@U T@U) Bool)
(declare-fun $generated@@60 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@74 (T@U) T@U)
(declare-fun $generated@@89 (T@U T@U) Bool)
(declare-fun $generated@@93 (T@U) Bool)
(declare-fun $generated@@97 (T@U) T@U)
(declare-fun $generated@@100 (T@U) T@U)
(declare-fun $generated@@103 (T@U) T@U)
(declare-fun $generated@@106 (T@U) T@U)
(declare-fun $generated@@117 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@118 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@119 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@151 (T@U) T@U)
(declare-fun $generated@@152 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert  (and (and (and (and (and (and (and (forall (($generated@@29 T@T) ($generated@@30 T@T) ($generated@@31 T@U) ($generated@@32 T@U) ($generated@@33 T@U) ) (! (= ($generated@@20 $generated@@29 $generated@@30 ($generated@@26 $generated@@29 $generated@@30 $generated@@32 $generated@@33 $generated@@31) $generated@@33) $generated@@31)
 :weight 0
)) (forall (($generated@@34 T@T) ($generated@@35 T@T) ($generated@@36 T@U) ($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (!  (or (= $generated@@38 $generated@@39) (= ($generated@@20 $generated@@34 $generated@@35 ($generated@@26 $generated@@34 $generated@@35 $generated@@37 $generated@@38 $generated@@36) $generated@@39) ($generated@@20 $generated@@34 $generated@@35 $generated@@37 $generated@@39)))
 :weight 0
))) (= ($generated@@3 $generated@@21) 3)) (= ($generated@@3 $generated@@22) 4)) (= ($generated@@3 $generated@@23) 5)) (forall (($generated@@40 T@T) ($generated@@41 T@T) ) (= ($generated@@3 ($generated@@24 $generated@@40 $generated@@41)) 6))) (forall (($generated@@42 T@T) ($generated@@43 T@T) ) (! (= ($generated@@27 ($generated@@24 $generated@@42 $generated@@43)) $generated@@42)
 :pattern ( ($generated@@24 $generated@@42 $generated@@43))
))) (forall (($generated@@44 T@T) ($generated@@45 T@T) ) (! (= ($generated@@28 ($generated@@24 $generated@@44 $generated@@45)) $generated@@45)
 :pattern ( ($generated@@24 $generated@@44 $generated@@45))
))))
(assert (forall (($generated@@46 T@U) ($generated@@47 T@U) ) (!  (=> ($generated@@19 $generated@@46 $generated@@47) (forall (($generated@@48 T@U) ) (!  (=> ($generated@@8 ($generated@@25 $generated@@4 ($generated@@20 $generated@@21 $generated@@22 ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@46 $generated@@48) $generated))) ($generated@@8 ($generated@@25 $generated@@4 ($generated@@20 $generated@@21 $generated@@22 ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@47 $generated@@48) $generated))))
 :pattern ( ($generated@@20 $generated@@21 $generated@@22 ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@47 $generated@@48) $generated))
)))
 :pattern ( ($generated@@19 $generated@@46 $generated@@47))
)))
(assert (forall (($generated@@50 T@U) ($generated@@51 T@T) ) (! (= ($generated@@49 $generated@@51 ($generated@@25 $generated@@51 $generated@@50)) $generated@@50)
 :pattern ( ($generated@@25 $generated@@51 $generated@@50))
)))
(assert (forall (($generated@@56 T@U) ($generated@@57 T@U) ($generated@@58 T@U) ) (! (= ($generated@@52 $generated@@23 $generated@@58 ($generated@@53 $generated@@56 $generated@@57))  (and ($generated@@52 $generated@@23 $generated@@58 ($generated@@54 $generated@@56 $generated@@57)) (or (not (= $generated@@58 $generated@@55)) (not true))))
 :pattern ( ($generated@@52 $generated@@23 $generated@@58 ($generated@@53 $generated@@56 $generated@@57)))
 :pattern ( ($generated@@52 $generated@@23 $generated@@58 ($generated@@54 $generated@@56 $generated@@57)))
)))
(assert (forall (($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@U) ($generated@@64 T@T) ) (! (= ($generated@@59 ($generated@@49 $generated@@64 $generated@@61) $generated@@62 $generated@@63) ($generated@@60 $generated@@64 $generated@@61 $generated@@62 $generated@@63))
 :pattern ( ($generated@@59 ($generated@@49 $generated@@64 $generated@@61) $generated@@62 $generated@@63))
)))
(assert (forall (($generated@@65 T@U) ($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ) (!  (=> ($generated@@19 $generated@@65 $generated@@66) (=> ($generated@@59 $generated@@67 $generated@@68 $generated@@65) ($generated@@59 $generated@@67 $generated@@68 $generated@@66)))
 :pattern ( ($generated@@19 $generated@@65 $generated@@66) ($generated@@59 $generated@@67 $generated@@68 $generated@@65))
)))
(assert (forall (($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@T) ) (!  (=> ($generated@@19 $generated@@69 $generated@@70) (=> ($generated@@60 $generated@@73 $generated@@71 $generated@@72 $generated@@69) ($generated@@60 $generated@@73 $generated@@71 $generated@@72 $generated@@70)))
 :pattern ( ($generated@@19 $generated@@69 $generated@@70) ($generated@@60 $generated@@73 $generated@@71 $generated@@72 $generated@@69))
)))
(assert (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (! (= ($generated@@52 $generated@@23 $generated@@77 ($generated@@54 $generated@@75 $generated@@76))  (or (= $generated@@77 $generated@@55) (= ($generated@@74 $generated@@77) ($generated@@54 $generated@@75 $generated@@76))))
 :pattern ( ($generated@@52 $generated@@23 $generated@@77 ($generated@@54 $generated@@75 $generated@@76)))
)))
(assert (forall (($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ) (! (= ($generated@@60 $generated@@23 $generated@@80 ($generated@@53 $generated@@78 $generated@@79) $generated@@81) ($generated@@60 $generated@@23 $generated@@80 ($generated@@54 $generated@@78 $generated@@79) $generated@@81))
 :pattern ( ($generated@@60 $generated@@23 $generated@@80 ($generated@@53 $generated@@78 $generated@@79) $generated@@81))
 :pattern ( ($generated@@60 $generated@@23 $generated@@80 ($generated@@54 $generated@@78 $generated@@79) $generated@@81))
)))
(assert (forall (($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ) (! (= ($generated@@60 $generated@@23 $generated@@84 ($generated@@54 $generated@@82 $generated@@83) $generated@@85)  (or (= $generated@@84 $generated@@55) ($generated@@8 ($generated@@25 $generated@@4 ($generated@@20 $generated@@21 $generated@@22 ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@85 $generated@@84) $generated)))))
 :pattern ( ($generated@@60 $generated@@23 $generated@@84 ($generated@@54 $generated@@82 $generated@@83) $generated@@85))
)))
(assert (forall (($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ) (!  (=> (or (not (= $generated@@86 $generated@@88)) (not true)) (=> (and ($generated@@19 $generated@@86 $generated@@87) ($generated@@19 $generated@@87 $generated@@88)) ($generated@@19 $generated@@86 $generated@@88)))
 :pattern ( ($generated@@19 $generated@@86 $generated@@87) ($generated@@19 $generated@@87 $generated@@88))
)))
(assert (forall (($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@T) ) (! (= ($generated@@89 ($generated@@49 $generated@@92 $generated@@90) $generated@@91) ($generated@@52 $generated@@92 $generated@@90 $generated@@91))
 :pattern ( ($generated@@89 ($generated@@49 $generated@@92 $generated@@90) $generated@@91))
)))
(assert (forall (($generated@@94 T@U) ) (!  (=> ($generated@@93 $generated@@94) (forall (($generated@@95 T@U) ($generated@@96 T@U) ) (!  (=> ($generated@@89 $generated@@96 $generated@@94) ($generated@@59 $generated@@96 $generated@@94 $generated@@95))
 :pattern ( ($generated@@59 $generated@@96 $generated@@94 $generated@@95))
)))
 :pattern ( ($generated@@93 $generated@@94))
)))
(assert (forall (($generated@@98 T@U) ($generated@@99 T@U) ) (! (= ($generated@@97 ($generated@@54 $generated@@98 $generated@@99)) $generated@@98)
 :pattern ( ($generated@@54 $generated@@98 $generated@@99))
)))
(assert (forall (($generated@@101 T@U) ($generated@@102 T@U) ) (! (= ($generated@@100 ($generated@@54 $generated@@101 $generated@@102)) $generated@@102)
 :pattern ( ($generated@@54 $generated@@101 $generated@@102))
)))
(assert (forall (($generated@@104 T@U) ($generated@@105 T@U) ) (! (= ($generated@@103 ($generated@@53 $generated@@104 $generated@@105)) $generated@@104)
 :pattern ( ($generated@@53 $generated@@104 $generated@@105))
)))
(assert (forall (($generated@@107 T@U) ($generated@@108 T@U) ) (! (= ($generated@@106 ($generated@@53 $generated@@107 $generated@@108)) $generated@@108)
 :pattern ( ($generated@@53 $generated@@107 $generated@@108))
)))
(assert (forall (($generated@@109 T@U) ($generated@@110 T@T) ) (! (= ($generated@@25 $generated@@110 ($generated@@49 $generated@@110 $generated@@109)) $generated@@109)
 :pattern ( ($generated@@49 $generated@@110 $generated@@109))
)))
(assert (forall (($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ) (!  (=> ($generated@@89 $generated@@113 ($generated@@54 $generated@@111 $generated@@112)) (and (= ($generated@@49 $generated@@23 ($generated@@25 $generated@@23 $generated@@113)) $generated@@113) ($generated@@52 $generated@@23 ($generated@@25 $generated@@23 $generated@@113) ($generated@@54 $generated@@111 $generated@@112))))
 :pattern ( ($generated@@89 $generated@@113 ($generated@@54 $generated@@111 $generated@@112)))
)))
(assert (forall (($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ) (!  (=> ($generated@@89 $generated@@116 ($generated@@53 $generated@@114 $generated@@115)) (and (= ($generated@@49 $generated@@23 ($generated@@25 $generated@@23 $generated@@116)) $generated@@116) ($generated@@52 $generated@@23 ($generated@@25 $generated@@23 $generated@@116) ($generated@@53 $generated@@114 $generated@@115))))
 :pattern ( ($generated@@89 $generated@@116 ($generated@@53 $generated@@114 $generated@@115)))
)))
(assert  (and (forall (($generated@@120 T@T) ($generated@@121 T@T) ($generated@@122 T@T) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ) (! (= ($generated@@117 $generated@@120 $generated@@121 $generated@@122 ($generated@@119 $generated@@120 $generated@@121 $generated@@122 $generated@@124 $generated@@125 $generated@@126 $generated@@123) $generated@@125 $generated@@126) $generated@@123)
 :weight 0
)) (and (forall (($generated@@127 T@T) ($generated@@128 T@T) ($generated@@129 T@T) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ) (!  (or (= $generated@@132 $generated@@134) (= ($generated@@117 $generated@@127 $generated@@128 $generated@@129 ($generated@@119 $generated@@127 $generated@@128 $generated@@129 $generated@@131 $generated@@132 $generated@@133 $generated@@130) $generated@@134 $generated@@135) ($generated@@117 $generated@@127 $generated@@128 $generated@@129 $generated@@131 $generated@@134 $generated@@135)))
 :weight 0
)) (forall (($generated@@136 T@T) ($generated@@137 T@T) ($generated@@138 T@T) ($generated@@139 T@U) ($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ) (!  (or (= $generated@@142 $generated@@144) (= ($generated@@117 $generated@@136 $generated@@137 $generated@@138 ($generated@@119 $generated@@136 $generated@@137 $generated@@138 $generated@@140 $generated@@141 $generated@@142 $generated@@139) $generated@@143 $generated@@144) ($generated@@117 $generated@@136 $generated@@137 $generated@@138 $generated@@140 $generated@@143 $generated@@144)))
 :weight 0
)))))
(assert (forall (($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 Bool) ($generated@@149 T@U) ($generated@@150 T@U) ) (! (= ($generated@@8 ($generated@@117 $generated@@23 $generated@@21 $generated@@4 ($generated@@118 $generated@@145 $generated@@146 $generated@@147 $generated@@148) $generated@@149 $generated@@150))  (=> (and (or (not (= $generated@@149 $generated@@145)) (not true)) ($generated@@8 ($generated@@25 $generated@@4 ($generated@@20 $generated@@21 $generated@@22 ($generated@@20 $generated@@23 ($generated@@24 $generated@@21 $generated@@22) $generated@@146 $generated@@149) $generated@@147)))) $generated@@148))
 :pattern ( ($generated@@117 $generated@@23 $generated@@21 $generated@@4 ($generated@@118 $generated@@145 $generated@@146 $generated@@147 $generated@@148) $generated@@149 $generated@@150))
)))
(assert (forall (($generated@@153 T@U) ($generated@@154 T@U) ) (!  (and (= ($generated@@151 ($generated@@54 $generated@@153 $generated@@154)) $generated@@0) (= ($generated@@152 ($generated@@54 $generated@@153 $generated@@154)) $generated@@2))
 :pattern ( ($generated@@54 $generated@@153 $generated@@154))
)))
(assert (forall (($generated@@155 T@U) ($generated@@156 T@U) ) (!  (and (= ($generated@@151 ($generated@@53 $generated@@155 $generated@@156)) $generated@@1) (= ($generated@@152 ($generated@@53 $generated@@155 $generated@@156)) $generated@@2))
 :pattern ( ($generated@@53 $generated@@155 $generated@@156))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@157 () T@U)
(declare-fun $generated@@158 () T@U)
(declare-fun $generated@@159 () T@U)
(declare-fun $generated@@160 () T@U)
(declare-fun $generated@@161 () T@U)
(declare-fun $generated@@162 () T@U)
(declare-fun $generated@@163 () T@U)
(declare-fun $generated@@164 (T@U) Bool)
(declare-fun $generated@@165 (T@U) Bool)
(declare-fun $generated@@166 () T@U)
(declare-fun $generated@@167 () T@U)
(declare-fun $generated@@168 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 4) (let (($generated@@169  (=> (= $generated@@157 ($generated@@118 $generated@@55 $generated@@158 $generated false)) (and (=> (= (ControlFlow 0 2) (- 0 3)) ($generated@@59 $generated@@159 $generated@@160 $generated@@161)) (=> ($generated@@59 $generated@@159 $generated@@160 $generated@@161) (=> (= (ControlFlow 0 2) (- 0 1)) ($generated@@59 $generated@@162 $generated@@163 $generated@@161)))))))
(let (($generated@@170  (=> (and (and (and (and ($generated@@164 $generated@@161) ($generated@@165 $generated@@161)) ($generated@@93 $generated@@160)) (and (and (or (not (= $generated@@166 $generated@@55)) (not true)) (and ($generated@@52 $generated@@23 $generated@@166 ($generated@@53 $generated@@160 $generated@@163)) ($generated@@60 $generated@@23 $generated@@166 ($generated@@53 $generated@@160 $generated@@163) $generated@@167))) (and ($generated@@89 $generated@@159 $generated@@160) ($generated@@59 $generated@@159 $generated@@160 $generated@@158)))) (and (and (and ($generated@@89 $generated@@162 $generated@@163) ($generated@@59 $generated@@162 $generated@@163 $generated@@158)) (= 0 $generated@@168)) (and (and (= $generated@@167 $generated@@161) (and ($generated@@19 $generated@@167 $generated@@158) ($generated@@164 $generated@@158))) (= (ControlFlow 0 4) 2)))) $generated@@169)))
$generated@@170)))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
