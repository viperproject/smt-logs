(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U T@U) Bool)
(declare-fun $generated@@0 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@1 () T@T)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 (T@T T@T) T@T)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 (T@U) Bool)
(declare-fun $generated@@7 (T@T T@U) T@U)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (T@T) Int)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 () T@T)
(declare-fun $generated@@12 (Bool) T@U)
(declare-fun $generated@@13 (Int) T@U)
(declare-fun $generated@@14 (T@U) Int)
(declare-fun $generated@@15 (Real) T@U)
(declare-fun $generated@@16 (T@U) Real)
(declare-fun $generated@@17 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@18 (T@T) T@T)
(declare-fun $generated@@19 (T@T) T@T)
(declare-fun $generated@@46 (Real) Int)
(declare-fun $generated@@48 (Int) Int)
(declare-fun $generated@@50 (Real) Real)
(declare-fun $generated@@52 (T@T T@U) T@U)
(declare-fun $generated@@55 (T@T T@U) T@U)
(declare-fun $generated@@58 ((_ BitVec 32)) Int)
(declare-fun $generated@@60 ((_ BitVec 67)) Int)
(declare-fun $generated@@62 (Int) Real)
(declare-fun $generated@@70 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@71 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@72 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@104 (Int Int) Int)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@9 $generated@@8) 0) (= ($generated@@9 $generated@@10) 1)) (= ($generated@@9 $generated@@11) 2)) (forall (($generated@@20 Bool) ) (! (= ($generated@@6 ($generated@@12 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@12 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@12 ($generated@@6 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@6 $generated@@21))
))) (forall (($generated@@22 Int) ) (! (= ($generated@@14 ($generated@@13 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@13 $generated@@22))
))) (forall (($generated@@23 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@14 $generated@@23))
))) (forall (($generated@@24 Real) ) (! (= ($generated@@16 ($generated@@15 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@15 $generated@@24))
))) (forall (($generated@@25 T@U) ) (! (= ($generated@@15 ($generated@@16 $generated@@25)) $generated@@25)
 :pattern ( ($generated@@16 $generated@@25))
))) (forall (($generated@@26 T@T) ($generated@@27 T@T) ($generated@@28 T@U) ($generated@@29 T@U) ($generated@@30 T@U) ) (! (= ($generated@@0 $generated@@26 $generated@@27 ($generated@@17 $generated@@26 $generated@@27 $generated@@29 $generated@@30 $generated@@28) $generated@@30) $generated@@28)
 :weight 0
))) (forall (($generated@@31 T@T) ($generated@@32 T@T) ($generated@@33 T@U) ($generated@@34 T@U) ($generated@@35 T@U) ($generated@@36 T@U) ) (!  (or (= $generated@@35 $generated@@36) (= ($generated@@0 $generated@@31 $generated@@32 ($generated@@17 $generated@@31 $generated@@32 $generated@@34 $generated@@35 $generated@@33) $generated@@36) ($generated@@0 $generated@@31 $generated@@32 $generated@@34 $generated@@36)))
 :weight 0
))) (= ($generated@@9 $generated@@1) 3)) (= ($generated@@9 $generated@@2) 4)) (= ($generated@@9 $generated@@3) 5)) (forall (($generated@@37 T@T) ($generated@@38 T@T) ) (= ($generated@@9 ($generated@@4 $generated@@37 $generated@@38)) 6))) (forall (($generated@@39 T@T) ($generated@@40 T@T) ) (! (= ($generated@@18 ($generated@@4 $generated@@39 $generated@@40)) $generated@@39)
 :pattern ( ($generated@@4 $generated@@39 $generated@@40))
))) (forall (($generated@@41 T@T) ($generated@@42 T@T) ) (! (= ($generated@@19 ($generated@@4 $generated@@41 $generated@@42)) $generated@@42)
 :pattern ( ($generated@@4 $generated@@41 $generated@@42))
))))
(assert (forall (($generated@@43 T@U) ($generated@@44 T@U) ) (!  (=> ($generated $generated@@43 $generated@@44) (forall (($generated@@45 T@U) ) (!  (=> ($generated@@6 ($generated@@7 $generated@@8 ($generated@@0 $generated@@1 $generated@@2 ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@43 $generated@@45) $generated@@5))) ($generated@@6 ($generated@@7 $generated@@8 ($generated@@0 $generated@@1 $generated@@2 ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@44 $generated@@45) $generated@@5))))
 :pattern ( ($generated@@0 $generated@@1 $generated@@2 ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@44 $generated@@45) $generated@@5))
)))
 :pattern ( ($generated $generated@@43 $generated@@44))
)))
(assert (forall (($generated@@47 Real) ) (! (= ($generated@@46 $generated@@47) (to_int $generated@@47))
 :pattern ( ($generated@@46 $generated@@47))
)))
(assert (forall (($generated@@49 Int) ) (! (= ($generated@@48 $generated@@49) $generated@@49)
 :pattern ( ($generated@@48 $generated@@49))
)))
(assert (forall (($generated@@51 Real) ) (! (= ($generated@@50 $generated@@51) $generated@@51)
 :pattern ( ($generated@@50 $generated@@51))
)))
(assert (forall (($generated@@53 T@U) ($generated@@54 T@T) ) (! (= ($generated@@52 $generated@@54 $generated@@53) $generated@@53)
 :pattern ( ($generated@@52 $generated@@54 $generated@@53))
)))
(assert (forall (($generated@@56 T@U) ($generated@@57 T@T) ) (! (= ($generated@@55 $generated@@57 ($generated@@7 $generated@@57 $generated@@56)) $generated@@56)
 :pattern ( ($generated@@7 $generated@@57 $generated@@56))
)))
(assert (forall (($generated@@59 (_ BitVec 32)) ) (!  (and (and (<= 0 ($generated@@58 $generated@@59)) (< ($generated@@58 $generated@@59) 4294967296)) (= ($generated@@58 $generated@@59) (bv2int $generated@@59)))
 :pattern ( ($generated@@58 $generated@@59))
)))
(assert (forall (($generated@@61 (_ BitVec 67)) ) (!  (and (and (<= 0 ($generated@@60 $generated@@61)) (< ($generated@@60 $generated@@61) 147573952589676412928)) (= ($generated@@60 $generated@@61) (bv2int $generated@@61)))
 :pattern ( ($generated@@60 $generated@@61))
)))
(assert (forall (($generated@@63 Int) ) (! (= ($generated@@62 $generated@@63) (to_real $generated@@63))
 :pattern ( ($generated@@62 $generated@@63))
)))
(assert (forall (($generated@@64 T@U) ($generated@@65 T@U) ($generated@@66 T@U) ) (!  (=> (or (not (= $generated@@64 $generated@@66)) (not true)) (=> (and ($generated $generated@@64 $generated@@65) ($generated $generated@@65 $generated@@66)) ($generated $generated@@64 $generated@@66)))
 :pattern ( ($generated $generated@@64 $generated@@65) ($generated $generated@@65 $generated@@66))
)))
(assert (forall (($generated@@67 Int) ) (! (= ($generated@@46 ($generated@@62 $generated@@67)) $generated@@67)
 :pattern ( ($generated@@46 ($generated@@62 $generated@@67)))
)))
(assert (forall (($generated@@68 T@U) ($generated@@69 T@T) ) (! (= ($generated@@7 $generated@@69 ($generated@@55 $generated@@69 $generated@@68)) $generated@@68)
 :pattern ( ($generated@@55 $generated@@69 $generated@@68))
)))
(assert  (and (forall (($generated@@73 T@T) ($generated@@74 T@T) ($generated@@75 T@T) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ) (! (= ($generated@@70 $generated@@73 $generated@@74 $generated@@75 ($generated@@72 $generated@@73 $generated@@74 $generated@@75 $generated@@77 $generated@@78 $generated@@79 $generated@@76) $generated@@78 $generated@@79) $generated@@76)
 :weight 0
)) (and (forall (($generated@@80 T@T) ($generated@@81 T@T) ($generated@@82 T@T) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ) (!  (or (= $generated@@85 $generated@@87) (= ($generated@@70 $generated@@80 $generated@@81 $generated@@82 ($generated@@72 $generated@@80 $generated@@81 $generated@@82 $generated@@84 $generated@@85 $generated@@86 $generated@@83) $generated@@87 $generated@@88) ($generated@@70 $generated@@80 $generated@@81 $generated@@82 $generated@@84 $generated@@87 $generated@@88)))
 :weight 0
)) (forall (($generated@@89 T@T) ($generated@@90 T@T) ($generated@@91 T@T) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (!  (or (= $generated@@95 $generated@@97) (= ($generated@@70 $generated@@89 $generated@@90 $generated@@91 ($generated@@72 $generated@@89 $generated@@90 $generated@@91 $generated@@93 $generated@@94 $generated@@95 $generated@@92) $generated@@96 $generated@@97) ($generated@@70 $generated@@89 $generated@@90 $generated@@91 $generated@@93 $generated@@96 $generated@@97)))
 :weight 0
)))))
(assert (forall (($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 Bool) ($generated@@102 T@U) ($generated@@103 T@U) ) (! (= ($generated@@6 ($generated@@70 $generated@@3 $generated@@1 $generated@@8 ($generated@@71 $generated@@98 $generated@@99 $generated@@100 $generated@@101) $generated@@102 $generated@@103))  (=> (and (or (not (= $generated@@102 $generated@@98)) (not true)) ($generated@@6 ($generated@@7 $generated@@8 ($generated@@0 $generated@@1 $generated@@2 ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@99 $generated@@102) $generated@@100)))) $generated@@101))
 :pattern ( ($generated@@70 $generated@@3 $generated@@1 $generated@@8 ($generated@@71 $generated@@98 $generated@@99 $generated@@100 $generated@@101) $generated@@102 $generated@@103))
)))
(assert (forall (($generated@@105 Int) ($generated@@106 Int) ) (! (= ($generated@@104 $generated@@105 $generated@@106) (mod $generated@@105 $generated@@106))
 :pattern ( ($generated@@104 $generated@@105 $generated@@106))
)))
(assert (forall (($generated@@107 Int) ) (! (= ($generated@@55 $generated@@10 ($generated@@13 ($generated@@48 $generated@@107))) ($generated@@52 $generated@@2 ($generated@@55 $generated@@10 ($generated@@13 $generated@@107))))
 :pattern ( ($generated@@55 $generated@@10 ($generated@@13 ($generated@@48 $generated@@107))))
)))
(assert (forall (($generated@@108 Real) ) (! (= ($generated@@55 $generated@@11 ($generated@@15 ($generated@@50 $generated@@108))) ($generated@@52 $generated@@2 ($generated@@55 $generated@@11 ($generated@@15 $generated@@108))))
 :pattern ( ($generated@@55 $generated@@11 ($generated@@15 ($generated@@50 $generated@@108))))
)))
(assert (forall (($generated@@109 T@U) ($generated@@110 T@T) ) (! (= ($generated@@55 $generated@@110 ($generated@@52 $generated@@110 $generated@@109)) ($generated@@52 $generated@@2 ($generated@@55 $generated@@110 $generated@@109)))
 :pattern ( ($generated@@55 $generated@@110 ($generated@@52 $generated@@110 $generated@@109)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@111 (T@U) (_ BitVec 67))
(declare-fun $generated@@112 () T@T)
(declare-fun $generated@@113 ((_ BitVec 67)) T@U)
(declare-fun $generated@@114 () Real)
(declare-fun $generated@@115 () Int)
(declare-fun $generated@@116 () (_ BitVec 67))
(declare-fun $generated@@117 () Int)
(declare-fun $generated@@118 () Int)
(declare-fun $generated@@119 () Real)
(declare-fun $generated@@120 () Real)
(declare-fun $generated@@121 () Int)
(declare-fun $generated@@122 () Int)
(declare-fun $generated@@123 () T@U)
(declare-fun $generated@@124 () T@U)
(declare-fun $generated@@125 () T@U)
(declare-fun $generated@@126 () Real)
(declare-fun $generated@@127 () Int)
(declare-fun $generated@@128 (T@U) Bool)
(declare-fun $generated@@129 (T@U) Bool)
(declare-fun $generated@@130 () Int)
(assert  (and (and (= ($generated@@9 $generated@@112) 7) (forall (($generated@@131 (_ BitVec 67)) ) (! (= ($generated@@111 ($generated@@113 $generated@@131)) $generated@@131)
 :pattern ( ($generated@@113 $generated@@131))
))) (forall (($generated@@132 T@U) ) (! (= ($generated@@113 ($generated@@111 $generated@@132)) $generated@@132)
 :pattern ( ($generated@@111 $generated@@132))
))))
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 16) (let (($generated@@133 true))
(let (($generated@@134  (=> (and (= ((_ int2bv 67) ($generated@@46 ($generated@@62 ($generated@@48 14)))) ($generated@@111 ($generated@@52 $generated@@112 ($generated@@113 #b0000000000000000000000000000000000000000000000000000000000000001110)))) (= $generated@@114 ($generated@@62 ($generated@@48 14)))) (and (=> (= (ControlFlow 0 2) (- 0 11)) (= ($generated@@62 ($generated@@46 $generated@@114)) $generated@@114)) (=> (= ($generated@@62 ($generated@@46 $generated@@114)) $generated@@114) (=> (= $generated@@115 ($generated@@46 ($generated@@62 ($generated@@48 14)))) (and (=> (= (ControlFlow 0 2) (- 0 10)) (and (<= 0 $generated@@115) (< $generated@@115 147573952589676412928))) (=> (and (<= 0 $generated@@115) (< $generated@@115 147573952589676412928)) (=> (= $generated@@116 ((_ int2bv 67) ($generated@@46 ($generated@@62 ($generated@@48 14))))) (and (=> (= (ControlFlow 0 2) (- 0 9)) (= ($generated@@104 ($generated@@60 $generated@@116) ($generated@@48 2)) ($generated@@48 0))) (=> (= ($generated@@104 ($generated@@60 $generated@@116) ($generated@@48 2)) ($generated@@48 0)) (=> (= $generated@@117 ($generated@@60 ((_ int2bv 67) ($generated@@46 ($generated@@62 ($generated@@48 14)))))) (and (=> (= (ControlFlow 0 2) (- 0 8)) (= ($generated@@104 $generated@@117 ($generated@@48 2)) ($generated@@48 0))) (=> (= ($generated@@104 $generated@@117 ($generated@@48 2)) ($generated@@48 0)) (=> (= $generated@@118 ($generated@@60 ((_ int2bv 67) ($generated@@46 ($generated@@62 ($generated@@48 14)))))) (and (=> (= (ControlFlow 0 2) (- 0 7)) (and (<= ($generated@@50 (- 0.0 4.0)) ($generated@@62 $generated@@118)) (< ($generated@@62 $generated@@118) 300.0))) (=> (and (<= ($generated@@50 (- 0.0 4.0)) ($generated@@62 $generated@@118)) (< ($generated@@62 $generated@@118) 300.0)) (=> (= $generated@@119 ($generated@@62 ($generated@@60 ((_ int2bv 67) ($generated@@46 ($generated@@62 ($generated@@48 14))))))) (and (=> (= (ControlFlow 0 2) (- 0 6)) (and (<= ($generated@@50 (- 0.0 4.0)) $generated@@119) (< $generated@@119 300.0))) (=> (and (<= ($generated@@50 (- 0.0 4.0)) $generated@@119) (< $generated@@119 300.0)) (=> (= $generated@@120 ($generated@@62 ($generated@@60 ((_ int2bv 67) ($generated@@46 ($generated@@62 ($generated@@48 14))))))) (and (=> (= (ControlFlow 0 2) (- 0 5)) (= ($generated@@62 ($generated@@46 $generated@@120)) $generated@@120)) (=> (= ($generated@@62 ($generated@@46 $generated@@120)) $generated@@120) (and (=> (= (ControlFlow 0 2) (- 0 4)) (and (<= ($generated@@48 0) ($generated@@46 $generated@@120)) (< ($generated@@46 $generated@@120) 32768))) (=> (and (<= ($generated@@48 0) ($generated@@46 $generated@@120)) (< ($generated@@46 $generated@@120) 32768)) (=> (= $generated@@121 ($generated@@46 ($generated@@62 ($generated@@60 ((_ int2bv 67) ($generated@@46 ($generated@@62 ($generated@@48 14)))))))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (and (<= ($generated@@48 0) $generated@@121) (< $generated@@121 32768))) (=> (and (<= ($generated@@48 0) $generated@@121) (< $generated@@121 32768)) (=> (and (= $generated@@122 ($generated@@46 ($generated@@62 ($generated@@60 ((_ int2bv 67) ($generated@@46 ($generated@@62 ($generated@@48 14)))))))) (= (ControlFlow 0 2) (- 0 1))) (and (<= 0 $generated@@122) (< $generated@@122 128)))))))))))))))))))))))))))))))
(let (($generated@@135  (=> (and (= $generated@@123 ($generated@@71 $generated@@124 $generated@@125 $generated@@5 false)) (= $generated@@126 ($generated@@62 ($generated@@48 14)))) (and (=> (= (ControlFlow 0 13) (- 0 15)) (= ($generated@@62 ($generated@@46 $generated@@126)) $generated@@126)) (=> (= ($generated@@62 ($generated@@46 $generated@@126)) $generated@@126) (=> (= $generated@@127 ($generated@@46 ($generated@@62 ($generated@@48 14)))) (and (=> (= (ControlFlow 0 13) (- 0 14)) (and (<= 0 $generated@@127) (< $generated@@127 147573952589676412928))) (=> (and (<= 0 $generated@@127) (< $generated@@127 147573952589676412928)) (and (=> (= (ControlFlow 0 13) 2) $generated@@134) (=> (= (ControlFlow 0 13) 12) $generated@@133))))))))))
(let (($generated@@136  (=> (and (and ($generated@@128 $generated@@125) ($generated@@129 $generated@@125)) (and (= 1 $generated@@130) (= (ControlFlow 0 16) 13))) $generated@@135)))
$generated@@136)))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
