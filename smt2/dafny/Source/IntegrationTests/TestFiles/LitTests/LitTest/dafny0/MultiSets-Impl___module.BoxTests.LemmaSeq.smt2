(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 (T@T) Int)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 (Bool) T@U)
(declare-fun $generated@@11 (T@U) Bool)
(declare-fun $generated@@12 (Int) T@U)
(declare-fun $generated@@13 (T@U) Int)
(declare-fun $generated@@14 (Real) T@U)
(declare-fun $generated@@15 (T@U) Real)
(declare-fun $generated@@22 (T@U) T@U)
(declare-fun $generated@@23 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@24 () T@T)
(declare-fun $generated@@25 (T@U) T@U)
(declare-fun $generated@@26 (T@U) T@U)
(declare-fun $generated@@30 (T@U) Int)
(declare-fun $generated@@31 () T@U)
(declare-fun $generated@@32 () T@U)
(declare-fun $generated@@33 (T@T T@U) T@U)
(declare-fun $generated@@34 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@35 () T@T)
(declare-fun $generated@@36 () T@T)
(declare-fun $generated@@37 (T@T T@T) T@T)
(declare-fun $generated@@38 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@39 (T@T) T@T)
(declare-fun $generated@@40 (T@T) T@T)
(declare-fun $generated@@61 (Int) Int)
(declare-fun $generated@@63 (T@T T@U) T@U)
(declare-fun $generated@@66 (T@T T@U) T@U)
(declare-fun $generated@@69 (T@T T@U T@U) Bool)
(declare-fun $generated@@72 (T@U T@U T@U) Bool)
(declare-fun $generated@@77 (T@U) T@U)
(declare-fun $generated@@80 (T@U) T@U)
(declare-fun $generated@@83 (T@U T@U) Bool)
(declare-fun $generated@@89 () T@T)
(declare-fun $generated@@90 (T@U) T@U)
(declare-fun $generated@@91 (T@U Int) T@U)
(declare-fun $generated@@96 (T@U) T@U)
(declare-fun $generated@@99 (T@U) T@U)
(declare-fun $generated@@101 (T@U) T@U)
(declare-fun $generated@@105 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@106 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@107 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@145 (T@U T@U Int) Bool)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@6 $generated@@7) 0) (= ($generated@@6 $generated@@8) 1)) (= ($generated@@6 $generated@@9) 2)) (forall (($generated@@16 Bool) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Int) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Real) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5)
)
(assert (= ($generated@@22 $generated) $generated@@0))
(assert (= ($generated@@6 $generated@@24) 3))
(assert (forall (($generated@@27 T@U) ($generated@@28 T@U) ($generated@@29 T@U) ) (! (= ($generated@@23 $generated@@24 $generated@@28 ($generated@@25 $generated@@27) $generated@@29) ($generated@@23 $generated@@24 $generated@@28 ($generated@@26 $generated@@27) $generated@@29))
 :pattern ( ($generated@@23 $generated@@24 $generated@@28 ($generated@@25 $generated@@27) $generated@@29))
 :pattern ( ($generated@@23 $generated@@24 $generated@@28 ($generated@@26 $generated@@27) $generated@@29))
)))
(assert (= ($generated@@30 $generated@@31) 0))
(assert  (and (and (and (and (and (and (forall (($generated@@41 T@T) ($generated@@42 T@T) ($generated@@43 T@U) ($generated@@44 T@U) ($generated@@45 T@U) ) (! (= ($generated@@34 $generated@@41 $generated@@42 ($generated@@38 $generated@@41 $generated@@42 $generated@@44 $generated@@45 $generated@@43) $generated@@45) $generated@@43)
 :weight 0
)) (forall (($generated@@46 T@T) ($generated@@47 T@T) ($generated@@48 T@U) ($generated@@49 T@U) ($generated@@50 T@U) ($generated@@51 T@U) ) (!  (or (= $generated@@50 $generated@@51) (= ($generated@@34 $generated@@46 $generated@@47 ($generated@@38 $generated@@46 $generated@@47 $generated@@49 $generated@@50 $generated@@48) $generated@@51) ($generated@@34 $generated@@46 $generated@@47 $generated@@49 $generated@@51)))
 :weight 0
))) (= ($generated@@6 $generated@@35) 4)) (= ($generated@@6 $generated@@36) 5)) (forall (($generated@@52 T@T) ($generated@@53 T@T) ) (= ($generated@@6 ($generated@@37 $generated@@52 $generated@@53)) 6))) (forall (($generated@@54 T@T) ($generated@@55 T@T) ) (! (= ($generated@@39 ($generated@@37 $generated@@54 $generated@@55)) $generated@@54)
 :pattern ( ($generated@@37 $generated@@54 $generated@@55))
))) (forall (($generated@@56 T@T) ($generated@@57 T@T) ) (! (= ($generated@@40 ($generated@@37 $generated@@56 $generated@@57)) $generated@@57)
 :pattern ( ($generated@@37 $generated@@56 $generated@@57))
))))
(assert (forall (($generated@@58 T@U) ($generated@@59 T@U) ($generated@@60 T@U) ) (! (= ($generated@@23 $generated@@24 $generated@@59 ($generated@@26 $generated@@58) $generated@@60)  (or (= $generated@@59 $generated@@32) ($generated@@11 ($generated@@33 $generated@@7 ($generated@@34 $generated@@35 $generated@@36 ($generated@@34 $generated@@24 ($generated@@37 $generated@@35 $generated@@36) $generated@@60 $generated@@59) $generated@@2)))))
 :pattern ( ($generated@@23 $generated@@24 $generated@@59 ($generated@@26 $generated@@58) $generated@@60))
)))
(assert (forall (($generated@@62 Int) ) (! (= ($generated@@61 $generated@@62) $generated@@62)
 :pattern ( ($generated@@61 $generated@@62))
)))
(assert (forall (($generated@@64 T@U) ($generated@@65 T@T) ) (! (= ($generated@@63 $generated@@65 $generated@@64) $generated@@64)
 :pattern ( ($generated@@63 $generated@@65 $generated@@64))
)))
(assert (forall (($generated@@67 T@U) ($generated@@68 T@T) ) (! (= ($generated@@66 $generated@@68 ($generated@@33 $generated@@68 $generated@@67)) $generated@@67)
 :pattern ( ($generated@@33 $generated@@68 $generated@@67))
)))
(assert (forall (($generated@@70 T@U) ($generated@@71 T@U) ) (! (= ($generated@@69 $generated@@24 $generated@@71 ($generated@@25 $generated@@70))  (and ($generated@@69 $generated@@24 $generated@@71 ($generated@@26 $generated@@70)) (or (not (= $generated@@71 $generated@@32)) (not true))))
 :pattern ( ($generated@@69 $generated@@24 $generated@@71 ($generated@@25 $generated@@70)))
 :pattern ( ($generated@@69 $generated@@24 $generated@@71 ($generated@@26 $generated@@70)))
)))
(assert (forall (($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@T) ) (! (= ($generated@@72 ($generated@@66 $generated@@76 $generated@@73) $generated@@74 $generated@@75) ($generated@@23 $generated@@76 $generated@@73 $generated@@74 $generated@@75))
 :pattern ( ($generated@@72 ($generated@@66 $generated@@76 $generated@@73) $generated@@74 $generated@@75))
)))
(assert (forall (($generated@@78 T@U) ) (!  (and (= ($generated@@22 ($generated@@26 $generated@@78)) $generated@@3) (= ($generated@@77 ($generated@@26 $generated@@78)) $generated@@5))
 :pattern ( ($generated@@26 $generated@@78))
)))
(assert (forall (($generated@@79 T@U) ) (!  (and (= ($generated@@22 ($generated@@25 $generated@@79)) $generated@@4) (= ($generated@@77 ($generated@@25 $generated@@79)) $generated@@5))
 :pattern ( ($generated@@25 $generated@@79))
)))
(assert (forall (($generated@@81 T@U) ($generated@@82 T@U) ) (! (= ($generated@@69 $generated@@24 $generated@@82 ($generated@@26 $generated@@81))  (or (= $generated@@82 $generated@@32) (= ($generated@@80 $generated@@82) ($generated@@26 $generated@@81))))
 :pattern ( ($generated@@69 $generated@@24 $generated@@82 ($generated@@26 $generated@@81)))
)))
(assert (forall (($generated@@84 T@U) ) (!  (=> ($generated@@83 $generated@@84 $generated) (and (= ($generated@@66 $generated@@8 ($generated@@33 $generated@@8 $generated@@84)) $generated@@84) ($generated@@69 $generated@@8 ($generated@@33 $generated@@8 $generated@@84) $generated)))
 :pattern ( ($generated@@83 $generated@@84 $generated))
)))
(assert (forall (($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@T) ) (! (= ($generated@@83 ($generated@@66 $generated@@87 $generated@@85) $generated@@86) ($generated@@69 $generated@@87 $generated@@85 $generated@@86))
 :pattern ( ($generated@@83 ($generated@@66 $generated@@87 $generated@@85) $generated@@86))
)))
(assert (forall (($generated@@88 T@U) ) (! (<= 0 ($generated@@30 $generated@@88))
 :pattern ( ($generated@@30 $generated@@88))
)))
(assert (= ($generated@@6 $generated@@89) 7))
(assert (forall (($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (! (= ($generated@@23 $generated@@89 $generated@@92 ($generated@@90 $generated@@93) $generated@@94) (forall (($generated@@95 Int) ) (!  (=> (and (<= 0 $generated@@95) (< $generated@@95 ($generated@@30 $generated@@92))) ($generated@@72 ($generated@@91 $generated@@92 $generated@@95) $generated@@93 $generated@@94))
 :pattern ( ($generated@@91 $generated@@92 $generated@@95))
)))
 :pattern ( ($generated@@23 $generated@@89 $generated@@92 ($generated@@90 $generated@@93) $generated@@94))
)))
(assert (forall (($generated@@97 T@U) ) (! (= ($generated@@96 ($generated@@90 $generated@@97)) $generated@@97)
 :pattern ( ($generated@@90 $generated@@97))
)))
(assert (forall (($generated@@98 T@U) ) (! (= ($generated@@22 ($generated@@90 $generated@@98)) $generated@@1)
 :pattern ( ($generated@@90 $generated@@98))
)))
(assert (forall (($generated@@100 T@U) ) (! (= ($generated@@99 ($generated@@26 $generated@@100)) $generated@@100)
 :pattern ( ($generated@@26 $generated@@100))
)))
(assert (forall (($generated@@102 T@U) ) (! (= ($generated@@101 ($generated@@25 $generated@@102)) $generated@@102)
 :pattern ( ($generated@@25 $generated@@102))
)))
(assert (forall (($generated@@103 T@U) ($generated@@104 T@T) ) (! (= ($generated@@33 $generated@@104 ($generated@@66 $generated@@104 $generated@@103)) $generated@@103)
 :pattern ( ($generated@@66 $generated@@104 $generated@@103))
)))
(assert  (and (forall (($generated@@108 T@T) ($generated@@109 T@T) ($generated@@110 T@T) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ) (! (= ($generated@@105 $generated@@108 $generated@@109 $generated@@110 ($generated@@107 $generated@@108 $generated@@109 $generated@@110 $generated@@112 $generated@@113 $generated@@114 $generated@@111) $generated@@113 $generated@@114) $generated@@111)
 :weight 0
)) (and (forall (($generated@@115 T@T) ($generated@@116 T@T) ($generated@@117 T@T) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ) (!  (or (= $generated@@120 $generated@@122) (= ($generated@@105 $generated@@115 $generated@@116 $generated@@117 ($generated@@107 $generated@@115 $generated@@116 $generated@@117 $generated@@119 $generated@@120 $generated@@121 $generated@@118) $generated@@122 $generated@@123) ($generated@@105 $generated@@115 $generated@@116 $generated@@117 $generated@@119 $generated@@122 $generated@@123)))
 :weight 0
)) (forall (($generated@@124 T@T) ($generated@@125 T@T) ($generated@@126 T@T) ($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ) (!  (or (= $generated@@130 $generated@@132) (= ($generated@@105 $generated@@124 $generated@@125 $generated@@126 ($generated@@107 $generated@@124 $generated@@125 $generated@@126 $generated@@128 $generated@@129 $generated@@130 $generated@@127) $generated@@131 $generated@@132) ($generated@@105 $generated@@124 $generated@@125 $generated@@126 $generated@@128 $generated@@131 $generated@@132)))
 :weight 0
)))))
(assert (forall (($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 Bool) ($generated@@137 T@U) ($generated@@138 T@U) ) (! (= ($generated@@11 ($generated@@105 $generated@@24 $generated@@35 $generated@@7 ($generated@@106 $generated@@133 $generated@@134 $generated@@135 $generated@@136) $generated@@137 $generated@@138))  (=> (and (or (not (= $generated@@137 $generated@@133)) (not true)) ($generated@@11 ($generated@@33 $generated@@7 ($generated@@34 $generated@@35 $generated@@36 ($generated@@34 $generated@@24 ($generated@@37 $generated@@35 $generated@@36) $generated@@134 $generated@@137) $generated@@135)))) $generated@@136))
 :pattern ( ($generated@@105 $generated@@24 $generated@@35 $generated@@7 ($generated@@106 $generated@@133 $generated@@134 $generated@@135 $generated@@136) $generated@@137 $generated@@138))
)))
(assert (forall (($generated@@139 T@U) ($generated@@140 T@U) ) (!  (=> ($generated@@83 $generated@@139 ($generated@@90 $generated@@140)) (and (= ($generated@@66 $generated@@89 ($generated@@33 $generated@@89 $generated@@139)) $generated@@139) ($generated@@69 $generated@@89 ($generated@@33 $generated@@89 $generated@@139) ($generated@@90 $generated@@140))))
 :pattern ( ($generated@@83 $generated@@139 ($generated@@90 $generated@@140)))
)))
(assert (forall (($generated@@141 T@U) ($generated@@142 T@U) ) (!  (=> ($generated@@83 $generated@@142 ($generated@@26 $generated@@141)) (and (= ($generated@@66 $generated@@24 ($generated@@33 $generated@@24 $generated@@142)) $generated@@142) ($generated@@69 $generated@@24 ($generated@@33 $generated@@24 $generated@@142) ($generated@@26 $generated@@141))))
 :pattern ( ($generated@@83 $generated@@142 ($generated@@26 $generated@@141)))
)))
(assert (forall (($generated@@143 T@U) ($generated@@144 T@U) ) (!  (=> ($generated@@83 $generated@@144 ($generated@@25 $generated@@143)) (and (= ($generated@@66 $generated@@24 ($generated@@33 $generated@@24 $generated@@144)) $generated@@144) ($generated@@69 $generated@@24 ($generated@@33 $generated@@24 $generated@@144) ($generated@@25 $generated@@143))))
 :pattern ( ($generated@@83 $generated@@144 ($generated@@25 $generated@@143)))
)))
(assert (forall (($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 Int) ) (! (= ($generated@@145 $generated@@146 $generated@@147 $generated@@148) (forall (($generated@@149 Int) ) (!  (=> (and (<= 0 $generated@@149) (< $generated@@149 $generated@@148)) (= ($generated@@91 $generated@@146 $generated@@149) ($generated@@91 $generated@@147 $generated@@149)))
 :pattern ( ($generated@@91 $generated@@146 $generated@@149))
 :pattern ( ($generated@@91 $generated@@147 $generated@@149))
)))
 :pattern ( ($generated@@145 $generated@@146 $generated@@147 $generated@@148))
)))
(assert (forall (($generated@@150 Int) ) (! (= ($generated@@66 $generated@@8 ($generated@@12 ($generated@@61 $generated@@150))) ($generated@@63 $generated@@36 ($generated@@66 $generated@@8 ($generated@@12 $generated@@150))))
 :pattern ( ($generated@@66 $generated@@8 ($generated@@12 ($generated@@61 $generated@@150))))
)))
(assert (forall (($generated@@151 T@U) ($generated@@152 T@T) ) (! (= ($generated@@66 $generated@@152 ($generated@@63 $generated@@152 $generated@@151)) ($generated@@63 $generated@@36 ($generated@@66 $generated@@152 $generated@@151)))
 :pattern ( ($generated@@66 $generated@@152 ($generated@@63 $generated@@152 $generated@@151)))
)))
(assert (forall (($generated@@153 T@U) ) (!  (=> (= ($generated@@30 $generated@@153) 0) (= $generated@@153 $generated@@31))
 :pattern ( ($generated@@30 $generated@@153))
)))
(assert (forall (($generated@@154 T@U) ($generated@@155 T@U) ) (! ($generated@@23 $generated@@8 $generated@@155 $generated $generated@@154)
 :pattern ( ($generated@@23 $generated@@8 $generated@@155 $generated $generated@@154))
)))
(assert (forall (($generated@@156 T@U) ($generated@@157 T@U) ) (! (= ($generated@@69 $generated@@89 $generated@@156 ($generated@@90 $generated@@157)) (forall (($generated@@158 Int) ) (!  (=> (and (<= 0 $generated@@158) (< $generated@@158 ($generated@@30 $generated@@156))) ($generated@@83 ($generated@@91 $generated@@156 $generated@@158) $generated@@157))
 :pattern ( ($generated@@91 $generated@@156 $generated@@158))
)))
 :pattern ( ($generated@@69 $generated@@89 $generated@@156 ($generated@@90 $generated@@157)))
)))
(assert (forall (($generated@@159 T@U) ) (! ($generated@@69 $generated@@8 $generated@@159 $generated)
 :pattern ( ($generated@@69 $generated@@8 $generated@@159 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@160 () T@U)
(declare-fun $generated@@161 () T@U)
(declare-fun $generated@@162 () T@U)
(declare-fun $generated@@163 () T@U)
(declare-fun $generated@@164 (T@U) Bool)
(declare-fun $generated@@165 (T@U) Bool)
(declare-fun $generated@@166 () T@U)
(declare-fun $generated@@167 () T@U)
(declare-fun $generated@@168 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@169  (=> (and (= $generated@@160 ($generated@@106 $generated@@32 $generated@@161 $generated@@2 false)) (= (ControlFlow 0 2) (- 0 1))) (and (<= ($generated@@30 $generated@@162) ($generated@@30 $generated@@163)) ($generated@@145 $generated@@162 $generated@@163 ($generated@@30 $generated@@162))))))
(let (($generated@@170  (=> (and (and ($generated@@164 $generated@@161) ($generated@@165 $generated@@161)) (and (or (not (= $generated@@166 $generated@@32)) (not true)) (and ($generated@@69 $generated@@24 $generated@@166 ($generated@@25 $generated@@167)) ($generated@@23 $generated@@24 $generated@@166 ($generated@@25 $generated@@167) $generated@@161)))) (=> (and (and (and ($generated@@69 $generated@@89 $generated@@162 ($generated@@90 $generated)) ($generated@@23 $generated@@89 $generated@@162 ($generated@@90 $generated) $generated@@161)) (and ($generated@@69 $generated@@89 $generated@@163 ($generated@@90 $generated)) ($generated@@23 $generated@@89 $generated@@163 ($generated@@90 $generated) $generated@@161))) (and (and (= 0 $generated@@168) (<= ($generated@@30 $generated@@162) ($generated@@30 $generated@@163))) (and (forall (($generated@@171 Int) ) (!  (=> (and (<= ($generated@@61 0) $generated@@171) (< $generated@@171 ($generated@@30 $generated@@162))) (= ($generated@@13 ($generated@@33 $generated@@8 ($generated@@91 $generated@@162 $generated@@171))) ($generated@@13 ($generated@@33 $generated@@8 ($generated@@91 $generated@@163 $generated@@171)))))
 :pattern ( ($generated@@33 $generated@@8 ($generated@@91 $generated@@163 $generated@@171)))
 :pattern ( ($generated@@33 $generated@@8 ($generated@@91 $generated@@162 $generated@@171)))
)) (= (ControlFlow 0 3) 2)))) $generated@@169))))
$generated@@170)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
