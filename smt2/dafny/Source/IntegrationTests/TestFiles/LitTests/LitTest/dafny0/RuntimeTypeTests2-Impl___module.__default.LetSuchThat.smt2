(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 (T@T) Int)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Bool) T@U)
(declare-fun $generated@@9 (T@U) Bool)
(declare-fun $generated@@10 (Int) T@U)
(declare-fun $generated@@11 (T@U) Int)
(declare-fun $generated@@12 (Real) T@U)
(declare-fun $generated@@13 (T@U) Real)
(declare-fun $generated@@20 (T@U) T@U)
(declare-fun $generated@@21 () Bool)
(declare-fun $generated@@22 (Real) Bool)
(declare-fun $generated@@23 () Real)
(declare-fun $generated@@24 (Int) Int)
(declare-fun $generated@@26 (Real) Real)
(declare-fun $generated@@28 (T@T T@U) T@U)
(declare-fun $generated@@31 (T@T T@U) T@U)
(declare-fun $generated@@32 (T@T T@U) T@U)
(declare-fun $generated@@35 () Int)
(declare-fun $generated@@36 (Real) Bool)
(declare-fun $generated@@41 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@42 () T@T)
(declare-fun $generated@@43 () T@T)
(declare-fun $generated@@44 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@45 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@46 () T@T)
(declare-fun $generated@@47 (T@T T@T) T@T)
(declare-fun $generated@@48 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@49 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@50 (T@T) T@T)
(declare-fun $generated@@51 (T@T) T@T)
(declare-fun $generated@@100 (Int Int) Int)
(declare-fun $generated@@107 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@112 () Bool)
(declare-fun $generated@@113 () Int)
(declare-fun $generated@@114 (T@T T@U T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@4 $generated@@5) 0) (= ($generated@@4 $generated@@6) 1)) (= ($generated@@4 $generated@@7) 2)) (forall (($generated@@14 Bool) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Int) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Real) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3)
)
(assert (= ($generated@@20 $generated) $generated@@1))
(assert (= ($generated@@20 $generated@@0) $generated@@2))
(assert  (=> $generated@@21 ($generated@@22 $generated@@23)))
(assert (forall (($generated@@25 Int) ) (! (= ($generated@@24 $generated@@25) $generated@@25)
 :pattern ( ($generated@@24 $generated@@25))
)))
(assert (forall (($generated@@27 Real) ) (! (= ($generated@@26 $generated@@27) $generated@@27)
 :pattern ( ($generated@@26 $generated@@27))
)))
(assert (forall (($generated@@29 T@U) ($generated@@30 T@T) ) (! (= ($generated@@28 $generated@@30 $generated@@29) $generated@@29)
 :pattern ( ($generated@@28 $generated@@30 $generated@@29))
)))
(assert (forall (($generated@@33 T@U) ($generated@@34 T@T) ) (! (= ($generated@@32 $generated@@34 ($generated@@31 $generated@@34 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@31 $generated@@34 $generated@@33))
)))
(assert  (=> (<= 0 $generated@@35) (forall (($generated@@37 Real) ) (!  (=> (or ($generated@@36 $generated@@37) (< 0 $generated@@35)) (= ($generated@@22 $generated@@37) (= $generated@@37 ($generated@@26 44.1985))))
 :pattern ( ($generated@@22 $generated@@37))
))))
(assert  (=> (<= 0 $generated@@35) (forall (($generated@@38 Real) ) (!  (=> (or ($generated@@36 ($generated@@26 $generated@@38)) (< 0 $generated@@35)) (= ($generated@@22 ($generated@@26 $generated@@38)) (= ($generated@@26 $generated@@38) ($generated@@26 44.1985))))
 :weight 3
 :pattern ( ($generated@@22 ($generated@@26 $generated@@38)))
))))
(assert (forall (($generated@@39 T@U) ($generated@@40 T@T) ) (! (= ($generated@@31 $generated@@40 ($generated@@32 $generated@@40 $generated@@39)) $generated@@39)
 :pattern ( ($generated@@32 $generated@@40 $generated@@39))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@52 T@T) ($generated@@53 T@T) ($generated@@54 T@T) ($generated@@55 T@U) ($generated@@56 T@U) ($generated@@57 T@U) ($generated@@58 T@U) ) (! (= ($generated@@41 $generated@@52 $generated@@53 $generated@@54 ($generated@@48 $generated@@52 $generated@@53 $generated@@54 $generated@@56 $generated@@57 $generated@@58 $generated@@55) $generated@@57 $generated@@58) $generated@@55)
 :weight 0
)) (and (forall (($generated@@59 T@T) ($generated@@60 T@T) ($generated@@61 T@T) ($generated@@62 T@U) ($generated@@63 T@U) ($generated@@64 T@U) ($generated@@65 T@U) ($generated@@66 T@U) ($generated@@67 T@U) ) (!  (or (= $generated@@64 $generated@@66) (= ($generated@@41 $generated@@59 $generated@@60 $generated@@61 ($generated@@48 $generated@@59 $generated@@60 $generated@@61 $generated@@63 $generated@@64 $generated@@65 $generated@@62) $generated@@66 $generated@@67) ($generated@@41 $generated@@59 $generated@@60 $generated@@61 $generated@@63 $generated@@66 $generated@@67)))
 :weight 0
)) (forall (($generated@@68 T@T) ($generated@@69 T@T) ($generated@@70 T@T) ($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@U) ) (!  (or (= $generated@@74 $generated@@76) (= ($generated@@41 $generated@@68 $generated@@69 $generated@@70 ($generated@@48 $generated@@68 $generated@@69 $generated@@70 $generated@@72 $generated@@73 $generated@@74 $generated@@71) $generated@@75 $generated@@76) ($generated@@41 $generated@@68 $generated@@69 $generated@@70 $generated@@72 $generated@@75 $generated@@76)))
 :weight 0
)))) (= ($generated@@4 $generated@@42) 3)) (= ($generated@@4 $generated@@43) 4)) (forall (($generated@@77 T@T) ($generated@@78 T@T) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ) (! (= ($generated@@45 $generated@@77 $generated@@78 ($generated@@49 $generated@@77 $generated@@78 $generated@@80 $generated@@81 $generated@@79) $generated@@81) $generated@@79)
 :weight 0
))) (forall (($generated@@82 T@T) ($generated@@83 T@T) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ) (!  (or (= $generated@@86 $generated@@87) (= ($generated@@45 $generated@@82 $generated@@83 ($generated@@49 $generated@@82 $generated@@83 $generated@@85 $generated@@86 $generated@@84) $generated@@87) ($generated@@45 $generated@@82 $generated@@83 $generated@@85 $generated@@87)))
 :weight 0
))) (= ($generated@@4 $generated@@46) 5)) (forall (($generated@@88 T@T) ($generated@@89 T@T) ) (= ($generated@@4 ($generated@@47 $generated@@88 $generated@@89)) 6))) (forall (($generated@@90 T@T) ($generated@@91 T@T) ) (! (= ($generated@@50 ($generated@@47 $generated@@90 $generated@@91)) $generated@@90)
 :pattern ( ($generated@@47 $generated@@90 $generated@@91))
))) (forall (($generated@@92 T@T) ($generated@@93 T@T) ) (! (= ($generated@@51 ($generated@@47 $generated@@92 $generated@@93)) $generated@@93)
 :pattern ( ($generated@@47 $generated@@92 $generated@@93))
))))
(assert (forall (($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 Bool) ($generated@@98 T@U) ($generated@@99 T@U) ) (! (= ($generated@@9 ($generated@@41 $generated@@42 $generated@@43 $generated@@5 ($generated@@44 $generated@@94 $generated@@95 $generated@@96 $generated@@97) $generated@@98 $generated@@99))  (=> (and (or (not (= $generated@@98 $generated@@94)) (not true)) ($generated@@9 ($generated@@31 $generated@@5 ($generated@@45 $generated@@43 $generated@@46 ($generated@@45 $generated@@42 ($generated@@47 $generated@@43 $generated@@46) $generated@@95 $generated@@98) $generated@@96)))) $generated@@97))
 :pattern ( ($generated@@41 $generated@@42 $generated@@43 $generated@@5 ($generated@@44 $generated@@94 $generated@@95 $generated@@96 $generated@@97) $generated@@98 $generated@@99))
)))
(assert (forall (($generated@@101 Int) ($generated@@102 Int) ) (! (= ($generated@@100 $generated@@101 $generated@@102) (mod $generated@@101 $generated@@102))
 :pattern ( ($generated@@100 $generated@@101 $generated@@102))
)))
(assert (forall (($generated@@103 Int) ) (! (= ($generated@@32 $generated@@6 ($generated@@10 ($generated@@24 $generated@@103))) ($generated@@28 $generated@@46 ($generated@@32 $generated@@6 ($generated@@10 $generated@@103))))
 :pattern ( ($generated@@32 $generated@@6 ($generated@@10 ($generated@@24 $generated@@103))))
)))
(assert (forall (($generated@@104 Real) ) (! (= ($generated@@32 $generated@@7 ($generated@@12 ($generated@@26 $generated@@104))) ($generated@@28 $generated@@46 ($generated@@32 $generated@@7 ($generated@@12 $generated@@104))))
 :pattern ( ($generated@@32 $generated@@7 ($generated@@12 ($generated@@26 $generated@@104))))
)))
(assert (forall (($generated@@105 T@U) ($generated@@106 T@T) ) (! (= ($generated@@32 $generated@@106 ($generated@@28 $generated@@106 $generated@@105)) ($generated@@28 $generated@@46 ($generated@@32 $generated@@106 $generated@@105)))
 :pattern ( ($generated@@32 $generated@@106 ($generated@@28 $generated@@106 $generated@@105)))
)))
(assert (forall (($generated@@108 T@U) ($generated@@109 T@U) ) (! ($generated@@107 $generated@@6 $generated@@109 $generated $generated@@108)
 :pattern ( ($generated@@107 $generated@@6 $generated@@109 $generated $generated@@108))
)))
(assert (forall (($generated@@110 T@U) ($generated@@111 T@U) ) (! ($generated@@107 $generated@@7 $generated@@111 $generated@@0 $generated@@110)
 :pattern ( ($generated@@107 $generated@@7 $generated@@111 $generated@@0 $generated@@110))
)))
(assert  (=> $generated@@112 (and (and (and (= ($generated@@100 $generated@@113 ($generated@@24 5)) ($generated@@24 0)) (= ($generated@@100 $generated@@113 ($generated@@24 7)) ($generated@@24 0))) (<= ($generated@@24 0) $generated@@113)) (< $generated@@113 30))))
(assert (forall (($generated@@115 T@U) ) (! ($generated@@114 $generated@@6 $generated@@115 $generated)
 :pattern ( ($generated@@114 $generated@@6 $generated@@115 $generated))
)))
(assert (forall (($generated@@116 T@U) ) (! ($generated@@114 $generated@@7 $generated@@116 $generated@@0)
 :pattern ( ($generated@@114 $generated@@7 $generated@@116 $generated@@0))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@117 () Real)
(declare-fun $generated@@118 () T@U)
(declare-fun $generated@@119 () Real)
(declare-fun $generated@@120 () Int)
(declare-fun $generated@@121 () Int)
(declare-fun $generated@@122 () Int)
(declare-fun $generated@@123 () Real)
(declare-fun $generated@@124 () T@U)
(declare-fun $generated@@125 () T@U)
(declare-fun $generated@@126 (T@U) Bool)
(declare-fun $generated@@127 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 20) (let (($generated@@128 true))
(let (($generated@@129  (=> (and ($generated@@107 $generated@@7 ($generated@@12 $generated@@117) $generated@@0 $generated@@118) ($generated@@36 $generated@@117)) (and (=> (= (ControlFlow 0 3) (- 0 4)) (or (and ($generated@@114 $generated@@7 ($generated@@12 ($generated@@26 0.0)) $generated@@0) ($generated@@9 ($generated@@28 $generated@@5 ($generated@@8 ($generated@@22 ($generated@@26 0.0)))))) (exists (($generated@@130 Real) ) ($generated@@22 $generated@@130)))) (=> (or (and ($generated@@114 $generated@@7 ($generated@@12 ($generated@@26 0.0)) $generated@@0) ($generated@@9 ($generated@@28 $generated@@5 ($generated@@8 ($generated@@22 ($generated@@26 0.0)))))) (exists (($generated@@131 Real) ) ($generated@@22 $generated@@131))) (=> (and (and ($generated@@22 $generated@@117) ($generated@@36 $generated@@119)) (and ($generated@@22 $generated@@119) (= (ControlFlow 0 3) (- 0 2)))) (= $generated@@117 $generated@@119)))))))
(let (($generated@@132  (and (=> (= (ControlFlow 0 6) (- 0 9)) (or (and ($generated@@114 $generated@@6 ($generated@@10 ($generated@@24 (- 30 1))) $generated) (and (and (and (= ($generated@@24 ($generated@@100 (- 30 1) ($generated@@24 5))) ($generated@@24 0)) (= ($generated@@24 ($generated@@100 (- 30 1) ($generated@@24 7))) ($generated@@24 0))) (<= ($generated@@24 0) ($generated@@24 (- 30 1)))) (< (- 30 1) 30))) (or (and ($generated@@114 $generated@@6 ($generated@@10 ($generated@@24 0)) $generated) (and (and (and (= ($generated@@24 ($generated@@100 0 ($generated@@24 5))) ($generated@@24 0)) (= ($generated@@24 ($generated@@100 0 ($generated@@24 7))) ($generated@@24 0))) (<= ($generated@@24 0) ($generated@@24 0))) (< 0 30))) (or (and ($generated@@114 $generated@@6 ($generated@@10 ($generated@@24 0)) $generated) (and (and (and (= ($generated@@24 ($generated@@100 0 ($generated@@24 5))) ($generated@@24 0)) (= ($generated@@24 ($generated@@100 0 ($generated@@24 7))) ($generated@@24 0))) (<= ($generated@@24 0) ($generated@@24 0))) (< 0 30))) (exists (($generated@@133 Int) )  (and (and (and (= ($generated@@100 $generated@@133 ($generated@@24 5)) ($generated@@24 0)) (= ($generated@@100 $generated@@133 ($generated@@24 7)) ($generated@@24 0))) (<= ($generated@@24 0) $generated@@133)) (< $generated@@133 30))))))) (=> (or (and ($generated@@114 $generated@@6 ($generated@@10 ($generated@@24 (- 30 1))) $generated) (and (and (and (= ($generated@@24 ($generated@@100 (- 30 1) ($generated@@24 5))) ($generated@@24 0)) (= ($generated@@24 ($generated@@100 (- 30 1) ($generated@@24 7))) ($generated@@24 0))) (<= ($generated@@24 0) ($generated@@24 (- 30 1)))) (< (- 30 1) 30))) (or (and ($generated@@114 $generated@@6 ($generated@@10 ($generated@@24 0)) $generated) (and (and (and (= ($generated@@24 ($generated@@100 0 ($generated@@24 5))) ($generated@@24 0)) (= ($generated@@24 ($generated@@100 0 ($generated@@24 7))) ($generated@@24 0))) (<= ($generated@@24 0) ($generated@@24 0))) (< 0 30))) (or (and ($generated@@114 $generated@@6 ($generated@@10 ($generated@@24 0)) $generated) (and (and (and (= ($generated@@24 ($generated@@100 0 ($generated@@24 5))) ($generated@@24 0)) (= ($generated@@24 ($generated@@100 0 ($generated@@24 7))) ($generated@@24 0))) (<= ($generated@@24 0) ($generated@@24 0))) (< 0 30))) (exists (($generated@@134 Int) )  (and (and (and (= ($generated@@100 $generated@@134 ($generated@@24 5)) ($generated@@24 0)) (= ($generated@@100 $generated@@134 ($generated@@24 7)) ($generated@@24 0))) (<= ($generated@@24 0) $generated@@134)) (< $generated@@134 30)))))) (=> (and (and (and (and (= ($generated@@100 $generated@@120 ($generated@@24 5)) ($generated@@24 0)) (= ($generated@@100 $generated@@120 ($generated@@24 7)) ($generated@@24 0))) (<= ($generated@@24 0) $generated@@120)) (< $generated@@120 30)) (and (and (and (= ($generated@@100 $generated@@121 ($generated@@24 5)) ($generated@@24 0)) (= ($generated@@100 $generated@@121 ($generated@@24 7)) ($generated@@24 0))) (<= ($generated@@24 0) $generated@@121)) (< $generated@@121 30))) (and (=> (= (ControlFlow 0 6) (- 0 8)) (= $generated@@120 $generated@@121)) (=> (= $generated@@120 $generated@@121) (=> $generated@@112 (=> (and $generated@@112 (= $generated@@122 (let (($generated@@135 $generated@@113))
$generated@@135))) (=> (and (and (= $generated@@123 ($generated@@26 44.1985)) ($generated@@107 $generated@@7 ($generated@@12 $generated@@123) $generated@@0 $generated@@118)) (and ($generated@@36 ($generated@@26 44.1985)) ($generated@@36 ($generated@@26 44.1985)))) (and (=> (= (ControlFlow 0 6) (- 0 7)) (=> ($generated@@36 ($generated@@26 44.1985)) (or ($generated@@9 ($generated@@28 $generated@@5 ($generated@@8 ($generated@@22 ($generated@@26 44.1985))))) (= ($generated@@26 44.1985) ($generated@@26 44.1985))))) (=> ($generated@@9 ($generated@@28 $generated@@5 ($generated@@8 ($generated@@22 ($generated@@26 44.1985))))) (and (=> (= (ControlFlow 0 6) 3) $generated@@129) (=> (= (ControlFlow 0 6) 5) $generated@@128))))))))))))))
(let (($generated@@136  (=> (and (not (and (and (= ($generated@@100 $generated@@120 ($generated@@24 5)) ($generated@@24 0)) (= ($generated@@100 $generated@@120 ($generated@@24 7)) ($generated@@24 0))) (<= ($generated@@24 0) $generated@@120))) (= (ControlFlow 0 11) 6)) $generated@@132)))
(let (($generated@@137  (=> (and (and (and (= ($generated@@100 $generated@@120 ($generated@@24 5)) ($generated@@24 0)) (= ($generated@@100 $generated@@120 ($generated@@24 7)) ($generated@@24 0))) (<= ($generated@@24 0) $generated@@120)) (= (ControlFlow 0 10) 6)) $generated@@132)))
(let (($generated@@138  (=> (not (and (= ($generated@@100 $generated@@120 ($generated@@24 5)) ($generated@@24 0)) (= ($generated@@100 $generated@@120 ($generated@@24 7)) ($generated@@24 0)))) (and (=> (= (ControlFlow 0 13) 10) $generated@@137) (=> (= (ControlFlow 0 13) 11) $generated@@136)))))
(let (($generated@@139  (=> (and (= ($generated@@100 $generated@@120 ($generated@@24 5)) ($generated@@24 0)) (= ($generated@@100 $generated@@120 ($generated@@24 7)) ($generated@@24 0))) (and (=> (= (ControlFlow 0 12) 10) $generated@@137) (=> (= (ControlFlow 0 12) 11) $generated@@136)))))
(let (($generated@@140  (=> (or (not (= ($generated@@100 $generated@@120 ($generated@@24 5)) ($generated@@24 0))) (not true)) (and (=> (= (ControlFlow 0 16) 12) $generated@@139) (=> (= (ControlFlow 0 16) 13) $generated@@138)))))
(let (($generated@@141  (=> (= ($generated@@100 $generated@@120 ($generated@@24 5)) ($generated@@24 0)) (and (=> (= (ControlFlow 0 14) (- 0 15)) (or (not (= ($generated@@24 7) 0)) (not true))) (=> (or (not (= ($generated@@24 7) 0)) (not true)) (and (=> (= (ControlFlow 0 14) 12) $generated@@139) (=> (= (ControlFlow 0 14) 13) $generated@@138)))))))
(let (($generated@@142  (and (=> (= (ControlFlow 0 17) (- 0 18)) (or (not (= ($generated@@24 5) 0)) (not true))) (=> (or (not (= ($generated@@24 5) 0)) (not true)) (and (=> (= (ControlFlow 0 17) 14) $generated@@141) (=> (= (ControlFlow 0 17) 16) $generated@@140))))))
(let (($generated@@143 true))
(let (($generated@@144  (=> (= $generated@@124 ($generated@@44 $generated@@125 $generated@@118 $generated@@3 false)) (and (=> (= (ControlFlow 0 19) 17) $generated@@142) (=> (= (ControlFlow 0 19) 1) $generated@@143)))))
(let (($generated@@145  (=> (and (and ($generated@@126 $generated@@118) ($generated@@127 $generated@@118)) (and (= 1 $generated@@35) (= (ControlFlow 0 20) 19))) $generated@@144)))
$generated@@145))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
