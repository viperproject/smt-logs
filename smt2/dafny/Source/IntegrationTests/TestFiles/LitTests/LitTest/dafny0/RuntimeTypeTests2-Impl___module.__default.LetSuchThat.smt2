(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TReal () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagReal () T@U)
(declare-fun alloc () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun |$let#1$canCall| () Bool)
(declare-fun _module.__default.ItWasReal (Real) Bool)
(declare-fun |$let#1_b| () Real)
(declare-fun LitInt (Int) Int)
(declare-fun LitReal (Real) Real)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun |_module.__default.ItWasReal#canCall| (Real) Bool)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun Mod (Int Int) Int)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun |$let#0$canCall| () Bool)
(declare-fun |$let#0_a| () Int)
(declare-fun $Is (T@T T@U T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TReal TagInt TagReal alloc)
)
(assert (= (Tag TInt) TagInt))
(assert (= (Tag TReal) TagReal))
(assert  (=> |$let#1$canCall| (_module.__default.ItWasReal |$let#1_b|)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 Real) ) (! (= (LitReal x@@3) x@@3)
 :pattern ( (LitReal x@@3))
)))
(assert (forall ((x@@4 T@U) (T T@T) ) (! (= (Lit T x@@4) x@@4)
 :pattern ( (Lit T x@@4))
)))
(assert (forall ((x@@5 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@5)) x@@5)
 :pattern ( ($Unbox T@@0 x@@5))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|r#0| Real) ) (!  (=> (or (|_module.__default.ItWasReal#canCall| |r#0|) (< 0 $FunctionContextHeight)) (= (_module.__default.ItWasReal |r#0|) (= |r#0| (LitReal 44.1985))))
 :pattern ( (_module.__default.ItWasReal |r#0|))
))))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|r#0@@0| Real) ) (!  (=> (or (|_module.__default.ItWasReal#canCall| (LitReal |r#0@@0|)) (< 0 $FunctionContextHeight)) (= (_module.__default.ItWasReal (LitReal |r#0@@0|)) (= (LitReal |r#0@@0|) (LitReal 44.1985))))
 :weight 3
 :pattern ( (_module.__default.ItWasReal (LitReal |r#0@@0|)))
))))
(assert (forall ((x@@6 T@U) (T@@1 T@T) ) (! (= ($Unbox T@@1 ($Box T@@1 x@@6)) x@@6)
 :pattern ( ($Box T@@1 x@@6))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0 t1 t2 (MapType0Store t0 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 3)) (= (Ctor FieldType) 4)) (forall ((t0@@0 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 (MapType1Store t0@@0 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :weight 0
))) (= (Ctor BoxType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 6))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((x@@7 Int) (y Int) ) (! (= (Mod x@@7 y) (mod x@@7 y))
 :pattern ( (Mod x@@7 y))
)))
(assert (forall ((x@@8 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@8))) (Lit BoxType ($Box intType (int_2_U x@@8))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@8))))
)))
(assert (forall ((x@@9 Real) ) (! (= ($Box realType (real_2_U (LitReal x@@9))) (Lit BoxType ($Box realType (real_2_U x@@9))))
 :pattern ( ($Box realType (real_2_U (LitReal x@@9))))
)))
(assert (forall ((x@@10 T@U) (T@@2 T@T) ) (! (= ($Box T@@2 (Lit T@@2 x@@10)) (Lit BoxType ($Box T@@2 x@@10)))
 :pattern ( ($Box T@@2 (Lit T@@2 x@@10)))
)))
(assert (forall ((h T@U) (v T@U) ) (! ($IsAlloc intType v TInt h)
 :pattern ( ($IsAlloc intType v TInt h))
)))
(assert (forall ((h@@0 T@U) (v@@0 T@U) ) (! ($IsAlloc realType v@@0 TReal h@@0)
 :pattern ( ($IsAlloc realType v@@0 TReal h@@0))
)))
(assert  (=> |$let#0$canCall| (and (and (and (= (Mod |$let#0_a| (LitInt 5)) (LitInt 0)) (= (Mod |$let#0_a| (LitInt 7)) (LitInt 0))) (<= (LitInt 0) |$let#0_a|)) (< |$let#0_a| 30))))
(assert (forall ((v@@1 T@U) ) (! ($Is intType v@@1 TInt)
 :pattern ( ($Is intType v@@1 TInt))
)))
(assert (forall ((v@@2 T@U) ) (! ($Is realType v@@2 TReal)
 :pattern ( ($Is realType v@@2 TReal))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |b#1@0| () Real)
(declare-fun $Heap () T@U)
(declare-fun |b#2@0| () Real)
(declare-fun |a#1@0| () Int)
(declare-fun |a#2@0| () Int)
(declare-fun |x#0@0| () Int)
(declare-fun |##r#0@0| () Real)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsHeapAnchor (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 20) (let ((anon14_Else_correct true))
(let ((anon14_Then_correct  (=> (and ($IsAlloc realType (real_2_U |b#1@0|) TReal $Heap) (|_module.__default.ItWasReal#canCall| |b#1@0|)) (and (=> (= (ControlFlow 0 3) (- 0 4)) (or (and ($Is realType (real_2_U (LitReal 0.0)) TReal) (U_2_bool (Lit boolType (bool_2_U (_module.__default.ItWasReal (LitReal 0.0)))))) (exists ((|b#0| Real) ) (_module.__default.ItWasReal |b#0|)))) (=> (or (and ($Is realType (real_2_U (LitReal 0.0)) TReal) (U_2_bool (Lit boolType (bool_2_U (_module.__default.ItWasReal (LitReal 0.0)))))) (exists ((|b#0@@0| Real) ) (_module.__default.ItWasReal |b#0@@0|))) (=> (and (and (_module.__default.ItWasReal |b#1@0|) (|_module.__default.ItWasReal#canCall| |b#2@0|)) (and (_module.__default.ItWasReal |b#2@0|) (= (ControlFlow 0 3) (- 0 2)))) (= |b#1@0| |b#2@0|)))))))
(let ((anon7_correct  (and (=> (= (ControlFlow 0 6) (- 0 9)) (or (and ($Is intType (int_2_U (LitInt (- 30 1))) TInt) (and (and (and (= (LitInt (Mod (- 30 1) (LitInt 5))) (LitInt 0)) (= (LitInt (Mod (- 30 1) (LitInt 7))) (LitInt 0))) (<= (LitInt 0) (LitInt (- 30 1)))) (< (- 30 1) 30))) (or (and ($Is intType (int_2_U (LitInt 0)) TInt) (and (and (and (= (LitInt (Mod 0 (LitInt 5))) (LitInt 0)) (= (LitInt (Mod 0 (LitInt 7))) (LitInt 0))) (<= (LitInt 0) (LitInt 0))) (< 0 30))) (or (and ($Is intType (int_2_U (LitInt 0)) TInt) (and (and (and (= (LitInt (Mod 0 (LitInt 5))) (LitInt 0)) (= (LitInt (Mod 0 (LitInt 7))) (LitInt 0))) (<= (LitInt 0) (LitInt 0))) (< 0 30))) (exists ((|a#0| Int) )  (and (and (and (= (Mod |a#0| (LitInt 5)) (LitInt 0)) (= (Mod |a#0| (LitInt 7)) (LitInt 0))) (<= (LitInt 0) |a#0|)) (< |a#0| 30))))))) (=> (or (and ($Is intType (int_2_U (LitInt (- 30 1))) TInt) (and (and (and (= (LitInt (Mod (- 30 1) (LitInt 5))) (LitInt 0)) (= (LitInt (Mod (- 30 1) (LitInt 7))) (LitInt 0))) (<= (LitInt 0) (LitInt (- 30 1)))) (< (- 30 1) 30))) (or (and ($Is intType (int_2_U (LitInt 0)) TInt) (and (and (and (= (LitInt (Mod 0 (LitInt 5))) (LitInt 0)) (= (LitInt (Mod 0 (LitInt 7))) (LitInt 0))) (<= (LitInt 0) (LitInt 0))) (< 0 30))) (or (and ($Is intType (int_2_U (LitInt 0)) TInt) (and (and (and (= (LitInt (Mod 0 (LitInt 5))) (LitInt 0)) (= (LitInt (Mod 0 (LitInt 7))) (LitInt 0))) (<= (LitInt 0) (LitInt 0))) (< 0 30))) (exists ((|a#0@@0| Int) )  (and (and (and (= (Mod |a#0@@0| (LitInt 5)) (LitInt 0)) (= (Mod |a#0@@0| (LitInt 7)) (LitInt 0))) (<= (LitInt 0) |a#0@@0|)) (< |a#0@@0| 30)))))) (=> (and (and (and (and (= (Mod |a#1@0| (LitInt 5)) (LitInt 0)) (= (Mod |a#1@0| (LitInt 7)) (LitInt 0))) (<= (LitInt 0) |a#1@0|)) (< |a#1@0| 30)) (and (and (and (= (Mod |a#2@0| (LitInt 5)) (LitInt 0)) (= (Mod |a#2@0| (LitInt 7)) (LitInt 0))) (<= (LitInt 0) |a#2@0|)) (< |a#2@0| 30))) (and (=> (= (ControlFlow 0 6) (- 0 8)) (= |a#1@0| |a#2@0|)) (=> (= |a#1@0| |a#2@0|) (=> |$let#0$canCall| (=> (and |$let#0$canCall| (= |x#0@0| (let ((|a#0@@1| |$let#0_a|))
|a#0@@1|))) (=> (and (and (= |##r#0@0| (LitReal 44.1985)) ($IsAlloc realType (real_2_U |##r#0@0|) TReal $Heap)) (and (|_module.__default.ItWasReal#canCall| (LitReal 44.1985)) (|_module.__default.ItWasReal#canCall| (LitReal 44.1985)))) (and (=> (= (ControlFlow 0 6) (- 0 7)) (=> (|_module.__default.ItWasReal#canCall| (LitReal 44.1985)) (or (U_2_bool (Lit boolType (bool_2_U (_module.__default.ItWasReal (LitReal 44.1985))))) (= (LitReal 44.1985) (LitReal 44.1985))))) (=> (U_2_bool (Lit boolType (bool_2_U (_module.__default.ItWasReal (LitReal 44.1985))))) (and (=> (= (ControlFlow 0 6) 3) anon14_Then_correct) (=> (= (ControlFlow 0 6) 5) anon14_Else_correct))))))))))))))
(let ((anon13_Else_correct  (=> (and (not (and (and (= (Mod |a#1@0| (LitInt 5)) (LitInt 0)) (= (Mod |a#1@0| (LitInt 7)) (LitInt 0))) (<= (LitInt 0) |a#1@0|))) (= (ControlFlow 0 11) 6)) anon7_correct)))
(let ((anon13_Then_correct  (=> (and (and (and (= (Mod |a#1@0| (LitInt 5)) (LitInt 0)) (= (Mod |a#1@0| (LitInt 7)) (LitInt 0))) (<= (LitInt 0) |a#1@0|)) (= (ControlFlow 0 10) 6)) anon7_correct)))
(let ((anon12_Else_correct  (=> (not (and (= (Mod |a#1@0| (LitInt 5)) (LitInt 0)) (= (Mod |a#1@0| (LitInt 7)) (LitInt 0)))) (and (=> (= (ControlFlow 0 13) 10) anon13_Then_correct) (=> (= (ControlFlow 0 13) 11) anon13_Else_correct)))))
(let ((anon12_Then_correct  (=> (and (= (Mod |a#1@0| (LitInt 5)) (LitInt 0)) (= (Mod |a#1@0| (LitInt 7)) (LitInt 0))) (and (=> (= (ControlFlow 0 12) 10) anon13_Then_correct) (=> (= (ControlFlow 0 12) 11) anon13_Else_correct)))))
(let ((anon11_Else_correct  (=> (or (not (= (Mod |a#1@0| (LitInt 5)) (LitInt 0))) (not true)) (and (=> (= (ControlFlow 0 16) 12) anon12_Then_correct) (=> (= (ControlFlow 0 16) 13) anon12_Else_correct)))))
(let ((anon11_Then_correct  (=> (= (Mod |a#1@0| (LitInt 5)) (LitInt 0)) (and (=> (= (ControlFlow 0 14) (- 0 15)) (or (not (= (LitInt 7) 0)) (not true))) (=> (or (not (= (LitInt 7) 0)) (not true)) (and (=> (= (ControlFlow 0 14) 12) anon12_Then_correct) (=> (= (ControlFlow 0 14) 13) anon12_Else_correct)))))))
(let ((anon10_Then_correct  (and (=> (= (ControlFlow 0 17) (- 0 18)) (or (not (= (LitInt 5) 0)) (not true))) (=> (or (not (= (LitInt 5) 0)) (not true)) (and (=> (= (ControlFlow 0 17) 14) anon11_Then_correct) (=> (= (ControlFlow 0 17) 16) anon11_Else_correct))))))
(let ((anon10_Else_correct true))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (and (=> (= (ControlFlow 0 19) 17) anon10_Then_correct) (=> (= (ControlFlow 0 19) 1) anon10_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (and (= 1 $FunctionContextHeight) (= (ControlFlow 0 20) 19))) anon0_correct)))
PreconditionGeneratedEntry_correct))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
