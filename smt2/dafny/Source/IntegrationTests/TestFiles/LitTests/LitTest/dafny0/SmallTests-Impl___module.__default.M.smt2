(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 (T@U) T@U)
(declare-fun $generated@@20 (T@U) Int)
(declare-fun $generated@@21 () T@U)
(declare-fun $generated@@22 (T@U Int) T@U)
(declare-fun $generated@@23 (T@U T@U) T@U)
(declare-fun $generated@@29 (Int) Int)
(declare-fun $generated@@31 (T@T T@U) T@U)
(declare-fun $generated@@34 (T@T T@U T@U) Bool)
(declare-fun $generated@@35 () T@T)
(declare-fun $generated@@36 (T@U) T@U)
(declare-fun $generated@@37 (T@U T@U) Bool)
(declare-fun $generated@@41 (T@U Int) T@U)
(declare-fun $generated@@42 (T@U Int) T@U)
(declare-fun $generated@@48 (T@U T@U) Bool)
(declare-fun $generated@@52 (T@T T@U) T@U)
(declare-fun $generated@@53 (T@T T@U) T@U)
(declare-fun $generated@@58 (T@U T@U T@U) Bool)
(declare-fun $generated@@59 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@83 (T@U) T@U)
(declare-fun $generated@@88 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@89 () T@T)
(declare-fun $generated@@90 () T@T)
(declare-fun $generated@@91 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@92 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@93 () T@T)
(declare-fun $generated@@94 (T@T T@T) T@T)
(declare-fun $generated@@95 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@96 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@97 (T@T) T@T)
(declare-fun $generated@@98 (T@T) T@T)
(declare-fun $generated@@147 (T@U) T@U)
(declare-fun $generated@@148 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (= ($generated@@19 $generated) $generated@@0))
(assert (= ($generated@@20 $generated@@21) 0))
(assert (forall (($generated@@24 T@U) ($generated@@25 T@U) ($generated@@26 Int) ) (!  (=> (and (<= 0 $generated@@26) (<= $generated@@26 ($generated@@20 $generated@@24))) (= ($generated@@22 ($generated@@23 $generated@@24 $generated@@25) $generated@@26) ($generated@@23 ($generated@@22 $generated@@24 $generated@@26) $generated@@25)))
 :pattern ( ($generated@@22 ($generated@@23 $generated@@24 $generated@@25) $generated@@26))
)))
(assert (forall (($generated@@27 T@U) ($generated@@28 Int) ) (!  (=> (= $generated@@28 0) (= ($generated@@22 $generated@@27 $generated@@28) $generated@@27))
 :pattern ( ($generated@@22 $generated@@27 $generated@@28))
)))
(assert (forall (($generated@@30 Int) ) (! (= ($generated@@29 $generated@@30) $generated@@30)
 :pattern ( ($generated@@29 $generated@@30))
)))
(assert (forall (($generated@@32 T@U) ($generated@@33 T@T) ) (! (= ($generated@@31 $generated@@33 $generated@@32) $generated@@32)
 :pattern ( ($generated@@31 $generated@@33 $generated@@32))
)))
(assert (= ($generated@@3 $generated@@35) 3))
(assert (forall (($generated@@38 T@U) ($generated@@39 T@U) ($generated@@40 T@U) ) (!  (=> (and ($generated@@34 $generated@@35 $generated@@38 ($generated@@36 $generated@@40)) ($generated@@37 $generated@@39 $generated@@40)) ($generated@@34 $generated@@35 ($generated@@23 $generated@@38 $generated@@39) ($generated@@36 $generated@@40)))
 :pattern ( ($generated@@34 $generated@@35 ($generated@@23 $generated@@38 $generated@@39) ($generated@@36 $generated@@40)))
)))
(assert (forall (($generated@@43 T@U) ($generated@@44 Int) ($generated@@45 Int) ) (!  (=> (and (and (<= 0 $generated@@45) (< $generated@@45 $generated@@44)) (< $generated@@45 ($generated@@20 $generated@@43))) (= ($generated@@41 ($generated@@42 $generated@@43 $generated@@44) $generated@@45) ($generated@@41 $generated@@43 $generated@@45)))
 :weight 25
 :pattern ( ($generated@@41 ($generated@@42 $generated@@43 $generated@@44) $generated@@45))
 :pattern ( ($generated@@41 $generated@@43 $generated@@45) ($generated@@42 $generated@@43 $generated@@44))
)))
(assert (forall (($generated@@46 T@U) ($generated@@47 Int) ) (!  (=> (and (<= 0 $generated@@47) (<= $generated@@47 ($generated@@20 $generated@@46))) (= ($generated@@20 ($generated@@22 $generated@@46 $generated@@47)) (- ($generated@@20 $generated@@46) $generated@@47)))
 :pattern ( ($generated@@20 ($generated@@22 $generated@@46 $generated@@47)))
)))
(assert (forall (($generated@@49 T@U) ($generated@@50 T@U) ) (! (= ($generated@@48 $generated@@49 $generated@@50)  (and (= ($generated@@20 $generated@@49) ($generated@@20 $generated@@50)) (forall (($generated@@51 Int) ) (!  (=> (and (<= 0 $generated@@51) (< $generated@@51 ($generated@@20 $generated@@49))) (= ($generated@@41 $generated@@49 $generated@@51) ($generated@@41 $generated@@50 $generated@@51)))
 :pattern ( ($generated@@41 $generated@@49 $generated@@51))
 :pattern ( ($generated@@41 $generated@@50 $generated@@51))
))))
 :pattern ( ($generated@@48 $generated@@49 $generated@@50))
)))
(assert (forall (($generated@@54 T@U) ($generated@@55 T@T) ) (! (= ($generated@@53 $generated@@55 ($generated@@52 $generated@@55 $generated@@54)) $generated@@54)
 :pattern ( ($generated@@52 $generated@@55 $generated@@54))
)))
(assert (forall (($generated@@56 T@U) ($generated@@57 T@U) ) (! (= ($generated@@20 ($generated@@23 $generated@@56 $generated@@57)) (+ 1 ($generated@@20 $generated@@56)))
 :pattern ( ($generated@@23 $generated@@56 $generated@@57))
)))
(assert (forall (($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@T) ) (! (= ($generated@@58 ($generated@@53 $generated@@63 $generated@@60) $generated@@61 $generated@@62) ($generated@@59 $generated@@63 $generated@@60 $generated@@61 $generated@@62))
 :pattern ( ($generated@@58 ($generated@@53 $generated@@63 $generated@@60) $generated@@61 $generated@@62))
)))
(assert (forall (($generated@@64 T@U) ($generated@@65 Int) ($generated@@66 Int) ) (!  (=> (and (and (<= 0 $generated@@65) (<= 0 $generated@@66)) (< $generated@@66 (- ($generated@@20 $generated@@64) $generated@@65))) (= ($generated@@41 ($generated@@22 $generated@@64 $generated@@65) $generated@@66) ($generated@@41 $generated@@64 (+ $generated@@66 $generated@@65))))
 :weight 25
 :pattern ( ($generated@@41 ($generated@@22 $generated@@64 $generated@@65) $generated@@66))
)))
(assert (forall (($generated@@67 T@U) ($generated@@68 Int) ($generated@@69 T@U) ) (!  (and (=> (= $generated@@68 ($generated@@20 $generated@@67)) (= ($generated@@41 ($generated@@23 $generated@@67 $generated@@69) $generated@@68) $generated@@69)) (=> (or (not (= $generated@@68 ($generated@@20 $generated@@67))) (not true)) (= ($generated@@41 ($generated@@23 $generated@@67 $generated@@69) $generated@@68) ($generated@@41 $generated@@67 $generated@@68))))
 :pattern ( ($generated@@41 ($generated@@23 $generated@@67 $generated@@69) $generated@@68))
)))
(assert (forall (($generated@@70 T@U) ($generated@@71 T@U) ) (!  (=> ($generated@@48 $generated@@70 $generated@@71) (= $generated@@70 $generated@@71))
 :pattern ( ($generated@@48 $generated@@70 $generated@@71))
)))
(assert (forall (($generated@@72 T@U) ($generated@@73 Int) ) (!  (=> (and (<= 0 $generated@@73) (<= $generated@@73 ($generated@@20 $generated@@72))) (= ($generated@@20 ($generated@@42 $generated@@72 $generated@@73)) $generated@@73))
 :pattern ( ($generated@@20 ($generated@@42 $generated@@72 $generated@@73)))
)))
(assert (forall (($generated@@74 T@U) ) (!  (=> ($generated@@37 $generated@@74 $generated) (and (= ($generated@@53 $generated@@4 ($generated@@52 $generated@@4 $generated@@74)) $generated@@74) ($generated@@34 $generated@@4 ($generated@@52 $generated@@4 $generated@@74) $generated)))
 :pattern ( ($generated@@37 $generated@@74 $generated))
)))
(assert (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@T) ) (! (= ($generated@@37 ($generated@@53 $generated@@77 $generated@@75) $generated@@76) ($generated@@34 $generated@@77 $generated@@75 $generated@@76))
 :pattern ( ($generated@@37 ($generated@@53 $generated@@77 $generated@@75) $generated@@76))
)))
(assert (forall (($generated@@78 T@U) ) (! (<= 0 ($generated@@20 $generated@@78))
 :pattern ( ($generated@@20 $generated@@78))
)))
(assert (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ) (! (= ($generated@@59 $generated@@35 $generated@@79 ($generated@@36 $generated@@80) $generated@@81) (forall (($generated@@82 Int) ) (!  (=> (and (<= 0 $generated@@82) (< $generated@@82 ($generated@@20 $generated@@79))) ($generated@@58 ($generated@@41 $generated@@79 $generated@@82) $generated@@80 $generated@@81))
 :pattern ( ($generated@@41 $generated@@79 $generated@@82))
)))
 :pattern ( ($generated@@59 $generated@@35 $generated@@79 ($generated@@36 $generated@@80) $generated@@81))
)))
(assert (forall (($generated@@84 T@U) ) (! (= ($generated@@83 ($generated@@36 $generated@@84)) $generated@@84)
 :pattern ( ($generated@@36 $generated@@84))
)))
(assert (forall (($generated@@85 T@U) ) (! (= ($generated@@19 ($generated@@36 $generated@@85)) $generated@@1)
 :pattern ( ($generated@@36 $generated@@85))
)))
(assert (forall (($generated@@86 T@U) ($generated@@87 T@T) ) (! (= ($generated@@52 $generated@@87 ($generated@@53 $generated@@87 $generated@@86)) $generated@@86)
 :pattern ( ($generated@@53 $generated@@87 $generated@@86))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@99 T@T) ($generated@@100 T@T) ($generated@@101 T@T) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ) (! (= ($generated@@88 $generated@@99 $generated@@100 $generated@@101 ($generated@@95 $generated@@99 $generated@@100 $generated@@101 $generated@@103 $generated@@104 $generated@@105 $generated@@102) $generated@@104 $generated@@105) $generated@@102)
 :weight 0
)) (and (forall (($generated@@106 T@T) ($generated@@107 T@T) ($generated@@108 T@T) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ) (!  (or (= $generated@@111 $generated@@113) (= ($generated@@88 $generated@@106 $generated@@107 $generated@@108 ($generated@@95 $generated@@106 $generated@@107 $generated@@108 $generated@@110 $generated@@111 $generated@@112 $generated@@109) $generated@@113 $generated@@114) ($generated@@88 $generated@@106 $generated@@107 $generated@@108 $generated@@110 $generated@@113 $generated@@114)))
 :weight 0
)) (forall (($generated@@115 T@T) ($generated@@116 T@T) ($generated@@117 T@T) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ) (!  (or (= $generated@@121 $generated@@123) (= ($generated@@88 $generated@@115 $generated@@116 $generated@@117 ($generated@@95 $generated@@115 $generated@@116 $generated@@117 $generated@@119 $generated@@120 $generated@@121 $generated@@118) $generated@@122 $generated@@123) ($generated@@88 $generated@@115 $generated@@116 $generated@@117 $generated@@119 $generated@@122 $generated@@123)))
 :weight 0
)))) (= ($generated@@3 $generated@@89) 4)) (= ($generated@@3 $generated@@90) 5)) (forall (($generated@@124 T@T) ($generated@@125 T@T) ($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ) (! (= ($generated@@92 $generated@@124 $generated@@125 ($generated@@96 $generated@@124 $generated@@125 $generated@@127 $generated@@128 $generated@@126) $generated@@128) $generated@@126)
 :weight 0
))) (forall (($generated@@129 T@T) ($generated@@130 T@T) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ($generated@@134 T@U) ) (!  (or (= $generated@@133 $generated@@134) (= ($generated@@92 $generated@@129 $generated@@130 ($generated@@96 $generated@@129 $generated@@130 $generated@@132 $generated@@133 $generated@@131) $generated@@134) ($generated@@92 $generated@@129 $generated@@130 $generated@@132 $generated@@134)))
 :weight 0
))) (= ($generated@@3 $generated@@93) 6)) (forall (($generated@@135 T@T) ($generated@@136 T@T) ) (= ($generated@@3 ($generated@@94 $generated@@135 $generated@@136)) 7))) (forall (($generated@@137 T@T) ($generated@@138 T@T) ) (! (= ($generated@@97 ($generated@@94 $generated@@137 $generated@@138)) $generated@@137)
 :pattern ( ($generated@@94 $generated@@137 $generated@@138))
))) (forall (($generated@@139 T@T) ($generated@@140 T@T) ) (! (= ($generated@@98 ($generated@@94 $generated@@139 $generated@@140)) $generated@@140)
 :pattern ( ($generated@@94 $generated@@139 $generated@@140))
))))
(assert (forall (($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 Bool) ($generated@@145 T@U) ($generated@@146 T@U) ) (! (= ($generated@@8 ($generated@@88 $generated@@89 $generated@@90 $generated@@4 ($generated@@91 $generated@@141 $generated@@142 $generated@@143 $generated@@144) $generated@@145 $generated@@146))  (=> (and (or (not (= $generated@@145 $generated@@141)) (not true)) ($generated@@8 ($generated@@52 $generated@@4 ($generated@@92 $generated@@90 $generated@@93 ($generated@@92 $generated@@89 ($generated@@94 $generated@@90 $generated@@93) $generated@@142 $generated@@145) $generated@@143)))) $generated@@144))
 :pattern ( ($generated@@88 $generated@@89 $generated@@90 $generated@@4 ($generated@@91 $generated@@141 $generated@@142 $generated@@143 $generated@@144) $generated@@145 $generated@@146))
)))
(assert (forall (($generated@@149 T@U) ($generated@@150 T@U) ) (!  (and (= ($generated@@147 ($generated@@23 $generated@@149 $generated@@150)) $generated@@149) (= ($generated@@148 ($generated@@23 $generated@@149 $generated@@150)) $generated@@150))
 :pattern ( ($generated@@23 $generated@@149 $generated@@150))
)))
(assert (forall (($generated@@151 T@U) ($generated@@152 T@U) ) (!  (=> ($generated@@37 $generated@@151 ($generated@@36 $generated@@152)) (and (= ($generated@@53 $generated@@35 ($generated@@52 $generated@@35 $generated@@151)) $generated@@151) ($generated@@34 $generated@@35 ($generated@@52 $generated@@35 $generated@@151) ($generated@@36 $generated@@152))))
 :pattern ( ($generated@@37 $generated@@151 ($generated@@36 $generated@@152)))
)))
(assert (forall (($generated@@153 T@U) ($generated@@154 Int) ($generated@@155 Int) ) (!  (=> (and (and (<= 0 $generated@@154) (<= $generated@@154 $generated@@155)) (< $generated@@155 ($generated@@20 $generated@@153))) (= ($generated@@41 ($generated@@22 $generated@@153 $generated@@154) (- $generated@@155 $generated@@154)) ($generated@@41 $generated@@153 $generated@@155)))
 :weight 25
 :pattern ( ($generated@@41 $generated@@153 $generated@@155) ($generated@@22 $generated@@153 $generated@@154))
)))
(assert (forall (($generated@@156 T@U) ($generated@@157 Int) ($generated@@158 Int) ) (!  (=> (and (and (<= 0 $generated@@157) (<= 0 $generated@@158)) (<= (+ $generated@@157 $generated@@158) ($generated@@20 $generated@@156))) (= ($generated@@22 ($generated@@22 $generated@@156 $generated@@157) $generated@@158) ($generated@@22 $generated@@156 (+ $generated@@157 $generated@@158))))
 :pattern ( ($generated@@22 ($generated@@22 $generated@@156 $generated@@157) $generated@@158))
)))
(assert (forall (($generated@@159 Int) ) (! (= ($generated@@53 $generated@@5 ($generated@@9 ($generated@@29 $generated@@159))) ($generated@@31 $generated@@93 ($generated@@53 $generated@@5 ($generated@@9 $generated@@159))))
 :pattern ( ($generated@@53 $generated@@5 ($generated@@9 ($generated@@29 $generated@@159))))
)))
(assert (forall (($generated@@160 T@U) ($generated@@161 T@T) ) (! (= ($generated@@53 $generated@@161 ($generated@@31 $generated@@161 $generated@@160)) ($generated@@31 $generated@@93 ($generated@@53 $generated@@161 $generated@@160)))
 :pattern ( ($generated@@53 $generated@@161 ($generated@@31 $generated@@161 $generated@@160)))
)))
(assert (forall (($generated@@162 T@U) ) (!  (=> (= ($generated@@20 $generated@@162) 0) (= $generated@@162 $generated@@21))
 :pattern ( ($generated@@20 $generated@@162))
)))
(assert (forall (($generated@@163 T@U) ($generated@@164 Int) ) (!  (=> (= $generated@@164 0) (= ($generated@@42 $generated@@163 $generated@@164) $generated@@21))
 :pattern ( ($generated@@42 $generated@@163 $generated@@164))
)))
(assert (forall (($generated@@165 T@U) ($generated@@166 T@U) ) (! ($generated@@59 $generated@@4 $generated@@166 $generated $generated@@165)
 :pattern ( ($generated@@59 $generated@@4 $generated@@166 $generated $generated@@165))
)))
(assert (forall (($generated@@167 T@U) ($generated@@168 T@U) ) (! (= ($generated@@34 $generated@@35 $generated@@167 ($generated@@36 $generated@@168)) (forall (($generated@@169 Int) ) (!  (=> (and (<= 0 $generated@@169) (< $generated@@169 ($generated@@20 $generated@@167))) ($generated@@37 ($generated@@41 $generated@@167 $generated@@169) $generated@@168))
 :pattern ( ($generated@@41 $generated@@167 $generated@@169))
)))
 :pattern ( ($generated@@34 $generated@@35 $generated@@167 ($generated@@36 $generated@@168)))
)))
(assert (forall (($generated@@170 T@U) ) (! ($generated@@34 $generated@@4 $generated@@170 $generated)
 :pattern ( ($generated@@34 $generated@@4 $generated@@170 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@171 () T@U)
(declare-fun $generated@@172 () T@U)
(declare-fun $generated@@173 () T@U)
(declare-fun $generated@@174 () T@U)
(declare-fun $generated@@175 () Bool)
(declare-fun $generated@@176 () T@U)
(declare-fun $generated@@177 (T@U) Bool)
(declare-fun $generated@@178 (T@U) Bool)
(declare-fun $generated@@179 () T@U)
(declare-fun $generated@@180 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 5) (let (($generated@@181  (=> (and (= $generated@@171 ($generated@@91 $generated@@172 $generated@@173 $generated@@2 false)) (= $generated@@174 ($generated@@23 $generated@@21 ($generated@@53 $generated@@4 ($generated@@7 $generated@@175))))) (and (=> (= (ControlFlow 0 2) (- 0 4)) (and (<= 0 ($generated@@29 0)) (<= ($generated@@29 0) ($generated@@20 $generated@@176)))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (and (<= ($generated@@29 0) ($generated@@29 1)) (<= ($generated@@29 1) ($generated@@20 $generated@@176)))) (=> (= (ControlFlow 0 2) (- 0 1)) ($generated@@48 ($generated@@22 ($generated@@42 $generated@@176 ($generated@@29 1)) ($generated@@29 0)) ($generated@@23 $generated@@21 ($generated@@53 $generated@@4 ($generated@@7 $generated@@175))))))))))
(let (($generated@@182  (=> (and (and ($generated@@177 $generated@@173) ($generated@@178 $generated@@173)) (and ($generated@@34 $generated@@35 $generated@@176 ($generated@@36 $generated)) ($generated@@59 $generated@@35 $generated@@176 ($generated@@36 $generated) $generated@@173))) (=> (and (and (and (and ($generated@@34 $generated@@35 $generated@@179 ($generated@@36 $generated)) ($generated@@59 $generated@@35 $generated@@179 ($generated@@36 $generated) $generated@@173)) true) (= 0 $generated@@180)) (and (and (<= ($generated@@29 1) ($generated@@20 $generated@@176)) (= $generated@@175 ($generated@@8 ($generated@@31 $generated@@4 ($generated@@7 false))))) (and (forall (($generated@@183 Int) ) (!  (=> (and (<= ($generated@@29 0) $generated@@183) (< $generated@@183 ($generated@@20 $generated@@176))) (= ($generated@@8 ($generated@@52 $generated@@4 ($generated@@41 $generated@@176 $generated@@183))) $generated@@175))
 :pattern ( ($generated@@52 $generated@@4 ($generated@@41 $generated@@176 $generated@@183)))
)) (= (ControlFlow 0 5) 2)))) $generated@@181))))
$generated@@182)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
