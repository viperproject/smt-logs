(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (Bool) T@U)
(declare-fun $generated@@7 (T@U) Bool)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun $generated@@9 (T@U) Int)
(declare-fun $generated@@10 (Real) T@U)
(declare-fun $generated@@11 (T@U) Real)
(declare-fun $generated@@18 (T@U) T@U)
(declare-fun $generated@@19 (T@T T@U) T@U)
(declare-fun $generated@@22 (T@T T@U) T@U)
(declare-fun $generated@@23 (T@T T@U) T@U)
(declare-fun $generated@@26 (T@U T@U T@U) Bool)
(declare-fun $generated@@27 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@32 () Int)
(declare-fun $generated@@33 (T@U T@U T@U) Bool)
(declare-fun $generated@@34 (T@U T@U T@U) Bool)
(declare-fun $generated@@35 (T@U T@U) Bool)
(declare-fun $generated@@36 () T@U)
(declare-fun $generated@@37 (T@U) Bool)
(declare-fun $generated@@38 (T@U) Bool)
(declare-fun $generated@@46 (T@T T@U T@U) Bool)
(declare-fun $generated@@53 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@54 () T@T)
(declare-fun $generated@@55 () T@T)
(declare-fun $generated@@56 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@57 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@58 () T@T)
(declare-fun $generated@@59 (T@T T@T) T@T)
(declare-fun $generated@@60 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@61 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@62 (T@T) T@T)
(declare-fun $generated@@63 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@4) 1)) (= ($generated@@2 $generated@@5) 2)) (forall (($generated@@12 Bool) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Int) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Real) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))))
(assert (distinct $generated $generated@@0 $generated@@1)
)
(assert (= ($generated@@18 $generated) $generated@@0))
(assert (forall (($generated@@20 T@U) ($generated@@21 T@T) ) (! (= ($generated@@19 $generated@@21 $generated@@20) $generated@@20)
 :pattern ( ($generated@@19 $generated@@21 $generated@@20))
)))
(assert (forall (($generated@@24 T@U) ($generated@@25 T@T) ) (! (= ($generated@@23 $generated@@25 ($generated@@22 $generated@@25 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@22 $generated@@25 $generated@@24))
)))
(assert (forall (($generated@@28 T@U) ($generated@@29 T@U) ($generated@@30 T@U) ($generated@@31 T@T) ) (! (= ($generated@@26 ($generated@@23 $generated@@31 $generated@@28) $generated@@29 $generated@@30) ($generated@@27 $generated@@31 $generated@@28 $generated@@29 $generated@@30))
 :pattern ( ($generated@@26 ($generated@@23 $generated@@31 $generated@@28) $generated@@29 $generated@@30))
)))
(assert  (=> (<= 0 $generated@@32) (forall (($generated@@39 T@U) ($generated@@40 T@U) ($generated@@41 T@U) ) (!  (=> (or ($generated@@34 $generated@@39 $generated@@40 $generated@@41) (and (< 0 $generated@@32) (and (and ($generated@@35 $generated@@39 $generated@@36) ($generated@@35 $generated@@40 $generated@@36)) ($generated@@35 $generated@@41 $generated@@36)))) (forall (($generated@@42 T@U) ) (!  (=> (and (and ($generated@@38 $generated@@42) ($generated@@37 $generated@@42)) (and ($generated@@33 $generated@@39 $generated@@40 $generated@@41) (and ($generated@@26 $generated@@40 $generated@@36 $generated@@42) ($generated@@26 $generated@@41 $generated@@36 $generated@@42)))) ($generated@@26 $generated@@39 $generated@@36 $generated@@42))
 :pattern ( ($generated@@37 $generated@@42))
)))
 :pattern ( ($generated@@33 $generated@@39 $generated@@40 $generated@@41))
))))
(assert  (=> (<= 0 $generated@@32) (forall (($generated@@43 T@U) ($generated@@44 T@U) ($generated@@45 T@U) ) (!  (=> (or ($generated@@34 $generated@@43 $generated@@44 $generated@@45) (and (< 0 $generated@@32) (and (and ($generated@@35 $generated@@43 $generated@@36) ($generated@@35 $generated@@44 $generated@@36)) ($generated@@35 $generated@@45 $generated@@36)))) (= ($generated@@33 $generated@@43 $generated@@44 $generated@@45) ($generated@@7 ($generated@@19 $generated@@3 ($generated@@6 true)))))
 :pattern ( ($generated@@33 $generated@@43 $generated@@44 $generated@@45))
))))
(assert (forall (($generated@@47 T@U) ) (!  (=> ($generated@@35 $generated@@47 $generated) (and (= ($generated@@23 $generated@@3 ($generated@@22 $generated@@3 $generated@@47)) $generated@@47) ($generated@@46 $generated@@3 ($generated@@22 $generated@@3 $generated@@47) $generated)))
 :pattern ( ($generated@@35 $generated@@47 $generated))
)))
(assert (forall (($generated@@48 T@U) ($generated@@49 T@U) ($generated@@50 T@T) ) (! (= ($generated@@35 ($generated@@23 $generated@@50 $generated@@48) $generated@@49) ($generated@@46 $generated@@50 $generated@@48 $generated@@49))
 :pattern ( ($generated@@35 ($generated@@23 $generated@@50 $generated@@48) $generated@@49))
)))
(assert (forall (($generated@@51 T@U) ($generated@@52 T@T) ) (! (= ($generated@@22 $generated@@52 ($generated@@23 $generated@@52 $generated@@51)) $generated@@51)
 :pattern ( ($generated@@23 $generated@@52 $generated@@51))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@64 T@T) ($generated@@65 T@T) ($generated@@66 T@T) ($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ) (! (= ($generated@@53 $generated@@64 $generated@@65 $generated@@66 ($generated@@60 $generated@@64 $generated@@65 $generated@@66 $generated@@68 $generated@@69 $generated@@70 $generated@@67) $generated@@69 $generated@@70) $generated@@67)
 :weight 0
)) (and (forall (($generated@@71 T@T) ($generated@@72 T@T) ($generated@@73 T@T) ($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ) (!  (or (= $generated@@76 $generated@@78) (= ($generated@@53 $generated@@71 $generated@@72 $generated@@73 ($generated@@60 $generated@@71 $generated@@72 $generated@@73 $generated@@75 $generated@@76 $generated@@77 $generated@@74) $generated@@78 $generated@@79) ($generated@@53 $generated@@71 $generated@@72 $generated@@73 $generated@@75 $generated@@78 $generated@@79)))
 :weight 0
)) (forall (($generated@@80 T@T) ($generated@@81 T@T) ($generated@@82 T@T) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ) (!  (or (= $generated@@86 $generated@@88) (= ($generated@@53 $generated@@80 $generated@@81 $generated@@82 ($generated@@60 $generated@@80 $generated@@81 $generated@@82 $generated@@84 $generated@@85 $generated@@86 $generated@@83) $generated@@87 $generated@@88) ($generated@@53 $generated@@80 $generated@@81 $generated@@82 $generated@@84 $generated@@87 $generated@@88)))
 :weight 0
)))) (= ($generated@@2 $generated@@54) 3)) (= ($generated@@2 $generated@@55) 4)) (forall (($generated@@89 T@T) ($generated@@90 T@T) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ) (! (= ($generated@@57 $generated@@89 $generated@@90 ($generated@@61 $generated@@89 $generated@@90 $generated@@92 $generated@@93 $generated@@91) $generated@@93) $generated@@91)
 :weight 0
))) (forall (($generated@@94 T@T) ($generated@@95 T@T) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ) (!  (or (= $generated@@98 $generated@@99) (= ($generated@@57 $generated@@94 $generated@@95 ($generated@@61 $generated@@94 $generated@@95 $generated@@97 $generated@@98 $generated@@96) $generated@@99) ($generated@@57 $generated@@94 $generated@@95 $generated@@97 $generated@@99)))
 :weight 0
))) (= ($generated@@2 $generated@@58) 5)) (forall (($generated@@100 T@T) ($generated@@101 T@T) ) (= ($generated@@2 ($generated@@59 $generated@@100 $generated@@101)) 6))) (forall (($generated@@102 T@T) ($generated@@103 T@T) ) (! (= ($generated@@62 ($generated@@59 $generated@@102 $generated@@103)) $generated@@102)
 :pattern ( ($generated@@59 $generated@@102 $generated@@103))
))) (forall (($generated@@104 T@T) ($generated@@105 T@T) ) (! (= ($generated@@63 ($generated@@59 $generated@@104 $generated@@105)) $generated@@105)
 :pattern ( ($generated@@59 $generated@@104 $generated@@105))
))))
(assert (forall (($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 Bool) ($generated@@110 T@U) ($generated@@111 T@U) ) (! (= ($generated@@7 ($generated@@53 $generated@@54 $generated@@55 $generated@@3 ($generated@@56 $generated@@106 $generated@@107 $generated@@108 $generated@@109) $generated@@110 $generated@@111))  (=> (and (or (not (= $generated@@110 $generated@@106)) (not true)) ($generated@@7 ($generated@@22 $generated@@3 ($generated@@57 $generated@@55 $generated@@58 ($generated@@57 $generated@@54 ($generated@@59 $generated@@55 $generated@@58) $generated@@107 $generated@@110) $generated@@108)))) $generated@@109))
 :pattern ( ($generated@@53 $generated@@54 $generated@@55 $generated@@3 ($generated@@56 $generated@@106 $generated@@107 $generated@@108 $generated@@109) $generated@@110 $generated@@111))
)))
(assert  (=> (<= 0 $generated@@32) (forall (($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ) (!  (=> (or ($generated@@34 ($generated@@19 $generated@@58 $generated@@112) ($generated@@19 $generated@@58 $generated@@113) ($generated@@19 $generated@@58 $generated@@114)) (and (< 0 $generated@@32) (and (and ($generated@@35 $generated@@112 $generated@@36) ($generated@@35 $generated@@113 $generated@@36)) ($generated@@35 $generated@@114 $generated@@36)))) (= ($generated@@33 ($generated@@19 $generated@@58 $generated@@112) ($generated@@19 $generated@@58 $generated@@113) ($generated@@19 $generated@@58 $generated@@114)) ($generated@@7 ($generated@@19 $generated@@3 ($generated@@6 true)))))
 :weight 3
 :pattern ( ($generated@@33 ($generated@@19 $generated@@58 $generated@@112) ($generated@@19 $generated@@58 $generated@@113) ($generated@@19 $generated@@58 $generated@@114)))
))))
(assert (forall (($generated@@115 T@U) ($generated@@116 T@T) ) (! (= ($generated@@23 $generated@@116 ($generated@@19 $generated@@116 $generated@@115)) ($generated@@19 $generated@@58 ($generated@@23 $generated@@116 $generated@@115)))
 :pattern ( ($generated@@23 $generated@@116 ($generated@@19 $generated@@116 $generated@@115)))
)))
(assert (forall (($generated@@117 T@U) ($generated@@118 T@U) ) (! ($generated@@27 $generated@@3 $generated@@118 $generated $generated@@117)
 :pattern ( ($generated@@27 $generated@@3 $generated@@118 $generated $generated@@117))
)))
(assert (forall (($generated@@119 T@U) ) (! ($generated@@46 $generated@@3 $generated@@119 $generated)
 :pattern ( ($generated@@46 $generated@@3 $generated@@119 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@120 () T@U)
(declare-fun $generated@@121 () T@U)
(declare-fun $generated@@122 () T@U)
(declare-fun $generated@@123 () T@U)
(declare-fun $generated@@124 () T@U)
(declare-fun $generated@@125 () T@U)
(declare-fun $generated@@126 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 6) (let (($generated@@127  (=> (= (ControlFlow 0 3) (- 0 2)) (forall (($generated@@128 T@U) ) (!  (=> (and (and ($generated@@38 $generated@@128) ($generated@@37 $generated@@128)) (and ($generated@@33 $generated@@120 $generated@@121 $generated@@122) (and ($generated@@26 $generated@@121 $generated@@36 $generated@@128) ($generated@@26 $generated@@122 $generated@@36 $generated@@128)))) ($generated@@26 $generated@@120 $generated@@36 $generated@@128))
 :pattern ( ($generated@@37 $generated@@128))
)))))
(let (($generated@@129  (=> (= ($generated@@33 $generated@@120 $generated@@121 $generated@@122) ($generated@@7 ($generated@@19 $generated@@3 ($generated@@6 true)))) (=> (and ($generated@@46 $generated@@3 ($generated@@6 ($generated@@33 $generated@@120 $generated@@121 $generated@@122)) $generated) (= (ControlFlow 0 4) 3)) $generated@@127))))
(let (($generated@@130 true))
(let (($generated@@131  (=> (= $generated@@123 ($generated@@56 $generated@@124 $generated@@125 $generated@@1 false)) (and (=> (= (ControlFlow 0 5) 1) $generated@@130) (=> (= (ControlFlow 0 5) 4) $generated@@129)))))
(let (($generated@@132  (=> (and (and (and ($generated@@38 $generated@@125) ($generated@@126 $generated@@125)) ($generated@@35 $generated@@120 $generated@@36)) (and (and ($generated@@35 $generated@@121 $generated@@36) ($generated@@35 $generated@@122 $generated@@36)) (and (= 0 $generated@@32) (= (ControlFlow 0 6) 5)))) $generated@@131)))
$generated@@132))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 3) (- 2))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
