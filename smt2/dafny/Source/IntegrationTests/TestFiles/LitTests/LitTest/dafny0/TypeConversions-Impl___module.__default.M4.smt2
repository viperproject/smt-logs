(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.UseTheVars (Int Int Real Int Real (_ BitVec 67) (_ BitVec 32) (_ BitVec 7) Int) Bool)
(declare-fun LitInt (Int) Int)
(declare-fun LitReal (Real) Real)
(declare-fun U_2_bv67 (T@U) (_ BitVec 67))
(declare-fun Lit (T@T T@U) T@U)
(declare-fun bv67Type () T@T)
(declare-fun U_2_bv32 (T@U) (_ BitVec 32))
(declare-fun bv32Type () T@T)
(declare-fun U_2_bv7 (T@U) (_ BitVec 7))
(declare-fun bv7Type () T@T)
(declare-fun |_module.__default.UseTheVars#canCall| (Int Int Real Int Real (_ BitVec 67) (_ BitVec 32) (_ BitVec 7) Int) Bool)
(declare-fun Mod (Int Int) Int)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun boolType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bv67_2_U ((_ BitVec 67)) T@U)
(declare-fun bv32_2_U ((_ BitVec 32)) T@U)
(declare-fun bv7_2_U ((_ BitVec 7)) T@U)
(declare-fun q@Int (Real) Int)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun nat_from_bv7 ((_ BitVec 7)) Int)
(declare-fun q@Real (Int) Real)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))) (= (Ctor bv67Type) 3)) (forall ((arg0@@2 (_ BitVec 67)) ) (! (= (U_2_bv67 (bv67_2_U arg0@@2)) arg0@@2)
 :pattern ( (bv67_2_U arg0@@2))
))) (forall ((x@@2 T@U) ) (! (= (bv67_2_U (U_2_bv67 x@@2)) x@@2)
 :pattern ( (U_2_bv67 x@@2))
))) (= (Ctor bv32Type) 4)) (forall ((arg0@@3 (_ BitVec 32)) ) (! (= (U_2_bv32 (bv32_2_U arg0@@3)) arg0@@3)
 :pattern ( (bv32_2_U arg0@@3))
))) (forall ((x@@3 T@U) ) (! (= (bv32_2_U (U_2_bv32 x@@3)) x@@3)
 :pattern ( (U_2_bv32 x@@3))
))) (= (Ctor bv7Type) 5)) (forall ((arg0@@4 (_ BitVec 7)) ) (! (= (U_2_bv7 (bv7_2_U arg0@@4)) arg0@@4)
 :pattern ( (bv7_2_U arg0@@4))
))) (forall ((x@@4 T@U) ) (! (= (bv7_2_U (U_2_bv7 x@@4)) x@@4)
 :pattern ( (U_2_bv7 x@@4))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|x#0| Int) (|n#0| Int) (|r#0| Real) (|even#0| Int) (|small#0| Real) (|b67#0| T@U) (|w#0| T@U) (|seven#0| T@U) (|noll#0| Int) ) (!  (=> (or (|_module.__default.UseTheVars#canCall| (LitInt |x#0|) (LitInt |n#0|) (LitReal |r#0|) (LitInt |even#0|) (LitReal |small#0|) (U_2_bv67 (Lit bv67Type |b67#0|)) (U_2_bv32 (Lit bv32Type |w#0|)) (U_2_bv7 (Lit bv7Type |seven#0|)) (LitInt |noll#0|)) (and (< 1 $FunctionContextHeight) (and (and (and (<= (LitInt 0) |n#0|) (= (Mod |even#0| (LitInt 2)) (LitInt 0))) (and (<= (LitReal (- 0.0 4.0)) |small#0|) (< |small#0| 300.0))) (= 0 |noll#0|)))) (= (_module.__default.UseTheVars (LitInt |x#0|) (LitInt |n#0|) (LitReal |r#0|) (LitInt |even#0|) (LitReal |small#0|) (U_2_bv67 (Lit bv67Type |b67#0|)) (U_2_bv32 (Lit bv32Type |w#0|)) (U_2_bv7 (Lit bv7Type |seven#0|)) (LitInt |noll#0|)) (U_2_bool (Lit boolType (bool_2_U true)))))
 :weight 3
 :pattern ( (_module.__default.UseTheVars (LitInt |x#0|) (LitInt |n#0|) (LitReal |r#0|) (LitInt |even#0|) (LitReal |small#0|) (U_2_bv67 (Lit bv67Type |b67#0|)) (U_2_bv32 (Lit bv32Type |w#0|)) (U_2_bv7 (Lit bv7Type |seven#0|)) (LitInt |noll#0|)))
))))
(assert (forall ((x@@5 Real) ) (! (= (q@Int x@@5) (to_int x@@5))
 :pattern ( (q@Int x@@5))
)))
(assert (forall ((x@@6 Int) ) (! (= (LitInt x@@6) x@@6)
 :pattern ( (LitInt x@@6))
)))
(assert (forall ((x@@7 Real) ) (! (= (LitReal x@@7) x@@7)
 :pattern ( (LitReal x@@7))
)))
(assert (forall ((x@@8 T@U) (T T@T) ) (! (= (Lit T x@@8) x@@8)
 :pattern ( (Lit T x@@8))
)))
(assert (forall ((x@@9 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@9)) x@@9)
 :pattern ( ($Unbox T@@0 x@@9))
)))
(assert (forall ((b (_ BitVec 7)) ) (!  (and (and (<= 0 (nat_from_bv7 b)) (< (nat_from_bv7 b) 128)) (= (nat_from_bv7 b) (bv2int b)))
 :pattern ( (nat_from_bv7 b))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|x#0@@0| Int) (|n#0@@0| Int) (|r#0@@0| Real) (|even#0@@0| Int) (|small#0@@0| Real) (|b67#0@@0| (_ BitVec 67)) (|w#0@@0| (_ BitVec 32)) (|seven#0@@0| (_ BitVec 7)) (|noll#0@@0| Int) ) (!  (=> (or (|_module.__default.UseTheVars#canCall| |x#0@@0| |n#0@@0| |r#0@@0| |even#0@@0| |small#0@@0| |b67#0@@0| |w#0@@0| |seven#0@@0| |noll#0@@0|) (and (< 1 $FunctionContextHeight) (and (and (and (<= (LitInt 0) |n#0@@0|) (= (Mod |even#0@@0| (LitInt 2)) (LitInt 0))) (and (<= (LitReal (- 0.0 4.0)) |small#0@@0|) (< |small#0@@0| 300.0))) (= 0 |noll#0@@0|)))) (= (_module.__default.UseTheVars |x#0@@0| |n#0@@0| |r#0@@0| |even#0@@0| |small#0@@0| |b67#0@@0| |w#0@@0| |seven#0@@0| |noll#0@@0|) (U_2_bool (Lit boolType (bool_2_U true)))))
 :pattern ( (_module.__default.UseTheVars |x#0@@0| |n#0@@0| |r#0@@0| |even#0@@0| |small#0@@0| |b67#0@@0| |w#0@@0| |seven#0@@0| |noll#0@@0|))
))))
(assert (forall ((x@@10 Int) ) (! (= (q@Real x@@10) (to_real x@@10))
 :pattern ( (q@Real x@@10))
)))
(assert (forall ((i Int) ) (! (= (q@Int (q@Real i)) i)
 :pattern ( (q@Int (q@Real i)))
)))
(assert (forall ((x@@11 T@U) (T@@1 T@T) ) (! (= ($Unbox T@@1 ($Box T@@1 x@@11)) x@@11)
 :pattern ( ($Box T@@1 x@@11))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0 t1 t2 (MapType0Store t0 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 6)) (= (Ctor FieldType) 7)) (forall ((t0@@0 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 (MapType1Store t0@@0 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :weight 0
))) (= (Ctor BoxType) 8)) (forall ((arg0@@5 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@5 arg1)) 9))) (forall ((arg0@@6 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@6 arg1@@0)) arg0@@6)
 :pattern ( (MapType1Type arg0@@6 arg1@@0))
))) (forall ((arg0@@7 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@7 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@7 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((x@@12 Int) (y Int) ) (! (= (Mod x@@12 y) (mod x@@12 y))
 :pattern ( (Mod x@@12 y))
)))
(assert (forall ((x@@13 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@13))) (Lit BoxType ($Box intType (int_2_U x@@13))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@13))))
)))
(assert (forall ((x@@14 Real) ) (! (= ($Box realType (real_2_U (LitReal x@@14))) (Lit BoxType ($Box realType (real_2_U x@@14))))
 :pattern ( ($Box realType (real_2_U (LitReal x@@14))))
)))
(assert (forall ((x@@15 T@U) (T@@2 T@T) ) (! (= ($Box T@@2 (Lit T@@2 x@@15)) (Lit BoxType ($Box T@@2 x@@15)))
 :pattern ( ($Box T@@2 (Lit T@@2 x@@15)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |x#0@@1| () Int)
(declare-fun |n#0@@1| () Int)
(declare-fun |r#0@@1| () Real)
(declare-fun |even#0@6| () Int)
(declare-fun |small#0@1| () Real)
(declare-fun |seven#0@@1| () (_ BitVec 7))
(declare-fun |w#0@@1| () (_ BitVec 32))
(declare-fun |noll#0@@1| () Int)
(declare-fun |small#0@@1| () Real)
(declare-fun |newtype$check#0_4@0| () Int)
(declare-fun |even#0@5| () Int)
(declare-fun |newtype$check#0_0@0| () Int)
(declare-fun |newtype$check#0_1@0| () Real)
(declare-fun |newtype$check#1_0@0| () Int)
(declare-fun |newtype$check#1_1@0| () Real)
(declare-fun |newtype$check#1_3@0| () Int)
(declare-fun |even#0@4| () Int)
(declare-fun |newtype$check#2_1@0| () Int)
(declare-fun |even#0@3| () Int)
(declare-fun |newtype$check#3_1@0| () Real)
(declare-fun |small#0@0| () Real)
(declare-fun |even#0@@1| () Int)
(declare-fun |newtype$check#4_1@0| () Int)
(declare-fun |even#0@2| () Int)
(declare-fun |newtype$check#5_1@0| () Int)
(declare-fun |even#0@1| () Int)
(declare-fun |newtype$check#6_1@0| () Int)
(declare-fun |even#0@0| () Int)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $Heap () T@U)
(declare-fun alloc () T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsHeapAnchor (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 40) (let ((GeneratedUnifiedExit_correct  (=> (= (ControlFlow 0 4) (- 0 3)) (=> (|_module.__default.UseTheVars#canCall| |x#0@@1| |n#0@@1| |r#0@@1| |even#0@6| |small#0@1| (concat #b000000000000000000000000000000000000000000000000000000000000 |seven#0@@1|) |w#0@@1| |seven#0@@1| |noll#0@@1|) (or (_module.__default.UseTheVars |x#0@@1| |n#0@@1| |r#0@@1| |even#0@6| |small#0@1| (concat #b000000000000000000000000000000000000000000000000000000000000 |seven#0@@1|) |w#0@@1| |seven#0@@1| |noll#0@@1|) (U_2_bool (Lit boolType (bool_2_U true))))))))
(let ((anon9_correct  (=> (and (= |small#0@@1| (q@Real (q@Int |small#0@@1|))) (= (Mod (q@Int |small#0@@1|) (LitInt 2)) (LitInt 0))) (and (=> (= (ControlFlow 0 28) (- 0 31)) (= (q@Real (q@Int |small#0@@1|)) |small#0@@1|)) (=> (= (q@Real (q@Int |small#0@@1|)) |small#0@@1|) (and (=> (= (ControlFlow 0 28) (- 0 30)) (= (Mod (q@Int |small#0@@1|) (LitInt 2)) (LitInt 0))) (=> (= (Mod (q@Int |small#0@@1|) (LitInt 2)) (LitInt 0)) (=> (= |newtype$check#0_4@0| (q@Int |small#0@@1|)) (and (=> (= (ControlFlow 0 28) (- 0 29)) (= (Mod |newtype$check#0_4@0| (LitInt 2)) (LitInt 0))) (=> (= (Mod |newtype$check#0_4@0| (LitInt 2)) (LitInt 0)) (=> (and (and (= |even#0@5| (q@Int |small#0@@1|)) (= |even#0@6| |even#0@5|)) (and (= |small#0@1| |small#0@@1|) (= (ControlFlow 0 28) 4))) GeneratedUnifiedExit_correct)))))))))))
(let ((anon18_Else_correct  (=> (and (or (not (= |small#0@@1| (q@Real (q@Int |small#0@@1|)))) (not true)) (= (ControlFlow 0 35) 28)) anon9_correct)))
(let ((anon18_Then_correct  (=> (= |small#0@@1| (q@Real (q@Int |small#0@@1|))) (and (=> (= (ControlFlow 0 32) (- 0 34)) (= (q@Real (q@Int |small#0@@1|)) |small#0@@1|)) (=> (= (q@Real (q@Int |small#0@@1|)) |small#0@@1|) (and (=> (= (ControlFlow 0 32) (- 0 33)) (or (not (= (LitInt 2) 0)) (not true))) (=> (or (not (= (LitInt 2) 0)) (not true)) (=> (= (ControlFlow 0 32) 28) anon9_correct))))))))
(let ((anon17_Then_correct  (=> (= |newtype$check#0_0@0| (q@Int |small#0@@1|)) (and (=> (= (ControlFlow 0 36) (- 0 38)) (and (<= (LitReal (- 0.0 4.0)) (q@Real |newtype$check#0_0@0|)) (< (q@Real |newtype$check#0_0@0|) 300.0))) (=> (and (<= (LitReal (- 0.0 4.0)) (q@Real |newtype$check#0_0@0|)) (< (q@Real |newtype$check#0_0@0|) 300.0)) (=> (= |newtype$check#0_1@0| (q@Real (q@Int |small#0@@1|))) (and (=> (= (ControlFlow 0 36) (- 0 37)) (and (<= (LitReal (- 0.0 4.0)) |newtype$check#0_1@0|) (< |newtype$check#0_1@0| 300.0))) (=> (and (<= (LitReal (- 0.0 4.0)) |newtype$check#0_1@0|) (< |newtype$check#0_1@0| 300.0)) (and (=> (= (ControlFlow 0 36) 32) anon18_Then_correct) (=> (= (ControlFlow 0 36) 35) anon18_Else_correct))))))))))
(let ((anon16_Then_correct  (=> (= |newtype$check#1_0@0| (q@Int |small#0@@1|)) (and (=> (= (ControlFlow 0 22) (- 0 27)) (and (<= (LitReal (- 0.0 4.0)) (q@Real |newtype$check#1_0@0|)) (< (q@Real |newtype$check#1_0@0|) 300.0))) (=> (and (<= (LitReal (- 0.0 4.0)) (q@Real |newtype$check#1_0@0|)) (< (q@Real |newtype$check#1_0@0|) 300.0)) (=> (= |newtype$check#1_1@0| (q@Real (q@Int |small#0@@1|))) (and (=> (= (ControlFlow 0 22) (- 0 26)) (and (<= (LitReal (- 0.0 4.0)) |newtype$check#1_1@0|) (< |newtype$check#1_1@0| 300.0))) (=> (and (<= (LitReal (- 0.0 4.0)) |newtype$check#1_1@0|) (< |newtype$check#1_1@0| 300.0)) (=> (= |small#0@@1| (q@Real (q@Int |small#0@@1|))) (and (=> (= (ControlFlow 0 22) (- 0 25)) (= (q@Real (q@Int |small#0@@1|)) |small#0@@1|)) (=> (= (q@Real (q@Int |small#0@@1|)) |small#0@@1|) (and (=> (= (ControlFlow 0 22) (- 0 24)) (= (Mod (q@Int |small#0@@1|) (LitInt 2)) (LitInt 0))) (=> (= (Mod (q@Int |small#0@@1|) (LitInt 2)) (LitInt 0)) (=> (= |newtype$check#1_3@0| (q@Int |small#0@@1|)) (and (=> (= (ControlFlow 0 22) (- 0 23)) (= (Mod |newtype$check#1_3@0| (LitInt 2)) (LitInt 0))) (=> (= (Mod |newtype$check#1_3@0| (LitInt 2)) (LitInt 0)) (=> (and (and (= |even#0@4| (q@Int |small#0@@1|)) (= |even#0@6| |even#0@4|)) (and (= |small#0@1| |small#0@@1|) (= (ControlFlow 0 22) 4))) GeneratedUnifiedExit_correct)))))))))))))))))
(let ((anon15_Then_correct  (and (=> (= (ControlFlow 0 18) (- 0 21)) (= (q@Real (q@Int |small#0@@1|)) |small#0@@1|)) (=> (= (q@Real (q@Int |small#0@@1|)) |small#0@@1|) (and (=> (= (ControlFlow 0 18) (- 0 20)) (= (Mod (q@Int |small#0@@1|) (LitInt 2)) (LitInt 0))) (=> (= (Mod (q@Int |small#0@@1|) (LitInt 2)) (LitInt 0)) (=> (= |newtype$check#2_1@0| (q@Int |small#0@@1|)) (and (=> (= (ControlFlow 0 18) (- 0 19)) (= (Mod |newtype$check#2_1@0| (LitInt 2)) (LitInt 0))) (=> (= (Mod |newtype$check#2_1@0| (LitInt 2)) (LitInt 0)) (=> (and (and (= |even#0@3| (q@Int |small#0@@1|)) (= |even#0@6| |even#0@3|)) (and (= |small#0@1| |small#0@@1|) (= (ControlFlow 0 18) 4))) GeneratedUnifiedExit_correct))))))))))
(let ((anon14_Then_correct  (and (=> (= (ControlFlow 0 15) (- 0 17)) (and (<= (LitReal (- 0.0 4.0)) (q@Real (nat_from_bv7 |seven#0@@1|))) (< (q@Real (nat_from_bv7 |seven#0@@1|)) 300.0))) (=> (and (<= (LitReal (- 0.0 4.0)) (q@Real (nat_from_bv7 |seven#0@@1|))) (< (q@Real (nat_from_bv7 |seven#0@@1|)) 300.0)) (=> (= |newtype$check#3_1@0| (q@Real (nat_from_bv7 |seven#0@@1|))) (and (=> (= (ControlFlow 0 15) (- 0 16)) (and (<= (LitReal (- 0.0 4.0)) |newtype$check#3_1@0|) (< |newtype$check#3_1@0| 300.0))) (=> (and (<= (LitReal (- 0.0 4.0)) |newtype$check#3_1@0|) (< |newtype$check#3_1@0| 300.0)) (=> (and (and (= |small#0@0| (q@Real (nat_from_bv7 |seven#0@@1|))) (= |even#0@6| |even#0@@1|)) (and (= |small#0@1| |small#0@0|) (= (ControlFlow 0 15) 4))) GeneratedUnifiedExit_correct))))))))
(let ((anon13_Then_correct  (and (=> (= (ControlFlow 0 11) (- 0 14)) (or (not (= (LitInt 2) 0)) (not true))) (=> (or (not (= (LitInt 2) 0)) (not true)) (=> (= (Mod (nat_from_bv7 |seven#0@@1|) (LitInt 2)) (LitInt 0)) (and (=> (= (ControlFlow 0 11) (- 0 13)) (= (Mod (nat_from_bv7 |seven#0@@1|) (LitInt 2)) (LitInt 0))) (=> (= (Mod (nat_from_bv7 |seven#0@@1|) (LitInt 2)) (LitInt 0)) (=> (= |newtype$check#4_1@0| (nat_from_bv7 |seven#0@@1|)) (and (=> (= (ControlFlow 0 11) (- 0 12)) (= (Mod |newtype$check#4_1@0| (LitInt 2)) (LitInt 0))) (=> (= (Mod |newtype$check#4_1@0| (LitInt 2)) (LitInt 0)) (=> (and (and (= |even#0@2| (nat_from_bv7 |seven#0@@1|)) (= |even#0@6| |even#0@2|)) (and (= |small#0@1| |small#0@@1|) (= (ControlFlow 0 11) 4))) GeneratedUnifiedExit_correct)))))))))))
(let ((anon12_Then_correct  (and (=> (= (ControlFlow 0 8) (- 0 10)) (= (Mod (nat_from_bv7 |seven#0@@1|) (LitInt 2)) (LitInt 0))) (=> (= (Mod (nat_from_bv7 |seven#0@@1|) (LitInt 2)) (LitInt 0)) (=> (= |newtype$check#5_1@0| (nat_from_bv7 |seven#0@@1|)) (and (=> (= (ControlFlow 0 8) (- 0 9)) (= (Mod |newtype$check#5_1@0| (LitInt 2)) (LitInt 0))) (=> (= (Mod |newtype$check#5_1@0| (LitInt 2)) (LitInt 0)) (=> (and (and (= |even#0@1| (nat_from_bv7 |seven#0@@1|)) (= |even#0@6| |even#0@1|)) (and (= |small#0@1| |small#0@@1|) (= (ControlFlow 0 8) 4))) GeneratedUnifiedExit_correct))))))))
(let ((anon11_Then_correct  (and (=> (= (ControlFlow 0 5) (- 0 7)) (= (Mod 0 (LitInt 2)) (LitInt 0))) (=> (= (Mod 0 (LitInt 2)) (LitInt 0)) (=> (= |newtype$check#6_1@0| 0) (and (=> (= (ControlFlow 0 5) (- 0 6)) (= (Mod |newtype$check#6_1@0| (LitInt 2)) (LitInt 0))) (=> (= (Mod |newtype$check#6_1@0| (LitInt 2)) (LitInt 0)) (=> (and (and (= |even#0@0| 0) (= |even#0@6| |even#0@0|)) (and (= |small#0@1| |small#0@@1|) (= (ControlFlow 0 5) 4))) GeneratedUnifiedExit_correct))))))))
(let ((anon17_Else_correct  (=> (and (and (and (and (and (and (and (not (U_2_bool (Lit boolType (bool_2_U true)))) (not (U_2_bool (Lit boolType (bool_2_U true))))) (or (not (= (Mod (nat_from_bv7 |seven#0@@1|) (LitInt 2)) (LitInt 0))) (not true))) (not (U_2_bool (Lit boolType (bool_2_U true))))) (not (U_2_bool (Lit boolType (bool_2_U true))))) (or (not (= |small#0@@1| (q@Real (q@Int |small#0@@1|)))) (not true))) (not (and (= |small#0@@1| (q@Real (q@Int |small#0@@1|))) (= (Mod (q@Int |small#0@@1|) (LitInt 2)) (LitInt 0))))) (= (ControlFlow 0 2) (- 0 1))) false)))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (and (and (and (and (and (and (and (=> (= (ControlFlow 0 39) 5) anon11_Then_correct) (=> (= (ControlFlow 0 39) 8) anon12_Then_correct)) (=> (= (ControlFlow 0 39) 11) anon13_Then_correct)) (=> (= (ControlFlow 0 39) 15) anon14_Then_correct)) (=> (= (ControlFlow 0 39) 18) anon15_Then_correct)) (=> (= (ControlFlow 0 39) 22) anon16_Then_correct)) (=> (= (ControlFlow 0 39) 36) anon17_Then_correct)) (=> (= (ControlFlow 0 39) 2) anon17_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (and (<= (LitInt 0) |n#0@@1|) (= (Mod |even#0@@1| (LitInt 2)) (LitInt 0)))) (=> (and (and (and (<= (LitReal (- 0.0 4.0)) |small#0@@1|) (< |small#0@@1| 300.0)) (= 0 |noll#0@@1|)) (and (= 2 $FunctionContextHeight) (= (ControlFlow 0 40) 39))) anon0_correct))))
PreconditionGeneratedEntry_correct)))))))))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 8) (- 10))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 18) (- 21))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 18) (- 20))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 22) (- 24))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
