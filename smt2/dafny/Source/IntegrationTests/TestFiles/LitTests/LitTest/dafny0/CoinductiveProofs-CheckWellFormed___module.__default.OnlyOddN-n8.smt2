(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 (T@T) Int)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Bool) T@U)
(declare-fun $generated@@9 (T@U) Bool)
(declare-fun $generated@@10 (Int) T@U)
(declare-fun $generated@@11 (T@U) Int)
(declare-fun $generated@@12 (Real) T@U)
(declare-fun $generated@@13 (T@U) Real)
(declare-fun $generated@@20 (T@U) T@U)
(declare-fun $generated@@21 (T@U T@U) Bool)
(declare-fun $generated@@25 (T@U T@U) T@U)
(declare-fun $generated@@26 (Int) T@U)
(declare-fun $generated@@27 (T@U) Int)
(declare-fun $generated@@31 () Int)
(declare-fun $generated@@32 (T@U T@U Int) Bool)
(declare-fun $generated@@33 (T@U) T@U)
(declare-fun $generated@@34 (T@U Int) Bool)
(declare-fun $generated@@35 (Int) Int)
(declare-fun $generated@@41 (T@T T@U) T@U)
(declare-fun $generated@@42 () T@T)
(declare-fun $generated@@54 (T@T T@U) T@U)
(declare-fun $generated@@55 (T@T T@U) T@U)
(declare-fun $generated@@61 (T@U) Bool)
(declare-fun $generated@@77 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@78 () T@T)
(declare-fun $generated@@79 () T@T)
(declare-fun $generated@@80 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@81 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@82 (T@T T@T) T@T)
(declare-fun $generated@@83 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@84 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@85 (T@T) T@T)
(declare-fun $generated@@86 (T@T) T@T)
(declare-fun $generated@@135 (Int Int) Int)
(declare-fun $generated@@144 (T@T T@U T@U T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@4 $generated@@5) 0) (= ($generated@@4 $generated@@6) 1)) (= ($generated@@4 $generated@@7) 2)) (forall (($generated@@14 Bool) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Int) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Real) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3)
)
(assert (= ($generated@@20 $generated) $generated@@1))
(assert (= ($generated@@20 $generated@@0) $generated@@2))
(assert (forall (($generated@@22 T@U) ($generated@@23 T@U) ($generated@@24 T@U) ) (!  (=> (and ($generated@@21 $generated@@22 $generated@@23) ($generated@@21 $generated@@23 $generated@@24)) ($generated@@21 $generated@@22 $generated@@24))
 :pattern ( ($generated@@21 $generated@@22 $generated@@23) ($generated@@21 $generated@@23 $generated@@24))
 :pattern ( ($generated@@21 $generated@@22 $generated@@23) ($generated@@21 $generated@@22 $generated@@24))
)))
(assert (forall (($generated@@28 T@U) ($generated@@29 Int) ($generated@@30 Int) ) (!  (=> (and (and (<= 0 $generated@@29) (<= 0 $generated@@30)) (<= (+ $generated@@29 $generated@@30) ($generated@@27 $generated@@28))) (= ($generated@@25 ($generated@@25 $generated@@28 ($generated@@26 $generated@@29)) ($generated@@26 $generated@@30)) ($generated@@25 $generated@@28 ($generated@@26 (+ $generated@@29 $generated@@30)))))
 :pattern ( ($generated@@25 ($generated@@25 $generated@@28 ($generated@@26 $generated@@29)) ($generated@@26 $generated@@30)))
)))
(assert  (=> (<= 1 $generated@@31) (forall (($generated@@36 T@U) ($generated@@37 T@U) ($generated@@38 Int) ) (!  (=> (or ($generated@@34 $generated@@37 $generated@@38) (< 1 $generated@@31)) (and (and (=> (< 0 ($generated@@27 $generated@@37)) (=> (or (not (= $generated@@38 (- 0 2))) (not true)) ($generated@@34 ($generated@@25 $generated@@37 ($generated@@26 1)) (+ $generated@@38 2)))) (=> (=> (< 0 ($generated@@27 $generated@@37)) (and (or (not (= $generated@@38 (- 0 2))) (not true)) ($generated@@32 $generated@@36 ($generated@@25 $generated@@37 ($generated@@26 1)) (+ $generated@@38 2)))) (=> (= ($generated@@35 0) ($generated@@27 $generated@@37)) (forall (($generated@@39 T@U) ) (!  (=> ($generated@@21 $generated@@39 $generated@@37) ($generated@@34 $generated@@39 $generated@@38))
 :pattern ( ($generated@@32 $generated@@36 $generated@@39 $generated@@38))
))))) (= ($generated@@32 ($generated@@33 $generated@@36) $generated@@37 $generated@@38)  (and (=> (< 0 ($generated@@27 $generated@@37)) (and (or (not (= $generated@@38 (- 0 2))) (not true)) ($generated@@32 $generated@@36 ($generated@@25 $generated@@37 ($generated@@26 1)) (+ $generated@@38 2)))) (=> (= ($generated@@35 0) ($generated@@27 $generated@@37)) (forall (($generated@@40 T@U) ) (!  (=> ($generated@@21 $generated@@40 $generated@@37) ($generated@@32 $generated@@36 $generated@@40 $generated@@38))
 :pattern ( ($generated@@32 $generated@@36 $generated@@40 $generated@@38))
)))))))
 :pattern ( ($generated@@32 ($generated@@33 $generated@@36) $generated@@37 $generated@@38))
))))
(assert (= ($generated@@4 $generated@@42) 3))
(assert  (=> (<= 1 $generated@@31) (forall (($generated@@43 T@U) ($generated@@44 T@U) ($generated@@45 Int) ) (!  (=> (or ($generated@@34 ($generated@@41 $generated@@42 $generated@@44) ($generated@@35 $generated@@45)) (< 1 $generated@@31)) (and (and (=> (< 0 ($generated@@27 $generated@@44)) (=> ($generated@@9 ($generated@@41 $generated@@5 ($generated@@8  (or (not (= $generated@@45 (- 0 2))) (not true))))) ($generated@@34 ($generated@@25 $generated@@44 ($generated@@26 1)) ($generated@@35 (+ $generated@@45 2))))) (=> (=> (< 0 ($generated@@27 $generated@@44)) (and (or (not (= $generated@@45 (- 0 2))) (not true)) ($generated@@32 ($generated@@33 $generated@@43) ($generated@@25 $generated@@44 ($generated@@26 1)) ($generated@@35 (+ $generated@@45 2))))) (=> (= ($generated@@35 0) ($generated@@27 $generated@@44)) (forall (($generated@@46 T@U) ) (!  (=> ($generated@@21 $generated@@46 $generated@@44) ($generated@@34 $generated@@46 $generated@@45))
 :pattern ( ($generated@@32 ($generated@@33 $generated@@43) $generated@@46 $generated@@45))
))))) (= ($generated@@32 ($generated@@33 $generated@@43) ($generated@@41 $generated@@42 $generated@@44) ($generated@@35 $generated@@45))  (and (=> (< 0 ($generated@@27 $generated@@44)) (and (or (not (= $generated@@45 (- 0 2))) (not true)) ($generated@@32 ($generated@@33 $generated@@43) ($generated@@25 $generated@@44 ($generated@@26 1)) ($generated@@35 (+ $generated@@45 2))))) (=> (= ($generated@@35 0) ($generated@@27 $generated@@44)) (forall (($generated@@47 T@U) ) (!  (=> ($generated@@21 $generated@@47 $generated@@44) ($generated@@32 ($generated@@33 $generated@@43) $generated@@47 $generated@@45))
 :pattern ( ($generated@@32 ($generated@@33 $generated@@43) $generated@@47 $generated@@45))
)))))))
 :weight 3
 :pattern ( ($generated@@32 ($generated@@33 $generated@@43) ($generated@@41 $generated@@42 $generated@@44) ($generated@@35 $generated@@45)))
))))
(assert  (=> (<= 1 $generated@@31) (forall (($generated@@48 T@U) ($generated@@49 Int) ($generated@@50 T@U) ) (!  (=> (= $generated@@50 ($generated@@26 0)) ($generated@@32 $generated@@48 $generated@@50 $generated@@49))
 :pattern ( ($generated@@32 $generated@@48 $generated@@50 $generated@@49))
))))
(assert (forall (($generated@@51 Int) ) (! (= ($generated@@35 $generated@@51) $generated@@51)
 :pattern ( ($generated@@35 $generated@@51))
)))
(assert (forall (($generated@@52 T@U) ($generated@@53 T@T) ) (! (= ($generated@@41 $generated@@53 $generated@@52) $generated@@52)
 :pattern ( ($generated@@41 $generated@@53 $generated@@52))
)))
(assert (forall (($generated@@56 T@U) ($generated@@57 T@T) ) (! (= ($generated@@55 $generated@@57 ($generated@@54 $generated@@57 $generated@@56)) $generated@@56)
 :pattern ( ($generated@@54 $generated@@57 $generated@@56))
)))
(assert (forall (($generated@@58 T@U) ($generated@@59 T@U) ($generated@@60 Int) ) (! (= ($generated@@32 ($generated@@33 $generated@@58) $generated@@59 $generated@@60) ($generated@@32 $generated@@58 $generated@@59 $generated@@60))
 :pattern ( ($generated@@32 ($generated@@33 $generated@@58) $generated@@59 $generated@@60))
)))
(assert (forall (($generated@@62 T@U) ($generated@@63 T@U) ) (!  (=> (and ($generated@@61 $generated@@63) (<= ($generated@@27 $generated@@63) ($generated@@27 $generated@@62))) (and (= ($generated@@61 ($generated@@25 $generated@@62 $generated@@63)) ($generated@@61 $generated@@62)) (= ($generated@@27 ($generated@@25 $generated@@62 $generated@@63)) (- ($generated@@27 $generated@@62) ($generated@@27 $generated@@63)))))
 :pattern ( ($generated@@25 $generated@@62 $generated@@63))
)))
(assert (forall (($generated@@64 Int) ) (!  (=> (<= 0 $generated@@64) (and ($generated@@61 ($generated@@26 $generated@@64)) (= ($generated@@27 ($generated@@26 $generated@@64)) $generated@@64)))
 :pattern ( ($generated@@26 $generated@@64))
)))
(assert  (=> (<= 1 $generated@@31) (forall (($generated@@65 T@U) ($generated@@66 T@U) ($generated@@67 Int) ) (!  (=> (or ($generated@@34 ($generated@@41 $generated@@42 $generated@@66) $generated@@67) (< 1 $generated@@31)) (and (and (=> (< 0 ($generated@@27 $generated@@66)) (=> (or (not (= $generated@@67 (- 0 2))) (not true)) ($generated@@34 ($generated@@25 $generated@@66 ($generated@@26 1)) (+ $generated@@67 2)))) (=> (=> (< 0 ($generated@@27 $generated@@66)) (and (or (not (= $generated@@67 (- 0 2))) (not true)) ($generated@@32 ($generated@@33 $generated@@65) ($generated@@25 $generated@@66 ($generated@@26 1)) (+ $generated@@67 2)))) (=> (= ($generated@@35 0) ($generated@@27 $generated@@66)) (forall (($generated@@68 T@U) ) (!  (=> ($generated@@21 $generated@@68 $generated@@66) ($generated@@34 $generated@@68 $generated@@67))
 :pattern ( ($generated@@32 ($generated@@33 $generated@@65) $generated@@68 $generated@@67))
))))) (= ($generated@@32 ($generated@@33 $generated@@65) ($generated@@41 $generated@@42 $generated@@66) $generated@@67)  (and (=> (< 0 ($generated@@27 $generated@@66)) (and (or (not (= $generated@@67 (- 0 2))) (not true)) ($generated@@32 ($generated@@33 $generated@@65) ($generated@@25 $generated@@66 ($generated@@26 1)) (+ $generated@@67 2)))) (=> (= ($generated@@35 0) ($generated@@27 $generated@@66)) (forall (($generated@@69 T@U) ) (!  (=> ($generated@@21 $generated@@69 $generated@@66) ($generated@@32 ($generated@@33 $generated@@65) $generated@@69 $generated@@67))
 :pattern ( ($generated@@32 ($generated@@33 $generated@@65) $generated@@69 $generated@@67))
)))))))
 :weight 3
 :pattern ( ($generated@@32 ($generated@@33 $generated@@65) ($generated@@41 $generated@@42 $generated@@66) $generated@@67))
))))
(assert (forall (($generated@@70 T@U) ($generated@@71 T@U) ) (!  (or (or ($generated@@21 $generated@@70 $generated@@71) (= $generated@@70 $generated@@71)) ($generated@@21 $generated@@71 $generated@@70))
 :pattern ( ($generated@@21 $generated@@70 $generated@@71) ($generated@@21 $generated@@71 $generated@@70))
)))
(assert (forall (($generated@@72 T@U) ) (! (<= 0 ($generated@@27 $generated@@72))
 :pattern ( ($generated@@27 $generated@@72))
)))
(assert (forall (($generated@@73 T@U) ($generated@@74 T@T) ) (! (= ($generated@@54 $generated@@74 ($generated@@55 $generated@@74 $generated@@73)) $generated@@73)
 :pattern ( ($generated@@55 $generated@@74 $generated@@73))
)))
(assert (forall (($generated@@75 T@U) ($generated@@76 T@U) ) (!  (and (and (and (=> ($generated@@21 $generated@@75 $generated@@76) (or (not (= $generated@@75 $generated@@76)) (not true))) (=> (and ($generated@@61 $generated@@75) (not ($generated@@61 $generated@@76))) ($generated@@21 $generated@@75 $generated@@76))) (=> (and ($generated@@61 $generated@@75) ($generated@@61 $generated@@76)) (= ($generated@@21 $generated@@75 $generated@@76) (< ($generated@@27 $generated@@75) ($generated@@27 $generated@@76))))) (=> (and ($generated@@21 $generated@@75 $generated@@76) ($generated@@61 $generated@@76)) ($generated@@61 $generated@@75)))
 :pattern ( ($generated@@21 $generated@@75 $generated@@76))
)))
(assert  (and (and (and (and (and (and (and (and (forall (($generated@@87 T@T) ($generated@@88 T@T) ($generated@@89 T@T) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ) (! (= ($generated@@77 $generated@@87 $generated@@88 $generated@@89 ($generated@@83 $generated@@87 $generated@@88 $generated@@89 $generated@@91 $generated@@92 $generated@@93 $generated@@90) $generated@@92 $generated@@93) $generated@@90)
 :weight 0
)) (and (forall (($generated@@94 T@T) ($generated@@95 T@T) ($generated@@96 T@T) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@99 $generated@@101) (= ($generated@@77 $generated@@94 $generated@@95 $generated@@96 ($generated@@83 $generated@@94 $generated@@95 $generated@@96 $generated@@98 $generated@@99 $generated@@100 $generated@@97) $generated@@101 $generated@@102) ($generated@@77 $generated@@94 $generated@@95 $generated@@96 $generated@@98 $generated@@101 $generated@@102)))
 :weight 0
)) (forall (($generated@@103 T@T) ($generated@@104 T@T) ($generated@@105 T@T) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (!  (or (= $generated@@109 $generated@@111) (= ($generated@@77 $generated@@103 $generated@@104 $generated@@105 ($generated@@83 $generated@@103 $generated@@104 $generated@@105 $generated@@107 $generated@@108 $generated@@109 $generated@@106) $generated@@110 $generated@@111) ($generated@@77 $generated@@103 $generated@@104 $generated@@105 $generated@@107 $generated@@110 $generated@@111)))
 :weight 0
)))) (= ($generated@@4 $generated@@78) 4)) (= ($generated@@4 $generated@@79) 5)) (forall (($generated@@112 T@T) ($generated@@113 T@T) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ) (! (= ($generated@@81 $generated@@112 $generated@@113 ($generated@@84 $generated@@112 $generated@@113 $generated@@115 $generated@@116 $generated@@114) $generated@@116) $generated@@114)
 :weight 0
))) (forall (($generated@@117 T@T) ($generated@@118 T@T) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ) (!  (or (= $generated@@121 $generated@@122) (= ($generated@@81 $generated@@117 $generated@@118 ($generated@@84 $generated@@117 $generated@@118 $generated@@120 $generated@@121 $generated@@119) $generated@@122) ($generated@@81 $generated@@117 $generated@@118 $generated@@120 $generated@@122)))
 :weight 0
))) (forall (($generated@@123 T@T) ($generated@@124 T@T) ) (= ($generated@@4 ($generated@@82 $generated@@123 $generated@@124)) 6))) (forall (($generated@@125 T@T) ($generated@@126 T@T) ) (! (= ($generated@@85 ($generated@@82 $generated@@125 $generated@@126)) $generated@@125)
 :pattern ( ($generated@@82 $generated@@125 $generated@@126))
))) (forall (($generated@@127 T@T) ($generated@@128 T@T) ) (! (= ($generated@@86 ($generated@@82 $generated@@127 $generated@@128)) $generated@@128)
 :pattern ( ($generated@@82 $generated@@127 $generated@@128))
))))
(assert (forall (($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 Bool) ($generated@@133 T@U) ($generated@@134 T@U) ) (! (= ($generated@@9 ($generated@@77 $generated@@78 $generated@@79 $generated@@5 ($generated@@80 $generated@@129 $generated@@130 $generated@@131 $generated@@132) $generated@@133 $generated@@134))  (=> (and (or (not (= $generated@@133 $generated@@129)) (not true)) ($generated@@9 ($generated@@54 $generated@@5 ($generated@@81 $generated@@79 $generated@@42 ($generated@@81 $generated@@78 ($generated@@82 $generated@@79 $generated@@42) $generated@@130 $generated@@133) $generated@@131)))) $generated@@132))
 :pattern ( ($generated@@77 $generated@@78 $generated@@79 $generated@@5 ($generated@@80 $generated@@129 $generated@@130 $generated@@131 $generated@@132) $generated@@133 $generated@@134))
)))
(assert (forall (($generated@@136 Int) ($generated@@137 Int) ) (! (= ($generated@@135 $generated@@136 $generated@@137) (mod $generated@@136 $generated@@137))
 :pattern ( ($generated@@135 $generated@@136 $generated@@137))
)))
(assert (forall (($generated@@138 T@U) ) (!  (=> ($generated@@61 $generated@@138) (= $generated@@138 ($generated@@26 ($generated@@27 $generated@@138))))
 :pattern ( ($generated@@27 $generated@@138))
 :pattern ( ($generated@@61 $generated@@138))
)))
(assert (forall (($generated@@139 T@U) ($generated@@140 T@U) ) (!  (=> (and ($generated@@61 $generated@@140) (<= ($generated@@27 $generated@@140) ($generated@@27 $generated@@139))) (or (and (= $generated@@140 ($generated@@26 0)) (= ($generated@@25 $generated@@139 $generated@@140) $generated@@139)) (and (or (not (= $generated@@140 ($generated@@26 0))) (not true)) ($generated@@21 ($generated@@25 $generated@@139 $generated@@140) $generated@@139))))
 :pattern ( ($generated@@25 $generated@@139 $generated@@140))
)))
(assert (forall (($generated@@141 Int) ) (! (= ($generated@@55 $generated@@6 ($generated@@10 ($generated@@35 $generated@@141))) ($generated@@41 $generated@@42 ($generated@@55 $generated@@6 ($generated@@10 $generated@@141))))
 :pattern ( ($generated@@55 $generated@@6 ($generated@@10 ($generated@@35 $generated@@141))))
)))
(assert (forall (($generated@@142 T@U) ($generated@@143 T@T) ) (! (= ($generated@@55 $generated@@143 ($generated@@41 $generated@@143 $generated@@142)) ($generated@@41 $generated@@42 ($generated@@55 $generated@@143 $generated@@142)))
 :pattern ( ($generated@@55 $generated@@143 ($generated@@41 $generated@@143 $generated@@142)))
)))
(assert (forall (($generated@@145 T@U) ($generated@@146 T@U) ) (! ($generated@@144 $generated@@6 $generated@@146 $generated $generated@@145)
 :pattern ( ($generated@@144 $generated@@6 $generated@@146 $generated $generated@@145))
)))
(assert (forall (($generated@@147 T@U) ($generated@@148 T@U) ) (! ($generated@@144 $generated@@42 $generated@@148 $generated@@0 $generated@@147)
 :pattern ( ($generated@@144 $generated@@42 $generated@@148 $generated@@0 $generated@@147))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@149 () Int)
(declare-fun $generated@@150 () T@U)
(declare-fun $generated@@151 () T@U)
(declare-fun $generated@@152 () T@U)
(declare-fun $generated@@153 (T@U) Bool)
(declare-fun $generated@@154 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 6) (let (($generated@@155 true))
(let (($generated@@156  (=> (< $generated@@149 ($generated@@35 0)) (and (=> (= (ControlFlow 0 3) (- 0 4)) (or (not (= ($generated@@35 2) 0)) (not true))) (=> (or (not (= ($generated@@35 2) 0)) (not true)) (=> (and (= ($generated@@135 $generated@@149 ($generated@@35 2)) ($generated@@35 1)) (= (ControlFlow 0 3) 1)) $generated@@155))))))
(let (($generated@@157  (=> (and (<= ($generated@@35 0) $generated@@149) (= (ControlFlow 0 2) 1)) $generated@@155)))
(let (($generated@@158  (=> (= $generated@@150 ($generated@@80 $generated@@151 $generated@@152 $generated@@3 false)) (and (=> (= (ControlFlow 0 5) 2) $generated@@157) (=> (= (ControlFlow 0 5) 3) $generated@@156)))))
(let (($generated@@159  (=> (and (and ($generated@@153 $generated@@152) ($generated@@154 $generated@@152)) (and (= 2 $generated@@31) (= (ControlFlow 0 6) 5))) $generated@@158)))
$generated@@159))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
