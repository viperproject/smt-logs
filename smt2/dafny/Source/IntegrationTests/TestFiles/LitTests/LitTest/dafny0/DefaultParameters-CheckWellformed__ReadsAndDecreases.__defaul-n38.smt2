(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 (T@U) T@U)
(declare-fun $generated@@22 () Int)
(declare-fun $generated@@23 (T@U Int Int) Int)
(declare-fun $generated@@24 (T@U Int Int) Bool)
(declare-fun $generated@@25 () T@U)
(declare-fun $generated@@26 (T@T T@U T@U) Bool)
(declare-fun $generated@@27 () T@T)
(declare-fun $generated@@28 () T@U)
(declare-fun $generated@@32 () T@U)
(declare-fun $generated@@33 (T@U) T@U)
(declare-fun $generated@@35 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@38 (T@T T@U) T@U)
(declare-fun $generated@@39 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@40 () T@T)
(declare-fun $generated@@41 () T@T)
(declare-fun $generated@@42 (T@T T@T) T@T)
(declare-fun $generated@@43 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@44 (T@T) T@T)
(declare-fun $generated@@45 (T@T) T@T)
(declare-fun $generated@@65 (Int) Int)
(declare-fun $generated@@67 (T@T T@U) T@U)
(declare-fun $generated@@70 (T@U) Int)
(declare-fun $generated@@71 (T@U) Bool)
(declare-fun $generated@@72 (Int Int) Int)
(declare-fun $generated@@74 (T@T T@U) T@U)
(declare-fun $generated@@77 (T@U T@U T@U) Bool)
(declare-fun $generated@@94 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@95 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@96 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@128 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert (= ($generated@@21 $generated) $generated@@0))
(assert (= ($generated@@5 $generated@@27) 3))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@29 T@U) ($generated@@30 Int) ($generated@@31 Int) ) (!  (=> (or ($generated@@24 $generated@@29 $generated@@30 $generated@@31) (and (< 0 $generated@@22) (and (or (not (= $generated@@29 $generated@@25)) (not true)) ($generated@@26 $generated@@27 $generated@@29 $generated@@28)))) (= ($generated@@23 $generated@@29 $generated@@30 $generated@@31) (+ $generated@@30 $generated@@31)))
 :pattern ( ($generated@@23 $generated@@29 $generated@@30 $generated@@31))
))))
(assert (forall (($generated@@34 T@U) ) (! (= ($generated@@26 $generated@@27 $generated@@34 $generated@@32)  (or (= $generated@@34 $generated@@25) (= ($generated@@33 $generated@@34) $generated@@32)))
 :pattern ( ($generated@@26 $generated@@27 $generated@@34 $generated@@32))
)))
(assert (forall (($generated@@36 T@U) ($generated@@37 T@U) ) (! (= ($generated@@35 $generated@@27 $generated@@36 $generated@@28 $generated@@37) ($generated@@35 $generated@@27 $generated@@36 $generated@@32 $generated@@37))
 :pattern ( ($generated@@35 $generated@@27 $generated@@36 $generated@@28 $generated@@37))
 :pattern ( ($generated@@35 $generated@@27 $generated@@36 $generated@@32 $generated@@37))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@46 T@T) ($generated@@47 T@T) ($generated@@48 T@U) ($generated@@49 T@U) ($generated@@50 T@U) ) (! (= ($generated@@39 $generated@@46 $generated@@47 ($generated@@43 $generated@@46 $generated@@47 $generated@@49 $generated@@50 $generated@@48) $generated@@50) $generated@@48)
 :weight 0
)) (forall (($generated@@51 T@T) ($generated@@52 T@T) ($generated@@53 T@U) ($generated@@54 T@U) ($generated@@55 T@U) ($generated@@56 T@U) ) (!  (or (= $generated@@55 $generated@@56) (= ($generated@@39 $generated@@51 $generated@@52 ($generated@@43 $generated@@51 $generated@@52 $generated@@54 $generated@@55 $generated@@53) $generated@@56) ($generated@@39 $generated@@51 $generated@@52 $generated@@54 $generated@@56)))
 :weight 0
))) (= ($generated@@5 $generated@@40) 4)) (= ($generated@@5 $generated@@41) 5)) (forall (($generated@@57 T@T) ($generated@@58 T@T) ) (= ($generated@@5 ($generated@@42 $generated@@57 $generated@@58)) 6))) (forall (($generated@@59 T@T) ($generated@@60 T@T) ) (! (= ($generated@@44 ($generated@@42 $generated@@59 $generated@@60)) $generated@@59)
 :pattern ( ($generated@@42 $generated@@59 $generated@@60))
))) (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (! (= ($generated@@45 ($generated@@42 $generated@@61 $generated@@62)) $generated@@62)
 :pattern ( ($generated@@42 $generated@@61 $generated@@62))
))))
(assert (forall (($generated@@63 T@U) ($generated@@64 T@U) ) (! (= ($generated@@35 $generated@@27 $generated@@63 $generated@@32 $generated@@64)  (or (= $generated@@63 $generated@@25) ($generated@@10 ($generated@@38 $generated@@6 ($generated@@39 $generated@@40 $generated@@41 ($generated@@39 $generated@@27 ($generated@@42 $generated@@40 $generated@@41) $generated@@64 $generated@@63) $generated@@1)))))
 :pattern ( ($generated@@35 $generated@@27 $generated@@63 $generated@@32 $generated@@64))
)))
(assert (forall (($generated@@66 Int) ) (! (= ($generated@@65 $generated@@66) $generated@@66)
 :pattern ( ($generated@@65 $generated@@66))
)))
(assert (forall (($generated@@68 T@U) ($generated@@69 T@T) ) (! (= ($generated@@67 $generated@@69 $generated@@68) $generated@@68)
 :pattern ( ($generated@@67 $generated@@69 $generated@@68))
)))
(assert  (=> (<= 1 $generated@@22) (forall (($generated@@73 T@U) ) (!  (=> (or ($generated@@71 ($generated@@67 $generated@@27 $generated@@73)) (and (< 1 $generated@@22) ($generated@@26 $generated@@27 $generated@@73 $generated@@28))) (and ($generated@@24 ($generated@@67 $generated@@27 $generated@@73) ($generated@@65 0) ($generated@@65 ($generated@@72 3 ($generated@@65 0)))) (= ($generated@@70 ($generated@@67 $generated@@27 $generated@@73)) ($generated@@65 ($generated@@23 ($generated@@67 $generated@@27 $generated@@73) ($generated@@65 0) ($generated@@65 ($generated@@72 3 ($generated@@65 0))))))))
 :weight 3
 :pattern ( ($generated@@70 ($generated@@67 $generated@@27 $generated@@73)))
))))
(assert (forall (($generated@@75 T@U) ($generated@@76 T@T) ) (! (= ($generated@@74 $generated@@76 ($generated@@38 $generated@@76 $generated@@75)) $generated@@75)
 :pattern ( ($generated@@38 $generated@@76 $generated@@75))
)))
(assert (forall (($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@T) ) (! (= ($generated@@77 ($generated@@74 $generated@@81 $generated@@78) $generated@@79 $generated@@80) ($generated@@35 $generated@@81 $generated@@78 $generated@@79 $generated@@80))
 :pattern ( ($generated@@77 ($generated@@74 $generated@@81 $generated@@78) $generated@@79 $generated@@80))
)))
(assert (forall (($generated@@82 T@U) ) (! (= ($generated@@26 $generated@@27 $generated@@82 $generated@@28)  (and ($generated@@26 $generated@@27 $generated@@82 $generated@@32) (or (not (= $generated@@82 $generated@@25)) (not true))))
 :pattern ( ($generated@@26 $generated@@27 $generated@@82 $generated@@28))
 :pattern ( ($generated@@26 $generated@@27 $generated@@82 $generated@@32))
)))
(assert  (=> (<= 1 $generated@@22) (forall (($generated@@83 T@U) ) (!  (=> (or ($generated@@71 $generated@@83) (and (< 1 $generated@@22) ($generated@@26 $generated@@27 $generated@@83 $generated@@28))) (and ($generated@@24 $generated@@83 ($generated@@65 0) ($generated@@65 ($generated@@72 3 ($generated@@65 0)))) (= ($generated@@70 $generated@@83) ($generated@@23 $generated@@83 ($generated@@65 0) ($generated@@65 ($generated@@72 3 ($generated@@65 0)))))))
 :pattern ( ($generated@@70 $generated@@83))
))))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@84 T@U) ($generated@@85 Int) ($generated@@86 Int) ) (!  (=> (or ($generated@@24 ($generated@@67 $generated@@27 $generated@@84) ($generated@@65 $generated@@85) ($generated@@65 $generated@@86)) (and (< 0 $generated@@22) (and (or (not (= $generated@@84 $generated@@25)) (not true)) ($generated@@26 $generated@@27 $generated@@84 $generated@@28)))) (= ($generated@@23 ($generated@@67 $generated@@27 $generated@@84) ($generated@@65 $generated@@85) ($generated@@65 $generated@@86)) ($generated@@65 (+ $generated@@85 $generated@@86))))
 :weight 3
 :pattern ( ($generated@@23 ($generated@@67 $generated@@27 $generated@@84) ($generated@@65 $generated@@85) ($generated@@65 $generated@@86)))
))))
(assert (forall (($generated@@87 Int) ($generated@@88 Int) ) (! (= ($generated@@72 $generated@@87 $generated@@88) (div $generated@@87 $generated@@88))
 :pattern ( ($generated@@72 $generated@@87 $generated@@88))
)))
(assert (forall (($generated@@89 T@U) ($generated@@90 T@T) ) (! (= ($generated@@38 $generated@@90 ($generated@@74 $generated@@90 $generated@@89)) $generated@@89)
 :pattern ( ($generated@@74 $generated@@90 $generated@@89))
)))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@91 T@U) ($generated@@92 Int) ($generated@@93 Int) ) (!  (=> (or ($generated@@24 $generated@@91 ($generated@@65 $generated@@92) ($generated@@65 $generated@@93)) (and (< 0 $generated@@22) (and (or (not (= $generated@@91 $generated@@25)) (not true)) ($generated@@26 $generated@@27 $generated@@91 $generated@@28)))) (= ($generated@@23 $generated@@91 ($generated@@65 $generated@@92) ($generated@@65 $generated@@93)) ($generated@@65 (+ $generated@@92 $generated@@93))))
 :weight 3
 :pattern ( ($generated@@23 $generated@@91 ($generated@@65 $generated@@92) ($generated@@65 $generated@@93)))
))))
(assert  (and (forall (($generated@@97 T@T) ($generated@@98 T@T) ($generated@@99 T@T) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ) (! (= ($generated@@94 $generated@@97 $generated@@98 $generated@@99 ($generated@@96 $generated@@97 $generated@@98 $generated@@99 $generated@@101 $generated@@102 $generated@@103 $generated@@100) $generated@@102 $generated@@103) $generated@@100)
 :weight 0
)) (and (forall (($generated@@104 T@T) ($generated@@105 T@T) ($generated@@106 T@T) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ) (!  (or (= $generated@@109 $generated@@111) (= ($generated@@94 $generated@@104 $generated@@105 $generated@@106 ($generated@@96 $generated@@104 $generated@@105 $generated@@106 $generated@@108 $generated@@109 $generated@@110 $generated@@107) $generated@@111 $generated@@112) ($generated@@94 $generated@@104 $generated@@105 $generated@@106 $generated@@108 $generated@@111 $generated@@112)))
 :weight 0
)) (forall (($generated@@113 T@T) ($generated@@114 T@T) ($generated@@115 T@T) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ) (!  (or (= $generated@@119 $generated@@121) (= ($generated@@94 $generated@@113 $generated@@114 $generated@@115 ($generated@@96 $generated@@113 $generated@@114 $generated@@115 $generated@@117 $generated@@118 $generated@@119 $generated@@116) $generated@@120 $generated@@121) ($generated@@94 $generated@@113 $generated@@114 $generated@@115 $generated@@117 $generated@@120 $generated@@121)))
 :weight 0
)))))
(assert (forall (($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 Bool) ($generated@@126 T@U) ($generated@@127 T@U) ) (! (= ($generated@@10 ($generated@@94 $generated@@27 $generated@@40 $generated@@6 ($generated@@95 $generated@@122 $generated@@123 $generated@@124 $generated@@125) $generated@@126 $generated@@127))  (=> (and (or (not (= $generated@@126 $generated@@122)) (not true)) ($generated@@10 ($generated@@38 $generated@@6 ($generated@@39 $generated@@40 $generated@@41 ($generated@@39 $generated@@27 ($generated@@42 $generated@@40 $generated@@41) $generated@@123 $generated@@126) $generated@@124)))) $generated@@125))
 :pattern ( ($generated@@94 $generated@@27 $generated@@40 $generated@@6 ($generated@@95 $generated@@122 $generated@@123 $generated@@124 $generated@@125) $generated@@126 $generated@@127))
)))
(assert (= ($generated@@21 $generated@@28) $generated@@2))
(assert (= ($generated@@128 $generated@@28) $generated@@4))
(assert (= ($generated@@21 $generated@@32) $generated@@3))
(assert (= ($generated@@128 $generated@@32) $generated@@4))
(assert (forall (($generated@@129 Int) ) (! (= ($generated@@74 $generated@@7 ($generated@@11 ($generated@@65 $generated@@129))) ($generated@@67 $generated@@41 ($generated@@74 $generated@@7 ($generated@@11 $generated@@129))))
 :pattern ( ($generated@@74 $generated@@7 ($generated@@11 ($generated@@65 $generated@@129))))
)))
(assert (forall (($generated@@130 T@U) ($generated@@131 T@T) ) (! (= ($generated@@74 $generated@@131 ($generated@@67 $generated@@131 $generated@@130)) ($generated@@67 $generated@@41 ($generated@@74 $generated@@131 $generated@@130)))
 :pattern ( ($generated@@74 $generated@@131 ($generated@@67 $generated@@131 $generated@@130)))
)))
(assert (forall (($generated@@132 T@U) ($generated@@133 T@U) ) (! ($generated@@35 $generated@@7 $generated@@133 $generated $generated@@132)
 :pattern ( ($generated@@35 $generated@@7 $generated@@133 $generated $generated@@132))
)))
(assert (forall (($generated@@134 T@U) ) (! ($generated@@26 $generated@@7 $generated@@134 $generated)
 :pattern ( ($generated@@26 $generated@@7 $generated@@134 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@135 () T@U)
(declare-fun $generated@@136 () T@U)
(declare-fun $generated@@137 () T@U)
(declare-fun $generated@@138 (T@U) Bool)
(declare-fun $generated@@139 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 5) (let (($generated@@140  (=> (= (ControlFlow 0 3) (- 0 2)) (or (not (= $generated@@135 $generated@@25)) (not true)))))
(let (($generated@@141 true))
(let (($generated@@142  (=> (= $generated@@136 ($generated@@95 $generated@@25 $generated@@137 $generated@@1 false)) (and (=> (= (ControlFlow 0 4) 1) $generated@@141) (=> (= (ControlFlow 0 4) 3) $generated@@140)))))
(let (($generated@@143  (=> (and (and (and ($generated@@138 $generated@@137) ($generated@@139 $generated@@137)) ($generated@@26 $generated@@27 $generated@@135 $generated@@28)) (and (= 1 $generated@@22) (= (ControlFlow 0 5) 4))) $generated@@142)))
$generated@@143)))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
