(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 (T@T) Int)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 () T@T)
(declare-fun $generated@@12 (Bool) T@U)
(declare-fun $generated@@13 (T@U) Bool)
(declare-fun $generated@@14 (Int) T@U)
(declare-fun $generated@@15 (T@U) Int)
(declare-fun $generated@@16 (Real) T@U)
(declare-fun $generated@@17 (T@U) Real)
(declare-fun $generated@@24 (T@U) Int)
(declare-fun $generated@@25 (T@U) T@U)
(declare-fun $generated@@26 (T@U) T@U)
(declare-fun $generated@@27 () Int)
(declare-fun $generated@@28 (T@U T@U) Bool)
(declare-fun $generated@@29 (T@U) Bool)
(declare-fun $generated@@30 (T@U T@U) Bool)
(declare-fun $generated@@31 () T@U)
(declare-fun $generated@@32 (T@T T@U T@U) Bool)
(declare-fun $generated@@33 () T@T)
(declare-fun $generated@@34 () T@U)
(declare-fun $generated@@35 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@36 (T@T T@U) T@U)
(declare-fun $generated@@37 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@38 () T@T)
(declare-fun $generated@@39 () T@T)
(declare-fun $generated@@40 (T@T T@T) T@T)
(declare-fun $generated@@41 () T@U)
(declare-fun $generated@@42 (Int) Int)
(declare-fun $generated@@43 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@44 (T@T) T@T)
(declare-fun $generated@@45 (T@T) T@T)
(declare-fun $generated@@65 () T@U)
(declare-fun $generated@@66 (T@U) T@U)
(declare-fun $generated@@70 (T@U T@U) T@U)
(declare-fun $generated@@71 (T@U) Bool)
(declare-fun $generated@@75 (T@T T@U) T@U)
(declare-fun $generated@@78 (T@T T@U) T@U)
(declare-fun $generated@@83 (T@U T@U T@U) Bool)
(declare-fun $generated@@88 (T@U T@U) Int)
(declare-fun $generated@@89 (T@U T@U) Bool)
(declare-fun $generated@@93 (T@U) T@U)
(declare-fun $generated@@102 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@103 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@104 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@136 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@8 $generated@@9) 0) (= ($generated@@8 $generated@@10) 1)) (= ($generated@@8 $generated@@11) 2)) (forall (($generated@@18 Bool) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 Real) ) (! (= ($generated@@17 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 T@U) ) (! (= ($generated@@16 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7)
)
(assert (= ($generated@@24 $generated@@1) 0))
(assert (= ($generated@@25 $generated) $generated@@0))
(assert (= ($generated@@26 $generated@@1) $generated@@2))
(assert  (and (and (and (and (and (and (and (= ($generated@@8 $generated@@33) 3) (forall (($generated@@46 T@T) ($generated@@47 T@T) ($generated@@48 T@U) ($generated@@49 T@U) ($generated@@50 T@U) ) (! (= ($generated@@37 $generated@@46 $generated@@47 ($generated@@43 $generated@@46 $generated@@47 $generated@@49 $generated@@50 $generated@@48) $generated@@50) $generated@@48)
 :weight 0
))) (forall (($generated@@51 T@T) ($generated@@52 T@T) ($generated@@53 T@U) ($generated@@54 T@U) ($generated@@55 T@U) ($generated@@56 T@U) ) (!  (or (= $generated@@55 $generated@@56) (= ($generated@@37 $generated@@51 $generated@@52 ($generated@@43 $generated@@51 $generated@@52 $generated@@54 $generated@@55 $generated@@53) $generated@@56) ($generated@@37 $generated@@51 $generated@@52 $generated@@54 $generated@@56)))
 :weight 0
))) (= ($generated@@8 $generated@@38) 4)) (= ($generated@@8 $generated@@39) 5)) (forall (($generated@@57 T@T) ($generated@@58 T@T) ) (= ($generated@@8 ($generated@@40 $generated@@57 $generated@@58)) 6))) (forall (($generated@@59 T@T) ($generated@@60 T@T) ) (! (= ($generated@@44 ($generated@@40 $generated@@59 $generated@@60)) $generated@@59)
 :pattern ( ($generated@@40 $generated@@59 $generated@@60))
))) (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (! (= ($generated@@45 ($generated@@40 $generated@@61 $generated@@62)) $generated@@62)
 :pattern ( ($generated@@40 $generated@@61 $generated@@62))
))))
(assert  (=> (<= 0 $generated@@27) (forall (($generated@@63 T@U) ($generated@@64 T@U) ) (!  (=> (or ($generated@@30 $generated@@63 $generated@@64) (and (< 0 $generated@@27) (and ($generated@@29 $generated@@63) (and (or (not (= $generated@@64 $generated@@31)) (not true)) (and ($generated@@32 $generated@@33 $generated@@64 $generated@@34) ($generated@@35 $generated@@33 $generated@@64 $generated@@34 $generated@@63)))))) (= ($generated@@28 $generated@@63 $generated@@64) (= ($generated@@15 ($generated@@36 $generated@@10 ($generated@@37 $generated@@38 $generated@@39 ($generated@@37 $generated@@33 ($generated@@40 $generated@@38 $generated@@39) $generated@@63 $generated@@64) $generated@@41))) ($generated@@42 8))))
 :pattern ( ($generated@@28 $generated@@63 $generated@@64) ($generated@@29 $generated@@63))
))))
(assert (forall (($generated@@67 T@U) ) (! (= ($generated@@32 $generated@@33 $generated@@67 $generated@@65)  (or (= $generated@@67 $generated@@31) (= ($generated@@66 $generated@@67) $generated@@65)))
 :pattern ( ($generated@@32 $generated@@33 $generated@@67 $generated@@65))
)))
(assert (forall (($generated@@68 T@U) ($generated@@69 T@U) ) (! (= ($generated@@35 $generated@@33 $generated@@68 $generated@@34 $generated@@69) ($generated@@35 $generated@@33 $generated@@68 $generated@@65 $generated@@69))
 :pattern ( ($generated@@35 $generated@@33 $generated@@68 $generated@@34 $generated@@69))
 :pattern ( ($generated@@35 $generated@@33 $generated@@68 $generated@@65 $generated@@69))
)))
(assert (= ($generated@@24 $generated@@41) 0))
(assert (= ($generated@@70 $generated@@3 $generated@@7) $generated@@41))
(assert  (not ($generated@@71 $generated@@41)))
(assert (forall (($generated@@72 T@U) ($generated@@73 T@U) ) (! (= ($generated@@35 $generated@@33 $generated@@72 $generated@@65 $generated@@73)  (or (= $generated@@72 $generated@@31) ($generated@@13 ($generated@@36 $generated@@9 ($generated@@37 $generated@@38 $generated@@39 ($generated@@37 $generated@@33 ($generated@@40 $generated@@38 $generated@@39) $generated@@73 $generated@@72) $generated@@1)))))
 :pattern ( ($generated@@35 $generated@@33 $generated@@72 $generated@@65 $generated@@73))
)))
(assert (forall (($generated@@74 Int) ) (! (= ($generated@@42 $generated@@74) $generated@@74)
 :pattern ( ($generated@@42 $generated@@74))
)))
(assert (forall (($generated@@76 T@U) ($generated@@77 T@T) ) (! (= ($generated@@75 $generated@@77 $generated@@76) $generated@@76)
 :pattern ( ($generated@@75 $generated@@77 $generated@@76))
)))
(assert (forall (($generated@@79 T@U) ($generated@@80 T@T) ) (! (= ($generated@@78 $generated@@80 ($generated@@36 $generated@@80 $generated@@79)) $generated@@79)
 :pattern ( ($generated@@36 $generated@@80 $generated@@79))
)))
(assert ($generated@@71 $generated@@1))
(assert (forall (($generated@@81 T@U) ($generated@@82 T@U) ) (!  (=> (and (and ($generated@@29 $generated@@81) (and (or (not (= $generated@@82 $generated@@31)) (not true)) (= ($generated@@66 $generated@@82) $generated@@65))) ($generated@@13 ($generated@@36 $generated@@9 ($generated@@37 $generated@@38 $generated@@39 ($generated@@37 $generated@@33 ($generated@@40 $generated@@38 $generated@@39) $generated@@81 $generated@@82) $generated@@1)))) ($generated@@35 $generated@@10 ($generated@@36 $generated@@10 ($generated@@37 $generated@@38 $generated@@39 ($generated@@37 $generated@@33 ($generated@@40 $generated@@38 $generated@@39) $generated@@81 $generated@@82) $generated@@41)) $generated $generated@@81))
 :pattern ( ($generated@@36 $generated@@10 ($generated@@37 $generated@@38 $generated@@39 ($generated@@37 $generated@@33 ($generated@@40 $generated@@38 $generated@@39) $generated@@81 $generated@@82) $generated@@41)))
)))
(assert (forall (($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@T) ) (! (= ($generated@@83 ($generated@@78 $generated@@87 $generated@@84) $generated@@85 $generated@@86) ($generated@@35 $generated@@87 $generated@@84 $generated@@85 $generated@@86))
 :pattern ( ($generated@@83 ($generated@@78 $generated@@87 $generated@@84) $generated@@85 $generated@@86))
)))
(assert  (=> (<= 0 $generated@@27) (forall (($generated@@90 T@U) ($generated@@91 T@U) ) (!  (=> (or ($generated@@89 $generated@@90 $generated@@91) (and (< 0 $generated@@27) (and ($generated@@29 $generated@@90) (and (or (not (= $generated@@91 $generated@@31)) (not true)) (and ($generated@@32 $generated@@33 $generated@@91 $generated@@34) ($generated@@35 $generated@@33 $generated@@91 $generated@@34 $generated@@90)))))) (= ($generated@@88 $generated@@90 $generated@@91) ($generated@@15 ($generated@@36 $generated@@10 ($generated@@37 $generated@@38 $generated@@39 ($generated@@37 $generated@@33 ($generated@@40 $generated@@38 $generated@@39) $generated@@90 $generated@@91) $generated@@41)))))
 :pattern ( ($generated@@88 $generated@@90 $generated@@91) ($generated@@29 $generated@@90))
))))
(assert (forall (($generated@@92 T@U) ) (! (= ($generated@@32 $generated@@33 $generated@@92 $generated@@34)  (and ($generated@@32 $generated@@33 $generated@@92 $generated@@65) (or (not (= $generated@@92 $generated@@31)) (not true))))
 :pattern ( ($generated@@32 $generated@@33 $generated@@92 $generated@@34))
 :pattern ( ($generated@@32 $generated@@33 $generated@@92 $generated@@65))
)))
(assert (forall (($generated@@94 T@U) ($generated@@95 T@U) ) (!  (and (= ($generated@@93 ($generated@@70 $generated@@94 $generated@@95)) $generated@@94) (= ($generated@@26 ($generated@@70 $generated@@94 $generated@@95)) $generated@@95))
 :pattern ( ($generated@@70 $generated@@94 $generated@@95))
)))
(assert  (=> (<= 0 $generated@@27) (forall (($generated@@96 T@U) ($generated@@97 T@U) ) (!  (=> (or ($generated@@30 $generated@@96 $generated@@97) (and (< 0 $generated@@27) (and ($generated@@29 $generated@@96) (and (or (not (= $generated@@97 $generated@@31)) (not true)) (and ($generated@@32 $generated@@33 $generated@@97 $generated@@34) ($generated@@35 $generated@@33 $generated@@97 $generated@@34 $generated@@96)))))) (and (=> ($generated@@28 $generated@@96 $generated@@97) (<= ($generated@@42 0) ($generated@@15 ($generated@@36 $generated@@10 ($generated@@37 $generated@@38 $generated@@39 ($generated@@37 $generated@@33 ($generated@@40 $generated@@38 $generated@@39) $generated@@96 $generated@@97) $generated@@41))))) (=> (= ($generated@@15 ($generated@@36 $generated@@10 ($generated@@37 $generated@@38 $generated@@39 ($generated@@37 $generated@@33 ($generated@@40 $generated@@38 $generated@@39) $generated@@96 $generated@@97) $generated@@41))) ($generated@@42 8)) ($generated@@28 $generated@@96 $generated@@97))))
 :pattern ( ($generated@@28 $generated@@96 $generated@@97))
))))
(assert (forall (($generated@@98 T@U) ($generated@@99 T@T) ) (! (= ($generated@@36 $generated@@99 ($generated@@78 $generated@@99 $generated@@98)) $generated@@98)
 :pattern ( ($generated@@78 $generated@@99 $generated@@98))
)))
(assert (forall (($generated@@100 T@U) ($generated@@101 T@U) ) (!  (=> (and ($generated@@29 $generated@@100) (and (or (not (= $generated@@101 $generated@@31)) (not true)) (= ($generated@@66 $generated@@101) $generated@@65))) ($generated@@32 $generated@@10 ($generated@@36 $generated@@10 ($generated@@37 $generated@@38 $generated@@39 ($generated@@37 $generated@@33 ($generated@@40 $generated@@38 $generated@@39) $generated@@100 $generated@@101) $generated@@41)) $generated))
 :pattern ( ($generated@@36 $generated@@10 ($generated@@37 $generated@@38 $generated@@39 ($generated@@37 $generated@@33 ($generated@@40 $generated@@38 $generated@@39) $generated@@100 $generated@@101) $generated@@41)))
)))
(assert  (and (forall (($generated@@105 T@T) ($generated@@106 T@T) ($generated@@107 T@T) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (! (= ($generated@@102 $generated@@105 $generated@@106 $generated@@107 ($generated@@104 $generated@@105 $generated@@106 $generated@@107 $generated@@109 $generated@@110 $generated@@111 $generated@@108) $generated@@110 $generated@@111) $generated@@108)
 :weight 0
)) (and (forall (($generated@@112 T@T) ($generated@@113 T@T) ($generated@@114 T@T) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (!  (or (= $generated@@117 $generated@@119) (= ($generated@@102 $generated@@112 $generated@@113 $generated@@114 ($generated@@104 $generated@@112 $generated@@113 $generated@@114 $generated@@116 $generated@@117 $generated@@118 $generated@@115) $generated@@119 $generated@@120) ($generated@@102 $generated@@112 $generated@@113 $generated@@114 $generated@@116 $generated@@119 $generated@@120)))
 :weight 0
)) (forall (($generated@@121 T@T) ($generated@@122 T@T) ($generated@@123 T@T) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 T@U) ) (!  (or (= $generated@@127 $generated@@129) (= ($generated@@102 $generated@@121 $generated@@122 $generated@@123 ($generated@@104 $generated@@121 $generated@@122 $generated@@123 $generated@@125 $generated@@126 $generated@@127 $generated@@124) $generated@@128 $generated@@129) ($generated@@102 $generated@@121 $generated@@122 $generated@@123 $generated@@125 $generated@@128 $generated@@129)))
 :weight 0
)))))
(assert (forall (($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 Bool) ($generated@@134 T@U) ($generated@@135 T@U) ) (! (= ($generated@@13 ($generated@@102 $generated@@33 $generated@@38 $generated@@9 ($generated@@103 $generated@@130 $generated@@131 $generated@@132 $generated@@133) $generated@@134 $generated@@135))  (=> (and (or (not (= $generated@@134 $generated@@130)) (not true)) ($generated@@13 ($generated@@36 $generated@@9 ($generated@@37 $generated@@38 $generated@@39 ($generated@@37 $generated@@33 ($generated@@40 $generated@@38 $generated@@39) $generated@@131 $generated@@134) $generated@@132)))) $generated@@133))
 :pattern ( ($generated@@102 $generated@@33 $generated@@38 $generated@@9 ($generated@@103 $generated@@130 $generated@@131 $generated@@132 $generated@@133) $generated@@134 $generated@@135))
)))
(assert (= ($generated@@25 $generated@@65) $generated@@4))
(assert (= ($generated@@136 $generated@@65) $generated@@6))
(assert (= ($generated@@25 $generated@@34) $generated@@5))
(assert (= ($generated@@136 $generated@@34) $generated@@6))
(assert (forall (($generated@@137 Int) ) (! (= ($generated@@78 $generated@@10 ($generated@@14 ($generated@@42 $generated@@137))) ($generated@@75 $generated@@39 ($generated@@78 $generated@@10 ($generated@@14 $generated@@137))))
 :pattern ( ($generated@@78 $generated@@10 ($generated@@14 ($generated@@42 $generated@@137))))
)))
(assert (forall (($generated@@138 T@U) ($generated@@139 T@T) ) (! (= ($generated@@78 $generated@@139 ($generated@@75 $generated@@139 $generated@@138)) ($generated@@75 $generated@@39 ($generated@@78 $generated@@139 $generated@@138)))
 :pattern ( ($generated@@78 $generated@@139 ($generated@@75 $generated@@139 $generated@@138)))
)))
(assert (forall (($generated@@140 T@U) ($generated@@141 T@U) ) (! ($generated@@35 $generated@@10 $generated@@141 $generated $generated@@140)
 :pattern ( ($generated@@35 $generated@@10 $generated@@141 $generated $generated@@140))
)))
(assert (forall (($generated@@142 T@U) ) (! ($generated@@32 $generated@@10 $generated@@142 $generated)
 :pattern ( ($generated@@32 $generated@@10 $generated@@142 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@143 () T@U)
(declare-fun $generated@@144 () T@U)
(declare-fun $generated@@145 () T@U)
(declare-fun $generated@@146 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 4) (let (($generated@@147  (=> (and (and (= $generated@@143 ($generated@@103 $generated@@31 $generated@@144 $generated@@1 false)) ($generated@@83 ($generated@@78 $generated@@33 $generated@@145) $generated@@65 $generated@@144)) (and ($generated@@89 $generated@@144 $generated@@145) ($generated@@89 $generated@@144 $generated@@145))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (= ($generated@@88 $generated@@144 $generated@@145) ($generated@@15 ($generated@@36 $generated@@10 ($generated@@37 $generated@@38 $generated@@39 ($generated@@37 $generated@@33 ($generated@@40 $generated@@38 $generated@@39) $generated@@144 $generated@@145) $generated@@41))))) (=> (= ($generated@@88 $generated@@144 $generated@@145) ($generated@@15 ($generated@@36 $generated@@10 ($generated@@37 $generated@@38 $generated@@39 ($generated@@37 $generated@@33 ($generated@@40 $generated@@38 $generated@@39) $generated@@144 $generated@@145) $generated@@41)))) (=> (= (ControlFlow 0 2) (- 0 1)) (= ($generated@@15 ($generated@@36 $generated@@10 ($generated@@37 $generated@@38 $generated@@39 ($generated@@37 $generated@@33 ($generated@@40 $generated@@38 $generated@@39) $generated@@144 $generated@@145) $generated@@41))) ($generated@@42 8))))))))
(let (($generated@@148  (=> (and ($generated@@29 $generated@@144) ($generated@@146 $generated@@144)) (=> (and (and (and (or (not (= $generated@@145 $generated@@31)) (not true)) (and ($generated@@32 $generated@@33 $generated@@145 $generated@@34) ($generated@@35 $generated@@33 $generated@@145 $generated@@34 $generated@@144))) (= 1 $generated@@27)) (and (and ($generated@@30 $generated@@144 $generated@@145) (and ($generated@@28 $generated@@144 $generated@@145) (= ($generated@@15 ($generated@@36 $generated@@10 ($generated@@37 $generated@@38 $generated@@39 ($generated@@37 $generated@@33 ($generated@@40 $generated@@38 $generated@@39) $generated@@144 $generated@@145) $generated@@41))) ($generated@@42 8)))) (= (ControlFlow 0 4) 2))) $generated@@147))))
$generated@@148)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
