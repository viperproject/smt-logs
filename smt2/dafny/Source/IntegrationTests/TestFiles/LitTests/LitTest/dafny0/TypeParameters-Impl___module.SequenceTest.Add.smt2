(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 (T@T) Int)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Bool) T@U)
(declare-fun $generated@@9 (T@U) Bool)
(declare-fun $generated@@10 (Int) T@U)
(declare-fun $generated@@11 (T@U) Int)
(declare-fun $generated@@12 (Real) T@U)
(declare-fun $generated@@13 (T@U) Real)
(declare-fun $generated@@20 (T@U) Int)
(declare-fun $generated@@21 () T@U)
(declare-fun $generated@@22 (T@T T@U T@U) Bool)
(declare-fun $generated@@23 () T@T)
(declare-fun $generated@@24 () T@U)
(declare-fun $generated@@25 () T@U)
(declare-fun $generated@@26 (T@U) T@U)
(declare-fun $generated@@28 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@29 () T@U)
(declare-fun $generated@@32 (T@T T@U) T@U)
(declare-fun $generated@@33 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@34 () T@T)
(declare-fun $generated@@35 () T@T)
(declare-fun $generated@@36 (T@T T@T) T@T)
(declare-fun $generated@@37 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@38 (T@T) T@T)
(declare-fun $generated@@39 (T@T) T@T)
(declare-fun $generated@@59 () T@T)
(declare-fun $generated@@60 (T@U T@U) T@U)
(declare-fun $generated@@61 (T@U) T@U)
(declare-fun $generated@@62 (T@U T@U) Bool)
(declare-fun $generated@@66 (T@U T@U) Bool)
(declare-fun $generated@@67 (T@U Int) T@U)
(declare-fun $generated@@71 (T@T T@U) T@U)
(declare-fun $generated@@76 (T@U T@U T@U) Bool)
(declare-fun $generated@@81 (T@U T@U) T@U)
(declare-fun $generated@@100 (T@U) T@U)
(declare-fun $generated@@102 (T@U) T@U)
(declare-fun $generated@@106 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@107 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@108 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@140 (T@U) T@U)
(declare-fun $generated@@141 (T@U) T@U)
(declare-fun $generated@@146 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@4 $generated@@5) 0) (= ($generated@@4 $generated@@6) 1)) (= ($generated@@4 $generated@@7) 2)) (forall (($generated@@14 Bool) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Int) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Real) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3)
)
(assert (= ($generated@@20 $generated@@21) 0))
(assert (= ($generated@@4 $generated@@23) 3))
(assert (forall (($generated@@27 T@U) ) (! (= ($generated@@22 $generated@@23 $generated@@27 $generated@@24)  (or (= $generated@@27 $generated@@25) (= ($generated@@26 $generated@@27) $generated@@24)))
 :pattern ( ($generated@@22 $generated@@23 $generated@@27 $generated@@24))
)))
(assert (forall (($generated@@30 T@U) ($generated@@31 T@U) ) (! (= ($generated@@28 $generated@@23 $generated@@30 $generated@@29 $generated@@31) ($generated@@28 $generated@@23 $generated@@30 $generated@@24 $generated@@31))
 :pattern ( ($generated@@28 $generated@@23 $generated@@30 $generated@@29 $generated@@31))
 :pattern ( ($generated@@28 $generated@@23 $generated@@30 $generated@@24 $generated@@31))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@40 T@T) ($generated@@41 T@T) ($generated@@42 T@U) ($generated@@43 T@U) ($generated@@44 T@U) ) (! (= ($generated@@33 $generated@@40 $generated@@41 ($generated@@37 $generated@@40 $generated@@41 $generated@@43 $generated@@44 $generated@@42) $generated@@44) $generated@@42)
 :weight 0
)) (forall (($generated@@45 T@T) ($generated@@46 T@T) ($generated@@47 T@U) ($generated@@48 T@U) ($generated@@49 T@U) ($generated@@50 T@U) ) (!  (or (= $generated@@49 $generated@@50) (= ($generated@@33 $generated@@45 $generated@@46 ($generated@@37 $generated@@45 $generated@@46 $generated@@48 $generated@@49 $generated@@47) $generated@@50) ($generated@@33 $generated@@45 $generated@@46 $generated@@48 $generated@@50)))
 :weight 0
))) (= ($generated@@4 $generated@@34) 4)) (= ($generated@@4 $generated@@35) 5)) (forall (($generated@@51 T@T) ($generated@@52 T@T) ) (= ($generated@@4 ($generated@@36 $generated@@51 $generated@@52)) 6))) (forall (($generated@@53 T@T) ($generated@@54 T@T) ) (! (= ($generated@@38 ($generated@@36 $generated@@53 $generated@@54)) $generated@@53)
 :pattern ( ($generated@@36 $generated@@53 $generated@@54))
))) (forall (($generated@@55 T@T) ($generated@@56 T@T) ) (! (= ($generated@@39 ($generated@@36 $generated@@55 $generated@@56)) $generated@@56)
 :pattern ( ($generated@@36 $generated@@55 $generated@@56))
))))
(assert (forall (($generated@@57 T@U) ($generated@@58 T@U) ) (! (= ($generated@@28 $generated@@23 $generated@@57 $generated@@24 $generated@@58)  (or (= $generated@@57 $generated@@25) ($generated@@9 ($generated@@32 $generated@@5 ($generated@@33 $generated@@34 $generated@@35 ($generated@@33 $generated@@23 ($generated@@36 $generated@@34 $generated@@35) $generated@@58 $generated@@57) $generated@@0)))))
 :pattern ( ($generated@@28 $generated@@23 $generated@@57 $generated@@24 $generated@@58))
)))
(assert (= ($generated@@4 $generated@@59) 7))
(assert (forall (($generated@@63 T@U) ($generated@@64 T@U) ($generated@@65 T@U) ) (!  (=> (and ($generated@@22 $generated@@59 $generated@@63 ($generated@@61 $generated@@65)) ($generated@@62 $generated@@64 $generated@@65)) ($generated@@22 $generated@@59 ($generated@@60 $generated@@63 $generated@@64) ($generated@@61 $generated@@65)))
 :pattern ( ($generated@@22 $generated@@59 ($generated@@60 $generated@@63 $generated@@64) ($generated@@61 $generated@@65)))
)))
(assert (forall (($generated@@68 T@U) ($generated@@69 T@U) ) (! (= ($generated@@66 $generated@@68 $generated@@69)  (and (= ($generated@@20 $generated@@68) ($generated@@20 $generated@@69)) (forall (($generated@@70 Int) ) (!  (=> (and (<= 0 $generated@@70) (< $generated@@70 ($generated@@20 $generated@@68))) (= ($generated@@67 $generated@@68 $generated@@70) ($generated@@67 $generated@@69 $generated@@70)))
 :pattern ( ($generated@@67 $generated@@68 $generated@@70))
 :pattern ( ($generated@@67 $generated@@69 $generated@@70))
))))
 :pattern ( ($generated@@66 $generated@@68 $generated@@69))
)))
(assert (forall (($generated@@72 T@U) ($generated@@73 T@T) ) (! (= ($generated@@71 $generated@@73 ($generated@@32 $generated@@73 $generated@@72)) $generated@@72)
 :pattern ( ($generated@@32 $generated@@73 $generated@@72))
)))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@U) ) (! (= ($generated@@20 ($generated@@60 $generated@@74 $generated@@75)) (+ 1 ($generated@@20 $generated@@74)))
 :pattern ( ($generated@@60 $generated@@74 $generated@@75))
)))
(assert (forall (($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@T) ) (! (= ($generated@@76 ($generated@@71 $generated@@80 $generated@@77) $generated@@78 $generated@@79) ($generated@@28 $generated@@80 $generated@@77 $generated@@78 $generated@@79))
 :pattern ( ($generated@@76 ($generated@@71 $generated@@80 $generated@@77) $generated@@78 $generated@@79))
)))
(assert (forall (($generated@@82 T@U) ($generated@@83 T@U) ) (! (= ($generated@@20 ($generated@@81 $generated@@82 $generated@@83)) (+ ($generated@@20 $generated@@82) ($generated@@20 $generated@@83)))
 :pattern ( ($generated@@20 ($generated@@81 $generated@@82 $generated@@83)))
)))
(assert (forall (($generated@@84 T@U) ) (!  (=> ($generated@@62 $generated@@84 $generated@@24) (and (= ($generated@@71 $generated@@23 ($generated@@32 $generated@@23 $generated@@84)) $generated@@84) ($generated@@22 $generated@@23 ($generated@@32 $generated@@23 $generated@@84) $generated@@24)))
 :pattern ( ($generated@@62 $generated@@84 $generated@@24))
)))
(assert (forall (($generated@@85 T@U) ) (!  (=> ($generated@@62 $generated@@85 $generated@@29) (and (= ($generated@@71 $generated@@23 ($generated@@32 $generated@@23 $generated@@85)) $generated@@85) ($generated@@22 $generated@@23 ($generated@@32 $generated@@23 $generated@@85) $generated@@29)))
 :pattern ( ($generated@@62 $generated@@85 $generated@@29))
)))
(assert (forall (($generated@@86 T@U) ) (! (= ($generated@@22 $generated@@23 $generated@@86 $generated@@29)  (and ($generated@@22 $generated@@23 $generated@@86 $generated@@24) (or (not (= $generated@@86 $generated@@25)) (not true))))
 :pattern ( ($generated@@22 $generated@@23 $generated@@86 $generated@@29))
 :pattern ( ($generated@@22 $generated@@23 $generated@@86 $generated@@24))
)))
(assert (forall (($generated@@87 T@U) ($generated@@88 Int) ($generated@@89 T@U) ) (!  (and (=> (= $generated@@88 ($generated@@20 $generated@@87)) (= ($generated@@67 ($generated@@60 $generated@@87 $generated@@89) $generated@@88) $generated@@89)) (=> (or (not (= $generated@@88 ($generated@@20 $generated@@87))) (not true)) (= ($generated@@67 ($generated@@60 $generated@@87 $generated@@89) $generated@@88) ($generated@@67 $generated@@87 $generated@@88))))
 :pattern ( ($generated@@67 ($generated@@60 $generated@@87 $generated@@89) $generated@@88))
)))
(assert (forall (($generated@@90 T@U) ($generated@@91 T@U) ) (!  (=> ($generated@@66 $generated@@90 $generated@@91) (= $generated@@90 $generated@@91))
 :pattern ( ($generated@@66 $generated@@90 $generated@@91))
)))
(assert (forall (($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@T) ) (! (= ($generated@@62 ($generated@@71 $generated@@94 $generated@@92) $generated@@93) ($generated@@22 $generated@@94 $generated@@92 $generated@@93))
 :pattern ( ($generated@@62 ($generated@@71 $generated@@94 $generated@@92) $generated@@93))
)))
(assert (forall (($generated@@95 T@U) ) (! (<= 0 ($generated@@20 $generated@@95))
 :pattern ( ($generated@@20 $generated@@95))
)))
(assert (forall (($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ) (! (= ($generated@@28 $generated@@59 $generated@@96 ($generated@@61 $generated@@97) $generated@@98) (forall (($generated@@99 Int) ) (!  (=> (and (<= 0 $generated@@99) (< $generated@@99 ($generated@@20 $generated@@96))) ($generated@@76 ($generated@@67 $generated@@96 $generated@@99) $generated@@97 $generated@@98))
 :pattern ( ($generated@@67 $generated@@96 $generated@@99))
)))
 :pattern ( ($generated@@28 $generated@@59 $generated@@96 ($generated@@61 $generated@@97) $generated@@98))
)))
(assert (forall (($generated@@101 T@U) ) (! (= ($generated@@100 ($generated@@61 $generated@@101)) $generated@@101)
 :pattern ( ($generated@@61 $generated@@101))
)))
(assert (forall (($generated@@103 T@U) ) (! (= ($generated@@102 ($generated@@61 $generated@@103)) $generated)
 :pattern ( ($generated@@61 $generated@@103))
)))
(assert (forall (($generated@@104 T@U) ($generated@@105 T@T) ) (! (= ($generated@@32 $generated@@105 ($generated@@71 $generated@@105 $generated@@104)) $generated@@104)
 :pattern ( ($generated@@71 $generated@@105 $generated@@104))
)))
(assert  (and (forall (($generated@@109 T@T) ($generated@@110 T@T) ($generated@@111 T@T) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (! (= ($generated@@106 $generated@@109 $generated@@110 $generated@@111 ($generated@@108 $generated@@109 $generated@@110 $generated@@111 $generated@@113 $generated@@114 $generated@@115 $generated@@112) $generated@@114 $generated@@115) $generated@@112)
 :weight 0
)) (and (forall (($generated@@116 T@T) ($generated@@117 T@T) ($generated@@118 T@T) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ) (!  (or (= $generated@@121 $generated@@123) (= ($generated@@106 $generated@@116 $generated@@117 $generated@@118 ($generated@@108 $generated@@116 $generated@@117 $generated@@118 $generated@@120 $generated@@121 $generated@@122 $generated@@119) $generated@@123 $generated@@124) ($generated@@106 $generated@@116 $generated@@117 $generated@@118 $generated@@120 $generated@@123 $generated@@124)))
 :weight 0
)) (forall (($generated@@125 T@T) ($generated@@126 T@T) ($generated@@127 T@T) ($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ) (!  (or (= $generated@@131 $generated@@133) (= ($generated@@106 $generated@@125 $generated@@126 $generated@@127 ($generated@@108 $generated@@125 $generated@@126 $generated@@127 $generated@@129 $generated@@130 $generated@@131 $generated@@128) $generated@@132 $generated@@133) ($generated@@106 $generated@@125 $generated@@126 $generated@@127 $generated@@129 $generated@@132 $generated@@133)))
 :weight 0
)))))
(assert (forall (($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 Bool) ($generated@@138 T@U) ($generated@@139 T@U) ) (! (= ($generated@@9 ($generated@@106 $generated@@23 $generated@@34 $generated@@5 ($generated@@107 $generated@@134 $generated@@135 $generated@@136 $generated@@137) $generated@@138 $generated@@139))  (=> (and (or (not (= $generated@@138 $generated@@134)) (not true)) ($generated@@9 ($generated@@32 $generated@@5 ($generated@@33 $generated@@34 $generated@@35 ($generated@@33 $generated@@23 ($generated@@36 $generated@@34 $generated@@35) $generated@@135 $generated@@138) $generated@@136)))) $generated@@137))
 :pattern ( ($generated@@106 $generated@@23 $generated@@34 $generated@@5 ($generated@@107 $generated@@134 $generated@@135 $generated@@136 $generated@@137) $generated@@138 $generated@@139))
)))
(assert (forall (($generated@@142 T@U) ($generated@@143 T@U) ) (!  (and (= ($generated@@140 ($generated@@60 $generated@@142 $generated@@143)) $generated@@142) (= ($generated@@141 ($generated@@60 $generated@@142 $generated@@143)) $generated@@143))
 :pattern ( ($generated@@60 $generated@@142 $generated@@143))
)))
(assert (forall (($generated@@144 T@U) ($generated@@145 T@U) ) (!  (=> ($generated@@62 $generated@@144 ($generated@@61 $generated@@145)) (and (= ($generated@@71 $generated@@59 ($generated@@32 $generated@@59 $generated@@144)) $generated@@144) ($generated@@22 $generated@@59 ($generated@@32 $generated@@59 $generated@@144) ($generated@@61 $generated@@145))))
 :pattern ( ($generated@@62 $generated@@144 ($generated@@61 $generated@@145)))
)))
(assert (= ($generated@@102 $generated@@24) $generated@@1))
(assert (= ($generated@@146 $generated@@24) $generated@@3))
(assert (= ($generated@@102 $generated@@29) $generated@@2))
(assert (= ($generated@@146 $generated@@29) $generated@@3))
(assert (forall (($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 Int) ) (!  (and (=> (< $generated@@149 ($generated@@20 $generated@@147)) (= ($generated@@67 ($generated@@81 $generated@@147 $generated@@148) $generated@@149) ($generated@@67 $generated@@147 $generated@@149))) (=> (<= ($generated@@20 $generated@@147) $generated@@149) (= ($generated@@67 ($generated@@81 $generated@@147 $generated@@148) $generated@@149) ($generated@@67 $generated@@148 (- $generated@@149 ($generated@@20 $generated@@147))))))
 :pattern ( ($generated@@67 ($generated@@81 $generated@@147 $generated@@148) $generated@@149))
)))
(assert (forall (($generated@@150 T@U) ) (!  (=> (= ($generated@@20 $generated@@150) 0) (= $generated@@150 $generated@@21))
 :pattern ( ($generated@@20 $generated@@150))
)))
(assert (forall (($generated@@151 T@U) ($generated@@152 T@U) ) (! (= ($generated@@22 $generated@@59 $generated@@151 ($generated@@61 $generated@@152)) (forall (($generated@@153 Int) ) (!  (=> (and (<= 0 $generated@@153) (< $generated@@153 ($generated@@20 $generated@@151))) ($generated@@62 ($generated@@67 $generated@@151 $generated@@153) $generated@@152))
 :pattern ( ($generated@@67 $generated@@151 $generated@@153))
)))
 :pattern ( ($generated@@22 $generated@@59 $generated@@151 ($generated@@61 $generated@@152)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@154 () T@U)
(declare-fun $generated@@155 (T@U) T@U)
(declare-fun $generated@@156 () T@U)
(declare-fun $generated@@157 () T@U)
(declare-fun $generated@@158 (T@U) T@U)
(declare-fun $generated@@159 () T@U)
(declare-fun $generated@@160 () T@U)
(declare-fun $generated@@161 () T@U)
(declare-fun $generated@@162 () T@U)
(declare-fun $generated@@163 () T@U)
(declare-fun $generated@@164 (T@U) Bool)
(declare-fun $generated@@165 (T@U) Bool)
(declare-fun $generated@@166 () T@U)
(declare-fun $generated@@167 () T@U)
(declare-fun $generated@@168 () T@U)
(declare-fun $generated@@169 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@170  (=> (and (= $generated@@154 ($generated@@155 $generated@@156)) (= $generated@@157 ($generated@@155 ($generated@@155 $generated@@156)))) (=> (and (and (= ($generated@@158 $generated@@156) $generated@@156) (= $generated@@159 ($generated@@107 $generated@@25 $generated@@160 $generated@@0 false))) (and (= $generated@@161 ($generated@@81 $generated@@162 ($generated@@60 $generated@@21 $generated@@163))) (= (ControlFlow 0 2) (- 0 1)))) ($generated@@66 $generated@@161 ($generated@@81 $generated@@162 ($generated@@60 $generated@@21 $generated@@163)))))))
(let (($generated@@171  (=> (and (and ($generated@@164 $generated@@160) ($generated@@165 $generated@@160)) (and (or (not (= $generated@@166 $generated@@25)) (not true)) (and ($generated@@22 $generated@@23 $generated@@166 $generated@@29) ($generated@@28 $generated@@23 $generated@@166 $generated@@29 $generated@@160)))) (=> (and (and (and ($generated@@22 $generated@@59 $generated@@162 ($generated@@61 $generated@@167)) ($generated@@28 $generated@@59 $generated@@162 ($generated@@61 $generated@@167) $generated@@160)) (and ($generated@@62 $generated@@163 $generated@@167) ($generated@@76 $generated@@163 $generated@@167 $generated@@160))) (and (and ($generated@@22 $generated@@59 $generated@@168 ($generated@@61 $generated@@167)) ($generated@@28 $generated@@59 $generated@@168 ($generated@@61 $generated@@167) $generated@@160)) (and (= 0 $generated@@169) (= (ControlFlow 0 3) 2)))) $generated@@170))))
$generated@@171)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
