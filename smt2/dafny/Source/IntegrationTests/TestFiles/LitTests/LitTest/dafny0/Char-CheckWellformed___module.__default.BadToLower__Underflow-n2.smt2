(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (Bool) T@U)
(declare-fun $generated@@7 (T@U) Bool)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun $generated@@9 (T@U) Int)
(declare-fun $generated@@10 (Real) T@U)
(declare-fun $generated@@11 (T@U) Real)
(declare-fun $generated@@18 (T@U) T@U)
(declare-fun $generated@@19 (T@T T@U) T@U)
(declare-fun $generated@@22 (T@T T@U) T@U)
(declare-fun $generated@@23 (T@T T@U) T@U)
(declare-fun $generated@@26 () Int)
(declare-fun $generated@@27 (T@U) T@U)
(declare-fun $generated@@28 () T@T)
(declare-fun $generated@@29 (T@U) Bool)
(declare-fun $generated@@30 (T@T T@U T@U) Bool)
(declare-fun $generated@@31 (T@U) Int)
(declare-fun $generated@@32 (Int) T@U)
(declare-fun $generated@@33 (T@U T@U) T@U)
(declare-fun $generated@@34 (T@U T@U) T@U)
(declare-fun $generated@@44 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@45 () T@T)
(declare-fun $generated@@46 () T@T)
(declare-fun $generated@@47 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@48 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 (T@T T@T) T@T)
(declare-fun $generated@@51 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@52 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@53 (T@T) T@T)
(declare-fun $generated@@54 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@4) 1)) (= ($generated@@2 $generated@@5) 2)) (forall (($generated@@12 Bool) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Int) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Real) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))))
(assert (distinct $generated $generated@@0 $generated@@1)
)
(assert (= ($generated@@18 $generated) $generated@@0))
(assert (forall (($generated@@20 T@U) ($generated@@21 T@T) ) (! (= ($generated@@19 $generated@@21 $generated@@20) $generated@@20)
 :pattern ( ($generated@@19 $generated@@21 $generated@@20))
)))
(assert (forall (($generated@@24 T@U) ($generated@@25 T@T) ) (! (= ($generated@@23 $generated@@25 ($generated@@22 $generated@@25 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@22 $generated@@25 $generated@@24))
)))
(assert (= ($generated@@2 $generated@@28) 3))
(assert  (=> (<= 0 $generated@@26) (forall (($generated@@35 T@U) ) (!  (=> (or ($generated@@29 ($generated@@19 $generated@@28 $generated@@35)) (and (< 0 $generated@@26) ($generated@@30 $generated@@28 $generated@@35 $generated))) (= ($generated@@27 ($generated@@19 $generated@@28 $generated@@35)) (ite  (and (<= ($generated@@31 ($generated@@19 $generated@@28 ($generated@@32 57344))) ($generated@@31 ($generated@@19 $generated@@28 $generated@@35))) (<= ($generated@@31 ($generated@@19 $generated@@28 $generated@@35)) ($generated@@31 ($generated@@19 $generated@@28 ($generated@@32 65536))))) ($generated@@33 ($generated@@34 $generated@@35 ($generated@@32 65)) ($generated@@32 97)) $generated@@35)))
 :weight 3
 :pattern ( ($generated@@27 ($generated@@19 $generated@@28 $generated@@35)))
))))
(assert  (=> (<= 0 $generated@@26) (forall (($generated@@36 T@U) ) (!  (=> (or ($generated@@29 $generated@@36) (and (< 0 $generated@@26) ($generated@@30 $generated@@28 $generated@@36 $generated))) (= ($generated@@27 $generated@@36) (ite  (and (<= ($generated@@31 ($generated@@19 $generated@@28 ($generated@@32 57344))) ($generated@@31 $generated@@36)) (<= ($generated@@31 $generated@@36) ($generated@@31 ($generated@@19 $generated@@28 ($generated@@32 65536))))) ($generated@@33 ($generated@@34 $generated@@36 ($generated@@32 65)) ($generated@@32 97)) $generated@@36)))
 :pattern ( ($generated@@27 $generated@@36))
))))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ) (! (= ($generated@@34 $generated@@37 $generated@@38) ($generated@@32 (- ($generated@@31 $generated@@37) ($generated@@31 $generated@@38))))
 :pattern ( ($generated@@34 $generated@@37 $generated@@38))
)))
(assert (forall (($generated@@39 T@U) ($generated@@40 T@U) ) (! (= ($generated@@33 $generated@@39 $generated@@40) ($generated@@32 (+ ($generated@@31 $generated@@39) ($generated@@31 $generated@@40))))
 :pattern ( ($generated@@33 $generated@@39 $generated@@40))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@T) ) (! (= ($generated@@22 $generated@@42 ($generated@@23 $generated@@42 $generated@@41)) $generated@@41)
 :pattern ( ($generated@@23 $generated@@42 $generated@@41))
)))
(assert (forall (($generated@@43 Int) ) (!  (=> (or (and (<= 0 $generated@@43) (< $generated@@43 55296)) (and (<= 57344 $generated@@43) (< $generated@@43 1114112))) (= ($generated@@31 ($generated@@32 $generated@@43)) $generated@@43))
 :pattern ( ($generated@@32 $generated@@43))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@55 T@T) ($generated@@56 T@T) ($generated@@57 T@T) ($generated@@58 T@U) ($generated@@59 T@U) ($generated@@60 T@U) ($generated@@61 T@U) ) (! (= ($generated@@44 $generated@@55 $generated@@56 $generated@@57 ($generated@@51 $generated@@55 $generated@@56 $generated@@57 $generated@@59 $generated@@60 $generated@@61 $generated@@58) $generated@@60 $generated@@61) $generated@@58)
 :weight 0
)) (and (forall (($generated@@62 T@T) ($generated@@63 T@T) ($generated@@64 T@T) ($generated@@65 T@U) ($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ) (!  (or (= $generated@@67 $generated@@69) (= ($generated@@44 $generated@@62 $generated@@63 $generated@@64 ($generated@@51 $generated@@62 $generated@@63 $generated@@64 $generated@@66 $generated@@67 $generated@@68 $generated@@65) $generated@@69 $generated@@70) ($generated@@44 $generated@@62 $generated@@63 $generated@@64 $generated@@66 $generated@@69 $generated@@70)))
 :weight 0
)) (forall (($generated@@71 T@T) ($generated@@72 T@T) ($generated@@73 T@T) ($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ) (!  (or (= $generated@@77 $generated@@79) (= ($generated@@44 $generated@@71 $generated@@72 $generated@@73 ($generated@@51 $generated@@71 $generated@@72 $generated@@73 $generated@@75 $generated@@76 $generated@@77 $generated@@74) $generated@@78 $generated@@79) ($generated@@44 $generated@@71 $generated@@72 $generated@@73 $generated@@75 $generated@@78 $generated@@79)))
 :weight 0
)))) (= ($generated@@2 $generated@@45) 4)) (= ($generated@@2 $generated@@46) 5)) (forall (($generated@@80 T@T) ($generated@@81 T@T) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ) (! (= ($generated@@48 $generated@@80 $generated@@81 ($generated@@52 $generated@@80 $generated@@81 $generated@@83 $generated@@84 $generated@@82) $generated@@84) $generated@@82)
 :weight 0
))) (forall (($generated@@85 T@T) ($generated@@86 T@T) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ) (!  (or (= $generated@@89 $generated@@90) (= ($generated@@48 $generated@@85 $generated@@86 ($generated@@52 $generated@@85 $generated@@86 $generated@@88 $generated@@89 $generated@@87) $generated@@90) ($generated@@48 $generated@@85 $generated@@86 $generated@@88 $generated@@90)))
 :weight 0
))) (= ($generated@@2 $generated@@49) 6)) (forall (($generated@@91 T@T) ($generated@@92 T@T) ) (= ($generated@@2 ($generated@@50 $generated@@91 $generated@@92)) 7))) (forall (($generated@@93 T@T) ($generated@@94 T@T) ) (! (= ($generated@@53 ($generated@@50 $generated@@93 $generated@@94)) $generated@@93)
 :pattern ( ($generated@@50 $generated@@93 $generated@@94))
))) (forall (($generated@@95 T@T) ($generated@@96 T@T) ) (! (= ($generated@@54 ($generated@@50 $generated@@95 $generated@@96)) $generated@@96)
 :pattern ( ($generated@@50 $generated@@95 $generated@@96))
))))
(assert (forall (($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 Bool) ($generated@@101 T@U) ($generated@@102 T@U) ) (! (= ($generated@@7 ($generated@@44 $generated@@45 $generated@@46 $generated@@3 ($generated@@47 $generated@@97 $generated@@98 $generated@@99 $generated@@100) $generated@@101 $generated@@102))  (=> (and (or (not (= $generated@@101 $generated@@97)) (not true)) ($generated@@7 ($generated@@22 $generated@@3 ($generated@@48 $generated@@46 $generated@@49 ($generated@@48 $generated@@45 ($generated@@50 $generated@@46 $generated@@49) $generated@@98 $generated@@101) $generated@@99)))) $generated@@100))
 :pattern ( ($generated@@44 $generated@@45 $generated@@46 $generated@@3 ($generated@@47 $generated@@97 $generated@@98 $generated@@99 $generated@@100) $generated@@101 $generated@@102))
)))
(assert  (=> (<= 0 $generated@@26) (forall (($generated@@103 T@U) ) (!  (=> (or ($generated@@29 $generated@@103) (and (< 0 $generated@@26) ($generated@@30 $generated@@28 $generated@@103 $generated))) ($generated@@30 $generated@@28 ($generated@@27 $generated@@103) $generated))
 :pattern ( ($generated@@27 $generated@@103))
))))
(assert (forall (($generated@@104 T@U) ) (!  (and (= ($generated@@32 ($generated@@31 $generated@@104)) $generated@@104) (or (and (<= 0 ($generated@@31 $generated@@104)) (< ($generated@@31 $generated@@104) 55296)) (and (<= 57344 ($generated@@31 $generated@@104)) (< ($generated@@31 $generated@@104) 1114112))))
 :pattern ( ($generated@@31 $generated@@104))
)))
(assert (forall (($generated@@105 T@U) ($generated@@106 T@T) ) (! (= ($generated@@23 $generated@@106 ($generated@@19 $generated@@106 $generated@@105)) ($generated@@19 $generated@@49 ($generated@@23 $generated@@106 $generated@@105)))
 :pattern ( ($generated@@23 $generated@@106 ($generated@@19 $generated@@106 $generated@@105)))
)))
(assert (forall (($generated@@107 T@U) ) (! ($generated@@30 $generated@@28 $generated@@107 $generated)
 :pattern ( ($generated@@30 $generated@@28 $generated@@107 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@108 () T@U)
(declare-fun $generated@@109 () T@U)
(declare-fun $generated@@110 () T@U)
(declare-fun $generated@@111 () T@U)
(declare-fun $generated@@112 (T@U) Bool)
(declare-fun $generated@@113 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 9) (let (($generated@@114 true))
(let (($generated@@115  (=> (and (<= ($generated@@31 ($generated@@19 $generated@@28 ($generated@@32 57344))) ($generated@@31 $generated@@108)) (<= ($generated@@31 $generated@@108) ($generated@@31 ($generated@@19 $generated@@28 ($generated@@32 65536))))) (and (=> (= (ControlFlow 0 3) (- 0 4)) (or (and (<= 0 (- ($generated@@31 $generated@@108) ($generated@@31 ($generated@@19 $generated@@28 ($generated@@32 65))))) (< (- ($generated@@31 $generated@@108) ($generated@@31 ($generated@@19 $generated@@28 ($generated@@32 65)))) 55296)) (and (<= 57344 (- ($generated@@31 $generated@@108) ($generated@@31 ($generated@@19 $generated@@28 ($generated@@32 65))))) (< (- ($generated@@31 $generated@@108) ($generated@@31 ($generated@@19 $generated@@28 ($generated@@32 65)))) 1114112)))) (=> (or (and (<= 0 (- ($generated@@31 $generated@@108) ($generated@@31 ($generated@@19 $generated@@28 ($generated@@32 65))))) (< (- ($generated@@31 $generated@@108) ($generated@@31 ($generated@@19 $generated@@28 ($generated@@32 65)))) 55296)) (and (<= 57344 (- ($generated@@31 $generated@@108) ($generated@@31 ($generated@@19 $generated@@28 ($generated@@32 65))))) (< (- ($generated@@31 $generated@@108) ($generated@@31 ($generated@@19 $generated@@28 ($generated@@32 65)))) 1114112))) (=> (= (ControlFlow 0 3) (- 0 2)) (or (and (<= 0 (+ ($generated@@31 ($generated@@34 $generated@@108 ($generated@@32 65))) ($generated@@31 ($generated@@19 $generated@@28 ($generated@@32 97))))) (< (+ ($generated@@31 ($generated@@34 $generated@@108 ($generated@@32 65))) ($generated@@31 ($generated@@19 $generated@@28 ($generated@@32 97)))) 55296)) (and (<= 57344 (+ ($generated@@31 ($generated@@34 $generated@@108 ($generated@@32 65))) ($generated@@31 ($generated@@19 $generated@@28 ($generated@@32 97))))) (< (+ ($generated@@31 ($generated@@34 $generated@@108 ($generated@@32 65))) ($generated@@31 ($generated@@19 $generated@@28 ($generated@@32 97)))) 1114112)))))))))
(let (($generated@@116  (=> (< ($generated@@31 $generated@@108) ($generated@@31 ($generated@@19 $generated@@28 ($generated@@32 57344)))) (and (=> (= (ControlFlow 0 7) 3) $generated@@115) (=> (= (ControlFlow 0 7) 5) $generated@@114)))))
(let (($generated@@117  (=> (<= ($generated@@31 ($generated@@19 $generated@@28 ($generated@@32 57344))) ($generated@@31 $generated@@108)) (and (=> (= (ControlFlow 0 6) 3) $generated@@115) (=> (= (ControlFlow 0 6) 5) $generated@@114)))))
(let (($generated@@118 true))
(let (($generated@@119  (=> (= $generated@@109 ($generated@@47 $generated@@110 $generated@@111 $generated@@1 false)) (and (and (=> (= (ControlFlow 0 8) 1) $generated@@118) (=> (= (ControlFlow 0 8) 6) $generated@@117)) (=> (= (ControlFlow 0 8) 7) $generated@@116)))))
(let (($generated@@120  (=> (and (and (and ($generated@@112 $generated@@111) ($generated@@113 $generated@@111)) ($generated@@30 $generated@@28 $generated@@108 $generated)) (and (= 0 $generated@@26) (= (ControlFlow 0 9) 8))) $generated@@119)))
$generated@@120))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 3) (- 4))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
