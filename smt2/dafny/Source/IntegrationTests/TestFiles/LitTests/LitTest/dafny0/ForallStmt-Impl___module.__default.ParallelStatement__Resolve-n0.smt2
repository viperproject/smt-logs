(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagSet () T@U)
(declare-fun alloc () T@U)
(declare-fun allocName () T@U)
(declare-fun Tagclass._System.object? () T@U)
(declare-fun Tagclass._System.object () T@U)
(declare-fun Tagclass._System.array? () T@U)
(declare-fun Tagclass._System.array () T@U)
(declare-fun Tagclass._module.C () T@U)
(declare-fun Tagclass._module.C? () T@U)
(declare-fun class._module.C? () T@U)
(declare-fun tytagFamily$object () T@U)
(declare-fun tytagFamily$array () T@U)
(declare-fun tytagFamily$C () T@U)
(declare-fun field$st () T@U)
(declare-fun field$data () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun FDim (T@U) Int)
(declare-fun Tag (T@U) T@U)
(declare-fun DeclName (T@U) T@U)
(declare-fun _System.array.Length (T@U) Int)
(declare-fun Tclass._System.array? (T@U) T@U)
(declare-fun null () T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun |Set#Union| (T@U T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun |Set#Difference| (T@U T@U) T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun Tclass._System.array (T@U) T@U)
(declare-fun Tclass._module.C? () T@U)
(declare-fun Tclass._System.object () T@U)
(declare-fun Tclass._System.object? () T@U)
(declare-fun Tclass._module.C () T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun _module.C.st () T@U)
(declare-fun FieldOfDecl (T@U T@U) T@U)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun _module.C.data () T@U)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun IndexField (Int) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun |Set#Disjoint| (T@U T@U) Bool)
(declare-fun SetType () T@T)
(declare-fun TSet (T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun DeclType (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun IndexField_Inverse (T@U) Int)
(declare-fun Tclass._System.array?_0 (T@U) T@U)
(declare-fun Tclass._System.array_0 (T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.G (Int) Int)
(declare-fun |_module.__default.G#canCall| (Int) Bool)
(declare-fun Mod (Int Int) Int)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt TagSet alloc allocName Tagclass._System.object? Tagclass._System.object Tagclass._System.array? Tagclass._System.array Tagclass._module.C Tagclass._module.C? class._module.C? tytagFamily$object tytagFamily$array tytagFamily$C field$st field$data)
)
(assert (= (FDim alloc) 0))
(assert (= (Tag TInt) TagInt))
(assert (= (DeclName alloc) allocName))
(assert (forall ((_System.array$arg T@U) ($o T@U) ) (!  (=> (and (or (not (= $o null)) (not true)) (= (dtype $o) (Tclass._System.array? _System.array$arg))) ($Is intType (int_2_U (_System.array.Length $o)) TInt))
 :pattern ( (_System.array.Length $o) (Tclass._System.array? _System.array$arg))
)))
(assert (forall ((a T@U) (b T@U) (y T@U) ) (!  (=> (|Set#IsMember| a y) (|Set#IsMember| (|Set#Union| a b) y))
 :pattern ( (|Set#Union| a b) (|Set#IsMember| a y))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) (y@@0 T@U) ) (!  (=> (|Set#IsMember| b@@0 y@@0) (|Set#IsMember| (|Set#Union| a@@0 b@@0) y@@0))
 :pattern ( (|Set#Union| a@@0 b@@0) (|Set#IsMember| b@@0 y@@0))
)))
(assert (forall ((a@@1 T@U) (b@@1 T@U) (y@@1 T@U) ) (!  (=> (|Set#IsMember| b@@1 y@@1) (not (|Set#IsMember| (|Set#Difference| a@@1 b@@1) y@@1)))
 :pattern ( (|Set#Difference| a@@1 b@@1) (|Set#IsMember| b@@1 y@@1))
)))
(assert (= (Ctor refType) 3))
(assert (forall ((_System.array$arg@@0 T@U) (|c#0| T@U) ($h T@U) ) (! (= ($IsAlloc refType |c#0| (Tclass._System.array _System.array$arg@@0) $h) ($IsAlloc refType |c#0| (Tclass._System.array? _System.array$arg@@0) $h))
 :pattern ( ($IsAlloc refType |c#0| (Tclass._System.array _System.array$arg@@0) $h))
 :pattern ( ($IsAlloc refType |c#0| (Tclass._System.array? _System.array$arg@@0) $h))
)))
(assert (forall (($o@@0 T@U) ) (! (= ($Is refType $o@@0 Tclass._module.C?)  (or (= $o@@0 null) (= (dtype $o@@0) Tclass._module.C?)))
 :pattern ( ($Is refType $o@@0 Tclass._module.C?))
)))
(assert (forall ((a@@2 T@U) (b@@2 T@U) ) (! (= (|Set#Union| (|Set#Union| a@@2 b@@2) b@@2) (|Set#Union| a@@2 b@@2))
 :pattern ( (|Set#Union| (|Set#Union| a@@2 b@@2) b@@2))
)))
(assert (forall ((a@@3 T@U) (b@@3 T@U) (o T@U) ) (! (= (|Set#IsMember| (|Set#Difference| a@@3 b@@3) o)  (and (|Set#IsMember| a@@3 o) (not (|Set#IsMember| b@@3 o))))
 :pattern ( (|Set#IsMember| (|Set#Difference| a@@3 b@@3) o))
)))
(assert (forall ((|c#0@@0| T@U) ($h@@0 T@U) ) (! (= ($IsAlloc refType |c#0@@0| Tclass._System.object $h@@0) ($IsAlloc refType |c#0@@0| Tclass._System.object? $h@@0))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass._System.object $h@@0))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass._System.object? $h@@0))
)))
(assert (forall ((|c#0@@1| T@U) ($h@@1 T@U) ) (! (= ($IsAlloc refType |c#0@@1| Tclass._module.C $h@@1) ($IsAlloc refType |c#0@@1| Tclass._module.C? $h@@1))
 :pattern ( ($IsAlloc refType |c#0@@1| Tclass._module.C $h@@1))
 :pattern ( ($IsAlloc refType |c#0@@1| Tclass._module.C? $h@@1))
)))
(assert  (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 4)) (= (Ctor BoxType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 6))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((_System.array$arg@@1 T@U) ($o@@1 T@U) ($h@@2 T@U) ) (! (= ($IsAlloc refType $o@@1 (Tclass._System.array? _System.array$arg@@1) $h@@2)  (or (= $o@@1 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o@@1) alloc)))))
 :pattern ( ($IsAlloc refType $o@@1 (Tclass._System.array? _System.array$arg@@1) $h@@2))
)))
(assert (= (FDim _module.C.st) 0))
(assert (= (FieldOfDecl class._module.C? field$st) _module.C.st))
(assert  (not ($IsGhostField _module.C.st)))
(assert (= (FDim _module.C.data) 0))
(assert (= (FieldOfDecl class._module.C? field$data) _module.C.data))
(assert  (not ($IsGhostField _module.C.data)))
(assert (forall (($o@@2 T@U) ($h@@3 T@U) ) (! (= ($IsAlloc refType $o@@2 Tclass._System.object? $h@@3)  (or (= $o@@2 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@3 $o@@2) alloc)))))
 :pattern ( ($IsAlloc refType $o@@2 Tclass._System.object? $h@@3))
)))
(assert (forall (($o@@3 T@U) ($h@@4 T@U) ) (! (= ($IsAlloc refType $o@@3 Tclass._module.C? $h@@4)  (or (= $o@@3 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@4 $o@@3) alloc)))))
 :pattern ( ($IsAlloc refType $o@@3 Tclass._module.C? $h@@4))
)))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o@@0 T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o@@0) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o@@0) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o@@0) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((_System.array$arg@@2 T@U) ($h@@5 T@U) ($o@@4 T@U) ($i0 Int) ) (!  (=> (and (and (and ($IsGoodHeap $h@@5) (and (or (not (= $o@@4 null)) (not true)) (= (dtype $o@@4) (Tclass._System.array? _System.array$arg@@2)))) (and (<= 0 $i0) (< $i0 (_System.array.Length $o@@4)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@5 $o@@4) alloc)))) ($IsAllocBox (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@5 $o@@4) (IndexField $i0)) _System.array$arg@@2 $h@@5))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@5 $o@@4) (IndexField $i0)) (Tclass._System.array? _System.array$arg@@2))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((a@@4 T@U) (b@@4 T@U) ) (! (= (|Set#Disjoint| a@@4 b@@4) (forall ((o@@1 T@U) ) (!  (or (not (|Set#IsMember| a@@4 o@@1)) (not (|Set#IsMember| b@@4 o@@1)))
 :pattern ( (|Set#IsMember| a@@4 o@@1))
 :pattern ( (|Set#IsMember| b@@4 o@@1))
)))
 :pattern ( (|Set#Disjoint| a@@4 b@@4))
)))
(assert (= (Ctor SetType) 7))
(assert (forall ((v T@U) (t0@@0 T@U) ) (! (= ($Is SetType v (TSet t0@@0)) (forall ((bx T@U) ) (!  (=> (|Set#IsMember| v bx) ($IsBox bx t0@@0))
 :pattern ( (|Set#IsMember| v bx))
)))
 :pattern ( ($Is SetType v (TSet t0@@0)))
)))
(assert  (and (forall ((t0@@1 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@1 t1@@0 t2 (MapType1Store t0@@1 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| T@U) (|l#4| T@U) ($o@@5 T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3| |l#4|) $o@@5 $f))  (=> (and (or (not (= $o@@5 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@5) |l#2|)))) (or (= $o@@5 |l#3|) (|Set#IsMember| |l#4| ($Box refType $o@@5)))))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3| |l#4|) $o@@5 $f))
)))
(assert ($IsGhostField alloc))
(assert (forall (($h@@6 T@U) ($o@@6 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@6) (and (or (not (= $o@@6 null)) (not true)) (= (dtype $o@@6) Tclass._module.C?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@6 $o@@6) alloc)))) ($IsAlloc intType ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@6 $o@@6) _module.C.data)) TInt $h@@6))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@6 $o@@6) _module.C.data)))
)))
(assert (forall ((_System.array$arg@@3 T@U) (|c#0@@2| T@U) ) (! (= ($Is refType |c#0@@2| (Tclass._System.array _System.array$arg@@3))  (and ($Is refType |c#0@@2| (Tclass._System.array? _System.array$arg@@3)) (or (not (= |c#0@@2| null)) (not true))))
 :pattern ( ($Is refType |c#0@@2| (Tclass._System.array _System.array$arg@@3)))
 :pattern ( ($Is refType |c#0@@2| (Tclass._System.array? _System.array$arg@@3)))
)))
(assert (forall ((v@@0 T@U) (t T@U) (h@@0 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t h@@0) ($IsAlloc T@@1 v@@0 t h@@0))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t h@@0))
)))
(assert (forall ((h@@1 T@U) (k@@0 T@U) (bx@@0 T@U) (t@@0 T@U) ) (!  (=> ($HeapSucc h@@1 k@@0) (=> ($IsAllocBox bx@@0 t@@0 h@@1) ($IsAllocBox bx@@0 t@@0 k@@0)))
 :pattern ( ($HeapSucc h@@1 k@@0) ($IsAllocBox bx@@0 t@@0 h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@1 T@U) (v@@1 T@U) (t@@1 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@2 k@@1) (=> ($IsAlloc T@@2 v@@1 t@@1 h@@2) ($IsAlloc T@@2 v@@1 t@@1 k@@1)))
 :pattern ( ($HeapSucc h@@2 k@@1) ($IsAlloc T@@2 v@@1 t@@1 h@@2))
)))
(assert (forall ((_System.array$arg@@4 T@U) ) (!  (and (= (Tag (Tclass._System.array? _System.array$arg@@4)) Tagclass._System.array?) (= (TagFamily (Tclass._System.array? _System.array$arg@@4)) tytagFamily$array))
 :pattern ( (Tclass._System.array? _System.array$arg@@4))
)))
(assert (forall ((_System.array$arg@@5 T@U) ) (!  (and (= (Tag (Tclass._System.array _System.array$arg@@5)) Tagclass._System.array) (= (TagFamily (Tclass._System.array _System.array$arg@@5)) tytagFamily$array))
 :pattern ( (Tclass._System.array _System.array$arg@@5))
)))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 Tclass._System.object?) (and (= ($Box refType ($Unbox refType bx@@1)) bx@@1) ($Is refType ($Unbox refType bx@@1) Tclass._System.object?)))
 :pattern ( ($IsBox bx@@1 Tclass._System.object?))
)))
(assert (forall ((bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 Tclass._System.object) (and (= ($Box refType ($Unbox refType bx@@2)) bx@@2) ($Is refType ($Unbox refType bx@@2) Tclass._System.object)))
 :pattern ( ($IsBox bx@@2 Tclass._System.object))
)))
(assert (forall ((bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 Tclass._module.C) (and (= ($Box refType ($Unbox refType bx@@3)) bx@@3) ($Is refType ($Unbox refType bx@@3) Tclass._module.C)))
 :pattern ( ($IsBox bx@@3 Tclass._module.C))
)))
(assert (forall ((bx@@4 T@U) ) (!  (=> ($IsBox bx@@4 Tclass._module.C?) (and (= ($Box refType ($Unbox refType bx@@4)) bx@@4) ($Is refType ($Unbox refType bx@@4) Tclass._module.C?)))
 :pattern ( ($IsBox bx@@4 Tclass._module.C?))
)))
(assert (forall ((_System.array$arg@@6 T@U) ($o@@7 T@U) ) (! (= ($Is refType $o@@7 (Tclass._System.array? _System.array$arg@@6))  (or (= $o@@7 null) (= (dtype $o@@7) (Tclass._System.array? _System.array$arg@@6))))
 :pattern ( ($Is refType $o@@7 (Tclass._System.array? _System.array$arg@@6)))
)))
(assert (forall ((|c#0@@3| T@U) ) (! (= ($Is refType |c#0@@3| Tclass._System.object)  (and ($Is refType |c#0@@3| Tclass._System.object?) (or (not (= |c#0@@3| null)) (not true))))
 :pattern ( ($Is refType |c#0@@3| Tclass._System.object))
 :pattern ( ($Is refType |c#0@@3| Tclass._System.object?))
)))
(assert (forall ((|c#0@@4| T@U) ) (! (= ($Is refType |c#0@@4| Tclass._module.C)  (and ($Is refType |c#0@@4| Tclass._module.C?) (or (not (= |c#0@@4| null)) (not true))))
 :pattern ( ($Is refType |c#0@@4| Tclass._module.C))
 :pattern ( ($Is refType |c#0@@4| Tclass._module.C?))
)))
(assert (forall ((a@@5 T@U) (b@@5 T@U) (o@@2 T@U) ) (! (= (|Set#IsMember| (|Set#Union| a@@5 b@@5) o@@2)  (or (|Set#IsMember| a@@5 o@@2) (|Set#IsMember| b@@5 o@@2)))
 :pattern ( (|Set#IsMember| (|Set#Union| a@@5 b@@5) o@@2))
)))
(assert (forall ((a@@6 T@U) (b@@6 T@U) ) (!  (=> (|Set#Disjoint| a@@6 b@@6) (and (= (|Set#Difference| (|Set#Union| a@@6 b@@6) a@@6) b@@6) (= (|Set#Difference| (|Set#Union| a@@6 b@@6) b@@6) a@@6)))
 :pattern ( (|Set#Union| a@@6 b@@6))
)))
(assert (forall (($h@@7 T@U) ($o@@8 T@U) ) (!  (=> (and ($IsGoodHeap $h@@7) (and (or (not (= $o@@8 null)) (not true)) (= (dtype $o@@8) Tclass._module.C?))) ($Is SetType ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@7 $o@@8) _module.C.st)) (TSet Tclass._System.object)))
 :pattern ( ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@7 $o@@8) _module.C.st)))
)))
(assert (forall (($h@@8 T@U) ($o@@9 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@8) (and (or (not (= $o@@9 null)) (not true)) (= (dtype $o@@9) Tclass._module.C?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@8 $o@@9) alloc)))) ($IsAlloc SetType ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@8 $o@@9) _module.C.st)) (TSet Tclass._System.object) $h@@8))
 :pattern ( ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@8 $o@@9) _module.C.st)))
)))
(assert (forall ((a@@7 T@U) (b@@7 T@U) (c T@U) ) (!  (=> (or (not (= a@@7 c)) (not true)) (=> (and ($HeapSucc a@@7 b@@7) ($HeapSucc b@@7 c)) ($HeapSucc a@@7 c)))
 :pattern ( ($HeapSucc a@@7 b@@7) ($HeapSucc b@@7 c))
)))
(assert (forall ((cl T@U) (nm T@U) ) (!  (and (= (DeclType (FieldOfDecl cl nm)) cl) (= (DeclName (FieldOfDecl cl nm)) nm))
 :pattern ( (FieldOfDecl cl nm))
)))
(assert (forall ((bx@@5 T@U) ) (!  (=> ($IsBox bx@@5 TInt) (and (= ($Box intType ($Unbox intType bx@@5)) bx@@5) ($Is intType ($Unbox intType bx@@5) TInt)))
 :pattern ( ($IsBox bx@@5 TInt))
)))
(assert (forall ((v@@2 T@U) (t@@2 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@2) t@@2) ($Is T@@3 v@@2 t@@2))
 :pattern ( ($IsBox ($Box T@@3 v@@2) t@@2))
)))
(assert (forall ((o@@3 T@U) ) (! (<= 0 (_System.array.Length o@@3))
 :pattern ( (_System.array.Length o@@3))
)))
(assert (forall ((v@@3 T@U) (t0@@2 T@U) (h@@3 T@U) ) (! (= ($IsAlloc SetType v@@3 (TSet t0@@2) h@@3) (forall ((bx@@6 T@U) ) (!  (=> (|Set#IsMember| v@@3 bx@@6) ($IsAllocBox bx@@6 t0@@2 h@@3))
 :pattern ( (|Set#IsMember| v@@3 bx@@6))
)))
 :pattern ( ($IsAlloc SetType v@@3 (TSet t0@@2) h@@3))
)))
(assert (forall (($o@@10 T@U) ) (! ($Is refType $o@@10 Tclass._System.object?)
 :pattern ( ($Is refType $o@@10 Tclass._System.object?))
)))
(assert (forall ((t@@3 T@U) ) (! (= (Inv0_TSet (TSet t@@3)) t@@3)
 :pattern ( (TSet t@@3))
)))
(assert (forall ((t@@4 T@U) ) (! (= (Tag (TSet t@@4)) TagSet)
 :pattern ( (TSet t@@4))
)))
(assert (forall ((i Int) ) (! (= (FDim (IndexField i)) 1)
 :pattern ( (IndexField i))
)))
(assert (forall ((i@@0 Int) ) (! (= (IndexField_Inverse (IndexField i@@0)) i@@0)
 :pattern ( (IndexField i@@0))
)))
(assert (forall ((_System.array$arg@@7 T@U) ) (! (= (Tclass._System.array?_0 (Tclass._System.array? _System.array$arg@@7)) _System.array$arg@@7)
 :pattern ( (Tclass._System.array? _System.array$arg@@7))
)))
(assert (forall ((_System.array$arg@@8 T@U) ) (! (= (Tclass._System.array_0 (Tclass._System.array _System.array$arg@@8)) _System.array$arg@@8)
 :pattern ( (Tclass._System.array _System.array$arg@@8))
)))
(assert (forall ((x@@5 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@5)) x@@5)
 :pattern ( ($Box T@@4 x@@5))
)))
(assert (forall ((_System.array$arg@@9 T@U) ($h@@9 T@U) ($o@@11 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@9) (and (or (not (= $o@@11 null)) (not true)) (= (dtype $o@@11) (Tclass._System.array? _System.array$arg@@9)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@9 $o@@11) alloc)))) ($IsAlloc intType (int_2_U (_System.array.Length $o@@11)) TInt $h@@9))
 :pattern ( (_System.array.Length $o@@11) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@9 $o@@11) alloc)) (Tclass._System.array? _System.array$arg@@9))
)))
(assert (forall ((_System.array$arg@@10 T@U) ($h@@10 T@U) ($o@@12 T@U) ($i0@@0 Int) ) (!  (=> (and (and ($IsGoodHeap $h@@10) (and (or (not (= $o@@12 null)) (not true)) (= (dtype $o@@12) (Tclass._System.array? _System.array$arg@@10)))) (and (<= 0 $i0@@0) (< $i0@@0 (_System.array.Length $o@@12)))) ($IsBox (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@10 $o@@12) (IndexField $i0@@0)) _System.array$arg@@10))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@10 $o@@12) (IndexField $i0@@0)) (Tclass._System.array? _System.array$arg@@10))
)))
(assert (forall (($h@@11 T@U) ($o@@13 T@U) ) (!  (=> (and ($IsGoodHeap $h@@11) (and (or (not (= $o@@13 null)) (not true)) (= (dtype $o@@13) Tclass._module.C?))) ($Is intType ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@11 $o@@13) _module.C.data)) TInt))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@11 $o@@13) _module.C.data)))
)))
(assert (forall ((a@@8 T@U) (b@@8 T@U) ) (! (= (|Set#Union| a@@8 (|Set#Union| a@@8 b@@8)) (|Set#Union| a@@8 b@@8))
 :pattern ( (|Set#Union| a@@8 (|Set#Union| a@@8 b@@8)))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|x#0| Int) ) (!  (=> (or (|_module.__default.G#canCall| |x#0|) (< 0 $FunctionContextHeight)) (<= (LitInt 0) (_module.__default.G |x#0|)))
 :pattern ( (_module.__default.G |x#0|))
))))
(assert (forall ((x@@6 Int) (y@@2 Int) ) (! (= (Mod x@@6 y@@2) (mod x@@6 y@@2))
 :pattern ( (Mod x@@6 y@@2))
)))
(assert (forall ((bx@@7 T@U) (t@@5 T@U) ) (!  (=> ($IsBox bx@@7 (TSet t@@5)) (and (= ($Box SetType ($Unbox SetType bx@@7)) bx@@7) ($Is SetType ($Unbox SetType bx@@7) (TSet t@@5))))
 :pattern ( ($IsBox bx@@7 (TSet t@@5)))
)))
(assert (forall ((_System.array$arg@@11 T@U) (bx@@8 T@U) ) (!  (=> ($IsBox bx@@8 (Tclass._System.array? _System.array$arg@@11)) (and (= ($Box refType ($Unbox refType bx@@8)) bx@@8) ($Is refType ($Unbox refType bx@@8) (Tclass._System.array? _System.array$arg@@11))))
 :pattern ( ($IsBox bx@@8 (Tclass._System.array? _System.array$arg@@11)))
)))
(assert (forall ((_System.array$arg@@12 T@U) (bx@@9 T@U) ) (!  (=> ($IsBox bx@@9 (Tclass._System.array _System.array$arg@@12)) (and (= ($Box refType ($Unbox refType bx@@9)) bx@@9) ($Is refType ($Unbox refType bx@@9) (Tclass._System.array _System.array$arg@@12))))
 :pattern ( ($IsBox bx@@9 (Tclass._System.array _System.array$arg@@12)))
)))
(assert (= (Tag Tclass._System.object?) Tagclass._System.object?))
(assert (= (TagFamily Tclass._System.object?) tytagFamily$object))
(assert (= (Tag Tclass._System.object) Tagclass._System.object))
(assert (= (TagFamily Tclass._System.object) tytagFamily$object))
(assert (= (Tag Tclass._module.C) Tagclass._module.C))
(assert (= (TagFamily Tclass._module.C) tytagFamily$C))
(assert (= (Tag Tclass._module.C?) Tagclass._module.C?))
(assert (= (TagFamily Tclass._module.C?) tytagFamily$C))
(assert (forall ((x@@7 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@7))) (Lit BoxType ($Box intType (int_2_U x@@7))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@7))))
)))
(assert (forall ((x@@8 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@8)) (Lit BoxType ($Box T@@5 x@@8)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@8)))
)))
(assert (forall ((h@@4 T@U) (v@@4 T@U) ) (! ($IsAlloc intType v@@4 TInt h@@4)
 :pattern ( ($IsAlloc intType v@@4 TInt h@@4))
)))
(assert (forall ((v@@5 T@U) ) (! ($Is intType v@@5 TInt)
 :pattern ( ($Is intType v@@5 TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |i#0_0@0| () Int)
(declare-fun |a#0| () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun |i#0_1@0| () Int)
(declare-fun $Heap () T@U)
(declare-fun |S#0| () T@U)
(declare-fun |x#2_0@0| () Int)
(declare-fun |y#2_0@0| () Int)
(declare-fun |clx#0| () T@U)
(declare-fun |x#3_0@0| () Int)
(declare-fun |y#3_0@0| () Int)
(declare-fun |cly#0| () T@U)
(declare-fun |k##3_0@0| () Int)
(declare-fun $Heap@4 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |_module.__default.Pred#canCall| (Int Int) Bool)
(declare-fun |p#4_0@0| () Int)
(declare-fun |t#4_0@2| () Int)
(declare-fun _module.__default.Pred (Int Int) Bool)
(declare-fun $Heap@3 () T@U)
(declare-fun |t#4_0@3| () Int)
(declare-fun $Heap@5 () T@U)
(declare-fun _module.__default.F (Int) Int)
(declare-fun _module.__default.Sum (Int) Int)
(declare-fun |##y#4_1_0@0| () Int)
(declare-fun |_module.__default.H#canCall| (Int Int) Bool)
(declare-fun _module.__default.H (Int Int) Int)
(declare-fun |##x#4_0_1@0| () Int)
(declare-fun |_module.__default.F#canCall| (Int) Bool)
(declare-fun |t#4_0@1| () Int)
(declare-fun $Heap@2 () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun |spine#0| () T@U)
(declare-fun |Repr#0| () T@U)
(declare-fun |o#1_0@0| () T@U)
(declare-fun |o#1_1@0| () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 53) (let ((anon5_correct  (=> (and (and (<= (LitInt 0) |i#0_0@0|) (< |i#0_0@0| (_System.array.Length |a#0|))) (= (Mod |i#0_0@0| (LitInt 2)) (LitInt 0))) (and (=> (= (ControlFlow 0 37) (- 0 44)) (or (not (= |a#0| null)) (not true))) (=> (or (not (= |a#0| null)) (not true)) (and (=> (= (ControlFlow 0 37) (- 0 43)) (and (<= 0 |i#0_0@0|) (< |i#0_0@0| (_System.array.Length |a#0|)))) (and (=> (= (ControlFlow 0 37) (- 0 42)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 |a#0| (IndexField |i#0_0@0|)))) (=> (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 |a#0| (IndexField |i#0_0@0|))) (and (=> (= (ControlFlow 0 37) (- 0 41)) (or (not (= |a#0| null)) (not true))) (=> (or (not (= |a#0| null)) (not true)) (and (=> (= (ControlFlow 0 37) (- 0 40)) (or (not (= |a#0| null)) (not true))) (and (=> (= (ControlFlow 0 37) (- 0 39)) (or (not (= (_System.array.Length |a#0|) 0)) (not true))) (and (=> (= (ControlFlow 0 37) (- 0 38)) (and (<= 0 (Mod (+ |i#0_0@0| 1) (_System.array.Length |a#0|))) (< (Mod (+ |i#0_0@0| 1) (_System.array.Length |a#0|)) (_System.array.Length |a#0|)))) (=> (and (and (and (<= (LitInt 0) |i#0_1@0|) (< |i#0_1@0| (_System.array.Length |a#0|))) (= (Mod |i#0_1@0| (LitInt 2)) (LitInt 0))) (and (or (not (= |i#0_0@0| |i#0_1@0|)) (not true)) (= (ControlFlow 0 37) (- 0 36)))) (or (or (or (not (= |a#0| |a#0|)) (not true)) (or (not (= (IndexField |i#0_0@0|) (IndexField |i#0_1@0|))) (not true))) (= (+ (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |a#0|) (IndexField (Mod (+ |i#0_0@0| 1) (_System.array.Length |a#0|)))))) 3) (+ (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |a#0|) (IndexField (Mod (+ |i#0_1@0| 1) (_System.array.Length |a#0|)))))) 3)))))))))))))))))
(let ((anon32_Else_correct  (=> (and (not (and (<= (LitInt 0) |i#0_0@0|) (< |i#0_0@0| (_System.array.Length |a#0|)))) (= (ControlFlow 0 47) 37)) anon5_correct)))
(let ((anon32_Then_correct  (=> (and (<= (LitInt 0) |i#0_0@0|) (< |i#0_0@0| (_System.array.Length |a#0|))) (and (=> (= (ControlFlow 0 45) (- 0 46)) (or (not (= (LitInt 2) 0)) (not true))) (=> (= (ControlFlow 0 45) 37) anon5_correct)))))
(let ((anon31_Else_correct  (=> (< |i#0_0@0| (LitInt 0)) (and (=> (= (ControlFlow 0 50) 45) anon32_Then_correct) (=> (= (ControlFlow 0 50) 47) anon32_Else_correct)))))
(let ((anon31_Then_correct  (=> (<= (LitInt 0) |i#0_0@0|) (and (=> (= (ControlFlow 0 48) (- 0 49)) (or (not (= |a#0| null)) (not true))) (and (=> (= (ControlFlow 0 48) 45) anon32_Then_correct) (=> (= (ControlFlow 0 48) 47) anon32_Else_correct))))))
(let ((anon30_Then_correct  (and (=> (= (ControlFlow 0 51) 48) anon31_Then_correct) (=> (= (ControlFlow 0 51) 50) anon31_Else_correct))))
(let ((anon14_correct  (=> (and (and (|Set#IsMember| |S#0| ($Box intType (int_2_U |x#2_0@0|))) (and (<= (LitInt 0) (+ |y#2_0@0| |x#2_0@0|)) (< (+ |y#2_0@0| |x#2_0@0|) 100))) (= (ControlFlow 0 28) (- 0 27))) (or (not (= |clx#0| null)) (not true)))))
(let ((anon36_Else_correct  (=> (and (< (+ |y#2_0@0| |x#2_0@0|) (LitInt 0)) (= (ControlFlow 0 31) 28)) anon14_correct)))
(let ((anon36_Then_correct  (=> (and (<= (LitInt 0) (+ |y#2_0@0| |x#2_0@0|)) (= (ControlFlow 0 30) 28)) anon14_correct)))
(let ((anon35_Then_correct  (=> (|Set#IsMember| |S#0| ($Box intType (int_2_U |x#2_0@0|))) (and (=> (= (ControlFlow 0 32) 30) anon36_Then_correct) (=> (= (ControlFlow 0 32) 31) anon36_Else_correct)))))
(let ((anon35_Else_correct  (=> (and (not (|Set#IsMember| |S#0| ($Box intType (int_2_U |x#2_0@0|)))) (= (ControlFlow 0 29) 28)) anon14_correct)))
(let ((anon34_Then_correct  (and (=> (= (ControlFlow 0 33) 32) anon35_Then_correct) (=> (= (ControlFlow 0 33) 29) anon35_Else_correct))))
(let ((anon20_correct  (=> (and (|Set#IsMember| |S#0| ($Box intType (int_2_U |x#3_0@0|))) (and (<= (LitInt 0) (+ |y#3_0@0| |x#3_0@0|)) (< (+ |y#3_0@0| |x#3_0@0|) 100))) (and (=> (= (ControlFlow 0 19) (- 0 20)) (or (not (= |cly#0| null)) (not true))) (=> (or (not (= |cly#0| null)) (not true)) (=> (and (= |k##3_0@0| (+ |x#3_0@0| |y#3_0@0|)) (= (ControlFlow 0 19) (- 0 18))) (or (not (= |k##3_0@0| (- 0 23))) (not true))))))))
(let ((anon39_Else_correct  (=> (and (< (+ |y#3_0@0| |x#3_0@0|) (LitInt 0)) (= (ControlFlow 0 23) 19)) anon20_correct)))
(let ((anon39_Then_correct  (=> (and (<= (LitInt 0) (+ |y#3_0@0| |x#3_0@0|)) (= (ControlFlow 0 22) 19)) anon20_correct)))
(let ((anon38_Then_correct  (=> (|Set#IsMember| |S#0| ($Box intType (int_2_U |x#3_0@0|))) (and (=> (= (ControlFlow 0 24) 22) anon39_Then_correct) (=> (= (ControlFlow 0 24) 23) anon39_Else_correct)))))
(let ((anon38_Else_correct  (=> (and (not (|Set#IsMember| |S#0| ($Box intType (int_2_U |x#3_0@0|)))) (= (ControlFlow 0 21) 19)) anon20_correct)))
(let ((anon37_Then_correct  (and (=> (= (ControlFlow 0 25) 24) anon38_Then_correct) (=> (= (ControlFlow 0 25) 21) anon38_Else_correct))))
(let ((anon28_correct  (=> (and (and ($IsGoodHeap $Heap@4) ($IsHeapAnchor $Heap@4)) (and (|_module.__default.Pred#canCall| |p#4_0@0| |t#4_0@2|) (_module.__default.Pred |p#4_0@0| |t#4_0@2|))) (=> (and (and (and (= $Heap@3 $Heap@4) (= |t#4_0@3| (+ |t#4_0@2| 1))) (and ($IsGoodHeap $Heap@5) ($IsHeapAnchor $Heap@5))) (and (and (|_module.__default.Pred#canCall| |p#4_0@0| |t#4_0@3|) (_module.__default.Pred |p#4_0@0| |t#4_0@3|)) (and (= $Heap@4 $Heap@5) (= (ControlFlow 0 9) (- 0 8))))) (<= (_module.__default.F |p#4_0@0|) (- (+ (_module.__default.Sum |p#4_0@0|) |p#4_0@0|) 1))))))
(let ((anon42_Else_correct  (=> (or (not (= (Mod |p#4_0@0| (LitInt 2)) (LitInt 0))) (not true)) (=> (and (and (and ($IsAlloc intType (int_2_U |p#4_0@0|) TInt $Heap@3) (= |##y#4_1_0@0| (LitInt 20))) (and ($IsAlloc intType (int_2_U |##y#4_1_0@0|) TInt $Heap@3) (|_module.__default.H#canCall| |p#4_0@0| (LitInt 20)))) (and (and (|_module.__default.H#canCall| |p#4_0@0| (LitInt 20)) (< (_module.__default.H |p#4_0@0| (LitInt 20)) 100)) (and (= |t#4_0@2| |p#4_0@0|) (= (ControlFlow 0 12) 9)))) anon28_correct))))
(let ((anon42_Then_correct  (=> (and (and (and (= (Mod |p#4_0@0| (LitInt 2)) (LitInt 0)) ($IsAlloc intType (int_2_U |p#4_0@0|) TInt $Heap@3)) (and (|_module.__default.G#canCall| |p#4_0@0|) (= |##x#4_0_1@0| (+ |p#4_0@0| 2)))) (and (and ($IsAlloc intType (int_2_U |##x#4_0_1@0|) TInt $Heap@3) (|_module.__default.F#canCall| (+ |p#4_0@0| 2))) (and (|_module.__default.G#canCall| |p#4_0@0|) (|_module.__default.F#canCall| (+ |p#4_0@0| 2))))) (and (=> (= (ControlFlow 0 10) (- 0 11)) (= (_module.__default.G |p#4_0@0|) (_module.__default.F (+ |p#4_0@0| 2)))) (=> (= (_module.__default.G |p#4_0@0|) (_module.__default.F (+ |p#4_0@0| 2))) (=> (= |t#4_0@1| (+ |p#4_0@0| |p#4_0@0|)) (=> (and (= |t#4_0@2| |t#4_0@1|) (= (ControlFlow 0 10) 9)) anon28_correct)))))))
(let ((anon41_Else_correct  (=> ($IsAlloc intType (int_2_U |p#4_0@0|) TInt $Heap@3) (=> (and (|_module.__default.G#canCall| |p#4_0@0|) (|_module.__default.G#canCall| |p#4_0@0|)) (and (=> (= (ControlFlow 0 13) (- 0 15)) (<= (LitInt 0) (_module.__default.G |p#4_0@0|))) (=> (<= (LitInt 0) (_module.__default.G |p#4_0@0|)) (and (=> (= (ControlFlow 0 13) (- 0 14)) (or (not (= (LitInt 2) 0)) (not true))) (=> (or (not (= (LitInt 2) 0)) (not true)) (and (=> (= (ControlFlow 0 13) 10) anon42_Then_correct) (=> (= (ControlFlow 0 13) 12) anon42_Else_correct))))))))))
(let ((anon41_Then_correct true))
(let ((anon40_Then_correct  (=> (<= (LitInt 0) |p#4_0@0|) (and (=> (= (ControlFlow 0 16) 7) anon41_Then_correct) (=> (= (ControlFlow 0 16) 13) anon41_Else_correct)))))
(let ((anon40_Else_correct true))
(let ((anon37_Else_correct  (=> (and (and ($IsGoodHeap $Heap@3) ($IsHeapAnchor $Heap@3)) (and (= $Heap@2 $Heap@3) (forall ((|x#3_1| Int) (|y#3_1| Int) )  (=> (and (|Set#IsMember| |S#0| ($Box intType (int_2_U |x#3_1|))) (and (<= (LitInt 0) (+ |y#3_1| |x#3_1|)) (< (+ |y#3_1| |x#3_1|) 100))) (< (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |cly#0|) _module.C.data))) (+ |x#3_1| |y#3_1|)))))) (and (=> (= (ControlFlow 0 17) 16) anon40_Then_correct) (=> (= (ControlFlow 0 17) 6) anon40_Else_correct)))))
(let ((anon34_Else_correct  (=> (and (and ($IsGoodHeap $Heap@2) ($IsHeapAnchor $Heap@2)) (and (= $Heap@1 $Heap@2) (forall ((|x#2_1| Int) (|y#2_1| Int) )  (=> (and (|Set#IsMember| |S#0| ($Box intType (int_2_U |x#2_1|))) (and (<= (LitInt 0) (+ |y#2_1| |x#2_1|)) (< (+ |y#2_1| |x#2_1|) 100))) (<= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |clx#0|) _module.C.data))) (+ |x#2_1| |y#2_1|)))))) (and (=> (= (ControlFlow 0 26) 25) anon37_Then_correct) (=> (= (ControlFlow 0 26) 17) anon37_Else_correct)))))
(let ((anon33_Else_correct  (=> (and (and (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1)) ($HeapSucc $Heap@0 $Heap@1)) (and (forall (($o@@14 T@U) ($f@@0 T@U) ) (!  (or (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@14) $f@@0) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@14) $f@@0)) (exists ((|o#1_2| T@U) )  (and (and (and ($Is refType |o#1_2| Tclass._module.C) (|Set#IsMember| |spine#0| ($Box refType |o#1_2|))) (= $o@@14 |o#1_2|)) (= $f@@0 _module.C.st))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@14) $f@@0))
)) (forall ((|o#inv#1_0| T@U) ) (!  (=> (and ($Is refType |o#inv#1_0| Tclass._module.C) (and (or (not (= |o#inv#1_0| null)) (not true)) (|Set#IsMember| |spine#0| ($Box refType |o#inv#1_0|)))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |o#inv#1_0|) _module.C.st) ($Box SetType (|Set#Union| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |o#inv#1_0|) _module.C.st)) |Repr#0|))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |o#inv#1_0|) _module.C.st))
)))) (and (=> (= (ControlFlow 0 34) 33) anon34_Then_correct) (=> (= (ControlFlow 0 34) 26) anon34_Else_correct)))))
(let ((anon33_Then_correct  (=> (and (and ($Is refType |o#1_0@0| Tclass._module.C) ($IsAlloc refType |o#1_0@0| Tclass._module.C $Heap@0)) (|Set#IsMember| |spine#0| ($Box refType |o#1_0@0|))) (and (=> (= (ControlFlow 0 2) (- 0 5)) (or (not (= |o#1_0@0| null)) (not true))) (and (=> (= (ControlFlow 0 2) (- 0 4)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 |o#1_0@0| _module.C.st))) (=> (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 |o#1_0@0| _module.C.st)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (or (not (= |o#1_0@0| null)) (not true))) (=> (and (and (and ($Is refType |o#1_1@0| Tclass._module.C) ($IsAlloc refType |o#1_1@0| Tclass._module.C $Heap@0)) (|Set#IsMember| |spine#0| ($Box refType |o#1_1@0|))) (and (or (not (= |o#1_0@0| |o#1_1@0|)) (not true)) (= (ControlFlow 0 2) (- 0 1)))) (or (or (or (not (= |o#1_0@0| |o#1_1@0|)) (not true)) (or (not (= _module.C.st _module.C.st)) (not true))) (= (|Set#Union| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |o#1_0@0|) _module.C.st)) |Repr#0|) (|Set#Union| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |o#1_1@0|) _module.C.st)) |Repr#0|)))))))))))
(let ((anon30_Else_correct  (=> (and (and (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) ($HeapSucc $Heap $Heap@0)) (and (forall (($o@@15 T@U) ($f@@1 T@U) ) (!  (or (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@15) $f@@1) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@15) $f@@1)) (exists ((|i#0_2| Int) )  (and (and (and (and (<= (LitInt 0) |i#0_2|) (< |i#0_2| (_System.array.Length |a#0|))) (= (Mod |i#0_2| (LitInt 2)) (LitInt 0))) (= $o@@15 |a#0|)) (= $f@@1 (IndexField |i#0_2|)))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@15) $f@@1))
)) (forall ((|i#inv#0_0| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#inv#0_0|) (< |i#inv#0_0| (_System.array.Length |a#0|))) (= (Mod |i#inv#0_0| (LitInt 2)) (LitInt 0))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |a#0|) (IndexField |i#inv#0_0|)) ($Box intType (int_2_U (+ (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |a#0|) (IndexField (Mod (+ |i#inv#0_0| 1) (_System.array.Length |a#0|)))))) 3)))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |a#0|) (IndexField |i#inv#0_0|)))
)))) (and (=> (= (ControlFlow 0 35) 2) anon33_Then_correct) (=> (= (ControlFlow 0 35) 34) anon33_Else_correct)))))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc |a#0| |spine#0|)) (and (=> (= (ControlFlow 0 52) 51) anon30_Then_correct) (=> (= (ControlFlow 0 52) 35) anon30_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (and ($Is refType |a#0| (Tclass._System.array TInt)) ($IsAlloc refType |a#0| (Tclass._System.array TInt) $Heap))) (and (and ($Is SetType |spine#0| (TSet Tclass._module.C)) ($IsAlloc SetType |spine#0| (TSet Tclass._module.C) $Heap)) (and ($Is SetType |Repr#0| (TSet Tclass._System.object)) ($IsAlloc SetType |Repr#0| (TSet Tclass._System.object) $Heap)))) (and (and (and ($Is SetType |S#0| (TSet TInt)) ($IsAlloc SetType |S#0| (TSet TInt) $Heap)) (and ($Is refType |clx#0| Tclass._module.C?) ($IsAlloc refType |clx#0| Tclass._module.C? $Heap))) (and (and ($Is refType |cly#0| Tclass._module.C?) ($IsAlloc refType |cly#0| Tclass._module.C? $Heap)) (and (= 2 $FunctionContextHeight) (= (ControlFlow 0 53) 52))))) anon0_correct)))
PreconditionGeneratedEntry_correct)))))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 28) (- 27))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 19) (- 20))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 10) (- 11))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 9) (- 8))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
