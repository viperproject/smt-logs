(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagSet () T@U)
(declare-fun TagMap () T@U)
(declare-fun alloc () T@U)
(declare-fun |##_System._tuple#2._#Make2| () T@U)
(declare-fun Tagclass._System.Tuple2 () T@U)
(declare-fun |tytagFamily$_tuple#2| () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun _System.Tuple2.___hMake2_q (T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun Tclass._System.Tuple2 (T@U T@U) T@U)
(declare-fun |#_System._tuple#2._#Make2| (T@U T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun refType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun |Set#Disjoint| (T@U T@U) Bool)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun SetType () T@T)
(declare-fun TSet (T@U) T@U)
(declare-fun TMap (T@U T@U) T@U)
(declare-fun Inv0_TMap (T@U) T@U)
(declare-fun Inv1_TMap (T@U) T@U)
(declare-fun Tclass._System.Tuple2_0 (T@U) T@U)
(declare-fun Tclass._System.Tuple2_1 (T@U) T@U)
(declare-fun _System.Tuple2._0 (T@U) T@U)
(declare-fun _System.Tuple2._1 (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun MapType () T@T)
(declare-fun |Map#Elements| (T@U) T@U)
(declare-fun |Map#Domain| (T@U) T@U)
(declare-fun BoxRank (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun |Map#Empty| () T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun Mul (Int Int) Int)
(declare-fun |Map#Values| (T@U) T@U)
(declare-fun |Map#Items| (T@U) T@U)
(declare-fun |Map#Build| (T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt TagSet TagMap alloc |##_System._tuple#2._#Make2| Tagclass._System.Tuple2 |tytagFamily$_tuple#2|)
)
(assert (= (Tag TInt) TagInt))
(assert (= (Ctor DatatypeTypeType) 3))
(assert (forall ((|_System._tuple#2$T0| T@U) (|_System._tuple#2$T1| T@U) (d T@U) ) (!  (=> ($Is DatatypeTypeType d (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)) (_System.Tuple2.___hMake2_q d))
 :pattern ( (_System.Tuple2.___hMake2_q d) ($Is DatatypeTypeType d (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)))
)))
(assert (forall ((|_System._tuple#2$T0@@0| T@U) (|_System._tuple#2$T1@@0| T@U) (|a#2#0#0| T@U) (|a#2#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|))  (and ($IsBox |a#2#0#0| |_System._tuple#2$T0@@0|) ($IsBox |a#2#1#0| |_System._tuple#2$T1@@0|)))
 :pattern ( ($Is DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|)))
)))
(assert  (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 4)) (= (Ctor BoxType) 5)) (= (Ctor refType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((|_System._tuple#2$T0@@1| T@U) (|_System._tuple#2$T1@@1| T@U) (|a#2#0#0@@0| T@U) (|a#2#1#0@@0| T@U) ($h T@U) ) (!  (=> ($IsGoodHeap $h) (= ($IsAlloc DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0@@0| |a#2#1#0@@0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|) $h)  (and ($IsAllocBox |a#2#0#0@@0| |_System._tuple#2$T0@@1| $h) ($IsAllocBox |a#2#1#0@@0| |_System._tuple#2$T1@@1| $h))))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0@@0| |a#2#1#0@@0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|) $h))
)))
(assert (forall ((d@@0 T@U) ) (! (= (_System.Tuple2.___hMake2_q d@@0) (= (DatatypeCtorId d@@0) |##_System._tuple#2._#Make2|))
 :pattern ( (_System.Tuple2.___hMake2_q d@@0))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((a T@U) (b T@U) ) (! (= (|Set#Disjoint| a b) (forall ((o@@0 T@U) ) (!  (or (not (|Set#IsMember| a o@@0)) (not (|Set#IsMember| b o@@0)))
 :pattern ( (|Set#IsMember| a o@@0))
 :pattern ( (|Set#IsMember| b o@@0))
)))
 :pattern ( (|Set#Disjoint| a b))
)))
(assert (forall ((d@@1 T@U) ) (!  (=> (_System.Tuple2.___hMake2_q d@@1) (exists ((|a#1#0#0| T@U) (|a#1#1#0| T@U) ) (= d@@1 (|#_System._tuple#2._#Make2| |a#1#0#0| |a#1#1#0|))))
 :pattern ( (_System.Tuple2.___hMake2_q d@@1))
)))
(assert (= (Ctor SetType) 8))
(assert (forall ((v T@U) (t0@@0 T@U) ) (! (= ($Is SetType v (TSet t0@@0)) (forall ((bx T@U) ) (!  (=> (|Set#IsMember| v bx) ($IsBox bx t0@@0))
 :pattern ( (|Set#IsMember| v bx))
)))
 :pattern ( ($Is SetType v (TSet t0@@0)))
)))
(assert (forall ((v@@0 T@U) (t T@U) (h@@0 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t h@@0) ($IsAlloc T@@1 v@@0 t h@@0))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t h@@0))
)))
(assert (forall ((h@@1 T@U) (k@@0 T@U) (bx@@0 T@U) (t@@0 T@U) ) (!  (=> ($HeapSucc h@@1 k@@0) (=> ($IsAllocBox bx@@0 t@@0 h@@1) ($IsAllocBox bx@@0 t@@0 k@@0)))
 :pattern ( ($HeapSucc h@@1 k@@0) ($IsAllocBox bx@@0 t@@0 h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@1 T@U) (v@@1 T@U) (t@@1 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@2 k@@1) (=> ($IsAlloc T@@2 v@@1 t@@1 h@@2) ($IsAlloc T@@2 v@@1 t@@1 k@@1)))
 :pattern ( ($HeapSucc h@@2 k@@1) ($IsAlloc T@@2 v@@1 t@@1 h@@2))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) (c T@U) ) (!  (=> (or (not (= a@@0 c)) (not true)) (=> (and ($HeapSucc a@@0 b@@0) ($HeapSucc b@@0 c)) ($HeapSucc a@@0 c)))
 :pattern ( ($HeapSucc a@@0 b@@0) ($HeapSucc b@@0 c))
)))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 TInt) (and (= ($Box intType ($Unbox intType bx@@1)) bx@@1) ($Is intType ($Unbox intType bx@@1) TInt)))
 :pattern ( ($IsBox bx@@1 TInt))
)))
(assert (forall ((v@@2 T@U) (t@@2 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@2) t@@2) ($Is T@@3 v@@2 t@@2))
 :pattern ( ($IsBox ($Box T@@3 v@@2) t@@2))
)))
(assert (forall ((v@@3 T@U) (t0@@1 T@U) (h@@3 T@U) ) (! (= ($IsAlloc SetType v@@3 (TSet t0@@1) h@@3) (forall ((bx@@2 T@U) ) (!  (=> (|Set#IsMember| v@@3 bx@@2) ($IsAllocBox bx@@2 t0@@1 h@@3))
 :pattern ( (|Set#IsMember| v@@3 bx@@2))
)))
 :pattern ( ($IsAlloc SetType v@@3 (TSet t0@@1) h@@3))
)))
(assert (forall ((t@@3 T@U) (u T@U) ) (! (= (Inv0_TMap (TMap t@@3 u)) t@@3)
 :pattern ( (TMap t@@3 u))
)))
(assert (forall ((t@@4 T@U) (u@@0 T@U) ) (! (= (Inv1_TMap (TMap t@@4 u@@0)) u@@0)
 :pattern ( (TMap t@@4 u@@0))
)))
(assert (forall ((t@@5 T@U) (u@@1 T@U) ) (! (= (Tag (TMap t@@5 u@@1)) TagMap)
 :pattern ( (TMap t@@5 u@@1))
)))
(assert (forall ((|a#0#0#0| T@U) (|a#0#1#0| T@U) ) (! (= (DatatypeCtorId (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|)) |##_System._tuple#2._#Make2|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|))
)))
(assert (forall ((|_System._tuple#2$T0@@2| T@U) (|_System._tuple#2$T1@@2| T@U) ) (! (= (Tclass._System.Tuple2_0 (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|)) |_System._tuple#2$T0@@2|)
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|))
)))
(assert (forall ((|_System._tuple#2$T0@@3| T@U) (|_System._tuple#2$T1@@3| T@U) ) (! (= (Tclass._System.Tuple2_1 (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|)) |_System._tuple#2$T1@@3|)
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|))
)))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| T@U) ) (! (= (_System.Tuple2._0 (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|)) |a#4#0#0|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|))
)))
(assert (forall ((|a#6#0#0| T@U) (|a#6#1#0| T@U) ) (! (= (_System.Tuple2._1 (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|)) |a#6#1#0|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|))
)))
(assert (forall ((t@@6 T@U) ) (! (= (Inv0_TSet (TSet t@@6)) t@@6)
 :pattern ( (TSet t@@6))
)))
(assert (forall ((t@@7 T@U) ) (! (= (Tag (TSet t@@7)) TagSet)
 :pattern ( (TSet t@@7))
)))
(assert (forall ((x@@5 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@5)) x@@5)
 :pattern ( ($Box T@@4 x@@5))
)))
(assert (= (Ctor MapType) 9))
(assert (forall ((v@@4 T@U) (t0@@2 T@U) (t1@@0 T@U) (h@@4 T@U) ) (! (= ($IsAlloc MapType v@@4 (TMap t0@@2 t1@@0) h@@4) (forall ((bx@@3 T@U) ) (!  (=> (|Set#IsMember| (|Map#Domain| v@@4) bx@@3) (and ($IsAllocBox (MapType0Select BoxType BoxType (|Map#Elements| v@@4) bx@@3) t1@@0 h@@4) ($IsAllocBox bx@@3 t0@@2 h@@4)))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| v@@4) bx@@3))
 :pattern ( (|Set#IsMember| (|Map#Domain| v@@4) bx@@3))
)))
 :pattern ( ($IsAlloc MapType v@@4 (TMap t0@@2 t1@@0) h@@4))
)))
(assert (forall ((|a#5#0#0| T@U) (|a#5#1#0| T@U) ) (! (< (BoxRank |a#5#0#0|) (DtRank (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|))
)))
(assert (forall ((|a#7#0#0| T@U) (|a#7#1#0| T@U) ) (! (< (BoxRank |a#7#1#0|) (DtRank (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|))
)))
(assert (forall ((u@@2 T@U) ) (!  (not (|Set#IsMember| (|Map#Domain| |Map#Empty|) u@@2))
 :pattern ( (|Set#IsMember| (|Map#Domain| |Map#Empty|) u@@2))
)))
(assert (forall ((bx@@4 T@U) (s T@U) (t@@8 T@U) ) (!  (=> ($IsBox bx@@4 (TMap s t@@8)) (and (= ($Box MapType ($Unbox MapType bx@@4)) bx@@4) ($Is MapType ($Unbox MapType bx@@4) (TMap s t@@8))))
 :pattern ( ($IsBox bx@@4 (TMap s t@@8)))
)))
(assert (forall ((|_System._tuple#2$T0@@4| T@U) (|_System._tuple#2$T1@@4| T@U) (bx@@5 T@U) ) (!  (=> ($IsBox bx@@5 (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@5)) bx@@5) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@5) (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|))))
 :pattern ( ($IsBox bx@@5 (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|)))
)))
(assert  (and (forall ((t0@@3 T@T) (t1@@1 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@3 t1@@1 t2 (MapType1Store t0@@3 t1@@1 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((|_System._tuple#2$T0@@5| T@U) (|_System._tuple#2$T1@@5| T@U) ) (!  (and (= (Tag (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|)) Tagclass._System.Tuple2) (= (TagFamily (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|)) |tytagFamily$_tuple#2|))
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|))
)))
(assert (forall ((x@@6 Int) (y Int) ) (! (= (Mul x@@6 y) (* x@@6 y))
 :pattern ( (Mul x@@6 y))
)))
(assert (forall ((m@@4 T@U) ) (!  (or (= m@@4 |Map#Empty|) (exists ((k@@2 T@U) ) (|Set#IsMember| (|Map#Domain| m@@4) k@@2)))
 :pattern ( (|Map#Domain| m@@4))
)))
(assert (forall ((m@@5 T@U) ) (!  (or (= m@@5 |Map#Empty|) (exists ((v@@5 T@U) ) (|Set#IsMember| (|Map#Values| m@@5) v@@5)))
 :pattern ( (|Map#Values| m@@5))
)))
(assert (forall ((m@@6 T@U) (item T@U) ) (! (= (|Set#IsMember| (|Map#Items| m@@6) item)  (and (|Set#IsMember| (|Map#Domain| m@@6) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (= (MapType0Select BoxType BoxType (|Map#Elements| m@@6) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item)))))
 :pattern ( (|Set#IsMember| (|Map#Items| m@@6) item))
)))
(assert (forall ((m@@7 T@U) (v@@6 T@U) ) (! (= (|Set#IsMember| (|Map#Values| m@@7) v@@6) (exists ((u@@3 T@U) ) (!  (and (|Set#IsMember| (|Map#Domain| m@@7) u@@3) (= v@@6 (MapType0Select BoxType BoxType (|Map#Elements| m@@7) u@@3)))
 :pattern ( (|Set#IsMember| (|Map#Domain| m@@7) u@@3))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| m@@7) u@@3))
)))
 :pattern ( (|Set#IsMember| (|Map#Values| m@@7) v@@6))
)))
(assert (forall ((m@@8 T@U) (u@@4 T@U) (|u'| T@U) (v@@7 T@U) ) (!  (and (=> (= |u'| u@@4) (and (|Set#IsMember| (|Map#Domain| (|Map#Build| m@@8 u@@4 v@@7)) |u'|) (= (MapType0Select BoxType BoxType (|Map#Elements| (|Map#Build| m@@8 u@@4 v@@7)) |u'|) v@@7))) (=> (or (not (= |u'| u@@4)) (not true)) (and (= (|Set#IsMember| (|Map#Domain| (|Map#Build| m@@8 u@@4 v@@7)) |u'|) (|Set#IsMember| (|Map#Domain| m@@8) |u'|)) (= (MapType0Select BoxType BoxType (|Map#Elements| (|Map#Build| m@@8 u@@4 v@@7)) |u'|) (MapType0Select BoxType BoxType (|Map#Elements| m@@8) |u'|)))))
 :pattern ( (|Set#IsMember| (|Map#Domain| (|Map#Build| m@@8 u@@4 v@@7)) |u'|))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| (|Map#Build| m@@8 u@@4 v@@7)) |u'|))
)))
(assert (forall ((d@@2 T@U) ) (! (= (BoxRank ($Box DatatypeTypeType d@@2)) (DtRank d@@2))
 :pattern ( (BoxRank ($Box DatatypeTypeType d@@2)))
)))
(assert (forall ((bx@@6 T@U) (t@@9 T@U) ) (!  (=> ($IsBox bx@@6 (TSet t@@9)) (and (= ($Box SetType ($Unbox SetType bx@@6)) bx@@6) ($Is SetType ($Unbox SetType bx@@6) (TSet t@@9))))
 :pattern ( ($IsBox bx@@6 (TSet t@@9)))
)))
(assert (forall ((v@@8 T@U) (t0@@4 T@U) (t1@@2 T@U) ) (! (= ($Is MapType v@@8 (TMap t0@@4 t1@@2)) (forall ((bx@@7 T@U) ) (!  (=> (|Set#IsMember| (|Map#Domain| v@@8) bx@@7) (and ($IsBox (MapType0Select BoxType BoxType (|Map#Elements| v@@8) bx@@7) t1@@2) ($IsBox bx@@7 t0@@4)))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| v@@8) bx@@7))
 :pattern ( (|Set#IsMember| (|Map#Domain| v@@8) bx@@7))
)))
 :pattern ( ($Is MapType v@@8 (TMap t0@@4 t1@@2)))
)))
(assert (forall ((d@@3 T@U) (|_System._tuple#2$T0@@6| T@U) ($h@@0 T@U) ) (!  (=> (and ($IsGoodHeap $h@@0) (and (_System.Tuple2.___hMake2_q d@@3) (exists ((|_System._tuple#2$T1@@6| T@U) ) (! ($IsAlloc DatatypeTypeType d@@3 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@0)
 :pattern ( ($IsAlloc DatatypeTypeType d@@3 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@0))
)))) ($IsAllocBox (_System.Tuple2._0 d@@3) |_System._tuple#2$T0@@6| $h@@0))
 :pattern ( ($IsAllocBox (_System.Tuple2._0 d@@3) |_System._tuple#2$T0@@6| $h@@0))
)))
(assert (forall ((d@@4 T@U) (|_System._tuple#2$T1@@7| T@U) ($h@@1 T@U) ) (!  (=> (and ($IsGoodHeap $h@@1) (and (_System.Tuple2.___hMake2_q d@@4) (exists ((|_System._tuple#2$T0@@7| T@U) ) (! ($IsAlloc DatatypeTypeType d@@4 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|) $h@@1)
 :pattern ( ($IsAlloc DatatypeTypeType d@@4 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|) $h@@1))
)))) ($IsAllocBox (_System.Tuple2._1 d@@4) |_System._tuple#2$T1@@7| $h@@1))
 :pattern ( ($IsAllocBox (_System.Tuple2._1 d@@4) |_System._tuple#2$T1@@7| $h@@1))
)))
(assert (forall ((|a#3#0#0| T@U) (|a#3#1#0| T@U) ) (! (= (|#_System._tuple#2._#Make2| (Lit BoxType |a#3#0#0|) (Lit BoxType |a#3#1#0|)) (Lit DatatypeTypeType (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| (Lit BoxType |a#3#0#0|) (Lit BoxType |a#3#1#0|)))
)))
(assert (forall ((x@@7 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@7))) (Lit BoxType ($Box intType (int_2_U x@@7))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@7))))
)))
(assert (forall ((x@@8 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@8)) (Lit BoxType ($Box T@@5 x@@8)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@8)))
)))
(assert (forall ((h@@5 T@U) (v@@9 T@U) ) (! ($IsAlloc intType v@@9 TInt h@@5)
 :pattern ( ($IsAlloc intType v@@9 TInt h@@5))
)))
(assert (forall ((m@@9 T@U) ) (!  (or (= m@@9 |Map#Empty|) (exists ((k@@3 T@U) (v@@10 T@U) ) (|Set#IsMember| (|Map#Items| m@@9) ($Box DatatypeTypeType (|#_System._tuple#2._#Make2| k@@3 v@@10)))))
 :pattern ( (|Map#Items| m@@9))
)))
(assert (forall ((v@@11 T@U) (t0@@5 T@U) (t1@@3 T@U) ) (!  (=> ($Is MapType v@@11 (TMap t0@@5 t1@@3)) (and (and ($Is SetType (|Map#Domain| v@@11) (TSet t0@@5)) ($Is SetType (|Map#Values| v@@11) (TSet t1@@3))) ($Is SetType (|Map#Items| v@@11) (TSet (Tclass._System.Tuple2 t0@@5 t1@@3)))))
 :pattern ( ($Is MapType v@@11 (TMap t0@@5 t1@@3)))
)))
(assert (forall ((v@@12 T@U) ) (! ($Is intType v@@12 TInt)
 :pattern ( ($Is intType v@@12 TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |k#0@0| () Int)
(declare-fun |a#0@1| () T@U)
(declare-fun |i#3@0| () Int)
(declare-fun |i#2@0| () Int)
(declare-fun |$rhs#1@0| () Int)
(declare-fun |$w$loop#0@0| () Bool)
(declare-fun |$decr$loop#00@1| () Int)
(declare-fun |a#0@2| () T@U)
(declare-fun |i#2@1| () Int)
(declare-fun $Heap () T@U)
(declare-fun |$rhs#0@0| () Int)
(declare-fun |$decr_init$loop#00@0| () Int)
(declare-fun null () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun |a#0@0| () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |a#0| () T@U)
(declare-fun $FunctionContextHeight () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 38) (let ((anon12_correct true))
(let ((anon24_Else_correct  (=> (and (< |k#0@0| (LitInt 0)) (= (ControlFlow 0 18) 16)) anon12_correct)))
(let ((anon24_Then_correct  (=> (and (<= (LitInt 0) |k#0@0|) (= (ControlFlow 0 17) 16)) anon12_correct)))
(let ((anon23_Then_correct  (and (=> (= (ControlFlow 0 19) 17) anon24_Then_correct) (=> (= (ControlFlow 0 19) 18) anon24_Else_correct))))
(let ((anon23_Else_correct true))
(let ((anon9_correct  (=> (forall ((|i#4| T@U) ) (!  (=> (|Set#IsMember| (|Map#Domain| |a#0@1|) ($Box intType |i#4|)) (= (U_2_int ($Unbox intType (MapType0Select BoxType BoxType (|Map#Elements| |a#0@1|) ($Box intType |i#4|)))) (Mul (U_2_int |i#4|) (U_2_int |i#4|))))
 :pattern ( ($Unbox intType (MapType0Select BoxType BoxType (|Map#Elements| |a#0@1|) ($Box intType |i#4|))))
 :pattern ( (|Set#IsMember| (|Map#Domain| |a#0@1|) ($Box intType |i#4|)))
)) (and (=> (= (ControlFlow 0 20) 19) anon23_Then_correct) (=> (= (ControlFlow 0 20) 15) anon23_Else_correct)))))
(let ((anon22_Else_correct  (=> (and (not (|Set#IsMember| (|Map#Domain| |a#0@1|) ($Box intType (int_2_U |i#3@0|)))) (= (ControlFlow 0 23) 20)) anon9_correct)))
(let ((anon22_Then_correct  (=> (|Set#IsMember| (|Map#Domain| |a#0@1|) ($Box intType (int_2_U |i#3@0|))) (and (=> (= (ControlFlow 0 21) (- 0 22)) (|Set#IsMember| (|Map#Domain| |a#0@1|) ($Box intType (int_2_U |i#3@0|)))) (=> (= (ControlFlow 0 21) 20) anon9_correct)))))
(let ((anon21_Then_correct  (and (=> (= (ControlFlow 0 24) 21) anon22_Then_correct) (=> (= (ControlFlow 0 24) 23) anon22_Else_correct))))
(let ((anon21_Else_correct true))
(let ((anon6_correct  (=> (and (<= (LitInt 0) |i#2@0|) (<= |i#2@0| |$rhs#1@0|)) (and (=> (= (ControlFlow 0 25) 24) anon21_Then_correct) (=> (= (ControlFlow 0 25) 14) anon21_Else_correct)))))
(let ((anon20_Else_correct  (=> (and (< |i#2@0| (LitInt 0)) (= (ControlFlow 0 27) 25)) anon6_correct)))
(let ((anon20_Then_correct  (=> (and (<= (LitInt 0) |i#2@0|) (= (ControlFlow 0 26) 25)) anon6_correct)))
(let ((anon19_Then_correct  (=> (not |$w$loop#0@0|) (and (=> (= (ControlFlow 0 28) 26) anon20_Then_correct) (=> (= (ControlFlow 0 28) 27) anon20_Else_correct)))))
(let ((anon25_Else_correct  (=> (and (and (< |i#2@0| |$rhs#1@0|) (= |$decr$loop#00@1| (- |$rhs#1@0| |i#2@0|))) (and (= |a#0@2| (|Map#Build| |a#0@1| ($Box intType (int_2_U |i#2@0|)) ($Box intType (int_2_U (Mul |i#2@0| |i#2@0|))))) (= |i#2@1| (+ |i#2@0| 1)))) (and (=> (= (ControlFlow 0 7) (- 0 12)) (or (<= 0 |$decr$loop#00@1|) (= (- |$rhs#1@0| |i#2@1|) |$decr$loop#00@1|))) (=> (or (<= 0 |$decr$loop#00@1|) (= (- |$rhs#1@0| |i#2@1|) |$decr$loop#00@1|)) (and (=> (= (ControlFlow 0 7) (- 0 11)) (< (- |$rhs#1@0| |i#2@1|) |$decr$loop#00@1|)) (=> (< (- |$rhs#1@0| |i#2@1|) |$decr$loop#00@1|) (and (=> (= (ControlFlow 0 7) (- 0 10)) (=> |$w$loop#0@0| (<= (LitInt 0) |i#2@1|))) (=> (=> |$w$loop#0@0| (<= (LitInt 0) |i#2@1|)) (and (=> (= (ControlFlow 0 7) (- 0 9)) (=> |$w$loop#0@0| (<= |i#2@1| |$rhs#1@0|))) (=> (=> |$w$loop#0@0| (<= |i#2@1| |$rhs#1@0|)) (and (=> (= (ControlFlow 0 7) (- 0 8)) (=> |$w$loop#0@0| (forall ((|i#4@@0| Int) ) (!  (=> (|Set#IsMember| (|Map#Domain| |a#0@2|) ($Box intType (int_2_U |i#4@@0|))) (= (U_2_int ($Unbox intType (MapType0Select BoxType BoxType (|Map#Elements| |a#0@2|) ($Box intType (int_2_U |i#4@@0|))))) (Mul |i#4@@0| |i#4@@0|)))
 :pattern ( ($Unbox intType (MapType0Select BoxType BoxType (|Map#Elements| |a#0@2|) ($Box intType (int_2_U |i#4@@0|)))))
 :pattern ( (|Set#IsMember| (|Map#Domain| |a#0@2|) ($Box intType (int_2_U |i#4@@0|))))
)))) (=> (=> |$w$loop#0@0| (forall ((|i#4@@1| T@U) ) (!  (=> (|Set#IsMember| (|Map#Domain| |a#0@2|) ($Box intType |i#4@@1|)) (= (U_2_int ($Unbox intType (MapType0Select BoxType BoxType (|Map#Elements| |a#0@2|) ($Box intType |i#4@@1|)))) (Mul (U_2_int |i#4@@1|) (U_2_int |i#4@@1|))))
 :pattern ( ($Unbox intType (MapType0Select BoxType BoxType (|Map#Elements| |a#0@2|) ($Box intType |i#4@@1|))))
 :pattern ( (|Set#IsMember| (|Map#Domain| |a#0@2|) ($Box intType |i#4@@1|)))
))) (=> (= (ControlFlow 0 7) (- 0 6)) (=> |$w$loop#0@0| (forall ((|k#1| Int) ) (! (=  (and (<= (LitInt 0) |k#1|) (< |k#1| |i#2@1|)) (|Set#IsMember| (|Map#Domain| |a#0@2|) ($Box intType (int_2_U |k#1|))))
 :pattern ( (|Set#IsMember| (|Map#Domain| |a#0@2|) ($Box intType (int_2_U |k#1|))))
)))))))))))))))))
(let ((anon25_Then_correct  (=> (<= |$rhs#1@0| |i#2@0|) (and (=> (= (ControlFlow 0 4) (- 0 5)) (|Set#Disjoint| (|Map#Domain| |a#0@1|) (|Map#Domain| (Lit MapType (|Map#Build| |Map#Empty| ($Box intType (int_2_U (LitInt (- 0 1)))) ($Box intType (int_2_U (LitInt 2)))))))) (=> (|Set#Disjoint| (|Map#Domain| |a#0@1|) (|Map#Domain| (Lit MapType (|Map#Build| |Map#Empty| ($Box intType (int_2_U (LitInt (- 0 1)))) ($Box intType (int_2_U (LitInt 2))))))) (=> (= (ControlFlow 0 4) (- 0 3)) (forall ((|i#1| Int) ) (!  (=> (and (<= (LitInt 0) |i#1|) (< |i#1| 100)) (and (|Set#IsMember| (|Map#Domain| |a#0@1|) ($Box intType (int_2_U |i#1|))) (= (U_2_int ($Unbox intType (MapType0Select BoxType BoxType (|Map#Elements| |a#0@1|) ($Box intType (int_2_U |i#1|))))) (Mul |i#1| |i#1|))))
 :pattern ( ($Unbox intType (MapType0Select BoxType BoxType (|Map#Elements| |a#0@1|) ($Box intType (int_2_U |i#1|)))))
 :pattern ( (|Set#IsMember| (|Map#Domain| |a#0@1|) ($Box intType (int_2_U |i#1|))))
))))))))
(let ((anon19_Else_correct  (=> |$w$loop#0@0| (and (=> (= (ControlFlow 0 13) 4) anon25_Then_correct) (=> (= (ControlFlow 0 13) 7) anon25_Else_correct)))))
(let ((anon18_LoopBody_correct  (and (=> (= (ControlFlow 0 29) 28) anon19_Then_correct) (=> (= (ControlFlow 0 29) 13) anon19_Else_correct))))
(let ((anon18_LoopDone_correct true))
(let ((anon18_LoopHead_correct  (=> (and ($Is MapType |a#0@1| (TMap TInt TInt)) ($IsAlloc MapType |a#0@1| (TMap TInt TInt) $Heap)) (=> (and (and (and (and (and (and (not false) (<= 0 |i#2@0|)) (= |$rhs#1@0| 100)) (= |$rhs#0@0| 0)) (= |$rhs#1@0| 100)) (= |$decr_init$loop#00@0| 100)) (and (and (and (=> |$w$loop#0@0| (<= (LitInt 0) |i#2@0|)) (=> |$w$loop#0@0| (<= |i#2@0| |$rhs#1@0|))) (and (=> |$w$loop#0@0| (forall ((|i#4@@2| T@U) ) (!  (=> (|Set#IsMember| (|Map#Domain| |a#0@1|) ($Box intType |i#4@@2|)) (= (U_2_int ($Unbox intType (MapType0Select BoxType BoxType (|Map#Elements| |a#0@1|) ($Box intType |i#4@@2|)))) (Mul (U_2_int |i#4@@2|) (U_2_int |i#4@@2|))))
 :pattern ( ($Unbox intType (MapType0Select BoxType BoxType (|Map#Elements| |a#0@1|) ($Box intType |i#4@@2|))))
 :pattern ( (|Set#IsMember| (|Map#Domain| |a#0@1|) ($Box intType |i#4@@2|)))
))) (=> |$w$loop#0@0| (forall ((|k#1@@0| T@U) ) (! (=  (and (<= (LitInt 0) (U_2_int |k#1@@0|)) (< (U_2_int |k#1@@0|) |i#2@0|)) (|Set#IsMember| (|Map#Domain| |a#0@1|) ($Box intType |k#1@@0|)))
 :pattern ( (|Set#IsMember| (|Map#Domain| |a#0@1|) ($Box intType |k#1@@0|)))
))))) (and (and (forall (($o@@0 T@U) ) (!  (=> (and (or (not (= $o@@0 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@0) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@0) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@0)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@0))
)) ($HeapSucc $Heap $Heap)) (and (forall (($o@@1 T@U) ($f@@0 T@U) ) (!  (=> (and (or (not (= $o@@1 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@1) alloc)))) (or (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@1) $f@@0) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@1) $f@@0)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@1 $f@@0))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@1) $f@@0))
)) (<= (- |$rhs#1@0| |i#2@0|) |$decr_init$loop#00@0|))))) (and (=> (= (ControlFlow 0 30) 2) anon18_LoopDone_correct) (=> (= (ControlFlow 0 30) 29) anon18_LoopBody_correct))))))
(let ((anon17_Then_correct  (and (=> (= (ControlFlow 0 31) (- 0 36)) (forall ((|i#1@@0| Int) ) (!  (not (|Set#IsMember| (|Map#Domain| |a#0@0|) ($Box intType (int_2_U |i#1@@0|))))
 :pattern ( (|Set#IsMember| (|Map#Domain| |a#0@0|) ($Box intType (int_2_U |i#1@@0|))))
))) (=> (forall ((|i#1@@1| T@U) ) (!  (not (|Set#IsMember| (|Map#Domain| |a#0@0|) ($Box intType |i#1@@1|)))
 :pattern ( (|Set#IsMember| (|Map#Domain| |a#0@0|) ($Box intType |i#1@@1|)))
)) (=> (= |$rhs#0@0| (LitInt 0)) (=> (and (= |$rhs#1@0| (LitInt 100)) (= |$decr_init$loop#00@0| (- |$rhs#1@0| |$rhs#0@0|))) (and (=> (= (ControlFlow 0 31) (- 0 35)) (=> |$w$loop#0@0| (<= (LitInt 0) |$rhs#0@0|))) (=> (=> |$w$loop#0@0| (<= (LitInt 0) |$rhs#0@0|)) (and (=> (= (ControlFlow 0 31) (- 0 34)) (=> |$w$loop#0@0| (<= |$rhs#0@0| |$rhs#1@0|))) (=> (=> |$w$loop#0@0| (<= |$rhs#0@0| |$rhs#1@0|)) (and (=> (= (ControlFlow 0 31) (- 0 33)) (=> |$w$loop#0@0| (forall ((|i#4@@3| Int) ) (!  (=> (|Set#IsMember| (|Map#Domain| |a#0@0|) ($Box intType (int_2_U |i#4@@3|))) (= (U_2_int ($Unbox intType (MapType0Select BoxType BoxType (|Map#Elements| |a#0@0|) ($Box intType (int_2_U |i#4@@3|))))) (Mul |i#4@@3| |i#4@@3|)))
 :pattern ( ($Unbox intType (MapType0Select BoxType BoxType (|Map#Elements| |a#0@0|) ($Box intType (int_2_U |i#4@@3|)))))
 :pattern ( (|Set#IsMember| (|Map#Domain| |a#0@0|) ($Box intType (int_2_U |i#4@@3|))))
)))) (=> (=> |$w$loop#0@0| (forall ((|i#4@@4| T@U) ) (!  (=> (|Set#IsMember| (|Map#Domain| |a#0@0|) ($Box intType |i#4@@4|)) (= (U_2_int ($Unbox intType (MapType0Select BoxType BoxType (|Map#Elements| |a#0@0|) ($Box intType |i#4@@4|)))) (Mul (U_2_int |i#4@@4|) (U_2_int |i#4@@4|))))
 :pattern ( ($Unbox intType (MapType0Select BoxType BoxType (|Map#Elements| |a#0@0|) ($Box intType |i#4@@4|))))
 :pattern ( (|Set#IsMember| (|Map#Domain| |a#0@0|) ($Box intType |i#4@@4|)))
))) (and (=> (= (ControlFlow 0 31) (- 0 32)) (=> |$w$loop#0@0| (forall ((|k#1@@1| Int) ) (! (=  (and (<= (LitInt 0) |k#1@@1|) (< |k#1@@1| |$rhs#0@0|)) (|Set#IsMember| (|Map#Domain| |a#0@0|) ($Box intType (int_2_U |k#1@@1|))))
 :pattern ( (|Set#IsMember| (|Map#Domain| |a#0@0|) ($Box intType (int_2_U |k#1@@1|))))
)))) (=> (=> |$w$loop#0@0| (forall ((|k#1@@2| T@U) ) (! (=  (and (<= (LitInt 0) (U_2_int |k#1@@2|)) (< (U_2_int |k#1@@2|) |$rhs#0@0|)) (|Set#IsMember| (|Map#Domain| |a#0@0|) ($Box intType |k#1@@2|)))
 :pattern ( (|Set#IsMember| (|Map#Domain| |a#0@0|) ($Box intType |k#1@@2|)))
))) (=> (= (ControlFlow 0 31) 30) anon18_LoopHead_correct)))))))))))))))
(let ((anon17_Else_correct true))
(let ((anon0_correct  (=> (and (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (= |a#0@0| (Lit MapType |Map#Empty|))) (and (=> (= (ControlFlow 0 37) 31) anon17_Then_correct) (=> (= (ControlFlow 0 37) 1) anon17_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (=> (and (and (and ($Is MapType |a#0| (TMap TInt TInt)) ($IsAlloc MapType |a#0| (TMap TInt TInt) $Heap)) true) (and (= 1 $FunctionContextHeight) (= (ControlFlow 0 38) 37))) anon0_correct))))
PreconditionGeneratedEntry_correct)))))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
