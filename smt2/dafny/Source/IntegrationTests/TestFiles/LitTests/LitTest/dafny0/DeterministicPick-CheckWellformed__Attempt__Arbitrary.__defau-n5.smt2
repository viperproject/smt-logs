(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 (T@U) T@U)
(declare-fun $generated@@20 (T@U T@U) Bool)
(declare-fun $generated@@21 () T@U)
(declare-fun $generated@@23 (T@U) Int)
(declare-fun $generated@@24 (T@U) Bool)
(declare-fun $generated@@25 (T@T T@U) T@U)
(declare-fun $generated@@27 (Int) Int)
(declare-fun $generated@@29 (T@T T@U) T@U)
(declare-fun $generated@@32 (T@U T@U) Bool)
(declare-fun $generated@@36 (T@T T@U) T@U)
(declare-fun $generated@@39 () Int)
(declare-fun $generated@@40 (T@U) Int)
(declare-fun $generated@@41 (T@U) Bool)
(declare-fun $generated@@42 (T@T T@U T@U) Bool)
(declare-fun $generated@@43 () T@T)
(declare-fun $generated@@44 (T@U) T@U)
(declare-fun $generated@@45 (T@U T@U) Bool)
(declare-fun $generated@@47 (T@U T@U) Bool)
(declare-fun $generated@@51 (T@U) Bool)
(declare-fun $generated@@55 (T@U T@U T@U) Bool)
(declare-fun $generated@@56 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@74 (T@U) T@U)
(declare-fun $generated@@79 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@80 () T@T)
(declare-fun $generated@@81 () T@T)
(declare-fun $generated@@82 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@83 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@84 () T@T)
(declare-fun $generated@@85 (T@T T@T) T@T)
(declare-fun $generated@@86 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@87 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@88 (T@T) T@T)
(declare-fun $generated@@89 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (= ($generated@@19 $generated) $generated@@0))
(assert (forall (($generated@@22 T@U) ) (!  (not ($generated@@20 $generated@@21 $generated@@22))
 :pattern ( ($generated@@20 $generated@@21 $generated@@22))
)))
(assert (forall (($generated@@26 T@U) ) (!  (=> ($generated@@24 $generated@@26) ($generated@@20 $generated@@26 ($generated@@25 $generated@@5 ($generated@@9 ($generated@@23 $generated@@26)))))
 :pattern ( ($generated@@23 $generated@@26))
)))
(assert (forall (($generated@@28 Int) ) (! (= ($generated@@27 $generated@@28) $generated@@28)
 :pattern ( ($generated@@27 $generated@@28))
)))
(assert (forall (($generated@@30 T@U) ($generated@@31 T@T) ) (! (= ($generated@@29 $generated@@31 $generated@@30) $generated@@30)
 :pattern ( ($generated@@29 $generated@@31 $generated@@30))
)))
(assert (forall (($generated@@33 T@U) ($generated@@34 T@U) ) (! (= ($generated@@32 $generated@@33 $generated@@34) (forall (($generated@@35 T@U) ) (!  (=> ($generated@@20 $generated@@33 $generated@@35) ($generated@@20 $generated@@34 $generated@@35))
 :pattern ( ($generated@@20 $generated@@33 $generated@@35))
 :pattern ( ($generated@@20 $generated@@34 $generated@@35))
)))
 :pattern ( ($generated@@32 $generated@@33 $generated@@34))
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@T) ) (! (= ($generated@@25 $generated@@38 ($generated@@36 $generated@@38 $generated@@37)) $generated@@37)
 :pattern ( ($generated@@36 $generated@@38 $generated@@37))
)))
(assert (= ($generated@@3 $generated@@43) 3))
(assert  (=> (<= 0 $generated@@39) (forall (($generated@@46 T@U) ) (!  (=> (or ($generated@@41 $generated@@46) (and (< 0 $generated@@39) (and ($generated@@42 $generated@@43 $generated@@46 ($generated@@44 $generated)) (not ($generated@@45 $generated@@46 $generated@@21))))) ($generated@@20 $generated@@46 ($generated@@25 $generated@@5 ($generated@@9 ($generated@@40 $generated@@46)))))
 :pattern ( ($generated@@40 $generated@@46))
))))
(assert (forall (($generated@@48 T@U) ($generated@@49 T@U) ) (! (= ($generated@@42 $generated@@43 $generated@@48 ($generated@@44 $generated@@49)) (forall (($generated@@50 T@U) ) (!  (=> ($generated@@20 $generated@@48 $generated@@50) ($generated@@47 $generated@@50 $generated@@49))
 :pattern ( ($generated@@20 $generated@@48 $generated@@50))
)))
 :pattern ( ($generated@@42 $generated@@43 $generated@@48 ($generated@@44 $generated@@49)))
)))
(assert  (=> (<= 0 $generated@@39) (forall (($generated@@52 T@U) ($generated@@53 T@U) ) (!  (=> (or ($generated@@41 $generated@@53) (and (< 0 $generated@@39) (and (and ($generated@@51 $generated@@52) ($generated@@42 $generated@@43 $generated@@53 ($generated@@44 $generated))) (not ($generated@@45 $generated@@53 $generated@@21))))) (and ($generated@@24 $generated@@53) (= ($generated@@40 $generated@@53) (let (($generated@@54 ($generated@@23 $generated@@53)))
$generated@@54))))
 :pattern ( ($generated@@40 $generated@@53) ($generated@@51 $generated@@52))
))))
(assert (forall (($generated@@57 T@U) ($generated@@58 T@U) ($generated@@59 T@U) ($generated@@60 T@T) ) (! (= ($generated@@55 ($generated@@25 $generated@@60 $generated@@57) $generated@@58 $generated@@59) ($generated@@56 $generated@@60 $generated@@57 $generated@@58 $generated@@59))
 :pattern ( ($generated@@55 ($generated@@25 $generated@@60 $generated@@57) $generated@@58 $generated@@59))
)))
(assert (forall (($generated@@61 T@U) ($generated@@62 T@U) ) (!  (=> ($generated@@45 $generated@@61 $generated@@62) (= $generated@@61 $generated@@62))
 :pattern ( ($generated@@45 $generated@@61 $generated@@62))
)))
(assert  (=> (<= 0 $generated@@39) (forall (($generated@@63 T@U) ($generated@@64 T@U) ) (!  (=> (or ($generated@@41 ($generated@@29 $generated@@43 $generated@@64)) (and (< 0 $generated@@39) (and (and ($generated@@51 $generated@@63) ($generated@@42 $generated@@43 $generated@@64 ($generated@@44 $generated))) (not ($generated@@45 $generated@@64 $generated@@21))))) (and ($generated@@24 ($generated@@29 $generated@@43 $generated@@64)) (= ($generated@@40 ($generated@@29 $generated@@43 $generated@@64)) (let (($generated@@65 ($generated@@23 ($generated@@29 $generated@@43 $generated@@64))))
$generated@@65))))
 :weight 3
 :pattern ( ($generated@@40 ($generated@@29 $generated@@43 $generated@@64)) ($generated@@51 $generated@@63))
))))
(assert (forall (($generated@@66 T@U) ) (!  (=> ($generated@@47 $generated@@66 $generated) (and (= ($generated@@25 $generated@@5 ($generated@@36 $generated@@5 $generated@@66)) $generated@@66) ($generated@@42 $generated@@5 ($generated@@36 $generated@@5 $generated@@66) $generated)))
 :pattern ( ($generated@@47 $generated@@66 $generated))
)))
(assert (forall (($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@T) ) (! (= ($generated@@47 ($generated@@25 $generated@@69 $generated@@67) $generated@@68) ($generated@@42 $generated@@69 $generated@@67 $generated@@68))
 :pattern ( ($generated@@47 ($generated@@25 $generated@@69 $generated@@67) $generated@@68))
)))
(assert (forall (($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (! (= ($generated@@56 $generated@@43 $generated@@70 ($generated@@44 $generated@@71) $generated@@72) (forall (($generated@@73 T@U) ) (!  (=> ($generated@@20 $generated@@70 $generated@@73) ($generated@@55 $generated@@73 $generated@@71 $generated@@72))
 :pattern ( ($generated@@20 $generated@@70 $generated@@73))
)))
 :pattern ( ($generated@@56 $generated@@43 $generated@@70 ($generated@@44 $generated@@71) $generated@@72))
)))
(assert (forall (($generated@@75 T@U) ) (! (= ($generated@@74 ($generated@@44 $generated@@75)) $generated@@75)
 :pattern ( ($generated@@44 $generated@@75))
)))
(assert (forall (($generated@@76 T@U) ) (! (= ($generated@@19 ($generated@@44 $generated@@76)) $generated@@1)
 :pattern ( ($generated@@44 $generated@@76))
)))
(assert (forall (($generated@@77 T@U) ($generated@@78 T@T) ) (! (= ($generated@@36 $generated@@78 ($generated@@25 $generated@@78 $generated@@77)) $generated@@77)
 :pattern ( ($generated@@25 $generated@@78 $generated@@77))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@90 T@T) ($generated@@91 T@T) ($generated@@92 T@T) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ) (! (= ($generated@@79 $generated@@90 $generated@@91 $generated@@92 ($generated@@86 $generated@@90 $generated@@91 $generated@@92 $generated@@94 $generated@@95 $generated@@96 $generated@@93) $generated@@95 $generated@@96) $generated@@93)
 :weight 0
)) (and (forall (($generated@@97 T@T) ($generated@@98 T@T) ($generated@@99 T@T) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ) (!  (or (= $generated@@102 $generated@@104) (= ($generated@@79 $generated@@97 $generated@@98 $generated@@99 ($generated@@86 $generated@@97 $generated@@98 $generated@@99 $generated@@101 $generated@@102 $generated@@103 $generated@@100) $generated@@104 $generated@@105) ($generated@@79 $generated@@97 $generated@@98 $generated@@99 $generated@@101 $generated@@104 $generated@@105)))
 :weight 0
)) (forall (($generated@@106 T@T) ($generated@@107 T@T) ($generated@@108 T@T) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ) (!  (or (= $generated@@112 $generated@@114) (= ($generated@@79 $generated@@106 $generated@@107 $generated@@108 ($generated@@86 $generated@@106 $generated@@107 $generated@@108 $generated@@110 $generated@@111 $generated@@112 $generated@@109) $generated@@113 $generated@@114) ($generated@@79 $generated@@106 $generated@@107 $generated@@108 $generated@@110 $generated@@113 $generated@@114)))
 :weight 0
)))) (= ($generated@@3 $generated@@80) 4)) (= ($generated@@3 $generated@@81) 5)) (forall (($generated@@115 T@T) ($generated@@116 T@T) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ) (! (= ($generated@@83 $generated@@115 $generated@@116 ($generated@@87 $generated@@115 $generated@@116 $generated@@118 $generated@@119 $generated@@117) $generated@@119) $generated@@117)
 :weight 0
))) (forall (($generated@@120 T@T) ($generated@@121 T@T) ($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ) (!  (or (= $generated@@124 $generated@@125) (= ($generated@@83 $generated@@120 $generated@@121 ($generated@@87 $generated@@120 $generated@@121 $generated@@123 $generated@@124 $generated@@122) $generated@@125) ($generated@@83 $generated@@120 $generated@@121 $generated@@123 $generated@@125)))
 :weight 0
))) (= ($generated@@3 $generated@@84) 6)) (forall (($generated@@126 T@T) ($generated@@127 T@T) ) (= ($generated@@3 ($generated@@85 $generated@@126 $generated@@127)) 7))) (forall (($generated@@128 T@T) ($generated@@129 T@T) ) (! (= ($generated@@88 ($generated@@85 $generated@@128 $generated@@129)) $generated@@128)
 :pattern ( ($generated@@85 $generated@@128 $generated@@129))
))) (forall (($generated@@130 T@T) ($generated@@131 T@T) ) (! (= ($generated@@89 ($generated@@85 $generated@@130 $generated@@131)) $generated@@131)
 :pattern ( ($generated@@85 $generated@@130 $generated@@131))
))))
(assert (forall (($generated@@132 T@U) ($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 Bool) ($generated@@136 T@U) ($generated@@137 T@U) ) (! (= ($generated@@8 ($generated@@79 $generated@@80 $generated@@81 $generated@@4 ($generated@@82 $generated@@132 $generated@@133 $generated@@134 $generated@@135) $generated@@136 $generated@@137))  (=> (and (or (not (= $generated@@136 $generated@@132)) (not true)) ($generated@@8 ($generated@@36 $generated@@4 ($generated@@83 $generated@@81 $generated@@84 ($generated@@83 $generated@@80 ($generated@@85 $generated@@81 $generated@@84) $generated@@133 $generated@@136) $generated@@134)))) $generated@@135))
 :pattern ( ($generated@@79 $generated@@80 $generated@@81 $generated@@4 ($generated@@82 $generated@@132 $generated@@133 $generated@@134 $generated@@135) $generated@@136 $generated@@137))
)))
(assert (forall (($generated@@138 T@U) ($generated@@139 T@U) ) (!  (=> ($generated@@47 $generated@@138 ($generated@@44 $generated@@139)) (and (= ($generated@@25 $generated@@43 ($generated@@36 $generated@@43 $generated@@138)) $generated@@138) ($generated@@42 $generated@@43 ($generated@@36 $generated@@43 $generated@@138) ($generated@@44 $generated@@139))))
 :pattern ( ($generated@@47 $generated@@138 ($generated@@44 $generated@@139)))
)))
(assert (forall (($generated@@140 T@U) ($generated@@141 T@U) ) (! (= ($generated@@45 $generated@@140 $generated@@141) (forall (($generated@@142 T@U) ) (! (= ($generated@@20 $generated@@140 $generated@@142) ($generated@@20 $generated@@141 $generated@@142))
 :pattern ( ($generated@@20 $generated@@140 $generated@@142))
 :pattern ( ($generated@@20 $generated@@141 $generated@@142))
)))
 :pattern ( ($generated@@45 $generated@@140 $generated@@141))
)))
(assert (forall (($generated@@143 Int) ) (! (= ($generated@@25 $generated@@5 ($generated@@9 ($generated@@27 $generated@@143))) ($generated@@29 $generated@@84 ($generated@@25 $generated@@5 ($generated@@9 $generated@@143))))
 :pattern ( ($generated@@25 $generated@@5 ($generated@@9 ($generated@@27 $generated@@143))))
)))
(assert (forall (($generated@@144 T@U) ($generated@@145 T@T) ) (! (= ($generated@@25 $generated@@145 ($generated@@29 $generated@@145 $generated@@144)) ($generated@@29 $generated@@84 ($generated@@25 $generated@@145 $generated@@144)))
 :pattern ( ($generated@@25 $generated@@145 ($generated@@29 $generated@@145 $generated@@144)))
)))
(assert (forall (($generated@@146 T@U) ($generated@@147 T@U) ) (! ($generated@@56 $generated@@5 $generated@@147 $generated $generated@@146)
 :pattern ( ($generated@@56 $generated@@5 $generated@@147 $generated $generated@@146))
)))
(assert (forall (($generated@@148 T@U) ) (! ($generated@@42 $generated@@5 $generated@@148 $generated)
 :pattern ( ($generated@@42 $generated@@5 $generated@@148 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@149 () T@U)
(declare-fun $generated@@150 () Int)
(declare-fun $generated@@151 () Int)
(declare-fun $generated@@152 () T@U)
(declare-fun $generated@@153 () T@U)
(declare-fun $generated@@154 () T@U)
(declare-fun $generated@@155 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 11) (let (($generated@@156  (=> (= (ControlFlow 0 6) (- 0 5)) ($generated@@20 $generated@@149 ($generated@@25 $generated@@5 ($generated@@9 ($generated@@40 $generated@@149)))))))
(let (($generated@@157  (and (=> (= (ControlFlow 0 7) (- 0 9)) (or (and ($generated@@42 $generated@@5 ($generated@@9 ($generated@@27 0)) $generated) ($generated@@20 $generated@@149 ($generated@@25 $generated@@5 ($generated@@9 ($generated@@27 0))))) (exists (($generated@@158 T@U) ) ($generated@@20 $generated@@149 ($generated@@25 $generated@@5 $generated@@158))))) (=> (or (and ($generated@@42 $generated@@5 ($generated@@9 ($generated@@27 0)) $generated) ($generated@@20 $generated@@149 ($generated@@25 $generated@@5 ($generated@@9 ($generated@@27 0))))) (exists (($generated@@159 Int) ) ($generated@@20 $generated@@149 ($generated@@25 $generated@@5 ($generated@@9 $generated@@159))))) (=> (and ($generated@@20 $generated@@149 ($generated@@25 $generated@@5 ($generated@@9 $generated@@150))) ($generated@@20 $generated@@149 ($generated@@25 $generated@@5 ($generated@@9 $generated@@151)))) (and (=> (= (ControlFlow 0 7) (- 0 8)) (= $generated@@150 $generated@@151)) (=> (= $generated@@150 $generated@@151) (=> (and (and ($generated@@24 $generated@@149) (= ($generated@@40 $generated@@149) $generated@@150)) (and ($generated@@42 $generated@@5 ($generated@@9 ($generated@@40 $generated@@149)) $generated) (= (ControlFlow 0 7) 6))) $generated@@156))))))))
(let (($generated@@160 true))
(let (($generated@@161  (=> ($generated@@56 $generated@@43 $generated@@149 ($generated@@44 $generated) $generated@@152) (and (=> (= (ControlFlow 0 2) (- 0 3)) (not ($generated@@45 $generated@@149 $generated@@21))) (=> (and (not ($generated@@45 $generated@@149 $generated@@21)) (= (ControlFlow 0 2) (- 0 1))) (or ($generated@@45 $generated@@149 $generated@@149) (and ($generated@@32 $generated@@149 $generated@@149) (not ($generated@@32 $generated@@149 $generated@@149)))))))))
(let (($generated@@162  (=> (and (= $generated@@153 ($generated@@82 $generated@@154 $generated@@152 $generated@@2 false)) (not ($generated@@45 $generated@@149 $generated@@21))) (and (and (=> (= (ControlFlow 0 10) 2) $generated@@161) (=> (= (ControlFlow 0 10) 7) $generated@@157)) (=> (= (ControlFlow 0 10) 4) $generated@@160)))))
(let (($generated@@163  (=> (and (and (and ($generated@@51 $generated@@152) ($generated@@155 $generated@@152)) ($generated@@42 $generated@@43 $generated@@149 ($generated@@44 $generated))) (and (= 0 $generated@@39) (= (ControlFlow 0 11) 10))) $generated@@162)))
$generated@@163)))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 7) (- 8))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
