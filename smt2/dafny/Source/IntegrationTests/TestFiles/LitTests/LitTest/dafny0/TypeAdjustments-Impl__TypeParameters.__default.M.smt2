(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun alloc () T@U)
(declare-fun allocName () T@U)
(declare-fun Tagclass._System.nat () T@U)
(declare-fun |##_System._tuple#2._#Make2| () T@U)
(declare-fun Tagclass._System.Tuple2 () T@U)
(declare-fun Tagclass.TypeParameters.List () T@U)
(declare-fun Tagclass.TypeParameters.Class () T@U)
(declare-fun Tagclass.TypeParameters.Class? () T@U)
(declare-fun |##TypeParameters.List.Nil| () T@U)
(declare-fun |##TypeParameters.List.Cons| () T@U)
(declare-fun class.TypeParameters.Class? () T@U)
(declare-fun tytagFamily$nat () T@U)
(declare-fun |tytagFamily$_tuple#2| () T@U)
(declare-fun tytagFamily$List () T@U)
(declare-fun tytagFamily$Class () T@U)
(declare-fun field$data () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun FDim (T@U) Int)
(declare-fun Tag (T@U) T@U)
(declare-fun DeclName (T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun refType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun TypeParameters.Class.data () T@U)
(declare-fun Tclass.TypeParameters.Class? (T@U) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun null () T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass._System.nat () T@U)
(declare-fun Tclass.TypeParameters.Class (T@U) T@U)
(declare-fun _System.Tuple2.___hMake2_q (T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun Tclass._System.Tuple2 (T@U T@U) T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun |#TypeParameters.List.Nil| () T@U)
(declare-fun Tclass.TypeParameters.List (T@U) T@U)
(declare-fun |#_System._tuple#2._#Make2| (T@U T@U) T@U)
(declare-fun FieldOfDecl (T@U T@U) T@U)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun |#TypeParameters.List.Cons| (T@U T@U) T@U)
(declare-fun TypeParameters.List.Nil_q (T@U) Bool)
(declare-fun TypeParameters.List.Cons_q (T@U) Bool)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun |$IsA#TypeParameters.List| (T@U) Bool)
(declare-fun DeclType (T@U) T@U)
(declare-fun Tclass._System.Tuple2_0 (T@U) T@U)
(declare-fun Tclass._System.Tuple2_1 (T@U) T@U)
(declare-fun _System.Tuple2._0 (T@U) T@U)
(declare-fun _System.Tuple2._1 (T@U) T@U)
(declare-fun TypeParameters.List.head (T@U) T@U)
(declare-fun TypeParameters.List._h4 (T@U) T@U)
(declare-fun Tclass.TypeParameters.List_0 (T@U) T@U)
(declare-fun Tclass.TypeParameters.Class_0 (T@U) T@U)
(declare-fun Tclass.TypeParameters.Class?_0 (T@U) T@U)
(declare-fun BoxRank (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt alloc allocName Tagclass._System.nat |##_System._tuple#2._#Make2| Tagclass._System.Tuple2 Tagclass.TypeParameters.List Tagclass.TypeParameters.Class Tagclass.TypeParameters.Class? |##TypeParameters.List.Nil| |##TypeParameters.List.Cons| class.TypeParameters.Class? tytagFamily$nat |tytagFamily$_tuple#2| tytagFamily$List tytagFamily$Class field$data)
)
(assert (= (FDim alloc) 0))
(assert (= (Tag TInt) TagInt))
(assert (= (DeclName alloc) allocName))
(assert  (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 3)) (= (Ctor BoxType) 4)) (= (Ctor refType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 6))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((TypeParameters.Class$A T@U) ($h T@U) ($o T@U) ) (!  (=> (and ($IsGoodHeap $h) (and (or (not (= $o null)) (not true)) (= (dtype $o) (Tclass.TypeParameters.Class? TypeParameters.Class$A)))) ($IsBox (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h $o) TypeParameters.Class.data) TypeParameters.Class$A))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h $o) TypeParameters.Class.data) (Tclass.TypeParameters.Class? TypeParameters.Class$A))
)))
(assert (forall ((TypeParameters.Class$A@@0 T@U) ($h@@0 T@U) ($o@@0 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@0) (and (or (not (= $o@@0 null)) (not true)) (= (dtype $o@@0) (Tclass.TypeParameters.Class? TypeParameters.Class$A@@0)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@0 $o@@0) alloc)))) ($IsAllocBox (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@0 $o@@0) TypeParameters.Class.data) TypeParameters.Class$A@@0 $h@@0))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@0 $o@@0) TypeParameters.Class.data) (Tclass.TypeParameters.Class? TypeParameters.Class$A@@0))
)))
(assert (forall ((|x#0| T@U) ($h@@1 T@U) ) (! ($IsAlloc intType |x#0| Tclass._System.nat $h@@1)
 :pattern ( ($IsAlloc intType |x#0| Tclass._System.nat $h@@1))
)))
(assert (forall ((TypeParameters.Class$A@@1 T@U) (|c#0| T@U) ($h@@2 T@U) ) (! (= ($IsAlloc refType |c#0| (Tclass.TypeParameters.Class TypeParameters.Class$A@@1) $h@@2) ($IsAlloc refType |c#0| (Tclass.TypeParameters.Class? TypeParameters.Class$A@@1) $h@@2))
 :pattern ( ($IsAlloc refType |c#0| (Tclass.TypeParameters.Class TypeParameters.Class$A@@1) $h@@2))
 :pattern ( ($IsAlloc refType |c#0| (Tclass.TypeParameters.Class? TypeParameters.Class$A@@1) $h@@2))
)))
(assert (= (Ctor DatatypeTypeType) 7))
(assert (forall ((|_System._tuple#2$T0| T@U) (|_System._tuple#2$T1| T@U) (d T@U) ) (!  (=> ($Is DatatypeTypeType d (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)) (_System.Tuple2.___hMake2_q d))
 :pattern ( (_System.Tuple2.___hMake2_q d) ($Is DatatypeTypeType d (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)))
)))
(assert (= (DatatypeCtorId |#TypeParameters.List.Nil|) |##TypeParameters.List.Nil|))
(assert (forall ((TypeParameters.List$Y T@U) ($h@@3 T@U) ) (!  (=> ($IsGoodHeap $h@@3) ($IsAlloc DatatypeTypeType |#TypeParameters.List.Nil| (Tclass.TypeParameters.List TypeParameters.List$Y) $h@@3))
 :pattern ( ($IsAlloc DatatypeTypeType |#TypeParameters.List.Nil| (Tclass.TypeParameters.List TypeParameters.List$Y) $h@@3))
)))
(assert (forall ((|_System._tuple#2$T0@@0| T@U) (|_System._tuple#2$T1@@0| T@U) (|a#2#0#0| T@U) (|a#2#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|))  (and ($IsBox |a#2#0#0| |_System._tuple#2$T0@@0|) ($IsBox |a#2#1#0| |_System._tuple#2$T1@@0|)))
 :pattern ( ($Is DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|)))
)))
(assert (forall ((TypeParameters.Class$A@@2 T@U) ($o@@1 T@U) ($h@@4 T@U) ) (! (= ($IsAlloc refType $o@@1 (Tclass.TypeParameters.Class? TypeParameters.Class$A@@2) $h@@4)  (or (= $o@@1 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@4 $o@@1) alloc)))))
 :pattern ( ($IsAlloc refType $o@@1 (Tclass.TypeParameters.Class? TypeParameters.Class$A@@2) $h@@4))
)))
(assert (= (FDim TypeParameters.Class.data) 0))
(assert (= (FieldOfDecl class.TypeParameters.Class? field$data) TypeParameters.Class.data))
(assert  (not ($IsGhostField TypeParameters.Class.data)))
(assert (forall ((TypeParameters.List$Y@@0 T@U) ) (! ($Is DatatypeTypeType |#TypeParameters.List.Nil| (Tclass.TypeParameters.List TypeParameters.List$Y@@0))
 :pattern ( ($Is DatatypeTypeType |#TypeParameters.List.Nil| (Tclass.TypeParameters.List TypeParameters.List$Y@@0)))
)))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((TypeParameters.List$Y@@1 T@U) (|a#6#0#0| T@U) (|a#6#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#TypeParameters.List.Cons| |a#6#0#0| |a#6#1#0|) (Tclass.TypeParameters.List TypeParameters.List$Y@@1))  (and ($IsBox |a#6#0#0| TypeParameters.List$Y@@1) ($Is DatatypeTypeType |a#6#1#0| (Tclass.TypeParameters.List TypeParameters.List$Y@@1))))
 :pattern ( ($Is DatatypeTypeType (|#TypeParameters.List.Cons| |a#6#0#0| |a#6#1#0|) (Tclass.TypeParameters.List TypeParameters.List$Y@@1)))
)))
(assert (forall ((|_System._tuple#2$T0@@1| T@U) (|_System._tuple#2$T1@@1| T@U) (|a#2#0#0@@0| T@U) (|a#2#1#0@@0| T@U) ($h@@5 T@U) ) (!  (=> ($IsGoodHeap $h@@5) (= ($IsAlloc DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0@@0| |a#2#1#0@@0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|) $h@@5)  (and ($IsAllocBox |a#2#0#0@@0| |_System._tuple#2$T0@@1| $h@@5) ($IsAllocBox |a#2#1#0@@0| |_System._tuple#2$T1@@1| $h@@5))))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0@@0| |a#2#1#0@@0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|) $h@@5))
)))
(assert (forall ((d@@0 T@U) ) (! (= (_System.Tuple2.___hMake2_q d@@0) (= (DatatypeCtorId d@@0) |##_System._tuple#2._#Make2|))
 :pattern ( (_System.Tuple2.___hMake2_q d@@0))
)))
(assert (forall ((d@@1 T@U) ) (! (= (TypeParameters.List.Nil_q d@@1) (= (DatatypeCtorId d@@1) |##TypeParameters.List.Nil|))
 :pattern ( (TypeParameters.List.Nil_q d@@1))
)))
(assert (forall ((d@@2 T@U) ) (! (= (TypeParameters.List.Cons_q d@@2) (= (DatatypeCtorId d@@2) |##TypeParameters.List.Cons|))
 :pattern ( (TypeParameters.List.Cons_q d@@2))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((d@@3 T@U) ) (!  (=> (_System.Tuple2.___hMake2_q d@@3) (exists ((|a#1#0#0| T@U) (|a#1#1#0| T@U) ) (= d@@3 (|#_System._tuple#2._#Make2| |a#1#0#0| |a#1#1#0|))))
 :pattern ( (_System.Tuple2.___hMake2_q d@@3))
)))
(assert (forall ((d@@4 T@U) ) (!  (=> (TypeParameters.List.Cons_q d@@4) (exists ((|a#5#0#0| T@U) (|a#5#1#0| T@U) ) (= d@@4 (|#TypeParameters.List.Cons| |a#5#0#0| |a#5#1#0|))))
 :pattern ( (TypeParameters.List.Cons_q d@@4))
)))
(assert (forall ((d@@5 T@U) ) (!  (=> (TypeParameters.List.Nil_q d@@5) (= d@@5 |#TypeParameters.List.Nil|))
 :pattern ( (TypeParameters.List.Nil_q d@@5))
)))
(assert (forall ((|x#0@@0| T@U) ) (! (= ($Is intType |x#0@@0| Tclass._System.nat) (<= (LitInt 0) (U_2_int |x#0@@0|)))
 :pattern ( ($Is intType |x#0@@0| Tclass._System.nat))
)))
(assert ($IsGhostField alloc))
(assert (forall ((TypeParameters.Class$A@@3 T@U) (|c#0@@0| T@U) ) (! (= ($Is refType |c#0@@0| (Tclass.TypeParameters.Class TypeParameters.Class$A@@3))  (and ($Is refType |c#0@@0| (Tclass.TypeParameters.Class? TypeParameters.Class$A@@3)) (or (not (= |c#0@@0| null)) (not true))))
 :pattern ( ($Is refType |c#0@@0| (Tclass.TypeParameters.Class TypeParameters.Class$A@@3)))
 :pattern ( ($Is refType |c#0@@0| (Tclass.TypeParameters.Class? TypeParameters.Class$A@@3)))
)))
(assert (forall ((v T@U) (t T@U) (h@@0 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v) t h@@0) ($IsAlloc T@@1 v t h@@0))
 :pattern ( ($IsAllocBox ($Box T@@1 v) t h@@0))
)))
(assert (forall ((h@@1 T@U) (k@@0 T@U) (bx T@U) (t@@0 T@U) ) (!  (=> ($HeapSucc h@@1 k@@0) (=> ($IsAllocBox bx t@@0 h@@1) ($IsAllocBox bx t@@0 k@@0)))
 :pattern ( ($HeapSucc h@@1 k@@0) ($IsAllocBox bx t@@0 h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@1 T@U) (v@@0 T@U) (t@@1 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@2 k@@1) (=> ($IsAlloc T@@2 v@@0 t@@1 h@@2) ($IsAlloc T@@2 v@@0 t@@1 k@@1)))
 :pattern ( ($HeapSucc h@@2 k@@1) ($IsAlloc T@@2 v@@0 t@@1 h@@2))
)))
(assert (forall ((TypeParameters.List$Y@@2 T@U) ) (!  (and (= (Tag (Tclass.TypeParameters.List TypeParameters.List$Y@@2)) Tagclass.TypeParameters.List) (= (TagFamily (Tclass.TypeParameters.List TypeParameters.List$Y@@2)) tytagFamily$List))
 :pattern ( (Tclass.TypeParameters.List TypeParameters.List$Y@@2))
)))
(assert (forall ((TypeParameters.Class$A@@4 T@U) ) (!  (and (= (Tag (Tclass.TypeParameters.Class TypeParameters.Class$A@@4)) Tagclass.TypeParameters.Class) (= (TagFamily (Tclass.TypeParameters.Class TypeParameters.Class$A@@4)) tytagFamily$Class))
 :pattern ( (Tclass.TypeParameters.Class TypeParameters.Class$A@@4))
)))
(assert (forall ((TypeParameters.Class$A@@5 T@U) ) (!  (and (= (Tag (Tclass.TypeParameters.Class? TypeParameters.Class$A@@5)) Tagclass.TypeParameters.Class?) (= (TagFamily (Tclass.TypeParameters.Class? TypeParameters.Class$A@@5)) tytagFamily$Class))
 :pattern ( (Tclass.TypeParameters.Class? TypeParameters.Class$A@@5))
)))
(assert (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 Tclass._System.nat) (and (= ($Box intType ($Unbox intType bx@@0)) bx@@0) ($Is intType ($Unbox intType bx@@0) Tclass._System.nat)))
 :pattern ( ($IsBox bx@@0 Tclass._System.nat))
)))
(assert (forall ((TypeParameters.Class$A@@6 T@U) ($o@@2 T@U) ) (! (= ($Is refType $o@@2 (Tclass.TypeParameters.Class? TypeParameters.Class$A@@6))  (or (= $o@@2 null) (= (dtype $o@@2) (Tclass.TypeParameters.Class? TypeParameters.Class$A@@6))))
 :pattern ( ($Is refType $o@@2 (Tclass.TypeParameters.Class? TypeParameters.Class$A@@6)))
)))
(assert (forall ((d@@6 T@U) ) (!  (=> (|$IsA#TypeParameters.List| d@@6) (or (TypeParameters.List.Nil_q d@@6) (TypeParameters.List.Cons_q d@@6)))
 :pattern ( (|$IsA#TypeParameters.List| d@@6))
)))
(assert (forall ((TypeParameters.List$Y@@3 T@U) (d@@7 T@U) ) (!  (=> ($Is DatatypeTypeType d@@7 (Tclass.TypeParameters.List TypeParameters.List$Y@@3)) (or (TypeParameters.List.Nil_q d@@7) (TypeParameters.List.Cons_q d@@7)))
 :pattern ( (TypeParameters.List.Cons_q d@@7) ($Is DatatypeTypeType d@@7 (Tclass.TypeParameters.List TypeParameters.List$Y@@3)))
 :pattern ( (TypeParameters.List.Nil_q d@@7) ($Is DatatypeTypeType d@@7 (Tclass.TypeParameters.List TypeParameters.List$Y@@3)))
)))
(assert (forall ((a T@U) (b T@U) (c T@U) ) (!  (=> (or (not (= a c)) (not true)) (=> (and ($HeapSucc a b) ($HeapSucc b c)) ($HeapSucc a c)))
 :pattern ( ($HeapSucc a b) ($HeapSucc b c))
)))
(assert (forall ((cl T@U) (nm T@U) ) (!  (and (= (DeclType (FieldOfDecl cl nm)) cl) (= (DeclName (FieldOfDecl cl nm)) nm))
 :pattern ( (FieldOfDecl cl nm))
)))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 TInt) (and (= ($Box intType ($Unbox intType bx@@1)) bx@@1) ($Is intType ($Unbox intType bx@@1) TInt)))
 :pattern ( ($IsBox bx@@1 TInt))
)))
(assert (forall ((v@@1 T@U) (t@@2 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@1) t@@2) ($Is T@@3 v@@1 t@@2))
 :pattern ( ($IsBox ($Box T@@3 v@@1) t@@2))
)))
(assert (forall ((|a#0#0#0| T@U) (|a#0#1#0| T@U) ) (! (= (DatatypeCtorId (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|)) |##_System._tuple#2._#Make2|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|))
)))
(assert (forall ((|_System._tuple#2$T0@@2| T@U) (|_System._tuple#2$T1@@2| T@U) ) (! (= (Tclass._System.Tuple2_0 (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|)) |_System._tuple#2$T0@@2|)
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|))
)))
(assert (forall ((|_System._tuple#2$T0@@3| T@U) (|_System._tuple#2$T1@@3| T@U) ) (! (= (Tclass._System.Tuple2_1 (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|)) |_System._tuple#2$T1@@3|)
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|))
)))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| T@U) ) (! (= (_System.Tuple2._0 (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|)) |a#4#0#0|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|))
)))
(assert (forall ((|a#6#0#0@@0| T@U) (|a#6#1#0@@0| T@U) ) (! (= (_System.Tuple2._1 (|#_System._tuple#2._#Make2| |a#6#0#0@@0| |a#6#1#0@@0|)) |a#6#1#0@@0|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#6#0#0@@0| |a#6#1#0@@0|))
)))
(assert (forall ((|a#4#0#0@@0| T@U) (|a#4#1#0@@0| T@U) ) (! (= (DatatypeCtorId (|#TypeParameters.List.Cons| |a#4#0#0@@0| |a#4#1#0@@0|)) |##TypeParameters.List.Cons|)
 :pattern ( (|#TypeParameters.List.Cons| |a#4#0#0@@0| |a#4#1#0@@0|))
)))
(assert (forall ((|a#8#0#0| T@U) (|a#8#1#0| T@U) ) (! (= (TypeParameters.List.head (|#TypeParameters.List.Cons| |a#8#0#0| |a#8#1#0|)) |a#8#0#0|)
 :pattern ( (|#TypeParameters.List.Cons| |a#8#0#0| |a#8#1#0|))
)))
(assert (forall ((|a#10#0#0| T@U) (|a#10#1#0| T@U) ) (! (= (TypeParameters.List._h4 (|#TypeParameters.List.Cons| |a#10#0#0| |a#10#1#0|)) |a#10#1#0|)
 :pattern ( (|#TypeParameters.List.Cons| |a#10#0#0| |a#10#1#0|))
)))
(assert (forall ((TypeParameters.List$Y@@4 T@U) ) (! (= (Tclass.TypeParameters.List_0 (Tclass.TypeParameters.List TypeParameters.List$Y@@4)) TypeParameters.List$Y@@4)
 :pattern ( (Tclass.TypeParameters.List TypeParameters.List$Y@@4))
)))
(assert (forall ((TypeParameters.Class$A@@7 T@U) ) (! (= (Tclass.TypeParameters.Class_0 (Tclass.TypeParameters.Class TypeParameters.Class$A@@7)) TypeParameters.Class$A@@7)
 :pattern ( (Tclass.TypeParameters.Class TypeParameters.Class$A@@7))
)))
(assert (forall ((TypeParameters.Class$A@@8 T@U) ) (! (= (Tclass.TypeParameters.Class?_0 (Tclass.TypeParameters.Class? TypeParameters.Class$A@@8)) TypeParameters.Class$A@@8)
 :pattern ( (Tclass.TypeParameters.Class? TypeParameters.Class$A@@8))
)))
(assert (forall ((x@@5 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@5)) x@@5)
 :pattern ( ($Box T@@4 x@@5))
)))
(assert (forall ((|a#5#0#0@@0| T@U) (|a#5#1#0@@0| T@U) ) (! (< (BoxRank |a#5#0#0@@0|) (DtRank (|#_System._tuple#2._#Make2| |a#5#0#0@@0| |a#5#1#0@@0|)))
 :pattern ( (|#_System._tuple#2._#Make2| |a#5#0#0@@0| |a#5#1#0@@0|))
)))
(assert (forall ((|a#7#0#0| T@U) (|a#7#1#0| T@U) ) (! (< (BoxRank |a#7#1#0|) (DtRank (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|))
)))
(assert (forall ((|a#9#0#0| T@U) (|a#9#1#0| T@U) ) (! (< (BoxRank |a#9#0#0|) (DtRank (|#TypeParameters.List.Cons| |a#9#0#0| |a#9#1#0|)))
 :pattern ( (|#TypeParameters.List.Cons| |a#9#0#0| |a#9#1#0|))
)))
(assert (forall ((|a#11#0#0| T@U) (|a#11#1#0| T@U) ) (! (< (DtRank |a#11#1#0|) (DtRank (|#TypeParameters.List.Cons| |a#11#0#0| |a#11#1#0|)))
 :pattern ( (|#TypeParameters.List.Cons| |a#11#0#0| |a#11#1#0|))
)))
(assert (forall ((|_System._tuple#2$T0@@4| T@U) (|_System._tuple#2$T1@@4| T@U) (bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@2)) bx@@2) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@2) (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|))))
 :pattern ( ($IsBox bx@@2 (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|)))
)))
(assert (forall ((d@@8 T@U) (TypeParameters.List$Y@@5 T@U) ($h@@6 T@U) ) (!  (=> (and ($IsGoodHeap $h@@6) (and (TypeParameters.List.Cons_q d@@8) ($IsAlloc DatatypeTypeType d@@8 (Tclass.TypeParameters.List TypeParameters.List$Y@@5) $h@@6))) ($IsAllocBox (TypeParameters.List.head d@@8) TypeParameters.List$Y@@5 $h@@6))
 :pattern ( ($IsAllocBox (TypeParameters.List.head d@@8) TypeParameters.List$Y@@5 $h@@6))
)))
(assert  (and (forall ((t0@@0 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 t2 (MapType1Store t0@@0 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o@@3 T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@3 $f))  (=> (and (or (not (= $o@@3 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@3) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@3 $f))
)))
(assert (forall ((|_System._tuple#2$T0@@5| T@U) (|_System._tuple#2$T1@@5| T@U) ) (!  (and (= (Tag (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|)) Tagclass._System.Tuple2) (= (TagFamily (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|)) |tytagFamily$_tuple#2|))
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|))
)))
(assert (forall ((d@@9 T@U) ) (! (= (BoxRank ($Box DatatypeTypeType d@@9)) (DtRank d@@9))
 :pattern ( (BoxRank ($Box DatatypeTypeType d@@9)))
)))
(assert (forall ((TypeParameters.List$Y@@6 T@U) (bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 (Tclass.TypeParameters.List TypeParameters.List$Y@@6)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@3)) bx@@3) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@3) (Tclass.TypeParameters.List TypeParameters.List$Y@@6))))
 :pattern ( ($IsBox bx@@3 (Tclass.TypeParameters.List TypeParameters.List$Y@@6)))
)))
(assert (forall ((TypeParameters.Class$A@@9 T@U) (bx@@4 T@U) ) (!  (=> ($IsBox bx@@4 (Tclass.TypeParameters.Class TypeParameters.Class$A@@9)) (and (= ($Box refType ($Unbox refType bx@@4)) bx@@4) ($Is refType ($Unbox refType bx@@4) (Tclass.TypeParameters.Class TypeParameters.Class$A@@9))))
 :pattern ( ($IsBox bx@@4 (Tclass.TypeParameters.Class TypeParameters.Class$A@@9)))
)))
(assert (forall ((TypeParameters.Class$A@@10 T@U) (bx@@5 T@U) ) (!  (=> ($IsBox bx@@5 (Tclass.TypeParameters.Class? TypeParameters.Class$A@@10)) (and (= ($Box refType ($Unbox refType bx@@5)) bx@@5) ($Is refType ($Unbox refType bx@@5) (Tclass.TypeParameters.Class? TypeParameters.Class$A@@10))))
 :pattern ( ($IsBox bx@@5 (Tclass.TypeParameters.Class? TypeParameters.Class$A@@10)))
)))
(assert (forall ((d@@10 T@U) (TypeParameters.List$Y@@7 T@U) ($h@@7 T@U) ) (!  (=> (and ($IsGoodHeap $h@@7) (and (TypeParameters.List.Cons_q d@@10) ($IsAlloc DatatypeTypeType d@@10 (Tclass.TypeParameters.List TypeParameters.List$Y@@7) $h@@7))) ($IsAlloc DatatypeTypeType (TypeParameters.List._h4 d@@10) (Tclass.TypeParameters.List TypeParameters.List$Y@@7) $h@@7))
 :pattern ( ($IsAlloc DatatypeTypeType (TypeParameters.List._h4 d@@10) (Tclass.TypeParameters.List TypeParameters.List$Y@@7) $h@@7))
)))
(assert (= (Tag Tclass._System.nat) Tagclass._System.nat))
(assert (= (TagFamily Tclass._System.nat) tytagFamily$nat))
(assert (= |#TypeParameters.List.Nil| (Lit DatatypeTypeType |#TypeParameters.List.Nil|)))
(assert (forall ((d@@11 T@U) (|_System._tuple#2$T0@@6| T@U) ($h@@8 T@U) ) (!  (=> (and ($IsGoodHeap $h@@8) (and (_System.Tuple2.___hMake2_q d@@11) (exists ((|_System._tuple#2$T1@@6| T@U) ) (! ($IsAlloc DatatypeTypeType d@@11 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@8)
 :pattern ( ($IsAlloc DatatypeTypeType d@@11 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@8))
)))) ($IsAllocBox (_System.Tuple2._0 d@@11) |_System._tuple#2$T0@@6| $h@@8))
 :pattern ( ($IsAllocBox (_System.Tuple2._0 d@@11) |_System._tuple#2$T0@@6| $h@@8))
)))
(assert (forall ((d@@12 T@U) (|_System._tuple#2$T1@@7| T@U) ($h@@9 T@U) ) (!  (=> (and ($IsGoodHeap $h@@9) (and (_System.Tuple2.___hMake2_q d@@12) (exists ((|_System._tuple#2$T0@@7| T@U) ) (! ($IsAlloc DatatypeTypeType d@@12 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|) $h@@9)
 :pattern ( ($IsAlloc DatatypeTypeType d@@12 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|) $h@@9))
)))) ($IsAllocBox (_System.Tuple2._1 d@@12) |_System._tuple#2$T1@@7| $h@@9))
 :pattern ( ($IsAllocBox (_System.Tuple2._1 d@@12) |_System._tuple#2$T1@@7| $h@@9))
)))
(assert (forall ((|a#3#0#0| T@U) (|a#3#1#0| T@U) ) (! (= (|#_System._tuple#2._#Make2| (Lit BoxType |a#3#0#0|) (Lit BoxType |a#3#1#0|)) (Lit DatatypeTypeType (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| (Lit BoxType |a#3#0#0|) (Lit BoxType |a#3#1#0|)))
)))
(assert (forall ((|a#7#0#0@@0| T@U) (|a#7#1#0@@0| T@U) ) (! (= (|#TypeParameters.List.Cons| (Lit BoxType |a#7#0#0@@0|) (Lit DatatypeTypeType |a#7#1#0@@0|)) (Lit DatatypeTypeType (|#TypeParameters.List.Cons| |a#7#0#0@@0| |a#7#1#0@@0|)))
 :pattern ( (|#TypeParameters.List.Cons| (Lit BoxType |a#7#0#0@@0|) (Lit DatatypeTypeType |a#7#1#0@@0|)))
)))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((x@@7 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@7)) (Lit BoxType ($Box T@@5 x@@7)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@7)))
)))
(assert (forall ((h@@3 T@U) (v@@2 T@U) ) (! ($IsAlloc intType v@@2 TInt h@@3)
 :pattern ( ($IsAlloc intType v@@2 TInt h@@3))
)))
(assert (forall ((TypeParameters.List$Y@@8 T@U) (|a#6#0#0@@1| T@U) (|a#6#1#0@@1| T@U) ($h@@10 T@U) ) (!  (=> ($IsGoodHeap $h@@10) (= ($IsAlloc DatatypeTypeType (|#TypeParameters.List.Cons| |a#6#0#0@@1| |a#6#1#0@@1|) (Tclass.TypeParameters.List TypeParameters.List$Y@@8) $h@@10)  (and ($IsAllocBox |a#6#0#0@@1| TypeParameters.List$Y@@8 $h@@10) ($IsAlloc DatatypeTypeType |a#6#1#0@@1| (Tclass.TypeParameters.List TypeParameters.List$Y@@8) $h@@10))))
 :pattern ( ($IsAlloc DatatypeTypeType (|#TypeParameters.List.Cons| |a#6#0#0@@1| |a#6#1#0@@1|) (Tclass.TypeParameters.List TypeParameters.List$Y@@8) $h@@10))
)))
(assert (forall ((v@@3 T@U) ) (! ($Is intType v@@3 TInt)
 :pattern ( ($Is intType v@@3 TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |$rhs##4@0| () T@U)
(declare-fun |x#0@0| () Int)
(declare-fun |call3formal@r#0| () T@U)
(declare-fun call0formal@TypeParameters._default.MFitToList$G () T@U)
(declare-fun $Heap () T@U)
(declare-fun call0formal@TypeParameters._default.MFitToList$G@0 () T@U)
(declare-fun $Heap@5 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |call3formal@r#0@0| () T@U)
(declare-fun $Heap@4 () T@U)
(declare-fun |$rhs##5@0| () Int)
(declare-fun |call3formal@r#0@@0| () T@U)
(declare-fun call0formal@TypeParameters._default.MFitToList$G@@0 () T@U)
(declare-fun $Heap@6 () T@U)
(declare-fun |call3formal@r#0@0@@0| () T@U)
(declare-fun |$rhs##6@0| () Int)
(declare-fun |$rhs##2@0| () T@U)
(declare-fun |$rhs##3@0| () Int)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun |c#0@@1| () T@U)
(declare-fun |call4formal@a#0| () T@U)
(declare-fun call0formal@TypeParameters.Class$A () T@U)
(declare-fun call0formal@TypeParameters.Class$A@0 () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun |call4formal@a#0@0| () T@U)
(declare-fun |$rhs##0@0| () Int)
(declare-fun |call3formal@r#0@@1| () T@U)
(declare-fun call0formal@TypeParameters._default.MFitToAnything$G () T@U)
(declare-fun call0formal@TypeParameters._default.MFitToAnything$G@0 () T@U)
(declare-fun |call1formal@g#0@0| () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun |call3formal@r#0@0@@1| () T@U)
(declare-fun |$rhs##1@0| () T@U)
(declare-fun |call3formal@r#0@@2| () T@U)
(declare-fun call0formal@TypeParameters._default.MFitToAnything$G@@0 () T@U)
(declare-fun call0formal@TypeParameters._default.MFitToAnything$G@0@@0 () T@U)
(declare-fun |call1formal@g#0@0@@0| () T@U)
(declare-fun |xs#0| () T@U)
(declare-fun $Heap@2 () T@U)
(declare-fun |call3formal@r#0@0@@2| () T@U)
(declare-fun |call3formal@r#0@@3| () T@U)
(declare-fun call0formal@TypeParameters._default.MFitToAnything$G@@1 () T@U)
(declare-fun call0formal@TypeParameters._default.MFitToAnything$G@0@@1 () T@U)
(declare-fun |call1formal@g#0@0@@1| () T@U)
(declare-fun |n#0| () Int)
(declare-fun $Heap@3 () T@U)
(declare-fun |call3formal@r#0@0@@3| () T@U)
(declare-fun |g##3@0| () T@U)
(declare-fun |call3formal@r#0@@4| () T@U)
(declare-fun call0formal@TypeParameters._default.MFitToAnything$G@@2 () T@U)
(declare-fun call0formal@TypeParameters._default.MFitToAnything$G@0@@2 () T@U)
(declare-fun |call1formal@g#0@0@@2| () T@U)
(declare-fun |call3formal@r#0@0@@4| () T@U)
(declare-fun |ys#0| () T@U)
(declare-fun |defass#d#0| () Bool)
(declare-fun |d#0| () T@U)
(declare-fun |i#0| () Int)
(declare-fun |defass#g0#0| () Bool)
(declare-fun |g0#0| () T@U)
(declare-fun |g1#0| () T@U)
(declare-fun |g2#0| () Int)
(declare-fun |g3#0| () T@U)
(declare-fun |x#0@@1| () Int)
(declare-fun $FunctionContextHeight () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 21) (let ((anon4_correct  (=> (and (_System.Tuple2.___hMake2_q |$rhs##4@0|) (=> (<= (LitInt 0) (U_2_int ($Unbox intType (_System.Tuple2._0 |$rhs##4@0|)))) (_System.Tuple2.___hMake2_q |$rhs##4@0|))) (and (=> (= (ControlFlow 0 2) (- 0 5)) (<= (LitInt 0) (U_2_int ($Unbox intType (_System.Tuple2._0 |$rhs##4@0|))))) (and (=> (= (ControlFlow 0 2) (- 0 4)) (<= (LitInt 0) (U_2_int ($Unbox intType (_System.Tuple2._1 |$rhs##4@0|))))) (=> (and (and (<= (LitInt 0) (U_2_int ($Unbox intType (_System.Tuple2._0 |$rhs##4@0|)))) (<= (LitInt 0) (U_2_int ($Unbox intType (_System.Tuple2._1 |$rhs##4@0|))))) (<= (LitInt 0) |x#0@0|)) (=> (and (and (and ($IsBox |call3formal@r#0| call0formal@TypeParameters._default.MFitToList$G) ($IsAllocBox |call3formal@r#0| call0formal@TypeParameters._default.MFitToList$G $Heap)) (= call0formal@TypeParameters._default.MFitToList$G@0 Tclass._System.nat)) (and ($IsGoodHeap $Heap@5) ($IsHeapAnchor $Heap@5))) (=> (and (and (and (and (and ($IsBox |call3formal@r#0@0| call0formal@TypeParameters._default.MFitToList$G@0) ($IsAllocBox |call3formal@r#0@0| call0formal@TypeParameters._default.MFitToList$G@0 $Heap@5)) (forall (($o@@4 T@U) ) (!  (=> (and (or (not (= $o@@4 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 $o@@4) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 $o@@4) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 $o@@4)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 $o@@4))
))) (and ($HeapSucc $Heap@4 $Heap@5) (= |$rhs##5@0| (U_2_int ($Unbox intType |call3formal@r#0@0|))))) (and (and ($IsBox |call3formal@r#0@@0| call0formal@TypeParameters._default.MFitToList$G@@0) ($IsAllocBox |call3formal@r#0@@0| call0formal@TypeParameters._default.MFitToList$G@@0 $Heap)) (and ($IsGoodHeap $Heap@6) ($IsHeapAnchor $Heap@6)))) (and (and (and ($IsBox |call3formal@r#0@0@@0| TInt) ($IsAllocBox |call3formal@r#0@0@@0| TInt $Heap@6)) (forall (($o@@5 T@U) ) (!  (=> (and (or (not (= $o@@5 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 $o@@5) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 $o@@5) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 $o@@5)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 $o@@5))
))) (and ($HeapSucc $Heap@5 $Heap@6) (= |$rhs##6@0| (U_2_int ($Unbox intType |call3formal@r#0@0@@0|)))))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (<= (LitInt 0) |$rhs##5@0|)) (=> (<= (LitInt 0) |$rhs##5@0|) (=> (= (ControlFlow 0 2) (- 0 1)) (<= (LitInt 0) |$rhs##6@0|))))))))))))
(let ((anon6_Else_correct  (=> (and (< (U_2_int ($Unbox intType (_System.Tuple2._0 |$rhs##4@0|))) (LitInt 0)) (= (ControlFlow 0 7) 2)) anon4_correct)))
(let ((anon6_Then_correct  (=> (<= (LitInt 0) (U_2_int ($Unbox intType (_System.Tuple2._0 |$rhs##4@0|)))) (=> (and (_System.Tuple2.___hMake2_q |$rhs##4@0|) (= (ControlFlow 0 6) 2)) anon4_correct))))
(let ((anon2_correct  (and (=> (= (ControlFlow 0 8) (- 0 10)) (=> (TypeParameters.List.Cons_q |$rhs##2@0|) (<= (LitInt 0) (U_2_int ($Unbox intType (TypeParameters.List.head |$rhs##2@0|)))))) (=> (=> (TypeParameters.List.Cons_q |$rhs##2@0|) (<= (LitInt 0) (U_2_int ($Unbox intType (TypeParameters.List.head |$rhs##2@0|))))) (and (=> (= (ControlFlow 0 8) (- 0 9)) (<= (LitInt 0) |$rhs##3@0|)) (=> (<= (LitInt 0) |$rhs##3@0|) (=> (_System.Tuple2.___hMake2_q |$rhs##4@0|) (and (=> (= (ControlFlow 0 8) 6) anon6_Then_correct) (=> (= (ControlFlow 0 8) 7) anon6_Else_correct)))))))))
(let ((anon5_Else_correct  (=> (and (not (TypeParameters.List.Cons_q |$rhs##2@0|)) (= (ControlFlow 0 13) 8)) anon2_correct)))
(let ((anon5_Then_correct  (=> (TypeParameters.List.Cons_q |$rhs##2@0|) (and (=> (= (ControlFlow 0 11) (- 0 12)) (TypeParameters.List.Cons_q |$rhs##2@0|)) (=> (TypeParameters.List.Cons_q |$rhs##2@0|) (=> (= (ControlFlow 0 11) 8) anon2_correct))))))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (and (=> (= (ControlFlow 0 14) (- 0 20)) true) (and (=> (= (ControlFlow 0 14) (- 0 19)) (or (not (= |c#0@@1| null)) (not true))) (=> (or (not (= |c#0@@1| null)) (not true)) (=> (and (and (and (and ($IsBox |call4formal@a#0| call0formal@TypeParameters.Class$A) ($IsAllocBox |call4formal@a#0| call0formal@TypeParameters.Class$A $Heap)) (= call0formal@TypeParameters.Class$A@0 Tclass._System.nat)) (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0))) (and (and (and ($IsBox |call4formal@a#0@0| call0formal@TypeParameters.Class$A@0) ($IsAllocBox |call4formal@a#0@0| call0formal@TypeParameters.Class$A@0 $Heap@0)) (forall (($o@@6 T@U) ) (!  (=> (and (or (not (= $o@@6 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@6) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@6) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@6)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@6))
))) (and ($HeapSucc $Heap $Heap@0) (= |$rhs##0@0| (U_2_int ($Unbox intType |call4formal@a#0@0|)))))) (and (=> (= (ControlFlow 0 14) (- 0 18)) (<= (LitInt 0) |$rhs##0@0|)) (=> (<= (LitInt 0) |$rhs##0@0|) (=> (and ($IsBox |call3formal@r#0@@1| call0formal@TypeParameters._default.MFitToAnything$G) ($IsAllocBox |call3formal@r#0@@1| call0formal@TypeParameters._default.MFitToAnything$G $Heap)) (=> (and (and (and (and (= call0formal@TypeParameters._default.MFitToAnything$G@0 (Tclass.TypeParameters.Class Tclass._System.nat)) (= |call1formal@g#0@0| ($Box refType |c#0@@1|))) (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1))) (and (and ($IsBox |call3formal@r#0@0@@1| call0formal@TypeParameters._default.MFitToAnything$G@0) ($IsAllocBox |call3formal@r#0@0@@1| call0formal@TypeParameters._default.MFitToAnything$G@0 $Heap@1)) (forall (($o@@7 T@U) ) (!  (=> (and (or (not (= $o@@7 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@7) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@7) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@7)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@7))
)))) (and (and (and ($HeapSucc $Heap@0 $Heap@1) (= |$rhs##1@0| ($Unbox refType |call3formal@r#0@0@@1|))) (and ($IsBox |call3formal@r#0@@2| call0formal@TypeParameters._default.MFitToAnything$G@@0) ($IsAllocBox |call3formal@r#0@@2| call0formal@TypeParameters._default.MFitToAnything$G@@0 $Heap))) (and (and (= call0formal@TypeParameters._default.MFitToAnything$G@0@@0 (Tclass.TypeParameters.List Tclass._System.nat)) (= |call1formal@g#0@0@@0| ($Box DatatypeTypeType |xs#0|))) (and ($IsGoodHeap $Heap@2) ($IsHeapAnchor $Heap@2))))) (=> (and (and (and (and (and ($IsBox |call3formal@r#0@0@@2| call0formal@TypeParameters._default.MFitToAnything$G@0@@0) ($IsAllocBox |call3formal@r#0@0@@2| call0formal@TypeParameters._default.MFitToAnything$G@0@@0 $Heap@2)) (forall (($o@@8 T@U) ) (!  (=> (and (or (not (= $o@@8 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@8) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@8) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@8)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@8))
))) (and (and ($HeapSucc $Heap@1 $Heap@2) (= |$rhs##2@0| ($Unbox DatatypeTypeType |call3formal@r#0@0@@2|))) (and ($IsBox |call3formal@r#0@@3| call0formal@TypeParameters._default.MFitToAnything$G@@1) ($IsAllocBox |call3formal@r#0@@3| call0formal@TypeParameters._default.MFitToAnything$G@@1 $Heap)))) (and (and (and (= call0formal@TypeParameters._default.MFitToAnything$G@0@@1 Tclass._System.nat) (= |call1formal@g#0@0@@1| ($Box intType (int_2_U |n#0|)))) (and ($IsGoodHeap $Heap@3) ($IsHeapAnchor $Heap@3))) (and (and ($IsBox |call3formal@r#0@0@@3| call0formal@TypeParameters._default.MFitToAnything$G@0@@1) ($IsAllocBox |call3formal@r#0@0@@3| call0formal@TypeParameters._default.MFitToAnything$G@0@@1 $Heap@3)) (and (forall (($o@@9 T@U) ) (!  (=> (and (or (not (= $o@@9 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@9) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@9) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@9)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@9))
)) ($HeapSucc $Heap@2 $Heap@3))))) (and (and (and (and (= |$rhs##3@0| (U_2_int ($Unbox intType |call3formal@r#0@0@@3|))) (= |g##3@0| (|#_System._tuple#2._#Make2| ($Box intType (int_2_U |n#0|)) ($Box intType (int_2_U |n#0|))))) (and ($IsBox |call3formal@r#0@@4| call0formal@TypeParameters._default.MFitToAnything$G@@2) ($IsAllocBox |call3formal@r#0@@4| call0formal@TypeParameters._default.MFitToAnything$G@@2 $Heap))) (and (and (= call0formal@TypeParameters._default.MFitToAnything$G@0@@2 (Tclass._System.Tuple2 Tclass._System.nat Tclass._System.nat)) (= |call1formal@g#0@0@@2| ($Box DatatypeTypeType |g##3@0|))) (and ($IsGoodHeap $Heap@4) ($IsHeapAnchor $Heap@4)))) (and (and (and ($IsBox |call3formal@r#0@0@@4| call0formal@TypeParameters._default.MFitToAnything$G@0@@2) ($IsAllocBox |call3formal@r#0@0@@4| call0formal@TypeParameters._default.MFitToAnything$G@0@@2 $Heap@4)) (forall (($o@@10 T@U) ) (!  (=> (and (or (not (= $o@@10 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@10) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 $o@@10) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@10)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 $o@@10))
))) (and ($HeapSucc $Heap@3 $Heap@4) (= |$rhs##4@0| ($Unbox DatatypeTypeType |call3formal@r#0@0@@4|)))))) (and (=> (= (ControlFlow 0 14) (- 0 17)) true) (and (=> (= (ControlFlow 0 14) (- 0 16)) (or (not (= |$rhs##1@0| null)) (not true))) (and (=> (= (ControlFlow 0 14) (- 0 15)) (<= (LitInt 0) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 |$rhs##1@0|) TypeParameters.Class.data))))) (=> (<= (LitInt 0) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 |$rhs##1@0|) TypeParameters.Class.data)))) (and (=> (= (ControlFlow 0 14) 11) anon5_Then_correct) (=> (= (ControlFlow 0 14) 13) anon5_Else_correct))))))))))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (and ($Is refType |c#0@@1| (Tclass.TypeParameters.Class Tclass._System.nat)) ($IsAlloc refType |c#0@@1| (Tclass.TypeParameters.Class Tclass._System.nat) $Heap))) (and (and ($Is DatatypeTypeType |xs#0| (Tclass.TypeParameters.List Tclass._System.nat)) ($IsAlloc DatatypeTypeType |xs#0| (Tclass.TypeParameters.List Tclass._System.nat) $Heap)) (|$IsA#TypeParameters.List| |xs#0|))) (=> (and (and (and (and (and (and ($Is DatatypeTypeType |ys#0| (Tclass.TypeParameters.List TInt)) ($IsAlloc DatatypeTypeType |ys#0| (Tclass.TypeParameters.List TInt) $Heap)) (|$IsA#TypeParameters.List| |ys#0|)) (<= (LitInt 0) |n#0|)) (and (=> |defass#d#0| (and ($Is refType |d#0| (Tclass.TypeParameters.Class Tclass._System.nat)) ($IsAlloc refType |d#0| (Tclass.TypeParameters.Class Tclass._System.nat) $Heap))) true)) (and (and (<= (LitInt 0) |i#0|) true) (and (=> |defass#g0#0| (and ($Is refType |g0#0| (Tclass.TypeParameters.Class Tclass._System.nat)) ($IsAlloc refType |g0#0| (Tclass.TypeParameters.Class Tclass._System.nat) $Heap))) true))) (and (and (and (and ($Is DatatypeTypeType |g1#0| (Tclass.TypeParameters.List Tclass._System.nat)) ($IsAlloc DatatypeTypeType |g1#0| (Tclass.TypeParameters.List Tclass._System.nat) $Heap)) true) (and (<= (LitInt 0) |g2#0|) true)) (and (and (and ($Is DatatypeTypeType |g3#0| (Tclass._System.Tuple2 Tclass._System.nat Tclass._System.nat)) ($IsAlloc DatatypeTypeType |g3#0| (Tclass._System.Tuple2 Tclass._System.nat Tclass._System.nat) $Heap)) true) (and (and (<= (LitInt 0) |x#0@@1|) true) (and (= 2 $FunctionContextHeight) (= (ControlFlow 0 21) 14)))))) anon0_correct))))
PreconditionGeneratedEntry_correct)))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
