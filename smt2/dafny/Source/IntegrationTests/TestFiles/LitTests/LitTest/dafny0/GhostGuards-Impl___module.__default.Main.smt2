(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun alloc () T@U)
(declare-fun Tagclass._module.Dt () T@U)
(declare-fun |##_module.Dt.Green| () T@U)
(declare-fun |##_module.Dt.Dog| () T@U)
(declare-fun tytagFamily$Dt () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun |#_module.Dt.Green| () T@U)
(declare-fun |#_module.Dt.Dog| () T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun Tclass._module.Dt () T@U)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun refType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun $HeapSuccGhost (T@U T@U) Bool)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun Tag (T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :qid |typeInv:U_2_bool|
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :qid |cast:U_2_bool|
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :qid |typeInv:U_2_int|
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :qid |cast:U_2_int|
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :qid |typeInv:U_2_real|
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :qid |cast:U_2_real|
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct alloc Tagclass._module.Dt |##_module.Dt.Green| |##_module.Dt.Dog| tytagFamily$Dt)
)
(assert (= (DatatypeCtorId |#_module.Dt.Green|) |##_module.Dt.Green|))
(assert (= (DatatypeCtorId |#_module.Dt.Dog|) |##_module.Dt.Dog|))
(assert (= (Ctor DatatypeTypeType) 3))
(assert ($Is DatatypeTypeType |#_module.Dt.Green| Tclass._module.Dt))
(assert ($Is DatatypeTypeType |#_module.Dt.Dog| Tclass._module.Dt))
(assert  (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :qid |mapAx0:MapType0Select|
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :qid |mapAx1:MapType0Select:0|
 :weight 0
))) (= (Ctor FieldType) 4)) (= (Ctor BoxType) 5)) (= (Ctor refType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (! (= (Ctor (MapType0Type arg0@@2 arg1)) 7)
 :qid |ctor:MapType0Type|
))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :qid |typeInv:MapType0TypeInv0|
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :qid |typeInv:MapType0TypeInv1|
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))))
 :qid |DafnyPreludebpl.609:30|
 :skolemid |118|
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))
)))
 :qid |DafnyPreludebpl.608:15|
 :skolemid |119|
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((x@@2 T@U) (T T@T) ) (! (= (Lit T x@@2) x@@2)
 :qid |DafnyPreludebpl.102:29|
 :skolemid |15|
 :pattern ( (Lit T x@@2))
)))
(assert (forall ((x@@3 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@3)) x@@3)
 :qid |DafnyPreludebpl.168:18|
 :skolemid |26|
 :pattern ( ($Unbox T@@0 x@@3))
)))
(assert ($IsGhostField alloc))
(assert (forall ((h@@0 T@U) (k@@0 T@U) (v T@U) (t T@U) (T@@1 T@T) ) (!  (=> ($HeapSucc h@@0 k@@0) (=> ($IsAlloc T@@1 v t h@@0) ($IsAlloc T@@1 v t k@@0)))
 :qid |DafnyPreludebpl.554:18|
 :skolemid |110|
 :pattern ( ($HeapSucc h@@0 k@@0) ($IsAlloc T@@1 v t h@@0))
)))
(assert (forall ((h@@1 T@U) (k@@1 T@U) ) (!  (=> ($HeapSuccGhost h@@1 k@@1) (and ($HeapSucc h@@1 k@@1) (forall ((o@@0 T@U) (f T@U) ) (!  (=> (not ($IsGhostField f)) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@1 o@@0) f) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k@@1 o@@0) f)))
 :qid |DafnyPreludebpl.544:13|
 :skolemid |108|
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k@@1 o@@0) f))
))))
 :qid |DafnyPreludebpl.541:15|
 :skolemid |109|
 :pattern ( ($HeapSuccGhost h@@1 k@@1))
)))
(assert (forall ((a T@U) (b T@U) (c T@U) ) (!  (=> (or (not (= a c)) (not true)) (=> (and ($HeapSucc a b) ($HeapSucc b c)) ($HeapSucc a c)))
 :qid |DafnyPreludebpl.606:15|
 :skolemid |117|
 :pattern ( ($HeapSucc a b) ($HeapSucc b c))
)))
(assert (forall ((x@@4 T@U) (T@@2 T@T) ) (! (= ($Unbox T@@2 ($Box T@@2 x@@4)) x@@4)
 :qid |DafnyPreludebpl.167:18|
 :skolemid |25|
 :pattern ( ($Box T@@2 x@@4))
)))
(assert  (and (forall ((t0@@0 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 t2 (MapType1Store t0@@0 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :qid |mapAx0:MapType1Select|
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :qid |mapAx1:MapType1Select:0|
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :qid |mapAx1:MapType1Select:1|
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :qid |DafnyPreludebpl.156:1|
 :skolemid |499|
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((d T@U) ($h T@U) ) (!  (=> (and ($IsGoodHeap $h) ($Is DatatypeTypeType d Tclass._module.Dt)) ($IsAlloc DatatypeTypeType d Tclass._module.Dt $h))
 :qid |unknown.0:0|
 :skolemid |493|
 :pattern ( ($IsAlloc DatatypeTypeType d Tclass._module.Dt $h))
)))
(assert (= (Tag Tclass._module.Dt) Tagclass._module.Dt))
(assert (= (TagFamily Tclass._module.Dt) tytagFamily$Dt))
(assert (= |#_module.Dt.Green| (Lit DatatypeTypeType |#_module.Dt.Green|)))
(assert (= |#_module.Dt.Dog| (Lit DatatypeTypeType |#_module.Dt.Dog|)))
(assert (forall ((x@@5 T@U) (T@@3 T@T) ) (! (= ($Box T@@3 (Lit T@@3 x@@5)) (Lit BoxType ($Box T@@3 x@@5)))
 :qid |DafnyPreludebpl.103:18|
 :skolemid |16|
 :pattern ( ($Box T@@3 (Lit T@@3 x@@5)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |x#0@0| () Bool)
(declare-fun |g#0@0| () Bool)
(declare-fun |g#0@9| () Bool)
(declare-fun |g#0@7| () Bool)
(declare-fun |g#0@8| () Bool)
(declare-fun |h#0@0| () T@U)
(declare-fun |d#0@0| () T@U)
(declare-fun $Heap () T@U)
(declare-fun |$w$loop#1@0| () Bool)
(declare-fun |$w$loop#0@0| () Bool)
(declare-fun null () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun |g#0@2| () Bool)
(declare-fun |g#0@1| () Bool)
(declare-fun |g#0@6| () Bool)
(declare-fun |g#0@3| () Bool)
(declare-fun |g#0@4| () Bool)
(declare-fun |g#0@5| () Bool)
(declare-fun |$w$loop#5_0@1| () Bool)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |d#0| () T@U)
(declare-fun |h#0| () T@U)
(declare-fun $FunctionContextHeight () Int)
(set-info :boogie-vc-id Impl$$_module.__default.Main)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 66) (let ((anon62_Else_correct  (=> (and (and (not |x#0@0|) (not |g#0@0|)) (= (ControlFlow 0 49) (- 0 48))) false)))
(let ((anon46_correct  (=> (= (ControlFlow 0 35) (- 0 34)) (and (not |g#0@9|) |g#0@7|))))
(let ((anon76_Then_correct  (=> (and (and |g#0@7| (= |g#0@8| (U_2_bool (Lit boolType (bool_2_U false))))) (and (= |g#0@9| |g#0@8|) (= (ControlFlow 0 37) 35))) anon46_correct)))
(let ((anon75_Then_correct  (=> (U_2_bool (Lit boolType (bool_2_U false))) (=> (and (= |g#0@9| |g#0@7|) (= (ControlFlow 0 36) 35)) anon46_correct))))
(let ((anon80_Else_correct true))
(let ((anon80_Then_correct true))
(let ((anon79_Else_correct  (=> (or (not (= |h#0@0| |#_module.Dt.Green|)) (not true)) (and (=> (= (ControlFlow 0 26) 24) anon80_Then_correct) (=> (= (ControlFlow 0 26) 25) anon80_Else_correct)))))
(let ((anon79_Then_correct true))
(let ((anon51_correct  (and (=> (= (ControlFlow 0 27) 23) anon79_Then_correct) (=> (= (ControlFlow 0 27) 26) anon79_Else_correct))))
(let ((anon78_Then_correct  (=> (and (= |d#0@0| |#_module.Dt.Dog|) (= (ControlFlow 0 29) 27)) anon51_correct)))
(let ((anon77_Then_correct  (=> (and (= |d#0@0| |#_module.Dt.Green|) (= (ControlFlow 0 28) 27)) anon51_correct)))
(let ((anon78_Else_correct true))
(let ((anon77_Else_correct  (=> (or (not (= |d#0@0| |#_module.Dt.Green|)) (not true)) (and (=> (= (ControlFlow 0 30) 29) anon78_Then_correct) (=> (= (ControlFlow 0 30) 22) anon78_Else_correct)))))
(let ((anon47_correct  (=> (and (and ($Is DatatypeTypeType |d#0@0| Tclass._module.Dt) ($IsAlloc DatatypeTypeType |d#0@0| Tclass._module.Dt $Heap)) (and ($Is DatatypeTypeType |h#0@0| Tclass._module.Dt) ($IsAlloc DatatypeTypeType |h#0@0| Tclass._module.Dt $Heap))) (and (=> (= (ControlFlow 0 31) 28) anon77_Then_correct) (=> (= (ControlFlow 0 31) 30) anon77_Else_correct)))))
(let ((anon76_Else_correct  (=> (and (and (not (U_2_bool (Lit boolType (bool_2_U false)))) (not |g#0@7|)) (= (ControlFlow 0 33) 31)) anon47_correct)))
(let ((anon74_Else_correct  (=> (U_2_bool (Lit boolType (bool_2_U true))) (and (and (=> (= (ControlFlow 0 38) 36) anon75_Then_correct) (=> (= (ControlFlow 0 38) 37) anon76_Then_correct)) (=> (= (ControlFlow 0 38) 33) anon76_Else_correct)))))
(let ((anon74_Then_correct  (=> (and (not (U_2_bool (Lit boolType (bool_2_U true)))) (= (ControlFlow 0 32) 31)) anon47_correct)))
(let ((anon73_Else_correct  (=> |$w$loop#1@0| (and (=> (= (ControlFlow 0 39) 32) anon74_Then_correct) (=> (= (ControlFlow 0 39) 38) anon74_Else_correct)))))
(let ((anon73_Then_correct true))
(let ((anon72_LoopBody_correct  (and (=> (= (ControlFlow 0 40) 21) anon73_Then_correct) (=> (= (ControlFlow 0 40) 39) anon73_Else_correct))))
(let ((anon72_LoopDone_correct true))
(let ((anon72_LoopHead_correct  (=> (and (not false) |$w$loop#0@0|) (=> (and (and (forall (($o@@0 T@U) ) (!  (=> (and (or (not (= $o@@0 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@0) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@0) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@0)))
 :qid |GhostGuardsdfy.41:3|
 :skolemid |486|
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@0))
)) ($HeapSuccGhost $Heap $Heap)) (and (forall (($o@@1 T@U) ($f@@0 T@U) ) (!  (=> (and (or (not (= $o@@1 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@1) alloc)))) (or (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@1) $f@@0) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@1) $f@@0)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@1 $f@@0))))
 :qid |GhostGuardsdfy.41:3|
 :skolemid |487|
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@1) $f@@0))
)) (=> |g#0@7| |g#0@2|))) (and (=> (= (ControlFlow 0 41) 20) anon72_LoopDone_correct) (=> (= (ControlFlow 0 41) 40) anon72_LoopBody_correct))))))
(let ((anon66_Then_correct  (=> (and (not |g#0@1|) (= (ControlFlow 0 42) 41)) anon72_LoopHead_correct)))
(let ((anon35_correct  (=> (= (ControlFlow 0 12) (- 0 11)) (and (not |g#0@6|) |g#0@3|))))
(let ((anon71_Then_correct  (=> (and (and |g#0@3| (= |g#0@4| (U_2_bool (Lit boolType (bool_2_U false))))) (and (= |g#0@6| |g#0@4|) (= (ControlFlow 0 14) 12))) anon35_correct)))
(let ((anon70_Then_correct  (=> (U_2_bool (Lit boolType (bool_2_U false))) (=> (and (= |g#0@6| |g#0@3|) (= (ControlFlow 0 13) 12)) anon35_correct))))
(let ((anon36_correct  (=> (and (= |g#0@5| (U_2_bool (Lit boolType (bool_2_U false)))) (= (ControlFlow 0 8) (- 0 7))) (and (not |g#0@5|) |g#0@1|))))
(let ((anon71_Else_correct  (=> (and (and (not (U_2_bool (Lit boolType (bool_2_U false)))) (not |g#0@3|)) (= (ControlFlow 0 10) 8)) anon36_correct)))
(let ((anon69_Else_correct  (=> (U_2_bool (Lit boolType (bool_2_U true))) (and (and (=> (= (ControlFlow 0 15) 13) anon70_Then_correct) (=> (= (ControlFlow 0 15) 14) anon71_Then_correct)) (=> (= (ControlFlow 0 15) 10) anon71_Else_correct)))))
(let ((anon69_Then_correct  (=> (and (not (U_2_bool (Lit boolType (bool_2_U true)))) (= (ControlFlow 0 9) 8)) anon36_correct)))
(let ((anon68_Else_correct  (=> |$w$loop#5_0@1| (and (=> (= (ControlFlow 0 16) 9) anon69_Then_correct) (=> (= (ControlFlow 0 16) 15) anon69_Else_correct)))))
(let ((anon68_Then_correct true))
(let ((anon67_LoopBody_correct  (and (=> (= (ControlFlow 0 17) 6) anon68_Then_correct) (=> (= (ControlFlow 0 17) 16) anon68_Else_correct))))
(let ((anon67_LoopDone_correct true))
(let ((anon67_LoopHead_correct  (=> (and (and (and (and (not false) |$w$loop#0@0|) |g#0@1|) |g#0@1|) (and (and (forall (($o@@2 T@U) ) (!  (=> (and (or (not (= $o@@2 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@2) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@2) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@2)))
 :qid |GhostGuardsdfy.31:5|
 :skolemid |484|
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@2))
)) ($HeapSuccGhost $Heap $Heap)) (and (forall (($o@@3 T@U) ($f@@1 T@U) ) (!  (=> (and (or (not (= $o@@3 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@3) alloc)))) (or (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@3) $f@@1) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@3) $f@@1)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@3 $f@@1))))
 :qid |GhostGuardsdfy.31:5|
 :skolemid |485|
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@3) $f@@1))
)) (=> |g#0@3| |g#0@1|)))) (and (=> (= (ControlFlow 0 18) 5) anon67_LoopDone_correct) (=> (= (ControlFlow 0 18) 17) anon67_LoopBody_correct)))))
(let ((anon66_Else_correct  (=> (and |g#0@1| (= (ControlFlow 0 19) 18)) anon67_LoopHead_correct)))
(let ((anon65_Else_correct  (=> |$w$loop#0@0| (and (=> (= (ControlFlow 0 43) 42) anon66_Then_correct) (=> (= (ControlFlow 0 43) 19) anon66_Else_correct)))))
(let ((anon65_Then_correct true))
(let ((anon64_LoopBody_correct  (and (=> (= (ControlFlow 0 44) 4) anon65_Then_correct) (=> (= (ControlFlow 0 44) 43) anon65_Else_correct))))
(let ((anon64_LoopDone_correct true))
(let ((anon64_LoopHead_correct  (=> (not false) (=> (and (and (forall (($o@@4 T@U) ) (!  (=> (and (or (not (= $o@@4 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@4) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@4) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@4)))
 :qid |GhostGuardsdfy.28:3|
 :skolemid |482|
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@4))
)) ($HeapSuccGhost $Heap $Heap)) (and (forall (($o@@5 T@U) ($f@@2 T@U) ) (!  (=> (and (or (not (= $o@@5 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@5) alloc)))) (or (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@5) $f@@2) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@5) $f@@2)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@5 $f@@2))))
 :qid |GhostGuardsdfy.28:3|
 :skolemid |483|
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@5) $f@@2))
)) (=> |g#0@1| |g#0@0|))) (and (=> (= (ControlFlow 0 45) 3) anon64_LoopDone_correct) (=> (= (ControlFlow 0 45) 44) anon64_LoopBody_correct))))))
(let ((anon18_correct  (=> (= (ControlFlow 0 50) 45) anon64_LoopHead_correct)))
(let ((anon62_Then_correct  (=> (and |g#0@0| (= (ControlFlow 0 52) 50)) anon18_correct)))
(let ((anon61_Then_correct  (=> (and |x#0@0| (= (ControlFlow 0 51) 50)) anon18_correct)))
(let ((anon60_Then_correct  (=> |x#0@0| (and (and (=> (= (ControlFlow 0 53) 51) anon61_Then_correct) (=> (= (ControlFlow 0 53) 52) anon62_Then_correct)) (=> (= (ControlFlow 0 53) 49) anon62_Else_correct)))))
(let ((anon63_Then_correct  (=> (and |g#0@0| (= (ControlFlow 0 47) 45)) anon64_LoopHead_correct)))
(let ((anon59_Then_correct  (=> (= (ControlFlow 0 46) 45) anon64_LoopHead_correct)))
(let ((anon63_Else_correct  (=> (and (and (and (not (U_2_bool (Lit boolType (bool_2_U true)))) (not |x#0@0|)) (not |g#0@0|)) (= (ControlFlow 0 2) (- 0 1))) false)))
(let ((anon11_correct  (and (and (and (=> (= (ControlFlow 0 55) 46) anon59_Then_correct) (=> (= (ControlFlow 0 55) 53) anon60_Then_correct)) (=> (= (ControlFlow 0 55) 47) anon63_Then_correct)) (=> (= (ControlFlow 0 55) 2) anon63_Else_correct))))
(let ((anon10_correct  (=> (= (ControlFlow 0 57) 55) anon11_correct)))
(let ((anon9_correct  (=> (= (ControlFlow 0 59) 57) anon10_correct)))
(let ((anon58_Else_correct  (=> (and (not |g#0@0|) (= (ControlFlow 0 61) 59)) anon9_correct)))
(let ((anon58_Then_correct  (=> (and |g#0@0| (= (ControlFlow 0 60) 59)) anon9_correct)))
(let ((anon57_Else_correct  (=> (not |x#0@0|) (and (=> (= (ControlFlow 0 62) 60) anon58_Then_correct) (=> (= (ControlFlow 0 62) 61) anon58_Else_correct)))))
(let ((anon57_Then_correct  (=> (and |x#0@0| (= (ControlFlow 0 58) 57)) anon10_correct)))
(let ((anon56_Else_correct  (=> (not |g#0@0|) (and (=> (= (ControlFlow 0 63) 58) anon57_Then_correct) (=> (= (ControlFlow 0 63) 62) anon57_Else_correct)))))
(let ((anon56_Then_correct  (=> (and |g#0@0| (= (ControlFlow 0 56) 55)) anon11_correct)))
(let ((anon55_Else_correct  (=> (not |x#0@0|) (and (=> (= (ControlFlow 0 64) 56) anon56_Then_correct) (=> (= (ControlFlow 0 64) 63) anon56_Else_correct)))))
(let ((anon55_Then_correct  (=> |x#0@0| (and (and (and (=> (= (ControlFlow 0 54) 46) anon59_Then_correct) (=> (= (ControlFlow 0 54) 53) anon60_Then_correct)) (=> (= (ControlFlow 0 54) 47) anon63_Then_correct)) (=> (= (ControlFlow 0 54) 2) anon63_Else_correct)))))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (and (=> (= (ControlFlow 0 65) 54) anon55_Then_correct) (=> (= (ControlFlow 0 65) 64) anon55_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (=> (and (and ($Is DatatypeTypeType |d#0| Tclass._module.Dt) ($IsAlloc DatatypeTypeType |d#0| Tclass._module.Dt $Heap)) true) (=> (and (and (and ($Is DatatypeTypeType |h#0| Tclass._module.Dt) ($IsAlloc DatatypeTypeType |h#0| Tclass._module.Dt $Heap)) true) (and (= 1 $FunctionContextHeight) (= (ControlFlow 0 66) 65))) anon0_correct)))))
PreconditionGeneratedEntry_correct))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
