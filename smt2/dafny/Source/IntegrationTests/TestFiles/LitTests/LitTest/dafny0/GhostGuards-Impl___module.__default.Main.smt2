(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 (T@T) Int)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Bool) T@U)
(declare-fun $generated@@9 (T@U) Bool)
(declare-fun $generated@@10 (Int) T@U)
(declare-fun $generated@@11 (T@U) Int)
(declare-fun $generated@@12 (Real) T@U)
(declare-fun $generated@@13 (T@U) Real)
(declare-fun $generated@@20 (T@U) T@U)
(declare-fun $generated@@21 () T@U)
(declare-fun $generated@@22 () T@U)
(declare-fun $generated@@23 (T@T T@U T@U) Bool)
(declare-fun $generated@@24 () T@T)
(declare-fun $generated@@25 () T@U)
(declare-fun $generated@@26 (T@U T@U) Bool)
(declare-fun $generated@@27 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@28 () T@T)
(declare-fun $generated@@29 () T@T)
(declare-fun $generated@@30 () T@T)
(declare-fun $generated@@31 (T@T T@T) T@T)
(declare-fun $generated@@32 (T@T T@U) T@U)
(declare-fun $generated@@33 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@34 (T@T) T@T)
(declare-fun $generated@@35 (T@T) T@T)
(declare-fun $generated@@56 (T@T T@U) T@U)
(declare-fun $generated@@59 (T@T T@U) T@U)
(declare-fun $generated@@62 (T@U) Bool)
(declare-fun $generated@@63 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@69 (T@U T@U) Bool)
(declare-fun $generated@@79 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@80 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@81 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@113 (T@U) Bool)
(declare-fun $generated@@116 (T@U) T@U)
(declare-fun $generated@@117 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@4 $generated@@5) 0) (= ($generated@@4 $generated@@6) 1)) (= ($generated@@4 $generated@@7) 2)) (forall (($generated@@14 Bool) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Int) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Real) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3)
)
(assert (= ($generated@@20 $generated@@21) $generated@@1))
(assert (= ($generated@@20 $generated@@22) $generated@@2))
(assert (= ($generated@@4 $generated@@24) 3))
(assert ($generated@@23 $generated@@24 $generated@@21 $generated@@25))
(assert ($generated@@23 $generated@@24 $generated@@22 $generated@@25))
(assert  (and (and (and (and (and (and (and (forall (($generated@@36 T@T) ($generated@@37 T@T) ($generated@@38 T@U) ($generated@@39 T@U) ($generated@@40 T@U) ) (! (= ($generated@@27 $generated@@36 $generated@@37 ($generated@@33 $generated@@36 $generated@@37 $generated@@39 $generated@@40 $generated@@38) $generated@@40) $generated@@38)
 :weight 0
)) (forall (($generated@@41 T@T) ($generated@@42 T@T) ($generated@@43 T@U) ($generated@@44 T@U) ($generated@@45 T@U) ($generated@@46 T@U) ) (!  (or (= $generated@@45 $generated@@46) (= ($generated@@27 $generated@@41 $generated@@42 ($generated@@33 $generated@@41 $generated@@42 $generated@@44 $generated@@45 $generated@@43) $generated@@46) ($generated@@27 $generated@@41 $generated@@42 $generated@@44 $generated@@46)))
 :weight 0
))) (= ($generated@@4 $generated@@28) 4)) (= ($generated@@4 $generated@@29) 5)) (= ($generated@@4 $generated@@30) 6)) (forall (($generated@@47 T@T) ($generated@@48 T@T) ) (= ($generated@@4 ($generated@@31 $generated@@47 $generated@@48)) 7))) (forall (($generated@@49 T@T) ($generated@@50 T@T) ) (! (= ($generated@@34 ($generated@@31 $generated@@49 $generated@@50)) $generated@@49)
 :pattern ( ($generated@@31 $generated@@49 $generated@@50))
))) (forall (($generated@@51 T@T) ($generated@@52 T@T) ) (! (= ($generated@@35 ($generated@@31 $generated@@51 $generated@@52)) $generated@@52)
 :pattern ( ($generated@@31 $generated@@51 $generated@@52))
))))
(assert (forall (($generated@@53 T@U) ($generated@@54 T@U) ) (!  (=> ($generated@@26 $generated@@53 $generated@@54) (forall (($generated@@55 T@U) ) (!  (=> ($generated@@9 ($generated@@32 $generated@@5 ($generated@@27 $generated@@28 $generated@@29 ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@53 $generated@@55) $generated))) ($generated@@9 ($generated@@32 $generated@@5 ($generated@@27 $generated@@28 $generated@@29 ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@54 $generated@@55) $generated))))
 :pattern ( ($generated@@27 $generated@@28 $generated@@29 ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@54 $generated@@55) $generated))
)))
 :pattern ( ($generated@@26 $generated@@53 $generated@@54))
)))
(assert (forall (($generated@@57 T@U) ($generated@@58 T@T) ) (! (= ($generated@@56 $generated@@58 $generated@@57) $generated@@57)
 :pattern ( ($generated@@56 $generated@@58 $generated@@57))
)))
(assert (forall (($generated@@60 T@U) ($generated@@61 T@T) ) (! (= ($generated@@59 $generated@@61 ($generated@@32 $generated@@61 $generated@@60)) $generated@@60)
 :pattern ( ($generated@@32 $generated@@61 $generated@@60))
)))
(assert ($generated@@62 $generated))
(assert (forall (($generated@@64 T@U) ($generated@@65 T@U) ($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@T) ) (!  (=> ($generated@@26 $generated@@64 $generated@@65) (=> ($generated@@63 $generated@@68 $generated@@66 $generated@@67 $generated@@64) ($generated@@63 $generated@@68 $generated@@66 $generated@@67 $generated@@65)))
 :pattern ( ($generated@@26 $generated@@64 $generated@@65) ($generated@@63 $generated@@68 $generated@@66 $generated@@67 $generated@@64))
)))
(assert (forall (($generated@@70 T@U) ($generated@@71 T@U) ) (!  (=> ($generated@@69 $generated@@70 $generated@@71) (and ($generated@@26 $generated@@70 $generated@@71) (forall (($generated@@72 T@U) ($generated@@73 T@U) ) (!  (=> (not ($generated@@62 $generated@@73)) (= ($generated@@27 $generated@@28 $generated@@29 ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@70 $generated@@72) $generated@@73) ($generated@@27 $generated@@28 $generated@@29 ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@71 $generated@@72) $generated@@73)))
 :pattern ( ($generated@@27 $generated@@28 $generated@@29 ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@71 $generated@@72) $generated@@73))
))))
 :pattern ( ($generated@@69 $generated@@70 $generated@@71))
)))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@U) ) (!  (=> (or (not (= $generated@@74 $generated@@76)) (not true)) (=> (and ($generated@@26 $generated@@74 $generated@@75) ($generated@@26 $generated@@75 $generated@@76)) ($generated@@26 $generated@@74 $generated@@76)))
 :pattern ( ($generated@@26 $generated@@74 $generated@@75) ($generated@@26 $generated@@75 $generated@@76))
)))
(assert (forall (($generated@@77 T@U) ($generated@@78 T@T) ) (! (= ($generated@@32 $generated@@78 ($generated@@59 $generated@@78 $generated@@77)) $generated@@77)
 :pattern ( ($generated@@59 $generated@@78 $generated@@77))
)))
(assert  (and (forall (($generated@@82 T@T) ($generated@@83 T@T) ($generated@@84 T@T) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ) (! (= ($generated@@79 $generated@@82 $generated@@83 $generated@@84 ($generated@@81 $generated@@82 $generated@@83 $generated@@84 $generated@@86 $generated@@87 $generated@@88 $generated@@85) $generated@@87 $generated@@88) $generated@@85)
 :weight 0
)) (and (forall (($generated@@89 T@T) ($generated@@90 T@T) ($generated@@91 T@T) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (!  (or (= $generated@@94 $generated@@96) (= ($generated@@79 $generated@@89 $generated@@90 $generated@@91 ($generated@@81 $generated@@89 $generated@@90 $generated@@91 $generated@@93 $generated@@94 $generated@@95 $generated@@92) $generated@@96 $generated@@97) ($generated@@79 $generated@@89 $generated@@90 $generated@@91 $generated@@93 $generated@@96 $generated@@97)))
 :weight 0
)) (forall (($generated@@98 T@T) ($generated@@99 T@T) ($generated@@100 T@T) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or (= $generated@@104 $generated@@106) (= ($generated@@79 $generated@@98 $generated@@99 $generated@@100 ($generated@@81 $generated@@98 $generated@@99 $generated@@100 $generated@@102 $generated@@103 $generated@@104 $generated@@101) $generated@@105 $generated@@106) ($generated@@79 $generated@@98 $generated@@99 $generated@@100 $generated@@102 $generated@@105 $generated@@106)))
 :weight 0
)))))
(assert (forall (($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 Bool) ($generated@@111 T@U) ($generated@@112 T@U) ) (! (= ($generated@@9 ($generated@@79 $generated@@30 $generated@@28 $generated@@5 ($generated@@80 $generated@@107 $generated@@108 $generated@@109 $generated@@110) $generated@@111 $generated@@112))  (=> (and (or (not (= $generated@@111 $generated@@107)) (not true)) ($generated@@9 ($generated@@32 $generated@@5 ($generated@@27 $generated@@28 $generated@@29 ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@108 $generated@@111) $generated@@109)))) $generated@@110))
 :pattern ( ($generated@@79 $generated@@30 $generated@@28 $generated@@5 ($generated@@80 $generated@@107 $generated@@108 $generated@@109 $generated@@110) $generated@@111 $generated@@112))
)))
(assert (forall (($generated@@114 T@U) ($generated@@115 T@U) ) (!  (=> (and ($generated@@113 $generated@@115) ($generated@@23 $generated@@24 $generated@@114 $generated@@25)) ($generated@@63 $generated@@24 $generated@@114 $generated@@25 $generated@@115))
 :pattern ( ($generated@@63 $generated@@24 $generated@@114 $generated@@25 $generated@@115))
)))
(assert (= ($generated@@116 $generated@@25) $generated@@0))
(assert (= ($generated@@117 $generated@@25) $generated@@3))
(assert (= $generated@@21 ($generated@@56 $generated@@24 $generated@@21)))
(assert (= $generated@@22 ($generated@@56 $generated@@24 $generated@@22)))
(assert (forall (($generated@@118 T@U) ($generated@@119 T@T) ) (! (= ($generated@@59 $generated@@119 ($generated@@56 $generated@@119 $generated@@118)) ($generated@@56 $generated@@29 ($generated@@59 $generated@@119 $generated@@118)))
 :pattern ( ($generated@@59 $generated@@119 ($generated@@56 $generated@@119 $generated@@118)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@120 () Bool)
(declare-fun $generated@@121 () Bool)
(declare-fun $generated@@122 () Bool)
(declare-fun $generated@@123 () Bool)
(declare-fun $generated@@124 () Bool)
(declare-fun $generated@@125 () T@U)
(declare-fun $generated@@126 () T@U)
(declare-fun $generated@@127 () T@U)
(declare-fun $generated@@128 () Bool)
(declare-fun $generated@@129 () Bool)
(declare-fun $generated@@130 () T@U)
(declare-fun $generated@@131 () T@U)
(declare-fun $generated@@132 () Bool)
(declare-fun $generated@@133 () Bool)
(declare-fun $generated@@134 () Bool)
(declare-fun $generated@@135 () Bool)
(declare-fun $generated@@136 () Bool)
(declare-fun $generated@@137 () Bool)
(declare-fun $generated@@138 () Bool)
(declare-fun $generated@@139 (T@U) Bool)
(declare-fun $generated@@140 () T@U)
(declare-fun $generated@@141 () T@U)
(declare-fun $generated@@142 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 66) (let (($generated@@143  (=> (and (and (not $generated@@120) (not $generated@@121)) (= (ControlFlow 0 49) (- 0 48))) false)))
(let (($generated@@144  (=> (= (ControlFlow 0 35) (- 0 34)) (and (not $generated@@122) $generated@@123))))
(let (($generated@@145  (=> (and (and $generated@@123 (= $generated@@124 ($generated@@9 ($generated@@56 $generated@@5 ($generated@@8 false))))) (and (= $generated@@122 $generated@@124) (= (ControlFlow 0 37) 35))) $generated@@144)))
(let (($generated@@146  (=> ($generated@@9 ($generated@@56 $generated@@5 ($generated@@8 false))) (=> (and (= $generated@@122 $generated@@123) (= (ControlFlow 0 36) 35)) $generated@@144))))
(let (($generated@@147 true))
(let (($generated@@148 true))
(let (($generated@@149  (=> (or (not (= $generated@@125 $generated@@21)) (not true)) (and (=> (= (ControlFlow 0 26) 24) $generated@@148) (=> (= (ControlFlow 0 26) 25) $generated@@147)))))
(let (($generated@@150 true))
(let (($generated@@151  (and (=> (= (ControlFlow 0 27) 23) $generated@@150) (=> (= (ControlFlow 0 27) 26) $generated@@149))))
(let (($generated@@152  (=> (and (= $generated@@126 $generated@@22) (= (ControlFlow 0 29) 27)) $generated@@151)))
(let (($generated@@153  (=> (and (= $generated@@126 $generated@@21) (= (ControlFlow 0 28) 27)) $generated@@151)))
(let (($generated@@154 true))
(let (($generated@@155  (=> (or (not (= $generated@@126 $generated@@21)) (not true)) (and (=> (= (ControlFlow 0 30) 29) $generated@@152) (=> (= (ControlFlow 0 30) 22) $generated@@154)))))
(let (($generated@@156  (=> (and (and ($generated@@23 $generated@@24 $generated@@126 $generated@@25) ($generated@@63 $generated@@24 $generated@@126 $generated@@25 $generated@@127)) (and ($generated@@23 $generated@@24 $generated@@125 $generated@@25) ($generated@@63 $generated@@24 $generated@@125 $generated@@25 $generated@@127))) (and (=> (= (ControlFlow 0 31) 28) $generated@@153) (=> (= (ControlFlow 0 31) 30) $generated@@155)))))
(let (($generated@@157  (=> (and (and (not ($generated@@9 ($generated@@56 $generated@@5 ($generated@@8 false)))) (not $generated@@123)) (= (ControlFlow 0 33) 31)) $generated@@156)))
(let (($generated@@158  (=> ($generated@@9 ($generated@@56 $generated@@5 ($generated@@8 true))) (and (and (=> (= (ControlFlow 0 38) 36) $generated@@146) (=> (= (ControlFlow 0 38) 37) $generated@@145)) (=> (= (ControlFlow 0 38) 33) $generated@@157)))))
(let (($generated@@159  (=> (and (not ($generated@@9 ($generated@@56 $generated@@5 ($generated@@8 true)))) (= (ControlFlow 0 32) 31)) $generated@@156)))
(let (($generated@@160  (=> $generated@@128 (and (=> (= (ControlFlow 0 39) 32) $generated@@159) (=> (= (ControlFlow 0 39) 38) $generated@@158)))))
(let (($generated@@161 true))
(let (($generated@@162  (and (=> (= (ControlFlow 0 40) 21) $generated@@161) (=> (= (ControlFlow 0 40) 39) $generated@@160))))
(let (($generated@@163 true))
(let (($generated@@164  (=> (and (not false) $generated@@129) (=> (and (and (forall (($generated@@165 T@U) ) (!  (=> (and (or (not (= $generated@@165 $generated@@130)) (not true)) ($generated@@9 ($generated@@32 $generated@@5 ($generated@@27 $generated@@28 $generated@@29 ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@127 $generated@@165) $generated)))) (= ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@127 $generated@@165) ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@127 $generated@@165)))
 :pattern ( ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@127 $generated@@165))
)) ($generated@@69 $generated@@127 $generated@@127)) (and (forall (($generated@@166 T@U) ($generated@@167 T@U) ) (!  (=> (and (or (not (= $generated@@166 $generated@@130)) (not true)) ($generated@@9 ($generated@@32 $generated@@5 ($generated@@27 $generated@@28 $generated@@29 ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@127 $generated@@166) $generated)))) (or (= ($generated@@27 $generated@@28 $generated@@29 ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@127 $generated@@166) $generated@@167) ($generated@@27 $generated@@28 $generated@@29 ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@127 $generated@@166) $generated@@167)) ($generated@@9 ($generated@@79 $generated@@30 $generated@@28 $generated@@5 $generated@@131 $generated@@166 $generated@@167))))
 :pattern ( ($generated@@27 $generated@@28 $generated@@29 ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@127 $generated@@166) $generated@@167))
)) (=> $generated@@123 $generated@@132))) (and (=> (= (ControlFlow 0 41) 20) $generated@@163) (=> (= (ControlFlow 0 41) 40) $generated@@162))))))
(let (($generated@@168  (=> (and (not $generated@@133) (= (ControlFlow 0 42) 41)) $generated@@164)))
(let (($generated@@169  (=> (= (ControlFlow 0 12) (- 0 11)) (and (not $generated@@134) $generated@@135))))
(let (($generated@@170  (=> (and (and $generated@@135 (= $generated@@136 ($generated@@9 ($generated@@56 $generated@@5 ($generated@@8 false))))) (and (= $generated@@134 $generated@@136) (= (ControlFlow 0 14) 12))) $generated@@169)))
(let (($generated@@171  (=> ($generated@@9 ($generated@@56 $generated@@5 ($generated@@8 false))) (=> (and (= $generated@@134 $generated@@135) (= (ControlFlow 0 13) 12)) $generated@@169))))
(let (($generated@@172  (=> (and (= $generated@@137 ($generated@@9 ($generated@@56 $generated@@5 ($generated@@8 false)))) (= (ControlFlow 0 8) (- 0 7))) (and (not $generated@@137) $generated@@133))))
(let (($generated@@173  (=> (and (and (not ($generated@@9 ($generated@@56 $generated@@5 ($generated@@8 false)))) (not $generated@@135)) (= (ControlFlow 0 10) 8)) $generated@@172)))
(let (($generated@@174  (=> ($generated@@9 ($generated@@56 $generated@@5 ($generated@@8 true))) (and (and (=> (= (ControlFlow 0 15) 13) $generated@@171) (=> (= (ControlFlow 0 15) 14) $generated@@170)) (=> (= (ControlFlow 0 15) 10) $generated@@173)))))
(let (($generated@@175  (=> (and (not ($generated@@9 ($generated@@56 $generated@@5 ($generated@@8 true)))) (= (ControlFlow 0 9) 8)) $generated@@172)))
(let (($generated@@176  (=> $generated@@138 (and (=> (= (ControlFlow 0 16) 9) $generated@@175) (=> (= (ControlFlow 0 16) 15) $generated@@174)))))
(let (($generated@@177 true))
(let (($generated@@178  (and (=> (= (ControlFlow 0 17) 6) $generated@@177) (=> (= (ControlFlow 0 17) 16) $generated@@176))))
(let (($generated@@179 true))
(let (($generated@@180  (=> (and (and (and (and (not false) $generated@@129) $generated@@133) $generated@@133) (and (and (forall (($generated@@181 T@U) ) (!  (=> (and (or (not (= $generated@@181 $generated@@130)) (not true)) ($generated@@9 ($generated@@32 $generated@@5 ($generated@@27 $generated@@28 $generated@@29 ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@127 $generated@@181) $generated)))) (= ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@127 $generated@@181) ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@127 $generated@@181)))
 :pattern ( ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@127 $generated@@181))
)) ($generated@@69 $generated@@127 $generated@@127)) (and (forall (($generated@@182 T@U) ($generated@@183 T@U) ) (!  (=> (and (or (not (= $generated@@182 $generated@@130)) (not true)) ($generated@@9 ($generated@@32 $generated@@5 ($generated@@27 $generated@@28 $generated@@29 ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@127 $generated@@182) $generated)))) (or (= ($generated@@27 $generated@@28 $generated@@29 ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@127 $generated@@182) $generated@@183) ($generated@@27 $generated@@28 $generated@@29 ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@127 $generated@@182) $generated@@183)) ($generated@@9 ($generated@@79 $generated@@30 $generated@@28 $generated@@5 $generated@@131 $generated@@182 $generated@@183))))
 :pattern ( ($generated@@27 $generated@@28 $generated@@29 ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@127 $generated@@182) $generated@@183))
)) (=> $generated@@135 $generated@@133)))) (and (=> (= (ControlFlow 0 18) 5) $generated@@179) (=> (= (ControlFlow 0 18) 17) $generated@@178)))))
(let (($generated@@184  (=> (and $generated@@133 (= (ControlFlow 0 19) 18)) $generated@@180)))
(let (($generated@@185  (=> $generated@@129 (and (=> (= (ControlFlow 0 43) 42) $generated@@168) (=> (= (ControlFlow 0 43) 19) $generated@@184)))))
(let (($generated@@186 true))
(let (($generated@@187  (and (=> (= (ControlFlow 0 44) 4) $generated@@186) (=> (= (ControlFlow 0 44) 43) $generated@@185))))
(let (($generated@@188 true))
(let (($generated@@189  (=> (not false) (=> (and (and (forall (($generated@@190 T@U) ) (!  (=> (and (or (not (= $generated@@190 $generated@@130)) (not true)) ($generated@@9 ($generated@@32 $generated@@5 ($generated@@27 $generated@@28 $generated@@29 ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@127 $generated@@190) $generated)))) (= ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@127 $generated@@190) ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@127 $generated@@190)))
 :pattern ( ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@127 $generated@@190))
)) ($generated@@69 $generated@@127 $generated@@127)) (and (forall (($generated@@191 T@U) ($generated@@192 T@U) ) (!  (=> (and (or (not (= $generated@@191 $generated@@130)) (not true)) ($generated@@9 ($generated@@32 $generated@@5 ($generated@@27 $generated@@28 $generated@@29 ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@127 $generated@@191) $generated)))) (or (= ($generated@@27 $generated@@28 $generated@@29 ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@127 $generated@@191) $generated@@192) ($generated@@27 $generated@@28 $generated@@29 ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@127 $generated@@191) $generated@@192)) ($generated@@9 ($generated@@79 $generated@@30 $generated@@28 $generated@@5 $generated@@131 $generated@@191 $generated@@192))))
 :pattern ( ($generated@@27 $generated@@28 $generated@@29 ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@127 $generated@@191) $generated@@192))
)) (=> $generated@@133 $generated@@121))) (and (=> (= (ControlFlow 0 45) 3) $generated@@188) (=> (= (ControlFlow 0 45) 44) $generated@@187))))))
(let (($generated@@193  (=> (= (ControlFlow 0 50) 45) $generated@@189)))
(let (($generated@@194  (=> (and $generated@@121 (= (ControlFlow 0 52) 50)) $generated@@193)))
(let (($generated@@195  (=> (and $generated@@120 (= (ControlFlow 0 51) 50)) $generated@@193)))
(let (($generated@@196  (=> $generated@@120 (and (and (=> (= (ControlFlow 0 53) 51) $generated@@195) (=> (= (ControlFlow 0 53) 52) $generated@@194)) (=> (= (ControlFlow 0 53) 49) $generated@@143)))))
(let (($generated@@197  (=> (and $generated@@121 (= (ControlFlow 0 47) 45)) $generated@@189)))
(let (($generated@@198  (=> (= (ControlFlow 0 46) 45) $generated@@189)))
(let (($generated@@199  (=> (and (and (and (not ($generated@@9 ($generated@@56 $generated@@5 ($generated@@8 true)))) (not $generated@@120)) (not $generated@@121)) (= (ControlFlow 0 2) (- 0 1))) false)))
(let (($generated@@200  (and (and (and (=> (= (ControlFlow 0 55) 46) $generated@@198) (=> (= (ControlFlow 0 55) 53) $generated@@196)) (=> (= (ControlFlow 0 55) 47) $generated@@197)) (=> (= (ControlFlow 0 55) 2) $generated@@199))))
(let (($generated@@201  (=> (= (ControlFlow 0 57) 55) $generated@@200)))
(let (($generated@@202  (=> (= (ControlFlow 0 59) 57) $generated@@201)))
(let (($generated@@203  (=> (and (not $generated@@121) (= (ControlFlow 0 61) 59)) $generated@@202)))
(let (($generated@@204  (=> (and $generated@@121 (= (ControlFlow 0 60) 59)) $generated@@202)))
(let (($generated@@205  (=> (not $generated@@120) (and (=> (= (ControlFlow 0 62) 60) $generated@@204) (=> (= (ControlFlow 0 62) 61) $generated@@203)))))
(let (($generated@@206  (=> (and $generated@@120 (= (ControlFlow 0 58) 57)) $generated@@201)))
(let (($generated@@207  (=> (not $generated@@121) (and (=> (= (ControlFlow 0 63) 58) $generated@@206) (=> (= (ControlFlow 0 63) 62) $generated@@205)))))
(let (($generated@@208  (=> (and $generated@@121 (= (ControlFlow 0 56) 55)) $generated@@200)))
(let (($generated@@209  (=> (not $generated@@120) (and (=> (= (ControlFlow 0 64) 56) $generated@@208) (=> (= (ControlFlow 0 64) 63) $generated@@207)))))
(let (($generated@@210  (=> $generated@@120 (and (and (and (=> (= (ControlFlow 0 54) 46) $generated@@198) (=> (= (ControlFlow 0 54) 53) $generated@@196)) (=> (= (ControlFlow 0 54) 47) $generated@@197)) (=> (= (ControlFlow 0 54) 2) $generated@@199)))))
(let (($generated@@211  (=> (= $generated@@131 ($generated@@80 $generated@@130 $generated@@127 $generated false)) (and (=> (= (ControlFlow 0 65) 54) $generated@@210) (=> (= (ControlFlow 0 65) 64) $generated@@209)))))
(let (($generated@@212  (=> (and ($generated@@113 $generated@@127) ($generated@@139 $generated@@127)) (=> (and (and ($generated@@23 $generated@@24 $generated@@140 $generated@@25) ($generated@@63 $generated@@24 $generated@@140 $generated@@25 $generated@@127)) true) (=> (and (and (and ($generated@@23 $generated@@24 $generated@@141 $generated@@25) ($generated@@63 $generated@@24 $generated@@141 $generated@@25 $generated@@127)) true) (and (= 1 $generated@@142) (= (ControlFlow 0 66) 65))) $generated@@211)))))
$generated@@212))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
