(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (Bool) T@U)
(declare-fun $generated@@7 (T@U) Bool)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun $generated@@9 (T@U) Int)
(declare-fun $generated@@10 (Real) T@U)
(declare-fun $generated@@11 (T@U) Real)
(declare-fun $generated@@18 (T@U) T@U)
(declare-fun $generated@@19 (Int) Int)
(declare-fun $generated@@21 (T@T T@U) T@U)
(declare-fun $generated@@24 (T@T T@U) T@U)
(declare-fun $generated@@25 (T@T T@U) T@U)
(declare-fun $generated@@28 () Int)
(declare-fun $generated@@29 (T@U Int) Int)
(declare-fun $generated@@30 (T@U) T@U)
(declare-fun $generated@@31 (Int) Bool)
(declare-fun $generated@@34 (T@U Int) Int)
(declare-fun $generated@@35 (Int) Bool)
(declare-fun $generated@@38 (T@U) T@U)
(declare-fun $generated@@39 () T@U)
(declare-fun $generated@@54 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@55 () T@T)
(declare-fun $generated@@56 () T@T)
(declare-fun $generated@@57 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@58 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@59 () T@T)
(declare-fun $generated@@60 (T@T T@T) T@T)
(declare-fun $generated@@61 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@62 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@63 (T@T) T@T)
(declare-fun $generated@@64 (T@T) T@T)
(declare-fun $generated@@116 (T@T T@U T@U T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@4) 1)) (= ($generated@@2 $generated@@5) 2)) (forall (($generated@@12 Bool) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Int) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Real) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))))
(assert (distinct $generated $generated@@0 $generated@@1)
)
(assert (= ($generated@@18 $generated) $generated@@0))
(assert (forall (($generated@@20 Int) ) (! (= ($generated@@19 $generated@@20) $generated@@20)
 :pattern ( ($generated@@19 $generated@@20))
)))
(assert (forall (($generated@@22 T@U) ($generated@@23 T@T) ) (! (= ($generated@@21 $generated@@23 $generated@@22) $generated@@22)
 :pattern ( ($generated@@21 $generated@@23 $generated@@22))
)))
(assert (forall (($generated@@26 T@U) ($generated@@27 T@T) ) (! (= ($generated@@25 $generated@@27 ($generated@@24 $generated@@27 $generated@@26)) $generated@@26)
 :pattern ( ($generated@@24 $generated@@27 $generated@@26))
)))
(assert  (=> (<= 0 $generated@@28) (forall (($generated@@32 T@U) ($generated@@33 Int) ) (!  (=> (or ($generated@@31 $generated@@33) (< 0 $generated@@28)) (and (=> (<= 0 $generated@@33) ($generated@@31 (- $generated@@33 1))) (= ($generated@@29 ($generated@@30 $generated@@32) $generated@@33) (ite (< $generated@@33 0) 0 (+ 1 ($generated@@29 $generated@@32 (- $generated@@33 1)))))))
 :pattern ( ($generated@@29 ($generated@@30 $generated@@32) $generated@@33))
))))
(assert  (=> (<= 0 $generated@@28) (forall (($generated@@36 T@U) ($generated@@37 Int) ) (!  (=> (or ($generated@@35 $generated@@37) (< 0 $generated@@28)) (and (=> (>= 0 $generated@@37) ($generated@@35 (+ $generated@@37 1))) (= ($generated@@34 ($generated@@30 $generated@@36) $generated@@37) (ite (> $generated@@37 0) 0 (+ 1 ($generated@@34 $generated@@36 (+ $generated@@37 1)))))))
 :pattern ( ($generated@@34 ($generated@@30 $generated@@36) $generated@@37))
))))
(assert (forall (($generated@@40 T@U) ($generated@@41 Int) ) (! (= ($generated@@29 $generated@@40 $generated@@41) ($generated@@29 $generated@@39 $generated@@41))
 :pattern ( ($generated@@29 ($generated@@38 $generated@@40) $generated@@41))
)))
(assert (forall (($generated@@42 T@U) ($generated@@43 Int) ) (! (= ($generated@@34 $generated@@42 $generated@@43) ($generated@@34 $generated@@39 $generated@@43))
 :pattern ( ($generated@@34 ($generated@@38 $generated@@42) $generated@@43))
)))
(assert  (=> (<= 0 $generated@@28) (forall (($generated@@44 T@U) ($generated@@45 Int) ) (!  (=> (or ($generated@@31 ($generated@@19 $generated@@45)) (< 0 $generated@@28)) (and (=> (not ($generated@@7 ($generated@@21 $generated@@3 ($generated@@6 (< $generated@@45 0))))) ($generated@@31 ($generated@@19 (- $generated@@45 1)))) (= ($generated@@29 ($generated@@30 $generated@@44) ($generated@@19 $generated@@45)) (ite (< $generated@@45 0) 0 (+ 1 ($generated@@29 ($generated@@30 $generated@@44) ($generated@@19 (- $generated@@45 1))))))))
 :weight 3
 :pattern ( ($generated@@29 ($generated@@30 $generated@@44) ($generated@@19 $generated@@45)))
))))
(assert  (=> (<= 0 $generated@@28) (forall (($generated@@46 T@U) ($generated@@47 Int) ) (!  (=> (or ($generated@@35 ($generated@@19 $generated@@47)) (< 0 $generated@@28)) (and (=> (not ($generated@@7 ($generated@@21 $generated@@3 ($generated@@6 (> $generated@@47 0))))) ($generated@@35 ($generated@@19 (+ $generated@@47 1)))) (= ($generated@@34 ($generated@@30 $generated@@46) ($generated@@19 $generated@@47)) (ite (> $generated@@47 0) 0 (+ 1 ($generated@@34 ($generated@@30 $generated@@46) ($generated@@19 (+ $generated@@47 1))))))))
 :weight 3
 :pattern ( ($generated@@34 ($generated@@30 $generated@@46) ($generated@@19 $generated@@47)))
))))
(assert (forall (($generated@@48 T@U) ($generated@@49 T@T) ) (! (= ($generated@@24 $generated@@49 ($generated@@25 $generated@@49 $generated@@48)) $generated@@48)
 :pattern ( ($generated@@25 $generated@@49 $generated@@48))
)))
(assert (forall (($generated@@50 T@U) ($generated@@51 Int) ) (! (= ($generated@@29 ($generated@@30 $generated@@50) $generated@@51) ($generated@@29 $generated@@50 $generated@@51))
 :pattern ( ($generated@@29 ($generated@@30 $generated@@50) $generated@@51))
)))
(assert (forall (($generated@@52 T@U) ($generated@@53 Int) ) (! (= ($generated@@34 ($generated@@30 $generated@@52) $generated@@53) ($generated@@34 $generated@@52 $generated@@53))
 :pattern ( ($generated@@34 ($generated@@30 $generated@@52) $generated@@53))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@65 T@T) ($generated@@66 T@T) ($generated@@67 T@T) ($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@U) ) (! (= ($generated@@54 $generated@@65 $generated@@66 $generated@@67 ($generated@@61 $generated@@65 $generated@@66 $generated@@67 $generated@@69 $generated@@70 $generated@@71 $generated@@68) $generated@@70 $generated@@71) $generated@@68)
 :weight 0
)) (and (forall (($generated@@72 T@T) ($generated@@73 T@T) ($generated@@74 T@T) ($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ) (!  (or (= $generated@@77 $generated@@79) (= ($generated@@54 $generated@@72 $generated@@73 $generated@@74 ($generated@@61 $generated@@72 $generated@@73 $generated@@74 $generated@@76 $generated@@77 $generated@@78 $generated@@75) $generated@@79 $generated@@80) ($generated@@54 $generated@@72 $generated@@73 $generated@@74 $generated@@76 $generated@@79 $generated@@80)))
 :weight 0
)) (forall (($generated@@81 T@T) ($generated@@82 T@T) ($generated@@83 T@T) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ) (!  (or (= $generated@@87 $generated@@89) (= ($generated@@54 $generated@@81 $generated@@82 $generated@@83 ($generated@@61 $generated@@81 $generated@@82 $generated@@83 $generated@@85 $generated@@86 $generated@@87 $generated@@84) $generated@@88 $generated@@89) ($generated@@54 $generated@@81 $generated@@82 $generated@@83 $generated@@85 $generated@@88 $generated@@89)))
 :weight 0
)))) (= ($generated@@2 $generated@@55) 3)) (= ($generated@@2 $generated@@56) 4)) (forall (($generated@@90 T@T) ($generated@@91 T@T) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (! (= ($generated@@58 $generated@@90 $generated@@91 ($generated@@62 $generated@@90 $generated@@91 $generated@@93 $generated@@94 $generated@@92) $generated@@94) $generated@@92)
 :weight 0
))) (forall (($generated@@95 T@T) ($generated@@96 T@T) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ) (!  (or (= $generated@@99 $generated@@100) (= ($generated@@58 $generated@@95 $generated@@96 ($generated@@62 $generated@@95 $generated@@96 $generated@@98 $generated@@99 $generated@@97) $generated@@100) ($generated@@58 $generated@@95 $generated@@96 $generated@@98 $generated@@100)))
 :weight 0
))) (= ($generated@@2 $generated@@59) 5)) (forall (($generated@@101 T@T) ($generated@@102 T@T) ) (= ($generated@@2 ($generated@@60 $generated@@101 $generated@@102)) 6))) (forall (($generated@@103 T@T) ($generated@@104 T@T) ) (! (= ($generated@@63 ($generated@@60 $generated@@103 $generated@@104)) $generated@@103)
 :pattern ( ($generated@@60 $generated@@103 $generated@@104))
))) (forall (($generated@@105 T@T) ($generated@@106 T@T) ) (! (= ($generated@@64 ($generated@@60 $generated@@105 $generated@@106)) $generated@@106)
 :pattern ( ($generated@@60 $generated@@105 $generated@@106))
))))
(assert (forall (($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 Bool) ($generated@@111 T@U) ($generated@@112 T@U) ) (! (= ($generated@@7 ($generated@@54 $generated@@55 $generated@@56 $generated@@3 ($generated@@57 $generated@@107 $generated@@108 $generated@@109 $generated@@110) $generated@@111 $generated@@112))  (=> (and (or (not (= $generated@@111 $generated@@107)) (not true)) ($generated@@7 ($generated@@24 $generated@@3 ($generated@@58 $generated@@56 $generated@@59 ($generated@@58 $generated@@55 ($generated@@60 $generated@@56 $generated@@59) $generated@@108 $generated@@111) $generated@@109)))) $generated@@110))
 :pattern ( ($generated@@54 $generated@@55 $generated@@56 $generated@@3 ($generated@@57 $generated@@107 $generated@@108 $generated@@109 $generated@@110) $generated@@111 $generated@@112))
)))
(assert (forall (($generated@@113 Int) ) (! (= ($generated@@25 $generated@@4 ($generated@@8 ($generated@@19 $generated@@113))) ($generated@@21 $generated@@59 ($generated@@25 $generated@@4 ($generated@@8 $generated@@113))))
 :pattern ( ($generated@@25 $generated@@4 ($generated@@8 ($generated@@19 $generated@@113))))
)))
(assert (forall (($generated@@114 T@U) ($generated@@115 T@T) ) (! (= ($generated@@25 $generated@@115 ($generated@@21 $generated@@115 $generated@@114)) ($generated@@21 $generated@@59 ($generated@@25 $generated@@115 $generated@@114)))
 :pattern ( ($generated@@25 $generated@@115 ($generated@@21 $generated@@115 $generated@@114)))
)))
(assert (forall (($generated@@117 T@U) ($generated@@118 T@U) ) (! ($generated@@116 $generated@@4 $generated@@118 $generated $generated@@117)
 :pattern ( ($generated@@116 $generated@@4 $generated@@118 $generated $generated@@117))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@119 () T@U)
(declare-fun $generated@@120 () T@U)
(declare-fun $generated@@121 () T@U)
(declare-fun $generated@@122 () T@U)
(declare-fun $generated@@123 () T@U)
(declare-fun $generated@@124 () T@U)
(declare-fun $generated@@125 () T@U)
(declare-fun $generated@@126 () T@U)
(declare-fun $generated@@127 () T@U)
(declare-fun $generated@@128 () Int)
(declare-fun $generated@@129 () Int)
(declare-fun $generated@@130 () Int)
(declare-fun $generated@@131 () Int)
(declare-fun $generated@@132 (T@U) Bool)
(declare-fun $generated@@133 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 4) (let (($generated@@134  (=> (and (= $generated@@119 ($generated@@30 ($generated@@30 ($generated@@30 $generated@@120)))) (= $generated@@121 ($generated@@30 ($generated@@30 ($generated@@30 ($generated@@30 $generated@@120)))))) (=> (and (and (= ($generated@@38 $generated@@120) $generated@@120) (= $generated@@122 ($generated@@30 ($generated@@30 ($generated@@30 ($generated@@30 $generated@@123)))))) (and (= $generated@@124 ($generated@@30 ($generated@@30 ($generated@@30 ($generated@@30 ($generated@@30 $generated@@123)))))) (= ($generated@@38 $generated@@123) $generated@@123))) (=> (and (and (and (= $generated@@125 ($generated@@57 $generated@@126 $generated@@127 $generated@@1 false)) ($generated@@116 $generated@@4 ($generated@@8 $generated@@128) $generated $generated@@127)) (and ($generated@@31 $generated@@128) (= $generated@@129 (- $generated@@128 3)))) (and (and ($generated@@116 $generated@@4 ($generated@@8 $generated@@129) $generated $generated@@127) ($generated@@31 (- $generated@@128 3))) (and ($generated@@31 $generated@@128) ($generated@@31 (- $generated@@128 3))))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (= ($generated@@29 $generated@@121 $generated@@128) (+ 3 ($generated@@29 $generated@@121 (- $generated@@128 3))))) (=> (and (= ($generated@@29 $generated@@121 $generated@@128) (+ 3 ($generated@@29 $generated@@121 (- $generated@@128 3)))) ($generated@@116 $generated@@4 ($generated@@8 $generated@@130) $generated $generated@@127)) (=> (and (and (and ($generated@@35 $generated@@130) (= $generated@@131 (+ $generated@@130 3))) (and ($generated@@116 $generated@@4 ($generated@@8 $generated@@131) $generated $generated@@127) ($generated@@35 (+ $generated@@130 3)))) (and (and ($generated@@35 $generated@@130) ($generated@@35 (+ $generated@@130 3))) (= (ControlFlow 0 2) (- 0 1)))) (= ($generated@@34 $generated@@124 $generated@@130) (+ 3 ($generated@@34 $generated@@124 (+ $generated@@130 3))))))))))))
(let (($generated@@135  (=> (and ($generated@@132 $generated@@127) ($generated@@133 $generated@@127)) (=> (and (and (= 1 $generated@@28) (> $generated@@128 5)) (and (< $generated@@130 (- 0 5)) (= (ControlFlow 0 4) 2))) $generated@@134))))
$generated@@135)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
