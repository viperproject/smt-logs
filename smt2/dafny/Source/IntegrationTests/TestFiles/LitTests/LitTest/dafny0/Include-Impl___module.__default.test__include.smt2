(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (Bool) T@U)
(declare-fun $generated@@7 (T@U) Bool)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun $generated@@9 (T@U) Int)
(declare-fun $generated@@10 (Real) T@U)
(declare-fun $generated@@11 (T@U) Real)
(declare-fun $generated@@18 (T@U) T@U)
(declare-fun $generated@@19 (Int) Int)
(declare-fun $generated@@20 (Int) Int)
(declare-fun $generated@@21 (Int Int) Int)
(declare-fun $generated@@23 (T@U T@U) Bool)
(declare-fun $generated@@24 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@25 () T@T)
(declare-fun $generated@@26 () T@T)
(declare-fun $generated@@27 () T@T)
(declare-fun $generated@@28 (T@T T@T) T@T)
(declare-fun $generated@@29 (T@T T@U) T@U)
(declare-fun $generated@@30 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@31 (T@T) T@T)
(declare-fun $generated@@32 (T@T) T@T)
(declare-fun $generated@@54 (T@T T@U) T@U)
(declare-fun $generated@@57 (T@T T@U) T@U)
(declare-fun $generated@@60 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@71 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@72 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@73 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@4) 1)) (= ($generated@@2 $generated@@5) 2)) (forall (($generated@@12 Bool) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Int) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Real) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))))
(assert (distinct $generated $generated@@0 $generated@@1)
)
(assert (= ($generated@@18 $generated) $generated@@0))
(assert (forall (($generated@@22 Int) ) (! (= ($generated@@19 ($generated@@20 $generated@@22)) ($generated@@20 ($generated@@21 ($generated@@20 2) ($generated@@20 $generated@@22))))
 :weight 3
 :pattern ( ($generated@@19 ($generated@@20 $generated@@22)))
)))
(assert  (and (and (and (and (and (and (and (forall (($generated@@33 T@T) ($generated@@34 T@T) ($generated@@35 T@U) ($generated@@36 T@U) ($generated@@37 T@U) ) (! (= ($generated@@24 $generated@@33 $generated@@34 ($generated@@30 $generated@@33 $generated@@34 $generated@@36 $generated@@37 $generated@@35) $generated@@37) $generated@@35)
 :weight 0
)) (forall (($generated@@38 T@T) ($generated@@39 T@T) ($generated@@40 T@U) ($generated@@41 T@U) ($generated@@42 T@U) ($generated@@43 T@U) ) (!  (or (= $generated@@42 $generated@@43) (= ($generated@@24 $generated@@38 $generated@@39 ($generated@@30 $generated@@38 $generated@@39 $generated@@41 $generated@@42 $generated@@40) $generated@@43) ($generated@@24 $generated@@38 $generated@@39 $generated@@41 $generated@@43)))
 :weight 0
))) (= ($generated@@2 $generated@@25) 3)) (= ($generated@@2 $generated@@26) 4)) (= ($generated@@2 $generated@@27) 5)) (forall (($generated@@44 T@T) ($generated@@45 T@T) ) (= ($generated@@2 ($generated@@28 $generated@@44 $generated@@45)) 6))) (forall (($generated@@46 T@T) ($generated@@47 T@T) ) (! (= ($generated@@31 ($generated@@28 $generated@@46 $generated@@47)) $generated@@46)
 :pattern ( ($generated@@28 $generated@@46 $generated@@47))
))) (forall (($generated@@48 T@T) ($generated@@49 T@T) ) (! (= ($generated@@32 ($generated@@28 $generated@@48 $generated@@49)) $generated@@49)
 :pattern ( ($generated@@28 $generated@@48 $generated@@49))
))))
(assert (forall (($generated@@50 T@U) ($generated@@51 T@U) ) (!  (=> ($generated@@23 $generated@@50 $generated@@51) (forall (($generated@@52 T@U) ) (!  (=> ($generated@@7 ($generated@@29 $generated@@3 ($generated@@24 $generated@@25 $generated@@26 ($generated@@24 $generated@@27 ($generated@@28 $generated@@25 $generated@@26) $generated@@50 $generated@@52) $generated@@1))) ($generated@@7 ($generated@@29 $generated@@3 ($generated@@24 $generated@@25 $generated@@26 ($generated@@24 $generated@@27 ($generated@@28 $generated@@25 $generated@@26) $generated@@51 $generated@@52) $generated@@1))))
 :pattern ( ($generated@@24 $generated@@25 $generated@@26 ($generated@@24 $generated@@27 ($generated@@28 $generated@@25 $generated@@26) $generated@@51 $generated@@52) $generated@@1))
)))
 :pattern ( ($generated@@23 $generated@@50 $generated@@51))
)))
(assert (forall (($generated@@53 Int) ) (! (= ($generated@@20 $generated@@53) $generated@@53)
 :pattern ( ($generated@@20 $generated@@53))
)))
(assert (forall (($generated@@55 T@U) ($generated@@56 T@T) ) (! (= ($generated@@54 $generated@@56 $generated@@55) $generated@@55)
 :pattern ( ($generated@@54 $generated@@56 $generated@@55))
)))
(assert (forall (($generated@@58 T@U) ($generated@@59 T@T) ) (! (= ($generated@@57 $generated@@59 ($generated@@29 $generated@@59 $generated@@58)) $generated@@58)
 :pattern ( ($generated@@29 $generated@@59 $generated@@58))
)))
(assert (forall (($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@U) ($generated@@64 T@U) ($generated@@65 T@T) ) (!  (=> ($generated@@23 $generated@@61 $generated@@62) (=> ($generated@@60 $generated@@65 $generated@@63 $generated@@64 $generated@@61) ($generated@@60 $generated@@65 $generated@@63 $generated@@64 $generated@@62)))
 :pattern ( ($generated@@23 $generated@@61 $generated@@62) ($generated@@60 $generated@@65 $generated@@63 $generated@@64 $generated@@61))
)))
(assert (forall (($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ) (!  (=> (or (not (= $generated@@66 $generated@@68)) (not true)) (=> (and ($generated@@23 $generated@@66 $generated@@67) ($generated@@23 $generated@@67 $generated@@68)) ($generated@@23 $generated@@66 $generated@@68)))
 :pattern ( ($generated@@23 $generated@@66 $generated@@67) ($generated@@23 $generated@@67 $generated@@68))
)))
(assert (forall (($generated@@69 T@U) ($generated@@70 T@T) ) (! (= ($generated@@29 $generated@@70 ($generated@@57 $generated@@70 $generated@@69)) $generated@@69)
 :pattern ( ($generated@@57 $generated@@70 $generated@@69))
)))
(assert  (and (forall (($generated@@74 T@T) ($generated@@75 T@T) ($generated@@76 T@T) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ) (! (= ($generated@@71 $generated@@74 $generated@@75 $generated@@76 ($generated@@73 $generated@@74 $generated@@75 $generated@@76 $generated@@78 $generated@@79 $generated@@80 $generated@@77) $generated@@79 $generated@@80) $generated@@77)
 :weight 0
)) (and (forall (($generated@@81 T@T) ($generated@@82 T@T) ($generated@@83 T@T) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ) (!  (or (= $generated@@86 $generated@@88) (= ($generated@@71 $generated@@81 $generated@@82 $generated@@83 ($generated@@73 $generated@@81 $generated@@82 $generated@@83 $generated@@85 $generated@@86 $generated@@87 $generated@@84) $generated@@88 $generated@@89) ($generated@@71 $generated@@81 $generated@@82 $generated@@83 $generated@@85 $generated@@88 $generated@@89)))
 :weight 0
)) (forall (($generated@@90 T@T) ($generated@@91 T@T) ($generated@@92 T@T) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ) (!  (or (= $generated@@96 $generated@@98) (= ($generated@@71 $generated@@90 $generated@@91 $generated@@92 ($generated@@73 $generated@@90 $generated@@91 $generated@@92 $generated@@94 $generated@@95 $generated@@96 $generated@@93) $generated@@97 $generated@@98) ($generated@@71 $generated@@90 $generated@@91 $generated@@92 $generated@@94 $generated@@97 $generated@@98)))
 :weight 0
)))))
(assert (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 Bool) ($generated@@103 T@U) ($generated@@104 T@U) ) (! (= ($generated@@7 ($generated@@71 $generated@@27 $generated@@25 $generated@@3 ($generated@@72 $generated@@99 $generated@@100 $generated@@101 $generated@@102) $generated@@103 $generated@@104))  (=> (and (or (not (= $generated@@103 $generated@@99)) (not true)) ($generated@@7 ($generated@@29 $generated@@3 ($generated@@24 $generated@@25 $generated@@26 ($generated@@24 $generated@@27 ($generated@@28 $generated@@25 $generated@@26) $generated@@100 $generated@@103) $generated@@101)))) $generated@@102))
 :pattern ( ($generated@@71 $generated@@27 $generated@@25 $generated@@3 ($generated@@72 $generated@@99 $generated@@100 $generated@@101 $generated@@102) $generated@@103 $generated@@104))
)))
(assert (forall (($generated@@105 Int) ) (! (= ($generated@@19 $generated@@105) ($generated@@21 ($generated@@20 2) $generated@@105))
 :pattern ( ($generated@@19 $generated@@105))
)))
(assert (forall (($generated@@106 Int) ($generated@@107 Int) ) (! (= ($generated@@21 $generated@@106 $generated@@107) (* $generated@@106 $generated@@107))
 :pattern ( ($generated@@21 $generated@@106 $generated@@107))
)))
(assert (forall (($generated@@108 Int) ) (! (= ($generated@@57 $generated@@4 ($generated@@8 ($generated@@20 $generated@@108))) ($generated@@54 $generated@@26 ($generated@@57 $generated@@4 ($generated@@8 $generated@@108))))
 :pattern ( ($generated@@57 $generated@@4 ($generated@@8 ($generated@@20 $generated@@108))))
)))
(assert (forall (($generated@@109 T@U) ($generated@@110 T@T) ) (! (= ($generated@@57 $generated@@110 ($generated@@54 $generated@@110 $generated@@109)) ($generated@@54 $generated@@26 ($generated@@57 $generated@@110 $generated@@109)))
 :pattern ( ($generated@@57 $generated@@110 ($generated@@54 $generated@@110 $generated@@109)))
)))
(assert (forall (($generated@@111 T@U) ($generated@@112 T@U) ) (! ($generated@@60 $generated@@4 $generated@@112 $generated $generated@@111)
 :pattern ( ($generated@@60 $generated@@4 $generated@@112 $generated $generated@@111))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@113 () Int)
(declare-fun $generated@@114 () T@U)
(declare-fun $generated@@115 (Int) Bool)
(declare-fun $generated@@116 (T@U) Bool)
(declare-fun $generated@@117 () T@U)
(declare-fun $generated@@118 (T@U) Bool)
(declare-fun $generated@@119 () Int)
(declare-fun $generated@@120 () Int)
(declare-fun $generated@@121 () T@U)
(declare-fun $generated@@122 () T@U)
(declare-fun $generated@@123 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 6) (let (($generated@@124 true))
(let (($generated@@125  (=> ($generated@@60 $generated@@4 ($generated@@8 $generated@@113) $generated $generated@@114) (=> (and ($generated@@115 $generated@@113) (forall (($generated@@126 Int) ) (! ($generated@@115 $generated@@126)
 :pattern ( ($generated@@19 $generated@@126))
))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (forall (($generated@@127 Int) ) (! (= ($generated@@19 $generated@@127) ($generated@@21 ($generated@@20 2) $generated@@127))
 :pattern ( ($generated@@19 $generated@@127))
))) (=> (forall (($generated@@128 Int) ) (! (= ($generated@@19 $generated@@128) ($generated@@21 ($generated@@20 2) $generated@@128))
 :pattern ( ($generated@@19 $generated@@128))
)) (=> (and ($generated@@116 $generated@@117) ($generated@@118 $generated@@117)) (=> (and (and (= $generated@@119 ($generated@@21 ($generated@@20 2) $generated@@120)) (forall (($generated@@129 T@U) ) (!  (=> (and (or (not (= $generated@@129 $generated@@121)) (not true)) ($generated@@7 ($generated@@29 $generated@@3 ($generated@@24 $generated@@25 $generated@@26 ($generated@@24 $generated@@27 ($generated@@28 $generated@@25 $generated@@26) $generated@@114 $generated@@129) $generated@@1)))) (= ($generated@@24 $generated@@27 ($generated@@28 $generated@@25 $generated@@26) $generated@@117 $generated@@129) ($generated@@24 $generated@@27 ($generated@@28 $generated@@25 $generated@@26) $generated@@114 $generated@@129)))
 :pattern ( ($generated@@24 $generated@@27 ($generated@@28 $generated@@25 $generated@@26) $generated@@117 $generated@@129))
))) (and ($generated@@23 $generated@@114 $generated@@117) (= (ControlFlow 0 2) (- 0 1)))) (= $generated@@119 ($generated@@21 ($generated@@20 2) $generated@@120))))))))))
(let (($generated@@130  (=> (= $generated@@122 ($generated@@72 $generated@@121 $generated@@114 $generated@@1 false)) (and (=> (= (ControlFlow 0 5) 2) $generated@@125) (=> (= (ControlFlow 0 5) 4) $generated@@124)))))
(let (($generated@@131  (=> (and (and ($generated@@116 $generated@@114) ($generated@@118 $generated@@114)) (and (= 1 $generated@@123) (= (ControlFlow 0 6) 5))) $generated@@130)))
$generated@@131)))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
