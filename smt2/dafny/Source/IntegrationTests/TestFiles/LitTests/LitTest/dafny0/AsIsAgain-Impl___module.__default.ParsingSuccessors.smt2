(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun alloc () T@U)
(declare-fun Tagclass._module.TraitA () T@U)
(declare-fun Tagclass._module.ClassQ () T@U)
(declare-fun Tagclass._module.TraitA? () T@U)
(declare-fun Tagclass._module.ClassQ? () T@U)
(declare-fun tytagFamily$TraitA () T@U)
(declare-fun tytagFamily$ClassQ () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun implements$_module.TraitA (T@U T@U) Bool)
(declare-fun Tclass._module.ClassQ? (T@U) T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun Tclass._module.TraitA (T@U) T@U)
(declare-fun Tclass._module.TraitA? (T@U) T@U)
(declare-fun Tclass._module.ClassQ (T@U) T@U)
(declare-fun null () T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun Tclass._module.TraitA_0 (T@U) T@U)
(declare-fun Tclass._module.ClassQ_0 (T@U) T@U)
(declare-fun Tclass._module.TraitA?_0 (T@U) T@U)
(declare-fun Tclass._module.ClassQ?_0 (T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct alloc Tagclass._module.TraitA Tagclass._module.ClassQ Tagclass._module.TraitA? Tagclass._module.ClassQ? tytagFamily$TraitA tytagFamily$ClassQ)
)
(assert (forall ((_module.ClassQ$Y T@U) ) (implements$_module.TraitA (Tclass._module.ClassQ? _module.ClassQ$Y) _module.ClassQ$Y)))
(assert (= (Ctor refType) 3))
(assert (forall ((_module.TraitA$X T@U) (|c#0| T@U) ($h T@U) ) (! (= ($IsAlloc refType |c#0| (Tclass._module.TraitA _module.TraitA$X) $h) ($IsAlloc refType |c#0| (Tclass._module.TraitA? _module.TraitA$X) $h))
 :pattern ( ($IsAlloc refType |c#0| (Tclass._module.TraitA _module.TraitA$X) $h))
 :pattern ( ($IsAlloc refType |c#0| (Tclass._module.TraitA? _module.TraitA$X) $h))
)))
(assert (forall ((_module.ClassQ$Y@@0 T@U) (|c#0@@0| T@U) ($h@@0 T@U) ) (! (= ($IsAlloc refType |c#0@@0| (Tclass._module.ClassQ _module.ClassQ$Y@@0) $h@@0) ($IsAlloc refType |c#0@@0| (Tclass._module.ClassQ? _module.ClassQ$Y@@0) $h@@0))
 :pattern ( ($IsAlloc refType |c#0@@0| (Tclass._module.ClassQ _module.ClassQ$Y@@0) $h@@0))
 :pattern ( ($IsAlloc refType |c#0@@0| (Tclass._module.ClassQ? _module.ClassQ$Y@@0) $h@@0))
)))
(assert  (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 4)) (= (Ctor BoxType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 6))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((_module.TraitA$X@@0 T@U) ($o T@U) ($h@@1 T@U) ) (! (= ($IsAlloc refType $o (Tclass._module.TraitA? _module.TraitA$X@@0) $h@@1)  (or (= $o null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@1 $o) alloc)))))
 :pattern ( ($IsAlloc refType $o (Tclass._module.TraitA? _module.TraitA$X@@0) $h@@1))
)))
(assert (forall ((_module.ClassQ$Y@@1 T@U) ($o@@0 T@U) ($h@@2 T@U) ) (! (= ($IsAlloc refType $o@@0 (Tclass._module.ClassQ? _module.ClassQ$Y@@1) $h@@2)  (or (= $o@@0 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o@@0) alloc)))))
 :pattern ( ($IsAlloc refType $o@@0 (Tclass._module.ClassQ? _module.ClassQ$Y@@1) $h@@2))
)))
(assert (forall ((_module.ClassQ$Y@@2 T@U) ($o@@1 T@U) ) (!  (=> ($Is refType $o@@1 (Tclass._module.ClassQ? _module.ClassQ$Y@@2)) ($Is refType $o@@1 (Tclass._module.TraitA? _module.ClassQ$Y@@2)))
 :pattern ( ($Is refType $o@@1 (Tclass._module.ClassQ? _module.ClassQ$Y@@2)))
)))
(assert (forall ((x@@2 T@U) (T T@T) ) (! (= ($Box T ($Unbox T x@@2)) x@@2)
 :pattern ( ($Unbox T x@@2))
)))
(assert (forall ((_module.TraitA$X@@1 T@U) (|c#0@@1| T@U) ) (! (= ($Is refType |c#0@@1| (Tclass._module.TraitA _module.TraitA$X@@1))  (and ($Is refType |c#0@@1| (Tclass._module.TraitA? _module.TraitA$X@@1)) (or (not (= |c#0@@1| null)) (not true))))
 :pattern ( ($Is refType |c#0@@1| (Tclass._module.TraitA _module.TraitA$X@@1)))
 :pattern ( ($Is refType |c#0@@1| (Tclass._module.TraitA? _module.TraitA$X@@1)))
)))
(assert (forall ((_module.ClassQ$Y@@3 T@U) (|c#0@@2| T@U) ) (! (= ($Is refType |c#0@@2| (Tclass._module.ClassQ _module.ClassQ$Y@@3))  (and ($Is refType |c#0@@2| (Tclass._module.ClassQ? _module.ClassQ$Y@@3)) (or (not (= |c#0@@2| null)) (not true))))
 :pattern ( ($Is refType |c#0@@2| (Tclass._module.ClassQ _module.ClassQ$Y@@3)))
 :pattern ( ($Is refType |c#0@@2| (Tclass._module.ClassQ? _module.ClassQ$Y@@3)))
)))
(assert (forall ((_module.TraitA$X@@2 T@U) ) (!  (and (= (Tag (Tclass._module.TraitA _module.TraitA$X@@2)) Tagclass._module.TraitA) (= (TagFamily (Tclass._module.TraitA _module.TraitA$X@@2)) tytagFamily$TraitA))
 :pattern ( (Tclass._module.TraitA _module.TraitA$X@@2))
)))
(assert (forall ((_module.ClassQ$Y@@4 T@U) ) (!  (and (= (Tag (Tclass._module.ClassQ _module.ClassQ$Y@@4)) Tagclass._module.ClassQ) (= (TagFamily (Tclass._module.ClassQ _module.ClassQ$Y@@4)) tytagFamily$ClassQ))
 :pattern ( (Tclass._module.ClassQ _module.ClassQ$Y@@4))
)))
(assert (forall ((_module.TraitA$X@@3 T@U) ) (!  (and (= (Tag (Tclass._module.TraitA? _module.TraitA$X@@3)) Tagclass._module.TraitA?) (= (TagFamily (Tclass._module.TraitA? _module.TraitA$X@@3)) tytagFamily$TraitA))
 :pattern ( (Tclass._module.TraitA? _module.TraitA$X@@3))
)))
(assert (forall ((_module.ClassQ$Y@@5 T@U) ) (!  (and (= (Tag (Tclass._module.ClassQ? _module.ClassQ$Y@@5)) Tagclass._module.ClassQ?) (= (TagFamily (Tclass._module.ClassQ? _module.ClassQ$Y@@5)) tytagFamily$ClassQ))
 :pattern ( (Tclass._module.ClassQ? _module.ClassQ$Y@@5))
)))
(assert (forall ((_module.ClassQ$Y@@6 T@U) ($o@@2 T@U) ) (! (= ($Is refType $o@@2 (Tclass._module.ClassQ? _module.ClassQ$Y@@6))  (or (= $o@@2 null) (= (dtype $o@@2) (Tclass._module.ClassQ? _module.ClassQ$Y@@6))))
 :pattern ( ($Is refType $o@@2 (Tclass._module.ClassQ? _module.ClassQ$Y@@6)))
)))
(assert (forall ((_module.ClassQ$Y@@7 T@U) ($o@@3 T@U) ($heap T@U) ) (!  (=> ($IsAlloc refType $o@@3 (Tclass._module.ClassQ? _module.ClassQ$Y@@7) $heap) ($IsAlloc refType $o@@3 (Tclass._module.TraitA? _module.ClassQ$Y@@7) $heap))
 :pattern ( ($IsAlloc refType $o@@3 (Tclass._module.ClassQ? _module.ClassQ$Y@@7) $heap))
)))
(assert (forall ((_module.TraitA$X@@4 T@U) ) (! (= (Tclass._module.TraitA_0 (Tclass._module.TraitA _module.TraitA$X@@4)) _module.TraitA$X@@4)
 :pattern ( (Tclass._module.TraitA _module.TraitA$X@@4))
)))
(assert (forall ((_module.ClassQ$Y@@8 T@U) ) (! (= (Tclass._module.ClassQ_0 (Tclass._module.ClassQ _module.ClassQ$Y@@8)) _module.ClassQ$Y@@8)
 :pattern ( (Tclass._module.ClassQ _module.ClassQ$Y@@8))
)))
(assert (forall ((_module.TraitA$X@@5 T@U) ) (! (= (Tclass._module.TraitA?_0 (Tclass._module.TraitA? _module.TraitA$X@@5)) _module.TraitA$X@@5)
 :pattern ( (Tclass._module.TraitA? _module.TraitA$X@@5))
)))
(assert (forall ((_module.ClassQ$Y@@9 T@U) ) (! (= (Tclass._module.ClassQ?_0 (Tclass._module.ClassQ? _module.ClassQ$Y@@9)) _module.ClassQ$Y@@9)
 :pattern ( (Tclass._module.ClassQ? _module.ClassQ$Y@@9))
)))
(assert (forall ((x@@3 T@U) (T@@0 T@T) ) (! (= ($Unbox T@@0 ($Box T@@0 x@@3)) x@@3)
 :pattern ( ($Box T@@0 x@@3))
)))
(assert (forall ((_module.TraitA$X@@6 T@U) ($o@@4 T@U) ) (! (= ($Is refType $o@@4 (Tclass._module.TraitA? _module.TraitA$X@@6))  (or (= $o@@4 null) (implements$_module.TraitA (dtype $o@@4) _module.TraitA$X@@6)))
 :pattern ( ($Is refType $o@@4 (Tclass._module.TraitA? _module.TraitA$X@@6)))
)))
(assert  (and (forall ((t0@@0 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 t2 (MapType1Store t0@@0 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o@@5 T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@5 $f))  (=> (and (or (not (= $o@@5 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@5) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@5 $f))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |b#0@5| () Bool)
(declare-fun |t#0| () T@U)
(declare-fun _module._default.ParsingSuccessors$U () T@U)
(declare-fun |b#0@6| () Bool)
(declare-fun |b#0@4| () Bool)
(declare-fun |b#0@3| () Bool)
(declare-fun |b#0@2| () Bool)
(declare-fun |b#0@1| () Bool)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun $Heap () T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun $FunctionContextHeight () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 18) (let ((anon11_correct  (=> (= |b#0@5|  (=> ($Is refType |t#0| (Tclass._module.ClassQ _module._default.ParsingSuccessors$U)) ($Is refType |t#0| (Tclass._module.ClassQ _module._default.ParsingSuccessors$U)))) (=> (and (= |b#0@6| (= ($Is refType |t#0| (Tclass._module.ClassQ _module._default.ParsingSuccessors$U)) ($Is refType |t#0| (Tclass._module.ClassQ _module._default.ParsingSuccessors$U)))) (= (ControlFlow 0 2) (- 0 1))) |b#0@6|))))
(let ((anon16_Else_correct  (=> (and (not ($Is refType |t#0| (Tclass._module.ClassQ _module._default.ParsingSuccessors$U))) (= (ControlFlow 0 4) 2)) anon11_correct)))
(let ((anon16_Then_correct  (=> (and ($Is refType |t#0| (Tclass._module.ClassQ _module._default.ParsingSuccessors$U)) (= (ControlFlow 0 3) 2)) anon11_correct)))
(let ((anon9_correct  (=> (= |b#0@4|  (=> ($Is refType |t#0| (Tclass._module.ClassQ _module._default.ParsingSuccessors$U)) ($Is refType |t#0| (Tclass._module.ClassQ _module._default.ParsingSuccessors$U)))) (and (=> (= (ControlFlow 0 5) 3) anon16_Then_correct) (=> (= (ControlFlow 0 5) 4) anon16_Else_correct)))))
(let ((anon15_Else_correct  (=> (and (not ($Is refType |t#0| (Tclass._module.ClassQ _module._default.ParsingSuccessors$U))) (= (ControlFlow 0 7) 5)) anon9_correct)))
(let ((anon15_Then_correct  (=> (and ($Is refType |t#0| (Tclass._module.ClassQ _module._default.ParsingSuccessors$U)) (= (ControlFlow 0 6) 5)) anon9_correct)))
(let ((anon7_correct  (=> (= |b#0@3|  (or ($Is refType |t#0| (Tclass._module.ClassQ _module._default.ParsingSuccessors$U)) ($Is refType |t#0| (Tclass._module.ClassQ _module._default.ParsingSuccessors$U)))) (and (=> (= (ControlFlow 0 8) 6) anon15_Then_correct) (=> (= (ControlFlow 0 8) 7) anon15_Else_correct)))))
(let ((anon14_Else_correct  (=> (and ($Is refType |t#0| (Tclass._module.ClassQ _module._default.ParsingSuccessors$U)) (= (ControlFlow 0 10) 8)) anon7_correct)))
(let ((anon14_Then_correct  (=> (and (not ($Is refType |t#0| (Tclass._module.ClassQ _module._default.ParsingSuccessors$U))) (= (ControlFlow 0 9) 8)) anon7_correct)))
(let ((anon5_correct  (=> (= |b#0@2|  (and ($Is refType |t#0| (Tclass._module.ClassQ _module._default.ParsingSuccessors$U)) ($Is refType |t#0| (Tclass._module.ClassQ _module._default.ParsingSuccessors$U)))) (and (=> (= (ControlFlow 0 11) 9) anon14_Then_correct) (=> (= (ControlFlow 0 11) 10) anon14_Else_correct)))))
(let ((anon13_Else_correct  (=> (and (not ($Is refType |t#0| (Tclass._module.ClassQ _module._default.ParsingSuccessors$U))) (= (ControlFlow 0 13) 11)) anon5_correct)))
(let ((anon13_Then_correct  (=> (and ($Is refType |t#0| (Tclass._module.ClassQ _module._default.ParsingSuccessors$U)) (= (ControlFlow 0 12) 11)) anon5_correct)))
(let ((anon3_correct  (=> (= |b#0@1| (ite ($Is refType |t#0| (Tclass._module.ClassQ _module._default.ParsingSuccessors$U)) true false)) (and (=> (= (ControlFlow 0 14) 12) anon13_Then_correct) (=> (= (ControlFlow 0 14) 13) anon13_Else_correct)))))
(let ((anon12_Else_correct  (=> (and (not ($Is refType |t#0| (Tclass._module.ClassQ _module._default.ParsingSuccessors$U))) (= (ControlFlow 0 16) 14)) anon3_correct)))
(let ((anon12_Then_correct  (=> (and ($Is refType |t#0| (Tclass._module.ClassQ _module._default.ParsingSuccessors$U)) (= (ControlFlow 0 15) 14)) anon3_correct)))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (and (=> (= (ControlFlow 0 17) 15) anon12_Then_correct) (=> (= (ControlFlow 0 17) 16) anon12_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (=> (and (and ($Is refType |t#0| (Tclass._module.TraitA _module._default.ParsingSuccessors$U)) ($IsAlloc refType |t#0| (Tclass._module.TraitA _module._default.ParsingSuccessors$U) $Heap)) (and (= 1 $FunctionContextHeight) (= (ControlFlow 0 18) 17))) anon0_correct))))
PreconditionGeneratedEntry_correct))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
