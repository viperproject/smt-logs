(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@20 () T@U)
(declare-fun $generated@@23 (T@U) Int)
(declare-fun $generated@@24 () T@U)
(declare-fun $generated@@25 (T@U Int) T@U)
(declare-fun $generated@@26 (T@U Int T@U) T@U)
(declare-fun $generated@@31 (Int) Int)
(declare-fun $generated@@33 (T@T T@U) T@U)
(declare-fun $generated@@36 (T@T T@U T@U) Bool)
(declare-fun $generated@@37 () T@T)
(declare-fun $generated@@38 (T@U T@U) T@U)
(declare-fun $generated@@39 (T@U) T@U)
(declare-fun $generated@@40 (T@U T@U) Bool)
(declare-fun $generated@@44 (T@T T@U) T@U)
(declare-fun $generated@@45 (T@T T@U) T@U)
(declare-fun $generated@@51 (T@U T@U T@U) Bool)
(declare-fun $generated@@68 (T@U) T@U)
(declare-fun $generated@@70 (T@U) T@U)
(declare-fun $generated@@74 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@75 () T@T)
(declare-fun $generated@@76 () T@T)
(declare-fun $generated@@77 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@78 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@79 () T@T)
(declare-fun $generated@@80 (T@T T@T) T@T)
(declare-fun $generated@@81 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@82 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@83 (T@T) T@T)
(declare-fun $generated@@84 (T@T) T@T)
(declare-fun $generated@@136 (T@U) T@U)
(declare-fun $generated@@137 (T@U) T@U)
(declare-fun $generated@@142 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (forall (($generated@@21 T@U) ($generated@@22 T@U) ) (! ($generated@@19 $generated@@5 $generated@@21 $generated@@20 $generated@@22)
 :pattern ( ($generated@@19 $generated@@5 $generated@@21 $generated@@20 $generated@@22))
)))
(assert (= ($generated@@23 $generated@@24) 0))
(assert (forall (($generated@@27 T@U) ($generated@@28 Int) ($generated@@29 T@U) ($generated@@30 Int) ) (!  (=> (and (<= 0 $generated@@30) (< $generated@@30 ($generated@@23 $generated@@27))) (and (=> (= $generated@@28 $generated@@30) (= ($generated@@25 ($generated@@26 $generated@@27 $generated@@28 $generated@@29) $generated@@30) $generated@@29)) (=> (or (not (= $generated@@28 $generated@@30)) (not true)) (= ($generated@@25 ($generated@@26 $generated@@27 $generated@@28 $generated@@29) $generated@@30) ($generated@@25 $generated@@27 $generated@@30)))))
 :pattern ( ($generated@@25 ($generated@@26 $generated@@27 $generated@@28 $generated@@29) $generated@@30))
)))
(assert (forall (($generated@@32 Int) ) (! (= ($generated@@31 $generated@@32) $generated@@32)
 :pattern ( ($generated@@31 $generated@@32))
)))
(assert (forall (($generated@@34 T@U) ($generated@@35 T@T) ) (! (= ($generated@@33 $generated@@35 $generated@@34) $generated@@34)
 :pattern ( ($generated@@33 $generated@@35 $generated@@34))
)))
(assert (= ($generated@@3 $generated@@37) 3))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ($generated@@43 T@U) ) (!  (=> (and ($generated@@36 $generated@@37 $generated@@41 ($generated@@39 $generated@@43)) ($generated@@40 $generated@@42 $generated@@43)) ($generated@@36 $generated@@37 ($generated@@38 $generated@@41 $generated@@42) ($generated@@39 $generated@@43)))
 :pattern ( ($generated@@36 $generated@@37 ($generated@@38 $generated@@41 $generated@@42) ($generated@@39 $generated@@43)))
)))
(assert (forall (($generated@@46 T@U) ($generated@@47 T@T) ) (! (= ($generated@@45 $generated@@47 ($generated@@44 $generated@@47 $generated@@46)) $generated@@46)
 :pattern ( ($generated@@44 $generated@@47 $generated@@46))
)))
(assert (forall (($generated@@48 T@U) ) (! (= ($generated@@36 $generated@@5 $generated@@48 $generated@@20) (<= ($generated@@31 0) ($generated@@10 $generated@@48)))
 :pattern ( ($generated@@36 $generated@@5 $generated@@48 $generated@@20))
)))
(assert (forall (($generated@@49 T@U) ($generated@@50 T@U) ) (! (= ($generated@@23 ($generated@@38 $generated@@49 $generated@@50)) (+ 1 ($generated@@23 $generated@@49)))
 :pattern ( ($generated@@38 $generated@@49 $generated@@50))
)))
(assert (forall (($generated@@52 T@U) ($generated@@53 T@U) ($generated@@54 T@U) ($generated@@55 T@T) ) (! (= ($generated@@51 ($generated@@45 $generated@@55 $generated@@52) $generated@@53 $generated@@54) ($generated@@19 $generated@@55 $generated@@52 $generated@@53 $generated@@54))
 :pattern ( ($generated@@51 ($generated@@45 $generated@@55 $generated@@52) $generated@@53 $generated@@54))
)))
(assert (forall (($generated@@56 T@U) ) (!  (=> ($generated@@40 $generated@@56 $generated@@20) (and (= ($generated@@45 $generated@@5 ($generated@@44 $generated@@5 $generated@@56)) $generated@@56) ($generated@@36 $generated@@5 ($generated@@44 $generated@@5 $generated@@56) $generated@@20)))
 :pattern ( ($generated@@40 $generated@@56 $generated@@20))
)))
(assert (forall (($generated@@57 T@U) ($generated@@58 Int) ($generated@@59 T@U) ) (!  (and (=> (= $generated@@58 ($generated@@23 $generated@@57)) (= ($generated@@25 ($generated@@38 $generated@@57 $generated@@59) $generated@@58) $generated@@59)) (=> (or (not (= $generated@@58 ($generated@@23 $generated@@57))) (not true)) (= ($generated@@25 ($generated@@38 $generated@@57 $generated@@59) $generated@@58) ($generated@@25 $generated@@57 $generated@@58))))
 :pattern ( ($generated@@25 ($generated@@38 $generated@@57 $generated@@59) $generated@@58))
)))
(assert (forall (($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@T) ) (! (= ($generated@@40 ($generated@@45 $generated@@62 $generated@@60) $generated@@61) ($generated@@36 $generated@@62 $generated@@60 $generated@@61))
 :pattern ( ($generated@@40 ($generated@@45 $generated@@62 $generated@@60) $generated@@61))
)))
(assert (forall (($generated@@63 T@U) ) (! (<= 0 ($generated@@23 $generated@@63))
 :pattern ( ($generated@@23 $generated@@63))
)))
(assert (forall (($generated@@64 T@U) ($generated@@65 T@U) ($generated@@66 T@U) ) (! (= ($generated@@19 $generated@@37 $generated@@64 ($generated@@39 $generated@@65) $generated@@66) (forall (($generated@@67 Int) ) (!  (=> (and (<= 0 $generated@@67) (< $generated@@67 ($generated@@23 $generated@@64))) ($generated@@51 ($generated@@25 $generated@@64 $generated@@67) $generated@@65 $generated@@66))
 :pattern ( ($generated@@25 $generated@@64 $generated@@67))
)))
 :pattern ( ($generated@@19 $generated@@37 $generated@@64 ($generated@@39 $generated@@65) $generated@@66))
)))
(assert (forall (($generated@@69 T@U) ) (! (= ($generated@@68 ($generated@@39 $generated@@69)) $generated@@69)
 :pattern ( ($generated@@39 $generated@@69))
)))
(assert (forall (($generated@@71 T@U) ) (! (= ($generated@@70 ($generated@@39 $generated@@71)) $generated)
 :pattern ( ($generated@@39 $generated@@71))
)))
(assert (forall (($generated@@72 T@U) ($generated@@73 T@T) ) (! (= ($generated@@44 $generated@@73 ($generated@@45 $generated@@73 $generated@@72)) $generated@@72)
 :pattern ( ($generated@@45 $generated@@73 $generated@@72))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@85 T@T) ($generated@@86 T@T) ($generated@@87 T@T) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ) (! (= ($generated@@74 $generated@@85 $generated@@86 $generated@@87 ($generated@@81 $generated@@85 $generated@@86 $generated@@87 $generated@@89 $generated@@90 $generated@@91 $generated@@88) $generated@@90 $generated@@91) $generated@@88)
 :weight 0
)) (and (forall (($generated@@92 T@T) ($generated@@93 T@T) ($generated@@94 T@T) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ) (!  (or (= $generated@@97 $generated@@99) (= ($generated@@74 $generated@@92 $generated@@93 $generated@@94 ($generated@@81 $generated@@92 $generated@@93 $generated@@94 $generated@@96 $generated@@97 $generated@@98 $generated@@95) $generated@@99 $generated@@100) ($generated@@74 $generated@@92 $generated@@93 $generated@@94 $generated@@96 $generated@@99 $generated@@100)))
 :weight 0
)) (forall (($generated@@101 T@T) ($generated@@102 T@T) ($generated@@103 T@T) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ) (!  (or (= $generated@@107 $generated@@109) (= ($generated@@74 $generated@@101 $generated@@102 $generated@@103 ($generated@@81 $generated@@101 $generated@@102 $generated@@103 $generated@@105 $generated@@106 $generated@@107 $generated@@104) $generated@@108 $generated@@109) ($generated@@74 $generated@@101 $generated@@102 $generated@@103 $generated@@105 $generated@@108 $generated@@109)))
 :weight 0
)))) (= ($generated@@3 $generated@@75) 4)) (= ($generated@@3 $generated@@76) 5)) (forall (($generated@@110 T@T) ($generated@@111 T@T) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ) (! (= ($generated@@78 $generated@@110 $generated@@111 ($generated@@82 $generated@@110 $generated@@111 $generated@@113 $generated@@114 $generated@@112) $generated@@114) $generated@@112)
 :weight 0
))) (forall (($generated@@115 T@T) ($generated@@116 T@T) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (!  (or (= $generated@@119 $generated@@120) (= ($generated@@78 $generated@@115 $generated@@116 ($generated@@82 $generated@@115 $generated@@116 $generated@@118 $generated@@119 $generated@@117) $generated@@120) ($generated@@78 $generated@@115 $generated@@116 $generated@@118 $generated@@120)))
 :weight 0
))) (= ($generated@@3 $generated@@79) 6)) (forall (($generated@@121 T@T) ($generated@@122 T@T) ) (= ($generated@@3 ($generated@@80 $generated@@121 $generated@@122)) 7))) (forall (($generated@@123 T@T) ($generated@@124 T@T) ) (! (= ($generated@@83 ($generated@@80 $generated@@123 $generated@@124)) $generated@@123)
 :pattern ( ($generated@@80 $generated@@123 $generated@@124))
))) (forall (($generated@@125 T@T) ($generated@@126 T@T) ) (! (= ($generated@@84 ($generated@@80 $generated@@125 $generated@@126)) $generated@@126)
 :pattern ( ($generated@@80 $generated@@125 $generated@@126))
))))
(assert (forall (($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 Bool) ($generated@@131 T@U) ($generated@@132 T@U) ) (! (= ($generated@@8 ($generated@@74 $generated@@75 $generated@@76 $generated@@4 ($generated@@77 $generated@@127 $generated@@128 $generated@@129 $generated@@130) $generated@@131 $generated@@132))  (=> (and (or (not (= $generated@@131 $generated@@127)) (not true)) ($generated@@8 ($generated@@44 $generated@@4 ($generated@@78 $generated@@76 $generated@@79 ($generated@@78 $generated@@75 ($generated@@80 $generated@@76 $generated@@79) $generated@@128 $generated@@131) $generated@@129)))) $generated@@130))
 :pattern ( ($generated@@74 $generated@@75 $generated@@76 $generated@@4 ($generated@@77 $generated@@127 $generated@@128 $generated@@129 $generated@@130) $generated@@131 $generated@@132))
)))
(assert (forall (($generated@@133 T@U) ($generated@@134 Int) ($generated@@135 T@U) ) (!  (=> (and (<= 0 $generated@@134) (< $generated@@134 ($generated@@23 $generated@@133))) (= ($generated@@23 ($generated@@26 $generated@@133 $generated@@134 $generated@@135)) ($generated@@23 $generated@@133)))
 :pattern ( ($generated@@23 ($generated@@26 $generated@@133 $generated@@134 $generated@@135)))
)))
(assert (forall (($generated@@138 T@U) ($generated@@139 T@U) ) (!  (and (= ($generated@@136 ($generated@@38 $generated@@138 $generated@@139)) $generated@@138) (= ($generated@@137 ($generated@@38 $generated@@138 $generated@@139)) $generated@@139))
 :pattern ( ($generated@@38 $generated@@138 $generated@@139))
)))
(assert (forall (($generated@@140 T@U) ($generated@@141 T@U) ) (!  (=> ($generated@@40 $generated@@140 ($generated@@39 $generated@@141)) (and (= ($generated@@45 $generated@@37 ($generated@@44 $generated@@37 $generated@@140)) $generated@@140) ($generated@@36 $generated@@37 ($generated@@44 $generated@@37 $generated@@140) ($generated@@39 $generated@@141))))
 :pattern ( ($generated@@40 $generated@@140 ($generated@@39 $generated@@141)))
)))
(assert (= ($generated@@70 $generated@@20) $generated@@1))
(assert (= ($generated@@142 $generated@@20) $generated@@2))
(assert (forall (($generated@@143 Int) ) (! (= ($generated@@45 $generated@@5 ($generated@@9 ($generated@@31 $generated@@143))) ($generated@@33 $generated@@79 ($generated@@45 $generated@@5 ($generated@@9 $generated@@143))))
 :pattern ( ($generated@@45 $generated@@5 ($generated@@9 ($generated@@31 $generated@@143))))
)))
(assert (forall (($generated@@144 T@U) ($generated@@145 T@T) ) (! (= ($generated@@45 $generated@@145 ($generated@@33 $generated@@145 $generated@@144)) ($generated@@33 $generated@@79 ($generated@@45 $generated@@145 $generated@@144)))
 :pattern ( ($generated@@45 $generated@@145 ($generated@@33 $generated@@145 $generated@@144)))
)))
(assert (forall (($generated@@146 T@U) ) (!  (=> (= ($generated@@23 $generated@@146) 0) (= $generated@@146 $generated@@24))
 :pattern ( ($generated@@23 $generated@@146))
)))
(assert (forall (($generated@@147 T@U) ($generated@@148 T@U) ) (! (= ($generated@@36 $generated@@37 $generated@@147 ($generated@@39 $generated@@148)) (forall (($generated@@149 Int) ) (!  (=> (and (<= 0 $generated@@149) (< $generated@@149 ($generated@@23 $generated@@147))) ($generated@@40 ($generated@@25 $generated@@147 $generated@@149) $generated@@148))
 :pattern ( ($generated@@25 $generated@@147 $generated@@149))
)))
 :pattern ( ($generated@@36 $generated@@37 $generated@@147 ($generated@@39 $generated@@148)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@150 () T@U)
(declare-fun $generated@@151 () T@U)
(declare-fun $generated@@152 () T@U)
(declare-fun $generated@@153 () T@U)
(declare-fun $generated@@154 (T@U) Bool)
(declare-fun $generated@@155 (T@U) Bool)
(declare-fun $generated@@156 () T@U)
(declare-fun $generated@@157 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 13) (let (($generated@@158  (and (=> (= (ControlFlow 0 5) (- 0 6)) (and (<= 0 ($generated@@31 1)) (< ($generated@@31 1) ($generated@@23 $generated@@150)))) (=> (and (<= 0 ($generated@@31 1)) (< ($generated@@31 1) ($generated@@23 $generated@@150))) (=> (= (ControlFlow 0 5) (- 0 4)) ($generated@@36 $generated@@5 ($generated@@9 ($generated@@31 (- 0 5))) $generated@@20))))))
(let (($generated@@159  (and (=> (= (ControlFlow 0 2) (- 0 3)) (and (<= 0 ($generated@@31 10)) (< ($generated@@31 10) ($generated@@23 $generated@@150)))) (=> (and (<= 0 ($generated@@31 10)) (< ($generated@@31 10) ($generated@@23 $generated@@150))) (=> (= (ControlFlow 0 2) (- 0 1)) ($generated@@36 $generated@@5 ($generated@@9 ($generated@@31 4)) $generated@@20))))))
(let (($generated@@160  (=> (= $generated@@151 ($generated@@77 $generated@@152 $generated@@153 $generated@@0 false)) (and (=> (= (ControlFlow 0 7) (- 0 12)) ($generated@@36 $generated@@5 ($generated@@9 ($generated@@31 4)) $generated@@20)) (=> ($generated@@36 $generated@@5 ($generated@@9 ($generated@@31 4)) $generated@@20) (and (=> (= (ControlFlow 0 7) (- 0 11)) ($generated@@36 $generated@@5 ($generated@@9 ($generated@@31 4)) $generated@@20)) (=> ($generated@@36 $generated@@5 ($generated@@9 ($generated@@31 4)) $generated@@20) (and (=> (= (ControlFlow 0 7) (- 0 10)) ($generated@@36 $generated@@5 ($generated@@9 ($generated@@31 4)) $generated@@20)) (=> ($generated@@36 $generated@@5 ($generated@@9 ($generated@@31 4)) $generated@@20) (and (=> (= (ControlFlow 0 7) (- 0 9)) ($generated@@36 $generated@@5 ($generated@@9 ($generated@@31 4)) $generated@@20)) (=> ($generated@@36 $generated@@5 ($generated@@9 ($generated@@31 4)) $generated@@20) (and (=> (= (ControlFlow 0 7) (- 0 8)) ($generated@@36 $generated@@5 ($generated@@9 ($generated@@31 4)) $generated@@20)) (=> ($generated@@36 $generated@@5 ($generated@@9 ($generated@@31 4)) $generated@@20) (=> (= $generated@@150 ($generated@@33 $generated@@37 ($generated@@38 ($generated@@38 ($generated@@38 ($generated@@38 ($generated@@38 $generated@@24 ($generated@@45 $generated@@5 ($generated@@9 ($generated@@31 4)))) ($generated@@45 $generated@@5 ($generated@@9 ($generated@@31 4)))) ($generated@@45 $generated@@5 ($generated@@9 ($generated@@31 4)))) ($generated@@45 $generated@@5 ($generated@@9 ($generated@@31 4)))) ($generated@@45 $generated@@5 ($generated@@9 ($generated@@31 4)))))) (and (=> (= (ControlFlow 0 7) 2) $generated@@159) (=> (= (ControlFlow 0 7) 5) $generated@@158))))))))))))))))
(let (($generated@@161  (=> (and ($generated@@154 $generated@@153) ($generated@@155 $generated@@153)) (=> (and (and (and ($generated@@36 $generated@@37 $generated@@156 ($generated@@39 $generated@@20)) ($generated@@19 $generated@@37 $generated@@156 ($generated@@39 $generated@@20) $generated@@153)) true) (and (= 0 $generated@@157) (= (ControlFlow 0 13) 7))) $generated@@160))))
$generated@@161)))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 3))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 5) (- 4))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
