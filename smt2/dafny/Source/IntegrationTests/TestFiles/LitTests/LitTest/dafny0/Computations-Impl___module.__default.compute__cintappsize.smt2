(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 (T@T) Int)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 (Bool) T@U)
(declare-fun $generated@@11 (T@U) Bool)
(declare-fun $generated@@12 (Int) T@U)
(declare-fun $generated@@13 (T@U) Int)
(declare-fun $generated@@14 (Real) T@U)
(declare-fun $generated@@15 (T@U) Real)
(declare-fun $generated@@22 (T@U) T@U)
(declare-fun $generated@@23 () Int)
(declare-fun $generated@@24 (T@U T@U T@U) T@U)
(declare-fun $generated@@25 (T@U) T@U)
(declare-fun $generated@@26 (T@T T@U) T@U)
(declare-fun $generated@@27 () T@T)
(declare-fun $generated@@28 (T@U T@U) Bool)
(declare-fun $generated@@29 (T@T T@U T@U) Bool)
(declare-fun $generated@@30 () T@U)
(declare-fun $generated@@31 (T@U) Bool)
(declare-fun $generated@@32 (T@U) T@U)
(declare-fun $generated@@33 (Int) Int)
(declare-fun $generated@@34 (T@U) Int)
(declare-fun $generated@@35 (Int T@U) T@U)
(declare-fun $generated@@42 (T@U) T@U)
(declare-fun $generated@@43 () T@U)
(declare-fun $generated@@48 (T@U) Bool)
(declare-fun $generated@@50 (T@T T@U) T@U)
(declare-fun $generated@@51 (T@T T@U) T@U)
(declare-fun $generated@@70 (T@U T@U) Int)
(declare-fun $generated@@71 (T@U) Bool)
(declare-fun $generated@@87 (T@U) Int)
(declare-fun $generated@@92 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@93 () T@T)
(declare-fun $generated@@94 () T@T)
(declare-fun $generated@@95 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@96 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@97 () T@T)
(declare-fun $generated@@98 (T@T T@T) T@T)
(declare-fun $generated@@99 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@100 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@101 (T@T) T@T)
(declare-fun $generated@@102 (T@T) T@T)
(declare-fun $generated@@151 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@6 $generated@@7) 0) (= ($generated@@6 $generated@@8) 1)) (= ($generated@@6 $generated@@9) 2)) (forall (($generated@@16 Bool) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Int) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Real) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5)
)
(assert (= ($generated@@22 $generated) $generated@@0))
(assert (= ($generated@@6 $generated@@27) 3))
(assert  (=> (<= 1 $generated@@23) (forall (($generated@@36 T@U) ($generated@@37 T@U) ($generated@@38 T@U) ) (!  (=> (or ($generated@@28 ($generated@@26 $generated@@27 $generated@@37) ($generated@@26 $generated@@27 $generated@@38)) (and (< 1 $generated@@23) (and ($generated@@29 $generated@@27 $generated@@37 $generated@@30) ($generated@@29 $generated@@27 $generated@@38 $generated@@30)))) (and (=> (not ($generated@@11 ($generated@@26 $generated@@7 ($generated@@10 ($generated@@31 ($generated@@26 $generated@@27 $generated@@37)))))) (let (($generated@@39 ($generated@@26 $generated@@27 ($generated@@32 ($generated@@26 $generated@@27 $generated@@37)))))
($generated@@28 $generated@@39 ($generated@@26 $generated@@27 $generated@@38)))) (= ($generated@@24 ($generated@@25 $generated@@36) ($generated@@26 $generated@@27 $generated@@37) ($generated@@26 $generated@@27 $generated@@38)) (ite ($generated@@31 ($generated@@26 $generated@@27 $generated@@37)) $generated@@38 (let (($generated@@40 ($generated@@26 $generated@@27 ($generated@@32 ($generated@@26 $generated@@27 $generated@@37)))))
(let (($generated@@41 ($generated@@33 ($generated@@34 ($generated@@26 $generated@@27 $generated@@37)))))
($generated@@26 $generated@@27 ($generated@@35 $generated@@41 ($generated@@26 $generated@@27 ($generated@@24 ($generated@@25 $generated@@36) $generated@@40 ($generated@@26 $generated@@27 $generated@@38)))))))))))
 :weight 3
 :pattern ( ($generated@@24 ($generated@@25 $generated@@36) ($generated@@26 $generated@@27 $generated@@37) ($generated@@26 $generated@@27 $generated@@38)))
))))
(assert (= ($generated@@42 $generated@@43) $generated@@3))
(assert ($generated@@29 $generated@@27 $generated@@43 $generated@@30))
(assert (forall (($generated@@44 Int) ) (! (= ($generated@@33 $generated@@44) $generated@@44)
 :pattern ( ($generated@@33 $generated@@44))
)))
(assert (forall (($generated@@45 T@U) ($generated@@46 T@T) ) (! (= ($generated@@26 $generated@@46 $generated@@45) $generated@@45)
 :pattern ( ($generated@@26 $generated@@46 $generated@@45))
)))
(assert (forall (($generated@@47 T@U) ) (! (= ($generated@@31 $generated@@47) (= ($generated@@42 $generated@@47) $generated@@3))
 :pattern ( ($generated@@31 $generated@@47))
)))
(assert (forall (($generated@@49 T@U) ) (! (= ($generated@@48 $generated@@49) (= ($generated@@42 $generated@@49) $generated@@4))
 :pattern ( ($generated@@48 $generated@@49))
)))
(assert (forall (($generated@@52 T@U) ($generated@@53 T@T) ) (! (= ($generated@@51 $generated@@53 ($generated@@50 $generated@@53 $generated@@52)) $generated@@52)
 :pattern ( ($generated@@50 $generated@@53 $generated@@52))
)))
(assert  (=> (<= 1 $generated@@23) (forall (($generated@@54 T@U) ($generated@@55 T@U) ($generated@@56 T@U) ) (!  (=> (or ($generated@@28 $generated@@55 $generated@@56) (and (< 1 $generated@@23) (and ($generated@@29 $generated@@27 $generated@@55 $generated@@30) ($generated@@29 $generated@@27 $generated@@56 $generated@@30)))) (and (=> (not ($generated@@31 $generated@@55)) (let (($generated@@57 ($generated@@32 $generated@@55)))
($generated@@28 $generated@@57 $generated@@56))) (= ($generated@@24 ($generated@@25 $generated@@54) $generated@@55 $generated@@56) (ite ($generated@@31 $generated@@55) $generated@@56 (let (($generated@@58 ($generated@@32 $generated@@55)))
(let (($generated@@59 ($generated@@34 $generated@@55)))
($generated@@35 $generated@@59 ($generated@@24 $generated@@54 $generated@@58 $generated@@56))))))))
 :pattern ( ($generated@@24 ($generated@@25 $generated@@54) $generated@@55 $generated@@56))
))))
(assert (forall (($generated@@60 T@U) ) (!  (=> ($generated@@48 $generated@@60) (exists (($generated@@61 Int) ($generated@@62 T@U) ) (= $generated@@60 ($generated@@35 $generated@@61 $generated@@62))))
 :pattern ( ($generated@@48 $generated@@60))
)))
(assert (forall (($generated@@63 T@U) ) (!  (=> ($generated@@31 $generated@@63) (= $generated@@63 $generated@@43))
 :pattern ( ($generated@@31 $generated@@63))
)))
(assert  (=> (<= 1 $generated@@23) (forall (($generated@@64 T@U) ($generated@@65 T@U) ($generated@@66 T@U) ) (!  (=> (or ($generated@@28 $generated@@65 $generated@@66) (and (< 1 $generated@@23) (and ($generated@@29 $generated@@27 $generated@@65 $generated@@30) ($generated@@29 $generated@@27 $generated@@66 $generated@@30)))) ($generated@@29 $generated@@27 ($generated@@24 $generated@@64 $generated@@65 $generated@@66) $generated@@30))
 :pattern ( ($generated@@24 $generated@@64 $generated@@65 $generated@@66))
))))
(assert (forall (($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@U) ) (! (= ($generated@@24 ($generated@@25 $generated@@67) $generated@@68 $generated@@69) ($generated@@24 $generated@@67 $generated@@68 $generated@@69))
 :pattern ( ($generated@@24 ($generated@@25 $generated@@67) $generated@@68 $generated@@69))
)))
(assert  (=> (<= 1 $generated@@23) (forall (($generated@@72 T@U) ($generated@@73 T@U) ) (!  (=> (or ($generated@@71 $generated@@73) (and (< 1 $generated@@23) ($generated@@29 $generated@@27 $generated@@73 $generated@@30))) (<= ($generated@@33 0) ($generated@@70 $generated@@72 $generated@@73)))
 :pattern ( ($generated@@70 $generated@@72 $generated@@73))
))))
(assert (forall (($generated@@74 T@U) ) (!  (=> ($generated@@29 $generated@@27 $generated@@74 $generated@@30) (or ($generated@@31 $generated@@74) ($generated@@48 $generated@@74)))
 :pattern ( ($generated@@48 $generated@@74) ($generated@@29 $generated@@27 $generated@@74 $generated@@30))
 :pattern ( ($generated@@31 $generated@@74) ($generated@@29 $generated@@27 $generated@@74 $generated@@30))
)))
(assert  (=> (<= 1 $generated@@23) (forall (($generated@@75 T@U) ($generated@@76 T@U) ) (!  (=> (or ($generated@@71 $generated@@76) (and (< 1 $generated@@23) ($generated@@29 $generated@@27 $generated@@76 $generated@@30))) (and (=> (not ($generated@@31 $generated@@76)) (let (($generated@@77 ($generated@@32 $generated@@76)))
($generated@@71 $generated@@77))) (= ($generated@@70 ($generated@@25 $generated@@75) $generated@@76) (ite ($generated@@31 $generated@@76) 0 (let (($generated@@78 ($generated@@32 $generated@@76)))
(+ 1 ($generated@@70 $generated@@75 $generated@@78)))))))
 :pattern ( ($generated@@70 ($generated@@25 $generated@@75) $generated@@76))
))))
(assert (forall (($generated@@79 Int) ($generated@@80 T@U) ) (! (= ($generated@@42 ($generated@@35 $generated@@79 $generated@@80)) $generated@@4)
 :pattern ( ($generated@@35 $generated@@79 $generated@@80))
)))
(assert (forall (($generated@@81 Int) ($generated@@82 T@U) ) (! (= ($generated@@34 ($generated@@35 $generated@@81 $generated@@82)) $generated@@81)
 :pattern ( ($generated@@35 $generated@@81 $generated@@82))
)))
(assert (forall (($generated@@83 Int) ($generated@@84 T@U) ) (! (= ($generated@@32 ($generated@@35 $generated@@83 $generated@@84)) $generated@@84)
 :pattern ( ($generated@@35 $generated@@83 $generated@@84))
)))
(assert (forall (($generated@@85 T@U) ($generated@@86 T@T) ) (! (= ($generated@@50 $generated@@86 ($generated@@51 $generated@@86 $generated@@85)) $generated@@85)
 :pattern ( ($generated@@51 $generated@@86 $generated@@85))
)))
(assert (forall (($generated@@88 Int) ($generated@@89 T@U) ) (! (< ($generated@@87 $generated@@89) ($generated@@87 ($generated@@35 $generated@@88 $generated@@89)))
 :pattern ( ($generated@@35 $generated@@88 $generated@@89))
)))
(assert (forall (($generated@@90 T@U) ($generated@@91 T@U) ) (! (= ($generated@@70 ($generated@@25 $generated@@90) $generated@@91) ($generated@@70 $generated@@90 $generated@@91))
 :pattern ( ($generated@@70 ($generated@@25 $generated@@90) $generated@@91))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@103 T@T) ($generated@@104 T@T) ($generated@@105 T@T) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ) (! (= ($generated@@92 $generated@@103 $generated@@104 $generated@@105 ($generated@@99 $generated@@103 $generated@@104 $generated@@105 $generated@@107 $generated@@108 $generated@@109 $generated@@106) $generated@@108 $generated@@109) $generated@@106)
 :weight 0
)) (and (forall (($generated@@110 T@T) ($generated@@111 T@T) ($generated@@112 T@T) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ) (!  (or (= $generated@@115 $generated@@117) (= ($generated@@92 $generated@@110 $generated@@111 $generated@@112 ($generated@@99 $generated@@110 $generated@@111 $generated@@112 $generated@@114 $generated@@115 $generated@@116 $generated@@113) $generated@@117 $generated@@118) ($generated@@92 $generated@@110 $generated@@111 $generated@@112 $generated@@114 $generated@@117 $generated@@118)))
 :weight 0
)) (forall (($generated@@119 T@T) ($generated@@120 T@T) ($generated@@121 T@T) ($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 T@U) ) (!  (or (= $generated@@125 $generated@@127) (= ($generated@@92 $generated@@119 $generated@@120 $generated@@121 ($generated@@99 $generated@@119 $generated@@120 $generated@@121 $generated@@123 $generated@@124 $generated@@125 $generated@@122) $generated@@126 $generated@@127) ($generated@@92 $generated@@119 $generated@@120 $generated@@121 $generated@@123 $generated@@126 $generated@@127)))
 :weight 0
)))) (= ($generated@@6 $generated@@93) 4)) (= ($generated@@6 $generated@@94) 5)) (forall (($generated@@128 T@T) ($generated@@129 T@T) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ) (! (= ($generated@@96 $generated@@128 $generated@@129 ($generated@@100 $generated@@128 $generated@@129 $generated@@131 $generated@@132 $generated@@130) $generated@@132) $generated@@130)
 :weight 0
))) (forall (($generated@@133 T@T) ($generated@@134 T@T) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ) (!  (or (= $generated@@137 $generated@@138) (= ($generated@@96 $generated@@133 $generated@@134 ($generated@@100 $generated@@133 $generated@@134 $generated@@136 $generated@@137 $generated@@135) $generated@@138) ($generated@@96 $generated@@133 $generated@@134 $generated@@136 $generated@@138)))
 :weight 0
))) (= ($generated@@6 $generated@@97) 6)) (forall (($generated@@139 T@T) ($generated@@140 T@T) ) (= ($generated@@6 ($generated@@98 $generated@@139 $generated@@140)) 7))) (forall (($generated@@141 T@T) ($generated@@142 T@T) ) (! (= ($generated@@101 ($generated@@98 $generated@@141 $generated@@142)) $generated@@141)
 :pattern ( ($generated@@98 $generated@@141 $generated@@142))
))) (forall (($generated@@143 T@T) ($generated@@144 T@T) ) (! (= ($generated@@102 ($generated@@98 $generated@@143 $generated@@144)) $generated@@144)
 :pattern ( ($generated@@98 $generated@@143 $generated@@144))
))))
(assert (forall (($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 Bool) ($generated@@149 T@U) ($generated@@150 T@U) ) (! (= ($generated@@11 ($generated@@92 $generated@@93 $generated@@94 $generated@@7 ($generated@@95 $generated@@145 $generated@@146 $generated@@147 $generated@@148) $generated@@149 $generated@@150))  (=> (and (or (not (= $generated@@149 $generated@@145)) (not true)) ($generated@@11 ($generated@@50 $generated@@7 ($generated@@96 $generated@@94 $generated@@97 ($generated@@96 $generated@@93 ($generated@@98 $generated@@94 $generated@@97) $generated@@146 $generated@@149) $generated@@147)))) $generated@@148))
 :pattern ( ($generated@@92 $generated@@93 $generated@@94 $generated@@7 ($generated@@95 $generated@@145 $generated@@146 $generated@@147 $generated@@148) $generated@@149 $generated@@150))
)))
(assert (= ($generated@@22 $generated@@30) $generated@@2))
(assert (= ($generated@@151 $generated@@30) $generated@@5))
(assert (= $generated@@43 ($generated@@26 $generated@@27 $generated@@43)))
(assert  (=> (<= 1 $generated@@23) (forall (($generated@@152 T@U) ($generated@@153 T@U) ) (!  (=> (or ($generated@@71 ($generated@@26 $generated@@27 $generated@@153)) (and (< 1 $generated@@23) ($generated@@29 $generated@@27 $generated@@153 $generated@@30))) (and (=> (not ($generated@@11 ($generated@@26 $generated@@7 ($generated@@10 ($generated@@31 ($generated@@26 $generated@@27 $generated@@153)))))) (let (($generated@@154 ($generated@@26 $generated@@27 ($generated@@32 ($generated@@26 $generated@@27 $generated@@153)))))
($generated@@71 $generated@@154))) (= ($generated@@70 ($generated@@25 $generated@@152) ($generated@@26 $generated@@27 $generated@@153)) (ite ($generated@@31 ($generated@@26 $generated@@27 $generated@@153)) 0 (let (($generated@@155 ($generated@@26 $generated@@27 ($generated@@32 ($generated@@26 $generated@@27 $generated@@153)))))
($generated@@33 (+ 1 ($generated@@70 ($generated@@25 $generated@@152) $generated@@155))))))))
 :weight 3
 :pattern ( ($generated@@70 ($generated@@25 $generated@@152) ($generated@@26 $generated@@27 $generated@@153)))
))))
(assert (forall (($generated@@156 Int) ($generated@@157 T@U) ) (! (= ($generated@@35 ($generated@@33 $generated@@156) ($generated@@26 $generated@@27 $generated@@157)) ($generated@@26 $generated@@27 ($generated@@35 $generated@@156 $generated@@157)))
 :pattern ( ($generated@@35 ($generated@@33 $generated@@156) ($generated@@26 $generated@@27 $generated@@157)))
)))
(assert (forall (($generated@@158 Int) ) (! (= ($generated@@51 $generated@@8 ($generated@@12 ($generated@@33 $generated@@158))) ($generated@@26 $generated@@97 ($generated@@51 $generated@@8 ($generated@@12 $generated@@158))))
 :pattern ( ($generated@@51 $generated@@8 ($generated@@12 ($generated@@33 $generated@@158))))
)))
(assert (forall (($generated@@159 T@U) ($generated@@160 T@T) ) (! (= ($generated@@51 $generated@@160 ($generated@@26 $generated@@160 $generated@@159)) ($generated@@26 $generated@@97 ($generated@@51 $generated@@160 $generated@@159)))
 :pattern ( ($generated@@51 $generated@@160 ($generated@@26 $generated@@160 $generated@@159)))
)))
(assert (forall (($generated@@161 Int) ($generated@@162 T@U) ) (! (= ($generated@@29 $generated@@27 ($generated@@35 $generated@@161 $generated@@162) $generated@@30)  (and ($generated@@29 $generated@@8 ($generated@@12 $generated@@161) $generated) ($generated@@29 $generated@@27 $generated@@162 $generated@@30)))
 :pattern ( ($generated@@29 $generated@@27 ($generated@@35 $generated@@161 $generated@@162) $generated@@30))
)))
(assert (forall (($generated@@163 T@U) ) (! ($generated@@29 $generated@@8 $generated@@163 $generated)
 :pattern ( ($generated@@29 $generated@@8 $generated@@163 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@164 () T@U)
(declare-fun $generated@@165 () T@U)
(declare-fun $generated@@166 () T@U)
(declare-fun $generated@@167 () T@U)
(declare-fun $generated@@168 (T@U) Bool)
(declare-fun $generated@@169 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@170  (=> (and (= $generated@@164 ($generated@@95 $generated@@165 $generated@@166 $generated@@1 false)) (= (ControlFlow 0 2) (- 0 1))) (= ($generated@@33 ($generated@@70 ($generated@@25 ($generated@@25 $generated@@167)) ($generated@@26 $generated@@27 ($generated@@24 ($generated@@25 ($generated@@25 $generated@@167)) ($generated@@26 $generated@@27 ($generated@@35 ($generated@@33 1) ($generated@@26 $generated@@27 ($generated@@35 ($generated@@33 2) ($generated@@26 $generated@@27 $generated@@43))))) ($generated@@26 $generated@@27 ($generated@@35 ($generated@@33 3) ($generated@@26 $generated@@27 ($generated@@35 ($generated@@33 4) ($generated@@26 $generated@@27 $generated@@43))))))))) ($generated@@33 4)))))
(let (($generated@@171  (=> (and (and ($generated@@168 $generated@@166) ($generated@@169 $generated@@166)) (and (= 2 $generated@@23) (= (ControlFlow 0 3) 2))) $generated@@170)))
$generated@@171)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
