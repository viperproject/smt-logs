(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 (T@T) Int)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 (Bool) T@U)
(declare-fun $generated@@11 (T@U) Bool)
(declare-fun $generated@@12 (Int) T@U)
(declare-fun $generated@@13 (T@U) Int)
(declare-fun $generated@@14 (Real) T@U)
(declare-fun $generated@@15 (T@U) Real)
(declare-fun $generated@@22 (T@U) T@U)
(declare-fun $generated@@23 (T@U) T@U)
(declare-fun $generated@@24 () T@U)
(declare-fun $generated@@25 () T@U)
(declare-fun $generated@@26 (T@T T@U T@U) Bool)
(declare-fun $generated@@27 () T@T)
(declare-fun $generated@@28 () T@U)
(declare-fun $generated@@29 (T@U T@U) Bool)
(declare-fun $generated@@32 (Int) Int)
(declare-fun $generated@@34 (T@T T@U) T@U)
(declare-fun $generated@@37 (T@T T@U) T@U)
(declare-fun $generated@@38 (T@T T@U) T@U)
(declare-fun $generated@@41 () Int)
(declare-fun $generated@@42 (Bool Int T@U) Int)
(declare-fun $generated@@43 (Bool Int T@U) Bool)
(declare-fun $generated@@52 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@53 () T@T)
(declare-fun $generated@@54 () T@T)
(declare-fun $generated@@55 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@56 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@57 () T@T)
(declare-fun $generated@@58 (T@T T@T) T@T)
(declare-fun $generated@@59 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@60 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@61 (T@T) T@T)
(declare-fun $generated@@62 (T@T) T@T)
(declare-fun $generated@@111 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@6 $generated@@7) 0) (= ($generated@@6 $generated@@8) 1)) (= ($generated@@6 $generated@@9) 2)) (forall (($generated@@16 Bool) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Int) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Real) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5)
)
(assert (= ($generated@@22 $generated) $generated@@0))
(assert (= ($generated@@23 $generated@@24) $generated@@3))
(assert (= ($generated@@23 $generated@@25) $generated@@4))
(assert (= ($generated@@6 $generated@@27) 3))
(assert ($generated@@26 $generated@@27 $generated@@24 $generated@@28))
(assert ($generated@@26 $generated@@27 $generated@@25 $generated@@28))
(assert (forall (($generated@@30 T@U) ($generated@@31 T@U) ) (! (= ($generated@@29 $generated@@30 $generated@@31) (= $generated@@30 $generated@@31))
 :pattern ( ($generated@@29 $generated@@30 $generated@@31))
)))
(assert (forall (($generated@@33 Int) ) (! (= ($generated@@32 $generated@@33) $generated@@33)
 :pattern ( ($generated@@32 $generated@@33))
)))
(assert (forall (($generated@@35 T@U) ($generated@@36 T@T) ) (! (= ($generated@@34 $generated@@36 $generated@@35) $generated@@35)
 :pattern ( ($generated@@34 $generated@@36 $generated@@35))
)))
(assert (forall (($generated@@39 T@U) ($generated@@40 T@T) ) (! (= ($generated@@38 $generated@@40 ($generated@@37 $generated@@40 $generated@@39)) $generated@@39)
 :pattern ( ($generated@@37 $generated@@40 $generated@@39))
)))
(assert  (=> (<= 1 $generated@@41) (forall (($generated@@44 Bool) ($generated@@45 Int) ($generated@@46 T@U) ) (!  (=> (or ($generated@@43 $generated@@44 $generated@@45 $generated@@46) (and (< 1 $generated@@41) (and ($generated@@26 $generated@@27 $generated@@46 $generated@@28) (not ($generated@@29 $generated@@46 $generated@@24))))) (= ($generated@@42 $generated@@44 $generated@@45 $generated@@46) (ite $generated@@44 $generated@@45 3)))
 :pattern ( ($generated@@42 $generated@@44 $generated@@45 $generated@@46))
))))
(assert (forall (($generated@@47 T@U) ($generated@@48 T@T) ) (! (= ($generated@@37 $generated@@48 ($generated@@38 $generated@@48 $generated@@47)) $generated@@47)
 :pattern ( ($generated@@38 $generated@@48 $generated@@47))
)))
(assert  (=> (<= 1 $generated@@41) (forall (($generated@@49 T@U) ($generated@@50 Int) ($generated@@51 T@U) ) (!  (=> (or ($generated@@43 ($generated@@11 ($generated@@34 $generated@@7 $generated@@49)) ($generated@@32 $generated@@50) ($generated@@34 $generated@@27 $generated@@51)) (and (< 1 $generated@@41) (and ($generated@@26 $generated@@27 $generated@@51 $generated@@28) (not ($generated@@29 $generated@@51 $generated@@24))))) (= ($generated@@42 ($generated@@11 ($generated@@34 $generated@@7 $generated@@49)) ($generated@@32 $generated@@50) ($generated@@34 $generated@@27 $generated@@51)) (ite ($generated@@11 $generated@@49) $generated@@50 3)))
 :weight 3
 :pattern ( ($generated@@42 ($generated@@11 ($generated@@34 $generated@@7 $generated@@49)) ($generated@@32 $generated@@50) ($generated@@34 $generated@@27 $generated@@51)))
))))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@63 T@T) ($generated@@64 T@T) ($generated@@65 T@T) ($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@U) ) (! (= ($generated@@52 $generated@@63 $generated@@64 $generated@@65 ($generated@@59 $generated@@63 $generated@@64 $generated@@65 $generated@@67 $generated@@68 $generated@@69 $generated@@66) $generated@@68 $generated@@69) $generated@@66)
 :weight 0
)) (and (forall (($generated@@70 T@T) ($generated@@71 T@T) ($generated@@72 T@T) ($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ) (!  (or (= $generated@@75 $generated@@77) (= ($generated@@52 $generated@@70 $generated@@71 $generated@@72 ($generated@@59 $generated@@70 $generated@@71 $generated@@72 $generated@@74 $generated@@75 $generated@@76 $generated@@73) $generated@@77 $generated@@78) ($generated@@52 $generated@@70 $generated@@71 $generated@@72 $generated@@74 $generated@@77 $generated@@78)))
 :weight 0
)) (forall (($generated@@79 T@T) ($generated@@80 T@T) ($generated@@81 T@T) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ) (!  (or (= $generated@@85 $generated@@87) (= ($generated@@52 $generated@@79 $generated@@80 $generated@@81 ($generated@@59 $generated@@79 $generated@@80 $generated@@81 $generated@@83 $generated@@84 $generated@@85 $generated@@82) $generated@@86 $generated@@87) ($generated@@52 $generated@@79 $generated@@80 $generated@@81 $generated@@83 $generated@@86 $generated@@87)))
 :weight 0
)))) (= ($generated@@6 $generated@@53) 4)) (= ($generated@@6 $generated@@54) 5)) (forall (($generated@@88 T@T) ($generated@@89 T@T) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ) (! (= ($generated@@56 $generated@@88 $generated@@89 ($generated@@60 $generated@@88 $generated@@89 $generated@@91 $generated@@92 $generated@@90) $generated@@92) $generated@@90)
 :weight 0
))) (forall (($generated@@93 T@T) ($generated@@94 T@T) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ) (!  (or (= $generated@@97 $generated@@98) (= ($generated@@56 $generated@@93 $generated@@94 ($generated@@60 $generated@@93 $generated@@94 $generated@@96 $generated@@97 $generated@@95) $generated@@98) ($generated@@56 $generated@@93 $generated@@94 $generated@@96 $generated@@98)))
 :weight 0
))) (= ($generated@@6 $generated@@57) 6)) (forall (($generated@@99 T@T) ($generated@@100 T@T) ) (= ($generated@@6 ($generated@@58 $generated@@99 $generated@@100)) 7))) (forall (($generated@@101 T@T) ($generated@@102 T@T) ) (! (= ($generated@@61 ($generated@@58 $generated@@101 $generated@@102)) $generated@@101)
 :pattern ( ($generated@@58 $generated@@101 $generated@@102))
))) (forall (($generated@@103 T@T) ($generated@@104 T@T) ) (! (= ($generated@@62 ($generated@@58 $generated@@103 $generated@@104)) $generated@@104)
 :pattern ( ($generated@@58 $generated@@103 $generated@@104))
))))
(assert (forall (($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 Bool) ($generated@@109 T@U) ($generated@@110 T@U) ) (! (= ($generated@@11 ($generated@@52 $generated@@53 $generated@@54 $generated@@7 ($generated@@55 $generated@@105 $generated@@106 $generated@@107 $generated@@108) $generated@@109 $generated@@110))  (=> (and (or (not (= $generated@@109 $generated@@105)) (not true)) ($generated@@11 ($generated@@37 $generated@@7 ($generated@@56 $generated@@54 $generated@@57 ($generated@@56 $generated@@53 ($generated@@58 $generated@@54 $generated@@57) $generated@@106 $generated@@109) $generated@@107)))) $generated@@108))
 :pattern ( ($generated@@52 $generated@@53 $generated@@54 $generated@@7 ($generated@@55 $generated@@105 $generated@@106 $generated@@107 $generated@@108) $generated@@109 $generated@@110))
)))
(assert (= ($generated@@22 $generated@@28) $generated@@2))
(assert (= ($generated@@111 $generated@@28) $generated@@5))
(assert (= $generated@@24 ($generated@@34 $generated@@27 $generated@@24)))
(assert (= $generated@@25 ($generated@@34 $generated@@27 $generated@@25)))
(assert (forall (($generated@@112 Int) ) (! (= ($generated@@38 $generated@@8 ($generated@@12 ($generated@@32 $generated@@112))) ($generated@@34 $generated@@57 ($generated@@38 $generated@@8 ($generated@@12 $generated@@112))))
 :pattern ( ($generated@@38 $generated@@8 ($generated@@12 ($generated@@32 $generated@@112))))
)))
(assert (forall (($generated@@113 T@U) ($generated@@114 T@T) ) (! (= ($generated@@38 $generated@@114 ($generated@@34 $generated@@114 $generated@@113)) ($generated@@34 $generated@@57 ($generated@@38 $generated@@114 $generated@@113)))
 :pattern ( ($generated@@38 $generated@@114 ($generated@@34 $generated@@114 $generated@@113)))
)))
(assert (forall (($generated@@115 T@U) ) (! ($generated@@26 $generated@@8 $generated@@115 $generated)
 :pattern ( ($generated@@26 $generated@@8 $generated@@115 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@116 () T@U)
(declare-fun $generated@@117 () Bool)
(declare-fun $generated@@118 () T@U)
(declare-fun $generated@@119 () T@U)
(declare-fun $generated@@120 () T@U)
(declare-fun $generated@@121 (T@U) Bool)
(declare-fun $generated@@122 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 10) (let (($generated@@123 true))
(let (($generated@@124  (=> (and (= $generated@@116 $generated@@24) (= (ControlFlow 0 5) (- 0 4))) false)))
(let (($generated@@125  (=> (or (not (= $generated@@116 $generated@@25)) (not true)) (and (=> (= (ControlFlow 0 7) 5) $generated@@124) (=> (= (ControlFlow 0 7) 6) $generated@@123)))))
(let (($generated@@126 true))
(let (($generated@@127  (=> (not $generated@@117) (and (=> (= (ControlFlow 0 8) 3) $generated@@126) (=> (= (ControlFlow 0 8) 7) $generated@@125)))))
(let (($generated@@128 true))
(let (($generated@@129 true))
(let (($generated@@130  (=> (and (= $generated@@118 ($generated@@55 $generated@@119 $generated@@120 $generated@@1 false)) (not ($generated@@29 $generated@@116 $generated@@24))) (and (and (=> (= (ControlFlow 0 9) 1) $generated@@129) (=> (= (ControlFlow 0 9) 2) $generated@@128)) (=> (= (ControlFlow 0 9) 8) $generated@@127)))))
(let (($generated@@131  (=> (and (and (and ($generated@@121 $generated@@120) ($generated@@122 $generated@@120)) ($generated@@26 $generated@@27 $generated@@116 $generated@@28)) (and (= 1 $generated@@41) (= (ControlFlow 0 10) 9))) $generated@@130)))
$generated@@131))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
