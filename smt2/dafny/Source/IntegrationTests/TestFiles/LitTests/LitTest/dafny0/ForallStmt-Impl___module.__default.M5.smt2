(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (Bool) T@U)
(declare-fun $generated@@7 (T@U) Bool)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun $generated@@9 (T@U) Int)
(declare-fun $generated@@10 (Real) T@U)
(declare-fun $generated@@11 (T@U) Real)
(declare-fun $generated@@18 (T@U) T@U)
(declare-fun $generated@@19 (Int) Int)
(declare-fun $generated@@21 (T@T T@U) T@U)
(declare-fun $generated@@24 (T@T T@U) T@U)
(declare-fun $generated@@25 (T@T T@U) T@U)
(declare-fun $generated@@30 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@31 () T@T)
(declare-fun $generated@@32 () T@T)
(declare-fun $generated@@33 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@34 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@35 () T@T)
(declare-fun $generated@@36 (T@T T@T) T@T)
(declare-fun $generated@@37 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@38 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@39 (T@T) T@T)
(declare-fun $generated@@40 (T@T) T@T)
(declare-fun $generated@@92 (T@T T@U T@U T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@4) 1)) (= ($generated@@2 $generated@@5) 2)) (forall (($generated@@12 Bool) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Int) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Real) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))))
(assert (distinct $generated $generated@@0 $generated@@1)
)
(assert (= ($generated@@18 $generated) $generated@@0))
(assert (forall (($generated@@20 Int) ) (! (= ($generated@@19 $generated@@20) $generated@@20)
 :pattern ( ($generated@@19 $generated@@20))
)))
(assert (forall (($generated@@22 T@U) ($generated@@23 T@T) ) (! (= ($generated@@21 $generated@@23 $generated@@22) $generated@@22)
 :pattern ( ($generated@@21 $generated@@23 $generated@@22))
)))
(assert (forall (($generated@@26 T@U) ($generated@@27 T@T) ) (! (= ($generated@@25 $generated@@27 ($generated@@24 $generated@@27 $generated@@26)) $generated@@26)
 :pattern ( ($generated@@24 $generated@@27 $generated@@26))
)))
(assert (forall (($generated@@28 T@U) ($generated@@29 T@T) ) (! (= ($generated@@24 $generated@@29 ($generated@@25 $generated@@29 $generated@@28)) $generated@@28)
 :pattern ( ($generated@@25 $generated@@29 $generated@@28))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@41 T@T) ($generated@@42 T@T) ($generated@@43 T@T) ($generated@@44 T@U) ($generated@@45 T@U) ($generated@@46 T@U) ($generated@@47 T@U) ) (! (= ($generated@@30 $generated@@41 $generated@@42 $generated@@43 ($generated@@37 $generated@@41 $generated@@42 $generated@@43 $generated@@45 $generated@@46 $generated@@47 $generated@@44) $generated@@46 $generated@@47) $generated@@44)
 :weight 0
)) (and (forall (($generated@@48 T@T) ($generated@@49 T@T) ($generated@@50 T@T) ($generated@@51 T@U) ($generated@@52 T@U) ($generated@@53 T@U) ($generated@@54 T@U) ($generated@@55 T@U) ($generated@@56 T@U) ) (!  (or (= $generated@@53 $generated@@55) (= ($generated@@30 $generated@@48 $generated@@49 $generated@@50 ($generated@@37 $generated@@48 $generated@@49 $generated@@50 $generated@@52 $generated@@53 $generated@@54 $generated@@51) $generated@@55 $generated@@56) ($generated@@30 $generated@@48 $generated@@49 $generated@@50 $generated@@52 $generated@@55 $generated@@56)))
 :weight 0
)) (forall (($generated@@57 T@T) ($generated@@58 T@T) ($generated@@59 T@T) ($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@U) ($generated@@64 T@U) ($generated@@65 T@U) ) (!  (or (= $generated@@63 $generated@@65) (= ($generated@@30 $generated@@57 $generated@@58 $generated@@59 ($generated@@37 $generated@@57 $generated@@58 $generated@@59 $generated@@61 $generated@@62 $generated@@63 $generated@@60) $generated@@64 $generated@@65) ($generated@@30 $generated@@57 $generated@@58 $generated@@59 $generated@@61 $generated@@64 $generated@@65)))
 :weight 0
)))) (= ($generated@@2 $generated@@31) 3)) (= ($generated@@2 $generated@@32) 4)) (forall (($generated@@66 T@T) ($generated@@67 T@T) ($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ) (! (= ($generated@@34 $generated@@66 $generated@@67 ($generated@@38 $generated@@66 $generated@@67 $generated@@69 $generated@@70 $generated@@68) $generated@@70) $generated@@68)
 :weight 0
))) (forall (($generated@@71 T@T) ($generated@@72 T@T) ($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@U) ) (!  (or (= $generated@@75 $generated@@76) (= ($generated@@34 $generated@@71 $generated@@72 ($generated@@38 $generated@@71 $generated@@72 $generated@@74 $generated@@75 $generated@@73) $generated@@76) ($generated@@34 $generated@@71 $generated@@72 $generated@@74 $generated@@76)))
 :weight 0
))) (= ($generated@@2 $generated@@35) 5)) (forall (($generated@@77 T@T) ($generated@@78 T@T) ) (= ($generated@@2 ($generated@@36 $generated@@77 $generated@@78)) 6))) (forall (($generated@@79 T@T) ($generated@@80 T@T) ) (! (= ($generated@@39 ($generated@@36 $generated@@79 $generated@@80)) $generated@@79)
 :pattern ( ($generated@@36 $generated@@79 $generated@@80))
))) (forall (($generated@@81 T@T) ($generated@@82 T@T) ) (! (= ($generated@@40 ($generated@@36 $generated@@81 $generated@@82)) $generated@@82)
 :pattern ( ($generated@@36 $generated@@81 $generated@@82))
))))
(assert (forall (($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 Bool) ($generated@@87 T@U) ($generated@@88 T@U) ) (! (= ($generated@@7 ($generated@@30 $generated@@31 $generated@@32 $generated@@3 ($generated@@33 $generated@@83 $generated@@84 $generated@@85 $generated@@86) $generated@@87 $generated@@88))  (=> (and (or (not (= $generated@@87 $generated@@83)) (not true)) ($generated@@7 ($generated@@24 $generated@@3 ($generated@@34 $generated@@32 $generated@@35 ($generated@@34 $generated@@31 ($generated@@36 $generated@@32 $generated@@35) $generated@@84 $generated@@87) $generated@@85)))) $generated@@86))
 :pattern ( ($generated@@30 $generated@@31 $generated@@32 $generated@@3 ($generated@@33 $generated@@83 $generated@@84 $generated@@85 $generated@@86) $generated@@87 $generated@@88))
)))
(assert (forall (($generated@@89 Int) ) (! (= ($generated@@25 $generated@@4 ($generated@@8 ($generated@@19 $generated@@89))) ($generated@@21 $generated@@35 ($generated@@25 $generated@@4 ($generated@@8 $generated@@89))))
 :pattern ( ($generated@@25 $generated@@4 ($generated@@8 ($generated@@19 $generated@@89))))
)))
(assert (forall (($generated@@90 T@U) ($generated@@91 T@T) ) (! (= ($generated@@25 $generated@@91 ($generated@@21 $generated@@91 $generated@@90)) ($generated@@21 $generated@@35 ($generated@@25 $generated@@91 $generated@@90)))
 :pattern ( ($generated@@25 $generated@@91 ($generated@@21 $generated@@91 $generated@@90)))
)))
(assert (forall (($generated@@93 T@U) ($generated@@94 T@U) ) (! ($generated@@92 $generated@@4 $generated@@94 $generated $generated@@93)
 :pattern ( ($generated@@92 $generated@@4 $generated@@94 $generated $generated@@93))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@95 () Int)
(declare-fun $generated@@96 (T@U) Bool)
(declare-fun $generated@@97 () T@U)
(declare-fun $generated@@98 (T@U) Bool)
(declare-fun $generated@@99 () T@U)
(declare-fun $generated@@100 (Int Int) Bool)
(declare-fun $generated@@101 () Int)
(declare-fun $generated@@102 () Int)
(declare-fun $generated@@103 (Int Int) Bool)
(declare-fun $generated@@104 () Int)
(declare-fun $generated@@105 () T@U)
(declare-fun $generated@@106 () Int)
(declare-fun $generated@@107 () Int)
(declare-fun $generated@@108 () Int)
(declare-fun $generated@@109 () Int)
(declare-fun $generated@@110 () T@U)
(declare-fun $generated@@111 () Int)
(declare-fun $generated@@112 () Int)
(declare-fun $generated@@113 () Int)
(declare-fun $generated@@114 () T@U)
(declare-fun $generated@@115 () Int)
(declare-fun $generated@@116 () Int)
(declare-fun $generated@@117 () T@U)
(declare-fun $generated@@118 () T@U)
(declare-fun $generated@@119 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 40) (let (($generated@@120 true))
(let (($generated@@121  (=> (and (< $generated@@95 ($generated@@19 0)) (= (ControlFlow 0 36) 34)) $generated@@120)))
(let (($generated@@122  (=> (and (<= ($generated@@19 0) $generated@@95) (= (ControlFlow 0 35) 34)) $generated@@120)))
(let (($generated@@123  (and (=> (= (ControlFlow 0 37) 35) $generated@@122) (=> (= (ControlFlow 0 37) 36) $generated@@121))))
(let (($generated@@124  (=> (and (and ($generated@@96 $generated@@97) ($generated@@98 $generated@@97)) (= $generated@@99 $generated@@97)) (=> (and (and (and (forall (($generated@@125 Int) ) (!  (=> (and (<= ($generated@@19 0) $generated@@125) (< $generated@@125 100)) ($generated@@100 $generated@@125 $generated@@125))
 :pattern ( ($generated@@100 $generated@@125 $generated@@125))
)) (= $generated@@101 ($generated@@19 34))) (and ($generated@@92 $generated@@4 ($generated@@8 $generated@@101) $generated $generated@@97) (= $generated@@102 ($generated@@19 34)))) (and (and ($generated@@92 $generated@@4 ($generated@@8 $generated@@102) $generated $generated@@97) ($generated@@103 ($generated@@19 34) ($generated@@19 34))) (and ($generated@@103 ($generated@@19 34) ($generated@@19 34)) (= (ControlFlow 0 33) (- 0 32))))) ($generated@@100 ($generated@@19 34) ($generated@@19 34))))))
(let (($generated@@126  (and (=> (= (ControlFlow 0 38) 37) $generated@@123) (=> (= (ControlFlow 0 38) 33) $generated@@124))))
(let (($generated@@127 true))
(let (($generated@@128  (=> (and (not (and (<= ($generated@@19 0) $generated@@104) (< $generated@@104 100))) (= (ControlFlow 0 27) 25)) $generated@@127)))
(let (($generated@@129  (=> (and (and (<= ($generated@@19 0) $generated@@104) (< $generated@@104 100)) (= (ControlFlow 0 26) 25)) $generated@@127)))
(let (($generated@@130  (=> (< $generated@@104 ($generated@@19 0)) (and (=> (= (ControlFlow 0 29) 26) $generated@@129) (=> (= (ControlFlow 0 29) 27) $generated@@128)))))
(let (($generated@@131  (=> (<= ($generated@@19 0) $generated@@104) (and (=> (= (ControlFlow 0 28) 26) $generated@@129) (=> (= (ControlFlow 0 28) 27) $generated@@128)))))
(let (($generated@@132  (and (=> (= (ControlFlow 0 30) 28) $generated@@131) (=> (= (ControlFlow 0 30) 29) $generated@@130))))
(let (($generated@@133  (=> (and (and ($generated@@96 $generated@@105) ($generated@@98 $generated@@105)) (= $generated@@99 $generated@@105)) (=> (and (and (and (forall (($generated@@134 Int) ($generated@@135 Int) ) (!  (=> (and (and (<= ($generated@@19 0) $generated@@134) (< $generated@@134 100)) (= $generated@@135 (+ $generated@@134 1))) ($generated@@100 $generated@@134 $generated@@135))
 :pattern ( ($generated@@100 $generated@@134 $generated@@135))
)) (= $generated@@106 ($generated@@19 34))) (and ($generated@@92 $generated@@4 ($generated@@8 $generated@@106) $generated $generated@@105) (= $generated@@107 ($generated@@19 35)))) (and (and ($generated@@92 $generated@@4 ($generated@@8 $generated@@107) $generated $generated@@105) ($generated@@103 ($generated@@19 34) ($generated@@19 35))) (and ($generated@@103 ($generated@@19 34) ($generated@@19 35)) (= (ControlFlow 0 24) (- 0 23))))) ($generated@@100 ($generated@@19 34) ($generated@@19 35))))))
(let (($generated@@136  (and (=> (= (ControlFlow 0 31) 30) $generated@@132) (=> (= (ControlFlow 0 31) 24) $generated@@133))))
(let (($generated@@137 true))
(let (($generated@@138  (=> (and (not (and (<= ($generated@@19 0) $generated@@108) (< $generated@@108 $generated@@109))) (= (ControlFlow 0 18) 16)) $generated@@137)))
(let (($generated@@139  (=> (and (and (<= ($generated@@19 0) $generated@@108) (< $generated@@108 $generated@@109)) (= (ControlFlow 0 17) 16)) $generated@@137)))
(let (($generated@@140  (=> (< $generated@@108 ($generated@@19 0)) (and (=> (= (ControlFlow 0 20) 17) $generated@@139) (=> (= (ControlFlow 0 20) 18) $generated@@138)))))
(let (($generated@@141  (=> (<= ($generated@@19 0) $generated@@108) (and (=> (= (ControlFlow 0 19) 17) $generated@@139) (=> (= (ControlFlow 0 19) 18) $generated@@138)))))
(let (($generated@@142  (and (=> (= (ControlFlow 0 21) 19) $generated@@141) (=> (= (ControlFlow 0 21) 20) $generated@@140))))
(let (($generated@@143  (=> (and (and ($generated@@96 $generated@@110) ($generated@@98 $generated@@110)) (= $generated@@99 $generated@@110)) (=> (and (and (and (forall (($generated@@144 Int) ($generated@@145 Int) ) (!  (=> (and (and (<= ($generated@@19 0) $generated@@144) (< $generated@@144 $generated@@145)) (< $generated@@145 100)) ($generated@@100 $generated@@144 $generated@@145))
 :pattern ( ($generated@@100 $generated@@144 $generated@@145))
)) (= $generated@@111 ($generated@@19 34))) (and ($generated@@92 $generated@@4 ($generated@@8 $generated@@111) $generated $generated@@110) (= $generated@@112 ($generated@@19 35)))) (and (and ($generated@@92 $generated@@4 ($generated@@8 $generated@@112) $generated $generated@@110) ($generated@@103 ($generated@@19 34) ($generated@@19 35))) (and ($generated@@103 ($generated@@19 34) ($generated@@19 35)) (= (ControlFlow 0 15) (- 0 14))))) ($generated@@100 ($generated@@19 34) ($generated@@19 35))))))
(let (($generated@@146  (and (=> (= (ControlFlow 0 22) 21) $generated@@142) (=> (= (ControlFlow 0 22) 15) $generated@@143))))
(let (($generated@@147 true))
(let (($generated@@148  (=> (and (not (and (<= ($generated@@19 0) $generated@@113) (< $generated@@113 100))) (= (ControlFlow 0 8) 6)) $generated@@147)))
(let (($generated@@149  (=> (and (and (<= ($generated@@19 0) $generated@@113) (< $generated@@113 100)) (= (ControlFlow 0 7) 6)) $generated@@147)))
(let (($generated@@150  (=> (< $generated@@113 ($generated@@19 0)) (and (=> (= (ControlFlow 0 10) 7) $generated@@149) (=> (= (ControlFlow 0 10) 8) $generated@@148)))))
(let (($generated@@151  (=> (<= ($generated@@19 0) $generated@@113) (and (=> (= (ControlFlow 0 9) 7) $generated@@149) (=> (= (ControlFlow 0 9) 8) $generated@@148)))))
(let (($generated@@152  (and (=> (= (ControlFlow 0 11) 9) $generated@@151) (=> (= (ControlFlow 0 11) 10) $generated@@150))))
(let (($generated@@153 true))
(let (($generated@@154  (and (=> (= (ControlFlow 0 12) 11) $generated@@152) (=> (= (ControlFlow 0 12) 5) $generated@@153))))
(let (($generated@@155  (=> (and (and ($generated@@96 $generated@@114) ($generated@@98 $generated@@114)) (= $generated@@99 $generated@@114)) (=> (and (and (and (forall (($generated@@156 Int) ) (!  (=> (and (<= ($generated@@19 0) $generated@@156) (< $generated@@156 100)) ($generated@@100 $generated@@156 $generated@@156))
 :pattern ( ($generated@@100 $generated@@156 $generated@@156))
)) (= $generated@@115 ($generated@@19 34))) (and ($generated@@92 $generated@@4 ($generated@@8 $generated@@115) $generated $generated@@114) (= $generated@@116 ($generated@@19 34)))) (and (and ($generated@@92 $generated@@4 ($generated@@8 $generated@@116) $generated $generated@@114) ($generated@@103 ($generated@@19 34) ($generated@@19 34))) (and ($generated@@103 ($generated@@19 34) ($generated@@19 34)) (= (ControlFlow 0 4) (- 0 3))))) ($generated@@100 ($generated@@19 34) ($generated@@19 34))))))
(let (($generated@@157  (and (=> (= (ControlFlow 0 13) 12) $generated@@154) (=> (= (ControlFlow 0 13) 4) $generated@@155))))
(let (($generated@@158  (=> (and (and (and (and (not ($generated@@7 ($generated@@21 $generated@@3 ($generated@@6 true)))) (not ($generated@@7 ($generated@@21 $generated@@3 ($generated@@6 true))))) (not ($generated@@7 ($generated@@21 $generated@@3 ($generated@@6 true))))) (not ($generated@@7 ($generated@@21 $generated@@3 ($generated@@6 true))))) (= (ControlFlow 0 2) (- 0 1))) false)))
(let (($generated@@159  (=> (= $generated@@117 ($generated@@33 $generated@@118 $generated@@99 $generated@@1 false)) (and (and (and (and (=> (= (ControlFlow 0 39) 38) $generated@@126) (=> (= (ControlFlow 0 39) 31) $generated@@136)) (=> (= (ControlFlow 0 39) 22) $generated@@146)) (=> (= (ControlFlow 0 39) 13) $generated@@157)) (=> (= (ControlFlow 0 39) 2) $generated@@158)))))
(let (($generated@@160  (=> (and (and ($generated@@96 $generated@@99) ($generated@@98 $generated@@99)) (and (= 2 $generated@@119) (= (ControlFlow 0 40) 39))) $generated@@159)))
$generated@@160))))))))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
