(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun |Set#UnionOne| (T@U T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun |Set#Empty| () T@U)
(declare-fun |Set#Card| (T@U) Int)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun |MultiSet#UnionOne| (T@U T@U) T@U)
(declare-fun |MultiSet#Multiplicity| (T@U T@U) Int)
(declare-fun |MultiSet#Card| (T@U) Int)
(declare-fun |MultiSet#Empty| () T@U)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (forall ((a T@U) (x@@2 T@U) ) (! (|Set#IsMember| (|Set#UnionOne| a x@@2) x@@2)
 :pattern ( (|Set#UnionOne| a x@@2))
)))
(assert (forall ((a@@0 T@U) (x@@3 T@U) (y T@U) ) (!  (=> (|Set#IsMember| a@@0 y) (|Set#IsMember| (|Set#UnionOne| a@@0 x@@3) y))
 :pattern ( (|Set#UnionOne| a@@0 x@@3) (|Set#IsMember| a@@0 y))
)))
(assert (forall ((a@@1 T@U) (x@@4 T@U) (o T@U) ) (! (= (|Set#IsMember| (|Set#UnionOne| a@@1 x@@4) o)  (or (= o x@@4) (|Set#IsMember| a@@1 o)))
 :pattern ( (|Set#IsMember| (|Set#UnionOne| a@@1 x@@4) o))
)))
(assert (forall ((o@@0 T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o@@0))
 :pattern ( (|Set#IsMember| |Set#Empty| o@@0))
)))
(assert (forall ((s T@U) ) (!  (and (= (= (|Set#Card| s) 0) (= s |Set#Empty|)) (=> (or (not (= (|Set#Card| s) 0)) (not true)) (exists ((x@@5 T@U) ) (! (|Set#IsMember| s x@@5)
 :pattern ( (|Set#IsMember| s x@@5))
))))
 :pattern ( (|Set#Card| s))
)))
(assert (forall ((x@@6 Int) ) (! (= (LitInt x@@6) x@@6)
 :pattern ( (LitInt x@@6))
)))
(assert (forall ((x@@7 T@U) (T T@T) ) (! (= (Lit T x@@7) x@@7)
 :pattern ( (Lit T x@@7))
)))
(assert (forall ((x@@8 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@8)) x@@8)
 :pattern ( ($Unbox T@@0 x@@8))
)))
(assert (forall ((a@@2 T@U) (x@@9 T@U) (y@@0 T@U) ) (!  (=> (or (not (= x@@9 y@@0)) (not true)) (= (|MultiSet#Multiplicity| a@@2 y@@0) (|MultiSet#Multiplicity| (|MultiSet#UnionOne| a@@2 x@@9) y@@0)))
 :pattern ( (|MultiSet#UnionOne| a@@2 x@@9) (|MultiSet#Multiplicity| a@@2 y@@0))
)))
(assert (forall ((a@@3 T@U) (x@@10 T@U) ) (! (= (|MultiSet#Card| (|MultiSet#UnionOne| a@@3 x@@10)) (+ (|MultiSet#Card| a@@3) 1))
 :pattern ( (|MultiSet#Card| (|MultiSet#UnionOne| a@@3 x@@10)))
)))
(assert (forall ((s@@0 T@U) ) (! (<= 0 (|Set#Card| s@@0))
 :pattern ( (|Set#Card| s@@0))
)))
(assert (forall ((s@@1 T@U) ) (! (<= 0 (|MultiSet#Card| s@@1))
 :pattern ( (|MultiSet#Card| s@@1))
)))
(assert (forall ((o@@1 T@U) ) (! (= (|MultiSet#Multiplicity| |MultiSet#Empty| o@@1) 0)
 :pattern ( (|MultiSet#Multiplicity| |MultiSet#Empty| o@@1))
)))
(assert (forall ((a@@4 T@U) (x@@11 T@U) ) (! (= (|MultiSet#Multiplicity| (|MultiSet#UnionOne| a@@4 x@@11) x@@11) (+ (|MultiSet#Multiplicity| a@@4 x@@11) 1))
 :pattern ( (|MultiSet#UnionOne| a@@4 x@@11))
)))
(assert (forall ((x@@12 T@U) (T@@1 T@T) ) (! (= ($Unbox T@@1 ($Box T@@1 x@@12)) x@@12)
 :pattern ( ($Box T@@1 x@@12))
)))
(assert (forall ((s@@2 T@U) ) (!  (and (= (= (|MultiSet#Card| s@@2) 0) (= s@@2 |MultiSet#Empty|)) (=> (or (not (= (|MultiSet#Card| s@@2) 0)) (not true)) (exists ((x@@13 T@U) ) (! (< 0 (|MultiSet#Multiplicity| s@@2 x@@13))
 :pattern ( (|MultiSet#Multiplicity| s@@2 x@@13))
))))
 :pattern ( (|MultiSet#Card| s@@2))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0 t1 t2 (MapType0Store t0 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 3)) (= (Ctor FieldType) 4)) (forall ((t0@@0 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 (MapType1Store t0@@0 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :weight 0
))) (= (Ctor BoxType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 6))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((a@@5 T@U) (x@@14 T@U) ) (!  (=> (|Set#IsMember| a@@5 x@@14) (= (|Set#Card| (|Set#UnionOne| a@@5 x@@14)) (|Set#Card| a@@5)))
 :pattern ( (|Set#Card| (|Set#UnionOne| a@@5 x@@14)))
)))
(assert (forall ((x@@15 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@15))) (Lit BoxType ($Box intType (int_2_U x@@15))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@15))))
)))
(assert (forall ((x@@16 T@U) (T@@2 T@T) ) (! (= ($Box T@@2 (Lit T@@2 x@@16)) (Lit BoxType ($Box T@@2 x@@16)))
 :pattern ( ($Box T@@2 (Lit T@@2 x@@16)))
)))
(assert (forall ((a@@6 T@U) (x@@17 T@U) (y@@1 T@U) ) (!  (=> (< 0 (|MultiSet#Multiplicity| a@@6 y@@1)) (< 0 (|MultiSet#Multiplicity| (|MultiSet#UnionOne| a@@6 x@@17) y@@1)))
 :pattern ( (|MultiSet#UnionOne| a@@6 x@@17) (|MultiSet#Multiplicity| a@@6 y@@1))
)))
(assert (forall ((a@@7 T@U) (x@@18 T@U) (o@@2 T@U) ) (! (= (< 0 (|MultiSet#Multiplicity| (|MultiSet#UnionOne| a@@7 x@@18) o@@2))  (or (= o@@2 x@@18) (< 0 (|MultiSet#Multiplicity| a@@7 o@@2))))
 :pattern ( (|MultiSet#Multiplicity| (|MultiSet#UnionOne| a@@7 x@@18) o@@2))
)))
(assert (forall ((a@@8 T@U) (x@@19 T@U) ) (!  (=> (not (|Set#IsMember| a@@8 x@@19)) (= (|Set#Card| (|Set#UnionOne| a@@8 x@@19)) (+ (|Set#Card| a@@8) 1)))
 :pattern ( (|Set#Card| (|Set#UnionOne| a@@8 x@@19)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |x#0| () Int)
(declare-fun |y#0| () Int)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $Heap () T@U)
(declare-fun alloc () T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun $FunctionContextHeight () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 13) (let ((anon9_Else_correct  (=> (and (= |x#0| |y#0|) (= (ControlFlow 0 6) (- 0 5))) (<= (LitInt 2) (|Set#Card| (|Set#UnionOne| (|Set#UnionOne| |Set#Empty| ($Box intType (int_2_U |x#0|))) ($Box intType (int_2_U |y#0|))))))))
(let ((anon9_Then_correct  (=> (and (or (not (= |x#0| |y#0|)) (not true)) (= (ControlFlow 0 4) (- 0 3))) (<= (LitInt 2) (|Set#Card| (|Set#UnionOne| (|Set#UnionOne| |Set#Empty| ($Box intType (int_2_U |x#0|))) ($Box intType (int_2_U |y#0|))))))))
(let ((anon3_correct  (and (=> (= (ControlFlow 0 7) (- 0 9)) (<= (LitInt 1) (|Set#Card| (|Set#UnionOne| (|Set#UnionOne| |Set#Empty| ($Box intType (int_2_U |x#0|))) ($Box intType (int_2_U |y#0|)))))) (and (=> (= (ControlFlow 0 7) (- 0 8)) (<= (|Set#Card| (|Set#UnionOne| (|Set#UnionOne| |Set#Empty| ($Box intType (int_2_U |x#0|))) ($Box intType (int_2_U |y#0|)))) (LitInt 2))) (=> (and (<= (LitInt 1) (|Set#Card| (|Set#UnionOne| (|Set#UnionOne| |Set#Empty| ($Box intType (int_2_U |x#0|))) ($Box intType (int_2_U |y#0|))))) (<= (|Set#Card| (|Set#UnionOne| (|Set#UnionOne| |Set#Empty| ($Box intType (int_2_U |x#0|))) ($Box intType (int_2_U |y#0|)))) (LitInt 2))) (and (=> (= (ControlFlow 0 7) 4) anon9_Then_correct) (=> (= (ControlFlow 0 7) 6) anon9_Else_correct)))))))
(let ((anon8_Else_correct  (=> (and (< (|Set#Card| (|Set#UnionOne| (|Set#UnionOne| |Set#Empty| ($Box intType (int_2_U |x#0|))) ($Box intType (int_2_U |y#0|)))) (LitInt 1)) (= (ControlFlow 0 11) 7)) anon3_correct)))
(let ((anon8_Then_correct  (=> (and (<= (LitInt 1) (|Set#Card| (|Set#UnionOne| (|Set#UnionOne| |Set#Empty| ($Box intType (int_2_U |x#0|))) ($Box intType (int_2_U |y#0|))))) (= (ControlFlow 0 10) 7)) anon3_correct)))
(let ((anon7_Else_correct  (=> (= (ControlFlow 0 2) (- 0 1)) (= (|MultiSet#Card| (|MultiSet#UnionOne| (|MultiSet#UnionOne| |MultiSet#Empty| ($Box intType (int_2_U |x#0|))) ($Box intType (int_2_U |y#0|)))) (LitInt 2)))))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (and (and (=> (= (ControlFlow 0 12) 2) anon7_Else_correct) (=> (= (ControlFlow 0 12) 10) anon8_Then_correct)) (=> (= (ControlFlow 0 12) 11) anon8_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (and (= 0 $FunctionContextHeight) (= (ControlFlow 0 13) 12))) anon0_correct)))
PreconditionGeneratedEntry_correct)))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 6) (- 5))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
