(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U T@U) T@U)
(declare-fun $generated@@0 (T@U T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 (Bool) T@U)
(declare-fun $generated@@6 (T@U) Bool)
(declare-fun $generated@@7 (Int) T@U)
(declare-fun $generated@@8 (T@U) Int)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@25 () T@U)
(declare-fun $generated@@27 (T@U) Int)
(declare-fun $generated@@30 (Int) Int)
(declare-fun $generated@@32 (T@T T@U) T@U)
(declare-fun $generated@@35 (T@T T@U) T@U)
(declare-fun $generated@@36 (T@T T@U) T@U)
(declare-fun $generated@@39 (T@U T@U) T@U)
(declare-fun $generated@@40 (T@U T@U) Int)
(declare-fun $generated@@44 (T@U) Int)
(declare-fun $generated@@49 () T@U)
(declare-fun $generated@@57 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@58 () T@T)
(declare-fun $generated@@59 () T@T)
(declare-fun $generated@@60 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@61 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@62 () T@T)
(declare-fun $generated@@63 (T@T T@T) T@T)
(declare-fun $generated@@64 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@65 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@66 (T@T) T@T)
(declare-fun $generated@@67 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (forall (($generated@@11 Bool) ) (! (= ($generated@@6 ($generated@@5 $generated@@11)) $generated@@11)
 :pattern ( ($generated@@5 $generated@@11))
))) (forall (($generated@@12 T@U) ) (! (= ($generated@@5 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 Int) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))))
(assert (forall (($generated@@17 T@U) ($generated@@18 T@U) ) (! ($generated@@0 ($generated $generated@@17 $generated@@18) $generated@@18)
 :pattern ( ($generated $generated@@17 $generated@@18))
)))
(assert (forall (($generated@@19 T@U) ($generated@@20 T@U) ($generated@@21 T@U) ) (!  (=> ($generated@@0 $generated@@19 $generated@@21) ($generated@@0 ($generated $generated@@19 $generated@@20) $generated@@21))
 :pattern ( ($generated $generated@@19 $generated@@20) ($generated@@0 $generated@@19 $generated@@21))
)))
(assert (forall (($generated@@22 T@U) ($generated@@23 T@U) ($generated@@24 T@U) ) (! (= ($generated@@0 ($generated $generated@@22 $generated@@23) $generated@@24)  (or (= $generated@@24 $generated@@23) ($generated@@0 $generated@@22 $generated@@24)))
 :pattern ( ($generated@@0 ($generated $generated@@22 $generated@@23) $generated@@24))
)))
(assert (forall (($generated@@26 T@U) ) (!  (not ($generated@@0 $generated@@25 $generated@@26))
 :pattern ( ($generated@@0 $generated@@25 $generated@@26))
)))
(assert (forall (($generated@@28 T@U) ) (!  (and (= (= ($generated@@27 $generated@@28) 0) (= $generated@@28 $generated@@25)) (=> (or (not (= ($generated@@27 $generated@@28) 0)) (not true)) (exists (($generated@@29 T@U) ) (! ($generated@@0 $generated@@28 $generated@@29)
 :pattern ( ($generated@@0 $generated@@28 $generated@@29))
))))
 :pattern ( ($generated@@27 $generated@@28))
)))
(assert (forall (($generated@@31 Int) ) (! (= ($generated@@30 $generated@@31) $generated@@31)
 :pattern ( ($generated@@30 $generated@@31))
)))
(assert (forall (($generated@@33 T@U) ($generated@@34 T@T) ) (! (= ($generated@@32 $generated@@34 $generated@@33) $generated@@33)
 :pattern ( ($generated@@32 $generated@@34 $generated@@33))
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@T) ) (! (= ($generated@@36 $generated@@38 ($generated@@35 $generated@@38 $generated@@37)) $generated@@37)
 :pattern ( ($generated@@35 $generated@@38 $generated@@37))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ($generated@@43 T@U) ) (!  (=> (or (not (= $generated@@42 $generated@@43)) (not true)) (= ($generated@@40 $generated@@41 $generated@@43) ($generated@@40 ($generated@@39 $generated@@41 $generated@@42) $generated@@43)))
 :pattern ( ($generated@@39 $generated@@41 $generated@@42) ($generated@@40 $generated@@41 $generated@@43))
)))
(assert (forall (($generated@@45 T@U) ($generated@@46 T@U) ) (! (= ($generated@@44 ($generated@@39 $generated@@45 $generated@@46)) (+ ($generated@@44 $generated@@45) 1))
 :pattern ( ($generated@@44 ($generated@@39 $generated@@45 $generated@@46)))
)))
(assert (forall (($generated@@47 T@U) ) (! (<= 0 ($generated@@27 $generated@@47))
 :pattern ( ($generated@@27 $generated@@47))
)))
(assert (forall (($generated@@48 T@U) ) (! (<= 0 ($generated@@44 $generated@@48))
 :pattern ( ($generated@@44 $generated@@48))
)))
(assert (forall (($generated@@50 T@U) ) (! (= ($generated@@40 $generated@@49 $generated@@50) 0)
 :pattern ( ($generated@@40 $generated@@49 $generated@@50))
)))
(assert (forall (($generated@@51 T@U) ($generated@@52 T@U) ) (! (= ($generated@@40 ($generated@@39 $generated@@51 $generated@@52) $generated@@52) (+ ($generated@@40 $generated@@51 $generated@@52) 1))
 :pattern ( ($generated@@39 $generated@@51 $generated@@52))
)))
(assert (forall (($generated@@53 T@U) ($generated@@54 T@T) ) (! (= ($generated@@35 $generated@@54 ($generated@@36 $generated@@54 $generated@@53)) $generated@@53)
 :pattern ( ($generated@@36 $generated@@54 $generated@@53))
)))
(assert (forall (($generated@@55 T@U) ) (!  (and (= (= ($generated@@44 $generated@@55) 0) (= $generated@@55 $generated@@49)) (=> (or (not (= ($generated@@44 $generated@@55) 0)) (not true)) (exists (($generated@@56 T@U) ) (! (< 0 ($generated@@40 $generated@@55 $generated@@56))
 :pattern ( ($generated@@40 $generated@@55 $generated@@56))
))))
 :pattern ( ($generated@@44 $generated@@55))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@68 T@T) ($generated@@69 T@T) ($generated@@70 T@T) ($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@U) ) (! (= ($generated@@57 $generated@@68 $generated@@69 $generated@@70 ($generated@@64 $generated@@68 $generated@@69 $generated@@70 $generated@@72 $generated@@73 $generated@@74 $generated@@71) $generated@@73 $generated@@74) $generated@@71)
 :weight 0
)) (and (forall (($generated@@75 T@T) ($generated@@76 T@T) ($generated@@77 T@T) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ) (!  (or (= $generated@@80 $generated@@82) (= ($generated@@57 $generated@@75 $generated@@76 $generated@@77 ($generated@@64 $generated@@75 $generated@@76 $generated@@77 $generated@@79 $generated@@80 $generated@@81 $generated@@78) $generated@@82 $generated@@83) ($generated@@57 $generated@@75 $generated@@76 $generated@@77 $generated@@79 $generated@@82 $generated@@83)))
 :weight 0
)) (forall (($generated@@84 T@T) ($generated@@85 T@T) ($generated@@86 T@T) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ) (!  (or (= $generated@@90 $generated@@92) (= ($generated@@57 $generated@@84 $generated@@85 $generated@@86 ($generated@@64 $generated@@84 $generated@@85 $generated@@86 $generated@@88 $generated@@89 $generated@@90 $generated@@87) $generated@@91 $generated@@92) ($generated@@57 $generated@@84 $generated@@85 $generated@@86 $generated@@88 $generated@@91 $generated@@92)))
 :weight 0
)))) (= ($generated@@1 $generated@@58) 3)) (= ($generated@@1 $generated@@59) 4)) (forall (($generated@@93 T@T) ($generated@@94 T@T) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (! (= ($generated@@61 $generated@@93 $generated@@94 ($generated@@65 $generated@@93 $generated@@94 $generated@@96 $generated@@97 $generated@@95) $generated@@97) $generated@@95)
 :weight 0
))) (forall (($generated@@98 T@T) ($generated@@99 T@T) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ) (!  (or (= $generated@@102 $generated@@103) (= ($generated@@61 $generated@@98 $generated@@99 ($generated@@65 $generated@@98 $generated@@99 $generated@@101 $generated@@102 $generated@@100) $generated@@103) ($generated@@61 $generated@@98 $generated@@99 $generated@@101 $generated@@103)))
 :weight 0
))) (= ($generated@@1 $generated@@62) 5)) (forall (($generated@@104 T@T) ($generated@@105 T@T) ) (= ($generated@@1 ($generated@@63 $generated@@104 $generated@@105)) 6))) (forall (($generated@@106 T@T) ($generated@@107 T@T) ) (! (= ($generated@@66 ($generated@@63 $generated@@106 $generated@@107)) $generated@@106)
 :pattern ( ($generated@@63 $generated@@106 $generated@@107))
))) (forall (($generated@@108 T@T) ($generated@@109 T@T) ) (! (= ($generated@@67 ($generated@@63 $generated@@108 $generated@@109)) $generated@@109)
 :pattern ( ($generated@@63 $generated@@108 $generated@@109))
))))
(assert (forall (($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 Bool) ($generated@@114 T@U) ($generated@@115 T@U) ) (! (= ($generated@@6 ($generated@@57 $generated@@58 $generated@@59 $generated@@2 ($generated@@60 $generated@@110 $generated@@111 $generated@@112 $generated@@113) $generated@@114 $generated@@115))  (=> (and (or (not (= $generated@@114 $generated@@110)) (not true)) ($generated@@6 ($generated@@35 $generated@@2 ($generated@@61 $generated@@59 $generated@@62 ($generated@@61 $generated@@58 ($generated@@63 $generated@@59 $generated@@62) $generated@@111 $generated@@114) $generated@@112)))) $generated@@113))
 :pattern ( ($generated@@57 $generated@@58 $generated@@59 $generated@@2 ($generated@@60 $generated@@110 $generated@@111 $generated@@112 $generated@@113) $generated@@114 $generated@@115))
)))
(assert (forall (($generated@@116 T@U) ($generated@@117 T@U) ) (!  (=> ($generated@@0 $generated@@116 $generated@@117) (= ($generated@@27 ($generated $generated@@116 $generated@@117)) ($generated@@27 $generated@@116)))
 :pattern ( ($generated@@27 ($generated $generated@@116 $generated@@117)))
)))
(assert (forall (($generated@@118 Int) ) (! (= ($generated@@36 $generated@@3 ($generated@@7 ($generated@@30 $generated@@118))) ($generated@@32 $generated@@62 ($generated@@36 $generated@@3 ($generated@@7 $generated@@118))))
 :pattern ( ($generated@@36 $generated@@3 ($generated@@7 ($generated@@30 $generated@@118))))
)))
(assert (forall (($generated@@119 T@U) ($generated@@120 T@T) ) (! (= ($generated@@36 $generated@@120 ($generated@@32 $generated@@120 $generated@@119)) ($generated@@32 $generated@@62 ($generated@@36 $generated@@120 $generated@@119)))
 :pattern ( ($generated@@36 $generated@@120 ($generated@@32 $generated@@120 $generated@@119)))
)))
(assert (forall (($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ) (!  (=> (< 0 ($generated@@40 $generated@@121 $generated@@123)) (< 0 ($generated@@40 ($generated@@39 $generated@@121 $generated@@122) $generated@@123)))
 :pattern ( ($generated@@39 $generated@@121 $generated@@122) ($generated@@40 $generated@@121 $generated@@123))
)))
(assert (forall (($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ) (! (= (< 0 ($generated@@40 ($generated@@39 $generated@@124 $generated@@125) $generated@@126))  (or (= $generated@@126 $generated@@125) (< 0 ($generated@@40 $generated@@124 $generated@@126))))
 :pattern ( ($generated@@40 ($generated@@39 $generated@@124 $generated@@125) $generated@@126))
)))
(assert (forall (($generated@@127 T@U) ($generated@@128 T@U) ) (!  (=> (not ($generated@@0 $generated@@127 $generated@@128)) (= ($generated@@27 ($generated $generated@@127 $generated@@128)) (+ ($generated@@27 $generated@@127) 1)))
 :pattern ( ($generated@@27 ($generated $generated@@127 $generated@@128)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@129 () Int)
(declare-fun $generated@@130 () Int)
(declare-fun $generated@@131 () T@U)
(declare-fun $generated@@132 () T@U)
(declare-fun $generated@@133 () T@U)
(declare-fun $generated@@134 () T@U)
(declare-fun $generated@@135 (T@U) Bool)
(declare-fun $generated@@136 (T@U) Bool)
(declare-fun $generated@@137 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 13) (let (($generated@@138  (=> (and (= $generated@@129 $generated@@130) (= (ControlFlow 0 6) (- 0 5))) (<= ($generated@@30 2) ($generated@@27 ($generated ($generated $generated@@25 ($generated@@36 $generated@@3 ($generated@@7 $generated@@129))) ($generated@@36 $generated@@3 ($generated@@7 $generated@@130))))))))
(let (($generated@@139  (=> (and (or (not (= $generated@@129 $generated@@130)) (not true)) (= (ControlFlow 0 4) (- 0 3))) (<= ($generated@@30 2) ($generated@@27 ($generated ($generated $generated@@25 ($generated@@36 $generated@@3 ($generated@@7 $generated@@129))) ($generated@@36 $generated@@3 ($generated@@7 $generated@@130))))))))
(let (($generated@@140  (and (=> (= (ControlFlow 0 7) (- 0 9)) (<= ($generated@@30 1) ($generated@@27 ($generated ($generated $generated@@25 ($generated@@36 $generated@@3 ($generated@@7 $generated@@129))) ($generated@@36 $generated@@3 ($generated@@7 $generated@@130)))))) (and (=> (= (ControlFlow 0 7) (- 0 8)) (<= ($generated@@27 ($generated ($generated $generated@@25 ($generated@@36 $generated@@3 ($generated@@7 $generated@@129))) ($generated@@36 $generated@@3 ($generated@@7 $generated@@130)))) ($generated@@30 2))) (=> (and (<= ($generated@@30 1) ($generated@@27 ($generated ($generated $generated@@25 ($generated@@36 $generated@@3 ($generated@@7 $generated@@129))) ($generated@@36 $generated@@3 ($generated@@7 $generated@@130))))) (<= ($generated@@27 ($generated ($generated $generated@@25 ($generated@@36 $generated@@3 ($generated@@7 $generated@@129))) ($generated@@36 $generated@@3 ($generated@@7 $generated@@130)))) ($generated@@30 2))) (and (=> (= (ControlFlow 0 7) 4) $generated@@139) (=> (= (ControlFlow 0 7) 6) $generated@@138)))))))
(let (($generated@@141  (=> (and (< ($generated@@27 ($generated ($generated $generated@@25 ($generated@@36 $generated@@3 ($generated@@7 $generated@@129))) ($generated@@36 $generated@@3 ($generated@@7 $generated@@130)))) ($generated@@30 1)) (= (ControlFlow 0 11) 7)) $generated@@140)))
(let (($generated@@142  (=> (and (<= ($generated@@30 1) ($generated@@27 ($generated ($generated $generated@@25 ($generated@@36 $generated@@3 ($generated@@7 $generated@@129))) ($generated@@36 $generated@@3 ($generated@@7 $generated@@130))))) (= (ControlFlow 0 10) 7)) $generated@@140)))
(let (($generated@@143  (=> (= (ControlFlow 0 2) (- 0 1)) (= ($generated@@44 ($generated@@39 ($generated@@39 $generated@@49 ($generated@@36 $generated@@3 ($generated@@7 $generated@@129))) ($generated@@36 $generated@@3 ($generated@@7 $generated@@130)))) ($generated@@30 2)))))
(let (($generated@@144  (=> (= $generated@@131 ($generated@@60 $generated@@132 $generated@@133 $generated@@134 false)) (and (and (=> (= (ControlFlow 0 12) 2) $generated@@143) (=> (= (ControlFlow 0 12) 10) $generated@@142)) (=> (= (ControlFlow 0 12) 11) $generated@@141)))))
(let (($generated@@145  (=> (and (and ($generated@@135 $generated@@133) ($generated@@136 $generated@@133)) (and (= 0 $generated@@137) (= (ControlFlow 0 13) 12))) $generated@@144)))
$generated@@145)))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 6) (- 5))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
