(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (Bool) T@U)
(declare-fun $generated@@7 (T@U) Bool)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun $generated@@9 (T@U) Int)
(declare-fun $generated@@10 (Real) T@U)
(declare-fun $generated@@11 (T@U) Real)
(declare-fun $generated@@18 () Int)
(declare-fun $generated@@19 (Int) Bool)
(declare-fun $generated@@20 (Int) Bool)
(declare-fun $generated@@21 (Int) Int)
(declare-fun $generated@@22 (T@T T@U) T@U)
(declare-fun $generated@@24 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@25 () T@U)
(declare-fun $generated@@29 (T@U T@U) Bool)
(declare-fun $generated@@30 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@31 () T@T)
(declare-fun $generated@@32 () T@T)
(declare-fun $generated@@33 () T@T)
(declare-fun $generated@@34 (T@T T@T) T@T)
(declare-fun $generated@@35 (T@T T@U) T@U)
(declare-fun $generated@@36 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@37 (T@T) T@T)
(declare-fun $generated@@38 (T@T) T@T)
(declare-fun $generated@@62 (T@T T@U) T@U)
(declare-fun $generated@@75 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@76 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@77 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@109 (T@U) T@U)
(declare-fun $generated@@110 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@4) 1)) (= ($generated@@2 $generated@@5) 2)) (forall (($generated@@12 Bool) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Int) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Real) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))))
(assert (distinct $generated $generated@@0 $generated@@1)
)
(assert  (=> (<= 0 $generated@@18) (forall (($generated@@23 Int) ) (!  (=> (or ($generated@@20 $generated@@23) (and (< 0 $generated@@18) (<= ($generated@@21 0) $generated@@23))) (= ($generated@@19 $generated@@23) ($generated@@7 ($generated@@22 $generated@@3 ($generated@@6 true)))))
 :pattern ( ($generated@@19 $generated@@23))
))))
(assert (forall (($generated@@26 T@U) ($generated@@27 T@U) ) (! ($generated@@24 $generated@@4 $generated@@26 $generated@@25 $generated@@27)
 :pattern ( ($generated@@24 $generated@@4 $generated@@26 $generated@@25 $generated@@27))
)))
(assert  (=> (<= 0 $generated@@18) (forall (($generated@@28 Int) ) (!  (=> (or ($generated@@20 ($generated@@21 $generated@@28)) (and (< 0 $generated@@18) (<= ($generated@@21 0) $generated@@28))) (= ($generated@@19 ($generated@@21 $generated@@28)) ($generated@@7 ($generated@@22 $generated@@3 ($generated@@6 true)))))
 :weight 3
 :pattern ( ($generated@@19 ($generated@@21 $generated@@28)))
))))
(assert  (and (and (and (and (and (and (and (forall (($generated@@39 T@T) ($generated@@40 T@T) ($generated@@41 T@U) ($generated@@42 T@U) ($generated@@43 T@U) ) (! (= ($generated@@30 $generated@@39 $generated@@40 ($generated@@36 $generated@@39 $generated@@40 $generated@@42 $generated@@43 $generated@@41) $generated@@43) $generated@@41)
 :weight 0
)) (forall (($generated@@44 T@T) ($generated@@45 T@T) ($generated@@46 T@U) ($generated@@47 T@U) ($generated@@48 T@U) ($generated@@49 T@U) ) (!  (or (= $generated@@48 $generated@@49) (= ($generated@@30 $generated@@44 $generated@@45 ($generated@@36 $generated@@44 $generated@@45 $generated@@47 $generated@@48 $generated@@46) $generated@@49) ($generated@@30 $generated@@44 $generated@@45 $generated@@47 $generated@@49)))
 :weight 0
))) (= ($generated@@2 $generated@@31) 3)) (= ($generated@@2 $generated@@32) 4)) (= ($generated@@2 $generated@@33) 5)) (forall (($generated@@50 T@T) ($generated@@51 T@T) ) (= ($generated@@2 ($generated@@34 $generated@@50 $generated@@51)) 6))) (forall (($generated@@52 T@T) ($generated@@53 T@T) ) (! (= ($generated@@37 ($generated@@34 $generated@@52 $generated@@53)) $generated@@52)
 :pattern ( ($generated@@34 $generated@@52 $generated@@53))
))) (forall (($generated@@54 T@T) ($generated@@55 T@T) ) (! (= ($generated@@38 ($generated@@34 $generated@@54 $generated@@55)) $generated@@55)
 :pattern ( ($generated@@34 $generated@@54 $generated@@55))
))))
(assert (forall (($generated@@56 T@U) ($generated@@57 T@U) ) (!  (=> ($generated@@29 $generated@@56 $generated@@57) (forall (($generated@@58 T@U) ) (!  (=> ($generated@@7 ($generated@@35 $generated@@3 ($generated@@30 $generated@@31 $generated@@32 ($generated@@30 $generated@@33 ($generated@@34 $generated@@31 $generated@@32) $generated@@56 $generated@@58) $generated))) ($generated@@7 ($generated@@35 $generated@@3 ($generated@@30 $generated@@31 $generated@@32 ($generated@@30 $generated@@33 ($generated@@34 $generated@@31 $generated@@32) $generated@@57 $generated@@58) $generated))))
 :pattern ( ($generated@@30 $generated@@31 $generated@@32 ($generated@@30 $generated@@33 ($generated@@34 $generated@@31 $generated@@32) $generated@@57 $generated@@58) $generated))
)))
 :pattern ( ($generated@@29 $generated@@56 $generated@@57))
)))
(assert (forall (($generated@@59 Int) ) (! (= ($generated@@21 $generated@@59) $generated@@59)
 :pattern ( ($generated@@21 $generated@@59))
)))
(assert (forall (($generated@@60 T@U) ($generated@@61 T@T) ) (! (= ($generated@@22 $generated@@61 $generated@@60) $generated@@60)
 :pattern ( ($generated@@22 $generated@@61 $generated@@60))
)))
(assert (forall (($generated@@63 T@U) ($generated@@64 T@T) ) (! (= ($generated@@62 $generated@@64 ($generated@@35 $generated@@64 $generated@@63)) $generated@@63)
 :pattern ( ($generated@@35 $generated@@64 $generated@@63))
)))
(assert (forall (($generated@@65 T@U) ($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@T) ) (!  (=> ($generated@@29 $generated@@65 $generated@@66) (=> ($generated@@24 $generated@@69 $generated@@67 $generated@@68 $generated@@65) ($generated@@24 $generated@@69 $generated@@67 $generated@@68 $generated@@66)))
 :pattern ( ($generated@@29 $generated@@65 $generated@@66) ($generated@@24 $generated@@69 $generated@@67 $generated@@68 $generated@@65))
)))
(assert (forall (($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (!  (=> (or (not (= $generated@@70 $generated@@72)) (not true)) (=> (and ($generated@@29 $generated@@70 $generated@@71) ($generated@@29 $generated@@71 $generated@@72)) ($generated@@29 $generated@@70 $generated@@72)))
 :pattern ( ($generated@@29 $generated@@70 $generated@@71) ($generated@@29 $generated@@71 $generated@@72))
)))
(assert (forall (($generated@@73 T@U) ($generated@@74 T@T) ) (! (= ($generated@@35 $generated@@74 ($generated@@62 $generated@@74 $generated@@73)) $generated@@73)
 :pattern ( ($generated@@62 $generated@@74 $generated@@73))
)))
(assert  (and (forall (($generated@@78 T@T) ($generated@@79 T@T) ($generated@@80 T@T) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ) (! (= ($generated@@75 $generated@@78 $generated@@79 $generated@@80 ($generated@@77 $generated@@78 $generated@@79 $generated@@80 $generated@@82 $generated@@83 $generated@@84 $generated@@81) $generated@@83 $generated@@84) $generated@@81)
 :weight 0
)) (and (forall (($generated@@85 T@T) ($generated@@86 T@T) ($generated@@87 T@T) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ) (!  (or (= $generated@@90 $generated@@92) (= ($generated@@75 $generated@@85 $generated@@86 $generated@@87 ($generated@@77 $generated@@85 $generated@@86 $generated@@87 $generated@@89 $generated@@90 $generated@@91 $generated@@88) $generated@@92 $generated@@93) ($generated@@75 $generated@@85 $generated@@86 $generated@@87 $generated@@89 $generated@@92 $generated@@93)))
 :weight 0
)) (forall (($generated@@94 T@T) ($generated@@95 T@T) ($generated@@96 T@T) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@100 $generated@@102) (= ($generated@@75 $generated@@94 $generated@@95 $generated@@96 ($generated@@77 $generated@@94 $generated@@95 $generated@@96 $generated@@98 $generated@@99 $generated@@100 $generated@@97) $generated@@101 $generated@@102) ($generated@@75 $generated@@94 $generated@@95 $generated@@96 $generated@@98 $generated@@101 $generated@@102)))
 :weight 0
)))))
(assert (forall (($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 Bool) ($generated@@107 T@U) ($generated@@108 T@U) ) (! (= ($generated@@7 ($generated@@75 $generated@@33 $generated@@31 $generated@@3 ($generated@@76 $generated@@103 $generated@@104 $generated@@105 $generated@@106) $generated@@107 $generated@@108))  (=> (and (or (not (= $generated@@107 $generated@@103)) (not true)) ($generated@@7 ($generated@@35 $generated@@3 ($generated@@30 $generated@@31 $generated@@32 ($generated@@30 $generated@@33 ($generated@@34 $generated@@31 $generated@@32) $generated@@104 $generated@@107) $generated@@105)))) $generated@@106))
 :pattern ( ($generated@@75 $generated@@33 $generated@@31 $generated@@3 ($generated@@76 $generated@@103 $generated@@104 $generated@@105 $generated@@106) $generated@@107 $generated@@108))
)))
(assert (= ($generated@@109 $generated@@25) $generated@@0))
(assert (= ($generated@@110 $generated@@25) $generated@@1))
(assert (forall (($generated@@111 Int) ) (! (= ($generated@@62 $generated@@4 ($generated@@8 ($generated@@21 $generated@@111))) ($generated@@22 $generated@@32 ($generated@@62 $generated@@4 ($generated@@8 $generated@@111))))
 :pattern ( ($generated@@62 $generated@@4 ($generated@@8 ($generated@@21 $generated@@111))))
)))
(assert (forall (($generated@@112 T@U) ($generated@@113 T@T) ) (! (= ($generated@@62 $generated@@113 ($generated@@22 $generated@@113 $generated@@112)) ($generated@@22 $generated@@32 ($generated@@62 $generated@@113 $generated@@112)))
 :pattern ( ($generated@@62 $generated@@113 ($generated@@22 $generated@@113 $generated@@112)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@114 () Int)
(declare-fun $generated@@115 () Int)
(declare-fun $generated@@116 () Int)
(declare-fun $generated@@117 () Int)
(declare-fun $generated@@118 () Int)
(declare-fun $generated@@119 () T@U)
(declare-fun $generated@@120 () Bool)
(declare-fun $generated@@121 () T@U)
(declare-fun $generated@@122 () T@U)
(declare-fun $generated@@123 () Int)
(declare-fun $generated@@124 () Int)
(declare-fun $generated@@125 (T@U) Bool)
(declare-fun $generated@@126 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 17) (let (($generated@@127  (=> ($generated@@20 $generated@@114) (and (=> (= (ControlFlow 0 6) (- 0 9)) (=> ($generated@@20 $generated@@114) (or ($generated@@19 $generated@@114) ($generated@@7 ($generated@@22 $generated@@3 ($generated@@6 true)))))) (and (=> (= (ControlFlow 0 6) (- 0 8)) ($generated@@7 ($generated@@22 $generated@@3 ($generated@@6 false)))) (=> (and (and ($generated@@19 $generated@@114) false) (= $generated@@115 (+ $generated@@116 1))) (and (=> (= (ControlFlow 0 6) (- 0 7)) (or (<= 0 $generated@@117) (= (- $generated@@118 $generated@@115) $generated@@117))) (=> (or (<= 0 $generated@@117) (= (- $generated@@118 $generated@@115) $generated@@117)) (=> (= (ControlFlow 0 6) (- 0 5)) (< (- $generated@@118 $generated@@115) $generated@@117))))))))))
(let (($generated@@128  (=> (and (not ($generated@@19 $generated@@114)) (= (ControlFlow 0 11) 6)) $generated@@127)))
(let (($generated@@129  (=> (and ($generated@@19 $generated@@114) (= (ControlFlow 0 10) 6)) $generated@@127)))
(let (($generated@@130  (=> (and (and (< $generated@@116 $generated@@118) (= $generated@@117 (- $generated@@118 $generated@@116))) (and ($generated@@24 $generated@@4 ($generated@@8 $generated@@114) $generated@@25 $generated@@119) ($generated@@20 $generated@@114))) (and (=> (= (ControlFlow 0 12) 10) $generated@@129) (=> (= (ControlFlow 0 12) 11) $generated@@128)))))
(let (($generated@@131  (=> (and (<= $generated@@118 $generated@@116) (= (ControlFlow 0 4) (- 0 3))) (= $generated@@118 ($generated@@21 0)))))
(let (($generated@@132  (=> $generated@@120 (and (=> (= (ControlFlow 0 13) 4) $generated@@131) (=> (= (ControlFlow 0 13) 12) $generated@@130)))))
(let (($generated@@133 true))
(let (($generated@@134  (and (=> (= (ControlFlow 0 14) 2) $generated@@133) (=> (= (ControlFlow 0 14) 13) $generated@@132))))
(let (($generated@@135 true))
(let (($generated@@136  (=> (and (not false) (= $generated@@116 0)) (=> (and (and (forall (($generated@@137 T@U) ) (!  (=> (and (or (not (= $generated@@137 $generated@@121)) (not true)) ($generated@@7 ($generated@@35 $generated@@3 ($generated@@30 $generated@@31 $generated@@32 ($generated@@30 $generated@@33 ($generated@@34 $generated@@31 $generated@@32) $generated@@119 $generated@@137) $generated)))) (= ($generated@@30 $generated@@33 ($generated@@34 $generated@@31 $generated@@32) $generated@@119 $generated@@137) ($generated@@30 $generated@@33 ($generated@@34 $generated@@31 $generated@@32) $generated@@119 $generated@@137)))
 :pattern ( ($generated@@30 $generated@@33 ($generated@@34 $generated@@31 $generated@@32) $generated@@119 $generated@@137))
)) ($generated@@29 $generated@@119 $generated@@119)) (and (forall (($generated@@138 T@U) ($generated@@139 T@U) ) (!  (=> (and (or (not (= $generated@@138 $generated@@121)) (not true)) ($generated@@7 ($generated@@35 $generated@@3 ($generated@@30 $generated@@31 $generated@@32 ($generated@@30 $generated@@33 ($generated@@34 $generated@@31 $generated@@32) $generated@@119 $generated@@138) $generated)))) (or (= ($generated@@30 $generated@@31 $generated@@32 ($generated@@30 $generated@@33 ($generated@@34 $generated@@31 $generated@@32) $generated@@119 $generated@@138) $generated@@139) ($generated@@30 $generated@@31 $generated@@32 ($generated@@30 $generated@@33 ($generated@@34 $generated@@31 $generated@@32) $generated@@119 $generated@@138) $generated@@139)) ($generated@@7 ($generated@@75 $generated@@33 $generated@@31 $generated@@3 $generated@@122 $generated@@138 $generated@@139))))
 :pattern ( ($generated@@30 $generated@@31 $generated@@32 ($generated@@30 $generated@@33 ($generated@@34 $generated@@31 $generated@@32) $generated@@119 $generated@@138) $generated@@139))
)) (<= (- $generated@@118 $generated@@116) $generated@@123))) (and (=> (= (ControlFlow 0 15) 1) $generated@@135) (=> (= (ControlFlow 0 15) 14) $generated@@134))))))
(let (($generated@@140  (=> (and (and (= $generated@@122 ($generated@@76 $generated@@121 $generated@@119 $generated false)) (= $generated@@124 ($generated@@21 0))) (and (= $generated@@123 (- $generated@@118 $generated@@124)) (= (ControlFlow 0 16) 15))) $generated@@136)))
(let (($generated@@141  (=> (and ($generated@@125 $generated@@119) ($generated@@126 $generated@@119)) (=> (and (and (<= ($generated@@21 0) $generated@@118) (<= ($generated@@21 0) $generated@@114)) (and (= 1 $generated@@18) (= (ControlFlow 0 17) 16))) $generated@@140))))
$generated@@141)))))))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 6) (- 8))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
