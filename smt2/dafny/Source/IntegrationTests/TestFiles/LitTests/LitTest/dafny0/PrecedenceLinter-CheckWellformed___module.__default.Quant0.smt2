(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TBool () T@U)
(declare-fun TChar () T@U)
(declare-fun TagBool () T@U)
(declare-fun TagChar () T@U)
(declare-fun TagSeq () T@U)
(declare-fun alloc () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun |Seq#Empty| () T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.Quant0 (T@U) Bool)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun SeqType () T@T)
(declare-fun |_module.__default.Quant0#canCall| (T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun TSeq (T@U) T@U)
(declare-fun |Seq#Equal| (T@U T@U) Bool)
(declare-fun |char#ToInt| (T@U) Int)
(declare-fun charType () T@T)
(declare-fun |char#FromInt| (Int) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun LitInt (Int) Int)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TBool TChar TagBool TagChar TagSeq alloc)
)
(assert (= (Tag TBool) TagBool))
(assert (= (Tag TChar) TagChar))
(assert (= (|Seq#Length| |Seq#Empty|) 0))
(assert  (and (= (Ctor SeqType) 3) (= (Ctor charType) 4)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|s#0| T@U) ) (!  (=> (or (|_module.__default.Quant0#canCall| (Lit SeqType |s#0|)) (and (< 0 $FunctionContextHeight) ($Is SeqType |s#0| (TSeq TChar)))) (= (_module.__default.Quant0 (Lit SeqType |s#0|))  (and (and (not (|Seq#Equal| |s#0| |Seq#Empty|)) (or (and (<= (|char#ToInt| (Lit charType (|char#FromInt| 97))) (|char#ToInt| ($Unbox charType (|Seq#Index| (Lit SeqType |s#0|) (LitInt 0))))) (<= (|char#ToInt| ($Unbox charType (|Seq#Index| (Lit SeqType |s#0|) (LitInt 0)))) (|char#ToInt| (Lit charType (|char#FromInt| 122))))) (and (<= (|char#ToInt| (Lit charType (|char#FromInt| 65))) (|char#ToInt| ($Unbox charType (|Seq#Index| (Lit SeqType |s#0|) (LitInt 0))))) (<= (|char#ToInt| ($Unbox charType (|Seq#Index| (Lit SeqType |s#0|) (LitInt 0)))) (|char#ToInt| (Lit charType (|char#FromInt| 90))))))) (forall ((|i#1| Int) ) (!  (=> (and (<= (LitInt 1) |i#1|) (< |i#1| (|Seq#Length| (Lit SeqType |s#0|)))) (or (or (and (<= (|char#ToInt| (Lit charType (|char#FromInt| 97))) (|char#ToInt| ($Unbox charType (|Seq#Index| (Lit SeqType |s#0|) |i#1|)))) (<= (|char#ToInt| ($Unbox charType (|Seq#Index| (Lit SeqType |s#0|) |i#1|))) (|char#ToInt| (Lit charType (|char#FromInt| 122))))) (and (<= (|char#ToInt| (Lit charType (|char#FromInt| 65))) (|char#ToInt| ($Unbox charType (|Seq#Index| (Lit SeqType |s#0|) |i#1|)))) (<= (|char#ToInt| ($Unbox charType (|Seq#Index| (Lit SeqType |s#0|) |i#1|))) (|char#ToInt| (Lit charType (|char#FromInt| 90)))))) (and (<= (|char#ToInt| (Lit charType (|char#FromInt| 48))) (|char#ToInt| ($Unbox charType (|Seq#Index| (Lit SeqType |s#0|) |i#1|)))) (<= (|char#ToInt| ($Unbox charType (|Seq#Index| (Lit SeqType |s#0|) |i#1|))) (|char#ToInt| (Lit charType (|char#FromInt| 57)))))))
 :pattern ( ($Unbox charType (|Seq#Index| |s#0| |i#1|)))
)))))
 :weight 3
 :pattern ( (_module.__default.Quant0 (Lit SeqType |s#0|)))
))))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((s0 T@U) (s1 T@U) ) (! (= (|Seq#Equal| s0 s1)  (and (= (|Seq#Length| s0) (|Seq#Length| s1)) (forall ((j Int) ) (!  (=> (and (<= 0 j) (< j (|Seq#Length| s0))) (= (|Seq#Index| s0 j) (|Seq#Index| s1 j)))
 :pattern ( (|Seq#Index| s0 j))
 :pattern ( (|Seq#Index| s1 j))
))))
 :pattern ( (|Seq#Equal| s0 s1))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((a T@U) (b T@U) ) (!  (=> (|Seq#Equal| a b) (= a b))
 :pattern ( (|Seq#Equal| a b))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|s#0@@0| T@U) ) (!  (=> (or (|_module.__default.Quant0#canCall| |s#0@@0|) (and (< 0 $FunctionContextHeight) ($Is SeqType |s#0@@0| (TSeq TChar)))) (= (_module.__default.Quant0 |s#0@@0|)  (and (and (not (|Seq#Equal| |s#0@@0| |Seq#Empty|)) (or (and (<= (|char#ToInt| (Lit charType (|char#FromInt| 97))) (|char#ToInt| ($Unbox charType (|Seq#Index| |s#0@@0| (LitInt 0))))) (<= (|char#ToInt| ($Unbox charType (|Seq#Index| |s#0@@0| (LitInt 0)))) (|char#ToInt| (Lit charType (|char#FromInt| 122))))) (and (<= (|char#ToInt| (Lit charType (|char#FromInt| 65))) (|char#ToInt| ($Unbox charType (|Seq#Index| |s#0@@0| (LitInt 0))))) (<= (|char#ToInt| ($Unbox charType (|Seq#Index| |s#0@@0| (LitInt 0)))) (|char#ToInt| (Lit charType (|char#FromInt| 90))))))) (forall ((|i#0| Int) ) (!  (=> (and (<= (LitInt 1) |i#0|) (< |i#0| (|Seq#Length| |s#0@@0|))) (or (or (and (<= (|char#ToInt| (Lit charType (|char#FromInt| 97))) (|char#ToInt| ($Unbox charType (|Seq#Index| |s#0@@0| |i#0|)))) (<= (|char#ToInt| ($Unbox charType (|Seq#Index| |s#0@@0| |i#0|))) (|char#ToInt| (Lit charType (|char#FromInt| 122))))) (and (<= (|char#ToInt| (Lit charType (|char#FromInt| 65))) (|char#ToInt| ($Unbox charType (|Seq#Index| |s#0@@0| |i#0|)))) (<= (|char#ToInt| ($Unbox charType (|Seq#Index| |s#0@@0| |i#0|))) (|char#ToInt| (Lit charType (|char#FromInt| 90)))))) (and (<= (|char#ToInt| (Lit charType (|char#FromInt| 48))) (|char#ToInt| ($Unbox charType (|Seq#Index| |s#0@@0| |i#0|)))) (<= (|char#ToInt| ($Unbox charType (|Seq#Index| |s#0@@0| |i#0|))) (|char#ToInt| (Lit charType (|char#FromInt| 57)))))))
 :pattern ( ($Unbox charType (|Seq#Index| |s#0@@0| |i#0|)))
)))))
 :pattern ( (_module.__default.Quant0 |s#0@@0|))
))))
(assert (forall ((bx T@U) ) (!  (=> ($IsBox bx TBool) (and (= ($Box boolType ($Unbox boolType bx)) bx) ($Is boolType ($Unbox boolType bx) TBool)))
 :pattern ( ($IsBox bx TBool))
)))
(assert (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 TChar) (and (= ($Box charType ($Unbox charType bx@@0)) bx@@0) ($Is charType ($Unbox charType bx@@0) TChar)))
 :pattern ( ($IsBox bx@@0 TChar))
)))
(assert (forall ((v T@U) (t T@U) (T@@1 T@T) ) (! (= ($IsBox ($Box T@@1 v) t) ($Is T@@1 v t))
 :pattern ( ($IsBox ($Box T@@1 v) t))
)))
(assert (forall ((s T@U) ) (! (<= 0 (|Seq#Length| s))
 :pattern ( (|Seq#Length| s))
)))
(assert (forall ((t@@0 T@U) ) (! (= (Inv0_TSeq (TSeq t@@0)) t@@0)
 :pattern ( (TSeq t@@0))
)))
(assert (forall ((t@@1 T@U) ) (! (= (Tag (TSeq t@@1)) TagSeq)
 :pattern ( (TSeq t@@1))
)))
(assert (forall ((x@@5 T@U) (T@@2 T@T) ) (! (= ($Unbox T@@2 ($Box T@@2 x@@5)) x@@5)
 :pattern ( ($Box T@@2 x@@5))
)))
(assert (forall ((n Int) ) (!  (=> (or (and (<= 0 n) (< n 55296)) (and (<= 57344 n) (< n 1114112))) (= (|char#ToInt| (|char#FromInt| n)) n))
 :pattern ( (|char#FromInt| n))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0 t1 t2 (MapType0Store t0 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 5)) (= (Ctor FieldType) 6)) (forall ((t0@@0 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 (MapType1Store t0@@0 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :weight 0
))) (= (Ctor BoxType) 7)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 8))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((bx@@1 T@U) (t@@2 T@U) ) (!  (=> ($IsBox bx@@1 (TSeq t@@2)) (and (= ($Box SeqType ($Unbox SeqType bx@@1)) bx@@1) ($Is SeqType ($Unbox SeqType bx@@1) (TSeq t@@2))))
 :pattern ( ($IsBox bx@@1 (TSeq t@@2)))
)))
(assert (forall ((ch T@U) ) (!  (and (= (|char#FromInt| (|char#ToInt| ch)) ch) (or (and (<= 0 (|char#ToInt| ch)) (< (|char#ToInt| ch) 55296)) (and (<= 57344 (|char#ToInt| ch)) (< (|char#ToInt| ch) 1114112))))
 :pattern ( (|char#ToInt| ch))
)))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((x@@7 T@U) (T@@3 T@T) ) (! (= ($Box T@@3 (Lit T@@3 x@@7)) (Lit BoxType ($Box T@@3 x@@7)))
 :pattern ( ($Box T@@3 (Lit T@@3 x@@7)))
)))
(assert (forall ((s@@0 T@U) ) (!  (=> (= (|Seq#Length| s@@0) 0) (= s@@0 |Seq#Empty|))
 :pattern ( (|Seq#Length| s@@0))
)))
(assert (forall ((v@@0 T@U) (t0@@1 T@U) ) (! (= ($Is SeqType v@@0 (TSeq t0@@1)) (forall ((i Int) ) (!  (=> (and (<= 0 i) (< i (|Seq#Length| v@@0))) ($IsBox (|Seq#Index| v@@0 i) t0@@1))
 :pattern ( (|Seq#Index| v@@0 i))
)))
 :pattern ( ($Is SeqType v@@0 (TSeq t0@@1)))
)))
(assert (forall ((v@@1 T@U) ) (! ($Is boolType v@@1 TBool)
 :pattern ( ($Is boolType v@@1 TBool))
)))
(assert (forall ((v@@2 T@U) ) (! ($Is charType v@@2 TChar)
 :pattern ( ($Is charType v@@2 TChar))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |s#0@@1| () T@U)
(declare-fun |i#2@0| () Int)
(declare-fun $_ReadsFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $Heap () T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsHeapAnchor (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 40) (let ((anon31_Else_correct true))
(let ((anon23_correct true))
(let ((anon38_Else_correct  (=> (and (< (|char#ToInt| ($Unbox charType (|Seq#Index| |s#0@@1| |i#2@0|))) (|char#ToInt| (Lit charType (|char#FromInt| 48)))) (= (ControlFlow 0 9) 2)) anon23_correct)))
(let ((anon38_Then_correct  (=> (<= (|char#ToInt| (Lit charType (|char#FromInt| 48))) (|char#ToInt| ($Unbox charType (|Seq#Index| |s#0@@1| |i#2@0|)))) (and (=> (= (ControlFlow 0 7) (- 0 8)) (and (<= 0 |i#2@0|) (< |i#2@0| (|Seq#Length| |s#0@@1|)))) (=> (and (<= 0 |i#2@0|) (< |i#2@0| (|Seq#Length| |s#0@@1|))) (=> (= (ControlFlow 0 7) 2) anon23_correct))))))
(let ((anon37_Then_correct  (=> (not (or (and (<= (|char#ToInt| (Lit charType (|char#FromInt| 97))) (|char#ToInt| ($Unbox charType (|Seq#Index| |s#0@@1| |i#2@0|)))) (<= (|char#ToInt| ($Unbox charType (|Seq#Index| |s#0@@1| |i#2@0|))) (|char#ToInt| (Lit charType (|char#FromInt| 122))))) (and (<= (|char#ToInt| (Lit charType (|char#FromInt| 65))) (|char#ToInt| ($Unbox charType (|Seq#Index| |s#0@@1| |i#2@0|)))) (<= (|char#ToInt| ($Unbox charType (|Seq#Index| |s#0@@1| |i#2@0|))) (|char#ToInt| (Lit charType (|char#FromInt| 90))))))) (and (=> (= (ControlFlow 0 10) (- 0 11)) (and (<= 0 |i#2@0|) (< |i#2@0| (|Seq#Length| |s#0@@1|)))) (=> (and (<= 0 |i#2@0|) (< |i#2@0| (|Seq#Length| |s#0@@1|))) (and (=> (= (ControlFlow 0 10) 7) anon38_Then_correct) (=> (= (ControlFlow 0 10) 9) anon38_Else_correct)))))))
(let ((anon37_Else_correct  (=> (and (or (and (<= (|char#ToInt| (Lit charType (|char#FromInt| 97))) (|char#ToInt| ($Unbox charType (|Seq#Index| |s#0@@1| |i#2@0|)))) (<= (|char#ToInt| ($Unbox charType (|Seq#Index| |s#0@@1| |i#2@0|))) (|char#ToInt| (Lit charType (|char#FromInt| 122))))) (and (<= (|char#ToInt| (Lit charType (|char#FromInt| 65))) (|char#ToInt| ($Unbox charType (|Seq#Index| |s#0@@1| |i#2@0|)))) (<= (|char#ToInt| ($Unbox charType (|Seq#Index| |s#0@@1| |i#2@0|))) (|char#ToInt| (Lit charType (|char#FromInt| 90)))))) (= (ControlFlow 0 6) 2)) anon23_correct)))
(let ((anon36_Else_correct  (=> (< (|char#ToInt| ($Unbox charType (|Seq#Index| |s#0@@1| |i#2@0|))) (|char#ToInt| (Lit charType (|char#FromInt| 65)))) (and (=> (= (ControlFlow 0 15) 10) anon37_Then_correct) (=> (= (ControlFlow 0 15) 6) anon37_Else_correct)))))
(let ((anon36_Then_correct  (=> (<= (|char#ToInt| (Lit charType (|char#FromInt| 65))) (|char#ToInt| ($Unbox charType (|Seq#Index| |s#0@@1| |i#2@0|)))) (and (=> (= (ControlFlow 0 13) (- 0 14)) (and (<= 0 |i#2@0|) (< |i#2@0| (|Seq#Length| |s#0@@1|)))) (=> (and (<= 0 |i#2@0|) (< |i#2@0| (|Seq#Length| |s#0@@1|))) (and (=> (= (ControlFlow 0 13) 10) anon37_Then_correct) (=> (= (ControlFlow 0 13) 6) anon37_Else_correct)))))))
(let ((anon35_Then_correct  (=> (not (and (<= (|char#ToInt| (Lit charType (|char#FromInt| 97))) (|char#ToInt| ($Unbox charType (|Seq#Index| |s#0@@1| |i#2@0|)))) (<= (|char#ToInt| ($Unbox charType (|Seq#Index| |s#0@@1| |i#2@0|))) (|char#ToInt| (Lit charType (|char#FromInt| 122)))))) (and (=> (= (ControlFlow 0 16) (- 0 17)) (and (<= 0 |i#2@0|) (< |i#2@0| (|Seq#Length| |s#0@@1|)))) (=> (and (<= 0 |i#2@0|) (< |i#2@0| (|Seq#Length| |s#0@@1|))) (and (=> (= (ControlFlow 0 16) 13) anon36_Then_correct) (=> (= (ControlFlow 0 16) 15) anon36_Else_correct)))))))
(let ((anon35_Else_correct  (=> (and (<= (|char#ToInt| (Lit charType (|char#FromInt| 97))) (|char#ToInt| ($Unbox charType (|Seq#Index| |s#0@@1| |i#2@0|)))) (<= (|char#ToInt| ($Unbox charType (|Seq#Index| |s#0@@1| |i#2@0|))) (|char#ToInt| (Lit charType (|char#FromInt| 122))))) (and (=> (= (ControlFlow 0 12) 10) anon37_Then_correct) (=> (= (ControlFlow 0 12) 6) anon37_Else_correct)))))
(let ((anon34_Else_correct  (=> (< (|char#ToInt| ($Unbox charType (|Seq#Index| |s#0@@1| |i#2@0|))) (|char#ToInt| (Lit charType (|char#FromInt| 97)))) (and (=> (= (ControlFlow 0 20) 16) anon35_Then_correct) (=> (= (ControlFlow 0 20) 12) anon35_Else_correct)))))
(let ((anon34_Then_correct  (=> (<= (|char#ToInt| (Lit charType (|char#FromInt| 97))) (|char#ToInt| ($Unbox charType (|Seq#Index| |s#0@@1| |i#2@0|)))) (and (=> (= (ControlFlow 0 18) (- 0 19)) (and (<= 0 |i#2@0|) (< |i#2@0| (|Seq#Length| |s#0@@1|)))) (=> (and (<= 0 |i#2@0|) (< |i#2@0| (|Seq#Length| |s#0@@1|))) (and (=> (= (ControlFlow 0 18) 16) anon35_Then_correct) (=> (= (ControlFlow 0 18) 12) anon35_Else_correct)))))))
(let ((anon33_Then_correct  (=> (and (<= (LitInt 1) |i#2@0|) (< |i#2@0| (|Seq#Length| |s#0@@1|))) (and (=> (= (ControlFlow 0 21) (- 0 22)) (and (<= 0 |i#2@0|) (< |i#2@0| (|Seq#Length| |s#0@@1|)))) (=> (and (<= 0 |i#2@0|) (< |i#2@0| (|Seq#Length| |s#0@@1|))) (and (=> (= (ControlFlow 0 21) 18) anon34_Then_correct) (=> (= (ControlFlow 0 21) 20) anon34_Else_correct)))))))
(let ((anon33_Else_correct  (=> (and (not (and (<= (LitInt 1) |i#2@0|) (< |i#2@0| (|Seq#Length| |s#0@@1|)))) (= (ControlFlow 0 5) 2)) anon23_correct)))
(let ((anon32_Else_correct  (=> (< |i#2@0| (LitInt 1)) (and (=> (= (ControlFlow 0 24) 21) anon33_Then_correct) (=> (= (ControlFlow 0 24) 5) anon33_Else_correct)))))
(let ((anon32_Then_correct  (=> (<= (LitInt 1) |i#2@0|) (and (=> (= (ControlFlow 0 23) 21) anon33_Then_correct) (=> (= (ControlFlow 0 23) 5) anon33_Else_correct)))))
(let ((anon31_Then_correct  (and (=> (= (ControlFlow 0 25) 23) anon32_Then_correct) (=> (= (ControlFlow 0 25) 24) anon32_Else_correct))))
(let ((anon30_Then_correct  (=> (and (not (|Seq#Equal| |s#0@@1| |Seq#Empty|)) (or (and (<= (|char#ToInt| (Lit charType (|char#FromInt| 97))) (|char#ToInt| ($Unbox charType (|Seq#Index| |s#0@@1| (LitInt 0))))) (<= (|char#ToInt| ($Unbox charType (|Seq#Index| |s#0@@1| (LitInt 0)))) (|char#ToInt| (Lit charType (|char#FromInt| 122))))) (and (<= (|char#ToInt| (Lit charType (|char#FromInt| 65))) (|char#ToInt| ($Unbox charType (|Seq#Index| |s#0@@1| (LitInt 0))))) (<= (|char#ToInt| ($Unbox charType (|Seq#Index| |s#0@@1| (LitInt 0)))) (|char#ToInt| (Lit charType (|char#FromInt| 90))))))) (and (=> (= (ControlFlow 0 26) 25) anon31_Then_correct) (=> (= (ControlFlow 0 26) 4) anon31_Else_correct)))))
(let ((anon30_Else_correct  (=> (and (not (and (not (|Seq#Equal| |s#0@@1| |Seq#Empty|)) (or (and (<= (|char#ToInt| (Lit charType (|char#FromInt| 97))) (|char#ToInt| ($Unbox charType (|Seq#Index| |s#0@@1| (LitInt 0))))) (<= (|char#ToInt| ($Unbox charType (|Seq#Index| |s#0@@1| (LitInt 0)))) (|char#ToInt| (Lit charType (|char#FromInt| 122))))) (and (<= (|char#ToInt| (Lit charType (|char#FromInt| 65))) (|char#ToInt| ($Unbox charType (|Seq#Index| |s#0@@1| (LitInt 0))))) (<= (|char#ToInt| ($Unbox charType (|Seq#Index| |s#0@@1| (LitInt 0)))) (|char#ToInt| (Lit charType (|char#FromInt| 90)))))))) (= (ControlFlow 0 3) 2)) anon23_correct)))
(let ((anon29_Else_correct  (=> (< (|char#ToInt| ($Unbox charType (|Seq#Index| |s#0@@1| (LitInt 0)))) (|char#ToInt| (Lit charType (|char#FromInt| 65)))) (and (=> (= (ControlFlow 0 31) 26) anon30_Then_correct) (=> (= (ControlFlow 0 31) 3) anon30_Else_correct)))))
(let ((anon29_Then_correct  (=> (<= (|char#ToInt| (Lit charType (|char#FromInt| 65))) (|char#ToInt| ($Unbox charType (|Seq#Index| |s#0@@1| (LitInt 0))))) (and (=> (= (ControlFlow 0 29) (- 0 30)) (and (<= 0 (LitInt 0)) (< (LitInt 0) (|Seq#Length| |s#0@@1|)))) (=> (and (<= 0 (LitInt 0)) (< (LitInt 0) (|Seq#Length| |s#0@@1|))) (and (=> (= (ControlFlow 0 29) 26) anon30_Then_correct) (=> (= (ControlFlow 0 29) 3) anon30_Else_correct)))))))
(let ((anon28_Then_correct  (=> (not (and (<= (|char#ToInt| (Lit charType (|char#FromInt| 97))) (|char#ToInt| ($Unbox charType (|Seq#Index| |s#0@@1| (LitInt 0))))) (<= (|char#ToInt| ($Unbox charType (|Seq#Index| |s#0@@1| (LitInt 0)))) (|char#ToInt| (Lit charType (|char#FromInt| 122)))))) (and (=> (= (ControlFlow 0 32) (- 0 33)) (and (<= 0 (LitInt 0)) (< (LitInt 0) (|Seq#Length| |s#0@@1|)))) (=> (and (<= 0 (LitInt 0)) (< (LitInt 0) (|Seq#Length| |s#0@@1|))) (and (=> (= (ControlFlow 0 32) 29) anon29_Then_correct) (=> (= (ControlFlow 0 32) 31) anon29_Else_correct)))))))
(let ((anon28_Else_correct  (=> (and (<= (|char#ToInt| (Lit charType (|char#FromInt| 97))) (|char#ToInt| ($Unbox charType (|Seq#Index| |s#0@@1| (LitInt 0))))) (<= (|char#ToInt| ($Unbox charType (|Seq#Index| |s#0@@1| (LitInt 0)))) (|char#ToInt| (Lit charType (|char#FromInt| 122))))) (and (=> (= (ControlFlow 0 28) 26) anon30_Then_correct) (=> (= (ControlFlow 0 28) 3) anon30_Else_correct)))))
(let ((anon27_Else_correct  (=> (< (|char#ToInt| ($Unbox charType (|Seq#Index| |s#0@@1| (LitInt 0)))) (|char#ToInt| (Lit charType (|char#FromInt| 97)))) (and (=> (= (ControlFlow 0 36) 32) anon28_Then_correct) (=> (= (ControlFlow 0 36) 28) anon28_Else_correct)))))
(let ((anon27_Then_correct  (=> (<= (|char#ToInt| (Lit charType (|char#FromInt| 97))) (|char#ToInt| ($Unbox charType (|Seq#Index| |s#0@@1| (LitInt 0))))) (and (=> (= (ControlFlow 0 34) (- 0 35)) (and (<= 0 (LitInt 0)) (< (LitInt 0) (|Seq#Length| |s#0@@1|)))) (=> (and (<= 0 (LitInt 0)) (< (LitInt 0) (|Seq#Length| |s#0@@1|))) (and (=> (= (ControlFlow 0 34) 32) anon28_Then_correct) (=> (= (ControlFlow 0 34) 28) anon28_Else_correct)))))))
(let ((anon26_Then_correct  (=> (not (|Seq#Equal| |s#0@@1| |Seq#Empty|)) (and (=> (= (ControlFlow 0 37) (- 0 38)) (and (<= 0 (LitInt 0)) (< (LitInt 0) (|Seq#Length| |s#0@@1|)))) (=> (and (<= 0 (LitInt 0)) (< (LitInt 0) (|Seq#Length| |s#0@@1|))) (and (=> (= (ControlFlow 0 37) 34) anon27_Then_correct) (=> (= (ControlFlow 0 37) 36) anon27_Else_correct)))))))
(let ((anon26_Else_correct  (=> (|Seq#Equal| |s#0@@1| |Seq#Empty|) (and (=> (= (ControlFlow 0 27) 26) anon30_Then_correct) (=> (= (ControlFlow 0 27) 3) anon30_Else_correct)))))
(let ((anon25_Then_correct true))
(let ((anon0_correct  (=> (= $_ReadsFrame@0 (|lambda#0| null $Heap alloc false)) (and (and (=> (= (ControlFlow 0 39) 1) anon25_Then_correct) (=> (= (ControlFlow 0 39) 37) anon26_Then_correct)) (=> (= (ControlFlow 0 39) 27) anon26_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) ($Is SeqType |s#0@@1| (TSeq TChar))) (and (= 0 $FunctionContextHeight) (= (ControlFlow 0 40) 39))) anon0_correct)))
PreconditionGeneratedEntry_correct)))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
