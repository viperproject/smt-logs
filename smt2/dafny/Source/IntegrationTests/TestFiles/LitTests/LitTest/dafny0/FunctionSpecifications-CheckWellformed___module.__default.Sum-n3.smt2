(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 (T@T) Int)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 (Bool) T@U)
(declare-fun $generated@@11 (T@U) Bool)
(declare-fun $generated@@12 (Int) T@U)
(declare-fun $generated@@13 (T@U) Int)
(declare-fun $generated@@14 (Real) T@U)
(declare-fun $generated@@15 (T@U) Real)
(declare-fun $generated@@22 (T@U) T@U)
(declare-fun $generated@@23 () Int)
(declare-fun $generated@@24 (T@U Int) Int)
(declare-fun $generated@@25 (T@U) T@U)
(declare-fun $generated@@26 (Int) Bool)
(declare-fun $generated@@27 (Int) Int)
(declare-fun $generated@@30 (T@U Int) Int)
(declare-fun $generated@@31 (Int) Bool)
(declare-fun $generated@@36 (T@U) T@U)
(declare-fun $generated@@37 () T@U)
(declare-fun $generated@@38 (T@T T@U T@U) Bool)
(declare-fun $generated@@39 () T@T)
(declare-fun $generated@@40 () T@U)
(declare-fun $generated@@41 (T@U T@U) Bool)
(declare-fun $generated@@44 (T@U) Bool)
(declare-fun $generated@@45 (T@U) Int)
(declare-fun $generated@@46 (T@U) T@U)
(declare-fun $generated@@50 (T@T T@U) T@U)
(declare-fun $generated@@53 (T@U) Int)
(declare-fun $generated@@54 (T@U) Bool)
(declare-fun $generated@@55 (T@U) Bool)
(declare-fun $generated@@56 () T@U)
(declare-fun $generated@@60 (T@U) Int)
(declare-fun $generated@@61 (T@U) Bool)
(declare-fun $generated@@67 (T@T T@U) T@U)
(declare-fun $generated@@68 (T@T T@U) T@U)
(declare-fun $generated@@71 (Int T@U) T@U)
(declare-fun $generated@@99 (T@U) Int)
(declare-fun $generated@@106 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@107 () T@T)
(declare-fun $generated@@108 () T@T)
(declare-fun $generated@@109 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@110 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@111 () T@T)
(declare-fun $generated@@112 (T@T T@T) T@T)
(declare-fun $generated@@113 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@114 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@115 (T@T) T@T)
(declare-fun $generated@@116 (T@T) T@T)
(declare-fun $generated@@165 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@166 (T@U) Bool)
(declare-fun $generated@@171 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@6 $generated@@7) 0) (= ($generated@@6 $generated@@8) 1)) (= ($generated@@6 $generated@@9) 2)) (forall (($generated@@16 Bool) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Int) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Real) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5)
)
(assert (= ($generated@@22 $generated) $generated@@0))
(assert  (=> (<= 0 $generated@@23) (forall (($generated@@28 T@U) ($generated@@29 Int) ) (!  (=> (or ($generated@@26 $generated@@29) (and (< 0 $generated@@23) (<= ($generated@@27 0) $generated@@29))) (and (=> (<= 2 $generated@@29) (and ($generated@@26 (- $generated@@29 2)) ($generated@@26 (- $generated@@29 1)))) (= ($generated@@24 ($generated@@25 $generated@@28) $generated@@29) (ite (< $generated@@29 2) $generated@@29 (+ ($generated@@24 $generated@@28 (- $generated@@29 2)) ($generated@@24 $generated@@28 (- $generated@@29 1)))))))
 :pattern ( ($generated@@24 ($generated@@25 $generated@@28) $generated@@29))
))))
(assert  (=> (<= 0 $generated@@23) (forall (($generated@@32 T@U) ($generated@@33 Int) ) (!  (=> (or ($generated@@31 $generated@@33) (and (< 0 $generated@@23) (<= ($generated@@27 0) $generated@@33))) (and (=> (<= 2 $generated@@33) (and ($generated@@31 (- $generated@@33 2)) ($generated@@31 (- $generated@@33 1)))) (= ($generated@@30 ($generated@@25 $generated@@32) $generated@@33) (ite (< $generated@@33 2) $generated@@33 (+ ($generated@@30 $generated@@32 (- $generated@@33 2)) ($generated@@30 $generated@@32 (- $generated@@33 1)))))))
 :pattern ( ($generated@@30 ($generated@@25 $generated@@32) $generated@@33))
))))
(assert  (=> (<= 0 $generated@@23) (forall (($generated@@34 T@U) ($generated@@35 Int) ) (!  (=> (or ($generated@@26 $generated@@35) (and (< 0 $generated@@23) (<= ($generated@@27 0) $generated@@35))) (<= ($generated@@27 0) ($generated@@24 $generated@@34 $generated@@35)))
 :pattern ( ($generated@@24 $generated@@34 $generated@@35))
))))
(assert (= ($generated@@36 $generated@@37) $generated@@3))
(assert (= ($generated@@6 $generated@@39) 3))
(assert ($generated@@38 $generated@@39 $generated@@37 $generated@@40))
(assert (forall (($generated@@42 T@U) ($generated@@43 T@U) ) (! (= ($generated@@41 $generated@@42 $generated@@43) (= $generated@@42 $generated@@43))
 :pattern ( ($generated@@41 $generated@@42 $generated@@43))
)))
(assert (forall (($generated@@47 T@U) ($generated@@48 T@U) ) (!  (=> (and ($generated@@44 $generated@@47) ($generated@@44 $generated@@48)) (= ($generated@@41 $generated@@47 $generated@@48)  (and (= ($generated@@45 $generated@@47) ($generated@@45 $generated@@48)) ($generated@@41 ($generated@@46 $generated@@47) ($generated@@46 $generated@@48)))))
 :pattern ( ($generated@@41 $generated@@47 $generated@@48) ($generated@@44 $generated@@47))
 :pattern ( ($generated@@41 $generated@@47 $generated@@48) ($generated@@44 $generated@@48))
)))
(assert (forall (($generated@@49 Int) ) (! (= ($generated@@27 $generated@@49) $generated@@49)
 :pattern ( ($generated@@27 $generated@@49))
)))
(assert (forall (($generated@@51 T@U) ($generated@@52 T@T) ) (! (= ($generated@@50 $generated@@52 $generated@@51) $generated@@51)
 :pattern ( ($generated@@50 $generated@@52 $generated@@51))
)))
(assert  (=> (<= 1 $generated@@23) (forall (($generated@@57 T@U) ) (!  (=> (or ($generated@@54 ($generated@@50 $generated@@39 $generated@@57)) (and (< 1 $generated@@23) ($generated@@38 $generated@@39 $generated@@57 $generated@@40))) (and (=> (not ($generated@@11 ($generated@@50 $generated@@7 ($generated@@10 ($generated@@55 ($generated@@50 $generated@@39 $generated@@57)))))) (let (($generated@@58 ($generated@@27 ($generated@@45 ($generated@@50 $generated@@39 $generated@@57)))))
 (=> (<= 0 $generated@@58) ($generated@@26 $generated@@58)))) (= ($generated@@53 ($generated@@50 $generated@@39 $generated@@57)) (ite ($generated@@55 ($generated@@50 $generated@@39 $generated@@57)) 0 (let (($generated@@59 ($generated@@27 ($generated@@45 ($generated@@50 $generated@@39 $generated@@57)))))
(ite (< $generated@@59 0) 0 ($generated@@24 ($generated@@25 $generated@@56) $generated@@59)))))))
 :weight 3
 :pattern ( ($generated@@53 ($generated@@50 $generated@@39 $generated@@57)))
))))
(assert  (=> (<= 2 $generated@@23) (forall (($generated@@62 T@U) ) (!  (=> (or ($generated@@61 ($generated@@50 $generated@@39 $generated@@62)) (and (< 2 $generated@@23) ($generated@@38 $generated@@39 $generated@@62 $generated@@40))) (and (=> (not ($generated@@11 ($generated@@50 $generated@@7 ($generated@@10 ($generated@@55 ($generated@@50 $generated@@39 $generated@@62)))))) (let (($generated@@63 ($generated@@27 ($generated@@45 ($generated@@50 $generated@@39 $generated@@62)))))
 (=> (<= 0 $generated@@63) ($generated@@31 $generated@@63)))) (= ($generated@@60 ($generated@@50 $generated@@39 $generated@@62)) (ite ($generated@@55 ($generated@@50 $generated@@39 $generated@@62)) 0 (let (($generated@@64 ($generated@@27 ($generated@@45 ($generated@@50 $generated@@39 $generated@@62)))))
(ite (< $generated@@64 0) 0 ($generated@@30 ($generated@@25 $generated@@56) $generated@@64)))))))
 :weight 3
 :pattern ( ($generated@@60 ($generated@@50 $generated@@39 $generated@@62)))
))))
(assert (forall (($generated@@65 T@U) ) (! (= ($generated@@55 $generated@@65) (= ($generated@@36 $generated@@65) $generated@@3))
 :pattern ( ($generated@@55 $generated@@65))
)))
(assert (forall (($generated@@66 T@U) ) (! (= ($generated@@44 $generated@@66) (= ($generated@@36 $generated@@66) $generated@@4))
 :pattern ( ($generated@@44 $generated@@66))
)))
(assert (forall (($generated@@69 T@U) ($generated@@70 T@T) ) (! (= ($generated@@68 $generated@@70 ($generated@@67 $generated@@70 $generated@@69)) $generated@@69)
 :pattern ( ($generated@@67 $generated@@70 $generated@@69))
)))
(assert (forall (($generated@@72 T@U) ) (!  (=> ($generated@@44 $generated@@72) (exists (($generated@@73 Int) ($generated@@74 T@U) ) (= $generated@@72 ($generated@@71 $generated@@73 $generated@@74))))
 :pattern ( ($generated@@44 $generated@@72))
)))
(assert (forall (($generated@@75 T@U) ) (!  (=> ($generated@@55 $generated@@75) (= $generated@@75 $generated@@37))
 :pattern ( ($generated@@55 $generated@@75))
)))
(assert  (=> (<= 2 $generated@@23) (forall (($generated@@76 T@U) ) (!  (=> (or ($generated@@61 $generated@@76) (and (< 2 $generated@@23) ($generated@@38 $generated@@39 $generated@@76 $generated@@40))) (and (<= ($generated@@27 0) ($generated@@53 $generated@@76)) (<= ($generated@@27 0) ($generated@@60 $generated@@76))))
 :pattern ( ($generated@@60 $generated@@76))
))))
(assert  (=> (<= 1 $generated@@23) (forall (($generated@@77 T@U) ) (!  (=> (or ($generated@@54 $generated@@77) (and (< 1 $generated@@23) ($generated@@38 $generated@@39 $generated@@77 $generated@@40))) (and (=> (not ($generated@@55 $generated@@77)) (let (($generated@@78 ($generated@@45 $generated@@77)))
 (=> (<= 0 $generated@@78) ($generated@@26 $generated@@78)))) (= ($generated@@53 $generated@@77) (ite ($generated@@55 $generated@@77) 0 (let (($generated@@79 ($generated@@45 $generated@@77)))
(ite (< $generated@@79 0) 0 ($generated@@24 ($generated@@25 $generated@@56) $generated@@79)))))))
 :pattern ( ($generated@@53 $generated@@77))
))))
(assert  (=> (<= 2 $generated@@23) (forall (($generated@@80 T@U) ) (!  (=> (or ($generated@@61 $generated@@80) (and (< 2 $generated@@23) ($generated@@38 $generated@@39 $generated@@80 $generated@@40))) (and (=> (not ($generated@@55 $generated@@80)) (let (($generated@@81 ($generated@@45 $generated@@80)))
 (=> (<= 0 $generated@@81) ($generated@@31 $generated@@81)))) (= ($generated@@60 $generated@@80) (ite ($generated@@55 $generated@@80) 0 (let (($generated@@82 ($generated@@45 $generated@@80)))
(ite (< $generated@@82 0) 0 ($generated@@30 ($generated@@25 $generated@@56) $generated@@82)))))))
 :pattern ( ($generated@@60 $generated@@80))
))))
(assert  (=> (<= 1 $generated@@23) (forall (($generated@@83 T@U) ) (!  (=> (or ($generated@@54 $generated@@83) (and (< 1 $generated@@23) ($generated@@38 $generated@@39 $generated@@83 $generated@@40))) (<= ($generated@@27 0) ($generated@@53 $generated@@83)))
 :pattern ( ($generated@@53 $generated@@83))
))))
(assert (forall (($generated@@84 T@U) ) (!  (=> ($generated@@38 $generated@@39 $generated@@84 $generated@@40) (or ($generated@@55 $generated@@84) ($generated@@44 $generated@@84)))
 :pattern ( ($generated@@44 $generated@@84) ($generated@@38 $generated@@39 $generated@@84 $generated@@40))
 :pattern ( ($generated@@55 $generated@@84) ($generated@@38 $generated@@39 $generated@@84 $generated@@40))
)))
(assert  (=> (<= 0 $generated@@23) (forall (($generated@@85 T@U) ($generated@@86 Int) ) (!  (=> (or ($generated@@26 ($generated@@27 $generated@@86)) (and (< 0 $generated@@23) (<= ($generated@@27 0) ($generated@@27 $generated@@86)))) (and (=> (not ($generated@@11 ($generated@@50 $generated@@7 ($generated@@10 (< $generated@@86 2))))) (and ($generated@@26 ($generated@@27 (- $generated@@86 2))) ($generated@@26 ($generated@@27 (- $generated@@86 1))))) (= ($generated@@24 ($generated@@25 $generated@@85) ($generated@@27 $generated@@86)) (ite (< $generated@@86 2) $generated@@86 (+ ($generated@@24 ($generated@@25 $generated@@85) ($generated@@27 (- $generated@@86 2))) ($generated@@24 ($generated@@25 $generated@@85) ($generated@@27 (- $generated@@86 1))))))))
 :weight 3
 :pattern ( ($generated@@24 ($generated@@25 $generated@@85) ($generated@@27 $generated@@86)))
))))
(assert  (=> (<= 0 $generated@@23) (forall (($generated@@87 T@U) ($generated@@88 Int) ) (!  (=> (or ($generated@@31 ($generated@@27 $generated@@88)) (and (< 0 $generated@@23) (<= ($generated@@27 0) ($generated@@27 $generated@@88)))) (and (=> (not ($generated@@11 ($generated@@50 $generated@@7 ($generated@@10 (< $generated@@88 2))))) (and ($generated@@31 ($generated@@27 (- $generated@@88 2))) ($generated@@31 ($generated@@27 (- $generated@@88 1))))) (= ($generated@@30 ($generated@@25 $generated@@87) ($generated@@27 $generated@@88)) (ite (< $generated@@88 2) $generated@@88 (+ ($generated@@30 ($generated@@25 $generated@@87) ($generated@@27 (- $generated@@88 2))) ($generated@@30 ($generated@@25 $generated@@87) ($generated@@27 (- $generated@@88 1))))))))
 :weight 3
 :pattern ( ($generated@@30 ($generated@@25 $generated@@87) ($generated@@27 $generated@@88)))
))))
(assert (forall (($generated@@89 T@U) ($generated@@90 T@U) ) (!  (=> (and ($generated@@55 $generated@@89) ($generated@@55 $generated@@90)) ($generated@@41 $generated@@89 $generated@@90))
 :pattern ( ($generated@@41 $generated@@89 $generated@@90) ($generated@@55 $generated@@89))
 :pattern ( ($generated@@41 $generated@@89 $generated@@90) ($generated@@55 $generated@@90))
)))
(assert (forall (($generated@@91 Int) ($generated@@92 T@U) ) (! (= ($generated@@36 ($generated@@71 $generated@@91 $generated@@92)) $generated@@4)
 :pattern ( ($generated@@71 $generated@@91 $generated@@92))
)))
(assert (forall (($generated@@93 Int) ($generated@@94 T@U) ) (! (= ($generated@@45 ($generated@@71 $generated@@93 $generated@@94)) $generated@@93)
 :pattern ( ($generated@@71 $generated@@93 $generated@@94))
)))
(assert (forall (($generated@@95 Int) ($generated@@96 T@U) ) (! (= ($generated@@46 ($generated@@71 $generated@@95 $generated@@96)) $generated@@96)
 :pattern ( ($generated@@71 $generated@@95 $generated@@96))
)))
(assert (forall (($generated@@97 T@U) ($generated@@98 T@T) ) (! (= ($generated@@67 $generated@@98 ($generated@@68 $generated@@98 $generated@@97)) $generated@@97)
 :pattern ( ($generated@@68 $generated@@98 $generated@@97))
)))
(assert (forall (($generated@@100 Int) ($generated@@101 T@U) ) (! (< ($generated@@99 $generated@@101) ($generated@@99 ($generated@@71 $generated@@100 $generated@@101)))
 :pattern ( ($generated@@71 $generated@@100 $generated@@101))
)))
(assert (forall (($generated@@102 T@U) ($generated@@103 Int) ) (! (= ($generated@@24 ($generated@@25 $generated@@102) $generated@@103) ($generated@@24 $generated@@102 $generated@@103))
 :pattern ( ($generated@@24 ($generated@@25 $generated@@102) $generated@@103))
)))
(assert (forall (($generated@@104 T@U) ($generated@@105 Int) ) (! (= ($generated@@30 ($generated@@25 $generated@@104) $generated@@105) ($generated@@30 $generated@@104 $generated@@105))
 :pattern ( ($generated@@30 ($generated@@25 $generated@@104) $generated@@105))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@117 T@T) ($generated@@118 T@T) ($generated@@119 T@T) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ) (! (= ($generated@@106 $generated@@117 $generated@@118 $generated@@119 ($generated@@113 $generated@@117 $generated@@118 $generated@@119 $generated@@121 $generated@@122 $generated@@123 $generated@@120) $generated@@122 $generated@@123) $generated@@120)
 :weight 0
)) (and (forall (($generated@@124 T@T) ($generated@@125 T@T) ($generated@@126 T@T) ($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ) (!  (or (= $generated@@129 $generated@@131) (= ($generated@@106 $generated@@124 $generated@@125 $generated@@126 ($generated@@113 $generated@@124 $generated@@125 $generated@@126 $generated@@128 $generated@@129 $generated@@130 $generated@@127) $generated@@131 $generated@@132) ($generated@@106 $generated@@124 $generated@@125 $generated@@126 $generated@@128 $generated@@131 $generated@@132)))
 :weight 0
)) (forall (($generated@@133 T@T) ($generated@@134 T@T) ($generated@@135 T@T) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ($generated@@140 T@U) ($generated@@141 T@U) ) (!  (or (= $generated@@139 $generated@@141) (= ($generated@@106 $generated@@133 $generated@@134 $generated@@135 ($generated@@113 $generated@@133 $generated@@134 $generated@@135 $generated@@137 $generated@@138 $generated@@139 $generated@@136) $generated@@140 $generated@@141) ($generated@@106 $generated@@133 $generated@@134 $generated@@135 $generated@@137 $generated@@140 $generated@@141)))
 :weight 0
)))) (= ($generated@@6 $generated@@107) 4)) (= ($generated@@6 $generated@@108) 5)) (forall (($generated@@142 T@T) ($generated@@143 T@T) ($generated@@144 T@U) ($generated@@145 T@U) ($generated@@146 T@U) ) (! (= ($generated@@110 $generated@@142 $generated@@143 ($generated@@114 $generated@@142 $generated@@143 $generated@@145 $generated@@146 $generated@@144) $generated@@146) $generated@@144)
 :weight 0
))) (forall (($generated@@147 T@T) ($generated@@148 T@T) ($generated@@149 T@U) ($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ) (!  (or (= $generated@@151 $generated@@152) (= ($generated@@110 $generated@@147 $generated@@148 ($generated@@114 $generated@@147 $generated@@148 $generated@@150 $generated@@151 $generated@@149) $generated@@152) ($generated@@110 $generated@@147 $generated@@148 $generated@@150 $generated@@152)))
 :weight 0
))) (= ($generated@@6 $generated@@111) 6)) (forall (($generated@@153 T@T) ($generated@@154 T@T) ) (= ($generated@@6 ($generated@@112 $generated@@153 $generated@@154)) 7))) (forall (($generated@@155 T@T) ($generated@@156 T@T) ) (! (= ($generated@@115 ($generated@@112 $generated@@155 $generated@@156)) $generated@@155)
 :pattern ( ($generated@@112 $generated@@155 $generated@@156))
))) (forall (($generated@@157 T@T) ($generated@@158 T@T) ) (! (= ($generated@@116 ($generated@@112 $generated@@157 $generated@@158)) $generated@@158)
 :pattern ( ($generated@@112 $generated@@157 $generated@@158))
))))
(assert (forall (($generated@@159 T@U) ($generated@@160 T@U) ($generated@@161 T@U) ($generated@@162 Bool) ($generated@@163 T@U) ($generated@@164 T@U) ) (! (= ($generated@@11 ($generated@@106 $generated@@107 $generated@@108 $generated@@7 ($generated@@109 $generated@@159 $generated@@160 $generated@@161 $generated@@162) $generated@@163 $generated@@164))  (=> (and (or (not (= $generated@@163 $generated@@159)) (not true)) ($generated@@11 ($generated@@67 $generated@@7 ($generated@@110 $generated@@108 $generated@@111 ($generated@@110 $generated@@107 ($generated@@112 $generated@@108 $generated@@111) $generated@@160 $generated@@163) $generated@@161)))) $generated@@162))
 :pattern ( ($generated@@106 $generated@@107 $generated@@108 $generated@@7 ($generated@@109 $generated@@159 $generated@@160 $generated@@161 $generated@@162) $generated@@163 $generated@@164))
)))
(assert (forall (($generated@@167 T@U) ($generated@@168 T@U) ) (!  (=> (and ($generated@@166 $generated@@168) (and ($generated@@44 $generated@@167) ($generated@@165 $generated@@39 $generated@@167 $generated@@40 $generated@@168))) ($generated@@165 $generated@@8 ($generated@@12 ($generated@@45 $generated@@167)) $generated $generated@@168))
 :pattern ( ($generated@@165 $generated@@8 ($generated@@12 ($generated@@45 $generated@@167)) $generated $generated@@168))
)))
(assert (forall (($generated@@169 T@U) ($generated@@170 T@U) ) (!  (=> (and ($generated@@166 $generated@@170) ($generated@@38 $generated@@39 $generated@@169 $generated@@40)) ($generated@@165 $generated@@39 $generated@@169 $generated@@40 $generated@@170))
 :pattern ( ($generated@@165 $generated@@39 $generated@@169 $generated@@40 $generated@@170))
)))
(assert (= ($generated@@22 $generated@@40) $generated@@2))
(assert (= ($generated@@171 $generated@@40) $generated@@5))
(assert (= $generated@@37 ($generated@@50 $generated@@39 $generated@@37)))
(assert (forall (($generated@@172 T@U) ($generated@@173 T@U) ) (!  (=> (and ($generated@@166 $generated@@173) (and ($generated@@44 $generated@@172) ($generated@@165 $generated@@39 $generated@@172 $generated@@40 $generated@@173))) ($generated@@165 $generated@@39 ($generated@@46 $generated@@172) $generated@@40 $generated@@173))
 :pattern ( ($generated@@165 $generated@@39 ($generated@@46 $generated@@172) $generated@@40 $generated@@173))
)))
(assert (forall (($generated@@174 Int) ($generated@@175 T@U) ) (! (= ($generated@@71 ($generated@@27 $generated@@174) ($generated@@50 $generated@@39 $generated@@175)) ($generated@@50 $generated@@39 ($generated@@71 $generated@@174 $generated@@175)))
 :pattern ( ($generated@@71 ($generated@@27 $generated@@174) ($generated@@50 $generated@@39 $generated@@175)))
)))
(assert (forall (($generated@@176 Int) ) (! (= ($generated@@68 $generated@@8 ($generated@@12 ($generated@@27 $generated@@176))) ($generated@@50 $generated@@111 ($generated@@68 $generated@@8 ($generated@@12 $generated@@176))))
 :pattern ( ($generated@@68 $generated@@8 ($generated@@12 ($generated@@27 $generated@@176))))
)))
(assert (forall (($generated@@177 T@U) ($generated@@178 T@T) ) (! (= ($generated@@68 $generated@@178 ($generated@@50 $generated@@178 $generated@@177)) ($generated@@50 $generated@@111 ($generated@@68 $generated@@178 $generated@@177)))
 :pattern ( ($generated@@68 $generated@@178 ($generated@@50 $generated@@178 $generated@@177)))
)))
(assert (forall (($generated@@179 Int) ($generated@@180 T@U) ) (! (= ($generated@@38 $generated@@39 ($generated@@71 $generated@@179 $generated@@180) $generated@@40)  (and ($generated@@38 $generated@@8 ($generated@@12 $generated@@179) $generated) ($generated@@38 $generated@@39 $generated@@180 $generated@@40)))
 :pattern ( ($generated@@38 $generated@@39 ($generated@@71 $generated@@179 $generated@@180) $generated@@40))
)))
(assert (forall (($generated@@181 T@U) ($generated@@182 T@U) ) (! ($generated@@165 $generated@@8 $generated@@182 $generated $generated@@181)
 :pattern ( ($generated@@165 $generated@@8 $generated@@182 $generated $generated@@181))
)))
(assert (forall (($generated@@183 T@U) ) (! ($generated@@38 $generated@@8 $generated@@183 $generated)
 :pattern ( ($generated@@38 $generated@@8 $generated@@183 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@184 () T@U)
(declare-fun $generated@@185 () Int)
(declare-fun $generated@@186 () T@U)
(declare-fun $generated@@187 () Int)
(declare-fun $generated@@188 () T@U)
(declare-fun $generated@@189 () T@U)
(declare-fun $generated@@190 () T@U)
(declare-fun $generated@@191 () Int)
(declare-fun $generated@@192 () T@U)
(declare-fun $generated@@193 () T@U)
(declare-fun $generated@@194 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 14) (let (($generated@@195  (and (=> (= (ControlFlow 0 5) (- 0 6)) (<= ($generated@@27 0) ($generated@@53 $generated@@184))) (=> (<= ($generated@@27 0) ($generated@@53 $generated@@184)) (=> (= (ControlFlow 0 5) (- 0 4)) (<= ($generated@@27 0) ($generated@@60 $generated@@184)))))))
(let (($generated@@196  (=> (and (<= 0 $generated@@185) ($generated@@165 $generated@@8 ($generated@@12 $generated@@185) $generated $generated@@186)) (and (=> (= (ControlFlow 0 9) (- 0 10)) (<= ($generated@@27 0) $generated@@185)) (=> (and (<= ($generated@@27 0) $generated@@185) ($generated@@31 $generated@@185)) (=> (and (and (= ($generated@@60 $generated@@184) ($generated@@30 ($generated@@25 $generated@@56) $generated@@185)) ($generated@@31 $generated@@185)) (and ($generated@@38 $generated@@8 ($generated@@12 ($generated@@60 $generated@@184)) $generated) (= (ControlFlow 0 9) 5))) $generated@@195))))))
(let (($generated@@197  (=> (and (and (< $generated@@185 0) (= ($generated@@60 $generated@@184) ($generated@@27 0))) (and ($generated@@38 $generated@@8 ($generated@@12 ($generated@@60 $generated@@184)) $generated) (= (ControlFlow 0 8) 5))) $generated@@195)))
(let (($generated@@198  (=> (and (and (and (= $generated@@184 ($generated@@71 $generated@@187 $generated@@188)) ($generated@@38 $generated@@39 $generated@@188 $generated@@40)) (and (= $generated@@189 $generated@@188) ($generated@@38 $generated@@39 $generated@@189 $generated@@40))) (and (and (= $generated@@190 $generated@@189) (= $generated@@191 $generated@@187)) (and ($generated@@38 $generated@@8 ($generated@@12 $generated@@191) $generated) (= $generated@@185 $generated@@191)))) (and (=> (= (ControlFlow 0 11) 8) $generated@@197) (=> (= (ControlFlow 0 11) 9) $generated@@196)))))
(let (($generated@@199  (=> (and (and (= $generated@@184 $generated@@37) (= ($generated@@60 $generated@@184) ($generated@@27 0))) (and ($generated@@38 $generated@@8 ($generated@@12 ($generated@@60 $generated@@184)) $generated) (= (ControlFlow 0 7) 5))) $generated@@195)))
(let (($generated@@200 true))
(let (($generated@@201  (=> (or (not (= $generated@@184 $generated@@37)) (not true)) (and (=> (= (ControlFlow 0 12) 11) $generated@@198) (=> (= (ControlFlow 0 12) 3) $generated@@200)))))
(let (($generated@@202  (=> ($generated@@165 $generated@@39 $generated@@184 $generated@@40 $generated@@186) (=> (and (and ($generated@@54 $generated@@184) (<= ($generated@@27 0) ($generated@@53 $generated@@184))) (and ($generated@@165 $generated@@39 $generated@@184 $generated@@40 $generated@@186) (= (ControlFlow 0 2) (- 0 1)))) (or ($generated@@41 $generated@@184 $generated@@184) (< ($generated@@99 $generated@@184) ($generated@@99 $generated@@184)))))))
(let (($generated@@203  (=> (= $generated@@192 ($generated@@109 $generated@@193 $generated@@186 $generated@@1 false)) (and (and (=> (= (ControlFlow 0 13) 2) $generated@@202) (=> (= (ControlFlow 0 13) 7) $generated@@199)) (=> (= (ControlFlow 0 13) 12) $generated@@201)))))
(let (($generated@@204  (=> (and (and (and ($generated@@166 $generated@@186) ($generated@@194 $generated@@186)) ($generated@@38 $generated@@39 $generated@@184 $generated@@40)) (and (= 2 $generated@@23) (= (ControlFlow 0 14) 13))) $generated@@203)))
$generated@@204)))))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 5) (- 4))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
