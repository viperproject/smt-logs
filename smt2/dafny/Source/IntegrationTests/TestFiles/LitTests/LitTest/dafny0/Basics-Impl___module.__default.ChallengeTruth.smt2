(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun alloc () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.UpTruth (Int Int) Bool)
(declare-fun |_module.__default.UpTruth#canCall| (Int Int) Bool)
(declare-fun _module.__default.DownTruth (Int Int) Bool)
(declare-fun |_module.__default.DownTruth#canCall| (Int Int) Bool)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun Mul (Int Int) Int)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt alloc)
)
(assert (= (Tag TInt) TagInt))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|j#0| Int) (|k#0| Int) ) (!  (=> (or (|_module.__default.UpTruth#canCall| |j#0| |k#0|) (and (< 0 $FunctionContextHeight) (and (and (and (<= (LitInt 10) |j#0|) (< |j#0| 180)) (< 180 220)) (<= (LitInt 220) |k#0|)))) (= (_module.__default.UpTruth |j#0| |k#0|)  (and (and (and (and (and (< 0 2) (<= (LitInt 2) (LitInt 2))) (< 2 |j#0|)) (or (not (= |j#0| 200)) (not true))) (< 200 |k#0|)) (< |k#0| (+ |k#0| 1)))))
 :pattern ( (_module.__default.UpTruth |j#0| |k#0|))
))))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|j#0@@0| Int) (|k#0@@0| Int) ) (!  (=> (or (|_module.__default.UpTruth#canCall| (LitInt |j#0@@0|) (LitInt |k#0@@0|)) (and (< 0 $FunctionContextHeight) (and (and (and (<= (LitInt 10) (LitInt |j#0@@0|)) (< |j#0@@0| 180)) (< 180 220)) (<= (LitInt 220) (LitInt |k#0@@0|))))) (= (_module.__default.UpTruth (LitInt |j#0@@0|) (LitInt |k#0@@0|))  (and (and (and (and (and (< 0 2) (<= (LitInt 2) (LitInt 2))) (< 2 |j#0@@0|)) (or (not (= |j#0@@0| 200)) (not true))) (< 200 |k#0@@0|)) (< |k#0@@0| (+ |k#0@@0| 1)))))
 :weight 3
 :pattern ( (_module.__default.UpTruth (LitInt |j#0@@0|) (LitInt |k#0@@0|)))
))))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|j#0@@1| Int) (|k#0@@1| Int) ) (!  (=> (or (|_module.__default.DownTruth#canCall| |j#0@@1| |k#0@@1|) (and (< 0 $FunctionContextHeight) (and (and (and (>= |k#0@@1| (LitInt 220)) (> 220 180)) (> 180 |j#0@@1|)) (>= |j#0@@1| (LitInt 10))))) (= (_module.__default.DownTruth |j#0@@1| |k#0@@1|)  (and (and (and (and (and (> (+ |k#0@@1| 1) |k#0@@1|) (> |k#0@@1| 200)) (or (not (= 200 |j#0@@1|)) (not true))) (> |j#0@@1| 2)) (>= (LitInt 2) (LitInt 2))) (> 2 0))))
 :pattern ( (_module.__default.DownTruth |j#0@@1| |k#0@@1|))
))))
(assert (forall ((x@@5 T@U) (T@@1 T@T) ) (! (= ($Unbox T@@1 ($Box T@@1 x@@5)) x@@5)
 :pattern ( ($Box T@@1 x@@5))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0 t1 t2 (MapType0Store t0 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 3)) (= (Ctor FieldType) 4)) (forall ((t0@@0 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 (MapType1Store t0@@0 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :weight 0
))) (= (Ctor BoxType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 6))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((x@@6 Int) (y Int) ) (! (= (Mul x@@6 y) (* x@@6 y))
 :pattern ( (Mul x@@6 y))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|j#0@@2| Int) (|k#0@@2| Int) ) (!  (=> (or (|_module.__default.DownTruth#canCall| (LitInt |j#0@@2|) (LitInt |k#0@@2|)) (and (< 0 $FunctionContextHeight) (and (and (and (>= (LitInt |k#0@@2|) (LitInt 220)) (> 220 180)) (> 180 |j#0@@2|)) (>= (LitInt |j#0@@2|) (LitInt 10))))) (= (_module.__default.DownTruth (LitInt |j#0@@2|) (LitInt |k#0@@2|))  (and (and (and (and (and (> (+ |k#0@@2| 1) |k#0@@2|) (> |k#0@@2| 200)) (or (not (= 200 |j#0@@2|)) (not true))) (> |j#0@@2| 2)) (>= (LitInt 2) (LitInt 2))) (> 2 0))))
 :weight 3
 :pattern ( (_module.__default.DownTruth (LitInt |j#0@@2|) (LitInt |k#0@@2|)))
))))
(assert (forall ((x@@7 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@7))) (Lit BoxType ($Box intType (int_2_U x@@7))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@7))))
)))
(assert (forall ((x@@8 T@U) (T@@2 T@T) ) (! (= ($Box T@@2 (Lit T@@2 x@@8)) (Lit BoxType ($Box T@@2 x@@8)))
 :pattern ( ($Box T@@2 (Lit T@@2 x@@8)))
)))
(assert (forall ((h T@U) (v T@U) ) (! ($IsAlloc intType v TInt h)
 :pattern ( ($IsAlloc intType v TInt h))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |j#0@@3| () Int)
(declare-fun |k#0@@3| () Int)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $Heap () T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsHeapAnchor (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 42) (let ((anon12_correct  (and (=> (= (ControlFlow 0 2) (- 0 8)) (<= |j#0@@3| (+ |j#0@@3| |k#0@@3|))) (and (=> (= (ControlFlow 0 2) (- 0 7)) (or (not (= (+ |j#0@@3| |k#0@@3|) (+ (+ |k#0@@3| |j#0@@3|) 1))) (not true))) (and (=> (= (ControlFlow 0 2) (- 0 6)) (< (+ (+ |k#0@@3| |j#0@@3|) 1) (+ (+ |k#0@@3| |k#0@@3|) |j#0@@3|))) (and (=> (= (ControlFlow 0 2) (- 0 5)) (<= (+ (+ |k#0@@3| |k#0@@3|) |j#0@@3|) (+ (+ |j#0@@3| |j#0@@3|) |k#0@@3|))) (and (=> (= (ControlFlow 0 2) (- 0 4)) (< (+ (+ |j#0@@3| |j#0@@3|) |k#0@@3|) (+ (+ (+ |k#0@@3| |k#0@@3|) |j#0@@3|) |j#0@@3|))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (= (+ (+ (+ |k#0@@3| |k#0@@3|) |j#0@@3|) |j#0@@3|) (+ (Mul (LitInt 2) |k#0@@3|) (Mul (LitInt 2) |j#0@@3|)))) (=> (= (ControlFlow 0 2) (- 0 1)) (= (+ (Mul (LitInt 2) |k#0@@3|) (Mul (LitInt 2) |j#0@@3|)) (Mul (LitInt 2) (+ |k#0@@3| |j#0@@3|))))))))))))
(let ((anon18_Else_correct  (=> (and (not (and (and (and (and (and (<= |j#0@@3| (+ |j#0@@3| |k#0@@3|)) (or (not (= (+ |j#0@@3| |k#0@@3|) (+ (+ |k#0@@3| |j#0@@3|) 1))) (not true))) (< (+ (+ |k#0@@3| |j#0@@3|) 1) (+ (+ |k#0@@3| |k#0@@3|) |j#0@@3|))) (<= (+ (+ |k#0@@3| |k#0@@3|) |j#0@@3|) (+ (+ |j#0@@3| |j#0@@3|) |k#0@@3|))) (< (+ (+ |j#0@@3| |j#0@@3|) |k#0@@3|) (+ (+ (+ |k#0@@3| |k#0@@3|) |j#0@@3|) |j#0@@3|))) (= (+ (+ (+ |k#0@@3| |k#0@@3|) |j#0@@3|) |j#0@@3|) (+ (Mul (LitInt 2) |k#0@@3|) (Mul (LitInt 2) |j#0@@3|))))) (= (ControlFlow 0 10) 2)) anon12_correct)))
(let ((anon18_Then_correct  (=> (and (and (and (and (and (and (<= |j#0@@3| (+ |j#0@@3| |k#0@@3|)) (or (not (= (+ |j#0@@3| |k#0@@3|) (+ (+ |k#0@@3| |j#0@@3|) 1))) (not true))) (< (+ (+ |k#0@@3| |j#0@@3|) 1) (+ (+ |k#0@@3| |k#0@@3|) |j#0@@3|))) (<= (+ (+ |k#0@@3| |k#0@@3|) |j#0@@3|) (+ (+ |j#0@@3| |j#0@@3|) |k#0@@3|))) (< (+ (+ |j#0@@3| |j#0@@3|) |k#0@@3|) (+ (+ (+ |k#0@@3| |k#0@@3|) |j#0@@3|) |j#0@@3|))) (= (+ (+ (+ |k#0@@3| |k#0@@3|) |j#0@@3|) |j#0@@3|) (+ (Mul (LitInt 2) |k#0@@3|) (Mul (LitInt 2) |j#0@@3|)))) (= (ControlFlow 0 9) 2)) anon12_correct)))
(let ((anon17_Else_correct  (=> (not (and (and (and (and (<= |j#0@@3| (+ |j#0@@3| |k#0@@3|)) (or (not (= (+ |j#0@@3| |k#0@@3|) (+ (+ |k#0@@3| |j#0@@3|) 1))) (not true))) (< (+ (+ |k#0@@3| |j#0@@3|) 1) (+ (+ |k#0@@3| |k#0@@3|) |j#0@@3|))) (<= (+ (+ |k#0@@3| |k#0@@3|) |j#0@@3|) (+ (+ |j#0@@3| |j#0@@3|) |k#0@@3|))) (< (+ (+ |j#0@@3| |j#0@@3|) |k#0@@3|) (+ (+ (+ |k#0@@3| |k#0@@3|) |j#0@@3|) |j#0@@3|)))) (and (=> (= (ControlFlow 0 12) 9) anon18_Then_correct) (=> (= (ControlFlow 0 12) 10) anon18_Else_correct)))))
(let ((anon17_Then_correct  (=> (and (and (and (and (<= |j#0@@3| (+ |j#0@@3| |k#0@@3|)) (or (not (= (+ |j#0@@3| |k#0@@3|) (+ (+ |k#0@@3| |j#0@@3|) 1))) (not true))) (< (+ (+ |k#0@@3| |j#0@@3|) 1) (+ (+ |k#0@@3| |k#0@@3|) |j#0@@3|))) (<= (+ (+ |k#0@@3| |k#0@@3|) |j#0@@3|) (+ (+ |j#0@@3| |j#0@@3|) |k#0@@3|))) (< (+ (+ |j#0@@3| |j#0@@3|) |k#0@@3|) (+ (+ (+ |k#0@@3| |k#0@@3|) |j#0@@3|) |j#0@@3|))) (and (=> (= (ControlFlow 0 11) 9) anon18_Then_correct) (=> (= (ControlFlow 0 11) 10) anon18_Else_correct)))))
(let ((anon16_Else_correct  (=> (not (and (and (and (<= |j#0@@3| (+ |j#0@@3| |k#0@@3|)) (or (not (= (+ |j#0@@3| |k#0@@3|) (+ (+ |k#0@@3| |j#0@@3|) 1))) (not true))) (< (+ (+ |k#0@@3| |j#0@@3|) 1) (+ (+ |k#0@@3| |k#0@@3|) |j#0@@3|))) (<= (+ (+ |k#0@@3| |k#0@@3|) |j#0@@3|) (+ (+ |j#0@@3| |j#0@@3|) |k#0@@3|)))) (and (=> (= (ControlFlow 0 14) 11) anon17_Then_correct) (=> (= (ControlFlow 0 14) 12) anon17_Else_correct)))))
(let ((anon16_Then_correct  (=> (and (and (and (<= |j#0@@3| (+ |j#0@@3| |k#0@@3|)) (or (not (= (+ |j#0@@3| |k#0@@3|) (+ (+ |k#0@@3| |j#0@@3|) 1))) (not true))) (< (+ (+ |k#0@@3| |j#0@@3|) 1) (+ (+ |k#0@@3| |k#0@@3|) |j#0@@3|))) (<= (+ (+ |k#0@@3| |k#0@@3|) |j#0@@3|) (+ (+ |j#0@@3| |j#0@@3|) |k#0@@3|))) (and (=> (= (ControlFlow 0 13) 11) anon17_Then_correct) (=> (= (ControlFlow 0 13) 12) anon17_Else_correct)))))
(let ((anon15_Else_correct  (=> (not (and (and (<= |j#0@@3| (+ |j#0@@3| |k#0@@3|)) (or (not (= (+ |j#0@@3| |k#0@@3|) (+ (+ |k#0@@3| |j#0@@3|) 1))) (not true))) (< (+ (+ |k#0@@3| |j#0@@3|) 1) (+ (+ |k#0@@3| |k#0@@3|) |j#0@@3|)))) (and (=> (= (ControlFlow 0 16) 13) anon16_Then_correct) (=> (= (ControlFlow 0 16) 14) anon16_Else_correct)))))
(let ((anon15_Then_correct  (=> (and (and (<= |j#0@@3| (+ |j#0@@3| |k#0@@3|)) (or (not (= (+ |j#0@@3| |k#0@@3|) (+ (+ |k#0@@3| |j#0@@3|) 1))) (not true))) (< (+ (+ |k#0@@3| |j#0@@3|) 1) (+ (+ |k#0@@3| |k#0@@3|) |j#0@@3|))) (and (=> (= (ControlFlow 0 15) 13) anon16_Then_correct) (=> (= (ControlFlow 0 15) 14) anon16_Else_correct)))))
(let ((anon14_Else_correct  (=> (not (and (<= |j#0@@3| (+ |j#0@@3| |k#0@@3|)) (or (not (= (+ |j#0@@3| |k#0@@3|) (+ (+ |k#0@@3| |j#0@@3|) 1))) (not true)))) (and (=> (= (ControlFlow 0 18) 15) anon15_Then_correct) (=> (= (ControlFlow 0 18) 16) anon15_Else_correct)))))
(let ((anon14_Then_correct  (=> (and (<= |j#0@@3| (+ |j#0@@3| |k#0@@3|)) (or (not (= (+ |j#0@@3| |k#0@@3|) (+ (+ |k#0@@3| |j#0@@3|) 1))) (not true))) (and (=> (= (ControlFlow 0 17) 15) anon15_Then_correct) (=> (= (ControlFlow 0 17) 16) anon15_Else_correct)))))
(let ((anon13_Else_correct  (=> (< (+ |j#0@@3| |k#0@@3|) |j#0@@3|) (and (=> (= (ControlFlow 0 20) 17) anon14_Then_correct) (=> (= (ControlFlow 0 20) 18) anon14_Else_correct)))))
(let ((anon13_Then_correct  (=> (<= |j#0@@3| (+ |j#0@@3| |k#0@@3|)) (and (=> (= (ControlFlow 0 19) 17) anon14_Then_correct) (=> (= (ControlFlow 0 19) 18) anon14_Else_correct)))))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (=> (and ($IsAlloc intType (int_2_U |j#0@@3|) TInt $Heap) ($IsAlloc intType (int_2_U |k#0@@3|) TInt $Heap)) (and (=> (= (ControlFlow 0 21) (- 0 41)) (<= (LitInt 10) |j#0@@3|)) (and (=> (= (ControlFlow 0 21) (- 0 40)) (< |j#0@@3| 180)) (and (=> (= (ControlFlow 0 21) (- 0 39)) (U_2_bool (Lit boolType (bool_2_U (< 180 220))))) (and (=> (= (ControlFlow 0 21) (- 0 38)) (<= (LitInt 220) |k#0@@3|)) (=> (and (|_module.__default.UpTruth#canCall| |j#0@@3| |k#0@@3|) (|_module.__default.UpTruth#canCall| |j#0@@3| |k#0@@3|)) (and (=> (= (ControlFlow 0 21) (- 0 37)) (=> (|_module.__default.UpTruth#canCall| |j#0@@3| |k#0@@3|) (or (_module.__default.UpTruth |j#0@@3| |k#0@@3|) (U_2_bool (Lit boolType (bool_2_U (< 0 2))))))) (and (=> (= (ControlFlow 0 21) (- 0 36)) (=> (|_module.__default.UpTruth#canCall| |j#0@@3| |k#0@@3|) (or (_module.__default.UpTruth |j#0@@3| |k#0@@3|) (<= (LitInt 2) (LitInt 2))))) (and (=> (= (ControlFlow 0 21) (- 0 35)) (=> (|_module.__default.UpTruth#canCall| |j#0@@3| |k#0@@3|) (or (_module.__default.UpTruth |j#0@@3| |k#0@@3|) (< 2 |j#0@@3|)))) (and (=> (= (ControlFlow 0 21) (- 0 34)) (=> (|_module.__default.UpTruth#canCall| |j#0@@3| |k#0@@3|) (or (_module.__default.UpTruth |j#0@@3| |k#0@@3|) (or (not (= |j#0@@3| 200)) (not true))))) (and (=> (= (ControlFlow 0 21) (- 0 33)) (=> (|_module.__default.UpTruth#canCall| |j#0@@3| |k#0@@3|) (or (_module.__default.UpTruth |j#0@@3| |k#0@@3|) (< 200 |k#0@@3|)))) (and (=> (= (ControlFlow 0 21) (- 0 32)) (=> (|_module.__default.UpTruth#canCall| |j#0@@3| |k#0@@3|) (or (_module.__default.UpTruth |j#0@@3| |k#0@@3|) (< |k#0@@3| (+ |k#0@@3| 1))))) (=> (_module.__default.UpTruth |j#0@@3| |k#0@@3|) (=> (and ($IsAlloc intType (int_2_U |j#0@@3|) TInt $Heap) ($IsAlloc intType (int_2_U |k#0@@3|) TInt $Heap)) (and (=> (= (ControlFlow 0 21) (- 0 31)) (>= |k#0@@3| (LitInt 220))) (and (=> (= (ControlFlow 0 21) (- 0 30)) (U_2_bool (Lit boolType (bool_2_U (> 220 180))))) (and (=> (= (ControlFlow 0 21) (- 0 29)) (> 180 |j#0@@3|)) (and (=> (= (ControlFlow 0 21) (- 0 28)) (>= |j#0@@3| (LitInt 10))) (=> (and (|_module.__default.DownTruth#canCall| |j#0@@3| |k#0@@3|) (|_module.__default.DownTruth#canCall| |j#0@@3| |k#0@@3|)) (and (=> (= (ControlFlow 0 21) (- 0 27)) (=> (|_module.__default.DownTruth#canCall| |j#0@@3| |k#0@@3|) (or (_module.__default.DownTruth |j#0@@3| |k#0@@3|) (> (+ |k#0@@3| 1) |k#0@@3|)))) (and (=> (= (ControlFlow 0 21) (- 0 26)) (=> (|_module.__default.DownTruth#canCall| |j#0@@3| |k#0@@3|) (or (_module.__default.DownTruth |j#0@@3| |k#0@@3|) (> |k#0@@3| 200)))) (and (=> (= (ControlFlow 0 21) (- 0 25)) (=> (|_module.__default.DownTruth#canCall| |j#0@@3| |k#0@@3|) (or (_module.__default.DownTruth |j#0@@3| |k#0@@3|) (or (not (= 200 |j#0@@3|)) (not true))))) (and (=> (= (ControlFlow 0 21) (- 0 24)) (=> (|_module.__default.DownTruth#canCall| |j#0@@3| |k#0@@3|) (or (_module.__default.DownTruth |j#0@@3| |k#0@@3|) (> |j#0@@3| 2)))) (and (=> (= (ControlFlow 0 21) (- 0 23)) (=> (|_module.__default.DownTruth#canCall| |j#0@@3| |k#0@@3|) (or (_module.__default.DownTruth |j#0@@3| |k#0@@3|) (>= (LitInt 2) (LitInt 2))))) (and (=> (= (ControlFlow 0 21) (- 0 22)) (=> (|_module.__default.DownTruth#canCall| |j#0@@3| |k#0@@3|) (or (_module.__default.DownTruth |j#0@@3| |k#0@@3|) (U_2_bool (Lit boolType (bool_2_U (> 2 0))))))) (=> (_module.__default.DownTruth |j#0@@3| |k#0@@3|) (and (=> (= (ControlFlow 0 21) 19) anon13_Then_correct) (=> (= (ControlFlow 0 21) 20) anon13_Else_correct)))))))))))))))))))))))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (and (= 1 $FunctionContextHeight) (<= (LitInt 80) |j#0@@3|))) (and (and (< |j#0@@3| 150) (<= (LitInt 250) |k#0@@3|)) (and (< |k#0@@3| 1000) (= (ControlFlow 0 42) 21)))) anon0_correct)))
PreconditionGeneratedEntry_correct))))))))))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 5))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
