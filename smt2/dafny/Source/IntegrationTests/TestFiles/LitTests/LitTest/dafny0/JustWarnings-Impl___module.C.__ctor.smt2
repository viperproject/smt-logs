(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 (T@T) Int)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 (Bool) T@U)
(declare-fun $generated@@11 (T@U) Bool)
(declare-fun $generated@@12 (Int) T@U)
(declare-fun $generated@@13 (T@U) Int)
(declare-fun $generated@@14 (Real) T@U)
(declare-fun $generated@@15 (T@U) Real)
(declare-fun $generated@@22 (T@U) Int)
(declare-fun $generated@@23 (T@U) T@U)
(declare-fun $generated@@24 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@25 () T@T)
(declare-fun $generated@@26 () T@T)
(declare-fun $generated@@27 () T@T)
(declare-fun $generated@@28 (T@T T@T) T@T)
(declare-fun $generated@@29 () T@U)
(declare-fun $generated@@30 (T@U) T@U)
(declare-fun $generated@@31 (T@U) Bool)
(declare-fun $generated@@32 () T@U)
(declare-fun $generated@@33 (T@U) T@U)
(declare-fun $generated@@34 (T@U T@U) Bool)
(declare-fun $generated@@35 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@36 (T@T) T@T)
(declare-fun $generated@@37 (T@T) T@T)
(declare-fun $generated@@58 (T@T T@U) T@U)
(declare-fun $generated@@59 (T@U T@U T@U) Bool)
(declare-fun $generated@@63 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@64 (T@U) T@U)
(declare-fun $generated@@71 (T@U T@U) T@U)
(declare-fun $generated@@72 (T@U) Bool)
(declare-fun $generated@@73 (T@U T@U) Bool)
(declare-fun $generated@@77 (T@T T@U) T@U)
(declare-fun $generated@@80 (T@T T@U T@U) Bool)
(declare-fun $generated@@96 (T@U) T@U)
(declare-fun $generated@@97 (T@U) T@U)
(declare-fun $generated@@105 (T@U) T@U)
(declare-fun $generated@@111 (T@U) T@U)
(declare-fun $generated@@113 (T@U) T@U)
(declare-fun $generated@@117 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@118 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@119 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@6 $generated@@7) 0) (= ($generated@@6 $generated@@8) 1)) (= ($generated@@6 $generated@@9) 2)) (forall (($generated@@16 Bool) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Int) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Real) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5)
)
(assert (= ($generated@@22 $generated) 0))
(assert (= ($generated@@23 $generated) $generated@@0))
(assert  (and (and (and (and (and (and (and (forall (($generated@@38 T@T) ($generated@@39 T@T) ($generated@@40 T@U) ($generated@@41 T@U) ($generated@@42 T@U) ) (! (= ($generated@@24 $generated@@38 $generated@@39 ($generated@@35 $generated@@38 $generated@@39 $generated@@41 $generated@@42 $generated@@40) $generated@@42) $generated@@40)
 :weight 0
)) (forall (($generated@@43 T@T) ($generated@@44 T@T) ($generated@@45 T@U) ($generated@@46 T@U) ($generated@@47 T@U) ($generated@@48 T@U) ) (!  (or (= $generated@@47 $generated@@48) (= ($generated@@24 $generated@@43 $generated@@44 ($generated@@35 $generated@@43 $generated@@44 $generated@@46 $generated@@47 $generated@@45) $generated@@48) ($generated@@24 $generated@@43 $generated@@44 $generated@@46 $generated@@48)))
 :weight 0
))) (= ($generated@@6 $generated@@25) 3)) (= ($generated@@6 $generated@@26) 4)) (= ($generated@@6 $generated@@27) 5)) (forall (($generated@@49 T@T) ($generated@@50 T@T) ) (= ($generated@@6 ($generated@@28 $generated@@49 $generated@@50)) 6))) (forall (($generated@@51 T@T) ($generated@@52 T@T) ) (! (= ($generated@@36 ($generated@@28 $generated@@51 $generated@@52)) $generated@@51)
 :pattern ( ($generated@@28 $generated@@51 $generated@@52))
))) (forall (($generated@@53 T@T) ($generated@@54 T@T) ) (! (= ($generated@@37 ($generated@@28 $generated@@53 $generated@@54)) $generated@@54)
 :pattern ( ($generated@@28 $generated@@53 $generated@@54))
))))
(assert (forall (($generated@@55 T@U) ($generated@@56 T@U) ($generated@@57 T@U) ) (!  (=> (and ($generated@@31 $generated@@56) (and (or (not (= $generated@@57 $generated@@32)) (not true)) (= ($generated@@33 $generated@@57) ($generated@@30 $generated@@55)))) ($generated@@34 ($generated@@24 $generated@@25 $generated@@26 ($generated@@24 $generated@@27 ($generated@@28 $generated@@25 $generated@@26) $generated@@56 $generated@@57) $generated@@29) $generated@@55))
 :pattern ( ($generated@@24 $generated@@25 $generated@@26 ($generated@@24 $generated@@27 ($generated@@28 $generated@@25 $generated@@26) $generated@@56 $generated@@57) $generated@@29) ($generated@@30 $generated@@55))
)))
(assert (forall (($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@U) ) (!  (=> (and (and ($generated@@31 $generated@@61) (and (or (not (= $generated@@62 $generated@@32)) (not true)) (= ($generated@@33 $generated@@62) ($generated@@30 $generated@@60)))) ($generated@@11 ($generated@@58 $generated@@7 ($generated@@24 $generated@@25 $generated@@26 ($generated@@24 $generated@@27 ($generated@@28 $generated@@25 $generated@@26) $generated@@61 $generated@@62) $generated)))) ($generated@@59 ($generated@@24 $generated@@25 $generated@@26 ($generated@@24 $generated@@27 ($generated@@28 $generated@@25 $generated@@26) $generated@@61 $generated@@62) $generated@@29) $generated@@60 $generated@@61))
 :pattern ( ($generated@@24 $generated@@25 $generated@@26 ($generated@@24 $generated@@27 ($generated@@28 $generated@@25 $generated@@26) $generated@@61 $generated@@62) $generated@@29) ($generated@@30 $generated@@60))
)))
(assert (forall (($generated@@65 T@U) ($generated@@66 T@U) ($generated@@67 T@U) ) (! (= ($generated@@63 $generated@@27 $generated@@66 ($generated@@64 $generated@@65) $generated@@67) ($generated@@63 $generated@@27 $generated@@66 ($generated@@30 $generated@@65) $generated@@67))
 :pattern ( ($generated@@63 $generated@@27 $generated@@66 ($generated@@64 $generated@@65) $generated@@67))
 :pattern ( ($generated@@63 $generated@@27 $generated@@66 ($generated@@30 $generated@@65) $generated@@67))
)))
(assert (forall (($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ) (! (= ($generated@@63 $generated@@27 $generated@@69 ($generated@@30 $generated@@68) $generated@@70)  (or (= $generated@@69 $generated@@32) ($generated@@11 ($generated@@58 $generated@@7 ($generated@@24 $generated@@25 $generated@@26 ($generated@@24 $generated@@27 ($generated@@28 $generated@@25 $generated@@26) $generated@@70 $generated@@69) $generated)))))
 :pattern ( ($generated@@63 $generated@@27 $generated@@69 ($generated@@30 $generated@@68) $generated@@70))
)))
(assert (= ($generated@@22 $generated@@29) 0))
(assert (= ($generated@@71 $generated@@1 $generated@@5) $generated@@29))
(assert  (not ($generated@@72 $generated@@29)))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@U) ) (!  (=> ($generated@@73 $generated@@74 $generated@@75) (forall (($generated@@76 T@U) ) (!  (=> ($generated@@11 ($generated@@58 $generated@@7 ($generated@@24 $generated@@25 $generated@@26 ($generated@@24 $generated@@27 ($generated@@28 $generated@@25 $generated@@26) $generated@@74 $generated@@76) $generated))) ($generated@@11 ($generated@@58 $generated@@7 ($generated@@24 $generated@@25 $generated@@26 ($generated@@24 $generated@@27 ($generated@@28 $generated@@25 $generated@@26) $generated@@75 $generated@@76) $generated))))
 :pattern ( ($generated@@24 $generated@@25 $generated@@26 ($generated@@24 $generated@@27 ($generated@@28 $generated@@25 $generated@@26) $generated@@75 $generated@@76) $generated))
)))
 :pattern ( ($generated@@73 $generated@@74 $generated@@75))
)))
(assert (forall (($generated@@78 T@U) ($generated@@79 T@T) ) (! (= ($generated@@77 $generated@@79 ($generated@@58 $generated@@79 $generated@@78)) $generated@@78)
 :pattern ( ($generated@@58 $generated@@79 $generated@@78))
)))
(assert ($generated@@72 $generated))
(assert (forall (($generated@@81 T@U) ($generated@@82 T@U) ) (! (= ($generated@@80 $generated@@27 $generated@@82 ($generated@@64 $generated@@81))  (and ($generated@@80 $generated@@27 $generated@@82 ($generated@@30 $generated@@81)) (or (not (= $generated@@82 $generated@@32)) (not true))))
 :pattern ( ($generated@@80 $generated@@27 $generated@@82 ($generated@@64 $generated@@81)))
 :pattern ( ($generated@@80 $generated@@27 $generated@@82 ($generated@@30 $generated@@81)))
)))
(assert (forall (($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@T) ) (! (= ($generated@@59 ($generated@@77 $generated@@86 $generated@@83) $generated@@84 $generated@@85) ($generated@@63 $generated@@86 $generated@@83 $generated@@84 $generated@@85))
 :pattern ( ($generated@@59 ($generated@@77 $generated@@86 $generated@@83) $generated@@84 $generated@@85))
)))
(assert (forall (($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ) (!  (=> ($generated@@73 $generated@@87 $generated@@88) (=> ($generated@@59 $generated@@89 $generated@@90 $generated@@87) ($generated@@59 $generated@@89 $generated@@90 $generated@@88)))
 :pattern ( ($generated@@73 $generated@@87 $generated@@88) ($generated@@59 $generated@@89 $generated@@90 $generated@@87))
)))
(assert (forall (($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@T) ) (!  (=> ($generated@@73 $generated@@91 $generated@@92) (=> ($generated@@63 $generated@@95 $generated@@93 $generated@@94 $generated@@91) ($generated@@63 $generated@@95 $generated@@93 $generated@@94 $generated@@92)))
 :pattern ( ($generated@@73 $generated@@91 $generated@@92) ($generated@@63 $generated@@95 $generated@@93 $generated@@94 $generated@@91))
)))
(assert (forall (($generated@@98 T@U) ) (!  (and (= ($generated@@96 ($generated@@30 $generated@@98)) $generated@@2) (= ($generated@@97 ($generated@@30 $generated@@98)) $generated@@4))
 :pattern ( ($generated@@30 $generated@@98))
)))
(assert (forall (($generated@@99 T@U) ) (!  (and (= ($generated@@96 ($generated@@64 $generated@@99)) $generated@@3) (= ($generated@@97 ($generated@@64 $generated@@99)) $generated@@4))
 :pattern ( ($generated@@64 $generated@@99))
)))
(assert (forall (($generated@@100 T@U) ($generated@@101 T@U) ) (! (= ($generated@@80 $generated@@27 $generated@@101 ($generated@@30 $generated@@100))  (or (= $generated@@101 $generated@@32) (= ($generated@@33 $generated@@101) ($generated@@30 $generated@@100))))
 :pattern ( ($generated@@80 $generated@@27 $generated@@101 ($generated@@30 $generated@@100)))
)))
(assert (forall (($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ) (!  (=> (or (not (= $generated@@102 $generated@@104)) (not true)) (=> (and ($generated@@73 $generated@@102 $generated@@103) ($generated@@73 $generated@@103 $generated@@104)) ($generated@@73 $generated@@102 $generated@@104)))
 :pattern ( ($generated@@73 $generated@@102 $generated@@103) ($generated@@73 $generated@@103 $generated@@104))
)))
(assert (forall (($generated@@106 T@U) ($generated@@107 T@U) ) (!  (and (= ($generated@@105 ($generated@@71 $generated@@106 $generated@@107)) $generated@@106) (= ($generated@@23 ($generated@@71 $generated@@106 $generated@@107)) $generated@@107))
 :pattern ( ($generated@@71 $generated@@106 $generated@@107))
)))
(assert (forall (($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@T) ) (! (= ($generated@@34 ($generated@@77 $generated@@110 $generated@@108) $generated@@109) ($generated@@80 $generated@@110 $generated@@108 $generated@@109))
 :pattern ( ($generated@@34 ($generated@@77 $generated@@110 $generated@@108) $generated@@109))
)))
(assert (forall (($generated@@112 T@U) ) (! (= ($generated@@111 ($generated@@30 $generated@@112)) $generated@@112)
 :pattern ( ($generated@@30 $generated@@112))
)))
(assert (forall (($generated@@114 T@U) ) (! (= ($generated@@113 ($generated@@64 $generated@@114)) $generated@@114)
 :pattern ( ($generated@@64 $generated@@114))
)))
(assert (forall (($generated@@115 T@U) ($generated@@116 T@T) ) (! (= ($generated@@58 $generated@@116 ($generated@@77 $generated@@116 $generated@@115)) $generated@@115)
 :pattern ( ($generated@@77 $generated@@116 $generated@@115))
)))
(assert  (and (forall (($generated@@120 T@T) ($generated@@121 T@T) ($generated@@122 T@T) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ) (! (= ($generated@@117 $generated@@120 $generated@@121 $generated@@122 ($generated@@119 $generated@@120 $generated@@121 $generated@@122 $generated@@124 $generated@@125 $generated@@126 $generated@@123) $generated@@125 $generated@@126) $generated@@123)
 :weight 0
)) (and (forall (($generated@@127 T@T) ($generated@@128 T@T) ($generated@@129 T@T) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ) (!  (or (= $generated@@132 $generated@@134) (= ($generated@@117 $generated@@127 $generated@@128 $generated@@129 ($generated@@119 $generated@@127 $generated@@128 $generated@@129 $generated@@131 $generated@@132 $generated@@133 $generated@@130) $generated@@134 $generated@@135) ($generated@@117 $generated@@127 $generated@@128 $generated@@129 $generated@@131 $generated@@134 $generated@@135)))
 :weight 0
)) (forall (($generated@@136 T@T) ($generated@@137 T@T) ($generated@@138 T@T) ($generated@@139 T@U) ($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ) (!  (or (= $generated@@142 $generated@@144) (= ($generated@@117 $generated@@136 $generated@@137 $generated@@138 ($generated@@119 $generated@@136 $generated@@137 $generated@@138 $generated@@140 $generated@@141 $generated@@142 $generated@@139) $generated@@143 $generated@@144) ($generated@@117 $generated@@136 $generated@@137 $generated@@138 $generated@@140 $generated@@143 $generated@@144)))
 :weight 0
)))))
(assert (forall (($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 Bool) ($generated@@149 T@U) ($generated@@150 T@U) ) (! (= ($generated@@11 ($generated@@117 $generated@@27 $generated@@25 $generated@@7 ($generated@@118 $generated@@145 $generated@@146 $generated@@147 $generated@@148) $generated@@149 $generated@@150))  (=> (and (or (not (= $generated@@149 $generated@@145)) (not true)) ($generated@@11 ($generated@@58 $generated@@7 ($generated@@24 $generated@@25 $generated@@26 ($generated@@24 $generated@@27 ($generated@@28 $generated@@25 $generated@@26) $generated@@146 $generated@@149) $generated@@147)))) $generated@@148))
 :pattern ( ($generated@@117 $generated@@27 $generated@@25 $generated@@7 ($generated@@118 $generated@@145 $generated@@146 $generated@@147 $generated@@148) $generated@@149 $generated@@150))
)))
(assert (forall (($generated@@151 T@U) ($generated@@152 T@U) ) (!  (=> ($generated@@34 $generated@@152 ($generated@@30 $generated@@151)) (and (= ($generated@@77 $generated@@27 ($generated@@58 $generated@@27 $generated@@152)) $generated@@152) ($generated@@80 $generated@@27 ($generated@@58 $generated@@27 $generated@@152) ($generated@@30 $generated@@151))))
 :pattern ( ($generated@@34 $generated@@152 ($generated@@30 $generated@@151)))
)))
(assert (forall (($generated@@153 T@U) ($generated@@154 T@U) ) (!  (=> ($generated@@34 $generated@@154 ($generated@@64 $generated@@153)) (and (= ($generated@@77 $generated@@27 ($generated@@58 $generated@@27 $generated@@154)) $generated@@154) ($generated@@80 $generated@@27 ($generated@@58 $generated@@27 $generated@@154) ($generated@@64 $generated@@153))))
 :pattern ( ($generated@@34 $generated@@154 ($generated@@64 $generated@@153)))
)))
(assert (forall (($generated@@155 T@U) ($generated@@156 T@U) ($generated@@157 T@U) ($generated@@158 T@U) ) (!  (=> ($generated@@31 ($generated@@35 $generated@@27 ($generated@@28 $generated@@25 $generated@@26) $generated@@155 $generated@@156 ($generated@@35 $generated@@25 $generated@@26 ($generated@@24 $generated@@27 ($generated@@28 $generated@@25 $generated@@26) $generated@@155 $generated@@156) $generated@@157 $generated@@158))) ($generated@@73 $generated@@155 ($generated@@35 $generated@@27 ($generated@@28 $generated@@25 $generated@@26) $generated@@155 $generated@@156 ($generated@@35 $generated@@25 $generated@@26 ($generated@@24 $generated@@27 ($generated@@28 $generated@@25 $generated@@26) $generated@@155 $generated@@156) $generated@@157 $generated@@158))))
 :pattern ( ($generated@@35 $generated@@27 ($generated@@28 $generated@@25 $generated@@26) $generated@@155 $generated@@156 ($generated@@35 $generated@@25 $generated@@26 ($generated@@24 $generated@@27 ($generated@@28 $generated@@25 $generated@@26) $generated@@155 $generated@@156) $generated@@157 $generated@@158)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@159 () T@U)
(declare-fun $generated@@160 () T@U)
(declare-fun $generated@@161 (T@U) Bool)
(declare-fun $generated@@162 () T@U)
(declare-fun $generated@@163 () T@U)
(declare-fun $generated@@164 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@165  (=> (and (= $generated@@159 ($generated@@118 $generated@@32 $generated@@160 $generated false)) (= (ControlFlow 0 2) (- 0 1))) true)))
(let (($generated@@166  (=> (and ($generated@@31 $generated@@160) ($generated@@161 $generated@@160)) (=> (and (and ($generated@@34 $generated@@162 $generated@@163) ($generated@@59 $generated@@162 $generated@@163 $generated@@160)) (and (= 0 $generated@@164) (= (ControlFlow 0 3) 2))) $generated@@165))))
$generated@@166)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
