(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 (Bool) T@U)
(declare-fun $generated@@6 (T@U) Bool)
(declare-fun $generated@@7 (Int) T@U)
(declare-fun $generated@@8 (T@U) Int)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@17 (T@U) Int)
(declare-fun $generated@@18 () T@U)
(declare-fun $generated@@19 (Int) Int)
(declare-fun $generated@@21 (T@T T@U) T@U)
(declare-fun $generated@@24 (T@T T@U) T@U)
(declare-fun $generated@@25 (T@T T@U) T@U)
(declare-fun $generated@@28 () Int)
(declare-fun $generated@@29 (T@U T@U) T@U)
(declare-fun $generated@@30 () T@T)
(declare-fun $generated@@31 (T@U T@U) Bool)
(declare-fun $generated@@32 (T@T T@U T@U) Bool)
(declare-fun $generated@@33 (T@U) T@U)
(declare-fun $generated@@34 (Int Int) Int)
(declare-fun $generated@@35 (T@U Int) T@U)
(declare-fun $generated@@36 (Int Int) Int)
(declare-fun $generated@@39 (T@U T@U T@U) Bool)
(declare-fun $generated@@40 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@47 (T@U T@U) Bool)
(declare-fun $generated@@58 (T@U) T@U)
(declare-fun $generated@@60 (T@U) T@U)
(declare-fun $generated@@64 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@65 () T@T)
(declare-fun $generated@@66 () T@T)
(declare-fun $generated@@67 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@68 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@69 () T@T)
(declare-fun $generated@@70 (T@T T@T) T@T)
(declare-fun $generated@@71 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@72 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@73 (T@T) T@T)
(declare-fun $generated@@74 (T@T) T@T)
(declare-fun $generated@@132 (T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (forall (($generated@@11 Bool) ) (! (= ($generated@@6 ($generated@@5 $generated@@11)) $generated@@11)
 :pattern ( ($generated@@5 $generated@@11))
))) (forall (($generated@@12 T@U) ) (! (= ($generated@@5 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 Int) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))))
(assert (distinct $generated $generated@@0)
)
(assert (= ($generated@@17 $generated@@18) 0))
(assert (forall (($generated@@20 Int) ) (! (= ($generated@@19 $generated@@20) $generated@@20)
 :pattern ( ($generated@@19 $generated@@20))
)))
(assert (forall (($generated@@22 T@U) ($generated@@23 T@T) ) (! (= ($generated@@21 $generated@@23 $generated@@22) $generated@@22)
 :pattern ( ($generated@@21 $generated@@23 $generated@@22))
)))
(assert (forall (($generated@@26 T@U) ($generated@@27 T@T) ) (! (= ($generated@@25 $generated@@27 ($generated@@24 $generated@@27 $generated@@26)) $generated@@26)
 :pattern ( ($generated@@24 $generated@@27 $generated@@26))
)))
(assert (= ($generated@@1 $generated@@30) 3))
(assert  (=> (<= 0 $generated@@28) (forall (($generated@@37 T@U) ($generated@@38 T@U) ) (!  (=> (or ($generated@@31 $generated@@37 ($generated@@21 $generated@@30 $generated@@38)) (and (< 0 $generated@@28) (and ($generated@@32 $generated@@30 $generated@@38 ($generated@@33 $generated@@37)) (= ($generated@@34 ($generated@@17 ($generated@@21 $generated@@30 $generated@@38)) ($generated@@19 2)) ($generated@@19 1))))) (= ($generated@@29 $generated@@37 ($generated@@21 $generated@@30 $generated@@38)) ($generated@@35 ($generated@@21 $generated@@30 $generated@@38) ($generated@@36 ($generated@@17 ($generated@@21 $generated@@30 $generated@@38)) ($generated@@19 2)))))
 :weight 3
 :pattern ( ($generated@@29 $generated@@37 ($generated@@21 $generated@@30 $generated@@38)))
))))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ($generated@@43 T@U) ($generated@@44 T@T) ) (! (= ($generated@@39 ($generated@@25 $generated@@44 $generated@@41) $generated@@42 $generated@@43) ($generated@@40 $generated@@44 $generated@@41 $generated@@42 $generated@@43))
 :pattern ( ($generated@@39 ($generated@@25 $generated@@44 $generated@@41) $generated@@42 $generated@@43))
)))
(assert (forall (($generated@@45 Int) ($generated@@46 Int) ) (! (= ($generated@@36 $generated@@45 $generated@@46) (div $generated@@45 $generated@@46))
 :pattern ( ($generated@@36 $generated@@45 $generated@@46))
)))
(assert (forall (($generated@@48 T@U) ($generated@@49 T@U) ($generated@@50 T@T) ) (! (= ($generated@@47 ($generated@@25 $generated@@50 $generated@@48) $generated@@49) ($generated@@32 $generated@@50 $generated@@48 $generated@@49))
 :pattern ( ($generated@@47 ($generated@@25 $generated@@50 $generated@@48) $generated@@49))
)))
(assert (forall (($generated@@51 T@U) ) (! (<= 0 ($generated@@17 $generated@@51))
 :pattern ( ($generated@@17 $generated@@51))
)))
(assert  (=> (<= 0 $generated@@28) (forall (($generated@@52 T@U) ($generated@@53 T@U) ) (!  (=> (or ($generated@@31 $generated@@52 $generated@@53) (and (< 0 $generated@@28) (and ($generated@@32 $generated@@30 $generated@@53 ($generated@@33 $generated@@52)) (= ($generated@@34 ($generated@@17 $generated@@53) ($generated@@19 2)) ($generated@@19 1))))) (= ($generated@@29 $generated@@52 $generated@@53) ($generated@@35 $generated@@53 ($generated@@36 ($generated@@17 $generated@@53) ($generated@@19 2)))))
 :pattern ( ($generated@@29 $generated@@52 $generated@@53))
))))
(assert (forall (($generated@@54 T@U) ($generated@@55 T@U) ($generated@@56 T@U) ) (! (= ($generated@@40 $generated@@30 $generated@@54 ($generated@@33 $generated@@55) $generated@@56) (forall (($generated@@57 Int) ) (!  (=> (and (<= 0 $generated@@57) (< $generated@@57 ($generated@@17 $generated@@54))) ($generated@@39 ($generated@@35 $generated@@54 $generated@@57) $generated@@55 $generated@@56))
 :pattern ( ($generated@@35 $generated@@54 $generated@@57))
)))
 :pattern ( ($generated@@40 $generated@@30 $generated@@54 ($generated@@33 $generated@@55) $generated@@56))
)))
(assert (forall (($generated@@59 T@U) ) (! (= ($generated@@58 ($generated@@33 $generated@@59)) $generated@@59)
 :pattern ( ($generated@@33 $generated@@59))
)))
(assert (forall (($generated@@61 T@U) ) (! (= ($generated@@60 ($generated@@33 $generated@@61)) $generated)
 :pattern ( ($generated@@33 $generated@@61))
)))
(assert (forall (($generated@@62 T@U) ($generated@@63 T@T) ) (! (= ($generated@@24 $generated@@63 ($generated@@25 $generated@@63 $generated@@62)) $generated@@62)
 :pattern ( ($generated@@25 $generated@@63 $generated@@62))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@75 T@T) ($generated@@76 T@T) ($generated@@77 T@T) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ) (! (= ($generated@@64 $generated@@75 $generated@@76 $generated@@77 ($generated@@71 $generated@@75 $generated@@76 $generated@@77 $generated@@79 $generated@@80 $generated@@81 $generated@@78) $generated@@80 $generated@@81) $generated@@78)
 :weight 0
)) (and (forall (($generated@@82 T@T) ($generated@@83 T@T) ($generated@@84 T@T) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ) (!  (or (= $generated@@87 $generated@@89) (= ($generated@@64 $generated@@82 $generated@@83 $generated@@84 ($generated@@71 $generated@@82 $generated@@83 $generated@@84 $generated@@86 $generated@@87 $generated@@88 $generated@@85) $generated@@89 $generated@@90) ($generated@@64 $generated@@82 $generated@@83 $generated@@84 $generated@@86 $generated@@89 $generated@@90)))
 :weight 0
)) (forall (($generated@@91 T@T) ($generated@@92 T@T) ($generated@@93 T@T) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ) (!  (or (= $generated@@97 $generated@@99) (= ($generated@@64 $generated@@91 $generated@@92 $generated@@93 ($generated@@71 $generated@@91 $generated@@92 $generated@@93 $generated@@95 $generated@@96 $generated@@97 $generated@@94) $generated@@98 $generated@@99) ($generated@@64 $generated@@91 $generated@@92 $generated@@93 $generated@@95 $generated@@98 $generated@@99)))
 :weight 0
)))) (= ($generated@@1 $generated@@65) 4)) (= ($generated@@1 $generated@@66) 5)) (forall (($generated@@100 T@T) ($generated@@101 T@T) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ) (! (= ($generated@@68 $generated@@100 $generated@@101 ($generated@@72 $generated@@100 $generated@@101 $generated@@103 $generated@@104 $generated@@102) $generated@@104) $generated@@102)
 :weight 0
))) (forall (($generated@@105 T@T) ($generated@@106 T@T) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ) (!  (or (= $generated@@109 $generated@@110) (= ($generated@@68 $generated@@105 $generated@@106 ($generated@@72 $generated@@105 $generated@@106 $generated@@108 $generated@@109 $generated@@107) $generated@@110) ($generated@@68 $generated@@105 $generated@@106 $generated@@108 $generated@@110)))
 :weight 0
))) (= ($generated@@1 $generated@@69) 6)) (forall (($generated@@111 T@T) ($generated@@112 T@T) ) (= ($generated@@1 ($generated@@70 $generated@@111 $generated@@112)) 7))) (forall (($generated@@113 T@T) ($generated@@114 T@T) ) (! (= ($generated@@73 ($generated@@70 $generated@@113 $generated@@114)) $generated@@113)
 :pattern ( ($generated@@70 $generated@@113 $generated@@114))
))) (forall (($generated@@115 T@T) ($generated@@116 T@T) ) (! (= ($generated@@74 ($generated@@70 $generated@@115 $generated@@116)) $generated@@116)
 :pattern ( ($generated@@70 $generated@@115 $generated@@116))
))))
(assert (forall (($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 Bool) ($generated@@121 T@U) ($generated@@122 T@U) ) (! (= ($generated@@6 ($generated@@64 $generated@@65 $generated@@66 $generated@@2 ($generated@@67 $generated@@117 $generated@@118 $generated@@119 $generated@@120) $generated@@121 $generated@@122))  (=> (and (or (not (= $generated@@121 $generated@@117)) (not true)) ($generated@@6 ($generated@@24 $generated@@2 ($generated@@68 $generated@@66 $generated@@69 ($generated@@68 $generated@@65 ($generated@@70 $generated@@66 $generated@@69) $generated@@118 $generated@@121) $generated@@119)))) $generated@@120))
 :pattern ( ($generated@@64 $generated@@65 $generated@@66 $generated@@2 ($generated@@67 $generated@@117 $generated@@118 $generated@@119 $generated@@120) $generated@@121 $generated@@122))
)))
(assert (forall (($generated@@123 Int) ($generated@@124 Int) ) (! (= ($generated@@34 $generated@@123 $generated@@124) (mod $generated@@123 $generated@@124))
 :pattern ( ($generated@@34 $generated@@123 $generated@@124))
)))
(assert  (=> (<= 0 $generated@@28) (forall (($generated@@125 T@U) ($generated@@126 T@U) ) (!  (=> (or ($generated@@31 $generated@@125 $generated@@126) (and (< 0 $generated@@28) (and ($generated@@32 $generated@@30 $generated@@126 ($generated@@33 $generated@@125)) (= ($generated@@34 ($generated@@17 $generated@@126) ($generated@@19 2)) ($generated@@19 1))))) ($generated@@47 ($generated@@29 $generated@@125 $generated@@126) $generated@@125))
 :pattern ( ($generated@@29 $generated@@125 $generated@@126))
))))
(assert (forall (($generated@@127 T@U) ($generated@@128 T@U) ) (!  (=> ($generated@@47 $generated@@127 ($generated@@33 $generated@@128)) (and (= ($generated@@25 $generated@@30 ($generated@@24 $generated@@30 $generated@@127)) $generated@@127) ($generated@@32 $generated@@30 ($generated@@24 $generated@@30 $generated@@127) ($generated@@33 $generated@@128))))
 :pattern ( ($generated@@47 $generated@@127 ($generated@@33 $generated@@128)))
)))
(assert (forall (($generated@@129 Int) ) (! (= ($generated@@25 $generated@@3 ($generated@@7 ($generated@@19 $generated@@129))) ($generated@@21 $generated@@69 ($generated@@25 $generated@@3 ($generated@@7 $generated@@129))))
 :pattern ( ($generated@@25 $generated@@3 ($generated@@7 ($generated@@19 $generated@@129))))
)))
(assert (forall (($generated@@130 T@U) ($generated@@131 T@T) ) (! (= ($generated@@25 $generated@@131 ($generated@@21 $generated@@131 $generated@@130)) ($generated@@21 $generated@@69 ($generated@@25 $generated@@131 $generated@@130)))
 :pattern ( ($generated@@25 $generated@@131 ($generated@@21 $generated@@131 $generated@@130)))
)))
(assert  (=> (<= 0 $generated@@28) (forall (($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ) (!  (=> (and (or ($generated@@31 $generated@@134 $generated@@135) (and (< 0 $generated@@28) (and (and ($generated@@32 $generated@@30 $generated@@135 ($generated@@33 $generated@@134)) ($generated@@40 $generated@@30 $generated@@135 ($generated@@33 $generated@@134) $generated@@133)) (= ($generated@@34 ($generated@@17 $generated@@135) ($generated@@19 2)) ($generated@@19 1))))) ($generated@@132 $generated@@133)) ($generated@@39 ($generated@@29 $generated@@134 $generated@@135) $generated@@134 $generated@@133))
 :pattern ( ($generated@@39 ($generated@@29 $generated@@134 $generated@@135) $generated@@134 $generated@@133))
))))
(assert (forall (($generated@@136 T@U) ) (!  (=> (= ($generated@@17 $generated@@136) 0) (= $generated@@136 $generated@@18))
 :pattern ( ($generated@@17 $generated@@136))
)))
(assert (forall (($generated@@137 T@U) ($generated@@138 T@U) ) (! (= ($generated@@32 $generated@@30 $generated@@137 ($generated@@33 $generated@@138)) (forall (($generated@@139 Int) ) (!  (=> (and (<= 0 $generated@@139) (< $generated@@139 ($generated@@17 $generated@@137))) ($generated@@47 ($generated@@35 $generated@@137 $generated@@139) $generated@@138))
 :pattern ( ($generated@@35 $generated@@137 $generated@@139))
)))
 :pattern ( ($generated@@32 $generated@@30 $generated@@137 ($generated@@33 $generated@@138)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@140 () T@U)
(declare-fun $generated@@141 () T@U)
(declare-fun $generated@@142 () T@U)
(declare-fun $generated@@143 () T@U)
(declare-fun $generated@@144 (T@U) Bool)
(declare-fun $generated@@145 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 7) (let (($generated@@146  (and (=> (= (ControlFlow 0 3) (- 0 4)) (or (not (= ($generated@@19 2) 0)) (not true))) (=> (or (not (= ($generated@@19 2) 0)) (not true)) (=> (= (ControlFlow 0 3) (- 0 2)) (and (<= 0 ($generated@@36 ($generated@@17 $generated@@140) ($generated@@19 2))) (< ($generated@@36 ($generated@@17 $generated@@140) ($generated@@19 2)) ($generated@@17 $generated@@140))))))))
(let (($generated@@147 true))
(let (($generated@@148  (=> (= $generated@@141 ($generated@@67 $generated@@142 $generated@@143 $generated@@0 false)) (and (=> (= (ControlFlow 0 5) (- 0 6)) (or (not (= ($generated@@19 2) 0)) (not true))) (=> (or (not (= ($generated@@19 2) 0)) (not true)) (=> (= ($generated@@34 ($generated@@17 $generated@@140) ($generated@@19 2)) ($generated@@19 1)) (and (=> (= (ControlFlow 0 5) 1) $generated@@147) (=> (= (ControlFlow 0 5) 3) $generated@@146))))))))
(let (($generated@@149  (=> (and (and (and ($generated@@132 $generated@@143) ($generated@@144 $generated@@143)) ($generated@@32 $generated@@30 $generated@@140 ($generated@@33 $generated@@145))) (and (= 0 $generated@@28) (= (ControlFlow 0 7) 5))) $generated@@148)))
$generated@@149)))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
