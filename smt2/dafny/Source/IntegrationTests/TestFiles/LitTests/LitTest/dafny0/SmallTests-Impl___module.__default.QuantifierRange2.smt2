(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 (Bool) T@U)
(declare-fun $generated@@6 (T@U) Bool)
(declare-fun $generated@@7 (Int) T@U)
(declare-fun $generated@@8 (T@U) Int)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@17 (T@U) Int)
(declare-fun $generated@@18 () T@U)
(declare-fun $generated@@19 (Int) Int)
(declare-fun $generated@@21 (T@T T@U) T@U)
(declare-fun $generated@@24 (T@T T@U) T@U)
(declare-fun $generated@@25 (T@T T@U) T@U)
(declare-fun $generated@@28 (T@U T@U T@U) Bool)
(declare-fun $generated@@29 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@34 (T@U T@U) Bool)
(declare-fun $generated@@35 (T@T T@U T@U) Bool)
(declare-fun $generated@@40 () T@T)
(declare-fun $generated@@41 (T@U) T@U)
(declare-fun $generated@@42 (T@U Int) T@U)
(declare-fun $generated@@47 (T@U) T@U)
(declare-fun $generated@@49 (T@U) T@U)
(declare-fun $generated@@53 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@54 () T@T)
(declare-fun $generated@@55 () T@T)
(declare-fun $generated@@56 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@57 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@58 () T@T)
(declare-fun $generated@@59 (T@T T@T) T@T)
(declare-fun $generated@@60 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@61 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@62 (T@T) T@T)
(declare-fun $generated@@63 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (forall (($generated@@11 Bool) ) (! (= ($generated@@6 ($generated@@5 $generated@@11)) $generated@@11)
 :pattern ( ($generated@@5 $generated@@11))
))) (forall (($generated@@12 T@U) ) (! (= ($generated@@5 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 Int) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))))
(assert (distinct $generated $generated@@0)
)
(assert (= ($generated@@17 $generated@@18) 0))
(assert (forall (($generated@@20 Int) ) (! (= ($generated@@19 $generated@@20) $generated@@20)
 :pattern ( ($generated@@19 $generated@@20))
)))
(assert (forall (($generated@@22 T@U) ($generated@@23 T@T) ) (! (= ($generated@@21 $generated@@23 $generated@@22) $generated@@22)
 :pattern ( ($generated@@21 $generated@@23 $generated@@22))
)))
(assert (forall (($generated@@26 T@U) ($generated@@27 T@T) ) (! (= ($generated@@25 $generated@@27 ($generated@@24 $generated@@27 $generated@@26)) $generated@@26)
 :pattern ( ($generated@@24 $generated@@27 $generated@@26))
)))
(assert (forall (($generated@@30 T@U) ($generated@@31 T@U) ($generated@@32 T@U) ($generated@@33 T@T) ) (! (= ($generated@@28 ($generated@@25 $generated@@33 $generated@@30) $generated@@31 $generated@@32) ($generated@@29 $generated@@33 $generated@@30 $generated@@31 $generated@@32))
 :pattern ( ($generated@@28 ($generated@@25 $generated@@33 $generated@@30) $generated@@31 $generated@@32))
)))
(assert (forall (($generated@@36 T@U) ($generated@@37 T@U) ($generated@@38 T@T) ) (! (= ($generated@@34 ($generated@@25 $generated@@38 $generated@@36) $generated@@37) ($generated@@35 $generated@@38 $generated@@36 $generated@@37))
 :pattern ( ($generated@@34 ($generated@@25 $generated@@38 $generated@@36) $generated@@37))
)))
(assert (forall (($generated@@39 T@U) ) (! (<= 0 ($generated@@17 $generated@@39))
 :pattern ( ($generated@@17 $generated@@39))
)))
(assert (= ($generated@@1 $generated@@40) 3))
(assert (forall (($generated@@43 T@U) ($generated@@44 T@U) ($generated@@45 T@U) ) (! (= ($generated@@29 $generated@@40 $generated@@43 ($generated@@41 $generated@@44) $generated@@45) (forall (($generated@@46 Int) ) (!  (=> (and (<= 0 $generated@@46) (< $generated@@46 ($generated@@17 $generated@@43))) ($generated@@28 ($generated@@42 $generated@@43 $generated@@46) $generated@@44 $generated@@45))
 :pattern ( ($generated@@42 $generated@@43 $generated@@46))
)))
 :pattern ( ($generated@@29 $generated@@40 $generated@@43 ($generated@@41 $generated@@44) $generated@@45))
)))
(assert (forall (($generated@@48 T@U) ) (! (= ($generated@@47 ($generated@@41 $generated@@48)) $generated@@48)
 :pattern ( ($generated@@41 $generated@@48))
)))
(assert (forall (($generated@@50 T@U) ) (! (= ($generated@@49 ($generated@@41 $generated@@50)) $generated)
 :pattern ( ($generated@@41 $generated@@50))
)))
(assert (forall (($generated@@51 T@U) ($generated@@52 T@T) ) (! (= ($generated@@24 $generated@@52 ($generated@@25 $generated@@52 $generated@@51)) $generated@@51)
 :pattern ( ($generated@@25 $generated@@52 $generated@@51))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@64 T@T) ($generated@@65 T@T) ($generated@@66 T@T) ($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ) (! (= ($generated@@53 $generated@@64 $generated@@65 $generated@@66 ($generated@@60 $generated@@64 $generated@@65 $generated@@66 $generated@@68 $generated@@69 $generated@@70 $generated@@67) $generated@@69 $generated@@70) $generated@@67)
 :weight 0
)) (and (forall (($generated@@71 T@T) ($generated@@72 T@T) ($generated@@73 T@T) ($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ) (!  (or (= $generated@@76 $generated@@78) (= ($generated@@53 $generated@@71 $generated@@72 $generated@@73 ($generated@@60 $generated@@71 $generated@@72 $generated@@73 $generated@@75 $generated@@76 $generated@@77 $generated@@74) $generated@@78 $generated@@79) ($generated@@53 $generated@@71 $generated@@72 $generated@@73 $generated@@75 $generated@@78 $generated@@79)))
 :weight 0
)) (forall (($generated@@80 T@T) ($generated@@81 T@T) ($generated@@82 T@T) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ) (!  (or (= $generated@@86 $generated@@88) (= ($generated@@53 $generated@@80 $generated@@81 $generated@@82 ($generated@@60 $generated@@80 $generated@@81 $generated@@82 $generated@@84 $generated@@85 $generated@@86 $generated@@83) $generated@@87 $generated@@88) ($generated@@53 $generated@@80 $generated@@81 $generated@@82 $generated@@84 $generated@@87 $generated@@88)))
 :weight 0
)))) (= ($generated@@1 $generated@@54) 4)) (= ($generated@@1 $generated@@55) 5)) (forall (($generated@@89 T@T) ($generated@@90 T@T) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ) (! (= ($generated@@57 $generated@@89 $generated@@90 ($generated@@61 $generated@@89 $generated@@90 $generated@@92 $generated@@93 $generated@@91) $generated@@93) $generated@@91)
 :weight 0
))) (forall (($generated@@94 T@T) ($generated@@95 T@T) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ) (!  (or (= $generated@@98 $generated@@99) (= ($generated@@57 $generated@@94 $generated@@95 ($generated@@61 $generated@@94 $generated@@95 $generated@@97 $generated@@98 $generated@@96) $generated@@99) ($generated@@57 $generated@@94 $generated@@95 $generated@@97 $generated@@99)))
 :weight 0
))) (= ($generated@@1 $generated@@58) 6)) (forall (($generated@@100 T@T) ($generated@@101 T@T) ) (= ($generated@@1 ($generated@@59 $generated@@100 $generated@@101)) 7))) (forall (($generated@@102 T@T) ($generated@@103 T@T) ) (! (= ($generated@@62 ($generated@@59 $generated@@102 $generated@@103)) $generated@@102)
 :pattern ( ($generated@@59 $generated@@102 $generated@@103))
))) (forall (($generated@@104 T@T) ($generated@@105 T@T) ) (! (= ($generated@@63 ($generated@@59 $generated@@104 $generated@@105)) $generated@@105)
 :pattern ( ($generated@@59 $generated@@104 $generated@@105))
))))
(assert (forall (($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 Bool) ($generated@@110 T@U) ($generated@@111 T@U) ) (! (= ($generated@@6 ($generated@@53 $generated@@54 $generated@@55 $generated@@2 ($generated@@56 $generated@@106 $generated@@107 $generated@@108 $generated@@109) $generated@@110 $generated@@111))  (=> (and (or (not (= $generated@@110 $generated@@106)) (not true)) ($generated@@6 ($generated@@24 $generated@@2 ($generated@@57 $generated@@55 $generated@@58 ($generated@@57 $generated@@54 ($generated@@59 $generated@@55 $generated@@58) $generated@@107 $generated@@110) $generated@@108)))) $generated@@109))
 :pattern ( ($generated@@53 $generated@@54 $generated@@55 $generated@@2 ($generated@@56 $generated@@106 $generated@@107 $generated@@108 $generated@@109) $generated@@110 $generated@@111))
)))
(assert (forall (($generated@@112 T@U) ($generated@@113 T@U) ) (!  (=> ($generated@@34 $generated@@112 ($generated@@41 $generated@@113)) (and (= ($generated@@25 $generated@@40 ($generated@@24 $generated@@40 $generated@@112)) $generated@@112) ($generated@@35 $generated@@40 ($generated@@24 $generated@@40 $generated@@112) ($generated@@41 $generated@@113))))
 :pattern ( ($generated@@34 $generated@@112 ($generated@@41 $generated@@113)))
)))
(assert (forall (($generated@@114 Int) ) (! (= ($generated@@25 $generated@@3 ($generated@@7 ($generated@@19 $generated@@114))) ($generated@@21 $generated@@58 ($generated@@25 $generated@@3 ($generated@@7 $generated@@114))))
 :pattern ( ($generated@@25 $generated@@3 ($generated@@7 ($generated@@19 $generated@@114))))
)))
(assert (forall (($generated@@115 T@U) ($generated@@116 T@T) ) (! (= ($generated@@25 $generated@@116 ($generated@@21 $generated@@116 $generated@@115)) ($generated@@21 $generated@@58 ($generated@@25 $generated@@116 $generated@@115)))
 :pattern ( ($generated@@25 $generated@@116 ($generated@@21 $generated@@116 $generated@@115)))
)))
(assert (forall (($generated@@117 T@U) ) (!  (=> (= ($generated@@17 $generated@@117) 0) (= $generated@@117 $generated@@18))
 :pattern ( ($generated@@17 $generated@@117))
)))
(assert (forall (($generated@@118 T@U) ($generated@@119 T@U) ) (! (= ($generated@@35 $generated@@40 $generated@@118 ($generated@@41 $generated@@119)) (forall (($generated@@120 Int) ) (!  (=> (and (<= 0 $generated@@120) (< $generated@@120 ($generated@@17 $generated@@118))) ($generated@@34 ($generated@@42 $generated@@118 $generated@@120) $generated@@119))
 :pattern ( ($generated@@42 $generated@@118 $generated@@120))
)))
 :pattern ( ($generated@@35 $generated@@40 $generated@@118 ($generated@@41 $generated@@119)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@121 () T@U)
(declare-fun $generated@@122 () Int)
(declare-fun $generated@@123 () T@U)
(declare-fun $generated@@124 () T@U)
(declare-fun $generated@@125 () Int)
(declare-fun $generated@@126 () Int)
(declare-fun $generated@@127 () T@U)
(declare-fun $generated@@128 () T@U)
(declare-fun $generated@@129 () T@U)
(declare-fun $generated@@130 (T@U) Bool)
(declare-fun $generated@@131 (T@U) Bool)
(declare-fun $generated@@132 () T@U)
(declare-fun $generated@@133 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 32) (let (($generated@@134 true))
(let (($generated@@135  (=> (= (ControlFlow 0 3) (- 0 2)) (forall (($generated@@136 Int) ) (!  (=> (and (<= ($generated@@19 0) $generated@@136) (< $generated@@136 $generated@@122)) (= ($generated@@42 $generated@@121 $generated@@136) $generated@@123))
 :pattern ( ($generated@@42 $generated@@121 $generated@@136))
)))))
(let (($generated@@137  (=> (and (not (forall (($generated@@138 Int) ) (!  (=> (and (<= ($generated@@19 0) $generated@@138) (< $generated@@138 $generated@@122)) (= ($generated@@42 $generated@@121 $generated@@138) $generated@@124))
 :pattern ( ($generated@@42 $generated@@121 $generated@@138))
))) (= (ControlFlow 0 6) 3)) $generated@@135)))
(let (($generated@@139  (=> (forall (($generated@@140 Int) ) (!  (=> (and (<= ($generated@@19 0) $generated@@140) (< $generated@@140 $generated@@122)) (= ($generated@@42 $generated@@121 $generated@@140) $generated@@124))
 :pattern ( ($generated@@42 $generated@@121 $generated@@140))
)) (and (=> (= (ControlFlow 0 4) (- 0 5)) (= $generated@@124 $generated@@123)) (=> (= $generated@@124 $generated@@123) (=> (= (ControlFlow 0 4) 3) $generated@@135))))))
(let (($generated@@141  (and (=> (= (ControlFlow 0 7) 4) $generated@@139) (=> (= (ControlFlow 0 7) 6) $generated@@137))))
(let (($generated@@142  (=> (and (not (and (<= ($generated@@19 0) $generated@@125) (< $generated@@125 $generated@@122))) (= (ControlFlow 0 10) 7)) $generated@@141)))
(let (($generated@@143  (=> (and (<= ($generated@@19 0) $generated@@125) (< $generated@@125 $generated@@122)) (and (=> (= (ControlFlow 0 8) (- 0 9)) (and (<= 0 $generated@@125) (< $generated@@125 ($generated@@17 $generated@@121)))) (=> (and (<= 0 $generated@@125) (< $generated@@125 ($generated@@17 $generated@@121))) (=> (= (ControlFlow 0 8) 7) $generated@@141))))))
(let (($generated@@144  (=> (< $generated@@125 ($generated@@19 0)) (and (=> (= (ControlFlow 0 12) 8) $generated@@143) (=> (= (ControlFlow 0 12) 10) $generated@@142)))))
(let (($generated@@145  (=> (<= ($generated@@19 0) $generated@@125) (and (=> (= (ControlFlow 0 11) 8) $generated@@143) (=> (= (ControlFlow 0 11) 10) $generated@@142)))))
(let (($generated@@146  (and (=> (= (ControlFlow 0 13) 11) $generated@@145) (=> (= (ControlFlow 0 13) 12) $generated@@144))))
(let (($generated@@147 true))
(let (($generated@@148  (and (=> (= (ControlFlow 0 16) (- 0 17)) (forall (($generated@@149 Int) )  (=> (or (not (= ($generated@@42 $generated@@121 (ite  (and (<= ($generated@@19 0) $generated@@149) (< $generated@@149 $generated@@122)) $generated@@149 0)) $generated@@123)) (not true)) (or (< $generated@@149 0) (<= $generated@@122 $generated@@149))))) (=> (forall (($generated@@150 Int) )  (=> (or (not (= ($generated@@42 $generated@@121 (ite  (and (<= ($generated@@19 0) $generated@@150) (< $generated@@150 $generated@@122)) $generated@@150 0)) $generated@@123)) (not true)) (or (< $generated@@150 0) (<= $generated@@122 $generated@@150)))) (and (=> (= (ControlFlow 0 16) 13) $generated@@146) (=> (= (ControlFlow 0 16) 1) $generated@@147))))))
(let (($generated@@151  (=> (and (< $generated@@126 0) (= (ControlFlow 0 20) 16)) $generated@@148)))
(let (($generated@@152  (=> (and (<= 0 $generated@@126) (= (ControlFlow 0 19) 16)) $generated@@148)))
(let (($generated@@153  (=> (or (not (= ($generated@@42 $generated@@121 (ite  (and (<= ($generated@@19 0) $generated@@126) (< $generated@@126 $generated@@122)) $generated@@126 0)) $generated@@123)) (not true)) (and (=> (= (ControlFlow 0 21) 19) $generated@@152) (=> (= (ControlFlow 0 21) 20) $generated@@151)))))
(let (($generated@@154  (=> (and (= ($generated@@42 $generated@@121 (ite  (and (<= ($generated@@19 0) $generated@@126) (< $generated@@126 $generated@@122)) $generated@@126 0)) $generated@@123) (= (ControlFlow 0 18) 16)) $generated@@148)))
(let (($generated@@155  (and (=> (= (ControlFlow 0 22) (- 0 23)) (and (<= 0 (ite  (and (<= ($generated@@19 0) $generated@@126) (< $generated@@126 $generated@@122)) $generated@@126 0)) (< (ite  (and (<= ($generated@@19 0) $generated@@126) (< $generated@@126 $generated@@122)) $generated@@126 0) ($generated@@17 $generated@@121)))) (and (=> (= (ControlFlow 0 22) 21) $generated@@153) (=> (= (ControlFlow 0 22) 18) $generated@@154)))))
(let (($generated@@156  (=> (and (not (and (<= ($generated@@19 0) $generated@@126) (< $generated@@126 $generated@@122))) (= (ControlFlow 0 25) 22)) $generated@@155)))
(let (($generated@@157  (=> (and (and (<= ($generated@@19 0) $generated@@126) (< $generated@@126 $generated@@122)) (= (ControlFlow 0 24) 22)) $generated@@155)))
(let (($generated@@158  (=> (< $generated@@126 ($generated@@19 0)) (and (=> (= (ControlFlow 0 27) 24) $generated@@157) (=> (= (ControlFlow 0 27) 25) $generated@@156)))))
(let (($generated@@159  (=> (<= ($generated@@19 0) $generated@@126) (and (=> (= (ControlFlow 0 26) 24) $generated@@157) (=> (= (ControlFlow 0 26) 25) $generated@@156)))))
(let (($generated@@160  (and (=> (= (ControlFlow 0 28) 26) $generated@@159) (=> (= (ControlFlow 0 28) 27) $generated@@158))))
(let (($generated@@161  (=> (= $generated@@122 ($generated@@19 1)) (and (=> (= (ControlFlow 0 29) 28) $generated@@160) (=> (= (ControlFlow 0 29) 15) $generated@@134)))))
(let (($generated@@162  (=> (or (not (= $generated@@122 ($generated@@19 1))) (not true)) (and (=> (= (ControlFlow 0 14) 13) $generated@@146) (=> (= (ControlFlow 0 14) 1) $generated@@147)))))
(let (($generated@@163  (=> (= $generated@@127 ($generated@@56 $generated@@128 $generated@@129 $generated@@0 false)) (and (=> (= (ControlFlow 0 30) (- 0 31)) (or (not (= $generated@@122 0)) (not true))) (=> (or (not (= $generated@@122 0)) (not true)) (and (=> (= (ControlFlow 0 30) 29) $generated@@161) (=> (= (ControlFlow 0 30) 14) $generated@@162)))))))
(let (($generated@@164  (=> (and ($generated@@130 $generated@@129) ($generated@@131 $generated@@129)) (=> (and (and ($generated@@35 $generated@@40 $generated@@121 ($generated@@41 $generated@@132)) ($generated@@29 $generated@@40 $generated@@121 ($generated@@41 $generated@@132) $generated@@129)) (and ($generated@@34 $generated@@124 $generated@@132) ($generated@@28 $generated@@124 $generated@@132 $generated@@129))) (=> (and (and (and ($generated@@34 $generated@@123 $generated@@132) ($generated@@28 $generated@@123 $generated@@132 $generated@@129)) (= 0 $generated@@133)) (and (and (<= ($generated@@19 0) $generated@@122) (<= $generated@@122 ($generated@@17 $generated@@121))) (and (exists (($generated@@165 Int) ) (!  (and (and (<= ($generated@@19 0) $generated@@165) (< $generated@@165 $generated@@122)) (= ($generated@@42 $generated@@121 $generated@@165) $generated@@123))
 :pattern ( ($generated@@42 $generated@@121 $generated@@165))
)) (= (ControlFlow 0 32) 30)))) $generated@@163)))))
$generated@@164)))))))))))))))))))))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 3) (- 2))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
