(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 (Bool) T@U)
(declare-fun $generated@@6 (T@U) Bool)
(declare-fun $generated@@7 (Int) T@U)
(declare-fun $generated@@8 (T@U) Int)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@17 () Int)
(declare-fun $generated@@18 (T@U T@U) T@U)
(declare-fun $generated@@19 (T@U T@U) Bool)
(declare-fun $generated@@20 (T@T T@U T@U) Bool)
(declare-fun $generated@@21 () T@T)
(declare-fun $generated@@22 (T@U) T@U)
(declare-fun $generated@@23 (T@U T@U) Bool)
(declare-fun $generated@@24 (T@U T@U) Bool)
(declare-fun $generated@@28 (T@U T@U) T@U)
(declare-fun $generated@@29 (T@U T@U) Bool)
(declare-fun $generated@@32 (T@U) Bool)
(declare-fun $generated@@38 (T@U T@U T@U) Bool)
(declare-fun $generated@@39 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@44 (T@T T@U) T@U)
(declare-fun $generated@@47 (T@T T@U) T@U)
(declare-fun $generated@@48 (T@T T@U) T@U)
(declare-fun $generated@@70 (T@U) T@U)
(declare-fun $generated@@72 (T@U) T@U)
(declare-fun $generated@@76 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@77 () T@T)
(declare-fun $generated@@78 () T@T)
(declare-fun $generated@@79 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@80 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@81 () T@T)
(declare-fun $generated@@82 (T@T T@T) T@T)
(declare-fun $generated@@83 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@84 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@85 (T@T) T@T)
(declare-fun $generated@@86 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (forall (($generated@@11 Bool) ) (! (= ($generated@@6 ($generated@@5 $generated@@11)) $generated@@11)
 :pattern ( ($generated@@5 $generated@@11))
))) (forall (($generated@@12 T@U) ) (! (= ($generated@@5 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 Int) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))))
(assert (distinct $generated $generated@@0)
)
(assert (= ($generated@@1 $generated@@21) 3))
(assert  (=> (<= 0 $generated@@17) (forall (($generated@@25 T@U) ($generated@@26 T@U) ) (!  (=> (or ($generated@@19 $generated@@25 $generated@@26) (and (< 0 $generated@@17) (and ($generated@@20 $generated@@21 $generated@@26 ($generated@@22 $generated@@25)) (exists (($generated@@27 T@U) ) (!  (and ($generated@@24 $generated@@27 $generated@@25) ($generated@@23 $generated@@26 $generated@@27))
 :pattern ( ($generated@@23 $generated@@26 $generated@@27))
))))) ($generated@@24 ($generated@@18 $generated@@25 $generated@@26) $generated@@25))
 :pattern ( ($generated@@18 $generated@@25 $generated@@26))
))))
(assert (forall (($generated@@30 T@U) ($generated@@31 T@U) ) (!  (=> ($generated@@29 $generated@@30 $generated@@31) ($generated@@23 $generated@@31 ($generated@@28 $generated@@30 $generated@@31)))
 :pattern ( ($generated@@28 $generated@@30 $generated@@31))
)))
(assert  (=> (<= 0 $generated@@17) (forall (($generated@@33 T@U) ($generated@@34 T@U) ($generated@@35 T@U) ) (!  (=> (or ($generated@@19 $generated@@33 $generated@@35) (and (< 0 $generated@@17) (and (and ($generated@@32 $generated@@34) ($generated@@20 $generated@@21 $generated@@35 ($generated@@22 $generated@@33))) (exists (($generated@@36 T@U) ) (!  (and ($generated@@24 $generated@@36 $generated@@33) ($generated@@23 $generated@@35 $generated@@36))
 :pattern ( ($generated@@23 $generated@@35 $generated@@36))
))))) (and ($generated@@29 $generated@@33 $generated@@35) (= ($generated@@18 $generated@@33 $generated@@35) (let (($generated@@37 ($generated@@28 $generated@@33 $generated@@35)))
$generated@@37))))
 :pattern ( ($generated@@18 $generated@@33 $generated@@35) ($generated@@32 $generated@@34))
))))
(assert  (=> (<= 0 $generated@@17) (forall (($generated@@40 T@U) ($generated@@41 T@U) ($generated@@42 T@U) ) (!  (=> (and (or ($generated@@19 $generated@@41 $generated@@42) (and (< 0 $generated@@17) (and (and ($generated@@20 $generated@@21 $generated@@42 ($generated@@22 $generated@@41)) ($generated@@39 $generated@@21 $generated@@42 ($generated@@22 $generated@@41) $generated@@40)) (exists (($generated@@43 T@U) ) (!  (and ($generated@@24 $generated@@43 $generated@@41) ($generated@@23 $generated@@42 $generated@@43))
 :pattern ( ($generated@@23 $generated@@42 $generated@@43))
))))) ($generated@@32 $generated@@40)) ($generated@@38 ($generated@@18 $generated@@41 $generated@@42) $generated@@41 $generated@@40))
 :pattern ( ($generated@@38 ($generated@@18 $generated@@41 $generated@@42) $generated@@41 $generated@@40))
))))
(assert (forall (($generated@@45 T@U) ($generated@@46 T@T) ) (! (= ($generated@@44 $generated@@46 $generated@@45) $generated@@45)
 :pattern ( ($generated@@44 $generated@@46 $generated@@45))
)))
(assert (forall (($generated@@49 T@U) ($generated@@50 T@T) ) (! (= ($generated@@48 $generated@@50 ($generated@@47 $generated@@50 $generated@@49)) $generated@@49)
 :pattern ( ($generated@@47 $generated@@50 $generated@@49))
)))
(assert (forall (($generated@@51 T@U) ($generated@@52 T@U) ) (! (= ($generated@@20 $generated@@21 $generated@@51 ($generated@@22 $generated@@52)) (forall (($generated@@53 T@U) ) (!  (=> ($generated@@23 $generated@@51 $generated@@53) ($generated@@24 $generated@@53 $generated@@52))
 :pattern ( ($generated@@23 $generated@@51 $generated@@53))
)))
 :pattern ( ($generated@@20 $generated@@21 $generated@@51 ($generated@@22 $generated@@52)))
)))
(assert (forall (($generated@@54 T@U) ($generated@@55 T@U) ($generated@@56 T@U) ($generated@@57 T@T) ) (! (= ($generated@@38 ($generated@@48 $generated@@57 $generated@@54) $generated@@55 $generated@@56) ($generated@@39 $generated@@57 $generated@@54 $generated@@55 $generated@@56))
 :pattern ( ($generated@@38 ($generated@@48 $generated@@57 $generated@@54) $generated@@55 $generated@@56))
)))
(assert  (=> (<= 0 $generated@@17) (forall (($generated@@58 T@U) ($generated@@59 T@U) ($generated@@60 T@U) ) (!  (=> (or ($generated@@19 $generated@@58 ($generated@@44 $generated@@21 $generated@@60)) (and (< 0 $generated@@17) (and (and ($generated@@32 $generated@@59) ($generated@@20 $generated@@21 $generated@@60 ($generated@@22 $generated@@58))) (exists (($generated@@61 T@U) ) (!  (and ($generated@@24 $generated@@61 $generated@@58) ($generated@@23 ($generated@@44 $generated@@21 $generated@@60) $generated@@61))
 :pattern ( ($generated@@23 $generated@@60 $generated@@61))
))))) (and ($generated@@29 $generated@@58 ($generated@@44 $generated@@21 $generated@@60)) (= ($generated@@18 $generated@@58 ($generated@@44 $generated@@21 $generated@@60)) (let (($generated@@62 ($generated@@28 $generated@@58 ($generated@@44 $generated@@21 $generated@@60))))
$generated@@62))))
 :weight 3
 :pattern ( ($generated@@18 $generated@@58 ($generated@@44 $generated@@21 $generated@@60)) ($generated@@32 $generated@@59))
))))
(assert (forall (($generated@@63 T@U) ($generated@@64 T@U) ($generated@@65 T@T) ) (! (= ($generated@@24 ($generated@@48 $generated@@65 $generated@@63) $generated@@64) ($generated@@20 $generated@@65 $generated@@63 $generated@@64))
 :pattern ( ($generated@@24 ($generated@@48 $generated@@65 $generated@@63) $generated@@64))
)))
(assert (forall (($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ) (! (= ($generated@@39 $generated@@21 $generated@@66 ($generated@@22 $generated@@67) $generated@@68) (forall (($generated@@69 T@U) ) (!  (=> ($generated@@23 $generated@@66 $generated@@69) ($generated@@38 $generated@@69 $generated@@67 $generated@@68))
 :pattern ( ($generated@@23 $generated@@66 $generated@@69))
)))
 :pattern ( ($generated@@39 $generated@@21 $generated@@66 ($generated@@22 $generated@@67) $generated@@68))
)))
(assert (forall (($generated@@71 T@U) ) (! (= ($generated@@70 ($generated@@22 $generated@@71)) $generated@@71)
 :pattern ( ($generated@@22 $generated@@71))
)))
(assert (forall (($generated@@73 T@U) ) (! (= ($generated@@72 ($generated@@22 $generated@@73)) $generated)
 :pattern ( ($generated@@22 $generated@@73))
)))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@T) ) (! (= ($generated@@47 $generated@@75 ($generated@@48 $generated@@75 $generated@@74)) $generated@@74)
 :pattern ( ($generated@@48 $generated@@75 $generated@@74))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@87 T@T) ($generated@@88 T@T) ($generated@@89 T@T) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ) (! (= ($generated@@76 $generated@@87 $generated@@88 $generated@@89 ($generated@@83 $generated@@87 $generated@@88 $generated@@89 $generated@@91 $generated@@92 $generated@@93 $generated@@90) $generated@@92 $generated@@93) $generated@@90)
 :weight 0
)) (and (forall (($generated@@94 T@T) ($generated@@95 T@T) ($generated@@96 T@T) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@99 $generated@@101) (= ($generated@@76 $generated@@94 $generated@@95 $generated@@96 ($generated@@83 $generated@@94 $generated@@95 $generated@@96 $generated@@98 $generated@@99 $generated@@100 $generated@@97) $generated@@101 $generated@@102) ($generated@@76 $generated@@94 $generated@@95 $generated@@96 $generated@@98 $generated@@101 $generated@@102)))
 :weight 0
)) (forall (($generated@@103 T@T) ($generated@@104 T@T) ($generated@@105 T@T) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (!  (or (= $generated@@109 $generated@@111) (= ($generated@@76 $generated@@103 $generated@@104 $generated@@105 ($generated@@83 $generated@@103 $generated@@104 $generated@@105 $generated@@107 $generated@@108 $generated@@109 $generated@@106) $generated@@110 $generated@@111) ($generated@@76 $generated@@103 $generated@@104 $generated@@105 $generated@@107 $generated@@110 $generated@@111)))
 :weight 0
)))) (= ($generated@@1 $generated@@77) 4)) (= ($generated@@1 $generated@@78) 5)) (forall (($generated@@112 T@T) ($generated@@113 T@T) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ) (! (= ($generated@@80 $generated@@112 $generated@@113 ($generated@@84 $generated@@112 $generated@@113 $generated@@115 $generated@@116 $generated@@114) $generated@@116) $generated@@114)
 :weight 0
))) (forall (($generated@@117 T@T) ($generated@@118 T@T) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ) (!  (or (= $generated@@121 $generated@@122) (= ($generated@@80 $generated@@117 $generated@@118 ($generated@@84 $generated@@117 $generated@@118 $generated@@120 $generated@@121 $generated@@119) $generated@@122) ($generated@@80 $generated@@117 $generated@@118 $generated@@120 $generated@@122)))
 :weight 0
))) (= ($generated@@1 $generated@@81) 6)) (forall (($generated@@123 T@T) ($generated@@124 T@T) ) (= ($generated@@1 ($generated@@82 $generated@@123 $generated@@124)) 7))) (forall (($generated@@125 T@T) ($generated@@126 T@T) ) (! (= ($generated@@85 ($generated@@82 $generated@@125 $generated@@126)) $generated@@125)
 :pattern ( ($generated@@82 $generated@@125 $generated@@126))
))) (forall (($generated@@127 T@T) ($generated@@128 T@T) ) (! (= ($generated@@86 ($generated@@82 $generated@@127 $generated@@128)) $generated@@128)
 :pattern ( ($generated@@82 $generated@@127 $generated@@128))
))))
(assert (forall (($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 Bool) ($generated@@133 T@U) ($generated@@134 T@U) ) (! (= ($generated@@6 ($generated@@76 $generated@@77 $generated@@78 $generated@@2 ($generated@@79 $generated@@129 $generated@@130 $generated@@131 $generated@@132) $generated@@133 $generated@@134))  (=> (and (or (not (= $generated@@133 $generated@@129)) (not true)) ($generated@@6 ($generated@@47 $generated@@2 ($generated@@80 $generated@@78 $generated@@81 ($generated@@80 $generated@@77 ($generated@@82 $generated@@78 $generated@@81) $generated@@130 $generated@@133) $generated@@131)))) $generated@@132))
 :pattern ( ($generated@@76 $generated@@77 $generated@@78 $generated@@2 ($generated@@79 $generated@@129 $generated@@130 $generated@@131 $generated@@132) $generated@@133 $generated@@134))
)))
(assert (forall (($generated@@135 T@U) ($generated@@136 T@U) ) (!  (=> ($generated@@24 $generated@@135 ($generated@@22 $generated@@136)) (and (= ($generated@@48 $generated@@21 ($generated@@47 $generated@@21 $generated@@135)) $generated@@135) ($generated@@20 $generated@@21 ($generated@@47 $generated@@21 $generated@@135) ($generated@@22 $generated@@136))))
 :pattern ( ($generated@@24 $generated@@135 ($generated@@22 $generated@@136)))
)))
(assert (forall (($generated@@137 T@U) ($generated@@138 T@T) ) (! (= ($generated@@48 $generated@@138 ($generated@@44 $generated@@138 $generated@@137)) ($generated@@44 $generated@@81 ($generated@@48 $generated@@138 $generated@@137)))
 :pattern ( ($generated@@48 $generated@@138 ($generated@@44 $generated@@138 $generated@@137)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@139 () T@U)
(declare-fun $generated@@140 () T@U)
(declare-fun $generated@@141 () T@U)
(declare-fun $generated@@142 () T@U)
(declare-fun $generated@@143 () T@U)
(declare-fun $generated@@144 () T@U)
(declare-fun $generated@@145 () T@U)
(declare-fun $generated@@146 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 7) (let (($generated@@147  (=> (= (ControlFlow 0 3) (- 0 2)) (exists (($generated@@148 T@U) )  (and ($generated@@24 $generated@@148 $generated@@139) ($generated@@23 $generated@@140 $generated@@148))))))
(let (($generated@@149  (=> (and (not (and ($generated@@24 $generated@@141 $generated@@139) ($generated@@38 $generated@@141 $generated@@139 $generated@@142))) (= (ControlFlow 0 5) 3)) $generated@@147)))
(let (($generated@@150  (=> (and (and ($generated@@24 $generated@@141 $generated@@139) ($generated@@38 $generated@@141 $generated@@139 $generated@@142)) (= (ControlFlow 0 4) 3)) $generated@@147)))
(let (($generated@@151 true))
(let (($generated@@152  (=> (= $generated@@143 ($generated@@79 $generated@@144 $generated@@142 $generated@@0 false)) (=> (and (and ($generated@@24 $generated@@145 $generated@@139) ($generated@@38 $generated@@145 $generated@@139 $generated@@142)) ($generated@@23 $generated@@140 $generated@@145)) (and (and (=> (= (ControlFlow 0 6) 1) $generated@@151) (=> (= (ControlFlow 0 6) 4) $generated@@150)) (=> (= (ControlFlow 0 6) 5) $generated@@149))))))
(let (($generated@@153  (=> (and (and (and ($generated@@32 $generated@@142) ($generated@@146 $generated@@142)) ($generated@@20 $generated@@21 $generated@@140 ($generated@@22 $generated@@139))) (and (= 0 $generated@@17) (= (ControlFlow 0 7) 6))) $generated@@152)))
$generated@@153)))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
