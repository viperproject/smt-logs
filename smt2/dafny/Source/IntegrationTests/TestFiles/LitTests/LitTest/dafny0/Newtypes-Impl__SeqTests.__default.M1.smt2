(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 (T@U) T@U)
(declare-fun $generated@@22 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@23 () T@U)
(declare-fun $generated@@26 (T@U T@U) Bool)
(declare-fun $generated@@27 () T@U)
(declare-fun $generated@@29 (T@U) Int)
(declare-fun $generated@@30 (Int) Int)
(declare-fun $generated@@32 (T@T T@U) T@U)
(declare-fun $generated@@35 (T@T T@U) T@U)
(declare-fun $generated@@36 (T@T T@U) T@U)
(declare-fun $generated@@39 (T@U T@U T@U) Bool)
(declare-fun $generated@@44 (T@U T@U) Bool)
(declare-fun $generated@@45 (T@T T@U T@U) Bool)
(declare-fun $generated@@47 (T@U Int) T@U)
(declare-fun $generated@@56 () T@T)
(declare-fun $generated@@57 (T@U) T@U)
(declare-fun $generated@@62 (T@U) T@U)
(declare-fun $generated@@67 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@68 () T@T)
(declare-fun $generated@@69 () T@T)
(declare-fun $generated@@70 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@71 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@72 () T@T)
(declare-fun $generated@@73 (T@T T@T) T@T)
(declare-fun $generated@@74 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@75 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@76 (T@T) T@T)
(declare-fun $generated@@77 (T@T) T@T)
(declare-fun $generated@@128 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert (= ($generated@@21 $generated) $generated@@0))
(assert (forall (($generated@@24 T@U) ($generated@@25 T@U) ) (! ($generated@@22 $generated@@7 $generated@@24 $generated@@23 $generated@@25)
 :pattern ( ($generated@@22 $generated@@7 $generated@@24 $generated@@23 $generated@@25))
)))
(assert (forall (($generated@@28 T@U) ) (!  (not ($generated@@26 $generated@@27 $generated@@28))
 :pattern ( ($generated@@26 $generated@@27 $generated@@28))
)))
(assert (= ($generated@@29 $generated@@27) 0))
(assert (forall (($generated@@31 Int) ) (! (= ($generated@@30 $generated@@31) $generated@@31)
 :pattern ( ($generated@@30 $generated@@31))
)))
(assert (forall (($generated@@33 T@U) ($generated@@34 T@T) ) (! (= ($generated@@32 $generated@@34 $generated@@33) $generated@@33)
 :pattern ( ($generated@@32 $generated@@34 $generated@@33))
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@T) ) (! (= ($generated@@36 $generated@@38 ($generated@@35 $generated@@38 $generated@@37)) $generated@@37)
 :pattern ( ($generated@@35 $generated@@38 $generated@@37))
)))
(assert (forall (($generated@@40 T@U) ($generated@@41 T@U) ($generated@@42 T@U) ($generated@@43 T@T) ) (! (= ($generated@@39 ($generated@@36 $generated@@43 $generated@@40) $generated@@41 $generated@@42) ($generated@@22 $generated@@43 $generated@@40 $generated@@41 $generated@@42))
 :pattern ( ($generated@@39 ($generated@@36 $generated@@43 $generated@@40) $generated@@41 $generated@@42))
)))
(assert (forall (($generated@@46 T@U) ) (!  (=> ($generated@@44 $generated@@46 $generated@@23) (and (= ($generated@@36 $generated@@7 ($generated@@35 $generated@@7 $generated@@46)) $generated@@46) ($generated@@45 $generated@@7 ($generated@@35 $generated@@7 $generated@@46) $generated@@23)))
 :pattern ( ($generated@@44 $generated@@46 $generated@@23))
)))
(assert (forall (($generated@@48 T@U) ($generated@@49 T@U) ) (! (= ($generated@@26 $generated@@48 $generated@@49) (exists (($generated@@50 Int) ) (!  (and (and (<= 0 $generated@@50) (< $generated@@50 ($generated@@29 $generated@@48))) (= ($generated@@47 $generated@@48 $generated@@50) $generated@@49))
 :pattern ( ($generated@@47 $generated@@48 $generated@@50))
)))
 :pattern ( ($generated@@26 $generated@@48 $generated@@49))
)))
(assert (forall (($generated@@51 T@U) ) (!  (=> ($generated@@44 $generated@@51 $generated) (and (= ($generated@@36 $generated@@7 ($generated@@35 $generated@@7 $generated@@51)) $generated@@51) ($generated@@45 $generated@@7 ($generated@@35 $generated@@7 $generated@@51) $generated)))
 :pattern ( ($generated@@44 $generated@@51 $generated))
)))
(assert (forall (($generated@@52 T@U) ($generated@@53 T@U) ($generated@@54 T@T) ) (! (= ($generated@@44 ($generated@@36 $generated@@54 $generated@@52) $generated@@53) ($generated@@45 $generated@@54 $generated@@52 $generated@@53))
 :pattern ( ($generated@@44 ($generated@@36 $generated@@54 $generated@@52) $generated@@53))
)))
(assert (forall (($generated@@55 T@U) ) (! (<= 0 ($generated@@29 $generated@@55))
 :pattern ( ($generated@@29 $generated@@55))
)))
(assert (= ($generated@@5 $generated@@56) 3))
(assert (forall (($generated@@58 T@U) ($generated@@59 T@U) ($generated@@60 T@U) ) (! (= ($generated@@22 $generated@@56 $generated@@58 ($generated@@57 $generated@@59) $generated@@60) (forall (($generated@@61 Int) ) (!  (=> (and (<= 0 $generated@@61) (< $generated@@61 ($generated@@29 $generated@@58))) ($generated@@39 ($generated@@47 $generated@@58 $generated@@61) $generated@@59 $generated@@60))
 :pattern ( ($generated@@47 $generated@@58 $generated@@61))
)))
 :pattern ( ($generated@@22 $generated@@56 $generated@@58 ($generated@@57 $generated@@59) $generated@@60))
)))
(assert (forall (($generated@@63 T@U) ) (! (= ($generated@@62 ($generated@@57 $generated@@63)) $generated@@63)
 :pattern ( ($generated@@57 $generated@@63))
)))
(assert (forall (($generated@@64 T@U) ) (! (= ($generated@@21 ($generated@@57 $generated@@64)) $generated@@1)
 :pattern ( ($generated@@57 $generated@@64))
)))
(assert (forall (($generated@@65 T@U) ($generated@@66 T@T) ) (! (= ($generated@@35 $generated@@66 ($generated@@36 $generated@@66 $generated@@65)) $generated@@65)
 :pattern ( ($generated@@36 $generated@@66 $generated@@65))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@78 T@T) ($generated@@79 T@T) ($generated@@80 T@T) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ) (! (= ($generated@@67 $generated@@78 $generated@@79 $generated@@80 ($generated@@74 $generated@@78 $generated@@79 $generated@@80 $generated@@82 $generated@@83 $generated@@84 $generated@@81) $generated@@83 $generated@@84) $generated@@81)
 :weight 0
)) (and (forall (($generated@@85 T@T) ($generated@@86 T@T) ($generated@@87 T@T) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ) (!  (or (= $generated@@90 $generated@@92) (= ($generated@@67 $generated@@85 $generated@@86 $generated@@87 ($generated@@74 $generated@@85 $generated@@86 $generated@@87 $generated@@89 $generated@@90 $generated@@91 $generated@@88) $generated@@92 $generated@@93) ($generated@@67 $generated@@85 $generated@@86 $generated@@87 $generated@@89 $generated@@92 $generated@@93)))
 :weight 0
)) (forall (($generated@@94 T@T) ($generated@@95 T@T) ($generated@@96 T@T) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@100 $generated@@102) (= ($generated@@67 $generated@@94 $generated@@95 $generated@@96 ($generated@@74 $generated@@94 $generated@@95 $generated@@96 $generated@@98 $generated@@99 $generated@@100 $generated@@97) $generated@@101 $generated@@102) ($generated@@67 $generated@@94 $generated@@95 $generated@@96 $generated@@98 $generated@@101 $generated@@102)))
 :weight 0
)))) (= ($generated@@5 $generated@@68) 4)) (= ($generated@@5 $generated@@69) 5)) (forall (($generated@@103 T@T) ($generated@@104 T@T) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ) (! (= ($generated@@71 $generated@@103 $generated@@104 ($generated@@75 $generated@@103 $generated@@104 $generated@@106 $generated@@107 $generated@@105) $generated@@107) $generated@@105)
 :weight 0
))) (forall (($generated@@108 T@T) ($generated@@109 T@T) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ) (!  (or (= $generated@@112 $generated@@113) (= ($generated@@71 $generated@@108 $generated@@109 ($generated@@75 $generated@@108 $generated@@109 $generated@@111 $generated@@112 $generated@@110) $generated@@113) ($generated@@71 $generated@@108 $generated@@109 $generated@@111 $generated@@113)))
 :weight 0
))) (= ($generated@@5 $generated@@72) 6)) (forall (($generated@@114 T@T) ($generated@@115 T@T) ) (= ($generated@@5 ($generated@@73 $generated@@114 $generated@@115)) 7))) (forall (($generated@@116 T@T) ($generated@@117 T@T) ) (! (= ($generated@@76 ($generated@@73 $generated@@116 $generated@@117)) $generated@@116)
 :pattern ( ($generated@@73 $generated@@116 $generated@@117))
))) (forall (($generated@@118 T@T) ($generated@@119 T@T) ) (! (= ($generated@@77 ($generated@@73 $generated@@118 $generated@@119)) $generated@@119)
 :pattern ( ($generated@@73 $generated@@118 $generated@@119))
))))
(assert (forall (($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 Bool) ($generated@@124 T@U) ($generated@@125 T@U) ) (! (= ($generated@@10 ($generated@@67 $generated@@68 $generated@@69 $generated@@6 ($generated@@70 $generated@@120 $generated@@121 $generated@@122 $generated@@123) $generated@@124 $generated@@125))  (=> (and (or (not (= $generated@@124 $generated@@120)) (not true)) ($generated@@10 ($generated@@35 $generated@@6 ($generated@@71 $generated@@69 $generated@@72 ($generated@@71 $generated@@68 ($generated@@73 $generated@@69 $generated@@72) $generated@@121 $generated@@124) $generated@@122)))) $generated@@123))
 :pattern ( ($generated@@67 $generated@@68 $generated@@69 $generated@@6 ($generated@@70 $generated@@120 $generated@@121 $generated@@122 $generated@@123) $generated@@124 $generated@@125))
)))
(assert (forall (($generated@@126 T@U) ($generated@@127 T@U) ) (!  (=> ($generated@@44 $generated@@126 ($generated@@57 $generated@@127)) (and (= ($generated@@36 $generated@@56 ($generated@@35 $generated@@56 $generated@@126)) $generated@@126) ($generated@@45 $generated@@56 ($generated@@35 $generated@@56 $generated@@126) ($generated@@57 $generated@@127))))
 :pattern ( ($generated@@44 $generated@@126 ($generated@@57 $generated@@127)))
)))
(assert (= ($generated@@21 $generated@@23) $generated@@3))
(assert (= ($generated@@128 $generated@@23) $generated@@4))
(assert (forall (($generated@@129 T@U) ) (! (= ($generated@@45 $generated@@7 $generated@@129 $generated@@23)  (and (<= ($generated@@30 0) ($generated@@12 $generated@@129)) (< ($generated@@12 $generated@@129) 256)))
 :pattern ( ($generated@@45 $generated@@7 $generated@@129 $generated@@23))
)))
(assert (forall (($generated@@130 Int) ) (! (= ($generated@@36 $generated@@7 ($generated@@11 ($generated@@30 $generated@@130))) ($generated@@32 $generated@@72 ($generated@@36 $generated@@7 ($generated@@11 $generated@@130))))
 :pattern ( ($generated@@36 $generated@@7 ($generated@@11 ($generated@@30 $generated@@130))))
)))
(assert (forall (($generated@@131 T@U) ($generated@@132 T@T) ) (! (= ($generated@@36 $generated@@132 ($generated@@32 $generated@@132 $generated@@131)) ($generated@@32 $generated@@72 ($generated@@36 $generated@@132 $generated@@131)))
 :pattern ( ($generated@@36 $generated@@132 ($generated@@32 $generated@@132 $generated@@131)))
)))
(assert (forall (($generated@@133 T@U) ) (!  (=> (= ($generated@@29 $generated@@133) 0) (= $generated@@133 $generated@@27))
 :pattern ( ($generated@@29 $generated@@133))
)))
(assert (forall (($generated@@134 T@U) ($generated@@135 T@U) ) (! ($generated@@22 $generated@@7 $generated@@135 $generated $generated@@134)
 :pattern ( ($generated@@22 $generated@@7 $generated@@135 $generated $generated@@134))
)))
(assert (forall (($generated@@136 T@U) ($generated@@137 T@U) ) (! (= ($generated@@45 $generated@@56 $generated@@136 ($generated@@57 $generated@@137)) (forall (($generated@@138 Int) ) (!  (=> (and (<= 0 $generated@@138) (< $generated@@138 ($generated@@29 $generated@@136))) ($generated@@44 ($generated@@47 $generated@@136 $generated@@138) $generated@@137))
 :pattern ( ($generated@@47 $generated@@136 $generated@@138))
)))
 :pattern ( ($generated@@45 $generated@@56 $generated@@136 ($generated@@57 $generated@@137)))
)))
(assert (forall (($generated@@139 T@U) ) (! ($generated@@45 $generated@@7 $generated@@139 $generated)
 :pattern ( ($generated@@45 $generated@@7 $generated@@139 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@140 () T@U)
(declare-fun $generated@@141 () T@U)
(declare-fun $generated@@142 () T@U)
(declare-fun $generated@@143 () T@U)
(declare-fun $generated@@144 () T@U)
(declare-fun $generated@@145 (T@U) Bool)
(declare-fun $generated@@146 (T@U) Bool)
(declare-fun $generated@@147 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 6) (let (($generated@@148  (=> (= $generated@@140 ($generated@@70 $generated@@141 $generated@@142 $generated@@2 false)) (and (=> (= (ControlFlow 0 2) (- 0 5)) (and (<= 0 ($generated@@30 0)) (< ($generated@@30 0) ($generated@@29 $generated@@143)))) (and (=> (= (ControlFlow 0 2) (- 0 4)) ($generated@@26 $generated@@143 ($generated@@47 $generated@@143 ($generated@@30 0)))) (=> ($generated@@26 $generated@@143 ($generated@@47 $generated@@143 ($generated@@30 0))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (and (<= 0 ($generated@@30 0)) (< ($generated@@30 0) ($generated@@29 $generated@@144)))) (=> (= (ControlFlow 0 2) (- 0 1)) ($generated@@26 $generated@@144 ($generated@@47 $generated@@144 ($generated@@30 0)))))))))))
(let (($generated@@149  (=> (and ($generated@@145 $generated@@142) ($generated@@146 $generated@@142)) (=> (and (and (and ($generated@@45 $generated@@56 $generated@@143 ($generated@@57 $generated@@23)) ($generated@@22 $generated@@56 $generated@@143 ($generated@@57 $generated@@23) $generated@@142)) (and ($generated@@45 $generated@@56 $generated@@144 ($generated@@57 $generated)) ($generated@@22 $generated@@56 $generated@@144 ($generated@@57 $generated) $generated@@142))) (and (and (= 1 $generated@@147) (= ($generated@@29 $generated@@143) ($generated@@30 1))) (and (= ($generated@@29 $generated@@144) ($generated@@30 1)) (= (ControlFlow 0 6) 2)))) $generated@@148))))
$generated@@149)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
