(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 (T@T) Int)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Bool) T@U)
(declare-fun $generated@@9 (T@U) Bool)
(declare-fun $generated@@10 (Int) T@U)
(declare-fun $generated@@11 (T@U) Int)
(declare-fun $generated@@12 (Real) T@U)
(declare-fun $generated@@13 (T@U) Real)
(declare-fun $generated@@20 (T@U) T@U)
(declare-fun $generated@@21 (Real) Int)
(declare-fun $generated@@23 (Int) Int)
(declare-fun $generated@@25 (Real) Real)
(declare-fun $generated@@27 (T@T T@U) T@U)
(declare-fun $generated@@30 (T@T T@U) T@U)
(declare-fun $generated@@31 (T@T T@U) T@U)
(declare-fun $generated@@34 () Int)
(declare-fun $generated@@35 (Real) Bool)
(declare-fun $generated@@36 (Real) Bool)
(declare-fun $generated@@38 (Int) Bool)
(declare-fun $generated@@39 (Int) Bool)
(declare-fun $generated@@40 (Int Int) Int)
(declare-fun $generated@@46 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 () T@T)
(declare-fun $generated@@49 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@50 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@51 () T@T)
(declare-fun $generated@@52 (T@T T@T) T@T)
(declare-fun $generated@@53 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@54 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@55 (T@T) T@T)
(declare-fun $generated@@56 (T@T) T@T)
(declare-fun $generated@@111 (T@T T@U T@U T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@4 $generated@@5) 0) (= ($generated@@4 $generated@@6) 1)) (= ($generated@@4 $generated@@7) 2)) (forall (($generated@@14 Bool) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Int) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Real) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3)
)
(assert (= ($generated@@20 $generated) $generated@@1))
(assert (= ($generated@@20 $generated@@0) $generated@@2))
(assert (forall (($generated@@22 Real) ) (! (= ($generated@@21 $generated@@22) (to_int $generated@@22))
 :pattern ( ($generated@@21 $generated@@22))
)))
(assert (forall (($generated@@24 Int) ) (! (= ($generated@@23 $generated@@24) $generated@@24)
 :pattern ( ($generated@@23 $generated@@24))
)))
(assert (forall (($generated@@26 Real) ) (! (= ($generated@@25 $generated@@26) $generated@@26)
 :pattern ( ($generated@@25 $generated@@26))
)))
(assert (forall (($generated@@28 T@U) ($generated@@29 T@T) ) (! (= ($generated@@27 $generated@@29 $generated@@28) $generated@@28)
 :pattern ( ($generated@@27 $generated@@29 $generated@@28))
)))
(assert (forall (($generated@@32 T@U) ($generated@@33 T@T) ) (! (= ($generated@@31 $generated@@33 ($generated@@30 $generated@@33 $generated@@32)) $generated@@32)
 :pattern ( ($generated@@30 $generated@@33 $generated@@32))
)))
(assert  (=> (<= 0 $generated@@34) (forall (($generated@@37 Real) ) (!  (=> (or ($generated@@36 $generated@@37) (< 0 $generated@@34)) (= ($generated@@35 $generated@@37) (<= ($generated@@25 0.0) $generated@@37)))
 :pattern ( ($generated@@35 $generated@@37))
))))
(assert  (=> (<= 0 $generated@@34) (forall (($generated@@41 Int) ) (!  (=> (or ($generated@@39 $generated@@41) (< 0 $generated@@34)) (= ($generated@@38 $generated@@41) (= ($generated@@40 $generated@@41 ($generated@@23 2)) ($generated@@23 0))))
 :pattern ( ($generated@@38 $generated@@41))
))))
(assert  (=> (<= 0 $generated@@34) (forall (($generated@@42 Real) ) (!  (=> (or ($generated@@36 ($generated@@25 $generated@@42)) (< 0 $generated@@34)) (= ($generated@@35 ($generated@@25 $generated@@42)) (<= ($generated@@25 0.0) ($generated@@25 $generated@@42))))
 :weight 3
 :pattern ( ($generated@@35 ($generated@@25 $generated@@42)))
))))
(assert  (=> (<= 0 $generated@@34) (forall (($generated@@43 Int) ) (!  (=> (or ($generated@@39 ($generated@@23 $generated@@43)) (< 0 $generated@@34)) (= ($generated@@38 ($generated@@23 $generated@@43)) (= ($generated@@23 ($generated@@40 $generated@@43 ($generated@@23 2))) ($generated@@23 0))))
 :weight 3
 :pattern ( ($generated@@38 ($generated@@23 $generated@@43)))
))))
(assert (forall (($generated@@44 T@U) ($generated@@45 T@T) ) (! (= ($generated@@30 $generated@@45 ($generated@@31 $generated@@45 $generated@@44)) $generated@@44)
 :pattern ( ($generated@@31 $generated@@45 $generated@@44))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@57 T@T) ($generated@@58 T@T) ($generated@@59 T@T) ($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@U) ) (! (= ($generated@@46 $generated@@57 $generated@@58 $generated@@59 ($generated@@53 $generated@@57 $generated@@58 $generated@@59 $generated@@61 $generated@@62 $generated@@63 $generated@@60) $generated@@62 $generated@@63) $generated@@60)
 :weight 0
)) (and (forall (($generated@@64 T@T) ($generated@@65 T@T) ($generated@@66 T@T) ($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (!  (or (= $generated@@69 $generated@@71) (= ($generated@@46 $generated@@64 $generated@@65 $generated@@66 ($generated@@53 $generated@@64 $generated@@65 $generated@@66 $generated@@68 $generated@@69 $generated@@70 $generated@@67) $generated@@71 $generated@@72) ($generated@@46 $generated@@64 $generated@@65 $generated@@66 $generated@@68 $generated@@71 $generated@@72)))
 :weight 0
)) (forall (($generated@@73 T@T) ($generated@@74 T@T) ($generated@@75 T@T) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ) (!  (or (= $generated@@79 $generated@@81) (= ($generated@@46 $generated@@73 $generated@@74 $generated@@75 ($generated@@53 $generated@@73 $generated@@74 $generated@@75 $generated@@77 $generated@@78 $generated@@79 $generated@@76) $generated@@80 $generated@@81) ($generated@@46 $generated@@73 $generated@@74 $generated@@75 $generated@@77 $generated@@80 $generated@@81)))
 :weight 0
)))) (= ($generated@@4 $generated@@47) 3)) (= ($generated@@4 $generated@@48) 4)) (forall (($generated@@82 T@T) ($generated@@83 T@T) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (! (= ($generated@@50 $generated@@82 $generated@@83 ($generated@@54 $generated@@82 $generated@@83 $generated@@85 $generated@@86 $generated@@84) $generated@@86) $generated@@84)
 :weight 0
))) (forall (($generated@@87 T@T) ($generated@@88 T@T) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ) (!  (or (= $generated@@91 $generated@@92) (= ($generated@@50 $generated@@87 $generated@@88 ($generated@@54 $generated@@87 $generated@@88 $generated@@90 $generated@@91 $generated@@89) $generated@@92) ($generated@@50 $generated@@87 $generated@@88 $generated@@90 $generated@@92)))
 :weight 0
))) (= ($generated@@4 $generated@@51) 5)) (forall (($generated@@93 T@T) ($generated@@94 T@T) ) (= ($generated@@4 ($generated@@52 $generated@@93 $generated@@94)) 6))) (forall (($generated@@95 T@T) ($generated@@96 T@T) ) (! (= ($generated@@55 ($generated@@52 $generated@@95 $generated@@96)) $generated@@95)
 :pattern ( ($generated@@52 $generated@@95 $generated@@96))
))) (forall (($generated@@97 T@T) ($generated@@98 T@T) ) (! (= ($generated@@56 ($generated@@52 $generated@@97 $generated@@98)) $generated@@98)
 :pattern ( ($generated@@52 $generated@@97 $generated@@98))
))))
(assert (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 Bool) ($generated@@103 T@U) ($generated@@104 T@U) ) (! (= ($generated@@9 ($generated@@46 $generated@@47 $generated@@48 $generated@@5 ($generated@@49 $generated@@99 $generated@@100 $generated@@101 $generated@@102) $generated@@103 $generated@@104))  (=> (and (or (not (= $generated@@103 $generated@@99)) (not true)) ($generated@@9 ($generated@@30 $generated@@5 ($generated@@50 $generated@@48 $generated@@51 ($generated@@50 $generated@@47 ($generated@@52 $generated@@48 $generated@@51) $generated@@100 $generated@@103) $generated@@101)))) $generated@@102))
 :pattern ( ($generated@@46 $generated@@47 $generated@@48 $generated@@5 ($generated@@49 $generated@@99 $generated@@100 $generated@@101 $generated@@102) $generated@@103 $generated@@104))
)))
(assert (forall (($generated@@105 Int) ($generated@@106 Int) ) (! (= ($generated@@40 $generated@@105 $generated@@106) (mod $generated@@105 $generated@@106))
 :pattern ( ($generated@@40 $generated@@105 $generated@@106))
)))
(assert (forall (($generated@@107 Int) ) (! (= ($generated@@31 $generated@@6 ($generated@@10 ($generated@@23 $generated@@107))) ($generated@@27 $generated@@51 ($generated@@31 $generated@@6 ($generated@@10 $generated@@107))))
 :pattern ( ($generated@@31 $generated@@6 ($generated@@10 ($generated@@23 $generated@@107))))
)))
(assert (forall (($generated@@108 Real) ) (! (= ($generated@@31 $generated@@7 ($generated@@12 ($generated@@25 $generated@@108))) ($generated@@27 $generated@@51 ($generated@@31 $generated@@7 ($generated@@12 $generated@@108))))
 :pattern ( ($generated@@31 $generated@@7 ($generated@@12 ($generated@@25 $generated@@108))))
)))
(assert (forall (($generated@@109 T@U) ($generated@@110 T@T) ) (! (= ($generated@@31 $generated@@110 ($generated@@27 $generated@@110 $generated@@109)) ($generated@@27 $generated@@51 ($generated@@31 $generated@@110 $generated@@109)))
 :pattern ( ($generated@@31 $generated@@110 ($generated@@27 $generated@@110 $generated@@109)))
)))
(assert (forall (($generated@@112 T@U) ($generated@@113 T@U) ) (! ($generated@@111 $generated@@6 $generated@@113 $generated $generated@@112)
 :pattern ( ($generated@@111 $generated@@6 $generated@@113 $generated $generated@@112))
)))
(assert (forall (($generated@@114 T@U) ($generated@@115 T@U) ) (! ($generated@@111 $generated@@7 $generated@@115 $generated@@0 $generated@@114)
 :pattern ( ($generated@@111 $generated@@7 $generated@@115 $generated@@0 $generated@@114))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@116 () Int)
(declare-fun $generated@@117 () T@U)
(declare-fun $generated@@118 () Int)
(declare-fun $generated@@119 () Int)
(declare-fun $generated@@120 () Real)
(declare-fun $generated@@121 () Int)
(declare-fun $generated@@122 () Int)
(declare-fun $generated@@123 () Real)
(declare-fun $generated@@124 () Int)
(declare-fun $generated@@125 () Real)
(declare-fun $generated@@126 () Int)
(declare-fun $generated@@127 () Real)
(declare-fun $generated@@128 () Int)
(declare-fun $generated@@129 () Real)
(declare-fun $generated@@130 () Int)
(declare-fun $generated@@131 () Real)
(declare-fun $generated@@132 () Int)
(declare-fun $generated@@133 () Real)
(declare-fun $generated@@134 () Int)
(declare-fun $generated@@135 () Int)
(declare-fun $generated@@136 () Real)
(declare-fun $generated@@137 () Int)
(declare-fun $generated@@138 () Int)
(declare-fun $generated@@139 () Int)
(declare-fun $generated@@140 () Int)
(declare-fun $generated@@141 () Int)
(declare-fun $generated@@142 () Int)
(declare-fun $generated@@143 () Int)
(declare-fun $generated@@144 () T@U)
(declare-fun $generated@@145 () T@U)
(declare-fun $generated@@146 (T@U) Bool)
(declare-fun $generated@@147 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 32) (let (($generated@@148  (=> ($generated@@111 $generated@@6 ($generated@@10 $generated@@116) $generated $generated@@117) (=> (and ($generated@@39 $generated@@116) ($generated@@39 $generated@@116)) (and (=> (= (ControlFlow 0 10) (- 0 11)) (=> ($generated@@39 $generated@@116) (or ($generated@@38 $generated@@116) (= ($generated@@40 $generated@@116 ($generated@@23 2)) ($generated@@23 0))))) (=> ($generated@@38 $generated@@116) (=> (and ($generated@@111 $generated@@6 ($generated@@10 $generated@@118) $generated $generated@@117) ($generated@@39 $generated@@118)) (=> (and (and ($generated@@39 $generated@@118) (= (ControlFlow 0 10) (- 0 9))) ($generated@@39 $generated@@118)) (or ($generated@@38 $generated@@118) (= ($generated@@40 $generated@@118 ($generated@@23 2)) ($generated@@23 0)))))))))))
(let (($generated@@149  (=> (forall (($generated@@150 Int) ($generated@@151 Real) )  (and ($generated@@39 $generated@@150) (=> ($generated@@38 $generated@@150) ($generated@@36 $generated@@151)))) (=> (and (and (and ($generated@@38 $generated@@119) ($generated@@35 $generated@@120)) (= $generated@@116 $generated@@119)) (and (= $generated@@118 $generated@@121) (= (ControlFlow 0 27) 10))) $generated@@148))))
(let (($generated@@152  (=> (and (not ($generated@@38 $generated@@122)) (= (ControlFlow 0 29) 27)) $generated@@149)))
(let (($generated@@153  (=> (and (and ($generated@@38 $generated@@122) ($generated@@111 $generated@@7 ($generated@@12 $generated@@123) $generated@@0 $generated@@117)) (and ($generated@@36 $generated@@123) (= (ControlFlow 0 28) 27))) $generated@@149)))
(let (($generated@@154  (=> (and ($generated@@111 $generated@@6 ($generated@@10 $generated@@122) $generated $generated@@117) ($generated@@39 $generated@@122)) (and (=> (= (ControlFlow 0 30) 28) $generated@@153) (=> (= (ControlFlow 0 30) 29) $generated@@152)))))
(let (($generated@@155  (=> (forall (($generated@@156 Int) ($generated@@157 Real) )  (and ($generated@@39 $generated@@156) (=> ($generated@@38 $generated@@156) ($generated@@36 $generated@@157)))) (=> (and (and (and ($generated@@38 $generated@@124) ($generated@@35 $generated@@125)) (= $generated@@116 $generated@@124)) (and (= $generated@@118 $generated@@121) (= (ControlFlow 0 23) 10))) $generated@@148))))
(let (($generated@@158  (=> (and (not ($generated@@38 $generated@@126)) (= (ControlFlow 0 25) 23)) $generated@@155)))
(let (($generated@@159  (=> (and (and ($generated@@38 $generated@@126) ($generated@@111 $generated@@7 ($generated@@12 $generated@@127) $generated@@0 $generated@@117)) (and ($generated@@36 $generated@@127) (= (ControlFlow 0 24) 23))) $generated@@155)))
(let (($generated@@160  (=> (and ($generated@@111 $generated@@6 ($generated@@10 $generated@@126) $generated $generated@@117) ($generated@@39 $generated@@126)) (and (=> (= (ControlFlow 0 26) 24) $generated@@159) (=> (= (ControlFlow 0 26) 25) $generated@@158)))))
(let (($generated@@161  (=> (forall (($generated@@162 Int) ($generated@@163 Real) )  (and ($generated@@39 $generated@@162) (=> ($generated@@38 $generated@@162) ($generated@@36 $generated@@163)))) (=> (and (and (and ($generated@@38 $generated@@128) ($generated@@35 $generated@@129)) (= $generated@@116 $generated@@128)) (and (= $generated@@118 $generated@@121) (= (ControlFlow 0 19) 10))) $generated@@148))))
(let (($generated@@164  (=> (and (not ($generated@@38 $generated@@130)) (= (ControlFlow 0 21) 19)) $generated@@161)))
(let (($generated@@165  (=> (and (and ($generated@@38 $generated@@130) ($generated@@111 $generated@@7 ($generated@@12 $generated@@131) $generated@@0 $generated@@117)) (and ($generated@@36 $generated@@131) (= (ControlFlow 0 20) 19))) $generated@@161)))
(let (($generated@@166  (=> (and ($generated@@111 $generated@@6 ($generated@@10 $generated@@130) $generated $generated@@117) ($generated@@39 $generated@@130)) (and (=> (= (ControlFlow 0 22) 20) $generated@@165) (=> (= (ControlFlow 0 22) 21) $generated@@164)))))
(let (($generated@@167  (=> (forall (($generated@@168 Int) ($generated@@169 Real) )  (and ($generated@@39 $generated@@168) (=> ($generated@@38 $generated@@168) ($generated@@36 $generated@@169)))) (=> (and ($generated@@38 $generated@@132) ($generated@@35 $generated@@133)) (=> (and (and (= $generated@@134 ($generated@@21 $generated@@133)) (= $generated@@116 $generated@@132)) (and (= $generated@@118 $generated@@134) (= (ControlFlow 0 15) 10))) $generated@@148)))))
(let (($generated@@170  (=> (and (not ($generated@@38 $generated@@135)) (= (ControlFlow 0 17) 15)) $generated@@167)))
(let (($generated@@171  (=> (and (and ($generated@@38 $generated@@135) ($generated@@111 $generated@@7 ($generated@@12 $generated@@136) $generated@@0 $generated@@117)) (and ($generated@@36 $generated@@136) (= (ControlFlow 0 16) 15))) $generated@@167)))
(let (($generated@@172  (=> (and ($generated@@111 $generated@@6 ($generated@@10 $generated@@135) $generated $generated@@117) ($generated@@39 $generated@@135)) (and (=> (= (ControlFlow 0 18) 16) $generated@@171) (=> (= (ControlFlow 0 18) 17) $generated@@170)))))
(let (($generated@@173  (=> ($generated@@111 $generated@@6 ($generated@@10 $generated@@137) $generated $generated@@117) (=> (and ($generated@@39 $generated@@137) (forall (($generated@@174 Int) ) ($generated@@39 $generated@@174))) (=> (and (and ($generated@@38 $generated@@138) (= $generated@@116 $generated@@138)) (and (= $generated@@118 $generated@@121) (= (ControlFlow 0 14) 10))) $generated@@148)))))
(let (($generated@@175  (=> ($generated@@111 $generated@@6 ($generated@@10 $generated@@139) $generated $generated@@117) (=> (and ($generated@@39 $generated@@139) (forall (($generated@@176 Int) ) ($generated@@39 $generated@@176))) (=> (and (and ($generated@@38 $generated@@140) (= $generated@@116 $generated@@140)) (and (= $generated@@118 $generated@@121) (= (ControlFlow 0 13) 10))) $generated@@148)))))
(let (($generated@@177  (=> (and (and (< $generated@@141 $generated@@142) (= $generated@@116 $generated@@143)) (and (= $generated@@118 $generated@@121) (= (ControlFlow 0 12) 10))) $generated@@148)))
(let (($generated@@178 true))
(let (($generated@@179 true))
(let (($generated@@180 true))
(let (($generated@@181 true))
(let (($generated@@182 true))
(let (($generated@@183 true))
(let (($generated@@184  (=> (and (forall (($generated@@185 Int) ) ($generated@@39 $generated@@185)) (forall (($generated@@186 Int) ) ($generated@@39 $generated@@186))) (=> (and (and (forall (($generated@@187 Int) ($generated@@188 Real) )  (and ($generated@@39 $generated@@187) (=> ($generated@@38 $generated@@187) ($generated@@36 $generated@@188)))) (forall (($generated@@189 Int) ($generated@@190 Real) )  (and ($generated@@39 $generated@@189) (=> ($generated@@38 $generated@@189) ($generated@@36 $generated@@190))))) (and (forall (($generated@@191 Int) ($generated@@192 Real) )  (and ($generated@@39 $generated@@191) (=> ($generated@@38 $generated@@191) ($generated@@36 $generated@@192)))) (forall (($generated@@193 Int) ($generated@@194 Real) )  (and ($generated@@39 $generated@@193) (=> ($generated@@38 $generated@@193) ($generated@@36 $generated@@194)))))) (=> (and (and (and (and (and (and (and (not (exists (($generated@@195 Int) ) ($generated@@38 $generated@@195))) (not (exists (($generated@@196 Int) ) ($generated@@38 $generated@@196)))) (not (exists (($generated@@197 Int) ($generated@@198 Real) )  (and ($generated@@38 $generated@@197) ($generated@@35 $generated@@198))))) (not (exists (($generated@@199 Int) ($generated@@200 Real) )  (and ($generated@@38 $generated@@199) ($generated@@35 $generated@@200))))) (<= $generated@@142 $generated@@141)) (not (exists (($generated@@201 Int) ($generated@@202 Real) )  (and ($generated@@38 $generated@@201) ($generated@@35 $generated@@202))))) (not (exists (($generated@@203 Int) ($generated@@204 Real) )  (and ($generated@@38 $generated@@203) ($generated@@35 $generated@@204))))) (= (ControlFlow 0 2) (- 0 1))) false)))))
(let (($generated@@205  (=> (= $generated@@144 ($generated@@49 $generated@@145 $generated@@117 $generated@@3 false)) (=> (and (= $generated@@143 ($generated@@23 4)) (= $generated@@121 ($generated@@23 8))) (and (and (and (and (and (and (and (and (and (and (and (and (and (=> (= (ControlFlow 0 31) 12) $generated@@177) (=> (= (ControlFlow 0 31) 2) $generated@@184)) (=> (= (ControlFlow 0 31) 30) $generated@@154)) (=> (= (ControlFlow 0 31) 3) $generated@@183)) (=> (= (ControlFlow 0 31) 26) $generated@@160)) (=> (= (ControlFlow 0 31) 4) $generated@@182)) (=> (= (ControlFlow 0 31) 22) $generated@@166)) (=> (= (ControlFlow 0 31) 5) $generated@@181)) (=> (= (ControlFlow 0 31) 18) $generated@@172)) (=> (= (ControlFlow 0 31) 6) $generated@@180)) (=> (= (ControlFlow 0 31) 13) $generated@@175)) (=> (= (ControlFlow 0 31) 7) $generated@@179)) (=> (= (ControlFlow 0 31) 14) $generated@@173)) (=> (= (ControlFlow 0 31) 8) $generated@@178))))))
(let (($generated@@206  (=> (and (and (and ($generated@@146 $generated@@117) ($generated@@147 $generated@@117)) (= 1 $generated@@34)) (and (< $generated@@141 $generated@@142) (= (ControlFlow 0 32) 31))) $generated@@205)))
$generated@@206))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 10) (- 9))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
