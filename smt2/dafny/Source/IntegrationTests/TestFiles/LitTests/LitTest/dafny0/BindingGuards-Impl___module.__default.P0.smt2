(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TReal () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagReal () T@U)
(declare-fun alloc () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun q@Int (Real) Int)
(declare-fun LitInt (Int) Int)
(declare-fun LitReal (Real) Real)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.R (Real) Bool)
(declare-fun |_module.__default.R#canCall| (Real) Bool)
(declare-fun _module.__default.P (Int) Bool)
(declare-fun |_module.__default.P#canCall| (Int) Bool)
(declare-fun Mod (Int Int) Int)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TReal TagInt TagReal alloc)
)
(assert (= (Tag TInt) TagInt))
(assert (= (Tag TReal) TagReal))
(assert (forall ((x@@2 Real) ) (! (= (q@Int x@@2) (to_int x@@2))
 :pattern ( (q@Int x@@2))
)))
(assert (forall ((x@@3 Int) ) (! (= (LitInt x@@3) x@@3)
 :pattern ( (LitInt x@@3))
)))
(assert (forall ((x@@4 Real) ) (! (= (LitReal x@@4) x@@4)
 :pattern ( (LitReal x@@4))
)))
(assert (forall ((x@@5 T@U) (T T@T) ) (! (= (Lit T x@@5) x@@5)
 :pattern ( (Lit T x@@5))
)))
(assert (forall ((x@@6 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@6)) x@@6)
 :pattern ( ($Unbox T@@0 x@@6))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|r#0| Real) ) (!  (=> (or (|_module.__default.R#canCall| |r#0|) (< 0 $FunctionContextHeight)) (= (_module.__default.R |r#0|) (<= (LitReal 0.0) |r#0|)))
 :pattern ( (_module.__default.R |r#0|))
))))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|n#0| Int) ) (!  (=> (or (|_module.__default.P#canCall| |n#0|) (< 0 $FunctionContextHeight)) (= (_module.__default.P |n#0|) (= (Mod |n#0| (LitInt 2)) (LitInt 0))))
 :pattern ( (_module.__default.P |n#0|))
))))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|r#0@@0| Real) ) (!  (=> (or (|_module.__default.R#canCall| (LitReal |r#0@@0|)) (< 0 $FunctionContextHeight)) (= (_module.__default.R (LitReal |r#0@@0|)) (<= (LitReal 0.0) (LitReal |r#0@@0|))))
 :weight 3
 :pattern ( (_module.__default.R (LitReal |r#0@@0|)))
))))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|n#0@@0| Int) ) (!  (=> (or (|_module.__default.P#canCall| (LitInt |n#0@@0|)) (< 0 $FunctionContextHeight)) (= (_module.__default.P (LitInt |n#0@@0|)) (= (LitInt (Mod |n#0@@0| (LitInt 2))) (LitInt 0))))
 :weight 3
 :pattern ( (_module.__default.P (LitInt |n#0@@0|)))
))))
(assert (forall ((x@@7 T@U) (T@@1 T@T) ) (! (= ($Unbox T@@1 ($Box T@@1 x@@7)) x@@7)
 :pattern ( ($Box T@@1 x@@7))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0 t1 t2 (MapType0Store t0 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 3)) (= (Ctor FieldType) 4)) (forall ((t0@@0 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 (MapType1Store t0@@0 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :weight 0
))) (= (Ctor BoxType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 6))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((x@@8 Int) (y Int) ) (! (= (Mod x@@8 y) (mod x@@8 y))
 :pattern ( (Mod x@@8 y))
)))
(assert (forall ((x@@9 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@9))) (Lit BoxType ($Box intType (int_2_U x@@9))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@9))))
)))
(assert (forall ((x@@10 Real) ) (! (= ($Box realType (real_2_U (LitReal x@@10))) (Lit BoxType ($Box realType (real_2_U x@@10))))
 :pattern ( ($Box realType (real_2_U (LitReal x@@10))))
)))
(assert (forall ((x@@11 T@U) (T@@2 T@T) ) (! (= ($Box T@@2 (Lit T@@2 x@@11)) (Lit BoxType ($Box T@@2 x@@11)))
 :pattern ( ($Box T@@2 (Lit T@@2 x@@11)))
)))
(assert (forall ((h T@U) (v T@U) ) (! ($IsAlloc intType v TInt h)
 :pattern ( ($IsAlloc intType v TInt h))
)))
(assert (forall ((h@@0 T@U) (v@@0 T@U) ) (! ($IsAlloc realType v@@0 TReal h@@0)
 :pattern ( ($IsAlloc realType v@@0 TReal h@@0))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |even#0@0| () Int)
(declare-fun $Heap () T@U)
(declare-fun |alsoEven#0@0| () Int)
(declare-fun |x#0_0@0| () Int)
(declare-fun |y#0_0@0| () Real)
(declare-fun |$rhs#1@0| () Int)
(declare-fun |eg$x#0_0@0| () Int)
(declare-fun |eg$y#0_0@0| () Real)
(declare-fun |x#1_0@0| () Int)
(declare-fun |y#1_0@0| () Real)
(declare-fun |eg$x#1_0@0| () Int)
(declare-fun |eg$y#1_0@0| () Real)
(declare-fun |x#3_0@0| () Int)
(declare-fun |y#3_0@0| () Real)
(declare-fun |eg$x#3_0@0| () Int)
(declare-fun |eg$y#3_0@0| () Real)
(declare-fun |x#4_0@0| () Int)
(declare-fun |y#4_0@0| () Real)
(declare-fun |$rhs#4_1@0| () Int)
(declare-fun |eg$x#4_0@0| () Int)
(declare-fun |eg$y#4_0@0| () Real)
(declare-fun |eg$x#6_0@0| () Int)
(declare-fun |x#6_0@0| () Int)
(declare-fun |eg$x#5_0@0| () Int)
(declare-fun |x#5_0@0| () Int)
(declare-fun |m#0| () Int)
(declare-fun |n#0@@1| () Int)
(declare-fun |$rhs#0@0| () Int)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsHeapAnchor (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 32) (let ((anon25_correct  (=> ($IsAlloc intType (int_2_U |even#0@0|) TInt $Heap) (=> (and (|_module.__default.P#canCall| |even#0@0|) (|_module.__default.P#canCall| |even#0@0|)) (and (=> (= (ControlFlow 0 10) (- 0 11)) (=> (|_module.__default.P#canCall| |even#0@0|) (or (_module.__default.P |even#0@0|) (= (Mod |even#0@0| (LitInt 2)) (LitInt 0))))) (=> (_module.__default.P |even#0@0|) (=> (and ($IsAlloc intType (int_2_U |alsoEven#0@0|) TInt $Heap) (|_module.__default.P#canCall| |alsoEven#0@0|)) (=> (and (and (|_module.__default.P#canCall| |alsoEven#0@0|) (= (ControlFlow 0 10) (- 0 9))) (|_module.__default.P#canCall| |alsoEven#0@0|)) (or (_module.__default.P |alsoEven#0@0|) (= (Mod |alsoEven#0@0| (LitInt 2)) (LitInt 0)))))))))))
(let ((anon23_correct  (=> (forall ((|eg$x#5| Int) (|eg$y#3| Real) )  (and (|_module.__default.P#canCall| |eg$x#5|) (=> (_module.__default.P |eg$x#5|) (|_module.__default.R#canCall| |eg$y#3|)))) (=> (and (and (and (_module.__default.P |x#0_0@0|) (_module.__default.R |y#0_0@0|)) (= |even#0@0| |x#0_0@0|)) (and (= |alsoEven#0@0| |$rhs#1@0|) (= (ControlFlow 0 27) 10))) anon25_correct))))
(let ((anon42_Else_correct  (=> (and (not (_module.__default.P |eg$x#0_0@0|)) (= (ControlFlow 0 29) 27)) anon23_correct)))
(let ((anon42_Then_correct  (=> (and (and (_module.__default.P |eg$x#0_0@0|) ($IsAlloc realType (real_2_U |eg$y#0_0@0|) TReal $Heap)) (and (|_module.__default.R#canCall| |eg$y#0_0@0|) (= (ControlFlow 0 28) 27))) anon23_correct)))
(let ((anon41_Then_correct  (=> (and ($IsAlloc intType (int_2_U |eg$x#0_0@0|) TInt $Heap) (|_module.__default.P#canCall| |eg$x#0_0@0|)) (and (=> (= (ControlFlow 0 30) 28) anon42_Then_correct) (=> (= (ControlFlow 0 30) 29) anon42_Else_correct)))))
(let ((anon19_correct  (=> (forall ((|eg$x#4| Int) (|eg$y#2| Real) )  (and (|_module.__default.P#canCall| |eg$x#4|) (=> (_module.__default.P |eg$x#4|) (|_module.__default.R#canCall| |eg$y#2|)))) (=> (and (and (and (_module.__default.P |x#1_0@0|) (_module.__default.R |y#1_0@0|)) (= |even#0@0| |x#1_0@0|)) (and (= |alsoEven#0@0| |$rhs#1@0|) (= (ControlFlow 0 23) 10))) anon25_correct))))
(let ((anon39_Else_correct  (=> (and (not (_module.__default.P |eg$x#1_0@0|)) (= (ControlFlow 0 25) 23)) anon19_correct)))
(let ((anon39_Then_correct  (=> (and (and (_module.__default.P |eg$x#1_0@0|) ($IsAlloc realType (real_2_U |eg$y#1_0@0|) TReal $Heap)) (and (|_module.__default.R#canCall| |eg$y#1_0@0|) (= (ControlFlow 0 24) 23))) anon19_correct)))
(let ((anon38_Then_correct  (=> (and ($IsAlloc intType (int_2_U |eg$x#1_0@0|) TInt $Heap) (|_module.__default.P#canCall| |eg$x#1_0@0|)) (and (=> (= (ControlFlow 0 26) 24) anon39_Then_correct) (=> (= (ControlFlow 0 26) 25) anon39_Else_correct)))))
(let ((anon14_correct  (=> (forall ((|eg$x#3| Int) (|eg$y#1| Real) )  (and (|_module.__default.P#canCall| |eg$x#3|) (=> (_module.__default.P |eg$x#3|) (|_module.__default.R#canCall| |eg$y#1|)))) (=> (and (and (and (_module.__default.P |x#3_0@0|) (_module.__default.R |y#3_0@0|)) (= |even#0@0| |x#3_0@0|)) (and (= |alsoEven#0@0| |$rhs#1@0|) (= (ControlFlow 0 19) 10))) anon25_correct))))
(let ((anon35_Else_correct  (=> (and (not (_module.__default.P |eg$x#3_0@0|)) (= (ControlFlow 0 21) 19)) anon14_correct)))
(let ((anon35_Then_correct  (=> (and (and (_module.__default.P |eg$x#3_0@0|) ($IsAlloc realType (real_2_U |eg$y#3_0@0|) TReal $Heap)) (and (|_module.__default.R#canCall| |eg$y#3_0@0|) (= (ControlFlow 0 20) 19))) anon14_correct)))
(let ((anon34_Then_correct  (=> (and ($IsAlloc intType (int_2_U |eg$x#3_0@0|) TInt $Heap) (|_module.__default.P#canCall| |eg$x#3_0@0|)) (and (=> (= (ControlFlow 0 22) 20) anon35_Then_correct) (=> (= (ControlFlow 0 22) 21) anon35_Else_correct)))))
(let ((anon10_correct  (=> (forall ((|eg$x#2| Int) (|eg$y#0| Real) )  (and (|_module.__default.P#canCall| |eg$x#2|) (=> (_module.__default.P |eg$x#2|) (|_module.__default.R#canCall| |eg$y#0|)))) (=> (and (_module.__default.P |x#4_0@0|) (_module.__default.R |y#4_0@0|)) (=> (and (and (= |$rhs#4_1@0| (q@Int |y#4_0@0|)) (= |even#0@0| |x#4_0@0|)) (and (= |alsoEven#0@0| |$rhs#4_1@0|) (= (ControlFlow 0 15) 10))) anon25_correct)))))
(let ((anon32_Else_correct  (=> (and (not (_module.__default.P |eg$x#4_0@0|)) (= (ControlFlow 0 17) 15)) anon10_correct)))
(let ((anon32_Then_correct  (=> (and (and (_module.__default.P |eg$x#4_0@0|) ($IsAlloc realType (real_2_U |eg$y#4_0@0|) TReal $Heap)) (and (|_module.__default.R#canCall| |eg$y#4_0@0|) (= (ControlFlow 0 16) 15))) anon10_correct)))
(let ((anon31_Then_correct  (=> (and ($IsAlloc intType (int_2_U |eg$x#4_0@0|) TInt $Heap) (|_module.__default.P#canCall| |eg$x#4_0@0|)) (and (=> (= (ControlFlow 0 18) 16) anon32_Then_correct) (=> (= (ControlFlow 0 18) 17) anon32_Else_correct)))))
(let ((anon27_Then_correct  (=> ($IsAlloc intType (int_2_U |eg$x#6_0@0|) TInt $Heap) (=> (and (|_module.__default.P#canCall| |eg$x#6_0@0|) (forall ((|eg$x#0| Int) ) (|_module.__default.P#canCall| |eg$x#0|))) (=> (and (and (_module.__default.P |x#6_0@0|) (= |even#0@0| |x#6_0@0|)) (and (= |alsoEven#0@0| |$rhs#1@0|) (= (ControlFlow 0 14) 10))) anon25_correct)))))
(let ((anon29_Then_correct  (=> ($IsAlloc intType (int_2_U |eg$x#5_0@0|) TInt $Heap) (=> (and (|_module.__default.P#canCall| |eg$x#5_0@0|) (forall ((|eg$x#1| Int) ) (|_module.__default.P#canCall| |eg$x#1|))) (=> (and (and (_module.__default.P |x#5_0@0|) (= |even#0@0| |x#5_0@0|)) (and (= |alsoEven#0@0| |$rhs#1@0|) (= (ControlFlow 0 13) 10))) anon25_correct)))))
(let ((anon36_Then_correct  (=> (and (and (< |m#0| |n#0@@1|) (= |even#0@0| |$rhs#0@0|)) (and (= |alsoEven#0@0| |$rhs#1@0|) (= (ControlFlow 0 12) 10))) anon25_correct)))
(let ((anon27_Else_correct true))
(let ((anon29_Else_correct true))
(let ((anon31_Else_correct true))
(let ((anon34_Else_correct true))
(let ((anon38_Else_correct true))
(let ((anon41_Else_correct true))
(let ((anon40_Else_correct  (=> (and (forall ((|eg$x#0@@0| Int) ) (|_module.__default.P#canCall| |eg$x#0@@0|)) (forall ((|eg$x#1@@0| Int) ) (|_module.__default.P#canCall| |eg$x#1@@0|))) (=> (and (and (forall ((|eg$x#2@@0| Int) (|eg$y#0@@0| Real) )  (and (|_module.__default.P#canCall| |eg$x#2@@0|) (=> (_module.__default.P |eg$x#2@@0|) (|_module.__default.R#canCall| |eg$y#0@@0|)))) (forall ((|eg$x#3@@0| Int) (|eg$y#1@@0| Real) )  (and (|_module.__default.P#canCall| |eg$x#3@@0|) (=> (_module.__default.P |eg$x#3@@0|) (|_module.__default.R#canCall| |eg$y#1@@0|))))) (and (forall ((|eg$x#4@@0| Int) (|eg$y#2@@0| Real) )  (and (|_module.__default.P#canCall| |eg$x#4@@0|) (=> (_module.__default.P |eg$x#4@@0|) (|_module.__default.R#canCall| |eg$y#2@@0|)))) (forall ((|eg$x#5@@0| Int) (|eg$y#3@@0| Real) )  (and (|_module.__default.P#canCall| |eg$x#5@@0|) (=> (_module.__default.P |eg$x#5@@0|) (|_module.__default.R#canCall| |eg$y#3@@0|)))))) (=> (and (and (and (and (and (and (and (not (exists ((|eg$x#0@@1| Int) ) (_module.__default.P |eg$x#0@@1|))) (not (exists ((|eg$x#1@@1| Int) ) (_module.__default.P |eg$x#1@@1|)))) (not (exists ((|eg$x#2@@1| Int) (|eg$y#0@@1| Real) )  (and (_module.__default.P |eg$x#2@@1|) (_module.__default.R |eg$y#0@@1|))))) (not (exists ((|eg$x#3@@1| Int) (|eg$y#1@@1| Real) )  (and (_module.__default.P |eg$x#3@@1|) (_module.__default.R |eg$y#1@@1|))))) (<= |n#0@@1| |m#0|)) (not (exists ((|eg$x#4@@1| Int) (|eg$y#2@@1| Real) )  (and (_module.__default.P |eg$x#4@@1|) (_module.__default.R |eg$y#2@@1|))))) (not (exists ((|eg$x#5@@1| Int) (|eg$y#3@@1| Real) )  (and (_module.__default.P |eg$x#5@@1|) (_module.__default.R |eg$y#3@@1|))))) (= (ControlFlow 0 2) (- 0 1))) false)))))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (=> (and (= |$rhs#0@0| (LitInt 4)) (= |$rhs#1@0| (LitInt 8))) (and (and (and (and (and (and (and (and (and (and (and (and (and (=> (= (ControlFlow 0 31) 12) anon36_Then_correct) (=> (= (ControlFlow 0 31) 2) anon40_Else_correct)) (=> (= (ControlFlow 0 31) 30) anon41_Then_correct)) (=> (= (ControlFlow 0 31) 3) anon41_Else_correct)) (=> (= (ControlFlow 0 31) 26) anon38_Then_correct)) (=> (= (ControlFlow 0 31) 4) anon38_Else_correct)) (=> (= (ControlFlow 0 31) 22) anon34_Then_correct)) (=> (= (ControlFlow 0 31) 5) anon34_Else_correct)) (=> (= (ControlFlow 0 31) 18) anon31_Then_correct)) (=> (= (ControlFlow 0 31) 6) anon31_Else_correct)) (=> (= (ControlFlow 0 31) 13) anon29_Then_correct)) (=> (= (ControlFlow 0 31) 7) anon29_Else_correct)) (=> (= (ControlFlow 0 31) 14) anon27_Then_correct)) (=> (= (ControlFlow 0 31) 8) anon27_Else_correct))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (= 1 $FunctionContextHeight)) (and (< |m#0| |n#0@@1|) (= (ControlFlow 0 32) 31))) anon0_correct)))
PreconditionGeneratedEntry_correct))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 10) (- 9))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
