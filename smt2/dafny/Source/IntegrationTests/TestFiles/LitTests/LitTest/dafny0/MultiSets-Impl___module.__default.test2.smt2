(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 (T@T) Int)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Bool) T@U)
(declare-fun $generated@@9 (T@U) Bool)
(declare-fun $generated@@10 (Int) T@U)
(declare-fun $generated@@11 (T@U) Int)
(declare-fun $generated@@12 (Real) T@U)
(declare-fun $generated@@13 (T@U) Real)
(declare-fun $generated@@20 (T@U) T@U)
(declare-fun $generated@@21 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@22 () T@T)
(declare-fun $generated@@23 (T@U Int T@U) T@U)
(declare-fun $generated@@24 (T@U T@U) Int)
(declare-fun $generated@@25 (T@T T@U) T@U)
(declare-fun $generated@@26 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@43 (T@T T@U T@U) Bool)
(declare-fun $generated@@44 () T@T)
(declare-fun $generated@@45 (T@U) T@U)
(declare-fun $generated@@46 (T@U) Bool)
(declare-fun $generated@@49 (T@T T@U) T@U)
(declare-fun $generated@@52 (T@U T@U) Bool)
(declare-fun $generated@@53 (T@U) T@U)
(declare-fun $generated@@56 () T@T)
(declare-fun $generated@@57 (T@U) T@U)
(declare-fun $generated@@58 (T@U T@U) Bool)
(declare-fun $generated@@62 (T@U T@U) Bool)
(declare-fun $generated@@66 (T@U T@U T@U) Bool)
(declare-fun $generated@@67 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@79 (T@U) Int)
(declare-fun $generated@@87 () T@U)
(declare-fun $generated@@89 (T@U) T@U)
(declare-fun $generated@@92 (T@U) T@U)
(declare-fun $generated@@99 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@100 () T@T)
(declare-fun $generated@@101 () T@T)
(declare-fun $generated@@102 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@103 (T@T T@T) T@T)
(declare-fun $generated@@104 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@105 (T@T) T@T)
(declare-fun $generated@@106 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@4 $generated@@5) 0) (= ($generated@@4 $generated@@6) 1)) (= ($generated@@4 $generated@@7) 2)) (forall (($generated@@14 Bool) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Int) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Real) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3)
)
(assert (= ($generated@@20 $generated) $generated@@0))
(assert  (and (and (forall (($generated@@27 T@T) ($generated@@28 T@T) ($generated@@29 T@U) ($generated@@30 T@U) ($generated@@31 T@U) ) (! (= ($generated@@21 $generated@@27 $generated@@28 ($generated@@26 $generated@@27 $generated@@28 $generated@@30 $generated@@31 $generated@@29) $generated@@31) $generated@@29)
 :weight 0
)) (forall (($generated@@32 T@T) ($generated@@33 T@T) ($generated@@34 T@U) ($generated@@35 T@U) ($generated@@36 T@U) ($generated@@37 T@U) ) (!  (or (= $generated@@36 $generated@@37) (= ($generated@@21 $generated@@32 $generated@@33 ($generated@@26 $generated@@32 $generated@@33 $generated@@35 $generated@@36 $generated@@34) $generated@@37) ($generated@@21 $generated@@32 $generated@@33 $generated@@35 $generated@@37)))
 :weight 0
))) (= ($generated@@4 $generated@@22) 3)))
(assert (forall (($generated@@38 T@U) ($generated@@39 Int) ($generated@@40 T@U) ($generated@@41 T@U) ) (! (= ($generated@@9 ($generated@@21 $generated@@22 $generated@@5 ($generated@@23 $generated@@38 $generated@@39 $generated@@40) $generated@@41)) (exists (($generated@@42 Int) ) (!  (and (> ($generated@@24 $generated@@38 ($generated@@25 $generated@@6 ($generated@@10 $generated@@42))) $generated@@39) (= $generated@@41 ($generated@@25 $generated@@6 ($generated@@10 $generated@@42))))
 :pattern ( ($generated@@24 $generated@@40 ($generated@@25 $generated@@6 ($generated@@10 $generated@@42))))
)))
 :pattern ( ($generated@@21 $generated@@22 $generated@@5 ($generated@@23 $generated@@38 $generated@@39 $generated@@40) $generated@@41))
)))
(assert (= ($generated@@4 $generated@@44) 4))
(assert (forall (($generated@@47 T@U) ($generated@@48 T@U) ) (!  (=> ($generated@@43 $generated@@44 $generated@@47 ($generated@@45 $generated@@48)) ($generated@@46 $generated@@47))
 :pattern ( ($generated@@43 $generated@@44 $generated@@47 ($generated@@45 $generated@@48)))
)))
(assert (forall (($generated@@50 T@U) ($generated@@51 T@T) ) (! (= ($generated@@25 $generated@@51 ($generated@@49 $generated@@51 $generated@@50)) $generated@@50)
 :pattern ( ($generated@@49 $generated@@51 $generated@@50))
)))
(assert (forall (($generated@@54 T@U) ($generated@@55 T@U) ) (! (= ($generated@@52 ($generated@@53 $generated@@54) $generated@@55) ($generated@@9 ($generated@@21 $generated@@22 $generated@@5 $generated@@54 $generated@@55)))
 :pattern ( ($generated@@52 ($generated@@53 $generated@@54) $generated@@55))
)))
(assert (= ($generated@@4 $generated@@56) 5))
(assert (forall (($generated@@59 T@U) ($generated@@60 T@U) ) (! (= ($generated@@43 $generated@@56 $generated@@59 ($generated@@57 $generated@@60)) (forall (($generated@@61 T@U) ) (!  (=> ($generated@@52 $generated@@59 $generated@@61) ($generated@@58 $generated@@61 $generated@@60))
 :pattern ( ($generated@@52 $generated@@59 $generated@@61))
)))
 :pattern ( ($generated@@43 $generated@@56 $generated@@59 ($generated@@57 $generated@@60)))
)))
(assert (forall (($generated@@63 T@U) ($generated@@64 T@U) ) (! (= ($generated@@62 $generated@@63 $generated@@64) (forall (($generated@@65 T@U) ) (!  (or (= ($generated@@24 $generated@@63 $generated@@65) 0) (= ($generated@@24 $generated@@64 $generated@@65) 0))
 :pattern ( ($generated@@24 $generated@@63 $generated@@65))
 :pattern ( ($generated@@24 $generated@@64 $generated@@65))
)))
 :pattern ( ($generated@@62 $generated@@63 $generated@@64))
)))
(assert (forall (($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@T) ) (! (= ($generated@@66 ($generated@@25 $generated@@71 $generated@@68) $generated@@69 $generated@@70) ($generated@@67 $generated@@71 $generated@@68 $generated@@69 $generated@@70))
 :pattern ( ($generated@@66 ($generated@@25 $generated@@71 $generated@@68) $generated@@69 $generated@@70))
)))
(assert (forall (($generated@@72 T@U) ($generated@@73 T@U) ) (! (= ($generated@@43 $generated@@44 $generated@@72 ($generated@@45 $generated@@73)) (forall (($generated@@74 T@U) ) (!  (=> (< 0 ($generated@@24 $generated@@72 $generated@@74)) ($generated@@58 $generated@@74 $generated@@73))
 :pattern ( ($generated@@24 $generated@@72 $generated@@74))
)))
 :pattern ( ($generated@@43 $generated@@44 $generated@@72 ($generated@@45 $generated@@73)))
)))
(assert (forall (($generated@@75 T@U) ) (!  (=> ($generated@@58 $generated@@75 $generated) (and (= ($generated@@25 $generated@@6 ($generated@@49 $generated@@6 $generated@@75)) $generated@@75) ($generated@@43 $generated@@6 ($generated@@49 $generated@@6 $generated@@75) $generated)))
 :pattern ( ($generated@@58 $generated@@75 $generated))
)))
(assert (forall (($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@T) ) (! (= ($generated@@58 ($generated@@25 $generated@@78 $generated@@76) $generated@@77) ($generated@@43 $generated@@78 $generated@@76 $generated@@77))
 :pattern ( ($generated@@58 ($generated@@25 $generated@@78 $generated@@76) $generated@@77))
)))
(assert (forall (($generated@@80 T@U) ) (! (= ($generated@@46 $generated@@80) (forall (($generated@@81 T@U) ) (!  (and (<= 0 ($generated@@24 $generated@@80 $generated@@81)) (<= ($generated@@24 $generated@@80 $generated@@81) ($generated@@79 $generated@@80)))
 :pattern ( ($generated@@24 $generated@@80 $generated@@81))
)))
 :pattern ( ($generated@@46 $generated@@80))
)))
(assert (forall (($generated@@82 T@U) ) (! (<= 0 ($generated@@79 $generated@@82))
 :pattern ( ($generated@@79 $generated@@82))
)))
(assert (forall (($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ) (! (= ($generated@@67 $generated@@56 $generated@@83 ($generated@@57 $generated@@84) $generated@@85) (forall (($generated@@86 T@U) ) (!  (=> ($generated@@52 $generated@@83 $generated@@86) ($generated@@66 $generated@@86 $generated@@84 $generated@@85))
 :pattern ( ($generated@@52 $generated@@83 $generated@@86))
)))
 :pattern ( ($generated@@67 $generated@@56 $generated@@83 ($generated@@57 $generated@@84) $generated@@85))
)))
(assert (forall (($generated@@88 T@U) ) (! (= ($generated@@24 $generated@@87 $generated@@88) 0)
 :pattern ( ($generated@@24 $generated@@87 $generated@@88))
)))
(assert (forall (($generated@@90 T@U) ) (! (= ($generated@@89 ($generated@@57 $generated@@90)) $generated@@90)
 :pattern ( ($generated@@57 $generated@@90))
)))
(assert (forall (($generated@@91 T@U) ) (! (= ($generated@@20 ($generated@@57 $generated@@91)) $generated@@1)
 :pattern ( ($generated@@57 $generated@@91))
)))
(assert (forall (($generated@@93 T@U) ) (! (= ($generated@@92 ($generated@@45 $generated@@93)) $generated@@93)
 :pattern ( ($generated@@45 $generated@@93))
)))
(assert (forall (($generated@@94 T@U) ) (! (= ($generated@@20 ($generated@@45 $generated@@94)) $generated@@2)
 :pattern ( ($generated@@45 $generated@@94))
)))
(assert (forall (($generated@@95 T@U) ($generated@@96 T@T) ) (! (= ($generated@@49 $generated@@96 ($generated@@25 $generated@@96 $generated@@95)) $generated@@95)
 :pattern ( ($generated@@25 $generated@@96 $generated@@95))
)))
(assert (forall (($generated@@97 T@U) ) (!  (and (= (= ($generated@@79 $generated@@97) 0) (= $generated@@97 $generated@@87)) (=> (or (not (= ($generated@@79 $generated@@97) 0)) (not true)) (exists (($generated@@98 T@U) ) (! (< 0 ($generated@@24 $generated@@97 $generated@@98))
 :pattern ( ($generated@@24 $generated@@97 $generated@@98))
))))
 :pattern ( ($generated@@79 $generated@@97))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@107 T@T) ($generated@@108 T@T) ($generated@@109 T@T) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ) (! (= ($generated@@99 $generated@@107 $generated@@108 $generated@@109 ($generated@@104 $generated@@107 $generated@@108 $generated@@109 $generated@@111 $generated@@112 $generated@@113 $generated@@110) $generated@@112 $generated@@113) $generated@@110)
 :weight 0
)) (and (forall (($generated@@114 T@T) ($generated@@115 T@T) ($generated@@116 T@T) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ) (!  (or (= $generated@@119 $generated@@121) (= ($generated@@99 $generated@@114 $generated@@115 $generated@@116 ($generated@@104 $generated@@114 $generated@@115 $generated@@116 $generated@@118 $generated@@119 $generated@@120 $generated@@117) $generated@@121 $generated@@122) ($generated@@99 $generated@@114 $generated@@115 $generated@@116 $generated@@118 $generated@@121 $generated@@122)))
 :weight 0
)) (forall (($generated@@123 T@T) ($generated@@124 T@T) ($generated@@125 T@T) ($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ) (!  (or (= $generated@@129 $generated@@131) (= ($generated@@99 $generated@@123 $generated@@124 $generated@@125 ($generated@@104 $generated@@123 $generated@@124 $generated@@125 $generated@@127 $generated@@128 $generated@@129 $generated@@126) $generated@@130 $generated@@131) ($generated@@99 $generated@@123 $generated@@124 $generated@@125 $generated@@127 $generated@@130 $generated@@131)))
 :weight 0
)))) (= ($generated@@4 $generated@@100) 6)) (= ($generated@@4 $generated@@101) 7)) (forall (($generated@@132 T@T) ($generated@@133 T@T) ) (= ($generated@@4 ($generated@@103 $generated@@132 $generated@@133)) 8))) (forall (($generated@@134 T@T) ($generated@@135 T@T) ) (! (= ($generated@@105 ($generated@@103 $generated@@134 $generated@@135)) $generated@@134)
 :pattern ( ($generated@@103 $generated@@134 $generated@@135))
))) (forall (($generated@@136 T@T) ($generated@@137 T@T) ) (! (= ($generated@@106 ($generated@@103 $generated@@136 $generated@@137)) $generated@@137)
 :pattern ( ($generated@@103 $generated@@136 $generated@@137))
))))
(assert (forall (($generated@@138 T@U) ($generated@@139 T@U) ($generated@@140 T@U) ($generated@@141 Bool) ($generated@@142 T@U) ($generated@@143 T@U) ) (! (= ($generated@@9 ($generated@@99 $generated@@100 $generated@@101 $generated@@5 ($generated@@102 $generated@@138 $generated@@139 $generated@@140 $generated@@141) $generated@@142 $generated@@143))  (=> (and (or (not (= $generated@@142 $generated@@138)) (not true)) ($generated@@9 ($generated@@49 $generated@@5 ($generated@@21 $generated@@101 $generated@@22 ($generated@@21 $generated@@100 ($generated@@103 $generated@@101 $generated@@22) $generated@@139 $generated@@142) $generated@@140)))) $generated@@141))
 :pattern ( ($generated@@99 $generated@@100 $generated@@101 $generated@@5 ($generated@@102 $generated@@138 $generated@@139 $generated@@140 $generated@@141) $generated@@142 $generated@@143))
)))
(assert (forall (($generated@@144 T@U) ($generated@@145 T@U) ) (!  (=> ($generated@@58 $generated@@144 ($generated@@57 $generated@@145)) (and (= ($generated@@25 $generated@@56 ($generated@@49 $generated@@56 $generated@@144)) $generated@@144) ($generated@@43 $generated@@56 ($generated@@49 $generated@@56 $generated@@144) ($generated@@57 $generated@@145))))
 :pattern ( ($generated@@58 $generated@@144 ($generated@@57 $generated@@145)))
)))
(assert (forall (($generated@@146 T@U) ($generated@@147 T@U) ) (!  (=> ($generated@@58 $generated@@146 ($generated@@45 $generated@@147)) (and (= ($generated@@25 $generated@@44 ($generated@@49 $generated@@44 $generated@@146)) $generated@@146) ($generated@@43 $generated@@44 ($generated@@49 $generated@@44 $generated@@146) ($generated@@45 $generated@@147))))
 :pattern ( ($generated@@58 $generated@@146 ($generated@@45 $generated@@147)))
)))
(assert (forall (($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 T@U) ) (! (= ($generated@@67 $generated@@44 $generated@@148 ($generated@@45 $generated@@149) $generated@@150) (forall (($generated@@151 T@U) ) (!  (=> (< 0 ($generated@@24 $generated@@148 $generated@@151)) ($generated@@66 $generated@@151 $generated@@149 $generated@@150))
 :pattern ( ($generated@@24 $generated@@148 $generated@@151))
)))
 :pattern ( ($generated@@67 $generated@@44 $generated@@148 ($generated@@45 $generated@@149) $generated@@150))
)))
(assert (forall (($generated@@152 T@U) ($generated@@153 T@U) ) (! ($generated@@67 $generated@@6 $generated@@153 $generated $generated@@152)
 :pattern ( ($generated@@67 $generated@@6 $generated@@153 $generated $generated@@152))
)))
(assert (forall (($generated@@154 T@U) ) (! ($generated@@43 $generated@@6 $generated@@154 $generated)
 :pattern ( ($generated@@43 $generated@@6 $generated@@154 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@155 () T@U)
(declare-fun $generated@@156 () T@U)
(declare-fun $generated@@157 () Int)
(declare-fun $generated@@158 () T@U)
(declare-fun $generated@@159 () T@U)
(declare-fun $generated@@160 () T@U)
(declare-fun $generated@@161 (T@U) Bool)
(declare-fun $generated@@162 (T@U) Bool)
(declare-fun $generated@@163 () T@U)
(declare-fun $generated@@164 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 11) (let (($generated@@165 true))
(let (($generated@@166  (and (=> (= (ControlFlow 0 3) (- 0 4)) (forall (($generated@@167 Int) ) (! (= ($generated@@52 $generated@@156 ($generated@@25 $generated@@6 ($generated@@10 $generated@@167))) (> ($generated@@24 $generated@@155 ($generated@@25 $generated@@6 ($generated@@10 $generated@@167))) 0))
 :pattern ( ($generated@@24 $generated@@155 ($generated@@25 $generated@@6 ($generated@@10 $generated@@167))))
 :pattern ( ($generated@@52 $generated@@156 ($generated@@25 $generated@@6 ($generated@@10 $generated@@167))))
))) (=> (forall (($generated@@168 T@U) ) (! (= ($generated@@52 $generated@@156 ($generated@@25 $generated@@6 $generated@@168)) (> ($generated@@24 $generated@@155 ($generated@@25 $generated@@6 $generated@@168)) 0))
 :pattern ( ($generated@@24 $generated@@155 ($generated@@25 $generated@@6 $generated@@168)))
 :pattern ( ($generated@@52 $generated@@156 ($generated@@25 $generated@@6 $generated@@168)))
)) (=> (= (ControlFlow 0 3) (- 0 2)) ($generated@@62 $generated@@155 $generated@@87))))))
(let (($generated@@169  (=> (= $generated@@156 ($generated@@53 ($generated@@23 $generated@@155 0 $generated@@155))) (and (=> (= (ControlFlow 0 6) 3) $generated@@166) (=> (= (ControlFlow 0 6) 5) $generated@@165)))))
(let (($generated@@170  (=> (and (>= 0 ($generated@@24 $generated@@155 ($generated@@25 $generated@@6 ($generated@@10 $generated@@157)))) (= (ControlFlow 0 8) 6)) $generated@@169)))
(let (($generated@@171  (=> (and (> ($generated@@24 $generated@@155 ($generated@@25 $generated@@6 ($generated@@10 $generated@@157))) 0) (= (ControlFlow 0 7) 6)) $generated@@169)))
(let (($generated@@172  (and (=> (= (ControlFlow 0 9) 7) $generated@@171) (=> (= (ControlFlow 0 9) 8) $generated@@170))))
(let (($generated@@173 true))
(let (($generated@@174  (=> (= $generated@@158 ($generated@@102 $generated@@159 $generated@@160 $generated@@3 false)) (and (=> (= (ControlFlow 0 10) 9) $generated@@172) (=> (= (ControlFlow 0 10) 1) $generated@@173)))))
(let (($generated@@175  (=> (and (and ($generated@@161 $generated@@160) ($generated@@162 $generated@@160)) (and ($generated@@43 $generated@@44 $generated@@155 ($generated@@45 $generated)) ($generated@@67 $generated@@44 $generated@@155 ($generated@@45 $generated) $generated@@160))) (=> (and (and (and ($generated@@43 $generated@@56 $generated@@163 ($generated@@57 $generated)) ($generated@@67 $generated@@56 $generated@@163 ($generated@@57 $generated) $generated@@160)) true) (and (= 0 $generated@@164) (= (ControlFlow 0 11) 10))) $generated@@174))))
$generated@@175))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
