(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TagSet () T@U)
(declare-fun alloc () T@U)
(declare-fun allocName () T@U)
(declare-fun Tagclass._System.object? () T@U)
(declare-fun Tagclass._System.object () T@U)
(declare-fun class.TypeOfThis.LinkedList? () T@U)
(declare-fun Tagclass.TypeOfThis.LinkedList? () T@U)
(declare-fun Tagclass.TypeOfThis.LinkedList () T@U)
(declare-fun tytagFamily$object () T@U)
(declare-fun tytagFamily$LinkedList () T@U)
(declare-fun field$Repr () T@U)
(declare-fun field$Rapr () T@U)
(declare-fun field$S () T@U)
(declare-fun field$T () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun FDim (T@U) Int)
(declare-fun DeclName (T@U) T@U)
(declare-fun |Set#UnionOne| (T@U T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun Tclass.TypeOfThis.LinkedList (T@U) T@U)
(declare-fun Tclass.TypeOfThis.LinkedList? (T@U) T@U)
(declare-fun |Set#Empty| () T@U)
(declare-fun Tclass._System.object () T@U)
(declare-fun Tclass._System.object? () T@U)
(declare-fun TypeOfThis.LinkedList.Repr () T@U)
(declare-fun FieldOfDecl (T@U T@U) T@U)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun TypeOfThis.LinkedList.Rapr () T@U)
(declare-fun TypeOfThis.LinkedList.S () T@U)
(declare-fun TypeOfThis.LinkedList.T () T@U)
(declare-fun null () T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun SetType () T@T)
(declare-fun TSet (T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun Tag (T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun DeclType (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun Tclass.TypeOfThis.LinkedList?_0 (T@U) T@U)
(declare-fun Tclass.TypeOfThis.LinkedList_0 (T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TagSet alloc allocName Tagclass._System.object? Tagclass._System.object class.TypeOfThis.LinkedList? Tagclass.TypeOfThis.LinkedList? Tagclass.TypeOfThis.LinkedList tytagFamily$object tytagFamily$LinkedList field$Repr field$Rapr field$S field$T)
)
(assert (= (FDim alloc) 0))
(assert (= (DeclName alloc) allocName))
(assert (forall ((a T@U) (x@@2 T@U) ) (! (|Set#IsMember| (|Set#UnionOne| a x@@2) x@@2)
 :pattern ( (|Set#UnionOne| a x@@2))
)))
(assert (forall ((a@@0 T@U) (x@@3 T@U) (y T@U) ) (!  (=> (|Set#IsMember| a@@0 y) (|Set#IsMember| (|Set#UnionOne| a@@0 x@@3) y))
 :pattern ( (|Set#UnionOne| a@@0 x@@3) (|Set#IsMember| a@@0 y))
)))
(assert (forall ((a@@1 T@U) (x@@4 T@U) (o T@U) ) (! (= (|Set#IsMember| (|Set#UnionOne| a@@1 x@@4) o)  (or (= o x@@4) (|Set#IsMember| a@@1 o)))
 :pattern ( (|Set#IsMember| (|Set#UnionOne| a@@1 x@@4) o))
)))
(assert (= (Ctor refType) 3))
(assert (forall ((TypeOfThis.LinkedList$T T@U) (|c#0| T@U) ($h T@U) ) (! (= ($IsAlloc refType |c#0| (Tclass.TypeOfThis.LinkedList TypeOfThis.LinkedList$T) $h) ($IsAlloc refType |c#0| (Tclass.TypeOfThis.LinkedList? TypeOfThis.LinkedList$T) $h))
 :pattern ( ($IsAlloc refType |c#0| (Tclass.TypeOfThis.LinkedList TypeOfThis.LinkedList$T) $h))
 :pattern ( ($IsAlloc refType |c#0| (Tclass.TypeOfThis.LinkedList? TypeOfThis.LinkedList$T) $h))
)))
(assert (forall ((o@@0 T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o@@0))
 :pattern ( (|Set#IsMember| |Set#Empty| o@@0))
)))
(assert (forall ((|c#0@@0| T@U) ($h@@0 T@U) ) (! (= ($IsAlloc refType |c#0@@0| Tclass._System.object $h@@0) ($IsAlloc refType |c#0@@0| Tclass._System.object? $h@@0))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass._System.object $h@@0))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass._System.object? $h@@0))
)))
(assert (= (FDim TypeOfThis.LinkedList.Repr) 0))
(assert (= (FieldOfDecl class.TypeOfThis.LinkedList? field$Repr) TypeOfThis.LinkedList.Repr))
(assert ($IsGhostField TypeOfThis.LinkedList.Repr))
(assert (= (FDim TypeOfThis.LinkedList.Rapr) 0))
(assert (= (FieldOfDecl class.TypeOfThis.LinkedList? field$Rapr) TypeOfThis.LinkedList.Rapr))
(assert ($IsGhostField TypeOfThis.LinkedList.Rapr))
(assert (= (FDim TypeOfThis.LinkedList.S) 0))
(assert (= (FieldOfDecl class.TypeOfThis.LinkedList? field$S) TypeOfThis.LinkedList.S))
(assert ($IsGhostField TypeOfThis.LinkedList.S))
(assert (= (FDim TypeOfThis.LinkedList.T) 0))
(assert (= (FieldOfDecl class.TypeOfThis.LinkedList? field$T) TypeOfThis.LinkedList.T))
(assert ($IsGhostField TypeOfThis.LinkedList.T))
(assert  (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 4)) (= (Ctor BoxType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 6))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((TypeOfThis.LinkedList$T@@0 T@U) ($o T@U) ($h@@1 T@U) ) (! (= ($IsAlloc refType $o (Tclass.TypeOfThis.LinkedList? TypeOfThis.LinkedList$T@@0) $h@@1)  (or (= $o null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@1 $o) alloc)))))
 :pattern ( ($IsAlloc refType $o (Tclass.TypeOfThis.LinkedList? TypeOfThis.LinkedList$T@@0) $h@@1))
)))
(assert (forall (($o@@0 T@U) ($h@@2 T@U) ) (! (= ($IsAlloc refType $o@@0 Tclass._System.object? $h@@2)  (or (= $o@@0 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o@@0) alloc)))))
 :pattern ( ($IsAlloc refType $o@@0 Tclass._System.object? $h@@2))
)))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o@@1 T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o@@1) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o@@1) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o@@1) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((x@@5 T@U) (T T@T) ) (! (= (Lit T x@@5) x@@5)
 :pattern ( (Lit T x@@5))
)))
(assert (forall ((x@@6 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@6)) x@@6)
 :pattern ( ($Unbox T@@0 x@@6))
)))
(assert (= (Ctor SetType) 7))
(assert (forall ((v T@U) (t0@@0 T@U) ) (! (= ($Is SetType v (TSet t0@@0)) (forall ((bx T@U) ) (!  (=> (|Set#IsMember| v bx) ($IsBox bx t0@@0))
 :pattern ( (|Set#IsMember| v bx))
)))
 :pattern ( ($Is SetType v (TSet t0@@0)))
)))
(assert ($IsGhostField alloc))
(assert (forall ((TypeOfThis.LinkedList$T@@1 T@U) (|c#0@@1| T@U) ) (! (= ($Is refType |c#0@@1| (Tclass.TypeOfThis.LinkedList TypeOfThis.LinkedList$T@@1))  (and ($Is refType |c#0@@1| (Tclass.TypeOfThis.LinkedList? TypeOfThis.LinkedList$T@@1)) (or (not (= |c#0@@1| null)) (not true))))
 :pattern ( ($Is refType |c#0@@1| (Tclass.TypeOfThis.LinkedList TypeOfThis.LinkedList$T@@1)))
 :pattern ( ($Is refType |c#0@@1| (Tclass.TypeOfThis.LinkedList? TypeOfThis.LinkedList$T@@1)))
)))
(assert (forall ((v@@0 T@U) (t T@U) (h@@0 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t h@@0) ($IsAlloc T@@1 v@@0 t h@@0))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t h@@0))
)))
(assert (forall ((h@@1 T@U) (k@@0 T@U) (bx@@0 T@U) (t@@0 T@U) ) (!  (=> ($HeapSucc h@@1 k@@0) (=> ($IsAllocBox bx@@0 t@@0 h@@1) ($IsAllocBox bx@@0 t@@0 k@@0)))
 :pattern ( ($HeapSucc h@@1 k@@0) ($IsAllocBox bx@@0 t@@0 h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@1 T@U) (v@@1 T@U) (t@@1 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@2 k@@1) (=> ($IsAlloc T@@2 v@@1 t@@1 h@@2) ($IsAlloc T@@2 v@@1 t@@1 k@@1)))
 :pattern ( ($HeapSucc h@@2 k@@1) ($IsAlloc T@@2 v@@1 t@@1 h@@2))
)))
(assert (forall ((TypeOfThis.LinkedList$T@@2 T@U) ) (!  (and (= (Tag (Tclass.TypeOfThis.LinkedList? TypeOfThis.LinkedList$T@@2)) Tagclass.TypeOfThis.LinkedList?) (= (TagFamily (Tclass.TypeOfThis.LinkedList? TypeOfThis.LinkedList$T@@2)) tytagFamily$LinkedList))
 :pattern ( (Tclass.TypeOfThis.LinkedList? TypeOfThis.LinkedList$T@@2))
)))
(assert (forall ((TypeOfThis.LinkedList$T@@3 T@U) ) (!  (and (= (Tag (Tclass.TypeOfThis.LinkedList TypeOfThis.LinkedList$T@@3)) Tagclass.TypeOfThis.LinkedList) (= (TagFamily (Tclass.TypeOfThis.LinkedList TypeOfThis.LinkedList$T@@3)) tytagFamily$LinkedList))
 :pattern ( (Tclass.TypeOfThis.LinkedList TypeOfThis.LinkedList$T@@3))
)))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 Tclass._System.object?) (and (= ($Box refType ($Unbox refType bx@@1)) bx@@1) ($Is refType ($Unbox refType bx@@1) Tclass._System.object?)))
 :pattern ( ($IsBox bx@@1 Tclass._System.object?))
)))
(assert (forall ((bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 Tclass._System.object) (and (= ($Box refType ($Unbox refType bx@@2)) bx@@2) ($Is refType ($Unbox refType bx@@2) Tclass._System.object)))
 :pattern ( ($IsBox bx@@2 Tclass._System.object))
)))
(assert (forall ((TypeOfThis.LinkedList$T@@4 T@U) ($o@@1 T@U) ) (! (= ($Is refType $o@@1 (Tclass.TypeOfThis.LinkedList? TypeOfThis.LinkedList$T@@4))  (or (= $o@@1 null) (= (dtype $o@@1) (Tclass.TypeOfThis.LinkedList? TypeOfThis.LinkedList$T@@4))))
 :pattern ( ($Is refType $o@@1 (Tclass.TypeOfThis.LinkedList? TypeOfThis.LinkedList$T@@4)))
)))
(assert (forall ((|c#0@@2| T@U) ) (! (= ($Is refType |c#0@@2| Tclass._System.object)  (and ($Is refType |c#0@@2| Tclass._System.object?) (or (not (= |c#0@@2| null)) (not true))))
 :pattern ( ($Is refType |c#0@@2| Tclass._System.object))
 :pattern ( ($Is refType |c#0@@2| Tclass._System.object?))
)))
(assert (forall ((TypeOfThis.LinkedList$T@@5 T@U) ($h@@3 T@U) ($o@@2 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@3) (and (or (not (= $o@@2 null)) (not true)) (= (dtype $o@@2) (Tclass.TypeOfThis.LinkedList? TypeOfThis.LinkedList$T@@5)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@3 $o@@2) alloc)))) ($IsAlloc SetType ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@3 $o@@2) TypeOfThis.LinkedList.Repr)) (TSet (Tclass.TypeOfThis.LinkedList TypeOfThis.LinkedList$T@@5)) $h@@3))
 :pattern ( ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@3 $o@@2) TypeOfThis.LinkedList.Repr)) (Tclass.TypeOfThis.LinkedList? TypeOfThis.LinkedList$T@@5))
)))
(assert (forall ((TypeOfThis.LinkedList$T@@6 T@U) ($h@@4 T@U) ($o@@3 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@4) (and (or (not (= $o@@3 null)) (not true)) (= (dtype $o@@3) (Tclass.TypeOfThis.LinkedList? TypeOfThis.LinkedList$T@@6)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@4 $o@@3) alloc)))) ($IsAlloc SetType ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@4 $o@@3) TypeOfThis.LinkedList.Rapr)) (TSet (Tclass.TypeOfThis.LinkedList? TypeOfThis.LinkedList$T@@6)) $h@@4))
 :pattern ( ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@4 $o@@3) TypeOfThis.LinkedList.Rapr)) (Tclass.TypeOfThis.LinkedList? TypeOfThis.LinkedList$T@@6))
)))
(assert (forall ((TypeOfThis.LinkedList$T@@7 T@U) ($h@@5 T@U) ($o@@4 T@U) ) (!  (=> (and ($IsGoodHeap $h@@5) (and (or (not (= $o@@4 null)) (not true)) (= (dtype $o@@4) (Tclass.TypeOfThis.LinkedList? TypeOfThis.LinkedList$T@@7)))) ($Is SetType ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@5 $o@@4) TypeOfThis.LinkedList.S)) (TSet Tclass._System.object)))
 :pattern ( ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@5 $o@@4) TypeOfThis.LinkedList.S)) (Tclass.TypeOfThis.LinkedList? TypeOfThis.LinkedList$T@@7))
)))
(assert (forall ((TypeOfThis.LinkedList$T@@8 T@U) ($h@@6 T@U) ($o@@5 T@U) ) (!  (=> (and ($IsGoodHeap $h@@6) (and (or (not (= $o@@5 null)) (not true)) (= (dtype $o@@5) (Tclass.TypeOfThis.LinkedList? TypeOfThis.LinkedList$T@@8)))) ($Is SetType ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@6 $o@@5) TypeOfThis.LinkedList.T)) (TSet Tclass._System.object?)))
 :pattern ( ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@6 $o@@5) TypeOfThis.LinkedList.T)) (Tclass.TypeOfThis.LinkedList? TypeOfThis.LinkedList$T@@8))
)))
(assert (forall ((TypeOfThis.LinkedList$T@@9 T@U) ($h@@7 T@U) ($o@@6 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@7) (and (or (not (= $o@@6 null)) (not true)) (= (dtype $o@@6) (Tclass.TypeOfThis.LinkedList? TypeOfThis.LinkedList$T@@9)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@7 $o@@6) alloc)))) ($IsAlloc SetType ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@7 $o@@6) TypeOfThis.LinkedList.S)) (TSet Tclass._System.object) $h@@7))
 :pattern ( ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@7 $o@@6) TypeOfThis.LinkedList.S)) (Tclass.TypeOfThis.LinkedList? TypeOfThis.LinkedList$T@@9))
)))
(assert (forall ((TypeOfThis.LinkedList$T@@10 T@U) ($h@@8 T@U) ($o@@7 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@8) (and (or (not (= $o@@7 null)) (not true)) (= (dtype $o@@7) (Tclass.TypeOfThis.LinkedList? TypeOfThis.LinkedList$T@@10)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@8 $o@@7) alloc)))) ($IsAlloc SetType ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@8 $o@@7) TypeOfThis.LinkedList.T)) (TSet Tclass._System.object?) $h@@8))
 :pattern ( ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@8 $o@@7) TypeOfThis.LinkedList.T)) (Tclass.TypeOfThis.LinkedList? TypeOfThis.LinkedList$T@@10))
)))
(assert (forall ((a@@2 T@U) (b T@U) (c T@U) ) (!  (=> (or (not (= a@@2 c)) (not true)) (=> (and ($HeapSucc a@@2 b) ($HeapSucc b c)) ($HeapSucc a@@2 c)))
 :pattern ( ($HeapSucc a@@2 b) ($HeapSucc b c))
)))
(assert (forall ((cl T@U) (nm T@U) ) (!  (and (= (DeclType (FieldOfDecl cl nm)) cl) (= (DeclName (FieldOfDecl cl nm)) nm))
 :pattern ( (FieldOfDecl cl nm))
)))
(assert (forall ((v@@2 T@U) (t@@2 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@2) t@@2) ($Is T@@3 v@@2 t@@2))
 :pattern ( ($IsBox ($Box T@@3 v@@2) t@@2))
)))
(assert (forall ((v@@3 T@U) (t0@@1 T@U) (h@@3 T@U) ) (! (= ($IsAlloc SetType v@@3 (TSet t0@@1) h@@3) (forall ((bx@@3 T@U) ) (!  (=> (|Set#IsMember| v@@3 bx@@3) ($IsAllocBox bx@@3 t0@@1 h@@3))
 :pattern ( (|Set#IsMember| v@@3 bx@@3))
)))
 :pattern ( ($IsAlloc SetType v@@3 (TSet t0@@1) h@@3))
)))
(assert (forall (($o@@8 T@U) ) (! ($Is refType $o@@8 Tclass._System.object?)
 :pattern ( ($Is refType $o@@8 Tclass._System.object?))
)))
(assert (forall ((t@@3 T@U) ) (! (= (Inv0_TSet (TSet t@@3)) t@@3)
 :pattern ( (TSet t@@3))
)))
(assert (forall ((t@@4 T@U) ) (! (= (Tag (TSet t@@4)) TagSet)
 :pattern ( (TSet t@@4))
)))
(assert (forall ((TypeOfThis.LinkedList$T@@11 T@U) ) (! (= (Tclass.TypeOfThis.LinkedList?_0 (Tclass.TypeOfThis.LinkedList? TypeOfThis.LinkedList$T@@11)) TypeOfThis.LinkedList$T@@11)
 :pattern ( (Tclass.TypeOfThis.LinkedList? TypeOfThis.LinkedList$T@@11))
)))
(assert (forall ((TypeOfThis.LinkedList$T@@12 T@U) ) (! (= (Tclass.TypeOfThis.LinkedList_0 (Tclass.TypeOfThis.LinkedList TypeOfThis.LinkedList$T@@12)) TypeOfThis.LinkedList$T@@12)
 :pattern ( (Tclass.TypeOfThis.LinkedList TypeOfThis.LinkedList$T@@12))
)))
(assert (forall ((x@@7 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@7)) x@@7)
 :pattern ( ($Box T@@4 x@@7))
)))
(assert  (and (forall ((t0@@2 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@2 t1@@0 t2 (MapType1Store t0@@2 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o@@9 T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@9 $f))  (=> (and (or (not (= $o@@9 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@9) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@9 $f))
)))
(assert (forall ((bx@@4 T@U) (t@@5 T@U) ) (!  (=> ($IsBox bx@@4 (TSet t@@5)) (and (= ($Box SetType ($Unbox SetType bx@@4)) bx@@4) ($Is SetType ($Unbox SetType bx@@4) (TSet t@@5))))
 :pattern ( ($IsBox bx@@4 (TSet t@@5)))
)))
(assert (forall ((TypeOfThis.LinkedList$T@@13 T@U) (bx@@5 T@U) ) (!  (=> ($IsBox bx@@5 (Tclass.TypeOfThis.LinkedList? TypeOfThis.LinkedList$T@@13)) (and (= ($Box refType ($Unbox refType bx@@5)) bx@@5) ($Is refType ($Unbox refType bx@@5) (Tclass.TypeOfThis.LinkedList? TypeOfThis.LinkedList$T@@13))))
 :pattern ( ($IsBox bx@@5 (Tclass.TypeOfThis.LinkedList? TypeOfThis.LinkedList$T@@13)))
)))
(assert (forall ((TypeOfThis.LinkedList$T@@14 T@U) (bx@@6 T@U) ) (!  (=> ($IsBox bx@@6 (Tclass.TypeOfThis.LinkedList TypeOfThis.LinkedList$T@@14)) (and (= ($Box refType ($Unbox refType bx@@6)) bx@@6) ($Is refType ($Unbox refType bx@@6) (Tclass.TypeOfThis.LinkedList TypeOfThis.LinkedList$T@@14))))
 :pattern ( ($IsBox bx@@6 (Tclass.TypeOfThis.LinkedList TypeOfThis.LinkedList$T@@14)))
)))
(assert (forall ((h@@4 T@U) (r T@U) (f T@U) (x@@8 T@U) ) (!  (=> ($IsGoodHeap (MapType0Store refType (MapType0Type FieldType BoxType) h@@4 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@4 r) f x@@8))) ($HeapSucc h@@4 (MapType0Store refType (MapType0Type FieldType BoxType) h@@4 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@4 r) f x@@8))))
 :pattern ( (MapType0Store refType (MapType0Type FieldType BoxType) h@@4 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@4 r) f x@@8)))
)))
(assert (= (Tag Tclass._System.object?) Tagclass._System.object?))
(assert (= (TagFamily Tclass._System.object?) tytagFamily$object))
(assert (= (Tag Tclass._System.object) Tagclass._System.object))
(assert (= (TagFamily Tclass._System.object) tytagFamily$object))
(assert (forall ((TypeOfThis.LinkedList$T@@15 T@U) ($h@@9 T@U) ($o@@10 T@U) ) (!  (=> (and ($IsGoodHeap $h@@9) (and (or (not (= $o@@10 null)) (not true)) (= (dtype $o@@10) (Tclass.TypeOfThis.LinkedList? TypeOfThis.LinkedList$T@@15)))) ($Is SetType ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@9 $o@@10) TypeOfThis.LinkedList.Repr)) (TSet (Tclass.TypeOfThis.LinkedList TypeOfThis.LinkedList$T@@15))))
 :pattern ( ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@9 $o@@10) TypeOfThis.LinkedList.Repr)) (Tclass.TypeOfThis.LinkedList? TypeOfThis.LinkedList$T@@15))
)))
(assert (forall ((TypeOfThis.LinkedList$T@@16 T@U) ($h@@10 T@U) ($o@@11 T@U) ) (!  (=> (and ($IsGoodHeap $h@@10) (and (or (not (= $o@@11 null)) (not true)) (= (dtype $o@@11) (Tclass.TypeOfThis.LinkedList? TypeOfThis.LinkedList$T@@16)))) ($Is SetType ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@10 $o@@11) TypeOfThis.LinkedList.Rapr)) (TSet (Tclass.TypeOfThis.LinkedList? TypeOfThis.LinkedList$T@@16))))
 :pattern ( ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@10 $o@@11) TypeOfThis.LinkedList.Rapr)) (Tclass.TypeOfThis.LinkedList? TypeOfThis.LinkedList$T@@16))
)))
(assert (forall ((x@@9 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@9)) (Lit BoxType ($Box T@@5 x@@9)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@9)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun this () T@U)
(declare-fun TypeOfThis.LinkedList$T@@17 () T@U)
(declare-fun $Heap () T@U)
(declare-fun this.Repr () T@U)
(declare-fun this.Rapr () T@U)
(declare-fun this.S () T@U)
(declare-fun this.T () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |ll#0| () T@U)
(declare-fun |o#0| () T@U)
(declare-fun $FunctionContextHeight () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 20) (let ((anon13_Else_correct  (=> (and (and (and (and (and (and (not (U_2_bool (Lit boolType (bool_2_U true)))) (not (U_2_bool (Lit boolType (bool_2_U true))))) (not (U_2_bool (Lit boolType (bool_2_U true))))) (not (U_2_bool (Lit boolType (bool_2_U true))))) (not (U_2_bool (Lit boolType (bool_2_U true))))) (not (U_2_bool (Lit boolType (bool_2_U true))))) (= (ControlFlow 0 18) (- 0 17))) false)))
(let ((anon13_Then_correct  (and (=> (= (ControlFlow 0 15) (- 0 16)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 this TypeOfThis.LinkedList.T))) (=> (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 this TypeOfThis.LinkedList.T)) (=> (= (ControlFlow 0 15) (- 0 14)) ($Is SetType (|Set#UnionOne| |Set#Empty| ($Box refType this)) (TSet Tclass._System.object?)))))))
(let ((anon12_Then_correct  (and (=> (= (ControlFlow 0 12) (- 0 13)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 this TypeOfThis.LinkedList.S))) (=> (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 this TypeOfThis.LinkedList.S)) (=> (= (ControlFlow 0 12) (- 0 11)) ($Is SetType (|Set#UnionOne| |Set#Empty| ($Box refType this)) (TSet Tclass._System.object)))))))
(let ((anon11_Then_correct  (=> (= (ControlFlow 0 10) (- 0 9)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 this TypeOfThis.LinkedList.Rapr)))))
(let ((anon10_Then_correct  (and (=> (= (ControlFlow 0 7) (- 0 8)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 this TypeOfThis.LinkedList.Repr))) (=> (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 this TypeOfThis.LinkedList.Repr)) (=> (= (ControlFlow 0 7) (- 0 6)) ($Is SetType (|Set#UnionOne| |Set#Empty| ($Box refType this)) (TSet (Tclass.TypeOfThis.LinkedList TypeOfThis.LinkedList$T@@17))))))))
(let ((anon9_Then_correct  (and (=> (= (ControlFlow 0 4) (- 0 5)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 this TypeOfThis.LinkedList.S))) (=> (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 this TypeOfThis.LinkedList.S)) (=> (= (ControlFlow 0 4) (- 0 3)) ($Is SetType (|Set#UnionOne| |Set#Empty| ($Box refType this)) (TSet Tclass._System.object)))))))
(let ((anon8_Then_correct  (=> (= (ControlFlow 0 2) (- 0 1)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 this TypeOfThis.LinkedList.T)))))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (=> (and (or (not (= this null)) (not true)) ($Is refType this (Tclass.TypeOfThis.LinkedList? TypeOfThis.LinkedList$T@@17))) (=> (and (and (and (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) alloc)))) (= ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) TypeOfThis.LinkedList.Repr)) this.Repr)) (and (= ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) TypeOfThis.LinkedList.Rapr)) this.Rapr) (= ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) TypeOfThis.LinkedList.S)) this.S))) (and (and (= ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) TypeOfThis.LinkedList.T)) this.T) (= $Heap@0 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap this (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) alloc ($Box boolType (bool_2_U true)))))) (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)))) (and (and (and (and (and (and (=> (= (ControlFlow 0 19) 2) anon8_Then_correct) (=> (= (ControlFlow 0 19) 4) anon9_Then_correct)) (=> (= (ControlFlow 0 19) 7) anon10_Then_correct)) (=> (= (ControlFlow 0 19) 10) anon11_Then_correct)) (=> (= (ControlFlow 0 19) 12) anon12_Then_correct)) (=> (= (ControlFlow 0 19) 15) anon13_Then_correct)) (=> (= (ControlFlow 0 19) 18) anon13_Else_correct)))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (=> (and (and ($Is refType |ll#0| (Tclass.TypeOfThis.LinkedList? TypeOfThis.LinkedList$T@@17)) ($IsAlloc refType |ll#0| (Tclass.TypeOfThis.LinkedList? TypeOfThis.LinkedList$T@@17) $Heap)) true) (=> (and (and (and ($Is refType |o#0| Tclass._System.object?) ($IsAlloc refType |o#0| Tclass._System.object? $Heap)) true) (and (= 0 $FunctionContextHeight) (= (ControlFlow 0 20) 19))) anon0_correct)))))
PreconditionGeneratedEntry_correct))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
