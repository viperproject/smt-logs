(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 (T@T) Int)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Bool) T@U)
(declare-fun $generated@@9 (T@U) Bool)
(declare-fun $generated@@10 (Int) T@U)
(declare-fun $generated@@11 (T@U) Int)
(declare-fun $generated@@12 (Real) T@U)
(declare-fun $generated@@13 (T@U) Real)
(declare-fun $generated@@20 (T@U) T@U)
(declare-fun $generated@@21 () Int)
(declare-fun $generated@@22 (T@U Int) Int)
(declare-fun $generated@@23 (T@U) T@U)
(declare-fun $generated@@24 (Int) Bool)
(declare-fun $generated@@25 (Int) Int)
(declare-fun $generated@@28 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@29 () T@U)
(declare-fun $generated@@32 (T@U Int) Int)
(declare-fun $generated@@33 (Int) Bool)
(declare-fun $generated@@34 (T@T T@U) T@U)
(declare-fun $generated@@41 () T@U)
(declare-fun $generated@@51 (T@T T@U) T@U)
(declare-fun $generated@@52 (T@T T@U) T@U)
(declare-fun $generated@@55 (T@T T@U T@U) Bool)
(declare-fun $generated@@65 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@66 () T@T)
(declare-fun $generated@@67 () T@T)
(declare-fun $generated@@68 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@69 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@70 () T@T)
(declare-fun $generated@@71 (T@T T@T) T@T)
(declare-fun $generated@@72 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@73 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@74 (T@T) T@T)
(declare-fun $generated@@75 (T@T) T@T)
(declare-fun $generated@@124 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@4 $generated@@5) 0) (= ($generated@@4 $generated@@6) 1)) (= ($generated@@4 $generated@@7) 2)) (forall (($generated@@14 Bool) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Int) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Real) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3)
)
(assert (= ($generated@@20 $generated) $generated@@0))
(assert  (=> (<= 0 $generated@@21) (forall (($generated@@26 T@U) ($generated@@27 Int) ) (!  (=> (or ($generated@@24 $generated@@27) (and (< 0 $generated@@21) (<= ($generated@@25 0) $generated@@27))) (and (=> (<= 2 $generated@@27) (and ($generated@@24 (- $generated@@27 1)) ($generated@@24 (- $generated@@27 2)))) (= ($generated@@22 ($generated@@23 $generated@@26) $generated@@27) (ite (< $generated@@27 2) $generated@@27 (+ ($generated@@22 $generated@@26 (- $generated@@27 1)) ($generated@@22 $generated@@26 (- $generated@@27 2)))))))
 :pattern ( ($generated@@22 ($generated@@23 $generated@@26) $generated@@27))
))))
(assert (forall (($generated@@30 T@U) ($generated@@31 T@U) ) (! ($generated@@28 $generated@@6 $generated@@30 $generated@@29 $generated@@31)
 :pattern ( ($generated@@28 $generated@@6 $generated@@30 $generated@@29 $generated@@31))
)))
(assert  (=> (<= 1 $generated@@21) (forall (($generated@@35 T@U) ($generated@@36 Int) ) (!  (=> (or ($generated@@33 ($generated@@25 $generated@@36)) (and (< 1 $generated@@21) (<= ($generated@@25 1) ($generated@@25 $generated@@36)))) (and (=> (not ($generated@@9 ($generated@@34 $generated@@5 ($generated@@8 (< $generated@@36 3))))) (and ($generated@@33 ($generated@@25 (- $generated@@36 2))) ($generated@@33 ($generated@@25 (- $generated@@36 1))))) (= ($generated@@32 ($generated@@23 $generated@@35) ($generated@@25 $generated@@36)) (ite (< $generated@@36 3) 5 (let (($generated@@37 ($generated@@25 ($generated@@32 ($generated@@23 $generated@@35) ($generated@@25 (- $generated@@36 2))))))
(let (($generated@@38 ($generated@@25 ($generated@@32 ($generated@@23 $generated@@35) ($generated@@25 (- $generated@@36 1))))))
($generated@@25 (+ $generated@@37 $generated@@38))))))))
 :weight 3
 :pattern ( ($generated@@32 ($generated@@23 $generated@@35) ($generated@@25 $generated@@36)))
))))
(assert  (=> (<= 0 $generated@@21) (forall (($generated@@39 T@U) ($generated@@40 Int) ) (!  (=> (or ($generated@@24 $generated@@40) (and (< 0 $generated@@21) (<= ($generated@@25 0) $generated@@40))) (<= ($generated@@25 0) ($generated@@22 $generated@@39 $generated@@40)))
 :pattern ( ($generated@@22 $generated@@39 $generated@@40))
))))
(assert  (=> (<= 1 $generated@@21) (forall (($generated@@42 T@U) ($generated@@43 Int) ) (!  (=> (or ($generated@@33 $generated@@43) (and (< 1 $generated@@21) (<= ($generated@@25 1) $generated@@43))) (<= ($generated@@25 1) ($generated@@22 ($generated@@23 $generated@@41) $generated@@43)))
 :pattern ( ($generated@@32 $generated@@42 $generated@@43))
))))
(assert (forall (($generated@@44 Int) ) (! (= ($generated@@25 $generated@@44) $generated@@44)
 :pattern ( ($generated@@25 $generated@@44))
)))
(assert (forall (($generated@@45 T@U) ($generated@@46 T@T) ) (! (= ($generated@@34 $generated@@46 $generated@@45) $generated@@45)
 :pattern ( ($generated@@34 $generated@@46 $generated@@45))
)))
(assert  (=> (<= 1 $generated@@21) (forall (($generated@@47 T@U) ($generated@@48 Int) ) (!  (=> (or ($generated@@33 $generated@@48) (and (< 1 $generated@@21) (<= ($generated@@25 1) $generated@@48))) (and (=> (<= 3 $generated@@48) (and ($generated@@33 (- $generated@@48 2)) ($generated@@33 (- $generated@@48 1)))) (= ($generated@@32 ($generated@@23 $generated@@47) $generated@@48) (ite (< $generated@@48 3) 5 (let (($generated@@49 ($generated@@32 $generated@@47 (- $generated@@48 2))))
(let (($generated@@50 ($generated@@32 $generated@@47 (- $generated@@48 1))))
(+ $generated@@49 $generated@@50)))))))
 :pattern ( ($generated@@32 ($generated@@23 $generated@@47) $generated@@48))
))))
(assert (forall (($generated@@53 T@U) ($generated@@54 T@T) ) (! (= ($generated@@52 $generated@@54 ($generated@@51 $generated@@54 $generated@@53)) $generated@@53)
 :pattern ( ($generated@@51 $generated@@54 $generated@@53))
)))
(assert (forall (($generated@@56 T@U) ) (! (= ($generated@@55 $generated@@6 $generated@@56 $generated@@29) (<= ($generated@@25 0) ($generated@@11 $generated@@56)))
 :pattern ( ($generated@@55 $generated@@6 $generated@@56 $generated@@29))
)))
(assert  (=> (<= 0 $generated@@21) (forall (($generated@@57 T@U) ($generated@@58 Int) ) (!  (=> (or ($generated@@24 ($generated@@25 $generated@@58)) (and (< 0 $generated@@21) (<= ($generated@@25 0) $generated@@58))) (and (=> (not ($generated@@9 ($generated@@34 $generated@@5 ($generated@@8 (< $generated@@58 2))))) (and ($generated@@24 ($generated@@25 (- $generated@@58 1))) ($generated@@24 ($generated@@25 (- $generated@@58 2))))) (= ($generated@@22 ($generated@@23 $generated@@57) ($generated@@25 $generated@@58)) (ite (< $generated@@58 2) $generated@@58 (+ ($generated@@22 ($generated@@23 $generated@@57) ($generated@@25 (- $generated@@58 1))) ($generated@@22 ($generated@@23 $generated@@57) ($generated@@25 (- $generated@@58 2))))))))
 :weight 3
 :pattern ( ($generated@@22 ($generated@@23 $generated@@57) ($generated@@25 $generated@@58)))
))))
(assert (forall (($generated@@59 T@U) ($generated@@60 T@T) ) (! (= ($generated@@51 $generated@@60 ($generated@@52 $generated@@60 $generated@@59)) $generated@@59)
 :pattern ( ($generated@@52 $generated@@60 $generated@@59))
)))
(assert (forall (($generated@@61 T@U) ($generated@@62 Int) ) (! (= ($generated@@22 ($generated@@23 $generated@@61) $generated@@62) ($generated@@22 $generated@@61 $generated@@62))
 :pattern ( ($generated@@22 ($generated@@23 $generated@@61) $generated@@62))
)))
(assert (forall (($generated@@63 T@U) ($generated@@64 Int) ) (! (= ($generated@@32 ($generated@@23 $generated@@63) $generated@@64) ($generated@@32 $generated@@63 $generated@@64))
 :pattern ( ($generated@@32 ($generated@@23 $generated@@63) $generated@@64))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@76 T@T) ($generated@@77 T@T) ($generated@@78 T@T) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (! (= ($generated@@65 $generated@@76 $generated@@77 $generated@@78 ($generated@@72 $generated@@76 $generated@@77 $generated@@78 $generated@@80 $generated@@81 $generated@@82 $generated@@79) $generated@@81 $generated@@82) $generated@@79)
 :weight 0
)) (and (forall (($generated@@83 T@T) ($generated@@84 T@T) ($generated@@85 T@T) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ) (!  (or (= $generated@@88 $generated@@90) (= ($generated@@65 $generated@@83 $generated@@84 $generated@@85 ($generated@@72 $generated@@83 $generated@@84 $generated@@85 $generated@@87 $generated@@88 $generated@@89 $generated@@86) $generated@@90 $generated@@91) ($generated@@65 $generated@@83 $generated@@84 $generated@@85 $generated@@87 $generated@@90 $generated@@91)))
 :weight 0
)) (forall (($generated@@92 T@T) ($generated@@93 T@T) ($generated@@94 T@T) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ) (!  (or (= $generated@@98 $generated@@100) (= ($generated@@65 $generated@@92 $generated@@93 $generated@@94 ($generated@@72 $generated@@92 $generated@@93 $generated@@94 $generated@@96 $generated@@97 $generated@@98 $generated@@95) $generated@@99 $generated@@100) ($generated@@65 $generated@@92 $generated@@93 $generated@@94 $generated@@96 $generated@@99 $generated@@100)))
 :weight 0
)))) (= ($generated@@4 $generated@@66) 3)) (= ($generated@@4 $generated@@67) 4)) (forall (($generated@@101 T@T) ($generated@@102 T@T) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ) (! (= ($generated@@69 $generated@@101 $generated@@102 ($generated@@73 $generated@@101 $generated@@102 $generated@@104 $generated@@105 $generated@@103) $generated@@105) $generated@@103)
 :weight 0
))) (forall (($generated@@106 T@T) ($generated@@107 T@T) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (!  (or (= $generated@@110 $generated@@111) (= ($generated@@69 $generated@@106 $generated@@107 ($generated@@73 $generated@@106 $generated@@107 $generated@@109 $generated@@110 $generated@@108) $generated@@111) ($generated@@69 $generated@@106 $generated@@107 $generated@@109 $generated@@111)))
 :weight 0
))) (= ($generated@@4 $generated@@70) 5)) (forall (($generated@@112 T@T) ($generated@@113 T@T) ) (= ($generated@@4 ($generated@@71 $generated@@112 $generated@@113)) 6))) (forall (($generated@@114 T@T) ($generated@@115 T@T) ) (! (= ($generated@@74 ($generated@@71 $generated@@114 $generated@@115)) $generated@@114)
 :pattern ( ($generated@@71 $generated@@114 $generated@@115))
))) (forall (($generated@@116 T@T) ($generated@@117 T@T) ) (! (= ($generated@@75 ($generated@@71 $generated@@116 $generated@@117)) $generated@@117)
 :pattern ( ($generated@@71 $generated@@116 $generated@@117))
))))
(assert (forall (($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 Bool) ($generated@@122 T@U) ($generated@@123 T@U) ) (! (= ($generated@@9 ($generated@@65 $generated@@66 $generated@@67 $generated@@5 ($generated@@68 $generated@@118 $generated@@119 $generated@@120 $generated@@121) $generated@@122 $generated@@123))  (=> (and (or (not (= $generated@@122 $generated@@118)) (not true)) ($generated@@9 ($generated@@51 $generated@@5 ($generated@@69 $generated@@67 $generated@@70 ($generated@@69 $generated@@66 ($generated@@71 $generated@@67 $generated@@70) $generated@@119 $generated@@122) $generated@@120)))) $generated@@121))
 :pattern ( ($generated@@65 $generated@@66 $generated@@67 $generated@@5 ($generated@@68 $generated@@118 $generated@@119 $generated@@120 $generated@@121) $generated@@122 $generated@@123))
)))
(assert (= ($generated@@20 $generated@@29) $generated@@2))
(assert (= ($generated@@124 $generated@@29) $generated@@3))
(assert (forall (($generated@@125 Int) ) (! (= ($generated@@52 $generated@@6 ($generated@@10 ($generated@@25 $generated@@125))) ($generated@@34 $generated@@70 ($generated@@52 $generated@@6 ($generated@@10 $generated@@125))))
 :pattern ( ($generated@@52 $generated@@6 ($generated@@10 ($generated@@25 $generated@@125))))
)))
(assert (forall (($generated@@126 T@U) ($generated@@127 T@T) ) (! (= ($generated@@52 $generated@@127 ($generated@@34 $generated@@127 $generated@@126)) ($generated@@34 $generated@@70 ($generated@@52 $generated@@127 $generated@@126)))
 :pattern ( ($generated@@52 $generated@@127 ($generated@@34 $generated@@127 $generated@@126)))
)))
(assert (forall (($generated@@128 T@U) ($generated@@129 T@U) ) (! ($generated@@28 $generated@@6 $generated@@129 $generated $generated@@128)
 :pattern ( ($generated@@28 $generated@@6 $generated@@129 $generated $generated@@128))
)))
(assert (forall (($generated@@130 T@U) ) (! ($generated@@55 $generated@@6 $generated@@130 $generated)
 :pattern ( ($generated@@55 $generated@@6 $generated@@130 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@131 () Int)
(declare-fun $generated@@132 () Int)
(declare-fun $generated@@133 () T@U)
(declare-fun $generated@@134 () Int)
(declare-fun $generated@@135 () Int)
(declare-fun $generated@@136 () Int)
(declare-fun $generated@@137 () Int)
(declare-fun $generated@@138 () Int)
(declare-fun $generated@@139 () T@U)
(declare-fun $generated@@140 () T@U)
(declare-fun $generated@@141 (T@U) Bool)
(declare-fun $generated@@142 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 14) (let (($generated@@143  (=> (= (ControlFlow 0 4) (- 0 3)) (<= ($generated@@25 1) ($generated@@22 ($generated@@23 ($generated@@23 $generated@@41)) $generated@@131)))))
(let (($generated@@144  (=> (<= 3 $generated@@131) (=> (and (= $generated@@132 (- $generated@@131 2)) ($generated@@28 $generated@@6 ($generated@@10 $generated@@132) $generated $generated@@133)) (and (=> (= (ControlFlow 0 6) (- 0 12)) (<= ($generated@@25 1) $generated@@132)) (=> (<= ($generated@@25 1) $generated@@132) (and (=> (= (ControlFlow 0 6) (- 0 11)) (or (<= 0 $generated@@131) (= $generated@@132 $generated@@131))) (=> (or (<= 0 $generated@@131) (= $generated@@132 $generated@@131)) (and (=> (= (ControlFlow 0 6) (- 0 10)) (< $generated@@132 $generated@@131)) (=> (< $generated@@132 $generated@@131) (=> ($generated@@33 (- $generated@@131 2)) (=> (and (= $generated@@134 ($generated@@32 ($generated@@23 $generated@@41) (- $generated@@131 2))) ($generated@@33 (- $generated@@131 2))) (=> (and (and ($generated@@55 $generated@@6 ($generated@@10 $generated@@134) $generated) (= $generated@@135 $generated@@134)) (and (= $generated@@136 (- $generated@@131 1)) ($generated@@28 $generated@@6 ($generated@@10 $generated@@136) $generated $generated@@133))) (and (=> (= (ControlFlow 0 6) (- 0 9)) (<= ($generated@@25 1) $generated@@136)) (=> (<= ($generated@@25 1) $generated@@136) (and (=> (= (ControlFlow 0 6) (- 0 8)) (or (<= 0 $generated@@131) (= $generated@@136 $generated@@131))) (=> (or (<= 0 $generated@@131) (= $generated@@136 $generated@@131)) (and (=> (= (ControlFlow 0 6) (- 0 7)) (< $generated@@136 $generated@@131)) (=> (< $generated@@136 $generated@@131) (=> (and (and (and ($generated@@33 (- $generated@@131 1)) (= $generated@@137 ($generated@@32 ($generated@@23 $generated@@41) (- $generated@@131 1)))) (and ($generated@@33 (- $generated@@131 1)) ($generated@@55 $generated@@6 ($generated@@10 $generated@@137) $generated))) (and (and (= $generated@@138 $generated@@137) (= ($generated@@32 ($generated@@23 $generated@@41) $generated@@131) (+ $generated@@135 $generated@@138))) (and ($generated@@55 $generated@@6 ($generated@@10 ($generated@@32 ($generated@@23 $generated@@41) $generated@@131)) $generated) (= (ControlFlow 0 6) 4)))) $generated@@143))))))))))))))))))))
(let (($generated@@145  (=> (and (and (< $generated@@131 3) (= ($generated@@32 ($generated@@23 $generated@@41) $generated@@131) ($generated@@25 5))) (and ($generated@@55 $generated@@6 ($generated@@10 ($generated@@32 ($generated@@23 $generated@@41) $generated@@131)) $generated) (= (ControlFlow 0 5) 4))) $generated@@143)))
(let (($generated@@146  (=> (= (ControlFlow 0 2) (- 0 1)) ($generated@@55 $generated@@6 ($generated@@10 $generated@@131) $generated@@29))))
(let (($generated@@147  (=> (and (= $generated@@139 ($generated@@68 $generated@@140 $generated@@133 $generated@@1 false)) (<= ($generated@@25 1) $generated@@131)) (and (and (=> (= (ControlFlow 0 13) 2) $generated@@146) (=> (= (ControlFlow 0 13) 5) $generated@@145)) (=> (= (ControlFlow 0 13) 6) $generated@@144)))))
(let (($generated@@148  (=> (and (and ($generated@@141 $generated@@133) ($generated@@142 $generated@@133)) (and (= 1 $generated@@21) (= (ControlFlow 0 14) 13))) $generated@@147)))
$generated@@148)))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
