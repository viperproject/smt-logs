(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 (Bool) T@U)
(declare-fun $generated@@6 (T@U) Bool)
(declare-fun $generated@@7 (Int) T@U)
(declare-fun $generated@@8 (T@U) Int)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@17 () Int)
(declare-fun $generated@@18 (T@U T@U) T@U)
(declare-fun $generated@@19 (T@U T@U) Bool)
(declare-fun $generated@@20 (T@T T@U T@U) Bool)
(declare-fun $generated@@21 () T@T)
(declare-fun $generated@@22 (T@U) T@U)
(declare-fun $generated@@23 (T@U T@U) Int)
(declare-fun $generated@@24 (T@U T@U) Bool)
(declare-fun $generated@@28 (T@U) Bool)
(declare-fun $generated@@31 (T@U) Bool)
(declare-fun $generated@@32 (T@U T@U) Bool)
(declare-fun $generated@@33 (T@U T@U) T@U)
(declare-fun $generated@@39 (T@T T@U) T@U)
(declare-fun $generated@@47 (T@T T@U) T@U)
(declare-fun $generated@@48 (T@T T@U) T@U)
(declare-fun $generated@@51 (T@U T@U T@U) Bool)
(declare-fun $generated@@52 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@65 (T@U) Int)
(declare-fun $generated@@69 () T@U)
(declare-fun $generated@@71 (T@U) T@U)
(declare-fun $generated@@73 (T@U) T@U)
(declare-fun $generated@@83 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@84 () T@T)
(declare-fun $generated@@85 () T@T)
(declare-fun $generated@@86 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@87 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@88 () T@T)
(declare-fun $generated@@89 (T@T T@T) T@T)
(declare-fun $generated@@90 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@91 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@92 (T@T) T@T)
(declare-fun $generated@@93 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (forall (($generated@@11 Bool) ) (! (= ($generated@@6 ($generated@@5 $generated@@11)) $generated@@11)
 :pattern ( ($generated@@5 $generated@@11))
))) (forall (($generated@@12 T@U) ) (! (= ($generated@@5 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 Int) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))))
(assert (distinct $generated $generated@@0)
)
(assert (= ($generated@@1 $generated@@21) 3))
(assert  (=> (<= 0 $generated@@17) (forall (($generated@@25 T@U) ($generated@@26 T@U) ) (!  (=> (or ($generated@@19 $generated@@25 $generated@@26) (and (< 0 $generated@@17) (and ($generated@@20 $generated@@21 $generated@@26 ($generated@@22 $generated@@25)) (exists (($generated@@27 T@U) ) (!  (and ($generated@@24 $generated@@27 $generated@@25) (and (> ($generated@@23 $generated@@26 $generated@@27) 0) (> ($generated@@23 $generated@@26 $generated@@27) 0)))
 :pattern ( ($generated@@23 $generated@@26 $generated@@27))
))))) ($generated@@24 ($generated@@18 $generated@@25 $generated@@26) $generated@@25))
 :pattern ( ($generated@@18 $generated@@25 $generated@@26))
))))
(assert (forall (($generated@@29 T@U) ($generated@@30 T@U) ) (!  (=> ($generated@@20 $generated@@21 $generated@@29 ($generated@@22 $generated@@30)) ($generated@@28 $generated@@29))
 :pattern ( ($generated@@20 $generated@@21 $generated@@29 ($generated@@22 $generated@@30)))
)))
(assert  (=> (<= 0 $generated@@17) (forall (($generated@@34 T@U) ($generated@@35 T@U) ($generated@@36 T@U) ) (!  (=> (or ($generated@@19 $generated@@34 $generated@@36) (and (< 0 $generated@@17) (and (and ($generated@@31 $generated@@35) ($generated@@20 $generated@@21 $generated@@36 ($generated@@22 $generated@@34))) (exists (($generated@@37 T@U) ) (!  (and ($generated@@24 $generated@@37 $generated@@34) (and (> ($generated@@23 $generated@@36 $generated@@37) 0) (> ($generated@@23 $generated@@36 $generated@@37) 0)))
 :pattern ( ($generated@@23 $generated@@36 $generated@@37))
))))) (and ($generated@@32 $generated@@34 $generated@@36) (= ($generated@@18 $generated@@34 $generated@@36) (let (($generated@@38 ($generated@@33 $generated@@34 $generated@@36)))
$generated@@38))))
 :pattern ( ($generated@@18 $generated@@34 $generated@@36) ($generated@@31 $generated@@35))
))))
(assert (forall (($generated@@40 T@U) ($generated@@41 T@T) ) (! (= ($generated@@39 $generated@@41 $generated@@40) $generated@@40)
 :pattern ( ($generated@@39 $generated@@41 $generated@@40))
)))
(assert  (=> (<= 0 $generated@@17) (forall (($generated@@42 T@U) ($generated@@43 T@U) ($generated@@44 T@U) ) (!  (=> (or ($generated@@19 $generated@@42 ($generated@@39 $generated@@21 $generated@@44)) (and (< 0 $generated@@17) (and (and ($generated@@31 $generated@@43) ($generated@@20 $generated@@21 $generated@@44 ($generated@@22 $generated@@42))) (exists (($generated@@45 T@U) ) (!  (and ($generated@@24 $generated@@45 $generated@@42) (and (> ($generated@@23 ($generated@@39 $generated@@21 $generated@@44) $generated@@45) 0) (> ($generated@@23 ($generated@@39 $generated@@21 $generated@@44) $generated@@45) 0)))
 :pattern ( ($generated@@23 $generated@@44 $generated@@45))
))))) (and ($generated@@32 $generated@@42 ($generated@@39 $generated@@21 $generated@@44)) (= ($generated@@18 $generated@@42 ($generated@@39 $generated@@21 $generated@@44)) (let (($generated@@46 ($generated@@33 $generated@@42 ($generated@@39 $generated@@21 $generated@@44))))
$generated@@46))))
 :weight 3
 :pattern ( ($generated@@18 $generated@@42 ($generated@@39 $generated@@21 $generated@@44)) ($generated@@31 $generated@@43))
))))
(assert (forall (($generated@@49 T@U) ($generated@@50 T@T) ) (! (= ($generated@@48 $generated@@50 ($generated@@47 $generated@@50 $generated@@49)) $generated@@49)
 :pattern ( ($generated@@47 $generated@@50 $generated@@49))
)))
(assert (forall (($generated@@53 T@U) ($generated@@54 T@U) ($generated@@55 T@U) ($generated@@56 T@T) ) (! (= ($generated@@51 ($generated@@48 $generated@@56 $generated@@53) $generated@@54 $generated@@55) ($generated@@52 $generated@@56 $generated@@53 $generated@@54 $generated@@55))
 :pattern ( ($generated@@51 ($generated@@48 $generated@@56 $generated@@53) $generated@@54 $generated@@55))
)))
(assert (forall (($generated@@57 T@U) ($generated@@58 T@U) ) (! (= ($generated@@20 $generated@@21 $generated@@57 ($generated@@22 $generated@@58)) (forall (($generated@@59 T@U) ) (!  (=> (< 0 ($generated@@23 $generated@@57 $generated@@59)) ($generated@@24 $generated@@59 $generated@@58))
 :pattern ( ($generated@@23 $generated@@57 $generated@@59))
)))
 :pattern ( ($generated@@20 $generated@@21 $generated@@57 ($generated@@22 $generated@@58)))
)))
(assert (forall (($generated@@60 T@U) ($generated@@61 T@U) ) (!  (=> ($generated@@32 $generated@@60 $generated@@61) (> ($generated@@23 $generated@@61 ($generated@@33 $generated@@60 $generated@@61)) 0))
 :pattern ( ($generated@@33 $generated@@60 $generated@@61))
)))
(assert (forall (($generated@@62 T@U) ($generated@@63 T@U) ($generated@@64 T@T) ) (! (= ($generated@@24 ($generated@@48 $generated@@64 $generated@@62) $generated@@63) ($generated@@20 $generated@@64 $generated@@62 $generated@@63))
 :pattern ( ($generated@@24 ($generated@@48 $generated@@64 $generated@@62) $generated@@63))
)))
(assert (forall (($generated@@66 T@U) ) (! (= ($generated@@28 $generated@@66) (forall (($generated@@67 T@U) ) (!  (and (<= 0 ($generated@@23 $generated@@66 $generated@@67)) (<= ($generated@@23 $generated@@66 $generated@@67) ($generated@@65 $generated@@66)))
 :pattern ( ($generated@@23 $generated@@66 $generated@@67))
)))
 :pattern ( ($generated@@28 $generated@@66))
)))
(assert (forall (($generated@@68 T@U) ) (! (<= 0 ($generated@@65 $generated@@68))
 :pattern ( ($generated@@65 $generated@@68))
)))
(assert (forall (($generated@@70 T@U) ) (! (= ($generated@@23 $generated@@69 $generated@@70) 0)
 :pattern ( ($generated@@23 $generated@@69 $generated@@70))
)))
(assert (forall (($generated@@72 T@U) ) (! (= ($generated@@71 ($generated@@22 $generated@@72)) $generated@@72)
 :pattern ( ($generated@@22 $generated@@72))
)))
(assert (forall (($generated@@74 T@U) ) (! (= ($generated@@73 ($generated@@22 $generated@@74)) $generated)
 :pattern ( ($generated@@22 $generated@@74))
)))
(assert (forall (($generated@@75 T@U) ($generated@@76 T@T) ) (! (= ($generated@@47 $generated@@76 ($generated@@48 $generated@@76 $generated@@75)) $generated@@75)
 :pattern ( ($generated@@48 $generated@@76 $generated@@75))
)))
(assert  (=> (<= 0 $generated@@17) (forall (($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ) (!  (=> (and (or ($generated@@19 $generated@@78 $generated@@79) (and (< 0 $generated@@17) (and (and ($generated@@20 $generated@@21 $generated@@79 ($generated@@22 $generated@@78)) ($generated@@52 $generated@@21 $generated@@79 ($generated@@22 $generated@@78) $generated@@77)) (exists (($generated@@80 T@U) ) (!  (and ($generated@@24 $generated@@80 $generated@@78) (and (> ($generated@@23 $generated@@79 $generated@@80) 0) (> ($generated@@23 $generated@@79 $generated@@80) 0)))
 :pattern ( ($generated@@23 $generated@@79 $generated@@80))
))))) ($generated@@31 $generated@@77)) ($generated@@51 ($generated@@18 $generated@@78 $generated@@79) $generated@@78 $generated@@77))
 :pattern ( ($generated@@51 ($generated@@18 $generated@@78 $generated@@79) $generated@@78 $generated@@77))
))))
(assert (forall (($generated@@81 T@U) ) (!  (and (= (= ($generated@@65 $generated@@81) 0) (= $generated@@81 $generated@@69)) (=> (or (not (= ($generated@@65 $generated@@81) 0)) (not true)) (exists (($generated@@82 T@U) ) (! (< 0 ($generated@@23 $generated@@81 $generated@@82))
 :pattern ( ($generated@@23 $generated@@81 $generated@@82))
))))
 :pattern ( ($generated@@65 $generated@@81))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@94 T@T) ($generated@@95 T@T) ($generated@@96 T@T) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ) (! (= ($generated@@83 $generated@@94 $generated@@95 $generated@@96 ($generated@@90 $generated@@94 $generated@@95 $generated@@96 $generated@@98 $generated@@99 $generated@@100 $generated@@97) $generated@@99 $generated@@100) $generated@@97)
 :weight 0
)) (and (forall (($generated@@101 T@T) ($generated@@102 T@T) ($generated@@103 T@T) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ) (!  (or (= $generated@@106 $generated@@108) (= ($generated@@83 $generated@@101 $generated@@102 $generated@@103 ($generated@@90 $generated@@101 $generated@@102 $generated@@103 $generated@@105 $generated@@106 $generated@@107 $generated@@104) $generated@@108 $generated@@109) ($generated@@83 $generated@@101 $generated@@102 $generated@@103 $generated@@105 $generated@@108 $generated@@109)))
 :weight 0
)) (forall (($generated@@110 T@T) ($generated@@111 T@T) ($generated@@112 T@T) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ) (!  (or (= $generated@@116 $generated@@118) (= ($generated@@83 $generated@@110 $generated@@111 $generated@@112 ($generated@@90 $generated@@110 $generated@@111 $generated@@112 $generated@@114 $generated@@115 $generated@@116 $generated@@113) $generated@@117 $generated@@118) ($generated@@83 $generated@@110 $generated@@111 $generated@@112 $generated@@114 $generated@@117 $generated@@118)))
 :weight 0
)))) (= ($generated@@1 $generated@@84) 4)) (= ($generated@@1 $generated@@85) 5)) (forall (($generated@@119 T@T) ($generated@@120 T@T) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ) (! (= ($generated@@87 $generated@@119 $generated@@120 ($generated@@91 $generated@@119 $generated@@120 $generated@@122 $generated@@123 $generated@@121) $generated@@123) $generated@@121)
 :weight 0
))) (forall (($generated@@124 T@T) ($generated@@125 T@T) ($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 T@U) ) (!  (or (= $generated@@128 $generated@@129) (= ($generated@@87 $generated@@124 $generated@@125 ($generated@@91 $generated@@124 $generated@@125 $generated@@127 $generated@@128 $generated@@126) $generated@@129) ($generated@@87 $generated@@124 $generated@@125 $generated@@127 $generated@@129)))
 :weight 0
))) (= ($generated@@1 $generated@@88) 6)) (forall (($generated@@130 T@T) ($generated@@131 T@T) ) (= ($generated@@1 ($generated@@89 $generated@@130 $generated@@131)) 7))) (forall (($generated@@132 T@T) ($generated@@133 T@T) ) (! (= ($generated@@92 ($generated@@89 $generated@@132 $generated@@133)) $generated@@132)
 :pattern ( ($generated@@89 $generated@@132 $generated@@133))
))) (forall (($generated@@134 T@T) ($generated@@135 T@T) ) (! (= ($generated@@93 ($generated@@89 $generated@@134 $generated@@135)) $generated@@135)
 :pattern ( ($generated@@89 $generated@@134 $generated@@135))
))))
(assert (forall (($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 Bool) ($generated@@140 T@U) ($generated@@141 T@U) ) (! (= ($generated@@6 ($generated@@83 $generated@@84 $generated@@85 $generated@@2 ($generated@@86 $generated@@136 $generated@@137 $generated@@138 $generated@@139) $generated@@140 $generated@@141))  (=> (and (or (not (= $generated@@140 $generated@@136)) (not true)) ($generated@@6 ($generated@@47 $generated@@2 ($generated@@87 $generated@@85 $generated@@88 ($generated@@87 $generated@@84 ($generated@@89 $generated@@85 $generated@@88) $generated@@137 $generated@@140) $generated@@138)))) $generated@@139))
 :pattern ( ($generated@@83 $generated@@84 $generated@@85 $generated@@2 ($generated@@86 $generated@@136 $generated@@137 $generated@@138 $generated@@139) $generated@@140 $generated@@141))
)))
(assert (forall (($generated@@142 T@U) ($generated@@143 T@U) ) (!  (=> ($generated@@24 $generated@@142 ($generated@@22 $generated@@143)) (and (= ($generated@@48 $generated@@21 ($generated@@47 $generated@@21 $generated@@142)) $generated@@142) ($generated@@20 $generated@@21 ($generated@@47 $generated@@21 $generated@@142) ($generated@@22 $generated@@143))))
 :pattern ( ($generated@@24 $generated@@142 ($generated@@22 $generated@@143)))
)))
(assert (forall (($generated@@144 T@U) ($generated@@145 T@T) ) (! (= ($generated@@48 $generated@@145 ($generated@@39 $generated@@145 $generated@@144)) ($generated@@39 $generated@@88 ($generated@@48 $generated@@145 $generated@@144)))
 :pattern ( ($generated@@48 $generated@@145 ($generated@@39 $generated@@145 $generated@@144)))
)))
(assert (forall (($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ) (! (= ($generated@@52 $generated@@21 $generated@@146 ($generated@@22 $generated@@147) $generated@@148) (forall (($generated@@149 T@U) ) (!  (=> (< 0 ($generated@@23 $generated@@146 $generated@@149)) ($generated@@51 $generated@@149 $generated@@147 $generated@@148))
 :pattern ( ($generated@@23 $generated@@146 $generated@@149))
)))
 :pattern ( ($generated@@52 $generated@@21 $generated@@146 ($generated@@22 $generated@@147) $generated@@148))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@150 () T@U)
(declare-fun $generated@@151 () T@U)
(declare-fun $generated@@152 () T@U)
(declare-fun $generated@@153 () T@U)
(declare-fun $generated@@154 () T@U)
(declare-fun $generated@@155 () T@U)
(declare-fun $generated@@156 () T@U)
(declare-fun $generated@@157 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 7) (let (($generated@@158  (=> (= (ControlFlow 0 3) (- 0 2)) (exists (($generated@@159 T@U) )  (and ($generated@@24 $generated@@159 $generated@@150) (> ($generated@@23 $generated@@151 $generated@@159) 0))))))
(let (($generated@@160  (=> (and (not (and ($generated@@24 $generated@@152 $generated@@150) ($generated@@51 $generated@@152 $generated@@150 $generated@@153))) (= (ControlFlow 0 5) 3)) $generated@@158)))
(let (($generated@@161  (=> (and (and ($generated@@24 $generated@@152 $generated@@150) ($generated@@51 $generated@@152 $generated@@150 $generated@@153)) (= (ControlFlow 0 4) 3)) $generated@@158)))
(let (($generated@@162 true))
(let (($generated@@163  (=> (= $generated@@154 ($generated@@86 $generated@@155 $generated@@153 $generated@@0 false)) (=> (and (and ($generated@@24 $generated@@156 $generated@@150) ($generated@@51 $generated@@156 $generated@@150 $generated@@153)) (and (> ($generated@@23 $generated@@151 $generated@@156) 0) (> ($generated@@23 $generated@@151 $generated@@156) 0))) (and (and (=> (= (ControlFlow 0 6) 1) $generated@@162) (=> (= (ControlFlow 0 6) 4) $generated@@161)) (=> (= (ControlFlow 0 6) 5) $generated@@160))))))
(let (($generated@@164  (=> (and (and (and ($generated@@31 $generated@@153) ($generated@@157 $generated@@153)) ($generated@@20 $generated@@21 $generated@@151 ($generated@@22 $generated@@150))) (and (= 0 $generated@@17) (= (ControlFlow 0 7) 6))) $generated@@163)))
$generated@@164)))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
