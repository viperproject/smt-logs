(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun alloc () T@U)
(declare-fun |##_System._tuple#2._#Make2| () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun refType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun |#_System._tuple#2._#Make2| (T@U T@U) T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun _System.Tuple2._0 (T@U) T@U)
(declare-fun _System.Tuple2._1 (T@U) T@U)
(declare-fun BoxRank (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun Mod (Int Int) Int)
(declare-fun DatatypeTypeType () T@T)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct alloc |##_System._tuple#2._#Make2|)
)
(assert  (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 3)) (= (Ctor BoxType) 4)) (= (Ctor refType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 6))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((a T@U) (b T@U) (c T@U) ) (!  (=> (or (not (= a c)) (not true)) (=> (and ($HeapSucc a b) ($HeapSucc b c)) ($HeapSucc a c)))
 :pattern ( ($HeapSucc a b) ($HeapSucc b c))
)))
(assert (forall ((|a#0#0#0| T@U) (|a#0#1#0| T@U) ) (! (= (DatatypeCtorId (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|)) |##_System._tuple#2._#Make2|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|))
)))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| T@U) ) (! (= (_System.Tuple2._0 (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|)) |a#4#0#0|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|))
)))
(assert (forall ((|a#6#0#0| T@U) (|a#6#1#0| T@U) ) (! (= (_System.Tuple2._1 (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|)) |a#6#1#0|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|))
)))
(assert (forall ((x@@5 T@U) (T@@1 T@T) ) (! (= ($Unbox T@@1 ($Box T@@1 x@@5)) x@@5)
 :pattern ( ($Box T@@1 x@@5))
)))
(assert (forall ((|a#5#0#0| T@U) (|a#5#1#0| T@U) ) (! (< (BoxRank |a#5#0#0|) (DtRank (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|))
)))
(assert (forall ((|a#7#0#0| T@U) (|a#7#1#0| T@U) ) (! (< (BoxRank |a#7#1#0|) (DtRank (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|))
)))
(assert  (and (forall ((t0@@0 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 t2 (MapType1Store t0@@0 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((x@@6 Int) (y Int) ) (! (= (Mod x@@6 y) (mod x@@6 y))
 :pattern ( (Mod x@@6 y))
)))
(assert (= (Ctor DatatypeTypeType) 7))
(assert (forall ((d T@U) ) (! (= (BoxRank ($Box DatatypeTypeType d)) (DtRank d))
 :pattern ( (BoxRank ($Box DatatypeTypeType d)))
)))
(assert (forall ((|a#3#0#0| T@U) (|a#3#1#0| T@U) ) (! (= (|#_System._tuple#2._#Make2| (Lit BoxType |a#3#0#0|) (Lit BoxType |a#3#1#0|)) (Lit DatatypeTypeType (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| (Lit BoxType |a#3#0#0|) (Lit BoxType |a#3#1#0|)))
)))
(assert (forall ((x@@7 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@7))) (Lit BoxType ($Box intType (int_2_U x@@7))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@7))))
)))
(assert (forall ((x@@8 T@U) (T@@2 T@T) ) (! (= ($Box T@@2 (Lit T@@2 x@@8)) (Lit BoxType ($Box T@@2 x@@8)))
 :pattern ( ($Box T@@2 (Lit T@@2 x@@8)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |k#2_0@0| () Int)
(declare-fun |k#2_0#hi@0| () Int)
(declare-fun |$w$loop#2_0@0| () Bool)
(declare-fun |k#0_0@0| () Int)
(declare-fun |k#0_0#lo@0| () Int)
(declare-fun |k#0_0#hi@0| () Int)
(declare-fun |$w$loop#0_0@0| () Bool)
(declare-fun |$w$loop#0@0| () Bool)
(declare-fun |k#2_0#lo@0| () Int)
(declare-fun $Heap () T@U)
(declare-fun null () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun |_mcc#0#2_0@0| () Int)
(declare-fun |_mcc#1#2_0@0| () Int)
(declare-fun |k#1_0@0| () Int)
(declare-fun |k#1_0#hi@0| () Int)
(declare-fun |$w$loop#1_0@0| () Bool)
(declare-fun |k#1_0#lo@0| () Int)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun $FunctionContextHeight () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 52) (let ((anon57_Then_correct true))
(let ((anon55_Then_correct true))
(let ((anon54_LoopDone_correct true))
(let ((after_2_0_correct true))
(let ((anon62_Else_correct  (=> (and (or (not (= (Mod |k#2_0@0| (LitInt 2)) (LitInt 0))) (not true)) (= (ControlFlow 0 14) 12)) after_2_0_correct)))
(let ((anon61_Then_correct  (=> (and (= |k#2_0@0| |k#2_0#hi@0|) (= (ControlFlow 0 13) 12)) after_2_0_correct)))
(let ((anon62_Then_correct true))
(let ((anon61_Else_correct  (=> (or (not (= |k#2_0@0| |k#2_0#hi@0|)) (not true)) (and (=> (= (ControlFlow 0 15) (- 0 16)) (or (not (= (LitInt 2) 0)) (not true))) (=> (or (not (= (LitInt 2) 0)) (not true)) (and (=> (= (ControlFlow 0 15) 11) anon62_Then_correct) (=> (= (ControlFlow 0 15) 14) anon62_Else_correct)))))))
(let ((anon60_Else_correct  (=> |$w$loop#2_0@0| (and (=> (= (ControlFlow 0 17) 13) anon61_Then_correct) (=> (= (ControlFlow 0 17) 15) anon61_Else_correct)))))
(let ((anon60_Then_correct true))
(let ((anon59_LoopBody_correct  (and (=> (= (ControlFlow 0 18) 10) anon60_Then_correct) (=> (= (ControlFlow 0 18) 17) anon60_Else_correct))))
(let ((anon59_LoopDone_correct true))
(let ((anon59_LoopHead_correct  (=> (and (and (and (and (and (and (and (and (and (not false) (<= 0 |k#0_0@0|)) (= |k#0_0#lo@0| 0)) (= |k#0_0#hi@0| 10)) |$w$loop#0_0@0|) |$w$loop#0@0|) (<= 0 |k#2_0@0|)) (= |k#2_0#lo@0| 0)) (= |k#2_0#hi@0| 10)) (and (and (and (<= |k#2_0#lo@0| |k#2_0@0|) (<= |k#2_0@0| |k#2_0#hi@0|)) (forall (($o@@0 T@U) ) (!  (=> (and (or (not (= $o@@0 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@0) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@0) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@0)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@0))
))) (and ($HeapSucc $Heap $Heap) (forall (($o@@1 T@U) ($f@@0 T@U) ) (!  (=> (and (or (not (= $o@@1 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@1) alloc)))) (or (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@1) $f@@0) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@1) $f@@0)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@1 $f@@0))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@1) $f@@0))
))))) (and (=> (= (ControlFlow 0 19) 9) anon59_LoopDone_correct) (=> (= (ControlFlow 0 19) 18) anon59_LoopBody_correct)))))
(let ((anon58_Then_correct  (=> (= (Lit DatatypeTypeType (|#_System._tuple#2._#Make2| ($Box intType (int_2_U (LitInt 0))) ($Box intType (int_2_U (LitInt 0))))) (|#_System._tuple#2._#Make2| ($Box intType (int_2_U |_mcc#0#2_0@0|)) ($Box intType (int_2_U |_mcc#1#2_0@0|)))) (=> (and (= |k#2_0#lo@0| (LitInt 0)) (= |k#2_0#hi@0| (LitInt 10))) (and (=> (= (ControlFlow 0 20) (- 0 21)) (<= |k#2_0#lo@0| |k#2_0#hi@0|)) (=> (<= |k#2_0#lo@0| |k#2_0#hi@0|) (=> (= (ControlFlow 0 20) 19) anon59_LoopHead_correct)))))))
(let ((anon58_Else_correct true))
(let ((after_0_correct  (and (=> (= (ControlFlow 0 22) 20) anon58_Then_correct) (=> (= (ControlFlow 0 22) 8) anon58_Else_correct))))
(let ((after_1_0_correct  (=> (= (ControlFlow 0 28) 22) after_0_correct)))
(let ((anon57_Else_correct  (=> (and (or (not (= (Mod |k#1_0@0| (LitInt 2)) (LitInt 0))) (not true)) (= (ControlFlow 0 30) 28)) after_1_0_correct)))
(let ((anon56_Else_correct  (=> (or (not (= |k#1_0@0| |k#1_0#hi@0|)) (not true)) (and (=> (= (ControlFlow 0 31) (- 0 32)) (or (not (= (LitInt 2) 0)) (not true))) (=> (or (not (= (LitInt 2) 0)) (not true)) (and (=> (= (ControlFlow 0 31) 27) anon57_Then_correct) (=> (= (ControlFlow 0 31) 30) anon57_Else_correct)))))))
(let ((anon56_Then_correct  (=> (and (= |k#1_0@0| |k#1_0#hi@0|) (= (ControlFlow 0 29) 28)) after_1_0_correct)))
(let ((anon55_Else_correct  (=> |$w$loop#1_0@0| (and (=> (= (ControlFlow 0 33) 29) anon56_Then_correct) (=> (= (ControlFlow 0 33) 31) anon56_Else_correct)))))
(let ((anon54_LoopBody_correct  (and (=> (= (ControlFlow 0 34) 26) anon55_Then_correct) (=> (= (ControlFlow 0 34) 33) anon55_Else_correct))))
(let ((anon54_LoopHead_correct  (=> (and (and (and (and (and (and (and (and (and (not false) (<= 0 |k#0_0@0|)) (= |k#0_0#lo@0| 0)) (= |k#0_0#hi@0| 10)) |$w$loop#0_0@0|) |$w$loop#0@0|) (<= 0 |k#1_0@0|)) (= |k#1_0#lo@0| 0)) (= |k#1_0#hi@0| 10)) (and (and (and (<= |k#1_0#lo@0| |k#1_0@0|) (<= |k#1_0@0| |k#1_0#hi@0|)) (forall (($o@@2 T@U) ) (!  (=> (and (or (not (= $o@@2 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@2) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@2) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@2)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@2))
))) (and ($HeapSucc $Heap $Heap) (forall (($o@@3 T@U) ($f@@1 T@U) ) (!  (=> (and (or (not (= $o@@3 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@3) alloc)))) (or (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@3) $f@@1) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@3) $f@@1)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@3 $f@@1))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@3) $f@@1))
))))) (and (=> (= (ControlFlow 0 35) 25) anon54_LoopDone_correct) (=> (= (ControlFlow 0 35) 34) anon54_LoopBody_correct)))))
(let ((anon53_Then_correct  (=> (and (= |k#1_0#lo@0| (LitInt 0)) (= |k#1_0#hi@0| (LitInt 10))) (and (=> (= (ControlFlow 0 36) (- 0 37)) (<= |k#1_0#lo@0| |k#1_0#hi@0|)) (=> (<= |k#1_0#lo@0| |k#1_0#hi@0|) (=> (= (ControlFlow 0 36) 35) anon54_LoopHead_correct))))))
(let ((anon53_Else_correct  (=> (and (not (U_2_bool (Lit boolType (bool_2_U true)))) (= (ControlFlow 0 24) 22)) after_0_correct)))
(let ((anon52_Else_correct  (=> (U_2_bool (Lit boolType (bool_2_U true))) (and (=> (= (ControlFlow 0 38) 36) anon53_Then_correct) (=> (= (ControlFlow 0 38) 24) anon53_Else_correct)))))
(let ((anon52_Then_correct  (=> (and (not (U_2_bool (Lit boolType (bool_2_U true)))) (= (ControlFlow 0 23) 22)) after_0_correct)))
(let ((anon51_Else_correct  (=> |$w$loop#0@0| (and (=> (= (ControlFlow 0 39) 23) anon52_Then_correct) (=> (= (ControlFlow 0 39) 38) anon52_Else_correct)))))
(let ((anon51_Then_correct true))
(let ((anon50_LoopBody_correct  (and (=> (= (ControlFlow 0 40) 7) anon51_Then_correct) (=> (= (ControlFlow 0 40) 39) anon51_Else_correct))))
(let ((anon50_LoopDone_correct true))
(let ((after_0_0_correct  (=> (forall (($o@@4 T@U) ) (!  (=> (and (or (not (= $o@@4 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@4) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@4) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@4)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@4))
)) (=> (and ($HeapSucc $Heap $Heap) (forall (($o@@5 T@U) ($f@@2 T@U) ) (!  (=> (and (or (not (= $o@@5 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@5) alloc)))) (or (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@5) $f@@2) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@5) $f@@2)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@5 $f@@2))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@5) $f@@2))
))) (and (=> (= (ControlFlow 0 41) 6) anon50_LoopDone_correct) (=> (= (ControlFlow 0 41) 40) anon50_LoopBody_correct))))))
(let ((anon49_Else_correct  (=> (and (or (not (= (Mod |k#0_0@0| (LitInt 2)) (LitInt 0))) (not true)) (= (ControlFlow 0 43) 41)) after_0_0_correct)))
(let ((anon48_Then_correct  (=> (and (= |k#0_0@0| |k#0_0#hi@0|) (= (ControlFlow 0 42) 41)) after_0_0_correct)))
(let ((anon49_Then_correct true))
(let ((anon48_Else_correct  (=> (or (not (= |k#0_0@0| |k#0_0#hi@0|)) (not true)) (and (=> (= (ControlFlow 0 44) (- 0 45)) (or (not (= (LitInt 2) 0)) (not true))) (=> (or (not (= (LitInt 2) 0)) (not true)) (and (=> (= (ControlFlow 0 44) 5) anon49_Then_correct) (=> (= (ControlFlow 0 44) 43) anon49_Else_correct)))))))
(let ((anon47_Else_correct  (=> |$w$loop#0_0@0| (and (=> (= (ControlFlow 0 46) 42) anon48_Then_correct) (=> (= (ControlFlow 0 46) 44) anon48_Else_correct)))))
(let ((anon47_Then_correct true))
(let ((anon46_LoopBody_correct  (and (=> (= (ControlFlow 0 47) 4) anon47_Then_correct) (=> (= (ControlFlow 0 47) 46) anon47_Else_correct))))
(let ((anon46_LoopDone_correct true))
(let ((anon46_LoopHead_correct  (=> (and (and (and (and (not false) (<= 0 |k#0_0@0|)) (= |k#0_0#lo@0| 0)) (= |k#0_0#hi@0| 10)) (and (and (and (<= |k#0_0#lo@0| |k#0_0@0|) (<= |k#0_0@0| |k#0_0#hi@0|)) (forall (($o@@6 T@U) ) (!  (=> (and (or (not (= $o@@6 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@6) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@6) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@6)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@6))
))) (and ($HeapSucc $Heap $Heap) (forall (($o@@7 T@U) ($f@@3 T@U) ) (!  (=> (and (or (not (= $o@@7 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@7) alloc)))) (or (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@7) $f@@3) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@7) $f@@3)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@7 $f@@3))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@7) $f@@3))
))))) (and (=> (= (ControlFlow 0 48) 3) anon46_LoopDone_correct) (=> (= (ControlFlow 0 48) 47) anon46_LoopBody_correct)))))
(let ((anon45_Then_correct  (=> (and (= |k#0_0#lo@0| (LitInt 0)) (= |k#0_0#hi@0| (LitInt 10))) (and (=> (= (ControlFlow 0 49) (- 0 50)) (<= |k#0_0#lo@0| |k#0_0#hi@0|)) (=> (<= |k#0_0#lo@0| |k#0_0#hi@0|) (=> (= (ControlFlow 0 49) 48) anon46_LoopHead_correct))))))
(let ((anon45_Else_correct  (=> (and (not (U_2_bool (Lit boolType (bool_2_U true)))) (= (ControlFlow 0 2) (- 0 1))) false)))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (and (=> (= (ControlFlow 0 51) 49) anon45_Then_correct) (=> (= (ControlFlow 0 51) 2) anon45_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (and (= 0 $FunctionContextHeight) (= (ControlFlow 0 52) 51))) anon0_correct)))
PreconditionGeneratedEntry_correct))))))))))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
