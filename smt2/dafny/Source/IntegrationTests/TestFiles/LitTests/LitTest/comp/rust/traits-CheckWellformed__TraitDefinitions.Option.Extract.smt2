(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 (T@T) Int)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Bool) T@U)
(declare-fun $generated@@9 (T@U) Bool)
(declare-fun $generated@@10 (Int) T@U)
(declare-fun $generated@@11 (T@U) Int)
(declare-fun $generated@@12 (Real) T@U)
(declare-fun $generated@@13 (T@U) Real)
(declare-fun $generated@@20 () Int)
(declare-fun $generated@@21 (T@U T@U) T@U)
(declare-fun $generated@@22 (T@T T@U) T@U)
(declare-fun $generated@@23 () T@T)
(declare-fun $generated@@24 (T@U T@U) Bool)
(declare-fun $generated@@25 (T@T T@U T@U) Bool)
(declare-fun $generated@@26 (T@U) T@U)
(declare-fun $generated@@27 (T@U T@U) Bool)
(declare-fun $generated@@28 () T@T)
(declare-fun $generated@@29 (T@U) T@U)
(declare-fun $generated@@32 (T@U) T@U)
(declare-fun $generated@@33 () T@U)
(declare-fun $generated@@34 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@35 (T@U) Bool)
(declare-fun $generated@@38 (T@U T@U) Bool)
(declare-fun $generated@@39 (T@U) Bool)
(declare-fun $generated@@45 (T@U) Bool)
(declare-fun $generated@@48 (T@T T@U) T@U)
(declare-fun $generated@@49 (T@T T@U) T@U)
(declare-fun $generated@@53 (T@U) T@U)
(declare-fun $generated@@56 (T@U T@U T@U) Bool)
(declare-fun $generated@@61 (T@U) T@U)
(declare-fun $generated@@62 (T@U) T@U)
(declare-fun $generated@@71 (T@U T@U) Bool)
(declare-fun $generated@@76 (T@U) T@U)
(declare-fun $generated@@86 (T@U) Int)
(declare-fun $generated@@87 (T@U) Int)
(declare-fun $generated@@92 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@93 () T@T)
(declare-fun $generated@@94 () T@T)
(declare-fun $generated@@95 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@96 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@97 (T@T T@T) T@T)
(declare-fun $generated@@98 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@99 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@100 (T@T) T@T)
(declare-fun $generated@@101 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@4 $generated@@5) 0) (= ($generated@@4 $generated@@6) 1)) (= ($generated@@4 $generated@@7) 2)) (forall (($generated@@14 Bool) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Int) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Real) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3)
)
(assert  (and (= ($generated@@4 $generated@@23) 3) (= ($generated@@4 $generated@@28) 4)))
(assert  (=> (<= 1 $generated@@20) (forall (($generated@@30 T@U) ($generated@@31 T@U) ) (!  (=> (or ($generated@@24 $generated@@30 ($generated@@22 $generated@@23 $generated@@31)) (and (< 1 $generated@@20) (and ($generated@@25 $generated@@23 $generated@@31 ($generated@@26 $generated@@30)) (not ($generated@@9 ($generated@@22 $generated@@5 ($generated@@8 ($generated@@27 $generated@@30 ($generated@@22 $generated@@23 $generated@@31))))))))) (= ($generated@@21 $generated@@30 ($generated@@22 $generated@@23 $generated@@31)) ($generated@@22 $generated@@28 ($generated@@29 ($generated@@22 $generated@@23 $generated@@31)))))
 :weight 3
 :pattern ( ($generated@@21 $generated@@30 ($generated@@22 $generated@@23 $generated@@31)))
))))
(assert (= ($generated@@32 $generated@@33) $generated@@2))
(assert (forall (($generated@@36 T@U) ($generated@@37 T@U) ) (!  (=> ($generated@@35 $generated@@37) ($generated@@34 $generated@@23 $generated@@33 ($generated@@26 $generated@@36) $generated@@37))
 :pattern ( ($generated@@34 $generated@@23 $generated@@33 ($generated@@26 $generated@@36) $generated@@37))
)))
(assert  (=> (<= 0 $generated@@20) (forall (($generated@@40 T@U) ($generated@@41 T@U) ) (!  (=> (or ($generated@@38 $generated@@40 ($generated@@22 $generated@@23 $generated@@41)) (and (< 0 $generated@@20) ($generated@@25 $generated@@23 $generated@@41 ($generated@@26 $generated@@40)))) (= ($generated@@27 $generated@@40 ($generated@@22 $generated@@23 $generated@@41)) ($generated@@9 ($generated@@22 $generated@@5 ($generated@@8 ($generated@@39 ($generated@@22 $generated@@23 $generated@@41)))))))
 :weight 3
 :pattern ( ($generated@@27 $generated@@40 ($generated@@22 $generated@@23 $generated@@41)))
))))
(assert (forall (($generated@@42 T@U) ) (! ($generated@@25 $generated@@23 $generated@@33 ($generated@@26 $generated@@42))
 :pattern ( ($generated@@25 $generated@@23 $generated@@33 ($generated@@26 $generated@@42)))
)))
(assert (forall (($generated@@43 T@U) ($generated@@44 T@T) ) (! (= ($generated@@22 $generated@@44 $generated@@43) $generated@@43)
 :pattern ( ($generated@@22 $generated@@44 $generated@@43))
)))
(assert (forall (($generated@@46 T@U) ) (! (= ($generated@@45 $generated@@46) (= ($generated@@32 $generated@@46) $generated@@0))
 :pattern ( ($generated@@45 $generated@@46))
)))
(assert (forall (($generated@@47 T@U) ) (! (= ($generated@@39 $generated@@47) (= ($generated@@32 $generated@@47) $generated@@2))
 :pattern ( ($generated@@39 $generated@@47))
)))
(assert (forall (($generated@@50 T@U) ($generated@@51 T@T) ) (! (= ($generated@@49 $generated@@51 ($generated@@48 $generated@@51 $generated@@50)) $generated@@50)
 :pattern ( ($generated@@48 $generated@@51 $generated@@50))
)))
(assert (forall (($generated@@52 T@U) ) (!  (=> ($generated@@39 $generated@@52) (= $generated@@52 $generated@@33))
 :pattern ( ($generated@@39 $generated@@52))
)))
(assert (forall (($generated@@54 T@U) ) (!  (=> ($generated@@45 $generated@@54) (exists (($generated@@55 T@U) ) (= $generated@@54 ($generated@@53 $generated@@55))))
 :pattern ( ($generated@@45 $generated@@54))
)))
(assert (forall (($generated@@57 T@U) ($generated@@58 T@U) ($generated@@59 T@U) ($generated@@60 T@T) ) (! (= ($generated@@56 ($generated@@49 $generated@@60 $generated@@57) $generated@@58 $generated@@59) ($generated@@34 $generated@@60 $generated@@57 $generated@@58 $generated@@59))
 :pattern ( ($generated@@56 ($generated@@49 $generated@@60 $generated@@57) $generated@@58 $generated@@59))
)))
(assert (forall (($generated@@63 T@U) ) (!  (and (= ($generated@@61 ($generated@@26 $generated@@63)) $generated@@1) (= ($generated@@62 ($generated@@26 $generated@@63)) $generated@@3))
 :pattern ( ($generated@@26 $generated@@63))
)))
(assert (forall (($generated@@64 T@U) ($generated@@65 T@U) ($generated@@66 T@U) ) (!  (=> ($generated@@35 $generated@@66) (= ($generated@@34 $generated@@23 ($generated@@53 $generated@@65) ($generated@@26 $generated@@64) $generated@@66) ($generated@@56 $generated@@65 $generated@@64 $generated@@66)))
 :pattern ( ($generated@@34 $generated@@23 ($generated@@53 $generated@@65) ($generated@@26 $generated@@64) $generated@@66))
)))
(assert  (=> (<= 1 $generated@@20) (forall (($generated@@67 T@U) ($generated@@68 T@U) ) (!  (=> (or ($generated@@24 $generated@@67 $generated@@68) (and (< 1 $generated@@20) (and ($generated@@25 $generated@@23 $generated@@68 ($generated@@26 $generated@@67)) (not ($generated@@27 $generated@@67 $generated@@68))))) (= ($generated@@21 $generated@@67 $generated@@68) ($generated@@29 $generated@@68)))
 :pattern ( ($generated@@21 $generated@@67 $generated@@68))
))))
(assert (forall (($generated@@69 T@U) ($generated@@70 T@U) ) (!  (=> ($generated@@25 $generated@@23 $generated@@70 ($generated@@26 $generated@@69)) (or ($generated@@45 $generated@@70) ($generated@@39 $generated@@70)))
 :pattern ( ($generated@@39 $generated@@70) ($generated@@25 $generated@@23 $generated@@70 ($generated@@26 $generated@@69)))
 :pattern ( ($generated@@45 $generated@@70) ($generated@@25 $generated@@23 $generated@@70 ($generated@@26 $generated@@69)))
)))
(assert (forall (($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@T) ) (! (= ($generated@@71 ($generated@@49 $generated@@74 $generated@@72) $generated@@73) ($generated@@25 $generated@@74 $generated@@72 $generated@@73))
 :pattern ( ($generated@@71 ($generated@@49 $generated@@74 $generated@@72) $generated@@73))
)))
(assert (forall (($generated@@75 T@U) ) (! (= ($generated@@32 ($generated@@53 $generated@@75)) $generated@@0)
 :pattern ( ($generated@@53 $generated@@75))
)))
(assert (forall (($generated@@77 T@U) ) (! (= ($generated@@76 ($generated@@26 $generated@@77)) $generated@@77)
 :pattern ( ($generated@@26 $generated@@77))
)))
(assert (forall (($generated@@78 T@U) ) (! (= ($generated@@29 ($generated@@53 $generated@@78)) $generated@@78)
 :pattern ( ($generated@@53 $generated@@78))
)))
(assert (forall (($generated@@79 T@U) ($generated@@80 T@T) ) (! (= ($generated@@48 $generated@@80 ($generated@@49 $generated@@80 $generated@@79)) $generated@@79)
 :pattern ( ($generated@@49 $generated@@80 $generated@@79))
)))
(assert (forall (($generated@@81 T@U) ($generated@@82 T@U) ) (! (= ($generated@@25 $generated@@23 ($generated@@53 $generated@@82) ($generated@@26 $generated@@81)) ($generated@@71 $generated@@82 $generated@@81))
 :pattern ( ($generated@@25 $generated@@23 ($generated@@53 $generated@@82) ($generated@@26 $generated@@81)))
)))
(assert  (=> (<= 1 $generated@@20) (forall (($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ) (!  (=> (and (or ($generated@@24 $generated@@84 $generated@@85) (and (< 1 $generated@@20) (and ($generated@@34 $generated@@23 $generated@@85 ($generated@@26 $generated@@84) $generated@@83) (not ($generated@@27 $generated@@84 $generated@@85))))) ($generated@@35 $generated@@83)) ($generated@@56 ($generated@@21 $generated@@84 $generated@@85) $generated@@84 $generated@@83))
 :pattern ( ($generated@@56 ($generated@@21 $generated@@84 $generated@@85) $generated@@84 $generated@@83))
))))
(assert (forall (($generated@@88 T@U) ) (! (< ($generated@@86 $generated@@88) ($generated@@87 ($generated@@53 $generated@@88)))
 :pattern ( ($generated@@53 $generated@@88))
)))
(assert (forall (($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ) (!  (=> (and ($generated@@35 $generated@@91) (and ($generated@@45 $generated@@89) ($generated@@34 $generated@@23 $generated@@89 ($generated@@26 $generated@@90) $generated@@91))) ($generated@@56 ($generated@@29 $generated@@89) $generated@@90 $generated@@91))
 :pattern ( ($generated@@56 ($generated@@29 $generated@@89) $generated@@90 $generated@@91))
)))
(assert  (and (and (and (and (and (and (and (and (forall (($generated@@102 T@T) ($generated@@103 T@T) ($generated@@104 T@T) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ) (! (= ($generated@@92 $generated@@102 $generated@@103 $generated@@104 ($generated@@98 $generated@@102 $generated@@103 $generated@@104 $generated@@106 $generated@@107 $generated@@108 $generated@@105) $generated@@107 $generated@@108) $generated@@105)
 :weight 0
)) (and (forall (($generated@@109 T@T) ($generated@@110 T@T) ($generated@@111 T@T) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ) (!  (or (= $generated@@114 $generated@@116) (= ($generated@@92 $generated@@109 $generated@@110 $generated@@111 ($generated@@98 $generated@@109 $generated@@110 $generated@@111 $generated@@113 $generated@@114 $generated@@115 $generated@@112) $generated@@116 $generated@@117) ($generated@@92 $generated@@109 $generated@@110 $generated@@111 $generated@@113 $generated@@116 $generated@@117)))
 :weight 0
)) (forall (($generated@@118 T@T) ($generated@@119 T@T) ($generated@@120 T@T) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ) (!  (or (= $generated@@124 $generated@@126) (= ($generated@@92 $generated@@118 $generated@@119 $generated@@120 ($generated@@98 $generated@@118 $generated@@119 $generated@@120 $generated@@122 $generated@@123 $generated@@124 $generated@@121) $generated@@125 $generated@@126) ($generated@@92 $generated@@118 $generated@@119 $generated@@120 $generated@@122 $generated@@125 $generated@@126)))
 :weight 0
)))) (= ($generated@@4 $generated@@93) 5)) (= ($generated@@4 $generated@@94) 6)) (forall (($generated@@127 T@T) ($generated@@128 T@T) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ) (! (= ($generated@@96 $generated@@127 $generated@@128 ($generated@@99 $generated@@127 $generated@@128 $generated@@130 $generated@@131 $generated@@129) $generated@@131) $generated@@129)
 :weight 0
))) (forall (($generated@@132 T@T) ($generated@@133 T@T) ($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ) (!  (or (= $generated@@136 $generated@@137) (= ($generated@@96 $generated@@132 $generated@@133 ($generated@@99 $generated@@132 $generated@@133 $generated@@135 $generated@@136 $generated@@134) $generated@@137) ($generated@@96 $generated@@132 $generated@@133 $generated@@135 $generated@@137)))
 :weight 0
))) (forall (($generated@@138 T@T) ($generated@@139 T@T) ) (= ($generated@@4 ($generated@@97 $generated@@138 $generated@@139)) 7))) (forall (($generated@@140 T@T) ($generated@@141 T@T) ) (! (= ($generated@@100 ($generated@@97 $generated@@140 $generated@@141)) $generated@@140)
 :pattern ( ($generated@@97 $generated@@140 $generated@@141))
))) (forall (($generated@@142 T@T) ($generated@@143 T@T) ) (! (= ($generated@@101 ($generated@@97 $generated@@142 $generated@@143)) $generated@@143)
 :pattern ( ($generated@@97 $generated@@142 $generated@@143))
))))
(assert (forall (($generated@@144 T@U) ($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 Bool) ($generated@@148 T@U) ($generated@@149 T@U) ) (! (= ($generated@@9 ($generated@@92 $generated@@93 $generated@@94 $generated@@5 ($generated@@95 $generated@@144 $generated@@145 $generated@@146 $generated@@147) $generated@@148 $generated@@149))  (=> (and (or (not (= $generated@@148 $generated@@144)) (not true)) ($generated@@9 ($generated@@48 $generated@@5 ($generated@@96 $generated@@94 $generated@@28 ($generated@@96 $generated@@93 ($generated@@97 $generated@@94 $generated@@28) $generated@@145 $generated@@148) $generated@@146)))) $generated@@147))
 :pattern ( ($generated@@92 $generated@@93 $generated@@94 $generated@@5 ($generated@@95 $generated@@144 $generated@@145 $generated@@146 $generated@@147) $generated@@148 $generated@@149))
)))
(assert (forall (($generated@@150 T@U) ) (! (= ($generated@@86 ($generated@@49 $generated@@23 $generated@@150)) ($generated@@87 $generated@@150))
 :pattern ( ($generated@@86 ($generated@@49 $generated@@23 $generated@@150)))
)))
(assert (forall (($generated@@151 T@U) ($generated@@152 T@U) ) (!  (=> ($generated@@71 $generated@@152 ($generated@@26 $generated@@151)) (and (= ($generated@@49 $generated@@23 ($generated@@48 $generated@@23 $generated@@152)) $generated@@152) ($generated@@25 $generated@@23 ($generated@@48 $generated@@23 $generated@@152) ($generated@@26 $generated@@151))))
 :pattern ( ($generated@@71 $generated@@152 ($generated@@26 $generated@@151)))
)))
(assert (= $generated@@33 ($generated@@22 $generated@@23 $generated@@33)))
(assert  (=> (<= 1 $generated@@20) (forall (($generated@@153 T@U) ($generated@@154 T@U) ) (!  (=> (or ($generated@@24 $generated@@153 $generated@@154) (and (< 1 $generated@@20) (and ($generated@@25 $generated@@23 $generated@@154 ($generated@@26 $generated@@153)) (not ($generated@@27 $generated@@153 $generated@@154))))) ($generated@@71 ($generated@@21 $generated@@153 $generated@@154) $generated@@153))
 :pattern ( ($generated@@21 $generated@@153 $generated@@154))
))))
(assert  (=> (<= 0 $generated@@20) (forall (($generated@@155 T@U) ($generated@@156 T@U) ) (!  (=> (or ($generated@@38 $generated@@155 $generated@@156) (and (< 0 $generated@@20) ($generated@@25 $generated@@23 $generated@@156 ($generated@@26 $generated@@155)))) (= ($generated@@27 $generated@@155 $generated@@156) ($generated@@39 $generated@@156)))
 :pattern ( ($generated@@27 $generated@@155 $generated@@156))
))))
(assert (forall (($generated@@157 T@U) ) (! (= ($generated@@53 ($generated@@22 $generated@@28 $generated@@157)) ($generated@@22 $generated@@23 ($generated@@53 $generated@@157)))
 :pattern ( ($generated@@53 ($generated@@22 $generated@@28 $generated@@157)))
)))
(assert (forall (($generated@@158 T@U) ($generated@@159 T@T) ) (! (= ($generated@@49 $generated@@159 ($generated@@22 $generated@@159 $generated@@158)) ($generated@@22 $generated@@28 ($generated@@49 $generated@@159 $generated@@158)))
 :pattern ( ($generated@@49 $generated@@159 ($generated@@22 $generated@@159 $generated@@158)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@160 () T@U)
(declare-fun $generated@@161 () T@U)
(declare-fun $generated@@162 () T@U)
(declare-fun $generated@@163 () T@U)
(declare-fun $generated@@164 () T@U)
(declare-fun $generated@@165 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 5) (let (($generated@@166  (=> (= (ControlFlow 0 3) (- 0 2)) ($generated@@45 $generated@@160))))
(let (($generated@@167 true))
(let (($generated@@168  (=> (and (and (= $generated@@161 ($generated@@95 $generated@@162 $generated@@163 $generated false)) ($generated@@56 ($generated@@49 $generated@@23 $generated@@160) ($generated@@26 $generated@@164) $generated@@163)) (and ($generated@@38 $generated@@164 $generated@@160) (not ($generated@@27 $generated@@164 $generated@@160)))) (and (=> (= (ControlFlow 0 4) 1) $generated@@167) (=> (= (ControlFlow 0 4) 3) $generated@@166)))))
(let (($generated@@169  (=> (and ($generated@@35 $generated@@163) ($generated@@165 $generated@@163)) (=> (and (and ($generated@@25 $generated@@23 $generated@@160 ($generated@@26 $generated@@164)) ($generated@@34 $generated@@23 $generated@@160 ($generated@@26 $generated@@164) $generated@@163)) (and (= 1 $generated@@20) (= (ControlFlow 0 5) 4))) $generated@@168))))
$generated@@169)))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
